
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   0:	2000a340 	.word	0x2000a340
   4:	000079d5 	.word	0x000079d5
   8:	00021619 	.word	0x00021619
	int rc;
	const char *name_key = name;
   c:	00007a05 	.word	0x00007a05
{
  10:	00007a05 	.word	0x00007a05

	if (load_arg && load_arg->subtree &&
  14:	00007a05 	.word	0x00007a05
  18:	00007a05 	.word	0x00007a05
	...
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
		return 0;
	}

	if (load_arg && load_arg->cb) {
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
  2c:	0000772d 	.word	0x0000772d
  30:	00007a05 	.word	0x00007a05
  34:	00000000 	.word	0x00000000
  38:	000076d9 	.word	0x000076d9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
  3c:	00020469 	.word	0x00020469

00000040 <_irq_vector_table>:
  40:	00007995 000187f1 00007995 00007995     .y.......y...y..
		ch = settings_parse_and_lookup(name, &name_key);
  50:	00007995 00007995 00007995 00007995     .y...y...y...y..
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
  60:	00007995 00007995 00007995 00007995     .y...y...y...y..
			LOG_ERR("set-value failure. key: %s error(%d)",
  70:	00007995 00007995 00007995 00007995     .y...y...y...y..
  80:	00007995 00007995 00007995 00007995     .y...y...y...y..
  90:	00007995 00007995 00007995 00007995     .y...y...y...y..
  a0:	00007995 00007995 00007995 00007995     .y...y...y...y..
  b0:	00007995 00007995 00007995 00007995     .y...y...y...y..
  c0:	00007995 00007995 00007995 00007995     .y...y...y...y..
  d0:	00007995 00007995 00007995 00007995     .y...y...y...y..
  e0:	00007995 00007995 00007995 00007995     .y...y...y...y..
  f0:	00007995 00007995 00007995 00007995     .y...y...y...y..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b96e 	b.w	3f4 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9d08      	ldr	r5, [sp, #32]
     136:	460e      	mov	r6, r1
     138:	4604      	mov	r4, r0
     13a:	468c      	mov	ip, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8081 	bne.w	244 <CONFIG_UART_MUX_RX_STACK_SIZE+0x44>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d945      	bls.n	1d4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x14>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa06 f302 	lsl.w	r3, r6, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0c03 	orr.w	ip, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbc f6fe 	udiv	r6, ip, lr
     16c:	b2b9      	uxth	r1, r7
     16e:	fb0e cc16 	mls	ip, lr, r6, ip
     172:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     176:	fb06 f001 	mul.w	r0, r6, r1
     17a:	4298      	cmp	r0, r3
     17c:	d909      	bls.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     17e:	18fb      	adds	r3, r7, r3
     180:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     184:	f080 8115 	bcs.w	3b2 <CONFIG_BT_DEVICE_APPEARANCE+0x71>
     188:	4298      	cmp	r0, r3
     18a:	f240 8112 	bls.w	3b2 <CONFIG_BT_DEVICE_APPEARANCE+0x71>
     18e:	3e02      	subs	r6, #2
     190:	443b      	add	r3, r7
     192:	1a1b      	subs	r3, r3, r0
     194:	b2a4      	uxth	r4, r4
     196:	fbb3 f0fe 	udiv	r0, r3, lr
     19a:	fb0e 3310 	mls	r3, lr, r0, r3
     19e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a2:	fb00 f101 	mul.w	r1, r0, r1
     1a6:	42a1      	cmp	r1, r4
     1a8:	d909      	bls.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1aa:	193c      	adds	r4, r7, r4
     1ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b0:	f080 8101 	bcs.w	3b6 <CONFIG_BT_DEVICE_APPEARANCE+0x75>
     1b4:	42a1      	cmp	r1, r4
     1b6:	f240 80fe 	bls.w	3b6 <CONFIG_BT_DEVICE_APPEARANCE+0x75>
     1ba:	3802      	subs	r0, #2
     1bc:	443c      	add	r4, r7
     1be:	1a64      	subs	r4, r4, r1
     1c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     1c4:	2100      	movs	r1, #0
     1c6:	b11d      	cbz	r5, 1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     1c8:	40d4      	lsrs	r4, r2
     1ca:	2300      	movs	r3, #0
     1cc:	e9c5 4300 	strd	r4, r3, [r5]
     1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d4:	b902      	cbnz	r2, 1d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x18>
     1d6:	deff      	udf	#255	; 0xff
     1d8:	fab2 f282 	clz	r2, r2
     1dc:	2a00      	cmp	r2, #0
     1de:	d14f      	bne.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     1e0:	1bcb      	subs	r3, r1, r7
     1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e6:	fa1f f887 	uxth.w	r8, r7
     1ea:	2101      	movs	r1, #1
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c26      	lsrs	r6, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     1fa:	fb08 f30c 	mul.w	r3, r8, ip
     1fe:	42b3      	cmp	r3, r6
     200:	d907      	bls.n	212 <CONFIG_UART_MUX_RX_STACK_SIZE+0x12>
     202:	19be      	adds	r6, r7, r6
     204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     208:	d202      	bcs.n	210 <CONFIG_UART_MUX_RX_STACK_SIZE+0x10>
     20a:	42b3      	cmp	r3, r6
     20c:	f200 80eb 	bhi.w	3e6 <CONFIG_BT_DEVICE_APPEARANCE+0xa5>
     210:	4684      	mov	ip, r0
     212:	1af6      	subs	r6, r6, r3
     214:	b2a3      	uxth	r3, r4
     216:	fbb6 f0fe 	udiv	r0, r6, lr
     21a:	fb0e 6610 	mls	r6, lr, r0, r6
     21e:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     222:	fb08 f800 	mul.w	r8, r8, r0
     226:	45a0      	cmp	r8, r4
     228:	d907      	bls.n	23a <CONFIG_UART_MUX_RX_STACK_SIZE+0x3a>
     22a:	193c      	adds	r4, r7, r4
     22c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     230:	d202      	bcs.n	238 <CONFIG_UART_MUX_RX_STACK_SIZE+0x38>
     232:	45a0      	cmp	r8, r4
     234:	f200 80d2 	bhi.w	3dc <CONFIG_BT_DEVICE_APPEARANCE+0x9b>
     238:	4618      	mov	r0, r3
     23a:	eba4 0408 	sub.w	r4, r4, r8
     23e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     242:	e7c0      	b.n	1c6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x6>
     244:	428b      	cmp	r3, r1
     246:	d908      	bls.n	25a <CONFIG_UART_MUX_RX_STACK_SIZE+0x5a>
     248:	2d00      	cmp	r5, #0
     24a:	f000 80af 	beq.w	3ac <CONFIG_BT_DEVICE_APPEARANCE+0x6b>
     24e:	2100      	movs	r1, #0
     250:	e9c5 0600 	strd	r0, r6, [r5]
     254:	4608      	mov	r0, r1
     256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25a:	fab3 f183 	clz	r1, r3
     25e:	2900      	cmp	r1, #0
     260:	d149      	bne.n	2f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x76>
     262:	42b3      	cmp	r3, r6
     264:	d302      	bcc.n	26c <CONFIG_UART_MUX_RX_STACK_SIZE+0x6c>
     266:	4282      	cmp	r2, r0
     268:	f200 80bb 	bhi.w	3e2 <CONFIG_BT_DEVICE_APPEARANCE+0xa1>
     26c:	1a84      	subs	r4, r0, r2
     26e:	eb66 0303 	sbc.w	r3, r6, r3
     272:	2001      	movs	r0, #1
     274:	469c      	mov	ip, r3
     276:	2d00      	cmp	r5, #0
     278:	d0aa      	beq.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     27a:	e9c5 4c00 	strd	r4, ip, [r5]
     27e:	e7a7      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     280:	f1c2 0320 	rsb	r3, r2, #32
     284:	4097      	lsls	r7, r2
     286:	40d8      	lsrs	r0, r3
     288:	4091      	lsls	r1, r2
     28a:	40de      	lsrs	r6, r3
     28c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     290:	4308      	orrs	r0, r1
     292:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     296:	fbb6 f1fe 	udiv	r1, r6, lr
     29a:	fa1f f887 	uxth.w	r8, r7
     29e:	fb0e 6611 	mls	r6, lr, r1, r6
     2a2:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     2a6:	fb01 f308 	mul.w	r3, r1, r8
     2aa:	42b3      	cmp	r3, r6
     2ac:	fa04 f402 	lsl.w	r4, r4, r2
     2b0:	d909      	bls.n	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     2b2:	19be      	adds	r6, r7, r6
     2b4:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     2b8:	f080 808e 	bcs.w	3d8 <CONFIG_BT_DEVICE_APPEARANCE+0x97>
     2bc:	42b3      	cmp	r3, r6
     2be:	f240 808b 	bls.w	3d8 <CONFIG_BT_DEVICE_APPEARANCE+0x97>
     2c2:	3902      	subs	r1, #2
     2c4:	443e      	add	r6, r7
     2c6:	1af3      	subs	r3, r6, r3
     2c8:	b286      	uxth	r6, r0
     2ca:	fbb3 f0fe 	udiv	r0, r3, lr
     2ce:	fb0e 3310 	mls	r3, lr, r0, r3
     2d2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     2d6:	fb00 f308 	mul.w	r3, r0, r8
     2da:	42b3      	cmp	r3, r6
     2dc:	d907      	bls.n	2ee <CONFIG_BT_HCI_TX_STACK_SIZE+0x6e>
     2de:	19be      	adds	r6, r7, r6
     2e0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2e4:	d274      	bcs.n	3d0 <CONFIG_BT_DEVICE_APPEARANCE+0x8f>
     2e6:	42b3      	cmp	r3, r6
     2e8:	d972      	bls.n	3d0 <CONFIG_BT_DEVICE_APPEARANCE+0x8f>
     2ea:	3802      	subs	r0, #2
     2ec:	443e      	add	r6, r7
     2ee:	1af3      	subs	r3, r6, r3
     2f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2f4:	e77a      	b.n	1ec <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x2c>
     2f6:	f1c1 0720 	rsb	r7, r1, #32
     2fa:	fa03 f401 	lsl.w	r4, r3, r1
     2fe:	fa22 f307 	lsr.w	r3, r2, r7
     302:	431c      	orrs	r4, r3
     304:	fa20 f907 	lsr.w	r9, r0, r7
     308:	fa06 f301 	lsl.w	r3, r6, r1
     30c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     310:	40fe      	lsrs	r6, r7
     312:	ea49 0903 	orr.w	r9, r9, r3
     316:	ea4f 4319 	mov.w	r3, r9, lsr #16
     31a:	fbb6 fefc 	udiv	lr, r6, ip
     31e:	fa1f f884 	uxth.w	r8, r4
     322:	fb0c 661e 	mls	r6, ip, lr, r6
     326:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     32a:	fb0e fa08 	mul.w	sl, lr, r8
     32e:	45b2      	cmp	sl, r6
     330:	fa02 f201 	lsl.w	r2, r2, r1
     334:	fa00 f301 	lsl.w	r3, r0, r1
     338:	d908      	bls.n	34c <CONFIG_BT_DEVICE_APPEARANCE+0xb>
     33a:	19a6      	adds	r6, r4, r6
     33c:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     340:	d248      	bcs.n	3d4 <CONFIG_BT_DEVICE_APPEARANCE+0x93>
     342:	45b2      	cmp	sl, r6
     344:	d946      	bls.n	3d4 <CONFIG_BT_DEVICE_APPEARANCE+0x93>
     346:	f1ae 0e02 	sub.w	lr, lr, #2
     34a:	4426      	add	r6, r4
     34c:	eba6 060a 	sub.w	r6, r6, sl
     350:	fa1f f989 	uxth.w	r9, r9
     354:	fbb6 f0fc 	udiv	r0, r6, ip
     358:	fb0c 6610 	mls	r6, ip, r0, r6
     35c:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45b0      	cmp	r8, r6
     366:	d907      	bls.n	378 <CONFIG_BT_DEVICE_APPEARANCE+0x37>
     368:	19a6      	adds	r6, r4, r6
     36a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     36e:	d22d      	bcs.n	3cc <CONFIG_BT_DEVICE_APPEARANCE+0x8b>
     370:	45b0      	cmp	r8, r6
     372:	d92b      	bls.n	3cc <CONFIG_BT_DEVICE_APPEARANCE+0x8b>
     374:	3802      	subs	r0, #2
     376:	4426      	add	r6, r4
     378:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     37c:	eba6 0608 	sub.w	r6, r6, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454e      	cmp	r6, r9
     386:	46c4      	mov	ip, r8
     388:	46ce      	mov	lr, r9
     38a:	d318      	bcc.n	3be <CONFIG_BT_DEVICE_APPEARANCE+0x7d>
     38c:	d015      	beq.n	3ba <CONFIG_BT_DEVICE_APPEARANCE+0x79>
     38e:	b375      	cbz	r5, 3ee <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x6>
     390:	ebb3 020c 	subs.w	r2, r3, ip
     394:	eb66 060e 	sbc.w	r6, r6, lr
     398:	fa06 f707 	lsl.w	r7, r6, r7
     39c:	fa22 f301 	lsr.w	r3, r2, r1
     3a0:	40ce      	lsrs	r6, r1
     3a2:	431f      	orrs	r7, r3
     3a4:	e9c5 7600 	strd	r7, r6, [r5]
     3a8:	2100      	movs	r1, #0
     3aa:	e711      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     3ac:	4629      	mov	r1, r5
     3ae:	4628      	mov	r0, r5
     3b0:	e70e      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     3b2:	4666      	mov	r6, ip
     3b4:	e6ed      	b.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     3b6:	4618      	mov	r0, r3
     3b8:	e701      	b.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     3ba:	4543      	cmp	r3, r8
     3bc:	d2e7      	bcs.n	38e <CONFIG_BT_DEVICE_APPEARANCE+0x4d>
     3be:	ebb8 0c02 	subs.w	ip, r8, r2
     3c2:	eb69 0404 	sbc.w	r4, r9, r4
     3c6:	3801      	subs	r0, #1
     3c8:	46a6      	mov	lr, r4
     3ca:	e7e0      	b.n	38e <CONFIG_BT_DEVICE_APPEARANCE+0x4d>
     3cc:	4660      	mov	r0, ip
     3ce:	e7d3      	b.n	378 <CONFIG_BT_DEVICE_APPEARANCE+0x37>
     3d0:	4660      	mov	r0, ip
     3d2:	e78c      	b.n	2ee <CONFIG_BT_HCI_TX_STACK_SIZE+0x6e>
     3d4:	4686      	mov	lr, r0
     3d6:	e7b9      	b.n	34c <CONFIG_BT_DEVICE_APPEARANCE+0xb>
     3d8:	4661      	mov	r1, ip
     3da:	e774      	b.n	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     3dc:	3802      	subs	r0, #2
     3de:	443c      	add	r4, r7
     3e0:	e72b      	b.n	23a <CONFIG_UART_MUX_RX_STACK_SIZE+0x3a>
     3e2:	4608      	mov	r0, r1
     3e4:	e747      	b.n	276 <CONFIG_UART_MUX_RX_STACK_SIZE+0x76>
     3e6:	f1ac 0c02 	sub.w	ip, ip, #2
     3ea:	443e      	add	r6, r7
     3ec:	e711      	b.n	212 <CONFIG_UART_MUX_RX_STACK_SIZE+0x12>
     3ee:	4629      	mov	r1, r5
     3f0:	e6ee      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     3f2:	bf00      	nop

000003f4 <__aeabi_idiv0>:
     3f4:	4770      	bx	lr
     3f6:	bf00      	nop

000003f8 <hci_init>:
	}
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
     3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     3fa:	4d44      	ldr	r5, [pc, #272]	; (50c <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc0>)
     3fc:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
     400:	6899      	ldr	r1, [r3, #8]
     402:	f011 0101 	ands.w	r1, r1, #1
{
     406:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     408:	d11f      	bne.n	44a <CONFIG_BT_RX_STACK_SIZE+0x4a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     40a:	aa03      	add	r2, sp, #12
     40c:	f640 4003 	movw	r0, #3075	; 0xc03
     410:	f008 ff8c 	bl	932c <bt_hci_cmd_send_sync>
		if (err) {
     414:	4604      	mov	r4, r0
     416:	2800      	cmp	r0, #0
     418:	d174      	bne.n	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
		hci_reset_complete(rsp);
     41a:	9b03      	ldr	r3, [sp, #12]
	uint8_t status = buf->data[0];
     41c:	689b      	ldr	r3, [r3, #8]
	if (status) {
     41e:	781b      	ldrb	r3, [r3, #0]
     420:	b983      	cbnz	r3, 444 <CONFIG_BT_RX_STACK_SIZE+0x44>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     422:	f105 0394 	add.w	r3, r5, #148	; 0x94
     426:	4618      	mov	r0, r3
     428:	f021 fa9a 	bl	21960 <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     42c:	f3bf 8f5b 	dmb	ish
     430:	f000 0005 	and.w	r0, r0, #5
     434:	e853 2f00 	ldrex	r2, [r3]
     438:	e843 0100 	strex	r1, r0, [r3]
     43c:	2900      	cmp	r1, #0
     43e:	d1f9      	bne.n	434 <CONFIG_BT_RX_STACK_SIZE+0x34>
     440:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
     444:	9803      	ldr	r0, [sp, #12]
     446:	f01b f885 	bl	1b554 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     44a:	aa03      	add	r2, sp, #12
     44c:	2100      	movs	r1, #0
     44e:	f241 0003 	movw	r0, #4099	; 0x1003
     452:	f008 ff6b 	bl	932c <bt_hci_cmd_send_sync>
	if (err) {
     456:	4604      	mov	r4, r0
     458:	2800      	cmp	r0, #0
     45a:	d153      	bne.n	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
	read_local_features_complete(rsp);
     45c:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     45e:	482c      	ldr	r0, [pc, #176]	; (510 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc4>)
     460:	6899      	ldr	r1, [r3, #8]
     462:	2208      	movs	r2, #8
     464:	3101      	adds	r1, #1
     466:	f021 f91e 	bl	216a6 <memcpy>
	net_buf_unref(rsp);
     46a:	9803      	ldr	r0, [sp, #12]
     46c:	f01b f872 	bl	1b554 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     470:	4621      	mov	r1, r4
     472:	aa03      	add	r2, sp, #12
     474:	f241 0001 	movw	r0, #4097	; 0x1001
     478:	f008 ff58 	bl	932c <bt_hci_cmd_send_sync>
	if (err) {
     47c:	4604      	mov	r4, r0
     47e:	2800      	cmp	r0, #0
     480:	d140      	bne.n	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
	read_local_ver_complete(rsp);
     482:	9803      	ldr	r0, [sp, #12]
     484:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     486:	785a      	ldrb	r2, [r3, #1]
     488:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     48c:	78d9      	ldrb	r1, [r3, #3]
     48e:	789a      	ldrb	r2, [r3, #2]
     490:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     494:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
     496:	791a      	ldrb	r2, [r3, #4]
     498:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     49c:	7a19      	ldrb	r1, [r3, #8]
     49e:	79da      	ldrb	r2, [r3, #7]
     4a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     4a4:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     4a6:	795a      	ldrb	r2, [r3, #5]
     4a8:	799b      	ldrb	r3, [r3, #6]
     4aa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     4ae:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
     4b0:	f01b f850 	bl	1b554 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     4b4:	4621      	mov	r1, r4
     4b6:	aa03      	add	r2, sp, #12
     4b8:	f241 0002 	movw	r0, #4098	; 0x1002
     4bc:	f008 ff36 	bl	932c <bt_hci_cmd_send_sync>
	if (err) {
     4c0:	4604      	mov	r4, r0
     4c2:	b9f8      	cbnz	r0, 504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
	read_supported_commands_complete(rsp);
     4c4:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
     4c6:	4813      	ldr	r0, [pc, #76]	; (514 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc8>)
     4c8:	6899      	ldr	r1, [r3, #8]
     4ca:	2240      	movs	r2, #64	; 0x40
     4cc:	3101      	adds	r1, #1
     4ce:	f021 f8ea 	bl	216a6 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
     4d2:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
     4d6:	9803      	ldr	r0, [sp, #12]
		bt_dev.supported_commands[34] |= 0x04;
     4d8:	f043 0306 	orr.w	r3, r3, #6
     4dc:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
     4e0:	f01b f838 	bl	1b554 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
     4e4:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
     4e8:	065b      	lsls	r3, r3, #25
     4ea:	d41b      	bmi.n	524 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xd8>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
     4ec:	4b0a      	ldr	r3, [pc, #40]	; (518 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xcc>)
     4ee:	490b      	ldr	r1, [pc, #44]	; (51c <CONFIG_BT_HCI_ECC_STACK_SIZE+0xd0>)
		BT_ERR("Non-LE capable controller detected!");
     4f0:	480b      	ldr	r0, [pc, #44]	; (520 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xd4>)
     4f2:	1ac9      	subs	r1, r1, r3
     4f4:	08c9      	lsrs	r1, r1, #3
     4f6:	0189      	lsls	r1, r1, #6
     4f8:	f041 0101 	orr.w	r1, r1, #1
     4fc:	f01f fa78 	bl	1f9f0 <log_0>
		return -ENODEV;
     500:	f06f 0412 	mvn.w	r4, #18
			return err;
		}
	}

	return 0;
}
     504:	4620      	mov	r0, r4
     506:	b009      	add	sp, #36	; 0x24
     508:	bdf0      	pop	{r4, r5, r6, r7, pc}
     50a:	bf00      	nop
     50c:	20000000 	.word	0x20000000
     510:	2000003c 	.word	0x2000003c
     514:	20000044 	.word	0x20000044
     518:	00024c24 	.word	0x00024c24
     51c:	00024ce4 	.word	0x00024ce4
     520:	00027cb5 	.word	0x00027cb5
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     524:	4621      	mov	r1, r4
     526:	aa03      	add	r2, sp, #12
     528:	f242 0003 	movw	r0, #8195	; 0x2003
     52c:	f008 fefe 	bl	932c <bt_hci_cmd_send_sync>
	if (err) {
     530:	4604      	mov	r4, r0
     532:	2800      	cmp	r0, #0
     534:	d1e6      	bne.n	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
	read_le_features_complete(rsp);
     536:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     538:	48a5      	ldr	r0, [pc, #660]	; (7d0 <CONFIG_BT_COMPANY_ID+0x1df>)
     53a:	6899      	ldr	r1, [r3, #8]
     53c:	2208      	movs	r2, #8
     53e:	3101      	adds	r1, #1
     540:	f021 f8b1 	bl	216a6 <memcpy>
	net_buf_unref(rsp);
     544:	9803      	ldr	r0, [sp, #12]
     546:	f01b f805 	bl	1b554 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     54a:	4621      	mov	r1, r4
     54c:	aa03      	add	r2, sp, #12
     54e:	f242 0002 	movw	r0, #8194	; 0x2002
     552:	f008 feeb 	bl	932c <bt_hci_cmd_send_sync>
		if (err) {
     556:	4604      	mov	r4, r0
     558:	2800      	cmp	r0, #0
     55a:	d1d3      	bne.n	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
		le_read_buffer_size_complete(rsp);
     55c:	9b03      	ldr	r3, [sp, #12]
     55e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
     560:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     564:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
     568:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
     56a:	b121      	cbz	r1, 576 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x12a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
     56c:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     56e:	4899      	ldr	r0, [pc, #612]	; (7d4 <CONFIG_BT_COMPANY_ID+0x1e3>)
     570:	4611      	mov	r1, r2
     572:	f023 ff71 	bl	24458 <z_impl_k_sem_init>
		net_buf_unref(rsp);
     576:	9803      	ldr	r0, [sp, #12]
     578:	f01a ffec 	bl	1b554 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     57c:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
     580:	f016 0620 	ands.w	r6, r6, #32
     584:	f000 80ff 	beq.w	786 <CONFIG_BT_COMPANY_ID+0x195>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     588:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
     58c:	071f      	lsls	r7, r3, #28
     58e:	d511      	bpl.n	5b4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x168>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     590:	aa03      	add	r2, sp, #12
     592:	2100      	movs	r1, #0
     594:	f242 001c 	movw	r0, #8220	; 0x201c
     598:	f008 fec8 	bl	932c <bt_hci_cmd_send_sync>
		if (err) {
     59c:	4604      	mov	r4, r0
     59e:	2800      	cmp	r0, #0
     5a0:	d1b0      	bne.n	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
		le_read_supp_states_complete(rsp);
     5a2:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     5a4:	6883      	ldr	r3, [r0, #8]
     5a6:	f853 2f01 	ldr.w	r2, [r3, #1]!
     5aa:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     5ac:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
     5b0:	f01a ffd0 	bl	1b554 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     5b4:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
     5b8:	069e      	lsls	r6, r3, #26
     5ba:	d524      	bpl.n	606 <CONFIG_BT_COMPANY_ID+0x15>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
     5bc:	a902      	add	r1, sp, #8
     5be:	f10d 0006 	add.w	r0, sp, #6
     5c2:	f008 ff2b 	bl	941c <hci_le_read_max_data_len>
		if (err) {
     5c6:	4604      	mov	r4, r0
     5c8:	2800      	cmp	r0, #0
     5ca:	d19b      	bne.n	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     5cc:	2104      	movs	r1, #4
     5ce:	f242 0024 	movw	r0, #8228	; 0x2024
     5d2:	f008 fd4f 	bl	9074 <bt_hci_cmd_create>
		if (!buf) {
     5d6:	4606      	mov	r6, r0
     5d8:	2800      	cmp	r0, #0
     5da:	f000 80db 	beq.w	794 <CONFIG_BT_COMPANY_ID+0x1a3>
		cp = net_buf_add(buf, sizeof(*cp));
     5de:	2104      	movs	r1, #4
     5e0:	3008      	adds	r0, #8
     5e2:	f023 f933 	bl	2384c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     5e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     5ea:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     5ec:	f8bd 3008 	ldrh.w	r3, [sp, #8]
     5f0:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     5f2:	4622      	mov	r2, r4
     5f4:	4631      	mov	r1, r6
     5f6:	f242 0024 	movw	r0, #8228	; 0x2024
     5fa:	f008 fe97 	bl	932c <bt_hci_cmd_send_sync>
		if (err) {
     5fe:	4604      	mov	r4, r0
     600:	2800      	cmp	r0, #0
     602:	f47f af7f 	bne.w	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     606:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
     60a:	065c      	lsls	r4, r3, #25
     60c:	d510      	bpl.n	630 <CONFIG_BT_COMPANY_ID+0x3f>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     60e:	aa03      	add	r2, sp, #12
     610:	2100      	movs	r1, #0
     612:	f242 002a 	movw	r0, #8234	; 0x202a
     616:	f008 fe89 	bl	932c <bt_hci_cmd_send_sync>
		if (err) {
     61a:	4604      	mov	r4, r0
     61c:	2800      	cmp	r0, #0
     61e:	f47f af71 	bne.w	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
		le_read_resolving_list_size_complete(rsp);
     622:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
     624:	6883      	ldr	r3, [r0, #8]
     626:	785b      	ldrb	r3, [r3, #1]
     628:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
     62c:	f01a ff92 	bl	1b554 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     630:	2108      	movs	r1, #8
     632:	f242 0001 	movw	r0, #8193	; 0x2001
     636:	f008 fd1d 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
     63a:	4604      	mov	r4, r0
     63c:	2800      	cmp	r0, #0
     63e:	f000 80a9 	beq.w	794 <CONFIG_BT_COMPANY_ID+0x1a3>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     642:	2108      	movs	r1, #8
     644:	4408      	add	r0, r1
     646:	f023 f901 	bl	2384c <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
     64a:	f895 1098 	ldrb.w	r1, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     64e:	f011 0f40 	tst.w	r1, #64	; 0x40
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     652:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     654:	f240 2302 	movw	r3, #514	; 0x202
     658:	bf08      	it	eq
     65a:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     65c:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     65e:	bf4c      	ite	mi
     660:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     664:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     668:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     66c:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     66e:	bf48      	it	mi
     670:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     674:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     678:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     67c:	bf18      	it	ne
     67e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     682:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     686:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     688:	bf48      	it	mi
     68a:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     68e:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     690:	bf08      	it	eq
     692:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     696:	2100      	movs	r1, #0
     698:	f021 f99d 	bl	219d6 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     69c:	4621      	mov	r1, r4
     69e:	2200      	movs	r2, #0
     6a0:	f242 0001 	movw	r0, #8193	; 0x2001
     6a4:	f008 fe42 	bl	932c <bt_hci_cmd_send_sync>
	if (err) {
     6a8:	4604      	mov	r4, r0
     6aa:	2800      	cmp	r0, #0
     6ac:	f47f af2a 	bne.w	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     6b0:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
     6b4:	0698      	lsls	r0, r3, #26
     6b6:	d41e      	bmi.n	6f6 <CONFIG_BT_COMPANY_ID+0x105>
	if (bt_dev.le.acl_mtu) {
     6b8:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
     6bc:	b9d9      	cbnz	r1, 6f6 <CONFIG_BT_COMPANY_ID+0x105>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
     6be:	aa03      	add	r2, sp, #12
     6c0:	f241 0005 	movw	r0, #4101	; 0x1005
     6c4:	f008 fe32 	bl	932c <bt_hci_cmd_send_sync>
	if (err) {
     6c8:	4604      	mov	r4, r0
     6ca:	2800      	cmp	r0, #0
     6cc:	f47f af1a 	bne.w	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
	if (bt_dev.le.acl_mtu) {
     6d0:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
     6d4:	b963      	cbnz	r3, 6f0 <CONFIG_BT_COMPANY_ID+0xff>
	read_buffer_size_complete(rsp);
     6d6:	9b03      	ldr	r3, [sp, #12]
     6d8:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
     6da:	785a      	ldrb	r2, [r3, #1]
     6dc:	7899      	ldrb	r1, [r3, #2]
     6de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     6e2:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
     6e6:	889a      	ldrh	r2, [r3, #4]
     6e8:	483a      	ldr	r0, [pc, #232]	; (7d4 <CONFIG_BT_COMPANY_ID+0x1e3>)
     6ea:	4611      	mov	r1, r2
     6ec:	f023 feb4 	bl	24458 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     6f0:	9803      	ldr	r0, [sp, #12]
     6f2:	f01a ff2f 	bl	1b554 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
     6f6:	2108      	movs	r1, #8
     6f8:	f640 4001 	movw	r0, #3073	; 0xc01
     6fc:	f008 fcba 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
     700:	4604      	mov	r4, r0
     702:	2800      	cmp	r0, #0
     704:	d046      	beq.n	794 <CONFIG_BT_COMPANY_ID+0x1a3>
	ev = net_buf_add(buf, sizeof(*ev));
     706:	2108      	movs	r1, #8
     708:	4408      	add	r0, r1
     70a:	f023 f89f 	bl	2384c <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     70e:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
     712:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
     714:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     716:	d552      	bpl.n	7be <CONFIG_BT_COMPANY_ID+0x1cd>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
     718:	a12b      	add	r1, pc, #172	; (adr r1, 7c8 <CONFIG_BT_COMPANY_ID+0x1d7>)
     71a:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
     71e:	f021 f95a 	bl	219d6 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
     722:	4621      	mov	r1, r4
     724:	2200      	movs	r2, #0
     726:	f640 4001 	movw	r0, #3073	; 0xc01
     72a:	f008 fdff 	bl	932c <bt_hci_cmd_send_sync>
	if (err) {
     72e:	4604      	mov	r4, r0
     730:	2800      	cmp	r0, #0
     732:	f47f aee7 	bne.w	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
     736:	4601      	mov	r1, r0
     738:	aa02      	add	r2, sp, #8
     73a:	f64f 4001 	movw	r0, #64513	; 0xfc01
     73e:	f008 fdf5 	bl	932c <bt_hci_cmd_send_sync>
	if (err) {
     742:	4e25      	ldr	r6, [pc, #148]	; (7d8 <CONFIG_BT_COMPANY_ID+0x1e7>)
     744:	4b25      	ldr	r3, [pc, #148]	; (7dc <CONFIG_BT_COMPANY_ID+0x1eb>)
     746:	1af6      	subs	r6, r6, r3
     748:	08f6      	lsrs	r6, r6, #3
     74a:	01b6      	lsls	r6, r6, #6
     74c:	2800      	cmp	r0, #0
     74e:	d04d      	beq.n	7ec <CONFIG_BT_COMPANY_ID+0x1fb>
		BT_WARN("Vendor HCI extensions not available");
     750:	4823      	ldr	r0, [pc, #140]	; (7e0 <CONFIG_BT_COMPANY_ID+0x1ef>)
     752:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
     756:	f01f f94b 	bl	1f9f0 <log_0>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
     75a:	79eb      	ldrb	r3, [r5, #7]
     75c:	2b00      	cmp	r3, #0
     75e:	f47f aed1 	bne.w	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
		bt_setup_public_id_addr();
     762:	f009 fc41 	bl	9fe8 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
     766:	79eb      	ldrb	r3, [r5, #7]
     768:	2b00      	cmp	r3, #0
     76a:	f47f aecb 	bne.w	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
		err = bt_setup_random_id_addr();
     76e:	f009 fce5 	bl	a13c <bt_setup_random_id_addr>
		if (err) {
     772:	4604      	mov	r4, r0
     774:	2800      	cmp	r0, #0
     776:	f000 80a6 	beq.w	8c6 <CONFIG_ISR_STACK_SIZE+0xc6>
			BT_ERR("Unable to set identity address");
     77a:	481a      	ldr	r0, [pc, #104]	; (7e4 <CONFIG_BT_COMPANY_ID+0x1f3>)
     77c:	f046 0101 	orr.w	r1, r6, #1
			BT_ERR("Unable to set random address");
     780:	f01f f936 	bl	1f9f0 <log_0>
			return err;
     784:	e6be      	b.n	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
     786:	2102      	movs	r1, #2
     788:	f640 406d 	movw	r0, #3181	; 0xc6d
     78c:	f008 fc72 	bl	9074 <bt_hci_cmd_create>
		if (!buf) {
     790:	4604      	mov	r4, r0
     792:	b910      	cbnz	r0, 79a <CONFIG_BT_COMPANY_ID+0x1a9>
		return -ENOBUFS;
     794:	f06f 0436 	mvn.w	r4, #54	; 0x36
     798:	e6b4      	b.n	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
     79a:	2102      	movs	r1, #2
     79c:	3008      	adds	r0, #8
     79e:	f023 f855 	bl	2384c <net_buf_simple_add>
		cp_le->le = 0x01;
     7a2:	2301      	movs	r3, #1
     7a4:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
     7a6:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     7a8:	4621      	mov	r1, r4
     7aa:	4632      	mov	r2, r6
     7ac:	f640 406d 	movw	r0, #3181	; 0xc6d
     7b0:	f008 fdbc 	bl	932c <bt_hci_cmd_send_sync>
		if (err) {
     7b4:	4604      	mov	r4, r0
     7b6:	2800      	cmp	r0, #0
     7b8:	f43f aee6 	beq.w	588 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x13c>
     7bc:	e6a2      	b.n	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
     7be:	480a      	ldr	r0, [pc, #40]	; (7e8 <CONFIG_BT_COMPANY_ID+0x1f7>)
     7c0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     7c4:	e7ab      	b.n	71e <CONFIG_BT_COMPANY_ID+0x12d>
     7c6:	bf00      	nop
     7c8:	02008890 	.word	0x02008890
     7cc:	20008000 	.word	0x20008000
     7d0:	20000098 	.word	0x20000098
     7d4:	200000c8 	.word	0x200000c8
     7d8:	00024ce4 	.word	0x00024ce4
     7dc:	00024c24 	.word	0x00024c24
     7e0:	00027cd9 	.word	0x00027cd9
     7e4:	00027dad 	.word	0x00027dad
     7e8:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
     7ec:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
     7ee:	483b      	ldr	r0, [pc, #236]	; (8dc <CONFIG_ISR_STACK_SIZE+0xdc>)
	rp.info = (void *)rsp->data;
     7f0:	689f      	ldr	r7, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
     7f2:	f8b7 2001 	ldrh.w	r2, [r7, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
     7f6:	2a03      	cmp	r2, #3
		return plat_str[platform];
     7f8:	bf96      	itet	ls
     7fa:	4939      	ldrls	r1, [pc, #228]	; (8e0 <CONFIG_ISR_STACK_SIZE+0xe0>)
	return "unknown";
     7fc:	4939      	ldrhi	r1, [pc, #228]	; (8e4 <CONFIG_ISR_STACK_SIZE+0xe4>)
		return plat_str[platform];
     7fe:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
     802:	f046 0303 	orr.w	r3, r6, #3
     806:	f01f f914 	bl	1fa32 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     80a:	f8b7 1001 	ldrh.w	r1, [r7, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
     80e:	f8b7 2003 	ldrh.w	r2, [r7, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     812:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
     814:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     818:	d12e      	bne.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
	if (variant < ARRAY_SIZE(nordic_str)) {
     81a:	2a03      	cmp	r2, #3
     81c:	d82c      	bhi.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
		return nordic_str[variant];
     81e:	4932      	ldr	r1, [pc, #200]	; (8e8 <CONFIG_ISR_STACK_SIZE+0xe8>)
     820:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
     824:	4831      	ldr	r0, [pc, #196]	; (8ec <CONFIG_ISR_STACK_SIZE+0xec>)
     826:	f01f f904 	bl	1fa32 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     82a:	797a      	ldrb	r2, [r7, #5]
     82c:	4830      	ldr	r0, [pc, #192]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
	if (variant < ARRAY_SIZE(var_str)) {
     82e:	2a03      	cmp	r2, #3
		return var_str[variant];
     830:	bf96      	itet	ls
     832:	4930      	ldrls	r1, [pc, #192]	; (8f4 <CONFIG_ISR_STACK_SIZE+0xf4>)
	return "unknown";
     834:	492b      	ldrhi	r1, [pc, #172]	; (8e4 <CONFIG_ISR_STACK_SIZE+0xe4>)
		return var_str[variant];
     836:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     83a:	e9cd 1203 	strd	r1, r2, [sp, #12]
     83e:	79ba      	ldrb	r2, [r7, #6]
     840:	9205      	str	r2, [sp, #20]
     842:	f8b7 2007 	ldrh.w	r2, [r7, #7]
     846:	9206      	str	r2, [sp, #24]
     848:	f8d7 2009 	ldr.w	r2, [r7, #9]
     84c:	9207      	str	r2, [sp, #28]
     84e:	f046 0303 	orr.w	r3, r6, #3
     852:	2205      	movs	r2, #5
     854:	a903      	add	r1, sp, #12
     856:	f01f f921 	bl	1fa9c <log_n>
	net_buf_unref(rsp);
     85a:	9802      	ldr	r0, [sp, #8]
     85c:	f01a fe7a 	bl	1b554 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
     860:	aa02      	add	r2, sp, #8
     862:	2100      	movs	r1, #0
     864:	f64f 4002 	movw	r0, #64514	; 0xfc02
     868:	f008 fd60 	bl	932c <bt_hci_cmd_send_sync>
	if (err) {
     86c:	4607      	mov	r7, r0
     86e:	b128      	cbz	r0, 87c <CONFIG_ISR_STACK_SIZE+0x7c>
		BT_WARN("Failed to read supported vendor commands");
     870:	4821      	ldr	r0, [pc, #132]	; (8f8 <CONFIG_ISR_STACK_SIZE+0xf8>)
     872:	f046 0102 	orr.w	r1, r6, #2
     876:	e76e      	b.n	756 <CONFIG_BT_COMPANY_ID+0x165>
		return "unknown";
     878:	491a      	ldr	r1, [pc, #104]	; (8e4 <CONFIG_ISR_STACK_SIZE+0xe4>)
     87a:	e7d3      	b.n	824 <CONFIG_ISR_STACK_SIZE+0x24>
	rp.cmds = (void *)rsp->data;
     87c:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
     87e:	481f      	ldr	r0, [pc, #124]	; (8fc <CONFIG_ISR_STACK_SIZE+0xfc>)
     880:	6899      	ldr	r1, [r3, #8]
     882:	2202      	movs	r2, #2
     884:	3101      	adds	r1, #1
     886:	f020 ff0e 	bl	216a6 <memcpy>
	net_buf_unref(rsp);
     88a:	9802      	ldr	r0, [sp, #8]
     88c:	f01a fe62 	bl	1b554 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
     890:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
     894:	075b      	lsls	r3, r3, #29
     896:	f57f af60 	bpl.w	75a <CONFIG_BT_COMPANY_ID+0x169>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
     89a:	aa02      	add	r2, sp, #8
     89c:	4639      	mov	r1, r7
     89e:	f64f 4003 	movw	r0, #64515	; 0xfc03
     8a2:	f008 fd43 	bl	932c <bt_hci_cmd_send_sync>
		if (err) {
     8a6:	b118      	cbz	r0, 8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
			BT_WARN("Failed to read supported vendor features");
     8a8:	4815      	ldr	r0, [pc, #84]	; (900 <CONFIG_ISR_STACK_SIZE+0x100>)
     8aa:	f046 0102 	orr.w	r1, r6, #2
     8ae:	e752      	b.n	756 <CONFIG_BT_COMPANY_ID+0x165>
		rp.feat = (void *)rsp->data;
     8b0:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
     8b2:	4814      	ldr	r0, [pc, #80]	; (904 <CONFIG_ISR_STACK_SIZE+0x104>)
     8b4:	6899      	ldr	r1, [r3, #8]
     8b6:	2201      	movs	r2, #1
     8b8:	4411      	add	r1, r2
     8ba:	f020 fef4 	bl	216a6 <memcpy>
		net_buf_unref(rsp);
     8be:	9802      	ldr	r0, [sp, #8]
     8c0:	f01a fe48 	bl	1b554 <net_buf_unref>
     8c4:	e749      	b.n	75a <CONFIG_BT_COMPANY_ID+0x169>
		err = set_random_address(&bt_dev.id_addr[0].a);
     8c6:	4810      	ldr	r0, [pc, #64]	; (908 <CONFIG_ISR_STACK_SIZE+0x108>)
     8c8:	f008 fdd2 	bl	9470 <set_random_address>
		if (err) {
     8cc:	4604      	mov	r4, r0
     8ce:	2800      	cmp	r0, #0
     8d0:	f43f ae18 	beq.w	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
			BT_ERR("Unable to set random address");
     8d4:	480d      	ldr	r0, [pc, #52]	; (90c <CONFIG_ISR_STACK_SIZE+0x10c>)
     8d6:	f046 0101 	orr.w	r1, r6, #1
     8da:	e751      	b.n	780 <CONFIG_BT_COMPANY_ID+0x18f>
     8dc:	00027cfd 	.word	0x00027cfd
     8e0:	00025280 	.word	0x00025280
     8e4:	000275f2 	.word	0x000275f2
     8e8:	00025240 	.word	0x00025240
     8ec:	00027d16 	.word	0x00027d16
     8f0:	00027d2e 	.word	0x00027d2e
     8f4:	000252b8 	.word	0x000252b8
     8f8:	00027d5b 	.word	0x00027d5b
     8fc:	20000085 	.word	0x20000085
     900:	00027d84 	.word	0x00027d84
     904:	20000084 	.word	0x20000084
     908:	20000001 	.word	0x20000001
     90c:	00027dcc 	.word	0x00027dcc

00000910 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     914:	e9d0 c70b 	ldrd	ip, r7, [r0, #44]	; 0x2c
	start_to_address_actual_us =
     918:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     91c:	eb0c 0407 	add.w	r4, ip, r7
	start_to_address_expected_us = EVENT_JITTER_US +
     920:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     922:	45a0      	cmp	r8, r4
{
     924:	460e      	mov	r6, r1
     926:	4615      	mov	r5, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     928:	d818      	bhi.n	95c <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     92a:	4f1b      	ldr	r7, [pc, #108]	; (998 <ull_drift_ticks_get+0x88>)
     92c:	a318      	add	r3, pc, #96	; (adr r3, 990 <ull_drift_ticks_get+0x80>)
     92e:	e9d3 2300 	ldrd	r2, r3, [r3]
     932:	fbac 0107 	umull	r0, r1, ip, r7
     936:	f7ff fbe3 	bl	100 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     93a:	eba4 0408 	sub.w	r4, r4, r8
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     93e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     942:	6030      	str	r0, [r6, #0]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     944:	a312      	add	r3, pc, #72	; (adr r3, 990 <ull_drift_ticks_get+0x80>)
     946:	e9d3 2300 	ldrd	r2, r3, [r3]
     94a:	fba4 0107 	umull	r0, r1, r4, r7
     94e:	f7ff fbd7 	bl	100 <__aeabi_uldivmod>
     952:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     956:	6028      	str	r0, [r5, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     95c:	4c0e      	ldr	r4, [pc, #56]	; (998 <ull_drift_ticks_get+0x88>)
     95e:	a30c      	add	r3, pc, #48	; (adr r3, 990 <ull_drift_ticks_get+0x80>)
     960:	e9d3 2300 	ldrd	r2, r3, [r3]
     964:	fba8 0104 	umull	r0, r1, r8, r4
     968:	f7ff fbca 	bl	100 <__aeabi_uldivmod>
     96c:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     970:	f107 0030 	add.w	r0, r7, #48	; 0x30
		*ticks_drift_plus =
     974:	6033      	str	r3, [r6, #0]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     976:	fba0 0104 	umull	r0, r1, r0, r4
     97a:	a305      	add	r3, pc, #20	; (adr r3, 990 <ull_drift_ticks_get+0x80>)
     97c:	e9d3 2300 	ldrd	r2, r3, [r3]
     980:	f7ff fbbe 	bl	100 <__aeabi_uldivmod>
     984:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     988:	6028      	str	r0, [r5, #0]
}
     98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     98e:	bf00      	nop
     990:	1afd498d 	.word	0x1afd498d
     994:	00000007 	.word	0x00000007
     998:	3b9aca00 	.word	0x3b9aca00
     99c:	00000000 	.word	0x00000000

000009a0 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9a4:	4cab      	ldr	r4, [pc, #684]	; (c54 <ll_adv_enable+0x2b4>)
     9a6:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
     9aa:	b08f      	sub	sp, #60	; 0x3c
     9ac:	f006 0601 	and.w	r6, r6, #1
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
     9b0:	2800      	cmp	r0, #0
     9b2:	f000 8159 	beq.w	c68 <ll_adv_enable+0x2c8>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     9b6:	bbb6      	cbnz	r6, a26 <ll_adv_enable+0x86>
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     9b8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     9bc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
	ull_filter_adv_update(lll->filter_policy);
     9c0:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     9c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     9c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     9cc:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
     9d0:	21ff      	movs	r1, #255	; 0xff
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     9d2:	f8d2 803c 	ldr.w	r8, [r2, #60]	; 0x3c
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     9d6:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
     9da:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
	ull_filter_adv_update(lll->filter_policy);
     9de:	f017 f9bb 	bl	17d58 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     9e2:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
     9e6:	0742      	lsls	r2, r0, #29
     9e8:	f100 8114 	bmi.w	c14 <ll_adv_enable+0x274>
	if (pdu_adv_to_update) {
     9ec:	f1b9 0f00 	cmp.w	r9, #0
     9f0:	d011      	beq.n	a16 <ll_adv_enable+0x76>
		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
     9f2:	4898      	ldr	r0, [pc, #608]	; (c54 <ll_adv_enable+0x2b4>)
     9f4:	4649      	mov	r1, r9
     9f6:	f013 fc6b 	bl	142d0 <ull_adv_pdu_update_addrs>
		if (pdu_adv_to_update->tx_addr &&
     9fa:	f899 3000 	ldrb.w	r3, [r9]
     9fe:	065b      	lsls	r3, r3, #25
     a00:	d505      	bpl.n	a0e <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
     a02:	2106      	movs	r1, #6
     a04:	f00e ff70 	bl	f8e8 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
     a08:	2800      	cmp	r0, #0
     a0a:	f000 823e 	beq.w	e8a <ll_adv_enable+0x4ea>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
     a0e:	4891      	ldr	r0, [pc, #580]	; (c54 <ll_adv_enable+0x2b4>)
     a10:	4641      	mov	r1, r8
     a12:	f013 fc5d 	bl	142d0 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     a16:	f899 3000 	ldrb.w	r3, [r9]
     a1a:	f013 0f0e 	tst.w	r3, #14
     a1e:	f040 80cf 	bne.w	bc0 <ll_adv_enable+0x220>
		if (lll->conn) {
     a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
     a24:	b123      	cbz	r3, a30 <ll_adv_enable+0x90>
	ret = ull_ticker_status_take(ret, &ret_cb);
	if (ret) {
		mark = ull_disable_unmark(adv);
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
     a26:	260c      	movs	r6, #12
}
     a28:	4630      	mov	r0, r6
     a2a:	b00f      	add	sp, #60	; 0x3c
     a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
     a30:	f012 fdce 	bl	135d0 <ll_rx_link_alloc>
		if (!link) {
     a34:	4682      	mov	sl, r0
     a36:	2800      	cmp	r0, #0
     a38:	f000 8244 	beq.w	ec4 <ll_adv_enable+0x524>
		node_rx = ll_rx_alloc();
     a3c:	f012 fdd4 	bl	135e8 <ll_rx_alloc>
		if (!node_rx) {
     a40:	4683      	mov	fp, r0
     a42:	2800      	cmp	r0, #0
     a44:	f000 8257 	beq.w	ef6 <ll_adv_enable+0x556>
		conn = ll_conn_acquire();
     a48:	f014 f832 	bl	14ab0 <ll_conn_acquire>
		if (!conn) {
     a4c:	4605      	mov	r5, r0
     a4e:	2800      	cmp	r0, #0
     a50:	f000 824e 	beq.w	ef0 <ll_adv_enable+0x550>
		conn_lll->handle = 0xFFFF;
     a54:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (!conn_lll->link_tx_free) {
     a58:	6f80      	ldr	r0, [r0, #120]	; 0x78
		conn_lll->handle = 0xFFFF;
     a5a:	85ab      	strh	r3, [r5, #44]	; 0x2c
		conn_lll = &conn->lll;
     a5c:	f105 031c 	add.w	r3, r5, #28
     a60:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
     a62:	2800      	cmp	r0, #0
     a64:	f000 822a 	beq.w	ebc <ll_adv_enable+0x51c>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     a68:	f105 026c 	add.w	r2, r5, #108	; 0x6c
     a6c:	f105 0168 	add.w	r1, r5, #104	; 0x68
     a70:	f00e ff46 	bl	f900 <memq_init>
		conn_lll->phy_tx = BIT(0);
     a74:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
     a78:	4877      	ldr	r0, [pc, #476]	; (c58 <ll_adv_enable+0x2b8>)
		conn_lll->data_chan_sel = 0;
     a7a:	f895 103d 	ldrb.w	r1, [r5, #61]	; 0x3d
		conn->common.fex_valid = 0;
     a7e:	f895 70dc 	ldrb.w	r7, [r5, #220]	; 0xdc
		conn_lll->slave.latency_enabled = 0;
     a82:	f895 c040 	ldrb.w	ip, [r5, #64]	; 0x40
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
     a86:	4b75      	ldr	r3, [pc, #468]	; (c5c <ll_adv_enable+0x2bc>)
     a88:	662b      	str	r3, [r5, #96]	; 0x60
		conn_lll->phy_tx = BIT(0);
     a8a:	4002      	ands	r2, r0
     a8c:	f442 7288 	orr.w	r2, r2, #272	; 0x110
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     a90:	f895 0126 	ldrb.w	r0, [r5, #294]	; 0x126
		conn->llcp_terminate.node_rx.hdr.link = link;
     a94:	f8c5 a130 	str.w	sl, [r5, #304]	; 0x130
		conn_lll->phy_tx = BIT(0);
     a98:	f042 0201 	orr.w	r2, r2, #1
		conn_lll->data_chan_sel = 0;
     a9c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
		conn->common.fex_valid = 0;
     aa0:	f027 0e03 	bic.w	lr, r7, #3
		conn_lll->data_chan_sel = 0;
     aa4:	f061 017f 	orn	r1, r1, #127	; 0x7f
		conn_lll->data_chan_use = 0;
     aa8:	2700      	movs	r7, #0
		conn_lll->phy_tx = BIT(0);
     aaa:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     aae:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     ab2:	f020 0003 	bic.w	r0, r0, #3
		conn_lll->data_chan_sel = 0;
     ab6:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
		conn_lll->slave.latency_enabled = 0;
     aba:	f367 0c00 	bfi	ip, r7, #0, #1
		conn->connect_expire = 6;
     abe:	2106      	movs	r1, #6
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     ac0:	65ea      	str	r2, [r5, #92]	; 0x5c
		conn->llcp_feature.features_conn = LL_FEAT;
     ac2:	4a67      	ldr	r2, [pc, #412]	; (c60 <ll_adv_enable+0x2c0>)
		conn->common.fex_valid = 0;
     ac4:	f885 e0dc 	strb.w	lr, [r5, #220]	; 0xdc
		conn_lll->slave.latency_enabled = 0;
     ac8:	f885 c040 	strb.w	ip, [r5, #64]	; 0x40
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     acc:	f885 0126 	strb.w	r0, [r5, #294]	; 0x126
		conn->connect_expire = 6;
     ad0:	f8a5 10c4 	strh.w	r1, [r5, #196]	; 0xc4
		conn->llcp_feature.features_conn = LL_FEAT;
     ad4:	f8c5 211c 	str.w	r2, [r5, #284]	; 0x11c
		conn_lll->slave.window_widening_event_us = 0;
     ad8:	e9c5 7713 	strd	r7, r7, [r5, #76]	; 0x4c
		conn_lll->data_chan_use = 0;
     adc:	f885 703f 	strb.w	r7, [r5, #63]	; 0x3f
		conn_lll->latency_prepare = 0;
     ae0:	866f      	strh	r7, [r5, #50]	; 0x32
		conn_lll->latency_event = 0;
     ae2:	636f      	str	r7, [r5, #52]	; 0x34
		conn_lll->slave.window_size_prepare_us = 0;
     ae4:	656f      	str	r7, [r5, #84]	; 0x54
		conn->supervision_expire = 0;
     ae6:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->procedure_expire = 0;
     aea:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     aee:	f8a5 70e8 	strh.w	r7, [r5, #232]	; 0xe8
     af2:	f885 70ea 	strb.w	r7, [r5, #234]	; 0xea
		conn->llcp_rx = NULL;
     af6:	f8c5 7100 	str.w	r7, [r5, #256]	; 0x100
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     afa:	f8a5 7104 	strh.w	r7, [r5, #260]	; 0x104
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     afe:	f8a5 7118 	strh.w	r7, [r5, #280]	; 0x118
		conn->llcp_feature.features_peer = 0;
     b02:	f8c5 7120 	str.w	r7, [r5, #288]	; 0x120
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     b06:	f8a5 7124 	strh.w	r7, [r5, #292]	; 0x124
		conn->llcp_terminate.reason_peer = 0;
     b0a:	f885 712f 	strb.w	r7, [r5, #303]	; 0x12f
		conn_lll->link_tx_free = NULL;
     b0e:	67af      	str	r7, [r5, #120]	; 0x78
		conn_lll->packet_tx_head_len = 0;
     b10:	f8a5 707c 	strh.w	r7, [r5, #124]	; 0x7c
		conn->llcp_conn_param.disabled = 0;
     b14:	f895 c172 	ldrb.w	ip, [r5, #370]	; 0x172
		conn->llcp_length.disabled = 0U;
     b18:	f895 019a 	ldrb.w	r0, [r5, #410]	; 0x19a
		conn_lll->sn = 0;
     b1c:	f895 107e 	ldrb.w	r1, [r5, #126]	; 0x7e
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     b20:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
     b24:	f8a5 7150 	strh.w	r7, [r5, #336]	; 0x150
		conn->llcp_conn_param.disabled = 0;
     b28:	f367 1c04 	bfi	ip, r7, #4, #1
		conn_lll->sn = 0;
     b2c:	f021 011f 	bic.w	r1, r1, #31
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     b30:	f022 0207 	bic.w	r2, r2, #7
		conn->llcp_length.disabled = 0U;
     b34:	f367 00c3 	bfi	r0, r7, #3, #1
		conn->llcp_conn_param.disabled = 0;
     b38:	f885 c172 	strb.w	ip, [r5, #370]	; 0x172
		conn_lll->sn = 0;
     b3c:	f885 107e 	strb.w	r1, [r5, #126]	; 0x7e
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     b40:	f885 2152 	strb.w	r2, [r5, #338]	; 0x152
		conn->llcp_conn_param.req = 0;
     b44:	f8a5 7170 	strh.w	r7, [r5, #368]	; 0x170
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
     b48:	f8a5 7198 	strh.w	r7, [r5, #408]	; 0x198
		conn->llcp_length.cache.tx_octets = 0U;
     b4c:	f8a5 71a4 	strh.w	r7, [r5, #420]	; 0x1a4
		conn->llcp_length.disabled = 0U;
     b50:	f885 019a 	strb.w	r0, [r5, #410]	; 0x19a
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
     b54:	f014 fac2 	bl	150dc <ull_conn_default_tx_octets_get>
     b58:	f8a5 00d6 	strh.w	r0, [r5, #214]	; 0xd6
		conn->default_tx_time = ull_conn_default_tx_time_get();
     b5c:	f014 fac4 	bl	150e8 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     b60:	f8d5 11a8 	ldr.w	r1, [r5, #424]	; 0x1a8
     b64:	4a3f      	ldr	r2, [pc, #252]	; (c64 <ll_adv_enable+0x2c4>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
     b66:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     b6a:	400a      	ands	r2, r1
     b6c:	f8c5 21a8 	str.w	r2, [r5, #424]	; 0x1a8
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     b70:	f014 fac0 	bl	150f4 <ull_conn_default_phy_tx_get>
     b74:	f895 21ac 	ldrb.w	r2, [r5, #428]	; 0x1ac
     b78:	f360 0202 	bfi	r2, r0, #0, #3
     b7c:	f885 21ac 	strb.w	r2, [r5, #428]	; 0x1ac
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     b80:	f014 fabe 	bl	15100 <ull_conn_default_phy_rx_get>
		adv->node_rx_cc_free = node_rx;
     b84:	e9c4 ab11 	strd	sl, fp, [r4, #68]	; 0x44
		lll->conn = conn_lll;
     b88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b8a:	6263      	str	r3, [r4, #36]	; 0x24
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     b8c:	f895 21ac 	ldrb.w	r2, [r5, #428]	; 0x1ac
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
     b90:	f895 3020 	ldrb.w	r3, [r5, #32]
		conn->tx_data = conn->tx_data_last = 0;
     b94:	f8c5 71c0 	str.w	r7, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     b98:	f360 02c5 	bfi	r2, r0, #3, #3
     b9c:	f367 0300 	bfi	r3, r7, #0, #1
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     ba0:	e9c5 776e 	strd	r7, r7, [r5, #440]	; 0x1b8
     ba4:	e9c5 776c 	strd	r7, r7, [r5, #432]	; 0x1b0
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
     ba8:	e9c5 7705 	strd	r7, r7, [r5, #20]
	hdr->parent = parent;
     bac:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     bae:	f885 21ac 	strb.w	r2, [r5, #428]	; 0x1ac
	hdr->is_stop = 0U;
     bb2:	f885 3020 	strb.w	r3, [r5, #32]
		err = lll_clock_wait();
     bb6:	f018 fa37 	bl	19028 <lll_clock_wait>
		if (err) {
     bba:	2800      	cmp	r0, #0
     bbc:	f040 8167 	bne.w	e8e <ll_adv_enable+0x4ee>
	uint8_t ch_map = lll->chan_map;
     bc0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     bc4:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     bc6:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     bca:	a80d      	add	r0, sp, #52	; 0x34
	uint8_t ch_map = lll->chan_map;
     bcc:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     bd0:	f00f f80e 	bl	fbf0 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     bd4:	b390      	cbz	r0, c3c <ll_adv_enable+0x29c>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     bd6:	f899 3000 	ldrb.w	r3, [r9]
     bda:	f003 030f 	and.w	r3, r3, #15
     bde:	2b02      	cmp	r3, #2
     be0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
     be4:	f000 809e 	beq.w	d24 <ll_adv_enable+0x384>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     be8:	2b01      	cmp	r3, #1
     bea:	f000 8154 	beq.w	e96 <ll_adv_enable+0x4f6>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
     bee:	f898 0001 	ldrb.w	r0, [r8, #1]
     bf2:	3010      	adds	r0, #16
		const uint16_t scan_rsp_us =
     bf4:	00c0      	lsls	r0, r0, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
     bf6:	2b00      	cmp	r3, #0
     bf8:	f040 813f 	bne.w	e7a <ll_adv_enable+0x4da>
				adv_size += pdu_adv->len;
     bfc:	f899 3001 	ldrb.w	r3, [r9, #1]
     c00:	3310      	adds	r3, #16
     c02:	00db      	lsls	r3, r3, #3
     c04:	f503 714d 	add.w	r1, r3, #820	; 0x334
     c08:	4408      	add	r0, r1
     c0a:	f503 739a 	add.w	r3, r3, #308	; 0x134
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     c0e:	fb03 0002 	mla	r0, r3, r2, r0
     c12:	e092      	b.n	d3a <ll_adv_enable+0x39a>
		lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
     c14:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     c18:	4632      	mov	r2, r6
     c1a:	f104 014f 	add.w	r1, r4, #79	; 0x4f
     c1e:	f017 fa0f 	bl	18040 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
     c22:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
     c24:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
		if (lll->rl_idx != FILTER_IDX_NONE) {
     c28:	f43f aee0 	beq.w	9ec <ll_adv_enable+0x4c>
			ull_filter_rpa_update(false);
     c2c:	4630      	mov	r0, r6
     c2e:	f017 f8ad 	bl	17d8c <ull_filter_rpa_update>
	if (pdu_adv_to_update) {
     c32:	f1b9 0f00 	cmp.w	r9, #0
     c36:	f47f aedc 	bne.w	9f2 <ll_adv_enable+0x52>
     c3a:	e6ec      	b.n	a16 <ll_adv_enable+0x76>
	if (adv->lll.conn) {
     c3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
     c3e:	2b00      	cmp	r3, #0
     c40:	f43f aef1 	beq.w	a26 <ll_adv_enable+0x86>
		conn_release(adv);
     c44:	f013 f8e0 	bl	13e08 <conn_release.constprop.0>
	return BT_HCI_ERR_CMD_DISALLOWED;
     c48:	260c      	movs	r6, #12
}
     c4a:	4630      	mov	r0, r6
     c4c:	b00f      	add	sp, #60	; 0x3c
     c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c52:	bf00      	nop
     c54:	20003418 	.word	0x20003418
     c58:	fffff880 	.word	0xfffff880
     c5c:	01480148 	.word	0x01480148
     c60:	0001497f 	.word	0x0001497f
     c64:	f6ff0000 	.word	0xf6ff0000
	if (!adv || !adv->is_enabled) {
     c68:	2e00      	cmp	r6, #0
     c6a:	f43f aedc 	beq.w	a26 <ll_adv_enable+0x86>
	mark = ull_disable_mark(adv);
     c6e:	4620      	mov	r0, r4
     c70:	f012 fd8a 	bl	13788 <ull_disable_mark>
	LL_ASSERT(mark == adv);
     c74:	4284      	cmp	r4, r0
     c76:	d00c      	beq.n	c92 <ll_adv_enable+0x2f2>
     c78:	4aa9      	ldr	r2, [pc, #676]	; (f20 <ll_adv_enable+0x580>)
     c7a:	49aa      	ldr	r1, [pc, #680]	; (f24 <ll_adv_enable+0x584>)
     c7c:	48aa      	ldr	r0, [pc, #680]	; (f28 <ll_adv_enable+0x588>)
     c7e:	f240 737d 	movw	r3, #1917	; 0x77d
     c82:	f01e f9e7 	bl	1f054 <printk>
     c86:	4040      	eors	r0, r0
     c88:	f380 8811 	msr	BASEPRI, r0
     c8c:	f04f 0003 	mov.w	r0, #3
     c90:	df02      	svc	2
	if (adv->lll.is_hdcd) {
     c92:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     c96:	07d9      	lsls	r1, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     c98:	ad0d      	add	r5, sp, #52	; 0x34
	if (adv->lll.is_hdcd) {
     c9a:	d50e      	bpl.n	cba <ll_adv_enable+0x31a>
		ret_cb = TICKER_STATUS_BUSY;
     c9c:	2202      	movs	r2, #2
     c9e:	920d      	str	r2, [sp, #52]	; 0x34
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     ca0:	2103      	movs	r1, #3
     ca2:	4ba2      	ldr	r3, [pc, #648]	; (f2c <ll_adv_enable+0x58c>)
     ca4:	9500      	str	r5, [sp, #0]
     ca6:	2201      	movs	r2, #1
     ca8:	2000      	movs	r0, #0
     caa:	f010 f963 	bl	10f74 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
     cae:	4629      	mov	r1, r5
     cb0:	f012 fd42 	bl	13738 <ull_ticker_status_take>
		if (ret) {
     cb4:	2800      	cmp	r0, #0
     cb6:	f040 8123 	bne.w	f00 <ll_adv_enable+0x560>
	ret_cb = TICKER_STATUS_BUSY;
     cba:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
     cbc:	2103      	movs	r1, #3
     cbe:	4b9b      	ldr	r3, [pc, #620]	; (f2c <ll_adv_enable+0x58c>)
     cc0:	9500      	str	r5, [sp, #0]
     cc2:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
     cc4:	920d      	str	r2, [sp, #52]	; 0x34
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
     cc6:	f010 f955 	bl	10f74 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
     cca:	4629      	mov	r1, r5
     ccc:	f012 fd34 	bl	13738 <ull_ticker_status_take>
	if (ret) {
     cd0:	2800      	cmp	r0, #0
     cd2:	f040 80f9 	bne.w	ec8 <ll_adv_enable+0x528>
	}

	ret = ull_disable(&adv->lll);
     cd6:	4896      	ldr	r0, [pc, #600]	; (f30 <ll_adv_enable+0x590>)
     cd8:	f012 fd92 	bl	13800 <ull_disable>
	LL_ASSERT(!ret);
     cdc:	2800      	cmp	r0, #0
     cde:	f040 80df 	bne.w	ea0 <ll_adv_enable+0x500>

	mark = ull_disable_unmark(adv);
     ce2:	4894      	ldr	r0, [pc, #592]	; (f34 <ll_adv_enable+0x594>)
     ce4:	f012 fd5c 	bl	137a0 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
     ce8:	4284      	cmp	r4, r0
     cea:	d00c      	beq.n	d06 <ll_adv_enable+0x366>
     cec:	4a8c      	ldr	r2, [pc, #560]	; (f20 <ll_adv_enable+0x580>)
     cee:	498d      	ldr	r1, [pc, #564]	; (f24 <ll_adv_enable+0x584>)
     cf0:	488d      	ldr	r0, [pc, #564]	; (f28 <ll_adv_enable+0x588>)
     cf2:	f240 739f 	movw	r3, #1951	; 0x79f
     cf6:	f01e f9ad 	bl	1f054 <printk>
     cfa:	4040      	eors	r0, r0
     cfc:	f380 8811 	msr	BASEPRI, r0
     d00:	f04f 0003 	mov.w	r0, #3
     d04:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
     d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
     d08:	b10b      	cbz	r3, d0e <ll_adv_enable+0x36e>
		conn_release(adv);
     d0a:	f013 f87d 	bl	13e08 <conn_release.constprop.0>
		ll_rx_link_release(node_rx_adv_term->hdr.link);
		ll_rx_release(node_rx_adv_term);
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	adv->is_enabled = 0U;
     d0e:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
     d12:	2600      	movs	r6, #0
	adv->is_enabled = 0U;
     d14:	f36f 0300 	bfc	r3, #0, #1
}
     d18:	4630      	mov	r0, r6
	adv->is_enabled = 0U;
     d1a:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
     d1e:	b00f      	add	sp, #60	; 0x3c
     d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			adv_size += pdu_adv->len;
     d24:	f899 3001 	ldrb.w	r3, [r9, #1]
     d28:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     d2a:	00db      	lsls	r3, r3, #3
     d2c:	fb00 f003 	mul.w	r0, r0, r3
     d30:	f500 70aa 	add.w	r0, r0, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
     d34:	2364      	movs	r3, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     d36:	fb03 0002 	mla	r0, r3, r2, r0
     d3a:	f894 7020 	ldrb.w	r7, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     d3e:	4a7e      	ldr	r2, [pc, #504]	; (f38 <ll_adv_enable+0x598>)
	hdr->parent = parent;
     d40:	61e4      	str	r4, [r4, #28]
     d42:	2500      	movs	r5, #0
	adv->evt.ticks_xtal_to_start =
     d44:	2331      	movs	r3, #49	; 0x31
	hdr->is_stop = 0U;
     d46:	f365 0700 	bfi	r7, r5, #0, #1
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     d4a:	fba0 0102 	umull	r0, r1, r0, r2
	adv->evt.ticks_xtal_to_start =
     d4e:	6023      	str	r3, [r4, #0]
     d50:	f884 7020 	strb.w	r7, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     d54:	a370      	add	r3, pc, #448	; (adr r3, f18 <ll_adv_enable+0x578>)
     d56:	e9d3 2300 	ldrd	r2, r3, [r3]
     d5a:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_preempt_to_start =
     d5e:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     d62:	f7ff f9cd 	bl	100 <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
     d66:	f8b4 804c 	ldrh.w	r8, [r4, #76]	; 0x4c
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     d6a:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
     d6c:	f010 f948 	bl	11000 <ticker_ticks_now_get>
     d70:	4607      	mov	r7, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     d72:	f1b8 0f00 	cmp.w	r8, #0
     d76:	d108      	bne.n	d8a <ll_adv_enable+0x3ea>
     d78:	f899 5000 	ldrb.w	r5, [r9]
     d7c:	f005 050f 	and.w	r5, r5, #15
     d80:	f1a5 0501 	sub.w	r5, r5, #1
     d84:	fab5 f585 	clz	r5, r5
     d88:	096d      	lsrs	r5, r5, #5
     d8a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     d8e:	68e3      	ldr	r3, [r4, #12]
     d90:	f365 0200 	bfi	r2, r5, #0, #1
	if (lll->is_hdcd) {
     d94:	f012 0501 	ands.w	r5, r2, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     d98:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	if (lll->is_hdcd) {
     d9c:	d03d      	beq.n	e1a <ll_adv_enable+0x47a>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     d9e:	f8df 918c 	ldr.w	r9, [pc, #396]	; f2c <ll_adv_enable+0x58c>
     da2:	4966      	ldr	r1, [pc, #408]	; (f3c <ll_adv_enable+0x59c>)
     da4:	9304      	str	r3, [sp, #16]
     da6:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
     da8:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     daa:	f10d 0830 	add.w	r8, sp, #48	; 0x30
     dae:	9301      	str	r3, [sp, #4]
     db0:	9105      	str	r1, [sp, #20]
     db2:	e9cd 9807 	strd	r9, r8, [sp, #28]
     db6:	2103      	movs	r1, #3
     db8:	e9cd 0002 	strd	r0, r0, [sp, #8]
     dbc:	9406      	str	r4, [sp, #24]
     dbe:	462a      	mov	r2, r5
     dc0:	9000      	str	r0, [sp, #0]
     dc2:	463b      	mov	r3, r7
		ret_cb = TICKER_STATUS_BUSY;
     dc4:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     dc6:	f010 f869 	bl	10e9c <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     dca:	4641      	mov	r1, r8
     dcc:	f012 fcb4 	bl	13738 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     dd0:	2800      	cmp	r0, #0
     dd2:	f47f af33 	bne.w	c3c <ll_adv_enable+0x29c>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     dd6:	495a      	ldr	r1, [pc, #360]	; (f40 <ll_adv_enable+0x5a0>)
     dd8:	9105      	str	r1, [sp, #20]
     dda:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
     dde:	9200      	str	r2, [sp, #0]
     de0:	e9cd 9807 	strd	r9, r8, [sp, #28]
     de4:	e9cd 0003 	strd	r0, r0, [sp, #12]
     de8:	e9cd 0001 	strd	r0, r0, [sp, #4]
     dec:	9406      	str	r4, [sp, #24]
     dee:	463b      	mov	r3, r7
     df0:	2201      	movs	r2, #1
     df2:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
     df4:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     df6:	f010 f851 	bl	10e9c <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     dfa:	4641      	mov	r1, r8
     dfc:	f012 fc9c 	bl	13738 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     e00:	2800      	cmp	r0, #0
     e02:	f47f af1b 	bne.w	c3c <ll_adv_enable+0x29c>
	adv->is_enabled = 1;
     e06:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
}
     e0a:	4630      	mov	r0, r6
	adv->is_enabled = 1;
     e0c:	f043 0301 	orr.w	r3, r3, #1
     e10:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
     e14:	b00f      	add	sp, #60	; 0x3c
     e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     e1a:	484a      	ldr	r0, [pc, #296]	; (f44 <ll_adv_enable+0x5a4>)
		ll_adv_ticker_ext[handle].ticks_slot_window =
     e1c:	4a4a      	ldr	r2, [pc, #296]	; (f48 <ll_adv_enable+0x5a8>)
		ret = ticker_start_ext(
     e1e:	f8df e10c 	ldr.w	lr, [pc, #268]	; f2c <ll_adv_enable+0x58c>
     e22:	f8df c118 	ldr.w	ip, [pc, #280]	; f3c <ll_adv_enable+0x59c>
     e26:	9406      	str	r4, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     e28:	fba8 0100 	umull	r0, r1, r8, r0
     e2c:	f04f 0991 	mov.w	r9, #145	; 0x91
     e30:	fb09 1108 	mla	r1, r9, r8, r1
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     e34:	f203 1847 	addw	r8, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
     e38:	f8c2 8000 	str.w	r8, [r2]
		ret_cb = TICKER_STATUS_BUSY;
     e3c:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
     e40:	9304      	str	r3, [sp, #16]
     e42:	9209      	str	r2, [sp, #36]	; 0x24
     e44:	f10d 0830 	add.w	r8, sp, #48	; 0x30
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     e48:	a333      	add	r3, pc, #204	; (adr r3, f18 <ll_adv_enable+0x578>)
     e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
     e4e:	f64f 7aff 	movw	sl, #65535	; 0xffff
     e52:	e9cd e807 	strd	lr, r8, [sp, #28]
     e56:	9502      	str	r5, [sp, #8]
		ret_cb = TICKER_STATUS_BUSY;
     e58:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
		ret = ticker_start_ext(
     e5c:	f8cd c014 	str.w	ip, [sp, #20]
     e60:	f8cd a00c 	str.w	sl, [sp, #12]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     e64:	f7ff f94c 	bl	100 <__aeabi_uldivmod>
		ret = ticker_start_ext(
     e68:	464a      	mov	r2, r9
     e6a:	e9cd 5000 	strd	r5, r0, [sp]
     e6e:	463b      	mov	r3, r7
     e70:	4628      	mov	r0, r5
     e72:	2103      	movs	r1, #3
     e74:	f00f ffbc 	bl	10df0 <ticker_start_ext>
     e78:	e7bf      	b.n	dfa <ll_adv_enable+0x45a>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
     e7a:	2b06      	cmp	r3, #6
     e7c:	f43f aebe 	beq.w	bfc <ll_adv_enable+0x25c>
     e80:	f44f 73da 	mov.w	r3, #436	; 0x1b4
     e84:	f44f 701b 	mov.w	r0, #620	; 0x26c
     e88:	e6c1      	b.n	c0e <ll_adv_enable+0x26e>
			return BT_HCI_ERR_INVALID_PARAM;
     e8a:	2612      	movs	r6, #18
     e8c:	e5cc      	b.n	a28 <ll_adv_enable+0x88>
			conn_release(adv);
     e8e:	f012 ffbb 	bl	13e08 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
     e92:	2603      	movs	r6, #3
     e94:	e5c8      	b.n	a28 <ll_adv_enable+0x88>
     e96:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
     e9a:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
     e9e:	e6b6      	b.n	c0e <ll_adv_enable+0x26e>
	LL_ASSERT(!ret);
     ea0:	4a1f      	ldr	r2, [pc, #124]	; (f20 <ll_adv_enable+0x580>)
     ea2:	492a      	ldr	r1, [pc, #168]	; (f4c <ll_adv_enable+0x5ac>)
     ea4:	4820      	ldr	r0, [pc, #128]	; (f28 <ll_adv_enable+0x588>)
     ea6:	f240 739c 	movw	r3, #1948	; 0x79c
     eaa:	f01e f8d3 	bl	1f054 <printk>
     eae:	4040      	eors	r0, r0
     eb0:	f380 8811 	msr	BASEPRI, r0
     eb4:	f04f 0003 	mov.w	r0, #3
     eb8:	df02      	svc	2
     eba:	e712      	b.n	ce2 <ll_adv_enable+0x342>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     ebc:	f105 0070 	add.w	r0, r5, #112	; 0x70
     ec0:	67a8      	str	r0, [r5, #120]	; 0x78
     ec2:	e5d1      	b.n	a68 <ll_adv_enable+0xc8>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     ec4:	2607      	movs	r6, #7
     ec6:	e5af      	b.n	a28 <ll_adv_enable+0x88>
		mark = ull_disable_unmark(adv);
     ec8:	481a      	ldr	r0, [pc, #104]	; (f34 <ll_adv_enable+0x594>)
     eca:	f012 fc69 	bl	137a0 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
     ece:	4284      	cmp	r4, r0
     ed0:	f43f ada9 	beq.w	a26 <ll_adv_enable+0x86>
     ed4:	f240 7396 	movw	r3, #1942	; 0x796
     ed8:	4a11      	ldr	r2, [pc, #68]	; (f20 <ll_adv_enable+0x580>)
     eda:	4912      	ldr	r1, [pc, #72]	; (f24 <ll_adv_enable+0x584>)
     edc:	4812      	ldr	r0, [pc, #72]	; (f28 <ll_adv_enable+0x588>)
     ede:	f01e f8b9 	bl	1f054 <printk>
     ee2:	4040      	eors	r0, r0
     ee4:	f380 8811 	msr	BASEPRI, r0
     ee8:	f04f 0003 	mov.w	r0, #3
     eec:	df02      	svc	2
     eee:	e59a      	b.n	a26 <ll_adv_enable+0x86>
			ll_rx_release(node_rx);
     ef0:	4658      	mov	r0, fp
     ef2:	f012 fb7f 	bl	135f4 <ll_rx_release>
			ll_rx_link_release(link);
     ef6:	4650      	mov	r0, sl
     ef8:	f012 fb70 	bl	135dc <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     efc:	2607      	movs	r6, #7
     efe:	e593      	b.n	a28 <ll_adv_enable+0x88>
			mark = ull_disable_unmark(adv);
     f00:	480c      	ldr	r0, [pc, #48]	; (f34 <ll_adv_enable+0x594>)
     f02:	f012 fc4d 	bl	137a0 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
     f06:	4284      	cmp	r4, r0
     f08:	f43f ad8d 	beq.w	a26 <ll_adv_enable+0x86>
     f0c:	f44f 63f1 	mov.w	r3, #1928	; 0x788
     f10:	e7e2      	b.n	ed8 <ll_adv_enable+0x538>
     f12:	bf00      	nop
     f14:	f3af 8000 	nop.w
     f18:	1afd498d 	.word	0x1afd498d
     f1c:	00000007 	.word	0x00000007
     f20:	000259c8 	.word	0x000259c8
     f24:	00025ab8 	.word	0x00025ab8
     f28:	0002561c 	.word	0x0002561c
     f2c:	00012619 	.word	0x00012619
     f30:	20003434 	.word	0x20003434
     f34:	20003418 	.word	0x20003418
     f38:	3b9aca00 	.word	0x3b9aca00
     f3c:	00013b75 	.word	0x00013b75
     f40:	00013d81 	.word	0x00013d81
     f44:	84e72a00 	.word	0x84e72a00
     f48:	20003470 	.word	0x20003470
     f4c:	000258a4 	.word	0x000258a4

00000f50 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
     f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f54:	4604      	mov	r4, r0
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
     f56:	f890 70e9 	ldrb.w	r7, [r0, #233]	; 0xe9
     f5a:	f890 00e8 	ldrb.w	r0, [r0, #232]	; 0xe8
     f5e:	4287      	cmp	r7, r0
{
     f60:	b08d      	sub	sp, #52	; 0x34
     f62:	460d      	mov	r5, r1
     f64:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
     f66:	d00e      	beq.n	f86 <ull_conn_llcp+0x36>
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
     f68:	1bc0      	subs	r0, r0, r7
     f6a:	f000 0003 	and.w	r0, r0, #3
     f6e:	2802      	cmp	r0, #2
     f70:	d01b      	beq.n	faa <ull_conn_llcp+0x5a>
			break;
		}
	}

	/* Terminate Procedure Request */
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
     f72:	f894 212d 	ldrb.w	r2, [r4, #301]	; 0x12d
     f76:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
     f7a:	429a      	cmp	r2, r3
     f7c:	d130      	bne.n	fe0 <ull_conn_llcp+0x90>
				conn->procedure_expire++;
			}
		}
	}

	return 0;
     f7e:	2000      	movs	r0, #0
}
     f80:	b00d      	add	sp, #52	; 0x34
     f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !conn->llcp_enc.pause_rx) {
     f86:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	if ((conn->llcp_ack == conn->llcp_req) &&
     f8a:	f013 0801 	ands.w	r8, r3, #1
     f8e:	d1f0      	bne.n	f72 <ull_conn_llcp+0x22>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
     f90:	f894 1105 	ldrb.w	r1, [r4, #261]	; 0x105
     f94:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
     f98:	428a      	cmp	r2, r1
     f9a:	f000 8390 	beq.w	16be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x336>
			conn->llcp_ack -= 2U;
     f9e:	1eb8      	subs	r0, r7, #2
			conn->llcp_type = LLCP_CONN_UPD;
     fa0:	2301      	movs	r3, #1
			conn->llcp_ack -= 2U;
     fa2:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
			conn->llcp_type = LLCP_CONN_UPD;
     fa6:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
     faa:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
     fae:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
     fb2:	429a      	cmp	r2, r3
     fb4:	d006      	beq.n	fc4 <ull_conn_llcp+0x74>
			if ((conn->llcp_length.state ==
     fb6:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
     fba:	f002 0106 	and.w	r1, r2, #6
     fbe:	2904      	cmp	r1, #4
     fc0:	f000 83c1 	beq.w	1746 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3be>
		switch (conn->llcp_type) {
     fc4:	f894 70ea 	ldrb.w	r7, [r4, #234]	; 0xea
     fc8:	1e7b      	subs	r3, r7, #1
     fca:	2b05      	cmp	r3, #5
     fcc:	f200 8369 	bhi.w	16a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x31a>
     fd0:	e8df f013 	tbh	[pc, r3, lsl #1]
     fd4:	0300005c 	.word	0x0300005c
     fd8:	0367027c 	.word	0x0367027c
     fdc:	01aa032a 	.word	0x01aa032a
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     fe0:	4829      	ldr	r0, [pc, #164]	; (1088 <ull_conn_llcp+0x138>)
     fe2:	f00e fc37 	bl	f854 <mem_acquire>
		if (tx) {
     fe6:	b358      	cbz	r0, 1040 <ull_conn_llcp+0xf0>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
     fe8:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
     fec:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
     ff0:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
     ff2:	2202      	movs	r2, #2
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
     ff4:	f043 0303 	orr.w	r3, r3, #3
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
     ff8:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
     ffa:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
     ffc:	71c2      	strb	r2, [r0, #7]
					 struct node_tx *tx, bool pause)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* data/ctrl packet is in the head */
	    conn->tx_head &&
     ffe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_tx->llctrl.terminate_ind.error_code =
    1002:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
    1006:	7202      	strb	r2, [r0, #8]
	if (
    1008:	b32b      	cbz	r3, 1056 <ull_conn_llcp+0x106>
#if defined(CONFIG_BT_CTLR_LE_ENC)
	    !conn->llcp_enc.pause_tx &&
    100a:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    100e:	0791      	lsls	r1, r2, #30
    1010:	d421      	bmi.n	1056 <ull_conn_llcp+0x106>
#endif /* CONFIG_BT_CTLR_LE_ENC */
#if defined(CONFIG_BT_CTLR_PHY)
	    !conn->llcp_phy.pause_tx &&
    1012:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1016:	07d2      	lsls	r2, r2, #31
    1018:	d41d      	bmi.n	1056 <ull_conn_llcp+0x106>

		/* if data transmitted once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->tx_head == conn->tx_data) {
    101a:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    101e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1020:	bf04      	itt	eq
    1022:	681a      	ldreq	r2, [r3, #0]
    1024:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->tx_ctrl) {
    1028:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    102c:	b9b2      	cbnz	r2, 105c <ull_conn_llcp+0x10c>
			tx->next = conn->tx_head->next;
    102e:	681a      	ldr	r2, [r3, #0]
    1030:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    1032:	6018      	str	r0, [r3, #0]
			 * control PDU in Encryption Procedure that is not
			 * implicitly paused, will set the control and control
			 * last marker.
			 */
			if (!pause) {
				conn->tx_ctrl = tx;
    1034:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    1036:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
			ctrl_tx_last_enqueue(conn, tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (!tx->next) {
    103a:	b90b      	cbnz	r3, 1040 <ull_conn_llcp+0xf0>
		conn->tx_data_last = tx;
    103c:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
		if (!conn->procedure_expire) {
    1040:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
    1044:	2800      	cmp	r0, #0
    1046:	d19a      	bne.n	f7e <ull_conn_llcp+0x2e>
			conn->procedure_expire = conn->supervision_reload;
    1048:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			if (conn->procedure_expire <= 1U) {
    104c:	2b01      	cmp	r3, #1
    104e:	d90e      	bls.n	106e <ull_conn_llcp+0x11e>
			conn->procedure_expire = conn->supervision_reload;
    1050:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1054:	e793      	b.n	f7e <ull_conn_llcp+0x2e>
		if (!conn->tx_ctrl) {
    1056:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    105a:	b172      	cbz	r2, 107a <ull_conn_llcp+0x12a>
	tx->next = conn->tx_ctrl_last->next;
    105c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1060:	681a      	ldr	r2, [r3, #0]
    1062:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1064:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1066:	6803      	ldr	r3, [r0, #0]
    1068:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
}
    106c:	e7e5      	b.n	103a <ull_conn_llcp+0xea>
				conn->procedure_expire++;
    106e:	3301      	adds	r3, #1
    1070:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
    1074:	b00d      	add	sp, #52	; 0x34
    1076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    107a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    107c:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1080:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    1084:	e7d9      	b.n	103a <ull_conn_llcp+0xea>
    1086:	bf00      	nop
    1088:	200036dc 	.word	0x200036dc
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
    108c:	f8df a438 	ldr.w	sl, [pc, #1080]	; 14c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x140>

	/* set mutex */
	if (!conn_upd) {
    1090:	f8da 3000 	ldr.w	r3, [sl]
    1094:	2b00      	cmp	r3, #0
    1096:	f000 84ff 	beq.w	1a98 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x710>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    109a:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
    109e:	8e62      	ldrh	r2, [r4, #50]	; 0x32

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    10a0:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    10a4:	4490      	add	r8, r2
    10a6:	44b0      	add	r8, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    10a8:	f013 0303 	ands.w	r3, r3, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    10ac:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    10b0:	f040 83e8 	bne.w	1884 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4fc>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    10b4:	f8b4 90ec 	ldrh.w	r9, [r4, #236]	; 0xec
    10b8:	eba8 0209 	sub.w	r2, r8, r9
    10bc:	fa1f fb82 	uxth.w	fp, r2
				    pdu_ctrl_tx, NULL, NULL);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */

		ctrl_tx_enqueue(conn, tx);

	} else if (instant_latency <= 0x7FFF) {
    10c0:	0412      	lsls	r2, r2, #16
    10c2:	f53f af56 	bmi.w	f72 <ull_conn_llcp+0x22>
		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;
		conn->llcp_ack = conn->llcp_req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    10c6:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
    10ca:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
		conn->llcp_cu.ack = conn->llcp_cu.req;
    10ce:	f894 0104 	ldrb.w	r0, [r4, #260]	; 0x104
    10d2:	f884 0105 	strb.w	r0, [r4, #261]	; 0x105
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    10d6:	428a      	cmp	r2, r1
		conn->llcp_ack = conn->llcp_req;
    10d8:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    10dc:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    10e0:	d009      	beq.n	10f6 <ull_conn_llcp+0x1a6>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    10e2:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    10e6:	f002 0207 	and.w	r2, r2, #7
    10ea:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    10ec:	bf04      	itt	eq
    10ee:	f884 1171 	strbeq.w	r1, [r4, #369]	; 0x171

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
    10f2:	f8a4 30cc 	strheq.w	r3, [r4, #204]	; 0xcc
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
    10f6:	f8da 3000 	ldr.w	r3, [sl]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    10fa:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		if (conn_upd_curr == conn) {
    10fe:	429c      	cmp	r4, r3
	conn_upd_curr = NULL;
    1100:	bf04      	itt	eq
    1102:	2300      	moveq	r3, #0
    1104:	f8ca 3000 	streq.w	r3, [sl]
		LL_ASSERT(rx && rx->hdr.link);
    1108:	2f00      	cmp	r7, #0
    110a:	f000 8595 	beq.w	1c38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8b0>
    110e:	6838      	ldr	r0, [r7, #0]
    1110:	2800      	cmp	r0, #0
    1112:	f000 8591 	beq.w	1c38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8b0>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    1116:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
    111a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
		conn->llcp_rx = rx->hdr.link->mem;
    111c:	6841      	ldr	r1, [r0, #4]
    111e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		if ((conn->llcp_cu.interval != lll->interval) ||
    1122:	4293      	cmp	r3, r2
    1124:	f8b4 110a 	ldrh.w	r1, [r4, #266]	; 0x10a
    1128:	f8b4 c10c 	ldrh.w	ip, [r4, #268]	; 0x10c
    112c:	f000 86d5 	beq.w	1eda <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb52>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
				       lll->interval * 1250) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    1130:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1132:	80fa      	strh	r2, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1134:	f04f 0e13 	mov.w	lr, #19

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
    1138:	2200      	movs	r2, #0
			cu->interval = conn->llcp_cu.interval;
    113a:	83fb      	strh	r3, [r7, #30]
			cu->latency = conn->llcp_cu.latency;
    113c:	8439      	strh	r1, [r7, #32]
			cu->timeout = conn->llcp_cu.timeout;
    113e:	f8a7 c022 	strh.w	ip, [r7, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1142:	f887 e004 	strb.w	lr, [r7, #4]
			cu->status = 0x00;
    1146:	773a      	strb	r2, [r7, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1148:	4639      	mov	r1, r7
    114a:	f012 fa59 	bl	13600 <ll_rx_put>
		ll_rx_sched();
    114e:	f012 fa61 	bl	13614 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1152:	6823      	ldr	r3, [r4, #0]
    1154:	2b00      	cmp	r3, #0
    1156:	da09      	bge.n	116c <ull_conn_llcp+0x21c>
			uint32_t ticks_prepare_to_start =
    1158:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
				MAX(conn->evt.ticks_active_to_start,
				    conn->evt.ticks_preempt_to_start);

			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    115c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    1160:	428a      	cmp	r2, r1
    1162:	bf2c      	ite	cs
    1164:	18a9      	addcs	r1, r5, r2
    1166:	1869      	addcc	r1, r5, r1
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    1168:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    116a:	1acd      	subs	r5, r1, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    116c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    116e:	f8b4 7108 	ldrh.w	r7, [r4, #264]	; 0x108
		conn_interval_old = instant_latency * lll->interval;
    1172:	fb13 f30b 	smulbb	r3, r3, fp
    1176:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    1178:	fbb3 f1f7 	udiv	r1, r3, r7
		conn_interval_new = latency * conn->llcp_cu.interval;
    117c:	fb17 f201 	smulbb	r2, r7, r1
    1180:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    1182:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
    1184:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
    1188:	f080 8544 	bcs.w	1c14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88c>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    118c:	1ad3      	subs	r3, r2, r3
    118e:	48c2      	ldr	r0, [pc, #776]	; (1498 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x110>)
    1190:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1194:	fb02 f303 	mul.w	r3, r2, r3
    1198:	fba3 0100 	umull	r0, r1, r3, r0
    119c:	a3bc      	add	r3, pc, #752	; (adr r3, 1490 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x108>)
    119e:	e9d3 2300 	ldrd	r2, r3, [r3]
    11a2:	f7fe ffad 	bl	100 <__aeabi_uldivmod>
    11a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    11aa:	4405      	add	r5, r0
				(conn_interval_new - conn_interval_old) * 1250U);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) * 1250U);
		}
		lll->latency_prepare += lazy;
    11ac:	8e62      	ldrh	r2, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    11ae:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    11b2:	eba9 0808 	sub.w	r8, r9, r8
    11b6:	44d0      	add	r8, sl
		lll->latency_prepare += lazy;
    11b8:	4432      	add	r2, r6
		lll->latency_prepare -= (instant_latency - latency);
    11ba:	4490      	add	r8, r2
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    11bc:	f240 49e2 	movw	r9, #1250	; 0x4e2
		} else if (lll->role) {
    11c0:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    11c2:	f8a4 8032 	strh.w	r8, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    11c6:	fb09 f707 	mul.w	r7, r9, r7
		} else if (lll->role) {
    11ca:	f2c0 8545 	blt.w	1c58 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8d0>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
    11ce:	4ab3      	ldr	r2, [pc, #716]	; (149c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114>)
    11d0:	49b3      	ldr	r1, [pc, #716]	; (14a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118>)
    11d2:	48b4      	ldr	r0, [pc, #720]	; (14a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c>)
    11d4:	f640 135c 	movw	r3, #2396	; 0x95c
    11d8:	f01d ff3c 	bl	1f054 <printk>
    11dc:	4040      	eors	r0, r0
    11de:	f380 8811 	msr	BASEPRI, r0
    11e2:	f04f 0003 	mov.w	r0, #3
    11e6:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    11e8:	f04f 0800 	mov.w	r8, #0
		periodic_us = conn_interval_us;
    11ec:	463e      	mov	r6, r7

		lll->interval = conn->llcp_cu.interval;
		lll->latency = conn->llcp_cu.latency;

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    11ee:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
		lll->latency = conn->llcp_cu.latency;
    11f2:	f8b4 110a 	ldrh.w	r1, [r4, #266]	; 0x10a
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    11f6:	4bac      	ldr	r3, [pc, #688]	; (14a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x120>)
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    11f8:	48ac      	ldr	r0, [pc, #688]	; (14ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x124>)
		lll->latency = conn->llcp_cu.latency;
    11fa:	8621      	strh	r1, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    11fc:	f242 7c10 	movw	ip, #10000	; 0x2710
    1200:	fb0c 7202 	mla	r2, ip, r2, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1204:	443b      	add	r3, r7
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1206:	4438      	add	r0, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1208:	fbb3 f3f7 	udiv	r3, r3, r7
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    120c:	f101 0c06 	add.w	ip, r1, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1210:	3a01      	subs	r2, #1
    1212:	fbb2 f2f7 	udiv	r2, r2, r7
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1216:	fbb0 f7f7 	udiv	r7, r0, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    121a:	b298      	uxth	r0, r3
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    121c:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1220:	4560      	cmp	r0, ip
		lll->interval = conn->llcp_cu.interval;
    1222:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1226:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    122a:	f8a4 70ca 	strh.w	r7, [r4, #202]	; 0xca
		lll->interval = conn->llcp_cu.interval;
    122e:	85e2      	strh	r2, [r4, #46]	; 0x2e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1230:	dd02      	ble.n	1238 <ull_conn_llcp+0x2e8>
				     (conn->apto_reload - (lll->latency + 6)) :
    1232:	1a40      	subs	r0, r0, r1
    1234:	3806      	subs	r0, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1236:	b280      	uxth	r0, r0
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    1238:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    123c:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
		if (conn->llcp_cu.cmd) {
    1240:	075b      	lsls	r3, r3, #29
			conn->supervision_expire = 0U;
    1242:	bf44      	itt	mi
    1244:	2300      	movmi	r3, #0
    1246:	f8a4 30c8 	strhmi.w	r3, [r4, #200]	; 0xc8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    124a:	2102      	movs	r1, #2
    124c:	2001      	movs	r0, #1
    124e:	f019 feff 	bl	1b050 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1252:	2200      	movs	r2, #0
    1254:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1256:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1258:	2001      	movs	r0, #1
    125a:	f00e fb9f 	bl	f99c <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    125e:	4994      	ldr	r1, [pc, #592]	; (14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>)
    1260:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    1264:	4620      	mov	r0, r4
    1266:	f00e fb2b 	bl	f8c0 <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    126a:	1cc2      	adds	r2, r0, #3
    126c:	fa5f fa82 	uxtb.w	sl, r2
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1270:	4b90      	ldr	r3, [pc, #576]	; (14b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12c>)
    1272:	9400      	str	r4, [sp, #0]
    1274:	4652      	mov	r2, sl
    1276:	2101      	movs	r1, #1
    1278:	2000      	movs	r0, #0
    127a:	f00f fe7b 	bl	10f74 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    127e:	f030 0302 	bics.w	r3, r0, #2
    1282:	d00c      	beq.n	129e <ull_conn_llcp+0x34e>
    1284:	4a85      	ldr	r2, [pc, #532]	; (149c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114>)
    1286:	498c      	ldr	r1, [pc, #560]	; (14b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130>)
    1288:	4886      	ldr	r0, [pc, #536]	; (14a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c>)
    128a:	f640 138b 	movw	r3, #2443	; 0x98b
    128e:	f01d fee1 	bl	1f054 <printk>
    1292:	4040      	eors	r0, r0
    1294:	f380 8811 	msr	BASEPRI, r0
    1298:	f04f 0003 	mov.w	r0, #3
    129c:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    129e:	4b7e      	ldr	r3, [pc, #504]	; (1498 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x110>)
    12a0:	fba6 6703 	umull	r6, r7, r6, r3
    12a4:	4630      	mov	r0, r6
    12a6:	a37a      	add	r3, pc, #488	; (adr r3, 1490 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x108>)
    12a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    12ac:	4639      	mov	r1, r7
    12ae:	f7fe ff27 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    12b2:	4a82      	ldr	r2, [pc, #520]	; (14bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x134>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    12b4:	68e3      	ldr	r3, [r4, #12]
    12b6:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    12b8:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
    12bc:	fbab 2302 	umull	r2, r3, fp, r2
    12c0:	2007      	movs	r0, #7
    12c2:	fb00 330b 	mla	r3, r0, fp, r3
    12c6:	1ab0      	subs	r0, r6, r2
    12c8:	eb67 0103 	sbc.w	r1, r7, r3
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    12cc:	9408      	str	r4, [sp, #32]
    12ce:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
    12d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    12d4:	2400      	movs	r4, #0
				     HAL_TICKER_REMAINDER(periodic_us),
    12d6:	2300      	movs	r3, #0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    12d8:	4f79      	ldr	r7, [pc, #484]	; (14c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x138>)
    12da:	4e7a      	ldr	r6, [pc, #488]	; (14c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13c>)
    12dc:	9707      	str	r7, [sp, #28]
    12de:	9605      	str	r6, [sp, #20]
    12e0:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    12e2:	f7fe ff0d 	bl	100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    12e6:	462b      	mov	r3, r5
    12e8:	e9cd b001 	strd	fp, r0, [sp, #4]
    12ec:	f8cd 8000 	str.w	r8, [sp]
    12f0:	4620      	mov	r0, r4
    12f2:	4652      	mov	r2, sl
    12f4:	2101      	movs	r1, #1
    12f6:	f00f fdd1 	bl	10e9c <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    12fa:	f030 0302 	bics.w	r3, r0, #2
    12fe:	d00c      	beq.n	131a <ull_conn_llcp+0x3ca>
    1300:	4a66      	ldr	r2, [pc, #408]	; (149c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114>)
    1302:	496d      	ldr	r1, [pc, #436]	; (14b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130>)
    1304:	4867      	ldr	r0, [pc, #412]	; (14a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c>)
    1306:	f640 13a5 	movw	r3, #2469	; 0x9a5
    130a:	f01d fea3 	bl	1f054 <printk>
    130e:	4040      	eors	r0, r0
    1310:	f380 8811 	msr	BASEPRI, r0
    1314:	f04f 0003 	mov.w	r0, #3
    1318:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    131a:	f1b9 0f00 	cmp.w	r9, #0
    131e:	f040 85f5 	bne.w	1f0c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb84>
				return -ECANCELED;
    1322:	f06f 0047 	mvn.w	r0, #71	; 0x47
    1326:	e62b      	b.n	f80 <ull_conn_llcp+0x30>
			event_counter = lll->event_counter +
    1328:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    132a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
static inline void event_phy_upd_ind_prep(struct ll_conn *conn,
					  uint16_t event_counter)
{
	struct node_rx_pu *upd;

	if (conn->llcp.phy_upd_ind.initiate) {
    132c:	f894 50ec 	ldrb.w	r5, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    1330:	441a      	add	r2, r3
					lll->latency_prepare + lazy;
    1332:	4432      	add	r2, r6
	if (conn->llcp.phy_upd_ind.initiate) {
    1334:	07ef      	lsls	r7, r5, #31
			event_counter = lll->event_counter +
    1336:	b296      	uxth	r6, r2
	if (conn->llcp.phy_upd_ind.initiate) {
    1338:	46ab      	mov	fp, r5
    133a:	f100 830e 	bmi.w	195a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5d2>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);

		ctrl_tx_enqueue(conn, tx);
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    133e:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
    1342:	1ab6      	subs	r6, r6, r2
    1344:	0437      	lsls	r7, r6, #16
    1346:	f53f ae14 	bmi.w	f72 <ull_conn_llcp+0x22>
	if (!conn->common.fex_valid ||
    134a:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = lll->phy_tx;
    134e:	f894 8064 	ldrb.w	r8, [r4, #100]	; 0x64
		old_rx = lll->phy_rx;
    1352:	f894 a065 	ldrb.w	sl, [r4, #101]	; 0x65
		conn->llcp_ack = conn->llcp_req;
    1356:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		uint16_t eff_tx_time = lll->max_tx_time;
		uint16_t eff_rx_time = lll->max_rx_time;
    135a:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
		conn->llcp_ack = conn->llcp_req;
    135e:	f884 10e9 	strb.w	r1, [r4, #233]	; 0xe9
	if (!conn->common.fex_valid ||
    1362:	07d6      	lsls	r6, r2, #31
		old_tx = lll->phy_tx;
    1364:	f008 0807 	and.w	r8, r8, #7
		old_rx = lll->phy_rx;
    1368:	f00a 0a07 	and.w	sl, sl, #7
	if (!conn->common.fex_valid ||
    136c:	f140 85d7 	bpl.w	1f1e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb96>
	feature_coded_phy = (conn->llcp_feature.features_conn &
    1370:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
	if (!conn->common.fex_valid ||
    1374:	0510      	lsls	r0, r2, #20
    1376:	f140 85d2 	bpl.w	1f1e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb96>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    137a:	f8b4 90d8 	ldrh.w	r9, [r4, #216]	; 0xd8
    137e:	f5b9 6f29 	cmp.w	r9, #2704	; 0xa90
    1382:	bf28      	it	cs
    1384:	f44f 6929 	movcs.w	r9, #2704	; 0xa90
    1388:	f5b9 7fa4 	cmp.w	r9, #328	; 0x148
    138c:	f44f 6329 	mov.w	r3, #2704	; 0xa90
    1390:	bf38      	it	cc
    1392:	f44f 79a4 	movcc.w	r9, #328	; 0x148
    1396:	930b      	str	r3, [sp, #44]	; 0x2c
		uint16_t max_rx_time, max_tx_time;

		dle_max_time_get(conn, &max_rx_time, &max_tx_time);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		if (conn->llcp.phy_upd_ind.tx) {
    1398:	f015 0f1c 	tst.w	r5, #28
    139c:	f040 8632 	bne.w	2004 <CONFIG_MAIN_STACK_SIZE+0x4>
		uint16_t eff_tx_time = lll->max_tx_time;
    13a0:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
						    lll->phy_tx,
						    max_tx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		if (conn->llcp.phy_upd_ind.rx) {
    13a4:	f015 0fe0 	tst.w	r5, #224	; 0xe0
    13a8:	d00c      	beq.n	13c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    13aa:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
			eff_rx_time =
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    13ae:	f894 005e 	ldrb.w	r0, [r4, #94]	; 0x5e
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    13b2:	0969      	lsrs	r1, r5, #5
    13b4:	f361 0202 	bfi	r2, r1, #0, #3
    13b8:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    13bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    13be:	f012 fff9 	bl	143b4 <calc_eff_time>
    13c2:	4607      	mov	r7, r0

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    13c4:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    13c8:	2d00      	cmp	r5, #0
    13ca:	f000 8701 	beq.w	21d0 <CONFIG_MAIN_STACK_SIZE+0x1d0>
    13ce:	6828      	ldr	r0, [r5, #0]
    13d0:	2800      	cmp	r0, #0
    13d2:	f000 86fd 	beq.w	21d0 <CONFIG_MAIN_STACK_SIZE+0x1d0>
		conn->llcp_rx = rx->hdr.link->mem;
    13d6:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    13da:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
    13de:	6843      	ldr	r3, [r0, #4]
    13e0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    13e4:	f01b 0f02 	tst.w	fp, #2
    13e8:	f3c1 0e02 	ubfx	lr, r1, #0, #3
    13ec:	f3c2 0c02 	ubfx	ip, r2, #0, #3
    13f0:	f001 0107 	and.w	r1, r1, #7
    13f4:	f002 0207 	and.w	r2, r2, #7
    13f8:	d102      	bne.n	1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>
    13fa:	4588      	cmp	r8, r1
    13fc:	f001 8060 	beq.w	24c0 <CONFIG_MAIN_STACK_SIZE+0x4c0>
			ll_rx_sched();

			return;
		}

		rx->hdr.handle = lll->handle;
    1400:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1402:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1404:	2217      	movs	r2, #23

		upd = (void *)rx->pdu;
		upd->status = 0U;
    1406:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
    1408:	f885 e01d 	strb.w	lr, [r5, #29]
		upd->rx = lll->phy_rx;
    140c:	f885 c01e 	strb.w	ip, [r5, #30]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1410:	712a      	strb	r2, [r5, #4]
		upd->status = 0U;
    1412:	772b      	strb	r3, [r5, #28]

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1414:	4629      	mov	r1, r5
    1416:	f012 f8f3 	bl	13600 <ll_rx_put>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		/* get a rx node for ULL->LL */
		rx = conn->llcp_rx;
    141a:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    141e:	2d00      	cmp	r5, #0
    1420:	f000 86e8 	beq.w	21f4 <CONFIG_MAIN_STACK_SIZE+0x1f4>
    1424:	6828      	ldr	r0, [r5, #0]
    1426:	2800      	cmp	r0, #0
    1428:	f000 86e4 	beq.w	21f4 <CONFIG_MAIN_STACK_SIZE+0x1f4>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Update max tx and/or max rx if changed */
		if ((eff_tx_time <= lll->max_tx_time) &&
    142c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
		conn->llcp_rx = rx->hdr.link->mem;
    1430:	6842      	ldr	r2, [r0, #4]
    1432:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		if ((eff_tx_time <= lll->max_tx_time) &&
    1436:	42b3      	cmp	r3, r6
    1438:	d309      	bcc.n	144e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc6>
    143a:	454b      	cmp	r3, r9
    143c:	d807      	bhi.n	144e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc6>
		    (lll->max_tx_time <= max_tx_time) &&
		    (eff_rx_time <= lll->max_rx_time) &&
    143e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
		    (lll->max_tx_time <= max_tx_time) &&
    1442:	42bb      	cmp	r3, r7
    1444:	d303      	bcc.n	144e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc6>
		    (eff_rx_time <= lll->max_rx_time) &&
    1446:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1448:	4293      	cmp	r3, r2
    144a:	f241 804d 	bls.w	24e8 <CONFIG_MAIN_STACK_SIZE+0x4e8>
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
			ll_rx_sched();
			return;
		}
		lll->max_tx_time = eff_tx_time;
    144e:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
		lll->max_rx_time = eff_rx_time;
    1452:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
		rx->hdr.handle = lll->handle;
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		struct pdu_data *pdu_rx = (void *)rx->pdu;

		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1456:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
    1458:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    145a:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    145c:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1460:	2102      	movs	r1, #2
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1462:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1464:	7129      	strb	r1, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1466:	772b      	strb	r3, [r5, #28]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1468:	776a      	strb	r2, [r5, #29]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		struct pdu_data_llctrl_length_req *lr =
			(void *)&pdu_rx->llctrl.length_rsp;

		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    146a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    146e:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1472:	842b      	strh	r3, [r5, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1474:	2315      	movs	r3, #21
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    1476:	84aa      	strh	r2, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1478:	77eb      	strb	r3, [r5, #31]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    147a:	4629      	mov	r1, r5
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    147c:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    147e:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    1480:	f012 f8be 	bl	13600 <ll_rx_put>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		ll_rx_sched();
    1484:	f012 f8c6 	bl	13614 <ll_rx_sched>
    1488:	e573      	b.n	f72 <ull_conn_llcp+0x22>
    148a:	bf00      	nop
    148c:	f3af 8000 	nop.w
    1490:	1afd498d 	.word	0x1afd498d
    1494:	00000007 	.word	0x00000007
    1498:	3b9aca00 	.word	0x3b9aca00
    149c:	00025ad4 	.word	0x00025ad4
    14a0:	0002568c 	.word	0x0002568c
    14a4:	0002561c 	.word	0x0002561c
    14a8:	01c9c37f 	.word	0x01c9c37f
    14ac:	026259ff 	.word	0x026259ff
    14b0:	20003490 	.word	0x20003490
    14b4:	000146e5 	.word	0x000146e5
    14b8:	00025c14 	.word	0x00025c14
    14bc:	1afd498d 	.word	0x1afd498d
    14c0:	0001468d 	.word	0x0001468d
    14c4:	00017675 	.word	0x00017675
    14c8:	20003658 	.word	0x20003658
	if (conn->llcp.encryption.state) {
    14cc:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    14d0:	f013 0503 	ands.w	r5, r3, #3
    14d4:	f000 8285 	beq.w	19e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x65a>
		if (lll->role &&
    14d8:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    14dc:	2b00      	cmp	r3, #0
    14de:	f6bf ad48 	bge.w	f72 <ull_conn_llcp+0x22>
    14e2:	2d01      	cmp	r5, #1
    14e4:	f47f ad45 	bne.w	f72 <ull_conn_llcp+0x22>
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    14e8:	48bb      	ldr	r0, [pc, #748]	; (17d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x450>)
    14ea:	f00e f9b3 	bl	f854 <mem_acquire>
	if (!tx) {
    14ee:	4605      	mov	r5, r0
    14f0:	2800      	cmp	r0, #0
    14f2:	f43f ad3e 	beq.w	f72 <ull_conn_llcp+0x22>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    14f6:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    14f8:	220d      	movs	r2, #13
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    14fa:	f043 0303 	orr.w	r3, r3, #3
			   sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    14fe:	2704      	movs	r7, #4
	BUILD_ASSERT(offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), ivs) ==
		     (offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), skds) +
		     sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds)));

	/* NOTE: if not sufficient random numbers, ignore waiting */
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    1500:	f100 0608 	add.w	r6, r0, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1504:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    1506:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    1508:	71c7      	strb	r7, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    150a:	210c      	movs	r1, #12
    150c:	4630      	mov	r0, r6
    150e:	f017 fb8b 	bl	18c28 <lll_csrand_isr_get>
			   sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds) +
			   sizeof(pdu_ctrl_tx->llctrl.enc_rsp.ivs));

	/* things from slave stored for session key calculation */
	memcpy(&conn->llcp.encryption.skd[8],
    1512:	4631      	mov	r1, r6
    1514:	2208      	movs	r2, #8
    1516:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    151a:	f020 f8c4 	bl	216a6 <memcpy>
	       &pdu_ctrl_tx->llctrl.enc_rsp.skds[0], 8);
	memcpy(&conn->lll.ccm_rx.iv[4],
    151e:	463a      	mov	r2, r7
    1520:	f105 0110 	add.w	r1, r5, #16
    1524:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    1528:	f020 f8bd 	bl	216a6 <memcpy>
	    conn->tx_head &&
    152c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    1530:	2b00      	cmp	r3, #0
    1532:	f000 86e1 	beq.w	22f8 <CONFIG_MAIN_STACK_SIZE+0x2f8>
	    !conn->llcp_enc.pause_tx &&
    1536:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    153a:	0790      	lsls	r0, r2, #30
    153c:	f100 86dc 	bmi.w	22f8 <CONFIG_MAIN_STACK_SIZE+0x2f8>
	    !conn->llcp_phy.pause_tx &&
    1540:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1544:	07d1      	lsls	r1, r2, #31
    1546:	f100 86d7 	bmi.w	22f8 <CONFIG_MAIN_STACK_SIZE+0x2f8>
		if (conn->tx_head == conn->tx_data) {
    154a:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    154e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1550:	bf04      	itt	eq
    1552:	681a      	ldreq	r2, [r3, #0]
    1554:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1558:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    155c:	2a00      	cmp	r2, #0
    155e:	f001 8121 	beq.w	27a4 <CONFIG_MAIN_STACK_SIZE+0x7a4>
	tx->next = conn->tx_ctrl_last->next;
    1562:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1566:	681a      	ldr	r2, [r3, #0]
    1568:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    156a:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    156c:	682b      	ldr	r3, [r5, #0]
    156e:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1572:	2b00      	cmp	r3, #0
    1574:	f001 80c2 	beq.w	26fc <CONFIG_MAIN_STACK_SIZE+0x6fc>
			rx = ll_pdu_rx_alloc();
    1578:	f012 f870 	bl	1365c <ll_pdu_rx_alloc>
			if (!rx) {
    157c:	4605      	mov	r5, r0
    157e:	2800      	cmp	r0, #0
    1580:	f43f acf7 	beq.w	f72 <ull_conn_llcp+0x22>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1584:	7f2b      	ldrb	r3, [r5, #28]
			rx->hdr.handle = conn->lll.handle;
    1586:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1588:	80ea      	strh	r2, [r5, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    158a:	f043 0303 	orr.w	r3, r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    158e:	2602      	movs	r6, #2
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    1590:	2117      	movs	r1, #23
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1592:	2203      	movs	r2, #3
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1594:	772b      	strb	r3, [r5, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    1596:	7769      	strb	r1, [r5, #29]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1598:	77ea      	strb	r2, [r5, #31]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    159a:	f204 1155 	addw	r1, r4, #341	; 0x155
    159e:	2208      	movs	r2, #8
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    15a0:	712e      	strb	r6, [r5, #4]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    15a2:	f105 0020 	add.w	r0, r5, #32
    15a6:	f020 f87e 	bl	216a6 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    15aa:	f894 3153 	ldrb.w	r3, [r4, #339]	; 0x153
    15ae:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    15b2:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    15b6:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
    15ba:	6828      	ldr	r0, [r5, #0]
    15bc:	4629      	mov	r1, r5
    15be:	f012 f81f 	bl	13600 <ll_rx_put>
			ll_rx_sched();
    15c2:	f012 f827 	bl	13614 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    15c6:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    15ca:	f366 0301 	bfi	r3, r6, #0, #2
    15ce:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    15d2:	e4ce      	b.n	f72 <ull_conn_llcp+0x22>
			event_counter = lll->event_counter +
    15d4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    15d6:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
    15d8:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    15dc:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
    15de:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
    15e0:	07df      	lsls	r7, r3, #31
			event_counter = lll->event_counter +
    15e2:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
    15e4:	f100 8100 	bmi.w	17e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x460>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    15e8:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
    15ec:	1ab6      	subs	r6, r6, r2
    15ee:	0435      	lsls	r5, r6, #16
    15f0:	f53f acbf 	bmi.w	f72 <ull_conn_llcp+0x22>
		conn->llcp_ack = conn->llcp_req;
    15f4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    15f8:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&lll->data_chan_map[0],
    15fc:	f104 0538 	add.w	r5, r4, #56	; 0x38
    1600:	2205      	movs	r2, #5
    1602:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    1606:	4628      	mov	r0, r5
    1608:	f020 f84d 	bl	216a6 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    160c:	4628      	mov	r0, r5
    160e:	2105      	movs	r1, #5
    1610:	f00e faee 	bl	fbf0 <util_ones_count_get>
		lll->data_chan_count =
    1614:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    1618:	2201      	movs	r2, #1
		lll->data_chan_count =
    161a:	f360 0305 	bfi	r3, r0, #0, #6
    161e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    1622:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
    1626:	e4a4      	b.n	f72 <ull_conn_llcp+0x22>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1628:	486b      	ldr	r0, [pc, #428]	; (17d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x450>)
    162a:	f00e f913 	bl	f854 <mem_acquire>
	if (tx) {
    162e:	2800      	cmp	r0, #0
    1630:	f43f ac9f 	beq.w	f72 <ull_conn_llcp+0x22>
		conn->llcp_ack = conn->llcp_req;
    1634:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1638:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    163c:	2301      	movs	r3, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    163e:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1640:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    1642:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1646:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    164a:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    164c:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    164e:	71c1      	strb	r1, [r0, #7]
	if (
    1650:	2b00      	cmp	r3, #0
    1652:	f000 82d4 	beq.w	1bfe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x876>
	    !conn->llcp_enc.pause_tx &&
    1656:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    165a:	0791      	lsls	r1, r2, #30
    165c:	f100 82cf 	bmi.w	1bfe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x876>
	    !conn->llcp_phy.pause_tx &&
    1660:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1664:	07d2      	lsls	r2, r2, #31
    1666:	f100 82ca 	bmi.w	1bfe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x876>
		if (conn->tx_head == conn->tx_data) {
    166a:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    166e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1670:	bf04      	itt	eq
    1672:	681a      	ldreq	r2, [r3, #0]
    1674:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1678:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    167c:	2a00      	cmp	r2, #0
    167e:	f001 8055 	beq.w	272c <CONFIG_MAIN_STACK_SIZE+0x72c>
	tx->next = conn->tx_ctrl_last->next;
    1682:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1686:	681a      	ldr	r2, [r3, #0]
    1688:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    168a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    168c:	6803      	ldr	r3, [r0, #0]
    168e:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1692:	2b00      	cmp	r3, #0
    1694:	f000 84b2 	beq.w	1ffc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc74>
		conn->procedure_expire = conn->procedure_reload;
    1698:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    169c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    16a0:	e467      	b.n	f72 <ull_conn_llcp+0x22>
			LL_ASSERT(0);
    16a2:	4a4e      	ldr	r2, [pc, #312]	; (17dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x454>)
    16a4:	494e      	ldr	r1, [pc, #312]	; (17e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x458>)
    16a6:	484f      	ldr	r0, [pc, #316]	; (17e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x45c>)
    16a8:	f240 33bf 	movw	r3, #959	; 0x3bf
    16ac:	f01d fcd2 	bl	1f054 <printk>
    16b0:	4040      	eors	r0, r0
    16b2:	f380 8811 	msr	BASEPRI, r0
    16b6:	f04f 0003 	mov.w	r0, #3
    16ba:	df02      	svc	2
			break;
    16bc:	e459      	b.n	f72 <ull_conn_llcp+0x22>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    16be:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
    16c2:	f894 c118 	ldrb.w	ip, [r4, #280]	; 0x118
    16c6:	4562      	cmp	r2, ip
    16c8:	d154      	bne.n	1774 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3ec>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    16ca:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
    16ce:	f894 c124 	ldrb.w	ip, [r4, #292]	; 0x124
    16d2:	4562      	cmp	r2, ip
    16d4:	f000 8312 	beq.w	1cfc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x974>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    16d8:	eba2 020c 	sub.w	r2, r2, ip
    16dc:	07d1      	lsls	r1, r2, #31
    16de:	f57f ac48 	bpl.w	f72 <ull_conn_llcp+0x22>
	if (conn->llcp_version.tx == 0U) {
    16e2:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
    16e6:	07da      	lsls	r2, r3, #31
    16e8:	f140 8741 	bpl.w	256e <CONFIG_MAIN_STACK_SIZE+0x56e>
	} else if (conn->llcp_version.rx) {
    16ec:	079a      	lsls	r2, r3, #30
    16ee:	f140 872b 	bpl.w	2548 <CONFIG_MAIN_STACK_SIZE+0x548>
		rx = ll_pdu_rx_alloc();
    16f2:	f011 ffb3 	bl	1365c <ll_pdu_rx_alloc>
		if (!rx) {
    16f6:	4601      	mov	r1, r0
    16f8:	b300      	cbz	r0, 173c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b4>
		conn->llcp_version.ack = conn->llcp_version.req;
    16fa:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
    16fe:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1702:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    1704:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1706:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1708:	f043 0303 	orr.w	r3, r3, #3
    170c:	770b      	strb	r3, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    170e:	2002      	movs	r0, #2
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1710:	2206      	movs	r2, #6
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1712:	230c      	movs	r3, #12
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1714:	7108      	strb	r0, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1716:	774a      	strb	r2, [r1, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1718:	77cb      	strb	r3, [r1, #31]
		pdu->llctrl.version_ind.version_number =
    171a:	f894 0127 	ldrb.w	r0, [r4, #295]	; 0x127
		pdu->llctrl.version_ind.company_id =
    171e:	f8b4 2128 	ldrh.w	r2, [r4, #296]	; 0x128
		pdu->llctrl.version_ind.sub_version_number =
    1722:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
    1726:	f8a1 3023 	strh.w	r3, [r1, #35]	; 0x23
		pdu->llctrl.version_ind.version_number =
    172a:	f881 0020 	strb.w	r0, [r1, #32]
		pdu->llctrl.version_ind.company_id =
    172e:	f8a1 2021 	strh.w	r2, [r1, #33]	; 0x21
		ll_rx_put(rx->hdr.link, rx);
    1732:	6808      	ldr	r0, [r1, #0]
    1734:	f011 ff64 	bl	13600 <ll_rx_put>
		ll_rx_sched();
    1738:	f011 ff6c 	bl	13614 <ll_rx_sched>
	break;
    173c:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    1740:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
    1744:	e410      	b.n	f68 <ull_conn_llcp+0x18>
	switch (conn->llcp_length.state) {
    1746:	f002 0107 	and.w	r1, r2, #7
    174a:	2906      	cmp	r1, #6
    174c:	f201 8190 	bhi.w	2a70 <CONFIG_MAIN_STACK_SIZE+0xa70>
    1750:	a001      	add	r0, pc, #4	; (adr r0, 1758 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3d0>)
    1752:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1756:	bf00      	nop
    1758:	00001b2d 	.word	0x00001b2d
    175c:	00000fc5 	.word	0x00000fc5
    1760:	00000fc5 	.word	0x00000fc5
    1764:	00000fc5 	.word	0x00000fc5
    1768:	00001aa1 	.word	0x00001aa1
    176c:	00001aa1 	.word	0x00001aa1
    1770:	00000fc5 	.word	0x00000fc5
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    1774:	eba2 020c 	sub.w	r2, r2, ip
    1778:	07d3      	lsls	r3, r2, #31
    177a:	f57f abfa 	bpl.w	f72 <ull_conn_llcp+0x22>
	if (conn->common.fex_valid) {
    177e:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
    1782:	f011 0701 	ands.w	r7, r1, #1
    1786:	f000 83de 	beq.w	1f46 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbbe>
		rx = ll_pdu_rx_alloc();
    178a:	f011 ff67 	bl	1365c <ll_pdu_rx_alloc>
		if (!rx) {
    178e:	4607      	mov	r7, r0
    1790:	2800      	cmp	r0, #0
    1792:	d0d3      	beq.n	173c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b4>
		conn->llcp_feature.ack = conn->llcp_feature.req;
    1794:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    1798:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    179c:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    179e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    17a0:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    17a2:	f043 0303 	orr.w	r3, r3, #3
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    17a6:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    17a8:	2002      	movs	r0, #2
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    17aa:	4641      	mov	r1, r8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    17ac:	773b      	strb	r3, [r7, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    17ae:	7138      	strb	r0, [r7, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    17b0:	777a      	strb	r2, [r7, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    17b2:	77fa      	strb	r2, [r7, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    17b4:	f107 0020 	add.w	r0, r7, #32
    17b8:	2208      	movs	r2, #8
    17ba:	f01f ff9f 	bl	216fc <memset>
		sys_put_le24(conn->llcp_feature.features_peer,
    17be:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	dst[0] = val;
    17c2:	f887 3020 	strb.w	r3, [r7, #32]
	dst[1] = val >> 8;
    17c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    17ca:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    17cc:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	dst[2] = val >> 16;
    17d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
    17d4:	4639      	mov	r1, r7
    17d6:	e7ac      	b.n	1732 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3aa>
    17d8:	200036dc 	.word	0x200036dc
    17dc:	00025ad4 	.word	0x00025ad4
    17e0:	0002568c 	.word	0x0002568c
    17e4:	0002561c 	.word	0x0002561c
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    17e8:	48ce      	ldr	r0, [pc, #824]	; (1b24 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x79c>)
    17ea:	f00e f833 	bl	f854 <mem_acquire>
		if (tx) {
    17ee:	4605      	mov	r5, r0
    17f0:	2800      	cmp	r0, #0
    17f2:	f43f abbe 	beq.w	f72 <ull_conn_llcp+0x22>
			conn->llcp.chan_map.instant = event_counter +
    17f6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    17f8:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
    17fa:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
    17fe:	4433      	add	r3, r6
						      conn->lll.latency + 6;
    1800:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
    1802:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			conn->llcp.chan_map.initiate = 0U;
    1806:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->llctrl.opcode =
    180a:	2301      	movs	r3, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    180c:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1810:	2008      	movs	r0, #8
			conn->llcp.chan_map.initiate = 0U;
    1812:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1816:	712a      	strb	r2, [r5, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1818:	7168      	strb	r0, [r5, #5]
			pdu_ctrl_tx->llctrl.opcode =
    181a:	71eb      	strb	r3, [r5, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    181c:	2205      	movs	r2, #5
    181e:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    1822:	1828      	adds	r0, r5, r0
    1824:	f01f ff3f 	bl	216a6 <memcpy>
	    conn->tx_head &&
    1828:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    182c:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
    1830:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
    1834:	2b00      	cmp	r3, #0
    1836:	f000 80c9 	beq.w	19cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x644>
	    !conn->llcp_enc.pause_tx &&
    183a:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    183e:	0791      	lsls	r1, r2, #30
    1840:	f100 80c4 	bmi.w	19cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x644>
	    !conn->llcp_phy.pause_tx &&
    1844:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1848:	07d2      	lsls	r2, r2, #31
    184a:	f100 80bf 	bmi.w	19cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x644>
		if (conn->tx_head == conn->tx_data) {
    184e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1852:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1854:	bf04      	itt	eq
    1856:	681a      	ldreq	r2, [r3, #0]
    1858:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    185c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1860:	2a00      	cmp	r2, #0
    1862:	f000 8776 	beq.w	2752 <CONFIG_MAIN_STACK_SIZE+0x752>
	tx->next = conn->tx_ctrl_last->next;
    1866:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    186a:	681a      	ldr	r2, [r3, #0]
    186c:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    186e:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    1870:	682b      	ldr	r3, [r5, #0]
    1872:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1876:	2b00      	cmp	r3, #0
    1878:	f47f ab7b 	bne.w	f72 <ull_conn_llcp+0x22>
		conn->tx_data_last = tx;
    187c:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
    1880:	f7ff bb77 	b.w	f72 <ull_conn_llcp+0x22>
		rx = ll_pdu_rx_alloc_peek(1);
    1884:	2001      	movs	r0, #1
    1886:	f011 fecb 	bl	13620 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    188a:	4606      	mov	r6, r0
    188c:	2800      	cmp	r0, #0
    188e:	f43f ab70 	beq.w	f72 <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1892:	48a4      	ldr	r0, [pc, #656]	; (1b24 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x79c>)
    1894:	f00d ffde 	bl	f854 <mem_acquire>
		if (!tx) {
    1898:	4605      	mov	r5, r0
    189a:	2800      	cmp	r0, #0
    189c:	f43f ab69 	beq.w	f72 <ull_conn_llcp+0x22>
		(void)ll_pdu_rx_alloc();
    18a0:	f011 fedc 	bl	1365c <ll_pdu_rx_alloc>
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    18a4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		rx->hdr.link->mem = conn->llcp_rx;
    18a6:	6832      	ldr	r2, [r6, #0]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    18a8:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    18ac:	4443      	add	r3, r8
    18ae:	3306      	adds	r3, #6
    18b0:	b299      	uxth	r1, r3
		rx->hdr.link->mem = conn->llcp_rx;
    18b2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    18b6:	6053      	str	r3, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    18b8:	792a      	ldrb	r2, [r5, #4]
		conn->llcp_rx = rx;
    18ba:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    18be:	f36f 0001 	bfc	r0, #0, #2
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    18c2:	230c      	movs	r3, #12
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    18c4:	f884 0106 	strb.w	r0, [r4, #262]	; 0x106
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    18c8:	f8a4 10ec 	strh.w	r1, [r4, #236]	; 0xec
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    18cc:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    18d0:	716b      	strb	r3, [r5, #5]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    18d2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	    conn->tx_head &&
    18d6:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    18da:	4e93      	ldr	r6, [pc, #588]	; (1b28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a0>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    18dc:	712a      	strb	r2, [r5, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    18de:	2200      	movs	r2, #0
    18e0:	71ea      	strb	r2, [r5, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    18e2:	fba6 2303 	umull	r2, r3, r6, r3
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    18e6:	f894 6114 	ldrb.w	r6, [r4, #276]	; 0x114
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    18ea:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    18ee:	722e      	strb	r6, [r5, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    18f0:	f3c3 238f 	ubfx	r3, r3, #10, #16
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    18f4:	f8b4 610a 	ldrh.w	r6, [r4, #266]	; 0x10a
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    18f8:	f8a5 200b 	strh.w	r2, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    18fc:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
    1900:	f8a5 200f 	strh.w	r2, [r5, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1904:	f8a5 600d 	strh.w	r6, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1908:	f8a5 1011 	strh.w	r1, [r5, #17]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    190c:	f8a5 3009 	strh.w	r3, [r5, #9]
	if (
    1910:	2800      	cmp	r0, #0
    1912:	f000 830a 	beq.w	1f2a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xba2>
	    !conn->llcp_enc.pause_tx &&
    1916:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	    conn->tx_head &&
    191a:	079e      	lsls	r6, r3, #30
    191c:	f100 8305 	bmi.w	1f2a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xba2>
	    !conn->llcp_phy.pause_tx &&
    1920:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    1924:	07d9      	lsls	r1, r3, #31
    1926:	f100 8300 	bmi.w	1f2a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xba2>
		if (conn->tx_head == conn->tx_data) {
    192a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    192e:	4298      	cmp	r0, r3
			conn->tx_data = conn->tx_data->next;
    1930:	bf04      	itt	eq
    1932:	6803      	ldreq	r3, [r0, #0]
    1934:	f8c4 31bc 	streq.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1938:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    193c:	2b00      	cmp	r3, #0
    193e:	f000 8713 	beq.w	2768 <CONFIG_MAIN_STACK_SIZE+0x768>
	tx->next = conn->tx_ctrl_last->next;
    1942:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1946:	681a      	ldr	r2, [r3, #0]
    1948:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    194a:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    194c:	6828      	ldr	r0, [r5, #0]
	conn->tx_ctrl_last = tx;
    194e:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1952:	2800      	cmp	r0, #0
    1954:	f47f ab0d 	bne.w	f72 <ull_conn_llcp+0x22>
    1958:	e790      	b.n	187c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f4>
		rx = ll_pdu_rx_alloc_peek(2);
    195a:	2002      	movs	r0, #2
    195c:	f011 fe60 	bl	13620 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1960:	4607      	mov	r7, r0
    1962:	2800      	cmp	r0, #0
    1964:	f43f ab05 	beq.w	f72 <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1968:	486e      	ldr	r0, [pc, #440]	; (1b24 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x79c>)
    196a:	f00d ff73 	bl	f854 <mem_acquire>
		if (!tx) {
    196e:	4605      	mov	r5, r0
    1970:	2800      	cmp	r0, #0
    1972:	f43f aafe 	beq.w	f72 <ull_conn_llcp+0x22>
		conn->llcp.phy_upd_ind.initiate = 0U;
    1976:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    197a:	f36f 0300 	bfc	r3, #0, #1
		if (!((conn->llcp.phy_upd_ind.tx |
    197e:	f3c3 0082 	ubfx	r0, r3, #2, #3
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    1982:	f3c3 1242 	ubfx	r2, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
    1986:	ea50 0802 	orrs.w	r8, r0, r2
		conn->llcp.phy_upd_ind.initiate = 0U;
    198a:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (!((conn->llcp.phy_upd_ind.tx |
    198e:	b2db      	uxtb	r3, r3
    1990:	f040 85b3 	bne.w	24fa <CONFIG_MAIN_STACK_SIZE+0x4fa>
			conn->llcp_ack = conn->llcp_req;
    1994:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.phy_upd_ind.instant = 0U;
    1998:	f8a4 80ee 	strh.w	r8, [r4, #238]	; 0xee
			if (conn->llcp.phy_upd_ind.cmd) {
    199c:	0798      	lsls	r0, r3, #30
			conn->llcp_ack = conn->llcp_req;
    199e:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			if (conn->llcp.phy_upd_ind.cmd) {
    19a2:	f100 8673 	bmi.w	268c <CONFIG_MAIN_STACK_SIZE+0x68c>
    19a6:	4643      	mov	r3, r8
    19a8:	4641      	mov	r1, r8
		pdu_ctrl_tx->len =
    19aa:	2205      	movs	r2, #5
    19ac:	716a      	strb	r2, [r5, #5]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    19ae:	f885 8008 	strb.w	r8, [r5, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    19b2:	792a      	ldrb	r2, [r5, #4]
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    19b4:	726b      	strb	r3, [r5, #9]
	    conn->tx_head &&
    19b6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    19ba:	8169      	strh	r1, [r5, #10]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    19bc:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    19c0:	2118      	movs	r1, #24
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    19c2:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_tx->llctrl.opcode =
    19c4:	71e9      	strb	r1, [r5, #7]
	if (
    19c6:	2b00      	cmp	r3, #0
    19c8:	f47f af37 	bne.w	183a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b2>
		if (!conn->tx_ctrl) {
    19cc:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    19d0:	2a00      	cmp	r2, #0
    19d2:	f47f af48 	bne.w	1866 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4de>
			tx->next = conn->tx_head;
    19d6:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    19d8:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    19dc:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    19e0:	e749      	b.n	1876 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ee>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    19e2:	4850      	ldr	r0, [pc, #320]	; (1b24 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x79c>)
    19e4:	f00d ff36 	bl	f854 <mem_acquire>
	if (!tx) {
    19e8:	4606      	mov	r6, r0
    19ea:	2800      	cmp	r0, #0
    19ec:	f43f aac1 	beq.w	f72 <ull_conn_llcp+0x22>
	if (!lll->role) {
    19f0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    19f4:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
    19f6:	f100 0804 	add.w	r8, r0, #4
	if (!lll->role) {
    19fa:	f280 8416 	bge.w	222a <CONFIG_MAIN_STACK_SIZE+0x22a>
	else if (!lll->enc_rx) {
    19fe:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    1a02:	071d      	lsls	r5, r3, #28
    1a04:	f100 8600 	bmi.w	2608 <CONFIG_MAIN_STACK_SIZE+0x608>
		if (conn->llcp.encryption.error_code) {
    1a08:	f894 50ed 	ldrb.w	r5, [r4, #237]	; 0xed
    1a0c:	2d00      	cmp	r5, #0
    1a0e:	f000 8496 	beq.w	233e <CONFIG_MAIN_STACK_SIZE+0x33e>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1a12:	7903      	ldrb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    1a14:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1a18:	f043 0303 	orr.w	r3, r3, #3
    1a1c:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    1a1e:	07d0      	lsls	r0, r2, #31
    1a20:	f140 8620 	bpl.w	2664 <CONFIG_MAIN_STACK_SIZE+0x664>
	    (conn->llcp_feature.features_conn &
    1a24:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	if (conn->common.fex_valid &&
    1a28:	0759      	lsls	r1, r3, #29
    1a2a:	f140 861b 	bpl.w	2664 <CONFIG_MAIN_STACK_SIZE+0x664>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1a2e:	2211      	movs	r2, #17
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1a30:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
    1a32:	7275      	strb	r5, [r6, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1a34:	71f2      	strb	r2, [r6, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1a36:	7233      	strb	r3, [r6, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    1a38:	7177      	strb	r7, [r6, #5]
	    conn->tx_head &&
    1a3a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	conn->llcp.encryption.error_code = 0U;
    1a3e:	2200      	movs	r2, #0
    1a40:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
	if (
    1a44:	2b00      	cmp	r3, #0
    1a46:	f000 84c4 	beq.w	23d2 <CONFIG_MAIN_STACK_SIZE+0x3d2>
	    !conn->llcp_enc.pause_tx &&
    1a4a:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1a4e:	0792      	lsls	r2, r2, #30
    1a50:	f100 84bf 	bmi.w	23d2 <CONFIG_MAIN_STACK_SIZE+0x3d2>
	    !conn->llcp_phy.pause_tx &&
    1a54:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1a58:	07d7      	lsls	r7, r2, #31
    1a5a:	f100 84ba 	bmi.w	23d2 <CONFIG_MAIN_STACK_SIZE+0x3d2>
		if (conn->tx_head == conn->tx_data) {
    1a5e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1a62:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1a64:	bf04      	itt	eq
    1a66:	681a      	ldreq	r2, [r3, #0]
    1a68:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1a6c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1a70:	2a00      	cmp	r2, #0
    1a72:	f000 86b8 	beq.w	27e6 <CONFIG_MAIN_STACK_SIZE+0x7e6>
	tx->next = conn->tx_ctrl_last->next;
    1a76:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1a7a:	681a      	ldr	r2, [r3, #0]
    1a7c:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    1a7e:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    1a80:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1a84:	6833      	ldr	r3, [r6, #0]
    1a86:	2b00      	cmp	r3, #0
    1a88:	f000 8516 	beq.w	24b8 <CONFIG_MAIN_STACK_SIZE+0x4b8>
	conn->llcp_ack = conn->llcp_req;
    1a8c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1a90:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
    1a94:	f7ff ba6d 	b.w	f72 <ull_conn_llcp+0x22>
		conn_upd_curr = conn;
    1a98:	f8ca 4000 	str.w	r4, [sl]
    1a9c:	f7ff bafd 	b.w	109a <ull_conn_llcp+0x14a>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1aa0:	f002 0207 	and.w	r2, r2, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    1aa4:	f8b4 c19c 	ldrh.w	ip, [r4, #412]	; 0x19c
		lll->max_rx_time = conn->llcp_length.rx_time;
    1aa8:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
		tx_octets = conn->llcp_length.tx_octets;
    1aac:	f8b4 919e 	ldrh.w	r9, [r4, #414]	; 0x19e
		uint16_t tx_time = conn->llcp_length.tx_time;
    1ab0:	f8b4 81a2 	ldrh.w	r8, [r4, #418]	; 0x1a2
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    1ab4:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1ab8:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
    1aba:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1abe:	f000 84a8 	beq.w	2412 <CONFIG_MAIN_STACK_SIZE+0x412>
			conn->llcp_length.state =
    1ac2:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
    1ac6:	2206      	movs	r2, #6
    1ac8:	f362 0302 	bfi	r3, r2, #0, #3
    1acc:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		rx = conn->llcp_rx;
    1ad0:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    1ad4:	2f00      	cmp	r7, #0
    1ad6:	f000 8488 	beq.w	23ea <CONFIG_MAIN_STACK_SIZE+0x3ea>
    1ada:	6838      	ldr	r0, [r7, #0]
    1adc:	2800      	cmp	r0, #0
    1ade:	f000 8484 	beq.w	23ea <CONFIG_MAIN_STACK_SIZE+0x3ea>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1ae2:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    1ae4:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    1ae6:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
    1aea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1aee:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1af2:	2202      	movs	r2, #2
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1af4:	773b      	strb	r3, [r7, #28]
		pdu_ctrl_rx->len =
    1af6:	f04f 0a09 	mov.w	sl, #9
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1afa:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
    1afc:	f8a7 e006 	strh.w	lr, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1b00:	f8a7 c020 	strh.w	ip, [r7, #32]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1b04:	8479      	strh	r1, [r7, #34]	; 0x22
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1b06:	713a      	strb	r2, [r7, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1b08:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
    1b0a:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    1b0c:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1b10:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		pdu_ctrl_rx->len =
    1b14:	f887 a01d 	strb.w	sl, [r7, #29]
		ll_rx_put(rx->hdr.link, rx);
    1b18:	f011 fd72 	bl	13600 <ll_rx_put>
		ll_rx_sched();
    1b1c:	f011 fd7a 	bl	13614 <ll_rx_sched>
	break;
    1b20:	f7ff ba50 	b.w	fc4 <ull_conn_llcp+0x74>
    1b24:	200036dc 	.word	0x200036dc
    1b28:	d1b71759 	.word	0xd1b71759
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1b2c:	48be      	ldr	r0, [pc, #760]	; (1e28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaa0>)
    1b2e:	f00d fe91 	bl	f854 <mem_acquire>
		if (!tx) {
    1b32:	2800      	cmp	r0, #0
    1b34:	f43f aa46 	beq.w	fc4 <ull_conn_llcp+0x74>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1b38:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    1b3c:	f8b4 119e 	ldrh.w	r1, [r4, #414]	; 0x19e
		conn->default_tx_time = conn->llcp_length.tx_time;
    1b40:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    1b44:	f8a4 10d6 	strh.w	r1, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1b48:	2701      	movs	r7, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    1b4a:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1b4e:	f367 0202 	bfi	r2, r7, #0, #3
    1b52:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
		pdu_ctrl_tx->len =
    1b56:	2709      	movs	r7, #9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b58:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len =
    1b5a:	7147      	strb	r7, [r0, #5]
	if (!conn->common.fex_valid ||
    1b5c:	f894 70dc 	ldrb.w	r7, [r4, #220]	; 0xdc
	feature_coded_phy = (conn->llcp_feature.features_conn &
    1b60:	f8d4 e11c 	ldr.w	lr, [r4, #284]	; 0x11c
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    1b64:	8181      	strh	r1, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b66:	f042 0203 	orr.w	r2, r2, #3
    1b6a:	7102      	strb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1b6c:	221b      	movs	r2, #27
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    1b6e:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1b72:	2100      	movs	r1, #0
    1b74:	7202      	strb	r2, [r0, #8]
	if (!conn->common.fex_valid ||
    1b76:	07fa      	lsls	r2, r7, #31
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    1b78:	f880 c007 	strb.w	ip, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1b7c:	7241      	strb	r1, [r0, #9]
	if (!conn->common.fex_valid ||
    1b7e:	f140 83b7 	bpl.w	22f0 <CONFIG_MAIN_STACK_SIZE+0x2f0>
    1b82:	f41e 6f00 	tst.w	lr, #2048	; 0x800
    1b86:	f000 83b3 	beq.w	22f0 <CONFIG_MAIN_STACK_SIZE+0x2f0>
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
    1b8a:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
    1b8e:	bf28      	it	cs
    1b90:	f44f 6329 	movcs.w	r3, #2704	; 0xa90
    1b94:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    1b98:	bf38      	it	cc
    1b9a:	f44f 73a4 	movcc.w	r3, #328	; 0x148
    1b9e:	f44f 6129 	mov.w	r1, #2704	; 0xa90
	    conn->tx_head &&
    1ba2:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1ba6:	8141      	strh	r1, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1ba8:	81c3      	strh	r3, [r0, #14]
	if (
    1baa:	2a00      	cmp	r2, #0
    1bac:	f000 8332 	beq.w	2214 <CONFIG_MAIN_STACK_SIZE+0x214>
	    !conn->llcp_enc.pause_tx &&
    1bb0:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	    conn->tx_head &&
    1bb4:	079b      	lsls	r3, r3, #30
    1bb6:	f100 832d 	bmi.w	2214 <CONFIG_MAIN_STACK_SIZE+0x214>
	    !conn->llcp_phy.pause_tx &&
    1bba:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    1bbe:	07df      	lsls	r7, r3, #31
    1bc0:	f100 8328 	bmi.w	2214 <CONFIG_MAIN_STACK_SIZE+0x214>
		if (conn->tx_head == conn->tx_data) {
    1bc4:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    1bc8:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
    1bca:	bf04      	itt	eq
    1bcc:	6813      	ldreq	r3, [r2, #0]
    1bce:	f8c4 31bc 	streq.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1bd2:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	f000 85dc 	beq.w	2794 <CONFIG_MAIN_STACK_SIZE+0x794>
	tx->next = conn->tx_ctrl_last->next;
    1bdc:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1be0:	681a      	ldr	r2, [r3, #0]
    1be2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1be4:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1be6:	6802      	ldr	r2, [r0, #0]
    1be8:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1bec:	2a00      	cmp	r2, #0
    1bee:	f000 853f 	beq.w	2670 <CONFIG_MAIN_STACK_SIZE+0x670>
		conn->procedure_expire = conn->procedure_reload;
    1bf2:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1bf6:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
    1bfa:	f7ff b9e3 	b.w	fc4 <ull_conn_llcp+0x74>
		if (!conn->tx_ctrl) {
    1bfe:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1c02:	2a00      	cmp	r2, #0
    1c04:	f47f ad3d 	bne.w	1682 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2fa>
			tx->next = conn->tx_head;
    1c08:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    1c0a:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1c0e:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    1c12:	e53e      	b.n	1692 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30a>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1c14:	fb07 3311 	mls	r3, r7, r1, r3
    1c18:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1c1c:	4883      	ldr	r0, [pc, #524]	; (1e2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaa4>)
    1c1e:	b29b      	uxth	r3, r3
    1c20:	fb02 f303 	mul.w	r3, r2, r3
    1c24:	fba3 0100 	umull	r0, r1, r3, r0
    1c28:	a37d      	add	r3, pc, #500	; (adr r3, 1e20 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa98>)
    1c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c2e:	f7fe fa67 	bl	100 <__aeabi_uldivmod>
    1c32:	1a2d      	subs	r5, r5, r0
    1c34:	f7ff baba 	b.w	11ac <ull_conn_llcp+0x25c>
		LL_ASSERT(rx && rx->hdr.link);
    1c38:	4a7d      	ldr	r2, [pc, #500]	; (1e30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaa8>)
    1c3a:	497e      	ldr	r1, [pc, #504]	; (1e34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaac>)
    1c3c:	487e      	ldr	r0, [pc, #504]	; (1e38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xab0>)
    1c3e:	f640 03e7 	movw	r3, #2279	; 0x8e7
    1c42:	f01d fa07 	bl	1f054 <printk>
    1c46:	4040      	eors	r0, r0
    1c48:	f380 8811 	msr	BASEPRI, r0
    1c4c:	f04f 0003 	mov.w	r0, #3
    1c50:	df02      	svc	2
    1c52:	6838      	ldr	r0, [r7, #0]
    1c54:	f7ff ba5f 	b.w	1116 <ull_conn_llcp+0x1c6>
			lll->slave.window_widening_prepare_us -=
    1c58:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
    1c5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1c5c:	4e73      	ldr	r6, [pc, #460]	; (1e2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaa4>)
			lll->slave.window_widening_prepare_us -=
    1c5e:	fb03 231b 	mls	r3, r3, fp, r2
    1c62:	64e3      	str	r3, [r4, #76]	; 0x4c
				(((lll_clock_ppm_local_get() +
    1c64:	f017 fa20 	bl	190a8 <lll_clock_ppm_local_get>
    1c68:	4680      	mov	r8, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    1c6a:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    1c6e:	f3c0 0082 	ubfx	r0, r0, #2, #3
    1c72:	f017 fa1b 	bl	190ac <lll_clock_ppm_get>
				(((lll_clock_ppm_local_get() +
    1c76:	eb08 0300 	add.w	r3, r8, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    1c7a:	fb07 f303 	mul.w	r3, r7, r3
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1c7e:	486f      	ldr	r0, [pc, #444]	; (1e3c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xab4>)
			lll->slave.window_widening_prepare_us +=
    1c80:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				conn->llcp_cu.win_size * 1250U;
    1c82:	f894 1114 	ldrb.w	r1, [r4, #276]	; 0x114
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1c86:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    1c8a:	f203 233f 	addw	r3, r3, #575	; 0x23f
    1c8e:	fba0 0303 	umull	r0, r3, r0, r3
    1c92:	ea4f 4b93 	mov.w	fp, r3, lsr #18
				lll->slave.window_widening_periodic_us *
    1c96:	fb0b f00a 	mul.w	r0, fp, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1c9a:	087b      	lsrs	r3, r7, #1
			lll->slave.window_widening_prepare_us +=
    1c9c:	4402      	add	r2, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1c9e:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    1ca0:	429a      	cmp	r2, r3
    1ca2:	bf28      	it	cs
    1ca4:	461a      	movcs	r2, r3
				conn->llcp_cu.win_size * 1250U;
    1ca6:	fb09 fc01 	mul.w	ip, r9, r1
			conn->slave.ticks_to_offset = 0U;
    1caa:	f04f 0e00 	mov.w	lr, #0
			lll->slave.window_widening_max_us =
    1cae:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1cb2:	fba0 0106 	umull	r0, r1, r0, r6
    1cb6:	a35a      	add	r3, pc, #360	; (adr r3, 1e20 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa98>)
    1cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
			lll->slave.window_size_prepare_us =
    1cbc:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
			conn->slave.ticks_to_offset = 0U;
    1cc0:	f8c4 e0e4 	str.w	lr, [r4, #228]	; 0xe4
			lll->slave.window_widening_periodic_us =
    1cc4:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1cc8:	f7fe fa1a 	bl	100 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1ccc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1cd0:	4684      	mov	ip, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1cd2:	485b      	ldr	r0, [pc, #364]	; (1e40 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xab8>)
    1cd4:	fba0 3003 	umull	r3, r0, r0, r3
    1cd8:	0a80      	lsrs	r0, r0, #10
    1cda:	fb09 f000 	mul.w	r0, r9, r0
    1cde:	fba0 0106 	umull	r0, r1, r0, r6
    1ce2:	a34f      	add	r3, pc, #316	; (adr r3, 1e20 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa98>)
    1ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1ce8:	eba5 050c 	sub.w	r5, r5, ip
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1cec:	f7fe fa08 	bl	100 <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    1cf0:	eba7 060b 	sub.w	r6, r7, fp
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1cf4:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    1cf8:	f7ff ba79 	b.w	11ee <ull_conn_llcp+0x29e>
		} else if (conn->llcp_conn_param.ack !=
    1cfc:	f894 c171 	ldrb.w	ip, [r4, #369]	; 0x171
    1d00:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
    1d04:	4594      	cmp	ip, r2
    1d06:	f000 818d 	beq.w	2024 <CONFIG_MAIN_STACK_SIZE+0x24>
	conn_upd = conn_upd_curr;
    1d0a:	f8df a138 	ldr.w	sl, [pc, #312]	; 1e44 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xabc>
    1d0e:	f8da 2000 	ldr.w	r2, [sl]
	if (conn_upd && (conn_upd != conn)) {
    1d12:	2a00      	cmp	r2, #0
    1d14:	f000 84db 	beq.w	26ce <CONFIG_MAIN_STACK_SIZE+0x6ce>
    1d18:	4294      	cmp	r4, r2
    1d1a:	f47f a92a 	bne.w	f72 <ull_conn_llcp+0x22>
	switch (conn->llcp_conn_param.state) {
    1d1e:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    1d22:	f002 0207 	and.w	r2, r2, #7
    1d26:	2a05      	cmp	r2, #5
    1d28:	f200 86b1 	bhi.w	2a8e <CONFIG_MAIN_STACK_SIZE+0xa8e>
    1d2c:	f20f 0c04 	addw	ip, pc, #4
    1d30:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
    1d34:	00001e49 	.word	0x00001e49
    1d38:	00001d9d 	.word	0x00001d9d
    1d3c:	00001d4d 	.word	0x00001d4d
    1d40:	00000f69 	.word	0x00000f69
    1d44:	00000f69 	.word	0x00000f69
    1d48:	00000f69 	.word	0x00000f69
	if (conn->llcp_enc.pause_tx) {
    1d4c:	079b      	lsls	r3, r3, #30
    1d4e:	f53f a910 	bmi.w	f72 <ull_conn_llcp+0x22>
	rx = ll_pdu_rx_alloc();
    1d52:	f011 fc83 	bl	1365c <ll_pdu_rx_alloc>
	if (!rx) {
    1d56:	4601      	mov	r1, r0
    1d58:	2800      	cmp	r0, #0
    1d5a:	f43f acef 	beq.w	173c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b4>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1d5e:	7f03      	ldrb	r3, [r0, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    1d60:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    1d64:	2003      	movs	r0, #3
    1d66:	f360 0202 	bfi	r2, r0, #0, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1d6a:	4303      	orrs	r3, r0
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    1d6c:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
	rx->hdr.handle = conn->lll.handle;
    1d70:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1d72:	770b      	strb	r3, [r1, #28]
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1d74:	2702      	movs	r7, #2
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1d76:	2318      	movs	r3, #24
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1d78:	710f      	strb	r7, [r1, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1d7a:	774b      	strb	r3, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1d7c:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1d80:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
	rx->hdr.handle = conn->lll.handle;
    1d84:	80c8      	strh	r0, [r1, #6]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1d86:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1d8a:	840a      	strh	r2, [r1, #32]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1d8c:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1d90:	844b      	strh	r3, [r1, #34]	; 0x22
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1d92:	230f      	movs	r3, #15
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1d94:	8488      	strh	r0, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1d96:	84ca      	strh	r2, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1d98:	77cb      	strb	r3, [r1, #31]
	ll_rx_put(rx->hdr.link, rx);
    1d9a:	e4ca      	b.n	1732 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3aa>
	if (conn->llcp_conn_param.status) {
    1d9c:	f894 7173 	ldrb.w	r7, [r4, #371]	; 0x173
    1da0:	2f00      	cmp	r7, #0
    1da2:	f040 853e 	bne.w	2822 <CONFIG_MAIN_STACK_SIZE+0x822>
	if (!conn->lll.role) {
    1da6:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1daa:	2b00      	cmp	r3, #0
    1dac:	f2c0 857e 	blt.w	28ac <CONFIG_MAIN_STACK_SIZE+0x8ac>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1db0:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		if (conn->llcp_conn_param.preferred_periodicity) {
    1db4:	f894 017c 	ldrb.w	r0, [r4, #380]	; 0x17c
		conn->llcp_cu.win_offset_us = 0U;
    1db8:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1dbc:	2205      	movs	r2, #5
    1dbe:	f362 0302 	bfi	r3, r2, #0, #3
		conn->llcp_cu.win_size = 1U;
    1dc2:	2201      	movs	r2, #1
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1dc4:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
		conn->llcp_cu.win_size = 1U;
    1dc8:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
		if (conn->llcp_conn_param.preferred_periodicity) {
    1dcc:	2800      	cmp	r0, #0
    1dce:	f000 860e 	beq.w	29ee <CONFIG_MAIN_STACK_SIZE+0x9ee>
				((conn->llcp_conn_param.interval_min /
    1dd2:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
    1dd6:	fbb3 f3f0 	udiv	r3, r3, r0
				  conn->llcp_conn_param.preferred_periodicity) +
    1dda:	4413      	add	r3, r2
			conn->llcp_cu.interval =
    1ddc:	fb13 f300 	smulbb	r3, r3, r0
    1de0:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    1de2:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1de6:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
    1dea:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    1dee:	f3c2 03c0 	ubfx	r3, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1df2:	009b      	lsls	r3, r3, #2
    1df4:	f020 0207 	bic.w	r2, r0, #7
    1df8:	f043 0302 	orr.w	r3, r3, #2
    1dfc:	4313      	orrs	r3, r2
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    1dfe:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    1e02:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1e06:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.ack--;
    1e0a:	3901      	subs	r1, #1
    1e0c:	f884 1105 	strb.w	r1, [r4, #261]	; 0x105
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    1e10:	f8a4 010a 	strh.w	r0, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    1e14:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
		return;
    1e18:	f7ff b8ab 	b.w	f72 <ull_conn_llcp+0x22>
    1e1c:	f3af 8000 	nop.w
    1e20:	1afd498d 	.word	0x1afd498d
    1e24:	00000007 	.word	0x00000007
    1e28:	200036dc 	.word	0x200036dc
    1e2c:	3b9aca00 	.word	0x3b9aca00
    1e30:	00025ad4 	.word	0x00025ad4
    1e34:	00025c00 	.word	0x00025c00
    1e38:	0002561c 	.word	0x0002561c
    1e3c:	431bde83 	.word	0x431bde83
    1e40:	d1b71759 	.word	0xd1b71759
    1e44:	20003658 	.word	0x20003658
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1e48:	48df      	ldr	r0, [pc, #892]	; (21c8 <CONFIG_MAIN_STACK_SIZE+0x1c8>)
			event_counter = lll->event_counter +
    1e4a:	8ee7      	ldrh	r7, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
    1e4c:	f8b4 8032 	ldrh.w	r8, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1e50:	f00d fd00 	bl	f854 <mem_acquire>
	if (!tx) {
    1e54:	4601      	mov	r1, r0
    1e56:	2800      	cmp	r0, #0
    1e58:	f43f ac70 	beq.w	173c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b4>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    1e5c:	f894 0172 	ldrb.w	r0, [r4, #370]	; 0x172
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1e60:	790a      	ldrb	r2, [r1, #4]
			event_counter = lll->event_counter +
    1e62:	eb07 0308 	add.w	r3, r7, r8
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    1e66:	2704      	movs	r7, #4
    1e68:	f367 0002 	bfi	r0, r7, #0, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1e6c:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1e70:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    1e72:	f884 0172 	strb.w	r0, [r4, #370]	; 0x172
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1e76:	710a      	strb	r2, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1e78:	714f      	strb	r7, [r1, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1e7a:	f8b4 7174 	ldrh.w	r7, [r4, #372]	; 0x174
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1e7e:	f8b4 0176 	ldrh.w	r0, [r4, #374]	; 0x176
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1e82:	f8b4 2178 	ldrh.w	r2, [r4, #376]	; 0x178
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1e86:	810f      	strh	r7, [r1, #8]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    1e88:	4433      	add	r3, r6
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1e8a:	f8b4 717a 	ldrh.w	r7, [r4, #378]	; 0x17a
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1e8e:	8148      	strh	r0, [r1, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1e90:	818a      	strh	r2, [r1, #12]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1e92:	200f      	movs	r0, #15
	p->preferred_periodicity = 0U;
    1e94:	2200      	movs	r2, #0
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    1e96:	f8a1 3011 	strh.w	r3, [r1, #17]
	p->offset1 = sys_cpu_to_le16(0xffff);
    1e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1e9e:	81cf      	strh	r7, [r1, #14]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1ea0:	71c8      	strb	r0, [r1, #7]
	p->offset1 = sys_cpu_to_le16(0xffff);
    1ea2:	754b      	strb	r3, [r1, #21]
    1ea4:	758b      	strb	r3, [r1, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    1ea6:	75cb      	strb	r3, [r1, #23]
    1ea8:	760b      	strb	r3, [r1, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    1eaa:	764b      	strb	r3, [r1, #25]
    1eac:	768b      	strb	r3, [r1, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    1eae:	76cb      	strb	r3, [r1, #27]
    1eb0:	770b      	strb	r3, [r1, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    1eb2:	774b      	strb	r3, [r1, #29]
    1eb4:	778b      	strb	r3, [r1, #30]
	ctrl_tx_pause_enqueue(conn, tx, false);
    1eb6:	4620      	mov	r0, r4
	p->preferred_periodicity = 0U;
    1eb8:	740a      	strb	r2, [r1, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    1eba:	74ca      	strb	r2, [r1, #19]
    1ebc:	750a      	strb	r2, [r1, #20]
	ctrl_tx_pause_enqueue(conn, tx, false);
    1ebe:	f012 fae1 	bl	14484 <ctrl_tx_pause_enqueue>
	conn->procedure_expire = conn->procedure_reload;
    1ec2:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1ec6:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    1eca:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
	conn_upd_curr = conn;
    1ece:	f8ca 4000 	str.w	r4, [sl]
	conn->procedure_expire = conn->procedure_reload;
    1ed2:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1ed6:	f7ff b847 	b.w	f68 <ull_conn_llcp+0x18>
		if ((conn->llcp_cu.interval != lll->interval) ||
    1eda:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    1edc:	428a      	cmp	r2, r1
    1ede:	f47f a927 	bne.w	1130 <ull_conn_llcp+0x1e0>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1ee2:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1ee6:	fb02 fa03 	mul.w	sl, r2, r3
    1eea:	f242 7210 	movw	r2, #10000	; 0x2710
		    (conn->llcp_cu.latency != lll->latency) ||
    1eee:	f8b4 e0c6 	ldrh.w	lr, [r4, #198]	; 0xc6
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1ef2:	fb02 a20c 	mla	r2, r2, ip, sl
    1ef6:	3a01      	subs	r2, #1
    1ef8:	fbb2 f2fa 	udiv	r2, r2, sl
		    (conn->llcp_cu.latency != lll->latency) ||
    1efc:	b292      	uxth	r2, r2
    1efe:	4596      	cmp	lr, r2
    1f00:	f47f a916 	bne.w	1130 <ull_conn_llcp+0x1e0>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    1f04:	2303      	movs	r3, #3
    1f06:	713b      	strb	r3, [r7, #4]
    1f08:	f7ff b91e 	b.w	1148 <ull_conn_llcp+0x1f8>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    1f0c:	2201      	movs	r2, #1
    1f0e:	4610      	mov	r0, r2
    1f10:	2102      	movs	r1, #2
    1f12:	f00d fd43 	bl	f99c <mayfly_enable>
				return -ECANCELED;
    1f16:	f06f 0047 	mvn.w	r0, #71	; 0x47
    1f1a:	f7ff b831 	b.w	f80 <ull_conn_llcp+0x30>
    1f1e:	f44f 79a4 	mov.w	r9, #328	; 0x148
    1f22:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    1f26:	f7ff ba37 	b.w	1398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10>
		if (!conn->tx_ctrl) {
    1f2a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    1f2e:	2b00      	cmp	r3, #0
    1f30:	f47f ad07 	bne.w	1942 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5ba>
			tx->next = conn->tx_head;
    1f34:	6028      	str	r0, [r5, #0]
				conn->tx_ctrl = tx;
    1f36:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1f3a:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1f3e:	2800      	cmp	r0, #0
    1f40:	f47f a817 	bne.w	f72 <ull_conn_llcp+0x22>
    1f44:	e49a      	b.n	187c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1f46:	48a0      	ldr	r0, [pc, #640]	; (21c8 <CONFIG_MAIN_STACK_SIZE+0x1c8>)
    1f48:	f00d fc84 	bl	f854 <mem_acquire>
	if (tx) {
    1f4c:	4680      	mov	r8, r0
    1f4e:	2800      	cmp	r0, #0
    1f50:	f43f abf4 	beq.w	173c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b4>
		conn->llcp_feature.ack--;
    1f54:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		conn->llcp_feature.features_conn = LL_FEAT;
    1f58:	4a9c      	ldr	r2, [pc, #624]	; (21cc <CONFIG_MAIN_STACK_SIZE+0x1cc>)
    1f5a:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
		conn->llcp_feature.ack--;
    1f5e:	3b01      	subs	r3, #1
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    1f60:	2209      	movs	r2, #9
		conn->llcp_feature.ack--;
    1f62:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    1f66:	7142      	strb	r2, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    1f68:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f6c:	7903      	ldrb	r3, [r0, #4]
		pdu->llctrl.opcode = !conn->lll.role ?
    1f6e:	2a00      	cmp	r2, #0
    1f70:	bfac      	ite	ge
    1f72:	2208      	movge	r2, #8
    1f74:	220e      	movlt	r2, #14
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f76:	f043 0303 	orr.w	r3, r3, #3
		pdu->llctrl.opcode = !conn->lll.role ?
    1f7a:	71c2      	strb	r2, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    1f7c:	2208      	movs	r2, #8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f7e:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    1f80:	4639      	mov	r1, r7
    1f82:	4410      	add	r0, r2
    1f84:	f01f fbba 	bl	216fc <memset>
		sys_put_le24(conn->llcp_feature.features_conn,
    1f88:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	dst[0] = val;
    1f8c:	f888 3008 	strb.w	r3, [r8, #8]
	dst[1] = val >> 8;
    1f90:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    1f94:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    1f96:	f888 2009 	strb.w	r2, [r8, #9]
	dst[2] = val >> 16;
    1f9a:	f888 300a 	strb.w	r3, [r8, #10]
	    conn->tx_head &&
    1f9e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	f000 81b4 	beq.w	2310 <CONFIG_MAIN_STACK_SIZE+0x310>
	    !conn->llcp_enc.pause_tx &&
    1fa8:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1fac:	0797      	lsls	r7, r2, #30
    1fae:	f100 81af 	bmi.w	2310 <CONFIG_MAIN_STACK_SIZE+0x310>
	    !conn->llcp_phy.pause_tx &&
    1fb2:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1fb6:	07d0      	lsls	r0, r2, #31
    1fb8:	f100 81aa 	bmi.w	2310 <CONFIG_MAIN_STACK_SIZE+0x310>
		if (conn->tx_head == conn->tx_data) {
    1fbc:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1fc0:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1fc2:	bf04      	itt	eq
    1fc4:	681a      	ldreq	r2, [r3, #0]
    1fc6:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1fca:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1fce:	2a00      	cmp	r2, #0
    1fd0:	f000 8414 	beq.w	27fc <CONFIG_MAIN_STACK_SIZE+0x7fc>
	tx->next = conn->tx_ctrl_last->next;
    1fd4:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1fd8:	681a      	ldr	r2, [r3, #0]
    1fda:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    1fde:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
    1fe2:	f8d8 3000 	ldr.w	r3, [r8]
    1fe6:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1fea:	2b00      	cmp	r3, #0
    1fec:	f000 838a 	beq.w	2704 <CONFIG_MAIN_STACK_SIZE+0x704>
		conn->procedure_expire = conn->procedure_reload;
    1ff0:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1ff4:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1ff8:	f7ff bba0 	b.w	173c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b4>
		conn->tx_data_last = tx;
    1ffc:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    2000:	f7ff bb4a 	b.w	1698 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x310>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    2004:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    2008:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    200c:	f3c5 0182 	ubfx	r1, r5, #2, #3
    2010:	f361 0202 	bfi	r2, r1, #0, #3
    2014:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    2018:	464a      	mov	r2, r9
    201a:	f012 f9cb 	bl	143b4 <calc_eff_time>
    201e:	4606      	mov	r6, r0
    2020:	f7ff b9c0 	b.w	13a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    2024:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
    2028:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    202c:	428b      	cmp	r3, r1
    202e:	f000 81fb 	beq.w	2428 <CONFIG_MAIN_STACK_SIZE+0x428>
	switch (conn->llcp_length.state) {
    2032:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
    2036:	f003 0207 	and.w	r2, r3, #7
    203a:	2a06      	cmp	r2, #6
    203c:	f200 852a 	bhi.w	2a94 <CONFIG_MAIN_STACK_SIZE+0xa94>
    2040:	f20f 0c04 	addw	ip, pc, #4
    2044:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
    2048:	000020ef 	.word	0x000020ef
    204c:	00000f69 	.word	0x00000f69
    2050:	00000f69 	.word	0x00000f69
    2054:	00000f69 	.word	0x00000f69
    2058:	00002065 	.word	0x00002065
    205c:	00002065 	.word	0x00002065
    2060:	00000f69 	.word	0x00000f69
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    2064:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
    2068:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    206c:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_time = conn->llcp_length.rx_time;
    2070:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
		tx_octets = conn->llcp_length.tx_octets;
    2074:	f8b4 919e 	ldrh.w	r9, [r4, #414]	; 0x19e
		uint16_t tx_time = conn->llcp_length.tx_time;
    2078:	f8b4 81a2 	ldrh.w	r8, [r4, #418]	; 0x1a2
		lll->max_rx_time = conn->llcp_length.rx_time;
    207c:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    2080:	2a04      	cmp	r2, #4
    2082:	f000 83a6 	beq.w	27d2 <CONFIG_MAIN_STACK_SIZE+0x7d2>
			conn->llcp_length.state =
    2086:	2206      	movs	r2, #6
    2088:	f362 0302 	bfi	r3, r2, #0, #3
    208c:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		rx = conn->llcp_rx;
    2090:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    2094:	2f00      	cmp	r7, #0
    2096:	f000 838d 	beq.w	27b4 <CONFIG_MAIN_STACK_SIZE+0x7b4>
    209a:	6838      	ldr	r0, [r7, #0]
    209c:	2800      	cmp	r0, #0
    209e:	f000 8389 	beq.w	27b4 <CONFIG_MAIN_STACK_SIZE+0x7b4>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    20a2:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    20a4:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    20a6:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
    20aa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    20ae:	f043 0303 	orr.w	r3, r3, #3
    20b2:	773b      	strb	r3, [r7, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    20b4:	2202      	movs	r2, #2
		pdu_ctrl_rx->len =
    20b6:	2309      	movs	r3, #9
    20b8:	777b      	strb	r3, [r7, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    20ba:	713a      	strb	r2, [r7, #4]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    20bc:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    20c0:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    20c4:	847a      	strh	r2, [r7, #34]	; 0x22
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    20c6:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
    20c8:	f8a7 c006 	strh.w	ip, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    20cc:	8439      	strh	r1, [r7, #32]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    20ce:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
    20d0:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    20d2:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    20d6:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    20da:	f011 fa91 	bl	13600 <ll_rx_put>
		ll_rx_sched();
    20de:	f011 fa99 	bl	13614 <ll_rx_sched>
	break;
    20e2:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    20e6:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
    20ea:	f7fe bf3d 	b.w	f68 <ull_conn_llcp+0x18>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    20ee:	4836      	ldr	r0, [pc, #216]	; (21c8 <CONFIG_MAIN_STACK_SIZE+0x1c8>)
    20f0:	f00d fbb0 	bl	f854 <mem_acquire>
		if (!tx) {
    20f4:	4601      	mov	r1, r0
    20f6:	2800      	cmp	r0, #0
    20f8:	f43f ab20 	beq.w	173c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b4>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    20fc:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    2100:	f8b4 019e 	ldrh.w	r0, [r4, #414]	; 0x19e
		conn->default_tx_time = conn->llcp_length.tx_time;
    2104:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    2108:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    210c:	2701      	movs	r7, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    210e:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    2112:	f367 0202 	bfi	r2, r7, #0, #3
		pdu_ctrl_tx->len =
    2116:	2709      	movs	r7, #9
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    2118:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    211c:	790a      	ldrb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    211e:	714f      	strb	r7, [r1, #5]
	if (!conn->common.fex_valid ||
    2120:	f894 70dc 	ldrb.w	r7, [r4, #220]	; 0xdc
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    2124:	8188      	strh	r0, [r1, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2126:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    212a:	2014      	movs	r0, #20
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    212c:	f04f 0c00 	mov.w	ip, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2130:	710a      	strb	r2, [r1, #4]
	if (!conn->common.fex_valid ||
    2132:	07ff      	lsls	r7, r7, #31
	feature_coded_phy = (conn->llcp_feature.features_conn &
    2134:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    2138:	71c8      	strb	r0, [r1, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    213a:	f04f 001b 	mov.w	r0, #27
    213e:	f881 c009 	strb.w	ip, [r1, #9]
    2142:	7208      	strb	r0, [r1, #8]
	if (!conn->common.fex_valid ||
    2144:	f140 8356 	bpl.w	27f4 <CONFIG_MAIN_STACK_SIZE+0x7f4>
    2148:	0510      	lsls	r0, r2, #20
    214a:	f140 83a8 	bpl.w	289e <CONFIG_MAIN_STACK_SIZE+0x89e>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    214e:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
    2152:	bf28      	it	cs
    2154:	f44f 6329 	movcs.w	r3, #2704	; 0xa90
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
    2158:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    215c:	bf38      	it	cc
    215e:	f44f 73a4 	movcc.w	r3, #328	; 0x148
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    2162:	f44f 6229 	mov.w	r2, #2704	; 0xa90
	    conn->tx_head &&
    2166:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    216a:	81cb      	strh	r3, [r1, #14]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    216c:	f5b2 7fa4 	cmp.w	r2, #328	; 0x148
    2170:	bf38      	it	cc
    2172:	f44f 72a4 	movcc.w	r2, #328	; 0x148
    2176:	814a      	strh	r2, [r1, #10]
	if (
    2178:	2800      	cmp	r0, #0
    217a:	f000 8300 	beq.w	277e <CONFIG_MAIN_STACK_SIZE+0x77e>
	    !conn->llcp_enc.pause_tx &&
    217e:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	    conn->tx_head &&
    2182:	079b      	lsls	r3, r3, #30
    2184:	f100 82fb 	bmi.w	277e <CONFIG_MAIN_STACK_SIZE+0x77e>
	    !conn->llcp_phy.pause_tx &&
    2188:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    218c:	07df      	lsls	r7, r3, #31
    218e:	f100 82f6 	bmi.w	277e <CONFIG_MAIN_STACK_SIZE+0x77e>
		if (conn->tx_head == conn->tx_data) {
    2192:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    2196:	4298      	cmp	r0, r3
			conn->tx_data = conn->tx_data->next;
    2198:	bf04      	itt	eq
    219a:	6803      	ldreq	r3, [r0, #0]
    219c:	f8c4 31bc 	streq.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    21a0:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    21a4:	2b00      	cmp	r3, #0
    21a6:	f000 8455 	beq.w	2a54 <CONFIG_MAIN_STACK_SIZE+0xa54>
	tx->next = conn->tx_ctrl_last->next;
    21aa:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    21ae:	681a      	ldr	r2, [r3, #0]
    21b0:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
    21b2:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last = tx;
    21b4:	f8c4 11b8 	str.w	r1, [r4, #440]	; 0x1b8
	if (!tx->next) {
    21b8:	680b      	ldr	r3, [r1, #0]
    21ba:	2b00      	cmp	r3, #0
    21bc:	f47f af18 	bne.w	1ff0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc68>
		conn->tx_data_last = tx;
    21c0:	f8c4 11c0 	str.w	r1, [r4, #448]	; 0x1c0
		conn->procedure_expire = conn->procedure_reload;
    21c4:	e714      	b.n	1ff0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc68>
    21c6:	bf00      	nop
    21c8:	200036dc 	.word	0x200036dc
    21cc:	0001497f 	.word	0x0001497f
		LL_ASSERT(rx && rx->hdr.link);
    21d0:	4ad9      	ldr	r2, [pc, #868]	; (2538 <CONFIG_MAIN_STACK_SIZE+0x538>)
    21d2:	49da      	ldr	r1, [pc, #872]	; (253c <CONFIG_MAIN_STACK_SIZE+0x53c>)
    21d4:	48da      	ldr	r0, [pc, #872]	; (2540 <CONFIG_MAIN_STACK_SIZE+0x540>)
    21d6:	f640 635f 	movw	r3, #3679	; 0xe5f
    21da:	f01c ff3b 	bl	1f054 <printk>
    21de:	4040      	eors	r0, r0
    21e0:	f380 8811 	msr	BASEPRI, r0
    21e4:	f04f 0003 	mov.w	r0, #3
    21e8:	df02      	svc	2
    21ea:	6828      	ldr	r0, [r5, #0]
    21ec:	f894 b0ec 	ldrb.w	fp, [r4, #236]	; 0xec
    21f0:	f7ff b8f1 	b.w	13d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e>
		LL_ASSERT(rx && rx->hdr.link);
    21f4:	4ad0      	ldr	r2, [pc, #832]	; (2538 <CONFIG_MAIN_STACK_SIZE+0x538>)
    21f6:	49d1      	ldr	r1, [pc, #836]	; (253c <CONFIG_MAIN_STACK_SIZE+0x53c>)
    21f8:	48d1      	ldr	r0, [pc, #836]	; (2540 <CONFIG_MAIN_STACK_SIZE+0x540>)
    21fa:	f640 638b 	movw	r3, #3723	; 0xe8b
    21fe:	f01c ff29 	bl	1f054 <printk>
    2202:	4040      	eors	r0, r0
    2204:	f380 8811 	msr	BASEPRI, r0
    2208:	f04f 0003 	mov.w	r0, #3
    220c:	df02      	svc	2
    220e:	6828      	ldr	r0, [r5, #0]
    2210:	f7ff b90c 	b.w	142c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa4>
		if (!conn->tx_ctrl) {
    2214:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2218:	2b00      	cmp	r3, #0
    221a:	f47f acdf 	bne.w	1bdc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x854>
			tx->next = conn->tx_head;
    221e:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    2220:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2224:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    2228:	e4e0      	b.n	1bec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x864>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    222a:	f104 077f 	add.w	r7, r4, #127	; 0x7f
    222e:	463b      	mov	r3, r7
    2230:	462a      	mov	r2, r5
    2232:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    2236:	f204 105d 	addw	r0, r4, #349	; 0x15d
    223a:	f018 f9a3 	bl	1a584 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    223e:	4639      	mov	r1, r7
    2240:	2210      	movs	r2, #16
    2242:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    2246:	f01f fa2e 	bl	216a6 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    224a:	2208      	movs	r2, #8
    224c:	f104 0198 	add.w	r1, r4, #152	; 0x98
    2250:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    2254:	f01f fa27 	bl	216a6 <memcpy>
		lll->ccm_rx.direction = 0;
    2258:	f894 0097 	ldrb.w	r0, [r4, #151]	; 0x97
		lll->ccm_tx.direction = 1;
    225c:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
		lll->enc_rx = 1;
    2260:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    2264:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
		lll->enc_rx = 1;
    2268:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.direction = 0;
    226c:	f365 0000 	bfi	r0, r5, #0, #1
		lll->ccm_tx.direction = 1;
    2270:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.direction = 0;
    2274:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97
		lll->enc_rx = 1;
    2278:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    227c:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    2280:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    2284:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    2288:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    228c:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    2290:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    2294:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
		lll->ccm_tx.counter = 0;
    2298:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    229c:	4641      	mov	r1, r8
		lll->ccm_tx.counter = 0;
    229e:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		lll->ccm_tx.direction = 1;
    22a2:	f884 20b8 	strb.w	r2, [r4, #184]	; 0xb8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    22a6:	4620      	mov	r0, r4
    22a8:	f012 faba 	bl	14820 <start_enc_rsp_send>
	    conn->tx_head &&
    22ac:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    22b0:	2b00      	cmp	r3, #0
    22b2:	d039      	beq.n	2328 <CONFIG_MAIN_STACK_SIZE+0x328>
	    !conn->llcp_enc.pause_tx &&
    22b4:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    22b8:	0792      	lsls	r2, r2, #30
    22ba:	d435      	bmi.n	2328 <CONFIG_MAIN_STACK_SIZE+0x328>
	    !conn->llcp_phy.pause_tx &&
    22bc:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    22c0:	07d7      	lsls	r7, r2, #31
    22c2:	d431      	bmi.n	2328 <CONFIG_MAIN_STACK_SIZE+0x328>
		if (conn->tx_head == conn->tx_data) {
    22c4:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    22c8:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    22ca:	bf04      	itt	eq
    22cc:	681a      	ldreq	r2, [r3, #0]
    22ce:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    22d2:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    22d6:	2a00      	cmp	r2, #0
    22d8:	f000 829b 	beq.w	2812 <CONFIG_MAIN_STACK_SIZE+0x812>
	tx->next = conn->tx_ctrl_last->next;
    22dc:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    22e0:	681a      	ldr	r2, [r3, #0]
    22e2:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    22e4:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    22e6:	6833      	ldr	r3, [r6, #0]
    22e8:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
}
    22ec:	f7ff bbcb 	b.w	1a86 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fe>
    22f0:	f44f 73a4 	mov.w	r3, #328	; 0x148
    22f4:	4619      	mov	r1, r3
    22f6:	e454      	b.n	1ba2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x81a>
		if (!conn->tx_ctrl) {
    22f8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    22fc:	2a00      	cmp	r2, #0
    22fe:	f47f a930 	bne.w	1562 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1da>
			tx->next = conn->tx_head;
    2302:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    2304:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2308:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    230c:	f7ff b931 	b.w	1572 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ea>
		if (!conn->tx_ctrl) {
    2310:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2314:	2a00      	cmp	r2, #0
    2316:	f47f ae5d 	bne.w	1fd4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc4c>
			tx->next = conn->tx_head;
    231a:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    231e:	e9c4 886c 	strd	r8, r8, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2322:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
    2326:	e660      	b.n	1fea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc62>
		if (!conn->tx_ctrl) {
    2328:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    232c:	2a00      	cmp	r2, #0
    232e:	d1d5      	bne.n	22dc <CONFIG_MAIN_STACK_SIZE+0x2dc>
			tx->next = conn->tx_head;
    2330:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2332:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2336:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    233a:	f7ff bba4 	b.w	1a86 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fe>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    233e:	f104 077f 	add.w	r7, r4, #127	; 0x7f
    2342:	463b      	mov	r3, r7
    2344:	462a      	mov	r2, r5
    2346:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    234a:	f204 105d 	addw	r0, r4, #349	; 0x15d
    234e:	f018 f919 	bl	1a584 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    2352:	4639      	mov	r1, r7
    2354:	2210      	movs	r2, #16
    2356:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    235a:	f01f f9a4 	bl	216a6 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    235e:	2208      	movs	r2, #8
    2360:	f104 0198 	add.w	r1, r4, #152	; 0x98
    2364:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    2368:	f01f f99d 	bl	216a6 <memcpy>
			lll->ccm_rx.direction = 1U;
    236c:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    2370:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    2374:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    2378:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
			lll->ccm_rx.direction = 1U;
    237c:	f042 0201 	orr.w	r2, r2, #1
			lll->ccm_tx.direction = 0U;
    2380:	f365 0100 	bfi	r1, r5, #0, #1
			lll->enc_rx = 1U;
    2384:	f043 0308 	orr.w	r3, r3, #8
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2388:	2001      	movs	r0, #1
			lll->ccm_rx.direction = 1U;
    238a:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    238e:	f884 10b8 	strb.w	r1, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    2392:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    2396:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    239a:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    239e:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    23a2:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    23a6:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    23aa:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    23ae:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
			lll->ccm_tx.counter = 0U;
    23b2:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
    23b6:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    23ba:	7932      	ldrb	r2, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    23bc:	7170      	strb	r0, [r6, #5]
	    conn->tx_head &&
    23be:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    23c2:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
    23c6:	2105      	movs	r1, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    23c8:	7132      	strb	r2, [r6, #4]
			pdu_ctrl_tx->llctrl.opcode =
    23ca:	71f1      	strb	r1, [r6, #7]
	if (
    23cc:	2b00      	cmp	r3, #0
    23ce:	f47f ab3c 	bne.w	1a4a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c2>
		if (!conn->tx_ctrl) {
    23d2:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    23d6:	2a00      	cmp	r2, #0
    23d8:	f47f ab4d 	bne.w	1a76 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6ee>
			tx->next = conn->tx_head;
    23dc:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    23de:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    23e2:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    23e6:	f7ff bb4d 	b.w	1a84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fc>
		LL_ASSERT(rx && rx->hdr.link);
    23ea:	4a53      	ldr	r2, [pc, #332]	; (2538 <CONFIG_MAIN_STACK_SIZE+0x538>)
    23ec:	4953      	ldr	r1, [pc, #332]	; (253c <CONFIG_MAIN_STACK_SIZE+0x53c>)
    23ee:	4854      	ldr	r0, [pc, #336]	; (2540 <CONFIG_MAIN_STACK_SIZE+0x540>)
    23f0:	f44f 6353 	mov.w	r3, #3376	; 0xd30
    23f4:	f01c fe2e 	bl	1f054 <printk>
    23f8:	4040      	eors	r0, r0
    23fa:	f380 8811 	msr	BASEPRI, r0
    23fe:	f04f 0003 	mov.w	r0, #3
    2402:	df02      	svc	2
    2404:	6838      	ldr	r0, [r7, #0]
    2406:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
    240a:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
    240e:	f7ff bb68 	b.w	1ae2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x75a>
			if (!conn->llcp_length.cache.tx_octets) {
    2412:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    2416:	2a00      	cmp	r2, #0
    2418:	f040 8177 	bne.w	270a <CONFIG_MAIN_STACK_SIZE+0x70a>
				conn->llcp_length.ack = conn->llcp_length.req;
    241c:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    2420:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
    2424:	f7ff bb54 	b.w	1ad0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x748>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    2428:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    242c:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
    2430:	429a      	cmp	r2, r3
    2432:	f43e ad9e 	beq.w	f72 <ull_conn_llcp+0x22>
	switch (conn->llcp_phy.state) {
    2436:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    243a:	f002 0103 	and.w	r1, r2, #3
    243e:	2903      	cmp	r1, #3
    2440:	f000 827e 	beq.w	2940 <CONFIG_MAIN_STACK_SIZE+0x940>
    2444:	2900      	cmp	r1, #0
    2446:	f47e ad94 	bne.w	f72 <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    244a:	483e      	ldr	r0, [pc, #248]	; (2544 <CONFIG_MAIN_STACK_SIZE+0x544>)
    244c:	f00d fa02 	bl	f854 <mem_acquire>
		if (!tx) {
    2450:	4601      	mov	r1, r0
    2452:	2800      	cmp	r0, #0
    2454:	f43f a972 	beq.w	173c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b4>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2458:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
		conn->phy_pref_tx = conn->llcp_phy.tx;
    245c:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
		conn->lll.phy_flags = conn->llcp_phy.flags;
    2460:	f894 71ab 	ldrb.w	r7, [r4, #427]	; 0x1ab
    2464:	f894 c064 	ldrb.w	ip, [r4, #100]	; 0x64
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2468:	2001      	movs	r0, #1
    246a:	f360 0301 	bfi	r3, r0, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    246e:	f3c3 0082 	ubfx	r0, r3, #2, #3
    2472:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2476:	f3c3 1042 	ubfx	r0, r3, #5, #3
    247a:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
    247e:	f3c7 0740 	ubfx	r7, r7, #1, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2482:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2484:	f884 21ac 	strb.w	r2, [r4, #428]	; 0x1ac
		conn->lll.phy_flags = conn->llcp_phy.flags;
    2488:	f367 0cc3 	bfi	ip, r7, #3, #1
		conn->phy_pref_tx = conn->llcp_phy.tx;
    248c:	f3c3 0282 	ubfx	r2, r3, #2, #3
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2490:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		conn->lll.phy_flags = conn->llcp_phy.flags;
    2494:	f884 c064 	strb.w	ip, [r4, #100]	; 0x64
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2498:	f040 0003 	orr.w	r0, r0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    249c:	f3c3 1342 	ubfx	r3, r3, #5, #3
		pdu_ctrl_tx->len =
    24a0:	2703      	movs	r7, #3
		pr->tx_phys = conn->llcp_phy.tx;
    24a2:	720a      	strb	r2, [r1, #8]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    24a4:	2216      	movs	r2, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    24a6:	7108      	strb	r0, [r1, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    24a8:	71ca      	strb	r2, [r1, #7]
		pr->rx_phys = conn->llcp_phy.rx;
    24aa:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->len =
    24ac:	714f      	strb	r7, [r1, #5]
	ctrl_tx_pause_enqueue(conn, tx, false);
    24ae:	2200      	movs	r2, #0
    24b0:	4620      	mov	r0, r4
    24b2:	f011 ffe7 	bl	14484 <ctrl_tx_pause_enqueue>
    24b6:	e59b      	b.n	1ff0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc68>
		conn->tx_data_last = tx;
    24b8:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    24bc:	f7ff bae6 	b.w	1a8c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x704>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    24c0:	4592      	cmp	sl, r2
    24c2:	f47e af9d 	bne.w	1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    24c6:	2303      	movs	r3, #3
    24c8:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    24ca:	4629      	mov	r1, r5
    24cc:	f011 f898 	bl	13600 <ll_rx_put>
				rx = conn->llcp_rx;
    24d0:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
				LL_ASSERT(rx && rx->hdr.link);
    24d4:	2d00      	cmp	r5, #0
    24d6:	f000 81d3 	beq.w	2880 <CONFIG_MAIN_STACK_SIZE+0x880>
    24da:	6828      	ldr	r0, [r5, #0]
    24dc:	2800      	cmp	r0, #0
    24de:	f000 81cf 	beq.w	2880 <CONFIG_MAIN_STACK_SIZE+0x880>
				conn->llcp_rx = rx->hdr.link->mem;
    24e2:	6843      	ldr	r3, [r0, #4]
    24e4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    24e8:	2303      	movs	r3, #3
    24ea:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    24ec:	4629      	mov	r1, r5
    24ee:	f011 f887 	bl	13600 <ll_rx_put>
			ll_rx_sched();
    24f2:	f011 f88f 	bl	13614 <ll_rx_sched>
			return;
    24f6:	f7fe bd3c 	b.w	f72 <ull_conn_llcp+0x22>
			conn->llcp.phy_upd_ind.instant = event_counter +
    24fa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    24fc:	4433      	add	r3, r6
							 lll->latency +
    24fe:	3306      	adds	r3, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
    2500:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			(void)ll_pdu_rx_alloc();
    2504:	f011 f8aa 	bl	1365c <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    2508:	683b      	ldr	r3, [r7, #0]
    250a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    250e:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    2510:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
			rx = ll_pdu_rx_alloc();
    2514:	f011 f8a2 	bl	1365c <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    2518:	6803      	ldr	r3, [r0, #0]
    251a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    251e:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    2520:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    2524:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    2528:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    252c:	f3c3 0882 	ubfx	r8, r3, #2, #3
    2530:	095b      	lsrs	r3, r3, #5
    2532:	f7ff ba3a 	b.w	19aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x622>
    2536:	bf00      	nop
    2538:	00025ad4 	.word	0x00025ad4
    253c:	00025c00 	.word	0x00025c00
    2540:	0002561c 	.word	0x0002561c
    2544:	200036dc 	.word	0x200036dc
		LL_ASSERT(0);
    2548:	f640 334f 	movw	r3, #2895	; 0xb4f
		LL_ASSERT(0);
    254c:	4ac7      	ldr	r2, [pc, #796]	; (286c <CONFIG_MAIN_STACK_SIZE+0x86c>)
    254e:	49c8      	ldr	r1, [pc, #800]	; (2870 <CONFIG_MAIN_STACK_SIZE+0x870>)
    2550:	48c8      	ldr	r0, [pc, #800]	; (2874 <CONFIG_MAIN_STACK_SIZE+0x874>)
    2552:	f01c fd7f 	bl	1f054 <printk>
    2556:	4040      	eors	r0, r0
    2558:	f380 8811 	msr	BASEPRI, r0
    255c:	f04f 0003 	mov.w	r0, #3
    2560:	df02      	svc	2
		break;
    2562:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    2566:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
    256a:	f7fe bcfd 	b.w	f68 <ull_conn_llcp+0x18>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    256e:	48c2      	ldr	r0, [pc, #776]	; (2878 <CONFIG_MAIN_STACK_SIZE+0x878>)
    2570:	f00d f970 	bl	f854 <mem_acquire>
		if (tx) {
    2574:	2800      	cmp	r0, #0
    2576:	f43f a8e1 	beq.w	173c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b4>
			conn->llcp_version.ack--;
    257a:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
			conn->llcp_version.tx = 1U;
    257e:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
			conn->llcp_version.ack--;
    2582:	3a01      	subs	r2, #1
    2584:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2588:	7902      	ldrb	r2, [r0, #4]
			conn->llcp_version.tx = 1U;
    258a:	f043 0301 	orr.w	r3, r3, #1
			pdu->len =
    258e:	2106      	movs	r1, #6
			conn->llcp_version.tx = 1U;
    2590:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2594:	f042 0203 	orr.w	r2, r2, #3
			pdu->len =
    2598:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
    259a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    259e:	7102      	strb	r2, [r0, #4]
			pdu->llctrl.version_ind.version_number =
    25a0:	210b      	movs	r1, #11
			pdu->llctrl.version_ind.company_id = cid;
    25a2:	f06f 020e 	mvn.w	r2, #14
			pdu->llctrl.opcode =
    25a6:	270c      	movs	r7, #12
			pdu->llctrl.version_ind.version_number =
    25a8:	7201      	strb	r1, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    25aa:	7242      	strb	r2, [r0, #9]
    25ac:	2105      	movs	r1, #5
			pdu->llctrl.version_ind.sub_version_number = svn;
    25ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			pdu->llctrl.opcode =
    25b2:	71c7      	strb	r7, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
    25b4:	7281      	strb	r1, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    25b6:	72c2      	strb	r2, [r0, #11]
    25b8:	7302      	strb	r2, [r0, #12]
	if (
    25ba:	2b00      	cmp	r3, #0
    25bc:	f000 80be 	beq.w	273c <CONFIG_MAIN_STACK_SIZE+0x73c>
	    !conn->llcp_enc.pause_tx &&
    25c0:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    25c4:	0797      	lsls	r7, r2, #30
    25c6:	f100 80b9 	bmi.w	273c <CONFIG_MAIN_STACK_SIZE+0x73c>
	    !conn->llcp_phy.pause_tx &&
    25ca:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    25ce:	07d1      	lsls	r1, r2, #31
    25d0:	f100 80b4 	bmi.w	273c <CONFIG_MAIN_STACK_SIZE+0x73c>
		if (conn->tx_head == conn->tx_data) {
    25d4:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    25d8:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    25da:	bf04      	itt	eq
    25dc:	681a      	ldreq	r2, [r3, #0]
    25de:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    25e2:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    25e6:	2a00      	cmp	r2, #0
    25e8:	f000 822e 	beq.w	2a48 <CONFIG_MAIN_STACK_SIZE+0xa48>
	tx->next = conn->tx_ctrl_last->next;
    25ec:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    25f0:	681a      	ldr	r2, [r3, #0]
    25f2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    25f4:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    25f6:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    25fa:	6803      	ldr	r3, [r0, #0]
    25fc:	2b00      	cmp	r3, #0
    25fe:	f47f acf7 	bne.w	1ff0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc68>
		conn->tx_data_last = tx;
    2602:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
			conn->procedure_expire = conn->procedure_reload;
    2606:	e4f3      	b.n	1ff0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc68>
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    2608:	4641      	mov	r1, r8
    260a:	4620      	mov	r0, r4
    260c:	f012 f908 	bl	14820 <start_enc_rsp_send>
	    conn->tx_head &&
    2610:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    2614:	b383      	cbz	r3, 2678 <CONFIG_MAIN_STACK_SIZE+0x678>
	    !conn->llcp_enc.pause_tx &&
    2616:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    261a:	0795      	lsls	r5, r2, #30
    261c:	d42c      	bmi.n	2678 <CONFIG_MAIN_STACK_SIZE+0x678>
	    !conn->llcp_phy.pause_tx &&
    261e:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    2622:	07d0      	lsls	r0, r2, #31
    2624:	d428      	bmi.n	2678 <CONFIG_MAIN_STACK_SIZE+0x678>
		if (conn->tx_head == conn->tx_data) {
    2626:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    262a:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    262c:	bf04      	itt	eq
    262e:	681a      	ldreq	r2, [r3, #0]
    2630:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2634:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2638:	2a00      	cmp	r2, #0
    263a:	f000 81d2 	beq.w	29e2 <CONFIG_MAIN_STACK_SIZE+0x9e2>
	tx->next = conn->tx_ctrl_last->next;
    263e:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    2642:	681a      	ldr	r2, [r3, #0]
    2644:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    2646:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    2648:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
	if (!tx->next) {
    264c:	6833      	ldr	r3, [r6, #0]
    264e:	2b00      	cmp	r3, #0
    2650:	f000 8087 	beq.w	2762 <CONFIG_MAIN_STACK_SIZE+0x762>
		conn->llcp_enc.pause_rx = 0U;
    2654:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    2658:	f023 0303 	bic.w	r3, r3, #3
    265c:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
    2660:	f7ff ba14 	b.w	1a8c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x704>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    2664:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
    2666:	7235      	strb	r5, [r6, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    2668:	71f3      	strb	r3, [r6, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    266a:	2702      	movs	r7, #2
    266c:	f7ff b9e4 	b.w	1a38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b0>
		conn->tx_data_last = tx;
    2670:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    2674:	f7ff babd 	b.w	1bf2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x86a>
		if (!conn->tx_ctrl) {
    2678:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    267c:	2a00      	cmp	r2, #0
    267e:	d1de      	bne.n	263e <CONFIG_MAIN_STACK_SIZE+0x63e>
			tx->next = conn->tx_head;
    2680:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2682:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2686:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    268a:	e7df      	b.n	264c <CONFIG_MAIN_STACK_SIZE+0x64c>
				(void)ll_pdu_rx_alloc();
    268c:	f010 ffe6 	bl	1365c <ll_pdu_rx_alloc>
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2690:	2317      	movs	r3, #23
				rx->hdr.handle = lll->handle;
    2692:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
				upd->status = 0U;
    2694:	f887 801c 	strb.w	r8, [r7, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2698:	713b      	strb	r3, [r7, #4]
				upd->tx = lll->phy_tx;
    269a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
				ll_rx_put(rx->hdr.link, rx);
    269e:	6838      	ldr	r0, [r7, #0]
				rx->hdr.handle = lll->handle;
    26a0:	80fa      	strh	r2, [r7, #6]
				upd->tx = lll->phy_tx;
    26a2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    26a6:	777b      	strb	r3, [r7, #29]
				upd->rx = lll->phy_rx;
    26a8:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    26ac:	f3c3 0302 	ubfx	r3, r3, #0, #3
    26b0:	77bb      	strb	r3, [r7, #30]
				ll_rx_put(rx->hdr.link, rx);
    26b2:	4639      	mov	r1, r7
    26b4:	f010 ffa4 	bl	13600 <ll_rx_put>
				ll_rx_sched();
    26b8:	f010 ffac 	bl	13614 <ll_rx_sched>
    26bc:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    26c0:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    26c4:	f3c3 0882 	ubfx	r8, r3, #2, #3
    26c8:	095b      	lsrs	r3, r3, #5
    26ca:	f7ff b96e 	b.w	19aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x622>
	switch (conn->llcp_conn_param.state) {
    26ce:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    26d2:	f002 0207 	and.w	r2, r2, #7
    26d6:	2a05      	cmp	r2, #5
    26d8:	f200 81d9 	bhi.w	2a8e <CONFIG_MAIN_STACK_SIZE+0xa8e>
    26dc:	a001      	add	r0, pc, #4	; (adr r0, 26e4 <CONFIG_MAIN_STACK_SIZE+0x6e4>)
    26de:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    26e2:	bf00      	nop
    26e4:	00001e49 	.word	0x00001e49
    26e8:	00001d9d 	.word	0x00001d9d
    26ec:	00001d4d 	.word	0x00001d4d
    26f0:	00000f73 	.word	0x00000f73
    26f4:	00000f73 	.word	0x00000f73
    26f8:	00000f73 	.word	0x00000f73
		conn->tx_data_last = tx;
    26fc:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
    2700:	f7fe bf3a 	b.w	1578 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1f0>
    2704:	f8c4 81c0 	str.w	r8, [r4, #448]	; 0x1c0
		conn->procedure_expire = conn->procedure_reload;
    2708:	e472      	b.n	1ff0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc68>
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    270a:	f894 019a 	ldrb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.tx_time =
    270e:	f8b4 71a6 	ldrh.w	r7, [r4, #422]	; 0x1a6
				conn->llcp_length.tx_octets =
    2712:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.cache.tx_octets = 0;
    2716:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2718:	f363 0002 	bfi	r0, r3, #0, #3
    271c:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    2720:	f8a4 31a4 	strh.w	r3, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    2724:	f8a4 71a2 	strh.w	r7, [r4, #418]	; 0x1a2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2728:	f7ff b9d2 	b.w	1ad0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x748>
			tx->next = conn->tx_head->next;
    272c:	681a      	ldr	r2, [r3, #0]
    272e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2730:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    2732:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    2734:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2738:	f7fe bfab 	b.w	1692 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30a>
		if (!conn->tx_ctrl) {
    273c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2740:	2a00      	cmp	r2, #0
    2742:	f47f af53 	bne.w	25ec <CONFIG_MAIN_STACK_SIZE+0x5ec>
			tx->next = conn->tx_head;
    2746:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2748:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    274c:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    2750:	e753      	b.n	25fa <CONFIG_MAIN_STACK_SIZE+0x5fa>
			tx->next = conn->tx_head->next;
    2752:	681a      	ldr	r2, [r3, #0]
    2754:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2756:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    2758:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    275a:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    275e:	f7ff b88a 	b.w	1876 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ee>
		conn->tx_data_last = tx;
    2762:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    2766:	e775      	b.n	2654 <CONFIG_MAIN_STACK_SIZE+0x654>
			tx->next = conn->tx_head->next;
    2768:	6803      	ldr	r3, [r0, #0]
    276a:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
    276c:	6005      	str	r5, [r0, #0]
				conn->tx_ctrl = tx;
    276e:	6828      	ldr	r0, [r5, #0]
				conn->tx_ctrl_last = tx;
    2770:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
	if (!tx->next) {
    2774:	2800      	cmp	r0, #0
    2776:	f47e abfc 	bne.w	f72 <ull_conn_llcp+0x22>
    277a:	f7ff b87f 	b.w	187c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f4>
		if (!conn->tx_ctrl) {
    277e:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2782:	2b00      	cmp	r3, #0
    2784:	f47f ad11 	bne.w	21aa <CONFIG_MAIN_STACK_SIZE+0x1aa>
			tx->next = conn->tx_head;
    2788:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl = tx;
    278a:	e9c4 116c 	strd	r1, r1, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    278e:	f8c4 11b8 	str.w	r1, [r4, #440]	; 0x1b8
    2792:	e511      	b.n	21b8 <CONFIG_MAIN_STACK_SIZE+0x1b8>
			tx->next = conn->tx_head->next;
    2794:	6813      	ldr	r3, [r2, #0]
    2796:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    2798:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
    279a:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
    279c:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    27a0:	f7ff ba24 	b.w	1bec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x864>
			tx->next = conn->tx_head->next;
    27a4:	681a      	ldr	r2, [r3, #0]
    27a6:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    27a8:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    27aa:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    27ac:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    27b0:	f7fe bedf 	b.w	1572 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ea>
		LL_ASSERT(rx && rx->hdr.link);
    27b4:	4a2d      	ldr	r2, [pc, #180]	; (286c <CONFIG_MAIN_STACK_SIZE+0x86c>)
    27b6:	4931      	ldr	r1, [pc, #196]	; (287c <CONFIG_MAIN_STACK_SIZE+0x87c>)
    27b8:	482e      	ldr	r0, [pc, #184]	; (2874 <CONFIG_MAIN_STACK_SIZE+0x874>)
    27ba:	f44f 6353 	mov.w	r3, #3376	; 0xd30
    27be:	f01c fc49 	bl	1f054 <printk>
    27c2:	4040      	eors	r0, r0
    27c4:	f380 8811 	msr	BASEPRI, r0
    27c8:	f04f 0003 	mov.w	r0, #3
    27cc:	df02      	svc	2
    27ce:	6838      	ldr	r0, [r7, #0]
    27d0:	e467      	b.n	20a2 <CONFIG_MAIN_STACK_SIZE+0xa2>
			if (!conn->llcp_length.cache.tx_octets) {
    27d2:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    27d6:	2a00      	cmp	r2, #0
    27d8:	f040 80f4 	bne.w	29c4 <CONFIG_MAIN_STACK_SIZE+0x9c4>
				conn->llcp_length.ack = conn->llcp_length.req;
    27dc:	f884 1199 	strb.w	r1, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    27e0:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
    27e4:	e454      	b.n	2090 <CONFIG_MAIN_STACK_SIZE+0x90>
			tx->next = conn->tx_head->next;
    27e6:	681a      	ldr	r2, [r3, #0]
    27e8:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    27ea:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    27ec:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    27f0:	f7ff b948 	b.w	1a84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fc>
		tx_time = CLAMP(conn->default_tx_time,
    27f4:	f44f 73a4 	mov.w	r3, #328	; 0x148
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M);
    27f8:	461a      	mov	r2, r3
    27fa:	e4b4      	b.n	2166 <CONFIG_MAIN_STACK_SIZE+0x166>
			tx->next = conn->tx_head->next;
    27fc:	681a      	ldr	r2, [r3, #0]
    27fe:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    2802:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
    2806:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    280a:	e9c4 886d 	strd	r8, r8, [r4, #436]	; 0x1b4
    280e:	f7ff bbec 	b.w	1fea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc62>
			tx->next = conn->tx_head->next;
    2812:	681a      	ldr	r2, [r3, #0]
    2814:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2816:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
    2818:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    281a:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    281e:	f7ff b932 	b.w	1a86 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2822:	4815      	ldr	r0, [pc, #84]	; (2878 <CONFIG_MAIN_STACK_SIZE+0x878>)
    2824:	f00d f816 	bl	f854 <mem_acquire>
		if (!tx) {
    2828:	4601      	mov	r1, r0
    282a:	2800      	cmp	r0, #0
    282c:	f43e af86 	beq.w	173c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b4>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2830:	7903      	ldrb	r3, [r0, #4]
    2832:	f043 0303 	orr.w	r3, r3, #3
    2836:	710b      	strb	r3, [r1, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2838:	2011      	movs	r0, #17
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    283a:	2203      	movs	r2, #3
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    283c:	230f      	movs	r3, #15
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    283e:	71c8      	strb	r0, [r1, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2840:	714a      	strb	r2, [r1, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2842:	720b      	strb	r3, [r1, #8]
		rej->error_code = conn->llcp_conn_param.status;
    2844:	f894 3173 	ldrb.w	r3, [r4, #371]	; 0x173
    2848:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    284a:	4620      	mov	r0, r4
    284c:	2200      	movs	r2, #0
    284e:	f011 fe19 	bl	14484 <ctrl_tx_pause_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2852:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    2856:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
    285a:	2300      	movs	r3, #0
    285c:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    2860:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
    2864:	f8ca 3000 	str.w	r3, [sl]
		return;
    2868:	f7fe bb7e 	b.w	f68 <ull_conn_llcp+0x18>
    286c:	00025ad4 	.word	0x00025ad4
    2870:	0002568c 	.word	0x0002568c
    2874:	0002561c 	.word	0x0002561c
    2878:	200036dc 	.word	0x200036dc
    287c:	00025c00 	.word	0x00025c00
				LL_ASSERT(rx && rx->hdr.link);
    2880:	4a8c      	ldr	r2, [pc, #560]	; (2ab4 <CONFIG_MAIN_STACK_SIZE+0xab4>)
    2882:	498d      	ldr	r1, [pc, #564]	; (2ab8 <CONFIG_MAIN_STACK_SIZE+0xab8>)
    2884:	488d      	ldr	r0, [pc, #564]	; (2abc <CONFIG_MAIN_STACK_SIZE+0xabc>)
    2886:	f640 636e 	movw	r3, #3694	; 0xe6e
    288a:	f01c fbe3 	bl	1f054 <printk>
    288e:	4040      	eors	r0, r0
    2890:	f380 8811 	msr	BASEPRI, r0
    2894:	f04f 0003 	mov.w	r0, #3
    2898:	df02      	svc	2
    289a:	6828      	ldr	r0, [r5, #0]
    289c:	e621      	b.n	24e2 <CONFIG_MAIN_STACK_SIZE+0x4e2>
	    (!feature_coded_phy && !feature_phy_2m)) {
    289e:	05d2      	lsls	r2, r2, #23
		tx_time = CLAMP(conn->default_tx_time,
    28a0:	f44f 73a4 	mov.w	r3, #328	; 0x148
	    (!feature_coded_phy && !feature_phy_2m)) {
    28a4:	f140 80cd 	bpl.w	2a42 <CONFIG_MAIN_STACK_SIZE+0xa42>
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_2M),
    28a8:	22a8      	movs	r2, #168	; 0xa8
    28aa:	e45c      	b.n	2166 <CONFIG_MAIN_STACK_SIZE+0x166>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    28ac:	4884      	ldr	r0, [pc, #528]	; (2ac0 <CONFIG_MAIN_STACK_SIZE+0xac0>)
    28ae:	f00c ffd1 	bl	f854 <mem_acquire>
	if (!tx) {
    28b2:	4601      	mov	r1, r0
    28b4:	2800      	cmp	r0, #0
    28b6:	f43e af41 	beq.w	173c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b4>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    28ba:	7903      	ldrb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    28bc:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    28be:	f043 0303 	orr.w	r3, r3, #3
    28c2:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    28c4:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
    28c6:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	rsp->interval_max =
    28ca:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
	rsp->latency =
    28ce:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
	rsp->interval_min =
    28d2:	810a      	strh	r2, [r1, #8]
	rsp->timeout =
    28d4:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
	rsp->interval_max =
    28d8:	814b      	strh	r3, [r1, #10]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    28da:	2310      	movs	r3, #16
	rsp->latency =
    28dc:	8188      	strh	r0, [r1, #12]
	rsp->timeout =
    28de:	81ca      	strh	r2, [r1, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    28e0:	71cb      	strb	r3, [r1, #7]
	rsp->preferred_periodicity =
    28e2:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
    28e6:	740b      	strb	r3, [r1, #16]
	rsp->reference_conn_event_count =
    28e8:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    28ec:	f8b4 0180 	ldrh.w	r0, [r4, #384]	; 0x180
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    28f0:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
	rsp->reference_conn_event_count =
    28f4:	f8a1 3011 	strh.w	r3, [r1, #17]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    28f8:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    28fc:	f8a1 0013 	strh.w	r0, [r1, #19]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2900:	f8b4 0186 	ldrh.w	r0, [r4, #390]	; 0x186
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    2904:	f8a1 2015 	strh.w	r2, [r1, #21]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    2908:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    290c:	f8a1 3017 	strh.w	r3, [r1, #23]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    2910:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
    2914:	f8a1 301d 	strh.w	r3, [r1, #29]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2918:	f8a1 0019 	strh.w	r0, [r1, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    291c:	f8a1 201b 	strh.w	r2, [r1, #27]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2920:	4620      	mov	r0, r4
    2922:	463a      	mov	r2, r7
    2924:	f011 fdae 	bl	14484 <ctrl_tx_pause_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2928:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
	conn_upd_curr = NULL;
    292c:	f8ca 7000 	str.w	r7, [sl]
    2930:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    2934:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2938:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
}
    293c:	f7fe bb14 	b.w	f68 <ull_conn_llcp+0x18>
		if (conn->llcp_phy.tx & BIT(1)) {
    2940:	0711      	lsls	r1, r2, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    2942:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
		if (conn->llcp_phy.tx & BIT(1)) {
    2946:	f3c2 0382 	ubfx	r3, r2, #2, #3
    294a:	d55c      	bpl.n	2a06 <CONFIG_MAIN_STACK_SIZE+0xa06>
			conn->llcp_phy.tx = BIT(1);
    294c:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    2950:	2202      	movs	r2, #2
    2952:	f362 0384 	bfi	r3, r2, #2, #3
    2956:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.rx & BIT(1)) {
    295a:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    295e:	0658      	lsls	r0, r3, #25
    2960:	ea4f 1253 	mov.w	r2, r3, lsr #5
    2964:	d547      	bpl.n	29f6 <CONFIG_MAIN_STACK_SIZE+0x9f6>
			conn->llcp_phy.rx = BIT(1);
    2966:	2202      	movs	r2, #2
    2968:	f362 1347 	bfi	r3, r2, #5, #3
    296c:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    2970:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    2974:	f894 c064 	ldrb.w	ip, [r4, #100]	; 0x64
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2978:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    297c:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2980:	f000 0007 	and.w	r0, r0, #7
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    2984:	f3c2 0182 	ubfx	r1, r2, #2, #3
    2988:	f00c 0c07 	and.w	ip, ip, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    298c:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    2990:	458c      	cmp	ip, r1
    2992:	bf08      	it	eq
    2994:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    2996:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    2998:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    299c:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    29a0:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    29a4:	bf08      	it	eq
    29a6:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    29a8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
		conn->llcp_ack -= 2U;
    29ac:	1eb8      	subs	r0, r7, #2
		conn->llcp.phy_upd_ind.initiate = 1U;
    29ae:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    29b2:	2206      	movs	r2, #6
		conn->llcp_ack -= 2U;
    29b4:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
		conn->llcp.phy_upd_ind.initiate = 1U;
    29b8:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_PHY_UPD;
    29bc:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    29c0:	f7fe bb00 	b.w	fc4 <ull_conn_llcp+0x74>
				conn->llcp_length.cache.tx_octets = 0;
    29c4:	2100      	movs	r1, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    29c6:	f361 0302 	bfi	r3, r1, #0, #3
				conn->llcp_length.tx_octets =
    29ca:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.tx_time =
    29ce:	f8b4 21a6 	ldrh.w	r2, [r4, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    29d2:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    29d6:	f8a4 11a4 	strh.w	r1, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    29da:	f8a4 21a2 	strh.w	r2, [r4, #418]	; 0x1a2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    29de:	f7ff bb57 	b.w	2090 <CONFIG_MAIN_STACK_SIZE+0x90>
			tx->next = conn->tx_head->next;
    29e2:	681a      	ldr	r2, [r3, #0]
    29e4:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    29e6:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    29e8:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    29ec:	e62e      	b.n	264c <CONFIG_MAIN_STACK_SIZE+0x64c>
				conn->llcp_conn_param.interval_max;
    29ee:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    29f2:	f7ff b9f6 	b.w	1de2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa5a>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    29f6:	07d1      	lsls	r1, r2, #31
    29f8:	d50f      	bpl.n	2a1a <CONFIG_MAIN_STACK_SIZE+0xa1a>
			conn->llcp_phy.rx = BIT(0);
    29fa:	2201      	movs	r2, #1
    29fc:	f362 1347 	bfi	r3, r2, #5, #3
    2a00:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2a04:	e7b4      	b.n	2970 <CONFIG_MAIN_STACK_SIZE+0x970>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    2a06:	07da      	lsls	r2, r3, #31
    2a08:	d510      	bpl.n	2a2c <CONFIG_MAIN_STACK_SIZE+0xa2c>
			conn->llcp_phy.tx = BIT(0);
    2a0a:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    2a0e:	2201      	movs	r2, #1
    2a10:	f362 0384 	bfi	r3, r2, #2, #3
    2a14:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2a18:	e79f      	b.n	295a <CONFIG_MAIN_STACK_SIZE+0x95a>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    2a1a:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    2a1e:	bf18      	it	ne
    2a20:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
    2a22:	f362 1347 	bfi	r3, r2, #5, #3
    2a26:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2a2a:	e7a1      	b.n	2970 <CONFIG_MAIN_STACK_SIZE+0x970>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    2a2c:	f013 0304 	ands.w	r3, r3, #4
    2a30:	d017      	beq.n	2a62 <CONFIG_MAIN_STACK_SIZE+0xa62>
			conn->llcp_phy.tx = BIT(2);
    2a32:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    2a36:	2204      	movs	r2, #4
    2a38:	f362 0384 	bfi	r3, r2, #2, #3
    2a3c:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2a40:	e78b      	b.n	295a <CONFIG_MAIN_STACK_SIZE+0x95a>
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M);
    2a42:	461a      	mov	r2, r3
    2a44:	f7ff bb8f 	b.w	2166 <CONFIG_MAIN_STACK_SIZE+0x166>
			tx->next = conn->tx_head->next;
    2a48:	681a      	ldr	r2, [r3, #0]
    2a4a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2a4c:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    2a4e:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2a52:	e5d2      	b.n	25fa <CONFIG_MAIN_STACK_SIZE+0x5fa>
			tx->next = conn->tx_head->next;
    2a54:	6803      	ldr	r3, [r0, #0]
    2a56:	600b      	str	r3, [r1, #0]
			conn->tx_head->next = tx;
    2a58:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
    2a5a:	e9c4 116d 	strd	r1, r1, [r4, #436]	; 0x1b4
    2a5e:	f7ff bbab 	b.w	21b8 <CONFIG_MAIN_STACK_SIZE+0x1b8>
			conn->llcp_phy.tx = 0U;
    2a62:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    2a66:	f363 0284 	bfi	r2, r3, #2, #3
    2a6a:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
    2a6e:	e774      	b.n	295a <CONFIG_MAIN_STACK_SIZE+0x95a>
		LL_ASSERT(0);
    2a70:	4a10      	ldr	r2, [pc, #64]	; (2ab4 <CONFIG_MAIN_STACK_SIZE+0xab4>)
    2a72:	4914      	ldr	r1, [pc, #80]	; (2ac4 <CONFIG_MAIN_STACK_SIZE+0xac4>)
    2a74:	4811      	ldr	r0, [pc, #68]	; (2abc <CONFIG_MAIN_STACK_SIZE+0xabc>)
    2a76:	f640 5358 	movw	r3, #3416	; 0xd58
    2a7a:	f01c faeb 	bl	1f054 <printk>
    2a7e:	4040      	eors	r0, r0
    2a80:	f380 8811 	msr	BASEPRI, r0
    2a84:	f04f 0003 	mov.w	r0, #3
    2a88:	df02      	svc	2
		break;
    2a8a:	f7fe ba9b 	b.w	fc4 <ull_conn_llcp+0x74>
		LL_ASSERT(0);
    2a8e:	f640 435c 	movw	r3, #3164	; 0xc5c
    2a92:	e55b      	b.n	254c <CONFIG_MAIN_STACK_SIZE+0x54c>
		LL_ASSERT(0);
    2a94:	4a07      	ldr	r2, [pc, #28]	; (2ab4 <CONFIG_MAIN_STACK_SIZE+0xab4>)
    2a96:	490b      	ldr	r1, [pc, #44]	; (2ac4 <CONFIG_MAIN_STACK_SIZE+0xac4>)
    2a98:	4808      	ldr	r0, [pc, #32]	; (2abc <CONFIG_MAIN_STACK_SIZE+0xabc>)
    2a9a:	f640 5358 	movw	r3, #3416	; 0xd58
    2a9e:	f01c fad9 	bl	1f054 <printk>
    2aa2:	4040      	eors	r0, r0
    2aa4:	f380 8811 	msr	BASEPRI, r0
    2aa8:	f04f 0003 	mov.w	r0, #3
    2aac:	df02      	svc	2
		break;
    2aae:	f7fe be45 	b.w	173c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b4>
    2ab2:	bf00      	nop
    2ab4:	00025ad4 	.word	0x00025ad4
    2ab8:	00025c00 	.word	0x00025c00
    2abc:	0002561c 	.word	0x0002561c
    2ac0:	200036dc 	.word	0x200036dc
    2ac4:	0002568c 	.word	0x0002568c

00002ac8 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    2ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t timeout;
	uint16_t interval;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
	conn = lll->hdr.parent;
    2acc:	469c      	mov	ip, r3
{
    2ace:	b095      	sub	sp, #84	; 0x54
	conn = lll->hdr.parent;
    2ad0:	f85c 6b0c 	ldr.w	r6, [ip], #12
{
    2ad4:	461d      	mov	r5, r3
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2ad6:	6813      	ldr	r3, [r2, #0]
{
    2ad8:	4686      	mov	lr, r0
    2ada:	460c      	mov	r4, r1

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2adc:	4660      	mov	r0, ip
    2ade:	312e      	adds	r1, #46	; 0x2e
{
    2ae0:	4617      	mov	r7, r2
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    2ae2:	f105 0a08 	add.w	sl, r5, #8
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2ae6:	2203      	movs	r2, #3
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2ae8:	f8d3 9000 	ldr.w	r9, [r3]
{
    2aec:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2af0:	f105 081c 	add.w	r8, r5, #28
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2af4:	f01e fdd7 	bl	216a6 <memcpy>
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    2af8:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    2afc:	2204      	movs	r2, #4
    2afe:	4650      	mov	r0, sl
    2b00:	f01e fdd1 	bl	216a6 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2b04:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    2b08:	2205      	movs	r2, #5
    2b0a:	4640      	mov	r0, r8
    2b0c:	f01e fdcb 	bl	216a6 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2b10:	4640      	mov	r0, r8
    2b12:	2105      	movs	r1, #5
    2b14:	f00d f86c 	bl	fbf0 <util_ones_count_get>
    2b18:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    2b1c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    2b20:	f360 0305 	bfi	r3, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    2b24:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2b26:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    2b2a:	d90a      	bls.n	2b42 <ull_slave_setup+0x7a>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2b2c:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    2b30:	f003 021f 	and.w	r2, r3, #31
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2b34:	3a05      	subs	r2, #5
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2b36:	f3c3 0104 	ubfx	r1, r3, #0, #5
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2b3a:	2a0b      	cmp	r2, #11
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2b3c:	f885 1022 	strb.w	r1, [r5, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2b40:	d902      	bls.n	2b48 <ull_slave_setup+0x80>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    2b42:	b015      	add	sp, #84	; 0x54
    2b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    2b48:	683a      	ldr	r2, [r7, #0]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2b4a:	f896 10dc 	ldrb.w	r1, [r6, #220]	; 0xdc
	((struct lll_adv *)ftr->param)->conn = NULL;
    2b4e:	2000      	movs	r0, #0
    2b50:	6090      	str	r0, [r2, #8]
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    2b52:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
	lll->interval = interval;
    2b56:	f8a5 8012 	strh.w	r8, [r5, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2b5a:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    2b5e:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2b62:	095b      	lsrs	r3, r3, #5
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2b64:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2b68:	f363 0184 	bfi	r1, r3, #2, #3
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2b6c:	82aa      	strh	r2, [r5, #20]
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    2b6e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2b70:	f886 10dc 	strb.w	r1, [r6, #220]	; 0xdc
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    2b74:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		(((lll_clock_ppm_local_get() +
    2b78:	f016 fa96 	bl	190a8 <lll_clock_ppm_local_get>
    2b7c:	4603      	mov	r3, r0
		   lll_clock_ppm_get(conn->slave.sca)) *
    2b7e:	f896 00dc 	ldrb.w	r0, [r6, #220]	; 0xdc
		(((lll_clock_ppm_local_get() +
    2b82:	930b      	str	r3, [sp, #44]	; 0x2c
		   lll_clock_ppm_get(conn->slave.sca)) *
    2b84:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2b88:	f016 fa90 	bl	190ac <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    2b8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2b8e:	f8df c328 	ldr.w	ip, [pc, #808]	; 2eb8 <ull_slave_setup+0x3f0>
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    2b92:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2b96:	8aaa      	ldrh	r2, [r5, #20]
	conn_interval_us = interval * 1250U;
    2b98:	f240 4be2 	movw	fp, #1250	; 0x4e2
    2b9c:	fb0b f808 	mul.w	r8, fp, r8
		(((lll_clock_ppm_local_get() +
    2ba0:	4418      	add	r0, r3
		   lll_clock_ppm_get(conn->slave.sca)) *
    2ba2:	fb08 f000 	mul.w	r0, r8, r0
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2ba6:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    2baa:	f200 203f 	addw	r0, r0, #575	; 0x23f
    2bae:	fbac c000 	umull	ip, r0, ip, r0
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2bb2:	ea4f 0c58 	mov.w	ip, r8, lsr #1
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2bb6:	0c80      	lsrs	r0, r0, #18
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    2bb8:	fb0b f101 	mul.w	r1, fp, r1
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2bbc:	f1ac 0c96 	sub.w	ip, ip, #150	; 0x96
	lll->slave.window_widening_periodic_us =
    2bc0:	62a8      	str	r0, [r5, #40]	; 0x28
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2bc2:	f8c5 c02c 	str.w	ip, [r5, #44]	; 0x2c
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    2bc6:	63e9      	str	r1, [r5, #60]	; 0x3c
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2bc8:	8f21      	ldrh	r1, [r4, #56]	; 0x38
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2bca:	4bb1      	ldr	r3, [pc, #708]	; (2e90 <ull_slave_setup+0x3c8>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2bcc:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2bd0:	f242 7c10 	movw	ip, #10000	; 0x2710
    2bd4:	fb0c 8101 	mla	r1, ip, r1, r8
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2bd8:	48ae      	ldr	r0, [pc, #696]	; (2e94 <ull_slave_setup+0x3cc>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2bda:	4443      	add	r3, r8
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2bdc:	f102 0c06 	add.w	ip, r2, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2be0:	3901      	subs	r1, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2be2:	fbb3 f3f8 	udiv	r3, r3, r8
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2be6:	fbb1 f1f8 	udiv	r1, r1, r8
    2bea:	f8a6 10c6 	strh.w	r1, [r6, #198]	; 0xc6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2bee:	b299      	uxth	r1, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2bf0:	4561      	cmp	r1, ip
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2bf2:	4440      	add	r0, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2bf4:	f8a6 10d2 	strh.w	r1, [r6, #210]	; 0xd2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2bf8:	fbb0 f0f8 	udiv	r0, r0, r8
    2bfc:	f8a6 00ca 	strh.w	r0, [r6, #202]	; 0xca
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2c00:	dd02      	ble.n	2c08 <ull_slave_setup+0x140>
			     (conn->apto_reload - (lll->latency + 6)) :
    2c02:	1a89      	subs	r1, r1, r2
    2c04:	3906      	subs	r1, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2c06:	b289      	uxth	r1, r1
    2c08:	f8a6 10ce 	strh.w	r1, [r6, #206]	; 0xce
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    2c0c:	2204      	movs	r2, #4
    2c0e:	4651      	mov	r1, sl
    2c10:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
    2c14:	f01e fd47 	bl	216a6 <memcpy>
	peer_addr_type = pdu_adv->tx_addr;
    2c18:	7f23      	ldrb	r3, [r4, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2c1a:	f104 0a1e 	add.w	sl, r4, #30
    2c1e:	4651      	mov	r1, sl
	peer_addr_type = pdu_adv->tx_addr;
    2c20:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2c24:	2206      	movs	r2, #6
    2c26:	a812      	add	r0, sp, #72	; 0x48
	peer_addr_type = pdu_adv->tx_addr;
    2c28:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2c2c:	f01e fd3b 	bl	216a6 <memcpy>
	chan_sel = pdu_adv->chan_sel;
    2c30:	7f23      	ldrb	r3, [r4, #28]
	cc->status = 0U;
    2c32:	f44f 7280 	mov.w	r2, #256	; 0x100
    2c36:	83a2      	strh	r2, [r4, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2c38:	f899 002a 	ldrb.w	r0, [r9, #42]	; 0x2a
	uint8_t rl_idx = ftr->rl_idx;
    2c3c:	f897 b012 	ldrb.w	fp, [r7, #18]
	chan_sel = pdu_adv->chan_sel;
    2c40:	f3c3 1240 	ubfx	r2, r3, #5, #1
    2c44:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    2c48:	920b      	str	r2, [sp, #44]	; 0x2c
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2c4a:	f015 fce5 	bl	18618 <ull_filter_lll_lrpa_used>
    2c4e:	4601      	mov	r1, r0
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    2c50:	2206      	movs	r2, #6
    2c52:	f104 002b 	add.w	r0, r4, #43	; 0x2b
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2c56:	2900      	cmp	r1, #0
    2c58:	f040 80ed 	bne.w	2e36 <ull_slave_setup+0x36e>
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    2c5c:	f01e fd4e 	bl	216fc <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    2c60:	f104 0325 	add.w	r3, r4, #37	; 0x25
    2c64:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    2c68:	930e      	str	r3, [sp, #56]	; 0x38
    2c6a:	f104 031f 	add.w	r3, r4, #31
    2c6e:	f000 80eb 	beq.w	2e48 <ull_slave_setup+0x380>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    2c72:	461a      	mov	r2, r3
    2c74:	4651      	mov	r1, sl
    2c76:	4658      	mov	r0, fp
    2c78:	f014 ffa6 	bl	17bc8 <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    2c7c:	7fa2      	ldrb	r2, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2c7e:	980e      	ldr	r0, [sp, #56]	; 0x38
		cc->peer_addr_type += 2;
    2c80:	3202      	adds	r2, #2
    2c82:	77a2      	strb	r2, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2c84:	a912      	add	r1, sp, #72	; 0x48
    2c86:	2206      	movs	r2, #6
    2c88:	f01e fd0d 	bl	216a6 <memcpy>
	cc->sca = conn->slave.sca;
    2c8c:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
	cc->interval = lll->interval;
    2c90:	8a69      	ldrh	r1, [r5, #18]
	cc->latency = lll->latency;
    2c92:	8aaa      	ldrh	r2, [r5, #20]
    2c94:	86a2      	strh	r2, [r4, #52]	; 0x34
	cc->sca = conn->slave.sca;
    2c96:	f3c3 0382 	ubfx	r3, r3, #2, #3
    2c9a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	cc->timeout = timeout;
    2c9e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    2ca2:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->interval = lll->interval;
    2ca4:	8661      	strh	r1, [r4, #50]	; 0x32
	lll->handle = ll_conn_handle_get(conn);
    2ca6:	4630      	mov	r0, r6
    2ca8:	f011 ff0e 	bl	14ac8 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    2cac:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    2cae:	8228      	strh	r0, [r5, #16]
	rx->handle = lll->handle;
    2cb0:	80e0      	strh	r0, [r4, #6]
		rx_csa = (void *)ftr->extra;
    2cb2:	687c      	ldr	r4, [r7, #4]
		ll_rx_put(link, rx);
    2cb4:	980a      	ldr	r0, [sp, #40]	; 0x28
    2cb6:	f010 fca3 	bl	13600 <ll_rx_put>
		rx->handle = lll->handle;
    2cba:	8a2b      	ldrh	r3, [r5, #16]
    2cbc:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    2cbe:	2316      	movs	r3, #22
    2cc0:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
    2cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		link = rx->link;
    2cc4:	6820      	ldr	r0, [r4, #0]
		if (chan_sel) {
    2cc6:	2b00      	cmp	r3, #0
    2cc8:	f000 80ba 	beq.w	2e40 <ull_slave_setup+0x378>
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    2ccc:	f895 e009 	ldrb.w	lr, [r5, #9]
				      lll->access_addr[0];
    2cd0:	7a2b      	ldrb	r3, [r5, #8]
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    2cd2:	f895 c00b 	ldrb.w	ip, [r5, #11]
				      lll->access_addr[2];
    2cd6:	7aa9      	ldrb	r1, [r5, #10]
			lll->data_chan_sel = 1;
    2cd8:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    2cdc:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    2ce0:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
			lll->data_chan_id = aa_ms ^ aa_ls;
    2ce4:	404b      	eors	r3, r1
			lll->data_chan_sel = 1;
    2ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
			cs->csa = 0x01;
    2cea:	2101      	movs	r1, #1
			lll->data_chan_id = aa_ms ^ aa_ls;
    2cec:	846b      	strh	r3, [r5, #34]	; 0x22
			lll->data_chan_sel = 1;
    2cee:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
			cs->csa = 0x01;
    2cf2:	7721      	strb	r1, [r4, #28]
	ll_rx_put(link, rx);
    2cf4:	4621      	mov	r1, r4
    2cf6:	f010 fc83 	bl	13600 <ll_rx_put>
	ll_rx_sched();
    2cfa:	f010 fc8b 	bl	13614 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    2cfe:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
    2d02:	2101      	movs	r1, #1
    2d04:	f000 0007 	and.w	r0, r0, #7
    2d08:	f016 f8ee 	bl	18ee8 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2d0c:	4a62      	ldr	r2, [pc, #392]	; (2e98 <ull_slave_setup+0x3d0>)
	conn->evt.ticks_active_to_start = 0U;
    2d0e:	f04f 0a00 	mov.w	sl, #0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    2d12:	4683      	mov	fp, r0
	conn->evt.ticks_xtal_to_start =
    2d14:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2d16:	f200 4052 	addw	r0, r0, #1106	; 0x452
    2d1a:	fba0 0102 	umull	r0, r1, r0, r2
	conn->evt.ticks_xtal_to_start =
    2d1e:	6033      	str	r3, [r6, #0]
	conn->evt.ticks_preempt_to_start =
    2d20:	e9c6 aa01 	strd	sl, sl, [r6, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2d24:	a358      	add	r3, pc, #352	; (adr r3, 2e88 <ull_slave_setup+0x3c0>)
    2d26:	e9d3 2300 	ldrd	r2, r3, [r3]
    2d2a:	f7fd f9e9 	bl	100 <__aeabi_uldivmod>
    2d2e:	68fc      	ldr	r4, [r7, #12]
	conn_offset_us += ((uint64_t)win_offset + 1) * 1250U;
    2d30:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2d34:	6aad      	ldr	r5, [r5, #40]	; 0x28
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2d36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += ((uint64_t)win_offset + 1) * 1250U;
    2d3a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    2d3e:	fb03 3302 	mla	r3, r3, r2, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2d42:	2102      	movs	r1, #2
    2d44:	4652      	mov	r2, sl
	conn->evt.ticks_slot =
    2d46:	60f0      	str	r0, [r6, #12]
    2d48:	f5a4 74ae 	sub.w	r4, r4, #348	; 0x15c
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2d4c:	2001      	movs	r0, #1
	conn_offset_us -= EVENT_JITTER_US;
    2d4e:	441c      	add	r4, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2d50:	f00c fe24 	bl	f99c <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    2d54:	4648      	mov	r0, r9
    2d56:	f011 f9f9 	bl	1414c <ull_adv_handle_get>
    2d5a:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2d5c:	4b4f      	ldr	r3, [pc, #316]	; (2e9c <ull_slave_setup+0x3d4>)
    2d5e:	f8cd 9000 	str.w	r9, [sp]
    2d62:	b2d2      	uxtb	r2, r2
    2d64:	4650      	mov	r0, sl
    2d66:	2101      	movs	r1, #1
    2d68:	f00e f904 	bl	10f74 <ticker_stop>
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2d6c:	2801      	cmp	r0, #1
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2d6e:	eba8 0805 	sub.w	r8, r8, r5
	conn_offset_us -= ready_delay_us;
    2d72:	eba4 040b 	sub.w	r4, r4, fp
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2d76:	d07f      	beq.n	2e78 <ull_slave_setup+0x3b0>
	if (adv->lll.is_hdcd) {
    2d78:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
    2d7c:	07db      	lsls	r3, r3, #31
    2d7e:	d473      	bmi.n	2e68 <ull_slave_setup+0x3a0>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2d80:	4630      	mov	r0, r6
    2d82:	f011 fea1 	bl	14ac8 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2d86:	f8df b110 	ldr.w	fp, [pc, #272]	; 2e98 <ull_slave_setup+0x3d0>
    2d8a:	fba8 890b 	umull	r8, r9, r8, fp
    2d8e:	a33e      	add	r3, pc, #248	; (adr r3, 2e88 <ull_slave_setup+0x3c0>)
    2d90:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2d94:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2d96:	4649      	mov	r1, r9
    2d98:	4640      	mov	r0, r8
    2d9a:	f7fd f9b1 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2d9e:	4a40      	ldr	r2, [pc, #256]	; (2ea0 <ull_slave_setup+0x3d8>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2da0:	9606      	str	r6, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2da2:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
    2da6:	fbaa 2302 	umull	r2, r3, sl, r2
    2daa:	2107      	movs	r1, #7
    2dac:	fb01 330a 	mla	r3, r1, sl, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2db0:	f240 1145 	movw	r1, #325	; 0x145
    2db4:	68bf      	ldr	r7, [r7, #8]
    2db6:	9108      	str	r1, [sp, #32]
    2db8:	493a      	ldr	r1, [pc, #232]	; (2ea4 <ull_slave_setup+0x3dc>)
    2dba:	9107      	str	r1, [sp, #28]
    2dbc:	493a      	ldr	r1, [pc, #232]	; (2ea8 <ull_slave_setup+0x3e0>)
    2dbe:	9105      	str	r1, [sp, #20]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2dc0:	ebb8 0002 	subs.w	r0, r8, r2
    2dc4:	eb69 0103 	sbc.w	r1, r9, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2dc8:	68f3      	ldr	r3, [r6, #12]
    2dca:	9304      	str	r3, [sp, #16]
    2dcc:	2600      	movs	r6, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2dd2:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2dd4:	9603      	str	r6, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2dd6:	f7fd f993 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2dda:	a32b      	add	r3, pc, #172	; (adr r3, 2e88 <ull_slave_setup+0x3c0>)
    2ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2de0:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2de2:	fba4 010b 	umull	r0, r1, r4, fp
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2de6:	e9cd ac01 	strd	sl, ip, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2dea:	f7fd f989 	bl	100 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2dee:	3503      	adds	r5, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2df0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2df4:	b2ed      	uxtb	r5, r5
    2df6:	3f31      	subs	r7, #49	; 0x31
    2df8:	463b      	mov	r3, r7
    2dfa:	9000      	str	r0, [sp, #0]
    2dfc:	462a      	mov	r2, r5
    2dfe:	4630      	mov	r0, r6
    2e00:	2101      	movs	r1, #1
    2e02:	f00e f84b 	bl	10e9c <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2e06:	f030 0302 	bics.w	r3, r0, #2
    2e0a:	d00c      	beq.n	2e26 <ull_slave_setup+0x35e>
    2e0c:	4a27      	ldr	r2, [pc, #156]	; (2eac <ull_slave_setup+0x3e4>)
    2e0e:	4928      	ldr	r1, [pc, #160]	; (2eb0 <ull_slave_setup+0x3e8>)
    2e10:	4828      	ldr	r0, [pc, #160]	; (2eb4 <ull_slave_setup+0x3ec>)
    2e12:	f44f 73a3 	mov.w	r3, #326	; 0x146
    2e16:	f01c f91d 	bl	1f054 <printk>
    2e1a:	4040      	eors	r0, r0
    2e1c:	f380 8811 	msr	BASEPRI, r0
    2e20:	f04f 0003 	mov.w	r0, #3
    2e24:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    2e26:	2201      	movs	r2, #1
    2e28:	4610      	mov	r0, r2
    2e2a:	2102      	movs	r1, #2
    2e2c:	f00c fdb6 	bl	f99c <mayfly_enable>
}
    2e30:	b015      	add	sp, #84	; 0x54
    2e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    2e36:	f104 0124 	add.w	r1, r4, #36	; 0x24
    2e3a:	f01e fc34 	bl	216a6 <memcpy>
    2e3e:	e70f      	b.n	2c60 <ull_slave_setup+0x198>
			cs->csa = 0x00;
    2e40:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    2e44:	7723      	strb	r3, [r4, #28]
    2e46:	e755      	b.n	2cf4 <ull_slave_setup+0x22c>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    2e48:	980e      	ldr	r0, [sp, #56]	; 0x38
    2e4a:	9311      	str	r3, [sp, #68]	; 0x44
    2e4c:	2206      	movs	r2, #6
    2e4e:	2100      	movs	r1, #0
    2e50:	f01e fc54 	bl	216fc <memset>
		cc->peer_addr_type = peer_addr_type;
    2e54:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    2e58:	77a3      	strb	r3, [r4, #30]
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    2e5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2e5c:	a912      	add	r1, sp, #72	; 0x48
    2e5e:	4618      	mov	r0, r3
    2e60:	2206      	movs	r2, #6
    2e62:	f01e fc20 	bl	216a6 <memcpy>
    2e66:	e711      	b.n	2c8c <ull_slave_setup+0x1c4>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    2e68:	2300      	movs	r3, #0
    2e6a:	2201      	movs	r2, #1
    2e6c:	9300      	str	r3, [sp, #0]
    2e6e:	4618      	mov	r0, r3
    2e70:	4611      	mov	r1, r2
    2e72:	f00e f87f 	bl	10f74 <ticker_stop>
    2e76:	e783      	b.n	2d80 <ull_slave_setup+0x2b8>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2e78:	f010 fc9e 	bl	137b8 <ull_disable_mark_get>
    2e7c:	4581      	cmp	r9, r0
    2e7e:	f43f af7b 	beq.w	2d78 <ull_slave_setup+0x2b0>
    2e82:	f014 fbd3 	bl	1762c <ticker_op_stop_adv_cb.part.0>
    2e86:	e777      	b.n	2d78 <ull_slave_setup+0x2b0>
    2e88:	1afd498d 	.word	0x1afd498d
    2e8c:	00000007 	.word	0x00000007
    2e90:	01c9c37f 	.word	0x01c9c37f
    2e94:	026259ff 	.word	0x026259ff
    2e98:	3b9aca00 	.word	0x3b9aca00
    2e9c:	00017659 	.word	0x00017659
    2ea0:	1afd498d 	.word	0x1afd498d
    2ea4:	000175fd 	.word	0x000175fd
    2ea8:	00017675 	.word	0x00017675
    2eac:	00025ce4 	.word	0x00025ce4
    2eb0:	00025c14 	.word	0x00025c14
    2eb4:	0002561c 	.word	0x0002561c
    2eb8:	431bde83 	.word	0x431bde83
    2ebc:	00000000 	.word	0x00000000

00002ec0 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
    2ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ec4:	b08f      	sub	sp, #60	; 0x3c
	uint8_t instance_index;
	uint8_t ticker_id;
	int result;
	uint32_t err;

	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    2ec6:	f10d 0137 	add.w	r1, sp, #55	; 0x37
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
    2eca:	4f35      	ldr	r7, [pc, #212]	; (2fa0 <nrf_flash_sync_exe+0xe0>)
{
    2ecc:	900b      	str	r0, [sp, #44]	; 0x2c
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    2ece:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    2ed2:	f010 fc0b 	bl	136ec <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index,
    2ed6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
			   HAL_TICKER_US_TO_TICKS(
    2eda:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 2fb4 <nrf_flash_sync_exe+0xf4>
	err = ticker_start(instance_index,
    2ede:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
    2ee2:	930a      	str	r3, [sp, #40]	; 0x28
    2ee4:	f00e f88c 	bl	11000 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
    2ee8:	683c      	ldr	r4, [r7, #0]
    2eea:	fba4 4509 	umull	r4, r5, r4, r9
    2eee:	a32a      	add	r3, pc, #168	; (adr r3, 2f98 <nrf_flash_sync_exe+0xd8>)
    2ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    2ef4:	4680      	mov	r8, r0
			   HAL_TICKER_US_TO_TICKS(
    2ef6:	4629      	mov	r1, r5
    2ef8:	4620      	mov	r0, r4
    2efa:	f7fd f901 	bl	100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    2efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2f00:	9306      	str	r3, [sp, #24]
			   HAL_TICKER_US_TO_TICKS(
    2f02:	4683      	mov	fp, r0
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    2f04:	6878      	ldr	r0, [r7, #4]
	err = ticker_start(instance_index,
    2f06:	4b27      	ldr	r3, [pc, #156]	; (2fa4 <nrf_flash_sync_exe+0xe4>)
    2f08:	9305      	str	r3, [sp, #20]
    2f0a:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    2f0c:	a322      	add	r3, pc, #136	; (adr r3, 2f98 <nrf_flash_sync_exe+0xd8>)
    2f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f12:	fba0 0109 	umull	r0, r1, r0, r9
	err = ticker_start(instance_index,
    2f16:	e9cd 6607 	strd	r6, r6, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    2f1a:	f7fd f8f1 	bl	100 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    2f1e:	4b22      	ldr	r3, [pc, #136]	; (2fa8 <nrf_flash_sync_exe+0xe8>)
    2f20:	f02b 497f 	bic.w	r9, fp, #4278190080	; 0xff000000
    2f24:	fba9 bc03 	umull	fp, ip, r9, r3
	err = ticker_start(instance_index,
    2f28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    2f2c:	2307      	movs	r3, #7
    2f2e:	fb03 cc09 	mla	ip, r3, r9, ip
	err = ticker_start(instance_index,
    2f32:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    2f36:	ebb4 000b 	subs.w	r0, r4, fp
    2f3a:	eb65 010c 	sbc.w	r1, r5, ip
    2f3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2f42:	2300      	movs	r3, #0
    2f44:	f7fd f8dc 	bl	100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    2f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2f4a:	9600      	str	r6, [sp, #0]
    2f4c:	e9cd 9001 	strd	r9, r0, [sp, #4]
    2f50:	4643      	mov	r3, r8
    2f52:	2103      	movs	r1, #3
    2f54:	4650      	mov	r0, sl
    2f56:	f00d ffa1 	bl	10e9c <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    2f5a:	f030 0402 	bics.w	r4, r0, #2
    2f5e:	d115      	bne.n	2f8c <nrf_flash_sync_exe+0xcc>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2f60:	4a12      	ldr	r2, [pc, #72]	; (2fac <nrf_flash_sync_exe+0xec>)
    2f62:	4813      	ldr	r0, [pc, #76]	; (2fb0 <nrf_flash_sync_exe+0xf0>)
    2f64:	2300      	movs	r3, #0
    2f66:	f01b fbb5 	bl	1e6d4 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    2f6a:	b168      	cbz	r0, 2f88 <nrf_flash_sync_exe+0xc8>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
    2f6c:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    2f70:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    2f74:	9400      	str	r4, [sp, #0]
    2f76:	4623      	mov	r3, r4
    2f78:	2103      	movs	r1, #3
    2f7a:	f00d fffb 	bl	10f74 <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
    2f7e:	f06f 003b 	mvn.w	r0, #59	; 0x3b
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
    2f82:	b00f      	add	sp, #60	; 0x3c
    2f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
    2f88:	68f8      	ldr	r0, [r7, #12]
    2f8a:	e7fa      	b.n	2f82 <nrf_flash_sync_exe+0xc2>
		result = -ECANCELED;
    2f8c:	f06f 0047 	mvn.w	r0, #71	; 0x47
	return result;
    2f90:	e7f7      	b.n	2f82 <nrf_flash_sync_exe+0xc2>
    2f92:	bf00      	nop
    2f94:	f3af 8000 	nop.w
    2f98:	1afd498d 	.word	0x1afd498d
    2f9c:	00000007 	.word	0x00000007
    2fa0:	20003e18 	.word	0x20003e18
    2fa4:	0001bcb9 	.word	0x0001bcb9
    2fa8:	1afd498d 	.word	0x1afd498d
    2fac:	000b7b44 	.word	0x000b7b44
    2fb0:	20003e28 	.word	0x20003e28
    2fb4:	3b9aca00 	.word	0x3b9aca00

00002fb8 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
    2fb8:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    2fba:	4d0f      	ldr	r5, [pc, #60]	; (2ff8 <CONFIG_USB_DEVICE_VID+0x15>)
{
    2fbc:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    2fbe:	f00e f81f 	bl	11000 <ticker_ticks_now_get>
    2fc2:	68a9      	ldr	r1, [r5, #8]
    2fc4:	f00e f81e 	bl	11004 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    2fc8:	490c      	ldr	r1, [pc, #48]	; (2ffc <CONFIG_USB_DEVICE_VID+0x19>)
	if (ticks_diff + ticks_diff/iteration >
    2fca:	fbb0 f4f4 	udiv	r4, r0, r4
    2fce:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    2fd0:	6868      	ldr	r0, [r5, #4]
    2fd2:	a307      	add	r3, pc, #28	; (adr r3, 2ff0 <CONFIG_USB_DEVICE_VID+0xd>)
    2fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
    2fd8:	fba0 0101 	umull	r0, r1, r0, r1
    2fdc:	f7fd f890 	bl	100 <__aeabi_uldivmod>
    2fe0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
    2fe4:	4284      	cmp	r4, r0
    2fe6:	bf94      	ite	ls
    2fe8:	2000      	movls	r0, #0
    2fea:	2001      	movhi	r0, #1
    2fec:	bd38      	pop	{r3, r4, r5, pc}
    2fee:	bf00      	nop
    2ff0:	1afd498d 	.word	0x1afd498d
    2ff4:	00000007 	.word	0x00000007
    2ff8:	20003e18 	.word	0x20003e18
    2ffc:	3b9aca00 	.word	0x3b9aca00

00003000 <cb>:

	printk("Advertising successfully started\n");
}

void cb(struct bt_conn *conn, uint8_t err, struct bt_gatt_write_params *params) {
    printk("Performed write\n");
    3000:	4801      	ldr	r0, [pc, #4]	; (3008 <cb+0x8>)
    3002:	f01c b827 	b.w	1f054 <printk>
    3006:	bf00      	nop
    3008:	0002655c 	.word	0x0002655c

0000300c <disconnected>:
{
    300c:	b510      	push	{r4, lr}
	if (remote->connection) {
    300e:	4c06      	ldr	r4, [pc, #24]	; (3028 <disconnected+0x1c>)
	printk("Disconnected (reason 0x%02x)\n", reason);
    3010:	4806      	ldr	r0, [pc, #24]	; (302c <disconnected+0x20>)
    3012:	f01c f81f 	bl	1f054 <printk>
	if (remote->connection) {
    3016:	6823      	ldr	r3, [r4, #0]
    3018:	6b18      	ldr	r0, [r3, #48]	; 0x30
    301a:	b120      	cbz	r0, 3026 <disconnected+0x1a>
		bt_conn_unref(remote->connection);
    301c:	f01e ff30 	bl	21e80 <bt_conn_unref>
		remote->connection = NULL;
    3020:	6823      	ldr	r3, [r4, #0]
    3022:	2200      	movs	r2, #0
    3024:	631a      	str	r2, [r3, #48]	; 0x30
}
    3026:	bd10      	pop	{r4, pc}
    3028:	20001584 	.word	0x20001584
    302c:	0002656d 	.word	0x0002656d

00003030 <discover_temperature>:
                                 struct bt_gatt_discover_params *params) {
    3030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3032:	4607      	mov	r7, r0
    3034:	4615      	mov	r5, r2
	if (!attr) {
    3036:	460c      	mov	r4, r1
    3038:	b949      	cbnz	r1, 304e <discover_temperature+0x1e>
		printk("Discover complete\n");
    303a:	481e      	ldr	r0, [pc, #120]	; (30b4 <discover_temperature+0x84>)
    303c:	f01c f80a 	bl	1f054 <printk>
		(void)memset(params, 0, sizeof(*params));
    3040:	2214      	movs	r2, #20
    3042:	4621      	mov	r1, r4
    3044:	4628      	mov	r0, r5
    3046:	f01e fb59 	bl	216fc <memset>
}
    304a:	2000      	movs	r0, #0
    304c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_uuid_cmp(discover_params.uuid, remote->service)) {
    304e:	4e1a      	ldr	r6, [pc, #104]	; (30b8 <discover_temperature+0x88>)
	printk("[ATTRIBUTE] handle %u\n", attr->handle);
    3050:	8a09      	ldrh	r1, [r1, #16]
    3052:	481a      	ldr	r0, [pc, #104]	; (30bc <discover_temperature+0x8c>)
	if (!bt_uuid_cmp(discover_params.uuid, remote->service)) {
    3054:	4d1a      	ldr	r5, [pc, #104]	; (30c0 <discover_temperature+0x90>)
	printk("[ATTRIBUTE] handle %u\n", attr->handle);
    3056:	f01b fffd 	bl	1f054 <printk>
	if (!bt_uuid_cmp(discover_params.uuid, remote->service)) {
    305a:	6833      	ldr	r3, [r6, #0]
    305c:	6828      	ldr	r0, [r5, #0]
    305e:	6859      	ldr	r1, [r3, #4]
    3060:	f01e fbfd 	bl	2185e <bt_uuid_cmp>
		discover_params.uuid         = remote->characteristic;
    3064:	6833      	ldr	r3, [r6, #0]
	if (!bt_uuid_cmp(discover_params.uuid, remote->service)) {
    3066:	b988      	cbnz	r0, 308c <discover_temperature+0x5c>
		discover_params.uuid         = remote->characteristic;
    3068:	689b      	ldr	r3, [r3, #8]
    306a:	602b      	str	r3, [r5, #0]
		discover_params.start_handle = attr->handle + 1;
    306c:	8a23      	ldrh	r3, [r4, #16]
    306e:	3301      	adds	r3, #1
    3070:	812b      	strh	r3, [r5, #8]
		err = bt_gatt_discover(conn, &discover_params);
    3072:	4629      	mov	r1, r5
		discover_params.type         = BT_GATT_DISCOVER_CHARACTERISTIC;
    3074:	2303      	movs	r3, #3
		err = bt_gatt_discover(conn, &discover_params);
    3076:	4638      	mov	r0, r7
		discover_params.type         = BT_GATT_DISCOVER_CHARACTERISTIC;
    3078:	742b      	strb	r3, [r5, #16]
		err = bt_gatt_discover(conn, &discover_params);
    307a:	f00a fa97 	bl	d5ac <bt_gatt_discover>
		if (err) {
    307e:	4601      	mov	r1, r0
    3080:	2800      	cmp	r0, #0
    3082:	d0e2      	beq.n	304a <discover_temperature+0x1a>
			printk("Discover failed (err %d)\n", err);
    3084:	480f      	ldr	r0, [pc, #60]	; (30c4 <discover_temperature+0x94>)
    3086:	f01b ffe5 	bl	1f054 <printk>
    308a:	e7de      	b.n	304a <discover_temperature+0x1a>
	} else if (!bt_uuid_cmp(discover_params.uuid, remote->characteristic)) {
    308c:	6899      	ldr	r1, [r3, #8]
    308e:	6828      	ldr	r0, [r5, #0]
    3090:	f01e fbe5 	bl	2185e <bt_uuid_cmp>
    3094:	2800      	cmp	r0, #0
    3096:	d1d8      	bne.n	304a <discover_temperature+0x1a>
		set_handle(bt_gatt_attr_value_handle(attr), remote);
    3098:	4620      	mov	r0, r4
    309a:	f01f fe36 	bl	22d0a <bt_gatt_attr_value_handle>
    309e:	6831      	ldr	r1, [r6, #0]
    30a0:	f01b ff7e 	bl	1efa0 <set_handle>
		discovered = 1;
    30a4:	4b08      	ldr	r3, [pc, #32]	; (30c8 <discover_temperature+0x98>)
		printk("Found characteristic handle\n");
    30a6:	4809      	ldr	r0, [pc, #36]	; (30cc <discover_temperature+0x9c>)
		discovered = 1;
    30a8:	2201      	movs	r2, #1
    30aa:	701a      	strb	r2, [r3, #0]
		printk("Found characteristic handle\n");
    30ac:	f01b ffd2 	bl	1f054 <printk>
    30b0:	e7cb      	b.n	304a <discover_temperature+0x1a>
    30b2:	bf00      	nop
    30b4:	0002658b 	.word	0x0002658b
    30b8:	20001584 	.word	0x20001584
    30bc:	0002659e 	.word	0x0002659e
    30c0:	20001570 	.word	0x20001570
    30c4:	000265b5 	.word	0x000265b5
    30c8:	200042b2 	.word	0x200042b2
    30cc:	000265cf 	.word	0x000265cf

000030d0 <connected>:
{
    30d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30d2:	b093      	sub	sp, #76	; 0x4c
    30d4:	4607      	mov	r7, r0
    30d6:	460e      	mov	r6, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    30d8:	f01e ff0b 	bl	21ef2 <bt_conn_get_dst>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    30dc:	7803      	ldrb	r3, [r0, #0]
    30de:	4604      	mov	r4, r0
    30e0:	ad07      	add	r5, sp, #28
    30e2:	2b03      	cmp	r3, #3
    30e4:	d825      	bhi.n	3132 <connected+0x62>
    30e6:	e8df f003 	tbb	[pc, r3]
    30ea:	1e02      	.short	0x1e02
    30ec:	2220      	.short	0x2220
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    30ee:	492a      	ldr	r1, [pc, #168]	; (3198 <connected+0xc8>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    30f0:	4628      	mov	r0, r5
    30f2:	f01e fa98 	bl	21626 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    30f6:	79a3      	ldrb	r3, [r4, #6]
    30f8:	9505      	str	r5, [sp, #20]
    30fa:	7862      	ldrb	r2, [r4, #1]
    30fc:	9204      	str	r2, [sp, #16]
    30fe:	78a2      	ldrb	r2, [r4, #2]
    3100:	9203      	str	r2, [sp, #12]
    3102:	78e2      	ldrb	r2, [r4, #3]
    3104:	9202      	str	r2, [sp, #8]
    3106:	7922      	ldrb	r2, [r4, #4]
    3108:	9201      	str	r2, [sp, #4]
    310a:	7962      	ldrb	r2, [r4, #5]
    310c:	9200      	str	r2, [sp, #0]
    310e:	211e      	movs	r1, #30
    3110:	4a22      	ldr	r2, [pc, #136]	; (319c <connected+0xcc>)
    3112:	a80a      	add	r0, sp, #40	; 0x28
    3114:	f01b ffab 	bl	1f06e <snprintk>
	if (conn_err) {
    3118:	b18e      	cbz	r6, 313e <connected+0x6e>
		printk("Connection failed (err 0x%02x)\n", conn_err);
    311a:	4821      	ldr	r0, [pc, #132]	; (31a0 <connected+0xd0>)
    311c:	4631      	mov	r1, r6
			printk("Discover failed(err %u)\n", disc_err);
    311e:	f01b ff99 	bl	1f054 <printk>
}
    3122:	b013      	add	sp, #76	; 0x4c
    3124:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    3126:	491f      	ldr	r1, [pc, #124]	; (31a4 <connected+0xd4>)
    3128:	e7e2      	b.n	30f0 <connected+0x20>
		strcpy(type, "public-id");
    312a:	491f      	ldr	r1, [pc, #124]	; (31a8 <connected+0xd8>)
    312c:	e7e0      	b.n	30f0 <connected+0x20>
		strcpy(type, "random-id");
    312e:	491f      	ldr	r1, [pc, #124]	; (31ac <connected+0xdc>)
    3130:	e7de      	b.n	30f0 <connected+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    3132:	4a1f      	ldr	r2, [pc, #124]	; (31b0 <connected+0xe0>)
    3134:	210a      	movs	r1, #10
    3136:	4628      	mov	r0, r5
    3138:	f01b ff99 	bl	1f06e <snprintk>
		break;
    313c:	e7db      	b.n	30f6 <connected+0x26>
		set_connection(conn, remote);
    313e:	4c1d      	ldr	r4, [pc, #116]	; (31b4 <connected+0xe4>)
		printk("Connected %s\n", addr);
    3140:	481d      	ldr	r0, [pc, #116]	; (31b8 <connected+0xe8>)
    3142:	a90a      	add	r1, sp, #40	; 0x28
    3144:	f01b ff86 	bl	1f054 <printk>
		set_connection(conn, remote);
    3148:	6821      	ldr	r1, [r4, #0]
    314a:	4638      	mov	r0, r7
    314c:	f01b ff3a 	bl	1efc4 <set_connection>
		set_addr(*bt_conn_get_dst(conn), remote);
    3150:	4638      	mov	r0, r7
    3152:	f01e fece 	bl	21ef2 <bt_conn_get_dst>
    3156:	7943      	ldrb	r3, [r0, #5]
    3158:	7901      	ldrb	r1, [r0, #4]
    315a:	6822      	ldr	r2, [r4, #0]
    315c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    3160:	7983      	ldrb	r3, [r0, #6]
    3162:	6800      	ldr	r0, [r0, #0]
    3164:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    3168:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    316c:	f01b ff1d 	bl	1efaa <set_addr>
		discover_params.uuid         = remote->service;
    3170:	6823      	ldr	r3, [r4, #0]
    3172:	4912      	ldr	r1, [pc, #72]	; (31bc <connected+0xec>)
    3174:	685a      	ldr	r2, [r3, #4]
    3176:	600a      	str	r2, [r1, #0]
		discover_params.func         = discover_temperature;
    3178:	4a11      	ldr	r2, [pc, #68]	; (31c0 <connected+0xf0>)
    317a:	604a      	str	r2, [r1, #4]
		discover_params.start_handle = 0x0001;
    317c:	2201      	movs	r2, #1
    317e:	810a      	strh	r2, [r1, #8]
		uint8_t disc_err = bt_gatt_discover(remote->connection, &discover_params);
    3180:	6b18      	ldr	r0, [r3, #48]	; 0x30
		discover_params.type         = BT_GATT_DISCOVER_PRIMARY;
    3182:	740e      	strb	r6, [r1, #16]
		discover_params.end_handle   = 0xffff;
    3184:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3188:	81ca      	strh	r2, [r1, #14]
		uint8_t disc_err = bt_gatt_discover(remote->connection, &discover_params);
    318a:	f00a fa0f 	bl	d5ac <bt_gatt_discover>
		if(disc_err) {
    318e:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    3192:	d0c6      	beq.n	3122 <connected+0x52>
			printk("Discover failed(err %u)\n", disc_err);
    3194:	480b      	ldr	r0, [pc, #44]	; (31c4 <connected+0xf4>)
    3196:	e7c2      	b.n	311e <connected+0x4e>
    3198:	000265ec 	.word	0x000265ec
    319c:	0002660e 	.word	0x0002660e
    31a0:	00026631 	.word	0x00026631
    31a4:	000265f3 	.word	0x000265f3
    31a8:	000265fa 	.word	0x000265fa
    31ac:	00026604 	.word	0x00026604
    31b0:	00026df0 	.word	0x00026df0
    31b4:	20001584 	.word	0x20001584
    31b8:	00026651 	.word	0x00026651
    31bc:	20001570 	.word	0x20001570
    31c0:	00003031 	.word	0x00003031
    31c4:	0002665f 	.word	0x0002665f

000031c8 <main>:
uint8_t device[]         = {0xaa, 0xff};
uint8_t service[]        = {0xa1, 0xff};
uint8_t characteristic[] = {0xa2, 0xff};

void main(void)
{
    31c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    31cc:	b089      	sub	sp, #36	; 0x24
  int err;


  start_usb_cdc_thread();
    31ce:	f000 f9a5 	bl	351c <start_usb_cdc_thread>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    31d2:	483e      	ldr	r0, [pc, #248]	; (32cc <main+0x104>)
    31d4:	f01a fbb2 	bl	1d93c <z_impl_device_get_binding>
    31d8:	4607      	mov	r7, r0
    31da:	483c      	ldr	r0, [pc, #240]	; (32cc <main+0x104>)
    31dc:	f01a fbae 	bl	1d93c <z_impl_device_get_binding>
  const struct device *d_led0;
  const struct device *d_led1;

  d_led0 = device_get_binding(LED_DEVICE_LABEL(led0));
  d_led1 = device_get_binding(LED_DEVICE_LABEL(led1));
  gpio_pin_configure(d_led0, LED_PIN(led0), GPIO_OUTPUT_ACTIVE | LED_FLAGS(led0));
    31e0:	210d      	movs	r1, #13
    31e2:	4681      	mov	r9, r0
    31e4:	4638      	mov	r0, r7
    31e6:	f01b fea4 	bl	1ef32 <gpio_pin_configure.constprop.0>
  gpio_pin_configure(d_led1, LED_PIN(led1), GPIO_OUTPUT_ACTIVE | LED_FLAGS(led1));
    31ea:	210e      	movs	r1, #14
    31ec:	4648      	mov	r0, r9
    31ee:	f01b fea0 	bl	1ef32 <gpio_pin_configure.constprop.0>
  /* Implement notification. At the moment there is no suitable way
   * of starting delayed work so we do it here
   */
  char* data = "server";

  err = bt_enable(NULL);
    31f2:	2000      	movs	r0, #0
    31f4:	f006 ffce 	bl	a194 <bt_enable>
  if (err) {
    31f8:	4680      	mov	r8, r0
    31fa:	2800      	cmp	r0, #0
    31fc:	d162      	bne.n	32c4 <main+0xfc>
    //printk("Bluetooth init failed (err %d)\n", err);
    return;
  }

  remote = new_remote_device(device, service, characteristic);
    31fe:	4a34      	ldr	r2, [pc, #208]	; (32d0 <main+0x108>)
    3200:	4934      	ldr	r1, [pc, #208]	; (32d4 <main+0x10c>)
    3202:	4835      	ldr	r0, [pc, #212]	; (32d8 <main+0x110>)
    3204:	4e35      	ldr	r6, [pc, #212]	; (32dc <main+0x114>)
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    3206:	4d36      	ldr	r5, [pc, #216]	; (32e0 <main+0x118>)
  remote = new_remote_device(device, service, characteristic);
    3208:	f01b fea3 	bl	1ef52 <new_remote_device>
    320c:	6030      	str	r0, [r6, #0]
  set_message_payload(data, strlen(data) + 1, remote);
    320e:	4835      	ldr	r0, [pc, #212]	; (32e4 <main+0x11c>)
    3210:	f01e fa26 	bl	21660 <strlen>
    3214:	1c41      	adds	r1, r0, #1
    3216:	b289      	uxth	r1, r1
    3218:	6832      	ldr	r2, [r6, #0]
    321a:	4832      	ldr	r0, [pc, #200]	; (32e4 <main+0x11c>)
    321c:	f01b fec2 	bl	1efa4 <set_message_payload>
  remote->handle.func = cb;
    3220:	6833      	ldr	r3, [r6, #0]
    3222:	4a31      	ldr	r2, [pc, #196]	; (32e8 <main+0x120>)
	printk("Bluetooth initialized\n");
    3224:	4831      	ldr	r0, [pc, #196]	; (32ec <main+0x124>)
  remote->handle.func = cb;
    3226:	60da      	str	r2, [r3, #12]
	printk("Bluetooth initialized\n");
    3228:	f01b ff14 	bl	1f054 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    322c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    322e:	ac03      	add	r4, sp, #12
    3230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3232:	682b      	ldr	r3, [r5, #0]
    3234:	6023      	str	r3, [r4, #0]
    3236:	492e      	ldr	r1, [pc, #184]	; (32f0 <main+0x128>)
    3238:	f8cd 8000 	str.w	r8, [sp]
    323c:	4643      	mov	r3, r8
    323e:	2202      	movs	r2, #2
    3240:	a803      	add	r0, sp, #12
    3242:	f007 f955 	bl	a4f0 <bt_le_adv_start>
	if (err) {
    3246:	4601      	mov	r1, r0
    3248:	b340      	cbz	r0, 329c <main+0xd4>
		printk("Advertising failed to start (err %d)\n", err);
    324a:	482a      	ldr	r0, [pc, #168]	; (32f4 <main+0x12c>)
    324c:	f01b ff02 	bl	1f054 <printk>

  bt_ready();

  bt_conn_cb_register(&conn_callbacks);
    3250:	4829      	ldr	r0, [pc, #164]	; (32f8 <main+0x130>)

  int led0_state = 1;
  while(!discovered) {
    3252:	4d2a      	ldr	r5, [pc, #168]	; (32fc <main+0x134>)
    gpio_pin_set(d_led0, LED_PIN(led0), led0_state);
    k_sleep(K_SECONDS(1));
    usb_printf("have not discovered yet\r\n");
    3254:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 3308 <main+0x140>
  bt_conn_cb_register(&conn_callbacks);
    3258:	f007 fca0 	bl	ab9c <bt_conn_cb_register>
  int led0_state = 1;
    325c:	2401      	movs	r4, #1
  while(!discovered) {
    325e:	782b      	ldrb	r3, [r5, #0]
    3260:	b303      	cbz	r3, 32a4 <main+0xdc>

    led0_state = 1 - led0_state;
  }
  gpio_pin_set(d_led0, LED_PIN(led0), 0);
    3262:	2200      	movs	r2, #0
    3264:	210d      	movs	r1, #13
    3266:	4638      	mov	r0, r7
    3268:	f01b fe52 	bl	1ef10 <gpio_pin_set>

    gpio_pin_set(d_led1, LED_PIN(led1), led1_state);
    
    k_sleep(K_SECONDS(1));

    usb_printf("Hello world\r\n");
    326c:	4d24      	ldr	r5, [pc, #144]	; (3300 <main+0x138>)
  int led1_state = 1; 
    326e:	2401      	movs	r4, #1
    gpio_pin_set(d_led1, LED_PIN(led1), led1_state);
    3270:	4622      	mov	r2, r4
    3272:	210e      	movs	r1, #14
    3274:	4648      	mov	r0, r9
    3276:	f01b fe4b 	bl	1ef10 <gpio_pin_set>
	return z_impl_k_sleep(timeout);
    327a:	2100      	movs	r1, #0
    327c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3280:	f01b f9da 	bl	1e638 <z_impl_k_sleep>
    usb_printf("Hello world\r\n");
    3284:	4628      	mov	r0, r5
    3286:	f000 f90b 	bl	34a0 <usb_printf>

    int err = bt_gatt_write(remote->connection, &remote->handle);
    328a:	6833      	ldr	r3, [r6, #0]
    328c:	6b18      	ldr	r0, [r3, #48]	; 0x30
    328e:	f103 010c 	add.w	r1, r3, #12
    3292:	f00a fd25 	bl	dce0 <bt_gatt_write>
      //printk("error while writing (err %d)\n", err);
    } else {
      //printk("seems to have worked (err %d)\n", err);
    }

    led1_state = 1 - led1_state;
    3296:	f1c4 0401 	rsb	r4, r4, #1
  while(1) {
    329a:	e7e9      	b.n	3270 <main+0xa8>
	printk("Advertising successfully started\n");
    329c:	4819      	ldr	r0, [pc, #100]	; (3304 <main+0x13c>)
    329e:	f01b fed9 	bl	1f054 <printk>
    32a2:	e7d5      	b.n	3250 <main+0x88>
    gpio_pin_set(d_led0, LED_PIN(led0), led0_state);
    32a4:	4622      	mov	r2, r4
    32a6:	210d      	movs	r1, #13
    32a8:	4638      	mov	r0, r7
    32aa:	f01b fe31 	bl	1ef10 <gpio_pin_set>
    32ae:	2100      	movs	r1, #0
    32b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    32b4:	f01b f9c0 	bl	1e638 <z_impl_k_sleep>
    usb_printf("have not discovered yet\r\n");
    32b8:	4640      	mov	r0, r8
    32ba:	f000 f8f1 	bl	34a0 <usb_printf>
    led0_state = 1 - led0_state;
    32be:	f1c4 0401 	rsb	r4, r4, #1
    32c2:	e7cc      	b.n	325e <main+0x96>
    
  }
}
    32c4:	b009      	add	sp, #36	; 0x24
    32c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    32ca:	bf00      	nop
    32cc:	00026678 	.word	0x00026678
    32d0:	20000723 	.word	0x20000723
    32d4:	20000727 	.word	0x20000727
    32d8:	20000725 	.word	0x20000725
    32dc:	20001584 	.word	0x20001584
    32e0:	00024db0 	.word	0x00024db0
    32e4:	0002667f 	.word	0x0002667f
    32e8:	00003001 	.word	0x00003001
    32ec:	00026686 	.word	0x00026686
    32f0:	00024ea8 	.word	0x00024ea8
    32f4:	0002669d 	.word	0x0002669d
    32f8:	20000130 	.word	0x20000130
    32fc:	200042b2 	.word	0x200042b2
    3300:	000266ff 	.word	0x000266ff
    3304:	000266c3 	.word	0x000266c3
    3308:	000266e5 	.word	0x000266e5

0000330c <interrupt_handler>:
static const struct device *usb_dev;

static volatile bool usb_cdc_enabled = false; 

static void interrupt_handler(const struct device *dev, void *user_data)
{
    330c:	b530      	push	{r4, r5, lr}
 *
 * @return Ring buffer free space (in 32-bit words or bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->tail - buf->head);
    330e:	4d25      	ldr	r5, [pc, #148]	; (33a4 <interrupt_handler+0x98>)
    3310:	b091      	sub	sp, #68	; 0x44
    3312:	4604      	mov	r4, r0
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
    3314:	68a3      	ldr	r3, [r4, #8]
    3316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3318:	b143      	cbz	r3, 332c <interrupt_handler+0x20>
		return api->irq_update(dev);
    331a:	4620      	mov	r0, r4
    331c:	4798      	blx	r3
  (void)user_data;
  
  while (uart_irq_update(dev) && uart_irq_is_pending(dev)) {
    331e:	b128      	cbz	r0, 332c <interrupt_handler+0x20>
	if (api->irq_is_pending)	{
    3320:	68a3      	ldr	r3, [r4, #8]
    3322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3324:	b113      	cbz	r3, 332c <interrupt_handler+0x20>
		return api->irq_is_pending(dev);
    3326:	4620      	mov	r0, r4
    3328:	4798      	blx	r3
    332a:	b908      	cbnz	r0, 3330 <interrupt_handler+0x24>
      if (send_len < rb_len) {
	//LOG_ERR("Drop %d bytes", rb_len - send_len);
      }
    }
  }
}
    332c:	b011      	add	sp, #68	; 0x44
    332e:	bd30      	pop	{r4, r5, pc}
	if (api->irq_rx_ready) {
    3330:	68a3      	ldr	r3, [r4, #8]
    3332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3334:	b1ab      	cbz	r3, 3362 <interrupt_handler+0x56>
		return api->irq_rx_ready(dev);
    3336:	4620      	mov	r0, r4
    3338:	4798      	blx	r3
    if (uart_irq_rx_ready(dev)) {
    333a:	b190      	cbz	r0, 3362 <interrupt_handler+0x56>
    333c:	682b      	ldr	r3, [r5, #0]
    333e:	692a      	ldr	r2, [r5, #16]
    3340:	441a      	add	r2, r3
    3342:	686b      	ldr	r3, [r5, #4]
    3344:	1ad2      	subs	r2, r2, r3
	if (api->fifo_read) {
    3346:	68a3      	ldr	r3, [r4, #8]
    3348:	699b      	ldr	r3, [r3, #24]
      size_t len = MIN(ring_buf_space_get(&in_ringbuf),
    334a:	2a40      	cmp	r2, #64	; 0x40
    334c:	bf28      	it	cs
    334e:	2240      	movcs	r2, #64	; 0x40
    3350:	b1eb      	cbz	r3, 338e <interrupt_handler+0x82>
		return api->fifo_read(dev, rx_data, size);
    3352:	4669      	mov	r1, sp
    3354:	4620      	mov	r0, r4
    3356:	4798      	blx	r3
    3358:	4602      	mov	r2, r0
      rb_len = ring_buf_put(&in_ringbuf, buffer, recv_len);
    335a:	4669      	mov	r1, sp
    335c:	4628      	mov	r0, r5
    335e:	f01c fa7a 	bl	1f856 <ring_buf_put>
	if (api->irq_tx_ready) {
    3362:	68a3      	ldr	r3, [r4, #8]
    3364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3366:	2b00      	cmp	r3, #0
    3368:	d0d4      	beq.n	3314 <interrupt_handler+0x8>
		return api->irq_tx_ready(dev);
    336a:	4620      	mov	r0, r4
    336c:	4798      	blx	r3
    if (uart_irq_tx_ready(dev)) {
    336e:	2800      	cmp	r0, #0
    3370:	d0d0      	beq.n	3314 <interrupt_handler+0x8>
      rb_len = ring_buf_get(&out_ringbuf, buffer, sizeof(buffer));
    3372:	2240      	movs	r2, #64	; 0x40
    3374:	480c      	ldr	r0, [pc, #48]	; (33a8 <interrupt_handler+0x9c>)
    3376:	4669      	mov	r1, sp
    3378:	f01c fad7 	bl	1f92a <ring_buf_get>
      if (!rb_len) {
    337c:	4602      	mov	r2, r0
    337e:	b940      	cbnz	r0, 3392 <interrupt_handler+0x86>
	if (api->irq_tx_disable) {
    3380:	68a3      	ldr	r3, [r4, #8]
    3382:	6a1b      	ldr	r3, [r3, #32]
    3384:	2b00      	cmp	r3, #0
    3386:	d0c5      	beq.n	3314 <interrupt_handler+0x8>
		api->irq_tx_disable(dev);
    3388:	4620      	mov	r0, r4
    338a:	4798      	blx	r3
    338c:	e7c2      	b.n	3314 <interrupt_handler+0x8>
	return 0;
    338e:	461a      	mov	r2, r3
    3390:	e7e3      	b.n	335a <interrupt_handler+0x4e>
	if (api->fifo_fill) {
    3392:	68a3      	ldr	r3, [r4, #8]
    3394:	695b      	ldr	r3, [r3, #20]
    3396:	2b00      	cmp	r3, #0
    3398:	d0bc      	beq.n	3314 <interrupt_handler+0x8>
		return api->fifo_fill(dev, tx_data, size);
    339a:	4669      	mov	r1, sp
    339c:	4620      	mov	r0, r4
    339e:	4798      	blx	r3
    33a0:	e7b8      	b.n	3314 <interrupt_handler+0x8>
    33a2:	bf00      	nop
    33a4:	20001588 	.word	0x20001588
    33a8:	200015a4 	.word	0x200015a4

000033ac <usb_cdc_thread_main>:
  }
}



void usb_cdc_thread_main(void * a, void* b, void *c) {
    33ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  (void)a;
  (void)b;
  (void)c;


    uint32_t baudrate, dtr = 0U;
    33b0:	2500      	movs	r5, #0
    33b2:	9500      	str	r5, [sp, #0]
    33b4:	4831      	ldr	r0, [pc, #196]	; (347c <usb_cdc_thread_main+0xd0>)
  int ret;

  usb_dev = device_get_binding("CDC_ACM_0");
    33b6:	4c32      	ldr	r4, [pc, #200]	; (3480 <usb_cdc_thread_main+0xd4>)
    33b8:	f01a fac0 	bl	1d93c <z_impl_device_get_binding>
    33bc:	6020      	str	r0, [r4, #0]
  if (!usb_dev) {
    33be:	2800      	cmp	r0, #0
    33c0:	d058      	beq.n	3474 <usb_cdc_thread_main+0xc8>
    return;
  }

  ret = usb_enable(NULL);
    33c2:	4628      	mov	r0, r5
    33c4:	f001 ff10 	bl	51e8 <usb_enable>
  if (ret != 0) {
    33c8:	4605      	mov	r5, r0
    33ca:	2800      	cmp	r0, #0
    33cc:	d152      	bne.n	3474 <usb_cdc_thread_main+0xc8>
	memset(buf, 0, sizeof(struct ring_buf));
    33ce:	4e2d      	ldr	r6, [pc, #180]	; (3484 <usb_cdc_thread_main+0xd8>)
    33d0:	4601      	mov	r1, r0
    33d2:	221c      	movs	r2, #28
    33d4:	4630      	mov	r0, r6
    33d6:	f01e f991 	bl	216fc <memset>
	buf->size = size;
    33da:	f44f 6880 	mov.w	r8, #1024	; 0x400
	buf->buf.buf32 = (uint32_t *)data;
    33de:	4b2a      	ldr	r3, [pc, #168]	; (3488 <usb_cdc_thread_main+0xdc>)
    33e0:	6173      	str	r3, [r6, #20]
		buf->mask = size - 1U;
    33e2:	f240 37ff 	movw	r7, #1023	; 0x3ff
	buf->size = size;
    33e6:	f8c6 8010 	str.w	r8, [r6, #16]
		buf->mask = size - 1U;
    33ea:	61b7      	str	r7, [r6, #24]
	memset(buf, 0, sizeof(struct ring_buf));
    33ec:	4e27      	ldr	r6, [pc, #156]	; (348c <usb_cdc_thread_main+0xe0>)
    33ee:	221c      	movs	r2, #28
    33f0:	4629      	mov	r1, r5
    33f2:	4630      	mov	r0, r6
    33f4:	f01e f982 	bl	216fc <memset>
	buf->buf.buf32 = (uint32_t *)data;
    33f8:	4b25      	ldr	r3, [pc, #148]	; (3490 <usb_cdc_thread_main+0xe4>)
	buf->size = size;
    33fa:	f8c6 8010 	str.w	r8, [r6, #16]
		buf->mask = size - 1U;
    33fe:	e9c6 3705 	strd	r3, r7, [r6, #20]

  ring_buf_init(&in_ringbuf, sizeof(in_ring_buffer), in_ring_buffer);
  ring_buf_init(&out_ringbuf, sizeof(out_ring_buffer), out_ring_buffer);
  
  while (true) {
    uart_line_ctrl_get(usb_dev, UART_LINE_CTRL_DTR, &dtr);
    3402:	6820      	ldr	r0, [r4, #0]

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
    3404:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if (api && api->line_ctrl_get) {
    3406:	b123      	cbz	r3, 3412 <usb_cdc_thread_main+0x66>
    3408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    340a:	b113      	cbz	r3, 3412 <usb_cdc_thread_main+0x66>
		return api->line_ctrl_get(dev, ctrl, val);
    340c:	466a      	mov	r2, sp
    340e:	2104      	movs	r1, #4
    3410:	4798      	blx	r3
    if (dtr) {
    3412:	9b00      	ldr	r3, [sp, #0]
    3414:	b92b      	cbnz	r3, 3422 <usb_cdc_thread_main+0x76>
    3416:	2100      	movs	r1, #0
    3418:	f640 40cd 	movw	r0, #3277	; 0xccd
    341c:	f01b f90c 	bl	1e638 <z_impl_k_sleep>
    uart_line_ctrl_get(usb_dev, UART_LINE_CTRL_DTR, &dtr);
    3420:	e7ef      	b.n	3402 <usb_cdc_thread_main+0x56>
    } else {
      k_sleep(K_MSEC(100));
    }
  }
  
  ret = uart_line_ctrl_set(usb_dev, UART_LINE_CTRL_DCD, 1); 
    3422:	6820      	ldr	r0, [r4, #0]
	if (api->line_ctrl_set) {
    3424:	6883      	ldr	r3, [r0, #8]
    3426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    3428:	b113      	cbz	r3, 3430 <usb_cdc_thread_main+0x84>
		return api->line_ctrl_set(dev, ctrl, val);
    342a:	2201      	movs	r2, #1
    342c:	2108      	movs	r1, #8
    342e:	4798      	blx	r3
  if (ret) { 
    //LOG_WRN("Failed to set DCD, ret code %d", ret); 
  } 
  ret = uart_line_ctrl_set(usb_dev, UART_LINE_CTRL_DSR, 1);
    3430:	6820      	ldr	r0, [r4, #0]
	if (api->line_ctrl_set) {
    3432:	6883      	ldr	r3, [r0, #8]
    3434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    3436:	b113      	cbz	r3, 343e <usb_cdc_thread_main+0x92>
		return api->line_ctrl_set(dev, ctrl, val);
    3438:	2201      	movs	r2, #1
    343a:	2110      	movs	r1, #16
    343c:	4798      	blx	r3
	z_impl_k_busy_wait(usec_to_wait);
    343e:	4815      	ldr	r0, [pc, #84]	; (3494 <usb_cdc_thread_main+0xe8>)
    3440:	f021 f820 	bl	24484 <z_impl_k_busy_wait>
    //LOG_WRN("Failed to set DSR, ret code %d", ret);
  }

  k_busy_wait(1000000);
  
  ret = uart_line_ctrl_get(usb_dev, UART_LINE_CTRL_BAUD_RATE, &baudrate);
    3444:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
    3446:	6883      	ldr	r3, [r0, #8]
	if (api && api->line_ctrl_get) {
    3448:	b123      	cbz	r3, 3454 <usb_cdc_thread_main+0xa8>
    344a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    344c:	b113      	cbz	r3, 3454 <usb_cdc_thread_main+0xa8>
		return api->line_ctrl_get(dev, ctrl, val);
    344e:	aa01      	add	r2, sp, #4
    3450:	2101      	movs	r1, #1
    3452:	4798      	blx	r3
  if (ret) {
  } else {
  }

  uart_irq_callback_set(usb_dev, interrupt_handler);
    3454:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
    3456:	6883      	ldr	r3, [r0, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    3458:	b123      	cbz	r3, 3464 <usb_cdc_thread_main+0xb8>
    345a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    345c:	b113      	cbz	r3, 3464 <usb_cdc_thread_main+0xb8>
		api->irq_callback_set(dev, cb, user_data);
    345e:	490e      	ldr	r1, [pc, #56]	; (3498 <usb_cdc_thread_main+0xec>)
    3460:	2200      	movs	r2, #0
    3462:	4798      	blx	r3

  /* Enable rx interrupts */
  uart_irq_rx_enable(usb_dev);
    3464:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable) {
    3466:	6883      	ldr	r3, [r0, #8]
    3468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    346a:	b103      	cbz	r3, 346e <usb_cdc_thread_main+0xc2>
		api->irq_rx_enable(dev);
    346c:	4798      	blx	r3

  usb_cdc_enabled = true;
    346e:	4b0b      	ldr	r3, [pc, #44]	; (349c <usb_cdc_thread_main+0xf0>)
    3470:	2201      	movs	r2, #1
    3472:	701a      	strb	r2, [r3, #0]
  
}
    3474:	b002      	add	sp, #8
    3476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    347a:	bf00      	nop
    347c:	0002670d 	.word	0x0002670d
    3480:	200015c0 	.word	0x200015c0
    3484:	20001588 	.word	0x20001588
    3488:	200042b3 	.word	0x200042b3
    348c:	200015a4 	.word	0x200015a4
    3490:	200046b3 	.word	0x200046b3
    3494:	000f4240 	.word	0x000f4240
    3498:	0000330d 	.word	0x0000330d
    349c:	20005ab3 	.word	0x20005ab3

000034a0 <usb_printf>:
void usb_printf(char *format, ...) {
    34a0:	b40f      	push	{r0, r1, r2, r3}
  if (!usb_cdc_enabled) return;
    34a2:	4b1a      	ldr	r3, [pc, #104]	; (350c <usb_printf+0x6c>)
    34a4:	781b      	ldrb	r3, [r3, #0]
void usb_printf(char *format, ...) {
    34a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if (!usb_cdc_enabled) return;
    34aa:	b183      	cbz	r3, 34ce <usb_printf+0x2e>
  va_start(arg, format);
    34ac:	ab0b      	add	r3, sp, #44	; 0x2c
  len = vsnprintf(print_buffer, 4096,format, arg);
    34ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    34b0:	4817      	ldr	r0, [pc, #92]	; (3510 <usb_printf+0x70>)
  va_start(arg, format);
    34b2:	9301      	str	r3, [sp, #4]
  len = vsnprintf(print_buffer, 4096,format, arg);
    34b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    34b8:	f004 fde6 	bl	8088 <vsnprintf>
      ring_buf_put(&out_ringbuf,
    34bc:	4e14      	ldr	r6, [pc, #80]	; (3510 <usb_printf+0x70>)
    34be:	4f15      	ldr	r7, [pc, #84]	; (3514 <usb_printf+0x74>)
    uart_irq_tx_enable(usb_dev);
    34c0:	f8df 8054 	ldr.w	r8, [pc, #84]	; 3518 <usb_printf+0x78>
  len = vsnprintf(print_buffer, 4096,format, arg);
    34c4:	4605      	mov	r5, r0
  int num_written = 0;
    34c6:	2400      	movs	r4, #0
  while (len - num_written > 0) {
    34c8:	1b2a      	subs	r2, r5, r4
    34ca:	2a00      	cmp	r2, #0
    34cc:	dc04      	bgt.n	34d8 <usb_printf+0x38>
}
    34ce:	b003      	add	sp, #12
    34d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    34d4:	b004      	add	sp, #16
    34d6:	4770      	bx	lr
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    34d8:	f04f 0320 	mov.w	r3, #32
    34dc:	f3ef 8911 	mrs	r9, BASEPRI
    34e0:	f383 8811 	msr	BASEPRI, r3
    34e4:	f3bf 8f6f 	isb	sy
      ring_buf_put(&out_ringbuf,
    34e8:	1931      	adds	r1, r6, r4
    34ea:	4638      	mov	r0, r7
    34ec:	f01c f9b3 	bl	1f856 <ring_buf_put>
    num_written +=
    34f0:	4404      	add	r4, r0
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    34f2:	f389 8811 	msr	BASEPRI, r9
    34f6:	f3bf 8f6f 	isb	sy
    uart_irq_tx_enable(usb_dev);
    34fa:	f8d8 0000 	ldr.w	r0, [r8]
	if (api->irq_tx_enable) {
    34fe:	6883      	ldr	r3, [r0, #8]
    3500:	69db      	ldr	r3, [r3, #28]
    3502:	2b00      	cmp	r3, #0
    3504:	d0e0      	beq.n	34c8 <usb_printf+0x28>
		api->irq_tx_enable(dev);
    3506:	4798      	blx	r3
    3508:	e7de      	b.n	34c8 <usb_printf+0x28>
    350a:	bf00      	nop
    350c:	20005ab3 	.word	0x20005ab3
    3510:	20004ab3 	.word	0x20004ab3
    3514:	200015a4 	.word	0x200015a4
    3518:	200015c0 	.word	0x200015c0

0000351c <start_usb_cdc_thread>:
  
K_THREAD_STACK_DEFINE(usb_cdc_stack_area, 512);
struct k_thread usb_cdc_thread;


void start_usb_cdc_thread(void)  {
    351c:	b500      	push	{lr}
    351e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3520:	2200      	movs	r2, #0
    3522:	2300      	movs	r3, #0
    3524:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3528:	2300      	movs	r3, #0
    352a:	2205      	movs	r2, #5
    352c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    3530:	e9cd 3301 	strd	r3, r3, [sp, #4]
    3534:	9300      	str	r3, [sp, #0]
    3536:	4905      	ldr	r1, [pc, #20]	; (354c <start_usb_cdc_thread+0x30>)
    3538:	4b05      	ldr	r3, [pc, #20]	; (3550 <start_usb_cdc_thread+0x34>)
    353a:	4806      	ldr	r0, [pc, #24]	; (3554 <start_usb_cdc_thread+0x38>)
    353c:	f44f 7200 	mov.w	r2, #512	; 0x200
    3540:	f01b f93c 	bl	1e7bc <z_impl_k_thread_create>
					usb_cdc_thread_main,
					NULL, NULL, NULL,
					5 /* prio */,
					0, K_NO_WAIT);

}
    3544:	b009      	add	sp, #36	; 0x24
    3546:	f85d fb04 	ldr.w	pc, [sp], #4
    354a:	bf00      	nop
    354c:	200068a0 	.word	0x200068a0
    3550:	000033ad 	.word	0x000033ad
    3554:	20000af8 	.word	0x20000af8

00003558 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    3558:	680b      	ldr	r3, [r1, #0]
    355a:	3301      	adds	r3, #1
    355c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    355e:	4b01      	ldr	r3, [pc, #4]	; (3564 <char_out+0xc>)
    3560:	681b      	ldr	r3, [r3, #0]
    3562:	4718      	bx	r3
    3564:	2000014c 	.word	0x2000014c

00003568 <__printk_hook_install>:
	_char_out = fn;
    3568:	4b01      	ldr	r3, [pc, #4]	; (3570 <__printk_hook_install+0x8>)
    356a:	6018      	str	r0, [r3, #0]
}
    356c:	4770      	bx	lr
    356e:	bf00      	nop
    3570:	2000014c 	.word	0x2000014c

00003574 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    3574:	b507      	push	{r0, r1, r2, lr}
    3576:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    3578:	2100      	movs	r1, #0
{
    357a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    357c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    357e:	4803      	ldr	r0, [pc, #12]	; (358c <vprintk+0x18>)
    3580:	a901      	add	r1, sp, #4
    3582:	f000 fa57 	bl	3a34 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    3586:	b003      	add	sp, #12
    3588:	f85d fb04 	ldr.w	pc, [sp], #4
    358c:	00003559 	.word	0x00003559

00003590 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    3590:	b530      	push	{r4, r5, lr}
    3592:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    3594:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    3598:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    359a:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    359c:	a901      	add	r1, sp, #4
    359e:	4805      	ldr	r0, [pc, #20]	; (35b4 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    35a0:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    35a2:	f000 fa47 	bl	3a34 <cbvprintf>

	if (ctx.count < ctx.max) {
    35a6:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    35aa:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    35ac:	bfb8      	it	lt
    35ae:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    35b0:	b005      	add	sp, #20
    35b2:	bd30      	pop	{r4, r5, pc}
    35b4:	0001f02f 	.word	0x0001f02f

000035b8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    35b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    35bc:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    35c0:	f019 0808 	ands.w	r8, r9, #8
{
    35c4:	4604      	mov	r4, r0
    35c6:	4693      	mov	fp, r2
	if (processing) {
    35c8:	d00d      	beq.n	35e6 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    35ca:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    35cc:	bf0c      	ite	eq
    35ce:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    35d2:	f049 0920 	orrne.w	r9, r9, #32
    35d6:	f8a0 9018 	strh.w	r9, [r0, #24]
    35da:	f38b 8811 	msr	BASEPRI, fp
    35de:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    35e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    35e6:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    35ea:	2902      	cmp	r1, #2
    35ec:	d107      	bne.n	35fe <process_event+0x46>
			evt = process_recheck(mgr);
    35ee:	4620      	mov	r0, r4
    35f0:	f01b fd4a 	bl	1f088 <process_recheck>
		if (evt == EVT_NOP) {
    35f4:	2800      	cmp	r0, #0
    35f6:	d0f0      	beq.n	35da <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    35f8:	2801      	cmp	r0, #1
    35fa:	8b23      	ldrh	r3, [r4, #24]
    35fc:	d150      	bne.n	36a0 <process_event+0xe8>
			res = mgr->last_res;
    35fe:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3600:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    3602:	2f00      	cmp	r7, #0
    3604:	da15      	bge.n	3632 <process_event+0x7a>
		*clients = mgr->clients;
    3606:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3608:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    360c:	e9c4 8800 	strd	r8, r8, [r4]
    3610:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    3614:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    3616:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3618:	8b21      	ldrh	r1, [r4, #24]
    361a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    361e:	45ca      	cmp	sl, r9
    3620:	d002      	beq.n	3628 <process_event+0x70>
		if (do_monitors
    3622:	68a3      	ldr	r3, [r4, #8]
    3624:	2b00      	cmp	r3, #0
    3626:	d15c      	bne.n	36e2 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    3628:	b90d      	cbnz	r5, 362e <process_event+0x76>
		    || (transit != NULL)) {
    362a:	2e00      	cmp	r6, #0
    362c:	d074      	beq.n	3718 <process_event+0x160>
    362e:	2300      	movs	r3, #0
    3630:	e058      	b.n	36e4 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3632:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    3636:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    3638:	2a01      	cmp	r2, #1
    363a:	d820      	bhi.n	367e <process_event+0xc6>
		*clients = mgr->clients;
    363c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    3640:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    3642:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    3644:	b289      	uxth	r1, r1
	list->tail = NULL;
    3646:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    364a:	d10c      	bne.n	3666 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    364c:	2d00      	cmp	r5, #0
    364e:	462b      	mov	r3, r5
    3650:	bf38      	it	cc
    3652:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3654:	b12b      	cbz	r3, 3662 <process_event+0xaa>
				mgr->refs += 1U;
    3656:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3658:	681b      	ldr	r3, [r3, #0]
    365a:	3201      	adds	r2, #1
    365c:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    365e:	2b00      	cmp	r3, #0
    3660:	d1f8      	bne.n	3654 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3662:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    3666:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    3668:	4620      	mov	r0, r4
    366a:	f01b fd0d 	bl	1f088 <process_recheck>
    366e:	4606      	mov	r6, r0
    3670:	2800      	cmp	r0, #0
    3672:	d0d1      	beq.n	3618 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3674:	8b23      	ldrh	r3, [r4, #24]
    3676:	f043 0320 	orr.w	r3, r3, #32
    367a:	8323      	strh	r3, [r4, #24]
    367c:	e7cb      	b.n	3616 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    367e:	2b04      	cmp	r3, #4
    3680:	d10c      	bne.n	369c <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3682:	f021 0107 	bic.w	r1, r1, #7
    3686:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    3688:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    368a:	4620      	mov	r0, r4
    368c:	f01b fcfc 	bl	1f088 <process_recheck>
    3690:	4605      	mov	r5, r0
    3692:	2800      	cmp	r0, #0
    3694:	d0bf      	beq.n	3616 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3696:	f041 0120 	orr.w	r1, r1, #32
    369a:	8321      	strh	r1, [r4, #24]
    369c:	2500      	movs	r5, #0
    369e:	e7ba      	b.n	3616 <process_event+0x5e>
		} else if (evt == EVT_START) {
    36a0:	2803      	cmp	r0, #3
    36a2:	d109      	bne.n	36b8 <process_event+0x100>
			transit = mgr->transitions->start;
    36a4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    36a6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    36aa:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    36ac:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    36b0:	8323      	strh	r3, [r4, #24]
}
    36b2:	2500      	movs	r5, #0
		res = 0;
    36b4:	462f      	mov	r7, r5
    36b6:	e7af      	b.n	3618 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    36b8:	2804      	cmp	r0, #4
    36ba:	d106      	bne.n	36ca <process_event+0x112>
			transit = mgr->transitions->stop;
    36bc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    36be:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    36c2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    36c4:	f043 0304 	orr.w	r3, r3, #4
    36c8:	e7f2      	b.n	36b0 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    36ca:	2805      	cmp	r0, #5
    36cc:	d106      	bne.n	36dc <process_event+0x124>
			transit = mgr->transitions->reset;
    36ce:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    36d0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    36d4:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    36d6:	f043 0305 	orr.w	r3, r3, #5
    36da:	e7e9      	b.n	36b0 <process_event+0xf8>
    36dc:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    36de:	462e      	mov	r6, r5
    36e0:	e7e8      	b.n	36b4 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    36e2:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    36e4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    36e8:	8321      	strh	r1, [r4, #24]
    36ea:	f38b 8811 	msr	BASEPRI, fp
    36ee:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    36f2:	bb03      	cbnz	r3, 3736 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    36f4:	2d00      	cmp	r5, #0
    36f6:	d133      	bne.n	3760 <process_event+0x1a8>
			if (transit != NULL) {
    36f8:	b116      	cbz	r6, 3700 <process_event+0x148>
				transit(mgr, transition_complete);
    36fa:	4921      	ldr	r1, [pc, #132]	; (3780 <process_event+0x1c8>)
    36fc:	4620      	mov	r0, r4
    36fe:	47b0      	blx	r6
	__asm__ volatile(
    3700:	f04f 0320 	mov.w	r3, #32
    3704:	f3ef 8b11 	mrs	fp, BASEPRI
    3708:	f383 8811 	msr	BASEPRI, r3
    370c:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    3710:	8b23      	ldrh	r3, [r4, #24]
    3712:	f023 0308 	bic.w	r3, r3, #8
    3716:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    3718:	8b23      	ldrh	r3, [r4, #24]
    371a:	06da      	lsls	r2, r3, #27
    371c:	d528      	bpl.n	3770 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    371e:	f023 0310 	bic.w	r3, r3, #16
    3722:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    3724:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    3726:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    372a:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    372e:	2900      	cmp	r1, #0
    3730:	f47f af5b 	bne.w	35ea <process_event+0x32>
out:
    3734:	e751      	b.n	35da <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3736:	68a1      	ldr	r1, [r4, #8]
    3738:	2900      	cmp	r1, #0
    373a:	d0db      	beq.n	36f4 <process_event+0x13c>
	return node->next;
    373c:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    373e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    3742:	2b00      	cmp	r3, #0
    3744:	bf38      	it	cc
    3746:	2300      	movcc	r3, #0
    3748:	4699      	mov	r9, r3
    374a:	4652      	mov	r2, sl
    374c:	463b      	mov	r3, r7
    374e:	4620      	mov	r0, r4
    3750:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3752:	f1b9 0f00 	cmp.w	r9, #0
    3756:	d0cd      	beq.n	36f4 <process_event+0x13c>
    3758:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    375c:	4649      	mov	r1, r9
    375e:	e7ee      	b.n	373e <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3760:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    3762:	463b      	mov	r3, r7
    3764:	4652      	mov	r2, sl
    3766:	4620      	mov	r0, r4
    3768:	682d      	ldr	r5, [r5, #0]
    376a:	f01b fca9 	bl	1f0c0 <notify_one>
    376e:	e7c1      	b.n	36f4 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    3770:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    3774:	bf1e      	ittt	ne
    3776:	f023 0320 	bicne.w	r3, r3, #32
    377a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    377c:	2102      	movne	r1, #2
    377e:	e7d2      	b.n	3726 <process_event+0x16e>
    3780:	0001f0ed 	.word	0x0001f0ed

00003784 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    3784:	b5f0      	push	{r4, r5, r6, r7, lr}
	*conv = (struct conversion) {
    3786:	2200      	movs	r2, #0
    3788:	e9c0 2200 	strd	r2, r2, [r0]
    378c:	6082      	str	r2, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    378e:	784a      	ldrb	r2, [r1, #1]
    3790:	2a25      	cmp	r2, #37	; 0x25
{
    3792:	4603      	mov	r3, r0
	if (*sp == '%') {
    3794:	d033      	beq.n	37fe <extract_conversion+0x7a>
	++sp;
    3796:	3101      	adds	r1, #1
    3798:	4608      	mov	r0, r1
		switch (*sp) {
    379a:	f811 2b01 	ldrb.w	r2, [r1], #1
    379e:	2a2b      	cmp	r2, #43	; 0x2b
    37a0:	d03d      	beq.n	381e <extract_conversion+0x9a>
    37a2:	d82f      	bhi.n	3804 <extract_conversion+0x80>
    37a4:	2a20      	cmp	r2, #32
    37a6:	d03e      	beq.n	3826 <extract_conversion+0xa2>
    37a8:	2a23      	cmp	r2, #35	; 0x23
    37aa:	d040      	beq.n	382e <extract_conversion+0xaa>
	if (conv->flag_zero && conv->flag_dash) {
    37ac:	781a      	ldrb	r2, [r3, #0]
    37ae:	f002 0144 	and.w	r1, r2, #68	; 0x44
    37b2:	2944      	cmp	r1, #68	; 0x44
    37b4:	d102      	bne.n	37bc <extract_conversion+0x38>
		conv->flag_zero = false;
    37b6:	f36f 1286 	bfc	r2, #6, #1
    37ba:	701a      	strb	r2, [r3, #0]
	if (*sp == '*') {
    37bc:	7802      	ldrb	r2, [r0, #0]
    37be:	2a2a      	cmp	r2, #42	; 0x2a
    37c0:	d14c      	bne.n	385c <extract_conversion+0xd8>
		conv->width_present = true;
    37c2:	8819      	ldrh	r1, [r3, #0]
    37c4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
    37c8:	1c42      	adds	r2, r0, #1
    37ca:	8019      	strh	r1, [r3, #0]
	if (*sp != '.') {
    37cc:	7811      	ldrb	r1, [r2, #0]
    37ce:	292e      	cmp	r1, #46	; 0x2e
    37d0:	d14f      	bne.n	3872 <extract_conversion+0xee>
	if (*sp == '*') {
    37d2:	7851      	ldrb	r1, [r2, #1]
    37d4:	292a      	cmp	r1, #42	; 0x2a
    37d6:	d045      	beq.n	3864 <extract_conversion+0xe0>
    37d8:	3201      	adds	r2, #1
	const char *sp = *str;
    37da:	4615      	mov	r5, r2
	size_t val = 0;
    37dc:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    37de:	270a      	movs	r7, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    37e0:	4610      	mov	r0, r2
    37e2:	f810 4b01 	ldrb.w	r4, [r0], #1
    37e6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    37ea:	2e09      	cmp	r6, #9
    37ec:	d964      	bls.n	38b8 <extract_conversion+0x134>
	if (sp != wp) {
    37ee:	4295      	cmp	r5, r2
		conv->prec_present = true;
    37f0:	bf1f      	itttt	ne
    37f2:	7858      	ldrbne	r0, [r3, #1]
		conv->prec_value = prec;
    37f4:	6099      	strne	r1, [r3, #8]
		conv->prec_present = true;
    37f6:	f040 0002 	orrne.w	r0, r0, #2
    37fa:	7058      	strbne	r0, [r3, #1]
		if (prec != conv->prec_value) {
    37fc:	e039      	b.n	3872 <extract_conversion+0xee>
		conv->specifier = *sp++;
    37fe:	1c88      	adds	r0, r1, #2
    3800:	70da      	strb	r2, [r3, #3]
	sp = extract_prec(conv, sp);
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    3802:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (*sp) {
    3804:	2a2d      	cmp	r2, #45	; 0x2d
    3806:	d005      	beq.n	3814 <extract_conversion+0x90>
    3808:	2a30      	cmp	r2, #48	; 0x30
    380a:	d1cf      	bne.n	37ac <extract_conversion+0x28>
			conv->flag_zero = true;
    380c:	781a      	ldrb	r2, [r3, #0]
    380e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    3812:	e002      	b.n	381a <extract_conversion+0x96>
			conv->flag_dash = true;
    3814:	781a      	ldrb	r2, [r3, #0]
    3816:	f042 0204 	orr.w	r2, r2, #4
			conv->flag_zero = true;
    381a:	701a      	strb	r2, [r3, #0]
			break;
    381c:	e7bc      	b.n	3798 <extract_conversion+0x14>
			conv->flag_plus = true;
    381e:	781a      	ldrb	r2, [r3, #0]
    3820:	f042 0208 	orr.w	r2, r2, #8
    3824:	e7f9      	b.n	381a <extract_conversion+0x96>
			conv->flag_space = true;
    3826:	781a      	ldrb	r2, [r3, #0]
    3828:	f042 0210 	orr.w	r2, r2, #16
    382c:	e7f5      	b.n	381a <extract_conversion+0x96>
			conv->flag_hash = true;
    382e:	781a      	ldrb	r2, [r3, #0]
    3830:	f042 0220 	orr.w	r2, r2, #32
    3834:	e7f1      	b.n	381a <extract_conversion+0x96>
		val = 10U * val + *sp++ - '0';
    3836:	fb07 5101 	mla	r1, r7, r1, r5
    383a:	3930      	subs	r1, #48	; 0x30
    383c:	4622      	mov	r2, r4
    383e:	4614      	mov	r4, r2
    3840:	f814 5b01 	ldrb.w	r5, [r4], #1
    3844:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    3848:	2e09      	cmp	r6, #9
    384a:	d9f4      	bls.n	3836 <extract_conversion+0xb2>
	if (sp != wp) {
    384c:	4290      	cmp	r0, r2
		conv->width_present = true;
    384e:	bf1f      	itttt	ne
    3850:	7818      	ldrbne	r0, [r3, #0]
		conv->width_value = width;
    3852:	6059      	strne	r1, [r3, #4]
		conv->width_present = true;
    3854:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
    3858:	7018      	strbne	r0, [r3, #0]
		if (width != conv->width_value) {
    385a:	e7b7      	b.n	37cc <extract_conversion+0x48>
    385c:	4602      	mov	r2, r0
	size_t val = 0;
    385e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    3860:	270a      	movs	r7, #10
    3862:	e7ec      	b.n	383e <extract_conversion+0xba>
		conv->prec_present = true;
    3864:	7859      	ldrb	r1, [r3, #1]
    3866:	f021 0106 	bic.w	r1, r1, #6
    386a:	f041 0106 	orr.w	r1, r1, #6
    386e:	7059      	strb	r1, [r3, #1]
		return ++sp;
    3870:	3202      	adds	r2, #2
	switch (*sp) {
    3872:	4611      	mov	r1, r2
    3874:	f811 0b01 	ldrb.w	r0, [r1], #1
    3878:	286c      	cmp	r0, #108	; 0x6c
    387a:	d039      	beq.n	38f0 <extract_conversion+0x16c>
    387c:	d821      	bhi.n	38c2 <extract_conversion+0x13e>
    387e:	2868      	cmp	r0, #104	; 0x68
    3880:	d026      	beq.n	38d0 <extract_conversion+0x14c>
    3882:	286a      	cmp	r0, #106	; 0x6a
    3884:	d03d      	beq.n	3902 <extract_conversion+0x17e>
    3886:	284c      	cmp	r0, #76	; 0x4c
    3888:	d041      	beq.n	390e <extract_conversion+0x18a>
    388a:	4611      	mov	r1, r2
	conv->specifier = *sp++;
    388c:	4608      	mov	r0, r1
    388e:	f810 4b01 	ldrb.w	r4, [r0], #1
    3892:	70dc      	strb	r4, [r3, #3]
	switch (conv->specifier) {
    3894:	2c78      	cmp	r4, #120	; 0x78
    3896:	f200 80c6 	bhi.w	3a26 <extract_conversion+0x2a2>
    389a:	2c57      	cmp	r4, #87	; 0x57
    389c:	d842      	bhi.n	3924 <extract_conversion+0x1a0>
    389e:	2c41      	cmp	r4, #65	; 0x41
    38a0:	d003      	beq.n	38aa <extract_conversion+0x126>
    38a2:	3c45      	subs	r4, #69	; 0x45
    38a4:	2c02      	cmp	r4, #2
    38a6:	f200 80be 	bhi.w	3a26 <extract_conversion+0x2a2>
		conv->specifier_cat = SPECIFIER_FP;
    38aa:	789a      	ldrb	r2, [r3, #2]
    38ac:	2104      	movs	r1, #4
    38ae:	f361 0202 	bfi	r2, r1, #0, #3
    38b2:	709a      	strb	r2, [r3, #2]
			unsupported = true;
    38b4:	2201      	movs	r2, #1
			break;
    38b6:	e092      	b.n	39de <extract_conversion+0x25a>
		val = 10U * val + *sp++ - '0';
    38b8:	fb07 4101 	mla	r1, r7, r1, r4
    38bc:	3930      	subs	r1, #48	; 0x30
    38be:	4602      	mov	r2, r0
    38c0:	e78e      	b.n	37e0 <extract_conversion+0x5c>
	switch (*sp) {
    38c2:	2874      	cmp	r0, #116	; 0x74
    38c4:	d020      	beq.n	3908 <extract_conversion+0x184>
    38c6:	287a      	cmp	r0, #122	; 0x7a
    38c8:	d1df      	bne.n	388a <extract_conversion+0x106>
		conv->length_mod = LENGTH_Z;
    38ca:	785a      	ldrb	r2, [r3, #1]
    38cc:	2006      	movs	r0, #6
    38ce:	e00b      	b.n	38e8 <extract_conversion+0x164>
		if (*++sp == 'h') {
    38d0:	7850      	ldrb	r0, [r2, #1]
    38d2:	785c      	ldrb	r4, [r3, #1]
    38d4:	2868      	cmp	r0, #104	; 0x68
    38d6:	d105      	bne.n	38e4 <extract_conversion+0x160>
			conv->length_mod = LENGTH_HH;
    38d8:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    38da:	f361 04c6 	bfi	r4, r1, #3, #4
    38de:	705c      	strb	r4, [r3, #1]
			++sp;
    38e0:	1c91      	adds	r1, r2, #2
    38e2:	e7d3      	b.n	388c <extract_conversion+0x108>
			conv->length_mod = LENGTH_H;
    38e4:	4622      	mov	r2, r4
    38e6:	2002      	movs	r0, #2
		conv->length_mod = LENGTH_T;
    38e8:	f360 02c6 	bfi	r2, r0, #3, #4
    38ec:	705a      	strb	r2, [r3, #1]
		break;
    38ee:	e7cd      	b.n	388c <extract_conversion+0x108>
		if (*++sp == 'l') {
    38f0:	7850      	ldrb	r0, [r2, #1]
    38f2:	785c      	ldrb	r4, [r3, #1]
    38f4:	286c      	cmp	r0, #108	; 0x6c
    38f6:	d101      	bne.n	38fc <extract_conversion+0x178>
			conv->length_mod = LENGTH_LL;
    38f8:	2104      	movs	r1, #4
    38fa:	e7ee      	b.n	38da <extract_conversion+0x156>
			conv->length_mod = LENGTH_L;
    38fc:	4622      	mov	r2, r4
    38fe:	2003      	movs	r0, #3
    3900:	e7f2      	b.n	38e8 <extract_conversion+0x164>
		conv->length_mod = LENGTH_J;
    3902:	785a      	ldrb	r2, [r3, #1]
    3904:	2005      	movs	r0, #5
    3906:	e7ef      	b.n	38e8 <extract_conversion+0x164>
		conv->length_mod = LENGTH_T;
    3908:	785a      	ldrb	r2, [r3, #1]
    390a:	2007      	movs	r0, #7
    390c:	e7ec      	b.n	38e8 <extract_conversion+0x164>
		conv->unsupported = true;
    390e:	881a      	ldrh	r2, [r3, #0]
    3910:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    3914:	f022 0202 	bic.w	r2, r2, #2
    3918:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    391c:	f042 0202 	orr.w	r2, r2, #2
    3920:	801a      	strh	r2, [r3, #0]
		break;
    3922:	e7b3      	b.n	388c <extract_conversion+0x108>
    3924:	f1a4 0258 	sub.w	r2, r4, #88	; 0x58
    3928:	2a20      	cmp	r2, #32
    392a:	d87c      	bhi.n	3a26 <extract_conversion+0x2a2>
    392c:	a101      	add	r1, pc, #4	; (adr r1, 3934 <extract_conversion+0x1b0>)
    392e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    3932:	bf00      	nop
    3934:	000039ef 	.word	0x000039ef
    3938:	00003a27 	.word	0x00003a27
    393c:	00003a27 	.word	0x00003a27
    3940:	00003a27 	.word	0x00003a27
    3944:	00003a27 	.word	0x00003a27
    3948:	00003a27 	.word	0x00003a27
    394c:	00003a27 	.word	0x00003a27
    3950:	00003a27 	.word	0x00003a27
    3954:	00003a27 	.word	0x00003a27
    3958:	000038ab 	.word	0x000038ab
    395c:	00003a27 	.word	0x00003a27
    3960:	000039ef 	.word	0x000039ef
    3964:	000039b9 	.word	0x000039b9
    3968:	000038ab 	.word	0x000038ab
    396c:	000038ab 	.word	0x000038ab
    3970:	000038ab 	.word	0x000038ab
    3974:	00003a27 	.word	0x00003a27
    3978:	000039b9 	.word	0x000039b9
    397c:	00003a27 	.word	0x00003a27
    3980:	00003a27 	.word	0x00003a27
    3984:	00003a27 	.word	0x00003a27
    3988:	00003a27 	.word	0x00003a27
    398c:	000039f5 	.word	0x000039f5
    3990:	000039ef 	.word	0x000039ef
    3994:	00003a0f 	.word	0x00003a0f
    3998:	00003a27 	.word	0x00003a27
    399c:	00003a27 	.word	0x00003a27
    39a0:	00003a0f 	.word	0x00003a0f
    39a4:	00003a27 	.word	0x00003a27
    39a8:	000039ef 	.word	0x000039ef
    39ac:	00003a27 	.word	0x00003a27
    39b0:	00003a27 	.word	0x00003a27
    39b4:	000039ef 	.word	0x000039ef
		conv->specifier_cat = SPECIFIER_SINT;
    39b8:	789a      	ldrb	r2, [r3, #2]
    39ba:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    39bc:	f361 0202 	bfi	r2, r1, #0, #3
    39c0:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    39c2:	785a      	ldrb	r2, [r3, #1]
    39c4:	f002 0278 	and.w	r2, r2, #120	; 0x78
    39c8:	2a40      	cmp	r2, #64	; 0x40
			conv->invalid = true;
    39ca:	bf02      	ittt	eq
    39cc:	7819      	ldrbeq	r1, [r3, #0]
    39ce:	f041 0101 	orreq.w	r1, r1, #1
    39d2:	7019      	strbeq	r1, [r3, #0]
		if (conv->specifier == 'c') {
    39d4:	2c63      	cmp	r4, #99	; 0x63
    39d6:	d12a      	bne.n	3a2e <extract_conversion+0x2aa>
			unsupported = (conv->length_mod != LENGTH_NONE);
    39d8:	3a00      	subs	r2, #0
    39da:	bf18      	it	ne
    39dc:	2201      	movne	r2, #1
	conv->unsupported |= unsupported;
    39de:	7819      	ldrb	r1, [r3, #0]
    39e0:	f3c1 0440 	ubfx	r4, r1, #1, #1
    39e4:	4322      	orrs	r2, r4
    39e6:	f362 0141 	bfi	r1, r2, #1, #1
    39ea:	7019      	strb	r1, [r3, #0]
	return sp;
    39ec:	e709      	b.n	3802 <extract_conversion+0x7e>
		conv->specifier_cat = SPECIFIER_UINT;
    39ee:	789a      	ldrb	r2, [r3, #2]
    39f0:	2102      	movs	r1, #2
    39f2:	e7e3      	b.n	39bc <extract_conversion+0x238>
		conv->specifier_cat = SPECIFIER_PTR;
    39f4:	789a      	ldrb	r2, [r3, #2]
    39f6:	2103      	movs	r1, #3
    39f8:	f361 0202 	bfi	r2, r1, #0, #3
    39fc:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    39fe:	785a      	ldrb	r2, [r3, #1]
    3a00:	f002 0278 	and.w	r2, r2, #120	; 0x78
    3a04:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
    3a08:	424a      	negs	r2, r1
    3a0a:	414a      	adcs	r2, r1
    3a0c:	e7e7      	b.n	39de <extract_conversion+0x25a>
		conv->specifier_cat = SPECIFIER_PTR;
    3a0e:	789a      	ldrb	r2, [r3, #2]
    3a10:	2103      	movs	r1, #3
    3a12:	f361 0202 	bfi	r2, r1, #0, #3
    3a16:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod != LENGTH_NONE) {
    3a18:	785a      	ldrb	r2, [r3, #1]
    3a1a:	f012 0f78 	tst.w	r2, #120	; 0x78
    3a1e:	bf14      	ite	ne
    3a20:	2201      	movne	r2, #1
    3a22:	2200      	moveq	r2, #0
    3a24:	e7db      	b.n	39de <extract_conversion+0x25a>
		conv->invalid = true;
    3a26:	781a      	ldrb	r2, [r3, #0]
    3a28:	f042 0201 	orr.w	r2, r2, #1
    3a2c:	701a      	strb	r2, [r3, #0]
	bool unsupported = false;
    3a2e:	2200      	movs	r2, #0
    3a30:	e7d5      	b.n	39de <extract_conversion+0x25a>
    3a32:	bf00      	nop

00003a34 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    3a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a38:	4682      	mov	sl, r0
    3a3a:	b091      	sub	sp, #68	; 0x44
    3a3c:	468b      	mov	fp, r1
    3a3e:	4691      	mov	r9, r2
    3a40:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    3a42:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    3a44:	f899 0000 	ldrb.w	r0, [r9]
    3a48:	b908      	cbnz	r0, 3a4e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    3a4a:	4628      	mov	r0, r5
    3a4c:	e10d      	b.n	3c6a <cbvprintf+0x236>
		if (*fp != '%') {
    3a4e:	2825      	cmp	r0, #37	; 0x25
    3a50:	d009      	beq.n	3a66 <cbvprintf+0x32>
			OUTC(*fp++);
    3a52:	4659      	mov	r1, fp
    3a54:	47d0      	blx	sl
    3a56:	2800      	cmp	r0, #0
    3a58:	f2c0 8107 	blt.w	3c6a <cbvprintf+0x236>
    3a5c:	f109 0301 	add.w	r3, r9, #1
    3a60:	9302      	str	r3, [sp, #8]
			OUTC('%');
    3a62:	3501      	adds	r5, #1
			break;
    3a64:	e05e      	b.n	3b24 <cbvprintf+0xf0>
		} state = {
    3a66:	2218      	movs	r2, #24
    3a68:	2100      	movs	r1, #0
    3a6a:	a80a      	add	r0, sp, #40	; 0x28
    3a6c:	f01d fe46 	bl	216fc <memset>
		fp = extract_conversion(conv, sp);
    3a70:	4649      	mov	r1, r9
    3a72:	a80c      	add	r0, sp, #48	; 0x30
    3a74:	f7ff fe86 	bl	3784 <extract_conversion>
		if (conv->width_star) {
    3a78:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
		fp = extract_conversion(conv, sp);
    3a7c:	9002      	str	r0, [sp, #8]
		if (conv->width_star) {
    3a7e:	07d9      	lsls	r1, r3, #31
    3a80:	d51b      	bpl.n	3aba <cbvprintf+0x86>
			width = va_arg(ap, int);
    3a82:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    3a86:	f1b8 0f00 	cmp.w	r8, #0
    3a8a:	da07      	bge.n	3a9c <cbvprintf+0x68>
				conv->flag_dash = true;
    3a8c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    3a90:	f042 0204 	orr.w	r2, r2, #4
    3a94:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    3a98:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    3a9c:	075a      	lsls	r2, r3, #29
    3a9e:	d515      	bpl.n	3acc <cbvprintf+0x98>
			int arg = va_arg(ap, int);
    3aa0:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    3aa4:	2f00      	cmp	r7, #0
    3aa6:	da14      	bge.n	3ad2 <cbvprintf+0x9e>
				conv->prec_present = false;
    3aa8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    3aac:	f36f 0341 	bfc	r3, #1, #1
    3ab0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    3ab4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    3ab8:	e00b      	b.n	3ad2 <cbvprintf+0x9e>
		} else if (conv->width_present) {
    3aba:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    3abe:	2a00      	cmp	r2, #0
			width = conv->width_value;
    3ac0:	bfb4      	ite	lt
    3ac2:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
		int width = -1;
    3ac6:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    3aca:	e7e7      	b.n	3a9c <cbvprintf+0x68>
		} else if (conv->prec_present) {
    3acc:	079f      	lsls	r7, r3, #30
    3ace:	d5f1      	bpl.n	3ab4 <cbvprintf+0x80>
			precision = conv->prec_value;
    3ad0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    3ad2:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    3ad6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    3ad8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    3adc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    3ae0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    3ae4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    3ae6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    3aea:	d12e      	bne.n	3b4a <cbvprintf+0x116>
			switch (length_mod) {
    3aec:	1ecb      	subs	r3, r1, #3
    3aee:	2b04      	cmp	r3, #4
    3af0:	d81b      	bhi.n	3b2a <cbvprintf+0xf6>
    3af2:	e8df f003 	tbb	[pc, r3]
    3af6:	3a03      	.short	0x3a03
    3af8:	1a3a      	.short	0x1a3a
    3afa:	1a          	.byte	0x1a
    3afb:	00          	.byte	0x00
				value->sint = va_arg(ap, long);
    3afc:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    3b00:	17d3      	asrs	r3, r2, #31
				value->uint =
    3b02:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    3b06:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3b0a:	f013 0603 	ands.w	r6, r3, #3
    3b0e:	d04f      	beq.n	3bb0 <cbvprintf+0x17c>
			OUTS(sp, fp);
    3b10:	9b02      	ldr	r3, [sp, #8]
    3b12:	464a      	mov	r2, r9
    3b14:	4659      	mov	r1, fp
    3b16:	4650      	mov	r0, sl
    3b18:	f01b fe5b 	bl	1f7d2 <outs>
    3b1c:	2800      	cmp	r0, #0
    3b1e:	f2c0 80a4 	blt.w	3c6a <cbvprintf+0x236>
    3b22:	4405      	add	r5, r0
			OUTS(bps, bpe);
    3b24:	f8dd 9008 	ldr.w	r9, [sp, #8]
    3b28:	e78c      	b.n	3a44 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3b2a:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    3b2e:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3b30:	ea4f 73e2 	mov.w	r3, r2, asr #31
    3b34:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    3b38:	d102      	bne.n	3b40 <cbvprintf+0x10c>
				value->uint = (unsigned char)value->uint;
    3b3a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    3b3e:	e010      	b.n	3b62 <cbvprintf+0x12e>
			} else if (length_mod == LENGTH_H) {
    3b40:	2902      	cmp	r1, #2
    3b42:	d1e0      	bne.n	3b06 <cbvprintf+0xd2>
				value->sint = (short)value->sint;
    3b44:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
    3b48:	e7da      	b.n	3b00 <cbvprintf+0xcc>
		} else if (specifier_cat == SPECIFIER_UINT) {
    3b4a:	2b02      	cmp	r3, #2
    3b4c:	d120      	bne.n	3b90 <cbvprintf+0x15c>
			switch (length_mod) {
    3b4e:	1ecb      	subs	r3, r1, #3
    3b50:	2b04      	cmp	r3, #4
    3b52:	d810      	bhi.n	3b76 <cbvprintf+0x142>
    3b54:	e8df f003 	tbb	[pc, r3]
    3b58:	0f090903 	.word	0x0f090903
    3b5c:	0f          	.byte	0x0f
    3b5d:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned long);
    3b5e:	f854 3b04 	ldr.w	r3, [r4], #4
				value->uint = (unsigned char)value->uint;
    3b62:	930a      	str	r3, [sp, #40]	; 0x28
    3b64:	2300      	movs	r3, #0
    3b66:	930b      	str	r3, [sp, #44]	; 0x2c
    3b68:	e7cd      	b.n	3b06 <cbvprintf+0xd2>
					(uint_value_type)va_arg(ap,
    3b6a:	3407      	adds	r4, #7
    3b6c:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    3b70:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    3b74:	e7c5      	b.n	3b02 <cbvprintf+0xce>
					(uint_value_type)va_arg(ap, size_t);
    3b76:	f854 3b04 	ldr.w	r3, [r4], #4
    3b7a:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    3b7c:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    3b7e:	f04f 0300 	mov.w	r3, #0
    3b82:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    3b84:	d0d9      	beq.n	3b3a <cbvprintf+0x106>
			} else if (length_mod == LENGTH_H) {
    3b86:	2902      	cmp	r1, #2
    3b88:	d1bd      	bne.n	3b06 <cbvprintf+0xd2>
				value->uint = (unsigned short)value->uint;
    3b8a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    3b8e:	e7e8      	b.n	3b62 <cbvprintf+0x12e>
		} else if (specifier_cat == SPECIFIER_FP) {
    3b90:	2b04      	cmp	r3, #4
    3b92:	d107      	bne.n	3ba4 <cbvprintf+0x170>
			if (length_mod == LENGTH_UPPER_L) {
    3b94:	3407      	adds	r4, #7
    3b96:	f024 0407 	bic.w	r4, r4, #7
    3b9a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    3b9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    3ba2:	e7b0      	b.n	3b06 <cbvprintf+0xd2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    3ba4:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    3ba6:	bf04      	itt	eq
    3ba8:	f854 3b04 	ldreq.w	r3, [r4], #4
    3bac:	930a      	streq	r3, [sp, #40]	; 0x28
    3bae:	e7aa      	b.n	3b06 <cbvprintf+0xd2>
		switch (conv->specifier) {
    3bb0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    3bb4:	2878      	cmp	r0, #120	; 0x78
    3bb6:	d8b5      	bhi.n	3b24 <cbvprintf+0xf0>
    3bb8:	2862      	cmp	r0, #98	; 0x62
    3bba:	d81f      	bhi.n	3bfc <cbvprintf+0x1c8>
    3bbc:	2825      	cmp	r0, #37	; 0x25
    3bbe:	d04f      	beq.n	3c60 <cbvprintf+0x22c>
    3bc0:	2858      	cmp	r0, #88	; 0x58
    3bc2:	d1af      	bne.n	3b24 <cbvprintf+0xf0>
			bps = encode_uint(value->uint, conv, buf, bpe);
    3bc4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    3bc8:	9300      	str	r3, [sp, #0]
    3bca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    3bce:	ab04      	add	r3, sp, #16
    3bd0:	aa0c      	add	r2, sp, #48	; 0x30
    3bd2:	f01b fdb3 	bl	1f73c <encode_uint>
    3bd6:	4681      	mov	r9, r0
			if (precision >= 0) {
    3bd8:	2f00      	cmp	r7, #0
    3bda:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    3bde:	db0b      	blt.n	3bf8 <cbvprintf+0x1c4>
				conv->flag_zero = false;
    3be0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    3be4:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
    3be8:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    3bec:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    3bee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    3bf2:	d901      	bls.n	3bf8 <cbvprintf+0x1c4>
					conv->pad0_value = precision - (int)len;
    3bf4:	1aff      	subs	r7, r7, r3
    3bf6:	970d      	str	r7, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    3bf8:	4607      	mov	r7, r0
    3bfa:	e046      	b.n	3c8a <cbvprintf+0x256>
    3bfc:	3863      	subs	r0, #99	; 0x63
    3bfe:	2815      	cmp	r0, #21
    3c00:	d890      	bhi.n	3b24 <cbvprintf+0xf0>
    3c02:	a201      	add	r2, pc, #4	; (adr r2, 3c08 <cbvprintf+0x1d4>)
    3c04:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    3c08:	00003c93 	.word	0x00003c93
    3c0c:	00003cf7 	.word	0x00003cf7
    3c10:	00003b25 	.word	0x00003b25
    3c14:	00003b25 	.word	0x00003b25
    3c18:	00003b25 	.word	0x00003b25
    3c1c:	00003b25 	.word	0x00003b25
    3c20:	00003cf7 	.word	0x00003cf7
    3c24:	00003b25 	.word	0x00003b25
    3c28:	00003b25 	.word	0x00003b25
    3c2c:	00003b25 	.word	0x00003b25
    3c30:	00003b25 	.word	0x00003b25
    3c34:	00003d55 	.word	0x00003d55
    3c38:	00003d23 	.word	0x00003d23
    3c3c:	00003d27 	.word	0x00003d27
    3c40:	00003b25 	.word	0x00003b25
    3c44:	00003b25 	.word	0x00003b25
    3c48:	00003c71 	.word	0x00003c71
    3c4c:	00003b25 	.word	0x00003b25
    3c50:	00003d23 	.word	0x00003d23
    3c54:	00003b25 	.word	0x00003b25
    3c58:	00003b25 	.word	0x00003b25
    3c5c:	00003d23 	.word	0x00003d23
			OUTC('%');
    3c60:	4659      	mov	r1, fp
    3c62:	47d0      	blx	sl
    3c64:	2800      	cmp	r0, #0
    3c66:	f6bf aefc 	bge.w	3a62 <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
    3c6a:	b011      	add	sp, #68	; 0x44
    3c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bps = (const char *)value->ptr;
    3c70:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
			size_t len = strlen(bps);
    3c74:	4648      	mov	r0, r9
    3c76:	f01d fcf3 	bl	21660 <strlen>
			if ((precision >= 0)
    3c7a:	2f00      	cmp	r7, #0
    3c7c:	db02      	blt.n	3c84 <cbvprintf+0x250>
    3c7e:	42b8      	cmp	r0, r7
    3c80:	bf28      	it	cs
    3c82:	4638      	movcs	r0, r7
			bpe = bps + len;
    3c84:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
    3c88:	2600      	movs	r6, #0
		if (bps == NULL) {
    3c8a:	f1b9 0f00 	cmp.w	r9, #0
    3c8e:	d108      	bne.n	3ca2 <cbvprintf+0x26e>
    3c90:	e748      	b.n	3b24 <cbvprintf+0xf0>
			buf[0] = value->uint;
    3c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3c94:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    3c98:	2600      	movs	r6, #0
			bpe = buf + 1;
    3c9a:	f10d 0711 	add.w	r7, sp, #17
			bps = buf;
    3c9e:	f10d 0910 	add.w	r9, sp, #16
		size_t nj_len = (bpe - bps);
    3ca2:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
    3ca6:	b106      	cbz	r6, 3caa <cbvprintf+0x276>
			nj_len += 1U;
    3ca8:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    3caa:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    3cae:	06d0      	lsls	r0, r2, #27
    3cb0:	d56a      	bpl.n	3d88 <cbvprintf+0x354>
			nj_len += 2U;
    3cb2:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    3cb4:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    3cb6:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    3cb8:	bf48      	it	mi
    3cba:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    3cbc:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    3cbe:	bf48      	it	mi
    3cc0:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    3cc2:	f1b8 0f00 	cmp.w	r8, #0
    3cc6:	dd73      	ble.n	3db0 <cbvprintf+0x37c>
			if (!conv->flag_dash) {
    3cc8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    3ccc:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    3cd0:	f3c2 0380 	ubfx	r3, r2, #2, #1
    3cd4:	9303      	str	r3, [sp, #12]
    3cd6:	0753      	lsls	r3, r2, #29
    3cd8:	d46a      	bmi.n	3db0 <cbvprintf+0x37c>
				if (conv->flag_zero) {
    3cda:	0650      	lsls	r0, r2, #25
    3cdc:	f140 80a6 	bpl.w	3e2c <cbvprintf+0x3f8>
					if (sign != 0) {
    3ce0:	b13e      	cbz	r6, 3cf2 <cbvprintf+0x2be>
						OUTC(sign);
    3ce2:	4659      	mov	r1, fp
    3ce4:	4630      	mov	r0, r6
    3ce6:	47d0      	blx	sl
    3ce8:	2800      	cmp	r0, #0
    3cea:	dbbe      	blt.n	3c6a <cbvprintf+0x236>
						sign = 0;
    3cec:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    3cee:	3501      	adds	r5, #1
						sign = 0;
    3cf0:	461e      	mov	r6, r3
					pad = '0';
    3cf2:	2330      	movs	r3, #48	; 0x30
    3cf4:	e09b      	b.n	3e2e <cbvprintf+0x3fa>
			if (conv->flag_plus) {
    3cf6:	071e      	lsls	r6, r3, #28
    3cf8:	d411      	bmi.n	3d1e <cbvprintf+0x2ea>
				sign = ' ';
    3cfa:	f013 0610 	ands.w	r6, r3, #16
    3cfe:	bf18      	it	ne
    3d00:	2620      	movne	r6, #32
			if (value->sint < 0) {
    3d02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    3d06:	2a00      	cmp	r2, #0
    3d08:	f173 0100 	sbcs.w	r1, r3, #0
    3d0c:	f6bf af5a 	bge.w	3bc4 <cbvprintf+0x190>
				value->uint = (uint_value_type)-value->sint;
    3d10:	4252      	negs	r2, r2
    3d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3d16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    3d1a:	262d      	movs	r6, #45	; 0x2d
    3d1c:	e752      	b.n	3bc4 <cbvprintf+0x190>
				sign = '+';
    3d1e:	262b      	movs	r6, #43	; 0x2b
    3d20:	e7ef      	b.n	3d02 <cbvprintf+0x2ce>
		switch (conv->specifier) {
    3d22:	2600      	movs	r6, #0
    3d24:	e74e      	b.n	3bc4 <cbvprintf+0x190>
			if (value->ptr != NULL) {
    3d26:	980a      	ldr	r0, [sp, #40]	; 0x28
    3d28:	b348      	cbz	r0, 3d7e <cbvprintf+0x34a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3d2a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    3d2e:	9300      	str	r3, [sp, #0]
    3d30:	aa0c      	add	r2, sp, #48	; 0x30
    3d32:	ab04      	add	r3, sp, #16
    3d34:	2100      	movs	r1, #0
    3d36:	f01b fd01 	bl	1f73c <encode_uint>
				conv->altform_0c = true;
    3d3a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    3d3e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    3d42:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    3d46:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3d4a:	4681      	mov	r9, r0
				conv->altform_0c = true;
    3d4c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    3d50:	2600      	movs	r6, #0
				goto prec_int_pad0;
    3d52:	e741      	b.n	3bd8 <cbvprintf+0x1a4>
				store_count(conv, value->ptr, count);
    3d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    3d56:	2907      	cmp	r1, #7
    3d58:	f63f aee4 	bhi.w	3b24 <cbvprintf+0xf0>
    3d5c:	e8df f001 	tbb	[pc, r1]
    3d60:	0d06040d 	.word	0x0d06040d
    3d64:	0d0d0808 	.word	0x0d0d0808
		*(signed char *)dp = (signed char)count;
    3d68:	701d      	strb	r5, [r3, #0]
		break;
    3d6a:	e6db      	b.n	3b24 <cbvprintf+0xf0>
		*(short *)dp = (short)count;
    3d6c:	801d      	strh	r5, [r3, #0]
		break;
    3d6e:	e6d9      	b.n	3b24 <cbvprintf+0xf0>
		*(intmax_t *)dp = (intmax_t)count;
    3d70:	4628      	mov	r0, r5
    3d72:	17e9      	asrs	r1, r5, #31
    3d74:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    3d78:	e6d4      	b.n	3b24 <cbvprintf+0xf0>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3d7a:	601d      	str	r5, [r3, #0]
		break;
    3d7c:	e6d2      	b.n	3b24 <cbvprintf+0xf0>
			bpe = bps + 5;
    3d7e:	4f31      	ldr	r7, [pc, #196]	; (3e44 <cbvprintf+0x410>)
    3d80:	4606      	mov	r6, r0
			bps = "(nil)";
    3d82:	f1a7 0905 	sub.w	r9, r7, #5
    3d86:	e78c      	b.n	3ca2 <cbvprintf+0x26e>
		} else if (conv->altform_0) {
    3d88:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    3d8a:	bf48      	it	mi
    3d8c:	3301      	addmi	r3, #1
    3d8e:	e791      	b.n	3cb4 <cbvprintf+0x280>
					OUTC(pad);
    3d90:	4618      	mov	r0, r3
    3d92:	4659      	mov	r1, fp
    3d94:	9303      	str	r3, [sp, #12]
    3d96:	47d0      	blx	sl
    3d98:	2800      	cmp	r0, #0
    3d9a:	9b03      	ldr	r3, [sp, #12]
    3d9c:	f6ff af65 	blt.w	3c6a <cbvprintf+0x236>
    3da0:	4642      	mov	r2, r8
				while (width-- > 0) {
    3da2:	2a00      	cmp	r2, #0
    3da4:	eba5 0108 	sub.w	r1, r5, r8
    3da8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3dac:	dcf0      	bgt.n	3d90 <cbvprintf+0x35c>
    3dae:	460d      	mov	r5, r1
		if (sign != 0) {
    3db0:	b136      	cbz	r6, 3dc0 <cbvprintf+0x38c>
			OUTC(sign);
    3db2:	4659      	mov	r1, fp
    3db4:	4630      	mov	r0, r6
    3db6:	47d0      	blx	sl
    3db8:	2800      	cmp	r0, #0
    3dba:	f6ff af56 	blt.w	3c6a <cbvprintf+0x236>
    3dbe:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    3dc0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    3dc4:	06d9      	lsls	r1, r3, #27
    3dc6:	d401      	bmi.n	3dcc <cbvprintf+0x398>
    3dc8:	071a      	lsls	r2, r3, #28
    3dca:	d506      	bpl.n	3dda <cbvprintf+0x3a6>
				OUTC('0');
    3dcc:	4659      	mov	r1, fp
    3dce:	2030      	movs	r0, #48	; 0x30
    3dd0:	47d0      	blx	sl
    3dd2:	2800      	cmp	r0, #0
    3dd4:	f6ff af49 	blt.w	3c6a <cbvprintf+0x236>
    3dd8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    3dda:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    3dde:	06db      	lsls	r3, r3, #27
    3de0:	d507      	bpl.n	3df2 <cbvprintf+0x3be>
				OUTC(conv->specifier);
    3de2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    3de6:	4659      	mov	r1, fp
    3de8:	47d0      	blx	sl
    3dea:	2800      	cmp	r0, #0
    3dec:	f6ff af3d 	blt.w	3c6a <cbvprintf+0x236>
    3df0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    3df2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    3df4:	442e      	add	r6, r5
    3df6:	1b73      	subs	r3, r6, r5
    3df8:	2b00      	cmp	r3, #0
    3dfa:	dc1a      	bgt.n	3e32 <cbvprintf+0x3fe>
			OUTS(bps, bpe);
    3dfc:	463b      	mov	r3, r7
    3dfe:	464a      	mov	r2, r9
    3e00:	4659      	mov	r1, fp
    3e02:	4650      	mov	r0, sl
    3e04:	f01b fce5 	bl	1f7d2 <outs>
    3e08:	2800      	cmp	r0, #0
    3e0a:	f6ff af2e 	blt.w	3c6a <cbvprintf+0x236>
    3e0e:	4405      	add	r5, r0
		while (width > 0) {
    3e10:	44a8      	add	r8, r5
    3e12:	eba8 0305 	sub.w	r3, r8, r5
    3e16:	2b00      	cmp	r3, #0
    3e18:	f77f ae84 	ble.w	3b24 <cbvprintf+0xf0>
			OUTC(' ');
    3e1c:	4659      	mov	r1, fp
    3e1e:	2020      	movs	r0, #32
    3e20:	47d0      	blx	sl
    3e22:	2800      	cmp	r0, #0
    3e24:	f6ff af21 	blt.w	3c6a <cbvprintf+0x236>
    3e28:	3501      	adds	r5, #1
			--width;
    3e2a:	e7f2      	b.n	3e12 <cbvprintf+0x3de>
				char pad = ' ';
    3e2c:	2320      	movs	r3, #32
    3e2e:	4445      	add	r5, r8
    3e30:	e7b6      	b.n	3da0 <cbvprintf+0x36c>
				OUTC('0');
    3e32:	4659      	mov	r1, fp
    3e34:	2030      	movs	r0, #48	; 0x30
    3e36:	47d0      	blx	sl
    3e38:	2800      	cmp	r0, #0
    3e3a:	f6ff af16 	blt.w	3c6a <cbvprintf+0x236>
    3e3e:	3501      	adds	r5, #1
    3e40:	e7d9      	b.n	3df6 <cbvprintf+0x3c2>
    3e42:	bf00      	nop
    3e44:	0002671c 	.word	0x0002671c

00003e48 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    3e48:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    3e4a:	4910      	ldr	r1, [pc, #64]	; (3e8c <enable_logger+0x44>)
    3e4c:	4810      	ldr	r0, [pc, #64]	; (3e90 <enable_logger+0x48>)
{
    3e4e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    3e50:	2200      	movs	r2, #0
    3e52:	f020 fc07 	bl	24664 <k_timer_init>
    3e56:	4d0f      	ldr	r5, [pc, #60]	; (3e94 <enable_logger+0x4c>)
    3e58:	490f      	ldr	r1, [pc, #60]	; (3e98 <enable_logger+0x50>)
    3e5a:	2200      	movs	r2, #0
    3e5c:	2300      	movs	r3, #0
    3e5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3e62:	2400      	movs	r4, #0
    3e64:	230e      	movs	r3, #14
    3e66:	e9cd 3403 	strd	r3, r4, [sp, #12]
    3e6a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3e6e:	4b0b      	ldr	r3, [pc, #44]	; (3e9c <enable_logger+0x54>)
    3e70:	9400      	str	r4, [sp, #0]
    3e72:	f44f 7240 	mov.w	r2, #768	; 0x300
    3e76:	4628      	mov	r0, r5
    3e78:	f01a fca0 	bl	1e7bc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    3e7c:	4908      	ldr	r1, [pc, #32]	; (3ea0 <enable_logger+0x58>)
    3e7e:	4628      	mov	r0, r5
    3e80:	f020 fb04 	bl	2448c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    3e84:	4620      	mov	r0, r4
    3e86:	b009      	add	sp, #36	; 0x24
    3e88:	bd30      	pop	{r4, r5, pc}
    3e8a:	bf00      	nop
    3e8c:	00003ea5 	.word	0x00003ea5
    3e90:	20000b80 	.word	0x20000b80
    3e94:	20000bb8 	.word	0x20000bb8
    3e98:	20006ac0 	.word	0x20006ac0
    3e9c:	000042bd 	.word	0x000042bd
    3ea0:	0002671d 	.word	0x0002671d

00003ea4 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    3ea4:	4801      	ldr	r0, [pc, #4]	; (3eac <log_process_thread_timer_expiry_fn+0x8>)
    3ea6:	f01a bbef 	b.w	1e688 <z_impl_k_sem_give>
    3eaa:	bf00      	nop
    3eac:	20000890 	.word	0x20000890

00003eb0 <log_core_init>:
{
    3eb0:	b508      	push	{r3, lr}
		log_msg_pool_init();
    3eb2:	f000 fa65 	bl	4380 <log_msg_pool_init>
		log_list_init(&list);
    3eb6:	4809      	ldr	r0, [pc, #36]	; (3edc <log_core_init+0x2c>)
    3eb8:	f01b fd57 	bl	1f96a <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    3ebc:	2304      	movs	r3, #4
    3ebe:	2228      	movs	r2, #40	; 0x28
    3ec0:	4907      	ldr	r1, [pc, #28]	; (3ee0 <log_core_init+0x30>)
    3ec2:	4808      	ldr	r0, [pc, #32]	; (3ee4 <log_core_init+0x34>)
    3ec4:	f020 f8dd 	bl	24082 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    3ec8:	4b07      	ldr	r3, [pc, #28]	; (3ee8 <log_core_init+0x38>)
    3eca:	4a08      	ldr	r2, [pc, #32]	; (3eec <log_core_init+0x3c>)
    3ecc:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    3ece:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    3ed2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    3ed6:	f000 bc99 	b.w	480c <log_output_timestamp_freq_set>
    3eda:	bf00      	nop
    3edc:	200015d0 	.word	0x200015d0
    3ee0:	2000b6c0 	.word	0x2000b6c0
    3ee4:	200015d8 	.word	0x200015d8
    3ee8:	20000150 	.word	0x20000150
    3eec:	0001f9a9 	.word	0x0001f9a9

00003ef0 <dropped_notify>:
{
    3ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ef2:	4b0f      	ldr	r3, [pc, #60]	; (3f30 <dropped_notify+0x40>)
    3ef4:	f3bf 8f5b 	dmb	ish
    3ef8:	2500      	movs	r5, #0
    3efa:	e853 7f00 	ldrex	r7, [r3]
    3efe:	e843 5200 	strex	r2, r5, [r3]
    3f02:	2a00      	cmp	r2, #0
    3f04:	d1f9      	bne.n	3efa <dropped_notify+0xa>
    3f06:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    3f0a:	4c0a      	ldr	r4, [pc, #40]	; (3f34 <dropped_notify+0x44>)
    3f0c:	4e0a      	ldr	r6, [pc, #40]	; (3f38 <dropped_notify+0x48>)
    3f0e:	1b36      	subs	r6, r6, r4
    3f10:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    3f12:	42b5      	cmp	r5, r6
    3f14:	db00      	blt.n	3f18 <dropped_notify+0x28>
}
    3f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    3f18:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3f1a:	795b      	ldrb	r3, [r3, #5]
    3f1c:	b12b      	cbz	r3, 3f2a <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    3f1e:	6823      	ldr	r3, [r4, #0]
    3f20:	68db      	ldr	r3, [r3, #12]
    3f22:	b113      	cbz	r3, 3f2a <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    3f24:	4639      	mov	r1, r7
    3f26:	4620      	mov	r0, r4
    3f28:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    3f2a:	3501      	adds	r5, #1
    3f2c:	3410      	adds	r4, #16
    3f2e:	e7f0      	b.n	3f12 <dropped_notify+0x22>
    3f30:	200015c8 	.word	0x200015c8
    3f34:	00024d8c 	.word	0x00024d8c
    3f38:	00024dac 	.word	0x00024dac

00003f3c <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3f3c:	4b06      	ldr	r3, [pc, #24]	; (3f58 <log_dropped+0x1c>)
    3f3e:	f3bf 8f5b 	dmb	ish
    3f42:	e853 2f00 	ldrex	r2, [r3]
    3f46:	3201      	adds	r2, #1
    3f48:	e843 2100 	strex	r1, r2, [r3]
    3f4c:	2900      	cmp	r1, #0
    3f4e:	d1f8      	bne.n	3f42 <log_dropped+0x6>
    3f50:	f3bf 8f5b 	dmb	ish
}
    3f54:	4770      	bx	lr
    3f56:	bf00      	nop
    3f58:	200015c8 	.word	0x200015c8

00003f5c <log_source_name_get>:
    3f5c:	4a04      	ldr	r2, [pc, #16]	; (3f70 <log_source_name_get+0x14>)
    3f5e:	4b05      	ldr	r3, [pc, #20]	; (3f74 <log_source_name_get+0x18>)
    3f60:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    3f62:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    3f66:	bf34      	ite	cc
    3f68:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    3f6c:	2000      	movcs	r0, #0
}
    3f6e:	4770      	bx	lr
    3f70:	00024c24 	.word	0x00024c24
    3f74:	00024d8c 	.word	0x00024d8c

00003f78 <log_backend_enable>:
	id += backend - log_backend_get(0);
    3f78:	4b09      	ldr	r3, [pc, #36]	; (3fa0 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    3f7a:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    3f7c:	1ac3      	subs	r3, r0, r3
    3f7e:	111b      	asrs	r3, r3, #4
    3f80:	3301      	adds	r3, #1
{
    3f82:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    3f84:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    3f86:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    3f88:	4c06      	ldr	r4, [pc, #24]	; (3fa4 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    3f8a:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    3f8c:	2201      	movs	r2, #1
    3f8e:	715a      	strb	r2, [r3, #5]
    3f90:	7822      	ldrb	r2, [r4, #0]
    3f92:	b912      	cbnz	r2, 3f9a <log_backend_enable+0x22>
    3f94:	4804      	ldr	r0, [pc, #16]	; (3fa8 <log_backend_enable+0x30>)
    3f96:	f01a fb77 	bl	1e688 <z_impl_k_sem_give>
	backend_attached = true;
    3f9a:	2301      	movs	r3, #1
    3f9c:	7023      	strb	r3, [r4, #0]
}
    3f9e:	bd10      	pop	{r4, pc}
    3fa0:	00024d8c 	.word	0x00024d8c
    3fa4:	20005ab4 	.word	0x20005ab4
    3fa8:	20000890 	.word	0x20000890

00003fac <log_init>:
{
    3fac:	b570      	push	{r4, r5, r6, lr}
    3fae:	4b11      	ldr	r3, [pc, #68]	; (3ff4 <log_init+0x48>)
    3fb0:	f3bf 8f5b 	dmb	ish
    3fb4:	e853 5f00 	ldrex	r5, [r3]
    3fb8:	1c6a      	adds	r2, r5, #1
    3fba:	e843 2100 	strex	r1, r2, [r3]
    3fbe:	2900      	cmp	r1, #0
    3fc0:	d1f8      	bne.n	3fb4 <log_init+0x8>
    3fc2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    3fc6:	b92d      	cbnz	r5, 3fd4 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    3fc8:	4c0b      	ldr	r4, [pc, #44]	; (3ff8 <log_init+0x4c>)
    3fca:	4e0c      	ldr	r6, [pc, #48]	; (3ffc <log_init+0x50>)
    3fcc:	1b36      	subs	r6, r6, r4
    3fce:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    3fd0:	42b5      	cmp	r5, r6
    3fd2:	db00      	blt.n	3fd6 <log_init+0x2a>
}
    3fd4:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    3fd6:	7b23      	ldrb	r3, [r4, #12]
    3fd8:	b143      	cbz	r3, 3fec <log_init+0x40>
			if (backend->api->init != NULL) {
    3fda:	6823      	ldr	r3, [r4, #0]
    3fdc:	695b      	ldr	r3, [r3, #20]
    3fde:	b103      	cbz	r3, 3fe2 <log_init+0x36>
				backend->api->init();
    3fe0:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    3fe2:	2204      	movs	r2, #4
    3fe4:	2100      	movs	r1, #0
    3fe6:	4620      	mov	r0, r4
    3fe8:	f7ff ffc6 	bl	3f78 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    3fec:	3501      	adds	r5, #1
    3fee:	3410      	adds	r4, #16
    3ff0:	e7ee      	b.n	3fd0 <log_init+0x24>
    3ff2:	bf00      	nop
    3ff4:	200015cc 	.word	0x200015cc
    3ff8:	00024d8c 	.word	0x00024d8c
    3ffc:	00024dac 	.word	0x00024dac

00004000 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    4000:	4b16      	ldr	r3, [pc, #88]	; (405c <log_strdup+0x5c>)
    4002:	4298      	cmp	r0, r3
{
    4004:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4006:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    4008:	d302      	bcc.n	4010 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    400a:	4b15      	ldr	r3, [pc, #84]	; (4060 <log_strdup+0x60>)
    400c:	4298      	cmp	r0, r3
    400e:	d320      	bcc.n	4052 <log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    4010:	4814      	ldr	r0, [pc, #80]	; (4064 <log_strdup+0x64>)
    4012:	2200      	movs	r2, #0
    4014:	2300      	movs	r3, #0
    4016:	a901      	add	r1, sp, #4
    4018:	f019 fe46 	bl	1dca8 <k_mem_slab_alloc>
	if (err != 0) {
    401c:	4605      	mov	r5, r0
    401e:	b9d8      	cbnz	r0, 4058 <log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4020:	2201      	movs	r2, #1
    4022:	9b01      	ldr	r3, [sp, #4]
    4024:	f3bf 8f5b 	dmb	ish
    4028:	e853 1f00 	ldrex	r1, [r3]
    402c:	e843 2000 	strex	r0, r2, [r3]
    4030:	2800      	cmp	r0, #0
    4032:	d1f9      	bne.n	4028 <log_strdup+0x28>
    4034:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    4038:	9801      	ldr	r0, [sp, #4]
    403a:	4621      	mov	r1, r4
    403c:	221f      	movs	r2, #31
    403e:	3004      	adds	r0, #4
    4040:	f01d fafb 	bl	2163a <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    4044:	9c01      	ldr	r4, [sp, #4]
    4046:	237e      	movs	r3, #126	; 0x7e
    4048:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    404c:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    4050:	3404      	adds	r4, #4
}
    4052:	4620      	mov	r0, r4
    4054:	b003      	add	sp, #12
    4056:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    4058:	4c03      	ldr	r4, [pc, #12]	; (4068 <log_strdup+0x68>)
    405a:	e7fa      	b.n	4052 <log_strdup+0x52>
    405c:	000249ac 	.word	0x000249ac
    4060:	00028ac4 	.word	0x00028ac4
    4064:	200015d8 	.word	0x200015d8
    4068:	00026725 	.word	0x00026725

0000406c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    406c:	b148      	cbz	r0, 4082 <log_is_strdup+0x16>
    406e:	4b05      	ldr	r3, [pc, #20]	; (4084 <log_is_strdup+0x18>)
    4070:	4298      	cmp	r0, r3
    4072:	d305      	bcc.n	4080 <log_is_strdup+0x14>
    4074:	33a0      	adds	r3, #160	; 0xa0
    4076:	4298      	cmp	r0, r3
    4078:	bf2c      	ite	cs
    407a:	2000      	movcs	r0, #0
    407c:	2001      	movcc	r0, #1
    407e:	4770      	bx	lr
    4080:	2000      	movs	r0, #0
}
    4082:	4770      	bx	lr
    4084:	2000b6c0 	.word	0x2000b6c0

00004088 <z_impl_log_process>:
{
    4088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    408c:	4b4c      	ldr	r3, [pc, #304]	; (41c0 <z_impl_log_process+0x138>)
    408e:	781b      	ldrb	r3, [r3, #0]
{
    4090:	b085      	sub	sp, #20
    4092:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    4094:	b903      	cbnz	r3, 4098 <z_impl_log_process+0x10>
    4096:	b360      	cbz	r0, 40f2 <z_impl_log_process+0x6a>
    4098:	f04f 0320 	mov.w	r3, #32
    409c:	f3ef 8611 	mrs	r6, BASEPRI
    40a0:	f383 8811 	msr	BASEPRI, r3
    40a4:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    40a8:	4846      	ldr	r0, [pc, #280]	; (41c4 <z_impl_log_process+0x13c>)
    40aa:	f01b fc6e 	bl	1f98a <log_list_head_get>
    40ae:	4605      	mov	r5, r0
	__asm__ volatile(
    40b0:	f386 8811 	msr	BASEPRI, r6
    40b4:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    40b8:	b178      	cbz	r0, 40da <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    40ba:	f3bf 8f5b 	dmb	ish
    40be:	4b42      	ldr	r3, [pc, #264]	; (41c8 <z_impl_log_process+0x140>)
    40c0:	e853 2f00 	ldrex	r2, [r3]
    40c4:	3a01      	subs	r2, #1
    40c6:	e843 2100 	strex	r1, r2, [r3]
    40ca:	2900      	cmp	r1, #0
    40cc:	d1f8      	bne.n	40c0 <z_impl_log_process+0x38>
    40ce:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    40d2:	b194      	cbz	r4, 40fa <z_impl_log_process+0x72>
	log_msg_put(msg);
    40d4:	4628      	mov	r0, r5
    40d6:	f01b fd71 	bl	1fbbc <log_msg_put>
	if (!bypass && dropped_cnt) {
    40da:	b924      	cbnz	r4, 40e6 <z_impl_log_process+0x5e>
    40dc:	4b3b      	ldr	r3, [pc, #236]	; (41cc <z_impl_log_process+0x144>)
    40de:	681b      	ldr	r3, [r3, #0]
    40e0:	b10b      	cbz	r3, 40e6 <z_impl_log_process+0x5e>
		dropped_notify();
    40e2:	f7ff ff05 	bl	3ef0 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    40e6:	4837      	ldr	r0, [pc, #220]	; (41c4 <z_impl_log_process+0x13c>)
    40e8:	f01b fc4d 	bl	1f986 <log_list_head_peek>
    40ec:	1e04      	subs	r4, r0, #0
    40ee:	bf18      	it	ne
    40f0:	2401      	movne	r4, #1
}
    40f2:	4620      	mov	r0, r4
    40f4:	b005      	add	sp, #20
    40f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    40fa:	4b35      	ldr	r3, [pc, #212]	; (41d0 <z_impl_log_process+0x148>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    40fc:	781b      	ldrb	r3, [r3, #0]
    40fe:	b9cb      	cbnz	r3, 4134 <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    4100:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    4102:	07db      	lsls	r3, r3, #31
    4104:	d416      	bmi.n	4134 <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
    4106:	f01b fd6c 	bl	1fbe2 <log_msg_str_get>
    410a:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    410c:	4628      	mov	r0, r5
    410e:	f01b fd33 	bl	1fb78 <log_msg_nargs_get>
    4112:	4601      	mov	r1, r0
    4114:	4640      	mov	r0, r8
    4116:	f01b fc4b 	bl	1f9b0 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    411a:	4f2e      	ldr	r7, [pc, #184]	; (41d4 <z_impl_log_process+0x14c>)
    411c:	4b2e      	ldr	r3, [pc, #184]	; (41d8 <z_impl_log_process+0x150>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    411e:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 41f4 <z_impl_log_process+0x16c>
    4122:	1bdb      	subs	r3, r3, r7
    4124:	08db      	lsrs	r3, r3, #3
    4126:	9303      	str	r3, [sp, #12]
    4128:	4b2c      	ldr	r3, [pc, #176]	; (41dc <z_impl_log_process+0x154>)
    412a:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    412c:	4606      	mov	r6, r0
    412e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    4132:	b936      	cbnz	r6, 4142 <z_impl_log_process+0xba>
    4134:	4e2a      	ldr	r6, [pc, #168]	; (41e0 <z_impl_log_process+0x158>)
    4136:	4f2b      	ldr	r7, [pc, #172]	; (41e4 <z_impl_log_process+0x15c>)
    4138:	1bbf      	subs	r7, r7, r6
    413a:	113f      	asrs	r7, r7, #4
    413c:	f04f 0800 	mov.w	r8, #0
    4140:	e03a      	b.n	41b8 <z_impl_log_process+0x130>
		idx = 31 - __builtin_clz(mask);
    4142:	fab6 f186 	clz	r1, r6
    4146:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    414a:	4649      	mov	r1, r9
    414c:	4628      	mov	r0, r5
    414e:	f01b fd16 	bl	1fb7e <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    4152:	4b25      	ldr	r3, [pc, #148]	; (41e8 <z_impl_log_process+0x160>)
    4154:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    4156:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    4158:	d302      	bcc.n	4160 <z_impl_log_process+0xd8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    415a:	4b24      	ldr	r3, [pc, #144]	; (41ec <z_impl_log_process+0x164>)
    415c:	4298      	cmp	r0, r3
    415e:	d31a      	bcc.n	4196 <z_impl_log_process+0x10e>
    4160:	4608      	mov	r0, r1
    4162:	f7ff ff83 	bl	406c <log_is_strdup>
    4166:	4602      	mov	r2, r0
    4168:	b9a8      	cbnz	r0, 4196 <z_impl_log_process+0x10e>
    416a:	4b21      	ldr	r3, [pc, #132]	; (41f0 <z_impl_log_process+0x168>)
    416c:	4299      	cmp	r1, r3
    416e:	d012      	beq.n	4196 <z_impl_log_process+0x10e>
	return msg->hdr.ids.source_id;
    4170:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    4172:	9803      	ldr	r0, [sp, #12]
    4174:	0999      	lsrs	r1, r3, #6
    4176:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    417a:	ea4f 138a 	mov.w	r3, sl, lsl #6
    417e:	f043 0301 	orr.w	r3, r3, #1
	return __log_const_start[source_id].name;
    4182:	bf88      	it	hi
    4184:	f857 2031 	ldrhi.w	r2, [r7, r1, lsl #3]
    4188:	f8ad 3000 	strh.w	r3, [sp]
    418c:	4649      	mov	r1, r9
    418e:	4643      	mov	r3, r8
    4190:	4658      	mov	r0, fp
    4192:	f01b fc67 	bl	1fa64 <log_3>
		mask &= ~BIT(idx);
    4196:	2101      	movs	r1, #1
    4198:	fa01 f109 	lsl.w	r1, r1, r9
    419c:	ea26 0601 	bic.w	r6, r6, r1
    41a0:	e7c7      	b.n	4132 <z_impl_log_process+0xaa>
	return backend->cb->active;
    41a2:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    41a4:	795b      	ldrb	r3, [r3, #5]
    41a6:	b123      	cbz	r3, 41b2 <z_impl_log_process+0x12a>
	backend->api->put(backend, msg);
    41a8:	6833      	ldr	r3, [r6, #0]
    41aa:	4629      	mov	r1, r5
    41ac:	681b      	ldr	r3, [r3, #0]
    41ae:	4630      	mov	r0, r6
    41b0:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    41b2:	f108 0801 	add.w	r8, r8, #1
    41b6:	3610      	adds	r6, #16
    41b8:	45b8      	cmp	r8, r7
    41ba:	dbf2      	blt.n	41a2 <z_impl_log_process+0x11a>
    41bc:	e78a      	b.n	40d4 <z_impl_log_process+0x4c>
    41be:	bf00      	nop
    41c0:	20005ab4 	.word	0x20005ab4
    41c4:	200015d0 	.word	0x200015d0
    41c8:	200015c4 	.word	0x200015c4
    41cc:	200015c8 	.word	0x200015c8
    41d0:	20005ab5 	.word	0x20005ab5
    41d4:	00024c24 	.word	0x00024c24
    41d8:	00024d8c 	.word	0x00024d8c
    41dc:	00024d24 	.word	0x00024d24
    41e0:	00024d8c 	.word	0x00024d8c
    41e4:	00024dac 	.word	0x00024dac
    41e8:	000249ac 	.word	0x000249ac
    41ec:	00028ac4 	.word	0x00028ac4
    41f0:	00026725 	.word	0x00026725
    41f4:	0002673f 	.word	0x0002673f

000041f8 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    41f8:	4b29      	ldr	r3, [pc, #164]	; (42a0 <msg_finalize+0xa8>)
{
    41fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    41fc:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    41fe:	8141      	strh	r1, [r0, #10]
{
    4200:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    4202:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4204:	4d27      	ldr	r5, [pc, #156]	; (42a4 <msg_finalize+0xac>)
    4206:	60e0      	str	r0, [r4, #12]
    4208:	f3bf 8f5b 	dmb	ish
    420c:	e855 3f00 	ldrex	r3, [r5]
    4210:	3301      	adds	r3, #1
    4212:	e845 3200 	strex	r2, r3, [r5]
    4216:	2a00      	cmp	r2, #0
    4218:	d1f8      	bne.n	420c <msg_finalize+0x14>
    421a:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    421e:	f04f 0320 	mov.w	r3, #32
    4222:	f3ef 8611 	mrs	r6, BASEPRI
    4226:	f383 8811 	msr	BASEPRI, r3
    422a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    422e:	481e      	ldr	r0, [pc, #120]	; (42a8 <msg_finalize+0xb0>)
    4230:	4621      	mov	r1, r4
    4232:	f01b fb9e 	bl	1f972 <log_list_add_tail>
	__asm__ volatile(
    4236:	f386 8811 	msr	BASEPRI, r6
    423a:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    423e:	4b1b      	ldr	r3, [pc, #108]	; (42ac <msg_finalize+0xb4>)
    4240:	781b      	ldrb	r3, [r3, #0]
    4242:	b183      	cbz	r3, 4266 <msg_finalize+0x6e>
	__asm__ volatile(
    4244:	f04f 0320 	mov.w	r3, #32
    4248:	f3ef 8411 	mrs	r4, BASEPRI
    424c:	f383 8811 	msr	BASEPRI, r3
    4250:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    4254:	2000      	movs	r0, #0
    4256:	f7ff ff17 	bl	4088 <z_impl_log_process>
	__asm__ volatile(
    425a:	f384 8811 	msr	BASEPRI, r4
    425e:	f3bf 8f6f 	isb	sy
}
    4262:	b002      	add	sp, #8
    4264:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    4266:	4a12      	ldr	r2, [pc, #72]	; (42b0 <msg_finalize+0xb8>)
    4268:	682b      	ldr	r3, [r5, #0]
    426a:	6812      	ldr	r2, [r2, #0]
    426c:	2a00      	cmp	r2, #0
    426e:	d0f8      	beq.n	4262 <msg_finalize+0x6a>
    4270:	2b01      	cmp	r3, #1
    4272:	d10a      	bne.n	428a <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    4274:	2200      	movs	r2, #0
    4276:	2300      	movs	r3, #0
    4278:	e9cd 2300 	strd	r2, r3, [sp]
    427c:	480d      	ldr	r0, [pc, #52]	; (42b4 <msg_finalize+0xbc>)
    427e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    4282:	2300      	movs	r3, #0
    4284:	f01a fd48 	bl	1ed18 <z_impl_k_timer_start>
    4288:	e7eb      	b.n	4262 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    428a:	2b0a      	cmp	r3, #10
    428c:	d1e9      	bne.n	4262 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    428e:	4809      	ldr	r0, [pc, #36]	; (42b4 <msg_finalize+0xbc>)
    4290:	f020 f9f4 	bl	2467c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    4294:	4808      	ldr	r0, [pc, #32]	; (42b8 <msg_finalize+0xc0>)
}
    4296:	b002      	add	sp, #8
    4298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    429c:	f01a b9f4 	b.w	1e688 <z_impl_k_sem_give>
    42a0:	20000150 	.word	0x20000150
    42a4:	200015c4 	.word	0x200015c4
    42a8:	200015d0 	.word	0x200015d0
    42ac:	20005ab5 	.word	0x20005ab5
    42b0:	200015f4 	.word	0x200015f4
    42b4:	20000b80 	.word	0x20000b80
    42b8:	20000890 	.word	0x20000890

000042bc <log_process_thread_func>:
{
    42bc:	b510      	push	{r4, lr}
	log_init();
    42be:	f7ff fe75 	bl	3fac <log_init>
	return z_impl_k_current_get();
    42c2:	f01a f9db 	bl	1e67c <z_impl_k_current_get>
	proc_tid = process_tid;
    42c6:	4b0c      	ldr	r3, [pc, #48]	; (42f8 <log_process_thread_func+0x3c>)
    42c8:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    42ca:	b130      	cbz	r0, 42da <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    42cc:	4b0b      	ldr	r3, [pc, #44]	; (42fc <log_process_thread_func+0x40>)
	    process_tid &&
    42ce:	681b      	ldr	r3, [r3, #0]
    42d0:	2b09      	cmp	r3, #9
    42d2:	dd02      	ble.n	42da <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    42d4:	480a      	ldr	r0, [pc, #40]	; (4300 <log_process_thread_func+0x44>)
    42d6:	f01a f9d7 	bl	1e688 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    42da:	4c09      	ldr	r4, [pc, #36]	; (4300 <log_process_thread_func+0x44>)
    42dc:	2000      	movs	r0, #0
    42de:	f7ff fed3 	bl	4088 <z_impl_log_process>
		if (log_process(false) == false) {
    42e2:	2800      	cmp	r0, #0
    42e4:	d1fa      	bne.n	42dc <log_process_thread_func+0x20>
    42e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    42ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    42ee:	4620      	mov	r0, r4
    42f0:	f01a f9f0 	bl	1e6d4 <z_impl_k_sem_take>
    42f4:	e7f2      	b.n	42dc <log_process_thread_func+0x20>
    42f6:	bf00      	nop
    42f8:	200015f4 	.word	0x200015f4
    42fc:	200015c4 	.word	0x200015c4
    4300:	20000890 	.word	0x20000890

00004304 <z_impl_log_panic>:
{
    4304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    4306:	4f0e      	ldr	r7, [pc, #56]	; (4340 <z_impl_log_panic+0x3c>)
    4308:	783d      	ldrb	r5, [r7, #0]
    430a:	b975      	cbnz	r5, 432a <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    430c:	4c0d      	ldr	r4, [pc, #52]	; (4344 <z_impl_log_panic+0x40>)
    430e:	4e0e      	ldr	r6, [pc, #56]	; (4348 <z_impl_log_panic+0x44>)
	log_init();
    4310:	f7ff fe4c 	bl	3fac <log_init>
    4314:	1b36      	subs	r6, r6, r4
    4316:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    4318:	42b5      	cmp	r5, r6
    431a:	db07      	blt.n	432c <z_impl_log_panic+0x28>
    431c:	2000      	movs	r0, #0
    431e:	f7ff feb3 	bl	4088 <z_impl_log_process>
		while (log_process(false) == true) {
    4322:	2800      	cmp	r0, #0
    4324:	d1fa      	bne.n	431c <z_impl_log_panic+0x18>
	panic_mode = true;
    4326:	2301      	movs	r3, #1
    4328:	703b      	strb	r3, [r7, #0]
}
    432a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    432c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    432e:	795b      	ldrb	r3, [r3, #5]
    4330:	b11b      	cbz	r3, 433a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    4332:	6823      	ldr	r3, [r4, #0]
    4334:	4620      	mov	r0, r4
    4336:	691b      	ldr	r3, [r3, #16]
    4338:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    433a:	3501      	adds	r5, #1
    433c:	3410      	adds	r4, #16
    433e:	e7eb      	b.n	4318 <z_impl_log_panic+0x14>
    4340:	20005ab5 	.word	0x20005ab5
    4344:	00024d8c 	.word	0x00024d8c
    4348:	00024dac 	.word	0x00024dac

0000434c <log_free>:
{
    434c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    434e:	3804      	subs	r0, #4
    4350:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4352:	f3bf 8f5b 	dmb	ish
    4356:	e850 3f00 	ldrex	r3, [r0]
    435a:	1e5a      	subs	r2, r3, #1
    435c:	e840 2100 	strex	r1, r2, [r0]
    4360:	2900      	cmp	r1, #0
    4362:	d1f8      	bne.n	4356 <log_free+0xa>
    4364:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    4368:	2b01      	cmp	r3, #1
    436a:	d103      	bne.n	4374 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    436c:	4803      	ldr	r0, [pc, #12]	; (437c <log_free+0x30>)
    436e:	a901      	add	r1, sp, #4
    4370:	f019 fccc 	bl	1dd0c <k_mem_slab_free>
}
    4374:	b003      	add	sp, #12
    4376:	f85d fb04 	ldr.w	pc, [sp], #4
    437a:	bf00      	nop
    437c:	200015d8 	.word	0x200015d8

00004380 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    4380:	2320      	movs	r3, #32
    4382:	4902      	ldr	r1, [pc, #8]	; (438c <log_msg_pool_init+0xc>)
    4384:	4802      	ldr	r0, [pc, #8]	; (4390 <log_msg_pool_init+0x10>)
    4386:	461a      	mov	r2, r3
    4388:	f01f be7b 	b.w	24082 <k_mem_slab_init>
    438c:	2000b760 	.word	0x2000b760
    4390:	200015f8 	.word	0x200015f8

00004394 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    4394:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    4396:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    4398:	4d09      	ldr	r5, [pc, #36]	; (43c0 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    439a:	9301      	str	r3, [sp, #4]
    439c:	2001      	movs	r0, #1
    439e:	f7ff fe73 	bl	4088 <z_impl_log_process>
    43a2:	4604      	mov	r4, r0
			log_dropped();
    43a4:	f7ff fdca 	bl	3f3c <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    43a8:	2200      	movs	r2, #0
    43aa:	2300      	movs	r3, #0
    43ac:	a901      	add	r1, sp, #4
    43ae:	4628      	mov	r0, r5
    43b0:	f019 fc7a 	bl	1dca8 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    43b4:	b108      	cbz	r0, 43ba <log_msg_no_space_handle+0x26>
    43b6:	2c00      	cmp	r4, #0
    43b8:	d1f0      	bne.n	439c <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    43ba:	9801      	ldr	r0, [sp, #4]
    43bc:	b003      	add	sp, #12
    43be:	bd30      	pop	{r4, r5, pc}
    43c0:	200015f8 	.word	0x200015f8

000043c4 <log_msg_chunk_alloc>:
{
    43c4:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    43c6:	2300      	movs	r3, #0
    43c8:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    43ca:	4807      	ldr	r0, [pc, #28]	; (43e8 <log_msg_chunk_alloc+0x24>)
    43cc:	2200      	movs	r2, #0
    43ce:	2300      	movs	r3, #0
    43d0:	a901      	add	r1, sp, #4
    43d2:	f019 fc69 	bl	1dca8 <k_mem_slab_alloc>
	if (err != 0) {
    43d6:	b110      	cbz	r0, 43de <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    43d8:	f7ff ffdc 	bl	4394 <log_msg_no_space_handle>
    43dc:	9001      	str	r0, [sp, #4]
}
    43de:	9801      	ldr	r0, [sp, #4]
    43e0:	b003      	add	sp, #12
    43e2:	f85d fb04 	ldr.w	pc, [sp], #4
    43e6:	bf00      	nop
    43e8:	200015f8 	.word	0x200015f8

000043ec <msg_free>:
{
    43ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    43ee:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    43f0:	7a45      	ldrb	r5, [r0, #9]
{
    43f2:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    43f4:	092d      	lsrs	r5, r5, #4
{
    43f6:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    43f8:	07d8      	lsls	r0, r3, #31
    43fa:	d41c      	bmi.n	4436 <msg_free+0x4a>
    43fc:	b1dd      	cbz	r5, 4436 <msg_free+0x4a>
		uint32_t smask = 0;
    43fe:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    4400:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    4402:	9801      	ldr	r0, [sp, #4]
    4404:	4631      	mov	r1, r6
    4406:	f01b fbba 	bl	1fb7e <log_msg_arg_get>
    440a:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    440c:	f7ff fe2e 	bl	406c <log_is_strdup>
    4410:	b170      	cbz	r0, 4430 <msg_free+0x44>
				if (smask == 0) {
    4412:	b934      	cbnz	r4, 4422 <msg_free+0x36>
					smask = z_log_get_s_mask(
    4414:	9b01      	ldr	r3, [sp, #4]
    4416:	4629      	mov	r1, r5
    4418:	6918      	ldr	r0, [r3, #16]
    441a:	f01b fac9 	bl	1f9b0 <z_log_get_s_mask>
					if (smask == 0) {
    441e:	4604      	mov	r4, r0
    4420:	b148      	cbz	r0, 4436 <msg_free+0x4a>
				if (smask & BIT(i)) {
    4422:	fa24 f306 	lsr.w	r3, r4, r6
    4426:	07d9      	lsls	r1, r3, #31
    4428:	d502      	bpl.n	4430 <msg_free+0x44>
					log_free(buf);
    442a:	4638      	mov	r0, r7
    442c:	f7ff ff8e 	bl	434c <log_free>
		for (i = 0; i < nargs; i++) {
    4430:	3601      	adds	r6, #1
    4432:	42ae      	cmp	r6, r5
    4434:	d3e5      	bcc.n	4402 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    4436:	9b01      	ldr	r3, [sp, #4]
    4438:	7a1a      	ldrb	r2, [r3, #8]
    443a:	0792      	lsls	r2, r2, #30
    443c:	d504      	bpl.n	4448 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    443e:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    4440:	4c08      	ldr	r4, [pc, #32]	; (4464 <msg_free+0x78>)
    4442:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    4444:	9b03      	ldr	r3, [sp, #12]
    4446:	b92b      	cbnz	r3, 4454 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    4448:	4806      	ldr	r0, [pc, #24]	; (4464 <msg_free+0x78>)
    444a:	a901      	add	r1, sp, #4
    444c:	f019 fc5e 	bl	1dd0c <k_mem_slab_free>
}
    4450:	b005      	add	sp, #20
    4452:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    4454:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    4456:	a903      	add	r1, sp, #12
    4458:	4620      	mov	r0, r4
    445a:	f019 fc57 	bl	1dd0c <k_mem_slab_free>
		cont = next;
    445e:	9503      	str	r5, [sp, #12]
    4460:	e7f0      	b.n	4444 <msg_free+0x58>
    4462:	bf00      	nop
    4464:	200015f8 	.word	0x200015f8

00004468 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    4468:	b40e      	push	{r1, r2, r3}
    446a:	b503      	push	{r0, r1, lr}
    446c:	ab03      	add	r3, sp, #12
    446e:	4601      	mov	r1, r0
    4470:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    4474:	4804      	ldr	r0, [pc, #16]	; (4488 <print_formatted+0x20>)
	va_start(args, fmt);
    4476:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    4478:	f7ff fadc 	bl	3a34 <cbvprintf>
	va_end(args);

	return length;
}
    447c:	b002      	add	sp, #8
    447e:	f85d eb04 	ldr.w	lr, [sp], #4
    4482:	b003      	add	sp, #12
    4484:	4770      	bx	lr
    4486:	bf00      	nop
    4488:	0001ff8b 	.word	0x0001ff8b

0000448c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    448c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4490:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    4492:	f011 0402 	ands.w	r4, r1, #2
{
    4496:	4690      	mov	r8, r2
    4498:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    449c:	4606      	mov	r6, r0
    449e:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    44a0:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    44a4:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    44a8:	d007      	beq.n	44ba <prefix_print+0x2e>
	if (!format) {
    44aa:	f011 0f44 	tst.w	r1, #68	; 0x44
    44ae:	d137      	bne.n	4520 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    44b0:	4932      	ldr	r1, [pc, #200]	; (457c <prefix_print+0xf0>)
    44b2:	f7ff ffd9 	bl	4468 <print_formatted>
			length = print_formatted(log_output,
    44b6:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    44b8:	460c      	mov	r4, r1
	if (color) {
    44ba:	f1b9 0f00 	cmp.w	r9, #0
    44be:	d00a      	beq.n	44d6 <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
    44c0:	4b2f      	ldr	r3, [pc, #188]	; (4580 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    44c2:	4930      	ldr	r1, [pc, #192]	; (4584 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    44c4:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    44c8:	4b2f      	ldr	r3, [pc, #188]	; (4588 <prefix_print+0xfc>)
    44ca:	4630      	mov	r0, r6
    44cc:	2a00      	cmp	r2, #0
    44ce:	bf08      	it	eq
    44d0:	461a      	moveq	r2, r3
    44d2:	f7ff ffc9 	bl	4468 <print_formatted>
	if (level_on) {
    44d6:	b13d      	cbz	r5, 44e8 <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    44d8:	4b2c      	ldr	r3, [pc, #176]	; (458c <prefix_print+0x100>)
    44da:	492d      	ldr	r1, [pc, #180]	; (4590 <prefix_print+0x104>)
    44dc:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    44e0:	4630      	mov	r0, r6
    44e2:	f7ff ffc1 	bl	4468 <print_formatted>
    44e6:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    44e8:	f1b8 0f00 	cmp.w	r8, #0
    44ec:	d043      	beq.n	4576 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    44ee:	2301      	movs	r3, #1
    44f0:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    44f4:	4b27      	ldr	r3, [pc, #156]	; (4594 <prefix_print+0x108>)
    44f6:	f017 0f10 	tst.w	r7, #16
    44fa:	4f27      	ldr	r7, [pc, #156]	; (4598 <prefix_print+0x10c>)
    44fc:	bf18      	it	ne
    44fe:	461f      	movne	r7, r3
    4500:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    4504:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    4508:	f7ff fd28 	bl	3f5c <log_source_name_get>
    450c:	4639      	mov	r1, r7
    450e:	4602      	mov	r2, r0
    4510:	4630      	mov	r0, r6
    4512:	f7ff ffa9 	bl	4468 <print_formatted>
    4516:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    4518:	4420      	add	r0, r4
    451a:	b005      	add	sp, #20
    451c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    4520:	4b1e      	ldr	r3, [pc, #120]	; (459c <prefix_print+0x110>)
    4522:	6819      	ldr	r1, [r3, #0]
    4524:	2900      	cmp	r1, #0
    4526:	d0c7      	beq.n	44b8 <prefix_print+0x2c>
		timestamp /= timestamp_div;
    4528:	4b1d      	ldr	r3, [pc, #116]	; (45a0 <prefix_print+0x114>)
    452a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    452e:	681b      	ldr	r3, [r3, #0]
    4530:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    4534:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    4538:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    453c:	fbb4 f2fe 	udiv	r2, r4, lr
    4540:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    4544:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    4548:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    454c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    4550:	fbb4 fbf1 	udiv	fp, r4, r1
    4554:	fb01 441b 	mls	r4, r1, fp, r4
    4558:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    455c:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    4560:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    4564:	e9cd b101 	strd	fp, r1, [sp, #4]
    4568:	fb0a e113 	mls	r1, sl, r3, lr
    456c:	9100      	str	r1, [sp, #0]
    456e:	490d      	ldr	r1, [pc, #52]	; (45a4 <prefix_print+0x118>)
    4570:	f7ff ff7a 	bl	4468 <print_formatted>
    4574:	e79f      	b.n	44b6 <prefix_print+0x2a>
	total += print_formatted(log_output,
    4576:	4f08      	ldr	r7, [pc, #32]	; (4598 <prefix_print+0x10c>)
    4578:	e7c2      	b.n	4500 <prefix_print+0x74>
    457a:	bf00      	nop
    457c:	00026790 	.word	0x00026790
    4580:	00024eb8 	.word	0x00024eb8
    4584:	00027b8c 	.word	0x00027b8c
    4588:	00026782 	.word	0x00026782
    458c:	00024ecc 	.word	0x00024ecc
    4590:	000267b5 	.word	0x000267b5
    4594:	0002678c 	.word	0x0002678c
    4598:	00026787 	.word	0x00026787
    459c:	20001614 	.word	0x20001614
    45a0:	20001618 	.word	0x20001618
    45a4:	00026799 	.word	0x00026799

000045a8 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    45a8:	b538      	push	{r3, r4, r5, lr}
    45aa:	460c      	mov	r4, r1
	if (color) {
    45ac:	07e1      	lsls	r1, r4, #31
{
    45ae:	4605      	mov	r5, r0
	if (color) {
    45b0:	d503      	bpl.n	45ba <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    45b2:	4a08      	ldr	r2, [pc, #32]	; (45d4 <postfix_print+0x2c>)
    45b4:	4908      	ldr	r1, [pc, #32]	; (45d8 <postfix_print+0x30>)
    45b6:	f7ff ff57 	bl	4468 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    45ba:	06e2      	lsls	r2, r4, #27
    45bc:	d408      	bmi.n	45d0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    45be:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    45c0:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    45c2:	bf4c      	ite	mi
    45c4:	4905      	ldrmi	r1, [pc, #20]	; (45dc <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    45c6:	4906      	ldrpl	r1, [pc, #24]	; (45e0 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    45c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    45cc:	f7ff bf4c 	b.w	4468 <print_formatted>
}
    45d0:	bd38      	pop	{r3, r4, r5, pc}
    45d2:	bf00      	nop
    45d4:	00026782 	.word	0x00026782
    45d8:	00027b8c 	.word	0x00027b8c
    45dc:	0002670b 	.word	0x0002670b
    45e0:	0002670a 	.word	0x0002670a

000045e4 <hexdump_line_print>:
{
    45e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    45e8:	461d      	mov	r5, r3
    45ea:	9b08      	ldr	r3, [sp, #32]
    45ec:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    45ee:	06da      	lsls	r2, r3, #27
{
    45f0:	4604      	mov	r4, r0
    45f2:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    45f4:	d405      	bmi.n	4602 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    45f6:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    45f8:	bf4c      	ite	mi
    45fa:	492a      	ldrmi	r1, [pc, #168]	; (46a4 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    45fc:	492a      	ldrpl	r1, [pc, #168]	; (46a8 <hexdump_line_print+0xc4>)
    45fe:	f7ff ff33 	bl	4468 <print_formatted>
		print_formatted(log_output, " ");
    4602:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 46b0 <hexdump_line_print+0xcc>
{
    4606:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    460a:	45a8      	cmp	r8, r5
    460c:	db2a      	blt.n	4664 <hexdump_line_print+0x80>
			print_formatted(log_output, "   ");
    460e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 46b4 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    4612:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 46b8 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    4616:	f8df a098 	ldr.w	sl, [pc, #152]	; 46b0 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    461a:	2500      	movs	r5, #0
		if (i < length) {
    461c:	42bd      	cmp	r5, r7
    461e:	d22f      	bcs.n	4680 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    4620:	5d72      	ldrb	r2, [r6, r5]
    4622:	4649      	mov	r1, r9
    4624:	4620      	mov	r0, r4
    4626:	f7ff ff1f 	bl	4468 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    462a:	3501      	adds	r5, #1
    462c:	2d10      	cmp	r5, #16
    462e:	d120      	bne.n	4672 <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    4630:	491e      	ldr	r1, [pc, #120]	; (46ac <hexdump_line_print+0xc8>)
			print_formatted(log_output, " ");
    4632:	f8df 807c 	ldr.w	r8, [pc, #124]	; 46b0 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    4636:	f8df 9084 	ldr.w	r9, [pc, #132]	; 46bc <hexdump_line_print+0xd8>
	print_formatted(log_output, "|");
    463a:	4620      	mov	r0, r4
    463c:	f7ff ff14 	bl	4468 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4640:	2500      	movs	r5, #0
		if (i < length) {
    4642:	42af      	cmp	r7, r5
    4644:	d928      	bls.n	4698 <hexdump_line_print+0xb4>
			      isprint((int)c) ? c : '.');
    4646:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    4648:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    464c:	2b5f      	cmp	r3, #95	; 0x5f
    464e:	bf28      	it	cs
    4650:	222e      	movcs	r2, #46	; 0x2e
    4652:	4649      	mov	r1, r9
    4654:	4620      	mov	r0, r4
    4656:	f7ff ff07 	bl	4468 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    465a:	3501      	adds	r5, #1
    465c:	2d10      	cmp	r5, #16
    465e:	d114      	bne.n	468a <hexdump_line_print+0xa6>
}
    4660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    4664:	4649      	mov	r1, r9
    4666:	4620      	mov	r0, r4
    4668:	f7ff fefe 	bl	4468 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    466c:	f108 0801 	add.w	r8, r8, #1
    4670:	e7cb      	b.n	460a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    4672:	076a      	lsls	r2, r5, #29
    4674:	d1d2      	bne.n	461c <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    4676:	4651      	mov	r1, sl
    4678:	4620      	mov	r0, r4
    467a:	f7ff fef5 	bl	4468 <print_formatted>
    467e:	e7cd      	b.n	461c <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    4680:	4641      	mov	r1, r8
    4682:	4620      	mov	r0, r4
    4684:	f7ff fef0 	bl	4468 <print_formatted>
    4688:	e7cf      	b.n	462a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    468a:	076b      	lsls	r3, r5, #29
    468c:	d1d9      	bne.n	4642 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    468e:	4641      	mov	r1, r8
    4690:	4620      	mov	r0, r4
    4692:	f7ff fee9 	bl	4468 <print_formatted>
    4696:	e7d4      	b.n	4642 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    4698:	4641      	mov	r1, r8
    469a:	4620      	mov	r0, r4
    469c:	f7ff fee4 	bl	4468 <print_formatted>
    46a0:	e7db      	b.n	465a <hexdump_line_print+0x76>
    46a2:	bf00      	nop
    46a4:	0002670b 	.word	0x0002670b
    46a8:	0002670a 	.word	0x0002670a
    46ac:	000267c5 	.word	0x000267c5
    46b0:	000267c3 	.word	0x000267c3
    46b4:	000267c1 	.word	0x000267c1
    46b8:	000267bb 	.word	0x000267bb
    46bc:	000267c7 	.word	0x000267c7

000046c0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    46c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    46c4:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    46c6:	f013 0807 	ands.w	r8, r3, #7
{
    46ca:	4617      	mov	r7, r2
    46cc:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    46ce:	7a0a      	ldrb	r2, [r1, #8]
    46d0:	4605      	mov	r5, r0
    46d2:	460e      	mov	r6, r1
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    46d4:	d020      	beq.n	4718 <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
    46d6:	8949      	ldrh	r1, [r1, #10]
    46d8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    46dc:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    46de:	43d2      	mvns	r2, r2
    46e0:	e9cd 8300 	strd	r8, r3, [sp]
    46e4:	9102      	str	r1, [sp, #8]
    46e6:	68f3      	ldr	r3, [r6, #12]
    46e8:	f002 0201 	and.w	r2, r2, #1
    46ec:	4639      	mov	r1, r7
    46ee:	f7ff fecd 	bl	448c <prefix_print>
    46f2:	4681      	mov	r9, r0
    46f4:	7a34      	ldrb	r4, [r6, #8]
    46f6:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    46f8:	f014 0401 	ands.w	r4, r4, #1
    46fc:	d00e      	beq.n	471c <log_output_msg_process+0x5c>
		std_print(msg, log_output);
    46fe:	4629      	mov	r1, r5
    4700:	4630      	mov	r0, r6
    4702:	f01b fad8 	bl	1fcb6 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    4706:	f1b8 0f00 	cmp.w	r8, #0
    470a:	d02b      	beq.n	4764 <log_output_msg_process+0xa4>
		postfix_print(log_output, flags, level);
    470c:	4642      	mov	r2, r8
    470e:	4639      	mov	r1, r7
    4710:	4628      	mov	r0, r5
    4712:	f7ff ff49 	bl	45a8 <postfix_print>
    4716:	e025      	b.n	4764 <log_output_msg_process+0xa4>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    4718:	46c1      	mov	r9, r8
    471a:	e7eb      	b.n	46f4 <log_output_msg_process+0x34>
	} else if (raw_string) {
    471c:	f1b8 0f00 	cmp.w	r8, #0
    4720:	d126      	bne.n	4770 <log_output_msg_process+0xb0>
	size_t offset = 0;
    4722:	4627      	mov	r7, r4
		length = log_output->size;
    4724:	68eb      	ldr	r3, [r5, #12]
    4726:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    4728:	aa06      	add	r2, sp, #24
    472a:	463b      	mov	r3, r7
    472c:	68a9      	ldr	r1, [r5, #8]
    472e:	4630      	mov	r0, r6
    4730:	f01b faad 	bl	1fc8e <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    4734:	9a06      	ldr	r2, [sp, #24]
    4736:	686b      	ldr	r3, [r5, #4]
    4738:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    473a:	b13a      	cbz	r2, 474c <log_output_msg_process+0x8c>
			eol = (log_output->buf[length - 1] == '\n');
    473c:	68ab      	ldr	r3, [r5, #8]
    473e:	4413      	add	r3, r2
    4740:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    4744:	f1a4 030a 	sub.w	r3, r4, #10
    4748:	425c      	negs	r4, r3
    474a:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    474c:	4628      	mov	r0, r5
    474e:	f01b fc0f 	bl	1ff70 <log_output_flush>
		offset += length;
    4752:	9b06      	ldr	r3, [sp, #24]
    4754:	441f      	add	r7, r3
	} while (length > 0);
    4756:	2b00      	cmp	r3, #0
    4758:	d1e4      	bne.n	4724 <log_output_msg_process+0x64>
	if (eol) {
    475a:	b11c      	cbz	r4, 4764 <log_output_msg_process+0xa4>
		print_formatted(log_output, "\r");
    475c:	4913      	ldr	r1, [pc, #76]	; (47ac <log_output_msg_process+0xec>)
    475e:	4628      	mov	r0, r5
    4760:	f7ff fe82 	bl	4468 <print_formatted>
	}

	log_output_flush(log_output);
    4764:	4628      	mov	r0, r5
    4766:	f01b fc03 	bl	1ff70 <log_output_flush>
}
    476a:	b00a      	add	sp, #40	; 0x28
    476c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    4770:	4630      	mov	r0, r6
    4772:	f01b fa36 	bl	1fbe2 <log_msg_str_get>
    4776:	490e      	ldr	r1, [pc, #56]	; (47b0 <log_output_msg_process+0xf0>)
    4778:	4602      	mov	r2, r0
    477a:	4628      	mov	r0, r5
    477c:	f7ff fe74 	bl	4468 <print_formatted>
		length = sizeof(buf);
    4780:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    4784:	aa05      	add	r2, sp, #20
    4786:	4623      	mov	r3, r4
    4788:	a906      	add	r1, sp, #24
    478a:	4630      	mov	r0, r6
		length = sizeof(buf);
    478c:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    4790:	f01b fa7d 	bl	1fc8e <log_msg_hexdump_data_get>
		if (length) {
    4794:	9a05      	ldr	r2, [sp, #20]
    4796:	2a00      	cmp	r2, #0
    4798:	d0b8      	beq.n	470c <log_output_msg_process+0x4c>
			hexdump_line_print(log_output, buf, length,
    479a:	464b      	mov	r3, r9
    479c:	9700      	str	r7, [sp, #0]
    479e:	a906      	add	r1, sp, #24
    47a0:	4628      	mov	r0, r5
    47a2:	f7ff ff1f 	bl	45e4 <hexdump_line_print>
			offset += length;
    47a6:	9b05      	ldr	r3, [sp, #20]
    47a8:	441c      	add	r4, r3
		length = sizeof(buf);
    47aa:	e7eb      	b.n	4784 <log_output_msg_process+0xc4>
    47ac:	000267ca 	.word	0x000267ca
    47b0:	00027b8c 	.word	0x00027b8c

000047b4 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
    47b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    47b6:	f242 730f 	movw	r3, #9999	; 0x270f
    47ba:	428b      	cmp	r3, r1
    47bc:	bf28      	it	cs
    47be:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
    47c0:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    47c2:	4a0f      	ldr	r2, [pc, #60]	; (4800 <log_output_dropped_process+0x4c>)
{
    47c4:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    47c6:	2105      	movs	r1, #5
    47c8:	4668      	mov	r0, sp
    47ca:	f01a fc50 	bl	1f06e <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    47ce:	6863      	ldr	r3, [r4, #4]
    47d0:	490c      	ldr	r1, [pc, #48]	; (4804 <log_output_dropped_process+0x50>)
    47d2:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    47d4:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    47d6:	220b      	movs	r2, #11
    47d8:	4628      	mov	r0, r5
    47da:	f01b fa5f 	bl	1fc9c <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    47de:	6863      	ldr	r3, [r4, #4]
    47e0:	4632      	mov	r2, r6
    47e2:	4669      	mov	r1, sp
    47e4:	4628      	mov	r0, r5
    47e6:	685b      	ldr	r3, [r3, #4]
    47e8:	f01b fa58 	bl	1fc9c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    47ec:	6863      	ldr	r3, [r4, #4]
    47ee:	4906      	ldr	r1, [pc, #24]	; (4808 <log_output_dropped_process+0x54>)
    47f0:	685b      	ldr	r3, [r3, #4]
    47f2:	221b      	movs	r2, #27
    47f4:	4628      	mov	r0, r5
    47f6:	f01b fa51 	bl	1fc9c <buffer_write>
		     log_output->control_block->ctx);
}
    47fa:	b002      	add	sp, #8
    47fc:	bd70      	pop	{r4, r5, r6, pc}
    47fe:	bf00      	nop
    4800:	000284e4 	.word	0x000284e4
    4804:	00026808 	.word	0x00026808
    4808:	000267ec 	.word	0x000267ec

0000480c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    480c:	4a08      	ldr	r2, [pc, #32]	; (4830 <log_output_timestamp_freq_set+0x24>)
{
    480e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    4810:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    4812:	4c08      	ldr	r4, [pc, #32]	; (4834 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    4814:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    4816:	2100      	movs	r1, #0
    4818:	42a0      	cmp	r0, r4
    481a:	d804      	bhi.n	4826 <log_output_timestamp_freq_set+0x1a>
    481c:	b101      	cbz	r1, 4820 <log_output_timestamp_freq_set+0x14>
    481e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    4820:	4b05      	ldr	r3, [pc, #20]	; (4838 <log_output_timestamp_freq_set+0x2c>)
    4822:	6018      	str	r0, [r3, #0]
}
    4824:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    4826:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    4828:	005b      	lsls	r3, r3, #1
    482a:	2101      	movs	r1, #1
    482c:	e7f4      	b.n	4818 <log_output_timestamp_freq_set+0xc>
    482e:	bf00      	nop
    4830:	20001618 	.word	0x20001618
    4834:	000f4240 	.word	0x000f4240
    4838:	20001614 	.word	0x20001614

0000483c <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    483e:	4f07      	ldr	r7, [pc, #28]	; (485c <char_out+0x20>)
{
    4840:	460d      	mov	r5, r1
    4842:	4604      	mov	r4, r0
    4844:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    4846:	42b4      	cmp	r4, r6
    4848:	d101      	bne.n	484e <char_out+0x12>
	}

	return length;
}
    484a:	4628      	mov	r0, r5
    484c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    484e:	6838      	ldr	r0, [r7, #0]
    4850:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    4854:	6883      	ldr	r3, [r0, #8]
    4856:	685b      	ldr	r3, [r3, #4]
    4858:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    485a:	e7f4      	b.n	4846 <char_out+0xa>
    485c:	20001630 	.word	0x20001630

00004860 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    4860:	4801      	ldr	r0, [pc, #4]	; (4868 <panic+0x8>)
    4862:	f01b bb85 	b.w	1ff70 <log_output_flush>
    4866:	bf00      	nop
    4868:	00024ef8 	.word	0x00024ef8

0000486c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    486c:	4801      	ldr	r0, [pc, #4]	; (4874 <dropped+0x8>)
    486e:	f7ff bfa1 	b.w	47b4 <log_output_dropped_process>
    4872:	bf00      	nop
    4874:	00024ef8 	.word	0x00024ef8

00004878 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    4878:	b508      	push	{r3, lr}
    487a:	4803      	ldr	r0, [pc, #12]	; (4888 <log_backend_uart_init+0x10>)
    487c:	f019 f85e 	bl	1d93c <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    4880:	4b02      	ldr	r3, [pc, #8]	; (488c <log_backend_uart_init+0x14>)
    4882:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
}
    4884:	bd08      	pop	{r3, pc}
    4886:	bf00      	nop
    4888:	00026814 	.word	0x00026814
    488c:	20001630 	.word	0x20001630

00004890 <put>:
{
    4890:	b510      	push	{r4, lr}
	log_msg_get(msg);
    4892:	4608      	mov	r0, r1
    4894:	460c      	mov	r4, r1
    4896:	f01b f962 	bl	1fb5e <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    489a:	4805      	ldr	r0, [pc, #20]	; (48b0 <put+0x20>)
    489c:	4621      	mov	r1, r4
    489e:	220f      	movs	r2, #15
    48a0:	f7ff ff0e 	bl	46c0 <log_output_msg_process>
	log_msg_put(msg);
    48a4:	4620      	mov	r0, r4
}
    48a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    48aa:	f01b b987 	b.w	1fbbc <log_msg_put>
    48ae:	bf00      	nop
    48b0:	00024ef8 	.word	0x00024ef8

000048b4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    48b4:	4b01      	ldr	r3, [pc, #4]	; (48bc <log_backend_rtt_init+0x8>)
    48b6:	2201      	movs	r2, #1
    48b8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    48ba:	4770      	bx	lr
    48bc:	20005ac7 	.word	0x20005ac7

000048c0 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    48c0:	4b02      	ldr	r3, [pc, #8]	; (48cc <panic+0xc>)
	log_output_flush(log_output);
    48c2:	4803      	ldr	r0, [pc, #12]	; (48d0 <panic+0x10>)
    48c4:	2201      	movs	r2, #1
    48c6:	701a      	strb	r2, [r3, #0]
    48c8:	f01b bb52 	b.w	1ff70 <log_output_flush>
    48cc:	20005ac8 	.word	0x20005ac8
    48d0:	00024f20 	.word	0x00024f20

000048d4 <dropped>:
	log_output_dropped_process(log_output, cnt);
    48d4:	4801      	ldr	r0, [pc, #4]	; (48dc <dropped+0x8>)
    48d6:	f7ff bf6d 	b.w	47b4 <log_output_dropped_process>
    48da:	bf00      	nop
    48dc:	00024f20 	.word	0x00024f20

000048e0 <put>:
{
    48e0:	b510      	push	{r4, lr}
	log_msg_get(msg);
    48e2:	4608      	mov	r0, r1
    48e4:	460c      	mov	r4, r1
    48e6:	f01b f93a 	bl	1fb5e <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    48ea:	4805      	ldr	r0, [pc, #20]	; (4900 <put+0x20>)
    48ec:	4621      	mov	r1, r4
    48ee:	220f      	movs	r2, #15
    48f0:	f7ff fee6 	bl	46c0 <log_output_msg_process>
	log_msg_put(msg);
    48f4:	4620      	mov	r0, r4
}
    48f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    48fa:	f01b b95f 	b.w	1fbbc <log_msg_put>
    48fe:	bf00      	nop
    4900:	00024f20 	.word	0x00024f20

00004904 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    4904:	4b05      	ldr	r3, [pc, #20]	; (491c <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    4906:	781b      	ldrb	r3, [r3, #0]
    4908:	b11b      	cbz	r3, 4912 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    490a:	f241 3088 	movw	r0, #5000	; 0x1388
    490e:	f01f bdb9 	b.w	24484 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    4912:	20a4      	movs	r0, #164	; 0xa4
    4914:	2100      	movs	r1, #0
    4916:	f019 be8f 	b.w	1e638 <z_impl_k_sleep>
    491a:	bf00      	nop
    491c:	20005ac8 	.word	0x20005ac8

00004920 <data_out_block_mode>:
{
    4920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    4924:	f8df 9090 	ldr.w	r9, [pc, #144]	; 49b8 <data_out_block_mode+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
    4928:	f8df b090 	ldr.w	fp, [pc, #144]	; 49bc <data_out_block_mode+0x9c>
{
    492c:	4607      	mov	r7, r0
    492e:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    4930:	2404      	movs	r4, #4
    4932:	46ca      	mov	sl, r9
		if (!is_sync_mode()) {
    4934:	f899 3000 	ldrb.w	r3, [r9]
    4938:	b933      	cbnz	r3, 4948 <data_out_block_mode+0x28>
    493a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    493e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4942:	4658      	mov	r0, fp
    4944:	f019 fa0e 	bl	1dd64 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    4948:	4632      	mov	r2, r6
    494a:	4639      	mov	r1, r7
    494c:	2000      	movs	r0, #0
    494e:	f002 fcbf 	bl	72d0 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    4952:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    4956:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
    4958:	b913      	cbnz	r3, 4960 <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
    495a:	4658      	mov	r0, fp
    495c:	f019 fa7a 	bl	1de54 <z_impl_k_mutex_unlock>
		if (ret) {
    4960:	4d14      	ldr	r5, [pc, #80]	; (49b4 <data_out_block_mode+0x94>)
    4962:	f1b8 0f00 	cmp.w	r8, #0
    4966:	d018      	beq.n	499a <data_out_block_mode+0x7a>
	host_present = true;
    4968:	2301      	movs	r3, #1
    496a:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    496c:	f89a 3000 	ldrb.w	r3, [sl]
    4970:	b933      	cbnz	r3, 4980 <data_out_block_mode+0x60>
}
    4972:	4630      	mov	r0, r6
    4974:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    4978:	b95c      	cbnz	r4, 4992 <data_out_block_mode+0x72>
		host_present = false;
    497a:	702c      	strb	r4, [r5, #0]
    497c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    4980:	2000      	movs	r0, #0
    4982:	f002 fcf1 	bl	7368 <SEGGER_RTT_HasDataUp>
    4986:	2800      	cmp	r0, #0
    4988:	d0f3      	beq.n	4972 <data_out_block_mode+0x52>
    498a:	782b      	ldrb	r3, [r5, #0]
    498c:	2b00      	cmp	r3, #0
    498e:	d1f3      	bne.n	4978 <data_out_block_mode+0x58>
    4990:	e7ef      	b.n	4972 <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
    4992:	3c01      	subs	r4, #1
    4994:	f7ff ffb6 	bl	4904 <on_failed_write.part.0>
    4998:	e7f2      	b.n	4980 <data_out_block_mode+0x60>
		} else if (host_present) {
    499a:	782b      	ldrb	r3, [r5, #0]
    499c:	b113      	cbz	r3, 49a4 <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
    499e:	3c01      	subs	r4, #1
    49a0:	d104      	bne.n	49ac <data_out_block_mode+0x8c>
		host_present = false;
    49a2:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    49a4:	782b      	ldrb	r3, [r5, #0]
    49a6:	2b00      	cmp	r3, #0
    49a8:	d1c4      	bne.n	4934 <data_out_block_mode+0x14>
    49aa:	e7e2      	b.n	4972 <data_out_block_mode+0x52>
    49ac:	f7ff ffaa 	bl	4904 <on_failed_write.part.0>
    49b0:	e7f8      	b.n	49a4 <data_out_block_mode+0x84>
    49b2:	bf00      	nop
    49b4:	20005ac7 	.word	0x20005ac7
    49b8:	20005ac8 	.word	0x20005ac8
    49bc:	20000850 	.word	0x20000850

000049c0 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    49c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    49c2:	4b10      	ldr	r3, [pc, #64]	; (4a04 <class_handler+0x44>)
    49c4:	4c10      	ldr	r4, [pc, #64]	; (4a08 <class_handler+0x48>)
    49c6:	4d11      	ldr	r5, [pc, #68]	; (4a0c <class_handler+0x4c>)
    49c8:	1ae4      	subs	r4, r4, r3
    49ca:	10a4      	asrs	r4, r4, #2
    49cc:	436c      	muls	r4, r5
		if_descr = __usb_data_start[i].interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    49ce:	4d10      	ldr	r5, [pc, #64]	; (4a10 <class_handler+0x50>)
    49d0:	f8d5 c024 	ldr.w	ip, [r5, #36]	; 0x24
	for (size_t i = 0; i < size; i++) {
    49d4:	2500      	movs	r5, #0
    49d6:	42a5      	cmp	r5, r4
    49d8:	d102      	bne.n	49e0 <class_handler+0x20>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    49da:	f06f 0022 	mvn.w	r0, #34	; 0x22
    49de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if_descr = __usb_data_start[i].interface_descriptor;
    49e0:	685f      	ldr	r7, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    49e2:	4567      	cmp	r7, ip
    49e4:	d30a      	bcc.n	49fc <class_handler+0x3c>
		if (iface->class_handler &&
    49e6:	691e      	ldr	r6, [r3, #16]
    49e8:	b146      	cbz	r6, 49fc <class_handler+0x3c>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    49ea:	f897 e002 	ldrb.w	lr, [r7, #2]
    49ee:	7907      	ldrb	r7, [r0, #4]
		if (iface->class_handler &&
    49f0:	45be      	cmp	lr, r7
    49f2:	d103      	bne.n	49fc <class_handler+0x3c>
			return iface->class_handler(pSetup, len, data);
    49f4:	4633      	mov	r3, r6
}
    49f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			return iface->class_handler(pSetup, len, data);
    49fa:	4718      	bx	r3
	for (size_t i = 0; i < size; i++) {
    49fc:	3501      	adds	r5, #1
    49fe:	3324      	adds	r3, #36	; 0x24
    4a00:	e7e9      	b.n	49d6 <class_handler+0x16>
    4a02:	bf00      	nop
    4a04:	20000ad0 	.word	0x20000ad0
    4a08:	20000af4 	.word	0x20000af4
    4a0c:	38e38e39 	.word	0x38e38e39
    4a10:	20001648 	.word	0x20001648

00004a14 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    4a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    4a18:	4b12      	ldr	r3, [pc, #72]	; (4a64 <custom_handler+0x50>)
    4a1a:	4c13      	ldr	r4, [pc, #76]	; (4a68 <custom_handler+0x54>)
    4a1c:	4d13      	ldr	r5, [pc, #76]	; (4a6c <custom_handler+0x58>)
    4a1e:	1ae4      	subs	r4, r4, r3
    4a20:	10a4      	asrs	r4, r4, #2
    4a22:	436c      	muls	r4, r5
		if_descr = __usb_data_start[i].interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    4a24:	4d12      	ldr	r5, [pc, #72]	; (4a70 <custom_handler+0x5c>)
    4a26:	f8d5 c024 	ldr.w	ip, [r5, #36]	; 0x24
	for (size_t i = 0; i < size; i++) {
    4a2a:	2500      	movs	r5, #0
    4a2c:	42a5      	cmp	r5, r4
    4a2e:	d103      	bne.n	4a38 <custom_handler+0x24>
			return iface->custom_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    4a30:	f06f 0022 	mvn.w	r0, #34	; 0x22
    4a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if_descr = __usb_data_start[i].interface_descriptor;
    4a38:	685e      	ldr	r6, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    4a3a:	4566      	cmp	r6, ip
    4a3c:	d30e      	bcc.n	4a5c <custom_handler+0x48>
		if (iface->custom_handler &&
    4a3e:	699f      	ldr	r7, [r3, #24]
    4a40:	b167      	cbz	r7, 4a5c <custom_handler+0x48>
		    (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF) ||
    4a42:	f896 8002 	ldrb.w	r8, [r6, #2]
    4a46:	f890 e004 	ldrb.w	lr, [r0, #4]
		if (iface->custom_handler &&
    4a4a:	45f0      	cmp	r8, lr
    4a4c:	d103      	bne.n	4a56 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    4a4e:	463b      	mov	r3, r7
}
    4a50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return iface->custom_handler(pSetup, len, data);
    4a54:	4718      	bx	r3
		    (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF) ||
    4a56:	7976      	ldrb	r6, [r6, #5]
    4a58:	2e01      	cmp	r6, #1
    4a5a:	d0f8      	beq.n	4a4e <custom_handler+0x3a>
	for (size_t i = 0; i < size; i++) {
    4a5c:	3501      	adds	r5, #1
    4a5e:	3324      	adds	r3, #36	; 0x24
    4a60:	e7e4      	b.n	4a2c <custom_handler+0x18>
    4a62:	bf00      	nop
    4a64:	20000ad0 	.word	0x20000ad0
    4a68:	20000af4 	.word	0x20000af4
    4a6c:	38e38e39 	.word	0x38e38e39
    4a70:	20001648 	.word	0x20001648

00004a74 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    4a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    4a78:	4c0f      	ldr	r4, [pc, #60]	; (4ab8 <vendor_handler+0x44>)
    4a7a:	4b10      	ldr	r3, [pc, #64]	; (4abc <vendor_handler+0x48>)
{
    4a7c:	4617      	mov	r7, r2
	size_t size = (__usb_data_end - __usb_data_start);
    4a7e:	1b1b      	subs	r3, r3, r4
    4a80:	4a0f      	ldr	r2, [pc, #60]	; (4ac0 <vendor_handler+0x4c>)
    4a82:	109b      	asrs	r3, r3, #2
{
    4a84:	4605      	mov	r5, r0
    4a86:	460e      	mov	r6, r1
	size_t size = (__usb_data_end - __usb_data_start);
    4a88:	fb02 f903 	mul.w	r9, r2, r3
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	for (size_t i = 0; i < size; i++) {
    4a8c:	f04f 0800 	mov.w	r8, #0
    4a90:	45c1      	cmp	r9, r8
    4a92:	d102      	bne.n	4a9a <vendor_handler+0x26>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    4a94:	f06f 0022 	mvn.w	r0, #34	; 0x22
    4a98:	e00b      	b.n	4ab2 <vendor_handler+0x3e>
		if (iface->vendor_handler) {
    4a9a:	6963      	ldr	r3, [r4, #20]
    4a9c:	b91b      	cbnz	r3, 4aa6 <vendor_handler+0x32>
	for (size_t i = 0; i < size; i++) {
    4a9e:	f108 0801 	add.w	r8, r8, #1
    4aa2:	3424      	adds	r4, #36	; 0x24
    4aa4:	e7f4      	b.n	4a90 <vendor_handler+0x1c>
			if (!iface->vendor_handler(pSetup, len, data)) {
    4aa6:	463a      	mov	r2, r7
    4aa8:	4631      	mov	r1, r6
    4aaa:	4628      	mov	r0, r5
    4aac:	4798      	blx	r3
    4aae:	2800      	cmp	r0, #0
    4ab0:	d1f5      	bne.n	4a9e <vendor_handler+0x2a>
}
    4ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4ab6:	bf00      	nop
    4ab8:	20000ad0 	.word	0x20000ad0
    4abc:	20000af4 	.word	0x20000af4
    4ac0:	38e38e39 	.word	0x38e38e39

00004ac4 <set_endpoint>:
{
    4ac4:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    4ac6:	7883      	ldrb	r3, [r0, #2]
    4ac8:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    4acc:	7903      	ldrb	r3, [r0, #4]
    4ace:	7942      	ldrb	r2, [r0, #5]
    4ad0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4ad4:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    4ad8:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    4ada:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    4adc:	f003 0303 	and.w	r3, r3, #3
    4ae0:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    4ae4:	f002 f85a 	bl	6b9c <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    4ae8:	f110 0f45 	cmn.w	r0, #69	; 0x45
    4aec:	f89d 1000 	ldrb.w	r1, [sp]
    4af0:	d121      	bne.n	4b36 <set_endpoint+0x72>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    4af2:	4a1f      	ldr	r2, [pc, #124]	; (4b70 <set_endpoint+0xac>)
    4af4:	4b1f      	ldr	r3, [pc, #124]	; (4b74 <set_endpoint+0xb0>)
		LOG_WRN("Endpoint 0x%02x already configured", ep_cfg.ep_addr);
    4af6:	4820      	ldr	r0, [pc, #128]	; (4b78 <set_endpoint+0xb4>)
    4af8:	1ad2      	subs	r2, r2, r3
    4afa:	08d2      	lsrs	r2, r2, #3
    4afc:	0192      	lsls	r2, r2, #6
    4afe:	f042 0202 	orr.w	r2, r2, #2
    4b02:	f01a ff82 	bl	1fa0a <log_1>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    4b06:	f89d 0000 	ldrb.w	r0, [sp]
    4b0a:	f002 f8ed 	bl	6ce8 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    4b0e:	f110 0f45 	cmn.w	r0, #69	; 0x45
    4b12:	d120      	bne.n	4b56 <set_endpoint+0x92>
    4b14:	4a16      	ldr	r2, [pc, #88]	; (4b70 <set_endpoint+0xac>)
    4b16:	4b17      	ldr	r3, [pc, #92]	; (4b74 <set_endpoint+0xb0>)
		LOG_WRN("Endpoint 0x%02x already enabled", ep_cfg.ep_addr);
    4b18:	f89d 1000 	ldrb.w	r1, [sp]
    4b1c:	4817      	ldr	r0, [pc, #92]	; (4b7c <set_endpoint+0xb8>)
    4b1e:	1ad2      	subs	r2, r2, r3
    4b20:	08d2      	lsrs	r2, r2, #3
    4b22:	0192      	lsls	r2, r2, #6
    4b24:	f042 0202 	orr.w	r2, r2, #2
    4b28:	f01a ff6f 	bl	1fa0a <log_1>
	usb_dev.configured = true;
    4b2c:	4b14      	ldr	r3, [pc, #80]	; (4b80 <set_endpoint+0xbc>)
    4b2e:	2001      	movs	r0, #1
    4b30:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    4b34:	e00c      	b.n	4b50 <set_endpoint+0x8c>
	} else if (ret) {
    4b36:	2800      	cmp	r0, #0
    4b38:	d0e5      	beq.n	4b06 <set_endpoint+0x42>
    4b3a:	4a0d      	ldr	r2, [pc, #52]	; (4b70 <set_endpoint+0xac>)
    4b3c:	4b0d      	ldr	r3, [pc, #52]	; (4b74 <set_endpoint+0xb0>)
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    4b3e:	4811      	ldr	r0, [pc, #68]	; (4b84 <set_endpoint+0xc0>)
    4b40:	1ad2      	subs	r2, r2, r3
    4b42:	08d2      	lsrs	r2, r2, #3
    4b44:	0192      	lsls	r2, r2, #6
    4b46:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    4b4a:	f01a ff5e 	bl	1fa0a <log_1>
		return false;
    4b4e:	2000      	movs	r0, #0
}
    4b50:	b003      	add	sp, #12
    4b52:	f85d fb04 	ldr.w	pc, [sp], #4
	} else if (ret) {
    4b56:	2800      	cmp	r0, #0
    4b58:	d0e8      	beq.n	4b2c <set_endpoint+0x68>
    4b5a:	4a05      	ldr	r2, [pc, #20]	; (4b70 <set_endpoint+0xac>)
    4b5c:	4b05      	ldr	r3, [pc, #20]	; (4b74 <set_endpoint+0xb0>)
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    4b5e:	f89d 1000 	ldrb.w	r1, [sp]
    4b62:	4809      	ldr	r0, [pc, #36]	; (4b88 <set_endpoint+0xc4>)
    4b64:	1ad2      	subs	r2, r2, r3
    4b66:	08d2      	lsrs	r2, r2, #3
    4b68:	0192      	lsls	r2, r2, #6
    4b6a:	f042 0201 	orr.w	r2, r2, #1
    4b6e:	e7ec      	b.n	4b4a <set_endpoint+0x86>
    4b70:	00024d74 	.word	0x00024d74
    4b74:	00024c24 	.word	0x00024c24
    4b78:	0002685e 	.word	0x0002685e
    4b7c:	000268a5 	.word	0x000268a5
    4b80:	20001648 	.word	0x20001648
    4b84:	00026881 	.word	0x00026881
    4b88:	000268c5 	.word	0x000268c5

00004b8c <forward_status_cb>:
{
    4b8c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    4b90:	4b25      	ldr	r3, [pc, #148]	; (4c28 <forward_status_cb+0x9c>)
    4b92:	4c26      	ldr	r4, [pc, #152]	; (4c2c <forward_status_cb+0xa0>)
    4b94:	4f26      	ldr	r7, [pc, #152]	; (4c30 <forward_status_cb+0xa4>)
    4b96:	1b1b      	subs	r3, r3, r4
    4b98:	109b      	asrs	r3, r3, #2
    4b9a:	435f      	muls	r7, r3
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND) {
    4b9c:	1f03      	subs	r3, r0, #4
    4b9e:	2b01      	cmp	r3, #1
{
    4ba0:	4605      	mov	r5, r0
    4ba2:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND) {
    4ba4:	d825      	bhi.n	4bf2 <forward_status_cb+0x66>
		if (usb_dev.configured) {
    4ba6:	4b23      	ldr	r3, [pc, #140]	; (4c34 <forward_status_cb+0xa8>)
    4ba8:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
    4bac:	4698      	mov	r8, r3
    4bae:	b302      	cbz	r2, 4bf2 <forward_status_cb+0x66>
			usb_cancel_transfers();
    4bb0:	f000 fece 	bl	5950 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED) {
    4bb4:	2d04      	cmp	r5, #4
    4bb6:	d11c      	bne.n	4bf2 <forward_status_cb+0x66>
	for (size_t i = 0; i < size; i++) {
    4bb8:	f04f 0900 	mov.w	r9, #0
    4bbc:	454f      	cmp	r7, r9
    4bbe:	d015      	beq.n	4bec <forward_status_cb+0x60>
		struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    4bc0:	f8d4 b020 	ldr.w	fp, [r4, #32]
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    4bc4:	f04f 0a00 	mov.w	sl, #0
    4bc8:	7f22      	ldrb	r2, [r4, #28]
    4bca:	fa5f f38a 	uxtb.w	r3, sl
    4bce:	429a      	cmp	r2, r3
    4bd0:	d803      	bhi.n	4bda <forward_status_cb+0x4e>
	for (size_t i = 0; i < size; i++) {
    4bd2:	f109 0901 	add.w	r9, r9, #1
    4bd6:	3424      	adds	r4, #36	; 0x24
    4bd8:	e7f0      	b.n	4bbc <forward_status_cb+0x30>
	return usb_dc_ep_disable(ep_data->ep_addr);
    4bda:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
    4bde:	f10a 0a01 	add.w	sl, sl, #1
    4be2:	7918      	ldrb	r0, [r3, #4]
    4be4:	f002 f8aa 	bl	6d3c <usb_dc_ep_disable>
			if (ret < 0) {
    4be8:	2800      	cmp	r0, #0
    4bea:	daed      	bge.n	4bc8 <forward_status_cb+0x3c>
				usb_dev.configured = false;
    4bec:	2300      	movs	r3, #0
    4bee:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
    4bf2:	4c0e      	ldr	r4, [pc, #56]	; (4c2c <forward_status_cb+0xa0>)
	for (size_t i = 0; i < size; i++) {
    4bf4:	f04f 0800 	mov.w	r8, #0
	for (size_t i = 0; i < size; i++) {
    4bf8:	45b8      	cmp	r8, r7
    4bfa:	d108      	bne.n	4c0e <forward_status_cb+0x82>
	if (usb_dev.user_status_callback) {
    4bfc:	4b0d      	ldr	r3, [pc, #52]	; (4c34 <forward_status_cb+0xa8>)
    4bfe:	6a1b      	ldr	r3, [r3, #32]
    4c00:	b17b      	cbz	r3, 4c22 <forward_status_cb+0x96>
		usb_dev.user_status_callback(status, param);
    4c02:	4631      	mov	r1, r6
    4c04:	4628      	mov	r0, r5
}
    4c06:	b001      	add	sp, #4
    4c08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
    4c0c:	4718      	bx	r3
		if (cfg->cb_usb_status) {
    4c0e:	68e3      	ldr	r3, [r4, #12]
    4c10:	b11b      	cbz	r3, 4c1a <forward_status_cb+0x8e>
			cfg->cb_usb_status(cfg, status, param);
    4c12:	4632      	mov	r2, r6
    4c14:	4629      	mov	r1, r5
    4c16:	4620      	mov	r0, r4
    4c18:	4798      	blx	r3
	for (size_t i = 0; i < size; i++) {
    4c1a:	f108 0801 	add.w	r8, r8, #1
    4c1e:	3424      	adds	r4, #36	; 0x24
    4c20:	e7ea      	b.n	4bf8 <forward_status_cb+0x6c>
}
    4c22:	b001      	add	sp, #4
    4c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c28:	20000af4 	.word	0x20000af4
    4c2c:	20000ad0 	.word	0x20000ad0
    4c30:	38e38e39 	.word	0x38e38e39
    4c34:	20001648 	.word	0x20001648

00004c38 <usb_handle_standard_request>:
{
    4c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (usb_dev.custom_req_handler &&
    4c3c:	4cb0      	ldr	r4, [pc, #704]	; (4f00 <usb_handle_standard_request+0x2c8>)
    4c3e:	69a3      	ldr	r3, [r4, #24]
{
    4c40:	b087      	sub	sp, #28
    4c42:	4606      	mov	r6, r0
    4c44:	460d      	mov	r5, r1
    4c46:	4617      	mov	r7, r2
	if (usb_dev.custom_req_handler &&
    4c48:	b963      	cbnz	r3, 4c64 <usb_handle_standard_request+0x2c>
	switch (REQTYPE_GET_RECIP(setup->bmRequestType)) {
    4c4a:	7833      	ldrb	r3, [r6, #0]
    4c4c:	f003 031f 	and.w	r3, r3, #31
    4c50:	2b01      	cmp	r3, #1
    4c52:	f000 8086 	beq.w	4d62 <usb_handle_standard_request+0x12a>
    4c56:	2b02      	cmp	r3, #2
    4c58:	f000 80f2 	beq.w	4e40 <usb_handle_standard_request+0x208>
    4c5c:	b143      	cbz	r3, 4c70 <usb_handle_standard_request+0x38>
	switch (setup->bRequest) {
    4c5e:	f06f 0015 	mvn.w	r0, #21
    4c62:	e002      	b.n	4c6a <usb_handle_standard_request+0x32>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    4c64:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    4c66:	2800      	cmp	r0, #0
    4c68:	d1ef      	bne.n	4c4a <usb_handle_standard_request+0x12>
}
    4c6a:	b007      	add	sp, #28
    4c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t value = setup->wValue;
    4c70:	7872      	ldrb	r2, [r6, #1]
    4c72:	8870      	ldrh	r0, [r6, #2]
	uint8_t *data = *data_buf;
    4c74:	683b      	ldr	r3, [r7, #0]
	switch (setup->bRequest) {
    4c76:	2a09      	cmp	r2, #9
    4c78:	d8f1      	bhi.n	4c5e <usb_handle_standard_request+0x26>
    4c7a:	a101      	add	r1, pc, #4	; (adr r1, 4c80 <usb_handle_standard_request+0x48>)
    4c7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4c80:	00004ca9 	.word	0x00004ca9
    4c84:	00004c5f 	.word	0x00004c5f
    4c88:	00004c5f 	.word	0x00004c5f
    4c8c:	00004c5f 	.word	0x00004c5f
    4c90:	00004c5f 	.word	0x00004c5f
    4c94:	00004cb5 	.word	0x00004cb5
    4c98:	00004cbf 	.word	0x00004cbf
    4c9c:	00004c5f 	.word	0x00004c5f
    4ca0:	00004ced 	.word	0x00004ced
    4ca4:	00004cf7 	.word	0x00004cf7
		data[1] = 0U;
    4ca8:	2000      	movs	r0, #0
			data[0] |= DEVICE_STATUS_SELF_POWERED;
    4caa:	2201      	movs	r2, #1
		data[1] = 0U;
    4cac:	7058      	strb	r0, [r3, #1]
			data[0] |= DEVICE_STATUS_SELF_POWERED;
    4cae:	701a      	strb	r2, [r3, #0]
			*len = 2;
    4cb0:	2302      	movs	r3, #2
    4cb2:	e071      	b.n	4d98 <usb_handle_standard_request+0x160>
		usb_dc_set_address(value);
    4cb4:	b2c0      	uxtb	r0, r0
    4cb6:	f001 ff25 	bl	6b04 <usb_dc_set_address>
	int rc = 0;
    4cba:	2000      	movs	r0, #0
    4cbc:	e7d5      	b.n	4c6a <usb_handle_standard_request+0x32>
	type = GET_DESC_TYPE(type_index);
    4cbe:	0a02      	lsrs	r2, r0, #8
	if ((type == USB_INTERFACE_DESC) || (type == USB_ENDPOINT_DESC) ||
    4cc0:	1f13      	subs	r3, r2, #4
    4cc2:	2b01      	cmp	r3, #1
    4cc4:	d9cb      	bls.n	4c5e <usb_handle_standard_request+0x26>
    4cc6:	2a07      	cmp	r2, #7
    4cc8:	d8c9      	bhi.n	4c5e <usb_handle_standard_request+0x26>
	p = (uint8_t *)usb_dev.descriptors;
    4cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
	cur_index = 0U;
    4ccc:	2100      	movs	r1, #0
			if (cur_index == index) {
    4cce:	b2c0      	uxtb	r0, r0
	while (p[DESC_bLength] != 0U) {
    4cd0:	781c      	ldrb	r4, [r3, #0]
    4cd2:	2c00      	cmp	r4, #0
    4cd4:	d0c3      	beq.n	4c5e <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == type) {
    4cd6:	785e      	ldrb	r6, [r3, #1]
    4cd8:	4296      	cmp	r6, r2
    4cda:	d103      	bne.n	4ce4 <usb_handle_standard_request+0xac>
			if (cur_index == index) {
    4cdc:	4288      	cmp	r0, r1
    4cde:	f000 8144 	beq.w	4f6a <usb_handle_standard_request+0x332>
			cur_index++;
    4ce2:	3101      	adds	r1, #1
		p += p[DESC_bLength];
    4ce4:	4423      	add	r3, r4
    4ce6:	e7f3      	b.n	4cd0 <usb_handle_standard_request+0x98>
			*len = p[DESC_bLength];
    4ce8:	781b      	ldrb	r3, [r3, #0]
    4cea:	e143      	b.n	4f74 <usb_handle_standard_request+0x33c>
		data[0] = usb_dev.configuration;
    4cec:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
    4cf0:	701a      	strb	r2, [r3, #0]
		*len = 1;
    4cf2:	2301      	movs	r3, #1
    4cf4:	e13e      	b.n	4f74 <usb_handle_standard_request+0x33c>
		if (!usb_set_configuration(value, 0)) {
    4cf6:	b2c7      	uxtb	r7, r0
    4cf8:	f88d 7017 	strb.w	r7, [sp, #23]
	if (config_index == 0U) {
    4cfc:	b177      	cbz	r7, 4d1c <usb_handle_standard_request+0xe4>
	uint8_t cur_config = 0xFF;
    4cfe:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    4d02:	6a65      	ldr	r5, [r4, #36]	; 0x24
	bool found = false;
    4d04:	2600      	movs	r6, #0
	uint8_t cur_alt_setting = 0xFF;
    4d06:	46c1      	mov	r9, r8
	while (p[DESC_bLength] != 0U) {
    4d08:	782b      	ldrb	r3, [r5, #0]
    4d0a:	b953      	cbnz	r3, 4d22 <usb_handle_standard_request+0xea>
	if (usb_dev.status_callback) {
    4d0c:	69e3      	ldr	r3, [r4, #28]
    4d0e:	b11b      	cbz	r3, 4d18 <usb_handle_standard_request+0xe0>
		usb_dev.status_callback(USB_DC_CONFIGURED, &config_index);
    4d10:	f10d 0117 	add.w	r1, sp, #23
    4d14:	2003      	movs	r0, #3
    4d16:	4798      	blx	r3
		if (!usb_set_configuration(value, 0)) {
    4d18:	2e00      	cmp	r6, #0
    4d1a:	d0a0      	beq.n	4c5e <usb_handle_standard_request+0x26>
			usb_dev.configuration = value;
    4d1c:	f884 70ba 	strb.w	r7, [r4, #186]	; 0xba
	return ret;
    4d20:	e7cb      	b.n	4cba <usb_handle_standard_request+0x82>
		switch (p[DESC_bDescriptorType]) {
    4d22:	786b      	ldrb	r3, [r5, #1]
    4d24:	2b04      	cmp	r3, #4
    4d26:	d00d      	beq.n	4d44 <usb_handle_standard_request+0x10c>
    4d28:	2b05      	cmp	r3, #5
    4d2a:	d00e      	beq.n	4d4a <usb_handle_standard_request+0x112>
    4d2c:	2b02      	cmp	r3, #2
    4d2e:	d106      	bne.n	4d3e <usb_handle_standard_request+0x106>
			cur_config = p[CONF_DESC_bConfigurationValue];
    4d30:	f895 8005 	ldrb.w	r8, [r5, #5]
			if (cur_config == config_index) {
    4d34:	f89d 3017 	ldrb.w	r3, [sp, #23]
				found = true;
    4d38:	4543      	cmp	r3, r8
    4d3a:	bf08      	it	eq
    4d3c:	2601      	moveq	r6, #1
		p += p[DESC_bLength];
    4d3e:	782b      	ldrb	r3, [r5, #0]
    4d40:	441d      	add	r5, r3
    4d42:	e7e1      	b.n	4d08 <usb_handle_standard_request+0xd0>
			cur_alt_setting =
    4d44:	f895 9003 	ldrb.w	r9, [r5, #3]
			break;
    4d48:	e7f9      	b.n	4d3e <usb_handle_standard_request+0x106>
			if ((cur_config != config_index) ||
    4d4a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    4d4e:	4543      	cmp	r3, r8
    4d50:	d1f5      	bne.n	4d3e <usb_handle_standard_request+0x106>
    4d52:	f1b9 0f00 	cmp.w	r9, #0
    4d56:	d1f2      	bne.n	4d3e <usb_handle_standard_request+0x106>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    4d58:	4628      	mov	r0, r5
    4d5a:	f7ff feb3 	bl	4ac4 <set_endpoint>
    4d5e:	4606      	mov	r6, r0
			break;
    4d60:	e7ed      	b.n	4d3e <usb_handle_standard_request+0x106>
	if (!is_device_configured() ||
    4d62:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    4d66:	2b00      	cmp	r3, #0
    4d68:	f43f af79 	beq.w	4c5e <usb_handle_standard_request+0x26>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    4d6c:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    4d70:	f896 8004 	ldrb.w	r8, [r6, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    4d74:	465a      	mov	r2, fp
	while (p[DESC_bLength] != 0U) {
    4d76:	7810      	ldrb	r0, [r2, #0]
    4d78:	2800      	cmp	r0, #0
    4d7a:	f43f af70 	beq.w	4c5e <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == USB_CONFIGURATION_DESC) {
    4d7e:	7851      	ldrb	r1, [r2, #1]
    4d80:	2902      	cmp	r1, #2
    4d82:	d104      	bne.n	4d8e <usb_handle_standard_request+0x156>
			if (interface < cfg_descr->bNumInterfaces) {
    4d84:	f892 c004 	ldrb.w	ip, [r2, #4]
    4d88:	45c4      	cmp	ip, r8
    4d8a:	f200 80f5 	bhi.w	4f78 <usb_handle_standard_request+0x340>
		p += p[DESC_bLength];
    4d8e:	4402      	add	r2, r0
    4d90:	e7f1      	b.n	4d76 <usb_handle_standard_request+0x13e>
		data[0] = 0U;
    4d92:	2000      	movs	r0, #0
    4d94:	7010      	strb	r0, [r2, #0]
		*len = 1;
    4d96:	2301      	movs	r3, #1
			*len = 2;
    4d98:	602b      	str	r3, [r5, #0]
			break;
    4d9a:	e766      	b.n	4c6a <usb_handle_standard_request+0x32>
		usb_set_interface(setup->wIndex, setup->wValue);
    4d9c:	78b3      	ldrb	r3, [r6, #2]
    4d9e:	4a59      	ldr	r2, [pc, #356]	; (4f04 <usb_handle_standard_request+0x2cc>)
    4da0:	4e59      	ldr	r6, [pc, #356]	; (4f08 <usb_handle_standard_request+0x2d0>)
    4da2:	9301      	str	r3, [sp, #4]
    4da4:	1ab6      	subs	r6, r6, r2
    4da6:	08f6      	lsrs	r6, r6, #3
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    4da8:	01b3      	lsls	r3, r6, #6
	uint8_t cur_iface = 0xFF;
    4daa:	27ff      	movs	r7, #255	; 0xff
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    4dac:	9302      	str	r3, [sp, #8]
    4dae:	f043 0301 	orr.w	r3, r3, #1
	uint8_t cur_alt_setting = 0xFF;
    4db2:	46ba      	mov	sl, r7
	const uint8_t *if_desc = NULL;
    4db4:	f04f 0900 	mov.w	r9, #0
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    4db8:	9303      	str	r3, [sp, #12]
	while (p[DESC_bLength] != 0U) {
    4dba:	f89b 2000 	ldrb.w	r2, [fp]
    4dbe:	b93a      	cbnz	r2, 4dd0 <usb_handle_standard_request+0x198>
	if (usb_dev.status_callback) {
    4dc0:	69e3      	ldr	r3, [r4, #28]
    4dc2:	b113      	cbz	r3, 4dca <usb_handle_standard_request+0x192>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    4dc4:	4649      	mov	r1, r9
    4dc6:	2007      	movs	r0, #7
    4dc8:	4798      	blx	r3
		*len = 0;
    4dca:	2000      	movs	r0, #0
    4dcc:	6028      	str	r0, [r5, #0]
		break;
    4dce:	e74c      	b.n	4c6a <usb_handle_standard_request+0x32>
		switch (p[DESC_bDescriptorType]) {
    4dd0:	f89b 2001 	ldrb.w	r2, [fp, #1]
    4dd4:	2a04      	cmp	r2, #4
    4dd6:	d005      	beq.n	4de4 <usb_handle_standard_request+0x1ac>
    4dd8:	2a05      	cmp	r2, #5
    4dda:	d00e      	beq.n	4dfa <usb_handle_standard_request+0x1c2>
		p += p[DESC_bLength];
    4ddc:	f89b 2000 	ldrb.w	r2, [fp]
    4de0:	4493      	add	fp, r2
    4de2:	e7ea      	b.n	4dba <usb_handle_standard_request+0x182>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    4de4:	f89b 7002 	ldrb.w	r7, [fp, #2]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    4de8:	f89b a003 	ldrb.w	sl, [fp, #3]
			if (cur_iface == iface &&
    4dec:	45b8      	cmp	r8, r7
    4dee:	d1f5      	bne.n	4ddc <usb_handle_standard_request+0x1a4>
    4df0:	9b01      	ldr	r3, [sp, #4]
    4df2:	4553      	cmp	r3, sl
    4df4:	bf08      	it	eq
    4df6:	46d9      	moveq	r9, fp
    4df8:	e7f0      	b.n	4ddc <usb_handle_standard_request+0x1a4>
			if (cur_iface == iface) {
    4dfa:	45b8      	cmp	r8, r7
    4dfc:	d1ee      	bne.n	4ddc <usb_handle_standard_request+0x1a4>
	if (cur_alt_setting != alt_setting) {
    4dfe:	9b01      	ldr	r3, [sp, #4]
    4e00:	4553      	cmp	r3, sl
    4e02:	d019      	beq.n	4e38 <usb_handle_standard_request+0x200>
		ret = reset_endpoint(ep_desc);
    4e04:	f89b 6002 	ldrb.w	r6, [fp, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    4e08:	4630      	mov	r0, r6
    4e0a:	f000 fd79 	bl	5900 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    4e0e:	4630      	mov	r0, r6
    4e10:	f001 ff94 	bl	6d3c <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    4e14:	f110 0f45 	cmn.w	r0, #69	; 0x45
    4e18:	d107      	bne.n	4e2a <usb_handle_standard_request+0x1f2>
		LOG_WRN("Endpoint 0x%02x already disabled", ep_cfg.ep_addr);
    4e1a:	9b02      	ldr	r3, [sp, #8]
    4e1c:	483b      	ldr	r0, [pc, #236]	; (4f0c <usb_handle_standard_request+0x2d4>)
    4e1e:	f043 0202 	orr.w	r2, r3, #2
    4e22:	4631      	mov	r1, r6
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    4e24:	f01a fdf1 	bl	1fa0a <log_1>
		return false;
    4e28:	e7d8      	b.n	4ddc <usb_handle_standard_request+0x1a4>
	} else if (ret) {
    4e2a:	2800      	cmp	r0, #0
    4e2c:	d0d6      	beq.n	4ddc <usb_handle_standard_request+0x1a4>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    4e2e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    4e32:	4837      	ldr	r0, [pc, #220]	; (4f10 <usb_handle_standard_request+0x2d8>)
    4e34:	4631      	mov	r1, r6
    4e36:	e7f5      	b.n	4e24 <usb_handle_standard_request+0x1ec>
		ret = set_endpoint(ep_desc);
    4e38:	4658      	mov	r0, fp
    4e3a:	f7ff fe43 	bl	4ac4 <set_endpoint>
    4e3e:	e7cd      	b.n	4ddc <usb_handle_standard_request+0x1a4>
	uint8_t ep = (uint8_t)setup->wIndex;
    4e40:	7930      	ldrb	r0, [r6, #4]
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    4e42:	f8d7 8000 	ldr.w	r8, [r7]
	uint8_t ep = (uint8_t)setup->wIndex;
    4e46:	f88d 0017 	strb.w	r0, [sp, #23]
	if (USB_EP_GET_IDX(ep) == 0) {
    4e4a:	f030 0c80 	bics.w	ip, r0, #128	; 0x80
    4e4e:	d01c      	beq.n	4e8a <usb_handle_standard_request+0x252>
    4e50:	4b30      	ldr	r3, [pc, #192]	; (4f14 <usb_handle_standard_request+0x2dc>)
	size_t size = (__usb_data_end - __usb_data_start);
    4e52:	4a31      	ldr	r2, [pc, #196]	; (4f18 <usb_handle_standard_request+0x2e0>)
    4e54:	4931      	ldr	r1, [pc, #196]	; (4f1c <usb_handle_standard_request+0x2e4>)
    4e56:	1ad2      	subs	r2, r2, r3
    4e58:	1092      	asrs	r2, r2, #2
    4e5a:	434a      	muls	r2, r1
	for (size_t i = 0; i < size; i++) {
    4e5c:	f04f 0e00 	mov.w	lr, #0
    4e60:	4572      	cmp	r2, lr
    4e62:	f67f aefc 	bls.w	4c5e <usb_handle_standard_request+0x26>
		ep_data = cfg->endpoint;
    4e66:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    4e68:	f893 901c 	ldrb.w	r9, [r3, #28]
    4e6c:	2700      	movs	r7, #0
			if (ep_data[n].ep_addr == ep) {
    4e6e:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    4e70:	fa5f fa87 	uxtb.w	sl, r7
    4e74:	45ca      	cmp	sl, r9
    4e76:	d303      	bcc.n	4e80 <usb_handle_standard_request+0x248>
	for (size_t i = 0; i < size; i++) {
    4e78:	f10e 0e01 	add.w	lr, lr, #1
    4e7c:	3324      	adds	r3, #36	; 0x24
    4e7e:	e7ef      	b.n	4e60 <usb_handle_standard_request+0x228>
			if (ep_data[n].ep_addr == ep) {
    4e80:	3701      	adds	r7, #1
    4e82:	f811 a037 	ldrb.w	sl, [r1, r7, lsl #3]
    4e86:	4582      	cmp	sl, r0
    4e88:	d1f2      	bne.n	4e70 <usb_handle_standard_request+0x238>
	switch (setup->bRequest) {
    4e8a:	7873      	ldrb	r3, [r6, #1]
    4e8c:	2b01      	cmp	r3, #1
    4e8e:	d013      	beq.n	4eb8 <usb_handle_standard_request+0x280>
    4e90:	2b03      	cmp	r3, #3
    4e92:	d047      	beq.n	4f24 <usb_handle_standard_request+0x2ec>
    4e94:	2b00      	cmp	r3, #0
    4e96:	f47f aee2 	bne.w	4c5e <usb_handle_standard_request+0x26>
		if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    4e9a:	f1bc 0f00 	cmp.w	ip, #0
    4e9e:	d004      	beq.n	4eaa <usb_handle_standard_request+0x272>
    4ea0:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    4ea4:	2b00      	cmp	r3, #0
    4ea6:	f43f aeda 	beq.w	4c5e <usb_handle_standard_request+0x26>
			usb_dc_ep_is_stalled(ep, &data[0]);
    4eaa:	4641      	mov	r1, r8
    4eac:	f001 ff00 	bl	6cb0 <usb_dc_ep_is_stalled>
			data[1] = 0U;
    4eb0:	2000      	movs	r0, #0
    4eb2:	f888 0001 	strb.w	r0, [r8, #1]
    4eb6:	e6fb      	b.n	4cb0 <usb_handle_standard_request+0x78>
		if (setup->wValue == FEA_ENDPOINT_HALT) {
    4eb8:	8873      	ldrh	r3, [r6, #2]
    4eba:	2b00      	cmp	r3, #0
    4ebc:	f47f aecf 	bne.w	4c5e <usb_handle_standard_request+0x26>
			if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    4ec0:	f1bc 0f00 	cmp.w	ip, #0
    4ec4:	d004      	beq.n	4ed0 <usb_handle_standard_request+0x298>
    4ec6:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    4eca:	2b00      	cmp	r3, #0
    4ecc:	f43f aec7 	beq.w	4c5e <usb_handle_standard_request+0x26>
    4ed0:	4b0c      	ldr	r3, [pc, #48]	; (4f04 <usb_handle_standard_request+0x2cc>)
    4ed2:	4a0d      	ldr	r2, [pc, #52]	; (4f08 <usb_handle_standard_request+0x2d0>)
    4ed4:	1ad2      	subs	r2, r2, r3
    4ed6:	08d2      	lsrs	r2, r2, #3
				LOG_INF("... EP clear halt %x", ep);
    4ed8:	0192      	lsls	r2, r2, #6
    4eda:	4601      	mov	r1, r0
    4edc:	f042 0203 	orr.w	r2, r2, #3
    4ee0:	480f      	ldr	r0, [pc, #60]	; (4f20 <usb_handle_standard_request+0x2e8>)
    4ee2:	f01a fd92 	bl	1fa0a <log_1>
				usb_dc_ep_clear_stall(ep);
    4ee6:	f89d 0017 	ldrb.w	r0, [sp, #23]
    4eea:	f001 fec1 	bl	6c70 <usb_dc_ep_clear_stall>
				if (usb_dev.status_callback) {
    4eee:	69e3      	ldr	r3, [r4, #28]
    4ef0:	2b00      	cmp	r3, #0
    4ef2:	f43f aee2 	beq.w	4cba <usb_handle_standard_request+0x82>
					usb_dev.status_callback(
    4ef6:	f10d 0117 	add.w	r1, sp, #23
    4efa:	2009      	movs	r0, #9
					usb_dev.status_callback(
    4efc:	4798      	blx	r3
    4efe:	e6dc      	b.n	4cba <usb_handle_standard_request+0x82>
    4f00:	20001648 	.word	0x20001648
    4f04:	00024c24 	.word	0x00024c24
    4f08:	00024d74 	.word	0x00024d74
    4f0c:	000268e6 	.word	0x000268e6
    4f10:	00026907 	.word	0x00026907
    4f14:	20000ad0 	.word	0x20000ad0
    4f18:	20000af4 	.word	0x20000af4
    4f1c:	38e38e39 	.word	0x38e38e39
    4f20:	00026929 	.word	0x00026929
		if (setup->wValue == FEA_ENDPOINT_HALT) {
    4f24:	8873      	ldrh	r3, [r6, #2]
    4f26:	2b00      	cmp	r3, #0
    4f28:	f47f ae99 	bne.w	4c5e <usb_handle_standard_request+0x26>
			if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    4f2c:	f1bc 0f00 	cmp.w	ip, #0
    4f30:	d004      	beq.n	4f3c <usb_handle_standard_request+0x304>
    4f32:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    4f36:	2b00      	cmp	r3, #0
    4f38:	f43f ae91 	beq.w	4c5e <usb_handle_standard_request+0x26>
    4f3c:	4b16      	ldr	r3, [pc, #88]	; (4f98 <usb_handle_standard_request+0x360>)
    4f3e:	4a17      	ldr	r2, [pc, #92]	; (4f9c <usb_handle_standard_request+0x364>)
    4f40:	1ad2      	subs	r2, r2, r3
    4f42:	08d2      	lsrs	r2, r2, #3
				LOG_INF("--- EP SET halt %x", ep);
    4f44:	0192      	lsls	r2, r2, #6
    4f46:	4601      	mov	r1, r0
    4f48:	f042 0203 	orr.w	r2, r2, #3
    4f4c:	4814      	ldr	r0, [pc, #80]	; (4fa0 <usb_handle_standard_request+0x368>)
    4f4e:	f01a fd5c 	bl	1fa0a <log_1>
				usb_dc_ep_set_stall(ep);
    4f52:	f89d 0017 	ldrb.w	r0, [sp, #23]
    4f56:	f001 fe53 	bl	6c00 <usb_dc_ep_set_stall>
				if (usb_dev.status_callback) {
    4f5a:	69e3      	ldr	r3, [r4, #28]
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	f43f aeac 	beq.w	4cba <usb_handle_standard_request+0x82>
					usb_dev.status_callback(
    4f62:	f10d 0117 	add.w	r1, sp, #23
    4f66:	2008      	movs	r0, #8
    4f68:	e7c8      	b.n	4efc <usb_handle_standard_request+0x2c4>
		if (type == USB_CONFIGURATION_DESC) {
    4f6a:	2a02      	cmp	r2, #2
		*data = p;
    4f6c:	603b      	str	r3, [r7, #0]
		if (type == USB_CONFIGURATION_DESC) {
    4f6e:	f47f aebb 	bne.w	4ce8 <usb_handle_standard_request+0xb0>
			*len = (p[CONF_DESC_wTotalLength]) |
    4f72:	885b      	ldrh	r3, [r3, #2]
    4f74:	602b      	str	r3, [r5, #0]
    4f76:	e6a0      	b.n	4cba <usb_handle_standard_request+0x82>
	switch (setup->bRequest) {
    4f78:	7870      	ldrb	r0, [r6, #1]
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    4f7a:	683a      	ldr	r2, [r7, #0]
	switch (setup->bRequest) {
    4f7c:	280a      	cmp	r0, #10
    4f7e:	f43f af08 	beq.w	4d92 <usb_handle_standard_request+0x15a>
    4f82:	280b      	cmp	r0, #11
    4f84:	f43f af0a 	beq.w	4d9c <usb_handle_standard_request+0x164>
    4f88:	2800      	cmp	r0, #0
    4f8a:	f47f ae68 	bne.w	4c5e <usb_handle_standard_request+0x26>
		data[0] = 0U;
    4f8e:	7010      	strb	r0, [r2, #0]
		data[1] = 0U;
    4f90:	7050      	strb	r0, [r2, #1]
		*len = 2;
    4f92:	6029      	str	r1, [r5, #0]
		break;
    4f94:	e669      	b.n	4c6a <usb_handle_standard_request+0x32>
    4f96:	bf00      	nop
    4f98:	00024c24 	.word	0x00024c24
    4f9c:	00024d74 	.word	0x00024d74
    4fa0:	0002693e 	.word	0x0002693e

00004fa4 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    4fa4:	b508      	push	{r3, lr}
	usb_request_handler handler = usb_dev.req_handlers[type];
    4fa6:	4809      	ldr	r0, [pc, #36]	; (4fcc <usb_handle_request.constprop.0+0x28>)
	uint32_t type = REQTYPE_GET_TYPE(setup->bmRequestType);
    4fa8:	7803      	ldrb	r3, [r0, #0]
    4faa:	f3c3 1341 	ubfx	r3, r3, #5, #2
	usb_request_handler handler = usb_dev.req_handlers[type];
    4fae:	330a      	adds	r3, #10
    4fb0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    4fb4:	b13b      	cbz	r3, 4fc6 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    4fb6:	f100 0208 	add.w	r2, r0, #8
    4fba:	f100 0110 	add.w	r1, r0, #16
    4fbe:	4798      	blx	r3
    4fc0:	43c0      	mvns	r0, r0
    4fc2:	0fc0      	lsrs	r0, r0, #31
}
    4fc4:	bd08      	pop	{r3, pc}
		return false;
    4fc6:	4618      	mov	r0, r3
    4fc8:	e7fc      	b.n	4fc4 <usb_handle_request.constprop.0+0x20>
    4fca:	bf00      	nop
    4fcc:	20001648 	.word	0x20001648

00004fd0 <usb_write>:
{
    4fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fd4:	4c12      	ldr	r4, [pc, #72]	; (5020 <usb_write+0x50>)
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    4fd6:	f8df b050 	ldr.w	fp, [pc, #80]	; 5028 <usb_write+0x58>
{
    4fda:	4698      	mov	r8, r3
    4fdc:	4b11      	ldr	r3, [pc, #68]	; (5024 <usb_write+0x54>)
    4fde:	1ae4      	subs	r4, r4, r3
    4fe0:	08e4      	lsrs	r4, r4, #3
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    4fe2:	01a4      	lsls	r4, r4, #6
{
    4fe4:	4605      	mov	r5, r0
    4fe6:	460e      	mov	r6, r1
    4fe8:	4617      	mov	r7, r2
    4fea:	f04f 0904 	mov.w	r9, #4
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    4fee:	f044 0402 	orr.w	r4, r4, #2
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    4ff2:	4643      	mov	r3, r8
    4ff4:	463a      	mov	r2, r7
    4ff6:	4631      	mov	r1, r6
    4ff8:	4628      	mov	r0, r5
    4ffa:	f001 febf 	bl	6d7c <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    4ffe:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    5002:	4682      	mov	sl, r0
		if (ret == -EAGAIN) {
    5004:	d109      	bne.n	501a <usb_write+0x4a>
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    5006:	4622      	mov	r2, r4
    5008:	4629      	mov	r1, r5
    500a:	4658      	mov	r0, fp
    500c:	f01a fcfd 	bl	1fa0a <log_1>
	z_impl_k_yield();
    5010:	f019 fac4 	bl	1e59c <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    5014:	f1b9 0901 	subs.w	r9, r9, #1
    5018:	d1eb      	bne.n	4ff2 <usb_write+0x22>
}
    501a:	4650      	mov	r0, sl
    501c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5020:	00024d74 	.word	0x00024d74
    5024:	00024c24 	.word	0x00024c24
    5028:	00026951 	.word	0x00026951

0000502c <usb_data_to_host>:
{
    502c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (usb_dev.zlp_flag == false) {
    502e:	4c12      	ldr	r4, [pc, #72]	; (5078 <usb_data_to_host+0x4c>)
    5030:	7d23      	ldrb	r3, [r4, #20]
{
    5032:	4605      	mov	r5, r0
	if (usb_dev.zlp_flag == false) {
    5034:	b9bb      	cbnz	r3, 5066 <usb_data_to_host+0x3a>
		uint32_t chunk = usb_dev.data_buf_residue;
    5036:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_IN_EP0, usb_dev.data_buf,
    5038:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    503a:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_IN_EP0, usb_dev.data_buf,
    503c:	ab01      	add	r3, sp, #4
    503e:	2080      	movs	r0, #128	; 0x80
    5040:	f7ff ffc6 	bl	4fd0 <usb_write>
		usb_dev.data_buf += chunk;
    5044:	9901      	ldr	r1, [sp, #4]
    5046:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    5048:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    504a:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    504c:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    504e:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    5050:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && len > usb_dev.data_buf_len) {
    5052:	b933      	cbnz	r3, 5062 <usb_data_to_host+0x36>
    5054:	6923      	ldr	r3, [r4, #16]
    5056:	429d      	cmp	r5, r3
    5058:	dd03      	ble.n	5062 <usb_data_to_host+0x36>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    505a:	069b      	lsls	r3, r3, #26
    505c:	d101      	bne.n	5062 <usb_data_to_host+0x36>
				usb_dev.zlp_flag = true;
    505e:	2301      	movs	r3, #1
    5060:	7523      	strb	r3, [r4, #20]
}
    5062:	b003      	add	sp, #12
    5064:	bd30      	pop	{r4, r5, pc}
		usb_dev.zlp_flag = false;
    5066:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_IN_EP0, NULL, 0, NULL);
    5068:	461a      	mov	r2, r3
    506a:	4619      	mov	r1, r3
    506c:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    506e:	7523      	strb	r3, [r4, #20]
		usb_dc_ep_write(USB_CONTROL_IN_EP0, NULL, 0, NULL);
    5070:	f001 fe84 	bl	6d7c <usb_dc_ep_write>
}
    5074:	e7f5      	b.n	5062 <usb_data_to_host+0x36>
    5076:	bf00      	nop
    5078:	20001648 	.word	0x20001648

0000507c <usb_handle_control_transfer>:
{
    507c:	b530      	push	{r4, r5, lr}
    507e:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
    5080:	2200      	movs	r2, #0
{
    5082:	460b      	mov	r3, r1
	uint32_t chunk = 0U;
    5084:	9201      	str	r2, [sp, #4]
	if (ep == USB_CONTROL_OUT_EP0 && ep_status == USB_DC_EP_SETUP) {
    5086:	4605      	mov	r5, r0
    5088:	2800      	cmp	r0, #0
    508a:	d161      	bne.n	5150 <usb_handle_control_transfer+0xd4>
    508c:	2900      	cmp	r1, #0
    508e:	d13d      	bne.n	510c <usb_handle_control_transfer+0x90>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    5090:	2208      	movs	r2, #8
    5092:	eb0d 0102 	add.w	r1, sp, r2
    5096:	f01b f9a1 	bl	203dc <usb_dc_ep_read>
    509a:	2800      	cmp	r0, #0
    509c:	da04      	bge.n	50a8 <usb_handle_control_transfer+0x2c>
			usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    509e:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_OUT_EP0);
    50a0:	f001 fdae 	bl	6c00 <usb_dc_ep_set_stall>
}
    50a4:	b005      	add	sp, #20
    50a6:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    50a8:	4c2e      	ldr	r4, [pc, #184]	; (5164 <usb_handle_control_transfer+0xe8>)
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    50aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		setup->bmRequestType = setup_raw.bmRequestType;
    50ae:	9902      	ldr	r1, [sp, #8]
    50b0:	6021      	str	r1, [r4, #0]
		if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    50b2:	2b80      	cmp	r3, #128	; 0x80
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    50b4:	9903      	ldr	r1, [sp, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
    50b6:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    50ba:	6061      	str	r1, [r4, #4]
		if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    50bc:	d910      	bls.n	50e0 <usb_handle_control_transfer+0x64>
			if (REQTYPE_GET_DIR(setup->bmRequestType)
    50be:	09d5      	lsrs	r5, r2, #7
    50c0:	d10e      	bne.n	50e0 <usb_handle_control_transfer+0x64>
    50c2:	4929      	ldr	r1, [pc, #164]	; (5168 <usb_handle_control_transfer+0xec>)
    50c4:	4b29      	ldr	r3, [pc, #164]	; (516c <usb_handle_control_transfer+0xf0>)
				LOG_ERR("Request buffer too small");
    50c6:	482a      	ldr	r0, [pc, #168]	; (5170 <usb_handle_control_transfer+0xf4>)
    50c8:	1ac9      	subs	r1, r1, r3
    50ca:	08c9      	lsrs	r1, r1, #3
    50cc:	0189      	lsls	r1, r1, #6
    50ce:	f041 0101 	orr.w	r1, r1, #1
    50d2:	f01a fc8d 	bl	1f9f0 <log_0>
				usb_dc_ep_set_stall(USB_CONTROL_IN_EP0);
    50d6:	2080      	movs	r0, #128	; 0x80
    50d8:	f001 fd92 	bl	6c00 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_OUT_EP0);
    50dc:	4628      	mov	r0, r5
    50de:	e7df      	b.n	50a0 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf = usb_dev.req_data;
    50e0:	4924      	ldr	r1, [pc, #144]	; (5174 <usb_handle_control_transfer+0xf8>)
		usb_dev.data_buf_len = setup->wLength;
    50e2:	6123      	str	r3, [r4, #16]
		usb_dev.data_buf_residue = setup->wLength;
    50e4:	e9c4 1302 	strd	r1, r3, [r4, #8]
		usb_dev.zlp_flag = false;
    50e8:	2100      	movs	r1, #0
    50ea:	7521      	strb	r1, [r4, #20]
		if (setup->wLength &&
    50ec:	b10b      	cbz	r3, 50f2 <usb_handle_control_transfer+0x76>
    50ee:	09d3      	lsrs	r3, r2, #7
    50f0:	d0d8      	beq.n	50a4 <usb_handle_control_transfer+0x28>
		if (!usb_handle_request(setup,
    50f2:	f7ff ff57 	bl	4fa4 <usb_handle_request.constprop.0>
    50f6:	2800      	cmp	r0, #0
    50f8:	d0d1      	beq.n	509e <usb_handle_control_transfer+0x22>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    50fa:	88e0      	ldrh	r0, [r4, #6]
    50fc:	6923      	ldr	r3, [r4, #16]
    50fe:	4283      	cmp	r3, r0
    5100:	bfd4      	ite	le
    5102:	60e3      	strle	r3, [r4, #12]
    5104:	60e0      	strgt	r0, [r4, #12]
			usb_data_to_host(setup->wLength);
    5106:	f7ff ff91 	bl	502c <usb_data_to_host>
		__ASSERT_NO_MSG(false);
    510a:	e7cb      	b.n	50a4 <usb_handle_control_transfer+0x28>
		if (usb_dev.data_buf_residue <= 0) {
    510c:	4c15      	ldr	r4, [pc, #84]	; (5164 <usb_handle_control_transfer+0xe8>)
    510e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    5112:	2a00      	cmp	r2, #0
			if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
    5114:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    5116:	dc05      	bgt.n	5124 <usb_handle_control_transfer+0xa8>
			if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
    5118:	4602      	mov	r2, r0
    511a:	f01b f95f 	bl	203dc <usb_dc_ep_read>
    511e:	2800      	cmp	r0, #0
    5120:	dac0      	bge.n	50a4 <usb_handle_control_transfer+0x28>
    5122:	e7bc      	b.n	509e <usb_handle_control_transfer+0x22>
		if (usb_dc_ep_read(USB_CONTROL_OUT_EP0,
    5124:	f01b f95a 	bl	203dc <usb_dc_ep_read>
    5128:	2800      	cmp	r0, #0
    512a:	dbd4      	blt.n	50d6 <usb_handle_control_transfer+0x5a>
		usb_dev.data_buf += chunk;
    512c:	9901      	ldr	r1, [sp, #4]
    512e:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    5130:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    5132:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    5134:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    5136:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    5138:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    513a:	2b00      	cmp	r3, #0
    513c:	d1b2      	bne.n	50a4 <usb_handle_control_transfer+0x28>
			usb_dev.data_buf = usb_dev.req_data;
    513e:	f104 0338 	add.w	r3, r4, #56	; 0x38
    5142:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    5144:	f7ff ff2e 	bl	4fa4 <usb_handle_request.constprop.0>
    5148:	2800      	cmp	r0, #0
    514a:	d0a8      	beq.n	509e <usb_handle_control_transfer+0x22>
			usb_data_to_host(setup->wLength);
    514c:	88e0      	ldrh	r0, [r4, #6]
    514e:	e7da      	b.n	5106 <usb_handle_control_transfer+0x8a>
	} else if (ep == USB_CONTROL_IN_EP0) {
    5150:	2880      	cmp	r0, #128	; 0x80
    5152:	d1a7      	bne.n	50a4 <usb_handle_control_transfer+0x28>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    5154:	4b03      	ldr	r3, [pc, #12]	; (5164 <usb_handle_control_transfer+0xe8>)
    5156:	68da      	ldr	r2, [r3, #12]
    5158:	b912      	cbnz	r2, 5160 <usb_handle_control_transfer+0xe4>
    515a:	7d1a      	ldrb	r2, [r3, #20]
    515c:	2a00      	cmp	r2, #0
    515e:	d0a1      	beq.n	50a4 <usb_handle_control_transfer+0x28>
			usb_data_to_host(setup->wLength);
    5160:	88d8      	ldrh	r0, [r3, #6]
    5162:	e7d0      	b.n	5106 <usb_handle_control_transfer+0x8a>
    5164:	20001648 	.word	0x20001648
    5168:	00024d74 	.word	0x00024d74
    516c:	00024c24 	.word	0x00024c24
    5170:	00026978 	.word	0x00026978
    5174:	20001680 	.word	0x20001680

00005178 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    5178:	4b05      	ldr	r3, [pc, #20]	; (5190 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    517a:	4a06      	ldr	r2, [pc, #24]	; (5194 <usb_set_config+0x1c>)
    517c:	629a      	str	r2, [r3, #40]	; 0x28
    517e:	4a06      	ldr	r2, [pc, #24]	; (5198 <usb_set_config+0x20>)
    5180:	62da      	str	r2, [r3, #44]	; 0x2c
    5182:	4a06      	ldr	r2, [pc, #24]	; (519c <usb_set_config+0x24>)
    5184:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    5186:	4a06      	ldr	r2, [pc, #24]	; (51a0 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    5188:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    518a:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    518c:	2000      	movs	r0, #0
    518e:	4770      	bx	lr
    5190:	20001648 	.word	0x20001648
    5194:	00004c39 	.word	0x00004c39
    5198:	000049c1 	.word	0x000049c1
    519c:	00004a75 	.word	0x00004a75
    51a0:	00004a15 	.word	0x00004a15

000051a4 <usb_device_init>:
 */
static int usb_device_init(const struct device *dev)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    51a4:	4b0c      	ldr	r3, [pc, #48]	; (51d8 <usb_device_init+0x34>)
{
    51a6:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    51a8:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    51ac:	b98c      	cbnz	r4, 51d2 <usb_device_init+0x2e>
		return 0;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    51ae:	f000 f9f3 	bl	5598 <usb_get_device_descriptor>
	if (!device_descriptor) {
    51b2:	b960      	cbnz	r0, 51ce <usb_device_init+0x2a>
    51b4:	4b09      	ldr	r3, [pc, #36]	; (51dc <usb_device_init+0x38>)
    51b6:	490a      	ldr	r1, [pc, #40]	; (51e0 <usb_device_init+0x3c>)
		LOG_ERR("Failed to configure USB device stack");
    51b8:	480a      	ldr	r0, [pc, #40]	; (51e4 <usb_device_init+0x40>)
    51ba:	1ac9      	subs	r1, r1, r3
    51bc:	08c9      	lsrs	r1, r1, #3
    51be:	0189      	lsls	r1, r1, #6
    51c0:	f041 0101 	orr.w	r1, r1, #1
    51c4:	f01a fc14 	bl	1f9f0 <log_0>
		return -1;
    51c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	usb_set_config(device_descriptor);

	return 0;
}
    51cc:	bd10      	pop	{r4, pc}
	usb_set_config(device_descriptor);
    51ce:	f7ff ffd3 	bl	5178 <usb_set_config>
		return 0;
    51d2:	2000      	movs	r0, #0
    51d4:	e7fa      	b.n	51cc <usb_device_init+0x28>
    51d6:	bf00      	nop
    51d8:	20001648 	.word	0x20001648
    51dc:	00024c24 	.word	0x00024c24
    51e0:	00024d74 	.word	0x00024d74
    51e4:	00026991 	.word	0x00026991

000051e8 <usb_enable>:
{
    51e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    51ec:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    51ee:	4d37      	ldr	r5, [pc, #220]	; (52cc <usb_enable+0xe4>)
	return z_impl_k_mutex_lock(mutex, timeout);
    51f0:	4837      	ldr	r0, [pc, #220]	; (52d0 <usb_enable+0xe8>)
    51f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    51f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    51fa:	f018 fdb3 	bl	1dd64 <z_impl_k_mutex_lock>
    51fe:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    5202:	2e00      	cmp	r6, #0
    5204:	d142      	bne.n	528c <usb_enable+0xa4>
	usb_dev.status_callback = cb;
    5206:	4833      	ldr	r0, [pc, #204]	; (52d4 <usb_enable+0xec>)
	usb_dev.user_status_callback = status_cb;
    5208:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    520a:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    520c:	f001 ff18 	bl	7040 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    5210:	f001 fc3a 	bl	6a88 <usb_dc_attach>
	if (ret < 0) {
    5214:	1e04      	subs	r4, r0, #0
    5216:	db3a      	blt.n	528e <usb_enable+0xa6>
	ret = usb_transfer_init();
    5218:	f000 fbbc 	bl	5994 <usb_transfer_init>
	if (ret < 0) {
    521c:	1e04      	subs	r4, r0, #0
    521e:	db36      	blt.n	528e <usb_enable+0xa6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    5220:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    5222:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    5224:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    5228:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_OUT_EP0;
    522c:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    5230:	f001 fcb4 	bl	6b9c <usb_dc_ep_configure>
	if (ret < 0) {
    5234:	1e04      	subs	r4, r0, #0
    5236:	db2a      	blt.n	528e <usb_enable+0xa6>
	ep0_cfg.ep_addr = USB_CONTROL_IN_EP0;
    5238:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    523a:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_IN_EP0;
    523c:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    5240:	f001 fcac 	bl	6b9c <usb_dc_ep_configure>
	if (ret < 0) {
    5244:	1e04      	subs	r4, r0, #0
    5246:	db22      	blt.n	528e <usb_enable+0xa6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_OUT_EP0,
    5248:	4923      	ldr	r1, [pc, #140]	; (52d8 <usb_enable+0xf0>)
    524a:	4630      	mov	r0, r6
    524c:	f001 fee4 	bl	7018 <usb_dc_ep_set_callback>
	if (ret < 0) {
    5250:	1e04      	subs	r4, r0, #0
    5252:	db1c      	blt.n	528e <usb_enable+0xa6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_IN_EP0,
    5254:	4920      	ldr	r1, [pc, #128]	; (52d8 <usb_enable+0xf0>)
    5256:	4638      	mov	r0, r7
    5258:	f001 fede 	bl	7018 <usb_dc_ep_set_callback>
	if (ret < 0) {
    525c:	1e04      	subs	r4, r0, #0
    525e:	db16      	blt.n	528e <usb_enable+0xa6>
	size_t size = (__usb_data_end - __usb_data_start);
    5260:	4c1e      	ldr	r4, [pc, #120]	; (52dc <usb_enable+0xf4>)
    5262:	4b1f      	ldr	r3, [pc, #124]	; (52e0 <usb_enable+0xf8>)
    5264:	4a1f      	ldr	r2, [pc, #124]	; (52e4 <usb_enable+0xfc>)
    5266:	1b1b      	subs	r3, r3, r4
    5268:	109b      	asrs	r3, r3, #2
    526a:	fb02 f903 	mul.w	r9, r2, r3
	for (size_t i = 0; i < size; i++) {
    526e:	45b1      	cmp	r9, r6
    5270:	d114      	bne.n	529c <usb_enable+0xb4>
	ret = usb_dc_ep_enable(USB_CONTROL_OUT_EP0);
    5272:	2000      	movs	r0, #0
    5274:	f001 fd38 	bl	6ce8 <usb_dc_ep_enable>
	if (ret < 0) {
    5278:	1e04      	subs	r4, r0, #0
    527a:	db08      	blt.n	528e <usb_enable+0xa6>
	ret = usb_dc_ep_enable(USB_CONTROL_IN_EP0);
    527c:	2080      	movs	r0, #128	; 0x80
    527e:	f001 fd33 	bl	6ce8 <usb_dc_ep_enable>
	if (ret < 0) {
    5282:	1e04      	subs	r4, r0, #0
    5284:	db03      	blt.n	528e <usb_enable+0xa6>
	usb_dev.enabled = true;
    5286:	2301      	movs	r3, #1
    5288:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		ret = 0;
    528c:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    528e:	4810      	ldr	r0, [pc, #64]	; (52d0 <usb_enable+0xe8>)
    5290:	f018 fde0 	bl	1de54 <z_impl_k_mutex_unlock>
}
    5294:	4620      	mov	r0, r4
    5296:	b003      	add	sp, #12
    5298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ep_data = __usb_data_start[i].endpoint;
    529c:	f8d4 8020 	ldr.w	r8, [r4, #32]
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
    52a0:	2700      	movs	r7, #0
    52a2:	7f23      	ldrb	r3, [r4, #28]
    52a4:	b2fa      	uxtb	r2, r7
    52a6:	4293      	cmp	r3, r2
    52a8:	d802      	bhi.n	52b0 <usb_enable+0xc8>
	for (size_t i = 0; i < size; i++) {
    52aa:	3601      	adds	r6, #1
    52ac:	3424      	adds	r4, #36	; 0x24
    52ae:	e7de      	b.n	526e <usb_enable+0x86>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    52b0:	eb08 03c2 	add.w	r3, r8, r2, lsl #3
    52b4:	f858 1032 	ldr.w	r1, [r8, r2, lsl #3]
    52b8:	7918      	ldrb	r0, [r3, #4]
    52ba:	f001 fead 	bl	7018 <usb_dc_ep_set_callback>
    52be:	3701      	adds	r7, #1
    52c0:	2800      	cmp	r0, #0
    52c2:	d0ee      	beq.n	52a2 <usb_enable+0xba>
    52c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    52c8:	e7e1      	b.n	528e <usb_enable+0xa6>
    52ca:	bf00      	nop
    52cc:	20001648 	.word	0x20001648
    52d0:	20000864 	.word	0x20000864
    52d4:	00004b8d 	.word	0x00004b8d
    52d8:	0000507d 	.word	0x0000507d
    52dc:	20000ad0 	.word	0x20000ad0
    52e0:	20000af4 	.word	0x20000af4
    52e4:	38e38e39 	.word	0x38e38e39

000052e8 <usb_update_sn_string_descriptor>:
 * Hardware Information Driver (HWINFO). User can implement own variant
 * of this function. Please note that the length of the new Serial Number
 * descriptor may not exceed the length of the CONFIG_USB_DEVICE_SN.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    52e8:	b530      	push	{r4, r5, lr}
	uint8_t hwid[sizeof(CONFIG_USB_DEVICE_SN) / 2];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    52ea:	4b1c      	ldr	r3, [pc, #112]	; (535c <usb_update_sn_string_descriptor+0x74>)
{
    52ec:	b089      	sub	sp, #36	; 0x24
	const char hex[] = "0123456789ABCDEF";
    52ee:	aa03      	add	r2, sp, #12
    52f0:	f103 0510 	add.w	r5, r3, #16
    52f4:	6818      	ldr	r0, [r3, #0]
    52f6:	6859      	ldr	r1, [r3, #4]
    52f8:	4614      	mov	r4, r2
    52fa:	c403      	stmia	r4!, {r0, r1}
    52fc:	3308      	adds	r3, #8
    52fe:	42ab      	cmp	r3, r5
    5300:	4622      	mov	r2, r4
    5302:	d1f7      	bne.n	52f4 <usb_update_sn_string_descriptor+0xc>
    5304:	781b      	ldrb	r3, [r3, #0]
    5306:	7023      	strb	r3, [r4, #0]

	memset(hwid, 0, sizeof(hwid));
    5308:	2208      	movs	r2, #8
    530a:	2100      	movs	r1, #0
    530c:	a801      	add	r0, sp, #4
    530e:	f01c f9f5 	bl	216fc <memset>
	memset(sn, 0, sizeof(sn));
    5312:	2212      	movs	r2, #18
    5314:	2100      	movs	r1, #0
    5316:	4812      	ldr	r0, [pc, #72]	; (5360 <usb_update_sn_string_descriptor+0x78>)
    5318:	f01c f9f0 	bl	216fc <memset>
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    531c:	2108      	movs	r1, #8
    531e:	a801      	add	r0, sp, #4
    5320:	f01b f86b 	bl	203fa <z_impl_hwinfo_get_device_id>

	if (hwinfo_get_device_id(hwid, sizeof(hwid)) > 0) {
    5324:	2800      	cmp	r0, #0
    5326:	dd16      	ble.n	5356 <usb_update_sn_string_descriptor+0x6e>
    5328:	490d      	ldr	r1, [pc, #52]	; (5360 <usb_update_sn_string_descriptor+0x78>)
    532a:	aa01      	add	r2, sp, #4
		LOG_HEXDUMP_DBG(hwid, sizeof(hwid), "Serial Number");
		for (int i = 0; i < sizeof(hwid); i++) {
    532c:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i] >> 4];
    532e:	f812 3b01 	ldrb.w	r3, [r2], #1
    5332:	ac08      	add	r4, sp, #32
    5334:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i] & 0xF];
    5338:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i] >> 4];
    533c:	f814 4c14 	ldrb.w	r4, [r4, #-20]
    5340:	700c      	strb	r4, [r1, #0]
			sn[i * 2 + 1] = hex[hwid[i] & 0xF];
    5342:	ac08      	add	r4, sp, #32
    5344:	4423      	add	r3, r4
		for (int i = 0; i < sizeof(hwid); i++) {
    5346:	3001      	adds	r0, #1
			sn[i * 2 + 1] = hex[hwid[i] & 0xF];
    5348:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    534c:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < sizeof(hwid); i++) {
    534e:	2808      	cmp	r0, #8
    5350:	f101 0102 	add.w	r1, r1, #2
    5354:	d1eb      	bne.n	532e <usb_update_sn_string_descriptor+0x46>
		}
	}

	return sn;
}
    5356:	4802      	ldr	r0, [pc, #8]	; (5360 <usb_update_sn_string_descriptor+0x78>)
    5358:	b009      	add	sp, #36	; 0x24
    535a:	bd30      	pop	{r4, r5, pc}
    535c:	000269c1 	.word	0x000269c1
    5360:	20005ac9 	.word	0x20005ac9

00005364 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    5364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t length = (__usb_data_end - __usb_data_start);
    5368:	4a7f      	ldr	r2, [pc, #508]	; (5568 <usb_fix_descriptor+0x204>)
    536a:	4b80      	ldr	r3, [pc, #512]	; (556c <usb_fix_descriptor+0x208>)
    536c:	4d80      	ldr	r5, [pc, #512]	; (5570 <usb_fix_descriptor+0x20c>)
    536e:	4981      	ldr	r1, [pc, #516]	; (5574 <usb_fix_descriptor+0x210>)
    5370:	1a9b      	subs	r3, r3, r2
    5372:	4a81      	ldr	r2, [pc, #516]	; (5578 <usb_fix_descriptor+0x214>)
{
    5374:	b087      	sub	sp, #28
	size_t length = (__usb_data_end - __usb_data_start);
    5376:	109b      	asrs	r3, r3, #2
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    5378:	2700      	movs	r7, #0
	size_t length = (__usb_data_end - __usb_data_start);
    537a:	4353      	muls	r3, r2
    537c:	1a6d      	subs	r5, r5, r1
{
    537e:	4604      	mov	r4, r0
	size_t length = (__usb_data_end - __usb_data_start);
    5380:	9301      	str	r3, [sp, #4]
    5382:	08ed      	lsrs	r5, r5, #3
	uint32_t requested_ep = BIT(16) | BIT(0);
    5384:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    5388:	46b9      	mov	r9, r7
	struct usb_cfg_data *cfg_data = NULL;
    538a:	46b8      	mov	r8, r7
	struct usb_cfg_descriptor *cfg_descr = NULL;
    538c:	46ba      	mov	sl, r7

	while (head->bLength != 0U) {
    538e:	7823      	ldrb	r3, [r4, #0]
    5390:	b94b      	cbnz	r3, 53a6 <usb_fix_descriptor+0x42>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    5392:	4a7a      	ldr	r2, [pc, #488]	; (557c <usb_fix_descriptor+0x218>)
    5394:	1ca0      	adds	r0, r4, #2
    5396:	4290      	cmp	r0, r2
    5398:	f000 80e3 	beq.w	5562 <usb_fix_descriptor+0x1fe>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
    539c:	f7ff ffe2 	bl	5364 <usb_fix_descriptor>
	}

	return 0;
}
    53a0:	b007      	add	sp, #28
    53a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (head->bDescriptorType) {
    53a6:	7863      	ldrb	r3, [r4, #1]
    53a8:	2b05      	cmp	r3, #5
    53aa:	d805      	bhi.n	53b8 <usb_fix_descriptor+0x54>
    53ac:	e8df f003 	tbb	[pc, r3]
    53b0:	95030495 	.word	0x95030495
    53b4:	3007      	.short	0x3007
    53b6:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    53b8:	7823      	ldrb	r3, [r4, #0]
    53ba:	441c      	add	r4, r3
    53bc:	e7e7      	b.n	538e <usb_fix_descriptor+0x2a>
			if (if_descr->bAlternateSetting) {
    53be:	78e3      	ldrb	r3, [r4, #3]
    53c0:	2b00      	cmp	r3, #0
    53c2:	d1f9      	bne.n	53b8 <usb_fix_descriptor+0x54>
			if (if_descr->bInterfaceNumber == 0U) {
    53c4:	78a3      	ldrb	r3, [r4, #2]
    53c6:	b9c3      	cbnz	r3, 53fa <usb_fix_descriptor+0x96>
    53c8:	4a67      	ldr	r2, [pc, #412]	; (5568 <usb_fix_descriptor+0x204>)
    53ca:	4610      	mov	r0, r2
	for (size_t i = 0; i < length; i++) {
    53cc:	9901      	ldr	r1, [sp, #4]
    53ce:	4299      	cmp	r1, r3
    53d0:	d107      	bne.n	53e2 <usb_fix_descriptor+0x7e>
					LOG_ERR("There is no usb_cfg_data "
    53d2:	01aa      	lsls	r2, r5, #6
    53d4:	486a      	ldr	r0, [pc, #424]	; (5580 <usb_fix_descriptor+0x21c>)
    53d6:	f042 0201 	orr.w	r2, r2, #1
    53da:	4621      	mov	r1, r4
    53dc:	f01a fb15 	bl	1fa0a <log_1>
    53e0:	e01f      	b.n	5422 <usb_fix_descriptor+0xbe>
		if (__usb_data_start[i].interface_descriptor == iface) {
    53e2:	6851      	ldr	r1, [r2, #4]
    53e4:	428c      	cmp	r4, r1
    53e6:	f102 0224 	add.w	r2, r2, #36	; 0x24
    53ea:	d10b      	bne.n	5404 <usb_fix_descriptor+0xa0>
			return &__usb_data_start[i];
    53ec:	f04f 0824 	mov.w	r8, #36	; 0x24
    53f0:	fb08 0803 	mla	r8, r8, r3, r0
				if (cfg_data->interface_config) {
    53f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    53f8:	b933      	cbnz	r3, 5408 <usb_fix_descriptor+0xa4>
			numof_ifaces++;
    53fa:	f109 0901 	add.w	r9, r9, #1
    53fe:	fa5f f989 	uxtb.w	r9, r9
			break;
    5402:	e7d9      	b.n	53b8 <usb_fix_descriptor+0x54>
	for (size_t i = 0; i < length; i++) {
    5404:	3301      	adds	r3, #1
    5406:	e7e1      	b.n	53cc <usb_fix_descriptor+0x68>
					cfg_data->interface_config(head,
    5408:	4649      	mov	r1, r9
    540a:	4620      	mov	r0, r4
    540c:	4798      	blx	r3
    540e:	e7f4      	b.n	53fa <usb_fix_descriptor+0x96>
			if (!cfg_data) {
    5410:	f1b8 0f00 	cmp.w	r8, #0
    5414:	d15e      	bne.n	54d4 <usb_fix_descriptor+0x170>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    5416:	01a9      	lsls	r1, r5, #6
    5418:	485a      	ldr	r0, [pc, #360]	; (5584 <usb_fix_descriptor+0x220>)
    541a:	f041 0101 	orr.w	r1, r1, #1
				LOG_ERR("Failed to validate endpoints");
    541e:	f01a fae7 	bl	1f9f0 <log_0>
					return -1;
    5422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5426:	e7bb      	b.n	53a0 <usb_fix_descriptor+0x3c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    5428:	f8d8 2020 	ldr.w	r2, [r8, #32]
    542c:	78a6      	ldrb	r6, [r4, #2]
    542e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    5432:	7910      	ldrb	r0, [r2, #4]
    5434:	4286      	cmp	r6, r0
    5436:	d009      	beq.n	544c <usb_fix_descriptor+0xe8>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    5438:	3301      	adds	r3, #1
    543a:	f898 201c 	ldrb.w	r2, [r8, #28]
    543e:	4293      	cmp	r3, r2
    5440:	d3f2      	bcc.n	5428 <usb_fix_descriptor+0xc4>
				LOG_ERR("Failed to validate endpoints");
    5442:	01a9      	lsls	r1, r5, #6
    5444:	4850      	ldr	r0, [pc, #320]	; (5588 <usb_fix_descriptor+0x224>)
    5446:	f041 0101 	orr.w	r1, r1, #1
    544a:	e7e8      	b.n	541e <usb_fix_descriptor+0xba>
    544c:	2601      	movs	r6, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    544e:	f894 c003 	ldrb.w	ip, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    5452:	f894 e005 	ldrb.w	lr, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    5456:	f00c 0c03 	and.w	ip, ip, #3
    545a:	f88d c014 	strb.w	ip, [sp, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    545e:	f894 c004 	ldrb.w	ip, [r4, #4]
    5462:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
    5466:	f8ad c012 	strh.w	ip, [sp, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    546a:	f994 c002 	ldrsb.w	ip, [r4, #2]
    546e:	f1bc 0f00 	cmp.w	ip, #0
    5472:	b2f0      	uxtb	r0, r6
    5474:	da25      	bge.n	54c2 <usb_fix_descriptor+0x15e>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    5476:	f106 0c10 	add.w	ip, r6, #16
    547a:	fa01 fc0c 	lsl.w	ip, r1, ip
    547e:	ea1c 0f0b 	tst.w	ip, fp
    5482:	d123      	bne.n	54cc <usb_fix_descriptor+0x168>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    5484:	f060 007f 	orn	r0, r0, #127	; 0x7f
				ep_cfg.ep_addr = idx;
    5488:	f88d 0010 	strb.w	r0, [sp, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    548c:	a804      	add	r0, sp, #16
    548e:	e9cd 3202 	strd	r3, r2, [sp, #8]
    5492:	f001 fb49 	bl	6b28 <usb_dc_ep_check_cap>
    5496:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    549a:	2101      	movs	r1, #1
    549c:	b9b0      	cbnz	r0, 54cc <usb_fix_descriptor+0x168>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    549e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    54a2:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    54a4:	f013 0f80 	tst.w	r3, #128	; 0x80
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    54a8:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
    54aa:	bf18      	it	ne
    54ac:	3610      	addne	r6, #16
    54ae:	460b      	mov	r3, r1
    54b0:	bf15      	itete	ne
    54b2:	40b3      	lslne	r3, r6
					*requested_ep |= (1U << idx);
    54b4:	fa03 f606 	lsleq.w	r6, r3, r6
					*requested_ep |= (1U << (idx + 16U));
    54b8:	ea4b 0b03 	orrne.w	fp, fp, r3
					*requested_ep |= (1U << idx);
    54bc:	ea4b 0b06 	orreq.w	fp, fp, r6
				return 0;
    54c0:	e77a      	b.n	53b8 <usb_fix_descriptor+0x54>
				if ((*requested_ep & (1U << (idx)))) {
    54c2:	fa01 fc06 	lsl.w	ip, r1, r6
    54c6:	ea1c 0f0b 	tst.w	ip, fp
    54ca:	d0dd      	beq.n	5488 <usb_fix_descriptor+0x124>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    54cc:	3601      	adds	r6, #1
    54ce:	2e10      	cmp	r6, #16
    54d0:	d1bd      	bne.n	544e <usb_fix_descriptor+0xea>
    54d2:	e7b1      	b.n	5438 <usb_fix_descriptor+0xd4>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    54d4:	2300      	movs	r3, #0
    54d6:	2101      	movs	r1, #1
    54d8:	e7af      	b.n	543a <usb_fix_descriptor+0xd6>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    54da:	2f03      	cmp	r7, #3
    54dc:	d125      	bne.n	552a <usb_fix_descriptor+0x1c6>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    54de:	f7ff ff03 	bl	52e8 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    54e2:	4606      	mov	r6, r0
    54e4:	b178      	cbz	r0, 5506 <usb_fix_descriptor+0x1a2>
	runtime_sn_len = strlen(runtime_sn);
    54e6:	f01c f8bb 	bl	21660 <strlen>
	if (!runtime_sn_len) {
    54ea:	9002      	str	r0, [sp, #8]
    54ec:	b158      	cbz	r0, 5506 <usb_fix_descriptor+0x1a2>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    54ee:	4827      	ldr	r0, [pc, #156]	; (558c <usb_fix_descriptor+0x228>)
    54f0:	f01c f8b6 	bl	21660 <strlen>
	if (runtime_sn_len != default_sn_len) {
    54f4:	9a02      	ldr	r2, [sp, #8]
    54f6:	4282      	cmp	r2, r0
    54f8:	d012      	beq.n	5520 <usb_fix_descriptor+0x1bc>
		LOG_ERR("the new SN descriptor doesn't have the same "
    54fa:	01a9      	lsls	r1, r5, #6
    54fc:	4824      	ldr	r0, [pc, #144]	; (5590 <usb_fix_descriptor+0x22c>)
    54fe:	f041 0101 	orr.w	r1, r1, #1
    5502:	f01a fa75 	bl	1f9f0 <log_0>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    5506:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    5508:	f06f 0102 	mvn.w	r1, #2
    550c:	18e2      	adds	r2, r4, r3
    550e:	1b09      	subs	r1, r1, r4
    5510:	eb04 0353 	add.w	r3, r4, r3, lsr #1
		buf[i] = 0U;
    5514:	2000      	movs	r0, #0
	for (int i = idx_max; i >= 0; i -= 2) {
    5516:	42d1      	cmn	r1, r2
    5518:	d511      	bpl.n	553e <usb_fix_descriptor+0x1da>
			str_descr_idx += 1U;
    551a:	3701      	adds	r7, #1
    551c:	b2ff      	uxtb	r7, r7
			break;
    551e:	e74b      	b.n	53b8 <usb_fix_descriptor+0x54>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    5520:	4631      	mov	r1, r6
    5522:	1ca0      	adds	r0, r4, #2
    5524:	f01c f8bf 	bl	216a6 <memcpy>
    5528:	e7ed      	b.n	5506 <usb_fix_descriptor+0x1a2>
			if (str_descr_idx) {
    552a:	2f00      	cmp	r7, #0
    552c:	d1eb      	bne.n	5506 <usb_fix_descriptor+0x1a2>
				if (!cfg_descr) {
    552e:	f1ba 0f00 	cmp.w	sl, #0
    5532:	d10b      	bne.n	554c <usb_fix_descriptor+0x1e8>
					LOG_ERR("Incomplete device descriptor");
    5534:	01a9      	lsls	r1, r5, #6
    5536:	4817      	ldr	r0, [pc, #92]	; (5594 <usb_fix_descriptor+0x230>)
    5538:	f041 0101 	orr.w	r1, r1, #1
    553c:	e76f      	b.n	541e <usb_fix_descriptor+0xba>
		buf[i] = 0U;
    553e:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    5542:	f813 6901 	ldrb.w	r6, [r3], #-1
    5546:	f802 6d02 	strb.w	r6, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    554a:	e7e4      	b.n	5516 <usb_fix_descriptor+0x1b2>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    554c:	eba4 030a 	sub.w	r3, r4, sl
	dst[0] = val;
    5550:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
    5554:	f3c3 2307 	ubfx	r3, r3, #8, #8
    5558:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    555c:	f88a 9004 	strb.w	r9, [sl, #4]
    5560:	e7db      	b.n	551a <usb_fix_descriptor+0x1b6>
	return 0;
    5562:	4618      	mov	r0, r3
    5564:	e71c      	b.n	53a0 <usb_fix_descriptor+0x3c>
    5566:	bf00      	nop
    5568:	20000ad0 	.word	0x20000ad0
    556c:	20000af4 	.word	0x20000af4
    5570:	00024d6c 	.word	0x00024d6c
    5574:	00024c24 	.word	0x00024c24
    5578:	38e38e39 	.word	0x38e38e39
    557c:	20000acf 	.word	0x20000acf
    5580:	00026a98 	.word	0x00026a98
    5584:	000269d2 	.word	0x000269d2
    5588:	00026a13 	.word	0x00026a13
    558c:	000269c1 	.word	0x000269c1
    5590:	00026a30 	.word	0x00026a30
    5594:	00026a7b 	.word	0x00026a7b

00005598 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    5598:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    559a:	4809      	ldr	r0, [pc, #36]	; (55c0 <usb_get_device_descriptor+0x28>)
    559c:	f7ff fee2 	bl	5364 <usb_fix_descriptor>
    55a0:	b158      	cbz	r0, 55ba <usb_get_device_descriptor+0x22>
    55a2:	4b08      	ldr	r3, [pc, #32]	; (55c4 <usb_get_device_descriptor+0x2c>)
    55a4:	4908      	ldr	r1, [pc, #32]	; (55c8 <usb_get_device_descriptor+0x30>)
		LOG_ERR("Failed to fixup USB descriptor");
    55a6:	4809      	ldr	r0, [pc, #36]	; (55cc <usb_get_device_descriptor+0x34>)
    55a8:	1ac9      	subs	r1, r1, r3
    55aa:	08c9      	lsrs	r1, r1, #3
    55ac:	0189      	lsls	r1, r1, #6
    55ae:	f041 0101 	orr.w	r1, r1, #1
    55b2:	f01a fa1d 	bl	1f9f0 <log_0>
		return NULL;
    55b6:	2000      	movs	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
    55b8:	bd08      	pop	{r3, pc}
	return (uint8_t *) __usb_descriptor_start;
    55ba:	4801      	ldr	r0, [pc, #4]	; (55c0 <usb_get_device_descriptor+0x28>)
    55bc:	e7fc      	b.n	55b8 <usb_get_device_descriptor+0x20>
    55be:	bf00      	nop
    55c0:	20000a10 	.word	0x20000a10
    55c4:	00024c24 	.word	0x00024c24
    55c8:	00024d6c 	.word	0x00024d6c
    55cc:	00026ab8 	.word	0x00026ab8

000055d0 <k_work_submit_to_queue.constprop.0>:
 * @param work_q Address of workqueue.
 * @param work Address of work item.
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
    55d0:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    55d2:	f100 0308 	add.w	r3, r0, #8
    55d6:	f3bf 8f5b 	dmb	ish
    55da:	e853 2f00 	ldrex	r2, [r3]
    55de:	f042 0001 	orr.w	r0, r2, #1
    55e2:	e843 0c00 	strex	ip, r0, [r3]
    55e6:	f1bc 0f00 	cmp.w	ip, #0
    55ea:	d1f6      	bne.n	55da <k_work_submit_to_queue.constprop.0+0xa>
    55ec:	f3bf 8f5b 	dmb	ish
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    55f0:	07d3      	lsls	r3, r2, #31
    55f2:	d402      	bmi.n	55fa <k_work_submit_to_queue.constprop.0+0x2a>
		k_queue_append(&work_q->queue, work);
    55f4:	4801      	ldr	r0, [pc, #4]	; (55fc <k_work_submit_to_queue.constprop.0+0x2c>)
    55f6:	f01e bde3 	b.w	241c0 <k_queue_append>
	}
}
    55fa:	4770      	bx	lr
    55fc:	20000c40 	.word	0x20000c40

00005600 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    5600:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    5604:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
    5608:	f810 5c34 	ldrb.w	r5, [r0, #-52]
	if (trans->status != -EBUSY) {
    560c:	3310      	adds	r3, #16
{
    560e:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    5610:	d110      	bne.n	5634 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    5612:	68c3      	ldr	r3, [r0, #12]
    5614:	f850 2c28 	ldr.w	r2, [r0, #-40]
    5618:	0799      	lsls	r1, r3, #30
    561a:	d547      	bpl.n	56ac <usb_transfer_work+0xac>
		if (!trans->bsize) {
    561c:	b9fa      	cbnz	r2, 565e <usb_transfer_work+0x5e>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    561e:	f013 0304 	ands.w	r3, r3, #4
    5622:	d104      	bne.n	562e <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    5624:	461a      	mov	r2, r3
    5626:	4619      	mov	r1, r3
    5628:	4628      	mov	r0, r5
    562a:	f7ff fcd1 	bl	4fd0 <usb_write>
			}
			trans->status = 0;
    562e:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    5630:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    5634:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5638:	3310      	adds	r3, #16
    563a:	d00d      	beq.n	5658 <usb_transfer_work+0x58>
    563c:	f854 6c20 	ldr.w	r6, [r4, #-32]
    5640:	b156      	cbz	r6, 5658 <usb_transfer_work+0x58>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    5642:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
    5646:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
    564a:	f01e ff15 	bl	24478 <k_is_in_isr>
    564e:	2800      	cmp	r0, #0
    5650:	d058      	beq.n	5704 <usb_transfer_work+0x104>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    5652:	4620      	mov	r0, r4
    5654:	f7ff ffbc 	bl	55d0 <k_work_submit_to_queue.constprop.0>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    5658:	b002      	add	sp, #8
    565a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    565e:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    5662:	ab01      	add	r3, sp, #4
    5664:	4628      	mov	r0, r5
    5666:	f7ff fcb3 	bl	4fd0 <usb_write>
		if (ret) {
    566a:	4601      	mov	r1, r0
    566c:	b168      	cbz	r0, 568a <usb_transfer_work+0x8a>
    566e:	4a2d      	ldr	r2, [pc, #180]	; (5724 <usb_transfer_work+0x124>)
    5670:	4b2d      	ldr	r3, [pc, #180]	; (5728 <usb_transfer_work+0x128>)
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    5672:	482e      	ldr	r0, [pc, #184]	; (572c <usb_transfer_work+0x12c>)
    5674:	1a9b      	subs	r3, r3, r2
    5676:	08db      	lsrs	r3, r3, #3
    5678:	019b      	lsls	r3, r3, #6
    567a:	f043 0301 	orr.w	r3, r3, #1
    567e:	462a      	mov	r2, r5
    5680:	f01a f9d7 	bl	1fa32 <log_2>
			trans->status = -EINVAL;
    5684:	f06f 0315 	mvn.w	r3, #21
    5688:	e7d2      	b.n	5630 <usb_transfer_work+0x30>
		trans->buffer += bytes;
    568a:	9a01      	ldr	r2, [sp, #4]
    568c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    5690:	4413      	add	r3, r2
    5692:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    5696:	f854 3c28 	ldr.w	r3, [r4, #-40]
    569a:	1a9b      	subs	r3, r3, r2
    569c:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    56a0:	f854 3c24 	ldr.w	r3, [r4, #-36]
    56a4:	4413      	add	r3, r2
    56a6:	f844 3c24 	str.w	r3, [r4, #-36]
    56aa:	e7c3      	b.n	5634 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    56ac:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    56b0:	ab01      	add	r3, sp, #4
    56b2:	4628      	mov	r0, r5
    56b4:	f001 fbfc 	bl	6eb0 <usb_dc_ep_read_wait>
		if (ret) {
    56b8:	4601      	mov	r1, r0
    56ba:	2800      	cmp	r0, #0
    56bc:	d1d7      	bne.n	566e <usb_transfer_work+0x6e>
		trans->buffer += bytes;
    56be:	9e01      	ldr	r6, [sp, #4]
    56c0:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    56c4:	4433      	add	r3, r6
    56c6:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    56ca:	f854 3c28 	ldr.w	r3, [r4, #-40]
    56ce:	1b9b      	subs	r3, r3, r6
    56d0:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    56d4:	f854 3c24 	ldr.w	r3, [r4, #-36]
    56d8:	4433      	add	r3, r6
    56da:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    56de:	2e00      	cmp	r6, #0
    56e0:	d0a5      	beq.n	562e <usb_transfer_work+0x2e>
    56e2:	4628      	mov	r0, r5
    56e4:	f001 fcb2 	bl	704c <usb_dc_ep_mps>
    56e8:	fbb6 f3f0 	udiv	r3, r6, r0
    56ec:	fb03 6010 	mls	r0, r3, r0, r6
    56f0:	2800      	cmp	r0, #0
    56f2:	d19c      	bne.n	562e <usb_transfer_work+0x2e>
    56f4:	f854 3c28 	ldr.w	r3, [r4, #-40]
    56f8:	2b00      	cmp	r3, #0
    56fa:	d098      	beq.n	562e <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
    56fc:	4628      	mov	r0, r5
    56fe:	f001 fc35 	bl	6f6c <usb_dc_ep_read_continue>
    5702:	e797      	b.n	5634 <usb_transfer_work+0x34>
		trans->cb = NULL;
    5704:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
    5708:	f1a4 0018 	sub.w	r0, r4, #24
    570c:	f018 ffbc 	bl	1e688 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    5710:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5714:	3348      	adds	r3, #72	; 0x48
    5716:	d09f      	beq.n	5658 <usb_transfer_work+0x58>
			cb(ep, tsize, priv);
    5718:	4642      	mov	r2, r8
    571a:	4639      	mov	r1, r7
    571c:	4628      	mov	r0, r5
    571e:	47b0      	blx	r6
    5720:	e79a      	b.n	5658 <usb_transfer_work+0x58>
    5722:	bf00      	nop
    5724:	00024c24 	.word	0x00024c24
    5728:	00024d84 	.word	0x00024d84
    572c:	00026ae6 	.word	0x00026ae6

00005730 <usb_transfer_is_busy>:
		if (ut_data[i].ep == ep) {
    5730:	4a0a      	ldr	r2, [pc, #40]	; (575c <usb_transfer_is_busy+0x2c>)
{
    5732:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    5734:	2300      	movs	r3, #0
		if (ut_data[i].ep == ep) {
    5736:	2444      	movs	r4, #68	; 0x44
    5738:	fb04 f103 	mul.w	r1, r4, r3
    573c:	5c8d      	ldrb	r5, [r1, r2]
    573e:	4285      	cmp	r5, r0
    5740:	d107      	bne.n	5752 <usb_transfer_is_busy+0x22>
	if (trans && trans->status == -EBUSY) {
    5742:	440a      	add	r2, r1
    5744:	6850      	ldr	r0, [r2, #4]
    5746:	f110 0f10 	cmn.w	r0, #16
    574a:	bf14      	ite	ne
    574c:	2000      	movne	r0, #0
    574e:	2001      	moveq	r0, #1
}
    5750:	bd30      	pop	{r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    5752:	3301      	adds	r3, #1
    5754:	2b04      	cmp	r3, #4
    5756:	d1ef      	bne.n	5738 <usb_transfer_is_busy+0x8>
	return false;
    5758:	2000      	movs	r0, #0
    575a:	e7f9      	b.n	5750 <usb_transfer_is_busy+0x20>
    575c:	20001704 	.word	0x20001704

00005760 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    5760:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if (ut_data[i].ep == ep) {
    5762:	4c1d      	ldr	r4, [pc, #116]	; (57d8 <usb_transfer_ep_callback+0x78>)
{
    5764:	4606      	mov	r6, r0
    5766:	460d      	mov	r5, r1
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    5768:	2300      	movs	r3, #0
    576a:	2244      	movs	r2, #68	; 0x44
		if (ut_data[i].ep == ep) {
    576c:	fb02 f003 	mul.w	r0, r2, r3
    5770:	5d01      	ldrb	r1, [r0, r4]
    5772:	42b1      	cmp	r1, r6
    5774:	d11c      	bne.n	57b0 <usb_transfer_ep_callback+0x50>
			return &ut_data[i];
    5776:	4404      	add	r4, r0
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    5778:	1e6b      	subs	r3, r5, #1
    577a:	2b01      	cmp	r3, #1
    577c:	d816      	bhi.n	57ac <usb_transfer_ep_callback+0x4c>
		return;
	}

	if (!trans) {
    577e:	b9e4      	cbnz	r4, 57ba <usb_transfer_ep_callback+0x5a>
		if (status == USB_DC_EP_DATA_OUT) {
    5780:	2d01      	cmp	r5, #1
    5782:	d113      	bne.n	57ac <usb_transfer_ep_callback+0x4c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    5784:	ab01      	add	r3, sp, #4
    5786:	2201      	movs	r2, #1
    5788:	f10d 0103 	add.w	r1, sp, #3
    578c:	4630      	mov	r0, r6
    578e:	f001 fb8f 	bl	6eb0 <usb_dc_ep_read_wait>
			} while (bytes);
    5792:	9b01      	ldr	r3, [sp, #4]
    5794:	2b00      	cmp	r3, #0
    5796:	d1f5      	bne.n	5784 <usb_transfer_ep_callback+0x24>
    5798:	4910      	ldr	r1, [pc, #64]	; (57dc <usb_transfer_ep_callback+0x7c>)
    579a:	4b11      	ldr	r3, [pc, #68]	; (57e0 <usb_transfer_ep_callback+0x80>)

			LOG_ERR("RX data lost, no transfer");
    579c:	4811      	ldr	r0, [pc, #68]	; (57e4 <usb_transfer_ep_callback+0x84>)
    579e:	1ac9      	subs	r1, r1, r3
    57a0:	08c9      	lsrs	r1, r1, #3
    57a2:	0189      	lsls	r1, r1, #6
    57a4:	f041 0101 	orr.w	r1, r1, #1
    57a8:	f01a f922 	bl	1f9f0 <log_0>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    57ac:	b002      	add	sp, #8
    57ae:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    57b0:	3301      	adds	r3, #1
    57b2:	2b04      	cmp	r3, #4
    57b4:	d1da      	bne.n	576c <usb_transfer_ep_callback+0xc>
	return NULL;
    57b6:	2400      	movs	r4, #0
    57b8:	e7de      	b.n	5778 <usb_transfer_ep_callback+0x18>
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    57ba:	f01e fe5d 	bl	24478 <k_is_in_isr>
    57be:	4603      	mov	r3, r0
    57c0:	f104 0034 	add.w	r0, r4, #52	; 0x34
    57c4:	b10b      	cbz	r3, 57ca <usb_transfer_ep_callback+0x6a>
    57c6:	2d01      	cmp	r5, #1
    57c8:	d102      	bne.n	57d0 <usb_transfer_ep_callback+0x70>
		usb_transfer_work(&trans->work);
    57ca:	f7ff ff19 	bl	5600 <usb_transfer_work>
    57ce:	e7ed      	b.n	57ac <usb_transfer_ep_callback+0x4c>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    57d0:	f7ff fefe 	bl	55d0 <k_work_submit_to_queue.constprop.0>
    57d4:	e7ea      	b.n	57ac <usb_transfer_ep_callback+0x4c>
    57d6:	bf00      	nop
    57d8:	20001704 	.word	0x20001704
    57dc:	00024d84 	.word	0x00024d84
    57e0:	00024c24 	.word	0x00024c24
    57e4:	00026b03 	.word	0x00026b03

000057e8 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    57e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57ec:	4605      	mov	r5, r0
    57ee:	4690      	mov	r8, r2
    57f0:	4699      	mov	r9, r3
	__asm__ volatile(
    57f2:	f04f 0320 	mov.w	r3, #32
    57f6:	f3ef 8211 	mrs	r2, BASEPRI
    57fa:	f383 8811 	msr	BASEPRI, r3
    57fe:	f3bf 8f6f 	isb	sy
    5802:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 58fc <usb_transfer+0x114>
    5806:	9200      	str	r2, [sp, #0]
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    5808:	2400      	movs	r4, #0
    580a:	2744      	movs	r7, #68	; 0x44
    580c:	9101      	str	r1, [sp, #4]
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    580e:	fb07 f604 	mul.w	r6, r7, r4
	return z_impl_k_sem_take(sem, timeout);
    5812:	2200      	movs	r2, #0
    5814:	2300      	movs	r3, #0
    5816:	4650      	mov	r0, sl
    5818:	f018 ff5c 	bl	1e6d4 <z_impl_k_sem_take>
    581c:	9901      	ldr	r1, [sp, #4]
    581e:	b9f0      	cbnz	r0, 585e <usb_transfer+0x76>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    5820:	4f31      	ldr	r7, [pc, #196]	; (58e8 <usb_transfer+0x100>)
    5822:	eb07 0b06 	add.w	fp, r7, r6
    5826:	f8db 4004 	ldr.w	r4, [fp, #4]
    582a:	f114 0f10 	cmn.w	r4, #16
    582e:	d128      	bne.n	5882 <usb_transfer+0x9a>
    5830:	4b2e      	ldr	r3, [pc, #184]	; (58ec <usb_transfer+0x104>)
    5832:	4a2f      	ldr	r2, [pc, #188]	; (58f0 <usb_transfer+0x108>)
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    5834:	482f      	ldr	r0, [pc, #188]	; (58f4 <usb_transfer+0x10c>)
    5836:	1ad2      	subs	r2, r2, r3
    5838:	08d2      	lsrs	r2, r2, #3
    583a:	0192      	lsls	r2, r2, #6
    583c:	f042 0201 	orr.w	r2, r2, #1
    5840:	4629      	mov	r1, r5
    5842:	f01a f8e2 	bl	1fa0a <log_1>
	z_impl_k_sem_give(sem);
    5846:	4650      	mov	r0, sl
    5848:	f018 ff1e 	bl	1e688 <z_impl_k_sem_give>
	__asm__ volatile(
    584c:	9b00      	ldr	r3, [sp, #0]
    584e:	f383 8811 	msr	BASEPRI, r3
    5852:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    5856:	4620      	mov	r0, r4
    5858:	b003      	add	sp, #12
    585a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    585e:	3401      	adds	r4, #1
    5860:	2c04      	cmp	r4, #4
    5862:	f10a 0a44 	add.w	sl, sl, #68	; 0x44
    5866:	d1d1      	bne.n	580c <usb_transfer+0x24>
    5868:	4b20      	ldr	r3, [pc, #128]	; (58ec <usb_transfer+0x104>)
    586a:	4921      	ldr	r1, [pc, #132]	; (58f0 <usb_transfer+0x108>)
		LOG_ERR("No transfer slot available");
    586c:	4822      	ldr	r0, [pc, #136]	; (58f8 <usb_transfer+0x110>)
    586e:	1ac9      	subs	r1, r1, r3
    5870:	08c9      	lsrs	r1, r1, #3
    5872:	0189      	lsls	r1, r1, #6
    5874:	f041 0101 	orr.w	r1, r1, #1
    5878:	f01a f8ba 	bl	1f9f0 <log_0>
		ret = -ENOMEM;
    587c:	f06f 040b 	mvn.w	r4, #11
		goto done;
    5880:	e7e4      	b.n	584c <usb_transfer+0x64>
	trans->cb = cb;
    5882:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5884:	f8cb 2014 	str.w	r2, [fp, #20]
	trans->priv = cb_data;
    5888:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    588a:	f8cb 2018 	str.w	r2, [fp, #24]
	trans->status = -EBUSY;
    588e:	f06f 020f 	mvn.w	r2, #15
	trans->tsize = 0;
    5892:	f8cb 0010 	str.w	r0, [fp, #16]
	trans->bsize = dlen;
    5896:	e9cb 1802 	strd	r1, r8, [fp, #8]
	trans->ep = ep;
    589a:	55bd      	strb	r5, [r7, r6]
	trans->flags = flags;
    589c:	f8cb 9040 	str.w	r9, [fp, #64]	; 0x40
	trans->status = -EBUSY;
    58a0:	f8cb 2004 	str.w	r2, [fp, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    58a4:	4628      	mov	r0, r5
    58a6:	f001 fbd1 	bl	704c <usb_dc_ep_mps>
    58aa:	b168      	cbz	r0, 58c8 <usb_transfer+0xe0>
    58ac:	4628      	mov	r0, r5
    58ae:	f001 fbcd 	bl	704c <usb_dc_ep_mps>
    58b2:	fbb8 f2f0 	udiv	r2, r8, r0
    58b6:	fb02 8010 	mls	r0, r2, r0, r8
    58ba:	b128      	cbz	r0, 58c8 <usb_transfer+0xe0>
		trans->flags |= USB_TRANS_NO_ZLP;
    58bc:	f8db 2040 	ldr.w	r2, [fp, #64]	; 0x40
    58c0:	f042 0204 	orr.w	r2, r2, #4
    58c4:	f8cb 2040 	str.w	r2, [fp, #64]	; 0x40
	if (flags & USB_TRANS_WRITE) {
    58c8:	f019 0f02 	tst.w	r9, #2
    58cc:	d006      	beq.n	58dc <usb_transfer+0xf4>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    58ce:	f106 0034 	add.w	r0, r6, #52	; 0x34
    58d2:	4438      	add	r0, r7
    58d4:	f7ff fe7c 	bl	55d0 <k_work_submit_to_queue.constprop.0>
	int i, key, ret = 0;
    58d8:	2400      	movs	r4, #0
    58da:	e7b7      	b.n	584c <usb_transfer+0x64>
		ret = usb_dc_ep_read_continue(ep);
    58dc:	4628      	mov	r0, r5
    58de:	f001 fb45 	bl	6f6c <usb_dc_ep_read_continue>
    58e2:	4604      	mov	r4, r0
    58e4:	e7b2      	b.n	584c <usb_transfer+0x64>
    58e6:	bf00      	nop
    58e8:	20001704 	.word	0x20001704
    58ec:	00024c24 	.word	0x00024c24
    58f0:	00024d84 	.word	0x00024d84
    58f4:	00026b1d 	.word	0x00026b1d
    58f8:	00026b46 	.word	0x00026b46
    58fc:	20001720 	.word	0x20001720

00005900 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    5900:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    5902:	f04f 0320 	mov.w	r3, #32
    5906:	f3ef 8411 	mrs	r4, BASEPRI
    590a:	f383 8811 	msr	BASEPRI, r3
    590e:	f3bf 8f6f 	isb	sy
		if (ut_data[i].ep == ep) {
    5912:	490e      	ldr	r1, [pc, #56]	; (594c <usb_cancel_transfer+0x4c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    5914:	2200      	movs	r2, #0
    5916:	2544      	movs	r5, #68	; 0x44
		if (ut_data[i].ep == ep) {
    5918:	fb05 f302 	mul.w	r3, r5, r2
    591c:	5c5e      	ldrb	r6, [r3, r1]
    591e:	4286      	cmp	r6, r0
    5920:	d10b      	bne.n	593a <usb_cancel_transfer+0x3a>
	trans = usb_ep_get_transfer(ep);
	if (!trans) {
		goto done;
	}

	if (trans->status != -EBUSY) {
    5922:	18ca      	adds	r2, r1, r3
    5924:	6850      	ldr	r0, [r2, #4]
    5926:	3010      	adds	r0, #16
    5928:	d10a      	bne.n	5940 <usb_cancel_transfer+0x40>
		goto done;
	}

	trans->status = -ECANCELED;
    592a:	f06f 0047 	mvn.w	r0, #71	; 0x47
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    592e:	3334      	adds	r3, #52	; 0x34
	trans->status = -ECANCELED;
    5930:	6050      	str	r0, [r2, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    5932:	18c8      	adds	r0, r1, r3
    5934:	f7ff fe4c 	bl	55d0 <k_work_submit_to_queue.constprop.0>
    5938:	e002      	b.n	5940 <usb_cancel_transfer+0x40>
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    593a:	3201      	adds	r2, #1
    593c:	2a04      	cmp	r2, #4
    593e:	d1eb      	bne.n	5918 <usb_cancel_transfer+0x18>
	__asm__ volatile(
    5940:	f384 8811 	msr	BASEPRI, r4
    5944:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    5948:	bd70      	pop	{r4, r5, r6, pc}
    594a:	bf00      	nop
    594c:	20001704 	.word	0x20001704

00005950 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    5950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5952:	4c0f      	ldr	r4, [pc, #60]	; (5990 <usb_cancel_transfers+0x40>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    5954:	2500      	movs	r5, #0
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
    5956:	f06f 0747 	mvn.w	r7, #71	; 0x47
	__asm__ volatile(
    595a:	f04f 0320 	mov.w	r3, #32
    595e:	f3ef 8611 	mrs	r6, BASEPRI
    5962:	f383 8811 	msr	BASEPRI, r3
    5966:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    596a:	6863      	ldr	r3, [r4, #4]
    596c:	3310      	adds	r3, #16
    596e:	d104      	bne.n	597a <usb_cancel_transfers+0x2a>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    5970:	f104 0034 	add.w	r0, r4, #52	; 0x34
			trans->status = -ECANCELED;
    5974:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    5976:	f7ff fe2b 	bl	55d0 <k_work_submit_to_queue.constprop.0>
	__asm__ volatile(
    597a:	f386 8811 	msr	BASEPRI, r6
    597e:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    5982:	3501      	adds	r5, #1
    5984:	2d04      	cmp	r5, #4
    5986:	f104 0444 	add.w	r4, r4, #68	; 0x44
    598a:	d1e6      	bne.n	595a <usb_cancel_transfers+0xa>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    598c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    598e:	bf00      	nop
    5990:	20001704 	.word	0x20001704

00005994 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    5994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    5996:	2500      	movs	r5, #0
    5998:	4c09      	ldr	r4, [pc, #36]	; (59c0 <usb_transfer_init+0x2c>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    599a:	4f0a      	ldr	r7, [pc, #40]	; (59c4 <usb_transfer_init+0x30>)
    599c:	462e      	mov	r6, r5
    599e:	e9c4 670d 	strd	r6, r7, [r4, #52]	; 0x34
    59a2:	63e6      	str	r6, [r4, #60]	; 0x3c
	return z_impl_k_sem_init(sem, initial_count, limit);
    59a4:	2201      	movs	r2, #1
    59a6:	f104 001c 	add.w	r0, r4, #28
    59aa:	4611      	mov	r1, r2
    59ac:	3501      	adds	r5, #1
    59ae:	f01e fd53 	bl	24458 <z_impl_k_sem_init>
    59b2:	2d04      	cmp	r5, #4
    59b4:	f104 0444 	add.w	r4, r4, #68	; 0x44
    59b8:	d1f1      	bne.n	599e <usb_transfer_init+0xa>
		k_work_init(&ut_data[i].work, usb_transfer_work);
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    59ba:	2000      	movs	r0, #0
    59bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    59be:	bf00      	nop
    59c0:	20001704 	.word	0x20001704
    59c4:	00005601 	.word	0x00005601

000059c8 <tx_work_handler>:

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}

static void tx_work_handler(struct k_work *work)
{
    59c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct cdc_acm_dev_data_t *dev_data =
		CONTAINER_OF(work, struct cdc_acm_dev_data_t, tx_work);
	const struct device *dev = dev_data->common.dev;
	struct usb_cfg_data *cfg = (void *)dev->config;
    59ca:	6e43      	ldr	r3, [r0, #100]	; 0x64
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    59cc:	685b      	ldr	r3, [r3, #4]
    59ce:	6a1b      	ldr	r3, [r3, #32]
    59d0:	7d1e      	ldrb	r6, [r3, #20]
{
    59d2:	4605      	mov	r5, r0
	uint8_t *data;
	size_t len;

	if (usb_transfer_is_busy(ep)) {
    59d4:	4630      	mov	r0, r6
    59d6:	f7ff feab 	bl	5730 <usb_transfer_is_busy>
    59da:	b9d0      	cbnz	r0, 5a12 <tx_work_handler+0x4a>
		LOG_DBG("Transfer is ongoing");
		return;
	}

	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    59dc:	6d68      	ldr	r0, [r5, #84]	; 0x54
    59de:	f44f 6280 	mov.w	r2, #1024	; 0x400
    59e2:	a903      	add	r1, sp, #12
    59e4:	f019 ff56 	bl	1f894 <ring_buf_get_claim>
				 CONFIG_USB_CDC_ACM_RINGBUF_SIZE);

	if (!len) {
    59e8:	4604      	mov	r4, r0
    59ea:	b190      	cbz	r0, 5a12 <tx_work_handler+0x4a>
	 * Transfer less data to avoid zero-length packet. The application
	 * running on the host may conclude that there is no more data to be
	 * received (i.e. the transaction has completed), hence not triggering
	 * another I/O Request Packet (IRP).
	 */
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    59ec:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    59ee:	f1a5 032c 	sub.w	r3, r5, #44	; 0x2c
		len -= 1;
    59f2:	bf08      	it	eq
    59f4:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	}

	LOG_DBG("Got %zd bytes from ringbuffer send to ep %x", len, ep);

	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    59f8:	9301      	str	r3, [sp, #4]
    59fa:	4b07      	ldr	r3, [pc, #28]	; (5a18 <tx_work_handler+0x50>)
    59fc:	9903      	ldr	r1, [sp, #12]
    59fe:	9300      	str	r3, [sp, #0]
    5a00:	4622      	mov	r2, r4
    5a02:	2302      	movs	r3, #2
    5a04:	4630      	mov	r0, r6
    5a06:	f7ff feef 	bl	57e8 <usb_transfer>
		     cdc_acm_write_cb, dev_data);

	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    5a0a:	6d68      	ldr	r0, [r5, #84]	; 0x54
    5a0c:	4621      	mov	r1, r4
    5a0e:	f019 ff5d 	bl	1f8cc <ring_buf_get_finish>
}
    5a12:	b004      	add	sp, #16
    5a14:	bd70      	pop	{r4, r5, r6, pc}
    5a16:	bf00      	nop
    5a18:	000201e9 	.word	0x000201e9

00005a1c <cdc_acm_class_handle_req>:
{
    5a1c:	b570      	push	{r4, r5, r6, lr}
    5a1e:	4604      	mov	r4, r0
    5a20:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    5a22:	7901      	ldrb	r1, [r0, #4]
    5a24:	4816      	ldr	r0, [pc, #88]	; (5a80 <cdc_acm_class_handle_req+0x64>)
{
    5a26:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    5a28:	f01a faf3 	bl	20012 <usb_get_dev_data_by_iface>
	if (common == NULL) {
    5a2c:	b968      	cbnz	r0, 5a4a <cdc_acm_class_handle_req+0x2e>
    5a2e:	4b15      	ldr	r3, [pc, #84]	; (5a84 <cdc_acm_class_handle_req+0x68>)
    5a30:	4a15      	ldr	r2, [pc, #84]	; (5a88 <cdc_acm_class_handle_req+0x6c>)
		LOG_WRN("Device data not found for interface %u",
    5a32:	4816      	ldr	r0, [pc, #88]	; (5a8c <cdc_acm_class_handle_req+0x70>)
    5a34:	88a1      	ldrh	r1, [r4, #4]
    5a36:	1ad2      	subs	r2, r2, r3
    5a38:	08d2      	lsrs	r2, r2, #3
    5a3a:	0192      	lsls	r2, r2, #6
    5a3c:	f042 0202 	orr.w	r2, r2, #2
    5a40:	f019 ffe3 	bl	1fa0a <log_1>
		return -ENODEV;
    5a44:	f06f 0012 	mvn.w	r0, #18
}
    5a48:	bd70      	pop	{r4, r5, r6, pc}
	switch (pSetup->bRequest) {
    5a4a:	7863      	ldrb	r3, [r4, #1]
    5a4c:	2b21      	cmp	r3, #33	; 0x21
    5a4e:	d00e      	beq.n	5a6e <cdc_acm_class_handle_req+0x52>
    5a50:	2b22      	cmp	r3, #34	; 0x22
    5a52:	d008      	beq.n	5a66 <cdc_acm_class_handle_req+0x4a>
    5a54:	2b20      	cmp	r3, #32
    5a56:	d10f      	bne.n	5a78 <cdc_acm_class_handle_req+0x5c>
		memcpy(&dev_data->line_coding,
    5a58:	6829      	ldr	r1, [r5, #0]
    5a5a:	2207      	movs	r2, #7
    5a5c:	380c      	subs	r0, #12
    5a5e:	f01b fe22 	bl	216a6 <memcpy>
	return 0;
    5a62:	2000      	movs	r0, #0
    5a64:	e7f0      	b.n	5a48 <cdc_acm_class_handle_req+0x2c>
		dev_data->line_state = (uint8_t)pSetup->wValue;
    5a66:	8863      	ldrh	r3, [r4, #2]
    5a68:	f800 3c05 	strb.w	r3, [r0, #-5]
		LOG_DBG("CDC_SET_CONTROL_LINE_STATE 0x%x",
    5a6c:	e7f9      	b.n	5a62 <cdc_acm_class_handle_req+0x46>
		*data = (uint8_t *)(&dev_data->line_coding);
    5a6e:	380c      	subs	r0, #12
		*len = sizeof(dev_data->line_coding);
    5a70:	2307      	movs	r3, #7
		*data = (uint8_t *)(&dev_data->line_coding);
    5a72:	6028      	str	r0, [r5, #0]
		*len = sizeof(dev_data->line_coding);
    5a74:	6033      	str	r3, [r6, #0]
    5a76:	e7f4      	b.n	5a62 <cdc_acm_class_handle_req+0x46>
	switch (pSetup->bRequest) {
    5a78:	f06f 0015 	mvn.w	r0, #21
    5a7c:	e7e4      	b.n	5a48 <cdc_acm_class_handle_req+0x2c>
    5a7e:	bf00      	nop
    5a80:	20001814 	.word	0x20001814
    5a84:	00024c24 	.word	0x00024c24
    5a88:	00024d64 	.word	0x00024d64
    5a8c:	00026b6e 	.word	0x00026b6e

00005a90 <cdc_acm_int_in>:
 * @param ep_status Endpoint status code.
 *
 * @return  N/A.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    5a90:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    5a92:	4601      	mov	r1, r0
{
    5a94:	4604      	mov	r4, r0
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    5a96:	480a      	ldr	r0, [pc, #40]	; (5ac0 <cdc_acm_int_in+0x30>)
    5a98:	f01a facc 	bl	20034 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    5a9c:	b960      	cbnz	r0, 5ab8 <cdc_acm_int_in+0x28>
    5a9e:	4a09      	ldr	r2, [pc, #36]	; (5ac4 <cdc_acm_int_in+0x34>)
    5aa0:	4b09      	ldr	r3, [pc, #36]	; (5ac8 <cdc_acm_int_in+0x38>)
		LOG_WRN("Device data not found for endpoint %u", ep);
    5aa2:	480a      	ldr	r0, [pc, #40]	; (5acc <cdc_acm_int_in+0x3c>)
    5aa4:	1ad2      	subs	r2, r2, r3
    5aa6:	08d2      	lsrs	r2, r2, #3
    5aa8:	0192      	lsls	r2, r2, #6
    5aaa:	4621      	mov	r1, r4
    5aac:	f042 0202 	orr.w	r2, r2, #2

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    5ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_WRN("Device data not found for endpoint %u", ep);
    5ab4:	f019 bfa9 	b.w	1fa0a <log_1>
	dev_data->notification_sent = 1U;
    5ab8:	2301      	movs	r3, #1
    5aba:	f800 3c03 	strb.w	r3, [r0, #-3]
}
    5abe:	bd10      	pop	{r4, pc}
    5ac0:	20001814 	.word	0x20001814
    5ac4:	00024d64 	.word	0x00024d64
    5ac8:	00024c24 	.word	0x00024c24
    5acc:	00026b95 	.word	0x00026b95

00005ad0 <cdc_acm_send_notification>:
 *
 * @return  N/A.
 */
static int cdc_acm_send_notification(const struct device *dev,
				     uint16_t serial_state)
{
    5ad0:	b530      	push	{r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
	struct usb_cfg_data * const cfg = (void *)dev->config;
    5ad2:	6842      	ldr	r2, [r0, #4]
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    5ad4:	68c5      	ldr	r5, [r0, #12]

	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
		  (const uint8_t *)&notification, sizeof(notification), NULL);

	/* Wait for notification to be sent */
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    5ad6:	4c10      	ldr	r4, [pc, #64]	; (5b18 <cdc_acm_send_notification+0x48>)
{
    5ad8:	b085      	sub	sp, #20
	notification.wIndex = 0U;
    5ada:	f242 00a1 	movw	r0, #8353	; 0x20a1
    5ade:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    5ae2:	e9cd 0301 	strd	r0, r3, [sp, #4]
	dev_data->notification_sent = 0U;
    5ae6:	2300      	movs	r3, #0
    5ae8:	f885 308d 	strb.w	r3, [r5, #141]	; 0x8d
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    5aec:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    5aee:	f8ad 100c 	strh.w	r1, [sp, #12]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    5af2:	7900      	ldrb	r0, [r0, #4]
    5af4:	220a      	movs	r2, #10
    5af6:	a901      	add	r1, sp, #4
    5af8:	f7ff fa6a 	bl	4fd0 <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    5afc:	f895 308d 	ldrb.w	r3, [r5, #141]	; 0x8d
    5b00:	b113      	cbz	r3, 5b08 <cdc_acm_send_notification+0x38>
			LOG_DBG("CDC ACM notification timeout!");
			return -EIO;
		}
	}

	return 0;
    5b02:	2000      	movs	r0, #0
}
    5b04:	b005      	add	sp, #20
    5b06:	bd30      	pop	{r4, r5, pc}
	z_impl_k_busy_wait(usec_to_wait);
    5b08:	2001      	movs	r0, #1
    5b0a:	f01e fcbb 	bl	24484 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    5b0e:	3c01      	subs	r4, #1
    5b10:	d1f4      	bne.n	5afc <cdc_acm_send_notification+0x2c>
			return -EIO;
    5b12:	f06f 0004 	mvn.w	r0, #4
    5b16:	e7f5      	b.n	5b04 <cdc_acm_send_notification+0x34>
    5b18:	000186a1 	.word	0x000186a1

00005b1c <cdc_acm_init>:
{
    5b1c:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    5b1e:	68c4      	ldr	r4, [r0, #12]
	parent->next = child;
    5b20:	2300      	movs	r3, #0
    5b22:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
Z_GENLIST_APPEND(slist, snode)
    5b26:	4b0e      	ldr	r3, [pc, #56]	; (5b60 <cdc_acm_init+0x44>)
	dev_data->common.dev = dev;
    5b28:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    5b2c:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    5b2e:	f104 0294 	add.w	r2, r4, #148	; 0x94
    5b32:	b991      	cbnz	r1, 5b5a <cdc_acm_init+0x3e>
	list->head = node;
    5b34:	e9c3 2200 	strd	r2, r2, [r3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    5b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5b3c:	2100      	movs	r1, #0
    5b3e:	f104 0008 	add.w	r0, r4, #8
    5b42:	f01e fc89 	bl	24458 <z_impl_k_sem_init>
    5b46:	4b07      	ldr	r3, [pc, #28]	; (5b64 <cdc_acm_init+0x48>)
    5b48:	2000      	movs	r0, #0
    5b4a:	e9c4 3009 	strd	r3, r0, [r4, #36]	; 0x24
    5b4e:	4b06      	ldr	r3, [pc, #24]	; (5b68 <cdc_acm_init+0x4c>)
    5b50:	6220      	str	r0, [r4, #32]
    5b52:	e9c4 300c 	strd	r3, r0, [r4, #48]	; 0x30
    5b56:	62e0      	str	r0, [r4, #44]	; 0x2c
}
    5b58:	bd10      	pop	{r4, pc}
	parent->next = child;
    5b5a:	600a      	str	r2, [r1, #0]
	list->tail = node;
    5b5c:	605a      	str	r2, [r3, #4]
}
    5b5e:	e7eb      	b.n	5b38 <cdc_acm_init+0x1c>
    5b60:	20001814 	.word	0x20001814
    5b64:	00020079 	.word	0x00020079
    5b68:	000059c9 	.word	0x000059c9

00005b6c <k_work_submit_to_queue.constprop.0>:
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
    5b6c:	4601      	mov	r1, r0
    5b6e:	f100 0308 	add.w	r3, r0, #8
    5b72:	f3bf 8f5b 	dmb	ish
    5b76:	e853 2f00 	ldrex	r2, [r3]
    5b7a:	f042 0001 	orr.w	r0, r2, #1
    5b7e:	e843 0c00 	strex	ip, r0, [r3]
    5b82:	f1bc 0f00 	cmp.w	ip, #0
    5b86:	d1f6      	bne.n	5b76 <k_work_submit_to_queue.constprop.0+0xa>
    5b88:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5b8c:	07d3      	lsls	r3, r2, #31
    5b8e:	d402      	bmi.n	5b96 <k_work_submit_to_queue.constprop.0+0x2a>
		k_queue_append(&work_q->queue, work);
    5b90:	4801      	ldr	r0, [pc, #4]	; (5b98 <k_work_submit_to_queue.constprop.0+0x2c>)
    5b92:	f01e bb15 	b.w	241c0 <k_queue_append>
}
    5b96:	4770      	bx	lr
    5b98:	20000c40 	.word	0x20000c40

00005b9c <cdc_acm_fifo_fill>:
{
    5b9c:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    5b9e:	68c6      	ldr	r6, [r0, #12]
	if (!dev_data->configured || dev_data->suspended) {
    5ba0:	f896 308e 	ldrb.w	r3, [r6, #142]	; 0x8e
{
    5ba4:	4615      	mov	r5, r2
	if (!dev_data->configured || dev_data->suspended) {
    5ba6:	b113      	cbz	r3, 5bae <cdc_acm_fifo_fill+0x12>
    5ba8:	f896 308f 	ldrb.w	r3, [r6, #143]	; 0x8f
    5bac:	b163      	cbz	r3, 5bc8 <cdc_acm_fifo_fill+0x2c>
    5bae:	4a13      	ldr	r2, [pc, #76]	; (5bfc <cdc_acm_fifo_fill+0x60>)
    5bb0:	4b13      	ldr	r3, [pc, #76]	; (5c00 <cdc_acm_fifo_fill+0x64>)
		LOG_WRN("Device not configured or suspended, drop %d bytes",
    5bb2:	4814      	ldr	r0, [pc, #80]	; (5c04 <cdc_acm_fifo_fill+0x68>)
    5bb4:	1a9b      	subs	r3, r3, r2
    5bb6:	08db      	lsrs	r3, r3, #3
    5bb8:	019b      	lsls	r3, r3, #6
    5bba:	f043 0202 	orr.w	r2, r3, #2
    5bbe:	4629      	mov	r1, r5
    5bc0:	f019 ff23 	bl	1fa0a <log_1>
		return 0;
    5bc4:	2000      	movs	r0, #0
}
    5bc6:	bd70      	pop	{r4, r5, r6, pc}
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    5bc8:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
	dev_data->tx_ready = false;
    5bcc:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    5bd0:	f019 fe41 	bl	1f856 <ring_buf_put>
	if (wrote < len) {
    5bd4:	42a8      	cmp	r0, r5
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    5bd6:	4604      	mov	r4, r0
	if (wrote < len) {
    5bd8:	d20a      	bcs.n	5bf0 <cdc_acm_fifo_fill+0x54>
    5bda:	4a08      	ldr	r2, [pc, #32]	; (5bfc <cdc_acm_fifo_fill+0x60>)
    5bdc:	4b08      	ldr	r3, [pc, #32]	; (5c00 <cdc_acm_fifo_fill+0x64>)
    5bde:	1a9b      	subs	r3, r3, r2
    5be0:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
    5be2:	019b      	lsls	r3, r3, #6
    5be4:	1a29      	subs	r1, r5, r0
    5be6:	f043 0202 	orr.w	r2, r3, #2
    5bea:	4807      	ldr	r0, [pc, #28]	; (5c08 <cdc_acm_fifo_fill+0x6c>)
    5bec:	f019 ff0d 	bl	1fa0a <log_1>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    5bf0:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    5bf4:	f7ff ffba 	bl	5b6c <k_work_submit_to_queue.constprop.0>
	return wrote;
    5bf8:	4620      	mov	r0, r4
    5bfa:	e7e4      	b.n	5bc6 <cdc_acm_fifo_fill+0x2a>
    5bfc:	00024c24 	.word	0x00024c24
    5c00:	00024d64 	.word	0x00024d64
    5c04:	00026bbb 	.word	0x00026bbb
    5c08:	00026bed 	.word	0x00026bed

00005c0c <cdc_acm_read_cb>:
{
    5c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (size <= 0) {
    5c0e:	1e0d      	subs	r5, r1, #0
{
    5c10:	4606      	mov	r6, r0
    5c12:	4614      	mov	r4, r2
    5c14:	f102 073c 	add.w	r7, r2, #60	; 0x3c
	if (size <= 0) {
    5c18:	dd11      	ble.n	5c3e <cdc_acm_read_cb+0x32>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    5c1a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    5c1c:	462a      	mov	r2, r5
    5c1e:	4639      	mov	r1, r7
    5c20:	f019 fe19 	bl	1f856 <ring_buf_put>
	if (wrote < size) {
    5c24:	4285      	cmp	r5, r0
    5c26:	d90a      	bls.n	5c3e <cdc_acm_read_cb+0x32>
    5c28:	4a10      	ldr	r2, [pc, #64]	; (5c6c <cdc_acm_read_cb+0x60>)
    5c2a:	4b11      	ldr	r3, [pc, #68]	; (5c70 <cdc_acm_read_cb+0x64>)
    5c2c:	1ad2      	subs	r2, r2, r3
    5c2e:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
    5c30:	0192      	lsls	r2, r2, #6
    5c32:	1a29      	subs	r1, r5, r0
    5c34:	f042 0201 	orr.w	r2, r2, #1
    5c38:	480e      	ldr	r0, [pc, #56]	; (5c74 <cdc_acm_read_cb+0x68>)
    5c3a:	f019 fee6 	bl	1fa0a <log_1>
	dev_data->rx_ready = true;
    5c3e:	2301      	movs	r3, #1
    5c40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	if (dev_data->cb && dev_data->rx_irq_ena) {
    5c44:	6823      	ldr	r3, [r4, #0]
    5c46:	b133      	cbz	r3, 5c56 <cdc_acm_read_cb+0x4a>
    5c48:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
    5c4c:	b11b      	cbz	r3, 5c56 <cdc_acm_read_cb+0x4a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    5c4e:	f104 0020 	add.w	r0, r4, #32
    5c52:	f7ff ff8b 	bl	5b6c <k_work_submit_to_queue.constprop.0>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    5c56:	4b08      	ldr	r3, [pc, #32]	; (5c78 <cdc_acm_read_cb+0x6c>)
    5c58:	9300      	str	r3, [sp, #0]
    5c5a:	9401      	str	r4, [sp, #4]
    5c5c:	2301      	movs	r3, #1
    5c5e:	2240      	movs	r2, #64	; 0x40
    5c60:	4639      	mov	r1, r7
    5c62:	4630      	mov	r0, r6
    5c64:	f7ff fdc0 	bl	57e8 <usb_transfer>
}
    5c68:	b003      	add	sp, #12
    5c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c6c:	00024d64 	.word	0x00024d64
    5c70:	00024c24 	.word	0x00024c24
    5c74:	00026bed 	.word	0x00026bed
    5c78:	00005c0d 	.word	0x00005c0d

00005c7c <cdc_acm_reset_port>:
{
    5c7c:	b510      	push	{r4, lr}
    5c7e:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    5c80:	3008      	adds	r0, #8
    5c82:	f018 fd01 	bl	1e688 <z_impl_k_sem_give>
	dev_data->line_coding = (struct cdc_acm_line_coding)
    5c86:	4b0c      	ldr	r3, [pc, #48]	; (5cb8 <cdc_acm_reset_port+0x3c>)
	dev_data->configured = false;
    5c88:	2100      	movs	r1, #0
	dev_data->line_coding = (struct cdc_acm_line_coding)
    5c8a:	6818      	ldr	r0, [r3, #0]
    5c8c:	889a      	ldrh	r2, [r3, #4]
    5c8e:	799b      	ldrb	r3, [r3, #6]
    5c90:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    5c94:	f8a4 2088 	strh.w	r2, [r4, #136]	; 0x88
	dev_data->configured = false;
    5c98:	f8a4 108e 	strh.w	r1, [r4, #142]	; 0x8e
	dev_data->tx_ready = false;
    5c9c:	8721      	strh	r1, [r4, #56]	; 0x38
	dev_data->line_coding = (struct cdc_acm_line_coding)
    5c9e:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
	dev_data->serial_state = 0;
    5ca2:	f884 108c 	strb.w	r1, [r4, #140]	; 0x8c
	dev_data->line_state = 0;
    5ca6:	f884 108b 	strb.w	r1, [r4, #139]	; 0x8b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    5caa:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    5cae:	2240      	movs	r2, #64	; 0x40
}
    5cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    5cb4:	f01b bd22 	b.w	216fc <memset>
    5cb8:	00024e58 	.word	0x00024e58

00005cbc <cdc_acm_dev_status_cb>:
{
    5cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cbe:	4606      	mov	r6, r0
    5cc0:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    5cc2:	4601      	mov	r1, r0
    5cc4:	4839      	ldr	r0, [pc, #228]	; (5dac <cdc_acm_dev_status_cb+0xf0>)
    5cc6:	f01a f995 	bl	1fff4 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    5cca:	4604      	mov	r4, r0
    5ccc:	b960      	cbnz	r0, 5ce8 <cdc_acm_dev_status_cb+0x2c>
    5cce:	4b38      	ldr	r3, [pc, #224]	; (5db0 <cdc_acm_dev_status_cb+0xf4>)
    5cd0:	4a38      	ldr	r2, [pc, #224]	; (5db4 <cdc_acm_dev_status_cb+0xf8>)
		LOG_WRN("Device data not found for cfg %p", cfg);
    5cd2:	4839      	ldr	r0, [pc, #228]	; (5db8 <cdc_acm_dev_status_cb+0xfc>)
    5cd4:	1ad2      	subs	r2, r2, r3
    5cd6:	08d2      	lsrs	r2, r2, #3
    5cd8:	0192      	lsls	r2, r2, #6
    5cda:	4631      	mov	r1, r6
    5cdc:	f042 0202 	orr.w	r2, r2, #2
}
    5ce0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_WRN("Device data not found for cfg %p", cfg);
    5ce4:	f019 be91 	b.w	1fa0a <log_1>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    5ce8:	4606      	mov	r6, r0
	struct usb_cfg_data *cfg = (void *)dev->config;
    5cea:	1e69      	subs	r1, r5, #1
    5cec:	f856 3990 	ldr.w	r3, [r6], #-144
    5cf0:	685f      	ldr	r7, [r3, #4]
	switch (status) {
    5cf2:	2905      	cmp	r1, #5
    5cf4:	d81b      	bhi.n	5d2e <cdc_acm_dev_status_cb+0x72>
    5cf6:	e8df f001 	tbb	[pc, r1]
    5cfa:	1a25      	.short	0x1a25
    5cfc:	382a1b03 	.word	0x382a1b03
    5d00:	4b2b      	ldr	r3, [pc, #172]	; (5db0 <cdc_acm_dev_status_cb+0xf4>)
    5d02:	492c      	ldr	r1, [pc, #176]	; (5db4 <cdc_acm_dev_status_cb+0xf8>)
		LOG_INF("Device configured");
    5d04:	482d      	ldr	r0, [pc, #180]	; (5dbc <cdc_acm_dev_status_cb+0x100>)
    5d06:	1ac9      	subs	r1, r1, r3
    5d08:	08c9      	lsrs	r1, r1, #3
    5d0a:	0189      	lsls	r1, r1, #6
    5d0c:	f041 0103 	orr.w	r1, r1, #3
    5d10:	f019 fe6e 	bl	1f9f0 <log_0>
		if (!dev_data->configured) {
    5d14:	f814 1c02 	ldrb.w	r1, [r4, #-2]
    5d18:	b921      	cbnz	r1, 5d24 <cdc_acm_dev_status_cb+0x68>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    5d1a:	6a3b      	ldr	r3, [r7, #32]
    5d1c:	4632      	mov	r2, r6
    5d1e:	7b18      	ldrb	r0, [r3, #12]
    5d20:	f7ff ff74 	bl	5c0c <cdc_acm_read_cb>
		dev_data->configured = true;
    5d24:	2301      	movs	r3, #1
    5d26:	f804 3c02 	strb.w	r3, [r4, #-2]
		dev_data->tx_ready = true;
    5d2a:	f804 3c58 	strb.w	r3, [r4, #-88]
}
    5d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d30:	4920      	ldr	r1, [pc, #128]	; (5db4 <cdc_acm_dev_status_cb+0xf8>)
    5d32:	4b1f      	ldr	r3, [pc, #124]	; (5db0 <cdc_acm_dev_status_cb+0xf4>)
		LOG_INF("Device disconnected");
    5d34:	4822      	ldr	r0, [pc, #136]	; (5dc0 <cdc_acm_dev_status_cb+0x104>)
    5d36:	1ac9      	subs	r1, r1, r3
    5d38:	08c9      	lsrs	r1, r1, #3
    5d3a:	0189      	lsls	r1, r1, #6
    5d3c:	f041 0103 	orr.w	r1, r1, #3
    5d40:	f019 fe56 	bl	1f9f0 <log_0>
		cdc_acm_reset_port(dev_data);
    5d44:	4630      	mov	r0, r6
}
    5d46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		cdc_acm_reset_port(dev_data);
    5d4a:	f7ff bf97 	b.w	5c7c <cdc_acm_reset_port>
    5d4e:	4b18      	ldr	r3, [pc, #96]	; (5db0 <cdc_acm_dev_status_cb+0xf4>)
    5d50:	4918      	ldr	r1, [pc, #96]	; (5db4 <cdc_acm_dev_status_cb+0xf8>)
		LOG_INF("Device suspended");
    5d52:	481c      	ldr	r0, [pc, #112]	; (5dc4 <cdc_acm_dev_status_cb+0x108>)
    5d54:	1ac9      	subs	r1, r1, r3
    5d56:	08c9      	lsrs	r1, r1, #3
    5d58:	0189      	lsls	r1, r1, #6
    5d5a:	f041 0103 	orr.w	r1, r1, #3
    5d5e:	f019 fe47 	bl	1f9f0 <log_0>
		dev_data->suspended = true;
    5d62:	2301      	movs	r3, #1
    5d64:	f804 3c01 	strb.w	r3, [r4, #-1]
		break;
    5d68:	e7e1      	b.n	5d2e <cdc_acm_dev_status_cb+0x72>
    5d6a:	4b11      	ldr	r3, [pc, #68]	; (5db0 <cdc_acm_dev_status_cb+0xf4>)
    5d6c:	4d11      	ldr	r5, [pc, #68]	; (5db4 <cdc_acm_dev_status_cb+0xf8>)
		LOG_INF("Device resumed");
    5d6e:	4816      	ldr	r0, [pc, #88]	; (5dc8 <cdc_acm_dev_status_cb+0x10c>)
    5d70:	1aed      	subs	r5, r5, r3
    5d72:	08ed      	lsrs	r5, r5, #3
    5d74:	01ad      	lsls	r5, r5, #6
    5d76:	f045 0503 	orr.w	r5, r5, #3
    5d7a:	4629      	mov	r1, r5
    5d7c:	f019 fe38 	bl	1f9f0 <log_0>
		if (dev_data->suspended) {
    5d80:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    5d84:	2b00      	cmp	r3, #0
    5d86:	d0d2      	beq.n	5d2e <cdc_acm_dev_status_cb+0x72>
			LOG_INF("from suspend");
    5d88:	4629      	mov	r1, r5
    5d8a:	4810      	ldr	r0, [pc, #64]	; (5dcc <cdc_acm_dev_status_cb+0x110>)
    5d8c:	f019 fe30 	bl	1f9f0 <log_0>
			if (dev_data->configured) {
    5d90:	f814 3c02 	ldrb.w	r3, [r4, #-2]
			dev_data->suspended = false;
    5d94:	2100      	movs	r1, #0
    5d96:	f804 1c01 	strb.w	r1, [r4, #-1]
			if (dev_data->configured) {
    5d9a:	2b00      	cmp	r3, #0
    5d9c:	d0c7      	beq.n	5d2e <cdc_acm_dev_status_cb+0x72>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    5d9e:	6a3b      	ldr	r3, [r7, #32]
    5da0:	4632      	mov	r2, r6
    5da2:	7b18      	ldrb	r0, [r3, #12]
}
    5da4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    5da8:	f7ff bf30 	b.w	5c0c <cdc_acm_read_cb>
    5dac:	20001814 	.word	0x20001814
    5db0:	00024c24 	.word	0x00024c24
    5db4:	00024d64 	.word	0x00024d64
    5db8:	00026c0e 	.word	0x00026c0e
    5dbc:	00026c2f 	.word	0x00026c2f
    5dc0:	00026c41 	.word	0x00026c41
    5dc4:	00026c55 	.word	0x00026c55
    5dc8:	00026c66 	.word	0x00026c66
    5dcc:	00026c75 	.word	0x00026c75

00005dd0 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    5dd0:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&z_usb_work_q,
    5dd2:	4c08      	ldr	r4, [pc, #32]	; (5df4 <z_usb_work_q_init+0x24>)
    5dd4:	4908      	ldr	r1, [pc, #32]	; (5df8 <z_usb_work_q_init+0x28>)
    5dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5dde:	4620      	mov	r0, r4
    5de0:	f018 fd8a 	bl	1e8f8 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    5de4:	4905      	ldr	r1, [pc, #20]	; (5dfc <z_usb_work_q_init+0x2c>)
    5de6:	f104 0018 	add.w	r0, r4, #24
    5dea:	f01e fb4f 	bl	2448c <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
		       CONFIG_USB_WORKQUEUE_PRIORITY);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    5dee:	2000      	movs	r0, #0
    5df0:	bd10      	pop	{r4, pc}
    5df2:	bf00      	nop
    5df4:	20000c40 	.word	0x20000c40
    5df8:	20006de0 	.word	0x20006de0
    5dfc:	00026c8e 	.word	0x00026c8e

00005e00 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    5e00:	b510      	push	{r4, lr}
    5e02:	4807      	ldr	r0, [pc, #28]	; (5e20 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    5e04:	4c07      	ldr	r4, [pc, #28]	; (5e24 <uart_console_init+0x24>)
    5e06:	f017 fd99 	bl	1d93c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    5e0a:	4b07      	ldr	r3, [pc, #28]	; (5e28 <uart_console_init+0x28>)
    5e0c:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    5e0e:	4620      	mov	r0, r4
    5e10:	f002 f934 	bl	807c <__stdout_hook_install>
	__printk_hook_install(console_out);
    5e14:	4620      	mov	r0, r4
    5e16:	f7fd fba7 	bl	3568 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    5e1a:	2000      	movs	r0, #0
    5e1c:	bd10      	pop	{r4, pc}
    5e1e:	bf00      	nop
    5e20:	00026814 	.word	0x00026814
    5e24:	00005e2d 	.word	0x00005e2d
    5e28:	2000181c 	.word	0x2000181c

00005e2c <console_out>:
	if ('\n' == c) {
    5e2c:	280a      	cmp	r0, #10
{
    5e2e:	b538      	push	{r3, r4, r5, lr}
    5e30:	4d07      	ldr	r5, [pc, #28]	; (5e50 <console_out+0x24>)
    5e32:	4604      	mov	r4, r0
	if ('\n' == c) {
    5e34:	d104      	bne.n	5e40 <console_out+0x14>
    5e36:	6828      	ldr	r0, [r5, #0]
    5e38:	6883      	ldr	r3, [r0, #8]
    5e3a:	210d      	movs	r1, #13
    5e3c:	685b      	ldr	r3, [r3, #4]
    5e3e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    5e40:	6828      	ldr	r0, [r5, #0]
    5e42:	6883      	ldr	r3, [r0, #8]
    5e44:	b2e1      	uxtb	r1, r4
    5e46:	685b      	ldr	r3, [r3, #4]
    5e48:	4798      	blx	r3
}
    5e4a:	4620      	mov	r0, r4
    5e4c:	bd38      	pop	{r3, r4, r5, pc}
    5e4e:	bf00      	nop
    5e50:	2000181c 	.word	0x2000181c

00005e54 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5e54:	b570      	push	{r4, r5, r6, lr}
    5e56:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    5e58:	480d      	ldr	r0, [pc, #52]	; (5e90 <onoff_stop+0x3c>)
    5e5a:	1a23      	subs	r3, r4, r0
    5e5c:	109a      	asrs	r2, r3, #2
    5e5e:	4b0d      	ldr	r3, [pc, #52]	; (5e94 <onoff_stop+0x40>)
    5e60:	4353      	muls	r3, r2
    5e62:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    5e64:	250c      	movs	r5, #12
    5e66:	435d      	muls	r5, r3
    5e68:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
    5e6c:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    5e6e:	4418      	add	r0, r3
    5e70:	2140      	movs	r1, #64	; 0x40
    5e72:	f01a fa0d 	bl	20290 <set_off_state>
	if (err < 0) {
    5e76:	1e01      	subs	r1, r0, #0
    5e78:	db04      	blt.n	5e84 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    5e7a:	4b07      	ldr	r3, [pc, #28]	; (5e98 <onoff_stop+0x44>)
    5e7c:	442b      	add	r3, r5
    5e7e:	685b      	ldr	r3, [r3, #4]
    5e80:	4798      	blx	r3
	return 0;
    5e82:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    5e84:	4620      	mov	r0, r4
    5e86:	4633      	mov	r3, r6
}
    5e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    5e8c:	4718      	bx	r3
    5e8e:	bf00      	nop
    5e90:	20001830 	.word	0x20001830
    5e94:	b6db6db7 	.word	0xb6db6db7
    5e98:	00024ffc 	.word	0x00024ffc

00005e9c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    5ea0:	4c0f      	ldr	r4, [pc, #60]	; (5ee0 <onoff_start+0x44>)
    5ea2:	4d10      	ldr	r5, [pc, #64]	; (5ee4 <onoff_start+0x48>)
    5ea4:	1b03      	subs	r3, r0, r4
    5ea6:	109b      	asrs	r3, r3, #2
    5ea8:	435d      	muls	r5, r3
    5eaa:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    5eac:	250c      	movs	r5, #12
    5eae:	435d      	muls	r5, r3
{
    5eb0:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    5eb2:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    5eb6:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    5eb8:	4420      	add	r0, r4
    5eba:	2140      	movs	r1, #64	; 0x40
    5ebc:	f01a fa01 	bl	202c2 <set_starting_state>
	if (err < 0) {
    5ec0:	1e01      	subs	r1, r0, #0
    5ec2:	db08      	blt.n	5ed6 <onoff_start+0x3a>
	subdata->cb = cb;
    5ec4:	4b08      	ldr	r3, [pc, #32]	; (5ee8 <onoff_start+0x4c>)
    5ec6:	442c      	add	r4, r5
	subdata->user_data = user_data;
    5ec8:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    5ecc:	4b07      	ldr	r3, [pc, #28]	; (5eec <onoff_start+0x50>)
    5ece:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    5ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    5ed4:	4718      	bx	r3
		notify(mgr, err);
    5ed6:	4638      	mov	r0, r7
    5ed8:	4633      	mov	r3, r6
}
    5eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    5ede:	4718      	bx	r3
    5ee0:	20001830 	.word	0x20001830
    5ee4:	b6db6db7 	.word	0xb6db6db7
    5ee8:	00020325 	.word	0x00020325
    5eec:	00024ffc 	.word	0x00024ffc

00005ef0 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5ef0:	2200      	movs	r2, #0
{
    5ef2:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5ef4:	2101      	movs	r1, #1
{
    5ef6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5ef8:	4610      	mov	r0, r2
    5efa:	f001 fc59 	bl	77b0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    5efe:	2000      	movs	r0, #0
    5f00:	f001 fc24 	bl	774c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    5f04:	480f      	ldr	r0, [pc, #60]	; (5f44 <clk_init+0x54>)
    5f06:	f016 fb6b 	bl	1c5e0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    5f0a:	4b0f      	ldr	r3, [pc, #60]	; (5f48 <clk_init+0x58>)
    5f0c:	4298      	cmp	r0, r3
    5f0e:	d115      	bne.n	5f3c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    5f10:	f016 fb76 	bl	1c600 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    5f14:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5f16:	490d      	ldr	r1, [pc, #52]	; (5f4c <clk_init+0x5c>)
    5f18:	4630      	mov	r0, r6
    5f1a:	f019 f904 	bl	1f126 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    5f1e:	2800      	cmp	r0, #0
    5f20:	db0b      	blt.n	5f3a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5f22:	2501      	movs	r5, #1
    5f24:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    5f26:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    5f28:	4908      	ldr	r1, [pc, #32]	; (5f4c <clk_init+0x5c>)
    5f2a:	f104 001c 	add.w	r0, r4, #28
    5f2e:	f019 f8fa 	bl	1f126 <onoff_manager_init>
		if (err < 0) {
    5f32:	2800      	cmp	r0, #0
    5f34:	db01      	blt.n	5f3a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5f36:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    5f38:	2000      	movs	r0, #0
}
    5f3a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    5f3c:	f06f 0004 	mvn.w	r0, #4
    5f40:	e7fb      	b.n	5f3a <clk_init+0x4a>
    5f42:	bf00      	nop
    5f44:	00005f85 	.word	0x00005f85
    5f48:	0bad0000 	.word	0x0bad0000
    5f4c:	00025014 	.word	0x00025014

00005f50 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    5f50:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    5f52:	230c      	movs	r3, #12
    5f54:	4809      	ldr	r0, [pc, #36]	; (5f7c <clkstarted_handle.constprop.0+0x2c>)
    5f56:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    5f58:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    5f5a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    5f5c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    5f60:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    5f62:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    5f64:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    5f66:	4418      	add	r0, r3
    5f68:	f01a f9c9 	bl	202fe <set_on_state>
	if (callback) {
    5f6c:	b12d      	cbz	r5, 5f7a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5f6e:	4632      	mov	r2, r6
    5f70:	462b      	mov	r3, r5
    5f72:	4803      	ldr	r0, [pc, #12]	; (5f80 <clkstarted_handle.constprop.0+0x30>)
}
    5f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    5f78:	4718      	bx	r3
}
    5f7a:	bd70      	pop	{r4, r5, r6, pc}
    5f7c:	20001830 	.word	0x20001830
    5f80:	2000072c 	.word	0x2000072c

00005f84 <clock_event_handler>:
	switch (event) {
    5f84:	b110      	cbz	r0, 5f8c <clock_event_handler+0x8>
    5f86:	2801      	cmp	r0, #1
    5f88:	d004      	beq.n	5f94 <clock_event_handler+0x10>
    5f8a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5f8c:	4b03      	ldr	r3, [pc, #12]	; (5f9c <clock_event_handler+0x18>)
    5f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5f90:	075b      	lsls	r3, r3, #29
    5f92:	d101      	bne.n	5f98 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5f94:	f7ff bfdc 	b.w	5f50 <clkstarted_handle.constprop.0>
}
    5f98:	4770      	bx	lr
    5f9a:	bf00      	nop
    5f9c:	20001830 	.word	0x20001830

00005fa0 <generic_hfclk_start>:
{
    5fa0:	b508      	push	{r3, lr}
	__asm__ volatile(
    5fa2:	f04f 0320 	mov.w	r3, #32
    5fa6:	f3ef 8111 	mrs	r1, BASEPRI
    5faa:	f383 8811 	msr	BASEPRI, r3
    5fae:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    5fb2:	4a12      	ldr	r2, [pc, #72]	; (5ffc <generic_hfclk_start+0x5c>)
    5fb4:	6813      	ldr	r3, [r2, #0]
    5fb6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    5fba:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    5fbe:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5fc0:	d00c      	beq.n	5fdc <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5fc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5fc6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5fca:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5fce:	f013 0301 	ands.w	r3, r3, #1
    5fd2:	d003      	beq.n	5fdc <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    5fd4:	480a      	ldr	r0, [pc, #40]	; (6000 <generic_hfclk_start+0x60>)
    5fd6:	f01a f992 	bl	202fe <set_on_state>
			already_started = true;
    5fda:	2301      	movs	r3, #1
	__asm__ volatile(
    5fdc:	f381 8811 	msr	BASEPRI, r1
    5fe0:	f3bf 8f6f 	isb	sy
	if (already_started) {
    5fe4:	b123      	cbz	r3, 5ff0 <generic_hfclk_start+0x50>
}
    5fe6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    5fea:	2000      	movs	r0, #0
    5fec:	f7ff bfb0 	b.w	5f50 <clkstarted_handle.constprop.0>
}
    5ff0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5ff4:	2001      	movs	r0, #1
    5ff6:	f016 bb11 	b.w	1c61c <nrfx_clock_start>
    5ffa:	bf00      	nop
    5ffc:	20001880 	.word	0x20001880
    6000:	20001870 	.word	0x20001870

00006004 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6004:	4b09      	ldr	r3, [pc, #36]	; (602c <generic_hfclk_stop+0x28>)
    6006:	f3bf 8f5b 	dmb	ish
    600a:	e853 2f00 	ldrex	r2, [r3]
    600e:	f022 0102 	bic.w	r1, r2, #2
    6012:	e843 1000 	strex	r0, r1, [r3]
    6016:	2800      	cmp	r0, #0
    6018:	d1f7      	bne.n	600a <generic_hfclk_stop+0x6>
    601a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    601e:	07d3      	lsls	r3, r2, #31
    6020:	d402      	bmi.n	6028 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    6022:	2001      	movs	r0, #1
    6024:	f016 bb2c 	b.w	1c680 <nrfx_clock_stop>
}
    6028:	4770      	bx	lr
    602a:	bf00      	nop
    602c:	20001880 	.word	0x20001880

00006030 <api_blocking_start>:
{
    6030:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6032:	2200      	movs	r2, #0
    6034:	2301      	movs	r3, #1
    6036:	e9cd 2302 	strd	r2, r3, [sp, #8]
    603a:	ab04      	add	r3, sp, #16
    603c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6040:	4a09      	ldr	r2, [pc, #36]	; (6068 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6042:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6046:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6048:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    604c:	f01a f990 	bl	20370 <api_start>
	if (err < 0) {
    6050:	2800      	cmp	r0, #0
    6052:	db05      	blt.n	6060 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    6054:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6058:	2300      	movs	r3, #0
    605a:	4668      	mov	r0, sp
    605c:	f018 fb3a 	bl	1e6d4 <z_impl_k_sem_take>
}
    6060:	b007      	add	sp, #28
    6062:	f85d fb04 	ldr.w	pc, [sp], #4
    6066:	bf00      	nop
    6068:	00020343 	.word	0x00020343

0000606c <z_nrf_clock_control_get_onoff>:
}
    606c:	4a02      	ldr	r2, [pc, #8]	; (6078 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    606e:	b2c3      	uxtb	r3, r0
}
    6070:	201c      	movs	r0, #28
    6072:	fb03 2000 	mla	r0, r3, r0, r2
    6076:	4770      	bx	lr
    6078:	20001830 	.word	0x20001830

0000607c <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    607c:	4b09      	ldr	r3, [pc, #36]	; (60a4 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    607e:	f3bf 8f5b 	dmb	ish
    6082:	e853 2f00 	ldrex	r2, [r3]
    6086:	f042 0101 	orr.w	r1, r2, #1
    608a:	e843 1000 	strex	r0, r1, [r3]
    608e:	2800      	cmp	r0, #0
    6090:	d1f7      	bne.n	6082 <z_nrf_clock_bt_ctlr_hf_request+0x6>
    6092:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    6096:	0793      	lsls	r3, r2, #30
    6098:	d402      	bmi.n	60a0 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    609a:	2001      	movs	r0, #1
    609c:	f016 babe 	b.w	1c61c <nrfx_clock_start>
}
    60a0:	4770      	bx	lr
    60a2:	bf00      	nop
    60a4:	20001880 	.word	0x20001880

000060a8 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    60a8:	4b09      	ldr	r3, [pc, #36]	; (60d0 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    60aa:	f3bf 8f5b 	dmb	ish
    60ae:	e853 2f00 	ldrex	r2, [r3]
    60b2:	f022 0101 	bic.w	r1, r2, #1
    60b6:	e843 1000 	strex	r0, r1, [r3]
    60ba:	2800      	cmp	r0, #0
    60bc:	d1f7      	bne.n	60ae <z_nrf_clock_bt_ctlr_hf_release+0x6>
    60be:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    60c2:	0793      	lsls	r3, r2, #30
    60c4:	d402      	bmi.n	60cc <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    60c6:	2001      	movs	r0, #1
    60c8:	f016 bada 	b.w	1c680 <nrfx_clock_stop>
}
    60cc:	4770      	bx	lr
    60ce:	bf00      	nop
    60d0:	20001880 	.word	0x20001880

000060d4 <z_nrf_clock_control_lf_on>:
{
    60d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    60d8:	493a      	ldr	r1, [pc, #232]	; (61c4 <z_nrf_clock_control_lf_on+0xf0>)
    60da:	f3bf 8f5b 	dmb	ish
    60de:	4606      	mov	r6, r0
    60e0:	2201      	movs	r2, #1
    60e2:	e851 3f00 	ldrex	r3, [r1]
    60e6:	e841 2000 	strex	r0, r2, [r1]
    60ea:	2800      	cmp	r0, #0
    60ec:	d1f9      	bne.n	60e2 <z_nrf_clock_control_lf_on+0xe>
    60ee:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    60f2:	b933      	cbnz	r3, 6102 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    60f4:	4934      	ldr	r1, [pc, #208]	; (61c8 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    60f6:	4835      	ldr	r0, [pc, #212]	; (61cc <z_nrf_clock_control_lf_on+0xf8>)
    60f8:	604b      	str	r3, [r1, #4]
    60fa:	60cb      	str	r3, [r1, #12]
    60fc:	608a      	str	r2, [r1, #8]
    60fe:	f019 f825 	bl	1f14c <onoff_request>
	switch (start_mode) {
    6102:	1e73      	subs	r3, r6, #1
    6104:	2b01      	cmp	r3, #1
    6106:	d832      	bhi.n	616e <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    6108:	2e01      	cmp	r6, #1
    610a:	d107      	bne.n	611c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    610c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6110:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    6114:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    6118:	2b01      	cmp	r3, #1
    611a:	d028      	beq.n	616e <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    611c:	f01e f9ac 	bl	24478 <k_is_in_isr>
    6120:	4604      	mov	r4, r0
    6122:	b918      	cbnz	r0, 612c <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    6124:	4b2a      	ldr	r3, [pc, #168]	; (61d0 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    6126:	781b      	ldrb	r3, [r3, #0]
    6128:	2b00      	cmp	r3, #0
    612a:	d144      	bne.n	61b6 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    612c:	f04f 0320 	mov.w	r3, #32
    6130:	f3ef 8511 	mrs	r5, BASEPRI
    6134:	f383 8811 	msr	BASEPRI, r3
    6138:	f3bf 8f6f 	isb	sy
    613c:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    613e:	4f25      	ldr	r7, [pc, #148]	; (61d4 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6140:	f8df 8094 	ldr.w	r8, [pc, #148]	; 61d8 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6144:	f8df 9094 	ldr.w	r9, [pc, #148]	; 61dc <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6148:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    614c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6150:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    6154:	03d2      	lsls	r2, r2, #15
    6156:	d50c      	bpl.n	6172 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6158:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    615c:	2b01      	cmp	r3, #1
    615e:	d001      	beq.n	6164 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    6160:	2e01      	cmp	r6, #1
    6162:	d106      	bne.n	6172 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    6164:	b30c      	cbz	r4, 61aa <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    6166:	f385 8811 	msr	BASEPRI, r5
    616a:	f3bf 8f6f 	isb	sy
}
    616e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    6172:	b1ac      	cbz	r4, 61a0 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    6174:	4628      	mov	r0, r5
    6176:	f001 fba5 	bl	78c4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    617a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    617e:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    6182:	2b00      	cmp	r3, #0
    6184:	d1e0      	bne.n	6148 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6186:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    6188:	2900      	cmp	r1, #0
    618a:	d0dd      	beq.n	6148 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    618c:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    618e:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    6190:	2301      	movs	r3, #1
    6192:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    6196:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    619a:	f8c9 3000 	str.w	r3, [r9]
}
    619e:	e7d3      	b.n	6148 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    61a0:	2100      	movs	r1, #0
    61a2:	2021      	movs	r0, #33	; 0x21
    61a4:	f018 fa48 	bl	1e638 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    61a8:	e7e7      	b.n	617a <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    61aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    61ae:	2202      	movs	r2, #2
    61b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    61b4:	e7db      	b.n	616e <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    61b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    61ba:	2202      	movs	r2, #2
    61bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    61c0:	4605      	mov	r5, r0
}
    61c2:	e7bc      	b.n	613e <z_nrf_clock_control_lf_on+0x6a>
    61c4:	20001884 	.word	0x20001884
    61c8:	20001820 	.word	0x20001820
    61cc:	2000184c 	.word	0x2000184c
    61d0:	2000688f 	.word	0x2000688f
    61d4:	40000104 	.word	0x40000104
    61d8:	e000e100 	.word	0xe000e100
    61dc:	40000008 	.word	0x40000008

000061e0 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    61e0:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    61e4:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
    61e6:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    61e8:	d004      	beq.n	61f4 <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
    61ea:	f010 0f78 	tst.w	r0, #120	; 0x78
    61ee:	d001      	beq.n	61f4 <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
    61f0:	2000      	movs	r0, #0
    61f2:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    61f4:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
    61f6:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
    61fa:	f000 0008 	and.w	r0, r0, #8
    61fe:	da06      	bge.n	620e <endpoint_ctx+0x2e>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    6200:	b968      	cbnz	r0, 621e <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
    6202:	4809      	ldr	r0, [pc, #36]	; (6228 <endpoint_ctx+0x48>)
    6204:	2224      	movs	r2, #36	; 0x24
    6206:	fb02 0003 	mla	r0, r2, r3, r0
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    620a:	3048      	adds	r0, #72	; 0x48
    620c:	4770      	bx	lr
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    620e:	b940      	cbnz	r0, 6222 <endpoint_ctx+0x42>
					    CFG_EP_ISOIN_CNT +
    6210:	f103 0009 	add.w	r0, r3, #9
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    6214:	4b04      	ldr	r3, [pc, #16]	; (6228 <endpoint_ctx+0x48>)
    6216:	2224      	movs	r2, #36	; 0x24
    6218:	fb02 3000 	mla	r0, r2, r0, r3
    621c:	e7f5      	b.n	620a <endpoint_ctx+0x2a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    621e:	4803      	ldr	r0, [pc, #12]	; (622c <endpoint_ctx+0x4c>)
    6220:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    6222:	4803      	ldr	r0, [pc, #12]	; (6230 <endpoint_ctx+0x50>)
					    ep_num];
		}
	}

	return NULL;
}
    6224:	4770      	bx	lr
    6226:	bf00      	nop
    6228:	20002600 	.word	0x20002600
    622c:	20002768 	.word	0x20002768
    6230:	200028ac 	.word	0x200028ac

00006234 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    6234:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    6236:	4801      	ldr	r0, [pc, #4]	; (623c <usbd_evt_put+0x8>)
    6238:	f01d bfc2 	b.w	241c0 <k_queue_append>
    623c:	20000908 	.word	0x20000908

00006240 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    6240:	b508      	push	{r3, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    6242:	480a      	ldr	r0, [pc, #40]	; (626c <usb_init+0x2c>)
    6244:	f016 fac8 	bl	1c7d8 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
    6248:	4809      	ldr	r0, [pc, #36]	; (6270 <usb_init+0x30>)
    624a:	f016 fb0d 	bl	1c868 <nrfx_power_usbevt_init>

	k_work_q_start(&usbd_work_queue,
    624e:	4909      	ldr	r1, [pc, #36]	; (6274 <usb_init+0x34>)
    6250:	4809      	ldr	r0, [pc, #36]	; (6278 <usb_init+0x38>)
    6252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6256:	f44f 6280 	mov.w	r2, #1024	; 0x400
    625a:	f018 fb4d 	bl	1e8f8 <k_work_q_start>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    625e:	4b07      	ldr	r3, [pc, #28]	; (627c <usb_init+0x3c>)
    6260:	4a07      	ldr	r2, [pc, #28]	; (6280 <usb_init+0x40>)
    6262:	2000      	movs	r0, #0
    6264:	e9c3 200b 	strd	r2, r0, [r3, #44]	; 0x2c
    6268:	6298      	str	r0, [r3, #40]	; 0x28
		CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	k_work_init(&ctx->usb_work, usbd_work_handler);

	return 0;
}
    626a:	bd08      	pop	{r3, pc}
    626c:	00026f1b 	.word	0x00026f1b
    6270:	00025020 	.word	0x00025020
    6274:	20007200 	.word	0x20007200
    6278:	20000ce0 	.word	0x20000ce0
    627c:	20002600 	.word	0x20002600
    6280:	0000671d 	.word	0x0000671d

00006284 <hfxo_stop.constprop.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    6284:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6286:	4911      	ldr	r1, [pc, #68]	; (62cc <hfxo_stop.constprop.0+0x48>)
    6288:	f3bf 8f5b 	dmb	ish
    628c:	f101 0320 	add.w	r3, r1, #32
    6290:	2200      	movs	r2, #0
    6292:	e853 0f00 	ldrex	r0, [r3]
    6296:	2801      	cmp	r0, #1
    6298:	d103      	bne.n	62a2 <hfxo_stop.constprop.0+0x1e>
    629a:	e843 2400 	strex	r4, r2, [r3]
    629e:	2c00      	cmp	r4, #0
    62a0:	d1f7      	bne.n	6292 <hfxo_stop.constprop.0+0xe>
    62a2:	f3bf 8f5b 	dmb	ish
    62a6:	bf0c      	ite	eq
    62a8:	2001      	moveq	r0, #1
    62aa:	4610      	movne	r0, r2
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    62ac:	d10c      	bne.n	62c8 <hfxo_stop.constprop.0+0x44>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    62ae:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    62b0:	310c      	adds	r1, #12
    62b2:	4620      	mov	r0, r4
    62b4:	f018 ffb8 	bl	1f228 <onoff_cancel>

	if (rv == -EALREADY) {
    62b8:	f110 0f45 	cmn.w	r0, #69	; 0x45
    62bc:	d104      	bne.n	62c8 <hfxo_stop.constprop.0+0x44>
		rv = onoff_release(mgr);
    62be:	4620      	mov	r0, r4
}
    62c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    62c4:	f018 bf8b 	b.w	1f1de <onoff_release>
    62c8:	bd10      	pop	{r4, pc}
    62ca:	bf00      	nop
    62cc:	20002600 	.word	0x20002600

000062d0 <usbd_work_schedule>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    62d0:	4909      	ldr	r1, [pc, #36]	; (62f8 <usbd_work_schedule+0x28>)
    62d2:	f3bf 8f5b 	dmb	ish
    62d6:	e851 3f00 	ldrex	r3, [r1]
    62da:	f043 0201 	orr.w	r2, r3, #1
    62de:	e841 2000 	strex	r0, r2, [r1]
    62e2:	2800      	cmp	r0, #0
    62e4:	d1f7      	bne.n	62d6 <usbd_work_schedule+0x6>
    62e6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    62ea:	07db      	lsls	r3, r3, #31
    62ec:	d403      	bmi.n	62f6 <usbd_work_schedule+0x26>
		k_queue_append(&work_q->queue, work);
    62ee:	4803      	ldr	r0, [pc, #12]	; (62fc <usbd_work_schedule+0x2c>)
    62f0:	3908      	subs	r1, #8
    62f2:	f01d bf65 	b.w	241c0 <k_queue_append>
}
    62f6:	4770      	bx	lr
    62f8:	20002630 	.word	0x20002630
    62fc:	20000ce0 	.word	0x20000ce0

00006300 <eps_ctx_init>:
{
    6300:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    6304:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    6306:	f064 007f 	orn	r0, r4, #127	; 0x7f
    630a:	b2c0      	uxtb	r0, r0
    630c:	f7ff ff68 	bl	61e0 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    6310:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    6312:	f01a f847 	bl	203a4 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    6316:	2c08      	cmp	r4, #8
    6318:	d1f5      	bne.n	6306 <eps_ctx_init+0x6>
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    631a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 63cc <eps_ctx_init+0xcc>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    631e:	2400      	movs	r4, #0
					       EP_BUF_MAX_SZ, K_NO_WAIT);
    6320:	2600      	movs	r6, #0
    6322:	2700      	movs	r7, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    6324:	b2e0      	uxtb	r0, r4
    6326:	f7ff ff5b 	bl	61e0 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    632a:	6903      	ldr	r3, [r0, #16]
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    632c:	4605      	mov	r5, r0
		if (!ep_ctx->buf.block.data) {
    632e:	b9cb      	cbnz	r3, 6364 <eps_ctx_init+0x64>
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    6330:	f100 0110 	add.w	r1, r0, #16
    6334:	e9cd 6700 	strd	r6, r7, [sp]
    6338:	2240      	movs	r2, #64	; 0x40
    633a:	4640      	mov	r0, r8
    633c:	f01d fe84 	bl	24048 <k_mem_pool_alloc>
			if (err < 0) {
    6340:	2800      	cmp	r0, #0
    6342:	da0f      	bge.n	6364 <eps_ctx_init+0x64>
    6344:	4a1d      	ldr	r2, [pc, #116]	; (63bc <eps_ctx_init+0xbc>)
    6346:	4b1e      	ldr	r3, [pc, #120]	; (63c0 <eps_ctx_init+0xc0>)
				LOG_ERR("Buffer alloc failed for EP 0x%02x", i);
    6348:	481e      	ldr	r0, [pc, #120]	; (63c4 <eps_ctx_init+0xc4>)
    634a:	1ad2      	subs	r2, r2, r3
    634c:	08d2      	lsrs	r2, r2, #3
    634e:	0192      	lsls	r2, r2, #6
    6350:	f042 0201 	orr.w	r2, r2, #1
    6354:	4621      	mov	r1, r4
    6356:	f019 fb58 	bl	1fa0a <log_1>
				return -ENOMEM;
    635a:	f06f 000b 	mvn.w	r0, #11
}
    635e:	b002      	add	sp, #8
    6360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_ctx_reset(ep_ctx);
    6364:	4628      	mov	r0, r5
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    6366:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    6368:	f01a f81c 	bl	203a4 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    636c:	2c08      	cmp	r4, #8
    636e:	d1d9      	bne.n	6324 <eps_ctx_init+0x24>
		ep_ctx_reset(ep_ctx);
    6370:	4c15      	ldr	r4, [pc, #84]	; (63c8 <eps_ctx_init+0xc8>)
    6372:	f504 70b4 	add.w	r0, r4, #360	; 0x168
    6376:	f01a f815 	bl	203a4 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    637a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
    637e:	b9bb      	cbnz	r3, 63b0 <eps_ctx_init+0xb0>
					       K_NO_WAIT);
    6380:	2200      	movs	r2, #0
    6382:	2300      	movs	r3, #0
			err = k_mem_pool_alloc(&ep_buf_pool, &ep_ctx->buf.block,
    6384:	e9cd 2300 	strd	r2, r3, [sp]
    6388:	4810      	ldr	r0, [pc, #64]	; (63cc <eps_ctx_init+0xcc>)
    638a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    638e:	f504 712f 	add.w	r1, r4, #700	; 0x2bc
    6392:	f01d fe59 	bl	24048 <k_mem_pool_alloc>
			if (err < 0) {
    6396:	2800      	cmp	r0, #0
    6398:	da0a      	bge.n	63b0 <eps_ctx_init+0xb0>
    639a:	4b09      	ldr	r3, [pc, #36]	; (63c0 <eps_ctx_init+0xc0>)
    639c:	4907      	ldr	r1, [pc, #28]	; (63bc <eps_ctx_init+0xbc>)
				LOG_ERR("EP buffer alloc failed for ISOOUT");
    639e:	480c      	ldr	r0, [pc, #48]	; (63d0 <eps_ctx_init+0xd0>)
    63a0:	1ac9      	subs	r1, r1, r3
    63a2:	08c9      	lsrs	r1, r1, #3
    63a4:	0189      	lsls	r1, r1, #6
    63a6:	f041 0101 	orr.w	r1, r1, #1
    63aa:	f019 fb21 	bl	1f9f0 <log_0>
    63ae:	e7d4      	b.n	635a <eps_ctx_init+0x5a>
		ep_ctx_reset(ep_ctx);
    63b0:	4808      	ldr	r0, [pc, #32]	; (63d4 <eps_ctx_init+0xd4>)
    63b2:	f019 fff7 	bl	203a4 <ep_ctx_reset>
	return 0;
    63b6:	2000      	movs	r0, #0
    63b8:	e7d1      	b.n	635e <eps_ctx_init+0x5e>
    63ba:	bf00      	nop
    63bc:	00024d7c 	.word	0x00024d7c
    63c0:	00024c24 	.word	0x00024c24
    63c4:	00026cc6 	.word	0x00026cc6
    63c8:	20002600 	.word	0x20002600
    63cc:	2000024c 	.word	0x2000024c
    63d0:	00026ce8 	.word	0x00026ce8
    63d4:	200028ac 	.word	0x200028ac

000063d8 <usbd_evt_flush>:
{
    63d8:	b510      	push	{r4, lr}
	return z_impl_k_queue_get(queue, timeout);
    63da:	4c06      	ldr	r4, [pc, #24]	; (63f4 <usbd_evt_flush+0x1c>)
    63dc:	2200      	movs	r2, #0
    63de:	2300      	movs	r3, #0
    63e0:	4620      	mov	r0, r4
    63e2:	f017 fd7f 	bl	1dee4 <z_impl_k_queue_get>
		if (ev) {
    63e6:	b118      	cbz	r0, 63f0 <usbd_evt_flush+0x18>
	k_mem_pool_free(&ev->block);
    63e8:	3004      	adds	r0, #4
    63ea:	f01e fabb 	bl	24964 <k_mem_pool_free>
	} while (ev != NULL);
    63ee:	e7f5      	b.n	63dc <usbd_evt_flush+0x4>
}
    63f0:	bd10      	pop	{r4, pc}
    63f2:	bf00      	nop
    63f4:	20000908 	.word	0x20000908

000063f8 <usbd_evt_alloc>:
{
    63f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    63fa:	b085      	sub	sp, #20
			       K_NO_WAIT);
    63fc:	2600      	movs	r6, #0
    63fe:	2700      	movs	r7, #0
	ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    6400:	ad02      	add	r5, sp, #8
    6402:	e9cd 6700 	strd	r6, r7, [sp]
    6406:	481d      	ldr	r0, [pc, #116]	; (647c <usbd_evt_alloc+0x84>)
    6408:	2218      	movs	r2, #24
    640a:	4629      	mov	r1, r5
    640c:	f01d fe1c 	bl	24048 <k_mem_pool_alloc>
	if (ret < 0) {
    6410:	2800      	cmp	r0, #0
    6412:	da2b      	bge.n	646c <usbd_evt_alloc+0x74>
    6414:	4b1a      	ldr	r3, [pc, #104]	; (6480 <usbd_evt_alloc+0x88>)
    6416:	4c1b      	ldr	r4, [pc, #108]	; (6484 <usbd_evt_alloc+0x8c>)
		LOG_ERR("USBD event allocation failed!");
    6418:	481b      	ldr	r0, [pc, #108]	; (6488 <usbd_evt_alloc+0x90>)
    641a:	1ae4      	subs	r4, r4, r3
    641c:	08e4      	lsrs	r4, r4, #3
    641e:	01a4      	lsls	r4, r4, #6
    6420:	f044 0401 	orr.w	r4, r4, #1
    6424:	4621      	mov	r1, r4
    6426:	f019 fae3 	bl	1f9f0 <log_0>
		usbd_evt_flush();
    642a:	f7ff ffd5 	bl	63d8 <usbd_evt_flush>
		ret = k_mem_pool_alloc(&fifo_elem_pool, &block,
    642e:	e9cd 6700 	strd	r6, r7, [sp]
    6432:	4812      	ldr	r0, [pc, #72]	; (647c <usbd_evt_alloc+0x84>)
    6434:	2218      	movs	r2, #24
    6436:	4629      	mov	r1, r5
    6438:	f01d fe06 	bl	24048 <k_mem_pool_alloc>
		if (ret < 0) {
    643c:	2800      	cmp	r0, #0
    643e:	da07      	bge.n	6450 <usbd_evt_alloc+0x58>
			LOG_ERR("USBD event memory corrupted");
    6440:	4812      	ldr	r0, [pc, #72]	; (648c <usbd_evt_alloc+0x94>)
    6442:	4621      	mov	r1, r4
    6444:	f019 fad4 	bl	1f9f0 <log_0>
			return NULL;
    6448:	2300      	movs	r3, #0
}
    644a:	4618      	mov	r0, r3
    644c:	b005      	add	sp, #20
    644e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ev = (struct usbd_event *)block.data;
    6450:	9b02      	ldr	r3, [sp, #8]
		ev->block = block;
    6452:	e895 0003 	ldmia.w	r5, {r0, r1}
    6456:	1d1a      	adds	r2, r3, #4
    6458:	e882 0003 	stmia.w	r2, {r0, r1}
		ev->evt_type = USBD_EVT_REINIT;
    645c:	2204      	movs	r2, #4
    645e:	751a      	strb	r2, [r3, #20]
		usbd_evt_put(ev);
    6460:	4618      	mov	r0, r3
    6462:	f7ff fee7 	bl	6234 <usbd_evt_put>
		usbd_work_schedule();
    6466:	f7ff ff33 	bl	62d0 <usbd_work_schedule>
		return NULL;
    646a:	e7ed      	b.n	6448 <usbd_evt_alloc+0x50>
	ev->block = block;
    646c:	e895 0003 	ldmia.w	r5, {r0, r1}
	ev = (struct usbd_event *)block.data;
    6470:	9b02      	ldr	r3, [sp, #8]
	ev->block = block;
    6472:	1d1a      	adds	r2, r3, #4
    6474:	e882 0003 	stmia.w	r2, {r0, r1}
	return ev;
    6478:	e7e7      	b.n	644a <usbd_evt_alloc+0x52>
    647a:	bf00      	nop
    647c:	20000250 	.word	0x20000250
    6480:	00024c24 	.word	0x00024c24
    6484:	00024d7c 	.word	0x00024d7c
    6488:	00026d0a 	.word	0x00026d0a
    648c:	00026d28 	.word	0x00026d28

00006490 <usbd_event_transfer_data>:
		endpoint_ctx(p_event->data.eptransfer.ep);
    6490:	7881      	ldrb	r1, [r0, #2]
{
    6492:	b570      	push	{r4, r5, r6, lr}
    6494:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    6496:	4608      	mov	r0, r1
    6498:	f7ff fea2 	bl	61e0 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    649c:	060b      	lsls	r3, r1, #24
    649e:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    64a0:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    64a2:	d522      	bpl.n	64ea <usbd_event_transfer_data+0x5a>
		switch (p_event->data.eptransfer.status) {
    64a4:	b17c      	cbz	r4, 64c6 <usbd_event_transfer_data+0x36>
    64a6:	2c03      	cmp	r4, #3
    64a8:	d053      	beq.n	6552 <usbd_event_transfer_data+0xc2>
    64aa:	4a2a      	ldr	r2, [pc, #168]	; (6554 <usbd_event_transfer_data+0xc4>)
    64ac:	4b2a      	ldr	r3, [pc, #168]	; (6558 <usbd_event_transfer_data+0xc8>)
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    64ae:	482b      	ldr	r0, [pc, #172]	; (655c <usbd_event_transfer_data+0xcc>)
    64b0:	1a9b      	subs	r3, r3, r2
    64b2:	08db      	lsrs	r3, r3, #3
    64b4:	019b      	lsls	r3, r3, #6
    64b6:	460a      	mov	r2, r1
    64b8:	f043 0301 	orr.w	r3, r3, #1
    64bc:	4621      	mov	r1, r4
}
    64be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    64c2:	f019 bab6 	b.w	1fa32 <log_2>
			struct usbd_event *ev = usbd_evt_alloc();
    64c6:	f7ff ff97 	bl	63f8 <usbd_evt_alloc>
			if (!ev) {
    64ca:	4603      	mov	r3, r0
    64cc:	2800      	cmp	r0, #0
    64ce:	d040      	beq.n	6552 <usbd_event_transfer_data+0xc2>
			ev->evt_type = USBD_EVT_EP;
    64d0:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    64d2:	f885 4022 	strb.w	r4, [r5, #34]	; 0x22
			ev->evt_type = USBD_EVT_EP;
    64d6:	7502      	strb	r2, [r0, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    64d8:	2203      	movs	r2, #3
    64da:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    64dc:	60dd      	str	r5, [r3, #12]
			usbd_evt_put(ev);
    64de:	f7ff fea9 	bl	6234 <usbd_evt_put>
}
    64e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usbd_work_schedule();
    64e6:	f7ff bef3 	b.w	62d0 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    64ea:	b154      	cbz	r4, 6502 <usbd_event_transfer_data+0x72>
    64ec:	2c01      	cmp	r4, #1
    64ee:	d1dc      	bne.n	64aa <usbd_event_transfer_data+0x1a>
			struct usbd_event *ev = usbd_evt_alloc();
    64f0:	f7ff ff82 	bl	63f8 <usbd_evt_alloc>
			if (!ev) {
    64f4:	4603      	mov	r3, r0
    64f6:	b360      	cbz	r0, 6552 <usbd_event_transfer_data+0xc2>
			ep_ctx->read_pending = true;
    64f8:	f885 4021 	strb.w	r4, [r5, #33]	; 0x21
			ev->evt_type = USBD_EVT_EP;
    64fc:	7504      	strb	r4, [r0, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    64fe:	7404      	strb	r4, [r0, #16]
    6500:	e7ec      	b.n	64dc <usbd_event_transfer_data+0x4c>
			struct usbd_event *ev = usbd_evt_alloc();
    6502:	f7ff ff79 	bl	63f8 <usbd_evt_alloc>
			if (!ev) {
    6506:	b320      	cbz	r0, 6552 <usbd_event_transfer_data+0xc2>
				p_event->data.eptransfer.ep);
    6508:	78b3      	ldrb	r3, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    650a:	4a15      	ldr	r2, [pc, #84]	; (6560 <usbd_event_transfer_data+0xd0>)
    650c:	f013 0f80 	tst.w	r3, #128	; 0x80
    6510:	f003 0108 	and.w	r1, r3, #8
    6514:	d011      	beq.n	653a <usbd_event_transfer_data+0xaa>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    6516:	b141      	cbz	r1, 652a <usbd_event_transfer_data+0x9a>
        {
            ret = p_reg->ISOIN.AMOUNT;
    6518:	f8d2 36a8 	ldr.w	r3, [r2, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    651c:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    651e:	2301      	movs	r3, #1
    6520:	7503      	strb	r3, [r0, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    6522:	2302      	movs	r3, #2
    6524:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    6526:	60c5      	str	r5, [r0, #12]
			usbd_evt_put(ev);
    6528:	e7d9      	b.n	64de <usbd_event_transfer_data+0x4e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    652a:	f003 030f 	and.w	r3, r3, #15
    652e:	2114      	movs	r1, #20
    6530:	fb01 2303 	mla	r3, r1, r3, r2
    6534:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    6538:	e7f0      	b.n	651c <usbd_event_transfer_data+0x8c>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    653a:	b111      	cbz	r1, 6542 <usbd_event_transfer_data+0xb2>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    653c:	f8d2 37a8 	ldr.w	r3, [r2, #1960]	; 0x7a8
    6540:	e7ec      	b.n	651c <usbd_event_transfer_data+0x8c>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    6542:	f003 030f 	and.w	r3, r3, #15
    6546:	2114      	movs	r1, #20
    6548:	fb01 2303 	mla	r3, r1, r3, r2
    654c:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    6550:	e7e4      	b.n	651c <usbd_event_transfer_data+0x8c>
}
    6552:	bd70      	pop	{r4, r5, r6, pc}
    6554:	00024c24 	.word	0x00024c24
    6558:	00024d7c 	.word	0x00024d7c
    655c:	00026d44 	.word	0x00026d44
    6560:	40027000 	.word	0x40027000

00006564 <usbd_event_handler>:
{
    6564:	b570      	push	{r4, r5, r6, lr}
    6566:	4606      	mov	r6, r0
    6568:	b088      	sub	sp, #32
	struct usbd_event evt = {0};
    656a:	2218      	movs	r2, #24
    656c:	2100      	movs	r1, #0
    656e:	a802      	add	r0, sp, #8
    6570:	f01b f8c4 	bl	216fc <memset>
	switch (p_event->type) {
    6574:	7833      	ldrb	r3, [r6, #0]
    6576:	3b01      	subs	r3, #1
    6578:	2b05      	cmp	r3, #5
    657a:	d821      	bhi.n	65c0 <usbd_event_handler+0x5c>
    657c:	e8df f003 	tbb	[pc, r3]
    6580:	14140392 	.word	0x14140392
    6584:	1682      	.short	0x1682
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    6586:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
    6588:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
    658c:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    658e:	f7ff ff33 	bl	63f8 <usbd_evt_alloc>
		if (!ev) {
    6592:	4603      	mov	r3, r0
    6594:	b1a0      	cbz	r0, 65c0 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
    6596:	7504      	strb	r4, [r0, #20]
		ev->evt = evt.evt;
    6598:	f100 020c 	add.w	r2, r0, #12
    659c:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    65a0:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    65a4:	4618      	mov	r0, r3
    65a6:	e01e      	b.n	65e6 <usbd_event_handler+0x82>
		evt.evt.pwr_evt.state = USBD_RESUMED;
    65a8:	2304      	movs	r3, #4
    65aa:	e7ed      	b.n	6588 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    65ac:	78b1      	ldrb	r1, [r6, #2]
    65ae:	4608      	mov	r0, r1
    65b0:	f7ff fe16 	bl	61e0 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    65b4:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    65b6:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
    65b8:	b123      	cbz	r3, 65c4 <usbd_event_handler+0x60>
    65ba:	3b01      	subs	r3, #1
    65bc:	2b02      	cmp	r3, #2
    65be:	d95d      	bls.n	667c <usbd_event_handler+0x118>
}
    65c0:	b008      	add	sp, #32
    65c2:	bd70      	pop	{r4, r5, r6, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    65c4:	060b      	lsls	r3, r1, #24
    65c6:	78f5      	ldrb	r5, [r6, #3]
    65c8:	d512      	bpl.n	65f0 <usbd_event_handler+0x8c>
		switch (p_event->data.eptransfer.status) {
    65ca:	2d00      	cmp	r5, #0
    65cc:	d149      	bne.n	6662 <usbd_event_handler+0xfe>
			struct usbd_event *ev = usbd_evt_alloc();
    65ce:	f7ff ff13 	bl	63f8 <usbd_evt_alloc>
			if (!ev) {
    65d2:	4603      	mov	r3, r0
    65d4:	2800      	cmp	r0, #0
    65d6:	d0f3      	beq.n	65c0 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    65d8:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    65da:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
			ev->evt_type = USBD_EVT_EP;
    65de:	7502      	strb	r2, [r0, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    65e0:	2203      	movs	r2, #3
    65e2:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    65e4:	60dc      	str	r4, [r3, #12]
		usbd_evt_put(ev);
    65e6:	f7ff fe25 	bl	6234 <usbd_evt_put>
		usbd_work_schedule();
    65ea:	f7ff fe71 	bl	62d0 <usbd_work_schedule>
    65ee:	e7e7      	b.n	65c0 <usbd_event_handler+0x5c>
		switch (p_event->data.eptransfer.status) {
    65f0:	b15d      	cbz	r5, 660a <usbd_event_handler+0xa6>
    65f2:	2d01      	cmp	r5, #1
    65f4:	d135      	bne.n	6662 <usbd_event_handler+0xfe>
			struct usbd_event *ev = usbd_evt_alloc();
    65f6:	f7ff feff 	bl	63f8 <usbd_evt_alloc>
			if (!ev) {
    65fa:	4603      	mov	r3, r0
    65fc:	2800      	cmp	r0, #0
    65fe:	d0df      	beq.n	65c0 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
    6600:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
			ev->evt_type = USBD_EVT_EP;
    6604:	7505      	strb	r5, [r0, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    6606:	7405      	strb	r5, [r0, #16]
    6608:	e7ec      	b.n	65e4 <usbd_event_handler+0x80>
			struct usbd_event *ev = usbd_evt_alloc();
    660a:	f7ff fef5 	bl	63f8 <usbd_evt_alloc>
			if (!ev) {
    660e:	4605      	mov	r5, r0
    6610:	2800      	cmp	r0, #0
    6612:	d0d5      	beq.n	65c0 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    6614:	2301      	movs	r3, #1
    6616:	7503      	strb	r3, [r0, #20]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    6618:	2302      	movs	r3, #2
    661a:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    661c:	60c4      	str	r4, [r0, #12]
			err_code = nrfx_usbd_ep_status_get(
    661e:	f104 010c 	add.w	r1, r4, #12
    6622:	78b0      	ldrb	r0, [r6, #2]
    6624:	f01d fc6f 	bl	23f06 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    6628:	4601      	mov	r1, r0
    662a:	b148      	cbz	r0, 6640 <usbd_event_handler+0xdc>
    662c:	4a1e      	ldr	r2, [pc, #120]	; (66a8 <usbd_event_handler+0x144>)
    662e:	4b1f      	ldr	r3, [pc, #124]	; (66ac <usbd_event_handler+0x148>)
				LOG_ERR("_ep_status_get failed! Code: %d",
    6630:	481f      	ldr	r0, [pc, #124]	; (66b0 <usbd_event_handler+0x14c>)
    6632:	1ad2      	subs	r2, r2, r3
    6634:	08d2      	lsrs	r2, r2, #3
    6636:	0192      	lsls	r2, r2, #6
    6638:	f042 0201 	orr.w	r2, r2, #1
    663c:	f019 f9e5 	bl	1fa0a <log_1>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    6640:	4a1c      	ldr	r2, [pc, #112]	; (66b4 <usbd_event_handler+0x150>)
    6642:	68e1      	ldr	r1, [r4, #12]
    6644:	f8b2 32d0 	ldrh.w	r3, [r2, #720]	; 0x2d0
    6648:	428b      	cmp	r3, r1
    664a:	d906      	bls.n	665a <usbd_event_handler+0xf6>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    664c:	1a5b      	subs	r3, r3, r1
    664e:	f8a2 32d0 	strh.w	r3, [r2, #720]	; 0x2d0
				nrfx_usbd_setup_data_clear();
    6652:	f016 feb5 	bl	1d3c0 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    6656:	4628      	mov	r0, r5
    6658:	e7c5      	b.n	65e6 <usbd_event_handler+0x82>
				ctx->ctrl_read_len = 0U;
    665a:	2300      	movs	r3, #0
    665c:	f8a2 32d0 	strh.w	r3, [r2, #720]	; 0x2d0
    6660:	e7f9      	b.n	6656 <usbd_event_handler+0xf2>
    6662:	4a12      	ldr	r2, [pc, #72]	; (66ac <usbd_event_handler+0x148>)
    6664:	4b10      	ldr	r3, [pc, #64]	; (66a8 <usbd_event_handler+0x144>)
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    6666:	4814      	ldr	r0, [pc, #80]	; (66b8 <usbd_event_handler+0x154>)
    6668:	1a9b      	subs	r3, r3, r2
    666a:	08db      	lsrs	r3, r3, #3
    666c:	019b      	lsls	r3, r3, #6
    666e:	460a      	mov	r2, r1
    6670:	f043 0301 	orr.w	r3, r3, #1
    6674:	4629      	mov	r1, r5
    6676:	f019 f9dc 	bl	1fa32 <log_2>
    667a:	e7a1      	b.n	65c0 <usbd_event_handler+0x5c>
			usbd_event_transfer_data(p_event);
    667c:	4630      	mov	r0, r6
    667e:	f7ff ff07 	bl	6490 <usbd_event_transfer_data>
	if (put_evt) {
    6682:	e79d      	b.n	65c0 <usbd_event_handler+0x5c>
		nrfx_usbd_setup_get(&drv_setup);
    6684:	4668      	mov	r0, sp
    6686:	f016 fe75 	bl	1d374 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != REQ_SET_ADDRESS)
    668a:	f89d 3001 	ldrb.w	r3, [sp, #1]
    668e:	2b05      	cmp	r3, #5
    6690:	d104      	bne.n	669c <usbd_event_handler+0x138>
		    || (REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    6692:	f89d 3000 	ldrb.w	r3, [sp]
    6696:	f013 0f60 	tst.w	r3, #96	; 0x60
    669a:	d091      	beq.n	65c0 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
    669c:	4b07      	ldr	r3, [pc, #28]	; (66bc <usbd_event_handler+0x158>)
    669e:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
    66a0:	2401      	movs	r4, #1
    66a2:	e774      	b.n	658e <usbd_event_handler+0x2a>
	switch (p_event->type) {
    66a4:	2402      	movs	r4, #2
    66a6:	e772      	b.n	658e <usbd_event_handler+0x2a>
    66a8:	00024d7c 	.word	0x00024d7c
    66ac:	00024c24 	.word	0x00024c24
    66b0:	00026d70 	.word	0x00026d70
    66b4:	20002600 	.word	0x20002600
    66b8:	00026d44 	.word	0x00026d44
    66bc:	2000278c 	.word	0x2000278c

000066c0 <usb_dc_power_event_handler>:
	switch (event) {
    66c0:	2802      	cmp	r0, #2
{
    66c2:	b510      	push	{r4, lr}
    66c4:	4601      	mov	r1, r0
    66c6:	d805      	bhi.n	66d4 <usb_dc_power_event_handler+0x14>
    66c8:	4b0f      	ldr	r3, [pc, #60]	; (6708 <usb_dc_power_event_handler+0x48>)
    66ca:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    66cc:	f7ff fe94 	bl	63f8 <usbd_evt_alloc>
	if (!ev) {
    66d0:	b960      	cbnz	r0, 66ec <usb_dc_power_event_handler+0x2c>
}
    66d2:	bd10      	pop	{r4, pc}
    66d4:	4a0d      	ldr	r2, [pc, #52]	; (670c <usb_dc_power_event_handler+0x4c>)
    66d6:	4b0e      	ldr	r3, [pc, #56]	; (6710 <usb_dc_power_event_handler+0x50>)
		LOG_ERR("Unknown USB power event %d", event);
    66d8:	480e      	ldr	r0, [pc, #56]	; (6714 <usb_dc_power_event_handler+0x54>)
    66da:	1ad2      	subs	r2, r2, r3
    66dc:	08d2      	lsrs	r2, r2, #3
    66de:	0192      	lsls	r2, r2, #6
}
    66e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unknown USB power event %d", event);
    66e4:	f042 0201 	orr.w	r2, r2, #1
    66e8:	f019 b98f 	b.w	1fa0a <log_1>
	ev->evt_type = USBD_EVT_POWER;
    66ec:	2200      	movs	r2, #0
    66ee:	7502      	strb	r2, [r0, #20]
	ev->evt.pwr_evt.state = new_state;
    66f0:	7304      	strb	r4, [r0, #12]
	usbd_evt_put(ev);
    66f2:	f7ff fd9f 	bl	6234 <usbd_evt_put>
	if (usbd_ctx.attached) {
    66f6:	4b08      	ldr	r3, [pc, #32]	; (6718 <usb_dc_power_event_handler+0x58>)
    66f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    66fc:	2b00      	cmp	r3, #0
    66fe:	d0e8      	beq.n	66d2 <usb_dc_power_event_handler+0x12>
}
    6700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
    6704:	f7ff bde4 	b.w	62d0 <usbd_work_schedule>
    6708:	00026f18 	.word	0x00026f18
    670c:	00024d7c 	.word	0x00024d7c
    6710:	00024c24 	.word	0x00024c24
    6714:	00026d90 	.word	0x00026d90
    6718:	20002600 	.word	0x20002600

0000671c <usbd_work_handler>:
{
    671c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6720:	4faa      	ldr	r7, [pc, #680]	; (69cc <usbd_work_handler+0x2b0>)
    6722:	4bab      	ldr	r3, [pc, #684]	; (69d0 <usbd_work_handler+0x2b4>)
    6724:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 69f4 <usbd_work_handler+0x2d8>
	return get_usbd_ctx()->ready;
    6728:	4caa      	ldr	r4, [pc, #680]	; (69d4 <usbd_work_handler+0x2b8>)
    672a:	1aff      	subs	r7, r7, r3
{
    672c:	4680      	mov	r8, r0
    672e:	08ff      	lsrs	r7, r7, #3
    6730:	2200      	movs	r2, #0
    6732:	2300      	movs	r3, #0
    6734:	4650      	mov	r0, sl
    6736:	f017 fbd5 	bl	1dee4 <z_impl_k_queue_get>
	while ((ev = usbd_evt_get()) != NULL) {
    673a:	4606      	mov	r6, r0
    673c:	b910      	cbnz	r0, 6744 <usbd_work_handler+0x28>
}
    673e:	b004      	add	sp, #16
    6740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return get_usbd_ctx()->ready;
    6744:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    6748:	7d31      	ldrb	r1, [r6, #20]
    674a:	f106 0904 	add.w	r9, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    674e:	b933      	cbnz	r3, 675e <usbd_work_handler+0x42>
    6750:	2900      	cmp	r1, #0
    6752:	f000 809f 	beq.w	6894 <usbd_work_handler+0x178>
	k_mem_pool_free(&ev->block);
    6756:	4648      	mov	r0, r9
    6758:	f01e f904 	bl	24964 <k_mem_pool_free>
}
    675c:	e7e8      	b.n	6730 <usbd_work_handler+0x14>
		switch (ev->evt_type) {
    675e:	2904      	cmp	r1, #4
    6760:	f200 8181 	bhi.w	6a66 <usbd_work_handler+0x34a>
    6764:	e8df f011 	tbh	[pc, r1, lsl #1]
    6768:	00050096 	.word	0x00050096
    676c:	0148011c 	.word	0x0148011c
    6770:	0169      	.short	0x0169
			if (!ctx->attached) {
    6772:	f818 3c04 	ldrb.w	r3, [r8, #-4]
    6776:	b93b      	cbnz	r3, 6788 <usbd_work_handler+0x6c>
    6778:	68f3      	ldr	r3, [r6, #12]
				LOG_ERR("not attached, EP 0x%02x event dropped",
    677a:	4897      	ldr	r0, [pc, #604]	; (69d8 <usbd_work_handler+0x2bc>)
    677c:	7a59      	ldrb	r1, [r3, #9]
    677e:	01ba      	lsls	r2, r7, #6
    6780:	f042 0201 	orr.w	r2, r2, #1
    6784:	f019 f941 	bl	1fa0a <log_1>
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    6788:	7c33      	ldrb	r3, [r6, #16]
    678a:	68f5      	ldr	r5, [r6, #12]
	switch (ep_evt->evt_type) {
    678c:	2b03      	cmp	r3, #3
    678e:	d8e2      	bhi.n	6756 <usbd_work_handler+0x3a>
    6790:	e8df f003 	tbb	[pc, r3]
    6794:	6c673c02 	.word	0x6c673c02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    6798:	69ae      	ldr	r6, [r5, #24]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    679a:	2208      	movs	r2, #8
    679c:	2100      	movs	r1, #0
    679e:	4630      	mov	r0, r6
    67a0:	f01a ffac 	bl	216fc <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    67a4:	4a8d      	ldr	r2, [pc, #564]	; (69dc <usbd_work_handler+0x2c0>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    67a6:	488e      	ldr	r0, [pc, #568]	; (69e0 <usbd_work_handler+0x2c4>)
    67a8:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    67ac:	7033      	strb	r3, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    67ae:	f8d2 3484 	ldr.w	r3, [r2, #1156]	; 0x484
    67b2:	7073      	strb	r3, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    67b4:	f8d2 3488 	ldr.w	r3, [r2, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    67b8:	f8d2 148c 	ldr.w	r1, [r2, #1164]	; 0x48c
    67bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    67c0:	8073      	strh	r3, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    67c2:	f8d2 3490 	ldr.w	r3, [r2, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    67c6:	f8d2 1494 	ldr.w	r1, [r2, #1172]	; 0x494
    67ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    67ce:	80b3      	strh	r3, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    67d0:	f8d2 3498 	ldr.w	r3, [r2, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    67d4:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
    67d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    67dc:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    67de:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    67e0:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    67e2:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    67e4:	f01a ff5f 	bl	216a6 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    67e8:	682b      	ldr	r3, [r5, #0]
    67ea:	7a68      	ldrb	r0, [r5, #9]
    67ec:	2100      	movs	r1, #0
    67ee:	4798      	blx	r3
	if ((REQTYPE_GET_DIR(usbd_setup->bmRequestType)
    67f0:	7833      	ldrb	r3, [r6, #0]
    67f2:	09db      	lsrs	r3, r3, #7
    67f4:	d106      	bne.n	6804 <usbd_work_handler+0xe8>
	    && (usbd_setup->wLength)) {
    67f6:	88f3      	ldrh	r3, [r6, #6]
    67f8:	b123      	cbz	r3, 6804 <usbd_work_handler+0xe8>
		ctx->ctrl_read_len = usbd_setup->wLength;
    67fa:	f8a4 32d0 	strh.w	r3, [r4, #720]	; 0x2d0
		nrfx_usbd_setup_data_clear();
    67fe:	f016 fddf 	bl	1d3c0 <nrfx_usbd_setup_data_clear>
    6802:	e7a8      	b.n	6756 <usbd_work_handler+0x3a>
		ctx->ctrl_read_len = 0U;
    6804:	2300      	movs	r3, #0
    6806:	f8a4 32d0 	strh.w	r3, [r4, #720]	; 0x2d0
    680a:	e7a4      	b.n	6756 <usbd_work_handler+0x3a>
	if (!ep_ctx->read_pending) {
    680c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    6810:	2b00      	cmp	r3, #0
    6812:	d0a0      	beq.n	6756 <usbd_work_handler+0x3a>
	if (!ep_ctx->read_complete) {
    6814:	f895 3020 	ldrb.w	r3, [r5, #32]
    6818:	2b00      	cmp	r3, #0
    681a:	d09c      	beq.n	6756 <usbd_work_handler+0x3a>
	ep_ctx->read_pending = false;
    681c:	2600      	movs	r6, #0
    681e:	f885 6021 	strb.w	r6, [r5, #33]	; 0x21
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    682a:	486e      	ldr	r0, [pc, #440]	; (69e4 <usbd_work_handler+0x2c8>)
	ep_ctx->read_complete = false;
    682c:	f885 6020 	strb.w	r6, [r5, #32]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6830:	f019 fdd2 	bl	203d8 <k_mutex_lock.constprop.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    6834:	69ab      	ldr	r3, [r5, #24]
    6836:	9301      	str	r3, [sp, #4]
    6838:	686b      	ldr	r3, [r5, #4]
    683a:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    683e:	a901      	add	r1, sp, #4
    6840:	7a68      	ldrb	r0, [r5, #9]
    6842:	f016 fbb9 	bl	1cfb8 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    6846:	4b68      	ldr	r3, [pc, #416]	; (69e8 <usbd_work_handler+0x2cc>)
    6848:	4298      	cmp	r0, r3
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    684a:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    684c:	d005      	beq.n	685a <usbd_work_handler+0x13e>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    684e:	01ba      	lsls	r2, r7, #6
    6850:	4866      	ldr	r0, [pc, #408]	; (69ec <usbd_work_handler+0x2d0>)
    6852:	f042 0201 	orr.w	r2, r2, #1
    6856:	f019 f8d8 	bl	1fa0a <log_1>
	k_mutex_unlock(&ctx->drv_lock);
    685a:	4862      	ldr	r0, [pc, #392]	; (69e4 <usbd_work_handler+0x2c8>)
    685c:	f019 fdba 	bl	203d4 <k_mutex_unlock>
    6860:	e779      	b.n	6756 <usbd_work_handler+0x3a>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    6862:	682b      	ldr	r3, [r5, #0]
    6864:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    6866:	7a68      	ldrb	r0, [r5, #9]
    6868:	4798      	blx	r3
		break;
    686a:	e774      	b.n	6756 <usbd_work_handler+0x3a>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    686c:	7aab      	ldrb	r3, [r5, #10]
    686e:	b973      	cbnz	r3, 688e <usbd_work_handler+0x172>
    6870:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    6874:	b95b      	cbnz	r3, 688e <usbd_work_handler+0x172>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    687a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    687e:	4859      	ldr	r0, [pc, #356]	; (69e4 <usbd_work_handler+0x2c8>)
    6880:	f019 fdaa 	bl	203d8 <k_mutex_lock.constprop.0>
			nrfx_usbd_setup_clear();
    6884:	f016 fdc8 	bl	1d418 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    6888:	4856      	ldr	r0, [pc, #344]	; (69e4 <usbd_work_handler+0x2c8>)
    688a:	f019 fda3 	bl	203d4 <k_mutex_unlock>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    688e:	682b      	ldr	r3, [r5, #0]
    6890:	2102      	movs	r1, #2
    6892:	e7e8      	b.n	6866 <usbd_work_handler+0x14a>
	switch (pwr_evt->state) {
    6894:	7b32      	ldrb	r2, [r6, #12]
    6896:	2a04      	cmp	r2, #4
    6898:	f63f af5d 	bhi.w	6756 <usbd_work_handler+0x3a>
    689c:	e8df f002 	tbb	[pc, r2]
    68a0:	6925035b 	.word	0x6925035b
    68a4:	75          	.byte	0x75
    68a5:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    68a6:	f016 fb3b 	bl	1cf20 <nrfx_usbd_is_enabled>
    68aa:	4605      	mov	r5, r0
    68ac:	2800      	cmp	r0, #0
    68ae:	f47f af52 	bne.w	6756 <usbd_work_handler+0x3a>
			nrfx_usbd_enable();
    68b2:	f016 fa7f 	bl	1cdb4 <nrfx_usbd_enable>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    68b6:	f3bf 8f5b 	dmb	ish
    68ba:	494d      	ldr	r1, [pc, #308]	; (69f0 <usbd_work_handler+0x2d4>)
    68bc:	2301      	movs	r3, #1
    68be:	e851 2f00 	ldrex	r2, [r1]
    68c2:	2a00      	cmp	r2, #0
    68c4:	d103      	bne.n	68ce <usbd_work_handler+0x1b2>
    68c6:	e841 3000 	strex	r0, r3, [r1]
    68ca:	2800      	cmp	r0, #0
    68cc:	d1f7      	bne.n	68be <usbd_work_handler+0x1a2>
    68ce:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    68d2:	f47f af40 	bne.w	6756 <usbd_work_handler+0x3a>
    68d6:	f841 5c10 	str.w	r5, [r1, #-16]
    68da:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    68de:	69e0      	ldr	r0, [r4, #28]
    68e0:	6163      	str	r3, [r4, #20]
    68e2:	3914      	subs	r1, #20
    68e4:	f018 fc32 	bl	1f14c <onoff_request>
    68e8:	e735      	b.n	6756 <usbd_work_handler+0x3a>
			usbd_work_process_pwr_events(&ev->evt.pwr_evt);
    68ea:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    68ec:	f065 007f 	orn	r0, r5, #127	; 0x7f
    68f0:	b2c0      	uxtb	r0, r0
    68f2:	f7ff fc75 	bl	61e0 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    68f6:	7a03      	ldrb	r3, [r0, #8]
    68f8:	b113      	cbz	r3, 6900 <usbd_work_handler+0x1e4>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    68fa:	7a40      	ldrb	r0, [r0, #9]
    68fc:	f016 ff7e 	bl	1d7fc <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    6900:	3501      	adds	r5, #1
    6902:	2d08      	cmp	r5, #8
    6904:	d1f2      	bne.n	68ec <usbd_work_handler+0x1d0>
		if (ep_ctx->cfg.en) {
    6906:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    690a:	b11b      	cbz	r3, 6914 <usbd_work_handler+0x1f8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    690c:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
    6910:	f016 ff74 	bl	1d7fc <nrfx_usbd_ep_enable>
			usbd_work_process_pwr_events(&ev->evt.pwr_evt);
    6914:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    6916:	b2e8      	uxtb	r0, r5
    6918:	f7ff fc62 	bl	61e0 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    691c:	7a03      	ldrb	r3, [r0, #8]
    691e:	b113      	cbz	r3, 6926 <usbd_work_handler+0x20a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    6920:	7a40      	ldrb	r0, [r0, #9]
    6922:	f016 ff6b 	bl	1d7fc <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    6926:	3501      	adds	r5, #1
    6928:	2d08      	cmp	r5, #8
    692a:	d1f4      	bne.n	6916 <usbd_work_handler+0x1fa>
		if (ep_ctx->cfg.en) {
    692c:	f894 32b4 	ldrb.w	r3, [r4, #692]	; 0x2b4
    6930:	b11b      	cbz	r3, 693a <usbd_work_handler+0x21e>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    6932:	f894 02b5 	ldrb.w	r0, [r4, #693]	; 0x2b5
    6936:	f016 ff61 	bl	1d7fc <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    693a:	2001      	movs	r0, #1
    693c:	f016 fad2 	bl	1cee4 <nrfx_usbd_start>
		ctx->ready = true;
    6940:	2301      	movs	r3, #1
    6942:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    6946:	6823      	ldr	r3, [r4, #0]
    6948:	2b00      	cmp	r3, #0
    694a:	f43f af04 	beq.w	6756 <usbd_work_handler+0x3a>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    694e:	2100      	movs	r1, #0
    6950:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
    6952:	4798      	blx	r3
    6954:	e6ff      	b.n	6756 <usbd_work_handler+0x3a>
		ctx->ready = false;
    6956:	2500      	movs	r5, #0
    6958:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    695c:	f016 feda 	bl	1d714 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    6960:	f7ff fc90 	bl	6284 <hfxo_stop.constprop.0>
		if (ctx->status_cb) {
    6964:	6823      	ldr	r3, [r4, #0]
    6966:	2b00      	cmp	r3, #0
    6968:	f43f aef5 	beq.w	6756 <usbd_work_handler+0x3a>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    696c:	4629      	mov	r1, r5
    696e:	2004      	movs	r0, #4
    6970:	e7ef      	b.n	6952 <usbd_work_handler+0x236>
		if (dev_ready()) {
    6972:	2b00      	cmp	r3, #0
    6974:	f43f aeef 	beq.w	6756 <usbd_work_handler+0x3a>
			nrfx_usbd_suspend();
    6978:	f016 fee4 	bl	1d744 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    697c:	6823      	ldr	r3, [r4, #0]
    697e:	2b00      	cmp	r3, #0
    6980:	f43f aee9 	beq.w	6756 <usbd_work_handler+0x3a>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    6984:	2100      	movs	r1, #0
    6986:	2005      	movs	r0, #5
    6988:	e7e3      	b.n	6952 <usbd_work_handler+0x236>
		if (ctx->status_cb && dev_ready()) {
    698a:	6822      	ldr	r2, [r4, #0]
    698c:	2a00      	cmp	r2, #0
    698e:	f43f aee2 	beq.w	6756 <usbd_work_handler+0x3a>
    6992:	2b00      	cmp	r3, #0
    6994:	f43f aedf 	beq.w	6756 <usbd_work_handler+0x3a>
			ctx->status_cb(USB_DC_RESUME, NULL);
    6998:	2100      	movs	r1, #0
    699a:	2006      	movs	r0, #6
    699c:	4790      	blx	r2
    699e:	e6da      	b.n	6756 <usbd_work_handler+0x3a>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    69a0:	f108 050c 	add.w	r5, r8, #12
    69a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    69a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    69ac:	4628      	mov	r0, r5
    69ae:	f019 fd13 	bl	203d8 <k_mutex_lock.constprop.0>
			eps_ctx_init();
    69b2:	f7ff fca5 	bl	6300 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    69b6:	4628      	mov	r0, r5
    69b8:	f019 fd0c 	bl	203d4 <k_mutex_unlock>
			if (ctx->status_cb) {
    69bc:	f858 3c28 	ldr.w	r3, [r8, #-40]
    69c0:	2b00      	cmp	r3, #0
    69c2:	f43f aec8 	beq.w	6756 <usbd_work_handler+0x3a>
				ctx->status_cb(USB_DC_RESET, NULL);
    69c6:	2100      	movs	r1, #0
    69c8:	2001      	movs	r0, #1
    69ca:	e7c2      	b.n	6952 <usbd_work_handler+0x236>
    69cc:	00024d7c 	.word	0x00024d7c
    69d0:	00024c24 	.word	0x00024c24
    69d4:	20002600 	.word	0x20002600
    69d8:	00026dab 	.word	0x00026dab
    69dc:	40027000 	.word	0x40027000
    69e0:	20002604 	.word	0x20002604
    69e4:	20002634 	.word	0x20002634
    69e8:	0bad0000 	.word	0x0bad0000
    69ec:	00026dd1 	.word	0x00026dd1
    69f0:	20002620 	.word	0x20002620
    69f4:	20000908 	.word	0x20000908
	if (ep_ctx->cfg.en) {
    69f8:	f894 32b4 	ldrb.w	r3, [r4, #692]	; 0x2b4
    69fc:	b163      	cbz	r3, 6a18 <usbd_work_handler+0x2fc>
		ep_ctx->read_pending = true;
    69fe:	2501      	movs	r5, #1
    6a00:	f884 52cd 	strb.w	r5, [r4, #717]	; 0x2cd
		ep_ctx->read_complete = true;
    6a04:	f884 52cc 	strb.w	r5, [r4, #716]	; 0x2cc
		ev = usbd_evt_alloc();
    6a08:	f7ff fcf6 	bl	63f8 <usbd_evt_alloc>
		if (!ev) {
    6a0c:	b960      	cbnz	r0, 6a28 <usbd_work_handler+0x30c>
			LOG_ERR("Failed to alloc evt");
    6a0e:	01b9      	lsls	r1, r7, #6
    6a10:	4818      	ldr	r0, [pc, #96]	; (6a74 <usbd_work_handler+0x358>)
    6a12:	4329      	orrs	r1, r5
    6a14:	f018 ffec 	bl	1f9f0 <log_0>
			if (ctx->status_cb) {
    6a18:	f858 3c28 	ldr.w	r3, [r8, #-40]
    6a1c:	2b00      	cmp	r3, #0
    6a1e:	f43f ae9a 	beq.w	6756 <usbd_work_handler+0x3a>
				ctx->status_cb(USB_DC_SOF, NULL);
    6a22:	2100      	movs	r1, #0
    6a24:	200a      	movs	r0, #10
    6a26:	e794      	b.n	6952 <usbd_work_handler+0x236>
		ev->evt.ep_evt.ep = ep_ctx;
    6a28:	4a13      	ldr	r2, [pc, #76]	; (6a78 <usbd_work_handler+0x35c>)
		ev->evt_type = USBD_EVT_EP;
    6a2a:	7505      	strb	r5, [r0, #20]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    6a2c:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.ep = ep_ctx;
    6a2e:	60c2      	str	r2, [r0, #12]
		usbd_evt_put(ev);
    6a30:	f7ff fc00 	bl	6234 <usbd_evt_put>
		usbd_work_schedule();
    6a34:	f7ff fc4c 	bl	62d0 <usbd_work_schedule>
    6a38:	e7ee      	b.n	6a18 <usbd_work_handler+0x2fc>
				LOG_ERR("USBD event queue full!");
    6a3a:	01b9      	lsls	r1, r7, #6
    6a3c:	f041 0101 	orr.w	r1, r1, #1
    6a40:	480e      	ldr	r0, [pc, #56]	; (6a7c <usbd_work_handler+0x360>)
    6a42:	f018 ffd5 	bl	1f9f0 <log_0>
	nrfx_power_usbevt_disable();
    6a46:	f01d f9d4 	bl	23df2 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    6a4a:	f016 fe63 	bl	1d714 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    6a4e:	f016 f9a7 	bl	1cda0 <nrfx_usbd_uninit>
	usbd_evt_flush();
    6a52:	f7ff fcc1 	bl	63d8 <usbd_evt_flush>
	ret = eps_ctx_init();
    6a56:	f7ff fc53 	bl	6300 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    6a5a:	f01d f9c3 	bl	23de4 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    6a5e:	4808      	ldr	r0, [pc, #32]	; (6a80 <usbd_work_handler+0x364>)
    6a60:	f016 fa68 	bl	1cf34 <nrfx_usbd_init>
}
    6a64:	e677      	b.n	6756 <usbd_work_handler+0x3a>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    6a66:	01ba      	lsls	r2, r7, #6
    6a68:	4806      	ldr	r0, [pc, #24]	; (6a84 <usbd_work_handler+0x368>)
    6a6a:	f042 0201 	orr.w	r2, r2, #1
    6a6e:	f018 ffcc 	bl	1fa0a <log_1>
    6a72:	e670      	b.n	6756 <usbd_work_handler+0x3a>
    6a74:	00026df7 	.word	0x00026df7
    6a78:	200028ac 	.word	0x200028ac
    6a7c:	00026e0b 	.word	0x00026e0b
    6a80:	00006565 	.word	0x00006565
    6a84:	00026e22 	.word	0x00026e22

00006a88 <usb_dc_attach>:
{
    6a88:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    6a8a:	4d1a      	ldr	r5, [pc, #104]	; (6af4 <usb_dc_attach+0x6c>)
    6a8c:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    6a90:	bb5c      	cbnz	r4, 6aea <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
    6a92:	f105 0034 	add.w	r0, r5, #52	; 0x34
    6a96:	f01d fb0f 	bl	240b8 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    6a9a:	4620      	mov	r0, r4
    6a9c:	f7ff fae6 	bl	606c <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6aa0:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
    6aa2:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6aa4:	2101      	movs	r1, #1
    6aa6:	2027      	movs	r0, #39	; 0x27
    6aa8:	f000 fe82 	bl	77b0 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    6aac:	4812      	ldr	r0, [pc, #72]	; (6af8 <usb_dc_attach+0x70>)
    6aae:	f016 fa41 	bl	1cf34 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    6ab2:	4b12      	ldr	r3, [pc, #72]	; (6afc <usb_dc_attach+0x74>)
    6ab4:	4298      	cmp	r0, r3
    6ab6:	d11a      	bne.n	6aee <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
    6ab8:	f01d f994 	bl	23de4 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    6abc:	f7ff fc20 	bl	6300 <eps_ctx_init>
	if (ret == 0) {
    6ac0:	4604      	mov	r4, r0
    6ac2:	b910      	cbnz	r0, 6aca <usb_dc_attach+0x42>
		ctx->attached = true;
    6ac4:	2301      	movs	r3, #1
    6ac6:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
    6aca:	4b0d      	ldr	r3, [pc, #52]	; (6b00 <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    6acc:	681b      	ldr	r3, [r3, #0]
    6ace:	b10b      	cbz	r3, 6ad4 <usb_dc_attach+0x4c>
		usbd_work_schedule();
    6ad0:	f7ff fbfe 	bl	62d0 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    6ad4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6ad8:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    6adc:	07db      	lsls	r3, r3, #31
    6ade:	d502      	bpl.n	6ae6 <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    6ae0:	2000      	movs	r0, #0
    6ae2:	f7ff fded 	bl	66c0 <usb_dc_power_event_handler>
}
    6ae6:	4620      	mov	r0, r4
    6ae8:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    6aea:	2400      	movs	r4, #0
    6aec:	e7fb      	b.n	6ae6 <usb_dc_attach+0x5e>
		return -EIO;
    6aee:	f06f 0404 	mvn.w	r4, #4
    6af2:	e7f8      	b.n	6ae6 <usb_dc_attach+0x5e>
    6af4:	20002600 	.word	0x20002600
    6af8:	00006565 	.word	0x00006565
    6afc:	0bad0000 	.word	0x0bad0000
    6b00:	20000908 	.word	0x20000908

00006b04 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    6b04:	4b07      	ldr	r3, [pc, #28]	; (6b24 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    6b06:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    6b0a:	b13a      	cbz	r2, 6b1c <usb_dc_set_address+0x18>
    6b0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6b10:	2b00      	cmp	r3, #0
	return 0;
    6b12:	bf0c      	ite	eq
    6b14:	f06f 0012 	mvneq.w	r0, #18
    6b18:	2000      	movne	r0, #0
    6b1a:	4770      	bx	lr
		return -ENODEV;
    6b1c:	f06f 0012 	mvn.w	r0, #18
}
    6b20:	4770      	bx	lr
    6b22:	bf00      	nop
    6b24:	20002600 	.word	0x20002600

00006b28 <usb_dc_ep_check_cap>:
{
    6b28:	b508      	push	{r3, lr}
    6b2a:	4603      	mov	r3, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    6b2c:	7802      	ldrb	r2, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    6b2e:	791b      	ldrb	r3, [r3, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    6b30:	f002 000f 	and.w	r0, r2, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    6b34:	b96b      	cbnz	r3, 6b52 <usb_dc_ep_check_cap+0x2a>
    6b36:	b158      	cbz	r0, 6b50 <usb_dc_ep_check_cap+0x28>
    6b38:	4913      	ldr	r1, [pc, #76]	; (6b88 <usb_dc_ep_check_cap+0x60>)
    6b3a:	4b14      	ldr	r3, [pc, #80]	; (6b8c <usb_dc_ep_check_cap+0x64>)
		LOG_ERR("invalid endpoint configuration");
    6b3c:	4814      	ldr	r0, [pc, #80]	; (6b90 <usb_dc_ep_check_cap+0x68>)
    6b3e:	1ac9      	subs	r1, r1, r3
    6b40:	08c9      	lsrs	r1, r1, #3
    6b42:	0189      	lsls	r1, r1, #6
    6b44:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("invalid endpoint index/address");
    6b48:	f018 ff52 	bl	1f9f0 <log_0>
		return -1;
    6b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    6b50:	bd08      	pop	{r3, pc}
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    6b52:	2808      	cmp	r0, #8
    6b54:	d908      	bls.n	6b68 <usb_dc_ep_check_cap+0x40>
    6b56:	490c      	ldr	r1, [pc, #48]	; (6b88 <usb_dc_ep_check_cap+0x60>)
    6b58:	4b0c      	ldr	r3, [pc, #48]	; (6b8c <usb_dc_ep_check_cap+0x64>)
		LOG_ERR("invalid endpoint index/address");
    6b5a:	480e      	ldr	r0, [pc, #56]	; (6b94 <usb_dc_ep_check_cap+0x6c>)
    6b5c:	1ac9      	subs	r1, r1, r3
    6b5e:	08c9      	lsrs	r1, r1, #3
    6b60:	0189      	lsls	r1, r1, #6
    6b62:	f041 0101 	orr.w	r1, r1, #1
    6b66:	e7ef      	b.n	6b48 <usb_dc_ep_check_cap+0x20>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    6b68:	2b01      	cmp	r3, #1
    6b6a:	d10a      	bne.n	6b82 <usb_dc_ep_check_cap+0x5a>
    6b6c:	0713      	lsls	r3, r2, #28
    6b6e:	d408      	bmi.n	6b82 <usb_dc_ep_check_cap+0x5a>
    6b70:	4905      	ldr	r1, [pc, #20]	; (6b88 <usb_dc_ep_check_cap+0x60>)
    6b72:	4b06      	ldr	r3, [pc, #24]	; (6b8c <usb_dc_ep_check_cap+0x64>)
		LOG_WRN("invalid endpoint type");
    6b74:	4808      	ldr	r0, [pc, #32]	; (6b98 <usb_dc_ep_check_cap+0x70>)
    6b76:	1ac9      	subs	r1, r1, r3
    6b78:	08c9      	lsrs	r1, r1, #3
    6b7a:	0189      	lsls	r1, r1, #6
    6b7c:	f041 0102 	orr.w	r1, r1, #2
    6b80:	e7e2      	b.n	6b48 <usb_dc_ep_check_cap+0x20>
	return 0;
    6b82:	2000      	movs	r0, #0
    6b84:	e7e4      	b.n	6b50 <usb_dc_ep_check_cap+0x28>
    6b86:	bf00      	nop
    6b88:	00024d7c 	.word	0x00024d7c
    6b8c:	00024c24 	.word	0x00024c24
    6b90:	00026e39 	.word	0x00026e39
    6b94:	00026e58 	.word	0x00026e58
    6b98:	00026e77 	.word	0x00026e77

00006b9c <usb_dc_ep_configure>:
	return get_usbd_ctx()->attached;
    6b9c:	4b14      	ldr	r3, [pc, #80]	; (6bf0 <usb_dc_ep_configure+0x54>)
	if (!dev_attached()) {
    6b9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    6ba2:	b510      	push	{r4, lr}
    6ba4:	4601      	mov	r1, r0
	if (!dev_attached()) {
    6ba6:	b303      	cbz	r3, 6bea <usb_dc_ep_configure+0x4e>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    6ba8:	7804      	ldrb	r4, [r0, #0]
    6baa:	4620      	mov	r0, r4
    6bac:	f7ff fb18 	bl	61e0 <endpoint_ctx>
	if (!ep_ctx) {
    6bb0:	b198      	cbz	r0, 6bda <usb_dc_ep_configure+0x3e>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    6bb2:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    6bb4:	790b      	ldrb	r3, [r1, #4]
    6bb6:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    6bb8:	8849      	ldrh	r1, [r1, #2]
    6bba:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    6bbc:	0723      	lsls	r3, r4, #28
    6bbe:	d40f      	bmi.n	6be0 <usb_dc_ep_configure+0x44>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    6bc0:	1e4b      	subs	r3, r1, #1
    6bc2:	420b      	tst	r3, r1
    6bc4:	d00c      	beq.n	6be0 <usb_dc_ep_configure+0x44>
    6bc6:	490b      	ldr	r1, [pc, #44]	; (6bf4 <usb_dc_ep_configure+0x58>)
    6bc8:	4b0b      	ldr	r3, [pc, #44]	; (6bf8 <usb_dc_ep_configure+0x5c>)
			LOG_ERR("EP max packet size must be a power of 2");
    6bca:	480c      	ldr	r0, [pc, #48]	; (6bfc <usb_dc_ep_configure+0x60>)
    6bcc:	1ac9      	subs	r1, r1, r3
    6bce:	08c9      	lsrs	r1, r1, #3
    6bd0:	0189      	lsls	r1, r1, #6
    6bd2:	f041 0101 	orr.w	r1, r1, #1
    6bd6:	f018 ff0b 	bl	1f9f0 <log_0>
		return -EINVAL;
    6bda:	f06f 0015 	mvn.w	r0, #21
    6bde:	e003      	b.n	6be8 <usb_dc_ep_configure+0x4c>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    6be0:	4620      	mov	r0, r4
    6be2:	f01d f98b 	bl	23efc <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    6be6:	2000      	movs	r0, #0
}
    6be8:	bd10      	pop	{r4, pc}
		return -ENODEV;
    6bea:	f06f 0012 	mvn.w	r0, #18
    6bee:	e7fb      	b.n	6be8 <usb_dc_ep_configure+0x4c>
    6bf0:	20002600 	.word	0x20002600
    6bf4:	00024d7c 	.word	0x00024d7c
    6bf8:	00024c24 	.word	0x00024c24
    6bfc:	00026e8d 	.word	0x00026e8d

00006c00 <usb_dc_ep_set_stall>:
	return get_usbd_ctx()->attached;
    6c00:	4b17      	ldr	r3, [pc, #92]	; (6c60 <usb_dc_ep_set_stall+0x60>)
	if (!dev_attached() || !dev_ready()) {
    6c02:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6c06:	b510      	push	{r4, lr}
    6c08:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    6c0a:	b332      	cbz	r2, 6c5a <usb_dc_ep_set_stall+0x5a>
    6c0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6c10:	b31b      	cbz	r3, 6c5a <usb_dc_ep_set_stall+0x5a>
	ep_ctx = endpoint_ctx(ep);
    6c12:	f7ff fae5 	bl	61e0 <endpoint_ctx>
	if (!ep_ctx) {
    6c16:	4604      	mov	r4, r0
    6c18:	b1e0      	cbz	r0, 6c54 <usb_dc_ep_set_stall+0x54>
	switch (ep_ctx->cfg.type) {
    6c1a:	7a83      	ldrb	r3, [r0, #10]
    6c1c:	2b01      	cmp	r3, #1
    6c1e:	d00f      	beq.n	6c40 <usb_dc_ep_set_stall+0x40>
    6c20:	d907      	bls.n	6c32 <usb_dc_ep_set_stall+0x32>
    6c22:	3b02      	subs	r3, #2
    6c24:	2b01      	cmp	r3, #1
    6c26:	d907      	bls.n	6c38 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    6c28:	69a3      	ldr	r3, [r4, #24]
    6c2a:	61e3      	str	r3, [r4, #28]
	ep_ctx->buf.len = 0U;
    6c2c:	2000      	movs	r0, #0
    6c2e:	60e0      	str	r0, [r4, #12]
}
    6c30:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
    6c32:	f016 fbf9 	bl	1d428 <nrfx_usbd_setup_stall>
		break;
    6c36:	e7f7      	b.n	6c28 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    6c38:	4608      	mov	r0, r1
    6c3a:	f016 fb6d 	bl	1d318 <nrfx_usbd_ep_stall>
		break;
    6c3e:	e7f3      	b.n	6c28 <usb_dc_ep_set_stall+0x28>
    6c40:	4908      	ldr	r1, [pc, #32]	; (6c64 <usb_dc_ep_set_stall+0x64>)
    6c42:	4b09      	ldr	r3, [pc, #36]	; (6c68 <usb_dc_ep_set_stall+0x68>)
		LOG_ERR("STALL unsupported on ISO endpoint");
    6c44:	4809      	ldr	r0, [pc, #36]	; (6c6c <usb_dc_ep_set_stall+0x6c>)
    6c46:	1ac9      	subs	r1, r1, r3
    6c48:	08c9      	lsrs	r1, r1, #3
    6c4a:	0189      	lsls	r1, r1, #6
    6c4c:	f041 0101 	orr.w	r1, r1, #1
    6c50:	f018 fece 	bl	1f9f0 <log_0>
		return -EINVAL;
    6c54:	f06f 0015 	mvn.w	r0, #21
    6c58:	e7ea      	b.n	6c30 <usb_dc_ep_set_stall+0x30>
		return -ENODEV;
    6c5a:	f06f 0012 	mvn.w	r0, #18
    6c5e:	e7e7      	b.n	6c30 <usb_dc_ep_set_stall+0x30>
    6c60:	20002600 	.word	0x20002600
    6c64:	00024d7c 	.word	0x00024d7c
    6c68:	00024c24 	.word	0x00024c24
    6c6c:	00026eb5 	.word	0x00026eb5

00006c70 <usb_dc_ep_clear_stall>:
{
    6c70:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6c72:	4b0e      	ldr	r3, [pc, #56]	; (6cac <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    6c74:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6c78:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    6c7a:	b182      	cbz	r2, 6c9e <usb_dc_ep_clear_stall+0x2e>
    6c7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6c80:	b16b      	cbz	r3, 6c9e <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    6c82:	f7ff faad 	bl	61e0 <endpoint_ctx>
	if (!ep_ctx) {
    6c86:	b168      	cbz	r0, 6ca4 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    6c88:	f015 0408 	ands.w	r4, r5, #8
    6c8c:	d10a      	bne.n	6ca4 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    6c8e:	4628      	mov	r0, r5
    6c90:	f016 fb64 	bl	1d35c <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    6c94:	4628      	mov	r0, r5
    6c96:	f016 fe03 	bl	1d8a0 <nrfx_usbd_ep_stall_clear>
	return 0;
    6c9a:	4620      	mov	r0, r4
}
    6c9c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    6c9e:	f06f 0012 	mvn.w	r0, #18
    6ca2:	e7fb      	b.n	6c9c <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    6ca4:	f06f 0015 	mvn.w	r0, #21
    6ca8:	e7f8      	b.n	6c9c <usb_dc_ep_clear_stall+0x2c>
    6caa:	bf00      	nop
    6cac:	20002600 	.word	0x20002600

00006cb0 <usb_dc_ep_is_stalled>:
{
    6cb0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6cb2:	4b0c      	ldr	r3, [pc, #48]	; (6ce4 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    6cb4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6cb8:	4605      	mov	r5, r0
    6cba:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    6cbc:	b162      	cbz	r2, 6cd8 <usb_dc_ep_is_stalled+0x28>
    6cbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6cc2:	b14b      	cbz	r3, 6cd8 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    6cc4:	f7ff fa8c 	bl	61e0 <endpoint_ctx>
	if (!ep_ctx) {
    6cc8:	b148      	cbz	r0, 6cde <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    6cca:	b141      	cbz	r1, 6cde <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    6ccc:	4628      	mov	r0, r5
    6cce:	f016 fb2b 	bl	1d328 <nrfx_usbd_ep_stall_check>
    6cd2:	7020      	strb	r0, [r4, #0]
	return 0;
    6cd4:	2000      	movs	r0, #0
}
    6cd6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    6cd8:	f06f 0012 	mvn.w	r0, #18
    6cdc:	e7fb      	b.n	6cd6 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    6cde:	f06f 0015 	mvn.w	r0, #21
    6ce2:	e7f8      	b.n	6cd6 <usb_dc_ep_is_stalled+0x26>
    6ce4:	20002600 	.word	0x20002600

00006ce8 <usb_dc_ep_enable>:
{
    6ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    6cea:	4e13      	ldr	r6, [pc, #76]	; (6d38 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    6cec:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
{
    6cf0:	4604      	mov	r4, r0
	if (!dev_attached()) {
    6cf2:	b1ba      	cbz	r2, 6d24 <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    6cf4:	f7ff fa74 	bl	61e0 <endpoint_ctx>
	if (!ep_ctx) {
    6cf8:	4605      	mov	r5, r0
    6cfa:	b1b0      	cbz	r0, 6d2a <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    6cfc:	0723      	lsls	r3, r4, #28
    6cfe:	d405      	bmi.n	6d0c <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    6d00:	4620      	mov	r0, r4
    6d02:	f016 fb2b 	bl	1d35c <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    6d06:	4620      	mov	r0, r4
    6d08:	f016 fdca 	bl	1d8a0 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    6d0c:	7a2f      	ldrb	r7, [r5, #8]
    6d0e:	b97f      	cbnz	r7, 6d30 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
    6d10:	f896 0025 	ldrb.w	r0, [r6, #37]	; 0x25
	ep_ctx->cfg.en = true;
    6d14:	2301      	movs	r3, #1
    6d16:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    6d18:	b118      	cbz	r0, 6d22 <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    6d1a:	4620      	mov	r0, r4
    6d1c:	f016 fd6e 	bl	1d7fc <nrfx_usbd_ep_enable>
	return 0;
    6d20:	4638      	mov	r0, r7
}
    6d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    6d24:	f06f 0012 	mvn.w	r0, #18
    6d28:	e7fb      	b.n	6d22 <usb_dc_ep_enable+0x3a>
		return -EINVAL;
    6d2a:	f06f 0015 	mvn.w	r0, #21
    6d2e:	e7f8      	b.n	6d22 <usb_dc_ep_enable+0x3a>
		return -EALREADY;
    6d30:	f06f 0044 	mvn.w	r0, #68	; 0x44
    6d34:	e7f5      	b.n	6d22 <usb_dc_ep_enable+0x3a>
    6d36:	bf00      	nop
    6d38:	20002600 	.word	0x20002600

00006d3c <usb_dc_ep_disable>:
	return get_usbd_ctx()->attached;
    6d3c:	4b0e      	ldr	r3, [pc, #56]	; (6d78 <usb_dc_ep_disable+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    6d3e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6d42:	b510      	push	{r4, lr}
    6d44:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    6d46:	b172      	cbz	r2, 6d66 <usb_dc_ep_disable+0x2a>
    6d48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6d4c:	b15b      	cbz	r3, 6d66 <usb_dc_ep_disable+0x2a>
	ep_ctx = endpoint_ctx(ep);
    6d4e:	f7ff fa47 	bl	61e0 <endpoint_ctx>
	if (!ep_ctx) {
    6d52:	4604      	mov	r4, r0
    6d54:	b150      	cbz	r0, 6d6c <usb_dc_ep_disable+0x30>
	if (!ep_ctx->cfg.en) {
    6d56:	7a03      	ldrb	r3, [r0, #8]
    6d58:	b15b      	cbz	r3, 6d72 <usb_dc_ep_disable+0x36>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    6d5a:	4608      	mov	r0, r1
    6d5c:	f016 fd22 	bl	1d7a4 <nrfx_usbd_ep_disable>
	ep_ctx->cfg.en = false;
    6d60:	2000      	movs	r0, #0
    6d62:	7220      	strb	r0, [r4, #8]
}
    6d64:	bd10      	pop	{r4, pc}
		return -ENODEV;
    6d66:	f06f 0012 	mvn.w	r0, #18
    6d6a:	e7fb      	b.n	6d64 <usb_dc_ep_disable+0x28>
		return -EINVAL;
    6d6c:	f06f 0015 	mvn.w	r0, #21
    6d70:	e7f8      	b.n	6d64 <usb_dc_ep_disable+0x28>
		return -EALREADY;
    6d72:	f06f 0044 	mvn.w	r0, #68	; 0x44
    6d76:	e7f5      	b.n	6d64 <usb_dc_ep_disable+0x28>
    6d78:	20002600 	.word	0x20002600

00006d7c <usb_dc_ep_write>:
{
    6d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->attached;
    6d80:	f8df 8128 	ldr.w	r8, [pc, #296]	; 6eac <usb_dc_ep_write+0x130>
{
    6d84:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
    6d86:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
    6d8a:	4607      	mov	r7, r0
    6d8c:	4689      	mov	r9, r1
    6d8e:	4616      	mov	r6, r2
    6d90:	46c2      	mov	sl, r8
	if (!dev_attached() || !dev_ready()) {
    6d92:	2b00      	cmp	r3, #0
    6d94:	d07a      	beq.n	6e8c <usb_dc_ep_write+0x110>
    6d96:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
    6d9a:	2b00      	cmp	r3, #0
    6d9c:	d076      	beq.n	6e8c <usb_dc_ep_write+0x110>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    6d9e:	0603      	lsls	r3, r0, #24
    6da0:	d510      	bpl.n	6dc4 <usb_dc_ep_write+0x48>
	ep_ctx = endpoint_ctx(ep);
    6da2:	f7ff fa1d 	bl	61e0 <endpoint_ctx>
	if (!ep_ctx) {
    6da6:	4605      	mov	r5, r0
    6da8:	b160      	cbz	r0, 6dc4 <usb_dc_ep_write+0x48>
	if (!ep_ctx->cfg.en) {
    6daa:	7a03      	ldrb	r3, [r0, #8]
    6dac:	b96b      	cbnz	r3, 6dca <usb_dc_ep_write+0x4e>
    6dae:	4a39      	ldr	r2, [pc, #228]	; (6e94 <usb_dc_ep_write+0x118>)
    6db0:	4b39      	ldr	r3, [pc, #228]	; (6e98 <usb_dc_ep_write+0x11c>)
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    6db2:	483a      	ldr	r0, [pc, #232]	; (6e9c <usb_dc_ep_write+0x120>)
    6db4:	1ad2      	subs	r2, r2, r3
    6db6:	08d2      	lsrs	r2, r2, #3
    6db8:	0192      	lsls	r2, r2, #6
    6dba:	f042 0201 	orr.w	r2, r2, #1
    6dbe:	4639      	mov	r1, r7
    6dc0:	f018 fe23 	bl	1fa0a <log_1>
		return -EINVAL;
    6dc4:	f06f 0415 	mvn.w	r4, #21
    6dc8:	e010      	b.n	6dec <usb_dc_ep_write+0x70>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6dce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6dd2:	f108 0034 	add.w	r0, r8, #52	; 0x34
    6dd6:	f019 faff 	bl	203d8 <k_mutex_lock.constprop.0>
	if (ep_ctx->write_in_progress) {
    6dda:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
    6dde:	b14b      	cbz	r3, 6df4 <usb_dc_ep_write+0x78>
		k_mutex_unlock(&ctx->drv_lock);
    6de0:	f108 0034 	add.w	r0, r8, #52	; 0x34
    6de4:	f019 faf6 	bl	203d4 <k_mutex_unlock>
		return -EAGAIN;
    6de8:	f06f 040a 	mvn.w	r4, #10
}
    6dec:	4620      	mov	r0, r4
    6dee:	b004      	add	sp, #16
    6df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!data_len && ep_ctx->trans_zlp) {
    6df4:	b926      	cbnz	r6, 6e00 <usb_dc_ep_write+0x84>
    6df6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    6dfa:	b10b      	cbz	r3, 6e00 <usb_dc_ep_write+0x84>
		ep_ctx->trans_zlp = false;
    6dfc:	f885 6023 	strb.w	r6, [r5, #35]	; 0x23
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    6e00:	7aab      	ldrb	r3, [r5, #10]
    6e02:	b9c3      	cbnz	r3, 6e36 <usb_dc_ep_write+0xba>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    6e04:	b166      	cbz	r6, 6e20 <usb_dc_ep_write+0xa4>
    6e06:	f8ba 300a 	ldrh.w	r3, [sl, #10]
    6e0a:	429e      	cmp	r6, r3
    6e0c:	d208      	bcs.n	6e20 <usb_dc_ep_write+0xa4>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    6e0e:	686a      	ldr	r2, [r5, #4]
    6e10:	fbb6 f3f2 	udiv	r3, r6, r2
    6e14:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    6e18:	b913      	cbnz	r3, 6e20 <usb_dc_ep_write+0xa4>
			ep_ctx->trans_zlp = true;
    6e1a:	2301      	movs	r3, #1
    6e1c:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    6e20:	f016 fb0a 	bl	1d438 <nrfx_usbd_last_setup_dir_get>
    6e24:	4287      	cmp	r7, r0
    6e26:	d006      	beq.n	6e36 <usb_dc_ep_write+0xba>
		nrfx_usbd_setup_clear();
    6e28:	f016 faf6 	bl	1d418 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    6e2c:	481c      	ldr	r0, [pc, #112]	; (6ea0 <usb_dc_ep_write+0x124>)
    6e2e:	f019 fad1 	bl	203d4 <k_mutex_unlock>
		return 0;
    6e32:	2400      	movs	r4, #0
    6e34:	e7da      	b.n	6dec <usb_dc_ep_write+0x70>
	ep_ctx->write_in_progress = true;
    6e36:	2301      	movs	r3, #1
    6e38:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    6e3c:	a901      	add	r1, sp, #4
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    6e3e:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    6e42:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    6e44:	e9cd 9601 	strd	r9, r6, [sp, #4]
    6e48:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    6e4c:	f016 f8b4 	bl	1cfb8 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    6e50:	4b14      	ldr	r3, [pc, #80]	; (6ea4 <usb_dc_ep_write+0x128>)
    6e52:	4298      	cmp	r0, r3
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    6e54:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    6e56:	d014      	beq.n	6e82 <usb_dc_ep_write+0x106>
		ep_ctx->write_in_progress = false;
    6e58:	f885 8022 	strb.w	r8, [r5, #34]	; 0x22
		if (ret_bytes) {
    6e5c:	b10c      	cbz	r4, 6e62 <usb_dc_ep_write+0xe6>
			*ret_bytes = 0;
    6e5e:	f8c4 8000 	str.w	r8, [r4]
    6e62:	4b0d      	ldr	r3, [pc, #52]	; (6e98 <usb_dc_ep_write+0x11c>)
    6e64:	4a0b      	ldr	r2, [pc, #44]	; (6e94 <usb_dc_ep_write+0x118>)
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    6e66:	4810      	ldr	r0, [pc, #64]	; (6ea8 <usb_dc_ep_write+0x12c>)
    6e68:	1ad2      	subs	r2, r2, r3
    6e6a:	08d2      	lsrs	r2, r2, #3
    6e6c:	0192      	lsls	r2, r2, #6
    6e6e:	f042 0201 	orr.w	r2, r2, #1
    6e72:	f018 fdca 	bl	1fa0a <log_1>
		result = -EIO;
    6e76:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    6e7a:	4809      	ldr	r0, [pc, #36]	; (6ea0 <usb_dc_ep_write+0x124>)
    6e7c:	f019 faaa 	bl	203d4 <k_mutex_unlock>
	return result;
    6e80:	e7b4      	b.n	6dec <usb_dc_ep_write+0x70>
		if (ret_bytes) {
    6e82:	2c00      	cmp	r4, #0
    6e84:	d0f9      	beq.n	6e7a <usb_dc_ep_write+0xfe>
			*ret_bytes = data_len;
    6e86:	6026      	str	r6, [r4, #0]
	int result = 0;
    6e88:	4644      	mov	r4, r8
    6e8a:	e7f6      	b.n	6e7a <usb_dc_ep_write+0xfe>
		return -ENODEV;
    6e8c:	f06f 0412 	mvn.w	r4, #18
    6e90:	e7ac      	b.n	6dec <usb_dc_ep_write+0x70>
    6e92:	bf00      	nop
    6e94:	00024d7c 	.word	0x00024d7c
    6e98:	00024c24 	.word	0x00024c24
    6e9c:	00026ed7 	.word	0x00026ed7
    6ea0:	20002634 	.word	0x20002634
    6ea4:	0bad0000 	.word	0x0bad0000
    6ea8:	00026ef6 	.word	0x00026ef6
    6eac:	20002600 	.word	0x20002600

00006eb0 <usb_dc_ep_read_wait>:
{
    6eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6eb4:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    6eb6:	4b28      	ldr	r3, [pc, #160]	; (6f58 <usb_dc_ep_read_wait+0xa8>)
{
    6eb8:	4690      	mov	r8, r2
	if (!dev_attached() || !dev_ready()) {
    6eba:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6ebe:	4607      	mov	r7, r0
    6ec0:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    6ec2:	2a00      	cmp	r2, #0
    6ec4:	d045      	beq.n	6f52 <usb_dc_ep_read_wait+0xa2>
    6ec6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6eca:	2b00      	cmp	r3, #0
    6ecc:	d041      	beq.n	6f52 <usb_dc_ep_read_wait+0xa2>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    6ece:	0603      	lsls	r3, r0, #24
    6ed0:	d415      	bmi.n	6efe <usb_dc_ep_read_wait+0x4e>
	if (!data && max_data_len) {
    6ed2:	b911      	cbnz	r1, 6eda <usb_dc_ep_read_wait+0x2a>
    6ed4:	f1b8 0f00 	cmp.w	r8, #0
    6ed8:	d111      	bne.n	6efe <usb_dc_ep_read_wait+0x4e>
	ep_ctx = endpoint_ctx(ep);
    6eda:	4638      	mov	r0, r7
    6edc:	f7ff f980 	bl	61e0 <endpoint_ctx>
	if (!ep_ctx) {
    6ee0:	4604      	mov	r4, r0
    6ee2:	b160      	cbz	r0, 6efe <usb_dc_ep_read_wait+0x4e>
	if (!ep_ctx->cfg.en) {
    6ee4:	7a03      	ldrb	r3, [r0, #8]
    6ee6:	b96b      	cbnz	r3, 6f04 <usb_dc_ep_read_wait+0x54>
    6ee8:	4a1c      	ldr	r2, [pc, #112]	; (6f5c <usb_dc_ep_read_wait+0xac>)
    6eea:	4b1d      	ldr	r3, [pc, #116]	; (6f60 <usb_dc_ep_read_wait+0xb0>)
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    6eec:	481d      	ldr	r0, [pc, #116]	; (6f64 <usb_dc_ep_read_wait+0xb4>)
    6eee:	1ad2      	subs	r2, r2, r3
    6ef0:	08d2      	lsrs	r2, r2, #3
    6ef2:	0192      	lsls	r2, r2, #6
    6ef4:	f042 0201 	orr.w	r2, r2, #1
    6ef8:	4639      	mov	r1, r7
    6efa:	f018 fd86 	bl	1fa0a <log_1>
		return -EINVAL;
    6efe:	f06f 0015 	mvn.w	r0, #21
    6f02:	e015      	b.n	6f30 <usb_dc_ep_read_wait+0x80>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6f08:	4817      	ldr	r0, [pc, #92]	; (6f68 <usb_dc_ep_read_wait+0xb8>)
    6f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6f0e:	f019 fa63 	bl	203d8 <k_mutex_lock.constprop.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    6f12:	68e3      	ldr	r3, [r4, #12]
    6f14:	4543      	cmp	r3, r8
    6f16:	461f      	mov	r7, r3
    6f18:	bf28      	it	cs
    6f1a:	4647      	movcs	r7, r8
	if (!data && !max_data_len) {
    6f1c:	b956      	cbnz	r6, 6f34 <usb_dc_ep_read_wait+0x84>
    6f1e:	f1b8 0f00 	cmp.w	r8, #0
    6f22:	d107      	bne.n	6f34 <usb_dc_ep_read_wait+0x84>
		if (read_bytes) {
    6f24:	b105      	cbz	r5, 6f28 <usb_dc_ep_read_wait+0x78>
			*read_bytes = ep_ctx->buf.len;
    6f26:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    6f28:	480f      	ldr	r0, [pc, #60]	; (6f68 <usb_dc_ep_read_wait+0xb8>)
    6f2a:	f019 fa53 	bl	203d4 <k_mutex_unlock>
		return 0;
    6f2e:	2000      	movs	r0, #0
}
    6f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    6f34:	69e1      	ldr	r1, [r4, #28]
    6f36:	463a      	mov	r2, r7
    6f38:	4630      	mov	r0, r6
    6f3a:	f01a fbb4 	bl	216a6 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    6f3e:	69e3      	ldr	r3, [r4, #28]
    6f40:	443b      	add	r3, r7
    6f42:	61e3      	str	r3, [r4, #28]
	ep_ctx->buf.len -= bytes_to_copy;
    6f44:	68e3      	ldr	r3, [r4, #12]
    6f46:	1bdb      	subs	r3, r3, r7
    6f48:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    6f4a:	2d00      	cmp	r5, #0
    6f4c:	d0ec      	beq.n	6f28 <usb_dc_ep_read_wait+0x78>
		*read_bytes = bytes_to_copy;
    6f4e:	602f      	str	r7, [r5, #0]
    6f50:	e7ea      	b.n	6f28 <usb_dc_ep_read_wait+0x78>
		return -ENODEV;
    6f52:	f06f 0012 	mvn.w	r0, #18
    6f56:	e7eb      	b.n	6f30 <usb_dc_ep_read_wait+0x80>
    6f58:	20002600 	.word	0x20002600
    6f5c:	00024d7c 	.word	0x00024d7c
    6f60:	00024c24 	.word	0x00024c24
    6f64:	00026ed7 	.word	0x00026ed7
    6f68:	20002634 	.word	0x20002634

00006f6c <usb_dc_ep_read_continue>:
{
    6f6c:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    6f6e:	4d25      	ldr	r5, [pc, #148]	; (7004 <usb_dc_ep_read_continue+0x98>)
	if (!dev_attached() || !dev_ready()) {
    6f70:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
    6f74:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    6f76:	2b00      	cmp	r3, #0
    6f78:	d040      	beq.n	6ffc <usb_dc_ep_read_continue+0x90>
    6f7a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    6f7e:	2b00      	cmp	r3, #0
    6f80:	d03c      	beq.n	6ffc <usb_dc_ep_read_continue+0x90>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    6f82:	0603      	lsls	r3, r0, #24
    6f84:	d40f      	bmi.n	6fa6 <usb_dc_ep_read_continue+0x3a>
	ep_ctx = endpoint_ctx(ep);
    6f86:	f7ff f92b 	bl	61e0 <endpoint_ctx>
	if (!ep_ctx) {
    6f8a:	4604      	mov	r4, r0
    6f8c:	b158      	cbz	r0, 6fa6 <usb_dc_ep_read_continue+0x3a>
	if (!ep_ctx->cfg.en) {
    6f8e:	7a03      	ldrb	r3, [r0, #8]
    6f90:	b963      	cbnz	r3, 6fac <usb_dc_ep_read_continue+0x40>
    6f92:	4a1d      	ldr	r2, [pc, #116]	; (7008 <usb_dc_ep_read_continue+0x9c>)
    6f94:	4b1d      	ldr	r3, [pc, #116]	; (700c <usb_dc_ep_read_continue+0xa0>)
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    6f96:	481e      	ldr	r0, [pc, #120]	; (7010 <usb_dc_ep_read_continue+0xa4>)
    6f98:	1ad2      	subs	r2, r2, r3
    6f9a:	08d2      	lsrs	r2, r2, #3
    6f9c:	0192      	lsls	r2, r2, #6
    6f9e:	f042 0201 	orr.w	r2, r2, #1
    6fa2:	f018 fd32 	bl	1fa0a <log_1>
		return -EINVAL;
    6fa6:	f06f 0015 	mvn.w	r0, #21
    6faa:	e01a      	b.n	6fe2 <usb_dc_ep_read_continue+0x76>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6fb4:	f105 0034 	add.w	r0, r5, #52	; 0x34
    6fb8:	f019 fa0e 	bl	203d8 <k_mutex_lock.constprop.0>
	if (!ep_ctx->buf.len) {
    6fbc:	68e3      	ldr	r3, [r4, #12]
    6fbe:	b9c3      	cbnz	r3, 6ff2 <usb_dc_ep_read_continue+0x86>
		ep_ctx->read_complete = true;
    6fc0:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    6fc2:	69a3      	ldr	r3, [r4, #24]
		ep_ctx->read_complete = true;
    6fc4:	f884 6020 	strb.w	r6, [r4, #32]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    6fc8:	61e3      	str	r3, [r4, #28]
		if (ep_ctx->read_pending) {
    6fca:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    6fce:	b183      	cbz	r3, 6ff2 <usb_dc_ep_read_continue+0x86>
			struct usbd_event *ev = usbd_evt_alloc();
    6fd0:	f7ff fa12 	bl	63f8 <usbd_evt_alloc>
			if (!ev) {
    6fd4:	b930      	cbnz	r0, 6fe4 <usb_dc_ep_read_continue+0x78>
				k_mutex_unlock(&ctx->drv_lock);
    6fd6:	f105 0034 	add.w	r0, r5, #52	; 0x34
    6fda:	f019 f9fb 	bl	203d4 <k_mutex_unlock>
				return -ENOMEM;
    6fde:	f06f 000b 	mvn.w	r0, #11
}
    6fe2:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
    6fe4:	7506      	strb	r6, [r0, #20]
			ev->evt.ep_evt.ep = ep_ctx;
    6fe6:	60c4      	str	r4, [r0, #12]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    6fe8:	7406      	strb	r6, [r0, #16]
			usbd_evt_put(ev);
    6fea:	f7ff f923 	bl	6234 <usbd_evt_put>
			usbd_work_schedule();
    6fee:	f7ff f96f 	bl	62d0 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    6ff2:	4808      	ldr	r0, [pc, #32]	; (7014 <usb_dc_ep_read_continue+0xa8>)
    6ff4:	f019 f9ee 	bl	203d4 <k_mutex_unlock>
	return 0;
    6ff8:	2000      	movs	r0, #0
    6ffa:	e7f2      	b.n	6fe2 <usb_dc_ep_read_continue+0x76>
		return -ENODEV;
    6ffc:	f06f 0012 	mvn.w	r0, #18
    7000:	e7ef      	b.n	6fe2 <usb_dc_ep_read_continue+0x76>
    7002:	bf00      	nop
    7004:	20002600 	.word	0x20002600
    7008:	00024d7c 	.word	0x00024d7c
    700c:	00024c24 	.word	0x00024c24
    7010:	00026ed7 	.word	0x00026ed7
    7014:	20002634 	.word	0x20002634

00007018 <usb_dc_ep_set_callback>:
{
    7018:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    701a:	4b08      	ldr	r3, [pc, #32]	; (703c <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    701c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    7020:	b12b      	cbz	r3, 702e <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
    7022:	f7ff f8dd 	bl	61e0 <endpoint_ctx>
	if (!ep_ctx) {
    7026:	b128      	cbz	r0, 7034 <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
    7028:	6001      	str	r1, [r0, #0]
	return 0;
    702a:	2000      	movs	r0, #0
}
    702c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    702e:	f06f 0012 	mvn.w	r0, #18
    7032:	e7fb      	b.n	702c <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
    7034:	f06f 0015 	mvn.w	r0, #21
    7038:	e7f8      	b.n	702c <usb_dc_ep_set_callback+0x14>
    703a:	bf00      	nop
    703c:	20002600 	.word	0x20002600

00007040 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    7040:	4b01      	ldr	r3, [pc, #4]	; (7048 <usb_dc_set_status_callback+0x8>)
    7042:	6018      	str	r0, [r3, #0]
}
    7044:	4770      	bx	lr
    7046:	bf00      	nop
    7048:	20002600 	.word	0x20002600

0000704c <usb_dc_ep_mps>:
{
    704c:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    704e:	4b07      	ldr	r3, [pc, #28]	; (706c <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    7050:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    7054:	b123      	cbz	r3, 7060 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    7056:	f7ff f8c3 	bl	61e0 <endpoint_ctx>
	if (!ep_ctx) {
    705a:	b120      	cbz	r0, 7066 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    705c:	6840      	ldr	r0, [r0, #4]
}
    705e:	bd08      	pop	{r3, pc}
		return -ENODEV;
    7060:	f06f 0012 	mvn.w	r0, #18
    7064:	e7fb      	b.n	705e <usb_dc_ep_mps+0x12>
		return -EINVAL;
    7066:	f06f 0015 	mvn.w	r0, #21
    706a:	e7f8      	b.n	705e <usb_dc_ep_mps+0x12>
    706c:	20002600 	.word	0x20002600

00007070 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    7070:	4a04      	ldr	r2, [pc, #16]	; (7084 <sys_clock_timeout_handler+0x14>)
    7072:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    7074:	1ac8      	subs	r0, r1, r3
    7076:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    707a:	4403      	add	r3, r0
    707c:	6013      	str	r3, [r2, #0]
		 */
		z_nrf_rtc_timer_compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    707e:	f017 bd9f 	b.w	1ebc0 <z_clock_announce>
    7082:	bf00      	nop
    7084:	200028dc 	.word	0x200028dc

00007088 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    7088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_rtc_int_enable_check(NRF_RTC_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    708a:	4e10      	ldr	r6, [pc, #64]	; (70cc <rtc_nrf_isr+0x44>)
}
#endif // defined(DPPI_PRESENT)

NRF_STATIC_INLINE bool nrf_rtc_event_check(NRF_RTC_Type const * p_reg, nrf_rtc_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    708c:	4f10      	ldr	r7, [pc, #64]	; (70d0 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    708e:	2500      	movs	r5, #0
    7090:	4b10      	ldr	r3, [pc, #64]	; (70d4 <rtc_nrf_isr+0x4c>)
    7092:	2000      	movs	r0, #0
    7094:	681c      	ldr	r4, [r3, #0]
    7096:	461a      	mov	r2, r3
    7098:	b105      	cbz	r5, 709c <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    709a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    709c:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    70a0:	03c9      	lsls	r1, r1, #15
    70a2:	d5fa      	bpl.n	709a <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    70a4:	6839      	ldr	r1, [r7, #0]
    70a6:	2900      	cmp	r1, #0
    70a8:	d0f7      	beq.n	709a <rtc_nrf_isr+0x12>
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    70aa:	603d      	str	r5, [r7, #0]
    70ac:	6839      	ldr	r1, [r7, #0]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    70ae:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    70b2:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    70b6:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    70ba:	2501      	movs	r5, #1
			if (handler) {
    70bc:	b11c      	cbz	r4, 70c6 <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
    70be:	685a      	ldr	r2, [r3, #4]
    70c0:	6018      	str	r0, [r3, #0]
    70c2:	47a0      	blx	r4
    70c4:	e7e4      	b.n	7090 <rtc_nrf_isr+0x8>
    70c6:	6014      	str	r4, [r2, #0]
}
    70c8:	e7e7      	b.n	709a <rtc_nrf_isr+0x12>
    70ca:	bf00      	nop
    70cc:	40011000 	.word	0x40011000
    70d0:	40011140 	.word	0x40011140
    70d4:	200028d4 	.word	0x200028d4

000070d8 <set_absolute_alarm>:
{
    70d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    70dc:	0085      	lsls	r5, r0, #2
    70de:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    70e2:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
     return p_reg->COUNTER;
    70e6:	4f1b      	ldr	r7, [pc, #108]	; (7154 <set_absolute_alarm+0x7c>)
    return p_reg->CC[ch];
    70e8:	f8d5 3540 	ldr.w	r3, [r5, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    70ec:	f44f 3680 	mov.w	r6, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    70f0:	f021 447f 	bic.w	r4, r1, #4278190080	; 0xff000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    70f4:	4086      	lsls	r6, r0
    70f6:	46b8      	mov	r8, r7
     return p_reg->COUNTER;
    70f8:	f8d7 9504 	ldr.w	r9, [r7, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    70fc:	eba3 0309 	sub.w	r3, r3, r9
    7100:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    7104:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    7108:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    710a:	f8c5 2540 	str.w	r2, [r5, #1344]	; 0x540
    710e:	d102      	bne.n	7116 <set_absolute_alarm+0x3e>
	z_impl_k_busy_wait(usec_to_wait);
    7110:	200f      	movs	r0, #15
    7112:	f01d f9b7 	bl	24484 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    7116:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    711a:	1aa3      	subs	r3, r4, r2
    711c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    7120:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    7124:	bf88      	it	hi
    7126:	4614      	movhi	r4, r2
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    7128:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->EVTENSET = mask;
    712c:	f8c8 6344 	str.w	r6, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    7130:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
    7134:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    7138:	4599      	cmp	r9, r3
    713a:	d006      	beq.n	714a <set_absolute_alarm+0x72>
	return (a - b) & COUNTER_MAX;
    713c:	1ae3      	subs	r3, r4, r3
    713e:	3b02      	subs	r3, #2
    7140:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    7144:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    7148:	d801      	bhi.n	714e <set_absolute_alarm+0x76>
}
    714a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    714e:	4623      	mov	r3, r4
    7150:	e7d2      	b.n	70f8 <set_absolute_alarm+0x20>
    7152:	bf00      	nop
    7154:	40011000 	.word	0x40011000

00007158 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    7158:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    715a:	4d0f      	ldr	r5, [pc, #60]	; (7198 <z_clock_driver_init+0x40>)
    715c:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    715e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    7162:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    7166:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    716a:	4b0c      	ldr	r3, [pc, #48]	; (719c <z_clock_driver_init+0x44>)
    716c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    7170:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    7174:	2101      	movs	r1, #1
    7176:	4622      	mov	r2, r4
    7178:	2011      	movs	r0, #17
    717a:	f000 fb19 	bl	77b0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    717e:	2011      	movs	r0, #17
    7180:	f000 fae4 	bl	774c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    7184:	4a06      	ldr	r2, [pc, #24]	; (71a0 <z_clock_driver_init+0x48>)
    7186:	2301      	movs	r3, #1
    7188:	6013      	str	r3, [r2, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    718a:	2002      	movs	r0, #2
    718c:	602b      	str	r3, [r5, #0]
    718e:	f7fe ffa1 	bl	60d4 <z_nrf_clock_control_lf_on>

	return 0;
}
    7192:	4620      	mov	r0, r4
    7194:	bd38      	pop	{r3, r4, r5, pc}
    7196:	bf00      	nop
    7198:	40011000 	.word	0x40011000
    719c:	e000e100 	.word	0xe000e100
    71a0:	40011008 	.word	0x40011008

000071a4 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    71a4:	4b13      	ldr	r3, [pc, #76]	; (71f4 <z_clock_set_timeout+0x50>)
    71a6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    71aa:	bf08      	it	eq
    71ac:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    71ae:	3801      	subs	r0, #1
    71b0:	2800      	cmp	r0, #0
    71b2:	dd1c      	ble.n	71ee <z_clock_set_timeout+0x4a>
    71b4:	4298      	cmp	r0, r3
    71b6:	bfa8      	it	ge
    71b8:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    71ba:	4b0f      	ldr	r3, [pc, #60]	; (71f8 <z_clock_set_timeout+0x54>)
    71bc:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    71c0:	4b0e      	ldr	r3, [pc, #56]	; (71fc <z_clock_set_timeout+0x58>)
    71c2:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    71c4:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    71c6:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    71ca:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    71ce:	bf18      	it	ne
    71d0:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    71d2:	4a0b      	ldr	r2, [pc, #44]	; (7200 <z_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    71d4:	3301      	adds	r3, #1
    71d6:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    71d8:	480a      	ldr	r0, [pc, #40]	; (7204 <z_clock_set_timeout+0x60>)
    71da:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    71dc:	2000      	movs	r0, #0
    71de:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    71e0:	4a04      	ldr	r2, [pc, #16]	; (71f4 <z_clock_set_timeout+0x50>)
    71e2:	4293      	cmp	r3, r2
    71e4:	bf94      	ite	ls
    71e6:	18c9      	addls	r1, r1, r3
    71e8:	1889      	addhi	r1, r1, r2
    71ea:	f7ff bf75 	b.w	70d8 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    71ee:	2000      	movs	r0, #0
    71f0:	e7e3      	b.n	71ba <z_clock_set_timeout+0x16>
    71f2:	bf00      	nop
    71f4:	007fffff 	.word	0x007fffff
    71f8:	40011000 	.word	0x40011000
    71fc:	200028dc 	.word	0x200028dc
    7200:	200028d4 	.word	0x200028d4
    7204:	00007071 	.word	0x00007071

00007208 <z_clock_elapsed>:
	__asm__ volatile(
    7208:	f04f 0220 	mov.w	r2, #32
    720c:	f3ef 8311 	mrs	r3, BASEPRI
    7210:	f382 8811 	msr	BASEPRI, r2
    7214:	f3bf 8f6f 	isb	sy
    7218:	4a06      	ldr	r2, [pc, #24]	; (7234 <z_clock_elapsed+0x2c>)
    721a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    721e:	4a06      	ldr	r2, [pc, #24]	; (7238 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    7220:	6812      	ldr	r2, [r2, #0]
    7222:	1a80      	subs	r0, r0, r2
    7224:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    7228:	f383 8811 	msr	BASEPRI, r3
    722c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    7230:	4770      	bx	lr
    7232:	bf00      	nop
    7234:	40011000 	.word	0x40011000
    7238:	200028dc 	.word	0x200028dc

0000723c <z_timer_cycle_get_32>:
	__asm__ volatile(
    723c:	f04f 0320 	mov.w	r3, #32
    7240:	f3ef 8211 	mrs	r2, BASEPRI
    7244:	f383 8811 	msr	BASEPRI, r3
    7248:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    724c:	4906      	ldr	r1, [pc, #24]	; (7268 <z_timer_cycle_get_32+0x2c>)
    724e:	4b07      	ldr	r3, [pc, #28]	; (726c <z_timer_cycle_get_32+0x30>)
    7250:	6808      	ldr	r0, [r1, #0]
    7252:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    7256:	f382 8811 	msr	BASEPRI, r2
    725a:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    725e:	1a1b      	subs	r3, r3, r0
    7260:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    7264:	4418      	add	r0, r3
    7266:	4770      	bx	lr
    7268:	200028dc 	.word	0x200028dc
    726c:	40011000 	.word	0x40011000

00007270 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    7270:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    7272:	4c11      	ldr	r4, [pc, #68]	; (72b8 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    7274:	4a11      	ldr	r2, [pc, #68]	; (72bc <_DoInit+0x4c>)
    7276:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    7278:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    727a:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    727e:	4b10      	ldr	r3, [pc, #64]	; (72c0 <_DoInit+0x50>)
    7280:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    7282:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    7284:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    7288:	4a0e      	ldr	r2, [pc, #56]	; (72c4 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    728a:	490f      	ldr	r1, [pc, #60]	; (72c8 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    728c:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    728e:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    7290:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    7292:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    7294:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    7296:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    7298:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    729a:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    729c:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    729e:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    72a0:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    72a2:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    72a4:	f01a f9bf 	bl	21626 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    72a8:	4908      	ldr	r1, [pc, #32]	; (72cc <_DoInit+0x5c>)
    72aa:	4620      	mov	r0, r4
    72ac:	f01a f9bb 	bl	21626 <strcpy>
  p->acID[6] = ' ';
    72b0:	2320      	movs	r3, #32
    72b2:	71a3      	strb	r3, [r4, #6]
}
    72b4:	bd10      	pop	{r4, pc}
    72b6:	bf00      	nop
    72b8:	200028e0 	.word	0x200028e0
    72bc:	00026f26 	.word	0x00026f26
    72c0:	200062eb 	.word	0x200062eb
    72c4:	200062db 	.word	0x200062db
    72c8:	00026f2f 	.word	0x00026f2f
    72cc:	00026f33 	.word	0x00026f33

000072d0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    72d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    72d4:	4f23      	ldr	r7, [pc, #140]	; (7364 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    72d6:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    72da:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    72dc:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    72e0:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    72e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    72e4:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    72e6:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    72e8:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    72ea:	d834      	bhi.n	7356 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    72ec:	f8d2 a020 	ldr.w	sl, [r2, #32]
    72f0:	ebaa 0905 	sub.w	r9, sl, r5
    72f4:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    72f8:	4294      	cmp	r4, r2
    72fa:	d811      	bhi.n	7320 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    72fc:	f04f 0918 	mov.w	r9, #24
    7300:	fb06 9309 	mla	r3, r6, r9, r9
    7304:	443b      	add	r3, r7
    7306:	4622      	mov	r2, r4
    7308:	6858      	ldr	r0, [r3, #4]
    730a:	4641      	mov	r1, r8
    730c:	4428      	add	r0, r5
    730e:	f01a f9ca 	bl	216a6 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    7312:	fb09 7606 	mla	r6, r9, r6, r7
    7316:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    7318:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    731a:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    731c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    7320:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    7322:	429c      	cmp	r4, r3
    7324:	d81b      	bhi.n	735e <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    7326:	fb00 bb0b 	mla	fp, r0, fp, fp
    732a:	44bb      	add	fp, r7
    732c:	464a      	mov	r2, r9
    732e:	f8db 0004 	ldr.w	r0, [fp, #4]
    7332:	442c      	add	r4, r5
    7334:	4428      	add	r0, r5
    7336:	f01a f9b6 	bl	216a6 <memcpy>
      if (NumBytes) {
    733a:	ebb4 040a 	subs.w	r4, r4, sl
    733e:	d006      	beq.n	734e <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
    7340:	f8db 0004 	ldr.w	r0, [fp, #4]
    7344:	4622      	mov	r2, r4
    7346:	eb08 0109 	add.w	r1, r8, r9
    734a:	f01a f9ac 	bl	216a6 <memcpy>
      pRing->WrOff = NumBytes;
    734e:	2018      	movs	r0, #24
    7350:	fb00 7606 	mla	r6, r0, r6, r7
    7354:	e7e0      	b.n	7318 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    7356:	3b01      	subs	r3, #1
    7358:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    735a:	42a3      	cmp	r3, r4
    735c:	d2ce      	bcs.n	72fc <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    735e:	2000      	movs	r0, #0
    7360:	e7dc      	b.n	731c <SEGGER_RTT_WriteSkipNoLock+0x4c>
    7362:	bf00      	nop
    7364:	200028e0 	.word	0x200028e0

00007368 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    7368:	4b03      	ldr	r3, [pc, #12]	; (7378 <SEGGER_RTT_HasDataUp+0x10>)
    736a:	2218      	movs	r2, #24
    736c:	fb02 3300 	mla	r3, r2, r0, r3
    7370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    7372:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    7374:	1a80      	subs	r0, r0, r2
    7376:	4770      	bx	lr
    7378:	200028e0 	.word	0x200028e0

0000737c <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    737c:	4b01      	ldr	r3, [pc, #4]	; (7384 <uECC_get_rng+0x8>)
    737e:	6818      	ldr	r0, [r3, #0]
    7380:	4770      	bx	lr
    7382:	bf00      	nop
    7384:	20000254 	.word	0x20000254

00007388 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    7388:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    738a:	2208      	movs	r2, #8
{
    738c:	b089      	sub	sp, #36	; 0x24
    738e:	460c      	mov	r4, r1
    7390:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    7392:	f019 fa34 	bl	207fe <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    7396:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    7398:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    739a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    739c:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    739e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    73a0:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    73a2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    73a4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    73a6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    73a8:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    73aa:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    73ac:	2308      	movs	r3, #8
    73ae:	466a      	mov	r2, sp
    73b0:	4669      	mov	r1, sp
    73b2:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    73b4:	e9cd 7701 	strd	r7, r7, [sp, #4]
    73b8:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    73ba:	f019 f922 	bl	20602 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    73be:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    73c0:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    73c2:	466a      	mov	r2, sp
    73c4:	4631      	mov	r1, r6
    73c6:	4630      	mov	r0, r6
    73c8:	f019 f91b 	bl	20602 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    73cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    73ce:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    73d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    73d2:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    73d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    73d6:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    73d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    73da:	4405      	add	r5, r0
	tmp[7] = 0;
    73dc:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    73e0:	466a      	mov	r2, sp
    73e2:	2308      	movs	r3, #8
    73e4:	4669      	mov	r1, sp
    73e6:	4668      	mov	r0, sp
    73e8:	f019 f90b 	bl	20602 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    73ec:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    73ee:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    73f0:	2308      	movs	r3, #8
    73f2:	466a      	mov	r2, sp
    73f4:	4630      	mov	r0, r6
    73f6:	f019 f904 	bl	20602 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    73fa:	6a23      	ldr	r3, [r4, #32]
    73fc:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    73fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7400:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    7402:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7404:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    7406:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7408:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    740a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    740c:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    740e:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7410:	2308      	movs	r3, #8
    7412:	466a      	mov	r2, sp
    7414:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    7416:	e9cd 7704 	strd	r7, r7, [sp, #16]
    741a:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    741c:	f019 f8f1 	bl	20602 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    7420:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7422:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    7424:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    7426:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    7428:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    742a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    742c:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    742e:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    7430:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    7432:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    7434:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    7436:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    743a:	6a23      	ldr	r3, [r4, #32]
    743c:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    743e:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7440:	2308      	movs	r3, #8
    7442:	466a      	mov	r2, sp
    7444:	4630      	mov	r0, r6
    7446:	f019 f8dc 	bl	20602 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    744a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    744c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    744e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7450:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    7452:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7454:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    7456:	6a23      	ldr	r3, [r4, #32]
    7458:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    745a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    745c:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    745e:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7460:	2308      	movs	r3, #8
    7462:	466a      	mov	r2, sp
    7464:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    7466:	e9cd 7704 	strd	r7, r7, [sp, #16]
    746a:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    746c:	f019 f9fd 	bl	2086a <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    7470:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7472:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    7474:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7476:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    7478:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    747a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    747c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    747e:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    7480:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7482:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    7484:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7486:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7488:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    748a:	2308      	movs	r3, #8
    748c:	466a      	mov	r2, sp
    748e:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    7490:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7494:	f019 f9e9 	bl	2086a <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    7498:	6b63      	ldr	r3, [r4, #52]	; 0x34
    749a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    749c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    749e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    74a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    74a2:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    74a4:	6a23      	ldr	r3, [r4, #32]
    74a6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    74a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    74aa:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    74ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    74ae:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    74b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    74b4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    74b6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    74b8:	2308      	movs	r3, #8
    74ba:	466a      	mov	r2, sp
    74bc:	4630      	mov	r0, r6
    74be:	f019 f9d4 	bl	2086a <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    74c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    74c4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    74c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    74c8:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    74cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    74ce:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    74d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    74d2:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    74d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    74d6:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    74da:	6b63      	ldr	r3, [r4, #52]	; 0x34
    74dc:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    74de:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    74e0:	2308      	movs	r3, #8
    74e2:	466a      	mov	r2, sp
    74e4:	4630      	mov	r0, r6
    74e6:	f019 f9c0 	bl	2086a <uECC_vli_sub>

	if (carry < 0) {
    74ea:	1a2d      	subs	r5, r5, r0
    74ec:	d410      	bmi.n	7510 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    74ee:	4c0d      	ldr	r4, [pc, #52]	; (7524 <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
    74f0:	b935      	cbnz	r5, 7500 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    74f2:	2208      	movs	r2, #8
    74f4:	4631      	mov	r1, r6
    74f6:	4620      	mov	r0, r4
    74f8:	f019 f98d 	bl	20816 <uECC_vli_cmp_unsafe>
		while (carry || 
    74fc:	2801      	cmp	r0, #1
    74fe:	d00f      	beq.n	7520 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    7500:	2308      	movs	r3, #8
    7502:	4622      	mov	r2, r4
    7504:	4631      	mov	r1, r6
    7506:	4630      	mov	r0, r6
    7508:	f019 f9af 	bl	2086a <uECC_vli_sub>
    750c:	1a2d      	subs	r5, r5, r0
    750e:	e7ef      	b.n	74f0 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    7510:	4a04      	ldr	r2, [pc, #16]	; (7524 <vli_mmod_fast_secp256r1+0x19c>)
    7512:	2308      	movs	r3, #8
    7514:	4631      	mov	r1, r6
    7516:	4630      	mov	r0, r6
    7518:	f019 f873 	bl	20602 <uECC_vli_add>
		while (carry < 0);
    751c:	182d      	adds	r5, r5, r0
    751e:	d4f8      	bmi.n	7512 <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
    7520:	b009      	add	sp, #36	; 0x24
    7522:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7524:	00025028 	.word	0x00025028

00007528 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    7528:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    752a:	4e26      	ldr	r6, [pc, #152]	; (75c4 <tc_aes128_set_encrypt_key+0x9c>)
{
    752c:	4607      	mov	r7, r0
    752e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    7530:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    7532:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    7534:	ad01      	add	r5, sp, #4
    7536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    7538:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    753a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    753c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    7540:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    7544:	4638      	mov	r0, r7
    7546:	2f00      	cmp	r7, #0
    7548:	d038      	beq.n	75bc <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    754a:	2c00      	cmp	r4, #0
    754c:	d038      	beq.n	75c0 <tc_aes128_set_encrypt_key+0x98>
    754e:	1f38      	subs	r0, r7, #4
    7550:	4621      	mov	r1, r4
    7552:	4602      	mov	r2, r0
    7554:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    7556:	784b      	ldrb	r3, [r1, #1]
    7558:	780d      	ldrb	r5, [r1, #0]
    755a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    755c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    7560:	78cd      	ldrb	r5, [r1, #3]
    7562:	432b      	orrs	r3, r5
    7564:	788d      	ldrb	r5, [r1, #2]
    7566:	3104      	adds	r1, #4
    7568:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    756c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    756e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    7572:	d1f0      	bne.n	7556 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    7574:	4c14      	ldr	r4, [pc, #80]	; (75c8 <tc_aes128_set_encrypt_key+0xa0>)
    7576:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    7578:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    757a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    757c:	d116      	bne.n	75ac <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    757e:	f3c3 4207 	ubfx	r2, r3, #16, #8
    7582:	5ca5      	ldrb	r5, [r4, r2]
    7584:	0e1a      	lsrs	r2, r3, #24
    7586:	5ca2      	ldrb	r2, [r4, r2]
    7588:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    758c:	f3c3 2507 	ubfx	r5, r3, #8, #8
    7590:	b2db      	uxtb	r3, r3
    7592:	5d65      	ldrb	r5, [r4, r5]
    7594:	5ce3      	ldrb	r3, [r4, r3]
    7596:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    759a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    759e:	ad0c      	add	r5, sp, #48	; 0x30
    75a0:	f021 0303 	bic.w	r3, r1, #3
    75a4:	442b      	add	r3, r5
    75a6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    75aa:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    75ac:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    75b0:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    75b2:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    75b4:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    75b6:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    75b8:	d1de      	bne.n	7578 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
    75ba:	2001      	movs	r0, #1
}
    75bc:	b00d      	add	sp, #52	; 0x34
    75be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    75c0:	4620      	mov	r0, r4
    75c2:	e7fb      	b.n	75bc <tc_aes128_set_encrypt_key+0x94>
    75c4:	00024dc4 	.word	0x00024dc4
    75c8:	00026f3a 	.word	0x00026f3a

000075cc <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    75cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    75d0:	4615      	mov	r5, r2
    75d2:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    75d4:	4606      	mov	r6, r0
    75d6:	2800      	cmp	r0, #0
    75d8:	d058      	beq.n	768c <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    75da:	2900      	cmp	r1, #0
    75dc:	d059      	beq.n	7692 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    75de:	2a00      	cmp	r2, #0
    75e0:	d059      	beq.n	7696 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    75e2:	2310      	movs	r3, #16
    75e4:	460a      	mov	r2, r1
    75e6:	4668      	mov	r0, sp
    75e8:	4619      	mov	r1, r3
    75ea:	f018 ff46 	bl	2047a <_copy>
	add_round_key(state, s->words);
    75ee:	4629      	mov	r1, r5
    75f0:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    75f2:	4c2a      	ldr	r4, [pc, #168]	; (769c <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    75f4:	f019 fe4b 	bl	2128e <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    75f8:	f105 0710 	add.w	r7, r5, #16
    75fc:	46a1      	mov	r9, r4
    75fe:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    7600:	46e8      	mov	r8, sp
{
    7602:	466a      	mov	r2, sp
    7604:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    7606:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    7608:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    760a:	5c61      	ldrb	r1, [r4, r1]
    760c:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    7610:	d1f9      	bne.n	7606 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    7612:	4668      	mov	r0, sp
    7614:	f019 fe80 	bl	21318 <shift_rows>
	mult_row_column(t, s);
    7618:	4669      	mov	r1, sp
    761a:	a804      	add	r0, sp, #16
    761c:	f019 feb5 	bl	2138a <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    7620:	a901      	add	r1, sp, #4
    7622:	a805      	add	r0, sp, #20
    7624:	f019 feb1 	bl	2138a <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    7628:	a902      	add	r1, sp, #8
    762a:	a806      	add	r0, sp, #24
    762c:	f019 fead 	bl	2138a <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    7630:	a903      	add	r1, sp, #12
    7632:	a807      	add	r0, sp, #28
    7634:	f019 fea9 	bl	2138a <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    7638:	2310      	movs	r3, #16
    763a:	4619      	mov	r1, r3
    763c:	eb0d 0203 	add.w	r2, sp, r3
    7640:	4668      	mov	r0, sp
    7642:	f018 ff1a 	bl	2047a <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    7646:	4639      	mov	r1, r7
    7648:	4668      	mov	r0, sp
    764a:	3710      	adds	r7, #16
    764c:	f019 fe1f 	bl	2128e <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    7650:	42af      	cmp	r7, r5
    7652:	d1d5      	bne.n	7600 <tc_aes_encrypt+0x34>
    7654:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    7656:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    765a:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    765c:	f819 3003 	ldrb.w	r3, [r9, r3]
    7660:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    7664:	d1f7      	bne.n	7656 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    7666:	4668      	mov	r0, sp
    7668:	f019 fe56 	bl	21318 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    766c:	4629      	mov	r1, r5
    766e:	4668      	mov	r0, sp
    7670:	f019 fe0d 	bl	2128e <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    7674:	2310      	movs	r3, #16
    7676:	4619      	mov	r1, r3
    7678:	466a      	mov	r2, sp
    767a:	4630      	mov	r0, r6
    767c:	f018 fefd 	bl	2047a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    7680:	4668      	mov	r0, sp
    7682:	2210      	movs	r2, #16
    7684:	4621      	mov	r1, r4
    7686:	f018 ff05 	bl	20494 <_set>

	return TC_CRYPTO_SUCCESS;
    768a:	2001      	movs	r0, #1
}
    768c:	b009      	add	sp, #36	; 0x24
    768e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    7692:	4608      	mov	r0, r1
    7694:	e7fa      	b.n	768c <tc_aes_encrypt+0xc0>
    7696:	4610      	mov	r0, r2
    7698:	e7f8      	b.n	768c <tc_aes_encrypt+0xc0>
    769a:	bf00      	nop
    769c:	00026f3a 	.word	0x00026f3a

000076a0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    76a0:	4a0a      	ldr	r2, [pc, #40]	; (76cc <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    76a2:	490b      	ldr	r1, [pc, #44]	; (76d0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    76a4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    76a6:	6809      	ldr	r1, [r1, #0]
    76a8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    76ac:	4909      	ldr	r1, [pc, #36]	; (76d4 <arch_swap+0x34>)
	_current->arch.basepri = key;
    76ae:	67d8      	str	r0, [r3, #124]	; 0x7c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    76b0:	684b      	ldr	r3, [r1, #4]
    76b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    76b6:	604b      	str	r3, [r1, #4]
    76b8:	2300      	movs	r3, #0
    76ba:	f383 8811 	msr	BASEPRI, r3
    76be:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    76c2:	6893      	ldr	r3, [r2, #8]
}
    76c4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    76c8:	4770      	bx	lr
    76ca:	bf00      	nop
    76cc:	200040f0 	.word	0x200040f0
    76d0:	00026520 	.word	0x00026520
    76d4:	e000ed00 	.word	0xe000ed00

000076d8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    76d8:	4912      	ldr	r1, [pc, #72]	; (7724 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    76da:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    76dc:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    76e0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    76e2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    76e6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    76ea:	2020      	movs	r0, #32
    msr BASEPRI, r0
    76ec:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    76f0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    76f4:	4f0c      	ldr	r7, [pc, #48]	; (7728 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    76f6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    76fa:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    76fc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    76fe:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    7700:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
    7702:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    7704:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    7706:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    770a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    770c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    770e:	f000 fbe9 	bl	7ee4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    7712:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    7716:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    771a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    771e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    7722:	4770      	bx	lr
    ldr r1, =_kernel
    7724:	200040f0 	.word	0x200040f0
    ldr v4, =_SCS_ICSR
    7728:	e000ed04 	.word	0xe000ed04

0000772c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    772c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    7730:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    7732:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    7736:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    773a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    773c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    7740:	2902      	cmp	r1, #2
    beq _oops
    7742:	d0ff      	beq.n	7744 <_oops>

00007744 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    7744:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    7746:	f019 ff63 	bl	21610 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    774a:	bd01      	pop	{r0, pc}

0000774c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    774c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    774e:	2b00      	cmp	r3, #0
    7750:	db08      	blt.n	7764 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7752:	2201      	movs	r2, #1
    7754:	f000 001f 	and.w	r0, r0, #31
    7758:	fa02 f000 	lsl.w	r0, r2, r0
    775c:	095b      	lsrs	r3, r3, #5
    775e:	4a02      	ldr	r2, [pc, #8]	; (7768 <arch_irq_enable+0x1c>)
    7760:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    7764:	4770      	bx	lr
    7766:	bf00      	nop
    7768:	e000e100 	.word	0xe000e100

0000776c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    776c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    776e:	2b00      	cmp	r3, #0
    7770:	db0d      	blt.n	778e <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7772:	2201      	movs	r2, #1
    7774:	095b      	lsrs	r3, r3, #5
    7776:	f000 001f 	and.w	r0, r0, #31
    777a:	fa02 f000 	lsl.w	r0, r2, r0
    777e:	3320      	adds	r3, #32
    7780:	4a03      	ldr	r2, [pc, #12]	; (7790 <arch_irq_disable+0x24>)
    7782:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    7786:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    778a:	f3bf 8f6f 	isb	sy
}
    778e:	4770      	bx	lr
    7790:	e000e100 	.word	0xe000e100

00007794 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    7794:	4b05      	ldr	r3, [pc, #20]	; (77ac <arch_irq_is_enabled+0x18>)
    7796:	0942      	lsrs	r2, r0, #5
    7798:	f000 001f 	and.w	r0, r0, #31
    779c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    77a0:	2301      	movs	r3, #1
    77a2:	fa03 f000 	lsl.w	r0, r3, r0
}
    77a6:	4010      	ands	r0, r2
    77a8:	4770      	bx	lr
    77aa:	bf00      	nop
    77ac:	e000e100 	.word	0xe000e100

000077b0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    77b0:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    77b2:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    77b4:	bfa8      	it	ge
    77b6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    77ba:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    77be:	bfb8      	it	lt
    77c0:	4b06      	ldrlt	r3, [pc, #24]	; (77dc <z_arm_irq_priority_set+0x2c>)
    77c2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    77c6:	bfac      	ite	ge
    77c8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    77cc:	f000 000f 	andlt.w	r0, r0, #15
    77d0:	b2c9      	uxtb	r1, r1
    77d2:	bfb4      	ite	lt
    77d4:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    77d6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    77da:	4770      	bx	lr
    77dc:	e000ed14 	.word	0xe000ed14

000077e0 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    77e0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    77e2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    77e4:	4b04      	ldr	r3, [pc, #16]	; (77f8 <_arch_isr_direct_pm+0x18>)
    77e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
    77e8:	b118      	cbz	r0, 77f2 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    77ea:	2200      	movs	r2, #0
    77ec:	625a      	str	r2, [r3, #36]	; 0x24
		z_sys_power_save_idle_exit(idle_val);
    77ee:	f01c fbc1 	bl	23f74 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    77f2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    77f4:	bd08      	pop	{r3, pc}
    77f6:	bf00      	nop
    77f8:	200040f0 	.word	0x200040f0

000077fc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    77fc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    7800:	9b00      	ldr	r3, [sp, #0]
    7802:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    7806:	490a      	ldr	r1, [pc, #40]	; (7830 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    7808:	9b01      	ldr	r3, [sp, #4]
    780a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    780e:	9b02      	ldr	r3, [sp, #8]
    7810:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    7814:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    7818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    781c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    7820:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    7824:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    7826:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    7828:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    782a:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    782c:	4770      	bx	lr
    782e:	bf00      	nop
    7830:	0001f289 	.word	0x0001f289

00007834 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    7834:	4a0b      	ldr	r2, [pc, #44]	; (7864 <z_check_thread_stack_fail+0x30>)
{
    7836:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    7838:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
    783a:	b190      	cbz	r0, 7862 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    783c:	f113 0f16 	cmn.w	r3, #22
    7840:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
    7842:	d005      	beq.n	7850 <z_check_thread_stack_fail+0x1c>
    7844:	f1a0 0220 	sub.w	r2, r0, #32
    7848:	429a      	cmp	r2, r3
    784a:	d806      	bhi.n	785a <z_check_thread_stack_fail+0x26>
    784c:	4283      	cmp	r3, r0
    784e:	d204      	bcs.n	785a <z_check_thread_stack_fail+0x26>
    7850:	4281      	cmp	r1, r0
    7852:	bf2c      	ite	cs
    7854:	2100      	movcs	r1, #0
    7856:	2101      	movcc	r1, #1
    7858:	e000      	b.n	785c <z_check_thread_stack_fail+0x28>
    785a:	2100      	movs	r1, #0
    785c:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    785e:	bf08      	it	eq
    7860:	2000      	moveq	r0, #0
}
    7862:	4770      	bx	lr
    7864:	200040f0 	.word	0x200040f0

00007868 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    7868:	b508      	push	{r3, lr}
    786a:	4604      	mov	r4, r0
    786c:	460e      	mov	r6, r1
    786e:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    7870:	f000 fb2c 	bl	7ecc <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    7874:	4b08      	ldr	r3, [pc, #32]	; (7898 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    7876:	4620      	mov	r0, r4
	_current = main_thread;
    7878:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    787a:	f000 fb33 	bl	7ee4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    787e:	4628      	mov	r0, r5
    7880:	f386 8809 	msr	PSP, r6
    7884:	2100      	movs	r1, #0
    7886:	b663      	cpsie	if
    7888:	f381 8811 	msr	BASEPRI, r1
    788c:	f3bf 8f6f 	isb	sy
    7890:	2200      	movs	r2, #0
    7892:	2300      	movs	r3, #0
    7894:	f017 fcf8 	bl	1f288 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    7898:	200040f0 	.word	0x200040f0

0000789c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    789c:	4901      	ldr	r1, [pc, #4]	; (78a4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    789e:	2210      	movs	r2, #16
	str	r2, [r1]
    78a0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    78a2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    78a4:	e000ed10 	.word	0xe000ed10

000078a8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    78a8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    78aa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    78ac:	f380 8811 	msr	BASEPRI, r0
	isb
    78b0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    78b4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    78b8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    78ba:	b662      	cpsie	i
	isb
    78bc:	f3bf 8f6f 	isb	sy

	bx	lr
    78c0:	4770      	bx	lr
    78c2:	bf00      	nop

000078c4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    78c4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    78c6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    78c8:	f381 8811 	msr	BASEPRI, r1

	wfe
    78cc:	bf20      	wfe

	msr	BASEPRI, r0
    78ce:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    78d2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    78d4:	4770      	bx	lr
    78d6:	bf00      	nop

000078d8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    78d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    78da:	4606      	mov	r6, r0

	if (esf != NULL) {
    78dc:	460c      	mov	r4, r1
    78de:	b301      	cbz	r1, 7922 <z_arm_fatal_error+0x4a>
    78e0:	4b13      	ldr	r3, [pc, #76]	; (7930 <z_arm_fatal_error+0x58>)
    78e2:	4d14      	ldr	r5, [pc, #80]	; (7934 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    78e4:	4814      	ldr	r0, [pc, #80]	; (7938 <z_arm_fatal_error+0x60>)
    78e6:	1aed      	subs	r5, r5, r3
    78e8:	08ed      	lsrs	r5, r5, #3
    78ea:	01ad      	lsls	r5, r5, #6
    78ec:	f045 0501 	orr.w	r5, r5, #1
    78f0:	f8ad 5000 	strh.w	r5, [sp]
    78f4:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    78f8:	6809      	ldr	r1, [r1, #0]
    78fa:	f018 f8b3 	bl	1fa64 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    78fe:	f8ad 5000 	strh.w	r5, [sp]
    7902:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    7906:	68e1      	ldr	r1, [r4, #12]
    7908:	480c      	ldr	r0, [pc, #48]	; (793c <z_arm_fatal_error+0x64>)
    790a:	f018 f8ab 	bl	1fa64 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    790e:	69e1      	ldr	r1, [r4, #28]
    7910:	480b      	ldr	r0, [pc, #44]	; (7940 <z_arm_fatal_error+0x68>)
    7912:	462a      	mov	r2, r5
    7914:	f018 f879 	bl	1fa0a <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    7918:	69a1      	ldr	r1, [r4, #24]
    791a:	480a      	ldr	r0, [pc, #40]	; (7944 <z_arm_fatal_error+0x6c>)
    791c:	462a      	mov	r2, r5
    791e:	f018 f874 	bl	1fa0a <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    7922:	4621      	mov	r1, r4
    7924:	4630      	mov	r0, r6
}
    7926:	b002      	add	sp, #8
    7928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    792c:	f016 b846 	b.w	1d9bc <z_fatal_error>
    7930:	00024c24 	.word	0x00024c24
    7934:	00024d3c 	.word	0x00024d3c
    7938:	0002703a 	.word	0x0002703a
    793c:	00027069 	.word	0x00027069
    7940:	00027098 	.word	0x00027098
    7944:	000270a7 	.word	0x000270a7

00007948 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    7948:	bf30      	wfi
    b z_SysNmiOnReset
    794a:	f7ff bffd 	b.w	7948 <z_SysNmiOnReset>
    794e:	bf00      	nop

00007950 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    7950:	4a0e      	ldr	r2, [pc, #56]	; (798c <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    7952:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    7954:	4b0e      	ldr	r3, [pc, #56]	; (7990 <z_arm_prep_c+0x40>)
    7956:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    795a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    795c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7960:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    7964:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    7968:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    796c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    7970:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    7974:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    7978:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    797c:	f016 f8b8 	bl	1daf0 <z_bss_zero>
	z_data_copy();
    7980:	f017 f82c 	bl	1e9dc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    7984:	f000 fa74 	bl	7e70 <z_arm_interrupt_init>
	z_cstart();
    7988:	f016 f8d6 	bl	1db38 <z_cstart>
    798c:	00000000 	.word	0x00000000
    7990:	e000ed00 	.word	0xe000ed00

00007994 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    7994:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    7996:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    7998:	4a0b      	ldr	r2, [pc, #44]	; (79c8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    799a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    799c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    799e:	bf1e      	ittt	ne
	movne	r1, #0
    79a0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    79a2:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_sys_power_save_idle_exit
    79a4:	f01c fae6 	blne	23f74 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    79a8:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    79aa:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    79ae:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    79b2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    79b6:	4905      	ldr	r1, [pc, #20]	; (79cc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    79b8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    79ba:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    79bc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    79be:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    79c2:	4903      	ldr	r1, [pc, #12]	; (79d0 <_isr_wrapper+0x3c>)
	bx r1
    79c4:	4708      	bx	r1
    79c6:	0000      	.short	0x0000
	ldr r2, =_kernel
    79c8:	200040f0 	.word	0x200040f0
	ldr r1, =_sw_isr_table
    79cc:	00024a54 	.word	0x00024a54
	ldr r1, =z_arm_int_exit
    79d0:	00007e55 	.word	0x00007e55

000079d4 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    79d4:	f019 fec5 	bl	21762 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    79d8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    79da:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    79de:	4808      	ldr	r0, [pc, #32]	; (7a00 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    79e0:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    79e4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    79e6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    79ea:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    79ee:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    79f0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    79f2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    79f6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    79fa:	f7ff ffa9 	bl	7950 <z_arm_prep_c>
    79fe:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    7a00:	2000a4c0 	.word	0x2000a4c0

00007a04 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    7a04:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    7a08:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    7a0c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    7a0e:	4672      	mov	r2, lr
	bl z_arm_fault
    7a10:	f000 f94a 	bl	7ca8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    7a14:	bd01      	pop	{r0, pc}
    7a16:	bf00      	nop

00007a18 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    7a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7a1c:	4b33      	ldr	r3, [pc, #204]	; (7aec <mem_manage_fault+0xd4>)
    7a1e:	4c34      	ldr	r4, [pc, #208]	; (7af0 <mem_manage_fault+0xd8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    7a20:	4d34      	ldr	r5, [pc, #208]	; (7af4 <mem_manage_fault+0xdc>)
    7a22:	1ae4      	subs	r4, r4, r3
    7a24:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    7a26:	01a4      	lsls	r4, r4, #6
    7a28:	f044 0901 	orr.w	r9, r4, #1
{
    7a2c:	4607      	mov	r7, r0
    7a2e:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    7a30:	4831      	ldr	r0, [pc, #196]	; (7af8 <mem_manage_fault+0xe0>)
    7a32:	4649      	mov	r1, r9
{
    7a34:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    7a36:	f017 ffdb 	bl	1f9f0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    7a3a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7a3c:	06d0      	lsls	r0, r2, #27
    7a3e:	d503      	bpl.n	7a48 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    7a40:	482e      	ldr	r0, [pc, #184]	; (7afc <mem_manage_fault+0xe4>)
    7a42:	4649      	mov	r1, r9
    7a44:	f017 ffd4 	bl	1f9f0 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    7a48:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7a4a:	0719      	lsls	r1, r3, #28
    7a4c:	d504      	bpl.n	7a58 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    7a4e:	482c      	ldr	r0, [pc, #176]	; (7b00 <mem_manage_fault+0xe8>)
    7a50:	f044 0101 	orr.w	r1, r4, #1
    7a54:	f017 ffcc 	bl	1f9f0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    7a58:	4d26      	ldr	r5, [pc, #152]	; (7af4 <mem_manage_fault+0xdc>)
    7a5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7a5c:	079a      	lsls	r2, r3, #30
    7a5e:	d535      	bpl.n	7acc <mem_manage_fault+0xb4>
		PR_FAULT_INFO("  Data Access Violation");
    7a60:	f044 0a01 	orr.w	sl, r4, #1
    7a64:	4827      	ldr	r0, [pc, #156]	; (7b04 <mem_manage_fault+0xec>)
    7a66:	4651      	mov	r1, sl
    7a68:	f017 ffc2 	bl	1f9f0 <log_0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    7a6c:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    7a70:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7a72:	061b      	lsls	r3, r3, #24
    7a74:	d50b      	bpl.n	7a8e <mem_manage_fault+0x76>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    7a76:	4824      	ldr	r0, [pc, #144]	; (7b08 <mem_manage_fault+0xf0>)
    7a78:	4652      	mov	r2, sl
    7a7a:	4649      	mov	r1, r9
    7a7c:	f017 ffc5 	bl	1fa0a <log_1>
			if (from_hard_fault) {
    7a80:	f1b8 0f00 	cmp.w	r8, #0
    7a84:	d003      	beq.n	7a8e <mem_manage_fault+0x76>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    7a86:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7a88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    7a8c:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    7a8e:	4d19      	ldr	r5, [pc, #100]	; (7af4 <mem_manage_fault+0xdc>)
    7a90:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7a92:	07d0      	lsls	r0, r2, #31
    7a94:	d504      	bpl.n	7aa0 <mem_manage_fault+0x88>
		PR_FAULT_INFO("  Instruction Access Violation");
    7a96:	481d      	ldr	r0, [pc, #116]	; (7b0c <mem_manage_fault+0xf4>)
    7a98:	f044 0101 	orr.w	r1, r4, #1
    7a9c:	f017 ffa8 	bl	1f9f0 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    7aa0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7aa2:	0699      	lsls	r1, r3, #26
    7aa4:	d504      	bpl.n	7ab0 <mem_manage_fault+0x98>
		PR_FAULT_INFO(
    7aa6:	481a      	ldr	r0, [pc, #104]	; (7b10 <mem_manage_fault+0xf8>)
    7aa8:	f044 0101 	orr.w	r1, r4, #1
    7aac:	f017 ffa0 	bl	1f9f0 <log_0>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    7ab0:	4b10      	ldr	r3, [pc, #64]	; (7af4 <mem_manage_fault+0xdc>)
    7ab2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7ab4:	06d2      	lsls	r2, r2, #27
    7ab6:	d40c      	bmi.n	7ad2 <mem_manage_fault+0xba>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7ab8:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    7aba:	4a0e      	ldr	r2, [pc, #56]	; (7af4 <mem_manage_fault+0xdc>)
    7abc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7abe:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    7ac2:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    7ac4:	2300      	movs	r3, #0
    7ac6:	7033      	strb	r3, [r6, #0]

	return reason;
}
    7ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
    7acc:	f06f 0915 	mvn.w	r9, #21
    7ad0:	e7dd      	b.n	7a8e <mem_manage_fault+0x76>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    7ad2:	685b      	ldr	r3, [r3, #4]
    7ad4:	051b      	lsls	r3, r3, #20
    7ad6:	d5ef      	bpl.n	7ab8 <mem_manage_fault+0xa0>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    7ad8:	4639      	mov	r1, r7
    7ada:	4648      	mov	r0, r9
    7adc:	f7ff feaa 	bl	7834 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    7ae0:	2800      	cmp	r0, #0
    7ae2:	d0e9      	beq.n	7ab8 <mem_manage_fault+0xa0>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    7ae4:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    7ae8:	2002      	movs	r0, #2
    7aea:	e7e6      	b.n	7aba <mem_manage_fault+0xa2>
    7aec:	00024c24 	.word	0x00024c24
    7af0:	00024d3c 	.word	0x00024d3c
    7af4:	e000ed00 	.word	0xe000ed00
    7af8:	000270d5 	.word	0x000270d5
    7afc:	000270eb 	.word	0x000270eb
    7b00:	0002711e 	.word	0x0002711e
    7b04:	00027131 	.word	0x00027131
    7b08:	00027149 	.word	0x00027149
    7b0c:	0002715f 	.word	0x0002715f
    7b10:	0002717e 	.word	0x0002717e

00007b14 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    7b14:	b570      	push	{r4, r5, r6, lr}
    7b16:	4b23      	ldr	r3, [pc, #140]	; (7ba4 <usage_fault.isra.0+0x90>)
    7b18:	4c23      	ldr	r4, [pc, #140]	; (7ba8 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    7b1a:	4d24      	ldr	r5, [pc, #144]	; (7bac <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    7b1c:	4824      	ldr	r0, [pc, #144]	; (7bb0 <usage_fault.isra.0+0x9c>)
    7b1e:	1ae4      	subs	r4, r4, r3
    7b20:	08e4      	lsrs	r4, r4, #3
    7b22:	01a4      	lsls	r4, r4, #6
    7b24:	f044 0601 	orr.w	r6, r4, #1
    7b28:	4631      	mov	r1, r6
    7b2a:	f017 ff61 	bl	1f9f0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    7b2e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7b30:	0193      	lsls	r3, r2, #6
    7b32:	d503      	bpl.n	7b3c <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    7b34:	481f      	ldr	r0, [pc, #124]	; (7bb4 <usage_fault.isra.0+0xa0>)
    7b36:	4631      	mov	r1, r6
    7b38:	f017 ff5a 	bl	1f9f0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    7b3c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7b3e:	01dd      	lsls	r5, r3, #7
    7b40:	d504      	bpl.n	7b4c <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    7b42:	481d      	ldr	r0, [pc, #116]	; (7bb8 <usage_fault.isra.0+0xa4>)
    7b44:	f044 0101 	orr.w	r1, r4, #1
    7b48:	f017 ff52 	bl	1f9f0 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    7b4c:	4d17      	ldr	r5, [pc, #92]	; (7bac <usage_fault.isra.0+0x98>)
    7b4e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7b50:	0310      	lsls	r0, r2, #12
    7b52:	d504      	bpl.n	7b5e <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    7b54:	4819      	ldr	r0, [pc, #100]	; (7bbc <usage_fault.isra.0+0xa8>)
    7b56:	f044 0101 	orr.w	r1, r4, #1
    7b5a:	f017 ff49 	bl	1f9f0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    7b5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7b60:	0359      	lsls	r1, r3, #13
    7b62:	d504      	bpl.n	7b6e <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    7b64:	4816      	ldr	r0, [pc, #88]	; (7bc0 <usage_fault.isra.0+0xac>)
    7b66:	f044 0101 	orr.w	r1, r4, #1
    7b6a:	f017 ff41 	bl	1f9f0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    7b6e:	4d0f      	ldr	r5, [pc, #60]	; (7bac <usage_fault.isra.0+0x98>)
    7b70:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7b72:	0392      	lsls	r2, r2, #14
    7b74:	d504      	bpl.n	7b80 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    7b76:	4813      	ldr	r0, [pc, #76]	; (7bc4 <usage_fault.isra.0+0xb0>)
    7b78:	f044 0101 	orr.w	r1, r4, #1
    7b7c:	f017 ff38 	bl	1f9f0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    7b80:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7b82:	03db      	lsls	r3, r3, #15
    7b84:	d504      	bpl.n	7b90 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    7b86:	4810      	ldr	r0, [pc, #64]	; (7bc8 <usage_fault.isra.0+0xb4>)
    7b88:	f044 0101 	orr.w	r1, r4, #1
    7b8c:	f017 ff30 	bl	1f9f0 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    7b90:	4a06      	ldr	r2, [pc, #24]	; (7bac <usage_fault.isra.0+0x98>)
    7b92:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7b94:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    7b98:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    7b9c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    7b9e:	2000      	movs	r0, #0
    7ba0:	bd70      	pop	{r4, r5, r6, pc}
    7ba2:	bf00      	nop
    7ba4:	00024c24 	.word	0x00024c24
    7ba8:	00024d3c 	.word	0x00024d3c
    7bac:	e000ed00 	.word	0xe000ed00
    7bb0:	000271ad 	.word	0x000271ad
    7bb4:	000271c5 	.word	0x000271c5
    7bb8:	000271d8 	.word	0x000271d8
    7bbc:	000271f2 	.word	0x000271f2
    7bc0:	00027210 	.word	0x00027210
    7bc4:	00027235 	.word	0x00027235
    7bc8:	0002724f 	.word	0x0002724f

00007bcc <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    7bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7bd0:	4b2a      	ldr	r3, [pc, #168]	; (7c7c <bus_fault.isra.0+0xb0>)
    7bd2:	4c2b      	ldr	r4, [pc, #172]	; (7c80 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    7bd4:	4d2b      	ldr	r5, [pc, #172]	; (7c84 <bus_fault.isra.0+0xb8>)
    7bd6:	1ae4      	subs	r4, r4, r3
    7bd8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    7bda:	01a4      	lsls	r4, r4, #6
    7bdc:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    7be0:	4607      	mov	r7, r0
    7be2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    7be4:	4828      	ldr	r0, [pc, #160]	; (7c88 <bus_fault.isra.0+0xbc>)
    7be6:	4641      	mov	r1, r8
    7be8:	f017 ff02 	bl	1f9f0 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    7bec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7bee:	04d1      	lsls	r1, r2, #19
    7bf0:	d503      	bpl.n	7bfa <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    7bf2:	4826      	ldr	r0, [pc, #152]	; (7c8c <bus_fault.isra.0+0xc0>)
    7bf4:	4641      	mov	r1, r8
    7bf6:	f017 fefb 	bl	1f9f0 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    7bfa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7bfc:	051a      	lsls	r2, r3, #20
    7bfe:	d504      	bpl.n	7c0a <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    7c00:	4823      	ldr	r0, [pc, #140]	; (7c90 <bus_fault.isra.0+0xc4>)
    7c02:	f044 0101 	orr.w	r1, r4, #1
    7c06:	f017 fef3 	bl	1f9f0 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    7c0a:	4d1e      	ldr	r5, [pc, #120]	; (7c84 <bus_fault.isra.0+0xb8>)
    7c0c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7c0e:	059b      	lsls	r3, r3, #22
    7c10:	d512      	bpl.n	7c38 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    7c12:	f044 0801 	orr.w	r8, r4, #1
    7c16:	481f      	ldr	r0, [pc, #124]	; (7c94 <bus_fault.isra.0+0xc8>)
    7c18:	4641      	mov	r1, r8
    7c1a:	f017 fee9 	bl	1f9f0 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    7c1e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    7c20:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7c22:	0418      	lsls	r0, r3, #16
    7c24:	d508      	bpl.n	7c38 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    7c26:	481c      	ldr	r0, [pc, #112]	; (7c98 <bus_fault.isra.0+0xcc>)
    7c28:	4642      	mov	r2, r8
    7c2a:	f017 feee 	bl	1fa0a <log_1>
			if (from_hard_fault) {
    7c2e:	b11f      	cbz	r7, 7c38 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    7c30:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7c32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    7c36:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    7c38:	4d12      	ldr	r5, [pc, #72]	; (7c84 <bus_fault.isra.0+0xb8>)
    7c3a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7c3c:	0559      	lsls	r1, r3, #21
    7c3e:	d504      	bpl.n	7c4a <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    7c40:	4816      	ldr	r0, [pc, #88]	; (7c9c <bus_fault.isra.0+0xd0>)
    7c42:	f044 0101 	orr.w	r1, r4, #1
    7c46:	f017 fed3 	bl	1f9f0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    7c4a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7c4c:	05da      	lsls	r2, r3, #23
    7c4e:	d50d      	bpl.n	7c6c <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    7c50:	4813      	ldr	r0, [pc, #76]	; (7ca0 <bus_fault.isra.0+0xd4>)
    7c52:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    7c56:	f017 fecb 	bl	1f9f0 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    7c5a:	4a0a      	ldr	r2, [pc, #40]	; (7c84 <bus_fault.isra.0+0xb8>)
    7c5c:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    7c5e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    7c60:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    7c64:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    7c66:	7030      	strb	r0, [r6, #0]
}
    7c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    7c6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7c6e:	049b      	lsls	r3, r3, #18
    7c70:	d5f3      	bpl.n	7c5a <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    7c72:	480c      	ldr	r0, [pc, #48]	; (7ca4 <bus_fault.isra.0+0xd8>)
    7c74:	f044 0101 	orr.w	r1, r4, #1
    7c78:	e7ed      	b.n	7c56 <bus_fault.isra.0+0x8a>
    7c7a:	bf00      	nop
    7c7c:	00024c24 	.word	0x00024c24
    7c80:	00024d3c 	.word	0x00024d3c
    7c84:	e000ed00 	.word	0xe000ed00
    7c88:	0002727a 	.word	0x0002727a
    7c8c:	00027290 	.word	0x00027290
    7c90:	0002711e 	.word	0x0002711e
    7c94:	000272a1 	.word	0x000272a1
    7c98:	000272ba 	.word	0x000272ba
    7c9c:	000272cf 	.word	0x000272cf
    7ca0:	000272ea 	.word	0x000272ea
    7ca4:	0002717e 	.word	0x0002717e

00007ca8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    7ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7cac:	4b57      	ldr	r3, [pc, #348]	; (7e0c <z_arm_fault+0x164>)
    7cae:	685e      	ldr	r6, [r3, #4]
{
    7cb0:	b08a      	sub	sp, #40	; 0x28
    7cb2:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7cb4:	f3c6 0408 	ubfx	r4, r6, #0, #9
    7cb8:	2500      	movs	r5, #0
    7cba:	f385 8811 	msr	BASEPRI, r5
    7cbe:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    7cc2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    7cc6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    7cca:	d10d      	bne.n	7ce8 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    7ccc:	f002 030c 	and.w	r3, r2, #12
    7cd0:	2b08      	cmp	r3, #8
    7cd2:	d10b      	bne.n	7cec <z_arm_fault+0x44>
    7cd4:	494e      	ldr	r1, [pc, #312]	; (7e10 <z_arm_fault+0x168>)
    7cd6:	4b4f      	ldr	r3, [pc, #316]	; (7e14 <z_arm_fault+0x16c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    7cd8:	484f      	ldr	r0, [pc, #316]	; (7e18 <z_arm_fault+0x170>)
    7cda:	1ac9      	subs	r1, r1, r3
    7cdc:	08c9      	lsrs	r1, r1, #3
    7cde:	0189      	lsls	r1, r1, #6
    7ce0:	f041 0101 	orr.w	r1, r1, #1
    7ce4:	f017 fe84 	bl	1f9f0 <log_0>
		return NULL;
    7ce8:	462f      	mov	r7, r5
    7cea:	e003      	b.n	7cf4 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    7cec:	0712      	lsls	r2, r2, #28
    7cee:	d401      	bmi.n	7cf4 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    7cf0:	4607      	mov	r7, r0
			*nested_exc = true;
    7cf2:	2501      	movs	r5, #1
	*recoverable = false;
    7cf4:	2300      	movs	r3, #0
    7cf6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    7cfa:	1ee3      	subs	r3, r4, #3
    7cfc:	2b09      	cmp	r3, #9
    7cfe:	d86b      	bhi.n	7dd8 <z_arm_fault+0x130>
    7d00:	e8df f003 	tbb	[pc, r3]
    7d04:	3d5d5905 	.word	0x3d5d5905
    7d08:	6a6a6a6a 	.word	0x6a6a6a6a
    7d0c:	616a      	.short	0x616a
    7d0e:	4b41      	ldr	r3, [pc, #260]	; (7e14 <z_arm_fault+0x16c>)
    7d10:	4e3f      	ldr	r6, [pc, #252]	; (7e10 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    7d12:	4842      	ldr	r0, [pc, #264]	; (7e1c <z_arm_fault+0x174>)
    7d14:	1af6      	subs	r6, r6, r3
    7d16:	08f6      	lsrs	r6, r6, #3
    7d18:	01b6      	lsls	r6, r6, #6
    7d1a:	f046 0601 	orr.w	r6, r6, #1
    7d1e:	4631      	mov	r1, r6
    7d20:	f017 fe66 	bl	1f9f0 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7d24:	4b39      	ldr	r3, [pc, #228]	; (7e0c <z_arm_fault+0x164>)
    7d26:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    7d28:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7d2c:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    7d30:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7d34:	d005      	beq.n	7d42 <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    7d36:	483a      	ldr	r0, [pc, #232]	; (7e20 <z_arm_fault+0x178>)
    7d38:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    7d3a:	f017 fe59 	bl	1f9f0 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7d3e:	2400      	movs	r4, #0
}
    7d40:	e020      	b.n	7d84 <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    7d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7d44:	005b      	lsls	r3, r3, #1
    7d46:	d51d      	bpl.n	7d84 <z_arm_fault+0xdc>
		PR_EXC("  Fault escalation (see below)");
    7d48:	4836      	ldr	r0, [pc, #216]	; (7e24 <z_arm_fault+0x17c>)
    7d4a:	4631      	mov	r1, r6
    7d4c:	f017 fe50 	bl	1f9f0 <log_0>
		if (SCB_MMFSR != 0) {
    7d50:	4b35      	ldr	r3, [pc, #212]	; (7e28 <z_arm_fault+0x180>)
    7d52:	781b      	ldrb	r3, [r3, #0]
    7d54:	b133      	cbz	r3, 7d64 <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
    7d56:	f10d 0207 	add.w	r2, sp, #7
    7d5a:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    7d5c:	4638      	mov	r0, r7
    7d5e:	f7ff fe5b 	bl	7a18 <mem_manage_fault>
    7d62:	e00e      	b.n	7d82 <z_arm_fault+0xda>
		} else if (SCB_BFSR != 0) {
    7d64:	4b31      	ldr	r3, [pc, #196]	; (7e2c <z_arm_fault+0x184>)
    7d66:	781b      	ldrb	r3, [r3, #0]
    7d68:	b12b      	cbz	r3, 7d76 <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
    7d6a:	f10d 0107 	add.w	r1, sp, #7
    7d6e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    7d70:	f7ff ff2c 	bl	7bcc <bus_fault.isra.0>
    7d74:	e005      	b.n	7d82 <z_arm_fault+0xda>
		} else if (SCB_UFSR != 0) {
    7d76:	4b2e      	ldr	r3, [pc, #184]	; (7e30 <z_arm_fault+0x188>)
    7d78:	881b      	ldrh	r3, [r3, #0]
    7d7a:	b29b      	uxth	r3, r3
    7d7c:	b113      	cbz	r3, 7d84 <z_arm_fault+0xdc>
			reason = usage_fault(esf);
    7d7e:	f7ff fec9 	bl	7b14 <usage_fault.isra.0>
    7d82:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    7d84:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d88:	b993      	cbnz	r3, 7db0 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    7d8a:	2220      	movs	r2, #32
    7d8c:	4639      	mov	r1, r7
    7d8e:	a802      	add	r0, sp, #8
    7d90:	f019 fc89 	bl	216a6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    7d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7d96:	b39d      	cbz	r5, 7e00 <z_arm_fault+0x158>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    7d98:	f3c3 0208 	ubfx	r2, r3, #0, #9
    7d9c:	b922      	cbnz	r2, 7da8 <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    7d9e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    7da2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7da6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    7da8:	a902      	add	r1, sp, #8
    7daa:	4620      	mov	r0, r4
    7dac:	f7ff fd94 	bl	78d8 <z_arm_fatal_error>
}
    7db0:	b00a      	add	sp, #40	; 0x28
    7db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    7db6:	f10d 0207 	add.w	r2, sp, #7
    7dba:	2100      	movs	r1, #0
    7dbc:	e7ce      	b.n	7d5c <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    7dbe:	f10d 0107 	add.w	r1, sp, #7
    7dc2:	2000      	movs	r0, #0
    7dc4:	e7d4      	b.n	7d70 <z_arm_fault+0xc8>
    7dc6:	4912      	ldr	r1, [pc, #72]	; (7e10 <z_arm_fault+0x168>)
    7dc8:	4b12      	ldr	r3, [pc, #72]	; (7e14 <z_arm_fault+0x16c>)
	PR_FAULT_INFO(
    7dca:	481a      	ldr	r0, [pc, #104]	; (7e34 <z_arm_fault+0x18c>)
    7dcc:	1ac9      	subs	r1, r1, r3
    7dce:	08c9      	lsrs	r1, r1, #3
    7dd0:	0189      	lsls	r1, r1, #6
    7dd2:	f041 0101 	orr.w	r1, r1, #1
    7dd6:	e7b0      	b.n	7d3a <z_arm_fault+0x92>
    7dd8:	4a0e      	ldr	r2, [pc, #56]	; (7e14 <z_arm_fault+0x16c>)
    7dda:	4b0d      	ldr	r3, [pc, #52]	; (7e10 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** %s %d) *****",
    7ddc:	4816      	ldr	r0, [pc, #88]	; (7e38 <z_arm_fault+0x190>)
    7dde:	4917      	ldr	r1, [pc, #92]	; (7e3c <z_arm_fault+0x194>)
    7de0:	1a9b      	subs	r3, r3, r2
    7de2:	08db      	lsrs	r3, r3, #3
    7de4:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    7de8:	ea4f 1383 	mov.w	r3, r3, lsl #6
    7dec:	bf18      	it	ne
    7dee:	4601      	movne	r1, r0
    7df0:	f043 0301 	orr.w	r3, r3, #1
    7df4:	4812      	ldr	r0, [pc, #72]	; (7e40 <z_arm_fault+0x198>)
    7df6:	f1a4 0210 	sub.w	r2, r4, #16
    7dfa:	f017 fe1a 	bl	1fa32 <log_2>
    7dfe:	e79e      	b.n	7d3e <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7e00:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    7e04:	f023 0301 	bic.w	r3, r3, #1
    7e08:	e7cd      	b.n	7da6 <z_arm_fault+0xfe>
    7e0a:	bf00      	nop
    7e0c:	e000ed00 	.word	0xe000ed00
    7e10:	00024d3c 	.word	0x00024d3c
    7e14:	00024c24 	.word	0x00024c24
    7e18:	00027302 	.word	0x00027302
    7e1c:	0002732d 	.word	0x0002732d
    7e20:	00027344 	.word	0x00027344
    7e24:	00027365 	.word	0x00027365
    7e28:	e000ed28 	.word	0xe000ed28
    7e2c:	e000ed29 	.word	0xe000ed29
    7e30:	e000ed2a 	.word	0xe000ed2a
    7e34:	00027384 	.word	0x00027384
    7e38:	000273cf 	.word	0x000273cf
    7e3c:	000273ba 	.word	0x000273ba
    7e40:	000273e8 	.word	0x000273e8

00007e44 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    7e44:	4a02      	ldr	r2, [pc, #8]	; (7e50 <z_arm_fault_init+0xc>)
    7e46:	6953      	ldr	r3, [r2, #20]
    7e48:	f043 0310 	orr.w	r3, r3, #16
    7e4c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    7e4e:	4770      	bx	lr
    7e50:	e000ed00 	.word	0xe000ed00

00007e54 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    7e54:	4b04      	ldr	r3, [pc, #16]	; (7e68 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    7e56:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    7e58:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    7e5a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    7e5c:	d003      	beq.n	7e66 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    7e5e:	4903      	ldr	r1, [pc, #12]	; (7e6c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    7e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    7e64:	600a      	str	r2, [r1, #0]

00007e66 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    7e66:	4770      	bx	lr
	ldr r3, =_kernel
    7e68:	200040f0 	.word	0x200040f0
	ldr r1, =_SCS_ICSR
    7e6c:	e000ed04 	.word	0xe000ed04

00007e70 <z_arm_interrupt_init>:
    7e70:	4804      	ldr	r0, [pc, #16]	; (7e84 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    7e72:	2300      	movs	r3, #0
    7e74:	2120      	movs	r1, #32
    7e76:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    7e78:	3301      	adds	r3, #1
    7e7a:	2b30      	cmp	r3, #48	; 0x30
    7e7c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    7e80:	d1f9      	bne.n	7e76 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    7e82:	4770      	bx	lr
    7e84:	e000e100 	.word	0xe000e100

00007e88 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    7e88:	b508      	push	{r3, lr}
	if (_current == thread) {
    7e8a:	4b0e      	ldr	r3, [pc, #56]	; (7ec4 <z_impl_k_thread_abort+0x3c>)
    7e8c:	689b      	ldr	r3, [r3, #8]
    7e8e:	4283      	cmp	r3, r0
    7e90:	d107      	bne.n	7ea2 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7e92:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    7e96:	b193      	cbz	r3, 7ebe <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7e98:	4a0b      	ldr	r2, [pc, #44]	; (7ec8 <z_impl_k_thread_abort+0x40>)
    7e9a:	6853      	ldr	r3, [r2, #4]
    7e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    7ea0:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    7ea2:	f016 fa1b 	bl	1e2dc <z_thread_single_abort>
	__asm__ volatile(
    7ea6:	f04f 0320 	mov.w	r3, #32
    7eaa:	f3ef 8011 	mrs	r0, BASEPRI
    7eae:	f383 8811 	msr	BASEPRI, r3
    7eb2:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    7eb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    7eba:	f01c b9fb 	b.w	242b4 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    7ebe:	f016 fd07 	bl	1e8d0 <z_self_abort>
    7ec2:	bf00      	nop
    7ec4:	200040f0 	.word	0x200040f0
    7ec8:	e000ed00 	.word	0xe000ed00

00007ecc <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    7ecc:	4b02      	ldr	r3, [pc, #8]	; (7ed8 <z_arm_configure_static_mpu_regions+0xc>)
    7ece:	4a03      	ldr	r2, [pc, #12]	; (7edc <z_arm_configure_static_mpu_regions+0x10>)
    7ed0:	4803      	ldr	r0, [pc, #12]	; (7ee0 <z_arm_configure_static_mpu_regions+0x14>)
    7ed2:	2101      	movs	r1, #1
    7ed4:	f000 b8b2 	b.w	803c <arm_core_mpu_configure_static_mpu_regions>
    7ed8:	20040000 	.word	0x20040000
    7edc:	20000000 	.word	0x20000000
    7ee0:	000250d4 	.word	0x000250d4

00007ee4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    7ee4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    7ee6:	4b05      	ldr	r3, [pc, #20]	; (7efc <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    7ee8:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    7eea:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    7eec:	4a04      	ldr	r2, [pc, #16]	; (7f00 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    7eee:	2120      	movs	r1, #32
    7ef0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    7ef4:	4618      	mov	r0, r3
    7ef6:	2101      	movs	r1, #1
    7ef8:	f000 b8aa 	b.w	8050 <arm_core_mpu_configure_dynamic_mpu_regions>
    7efc:	20002988 	.word	0x20002988
    7f00:	150b0000 	.word	0x150b0000

00007f04 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    7f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    7f06:	4f28      	ldr	r7, [pc, #160]	; (7fa8 <mpu_configure_regions+0xa4>)
    7f08:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    7f0a:	2100      	movs	r1, #0
    7f0c:	42b1      	cmp	r1, r6
    7f0e:	da14      	bge.n	7f3a <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    7f10:	6844      	ldr	r4, [r0, #4]
    7f12:	2c00      	cmp	r4, #0
    7f14:	d045      	beq.n	7fa2 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    7f16:	b1c3      	cbz	r3, 7f4a <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    7f18:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    7f1c:	ea14 0f0c 	tst.w	r4, ip
    7f20:	d00d      	beq.n	7f3e <mpu_configure_regions+0x3a>
    7f22:	4a22      	ldr	r2, [pc, #136]	; (7fac <mpu_configure_regions+0xa8>)
    7f24:	4b22      	ldr	r3, [pc, #136]	; (7fb0 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    7f26:	4823      	ldr	r0, [pc, #140]	; (7fb4 <mpu_configure_regions+0xb0>)
    7f28:	1ad2      	subs	r2, r2, r3
    7f2a:	08d2      	lsrs	r2, r2, #3
    7f2c:	0192      	lsls	r2, r2, #6
    7f2e:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7f32:	f017 fd6a 	bl	1fa0a <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    7f36:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    7f3a:	4610      	mov	r0, r2
    7f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    7f3e:	2c1f      	cmp	r4, #31
    7f40:	d9ef      	bls.n	7f22 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    7f42:	6805      	ldr	r5, [r0, #0]
		&&
    7f44:	ea1c 0f05 	tst.w	ip, r5
    7f48:	d1eb      	bne.n	7f22 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    7f4a:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    7f4c:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    7f4e:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    7f52:	6802      	ldr	r2, [r0, #0]
    7f54:	d916      	bls.n	7f84 <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    7f56:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    7f5a:	d815      	bhi.n	7f88 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    7f5c:	3c01      	subs	r4, #1
    7f5e:	fab4 f484 	clz	r4, r4
    7f62:	f1c4 041f 	rsb	r4, r4, #31
    7f66:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    7f68:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7f6a:	ea4c 0404 	orr.w	r4, ip, r4
    7f6e:	d90d      	bls.n	7f8c <mpu_configure_regions+0x88>
    7f70:	4a0e      	ldr	r2, [pc, #56]	; (7fac <mpu_configure_regions+0xa8>)
    7f72:	4b0f      	ldr	r3, [pc, #60]	; (7fb0 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7f74:	4810      	ldr	r0, [pc, #64]	; (7fb8 <mpu_configure_regions+0xb4>)
    7f76:	1ad2      	subs	r2, r2, r3
    7f78:	08d2      	lsrs	r2, r2, #3
    7f7a:	0192      	lsls	r2, r2, #6
    7f7c:	f042 0201 	orr.w	r2, r2, #1
    7f80:	4629      	mov	r1, r5
    7f82:	e7d6      	b.n	7f32 <mpu_configure_regions+0x2e>
		return REGION_32B;
    7f84:	2408      	movs	r4, #8
    7f86:	e7ef      	b.n	7f68 <mpu_configure_regions+0x64>
		return REGION_4G;
    7f88:	243e      	movs	r4, #62	; 0x3e
    7f8a:	e7ed      	b.n	7f68 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7f8c:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    7f90:	432a      	orrs	r2, r5
    7f92:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7f96:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    7f9a:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7f9c:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7f9e:	613c      	str	r4, [r7, #16]
		reg_index++;
    7fa0:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    7fa2:	3101      	adds	r1, #1
    7fa4:	300c      	adds	r0, #12
    7fa6:	e7b1      	b.n	7f0c <mpu_configure_regions+0x8>
    7fa8:	e000ed90 	.word	0xe000ed90
    7fac:	00024d2c 	.word	0x00024d2c
    7fb0:	00024c24 	.word	0x00024c24
    7fb4:	000273ff 	.word	0x000273ff
    7fb8:	00027422 	.word	0x00027422

00007fbc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    7fbc:	4b03      	ldr	r3, [pc, #12]	; (7fcc <arm_core_mpu_enable+0x10>)
    7fbe:	2205      	movs	r2, #5
    7fc0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    7fc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7fc6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    7fca:	4770      	bx	lr
    7fcc:	e000ed90 	.word	0xe000ed90

00007fd0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    7fd0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    7fd4:	4b01      	ldr	r3, [pc, #4]	; (7fdc <arm_core_mpu_disable+0xc>)
    7fd6:	2200      	movs	r2, #0
    7fd8:	605a      	str	r2, [r3, #4]
}
    7fda:	4770      	bx	lr
    7fdc:	e000ed90 	.word	0xe000ed90

00007fe0 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    7fe0:	4913      	ldr	r1, [pc, #76]	; (8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>)
    7fe2:	6808      	ldr	r0, [r1, #0]
    7fe4:	2808      	cmp	r0, #8
{
    7fe6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    7fe8:	d81e      	bhi.n	8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    7fea:	f7ff fff1 	bl	7fd0 <arm_core_mpu_disable>
	MPU->RNR = index;
    7fee:	4c11      	ldr	r4, [pc, #68]	; (8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>)
    7ff0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7ff2:	2200      	movs	r2, #0
    7ff4:	4290      	cmp	r0, r2
    7ff6:	f101 010c 	add.w	r1, r1, #12
    7ffa:	d105      	bne.n	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    7ffc:	4b0e      	ldr	r3, [pc, #56]	; (8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>)
    7ffe:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    8000:	f7ff ffdc 	bl	7fbc <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    8004:	2000      	movs	r0, #0
}
    8006:	bd10      	pop	{r4, pc}
    8008:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    800a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    800e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    8012:	4313      	orrs	r3, r2
    8014:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    8018:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    801a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    801e:	f043 0301 	orr.w	r3, r3, #1
    8022:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    8024:	3201      	adds	r2, #1
    8026:	e7e5      	b.n	7ff4 <arm_mpu_init+0x14>
		return -1;
    8028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    802c:	e7eb      	b.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    802e:	bf00      	nop
    8030:	000250e0 	.word	0x000250e0
    8034:	e000ed90 	.word	0xe000ed90
    8038:	200066eb 	.word	0x200066eb

0000803c <arm_core_mpu_configure_static_mpu_regions>:
{
    803c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    803e:	4c03      	ldr	r4, [pc, #12]	; (804c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    8040:	2301      	movs	r3, #1
    8042:	7822      	ldrb	r2, [r4, #0]
    8044:	f7ff ff5e 	bl	7f04 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    8048:	7020      	strb	r0, [r4, #0]
}
    804a:	bd10      	pop	{r4, pc}
    804c:	200066eb 	.word	0x200066eb

00008050 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    8050:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    8052:	4a08      	ldr	r2, [pc, #32]	; (8074 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    8054:	2300      	movs	r3, #0
    8056:	7812      	ldrb	r2, [r2, #0]
    8058:	f7ff ff54 	bl	7f04 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    805c:	f110 0f16 	cmn.w	r0, #22
    8060:	d003      	beq.n	806a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    8062:	4b05      	ldr	r3, [pc, #20]	; (8078 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    8064:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    8066:	2807      	cmp	r0, #7
    8068:	dd00      	ble.n	806c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    806a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    806c:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    806e:	611a      	str	r2, [r3, #16]
    8070:	3001      	adds	r0, #1
    8072:	e7f8      	b.n	8066 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    8074:	200066eb 	.word	0x200066eb
    8078:	e000ed90 	.word	0xe000ed90

0000807c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    807c:	4b01      	ldr	r3, [pc, #4]	; (8084 <__stdout_hook_install+0x8>)
    807e:	6018      	str	r0, [r3, #0]
}
    8080:	4770      	bx	lr
    8082:	bf00      	nop
    8084:	20000258 	.word	0x20000258

00008088 <vsnprintf>:
	return r;
}

int vsnprintf(char *_MLIBC_RESTRICT s, size_t len,
	      const char *_MLIBC_RESTRICT format, va_list vargs)
{
    8088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    808a:	b909      	cbnz	r1, 8090 <vsnprintf+0x8>
		s = &dummy; /* write final NUL to dummy, can't change * *s */
    808c:	f10d 0007 	add.w	r0, sp, #7
	}

	p.ptr = s;
	p.len = (int) len;
    8090:	e9cd 0102 	strd	r0, r1, [sp, #8]

	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    8094:	a902      	add	r1, sp, #8
    8096:	4804      	ldr	r0, [pc, #16]	; (80a8 <vsnprintf+0x20>)
    8098:	f7fb fccc 	bl	3a34 <cbvprintf>

	*(p.ptr) = 0;
    809c:	9b02      	ldr	r3, [sp, #8]
    809e:	2200      	movs	r2, #0
    80a0:	701a      	strb	r2, [r3, #0]
	return r;
}
    80a2:	b005      	add	sp, #20
    80a4:	f85d fb04 	ldr.w	pc, [sp], #4
    80a8:	00021749 	.word	0x00021749

000080ac <nordicsemi_nrf52_init>:
    80ac:	f04f 0320 	mov.w	r3, #32
    80b0:	f3ef 8211 	mrs	r2, BASEPRI
    80b4:	f383 8811 	msr	BASEPRI, r3
    80b8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    80bc:	4906      	ldr	r1, [pc, #24]	; (80d8 <nordicsemi_nrf52_init+0x2c>)
    80be:	2301      	movs	r3, #1
    80c0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    80c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    80c8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    80cc:	f382 8811 	msr	BASEPRI, r2
    80d0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    80d4:	2000      	movs	r0, #0
    80d6:	4770      	bx	lr
    80d8:	4001e000 	.word	0x4001e000

000080dc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    80dc:	b120      	cbz	r0, 80e8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    80de:	4b03      	ldr	r3, [pc, #12]	; (80ec <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    80e0:	0180      	lsls	r0, r0, #6
    80e2:	f043 0301 	orr.w	r3, r3, #1
    80e6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    80e8:	4770      	bx	lr
    80ea:	bf00      	nop
    80ec:	00024ea0 	.word	0x00024ea0

000080f0 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    80f0:	4b0e      	ldr	r3, [pc, #56]	; (812c <bt_hex_real+0x3c>)
    80f2:	2940      	cmp	r1, #64	; 0x40
{
    80f4:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    80f6:	bf28      	it	cs
    80f8:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    80fa:	4c0d      	ldr	r4, [pc, #52]	; (8130 <bt_hex_real+0x40>)
    80fc:	1846      	adds	r6, r0, r1
    80fe:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    8100:	42b0      	cmp	r0, r6
    8102:	f103 0302 	add.w	r3, r3, #2
    8106:	d104      	bne.n	8112 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    8108:	2300      	movs	r3, #0
    810a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    810e:	4807      	ldr	r0, [pc, #28]	; (812c <bt_hex_real+0x3c>)
    8110:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    8112:	7802      	ldrb	r2, [r0, #0]
    8114:	0912      	lsrs	r2, r2, #4
    8116:	5ca2      	ldrb	r2, [r4, r2]
    8118:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    811c:	f810 2b01 	ldrb.w	r2, [r0], #1
    8120:	f002 020f 	and.w	r2, r2, #15
    8124:	5ca2      	ldrb	r2, [r4, r2]
    8126:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    812a:	e7e9      	b.n	8100 <bt_hex_real+0x10>
    812c:	200066ec 	.word	0x200066ec
    8130:	0002745b 	.word	0x0002745b

00008134 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    8134:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    8136:	7803      	ldrb	r3, [r0, #0]
    8138:	b08b      	sub	sp, #44	; 0x2c
    813a:	4604      	mov	r4, r0
    813c:	ad07      	add	r5, sp, #28
    813e:	2b03      	cmp	r3, #3
    8140:	d821      	bhi.n	8186 <bt_addr_le_str_real+0x52>
    8142:	e8df f003 	tbb	[pc, r3]
    8146:	1a02      	.short	0x1a02
    8148:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    814a:	4912      	ldr	r1, [pc, #72]	; (8194 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    814c:	4628      	mov	r0, r5
    814e:	f019 fa6a 	bl	21626 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    8152:	7863      	ldrb	r3, [r4, #1]
    8154:	9304      	str	r3, [sp, #16]
    8156:	78a3      	ldrb	r3, [r4, #2]
    8158:	9303      	str	r3, [sp, #12]
    815a:	78e3      	ldrb	r3, [r4, #3]
    815c:	9302      	str	r3, [sp, #8]
    815e:	7923      	ldrb	r3, [r4, #4]
    8160:	9301      	str	r3, [sp, #4]
    8162:	7963      	ldrb	r3, [r4, #5]
    8164:	9300      	str	r3, [sp, #0]
    8166:	4a0c      	ldr	r2, [pc, #48]	; (8198 <bt_addr_le_str_real+0x64>)
    8168:	79a3      	ldrb	r3, [r4, #6]
    816a:	9505      	str	r5, [sp, #20]
    816c:	211e      	movs	r1, #30
    816e:	480b      	ldr	r0, [pc, #44]	; (819c <bt_addr_le_str_real+0x68>)
    8170:	f016 ff7d 	bl	1f06e <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    8174:	4809      	ldr	r0, [pc, #36]	; (819c <bt_addr_le_str_real+0x68>)
    8176:	b00b      	add	sp, #44	; 0x2c
    8178:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    817a:	4909      	ldr	r1, [pc, #36]	; (81a0 <bt_addr_le_str_real+0x6c>)
    817c:	e7e6      	b.n	814c <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    817e:	4909      	ldr	r1, [pc, #36]	; (81a4 <bt_addr_le_str_real+0x70>)
    8180:	e7e4      	b.n	814c <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    8182:	4909      	ldr	r1, [pc, #36]	; (81a8 <bt_addr_le_str_real+0x74>)
    8184:	e7e2      	b.n	814c <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    8186:	4a09      	ldr	r2, [pc, #36]	; (81ac <bt_addr_le_str_real+0x78>)
    8188:	210a      	movs	r1, #10
    818a:	4628      	mov	r0, r5
    818c:	f016 ff6f 	bl	1f06e <snprintk>
		break;
    8190:	e7df      	b.n	8152 <bt_addr_le_str_real+0x1e>
    8192:	bf00      	nop
    8194:	000265ec 	.word	0x000265ec
    8198:	0002660e 	.word	0x0002660e
    819c:	2000676d 	.word	0x2000676d
    81a0:	000265f3 	.word	0x000265f3
    81a4:	000265fa 	.word	0x000265fa
    81a8:	00026604 	.word	0x00026604
    81ac:	00026df0 	.word	0x00026df0

000081b0 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    81b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    81b4:	4b64      	ldr	r3, [pc, #400]	; (8348 <ecc_thread+0x198>)
    81b6:	4d65      	ldr	r5, [pc, #404]	; (834c <ecc_thread+0x19c>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    81b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 836c <ecc_thread+0x1bc>
	return z_impl_k_sem_take(sem, timeout);
    81bc:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8370 <ecc_thread+0x1c0>
    81c0:	1aed      	subs	r5, r5, r3
    81c2:	08ed      	lsrs	r5, r5, #3
    81c4:	4647      	mov	r7, r8
    81c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    81ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    81ce:	4648      	mov	r0, r9
    81d0:	f016 fa80 	bl	1e6d4 <z_impl_k_sem_take>
    81d4:	f3bf 8f5b 	dmb	ish
    81d8:	f8d8 4000 	ldr.w	r4, [r8]
    81dc:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    81e0:	f014 0401 	ands.w	r4, r4, #1
    81e4:	d05a      	beq.n	829c <ecc_thread+0xec>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    81e6:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8364 <ecc_thread+0x1b4>
    81ea:	4c59      	ldr	r4, [pc, #356]	; (8350 <ecc_thread+0x1a0>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    81ec:	4e59      	ldr	r6, [pc, #356]	; (8354 <ecc_thread+0x1a4>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    81ee:	485a      	ldr	r0, [pc, #360]	; (8358 <ecc_thread+0x1a8>)
    81f0:	4652      	mov	r2, sl
    81f2:	4621      	mov	r1, r4
    81f4:	f018 f959 	bl	204aa <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    81f8:	bbe8      	cbnz	r0, 8276 <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
    81fa:	01a9      	lsls	r1, r5, #6
    81fc:	4857      	ldr	r0, [pc, #348]	; (835c <ecc_thread+0x1ac>)
    81fe:	f041 0101 	orr.w	r1, r1, #1
    8202:	f017 fbf5 	bl	1f9f0 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    8206:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    820a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    820e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8212:	2001      	movs	r0, #1
    8214:	f000 f998 	bl	8548 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    8218:	f100 0608 	add.w	r6, r0, #8
    821c:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    821e:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    8220:	4630      	mov	r0, r6
    8222:	f01b fb13 	bl	2384c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    8226:	233e      	movs	r3, #62	; 0x3e
    8228:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    822a:	2342      	movs	r3, #66	; 0x42
    822c:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    822e:	2101      	movs	r1, #1
    8230:	4630      	mov	r0, r6
    8232:	f01b fb0b 	bl	2384c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    8236:	2308      	movs	r3, #8
    8238:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    823a:	2141      	movs	r1, #65	; 0x41
    823c:	4630      	mov	r0, r6
    823e:	f01b fb05 	bl	2384c <net_buf_simple_add>
    8242:	4606      	mov	r6, r0
	evt->status = status;
    8244:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    8248:	f1ba 0f00 	cmp.w	sl, #0
    824c:	d01d      	beq.n	828a <ecc_thread+0xda>
		(void)memset(evt->key, 0, sizeof(evt->key));
    824e:	2240      	movs	r2, #64	; 0x40
    8250:	2100      	movs	r1, #0
    8252:	f019 fa53 	bl	216fc <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8256:	f3bf 8f5b 	dmb	ish
    825a:	e857 3f00 	ldrex	r3, [r7]
    825e:	f023 0301 	bic.w	r3, r3, #1
    8262:	e847 3200 	strex	r2, r3, [r7]
    8266:	2a00      	cmp	r2, #0
    8268:	d1f7      	bne.n	825a <ecc_thread+0xaa>
    826a:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    826e:	4620      	mov	r0, r4
	bt_recv(buf);
    8270:	f001 fd30 	bl	9cd4 <bt_recv>
	while (true) {
    8274:	e7a7      	b.n	81c6 <ecc_thread+0x16>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    8276:	2220      	movs	r2, #32
    8278:	4631      	mov	r1, r6
    827a:	4620      	mov	r0, r4
    827c:	f019 fa03 	bl	21686 <memcmp>
    8280:	2800      	cmp	r0, #0
    8282:	d0b4      	beq.n	81ee <ecc_thread+0x3e>
	return 0;
    8284:	f04f 0a00 	mov.w	sl, #0
    8288:	e7bf      	b.n	820a <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
    828a:	4933      	ldr	r1, [pc, #204]	; (8358 <ecc_thread+0x1a8>)
    828c:	f019 fad6 	bl	2183c <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
    8290:	4933      	ldr	r1, [pc, #204]	; (8360 <ecc_thread+0x1b0>)
    8292:	f106 0021 	add.w	r0, r6, #33	; 0x21
    8296:	f019 fad1 	bl	2183c <sys_memcpy_swap.constprop.0>
    829a:	e7dc      	b.n	8256 <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    829c:	f3bf 8f5b 	dmb	ish
    82a0:	f8d8 3000 	ldr.w	r3, [r8]
    82a4:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    82a8:	079b      	lsls	r3, r3, #30
    82aa:	d58c      	bpl.n	81c6 <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    82ac:	492d      	ldr	r1, [pc, #180]	; (8364 <ecc_thread+0x1b4>)
    82ae:	482a      	ldr	r0, [pc, #168]	; (8358 <ecc_thread+0x1a8>)
    82b0:	f018 ffca 	bl	21248 <uECC_valid_public_key>
	if (ret < 0) {
    82b4:	1e01      	subs	r1, r0, #0
    82b6:	da38      	bge.n	832a <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
    82b8:	01aa      	lsls	r2, r5, #6
    82ba:	482b      	ldr	r0, [pc, #172]	; (8368 <ecc_thread+0x1b8>)
    82bc:	f042 0201 	orr.w	r2, r2, #1
    82c0:	f017 fba3 	bl	1fa0a <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    82c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    82c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    82cc:	2001      	movs	r0, #1
    82ce:	f000 f93b 	bl	8548 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    82d2:	f100 0a08 	add.w	sl, r0, #8
    82d6:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    82d8:	4606      	mov	r6, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    82da:	4650      	mov	r0, sl
    82dc:	f01b fab6 	bl	2384c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    82e0:	233e      	movs	r3, #62	; 0x3e
    82e2:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    82e4:	2322      	movs	r3, #34	; 0x22
    82e6:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    82e8:	2101      	movs	r1, #1
    82ea:	4650      	mov	r0, sl
    82ec:	f01b faae 	bl	2384c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    82f0:	2309      	movs	r3, #9
    82f2:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    82f4:	2121      	movs	r1, #33	; 0x21
    82f6:	4650      	mov	r0, sl
    82f8:	f01b faa8 	bl	2384c <net_buf_simple_add>
    82fc:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    82fe:	3001      	adds	r0, #1
    8300:	b9e4      	cbnz	r4, 833c <ecc_thread+0x18c>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    8302:	221f      	movs	r2, #31
    8304:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    8306:	21ff      	movs	r1, #255	; 0xff
    8308:	2220      	movs	r2, #32
    830a:	f019 f9f7 	bl	216fc <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    830e:	f3bf 8f5b 	dmb	ish
    8312:	e857 3f00 	ldrex	r3, [r7]
    8316:	f023 0302 	bic.w	r3, r3, #2
    831a:	e847 3200 	strex	r2, r3, [r7]
    831e:	2a00      	cmp	r2, #0
    8320:	d1f7      	bne.n	8312 <ecc_thread+0x162>
    8322:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    8326:	4630      	mov	r0, r6
    8328:	e7a2      	b.n	8270 <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.public_key_be, ecc.private_key_be,
    832a:	4a0b      	ldr	r2, [pc, #44]	; (8358 <ecc_thread+0x1a8>)
    832c:	4b0d      	ldr	r3, [pc, #52]	; (8364 <ecc_thread+0x1b4>)
    832e:	f1a2 0120 	sub.w	r1, r2, #32
    8332:	4610      	mov	r0, r2
    8334:	f018 f908 	bl	20548 <uECC_shared_secret>
    8338:	4604      	mov	r4, r0
    833a:	e7c3      	b.n	82c4 <ecc_thread+0x114>
		evt->status = 0U;
    833c:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    833e:	4906      	ldr	r1, [pc, #24]	; (8358 <ecc_thread+0x1a8>)
		evt->status = 0U;
    8340:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    8342:	f019 fa7b 	bl	2183c <sys_memcpy_swap.constprop.0>
    8346:	e7e2      	b.n	830e <ecc_thread+0x15e>
    8348:	00024c24 	.word	0x00024c24
    834c:	00024cec 	.word	0x00024cec
    8350:	2000678b 	.word	0x2000678b
    8354:	000274cf 	.word	0x000274cf
    8358:	200067ab 	.word	0x200067ab
    835c:	00027473 	.word	0x00027473
    8360:	200067cb 	.word	0x200067cb
    8364:	00025100 	.word	0x00025100
    8368:	0002749c 	.word	0x0002749c
    836c:	20002994 	.word	0x20002994
    8370:	20000878 	.word	0x20000878

00008374 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    8374:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return ((struct bt_buf_data *)net_buf_user_data(buf))->type;
    8376:	7d05      	ldrb	r5, [r0, #20]
    8378:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    837a:	b9ad      	cbnz	r5, 83a8 <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    837c:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    837e:	881a      	ldrh	r2, [r3, #0]
    8380:	f242 0125 	movw	r1, #8229	; 0x2025
    8384:	428a      	cmp	r2, r1
    8386:	d017      	beq.n	83b8 <bt_hci_ecc_send+0x44>
    8388:	f242 0126 	movw	r1, #8230	; 0x2026
    838c:	428a      	cmp	r2, r1
    838e:	d03c      	beq.n	840a <bt_hci_ecc_send+0x96>
    8390:	f242 0101 	movw	r1, #8193	; 0x2001
    8394:	428a      	cmp	r2, r1
    8396:	d107      	bne.n	83a8 <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    8398:	78da      	ldrb	r2, [r3, #3]
    839a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    839e:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    83a0:	791a      	ldrb	r2, [r3, #4]
    83a2:	f022 0201 	bic.w	r2, r2, #1
    83a6:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    83a8:	4b31      	ldr	r3, [pc, #196]	; (8470 <bt_hci_ecc_send+0xfc>)
    83aa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    83ae:	4620      	mov	r0, r4
    83b0:	691b      	ldr	r3, [r3, #16]
}
    83b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    83b6:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
    83b8:	2103      	movs	r1, #3
    83ba:	3008      	adds	r0, #8
    83bc:	f01b fa6f 	bl	2389e <net_buf_simple_pull>
	net_buf_unref(buf);
    83c0:	4620      	mov	r0, r4
    83c2:	f013 f8c7 	bl	1b554 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    83c6:	f3bf 8f5b 	dmb	ish
    83ca:	4b2a      	ldr	r3, [pc, #168]	; (8474 <bt_hci_ecc_send+0x100>)
    83cc:	681a      	ldr	r2, [r3, #0]
    83ce:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    83d2:	0790      	lsls	r0, r2, #30
    83d4:	d507      	bpl.n	83e6 <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    83d6:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    83d8:	4629      	mov	r1, r5
    83da:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    83de:	f019 fa09 	bl	217f4 <send_cmd_status>
}
    83e2:	2000      	movs	r0, #0
    83e4:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    83e6:	f3bf 8f5b 	dmb	ish
    83ea:	e853 2f00 	ldrex	r2, [r3]
    83ee:	f042 0101 	orr.w	r1, r2, #1
    83f2:	e843 1000 	strex	r0, r1, [r3]
    83f6:	2800      	cmp	r0, #0
    83f8:	d1f7      	bne.n	83ea <bt_hci_ecc_send+0x76>
    83fa:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    83fe:	07d1      	lsls	r1, r2, #31
    8400:	d4e9      	bmi.n	83d6 <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
    8402:	481d      	ldr	r0, [pc, #116]	; (8478 <bt_hci_ecc_send+0x104>)
    8404:	f016 f940 	bl	1e688 <z_impl_k_sem_give>
}
    8408:	e7e6      	b.n	83d8 <bt_hci_ecc_send+0x64>
			net_buf_pull(buf, sizeof(*chdr));
    840a:	2103      	movs	r1, #3
    840c:	3008      	adds	r0, #8
    840e:	f01b fa46 	bl	2389e <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8412:	f3bf 8f5b 	dmb	ish
    8416:	4b17      	ldr	r3, [pc, #92]	; (8474 <bt_hci_ecc_send+0x100>)
    8418:	681a      	ldr	r2, [r3, #0]
    841a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    841e:	07d2      	lsls	r2, r2, #31
    8420:	d507      	bpl.n	8432 <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    8422:	250c      	movs	r5, #12
	net_buf_unref(buf);
    8424:	4620      	mov	r0, r4
    8426:	f013 f895 	bl	1b554 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    842a:	4629      	mov	r1, r5
    842c:	f242 0026 	movw	r0, #8230	; 0x2026
    8430:	e7d5      	b.n	83de <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    8432:	89a2      	ldrh	r2, [r4, #12]
    8434:	2a3f      	cmp	r2, #63	; 0x3f
    8436:	d919      	bls.n	846c <bt_hci_ecc_send+0xf8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8438:	f3bf 8f5b 	dmb	ish
    843c:	e853 2f00 	ldrex	r2, [r3]
    8440:	f042 0102 	orr.w	r1, r2, #2
    8444:	e843 1000 	strex	r0, r1, [r3]
    8448:	2800      	cmp	r0, #0
    844a:	d1f7      	bne.n	843c <bt_hci_ecc_send+0xc8>
    844c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    8450:	0793      	lsls	r3, r2, #30
    8452:	d4e6      	bmi.n	8422 <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    8454:	68a1      	ldr	r1, [r4, #8]
	sys_memcpy_swap(ecc.public_key_be, cmd->key, 32);
    8456:	4809      	ldr	r0, [pc, #36]	; (847c <bt_hci_ecc_send+0x108>)
    8458:	f019 f9f0 	bl	2183c <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[32], &cmd->key[32], 32);
    845c:	4808      	ldr	r0, [pc, #32]	; (8480 <bt_hci_ecc_send+0x10c>)
    845e:	3120      	adds	r1, #32
    8460:	f019 f9ec 	bl	2183c <sys_memcpy_swap.constprop.0>
	z_impl_k_sem_give(sem);
    8464:	4804      	ldr	r0, [pc, #16]	; (8478 <bt_hci_ecc_send+0x104>)
    8466:	f016 f90f 	bl	1e688 <z_impl_k_sem_give>
}
    846a:	e7db      	b.n	8424 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    846c:	2512      	movs	r5, #18
    846e:	e7d9      	b.n	8424 <bt_hci_ecc_send+0xb0>
    8470:	20000000 	.word	0x20000000
    8474:	20002994 	.word	0x20002994
    8478:	20000878 	.word	0x20000878
    847c:	200067ab 	.word	0x200067ab
    8480:	200067cb 	.word	0x200067cb

00008484 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    8484:	b510      	push	{r4, lr}
    8486:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8488:	4c0c      	ldr	r4, [pc, #48]	; (84bc <bt_hci_ecc_init+0x38>)
    848a:	490d      	ldr	r1, [pc, #52]	; (84c0 <bt_hci_ecc_init+0x3c>)
    848c:	2200      	movs	r2, #0
    848e:	2300      	movs	r3, #0
    8490:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8494:	2300      	movs	r3, #0
    8496:	220a      	movs	r2, #10
    8498:	e9cd 2303 	strd	r2, r3, [sp, #12]
    849c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    84a0:	9300      	str	r3, [sp, #0]
    84a2:	f44f 628a 	mov.w	r2, #1104	; 0x450
    84a6:	4b07      	ldr	r3, [pc, #28]	; (84c4 <bt_hci_ecc_init+0x40>)
    84a8:	4620      	mov	r0, r4
    84aa:	f016 f987 	bl	1e7bc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    84ae:	4906      	ldr	r1, [pc, #24]	; (84c8 <bt_hci_ecc_init+0x44>)
    84b0:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    84b2:	b008      	add	sp, #32
    84b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    84b8:	f01b bfe8 	b.w	2448c <z_impl_k_thread_name_set>
    84bc:	20000d80 	.word	0x20000d80
    84c0:	20007620 	.word	0x20007620
    84c4:	000081b1 	.word	0x000081b1
    84c8:	000274bd 	.word	0x000274bd

000084cc <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    84cc:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    84ce:	7802      	ldrb	r2, [r0, #0]
    84d0:	2a01      	cmp	r2, #1
{
    84d2:	4604      	mov	r4, r0
    84d4:	460b      	mov	r3, r1
	switch (src->type) {
    84d6:	d016      	beq.n	8506 <uuid_to_uuid128+0x3a>
    84d8:	2a02      	cmp	r2, #2
    84da:	d02c      	beq.n	8536 <uuid_to_uuid128+0x6a>
    84dc:	b98a      	cbnz	r2, 8502 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    84de:	4a19      	ldr	r2, [pc, #100]	; (8544 <uuid_to_uuid128+0x78>)
    84e0:	460d      	mov	r5, r1
    84e2:	f102 0710 	add.w	r7, r2, #16
    84e6:	6810      	ldr	r0, [r2, #0]
    84e8:	6851      	ldr	r1, [r2, #4]
    84ea:	462e      	mov	r6, r5
    84ec:	c603      	stmia	r6!, {r0, r1}
    84ee:	3208      	adds	r2, #8
    84f0:	42ba      	cmp	r2, r7
    84f2:	4635      	mov	r5, r6
    84f4:	d1f7      	bne.n	84e6 <uuid_to_uuid128+0x1a>
    84f6:	7812      	ldrb	r2, [r2, #0]
    84f8:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    84fa:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    84fc:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    84fe:	0a12      	lsrs	r2, r2, #8
    8500:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    8502:	bcf0      	pop	{r4, r5, r6, r7}
    8504:	4770      	bx	lr
		*dst = uuid128_base;
    8506:	4a0f      	ldr	r2, [pc, #60]	; (8544 <uuid_to_uuid128+0x78>)
    8508:	460d      	mov	r5, r1
    850a:	f102 0710 	add.w	r7, r2, #16
    850e:	6810      	ldr	r0, [r2, #0]
    8510:	6851      	ldr	r1, [r2, #4]
    8512:	462e      	mov	r6, r5
    8514:	c603      	stmia	r6!, {r0, r1}
    8516:	3208      	adds	r2, #8
    8518:	42ba      	cmp	r2, r7
    851a:	4635      	mov	r5, r6
    851c:	d1f7      	bne.n	850e <uuid_to_uuid128+0x42>
    851e:	7812      	ldrb	r2, [r2, #0]
    8520:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    8522:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    8524:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    8526:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    852a:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    852c:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    852e:	0a12      	lsrs	r2, r2, #8
    8530:	7399      	strb	r1, [r3, #14]
    8532:	741a      	strb	r2, [r3, #16]
}
    8534:	e7e5      	b.n	8502 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
    8536:	4601      	mov	r1, r0
}
    8538:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    853a:	2211      	movs	r2, #17
    853c:	4618      	mov	r0, r3
    853e:	f019 b8b2 	b.w	216a6 <memcpy>
    8542:	bf00      	nop
    8544:	000274ef 	.word	0x000274ef

00008548 <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    8548:	b538      	push	{r3, r4, r5, lr}
    854a:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    854c:	4805      	ldr	r0, [pc, #20]	; (8564 <bt_buf_get_rx+0x1c>)
    854e:	f01b f921 	bl	23794 <net_buf_alloc_fixed>
#endif

	if (buf) {
    8552:	4604      	mov	r4, r0
    8554:	b120      	cbz	r0, 8560 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    8556:	2100      	movs	r1, #0
    8558:	3008      	adds	r0, #8
    855a:	f01b f940 	bl	237de <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    855e:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    8560:	4620      	mov	r0, r4
    8562:	bd38      	pop	{r3, r4, r5, pc}
    8564:	200009c0 	.word	0x200009c0

00008568 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    8568:	b570      	push	{r4, r5, r6, lr}
    856a:	4602      	mov	r2, r0
    856c:	460b      	mov	r3, r1
	__asm__ volatile(
    856e:	f04f 0120 	mov.w	r1, #32
    8572:	f3ef 8511 	mrs	r5, BASEPRI
    8576:	f381 8811 	msr	BASEPRI, r1
    857a:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    857e:	480c      	ldr	r0, [pc, #48]	; (85b0 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    8580:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    8582:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
    8586:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
	__asm__ volatile(
    858a:	f385 8811 	msr	BASEPRI, r5
    858e:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    8592:	b924      	cbnz	r4, 859e <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    8594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8598:	2001      	movs	r0, #1
    859a:	f7ff bfd5 	b.w	8548 <bt_buf_get_rx>
    859e:	2301      	movs	r3, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
    85a0:	f104 0008 	add.w	r0, r4, #8
    85a4:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    85a6:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    85a8:	f01b f919 	bl	237de <net_buf_simple_reserve>
}
    85ac:	4620      	mov	r0, r4
    85ae:	bd70      	pop	{r4, r5, r6, pc}
    85b0:	20000000 	.word	0x20000000

000085b4 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    85b4:	b570      	push	{r4, r5, r6, lr}
    85b6:	4604      	mov	r4, r0
	switch (evt) {
    85b8:	2c0f      	cmp	r4, #15
{
    85ba:	460d      	mov	r5, r1
    85bc:	4610      	mov	r0, r2
    85be:	4619      	mov	r1, r3
	switch (evt) {
    85c0:	d805      	bhi.n	85ce <bt_buf_get_evt+0x1a>
    85c2:	2c0d      	cmp	r4, #13
    85c4:	d912      	bls.n	85ec <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    85c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    85ca:	f7ff bfcd 	b.w	8568 <bt_buf_get_cmd_complete>
	switch (evt) {
    85ce:	2c13      	cmp	r4, #19
    85d0:	d10c      	bne.n	85ec <bt_buf_get_evt+0x38>
			buf = net_buf_alloc(&num_complete_pool, timeout);
    85d2:	480b      	ldr	r0, [pc, #44]	; (8600 <bt_buf_get_evt+0x4c>)
			buf = net_buf_alloc(&discardable_pool, timeout);
    85d4:	f01b f8de 	bl	23794 <net_buf_alloc_fixed>
			if (buf) {
    85d8:	4604      	mov	r4, r0
    85da:	b128      	cbz	r0, 85e8 <bt_buf_get_evt+0x34>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    85dc:	2100      	movs	r1, #0
    85de:	3008      	adds	r0, #8
    85e0:	f01b f8fd 	bl	237de <net_buf_simple_reserve>
    85e4:	2301      	movs	r3, #1
    85e6:	7523      	strb	r3, [r4, #20]
}
    85e8:	4620      	mov	r0, r4
    85ea:	bd70      	pop	{r4, r5, r6, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
    85ec:	4602      	mov	r2, r0
    85ee:	460b      	mov	r3, r1
		if (discardable) {
    85f0:	b10d      	cbz	r5, 85f6 <bt_buf_get_evt+0x42>
			buf = net_buf_alloc(&discardable_pool, timeout);
    85f2:	4804      	ldr	r0, [pc, #16]	; (8604 <bt_buf_get_evt+0x50>)
    85f4:	e7ee      	b.n	85d4 <bt_buf_get_evt+0x20>
}
    85f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    85fa:	2001      	movs	r0, #1
    85fc:	f7ff bfa4 	b.w	8548 <bt_buf_get_rx>
    8600:	200009e8 	.word	0x200009e8
    8604:	20000948 	.word	0x20000948

00008608 <le_dhkey_complete>:
{
    8608:	b510      	push	{r4, lr}
	if (dh_key_cb) {
    860a:	4c06      	ldr	r4, [pc, #24]	; (8624 <le_dhkey_complete+0x1c>)
    860c:	6822      	ldr	r2, [r4, #0]
    860e:	b132      	cbz	r2, 861e <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    8610:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    8612:	7803      	ldrb	r3, [r0, #0]
    8614:	b923      	cbnz	r3, 8620 <le_dhkey_complete+0x18>
    8616:	3001      	adds	r0, #1
    8618:	4790      	blx	r2
		dh_key_cb = NULL;
    861a:	2300      	movs	r3, #0
    861c:	6023      	str	r3, [r4, #0]
}
    861e:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    8620:	2000      	movs	r0, #0
    8622:	e7f9      	b.n	8618 <le_dhkey_complete+0x10>
    8624:	200029b0 	.word	0x200029b0

00008628 <ver_str>:
{
    8628:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    862a:	4d0b      	ldr	r5, [pc, #44]	; (8658 <ver_str+0x30>)
{
    862c:	4606      	mov	r6, r0
	const char * const str[] = {
    862e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    8630:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    8632:	466c      	mov	r4, sp
    8634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    863a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    863e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    8642:	2e0b      	cmp	r6, #11
		return str[ver];
    8644:	bf9b      	ittet	ls
    8646:	ab0c      	addls	r3, sp, #48	; 0x30
    8648:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    864c:	4803      	ldrhi	r0, [pc, #12]	; (865c <ver_str+0x34>)
		return str[ver];
    864e:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    8652:	b00c      	add	sp, #48	; 0x30
    8654:	bd70      	pop	{r4, r5, r6, pc}
    8656:	bf00      	nop
    8658:	00024df0 	.word	0x00024df0
    865c:	000275f2 	.word	0x000275f2

00008660 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    8660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    8662:	4f0a      	ldr	r7, [pc, #40]	; (868c <id_find+0x2c>)
{
    8664:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    8666:	2500      	movs	r5, #0
    8668:	79fb      	ldrb	r3, [r7, #7]
    866a:	b2ec      	uxtb	r4, r5
    866c:	42a3      	cmp	r3, r4
    866e:	d802      	bhi.n	8676 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    8670:	f06f 0401 	mvn.w	r4, #1
    8674:	e008      	b.n	8688 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    8676:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    867a:	4439      	add	r1, r7
    867c:	4630      	mov	r0, r6
    867e:	f019 f978 	bl	21972 <bt_addr_le_cmp>
    8682:	3501      	adds	r5, #1
    8684:	2800      	cmp	r0, #0
    8686:	d1ef      	bne.n	8668 <id_find+0x8>
}
    8688:	4620      	mov	r0, r4
    868a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    868c:	20000000 	.word	0x20000000

00008690 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    8690:	6843      	ldr	r3, [r0, #4]
{
    8692:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8694:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    8696:	0558      	lsls	r0, r3, #21
    8698:	d502      	bpl.n	86a0 <valid_adv_param+0x10>
		return false;
    869a:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    869c:	b003      	add	sp, #12
    869e:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    86a0:	6922      	ldr	r2, [r4, #16]
    86a2:	b10a      	cbz	r2, 86a8 <valid_adv_param+0x18>
    86a4:	07d9      	lsls	r1, r3, #31
    86a6:	d5f8      	bpl.n	869a <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    86a8:	4d17      	ldr	r5, [pc, #92]	; (8708 <valid_adv_param+0x78>)
    86aa:	7820      	ldrb	r0, [r4, #0]
    86ac:	79eb      	ldrb	r3, [r5, #7]
    86ae:	4283      	cmp	r3, r0
    86b0:	d9f3      	bls.n	869a <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    86b2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    86b6:	2300      	movs	r3, #0
    86b8:	4669      	mov	r1, sp
    86ba:	4428      	add	r0, r5
    86bc:	9300      	str	r3, [sp, #0]
    86be:	f8cd 3003 	str.w	r3, [sp, #3]
    86c2:	f019 f956 	bl	21972 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    86c6:	2800      	cmp	r0, #0
    86c8:	d0e7      	beq.n	869a <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    86ca:	6860      	ldr	r0, [r4, #4]
    86cc:	07c2      	lsls	r2, r0, #31
    86ce:	d406      	bmi.n	86de <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    86d0:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    86d4:	2b08      	cmp	r3, #8
    86d6:	d802      	bhi.n	86de <valid_adv_param+0x4e>
    86d8:	68a3      	ldr	r3, [r4, #8]
    86da:	2b9f      	cmp	r3, #159	; 0x9f
    86dc:	d9dd      	bls.n	869a <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    86de:	06c3      	lsls	r3, r0, #27
    86e0:	d401      	bmi.n	86e6 <valid_adv_param+0x56>
    86e2:	6923      	ldr	r3, [r4, #16]
    86e4:	b943      	cbnz	r3, 86f8 <valid_adv_param+0x68>
		if (param->interval_min > param->interval_max ||
    86e6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    86ea:	429a      	cmp	r2, r3
    86ec:	d8d5      	bhi.n	869a <valid_adv_param+0xa>
    86ee:	2a1f      	cmp	r2, #31
    86f0:	d9d3      	bls.n	869a <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    86f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    86f6:	d8d0      	bhi.n	869a <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    86f8:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    86fc:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    8700:	bf18      	it	ne
    8702:	2001      	movne	r0, #1
    8704:	e7ca      	b.n	869c <valid_adv_param+0xc>
    8706:	bf00      	nop
    8708:	20000000 	.word	0x20000000

0000870c <hci_data_buf_overflow>:
    870c:	4905      	ldr	r1, [pc, #20]	; (8724 <hci_data_buf_overflow+0x18>)
    870e:	4a06      	ldr	r2, [pc, #24]	; (8728 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    8710:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    8712:	4806      	ldr	r0, [pc, #24]	; (872c <hci_data_buf_overflow+0x20>)
    8714:	1a52      	subs	r2, r2, r1
    8716:	08d2      	lsrs	r2, r2, #3
    8718:	0192      	lsls	r2, r2, #6
    871a:	7819      	ldrb	r1, [r3, #0]
    871c:	f042 0202 	orr.w	r2, r2, #2
    8720:	f017 b973 	b.w	1fa0a <log_1>
    8724:	00024c24 	.word	0x00024c24
    8728:	00024ce4 	.word	0x00024ce4
    872c:	000275fa 	.word	0x000275fa

00008730 <le_pkey_complete>:
{
    8730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    8732:	6886      	ldr	r6, [r0, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8734:	480f      	ldr	r0, [pc, #60]	; (8774 <le_pkey_complete+0x44>)
    8736:	f06f 0110 	mvn.w	r1, #16
    873a:	f019 f91d 	bl	21978 <atomic_and>
	if (!evt->status) {
    873e:	7833      	ldrb	r3, [r6, #0]
    8740:	b943      	cbnz	r3, 8754 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    8742:	1c71      	adds	r1, r6, #1
    8744:	480c      	ldr	r0, [pc, #48]	; (8778 <le_pkey_complete+0x48>)
    8746:	2240      	movs	r2, #64	; 0x40
    8748:	f018 ffad 	bl	216a6 <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    874c:	4809      	ldr	r0, [pc, #36]	; (8774 <le_pkey_complete+0x44>)
    874e:	2108      	movs	r1, #8
    8750:	f019 f921 	bl	21996 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8754:	4d09      	ldr	r5, [pc, #36]	; (877c <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    8756:	4f08      	ldr	r7, [pc, #32]	; (8778 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8758:	682c      	ldr	r4, [r5, #0]
    875a:	b90c      	cbnz	r4, 8760 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    875c:	602c      	str	r4, [r5, #0]
}
    875e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    8760:	7832      	ldrb	r2, [r6, #0]
    8762:	6823      	ldr	r3, [r4, #0]
    8764:	2a00      	cmp	r2, #0
    8766:	bf0c      	ite	eq
    8768:	4638      	moveq	r0, r7
    876a:	2000      	movne	r0, #0
    876c:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    876e:	6864      	ldr	r4, [r4, #4]
    8770:	e7f3      	b.n	875a <le_pkey_complete+0x2a>
    8772:	bf00      	nop
    8774:	20000094 	.word	0x20000094
    8778:	200067eb 	.word	0x200067eb
    877c:	200029b4 	.word	0x200029b4

00008780 <hci_hardware_error>:
{
    8780:	b508      	push	{r3, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    8782:	2101      	movs	r1, #1
    8784:	3008      	adds	r0, #8
    8786:	f01b f892 	bl	238ae <net_buf_simple_pull_mem>
    878a:	4b06      	ldr	r3, [pc, #24]	; (87a4 <hci_hardware_error+0x24>)
    878c:	4a06      	ldr	r2, [pc, #24]	; (87a8 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    878e:	7801      	ldrb	r1, [r0, #0]
    8790:	4806      	ldr	r0, [pc, #24]	; (87ac <hci_hardware_error+0x2c>)
    8792:	1ad2      	subs	r2, r2, r3
    8794:	08d2      	lsrs	r2, r2, #3
    8796:	0192      	lsls	r2, r2, #6
}
    8798:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    879c:	f042 0201 	orr.w	r2, r2, #1
    87a0:	f017 b933 	b.w	1fa0a <log_1>
    87a4:	00024c24 	.word	0x00024c24
    87a8:	00024ce4 	.word	0x00024ce4
    87ac:	00027622 	.word	0x00027622

000087b0 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    87b0:	6883      	ldr	r3, [r0, #8]
{
    87b2:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    87b4:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    87b6:	4620      	mov	r0, r4
    87b8:	f002 fb7c 	bl	aeb4 <bt_conn_lookup_handle>
	if (!conn) {
    87bc:	b960      	cbnz	r0, 87d8 <le_data_len_change+0x28>
    87be:	4a08      	ldr	r2, [pc, #32]	; (87e0 <le_data_len_change+0x30>)
    87c0:	4b08      	ldr	r3, [pc, #32]	; (87e4 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    87c2:	4809      	ldr	r0, [pc, #36]	; (87e8 <le_data_len_change+0x38>)
    87c4:	1ad2      	subs	r2, r2, r3
    87c6:	08d2      	lsrs	r2, r2, #3
    87c8:	0192      	lsls	r2, r2, #6
    87ca:	4621      	mov	r1, r4
    87cc:	f042 0201 	orr.w	r2, r2, #1
}
    87d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    87d4:	f017 b919 	b.w	1fa0a <log_1>
}
    87d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    87dc:	f019 bb50 	b.w	21e80 <bt_conn_unref>
    87e0:	00024ce4 	.word	0x00024ce4
    87e4:	00024c24 	.word	0x00024c24
    87e8:	00027644 	.word	0x00027644

000087ec <hci_disconn_complete_prio>:
{
    87ec:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    87ee:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    87f0:	781a      	ldrb	r2, [r3, #0]
    87f2:	b9da      	cbnz	r2, 882c <hci_disconn_complete_prio+0x40>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    87f4:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    87f8:	4628      	mov	r0, r5
    87fa:	f002 fb5b 	bl	aeb4 <bt_conn_lookup_handle>
	if (!conn) {
    87fe:	4604      	mov	r4, r0
    8800:	b960      	cbnz	r0, 881c <hci_disconn_complete_prio+0x30>
    8802:	4b0b      	ldr	r3, [pc, #44]	; (8830 <hci_disconn_complete_prio+0x44>)
    8804:	4a0b      	ldr	r2, [pc, #44]	; (8834 <hci_disconn_complete_prio+0x48>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    8806:	480c      	ldr	r0, [pc, #48]	; (8838 <hci_disconn_complete_prio+0x4c>)
    8808:	1ad2      	subs	r2, r2, r3
    880a:	08d2      	lsrs	r2, r2, #3
    880c:	0192      	lsls	r2, r2, #6
    880e:	4629      	mov	r1, r5
    8810:	f042 0201 	orr.w	r2, r2, #1
}
    8814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8818:	f017 b8f7 	b.w	1fa0a <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    881c:	2101      	movs	r1, #1
    881e:	f002 fb55 	bl	aecc <bt_conn_set_state>
	bt_conn_unref(conn);
    8822:	4620      	mov	r0, r4
}
    8824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    8828:	f019 bb2a 	b.w	21e80 <bt_conn_unref>
}
    882c:	bd38      	pop	{r3, r4, r5, pc}
    882e:	bf00      	nop
    8830:	00024c24 	.word	0x00024c24
    8834:	00024ce4 	.word	0x00024ce4
    8838:	00027668 	.word	0x00027668

0000883c <hci_disconn_complete>:
{
    883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    883e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    8840:	7835      	ldrb	r5, [r6, #0]
    8842:	b9f5      	cbnz	r5, 8882 <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8844:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    8848:	4638      	mov	r0, r7
    884a:	f002 fb33 	bl	aeb4 <bt_conn_lookup_handle>
	if (!conn) {
    884e:	4604      	mov	r4, r0
    8850:	b960      	cbnz	r0, 886c <hci_disconn_complete+0x30>
    8852:	4b0c      	ldr	r3, [pc, #48]	; (8884 <hci_disconn_complete+0x48>)
    8854:	4a0c      	ldr	r2, [pc, #48]	; (8888 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    8856:	480d      	ldr	r0, [pc, #52]	; (888c <hci_disconn_complete+0x50>)
    8858:	1ad2      	subs	r2, r2, r3
    885a:	08d2      	lsrs	r2, r2, #3
    885c:	0192      	lsls	r2, r2, #6
    885e:	4639      	mov	r1, r7
    8860:	f042 0201 	orr.w	r2, r2, #1
}
    8864:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8868:	f017 b8cf 	b.w	1fa0a <log_1>
	conn->err = evt->reason;
    886c:	78f3      	ldrb	r3, [r6, #3]
    886e:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8870:	4629      	mov	r1, r5
    8872:	f002 fb2b 	bl	aecc <bt_conn_set_state>
	conn->handle = 0U;
    8876:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    8878:	4620      	mov	r0, r4
}
    887a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    887e:	f019 baff 	b.w	21e80 <bt_conn_unref>
}
    8882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8884:	00024c24 	.word	0x00024c24
    8888:	00024ce4 	.word	0x00024ce4
    888c:	00027668 	.word	0x00027668

00008890 <hci_vendor_event>:
{
    8890:	b510      	push	{r4, lr}
    8892:	4a0a      	ldr	r2, [pc, #40]	; (88bc <hci_vendor_event+0x2c>)
    8894:	4c0a      	ldr	r4, [pc, #40]	; (88c0 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    8896:	8981      	ldrh	r1, [r0, #12]
    8898:	6880      	ldr	r0, [r0, #8]
    889a:	1aa4      	subs	r4, r4, r2
    889c:	f7ff fc28 	bl	80f0 <bt_hex_real>
    88a0:	f7fb fbae 	bl	4000 <log_strdup>
    88a4:	08e4      	lsrs	r4, r4, #3
    88a6:	01a4      	lsls	r4, r4, #6
    88a8:	f044 0402 	orr.w	r4, r4, #2
    88ac:	4601      	mov	r1, r0
    88ae:	4622      	mov	r2, r4
    88b0:	4804      	ldr	r0, [pc, #16]	; (88c4 <hci_vendor_event+0x34>)
}
    88b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    88b6:	f017 b8a8 	b.w	1fa0a <log_1>
    88ba:	bf00      	nop
    88bc:	00024c24 	.word	0x00024c24
    88c0:	00024ce4 	.word	0x00024ce4
    88c4:	0002768e 	.word	0x0002768e

000088c8 <le_conn_update_complete>:
{
    88c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    88ca:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    88cc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    88d0:	4630      	mov	r0, r6
    88d2:	f002 faef 	bl	aeb4 <bt_conn_lookup_handle>
	if (!conn) {
    88d6:	4604      	mov	r4, r0
    88d8:	b960      	cbnz	r0, 88f4 <le_conn_update_complete+0x2c>
    88da:	4a1f      	ldr	r2, [pc, #124]	; (8958 <le_conn_update_complete+0x90>)
    88dc:	4b1f      	ldr	r3, [pc, #124]	; (895c <le_conn_update_complete+0x94>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    88de:	4820      	ldr	r0, [pc, #128]	; (8960 <le_conn_update_complete+0x98>)
    88e0:	1ad2      	subs	r2, r2, r3
    88e2:	08d2      	lsrs	r2, r2, #3
    88e4:	0192      	lsls	r2, r2, #6
    88e6:	f042 0201 	orr.w	r2, r2, #1
    88ea:	4631      	mov	r1, r6
    88ec:	f017 f88d 	bl	1fa0a <log_1>
}
    88f0:	b002      	add	sp, #8
    88f2:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    88f4:	782b      	ldrb	r3, [r5, #0]
    88f6:	b9bb      	cbnz	r3, 8928 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    88f8:	792a      	ldrb	r2, [r5, #4]
    88fa:	78eb      	ldrb	r3, [r5, #3]
    88fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8900:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    8904:	79aa      	ldrb	r2, [r5, #6]
    8906:	796b      	ldrb	r3, [r5, #5]
    8908:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    890c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    8910:	79eb      	ldrb	r3, [r5, #7]
    8912:	7a2a      	ldrb	r2, [r5, #8]
    8914:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8918:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    891c:	f002 f8b6 	bl	aa8c <notify_le_param_updated>
	bt_conn_unref(conn);
    8920:	4620      	mov	r0, r4
    8922:	f019 faad 	bl	21e80 <bt_conn_unref>
    8926:	e7e3      	b.n	88f0 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    8928:	2b1a      	cmp	r3, #26
    892a:	d1f9      	bne.n	8920 <le_conn_update_complete+0x58>
    892c:	78c3      	ldrb	r3, [r0, #3]
    892e:	2b01      	cmp	r3, #1
    8930:	d1f6      	bne.n	8920 <le_conn_update_complete+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    8932:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8936:	3004      	adds	r0, #4
    8938:	f019 f82d 	bl	21996 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    893c:	0543      	lsls	r3, r0, #21
    893e:	d4ef      	bmi.n	8920 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
    8940:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8944:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    8946:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    8948:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    894c:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    894e:	4620      	mov	r0, r4
    8950:	f002 ff2e 	bl	b7b0 <bt_l2cap_update_conn_param>
    8954:	e7e4      	b.n	8920 <le_conn_update_complete+0x58>
    8956:	bf00      	nop
    8958:	00024ce4 	.word	0x00024ce4
    895c:	00024c24 	.word	0x00024c24
    8960:	00027644 	.word	0x00027644

00008964 <update_sec_level>:
{
    8964:	b510      	push	{r4, lr}
	if (!conn->encrypt) {
    8966:	7ac3      	ldrb	r3, [r0, #11]
{
    8968:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    896a:	b913      	cbnz	r3, 8972 <update_sec_level+0xe>
		conn->sec_level = BT_SECURITY_L1;
    896c:	2301      	movs	r3, #1
    896e:	7243      	strb	r3, [r0, #9]
}
    8970:	bd10      	pop	{r4, pc}
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    8972:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    8976:	b1fb      	cbz	r3, 89b8 <update_sec_level+0x54>
    8978:	7b5a      	ldrb	r2, [r3, #13]
    897a:	07d1      	lsls	r1, r2, #31
    897c:	d51c      	bpl.n	89b8 <update_sec_level+0x54>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    897e:	06d2      	lsls	r2, r2, #27
    8980:	d518      	bpl.n	89b4 <update_sec_level+0x50>
    8982:	7b1b      	ldrb	r3, [r3, #12]
    8984:	2b10      	cmp	r3, #16
    8986:	d115      	bne.n	89b4 <update_sec_level+0x50>
			conn->sec_level = BT_SECURITY_L4;
    8988:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
    898a:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    898c:	7aa2      	ldrb	r2, [r4, #10]
    898e:	7a63      	ldrb	r3, [r4, #9]
    8990:	429a      	cmp	r2, r3
    8992:	d9ed      	bls.n	8970 <update_sec_level+0xc>
    8994:	4b09      	ldr	r3, [pc, #36]	; (89bc <update_sec_level+0x58>)
    8996:	490a      	ldr	r1, [pc, #40]	; (89c0 <update_sec_level+0x5c>)
		BT_ERR("Failed to set required security level");
    8998:	480a      	ldr	r0, [pc, #40]	; (89c4 <update_sec_level+0x60>)
    899a:	1ac9      	subs	r1, r1, r3
    899c:	08c9      	lsrs	r1, r1, #3
    899e:	0189      	lsls	r1, r1, #6
    89a0:	f041 0101 	orr.w	r1, r1, #1
    89a4:	f017 f824 	bl	1f9f0 <log_0>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    89a8:	4620      	mov	r0, r4
    89aa:	2105      	movs	r1, #5
}
    89ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    89b0:	f002 bbe0 	b.w	b174 <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
    89b4:	2303      	movs	r3, #3
    89b6:	e7e8      	b.n	898a <update_sec_level+0x26>
		conn->sec_level = BT_SECURITY_L2;
    89b8:	2302      	movs	r3, #2
    89ba:	e7e6      	b.n	898a <update_sec_level+0x26>
    89bc:	00024c24 	.word	0x00024c24
    89c0:	00024ce4 	.word	0x00024ce4
    89c4:	000276b2 	.word	0x000276b2

000089c8 <hci_encrypt_key_refresh_complete>:
{
    89c8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    89ca:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    89cc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    89d0:	4630      	mov	r0, r6
    89d2:	f002 fa6f 	bl	aeb4 <bt_conn_lookup_handle>
	if (!conn) {
    89d6:	4604      	mov	r4, r0
    89d8:	b960      	cbnz	r0, 89f4 <hci_encrypt_key_refresh_complete+0x2c>
    89da:	4a13      	ldr	r2, [pc, #76]	; (8a28 <hci_encrypt_key_refresh_complete+0x60>)
    89dc:	4b13      	ldr	r3, [pc, #76]	; (8a2c <hci_encrypt_key_refresh_complete+0x64>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    89de:	4814      	ldr	r0, [pc, #80]	; (8a30 <hci_encrypt_key_refresh_complete+0x68>)
    89e0:	1ad2      	subs	r2, r2, r3
    89e2:	08d2      	lsrs	r2, r2, #3
    89e4:	0192      	lsls	r2, r2, #6
    89e6:	4631      	mov	r1, r6
    89e8:	f042 0201 	orr.w	r2, r2, #1
}
    89ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    89f0:	f017 b80b 	b.w	1fa0a <log_1>
	if (evt->status) {
    89f4:	7829      	ldrb	r1, [r5, #0]
    89f6:	b161      	cbz	r1, 8a12 <hci_encrypt_key_refresh_complete+0x4a>
	switch (hci_err) {
    89f8:	2929      	cmp	r1, #41	; 0x29
    89fa:	bf9a      	itte	ls
    89fc:	4b0d      	ldrls	r3, [pc, #52]	; (8a34 <hci_encrypt_key_refresh_complete+0x6c>)
    89fe:	5c5a      	ldrbls	r2, [r3, r1]
	if (evt->status) {
    8a00:	2208      	movhi	r2, #8
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    8a02:	4620      	mov	r0, r4
    8a04:	f002 f8b4 	bl	ab70 <bt_conn_security_changed>
	bt_conn_unref(conn);
    8a08:	4620      	mov	r0, r4
}
    8a0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    8a0e:	f019 ba37 	b.w	21e80 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    8a12:	7883      	ldrb	r3, [r0, #2]
    8a14:	2b01      	cmp	r3, #1
    8a16:	d104      	bne.n	8a22 <hci_encrypt_key_refresh_complete+0x5a>
		bt_smp_update_keys(conn);
    8a18:	f006 fdb2 	bl	f580 <bt_smp_update_keys>
		update_sec_level(conn);
    8a1c:	4620      	mov	r0, r4
    8a1e:	f7ff ffa1 	bl	8964 <update_sec_level>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    8a22:	7829      	ldrb	r1, [r5, #0]
    8a24:	2200      	movs	r2, #0
    8a26:	e7ec      	b.n	8a02 <hci_encrypt_key_refresh_complete+0x3a>
    8a28:	00024ce4 	.word	0x00024ce4
    8a2c:	00024c24 	.word	0x00024c24
    8a30:	00027668 	.word	0x00027668
    8a34:	00027ed9 	.word	0x00027ed9

00008a38 <hci_encrypt_change>:
{
    8a38:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    8a3a:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8a3c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    8a40:	4630      	mov	r0, r6
    8a42:	f002 fa37 	bl	aeb4 <bt_conn_lookup_handle>
	if (!conn) {
    8a46:	4604      	mov	r4, r0
    8a48:	b960      	cbnz	r0, 8a64 <hci_encrypt_change+0x2c>
    8a4a:	4a15      	ldr	r2, [pc, #84]	; (8aa0 <hci_encrypt_change+0x68>)
    8a4c:	4b15      	ldr	r3, [pc, #84]	; (8aa4 <hci_encrypt_change+0x6c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    8a4e:	4816      	ldr	r0, [pc, #88]	; (8aa8 <hci_encrypt_change+0x70>)
    8a50:	1ad2      	subs	r2, r2, r3
    8a52:	08d2      	lsrs	r2, r2, #3
    8a54:	0192      	lsls	r2, r2, #6
    8a56:	4631      	mov	r1, r6
    8a58:	f042 0201 	orr.w	r2, r2, #1
}
    8a5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8a60:	f016 bfd3 	b.w	1fa0a <log_1>
	if (evt->status) {
    8a64:	7829      	ldrb	r1, [r5, #0]
    8a66:	b161      	cbz	r1, 8a82 <hci_encrypt_change+0x4a>
	switch (hci_err) {
    8a68:	2929      	cmp	r1, #41	; 0x29
    8a6a:	bf9a      	itte	ls
    8a6c:	4b0f      	ldrls	r3, [pc, #60]	; (8aac <hci_encrypt_change+0x74>)
    8a6e:	5c5a      	ldrbls	r2, [r3, r1]
	if (evt->status) {
    8a70:	2208      	movhi	r2, #8
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    8a72:	4620      	mov	r0, r4
    8a74:	f002 f87c 	bl	ab70 <bt_conn_security_changed>
	bt_conn_unref(conn);
    8a78:	4620      	mov	r0, r4
}
    8a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    8a7e:	f019 b9ff 	b.w	21e80 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    8a82:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    8a84:	78eb      	ldrb	r3, [r5, #3]
    8a86:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    8a88:	2a01      	cmp	r2, #1
    8a8a:	d105      	bne.n	8a98 <hci_encrypt_change+0x60>
		if (conn->encrypt) {
    8a8c:	b10b      	cbz	r3, 8a92 <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
    8a8e:	f006 fd77 	bl	f580 <bt_smp_update_keys>
		update_sec_level(conn);
    8a92:	4620      	mov	r0, r4
    8a94:	f7ff ff66 	bl	8964 <update_sec_level>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    8a98:	7829      	ldrb	r1, [r5, #0]
    8a9a:	2200      	movs	r2, #0
    8a9c:	e7e9      	b.n	8a72 <hci_encrypt_change+0x3a>
    8a9e:	bf00      	nop
    8aa0:	00024ce4 	.word	0x00024ce4
    8aa4:	00024c24 	.word	0x00024c24
    8aa8:	00027668 	.word	0x00027668
    8aac:	00027ed9 	.word	0x00027ed9

00008ab0 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    8ab0:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    8ab2:	4c0c      	ldr	r4, [pc, #48]	; (8ae4 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    8ab4:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    8ab6:	2205      	movs	r2, #5
    8ab8:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    8abc:	f002 fb36 	bl	b12c <bt_conn_lookup_state_le>
		if (!conn) {
    8ac0:	b970      	cbnz	r0, 8ae0 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    8ac2:	4b09      	ldr	r3, [pc, #36]	; (8ae8 <find_pending_connect.part.0+0x38>)
    8ac4:	6818      	ldr	r0, [r3, #0]
    8ac6:	889a      	ldrh	r2, [r3, #4]
    8ac8:	9000      	str	r0, [sp, #0]
    8aca:	799b      	ldrb	r3, [r3, #6]
    8acc:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    8ad0:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    8ad4:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    8ad8:	2204      	movs	r2, #4
    8ada:	4669      	mov	r1, sp
    8adc:	f002 fb26 	bl	b12c <bt_conn_lookup_state_le>
}
    8ae0:	b002      	add	sp, #8
    8ae2:	bd10      	pop	{r4, pc}
    8ae4:	20000000 	.word	0x20000000
    8ae8:	00024e20 	.word	0x00024e20

00008aec <hci_cmd_done>:
{
    8aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8af0:	4607      	mov	r7, r0
    8af2:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    8af4:	7990      	ldrb	r0, [r2, #6]
    8af6:	4e34      	ldr	r6, [pc, #208]	; (8bc8 <hci_cmd_done+0xdc>)
{
    8af8:	4688      	mov	r8, r1
    8afa:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    8afc:	f012 fc6e 	bl	1b3dc <net_buf_pool_get>
    8b00:	4286      	cmp	r6, r0
    8b02:	d016      	beq.n	8b32 <hci_cmd_done+0x46>
    8b04:	4b31      	ldr	r3, [pc, #196]	; (8bcc <hci_cmd_done+0xe0>)
    8b06:	4d32      	ldr	r5, [pc, #200]	; (8bd0 <hci_cmd_done+0xe4>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    8b08:	79a0      	ldrb	r0, [r4, #6]
    8b0a:	9700      	str	r7, [sp, #0]
    8b0c:	1aed      	subs	r5, r5, r3
    8b0e:	08ed      	lsrs	r5, r5, #3
    8b10:	9001      	str	r0, [sp, #4]
    8b12:	f012 fc63 	bl	1b3dc <net_buf_pool_get>
    8b16:	01ad      	lsls	r5, r5, #6
    8b18:	f045 0502 	orr.w	r5, r5, #2
    8b1c:	e9cd 0602 	strd	r0, r6, [sp, #8]
    8b20:	462b      	mov	r3, r5
    8b22:	482c      	ldr	r0, [pc, #176]	; (8bd4 <hci_cmd_done+0xe8>)
    8b24:	2204      	movs	r2, #4
    8b26:	4669      	mov	r1, sp
    8b28:	f016 ffb8 	bl	1fa9c <log_n>
}
    8b2c:	b005      	add	sp, #20
    8b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    8b32:	4620      	mov	r0, r4
    8b34:	f012 fc5a 	bl	1b3ec <net_buf_id>
    8b38:	4d27      	ldr	r5, [pc, #156]	; (8bd8 <hci_cmd_done+0xec>)
    8b3a:	f04f 090c 	mov.w	r9, #12
    8b3e:	fb09 5300 	mla	r3, r9, r0, r5
    8b42:	885b      	ldrh	r3, [r3, #2]
    8b44:	42bb      	cmp	r3, r7
    8b46:	d011      	beq.n	8b6c <hci_cmd_done+0x80>
    8b48:	4b20      	ldr	r3, [pc, #128]	; (8bcc <hci_cmd_done+0xe0>)
    8b4a:	4e21      	ldr	r6, [pc, #132]	; (8bd0 <hci_cmd_done+0xe4>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    8b4c:	4620      	mov	r0, r4
    8b4e:	1af6      	subs	r6, r6, r3
    8b50:	f012 fc4c 	bl	1b3ec <net_buf_id>
    8b54:	08f6      	lsrs	r6, r6, #3
    8b56:	fb09 5000 	mla	r0, r9, r0, r5
    8b5a:	01b6      	lsls	r6, r6, #6
    8b5c:	f046 0602 	orr.w	r6, r6, #2
    8b60:	8842      	ldrh	r2, [r0, #2]
    8b62:	481e      	ldr	r0, [pc, #120]	; (8bdc <hci_cmd_done+0xf0>)
    8b64:	4633      	mov	r3, r6
    8b66:	4639      	mov	r1, r7
    8b68:	f016 ff63 	bl	1fa32 <log_2>
	if (cmd(buf)->state && !status) {
    8b6c:	4620      	mov	r0, r4
    8b6e:	f012 fc3d 	bl	1b3ec <net_buf_id>
    8b72:	260c      	movs	r6, #12
    8b74:	fb06 5000 	mla	r0, r6, r0, r5
    8b78:	6843      	ldr	r3, [r0, #4]
    8b7a:	b16b      	cbz	r3, 8b98 <hci_cmd_done+0xac>
    8b7c:	f1b8 0f00 	cmp.w	r8, #0
    8b80:	d10a      	bne.n	8b98 <hci_cmd_done+0xac>
		struct cmd_state_set *update = cmd(buf)->state;
    8b82:	4620      	mov	r0, r4
    8b84:	f012 fc32 	bl	1b3ec <net_buf_id>
    8b88:	fb06 5000 	mla	r0, r6, r0, r5
    8b8c:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    8b8e:	e9d3 0100 	ldrd	r0, r1, [r3]
    8b92:	7a1a      	ldrb	r2, [r3, #8]
    8b94:	f018 ff0e 	bl	219b4 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    8b98:	4620      	mov	r0, r4
    8b9a:	f012 fc27 	bl	1b3ec <net_buf_id>
    8b9e:	260c      	movs	r6, #12
    8ba0:	fb06 5000 	mla	r0, r6, r0, r5
    8ba4:	6883      	ldr	r3, [r0, #8]
    8ba6:	2b00      	cmp	r3, #0
    8ba8:	d0c0      	beq.n	8b2c <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    8baa:	4620      	mov	r0, r4
    8bac:	f012 fc1e 	bl	1b3ec <net_buf_id>
    8bb0:	4370      	muls	r0, r6
    8bb2:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    8bb6:	4620      	mov	r0, r4
    8bb8:	f012 fc18 	bl	1b3ec <net_buf_id>
    8bbc:	fb06 5500 	mla	r5, r6, r0, r5
    8bc0:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    8bc2:	f015 fd61 	bl	1e688 <z_impl_k_sem_give>
}
    8bc6:	e7b1      	b.n	8b2c <hci_cmd_done+0x40>
    8bc8:	20000998 	.word	0x20000998
    8bcc:	00024c24 	.word	0x00024c24
    8bd0:	00024ce4 	.word	0x00024ce4
    8bd4:	000276d8 	.word	0x000276d8
    8bd8:	20002998 	.word	0x20002998
    8bdc:	0002770d 	.word	0x0002770d

00008be0 <handle_event>:
{
    8be0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8be2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8be6:	4605      	mov	r5, r0
    8be8:	4608      	mov	r0, r1
		if (handler->event != event) {
    8bea:	7811      	ldrb	r1, [r2, #0]
    8bec:	42a9      	cmp	r1, r5
    8bee:	d01a      	beq.n	8c26 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    8bf0:	3208      	adds	r2, #8
    8bf2:	429a      	cmp	r2, r3
    8bf4:	d1f9      	bne.n	8bea <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    8bf6:	8986      	ldrh	r6, [r0, #12]
    8bf8:	4b16      	ldr	r3, [pc, #88]	; (8c54 <handle_event+0x74>)
    8bfa:	4c17      	ldr	r4, [pc, #92]	; (8c58 <handle_event+0x78>)
    8bfc:	6880      	ldr	r0, [r0, #8]
    8bfe:	4631      	mov	r1, r6
    8c00:	1ae4      	subs	r4, r4, r3
    8c02:	f7ff fa75 	bl	80f0 <bt_hex_real>
    8c06:	f7fb f9fb 	bl	4000 <log_strdup>
    8c0a:	08e4      	lsrs	r4, r4, #3
    8c0c:	01a4      	lsls	r4, r4, #6
    8c0e:	f044 0402 	orr.w	r4, r4, #2
    8c12:	4603      	mov	r3, r0
    8c14:	f8ad 4000 	strh.w	r4, [sp]
    8c18:	4810      	ldr	r0, [pc, #64]	; (8c5c <handle_event+0x7c>)
    8c1a:	4632      	mov	r2, r6
    8c1c:	4629      	mov	r1, r5
    8c1e:	f016 ff21 	bl	1fa64 <log_3>
}
    8c22:	b002      	add	sp, #8
    8c24:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    8c26:	8981      	ldrh	r1, [r0, #12]
    8c28:	7853      	ldrb	r3, [r2, #1]
    8c2a:	428b      	cmp	r3, r1
    8c2c:	d90d      	bls.n	8c4a <handle_event+0x6a>
    8c2e:	4a09      	ldr	r2, [pc, #36]	; (8c54 <handle_event+0x74>)
    8c30:	4b09      	ldr	r3, [pc, #36]	; (8c58 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    8c32:	480b      	ldr	r0, [pc, #44]	; (8c60 <handle_event+0x80>)
    8c34:	1a9b      	subs	r3, r3, r2
    8c36:	08db      	lsrs	r3, r3, #3
    8c38:	019b      	lsls	r3, r3, #6
    8c3a:	f043 0301 	orr.w	r3, r3, #1
    8c3e:	462a      	mov	r2, r5
}
    8c40:	b002      	add	sp, #8
    8c42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    8c46:	f016 bef4 	b.w	1fa32 <log_2>
		handler->handler(buf);
    8c4a:	6853      	ldr	r3, [r2, #4]
}
    8c4c:	b002      	add	sp, #8
    8c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    8c52:	4718      	bx	r3
    8c54:	00024c24 	.word	0x00024c24
    8c58:	00024ce4 	.word	0x00024ce4
    8c5c:	00027762 	.word	0x00027762
    8c60:	00027740 	.word	0x00027740

00008c64 <hci_le_meta_event>:
{
    8c64:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    8c66:	2101      	movs	r1, #1
{
    8c68:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    8c6a:	3008      	adds	r0, #8
    8c6c:	f01a fe1f 	bl	238ae <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    8c70:	4621      	mov	r1, r4
    8c72:	4a03      	ldr	r2, [pc, #12]	; (8c80 <hci_le_meta_event+0x1c>)
    8c74:	7800      	ldrb	r0, [r0, #0]
}
    8c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    8c7a:	230a      	movs	r3, #10
    8c7c:	f7ff bfb0 	b.w	8be0 <handle_event>
    8c80:	000251e0 	.word	0x000251e0

00008c84 <id_create.isra.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    8c84:	b530      	push	{r4, r5, lr}
    8c86:	4d13      	ldr	r5, [pc, #76]	; (8cd4 <id_create.isra.0+0x50>)
    8c88:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8c8c:	b085      	sub	sp, #20
    8c8e:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8c90:	460c      	mov	r4, r1
    8c92:	b171      	cbz	r1, 8cb2 <id_create.isra.0+0x2e>
    8c94:	2300      	movs	r3, #0
    8c96:	4669      	mov	r1, sp
    8c98:	4620      	mov	r0, r4
    8c9a:	9300      	str	r3, [sp, #0]
    8c9c:	f8cd 3003 	str.w	r3, [sp, #3]
    8ca0:	f018 fe67 	bl	21972 <bt_addr_le_cmp>
    8ca4:	b128      	cbz	r0, 8cb2 <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    8ca6:	4621      	mov	r1, r4
    8ca8:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    8caa:	f018 fe5f 	bl	2196c <bt_addr_le_copy>
}
    8cae:	b005      	add	sp, #20
    8cb0:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    8cb2:	a802      	add	r0, sp, #8
    8cb4:	f018 fe25 	bl	21902 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    8cb8:	a802      	add	r0, sp, #8
    8cba:	f7ff fcd1 	bl	8660 <id_find>
    8cbe:	2800      	cmp	r0, #0
    8cc0:	daf7      	bge.n	8cb2 <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    8cc2:	a902      	add	r1, sp, #8
    8cc4:	4628      	mov	r0, r5
    8cc6:	f018 fe51 	bl	2196c <bt_addr_le_copy>
		if (addr) {
    8cca:	2c00      	cmp	r4, #0
    8ccc:	d0ef      	beq.n	8cae <id_create.isra.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    8cce:	4629      	mov	r1, r5
    8cd0:	4620      	mov	r0, r4
    8cd2:	e7ea      	b.n	8caa <id_create.isra.0+0x26>
    8cd4:	20000000 	.word	0x20000000

00008cd8 <hci_tx_thread>:
{
    8cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8cdc:	4d51      	ldr	r5, [pc, #324]	; (8e24 <hci_tx_thread+0x14c>)
    8cde:	4b52      	ldr	r3, [pc, #328]	; (8e28 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    8ce0:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8e30 <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
    8ce4:	f8df a174 	ldr.w	sl, [pc, #372]	; 8e5c <hci_tx_thread+0x184>
    8ce8:	1aed      	subs	r5, r5, r3
    8cea:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    8cec:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    8cf0:	484e      	ldr	r0, [pc, #312]	; (8e2c <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
    8cf2:	f36f 3310 	bfc	r3, #12, #5
    8cf6:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    8cfa:	f002 f86f 	bl	addc <bt_conn_prepare_events>
    8cfe:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    8d00:	484b      	ldr	r0, [pc, #300]	; (8e30 <hci_tx_thread+0x158>)
    8d02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8d0a:	4639      	mov	r1, r7
    8d0c:	f016 f860 	bl	1edd0 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    8d10:	b160      	cbz	r0, 8d2c <hci_tx_thread+0x54>
    8d12:	4948      	ldr	r1, [pc, #288]	; (8e34 <hci_tx_thread+0x15c>)
    8d14:	4848      	ldr	r0, [pc, #288]	; (8e38 <hci_tx_thread+0x160>)
    8d16:	f241 4370 	movw	r3, #5232	; 0x1470
    8d1a:	4652      	mov	r2, sl
    8d1c:	f016 f99a 	bl	1f054 <printk>
    8d20:	4040      	eors	r0, r0
    8d22:	f380 8811 	msr	BASEPRI, r0
    8d26:	f04f 0003 	mov.w	r0, #3
    8d2a:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    8d2c:	4e43      	ldr	r6, [pc, #268]	; (8e3c <hci_tx_thread+0x164>)
{
    8d2e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8e30 <hci_tx_thread+0x158>
    8d32:	f106 0be8 	add.w	fp, r6, #232	; 0xe8
	for (; count; ev++, count--) {
    8d36:	b917      	cbnz	r7, 8d3e <hci_tx_thread+0x66>
	z_impl_k_yield();
    8d38:	f015 fc30 	bl	1e59c <z_impl_k_yield>
	while (1) {
    8d3c:	e7d6      	b.n	8cec <hci_tx_thread+0x14>
		switch (ev->state) {
    8d3e:	f8d8 100c 	ldr.w	r1, [r8, #12]
    8d42:	f3c1 3104 	ubfx	r1, r1, #12, #5
    8d46:	2901      	cmp	r1, #1
    8d48:	d959      	bls.n	8dfe <hci_tx_thread+0x126>
    8d4a:	2904      	cmp	r1, #4
    8d4c:	d163      	bne.n	8e16 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    8d4e:	f898 300c 	ldrb.w	r3, [r8, #12]
    8d52:	2b00      	cmp	r3, #0
    8d54:	d157      	bne.n	8e06 <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    8d56:	483a      	ldr	r0, [pc, #232]	; (8e40 <hci_tx_thread+0x168>)
    8d58:	2200      	movs	r2, #0
    8d5a:	2300      	movs	r3, #0
    8d5c:	f01a fd1f 	bl	2379e <net_buf_get>
	BT_ASSERT(buf);
    8d60:	4604      	mov	r4, r0
    8d62:	b960      	cbnz	r0, 8d7e <hci_tx_thread+0xa6>
    8d64:	4937      	ldr	r1, [pc, #220]	; (8e44 <hci_tx_thread+0x16c>)
    8d66:	4834      	ldr	r0, [pc, #208]	; (8e38 <hci_tx_thread+0x160>)
    8d68:	f241 430d 	movw	r3, #5133	; 0x140d
    8d6c:	4652      	mov	r2, sl
    8d6e:	f016 f971 	bl	1f054 <printk>
    8d72:	4040      	eors	r0, r0
    8d74:	f380 8811 	msr	BASEPRI, r0
    8d78:	f04f 0003 	mov.w	r0, #3
    8d7c:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    8d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8d82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8d86:	4658      	mov	r0, fp
    8d88:	f015 fca4 	bl	1e6d4 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    8d8c:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    8d90:	b163      	cbz	r3, 8dac <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    8d92:	01a9      	lsls	r1, r5, #6
    8d94:	482c      	ldr	r0, [pc, #176]	; (8e48 <hci_tx_thread+0x170>)
    8d96:	f041 0101 	orr.w	r1, r1, #1
    8d9a:	f016 fe29 	bl	1f9f0 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    8d9e:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    8da2:	f012 fbd7 	bl	1b554 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    8da6:	2300      	movs	r3, #0
    8da8:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
    8dac:	4620      	mov	r0, r4
    8dae:	f01a fd27 	bl	23800 <net_buf_ref>
    8db2:	f8c6 0100 	str.w	r0, [r6, #256]	; 0x100
		return bt_hci_ecc_send(buf);
    8db6:	4620      	mov	r0, r4
    8db8:	f7ff fadc 	bl	8374 <bt_hci_ecc_send>
	if (err) {
    8dbc:	4601      	mov	r1, r0
    8dbe:	b1f0      	cbz	r0, 8dfe <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    8dc0:	01aa      	lsls	r2, r5, #6
    8dc2:	4822      	ldr	r0, [pc, #136]	; (8e4c <hci_tx_thread+0x174>)
    8dc4:	f042 0201 	orr.w	r2, r2, #1
    8dc8:	f016 fe1f 	bl	1fa0a <log_1>
	z_impl_k_sem_give(sem);
    8dcc:	4820      	ldr	r0, [pc, #128]	; (8e50 <hci_tx_thread+0x178>)
    8dce:	f015 fc5b 	bl	1e688 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    8dd2:	4620      	mov	r0, r4
    8dd4:	f012 fb0a 	bl	1b3ec <net_buf_id>
    8dd8:	4b1e      	ldr	r3, [pc, #120]	; (8e54 <hci_tx_thread+0x17c>)
    8dda:	220c      	movs	r2, #12
    8ddc:	fb02 3000 	mla	r0, r2, r0, r3
    8de0:	211f      	movs	r1, #31
    8de2:	8840      	ldrh	r0, [r0, #2]
    8de4:	4622      	mov	r2, r4
    8de6:	f7ff fe81 	bl	8aec <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    8dea:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    8dee:	f012 fbb1 	bl	1b554 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    8df2:	2300      	movs	r3, #0
		net_buf_unref(buf);
    8df4:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    8df6:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
		net_buf_unref(buf);
    8dfa:	f012 fbab 	bl	1b554 <net_buf_unref>
	for (; count; ev++, count--) {
    8dfe:	f108 0814 	add.w	r8, r8, #20
    8e02:	3f01      	subs	r7, #1
    8e04:	e797      	b.n	8d36 <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    8e06:	2b01      	cmp	r3, #1
    8e08:	d1f9      	bne.n	8dfe <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    8e0a:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    8e0e:	3834      	subs	r0, #52	; 0x34
    8e10:	f002 faca 	bl	b3a8 <bt_conn_process_tx>
    8e14:	e7f3      	b.n	8dfe <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    8e16:	01aa      	lsls	r2, r5, #6
    8e18:	480f      	ldr	r0, [pc, #60]	; (8e58 <hci_tx_thread+0x180>)
    8e1a:	f042 0202 	orr.w	r2, r2, #2
    8e1e:	f016 fdf4 	bl	1fa0a <log_1>
    8e22:	e7ec      	b.n	8dfe <hci_tx_thread+0x126>
    8e24:	00024ce4 	.word	0x00024ce4
    8e28:	00024c24 	.word	0x00024c24
    8e2c:	20000270 	.word	0x20000270
    8e30:	2000025c 	.word	0x2000025c
    8e34:	000277b8 	.word	0x000277b8
    8e38:	000277c1 	.word	0x000277c1
    8e3c:	20000000 	.word	0x20000000
    8e40:	20000104 	.word	0x20000104
    8e44:	00027503 	.word	0x00027503
    8e48:	000277de 	.word	0x000277de
    8e4c:	000277f9 	.word	0x000277f9
    8e50:	200000e8 	.word	0x200000e8
    8e54:	20002998 	.word	0x20002998
    8e58:	0002781b 	.word	0x0002781b
    8e5c:	00027784 	.word	0x00027784

00008e60 <hci_num_completed_packets>:
{
    8e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e64:	4d3d      	ldr	r5, [pc, #244]	; (8f5c <hci_num_completed_packets+0xfc>)
    8e66:	4b3e      	ldr	r3, [pc, #248]	; (8f60 <hci_num_completed_packets+0x100>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    8e68:	f8d0 8008 	ldr.w	r8, [r0, #8]
    8e6c:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8f6c <hci_num_completed_packets+0x10c>
    8e70:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    8e72:	2600      	movs	r6, #0
    8e74:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    8e76:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    8e78:	f898 3000 	ldrb.w	r3, [r8]
    8e7c:	429e      	cmp	r6, r3
    8e7e:	db01      	blt.n	8e84 <hci_num_completed_packets+0x24>
}
    8e80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    8e84:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    8e88:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    8e8c:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    8e90:	4658      	mov	r0, fp
    8e92:	f002 f80f 	bl	aeb4 <bt_conn_lookup_handle>
		if (!conn) {
    8e96:	4604      	mov	r4, r0
    8e98:	b1d8      	cbz	r0, 8ed2 <hci_num_completed_packets+0x72>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    8e9a:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    8e9e:	2f00      	cmp	r7, #0
    8ea0:	d033      	beq.n	8f0a <hci_num_completed_packets+0xaa>
	__asm__ volatile(
    8ea2:	f04f 0320 	mov.w	r3, #32
    8ea6:	f3ef 8211 	mrs	r2, BASEPRI
    8eaa:	f383 8811 	msr	BASEPRI, r3
    8eae:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    8eb2:	69e3      	ldr	r3, [r4, #28]
    8eb4:	b1b3      	cbz	r3, 8ee4 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
    8eb6:	3b01      	subs	r3, #1
    8eb8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    8eba:	f382 8811 	msr	BASEPRI, r2
    8ebe:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    8ec2:	4620      	mov	r0, r4
    8ec4:	f001 fdde 	bl	aa84 <bt_conn_get_pkts>
    8ec8:	3f01      	subs	r7, #1
    8eca:	f015 fbdd 	bl	1e688 <z_impl_k_sem_give>
    8ece:	b2bf      	uxth	r7, r7
    8ed0:	e7e5      	b.n	8e9e <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    8ed2:	01aa      	lsls	r2, r5, #6
    8ed4:	4823      	ldr	r0, [pc, #140]	; (8f64 <hci_num_completed_packets+0x104>)
    8ed6:	f042 0201 	orr.w	r2, r2, #1
    8eda:	4659      	mov	r1, fp
    8edc:	f016 fd95 	bl	1fa0a <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    8ee0:	3601      	adds	r6, #1
    8ee2:	e7c9      	b.n	8e78 <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
    8ee4:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    8ee6:	b12b      	cbz	r3, 8ef4 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8ee8:	69a1      	ldr	r1, [r4, #24]
    8eea:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    8eec:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8eee:	428b      	cmp	r3, r1
	list->tail = node;
    8ef0:	bf08      	it	eq
    8ef2:	61a0      	streq	r0, [r4, #24]
    8ef4:	f382 8811 	msr	BASEPRI, r2
    8ef8:	f3bf 8f6f 	isb	sy
			if (!node) {
    8efc:	b94b      	cbnz	r3, 8f12 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
    8efe:	01a9      	lsls	r1, r5, #6
    8f00:	4819      	ldr	r0, [pc, #100]	; (8f68 <hci_num_completed_packets+0x108>)
    8f02:	f041 0101 	orr.w	r1, r1, #1
    8f06:	f016 fd73 	bl	1f9f0 <log_0>
		bt_conn_unref(conn);
    8f0a:	4620      	mov	r0, r4
    8f0c:	f018 ffb8 	bl	21e80 <bt_conn_unref>
    8f10:	e7e6      	b.n	8ee0 <hci_num_completed_packets+0x80>
	__asm__ volatile(
    8f12:	f04f 0220 	mov.w	r2, #32
    8f16:	f3ef 8111 	mrs	r1, BASEPRI
    8f1a:	f382 8811 	msr	BASEPRI, r2
    8f1e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    8f22:	68da      	ldr	r2, [r3, #12]
    8f24:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    8f26:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    8f2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    8f2c:	f8c3 900c 	str.w	r9, [r3, #12]
    8f30:	b98a      	cbnz	r2, 8f56 <hci_num_completed_packets+0xf6>
	list->head = node;
    8f32:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    8f36:	f381 8811 	msr	BASEPRI, r1
    8f3a:	f3bf 8f6f 	isb	sy
    8f3e:	2101      	movs	r1, #1
    8f40:	f104 0030 	add.w	r0, r4, #48	; 0x30
    8f44:	f018 fd27 	bl	21996 <atomic_or>
    8f48:	07c3      	lsls	r3, r0, #31
    8f4a:	d4ba      	bmi.n	8ec2 <hci_num_completed_packets+0x62>
		k_queue_append(&work_q->queue, work);
    8f4c:	4659      	mov	r1, fp
    8f4e:	4650      	mov	r0, sl
    8f50:	f01b f936 	bl	241c0 <k_queue_append>
    8f54:	e7b5      	b.n	8ec2 <hci_num_completed_packets+0x62>
	parent->next = child;
    8f56:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8f58:	6263      	str	r3, [r4, #36]	; 0x24
}
    8f5a:	e7ec      	b.n	8f36 <hci_num_completed_packets+0xd6>
    8f5c:	00024ce4 	.word	0x00024ce4
    8f60:	00024c24 	.word	0x00024c24
    8f64:	0002783c 	.word	0x0002783c
    8f68:	00027858 	.word	0x00027858
    8f6c:	200014c8 	.word	0x200014c8

00008f70 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    8f70:	b5f0      	push	{r4, r5, r6, r7, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8f72:	4b28      	ldr	r3, [pc, #160]	; (9014 <le_adv_start_add_conn+0xa4>)
    8f74:	b085      	sub	sp, #20
    8f76:	4605      	mov	r5, r0
    8f78:	460f      	mov	r7, r1
	struct adv_id_check_data check_data = {
		.id = adv->id,
    8f7a:	7801      	ldrb	r1, [r0, #0]
    8f7c:	f103 0028 	add.w	r0, r3, #40	; 0x28
    8f80:	f018 fcee 	bl	21960 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    8f84:	f010 0f40 	tst.w	r0, #64	; 0x40
    8f88:	461a      	mov	r2, r3
    8f8a:	d008      	beq.n	8f9e <le_adv_start_add_conn+0x2e>
    8f8c:	f103 0028 	add.w	r0, r3, #40	; 0x28
    8f90:	f018 fce6 	bl	21960 <atomic_get>
    8f94:	05c0      	lsls	r0, r0, #23
    8f96:	d502      	bpl.n	8f9e <le_adv_start_add_conn+0x2e>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    8f98:	7e1b      	ldrb	r3, [r3, #24]
    8f9a:	428b      	cmp	r3, r1
    8f9c:	d131      	bne.n	9002 <le_adv_start_add_conn+0x92>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    8f9e:	462e      	mov	r6, r5

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    8fa0:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
    8fa2:	f816 3b09 	ldrb.w	r3, [r6], #9
    8fa6:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    8faa:	4630      	mov	r0, r6
    8fac:	2300      	movs	r3, #0
    8fae:	9300      	str	r3, [sp, #0]
    8fb0:	f8cd 3003 	str.w	r3, [sp, #3]
    8fb4:	f018 fcdd 	bl	21972 <bt_addr_le_cmp>
    8fb8:	4604      	mov	r4, r0
    8fba:	7828      	ldrb	r0, [r5, #0]
    8fbc:	b164      	cbz	r4, 8fd8 <le_adv_start_add_conn+0x68>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    8fbe:	4631      	mov	r1, r6
    8fc0:	f002 f88e 	bl	b0e0 <bt_conn_exists_le>
    8fc4:	4604      	mov	r4, r0
    8fc6:	b9f8      	cbnz	r0, 9008 <le_adv_start_add_conn+0x98>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    8fc8:	7828      	ldrb	r0, [r5, #0]
    8fca:	4631      	mov	r1, r6
    8fcc:	f001 ff44 	bl	ae58 <bt_conn_add_le>
	if (!conn) {
    8fd0:	4605      	mov	r5, r0
    8fd2:	b1e0      	cbz	r0, 900e <le_adv_start_add_conn+0x9e>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    8fd4:	2105      	movs	r1, #5
    8fd6:	e00e      	b.n	8ff6 <le_adv_start_add_conn+0x86>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    8fd8:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    8fdc:	9302      	str	r3, [sp, #8]
    8fde:	a902      	add	r1, sp, #8
    8fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8fe4:	f8ad 300c 	strh.w	r3, [sp, #12]
    8fe8:	f88d 300e 	strb.w	r3, [sp, #14]
    8fec:	f001 ff34 	bl	ae58 <bt_conn_add_le>
		if (!conn) {
    8ff0:	4605      	mov	r5, r0
    8ff2:	b160      	cbz	r0, 900e <le_adv_start_add_conn+0x9e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    8ff4:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    8ff6:	f001 ff69 	bl	aecc <bt_conn_set_state>
	*out_conn = conn;
    8ffa:	603d      	str	r5, [r7, #0]
	return 0;
}
    8ffc:	4620      	mov	r0, r4
    8ffe:	b005      	add	sp, #20
    9000:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
    9002:	f06f 0422 	mvn.w	r4, #34	; 0x22
    9006:	e7f9      	b.n	8ffc <le_adv_start_add_conn+0x8c>
		return -EINVAL;
    9008:	f06f 0415 	mvn.w	r4, #21
    900c:	e7f6      	b.n	8ffc <le_adv_start_add_conn+0x8c>
		return -ENOMEM;
    900e:	f06f 040b 	mvn.w	r4, #11
    9012:	e7f3      	b.n	8ffc <le_adv_start_add_conn+0x8c>
    9014:	20000000 	.word	0x20000000

00009018 <hci_cmd_status>:
{
    9018:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    901a:	2104      	movs	r1, #4
{
    901c:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    901e:	3008      	adds	r0, #8
    9020:	f01a fc45 	bl	238ae <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    9024:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    9026:	7801      	ldrb	r1, [r0, #0]
    9028:	8840      	ldrh	r0, [r0, #2]
    902a:	4622      	mov	r2, r4
    902c:	f7ff fd5e 	bl	8aec <hci_cmd_done>
	if (ncmd) {
    9030:	b125      	cbz	r5, 903c <hci_cmd_status+0x24>
    9032:	4803      	ldr	r0, [pc, #12]	; (9040 <hci_cmd_status+0x28>)
}
    9034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9038:	f015 bb26 	b.w	1e688 <z_impl_k_sem_give>
    903c:	bd38      	pop	{r3, r4, r5, pc}
    903e:	bf00      	nop
    9040:	200000e8 	.word	0x200000e8

00009044 <hci_cmd_complete>:
{
    9044:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    9046:	2103      	movs	r1, #3
{
    9048:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    904a:	3008      	adds	r0, #8
    904c:	f01a fc2f 	bl	238ae <net_buf_simple_pull_mem>
	status = buf->data[0];
    9050:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    9052:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    9054:	7819      	ldrb	r1, [r3, #0]
    9056:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    905a:	4622      	mov	r2, r4
    905c:	f7ff fd46 	bl	8aec <hci_cmd_done>
	if (ncmd) {
    9060:	b125      	cbz	r5, 906c <hci_cmd_complete+0x28>
    9062:	4803      	ldr	r0, [pc, #12]	; (9070 <hci_cmd_complete+0x2c>)
}
    9064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9068:	f015 bb0e 	b.w	1e688 <z_impl_k_sem_give>
    906c:	bd38      	pop	{r3, r4, r5, pc}
    906e:	bf00      	nop
    9070:	200000e8 	.word	0x200000e8

00009074 <bt_hci_cmd_create>:
{
    9074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    9078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    907c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
    9080:	4605      	mov	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    9082:	4816      	ldr	r0, [pc, #88]	; (90dc <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
    9084:	f8df 8058 	ldr.w	r8, [pc, #88]	; 90e0 <bt_hci_cmd_create+0x6c>
{
    9088:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    908a:	f01a fb83 	bl	23794 <net_buf_alloc_fixed>
    908e:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
    9090:	f100 0b08 	add.w	fp, r0, #8
    9094:	2100      	movs	r1, #0
    9096:	2700      	movs	r7, #0
    9098:	4658      	mov	r0, fp
    909a:	f01a fba0 	bl	237de <net_buf_simple_reserve>
    909e:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    90a0:	4620      	mov	r0, r4
    90a2:	f012 f9a3 	bl	1b3ec <net_buf_id>
    90a6:	f04f 0a0c 	mov.w	sl, #12
    90aa:	fb0a 8000 	mla	r0, sl, r0, r8
    90ae:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    90b0:	4620      	mov	r0, r4
    90b2:	f012 f99b 	bl	1b3ec <net_buf_id>
    90b6:	fb0a 8000 	mla	r0, sl, r0, r8
    90ba:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    90bc:	4620      	mov	r0, r4
    90be:	f012 f995 	bl	1b3ec <net_buf_id>
    90c2:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
    90c6:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    90c8:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    90ca:	4658      	mov	r0, fp
    90cc:	f01a fbbe 	bl	2384c <net_buf_simple_add>
	hdr->param_len = param_len;
    90d0:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    90d2:	8005      	strh	r5, [r0, #0]
}
    90d4:	4620      	mov	r0, r4
    90d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90da:	bf00      	nop
    90dc:	20000998 	.word	0x20000998
    90e0:	20002998 	.word	0x20002998

000090e4 <bt_hci_cmd_send>:
{
    90e4:	b538      	push	{r3, r4, r5, lr}
    90e6:	4605      	mov	r5, r0
	if (!buf) {
    90e8:	460c      	mov	r4, r1
    90ea:	b919      	cbnz	r1, 90f4 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    90ec:	f7ff ffc2 	bl	9074 <bt_hci_cmd_create>
		if (!buf) {
    90f0:	4604      	mov	r4, r0
    90f2:	b1f0      	cbz	r0, 9132 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    90f4:	f640 4335 	movw	r3, #3125	; 0xc35
    90f8:	429d      	cmp	r5, r3
    90fa:	d114      	bne.n	9126 <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
    90fc:	4620      	mov	r0, r4
    90fe:	f7ff f939 	bl	8374 <bt_hci_ecc_send>
		if (err) {
    9102:	4605      	mov	r5, r0
    9104:	b168      	cbz	r0, 9122 <bt_hci_cmd_send+0x3e>
    9106:	4b0c      	ldr	r3, [pc, #48]	; (9138 <bt_hci_cmd_send+0x54>)
    9108:	4a0c      	ldr	r2, [pc, #48]	; (913c <bt_hci_cmd_send+0x58>)
    910a:	1ad2      	subs	r2, r2, r3
    910c:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    910e:	0192      	lsls	r2, r2, #6
    9110:	4601      	mov	r1, r0
    9112:	f042 0201 	orr.w	r2, r2, #1
    9116:	480a      	ldr	r0, [pc, #40]	; (9140 <bt_hci_cmd_send+0x5c>)
    9118:	f016 fc77 	bl	1fa0a <log_1>
			net_buf_unref(buf);
    911c:	4620      	mov	r0, r4
    911e:	f012 fa19 	bl	1b554 <net_buf_unref>
}
    9122:	4628      	mov	r0, r5
    9124:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    9126:	4807      	ldr	r0, [pc, #28]	; (9144 <bt_hci_cmd_send+0x60>)
    9128:	4621      	mov	r1, r4
    912a:	f01a fb5c 	bl	237e6 <net_buf_put>
	return 0;
    912e:	2500      	movs	r5, #0
    9130:	e7f7      	b.n	9122 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    9132:	f06f 0536 	mvn.w	r5, #54	; 0x36
    9136:	e7f4      	b.n	9122 <bt_hci_cmd_send+0x3e>
    9138:	00024c24 	.word	0x00024c24
    913c:	00024ce4 	.word	0x00024ce4
    9140:	000277f9 	.word	0x000277f9
    9144:	20000104 	.word	0x20000104

00009148 <le_ltk_request>:
{
    9148:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    914a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    914c:	882e      	ldrh	r6, [r5, #0]
    914e:	b2b7      	uxth	r7, r6
{
    9150:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
    9152:	4638      	mov	r0, r7
    9154:	f001 feae 	bl	aeb4 <bt_conn_lookup_handle>
	if (!conn) {
    9158:	4604      	mov	r4, r0
    915a:	b960      	cbnz	r0, 9176 <le_ltk_request+0x2e>
    915c:	4a26      	ldr	r2, [pc, #152]	; (91f8 <le_ltk_request+0xb0>)
    915e:	4b27      	ldr	r3, [pc, #156]	; (91fc <le_ltk_request+0xb4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9160:	4827      	ldr	r0, [pc, #156]	; (9200 <le_ltk_request+0xb8>)
    9162:	1ad2      	subs	r2, r2, r3
    9164:	08d2      	lsrs	r2, r2, #3
    9166:	0192      	lsls	r2, r2, #6
    9168:	f042 0201 	orr.w	r2, r2, #1
    916c:	4639      	mov	r1, r7
    916e:	f016 fc4c 	bl	1fa0a <log_1>
}
    9172:	b007      	add	sp, #28
    9174:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    9176:	af02      	add	r7, sp, #8
    9178:	f8d5 2002 	ldr.w	r2, [r5, #2]
    917c:	f8d5 3006 	ldr.w	r3, [r5, #6]
    9180:	9701      	str	r7, [sp, #4]
    9182:	8969      	ldrh	r1, [r5, #10]
    9184:	9100      	str	r1, [sp, #0]
    9186:	f01a fa34 	bl	235f2 <bt_smp_request_ltk>
    918a:	b320      	cbz	r0, 91d6 <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    918c:	2112      	movs	r1, #18
    918e:	f242 001a 	movw	r0, #8218	; 0x201a
    9192:	f7ff ff6f 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
    9196:	4605      	mov	r5, r0
    9198:	b968      	cbnz	r0, 91b6 <le_ltk_request+0x6e>
    919a:	4917      	ldr	r1, [pc, #92]	; (91f8 <le_ltk_request+0xb0>)
    919c:	4b17      	ldr	r3, [pc, #92]	; (91fc <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
    919e:	4819      	ldr	r0, [pc, #100]	; (9204 <le_ltk_request+0xbc>)
    91a0:	1ac9      	subs	r1, r1, r3
    91a2:	08c9      	lsrs	r1, r1, #3
    91a4:	0189      	lsls	r1, r1, #6
    91a6:	f041 0101 	orr.w	r1, r1, #1
    91aa:	f016 fc21 	bl	1f9f0 <log_0>
	bt_conn_unref(conn);
    91ae:	4620      	mov	r0, r4
    91b0:	f018 fe66 	bl	21e80 <bt_conn_unref>
    91b4:	e7dd      	b.n	9172 <le_ltk_request+0x2a>
	cp = net_buf_add(buf, sizeof(*cp));
    91b6:	2112      	movs	r1, #18
    91b8:	3008      	adds	r0, #8
    91ba:	f01a fb47 	bl	2384c <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    91be:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
    91c0:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    91c4:	2210      	movs	r2, #16
    91c6:	f018 fa6e 	bl	216a6 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    91ca:	4629      	mov	r1, r5
    91cc:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    91d0:	f7ff ff88 	bl	90e4 <bt_hci_cmd_send>
    91d4:	e7eb      	b.n	91ae <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    91d6:	2102      	movs	r1, #2
    91d8:	f242 001b 	movw	r0, #8219	; 0x201b
    91dc:	f7ff ff4a 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
    91e0:	4605      	mov	r5, r0
    91e2:	2800      	cmp	r0, #0
    91e4:	d0d9      	beq.n	919a <le_ltk_request+0x52>
	cp = net_buf_add(buf, sizeof(*cp));
    91e6:	2102      	movs	r1, #2
    91e8:	3008      	adds	r0, #8
    91ea:	f01a fb2f 	bl	2384c <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    91ee:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    91f0:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    91f2:	f242 001b 	movw	r0, #8219	; 0x201b
    91f6:	e7eb      	b.n	91d0 <le_ltk_request+0x88>
    91f8:	00024ce4 	.word	0x00024ce4
    91fc:	00024c24 	.word	0x00024c24
    9200:	00027644 	.word	0x00027644
    9204:	0002786f 	.word	0x0002786f

00009208 <le_conn_param_neg_reply>:
{
    9208:	b570      	push	{r4, r5, r6, lr}
    920a:	4606      	mov	r6, r0
    920c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    920e:	f242 0021 	movw	r0, #8225	; 0x2021
    9212:	2103      	movs	r1, #3
    9214:	f7ff ff2e 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
    9218:	4604      	mov	r4, r0
    921a:	b958      	cbnz	r0, 9234 <le_conn_param_neg_reply+0x2c>
    921c:	490c      	ldr	r1, [pc, #48]	; (9250 <le_conn_param_neg_reply+0x48>)
    921e:	4b0d      	ldr	r3, [pc, #52]	; (9254 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    9220:	480d      	ldr	r0, [pc, #52]	; (9258 <le_conn_param_neg_reply+0x50>)
    9222:	1ac9      	subs	r1, r1, r3
    9224:	08c9      	lsrs	r1, r1, #3
    9226:	0189      	lsls	r1, r1, #6
}
    9228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    922c:	f041 0101 	orr.w	r1, r1, #1
    9230:	f016 bbde 	b.w	1f9f0 <log_0>
	cp = net_buf_add(buf, sizeof(*cp));
    9234:	2103      	movs	r1, #3
    9236:	3008      	adds	r0, #8
    9238:	f01a fb08 	bl	2384c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    923c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    923e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    9240:	4621      	mov	r1, r4
    9242:	f242 0021 	movw	r0, #8225	; 0x2021
}
    9246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    924a:	f7ff bf4b 	b.w	90e4 <bt_hci_cmd_send>
    924e:	bf00      	nop
    9250:	00024ce4 	.word	0x00024ce4
    9254:	00024c24 	.word	0x00024c24
    9258:	00027886 	.word	0x00027886

0000925c <le_conn_param_req>:
{
    925c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    925e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    9260:	78d9      	ldrb	r1, [r3, #3]
    9262:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    9264:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    9266:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    926a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    926e:	7959      	ldrb	r1, [r3, #5]
    9270:	791a      	ldrb	r2, [r3, #4]
    9272:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9276:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    927a:	799a      	ldrb	r2, [r3, #6]
    927c:	79d9      	ldrb	r1, [r3, #7]
    927e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9282:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    9286:	7a1a      	ldrb	r2, [r3, #8]
    9288:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    928a:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    928c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    9290:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    9292:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    9296:	f001 fe0d 	bl	aeb4 <bt_conn_lookup_handle>
	if (!conn) {
    929a:	4606      	mov	r6, r0
    929c:	b980      	cbnz	r0, 92c0 <le_conn_param_req+0x64>
    929e:	4b20      	ldr	r3, [pc, #128]	; (9320 <le_conn_param_req+0xc4>)
    92a0:	4a20      	ldr	r2, [pc, #128]	; (9324 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    92a2:	4821      	ldr	r0, [pc, #132]	; (9328 <le_conn_param_req+0xcc>)
    92a4:	1ad2      	subs	r2, r2, r3
    92a6:	08d2      	lsrs	r2, r2, #3
    92a8:	0192      	lsls	r2, r2, #6
    92aa:	4621      	mov	r1, r4
    92ac:	f042 0201 	orr.w	r2, r2, #1
    92b0:	f016 fbab 	bl	1fa0a <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    92b4:	2102      	movs	r1, #2
    92b6:	4620      	mov	r0, r4
    92b8:	f7ff ffa6 	bl	9208 <le_conn_param_neg_reply>
}
    92bc:	b003      	add	sp, #12
    92be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    92c0:	4669      	mov	r1, sp
    92c2:	f001 fc1b 	bl	aafc <le_param_req>
    92c6:	b938      	cbnz	r0, 92d8 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    92c8:	211e      	movs	r1, #30
    92ca:	4620      	mov	r0, r4
    92cc:	f7ff ff9c 	bl	9208 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    92d0:	4630      	mov	r0, r6
    92d2:	f018 fdd5 	bl	21e80 <bt_conn_unref>
    92d6:	e7f1      	b.n	92bc <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    92d8:	210e      	movs	r1, #14
    92da:	f242 0020 	movw	r0, #8224	; 0x2020
    92de:	f7ff fec9 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
    92e2:	4605      	mov	r5, r0
    92e4:	2800      	cmp	r0, #0
    92e6:	d0f3      	beq.n	92d0 <le_conn_param_req+0x74>
	cp = net_buf_add(buf, sizeof(*cp));
    92e8:	210e      	movs	r1, #14
    92ea:	3008      	adds	r0, #8
    92ec:	f01a faae 	bl	2384c <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    92f0:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    92f2:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    92f4:	2100      	movs	r1, #0
    92f6:	f018 fa01 	bl	216fc <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    92fa:	f8bd 3000 	ldrh.w	r3, [sp]
    92fe:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    9300:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    9304:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    9306:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    930a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    930c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    9310:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    9312:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    9314:	4629      	mov	r1, r5
    9316:	f242 0020 	movw	r0, #8224	; 0x2020
    931a:	f7ff fee3 	bl	90e4 <bt_hci_cmd_send>
    931e:	e7d7      	b.n	92d0 <le_conn_param_req+0x74>
    9320:	00024c24 	.word	0x00024c24
    9324:	00024ce4 	.word	0x00024ce4
    9328:	00027644 	.word	0x00027644

0000932c <bt_hci_cmd_send_sync>:
{
    932c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9330:	4607      	mov	r7, r0
    9332:	b086      	sub	sp, #24
    9334:	4615      	mov	r5, r2
	if (!buf) {
    9336:	460c      	mov	r4, r1
    9338:	b921      	cbnz	r1, 9344 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    933a:	f7ff fe9b 	bl	9074 <bt_hci_cmd_create>
		if (!buf) {
    933e:	4604      	mov	r4, r0
    9340:	2800      	cmp	r0, #0
    9342:	d055      	beq.n	93f0 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    9344:	2201      	movs	r2, #1
    9346:	2100      	movs	r1, #0
    9348:	4668      	mov	r0, sp
    934a:	f01b f885 	bl	24458 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    934e:	4620      	mov	r0, r4
    9350:	f012 f84c 	bl	1b3ec <net_buf_id>
    9354:	4e28      	ldr	r6, [pc, #160]	; (93f8 <bt_hci_cmd_send_sync+0xcc>)
    9356:	230c      	movs	r3, #12
    9358:	fb03 6000 	mla	r0, r3, r0, r6
    935c:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    9360:	4620      	mov	r0, r4
    9362:	f01a fa4d 	bl	23800 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    9366:	4825      	ldr	r0, [pc, #148]	; (93fc <bt_hci_cmd_send_sync+0xd0>)
    9368:	4621      	mov	r1, r4
    936a:	f01a fa3c 	bl	237e6 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    936e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    9372:	2300      	movs	r3, #0
    9374:	4668      	mov	r0, sp
    9376:	f015 f9ad 	bl	1e6d4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    937a:	4680      	mov	r8, r0
    937c:	b180      	cbz	r0, 93a0 <bt_hci_cmd_send_sync+0x74>
    937e:	4a20      	ldr	r2, [pc, #128]	; (9400 <bt_hci_cmd_send_sync+0xd4>)
    9380:	4920      	ldr	r1, [pc, #128]	; (9404 <bt_hci_cmd_send_sync+0xd8>)
    9382:	4821      	ldr	r0, [pc, #132]	; (9408 <bt_hci_cmd_send_sync+0xdc>)
    9384:	f240 1351 	movw	r3, #337	; 0x151
    9388:	f015 fe64 	bl	1f054 <printk>
    938c:	481f      	ldr	r0, [pc, #124]	; (940c <bt_hci_cmd_send_sync+0xe0>)
    938e:	4641      	mov	r1, r8
    9390:	f015 fe60 	bl	1f054 <printk>
    9394:	4040      	eors	r0, r0
    9396:	f380 8811 	msr	BASEPRI, r0
    939a:	f04f 0003 	mov.w	r0, #3
    939e:	df02      	svc	2
	status = cmd(buf)->status;
    93a0:	4620      	mov	r0, r4
    93a2:	f012 f823 	bl	1b3ec <net_buf_id>
    93a6:	230c      	movs	r3, #12
    93a8:	4343      	muls	r3, r0
    93aa:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    93ac:	b1be      	cbz	r6, 93de <bt_hci_cmd_send_sync+0xb2>
    93ae:	4a18      	ldr	r2, [pc, #96]	; (9410 <bt_hci_cmd_send_sync+0xe4>)
    93b0:	4b18      	ldr	r3, [pc, #96]	; (9414 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    93b2:	4819      	ldr	r0, [pc, #100]	; (9418 <bt_hci_cmd_send_sync+0xec>)
    93b4:	1a9b      	subs	r3, r3, r2
    93b6:	08db      	lsrs	r3, r3, #3
    93b8:	019b      	lsls	r3, r3, #6
    93ba:	f043 0302 	orr.w	r3, r3, #2
    93be:	4632      	mov	r2, r6
    93c0:	4639      	mov	r1, r7
    93c2:	f016 fb36 	bl	1fa32 <log_2>
		net_buf_unref(buf);
    93c6:	4620      	mov	r0, r4
    93c8:	f012 f8c4 	bl	1b554 <net_buf_unref>
			return -EIO;
    93cc:	2e09      	cmp	r6, #9
    93ce:	bf0c      	ite	eq
    93d0:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    93d4:	f06f 0004 	mvnne.w	r0, #4
}
    93d8:	b006      	add	sp, #24
    93da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    93de:	b115      	cbz	r5, 93e6 <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
    93e0:	602c      	str	r4, [r5, #0]
	return 0;
    93e2:	4630      	mov	r0, r6
    93e4:	e7f8      	b.n	93d8 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
    93e6:	4620      	mov	r0, r4
    93e8:	f012 f8b4 	bl	1b554 <net_buf_unref>
	return 0;
    93ec:	4628      	mov	r0, r5
    93ee:	e7f3      	b.n	93d8 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
    93f0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    93f4:	e7f0      	b.n	93d8 <bt_hci_cmd_send_sync+0xac>
    93f6:	bf00      	nop
    93f8:	20002998 	.word	0x20002998
    93fc:	20000104 	.word	0x20000104
    9400:	00027784 	.word	0x00027784
    9404:	000277b8 	.word	0x000277b8
    9408:	000277c1 	.word	0x000277c1
    940c:	000278a0 	.word	0x000278a0
    9410:	00024c24 	.word	0x00024c24
    9414:	00024ce4 	.word	0x00024ce4
    9418:	000278c0 	.word	0x000278c0

0000941c <hci_le_read_max_data_len>:
{
    941c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    941e:	4606      	mov	r6, r0
    9420:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    9422:	aa01      	add	r2, sp, #4
    9424:	2100      	movs	r1, #0
    9426:	f242 002f 	movw	r0, #8239	; 0x202f
    942a:	f7ff ff7f 	bl	932c <bt_hci_cmd_send_sync>
	if (err) {
    942e:	4604      	mov	r4, r0
    9430:	b160      	cbz	r0, 944c <hci_le_read_max_data_len+0x30>
    9432:	490c      	ldr	r1, [pc, #48]	; (9464 <hci_le_read_max_data_len+0x48>)
    9434:	4b0c      	ldr	r3, [pc, #48]	; (9468 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    9436:	480d      	ldr	r0, [pc, #52]	; (946c <hci_le_read_max_data_len+0x50>)
    9438:	1ac9      	subs	r1, r1, r3
    943a:	08c9      	lsrs	r1, r1, #3
    943c:	0189      	lsls	r1, r1, #6
    943e:	f041 0101 	orr.w	r1, r1, #1
    9442:	f016 fad5 	bl	1f9f0 <log_0>
}
    9446:	4620      	mov	r0, r4
    9448:	b002      	add	sp, #8
    944a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    944c:	9801      	ldr	r0, [sp, #4]
    944e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    9450:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9454:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    9456:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    945a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    945c:	f012 f87a 	bl	1b554 <net_buf_unref>
	return 0;
    9460:	e7f1      	b.n	9446 <hci_le_read_max_data_len+0x2a>
    9462:	bf00      	nop
    9464:	00024ce4 	.word	0x00024ce4
    9468:	00024c24 	.word	0x00024c24
    946c:	000278dc 	.word	0x000278dc

00009470 <set_random_address>:
{
    9470:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    9472:	4e15      	ldr	r6, [pc, #84]	; (94c8 <set_random_address+0x58>)
    9474:	2206      	movs	r2, #6
    9476:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    947a:	4605      	mov	r5, r0
    947c:	f018 f903 	bl	21686 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    9480:	4604      	mov	r4, r0
    9482:	b1e0      	cbz	r0, 94be <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    9484:	2106      	movs	r1, #6
    9486:	f242 0005 	movw	r0, #8197	; 0x2005
    948a:	f7ff fdf3 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
    948e:	4604      	mov	r4, r0
    9490:	b1b8      	cbz	r0, 94c2 <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    9492:	2206      	movs	r2, #6
    9494:	4629      	mov	r1, r5
    9496:	3008      	adds	r0, #8
    9498:	f01a f9de 	bl	23858 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    949c:	4621      	mov	r1, r4
    949e:	2200      	movs	r2, #0
    94a0:	f242 0005 	movw	r0, #8197	; 0x2005
    94a4:	f7ff ff42 	bl	932c <bt_hci_cmd_send_sync>
	if (err) {
    94a8:	4604      	mov	r4, r0
    94aa:	b940      	cbnz	r0, 94be <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    94ac:	2206      	movs	r2, #6
    94ae:	4629      	mov	r1, r5
    94b0:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    94b4:	f018 f8f7 	bl	216a6 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    94b8:	2301      	movs	r3, #1
    94ba:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    94be:	4620      	mov	r0, r4
    94c0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    94c2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    94c6:	e7fa      	b.n	94be <set_random_address+0x4e>
    94c8:	20000000 	.word	0x20000000

000094cc <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    94cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    94d0:	4604      	mov	r4, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    94d2:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    94d6:	460e      	mov	r6, r1
    94d8:	4690      	mov	r8, r2
    94da:	461d      	mov	r5, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    94dc:	d027      	beq.n	952e <le_adv_set_random_addr.isra.0+0x62>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    94de:	4f27      	ldr	r7, [pc, #156]	; (957c <le_adv_set_random_addr.isra.0+0xb0>)
    94e0:	b12a      	cbz	r2, 94ee <le_adv_set_random_addr.isra.0+0x22>
    94e2:	0688      	lsls	r0, r1, #26
    94e4:	d503      	bpl.n	94ee <le_adv_set_random_addr.isra.0+0x22>
    94e6:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
    94ea:	0659      	lsls	r1, r3, #25
    94ec:	d542      	bpl.n	9574 <le_adv_set_random_addr.isra.0+0xa8>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    94ee:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    94f2:	ea4f 09c4 	mov.w	r9, r4, lsl #3
    94f6:	5cfb      	ldrb	r3, [r7, r3]
    94f8:	2b01      	cmp	r3, #1
    94fa:	d008      	beq.n	950e <le_adv_set_random_addr.isra.0+0x42>
			*own_addr_type = id_addr->type;
    94fc:	eba9 0404 	sub.w	r4, r9, r4
    9500:	5d3b      	ldrb	r3, [r7, r4]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    9502:	f1b8 0f00 	cmp.w	r8, #0
    9506:	d10d      	bne.n	9524 <le_adv_set_random_addr.isra.0+0x58>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    9508:	702b      	strb	r3, [r5, #0]
	return 0;
    950a:	2000      	movs	r0, #0
    950c:	e007      	b.n	951e <le_adv_set_random_addr.isra.0+0x52>
				err = set_adv_random_address(adv, &id_addr->a);
    950e:	2007      	movs	r0, #7
    9510:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
    9514:	4438      	add	r0, r7
    9516:	f7ff ffab 	bl	9470 <set_random_address>
				if (err) {
    951a:	2800      	cmp	r0, #0
    951c:	d0ee      	beq.n	94fc <le_adv_set_random_addr.isra.0+0x30>
}
    951e:	b003      	add	sp, #12
    9520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    9524:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    9526:	bf48      	it	mi
    9528:	f043 0302 	orrmi.w	r3, r3, #2
    952c:	e7ec      	b.n	9508 <le_adv_set_random_addr.isra.0+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    952e:	074b      	lsls	r3, r1, #29
    9530:	d510      	bpl.n	9554 <le_adv_set_random_addr.isra.0+0x88>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    9532:	4e12      	ldr	r6, [pc, #72]	; (957c <le_adv_set_random_addr.isra.0+0xb0>)
    9534:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    9538:	00e7      	lsls	r7, r4, #3
    953a:	5cf3      	ldrb	r3, [r6, r3]
    953c:	2b01      	cmp	r3, #1
    953e:	d105      	bne.n	954c <le_adv_set_random_addr.isra.0+0x80>
				err = set_adv_random_address(adv, &id_addr->a);
    9540:	2007      	movs	r0, #7
    9542:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
    9546:	4430      	add	r0, r6
    9548:	f7ff ff92 	bl	9470 <set_random_address>
			*own_addr_type = id_addr->type;
    954c:	1b3c      	subs	r4, r7, r4
    954e:	5d33      	ldrb	r3, [r6, r4]
			*own_addr_type = BT_ADDR_LE_RANDOM;
    9550:	702b      	strb	r3, [r5, #0]
		if (err) {
    9552:	e7e4      	b.n	951e <le_adv_set_random_addr.isra.0+0x52>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    9554:	2106      	movs	r1, #6
    9556:	4668      	mov	r0, sp
    9558:	f009 f80c 	bl	12574 <bt_rand>
	if (err) {
    955c:	b940      	cbnz	r0, 9570 <le_adv_set_random_addr.isra.0+0xa4>
	BT_ADDR_SET_NRPA(&nrpa);
    955e:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    9562:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
    9564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9568:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    956c:	f7ff ff80 	bl	9470 <set_random_address>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    9570:	2301      	movs	r3, #1
    9572:	e7ed      	b.n	9550 <le_adv_set_random_addr.isra.0+0x84>
			return -ENOTSUP;
    9574:	f06f 0022 	mvn.w	r0, #34	; 0x22
    9578:	e7d1      	b.n	951e <le_adv_set_random_addr.isra.0+0x52>
    957a:	bf00      	nop
    957c:	20000000 	.word	0x20000000

00009580 <set_le_adv_enable_legacy>:
{
    9580:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    9582:	4606      	mov	r6, r0
    9584:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    9586:	f242 000a 	movw	r0, #8202	; 0x200a
    958a:	2101      	movs	r1, #1
    958c:	f7ff fd72 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
    9590:	4604      	mov	r4, r0
    9592:	b1e8      	cbz	r0, 95d0 <set_le_adv_enable_legacy+0x50>
	if (enable) {
    9594:	3008      	adds	r0, #8
    9596:	b1cd      	cbz	r5, 95cc <set_le_adv_enable_legacy+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    9598:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    959a:	f01a f966 	bl	2386a <net_buf_simple_add_u8>
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    959e:	3610      	adds	r6, #16
	state->bit = bit;
    95a0:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    95a2:	4620      	mov	r0, r4
	state->bit = bit;
    95a4:	9302      	str	r3, [sp, #8]
	state->target = target;
    95a6:	9601      	str	r6, [sp, #4]
	state->val = val;
    95a8:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    95ac:	f011 ff1e 	bl	1b3ec <net_buf_id>
    95b0:	4b09      	ldr	r3, [pc, #36]	; (95d8 <set_le_adv_enable_legacy+0x58>)
    95b2:	220c      	movs	r2, #12
    95b4:	fb02 3000 	mla	r0, r2, r0, r3
    95b8:	ab01      	add	r3, sp, #4
    95ba:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    95bc:	2200      	movs	r2, #0
    95be:	4621      	mov	r1, r4
    95c0:	f242 000a 	movw	r0, #8202	; 0x200a
    95c4:	f7ff feb2 	bl	932c <bt_hci_cmd_send_sync>
}
    95c8:	b004      	add	sp, #16
    95ca:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    95cc:	4629      	mov	r1, r5
    95ce:	e7e4      	b.n	959a <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    95d0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    95d4:	e7f8      	b.n	95c8 <set_le_adv_enable_legacy+0x48>
    95d6:	bf00      	nop
    95d8:	20002998 	.word	0x20002998

000095dc <hci_set_ad>:
{
    95dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95e0:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    95e2:	2120      	movs	r1, #32
{
    95e4:	4682      	mov	sl, r0
    95e6:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    95e8:	f7ff fd44 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
    95ec:	4606      	mov	r6, r0
    95ee:	2800      	cmp	r0, #0
    95f0:	d05c      	beq.n	96ac <hci_set_ad+0xd0>
	set_data = net_buf_add(buf, sizeof(*set_data));
    95f2:	2120      	movs	r1, #32
    95f4:	3008      	adds	r0, #8
    95f6:	f01a f929 	bl	2384c <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    95fa:	2220      	movs	r2, #32
    95fc:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    95fe:	4681      	mov	r9, r0
	(void)memset(set_data, 0, sizeof(*set_data));
    9600:	f018 f87c 	bl	216fc <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    9604:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    9608:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    960c:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    960e:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    9610:	f8d4 8000 	ldr.w	r8, [r4]
    9614:	2300      	movs	r3, #0
    9616:	6862      	ldr	r2, [r4, #4]
    9618:	4293      	cmp	r3, r2
    961a:	d30d      	bcc.n	9638 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    961c:	9b00      	ldr	r3, [sp, #0]
    961e:	3408      	adds	r4, #8
    9620:	429c      	cmp	r4, r3
    9622:	d1f5      	bne.n	9610 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    9624:	2200      	movs	r2, #0
    9626:	4631      	mov	r1, r6
    9628:	4650      	mov	r0, sl
	*data_len = set_data_len;
    962a:	f889 5000 	strb.w	r5, [r9]
}
    962e:	b003      	add	sp, #12
    9630:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    9634:	f7ff be7a 	b.w	932c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    9638:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    963c:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    9640:	1ca8      	adds	r0, r5, #2
    9642:	1881      	adds	r1, r0, r2
    9644:	291f      	cmp	r1, #31
    9646:	d91a      	bls.n	967e <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    9648:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    964c:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    9650:	d101      	bne.n	9656 <hci_set_ad+0x7a>
    9652:	2a00      	cmp	r2, #0
    9654:	dc11      	bgt.n	967a <hci_set_ad+0x9e>
    9656:	4b17      	ldr	r3, [pc, #92]	; (96b4 <hci_set_ad+0xd8>)
    9658:	4917      	ldr	r1, [pc, #92]	; (96b8 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
    965a:	4818      	ldr	r0, [pc, #96]	; (96bc <hci_set_ad+0xe0>)
    965c:	1ac9      	subs	r1, r1, r3
    965e:	08c9      	lsrs	r1, r1, #3
    9660:	0189      	lsls	r1, r1, #6
    9662:	f041 0101 	orr.w	r1, r1, #1
    9666:	f016 f9c3 	bl	1f9f0 <log_0>
		net_buf_unref(buf);
    966a:	4630      	mov	r0, r6
    966c:	f011 ff72 	bl	1b554 <net_buf_unref>
					return -EINVAL;
    9670:	f06f 0015 	mvn.w	r0, #21
}
    9674:	b003      	add	sp, #12
    9676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    967a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    967e:	b2d7      	uxtb	r7, r2
    9680:	1c79      	adds	r1, r7, #1
    9682:	f80b 1005 	strb.w	r1, [fp, r5]
    9686:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    9688:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
    968a:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
    968e:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    9692:	f8d8 1004 	ldr.w	r1, [r8, #4]
    9696:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    9698:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    969a:	f018 f804 	bl	216a6 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    969e:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    96a0:	443d      	add	r5, r7
    96a2:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    96a4:	3301      	adds	r3, #1
    96a6:	f108 0808 	add.w	r8, r8, #8
    96aa:	e7b4      	b.n	9616 <hci_set_ad+0x3a>
		return -ENOBUFS;
    96ac:	f06f 0036 	mvn.w	r0, #54	; 0x36
    96b0:	e7e0      	b.n	9674 <hci_set_ad+0x98>
    96b2:	bf00      	nop
    96b4:	00024c24 	.word	0x00024c24
    96b8:	00024ce4 	.word	0x00024ce4
    96bc:	000278fc 	.word	0x000278fc

000096c0 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    96c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    96c4:	b087      	sub	sp, #28
    96c6:	4606      	mov	r6, r0
    96c8:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    96cc:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    96d0:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
    96d4:	460c      	mov	r4, r1
    96d6:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    96d8:	2100      	movs	r1, #0
    96da:	2210      	movs	r2, #16
    96dc:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    96de:	461d      	mov	r5, r3
	struct bt_ad d[2] = {};
    96e0:	f018 f80c 	bl	216fc <memset>
	if (use_name) {
    96e4:	f1b8 0f00 	cmp.w	r8, #0
    96e8:	d00e      	beq.n	9708 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    96ea:	bbb4      	cbnz	r4, 975a <le_adv_update.constprop.0+0x9a>
    96ec:	2d00      	cmp	r5, #0
    96ee:	d13f      	bne.n	9770 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    96f0:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 97a4 <le_adv_update.constprop.0+0xe4>
    96f4:	4658      	mov	r0, fp
    96f6:	f017 ffb3 	bl	21660 <strlen>
    96fa:	2309      	movs	r3, #9
    96fc:	f88d 3000 	strb.w	r3, [sp]
    9700:	f88d 0001 	strb.w	r0, [sp, #1]
    9704:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    9708:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    970c:	f1b8 0f00 	cmp.w	r8, #0
    9710:	d030      	beq.n	9774 <le_adv_update.constprop.0+0xb4>
    9712:	f1ba 0f00 	cmp.w	sl, #0
    9716:	d12d      	bne.n	9774 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    9718:	2301      	movs	r3, #1
			d[1].data = &data;
    971a:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    971e:	9305      	str	r3, [sp, #20]
			d_len = 2;
    9720:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    9722:	a902      	add	r1, sp, #8
    9724:	f242 0008 	movw	r0, #8200	; 0x2008
    9728:	f7ff ff58 	bl	95dc <hci_set_ad>
		if (err) {
    972c:	4604      	mov	r4, r0
    972e:	b938      	cbnz	r0, 9740 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    9730:	f1ba 0f00 	cmp.w	sl, #0
    9734:	d120      	bne.n	9778 <le_adv_update.constprop.0+0xb8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9736:	2104      	movs	r1, #4
    9738:	f106 0010 	add.w	r0, r6, #16
    973c:	f018 f92b 	bl	21996 <atomic_or>
}
    9740:	4620      	mov	r0, r4
    9742:	b007      	add	sp, #28
    9744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    9748:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    974c:	3a08      	subs	r2, #8
    974e:	2a01      	cmp	r2, #1
    9750:	d925      	bls.n	979e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    9752:	3301      	adds	r3, #1
    9754:	429f      	cmp	r7, r3
    9756:	d1f7      	bne.n	9748 <le_adv_update.constprop.0+0x88>
    9758:	e7c8      	b.n	96ec <le_adv_update.constprop.0+0x2c>
    975a:	2300      	movs	r3, #0
    975c:	e7fa      	b.n	9754 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    975e:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    9762:	3a08      	subs	r2, #8
    9764:	2a01      	cmp	r2, #1
    9766:	d91a      	bls.n	979e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    9768:	3301      	adds	r3, #1
    976a:	4599      	cmp	r9, r3
    976c:	d1f7      	bne.n	975e <le_adv_update.constprop.0+0x9e>
    976e:	e7bf      	b.n	96f0 <le_adv_update.constprop.0+0x30>
    9770:	2300      	movs	r3, #0
    9772:	e7fa      	b.n	976a <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    9774:	2201      	movs	r2, #1
    9776:	e7d4      	b.n	9722 <le_adv_update.constprop.0+0x62>
		d[0].len = sd_len;
    9778:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    977c:	2201      	movs	r2, #1
    977e:	f1b8 0f00 	cmp.w	r8, #0
    9782:	d003      	beq.n	978c <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    9784:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
    9786:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
    978a:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    978c:	a902      	add	r1, sp, #8
    978e:	f242 0009 	movw	r0, #8201	; 0x2009
    9792:	f7ff ff23 	bl	95dc <hci_set_ad>
		if (err) {
    9796:	2800      	cmp	r0, #0
    9798:	d0cd      	beq.n	9736 <le_adv_update.constprop.0+0x76>
    979a:	4604      	mov	r4, r0
    979c:	e7d0      	b.n	9740 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    979e:	f06f 0415 	mvn.w	r4, #21
    97a2:	e7cd      	b.n	9740 <le_adv_update.constprop.0+0x80>
    97a4:	00027915 	.word	0x00027915

000097a8 <conn_auto_initiate>:
{
    97a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    97aa:	7b43      	ldrb	r3, [r0, #13]
    97ac:	2b07      	cmp	r3, #7
{
    97ae:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    97b0:	d11e      	bne.n	97f0 <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    97b2:	1d06      	adds	r6, r0, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    97b4:	4630      	mov	r0, r6
    97b6:	f018 f8d3 	bl	21960 <atomic_get>
    97ba:	0483      	lsls	r3, r0, #18
    97bc:	d41a      	bmi.n	97f4 <conn_auto_initiate+0x4c>
    97be:	78e3      	ldrb	r3, [r4, #3]
    97c0:	b123      	cbz	r3, 97cc <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    97c2:	4b31      	ldr	r3, [pc, #196]	; (9888 <conn_auto_initiate+0xe0>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    97c4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    97c8:	071d      	lsls	r5, r3, #28
    97ca:	d513      	bpl.n	97f4 <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    97cc:	2102      	movs	r1, #2
    97ce:	f242 0016 	movw	r0, #8214	; 0x2016
    97d2:	f7ff fc4f 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
    97d6:	4605      	mov	r5, r0
    97d8:	b160      	cbz	r0, 97f4 <conn_auto_initiate+0x4c>
	cp = net_buf_add(buf, sizeof(*cp));
    97da:	2102      	movs	r1, #2
    97dc:	3008      	adds	r0, #8
    97de:	f01a f835 	bl	2384c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    97e2:	8823      	ldrh	r3, [r4, #0]
    97e4:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    97e6:	4629      	mov	r1, r5
    97e8:	f242 0016 	movw	r0, #8214	; 0x2016
    97ec:	f7ff fc7a 	bl	90e4 <bt_hci_cmd_send>
}
    97f0:	b004      	add	sp, #16
    97f2:	bd70      	pop	{r4, r5, r6, pc}
    97f4:	4630      	mov	r0, r6
    97f6:	f018 f8b3 	bl	21960 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    97fa:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    97fe:	4d22      	ldr	r5, [pc, #136]	; (9888 <conn_auto_initiate+0xe0>)
    9800:	f3c0 3100 	ubfx	r1, r0, #12, #1
    9804:	d11a      	bne.n	983c <conn_auto_initiate+0x94>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    9806:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    980a:	07d8      	lsls	r0, r3, #31
    980c:	d516      	bpl.n	983c <conn_auto_initiate+0x94>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    980e:	2302      	movs	r3, #2
    9810:	9100      	str	r1, [sp, #0]
    9812:	461a      	mov	r2, r3
    9814:	4620      	mov	r0, r4
    9816:	f018 f99b 	bl	21b50 <bt_le_set_phy>
		if (!err) {
    981a:	4601      	mov	r1, r0
    981c:	b920      	cbnz	r0, 9828 <conn_auto_initiate+0x80>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    981e:	2180      	movs	r1, #128	; 0x80
    9820:	4630      	mov	r0, r6
    9822:	f018 f8b8 	bl	21996 <atomic_or>
			return;
    9826:	e7e3      	b.n	97f0 <conn_auto_initiate+0x48>
    9828:	4a18      	ldr	r2, [pc, #96]	; (988c <conn_auto_initiate+0xe4>)
    982a:	4b19      	ldr	r3, [pc, #100]	; (9890 <conn_auto_initiate+0xe8>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    982c:	4819      	ldr	r0, [pc, #100]	; (9894 <conn_auto_initiate+0xec>)
    982e:	1ad2      	subs	r2, r2, r3
    9830:	08d2      	lsrs	r2, r2, #3
    9832:	0192      	lsls	r2, r2, #6
    9834:	f042 0201 	orr.w	r2, r2, #1
    9838:	f016 f8e7 	bl	1fa0a <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    983c:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    9840:	069a      	lsls	r2, r3, #26
    9842:	d5d5      	bpl.n	97f0 <conn_auto_initiate+0x48>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    9844:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    9848:	689b      	ldr	r3, [r3, #8]
    984a:	079b      	lsls	r3, r3, #30
    984c:	d5d0      	bpl.n	97f0 <conn_auto_initiate+0x48>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    984e:	f10d 010e 	add.w	r1, sp, #14
    9852:	a803      	add	r0, sp, #12
    9854:	f7ff fde2 	bl	941c <hci_le_read_max_data_len>
			if (!err) {
    9858:	2800      	cmp	r0, #0
    985a:	d1c9      	bne.n	97f0 <conn_auto_initiate+0x48>
				err = bt_le_set_data_len(conn,
    985c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9860:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9864:	4620      	mov	r0, r4
    9866:	f018 f956 	bl	21b16 <bt_le_set_data_len>
				if (err) {
    986a:	4601      	mov	r1, r0
    986c:	2800      	cmp	r0, #0
    986e:	d0bf      	beq.n	97f0 <conn_auto_initiate+0x48>
    9870:	4b07      	ldr	r3, [pc, #28]	; (9890 <conn_auto_initiate+0xe8>)
    9872:	4a06      	ldr	r2, [pc, #24]	; (988c <conn_auto_initiate+0xe4>)
					BT_ERR("Failed to set data len (%d)", err);
    9874:	4808      	ldr	r0, [pc, #32]	; (9898 <conn_auto_initiate+0xf0>)
    9876:	1ad2      	subs	r2, r2, r3
    9878:	08d2      	lsrs	r2, r2, #3
    987a:	0192      	lsls	r2, r2, #6
    987c:	f042 0201 	orr.w	r2, r2, #1
    9880:	f016 f8c3 	bl	1fa0a <log_1>
		}
    9884:	e7b4      	b.n	97f0 <conn_auto_initiate+0x48>
    9886:	bf00      	nop
    9888:	20000000 	.word	0x20000000
    988c:	00024ce4 	.word	0x00024ce4
    9890:	00024c24 	.word	0x00024c24
    9894:	0002792b 	.word	0x0002792b
    9898:	00027945 	.word	0x00027945

0000989c <le_phy_update_complete>:
{
    989c:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    989e:	6883      	ldr	r3, [r0, #8]
    98a0:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    98a4:	4628      	mov	r0, r5
    98a6:	f001 fb05 	bl	aeb4 <bt_conn_lookup_handle>
	if (!conn) {
    98aa:	4604      	mov	r4, r0
    98ac:	b960      	cbnz	r0, 98c8 <le_phy_update_complete+0x2c>
    98ae:	4b11      	ldr	r3, [pc, #68]	; (98f4 <le_phy_update_complete+0x58>)
    98b0:	4a11      	ldr	r2, [pc, #68]	; (98f8 <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    98b2:	4812      	ldr	r0, [pc, #72]	; (98fc <le_phy_update_complete+0x60>)
    98b4:	1ad2      	subs	r2, r2, r3
    98b6:	08d2      	lsrs	r2, r2, #3
    98b8:	0192      	lsls	r2, r2, #6
    98ba:	4629      	mov	r1, r5
    98bc:	f042 0201 	orr.w	r2, r2, #1
}
    98c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    98c4:	f016 b8a1 	b.w	1fa0a <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    98c8:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    98ca:	f06f 0180 	mvn.w	r1, #128	; 0x80
    98ce:	4628      	mov	r0, r5
    98d0:	f018 f852 	bl	21978 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    98d4:	0603      	lsls	r3, r0, #24
    98d6:	d507      	bpl.n	98e8 <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    98d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    98dc:	4628      	mov	r0, r5
    98de:	f018 f85a 	bl	21996 <atomic_or>
		conn_auto_initiate(conn);
    98e2:	4620      	mov	r0, r4
    98e4:	f7ff ff60 	bl	97a8 <conn_auto_initiate>
	bt_conn_unref(conn);
    98e8:	4620      	mov	r0, r4
}
    98ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    98ee:	f018 bac7 	b.w	21e80 <bt_conn_unref>
    98f2:	bf00      	nop
    98f4:	00024c24 	.word	0x00024c24
    98f8:	00024ce4 	.word	0x00024ce4
    98fc:	00027644 	.word	0x00027644

00009900 <le_remote_feat_complete>:
{
    9900:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    9902:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9904:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    9908:	4630      	mov	r0, r6
    990a:	f001 fad3 	bl	aeb4 <bt_conn_lookup_handle>
	if (!conn) {
    990e:	4604      	mov	r4, r0
    9910:	b960      	cbnz	r0, 992c <le_remote_feat_complete+0x2c>
    9912:	4a10      	ldr	r2, [pc, #64]	; (9954 <le_remote_feat_complete+0x54>)
    9914:	4b10      	ldr	r3, [pc, #64]	; (9958 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9916:	4811      	ldr	r0, [pc, #68]	; (995c <le_remote_feat_complete+0x5c>)
    9918:	1ad2      	subs	r2, r2, r3
    991a:	08d2      	lsrs	r2, r2, #3
    991c:	0192      	lsls	r2, r2, #6
    991e:	4631      	mov	r1, r6
    9920:	f042 0201 	orr.w	r2, r2, #1
}
    9924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9928:	f016 b86f 	b.w	1fa0a <log_1>
	if (!evt->status) {
    992c:	782b      	ldrb	r3, [r5, #0]
    992e:	b923      	cbnz	r3, 993a <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    9930:	2208      	movs	r2, #8
    9932:	1ce9      	adds	r1, r5, #3
    9934:	30ac      	adds	r0, #172	; 0xac
    9936:	f017 feb6 	bl	216a6 <memcpy>
    993a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    993e:	1d20      	adds	r0, r4, #4
    9940:	f018 f829 	bl	21996 <atomic_or>
	conn_auto_initiate(conn);
    9944:	4620      	mov	r0, r4
    9946:	f7ff ff2f 	bl	97a8 <conn_auto_initiate>
	bt_conn_unref(conn);
    994a:	4620      	mov	r0, r4
}
    994c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    9950:	f018 ba96 	b.w	21e80 <bt_conn_unref>
    9954:	00024ce4 	.word	0x00024ce4
    9958:	00024c24 	.word	0x00024c24
    995c:	00027644 	.word	0x00027644

00009960 <bt_id_add>:
{
    9960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    9962:	4f5b      	ldr	r7, [pc, #364]	; (9ad0 <bt_id_add+0x170>)
    9964:	f897 20e0 	ldrb.w	r2, [r7, #224]	; 0xe0
    9968:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
{
    996c:	4604      	mov	r4, r0
    996e:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    9970:	b10a      	cbz	r2, 9976 <bt_id_add+0x16>
    9972:	429a      	cmp	r2, r3
    9974:	d208      	bcs.n	9988 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
    9976:	3301      	adds	r3, #1
    9978:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    997c:	7a23      	ldrb	r3, [r4, #8]
    997e:	f043 0304 	orr.w	r3, r3, #4
    9982:	7223      	strb	r3, [r4, #8]
}
    9984:	b003      	add	sp, #12
    9986:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    9988:	2100      	movs	r1, #0
    998a:	2206      	movs	r2, #6
    998c:	4608      	mov	r0, r1
    998e:	f001 fbcd 	bl	b12c <bt_conn_lookup_state_le>
	if (conn) {
    9992:	4606      	mov	r6, r0
    9994:	b168      	cbz	r0, 99b2 <bt_id_add+0x52>
    9996:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    999a:	f107 0094 	add.w	r0, r7, #148	; 0x94
    999e:	f017 fffa 	bl	21996 <atomic_or>
	keys->state |= flag;
    99a2:	7a23      	ldrb	r3, [r4, #8]
    99a4:	f043 0301 	orr.w	r3, r3, #1
    99a8:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    99aa:	4630      	mov	r0, r6
    99ac:	f018 fa68 	bl	21e80 <bt_conn_unref>
		return;
    99b0:	e7e8      	b.n	9984 <bt_id_add+0x24>
	func(&bt_dev.adv, data);
    99b2:	4601      	mov	r1, r0
    99b4:	f107 0018 	add.w	r0, r7, #24
    99b8:	f018 f81d 	bl	219f6 <adv_pause_enabled>
	if (bt_dev.le.rl_entries) {
    99bc:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
    99c0:	b173      	cbz	r3, 99e0 <bt_id_add+0x80>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    99c2:	4630      	mov	r0, r6
    99c4:	f018 f86d 	bl	21aa2 <addr_res_enable>
		if (err) {
    99c8:	b150      	cbz	r0, 99e0 <bt_id_add+0x80>
    99ca:	4942      	ldr	r1, [pc, #264]	; (9ad4 <bt_id_add+0x174>)
    99cc:	4b42      	ldr	r3, [pc, #264]	; (9ad8 <bt_id_add+0x178>)
			BT_WARN("Failed to disable address resolution");
    99ce:	4843      	ldr	r0, [pc, #268]	; (9adc <bt_id_add+0x17c>)
    99d0:	1ac9      	subs	r1, r1, r3
    99d2:	08c9      	lsrs	r1, r1, #3
    99d4:	0189      	lsls	r1, r1, #6
    99d6:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
    99da:	f016 f809 	bl	1f9f0 <log_0>
	if (err) {
    99de:	e023      	b.n	9a28 <bt_id_add+0xc8>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    99e0:	f895 20e1 	ldrb.w	r2, [r5, #225]	; 0xe1
    99e4:	f895 30e0 	ldrb.w	r3, [r5, #224]	; 0xe0
    99e8:	429a      	cmp	r2, r3
    99ea:	d125      	bne.n	9a38 <bt_id_add+0xd8>
    99ec:	4b3a      	ldr	r3, [pc, #232]	; (9ad8 <bt_id_add+0x178>)
    99ee:	4e39      	ldr	r6, [pc, #228]	; (9ad4 <bt_id_add+0x174>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
    99f0:	483b      	ldr	r0, [pc, #236]	; (9ae0 <bt_id_add+0x180>)
    99f2:	1af6      	subs	r6, r6, r3
    99f4:	08f6      	lsrs	r6, r6, #3
    99f6:	01b6      	lsls	r6, r6, #6
    99f8:	f046 0102 	orr.w	r1, r6, #2
    99fc:	f015 fff8 	bl	1f9f0 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    9a00:	2200      	movs	r2, #0
    9a02:	4611      	mov	r1, r2
    9a04:	f242 0029 	movw	r0, #8233	; 0x2029
    9a08:	f7ff fc90 	bl	932c <bt_hci_cmd_send_sync>
		if (err) {
    9a0c:	b118      	cbz	r0, 9a16 <bt_id_add+0xb6>
			BT_ERR("Failed to clear resolution list");
    9a0e:	4835      	ldr	r0, [pc, #212]	; (9ae4 <bt_id_add+0x184>)
    9a10:	f046 0101 	orr.w	r1, r6, #1
    9a14:	e7e1      	b.n	99da <bt_id_add+0x7a>
		bt_dev.le.rl_entries++;
    9a16:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    9a1a:	3301      	adds	r3, #1
    9a1c:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    9a20:	7a23      	ldrb	r3, [r4, #8]
    9a22:	f043 0304 	orr.w	r3, r3, #4
    9a26:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    9a28:	2001      	movs	r0, #1
    9a2a:	f018 f83a 	bl	21aa2 <addr_res_enable>
	func(&bt_dev.adv, data);
    9a2e:	482e      	ldr	r0, [pc, #184]	; (9ae8 <bt_id_add+0x188>)
    9a30:	2100      	movs	r1, #0
    9a32:	f017 fff5 	bl	21a20 <adv_unpause_enabled>
}
    9a36:	e7a5      	b.n	9984 <bt_id_add+0x24>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    9a38:	1c67      	adds	r7, r4, #1
    9a3a:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    9a3e:	4638      	mov	r0, r7
    9a40:	f017 fffe 	bl	21a40 <hci_id_add.isra.0>
	if (err) {
    9a44:	4606      	mov	r6, r0
    9a46:	b140      	cbz	r0, 9a5a <bt_id_add+0xfa>
    9a48:	4922      	ldr	r1, [pc, #136]	; (9ad4 <bt_id_add+0x174>)
    9a4a:	4b23      	ldr	r3, [pc, #140]	; (9ad8 <bt_id_add+0x178>)
		BT_ERR("Failed to add IRK to controller");
    9a4c:	4827      	ldr	r0, [pc, #156]	; (9aec <bt_id_add+0x18c>)
    9a4e:	1ac9      	subs	r1, r1, r3
    9a50:	08c9      	lsrs	r1, r1, #3
    9a52:	0189      	lsls	r1, r1, #6
    9a54:	f041 0101 	orr.w	r1, r1, #1
    9a58:	e7bf      	b.n	99da <bt_id_add+0x7a>
	bt_dev.le.rl_entries++;
    9a5a:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    9a5e:	3301      	adds	r3, #1
    9a60:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
	keys->state |= BT_KEYS_ID_ADDED;
    9a64:	7a23      	ldrb	r3, [r4, #8]
    9a66:	f043 0304 	orr.w	r3, r3, #4
    9a6a:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    9a6c:	f895 306b 	ldrb.w	r3, [r5, #107]	; 0x6b
    9a70:	075b      	lsls	r3, r3, #29
    9a72:	d408      	bmi.n	9a86 <bt_id_add+0x126>
    9a74:	4917      	ldr	r1, [pc, #92]	; (9ad4 <bt_id_add+0x174>)
    9a76:	4b18      	ldr	r3, [pc, #96]	; (9ad8 <bt_id_add+0x178>)
		BT_WARN("Set privacy mode command is not supported");
    9a78:	481d      	ldr	r0, [pc, #116]	; (9af0 <bt_id_add+0x190>)
    9a7a:	1ac9      	subs	r1, r1, r3
    9a7c:	08c9      	lsrs	r1, r1, #3
    9a7e:	0189      	lsls	r1, r1, #6
    9a80:	f041 0102 	orr.w	r1, r1, #2
    9a84:	e7a9      	b.n	99da <bt_id_add+0x7a>
	bt_addr_le_copy(&cp.id_addr, addr);
    9a86:	4639      	mov	r1, r7
    9a88:	4668      	mov	r0, sp
    9a8a:	f017 ff6f 	bl	2196c <bt_addr_le_copy>
	cp.mode = mode;
    9a8e:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    9a90:	2108      	movs	r1, #8
    9a92:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    9a96:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    9a9a:	f7ff faeb 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
    9a9e:	4604      	mov	r4, r0
    9aa0:	b940      	cbnz	r0, 9ab4 <bt_id_add+0x154>
    9aa2:	490c      	ldr	r1, [pc, #48]	; (9ad4 <bt_id_add+0x174>)
    9aa4:	4b0c      	ldr	r3, [pc, #48]	; (9ad8 <bt_id_add+0x178>)
		BT_ERR("Failed to set privacy mode");
    9aa6:	4813      	ldr	r0, [pc, #76]	; (9af4 <bt_id_add+0x194>)
    9aa8:	1ac9      	subs	r1, r1, r3
    9aaa:	08c9      	lsrs	r1, r1, #3
    9aac:	0189      	lsls	r1, r1, #6
    9aae:	f041 0101 	orr.w	r1, r1, #1
    9ab2:	e792      	b.n	99da <bt_id_add+0x7a>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    9ab4:	2208      	movs	r2, #8
    9ab6:	4669      	mov	r1, sp
    9ab8:	4410      	add	r0, r2
    9aba:	f019 fecd 	bl	23858 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    9abe:	4632      	mov	r2, r6
    9ac0:	4621      	mov	r1, r4
    9ac2:	f242 004e 	movw	r0, #8270	; 0x204e
    9ac6:	f7ff fc31 	bl	932c <bt_hci_cmd_send_sync>
	if (err) {
    9aca:	2800      	cmp	r0, #0
    9acc:	d0ac      	beq.n	9a28 <bt_id_add+0xc8>
    9ace:	e7e8      	b.n	9aa2 <bt_id_add+0x142>
    9ad0:	20000000 	.word	0x20000000
    9ad4:	00024ce4 	.word	0x00024ce4
    9ad8:	00024c24 	.word	0x00024c24
    9adc:	00027961 	.word	0x00027961
    9ae0:	00027986 	.word	0x00027986
    9ae4:	000279b7 	.word	0x000279b7
    9ae8:	20000018 	.word	0x20000018
    9aec:	000279d7 	.word	0x000279d7
    9af0:	000279f7 	.word	0x000279f7
    9af4:	00027a21 	.word	0x00027a21

00009af8 <bt_id_del>:
{
    9af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
    9afc:	4f45      	ldr	r7, [pc, #276]	; (9c14 <bt_id_del+0x11c>)
    9afe:	f897 20e0 	ldrb.w	r2, [r7, #224]	; 0xe0
    9b02:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
{
    9b06:	4604      	mov	r4, r0
    9b08:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size ||
    9b0a:	b112      	cbz	r2, 9b12 <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    9b0c:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    9b0e:	4293      	cmp	r3, r2
    9b10:	dd08      	ble.n	9b24 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
    9b12:	3b01      	subs	r3, #1
    9b14:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    9b18:	7a23      	ldrb	r3, [r4, #8]
    9b1a:	f023 0304 	bic.w	r3, r3, #4
    9b1e:	7223      	strb	r3, [r4, #8]
}
    9b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    9b24:	2100      	movs	r1, #0
    9b26:	2206      	movs	r2, #6
    9b28:	4608      	mov	r0, r1
    9b2a:	f001 faff 	bl	b12c <bt_conn_lookup_state_le>
	if (conn) {
    9b2e:	4606      	mov	r6, r0
    9b30:	b170      	cbz	r0, 9b50 <bt_id_del+0x58>
    9b32:	f107 0094 	add.w	r0, r7, #148	; 0x94
    9b36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    9b3a:	f017 ff2c 	bl	21996 <atomic_or>
	keys->state |= flag;
    9b3e:	7a23      	ldrb	r3, [r4, #8]
    9b40:	f043 0302 	orr.w	r3, r3, #2
    9b44:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    9b46:	4630      	mov	r0, r6
}
    9b48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    9b4c:	f018 b998 	b.w	21e80 <bt_conn_unref>
	func(&bt_dev.adv, data);
    9b50:	4601      	mov	r1, r0
    9b52:	f107 0018 	add.w	r0, r7, #24
    9b56:	f017 ff4e 	bl	219f6 <adv_pause_enabled>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    9b5a:	4630      	mov	r0, r6
    9b5c:	f017 ffa1 	bl	21aa2 <addr_res_enable>
	if (err) {
    9b60:	4606      	mov	r6, r0
    9b62:	b1b0      	cbz	r0, 9b92 <bt_id_del+0x9a>
    9b64:	4a2c      	ldr	r2, [pc, #176]	; (9c18 <bt_id_del+0x120>)
    9b66:	4b2d      	ldr	r3, [pc, #180]	; (9c1c <bt_id_del+0x124>)
    9b68:	1ad2      	subs	r2, r2, r3
    9b6a:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
    9b6c:	0192      	lsls	r2, r2, #6
    9b6e:	4601      	mov	r1, r0
    9b70:	f042 0201 	orr.w	r2, r2, #1
    9b74:	482a      	ldr	r0, [pc, #168]	; (9c20 <bt_id_del+0x128>)
    9b76:	f015 ff48 	bl	1fa0a <log_1>
	if (bt_dev.le.rl_entries) {
    9b7a:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    9b7e:	b113      	cbz	r3, 9b86 <bt_id_del+0x8e>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    9b80:	2001      	movs	r0, #1
    9b82:	f017 ff8e 	bl	21aa2 <addr_res_enable>
}
    9b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	func(&bt_dev.adv, data);
    9b8a:	4826      	ldr	r0, [pc, #152]	; (9c24 <bt_id_del+0x12c>)
    9b8c:	2100      	movs	r1, #0
    9b8e:	f017 bf47 	b.w	21a20 <adv_unpause_enabled>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    9b92:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
    9b96:	f897 20e0 	ldrb.w	r2, [r7, #224]	; 0xe0
    9b9a:	429a      	cmp	r2, r3
    9b9c:	d20c      	bcs.n	9bb8 <bt_id_del+0xc0>
		bt_dev.le.rl_entries--;
    9b9e:	3b01      	subs	r3, #1
    9ba0:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    9ba4:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    9ba6:	4920      	ldr	r1, [pc, #128]	; (9c28 <bt_id_del+0x130>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    9ba8:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    9bac:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    9bae:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    9bb0:	2002      	movs	r0, #2
    9bb2:	f005 fdb3 	bl	f71c <bt_keys_foreach>
		goto done;
    9bb6:	e7e0      	b.n	9b7a <bt_id_del+0x82>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    9bb8:	2107      	movs	r1, #7
    9bba:	f242 0028 	movw	r0, #8232	; 0x2028
    9bbe:	f7ff fa59 	bl	9074 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    9bc2:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
    9bc6:	4607      	mov	r7, r0
    9bc8:	b950      	cbnz	r0, 9be0 <bt_id_del+0xe8>
    9bca:	4b14      	ldr	r3, [pc, #80]	; (9c1c <bt_id_del+0x124>)
    9bcc:	4912      	ldr	r1, [pc, #72]	; (9c18 <bt_id_del+0x120>)
		BT_ERR("Failed to remove IRK from controller");
    9bce:	4817      	ldr	r0, [pc, #92]	; (9c2c <bt_id_del+0x134>)
    9bd0:	1ac9      	subs	r1, r1, r3
    9bd2:	08c9      	lsrs	r1, r1, #3
    9bd4:	0189      	lsls	r1, r1, #6
    9bd6:	f041 0101 	orr.w	r1, r1, #1
    9bda:	f015 ff09 	bl	1f9f0 <log_0>
		goto done;
    9bde:	e7cc      	b.n	9b7a <bt_id_del+0x82>
	cp = net_buf_add(buf, sizeof(*cp));
    9be0:	2107      	movs	r1, #7
    9be2:	3008      	adds	r0, #8
    9be4:	f019 fe32 	bl	2384c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    9be8:	4641      	mov	r1, r8
    9bea:	f017 febf 	bl	2196c <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    9bee:	4632      	mov	r2, r6
    9bf0:	4639      	mov	r1, r7
    9bf2:	f242 0028 	movw	r0, #8232	; 0x2028
    9bf6:	f7ff fb99 	bl	932c <bt_hci_cmd_send_sync>
	if (err) {
    9bfa:	2800      	cmp	r0, #0
    9bfc:	d1e5      	bne.n	9bca <bt_id_del+0xd2>
	bt_dev.le.rl_entries--;
    9bfe:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    9c02:	3b01      	subs	r3, #1
    9c04:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
	keys->state &= ~BT_KEYS_ID_ADDED;
    9c08:	7a23      	ldrb	r3, [r4, #8]
    9c0a:	f023 0304 	bic.w	r3, r3, #4
    9c0e:	7223      	strb	r3, [r4, #8]
    9c10:	e7b3      	b.n	9b7a <bt_id_del+0x82>
    9c12:	bf00      	nop
    9c14:	20000000 	.word	0x20000000
    9c18:	00024ce4 	.word	0x00024ce4
    9c1c:	00024c24 	.word	0x00024c24
    9c20:	00027a3c 	.word	0x00027a3c
    9c24:	20000018 	.word	0x20000018
    9c28:	00021a91 	.word	0x00021a91
    9c2c:	00027a69 	.word	0x00027a69

00009c30 <hci_event_prio>:
{
    9c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c34:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    9c36:	f100 0608 	add.w	r6, r0, #8
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    9c3a:	4630      	mov	r0, r6
    9c3c:	f019 fe47 	bl	238ce <net_buf_simple_headroom>
	state->len = buf->len;
    9c40:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9c44:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    9c48:	4605      	mov	r5, r0
    9c4a:	d80c      	bhi.n	9c66 <hci_event_prio+0x36>
    9c4c:	4a1c      	ldr	r2, [pc, #112]	; (9cc0 <hci_event_prio+0x90>)
    9c4e:	491d      	ldr	r1, [pc, #116]	; (9cc4 <hci_event_prio+0x94>)
    9c50:	481d      	ldr	r0, [pc, #116]	; (9cc8 <hci_event_prio+0x98>)
    9c52:	f641 03a4 	movw	r3, #6308	; 0x18a4
    9c56:	f015 f9fd 	bl	1f054 <printk>
    9c5a:	4040      	eors	r0, r0
    9c5c:	f380 8811 	msr	BASEPRI, r0
    9c60:	f04f 0003 	mov.w	r0, #3
    9c64:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9c66:	2102      	movs	r1, #2
    9c68:	4630      	mov	r0, r6
    9c6a:	f019 fe20 	bl	238ae <net_buf_simple_pull_mem>
    9c6e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    9c70:	7800      	ldrb	r0, [r0, #0]
    9c72:	f017 fe54 	bl	2191e <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    9c76:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    9c78:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    9c7a:	d40c      	bmi.n	9c96 <hci_event_prio+0x66>
    9c7c:	4a10      	ldr	r2, [pc, #64]	; (9cc0 <hci_event_prio+0x90>)
    9c7e:	4913      	ldr	r1, [pc, #76]	; (9ccc <hci_event_prio+0x9c>)
    9c80:	4811      	ldr	r0, [pc, #68]	; (9cc8 <hci_event_prio+0x98>)
    9c82:	f641 03a8 	movw	r3, #6312	; 0x18a8
    9c86:	f015 f9e5 	bl	1f054 <printk>
    9c8a:	4040      	eors	r0, r0
    9c8c:	f380 8811 	msr	BASEPRI, r0
    9c90:	f04f 0003 	mov.w	r0, #3
    9c94:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    9c96:	2305      	movs	r3, #5
    9c98:	4a0d      	ldr	r2, [pc, #52]	; (9cd0 <hci_event_prio+0xa0>)
    9c9a:	7838      	ldrb	r0, [r7, #0]
    9c9c:	4621      	mov	r1, r4
    9c9e:	f7fe ff9f 	bl	8be0 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    9ca2:	07b3      	lsls	r3, r6, #30
    9ca4:	d507      	bpl.n	9cb6 <hci_event_prio+0x86>
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    9ca6:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    9ca8:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    9cac:	fa10 f585 	uxtah	r5, r0, r5
    9cb0:	60a5      	str	r5, [r4, #8]
}
    9cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    9cb6:	4620      	mov	r0, r4
}
    9cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    9cbc:	f011 bc4a 	b.w	1b554 <net_buf_unref>
    9cc0:	00027784 	.word	0x00027784
    9cc4:	00027a8e 	.word	0x00027a8e
    9cc8:	000277c1 	.word	0x000277c1
    9ccc:	00027aa7 	.word	0x00027aa7
    9cd0:	00025290 	.word	0x00025290

00009cd4 <bt_recv>:
{
    9cd4:	b570      	push	{r4, r5, r6, lr}
	return ((struct bt_buf_data *)net_buf_user_data(buf))->type;
    9cd6:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    9cd8:	2901      	cmp	r1, #1
{
    9cda:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    9cdc:	d04b      	beq.n	9d76 <bt_recv+0xa2>
    9cde:	2903      	cmp	r1, #3
    9ce0:	d178      	bne.n	9dd4 <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9ce2:	8983      	ldrh	r3, [r0, #12]
    9ce4:	2b03      	cmp	r3, #3
    9ce6:	d80c      	bhi.n	9d02 <bt_recv+0x2e>
    9ce8:	4a42      	ldr	r2, [pc, #264]	; (9df4 <bt_recv+0x120>)
    9cea:	4943      	ldr	r1, [pc, #268]	; (9df8 <bt_recv+0x124>)
    9cec:	4843      	ldr	r0, [pc, #268]	; (9dfc <bt_recv+0x128>)
    9cee:	f240 43af 	movw	r3, #1199	; 0x4af
    9cf2:	f015 f9af 	bl	1f054 <printk>
    9cf6:	4040      	eors	r0, r0
    9cf8:	f380 8811 	msr	BASEPRI, r0
    9cfc:	f04f 0003 	mov.w	r0, #3
    9d00:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9d02:	2104      	movs	r1, #4
    9d04:	f104 0008 	add.w	r0, r4, #8
    9d08:	f019 fdd1 	bl	238ae <net_buf_simple_pull_mem>
	if (buf->len != len) {
    9d0c:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    9d0e:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    9d10:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    9d12:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    9d14:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    9d18:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    9d1a:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    9d1c:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    9d1e:	d00d      	beq.n	9d3c <bt_recv+0x68>
    9d20:	4837      	ldr	r0, [pc, #220]	; (9e00 <bt_recv+0x12c>)
    9d22:	4b38      	ldr	r3, [pc, #224]	; (9e04 <bt_recv+0x130>)
    9d24:	1a1b      	subs	r3, r3, r0
    9d26:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    9d28:	019b      	lsls	r3, r3, #6
    9d2a:	4837      	ldr	r0, [pc, #220]	; (9e08 <bt_recv+0x134>)
    9d2c:	f043 0301 	orr.w	r3, r3, #1
    9d30:	f015 fe7f 	bl	1fa32 <log_2>
	net_buf_unref(buf);
    9d34:	4620      	mov	r0, r4
    9d36:	f011 fc0d 	bl	1b554 <net_buf_unref>
    9d3a:	e01a      	b.n	9d72 <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    9d3c:	f001 f8ba 	bl	aeb4 <bt_conn_lookup_handle>
	if (!conn) {
    9d40:	4605      	mov	r5, r0
    9d42:	b958      	cbnz	r0, 9d5c <bt_recv+0x88>
    9d44:	4b2e      	ldr	r3, [pc, #184]	; (9e00 <bt_recv+0x12c>)
    9d46:	4a2f      	ldr	r2, [pc, #188]	; (9e04 <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    9d48:	8ae1      	ldrh	r1, [r4, #22]
    9d4a:	4830      	ldr	r0, [pc, #192]	; (9e0c <bt_recv+0x138>)
    9d4c:	1ad2      	subs	r2, r2, r3
    9d4e:	08d2      	lsrs	r2, r2, #3
    9d50:	0192      	lsls	r2, r2, #6
    9d52:	f042 0201 	orr.w	r2, r2, #1
    9d56:	f015 fe58 	bl	1fa0a <log_1>
		net_buf_unref(buf);
    9d5a:	e7eb      	b.n	9d34 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    9d5c:	f001 fb8c 	bl	b478 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    9d60:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    9d62:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    9d64:	4621      	mov	r1, r4
    9d66:	4628      	mov	r0, r5
    9d68:	f000 ff42 	bl	abf0 <bt_conn_recv>
	bt_conn_unref(conn);
    9d6c:	4628      	mov	r0, r5
    9d6e:	f018 f887 	bl	21e80 <bt_conn_unref>
		return 0;
    9d72:	2000      	movs	r0, #0
}
    9d74:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9d76:	8983      	ldrh	r3, [r0, #12]
    9d78:	2b01      	cmp	r3, #1
    9d7a:	d80c      	bhi.n	9d96 <bt_recv+0xc2>
    9d7c:	4a1d      	ldr	r2, [pc, #116]	; (9df4 <bt_recv+0x120>)
    9d7e:	491e      	ldr	r1, [pc, #120]	; (9df8 <bt_recv+0x124>)
    9d80:	481e      	ldr	r0, [pc, #120]	; (9dfc <bt_recv+0x128>)
    9d82:	f241 33fa 	movw	r3, #5114	; 0x13fa
    9d86:	f015 f965 	bl	1f054 <printk>
    9d8a:	4040      	eors	r0, r0
    9d8c:	f380 8811 	msr	BASEPRI, r0
    9d90:	f04f 0003 	mov.w	r0, #3
    9d94:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9d96:	2102      	movs	r1, #2
    9d98:	f104 0008 	add.w	r0, r4, #8
    9d9c:	f019 fd87 	bl	238ae <net_buf_simple_pull_mem>
    9da0:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    9da2:	7800      	ldrb	r0, [r0, #0]
    9da4:	f017 fdbb 	bl	2191e <bt_hci_evt_get_flags>
    9da8:	0783      	lsls	r3, r0, #30
    9daa:	d40c      	bmi.n	9dc6 <bt_recv+0xf2>
    9dac:	4a11      	ldr	r2, [pc, #68]	; (9df4 <bt_recv+0x120>)
    9dae:	4918      	ldr	r1, [pc, #96]	; (9e10 <bt_recv+0x13c>)
    9db0:	4812      	ldr	r0, [pc, #72]	; (9dfc <bt_recv+0x128>)
    9db2:	f241 33fe 	movw	r3, #5118	; 0x13fe
    9db6:	f015 f94d 	bl	1f054 <printk>
    9dba:	4040      	eors	r0, r0
    9dbc:	f380 8811 	msr	BASEPRI, r0
    9dc0:	f04f 0003 	mov.w	r0, #3
    9dc4:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    9dc6:	4a13      	ldr	r2, [pc, #76]	; (9e14 <bt_recv+0x140>)
    9dc8:	7828      	ldrb	r0, [r5, #0]
    9dca:	2306      	movs	r3, #6
    9dcc:	4621      	mov	r1, r4
    9dce:	f7fe ff07 	bl	8be0 <handle_event>
    9dd2:	e7af      	b.n	9d34 <bt_recv+0x60>
    9dd4:	4b0a      	ldr	r3, [pc, #40]	; (9e00 <bt_recv+0x12c>)
    9dd6:	4a0b      	ldr	r2, [pc, #44]	; (9e04 <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    9dd8:	480f      	ldr	r0, [pc, #60]	; (9e18 <bt_recv+0x144>)
    9dda:	1ad2      	subs	r2, r2, r3
    9ddc:	08d2      	lsrs	r2, r2, #3
    9dde:	0192      	lsls	r2, r2, #6
    9de0:	f042 0201 	orr.w	r2, r2, #1
    9de4:	f015 fe11 	bl	1fa0a <log_1>
		net_buf_unref(buf);
    9de8:	4620      	mov	r0, r4
    9dea:	f011 fbb3 	bl	1b554 <net_buf_unref>
		return -EINVAL;
    9dee:	f06f 0015 	mvn.w	r0, #21
    9df2:	e7bf      	b.n	9d74 <bt_recv+0xa0>
    9df4:	00027784 	.word	0x00027784
    9df8:	00027a8e 	.word	0x00027a8e
    9dfc:	000277c1 	.word	0x000277c1
    9e00:	00024c24 	.word	0x00024c24
    9e04:	00024ce4 	.word	0x00024ce4
    9e08:	00027ac0 	.word	0x00027ac0
    9e0c:	00027ae4 	.word	0x00027ae4
    9e10:	00027b06 	.word	0x00027b06
    9e14:	00025250 	.word	0x00025250
    9e18:	00027b34 	.word	0x00027b34

00009e1c <bt_recv_prio>:
{
    9e1c:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9e1e:	7d03      	ldrb	r3, [r0, #20]
    9e20:	2b01      	cmp	r3, #1
{
    9e22:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9e24:	d00c      	beq.n	9e40 <bt_recv_prio+0x24>
    9e26:	4a09      	ldr	r2, [pc, #36]	; (9e4c <bt_recv_prio+0x30>)
    9e28:	4909      	ldr	r1, [pc, #36]	; (9e50 <bt_recv_prio+0x34>)
    9e2a:	480a      	ldr	r0, [pc, #40]	; (9e54 <bt_recv_prio+0x38>)
    9e2c:	f641 03eb 	movw	r3, #6379	; 0x18eb
    9e30:	f015 f910 	bl	1f054 <printk>
    9e34:	4040      	eors	r0, r0
    9e36:	f380 8811 	msr	BASEPRI, r0
    9e3a:	f04f 0003 	mov.w	r0, #3
    9e3e:	df02      	svc	2
	hci_event_prio(buf);
    9e40:	4620      	mov	r0, r4
    9e42:	f7ff fef5 	bl	9c30 <hci_event_prio>
}
    9e46:	2000      	movs	r0, #0
    9e48:	bd10      	pop	{r4, pc}
    9e4a:	bf00      	nop
    9e4c:	00027784 	.word	0x00027784
    9e50:	00027b48 	.word	0x00027b48
    9e54:	000277c1 	.word	0x000277c1

00009e58 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    9e58:	4a08      	ldr	r2, [pc, #32]	; (9e7c <bt_hci_driver_register+0x24>)
{
    9e5a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    9e5c:	f8d2 011c 	ldr.w	r0, [r2, #284]	; 0x11c
    9e60:	b930      	cbnz	r0, 9e70 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    9e62:	68d9      	ldr	r1, [r3, #12]
    9e64:	b139      	cbz	r1, 9e76 <bt_hci_driver_register+0x1e>
    9e66:	6919      	ldr	r1, [r3, #16]
    9e68:	b129      	cbz	r1, 9e76 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    9e6a:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	return 0;
    9e6e:	4770      	bx	lr
		return -EALREADY;
    9e70:	f06f 0044 	mvn.w	r0, #68	; 0x44
    9e74:	4770      	bx	lr
		return -EINVAL;
    9e76:	f06f 0015 	mvn.w	r0, #21
}
    9e7a:	4770      	bx	lr
    9e7c:	20000000 	.word	0x20000000

00009e80 <bt_finalize_init>:
{
    9e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9e84:	4c2b      	ldr	r4, [pc, #172]	; (9f34 <bt_finalize_init+0xb4>)
    9e86:	4d2c      	ldr	r5, [pc, #176]	; (9f38 <bt_finalize_init+0xb8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    9e88:	4e2c      	ldr	r6, [pc, #176]	; (9f3c <bt_finalize_init+0xbc>)
		BT_INFO("Identity[%d]: %s",
    9e8a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 9f54 <bt_finalize_init+0xd4>
{
    9e8e:	b087      	sub	sp, #28
    9e90:	2102      	movs	r1, #2
    9e92:	f104 0094 	add.w	r0, r4, #148	; 0x94
    9e96:	f017 fd7e 	bl	21996 <atomic_or>
    9e9a:	4b29      	ldr	r3, [pc, #164]	; (9f40 <bt_finalize_init+0xc0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    9e9c:	4929      	ldr	r1, [pc, #164]	; (9f44 <bt_finalize_init+0xc4>)
    9e9e:	1aed      	subs	r5, r5, r3
    9ea0:	79e3      	ldrb	r3, [r4, #7]
    9ea2:	4620      	mov	r0, r4
    9ea4:	2b01      	cmp	r3, #1
    9ea6:	bf88      	it	hi
    9ea8:	460e      	movhi	r6, r1
    9eaa:	f7fe f943 	bl	8134 <bt_addr_le_str_real>
    9eae:	f7fa f8a7 	bl	4000 <log_strdup>
    9eb2:	08ed      	lsrs	r5, r5, #3
    9eb4:	01ad      	lsls	r5, r5, #6
    9eb6:	f045 0703 	orr.w	r7, r5, #3
    9eba:	4602      	mov	r2, r0
    9ebc:	4631      	mov	r1, r6
    9ebe:	4822      	ldr	r0, [pc, #136]	; (9f48 <bt_finalize_init+0xc8>)
    9ec0:	463b      	mov	r3, r7
    9ec2:	f015 fdb6 	bl	1fa32 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    9ec6:	46a0      	mov	r8, r4
    9ec8:	2601      	movs	r6, #1
    9eca:	79e3      	ldrb	r3, [r4, #7]
    9ecc:	429e      	cmp	r6, r3
    9ece:	f108 0807 	add.w	r8, r8, #7
    9ed2:	db22      	blt.n	9f1a <bt_finalize_init+0x9a>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    9ed4:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
    9ed8:	4630      	mov	r0, r6
    9eda:	f7fe fba5 	bl	8628 <ver_str>
    9ede:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    9ee0:	9304      	str	r3, [sp, #16]
    9ee2:	f045 0503 	orr.w	r5, r5, #3
    9ee6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    9ee8:	9305      	str	r3, [sp, #20]
    9eea:	e9cd 0602 	strd	r0, r6, [sp, #8]
    9eee:	462b      	mov	r3, r5
    9ef0:	a902      	add	r1, sp, #8
    9ef2:	2204      	movs	r2, #4
    9ef4:	4815      	ldr	r0, [pc, #84]	; (9f4c <bt_finalize_init+0xcc>)
    9ef6:	f015 fdd1 	bl	1fa9c <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    9efa:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
    9efe:	4630      	mov	r0, r6
    9f00:	f7fe fb92 	bl	8628 <ver_str>
    9f04:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    9f06:	f8ad 5000 	strh.w	r5, [sp]
    9f0a:	4601      	mov	r1, r0
    9f0c:	4632      	mov	r2, r6
    9f0e:	4810      	ldr	r0, [pc, #64]	; (9f50 <bt_finalize_init+0xd0>)
    9f10:	f015 fda8 	bl	1fa64 <log_3>
}
    9f14:	b007      	add	sp, #28
    9f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    9f1a:	4640      	mov	r0, r8
    9f1c:	f7fe f90a 	bl	8134 <bt_addr_le_str_real>
    9f20:	f7fa f86e 	bl	4000 <log_strdup>
    9f24:	4631      	mov	r1, r6
    9f26:	4602      	mov	r2, r0
    9f28:	463b      	mov	r3, r7
    9f2a:	4648      	mov	r0, r9
    9f2c:	f015 fd81 	bl	1fa32 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    9f30:	3601      	adds	r6, #1
    9f32:	e7ca      	b.n	9eca <bt_finalize_init+0x4a>
    9f34:	20000000 	.word	0x20000000
    9f38:	00024ce4 	.word	0x00024ce4
    9f3c:	0002670c 	.word	0x0002670c
    9f40:	00024c24 	.word	0x00024c24
    9f44:	00027b6b 	.word	0x00027b6b
    9f48:	00027b6f 	.word	0x00027b6f
    9f4c:	00027b8f 	.word	0x00027b8f
    9f50:	00027bcd 	.word	0x00027bcd
    9f54:	00027b7e 	.word	0x00027b7e

00009f58 <bt_get_name>:
}
    9f58:	4800      	ldr	r0, [pc, #0]	; (9f5c <bt_get_name+0x4>)
    9f5a:	4770      	bx	lr
    9f5c:	00027915 	.word	0x00027915

00009f60 <bt_id_create>:
{
    9f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9f62:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9f64:	4605      	mov	r5, r0
    9f66:	b918      	cbnz	r0, 9f70 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    9f68:	b344      	cbz	r4, 9fbc <bt_id_create+0x5c>
		return -EINVAL;
    9f6a:	f06f 0415 	mvn.w	r4, #21
    9f6e:	e022      	b.n	9fb6 <bt_id_create+0x56>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9f70:	2300      	movs	r3, #0
    9f72:	4669      	mov	r1, sp
    9f74:	9300      	str	r3, [sp, #0]
    9f76:	f8cd 3003 	str.w	r3, [sp, #3]
    9f7a:	f017 fcfa 	bl	21972 <bt_addr_le_cmp>
    9f7e:	2800      	cmp	r0, #0
    9f80:	d0f2      	beq.n	9f68 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    9f82:	782b      	ldrb	r3, [r5, #0]
    9f84:	2b01      	cmp	r3, #1
    9f86:	d104      	bne.n	9f92 <bt_id_create+0x32>
    9f88:	79ab      	ldrb	r3, [r5, #6]
    9f8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9f8e:	2bc0      	cmp	r3, #192	; 0xc0
    9f90:	d00a      	beq.n	9fa8 <bt_id_create+0x48>
    9f92:	4b11      	ldr	r3, [pc, #68]	; (9fd8 <bt_id_create+0x78>)
    9f94:	4911      	ldr	r1, [pc, #68]	; (9fdc <bt_id_create+0x7c>)
			BT_ERR("Only static random identity address supported");
    9f96:	4812      	ldr	r0, [pc, #72]	; (9fe0 <bt_id_create+0x80>)
    9f98:	1ac9      	subs	r1, r1, r3
    9f9a:	08c9      	lsrs	r1, r1, #3
    9f9c:	0189      	lsls	r1, r1, #6
    9f9e:	f041 0101 	orr.w	r1, r1, #1
    9fa2:	f015 fd25 	bl	1f9f0 <log_0>
			return -EINVAL;
    9fa6:	e7e0      	b.n	9f6a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    9fa8:	4628      	mov	r0, r5
    9faa:	f7fe fb59 	bl	8660 <id_find>
    9fae:	2800      	cmp	r0, #0
    9fb0:	dbda      	blt.n	9f68 <bt_id_create+0x8>
			return -EALREADY;
    9fb2:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
    9fb6:	4620      	mov	r0, r4
    9fb8:	b003      	add	sp, #12
    9fba:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    9fbc:	4b09      	ldr	r3, [pc, #36]	; (9fe4 <bt_id_create+0x84>)
    9fbe:	79dc      	ldrb	r4, [r3, #7]
    9fc0:	2c01      	cmp	r4, #1
    9fc2:	d006      	beq.n	9fd2 <bt_id_create+0x72>
	new_id = bt_dev.id_count++;
    9fc4:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    9fc6:	4629      	mov	r1, r5
    9fc8:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    9fca:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    9fcc:	f7fe fe5a 	bl	8c84 <id_create.isra.0>
	return new_id;
    9fd0:	e7f1      	b.n	9fb6 <bt_id_create+0x56>
		return -ENOMEM;
    9fd2:	f06f 040b 	mvn.w	r4, #11
    9fd6:	e7ee      	b.n	9fb6 <bt_id_create+0x56>
    9fd8:	00024c24 	.word	0x00024c24
    9fdc:	00024ce4 	.word	0x00024ce4
    9fe0:	00027bf4 	.word	0x00027bf4
    9fe4:	20000000 	.word	0x20000000

00009fe8 <bt_setup_public_id_addr>:
{
    9fe8:	b570      	push	{r4, r5, r6, lr}
    9fea:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    9fec:	aa01      	add	r2, sp, #4
    9fee:	2100      	movs	r1, #0
    9ff0:	f241 0009 	movw	r0, #4105	; 0x1009
    9ff4:	f7ff f99a 	bl	932c <bt_hci_cmd_send_sync>
	if (err) {
    9ff8:	4e1f      	ldr	r6, [pc, #124]	; (a078 <bt_setup_public_id_addr+0x90>)
    9ffa:	4604      	mov	r4, r0
    9ffc:	b168      	cbz	r0, a01a <bt_setup_public_id_addr+0x32>
    9ffe:	491f      	ldr	r1, [pc, #124]	; (a07c <bt_setup_public_id_addr+0x94>)
    a000:	4b1f      	ldr	r3, [pc, #124]	; (a080 <bt_setup_public_id_addr+0x98>)
		BT_WARN("Failed to read public address");
    a002:	4820      	ldr	r0, [pc, #128]	; (a084 <bt_setup_public_id_addr+0x9c>)
    a004:	1ac9      	subs	r1, r1, r3
    a006:	08c9      	lsrs	r1, r1, #3
    a008:	0189      	lsls	r1, r1, #6
    a00a:	f041 0102 	orr.w	r1, r1, #2
    a00e:	f015 fcef 	bl	1f9f0 <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    a012:	2300      	movs	r3, #0
    a014:	71f3      	strb	r3, [r6, #7]
}
    a016:	b006      	add	sp, #24
    a018:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    a01a:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    a01c:	689d      	ldr	r5, [r3, #8]
    a01e:	9004      	str	r0, [sp, #16]
    a020:	3501      	adds	r5, #1
    a022:	f8ad 0014 	strh.w	r0, [sp, #20]
	return memcmp(a, b, sizeof(*a));
    a026:	2206      	movs	r2, #6
    a028:	a904      	add	r1, sp, #16
    a02a:	4628      	mov	r0, r5
    a02c:	f017 fb2b 	bl	21686 <memcmp>
    a030:	b918      	cbnz	r0, a03a <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    a032:	9801      	ldr	r0, [sp, #4]
    a034:	f011 fa8e 	bl	1b554 <net_buf_unref>
    a038:	e7eb      	b.n	a012 <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    a03a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a03e:	2206      	movs	r2, #6
    a040:	a902      	add	r1, sp, #8
    a042:	4628      	mov	r0, r5
    a044:	9302      	str	r3, [sp, #8]
    a046:	f8ad 300c 	strh.w	r3, [sp, #12]
    a04a:	f017 fb1c 	bl	21686 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    a04e:	2800      	cmp	r0, #0
    a050:	d0ef      	beq.n	a032 <bt_setup_public_id_addr+0x4a>
	memcpy(dst, src, sizeof(*dst));
    a052:	4629      	mov	r1, r5
    a054:	2206      	movs	r2, #6
    a056:	f10d 0011 	add.w	r0, sp, #17
    a05a:	f017 fb24 	bl	216a6 <memcpy>
	net_buf_unref(rsp);
    a05e:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    a060:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    a064:	f011 fa76 	bl	1b554 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    a068:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    a06a:	a904      	add	r1, sp, #16
    a06c:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
    a06e:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    a070:	f7fe fe08 	bl	8c84 <id_create.isra.0>
    a074:	e7cf      	b.n	a016 <bt_setup_public_id_addr+0x2e>
    a076:	bf00      	nop
    a078:	20000000 	.word	0x20000000
    a07c:	00024ce4 	.word	0x00024ce4
    a080:	00024c24 	.word	0x00024c24
    a084:	00027c22 	.word	0x00027c22

0000a088 <bt_read_static_addr>:
{
    a088:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    a08c:	4b25      	ldr	r3, [pc, #148]	; (a124 <bt_read_static_addr+0x9c>)
    a08e:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    a092:	f014 0401 	ands.w	r4, r4, #1
{
    a096:	4607      	mov	r7, r0
    a098:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    a09a:	d10a      	bne.n	a0b2 <bt_read_static_addr+0x2a>
    a09c:	4922      	ldr	r1, [pc, #136]	; (a128 <bt_read_static_addr+0xa0>)
    a09e:	4b23      	ldr	r3, [pc, #140]	; (a12c <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    a0a0:	4823      	ldr	r0, [pc, #140]	; (a130 <bt_read_static_addr+0xa8>)
    a0a2:	1ac9      	subs	r1, r1, r3
    a0a4:	08c9      	lsrs	r1, r1, #3
    a0a6:	0189      	lsls	r1, r1, #6
    a0a8:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("No static addresses stored in controller");
    a0ac:	f015 fca0 	bl	1f9f0 <log_0>
    a0b0:	e012      	b.n	a0d8 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    a0b2:	aa01      	add	r2, sp, #4
    a0b4:	2100      	movs	r1, #0
    a0b6:	f64f 4009 	movw	r0, #64521	; 0xfc09
    a0ba:	f7ff f937 	bl	932c <bt_hci_cmd_send_sync>
	if (err) {
    a0be:	4605      	mov	r5, r0
    a0c0:	b170      	cbz	r0, a0e0 <bt_read_static_addr+0x58>
    a0c2:	4b1a      	ldr	r3, [pc, #104]	; (a12c <bt_read_static_addr+0xa4>)
    a0c4:	4918      	ldr	r1, [pc, #96]	; (a128 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    a0c6:	481b      	ldr	r0, [pc, #108]	; (a134 <bt_read_static_addr+0xac>)
    a0c8:	1ac9      	subs	r1, r1, r3
    a0ca:	08c9      	lsrs	r1, r1, #3
    a0cc:	0189      	lsls	r1, r1, #6
    a0ce:	f041 0102 	orr.w	r1, r1, #2
    a0d2:	f015 fc8d 	bl	1f9f0 <log_0>
		return 0;
    a0d6:	2400      	movs	r4, #0
}
    a0d8:	4620      	mov	r0, r4
    a0da:	b002      	add	sp, #8
    a0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    a0e0:	9b01      	ldr	r3, [sp, #4]
    a0e2:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    a0e4:	785c      	ldrb	r4, [r3, #1]
    a0e6:	42b4      	cmp	r4, r6
    a0e8:	bf28      	it	cs
    a0ea:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    a0ec:	f04f 0816 	mov.w	r8, #22
    a0f0:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    a0f2:	42a5      	cmp	r5, r4
    a0f4:	db0d      	blt.n	a112 <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    a0f6:	9801      	ldr	r0, [sp, #4]
    a0f8:	f011 fa2c 	bl	1b554 <net_buf_unref>
	if (!cnt) {
    a0fc:	2c00      	cmp	r4, #0
    a0fe:	d1eb      	bne.n	a0d8 <bt_read_static_addr+0x50>
    a100:	4909      	ldr	r1, [pc, #36]	; (a128 <bt_read_static_addr+0xa0>)
    a102:	4b0a      	ldr	r3, [pc, #40]	; (a12c <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    a104:	480c      	ldr	r0, [pc, #48]	; (a138 <bt_read_static_addr+0xb0>)
    a106:	1ac9      	subs	r1, r1, r3
    a108:	08c9      	lsrs	r1, r1, #3
    a10a:	0189      	lsls	r1, r1, #6
    a10c:	f041 0102 	orr.w	r1, r1, #2
    a110:	e7cc      	b.n	a0ac <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    a112:	fb08 7005 	mla	r0, r8, r5, r7
    a116:	2216      	movs	r2, #22
    a118:	4631      	mov	r1, r6
    a11a:	f017 fac4 	bl	216a6 <memcpy>
	for (i = 0; i < cnt; i++) {
    a11e:	3501      	adds	r5, #1
    a120:	e7e7      	b.n	a0f2 <bt_read_static_addr+0x6a>
    a122:	bf00      	nop
    a124:	20000000 	.word	0x20000000
    a128:	00024ce4 	.word	0x00024ce4
    a12c:	00024c24 	.word	0x00024c24
    a130:	00027c40 	.word	0x00027c40
    a134:	00027c6c 	.word	0x00027c6c
    a138:	00027c8c 	.word	0x00027c8c

0000a13c <bt_setup_random_id_addr>:
{
    a13c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
    a13e:	4d14      	ldr	r5, [pc, #80]	; (a190 <bt_setup_random_id_addr+0x54>)
    a140:	79ec      	ldrb	r4, [r5, #7]
{
    a142:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    a144:	b9f4      	cbnz	r4, a184 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    a146:	2101      	movs	r1, #1
    a148:	a802      	add	r0, sp, #8
    a14a:	f7ff ff9d 	bl	a088 <bt_read_static_addr>
    a14e:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    a150:	b1c0      	cbz	r0, a184 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    a152:	2716      	movs	r7, #22
    a154:	e00f      	b.n	a176 <bt_setup_random_id_addr+0x3a>
    a156:	ab02      	add	r3, sp, #8
    a158:	fb07 3106 	mla	r1, r7, r6, r3
    a15c:	2206      	movs	r2, #6
    a15e:	f10d 0001 	add.w	r0, sp, #1
    a162:	f017 faa0 	bl	216a6 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    a166:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    a168:	4669      	mov	r1, sp
    a16a:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    a16c:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    a170:	f7fe fd88 	bl	8c84 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    a174:	3401      	adds	r4, #1
    a176:	79eb      	ldrb	r3, [r5, #7]
    a178:	b2e6      	uxtb	r6, r4
    a17a:	42b3      	cmp	r3, r6
    a17c:	d8eb      	bhi.n	a156 <bt_setup_random_id_addr+0x1a>
			return 0;
    a17e:	2000      	movs	r0, #0
}
    a180:	b009      	add	sp, #36	; 0x24
    a182:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    a184:	2100      	movs	r1, #0
    a186:	4608      	mov	r0, r1
    a188:	f7ff feea 	bl	9f60 <bt_id_create>
    a18c:	e7f8      	b.n	a180 <bt_setup_random_id_addr+0x44>
    a18e:	bf00      	nop
    a190:	20000000 	.word	0x20000000

0000a194 <bt_enable>:
{
    a194:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    a196:	4d33      	ldr	r5, [pc, #204]	; (a264 <bt_enable+0xd0>)
    a198:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
{
    a19c:	b088      	sub	sp, #32
    a19e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    a1a0:	b973      	cbnz	r3, a1c0 <bt_enable+0x2c>
    a1a2:	4b31      	ldr	r3, [pc, #196]	; (a268 <bt_enable+0xd4>)
    a1a4:	4931      	ldr	r1, [pc, #196]	; (a26c <bt_enable+0xd8>)
		BT_ERR("No HCI driver registered");
    a1a6:	4832      	ldr	r0, [pc, #200]	; (a270 <bt_enable+0xdc>)
    a1a8:	1ac9      	subs	r1, r1, r3
    a1aa:	08c9      	lsrs	r1, r1, #3
    a1ac:	0189      	lsls	r1, r1, #6
    a1ae:	f041 0101 	orr.w	r1, r1, #1
    a1b2:	f015 fc1d 	bl	1f9f0 <log_0>
		return -ENODEV;
    a1b6:	f06f 0412 	mvn.w	r4, #18
}
    a1ba:	4620      	mov	r0, r4
    a1bc:	b008      	add	sp, #32
    a1be:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    a1c0:	2101      	movs	r1, #1
    a1c2:	f105 0094 	add.w	r0, r5, #148	; 0x94
    a1c6:	f017 fbe6 	bl	21996 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    a1ca:	f010 0301 	ands.w	r3, r0, #1
    a1ce:	d146      	bne.n	a25e <bt_enable+0xca>
	ready_cb = cb;
    a1d0:	4a28      	ldr	r2, [pc, #160]	; (a274 <bt_enable+0xe0>)
    a1d2:	6016      	str	r6, [r2, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a1d4:	2000      	movs	r0, #0
    a1d6:	2100      	movs	r1, #0
    a1d8:	f06f 0208 	mvn.w	r2, #8
    a1dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    a1e0:	e9cd 3202 	strd	r3, r2, [sp, #8]
    a1e4:	e9cd 3300 	strd	r3, r3, [sp]
    a1e8:	9304      	str	r3, [sp, #16]
    a1ea:	4923      	ldr	r1, [pc, #140]	; (a278 <bt_enable+0xe4>)
    a1ec:	4b23      	ldr	r3, [pc, #140]	; (a27c <bt_enable+0xe8>)
    a1ee:	4824      	ldr	r0, [pc, #144]	; (a280 <bt_enable+0xec>)
    a1f0:	f44f 7220 	mov.w	r2, #640	; 0x280
    a1f4:	f014 fae2 	bl	1e7bc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    a1f8:	4922      	ldr	r1, [pc, #136]	; (a284 <bt_enable+0xf0>)
    a1fa:	4821      	ldr	r0, [pc, #132]	; (a280 <bt_enable+0xec>)
    a1fc:	f01a f946 	bl	2448c <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    a200:	f7fe f940 	bl	8484 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    a204:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    a208:	68db      	ldr	r3, [r3, #12]
    a20a:	4798      	blx	r3
	if (err) {
    a20c:	4604      	mov	r4, r0
    a20e:	b158      	cbz	r0, a228 <bt_enable+0x94>
    a210:	4b15      	ldr	r3, [pc, #84]	; (a268 <bt_enable+0xd4>)
    a212:	4a16      	ldr	r2, [pc, #88]	; (a26c <bt_enable+0xd8>)
    a214:	1ad2      	subs	r2, r2, r3
    a216:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    a218:	0192      	lsls	r2, r2, #6
    a21a:	4601      	mov	r1, r0
    a21c:	f042 0201 	orr.w	r2, r2, #1
    a220:	4819      	ldr	r0, [pc, #100]	; (a288 <bt_enable+0xf4>)
    a222:	f015 fbf2 	bl	1fa0a <log_1>
		return err;
    a226:	e7c8      	b.n	a1ba <bt_enable+0x26>
	if (!cb) {
    a228:	b966      	cbnz	r6, a244 <bt_enable+0xb0>
	err = hci_init();
    a22a:	f7f6 f8e5 	bl	3f8 <hci_init>
	if (err) {
    a22e:	4604      	mov	r4, r0
    a230:	2800      	cmp	r0, #0
    a232:	d1c2      	bne.n	a1ba <bt_enable+0x26>
		err = bt_conn_init();
    a234:	f001 f92c 	bl	b490 <bt_conn_init>
		if (err) {
    a238:	4604      	mov	r4, r0
    a23a:	2800      	cmp	r0, #0
    a23c:	d1bd      	bne.n	a1ba <bt_enable+0x26>
	bt_finalize_init();
    a23e:	f7ff fe1f 	bl	9e80 <bt_finalize_init>
	return 0;
    a242:	e7ba      	b.n	a1ba <bt_enable+0x26>
    a244:	2101      	movs	r1, #1
    a246:	f105 0090 	add.w	r0, r5, #144	; 0x90
    a24a:	f017 fba4 	bl	21996 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    a24e:	07c3      	lsls	r3, r0, #31
    a250:	d4b3      	bmi.n	a1ba <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    a252:	480e      	ldr	r0, [pc, #56]	; (a28c <bt_enable+0xf8>)
    a254:	f105 0188 	add.w	r1, r5, #136	; 0x88
    a258:	f019 ffb2 	bl	241c0 <k_queue_append>
    a25c:	e7ad      	b.n	a1ba <bt_enable+0x26>
		return -EALREADY;
    a25e:	f06f 0444 	mvn.w	r4, #68	; 0x44
    a262:	e7aa      	b.n	a1ba <bt_enable+0x26>
    a264:	20000000 	.word	0x20000000
    a268:	00024c24 	.word	0x00024c24
    a26c:	00024ce4 	.word	0x00024ce4
    a270:	00027de9 	.word	0x00027de9
    a274:	200029b8 	.word	0x200029b8
    a278:	20007aa0 	.word	0x20007aa0
    a27c:	00008cd9 	.word	0x00008cd9
    a280:	20000e08 	.word	0x20000e08
    a284:	00027e02 	.word	0x00027e02
    a288:	00027e08 	.word	0x00027e08
    a28c:	200014c8 	.word	0x200014c8

0000a290 <init_work>:
{
    a290:	b510      	push	{r4, lr}
	err = hci_init();
    a292:	f7f6 f8b1 	bl	3f8 <hci_init>
	if (err) {
    a296:	4604      	mov	r4, r0
    a298:	b928      	cbnz	r0, a2a6 <init_work+0x16>
		err = bt_conn_init();
    a29a:	f001 f8f9 	bl	b490 <bt_conn_init>
		if (err) {
    a29e:	4604      	mov	r4, r0
    a2a0:	b908      	cbnz	r0, a2a6 <init_work+0x16>
	bt_finalize_init();
    a2a2:	f7ff fded 	bl	9e80 <bt_finalize_init>
	if (ready_cb) {
    a2a6:	4b04      	ldr	r3, [pc, #16]	; (a2b8 <init_work+0x28>)
    a2a8:	681b      	ldr	r3, [r3, #0]
    a2aa:	b11b      	cbz	r3, a2b4 <init_work+0x24>
		ready_cb(err);
    a2ac:	4620      	mov	r0, r4
}
    a2ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    a2b2:	4718      	bx	r3
}
    a2b4:	bd10      	pop	{r4, pc}
    a2b6:	bf00      	nop
    a2b8:	200029b8 	.word	0x200029b8

0000a2bc <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    a2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    a2c0:	690d      	ldr	r5, [r1, #16]
{
    a2c2:	b08f      	sub	sp, #60	; 0x3c
    a2c4:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    a2c6:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    a2c8:	ebb5 0b03 	subs.w	fp, r5, r3
{
    a2cc:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a2ce:	4883      	ldr	r0, [pc, #524]	; (a4dc <bt_le_adv_start_legacy+0x220>)
	struct bt_conn *conn = NULL;
    a2d0:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
    a2d2:	bf18      	it	ne
    a2d4:	f04f 0b01 	movne.w	fp, #1
{
    a2d8:	460c      	mov	r4, r1
    a2da:	4691      	mov	r9, r2
    a2dc:	f017 fb40 	bl	21960 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a2e0:	0787      	lsls	r7, r0, #30
    a2e2:	f140 80ed 	bpl.w	a4c0 <bt_le_adv_start_legacy+0x204>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    a2e6:	4608      	mov	r0, r1
    a2e8:	f7fe f9d2 	bl	8690 <valid_adv_param>
    a2ec:	4607      	mov	r7, r0
    a2ee:	2800      	cmp	r0, #0
    a2f0:	f000 80e9 	beq.w	a4c6 <bt_le_adv_start_legacy+0x20a>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    a2f4:	f106 0810 	add.w	r8, r6, #16
    a2f8:	4640      	mov	r0, r8
    a2fa:	f017 fb31 	bl	21960 <atomic_get>
    a2fe:	f3c0 1180 	ubfx	r1, r0, #6, #1
    a302:	0640      	lsls	r0, r0, #25
    a304:	f100 80e2 	bmi.w	a4cc <bt_le_adv_start_legacy+0x210>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    a308:	220f      	movs	r2, #15
    a30a:	a80a      	add	r0, sp, #40	; 0x28
    a30c:	9105      	str	r1, [sp, #20]
    a30e:	f017 f9f5 	bl	216fc <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    a312:	68a3      	ldr	r3, [r4, #8]
    a314:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
    a318:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    a31a:	68e3      	ldr	r3, [r4, #12]
    a31c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    a320:	f017 fb0f 	bl	21942 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
    a324:	7832      	ldrb	r2, [r6, #0]
    a326:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
    a328:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
    a32a:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
    a32e:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    a330:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    a334:	d004      	beq.n	a340 <bt_le_adv_start_legacy+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a336:	4869      	ldr	r0, [pc, #420]	; (a4dc <bt_le_adv_start_legacy+0x220>)
    a338:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    a33c:	f017 fb1c 	bl	21978 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
    a340:	4b67      	ldr	r3, [pc, #412]	; (a4e0 <bt_le_adv_start_legacy+0x224>)
	adv->id = param->id;
    a342:	7820      	ldrb	r0, [r4, #0]
    a344:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    a346:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    a34a:	465a      	mov	r2, fp
    a34c:	6861      	ldr	r1, [r4, #4]
    a34e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    a352:	f7ff f8bb 	bl	94cc <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    a356:	4683      	mov	fp, r0
    a358:	2800      	cmp	r0, #0
    a35a:	d16f      	bne.n	a43c <bt_le_adv_start_legacy+0x180>
		return err;
	}

	if (dir_adv) {
    a35c:	f106 0009 	add.w	r0, r6, #9
    a360:	2d00      	cmp	r5, #0
    a362:	d048      	beq.n	a3f6 <bt_le_adv_start_legacy+0x13a>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    a364:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    a366:	f017 fb01 	bl	2196c <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    a36a:	6860      	ldr	r0, [r4, #4]
    a36c:	07c1      	lsls	r1, r0, #31
    a36e:	d54a      	bpl.n	a406 <bt_le_adv_start_legacy+0x14a>
		scannable = true;

		if (dir_adv) {
    a370:	2d00      	cmp	r5, #0
    a372:	d045      	beq.n	a400 <bt_le_adv_start_legacy+0x144>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    a374:	f010 0f10 	tst.w	r0, #16
    a378:	bf14      	ite	ne
    a37a:	2304      	movne	r3, #4
    a37c:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    a37e:	6921      	ldr	r1, [r4, #16]
    a380:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    a384:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    a388:	f017 faf0 	bl	2196c <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    a38c:	210f      	movs	r1, #15
    a38e:	f242 0006 	movw	r0, #8198	; 0x2006
    a392:	f7fe fe6f 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
    a396:	4683      	mov	fp, r0
    a398:	2800      	cmp	r0, #0
    a39a:	f000 809a 	beq.w	a4d2 <bt_le_adv_start_legacy+0x216>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    a39e:	220f      	movs	r2, #15
    a3a0:	a90a      	add	r1, sp, #40	; 0x28
    a3a2:	3008      	adds	r0, #8
    a3a4:	f019 fa58 	bl	23858 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    a3a8:	2200      	movs	r2, #0
    a3aa:	4659      	mov	r1, fp
    a3ac:	f242 0006 	movw	r0, #8198	; 0x2006
    a3b0:	f7fe ffbc 	bl	932c <bt_hci_cmd_send_sync>
	if (err) {
    a3b4:	2800      	cmp	r0, #0
    a3b6:	f040 808f 	bne.w	a4d8 <bt_le_adv_start_legacy+0x21c>
		return err;
	}

	if (!dir_adv) {
    a3ba:	b37d      	cbz	r5, a41c <bt_le_adv_start_legacy+0x160>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    a3bc:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a3be:	07da      	lsls	r2, r3, #31
    a3c0:	d440      	bmi.n	a444 <bt_le_adv_start_legacy+0x188>
	return set_le_adv_enable_legacy(adv, enable);
    a3c2:	2101      	movs	r1, #1
    a3c4:	4630      	mov	r0, r6
    a3c6:	f7ff f8db 	bl	9580 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    a3ca:	4683      	mov	fp, r0
    a3cc:	2800      	cmp	r0, #0
    a3ce:	d070      	beq.n	a4b2 <bt_le_adv_start_legacy+0x1f6>
    a3d0:	4b44      	ldr	r3, [pc, #272]	; (a4e4 <bt_le_adv_start_legacy+0x228>)
    a3d2:	4945      	ldr	r1, [pc, #276]	; (a4e8 <bt_le_adv_start_legacy+0x22c>)
		BT_ERR("Failed to start advertiser");
    a3d4:	4845      	ldr	r0, [pc, #276]	; (a4ec <bt_le_adv_start_legacy+0x230>)
    a3d6:	1ac9      	subs	r1, r1, r3
    a3d8:	08c9      	lsrs	r1, r1, #3
    a3da:	0189      	lsls	r1, r1, #6
    a3dc:	f041 0101 	orr.w	r1, r1, #1
    a3e0:	f015 fb06 	bl	1f9f0 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    a3e4:	9807      	ldr	r0, [sp, #28]
    a3e6:	b348      	cbz	r0, a43c <bt_le_adv_start_legacy+0x180>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a3e8:	2100      	movs	r1, #0
    a3ea:	f000 fd6f 	bl	aecc <bt_conn_set_state>
			bt_conn_unref(conn);
    a3ee:	9807      	ldr	r0, [sp, #28]
    a3f0:	f017 fd46 	bl	21e80 <bt_conn_unref>
    a3f4:	e022      	b.n	a43c <bt_le_adv_start_legacy+0x180>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    a3f6:	9508      	str	r5, [sp, #32]
    a3f8:	a908      	add	r1, sp, #32
    a3fa:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
    a3fe:	e7b2      	b.n	a366 <bt_le_adv_start_legacy+0xaa>
			set_param.type = BT_HCI_ADV_IND;
    a400:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    a404:	e7c2      	b.n	a38c <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    a406:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a408:	b933      	cbnz	r3, a418 <bt_le_adv_start_legacy+0x15c>
    a40a:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    a40e:	f1c7 0303 	rsb	r3, r7, #3
    a412:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    a416:	e7b9      	b.n	a38c <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    a418:	2701      	movs	r7, #1
    a41a:	e7f8      	b.n	a40e <bt_le_adv_start_legacy+0x152>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    a41c:	6863      	ldr	r3, [r4, #4]
    a41e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    a422:	e9cd 7301 	strd	r7, r3, [sp, #4]
    a426:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a428:	9300      	str	r3, [sp, #0]
    a42a:	4652      	mov	r2, sl
    a42c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a42e:	4649      	mov	r1, r9
    a430:	4630      	mov	r0, r6
    a432:	f7ff f945 	bl	96c0 <le_adv_update.constprop.0>
		if (err) {
    a436:	4683      	mov	fp, r0
    a438:	2800      	cmp	r0, #0
    a43a:	d0bf      	beq.n	a3bc <bt_le_adv_start_legacy+0x100>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    a43c:	4658      	mov	r0, fp
    a43e:	b00f      	add	sp, #60	; 0x3c
    a440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    a444:	a907      	add	r1, sp, #28
    a446:	4630      	mov	r0, r6
    a448:	f7fe fd92 	bl	8f70 <le_adv_start_add_conn>
		if (err) {
    a44c:	4683      	mov	fp, r0
    a44e:	2800      	cmp	r0, #0
    a450:	d0b7      	beq.n	a3c2 <bt_le_adv_start_legacy+0x106>
			if (err == -ENOMEM && !dir_adv &&
    a452:	f110 0f0c 	cmn.w	r0, #12
    a456:	d1f1      	bne.n	a43c <bt_le_adv_start_legacy+0x180>
    a458:	2d00      	cmp	r5, #0
    a45a:	d1ef      	bne.n	a43c <bt_le_adv_start_legacy+0x180>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    a45c:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    a45e:	079b      	lsls	r3, r3, #30
    a460:	d4ec      	bmi.n	a43c <bt_le_adv_start_legacy+0x180>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    a462:	6860      	ldr	r0, [r4, #4]
    a464:	f080 0002 	eor.w	r0, r0, #2
    a468:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    a46c:	f00b 0201 	and.w	r2, fp, #1
    a470:	210c      	movs	r1, #12
    a472:	4640      	mov	r0, r8
    a474:	f017 fa9e 	bl	219b4 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    a478:	6862      	ldr	r2, [r4, #4]
    a47a:	2107      	movs	r1, #7
    a47c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    a480:	4640      	mov	r0, r8
    a482:	f017 fa97 	bl	219b4 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    a486:	6862      	ldr	r2, [r4, #4]
    a488:	2108      	movs	r1, #8
    a48a:	f002 0201 	and.w	r2, r2, #1
    a48e:	4640      	mov	r0, r8
    a490:	f017 fa90 	bl	219b4 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    a494:	463a      	mov	r2, r7
    a496:	2109      	movs	r1, #9
    a498:	4640      	mov	r0, r8
    a49a:	f017 fa8b 	bl	219b4 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    a49e:	6862      	ldr	r2, [r4, #4]
    a4a0:	210b      	movs	r1, #11
    a4a2:	f3c2 0280 	ubfx	r2, r2, #2, #1
    a4a6:	4640      	mov	r0, r8
    a4a8:	f017 fa84 	bl	219b4 <atomic_set_bit_to>
	return 0;
    a4ac:	f04f 0b00 	mov.w	fp, #0
    a4b0:	e7c4      	b.n	a43c <bt_le_adv_start_legacy+0x180>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    a4b2:	9807      	ldr	r0, [sp, #28]
    a4b4:	b108      	cbz	r0, a4ba <bt_le_adv_start_legacy+0x1fe>
		bt_conn_unref(conn);
    a4b6:	f017 fce3 	bl	21e80 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    a4ba:	2d00      	cmp	r5, #0
    a4bc:	d1d6      	bne.n	a46c <bt_le_adv_start_legacy+0x1b0>
    a4be:	e7d0      	b.n	a462 <bt_le_adv_start_legacy+0x1a6>
		return -EAGAIN;
    a4c0:	f06f 0b0a 	mvn.w	fp, #10
    a4c4:	e7ba      	b.n	a43c <bt_le_adv_start_legacy+0x180>
		return -EINVAL;
    a4c6:	f06f 0b15 	mvn.w	fp, #21
    a4ca:	e7b7      	b.n	a43c <bt_le_adv_start_legacy+0x180>
		return -EALREADY;
    a4cc:	f06f 0b44 	mvn.w	fp, #68	; 0x44
    a4d0:	e7b4      	b.n	a43c <bt_le_adv_start_legacy+0x180>
		return -ENOBUFS;
    a4d2:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    a4d6:	e7b1      	b.n	a43c <bt_le_adv_start_legacy+0x180>
    a4d8:	4683      	mov	fp, r0
    a4da:	e7af      	b.n	a43c <bt_le_adv_start_legacy+0x180>
    a4dc:	20000094 	.word	0x20000094
    a4e0:	20000000 	.word	0x20000000
    a4e4:	00024c24 	.word	0x00024c24
    a4e8:	00024ce4 	.word	0x00024ce4
    a4ec:	00027e24 	.word	0x00027e24

0000a4f0 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    a4f0:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    a4f2:	9c04      	ldr	r4, [sp, #16]
    a4f4:	e9cd 3400 	strd	r3, r4, [sp]
    a4f8:	4613      	mov	r3, r2
    a4fa:	460a      	mov	r2, r1
    a4fc:	4601      	mov	r1, r0
    a4fe:	4802      	ldr	r0, [pc, #8]	; (a508 <bt_le_adv_start+0x18>)
    a500:	f7ff fedc 	bl	a2bc <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    a504:	b002      	add	sp, #8
    a506:	bd10      	pop	{r4, pc}
    a508:	20000018 	.word	0x20000018

0000a50c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    a50c:	b530      	push	{r4, r5, lr}
    a50e:	4c22      	ldr	r4, [pc, #136]	; (a598 <bt_le_adv_stop+0x8c>)
    a510:	b085      	sub	sp, #20
    a512:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    a516:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a51a:	f017 fa2d 	bl	21978 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a51e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a522:	f017 fa1d 	bl	21960 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    a526:	0642      	lsls	r2, r0, #25
    a528:	f3c0 1380 	ubfx	r3, r0, #6, #1
    a52c:	d531      	bpl.n	a592 <bt_le_adv_stop+0x86>
    a52e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a532:	f017 fa15 	bl	21960 <atomic_get>
		 */
		adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a536:	05c3      	lsls	r3, r0, #23
    a538:	d521      	bpl.n	a57e <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    a53a:	2300      	movs	r3, #0
    a53c:	4669      	mov	r1, sp
    a53e:	f104 0021 	add.w	r0, r4, #33	; 0x21
    a542:	9300      	str	r3, [sp, #0]
    a544:	f8cd 3003 	str.w	r3, [sp, #3]
    a548:	f017 fa13 	bl	21972 <bt_addr_le_cmp>
    a54c:	7e25      	ldrb	r5, [r4, #24]
    a54e:	b9e0      	cbnz	r0, a58a <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    a550:	4b12      	ldr	r3, [pc, #72]	; (a59c <bt_le_adv_stop+0x90>)
    a552:	889a      	ldrh	r2, [r3, #4]
    a554:	6818      	ldr	r0, [r3, #0]
    a556:	799b      	ldrb	r3, [r3, #6]
    a558:	f8ad 200c 	strh.w	r2, [sp, #12]
    a55c:	9002      	str	r0, [sp, #8]
    a55e:	f88d 300e 	strb.w	r3, [sp, #14]
    a562:	2204      	movs	r2, #4
    a564:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    a566:	4628      	mov	r0, r5
    a568:	f000 fde0 	bl	b12c <bt_conn_lookup_state_le>
    a56c:	4604      	mov	r4, r0
	if (conn) {
    a56e:	b130      	cbz	r0, a57e <bt_le_adv_stop+0x72>
		conn->err = status;
    a570:	2100      	movs	r1, #0
    a572:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a574:	f000 fcaa 	bl	aecc <bt_conn_set_state>
		bt_conn_unref(conn);
    a578:	4620      	mov	r0, r4
    a57a:	f017 fc81 	bl	21e80 <bt_conn_unref>
		err = set_le_adv_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = set_le_adv_enable_legacy(adv, false);
    a57e:	4808      	ldr	r0, [pc, #32]	; (a5a0 <bt_le_adv_stop+0x94>)
    a580:	2100      	movs	r1, #0
    a582:	f7fe fffd 	bl	9580 <set_le_adv_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    a586:	b005      	add	sp, #20
    a588:	bd30      	pop	{r4, r5, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    a58a:	2205      	movs	r2, #5
    a58c:	f104 0121 	add.w	r1, r4, #33	; 0x21
    a590:	e7e9      	b.n	a566 <bt_le_adv_stop+0x5a>
		return 0;
    a592:	4618      	mov	r0, r3
    a594:	e7f7      	b.n	a586 <bt_le_adv_stop+0x7a>
    a596:	bf00      	nop
    a598:	20000000 	.word	0x20000000
    a59c:	00024e20 	.word	0x00024e20
    a5a0:	20000018 	.word	0x20000018

0000a5a4 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    a5a4:	b513      	push	{r0, r1, r4, lr}
    a5a6:	4818      	ldr	r0, [pc, #96]	; (a608 <bt_le_adv_resume+0x64>)
    a5a8:	f017 f9da 	bl	21960 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    a5ac:	04c1      	lsls	r1, r0, #19
    a5ae:	d529      	bpl.n	a604 <bt_le_adv_resume+0x60>
    a5b0:	4815      	ldr	r0, [pc, #84]	; (a608 <bt_le_adv_resume+0x64>)
    a5b2:	f017 f9d5 	bl	21960 <atomic_get>
    a5b6:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    a5b8:	f3c0 1480 	ubfx	r4, r0, #6, #1
    a5bc:	d422      	bmi.n	a604 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a5be:	4812      	ldr	r0, [pc, #72]	; (a608 <bt_le_adv_resume+0x64>)
    a5c0:	f017 f9ce 	bl	21960 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    a5c4:	05c3      	lsls	r3, r0, #23
    a5c6:	d51d      	bpl.n	a604 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    a5c8:	4810      	ldr	r0, [pc, #64]	; (a60c <bt_le_adv_resume+0x68>)
    a5ca:	a901      	add	r1, sp, #4
    a5cc:	f7fe fcd0 	bl	8f70 <le_adv_start_add_conn>
	if (err) {
    a5d0:	b9c0      	cbnz	r0, a604 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
    a5d2:	480e      	ldr	r0, [pc, #56]	; (a60c <bt_le_adv_resume+0x68>)
    a5d4:	2101      	movs	r1, #1
    a5d6:	f7fe ffd3 	bl	9580 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    a5da:	b150      	cbz	r0, a5f2 <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a5dc:	4621      	mov	r1, r4
    a5de:	9801      	ldr	r0, [sp, #4]
    a5e0:	f000 fc74 	bl	aecc <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a5e4:	4808      	ldr	r0, [pc, #32]	; (a608 <bt_le_adv_resume+0x64>)
    a5e6:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    a5ea:	f017 f9c5 	bl	21978 <atomic_and>
	return (old & mask) != 0;
    a5ee:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    a5f2:	9801      	ldr	r0, [sp, #4]
    a5f4:	f017 fc44 	bl	21e80 <bt_conn_unref>
	if (persist_paused) {
    a5f8:	b124      	cbz	r4, a604 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a5fa:	4803      	ldr	r0, [pc, #12]	; (a608 <bt_le_adv_resume+0x64>)
    a5fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    a600:	f017 f9c9 	bl	21996 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    a604:	b002      	add	sp, #8
    a606:	bd10      	pop	{r4, pc}
    a608:	20000028 	.word	0x20000028
    a60c:	20000018 	.word	0x20000018

0000a610 <enh_conn_complete>:
{
    a610:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    a614:	f8b0 8001 	ldrh.w	r8, [r0, #1]
{
    a618:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a61a:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    a61e:	4865      	ldr	r0, [pc, #404]	; (a7b4 <enh_conn_complete+0x1a4>)
    a620:	f017 f9aa 	bl	21978 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    a624:	0443      	lsls	r3, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    a626:	fa1f f788 	uxth.w	r7, r8
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    a62a:	d504      	bpl.n	a636 <enh_conn_complete+0x26>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    a62c:	4962      	ldr	r1, [pc, #392]	; (a7b8 <enh_conn_complete+0x1a8>)
    a62e:	2200      	movs	r2, #0
    a630:	2002      	movs	r0, #2
    a632:	f005 f873 	bl	f71c <bt_keys_foreach>
	if (evt->status) {
    a636:	7825      	ldrb	r5, [r4, #0]
    a638:	b365      	cbz	r5, a694 <enh_conn_complete+0x84>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a63a:	2d3c      	cmp	r5, #60	; 0x3c
    a63c:	d11e      	bne.n	a67c <enh_conn_complete+0x6c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a63e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    a642:	485e      	ldr	r0, [pc, #376]	; (a7bc <enh_conn_complete+0x1ac>)
    a644:	f017 f998 	bl	21978 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    a648:	2000      	movs	r0, #0
    a64a:	f7fe fa31 	bl	8ab0 <find_pending_connect.part.0>
		if (!conn) {
    a64e:	4604      	mov	r4, r0
    a650:	b960      	cbnz	r0, a66c <enh_conn_complete+0x5c>
    a652:	495b      	ldr	r1, [pc, #364]	; (a7c0 <enh_conn_complete+0x1b0>)
    a654:	4b5b      	ldr	r3, [pc, #364]	; (a7c4 <enh_conn_complete+0x1b4>)
			BT_ERR("No pending slave connection");
    a656:	485c      	ldr	r0, [pc, #368]	; (a7c8 <enh_conn_complete+0x1b8>)
    a658:	1ac9      	subs	r1, r1, r3
    a65a:	08c9      	lsrs	r1, r1, #3
    a65c:	0189      	lsls	r1, r1, #6
    a65e:	f041 0101 	orr.w	r1, r1, #1
    a662:	f015 f9c5 	bl	1f9f0 <log_0>
}
    a666:	b004      	add	sp, #16
    a668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    a66c:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a66e:	2100      	movs	r1, #0
    a670:	f000 fc2c 	bl	aecc <bt_conn_set_state>
		bt_conn_unref(conn);
    a674:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    a676:	f017 fc03 	bl	21e80 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a67a:	e7f4      	b.n	a666 <enh_conn_complete+0x56>
    a67c:	4b51      	ldr	r3, [pc, #324]	; (a7c4 <enh_conn_complete+0x1b4>)
    a67e:	4a50      	ldr	r2, [pc, #320]	; (a7c0 <enh_conn_complete+0x1b0>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    a680:	4852      	ldr	r0, [pc, #328]	; (a7cc <enh_conn_complete+0x1bc>)
    a682:	1ad2      	subs	r2, r2, r3
    a684:	08d2      	lsrs	r2, r2, #3
    a686:	0192      	lsls	r2, r2, #6
    a688:	f042 0202 	orr.w	r2, r2, #2
    a68c:	4629      	mov	r1, r5
    a68e:	f015 f9bc 	bl	1fa0a <log_1>
		return;
    a692:	e7e8      	b.n	a666 <enh_conn_complete+0x56>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    a694:	7923      	ldrb	r3, [r4, #4]
    a696:	3b02      	subs	r3, #2
    a698:	2b01      	cmp	r3, #1
    a69a:	f104 0604 	add.w	r6, r4, #4
    a69e:	d838      	bhi.n	a712 <enh_conn_complete+0x102>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    a6a0:	4631      	mov	r1, r6
    a6a2:	a802      	add	r0, sp, #8
    a6a4:	f017 f962 	bl	2196c <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    a6a8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a6ac:	2206      	movs	r2, #6
    a6ae:	3b02      	subs	r3, #2
    a6b0:	f104 0111 	add.w	r1, r4, #17
    a6b4:	f10d 0001 	add.w	r0, sp, #1
    a6b8:	f88d 3008 	strb.w	r3, [sp, #8]
    a6bc:	f016 fff3 	bl	216a6 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    a6c0:	2301      	movs	r3, #1
    a6c2:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    a6c6:	78e3      	ldrb	r3, [r4, #3]
    a6c8:	2b01      	cmp	r3, #1
    a6ca:	d10c      	bne.n	a6e6 <enh_conn_complete+0xd6>
    a6cc:	a802      	add	r0, sp, #8
    a6ce:	f7fe f9ef 	bl	8ab0 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a6d2:	78e3      	ldrb	r3, [r4, #3]
    a6d4:	2b01      	cmp	r3, #1
    a6d6:	4605      	mov	r5, r0
    a6d8:	d104      	bne.n	a6e4 <enh_conn_complete+0xd4>
    a6da:	4838      	ldr	r0, [pc, #224]	; (a7bc <enh_conn_complete+0x1ac>)
    a6dc:	f06f 0140 	mvn.w	r1, #64	; 0x40
    a6e0:	f017 f94a 	bl	21978 <atomic_and>
	if (!conn) {
    a6e4:	bb45      	cbnz	r5, a738 <enh_conn_complete+0x128>
    a6e6:	4a37      	ldr	r2, [pc, #220]	; (a7c4 <enh_conn_complete+0x1b4>)
    a6e8:	4c35      	ldr	r4, [pc, #212]	; (a7c0 <enh_conn_complete+0x1b0>)
		BT_ERR("No pending conn for peer %s",
    a6ea:	4630      	mov	r0, r6
    a6ec:	1aa4      	subs	r4, r4, r2
    a6ee:	f7fd fd21 	bl	8134 <bt_addr_le_str_real>
    a6f2:	f7f9 fc85 	bl	4000 <log_strdup>
    a6f6:	08e4      	lsrs	r4, r4, #3
    a6f8:	01a4      	lsls	r4, r4, #6
    a6fa:	f044 0401 	orr.w	r4, r4, #1
    a6fe:	4601      	mov	r1, r0
    a700:	4622      	mov	r2, r4
    a702:	4833      	ldr	r0, [pc, #204]	; (a7d0 <enh_conn_complete+0x1c0>)
    a704:	f015 f981 	bl	1fa0a <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    a708:	211f      	movs	r1, #31
    a70a:	4638      	mov	r0, r7
    a70c:	f017 f9e9 	bl	21ae2 <bt_hci_disconnect>
		return;
    a710:	e7a9      	b.n	a666 <enh_conn_complete+0x56>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    a712:	78e3      	ldrb	r3, [r4, #3]
    a714:	2b01      	cmp	r3, #1
    a716:	bf04      	itt	eq
    a718:	4b2e      	ldreq	r3, [pc, #184]	; (a7d4 <enh_conn_complete+0x1c4>)
    a71a:	f893 5033 	ldrbeq.w	r5, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
    a71e:	4631      	mov	r1, r6
    a720:	4628      	mov	r0, r5
    a722:	f017 f9d6 	bl	21ad2 <bt_lookup_id_addr>
    a726:	4601      	mov	r1, r0
    a728:	a802      	add	r0, sp, #8
    a72a:	f017 f91f 	bl	2196c <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    a72e:	4631      	mov	r1, r6
    a730:	4668      	mov	r0, sp
    a732:	f017 f91b 	bl	2196c <bt_addr_le_copy>
    a736:	e7c6      	b.n	a6c6 <enh_conn_complete+0xb6>
	conn->handle = handle;
    a738:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    a73a:	a902      	add	r1, sp, #8
	conn->handle = handle;
    a73c:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    a740:	f017 f914 	bl	2196c <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    a744:	7e22      	ldrb	r2, [r4, #24]
    a746:	7de3      	ldrb	r3, [r4, #23]
    a748:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a74c:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    a750:	7ea2      	ldrb	r2, [r4, #26]
    a752:	7e63      	ldrb	r3, [r4, #25]
    a754:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a758:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    a75c:	7ee3      	ldrb	r3, [r4, #27]
    a75e:	7f22      	ldrb	r2, [r4, #28]
    a760:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a764:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    a768:	78e3      	ldrb	r3, [r4, #3]
    a76a:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
    a76c:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a76e:	2b01      	cmp	r3, #1
	conn->err = 0U;
    a770:	732c      	strb	r4, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a772:	d116      	bne.n	a7a2 <enh_conn_complete+0x192>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    a774:	4669      	mov	r1, sp
    a776:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    a77a:	f017 f8f7 	bl	2196c <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
    a77e:	7a29      	ldrb	r1, [r5, #8]
    a780:	4e14      	ldr	r6, [pc, #80]	; (a7d4 <enh_conn_complete+0x1c4>)
    a782:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    a786:	4431      	add	r1, r6
    a788:	f105 0096 	add.w	r0, r5, #150	; 0x96
    a78c:	f017 f8ee 	bl	2196c <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    a790:	f8d6 10a4 	ldr.w	r1, [r6, #164]	; 0xa4
    a794:	4622      	mov	r2, r4
    a796:	f001 0340 	and.w	r3, r1, #64	; 0x40
    a79a:	4313      	orrs	r3, r2
    a79c:	d001      	beq.n	a7a2 <enh_conn_complete+0x192>
			bt_le_adv_resume();
    a79e:	f7ff ff01 	bl	a5a4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    a7a2:	2107      	movs	r1, #7
    a7a4:	4628      	mov	r0, r5
    a7a6:	f000 fb91 	bl	aecc <bt_conn_set_state>
	conn_auto_initiate(conn);
    a7aa:	4628      	mov	r0, r5
    a7ac:	f7fe fffc 	bl	97a8 <conn_auto_initiate>
	bt_conn_unref(conn);
    a7b0:	4628      	mov	r0, r5
    a7b2:	e760      	b.n	a676 <enh_conn_complete+0x66>
    a7b4:	20000094 	.word	0x20000094
    a7b8:	00021bdd 	.word	0x00021bdd
    a7bc:	20000028 	.word	0x20000028
    a7c0:	00024ce4 	.word	0x00024ce4
    a7c4:	00024c24 	.word	0x00024c24
    a7c8:	00027e3f 	.word	0x00027e3f
    a7cc:	00027e5b 	.word	0x00027e5b
    a7d0:	00027e74 	.word	0x00027e74
    a7d4:	20000000 	.word	0x20000000

0000a7d8 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    a7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    a7da:	4e22      	ldr	r6, [pc, #136]	; (a864 <bt_pub_key_gen+0x8c>)
    a7dc:	f896 3066 	ldrb.w	r3, [r6, #102]	; 0x66
    a7e0:	f003 0306 	and.w	r3, r3, #6
    a7e4:	2b06      	cmp	r3, #6
    a7e6:	d00d      	beq.n	a804 <bt_pub_key_gen+0x2c>
    a7e8:	4b1f      	ldr	r3, [pc, #124]	; (a868 <bt_pub_key_gen+0x90>)
    a7ea:	4920      	ldr	r1, [pc, #128]	; (a86c <bt_pub_key_gen+0x94>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    a7ec:	4820      	ldr	r0, [pc, #128]	; (a870 <bt_pub_key_gen+0x98>)
    a7ee:	1ac9      	subs	r1, r1, r3
    a7f0:	08c9      	lsrs	r1, r1, #3
    a7f2:	0189      	lsls	r1, r1, #6
    a7f4:	f041 0102 	orr.w	r1, r1, #2
    a7f8:	f015 f8fa 	bl	1f9f0 <log_0>
		return -ENOTSUP;
    a7fc:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    a800:	4620      	mov	r0, r4
    a802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    a804:	4f1b      	ldr	r7, [pc, #108]	; (a874 <bt_pub_key_gen+0x9c>)
    a806:	683b      	ldr	r3, [r7, #0]
    a808:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    a80a:	6038      	str	r0, [r7, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    a80c:	2110      	movs	r1, #16
    a80e:	f106 0094 	add.w	r0, r6, #148	; 0x94
    a812:	f017 f8c0 	bl	21996 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a816:	f010 0510 	ands.w	r5, r0, #16
    a81a:	d120      	bne.n	a85e <bt_pub_key_gen+0x86>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a81c:	f06f 0108 	mvn.w	r1, #8
    a820:	f106 0094 	add.w	r0, r6, #148	; 0x94
    a824:	f017 f8a8 	bl	21978 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    a828:	462a      	mov	r2, r5
    a82a:	4629      	mov	r1, r5
    a82c:	f242 0025 	movw	r0, #8229	; 0x2025
    a830:	f7fe fd7c 	bl	932c <bt_hci_cmd_send_sync>
	if (err) {
    a834:	4604      	mov	r4, r0
    a836:	2800      	cmp	r0, #0
    a838:	d0e2      	beq.n	a800 <bt_pub_key_gen+0x28>
    a83a:	4b0b      	ldr	r3, [pc, #44]	; (a868 <bt_pub_key_gen+0x90>)
    a83c:	490b      	ldr	r1, [pc, #44]	; (a86c <bt_pub_key_gen+0x94>)
		BT_ERR("Sending LE P256 Public Key command failed");
    a83e:	480e      	ldr	r0, [pc, #56]	; (a878 <bt_pub_key_gen+0xa0>)
    a840:	1ac9      	subs	r1, r1, r3
    a842:	08c9      	lsrs	r1, r1, #3
    a844:	0189      	lsls	r1, r1, #6
    a846:	f041 0101 	orr.w	r1, r1, #1
    a84a:	f015 f8d1 	bl	1f9f0 <log_0>
    a84e:	f06f 0110 	mvn.w	r1, #16
    a852:	f106 0094 	add.w	r0, r6, #148	; 0x94
    a856:	f017 f88f 	bl	21978 <atomic_and>
		pub_key_cb = NULL;
    a85a:	603d      	str	r5, [r7, #0]
		return err;
    a85c:	e7d0      	b.n	a800 <bt_pub_key_gen+0x28>
		return 0;
    a85e:	2400      	movs	r4, #0
    a860:	e7ce      	b.n	a800 <bt_pub_key_gen+0x28>
    a862:	bf00      	nop
    a864:	20000000 	.word	0x20000000
    a868:	00024c24 	.word	0x00024c24
    a86c:	00024ce4 	.word	0x00024ce4
    a870:	00027e90 	.word	0x00027e90
    a874:	200029b4 	.word	0x200029b4
    a878:	00027eaf 	.word	0x00027eaf

0000a87c <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    a87c:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a87e:	4804      	ldr	r0, [pc, #16]	; (a890 <bt_pub_key_get+0x14>)
    a880:	f017 f86e 	bl	21960 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    a884:	f010 0f08 	tst.w	r0, #8
		return pub_key;
	}

	return NULL;
}
    a888:	4802      	ldr	r0, [pc, #8]	; (a894 <bt_pub_key_get+0x18>)
    a88a:	bf08      	it	eq
    a88c:	2000      	moveq	r0, #0
    a88e:	bd08      	pop	{r3, pc}
    a890:	20000094 	.word	0x20000094
    a894:	200067eb 	.word	0x200067eb

0000a898 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a89a:	4d1a      	ldr	r5, [pc, #104]	; (a904 <bt_dh_key_gen+0x6c>)
    a89c:	682b      	ldr	r3, [r5, #0]
{
    a89e:	4606      	mov	r6, r0
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a8a0:	b113      	cbz	r3, a8a8 <bt_dh_key_gen+0x10>
		return -EBUSY;
    a8a2:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    a8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a8a8:	4817      	ldr	r0, [pc, #92]	; (a908 <bt_dh_key_gen+0x70>)
    a8aa:	f017 f859 	bl	21960 <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a8ae:	06c2      	lsls	r2, r0, #27
    a8b0:	f3c0 1700 	ubfx	r7, r0, #4, #1
    a8b4:	d4f5      	bmi.n	a8a2 <bt_dh_key_gen+0xa>
    a8b6:	4814      	ldr	r0, [pc, #80]	; (a908 <bt_dh_key_gen+0x70>)
    a8b8:	f017 f852 	bl	21960 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    a8bc:	0703      	lsls	r3, r0, #28
    a8be:	d51d      	bpl.n	a8fc <bt_dh_key_gen+0x64>
	dh_key_cb = cb;
    a8c0:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    a8c2:	f242 0026 	movw	r0, #8230	; 0x2026
    a8c6:	2140      	movs	r1, #64	; 0x40
    a8c8:	f7fe fbd4 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
    a8cc:	4604      	mov	r4, r0
    a8ce:	b918      	cbnz	r0, a8d8 <bt_dh_key_gen+0x40>
		dh_key_cb = NULL;
    a8d0:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    a8d2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    a8d6:	e7e6      	b.n	a8a6 <bt_dh_key_gen+0xe>
	cp = net_buf_add(buf, sizeof(*cp));
    a8d8:	2140      	movs	r1, #64	; 0x40
    a8da:	3008      	adds	r0, #8
    a8dc:	f018 ffb6 	bl	2384c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    a8e0:	2240      	movs	r2, #64	; 0x40
    a8e2:	4631      	mov	r1, r6
    a8e4:	f016 fedf 	bl	216a6 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    a8e8:	463a      	mov	r2, r7
    a8ea:	4621      	mov	r1, r4
    a8ec:	f242 0026 	movw	r0, #8230	; 0x2026
    a8f0:	f7fe fd1c 	bl	932c <bt_hci_cmd_send_sync>
	if (err) {
    a8f4:	2800      	cmp	r0, #0
    a8f6:	d0d6      	beq.n	a8a6 <bt_dh_key_gen+0xe>
		dh_key_cb = NULL;
    a8f8:	602f      	str	r7, [r5, #0]
		return err;
    a8fa:	e7d4      	b.n	a8a6 <bt_dh_key_gen+0xe>
		return -EADDRNOTAVAIL;
    a8fc:	f06f 0030 	mvn.w	r0, #48	; 0x30
    a900:	e7d1      	b.n	a8a6 <bt_dh_key_gen+0xe>
    a902:	bf00      	nop
    a904:	200029b0 	.word	0x200029b0
    a908:	20000094 	.word	0x20000094

0000a90c <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    a90c:	2300      	movs	r3, #0
	tx->user_data = NULL;
    a90e:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    a912:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    a914:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    a916:	4801      	ldr	r0, [pc, #4]	; (a91c <tx_free+0x10>)
    a918:	f019 bc52 	b.w	241c0 <k_queue_append>
    a91c:	200008d8 	.word	0x200008d8

0000a920 <notify_connected>:
{
    a920:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    a922:	4b09      	ldr	r3, [pc, #36]	; (a948 <notify_connected+0x28>)
    a924:	681d      	ldr	r5, [r3, #0]
{
    a926:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    a928:	7b21      	ldrb	r1, [r4, #12]
    a92a:	b92d      	cbnz	r5, a938 <notify_connected+0x18>
	if (!conn->err) {
    a92c:	b951      	cbnz	r1, a944 <notify_connected+0x24>
		bt_gatt_connected(conn);
    a92e:	4620      	mov	r0, r4
}
    a930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    a934:	f003 bad4 	b.w	dee0 <bt_gatt_connected>
		if (cb->connected) {
    a938:	682b      	ldr	r3, [r5, #0]
    a93a:	b10b      	cbz	r3, a940 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    a93c:	4620      	mov	r0, r4
    a93e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a940:	69ad      	ldr	r5, [r5, #24]
    a942:	e7f1      	b.n	a928 <notify_connected+0x8>
}
    a944:	bd38      	pop	{r3, r4, r5, pc}
    a946:	bf00      	nop
    a948:	200029c0 	.word	0x200029c0

0000a94c <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    a94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    a950:	694d      	ldr	r5, [r1, #20]
{
    a952:	4604      	mov	r4, r0
    a954:	460e      	mov	r6, r1
    a956:	4691      	mov	r9, r2
    a958:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    a95a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a95e:	4845      	ldr	r0, [pc, #276]	; (aa74 <send_frag+0x128>)
    a960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a964:	f013 feb6 	bl	1e6d4 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    a968:	7b63      	ldrb	r3, [r4, #13]
    a96a:	2b07      	cmp	r3, #7
    a96c:	d151      	bne.n	aa12 <send_frag+0xc6>
	__asm__ volatile(
    a96e:	f04f 0320 	mov.w	r3, #32
    a972:	f3ef 8211 	mrs	r2, BASEPRI
    a976:	f383 8811 	msr	BASEPRI, r3
    a97a:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    a97e:	2d00      	cmp	r5, #0
    a980:	d059      	beq.n	aa36 <send_frag+0xea>
	parent->next = child;
    a982:	2300      	movs	r3, #0
    a984:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    a986:	69a3      	ldr	r3, [r4, #24]
    a988:	2b00      	cmp	r3, #0
    a98a:	d151      	bne.n	aa30 <send_frag+0xe4>
	list->head = node;
    a98c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    a990:	f382 8811 	msr	BASEPRI, r2
    a994:	f3bf 8f6f 	isb	sy
	hdr = net_buf_push(buf, sizeof(*hdr));
    a998:	2104      	movs	r1, #4
    a99a:	f106 0008 	add.w	r0, r6, #8
    a99e:	f018 ff76 	bl	2388e <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a9a2:	8823      	ldrh	r3, [r4, #0]
    a9a4:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
    a9a8:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a9ac:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a9ae:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a9b2:	3b04      	subs	r3, #4
    a9b4:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    a9b6:	2302      	movs	r3, #2
    a9b8:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    a9ba:	4630      	mov	r0, r6
    a9bc:	f017 f91e 	bl	21bfc <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    a9c0:	4601      	mov	r1, r0
    a9c2:	2800      	cmp	r0, #0
    a9c4:	d053      	beq.n	aa6e <send_frag+0x122>
    a9c6:	4b2c      	ldr	r3, [pc, #176]	; (aa78 <send_frag+0x12c>)
    a9c8:	4a2c      	ldr	r2, [pc, #176]	; (aa7c <send_frag+0x130>)
		BT_ERR("Unable to send to driver (err %d)", err);
    a9ca:	482d      	ldr	r0, [pc, #180]	; (aa80 <send_frag+0x134>)
    a9cc:	1ad2      	subs	r2, r2, r3
    a9ce:	08d2      	lsrs	r2, r2, #3
    a9d0:	0192      	lsls	r2, r2, #6
    a9d2:	f042 0201 	orr.w	r2, r2, #1
    a9d6:	f015 f818 	bl	1fa0a <log_1>
	__asm__ volatile(
    a9da:	f04f 0320 	mov.w	r3, #32
    a9de:	f3ef 8111 	mrs	r1, BASEPRI
    a9e2:	f383 8811 	msr	BASEPRI, r3
    a9e6:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    a9ea:	2d00      	cmp	r5, #0
    a9ec:	d039      	beq.n	aa62 <send_frag+0x116>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a9ee:	6963      	ldr	r3, [r4, #20]
    a9f0:	2200      	movs	r2, #0
    a9f2:	b153      	cbz	r3, aa0a <send_frag+0xbe>
    a9f4:	429d      	cmp	r5, r3
    a9f6:	d131      	bne.n	aa5c <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
    a9f8:	682b      	ldr	r3, [r5, #0]
    a9fa:	bb4a      	cbnz	r2, aa50 <send_frag+0x104>
    a9fc:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    a9fe:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    aa00:	4295      	cmp	r5, r2
    aa02:	d100      	bne.n	aa06 <send_frag+0xba>
	list->tail = node;
    aa04:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    aa06:	2300      	movs	r3, #0
    aa08:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    aa0a:	f381 8811 	msr	BASEPRI, r1
    aa0e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    aa12:	4818      	ldr	r0, [pc, #96]	; (aa74 <send_frag+0x128>)
    aa14:	f013 fe38 	bl	1e688 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    aa18:	b115      	cbz	r5, aa20 <send_frag+0xd4>
		tx_free(tx);
    aa1a:	4628      	mov	r0, r5
    aa1c:	f7ff ff76 	bl	a90c <tx_free>
	}

	if (always_consume) {
    aa20:	b11f      	cbz	r7, aa2a <send_frag+0xde>
		net_buf_unref(buf);
    aa22:	4630      	mov	r0, r6
    aa24:	f010 fd96 	bl	1b554 <net_buf_unref>
	}
	return false;
    aa28:	2700      	movs	r7, #0
}
    aa2a:	4638      	mov	r0, r7
    aa2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    aa30:	601d      	str	r5, [r3, #0]
	list->tail = node;
    aa32:	61a5      	str	r5, [r4, #24]
}
    aa34:	e7ac      	b.n	a990 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    aa36:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    aa38:	b133      	cbz	r3, aa48 <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
    aa3a:	f103 080c 	add.w	r8, r3, #12
    aa3e:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    aa40:	3301      	adds	r3, #1
    aa42:	f8c8 3000 	str.w	r3, [r8]
    aa46:	e7a3      	b.n	a990 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    aa48:	69e3      	ldr	r3, [r4, #28]
    aa4a:	f104 081c 	add.w	r8, r4, #28
    aa4e:	e7f7      	b.n	aa40 <send_frag+0xf4>
	parent->next = child;
    aa50:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    aa52:	69a3      	ldr	r3, [r4, #24]
    aa54:	429d      	cmp	r5, r3
	list->tail = node;
    aa56:	bf08      	it	eq
    aa58:	61a2      	streq	r2, [r4, #24]
}
    aa5a:	e7d4      	b.n	aa06 <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    aa5c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    aa5e:	681b      	ldr	r3, [r3, #0]
    aa60:	e7c7      	b.n	a9f2 <send_frag+0xa6>
			(*pending_no_cb)--;
    aa62:	f8d8 3000 	ldr.w	r3, [r8]
    aa66:	3b01      	subs	r3, #1
    aa68:	f8c8 3000 	str.w	r3, [r8]
    aa6c:	e7cd      	b.n	aa0a <send_frag+0xbe>
	return true;
    aa6e:	2701      	movs	r7, #1
    aa70:	e7db      	b.n	aa2a <send_frag+0xde>
    aa72:	bf00      	nop
    aa74:	200000c8 	.word	0x200000c8
    aa78:	00024c24 	.word	0x00024c24
    aa7c:	00024c34 	.word	0x00024c34
    aa80:	000277f9 	.word	0x000277f9

0000aa84 <bt_conn_get_pkts>:
}
    aa84:	4800      	ldr	r0, [pc, #0]	; (aa88 <bt_conn_get_pkts+0x4>)
    aa86:	4770      	bx	lr
    aa88:	200000c8 	.word	0x200000c8

0000aa8c <notify_le_param_updated>:
{
    aa8c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    aa8e:	f3bf 8f5b 	dmb	ish
    aa92:	6842      	ldr	r2, [r0, #4]
    aa94:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    aa98:	0592      	lsls	r2, r2, #22
{
    aa9a:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    aa9c:	f100 0304 	add.w	r3, r0, #4
    aaa0:	d519      	bpl.n	aad6 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    aaa2:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    aaa6:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    aaaa:	4291      	cmp	r1, r2
    aaac:	d813      	bhi.n	aad6 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    aaae:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    aab2:	4291      	cmp	r1, r2
    aab4:	d30f      	bcc.n	aad6 <notify_le_param_updated+0x4a>
	    conn->le.latency == conn->le.pending_latency &&
    aab6:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    aaba:	4291      	cmp	r1, r2
    aabc:	d10b      	bne.n	aad6 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    aabe:	f3bf 8f5b 	dmb	ish
    aac2:	e853 2f00 	ldrex	r2, [r3]
    aac6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    aaca:	e843 2100 	strex	r1, r2, [r3]
    aace:	2900      	cmp	r1, #0
    aad0:	d1f7      	bne.n	aac2 <notify_le_param_updated+0x36>
    aad2:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    aad6:	4b08      	ldr	r3, [pc, #32]	; (aaf8 <notify_le_param_updated+0x6c>)
    aad8:	681d      	ldr	r5, [r3, #0]
    aada:	b905      	cbnz	r5, aade <notify_le_param_updated+0x52>
}
    aadc:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    aade:	68ee      	ldr	r6, [r5, #12]
    aae0:	b13e      	cbz	r6, aaf2 <notify_le_param_updated+0x66>
			cb->le_param_updated(conn, conn->le.interval,
    aae2:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    aae6:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    aaea:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    aaee:	4620      	mov	r0, r4
    aaf0:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    aaf2:	69ad      	ldr	r5, [r5, #24]
    aaf4:	e7f1      	b.n	aada <notify_le_param_updated+0x4e>
    aaf6:	bf00      	nop
    aaf8:	200029c0 	.word	0x200029c0

0000aafc <le_param_req>:
{
    aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aafe:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    ab00:	4608      	mov	r0, r1
{
    ab02:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    ab04:	f017 f84a 	bl	21b9c <bt_le_conn_params_valid>
    ab08:	4604      	mov	r4, r0
    ab0a:	b910      	cbnz	r0, ab12 <le_param_req+0x16>
		return false;
    ab0c:	2400      	movs	r4, #0
}
    ab0e:	4620      	mov	r0, r4
    ab10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    ab12:	4b09      	ldr	r3, [pc, #36]	; (ab38 <le_param_req+0x3c>)
    ab14:	681e      	ldr	r6, [r3, #0]
    ab16:	2e00      	cmp	r6, #0
    ab18:	d0f9      	beq.n	ab0e <le_param_req+0x12>
		if (!cb->le_param_req) {
    ab1a:	68b3      	ldr	r3, [r6, #8]
    ab1c:	b90b      	cbnz	r3, ab22 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    ab1e:	69b6      	ldr	r6, [r6, #24]
    ab20:	e7f9      	b.n	ab16 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    ab22:	4629      	mov	r1, r5
    ab24:	4638      	mov	r0, r7
    ab26:	4798      	blx	r3
    ab28:	2800      	cmp	r0, #0
    ab2a:	d0ef      	beq.n	ab0c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    ab2c:	4628      	mov	r0, r5
    ab2e:	f017 f835 	bl	21b9c <bt_le_conn_params_valid>
    ab32:	2800      	cmp	r0, #0
    ab34:	d1f3      	bne.n	ab1e <le_param_req+0x22>
    ab36:	e7e9      	b.n	ab0c <le_param_req+0x10>
    ab38:	200029c0 	.word	0x200029c0

0000ab3c <bt_conn_identity_resolved>:
{
    ab3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    ab3e:	78c3      	ldrb	r3, [r0, #3]
{
    ab40:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    ab42:	b93b      	cbnz	r3, ab54 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    ab44:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    ab48:	4b08      	ldr	r3, [pc, #32]	; (ab6c <bt_conn_identity_resolved+0x30>)
    ab4a:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    ab4c:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    ab50:	b91d      	cbnz	r5, ab5a <bt_conn_identity_resolved+0x1e>
}
    ab52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    ab54:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    ab58:	e7f6      	b.n	ab48 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    ab5a:	692b      	ldr	r3, [r5, #16]
    ab5c:	b11b      	cbz	r3, ab66 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    ab5e:	463a      	mov	r2, r7
    ab60:	4631      	mov	r1, r6
    ab62:	4620      	mov	r0, r4
    ab64:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    ab66:	69ad      	ldr	r5, [r5, #24]
    ab68:	e7f2      	b.n	ab50 <bt_conn_identity_resolved+0x14>
    ab6a:	bf00      	nop
    ab6c:	200029c0 	.word	0x200029c0

0000ab70 <bt_conn_security_changed>:
{
    ab70:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
    ab72:	7a43      	ldrb	r3, [r0, #9]
    ab74:	7283      	strb	r3, [r0, #10]
{
    ab76:	4604      	mov	r4, r0
    ab78:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
    ab7a:	f017 fa33 	bl	21fe4 <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
    ab7e:	4b06      	ldr	r3, [pc, #24]	; (ab98 <bt_conn_security_changed+0x28>)
    ab80:	681d      	ldr	r5, [r3, #0]
    ab82:	b905      	cbnz	r5, ab86 <bt_conn_security_changed+0x16>
}
    ab84:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
    ab86:	696b      	ldr	r3, [r5, #20]
    ab88:	b11b      	cbz	r3, ab92 <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
    ab8a:	7a61      	ldrb	r1, [r4, #9]
    ab8c:	4632      	mov	r2, r6
    ab8e:	4620      	mov	r0, r4
    ab90:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    ab92:	69ad      	ldr	r5, [r5, #24]
    ab94:	e7f5      	b.n	ab82 <bt_conn_security_changed+0x12>
    ab96:	bf00      	nop
    ab98:	200029c0 	.word	0x200029c0

0000ab9c <bt_conn_cb_register>:
	cb->_next = callback_list;
    ab9c:	4b02      	ldr	r3, [pc, #8]	; (aba8 <bt_conn_cb_register+0xc>)
    ab9e:	681a      	ldr	r2, [r3, #0]
    aba0:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    aba2:	6018      	str	r0, [r3, #0]
}
    aba4:	4770      	bx	lr
    aba6:	bf00      	nop
    aba8:	200029c0 	.word	0x200029c0

0000abac <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    abac:	b570      	push	{r4, r5, r6, lr}
    abae:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    abb0:	f100 0634 	add.w	r6, r0, #52	; 0x34
    abb4:	2200      	movs	r2, #0
    abb6:	2300      	movs	r3, #0
    abb8:	4630      	mov	r0, r6
    abba:	f018 fdf0 	bl	2379e <net_buf_get>
    abbe:	4605      	mov	r5, r0
    abc0:	b958      	cbnz	r0, abda <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    abc2:	4620      	mov	r0, r4
    abc4:	f017 f918 	bl	21df8 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    abc8:	f104 0158 	add.w	r1, r4, #88	; 0x58
    abcc:	4807      	ldr	r0, [pc, #28]	; (abec <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    abce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    abd2:	2200      	movs	r2, #0
    abd4:	2300      	movs	r3, #0
    abd6:	f013 beb5 	b.w	1e944 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    abda:	6968      	ldr	r0, [r5, #20]
    abdc:	b108      	cbz	r0, abe2 <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    abde:	f7ff fe95 	bl	a90c <tx_free>
		net_buf_unref(buf);
    abe2:	4628      	mov	r0, r5
    abe4:	f010 fcb6 	bl	1b554 <net_buf_unref>
    abe8:	e7e4      	b.n	abb4 <conn_cleanup+0x8>
    abea:	bf00      	nop
    abec:	200014c8 	.word	0x200014c8

0000abf0 <bt_conn_recv>:
{
    abf0:	b570      	push	{r4, r5, r6, lr}
    abf2:	4616      	mov	r6, r2
    abf4:	4604      	mov	r4, r0
    abf6:	460d      	mov	r5, r1
	tx_notify(conn);
    abf8:	f017 f87d 	bl	21cf6 <tx_notify>
	switch (flags) {
    abfc:	2e01      	cmp	r6, #1
    abfe:	d02e      	beq.n	ac5e <bt_conn_recv+0x6e>
    ac00:	2e02      	cmp	r6, #2
    ac02:	d15b      	bne.n	acbc <bt_conn_recv+0xcc>
		if (conn->rx) {
    ac04:	6923      	ldr	r3, [r4, #16]
    ac06:	b163      	cbz	r3, ac22 <bt_conn_recv+0x32>
    ac08:	4b37      	ldr	r3, [pc, #220]	; (ace8 <bt_conn_recv+0xf8>)
    ac0a:	4938      	ldr	r1, [pc, #224]	; (acec <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
    ac0c:	4838      	ldr	r0, [pc, #224]	; (acf0 <bt_conn_recv+0x100>)
    ac0e:	1ac9      	subs	r1, r1, r3
    ac10:	08c9      	lsrs	r1, r1, #3
    ac12:	0189      	lsls	r1, r1, #6
    ac14:	f041 0101 	orr.w	r1, r1, #1
    ac18:	f014 feea 	bl	1f9f0 <log_0>
			bt_conn_reset_rx_state(conn);
    ac1c:	4620      	mov	r0, r4
    ac1e:	f017 f8eb 	bl	21df8 <bt_conn_reset_rx_state>
		conn->rx = buf;
    ac22:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    ac24:	6923      	ldr	r3, [r4, #16]
    ac26:	8999      	ldrh	r1, [r3, #12]
    ac28:	2901      	cmp	r1, #1
    ac2a:	d95b      	bls.n	ace4 <bt_conn_recv+0xf4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    ac2c:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    ac2e:	7845      	ldrb	r5, [r0, #1]
    ac30:	7802      	ldrb	r2, [r0, #0]
    ac32:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    ac36:	3204      	adds	r2, #4
    ac38:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    ac3a:	428a      	cmp	r2, r1
    ac3c:	d852      	bhi.n	ace4 <bt_conn_recv+0xf4>
	if (conn->rx->len > acl_total_len) {
    ac3e:	d249      	bcs.n	acd4 <bt_conn_recv+0xe4>
    ac40:	4829      	ldr	r0, [pc, #164]	; (ace8 <bt_conn_recv+0xf8>)
    ac42:	4b2a      	ldr	r3, [pc, #168]	; (acec <bt_conn_recv+0xfc>)
    ac44:	1a1b      	subs	r3, r3, r0
    ac46:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    ac48:	019b      	lsls	r3, r3, #6
    ac4a:	482a      	ldr	r0, [pc, #168]	; (acf4 <bt_conn_recv+0x104>)
    ac4c:	f043 0301 	orr.w	r3, r3, #1
    ac50:	f014 feef 	bl	1fa32 <log_2>
		bt_conn_reset_rx_state(conn);
    ac54:	4620      	mov	r0, r4
}
    ac56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    ac5a:	f017 b8cd 	b.w	21df8 <bt_conn_reset_rx_state>
		if (!conn->rx) {
    ac5e:	6920      	ldr	r0, [r4, #16]
    ac60:	b968      	cbnz	r0, ac7e <bt_conn_recv+0x8e>
    ac62:	4922      	ldr	r1, [pc, #136]	; (acec <bt_conn_recv+0xfc>)
    ac64:	4b20      	ldr	r3, [pc, #128]	; (ace8 <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
    ac66:	4824      	ldr	r0, [pc, #144]	; (acf8 <bt_conn_recv+0x108>)
    ac68:	1ac9      	subs	r1, r1, r3
    ac6a:	08c9      	lsrs	r1, r1, #3
    ac6c:	0189      	lsls	r1, r1, #6
    ac6e:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    ac72:	f014 febd 	bl	1f9f0 <log_0>
			bt_conn_reset_rx_state(conn);
    ac76:	4620      	mov	r0, r4
    ac78:	f017 f8be 	bl	21df8 <bt_conn_reset_rx_state>
    ac7c:	e001      	b.n	ac82 <bt_conn_recv+0x92>
		if (!buf->len) {
    ac7e:	89ae      	ldrh	r6, [r5, #12]
    ac80:	b926      	cbnz	r6, ac8c <bt_conn_recv+0x9c>
			net_buf_unref(buf);
    ac82:	4628      	mov	r0, r5
}
    ac84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    ac88:	f010 bc64 	b.w	1b554 <net_buf_unref>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    ac8c:	3008      	adds	r0, #8
    ac8e:	f018 fe22 	bl	238d6 <net_buf_simple_tailroom>
    ac92:	4286      	cmp	r6, r0
    ac94:	d908      	bls.n	aca8 <bt_conn_recv+0xb8>
    ac96:	4915      	ldr	r1, [pc, #84]	; (acec <bt_conn_recv+0xfc>)
    ac98:	4b13      	ldr	r3, [pc, #76]	; (ace8 <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
    ac9a:	4818      	ldr	r0, [pc, #96]	; (acfc <bt_conn_recv+0x10c>)
    ac9c:	1ac9      	subs	r1, r1, r3
    ac9e:	08c9      	lsrs	r1, r1, #3
    aca0:	0189      	lsls	r1, r1, #6
    aca2:	f041 0101 	orr.w	r1, r1, #1
    aca6:	e7e4      	b.n	ac72 <bt_conn_recv+0x82>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    aca8:	6920      	ldr	r0, [r4, #16]
    acaa:	89aa      	ldrh	r2, [r5, #12]
    acac:	68a9      	ldr	r1, [r5, #8]
    acae:	3008      	adds	r0, #8
    acb0:	f018 fdd2 	bl	23858 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    acb4:	4628      	mov	r0, r5
    acb6:	f010 fc4d 	bl	1b554 <net_buf_unref>
		break;
    acba:	e7b3      	b.n	ac24 <bt_conn_recv+0x34>
    acbc:	4a0a      	ldr	r2, [pc, #40]	; (ace8 <bt_conn_recv+0xf8>)
    acbe:	4b0b      	ldr	r3, [pc, #44]	; (acec <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    acc0:	480f      	ldr	r0, [pc, #60]	; (ad00 <bt_conn_recv+0x110>)
    acc2:	1a9b      	subs	r3, r3, r2
    acc4:	08db      	lsrs	r3, r3, #3
    acc6:	019b      	lsls	r3, r3, #6
    acc8:	f043 0201 	orr.w	r2, r3, #1
    accc:	4631      	mov	r1, r6
    acce:	f014 fe9c 	bl	1fa0a <log_1>
		bt_conn_reset_rx_state(conn);
    acd2:	e7d0      	b.n	ac76 <bt_conn_recv+0x86>
	conn->rx = NULL;
    acd4:	2200      	movs	r2, #0
    acd6:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    acd8:	4620      	mov	r0, r4
    acda:	4619      	mov	r1, r3
}
    acdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    ace0:	f000 bd2e 	b.w	b740 <bt_l2cap_recv>
}
    ace4:	bd70      	pop	{r4, r5, r6, pc}
    ace6:	bf00      	nop
    ace8:	00024c24 	.word	0x00024c24
    acec:	00024c34 	.word	0x00024c34
    acf0:	00027f03 	.word	0x00027f03
    acf4:	00027f83 	.word	0x00027f83
    acf8:	00027f20 	.word	0x00027f20
    acfc:	00027f3e 	.word	0x00027f3e
    ad00:	00027f65 	.word	0x00027f65

0000ad04 <bt_conn_send_cb>:
{
    ad04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad08:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    ad0a:	7b43      	ldrb	r3, [r0, #13]
    ad0c:	2b07      	cmp	r3, #7
{
    ad0e:	4606      	mov	r6, r0
    ad10:	460d      	mov	r5, r1
    ad12:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    ad14:	d00f      	beq.n	ad36 <bt_conn_send_cb+0x32>
    ad16:	4b2a      	ldr	r3, [pc, #168]	; (adc0 <bt_conn_send_cb+0xbc>)
    ad18:	492a      	ldr	r1, [pc, #168]	; (adc4 <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    ad1a:	482b      	ldr	r0, [pc, #172]	; (adc8 <bt_conn_send_cb+0xc4>)
    ad1c:	1ac9      	subs	r1, r1, r3
    ad1e:	08c9      	lsrs	r1, r1, #3
    ad20:	0189      	lsls	r1, r1, #6
    ad22:	f041 0101 	orr.w	r1, r1, #1
    ad26:	f014 fe63 	bl	1f9f0 <log_0>
		net_buf_unref(buf);
    ad2a:	4628      	mov	r0, r5
    ad2c:	f010 fc12 	bl	1b554 <net_buf_unref>
			return -ENOTCONN;
    ad30:	f06f 0038 	mvn.w	r0, #56	; 0x38
    ad34:	e020      	b.n	ad78 <bt_conn_send_cb+0x74>
	if (cb) {
    ad36:	2a00      	cmp	r2, #0
    ad38:	d040      	beq.n	adbc <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    ad3a:	f013 fc9f 	bl	1e67c <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    ad3e:	4b23      	ldr	r3, [pc, #140]	; (adcc <bt_conn_send_cb+0xc8>)
    ad40:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    ad42:	4823      	ldr	r0, [pc, #140]	; (add0 <bt_conn_send_cb+0xcc>)
    ad44:	bf07      	ittee	eq
    ad46:	2200      	moveq	r2, #0
    ad48:	2300      	moveq	r3, #0
    ad4a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    ad4e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    ad52:	f013 f8c7 	bl	1dee4 <z_impl_k_queue_get>
    ad56:	4604      	mov	r4, r0
		if (!tx) {
    ad58:	b980      	cbnz	r0, ad7c <bt_conn_send_cb+0x78>
    ad5a:	4b19      	ldr	r3, [pc, #100]	; (adc0 <bt_conn_send_cb+0xbc>)
    ad5c:	4919      	ldr	r1, [pc, #100]	; (adc4 <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    ad5e:	481d      	ldr	r0, [pc, #116]	; (add4 <bt_conn_send_cb+0xd0>)
    ad60:	1ac9      	subs	r1, r1, r3
    ad62:	08c9      	lsrs	r1, r1, #3
    ad64:	0189      	lsls	r1, r1, #6
    ad66:	f041 0101 	orr.w	r1, r1, #1
    ad6a:	f014 fe41 	bl	1f9f0 <log_0>
			net_buf_unref(buf);
    ad6e:	4628      	mov	r0, r5
    ad70:	f010 fbf0 	bl	1b554 <net_buf_unref>
			return -ENOBUFS;
    ad74:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    ad78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    ad7c:	7b73      	ldrb	r3, [r6, #13]
    ad7e:	2b07      	cmp	r3, #7
    ad80:	d010      	beq.n	ada4 <bt_conn_send_cb+0xa0>
    ad82:	4b0f      	ldr	r3, [pc, #60]	; (adc0 <bt_conn_send_cb+0xbc>)
    ad84:	490f      	ldr	r1, [pc, #60]	; (adc4 <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    ad86:	4814      	ldr	r0, [pc, #80]	; (add8 <bt_conn_send_cb+0xd4>)
    ad88:	1ac9      	subs	r1, r1, r3
    ad8a:	08c9      	lsrs	r1, r1, #3
    ad8c:	0189      	lsls	r1, r1, #6
    ad8e:	f041 0102 	orr.w	r1, r1, #2
    ad92:	f014 fe2d 	bl	1f9f0 <log_0>
			net_buf_unref(buf);
    ad96:	4628      	mov	r0, r5
    ad98:	f010 fbdc 	bl	1b554 <net_buf_unref>
			tx_free(tx);
    ad9c:	4620      	mov	r0, r4
    ad9e:	f7ff fdb5 	bl	a90c <tx_free>
    ada2:	e7c5      	b.n	ad30 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    ada4:	2300      	movs	r3, #0
		tx->user_data = user_data;
    ada6:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    adaa:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    adac:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    adae:	f106 0034 	add.w	r0, r6, #52	; 0x34
    adb2:	4629      	mov	r1, r5
    adb4:	f018 fd17 	bl	237e6 <net_buf_put>
	return 0;
    adb8:	2000      	movs	r0, #0
    adba:	e7dd      	b.n	ad78 <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    adbc:	614a      	str	r2, [r1, #20]
    adbe:	e7f6      	b.n	adae <bt_conn_send_cb+0xaa>
    adc0:	00024c24 	.word	0x00024c24
    adc4:	00024c34 	.word	0x00024c34
    adc8:	00027f9e 	.word	0x00027f9e
    adcc:	200014e0 	.word	0x200014e0
    add0:	200008d8 	.word	0x200008d8
    add4:	00027fad 	.word	0x00027fad
    add8:	00027fcb 	.word	0x00027fcb

0000addc <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    addc:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    adde:	4b1b      	ldr	r3, [pc, #108]	; (ae4c <bt_conn_prepare_events+0x70>)
    ade0:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    ade2:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    ade4:	609a      	str	r2, [r3, #8]
{
    ade6:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    ade8:	f019 fd9f 	bl	2492a <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    adec:	f3bf 8f5b 	dmb	ish
    adf0:	4b17      	ldr	r3, [pc, #92]	; (ae50 <bt_conn_prepare_events+0x74>)
    adf2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
    adf6:	f3bf 8f5b 	dmb	ish
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    adfa:	f104 0014 	add.w	r0, r4, #20
    adfe:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
    ae00:	b90a      	cbnz	r2, ae06 <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
    ae02:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    ae04:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    ae06:	7b5a      	ldrb	r2, [r3, #13]
    ae08:	b99a      	cbnz	r2, ae32 <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ae0a:	f3bf 8f5b 	dmb	ish
    ae0e:	1d1a      	adds	r2, r3, #4
    ae10:	e852 5f00 	ldrex	r5, [r2]
    ae14:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
    ae18:	e842 ce00 	strex	lr, ip, [r2]
    ae1c:	f1be 0f00 	cmp.w	lr, #0
    ae20:	d1f6      	bne.n	ae10 <bt_conn_prepare_events+0x34>
    ae22:	f3bf 8f5b 	dmb	ish
    ae26:	066a      	lsls	r2, r5, #25
    ae28:	d503      	bpl.n	ae32 <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
    ae2a:	4618      	mov	r0, r3
    ae2c:	f7ff febe 	bl	abac <conn_cleanup>
    ae30:	e7e7      	b.n	ae02 <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
    ae32:	7b4b      	ldrb	r3, [r1, #13]
    ae34:	2b07      	cmp	r3, #7
    ae36:	d1e4      	bne.n	ae02 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
    ae38:	4b06      	ldr	r3, [pc, #24]	; (ae54 <bt_conn_prepare_events+0x78>)
    ae3a:	2200      	movs	r2, #0
    ae3c:	2104      	movs	r1, #4
    ae3e:	f019 fd74 	bl	2492a <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    ae42:	2301      	movs	r3, #1
    ae44:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    ae48:	2002      	movs	r0, #2
	return ev_count;
    ae4a:	e7db      	b.n	ae04 <bt_conn_prepare_events+0x28>
    ae4c:	20000298 	.word	0x20000298
    ae50:	20000e90 	.word	0x20000e90
    ae54:	20000ec4 	.word	0x20000ec4

0000ae58 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    ae58:	b570      	push	{r4, r5, r6, lr}
    ae5a:	4606      	mov	r6, r0
    ae5c:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    ae5e:	4811      	ldr	r0, [pc, #68]	; (aea4 <bt_conn_add_le+0x4c>)
    ae60:	2101      	movs	r1, #1
    ae62:	f016 ff6e 	bl	21d42 <bt_conn_new>
	if (!conn) {
    ae66:	4604      	mov	r4, r0
    ae68:	b1c8      	cbz	r0, ae9e <bt_conn_add_le+0x46>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    ae6a:	2230      	movs	r2, #48	; 0x30
    ae6c:	2100      	movs	r1, #0
    ae6e:	3058      	adds	r0, #88	; 0x58
    ae70:	f016 fc44 	bl	216fc <memset>
    ae74:	4b0c      	ldr	r3, [pc, #48]	; (aea8 <bt_conn_add_le+0x50>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    ae76:	4a0d      	ldr	r2, [pc, #52]	; (aeac <bt_conn_add_le+0x54>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    ae78:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    ae7a:	2300      	movs	r3, #0
    ae7c:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    ae80:	62a3      	str	r3, [r4, #40]	; 0x28

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    ae82:	7226      	strb	r6, [r4, #8]
	memcpy(dst, src, sizeof(*dst));
    ae84:	2207      	movs	r2, #7
    ae86:	4629      	mov	r1, r5
    ae88:	f104 0088 	add.w	r0, r4, #136	; 0x88
    ae8c:	f016 fc0b 	bl	216a6 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    ae90:	2301      	movs	r3, #1
    ae92:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    ae94:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    ae96:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    ae98:	4b05      	ldr	r3, [pc, #20]	; (aeb0 <bt_conn_add_le+0x58>)
    ae9a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    ae9e:	4620      	mov	r0, r4
    aea0:	bd70      	pop	{r4, r5, r6, pc}
    aea2:	bf00      	nop
    aea4:	20000e90 	.word	0x20000e90
    aea8:	0000b24d 	.word	0x0000b24d
    aeac:	00021d3d 	.word	0x00021d3d
    aeb0:	00280018 	.word	0x00280018

0000aeb4 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    aeb4:	4602      	mov	r2, r0
    aeb6:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    aeb8:	2101      	movs	r1, #1
    aeba:	4803      	ldr	r0, [pc, #12]	; (aec8 <bt_conn_lookup_handle+0x14>)
    aebc:	f016 fff7 	bl	21eae <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
    aec0:	2800      	cmp	r0, #0
    aec2:	bf38      	it	cc
    aec4:	2000      	movcc	r0, #0
    aec6:	bd08      	pop	{r3, pc}
    aec8:	20000e90 	.word	0x20000e90

0000aecc <bt_conn_set_state>:
{
    aecc:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    aece:	7b46      	ldrb	r6, [r0, #13]
    aed0:	428e      	cmp	r6, r1
{
    aed2:	4604      	mov	r4, r0
    aed4:	460d      	mov	r5, r1
	if (conn->state == state) {
    aed6:	d112      	bne.n	aefe <bt_conn_set_state+0x32>
    aed8:	4b68      	ldr	r3, [pc, #416]	; (b07c <bt_conn_set_state+0x1b0>)
    aeda:	4a69      	ldr	r2, [pc, #420]	; (b080 <bt_conn_set_state+0x1b4>)
		BT_WARN("no transition %s", state2str(state));
    aedc:	4869      	ldr	r0, [pc, #420]	; (b084 <bt_conn_set_state+0x1b8>)
    aede:	2e08      	cmp	r6, #8
    aee0:	eba2 0203 	sub.w	r2, r2, r3
    aee4:	bf96      	itet	ls
    aee6:	4b68      	ldrls	r3, [pc, #416]	; (b088 <bt_conn_set_state+0x1bc>)
    aee8:	4968      	ldrhi	r1, [pc, #416]	; (b08c <bt_conn_set_state+0x1c0>)
    aeea:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    aeee:	08d2      	lsrs	r2, r2, #3
    aef0:	0192      	lsls	r2, r2, #6
    aef2:	f042 0202 	orr.w	r2, r2, #2
}
    aef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    aefa:	f014 bd86 	b.w	1fa0a <log_1>
	conn->state = state;
    aefe:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    af00:	b90e      	cbnz	r6, af06 <bt_conn_set_state+0x3a>
		bt_conn_ref(conn);
    af02:	f016 ffa2 	bl	21e4a <bt_conn_ref>
	switch (conn->state) {
    af06:	7b63      	ldrb	r3, [r4, #13]
    af08:	2b08      	cmp	r3, #8
    af0a:	f200 80ac 	bhi.w	b066 <bt_conn_set_state+0x19a>
    af0e:	e8df f003 	tbb	[pc, r3]
    af12:	053e      	.short	0x053e
    af14:	b4b4b4b4 	.word	0xb4b4b4b4
    af18:	1cb4      	.short	0x1cb4
    af1a:	b4          	.byte	0xb4
    af1b:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    af1c:	4d5c      	ldr	r5, [pc, #368]	; (b090 <bt_conn_set_state+0x1c4>)
		tx->pending_no_cb = 0U;
    af1e:	2600      	movs	r6, #0
	__asm__ volatile(
    af20:	f04f 0320 	mov.w	r3, #32
    af24:	f3ef 8211 	mrs	r2, BASEPRI
    af28:	f383 8811 	msr	BASEPRI, r3
    af2c:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    af30:	69e3      	ldr	r3, [r4, #28]
    af32:	2b00      	cmp	r3, #0
    af34:	d078      	beq.n	b028 <bt_conn_set_state+0x15c>
			conn->pending_no_cb--;
    af36:	3b01      	subs	r3, #1
    af38:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    af3a:	f382 8811 	msr	BASEPRI, r2
    af3e:	f3bf 8f6f 	isb	sy
    af42:	4628      	mov	r0, r5
    af44:	f013 fba0 	bl	1e688 <z_impl_k_sem_give>
}
    af48:	e7ea      	b.n	af20 <bt_conn_set_state+0x54>
		if (conn->type == BT_CONN_TYPE_SCO) {
    af4a:	78a3      	ldrb	r3, [r4, #2]
    af4c:	2b04      	cmp	r3, #4
    af4e:	f000 8094 	beq.w	b07a <bt_conn_set_state+0x1ae>
	z_impl_k_queue_init(queue);
    af52:	f104 0034 	add.w	r0, r4, #52	; 0x34
    af56:	f019 f927 	bl	241a8 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    af5a:	2100      	movs	r1, #0
    af5c:	484d      	ldr	r0, [pc, #308]	; (b094 <bt_conn_set_state+0x1c8>)
    af5e:	f013 ff93 	bl	1ee88 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    af62:	2300      	movs	r3, #0
	list->tail = NULL;
    af64:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		bt_l2cap_connected(conn);
    af68:	4620      	mov	r0, r4
    af6a:	f000 fb19 	bl	b5a0 <bt_l2cap_connected>
		notify_connected(conn);
    af6e:	4620      	mov	r0, r4
    af70:	f7ff fcd6 	bl	a920 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    af74:	78e3      	ldrb	r3, [r4, #3]
    af76:	2b01      	cmp	r3, #1
    af78:	d17f      	bne.n	b07a <bt_conn_set_state+0x1ae>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    af7a:	f104 0158 	add.w	r1, r4, #88	; 0x58
    af7e:	4846      	ldr	r0, [pc, #280]	; (b098 <bt_conn_set_state+0x1cc>)
}
    af80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    af84:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    af88:	2300      	movs	r3, #0
    af8a:	f013 bcdb 	b.w	1e944 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
    af8e:	78a3      	ldrb	r3, [r4, #2]
    af90:	2b04      	cmp	r3, #4
    af92:	d104      	bne.n	af9e <bt_conn_set_state+0xd2>
			bt_conn_unref(conn);
    af94:	4620      	mov	r0, r4
}
    af96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    af9a:	f016 bf71 	b.w	21e80 <bt_conn_unref>
		switch (old_state) {
    af9e:	2e08      	cmp	r6, #8
    afa0:	d86b      	bhi.n	b07a <bt_conn_set_state+0x1ae>
    afa2:	a301      	add	r3, pc, #4	; (adr r3, afa8 <bt_conn_set_state+0xdc>)
    afa4:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    afa8:	0000b015 	.word	0x0000b015
    afac:	0000afcd 	.word	0x0000afcd
    afb0:	0000b007 	.word	0x0000b007
    afb4:	0000af95 	.word	0x0000af95
    afb8:	0000af95 	.word	0x0000af95
    afbc:	0000b007 	.word	0x0000b007
    afc0:	0000b007 	.word	0x0000b007
    afc4:	0000b015 	.word	0x0000b015
    afc8:	0000b015 	.word	0x0000b015
			tx_notify(conn);
    afcc:	4620      	mov	r0, r4
    afce:	f016 fe92 	bl	21cf6 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    afd2:	78a3      	ldrb	r3, [r4, #2]
    afd4:	2b01      	cmp	r3, #1
    afd6:	d103      	bne.n	afe0 <bt_conn_set_state+0x114>
				k_delayed_work_cancel(&conn->deferred_work);
    afd8:	f104 0058 	add.w	r0, r4, #88	; 0x58
    afdc:	f019 fabe 	bl	2455c <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    afe0:	f3bf 8f5b 	dmb	ish
    afe4:	3404      	adds	r4, #4
    afe6:	e854 3f00 	ldrex	r3, [r4]
    afea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    afee:	e844 3200 	strex	r2, r3, [r4]
    aff2:	2a00      	cmp	r2, #0
    aff4:	d1f7      	bne.n	afe6 <bt_conn_set_state+0x11a>
    aff6:	f3bf 8f5b 	dmb	ish
    affa:	4826      	ldr	r0, [pc, #152]	; (b094 <bt_conn_set_state+0x1c8>)
}
    affc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b000:	2100      	movs	r1, #0
    b002:	f013 bf41 	b.w	1ee88 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    b006:	7b23      	ldrb	r3, [r4, #12]
    b008:	2b00      	cmp	r3, #0
    b00a:	d0c3      	beq.n	af94 <bt_conn_set_state+0xc8>
				notify_connected(conn);
    b00c:	4620      	mov	r0, r4
    b00e:	f7ff fc87 	bl	a920 <notify_connected>
    b012:	e7bf      	b.n	af94 <bt_conn_set_state+0xc8>
    b014:	4a1a      	ldr	r2, [pc, #104]	; (b080 <bt_conn_set_state+0x1b4>)
    b016:	4b19      	ldr	r3, [pc, #100]	; (b07c <bt_conn_set_state+0x1b0>)
			BT_WARN("Invalid (%u) old state", state);
    b018:	4820      	ldr	r0, [pc, #128]	; (b09c <bt_conn_set_state+0x1d0>)
    b01a:	1ad2      	subs	r2, r2, r3
    b01c:	08d2      	lsrs	r2, r2, #3
    b01e:	0192      	lsls	r2, r2, #6
    b020:	f042 0202 	orr.w	r2, r2, #2
    b024:	4629      	mov	r1, r5
    b026:	e766      	b.n	aef6 <bt_conn_set_state+0x2a>
Z_GENLIST_IS_EMPTY(slist)
    b028:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    b02a:	b128      	cbz	r0, b038 <bt_conn_set_state+0x16c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b02c:	69a1      	ldr	r1, [r4, #24]
    b02e:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    b030:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b032:	4288      	cmp	r0, r1
	list->tail = node;
    b034:	bf08      	it	eq
    b036:	61a3      	streq	r3, [r4, #24]
    b038:	f382 8811 	msr	BASEPRI, r2
    b03c:	f3bf 8f6f 	isb	sy
		if (!node) {
    b040:	b1d8      	cbz	r0, b07a <bt_conn_set_state+0x1ae>
	__asm__ volatile(
    b042:	f04f 0220 	mov.w	r2, #32
    b046:	f3ef 8311 	mrs	r3, BASEPRI
    b04a:	f382 8811 	msr	BASEPRI, r2
    b04e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    b052:	68c2      	ldr	r2, [r0, #12]
    b054:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    b056:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    b058:	f383 8811 	msr	BASEPRI, r3
    b05c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    b060:	f7ff fc54 	bl	a90c <tx_free>
    b064:	e76d      	b.n	af42 <bt_conn_set_state+0x76>
    b066:	4a06      	ldr	r2, [pc, #24]	; (b080 <bt_conn_set_state+0x1b4>)
    b068:	4b04      	ldr	r3, [pc, #16]	; (b07c <bt_conn_set_state+0x1b0>)
		BT_WARN("no valid (%u) state was set", state);
    b06a:	480d      	ldr	r0, [pc, #52]	; (b0a0 <bt_conn_set_state+0x1d4>)
    b06c:	1ad2      	subs	r2, r2, r3
    b06e:	08d2      	lsrs	r2, r2, #3
    b070:	0192      	lsls	r2, r2, #6
    b072:	f042 0202 	orr.w	r2, r2, #2
    b076:	4629      	mov	r1, r5
    b078:	e73d      	b.n	aef6 <bt_conn_set_state+0x2a>
}
    b07a:	bd70      	pop	{r4, r5, r6, pc}
    b07c:	00024c24 	.word	0x00024c24
    b080:	00024c34 	.word	0x00024c34
    b084:	00027ffb 	.word	0x00027ffb
    b088:	000252c8 	.word	0x000252c8
    b08c:	00027ff1 	.word	0x00027ff1
    b090:	200000c8 	.word	0x200000c8
    b094:	20000298 	.word	0x20000298
    b098:	200014c8 	.word	0x200014c8
    b09c:	0002800c 	.word	0x0002800c
    b0a0:	00028023 	.word	0x00028023

0000b0a4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    b0a4:	b570      	push	{r4, r5, r6, lr}
    b0a6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b0a8:	480c      	ldr	r0, [pc, #48]	; (b0dc <bt_conn_lookup_addr_le+0x38>)
{
    b0aa:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b0ac:	f016 fecd 	bl	21e4a <bt_conn_ref>

		if (!conn) {
    b0b0:	4604      	mov	r4, r0
    b0b2:	b128      	cbz	r0, b0c0 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    b0b4:	7883      	ldrb	r3, [r0, #2]
    b0b6:	2b01      	cmp	r3, #1
    b0b8:	d004      	beq.n	b0c4 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    b0ba:	f016 fee1 	bl	21e80 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    b0be:	2400      	movs	r4, #0
}
    b0c0:	4620      	mov	r0, r4
    b0c2:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    b0c4:	4629      	mov	r1, r5
    b0c6:	4632      	mov	r2, r6
    b0c8:	f016 fe9f 	bl	21e0a <bt_conn_is_peer_addr_le>
    b0cc:	4605      	mov	r5, r0
    b0ce:	2800      	cmp	r0, #0
    b0d0:	d1f6      	bne.n	b0c0 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    b0d2:	4620      	mov	r0, r4
    b0d4:	f016 fed4 	bl	21e80 <bt_conn_unref>
	return NULL;
    b0d8:	462c      	mov	r4, r5
			continue;
    b0da:	e7f1      	b.n	b0c0 <bt_conn_lookup_addr_le+0x1c>
    b0dc:	20000e90 	.word	0x20000e90

0000b0e0 <bt_conn_exists_le>:
{
    b0e0:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    b0e2:	f7ff ffdf 	bl	b0a4 <bt_conn_lookup_addr_le>
	if (conn) {
    b0e6:	4604      	mov	r4, r0
    b0e8:	b1a0      	cbz	r0, b114 <bt_conn_exists_le+0x34>
    b0ea:	4b0b      	ldr	r3, [pc, #44]	; (b118 <bt_conn_exists_le+0x38>)
    b0ec:	4a0b      	ldr	r2, [pc, #44]	; (b11c <bt_conn_exists_le+0x3c>)
    b0ee:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    b0f0:	7b43      	ldrb	r3, [r0, #13]
    b0f2:	480b      	ldr	r0, [pc, #44]	; (b120 <bt_conn_exists_le+0x40>)
    b0f4:	2b08      	cmp	r3, #8
    b0f6:	bf96      	itet	ls
    b0f8:	490a      	ldrls	r1, [pc, #40]	; (b124 <bt_conn_exists_le+0x44>)
    b0fa:	490b      	ldrhi	r1, [pc, #44]	; (b128 <bt_conn_exists_le+0x48>)
    b0fc:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    b100:	08d2      	lsrs	r2, r2, #3
    b102:	0192      	lsls	r2, r2, #6
    b104:	f042 0202 	orr.w	r2, r2, #2
    b108:	f014 fc7f 	bl	1fa0a <log_1>
		bt_conn_unref(conn);
    b10c:	4620      	mov	r0, r4
    b10e:	f016 feb7 	bl	21e80 <bt_conn_unref>
		return true;
    b112:	2001      	movs	r0, #1
}
    b114:	bd10      	pop	{r4, pc}
    b116:	bf00      	nop
    b118:	00024c24 	.word	0x00024c24
    b11c:	00024c34 	.word	0x00024c34
    b120:	0002803f 	.word	0x0002803f
    b124:	000252c8 	.word	0x000252c8
    b128:	00027ff1 	.word	0x00027ff1

0000b12c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    b12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b12e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b130:	480f      	ldr	r0, [pc, #60]	; (b170 <bt_conn_lookup_state_le+0x44>)
{
    b132:	460e      	mov	r6, r1
    b134:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b136:	f016 fe88 	bl	21e4a <bt_conn_ref>

		if (!conn) {
    b13a:	4604      	mov	r4, r0
    b13c:	b1b0      	cbz	r0, b16c <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    b13e:	7883      	ldrb	r3, [r0, #2]
    b140:	2b01      	cmp	r3, #1
    b142:	d003      	beq.n	b14c <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
    b144:	f016 fe81 	bl	21e4a <bt_conn_ref>
		}

		return conn;
	}

	return NULL;
    b148:	2400      	movs	r4, #0
			continue;
    b14a:	e00f      	b.n	b16c <bt_conn_lookup_state_le+0x40>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    b14c:	b146      	cbz	r6, b160 <bt_conn_lookup_state_le+0x34>
    b14e:	4632      	mov	r2, r6
    b150:	4629      	mov	r1, r5
    b152:	f016 fe5a 	bl	21e0a <bt_conn_is_peer_addr_le>
    b156:	b918      	cbnz	r0, b160 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
    b158:	4620      	mov	r0, r4
    b15a:	f016 fe91 	bl	21e80 <bt_conn_unref>
    b15e:	e7f3      	b.n	b148 <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
    b160:	7b63      	ldrb	r3, [r4, #13]
    b162:	42bb      	cmp	r3, r7
    b164:	d1f8      	bne.n	b158 <bt_conn_lookup_state_le+0x2c>
    b166:	7a23      	ldrb	r3, [r4, #8]
    b168:	42ab      	cmp	r3, r5
    b16a:	d1f5      	bne.n	b158 <bt_conn_lookup_state_le+0x2c>
}
    b16c:	4620      	mov	r0, r4
    b16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b170:	20000e90 	.word	0x20000e90

0000b174 <bt_conn_disconnect>:
			     param->pref_rx_phy, phy_opts);
}
#endif

int bt_conn_disconnect(struct bt_conn *conn, uint8_t reason)
{
    b174:	b538      	push	{r3, r4, r5, lr}
    b176:	7b43      	ldrb	r3, [r0, #13]
    b178:	3b02      	subs	r3, #2
    b17a:	4604      	mov	r4, r0
    b17c:	460d      	mov	r5, r1
    b17e:	2b06      	cmp	r3, #6
    b180:	d805      	bhi.n	b18e <bt_conn_disconnect+0x1a>
    b182:	e8df f003 	tbb	[pc, r3]
    b186:	0408      	.short	0x0408
    b188:	210c0e04 	.word	0x210c0e04
    b18c:	0c          	.byte	0x0c
    b18d:	00          	.byte	0x00
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}
#endif /* !defined(CONFIG_BT_WHITELIST) */

	switch (conn->state) {
    b18e:	f06f 0538 	mvn.w	r5, #56	; 0x38
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
	}
}
    b192:	4628      	mov	r0, r5
    b194:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    b196:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b198:	2100      	movs	r1, #0
    b19a:	f7ff fe97 	bl	aecc <bt_conn_set_state>
		return 0;
    b19e:	2500      	movs	r5, #0
    b1a0:	e7f7      	b.n	b192 <bt_conn_disconnect+0x1e>
    b1a2:	490f      	ldr	r1, [pc, #60]	; (b1e0 <bt_conn_disconnect+0x6c>)
    b1a4:	4b0f      	ldr	r3, [pc, #60]	; (b1e4 <bt_conn_disconnect+0x70>)
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
    b1a6:	4810      	ldr	r0, [pc, #64]	; (b1e8 <bt_conn_disconnect+0x74>)
    b1a8:	1a5b      	subs	r3, r3, r1
    b1aa:	08db      	lsrs	r3, r3, #3
    b1ac:	019b      	lsls	r3, r3, #6
    b1ae:	f043 0102 	orr.w	r1, r3, #2
    b1b2:	f014 fc1d 	bl	1f9f0 <log_0>
		conn->err = reason;
    b1b6:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b1b8:	4620      	mov	r0, r4
    b1ba:	2100      	movs	r1, #0
    b1bc:	f7ff fe86 	bl	aecc <bt_conn_set_state>
}
    b1c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
    b1c4:	f7ff b9a2 	b.w	a50c <bt_le_adv_stop>
	err = bt_hci_disconnect(conn->handle, reason);
    b1c8:	8800      	ldrh	r0, [r0, #0]
    b1ca:	f016 fc8a 	bl	21ae2 <bt_hci_disconnect>
	if (err) {
    b1ce:	4605      	mov	r5, r0
    b1d0:	2800      	cmp	r0, #0
    b1d2:	d1de      	bne.n	b192 <bt_conn_disconnect+0x1e>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    b1d4:	2108      	movs	r1, #8
    b1d6:	4620      	mov	r0, r4
    b1d8:	f7ff fe78 	bl	aecc <bt_conn_set_state>
	return 0;
    b1dc:	e7d9      	b.n	b192 <bt_conn_disconnect+0x1e>
    b1de:	bf00      	nop
    b1e0:	00024c24 	.word	0x00024c24
    b1e4:	00024c34 	.word	0x00024c34
    b1e8:	00028062 	.word	0x00028062

0000b1ec <send_conn_le_param_update>:
{
    b1ec:	b538      	push	{r3, r4, r5, lr}
    b1ee:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    b1f0:	4608      	mov	r0, r1
{
    b1f2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    b1f4:	f016 fcd2 	bl	21b9c <bt_le_conn_params_valid>
    b1f8:	b318      	cbz	r0, b242 <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    b1fa:	4b13      	ldr	r3, [pc, #76]	; (b248 <send_conn_le_param_update+0x5c>)
    b1fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    b200:	0799      	lsls	r1, r3, #30
    b202:	d407      	bmi.n	b214 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    b204:	78e3      	ldrb	r3, [r4, #3]
    b206:	b183      	cbz	r3, b22a <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    b208:	4629      	mov	r1, r5
    b20a:	4620      	mov	r0, r4
}
    b20c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    b210:	f000 bace 	b.w	b7b0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    b214:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    b218:	079a      	lsls	r2, r3, #30
    b21a:	d5f3      	bpl.n	b204 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b21c:	f3bf 8f5b 	dmb	ish
    b220:	6863      	ldr	r3, [r4, #4]
    b222:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    b226:	055b      	lsls	r3, r3, #21
    b228:	d4ec      	bmi.n	b204 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    b22a:	4629      	mov	r1, r5
    b22c:	4620      	mov	r0, r4
    b22e:	f016 fe62 	bl	21ef6 <bt_conn_le_conn_update>
		if (rc == 0) {
    b232:	b928      	cbnz	r0, b240 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
    b234:	88ab      	ldrh	r3, [r5, #4]
    b236:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    b23a:	88eb      	ldrh	r3, [r5, #6]
    b23c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    b240:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    b242:	f06f 0015 	mvn.w	r0, #21
    b246:	e7fb      	b.n	b240 <send_conn_le_param_update+0x54>
    b248:	20000000 	.word	0x20000000

0000b24c <deferred_work>:
{
    b24c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    b24e:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    b252:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    b254:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    b258:	b993      	cbnz	r3, b280 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
    b25a:	4630      	mov	r0, r6
    b25c:	f016 feac 	bl	21fb8 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    b260:	4b1f      	ldr	r3, [pc, #124]	; (b2e0 <deferred_work+0x94>)
    b262:	681d      	ldr	r5, [r3, #0]
    b264:	b925      	cbnz	r5, b270 <deferred_work+0x24>
		bt_conn_unref(conn);
    b266:	4630      	mov	r0, r6
    b268:	f016 fe0a 	bl	21e80 <bt_conn_unref>
}
    b26c:	b002      	add	sp, #8
    b26e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    b270:	686b      	ldr	r3, [r5, #4]
    b272:	b11b      	cbz	r3, b27c <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
    b274:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    b278:	4630      	mov	r0, r6
    b27a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    b27c:	69ad      	ldr	r5, [r5, #24]
    b27e:	e7f1      	b.n	b264 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    b280:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    b284:	2b01      	cmp	r3, #1
    b286:	d1f1      	bne.n	b26c <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b288:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    b28c:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    b290:	e855 3f00 	ldrex	r3, [r5]
    b294:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    b298:	e845 2100 	strex	r1, r2, [r5]
    b29c:	2900      	cmp	r1, #0
    b29e:	d1f7      	bne.n	b290 <deferred_work+0x44>
    b2a0:	f3bf 8f5b 	dmb	ish
    b2a4:	059b      	lsls	r3, r3, #22
    b2a6:	d514      	bpl.n	b2d2 <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    b2a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    b2aa:	9300      	str	r3, [sp, #0]
    b2ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
    b2ae:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    b2b0:	4669      	mov	r1, sp
    b2b2:	4630      	mov	r0, r6
    b2b4:	f7ff ff9a 	bl	b1ec <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b2b8:	f3bf 8f5b 	dmb	ish
    b2bc:	e855 3f00 	ldrex	r3, [r5]
    b2c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b2c4:	e845 3200 	strex	r2, r3, [r5]
    b2c8:	2a00      	cmp	r2, #0
    b2ca:	d1f7      	bne.n	b2bc <deferred_work+0x70>
    b2cc:	f3bf 8f5b 	dmb	ish
    b2d0:	e7cc      	b.n	b26c <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
    b2d2:	4a04      	ldr	r2, [pc, #16]	; (b2e4 <deferred_work+0x98>)
    b2d4:	6810      	ldr	r0, [r2, #0]
    b2d6:	6851      	ldr	r1, [r2, #4]
    b2d8:	466b      	mov	r3, sp
    b2da:	c303      	stmia	r3!, {r0, r1}
    b2dc:	e7e8      	b.n	b2b0 <deferred_work+0x64>
    b2de:	bf00      	nop
    b2e0:	200029c0 	.word	0x200029c0
    b2e4:	00024e50 	.word	0x00024e50

0000b2e8 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    b2e8:	b538      	push	{r3, r4, r5, lr}
    b2ea:	460d      	mov	r5, r1
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
    b2ec:	490c      	ldr	r1, [pc, #48]	; (b320 <bt_conn_create_pdu_timeout+0x38>)
    b2ee:	2800      	cmp	r0, #0
    b2f0:	bf08      	it	eq
    b2f2:	4608      	moveq	r0, r1
    b2f4:	f018 fa4e 	bl	23794 <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
    b2f8:	4604      	mov	r4, r0
    b2fa:	b958      	cbnz	r0, b314 <bt_conn_create_pdu_timeout+0x2c>
    b2fc:	4909      	ldr	r1, [pc, #36]	; (b324 <bt_conn_create_pdu_timeout+0x3c>)
    b2fe:	4b0a      	ldr	r3, [pc, #40]	; (b328 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    b300:	480a      	ldr	r0, [pc, #40]	; (b32c <bt_conn_create_pdu_timeout+0x44>)
    b302:	1ac9      	subs	r1, r1, r3
    b304:	08c9      	lsrs	r1, r1, #3
    b306:	0189      	lsls	r1, r1, #6
    b308:	f041 0102 	orr.w	r1, r1, #2
    b30c:	f014 fb70 	bl	1f9f0 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    b310:	4620      	mov	r0, r4
    b312:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_reserve(buf, reserve);
    b314:	1d29      	adds	r1, r5, #4
    b316:	3008      	adds	r0, #8
    b318:	f018 fa61 	bl	237de <net_buf_simple_reserve>
	return buf;
    b31c:	e7f8      	b.n	b310 <bt_conn_create_pdu_timeout+0x28>
    b31e:	bf00      	nop
    b320:	20000920 	.word	0x20000920
    b324:	00024c34 	.word	0x00024c34
    b328:	00024c24 	.word	0x00024c24
    b32c:	00028089 	.word	0x00028089

0000b330 <bt_conn_create_frag_timeout>:
{
    b330:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    b332:	4801      	ldr	r0, [pc, #4]	; (b338 <bt_conn_create_frag_timeout+0x8>)
    b334:	f7ff bfd8 	b.w	b2e8 <bt_conn_create_pdu_timeout>
    b338:	20000970 	.word	0x20000970

0000b33c <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    b33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b340:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    b342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b34a:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    b34c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    b34e:	f7ff ffef 	bl	b330 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    b352:	7833      	ldrb	r3, [r6, #0]
    b354:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    b356:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    b358:	f04f 0600 	mov.w	r6, #0
    b35c:	d005      	beq.n	b36a <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    b35e:	f010 f8f9 	bl	1b554 <net_buf_unref>
		return NULL;
    b362:	4635      	mov	r5, r6
}
    b364:	4628      	mov	r0, r5
    b366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    b36a:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    b36c:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    b370:	4e0c      	ldr	r6, [pc, #48]	; (b3a4 <create_frag.isra.0+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    b372:	4638      	mov	r0, r7
    b374:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
    b378:	f018 faad 	bl	238d6 <net_buf_simple_tailroom>
    b37c:	4580      	cmp	r8, r0
    b37e:	d20c      	bcs.n	b39a <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
    b380:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	net_buf_add_mem(frag, buf->data, frag_len);
    b384:	f854 1f08 	ldr.w	r1, [r4, #8]!
    b388:	4632      	mov	r2, r6
    b38a:	4638      	mov	r0, r7
    b38c:	f018 fa64 	bl	23858 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    b390:	4631      	mov	r1, r6
    b392:	4620      	mov	r0, r4
    b394:	f018 fa83 	bl	2389e <net_buf_simple_pull>
	return frag;
    b398:	e7e4      	b.n	b364 <create_frag.isra.0+0x28>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    b39a:	4638      	mov	r0, r7
    b39c:	f018 fa9b 	bl	238d6 <net_buf_simple_tailroom>
    b3a0:	b286      	uxth	r6, r0
    b3a2:	e7ef      	b.n	b384 <create_frag.isra.0+0x48>
    b3a4:	20000000 	.word	0x20000000

0000b3a8 <bt_conn_process_tx>:
{
    b3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    b3aa:	7b43      	ldrb	r3, [r0, #13]
{
    b3ac:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    b3ae:	b993      	cbnz	r3, b3d6 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b3b0:	f3bf 8f5b 	dmb	ish
    b3b4:	1d03      	adds	r3, r0, #4
    b3b6:	e853 2f00 	ldrex	r2, [r3]
    b3ba:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    b3be:	e843 1400 	strex	r4, r1, [r3]
    b3c2:	2c00      	cmp	r4, #0
    b3c4:	d1f7      	bne.n	b3b6 <bt_conn_process_tx+0xe>
    b3c6:	f3bf 8f5b 	dmb	ish
    b3ca:	0653      	lsls	r3, r2, #25
    b3cc:	d503      	bpl.n	b3d6 <bt_conn_process_tx+0x2e>
}
    b3ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    b3d2:	f7ff bbeb 	b.w	abac <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    b3d6:	2200      	movs	r2, #0
    b3d8:	2300      	movs	r3, #0
    b3da:	f105 0034 	add.w	r0, r5, #52	; 0x34
    b3de:	f018 f9de 	bl	2379e <net_buf_get>
	BT_ASSERT(buf);
    b3e2:	4604      	mov	r4, r0
    b3e4:	b960      	cbnz	r0, b400 <bt_conn_process_tx+0x58>
    b3e6:	4a20      	ldr	r2, [pc, #128]	; (b468 <bt_conn_process_tx+0xc0>)
    b3e8:	4920      	ldr	r1, [pc, #128]	; (b46c <bt_conn_process_tx+0xc4>)
    b3ea:	4821      	ldr	r0, [pc, #132]	; (b470 <bt_conn_process_tx+0xc8>)
    b3ec:	f240 535f 	movw	r3, #1375	; 0x55f
    b3f0:	f013 fe30 	bl	1f054 <printk>
    b3f4:	4040      	eors	r0, r0
    b3f6:	f380 8811 	msr	BASEPRI, r0
    b3fa:	f04f 0003 	mov.w	r0, #3
    b3fe:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    b400:	4f1c      	ldr	r7, [pc, #112]	; (b474 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    b402:	89a1      	ldrh	r1, [r4, #12]
    b404:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
    b408:	4291      	cmp	r1, r2
    b40a:	d807      	bhi.n	b41c <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    b40c:	2300      	movs	r3, #0
    b40e:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    b410:	4621      	mov	r1, r4
    b412:	4628      	mov	r0, r5
    b414:	f7ff fa9a 	bl	a94c <send_frag>
	if (!send_buf(conn, buf)) {
    b418:	b140      	cbz	r0, b42c <bt_conn_process_tx+0x84>
}
    b41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    b41c:	f105 060d 	add.w	r6, r5, #13
    b420:	4621      	mov	r1, r4
    b422:	4630      	mov	r0, r6
    b424:	f7ff ff8a 	bl	b33c <create_frag.isra.0>
	if (!frag) {
    b428:	4601      	mov	r1, r0
    b42a:	b920      	cbnz	r0, b436 <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
    b42c:	4620      	mov	r0, r4
}
    b42e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    b432:	f010 b88f 	b.w	1b554 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    b436:	2301      	movs	r3, #1
    b438:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    b43a:	4628      	mov	r0, r5
    b43c:	f7ff fa86 	bl	a94c <send_frag>
    b440:	2800      	cmp	r0, #0
    b442:	d0f3      	beq.n	b42c <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
    b444:	89a2      	ldrh	r2, [r4, #12]
    b446:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
    b44a:	429a      	cmp	r2, r3
    b44c:	d802      	bhi.n	b454 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
    b44e:	2300      	movs	r3, #0
    b450:	2203      	movs	r2, #3
    b452:	e7dd      	b.n	b410 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    b454:	4621      	mov	r1, r4
    b456:	4630      	mov	r0, r6
    b458:	f7ff ff70 	bl	b33c <create_frag.isra.0>
		if (!frag) {
    b45c:	4601      	mov	r1, r0
    b45e:	2800      	cmp	r0, #0
    b460:	d0e4      	beq.n	b42c <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    b462:	2301      	movs	r3, #1
    b464:	461a      	mov	r2, r3
    b466:	e7e8      	b.n	b43a <bt_conn_process_tx+0x92>
    b468:	000280b2 	.word	0x000280b2
    b46c:	00027503 	.word	0x00027503
    b470:	000277c1 	.word	0x000277c1
    b474:	20000000 	.word	0x20000000

0000b478 <bt_conn_index>:
		__ASSERT(index < CONFIG_BT_MAX_SCO_CONN,
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    b478:	4b03      	ldr	r3, [pc, #12]	; (b488 <bt_conn_index+0x10>)
    b47a:	1ac0      	subs	r0, r0, r3
    b47c:	4b03      	ldr	r3, [pc, #12]	; (b48c <bt_conn_index+0x14>)
    b47e:	1180      	asrs	r0, r0, #6
    b480:	4358      	muls	r0, r3
		__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
		break;
	}

	return index;
}
    b482:	b2c0      	uxtb	r0, r0
    b484:	4770      	bx	lr
    b486:	bf00      	nop
    b488:	20000e90 	.word	0x20000e90
    b48c:	aaaaaaab 	.word	0xaaaaaaab

0000b490 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    b490:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    b492:	490b      	ldr	r1, [pc, #44]	; (b4c0 <bt_conn_init+0x30>)
    b494:	480b      	ldr	r0, [pc, #44]	; (b4c4 <bt_conn_init+0x34>)
    b496:	f018 fe93 	bl	241c0 <k_queue_append>
    b49a:	490b      	ldr	r1, [pc, #44]	; (b4c8 <bt_conn_init+0x38>)
    b49c:	4809      	ldr	r0, [pc, #36]	; (b4c4 <bt_conn_init+0x34>)
    b49e:	f018 fe8f 	bl	241c0 <k_queue_append>
    b4a2:	490a      	ldr	r1, [pc, #40]	; (b4cc <bt_conn_init+0x3c>)
    b4a4:	4807      	ldr	r0, [pc, #28]	; (b4c4 <bt_conn_init+0x34>)
    b4a6:	f018 fe8b 	bl	241c0 <k_queue_append>
	}

	bt_att_init();
    b4aa:	f017 f8e0 	bl	2266e <bt_att_init>

	err = bt_smp_init();
    b4ae:	f004 f8f7 	bl	f6a0 <bt_smp_init>
	if (err) {
    b4b2:	4604      	mov	r4, r0
    b4b4:	b908      	cbnz	r0, b4ba <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    b4b6:	f016 fdeb 	bl	22090 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    b4ba:	4620      	mov	r0, r4
    b4bc:	bd10      	pop	{r4, pc}
    b4be:	bf00      	nop
    b4c0:	200029c4 	.word	0x200029c4
    b4c4:	200008d8 	.word	0x200008d8
    b4c8:	200029d4 	.word	0x200029d4
    b4cc:	200029e4 	.word	0x200029e4

0000b4d0 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    b4d0:	4a0b      	ldr	r2, [pc, #44]	; (b500 <l2cap_accept+0x30>)
{
    b4d2:	b508      	push	{r3, lr}
    b4d4:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    b4d6:	6810      	ldr	r0, [r2, #0]
    b4d8:	b918      	cbnz	r0, b4e2 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    b4da:	4b0a      	ldr	r3, [pc, #40]	; (b504 <l2cap_accept+0x34>)
    b4dc:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    b4de:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    b4e0:	bd08      	pop	{r3, pc}
    b4e2:	4909      	ldr	r1, [pc, #36]	; (b508 <l2cap_accept+0x38>)
    b4e4:	4a09      	ldr	r2, [pc, #36]	; (b50c <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    b4e6:	480a      	ldr	r0, [pc, #40]	; (b510 <l2cap_accept+0x40>)
    b4e8:	1a52      	subs	r2, r2, r1
    b4ea:	08d2      	lsrs	r2, r2, #3
    b4ec:	0192      	lsls	r2, r2, #6
    b4ee:	f042 0201 	orr.w	r2, r2, #1
    b4f2:	4619      	mov	r1, r3
    b4f4:	f014 fa89 	bl	1fa0a <log_1>
	return -ENOMEM;
    b4f8:	f06f 000b 	mvn.w	r0, #11
    b4fc:	e7f0      	b.n	b4e0 <l2cap_accept+0x10>
    b4fe:	bf00      	nop
    b500:	20000f50 	.word	0x20000f50
    b504:	0002530c 	.word	0x0002530c
    b508:	00024c24 	.word	0x00024c24
    b50c:	00024cfc 	.word	0x00024cfc
    b510:	0002813f 	.word	0x0002813f

0000b514 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    b514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b516:	4605      	mov	r5, r0
    b518:	460f      	mov	r7, r1
    b51a:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    b51c:	2300      	movs	r3, #0
    b51e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b522:	2104      	movs	r1, #4
    b524:	2000      	movs	r0, #0
    b526:	f7ff fedf 	bl	b2e8 <bt_conn_create_pdu_timeout>
	if (!buf) {
    b52a:	4604      	mov	r4, r0
    b52c:	b960      	cbnz	r0, b548 <l2cap_create_le_sig_pdu.isra.0+0x34>
    b52e:	4a0a      	ldr	r2, [pc, #40]	; (b558 <l2cap_create_le_sig_pdu.isra.0+0x44>)
    b530:	4b0a      	ldr	r3, [pc, #40]	; (b55c <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    b532:	480b      	ldr	r0, [pc, #44]	; (b560 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
    b534:	1ad2      	subs	r2, r2, r3
    b536:	08d2      	lsrs	r2, r2, #3
    b538:	0192      	lsls	r2, r2, #6
    b53a:	f042 0201 	orr.w	r2, r2, #1
    b53e:	4629      	mov	r1, r5
    b540:	f014 fa63 	bl	1fa0a <log_1>
}
    b544:	4620      	mov	r0, r4
    b546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
    b548:	2104      	movs	r1, #4
    b54a:	3008      	adds	r0, #8
    b54c:	f018 f97e 	bl	2384c <net_buf_simple_add>
	hdr->code = code;
    b550:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    b552:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    b554:	8046      	strh	r6, [r0, #2]
	return buf;
    b556:	e7f5      	b.n	b544 <l2cap_create_le_sig_pdu.isra.0+0x30>
    b558:	00024cfc 	.word	0x00024cfc
    b55c:	00024c24 	.word	0x00024c24
    b560:	00028166 	.word	0x00028166

0000b564 <l2cap_rtx_timeout>:
{
    b564:	b538      	push	{r3, r4, r5, lr}
    b566:	4a0b      	ldr	r2, [pc, #44]	; (b594 <l2cap_rtx_timeout+0x30>)
    b568:	4b0b      	ldr	r3, [pc, #44]	; (b598 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
    b56a:	4604      	mov	r4, r0
    b56c:	1ad2      	subs	r2, r2, r3
    b56e:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    b572:	480a      	ldr	r0, [pc, #40]	; (b59c <l2cap_rtx_timeout+0x38>)
    b574:	08d2      	lsrs	r2, r2, #3
    b576:	0192      	lsls	r2, r2, #6
    b578:	4621      	mov	r1, r4
    b57a:	f042 0201 	orr.w	r2, r2, #1
    b57e:	f014 fa44 	bl	1fa0a <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    b582:	4628      	mov	r0, r5
    b584:	4621      	mov	r1, r4
    b586:	f016 fce0 	bl	21f4a <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    b58a:	4620      	mov	r0, r4
}
    b58c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    b590:	f016 bcfd 	b.w	21f8e <bt_l2cap_chan_del>
    b594:	00024cfc 	.word	0x00024cfc
    b598:	00024c24 	.word	0x00024c24
    b59c:	0002818e 	.word	0x0002818e

0000b5a0 <bt_l2cap_connected>:
{
    b5a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b5a4:	4e2a      	ldr	r6, [pc, #168]	; (b650 <bt_l2cap_connected+0xb0>)
    b5a6:	4f2b      	ldr	r7, [pc, #172]	; (b654 <bt_l2cap_connected+0xb4>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    b5a8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; b658 <bt_l2cap_connected+0xb8>
{
    b5ac:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b5ae:	42be      	cmp	r6, r7
    b5b0:	d302      	bcc.n	b5b8 <bt_l2cap_connected+0x18>
}
    b5b2:	b003      	add	sp, #12
    b5b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    b5b8:	6873      	ldr	r3, [r6, #4]
    b5ba:	a901      	add	r1, sp, #4
    b5bc:	4628      	mov	r0, r5
    b5be:	4798      	blx	r3
    b5c0:	2800      	cmp	r0, #0
    b5c2:	db40      	blt.n	b646 <bt_l2cap_connected+0xa6>
		ch = BT_L2CAP_LE_CHAN(chan);
    b5c4:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    b5c6:	8833      	ldrh	r3, [r6, #0]
    b5c8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    b5cc:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    b5d0:	2230      	movs	r2, #48	; 0x30
    b5d2:	2100      	movs	r1, #0
    b5d4:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    b5d8:	f8d6 9008 	ldr.w	r9, [r6, #8]
    b5dc:	f016 f88e 	bl	216fc <memset>
    b5e0:	f8c4 8014 	str.w	r8, [r4, #20]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b5e4:	f104 0340 	add.w	r3, r4, #64	; 0x40
    b5e8:	2200      	movs	r2, #0
    b5ea:	f3bf 8f5b 	dmb	ish
    b5ee:	e853 1f00 	ldrex	r1, [r3]
    b5f2:	e843 2000 	strex	r0, r2, [r3]
    b5f6:	2800      	cmp	r0, #0
    b5f8:	d1f9      	bne.n	b5ee <bt_l2cap_connected+0x4e>
    b5fa:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    b5fe:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    b600:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    b602:	f104 0308 	add.w	r3, r4, #8
    b606:	bb02      	cbnz	r2, b64a <bt_l2cap_connected+0xaa>
	list->head = node;
    b608:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
		if (chan->ops->connected) {
    b60c:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    b60e:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
    b610:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    b612:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
    b616:	681b      	ldr	r3, [r3, #0]
    b618:	b103      	cbz	r3, b61c <bt_l2cap_connected+0x7c>
			chan->ops->connected(chan);
    b61a:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b61c:	9b01      	ldr	r3, [sp, #4]
    b61e:	f3bf 8f5b 	dmb	ish
    b622:	3340      	adds	r3, #64	; 0x40
    b624:	e853 2f00 	ldrex	r2, [r3]
    b628:	f042 0201 	orr.w	r2, r2, #1
    b62c:	e843 2100 	strex	r1, r2, [r3]
    b630:	2900      	cmp	r1, #0
    b632:	d1f7      	bne.n	b624 <bt_l2cap_connected+0x84>
    b634:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    b638:	9801      	ldr	r0, [sp, #4]
    b63a:	6843      	ldr	r3, [r0, #4]
    b63c:	699b      	ldr	r3, [r3, #24]
    b63e:	b113      	cbz	r3, b646 <bt_l2cap_connected+0xa6>
			chan->ops->status(chan, chan->status);
    b640:	f100 0140 	add.w	r1, r0, #64	; 0x40
    b644:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b646:	360c      	adds	r6, #12
    b648:	e7b1      	b.n	b5ae <bt_l2cap_connected+0xe>
	parent->next = child;
    b64a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    b64c:	652b      	str	r3, [r5, #80]	; 0x50
}
    b64e:	e7dd      	b.n	b60c <bt_l2cap_connected+0x6c>
    b650:	00024bd4 	.word	0x00024bd4
    b654:	00024bf8 	.word	0x00024bf8
    b658:	0000b565 	.word	0x0000b565

0000b65c <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    b65c:	898b      	ldrh	r3, [r1, #12]
    b65e:	2b03      	cmp	r3, #3
{
    b660:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b662:	4606      	mov	r6, r0
    b664:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    b666:	d80a      	bhi.n	b67e <l2cap_recv+0x22>
    b668:	492e      	ldr	r1, [pc, #184]	; (b724 <l2cap_recv+0xc8>)
    b66a:	4b2f      	ldr	r3, [pc, #188]	; (b728 <l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP signaling PDU");
    b66c:	482f      	ldr	r0, [pc, #188]	; (b72c <l2cap_recv+0xd0>)
    b66e:	1ac9      	subs	r1, r1, r3
    b670:	08c9      	lsrs	r1, r1, #3
    b672:	0189      	lsls	r1, r1, #6
    b674:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    b678:	f014 f9ba 	bl	1f9f0 <log_0>
		return 0;
    b67c:	e013      	b.n	b6a6 <l2cap_recv+0x4a>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    b67e:	2104      	movs	r1, #4
    b680:	f105 0008 	add.w	r0, r5, #8
    b684:	f018 f913 	bl	238ae <net_buf_simple_pull_mem>
	if (buf->len != len) {
    b688:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    b68a:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    b68c:	428a      	cmp	r2, r1
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    b68e:	4604      	mov	r4, r0
	if (buf->len != len) {
    b690:	d00c      	beq.n	b6ac <l2cap_recv+0x50>
    b692:	4825      	ldr	r0, [pc, #148]	; (b728 <l2cap_recv+0xcc>)
    b694:	4b23      	ldr	r3, [pc, #140]	; (b724 <l2cap_recv+0xc8>)
    b696:	1a1b      	subs	r3, r3, r0
    b698:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    b69a:	019b      	lsls	r3, r3, #6
    b69c:	4824      	ldr	r0, [pc, #144]	; (b730 <l2cap_recv+0xd4>)
    b69e:	f043 0301 	orr.w	r3, r3, #1
    b6a2:	f014 f9c6 	bl	1fa32 <log_2>
}
    b6a6:	2000      	movs	r0, #0
    b6a8:	b002      	add	sp, #8
    b6aa:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    b6ac:	7843      	ldrb	r3, [r0, #1]
    b6ae:	b943      	cbnz	r3, b6c2 <l2cap_recv+0x66>
    b6b0:	491c      	ldr	r1, [pc, #112]	; (b724 <l2cap_recv+0xc8>)
    b6b2:	4b1d      	ldr	r3, [pc, #116]	; (b728 <l2cap_recv+0xcc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    b6b4:	481f      	ldr	r0, [pc, #124]	; (b734 <l2cap_recv+0xd8>)
    b6b6:	1ac9      	subs	r1, r1, r3
    b6b8:	08c9      	lsrs	r1, r1, #3
    b6ba:	0189      	lsls	r1, r1, #6
    b6bc:	f041 0101 	orr.w	r1, r1, #1
    b6c0:	e7da      	b.n	b678 <l2cap_recv+0x1c>
	switch (hdr->code) {
    b6c2:	7801      	ldrb	r1, [r0, #0]
    b6c4:	2901      	cmp	r1, #1
    b6c6:	d0ee      	beq.n	b6a6 <l2cap_recv+0x4a>
    b6c8:	2913      	cmp	r1, #19
    b6ca:	d10a      	bne.n	b6e2 <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    b6cc:	2a01      	cmp	r2, #1
    b6ce:	d8ea      	bhi.n	b6a6 <l2cap_recv+0x4a>
    b6d0:	4914      	ldr	r1, [pc, #80]	; (b724 <l2cap_recv+0xc8>)
    b6d2:	4b15      	ldr	r3, [pc, #84]	; (b728 <l2cap_recv+0xcc>)
		BT_ERR("Too small LE conn param rsp");
    b6d4:	4818      	ldr	r0, [pc, #96]	; (b738 <l2cap_recv+0xdc>)
    b6d6:	1ac9      	subs	r1, r1, r3
    b6d8:	08c9      	lsrs	r1, r1, #3
    b6da:	0189      	lsls	r1, r1, #6
    b6dc:	f041 0101 	orr.w	r1, r1, #1
    b6e0:	e7ca      	b.n	b678 <l2cap_recv+0x1c>
    b6e2:	4b11      	ldr	r3, [pc, #68]	; (b728 <l2cap_recv+0xcc>)
    b6e4:	4a0f      	ldr	r2, [pc, #60]	; (b724 <l2cap_recv+0xc8>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    b6e6:	4815      	ldr	r0, [pc, #84]	; (b73c <l2cap_recv+0xe0>)
    b6e8:	1ad2      	subs	r2, r2, r3
    b6ea:	08d2      	lsrs	r2, r2, #3
    b6ec:	0192      	lsls	r2, r2, #6
    b6ee:	f042 0202 	orr.w	r2, r2, #2
    b6f2:	f014 f98a 	bl	1fa0a <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    b6f6:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    b6f8:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    b6fa:	2202      	movs	r2, #2
    b6fc:	2001      	movs	r0, #1
    b6fe:	f7ff ff09 	bl	b514 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    b702:	4604      	mov	r4, r0
    b704:	2800      	cmp	r0, #0
    b706:	d0ce      	beq.n	b6a6 <l2cap_recv+0x4a>
	rej = net_buf_add(buf, sizeof(*rej));
    b708:	2102      	movs	r1, #2
    b70a:	3008      	adds	r0, #8
    b70c:	f018 f89e 	bl	2384c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    b710:	2300      	movs	r3, #0
    b712:	7003      	strb	r3, [r0, #0]
    b714:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    b716:	4622      	mov	r2, r4
    b718:	9300      	str	r3, [sp, #0]
    b71a:	2105      	movs	r1, #5
    b71c:	4628      	mov	r0, r5
    b71e:	f016 fc7e 	bl	2201e <bt_l2cap_send_cb>
}
    b722:	e7c0      	b.n	b6a6 <l2cap_recv+0x4a>
    b724:	00024cfc 	.word	0x00024cfc
    b728:	00024c24 	.word	0x00024c24
    b72c:	0002819e 	.word	0x0002819e
    b730:	000281bc 	.word	0x000281bc
    b734:	000281dd 	.word	0x000281dd
    b738:	000281fe 	.word	0x000281fe
    b73c:	0002821a 	.word	0x0002821a

0000b740 <bt_l2cap_recv>:
{
    b740:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    b742:	898b      	ldrh	r3, [r1, #12]
    b744:	2b03      	cmp	r3, #3
{
    b746:	4605      	mov	r5, r0
    b748:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    b74a:	d80e      	bhi.n	b76a <bt_l2cap_recv+0x2a>
    b74c:	4914      	ldr	r1, [pc, #80]	; (b7a0 <bt_l2cap_recv+0x60>)
    b74e:	4b15      	ldr	r3, [pc, #84]	; (b7a4 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    b750:	4815      	ldr	r0, [pc, #84]	; (b7a8 <bt_l2cap_recv+0x68>)
    b752:	1ac9      	subs	r1, r1, r3
    b754:	08c9      	lsrs	r1, r1, #3
    b756:	0189      	lsls	r1, r1, #6
    b758:	f041 0101 	orr.w	r1, r1, #1
    b75c:	f014 f948 	bl	1f9f0 <log_0>
	net_buf_unref(buf);
    b760:	4620      	mov	r0, r4
}
    b762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    b766:	f00f bef5 	b.w	1b554 <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    b76a:	2104      	movs	r1, #4
    b76c:	f104 0008 	add.w	r0, r4, #8
    b770:	f018 f89d 	bl	238ae <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    b774:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    b776:	4628      	mov	r0, r5
    b778:	f016 fc7a 	bl	22070 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b77c:	b950      	cbnz	r0, b794 <bt_l2cap_recv+0x54>
    b77e:	4b09      	ldr	r3, [pc, #36]	; (b7a4 <bt_l2cap_recv+0x64>)
    b780:	4a07      	ldr	r2, [pc, #28]	; (b7a0 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    b782:	480a      	ldr	r0, [pc, #40]	; (b7ac <bt_l2cap_recv+0x6c>)
    b784:	1ad2      	subs	r2, r2, r3
    b786:	08d2      	lsrs	r2, r2, #3
    b788:	0192      	lsls	r2, r2, #6
    b78a:	f042 0202 	orr.w	r2, r2, #2
    b78e:	f014 f93c 	bl	1fa0a <log_1>
		net_buf_unref(buf);
    b792:	e7e5      	b.n	b760 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    b794:	6843      	ldr	r3, [r0, #4]
    b796:	4621      	mov	r1, r4
    b798:	691b      	ldr	r3, [r3, #16]
    b79a:	4798      	blx	r3
    b79c:	e7e0      	b.n	b760 <bt_l2cap_recv+0x20>
    b79e:	bf00      	nop
    b7a0:	00024cfc 	.word	0x00024cfc
    b7a4:	00024c24 	.word	0x00024c24
    b7a8:	00028238 	.word	0x00028238
    b7ac:	00028255 	.word	0x00028255

0000b7b0 <bt_l2cap_update_conn_param>:
{
    b7b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    b7b2:	4b15      	ldr	r3, [pc, #84]	; (b808 <bt_l2cap_update_conn_param+0x58>)
    b7b4:	781a      	ldrb	r2, [r3, #0]
    b7b6:	3201      	adds	r2, #1
	if (!ident) {
    b7b8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    b7bc:	bf08      	it	eq
    b7be:	2201      	moveq	r2, #1
    b7c0:	701a      	strb	r2, [r3, #0]
{
    b7c2:	4605      	mov	r5, r0
    b7c4:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    b7c6:	2208      	movs	r2, #8
    b7c8:	7819      	ldrb	r1, [r3, #0]
    b7ca:	2012      	movs	r0, #18
    b7cc:	f7ff fea2 	bl	b514 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    b7d0:	4606      	mov	r6, r0
    b7d2:	b1b0      	cbz	r0, b802 <bt_l2cap_update_conn_param+0x52>
	req = net_buf_add(buf, sizeof(*req));
    b7d4:	2108      	movs	r1, #8
    b7d6:	4408      	add	r0, r1
    b7d8:	f018 f838 	bl	2384c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    b7dc:	8822      	ldrh	r2, [r4, #0]
    b7de:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    b7e0:	8862      	ldrh	r2, [r4, #2]
    b7e2:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    b7e4:	88a2      	ldrh	r2, [r4, #4]
    b7e6:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    b7e8:	88e2      	ldrh	r2, [r4, #6]
    b7ea:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    b7ec:	2400      	movs	r4, #0
    b7ee:	9400      	str	r4, [sp, #0]
    b7f0:	4623      	mov	r3, r4
    b7f2:	4632      	mov	r2, r6
    b7f4:	2105      	movs	r1, #5
    b7f6:	4628      	mov	r0, r5
    b7f8:	f016 fc11 	bl	2201e <bt_l2cap_send_cb>
	return 0;
    b7fc:	4620      	mov	r0, r4
}
    b7fe:	b002      	add	sp, #8
    b800:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    b802:	f06f 000b 	mvn.w	r0, #11
    b806:	e7fa      	b.n	b7fe <bt_l2cap_update_conn_param+0x4e>
    b808:	2000682b 	.word	0x2000682b

0000b80c <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    b80c:	4b02      	ldr	r3, [pc, #8]	; (b818 <att_cfm_sent+0xc>)
    b80e:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    b812:	f016 bc6b 	b.w	220ec <att_sent>
    b816:	bf00      	nop
    b818:	000223ad 	.word	0x000223ad

0000b81c <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    b81c:	4b02      	ldr	r3, [pc, #8]	; (b828 <att_rsp_sent+0xc>)
    b81e:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    b822:	f016 bc63 	b.w	220ec <att_sent>
    b826:	bf00      	nop
    b828:	00022391 	.word	0x00022391

0000b82c <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    b82c:	4b02      	ldr	r3, [pc, #8]	; (b838 <att_req_sent+0xc>)
    b82e:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    b832:	f016 bc5b 	b.w	220ec <att_sent>
    b836:	bf00      	nop
    b838:	0000bb8d 	.word	0x0000bb8d

0000b83c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    b83c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    b83e:	3808      	subs	r0, #8
    b840:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    b842:	a901      	add	r1, sp, #4
    b844:	4802      	ldr	r0, [pc, #8]	; (b850 <bt_att_released+0x14>)
    b846:	f012 fa61 	bl	1dd0c <k_mem_slab_free>
}
    b84a:	b003      	add	sp, #12
    b84c:	f85d fb04 	ldr.w	pc, [sp], #4
    b850:	200007dc 	.word	0x200007dc

0000b854 <read_group_cb>:
{
    b854:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    b858:	4606      	mov	r6, r0
    b85a:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    b85c:	f04f 0800 	mov.w	r8, #0
    b860:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b864:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    b866:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    b868:	f88d 8008 	strb.w	r8, [sp, #8]
    b86c:	a902      	add	r1, sp, #8
{
    b86e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    b870:	f8ad 300a 	strh.w	r3, [sp, #10]
    b874:	f015 fff3 	bl	2185e <bt_uuid_cmp>
    b878:	b1a0      	cbz	r0, b8a4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b87a:	f642 0301 	movw	r3, #10241	; 0x2801
    b87e:	6830      	ldr	r0, [r6, #0]
    b880:	f88d 800c 	strb.w	r8, [sp, #12]
    b884:	a903      	add	r1, sp, #12
    b886:	f8ad 300e 	strh.w	r3, [sp, #14]
    b88a:	f015 ffe8 	bl	2185e <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    b88e:	b148      	cbz	r0, b8a4 <read_group_cb+0x50>
		if (data->group &&
    b890:	6923      	ldr	r3, [r4, #16]
    b892:	b11b      	cbz	r3, b89c <read_group_cb+0x48>
    b894:	885a      	ldrh	r2, [r3, #2]
    b896:	42aa      	cmp	r2, r5
    b898:	d200      	bcs.n	b89c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    b89a:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    b89c:	2001      	movs	r0, #1
}
    b89e:	b004      	add	sp, #16
    b8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    b8a4:	6861      	ldr	r1, [r4, #4]
    b8a6:	6830      	ldr	r0, [r6, #0]
    b8a8:	f015 ffd9 	bl	2185e <bt_uuid_cmp>
    b8ac:	b110      	cbz	r0, b8b4 <read_group_cb+0x60>
		data->group = NULL;
    b8ae:	2300      	movs	r3, #0
    b8b0:	6123      	str	r3, [r4, #16]
    b8b2:	e7f3      	b.n	b89c <read_group_cb+0x48>
	if (data->rsp->len &&
    b8b4:	68e3      	ldr	r3, [r4, #12]
    b8b6:	68a0      	ldr	r0, [r4, #8]
    b8b8:	781a      	ldrb	r2, [r3, #0]
    b8ba:	b13a      	cbz	r2, b8cc <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    b8bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    b8c0:	8981      	ldrh	r1, [r0, #12]
    b8c2:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    b8c4:	4293      	cmp	r3, r2
    b8c6:	da01      	bge.n	b8cc <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    b8c8:	2000      	movs	r0, #0
    b8ca:	e7e8      	b.n	b89e <read_group_cb+0x4a>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    b8cc:	2104      	movs	r1, #4
    b8ce:	3008      	adds	r0, #8
    b8d0:	f017 ffbc 	bl	2384c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    b8d4:	4b09      	ldr	r3, [pc, #36]	; (b8fc <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    b8d6:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    b8d8:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    b8da:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    b8dc:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    b8de:	4631      	mov	r1, r6
    b8e0:	9300      	str	r3, [sp, #0]
    b8e2:	9401      	str	r4, [sp, #4]
    b8e4:	2300      	movs	r3, #0
    b8e6:	4638      	mov	r0, r7
    b8e8:	f016 fc69 	bl	221be <att_chan_read>
	if (read < 0) {
    b8ec:	2800      	cmp	r0, #0
    b8ee:	dbeb      	blt.n	b8c8 <read_group_cb+0x74>
	if (!data->group) {
    b8f0:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    b8f2:	3800      	subs	r0, #0
    b8f4:	bf18      	it	ne
    b8f6:	2001      	movne	r0, #1
    b8f8:	e7d1      	b.n	b89e <read_group_cb+0x4a>
    b8fa:	bf00      	nop
    b8fc:	0002236d 	.word	0x0002236d

0000b900 <read_type_cb>:
{
    b900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    b904:	f8d2 8000 	ldr.w	r8, [r2]
{
    b908:	4606      	mov	r6, r0
    b90a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    b90c:	6800      	ldr	r0, [r0, #0]
    b90e:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    b910:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    b914:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    b916:	f015 ffa2 	bl	2185e <bt_uuid_cmp>
    b91a:	4607      	mov	r7, r0
    b91c:	2800      	cmp	r0, #0
    b91e:	d13e      	bne.n	b99e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    b920:	4628      	mov	r0, r5
    b922:	2215      	movs	r2, #21
    b924:	4631      	mov	r1, r6
    b926:	f017 fa4b 	bl	22dc0 <bt_gatt_check_perm>
    b92a:	4605      	mov	r5, r0
    b92c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    b92e:	b148      	cbz	r0, b944 <read_type_cb+0x44>
		if (data->rsp->len) {
    b930:	68e3      	ldr	r3, [r4, #12]
    b932:	781b      	ldrb	r3, [r3, #0]
    b934:	b923      	cbnz	r3, b940 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    b936:	2500      	movs	r5, #0
}
    b938:	4628      	mov	r0, r5
    b93a:	b003      	add	sp, #12
    b93c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    b940:	7527      	strb	r7, [r4, #20]
    b942:	e7f8      	b.n	b936 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    b944:	68a0      	ldr	r0, [r4, #8]
    b946:	f017 ff5f 	bl	23808 <net_buf_frag_last>
    b94a:	2102      	movs	r1, #2
    b94c:	3008      	adds	r0, #8
    b94e:	f017 ff7d 	bl	2384c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    b952:	4b14      	ldr	r3, [pc, #80]	; (b9a4 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    b954:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    b956:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    b958:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    b95c:	4631      	mov	r1, r6
    b95e:	9300      	str	r3, [sp, #0]
    b960:	9401      	str	r4, [sp, #4]
    b962:	462b      	mov	r3, r5
    b964:	4640      	mov	r0, r8
    b966:	f016 fc2a 	bl	221be <att_chan_read>
	if (read < 0) {
    b96a:	2800      	cmp	r0, #0
    b96c:	da07      	bge.n	b97e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    b96e:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    b972:	bf26      	itte	cs
    b974:	4240      	negcs	r0, r0
    b976:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    b978:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    b97a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    b97c:	e7dc      	b.n	b938 <read_type_cb+0x38>
	if (!data->item) {
    b97e:	6923      	ldr	r3, [r4, #16]
    b980:	2b00      	cmp	r3, #0
    b982:	d0d8      	beq.n	b936 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    b984:	68a0      	ldr	r0, [r4, #8]
    b986:	f016 fba9 	bl	220dc <net_buf_frags_len>
    b98a:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    b98e:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    b990:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    b992:	7818      	ldrb	r0, [r3, #0]
    b994:	4285      	cmp	r5, r0
    b996:	bf94      	ite	ls
    b998:	2500      	movls	r5, #0
    b99a:	2501      	movhi	r5, #1
    b99c:	e7cc      	b.n	b938 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    b99e:	2501      	movs	r5, #1
    b9a0:	e7ca      	b.n	b938 <read_type_cb+0x38>
    b9a2:	bf00      	nop
    b9a4:	000220f9 	.word	0x000220f9

0000b9a8 <find_type_cb>:
{
    b9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    b9ac:	f8d2 9000 	ldr.w	r9, [r2]
{
    b9b0:	b091      	sub	sp, #68	; 0x44
    b9b2:	4607      	mov	r7, r0
    b9b4:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b9b6:	2400      	movs	r4, #0
    b9b8:	f642 0301 	movw	r3, #10241	; 0x2801
    b9bc:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    b9be:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b9c2:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
    b9c6:	a90b      	add	r1, sp, #44	; 0x2c
{
    b9c8:	4615      	mov	r5, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b9ca:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    b9ce:	f015 ff46 	bl	2185e <bt_uuid_cmp>
    b9d2:	2800      	cmp	r0, #0
    b9d4:	d06a      	beq.n	baac <find_type_cb+0x104>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    b9d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b9da:	6838      	ldr	r0, [r7, #0]
    b9dc:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
    b9e0:	a90b      	add	r1, sp, #44	; 0x2c
    b9e2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    b9e6:	f015 ff3a 	bl	2185e <bt_uuid_cmp>
    b9ea:	4604      	mov	r4, r0
    b9ec:	b148      	cbz	r0, ba02 <find_type_cb+0x5a>
		if (data->group &&
    b9ee:	68ab      	ldr	r3, [r5, #8]
    b9f0:	b11b      	cbz	r3, b9fa <find_type_cb+0x52>
    b9f2:	885a      	ldrh	r2, [r3, #2]
    b9f4:	42b2      	cmp	r2, r6
    b9f6:	d200      	bcs.n	b9fa <find_type_cb+0x52>
			data->group->end_handle = sys_cpu_to_le16(handle);
    b9f8:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    b9fa:	2001      	movs	r0, #1
}
    b9fc:	b011      	add	sp, #68	; 0x44
    b9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    ba02:	6869      	ldr	r1, [r5, #4]
    ba04:	4608      	mov	r0, r1
    ba06:	f016 fb69 	bl	220dc <net_buf_frags_len>
    ba0a:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    ba0e:	1a1b      	subs	r3, r3, r0
    ba10:	2b03      	cmp	r3, #3
    ba12:	d922      	bls.n	ba5a <find_type_cb+0xb2>
	frag = net_buf_frag_last(data->buf);
    ba14:	4608      	mov	r0, r1
    ba16:	f017 fef7 	bl	23808 <net_buf_frag_last>
    ba1a:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    ba1c:	6868      	ldr	r0, [r5, #4]
    ba1e:	f016 fb5d 	bl	220dc <net_buf_frags_len>
    ba22:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
    ba26:	f104 0b08 	add.w	fp, r4, #8
    ba2a:	ebaa 0a00 	sub.w	sl, sl, r0
    ba2e:	4658      	mov	r0, fp
    ba30:	f017 ff51 	bl	238d6 <net_buf_simple_tailroom>
    ba34:	4582      	cmp	sl, r0
    ba36:	d212      	bcs.n	ba5e <find_type_cb+0xb6>
    ba38:	6868      	ldr	r0, [r5, #4]
    ba3a:	f016 fb4f 	bl	220dc <net_buf_frags_len>
    ba3e:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    ba42:	1a18      	subs	r0, r3, r0
	if (!len) {
    ba44:	b998      	cbnz	r0, ba6e <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    ba46:	686b      	ldr	r3, [r5, #4]
    ba48:	7998      	ldrb	r0, [r3, #6]
    ba4a:	f00f fcc7 	bl	1b3dc <net_buf_pool_get>
    ba4e:	2200      	movs	r2, #0
    ba50:	2300      	movs	r3, #0
    ba52:	f017 fe9f 	bl	23794 <net_buf_alloc_fixed>
		if (!frag) {
    ba56:	4604      	mov	r4, r0
    ba58:	b928      	cbnz	r0, ba66 <find_type_cb+0xbe>
		return BT_GATT_ITER_STOP;
    ba5a:	4620      	mov	r0, r4
    ba5c:	e7ce      	b.n	b9fc <find_type_cb+0x54>
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    ba5e:	4658      	mov	r0, fp
    ba60:	f017 ff39 	bl	238d6 <net_buf_simple_tailroom>
    ba64:	e7ee      	b.n	ba44 <find_type_cb+0x9c>
		net_buf_frag_add(data->buf, frag);
    ba66:	4601      	mov	r1, r0
    ba68:	6868      	ldr	r0, [r5, #4]
    ba6a:	f017 fede 	bl	2382a <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    ba6e:	2300      	movs	r3, #0
    ba70:	9300      	str	r3, [sp, #0]
    ba72:	f8d7 9004 	ldr.w	r9, [r7, #4]
    ba76:	4639      	mov	r1, r7
    ba78:	2310      	movs	r3, #16
    ba7a:	aa02      	add	r2, sp, #8
    ba7c:	4640      	mov	r0, r8
    ba7e:	47c8      	blx	r9
	if (read < 0) {
    ba80:	1e07      	subs	r7, r0, #0
    ba82:	db13      	blt.n	baac <find_type_cb+0x104>
	if (read != data->value_len) {
    ba84:	7c2a      	ldrb	r2, [r5, #16]
    ba86:	68e8      	ldr	r0, [r5, #12]
    ba88:	42ba      	cmp	r2, r7
    ba8a:	d033      	beq.n	baf4 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    ba8c:	4601      	mov	r1, r0
    ba8e:	a80b      	add	r0, sp, #44	; 0x2c
    ba90:	f015 ff0f 	bl	218b2 <bt_uuid_create>
    ba94:	b968      	cbnz	r0, bab2 <find_type_cb+0x10a>
    ba96:	4a19      	ldr	r2, [pc, #100]	; (bafc <find_type_cb+0x154>)
    ba98:	4b19      	ldr	r3, [pc, #100]	; (bb00 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    ba9a:	7c29      	ldrb	r1, [r5, #16]
    ba9c:	4819      	ldr	r0, [pc, #100]	; (bb04 <find_type_cb+0x15c>)
    ba9e:	1ad2      	subs	r2, r2, r3
    baa0:	08d2      	lsrs	r2, r2, #3
    baa2:	0192      	lsls	r2, r2, #6
    baa4:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    baa8:	f013 ffaf 	bl	1fa0a <log_1>
	data->group = NULL;
    baac:	2300      	movs	r3, #0
    baae:	60ab      	str	r3, [r5, #8]
    bab0:	e7a3      	b.n	b9fa <find_type_cb+0x52>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    bab2:	b2fa      	uxtb	r2, r7
    bab4:	a902      	add	r1, sp, #8
    bab6:	a806      	add	r0, sp, #24
    bab8:	f015 fefb 	bl	218b2 <bt_uuid_create>
    babc:	b948      	cbnz	r0, bad2 <find_type_cb+0x12a>
    babe:	4a0f      	ldr	r2, [pc, #60]	; (bafc <find_type_cb+0x154>)
    bac0:	4b0f      	ldr	r3, [pc, #60]	; (bb00 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    bac2:	4811      	ldr	r0, [pc, #68]	; (bb08 <find_type_cb+0x160>)
    bac4:	1ad2      	subs	r2, r2, r3
    bac6:	08d2      	lsrs	r2, r2, #3
    bac8:	0192      	lsls	r2, r2, #6
    baca:	f042 0202 	orr.w	r2, r2, #2
    bace:	4639      	mov	r1, r7
    bad0:	e7ea      	b.n	baa8 <find_type_cb+0x100>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    bad2:	a906      	add	r1, sp, #24
    bad4:	a80b      	add	r0, sp, #44	; 0x2c
    bad6:	f015 fec2 	bl	2185e <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    bada:	2800      	cmp	r0, #0
    badc:	d1e6      	bne.n	baac <find_type_cb+0x104>
	data->err = 0x00;
    bade:	2300      	movs	r3, #0
    bae0:	746b      	strb	r3, [r5, #17]
	data->group = net_buf_add(frag, sizeof(*data->group));
    bae2:	2104      	movs	r1, #4
    bae4:	f104 0008 	add.w	r0, r4, #8
    bae8:	f017 feb0 	bl	2384c <net_buf_simple_add>
    baec:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    baee:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    baf0:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    baf2:	e782      	b.n	b9fa <find_type_cb+0x52>
	} else if (memcmp(data->value, uuid, read)) {
    baf4:	a902      	add	r1, sp, #8
    baf6:	f015 fdc6 	bl	21686 <memcmp>
    bafa:	e7ee      	b.n	bada <find_type_cb+0x132>
    bafc:	00024c24 	.word	0x00024c24
    bb00:	00024c24 	.word	0x00024c24
    bb04:	0002828a 	.word	0x0002828a
    bb08:	000282a9 	.word	0x000282a9

0000bb0c <att_get>:
{
    bb0c:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    bb0e:	7b43      	ldrb	r3, [r0, #13]
    bb10:	2b07      	cmp	r3, #7
    bb12:	d00b      	beq.n	bb2c <att_get+0x20>
    bb14:	4918      	ldr	r1, [pc, #96]	; (bb78 <att_get+0x6c>)
    bb16:	4b19      	ldr	r3, [pc, #100]	; (bb7c <att_get+0x70>)
		BT_WARN("Not connected");
    bb18:	4819      	ldr	r0, [pc, #100]	; (bb80 <att_get+0x74>)
    bb1a:	1ac9      	subs	r1, r1, r3
    bb1c:	08c9      	lsrs	r1, r1, #3
    bb1e:	0189      	lsls	r1, r1, #6
    bb20:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
    bb24:	f013 ff64 	bl	1f9f0 <log_0>
		return NULL;
    bb28:	2400      	movs	r4, #0
    bb2a:	e00e      	b.n	bb4a <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    bb2c:	2104      	movs	r1, #4
    bb2e:	f016 fa9f 	bl	22070 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    bb32:	4604      	mov	r4, r0
    bb34:	b958      	cbnz	r0, bb4e <att_get+0x42>
    bb36:	4910      	ldr	r1, [pc, #64]	; (bb78 <att_get+0x6c>)
    bb38:	4b10      	ldr	r3, [pc, #64]	; (bb7c <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    bb3a:	4812      	ldr	r0, [pc, #72]	; (bb84 <att_get+0x78>)
    bb3c:	1ac9      	subs	r1, r1, r3
    bb3e:	08c9      	lsrs	r1, r1, #3
    bb40:	0189      	lsls	r1, r1, #6
    bb42:	f041 0101 	orr.w	r1, r1, #1
    bb46:	f013 ff53 	bl	1f9f0 <log_0>
}
    bb4a:	4620      	mov	r0, r4
    bb4c:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bb4e:	f3bf 8f5b 	dmb	ish
    bb52:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
    bb56:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    bb5a:	075b      	lsls	r3, r3, #29
    bb5c:	d508      	bpl.n	bb70 <att_get+0x64>
    bb5e:	4906      	ldr	r1, [pc, #24]	; (bb78 <att_get+0x6c>)
    bb60:	4b06      	ldr	r3, [pc, #24]	; (bb7c <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    bb62:	4809      	ldr	r0, [pc, #36]	; (bb88 <att_get+0x7c>)
    bb64:	1ac9      	subs	r1, r1, r3
    bb66:	08c9      	lsrs	r1, r1, #3
    bb68:	0189      	lsls	r1, r1, #6
    bb6a:	f041 0102 	orr.w	r1, r1, #2
    bb6e:	e7d9      	b.n	bb24 <att_get+0x18>
	return att_chan->att;
    bb70:	f850 4c08 	ldr.w	r4, [r0, #-8]
    bb74:	e7e9      	b.n	bb4a <att_get+0x3e>
    bb76:	bf00      	nop
    bb78:	00024c24 	.word	0x00024c24
    bb7c:	00024c24 	.word	0x00024c24
    bb80:	000282c8 	.word	0x000282c8
    bb84:	000282d6 	.word	0x000282d6
    bb88:	000282f1 	.word	0x000282f1

0000bb8c <chan_req_sent>:
	if (chan->req) {
    bb8c:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    bb90:	b13b      	cbz	r3, bba2 <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    bb92:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    bb96:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    bb9a:	4802      	ldr	r0, [pc, #8]	; (bba4 <chan_req_sent+0x18>)
    bb9c:	2300      	movs	r3, #0
    bb9e:	f012 bed1 	b.w	1e944 <k_delayed_work_submit_to_queue>
}
    bba2:	4770      	bx	lr
    bba4:	200014c8 	.word	0x200014c8

0000bba8 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    bba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    bbaa:	2300      	movs	r3, #0
{
    bbac:	4606      	mov	r6, r0
    bbae:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    bbb0:	482c      	ldr	r0, [pc, #176]	; (bc64 <bt_att_accept+0xbc>)
    bbb2:	2200      	movs	r2, #0
    bbb4:	4669      	mov	r1, sp
    bbb6:	f012 f877 	bl	1dca8 <k_mem_slab_alloc>
    bbba:	4604      	mov	r4, r0
    bbbc:	b178      	cbz	r0, bbde <bt_att_accept+0x36>
    bbbe:	4a2a      	ldr	r2, [pc, #168]	; (bc68 <bt_att_accept+0xc0>)
    bbc0:	4b2a      	ldr	r3, [pc, #168]	; (bc6c <bt_att_accept+0xc4>)
		BT_ERR("No available ATT context for conn %p", conn);
    bbc2:	482b      	ldr	r0, [pc, #172]	; (bc70 <bt_att_accept+0xc8>)
    bbc4:	1ad2      	subs	r2, r2, r3
    bbc6:	08d2      	lsrs	r2, r2, #3
    bbc8:	0192      	lsls	r2, r2, #6
    bbca:	f042 0201 	orr.w	r2, r2, #1
    bbce:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    bbd0:	f013 ff1b 	bl	1fa0a <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    bbd4:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    bbd8:	4620      	mov	r0, r4
    bbda:	b003      	add	sp, #12
    bbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    bbde:	4601      	mov	r1, r0
    bbe0:	222c      	movs	r2, #44	; 0x2c
    bbe2:	9800      	ldr	r0, [sp, #0]
    bbe4:	f015 fd8a 	bl	216fc <memset>
	att->conn = conn;
    bbe8:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    bbea:	4822      	ldr	r0, [pc, #136]	; (bc74 <bt_att_accept+0xcc>)
	list->tail = NULL;
    bbec:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    bbee:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    bbf2:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    bbf6:	2200      	movs	r2, #0
    bbf8:	2300      	movs	r3, #0
    bbfa:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    bbfc:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    bbfe:	f012 f853 	bl	1dca8 <k_mem_slab_alloc>
    bc02:	4604      	mov	r4, r0
    bc04:	b148      	cbz	r0, bc1a <bt_att_accept+0x72>
    bc06:	4a18      	ldr	r2, [pc, #96]	; (bc68 <bt_att_accept+0xc0>)
    bc08:	4b18      	ldr	r3, [pc, #96]	; (bc6c <bt_att_accept+0xc4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    bc0a:	6829      	ldr	r1, [r5, #0]
    bc0c:	481a      	ldr	r0, [pc, #104]	; (bc78 <bt_att_accept+0xd0>)
    bc0e:	1ad2      	subs	r2, r2, r3
    bc10:	08d2      	lsrs	r2, r2, #3
    bc12:	0192      	lsls	r2, r2, #6
    bc14:	f042 0201 	orr.w	r2, r2, #1
    bc18:	e7da      	b.n	bbd0 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    bc1a:	4601      	mov	r1, r0
    bc1c:	f44f 7298 	mov.w	r2, #304	; 0x130
    bc20:	9801      	ldr	r0, [sp, #4]
    bc22:	f015 fd6b 	bl	216fc <memset>
	chan->chan.chan.ops = &ops;
    bc26:	9801      	ldr	r0, [sp, #4]
    bc28:	4b14      	ldr	r3, [pc, #80]	; (bc7c <bt_att_accept+0xd4>)
    bc2a:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    bc2c:	30c8      	adds	r0, #200	; 0xc8
    bc2e:	f018 fabb 	bl	241a8 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    bc32:	9801      	ldr	r0, [sp, #4]
    bc34:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
    bc38:	2203      	movs	r2, #3
    bc3a:	4611      	mov	r1, r2
    bc3c:	f018 fc0c 	bl	24458 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    bc40:	9b01      	ldr	r3, [sp, #4]
    bc42:	f3bf 8f5b 	dmb	ish
    bc46:	33c0      	adds	r3, #192	; 0xc0
    bc48:	e853 2f00 	ldrex	r2, [r3]
    bc4c:	e843 4100 	strex	r1, r4, [r3]
    bc50:	2900      	cmp	r1, #0
    bc52:	d1f9      	bne.n	bc48 <bt_att_accept+0xa0>
    bc54:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    bc58:	9b01      	ldr	r3, [sp, #4]
    bc5a:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    bc5e:	603b      	str	r3, [r7, #0]
	return 0;
    bc60:	e7ba      	b.n	bbd8 <bt_att_accept+0x30>
    bc62:	bf00      	nop
    bc64:	200007c0 	.word	0x200007c0
    bc68:	00024c24 	.word	0x00024c24
    bc6c:	00024c24 	.word	0x00024c24
    bc70:	00028315 	.word	0x00028315
    bc74:	200007dc 	.word	0x200007dc
    bc78:	0002833a 	.word	0x0002833a
    bc7c:	200002a8 	.word	0x200002a8

0000bc80 <bt_att_connected>:
{
    bc80:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    bc82:	2104      	movs	r1, #4
{
    bc84:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    bc86:	6800      	ldr	r0, [r0, #0]
    bc88:	f016 f9e2 	bl	22050 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    bc8c:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    bc90:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    bc92:	b91b      	cbnz	r3, bc9c <bt_att_connected+0x1c>
	z_impl_k_queue_init(queue);
    bc94:	f105 000c 	add.w	r0, r5, #12
    bc98:	f018 fa86 	bl	241a8 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    bc9c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
    bc9e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
Z_GENLIST_PREPEND(slist, snode)
    bca2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    bca4:	f504 7392 	add.w	r3, r4, #292	; 0x124
	list->head = node;
    bca8:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    bcaa:	b902      	cbnz	r2, bcae <bt_att_connected+0x2e>
	list->tail = node;
    bcac:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bcae:	f3bf 8f5b 	dmb	ish
    bcb2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    bcb6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    bcba:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    bcbc:	bf5e      	ittt	pl
    bcbe:	2317      	movpl	r3, #23
    bcc0:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    bcc4:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    bcc8:	2230      	movs	r2, #48	; 0x30
    bcca:	2100      	movs	r1, #0
    bccc:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    bcd0:	f015 fd14 	bl	216fc <memset>
    bcd4:	4b01      	ldr	r3, [pc, #4]	; (bcdc <bt_att_connected+0x5c>)
    bcd6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
}
    bcda:	bd38      	pop	{r3, r4, r5, pc}
    bcdc:	0000c909 	.word	0x0000c909

0000bce0 <chan_send>:
{
    bce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    bce4:	688b      	ldr	r3, [r1, #8]
    bce6:	781b      	ldrb	r3, [r3, #0]
    bce8:	2bd2      	cmp	r3, #210	; 0xd2
{
    bcea:	4605      	mov	r5, r0
    bcec:	460c      	mov	r4, r1
    bcee:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    bcf0:	d116      	bne.n	bd20 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
    bcf2:	6803      	ldr	r3, [r0, #0]
    bcf4:	6818      	ldr	r0, [r3, #0]
    bcf6:	f017 fd27 	bl	23748 <bt_smp_sign>
		if (err) {
    bcfa:	4606      	mov	r6, r0
    bcfc:	b180      	cbz	r0, bd20 <chan_send+0x40>
    bcfe:	4928      	ldr	r1, [pc, #160]	; (bda0 <chan_send+0xc0>)
    bd00:	4b28      	ldr	r3, [pc, #160]	; (bda4 <chan_send+0xc4>)
			BT_ERR("Error signing data");
    bd02:	4829      	ldr	r0, [pc, #164]	; (bda8 <chan_send+0xc8>)
    bd04:	1ac9      	subs	r1, r1, r3
    bd06:	08c9      	lsrs	r1, r1, #3
    bd08:	0189      	lsls	r1, r1, #6
    bd0a:	f041 0101 	orr.w	r1, r1, #1
    bd0e:	f013 fe6f 	bl	1f9f0 <log_0>
		net_buf_unref(buf);
    bd12:	4620      	mov	r0, r4
    bd14:	f00f fc1e 	bl	1b554 <net_buf_unref>
}
    bd18:	4630      	mov	r0, r6
    bd1a:	b003      	add	sp, #12
    bd1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    bd20:	f104 0008 	add.w	r0, r4, #8
    bd24:	f017 fdd3 	bl	238ce <net_buf_simple_headroom>
	state->len = buf->len;
    bd28:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    bd2c:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
    bd2e:	f1b9 0f00 	cmp.w	r9, #0
    bd32:	d10a      	bne.n	bd4a <chan_send+0x6a>
	switch (att_op_get_type(buf->data[0])) {
    bd34:	68a3      	ldr	r3, [r4, #8]
    bd36:	7818      	ldrb	r0, [r3, #0]
    bd38:	f016 f9f0 	bl	2211c <att_op_get_type>
    bd3c:	1e43      	subs	r3, r0, #1
    bd3e:	b2db      	uxtb	r3, r3
    bd40:	2b04      	cmp	r3, #4
    bd42:	bf9c      	itt	ls
    bd44:	4a19      	ldrls	r2, [pc, #100]	; (bdac <chan_send+0xcc>)
    bd46:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    bd4a:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    bd4c:	f8c5 9128 	str.w	r9, [r5, #296]	; 0x128
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    bd50:	4620      	mov	r0, r4
    bd52:	681e      	ldr	r6, [r3, #0]
    bd54:	f017 fd54 	bl	23800 <net_buf_ref>
    bd58:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
	if (cb == chan_rsp_sent) {
    bd5c:	4b14      	ldr	r3, [pc, #80]	; (bdb0 <chan_send+0xd0>)
    bd5e:	4299      	cmp	r1, r3
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    bd60:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
    bd62:	d019      	beq.n	bd98 <chan_send+0xb8>
	} else if (cb == chan_cfm_sent) {
    bd64:	4b13      	ldr	r3, [pc, #76]	; (bdb4 <chan_send+0xd4>)
    bd66:	4299      	cmp	r1, r3
    bd68:	d018      	beq.n	bd9c <chan_send+0xbc>
		return att_sent;
    bd6a:	f8df c05c 	ldr.w	ip, [pc, #92]	; bdc8 <chan_send+0xe8>
    bd6e:	4b12      	ldr	r3, [pc, #72]	; (bdb8 <chan_send+0xd8>)
    bd70:	4812      	ldr	r0, [pc, #72]	; (bdbc <chan_send+0xdc>)
    bd72:	4561      	cmp	r1, ip
    bd74:	bf18      	it	ne
    bd76:	4603      	movne	r3, r0
				&chan->chan.chan);
    bd78:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    bd7a:	4630      	mov	r0, r6
    bd7c:	9500      	str	r5, [sp, #0]
    bd7e:	2104      	movs	r1, #4
    bd80:	f016 f94d 	bl	2201e <bt_l2cap_send_cb>
	if (!err) {
    bd84:	4606      	mov	r6, r0
    bd86:	2800      	cmp	r0, #0
    bd88:	d0c3      	beq.n	bd12 <chan_send+0x32>
	buf->data = buf->__buf + state->offset;
    bd8a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    bd8c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    bd90:	fa10 f787 	uxtah	r7, r0, r7
    bd94:	60a7      	str	r7, [r4, #8]
}
    bd96:	e7bf      	b.n	bd18 <chan_send+0x38>
		return att_rsp_sent;
    bd98:	4b09      	ldr	r3, [pc, #36]	; (bdc0 <chan_send+0xe0>)
    bd9a:	e7ed      	b.n	bd78 <chan_send+0x98>
		return att_cfm_sent;
    bd9c:	4b09      	ldr	r3, [pc, #36]	; (bdc4 <chan_send+0xe4>)
    bd9e:	e7eb      	b.n	bd78 <chan_send+0x98>
    bda0:	00024c24 	.word	0x00024c24
    bda4:	00024c24 	.word	0x00024c24
    bda8:	0002835f 	.word	0x0002835f
    bdac:	0002532c 	.word	0x0002532c
    bdb0:	00022391 	.word	0x00022391
    bdb4:	000223ad 	.word	0x000223ad
    bdb8:	0000b82d 	.word	0x0000b82d
    bdbc:	000220ed 	.word	0x000220ed
    bdc0:	0000b81d 	.word	0x0000b81d
    bdc4:	0000b80d 	.word	0x0000b80d
    bdc8:	0000bb8d 	.word	0x0000bb8d

0000bdcc <att_write_cmd>:
{
    bdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdce:	4604      	mov	r4, r0
    bdd0:	b087      	sub	sp, #28
	handle = net_buf_pull_le16(buf);
    bdd2:	f101 0008 	add.w	r0, r1, #8
{
    bdd6:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    bdd8:	f017 fd71 	bl	238be <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    bddc:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
    bdde:	68af      	ldr	r7, [r5, #8]
    bde0:	89ad      	ldrh	r5, [r5, #12]
	handle = net_buf_pull_le16(buf);
    bde2:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    bde4:	2100      	movs	r1, #0
    bde6:	6818      	ldr	r0, [r3, #0]
    bde8:	f017 f921 	bl	2302e <bt_gatt_change_aware>
    bdec:	b328      	cbz	r0, be3a <att_write_cmd+0x6e>
	if (!handle) {
    bdee:	b336      	cbz	r6, be3e <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
    bdf0:	2218      	movs	r2, #24
    bdf2:	2100      	movs	r1, #0
    bdf4:	4668      	mov	r0, sp
    bdf6:	f015 fc81 	bl	216fc <memset>
	data.conn = chan->att->conn;
    bdfa:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    bdfc:	4a11      	ldr	r2, [pc, #68]	; (be44 <att_write_cmd+0x78>)
	data.conn = chan->att->conn;
    bdfe:	681b      	ldr	r3, [r3, #0]
    be00:	9300      	str	r3, [sp, #0]
	data.req = req;
    be02:	2300      	movs	r3, #0
    be04:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
    be08:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    be0c:	2301      	movs	r3, #1
    be0e:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    be12:	4631      	mov	r1, r6
    be14:	466b      	mov	r3, sp
    be16:	4630      	mov	r0, r6
	data.value = value;
    be18:	9703      	str	r7, [sp, #12]
	data.len = len;
    be1a:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    be1e:	f016 f9c3 	bl	221a8 <bt_gatt_foreach_attr>
	if (data.err) {
    be22:	f89d 3014 	ldrb.w	r3, [sp, #20]
    be26:	b92b      	cbnz	r3, be34 <att_write_cmd+0x68>
	if (data.buf) {
    be28:	9901      	ldr	r1, [sp, #4]
    be2a:	b119      	cbz	r1, be34 <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    be2c:	4a06      	ldr	r2, [pc, #24]	; (be48 <att_write_cmd+0x7c>)
    be2e:	4620      	mov	r0, r4
    be30:	f016 fb9c 	bl	2256c <bt_att_chan_send_rsp>
    be34:	2000      	movs	r0, #0
}
    be36:	b007      	add	sp, #28
    be38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    be3a:	2012      	movs	r0, #18
    be3c:	e7fb      	b.n	be36 <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
    be3e:	2001      	movs	r0, #1
    be40:	e7f9      	b.n	be36 <att_write_cmd+0x6a>
    be42:	bf00      	nop
    be44:	000223c9 	.word	0x000223c9
    be48:	00022391 	.word	0x00022391

0000be4c <bt_att_chan_create_pdu>:
{
    be4c:	b538      	push	{r3, r4, r5, lr}
    be4e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    be50:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    be54:	3201      	adds	r2, #1
    be56:	428a      	cmp	r2, r1
    be58:	d90c      	bls.n	be74 <bt_att_chan_create_pdu+0x28>
    be5a:	481a      	ldr	r0, [pc, #104]	; (bec4 <bt_att_chan_create_pdu+0x78>)
    be5c:	4b1a      	ldr	r3, [pc, #104]	; (bec8 <bt_att_chan_create_pdu+0x7c>)
    be5e:	1a1b      	subs	r3, r3, r0
    be60:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    be62:	019b      	lsls	r3, r3, #6
    be64:	4819      	ldr	r0, [pc, #100]	; (becc <bt_att_chan_create_pdu+0x80>)
    be66:	f043 0302 	orr.w	r3, r3, #2
    be6a:	f013 fde2 	bl	1fa32 <log_2>
		return NULL;
    be6e:	2400      	movs	r4, #0
}
    be70:	4620      	mov	r0, r4
    be72:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    be74:	4628      	mov	r0, r5
    be76:	f016 f951 	bl	2211c <att_op_get_type>
    be7a:	2802      	cmp	r0, #2
    be7c:	d001      	beq.n	be82 <bt_att_chan_create_pdu+0x36>
    be7e:	2804      	cmp	r0, #4
    be80:	d114      	bne.n	beac <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    be82:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    be86:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    be88:	2100      	movs	r1, #0
    be8a:	4608      	mov	r0, r1
    be8c:	f016 f8c4 	bl	22018 <bt_l2cap_create_pdu_timeout>
    be90:	4604      	mov	r4, r0
	if (!buf) {
    be92:	b980      	cbnz	r0, beb6 <bt_att_chan_create_pdu+0x6a>
    be94:	4b0b      	ldr	r3, [pc, #44]	; (bec4 <bt_att_chan_create_pdu+0x78>)
    be96:	4a0c      	ldr	r2, [pc, #48]	; (bec8 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    be98:	480d      	ldr	r0, [pc, #52]	; (bed0 <bt_att_chan_create_pdu+0x84>)
    be9a:	1ad2      	subs	r2, r2, r3
    be9c:	08d2      	lsrs	r2, r2, #3
    be9e:	0192      	lsls	r2, r2, #6
    bea0:	f042 0201 	orr.w	r2, r2, #1
    bea4:	4629      	mov	r1, r5
    bea6:	f013 fdb0 	bl	1fa0a <log_1>
		return NULL;
    beaa:	e7e1      	b.n	be70 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    beac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    beb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    beb4:	e7e8      	b.n	be88 <bt_att_chan_create_pdu+0x3c>
	hdr = net_buf_add(buf, sizeof(*hdr));
    beb6:	2101      	movs	r1, #1
    beb8:	3008      	adds	r0, #8
    beba:	f017 fcc7 	bl	2384c <net_buf_simple_add>
	hdr->code = op;
    bebe:	7005      	strb	r5, [r0, #0]
	return buf;
    bec0:	e7d6      	b.n	be70 <bt_att_chan_create_pdu+0x24>
    bec2:	bf00      	nop
    bec4:	00024c24 	.word	0x00024c24
    bec8:	00024c24 	.word	0x00024c24
    becc:	00028372 	.word	0x00028372
    bed0:	00028166 	.word	0x00028166

0000bed4 <att_indicate>:
{
    bed4:	b570      	push	{r4, r5, r6, lr}
    bed6:	4604      	mov	r4, r0
	handle = net_buf_pull_le16(buf);
    bed8:	f101 0008 	add.w	r0, r1, #8
{
    bedc:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    bede:	f017 fcee 	bl	238be <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    bee2:	6826      	ldr	r6, [r4, #0]
    bee4:	89ab      	ldrh	r3, [r5, #12]
    bee6:	68aa      	ldr	r2, [r5, #8]
	handle = net_buf_pull_le16(buf);
    bee8:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    beea:	6830      	ldr	r0, [r6, #0]
    beec:	f017 f874 	bl	22fd8 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
    bef0:	211e      	movs	r1, #30
    bef2:	2200      	movs	r2, #0
    bef4:	4620      	mov	r0, r4
    bef6:	f7ff ffa9 	bl	be4c <bt_att_chan_create_pdu>
	if (!buf) {
    befa:	4601      	mov	r1, r0
    befc:	b118      	cbz	r0, bf06 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
    befe:	4a03      	ldr	r2, [pc, #12]	; (bf0c <att_indicate+0x38>)
    bf00:	4620      	mov	r0, r4
    bf02:	f016 fb33 	bl	2256c <bt_att_chan_send_rsp>
}
    bf06:	2000      	movs	r0, #0
    bf08:	bd70      	pop	{r4, r5, r6, pc}
    bf0a:	bf00      	nop
    bf0c:	000223ad 	.word	0x000223ad

0000bf10 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    bf10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf14:	4688      	mov	r8, r1
    bf16:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    bf18:	2101      	movs	r1, #1
    bf1a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    bf1c:	4605      	mov	r5, r0
    bf1e:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    bf20:	f7ff ff94 	bl	be4c <bt_att_chan_create_pdu>
	if (!buf) {
    bf24:	4604      	mov	r4, r0
    bf26:	b178      	cbz	r0, bf48 <send_err_rsp.part.0+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    bf28:	2104      	movs	r1, #4
    bf2a:	3008      	adds	r0, #8
    bf2c:	f017 fc8e 	bl	2384c <net_buf_simple_add>
	rsp->request = req;
    bf30:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    bf34:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    bf36:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    bf3a:	4621      	mov	r1, r4
    bf3c:	4628      	mov	r0, r5
    bf3e:	4a03      	ldr	r2, [pc, #12]	; (bf4c <send_err_rsp.part.0+0x3c>)
}
    bf40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    bf44:	f016 bb12 	b.w	2256c <bt_att_chan_send_rsp>
}
    bf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf4c:	00022391 	.word	0x00022391

0000bf50 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    bf50:	898b      	ldrh	r3, [r1, #12]
{
    bf52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf56:	4604      	mov	r4, r0
    bf58:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    bf5a:	b963      	cbnz	r3, bf76 <bt_att_recv+0x26>
    bf5c:	494a      	ldr	r1, [pc, #296]	; (c088 <bt_att_recv+0x138>)
    bf5e:	4b4b      	ldr	r3, [pc, #300]	; (c08c <bt_att_recv+0x13c>)
		BT_ERR("Too small ATT PDU received");
    bf60:	484b      	ldr	r0, [pc, #300]	; (c090 <bt_att_recv+0x140>)
    bf62:	1ac9      	subs	r1, r1, r3
    bf64:	08c9      	lsrs	r1, r1, #3
    bf66:	0189      	lsls	r1, r1, #6
    bf68:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    bf6c:	f013 fd40 	bl	1f9f0 <log_0>
}
    bf70:	2000      	movs	r0, #0
    bf72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    bf76:	2101      	movs	r1, #1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    bf78:	f1a0 0608 	sub.w	r6, r0, #8
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    bf7c:	f108 0008 	add.w	r0, r8, #8
    bf80:	f017 fc95 	bl	238ae <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    bf84:	4a43      	ldr	r2, [pc, #268]	; (c094 <bt_att_recv+0x144>)
    bf86:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    bf88:	4605      	mov	r5, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    bf8a:	2300      	movs	r3, #0
    bf8c:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
    bf8e:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    bf92:	4288      	cmp	r0, r1
    bf94:	d11d      	bne.n	bfd2 <bt_att_recv+0x82>
		if (handler->type == ATT_REQUEST &&
    bf96:	00d8      	lsls	r0, r3, #3
    bf98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    bf9c:	789f      	ldrb	r7, [r3, #2]
    bf9e:	2f01      	cmp	r7, #1
    bfa0:	d132      	bne.n	c008 <bt_att_recv+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bfa2:	f3bf 8f5b 	dmb	ish
    bfa6:	34b8      	adds	r4, #184	; 0xb8
    bfa8:	e854 3f00 	ldrex	r3, [r4]
    bfac:	f043 0201 	orr.w	r2, r3, #1
    bfb0:	e844 2100 	strex	r1, r2, [r4]
    bfb4:	2900      	cmp	r1, #0
    bfb6:	d1f7      	bne.n	bfa8 <bt_att_recv+0x58>
    bfb8:	f3bf 8f5b 	dmb	ish
    bfbc:	07da      	lsls	r2, r3, #31
    bfbe:	d53d      	bpl.n	c03c <bt_att_recv+0xec>
    bfc0:	4931      	ldr	r1, [pc, #196]	; (c088 <bt_att_recv+0x138>)
    bfc2:	4b32      	ldr	r3, [pc, #200]	; (c08c <bt_att_recv+0x13c>)
			BT_WARN("Ignoring unexpected request");
    bfc4:	4834      	ldr	r0, [pc, #208]	; (c098 <bt_att_recv+0x148>)
    bfc6:	1ac9      	subs	r1, r1, r3
    bfc8:	08c9      	lsrs	r1, r1, #3
    bfca:	0189      	lsls	r1, r1, #6
    bfcc:	f041 0102 	orr.w	r1, r1, #2
    bfd0:	e7cc      	b.n	bf6c <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    bfd2:	3301      	adds	r3, #1
    bfd4:	2b1c      	cmp	r3, #28
    bfd6:	d1da      	bne.n	bf8e <bt_att_recv+0x3e>
    bfd8:	4b2c      	ldr	r3, [pc, #176]	; (c08c <bt_att_recv+0x13c>)
    bfda:	4a2b      	ldr	r2, [pc, #172]	; (c088 <bt_att_recv+0x138>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    bfdc:	482f      	ldr	r0, [pc, #188]	; (c09c <bt_att_recv+0x14c>)
    bfde:	1ad2      	subs	r2, r2, r3
    bfe0:	08d2      	lsrs	r2, r2, #3
    bfe2:	0192      	lsls	r2, r2, #6
    bfe4:	f042 0202 	orr.w	r2, r2, #2
    bfe8:	f013 fd0f 	bl	1fa0a <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    bfec:	7829      	ldrb	r1, [r5, #0]
    bfee:	4608      	mov	r0, r1
    bff0:	f016 f894 	bl	2211c <att_op_get_type>
    bff4:	2800      	cmp	r0, #0
    bff6:	d0bb      	beq.n	bf70 <bt_att_recv+0x20>
	if (!req) {
    bff8:	2900      	cmp	r1, #0
    bffa:	d0b9      	beq.n	bf70 <bt_att_recv+0x20>
    bffc:	2306      	movs	r3, #6
    bffe:	2200      	movs	r2, #0
    c000:	4630      	mov	r0, r6
    c002:	f7ff ff85 	bl	bf10 <send_err_rsp.part.0>
    c006:	e7b3      	b.n	bf70 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    c008:	2f05      	cmp	r7, #5
    c00a:	d117      	bne.n	c03c <bt_att_recv+0xec>
    c00c:	f3bf 8f5b 	dmb	ish
    c010:	34b8      	adds	r4, #184	; 0xb8
    c012:	e854 3f00 	ldrex	r3, [r4]
    c016:	f043 0202 	orr.w	r2, r3, #2
    c01a:	e844 2100 	strex	r1, r2, [r4]
    c01e:	2900      	cmp	r1, #0
    c020:	d1f7      	bne.n	c012 <bt_att_recv+0xc2>
    c022:	f3bf 8f5b 	dmb	ish
    c026:	079b      	lsls	r3, r3, #30
    c028:	d508      	bpl.n	c03c <bt_att_recv+0xec>
    c02a:	4917      	ldr	r1, [pc, #92]	; (c088 <bt_att_recv+0x138>)
    c02c:	4b17      	ldr	r3, [pc, #92]	; (c08c <bt_att_recv+0x13c>)
			BT_WARN("Ignoring unexpected indication");
    c02e:	481c      	ldr	r0, [pc, #112]	; (c0a0 <bt_att_recv+0x150>)
    c030:	1ac9      	subs	r1, r1, r3
    c032:	08c9      	lsrs	r1, r1, #3
    c034:	0189      	lsls	r1, r1, #6
    c036:	f041 0102 	orr.w	r1, r1, #2
    c03a:	e797      	b.n	bf6c <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    c03c:	eb0c 0300 	add.w	r3, ip, r0
    c040:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    c044:	785a      	ldrb	r2, [r3, #1]
    c046:	428a      	cmp	r2, r1
    c048:	d90e      	bls.n	c068 <bt_att_recv+0x118>
    c04a:	4a10      	ldr	r2, [pc, #64]	; (c08c <bt_att_recv+0x13c>)
    c04c:	4b0e      	ldr	r3, [pc, #56]	; (c088 <bt_att_recv+0x138>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    c04e:	4815      	ldr	r0, [pc, #84]	; (c0a4 <bt_att_recv+0x154>)
    c050:	1a9b      	subs	r3, r3, r2
    c052:	08db      	lsrs	r3, r3, #3
    c054:	019b      	lsls	r3, r3, #6
    c056:	782a      	ldrb	r2, [r5, #0]
    c058:	f043 0301 	orr.w	r3, r3, #1
    c05c:	f013 fce9 	bl	1fa32 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    c060:	2f01      	cmp	r7, #1
    c062:	d185      	bne.n	bf70 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    c064:	2304      	movs	r3, #4
    c066:	e00a      	b.n	c07e <bt_att_recv+0x12e>
		err = handler->func(att_chan, buf);
    c068:	685b      	ldr	r3, [r3, #4]
    c06a:	4641      	mov	r1, r8
    c06c:	4630      	mov	r0, r6
    c06e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    c070:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    c072:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    c074:	f47f af7c 	bne.w	bf70 <bt_att_recv+0x20>
    c078:	2800      	cmp	r0, #0
    c07a:	f43f af79 	beq.w	bf70 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    c07e:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    c080:	2900      	cmp	r1, #0
    c082:	f43f af75 	beq.w	bf70 <bt_att_recv+0x20>
    c086:	e7ba      	b.n	bffe <bt_att_recv+0xae>
    c088:	00024c24 	.word	0x00024c24
    c08c:	00024c24 	.word	0x00024c24
    c090:	00028397 	.word	0x00028397
    c094:	00025340 	.word	0x00025340
    c098:	000283b2 	.word	0x000283b2
    c09c:	0002840c 	.word	0x0002840c
    c0a0:	000283ce 	.word	0x000283ce
    c0a4:	000283ed 	.word	0x000283ed

0000c0a8 <att_write_req>:
{
    c0a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c0ac:	4604      	mov	r4, r0
    c0ae:	b087      	sub	sp, #28
	handle = net_buf_pull_le16(buf);
    c0b0:	f101 0008 	add.w	r0, r1, #8
{
    c0b4:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    c0b6:	f017 fc02 	bl	238be <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c0ba:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
    c0bc:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    c0c0:	89ad      	ldrh	r5, [r5, #12]
	handle = net_buf_pull_le16(buf);
    c0c2:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c0c4:	2101      	movs	r1, #1
    c0c6:	6818      	ldr	r0, [r3, #0]
    c0c8:	f016 ffb1 	bl	2302e <bt_gatt_change_aware>
    c0cc:	2800      	cmp	r0, #0
    c0ce:	d040      	beq.n	c152 <att_write_req+0xaa>
	if (!handle) {
    c0d0:	2e00      	cmp	r6, #0
    c0d2:	d040      	beq.n	c156 <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
    c0d4:	2218      	movs	r2, #24
    c0d6:	2100      	movs	r1, #0
    c0d8:	4668      	mov	r0, sp
    c0da:	f015 fb0f 	bl	216fc <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    c0de:	2200      	movs	r2, #0
    c0e0:	2113      	movs	r1, #19
    c0e2:	4620      	mov	r0, r4
    c0e4:	f7ff feb2 	bl	be4c <bt_att_chan_create_pdu>
    c0e8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    c0ea:	b380      	cbz	r0, c14e <att_write_req+0xa6>
	data.conn = chan->att->conn;
    c0ec:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c0ee:	4a1b      	ldr	r2, [pc, #108]	; (c15c <att_write_req+0xb4>)
	data.conn = chan->att->conn;
    c0f0:	681b      	ldr	r3, [r3, #0]
    c0f2:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    c0f4:	2301      	movs	r3, #1
    c0f6:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
    c0fa:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
    c0fe:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c100:	466b      	mov	r3, sp
    c102:	4631      	mov	r1, r6
    c104:	4630      	mov	r0, r6
	data.len = len;
    c106:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
    c10a:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
    c10e:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
    c112:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c116:	f016 f847 	bl	221a8 <bt_gatt_foreach_attr>
	if (data.err) {
    c11a:	f89d 5014 	ldrb.w	r5, [sp, #20]
    c11e:	b175      	cbz	r5, c13e <att_write_req+0x96>
			net_buf_unref(data.buf);
    c120:	9801      	ldr	r0, [sp, #4]
    c122:	f00f fa17 	bl	1b554 <net_buf_unref>
	if (!req) {
    c126:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c12a:	4632      	mov	r2, r6
    c12c:	4641      	mov	r1, r8
    c12e:	4620      	mov	r0, r4
    c130:	f7ff feee 	bl	bf10 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    c134:	463d      	mov	r5, r7
}
    c136:	4628      	mov	r0, r5
    c138:	b007      	add	sp, #28
    c13a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    c13e:	9901      	ldr	r1, [sp, #4]
    c140:	2900      	cmp	r1, #0
    c142:	d0f8      	beq.n	c136 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c144:	4a06      	ldr	r2, [pc, #24]	; (c160 <att_write_req+0xb8>)
    c146:	4620      	mov	r0, r4
    c148:	f016 fa10 	bl	2256c <bt_att_chan_send_rsp>
    c14c:	e7f3      	b.n	c136 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
    c14e:	250e      	movs	r5, #14
    c150:	e7f1      	b.n	c136 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c152:	2512      	movs	r5, #18
    c154:	e7ef      	b.n	c136 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
    c156:	2501      	movs	r5, #1
    c158:	e7ed      	b.n	c136 <att_write_req+0x8e>
    c15a:	bf00      	nop
    c15c:	000223c9 	.word	0x000223c9
    c160:	00022391 	.word	0x00022391

0000c164 <bt_att_create_pdu>:
{
    c164:	b570      	push	{r4, r5, r6, lr}
    c166:	460e      	mov	r6, r1
    c168:	4615      	mov	r5, r2
	att = att_get(conn);
    c16a:	f7ff fccf 	bl	bb0c <att_get>
	if (!att) {
    c16e:	b1c0      	cbz	r0, c1a2 <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c170:	6a43      	ldr	r3, [r0, #36]	; 0x24
	return list->head;
    c172:	1c69      	adds	r1, r5, #1
    c174:	b15b      	cbz	r3, c18e <bt_att_create_pdu+0x2a>
    c176:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
    c17a:	d008      	beq.n	c18e <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c17c:	681b      	ldr	r3, [r3, #0]
    c17e:	b10b      	cbz	r3, c184 <bt_att_create_pdu+0x20>
    c180:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    c184:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    c188:	4291      	cmp	r1, r2
    c18a:	d90c      	bls.n	c1a6 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c18c:	b98b      	cbnz	r3, c1b2 <bt_att_create_pdu+0x4e>
    c18e:	4a0e      	ldr	r2, [pc, #56]	; (c1c8 <bt_att_create_pdu+0x64>)
    c190:	4b0e      	ldr	r3, [pc, #56]	; (c1cc <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    c192:	480f      	ldr	r0, [pc, #60]	; (c1d0 <bt_att_create_pdu+0x6c>)
    c194:	1ad2      	subs	r2, r2, r3
    c196:	08d2      	lsrs	r2, r2, #3
    c198:	0192      	lsls	r2, r2, #6
    c19a:	f042 0202 	orr.w	r2, r2, #2
    c19e:	f013 fc34 	bl	1fa0a <log_1>
}
    c1a2:	2000      	movs	r0, #0
    c1a4:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    c1a6:	462a      	mov	r2, r5
    c1a8:	4631      	mov	r1, r6
}
    c1aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    c1ae:	f7ff be4d 	b.w	be4c <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    c1b2:	f513 7496 	adds.w	r4, r3, #300	; 0x12c
    c1b6:	d004      	beq.n	c1c2 <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c1b8:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c1bc:	b10c      	cbz	r4, c1c2 <bt_att_create_pdu+0x5e>
    c1be:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
{
    c1c2:	4618      	mov	r0, r3
    c1c4:	4623      	mov	r3, r4
    c1c6:	e7dd      	b.n	c184 <bt_att_create_pdu+0x20>
    c1c8:	00024c24 	.word	0x00024c24
    c1cc:	00024c24 	.word	0x00024c24
    c1d0:	00028426 	.word	0x00028426

0000c1d4 <att_read_group_req>:
{
    c1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    c1d8:	7b0c      	ldrb	r4, [r1, #12]
    c1da:	3c04      	subs	r4, #4
    c1dc:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    c1de:	2c02      	cmp	r4, #2
{
    c1e0:	4605      	mov	r5, r0
    c1e2:	b08c      	sub	sp, #48	; 0x30
    c1e4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    c1e6:	d001      	beq.n	c1ec <att_read_group_req+0x18>
    c1e8:	2c10      	cmp	r4, #16
    c1ea:	d16f      	bne.n	c2cc <att_read_group_req+0xf8>
	req = net_buf_pull_mem(buf, sizeof(*req));
    c1ec:	2104      	movs	r1, #4
    c1ee:	3008      	adds	r0, #8
    c1f0:	f017 fb5d 	bl	238ae <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c1f4:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    c1f8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    c1fa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c1fc:	1d01      	adds	r1, r0, #4
    c1fe:	4622      	mov	r2, r4
    c200:	4640      	mov	r0, r8
    c202:	f015 fb56 	bl	218b2 <bt_uuid_create>
    c206:	2800      	cmp	r0, #0
    c208:	d062      	beq.n	c2d0 <att_read_group_req+0xfc>
	if (!start || !end) {
    c20a:	2e00      	cmp	r6, #0
    c20c:	d03a      	beq.n	c284 <att_read_group_req+0xb0>
    c20e:	2400      	movs	r4, #0
    c210:	2f00      	cmp	r7, #0
    c212:	d036      	beq.n	c282 <att_read_group_req+0xae>
	if (start > end) {
    c214:	42be      	cmp	r6, r7
    c216:	d835      	bhi.n	c284 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    c218:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c21c:	a901      	add	r1, sp, #4
    c21e:	4640      	mov	r0, r8
    c220:	f88d 4004 	strb.w	r4, [sp, #4]
    c224:	f8ad 3006 	strh.w	r3, [sp, #6]
    c228:	f015 fb19 	bl	2185e <bt_uuid_cmp>
    c22c:	2800      	cmp	r0, #0
    c22e:	d134      	bne.n	c29a <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    c230:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    c232:	2214      	movs	r2, #20
    c234:	2100      	movs	r1, #0
    c236:	a807      	add	r0, sp, #28
    c238:	f015 fa60 	bl	216fc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    c23c:	2201      	movs	r2, #1
    c23e:	2111      	movs	r1, #17
    c240:	4620      	mov	r0, r4
    c242:	f7ff ff8f 	bl	c164 <bt_att_create_pdu>
    c246:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    c248:	2800      	cmp	r0, #0
    c24a:	d041      	beq.n	c2d0 <att_read_group_req+0xfc>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    c24c:	2101      	movs	r1, #1
    c24e:	3008      	adds	r0, #8
	data.uuid = uuid;
    c250:	e9cd 5807 	strd	r5, r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    c254:	f017 fafa 	bl	2384c <net_buf_simple_add>
	data.rsp->len = 0U;
    c258:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    c25c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    c25e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    c260:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    c264:	4a1b      	ldr	r2, [pc, #108]	; (c2d4 <att_read_group_req+0x100>)
	data.group = NULL;
    c266:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    c26a:	4639      	mov	r1, r7
    c26c:	4630      	mov	r0, r6
    c26e:	f015 ff9b 	bl	221a8 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    c272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c274:	781c      	ldrb	r4, [r3, #0]
    c276:	bb1c      	cbnz	r4, c2c0 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    c278:	9809      	ldr	r0, [sp, #36]	; 0x24
    c27a:	f00f f96b 	bl	1b554 <net_buf_unref>
	if (!req) {
    c27e:	230a      	movs	r3, #10
    c280:	e018      	b.n	c2b4 <att_read_group_req+0xe0>
			*err = 0U;
    c282:	463e      	mov	r6, r7
	if (!req) {
    c284:	2301      	movs	r3, #1
    c286:	4632      	mov	r2, r6
    c288:	2110      	movs	r1, #16
    c28a:	4628      	mov	r0, r5
    c28c:	f7ff fe40 	bl	bf10 <send_err_rsp.part.0>
		return 0;
    c290:	2400      	movs	r4, #0
}
    c292:	4620      	mov	r0, r4
    c294:	b00c      	add	sp, #48	; 0x30
    c296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    c29a:	f642 0301 	movw	r3, #10241	; 0x2801
    c29e:	a907      	add	r1, sp, #28
    c2a0:	4640      	mov	r0, r8
    c2a2:	f88d 401c 	strb.w	r4, [sp, #28]
    c2a6:	f8ad 301e 	strh.w	r3, [sp, #30]
    c2aa:	f015 fad8 	bl	2185e <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    c2ae:	2800      	cmp	r0, #0
    c2b0:	d0be      	beq.n	c230 <att_read_group_req+0x5c>
	if (!req) {
    c2b2:	2310      	movs	r3, #16
    c2b4:	4632      	mov	r2, r6
    c2b6:	2110      	movs	r1, #16
    c2b8:	4628      	mov	r0, r5
    c2ba:	f7ff fe29 	bl	bf10 <send_err_rsp.part.0>
		return 0;
    c2be:	e7e8      	b.n	c292 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c2c0:	4a05      	ldr	r2, [pc, #20]	; (c2d8 <att_read_group_req+0x104>)
    c2c2:	9909      	ldr	r1, [sp, #36]	; 0x24
    c2c4:	4628      	mov	r0, r5
    c2c6:	f016 f951 	bl	2256c <bt_att_chan_send_rsp>
	return 0;
    c2ca:	e7e1      	b.n	c290 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    c2cc:	2404      	movs	r4, #4
    c2ce:	e7e0      	b.n	c292 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    c2d0:	240e      	movs	r4, #14
    c2d2:	e7de      	b.n	c292 <att_read_group_req+0xbe>
    c2d4:	0000b855 	.word	0x0000b855
    c2d8:	00022391 	.word	0x00022391

0000c2dc <att_read_mult_req>:
{
    c2dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    c2e0:	6886      	ldr	r6, [r0, #8]
{
    c2e2:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    c2e4:	2210      	movs	r2, #16
{
    c2e6:	4604      	mov	r4, r0
    c2e8:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    c2ea:	4668      	mov	r0, sp
    c2ec:	2100      	movs	r1, #0
    c2ee:	f015 fa05 	bl	216fc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    c2f2:	2200      	movs	r2, #0
    c2f4:	210f      	movs	r1, #15
    c2f6:	4630      	mov	r0, r6
    c2f8:	f7ff ff34 	bl	c164 <bt_att_create_pdu>
    c2fc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    c2fe:	b360      	cbz	r0, c35a <att_read_mult_req+0x7e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c300:	f8df 9060 	ldr.w	r9, [pc, #96]	; c364 <att_read_mult_req+0x88>
	data.chan = chan;
    c304:	9400      	str	r4, [sp, #0]
		handle = net_buf_pull_le16(buf);
    c306:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    c30a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    c30e:	89ab      	ldrh	r3, [r5, #12]
    c310:	2b01      	cmp	r3, #1
    c312:	d805      	bhi.n	c320 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c314:	4a12      	ldr	r2, [pc, #72]	; (c360 <att_read_mult_req+0x84>)
    c316:	9902      	ldr	r1, [sp, #8]
    c318:	4620      	mov	r0, r4
    c31a:	f016 f927 	bl	2256c <bt_att_chan_send_rsp>
    c31e:	e018      	b.n	c352 <att_read_mult_req+0x76>
		handle = net_buf_pull_le16(buf);
    c320:	4638      	mov	r0, r7
    c322:	f017 facc 	bl	238be <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c326:	466b      	mov	r3, sp
    c328:	464a      	mov	r2, r9
    c32a:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    c32c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    c32e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c332:	f015 ff39 	bl	221a8 <bt_gatt_foreach_attr>
		if (data.err) {
    c336:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c33a:	2b00      	cmp	r3, #0
    c33c:	d0e7      	beq.n	c30e <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    c33e:	9802      	ldr	r0, [sp, #8]
    c340:	f00f f908 	bl	1b554 <net_buf_unref>
	if (!req) {
    c344:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c348:	4632      	mov	r2, r6
    c34a:	210e      	movs	r1, #14
    c34c:	4620      	mov	r0, r4
    c34e:	f7ff fddf 	bl	bf10 <send_err_rsp.part.0>
	return 0;
    c352:	2000      	movs	r0, #0
}
    c354:	b005      	add	sp, #20
    c356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    c35a:	200e      	movs	r0, #14
    c35c:	e7fa      	b.n	c354 <att_read_mult_req+0x78>
    c35e:	bf00      	nop
    c360:	00022391 	.word	0x00022391
    c364:	00022425 	.word	0x00022425

0000c368 <att_read_rsp>:
{
    c368:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    c36c:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    c370:	4605      	mov	r5, r0
    c372:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    c374:	4640      	mov	r0, r8
    c376:	2101      	movs	r1, #1
{
    c378:	4614      	mov	r4, r2
    c37a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    c37c:	f016 fe57 	bl	2302e <bt_gatt_change_aware>
    c380:	b390      	cbz	r0, c3e8 <att_read_rsp+0x80>
	if (!handle) {
    c382:	b39e      	cbz	r6, c3ec <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
    c384:	2210      	movs	r2, #16
    c386:	2100      	movs	r1, #0
    c388:	4668      	mov	r0, sp
    c38a:	f015 f9b7 	bl	216fc <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    c38e:	2200      	movs	r2, #0
    c390:	4621      	mov	r1, r4
    c392:	4640      	mov	r0, r8
    c394:	f7ff fee6 	bl	c164 <bt_att_create_pdu>
    c398:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    c39a:	b348      	cbz	r0, c3f0 <att_read_rsp+0x88>
	data.offset = offset;
    c39c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    c3a0:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    c3a4:	2301      	movs	r3, #1
    c3a6:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c3aa:	4a12      	ldr	r2, [pc, #72]	; (c3f4 <att_read_rsp+0x8c>)
	data.chan = chan;
    c3ac:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c3ae:	466b      	mov	r3, sp
    c3b0:	4631      	mov	r1, r6
    c3b2:	4630      	mov	r0, r6
    c3b4:	f015 fef8 	bl	221a8 <bt_gatt_foreach_attr>
	if (data.err) {
    c3b8:	f89d 400c 	ldrb.w	r4, [sp, #12]
    c3bc:	b174      	cbz	r4, c3dc <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    c3be:	9802      	ldr	r0, [sp, #8]
    c3c0:	f00f f8c8 	bl	1b554 <net_buf_unref>
	if (!req) {
    c3c4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c3c8:	4632      	mov	r2, r6
    c3ca:	4639      	mov	r1, r7
    c3cc:	4628      	mov	r0, r5
    c3ce:	f7ff fd9f 	bl	bf10 <send_err_rsp.part.0>
		return 0;
    c3d2:	2400      	movs	r4, #0
}
    c3d4:	4620      	mov	r0, r4
    c3d6:	b004      	add	sp, #16
    c3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c3dc:	4a06      	ldr	r2, [pc, #24]	; (c3f8 <att_read_rsp+0x90>)
    c3de:	9902      	ldr	r1, [sp, #8]
    c3e0:	4628      	mov	r0, r5
    c3e2:	f016 f8c3 	bl	2256c <bt_att_chan_send_rsp>
	return 0;
    c3e6:	e7f5      	b.n	c3d4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c3e8:	2412      	movs	r4, #18
    c3ea:	e7f3      	b.n	c3d4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    c3ec:	2401      	movs	r4, #1
    c3ee:	e7f1      	b.n	c3d4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    c3f0:	240e      	movs	r4, #14
    c3f2:	e7ef      	b.n	c3d4 <att_read_rsp+0x6c>
    c3f4:	00022425 	.word	0x00022425
    c3f8:	00022391 	.word	0x00022391

0000c3fc <att_read_type_req>:
{
    c3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    c400:	7b0c      	ldrb	r4, [r1, #12]
    c402:	3c04      	subs	r4, #4
    c404:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    c406:	2c02      	cmp	r4, #2
{
    c408:	4605      	mov	r5, r0
    c40a:	b08c      	sub	sp, #48	; 0x30
    c40c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    c40e:	d001      	beq.n	c414 <att_read_type_req+0x18>
    c410:	2c10      	cmp	r4, #16
    c412:	d150      	bne.n	c4b6 <att_read_type_req+0xba>
	req = net_buf_pull_mem(buf, sizeof(*req));
    c414:	2104      	movs	r1, #4
    c416:	3008      	adds	r0, #8
    c418:	f017 fa49 	bl	238ae <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c41c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    c420:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    c422:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c424:	1d01      	adds	r1, r0, #4
    c426:	4622      	mov	r2, r4
    c428:	4640      	mov	r0, r8
    c42a:	f015 fa42 	bl	218b2 <bt_uuid_create>
    c42e:	b188      	cbz	r0, c454 <att_read_type_req+0x58>
	if (!start || !end) {
    c430:	b19e      	cbz	r6, c45a <att_read_type_req+0x5e>
    c432:	b18f      	cbz	r7, c458 <att_read_type_req+0x5c>
	if (start > end) {
    c434:	42b7      	cmp	r7, r6
    c436:	d310      	bcc.n	c45a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    c438:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    c43a:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    c43c:	2100      	movs	r1, #0
    c43e:	eb0d 0002 	add.w	r0, sp, r2
    c442:	f015 f95b 	bl	216fc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    c446:	2201      	movs	r2, #1
    c448:	2109      	movs	r1, #9
    c44a:	4620      	mov	r0, r4
    c44c:	f7ff fe8a 	bl	c164 <bt_att_create_pdu>
    c450:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    c452:	b968      	cbnz	r0, c470 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    c454:	240e      	movs	r4, #14
    c456:	e007      	b.n	c468 <att_read_type_req+0x6c>
			*err = 0U;
    c458:	463e      	mov	r6, r7
	if (!req) {
    c45a:	2301      	movs	r3, #1
    c45c:	4632      	mov	r2, r6
    c45e:	2108      	movs	r1, #8
    c460:	4628      	mov	r0, r5
    c462:	f7ff fd55 	bl	bf10 <send_err_rsp.part.0>
		return 0;
    c466:	2400      	movs	r4, #0
}
    c468:	4620      	mov	r0, r4
    c46a:	b00c      	add	sp, #48	; 0x30
    c46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    c470:	2101      	movs	r1, #1
    c472:	3008      	adds	r0, #8
	data.uuid = uuid;
    c474:	e9cd 5806 	strd	r5, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    c478:	f017 f9e8 	bl	2384c <net_buf_simple_add>
	data.rsp->len = 0U;
    c47c:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    c480:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    c482:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    c484:	4a0d      	ldr	r2, [pc, #52]	; (c4bc <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
    c486:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    c48a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    c48c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    c490:	4630      	mov	r0, r6
    c492:	ab06      	add	r3, sp, #24
    c494:	f015 fe88 	bl	221a8 <bt_gatt_foreach_attr>
	if (data.err) {
    c498:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    c49c:	b12c      	cbz	r4, c4aa <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    c49e:	9808      	ldr	r0, [sp, #32]
    c4a0:	f00f f858 	bl	1b554 <net_buf_unref>
	if (!req) {
    c4a4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    c4a8:	e7d8      	b.n	c45c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c4aa:	4a05      	ldr	r2, [pc, #20]	; (c4c0 <att_read_type_req+0xc4>)
    c4ac:	9908      	ldr	r1, [sp, #32]
    c4ae:	4628      	mov	r0, r5
    c4b0:	f016 f85c 	bl	2256c <bt_att_chan_send_rsp>
	return 0;
    c4b4:	e7d8      	b.n	c468 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    c4b6:	2404      	movs	r4, #4
    c4b8:	e7d6      	b.n	c468 <att_read_type_req+0x6c>
    c4ba:	bf00      	nop
    c4bc:	0000b901 	.word	0x0000b901
    c4c0:	00022391 	.word	0x00022391

0000c4c4 <att_find_type_req>:
{
    c4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c4c8:	4688      	mov	r8, r1
    c4ca:	b086      	sub	sp, #24
    c4cc:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    c4ce:	2106      	movs	r1, #6
    c4d0:	f108 0008 	add.w	r0, r8, #8
    c4d4:	f017 f9eb 	bl	238ae <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    c4d8:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    c4da:	b317      	cbz	r7, c522 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    c4dc:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    c4e0:	f1b9 0f00 	cmp.w	r9, #0
    c4e4:	d01c      	beq.n	c520 <att_find_type_req+0x5c>
	if (start > end) {
    c4e6:	454f      	cmp	r7, r9
    c4e8:	d81b      	bhi.n	c522 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    c4ea:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    c4ec:	f8ad 3002 	strh.w	r3, [sp, #2]
    c4f0:	2400      	movs	r4, #0
    c4f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c4f6:	a901      	add	r1, sp, #4
    c4f8:	4668      	mov	r0, sp
	value = buf->data;
    c4fa:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    c4fe:	f88d 4000 	strb.w	r4, [sp]
    c502:	f88d 4004 	strb.w	r4, [sp, #4]
    c506:	f8ad 3006 	strh.w	r3, [sp, #6]
    c50a:	f015 f9a8 	bl	2185e <bt_uuid_cmp>
    c50e:	4606      	mov	r6, r0
    c510:	b190      	cbz	r0, c538 <att_find_type_req+0x74>
	if (!req) {
    c512:	230a      	movs	r3, #10
    c514:	463a      	mov	r2, r7
    c516:	2106      	movs	r1, #6
    c518:	4628      	mov	r0, r5
    c51a:	f7ff fcf9 	bl	bf10 <send_err_rsp.part.0>
		return 0;
    c51e:	e007      	b.n	c530 <att_find_type_req+0x6c>
			*err = 0U;
    c520:	464f      	mov	r7, r9
	if (!req) {
    c522:	2301      	movs	r3, #1
    c524:	463a      	mov	r2, r7
    c526:	2106      	movs	r1, #6
    c528:	4628      	mov	r0, r5
    c52a:	f7ff fcf1 	bl	bf10 <send_err_rsp.part.0>
		return 0;
    c52e:	2400      	movs	r4, #0
}
    c530:	4620      	mov	r0, r4
    c532:	b006      	add	sp, #24
    c534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    c538:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    c53c:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    c540:	4601      	mov	r1, r0
    c542:	2214      	movs	r2, #20
    c544:	a801      	add	r0, sp, #4
    c546:	f015 f8d9 	bl	216fc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    c54a:	4632      	mov	r2, r6
    c54c:	2107      	movs	r1, #7
    c54e:	4640      	mov	r0, r8
    c550:	f7ff fe08 	bl	c164 <bt_att_create_pdu>
    c554:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    c556:	b1e0      	cbz	r0, c592 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    c558:	230a      	movs	r3, #10
    c55a:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    c55e:	4a0e      	ldr	r2, [pc, #56]	; (c598 <att_find_type_req+0xd4>)
	data.value_len = value_len;
    c560:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    c564:	ab01      	add	r3, sp, #4
    c566:	4649      	mov	r1, r9
    c568:	4638      	mov	r0, r7
	data.value = value;
    c56a:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    c56e:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    c570:	f015 fe1a 	bl	221a8 <bt_gatt_foreach_attr>
	if (data.err) {
    c574:	f89d 4015 	ldrb.w	r4, [sp, #21]
    c578:	b12c      	cbz	r4, c586 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    c57a:	9802      	ldr	r0, [sp, #8]
    c57c:	f00e ffea 	bl	1b554 <net_buf_unref>
	if (!req) {
    c580:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c584:	e7ce      	b.n	c524 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c586:	4a05      	ldr	r2, [pc, #20]	; (c59c <att_find_type_req+0xd8>)
    c588:	9902      	ldr	r1, [sp, #8]
    c58a:	4628      	mov	r0, r5
    c58c:	f015 ffee 	bl	2256c <bt_att_chan_send_rsp>
	return 0;
    c590:	e7ce      	b.n	c530 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    c592:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    c594:	e7cc      	b.n	c530 <att_find_type_req+0x6c>
    c596:	bf00      	nop
    c598:	0000b9a9 	.word	0x0000b9a9
    c59c:	00022391 	.word	0x00022391

0000c5a0 <att_find_info_req>:
{
    c5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    c5a2:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    c5a4:	881e      	ldrh	r6, [r3, #0]
{
    c5a6:	b085      	sub	sp, #20
    c5a8:	4605      	mov	r5, r0
	if (!start || !end) {
    c5aa:	b19e      	cbz	r6, c5d4 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    c5ac:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    c5ae:	b184      	cbz	r4, c5d2 <att_find_info_req+0x32>
	if (start > end) {
    c5b0:	42b4      	cmp	r4, r6
    c5b2:	d30f      	bcc.n	c5d4 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    c5b4:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    c5b6:	2210      	movs	r2, #16
    c5b8:	2100      	movs	r1, #0
    c5ba:	4668      	mov	r0, sp
    c5bc:	f015 f89e 	bl	216fc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    c5c0:	2200      	movs	r2, #0
    c5c2:	2105      	movs	r1, #5
    c5c4:	4638      	mov	r0, r7
    c5c6:	f7ff fdcd 	bl	c164 <bt_att_create_pdu>
    c5ca:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    c5cc:	b958      	cbnz	r0, c5e6 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    c5ce:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    c5d0:	e007      	b.n	c5e2 <att_find_info_req+0x42>
			*err = 0U;
    c5d2:	4626      	mov	r6, r4
	if (!req) {
    c5d4:	2301      	movs	r3, #1
    c5d6:	4632      	mov	r2, r6
    c5d8:	2104      	movs	r1, #4
    c5da:	4628      	mov	r0, r5
    c5dc:	f7ff fc98 	bl	bf10 <send_err_rsp.part.0>
	return 0;
    c5e0:	2000      	movs	r0, #0
}
    c5e2:	b005      	add	sp, #20
    c5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    c5e6:	4621      	mov	r1, r4
    c5e8:	4a09      	ldr	r2, [pc, #36]	; (c610 <att_find_info_req+0x70>)
	data.chan = chan;
    c5ea:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    c5ec:	466b      	mov	r3, sp
    c5ee:	4630      	mov	r0, r6
    c5f0:	f015 fdda 	bl	221a8 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    c5f4:	9c02      	ldr	r4, [sp, #8]
    c5f6:	b924      	cbnz	r4, c602 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    c5f8:	9801      	ldr	r0, [sp, #4]
    c5fa:	f00e ffab 	bl	1b554 <net_buf_unref>
	if (!req) {
    c5fe:	230a      	movs	r3, #10
    c600:	e7e9      	b.n	c5d6 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c602:	4a04      	ldr	r2, [pc, #16]	; (c614 <att_find_info_req+0x74>)
    c604:	9901      	ldr	r1, [sp, #4]
    c606:	4628      	mov	r0, r5
    c608:	f015 ffb0 	bl	2256c <bt_att_chan_send_rsp>
    c60c:	e7e8      	b.n	c5e0 <att_find_info_req+0x40>
    c60e:	bf00      	nop
    c610:	000222d5 	.word	0x000222d5
    c614:	00022391 	.word	0x00022391

0000c618 <att_mtu_req>:
{
    c618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    c61a:	6803      	ldr	r3, [r0, #0]
{
    c61c:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
    c61e:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c620:	f3bf 8f5b 	dmb	ish
    c624:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
    c628:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    c62c:	f3c3 04c0 	ubfx	r4, r3, #3, #1
    c630:	071b      	lsls	r3, r3, #28
    c632:	d41e      	bmi.n	c672 <att_mtu_req+0x5a>
	mtu_client = sys_le16_to_cpu(req->mtu);
    c634:	688b      	ldr	r3, [r1, #8]
    c636:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    c638:	2e16      	cmp	r6, #22
    c63a:	d91c      	bls.n	c676 <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    c63c:	2202      	movs	r2, #2
    c63e:	2103      	movs	r1, #3
    c640:	f7ff fd90 	bl	c164 <bt_att_create_pdu>
	if (!pdu) {
    c644:	4607      	mov	r7, r0
    c646:	b1c0      	cbz	r0, c67a <att_mtu_req+0x62>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    c648:	2102      	movs	r1, #2
    c64a:	3008      	adds	r0, #8
    c64c:	f017 f8fe 	bl	2384c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    c650:	2341      	movs	r3, #65	; 0x41
    c652:	7003      	strb	r3, [r0, #0]
    c654:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    c656:	4a0a      	ldr	r2, [pc, #40]	; (c680 <att_mtu_req+0x68>)
    c658:	4628      	mov	r0, r5
    c65a:	4639      	mov	r1, r7
    c65c:	f015 ff86 	bl	2256c <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    c660:	2e41      	cmp	r6, #65	; 0x41
    c662:	bf28      	it	cs
    c664:	2641      	movcs	r6, #65	; 0x41
    c666:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    c66a:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
    c66e:	4620      	mov	r0, r4
}
    c670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    c672:	2006      	movs	r0, #6
    c674:	e7fc      	b.n	c670 <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
    c676:	2004      	movs	r0, #4
    c678:	e7fa      	b.n	c670 <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
    c67a:	200e      	movs	r0, #14
    c67c:	e7f8      	b.n	c670 <att_mtu_req+0x58>
    c67e:	bf00      	nop
    c680:	00022391 	.word	0x00022391

0000c684 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    c684:	b513      	push	{r0, r1, r4, lr}
    c686:	4602      	mov	r2, r0
    c688:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    c68a:	4808      	ldr	r0, [pc, #32]	; (c6ac <bt_att_req_alloc+0x28>)
    c68c:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    c68e:	2400      	movs	r4, #0
    c690:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    c692:	f011 fb09 	bl	1dca8 <k_mem_slab_alloc>
    c696:	4601      	mov	r1, r0
    c698:	b930      	cbnz	r0, c6a8 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    c69a:	9801      	ldr	r0, [sp, #4]
    c69c:	221c      	movs	r2, #28
    c69e:	f015 f82d 	bl	216fc <memset>

	return req;
    c6a2:	9801      	ldr	r0, [sp, #4]
}
    c6a4:	b002      	add	sp, #8
    c6a6:	bd10      	pop	{r4, pc}
		return NULL;
    c6a8:	4620      	mov	r0, r4
    c6aa:	e7fb      	b.n	c6a4 <bt_att_req_alloc+0x20>
    c6ac:	200007f8 	.word	0x200007f8

0000c6b0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    c6b0:	b507      	push	{r0, r1, r2, lr}
    c6b2:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    c6b4:	a901      	add	r1, sp, #4
    c6b6:	4803      	ldr	r0, [pc, #12]	; (c6c4 <bt_att_req_free+0x14>)
    c6b8:	f011 fb28 	bl	1dd0c <k_mem_slab_free>
}
    c6bc:	b003      	add	sp, #12
    c6be:	f85d fb04 	ldr.w	pc, [sp], #4
    c6c2:	bf00      	nop
    c6c4:	200007f8 	.word	0x200007f8

0000c6c8 <att_handle_rsp>:
{
    c6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c6cc:	4605      	mov	r5, r0
    c6ce:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    c6d0:	30e0      	adds	r0, #224	; 0xe0
{
    c6d2:	4689      	mov	r9, r1
    c6d4:	4692      	mov	sl, r2
    c6d6:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    c6d8:	f017 ff40 	bl	2455c <k_delayed_work_cancel>
	if (!chan->req) {
    c6dc:	f8d5 40c4 	ldr.w	r4, [r5, #196]	; 0xc4
    c6e0:	bb64      	cbnz	r4, c73c <att_handle_rsp+0x74>
    c6e2:	4932      	ldr	r1, [pc, #200]	; (c7ac <att_handle_rsp+0xe4>)
    c6e4:	4b32      	ldr	r3, [pc, #200]	; (c7b0 <att_handle_rsp+0xe8>)
		BT_WARN("No pending ATT request");
    c6e6:	4833      	ldr	r0, [pc, #204]	; (c7b4 <att_handle_rsp+0xec>)
    c6e8:	1ac9      	subs	r1, r1, r3
    c6ea:	08c9      	lsrs	r1, r1, #3
    c6ec:	0189      	lsls	r1, r1, #6
    c6ee:	f041 0102 	orr.w	r1, r1, #2
    c6f2:	f013 f97d 	bl	1f9f0 <log_0>
	att_process(chan->att);
    c6f6:	f8d5 b000 	ldr.w	fp, [r5]
	node = sys_slist_get(&att->reqs);
    c6fa:	f10b 0004 	add.w	r0, fp, #4
    c6fe:	f015 fcc8 	bl	22092 <sys_slist_get>
	if (!node) {
    c702:	4607      	mov	r7, r0
    c704:	2800      	cmp	r0, #0
    c706:	d039      	beq.n	c77c <att_handle_rsp+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c708:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
    c70c:	b15a      	cbz	r2, c726 <att_handle_rsp+0x5e>
    c70e:	f5b2 7096 	subs.w	r0, r2, #300	; 0x12c
    c712:	d008      	beq.n	c726 <att_handle_rsp+0x5e>
    c714:	6816      	ldr	r6, [r2, #0]
    c716:	b10e      	cbz	r6, c71c <att_handle_rsp+0x54>
    c718:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
    c71c:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    c720:	b33a      	cbz	r2, c772 <att_handle_rsp+0xaa>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c722:	2e00      	cmp	r6, #0
    c724:	d137      	bne.n	c796 <att_handle_rsp+0xce>
Z_GENLIST_PREPEND(slist, snode)
    c726:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
    c72a:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
    c72c:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
    c730:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
    c734:	bb12      	cbnz	r2, c77c <att_handle_rsp+0xb4>
	list->tail = node;
    c736:	f8cb 7008 	str.w	r7, [fp, #8]
}
    c73a:	e01f      	b.n	c77c <att_handle_rsp+0xb4>
	if (chan->req == &cancel) {
    c73c:	4b1e      	ldr	r3, [pc, #120]	; (c7b8 <att_handle_rsp+0xf0>)
    c73e:	429c      	cmp	r4, r3
    c740:	d103      	bne.n	c74a <att_handle_rsp+0x82>
		chan->req = NULL;
    c742:	2400      	movs	r4, #0
    c744:	f8c5 40c4 	str.w	r4, [r5, #196]	; 0xc4
		goto process;
    c748:	e7d5      	b.n	c6f6 <att_handle_rsp+0x2e>
	if (chan->req->buf) {
    c74a:	6920      	ldr	r0, [r4, #16]
    c74c:	b128      	cbz	r0, c75a <att_handle_rsp+0x92>
		net_buf_unref(chan->req->buf);
    c74e:	f00e ff01 	bl	1b554 <net_buf_unref>
		chan->req->buf = NULL;
    c752:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    c756:	2200      	movs	r2, #0
    c758:	611a      	str	r2, [r3, #16]
	func = chan->req->func;
    c75a:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
	chan->req->func = NULL;
    c75e:	2600      	movs	r6, #0
	func = chan->req->func;
    c760:	6844      	ldr	r4, [r0, #4]
	params = chan->req->user_data;
    c762:	6983      	ldr	r3, [r0, #24]
	chan->req->func = NULL;
    c764:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    c766:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
    c768:	f015 ffa4 	bl	226b4 <att_req_destroy>
	chan->req = NULL;
    c76c:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
    c770:	e7c1      	b.n	c6f6 <att_handle_rsp+0x2e>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    c772:	4639      	mov	r1, r7
    c774:	f015 fea6 	bl	224c4 <bt_att_chan_req_send>
    c778:	2800      	cmp	r0, #0
    c77a:	dbd2      	blt.n	c722 <att_handle_rsp+0x5a>
	if (func) {
    c77c:	b13c      	cbz	r4, c78e <att_handle_rsp+0xc6>
		func(chan->att->conn, err, pdu, len, params);
    c77e:	9b03      	ldr	r3, [sp, #12]
    c780:	6828      	ldr	r0, [r5, #0]
    c782:	9300      	str	r3, [sp, #0]
    c784:	6800      	ldr	r0, [r0, #0]
    c786:	4653      	mov	r3, sl
    c788:	464a      	mov	r2, r9
    c78a:	4641      	mov	r1, r8
    c78c:	47a0      	blx	r4
}
    c78e:	2000      	movs	r0, #0
    c790:	b005      	add	sp, #20
    c792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    c796:	f516 7296 	adds.w	r2, r6, #300	; 0x12c
    c79a:	d004      	beq.n	c7a6 <att_handle_rsp+0xde>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c79c:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c7a0:	b10a      	cbz	r2, c7a6 <att_handle_rsp+0xde>
    c7a2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	bt_att_func_t func = NULL;
    c7a6:	4630      	mov	r0, r6
    c7a8:	4616      	mov	r6, r2
    c7aa:	e7b7      	b.n	c71c <att_handle_rsp+0x54>
    c7ac:	00024c24 	.word	0x00024c24
    c7b0:	00024c24 	.word	0x00024c24
    c7b4:	00028441 	.word	0x00028441
    c7b8:	200029f4 	.word	0x200029f4

0000c7bc <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
    c7bc:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
{
    c7c0:	b570      	push	{r4, r5, r6, lr}
    c7c2:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
    c7c4:	b352      	cbz	r2, c81c <att_error_rsp+0x60>
    c7c6:	4b1a      	ldr	r3, [pc, #104]	; (c830 <att_error_rsp+0x74>)
    c7c8:	429a      	cmp	r2, r3
    c7ca:	d027      	beq.n	c81c <att_error_rsp+0x60>
	if (chan->req->buf) {
    c7cc:	6913      	ldr	r3, [r2, #16]
	rsp = (void *)buf->data;
    c7ce:	6888      	ldr	r0, [r1, #8]
	if (chan->req->buf) {
    c7d0:	b12b      	cbz	r3, c7de <att_error_rsp+0x22>
	buf->data = buf->__buf + state->offset;
    c7d2:	8995      	ldrh	r5, [r2, #12]
    c7d4:	6919      	ldr	r1, [r3, #16]
    c7d6:	4429      	add	r1, r5
    c7d8:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    c7da:	89d1      	ldrh	r1, [r2, #14]
    c7dc:	8199      	strh	r1, [r3, #12]
	if (chan->req->retrying) {
    c7de:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    c7e0:	78c5      	ldrb	r5, [r0, #3]
	if (chan->req->retrying) {
    c7e2:	b9e3      	cbnz	r3, c81e <att_error_rsp+0x62>
	switch (err) {
    c7e4:	2d05      	cmp	r5, #5
	if (!att_change_security(chan->chan.chan.conn, err)) {
    c7e6:	68a0      	ldr	r0, [r4, #8]
	switch (err) {
    c7e8:	d006      	beq.n	c7f8 <att_error_rsp+0x3c>
    c7ea:	2d0f      	cmp	r5, #15
    c7ec:	d117      	bne.n	c81e <att_error_rsp+0x62>
		if (conn->sec_level >= BT_SECURITY_L2)
    c7ee:	7a43      	ldrb	r3, [r0, #9]
    c7f0:	2b01      	cmp	r3, #1
    c7f2:	d814      	bhi.n	c81e <att_error_rsp+0x62>
		sec = BT_SECURITY_L2;
    c7f4:	2102      	movs	r1, #2
    c7f6:	e007      	b.n	c808 <att_error_rsp+0x4c>
		if (conn->sec_level < BT_SECURITY_L2) {
    c7f8:	7a43      	ldrb	r3, [r0, #9]
    c7fa:	2b01      	cmp	r3, #1
    c7fc:	d9fa      	bls.n	c7f4 <att_error_rsp+0x38>
		} else if (conn->sec_level < BT_SECURITY_L3) {
    c7fe:	2b02      	cmp	r3, #2
    c800:	d00a      	beq.n	c818 <att_error_rsp+0x5c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
    c802:	2b03      	cmp	r3, #3
    c804:	d10b      	bne.n	c81e <att_error_rsp+0x62>
			sec = BT_SECURITY_L4;
    c806:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
    c808:	f015 fac1 	bl	21d8e <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
    c80c:	b938      	cbnz	r0, c81e <att_error_rsp+0x62>
		chan->req->retrying = true;
    c80e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    c812:	2201      	movs	r2, #1
    c814:	751a      	strb	r2, [r3, #20]
}
    c816:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
    c818:	2103      	movs	r1, #3
    c81a:	e7f5      	b.n	c808 <att_error_rsp+0x4c>
		err = BT_ATT_ERR_UNLIKELY;
    c81c:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
    c81e:	2200      	movs	r2, #0
    c820:	462b      	mov	r3, r5
    c822:	4620      	mov	r0, r4
    c824:	4611      	mov	r1, r2
}
    c826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
    c82a:	f7ff bf4d 	b.w	c6c8 <att_handle_rsp>
    c82e:	bf00      	nop
    c830:	200029f4 	.word	0x200029f4

0000c834 <bt_att_encrypt_change>:
{
    c834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c838:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    c83a:	f1a0 0608 	sub.w	r6, r0, #8
	if (hci_status) {
    c83e:	460d      	mov	r5, r1
    c840:	b161      	cbz	r1, c85c <bt_att_encrypt_change+0x28>
		if (att_chan->req && att_chan->req->retrying) {
    c842:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    c846:	b34b      	cbz	r3, c89c <bt_att_encrypt_change+0x68>
    c848:	7d1b      	ldrb	r3, [r3, #20]
    c84a:	b33b      	cbz	r3, c89c <bt_att_encrypt_change+0x68>
			att_handle_rsp(att_chan, NULL, 0,
    c84c:	2200      	movs	r2, #0
    c84e:	4630      	mov	r0, r6
    c850:	2305      	movs	r3, #5
}
    c852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			att_handle_rsp(att_chan, NULL, 0,
    c856:	4611      	mov	r1, r2
    c858:	f7ff bf36 	b.w	c6c8 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    c85c:	6807      	ldr	r7, [r0, #0]
	bt_gatt_encrypt_change(conn);
    c85e:	4638      	mov	r0, r7
    c860:	f001 fb7c 	bl	df5c <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
    c864:	7a7b      	ldrb	r3, [r7, #9]
    c866:	2b01      	cmp	r3, #1
    c868:	d018      	beq.n	c89c <bt_att_encrypt_change+0x68>
	if (!(att_chan->req && att_chan->req->retrying)) {
    c86a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    c86e:	b1ab      	cbz	r3, c89c <bt_att_encrypt_change+0x68>
    c870:	7d1a      	ldrb	r2, [r3, #20]
    c872:	b19a      	cbz	r2, c89c <bt_att_encrypt_change+0x68>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    c874:	6919      	ldr	r1, [r3, #16]
	switch (att_op_get_type(buf->data[0])) {
    c876:	688b      	ldr	r3, [r1, #8]
    c878:	7818      	ldrb	r0, [r3, #0]
    c87a:	f015 fc4f 	bl	2211c <att_op_get_type>
    c87e:	3801      	subs	r0, #1
    c880:	b2c0      	uxtb	r0, r0
    c882:	2804      	cmp	r0, #4
    c884:	bf96      	itet	ls
    c886:	4b06      	ldrls	r3, [pc, #24]	; (c8a0 <bt_att_encrypt_change+0x6c>)
    c888:	462a      	movhi	r2, r5
    c88a:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    c88e:	4630      	mov	r0, r6
    c890:	f015 fe6c 	bl	2256c <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
    c894:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    c898:	2200      	movs	r2, #0
    c89a:	611a      	str	r2, [r3, #16]
}
    c89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c8a0:	0002532c 	.word	0x0002532c

0000c8a4 <att_reset>:
{
    c8a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    c8a6:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    c8a8:	9803      	ldr	r0, [sp, #12]
    c8aa:	2200      	movs	r2, #0
    c8ac:	2300      	movs	r3, #0
    c8ae:	300c      	adds	r0, #12
    c8b0:	f016 ff75 	bl	2379e <net_buf_get>
    c8b4:	b948      	cbnz	r0, c8ca <att_reset+0x26>
	att->conn = NULL;
    c8b6:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    c8b8:	6855      	ldr	r5, [r2, #4]
	att->conn = NULL;
    c8ba:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    c8bc:	b945      	cbnz	r5, c8d0 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
    c8be:	4811      	ldr	r0, [pc, #68]	; (c904 <att_reset+0x60>)
    c8c0:	a903      	add	r1, sp, #12
    c8c2:	f011 fa23 	bl	1dd0c <k_mem_slab_free>
}
    c8c6:	b004      	add	sp, #16
    c8c8:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    c8ca:	f00e fe43 	bl	1b554 <net_buf_unref>
    c8ce:	e7eb      	b.n	c8a8 <att_reset+0x4>
	return node->next;
    c8d0:	682c      	ldr	r4, [r5, #0]
    c8d2:	2c00      	cmp	r4, #0
    c8d4:	bf38      	it	cc
    c8d6:	2400      	movcc	r4, #0
		if (req->func) {
    c8d8:	686e      	ldr	r6, [r5, #4]
    c8da:	b136      	cbz	r6, c8ea <att_reset+0x46>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    c8dc:	69ab      	ldr	r3, [r5, #24]
    c8de:	9300      	str	r3, [sp, #0]
    c8e0:	2300      	movs	r3, #0
    c8e2:	461a      	mov	r2, r3
    c8e4:	210e      	movs	r1, #14
    c8e6:	4618      	mov	r0, r3
    c8e8:	47b0      	blx	r6
		att_req_destroy(req);
    c8ea:	4628      	mov	r0, r5
    c8ec:	f015 fee2 	bl	226b4 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    c8f0:	2c00      	cmp	r4, #0
    c8f2:	d0e4      	beq.n	c8be <att_reset+0x1a>
    c8f4:	6823      	ldr	r3, [r4, #0]
    c8f6:	2b00      	cmp	r3, #0
    c8f8:	bf38      	it	cc
    c8fa:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c8fc:	4625      	mov	r5, r4
    c8fe:	461c      	mov	r4, r3
    c900:	e7ea      	b.n	c8d8 <att_reset+0x34>
    c902:	bf00      	nop
    c904:	200007c0 	.word	0x200007c0

0000c908 <att_timeout>:
    c908:	4b0e      	ldr	r3, [pc, #56]	; (c944 <att_timeout+0x3c>)
    c90a:	490f      	ldr	r1, [pc, #60]	; (c948 <att_timeout+0x40>)
{
    c90c:	b570      	push	{r4, r5, r6, lr}
    c90e:	1ac9      	subs	r1, r1, r3
	struct bt_att *att = chan->att;
    c910:	4605      	mov	r5, r0
    c912:	08c9      	lsrs	r1, r1, #3
    c914:	f855 6de0 	ldr.w	r6, [r5, #-224]!
	BT_ERR("ATT Timeout");
    c918:	0189      	lsls	r1, r1, #6
    c91a:	f041 0101 	orr.w	r1, r1, #1
{
    c91e:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    c920:	480a      	ldr	r0, [pc, #40]	; (c94c <att_timeout+0x44>)
    c922:	f013 f865 	bl	1f9f0 <log_0>
	att_chan_detach(chan);
    c926:	4628      	mov	r0, r5
    c928:	f015 ff02 	bl	22730 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
    c92c:	6a75      	ldr	r5, [r6, #36]	; 0x24
    c92e:	b945      	cbnz	r5, c942 <att_timeout+0x3a>
	att_reset(att);
    c930:	4630      	mov	r0, r6
    c932:	f7ff ffb7 	bl	c8a4 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    c936:	f854 0cd8 	ldr.w	r0, [r4, #-216]
    c93a:	f001 fb45 	bl	dfc8 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    c93e:	f844 5cd8 	str.w	r5, [r4, #-216]
}
    c942:	bd70      	pop	{r4, r5, r6, pc}
    c944:	00024c24 	.word	0x00024c24
    c948:	00024c24 	.word	0x00024c24
    c94c:	00028458 	.word	0x00028458

0000c950 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    c950:	b510      	push	{r4, lr}
    c952:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    c954:	b348      	cbz	r0, c9aa <bt_att_req_cancel+0x5a>
    c956:	b341      	cbz	r1, c9aa <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
    c958:	f7ff f8d8 	bl	bb0c <att_get>
	if (!att) {
    c95c:	b328      	cbz	r0, c9aa <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c95e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    c960:	b15b      	cbz	r3, c97a <bt_att_req_cancel+0x2a>
    c962:	f5b3 7196 	subs.w	r1, r3, #300	; 0x12c
    c966:	d008      	beq.n	c97a <bt_att_req_cancel+0x2a>
    c968:	681b      	ldr	r3, [r3, #0]
    c96a:	b10b      	cbz	r3, c970 <bt_att_req_cancel+0x20>
    c96c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
	if (chan->req != req) {
    c970:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
    c974:	4294      	cmp	r4, r2
    c976:	d005      	beq.n	c984 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c978:	b963      	cbnz	r3, c994 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
    c97a:	4621      	mov	r1, r4
    c97c:	3004      	adds	r0, #4
    c97e:	f015 fb92 	bl	220a6 <sys_slist_find_and_remove>
    c982:	e002      	b.n	c98a <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
    c984:	4b09      	ldr	r3, [pc, #36]	; (c9ac <bt_att_req_cancel+0x5c>)
    c986:	f8c1 30c4 	str.w	r3, [r1, #196]	; 0xc4

	att_req_destroy(req);
    c98a:	4620      	mov	r0, r4
}
    c98c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
    c990:	f015 be90 	b.w	226b4 <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
    c994:	f513 7296 	adds.w	r2, r3, #300	; 0x12c
    c998:	d004      	beq.n	c9a4 <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c99a:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c99e:	b10a      	cbz	r2, c9a4 <bt_att_req_cancel+0x54>
    c9a0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
{
    c9a4:	4619      	mov	r1, r3
    c9a6:	4613      	mov	r3, r2
    c9a8:	e7e2      	b.n	c970 <bt_att_req_cancel+0x20>
}
    c9aa:	bd10      	pop	{r4, pc}
    c9ac:	200029f4 	.word	0x200029f4

0000c9b0 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    c9b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c9b2:	4c15      	ldr	r4, [pc, #84]	; (ca08 <find_cf_cfg+0x58>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    c9b4:	4605      	mov	r5, r0
    c9b6:	b140      	cbz	r0, c9ca <find_cf_cfg+0x1a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c9b8:	4622      	mov	r2, r4
    c9ba:	f812 1b01 	ldrb.w	r1, [r2], #1
    c9be:	f015 fa24 	bl	21e0a <bt_conn_is_peer_addr_le>
    c9c2:	b1b0      	cbz	r0, c9f2 <find_cf_cfg+0x42>
			return cfg;
		}
	}

	return NULL;
}
    c9c4:	4620      	mov	r0, r4
    c9c6:	b003      	add	sp, #12
    c9c8:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    c9ca:	9000      	str	r0, [sp, #0]
    c9cc:	4669      	mov	r1, sp
    c9ce:	f8cd 0003 	str.w	r0, [sp, #3]
    c9d2:	1c60      	adds	r0, r4, #1
    c9d4:	f015 ffe6 	bl	229a4 <bt_addr_le_cmp>
    c9d8:	2800      	cmp	r0, #0
    c9da:	d0f3      	beq.n	c9c4 <find_cf_cfg+0x14>
    c9dc:	4669      	mov	r1, sp
    c9de:	f104 0011 	add.w	r0, r4, #17
    c9e2:	9500      	str	r5, [sp, #0]
    c9e4:	f8cd 5003 	str.w	r5, [sp, #3]
    c9e8:	f015 ffdc 	bl	229a4 <bt_addr_le_cmp>
    c9ec:	b948      	cbnz	r0, ca02 <find_cf_cfg+0x52>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    c9ee:	3410      	adds	r4, #16
    c9f0:	e7e8      	b.n	c9c4 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c9f2:	7c21      	ldrb	r1, [r4, #16]
    c9f4:	f104 0211 	add.w	r2, r4, #17
    c9f8:	4628      	mov	r0, r5
    c9fa:	f015 fa06 	bl	21e0a <bt_conn_is_peer_addr_le>
    c9fe:	2800      	cmp	r0, #0
    ca00:	d1f5      	bne.n	c9ee <find_cf_cfg+0x3e>
	return NULL;
    ca02:	2400      	movs	r4, #0
    ca04:	e7de      	b.n	c9c4 <find_cf_cfg+0x14>
    ca06:	bf00      	nop
    ca08:	20002a10 	.word	0x20002a10

0000ca0c <find_sc_cfg>:
{
    ca0c:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    ca0e:	4c0d      	ldr	r4, [pc, #52]	; (ca44 <find_sc_cfg+0x38>)
    ca10:	7823      	ldrb	r3, [r4, #0]
    ca12:	4283      	cmp	r3, r0
{
    ca14:	4605      	mov	r5, r0
    ca16:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    ca18:	d009      	beq.n	ca2e <find_sc_cfg+0x22>
    ca1a:	7b23      	ldrb	r3, [r4, #12]
    ca1c:	42ab      	cmp	r3, r5
    ca1e:	d10f      	bne.n	ca40 <find_sc_cfg+0x34>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    ca20:	4809      	ldr	r0, [pc, #36]	; (ca48 <find_sc_cfg+0x3c>)
    ca22:	4631      	mov	r1, r6
    ca24:	f015 ffbe 	bl	229a4 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    ca28:	b950      	cbnz	r0, ca40 <find_sc_cfg+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    ca2a:	2001      	movs	r0, #1
    ca2c:	e004      	b.n	ca38 <find_sc_cfg+0x2c>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    ca2e:	1c60      	adds	r0, r4, #1
    ca30:	f015 ffb8 	bl	229a4 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    ca34:	2800      	cmp	r0, #0
    ca36:	d1f0      	bne.n	ca1a <find_sc_cfg+0xe>
			return &sc_cfg[i];
    ca38:	230c      	movs	r3, #12
    ca3a:	fb03 4000 	mla	r0, r3, r0, r4
    ca3e:	e000      	b.n	ca42 <find_sc_cfg+0x36>
	return NULL;
    ca40:	2000      	movs	r0, #0
}
    ca42:	bd70      	pop	{r4, r5, r6, pc}
    ca44:	20004292 	.word	0x20004292
    ca48:	2000429f 	.word	0x2000429f

0000ca4c <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
    ca4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ca4e:	4c15      	ldr	r4, [pc, #84]	; (caa4 <gatt_sub_find+0x58>)
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
    ca50:	4605      	mov	r5, r0
    ca52:	b140      	cbz	r0, ca66 <gatt_sub_find+0x1a>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
				return sub;
			}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    ca54:	4622      	mov	r2, r4
    ca56:	f812 1b01 	ldrb.w	r1, [r2], #1
    ca5a:	f015 f9d6 	bl	21e0a <bt_conn_is_peer_addr_le>
    ca5e:	b1b0      	cbz	r0, ca8e <gatt_sub_find+0x42>
			return sub;
		}
	}

	return NULL;
}
    ca60:	4620      	mov	r0, r4
    ca62:	b003      	add	sp, #12
    ca64:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
    ca66:	9000      	str	r0, [sp, #0]
    ca68:	4669      	mov	r1, sp
    ca6a:	f8cd 0003 	str.w	r0, [sp, #3]
    ca6e:	1c60      	adds	r0, r4, #1
    ca70:	f015 ff98 	bl	229a4 <bt_addr_le_cmp>
    ca74:	2800      	cmp	r0, #0
    ca76:	d0f3      	beq.n	ca60 <gatt_sub_find+0x14>
    ca78:	4669      	mov	r1, sp
    ca7a:	f104 0011 	add.w	r0, r4, #17
    ca7e:	9500      	str	r5, [sp, #0]
    ca80:	f8cd 5003 	str.w	r5, [sp, #3]
    ca84:	f015 ff8e 	bl	229a4 <bt_addr_le_cmp>
    ca88:	b948      	cbnz	r0, ca9e <gatt_sub_find+0x52>
		struct gatt_sub *sub = &subscriptions[i];
    ca8a:	3410      	adds	r4, #16
    ca8c:	e7e8      	b.n	ca60 <gatt_sub_find+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    ca8e:	7c21      	ldrb	r1, [r4, #16]
    ca90:	f104 0211 	add.w	r2, r4, #17
    ca94:	4628      	mov	r0, r5
    ca96:	f015 f9b8 	bl	21e0a <bt_conn_is_peer_addr_le>
    ca9a:	2800      	cmp	r0, #0
    ca9c:	d1f5      	bne.n	ca8a <gatt_sub_find+0x3e>
	return NULL;
    ca9e:	2400      	movs	r4, #0
    caa0:	e7de      	b.n	ca60 <gatt_sub_find+0x14>
    caa2:	bf00      	nop
    caa4:	20002a50 	.word	0x20002a50

0000caa8 <bt_gatt_attr_write_ccc>:
{
    caa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    caac:	461f      	mov	r7, r3
    caae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    cab2:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    cab6:	4606      	mov	r6, r0
    cab8:	4688      	mov	r8, r1
	if (offset) {
    caba:	2b00      	cmp	r3, #0
    cabc:	d151      	bne.n	cb62 <bt_gatt_attr_write_ccc+0xba>
	if (!len || len > sizeof(uint16_t)) {
    cabe:	1e7b      	subs	r3, r7, #1
    cac0:	2b01      	cmp	r3, #1
    cac2:	d851      	bhi.n	cb68 <bt_gatt_attr_write_ccc+0xc0>
	if (len < sizeof(uint16_t)) {
    cac4:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
    cac6:	7815      	ldrb	r5, [r2, #0]
    cac8:	bf18      	it	ne
    caca:	7852      	ldrbne	r2, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    cacc:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
    cace:	bf0c      	ite	eq
    cad0:	b2ad      	uxtheq	r5, r5
    cad2:	ea45 2502 	orrne.w	r5, r5, r2, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    cad6:	f015 ff68 	bl	229aa <find_ccc_cfg>
	if (!cfg) {
    cada:	4604      	mov	r4, r0
    cadc:	b9e8      	cbnz	r0, cb1a <bt_gatt_attr_write_ccc+0x72>
		if (!value) {
    cade:	b91d      	cbnz	r5, cae8 <bt_gatt_attr_write_ccc+0x40>
			return len;
    cae0:	4638      	mov	r0, r7
}
    cae2:	b003      	add	sp, #12
    cae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    cae8:	4649      	mov	r1, r9
    caea:	f015 ff5e 	bl	229aa <find_ccc_cfg>
		if (!cfg) {
    caee:	4604      	mov	r4, r0
    caf0:	b960      	cbnz	r0, cb0c <bt_gatt_attr_write_ccc+0x64>
    caf2:	4b1f      	ldr	r3, [pc, #124]	; (cb70 <bt_gatt_attr_write_ccc+0xc8>)
    caf4:	491f      	ldr	r1, [pc, #124]	; (cb74 <bt_gatt_attr_write_ccc+0xcc>)
			BT_WARN("No space to store CCC cfg");
    caf6:	4820      	ldr	r0, [pc, #128]	; (cb78 <bt_gatt_attr_write_ccc+0xd0>)
    caf8:	1ac9      	subs	r1, r1, r3
    cafa:	08c9      	lsrs	r1, r1, #3
    cafc:	0189      	lsls	r1, r1, #6
    cafe:	f041 0102 	orr.w	r1, r1, #2
    cb02:	f012 ff75 	bl	1f9f0 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    cb06:	f06f 0010 	mvn.w	r0, #16
    cb0a:	e7ea      	b.n	cae2 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    cb0c:	f106 0188 	add.w	r1, r6, #136	; 0x88
    cb10:	3001      	adds	r0, #1
    cb12:	f015 ff76 	bl	22a02 <bt_addr_le_copy>
		cfg->id = conn->id;
    cb16:	7a33      	ldrb	r3, [r6, #8]
    cb18:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    cb1a:	f8d9 301c 	ldr.w	r3, [r9, #28]
    cb1e:	b9a3      	cbnz	r3, cb4a <bt_gatt_attr_write_ccc+0xa2>
	if (cfg->value != ccc->value) {
    cb20:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
    cb24:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    cb26:	42ab      	cmp	r3, r5
    cb28:	d003      	beq.n	cb32 <bt_gatt_attr_write_ccc+0x8a>
		gatt_ccc_changed(attr, ccc);
    cb2a:	4649      	mov	r1, r9
    cb2c:	4640      	mov	r0, r8
    cb2e:	f015 feba 	bl	228a6 <gatt_ccc_changed>
	if (!value) {
    cb32:	2d00      	cmp	r5, #0
    cb34:	d1d4      	bne.n	cae0 <bt_gatt_attr_write_ccc+0x38>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    cb36:	4669      	mov	r1, sp
    cb38:	1c60      	adds	r0, r4, #1
    cb3a:	9500      	str	r5, [sp, #0]
    cb3c:	f8cd 5003 	str.w	r5, [sp, #3]
    cb40:	f015 ff5f 	bl	22a02 <bt_addr_le_copy>
	cfg->id = 0U;
    cb44:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    cb46:	8125      	strh	r5, [r4, #8]
}
    cb48:	e7ca      	b.n	cae0 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    cb4a:	462a      	mov	r2, r5
    cb4c:	4641      	mov	r1, r8
    cb4e:	4630      	mov	r0, r6
    cb50:	4798      	blx	r3
		if (write < 0) {
    cb52:	2800      	cmp	r0, #0
    cb54:	dbc5      	blt.n	cae2 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    cb56:	3801      	subs	r0, #1
    cb58:	2801      	cmp	r0, #1
    cb5a:	d9e1      	bls.n	cb20 <bt_gatt_attr_write_ccc+0x78>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    cb5c:	f06f 000d 	mvn.w	r0, #13
    cb60:	e7bf      	b.n	cae2 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    cb62:	f06f 0006 	mvn.w	r0, #6
    cb66:	e7bc      	b.n	cae2 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    cb68:	f06f 000c 	mvn.w	r0, #12
    cb6c:	e7b9      	b.n	cae2 <bt_gatt_attr_write_ccc+0x3a>
    cb6e:	bf00      	nop
    cb70:	00024c24 	.word	0x00024c24
    cb74:	00024cdc 	.word	0x00024cdc
    cb78:	0002846b 	.word	0x0002846b

0000cb7c <sc_save>:
{
    cb7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    cb80:	4680      	mov	r8, r0
    cb82:	460f      	mov	r7, r1
    cb84:	4616      	mov	r6, r2
    cb86:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    cb88:	f7ff ff40 	bl	ca0c <find_sc_cfg>
	if (!cfg) {
    cb8c:	4604      	mov	r4, r0
    cb8e:	b9c8      	cbnz	r0, cbc4 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    cb90:	4669      	mov	r1, sp
    cb92:	9000      	str	r0, [sp, #0]
    cb94:	f8cd 0003 	str.w	r0, [sp, #3]
    cb98:	f7ff ff38 	bl	ca0c <find_sc_cfg>
		if (!cfg) {
    cb9c:	4604      	mov	r4, r0
    cb9e:	b960      	cbnz	r0, cbba <sc_save+0x3e>
    cba0:	490f      	ldr	r1, [pc, #60]	; (cbe0 <sc_save+0x64>)
    cba2:	4b10      	ldr	r3, [pc, #64]	; (cbe4 <sc_save+0x68>)
			BT_ERR("unable to save SC: no cfg left");
    cba4:	4810      	ldr	r0, [pc, #64]	; (cbe8 <sc_save+0x6c>)
    cba6:	1ac9      	subs	r1, r1, r3
    cba8:	08c9      	lsrs	r1, r1, #3
    cbaa:	0189      	lsls	r1, r1, #6
    cbac:	f041 0101 	orr.w	r1, r1, #1
    cbb0:	f012 ff1e 	bl	1f9f0 <log_0>
}
    cbb4:	b002      	add	sp, #8
    cbb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    cbba:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    cbbe:	4639      	mov	r1, r7
    cbc0:	f015 ff1f 	bl	22a02 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    cbc4:	8922      	ldrh	r2, [r4, #8]
    cbc6:	8963      	ldrh	r3, [r4, #10]
    cbc8:	b91a      	cbnz	r2, cbd2 <sc_save+0x56>
    cbca:	b923      	cbnz	r3, cbd6 <sc_save+0x5a>
		cfg->data.start = start;
    cbcc:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    cbce:	8165      	strh	r5, [r4, #10]
    cbd0:	e7f0      	b.n	cbb4 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    cbd2:	4296      	cmp	r6, r2
    cbd4:	d302      	bcc.n	cbdc <sc_save+0x60>
    cbd6:	429d      	cmp	r5, r3
    cbd8:	d9ec      	bls.n	cbb4 <sc_save+0x38>
    cbda:	e7f8      	b.n	cbce <sc_save+0x52>
		*start = new_start;
    cbdc:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    cbde:	e7fa      	b.n	cbd6 <sc_save+0x5a>
    cbe0:	00024cdc 	.word	0x00024cdc
    cbe4:	00024c24 	.word	0x00024c24
    cbe8:	00028485 	.word	0x00028485

0000cbec <gatt_notify>:
{
    cbec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cbf0:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    cbf2:	8992      	ldrh	r2, [r2, #12]
{
    cbf4:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    cbf6:	3202      	adds	r2, #2
    cbf8:	211b      	movs	r1, #27
{
    cbfa:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    cbfc:	f7ff fab2 	bl	c164 <bt_att_create_pdu>
	if (!buf) {
    cc00:	4605      	mov	r5, r0
    cc02:	b1c8      	cbz	r0, cc38 <gatt_notify+0x4c>
	nfy = net_buf_add(buf, sizeof(*nfy));
    cc04:	f100 0908 	add.w	r9, r0, #8
    cc08:	2102      	movs	r1, #2
    cc0a:	4648      	mov	r0, r9
    cc0c:	f016 fe1e 	bl	2384c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    cc10:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    cc12:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
    cc14:	f826 8b02 	strh.w	r8, [r6], #2
	net_buf_add(buf, params->len);
    cc18:	4648      	mov	r0, r9
    cc1a:	f016 fe17 	bl	2384c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    cc1e:	89a2      	ldrh	r2, [r4, #12]
    cc20:	68a1      	ldr	r1, [r4, #8]
    cc22:	4630      	mov	r0, r6
    cc24:	f014 fd3f 	bl	216a6 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    cc28:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    cc2c:	4629      	mov	r1, r5
    cc2e:	4638      	mov	r0, r7
}
    cc30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    cc34:	f015 bdb7 	b.w	227a6 <bt_att_send>
    cc38:	4b06      	ldr	r3, [pc, #24]	; (cc54 <gatt_notify+0x68>)
    cc3a:	4907      	ldr	r1, [pc, #28]	; (cc58 <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
    cc3c:	4807      	ldr	r0, [pc, #28]	; (cc5c <gatt_notify+0x70>)
    cc3e:	1ac9      	subs	r1, r1, r3
    cc40:	08c9      	lsrs	r1, r1, #3
    cc42:	0189      	lsls	r1, r1, #6
    cc44:	f041 0102 	orr.w	r1, r1, #2
    cc48:	f012 fed2 	bl	1f9f0 <log_0>
}
    cc4c:	f06f 000b 	mvn.w	r0, #11
    cc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc54:	00024c24 	.word	0x00024c24
    cc58:	00024cdc 	.word	0x00024cdc
    cc5c:	000284a4 	.word	0x000284a4

0000cc60 <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    cc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc64:	4606      	mov	r6, r0
    cc66:	4688      	mov	r8, r1
    cc68:	4617      	mov	r7, r2
	if (params) {
    cc6a:	461c      	mov	r4, r3
    cc6c:	b34b      	cbz	r3, ccc2 <gatt_send.constprop.0+0x62>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    cc6e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    cc72:	2100      	movs	r1, #0
    cc74:	f7ff fd06 	bl	c684 <bt_att_req_alloc>
		if (!req) {
    cc78:	4605      	mov	r5, r0
    cc7a:	b920      	cbnz	r0, cc86 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
    cc7c:	f06f 040b 	mvn.w	r4, #11
}
    cc80:	4620      	mov	r0, r4
    cc82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
    cc86:	2300      	movs	r3, #0
		req->user_data = params;
    cc88:	6184      	str	r4, [r0, #24]
		req->buf = buf;
    cc8a:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    cc8e:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    cc90:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    cc92:	4601      	mov	r1, r0
    cc94:	4630      	mov	r0, r6
    cc96:	f015 fdd0 	bl	2283a <bt_att_req_send>
		if (err) {
    cc9a:	4604      	mov	r4, r0
    cc9c:	2800      	cmp	r0, #0
    cc9e:	d0ef      	beq.n	cc80 <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
    cca0:	4628      	mov	r0, r5
    cca2:	f7ff fd05 	bl	c6b0 <bt_att_req_free>
	if (err) {
    cca6:	2c00      	cmp	r4, #0
    cca8:	d0ea      	beq.n	cc80 <gatt_send.constprop.0+0x20>
    ccaa:	4b08      	ldr	r3, [pc, #32]	; (cccc <gatt_send.constprop.0+0x6c>)
    ccac:	4a08      	ldr	r2, [pc, #32]	; (ccd0 <gatt_send.constprop.0+0x70>)
		BT_ERR("Error sending ATT PDU: %d", err);
    ccae:	4809      	ldr	r0, [pc, #36]	; (ccd4 <gatt_send.constprop.0+0x74>)
    ccb0:	1ad2      	subs	r2, r2, r3
    ccb2:	08d2      	lsrs	r2, r2, #3
    ccb4:	0192      	lsls	r2, r2, #6
    ccb6:	f042 0201 	orr.w	r2, r2, #1
    ccba:	4621      	mov	r1, r4
    ccbc:	f012 fea5 	bl	1fa0a <log_1>
    ccc0:	e7de      	b.n	cc80 <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
    ccc2:	461a      	mov	r2, r3
    ccc4:	f015 fd6f 	bl	227a6 <bt_att_send>
    ccc8:	4604      	mov	r4, r0
    ccca:	e7ec      	b.n	cca6 <gatt_send.constprop.0+0x46>
    cccc:	00024c24 	.word	0x00024c24
    ccd0:	00024cdc 	.word	0x00024cdc
    ccd4:	000284cd 	.word	0x000284cd

0000ccd8 <gatt_indicate>:
{
    ccd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ccdc:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    ccde:	8a92      	ldrh	r2, [r2, #20]
{
    cce0:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    cce2:	3202      	adds	r2, #2
    cce4:	211d      	movs	r1, #29
{
    cce6:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    cce8:	f7ff fa3c 	bl	c164 <bt_att_create_pdu>
	if (!buf) {
    ccec:	4605      	mov	r5, r0
    ccee:	b1e8      	cbz	r0, cd2c <gatt_indicate+0x54>
	ind = net_buf_add(buf, sizeof(*ind));
    ccf0:	f100 0808 	add.w	r8, r0, #8
    ccf4:	2102      	movs	r1, #2
    ccf6:	4640      	mov	r0, r8
    ccf8:	f016 fda8 	bl	2384c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    ccfc:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    ccfe:	8aa1      	ldrh	r1, [r4, #20]
	ind->handle = sys_cpu_to_le16(handle);
    cd00:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    cd04:	4640      	mov	r0, r8
    cd06:	f016 fda1 	bl	2384c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    cd0a:	8aa2      	ldrh	r2, [r4, #20]
    cd0c:	6921      	ldr	r1, [r4, #16]
    cd0e:	4630      	mov	r0, r6
    cd10:	f014 fcc9 	bl	216a6 <memcpy>
	if (!params->func) {
    cd14:	68a3      	ldr	r3, [r4, #8]
    cd16:	b933      	cbnz	r3, cd26 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    cd18:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    cd1a:	4629      	mov	r1, r5
    cd1c:	4638      	mov	r0, r7
}
    cd1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    cd22:	f7ff bf9d 	b.w	cc60 <gatt_send.constprop.0>
    cd26:	4a08      	ldr	r2, [pc, #32]	; (cd48 <gatt_indicate+0x70>)
    cd28:	4623      	mov	r3, r4
    cd2a:	e7f6      	b.n	cd1a <gatt_indicate+0x42>
    cd2c:	4b07      	ldr	r3, [pc, #28]	; (cd4c <gatt_indicate+0x74>)
    cd2e:	4908      	ldr	r1, [pc, #32]	; (cd50 <gatt_indicate+0x78>)
		BT_WARN("No buffer available to send indication");
    cd30:	4808      	ldr	r0, [pc, #32]	; (cd54 <gatt_indicate+0x7c>)
    cd32:	1ac9      	subs	r1, r1, r3
    cd34:	08c9      	lsrs	r1, r1, #3
    cd36:	0189      	lsls	r1, r1, #6
    cd38:	f041 0102 	orr.w	r1, r1, #2
    cd3c:	f012 fe58 	bl	1f9f0 <log_0>
}
    cd40:	f06f 000b 	mvn.w	r0, #11
    cd44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cd48:	000228c3 	.word	0x000228c3
    cd4c:	00024c24 	.word	0x00024c24
    cd50:	00024cdc 	.word	0x00024cdc
    cd54:	000284e7 	.word	0x000284e7

0000cd58 <notify_cb>:
{
    cd58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    cd5c:	4b38      	ldr	r3, [pc, #224]	; (ce40 <notify_cb+0xe8>)
{
    cd5e:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    cd60:	6882      	ldr	r2, [r0, #8]
    cd62:	429a      	cmp	r2, r3
{
    cd64:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    cd66:	d003      	beq.n	cd70 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
    cd68:	2001      	movs	r0, #1
}
    cd6a:	b003      	add	sp, #12
    cd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    cd70:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    cd74:	4b33      	ldr	r3, [pc, #204]	; (ce44 <notify_cb+0xec>)
    cd76:	4599      	cmp	r9, r3
    cd78:	d01a      	beq.n	cdb0 <notify_cb+0x58>
    cd7a:	f109 0701 	add.w	r7, r9, #1
    cd7e:	f109 0a15 	add.w	sl, r9, #21
    cd82:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
    cd86:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    cd8a:	89a3      	ldrh	r3, [r4, #12]
    cd8c:	429a      	cmp	r2, r3
    cd8e:	d10b      	bne.n	cda8 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    cd90:	f817 0c01 	ldrb.w	r0, [r7, #-1]
    cd94:	4639      	mov	r1, r7
    cd96:	f7fe f985 	bl	b0a4 <bt_conn_lookup_addr_le>
		if (!conn) {
    cd9a:	4605      	mov	r5, r0
    cd9c:	b120      	cbz	r0, cda8 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
    cd9e:	7b43      	ldrb	r3, [r0, #13]
    cda0:	2b07      	cmp	r3, #7
    cda2:	d028      	beq.n	cdf6 <notify_cb+0x9e>
			bt_conn_unref(conn);
    cda4:	f015 f86c 	bl	21e80 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    cda8:	370a      	adds	r7, #10
    cdaa:	4557      	cmp	r7, sl
    cdac:	d0dc      	beq.n	cd68 <notify_cb+0x10>
    cdae:	e7ea      	b.n	cd86 <notify_cb+0x2e>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    cdb0:	2600      	movs	r6, #0
    cdb2:	4d25      	ldr	r5, [pc, #148]	; (ce48 <notify_cb+0xf0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    cdb4:	4637      	mov	r7, r6
    cdb6:	4669      	mov	r1, sp
    cdb8:	4628      	mov	r0, r5
    cdba:	9700      	str	r7, [sp, #0]
    cdbc:	f8cd 7003 	str.w	r7, [sp, #3]
    cdc0:	f015 fdf0 	bl	229a4 <bt_addr_le_cmp>
    cdc4:	b178      	cbz	r0, cde6 <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    cdc6:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    cdca:	2207      	movs	r2, #7
    cdcc:	4629      	mov	r1, r5
    cdce:	f7fe f9ad 	bl	b12c <bt_conn_lookup_state_le>
			if (!conn) {
    cdd2:	b968      	cbnz	r0, cdf0 <notify_cb+0x98>
				sc = (struct sc_data *)data->ind_params->data;
    cdd4:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    cdd6:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    cdda:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    cddc:	4629      	mov	r1, r5
    cdde:	8853      	ldrh	r3, [r2, #2]
    cde0:	8812      	ldrh	r2, [r2, #0]
    cde2:	f7ff fecb 	bl	cb7c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    cde6:	350c      	adds	r5, #12
    cde8:	2e00      	cmp	r6, #0
    cdea:	d1c6      	bne.n	cd7a <notify_cb+0x22>
    cdec:	2601      	movs	r6, #1
    cdee:	e7e2      	b.n	cdb6 <notify_cb+0x5e>
			bt_conn_unref(conn);
    cdf0:	f015 f846 	bl	21e80 <bt_conn_unref>
    cdf4:	e7f7      	b.n	cde6 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    cdf6:	f8d9 3020 	ldr.w	r3, [r9, #32]
    cdfa:	b123      	cbz	r3, ce06 <notify_cb+0xae>
    cdfc:	4641      	mov	r1, r8
    cdfe:	4798      	blx	r3
    ce00:	b908      	cbnz	r0, ce06 <notify_cb+0xae>
			bt_conn_unref(conn);
    ce02:	4628      	mov	r0, r5
    ce04:	e7ce      	b.n	cda4 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    ce06:	89a3      	ldrh	r3, [r4, #12]
    ce08:	88a1      	ldrh	r1, [r4, #4]
    ce0a:	6922      	ldr	r2, [r4, #16]
    ce0c:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    ce0e:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    ce10:	d10f      	bne.n	ce32 <notify_cb+0xda>
			err = gatt_indicate(conn, data->handle,
    ce12:	f7ff ff61 	bl	ccd8 <gatt_indicate>
			if (err == 0) {
    ce16:	4606      	mov	r6, r0
    ce18:	b918      	cbnz	r0, ce22 <notify_cb+0xca>
				data->ind_params->_ref++;
    ce1a:	6922      	ldr	r2, [r4, #16]
    ce1c:	7d93      	ldrb	r3, [r2, #22]
    ce1e:	3301      	adds	r3, #1
    ce20:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    ce22:	4628      	mov	r0, r5
    ce24:	f015 f82c 	bl	21e80 <bt_conn_unref>
		if (err < 0) {
    ce28:	2e00      	cmp	r6, #0
    ce2a:	db06      	blt.n	ce3a <notify_cb+0xe2>
		data->err = 0;
    ce2c:	f8c4 b008 	str.w	fp, [r4, #8]
    ce30:	e7ba      	b.n	cda8 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    ce32:	f7ff fedb 	bl	cbec <gatt_notify>
    ce36:	4606      	mov	r6, r0
    ce38:	e7f3      	b.n	ce22 <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    ce3a:	2000      	movs	r0, #0
    ce3c:	e795      	b.n	cd6a <notify_cb+0x12>
    ce3e:	bf00      	nop
    ce40:	0000caa9 	.word	0x0000caa9
    ce44:	200002f8 	.word	0x200002f8
    ce48:	20004293 	.word	0x20004293

0000ce4c <gatt_write_ccc.constprop.0>:
	if (params->write) {
		params->write(conn, err, NULL);
	}
}

static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    ce4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ce50:	4688      	mov	r8, r1
    ce52:	4617      	mov	r7, r2
			  struct bt_gatt_subscribe_params *params)
{
	struct net_buf *buf;
	struct bt_att_write_req *req;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    ce54:	2112      	movs	r1, #18
    ce56:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    ce58:	4606      	mov	r6, r0
    ce5a:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    ce5c:	f7ff f982 	bl	c164 <bt_att_create_pdu>
				sizeof(*req) + sizeof(uint16_t));
	if (!buf) {
    ce60:	4604      	mov	r4, r0
    ce62:	b308      	cbz	r0, cea8 <gatt_write_ccc.constprop.0+0x5c>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    ce64:	f100 0908 	add.w	r9, r0, #8
    ce68:	2102      	movs	r1, #2
    ce6a:	4648      	mov	r0, r9
    ce6c:	f016 fcee 	bl	2384c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(handle);
	net_buf_add_le16(buf, value);
    ce70:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
    ce72:	f8a0 8000 	strh.w	r8, [r0]
	net_buf_add_le16(buf, value);
    ce76:	4648      	mov	r0, r9
    ce78:	f016 fcff 	bl	2387a <net_buf_simple_add_le16>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ce7c:	f3bf 8f5b 	dmb	ish
    ce80:	f105 0310 	add.w	r3, r5, #16
    ce84:	e853 2f00 	ldrex	r2, [r3]
    ce88:	f042 0204 	orr.w	r2, r2, #4
    ce8c:	e843 2100 	strex	r1, r2, [r3]
    ce90:	2900      	cmp	r1, #0
    ce92:	d1f7      	bne.n	ce84 <gatt_write_ccc.constprop.0+0x38>
    ce94:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle 0x%04x value 0x%04x", handle, value);

	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);

	return gatt_send(conn, buf, func, params, NULL);
    ce98:	462b      	mov	r3, r5
    ce9a:	4621      	mov	r1, r4
    ce9c:	4630      	mov	r0, r6
    ce9e:	4a04      	ldr	r2, [pc, #16]	; (ceb0 <gatt_write_ccc.constprop.0+0x64>)
}
    cea0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    cea4:	f7ff bedc 	b.w	cc60 <gatt_send.constprop.0>
}
    cea8:	f06f 000b 	mvn.w	r0, #11
    ceac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ceb0:	00022c21 	.word	0x00022c21

0000ceb4 <cf_write>:
{
    ceb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ceb8:	461f      	mov	r7, r3
    ceba:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    cebe:	2b01      	cmp	r3, #1
{
    cec0:	4680      	mov	r8, r0
    cec2:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
    cec4:	d847      	bhi.n	cf56 <cf_write+0xa2>
	if (offset + len > sizeof(cfg->data)) {
    cec6:	443b      	add	r3, r7
    cec8:	2b01      	cmp	r3, #1
    ceca:	463d      	mov	r5, r7
    cecc:	dc46      	bgt.n	cf5c <cf_write+0xa8>
	cfg = find_cf_cfg(conn);
    cece:	f7ff fd6f 	bl	c9b0 <find_cf_cfg>
	if (!cfg) {
    ced2:	4604      	mov	r4, r0
    ced4:	b990      	cbnz	r0, cefc <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
    ced6:	f7ff fd6b 	bl	c9b0 <find_cf_cfg>
	if (!cfg) {
    ceda:	4604      	mov	r4, r0
    cedc:	b970      	cbnz	r0, cefc <cf_write+0x48>
    cede:	4b22      	ldr	r3, [pc, #136]	; (cf68 <cf_write+0xb4>)
    cee0:	4922      	ldr	r1, [pc, #136]	; (cf6c <cf_write+0xb8>)
		BT_WARN("No space to store Client Supported Features");
    cee2:	4823      	ldr	r0, [pc, #140]	; (cf70 <cf_write+0xbc>)
    cee4:	1ac9      	subs	r1, r1, r3
    cee6:	08c9      	lsrs	r1, r1, #3
    cee8:	0189      	lsls	r1, r1, #6
    ceea:	f041 0102 	orr.w	r1, r1, #2
    ceee:	f012 fd7f 	bl	1f9f0 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    cef2:	f06f 0510 	mvn.w	r5, #16
}
    cef6:	4628      	mov	r0, r5
    cef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
    cefc:	4632      	mov	r2, r6
    cefe:	eb07 0c06 	add.w	ip, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
    cf02:	4562      	cmp	r2, ip
    cf04:	d114      	bne.n	cf30 <cf_write+0x7c>
	for (i = 0U; i < len && i < last_byte; i++) {
    cf06:	b12f      	cbz	r7, cf14 <cf_write+0x60>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    cf08:	7833      	ldrb	r3, [r6, #0]
    cf0a:	7a22      	ldrb	r2, [r4, #8]
    cf0c:	f003 0307 	and.w	r3, r3, #7
    cf10:	4313      	orrs	r3, r2
    cf12:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    cf14:	f108 0188 	add.w	r1, r8, #136	; 0x88
    cf18:	1c60      	adds	r0, r4, #1
    cf1a:	f015 fd72 	bl	22a02 <bt_addr_le_copy>
	cfg->id = conn->id;
    cf1e:	4620      	mov	r0, r4
    cf20:	f898 3008 	ldrb.w	r3, [r8, #8]
    cf24:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    cf28:	2100      	movs	r1, #0
    cf2a:	f015 fd96 	bl	22a5a <atomic_set_bit>
	return len;
    cf2e:	e7e2      	b.n	cef6 <cf_write+0x42>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    cf30:	f812 1b01 	ldrb.w	r1, [r2], #1
    cf34:	7a20      	ldrb	r0, [r4, #8]
    cf36:	2300      	movs	r3, #0
    cf38:	4041      	eors	r1, r0
			if ((BIT(bit) & chg_bits) &&
    cf3a:	fa21 fe03 	lsr.w	lr, r1, r3
    cf3e:	f01e 0f01 	tst.w	lr, #1
    cf42:	d004      	beq.n	cf4e <cf_write+0x9a>
    cf44:	fa20 fe03 	lsr.w	lr, r0, r3
    cf48:	f01e 0f01 	tst.w	lr, #1
    cf4c:	d109      	bne.n	cf62 <cf_write+0xae>
		for (bit = 0U; bit <= last_bit; bit++) {
    cf4e:	3301      	adds	r3, #1
    cf50:	2b03      	cmp	r3, #3
    cf52:	d1f2      	bne.n	cf3a <cf_write+0x86>
    cf54:	e7d5      	b.n	cf02 <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    cf56:	f06f 0506 	mvn.w	r5, #6
    cf5a:	e7cc      	b.n	cef6 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    cf5c:	f06f 050c 	mvn.w	r5, #12
    cf60:	e7c9      	b.n	cef6 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    cf62:	f06f 0512 	mvn.w	r5, #18
    cf66:	e7c6      	b.n	cef6 <cf_write+0x42>
    cf68:	00024c24 	.word	0x00024c24
    cf6c:	00024cdc 	.word	0x00024cdc
    cf70:	0002850e 	.word	0x0002850e

0000cf74 <sc_indicate_rsp>:
{
    cf74:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    cf76:	4915      	ldr	r1, [pc, #84]	; (cfcc <sc_indicate_rsp+0x58>)
    cf78:	f3bf 8f5b 	dmb	ish
    cf7c:	4604      	mov	r4, r0
    cf7e:	f101 0350 	add.w	r3, r1, #80	; 0x50
    cf82:	e853 2f00 	ldrex	r2, [r3]
    cf86:	f022 0202 	bic.w	r2, r2, #2
    cf8a:	e843 2000 	strex	r0, r2, [r3]
    cf8e:	2800      	cmp	r0, #0
    cf90:	d1f7      	bne.n	cf82 <sc_indicate_rsp+0xe>
    cf92:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cf96:	f3bf 8f5b 	dmb	ish
    cf9a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    cf9c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    cfa0:	07da      	lsls	r2, r3, #31
    cfa2:	d505      	bpl.n	cfb0 <sc_indicate_rsp+0x3c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    cfa4:	480a      	ldr	r0, [pc, #40]	; (cfd0 <sc_indicate_rsp+0x5c>)
    cfa6:	2200      	movs	r2, #0
    cfa8:	2300      	movs	r3, #0
    cfaa:	3120      	adds	r1, #32
    cfac:	f011 fcca 	bl	1e944 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    cfb0:	4620      	mov	r0, r4
    cfb2:	f7ff fcfd 	bl	c9b0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    cfb6:	b140      	cbz	r0, cfca <sc_indicate_rsp+0x56>
    cfb8:	7a03      	ldrb	r3, [r0, #8]
    cfba:	07db      	lsls	r3, r3, #31
    cfbc:	d505      	bpl.n	cfca <sc_indicate_rsp+0x56>
}
    cfbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    cfc2:	2100      	movs	r1, #0
    cfc4:	300c      	adds	r0, #12
    cfc6:	f015 bd48 	b.w	22a5a <atomic_set_bit>
}
    cfca:	bd10      	pop	{r4, pc}
    cfcc:	20001038 	.word	0x20001038
    cfd0:	200014c8 	.word	0x200014c8

0000cfd4 <read_ppcp>:
{
    cfd4:	b513      	push	{r0, r1, r4, lr}
    cfd6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    cfda:	4c0b      	ldr	r4, [pc, #44]	; (d008 <read_ppcp+0x34>)
{
    cfdc:	4610      	mov	r0, r2
	if (offset > value_len) {
    cfde:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    cfe0:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    cfe4:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    cfe8:	d80b      	bhi.n	d002 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    cfea:	f1c1 0408 	rsb	r4, r1, #8
    cfee:	429c      	cmp	r4, r3
    cff0:	bfa8      	it	ge
    cff2:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
    cff4:	4622      	mov	r2, r4
    cff6:	4469      	add	r1, sp
    cff8:	f014 fb55 	bl	216a6 <memcpy>
}
    cffc:	4620      	mov	r0, r4
    cffe:	b002      	add	sp, #8
    d000:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d002:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    d006:	e7f9      	b.n	cffc <read_ppcp+0x28>
    d008:	00280018 	.word	0x00280018

0000d00c <disconnected_cb>:
{
    d00c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d010:	4b2b      	ldr	r3, [pc, #172]	; (d0c0 <disconnected_cb+0xb4>)
{
    d012:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d014:	6882      	ldr	r2, [r0, #8]
    d016:	429a      	cmp	r2, r3
{
    d018:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    d01a:	d12f      	bne.n	d07c <disconnected_cb+0x70>
	ccc = attr->user_data;
    d01c:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    d01e:	8aab      	ldrh	r3, [r5, #20]
    d020:	b363      	cbz	r3, d07c <disconnected_cb+0x70>
				if (ccc == &sc_ccc) {
    d022:	f8df b0a0 	ldr.w	fp, [pc, #160]	; d0c4 <disconnected_cb+0xb8>
    d026:	1c6c      	adds	r4, r5, #1
    d028:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
    d02c:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d030:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
    d034:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    d038:	b19b      	cbz	r3, d062 <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d03a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    d03e:	4622      	mov	r2, r4
    d040:	4630      	mov	r0, r6
    d042:	f014 fee2 	bl	21e0a <bt_conn_is_peer_addr_le>
    d046:	b9e8      	cbnz	r0, d084 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    d048:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    d04c:	4621      	mov	r1, r4
    d04e:	f7fe f829 	bl	b0a4 <bt_conn_lookup_addr_le>
			if (tmp) {
    d052:	b130      	cbz	r0, d062 <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
    d054:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
    d056:	2b07      	cmp	r3, #7
    d058:	bf08      	it	eq
    d05a:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
    d05e:	f014 ff0f 	bl	21e80 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    d062:	340a      	adds	r4, #10
    d064:	4554      	cmp	r4, sl
    d066:	d1e5      	bne.n	d034 <disconnected_cb+0x28>
	if (!value_used) {
    d068:	f1b8 0f00 	cmp.w	r8, #0
    d06c:	d106      	bne.n	d07c <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
    d06e:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
    d070:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
    d074:	b113      	cbz	r3, d07c <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
    d076:	4641      	mov	r1, r8
    d078:	4638      	mov	r0, r7
    d07a:	4798      	blx	r3
}
    d07c:	2001      	movs	r0, #1
    d07e:	b003      	add	sp, #12
    d080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d084:	7a30      	ldrb	r0, [r6, #8]
    d086:	4649      	mov	r1, r9
    d088:	f014 fdba 	bl	21c00 <bt_addr_le_is_bonded>
    d08c:	b990      	cbnz	r0, d0b4 <disconnected_cb+0xa8>
				if (ccc == &sc_ccc) {
    d08e:	455d      	cmp	r5, fp
    d090:	d102      	bne.n	d098 <disconnected_cb+0x8c>
					sc_clear(conn);
    d092:	4630      	mov	r0, r6
    d094:	f015 fdff 	bl	22c96 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    d098:	2300      	movs	r3, #0
    d09a:	4669      	mov	r1, sp
    d09c:	4620      	mov	r0, r4
    d09e:	9300      	str	r3, [sp, #0]
    d0a0:	f8cd 3003 	str.w	r3, [sp, #3]
    d0a4:	f015 fcad 	bl	22a02 <bt_addr_le_copy>
	cfg->id = 0U;
    d0a8:	2300      	movs	r3, #0
    d0aa:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
    d0ae:	f8a4 3007 	strh.w	r3, [r4, #7]
}
    d0b2:	e7d6      	b.n	d062 <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d0b4:	4649      	mov	r1, r9
    d0b6:	4620      	mov	r0, r4
    d0b8:	f015 fca3 	bl	22a02 <bt_addr_le_copy>
    d0bc:	e7d1      	b.n	d062 <disconnected_cb+0x56>
    d0be:	bf00      	nop
    d0c0:	0000caa9 	.word	0x0000caa9
    d0c4:	200002f8 	.word	0x200002f8

0000d0c8 <bt_gatt_init>:
{
    d0c8:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d0ca:	4b22      	ldr	r3, [pc, #136]	; (d154 <bt_gatt_init+0x8c>)
    d0cc:	f3bf 8f5b 	dmb	ish
    d0d0:	2201      	movs	r2, #1
    d0d2:	e853 1f00 	ldrex	r1, [r3]
    d0d6:	2900      	cmp	r1, #0
    d0d8:	d103      	bne.n	d0e2 <bt_gatt_init+0x1a>
    d0da:	e843 2000 	strex	r0, r2, [r3]
    d0de:	2800      	cmp	r0, #0
    d0e0:	d1f7      	bne.n	d0d2 <bt_gatt_init+0xa>
    d0e2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    d0e6:	d12e      	bne.n	d146 <bt_gatt_init+0x7e>
    d0e8:	f3bf 8f5b 	dmb	ish
    d0ec:	4b1a      	ldr	r3, [pc, #104]	; (d158 <bt_gatt_init+0x90>)
    d0ee:	e853 1f00 	ldrex	r1, [r3]
    d0f2:	2900      	cmp	r1, #0
    d0f4:	d103      	bne.n	d0fe <bt_gatt_init+0x36>
    d0f6:	e843 2000 	strex	r0, r2, [r3]
    d0fa:	2800      	cmp	r0, #0
    d0fc:	d1f7      	bne.n	d0ee <bt_gatt_init+0x26>
    d0fe:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    d102:	d108      	bne.n	d116 <bt_gatt_init+0x4e>
    d104:	4a15      	ldr	r2, [pc, #84]	; (d15c <bt_gatt_init+0x94>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    d106:	4916      	ldr	r1, [pc, #88]	; (d160 <bt_gatt_init+0x98>)
    d108:	8813      	ldrh	r3, [r2, #0]
    d10a:	4c16      	ldr	r4, [pc, #88]	; (d164 <bt_gatt_init+0x9c>)
	if (!atomic_cas(&service_init, 0, 1)) {
    d10c:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    d10e:	42a1      	cmp	r1, r4
    d110:	d31a      	bcc.n	d148 <bt_gatt_init+0x80>
    d112:	b100      	cbz	r0, d116 <bt_gatt_init+0x4e>
    d114:	8013      	strh	r3, [r2, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    d116:	4c14      	ldr	r4, [pc, #80]	; (d168 <bt_gatt_init+0xa0>)
    d118:	2230      	movs	r2, #48	; 0x30
    d11a:	2100      	movs	r1, #0
    d11c:	4620      	mov	r0, r4
    d11e:	f014 faed 	bl	216fc <memset>
    d122:	4b12      	ldr	r3, [pc, #72]	; (d16c <bt_gatt_init+0xa4>)
    d124:	6063      	str	r3, [r4, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d126:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    d128:	4c11      	ldr	r4, [pc, #68]	; (d170 <bt_gatt_init+0xa8>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d12a:	4812      	ldr	r0, [pc, #72]	; (d174 <bt_gatt_init+0xac>)
    d12c:	2300      	movs	r3, #0
    d12e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d132:	f011 fc07 	bl	1e944 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    d136:	2230      	movs	r2, #48	; 0x30
    d138:	2100      	movs	r1, #0
    d13a:	f104 0020 	add.w	r0, r4, #32
    d13e:	f014 fadd 	bl	216fc <memset>
    d142:	4b0d      	ldr	r3, [pc, #52]	; (d178 <bt_gatt_init+0xb0>)
    d144:	6263      	str	r3, [r4, #36]	; 0x24
}
    d146:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    d148:	6848      	ldr	r0, [r1, #4]
    d14a:	4403      	add	r3, r0
    d14c:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    d14e:	3108      	adds	r1, #8
    d150:	2001      	movs	r0, #1
    d152:	e7dc      	b.n	d10e <bt_gatt_init+0x46>
    d154:	20002a30 	.word	0x20002a30
    d158:	20002a4c 	.word	0x20002a4c
    d15c:	20004290 	.word	0x20004290
    d160:	00024bf8 	.word	0x00024bf8
    d164:	00024c10 	.word	0x00024c10
    d168:	20001008 	.word	0x20001008
    d16c:	00022dbd 	.word	0x00022dbd
    d170:	20001038 	.word	0x20001038
    d174:	200014c8 	.word	0x200014c8
    d178:	0000d415 	.word	0x0000d415

0000d17c <bt_gatt_attr_get_handle>:
{
    d17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    d180:	4603      	mov	r3, r0
    d182:	b148      	cbz	r0, d198 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    d184:	8a00      	ldrh	r0, [r0, #16]
    d186:	b938      	cbnz	r0, d198 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d188:	4912      	ldr	r1, [pc, #72]	; (d1d4 <bt_gatt_attr_get_handle+0x58>)
    d18a:	f8df e04c 	ldr.w	lr, [pc, #76]	; d1d8 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    d18e:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    d190:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d194:	4571      	cmp	r1, lr
    d196:	d301      	bcc.n	d19c <bt_gatt_attr_get_handle+0x20>
}
    d198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
    d19c:	e9d1 7600 	ldrd	r7, r6, [r1]
    d1a0:	42bb      	cmp	r3, r7
    d1a2:	d304      	bcc.n	d1ae <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    d1a4:	fb0c 7206 	mla	r2, ip, r6, r7
    d1a8:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    d1aa:	4293      	cmp	r3, r2
    d1ac:	d90e      	bls.n	d1cc <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    d1ae:	19a2      	adds	r2, r4, r6
    d1b0:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d1b2:	3108      	adds	r1, #8
    d1b4:	4614      	mov	r4, r2
    d1b6:	e7ed      	b.n	d194 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    d1b8:	fb0c 7805 	mla	r8, ip, r5, r7
    d1bc:	4543      	cmp	r3, r8
    d1be:	d007      	beq.n	d1d0 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    d1c0:	3501      	adds	r5, #1
    d1c2:	1962      	adds	r2, r4, r5
    d1c4:	42b5      	cmp	r5, r6
    d1c6:	b292      	uxth	r2, r2
    d1c8:	d1f6      	bne.n	d1b8 <bt_gatt_attr_get_handle+0x3c>
    d1ca:	e7f2      	b.n	d1b2 <bt_gatt_attr_get_handle+0x36>
    d1cc:	2500      	movs	r5, #0
    d1ce:	e7f8      	b.n	d1c2 <bt_gatt_attr_get_handle+0x46>
    d1d0:	4610      	mov	r0, r2
    d1d2:	e7e1      	b.n	d198 <bt_gatt_attr_get_handle+0x1c>
    d1d4:	00024bf8 	.word	0x00024bf8
    d1d8:	00024c10 	.word	0x00024c10

0000d1dc <bt_gatt_foreach_attr_type>:
{
    d1dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1e0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    d1e4:	9100      	str	r1, [sp, #0]
    d1e6:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    d1e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d1ec:	2d00      	cmp	r5, #0
    d1ee:	bf08      	it	eq
    d1f0:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    d1f2:	4b24      	ldr	r3, [pc, #144]	; (d284 <bt_gatt_foreach_attr_type+0xa8>)
    d1f4:	881b      	ldrh	r3, [r3, #0]
    d1f6:	4283      	cmp	r3, r0
{
    d1f8:	4607      	mov	r7, r0
    d1fa:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    d1fc:	d23c      	bcs.n	d278 <bt_gatt_foreach_attr_type+0x9c>
}
    d1fe:	b003      	add	sp, #12
    d200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    d204:	6873      	ldr	r3, [r6, #4]
    d206:	4423      	add	r3, r4
    d208:	42bb      	cmp	r3, r7
    d20a:	d232      	bcs.n	d272 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    d20c:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d20e:	3608      	adds	r6, #8
    d210:	4b1d      	ldr	r3, [pc, #116]	; (d288 <bt_gatt_foreach_attr_type+0xac>)
    d212:	429e      	cmp	r6, r3
    d214:	d3f6      	bcc.n	d204 <bt_gatt_foreach_attr_type+0x28>
    d216:	e7f2      	b.n	d1fe <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    d218:	5889      	ldr	r1, [r1, r2]
    d21a:	9301      	str	r3, [sp, #4]
    d21c:	4640      	mov	r0, r8
    d21e:	f014 fb1e 	bl	2185e <bt_uuid_cmp>
    d222:	9b01      	ldr	r3, [sp, #4]
    d224:	b190      	cbz	r0, d24c <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    d226:	3401      	adds	r4, #1
    d228:	f10a 0a01 	add.w	sl, sl, #1
    d22c:	b2a4      	uxth	r4, r4
    d22e:	6873      	ldr	r3, [r6, #4]
    d230:	4553      	cmp	r3, sl
    d232:	d9ec      	bls.n	d20e <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    d234:	9b00      	ldr	r3, [sp, #0]
    d236:	429c      	cmp	r4, r3
    d238:	d8e1      	bhi.n	d1fe <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    d23a:	42bc      	cmp	r4, r7
    d23c:	d3f3      	bcc.n	d226 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    d23e:	6831      	ldr	r1, [r6, #0]
    d240:	fb0b f20a 	mul.w	r2, fp, sl
    d244:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    d246:	f1b8 0f00 	cmp.w	r8, #0
    d24a:	d1e5      	bne.n	d218 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    d24c:	f1b9 0f00 	cmp.w	r9, #0
    d250:	d10b      	bne.n	d26a <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    d252:	3d01      	subs	r5, #1
    d254:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    d256:	4618      	mov	r0, r3
    d258:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d25a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d25c:	4621      	mov	r1, r4
    d25e:	4798      	blx	r3
	if (!*num_matches) {
    d260:	2d00      	cmp	r5, #0
    d262:	d0cc      	beq.n	d1fe <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    d264:	2800      	cmp	r0, #0
    d266:	d1de      	bne.n	d226 <bt_gatt_foreach_attr_type+0x4a>
    d268:	e7c9      	b.n	d1fe <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    d26a:	68da      	ldr	r2, [r3, #12]
    d26c:	4591      	cmp	r9, r2
    d26e:	d1da      	bne.n	d226 <bt_gatt_foreach_attr_type+0x4a>
    d270:	e7ef      	b.n	d252 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    d272:	f04f 0a00 	mov.w	sl, #0
    d276:	e7da      	b.n	d22e <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d278:	4e04      	ldr	r6, [pc, #16]	; (d28c <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    d27a:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    d27c:	f04f 0b14 	mov.w	fp, #20
    d280:	e7c6      	b.n	d210 <bt_gatt_foreach_attr_type+0x34>
    d282:	bf00      	nop
    d284:	20004290 	.word	0x20004290
    d288:	00024c10 	.word	0x00024c10
    d28c:	00024bf8 	.word	0x00024bf8

0000d290 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
    d290:	b510      	push	{r4, lr}
    d292:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    d294:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    d296:	aa1c      	add	r2, sp, #112	; 0x70
    d298:	4669      	mov	r1, sp
    d29a:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    d29c:	e9cd 3300 	strd	r3, r3, [sp]
    d2a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    d2a4:	f014 f8e4 	bl	21470 <tc_cmac_setup>
    d2a8:	b958      	cbnz	r0, d2c2 <db_hash_gen.isra.0+0x32>
    d2aa:	4917      	ldr	r1, [pc, #92]	; (d308 <db_hash_gen.isra.0+0x78>)
    d2ac:	4b17      	ldr	r3, [pc, #92]	; (d30c <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to setup AES CMAC");
    d2ae:	4818      	ldr	r0, [pc, #96]	; (d310 <db_hash_gen.isra.0+0x80>)
    d2b0:	1ac9      	subs	r1, r1, r3
    d2b2:	08c9      	lsrs	r1, r1, #3
    d2b4:	0189      	lsls	r1, r1, #6
    d2b6:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    d2ba:	f012 fb99 	bl	1f9f0 <log_0>
}
    d2be:	b048      	add	sp, #288	; 0x120
    d2c0:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    d2c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d2c6:	2001      	movs	r0, #1
    d2c8:	4a12      	ldr	r2, [pc, #72]	; (d314 <db_hash_gen.isra.0+0x84>)
    d2ca:	ab04      	add	r3, sp, #16
    d2cc:	f015 fd6b 	bl	22da6 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    d2d0:	4811      	ldr	r0, [pc, #68]	; (d318 <db_hash_gen.isra.0+0x88>)
    d2d2:	a904      	add	r1, sp, #16
    d2d4:	f014 f963 	bl	2159e <tc_cmac_final>
    d2d8:	b940      	cbnz	r0, d2ec <db_hash_gen.isra.0+0x5c>
    d2da:	490b      	ldr	r1, [pc, #44]	; (d308 <db_hash_gen.isra.0+0x78>)
    d2dc:	4b0b      	ldr	r3, [pc, #44]	; (d30c <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to calculate hash");
    d2de:	480f      	ldr	r0, [pc, #60]	; (d31c <db_hash_gen.isra.0+0x8c>)
    d2e0:	1ac9      	subs	r1, r1, r3
    d2e2:	08c9      	lsrs	r1, r1, #3
    d2e4:	0189      	lsls	r1, r1, #6
    d2e6:	f041 0101 	orr.w	r1, r1, #1
    d2ea:	e7e6      	b.n	d2ba <db_hash_gen.isra.0+0x2a>
    d2ec:	4b0a      	ldr	r3, [pc, #40]	; (d318 <db_hash_gen.isra.0+0x88>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    d2ee:	2208      	movs	r2, #8
    d2f0:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    d2f4:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    d2f6:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    d2fa:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    d2fe:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    d300:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    d302:	d1f7      	bne.n	d2f4 <db_hash_gen.isra.0+0x64>
    d304:	e7db      	b.n	d2be <db_hash_gen.isra.0+0x2e>
    d306:	bf00      	nop
    d308:	00024cdc 	.word	0x00024cdc
    d30c:	00024c24 	.word	0x00024c24
    d310:	0002853a 	.word	0x0002853a
    d314:	000228f9 	.word	0x000228f9
    d318:	2000682c 	.word	0x2000682c
    d31c:	00028553 	.word	0x00028553

0000d320 <bt_gatt_indicate>:
{
    d320:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d322:	4b39      	ldr	r3, [pc, #228]	; (d408 <bt_gatt_indicate+0xe8>)
    d324:	f3bf 8f5b 	dmb	ish
    d328:	681b      	ldr	r3, [r3, #0]
    d32a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    d32e:	079a      	lsls	r2, r3, #30
{
    d330:	b08b      	sub	sp, #44	; 0x2c
    d332:	4604      	mov	r4, r0
    d334:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    d336:	d561      	bpl.n	d3fc <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    d338:	6848      	ldr	r0, [r1, #4]
    d33a:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    d33c:	b114      	cbz	r4, d344 <bt_gatt_indicate+0x24>
    d33e:	7b63      	ldrb	r3, [r4, #13]
    d340:	2b07      	cmp	r3, #7
    d342:	d15e      	bne.n	d402 <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    d344:	f7ff ff1a 	bl	d17c <bt_gatt_attr_get_handle>
    d348:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    d34c:	b918      	cbnz	r0, d356 <bt_gatt_indicate+0x36>
		return -ENOENT;
    d34e:	f06f 0001 	mvn.w	r0, #1
}
    d352:	b00b      	add	sp, #44	; 0x2c
    d354:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    d356:	682a      	ldr	r2, [r5, #0]
    d358:	b9ba      	cbnz	r2, d38a <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    d35a:	9b05      	ldr	r3, [sp, #20]
    d35c:	6818      	ldr	r0, [r3, #0]
    d35e:	2300      	movs	r3, #0
    d360:	f88d 3010 	strb.w	r3, [sp, #16]
    d364:	a904      	add	r1, sp, #16
    d366:	f642 0303 	movw	r3, #10243	; 0x2803
    d36a:	f8ad 3012 	strh.w	r3, [sp, #18]
    d36e:	f014 fa76 	bl	2185e <bt_uuid_cmp>
    d372:	b1d0      	cbz	r0, d3aa <bt_gatt_indicate+0x8a>
	if (conn) {
    d374:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    d378:	b324      	cbz	r4, d3c4 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    d37a:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    d37c:	4601      	mov	r1, r0
		params->_ref = 1;
    d37e:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    d380:	462a      	mov	r2, r5
    d382:	4620      	mov	r0, r4
    d384:	f7ff fca8 	bl	ccd8 <gatt_indicate>
    d388:	e7e3      	b.n	d352 <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    d38a:	a905      	add	r1, sp, #20
    d38c:	9102      	str	r1, [sp, #8]
    d38e:	491f      	ldr	r1, [pc, #124]	; (d40c <bt_gatt_indicate+0xec>)
    d390:	9101      	str	r1, [sp, #4]
    d392:	2101      	movs	r1, #1
	found->attr = NULL;
    d394:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    d396:	9100      	str	r1, [sp, #0]
    d398:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    d39c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    d39e:	f7ff ff1d 	bl	d1dc <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    d3a2:	9b05      	ldr	r3, [sp, #20]
    d3a4:	2b00      	cmp	r3, #0
    d3a6:	d1d8      	bne.n	d35a <bt_gatt_indicate+0x3a>
    d3a8:	e7d1      	b.n	d34e <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    d3aa:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    d3ac:	68c3      	ldr	r3, [r0, #12]
    d3ae:	799b      	ldrb	r3, [r3, #6]
    d3b0:	069b      	lsls	r3, r3, #26
    d3b2:	d402      	bmi.n	d3ba <bt_gatt_indicate+0x9a>
			return -EINVAL;
    d3b4:	f06f 0015 	mvn.w	r0, #21
    d3b8:	e7cb      	b.n	d352 <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    d3ba:	f015 fca6 	bl	22d0a <bt_gatt_attr_value_handle>
    d3be:	f8ad 0018 	strh.w	r0, [sp, #24]
    d3c2:	e7d7      	b.n	d374 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
    d3c4:	f06f 0338 	mvn.w	r3, #56	; 0x38
    d3c8:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    d3ca:	2302      	movs	r3, #2
    d3cc:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d3d0:	f642 1302 	movw	r3, #10498	; 0x2902
    d3d4:	f8ad 3012 	strh.w	r3, [sp, #18]
    d3d8:	ab05      	add	r3, sp, #20
    d3da:	9302      	str	r3, [sp, #8]
    d3dc:	4b0c      	ldr	r3, [pc, #48]	; (d410 <bt_gatt_indicate+0xf0>)
    d3de:	9301      	str	r3, [sp, #4]
    d3e0:	2301      	movs	r3, #1
    d3e2:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    d3e4:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d3e6:	4623      	mov	r3, r4
    d3e8:	aa04      	add	r2, sp, #16
    d3ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    d3ee:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d3f0:	f88d 4010 	strb.w	r4, [sp, #16]
    d3f4:	f7ff fef2 	bl	d1dc <bt_gatt_foreach_attr_type>
	return data.err;
    d3f8:	9807      	ldr	r0, [sp, #28]
    d3fa:	e7aa      	b.n	d352 <bt_gatt_indicate+0x32>
		return -EAGAIN;
    d3fc:	f06f 000a 	mvn.w	r0, #10
    d400:	e7a7      	b.n	d352 <bt_gatt_indicate+0x32>
		return -ENOTCONN;
    d402:	f06f 0038 	mvn.w	r0, #56	; 0x38
    d406:	e7a4      	b.n	d352 <bt_gatt_indicate+0x32>
    d408:	20000094 	.word	0x20000094
    d40c:	000228e7 	.word	0x000228e7
    d410:	0000cd59 	.word	0x0000cd59

0000d414 <sc_process>:
{
    d414:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    d416:	f850 2c08 	ldr.w	r2, [r0, #-8]
    d41a:	9201      	str	r2, [sp, #4]
{
    d41c:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    d41e:	f1a0 0120 	sub.w	r1, r0, #32
    d422:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d426:	f3bf 8f5b 	dmb	ish
    d42a:	e854 2f00 	ldrex	r2, [r4]
    d42e:	f022 0201 	bic.w	r2, r2, #1
    d432:	e844 2000 	strex	r0, r2, [r4]
    d436:	2800      	cmp	r0, #0
    d438:	d1f7      	bne.n	d42a <sc_process+0x16>
    d43a:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    d43e:	4a0d      	ldr	r2, [pc, #52]	; (d474 <sc_process+0x60>)
    d440:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    d444:	4a0c      	ldr	r2, [pc, #48]	; (d478 <sc_process+0x64>)
    d446:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    d44a:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    d44c:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    d44e:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    d452:	2204      	movs	r2, #4
	sc->start = 0U;
    d454:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    d458:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    d45c:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    d460:	f7ff ff5e 	bl	d320 <bt_gatt_indicate>
    d464:	b918      	cbnz	r0, d46e <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    d466:	2101      	movs	r1, #1
    d468:	4620      	mov	r0, r4
    d46a:	f015 faf6 	bl	22a5a <atomic_set_bit>
}
    d46e:	b002      	add	sp, #8
    d470:	bd10      	pop	{r4, pc}
    d472:	bf00      	nop
    d474:	00025448 	.word	0x00025448
    d478:	0000cf75 	.word	0x0000cf75

0000d47c <update_ccc>:
{
    d47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d480:	6881      	ldr	r1, [r0, #8]
{
    d482:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d484:	4a40      	ldr	r2, [pc, #256]	; (d588 <update_ccc+0x10c>)
    d486:	4291      	cmp	r1, r2
{
    d488:	b085      	sub	sp, #20
    d48a:	4682      	mov	sl, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    d48c:	d178      	bne.n	d580 <update_ccc+0x104>
    d48e:	4c3f      	ldr	r4, [pc, #252]	; (d58c <update_ccc+0x110>)
    d490:	493f      	ldr	r1, [pc, #252]	; (d590 <update_ccc+0x114>)
	ccc = attr->user_data;
    d492:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
    d496:	683d      	ldr	r5, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
    d498:	f8df b10c 	ldr.w	fp, [pc, #268]	; d5a8 <update_ccc+0x12c>
    d49c:	1a64      	subs	r4, r4, r1
    d49e:	08e4      	lsrs	r4, r4, #3
    d4a0:	f108 0315 	add.w	r3, r8, #21
    d4a4:	ea4f 1984 	mov.w	r9, r4, lsl #6
    d4a8:	f108 0601 	add.w	r6, r8, #1
    d4ac:	9300      	str	r3, [sp, #0]
    d4ae:	f049 0902 	orr.w	r9, r9, #2
		if (!cfg->value ||
    d4b2:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    d4b6:	b19a      	cbz	r2, d4e0 <update_ccc+0x64>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d4b8:	f816 1c01 	ldrb.w	r1, [r6, #-1]
    d4bc:	4632      	mov	r2, r6
    d4be:	4628      	mov	r0, r5
    d4c0:	f014 fca3 	bl	21e0a <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    d4c4:	b160      	cbz	r0, d4e0 <update_ccc+0x64>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    d4c6:	222a      	movs	r2, #42	; 0x2a
    d4c8:	4651      	mov	r1, sl
    d4ca:	4628      	mov	r0, r5
    d4cc:	f015 fc78 	bl	22dc0 <bt_gatt_check_perm>
		if (err) {
    d4d0:	b1d8      	cbz	r0, d50a <update_ccc+0x8e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    d4d2:	2803      	cmp	r0, #3
    d4d4:	d109      	bne.n	d4ea <update_ccc+0x6e>
				BT_WARN("CCC %p not writable", attr);
    d4d6:	464a      	mov	r2, r9
    d4d8:	4651      	mov	r1, sl
    d4da:	4658      	mov	r0, fp
    d4dc:	f012 fa95 	bl	1fa0a <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    d4e0:	9b00      	ldr	r3, [sp, #0]
    d4e2:	360a      	adds	r6, #10
    d4e4:	429e      	cmp	r6, r3
    d4e6:	d04b      	beq.n	d580 <update_ccc+0x104>
    d4e8:	e7e3      	b.n	d4b2 <update_ccc+0x36>
				sec = BT_SECURITY_L3;
    d4ea:	2805      	cmp	r0, #5
    d4ec:	bf14      	ite	ne
    d4ee:	2202      	movne	r2, #2
    d4f0:	2203      	moveq	r2, #3
			    bt_conn_get_security(conn) < sec) {
    d4f2:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    d4f4:	9201      	str	r2, [sp, #4]
			    bt_conn_get_security(conn) < sec) {
    d4f6:	f014 fc7d 	bl	21df4 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    d4fa:	9a01      	ldr	r2, [sp, #4]
    d4fc:	4282      	cmp	r2, r0
    d4fe:	d904      	bls.n	d50a <update_ccc+0x8e>
				if (data->sec < sec) {
    d500:	7939      	ldrb	r1, [r7, #4]
    d502:	4291      	cmp	r1, r2
    d504:	d2ec      	bcs.n	d4e0 <update_ccc+0x64>
					data->sec = sec;
    d506:	713a      	strb	r2, [r7, #4]
    d508:	e7ea      	b.n	d4e0 <update_ccc+0x64>
		gatt_ccc_changed(attr, ccc);
    d50a:	4641      	mov	r1, r8
    d50c:	4650      	mov	r0, sl
    d50e:	f015 f9ca 	bl	228a6 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    d512:	4b20      	ldr	r3, [pc, #128]	; (d594 <update_ccc+0x118>)
    d514:	4598      	cmp	r8, r3
    d516:	d133      	bne.n	d580 <update_ccc+0x104>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    d518:	7a28      	ldrb	r0, [r5, #8]
    d51a:	f105 0188 	add.w	r1, r5, #136	; 0x88
    d51e:	f7ff fa75 	bl	ca0c <find_sc_cfg>
	if (!cfg) {
    d522:	4606      	mov	r6, r0
    d524:	b360      	cbz	r0, d580 <update_ccc+0x104>
	if (!(cfg->data.start || cfg->data.end)) {
    d526:	8902      	ldrh	r2, [r0, #8]
    d528:	8943      	ldrh	r3, [r0, #10]
    d52a:	ea52 0103 	orrs.w	r1, r2, r3
    d52e:	d027      	beq.n	d580 <update_ccc+0x104>
	index = bt_conn_index(conn);
    d530:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    d532:	f8ad 200c 	strh.w	r2, [sp, #12]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    d536:	f8ad 300e 	strh.w	r3, [sp, #14]
	index = bt_conn_index(conn);
    d53a:	f7fd ff9d 	bl	b478 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    d53e:	4916      	ldr	r1, [pc, #88]	; (d598 <update_ccc+0x11c>)
    d540:	4a16      	ldr	r2, [pc, #88]	; (d59c <update_ccc+0x120>)
    d542:	2318      	movs	r3, #24
    d544:	fb03 1300 	mla	r3, r3, r0, r1
    d548:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    d54a:	4a15      	ldr	r2, [pc, #84]	; (d5a0 <update_ccc+0x124>)
    d54c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    d54e:	aa03      	add	r2, sp, #12
    d550:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    d552:	2204      	movs	r2, #4
    d554:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    d556:	b203      	sxth	r3, r0
    d558:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d55c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    d560:	4628      	mov	r0, r5
    d562:	f7ff fedd 	bl	d320 <bt_gatt_indicate>
    d566:	b128      	cbz	r0, d574 <update_ccc+0xf8>
		BT_ERR("SC restore indication failed");
    d568:	01a1      	lsls	r1, r4, #6
    d56a:	480e      	ldr	r0, [pc, #56]	; (d5a4 <update_ccc+0x128>)
    d56c:	f041 0101 	orr.w	r1, r1, #1
    d570:	f012 fa3e 	bl	1f9f0 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    d574:	2204      	movs	r2, #4
    d576:	2100      	movs	r1, #0
    d578:	f106 0008 	add.w	r0, r6, #8
    d57c:	f014 f8be 	bl	216fc <memset>
}
    d580:	2001      	movs	r0, #1
    d582:	b005      	add	sp, #20
    d584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d588:	0000caa9 	.word	0x0000caa9
    d58c:	00024cdc 	.word	0x00024cdc
    d590:	00024c24 	.word	0x00024c24
    d594:	200002f8 	.word	0x200002f8
    d598:	20002a34 	.word	0x20002a34
    d59c:	00025448 	.word	0x00025448
    d5a0:	00022a77 	.word	0x00022a77
    d5a4:	00028580 	.word	0x00028580
    d5a8:	0002856c 	.word	0x0002856c

0000d5ac <bt_gatt_discover>:
{
    d5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    d5ae:	7b43      	ldrb	r3, [r0, #13]
    d5b0:	2b07      	cmp	r3, #7
{
    d5b2:	b085      	sub	sp, #20
    d5b4:	4605      	mov	r5, r0
    d5b6:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    d5b8:	f040 80dc 	bne.w	d774 <bt_gatt_discover+0x1c8>
	switch (params->type) {
    d5bc:	7c09      	ldrb	r1, [r1, #16]
    d5be:	2905      	cmp	r1, #5
    d5c0:	f200 80cd 	bhi.w	d75e <bt_gatt_discover+0x1b2>
    d5c4:	e8df f001 	tbb	[pc, r1]
    d5c8:	66660303 	.word	0x66660303
    d5cc:	b784      	.short	0xb784
		if (params->uuid) {
    d5ce:	6823      	ldr	r3, [r4, #0]
    d5d0:	2b00      	cmp	r3, #0
    d5d2:	d041      	beq.n	d658 <bt_gatt_discover+0xac>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
    d5d4:	2206      	movs	r2, #6
    d5d6:	4611      	mov	r1, r2
    d5d8:	f7fe fdc4 	bl	c164 <bt_att_create_pdu>
	if (!buf) {
    d5dc:	4606      	mov	r6, r0
    d5de:	b918      	cbnz	r0, d5e8 <bt_gatt_discover+0x3c>
		return -ENOMEM;
    d5e0:	f06f 000b 	mvn.w	r0, #11
}
    d5e4:	b005      	add	sp, #20
    d5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	req = net_buf_add(buf, sizeof(*req));
    d5e8:	f100 0708 	add.w	r7, r0, #8
    d5ec:	2106      	movs	r1, #6
    d5ee:	4638      	mov	r0, r7
    d5f0:	f016 f92c 	bl	2384c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    d5f4:	8923      	ldrh	r3, [r4, #8]
    d5f6:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    d5f8:	89e3      	ldrh	r3, [r4, #14]
    d5fa:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    d5fc:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
    d5fe:	2b00      	cmp	r3, #0
	req->type = sys_cpu_to_le16(uuid_val);
    d600:	f642 0301 	movw	r3, #10241	; 0x2801
    d604:	bf08      	it	eq
    d606:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    d60a:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
    d60c:	6823      	ldr	r3, [r4, #0]
    d60e:	7819      	ldrb	r1, [r3, #0]
    d610:	b189      	cbz	r1, d636 <bt_gatt_discover+0x8a>
    d612:	2902      	cmp	r1, #2
    d614:	d01a      	beq.n	d64c <bt_gatt_discover+0xa0>
    d616:	4b59      	ldr	r3, [pc, #356]	; (d77c <bt_gatt_discover+0x1d0>)
    d618:	4a59      	ldr	r2, [pc, #356]	; (d780 <bt_gatt_discover+0x1d4>)
		BT_ERR("Unknown UUID type %u", params->uuid->type);
    d61a:	485a      	ldr	r0, [pc, #360]	; (d784 <bt_gatt_discover+0x1d8>)
    d61c:	1ad2      	subs	r2, r2, r3
    d61e:	08d2      	lsrs	r2, r2, #3
    d620:	0192      	lsls	r2, r2, #6
    d622:	f042 0201 	orr.w	r2, r2, #1
    d626:	f012 f9f0 	bl	1fa0a <log_1>
		net_buf_unref(buf);
    d62a:	4630      	mov	r0, r6
    d62c:	f00d ff92 	bl	1b554 <net_buf_unref>
	return -EINVAL;
    d630:	f06f 0015 	mvn.w	r0, #21
    d634:	e7d6      	b.n	d5e4 <bt_gatt_discover+0x38>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
    d636:	8859      	ldrh	r1, [r3, #2]
    d638:	4638      	mov	r0, r7
    d63a:	f016 f91e 	bl	2387a <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
    d63e:	4a52      	ldr	r2, [pc, #328]	; (d788 <bt_gatt_discover+0x1dc>)
    d640:	4623      	mov	r3, r4
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    d642:	4631      	mov	r1, r6
    d644:	4628      	mov	r0, r5
    d646:	f7ff fb0b 	bl	cc60 <gatt_send.constprop.0>
    d64a:	e7cb      	b.n	d5e4 <bt_gatt_discover+0x38>
		net_buf_add_mem(buf, BT_UUID_128(params->uuid)->val, 16);
    d64c:	2210      	movs	r2, #16
    d64e:	1c59      	adds	r1, r3, #1
    d650:	4638      	mov	r0, r7
    d652:	f016 f901 	bl	23858 <net_buf_simple_add_mem>
		break;
    d656:	e7f2      	b.n	d63e <bt_gatt_discover+0x92>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
    d658:	2204      	movs	r2, #4
    d65a:	2110      	movs	r1, #16
    d65c:	f7fe fd82 	bl	c164 <bt_att_create_pdu>
	if (!buf) {
    d660:	4606      	mov	r6, r0
    d662:	2800      	cmp	r0, #0
    d664:	d0bc      	beq.n	d5e0 <bt_gatt_discover+0x34>
	req = net_buf_add(buf, sizeof(*req));
    d666:	f100 0708 	add.w	r7, r0, #8
    d66a:	2104      	movs	r1, #4
    d66c:	4638      	mov	r0, r7
    d66e:	f016 f8ed 	bl	2384c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    d672:	8923      	ldrh	r3, [r4, #8]
    d674:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    d676:	89e3      	ldrh	r3, [r4, #14]
    d678:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    d67a:	7c23      	ldrb	r3, [r4, #16]
    d67c:	b93b      	cbnz	r3, d68e <bt_gatt_discover+0xe2>
		net_buf_add_le16(buf, BT_UUID_GATT_PRIMARY_VAL);
    d67e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
		net_buf_add_le16(buf, BT_UUID_GATT_SECONDARY_VAL);
    d682:	4638      	mov	r0, r7
    d684:	f016 f8f9 	bl	2387a <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
    d688:	4a40      	ldr	r2, [pc, #256]	; (d78c <bt_gatt_discover+0x1e0>)
    d68a:	4623      	mov	r3, r4
    d68c:	e7d9      	b.n	d642 <bt_gatt_discover+0x96>
		net_buf_add_le16(buf, BT_UUID_GATT_SECONDARY_VAL);
    d68e:	f642 0101 	movw	r1, #10241	; 0x2801
    d692:	e7f6      	b.n	d682 <bt_gatt_discover+0xd6>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    d694:	2204      	movs	r2, #4
    d696:	2108      	movs	r1, #8
    d698:	f7fe fd64 	bl	c164 <bt_att_create_pdu>
	if (!buf) {
    d69c:	4606      	mov	r6, r0
    d69e:	2800      	cmp	r0, #0
    d6a0:	d09e      	beq.n	d5e0 <bt_gatt_discover+0x34>
	req = net_buf_add(buf, sizeof(*req));
    d6a2:	f100 0708 	add.w	r7, r0, #8
    d6a6:	2104      	movs	r1, #4
    d6a8:	4638      	mov	r0, r7
    d6aa:	f016 f8cf 	bl	2384c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    d6ae:	8923      	ldrh	r3, [r4, #8]
    d6b0:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    d6b2:	89e3      	ldrh	r3, [r4, #14]
    d6b4:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    d6b6:	7c23      	ldrb	r3, [r4, #16]
    d6b8:	2b02      	cmp	r3, #2
		net_buf_add_le16(buf, BT_UUID_GATT_INCLUDE_VAL);
    d6ba:	bf0c      	ite	eq
    d6bc:	f642 0102 	movweq	r1, #10242	; 0x2802
		net_buf_add_le16(buf, BT_UUID_GATT_CHRC_VAL);
    d6c0:	f642 0103 	movwne	r1, #10243	; 0x2803
    d6c4:	4638      	mov	r0, r7
    d6c6:	f016 f8d8 	bl	2387a <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
    d6ca:	4a31      	ldr	r2, [pc, #196]	; (d790 <bt_gatt_discover+0x1e4>)
    d6cc:	4623      	mov	r3, r4
    d6ce:	e7b8      	b.n	d642 <bt_gatt_discover+0x96>
		if (params->uuid &&
    d6d0:	6820      	ldr	r0, [r4, #0]
    d6d2:	b380      	cbz	r0, d736 <bt_gatt_discover+0x18a>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    d6d4:	2600      	movs	r6, #0
    d6d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    d6da:	4669      	mov	r1, sp
    d6dc:	f88d 6000 	strb.w	r6, [sp]
    d6e0:	f8ad 3002 	strh.w	r3, [sp, #2]
    d6e4:	f014 f8bb 	bl	2185e <bt_uuid_cmp>
		if (params->uuid &&
    d6e8:	2800      	cmp	r0, #0
    d6ea:	d0a1      	beq.n	d630 <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    d6ec:	f642 0301 	movw	r3, #10241	; 0x2801
    d6f0:	6820      	ldr	r0, [r4, #0]
    d6f2:	f88d 6004 	strb.w	r6, [sp, #4]
    d6f6:	a901      	add	r1, sp, #4
    d6f8:	f8ad 3006 	strh.w	r3, [sp, #6]
    d6fc:	f014 f8af 	bl	2185e <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    d700:	2800      	cmp	r0, #0
    d702:	d095      	beq.n	d630 <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    d704:	f642 0302 	movw	r3, #10242	; 0x2802
    d708:	6820      	ldr	r0, [r4, #0]
    d70a:	f88d 6008 	strb.w	r6, [sp, #8]
    d70e:	a902      	add	r1, sp, #8
    d710:	f8ad 300a 	strh.w	r3, [sp, #10]
    d714:	f014 f8a3 	bl	2185e <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    d718:	2800      	cmp	r0, #0
    d71a:	d089      	beq.n	d630 <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
    d71c:	f642 0303 	movw	r3, #10243	; 0x2803
    d720:	6820      	ldr	r0, [r4, #0]
    d722:	f88d 600c 	strb.w	r6, [sp, #12]
    d726:	a903      	add	r1, sp, #12
    d728:	f8ad 300e 	strh.w	r3, [sp, #14]
    d72c:	f014 f897 	bl	2185e <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    d730:	2800      	cmp	r0, #0
    d732:	f43f af7d 	beq.w	d630 <bt_gatt_discover+0x84>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
    d736:	2204      	movs	r2, #4
    d738:	4611      	mov	r1, r2
    d73a:	4628      	mov	r0, r5
    d73c:	f7fe fd12 	bl	c164 <bt_att_create_pdu>
	if (!buf) {
    d740:	4606      	mov	r6, r0
    d742:	2800      	cmp	r0, #0
    d744:	f43f af4c 	beq.w	d5e0 <bt_gatt_discover+0x34>
	req = net_buf_add(buf, sizeof(*req));
    d748:	2104      	movs	r1, #4
    d74a:	3008      	adds	r0, #8
    d74c:	f016 f87e 	bl	2384c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    d750:	8923      	ldrh	r3, [r4, #8]
    d752:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    d754:	89e3      	ldrh	r3, [r4, #14]
    d756:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    d758:	4a0e      	ldr	r2, [pc, #56]	; (d794 <bt_gatt_discover+0x1e8>)
    d75a:	4623      	mov	r3, r4
    d75c:	e771      	b.n	d642 <bt_gatt_discover+0x96>
    d75e:	4b07      	ldr	r3, [pc, #28]	; (d77c <bt_gatt_discover+0x1d0>)
    d760:	4a07      	ldr	r2, [pc, #28]	; (d780 <bt_gatt_discover+0x1d4>)
		BT_ERR("Invalid discovery type: %u", params->type);
    d762:	480d      	ldr	r0, [pc, #52]	; (d798 <bt_gatt_discover+0x1ec>)
    d764:	1ad2      	subs	r2, r2, r3
    d766:	08d2      	lsrs	r2, r2, #3
    d768:	0192      	lsls	r2, r2, #6
    d76a:	f042 0201 	orr.w	r2, r2, #1
    d76e:	f012 f94c 	bl	1fa0a <log_1>
    d772:	e75d      	b.n	d630 <bt_gatt_discover+0x84>
		return -ENOTCONN;
    d774:	f06f 0038 	mvn.w	r0, #56	; 0x38
    d778:	e734      	b.n	d5e4 <bt_gatt_discover+0x38>
    d77a:	bf00      	nop
    d77c:	00024c24 	.word	0x00024c24
    d780:	00024cdc 	.word	0x00024cdc
    d784:	0002859d 	.word	0x0002859d
    d788:	00022e51 	.word	0x00022e51
    d78c:	0000d79d 	.word	0x0000d79d
    d790:	0000d8ad 	.word	0x0000d8ad
    d794:	0000db7d 	.word	0x0000db7d
    d798:	000285b2 	.word	0x000285b2

0000d79c <gatt_read_group_rsp>:
{
    d79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7a0:	b08f      	sub	sp, #60	; 0x3c
    d7a2:	4617      	mov	r7, r2
    d7a4:	9d18      	ldr	r5, [sp, #96]	; 0x60
    d7a6:	4681      	mov	r9, r0
	if (err) {
    d7a8:	460a      	mov	r2, r1
    d7aa:	b131      	cbz	r1, d7ba <gatt_read_group_rsp+0x1e>
		params->func(conn, NULL, params);
    d7ac:	686b      	ldr	r3, [r5, #4]
    d7ae:	462a      	mov	r2, r5
    d7b0:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
    d7b2:	4798      	blx	r3
}
    d7b4:	b00f      	add	sp, #60	; 0x3c
    d7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (rsp->len) {
    d7ba:	7839      	ldrb	r1, [r7, #0]
    d7bc:	2906      	cmp	r1, #6
    d7be:	d011      	beq.n	d7e4 <gatt_read_group_rsp+0x48>
    d7c0:	2914      	cmp	r1, #20
    d7c2:	d00e      	beq.n	d7e2 <gatt_read_group_rsp+0x46>
    d7c4:	4a36      	ldr	r2, [pc, #216]	; (d8a0 <gatt_read_group_rsp+0x104>)
    d7c6:	4b37      	ldr	r3, [pc, #220]	; (d8a4 <gatt_read_group_rsp+0x108>)
		BT_ERR("Invalid data len %u", rsp->len);
    d7c8:	4837      	ldr	r0, [pc, #220]	; (d8a8 <gatt_read_group_rsp+0x10c>)
    d7ca:	1ad2      	subs	r2, r2, r3
    d7cc:	08d2      	lsrs	r2, r2, #3
    d7ce:	0192      	lsls	r2, r2, #6
    d7d0:	f042 0201 	orr.w	r2, r2, #1
    d7d4:	f012 f919 	bl	1fa0a <log_1>
	params->func(conn, NULL, params);
    d7d8:	686b      	ldr	r3, [r5, #4]
    d7da:	462a      	mov	r2, r5
    d7dc:	2100      	movs	r1, #0
    d7de:	4648      	mov	r0, r9
    d7e0:	e7e7      	b.n	d7b2 <gatt_read_group_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
    d7e2:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
    d7e4:	3b01      	subs	r3, #1
		u.uuid.type = BT_UUID_TYPE_128;
    d7e6:	f88d 2010 	strb.w	r2, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
    d7ea:	b29c      	uxth	r4, r3
    d7ec:	f107 0801 	add.w	r8, r7, #1
	uint16_t start_handle, end_handle = 0U;
    d7f0:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    d7f2:	783b      	ldrb	r3, [r7, #0]
    d7f4:	42a3      	cmp	r3, r4
    d7f6:	d909      	bls.n	d80c <gatt_read_group_rsp+0x70>
	if (length == 0U && end_handle) {
    d7f8:	2c00      	cmp	r4, #0
    d7fa:	d1ed      	bne.n	d7d8 <gatt_read_group_rsp+0x3c>
    d7fc:	2e00      	cmp	r6, #0
    d7fe:	d0eb      	beq.n	d7d8 <gatt_read_group_rsp+0x3c>
	gatt_discover_next(conn, handle, params);
    d800:	462a      	mov	r2, r5
    d802:	4631      	mov	r1, r6
    d804:	4648      	mov	r0, r9
    d806:	f015 fb06 	bl	22e16 <gatt_discover_next>
    d80a:	e7d3      	b.n	d7b4 <gatt_read_group_rsp+0x18>
		struct bt_gatt_attr attr = {};
    d80c:	2214      	movs	r2, #20
    d80e:	2100      	movs	r1, #0
    d810:	a809      	add	r0, sp, #36	; 0x24
    d812:	f013 ff73 	bl	216fc <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
    d816:	f8b8 a000 	ldrh.w	sl, [r8]
    d81a:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
    d81e:	2b00      	cmp	r3, #0
    d820:	d0da      	beq.n	d7d8 <gatt_read_group_rsp+0x3c>
		end_handle = sys_le16_to_cpu(data->end_handle);
    d822:	f8b8 b002 	ldrh.w	fp, [r8, #2]
    d826:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
    d82a:	2e00      	cmp	r6, #0
    d82c:	d0d4      	beq.n	d7d8 <gatt_read_group_rsp+0x3c>
    d82e:	42b3      	cmp	r3, r6
    d830:	d8d2      	bhi.n	d7d8 <gatt_read_group_rsp+0x3c>
		switch (u.uuid.type) {
    d832:	f89d 3010 	ldrb.w	r3, [sp, #16]
    d836:	b323      	cbz	r3, d882 <gatt_read_group_rsp+0xe6>
    d838:	2b02      	cmp	r3, #2
    d83a:	d02a      	beq.n	d892 <gatt_read_group_rsp+0xf6>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
    d83c:	f04f 0300 	mov.w	r3, #0
    d840:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    d844:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
    d846:	f8ad b00c 	strh.w	fp, [sp, #12]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
    d84a:	2b00      	cmp	r3, #0
    d84c:	f642 0301 	movw	r3, #10241	; 0x2801
    d850:	bf08      	it	eq
    d852:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    d856:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
    d85a:	ab04      	add	r3, sp, #16
    d85c:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
    d85e:	ab01      	add	r3, sp, #4
    d860:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
    d862:	ab02      	add	r3, sp, #8
    d864:	930c      	str	r3, [sp, #48]	; 0x30
		attr.handle = start_handle;
    d866:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d86a:	686b      	ldr	r3, [r5, #4]
    d86c:	462a      	mov	r2, r5
    d86e:	a909      	add	r1, sp, #36	; 0x24
    d870:	4648      	mov	r0, r9
    d872:	4798      	blx	r3
    d874:	2800      	cmp	r0, #0
    d876:	d09d      	beq.n	d7b4 <gatt_read_group_rsp+0x18>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    d878:	783a      	ldrb	r2, [r7, #0]
    d87a:	1aa4      	subs	r4, r4, r2
    d87c:	b2a4      	uxth	r4, r4
    d87e:	4490      	add	r8, r2
    d880:	e7b7      	b.n	d7f2 <gatt_read_group_rsp+0x56>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
    d882:	2202      	movs	r2, #2
    d884:	f108 0104 	add.w	r1, r8, #4
    d888:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    d88c:	f013 ff0b 	bl	216a6 <memcpy>
			break;
    d890:	e7d4      	b.n	d83c <gatt_read_group_rsp+0xa0>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    d892:	2210      	movs	r2, #16
    d894:	f108 0104 	add.w	r1, r8, #4
    d898:	f10d 0011 	add.w	r0, sp, #17
    d89c:	e7f6      	b.n	d88c <gatt_read_group_rsp+0xf0>
    d89e:	bf00      	nop
    d8a0:	00024cdc 	.word	0x00024cdc
    d8a4:	00024c24 	.word	0x00024c24
    d8a8:	000285cd 	.word	0x000285cd

0000d8ac <gatt_read_type_rsp>:
{
    d8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d8b0:	b091      	sub	sp, #68	; 0x44
    d8b2:	4690      	mov	r8, r2
    d8b4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    d8b6:	4607      	mov	r7, r0
	if (err) {
    d8b8:	460a      	mov	r2, r1
    d8ba:	b121      	cbz	r1, d8c6 <gatt_read_type_rsp+0x1a>
		params->func(conn, NULL, params);
    d8bc:	686b      	ldr	r3, [r5, #4]
    d8be:	462a      	mov	r2, r5
    d8c0:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
    d8c2:	4798      	blx	r3
	if (!handle) {
    d8c4:	e06d      	b.n	d9a2 <gatt_read_type_rsp+0xf6>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    d8c6:	7c28      	ldrb	r0, [r5, #16]
    d8c8:	f898 1000 	ldrb.w	r1, [r8]
    d8cc:	2802      	cmp	r0, #2
    d8ce:	f040 8087 	bne.w	d9e0 <gatt_read_type_rsp+0x134>
	switch (rsp->len) {
    d8d2:	2906      	cmp	r1, #6
    d8d4:	d019      	beq.n	d90a <gatt_read_type_rsp+0x5e>
    d8d6:	2908      	cmp	r1, #8
    d8d8:	f040 8086 	bne.w	d9e8 <gatt_read_type_rsp+0x13c>
		u.uuid.type = BT_UUID_TYPE_16;
    d8dc:	f88d 2018 	strb.w	r2, [sp, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
    d8e0:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
    d8e2:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    d8e4:	b2a4      	uxth	r4, r4
    d8e6:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
    d8ea:	f10d 0a18 	add.w	sl, sp, #24
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d8ee:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    d8f0:	f898 3000 	ldrb.w	r3, [r8]
    d8f4:	42a3      	cmp	r3, r4
    d8f6:	d90b      	bls.n	d910 <gatt_read_type_rsp+0x64>
	if (length == 0U && handle) {
    d8f8:	b914      	cbnz	r4, d900 <gatt_read_type_rsp+0x54>
    d8fa:	2e00      	cmp	r6, #0
    d8fc:	f040 80da 	bne.w	dab4 <gatt_read_type_rsp+0x208>
	params->func(conn, NULL, params);
    d900:	686b      	ldr	r3, [r5, #4]
    d902:	462a      	mov	r2, r5
    d904:	2100      	movs	r1, #0
    d906:	4638      	mov	r0, r7
    d908:	e7db      	b.n	d8c2 <gatt_read_type_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
    d90a:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
    d90e:	e7e7      	b.n	d8e0 <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
    d910:	f8b9 3000 	ldrh.w	r3, [r9]
    d914:	b29e      	uxth	r6, r3
		if (!handle) {
    d916:	2e00      	cmp	r6, #0
    d918:	d0f2      	beq.n	d900 <gatt_read_type_rsp+0x54>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    d91a:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    d91e:	f8ad 2014 	strh.w	r2, [sp, #20]
    d922:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
    d924:	f8b9 2004 	ldrh.w	r2, [r9, #4]
    d928:	f8ad 2016 	strh.w	r2, [sp, #22]
    d92c:	b291      	uxth	r1, r2
		switch (u.uuid.type) {
    d92e:	f89d 2018 	ldrb.w	r2, [sp, #24]
    d932:	b182      	cbz	r2, d956 <gatt_read_type_rsp+0xaa>
    d934:	2a02      	cmp	r2, #2
    d936:	d019      	beq.n	d96c <gatt_read_type_rsp+0xc0>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    d938:	6829      	ldr	r1, [r5, #0]
    d93a:	2900      	cmp	r1, #0
    d93c:	d037      	beq.n	d9ae <gatt_read_type_rsp+0x102>
    d93e:	4650      	mov	r0, sl
    d940:	9301      	str	r3, [sp, #4]
    d942:	f013 ff8c 	bl	2185e <bt_uuid_cmp>
    d946:	9b01      	ldr	r3, [sp, #4]
    d948:	b388      	cbz	r0, d9ae <gatt_read_type_rsp+0x102>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    d94a:	f898 2000 	ldrb.w	r2, [r8]
    d94e:	1aa4      	subs	r4, r4, r2
    d950:	b2a4      	uxth	r4, r4
    d952:	4491      	add	r9, r2
    d954:	e7cc      	b.n	d8f0 <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
    d956:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
    d95a:	f899 2006 	ldrb.w	r2, [r9, #6]
    d95e:	f899 1007 	ldrb.w	r1, [r9, #7]
    d962:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d966:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
    d96a:	e7e5      	b.n	d938 <gatt_read_type_rsp+0x8c>
			params->_included.start_handle = value.start_handle;
    d96c:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
    d96e:	81a9      	strh	r1, [r5, #12]
			params->_included.attr_handle = handle;
    d970:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    d972:	210a      	movs	r1, #10
    d974:	4638      	mov	r0, r7
    d976:	9201      	str	r2, [sp, #4]
    d978:	f7fe fbf4 	bl	c164 <bt_att_create_pdu>
	if (!buf) {
    d97c:	4604      	mov	r4, r0
    d97e:	b198      	cbz	r0, d9a8 <gatt_read_type_rsp+0xfc>
	req = net_buf_add(buf, sizeof(*req));
    d980:	9a01      	ldr	r2, [sp, #4]
    d982:	3008      	adds	r0, #8
    d984:	4611      	mov	r1, r2
    d986:	f015 ff61 	bl	2384c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
    d98a:	896b      	ldrh	r3, [r5, #10]
    d98c:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
    d98e:	4a4c      	ldr	r2, [pc, #304]	; (dac0 <gatt_read_type_rsp+0x214>)
    d990:	462b      	mov	r3, r5
    d992:	4621      	mov	r1, r4
    d994:	4638      	mov	r0, r7
    d996:	f7ff f963 	bl	cc60 <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
    d99a:	b286      	uxth	r6, r0
	if (!handle) {
    d99c:	2e00      	cmp	r6, #0
    d99e:	f040 8089 	bne.w	dab4 <gatt_read_type_rsp+0x208>
}
    d9a2:	b011      	add	sp, #68	; 0x44
    d9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    d9a8:	f06f 000b 	mvn.w	r0, #11
    d9ac:	e7f5      	b.n	d99a <gatt_read_type_rsp+0xee>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d9ae:	f642 0202 	movw	r2, #10242	; 0x2802
    d9b2:	f8ad 200e 	strh.w	r2, [sp, #14]
    d9b6:	aa03      	add	r2, sp, #12
    d9b8:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
    d9bc:	aa04      	add	r2, sp, #16
    d9be:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
    d9c0:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d9c4:	f88d b00c 	strb.w	fp, [sp, #12]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d9c8:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d9ca:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    d9ce:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d9d2:	462a      	mov	r2, r5
    d9d4:	a90b      	add	r1, sp, #44	; 0x2c
    d9d6:	4638      	mov	r0, r7
    d9d8:	4798      	blx	r3
    d9da:	2800      	cmp	r0, #0
    d9dc:	d1b5      	bne.n	d94a <gatt_read_type_rsp+0x9e>
    d9de:	e7e0      	b.n	d9a2 <gatt_read_type_rsp+0xf6>
	switch (rsp->len) {
    d9e0:	2907      	cmp	r1, #7
    d9e2:	d00d      	beq.n	da00 <gatt_read_type_rsp+0x154>
    d9e4:	2915      	cmp	r1, #21
    d9e6:	d00a      	beq.n	d9fe <gatt_read_type_rsp+0x152>
    d9e8:	4b36      	ldr	r3, [pc, #216]	; (dac4 <gatt_read_type_rsp+0x218>)
    d9ea:	4a37      	ldr	r2, [pc, #220]	; (dac8 <gatt_read_type_rsp+0x21c>)
		BT_ERR("Invalid data len %u", rsp->len);
    d9ec:	4837      	ldr	r0, [pc, #220]	; (dacc <gatt_read_type_rsp+0x220>)
    d9ee:	1ad2      	subs	r2, r2, r3
    d9f0:	08d2      	lsrs	r2, r2, #3
    d9f2:	0192      	lsls	r2, r2, #6
    d9f4:	f042 0201 	orr.w	r2, r2, #1
    d9f8:	f012 f807 	bl	1fa0a <log_1>
		goto done;
    d9fc:	e780      	b.n	d900 <gatt_read_type_rsp+0x54>
		u.uuid.type = BT_UUID_TYPE_128;
    d9fe:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
    da00:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_128;
    da02:	f88d 2018 	strb.w	r2, [sp, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
    da06:	b2a4      	uxth	r4, r4
    da08:	f108 0901 	add.w	r9, r8, #1
	uint16_t handle = 0U;
    da0c:	2600      	movs	r6, #0
    da0e:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
    da12:	f898 3000 	ldrb.w	r3, [r8]
    da16:	42a3      	cmp	r3, r4
    da18:	f63f af6e 	bhi.w	d8f8 <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
    da1c:	f8b9 b000 	ldrh.w	fp, [r9]
    da20:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
    da24:	2e00      	cmp	r6, #0
    da26:	f43f af6b 	beq.w	d900 <gatt_read_type_rsp+0x54>
		switch (u.uuid.type) {
    da2a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    da2e:	b16b      	cbz	r3, da4c <gatt_read_type_rsp+0x1a0>
    da30:	2b02      	cmp	r3, #2
    da32:	d014      	beq.n	da5e <gatt_read_type_rsp+0x1b2>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    da34:	6829      	ldr	r1, [r5, #0]
    da36:	b1d1      	cbz	r1, da6e <gatt_read_type_rsp+0x1c2>
    da38:	4650      	mov	r0, sl
    da3a:	f013 ff10 	bl	2185e <bt_uuid_cmp>
    da3e:	b1b0      	cbz	r0, da6e <gatt_read_type_rsp+0x1c2>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    da40:	f898 2000 	ldrb.w	r2, [r8]
    da44:	1aa4      	subs	r4, r4, r2
    da46:	b2a4      	uxth	r4, r4
    da48:	4491      	add	r9, r2
    da4a:	e7e2      	b.n	da12 <gatt_read_type_rsp+0x166>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
    da4c:	f899 3005 	ldrb.w	r3, [r9, #5]
    da50:	f899 2006 	ldrb.w	r2, [r9, #6]
    da54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    da58:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
    da5c:	e7ea      	b.n	da34 <gatt_read_type_rsp+0x188>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
    da5e:	2210      	movs	r2, #16
    da60:	f109 0105 	add.w	r1, r9, #5
    da64:	f10d 0019 	add.w	r0, sp, #25
    da68:	f013 fe1d 	bl	216a6 <memcpy>
			break;
    da6c:	e7e2      	b.n	da34 <gatt_read_type_rsp+0x188>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    da6e:	f8b9 2003 	ldrh.w	r2, [r9, #3]
    da72:	f899 3002 	ldrb.w	r3, [r9, #2]
    da76:	f8ad 2014 	strh.w	r2, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    da7a:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    da7e:	f88d 3016 	strb.w	r3, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    da82:	f8ad 200e 	strh.w	r2, [sp, #14]
    da86:	2300      	movs	r3, #0
    da88:	aa03      	add	r2, sp, #12
    da8a:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    da8e:	aa04      	add	r2, sp, #16
    da90:	f88d 300c 	strb.w	r3, [sp, #12]
    da94:	930d      	str	r3, [sp, #52]	; 0x34
    da96:	920e      	str	r2, [sp, #56]	; 0x38
    da98:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    da9c:	f8cd a010 	str.w	sl, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    daa0:	686b      	ldr	r3, [r5, #4]
		attr.handle = handle;
    daa2:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    daa6:	462a      	mov	r2, r5
    daa8:	a90b      	add	r1, sp, #44	; 0x2c
    daaa:	4638      	mov	r0, r7
    daac:	4798      	blx	r3
    daae:	2800      	cmp	r0, #0
    dab0:	d1c6      	bne.n	da40 <gatt_read_type_rsp+0x194>
    dab2:	e776      	b.n	d9a2 <gatt_read_type_rsp+0xf6>
	gatt_discover_next(conn, handle, params);
    dab4:	462a      	mov	r2, r5
    dab6:	4631      	mov	r1, r6
    dab8:	4638      	mov	r0, r7
    daba:	f015 f9ac 	bl	22e16 <gatt_discover_next>
    dabe:	e770      	b.n	d9a2 <gatt_read_type_rsp+0xf6>
    dac0:	0000dad1 	.word	0x0000dad1
    dac4:	00024c24 	.word	0x00024c24
    dac8:	00024cdc 	.word	0x00024cdc
    dacc:	000285cd 	.word	0x000285cd

0000dad0 <read_included_uuid_cb>:
{
    dad0:	b570      	push	{r4, r5, r6, lr}
    dad2:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
    dad4:	2b10      	cmp	r3, #16
{
    dad6:	9c12      	ldr	r4, [sp, #72]	; 0x48
    dad8:	4605      	mov	r5, r0
    dada:	4611      	mov	r1, r2
	if (length != 16U) {
    dadc:	d011      	beq.n	db02 <read_included_uuid_cb+0x32>
    dade:	4924      	ldr	r1, [pc, #144]	; (db70 <read_included_uuid_cb+0xa0>)
    dae0:	4a24      	ldr	r2, [pc, #144]	; (db74 <read_included_uuid_cb+0xa4>)
		BT_ERR("Invalid data len %u", length);
    dae2:	4825      	ldr	r0, [pc, #148]	; (db78 <read_included_uuid_cb+0xa8>)
    dae4:	1a52      	subs	r2, r2, r1
    dae6:	08d2      	lsrs	r2, r2, #3
    dae8:	0192      	lsls	r2, r2, #6
    daea:	4619      	mov	r1, r3
    daec:	f042 0201 	orr.w	r2, r2, #1
    daf0:	f011 ff8b 	bl	1fa0a <log_1>
		params->func(conn, NULL, params);
    daf4:	6863      	ldr	r3, [r4, #4]
    daf6:	4622      	mov	r2, r4
    daf8:	2100      	movs	r1, #0
    dafa:	4628      	mov	r0, r5
    dafc:	4798      	blx	r3
}
    dafe:	b00e      	add	sp, #56	; 0x38
    db00:	bd70      	pop	{r4, r5, r6, pc}
	value.start_handle = params->_included.start_handle;
    db02:	8962      	ldrh	r2, [r4, #10]
    db04:	f8ad 200c 	strh.w	r2, [sp, #12]
	value.end_handle = params->_included.end_handle;
    db08:	89a2      	ldrh	r2, [r4, #12]
    db0a:	f8ad 200e 	strh.w	r2, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
    db0e:	2202      	movs	r2, #2
    db10:	f88d 2010 	strb.w	r2, [sp, #16]
	value.uuid = &u.uuid;
    db14:	ae04      	add	r6, sp, #16
	memcpy(u.u128.val, pdu, length);
    db16:	461a      	mov	r2, r3
    db18:	f10d 0011 	add.w	r0, sp, #17
	value.uuid = &u.uuid;
    db1c:	9602      	str	r6, [sp, #8]
	memcpy(u.u128.val, pdu, length);
    db1e:	f013 fdc2 	bl	216a6 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    db22:	6821      	ldr	r1, [r4, #0]
    db24:	b9f1      	cbnz	r1, db64 <read_included_uuid_cb+0x94>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    db26:	f642 0202 	movw	r2, #10242	; 0x2802
    db2a:	2300      	movs	r3, #0
    db2c:	f8ad 2006 	strh.w	r2, [sp, #6]
    db30:	aa01      	add	r2, sp, #4
    db32:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    db36:	f88d 3004 	strb.w	r3, [sp, #4]
    db3a:	aa02      	add	r2, sp, #8
    db3c:	930b      	str	r3, [sp, #44]	; 0x2c
    db3e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
    db42:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    db44:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
    db46:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    db4a:	4622      	mov	r2, r4
    db4c:	6863      	ldr	r3, [r4, #4]
    db4e:	a909      	add	r1, sp, #36	; 0x24
    db50:	4628      	mov	r0, r5
    db52:	4798      	blx	r3
    db54:	2800      	cmp	r0, #0
    db56:	d0d2      	beq.n	dafe <read_included_uuid_cb+0x2e>
	gatt_discover_next(conn, params->start_handle, params);
    db58:	8921      	ldrh	r1, [r4, #8]
    db5a:	4622      	mov	r2, r4
    db5c:	4628      	mov	r0, r5
    db5e:	f015 f95a 	bl	22e16 <gatt_discover_next>
	return;
    db62:	e7cc      	b.n	dafe <read_included_uuid_cb+0x2e>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    db64:	4630      	mov	r0, r6
    db66:	f013 fe7a 	bl	2185e <bt_uuid_cmp>
    db6a:	2800      	cmp	r0, #0
    db6c:	d0db      	beq.n	db26 <read_included_uuid_cb+0x56>
    db6e:	e7f3      	b.n	db58 <read_included_uuid_cb+0x88>
    db70:	00024c24 	.word	0x00024c24
    db74:	00024cdc 	.word	0x00024cdc
    db78:	000285cd 	.word	0x000285cd

0000db7c <gatt_find_info_rsp>:
{
    db7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db80:	b08f      	sub	sp, #60	; 0x3c
    db82:	4680      	mov	r8, r0
    db84:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
    db86:	4608      	mov	r0, r1
    db88:	b971      	cbnz	r1, dba8 <gatt_find_info_rsp+0x2c>
	switch (rsp->format) {
    db8a:	7811      	ldrb	r1, [r2, #0]
    db8c:	2901      	cmp	r1, #1
    db8e:	d011      	beq.n	dbb4 <gatt_find_info_rsp+0x38>
    db90:	2902      	cmp	r1, #2
    db92:	d028      	beq.n	dbe6 <gatt_find_info_rsp+0x6a>
    db94:	4a4f      	ldr	r2, [pc, #316]	; (dcd4 <gatt_find_info_rsp+0x158>)
    db96:	4b50      	ldr	r3, [pc, #320]	; (dcd8 <gatt_find_info_rsp+0x15c>)
		BT_ERR("Invalid format %u", rsp->format);
    db98:	4850      	ldr	r0, [pc, #320]	; (dcdc <gatt_find_info_rsp+0x160>)
    db9a:	1ad2      	subs	r2, r2, r3
    db9c:	08d2      	lsrs	r2, r2, #3
    db9e:	0192      	lsls	r2, r2, #6
    dba0:	f042 0201 	orr.w	r2, r2, #1
    dba4:	f011 ff31 	bl	1fa0a <log_1>
	params->func(conn, NULL, params);
    dba8:	6873      	ldr	r3, [r6, #4]
    dbaa:	4632      	mov	r2, r6
    dbac:	2100      	movs	r1, #0
    dbae:	4640      	mov	r0, r8
    dbb0:	4798      	blx	r3
    dbb2:	e08b      	b.n	dccc <gatt_find_info_rsp+0x150>
		u.uuid.type = BT_UUID_TYPE_16;
    dbb4:	f88d 0010 	strb.w	r0, [sp, #16]
		len = sizeof(*info.i16);
    dbb8:	f04f 0a04 	mov.w	sl, #4
	length--;
    dbbc:	3b01      	subs	r3, #1
    dbbe:	b29b      	uxth	r3, r3
	if (length < len) {
    dbc0:	4553      	cmp	r3, sl
    dbc2:	d3f1      	bcc.n	dba8 <gatt_find_info_rsp+0x2c>
	for (i = length / len, pdu = rsp->info; i != 0;
    dbc4:	fbb3 f3fa 	udiv	r3, r3, sl
	bool skip = false;
    dbc8:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
    dbcc:	9300      	str	r3, [sp, #0]
    dbce:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
    dbd0:	46cb      	mov	fp, r9
			skip = false;
    dbd2:	464d      	mov	r5, r9
    dbd4:	af04      	add	r7, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
    dbd6:	9b00      	ldr	r3, [sp, #0]
    dbd8:	b953      	cbnz	r3, dbf0 <gatt_find_info_rsp+0x74>
	gatt_discover_next(conn, handle, params);
    dbda:	4632      	mov	r2, r6
    dbdc:	4659      	mov	r1, fp
    dbde:	4640      	mov	r0, r8
    dbe0:	f015 f919 	bl	22e16 <gatt_discover_next>
	return;
    dbe4:	e072      	b.n	dccc <gatt_find_info_rsp+0x150>
		u.uuid.type = BT_UUID_TYPE_128;
    dbe6:	f88d 1010 	strb.w	r1, [sp, #16]
		len = sizeof(*info.i128);
    dbea:	f04f 0a12 	mov.w	sl, #18
		break;
    dbee:	e7e5      	b.n	dbbc <gatt_find_info_rsp+0x40>
		handle = sys_le16_to_cpu(info.i16->handle);
    dbf0:	8823      	ldrh	r3, [r4, #0]
    dbf2:	f8ad 3004 	strh.w	r3, [sp, #4]
    dbf6:	fa1f fb83 	uxth.w	fp, r3
		if (skip) {
    dbfa:	f1b9 0f00 	cmp.w	r9, #0
    dbfe:	d151      	bne.n	dca4 <gatt_find_info_rsp+0x128>
		switch (u.uuid.type) {
    dc00:	f89d 3010 	ldrb.w	r3, [sp, #16]
    dc04:	2b00      	cmp	r3, #0
    dc06:	d03a      	beq.n	dc7e <gatt_find_info_rsp+0x102>
    dc08:	2b02      	cmp	r3, #2
    dc0a:	d03f      	beq.n	dc8c <gatt_find_info_rsp+0x110>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    dc0c:	6831      	ldr	r1, [r6, #0]
    dc0e:	2900      	cmp	r1, #0
    dc10:	d143      	bne.n	dc9a <gatt_find_info_rsp+0x11e>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
    dc12:	7c33      	ldrb	r3, [r6, #16]
    dc14:	2b04      	cmp	r3, #4
    dc16:	d148      	bne.n	dcaa <gatt_find_info_rsp+0x12e>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    dc18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    dc1c:	a902      	add	r1, sp, #8
    dc1e:	4638      	mov	r0, r7
    dc20:	f88d 5008 	strb.w	r5, [sp, #8]
    dc24:	f8ad 300a 	strh.w	r3, [sp, #10]
    dc28:	f013 fe19 	bl	2185e <bt_uuid_cmp>
    dc2c:	b310      	cbz	r0, dc74 <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    dc2e:	f642 0301 	movw	r3, #10241	; 0x2801
    dc32:	a903      	add	r1, sp, #12
    dc34:	4638      	mov	r0, r7
    dc36:	f88d 500c 	strb.w	r5, [sp, #12]
    dc3a:	f8ad 300e 	strh.w	r3, [sp, #14]
    dc3e:	f013 fe0e 	bl	2185e <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    dc42:	b1b8      	cbz	r0, dc74 <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
    dc44:	f642 0302 	movw	r3, #10242	; 0x2802
    dc48:	a909      	add	r1, sp, #36	; 0x24
    dc4a:	4638      	mov	r0, r7
    dc4c:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    dc50:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    dc54:	f013 fe03 	bl	2185e <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    dc58:	b160      	cbz	r0, dc74 <gatt_find_info_rsp+0xf8>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
    dc5a:	f642 0303 	movw	r3, #10243	; 0x2803
    dc5e:	a909      	add	r1, sp, #36	; 0x24
    dc60:	4638      	mov	r0, r7
    dc62:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    dc66:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    dc6a:	f013 fdf8 	bl	2185e <bt_uuid_cmp>
    dc6e:	b9e0      	cbnz	r0, dcaa <gatt_find_info_rsp+0x12e>
				skip = true;
    dc70:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
    dc74:	9b00      	ldr	r3, [sp, #0]
    dc76:	3b01      	subs	r3, #1
    dc78:	9300      	str	r3, [sp, #0]
    dc7a:	4454      	add	r4, sl
    dc7c:	e7ab      	b.n	dbd6 <gatt_find_info_rsp+0x5a>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
    dc7e:	78a3      	ldrb	r3, [r4, #2]
    dc80:	78e2      	ldrb	r2, [r4, #3]
    dc82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dc86:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
    dc8a:	e7bf      	b.n	dc0c <gatt_find_info_rsp+0x90>
			memcpy(u.u128.val, info.i128->uuid, 16);
    dc8c:	2210      	movs	r2, #16
    dc8e:	1ca1      	adds	r1, r4, #2
    dc90:	f10d 0011 	add.w	r0, sp, #17
    dc94:	f013 fd07 	bl	216a6 <memcpy>
			break;
    dc98:	e7b8      	b.n	dc0c <gatt_find_info_rsp+0x90>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    dc9a:	4638      	mov	r0, r7
    dc9c:	f013 fddf 	bl	2185e <bt_uuid_cmp>
    dca0:	2800      	cmp	r0, #0
    dca2:	d0b6      	beq.n	dc12 <gatt_find_info_rsp+0x96>
			skip = false;
    dca4:	f04f 0900 	mov.w	r9, #0
    dca8:	e7e4      	b.n	dc74 <gatt_find_info_rsp+0xf8>
		attr.handle = handle;
    dcaa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    dcae:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    dcb2:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
    dcb6:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    dcba:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    dcbc:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    dcc0:	4632      	mov	r2, r6
    dcc2:	a909      	add	r1, sp, #36	; 0x24
    dcc4:	4640      	mov	r0, r8
    dcc6:	4798      	blx	r3
    dcc8:	2800      	cmp	r0, #0
    dcca:	d1d3      	bne.n	dc74 <gatt_find_info_rsp+0xf8>
}
    dccc:	b00f      	add	sp, #60	; 0x3c
    dcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dcd2:	bf00      	nop
    dcd4:	00024cdc 	.word	0x00024cdc
    dcd8:	00024c24 	.word	0x00024c24
    dcdc:	000285e1 	.word	0x000285e1

0000dce0 <bt_gatt_write>:
{
    dce0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    dce2:	7b43      	ldrb	r3, [r0, #13]
    dce4:	2b07      	cmp	r3, #7
{
    dce6:	b085      	sub	sp, #20
    dce8:	4605      	mov	r5, r0
    dcea:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    dcec:	d16b      	bne.n	ddc6 <bt_gatt_write+0xe6>
	if (params->offset ||
    dcee:	88cf      	ldrh	r7, [r1, #6]
    dcf0:	b167      	cbz	r7, dd0c <bt_gatt_write+0x2c>
	len = MIN(params->length, bt_att_get_mtu(conn) - sizeof(*req) - 1);
    dcf2:	4628      	mov	r0, r5
    dcf4:	89a6      	ldrh	r6, [r4, #12]
    dcf6:	f014 fcbc 	bl	22672 <bt_att_get_mtu>
    dcfa:	3805      	subs	r0, #5
    dcfc:	4286      	cmp	r6, r0
    dcfe:	d32e      	bcc.n	dd5e <bt_gatt_write+0x7e>
    dd00:	4628      	mov	r0, r5
    dd02:	f014 fcb6 	bl	22672 <bt_att_get_mtu>
    dd06:	1f46      	subs	r6, r0, #5
    dd08:	b2b6      	uxth	r6, r6
    dd0a:	e029      	b.n	dd60 <bt_gatt_write+0x80>
    dd0c:	898e      	ldrh	r6, [r1, #12]
	    params->length > (bt_att_get_mtu(conn) - sizeof(*req) - 1)) {
    dd0e:	f014 fcb0 	bl	22672 <bt_att_get_mtu>
    dd12:	3803      	subs	r0, #3
	if (params->offset ||
    dd14:	42b0      	cmp	r0, r6
    dd16:	d3ec      	bcc.n	dcf2 <bt_gatt_write+0x12>
				sizeof(*req) + params->length);
    dd18:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    dd1a:	2112      	movs	r1, #18
    dd1c:	3202      	adds	r2, #2
    dd1e:	4628      	mov	r0, r5
    dd20:	f7fe fa20 	bl	c164 <bt_att_create_pdu>
	if (!buf) {
    dd24:	4606      	mov	r6, r0
    dd26:	b1b0      	cbz	r0, dd56 <bt_gatt_write+0x76>
	req = net_buf_add(buf, sizeof(*req));
    dd28:	2102      	movs	r1, #2
    dd2a:	3008      	adds	r0, #8
    dd2c:	f015 fd8e 	bl	2384c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
    dd30:	88a3      	ldrh	r3, [r4, #4]
    dd32:	8003      	strh	r3, [r0, #0]
	write = net_buf_append_bytes(buf, params->length, params->data,
    dd34:	2200      	movs	r2, #0
    dd36:	2300      	movs	r3, #0
    dd38:	e9cd 2300 	strd	r2, r3, [sp]
    dd3c:	e9cd 7702 	strd	r7, r7, [sp, #8]
    dd40:	68a2      	ldr	r2, [r4, #8]
    dd42:	89a1      	ldrh	r1, [r4, #12]
    dd44:	4630      	mov	r0, r6
    dd46:	f015 fdce 	bl	238e6 <net_buf_append_bytes>
	if (write != params->length) {
    dd4a:	89a3      	ldrh	r3, [r4, #12]
    dd4c:	4298      	cmp	r0, r3
    dd4e:	d036      	beq.n	ddbe <bt_gatt_write+0xde>
		net_buf_unref(buf);
    dd50:	4630      	mov	r0, r6
    dd52:	f00d fbff 	bl	1b554 <net_buf_unref>
		return -ENOMEM;
    dd56:	f06f 000b 	mvn.w	r0, #11
}
    dd5a:	b005      	add	sp, #20
    dd5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = MIN(params->length, bt_att_get_mtu(conn) - sizeof(*req) - 1);
    dd5e:	89a6      	ldrh	r6, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_REQ,
    dd60:	1d32      	adds	r2, r6, #4
    dd62:	2116      	movs	r1, #22
    dd64:	4628      	mov	r0, r5
    dd66:	f7fe f9fd 	bl	c164 <bt_att_create_pdu>
	if (!buf) {
    dd6a:	4607      	mov	r7, r0
    dd6c:	2800      	cmp	r0, #0
    dd6e:	d0f2      	beq.n	dd56 <bt_gatt_write+0x76>
	req = net_buf_add(buf, sizeof(*req));
    dd70:	2104      	movs	r1, #4
    dd72:	3008      	adds	r0, #8
    dd74:	f015 fd6a 	bl	2384c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
    dd78:	88a3      	ldrh	r3, [r4, #4]
    dd7a:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->offset);
    dd7c:	88e3      	ldrh	r3, [r4, #6]
    dd7e:	8043      	strh	r3, [r0, #2]
	write = net_buf_append_bytes(buf, len, params->data, K_NO_WAIT,
    dd80:	2300      	movs	r3, #0
    dd82:	e9cd 3302 	strd	r3, r3, [sp, #8]
    dd86:	2200      	movs	r2, #0
    dd88:	2300      	movs	r3, #0
    dd8a:	e9cd 2300 	strd	r2, r3, [sp]
    dd8e:	4631      	mov	r1, r6
    dd90:	68a2      	ldr	r2, [r4, #8]
    dd92:	4638      	mov	r0, r7
    dd94:	f015 fda7 	bl	238e6 <net_buf_append_bytes>
	params->offset += write;
    dd98:	88e2      	ldrh	r2, [r4, #6]
	params->length -= write;
    dd9a:	89a3      	ldrh	r3, [r4, #12]
	params->offset += write;
    dd9c:	fa12 f280 	uxtah	r2, r2, r0
    dda0:	80e2      	strh	r2, [r4, #6]
	params->data = (const uint8_t *)params->data + len;
    dda2:	68a2      	ldr	r2, [r4, #8]
	params->length -= write;
    dda4:	1a1b      	subs	r3, r3, r0
	params->data = (const uint8_t *)params->data + len;
    dda6:	4416      	add	r6, r2
	return gatt_send(conn, buf, gatt_prepare_write_rsp, params, NULL);
    dda8:	4a08      	ldr	r2, [pc, #32]	; (ddcc <bt_gatt_write+0xec>)
	params->length -= write;
    ddaa:	81a3      	strh	r3, [r4, #12]
	params->data = (const uint8_t *)params->data + len;
    ddac:	60a6      	str	r6, [r4, #8]
	return gatt_send(conn, buf, gatt_prepare_write_rsp, params, NULL);
    ddae:	4623      	mov	r3, r4
    ddb0:	4639      	mov	r1, r7
	return gatt_send(conn, buf, gatt_write_rsp, params, NULL);
    ddb2:	4628      	mov	r0, r5
}
    ddb4:	b005      	add	sp, #20
    ddb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return gatt_send(conn, buf, gatt_write_rsp, params, NULL);
    ddba:	f7fe bf51 	b.w	cc60 <gatt_send.constprop.0>
    ddbe:	4a04      	ldr	r2, [pc, #16]	; (ddd0 <bt_gatt_write+0xf0>)
    ddc0:	4623      	mov	r3, r4
    ddc2:	4631      	mov	r1, r6
    ddc4:	e7f5      	b.n	ddb2 <bt_gatt_write+0xd2>
		return -ENOTCONN;
    ddc6:	f06f 0038 	mvn.w	r0, #56	; 0x38
    ddca:	e7c6      	b.n	dd5a <bt_gatt_write+0x7a>
    ddcc:	0000ddd5 	.word	0x0000ddd5
    ddd0:	000228ef 	.word	0x000228ef

0000ddd4 <gatt_prepare_write_rsp>:
{
    ddd4:	b570      	push	{r4, r5, r6, lr}
    ddd6:	9c04      	ldr	r4, [sp, #16]
    ddd8:	4606      	mov	r6, r0
	if (err) {
    ddda:	b121      	cbz	r1, dde6 <gatt_prepare_write_rsp+0x12>
		params->func(conn, err, params);
    dddc:	6823      	ldr	r3, [r4, #0]
    ddde:	4622      	mov	r2, r4
}
    dde0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, err, params);
    dde4:	4718      	bx	r3
	if (!params->length) {
    dde6:	89a3      	ldrh	r3, [r4, #12]
    dde8:	b99b      	cbnz	r3, de12 <gatt_prepare_write_rsp+0x3e>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_REQ, sizeof(*req));
    ddea:	2201      	movs	r2, #1
    ddec:	2118      	movs	r1, #24
    ddee:	f7fe f9b9 	bl	c164 <bt_att_create_pdu>
	if (!buf) {
    ddf2:	4605      	mov	r5, r0
    ddf4:	b190      	cbz	r0, de1c <gatt_prepare_write_rsp+0x48>
	req = net_buf_add(buf, sizeof(*req));
    ddf6:	2101      	movs	r1, #1
    ddf8:	3008      	adds	r0, #8
    ddfa:	f015 fd27 	bl	2384c <net_buf_simple_add>
	req->flags = BT_ATT_FLAG_EXEC;
    ddfe:	2301      	movs	r3, #1
    de00:	7003      	strb	r3, [r0, #0]
	return gatt_send(conn, buf, gatt_write_rsp, params, NULL);
    de02:	4629      	mov	r1, r5
    de04:	4623      	mov	r3, r4
    de06:	4630      	mov	r0, r6
    de08:	4a05      	ldr	r2, [pc, #20]	; (de20 <gatt_prepare_write_rsp+0x4c>)
}
    de0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return gatt_send(conn, buf, gatt_write_rsp, params, NULL);
    de0e:	f7fe bf27 	b.w	cc60 <gatt_send.constprop.0>
	bt_gatt_write(conn, params);
    de12:	4621      	mov	r1, r4
}
    de14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_gatt_write(conn, params);
    de18:	f7ff bf62 	b.w	dce0 <bt_gatt_write>
}
    de1c:	bd70      	pop	{r4, r5, r6, pc}
    de1e:	bf00      	nop
    de20:	000228ef 	.word	0x000228ef

0000de24 <bt_gatt_mult_notification>:
{
    de24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de28:	b087      	sub	sp, #28
    de2a:	4682      	mov	sl, r0
    de2c:	460c      	mov	r4, r1
    de2e:	4616      	mov	r6, r2
	sub = gatt_sub_find(conn);
    de30:	f7fe fe0c 	bl	ca4c <gatt_sub_find>
	if (!sub) {
    de34:	4607      	mov	r7, r0
    de36:	b1f8      	cbz	r0, de78 <bt_gatt_mult_notification+0x54>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
    de38:	4632      	mov	r2, r6
    de3a:	4621      	mov	r1, r4
    de3c:	a803      	add	r0, sp, #12
    de3e:	f015 fcc8 	bl	237d2 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
    de42:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    de46:	2b04      	cmp	r3, #4
    de48:	d916      	bls.n	de78 <bt_gatt_mult_notification+0x54>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    de4a:	2104      	movs	r1, #4
    de4c:	a803      	add	r0, sp, #12
    de4e:	f015 fd2e 	bl	238ae <net_buf_simple_pull_mem>
		if (len > buf.len) {
    de52:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		len = sys_cpu_to_le16(nfy->len);
    de56:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		if (len > buf.len) {
    de5a:	4543      	cmp	r3, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    de5c:	4605      	mov	r5, r0
		if (len > buf.len) {
    de5e:	d20e      	bcs.n	de7e <bt_gatt_mult_notification+0x5a>
    de60:	4a1c      	ldr	r2, [pc, #112]	; (ded4 <bt_gatt_mult_notification+0xb0>)
    de62:	4b1d      	ldr	r3, [pc, #116]	; (ded8 <bt_gatt_mult_notification+0xb4>)
			BT_ERR("Invalid data len %u > %u", len, length);
    de64:	481d      	ldr	r0, [pc, #116]	; (dedc <bt_gatt_mult_notification+0xb8>)
    de66:	1a9b      	subs	r3, r3, r2
    de68:	08db      	lsrs	r3, r3, #3
    de6a:	019b      	lsls	r3, r3, #6
    de6c:	f043 0301 	orr.w	r3, r3, #1
    de70:	4632      	mov	r2, r6
    de72:	4641      	mov	r1, r8
    de74:	f011 fddd 	bl	1fa32 <log_2>
}
    de78:	b007      	add	sp, #28
    de7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    de7e:	68bb      	ldr	r3, [r7, #8]
    de80:	b31b      	cbz	r3, deca <bt_gatt_mult_notification+0xa6>
    de82:	f1b3 0914 	subs.w	r9, r3, #20
    de86:	d020      	beq.n	deca <bt_gatt_mult_notification+0xa6>
    de88:	681c      	ldr	r4, [r3, #0]
    de8a:	b104      	cbz	r4, de8e <bt_gatt_mult_notification+0x6a>
    de8c:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
    de8e:	462b      	mov	r3, r5
    de90:	f833 bb04 	ldrh.w	fp, [r3], #4
    de94:	9301      	str	r3, [sp, #4]
			if (handle != params->value_handle) {
    de96:	f8b9 3008 	ldrh.w	r3, [r9, #8]
    de9a:	455b      	cmp	r3, fp
    de9c:	d10b      	bne.n	deb6 <bt_gatt_mult_notification+0x92>
			if (params->notify(conn, params, nfy->value, len) ==
    de9e:	9a01      	ldr	r2, [sp, #4]
    dea0:	f8d9 5000 	ldr.w	r5, [r9]
    dea4:	4643      	mov	r3, r8
    dea6:	4649      	mov	r1, r9
    dea8:	4650      	mov	r0, sl
    deaa:	47a8      	blx	r5
    deac:	b918      	cbnz	r0, deb6 <bt_gatt_mult_notification+0x92>
				bt_gatt_unsubscribe(conn, params);
    deae:	4649      	mov	r1, r9
    deb0:	4650      	mov	r0, sl
    deb2:	f015 f818 	bl	22ee6 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    deb6:	b144      	cbz	r4, deca <bt_gatt_mult_notification+0xa6>
Z_GENLIST_PEEK_NEXT(slist, snode)
    deb8:	f114 0314 	adds.w	r3, r4, #20
    debc:	d002      	beq.n	dec4 <bt_gatt_mult_notification+0xa0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    debe:	6963      	ldr	r3, [r4, #20]
    dec0:	b103      	cbz	r3, dec4 <bt_gatt_mult_notification+0xa0>
    dec2:	3b14      	subs	r3, #20
{
    dec4:	46a1      	mov	r9, r4
    dec6:	461c      	mov	r4, r3
    dec8:	e7e5      	b.n	de96 <bt_gatt_mult_notification+0x72>
		net_buf_simple_pull_mem(&buf, len);
    deca:	4641      	mov	r1, r8
    decc:	a803      	add	r0, sp, #12
    dece:	f015 fcee 	bl	238ae <net_buf_simple_pull_mem>
    ded2:	e7b6      	b.n	de42 <bt_gatt_mult_notification+0x1e>
    ded4:	00024c24 	.word	0x00024c24
    ded8:	00024cdc 	.word	0x00024cdc
    dedc:	000285f3 	.word	0x000285f3

0000dee0 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    dee0:	b573      	push	{r0, r1, r4, r5, r6, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    dee2:	4a1d      	ldr	r2, [pc, #116]	; (df58 <bt_gatt_connected+0x78>)
	data.conn = conn;
    dee4:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    dee6:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
    deea:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    deec:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    deee:	2001      	movs	r0, #1
    def0:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    def4:	f014 ff57 	bl	22da6 <bt_gatt_foreach_attr>
	 * client prior to sending an indication or notification. If the client
	 * does not have an LTK indicating that the client has lost the bond,
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    bt_conn_get_security(conn) < data.sec) {
    def8:	4628      	mov	r0, r5
    defa:	f013 ff7b 	bl	21df4 <bt_conn_get_security>
    defe:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    df02:	4288      	cmp	r0, r1
    df04:	d202      	bcs.n	df0c <bt_gatt_connected+0x2c>
		bt_conn_set_security(conn, data.sec);
    df06:	4628      	mov	r0, r5
    df08:	f013 ff41 	bl	21d8e <bt_conn_set_security>
	sub = gatt_sub_find(conn);
    df0c:	4628      	mov	r0, r5
    df0e:	f7fe fd9d 	bl	ca4c <gatt_sub_find>
	if (!sub) {
    df12:	b128      	cbz	r0, df20 <bt_gatt_connected+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    df14:	6884      	ldr	r4, [r0, #8]
    df16:	b11c      	cbz	r4, df20 <bt_gatt_connected+0x40>
    df18:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    df1a:	f105 0688 	add.w	r6, r5, #136	; 0x88
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    df1e:	b90c      	cbnz	r4, df24 <bt_gatt_connected+0x44>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    df20:	b002      	add	sp, #8
    df22:	bd70      	pop	{r4, r5, r6, pc}
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    df24:	7a28      	ldrb	r0, [r5, #8]
    df26:	4631      	mov	r1, r6
    df28:	f013 fe6a 	bl	21c00 <bt_addr_le_is_bonded>
    df2c:	b160      	cbz	r0, df48 <bt_gatt_connected+0x68>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    df2e:	f3bf 8f5b 	dmb	ish
    df32:	6923      	ldr	r3, [r4, #16]
    df34:	f3bf 8f5b 	dmb	ish
    df38:	079b      	lsls	r3, r3, #30
    df3a:	d405      	bmi.n	df48 <bt_gatt_connected+0x68>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
    df3c:	89a2      	ldrh	r2, [r4, #12]
    df3e:	8961      	ldrh	r1, [r4, #10]
    df40:	4623      	mov	r3, r4
    df42:	4628      	mov	r0, r5
    df44:	f7fe ff82 	bl	ce4c <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    df48:	f114 0f14 	cmn.w	r4, #20
    df4c:	d0e8      	beq.n	df20 <bt_gatt_connected+0x40>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    df4e:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    df50:	2c00      	cmp	r4, #0
    df52:	d0e5      	beq.n	df20 <bt_gatt_connected+0x40>
    df54:	3c14      	subs	r4, #20
    df56:	e7e2      	b.n	df1e <bt_gatt_connected+0x3e>
    df58:	0000d47d 	.word	0x0000d47d

0000df5c <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
    df5c:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    df5e:	4a06      	ldr	r2, [pc, #24]	; (df78 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    df60:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    df62:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    df64:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    df66:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    df6a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    df6e:	f014 ff1a 	bl	22da6 <bt_gatt_foreach_attr>
}
    df72:	b003      	add	sp, #12
    df74:	f85d fb04 	ldr.w	pc, [sp], #4
    df78:	0000d47d 	.word	0x0000d47d

0000df7c <db_hash_read>:
{
    df7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    df7e:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    df80:	480f      	ldr	r0, [pc, #60]	; (dfc0 <db_hash_read+0x44>)
{
    df82:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    df86:	4615      	mov	r5, r2
    df88:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
    df8a:	f016 fae7 	bl	2455c <k_delayed_work_cancel>
	if (!err) {
    df8e:	b908      	cbnz	r0, df94 <db_hash_read+0x18>
		db_hash_gen(true);
    df90:	f7ff f97e 	bl	d290 <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
    df94:	2101      	movs	r1, #1
    df96:	4620      	mov	r0, r4
    df98:	f015 f849 	bl	2302e <bt_gatt_change_aware>
	if (offset > value_len) {
    df9c:	2e10      	cmp	r6, #16
    df9e:	d80c      	bhi.n	dfba <db_hash_read+0x3e>
	len = MIN(buf_len, value_len - offset);
    dfa0:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    dfa4:	4907      	ldr	r1, [pc, #28]	; (dfc4 <db_hash_read+0x48>)
	len = MIN(buf_len, value_len - offset);
    dfa6:	42bc      	cmp	r4, r7
    dfa8:	bfa8      	it	ge
    dfaa:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    dfac:	4622      	mov	r2, r4
    dfae:	4431      	add	r1, r6
    dfb0:	4628      	mov	r0, r5
    dfb2:	f013 fb78 	bl	216a6 <memcpy>
}
    dfb6:	4620      	mov	r0, r4
    dfb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    dfba:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    dfbe:	e7fa      	b.n	dfb6 <db_hash_read+0x3a>
    dfc0:	20001008 	.word	0x20001008
    dfc4:	2000682c 	.word	0x2000682c

0000dfc8 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    dfc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    dfcc:	4a33      	ldr	r2, [pc, #204]	; (e09c <bt_gatt_disconnected+0xd4>)
    dfce:	4603      	mov	r3, r0
{
    dfd0:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    dfd2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dfd6:	2001      	movs	r0, #1
    dfd8:	f014 fee5 	bl	22da6 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    dfdc:	4620      	mov	r0, r4
    dfde:	f7fe fd35 	bl	ca4c <gatt_sub_find>
	if (!sub) {
    dfe2:	4606      	mov	r6, r0
    dfe4:	b3a8      	cbz	r0, e052 <bt_gatt_disconnected+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    dfe6:	6883      	ldr	r3, [r0, #8]
    dfe8:	b39b      	cbz	r3, e052 <bt_gatt_disconnected+0x8a>
    dfea:	f1b3 0714 	subs.w	r7, r3, #20
    dfee:	d030      	beq.n	e052 <bt_gatt_disconnected+0x8a>
    dff0:	681d      	ldr	r5, [r3, #0]
    dff2:	b105      	cbz	r5, dff6 <bt_gatt_disconnected+0x2e>
    dff4:	3d14      	subs	r5, #20
{
    dff6:	f04f 0b00 	mov.w	fp, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    dffa:	f104 0888 	add.w	r8, r4, #136	; 0x88
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    dffe:	f106 0901 	add.w	r9, r6, #1
			params->value = 0U;
    e002:	46da      	mov	sl, fp
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    e004:	7a20      	ldrb	r0, [r4, #8]
    e006:	4641      	mov	r1, r8
    e008:	f013 fdfa 	bl	21c00 <bt_addr_le_is_bonded>
    e00c:	b988      	cbnz	r0, e032 <bt_gatt_disconnected+0x6a>
			params->value = 0U;
    e00e:	f8a7 a00c 	strh.w	sl, [r7, #12]
			gatt_sub_remove(conn, sub, prev, params);
    e012:	463b      	mov	r3, r7
    e014:	465a      	mov	r2, fp
    e016:	4631      	mov	r1, r6
    e018:	4620      	mov	r0, r4
    e01a:	f014 fde1 	bl	22be0 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    e01e:	b1c5      	cbz	r5, e052 <bt_gatt_disconnected+0x8a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    e020:	f115 0114 	adds.w	r1, r5, #20
    e024:	d002      	beq.n	e02c <bt_gatt_disconnected+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e026:	6969      	ldr	r1, [r5, #20]
    e028:	b101      	cbz	r1, e02c <bt_gatt_disconnected+0x64>
    e02a:	3914      	subs	r1, #20
{
    e02c:	462f      	mov	r7, r5
    e02e:	460d      	mov	r5, r1
    e030:	e7e8      	b.n	e004 <bt_gatt_disconnected+0x3c>
    e032:	f3bf 8f5b 	dmb	ish
    e036:	693b      	ldr	r3, [r7, #16]
    e038:	f3bf 8f5b 	dmb	ish
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    e03c:	07db      	lsls	r3, r3, #31
    e03e:	d4e6      	bmi.n	e00e <bt_gatt_disconnected+0x46>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    e040:	7873      	ldrb	r3, [r6, #1]
    e042:	b11b      	cbz	r3, e04c <bt_gatt_disconnected+0x84>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    e044:	4641      	mov	r1, r8
    e046:	4648      	mov	r0, r9
    e048:	f014 fcdb 	bl	22a02 <bt_addr_le_copy>
			prev = &params->node;
    e04c:	f107 0b14 	add.w	fp, r7, #20
    e050:	e7e5      	b.n	e01e <bt_gatt_disconnected+0x56>
	cfg = find_cf_cfg(conn);
    e052:	4620      	mov	r0, r4
    e054:	f7fe fcac 	bl	c9b0 <find_cf_cfg>
	if (!cfg) {
    e058:	4605      	mov	r5, r0
    e05a:	b1e0      	cbz	r0, e096 <bt_gatt_disconnected+0xce>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e05c:	f104 0688 	add.w	r6, r4, #136	; 0x88
    e060:	7a20      	ldrb	r0, [r4, #8]
    e062:	4631      	mov	r1, r6
    e064:	f013 fdcc 	bl	21c00 <bt_addr_le_is_bonded>
    e068:	b920      	cbnz	r0, e074 <bt_gatt_disconnected+0xac>
		clear_cf_cfg(cfg);
    e06a:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    e06c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
    e070:	f014 bcd6 	b.w	22a20 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    e074:	1c68      	adds	r0, r5, #1
    e076:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e078:	350c      	adds	r5, #12
    e07a:	f014 fcc2 	bl	22a02 <bt_addr_le_copy>
    e07e:	f3bf 8f5b 	dmb	ish
    e082:	e855 3f00 	ldrex	r3, [r5]
    e086:	f023 0302 	bic.w	r3, r3, #2
    e08a:	e845 3200 	strex	r2, r3, [r5]
    e08e:	2a00      	cmp	r2, #0
    e090:	d1f7      	bne.n	e082 <bt_gatt_disconnected+0xba>
    e092:	f3bf 8f5b 	dmb	ish
}
    e096:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e09a:	bf00      	nop
    e09c:	0000d00d 	.word	0x0000d00d

0000e0a0 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    e0a0:	4b10      	ldr	r3, [pc, #64]	; (e0e4 <get_io_capa+0x44>)
    e0a2:	681b      	ldr	r3, [r3, #0]
    e0a4:	b1bb      	cbz	r3, e0d6 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    e0a6:	681a      	ldr	r2, [r3, #0]
    e0a8:	b142      	cbz	r2, e0bc <get_io_capa+0x1c>
    e0aa:	6859      	ldr	r1, [r3, #4]
    e0ac:	b131      	cbz	r1, e0bc <get_io_capa+0x1c>
    e0ae:	6899      	ldr	r1, [r3, #8]
    e0b0:	b911      	cbnz	r1, e0b8 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    e0b2:	490d      	ldr	r1, [pc, #52]	; (e0e8 <get_io_capa+0x48>)
    e0b4:	7809      	ldrb	r1, [r1, #0]
    e0b6:	b939      	cbnz	r1, e0c8 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    e0b8:	2004      	movs	r0, #4
    e0ba:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    e0bc:	490a      	ldr	r1, [pc, #40]	; (e0e8 <get_io_capa+0x48>)
    e0be:	7809      	ldrb	r1, [r1, #0]
    e0c0:	b111      	cbz	r1, e0c8 <get_io_capa+0x28>
    e0c2:	b10a      	cbz	r2, e0c8 <get_io_capa+0x28>
    e0c4:	6899      	ldr	r1, [r3, #8]
    e0c6:	b941      	cbnz	r1, e0da <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    e0c8:	685b      	ldr	r3, [r3, #4]
    e0ca:	b943      	cbnz	r3, e0de <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    e0cc:	2a00      	cmp	r2, #0
    e0ce:	bf0c      	ite	eq
    e0d0:	2003      	moveq	r0, #3
    e0d2:	2000      	movne	r0, #0
    e0d4:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    e0d6:	2003      	movs	r0, #3
    e0d8:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    e0da:	2001      	movs	r0, #1
    e0dc:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    e0de:	2002      	movs	r0, #2
	}
}
    e0e0:	4770      	bx	lr
    e0e2:	bf00      	nop
    e0e4:	200029bc 	.word	0x200029bc
    e0e8:	2000683d 	.word	0x2000683d

0000e0ec <get_auth.isra.0>:
	oobd_present = enable;
}

static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
{
	if (sc_supported) {
    e0ec:	4b0c      	ldr	r3, [pc, #48]	; (e120 <get_auth.isra.0+0x34>)
    e0ee:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    e0f0:	b510      	push	{r4, lr}
	if (sc_supported) {
    e0f2:	b17b      	cbz	r3, e114 <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    e0f4:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    e0f8:	f7ff ffd2 	bl	e0a0 <get_io_capa>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
	}

	if (bondable) {
    e0fc:	4b09      	ldr	r3, [pc, #36]	; (e124 <get_auth.isra.0+0x38>)
    e0fe:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    e100:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    e102:	bf0c      	ite	eq
    e104:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    e108:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    e10c:	b12b      	cbz	r3, e11a <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    e10e:	f044 0001 	orr.w	r0, r4, #1
	} else {
		auth &= ~BT_SMP_AUTH_BONDING;
	}

	return auth;
}
    e112:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    e114:	f000 0407 	and.w	r4, r0, #7
    e118:	e7ee      	b.n	e0f8 <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    e11a:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    e11e:	e7f8      	b.n	e112 <get_auth.isra.0+0x26>
    e120:	2000683d 	.word	0x2000683d
    e124:	20000729 	.word	0x20000729

0000e128 <smp_chan_get>:
		return false;
	}
}

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
    e128:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    e12a:	2106      	movs	r1, #6
    e12c:	f013 ffa0 	bl	22070 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    e130:	4604      	mov	r4, r0
    e132:	b948      	cbnz	r0, e148 <smp_chan_get+0x20>
    e134:	4905      	ldr	r1, [pc, #20]	; (e14c <smp_chan_get+0x24>)
    e136:	4b06      	ldr	r3, [pc, #24]	; (e150 <smp_chan_get+0x28>)
		BT_ERR("Unable to find SMP channel");
    e138:	4806      	ldr	r0, [pc, #24]	; (e154 <smp_chan_get+0x2c>)
    e13a:	1ac9      	subs	r1, r1, r3
    e13c:	08c9      	lsrs	r1, r1, #3
    e13e:	0189      	lsls	r1, r1, #6
    e140:	f041 0101 	orr.w	r1, r1, #1
    e144:	f011 fc54 	bl	1f9f0 <log_0>
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
}
    e148:	4620      	mov	r0, r4
    e14a:	bd10      	pop	{r4, pc}
    e14c:	00024d0c 	.word	0x00024d0c
    e150:	00024c24 	.word	0x00024c24
    e154:	0002861b 	.word	0x0002861b

0000e158 <smp_init>:
{
    e158:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    e15a:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
{
    e15e:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    e160:	22f0      	movs	r2, #240	; 0xf0
    e162:	2100      	movs	r1, #0
    e164:	4628      	mov	r0, r5
    e166:	f013 fac9 	bl	216fc <memset>
	if (bt_rand(smp->prnd, 16)) {
    e16a:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    e16e:	2110      	movs	r1, #16
    e170:	f004 fa00 	bl	12574 <bt_rand>
    e174:	4604      	mov	r4, r0
    e176:	b948      	cbnz	r0, e18c <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    e178:	2105      	movs	r1, #5
    e17a:	4628      	mov	r0, r5
    e17c:	f014 ff95 	bl	230aa <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    e180:	f7fc fb7c 	bl	a87c <bt_pub_key_get>
    e184:	4b02      	ldr	r3, [pc, #8]	; (e190 <smp_init+0x38>)
    e186:	6018      	str	r0, [r3, #0]
}
    e188:	4620      	mov	r0, r4
    e18a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    e18c:	2408      	movs	r4, #8
    e18e:	e7fb      	b.n	e188 <smp_init+0x30>
    e190:	20002a70 	.word	0x20002a70

0000e194 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    e194:	4a0b      	ldr	r2, [pc, #44]	; (e1c4 <bt_smp_accept+0x30>)
{
    e196:	b508      	push	{r3, lr}
    e198:	4603      	mov	r3, r0
		if (smp->chan.chan.conn) {
    e19a:	6810      	ldr	r0, [r2, #0]
    e19c:	b918      	cbnz	r0, e1a6 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    e19e:	4b0a      	ldr	r3, [pc, #40]	; (e1c8 <bt_smp_accept+0x34>)
    e1a0:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan.chan;
    e1a2:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    e1a4:	bd08      	pop	{r3, pc}
    e1a6:	4909      	ldr	r1, [pc, #36]	; (e1cc <bt_smp_accept+0x38>)
    e1a8:	4a09      	ldr	r2, [pc, #36]	; (e1d0 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    e1aa:	480a      	ldr	r0, [pc, #40]	; (e1d4 <bt_smp_accept+0x40>)
    e1ac:	1a52      	subs	r2, r2, r1
    e1ae:	08d2      	lsrs	r2, r2, #3
    e1b0:	0192      	lsls	r2, r2, #6
    e1b2:	f042 0201 	orr.w	r2, r2, #1
    e1b6:	4619      	mov	r1, r3
    e1b8:	f011 fc27 	bl	1fa0a <log_1>
	return -ENOMEM;
    e1bc:	f06f 000b 	mvn.w	r0, #11
    e1c0:	e7f0      	b.n	e1a4 <bt_smp_accept+0x10>
    e1c2:	bf00      	nop
    e1c4:	20001090 	.word	0x20001090
    e1c8:	000255bc 	.word	0x000255bc
    e1cc:	00024c24 	.word	0x00024c24
    e1d0:	00024d0c 	.word	0x00024d0c
    e1d4:	00028636 	.word	0x00028636

0000e1d8 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    e1d8:	b513      	push	{r0, r1, r4, lr}
    e1da:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    e1dc:	2200      	movs	r2, #0
    e1de:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    e1e0:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    e1e2:	460a      	mov	r2, r1
    e1e4:	6800      	ldr	r0, [r0, #0]
    e1e6:	2106      	movs	r1, #6
    e1e8:	f013 ff19 	bl	2201e <bt_l2cap_send_cb>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    e1ec:	4805      	ldr	r0, [pc, #20]	; (e204 <smp_send.isra.0+0x2c>)
    e1ee:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    e1f2:	2300      	movs	r3, #0
    e1f4:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
}
    e1f8:	b002      	add	sp, #8
    e1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e1fe:	f010 bba1 	b.w	1e944 <k_delayed_work_submit_to_queue>
    e202:	bf00      	nop
    e204:	200014c8 	.word	0x200014c8

0000e208 <compute_and_check_and_send_slave_dhcheck>:
{
    e208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
    e20c:	2210      	movs	r2, #16
{
    e20e:	b0a3      	sub	sp, #140	; 0x8c
    e210:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    e212:	2100      	movs	r1, #0
    e214:	eb0d 0002 	add.w	r0, sp, r2
    e218:	f013 fa70 	bl	216fc <memset>
	switch (smp->method) {
    e21c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    e220:	2b05      	cmp	r3, #5
    e222:	d87e      	bhi.n	e322 <compute_and_check_and_send_slave_dhcheck+0x11a>
    e224:	e8df f003 	tbb	[pc, r3]
    e228:	09030309 	.word	0x09030309
    e22c:	7f7d      	.short	0x7f7d
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    e22e:	2204      	movs	r2, #4
    e230:	f504 71c8 	add.w	r1, r4, #400	; 0x190
    e234:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    e236:	f013 fa36 	bl	216a6 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
    e23a:	4b63      	ldr	r3, [pc, #396]	; (e3c8 <compute_and_check_and_send_slave_dhcheck+0x1c0>)
		   &smp->chan.chan.conn->le.init_addr,
    e23c:	f8d4 9000 	ldr.w	r9, [r4]
	uint8_t m[53] = { 0x00, /* counter */
    e240:	aa14      	add	r2, sp, #80	; 0x50
    e242:	f103 0630 	add.w	r6, r3, #48	; 0x30
    e246:	6818      	ldr	r0, [r3, #0]
    e248:	6859      	ldr	r1, [r3, #4]
    e24a:	4615      	mov	r5, r2
    e24c:	c503      	stmia	r5!, {r0, r1}
    e24e:	3308      	adds	r3, #8
    e250:	42b3      	cmp	r3, r6
    e252:	462a      	mov	r2, r5
    e254:	d1f7      	bne.n	e246 <compute_and_check_and_send_slave_dhcheck+0x3e>
    e256:	6818      	ldr	r0, [r3, #0]
    e258:	791b      	ldrb	r3, [r3, #4]
    e25a:	6028      	str	r0, [r5, #0]
    e25c:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
    e25e:	ad0c      	add	r5, sp, #48	; 0x30
    e260:	2220      	movs	r2, #32
    e262:	f204 114f 	addw	r1, r4, #335	; 0x14f
    e266:	4628      	mov	r0, r5
    e268:	f014 ff13 	bl	23092 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    e26c:	4857      	ldr	r0, [pc, #348]	; (e3cc <compute_and_check_and_send_slave_dhcheck+0x1c4>)
    e26e:	ab08      	add	r3, sp, #32
    e270:	2220      	movs	r2, #32
    e272:	4629      	mov	r1, r5
    e274:	f014 ff36 	bl	230e4 <bt_smp_aes_cmac>
	if (err) {
    e278:	2800      	cmp	r0, #0
    e27a:	d152      	bne.n	e322 <compute_and_check_and_send_slave_dhcheck+0x11a>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    e27c:	f104 07ef 	add.w	r7, r4, #239	; 0xef
	sys_memcpy_swap(m + 5, n1, 16);
    e280:	2210      	movs	r2, #16
    e282:	4639      	mov	r1, r7
    e284:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    e288:	f104 08df 	add.w	r8, r4, #223	; 0xdf
	sys_memcpy_swap(m + 5, n1, 16);
    e28c:	f014 ff01 	bl	23092 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    e290:	2210      	movs	r2, #16
    e292:	4641      	mov	r1, r8
    e294:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    e298:	f014 fefb 	bl	23092 <sys_memcpy_swap>
	m[37] = a1->type;
    e29c:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
    e2a0:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    e2a4:	2206      	movs	r2, #6
    e2a6:	f109 0190 	add.w	r1, r9, #144	; 0x90
    e2aa:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    e2ae:	f014 fef0 	bl	23092 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    e2b2:	f204 167f 	addw	r6, r4, #383	; 0x17f
	m[44] = a2->type;
    e2b6:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
    e2ba:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    e2be:	2206      	movs	r2, #6
    e2c0:	f109 0197 	add.w	r1, r9, #151	; 0x97
    e2c4:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    e2c8:	f014 fee3 	bl	23092 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    e2cc:	4633      	mov	r3, r6
    e2ce:	2235      	movs	r2, #53	; 0x35
    e2d0:	a914      	add	r1, sp, #80	; 0x50
    e2d2:	a808      	add	r0, sp, #32
    e2d4:	f014 ff06 	bl	230e4 <bt_smp_aes_cmac>
	if (err) {
    e2d8:	bb18      	cbnz	r0, e322 <compute_and_check_and_send_slave_dhcheck+0x11a>
	sys_mem_swap(mackey, 16);
    e2da:	4630      	mov	r0, r6
    e2dc:	f014 ff3a 	bl	23154 <sys_mem_swap.constprop.0>
		   smp->tk)) {
    e2e0:	f104 09ff 	add.w	r9, r4, #255	; 0xff
	m[0] = 0x01;
    e2e4:	2301      	movs	r3, #1
    e2e6:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    e2ea:	2235      	movs	r2, #53	; 0x35
    e2ec:	464b      	mov	r3, r9
    e2ee:	a914      	add	r1, sp, #80	; 0x50
    e2f0:	a808      	add	r0, sp, #32
    e2f2:	f014 fef7 	bl	230e4 <bt_smp_aes_cmac>
	if (err) {
    e2f6:	b9a0      	cbnz	r0, e322 <compute_and_check_and_send_slave_dhcheck+0x11a>
	sys_mem_swap(ltk, 16);
    e2f8:	4648      	mov	r0, r9
    e2fa:	f014 ff2b 	bl	23154 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
    e2fe:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    e300:	a914      	add	r1, sp, #80	; 0x50
		   &smp->chan.chan.conn->le.resp_addr,
    e302:	f852 3bc9 	ldr.w	r3, [r2], #201
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    e306:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    e308:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
    e30c:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    e30e:	e9cd 2300 	strd	r2, r3, [sp]
    e312:	9102      	str	r1, [sp, #8]
    e314:	ab04      	add	r3, sp, #16
    e316:	463a      	mov	r2, r7
    e318:	4641      	mov	r1, r8
    e31a:	4630      	mov	r0, r6
    e31c:	f014 ff28 	bl	23170 <smp_f6>
    e320:	b148      	cbz	r0, e336 <compute_and_check_and_send_slave_dhcheck+0x12e>
		return BT_SMP_ERR_UNSPECIFIED;
    e322:	2008      	movs	r0, #8
    e324:	e048      	b.n	e3b8 <compute_and_check_and_send_slave_dhcheck+0x1b0>
		if (smp->oobd_remote) {
    e326:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
    e32a:	2900      	cmp	r1, #0
    e32c:	d085      	beq.n	e23a <compute_and_check_and_send_slave_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    e32e:	2210      	movs	r2, #16
    e330:	eb0d 0002 	add.w	r0, sp, r2
    e334:	e77f      	b.n	e236 <compute_and_check_and_send_slave_dhcheck+0x2e>
	if (smp->method == LE_SC_OOB) {
    e336:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    e33a:	2b05      	cmp	r3, #5
    e33c:	d108      	bne.n	e350 <compute_and_check_and_send_slave_dhcheck+0x148>
		if (smp->oobd_local) {
    e33e:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
			memcpy(r, smp->oobd_local->r, sizeof(r));
    e342:	2210      	movs	r2, #16
    e344:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
    e348:	2900      	cmp	r1, #0
    e34a:	d038      	beq.n	e3be <compute_and_check_and_send_slave_dhcheck+0x1b6>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    e34c:	f013 f9ab 	bl	216a6 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    e350:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    e352:	4630      	mov	r0, r6
		   &smp->chan.chan.conn->le.init_addr,
    e354:	f852 3bc2 	ldr.w	r3, [r2], #194
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    e358:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    e35a:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    e35e:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    e360:	e9cd 2300 	strd	r2, r3, [sp]
    e364:	9102      	str	r1, [sp, #8]
    e366:	ab04      	add	r3, sp, #16
    e368:	4642      	mov	r2, r8
    e36a:	4639      	mov	r1, r7
    e36c:	f014 ff00 	bl	23170 <smp_f6>
    e370:	2800      	cmp	r0, #0
    e372:	d1d6      	bne.n	e322 <compute_and_check_and_send_slave_dhcheck+0x11a>
	if (memcmp(smp->e, re, 16)) {
    e374:	4629      	mov	r1, r5
    e376:	2210      	movs	r2, #16
    e378:	f204 106f 	addw	r0, r4, #367	; 0x16f
    e37c:	f013 f983 	bl	21686 <memcmp>
    e380:	4605      	mov	r5, r0
    e382:	b9f8      	cbnz	r0, e3c4 <compute_and_check_and_send_slave_dhcheck+0x1bc>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    e384:	210d      	movs	r1, #13
    e386:	4620      	mov	r0, r4
    e388:	f014 ff6e 	bl	23268 <smp_create_pdu.isra.0>
	if (!buf) {
    e38c:	4606      	mov	r6, r0
    e38e:	2800      	cmp	r0, #0
    e390:	d0c7      	beq.n	e322 <compute_and_check_and_send_slave_dhcheck+0x11a>
	req = net_buf_add(buf, sizeof(*req));
    e392:	2110      	movs	r1, #16
    e394:	3008      	adds	r0, #8
    e396:	f015 fa59 	bl	2384c <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    e39a:	2210      	movs	r2, #16
    e39c:	a914      	add	r1, sp, #80	; 0x50
    e39e:	f013 f982 	bl	216a6 <memcpy>
	smp_send(smp, buf, NULL, NULL);
    e3a2:	462a      	mov	r2, r5
    e3a4:	4631      	mov	r1, r6
    e3a6:	4620      	mov	r0, r4
    e3a8:	f7ff ff16 	bl	e1d8 <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    e3ac:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    e3b0:	2101      	movs	r1, #1
    e3b2:	f014 fe7a 	bl	230aa <atomic_set_bit>
	return 0;
    e3b6:	4628      	mov	r0, r5
}
    e3b8:	b023      	add	sp, #140	; 0x8c
    e3ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
    e3be:	f013 f99d 	bl	216fc <memset>
    e3c2:	e7c5      	b.n	e350 <compute_and_check_and_send_slave_dhcheck+0x148>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    e3c4:	200b      	movs	r0, #11
    e3c6:	e7f7      	b.n	e3b8 <compute_and_check_and_send_slave_dhcheck+0x1b0>
    e3c8:	00024e5f 	.word	0x00024e5f
    e3cc:	0002884f 	.word	0x0002884f

0000e3d0 <sc_send_public_key>:
{
    e3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    e3d2:	210c      	movs	r1, #12
{
    e3d4:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    e3d6:	f014 ff47 	bl	23268 <smp_create_pdu.isra.0>
	if (!req_buf) {
    e3da:	4604      	mov	r4, r0
    e3dc:	b1b0      	cbz	r0, e40c <sc_send_public_key+0x3c>
	req = net_buf_add(req_buf, sizeof(*req));
    e3de:	2140      	movs	r1, #64	; 0x40
    e3e0:	3008      	adds	r0, #8
    e3e2:	f015 fa33 	bl	2384c <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    e3e6:	4f0a      	ldr	r7, [pc, #40]	; (e410 <sc_send_public_key+0x40>)
    e3e8:	2220      	movs	r2, #32
    e3ea:	6839      	ldr	r1, [r7, #0]
	req = net_buf_add(req_buf, sizeof(*req));
    e3ec:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    e3ee:	f013 f95a 	bl	216a6 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    e3f2:	6839      	ldr	r1, [r7, #0]
    e3f4:	2220      	movs	r2, #32
    e3f6:	4411      	add	r1, r2
    e3f8:	18b0      	adds	r0, r6, r2
    e3fa:	f013 f954 	bl	216a6 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    e3fe:	4628      	mov	r0, r5
    e400:	2200      	movs	r2, #0
    e402:	4621      	mov	r1, r4
    e404:	f7ff fee8 	bl	e1d8 <smp_send.isra.0>
	return 0;
    e408:	2000      	movs	r0, #0
}
    e40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    e40c:	2008      	movs	r0, #8
    e40e:	e7fc      	b.n	e40a <sc_send_public_key+0x3a>
    e410:	20002a70 	.word	0x20002a70

0000e414 <smp_send_pairing_confirm>:
{
    e414:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    e416:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
    e41a:	2c02      	cmp	r4, #2
{
    e41c:	4605      	mov	r5, r0
	switch (smp->method) {
    e41e:	d824      	bhi.n	e46a <smp_send_pairing_confirm+0x56>
    e420:	b14c      	cbz	r4, e436 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    e422:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    e426:	f8d0 4190 	ldr.w	r4, [r0, #400]	; 0x190
    e42a:	40dc      	lsrs	r4, r3
    e42c:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    e430:	f064 047f 	orn	r4, r4, #127	; 0x7f
    e434:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    e436:	2103      	movs	r1, #3
    e438:	4628      	mov	r0, r5
    e43a:	f014 ff15 	bl	23268 <smp_create_pdu.isra.0>
	if (!buf) {
    e43e:	4606      	mov	r6, r0
    e440:	b1a8      	cbz	r0, e46e <smp_send_pairing_confirm+0x5a>
	req = net_buf_add(buf, sizeof(*req));
    e442:	2110      	movs	r1, #16
    e444:	3008      	adds	r0, #8
    e446:	f015 fa01 	bl	2384c <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    e44a:	9000      	str	r0, [sp, #0]
    e44c:	4810      	ldr	r0, [pc, #64]	; (e490 <smp_send_pairing_confirm+0x7c>)
    e44e:	4623      	mov	r3, r4
    e450:	6800      	ldr	r0, [r0, #0]
    e452:	f105 02df 	add.w	r2, r5, #223	; 0xdf
    e456:	f205 110f 	addw	r1, r5, #271	; 0x10f
    e45a:	f014 fed5 	bl	23208 <smp_f4>
    e45e:	4604      	mov	r4, r0
    e460:	b148      	cbz	r0, e476 <smp_send_pairing_confirm+0x62>
		net_buf_unref(buf);
    e462:	4630      	mov	r0, r6
    e464:	f00d f876 	bl	1b554 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    e468:	e001      	b.n	e46e <smp_send_pairing_confirm+0x5a>
	switch (smp->method) {
    e46a:	2c03      	cmp	r4, #3
    e46c:	d001      	beq.n	e472 <smp_send_pairing_confirm+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    e46e:	2008      	movs	r0, #8
    e470:	e00c      	b.n	e48c <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
    e472:	2400      	movs	r4, #0
    e474:	e7df      	b.n	e436 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
    e476:	4602      	mov	r2, r0
    e478:	4631      	mov	r1, r6
    e47a:	4628      	mov	r0, r5
    e47c:	f7ff feac 	bl	e1d8 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    e480:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    e484:	4621      	mov	r1, r4
    e486:	f014 fe1e 	bl	230c6 <atomic_clear_bit>
	return 0;
    e48a:	4620      	mov	r0, r4
}
    e48c:	b002      	add	sp, #8
    e48e:	bd70      	pop	{r4, r5, r6, pc}
    e490:	20002a70 	.word	0x20002a70

0000e494 <smp_public_key_slave.part.0>:
static uint8_t smp_public_key_slave(struct bt_smp *smp)
    e494:	b538      	push	{r3, r4, r5, lr}
    e496:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
    e49a:	4604      	mov	r4, r0
    e49c:	2b05      	cmp	r3, #5
    e49e:	d814      	bhi.n	e4ca <smp_public_key_slave.part.0+0x36>
    e4a0:	e8df f003 	tbb	[pc, r3]
    e4a4:	030d3603 	.word	0x030d3603
    e4a8:	5313      	.short	0x5313
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    e4aa:	30b8      	adds	r0, #184	; 0xb8
    e4ac:	2104      	movs	r1, #4
    e4ae:	f014 fdfc 	bl	230aa <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    e4b2:	4620      	mov	r0, r4
    e4b4:	f7ff ffae 	bl	e414 <smp_send_pairing_confirm>
		if (err) {
    e4b8:	2800      	cmp	r0, #0
    e4ba:	d037      	beq.n	e52c <smp_public_key_slave.part.0+0x98>
}
    e4bc:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    e4be:	2104      	movs	r1, #4
    e4c0:	f500 70c8 	add.w	r0, r0, #400	; 0x190
    e4c4:	f004 f856 	bl	12574 <bt_rand>
    e4c8:	b108      	cbz	r0, e4ce <smp_public_key_slave.part.0+0x3a>
	switch (smp->method) {
    e4ca:	2008      	movs	r0, #8
    e4cc:	e7f6      	b.n	e4bc <smp_public_key_slave.part.0+0x28>
		smp->passkey %= 1000000;
    e4ce:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    e4d2:	4a1f      	ldr	r2, [pc, #124]	; (e550 <smp_public_key_slave.part.0+0xbc>)
	if (bt_auth && bt_auth->passkey_display) {
    e4d4:	4d1f      	ldr	r5, [pc, #124]	; (e554 <smp_public_key_slave.part.0+0xc0>)
		smp->passkey %= 1000000;
    e4d6:	fbb1 f3f2 	udiv	r3, r1, r2
    e4da:	fb02 1313 	mls	r3, r2, r3, r1
    e4de:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
	if (bt_auth && bt_auth->passkey_display) {
    e4e2:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
    e4e4:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
	if (bt_auth && bt_auth->passkey_display) {
    e4e8:	b163      	cbz	r3, e504 <smp_public_key_slave.part.0+0x70>
    e4ea:	681b      	ldr	r3, [r3, #0]
    e4ec:	b153      	cbz	r3, e504 <smp_public_key_slave.part.0+0x70>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    e4ee:	210a      	movs	r1, #10
    e4f0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    e4f4:	f014 fdd9 	bl	230aa <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    e4f8:	682b      	ldr	r3, [r5, #0]
    e4fa:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    e4fe:	681b      	ldr	r3, [r3, #0]
    e500:	6820      	ldr	r0, [r4, #0]
    e502:	4798      	blx	r3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    e504:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    e506:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e50a:	f014 fdce 	bl	230aa <atomic_set_bit>
		break;
    e50e:	e00d      	b.n	e52c <smp_public_key_slave.part.0+0x98>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    e510:	2103      	movs	r1, #3
    e512:	30b8      	adds	r0, #184	; 0xb8
    e514:	f014 fdc9 	bl	230aa <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e518:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    e51c:	2109      	movs	r1, #9
    e51e:	f014 fdc4 	bl	230aa <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    e522:	4b0c      	ldr	r3, [pc, #48]	; (e554 <smp_public_key_slave.part.0+0xc0>)
    e524:	6820      	ldr	r0, [r4, #0]
    e526:	681b      	ldr	r3, [r3, #0]
    e528:	685b      	ldr	r3, [r3, #4]
    e52a:	4798      	blx	r3
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    e52c:	490a      	ldr	r1, [pc, #40]	; (e558 <smp_public_key_slave.part.0+0xc4>)
    e52e:	f204 100f 	addw	r0, r4, #271	; 0x10f
    e532:	f7fc f9b1 	bl	a898 <bt_dh_key_gen>
    e536:	4605      	mov	r5, r0
    e538:	2800      	cmp	r0, #0
    e53a:	d1c6      	bne.n	e4ca <smp_public_key_slave.part.0+0x36>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    e53c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    e540:	2107      	movs	r1, #7
    e542:	f014 fdb2 	bl	230aa <atomic_set_bit>
	return 0;
    e546:	4628      	mov	r0, r5
    e548:	e7b8      	b.n	e4bc <smp_public_key_slave.part.0+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    e54a:	2104      	movs	r1, #4
    e54c:	e7db      	b.n	e506 <smp_public_key_slave.part.0+0x72>
    e54e:	bf00      	nop
    e550:	000f4240 	.word	0x000f4240
    e554:	200029bc 	.word	0x200029bc
    e558:	0000ead1 	.word	0x0000ead1

0000e55c <smp_ident_info>:
{
    e55c:	b570      	push	{r4, r5, r6, lr}
    e55e:	460b      	mov	r3, r1
    e560:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e562:	210c      	movs	r1, #12
    e564:	30bc      	adds	r0, #188	; 0xbc
    e566:	f014 fe76 	bl	23256 <atomic_test_bit>
    e56a:	b308      	cbz	r0, e5b0 <smp_ident_info+0x54>
		struct bt_smp_ident_info *req = (void *)buf->data;
    e56c:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e56e:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    e570:	f103 0588 	add.w	r5, r3, #136	; 0x88
    e574:	7a19      	ldrb	r1, [r3, #8]
    e576:	462a      	mov	r2, r5
    e578:	2002      	movs	r0, #2
    e57a:	f015 f8e8 	bl	2374e <bt_keys_get_type>
		if (!keys) {
    e57e:	b990      	cbnz	r0, e5a6 <smp_ident_info+0x4a>
    e580:	4a0f      	ldr	r2, [pc, #60]	; (e5c0 <smp_ident_info+0x64>)
    e582:	4c10      	ldr	r4, [pc, #64]	; (e5c4 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    e584:	4628      	mov	r0, r5
    e586:	1aa4      	subs	r4, r4, r2
    e588:	f7f9 fdd4 	bl	8134 <bt_addr_le_str_real>
    e58c:	f7f5 fd38 	bl	4000 <log_strdup>
    e590:	08e4      	lsrs	r4, r4, #3
    e592:	01a4      	lsls	r4, r4, #6
    e594:	f044 0401 	orr.w	r4, r4, #1
    e598:	4601      	mov	r1, r0
    e59a:	4622      	mov	r2, r4
    e59c:	480a      	ldr	r0, [pc, #40]	; (e5c8 <smp_ident_info+0x6c>)
    e59e:	f011 fa34 	bl	1fa0a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e5a2:	2008      	movs	r0, #8
}
    e5a4:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    e5a6:	2210      	movs	r2, #16
    e5a8:	4631      	mov	r1, r6
    e5aa:	302a      	adds	r0, #42	; 0x2a
    e5ac:	f013 f87b 	bl	216a6 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    e5b0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e5b4:	2109      	movs	r1, #9
    e5b6:	f014 fd78 	bl	230aa <atomic_set_bit>
	return 0;
    e5ba:	2000      	movs	r0, #0
    e5bc:	e7f2      	b.n	e5a4 <smp_ident_info+0x48>
    e5be:	bf00      	nop
    e5c0:	00024c24 	.word	0x00024c24
    e5c4:	00024d0c 	.word	0x00024d0c
    e5c8:	0002865b 	.word	0x0002865b

0000e5cc <smp_encrypt_info>:
{
    e5cc:	b570      	push	{r4, r5, r6, lr}
    e5ce:	460b      	mov	r3, r1
    e5d0:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e5d2:	210c      	movs	r1, #12
    e5d4:	30bc      	adds	r0, #188	; 0xbc
    e5d6:	f014 fe3e 	bl	23256 <atomic_test_bit>
    e5da:	b308      	cbz	r0, e620 <smp_encrypt_info+0x54>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    e5dc:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e5de:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    e5e0:	f103 0588 	add.w	r5, r3, #136	; 0x88
    e5e4:	7a19      	ldrb	r1, [r3, #8]
    e5e6:	462a      	mov	r2, r5
    e5e8:	2004      	movs	r0, #4
    e5ea:	f015 f8b0 	bl	2374e <bt_keys_get_type>
		if (!keys) {
    e5ee:	b990      	cbnz	r0, e616 <smp_encrypt_info+0x4a>
    e5f0:	4a0f      	ldr	r2, [pc, #60]	; (e630 <smp_encrypt_info+0x64>)
    e5f2:	4c10      	ldr	r4, [pc, #64]	; (e634 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    e5f4:	4628      	mov	r0, r5
    e5f6:	1aa4      	subs	r4, r4, r2
    e5f8:	f7f9 fd9c 	bl	8134 <bt_addr_le_str_real>
    e5fc:	f7f5 fd00 	bl	4000 <log_strdup>
    e600:	08e4      	lsrs	r4, r4, #3
    e602:	01a4      	lsls	r4, r4, #6
    e604:	f044 0401 	orr.w	r4, r4, #1
    e608:	4601      	mov	r1, r0
    e60a:	4622      	mov	r2, r4
    e60c:	480a      	ldr	r0, [pc, #40]	; (e638 <smp_encrypt_info+0x6c>)
    e60e:	f011 f9fc 	bl	1fa0a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e612:	2008      	movs	r0, #8
}
    e614:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    e616:	2210      	movs	r2, #16
    e618:	4631      	mov	r1, r6
    e61a:	301a      	adds	r0, #26
    e61c:	f013 f843 	bl	216a6 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    e620:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e624:	2107      	movs	r1, #7
    e626:	f014 fd40 	bl	230aa <atomic_set_bit>
	return 0;
    e62a:	2000      	movs	r0, #0
    e62c:	e7f2      	b.n	e614 <smp_encrypt_info+0x48>
    e62e:	bf00      	nop
    e630:	00024c24 	.word	0x00024c24
    e634:	00024d0c 	.word	0x00024d0c
    e638:	0002865b 	.word	0x0002865b

0000e63c <smp_pairing_req>:
{
    e63c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    e640:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    e642:	78eb      	ldrb	r3, [r5, #3]
    e644:	3b07      	subs	r3, #7
    e646:	2b09      	cmp	r3, #9
{
    e648:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    e64a:	d904      	bls.n	e656 <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    e64c:	2506      	movs	r5, #6
}
    e64e:	4628      	mov	r0, r5
    e650:	b002      	add	sp, #8
    e652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    e656:	6807      	ldr	r7, [r0, #0]
	if (!conn->le.keys) {
    e658:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    e65c:	b163      	cbz	r3, e678 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    e65e:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
    e662:	210e      	movs	r1, #14
    e664:	4630      	mov	r0, r6
    e666:	f014 fdf6 	bl	23256 <atomic_test_bit>
    e66a:	b980      	cbnz	r0, e68e <smp_pairing_req+0x52>
		int ret = smp_init(smp);
    e66c:	4620      	mov	r0, r4
    e66e:	f7ff fd73 	bl	e158 <smp_init>
		if (ret) {
    e672:	b160      	cbz	r0, e68e <smp_pairing_req+0x52>
			return ret;
    e674:	b2c5      	uxtb	r5, r0
    e676:	e7ea      	b.n	e64e <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e678:	7a38      	ldrb	r0, [r7, #8]
    e67a:	f107 0188 	add.w	r1, r7, #136	; 0x88
    e67e:	f001 f825 	bl	f6cc <bt_keys_get_addr>
    e682:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (!conn->le.keys) {
    e686:	2800      	cmp	r0, #0
    e688:	d1e9      	bne.n	e65e <smp_pairing_req+0x22>
			return BT_SMP_ERR_UNSPECIFIED;
    e68a:	2508      	movs	r5, #8
    e68c:	e7df      	b.n	e64e <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    e68e:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    e690:	2206      	movs	r2, #6
    e692:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    e694:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	memcpy(smp->preq + 1, req, sizeof(*req));
    e698:	f104 00c2 	add.w	r0, r4, #194	; 0xc2
    e69c:	f013 f803 	bl	216a6 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    e6a0:	2302      	movs	r3, #2
    e6a2:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	rsp->auth_req = get_auth(conn, req->auth_req);
    e6a6:	78a8      	ldrb	r0, [r5, #2]
    e6a8:	f7ff fd20 	bl	e0ec <get_auth.isra.0>
    e6ac:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
    e6b0:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
    e6b2:	f7ff fcf5 	bl	e0a0 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    e6b6:	4bb4      	ldr	r3, [pc, #720]	; (e988 <smp_pairing_req+0x34c>)
	rsp->io_capability = get_io_capa();
    e6b8:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    e6bc:	781b      	ldrb	r3, [r3, #0]
    e6be:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    e6c2:	2310      	movs	r3, #16
    e6c4:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    e6c8:	792b      	ldrb	r3, [r5, #4]
    e6ca:	f003 0303 	and.w	r3, r3, #3
    e6ce:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    e6d2:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    e6d4:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    e6d8:	f003 0301 	and.w	r3, r3, #1
    e6dc:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    e6e0:	d00f      	beq.n	e702 <smp_pairing_req+0xc6>
    e6e2:	78ab      	ldrb	r3, [r5, #2]
    e6e4:	0719      	lsls	r1, r3, #28
    e6e6:	d50c      	bpl.n	e702 <smp_pairing_req+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    e6e8:	2105      	movs	r1, #5
    e6ea:	4630      	mov	r0, r6
    e6ec:	f014 fcdd 	bl	230aa <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    e6f0:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    e6f4:	f003 0302 	and.w	r3, r3, #2
    e6f8:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		rsp->resp_key_dist &= SEND_KEYS_SC;
    e6fc:	2300      	movs	r3, #0
    e6fe:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    e702:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    e706:	069a      	lsls	r2, r3, #26
    e708:	d506      	bpl.n	e718 <smp_pairing_req+0xdc>
    e70a:	78ab      	ldrb	r3, [r5, #2]
    e70c:	069b      	lsls	r3, r3, #26
    e70e:	d503      	bpl.n	e718 <smp_pairing_req+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    e710:	2113      	movs	r1, #19
    e712:	4630      	mov	r0, r6
    e714:	f014 fcc9 	bl	230aa <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    e718:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    e71c:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
	smp->remote_dist = rsp->init_key_dist;
    e720:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    e724:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    e728:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    e72c:	07d8      	lsls	r0, r3, #31
    e72e:	d506      	bpl.n	e73e <smp_pairing_req+0x102>
    e730:	78ab      	ldrb	r3, [r5, #2]
    e732:	07d9      	lsls	r1, r3, #31
    e734:	d503      	bpl.n	e73e <smp_pairing_req+0x102>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    e736:	210c      	movs	r1, #12
    e738:	4630      	mov	r0, r6
    e73a:	f014 fcb6 	bl	230aa <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    e73e:	2103      	movs	r1, #3
    e740:	4630      	mov	r0, r6
    e742:	f014 fcb2 	bl	230aa <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e746:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
    e748:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e74a:	f014 fd84 	bl	23256 <atomic_test_bit>
    e74e:	f8d4 8000 	ldr.w	r8, [r4]
    e752:	2800      	cmp	r0, #0
    e754:	d151      	bne.n	e7fa <smp_pairing_req+0x1be>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    e756:	2d04      	cmp	r5, #4
    e758:	d81d      	bhi.n	e796 <smp_pairing_req+0x15a>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    e75a:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
    e75e:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    e762:	4013      	ands	r3, r2
    e764:	07da      	lsls	r2, r3, #31
    e766:	d465      	bmi.n	e834 <smp_pairing_req+0x1f8>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    e768:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
    e76c:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    e770:	4318      	orrs	r0, r3
    e772:	f010 0004 	ands.w	r0, r0, #4
    e776:	d00e      	beq.n	e796 <smp_pairing_req+0x15a>
	method = gen_method_legacy[remote_io][get_io_capa()];
    e778:	f7ff fc92 	bl	e0a0 <get_io_capa>
    e77c:	4b83      	ldr	r3, [pc, #524]	; (e98c <smp_pairing_req+0x350>)
    e77e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    e782:	441d      	add	r5, r3
    e784:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
    e786:	2804      	cmp	r0, #4
    e788:	d105      	bne.n	e796 <smp_pairing_req+0x15a>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    e78a:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
    e78e:	2b00      	cmp	r3, #0
    e790:	bf0c      	ite	eq
    e792:	2002      	moveq	r0, #2
    e794:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
    e796:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
    e79a:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    e79e:	b93b      	cbnz	r3, e7b0 <smp_pairing_req+0x174>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e7a0:	f898 0008 	ldrb.w	r0, [r8, #8]
    e7a4:	f108 0188 	add.w	r1, r8, #136	; 0x88
    e7a8:	f000 ff90 	bl	f6cc <bt_keys_get_addr>
    e7ac:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
	if (!conn->le.keys ||
    e7b0:	f8d8 20b4 	ldr.w	r2, [r8, #180]	; 0xb4
    e7b4:	2a00      	cmp	r2, #0
    e7b6:	d143      	bne.n	e840 <smp_pairing_req+0x204>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e7b8:	2105      	movs	r1, #5
    e7ba:	4630      	mov	r0, r6
    e7bc:	f014 fd4b 	bl	23256 <atomic_test_bit>
    e7c0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    e7c4:	2800      	cmp	r0, #0
    e7c6:	f040 80f3 	bne.w	e9b0 <smp_pairing_req+0x374>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    e7ca:	461d      	mov	r5, r3
    e7cc:	2b00      	cmp	r3, #0
    e7ce:	d155      	bne.n	e87c <smp_pairing_req+0x240>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    e7d0:	210e      	movs	r1, #14
    e7d2:	4630      	mov	r0, r6
    e7d4:	f014 fd3f 	bl	23256 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    e7d8:	2800      	cmp	r0, #0
    e7da:	d14f      	bne.n	e87c <smp_pairing_req+0x240>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    e7dc:	4f6c      	ldr	r7, [pc, #432]	; (e990 <smp_pairing_req+0x354>)
    e7de:	683b      	ldr	r3, [r7, #0]
    e7e0:	2b00      	cmp	r3, #0
    e7e2:	d04b      	beq.n	e87c <smp_pairing_req+0x240>
	    bt_auth && bt_auth->pairing_confirm) {
    e7e4:	695b      	ldr	r3, [r3, #20]
    e7e6:	2b00      	cmp	r3, #0
    e7e8:	d048      	beq.n	e87c <smp_pairing_req+0x240>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e7ea:	4630      	mov	r0, r6
    e7ec:	2109      	movs	r1, #9
    e7ee:	f014 fc5c 	bl	230aa <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    e7f2:	683b      	ldr	r3, [r7, #0]
    e7f4:	6820      	ldr	r0, [r4, #0]
    e7f6:	695b      	ldr	r3, [r3, #20]
    e7f8:	e0b6      	b.n	e968 <smp_pairing_req+0x32c>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    e7fa:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
    e7fe:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
    e802:	ea00 0302 	and.w	r3, r0, r2
    e806:	071b      	lsls	r3, r3, #28
    e808:	d506      	bpl.n	e818 <smp_pairing_req+0x1dc>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    e80a:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    e80e:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    e812:	430b      	orrs	r3, r1
    e814:	07d9      	lsls	r1, r3, #31
    e816:	d40f      	bmi.n	e838 <smp_pairing_req+0x1fc>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    e818:	2d04      	cmp	r5, #4
    e81a:	d80f      	bhi.n	e83c <smp_pairing_req+0x200>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    e81c:	4310      	orrs	r0, r2
    e81e:	f010 0004 	ands.w	r0, r0, #4
    e822:	d0b8      	beq.n	e796 <smp_pairing_req+0x15a>
	return gen_method_sc[remote_io][get_io_capa()];
    e824:	f7ff fc3c 	bl	e0a0 <get_io_capa>
    e828:	4b5a      	ldr	r3, [pc, #360]	; (e994 <smp_pairing_req+0x358>)
    e82a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    e82e:	441d      	add	r5, r3
    e830:	5c28      	ldrb	r0, [r5, r0]
    e832:	e7b0      	b.n	e796 <smp_pairing_req+0x15a>
		return LEGACY_OOB;
    e834:	2006      	movs	r0, #6
    e836:	e7ae      	b.n	e796 <smp_pairing_req+0x15a>
			return LE_SC_OOB;
    e838:	2005      	movs	r0, #5
    e83a:	e7ac      	b.n	e796 <smp_pairing_req+0x15a>
		return JUST_WORKS;
    e83c:	2000      	movs	r0, #0
    e83e:	e7aa      	b.n	e796 <smp_pairing_req+0x15a>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    e840:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
    e842:	f011 0f24 	tst.w	r1, #36	; 0x24
    e846:	d0b7      	beq.n	e7b8 <smp_pairing_req+0x17c>
	return MIN(req->max_key_size, rsp->max_key_size);
    e848:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    e84c:	f894 00c5 	ldrb.w	r0, [r4, #197]	; 0xc5
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
    e850:	7b12      	ldrb	r2, [r2, #12]
    e852:	4283      	cmp	r3, r0
    e854:	bf28      	it	cs
    e856:	4603      	movcs	r3, r0
    e858:	429a      	cmp	r2, r3
    e85a:	d901      	bls.n	e860 <smp_pairing_req+0x224>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    e85c:	2503      	movs	r5, #3
    e85e:	e6f6      	b.n	e64e <smp_pairing_req+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    e860:	068a      	lsls	r2, r1, #26
    e862:	d404      	bmi.n	e86e <smp_pairing_req+0x232>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
    e864:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    e868:	2b00      	cmp	r3, #0
    e86a:	d1a5      	bne.n	e7b8 <smp_pairing_req+0x17c>
    e86c:	e7f6      	b.n	e85c <smp_pairing_req+0x220>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e86e:	2105      	movs	r1, #5
    e870:	4630      	mov	r0, r6
    e872:	f014 fcf0 	bl	23256 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    e876:	2800      	cmp	r0, #0
    e878:	d1f4      	bne.n	e864 <smp_pairing_req+0x228>
    e87a:	e7ef      	b.n	e85c <smp_pairing_req+0x220>
	ret = send_pairing_rsp(smp);
    e87c:	4620      	mov	r0, r4
    e87e:	f014 fd2c 	bl	232da <send_pairing_rsp>
	if (ret) {
    e882:	4605      	mov	r5, r0
    e884:	2800      	cmp	r0, #0
    e886:	f47f aee2 	bne.w	e64e <smp_pairing_req+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    e88a:	2103      	movs	r1, #3
    e88c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e890:	f014 fc0b 	bl	230aa <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    e894:	6827      	ldr	r7, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    e896:	f107 0188 	add.w	r1, r7, #136	; 0x88
    e89a:	7a38      	ldrb	r0, [r7, #8]
    e89c:	f000 ff9c 	bl	f7d8 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    e8a0:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    e8a4:	b170      	cbz	r0, e8c4 <smp_pairing_req+0x288>
    e8a6:	7b43      	ldrb	r3, [r0, #13]
    e8a8:	07db      	lsls	r3, r3, #31
    e8aa:	d50b      	bpl.n	e8c4 <smp_pairing_req+0x288>
    e8ac:	b951      	cbnz	r1, e8c4 <smp_pairing_req+0x288>
    e8ae:	4b3a      	ldr	r3, [pc, #232]	; (e998 <smp_pairing_req+0x35c>)
    e8b0:	493a      	ldr	r1, [pc, #232]	; (e99c <smp_pairing_req+0x360>)
		BT_ERR("JustWorks failed, authenticated keys present");
    e8b2:	483b      	ldr	r0, [pc, #236]	; (e9a0 <smp_pairing_req+0x364>)
    e8b4:	1ac9      	subs	r1, r1, r3
    e8b6:	08c9      	lsrs	r1, r1, #3
    e8b8:	0189      	lsls	r1, r1, #6
    e8ba:	f041 0101 	orr.w	r1, r1, #1
    e8be:	f011 f897 	bl	1f9f0 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    e8c2:	e6e2      	b.n	e68a <smp_pairing_req+0x4e>
	switch (smp->method) {
    e8c4:	2906      	cmp	r1, #6
    e8c6:	d851      	bhi.n	e96c <smp_pairing_req+0x330>
    e8c8:	e8df f001 	tbb	[pc, r1]
    e8cc:	5018465b 	.word	0x5018465b
    e8d0:	5050      	.short	0x5050
    e8d2:	04          	.byte	0x04
    e8d3:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    e8d4:	4f2e      	ldr	r7, [pc, #184]	; (e990 <smp_pairing_req+0x354>)
    e8d6:	683b      	ldr	r3, [r7, #0]
    e8d8:	2b00      	cmp	r3, #0
    e8da:	d067      	beq.n	e9ac <smp_pairing_req+0x370>
    e8dc:	68db      	ldr	r3, [r3, #12]
    e8de:	2b00      	cmp	r3, #0
    e8e0:	d064      	beq.n	e9ac <smp_pairing_req+0x370>
			struct bt_conn_oob_info info = {
    e8e2:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e8e4:	4630      	mov	r0, r6
    e8e6:	2109      	movs	r1, #9
			struct bt_conn_oob_info info = {
    e8e8:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e8ec:	f014 fbdd 	bl	230aa <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    e8f0:	683b      	ldr	r3, [r7, #0]
    e8f2:	6820      	ldr	r0, [r4, #0]
    e8f4:	68db      	ldr	r3, [r3, #12]
    e8f6:	a901      	add	r1, sp, #4
    e8f8:	4798      	blx	r3
		break;
    e8fa:	e6a8      	b.n	e64e <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
    e8fc:	2104      	movs	r1, #4
    e8fe:	eb0d 0001 	add.w	r0, sp, r1
    e902:	f003 fe37 	bl	12574 <bt_rand>
    e906:	2800      	cmp	r0, #0
    e908:	f47f aebf 	bne.w	e68a <smp_pairing_req+0x4e>
			passkey %= 1000000;
    e90c:	9901      	ldr	r1, [sp, #4]
    e90e:	4a25      	ldr	r2, [pc, #148]	; (e9a4 <smp_pairing_req+0x368>)
		if (bt_auth && bt_auth->passkey_display) {
    e910:	f8df 807c 	ldr.w	r8, [pc, #124]	; e990 <smp_pairing_req+0x354>
			passkey %= 1000000;
    e914:	fbb1 f3f2 	udiv	r3, r1, r2
    e918:	fb02 1313 	mls	r3, r2, r3, r1
    e91c:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    e91e:	f8d8 3000 	ldr.w	r3, [r8]
    e922:	b15b      	cbz	r3, e93c <smp_pairing_req+0x300>
    e924:	681b      	ldr	r3, [r3, #0]
    e926:	b14b      	cbz	r3, e93c <smp_pairing_req+0x300>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    e928:	210a      	movs	r1, #10
    e92a:	4630      	mov	r0, r6
    e92c:	f014 fbbd 	bl	230aa <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    e930:	f8d8 3000 	ldr.w	r3, [r8]
    e934:	9901      	ldr	r1, [sp, #4]
    e936:	681b      	ldr	r3, [r3, #0]
    e938:	4638      	mov	r0, r7
    e93a:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    e93c:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    e93e:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
	dst[1] = val >> 8;
    e942:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    e946:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e948:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
	dst[1] = val >> 8;
    e94c:	0a1b      	lsrs	r3, r3, #8
    e94e:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    e952:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
}
    e956:	e67a      	b.n	e64e <smp_pairing_req+0x12>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e958:	4630      	mov	r0, r6
    e95a:	2109      	movs	r1, #9
    e95c:	f014 fba5 	bl	230aa <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    e960:	4b0b      	ldr	r3, [pc, #44]	; (e990 <smp_pairing_req+0x354>)
    e962:	681b      	ldr	r3, [r3, #0]
    e964:	685b      	ldr	r3, [r3, #4]
    e966:	4638      	mov	r0, r7
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    e968:	4798      	blx	r3
		return 0;
    e96a:	e670      	b.n	e64e <smp_pairing_req+0x12>
    e96c:	4b0a      	ldr	r3, [pc, #40]	; (e998 <smp_pairing_req+0x35c>)
    e96e:	4a0b      	ldr	r2, [pc, #44]	; (e99c <smp_pairing_req+0x360>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    e970:	480d      	ldr	r0, [pc, #52]	; (e9a8 <smp_pairing_req+0x36c>)
    e972:	1ad2      	subs	r2, r2, r3
    e974:	08d2      	lsrs	r2, r2, #3
    e976:	0192      	lsls	r2, r2, #6
    e978:	f042 0201 	orr.w	r2, r2, #1
    e97c:	f011 f845 	bl	1fa0a <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    e980:	e683      	b.n	e68a <smp_pairing_req+0x4e>
	switch (smp->method) {
    e982:	460d      	mov	r5, r1
    e984:	e663      	b.n	e64e <smp_pairing_req+0x12>
    e986:	bf00      	nop
    e988:	2000683c 	.word	0x2000683c
    e98c:	0002881d 	.word	0x0002881d
    e990:	200029bc 	.word	0x200029bc
    e994:	00028836 	.word	0x00028836
    e998:	00024c24 	.word	0x00024c24
    e99c:	00024d0c 	.word	0x00024d0c
    e9a0:	00028675 	.word	0x00028675
    e9a4:	000f4240 	.word	0x000f4240
    e9a8:	000286a2 	.word	0x000286a2
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    e9ac:	2502      	movs	r5, #2
    e9ae:	e64e      	b.n	e64e <smp_pairing_req+0x12>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    e9b0:	7aba      	ldrb	r2, [r7, #10]
    e9b2:	2a04      	cmp	r2, #4
    e9b4:	461d      	mov	r5, r3
    e9b6:	d116      	bne.n	e9e6 <smp_pairing_req+0x3aa>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    e9b8:	2b00      	cmp	r3, #0
    e9ba:	f43f af4f 	beq.w	e85c <smp_pairing_req+0x220>
	return MIN(req->max_key_size, rsp->max_key_size);
    e9be:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
    e9c2:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
	     conn->required_sec_level == BT_SECURITY_L4) &&
    e9c6:	4293      	cmp	r3, r2
    e9c8:	bf28      	it	cs
    e9ca:	4613      	movcs	r3, r2
    e9cc:	2b10      	cmp	r3, #16
    e9ce:	f47f ae3d 	bne.w	e64c <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    e9d2:	210c      	movs	r1, #12
    e9d4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e9d8:	f014 fb67 	bl	230aa <atomic_set_bit>
	return send_pairing_rsp(smp);
    e9dc:	4620      	mov	r0, r4
    e9de:	f014 fc7c 	bl	232da <send_pairing_rsp>
    e9e2:	4605      	mov	r5, r0
    e9e4:	e633      	b.n	e64e <smp_pairing_req+0x12>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    e9e6:	2b00      	cmp	r3, #0
    e9e8:	d1f3      	bne.n	e9d2 <smp_pairing_req+0x396>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    e9ea:	210e      	movs	r1, #14
    e9ec:	4630      	mov	r0, r6
    e9ee:	f014 fc32 	bl	23256 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    e9f2:	2800      	cmp	r0, #0
    e9f4:	d1ed      	bne.n	e9d2 <smp_pairing_req+0x396>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    e9f6:	4f04      	ldr	r7, [pc, #16]	; (ea08 <smp_pairing_req+0x3cc>)
    e9f8:	683b      	ldr	r3, [r7, #0]
    e9fa:	2b00      	cmp	r3, #0
    e9fc:	d0e9      	beq.n	e9d2 <smp_pairing_req+0x396>
	    bt_auth && bt_auth->pairing_confirm) {
    e9fe:	695b      	ldr	r3, [r3, #20]
    ea00:	2b00      	cmp	r3, #0
    ea02:	d0e6      	beq.n	e9d2 <smp_pairing_req+0x396>
    ea04:	e6f1      	b.n	e7ea <smp_pairing_req+0x1ae>
    ea06:	bf00      	nop
    ea08:	200029bc 	.word	0x200029bc

0000ea0c <bt_smp_connected>:
{
    ea0c:	b510      	push	{r4, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    ea0e:	2230      	movs	r2, #48	; 0x30
    ea10:	4604      	mov	r4, r0
    ea12:	2100      	movs	r1, #0
    ea14:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
    ea18:	f012 fe70 	bl	216fc <memset>
    ea1c:	4b03      	ldr	r3, [pc, #12]	; (ea2c <bt_smp_connected+0x20>)
    ea1e:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
	smp_reset(smp);
    ea22:	4620      	mov	r0, r4
}
    ea24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    ea28:	f014 bcb1 	b.w	2338e <smp_reset>
    ea2c:	0000ecad 	.word	0x0000ecad

0000ea30 <smp_pairing_complete>:
{
    ea30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea34:	f8df 8094 	ldr.w	r8, [pc, #148]	; eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>
    ea38:	4604      	mov	r4, r0
    ea3a:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
	if (!status) {
    ea3e:	460d      	mov	r5, r1
    ea40:	b981      	cbnz	r1, ea64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    ea42:	210c      	movs	r1, #12
    ea44:	4638      	mov	r0, r7
    ea46:	f014 fc06 	bl	23256 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
    ea4a:	f8d8 3000 	ldr.w	r3, [r8]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    ea4e:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
    ea50:	b11b      	cbz	r3, ea5a <smp_pairing_complete+0x2a>
    ea52:	699b      	ldr	r3, [r3, #24]
    ea54:	b10b      	cbz	r3, ea5a <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    ea56:	6820      	ldr	r0, [r4, #0]
    ea58:	4798      	blx	r3
	smp_reset(smp);
    ea5a:	4620      	mov	r0, r4
}
    ea5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	smp_reset(smp);
    ea60:	f014 bc95 	b.w	2338e <smp_reset>
	switch (smp_err) {
    ea64:	1e4b      	subs	r3, r1, #1
    ea66:	b2db      	uxtb	r3, r3
    ea68:	2b0d      	cmp	r3, #13
    ea6a:	bf9c      	itt	ls
    ea6c:	4a16      	ldrls	r2, [pc, #88]	; (eac8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x68>)
    ea6e:	5cd6      	ldrbls	r6, [r2, r3]
		if (smp->chan.chan.conn->le.keys &&
    ea70:	6803      	ldr	r3, [r0, #0]
    ea72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	if (!status) {
    ea76:	bf88      	it	hi
    ea78:	2608      	movhi	r6, #8
		if (smp->chan.chan.conn->le.keys &&
    ea7a:	b153      	cbz	r3, ea92 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x32>
    ea7c:	7b1b      	ldrb	r3, [r3, #12]
    ea7e:	b9db      	cbnz	r3, eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
    ea80:	6823      	ldr	r3, [r4, #0]
    ea82:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
    ea86:	f014 fe76 	bl	23776 <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
    ea8a:	6823      	ldr	r3, [r4, #0]
    ea8c:	2200      	movs	r2, #0
    ea8e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    ea92:	2102      	movs	r1, #2
    ea94:	4638      	mov	r0, r7
    ea96:	f014 fbde 	bl	23256 <atomic_test_bit>
    ea9a:	b920      	cbnz	r0, eaa6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x46>
			bt_conn_security_changed(smp->chan.chan.conn, status,
    ea9c:	6820      	ldr	r0, [r4, #0]
    ea9e:	4632      	mov	r2, r6
    eaa0:	4629      	mov	r1, r5
    eaa2:	f7fc f865 	bl	ab70 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    eaa6:	f8d8 3000 	ldr.w	r3, [r8]
    eaaa:	2b00      	cmp	r3, #0
    eaac:	d0d5      	beq.n	ea5a <smp_pairing_complete+0x2a>
    eaae:	69db      	ldr	r3, [r3, #28]
    eab0:	2b00      	cmp	r3, #0
    eab2:	d0d2      	beq.n	ea5a <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    eab4:	4631      	mov	r1, r6
    eab6:	e7ce      	b.n	ea56 <smp_pairing_complete+0x26>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    eab8:	2102      	movs	r1, #2
    eaba:	4638      	mov	r0, r7
    eabc:	f014 fbcb 	bl	23256 <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
    eac0:	2800      	cmp	r0, #0
    eac2:	d1dd      	bne.n	ea80 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x20>
    eac4:	e7e5      	b.n	ea92 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x32>
    eac6:	bf00      	nop
    eac8:	0002880f 	.word	0x0002880f
    eacc:	200029bc 	.word	0x200029bc

0000ead0 <bt_smp_dhkey_ready>:
{
    ead0:	b510      	push	{r4, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    ead2:	2107      	movs	r1, #7
{
    ead4:	4604      	mov	r4, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    ead6:	4816      	ldr	r0, [pc, #88]	; (eb30 <bt_smp_dhkey_ready+0x60>)
    ead8:	f014 fc41 	bl	2335e <atomic_test_and_clear_bit>
    eadc:	b338      	cbz	r0, eb2e <bt_smp_dhkey_ready+0x5e>
	if (!dhkey) {
    eade:	b92c      	cbnz	r4, eaec <bt_smp_dhkey_ready+0x1c>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    eae0:	210b      	movs	r1, #11
}
    eae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    eae6:	4813      	ldr	r0, [pc, #76]	; (eb34 <bt_smp_dhkey_ready+0x64>)
    eae8:	f014 bc7c 	b.w	233e4 <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    eaec:	4621      	mov	r1, r4
    eaee:	4812      	ldr	r0, [pc, #72]	; (eb38 <bt_smp_dhkey_ready+0x68>)
    eaf0:	2220      	movs	r2, #32
    eaf2:	f012 fdd8 	bl	216a6 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    eaf6:	480e      	ldr	r0, [pc, #56]	; (eb30 <bt_smp_dhkey_ready+0x60>)
    eaf8:	2109      	movs	r1, #9
    eafa:	f014 fbac 	bl	23256 <atomic_test_bit>
    eafe:	b128      	cbz	r0, eb0c <bt_smp_dhkey_ready+0x3c>
}
    eb00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    eb04:	480a      	ldr	r0, [pc, #40]	; (eb30 <bt_smp_dhkey_ready+0x60>)
    eb06:	2108      	movs	r1, #8
    eb08:	f014 bacf 	b.w	230aa <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    eb0c:	4808      	ldr	r0, [pc, #32]	; (eb30 <bt_smp_dhkey_ready+0x60>)
    eb0e:	210f      	movs	r1, #15
    eb10:	f014 fba1 	bl	23256 <atomic_test_bit>
    eb14:	2800      	cmp	r0, #0
    eb16:	d1f3      	bne.n	eb00 <bt_smp_dhkey_ready+0x30>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    eb18:	4805      	ldr	r0, [pc, #20]	; (eb30 <bt_smp_dhkey_ready+0x60>)
    eb1a:	2108      	movs	r1, #8
    eb1c:	f014 fb9b 	bl	23256 <atomic_test_bit>
    eb20:	b128      	cbz	r0, eb2e <bt_smp_dhkey_ready+0x5e>
		err = compute_and_check_and_send_slave_dhcheck(smp);
    eb22:	4804      	ldr	r0, [pc, #16]	; (eb34 <bt_smp_dhkey_ready+0x64>)
    eb24:	f7ff fb70 	bl	e208 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    eb28:	4601      	mov	r1, r0
    eb2a:	2800      	cmp	r0, #0
    eb2c:	d1d9      	bne.n	eae2 <bt_smp_dhkey_ready+0x12>
}
    eb2e:	bd10      	pop	{r4, pc}
    eb30:	2000114c 	.word	0x2000114c
    eb34:	20001090 	.word	0x20001090
    eb38:	200011df 	.word	0x200011df

0000eb3c <bt_smp_recv>:
{
    eb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    eb3e:	898b      	ldrh	r3, [r1, #12]
{
    eb40:	4604      	mov	r4, r0
    eb42:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    eb44:	b95b      	cbnz	r3, eb5e <bt_smp_recv+0x22>
    eb46:	4935      	ldr	r1, [pc, #212]	; (ec1c <bt_smp_recv+0xe0>)
    eb48:	4b35      	ldr	r3, [pc, #212]	; (ec20 <bt_smp_recv+0xe4>)
		BT_ERR("Too small SMP PDU received");
    eb4a:	4836      	ldr	r0, [pc, #216]	; (ec24 <bt_smp_recv+0xe8>)
    eb4c:	1ac9      	subs	r1, r1, r3
    eb4e:	08c9      	lsrs	r1, r1, #3
    eb50:	0189      	lsls	r1, r1, #6
    eb52:	f041 0101 	orr.w	r1, r1, #1
    eb56:	f010 ff4b 	bl	1f9f0 <log_0>
}
    eb5a:	2000      	movs	r0, #0
    eb5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    eb5e:	2101      	movs	r1, #1
    eb60:	f105 0008 	add.w	r0, r5, #8
    eb64:	f014 fea3 	bl	238ae <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    eb68:	2104      	movs	r1, #4
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    eb6a:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    eb6c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    eb70:	f014 fb71 	bl	23256 <atomic_test_bit>
    eb74:	7831      	ldrb	r1, [r6, #0]
    eb76:	b150      	cbz	r0, eb8e <bt_smp_recv+0x52>
    eb78:	4b29      	ldr	r3, [pc, #164]	; (ec20 <bt_smp_recv+0xe4>)
    eb7a:	4a28      	ldr	r2, [pc, #160]	; (ec1c <bt_smp_recv+0xe0>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    eb7c:	482a      	ldr	r0, [pc, #168]	; (ec28 <bt_smp_recv+0xec>)
    eb7e:	1ad2      	subs	r2, r2, r3
    eb80:	08d2      	lsrs	r2, r2, #3
    eb82:	0192      	lsls	r2, r2, #6
    eb84:	f042 0202 	orr.w	r2, r2, #2
    eb88:	f010 ff3f 	bl	1fa0a <log_1>
		return 0;
    eb8c:	e7e5      	b.n	eb5a <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    eb8e:	290d      	cmp	r1, #13
    eb90:	d803      	bhi.n	eb9a <bt_smp_recv+0x5e>
    eb92:	4f26      	ldr	r7, [pc, #152]	; (ec2c <bt_smp_recv+0xf0>)
    eb94:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    eb98:	b973      	cbnz	r3, ebb8 <bt_smp_recv+0x7c>
    eb9a:	4b21      	ldr	r3, [pc, #132]	; (ec20 <bt_smp_recv+0xe4>)
    eb9c:	4a1f      	ldr	r2, [pc, #124]	; (ec1c <bt_smp_recv+0xe0>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    eb9e:	4824      	ldr	r0, [pc, #144]	; (ec30 <bt_smp_recv+0xf4>)
    eba0:	1ad2      	subs	r2, r2, r3
    eba2:	08d2      	lsrs	r2, r2, #3
    eba4:	0192      	lsls	r2, r2, #6
    eba6:	f042 0202 	orr.w	r2, r2, #2
    ebaa:	f010 ff2e 	bl	1fa0a <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    ebae:	2107      	movs	r1, #7
		smp_error(smp, err);
    ebb0:	4620      	mov	r0, r4
    ebb2:	f014 fc17 	bl	233e4 <smp_error>
    ebb6:	e7d0      	b.n	eb5a <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    ebb8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    ebbc:	f014 fbcf 	bl	2335e <atomic_test_and_clear_bit>
    ebc0:	7831      	ldrb	r1, [r6, #0]
    ebc2:	b970      	cbnz	r0, ebe2 <bt_smp_recv+0xa6>
    ebc4:	4b16      	ldr	r3, [pc, #88]	; (ec20 <bt_smp_recv+0xe4>)
    ebc6:	4a15      	ldr	r2, [pc, #84]	; (ec1c <bt_smp_recv+0xe0>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    ebc8:	481a      	ldr	r0, [pc, #104]	; (ec34 <bt_smp_recv+0xf8>)
    ebca:	1ad2      	subs	r2, r2, r3
    ebcc:	08d2      	lsrs	r2, r2, #3
    ebce:	0192      	lsls	r2, r2, #6
    ebd0:	f042 0202 	orr.w	r2, r2, #2
    ebd4:	f010 ff19 	bl	1fa0a <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    ebd8:	7833      	ldrb	r3, [r6, #0]
    ebda:	2b05      	cmp	r3, #5
    ebdc:	d0bd      	beq.n	eb5a <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    ebde:	2108      	movs	r1, #8
    ebe0:	e7e6      	b.n	ebb0 <bt_smp_recv+0x74>
	if (buf->len != handlers[hdr->code].expect_len) {
    ebe2:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    ebe6:	89a8      	ldrh	r0, [r5, #12]
    ebe8:	791b      	ldrb	r3, [r3, #4]
    ebea:	4283      	cmp	r3, r0
    ebec:	d00d      	beq.n	ec0a <bt_smp_recv+0xce>
    ebee:	4a0c      	ldr	r2, [pc, #48]	; (ec20 <bt_smp_recv+0xe4>)
    ebf0:	4b0a      	ldr	r3, [pc, #40]	; (ec1c <bt_smp_recv+0xe0>)
    ebf2:	1a9b      	subs	r3, r3, r2
    ebf4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    ebf6:	019b      	lsls	r3, r3, #6
    ebf8:	460a      	mov	r2, r1
    ebfa:	f043 0301 	orr.w	r3, r3, #1
    ebfe:	4601      	mov	r1, r0
    ec00:	480d      	ldr	r0, [pc, #52]	; (ec38 <bt_smp_recv+0xfc>)
    ec02:	f010 ff16 	bl	1fa32 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    ec06:	210a      	movs	r1, #10
    ec08:	e7d2      	b.n	ebb0 <bt_smp_recv+0x74>
	err = handlers[hdr->code].func(smp, buf);
    ec0a:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    ec0e:	4620      	mov	r0, r4
    ec10:	4629      	mov	r1, r5
    ec12:	4798      	blx	r3
	if (err) {
    ec14:	4601      	mov	r1, r0
    ec16:	2800      	cmp	r0, #0
    ec18:	d09f      	beq.n	eb5a <bt_smp_recv+0x1e>
    ec1a:	e7c9      	b.n	ebb0 <bt_smp_recv+0x74>
    ec1c:	00024d0c 	.word	0x00024d0c
    ec20:	00024c24 	.word	0x00024c24
    ec24:	000286be 	.word	0x000286be
    ec28:	000286d9 	.word	0x000286d9
    ec2c:	0002554c 	.word	0x0002554c
    ec30:	0002870a 	.word	0x0002870a
    ec34:	00028724 	.word	0x00028724
    ec38:	000283ed 	.word	0x000283ed

0000ec3c <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    ec3c:	4b15      	ldr	r3, [pc, #84]	; (ec94 <bt_smp_pkey_ready+0x58>)
{
    ec3e:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    ec40:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    ec42:	b958      	cbnz	r0, ec5c <bt_smp_pkey_ready+0x20>
    ec44:	4914      	ldr	r1, [pc, #80]	; (ec98 <bt_smp_pkey_ready+0x5c>)
    ec46:	4b15      	ldr	r3, [pc, #84]	; (ec9c <bt_smp_pkey_ready+0x60>)
		BT_WARN("Public key not available");
    ec48:	4815      	ldr	r0, [pc, #84]	; (eca0 <bt_smp_pkey_ready+0x64>)
    ec4a:	1ac9      	subs	r1, r1, r3
    ec4c:	08c9      	lsrs	r1, r1, #3
    ec4e:	0189      	lsls	r1, r1, #6
}
    ec50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
    ec54:	f041 0102 	orr.w	r1, r1, #2
    ec58:	f010 beca 	b.w	1f9f0 <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ec5c:	4c11      	ldr	r4, [pc, #68]	; (eca4 <bt_smp_pkey_ready+0x68>)
	z_impl_k_sem_give(sem);
    ec5e:	4812      	ldr	r0, [pc, #72]	; (eca8 <bt_smp_pkey_ready+0x6c>)
    ec60:	f00f fd12 	bl	1e688 <z_impl_k_sem_give>
    ec64:	f3bf 8f5b 	dmb	ish
    ec68:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    ec6c:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    ec70:	065b      	lsls	r3, r3, #25
    ec72:	d50e      	bpl.n	ec92 <bt_smp_pkey_ready+0x56>
	err = sc_send_public_key(smp);
    ec74:	4620      	mov	r0, r4
    ec76:	f7ff fbab 	bl	e3d0 <sc_send_public_key>
	if (err) {
    ec7a:	4601      	mov	r1, r0
    ec7c:	b920      	cbnz	r0, ec88 <bt_smp_pkey_ready+0x4c>
    ec7e:	4620      	mov	r0, r4
    ec80:	f7ff fc08 	bl	e494 <smp_public_key_slave.part.0>
		if (err) {
    ec84:	4601      	mov	r1, r0
    ec86:	b120      	cbz	r0, ec92 <bt_smp_pkey_ready+0x56>
}
    ec88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    ec8c:	4805      	ldr	r0, [pc, #20]	; (eca4 <bt_smp_pkey_ready+0x68>)
    ec8e:	f014 bba9 	b.w	233e4 <smp_error>
}
    ec92:	bd10      	pop	{r4, pc}
    ec94:	20002a70 	.word	0x20002a70
    ec98:	00024d0c 	.word	0x00024d0c
    ec9c:	00024c24 	.word	0x00024c24
    eca0:	0002873f 	.word	0x0002873f
    eca4:	20001090 	.word	0x20001090
    eca8:	200008a8 	.word	0x200008a8

0000ecac <smp_timeout>:
    ecac:	4b0b      	ldr	r3, [pc, #44]	; (ecdc <smp_timeout+0x30>)
    ecae:	490c      	ldr	r1, [pc, #48]	; (ece0 <smp_timeout+0x34>)
{
    ecb0:	b510      	push	{r4, lr}
    ecb2:	1ac9      	subs	r1, r1, r3
    ecb4:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
    ecb6:	0189      	lsls	r1, r1, #6
{
    ecb8:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    ecba:	f041 0101 	orr.w	r1, r1, #1
    ecbe:	4809      	ldr	r0, [pc, #36]	; (ece4 <smp_timeout+0x38>)
    ecc0:	f010 fe96 	bl	1f9f0 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    ecc4:	f5a4 70d4 	sub.w	r0, r4, #424	; 0x1a8
    ecc8:	2108      	movs	r1, #8
    ecca:	f7ff feb1 	bl	ea30 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    ecce:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
    ecd2:	2104      	movs	r1, #4
}
    ecd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    ecd8:	f014 b9e7 	b.w	230aa <atomic_set_bit>
    ecdc:	00024c24 	.word	0x00024c24
    ece0:	00024d0c 	.word	0x00024d0c
    ece4:	00028758 	.word	0x00028758

0000ece8 <smp_pairing_failed>:
{
    ece8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ecea:	4a15      	ldr	r2, [pc, #84]	; (ed40 <smp_pairing_failed+0x58>)
    ecec:	4b15      	ldr	r3, [pc, #84]	; (ed44 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    ecee:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    ecf0:	4605      	mov	r5, r0
    ecf2:	1ad2      	subs	r2, r2, r3
    ecf4:	08d2      	lsrs	r2, r2, #3
    ecf6:	f855 7bbc 	ldr.w	r7, [r5], #188
	BT_ERR("reason 0x%x", req->reason);
    ecfa:	7831      	ldrb	r1, [r6, #0]
    ecfc:	0192      	lsls	r2, r2, #6
{
    ecfe:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    ed00:	f042 0201 	orr.w	r2, r2, #1
    ed04:	4810      	ldr	r0, [pc, #64]	; (ed48 <smp_pairing_failed+0x60>)
    ed06:	f010 fe80 	bl	1fa0a <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    ed0a:	2109      	movs	r1, #9
    ed0c:	4628      	mov	r0, r5
    ed0e:	f014 fb26 	bl	2335e <atomic_test_and_clear_bit>
    ed12:	b140      	cbz	r0, ed26 <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
    ed14:	4b0d      	ldr	r3, [pc, #52]	; (ed4c <smp_pairing_failed+0x64>)
    ed16:	681b      	ldr	r3, [r3, #0]
    ed18:	b963      	cbnz	r3, ed34 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
    ed1a:	4620      	mov	r0, r4
    ed1c:	7831      	ldrb	r1, [r6, #0]
    ed1e:	f7ff fe87 	bl	ea30 <smp_pairing_complete>
}
    ed22:	2000      	movs	r0, #0
    ed24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    ed26:	210a      	movs	r1, #10
    ed28:	4628      	mov	r0, r5
    ed2a:	f014 fb18 	bl	2335e <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    ed2e:	2800      	cmp	r0, #0
    ed30:	d1f0      	bne.n	ed14 <smp_pairing_failed+0x2c>
    ed32:	e7f2      	b.n	ed1a <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    ed34:	691b      	ldr	r3, [r3, #16]
    ed36:	2b00      	cmp	r3, #0
    ed38:	d0ef      	beq.n	ed1a <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
    ed3a:	4638      	mov	r0, r7
    ed3c:	4798      	blx	r3
    ed3e:	e7ec      	b.n	ed1a <smp_pairing_failed+0x32>
    ed40:	00024d0c 	.word	0x00024d0c
    ed44:	00024c24 	.word	0x00024c24
    ed48:	00028764 	.word	0x00028764
    ed4c:	200029bc 	.word	0x200029bc

0000ed50 <smp_master_ident>:
{
    ed50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed52:	4604      	mov	r4, r0
    ed54:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    ed56:	f850 5bbc 	ldr.w	r5, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ed5a:	210c      	movs	r1, #12
    ed5c:	f014 fa7b 	bl	23256 <atomic_test_bit>
    ed60:	b368      	cbz	r0, edbe <smp_master_ident+0x6e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    ed62:	f105 0788 	add.w	r7, r5, #136	; 0x88
    ed66:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    ed68:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    ed6a:	463a      	mov	r2, r7
    ed6c:	2004      	movs	r0, #4
    ed6e:	f014 fcee 	bl	2374e <bt_keys_get_type>
		if (!keys) {
    ed72:	4605      	mov	r5, r0
    ed74:	b990      	cbnz	r0, ed9c <smp_master_ident+0x4c>
    ed76:	4a1d      	ldr	r2, [pc, #116]	; (edec <smp_master_ident+0x9c>)
    ed78:	4c1d      	ldr	r4, [pc, #116]	; (edf0 <smp_master_ident+0xa0>)
			BT_ERR("Unable to get keys for %s",
    ed7a:	4638      	mov	r0, r7
    ed7c:	1aa4      	subs	r4, r4, r2
    ed7e:	f7f9 f9d9 	bl	8134 <bt_addr_le_str_real>
    ed82:	f7f5 f93d 	bl	4000 <log_strdup>
    ed86:	08e4      	lsrs	r4, r4, #3
    ed88:	01a4      	lsls	r4, r4, #6
    ed8a:	f044 0401 	orr.w	r4, r4, #1
    ed8e:	4601      	mov	r1, r0
    ed90:	4622      	mov	r2, r4
    ed92:	4818      	ldr	r0, [pc, #96]	; (edf4 <smp_master_ident+0xa4>)
    ed94:	f010 fe39 	bl	1fa0a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    ed98:	2008      	movs	r0, #8
}
    ed9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    ed9c:	2202      	movs	r2, #2
    ed9e:	4631      	mov	r1, r6
    eda0:	3018      	adds	r0, #24
    eda2:	f012 fc80 	bl	216a6 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    eda6:	2208      	movs	r2, #8
    eda8:	1cb1      	adds	r1, r6, #2
    edaa:	f105 0010 	add.w	r0, r5, #16
    edae:	f012 fc7a 	bl	216a6 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    edb2:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    edb6:	f023 0301 	bic.w	r3, r3, #1
    edba:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    edbe:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    edc2:	079a      	lsls	r2, r3, #30
    edc4:	d50d      	bpl.n	ede2 <smp_master_ident+0x92>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    edc6:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    edc8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    edcc:	f014 f96d 	bl	230aa <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    edd0:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
    edd4:	b91d      	cbnz	r5, edde <smp_master_ident+0x8e>
		smp_pairing_complete(smp, 0);
    edd6:	4629      	mov	r1, r5
    edd8:	4620      	mov	r0, r4
    edda:	f7ff fe29 	bl	ea30 <smp_pairing_complete>
	return 0;
    edde:	2000      	movs	r0, #0
    ede0:	e7db      	b.n	ed9a <smp_master_ident+0x4a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    ede2:	075b      	lsls	r3, r3, #29
    ede4:	d5f4      	bpl.n	edd0 <smp_master_ident+0x80>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    ede6:	210a      	movs	r1, #10
    ede8:	e7ee      	b.n	edc8 <smp_master_ident+0x78>
    edea:	bf00      	nop
    edec:	00024c24 	.word	0x00024c24
    edf0:	00024d0c 	.word	0x00024d0c
    edf4:	0002865b 	.word	0x0002865b

0000edf8 <bt_smp_encrypt_change>:
{
    edf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->conn;
    edfc:	4605      	mov	r5, r0
{
    edfe:	460e      	mov	r6, r1
	struct bt_conn *conn = chan->conn;
    ee00:	f855 7bbc 	ldr.w	r7, [r5], #188
{
    ee04:	b089      	sub	sp, #36	; 0x24
    ee06:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    ee08:	2101      	movs	r1, #1
    ee0a:	4628      	mov	r0, r5
    ee0c:	f014 f95b 	bl	230c6 <atomic_clear_bit>
	if (hci_status) {
    ee10:	b946      	cbnz	r6, ee24 <bt_smp_encrypt_change+0x2c>
	if (!conn->encrypt) {
    ee12:	7afb      	ldrb	r3, [r7, #11]
    ee14:	b133      	cbz	r3, ee24 <bt_smp_encrypt_change+0x2c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    ee16:	2103      	movs	r1, #3
    ee18:	f014 fa1d 	bl	23256 <atomic_test_bit>
    ee1c:	b928      	cbnz	r0, ee2a <bt_smp_encrypt_change+0x32>
		smp_reset(smp);
    ee1e:	4620      	mov	r0, r4
    ee20:	f014 fab5 	bl	2338e <smp_reset>
}
    ee24:	b009      	add	sp, #36	; 0x24
    ee26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ee2a:	2105      	movs	r1, #5
    ee2c:	4628      	mov	r0, r5
    ee2e:	f014 fa12 	bl	23256 <atomic_test_bit>
    ee32:	b198      	cbz	r0, ee5c <bt_smp_encrypt_change+0x64>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    ee34:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    ee38:	071f      	lsls	r7, r3, #28
    ee3a:	d507      	bpl.n	ee4c <bt_smp_encrypt_change+0x54>
    ee3c:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    ee40:	071e      	lsls	r6, r3, #28
    ee42:	d503      	bpl.n	ee4c <bt_smp_encrypt_change+0x54>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    ee44:	2110      	movs	r1, #16
    ee46:	4628      	mov	r0, r5
    ee48:	f014 f92f 	bl	230aa <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    ee4c:	f8b4 31a0 	ldrh.w	r3, [r4, #416]	; 0x1a0
    ee50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    ee54:	f023 0308 	bic.w	r3, r3, #8
    ee58:	f8a4 31a0 	strh.w	r3, [r4, #416]	; 0x1a0
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    ee5c:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    ee60:	07d8      	lsls	r0, r3, #31
    ee62:	d51e      	bpl.n	eea2 <bt_smp_encrypt_change+0xaa>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    ee64:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    ee66:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    ee6a:	f014 f91e 	bl	230aa <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    ee6e:	4628      	mov	r0, r5
    ee70:	2102      	movs	r1, #2
    ee72:	f014 f91a 	bl	230aa <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    ee76:	6820      	ldr	r0, [r4, #0]
	if (!keys) {
    ee78:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    ee7c:	b9cb      	cbnz	r3, eeb2 <bt_smp_encrypt_change+0xba>
    ee7e:	4a4d      	ldr	r2, [pc, #308]	; (efb4 <bt_smp_encrypt_change+0x1bc>)
    ee80:	4c4d      	ldr	r4, [pc, #308]	; (efb8 <bt_smp_encrypt_change+0x1c0>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    ee82:	3088      	adds	r0, #136	; 0x88
    ee84:	1aa4      	subs	r4, r4, r2
    ee86:	f7f9 f955 	bl	8134 <bt_addr_le_str_real>
    ee8a:	f7f5 f8b9 	bl	4000 <log_strdup>
    ee8e:	08e4      	lsrs	r4, r4, #3
    ee90:	01a4      	lsls	r4, r4, #6
    ee92:	f044 0401 	orr.w	r4, r4, #1
    ee96:	4601      	mov	r1, r0
    ee98:	4622      	mov	r2, r4
    ee9a:	4848      	ldr	r0, [pc, #288]	; (efbc <bt_smp_encrypt_change+0x1c4>)
    ee9c:	f010 fdb5 	bl	1fa0a <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    eea0:	e7c0      	b.n	ee24 <bt_smp_encrypt_change+0x2c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    eea2:	0799      	lsls	r1, r3, #30
    eea4:	d501      	bpl.n	eeaa <bt_smp_encrypt_change+0xb2>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    eea6:	2108      	movs	r1, #8
    eea8:	e7dd      	b.n	ee66 <bt_smp_encrypt_change+0x6e>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    eeaa:	075a      	lsls	r2, r3, #29
    eeac:	d5df      	bpl.n	ee6e <bt_smp_encrypt_change+0x76>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    eeae:	210a      	movs	r1, #10
    eeb0:	e7d9      	b.n	ee66 <bt_smp_encrypt_change+0x6e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    eeb2:	2105      	movs	r1, #5
    eeb4:	4628      	mov	r0, r5
    eeb6:	f014 f9ce 	bl	23256 <atomic_test_bit>
    eeba:	4680      	mov	r8, r0
    eebc:	b9d0      	cbnz	r0, eef4 <bt_smp_encrypt_change+0xfc>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    eebe:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    eec2:	07db      	lsls	r3, r3, #31
    eec4:	d516      	bpl.n	eef4 <bt_smp_encrypt_change+0xfc>
	struct bt_keys *keys = conn->le.keys;
    eec6:	6823      	ldr	r3, [r4, #0]
		bt_rand((void *)&rand, sizeof(rand));
    eec8:	211a      	movs	r1, #26
    eeca:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    eecc:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
		bt_rand((void *)&rand, sizeof(rand));
    eed0:	f003 fb50 	bl	12574 <bt_rand>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    eed4:	2106      	movs	r1, #6
    eed6:	4620      	mov	r0, r4
    eed8:	f014 f9c6 	bl	23268 <smp_create_pdu.isra.0>
		if (!buf) {
    eedc:	4607      	mov	r7, r0
    eede:	b988      	cbnz	r0, ef04 <bt_smp_encrypt_change+0x10c>
    eee0:	4935      	ldr	r1, [pc, #212]	; (efb8 <bt_smp_encrypt_change+0x1c0>)
    eee2:	4b34      	ldr	r3, [pc, #208]	; (efb4 <bt_smp_encrypt_change+0x1bc>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    eee4:	4836      	ldr	r0, [pc, #216]	; (efc0 <bt_smp_encrypt_change+0x1c8>)
    eee6:	1ac9      	subs	r1, r1, r3
    eee8:	08c9      	lsrs	r1, r1, #3
    eeea:	0189      	lsls	r1, r1, #6
    eeec:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Master Ident buffer");
    eef0:	f010 fd7e 	bl	1f9f0 <log_0>
	if (!smp->local_dist && !smp->remote_dist) {
    eef4:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
    eef8:	2900      	cmp	r1, #0
    eefa:	d193      	bne.n	ee24 <bt_smp_encrypt_change+0x2c>
		smp_pairing_complete(smp, 0);
    eefc:	4620      	mov	r0, r4
    eefe:	f7ff fd97 	bl	ea30 <smp_pairing_complete>
    ef02:	e78f      	b.n	ee24 <bt_smp_encrypt_change+0x2c>
		info = net_buf_add(buf, sizeof(*info));
    ef04:	2110      	movs	r1, #16
    ef06:	3008      	adds	r0, #8
    ef08:	f014 fca0 	bl	2384c <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    ef0c:	7b32      	ldrb	r2, [r6, #12]
    ef0e:	a901      	add	r1, sp, #4
		info = net_buf_add(buf, sizeof(*info));
    ef10:	4681      	mov	r9, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
    ef12:	f012 fbc8 	bl	216a6 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    ef16:	7b30      	ldrb	r0, [r6, #12]
    ef18:	280f      	cmp	r0, #15
    ef1a:	d805      	bhi.n	ef28 <bt_smp_encrypt_change+0x130>
			(void)memset(info->ltk + keys->enc_size, 0,
    ef1c:	f1c0 0210 	rsb	r2, r0, #16
    ef20:	4641      	mov	r1, r8
    ef22:	4448      	add	r0, r9
    ef24:	f012 fbea 	bl	216fc <memset>
		smp_send(smp, buf, NULL, NULL);
    ef28:	4639      	mov	r1, r7
    ef2a:	2200      	movs	r2, #0
    ef2c:	4620      	mov	r0, r4
    ef2e:	f7ff f953 	bl	e1d8 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    ef32:	2107      	movs	r1, #7
    ef34:	4620      	mov	r0, r4
    ef36:	f014 f997 	bl	23268 <smp_create_pdu.isra.0>
		if (!buf) {
    ef3a:	4607      	mov	r7, r0
    ef3c:	b940      	cbnz	r0, ef50 <bt_smp_encrypt_change+0x158>
    ef3e:	491e      	ldr	r1, [pc, #120]	; (efb8 <bt_smp_encrypt_change+0x1c0>)
    ef40:	4b1c      	ldr	r3, [pc, #112]	; (efb4 <bt_smp_encrypt_change+0x1bc>)
			BT_ERR("Unable to allocate Master Ident buffer");
    ef42:	4820      	ldr	r0, [pc, #128]	; (efc4 <bt_smp_encrypt_change+0x1cc>)
    ef44:	1ac9      	subs	r1, r1, r3
    ef46:	08c9      	lsrs	r1, r1, #3
    ef48:	0189      	lsls	r1, r1, #6
    ef4a:	f041 0101 	orr.w	r1, r1, #1
    ef4e:	e7cf      	b.n	eef0 <bt_smp_encrypt_change+0xf8>
		ident = net_buf_add(buf, sizeof(*ident));
    ef50:	210a      	movs	r1, #10
    ef52:	3008      	adds	r0, #8
    ef54:	f014 fc7a 	bl	2384c <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    ef58:	2208      	movs	r2, #8
		ident = net_buf_add(buf, sizeof(*ident));
    ef5a:	4680      	mov	r8, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    ef5c:	a905      	add	r1, sp, #20
    ef5e:	3002      	adds	r0, #2
    ef60:	f012 fba1 	bl	216a6 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    ef64:	2202      	movs	r2, #2
    ef66:	a907      	add	r1, sp, #28
    ef68:	4640      	mov	r0, r8
    ef6a:	f012 fb9c 	bl	216a6 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    ef6e:	4639      	mov	r1, r7
    ef70:	4620      	mov	r0, r4
    ef72:	4a15      	ldr	r2, [pc, #84]	; (efc8 <bt_smp_encrypt_change+0x1d0>)
    ef74:	f7ff f930 	bl	e1d8 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ef78:	210c      	movs	r1, #12
    ef7a:	4628      	mov	r0, r5
    ef7c:	f014 f96b 	bl	23256 <atomic_test_bit>
    ef80:	2800      	cmp	r0, #0
    ef82:	d0b7      	beq.n	eef4 <bt_smp_encrypt_change+0xfc>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    ef84:	4630      	mov	r0, r6
    ef86:	2101      	movs	r1, #1
    ef88:	f014 fbf1 	bl	2376e <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    ef8c:	a901      	add	r1, sp, #4
    ef8e:	2210      	movs	r2, #16
    ef90:	f106 004a 	add.w	r0, r6, #74	; 0x4a
    ef94:	f012 fb87 	bl	216a6 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    ef98:	a905      	add	r1, sp, #20
    ef9a:	2208      	movs	r2, #8
    ef9c:	f106 0040 	add.w	r0, r6, #64	; 0x40
    efa0:	f012 fb81 	bl	216a6 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    efa4:	2202      	movs	r2, #2
    efa6:	a907      	add	r1, sp, #28
    efa8:	f106 0048 	add.w	r0, r6, #72	; 0x48
    efac:	f012 fb7b 	bl	216a6 <memcpy>
    efb0:	e7a0      	b.n	eef4 <bt_smp_encrypt_change+0xfc>
    efb2:	bf00      	nop
    efb4:	00024c24 	.word	0x00024c24
    efb8:	00024d0c 	.word	0x00024d0c
    efbc:	00028770 	.word	0x00028770
    efc0:	00028785 	.word	0x00028785
    efc4:	000287ac 	.word	0x000287ac
    efc8:	00023421 	.word	0x00023421

0000efcc <smp_pairing_random>:
{
    efcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    efd0:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    efd2:	f100 07ef 	add.w	r7, r0, #239	; 0xef
    efd6:	6889      	ldr	r1, [r1, #8]
{
    efd8:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    efda:	2210      	movs	r2, #16
    efdc:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    efde:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    efe2:	f012 fb60 	bl	216a6 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    efe6:	2105      	movs	r1, #5
    efe8:	4630      	mov	r0, r6
    efea:	f014 f934 	bl	23256 <atomic_test_bit>
    efee:	2800      	cmp	r0, #0
    eff0:	d13d      	bne.n	f06e <smp_pairing_random+0xa2>
	struct bt_conn *conn = smp->chan.chan.conn;
    eff2:	46a0      	mov	r8, r4
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    eff4:	ad0a      	add	r5, sp, #40	; 0x28
	struct bt_conn *conn = smp->chan.chan.conn;
    eff6:	f858 3bff 	ldr.w	r3, [r8], #255
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    effa:	9502      	str	r5, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    effc:	f103 0296 	add.w	r2, r3, #150	; 0x96
    f000:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    f002:	9201      	str	r2, [sp, #4]
    f004:	9300      	str	r3, [sp, #0]
    f006:	f104 02c1 	add.w	r2, r4, #193	; 0xc1
    f00a:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
    f00e:	4639      	mov	r1, r7
    f010:	4640      	mov	r0, r8
    f012:	f014 fa1a 	bl	2344a <smp_c1>
	if (err) {
    f016:	b108      	cbz	r0, f01c <smp_pairing_random+0x50>
	switch (smp->method) {
    f018:	2508      	movs	r5, #8
    f01a:	e096      	b.n	f14a <smp_pairing_random+0x17e>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    f01c:	2210      	movs	r2, #16
    f01e:	4629      	mov	r1, r5
    f020:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    f024:	f012 fb2f 	bl	21686 <memcmp>
    f028:	2800      	cmp	r0, #0
    f02a:	f040 808d 	bne.w	f148 <smp_pairing_random+0x17c>
	memcpy(out, r2, 8);
    f02e:	2208      	movs	r2, #8
    f030:	4639      	mov	r1, r7
    f032:	4628      	mov	r0, r5
    f034:	f012 fb37 	bl	216a6 <memcpy>
	memcpy(out + 8, r1, 8);
    f038:	2208      	movs	r2, #8
    f03a:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    f03e:	a80c      	add	r0, sp, #48	; 0x30
    f040:	f012 fb31 	bl	216a6 <memcpy>
	return bt_encrypt_le(k, out, out);
    f044:	462a      	mov	r2, r5
    f046:	4629      	mov	r1, r5
    f048:	4640      	mov	r0, r8
    f04a:	f003 fa95 	bl	12578 <bt_encrypt_le>
		if (err) {
    f04e:	2800      	cmp	r0, #0
    f050:	d1e2      	bne.n	f018 <smp_pairing_random+0x4c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    f052:	4629      	mov	r1, r5
    f054:	2210      	movs	r2, #16
    f056:	4640      	mov	r0, r8
    f058:	f012 fb25 	bl	216a6 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    f05c:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f05e:	4630      	mov	r0, r6
    f060:	f014 f823 	bl	230aa <atomic_set_bit>
	return smp_send_pairing_random(smp);
    f064:	4620      	mov	r0, r4
    f066:	f014 f91f 	bl	232a8 <smp_send_pairing_random>
    f06a:	4605      	mov	r5, r0
    f06c:	e06d      	b.n	f14a <smp_pairing_random+0x17e>
	switch (smp->method) {
    f06e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    f072:	2b05      	cmp	r3, #5
    f074:	d8d0      	bhi.n	f018 <smp_pairing_random+0x4c>
    f076:	a201      	add	r2, pc, #4	; (adr r2, f07c <smp_pairing_random+0xb0>)
    f078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f07c:	0000f103 	.word	0x0000f103
    f080:	0000f111 	.word	0x0000f111
    f084:	0000f111 	.word	0x0000f111
    f088:	0000f095 	.word	0x0000f095
    f08c:	0000f019 	.word	0x0000f019
    f090:	0000f19d 	.word	0x0000f19d
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    f094:	4b5a      	ldr	r3, [pc, #360]	; (f200 <smp_pairing_random+0x234>)
    f096:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    f098:	2220      	movs	r2, #32
    f09a:	f204 110f 	addw	r1, r4, #271	; 0x10f
    f09e:	a80a      	add	r0, sp, #40	; 0x28
    f0a0:	f013 fff7 	bl	23092 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    f0a4:	2220      	movs	r2, #32
    f0a6:	4629      	mov	r1, r5
    f0a8:	a812      	add	r0, sp, #72	; 0x48
    f0aa:	f013 fff2 	bl	23092 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    f0ae:	2210      	movs	r2, #16
    f0b0:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    f0b4:	a81a      	add	r0, sp, #104	; 0x68
    f0b6:	f013 ffec 	bl	23092 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    f0ba:	2210      	movs	r2, #16
    f0bc:	4639      	mov	r1, r7
    f0be:	a806      	add	r0, sp, #24
    f0c0:	f013 ffe7 	bl	23092 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    f0c4:	ab06      	add	r3, sp, #24
    f0c6:	2250      	movs	r2, #80	; 0x50
    f0c8:	a90a      	add	r1, sp, #40	; 0x28
    f0ca:	4618      	mov	r0, r3
    f0cc:	f014 f80a 	bl	230e4 <bt_smp_aes_cmac>
	if (err) {
    f0d0:	2800      	cmp	r0, #0
    f0d2:	d1a1      	bne.n	f018 <smp_pairing_random+0x4c>
	memcpy(passkey, xs + 12, 4);
    f0d4:	2204      	movs	r2, #4
    f0d6:	a909      	add	r1, sp, #36	; 0x24
    f0d8:	a805      	add	r0, sp, #20
    f0da:	f012 fae4 	bl	216a6 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    f0de:	9b05      	ldr	r3, [sp, #20]
    f0e0:	4948      	ldr	r1, [pc, #288]	; (f204 <smp_pairing_random+0x238>)
    f0e2:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f0e4:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    f0e6:	fbb3 f2f1 	udiv	r2, r3, r1
    f0ea:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f0ee:	2109      	movs	r1, #9
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    f0f0:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f0f2:	f013 ffda 	bl	230aa <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    f0f6:	4b44      	ldr	r3, [pc, #272]	; (f208 <smp_pairing_random+0x23c>)
    f0f8:	9905      	ldr	r1, [sp, #20]
    f0fa:	681b      	ldr	r3, [r3, #0]
    f0fc:	6820      	ldr	r0, [r4, #0]
    f0fe:	689b      	ldr	r3, [r3, #8]
    f100:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    f102:	210d      	movs	r1, #13
    f104:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f108:	f013 ffcf 	bl	230aa <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f10c:	210f      	movs	r1, #15
    f10e:	e7a6      	b.n	f05e <smp_pairing_random+0x92>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    f110:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    f114:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    f118:	4939      	ldr	r1, [pc, #228]	; (f200 <smp_pairing_random+0x234>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    f11a:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    f11c:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    f11e:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    f122:	9500      	str	r5, [sp, #0]
    f124:	6809      	ldr	r1, [r1, #0]
    f126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f12a:	463a      	mov	r2, r7
    f12c:	f204 100f 	addw	r0, r4, #271	; 0x10f
    f130:	f014 f86a 	bl	23208 <smp_f4>
    f134:	2800      	cmp	r0, #0
    f136:	f47f af6f 	bne.w	f018 <smp_pairing_random+0x4c>
	if (memcmp(smp->pcnf, cfm, 16)) {
    f13a:	2210      	movs	r2, #16
    f13c:	4629      	mov	r1, r5
    f13e:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    f142:	f012 faa0 	bl	21686 <memcmp>
    f146:	b120      	cbz	r0, f152 <smp_pairing_random+0x186>
		return BT_SMP_ERR_CONFIRM_FAILED;
    f148:	2504      	movs	r5, #4
}
    f14a:	4628      	mov	r0, r5
    f14c:	b01e      	add	sp, #120	; 0x78
    f14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(&smp->allowed_cmds,
    f152:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
    f156:	2103      	movs	r1, #3
    f158:	4638      	mov	r0, r7
    f15a:	f013 ffa6 	bl	230aa <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    f15e:	4620      	mov	r0, r4
    f160:	f014 f8a2 	bl	232a8 <smp_send_pairing_random>
		if (err) {
    f164:	4605      	mov	r5, r0
    f166:	2800      	cmp	r0, #0
    f168:	d1ef      	bne.n	f14a <smp_pairing_random+0x17e>
		smp->passkey_round++;
    f16a:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
    f16e:	3301      	adds	r3, #1
    f170:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    f172:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    f174:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
		if (smp->passkey_round == 20U) {
    f178:	d108      	bne.n	f18c <smp_pairing_random+0x1c0>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    f17a:	4638      	mov	r0, r7
    f17c:	210d      	movs	r1, #13
    f17e:	f013 ff94 	bl	230aa <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f182:	210f      	movs	r1, #15
    f184:	4630      	mov	r0, r6
    f186:	f013 ff90 	bl	230aa <atomic_set_bit>
			return 0;
    f18a:	e7de      	b.n	f14a <smp_pairing_random+0x17e>
		if (bt_rand(smp->prnd, 16)) {
    f18c:	2110      	movs	r1, #16
    f18e:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    f192:	f003 f9ef 	bl	12574 <bt_rand>
    f196:	2800      	cmp	r0, #0
    f198:	d0d7      	beq.n	f14a <smp_pairing_random+0x17e>
    f19a:	e73d      	b.n	f018 <smp_pairing_random+0x4c>
		if (bt_rand(smp->prnd, 16)) {
    f19c:	2110      	movs	r1, #16
    f19e:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    f1a2:	f003 f9e7 	bl	12574 <bt_rand>
    f1a6:	2800      	cmp	r0, #0
    f1a8:	f47f af36 	bne.w	f018 <smp_pairing_random+0x4c>
		if (bt_auth && bt_auth->oob_data_request) {
    f1ac:	4f16      	ldr	r7, [pc, #88]	; (f208 <smp_pairing_random+0x23c>)
    f1ae:	683b      	ldr	r3, [r7, #0]
    f1b0:	b193      	cbz	r3, f1d8 <smp_pairing_random+0x20c>
    f1b2:	68db      	ldr	r3, [r3, #12]
    f1b4:	b183      	cbz	r3, f1d8 <smp_pairing_random+0x20c>
			struct bt_conn_oob_info info = {
    f1b6:	4b15      	ldr	r3, [pc, #84]	; (f20c <smp_pairing_random+0x240>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    f1b8:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
			struct bt_conn_oob_info info = {
    f1bc:	881b      	ldrh	r3, [r3, #0]
    f1be:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    f1c2:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    f1c6:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    f1c8:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    f1cc:	d406      	bmi.n	f1dc <smp_pairing_random+0x210>
				     BT_CONN_OOB_BOTH_PEERS :
    f1ce:	2b00      	cmp	r3, #0
    f1d0:	bf0c      	ite	eq
    f1d2:	2003      	moveq	r0, #3
    f1d4:	2001      	movne	r0, #1
    f1d6:	e004      	b.n	f1e2 <smp_pairing_random+0x216>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    f1d8:	2502      	movs	r5, #2
    f1da:	e7b6      	b.n	f14a <smp_pairing_random+0x17e>
				     BT_CONN_OOB_BOTH_PEERS :
    f1dc:	2b00      	cmp	r3, #0
    f1de:	bf18      	it	ne
    f1e0:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
    f1e2:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    f1e4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
    f1e8:	e9c4 5566 	strd	r5, r5, [r4, #408]	; 0x198
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    f1ec:	4630      	mov	r0, r6
    f1ee:	210b      	movs	r1, #11
    f1f0:	f013 ff5b 	bl	230aa <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    f1f4:	683b      	ldr	r3, [r7, #0]
    f1f6:	6820      	ldr	r0, [r4, #0]
    f1f8:	68db      	ldr	r3, [r3, #12]
    f1fa:	a90a      	add	r1, sp, #40	; 0x28
    f1fc:	4798      	blx	r3
			return 0;
    f1fe:	e7a4      	b.n	f14a <smp_pairing_random+0x17e>
    f200:	20002a70 	.word	0x20002a70
    f204:	000f4240 	.word	0x000f4240
    f208:	200029bc 	.word	0x200029bc
    f20c:	00024e94 	.word	0x00024e94

0000f210 <smp_public_key>:
{
    f210:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    f212:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    f214:	f200 140f 	addw	r4, r0, #271	; 0x10f
{
    f218:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
    f21a:	2220      	movs	r2, #32
    f21c:	4631      	mov	r1, r6
    f21e:	4620      	mov	r0, r4
    f220:	f012 fa41 	bl	216a6 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    f224:	2220      	movs	r2, #32
    f226:	18b1      	adds	r1, r6, r2
    f228:	f205 102f 	addw	r0, r5, #303	; 0x12f
    f22c:	f012 fa3b 	bl	216a6 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    f230:	4920      	ldr	r1, [pc, #128]	; (f2b4 <smp_public_key+0xa4>)
    f232:	2240      	movs	r2, #64	; 0x40
    f234:	4620      	mov	r0, r4
    f236:	f012 fa26 	bl	21686 <memcmp>
    f23a:	b148      	cbz	r0, f250 <smp_public_key+0x40>
	if (!sc_public_key) {
    f23c:	4b1e      	ldr	r3, [pc, #120]	; (f2b8 <smp_public_key+0xa8>)
    f23e:	681c      	ldr	r4, [r3, #0]
    f240:	bb74      	cbnz	r4, f2a0 <smp_public_key+0x90>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    f242:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    f246:	2106      	movs	r1, #6
    f248:	f013 ff2f 	bl	230aa <atomic_set_bit>
		return 0;
    f24c:	4620      	mov	r0, r4
}
    f24e:	bd70      	pop	{r4, r5, r6, pc}
    f250:	4b1a      	ldr	r3, [pc, #104]	; (f2bc <smp_public_key+0xac>)
    f252:	491b      	ldr	r1, [pc, #108]	; (f2c0 <smp_public_key+0xb0>)
		BT_INFO("Remote is using Debug Public key");
    f254:	481b      	ldr	r0, [pc, #108]	; (f2c4 <smp_public_key+0xb4>)
    f256:	1ac9      	subs	r1, r1, r3
    f258:	08c9      	lsrs	r1, r1, #3
    f25a:	0189      	lsls	r1, r1, #6
    f25c:	f041 0103 	orr.w	r1, r1, #3
    f260:	f010 fbc6 	bl	1f9f0 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    f264:	210d      	movs	r1, #13
    f266:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    f26a:	f013 ff1e 	bl	230aa <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    f26e:	682c      	ldr	r4, [r5, #0]
	if (!conn->le.keys) {
    f270:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    f274:	b933      	cbnz	r3, f284 <smp_public_key+0x74>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f276:	7a20      	ldrb	r0, [r4, #8]
    f278:	f104 0188 	add.w	r1, r4, #136	; 0x88
    f27c:	f000 fa26 	bl	f6cc <bt_keys_get_addr>
    f280:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
    f284:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    f288:	2b00      	cmp	r3, #0
    f28a:	d0d7      	beq.n	f23c <smp_public_key+0x2c>
    f28c:	89da      	ldrh	r2, [r3, #14]
    f28e:	f002 0224 	and.w	r2, r2, #36	; 0x24
    f292:	2a00      	cmp	r2, #0
    f294:	d0d2      	beq.n	f23c <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    f296:	7b5b      	ldrb	r3, [r3, #13]
    f298:	079b      	lsls	r3, r3, #30
    f29a:	d5cf      	bpl.n	f23c <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    f29c:	2003      	movs	r0, #3
    f29e:	e7d6      	b.n	f24e <smp_public_key+0x3e>
	err = sc_send_public_key(smp);
    f2a0:	4628      	mov	r0, r5
    f2a2:	f7ff f895 	bl	e3d0 <sc_send_public_key>
	if (err) {
    f2a6:	2800      	cmp	r0, #0
    f2a8:	d1d1      	bne.n	f24e <smp_public_key+0x3e>
    f2aa:	4628      	mov	r0, r5
}
    f2ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f2b0:	f7ff b8f0 	b.w	e494 <smp_public_key_slave.part.0>
    f2b4:	0002885f 	.word	0x0002885f
    f2b8:	20002a70 	.word	0x20002a70
    f2bc:	00024c24 	.word	0x00024c24
    f2c0:	00024d0c 	.word	0x00024d0c
    f2c4:	000287d3 	.word	0x000287d3

0000f2c8 <smp_ident_addr_info>:
{
    f2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    f2cc:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    f2ce:	6805      	ldr	r5, [r0, #0]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    f2d0:	7833      	ldrb	r3, [r6, #0]
{
    f2d2:	4604      	mov	r4, r0
    f2d4:	b31b      	cbz	r3, f31e <smp_ident_addr_info+0x56>
	if (!bt_addr_le_is_identity(&req->addr)) {
    f2d6:	79b3      	ldrb	r3, [r6, #6]
    f2d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f2dc:	2bc0      	cmp	r3, #192	; 0xc0
    f2de:	d01e      	beq.n	f31e <smp_ident_addr_info+0x56>
    f2e0:	4b43      	ldr	r3, [pc, #268]	; (f3f0 <smp_ident_addr_info+0x128>)
    f2e2:	4c44      	ldr	r4, [pc, #272]	; (f3f4 <smp_ident_addr_info+0x12c>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    f2e4:	4630      	mov	r0, r6
    f2e6:	1ae4      	subs	r4, r4, r3
    f2e8:	f7f8 ff24 	bl	8134 <bt_addr_le_str_real>
    f2ec:	f7f4 fe88 	bl	4000 <log_strdup>
    f2f0:	08e4      	lsrs	r4, r4, #3
    f2f2:	01a4      	lsls	r4, r4, #6
    f2f4:	f044 0401 	orr.w	r4, r4, #1
    f2f8:	4601      	mov	r1, r0
    f2fa:	4622      	mov	r2, r4
    f2fc:	483e      	ldr	r0, [pc, #248]	; (f3f8 <smp_ident_addr_info+0x130>)
    f2fe:	f010 fb84 	bl	1fa0a <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    f302:	f105 0088 	add.w	r0, r5, #136	; 0x88
    f306:	f7f8 ff15 	bl	8134 <bt_addr_le_str_real>
    f30a:	f7f4 fe79 	bl	4000 <log_strdup>
    f30e:	4622      	mov	r2, r4
    f310:	4601      	mov	r1, r0
    f312:	483a      	ldr	r0, [pc, #232]	; (f3fc <smp_ident_addr_info+0x134>)
    f314:	f010 fb79 	bl	1fa0a <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
    f318:	200a      	movs	r0, #10
}
    f31a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f31e:	210c      	movs	r1, #12
    f320:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    f324:	f013 ff97 	bl	23256 <atomic_test_bit>
    f328:	2800      	cmp	r0, #0
    f32a:	d048      	beq.n	f3be <smp_ident_addr_info+0xf6>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    f32c:	f105 0788 	add.w	r7, r5, #136	; 0x88
    f330:	7a29      	ldrb	r1, [r5, #8]
    f332:	463a      	mov	r2, r7
    f334:	2002      	movs	r0, #2
    f336:	f014 fa0a 	bl	2374e <bt_keys_get_type>
		if (!keys) {
    f33a:	4680      	mov	r8, r0
    f33c:	b990      	cbnz	r0, f364 <smp_ident_addr_info+0x9c>
    f33e:	4a2c      	ldr	r2, [pc, #176]	; (f3f0 <smp_ident_addr_info+0x128>)
    f340:	4c2c      	ldr	r4, [pc, #176]	; (f3f4 <smp_ident_addr_info+0x12c>)
			BT_ERR("Unable to get keys for %s",
    f342:	4638      	mov	r0, r7
    f344:	1aa4      	subs	r4, r4, r2
    f346:	f7f8 fef5 	bl	8134 <bt_addr_le_str_real>
    f34a:	f7f4 fe59 	bl	4000 <log_strdup>
    f34e:	08e4      	lsrs	r4, r4, #3
    f350:	01a4      	lsls	r4, r4, #6
    f352:	f044 0401 	orr.w	r4, r4, #1
    f356:	4601      	mov	r1, r0
    f358:	4622      	mov	r2, r4
    f35a:	4829      	ldr	r0, [pc, #164]	; (f400 <smp_ident_addr_info+0x138>)
    f35c:	f010 fb55 	bl	1fa0a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    f360:	2008      	movs	r0, #8
    f362:	e7da      	b.n	f31a <smp_ident_addr_info+0x52>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    f364:	78eb      	ldrb	r3, [r5, #3]
    f366:	2b00      	cmp	r3, #0
    f368:	d13f      	bne.n	f3ea <smp_ident_addr_info+0x122>
			dst = &conn->le.resp_addr;
    f36a:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
    f36e:	780b      	ldrb	r3, [r1, #0]
    f370:	2b01      	cmp	r3, #1
    f372:	d121      	bne.n	f3b8 <smp_ident_addr_info+0xf0>
		if (bt_addr_le_is_rpa(dst)) {
    f374:	798b      	ldrb	r3, [r1, #6]
    f376:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f37a:	2b40      	cmp	r3, #64	; 0x40
    f37c:	d11c      	bne.n	f3b8 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    f37e:	2206      	movs	r2, #6
    f380:	3101      	adds	r1, #1
    f382:	f108 003a 	add.w	r0, r8, #58	; 0x3a
    f386:	f012 f98e 	bl	216a6 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    f38a:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
    f38e:	b19b      	cbz	r3, f3b8 <smp_ident_addr_info+0xf0>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    f390:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    f394:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f398:	2bc0      	cmp	r3, #192	; 0xc0
    f39a:	d00d      	beq.n	f3b8 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    f39c:	2207      	movs	r2, #7
    f39e:	4631      	mov	r1, r6
    f3a0:	f108 0001 	add.w	r0, r8, #1
    f3a4:	f012 f97f 	bl	216a6 <memcpy>
    f3a8:	2207      	movs	r2, #7
    f3aa:	4631      	mov	r1, r6
    f3ac:	4638      	mov	r0, r7
    f3ae:	f012 f97a 	bl	216a6 <memcpy>
				bt_conn_identity_resolved(conn);
    f3b2:	4628      	mov	r0, r5
    f3b4:	f7fb fbc2 	bl	ab3c <bt_conn_identity_resolved>
		bt_id_add(keys);
    f3b8:	4640      	mov	r0, r8
    f3ba:	f7fa fad1 	bl	9960 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    f3be:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    f3c2:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    f3c6:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    f3c8:	f884 21a1 	strb.w	r2, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    f3cc:	d504      	bpl.n	f3d8 <smp_ident_addr_info+0x110>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    f3ce:	210a      	movs	r1, #10
    f3d0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f3d4:	f013 fe69 	bl	230aa <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    f3d8:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
    f3dc:	b91d      	cbnz	r5, f3e6 <smp_ident_addr_info+0x11e>
		smp_pairing_complete(smp, 0);
    f3de:	4629      	mov	r1, r5
    f3e0:	4620      	mov	r0, r4
    f3e2:	f7ff fb25 	bl	ea30 <smp_pairing_complete>
	return 0;
    f3e6:	2000      	movs	r0, #0
    f3e8:	e797      	b.n	f31a <smp_ident_addr_info+0x52>
			dst = &conn->le.init_addr;
    f3ea:	f105 018f 	add.w	r1, r5, #143	; 0x8f
    f3ee:	e7be      	b.n	f36e <smp_ident_addr_info+0xa6>
    f3f0:	00024c24 	.word	0x00024c24
    f3f4:	00024d0c 	.word	0x00024d0c
    f3f8:	000287f4 	.word	0x000287f4
    f3fc:	0002877d 	.word	0x0002877d
    f400:	0002865b 	.word	0x0002865b

0000f404 <bt_smp_start_security>:
{
    f404:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
    f408:	78c4      	ldrb	r4, [r0, #3]
    f40a:	2c01      	cmp	r4, #1
{
    f40c:	4605      	mov	r5, r0
	switch (conn->role) {
    f40e:	d005      	beq.n	f41c <bt_smp_start_security+0x18>
		return -EINVAL;
    f410:	f06f 0415 	mvn.w	r4, #21
}
    f414:	4620      	mov	r0, r4
    f416:	b003      	add	sp, #12
    f418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
    f41c:	f7fe fe84 	bl	e128 <smp_chan_get>
	if (!smp) {
    f420:	4606      	mov	r6, r0
    f422:	2800      	cmp	r0, #0
    f424:	f000 80a1 	beq.w	f56a <bt_smp_start_security+0x166>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    f428:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
    f42c:	2104      	movs	r1, #4
    f42e:	4638      	mov	r0, r7
    f430:	f013 ff11 	bl	23256 <atomic_test_bit>
    f434:	2800      	cmp	r0, #0
    f436:	f040 809b 	bne.w	f570 <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    f43a:	2103      	movs	r1, #3
    f43c:	4638      	mov	r0, r7
    f43e:	f013 ff0a 	bl	23256 <atomic_test_bit>
    f442:	b110      	cbz	r0, f44a <bt_smp_start_security+0x46>
		return -EBUSY;
    f444:	f06f 040f 	mvn.w	r4, #15
    f448:	e7e4      	b.n	f414 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    f44a:	4621      	mov	r1, r4
    f44c:	4638      	mov	r0, r7
    f44e:	f013 ff02 	bl	23256 <atomic_test_bit>
    f452:	2800      	cmp	r0, #0
    f454:	d1f6      	bne.n	f444 <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    f456:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    f458:	2b03      	cmp	r3, #3
    f45a:	d03d      	beq.n	f4d8 <bt_smp_start_security+0xd4>
    f45c:	d82c      	bhi.n	f4b8 <bt_smp_start_security+0xb4>
    f45e:	3b01      	subs	r3, #1
    f460:	2b01      	cmp	r3, #1
    f462:	d947      	bls.n	f4f4 <bt_smp_start_security+0xf0>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
    f464:	210b      	movs	r1, #11
    f466:	1d28      	adds	r0, r5, #4
    f468:	f013 fef5 	bl	23256 <atomic_test_bit>
    f46c:	2800      	cmp	r0, #0
    f46e:	d1cf      	bne.n	f410 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
    f470:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f474:	b983      	cbnz	r3, f498 <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
    f476:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    f47a:	7a29      	ldrb	r1, [r5, #8]
    f47c:	4622      	mov	r2, r4
    f47e:	2020      	movs	r0, #32
    f480:	f000 f95a 	bl	f738 <bt_keys_find>
    f484:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    f488:	b930      	cbnz	r0, f498 <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    f48a:	7a29      	ldrb	r1, [r5, #8]
    f48c:	4622      	mov	r2, r4
    f48e:	2004      	movs	r0, #4
    f490:	f000 f952 	bl	f738 <bt_keys_find>
    f494:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    f498:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f49c:	2b00      	cmp	r3, #0
    f49e:	d0b7      	beq.n	f410 <bt_smp_start_security+0xc>
    f4a0:	89da      	ldrh	r2, [r3, #14]
    f4a2:	f002 0224 	and.w	r2, r2, #36	; 0x24
    f4a6:	2a00      	cmp	r2, #0
    f4a8:	d0b2      	beq.n	f410 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
    f4aa:	7aaa      	ldrb	r2, [r5, #10]
    f4ac:	2a02      	cmp	r2, #2
    f4ae:	d921      	bls.n	f4f4 <bt_smp_start_security+0xf0>
    f4b0:	7b5b      	ldrb	r3, [r3, #13]
    f4b2:	07db      	lsls	r3, r3, #31
    f4b4:	d5ac      	bpl.n	f410 <bt_smp_start_security+0xc>
    f4b6:	e01d      	b.n	f4f4 <bt_smp_start_security+0xf0>
	switch (conn->required_sec_level) {
    f4b8:	2b04      	cmp	r3, #4
    f4ba:	d1d3      	bne.n	f464 <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f4bc:	f7fe fdf0 	bl	e0a0 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    f4c0:	2803      	cmp	r0, #3
    f4c2:	d104      	bne.n	f4ce <bt_smp_start_security+0xca>
    f4c4:	4b2c      	ldr	r3, [pc, #176]	; (f578 <bt_smp_start_security+0x174>)
    f4c6:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f4c8:	b1fb      	cbz	r3, f50a <bt_smp_start_security+0x106>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    f4ca:	68dc      	ldr	r4, [r3, #12]
    f4cc:	b10c      	cbz	r4, f4d2 <bt_smp_start_security+0xce>
    f4ce:	4b2b      	ldr	r3, [pc, #172]	; (f57c <bt_smp_start_security+0x178>)
    f4d0:	781c      	ldrb	r4, [r3, #0]
    f4d2:	f004 0401 	and.w	r4, r4, #1
    f4d6:	e00b      	b.n	f4f0 <bt_smp_start_security+0xec>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f4d8:	f7fe fde2 	bl	e0a0 <get_io_capa>
    f4dc:	2803      	cmp	r0, #3
    f4de:	d107      	bne.n	f4f0 <bt_smp_start_security+0xec>
		       (bt_auth && bt_auth->oob_data_request);
    f4e0:	4b25      	ldr	r3, [pc, #148]	; (f578 <bt_smp_start_security+0x174>)
    f4e2:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f4e4:	2c00      	cmp	r4, #0
    f4e6:	d0bd      	beq.n	f464 <bt_smp_start_security+0x60>
		       (bt_auth && bt_auth->oob_data_request);
    f4e8:	68e4      	ldr	r4, [r4, #12]
    f4ea:	3c00      	subs	r4, #0
    f4ec:	bf18      	it	ne
    f4ee:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    f4f0:	2c00      	cmp	r4, #0
    f4f2:	d0b7      	beq.n	f464 <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
    f4f4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f4f8:	b14b      	cbz	r3, f50e <bt_smp_start_security+0x10a>
	if (smp_init(smp) != 0) {
    f4fa:	4630      	mov	r0, r6
    f4fc:	f7fe fe2c 	bl	e158 <smp_init>
    f500:	4604      	mov	r4, r0
    f502:	b180      	cbz	r0, f526 <bt_smp_start_security+0x122>
		return -ENOBUFS;
    f504:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f508:	e784      	b.n	f414 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    f50a:	2400      	movs	r4, #0
    f50c:	e7e1      	b.n	f4d2 <bt_smp_start_security+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f50e:	7a28      	ldrb	r0, [r5, #8]
    f510:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f514:	f000 f8da 	bl	f6cc <bt_keys_get_addr>
    f518:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    f51c:	2800      	cmp	r0, #0
    f51e:	d1ec      	bne.n	f4fa <bt_smp_start_security+0xf6>
			return -ENOMEM;
    f520:	f06f 040b 	mvn.w	r4, #11
    f524:	e776      	b.n	f414 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
    f526:	210b      	movs	r1, #11
    f528:	4630      	mov	r0, r6
    f52a:	f013 fe9d 	bl	23268 <smp_create_pdu.isra.0>
	if (!req_buf) {
    f52e:	4680      	mov	r8, r0
    f530:	2800      	cmp	r0, #0
    f532:	d0e7      	beq.n	f504 <bt_smp_start_security+0x100>
	req = net_buf_add(req_buf, sizeof(*req));
    f534:	2101      	movs	r1, #1
    f536:	3008      	adds	r0, #8
    f538:	f014 f988 	bl	2384c <net_buf_simple_add>
    f53c:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    f53e:	2009      	movs	r0, #9
    f540:	f7fe fdd4 	bl	e0ec <get_auth.isra.0>
    f544:	4623      	mov	r3, r4
    f546:	f889 0000 	strb.w	r0, [r9]
    f54a:	4642      	mov	r2, r8
    f54c:	9400      	str	r4, [sp, #0]
    f54e:	2106      	movs	r1, #6
    f550:	4628      	mov	r0, r5
    f552:	f012 fd64 	bl	2201e <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    f556:	4638      	mov	r0, r7
    f558:	210e      	movs	r1, #14
    f55a:	f013 fda6 	bl	230aa <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    f55e:	2101      	movs	r1, #1
    f560:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    f564:	f013 fda1 	bl	230aa <atomic_set_bit>
	return 0;
    f568:	e754      	b.n	f414 <bt_smp_start_security+0x10>
		return -ENOTCONN;
    f56a:	f06f 0438 	mvn.w	r4, #56	; 0x38
    f56e:	e751      	b.n	f414 <bt_smp_start_security+0x10>
		return -EIO;
    f570:	f06f 0404 	mvn.w	r4, #4
    f574:	e74e      	b.n	f414 <bt_smp_start_security+0x10>
    f576:	bf00      	nop
    f578:	200029bc 	.word	0x200029bc
    f57c:	2000683d 	.word	0x2000683d

0000f580 <bt_smp_update_keys>:
{
    f580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f582:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    f584:	f7fe fdd0 	bl	e128 <smp_chan_get>
	if (!smp) {
    f588:	4605      	mov	r5, r0
    f58a:	2800      	cmp	r0, #0
    f58c:	f000 8081 	beq.w	f692 <bt_smp_update_keys+0x112>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    f590:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
    f594:	2103      	movs	r1, #3
    f596:	4630      	mov	r0, r6
    f598:	f013 fe5d 	bl	23256 <atomic_test_bit>
    f59c:	2800      	cmp	r0, #0
    f59e:	d078      	beq.n	f692 <bt_smp_update_keys+0x112>
	if (conn->le.keys) {
    f5a0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f5a4:	b108      	cbz	r0, f5aa <bt_smp_update_keys+0x2a>
		bt_keys_clear(conn->le.keys);
    f5a6:	f014 f8e6 	bl	23776 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f5aa:	f104 0788 	add.w	r7, r4, #136	; 0x88
    f5ae:	7a20      	ldrb	r0, [r4, #8]
    f5b0:	4639      	mov	r1, r7
    f5b2:	f000 f88b 	bl	f6cc <bt_keys_get_addr>
    f5b6:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    f5ba:	b9b0      	cbnz	r0, f5ea <bt_smp_update_keys+0x6a>
    f5bc:	4a35      	ldr	r2, [pc, #212]	; (f694 <bt_smp_update_keys+0x114>)
    f5be:	4c36      	ldr	r4, [pc, #216]	; (f698 <bt_smp_update_keys+0x118>)
		BT_ERR("Unable to get keys for %s",
    f5c0:	4638      	mov	r0, r7
    f5c2:	1aa4      	subs	r4, r4, r2
    f5c4:	f7f8 fdb6 	bl	8134 <bt_addr_le_str_real>
    f5c8:	f7f4 fd1a 	bl	4000 <log_strdup>
    f5cc:	08e4      	lsrs	r4, r4, #3
    f5ce:	01a4      	lsls	r4, r4, #6
    f5d0:	f044 0401 	orr.w	r4, r4, #1
    f5d4:	4601      	mov	r1, r0
    f5d6:	4622      	mov	r2, r4
    f5d8:	4830      	ldr	r0, [pc, #192]	; (f69c <bt_smp_update_keys+0x11c>)
    f5da:	f010 fa16 	bl	1fa0a <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    f5de:	4628      	mov	r0, r5
    f5e0:	2108      	movs	r1, #8
}
    f5e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    f5e6:	f013 befd 	b.w	233e4 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    f5ea:	210d      	movs	r1, #13
    f5ec:	4630      	mov	r0, r6
    f5ee:	f013 fe32 	bl	23256 <atomic_test_bit>
    f5f2:	b128      	cbz	r0, f600 <bt_smp_update_keys+0x80>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    f5f4:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    f5f8:	7b53      	ldrb	r3, [r2, #13]
    f5fa:	f043 0302 	orr.w	r3, r3, #2
    f5fe:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
    f600:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    f604:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    f608:	2a03      	cmp	r2, #3
    f60a:	7b4b      	ldrb	r3, [r1, #13]
    f60c:	d838      	bhi.n	f680 <bt_smp_update_keys+0x100>
    f60e:	b3d2      	cbz	r2, f686 <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    f610:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    f614:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
    f616:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    f61a:	f895 20c5 	ldrb.w	r2, [r5, #197]	; 0xc5
    f61e:	4293      	cmp	r3, r2
    f620:	bf28      	it	cs
    f622:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    f624:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f626:	4630      	mov	r0, r6
    f628:	2105      	movs	r1, #5
    f62a:	f013 fe14 	bl	23256 <atomic_test_bit>
    f62e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
    f632:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f634:	b350      	cbz	r0, f68c <bt_smp_update_keys+0x10c>
		conn->le.keys->flags |= BT_KEYS_SC;
    f636:	f042 0210 	orr.w	r2, r2, #16
    f63a:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f63c:	210c      	movs	r1, #12
    f63e:	4630      	mov	r0, r6
    f640:	f013 fe09 	bl	23256 <atomic_test_bit>
    f644:	b328      	cbz	r0, f692 <bt_smp_update_keys+0x112>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    f646:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f64a:	2120      	movs	r1, #32
    f64c:	f014 f88f 	bl	2376e <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
    f650:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f654:	f105 01ff 	add.w	r1, r5, #255	; 0xff
    f658:	2210      	movs	r2, #16
    f65a:	301a      	adds	r0, #26
    f65c:	f012 f823 	bl	216a6 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
    f660:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f664:	2208      	movs	r2, #8
    f666:	2100      	movs	r1, #0
    f668:	3010      	adds	r0, #16
    f66a:	f012 f847 	bl	216fc <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
    f66e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f672:	2202      	movs	r2, #2
}
    f674:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
    f678:	2100      	movs	r1, #0
    f67a:	3018      	adds	r0, #24
    f67c:	f012 b83e 	b.w	216fc <memset>
	switch (smp->method) {
    f680:	3a05      	subs	r2, #5
    f682:	2a01      	cmp	r2, #1
    f684:	d9c4      	bls.n	f610 <bt_smp_update_keys+0x90>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    f686:	f023 0301 	bic.w	r3, r3, #1
    f68a:	e7c3      	b.n	f614 <bt_smp_update_keys+0x94>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    f68c:	f022 0210 	bic.w	r2, r2, #16
    f690:	735a      	strb	r2, [r3, #13]
}
    f692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f694:	00024c24 	.word	0x00024c24
    f698:	00024d0c 	.word	0x00024d0c
    f69c:	0002865b 	.word	0x0002865b

0000f6a0 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    f6a0:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    f6a2:	4b07      	ldr	r3, [pc, #28]	; (f6c0 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    f6a4:	4807      	ldr	r0, [pc, #28]	; (f6c4 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    f6a6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
    f6aa:	f003 0306 	and.w	r3, r3, #6
    f6ae:	1f9a      	subs	r2, r3, #6
    f6b0:	4253      	negs	r3, r2
    f6b2:	4153      	adcs	r3, r2
    f6b4:	4a04      	ldr	r2, [pc, #16]	; (f6c8 <bt_smp_init+0x28>)
    f6b6:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    f6b8:	f7fb f88e 	bl	a7d8 <bt_pub_key_gen>
	}

	return smp_self_test();
}
    f6bc:	2000      	movs	r0, #0
    f6be:	bd08      	pop	{r3, pc}
    f6c0:	20000000 	.word	0x20000000
    f6c4:	2000031c 	.word	0x2000031c
    f6c8:	2000683d 	.word	0x2000683d

0000f6cc <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
    f6cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    f6ce:	4c11      	ldr	r4, [pc, #68]	; (f714 <bt_keys_get_addr+0x48>)
    f6d0:	7823      	ldrb	r3, [r4, #0]
    f6d2:	4283      	cmp	r3, r0
{
    f6d4:	4605      	mov	r5, r0
    f6d6:	460e      	mov	r6, r1
    f6d8:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    f6da:	d00b      	beq.n	f6f4 <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    f6dc:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    f6de:	480e      	ldr	r0, [pc, #56]	; (f718 <bt_keys_get_addr+0x4c>)
    f6e0:	9400      	str	r4, [sp, #0]
    f6e2:	2207      	movs	r2, #7
    f6e4:	4669      	mov	r1, sp
    f6e6:	f8cd 4003 	str.w	r4, [sp, #3]
    f6ea:	f011 ffcc 	bl	21686 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    f6ee:	b140      	cbz	r0, f702 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    f6f0:	4620      	mov	r0, r4
    f6f2:	e00d      	b.n	f710 <bt_keys_get_addr+0x44>
    f6f4:	2207      	movs	r2, #7
    f6f6:	1c60      	adds	r0, r4, #1
    f6f8:	f011 ffc5 	bl	21686 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    f6fc:	2800      	cmp	r0, #0
    f6fe:	d1ed      	bne.n	f6dc <bt_keys_get_addr+0x10>
    f700:	e7f6      	b.n	f6f0 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
    f702:	4805      	ldr	r0, [pc, #20]	; (f718 <bt_keys_get_addr+0x4c>)
		keys->id = id;
    f704:	703d      	strb	r5, [r7, #0]
    f706:	2207      	movs	r2, #7
    f708:	4631      	mov	r1, r6
    f70a:	f011 ffcc 	bl	216a6 <memcpy>
		return keys;
    f70e:	4801      	ldr	r0, [pc, #4]	; (f714 <bt_keys_get_addr+0x48>)
}
    f710:	b003      	add	sp, #12
    f712:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f714:	20002a74 	.word	0x20002a74
    f718:	20002a75 	.word	0x20002a75

0000f71c <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    f71c:	460b      	mov	r3, r1
    f71e:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    f720:	4a04      	ldr	r2, [pc, #16]	; (f734 <bt_keys_foreach+0x18>)
{
    f722:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    f724:	89d4      	ldrh	r4, [r2, #14]
    f726:	4204      	tst	r4, r0
    f728:	d002      	beq.n	f730 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
    f72a:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    f72c:	4610      	mov	r0, r2
    f72e:	4718      	bx	r3
}
    f730:	bc10      	pop	{r4}
    f732:	4770      	bx	lr
    f734:	20002a74 	.word	0x20002a74

0000f738 <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
    f738:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    f73a:	4c09      	ldr	r4, [pc, #36]	; (f760 <bt_keys_find+0x28>)
{
    f73c:	460b      	mov	r3, r1
    f73e:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    f740:	89e2      	ldrh	r2, [r4, #14]
    f742:	4202      	tst	r2, r0
    f744:	d007      	beq.n	f756 <bt_keys_find+0x1e>
    f746:	7822      	ldrb	r2, [r4, #0]
    f748:	429a      	cmp	r2, r3
    f74a:	d104      	bne.n	f756 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    f74c:	2207      	movs	r2, #7
    f74e:	1c60      	adds	r0, r4, #1
    f750:	f011 ff99 	bl	21686 <memcmp>
    f754:	b108      	cbz	r0, f75a <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    f756:	2000      	movs	r0, #0
}
    f758:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    f75a:	4620      	mov	r0, r4
    f75c:	e7fc      	b.n	f758 <bt_keys_find+0x20>
    f75e:	bf00      	nop
    f760:	20002a74 	.word	0x20002a74

0000f764 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
    f764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    f766:	780b      	ldrb	r3, [r1, #0]
    f768:	2b01      	cmp	r3, #1
    f76a:	4607      	mov	r7, r0
    f76c:	460c      	mov	r4, r1
    f76e:	d001      	beq.n	f774 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
    f770:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
    f772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    f774:	798b      	ldrb	r3, [r1, #6]
    f776:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f77a:	2b40      	cmp	r3, #64	; 0x40
    f77c:	d1f8      	bne.n	f770 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    f77e:	4d13      	ldr	r5, [pc, #76]	; (f7cc <bt_keys_find_irk+0x68>)
    f780:	89eb      	ldrh	r3, [r5, #14]
    f782:	f013 0f02 	tst.w	r3, #2
    f786:	462e      	mov	r6, r5
    f788:	d0f2      	beq.n	f770 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    f78a:	7833      	ldrb	r3, [r6, #0]
    f78c:	42bb      	cmp	r3, r7
    f78e:	d10b      	bne.n	f7a8 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
    f790:	2206      	movs	r2, #6
    f792:	f106 013a 	add.w	r1, r6, #58	; 0x3a
    f796:	1c60      	adds	r0, r4, #1
    f798:	f011 ff75 	bl	21686 <memcmp>
    f79c:	b908      	cbnz	r0, f7a2 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
    f79e:	4628      	mov	r0, r5
    f7a0:	e7e7      	b.n	f772 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    f7a2:	89f3      	ldrh	r3, [r6, #14]
    f7a4:	079b      	lsls	r3, r3, #30
    f7a6:	d5e3      	bpl.n	f770 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    f7a8:	7833      	ldrb	r3, [r6, #0]
    f7aa:	42bb      	cmp	r3, r7
    f7ac:	d1e0      	bne.n	f770 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    f7ae:	3401      	adds	r4, #1
    f7b0:	4807      	ldr	r0, [pc, #28]	; (f7d0 <bt_keys_find_irk+0x6c>)
    f7b2:	4621      	mov	r1, r4
    f7b4:	f011 fff4 	bl	217a0 <bt_rpa_irk_matches>
    f7b8:	2800      	cmp	r0, #0
    f7ba:	d0d9      	beq.n	f770 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    f7bc:	4805      	ldr	r0, [pc, #20]	; (f7d4 <bt_keys_find_irk+0x70>)
    f7be:	2206      	movs	r2, #6
    f7c0:	4621      	mov	r1, r4
    f7c2:	f011 ff70 	bl	216a6 <memcpy>
			return &key_pool[i];
    f7c6:	4801      	ldr	r0, [pc, #4]	; (f7cc <bt_keys_find_irk+0x68>)
}
    f7c8:	e7d3      	b.n	f772 <bt_keys_find_irk+0xe>
    f7ca:	bf00      	nop
    f7cc:	20002a74 	.word	0x20002a74
    f7d0:	20002a9e 	.word	0x20002a9e
    f7d4:	20002aae 	.word	0x20002aae

0000f7d8 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
    f7d8:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
    f7da:	4c06      	ldr	r4, [pc, #24]	; (f7f4 <bt_keys_find_addr+0x1c>)
    f7dc:	7823      	ldrb	r3, [r4, #0]
    f7de:	4283      	cmp	r3, r0
    f7e0:	d104      	bne.n	f7ec <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    f7e2:	2207      	movs	r2, #7
    f7e4:	1c60      	adds	r0, r4, #1
    f7e6:	f011 ff4e 	bl	21686 <memcmp>
    f7ea:	b108      	cbz	r0, f7f0 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    f7ec:	2000      	movs	r0, #0
}
    f7ee:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    f7f0:	4620      	mov	r0, r4
    f7f2:	e7fc      	b.n	f7ee <bt_keys_find_addr+0x16>
    f7f4:	20002a74 	.word	0x20002a74

0000f7f8 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    f7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7fc:	4614      	mov	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    f7fe:	1dc2      	adds	r2, r0, #7
    f800:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    f804:	1e67      	subs	r7, r4, #1
    f806:	b2bf      	uxth	r7, r7
	*mem_head = mem_pool;
    f808:	6018      	str	r0, [r3, #0]
{
    f80a:	b082      	sub	sp, #8
    f80c:	4605      	mov	r5, r0
    f80e:	460e      	mov	r6, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    f810:	fb01 0007 	mla	r0, r1, r7, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    f814:	8014      	strh	r4, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    f816:	2100      	movs	r1, #0
    f818:	2204      	movs	r2, #4
    f81a:	f011 ff6f 	bl	216fc <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    f81e:	b1b7      	cbz	r7, f84e <mem_init+0x56>
    f820:	3c02      	subs	r4, #2
    f822:	b2a4      	uxth	r4, r4
    f824:	fb04 6306 	mla	r3, r4, r6, r6
    f828:	fb04 f706 	mul.w	r7, r4, r6
    f82c:	441d      	add	r5, r3
    f82e:	1aff      	subs	r7, r7, r3
    f830:	f64f 78ff 	movw	r8, #65535	; 0xffff
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    f834:	2204      	movs	r2, #4
	while (mem_count--) {
    f836:	3c01      	subs	r4, #1
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    f838:	19e8      	adds	r0, r5, r7
    f83a:	eb0d 0102 	add.w	r1, sp, r2
	while (mem_count--) {
    f83e:	b2a4      	uxth	r4, r4
		next = (uint32_t)((uint8_t *) mem_pool +
    f840:	9501      	str	r5, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    f842:	f011 ff30 	bl	216a6 <memcpy>
	while (mem_count--) {
    f846:	4544      	cmp	r4, r8
    f848:	eba5 0506 	sub.w	r5, r5, r6
    f84c:	d1f2      	bne.n	f834 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    f84e:	b002      	add	sp, #8
    f850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f854 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    f854:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    f856:	6805      	ldr	r5, [r0, #0]
{
    f858:	b082      	sub	sp, #8
	if (*mem_head) {
    f85a:	b195      	cbz	r5, f882 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    f85c:	1deb      	adds	r3, r5, #7
    f85e:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    f862:	2204      	movs	r2, #4
    f864:	4604      	mov	r4, r0
    f866:	4629      	mov	r1, r5
    f868:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    f86c:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    f86e:	f011 ff1a 	bl	216a6 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    f872:	9b01      	ldr	r3, [sp, #4]
    f874:	b123      	cbz	r3, f880 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    f876:	1dda      	adds	r2, r3, #7
    f878:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    f87c:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    f87e:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    f880:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    f882:	4628      	mov	r0, r5
    f884:	b002      	add	sp, #8
    f886:	bd70      	pop	{r4, r5, r6, pc}

0000f888 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    f888:	680b      	ldr	r3, [r1, #0]
{
    f88a:	b570      	push	{r4, r5, r6, lr}
    f88c:	460c      	mov	r4, r1
    f88e:	4605      	mov	r5, r0
	if (*mem_head) {
    f890:	b183      	cbz	r3, f8b4 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    f892:	3307      	adds	r3, #7
    f894:	f023 0303 	bic.w	r3, r3, #3
    f898:	881e      	ldrh	r6, [r3, #0]
    f89a:	3601      	adds	r6, #1
    f89c:	b2b6      	uxth	r6, r6
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    f89e:	2204      	movs	r2, #4
    f8a0:	4621      	mov	r1, r4
    f8a2:	4628      	mov	r0, r5
    f8a4:	f011 feff 	bl	216a6 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    f8a8:	1deb      	adds	r3, r5, #7
    f8aa:	f023 0303 	bic.w	r3, r3, #3
    f8ae:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    f8b0:	6025      	str	r5, [r4, #0]
}
    f8b2:	bd70      	pop	{r4, r5, r6, pc}
    f8b4:	2601      	movs	r6, #1
    f8b6:	e7f2      	b.n	f89e <mem_release+0x16>

0000f8b8 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    f8b8:	fb02 0001 	mla	r0, r2, r1, r0
    f8bc:	4770      	bx	lr
    f8be:	bf00      	nop

0000f8c0 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    f8c0:	1a40      	subs	r0, r0, r1
    f8c2:	b280      	uxth	r0, r0
}
    f8c4:	fbb0 f0f2 	udiv	r0, r0, r2
    f8c8:	4770      	bx	lr
    f8ca:	bf00      	nop

0000f8cc <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    f8cc:	1e53      	subs	r3, r2, #1
	src += len;
    f8ce:	4411      	add	r1, r2
	while (len--) {
    f8d0:	b29b      	uxth	r3, r3
    f8d2:	b142      	cbz	r2, f8e6 <mem_rcopy+0x1a>
    f8d4:	43db      	mvns	r3, r3
    f8d6:	18ca      	adds	r2, r1, r3
    f8d8:	3801      	subs	r0, #1
		*dst++ = *--src;
    f8da:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    f8de:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    f8e2:	4291      	cmp	r1, r2
    f8e4:	d1f9      	bne.n	f8da <mem_rcopy+0xe>
	}
}
    f8e6:	4770      	bx	lr

0000f8e8 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    f8e8:	4401      	add	r1, r0
    f8ea:	e002      	b.n	f8f2 <mem_nz+0xa>
		if (*src++) {
    f8ec:	f810 3b01 	ldrb.w	r3, [r0], #1
    f8f0:	b91b      	cbnz	r3, f8fa <mem_nz+0x12>
	while (len--) {
    f8f2:	4288      	cmp	r0, r1
    f8f4:	d1fa      	bne.n	f8ec <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    f8f6:	2000      	movs	r0, #0
    f8f8:	4770      	bx	lr
			return 1;
    f8fa:	2001      	movs	r0, #1
}
    f8fc:	4770      	bx	lr
    f8fe:	bf00      	nop

0000f900 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    f900:	6010      	str	r0, [r2, #0]
    f902:	6008      	str	r0, [r1, #0]

	return link;
}
    f904:	4770      	bx	lr
    f906:	bf00      	nop

0000f908 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    f908:	680a      	ldr	r2, [r1, #0]
{
    f90a:	4603      	mov	r3, r0
	if (*head != *tail) {
    f90c:	6800      	ldr	r0, [r0, #0]
    f90e:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    f910:	bf05      	ittet	eq
    f912:	2200      	moveq	r2, #0
    f914:	600a      	streq	r2, [r1, #0]
		return NULL;
    f916:	2000      	movne	r0, #0
	*head = *tail = NULL;
    f918:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    f91a:	4770      	bx	lr

0000f91c <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    f91c:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    f91e:	6814      	ldr	r4, [r2, #0]
    f920:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    f922:	6814      	ldr	r4, [r2, #0]
    f924:	6061      	str	r1, [r4, #4]
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;

	return link;
}
    f926:	bc10      	pop	{r4}
	*tail = link;
    f928:	6010      	str	r0, [r2, #0]
}
    f92a:	4770      	bx	lr

0000f92c <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    f92c:	4288      	cmp	r0, r1
    f92e:	d003      	beq.n	f938 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    f930:	b11a      	cbz	r2, f93a <memq_peek+0xe>
		*mem = head->mem;
    f932:	6843      	ldr	r3, [r0, #4]
    f934:	6013      	str	r3, [r2, #0]
    f936:	4770      	bx	lr
		return NULL;
    f938:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    f93a:	4770      	bx	lr

0000f93c <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    f93c:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    f93e:	4283      	cmp	r3, r0
    f940:	d009      	beq.n	f956 <memq_dequeue+0x1a>
	if (mem) {
    f942:	b12a      	cbz	r2, f950 <memq_dequeue+0x14>
		*mem = head->mem;
    f944:	6858      	ldr	r0, [r3, #4]
    f946:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    f948:	681a      	ldr	r2, [r3, #0]
    f94a:	600a      	str	r2, [r1, #0]

	return old_head;
}
    f94c:	4618      	mov	r0, r3
    f94e:	4770      	bx	lr
	if (old_head == NULL) {
    f950:	2b00      	cmp	r3, #0
    f952:	d1f9      	bne.n	f948 <memq_dequeue+0xc>
    f954:	e7fa      	b.n	f94c <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    f956:	2300      	movs	r3, #0
    f958:	e7f8      	b.n	f94c <memq_dequeue+0x10>
    f95a:	bf00      	nop

0000f95c <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    f95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f960:	f8df 8034 	ldr.w	r8, [pc, #52]	; f998 <mayfly_init+0x3c>
    f964:	4e0b      	ldr	r6, [pc, #44]	; (f994 <mayfly_init+0x38>)
    f966:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    f968:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    f96c:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    f96e:	1d22      	adds	r2, r4, #4
    f970:	4621      	mov	r1, r4
    f972:	4628      	mov	r0, r5
    f974:	3c0c      	subs	r4, #12
    f976:	f7ff ffc3 	bl	f900 <memq_init>
		while (caller_id--) {
    f97a:	42b4      	cmp	r4, r6
    f97c:	f1a5 0508 	sub.w	r5, r5, #8
    f980:	d1f5      	bne.n	f96e <mayfly_init+0x12>
	while (callee_id--) {
    f982:	3f04      	subs	r7, #4
    f984:	1d3b      	adds	r3, r7, #4
    f986:	f1a8 0820 	sub.w	r8, r8, #32
    f98a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    f98e:	d1eb      	bne.n	f968 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    f990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f994:	20002bd8 	.word	0x20002bd8
    f998:	20002b48 	.word	0x20002b48

0000f99c <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    f99c:	b430      	push	{r4, r5}
    f99e:	4603      	mov	r3, r0
    f9a0:	460c      	mov	r4, r1
	if (enable) {
    f9a2:	b19a      	cbz	r2, f9cc <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    f9a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    f9a8:	0108      	lsls	r0, r1, #4
    f9aa:	4d14      	ldr	r5, [pc, #80]	; (f9fc <mayfly_enable+0x60>)
    f9ac:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    f9b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    f9b4:	4429      	add	r1, r5
    f9b6:	7a48      	ldrb	r0, [r1, #9]
    f9b8:	7a0d      	ldrb	r5, [r1, #8]
    f9ba:	42a8      	cmp	r0, r5
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    f9bc:	bf04      	itt	eq
    f9be:	3001      	addeq	r0, #1
    f9c0:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    f9c2:	4621      	mov	r1, r4
    f9c4:	4618      	mov	r0, r3

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    f9c6:	bc30      	pop	{r4, r5}
		mayfly_enable_cb(caller_id, callee_id, enable);
    f9c8:	f00b bb22 	b.w	1b010 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    f9cc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    f9d0:	4d0a      	ldr	r5, [pc, #40]	; (f9fc <mayfly_enable+0x60>)
    f9d2:	0112      	lsls	r2, r2, #4
    f9d4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    f9d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    f9dc:	442b      	add	r3, r5
    f9de:	7a9d      	ldrb	r5, [r3, #10]
    f9e0:	7ada      	ldrb	r2, [r3, #11]
    f9e2:	42aa      	cmp	r2, r5
    f9e4:	d001      	beq.n	f9ea <mayfly_enable+0x4e>
}
    f9e6:	bc30      	pop	{r4, r5}
    f9e8:	4770      	bx	lr
			mfp[callee_id] = 1U;
    f9ea:	4d05      	ldr	r5, [pc, #20]	; (fa00 <mayfly_enable+0x64>)
			mft[callee_id][caller_id].disable_req++;
    f9ec:	3201      	adds	r2, #1
    f9ee:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    f9f0:	2301      	movs	r3, #1
    f9f2:	546b      	strb	r3, [r5, r1]
}
    f9f4:	bc30      	pop	{r4, r5}
			mayfly_pend(caller_id, callee_id);
    f9f6:	f00b bb69 	b.w	1b0cc <mayfly_pend>
    f9fa:	bf00      	nop
    f9fc:	20002b54 	.word	0x20002b54
    fa00:	20002b50 	.word	0x20002b50

0000fa04 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    fa04:	b570      	push	{r4, r5, r6, lr}
    fa06:	461c      	mov	r4, r3
    fa08:	4606      	mov	r6, r0
    fa0a:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    fa0c:	b322      	cbz	r2, fa58 <mayfly_enqueue+0x54>
    fa0e:	7863      	ldrb	r3, [r4, #1]

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    fa10:	7822      	ldrb	r2, [r4, #0]
    fa12:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    fa14:	f012 0203 	ands.w	r2, r2, #3
    fa18:	d005      	beq.n	fa26 <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
    fa1a:	2a01      	cmp	r2, #1
    fa1c:	d040      	beq.n	faa0 <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
    fa1e:	3301      	adds	r3, #1
    fa20:	b2db      	uxtb	r3, r3
    fa22:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    fa24:	e00f      	b.n	fa46 <mayfly_enqueue+0x42>
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    fa26:	2230      	movs	r2, #48	; 0x30
    fa28:	2104      	movs	r1, #4
    fa2a:	fb12 1105 	smlabb	r1, r2, r5, r1
    fa2e:	220c      	movs	r2, #12
    fa30:	fb12 1206 	smlabb	r2, r2, r6, r1
	m->_req = ack + 1;
    fa34:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    fa36:	491b      	ldr	r1, [pc, #108]	; (faa4 <mayfly_enqueue+0xa0>)
    fa38:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
    fa3a:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    fa3c:	440a      	add	r2, r1
	m->_req = ack + 1;
    fa3e:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    fa40:	4621      	mov	r1, r4
    fa42:	f7ff ff6b 	bl	f91c <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    fa46:	4b18      	ldr	r3, [pc, #96]	; (faa8 <mayfly_enqueue+0xa4>)

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    fa48:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    fa4a:	2201      	movs	r2, #1
	mayfly_pend(caller_id, callee_id);
    fa4c:	4629      	mov	r1, r5
	mfp[callee_id] = 1U;
    fa4e:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    fa50:	f00b fb3c 	bl	1b0cc <mayfly_pend>

	return 0;
    fa54:	2000      	movs	r0, #0
}
    fa56:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    fa58:	f00b fb1a 	bl	1b090 <mayfly_prio_is_equal>
    fa5c:	2800      	cmp	r0, #0
    fa5e:	d0d6      	beq.n	fa0e <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    fa60:	4629      	mov	r1, r5
    fa62:	4630      	mov	r0, r6
    fa64:	f00b faf4 	bl	1b050 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    fa68:	2800      	cmp	r0, #0
    fa6a:	d0d0      	beq.n	fa0e <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    fa6c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    fa70:	0111      	lsls	r1, r2, #4
    fa72:	480c      	ldr	r0, [pc, #48]	; (faa4 <mayfly_enqueue+0xa0>)
    fa74:	7863      	ldrb	r3, [r4, #1]
    fa76:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    fa7a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    fa7e:	4402      	add	r2, r0
		!mayfly_is_enabled(caller_id, callee_id) ||
    fa80:	7a91      	ldrb	r1, [r2, #10]
    fa82:	7ad2      	ldrb	r2, [r2, #11]
    fa84:	4291      	cmp	r1, r2
    fa86:	d1c3      	bne.n	fa10 <mayfly_enqueue+0xc>
	state = (m->_req - ack) & 0x03;
    fa88:	7822      	ldrb	r2, [r4, #0]
    fa8a:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    fa8c:	0792      	lsls	r2, r2, #30
    fa8e:	d002      	beq.n	fa96 <mayfly_enqueue+0x92>
		m->_req = ack + 2;
    fa90:	3302      	adds	r3, #2
    fa92:	b2db      	uxtb	r3, r3
    fa94:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    fa96:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    fa9a:	4798      	blx	r3
		return 0;
    fa9c:	2000      	movs	r0, #0
}
    fa9e:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    faa0:	4610      	mov	r0, r2
}
    faa2:	bd70      	pop	{r4, r5, r6, pc}
    faa4:	20002b54 	.word	0x20002b54
    faa8:	20002b50 	.word	0x20002b50

0000faac <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    faac:	494e      	ldr	r1, [pc, #312]	; (fbe8 <mayfly_run+0x13c>)
    faae:	5c0b      	ldrb	r3, [r1, r0]
    fab0:	2b00      	cmp	r3, #0
    fab2:	f000 8098 	beq.w	fbe6 <mayfly_run+0x13a>
{
    fab6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    faba:	4b4c      	ldr	r3, [pc, #304]	; (fbec <mayfly_run+0x140>)
    fabc:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
{
    fac0:	b087      	sub	sp, #28
		return;
	}
	mfp[callee_id] = 0U;
    fac2:	2200      	movs	r2, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    fac4:	fb0b 3b00 	mla	fp, fp, r0, r3
	mfp[callee_id] = 0U;
    fac8:	540a      	strb	r2, [r1, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    faca:	eb00 0740 	add.w	r7, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    face:	f10b 0104 	add.w	r1, fp, #4
	uint8_t enable = 0U;
    fad2:	9203      	str	r2, [sp, #12]
    fad4:	eb03 1707 	add.w	r7, r3, r7, lsl #4
	uint8_t disable = 0U;
    fad8:	9201      	str	r2, [sp, #4]
	while (caller_id--) {
    fada:	f04f 0903 	mov.w	r9, #3
    fade:	4688      	mov	r8, r1
    fae0:	9002      	str	r0, [sp, #8]
		memq_link_t *link;
		struct mayfly *m = 0;
    fae2:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    fae4:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    fae8:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    faea:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    faec:	f7ff ff1e 	bl	f92c <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    faf0:	f107 0624 	add.w	r6, r7, #36	; 0x24
    faf4:	4683      	mov	fp, r0
    faf6:	2800      	cmp	r0, #0
    faf8:	d034      	beq.n	fb64 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    fafa:	9c05      	ldr	r4, [sp, #20]
    fafc:	7825      	ldrb	r5, [r4, #0]
    fafe:	7863      	ldrb	r3, [r4, #1]
    fb00:	1aed      	subs	r5, r5, r3
    fb02:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    fb06:	2d01      	cmp	r5, #1
    fb08:	d106      	bne.n	fb18 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    fb0a:	3b01      	subs	r3, #1
    fb0c:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    fb0e:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    fb12:	4798      	blx	r3
    fb14:	9c05      	ldr	r4, [sp, #20]
    fb16:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    fb18:	f894 c000 	ldrb.w	ip, [r4]
    fb1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
    fb1e:	ebac 0303 	sub.w	r3, ip, r3
    fb22:	f003 0303 	and.w	r3, r3, #3
    fb26:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    fb28:	f04f 0200 	mov.w	r2, #0
    fb2c:	4631      	mov	r1, r6
	req = m->_req;
    fb2e:	fa5f fa8c 	uxtb.w	sl, ip
	if (((req - m->_ack) & 0x03) != 1U) {
    fb32:	d00d      	beq.n	fb50 <mayfly_run+0xa4>
		memq_dequeue(mft[callee_id][caller_id].tail,
    fb34:	f7ff ff02 	bl	f93c <memq_dequeue>
		ack = m->_ack;
    fb38:	7862      	ldrb	r2, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    fb3a:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    fb3c:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    fb40:	1a9b      	subs	r3, r3, r2
    fb42:	f003 0303 	and.w	r3, r3, #3
    fb46:	2b01      	cmp	r3, #1
		m->_ack = req;
    fb48:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    fb4c:	d044      	beq.n	fbd8 <mayfly_run+0x12c>
    fb4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    fb50:	4601      	mov	r1, r0
    fb52:	aa05      	add	r2, sp, #20
    fb54:	6a78      	ldr	r0, [r7, #36]	; 0x24
    fb56:	f7ff fee9 	bl	f92c <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    fb5a:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    fb5c:	4683      	mov	fp, r0
			if (state == 1U) {
    fb5e:	d029      	beq.n	fbb4 <mayfly_run+0x108>
		while (link) {
    fb60:	2800      	cmp	r0, #0
    fb62:	d1ca      	bne.n	fafa <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    fb64:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    fb68:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    fb6c:	429a      	cmp	r2, r3
    fb6e:	d003      	beq.n	fb78 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    fb70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    fb74:	2301      	movs	r3, #1
    fb76:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    fb78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    fb7c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    fb80:	429a      	cmp	r2, r3
    fb82:	d003      	beq.n	fb8c <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    fb84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    fb88:	2301      	movs	r3, #1
    fb8a:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    fb8c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    fb90:	fa5f f989 	uxtb.w	r9, r9
    fb94:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    fb98:	f1a7 070c 	sub.w	r7, r7, #12
    fb9c:	d1a1      	bne.n	fae2 <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    fb9e:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    fba2:	b1b3      	cbz	r3, fbd2 <mayfly_run+0x126>
    fba4:	9b03      	ldr	r3, [sp, #12]
    fba6:	b9a3      	cbnz	r3, fbd2 <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
    fba8:	461a      	mov	r2, r3
    fbaa:	4651      	mov	r1, sl
    fbac:	4650      	mov	r0, sl
    fbae:	f00b fa2f 	bl	1b010 <mayfly_enable_cb>
    fbb2:	e00e      	b.n	fbd2 <mayfly_run+0x126>
				if (caller_id || link) {
    fbb4:	f1b9 0f00 	cmp.w	r9, #0
    fbb8:	d101      	bne.n	fbbe <mayfly_run+0x112>
    fbba:	2800      	cmp	r0, #0
    fbbc:	d0d2      	beq.n	fb64 <mayfly_run+0xb8>
    fbbe:	f8dd a008 	ldr.w	sl, [sp, #8]
					mfp[callee_id] = 1U;
    fbc2:	4a09      	ldr	r2, [pc, #36]	; (fbe8 <mayfly_run+0x13c>)
    fbc4:	2301      	movs	r3, #1
					mayfly_pend(callee_id, callee_id);
    fbc6:	4651      	mov	r1, sl
    fbc8:	4650      	mov	r0, sl
					mfp[callee_id] = 1U;
    fbca:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    fbce:	f00b fa7d 	bl	1b0cc <mayfly_pend>
	}
}
    fbd2:	b007      	add	sp, #28
    fbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
    fbd8:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    fbda:	4621      	mov	r1, r4
    fbdc:	4658      	mov	r0, fp
    fbde:	4642      	mov	r2, r8
    fbe0:	f7ff fe9c 	bl	f91c <memq_enqueue>
    fbe4:	e7b3      	b.n	fb4e <mayfly_run+0xa2>
    fbe6:	4770      	bx	lr
    fbe8:	20002b50 	.word	0x20002b50
    fbec:	20002b54 	.word	0x20002b54

0000fbf0 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    fbf0:	b1a1      	cbz	r1, fc1c <util_ones_count_get+0x2c>
    fbf2:	1e4b      	subs	r3, r1, #1
    fbf4:	b2db      	uxtb	r3, r3
{
    fbf6:	b410      	push	{r4}
    fbf8:	1e41      	subs	r1, r0, #1
    fbfa:	18c4      	adds	r4, r0, r3
	uint8_t one_count = 0U;
    fbfc:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    fbfe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    fc02:	b13b      	cbz	r3, fc14 <util_ones_count_get+0x24>
			bite &= (bite - 1);
    fc04:	b25b      	sxtb	r3, r3
    fc06:	1e5a      	subs	r2, r3, #1
    fc08:	4013      	ands	r3, r2
			one_count++;
    fc0a:	3001      	adds	r0, #1
		while (bite) {
    fc0c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    fc10:	b2c0      	uxtb	r0, r0
		while (bite) {
    fc12:	d1f7      	bne.n	fc04 <util_ones_count_get+0x14>
	while (octets_len--) {
    fc14:	42a1      	cmp	r1, r4
    fc16:	d1f2      	bne.n	fbfe <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
    fc18:	bc10      	pop	{r4}
    fc1a:	4770      	bx	lr
	uint8_t one_count = 0U;
    fc1c:	4608      	mov	r0, r1
}
    fc1e:	4770      	bx	lr

0000fc20 <ticker_worker>:
 *
 * @param param Pointer to ticker instance
 *
 */
void ticker_worker(void *param)
{
    fc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1U;
	if (instance->job_guard) {
    fc24:	7f82      	ldrb	r2, [r0, #30]
{
    fc26:	b08d      	sub	sp, #52	; 0x34
	instance->worker_trigger = 1U;
    fc28:	2301      	movs	r3, #1
	if (instance->job_guard) {
    fc2a:	9204      	str	r2, [sp, #16]
	instance->worker_trigger = 1U;
    fc2c:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    fc2e:	2a00      	cmp	r2, #0
    fc30:	d15b      	bne.n	fcea <ticker_worker+0xca>
		return;
	}

	/* If no tickers queued (active), do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    fc32:	7f43      	ldrb	r3, [r0, #29]
    fc34:	2bff      	cmp	r3, #255	; 0xff
    fc36:	4681      	mov	r9, r0
    fc38:	d056      	beq.n	fce8 <ticker_worker+0xc8>
		instance->worker_trigger = 0U;
		return;
	}

	/* Get ticks elapsed since last job execution */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    fc3a:	f00a fc6b 	bl	1a514 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fc3e:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    fc42:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    fc46:	f899 601d 	ldrb.w	r6, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fc4a:	1a80      	subs	r0, r0, r2
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    fc4c:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fc4e:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    fc52:	f000 813b 	beq.w	fecc <ticker_worker+0x2ac>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    fc56:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    fc5a:	455b      	cmp	r3, fp
    fc5c:	bf94      	ite	ls
    fc5e:	2300      	movls	r3, #0
    fc60:	2301      	movhi	r3, #1
    fc62:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
    fc64:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
    fc66:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_expired = 0U;
    fc6a:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
    fc6e:	d046      	beq.n	fcfe <ticker_worker+0xde>
			must_expire_skip = 1U;
    fc70:	f8cd 9008 	str.w	r9, [sp, #8]
		ticker = &node[ticker_id_head];
    fc74:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    fc78:	eb07 1406 	add.w	r4, r7, r6, lsl #4
    fc7c:	0136      	lsls	r6, r6, #4
		ticks_to_expire = ticker->ticks_to_expire;
    fc7e:	68a2      	ldr	r2, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    fc80:	455a      	cmp	r2, fp
    fc82:	d83a      	bhi.n	fcfa <ticker_worker+0xda>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    fc84:	f894 a002 	ldrb.w	sl, [r4, #2]
    fc88:	7863      	ldrb	r3, [r4, #1]
		ticker_id_head = ticker->next;
    fc8a:	5dbe      	ldrb	r6, [r7, r6]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    fc8c:	eba3 030a 	sub.w	r3, r3, sl
    fc90:	b2db      	uxtb	r3, r3
    fc92:	2b01      	cmp	r3, #1
		ticks_elapsed -= ticks_to_expire;
    fc94:	ebab 0b02 	sub.w	fp, fp, r2
		ticks_expired += ticks_to_expire;
    fc98:	4490      	add	r8, r2
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    fc9a:	d12c      	bne.n	fcf6 <ticker_worker+0xd6>
		if (ticker->ticks_slot != 0U &&
    fc9c:	69a0      	ldr	r0, [r4, #24]
    fc9e:	2800      	cmp	r0, #0
    fca0:	d056      	beq.n	fd50 <ticker_worker+0x130>
    fca2:	9b01      	ldr	r3, [sp, #4]
    fca4:	2b00      	cmp	r3, #0
    fca6:	f000 808d 	beq.w	fdc4 <ticker_worker+0x1a4>
    fcaa:	8be3      	ldrh	r3, [r4, #30]
    fcac:	9303      	str	r3, [sp, #12]
			struct ticker_ext *ext_data = ticker->ext_data;
    fcae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    fcb0:	b13b      	cbz	r3, fcc2 <ticker_worker+0xa2>
    fcb2:	681a      	ldr	r2, [r3, #0]
    fcb4:	b11a      	cbz	r2, fcbe <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
    fcb6:	7a1a      	ldrb	r2, [r3, #8]
    fcb8:	2a00      	cmp	r2, #0
    fcba:	f000 80f4 	beq.w	fea6 <ticker_worker+0x286>
				ext_data->reschedule_state =
    fcbe:	2200      	movs	r2, #0
    fcc0:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
    fcc2:	9a03      	ldr	r2, [sp, #12]
			if ((ticker->must_expire == 0U) ||
    fcc4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    fcc8:	3201      	adds	r2, #1
    fcca:	b292      	uxth	r2, r2
    fccc:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    fcce:	b179      	cbz	r1, fcf0 <ticker_worker+0xd0>
    fcd0:	8ba1      	ldrh	r1, [r4, #28]
    fcd2:	4291      	cmp	r1, r2
    fcd4:	d20c      	bcs.n	fcf0 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    fcd6:	2b00      	cmp	r3, #0
    fcd8:	f000 80fb 	beq.w	fed2 <ticker_worker+0x2b2>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    fcdc:	7a1a      	ldrb	r2, [r3, #8]
    fcde:	2a01      	cmp	r2, #1
    fce0:	d006      	beq.n	fcf0 <ticker_worker+0xd0>
			must_expire_skip = 1U;
    fce2:	f04f 0c01 	mov.w	ip, #1
    fce6:	e037      	b.n	fd58 <ticker_worker+0x138>
		instance->worker_trigger = 0U;
    fce8:	77c2      	strb	r2, [r0, #31]
}
    fcea:	b00d      	add	sp, #52	; 0x34
    fcec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
    fcf0:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    fcf4:	70a3      	strb	r3, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    fcf6:	2eff      	cmp	r6, #255	; 0xff
    fcf8:	d1bc      	bne.n	fc74 <ticker_worker+0x54>
    fcfa:	f8dd 9008 	ldr.w	r9, [sp, #8]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    fcfe:	f899 300b 	ldrb.w	r3, [r9, #11]
    fd02:	f899 200a 	ldrb.w	r2, [r9, #10]
    fd06:	429a      	cmp	r2, r3
    fd08:	d10a      	bne.n	fd20 <ticker_worker+0x100>
	uint8_t idx = *ticks_elapsed_index + 1;
    fd0a:	3201      	adds	r2, #1
    fd0c:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    fd0e:	2a02      	cmp	r2, #2
    fd10:	bf1c      	itt	ne
    fd12:	4613      	movne	r3, r2
    fd14:	9304      	strne	r3, [sp, #16]
	*ticks_elapsed_index = idx;
    fd16:	9a04      	ldr	r2, [sp, #16]
    fd18:	f889 200b 	strb.w	r2, [r9, #11]
    fd1c:	bf08      	it	eq
    fd1e:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    fd20:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    fd24:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    fd28:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
    fd2c:	2200      	movs	r2, #0
    fd2e:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    fd32:	464b      	mov	r3, r9
    fd34:	2201      	movs	r2, #1
    fd36:	2104      	movs	r1, #4
    fd38:	2003      	movs	r0, #3
    fd3a:	46a4      	mov	ip, r4
}
    fd3c:	b00d      	add	sp, #52	; 0x34
    fd3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    fd42:	4760      	bx	ip
    fd44:	e9dd b809 	ldrd	fp, r8, [sp, #36]	; 0x24
    fd48:	f8dd a020 	ldr.w	sl, [sp, #32]
    fd4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    fd4e:	464c      	mov	r4, r9
		if (ticker->ext_data) {
    fd50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fd52:	b1db      	cbz	r3, fd8c <ticker_worker+0x16c>
    fd54:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
    fd58:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
    fd5a:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
    fd5c:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
    fd5e:	605a      	str	r2, [r3, #4]
		ticker->ack--;
    fd60:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    fd64:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    fd66:	2d00      	cmp	r5, #0
    fd68:	d0c5      	beq.n	fcf6 <ticker_worker+0xd6>
					   ticks_expired -
    fd6a:	9b02      	ldr	r3, [sp, #8]
    fd6c:	6962      	ldr	r2, [r4, #20]
    fd6e:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    fd70:	6a61      	ldr	r1, [r4, #36]	; 0x24
    fd72:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    fd74:	eba8 0202 	sub.w	r2, r8, r2
    fd78:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    fd7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    fd7e:	f1bc 0f00 	cmp.w	ip, #0
    fd82:	d013      	beq.n	fdac <ticker_worker+0x18c>
    fd84:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fd88:	47a8      	blx	r5
			if (must_expire_skip == 0U) {
    fd8a:	e7b4      	b.n	fcf6 <ticker_worker+0xd6>
		if (ticker->timeout_func) {
    fd8c:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    fd8e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    fd92:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    fd94:	2d00      	cmp	r5, #0
    fd96:	d0ae      	beq.n	fcf6 <ticker_worker+0xd6>
					   ticks_expired -
    fd98:	9b02      	ldr	r3, [sp, #8]
    fd9a:	6962      	ldr	r2, [r4, #20]
    fd9c:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    fd9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    fda0:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    fda2:	eba8 0202 	sub.w	r2, r8, r2
    fda6:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    fda8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    fdac:	8be2      	ldrh	r2, [r4, #30]
    fdae:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    fdb0:	69a2      	ldr	r2, [r4, #24]
				ticker->lazy_current = 0U;
    fdb2:	2300      	movs	r3, #0
					slot_reserved = 1U;
    fdb4:	429a      	cmp	r2, r3
    fdb6:	9a01      	ldr	r2, [sp, #4]
				ticker->lazy_current = 0U;
    fdb8:	83e3      	strh	r3, [r4, #30]
					slot_reserved = 1U;
    fdba:	bf18      	it	ne
    fdbc:	2201      	movne	r2, #1
    fdbe:	9201      	str	r2, [sp, #4]
				ticker->force = 0U;
    fdc0:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
    fdc2:	e798      	b.n	fcf6 <ticker_worker+0xd6>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    fdc4:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    fdc8:	9305      	str	r3, [sp, #20]
    fdca:	3380      	adds	r3, #128	; 0x80
    fdcc:	d0c0      	beq.n	fd50 <ticker_worker+0x130>
    fdce:	2eff      	cmp	r6, #255	; 0xff
    fdd0:	d0be      	beq.n	fd50 <ticker_worker+0x130>
		int32_t lazy_current = ticker->lazy_current;
    fdd2:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    fdd4:	8ba2      	ldrh	r2, [r4, #28]
		int32_t lazy_current = ticker->lazy_current;
    fdd6:	9303      	str	r3, [sp, #12]
		if (lazy_current >= ticker->lazy_periodic) {
    fdd8:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
    fdda:	bf28      	it	cs
    fddc:	1a9b      	subcs	r3, r3, r2
				(lazy_current - ticker->priority);
    fdde:	9905      	ldr	r1, [sp, #20]
		uint32_t current_age = ticker->ticks_periodic +
    fde0:	6862      	ldr	r2, [r4, #4]
		uint32_t acc_ticks_to_expire = 0U;
    fde2:	f8cd a020 	str.w	sl, [sp, #32]
				(lazy_current - ticker->priority);
    fde6:	1a59      	subs	r1, r3, r1
		uint32_t current_age = ticker->ticks_periodic +
    fde8:	fb03 2302 	mla	r3, r3, r2, r2
    fdec:	9306      	str	r3, [sp, #24]
		uint32_t acc_ticks_to_expire = 0U;
    fdee:	e9cd b809 	strd	fp, r8, [sp, #36]	; 0x24
				(lazy_current - ticker->priority);
    fdf2:	9107      	str	r1, [sp, #28]
		uint32_t current_age = ticker->ticks_periodic +
    fdf4:	4633      	mov	r3, r6
		uint32_t acc_ticks_to_expire = 0U;
    fdf6:	2500      	movs	r5, #0
    fdf8:	46a1      	mov	r9, r4
    fdfa:	960b      	str	r6, [sp, #44]	; 0x2c
    fdfc:	9200      	str	r2, [sp, #0]
    fdfe:	e02c      	b.n	fe5a <ticker_worker+0x23a>
				(ticker->ticks_periodic == 0U) ||
    fe00:	9c00      	ldr	r4, [sp, #0]
					  0U :
    fe02:	ebaa 0808 	sub.w	r8, sl, r8
				(ticker->ticks_periodic == 0U) ||
    fe06:	2c00      	cmp	r4, #0
    fe08:	d048      	beq.n	fe9c <ticker_worker+0x27c>
    fe0a:	9c06      	ldr	r4, [sp, #24]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    fe0c:	fb0a 880c 	mla	r8, sl, ip, r8
				(ticker->ticks_periodic == 0U) ||
    fe10:	4544      	cmp	r4, r8
    fe12:	bf8c      	ite	hi
    fe14:	f04f 0801 	movhi.w	r8, #1
    fe18:	f04f 0800 	movls.w	r8, #0
					(ticker->ticks_periodic != 0U) &&
    fe1c:	bf34      	ite	cc
    fe1e:	f04f 0a01 	movcc.w	sl, #1
    fe22:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
    fe26:	42b1      	cmp	r1, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
    fe28:	f892 b003 	ldrb.w	fp, [r2, #3]
    fe2c:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
    fe30:	d30f      	bcc.n	fe52 <ticker_worker+0x232>
    fe32:	4593      	cmp	fp, r2
    fe34:	d843      	bhi.n	febe <ticker_worker+0x29e>
			    (next_force ||
    fe36:	f11e 0f80 	cmn.w	lr, #128	; 0x80
    fe3a:	d040      	beq.n	febe <ticker_worker+0x29e>
			     next_is_critical ||
    fe3c:	9a07      	ldr	r2, [sp, #28]
				(lazy_next - ticker_next->priority) >
    fe3e:	ebac 0c0e 	sub.w	ip, ip, lr
			     next_is_critical ||
    fe42:	4594      	cmp	ip, r2
    fe44:	dd02      	ble.n	fe4c <ticker_worker+0x22c>
			     (next_has_priority && !current_is_older) ||
    fe46:	f1b8 0f00 	cmp.w	r8, #0
    fe4a:	d038      	beq.n	febe <ticker_worker+0x29e>
    fe4c:	9a05      	ldr	r2, [sp, #20]
    fe4e:	4572      	cmp	r2, lr
    fe50:	d032      	beq.n	feb8 <ticker_worker+0x298>
			id_head = ticker_next->next;
    fe52:	5cfb      	ldrb	r3, [r7, r3]
		while (id_head != TICKER_NULL) {
    fe54:	2bff      	cmp	r3, #255	; 0xff
    fe56:	f43f af75 	beq.w	fd44 <ticker_worker+0x124>
			struct ticker_node *ticker_next = &nodes[id_head];
    fe5a:	b21b      	sxth	r3, r3
    fe5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    fe60:	eb07 1203 	add.w	r2, r7, r3, lsl #4
    fe64:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    fe66:	f8d2 8008 	ldr.w	r8, [r2, #8]
    fe6a:	4445      	add	r5, r8
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    fe6c:	42a8      	cmp	r0, r5
    fe6e:	f4ff af69 	bcc.w	fd44 <ticker_worker+0x124>
			if (ticker_next->ticks_slot == 0U) {
    fe72:	6991      	ldr	r1, [r2, #24]
    fe74:	2900      	cmp	r1, #0
    fe76:	d0ec      	beq.n	fe52 <ticker_worker+0x232>
			int32_t lazy_next = ticker_next->lazy_current;
    fe78:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    fe7a:	8b96      	ldrh	r6, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    fe7c:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
    fe80:	f992 e02d 	ldrsb.w	lr, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    fe84:	42b1      	cmp	r1, r6
			int32_t lazy_next = ticker_next->lazy_current;
    fe86:	468c      	mov	ip, r1
				lazy_next -= ticker_next->lazy_periodic;
    fe88:	bf28      	it	cs
    fe8a:	eba1 0c06 	subcs.w	ip, r1, r6
					  0U :
    fe8e:	f1ba 0f00 	cmp.w	sl, #0
    fe92:	d1b5      	bne.n	fe00 <ticker_worker+0x1e0>
				(ticker->ticks_periodic == 0U) ||
    fe94:	9c00      	ldr	r4, [sp, #0]
					  0U :
    fe96:	46d0      	mov	r8, sl
				(ticker->ticks_periodic == 0U) ||
    fe98:	2c00      	cmp	r4, #0
    fe9a:	d1b6      	bne.n	fe0a <ticker_worker+0x1ea>
					(ticker->ticks_periodic != 0U) &&
    fe9c:	f8dd a000 	ldr.w	sl, [sp]
				(ticker->ticks_periodic == 0U) ||
    fea0:	f04f 0801 	mov.w	r8, #1
    fea4:	e7bf      	b.n	fe26 <ticker_worker+0x206>
			    TICKER_RESCHEDULE_STATE_NONE &&
    fea6:	8ba2      	ldrh	r2, [r4, #28]
    fea8:	9903      	ldr	r1, [sp, #12]
    feaa:	428a      	cmp	r2, r1
    feac:	f63f af07 	bhi.w	fcbe <ticker_worker+0x9e>
				ext_data->reschedule_state =
    feb0:	f04f 0201 	mov.w	r2, #1
    feb4:	721a      	strb	r2, [r3, #8]
    feb6:	e704      	b.n	fcc2 <ticker_worker+0xa2>
			     (equal_priority && next_is_older))) {
    feb8:	f1ba 0f00 	cmp.w	sl, #0
    febc:	d0c9      	beq.n	fe52 <ticker_worker+0x232>
    febe:	e9dd b809 	ldrd	fp, r8, [sp, #36]	; 0x24
    fec2:	f8dd a020 	ldr.w	sl, [sp, #32]
    fec6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    fec8:	464c      	mov	r4, r9
    feca:	e6f0      	b.n	fcae <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
    fecc:	9b04      	ldr	r3, [sp, #16]
    fece:	9301      	str	r3, [sp, #4]
    fed0:	e6c8      	b.n	fc64 <ticker_worker+0x44>
		if (ticker->timeout_func) {
    fed2:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    fed4:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    fed8:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    feda:	2d00      	cmp	r5, #0
    fedc:	f43f af0b 	beq.w	fcf6 <ticker_worker+0xd6>
					   ticks_expired -
    fee0:	9b02      	ldr	r3, [sp, #8]
    fee2:	6960      	ldr	r0, [r4, #20]
    fee4:	695a      	ldr	r2, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    fee6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    fee8:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    feea:	eba8 0000 	sub.w	r0, r8, r0
    feee:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    fef0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    fef4:	e746      	b.n	fd84 <ticker_worker+0x164>
    fef6:	bf00      	nop

0000fef8 <ticker_job>:
	if (instance->worker_trigger) {
    fef8:	7fc2      	ldrb	r2, [r0, #31]
    fefa:	2a00      	cmp	r2, #0
    fefc:	f040 8619 	bne.w	10b32 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb33>
{
    ff00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    ff04:	7a83      	ldrb	r3, [r0, #10]
    ff06:	7ac1      	ldrb	r1, [r0, #11]
{
    ff08:	b08f      	sub	sp, #60	; 0x3c
    ff0a:	4683      	mov	fp, r0
	ticks_previous = instance->ticks_current;
    ff0c:	6940      	ldr	r0, [r0, #20]
    ff0e:	9005      	str	r0, [sp, #20]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    ff10:	4299      	cmp	r1, r3
	instance->job_guard = 1U;
    ff12:	f04f 0001 	mov.w	r0, #1
    ff16:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    ff1a:	f000 8096 	beq.w	1004a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4b>
	uint8_t idx = *ticks_elapsed_index + 1;
    ff1e:	4403      	add	r3, r0
    ff20:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    ff22:	2b02      	cmp	r3, #2
		idx = 0U;
    ff24:	bf08      	it	eq
    ff26:	4613      	moveq	r3, r2
		ticks_elapsed =
    ff28:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
    ff2c:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    ff30:	68d3      	ldr	r3, [r2, #12]
		instance->ticks_current += ticks_elapsed;
    ff32:	9a05      	ldr	r2, [sp, #20]
		ticks_elapsed =
    ff34:	9302      	str	r3, [sp, #8]
		instance->ticks_current += ticks_elapsed;
    ff36:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    ff38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ff3c:	f8cb 3014 	str.w	r3, [fp, #20]
		flag_elapsed = 1U;
    ff40:	2301      	movs	r3, #1
    ff42:	930d      	str	r3, [sp, #52]	; 0x34
	count_user = instance->count_user;
    ff44:	f89b 3009 	ldrb.w	r3, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    ff48:	f89b 201d 	ldrb.w	r2, [fp, #29]
    ff4c:	9206      	str	r2, [sp, #24]
	node = &instance->nodes[0];
    ff4e:	f8db 2000 	ldr.w	r2, [fp]
	users = &instance->users[0];
    ff52:	f8db 1004 	ldr.w	r1, [fp, #4]
	count_user = instance->count_user;
    ff56:	9307      	str	r3, [sp, #28]
	node = &instance->nodes[0];
    ff58:	9204      	str	r2, [sp, #16]
	while (count_user--) {
    ff5a:	461a      	mov	r2, r3
    ff5c:	3b01      	subs	r3, #1
	users = &instance->users[0];
    ff5e:	910c      	str	r1, [sp, #48]	; 0x30
	while (count_user--) {
    ff60:	b2db      	uxtb	r3, r3
    ff62:	2a00      	cmp	r2, #0
    ff64:	f000 8321 	beq.w	105aa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5ab>
    ff68:	eb01 06c3 	add.w	r6, r1, r3, lsl #3
	pending = 0U;
    ff6c:	2300      	movs	r3, #0
    ff6e:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    ff70:	23ff      	movs	r3, #255	; 0xff
    ff72:	9301      	str	r3, [sp, #4]
    ff74:	4637      	mov	r7, r6
    ff76:	46d9      	mov	r9, fp
		user_ops = &user->user_op[0];
    ff78:	687b      	ldr	r3, [r7, #4]
    ff7a:	9307      	str	r3, [sp, #28]
		while (user->middle != user->last) {
    ff7c:	f897 c003 	ldrb.w	ip, [r7, #3]
    ff80:	78bb      	ldrb	r3, [r7, #2]
    ff82:	46ba      	mov	sl, r7
    ff84:	9907      	ldr	r1, [sp, #28]
					ticks_used = 0;
    ff86:	4698      	mov	r8, r3
			user_op = &user_ops[user->middle];
    ff88:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    ff8c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			middle = user->middle + 1;
    ff90:	1c58      	adds	r0, r3, #1
		while (user->middle != user->last) {
    ff92:	4563      	cmp	r3, ip
			user_op = &user_ops[user->middle];
    ff94:	eb01 0582 	add.w	r5, r1, r2, lsl #2
			middle = user->middle + 1;
    ff98:	b2c3      	uxtb	r3, r0
		while (user->middle != user->last) {
    ff9a:	f000 8182 	beq.w	102a2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2a3>
			if (middle == user->count_user_op) {
    ff9e:	f89a 0000 	ldrb.w	r0, [sl]
				middle = 0U;
    ffa2:	4298      	cmp	r0, r3
    ffa4:	bf08      	it	eq
    ffa6:	2300      	moveq	r3, #0
			user->middle = middle;
    ffa8:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    ffac:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
    ffb0:	2a04      	cmp	r2, #4
    ffb2:	f240 8174 	bls.w	1029e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x29f>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    ffb6:	2a07      	cmp	r2, #7
    ffb8:	f200 8086 	bhi.w	100c8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc9>
			ticker = &node[user_op->id];
    ffbc:	7869      	ldrb	r1, [r5, #1]
    ffbe:	9c04      	ldr	r4, [sp, #16]
    ffc0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    ffc4:	eb04 1400 	add.w	r4, r4, r0, lsl #4
    ffc8:	0100      	lsls	r0, r0, #4
			state = (ticker->req - ticker->ack) & 0xff;
    ffca:	78a7      	ldrb	r7, [r4, #2]
			ticker = &node[user_op->id];
    ffcc:	900a      	str	r0, [sp, #40]	; 0x28
			state = (ticker->req - ticker->ack) & 0xff;
    ffce:	7860      	ldrb	r0, [r4, #1]
    ffd0:	1bc0      	subs	r0, r0, r7
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    ffd2:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    ffd6:	d077      	beq.n	100c8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc9>
			    (state == 0U) ||
    ffd8:	2a05      	cmp	r2, #5
    ffda:	d065      	beq.n	100a8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa9>
			if (state == 1U) {
    ffdc:	2801      	cmp	r0, #1
    ffde:	d137      	bne.n	10050 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x51>
	previous = instance->ticker_id_head;
    ffe0:	f899 c01d 	ldrb.w	ip, [r9, #29]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    ffe4:	f8d9 6000 	ldr.w	r6, [r9]
	while (current != TICKER_NULL) {
    ffe8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    ffec:	d017      	beq.n	1001e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1f>
		ticker_current = &node[current];
    ffee:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		if (current == id) {
    fff2:	4561      	cmp	r1, ip
		ticker_current = &node[current];
    fff4:	eb06 1000 	add.w	r0, r6, r0, lsl #4
		if (current == id) {
    fff8:	f000 8090 	beq.w	1011c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11d>
	total = 0U;
    fffc:	2300      	movs	r3, #0
    fffe:	e001      	b.n	10004 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5>
		if (current == id) {
   10000:	4561      	cmp	r1, ip
   10002:	d070      	beq.n	100e6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe7>
		total += ticker_current->ticks_to_expire;
   10004:	46e6      	mov	lr, ip
		current = ticker_current->next;
   10006:	f890 c000 	ldrb.w	ip, [r0]
		total += ticker_current->ticks_to_expire;
   1000a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	while (current != TICKER_NULL) {
   1000e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
		ticker_current = &node[current];
   10012:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		total += ticker_current->ticks_to_expire;
   10016:	4443      	add	r3, r8
		ticker_current = &node[current];
   10018:	eb06 1000 	add.w	r0, r6, r0, lsl #4
	while (current != TICKER_NULL) {
   1001c:	d1f0      	bne.n	10000 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   1001e:	2600      	movs	r6, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10020:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10022:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10024:	f000 8126 	beq.w	10274 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x275>
		ticker->req = ticker->ack;
   10028:	7067      	strb	r7, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   1002a:	f899 301c 	ldrb.w	r3, [r9, #28]
   1002e:	428b      	cmp	r3, r1
   10030:	d022      	beq.n	10078 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x79>
	if (user_op->fp_op_func) {
   10032:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10034:	2000      	movs	r0, #0
   10036:	7028      	strb	r0, [r5, #0]
	user_op->status = status;
   10038:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   1003a:	b10b      	cbz	r3, 10040 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x41>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1003c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1003e:	4798      	blx	r3
   10040:	f89a c003 	ldrb.w	ip, [sl, #3]
   10044:	f89a 3002 	ldrb.w	r3, [sl, #2]
   10048:	e79c      	b.n	ff84 <ticker_job+0x8c>
		flag_elapsed = 0U;
   1004a:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
   1004c:	9202      	str	r2, [sp, #8]
   1004e:	e779      	b.n	ff44 <ticker_job+0x4c>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   10050:	2104      	movs	r1, #4
   10052:	464b      	mov	r3, r9
   10054:	2201      	movs	r2, #1
   10056:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
   1005a:	4608      	mov	r0, r1
   1005c:	47a0      	blx	r4
	while (count_user--) {
   1005e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
				user->middle = prev;
   10060:	f88a 8002 	strb.w	r8, [sl, #2]
   10064:	4657      	mov	r7, sl
				pending = 1U;
   10066:	2301      	movs	r3, #1
	while (count_user--) {
   10068:	42ba      	cmp	r2, r7
				pending = 1U;
   1006a:	9308      	str	r3, [sp, #32]
   1006c:	f1a7 0308 	sub.w	r3, r7, #8
	while (count_user--) {
   10070:	f000 811e 	beq.w	102b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2b1>
   10074:	461f      	mov	r7, r3
   10076:	e77f      	b.n	ff78 <ticker_job+0x80>
			instance->ticker_id_slot_previous = TICKER_NULL;
   10078:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   1007a:	2a07      	cmp	r2, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
   1007c:	f889 301c 	strb.w	r3, [r9, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   10080:	f040 81dd 	bne.w	1043e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x43f>
				ticks_at_stop =
   10084:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
   10086:	f8d9 3014 	ldr.w	r3, [r9, #20]
			if (!((ticks_at_stop - ticks_current) &
   1008a:	1ac2      	subs	r2, r0, r3
   1008c:	0214      	lsls	r4, r2, #8
   1008e:	f100 81cd 	bmi.w	1042c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x42d>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10092:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   10096:	9a02      	ldr	r2, [sp, #8]
   10098:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   1009a:	f8d9 2018 	ldr.w	r2, [r9, #24]
   1009e:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   100a0:	bf88      	it	hi
   100a2:	f8c9 3018 	strhi.w	r3, [r9, #24]
   100a6:	e7c4      	b.n	10032 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x33>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   100a8:	686e      	ldr	r6, [r5, #4]
   100aa:	2e00      	cmp	r6, #0
   100ac:	d196      	bne.n	ffdc <ticker_job+0xe4>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   100ae:	68ae      	ldr	r6, [r5, #8]
   100b0:	2e00      	cmp	r6, #0
   100b2:	d193      	bne.n	ffdc <ticker_job+0xe4>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   100b4:	68ee      	ldr	r6, [r5, #12]
   100b6:	2e00      	cmp	r6, #0
   100b8:	d190      	bne.n	ffdc <ticker_job+0xe4>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   100ba:	692e      	ldr	r6, [r5, #16]
   100bc:	2e00      	cmp	r6, #0
   100be:	d18d      	bne.n	ffdc <ticker_job+0xe4>
			     (user_op->params.update.lazy == 0U) &&
   100c0:	696e      	ldr	r6, [r5, #20]
   100c2:	f036 467f 	bics.w	r6, r6, #4278190080	; 0xff000000
   100c6:	d189      	bne.n	ffdc <ticker_job+0xe4>
	if (user_op->fp_op_func) {
   100c8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   100ca:	2100      	movs	r1, #0
	user_op->status = status;
   100cc:	2001      	movs	r0, #1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   100ce:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
   100d0:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   100d2:	2a00      	cmp	r2, #0
   100d4:	f43f af56 	beq.w	ff84 <ticker_job+0x8c>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   100d8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   100da:	4790      	blx	r2
   100dc:	f89a c003 	ldrb.w	ip, [sl, #3]
   100e0:	f89a 3002 	ldrb.w	r3, [sl, #2]
   100e4:	e74e      	b.n	ff84 <ticker_job+0x8c>
	if (previous == current) {
   100e6:	eb0e 074e 	add.w	r7, lr, lr, lsl #1
   100ea:	4571      	cmp	r1, lr
   100ec:	eb06 1707 	add.w	r7, r6, r7, lsl #4
   100f0:	d016      	beq.n	10120 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x121>
	node[previous].next = ticker_current->next;
   100f2:	7801      	ldrb	r1, [r0, #0]
	timeout = ticker_current->ticks_to_expire;
   100f4:	f8d0 c008 	ldr.w	ip, [r0, #8]
	node[previous].next = ticker_current->next;
   100f8:	7039      	strb	r1, [r7, #0]
	if (ticker_current->next != TICKER_NULL) {
   100fa:	29ff      	cmp	r1, #255	; 0xff
   100fc:	d006      	beq.n	1010c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10d>
		node[ticker_current->next].ticks_to_expire += timeout;
   100fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   10102:	eb06 1101 	add.w	r1, r6, r1, lsl #4
   10106:	6888      	ldr	r0, [r1, #8]
   10108:	4460      	add	r0, ip
   1010a:	6088      	str	r0, [r1, #8]
	return (total + timeout);
   1010c:	eb0c 0603 	add.w	r6, ip, r3
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10110:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10112:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10114:	d009      	beq.n	1012a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12b>
   10116:	78a7      	ldrb	r7, [r4, #2]
   10118:	7869      	ldrb	r1, [r5, #1]
   1011a:	e785      	b.n	10028 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x29>
		if (current == id) {
   1011c:	4607      	mov	r7, r0
	total = 0U;
   1011e:	2300      	movs	r3, #0
		instance->ticker_id_head = ticker_current->next;
   10120:	7802      	ldrb	r2, [r0, #0]
   10122:	f889 201d 	strb.w	r2, [r9, #29]
   10126:	782a      	ldrb	r2, [r5, #0]
   10128:	e7e3      	b.n	100f2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf3>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   1012a:	f8d9 7014 	ldr.w	r7, [r9, #20]
   1012e:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
   10130:	f00a f9f0 	bl	1a514 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10134:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10136:	eba0 0c07 	sub.w	ip, r0, r7
   1013a:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1013e:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_elapsed) {
   10140:	429e      	cmp	r6, r3
	ticks_now = cntr_cnt_get();
   10142:	4680      	mov	r8, r0
	if (ticks_to_expire > ticks_elapsed) {
   10144:	f240 80a2 	bls.w	1028c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x28d>
		ticks_to_expire -= ticks_elapsed;
   10148:	6962      	ldr	r2, [r4, #20]
   1014a:	1af3      	subs	r3, r6, r3
	if ((ticker->ticks_periodic != 0U) &&
   1014c:	6866      	ldr	r6, [r4, #4]
   1014e:	2e00      	cmp	r6, #0
   10150:	d053      	beq.n	101fa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1fb>
	    (user_op->params.update.lazy != 0U)) {
   10152:	8aa8      	ldrh	r0, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
   10154:	2800      	cmp	r0, #0
   10156:	d050      	beq.n	101fa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1fb>
		user_op->params.update.lazy--;
   10158:	3801      	subs	r0, #1
   1015a:	b280      	uxth	r0, r0
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1015c:	429e      	cmp	r6, r3
   1015e:	8be1      	ldrh	r1, [r4, #30]
		user_op->params.update.lazy--;
   10160:	82a8      	strh	r0, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10162:	d225      	bcs.n	101b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b1>
   10164:	f106 0b01 	add.w	fp, r6, #1
   10168:	920b      	str	r2, [sp, #44]	; 0x2c
   1016a:	e011      	b.n	10190 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x191>
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   1016c:	f100 70e8 	add.w	r0, r0, #30408704	; 0x1d00000
   10170:	f500 30d4 	add.w	r0, r0, #108544	; 0x1a800
   10174:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
   10178:	46de      	mov	lr, fp
	ticker->remainder_current -= ticker->remainder_periodic;
   1017a:	9a09      	ldr	r2, [sp, #36]	; 0x24
			ticker->lazy_current--;
   1017c:	3901      	subs	r1, #1
			ticks_to_expire -= ticker->ticks_periodic +
   1017e:	eba3 030e 	sub.w	r3, r3, lr
			ticker->lazy_current--;
   10182:	b289      	uxth	r1, r1
	ticker->remainder_current -= ticker->remainder_periodic;
   10184:	1a80      	subs	r0, r0, r2
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10186:	429e      	cmp	r6, r3
			ticker->lazy_current--;
   10188:	83e1      	strh	r1, [r4, #30]
	ticker->remainder_current -= ticker->remainder_periodic;
   1018a:	6260      	str	r0, [r4, #36]	; 0x24
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1018c:	d20e      	bcs.n	101ac <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1ad>
   1018e:	8aa8      	ldrh	r0, [r5, #20]
   10190:	4281      	cmp	r1, r0
   10192:	f240 81b2 	bls.w	104fa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4fb>
					   ticker_remainder_dec(ticker);
   10196:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
	if ((ticker->remainder_current >= BIT(31)) ||
   1019a:	f8df e2d0 	ldr.w	lr, [pc, #720]	; 1046c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x46d>
					   ticker_remainder_dec(ticker);
   1019e:	9209      	str	r2, [sp, #36]	; 0x24
	if ((ticker->remainder_current >= BIT(31)) ||
   101a0:	4ab1      	ldr	r2, [pc, #708]	; (10468 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x469>)
   101a2:	4486      	add	lr, r0
   101a4:	4596      	cmp	lr, r2
   101a6:	d8e1      	bhi.n	1016c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x16d>
   101a8:	46b6      	mov	lr, r6
   101aa:	e7e6      	b.n	1017a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x17b>
   101ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   101ae:	8aa8      	ldrh	r0, [r5, #20]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   101b0:	4288      	cmp	r0, r1
   101b2:	d921      	bls.n	101f8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1f9>
					   ticker_remainder_inc(ticker);
   101b4:	6a20      	ldr	r0, [r4, #32]
   101b6:	9009      	str	r0, [sp, #36]	; 0x24
   101b8:	f106 0e01 	add.w	lr, r6, #1
   101bc:	920b      	str	r2, [sp, #44]	; 0x2c
   101be:	e007      	b.n	101d0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1d1>
	ticker->remainder_current += ticker->remainder_periodic;
   101c0:	6260      	str	r0, [r4, #36]	; 0x24
   101c2:	46b3      	mov	fp, r6
		while (ticker->lazy_current < user_op->params.update.lazy) {
   101c4:	8aa8      	ldrh	r0, [r5, #20]
			ticker->lazy_current++;
   101c6:	3101      	adds	r1, #1
   101c8:	b289      	uxth	r1, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
   101ca:	4281      	cmp	r1, r0
			ticks_to_expire += ticker->ticks_periodic +
   101cc:	445b      	add	r3, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
   101ce:	d211      	bcs.n	101f4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1f5>
	ticker->remainder_current += ticker->remainder_periodic;
   101d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   101d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
   101d4:	f8df b294 	ldr.w	fp, [pc, #660]	; 1046c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x46d>
	ticker->remainder_current += ticker->remainder_periodic;
   101d8:	4410      	add	r0, r2
	if ((ticker->remainder_current < BIT(31)) &&
   101da:	4aa3      	ldr	r2, [pc, #652]	; (10468 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x469>)
   101dc:	4483      	add	fp, r0
   101de:	4593      	cmp	fp, r2
   101e0:	d8ee      	bhi.n	101c0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1c1>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   101e2:	f1a0 70e8 	sub.w	r0, r0, #30408704	; 0x1d00000
   101e6:	f5a0 30d4 	sub.w	r0, r0, #108544	; 0x1a800
   101ea:	f5a0 70a5 	sub.w	r0, r0, #330	; 0x14a
   101ee:	6260      	str	r0, [r4, #36]	; 0x24
		return 1;
   101f0:	46f3      	mov	fp, lr
   101f2:	e7e7      	b.n	101c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1c5>
   101f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   101f6:	83e1      	strh	r1, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   101f8:	83a0      	strh	r0, [r4, #28]
				user_op->params.update.ticks_drift_minus;
   101fa:	e9d5 0e01 	ldrd	r0, lr, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
   101fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
   10200:	4403      	add	r3, r0
	ticker->ticks_to_expire_minus +=
   10202:	4472      	add	r2, lr
	ticker->ticks_to_expire = ticks_to_expire +
   10204:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
   10206:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   10208:	b136      	cbz	r6, 10218 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x219>
   1020a:	6831      	ldr	r1, [r6, #0]
   1020c:	b121      	cbz	r1, 10218 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x219>
			user_op->params.update.ticks_drift_plus -
   1020e:	eba0 000e 	sub.w	r0, r0, lr
		ext_data->ticks_drift =
   10212:	6070      	str	r0, [r6, #4]
   10214:	68a3      	ldr	r3, [r4, #8]
   10216:	6962      	ldr	r2, [r4, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10218:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
   1021c:	d121      	bne.n	10262 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x263>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1021e:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   10220:	4293      	cmp	r3, r2
   10222:	d91b      	bls.n	1025c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x25d>
		ticks_to_expire -= ticks_to_expire_minus;
   10224:	1a9b      	subs	r3, r3, r2
		ticks_to_expire_minus = 0U;
   10226:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
   10228:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1022a:	6162      	str	r2, [r4, #20]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   1022c:	68e9      	ldr	r1, [r5, #12]
   1022e:	69a3      	ldr	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   10230:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   10232:	440b      	add	r3, r1
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   10234:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   10236:	bf88      	it	hi
   10238:	1a9b      	subhi	r3, r3, r2
	if (user_op->params.update.force != 0U) {
   1023a:	7daa      	ldrb	r2, [r5, #22]
		ticker->ticks_slot = 0U;
   1023c:	bf98      	it	ls
   1023e:	2300      	movls	r3, #0
   10240:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   10242:	b102      	cbz	r2, 10246 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x247>
		ticker->force = user_op->params.update.force;
   10244:	70e2      	strb	r2, [r4, #3]
	ticker->next = *insert_head;
   10246:	9b04      	ldr	r3, [sp, #16]
   10248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1024a:	4619      	mov	r1, r3
   1024c:	9b01      	ldr	r3, [sp, #4]
   1024e:	548b      	strb	r3, [r1, r2]
		ticker->req++;
   10250:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   10252:	786a      	ldrb	r2, [r5, #1]
   10254:	9201      	str	r2, [sp, #4]
		ticker->req++;
   10256:	3301      	adds	r3, #1
   10258:	7063      	strb	r3, [r4, #1]
   1025a:	e6ea      	b.n	10032 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x33>
   1025c:	1ad2      	subs	r2, r2, r3
		ticks_to_expire = 0U;
   1025e:	2300      	movs	r3, #0
   10260:	e7e2      	b.n	10228 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x229>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10262:	9903      	ldr	r1, [sp, #12]
   10264:	eba1 0708 	sub.w	r7, r1, r8
   10268:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1026c:	429f      	cmp	r7, r3
   1026e:	d213      	bcs.n	10298 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x299>
			ticks_to_expire -= delta_current_start;
   10270:	1bdb      	subs	r3, r3, r7
   10272:	e7d5      	b.n	10220 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x221>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   10274:	f8d9 7014 	ldr.w	r7, [r9, #20]
   10278:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
   1027a:	f00a f94b 	bl	1a514 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1027e:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10280:	eba0 0c07 	sub.w	ip, r0, r7
   10284:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
   10288:	4680      	mov	r8, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1028a:	443b      	add	r3, r7
		ticker->ticks_to_expire_minus += ticks_elapsed -
   1028c:	6961      	ldr	r1, [r4, #20]
   1028e:	440b      	add	r3, r1
   10290:	1b9a      	subs	r2, r3, r6
   10292:	6162      	str	r2, [r4, #20]
		ticks_to_expire = 0U;
   10294:	2300      	movs	r3, #0
   10296:	e759      	b.n	1014c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x14d>
			ticks_to_expire_minus +=
   10298:	443a      	add	r2, r7
   1029a:	1ad2      	subs	r2, r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   1029c:	e7df      	b.n	1025e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x25f>
   1029e:	4698      	mov	r8, r3
   102a0:	e672      	b.n	ff88 <ticker_job+0x90>
	while (count_user--) {
   102a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   102a4:	4657      	mov	r7, sl
   102a6:	42ba      	cmp	r2, r7
   102a8:	f1a7 0308 	sub.w	r3, r7, #8
   102ac:	f47f aee2 	bne.w	10074 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x75>
   102b0:	f899 701d 	ldrb.w	r7, [r9, #29]
   102b4:	9b06      	ldr	r3, [sp, #24]
   102b6:	1bdb      	subs	r3, r3, r7
   102b8:	bf18      	it	ne
   102ba:	2301      	movne	r3, #1
   102bc:	9307      	str	r3, [sp, #28]
	if (flag_elapsed) {
   102be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   102c0:	46cb      	mov	fp, r9
   102c2:	2b00      	cmp	r3, #0
   102c4:	f040 8179 	bne.w	105ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5bb>
	count_user = instance->count_user;
   102c8:	f899 2009 	ldrb.w	r2, [r9, #9]
	node = &instance->nodes[0];
   102cc:	f8d9 3000 	ldr.w	r3, [r9]
	users = &instance->users[0];
   102d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
	node = &instance->nodes[0];
   102d4:	9304      	str	r3, [sp, #16]
	while (count_user--) {
   102d6:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
   102d8:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
   102da:	b2db      	uxtb	r3, r3
   102dc:	2a00      	cmp	r2, #0
   102de:	f000 8110 	beq.w	10502 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x503>
   102e2:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   102e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   102e8:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   102ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
   102ee:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
   102f2:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
   102f4:	9b01      	ldr	r3, [sp, #4]
   102f6:	2bff      	cmp	r3, #255	; 0xff
   102f8:	d05e      	beq.n	103b8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3b9>
				ticker = &node[id_insert];
   102fa:	f8dd a004 	ldr.w	sl, [sp, #4]
   102fe:	9b04      	ldr	r3, [sp, #16]
   10300:	fa0f f48a 	sxth.w	r4, sl
   10304:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   10308:	ea4f 1c04 	mov.w	ip, r4, lsl #4
   1030c:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
   10310:	f813 300c 	ldrb.w	r3, [r3, ip]
   10314:	9301      	str	r3, [sp, #4]
				user_op = NULL;
   10316:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   10318:	22ff      	movs	r2, #255	; 0xff
   1031a:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
   1031c:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
   10320:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
   10324:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10328:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
   1032a:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
   1032c:	bf18      	it	ne
   1032e:	9202      	strne	r2, [sp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10330:	d111      	bne.n	10356 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x357>
   10332:	e093      	b.n	1045c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x45d>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   10334:	ebb1 010c 	subs.w	r1, r1, ip
   10338:	d106      	bne.n	10348 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x349>
   1033a:	f8be e01e 	ldrh.w	lr, [lr, #30]
   1033e:	f8b0 901e 	ldrh.w	r9, [r0, #30]
   10342:	45f1      	cmp	r9, lr
   10344:	f200 80d6 	bhi.w	104f4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4f5>
		current = ticker_current->next;
   10348:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1034c:	9302      	str	r3, [sp, #8]
   1034e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   10352:	d077      	beq.n	10444 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x445>
   10354:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
   10356:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   1035a:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
   1035e:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
   10362:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10366:	458c      	cmp	ip, r1
   10368:	d9e4      	bls.n	10334 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x335>
   1036a:	9a02      	ldr	r2, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
   1036c:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
   1036e:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
   10370:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
   10372:	d16c      	bne.n	1044e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x44f>
		instance->ticker_id_head = id;
   10374:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   10378:	2bff      	cmp	r3, #255	; 0xff
   1037a:	d006      	beq.n	1038a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x38b>
		node[current].ticks_to_expire -= ticks_to_expire;
   1037c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10380:	eb07 1703 	add.w	r7, r7, r3, lsl #4
   10384:	68bb      	ldr	r3, [r7, #8]
   10386:	1a59      	subs	r1, r3, r1
   10388:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
   1038a:	78a3      	ldrb	r3, [r4, #2]
   1038c:	3301      	adds	r3, #1
   1038e:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   10390:	2d00      	cmp	r5, #0
   10392:	d0af      	beq.n	102f4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2f5>
	if (user_op->fp_op_func) {
   10394:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10396:	9a03      	ldr	r2, [sp, #12]
   10398:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   1039a:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   1039c:	b113      	cbz	r3, 103a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3a5>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1039e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   103a0:	2000      	movs	r0, #0
   103a2:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
   103a4:	6863      	ldr	r3, [r4, #4]
   103a6:	2b00      	cmp	r3, #0
   103a8:	d1a4      	bne.n	102f4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2f5>
					ticker->op_context =
   103aa:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
   103ae:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   103b2:	9b01      	ldr	r3, [sp, #4]
   103b4:	2bff      	cmp	r3, #255	; 0xff
   103b6:	d1a0      	bne.n	102fa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2fb>
   103b8:	f898 3002 	ldrb.w	r3, [r8, #2]
   103bc:	42b3      	cmp	r3, r6
   103be:	d02e      	beq.n	1041e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x41f>
   103c0:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
   103c2:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
   103c6:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   103ca:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
   103ce:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   103d0:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
   103d4:	b2f6      	uxtb	r6, r6
					first = 0U;
   103d6:	42b0      	cmp	r0, r6
   103d8:	bf08      	it	eq
   103da:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   103dc:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
   103de:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   103e2:	d11a      	bne.n	1041a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x41b>
				id_insert = user_op->id;
   103e4:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   103e8:	9b04      	ldr	r3, [sp, #16]
   103ea:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
   103ee:	eb03 140c 	add.w	r4, r3, ip, lsl #4
   103f2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
   103f6:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   103f8:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
   103fa:	1ac9      	subs	r1, r1, r3
   103fc:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   10400:	d036      	beq.n	10470 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x471>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10402:	9b03      	ldr	r3, [sp, #12]
   10404:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
   10408:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
   1040a:	2201      	movs	r2, #1
   1040c:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1040e:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
   10410:	b10b      	cbz	r3, 10416 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x417>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10412:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10414:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   10416:	f898 3002 	ldrb.w	r3, [r8, #2]
   1041a:	42b3      	cmp	r3, r6
   1041c:	d1d1      	bne.n	103c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3c3>
	while (count_user--) {
   1041e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10420:	4542      	cmp	r2, r8
   10422:	f1a8 0308 	sub.w	r3, r8, #8
   10426:	d06a      	beq.n	104fe <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4ff>
   10428:	4698      	mov	r8, r3
   1042a:	e75e      	b.n	102ea <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2eb>
				if (ticks_elapsed > ticks_used) {
   1042c:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1042e:	1a1b      	subs	r3, r3, r0
   10430:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   10434:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
   10436:	bf8c      	ite	hi
   10438:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
   1043a:	2300      	movls	r3, #0
   1043c:	e62d      	b.n	1009a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9b>
				ticks_at_stop = cntr_cnt_get();
   1043e:	f00a f869 	bl	1a514 <cntr_cnt_get>
   10442:	e620      	b.n	10086 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x87>
	ticker_new->next = current;
   10444:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   10446:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
   10448:	f880 c000 	strb.w	ip, [r0]
   1044c:	4663      	mov	r3, ip
		node[previous].next = id;
   1044e:	b212      	sxth	r2, r2
   10450:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10454:	0112      	lsls	r2, r2, #4
   10456:	f807 a002 	strb.w	sl, [r7, r2]
   1045a:	e78d      	b.n	10378 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x379>
	ticker_new->next = current;
   1045c:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
   10460:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   10464:	e791      	b.n	1038a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x38b>
   10466:	bf00      	nop
   10468:	7f172b59 	.word	0x7f172b59
   1046c:	ff172b5a 	.word	0xff172b5a
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   10470:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   10472:	f8db e014 	ldr.w	lr, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   10476:	6a68      	ldr	r0, [r5, #36]	; 0x24
   10478:	f64f 79ff 	movw	r9, #65535	; 0xffff
   1047c:	454f      	cmp	r7, r9
   1047e:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   10482:	d02e      	beq.n	104e2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4e3>
   10484:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   10488:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   1048a:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1048c:	6223      	str	r3, [r4, #32]
	ticker->timeout_func = start->fp_timeout_func;
   1048e:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10492:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
   10494:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
   10496:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   10498:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1049a:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
   1049e:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   104a2:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
   104a4:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   104a6:	d40c      	bmi.n	104c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4c3>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   104a8:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   104ac:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   104ae:	b18b      	cbz	r3, 104d4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4d5>
	ticker->ticks_to_expire = ticks_to_expire;
   104b0:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
   104b2:	9b03      	ldr	r3, [sp, #12]
   104b4:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   104b6:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
   104b8:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   104bc:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
   104be:	70e3      	strb	r3, [r4, #3]
}
   104c0:	e72a      	b.n	10318 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x319>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   104c2:	ebae 0200 	sub.w	r2, lr, r0
   104c6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   104ca:	4293      	cmp	r3, r2
   104cc:	d905      	bls.n	104da <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4db>
			ticks_to_expire -= delta_current_start;
   104ce:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   104d0:	2b00      	cmp	r3, #0
   104d2:	d1ed      	bne.n	104b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4b1>
		ticks_to_expire_minus -= ticks_to_expire;
   104d4:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   104d6:	2300      	movs	r3, #0
   104d8:	e7ea      	b.n	104b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4b1>
			    (delta_current_start - ticks_to_expire);
   104da:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
   104dc:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   104de:	2300      	movs	r3, #0
   104e0:	e7e6      	b.n	104b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4b1>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   104e2:	f04f 0701 	mov.w	r7, #1
   104e6:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   104ea:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   104ec:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   104ee:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   104f0:	460f      	mov	r7, r1
   104f2:	e7cc      	b.n	1048e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x48f>
   104f4:	9a02      	ldr	r2, [sp, #8]
   104f6:	4661      	mov	r1, ip
   104f8:	e738      	b.n	1036c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x36d>
   104fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   104fc:	e658      	b.n	101b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b1>
   104fe:	f89b 701d 	ldrb.w	r7, [fp, #29]
	if (instance->ticker_id_head != ticker_id_old_head) {
   10502:	9b06      	ldr	r3, [sp, #24]
   10504:	42bb      	cmp	r3, r7
   10506:	f000 8323 	beq.w	10b50 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb51>
	if (!pending) {
   1050a:	9b08      	ldr	r3, [sp, #32]
   1050c:	2b00      	cmp	r3, #0
   1050e:	f000 8345 	beq.w	10b9c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb9d>
	instance->job_guard = 0U;
   10512:	2300      	movs	r3, #0
   10514:	f89b 701d 	ldrb.w	r7, [fp, #29]
   10518:	f88b 301e 	strb.w	r3, [fp, #30]
	if (instance->ticker_id_head == TICKER_NULL) {
   1051c:	2fff      	cmp	r7, #255	; 0xff
   1051e:	f000 83cb 	beq.w	10cb8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xcb9>
	if (ticker_id_old_head == TICKER_NULL) {
   10522:	9b06      	ldr	r3, [sp, #24]
   10524:	2bff      	cmp	r3, #255	; 0xff
   10526:	f000 83e5 	beq.w	10cf4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xcf5>
	ticks_to_expire = ticker->ticks_to_expire;
   1052a:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   1052e:	f8df 9308 	ldr.w	r9, [pc, #776]	; 10838 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x839>
   10532:	f8df 8308 	ldr.w	r8, [pc, #776]	; 1083c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x83d>
   10536:	4ebf      	ldr	r6, [pc, #764]	; (10834 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x835>)
	ticker = &instance->nodes[instance->ticker_id_head];
   10538:	eb07 0747 	add.w	r7, r7, r7, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   1053c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
	i = 10U;
   10540:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   10542:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
   10544:	f009 ffe6 	bl	1a514 <cntr_cnt_get>
		cc = instance->ticks_current;
   10548:	f8db 3014 	ldr.w	r3, [fp, #20]
		instance->trigger_set_cb(cc);
   1054c:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10550:	1ac4      	subs	r4, r0, r3
   10552:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   10556:	3403      	adds	r4, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   10558:	42bc      	cmp	r4, r7
   1055a:	bf2c      	ite	cs
   1055c:	191b      	addcs	r3, r3, r4
   1055e:	19db      	addcc	r3, r3, r7
		cc &= HAL_TICKER_CNTR_MASK;
   10560:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
   10564:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   10566:	4620      	mov	r0, r4
   10568:	4790      	blx	r2
		ctr_post = cntr_cnt_get();
   1056a:	f009 ffd3 	bl	1a514 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1056e:	eba0 000a 	sub.w	r0, r0, sl
   10572:	eba4 040a 	sub.w	r4, r4, sl
   10576:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1057a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   1057e:	3003      	adds	r0, #3
		  ticker_ticks_diff_get(cc, ctr));
   10580:	42a0      	cmp	r0, r4
		i--;
   10582:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   10586:	f240 82ee 	bls.w	10b66 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb67>
		LL_ASSERT(i);
   1058a:	2d00      	cmp	r5, #0
   1058c:	d1da      	bne.n	10544 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x545>
   1058e:	f640 03a6 	movw	r3, #2214	; 0x8a6
   10592:	464a      	mov	r2, r9
   10594:	4641      	mov	r1, r8
   10596:	4630      	mov	r0, r6
   10598:	f00e fd5c 	bl	1f054 <printk>
   1059c:	4040      	eors	r0, r0
   1059e:	f380 8811 	msr	BASEPRI, r0
   105a2:	f04f 0003 	mov.w	r0, #3
   105a6:	df02      	svc	2
   105a8:	e7cc      	b.n	10544 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x545>
	if (flag_elapsed) {
   105aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   105ac:	2b00      	cmp	r3, #0
   105ae:	f000 82e8 	beq.w	10b82 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb83>
	pending = 0U;
   105b2:	9b07      	ldr	r3, [sp, #28]
   105b4:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   105b6:	23ff      	movs	r3, #255	; 0xff
   105b8:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
   105ba:	f009 ffab 	bl	1a514 <cntr_cnt_get>
	node = &instance->nodes[0];
   105be:	f8db 3000 	ldr.w	r3, [fp]
	while (instance->ticker_id_head != TICKER_NULL) {
   105c2:	f89b 501d 	ldrb.w	r5, [fp, #29]
	node = &instance->nodes[0];
   105c6:	9303      	str	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   105c8:	9b05      	ldr	r3, [sp, #20]
	while (instance->ticker_id_head != TICKER_NULL) {
   105ca:	2dff      	cmp	r5, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   105cc:	eba0 0003 	sub.w	r0, r0, r3
   105d0:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   105d4:	d04d      	beq.n	10672 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x673>
   105d6:	f8dd a008 	ldr.w	sl, [sp, #8]
	ticks_expired = 0U;
   105da:	f04f 0900 	mov.w	r9, #0
		ticker = &node[id_expired];
   105de:	9b03      	ldr	r3, [sp, #12]
   105e0:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   105e4:	eb03 1404 	add.w	r4, r3, r4, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   105e8:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   105ea:	4553      	cmp	r3, sl
   105ec:	f200 82cf 	bhi.w	10b8e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb8f>
		if (instance->ticks_slot_previous > ticks_to_expire) {
   105f0:	f8db 2018 	ldr.w	r2, [fp, #24]
		skip_collision = (ticker->lazy_current != 0U);
   105f4:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   105f8:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   105fa:	ebaa 0a03 	sub.w	sl, sl, r3
		ticks_expired += ticks_to_expire;
   105fe:	4499      	add	r9, r3
		ticks_latency -= ticks_to_expire;
   10600:	eba8 0803 	sub.w	r8, r8, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   10604:	bf25      	ittet	cs
   10606:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   1060a:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   1060e:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   10610:	2300      	movcs	r3, #0
   10612:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   10616:	7861      	ldrb	r1, [r4, #1]
   10618:	78a0      	ldrb	r0, [r4, #2]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1061a:	69a7      	ldr	r7, [r4, #24]
   1061c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1061e:	6866      	ldr	r6, [r4, #4]
   10620:	f894 c000 	ldrb.w	ip, [r4]
   10624:	9704      	str	r7, [sp, #16]
		state = (ticker->req - ticker->ack) & 0xff;
   10626:	1a0b      	subs	r3, r1, r0
   10628:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1062a:	b117      	cbz	r7, 10632 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x633>
   1062c:	2b02      	cmp	r3, #2
   1062e:	f000 8144 	beq.w	108ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8bb>
		ticker->ticks_to_expire = 0U;
   10632:	2700      	movs	r7, #0
   10634:	60a7      	str	r7, [r4, #8]
		instance->ticker_id_head = ticker->next;
   10636:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   1063a:	2e00      	cmp	r6, #0
   1063c:	f040 8100 	bne.w	10840 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x841>
   10640:	b11a      	cbz	r2, 1064a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x64b>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   10642:	7a12      	ldrb	r2, [r2, #8]
   10644:	2a01      	cmp	r2, #1
   10646:	f000 80d5 	beq.w	107f4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7f5>
			if (state && ((state == 1U) || skip_collision) &&
   1064a:	b153      	cbz	r3, 10662 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x663>
   1064c:	2b01      	cmp	r3, #1
   1064e:	d002      	beq.n	10656 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x657>
   10650:	f1be 0f00 	cmp.w	lr, #0
   10654:	d005      	beq.n	10662 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x663>
			    ticker->fp_op_func) {
   10656:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   10658:	b11b      	cbz	r3, 10662 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x663>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   1065a:	2001      	movs	r0, #1
   1065c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1065e:	4798      	blx	r3
   10660:	78a0      	ldrb	r0, [r4, #2]
			ticker->req = ticker->ack;
   10662:	7060      	strb	r0, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   10664:	f89b 501d 	ldrb.w	r5, [fp, #29]
   10668:	2dff      	cmp	r5, #255	; 0xff
   1066a:	d1b8      	bne.n	105de <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5df>
   1066c:	f8db 3000 	ldr.w	r3, [fp]
   10670:	9303      	str	r3, [sp, #12]
			flag_compare_update = 1U;
   10672:	e9dd 4006 	ldrd	r4, r0, [sp, #24]
	count_user = instance->count_user;
   10676:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
   1067a:	f8db 1004 	ldr.w	r1, [fp, #4]
   1067e:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
   10680:	1e53      	subs	r3, r2, #1
			flag_compare_update = 1U;
   10682:	42ac      	cmp	r4, r5
   10684:	bf18      	it	ne
   10686:	2001      	movne	r0, #1
   10688:	9007      	str	r0, [sp, #28]
	while (count_user--) {
   1068a:	b2db      	uxtb	r3, r3
   1068c:	2a00      	cmp	r2, #0
   1068e:	f000 8181 	beq.w	10994 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x995>
   10692:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
		user_ops = (void *)&user->user_op[0];
   10696:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
   1069a:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
   1069e:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
   106a0:	9b01      	ldr	r3, [sp, #4]
   106a2:	2bff      	cmp	r3, #255	; 0xff
   106a4:	d062      	beq.n	1076c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x76d>
				ticker = &node[id_insert];
   106a6:	f8dd a004 	ldr.w	sl, [sp, #4]
   106aa:	9b03      	ldr	r3, [sp, #12]
   106ac:	fa0f f48a 	sxth.w	r4, sl
   106b0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   106b4:	ea4f 1c04 	mov.w	ip, r4, lsl #4
   106b8:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
   106bc:	f813 300c 	ldrb.w	r3, [r3, ip]
   106c0:	9301      	str	r3, [sp, #4]
				user_op = NULL;
   106c2:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   106c4:	22ff      	movs	r2, #255	; 0xff
   106c6:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
   106c8:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
   106cc:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
   106d0:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   106d4:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
   106d6:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
   106d8:	bf18      	it	ne
   106da:	9204      	strne	r2, [sp, #16]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   106dc:	d112      	bne.n	10704 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x705>
   106de:	e151      	b.n	10984 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x985>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   106e0:	ebb1 010c 	subs.w	r1, r1, ip
   106e4:	d106      	bne.n	106f4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6f5>
   106e6:	f8be e01e 	ldrh.w	lr, [lr, #30]
   106ea:	f8b0 901e 	ldrh.w	r9, [r0, #30]
   106ee:	45f1      	cmp	r9, lr
   106f0:	f200 8103 	bhi.w	108fa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8fb>
		current = ticker_current->next;
   106f4:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   106f8:	9304      	str	r3, [sp, #16]
   106fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   106fe:	f000 80f0 	beq.w	108e2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8e3>
   10702:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
   10704:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   10708:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
   1070c:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
   10710:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10714:	458c      	cmp	ip, r1
   10716:	d9e3      	bls.n	106e0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6e1>
   10718:	9a04      	ldr	r2, [sp, #16]
	ticker_new->ticks_to_expire = ticks_to_expire;
   1071a:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
   1071c:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
   1071e:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
   10720:	f040 80e4 	bne.w	108ec <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8ed>
		instance->ticker_id_head = id;
   10724:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   10728:	2bff      	cmp	r3, #255	; 0xff
   1072a:	d006      	beq.n	1073a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x73b>
		node[current].ticks_to_expire -= ticks_to_expire;
   1072c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10730:	eb07 1703 	add.w	r7, r7, r3, lsl #4
   10734:	68bb      	ldr	r3, [r7, #8]
   10736:	1a59      	subs	r1, r3, r1
   10738:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
   1073a:	78a3      	ldrb	r3, [r4, #2]
   1073c:	3301      	adds	r3, #1
   1073e:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   10740:	2d00      	cmp	r5, #0
   10742:	d0ad      	beq.n	106a0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6a1>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10744:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   10748:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1074a:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   1074c:	2200      	movs	r2, #0
   1074e:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   10750:	b113      	cbz	r3, 10758 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x759>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10752:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10754:	4610      	mov	r0, r2
   10756:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
   10758:	6863      	ldr	r3, [r4, #4]
   1075a:	2b00      	cmp	r3, #0
   1075c:	d1a0      	bne.n	106a0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6a1>
					ticker->op_context =
   1075e:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
   10762:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   10766:	9b01      	ldr	r3, [sp, #4]
   10768:	2bff      	cmp	r3, #255	; 0xff
   1076a:	d19c      	bne.n	106a6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6a7>
   1076c:	f898 3002 	ldrb.w	r3, [r8, #2]
   10770:	42b3      	cmp	r3, r6
   10772:	d030      	beq.n	107d6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7d7>
   10774:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
   10776:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
   1077a:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   1077e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
   10782:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10784:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
   10788:	b2f6      	uxtb	r6, r6
					first = 0U;
   1078a:	42b0      	cmp	r0, r6
   1078c:	bf08      	it	eq
   1078e:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10790:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
   10792:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10796:	d11c      	bne.n	107d2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7d3>
				id_insert = user_op->id;
   10798:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   1079c:	9b03      	ldr	r3, [sp, #12]
   1079e:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
   107a2:	eb03 140c 	add.w	r4, r3, ip, lsl #4
   107a6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
   107aa:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   107ac:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
   107ae:	1ac9      	subs	r1, r1, r3
   107b0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   107b4:	f000 80a4 	beq.w	10900 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x901>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   107b8:	f04f 0300 	mov.w	r3, #0
   107bc:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
   107c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
   107c2:	2201      	movs	r2, #1
   107c4:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
   107c6:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
   107c8:	b10b      	cbz	r3, 107ce <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7cf>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   107ca:	6b29      	ldr	r1, [r5, #48]	; 0x30
   107cc:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   107ce:	f898 3002 	ldrb.w	r3, [r8, #2]
   107d2:	42b3      	cmp	r3, r6
   107d4:	d1cf      	bne.n	10776 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x777>
	while (count_user--) {
   107d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   107d8:	4542      	cmp	r2, r8
   107da:	f1a8 0308 	sub.w	r3, r8, #8
   107de:	f000 80d6 	beq.w	1098e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x98f>
   107e2:	4698      	mov	r8, r3
   107e4:	e757      	b.n	10696 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x697>
		ticker->ticks_to_expire = 0U;
   107e6:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   107ea:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   107ee:	2e00      	cmp	r6, #0
   107f0:	f43f af27 	beq.w	10642 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x643>
				ticker->req = ticker->ack;
   107f4:	4653      	mov	r3, sl
			ticks_to_expire_prep(ticker, instance->ticks_current,
   107f6:	9e05      	ldr	r6, [sp, #20]
   107f8:	f8db 2014 	ldr.w	r2, [fp, #20]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   107fc:	6961      	ldr	r1, [r4, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   107fe:	eb06 0709 	add.w	r7, r6, r9
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10802:	1abe      	subs	r6, r7, r2
   10804:	f416 0f00 	tst.w	r6, #8388608	; 0x800000
   10808:	d14c      	bne.n	108a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8a5>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1080a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1080e:	4433      	add	r3, r6
	if (ticks_to_expire > ticks_to_expire_minus) {
   10810:	4299      	cmp	r1, r3
   10812:	d24f      	bcs.n	108b4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8b5>
		ticks_to_expire -= ticks_to_expire_minus;
   10814:	1a5b      	subs	r3, r3, r1
		ticks_to_expire_minus = 0U;
   10816:	2100      	movs	r1, #0
			ticker->next = *insert_head;
   10818:	9a01      	ldr	r2, [sp, #4]
   1081a:	7022      	strb	r2, [r4, #0]
			ticker->req++;
   1081c:	3001      	adds	r0, #1
   1081e:	7060      	strb	r0, [r4, #1]
	ticker->ticks_to_expire = ticks_to_expire;
   10820:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   10822:	6161      	str	r1, [r4, #20]
			ticker->req++;
   10824:	9501      	str	r5, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
   10826:	f89b 501d 	ldrb.w	r5, [fp, #29]
   1082a:	2dff      	cmp	r5, #255	; 0xff
   1082c:	f47f aed7 	bne.w	105de <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5df>
   10830:	e71c      	b.n	1066c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x66d>
   10832:	bf00      	nop
   10834:	0002561c 	.word	0x0002561c
   10838:	000255dc 	.word	0x000255dc
   1083c:	000256e0 	.word	0x000256e0
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   10840:	b112      	cbz	r2, 10848 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x849>
   10842:	7a13      	ldrb	r3, [r2, #8]
   10844:	2b01      	cmp	r3, #1
   10846:	d0d5      	beq.n	107f4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7f5>
				if (!ticker->lazy_current) {
   10848:	f1be 0f00 	cmp.w	lr, #0
   1084c:	d146      	bne.n	108dc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8dd>
					lazy_periodic = ticker->lazy_periodic;
   1084e:	8ba7      	ldrh	r7, [r4, #28]
   10850:	9704      	str	r7, [sp, #16]
   10852:	4608      	mov	r0, r1
				while (count--) {
   10854:	1c71      	adds	r1, r6, #1
   10856:	e9d4 c208 	ldrd	ip, r2, [r4, #32]
   1085a:	e9cd 1009 	strd	r1, r0, [sp, #36]	; 0x24
				ticks_to_expire = 0U;
   1085e:	2300      	movs	r3, #0
   10860:	e004      	b.n	1086c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x86d>
   10862:	4631      	mov	r1, r6
				while (count--) {
   10864:	3f01      	subs	r7, #1
					ticks_to_expire +=
   10866:	440b      	add	r3, r1
				while (count--) {
   10868:	1c79      	adds	r1, r7, #1
   1086a:	d010      	beq.n	1088e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x88f>
	if ((ticker->remainder_current < BIT(31)) &&
   1086c:	49b6      	ldr	r1, [pc, #728]	; (10b48 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb49>)
   1086e:	48b7      	ldr	r0, [pc, #732]	; (10b4c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb4d>)
	ticker->remainder_current += ticker->remainder_periodic;
   10870:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
   10872:	1851      	adds	r1, r2, r1
   10874:	4281      	cmp	r1, r0
   10876:	d8f4      	bhi.n	10862 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x863>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10878:	9909      	ldr	r1, [sp, #36]	; 0x24
   1087a:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
				while (count--) {
   1087e:	3f01      	subs	r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10880:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
					ticks_to_expire +=
   10884:	440b      	add	r3, r1
				while (count--) {
   10886:	1c79      	adds	r1, r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10888:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
				while (count--) {
   1088c:	d1ee      	bne.n	1086c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x86d>
				if (!ticker->must_expire) {
   1088e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   10892:	980a      	ldr	r0, [sp, #40]	; 0x28
   10894:	6262      	str	r2, [r4, #36]	; 0x24
   10896:	2900      	cmp	r1, #0
   10898:	f000 8126 	beq.w	10ae8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xae9>
				ticker->lazy_current += (lazy_periodic + lazy);
   1089c:	9a04      	ldr	r2, [sp, #16]
   1089e:	4472      	add	r2, lr
   108a0:	83e2      	strh	r2, [r4, #30]
   108a2:	e7a8      	b.n	107f6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7f7>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   108a4:	1bd2      	subs	r2, r2, r7
   108a6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   108aa:	4293      	cmp	r3, r2
   108ac:	d913      	bls.n	108d6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8d7>
			ticks_to_expire -= delta_current_start;
   108ae:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   108b0:	4299      	cmp	r1, r3
   108b2:	d3af      	bcc.n	10814 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x815>
   108b4:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   108b6:	2300      	movs	r3, #0
   108b8:	e7ae      	b.n	10818 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x819>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   108ba:	f1be 0f00 	cmp.w	lr, #0
   108be:	f47f aeb8 	bne.w	10632 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x633>
   108c2:	b112      	cbz	r2, 108ca <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8cb>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   108c4:	7a17      	ldrb	r7, [r2, #8]
   108c6:	2f01      	cmp	r7, #1
   108c8:	d08d      	beq.n	107e6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7e7>
			instance->ticks_slot_previous = ticker->ticks_slot;
   108ca:	9f04      	ldr	r7, [sp, #16]
			instance->ticker_id_slot_previous = id_expired;
   108cc:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   108d0:	f8cb 7018 	str.w	r7, [fp, #24]
   108d4:	e6ad      	b.n	10632 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x633>
			ticks_to_expire_minus +=
   108d6:	4411      	add	r1, r2
   108d8:	1ac9      	subs	r1, r1, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   108da:	e7ec      	b.n	108b6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8b7>
   108dc:	2700      	movs	r7, #0
					lazy_periodic = 0U;
   108de:	9704      	str	r7, [sp, #16]
   108e0:	e7b8      	b.n	10854 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x855>
	ticker_new->next = current;
   108e2:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   108e4:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
   108e6:	f880 c000 	strb.w	ip, [r0]
   108ea:	4663      	mov	r3, ip
		node[previous].next = id;
   108ec:	b212      	sxth	r2, r2
   108ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   108f2:	0112      	lsls	r2, r2, #4
   108f4:	f807 a002 	strb.w	sl, [r7, r2]
   108f8:	e716      	b.n	10728 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x729>
   108fa:	9a04      	ldr	r2, [sp, #16]
   108fc:	4661      	mov	r1, ip
   108fe:	e70c      	b.n	1071a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x71b>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   10900:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   10902:	f8db e014 	ldr.w	lr, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   10906:	6a68      	ldr	r0, [r5, #36]	; 0x24
   10908:	f64f 79ff 	movw	r9, #65535	; 0xffff
   1090c:	454f      	cmp	r7, r9
   1090e:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   10912:	d02e      	beq.n	10972 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x973>
   10914:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   10918:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   1091a:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1091c:	6223      	str	r3, [r4, #32]
	ticker->timeout_func = start->fp_timeout_func;
   1091e:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10922:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
   10924:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
   10926:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   10928:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1092a:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
   1092e:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10932:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
   10934:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10936:	d40c      	bmi.n	10952 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x953>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10938:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1093c:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   1093e:	b18b      	cbz	r3, 10964 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x965>
	ticker->ticks_to_expire = ticks_to_expire;
   10940:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
   10942:	2300      	movs	r3, #0
   10944:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   10946:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
   10948:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1094c:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
   1094e:	70e3      	strb	r3, [r4, #3]
}
   10950:	e6b8      	b.n	106c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6c5>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10952:	ebae 0200 	sub.w	r2, lr, r0
   10956:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1095a:	4293      	cmp	r3, r2
   1095c:	d905      	bls.n	1096a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x96b>
			ticks_to_expire -= delta_current_start;
   1095e:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   10960:	2b00      	cmp	r3, #0
   10962:	d1ed      	bne.n	10940 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x941>
		ticks_to_expire_minus -= ticks_to_expire;
   10964:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   10966:	2300      	movs	r3, #0
   10968:	e7ea      	b.n	10940 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x941>
			    (delta_current_start - ticks_to_expire);
   1096a:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
   1096c:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   1096e:	2300      	movs	r3, #0
   10970:	e7e6      	b.n	10940 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x941>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   10972:	f04f 0701 	mov.w	r7, #1
   10976:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   1097a:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   1097c:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1097e:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   10980:	460f      	mov	r7, r1
   10982:	e7cc      	b.n	1091e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x91f>
	ticker_new->next = current;
   10984:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
   10988:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   1098c:	e6d5      	b.n	1073a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x73b>
   1098e:	f8db 3000 	ldr.w	r3, [fp]
   10992:	9303      	str	r3, [sp, #12]
	while (rescheduling) {
   10994:	f89b 701d 	ldrb.w	r7, [fp, #29]
   10998:	9e03      	ldr	r6, [sp, #12]
	uint8_t  rescheduled = 0U;
   1099a:	2300      	movs	r3, #0
   1099c:	46ba      	mov	sl, r7
		while (ticker_id_head != TICKER_NULL) {
   1099e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   109a2:	d010      	beq.n	109c6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9c7>
   109a4:	46d1      	mov	r9, sl
			ticker = &nodes[ticker_id_head];
   109a6:	fa0f f289 	sxth.w	r2, r9
   109aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   109ae:	eb06 1202 	add.w	r2, r6, r2, lsl #4
			ext_data = ticker->ext_data;
   109b2:	6a97      	ldr	r7, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   109b4:	b117      	cbz	r7, 109bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9bd>
   109b6:	7a39      	ldrb	r1, [r7, #8]
   109b8:	2901      	cmp	r1, #1
   109ba:	d014      	beq.n	109e6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9e7>
			ticker_id_head = ticker->next;
   109bc:	f892 9000 	ldrb.w	r9, [r2]
		while (ticker_id_head != TICKER_NULL) {
   109c0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   109c4:	d1ef      	bne.n	109a6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9a7>
	return rescheduled;
   109c6:	4657      	mov	r7, sl
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   109c8:	2b00      	cmp	r3, #0
   109ca:	f43f ad9a 	beq.w	10502 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x503>
	if (instance->ticker_id_head != ticker_id_old_head) {
   109ce:	9a06      	ldr	r2, [sp, #24]
   109d0:	42ba      	cmp	r2, r7
   109d2:	f47f ad9a 	bne.w	1050a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x50b>
	if (!pending) {
   109d6:	9a08      	ldr	r2, [sp, #32]
   109d8:	2a00      	cmp	r2, #0
   109da:	f000 817b 	beq.w	10cd4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xcd5>
	instance->job_guard = 0U;
   109de:	2300      	movs	r3, #0
   109e0:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   109e4:	e59a      	b.n	1051c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x51d>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   109e6:	f89b 301c 	ldrb.w	r3, [fp, #28]
   109ea:	2bff      	cmp	r3, #255	; 0xff
   109ec:	d071      	beq.n	10ad2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xad3>
			instance->ticks_slot_previous > ticks_elapsed) {
   109ee:	f8db 0018 	ldr.w	r0, [fp, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   109f2:	9b02      	ldr	r3, [sp, #8]
   109f4:	4283      	cmp	r3, r0
   109f6:	d26c      	bcs.n	10ad2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xad3>
			window_start_ticks = instance->ticks_slot_previous -
   109f8:	1ac0      	subs	r0, r0, r3
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   109fa:	e9d7 4300 	ldrd	r4, r3, [r7]
   109fe:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
   10a00:	f892 c000 	ldrb.w	ip, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   10a04:	d26d      	bcs.n	10ae2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xae3>
		while (ticker_id_iter != TICKER_NULL &&
   10a06:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   10a0a:	eba4 0403 	sub.w	r4, r4, r3
		while (ticker_id_iter != TICKER_NULL &&
   10a0e:	d068      	beq.n	10ae2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xae3>
		       ticks_start_offset + ticker->ticks_slot <=
   10a10:	6995      	ldr	r5, [r2, #24]
		while (ticker_id_iter != TICKER_NULL &&
   10a12:	42ac      	cmp	r4, r5
   10a14:	f04f 0300 	mov.w	r3, #0
   10a18:	d333      	bcc.n	10a82 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa83>
   10a1a:	469e      	mov	lr, r3
   10a1c:	9501      	str	r5, [sp, #4]
   10a1e:	4661      	mov	r1, ip
   10a20:	9203      	str	r2, [sp, #12]
   10a22:	e01d      	b.n	10a60 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa61>
			if (node->ticks_to_expire >
   10a24:	f8d1 8008 	ldr.w	r8, [r1, #8]
					MIN(ticks_slot_window,
   10a28:	f1a8 0304 	sub.w	r3, r8, #4
			if (node->ticks_to_expire >
   10a2c:	f1b8 0f04 	cmp.w	r8, #4
					MIN(ticks_slot_window,
   10a30:	4473      	add	r3, lr
			if (node->ticks_to_expire >
   10a32:	d909      	bls.n	10a48 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa49>
				window_end_ticks =
   10a34:	42a3      	cmp	r3, r4
			if (window_end_ticks > ticks_start_offset +
   10a36:	9a01      	ldr	r2, [sp, #4]
				window_end_ticks =
   10a38:	bf28      	it	cs
   10a3a:	4623      	movcs	r3, r4
			if (window_end_ticks > ticks_start_offset +
   10a3c:	4293      	cmp	r3, r2
   10a3e:	d903      	bls.n	10a48 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa49>
			if (ticks_to_expire != 0U &&
   10a40:	1b5b      	subs	r3, r3, r5
   10a42:	d001      	beq.n	10a48 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa49>
   10a44:	4298      	cmp	r0, r3
   10a46:	d91b      	bls.n	10a80 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa81>
			window_start_ticks  = node->ticks_to_expire +
   10a48:	6988      	ldr	r0, [r1, #24]
			ticker_id_iter = node->next;
   10a4a:	7809      	ldrb	r1, [r1, #0]
			ticks_start_offset += node->ticks_to_expire;
   10a4c:	44c6      	add	lr, r8
			window_start_ticks  = node->ticks_to_expire +
   10a4e:	4440      	add	r0, r8
			ticks_to_expire     = ticks_slot_window -
   10a50:	1b63      	subs	r3, r4, r5
		       ticks_start_offset + ticker->ticks_slot <=
   10a52:	eb0e 0205 	add.w	r2, lr, r5
		while (ticker_id_iter != TICKER_NULL &&
   10a56:	29ff      	cmp	r1, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   10a58:	9201      	str	r2, [sp, #4]
		while (ticker_id_iter != TICKER_NULL &&
   10a5a:	d011      	beq.n	10a80 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa81>
   10a5c:	4294      	cmp	r4, r2
   10a5e:	d30f      	bcc.n	10a80 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa81>
			node = &nodes[ticker_id_iter];
   10a60:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   10a64:	eb06 1101 	add.w	r1, r6, r1, lsl #4
			if (node->ext_data &&
   10a68:	f8d1 8028 	ldr.w	r8, [r1, #40]	; 0x28
   10a6c:	f1b8 0f00 	cmp.w	r8, #0
   10a70:	d0d8      	beq.n	10a24 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa25>
   10a72:	f898 8008 	ldrb.w	r8, [r8, #8]
   10a76:	f1b8 0f01 	cmp.w	r8, #1
   10a7a:	d1d3      	bne.n	10a24 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa25>
				ticker_id_iter = node->next;
   10a7c:	7809      	ldrb	r1, [r1, #0]
				continue;
   10a7e:	e7e8      	b.n	10a52 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa53>
   10a80:	9a03      	ldr	r2, [sp, #12]
		ticker->ticks_to_expire = ticks_to_expire;
   10a82:	6093      	str	r3, [r2, #8]
   10a84:	4664      	mov	r4, ip
   10a86:	f04f 0eff 	mov.w	lr, #255	; 0xff
   10a8a:	e000      	b.n	10a8e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa8f>
   10a8c:	4604      	mov	r4, r0
			node = &nodes[ticker_id_iter];
   10a8e:	b221      	sxth	r1, r4
   10a90:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   10a94:	eb06 1800 	add.w	r8, r6, r0, lsl #4
   10a98:	0100      	lsls	r0, r0, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   10a9a:	f8d8 5008 	ldr.w	r5, [r8, #8]
   10a9e:	429d      	cmp	r5, r3
   10aa0:	d248      	bcs.n	10b34 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb35>
				ticker->ticks_to_expire -=
   10aa2:	1b5b      	subs	r3, r3, r5
   10aa4:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
   10aa6:	5c30      	ldrb	r0, [r6, r0]
		while (ticker_id_iter != TICKER_NULL) {
   10aa8:	28ff      	cmp	r0, #255	; 0xff
   10aaa:	46a6      	mov	lr, r4
   10aac:	d1ee      	bne.n	10a8c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa8d>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   10aae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   10ab2:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   10ab4:	f88b c01d 	strb.w	ip, [fp, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   10ab8:	5c73      	ldrb	r3, [r6, r1]
   10aba:	7013      	strb	r3, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   10abc:	f806 9001 	strb.w	r9, [r6, r1]
   10ac0:	46e2      	mov	sl, ip
		ticker->lazy_current--;
   10ac2:	8bd3      	ldrh	r3, [r2, #30]
   10ac4:	3b01      	subs	r3, #1
   10ac6:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
   10ac8:	f04f 0202 	mov.w	r2, #2
		rescheduled  = 1U;
   10acc:	2301      	movs	r3, #1
		ext_data->reschedule_state =
   10ace:	723a      	strb	r2, [r7, #8]
		rescheduled  = 1U;
   10ad0:	e765      	b.n	1099e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x99f>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   10ad2:	e9d7 4300 	ldrd	r4, r3, [r7]
   10ad6:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
   10ad8:	f892 c000 	ldrb.w	ip, [r2]
		window_start_ticks = 0U;
   10adc:	f04f 0000 	mov.w	r0, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   10ae0:	d391      	bcc.n	10a06 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa07>
		ticker->ticks_to_expire = ticks_to_expire;
   10ae2:	2300      	movs	r3, #0
   10ae4:	6093      	str	r3, [r2, #8]
		while (ticker_id_iter != TICKER_NULL) {
   10ae6:	e7ec      	b.n	10ac2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xac3>
					while (ticks_to_expire <
   10ae8:	4598      	cmp	r8, r3
   10aea:	f67f aed7 	bls.w	1089c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x89d>
   10aee:	1c77      	adds	r7, r6, #1
   10af0:	9709      	str	r7, [sp, #36]	; 0x24
   10af2:	e005      	b.n	10b00 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb01>
   10af4:	4637      	mov	r7, r6
						ticks_to_expire +=
   10af6:	443b      	add	r3, r7
						lazy++;
   10af8:	3101      	adds	r1, #1
					while (ticks_to_expire <
   10afa:	4598      	cmp	r8, r3
						lazy++;
   10afc:	b289      	uxth	r1, r1
					while (ticks_to_expire <
   10afe:	d911      	bls.n	10b24 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb25>
	if ((ticker->remainder_current < BIT(31)) &&
   10b00:	4f11      	ldr	r7, [pc, #68]	; (10b48 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb49>)
   10b02:	4812      	ldr	r0, [pc, #72]	; (10b4c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb4d>)
	ticker->remainder_current += ticker->remainder_periodic;
   10b04:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
   10b06:	19d7      	adds	r7, r2, r7
   10b08:	4287      	cmp	r7, r0
   10b0a:	d8f3      	bhi.n	10af4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xaf5>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10b0c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   10b0e:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
						ticks_to_expire +=
   10b12:	443b      	add	r3, r7
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10b14:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
						lazy++;
   10b18:	3101      	adds	r1, #1
					while (ticks_to_expire <
   10b1a:	4598      	cmp	r8, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10b1c:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
						lazy++;
   10b20:	b289      	uxth	r1, r1
					while (ticks_to_expire <
   10b22:	d8ed      	bhi.n	10b00 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb01>
   10b24:	9e04      	ldr	r6, [sp, #16]
   10b26:	980a      	ldr	r0, [sp, #40]	; 0x28
   10b28:	6262      	str	r2, [r4, #36]	; 0x24
   10b2a:	440e      	add	r6, r1
   10b2c:	b2b1      	uxth	r1, r6
   10b2e:	9104      	str	r1, [sp, #16]
   10b30:	e6b4      	b.n	1089c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x89d>
   10b32:	4770      	bx	lr
				node->ticks_to_expire -=
   10b34:	1aeb      	subs	r3, r5, r3
		if (ticker_id_prev != TICKER_NULL) {
   10b36:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
   10b3a:	f8c8 3008 	str.w	r3, [r8, #8]
		if (ticker_id_prev != TICKER_NULL) {
   10b3e:	d0c0      	beq.n	10ac2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xac3>
   10b40:	fa0f f18e 	sxth.w	r1, lr
   10b44:	e7b3      	b.n	10aae <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xaaf>
   10b46:	bf00      	nop
   10b48:	ff172b5a 	.word	0xff172b5a
   10b4c:	7f172b59 	.word	0x7f172b59
	if (!pending) {
   10b50:	9b08      	ldr	r3, [sp, #32]
   10b52:	2b00      	cmp	r3, #0
   10b54:	f000 80a6 	beq.w	10ca4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xca5>
	instance->job_guard = 0U;
   10b58:	2300      	movs	r3, #0
   10b5a:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   10b5e:	9b07      	ldr	r3, [sp, #28]
   10b60:	2b00      	cmp	r3, #0
   10b62:	f040 80c4 	bne.w	10cee <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xcef>
   10b66:	f89b 201f 	ldrb.w	r2, [fp, #31]
	if (instance->worker_trigger) {
   10b6a:	b16a      	cbz	r2, 10b88 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb89>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   10b6c:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   10b70:	465b      	mov	r3, fp
   10b72:	2201      	movs	r2, #1
   10b74:	2103      	movs	r1, #3
   10b76:	2004      	movs	r0, #4
   10b78:	46a4      	mov	ip, r4
}
   10b7a:	b00f      	add	sp, #60	; 0x3c
   10b7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   10b80:	4760      	bx	ip
	instance->job_guard = 0U;
   10b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10b84:	f88b 301e 	strb.w	r3, [fp, #30]
}
   10b88:	b00f      	add	sp, #60	; 0x3c
   10b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticker->ticks_to_expire -= ticks_elapsed;
   10b8e:	eba3 030a 	sub.w	r3, r3, sl
   10b92:	60a3      	str	r3, [r4, #8]
			break;
   10b94:	f8db 3000 	ldr.w	r3, [fp]
   10b98:	9303      	str	r3, [sp, #12]
   10b9a:	e56a      	b.n	10672 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x673>
	count_user = instance->count_user;
   10b9c:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   10ba0:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   10ba4:	1e5c      	subs	r4, r3, #1
   10ba6:	b2e4      	uxtb	r4, r4
   10ba8:	2b00      	cmp	r3, #0
   10baa:	f43f acb2 	beq.w	10512 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x513>
		flag_compare_update = 1U;
   10bae:	2301      	movs	r3, #1
   10bb0:	9307      	str	r3, [sp, #28]
   10bb2:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   10bb6:	f04f 0900 	mov.w	r9, #0
		while (user->first != user->last) {
   10bba:	7863      	ldrb	r3, [r4, #1]
   10bbc:	78e1      	ldrb	r1, [r4, #3]
		user_op = &user->user_op[0];
   10bbe:	6865      	ldr	r5, [r4, #4]
		while (user->first != user->last) {
   10bc0:	4299      	cmp	r1, r3
   10bc2:	d10c      	bne.n	10bde <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbdf>
   10bc4:	e060      	b.n	10c88 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc89>
	switch (uop->op) {
   10bc6:	2b01      	cmp	r3, #1
   10bc8:	d05a      	beq.n	10c80 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc81>
			first = user->first + 1;
   10bca:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
   10bcc:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
   10bce:	3301      	adds	r3, #1
   10bd0:	b2db      	uxtb	r3, r3
				first = 0U;
   10bd2:	429a      	cmp	r2, r3
   10bd4:	bf08      	it	eq
   10bd6:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   10bd8:	4299      	cmp	r1, r3
			user->first = first;
   10bda:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   10bdc:	d054      	beq.n	10c88 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc89>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   10bde:	b21b      	sxth	r3, r3
   10be0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   10be4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   10be8:	eb05 0283 	add.w	r2, r5, r3, lsl #2
	switch (uop->op) {
   10bec:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
   10bf0:	2b02      	cmp	r3, #2
   10bf2:	d01b      	beq.n	10c2c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc2d>
   10bf4:	2b03      	cmp	r3, #3
   10bf6:	d1e6      	bne.n	10bc6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbc7>
		if (uop->id < instance->count_node) {
   10bf8:	7853      	ldrb	r3, [r2, #1]
   10bfa:	f89b 1008 	ldrb.w	r1, [fp, #8]
   10bfe:	4299      	cmp	r1, r3
   10c00:	d911      	bls.n	10c26 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc27>
			node[uop->id].priority =
   10c02:	f8db 1000 	ldr.w	r1, [fp]
   10c06:	7910      	ldrb	r0, [r2, #4]
   10c08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10c0c:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   10c10:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   10c14:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   10c18:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	if (fp_op_func) {
   10c1a:	b113      	cbz	r3, 10c22 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc23>
		fp_op_func(uop->status, uop->op_context);
   10c1c:	6b11      	ldr	r1, [r2, #48]	; 0x30
   10c1e:	6a90      	ldr	r0, [r2, #40]	; 0x28
   10c20:	4798      	blx	r3
   10c22:	78e1      	ldrb	r1, [r4, #3]
   10c24:	e7d1      	b.n	10bca <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbcb>
			uop->status = TICKER_STATUS_FAILURE;
   10c26:	2301      	movs	r3, #1
   10c28:	6293      	str	r3, [r2, #40]	; 0x28
   10c2a:	e7f5      	b.n	10c18 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc19>
		ticker_by_next_slot_get(instance,
   10c2c:	e9d2 7001 	ldrd	r7, r0, [r2, #4]
	_ticker_id_head = *ticker_id_head;
   10c30:	f897 e000 	ldrb.w	lr, [r7]
		ticker_by_next_slot_get(instance,
   10c34:	f8d2 c00c 	ldr.w	ip, [r2, #12]
	node = instance->nodes;
   10c38:	f8db 1000 	ldr.w	r1, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
   10c3c:	f8db 8014 	ldr.w	r8, [fp, #20]
   10c40:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   10c44:	d002      	beq.n	10c4c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc4d>
   10c46:	6803      	ldr	r3, [r0, #0]
   10c48:	4543      	cmp	r3, r8
   10c4a:	d024      	beq.n	10c96 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc97>
		_ticker_id_head = instance->ticker_id_head;
   10c4c:	f89b 301d 	ldrb.w	r3, [fp, #29]
		*ticks_current = instance->ticks_current;
   10c50:	f8c0 8000 	str.w	r8, [r0]
		_ticks_to_expire = 0U;
   10c54:	f04f 0e00 	mov.w	lr, #0
   10c58:	e00d      	b.n	10c76 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc77>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
   10c5a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   10c5e:	eb01 1800 	add.w	r8, r1, r0, lsl #4
   10c62:	0100      	lsls	r0, r0, #4
   10c64:	f8d8 a008 	ldr.w	sl, [r8, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
   10c68:	f8d8 8018 	ldr.w	r8, [r8, #24]
   10c6c:	44d6      	add	lr, sl
   10c6e:	f1b8 0f00 	cmp.w	r8, #0
   10c72:	d102      	bne.n	10c7a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc7b>
		_ticker_id_head = ticker->next;
   10c74:	5c0b      	ldrb	r3, [r1, r0]
	while ((_ticker_id_head != TICKER_NULL) &&
   10c76:	2bff      	cmp	r3, #255	; 0xff
   10c78:	d1ef      	bne.n	10c5a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc5b>
	*ticker_id_head = _ticker_id_head;
   10c7a:	703b      	strb	r3, [r7, #0]
	*ticks_to_expire = _ticks_to_expire;
   10c7c:	f8cc e000 	str.w	lr, [ip]
		fp_op_func = uop->fp_op_func;
   10c80:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   10c82:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		break;
   10c86:	e7c8      	b.n	10c1a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc1b>
	while (count_user--) {
   10c88:	42a6      	cmp	r6, r4
   10c8a:	f1a4 0308 	sub.w	r3, r4, #8
   10c8e:	f43f af63 	beq.w	10b58 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb59>
   10c92:	461c      	mov	r4, r3
   10c94:	e791      	b.n	10bba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbbb>
		ticker = &node[_ticker_id_head];
   10c96:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   10c9a:	011b      	lsls	r3, r3, #4
	_ticks_to_expire = *ticks_to_expire;
   10c9c:	f8dc e000 	ldr.w	lr, [ip]
		_ticker_id_head = ticker->next;
   10ca0:	5ccb      	ldrb	r3, [r1, r3]
	while ((_ticker_id_head != TICKER_NULL) &&
   10ca2:	e7e8      	b.n	10c76 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc77>
	count_user = instance->count_user;
   10ca4:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   10ca8:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   10cac:	1e5c      	subs	r4, r3, #1
   10cae:	b2e4      	uxtb	r4, r4
   10cb0:	2b00      	cmp	r3, #0
   10cb2:	f47f af7e 	bne.w	10bb2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbb3>
   10cb6:	e74f      	b.n	10b58 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb59>
		if (cntr_stop() == 0) {
   10cb8:	f009 fc06 	bl	1a4c8 <cntr_stop>
   10cbc:	2800      	cmp	r0, #0
   10cbe:	f47f af52 	bne.w	10b66 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb67>
			instance->ticks_slot_previous = 0U;
   10cc2:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   10cc6:	f009 fc25 	bl	1a514 <cntr_cnt_get>
   10cca:	f89b 201f 	ldrb.w	r2, [fp, #31]
   10cce:	f8cb 0014 	str.w	r0, [fp, #20]
   10cd2:	e74a      	b.n	10b6a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb6b>
	count_user = instance->count_user;
   10cd4:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
   10cd8:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   10cdc:	1e54      	subs	r4, r2, #1
   10cde:	b2e4      	uxtb	r4, r4
   10ce0:	2a00      	cmp	r2, #0
   10ce2:	f47f af65 	bne.w	10bb0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbb1>
	instance->job_guard = 0U;
   10ce6:	9b08      	ldr	r3, [sp, #32]
   10ce8:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   10cec:	e416      	b.n	1051c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x51d>
   10cee:	f89b 701d 	ldrb.w	r7, [fp, #29]
   10cf2:	e413      	b.n	1051c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x51d>
		ticks_current = cntr_cnt_get();
   10cf4:	f009 fc0e 	bl	1a514 <cntr_cnt_get>
   10cf8:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   10cfa:	f009 fbd5 	bl	1a4a8 <cntr_start>
   10cfe:	f89b 701d 	ldrb.w	r7, [fp, #29]
   10d02:	2800      	cmp	r0, #0
   10d04:	f47f ac11 	bne.w	1052a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x52b>
			instance->ticks_current = ticks_current;
   10d08:	f8cb 4014 	str.w	r4, [fp, #20]
   10d0c:	e40d      	b.n	1052a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x52b>
   10d0e:	bf00      	nop

00010d10 <ticker_init>:
{
   10d10:	b4f0      	push	{r4, r5, r6, r7}
   10d12:	9f04      	ldr	r7, [sp, #16]
   10d14:	f89d 4014 	ldrb.w	r4, [sp, #20]
   10d18:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   10d1a:	2800      	cmp	r0, #0
   10d1c:	d13e      	bne.n	10d9c <ticker_init+0x8c>
	instance->count_node = count_node;
   10d1e:	f8df c084 	ldr.w	ip, [pc, #132]	; 10da4 <ticker_init+0x94>
	while (count_node--) {
   10d22:	1e4d      	subs	r5, r1, #1
	instance->count_node = count_node;
   10d24:	f88c 1008 	strb.w	r1, [ip, #8]
	instance->nodes = node;
   10d28:	f8cc 2000 	str.w	r2, [ip]
	while (count_node--) {
   10d2c:	b2ed      	uxtb	r5, r5
   10d2e:	b149      	cbz	r1, 10d44 <ticker_init+0x34>
   10d30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   10d34:	eb02 1105 	add.w	r1, r2, r5, lsl #4
   10d38:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   10d3a:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   10d3e:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   10d42:	d1f9      	bne.n	10d38 <ticker_init+0x28>
	while (count_user--) {
   10d44:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   10d46:	f88c 3009 	strb.w	r3, [ip, #9]
	instance->users = user;
   10d4a:	f8cc 7004 	str.w	r7, [ip, #4]
	while (count_user--) {
   10d4e:	b2d2      	uxtb	r2, r2
   10d50:	b17b      	cbz	r3, 10d72 <ticker_init+0x62>
   10d52:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
		users[count_user].user_op = user_op_;
   10d56:	6056      	str	r6, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   10d58:	4611      	mov	r1, r2
   10d5a:	f812 3908 	ldrb.w	r3, [r2], #-8
   10d5e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
   10d62:	1ae4      	subs	r4, r4, r3
	while (count_user--) {
   10d64:	428f      	cmp	r7, r1
		user_op_ += users[count_user].count_user_op;
   10d66:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		count_op -= users[count_user].count_user_op;
   10d6a:	b2e4      	uxtb	r4, r4
		user_op_ += users[count_user].count_user_op;
   10d6c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	while (count_user--) {
   10d70:	d1f1      	bne.n	10d56 <ticker_init+0x46>
	if (count_op) {
   10d72:	b99c      	cbnz	r4, 10d9c <ticker_init+0x8c>
	instance->caller_id_get_cb = caller_id_get_cb;
   10d74:	9a07      	ldr	r2, [sp, #28]
   10d76:	f8cc 2020 	str.w	r2, [ip, #32]
	instance->sched_cb = sched_cb;
   10d7a:	9a08      	ldr	r2, [sp, #32]
   10d7c:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   10d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   10d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
	instance->ticks_elapsed_first = 0U;
   10d86:	f8ac 400a 	strh.w	r4, [ip, #10]
	return TICKER_STATUS_SUCCESS;
   10d8a:	4620      	mov	r0, r4
	instance->ticks_slot_previous = 0U;
   10d8c:	e9cc 4405 	strd	r4, r4, [ip, #20]
}
   10d90:	bcf0      	pop	{r4, r5, r6, r7}
	instance->trigger_set_cb = trigger_set_cb;
   10d92:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
   10d96:	f8ac 301c 	strh.w	r3, [ip, #28]
}
   10d9a:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   10d9c:	2001      	movs	r0, #1
}
   10d9e:	bcf0      	pop	{r4, r5, r6, r7}
   10da0:	4770      	bx	lr
   10da2:	bf00      	nop
   10da4:	20002c14 	.word	0x20002c14

00010da8 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   10da8:	4b04      	ldr	r3, [pc, #16]	; (10dbc <ticker_is_initialized+0x14>)
   10daa:	222c      	movs	r2, #44	; 0x2c
   10dac:	fb02 3000 	mla	r0, r2, r0, r3
   10db0:	7a00      	ldrb	r0, [r0, #8]
}
   10db2:	3800      	subs	r0, #0
   10db4:	bf18      	it	ne
   10db6:	2001      	movne	r0, #1
   10db8:	4770      	bx	lr
   10dba:	bf00      	nop
   10dbc:	20002c14 	.word	0x20002c14

00010dc0 <ticker_trigger>:
	if (instance->sched_cb) {
   10dc0:	4b0a      	ldr	r3, [pc, #40]	; (10dec <ticker_trigger+0x2c>)
   10dc2:	222c      	movs	r2, #44	; 0x2c
   10dc4:	fb02 3200 	mla	r2, r2, r0, r3
{
   10dc8:	b410      	push	{r4}
	if (instance->sched_cb) {
   10dca:	6a54      	ldr	r4, [r2, #36]	; 0x24
   10dcc:	b15c      	cbz	r4, 10de6 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   10dce:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   10dd2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   10dd6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   10dda:	46a4      	mov	ip, r4
   10ddc:	2201      	movs	r2, #1
}
   10dde:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   10de0:	2103      	movs	r1, #3
   10de2:	2002      	movs	r0, #2
   10de4:	4760      	bx	ip
}
   10de6:	bc10      	pop	{r4}
   10de8:	4770      	bx	lr
   10dea:	bf00      	nop
   10dec:	20002c14 	.word	0x20002c14

00010df0 <ticker_start_ext>:
{
   10df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   10df4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 10e98 <ticker_start_ext+0xa8>
{
   10df8:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
   10dfc:	272c      	movs	r7, #44	; 0x2c
   10dfe:	fb07 8700 	mla	r7, r7, r0, r8
{
   10e02:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   10e04:	687d      	ldr	r5, [r7, #4]
   10e06:	eb05 0cc1 	add.w	ip, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   10e0a:	f815 9031 	ldrb.w	r9, [r5, r1, lsl #3]
	last = user->last + 1;
   10e0e:	f89c 6003 	ldrb.w	r6, [ip, #3]
	struct ticker_instance *instance = &_instance[instance_index];
   10e12:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   10e16:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   10e1a:	1c75      	adds	r5, r6, #1
{
   10e1c:	4608      	mov	r0, r1
	last = user->last + 1;
   10e1e:	b2ed      	uxtb	r5, r5
	if (last == user->first) {
   10e20:	f89c 1001 	ldrb.w	r1, [ip, #1]
		last = 0U;
   10e24:	45a9      	cmp	r9, r5
   10e26:	bf98      	it	ls
   10e28:	2500      	movls	r5, #0
	if (last == user->first) {
   10e2a:	42a9      	cmp	r1, r5
	struct ticker_instance *instance = &_instance[instance_index];
   10e2c:	eb08 0884 	add.w	r8, r8, r4, lsl #2
	if (last == user->first) {
   10e30:	d02f      	beq.n	10e92 <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   10e32:	f8dc 1004 	ldr.w	r1, [ip, #4]
   10e36:	eb06 0446 	add.w	r4, r6, r6, lsl #1
   10e3a:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   10e3e:	eb01 0486 	add.w	r4, r1, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   10e42:	f04f 0904 	mov.w	r9, #4
   10e46:	f801 9026 	strb.w	r9, [r1, r6, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   10e4a:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   10e4c:	9b08      	ldr	r3, [sp, #32]
   10e4e:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   10e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10e52:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   10e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10e56:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   10e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10e5a:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   10e5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e5e:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   10e60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10e62:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   10e64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10e66:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   10e68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10e6a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   10e6c:	2102      	movs	r1, #2
	user_op->op_context = op_context;
   10e6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
   10e70:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
   10e72:	f8a4 e014 	strh.w	lr, [r4, #20]
	user_op->op_context = op_context;
   10e76:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   10e78:	62a1      	str	r1, [r4, #40]	; 0x28
	user->last = last;
   10e7a:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   10e7e:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   10e82:	4798      	blx	r3
   10e84:	4643      	mov	r3, r8
   10e86:	4649      	mov	r1, r9
   10e88:	2200      	movs	r2, #0
   10e8a:	47a8      	blx	r5
	return user_op->status;
   10e8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   10e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   10e92:	2001      	movs	r0, #1
}
   10e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10e98:	20002c14 	.word	0x20002c14

00010e9c <ticker_start>:
{
   10e9c:	b530      	push	{r4, r5, lr}
   10e9e:	b08b      	sub	sp, #44	; 0x2c
   10ea0:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10ea4:	9500      	str	r5, [sp, #0]
{
   10ea6:	9d10      	ldr	r5, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10ea8:	9401      	str	r4, [sp, #4]
   10eaa:	9502      	str	r5, [sp, #8]
{
   10eac:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
   10eb0:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10eb2:	9403      	str	r4, [sp, #12]
   10eb4:	9504      	str	r5, [sp, #16]
{
   10eb6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   10eb8:	9d14      	ldr	r5, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10eba:	9405      	str	r4, [sp, #20]
   10ebc:	9506      	str	r5, [sp, #24]
{
   10ebe:	9c15      	ldr	r4, [sp, #84]	; 0x54
   10ec0:	9d16      	ldr	r5, [sp, #88]	; 0x58
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10ec2:	9407      	str	r4, [sp, #28]
   10ec4:	2400      	movs	r4, #0
   10ec6:	e9cd 5408 	strd	r5, r4, [sp, #32]
   10eca:	f7ff ff91 	bl	10df0 <ticker_start_ext>
}
   10ece:	b00b      	add	sp, #44	; 0x2c
   10ed0:	bd30      	pop	{r4, r5, pc}
   10ed2:	bf00      	nop

00010ed4 <ticker_update>:
	struct ticker_instance *instance = &_instance[instance_index];
   10ed4:	f8df c098 	ldr.w	ip, [pc, #152]	; 10f70 <ticker_update+0x9c>
{
   10ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->users[user_id];
   10edc:	272c      	movs	r7, #44	; 0x2c
   10ede:	fb07 c700 	mla	r7, r7, r0, ip
{
   10ee2:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   10ee4:	687d      	ldr	r5, [r7, #4]
{
   10ee6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   10eea:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
   10eee:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   10ef0:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   10ef4:	f815 a030 	ldrb.w	sl, [r5, r0, lsl #3]
	last = user->last + 1;
   10ef8:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
   10efa:	f891 9001 	ldrb.w	r9, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   10efe:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   10f02:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   10f06:	1c75      	adds	r5, r6, #1
   10f08:	b2ed      	uxtb	r5, r5
		last = 0U;
   10f0a:	45aa      	cmp	sl, r5
   10f0c:	bf98      	it	ls
   10f0e:	2500      	movls	r5, #0
	if (last == user->first) {
   10f10:	45a9      	cmp	r9, r5
	struct ticker_instance *instance = &_instance[instance_index];
   10f12:	eb0c 0a84 	add.w	sl, ip, r4, lsl #2
	if (last == user->first) {
   10f16:	d028      	beq.n	10f6a <ticker_update+0x96>
	user_op = &user->user_op[user->last];
   10f18:	f8d1 c004 	ldr.w	ip, [r1, #4]
   10f1c:	eb06 0446 	add.w	r4, r6, r6, lsl #1
   10f20:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   10f24:	eb0c 0486 	add.w	r4, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   10f28:	f04f 0905 	mov.w	r9, #5
   10f2c:	f80c 9026 	strb.w	r9, [ip, r6, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   10f30:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   10f32:	9b08      	ldr	r3, [sp, #32]
   10f34:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   10f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f38:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   10f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10f3c:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   10f3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10f40:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   10f42:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   10f44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
   10f46:	7062      	strb	r2, [r4, #1]
	user_op->params.update.force = force;
   10f48:	f884 e016 	strb.w	lr, [r4, #22]
	user_op->op_context = op_context;
   10f4c:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->params.update.lazy = lazy;
   10f4e:	f8a4 8014 	strh.w	r8, [r4, #20]
	user_op->status = TICKER_STATUS_BUSY;
   10f52:	62a6      	str	r6, [r4, #40]	; 0x28
	user->last = last;
   10f54:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   10f56:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   10f5a:	4798      	blx	r3
   10f5c:	4653      	mov	r3, sl
   10f5e:	2200      	movs	r2, #0
   10f60:	2104      	movs	r1, #4
   10f62:	47a8      	blx	r5
	return user_op->status;
   10f64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   10f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
   10f6a:	2001      	movs	r0, #1
}
   10f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10f70:	20002c14 	.word	0x20002c14

00010f74 <ticker_stop>:
	struct ticker_instance *instance = &_instance[instance_index];
   10f74:	f8df c084 	ldr.w	ip, [pc, #132]	; 10ffc <ticker_stop+0x88>
{
   10f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	user = &instance->users[user_id];
   10f7c:	272c      	movs	r7, #44	; 0x2c
   10f7e:	fb07 c700 	mla	r7, r7, r0, ip
{
   10f82:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   10f84:	687d      	ldr	r5, [r7, #4]
{
   10f86:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   10f88:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   10f8c:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
   10f90:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
   10f92:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   10f96:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   10f9a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   10f9e:	1c75      	adds	r5, r6, #1
   10fa0:	b2ed      	uxtb	r5, r5
		last = 0U;
   10fa2:	45a8      	cmp	r8, r5
   10fa4:	bf98      	it	ls
   10fa6:	2500      	movls	r5, #0
	if (last == user->first) {
   10fa8:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
   10faa:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	if (last == user->first) {
   10fae:	d021      	beq.n	10ff4 <ticker_stop+0x80>
	user_op = &user->user_op[user->last];
   10fb0:	f8d1 c004 	ldr.w	ip, [r1, #4]
   10fb4:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
   10fb8:	eb06 068e 	add.w	r6, r6, lr, lsl #2
   10fbc:	eb0c 0886 	add.w	r8, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   10fc0:	f04f 0e06 	mov.w	lr, #6
   10fc4:	f80c e026 	strb.w	lr, [ip, r6, lsl #2]
	user_op->fp_op_func = fp_op_func;
   10fc8:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   10fcc:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   10fce:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
   10fd0:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->op_context = op_context;
   10fd4:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   10fd8:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
	user->last = last;
   10fdc:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   10fde:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   10fe2:	4798      	blx	r3
   10fe4:	4623      	mov	r3, r4
   10fe6:	2200      	movs	r2, #0
   10fe8:	2104      	movs	r1, #4
   10fea:	47a8      	blx	r5
	return user_op->status;
   10fec:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
   10ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10ff4:	2001      	movs	r0, #1
}
   10ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ffa:	bf00      	nop
   10ffc:	20002c14 	.word	0x20002c14

00011000 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   11000:	f009 ba88 	b.w	1a514 <cntr_cnt_get>

00011004 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11004:	1a40      	subs	r0, r0, r1
}
   11006:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1100a:	4770      	bx	lr

0001100c <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
   1100c:	2801      	cmp	r0, #1
   1100e:	d813      	bhi.n	11038 <ll_addr_get+0x2c>
{
   11010:	b508      	push	{r3, lr}
		return NULL;
	}

	if (addr_type) {
   11012:	b948      	cbnz	r0, 11028 <ll_addr_get+0x1c>
		}

		return rnd_addr;
	}

	if (bdaddr) {
   11014:	b131      	cbz	r1, 11024 <ll_addr_get+0x18>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   11016:	4608      	mov	r0, r1
   11018:	2206      	movs	r2, #6
   1101a:	4909      	ldr	r1, [pc, #36]	; (11040 <ll_addr_get+0x34>)
   1101c:	f010 fb43 	bl	216a6 <memcpy>
	}

	return pub_addr;
   11020:	4807      	ldr	r0, [pc, #28]	; (11040 <ll_addr_get+0x34>)
}
   11022:	bd08      	pop	{r3, pc}
	return pub_addr;
   11024:	4806      	ldr	r0, [pc, #24]	; (11040 <ll_addr_get+0x34>)
}
   11026:	bd08      	pop	{r3, pc}
		if (bdaddr) {
   11028:	b141      	cbz	r1, 1103c <ll_addr_get+0x30>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   1102a:	4608      	mov	r0, r1
   1102c:	2206      	movs	r2, #6
   1102e:	4905      	ldr	r1, [pc, #20]	; (11044 <ll_addr_get+0x38>)
   11030:	f010 fb39 	bl	216a6 <memcpy>
		return rnd_addr;
   11034:	4803      	ldr	r0, [pc, #12]	; (11044 <ll_addr_get+0x38>)
}
   11036:	bd08      	pop	{r3, pc}
		return NULL;
   11038:	2000      	movs	r0, #0
}
   1103a:	4770      	bx	lr
		return rnd_addr;
   1103c:	4801      	ldr	r0, [pc, #4]	; (11044 <ll_addr_get+0x38>)
}
   1103e:	bd08      	pop	{r3, pc}
   11040:	20002c40 	.word	0x20002c40
   11044:	20002c48 	.word	0x20002c48

00011048 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   11048:	b570      	push	{r4, r5, r6, lr}
   1104a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   1104c:	2000      	movs	r0, #0
{
   1104e:	460e      	mov	r6, r1
		if (ull_adv_is_enabled(0)) {
   11050:	f003 f8a4 	bl	1419c <ull_adv_is_enabled>
   11054:	b978      	cbnz	r0, 11076 <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   11056:	b13c      	cbz	r4, 11068 <ll_addr_set+0x20>
   11058:	4605      	mov	r5, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   1105a:	4631      	mov	r1, r6
   1105c:	2206      	movs	r2, #6
   1105e:	4807      	ldr	r0, [pc, #28]	; (1107c <ll_addr_set+0x34>)
   11060:	f010 fb21 	bl	216a6 <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   11064:	4628      	mov	r0, r5
}
   11066:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   11068:	4631      	mov	r1, r6
   1106a:	2206      	movs	r2, #6
   1106c:	4804      	ldr	r0, [pc, #16]	; (11080 <ll_addr_set+0x38>)
   1106e:	f010 fb1a 	bl	216a6 <memcpy>
	return 0;
   11072:	4620      	mov	r0, r4
}
   11074:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   11076:	200c      	movs	r0, #12
}
   11078:	bd70      	pop	{r4, r5, r6, pc}
   1107a:	bf00      	nop
   1107c:	20002c48 	.word	0x20002c48
   11080:	20002c40 	.word	0x20002c40

00011084 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   11084:	2802      	cmp	r0, #2
   11086:	d001      	beq.n	1108c <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   11088:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   1108a:	4770      	bx	lr
{
   1108c:	b538      	push	{r3, r4, r5, lr}
   1108e:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   11090:	4608      	mov	r0, r1
   11092:	461d      	mov	r5, r3
   11094:	f003 fd28 	bl	14ae8 <ll_connected_get>
			if (!conn) {
   11098:	b110      	cbz	r0, 110a0 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   1109a:	2000      	movs	r0, #0
   1109c:	7028      	strb	r0, [r5, #0]
}
   1109e:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   110a0:	4620      	mov	r0, r4
}
   110a2:	bd38      	pop	{r3, r4, r5, pc}

000110a4 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   110a4:	2300      	movs	r3, #0
   110a6:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   110a8:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   110aa:	4770      	bx	lr

000110ac <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   110ac:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   110ae:	4802      	ldr	r0, [pc, #8]	; (110b8 <hci_driver_init+0xc>)
   110b0:	f7f8 fed2 	bl	9e58 <bt_hci_driver_register>

	return 0;
}
   110b4:	2000      	movs	r0, #0
   110b6:	bd08      	pop	{r3, pc}
   110b8:	0002570c 	.word	0x0002570c

000110bc <recv_thread>:
{
   110bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   110be:	4d37      	ldr	r5, [pc, #220]	; (1119c <recv_thread+0xe0>)
		LL_ASSERT(0);
   110c0:	4f37      	ldr	r7, [pc, #220]	; (111a0 <recv_thread+0xe4>)
   110c2:	4e38      	ldr	r6, [pc, #224]	; (111a4 <recv_thread+0xe8>)
{
   110c4:	b083      	sub	sp, #12
   110c6:	e015      	b.n	110f4 <recv_thread+0x38>
	switch (class) {
   110c8:	2b00      	cmp	r3, #0
   110ca:	d13c      	bne.n	11146 <recv_thread+0x8a>
		LL_ASSERT(0);
   110cc:	4836      	ldr	r0, [pc, #216]	; (111a8 <recv_thread+0xec>)
   110ce:	23cf      	movs	r3, #207	; 0xcf
   110d0:	463a      	mov	r2, r7
   110d2:	4631      	mov	r1, r6
   110d4:	f00d ffbe 	bl	1f054 <printk>
   110d8:	4040      	eors	r0, r0
   110da:	f380 8811 	msr	BASEPRI, r0
   110de:	f04f 0003 	mov.w	r0, #3
   110e2:	df02      	svc	2
	node_rx->hdr.next = NULL;
   110e4:	9b01      	ldr	r3, [sp, #4]
   110e6:	2200      	movs	r2, #0
   110e8:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   110ea:	a801      	add	r0, sp, #4
   110ec:	f002 f944 	bl	13378 <ll_rx_mem_release>
	z_impl_k_yield();
   110f0:	f00d fa54 	bl	1e59c <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
   110f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   110f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   110fc:	4628      	mov	r0, r5
   110fe:	f00c fef1 	bl	1dee4 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   11102:	2800      	cmp	r0, #0
   11104:	d0f4      	beq.n	110f0 <recv_thread+0x34>
	uint8_t class = node_rx->hdr.user_meta;
   11106:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   11108:	9001      	str	r0, [sp, #4]
	switch (class) {
   1110a:	2b04      	cmp	r3, #4
   1110c:	d9dc      	bls.n	110c8 <recv_thread+0xc>
   1110e:	2b05      	cmp	r3, #5
   11110:	d1dc      	bne.n	110cc <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   11112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1111a:	2003      	movs	r0, #3
   1111c:	f7f7 fa14 	bl	8548 <bt_buf_get_rx>
   11120:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   11122:	4601      	mov	r1, r0
   11124:	9801      	ldr	r0, [sp, #4]
   11126:	f000 ff25 	bl	11f74 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   1112a:	9b01      	ldr	r3, [sp, #4]
   1112c:	2200      	movs	r2, #0
   1112e:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11130:	a801      	add	r0, sp, #4
   11132:	f002 f921 	bl	13378 <ll_rx_mem_release>
		if (buf) {
   11136:	2c00      	cmp	r4, #0
   11138:	d0da      	beq.n	110f0 <recv_thread+0x34>
			if (buf->len) {
   1113a:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   1113c:	4620      	mov	r0, r4
			if (buf->len) {
   1113e:	b1db      	cbz	r3, 11178 <recv_thread+0xbc>
				bt_recv(buf);
   11140:	f7f8 fdc8 	bl	9cd4 <bt_recv>
   11144:	e7d4      	b.n	110f0 <recv_thread+0x34>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   11146:	2b02      	cmp	r3, #2
   11148:	d019      	beq.n	1117e <recv_thread+0xc2>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1114a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1114e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11152:	2001      	movs	r0, #1
   11154:	f7f7 f9f8 	bl	8548 <bt_buf_get_rx>
   11158:	4604      	mov	r4, r0
		if (buf) {
   1115a:	9801      	ldr	r0, [sp, #4]
   1115c:	b1cc      	cbz	r4, 11192 <recv_thread+0xd6>
			hci_evt_encode(node_rx, buf);
   1115e:	4621      	mov	r1, r4
   11160:	f000 ff42 	bl	11fe8 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   11164:	9b01      	ldr	r3, [sp, #4]
   11166:	2200      	movs	r2, #0
   11168:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   1116a:	a801      	add	r0, sp, #4
   1116c:	f002 f904 	bl	13378 <ll_rx_mem_release>
			if (buf->len) {
   11170:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   11172:	4620      	mov	r0, r4
			if (buf->len) {
   11174:	2b00      	cmp	r3, #0
   11176:	d1e3      	bne.n	11140 <recv_thread+0x84>
				net_buf_unref(buf);
   11178:	f00a f9ec 	bl	1b554 <net_buf_unref>
   1117c:	e7b8      	b.n	110f0 <recv_thread+0x34>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   1117e:	2200      	movs	r2, #0
   11180:	2300      	movs	r3, #0
   11182:	2101      	movs	r1, #1
   11184:	2000      	movs	r0, #0
   11186:	f7f7 fa15 	bl	85b4 <bt_buf_get_evt>
   1118a:	4604      	mov	r4, r0
		if (buf) {
   1118c:	9801      	ldr	r0, [sp, #4]
   1118e:	2c00      	cmp	r4, #0
   11190:	d1e5      	bne.n	1115e <recv_thread+0xa2>
	node_rx->hdr.next = NULL;
   11192:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   11194:	a801      	add	r0, sp, #4
   11196:	f002 f8ef 	bl	13378 <ll_rx_mem_release>
		if (buf) {
   1119a:	e7a9      	b.n	110f0 <recv_thread+0x34>
   1119c:	200008f0 	.word	0x200008f0
   111a0:	0002564c 	.word	0x0002564c
   111a4:	0002568c 	.word	0x0002568c
   111a8:	0002561c 	.word	0x0002561c

000111ac <prio_recv_thread>:
{
   111ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   111b0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 11268 <prio_recv_thread+0xbc>
				k_fifo_put(&recv_fifo, node_rx);
   111b4:	4f2b      	ldr	r7, [pc, #172]	; (11264 <prio_recv_thread+0xb8>)
{
   111b6:	b082      	sub	sp, #8
   111b8:	e00c      	b.n	111d4 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   111ba:	f7f7 f9fb 	bl	85b4 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   111be:	4622      	mov	r2, r4
   111c0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   111c4:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   111c6:	f001 f987 	bl	124d8 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   111ca:	4620      	mov	r0, r4
   111cc:	f7f8 fe26 	bl	9e1c <bt_recv_prio>
	z_impl_k_yield();
   111d0:	f00d f9e4 	bl	1e59c <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   111d4:	f10d 0102 	add.w	r1, sp, #2
   111d8:	a801      	add	r0, sp, #4
   111da:	f001 ff23 	bl	13024 <ll_rx_get>
   111de:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   111e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   111e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   111e8:	2100      	movs	r1, #0
   111ea:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   111ec:	2c00      	cmp	r4, #0
   111ee:	d1e4      	bne.n	111ba <prio_recv_thread+0xe>
		if (node_rx) {
   111f0:	9b01      	ldr	r3, [sp, #4]
   111f2:	b193      	cbz	r3, 1121a <prio_recv_thread+0x6e>
			ll_rx_dequeue();
   111f4:	f001 fff0 	bl	131d8 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   111f8:	9e01      	ldr	r6, [sp, #4]
   111fa:	4630      	mov	r0, r6
   111fc:	f001 f984 	bl	12508 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   11200:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11202:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   11204:	796b      	ldrb	r3, [r5, #5]
   11206:	2b03      	cmp	r3, #3
   11208:	d102      	bne.n	11210 <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   1120a:	792b      	ldrb	r3, [r5, #4]
   1120c:	2b12      	cmp	r3, #18
   1120e:	d00c      	beq.n	1122a <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
   11210:	4629      	mov	r1, r5
   11212:	4638      	mov	r0, r7
   11214:	f012 ffd4 	bl	241c0 <k_queue_append>
			continue;
   11218:	e7dc      	b.n	111d4 <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
   1121a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1121e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11222:	4640      	mov	r0, r8
   11224:	f00d fa56 	bl	1e6d4 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11228:	e7d4      	b.n	111d4 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   1122a:	4621      	mov	r1, r4
   1122c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11234:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   11236:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   11238:	f7f7 f9bc 	bl	85b4 <bt_buf_get_evt>
   1123c:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   1123e:	4622      	mov	r2, r4
   11240:	f105 001c 	add.w	r0, r5, #28
   11244:	4631      	mov	r1, r6
   11246:	f000 fe7d 	bl	11f44 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   1124a:	4630      	mov	r0, r6
   1124c:	f000 fe8a 	bl	11f64 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   11250:	4620      	mov	r0, r4
			if (buf) {
   11252:	b124      	cbz	r4, 1125e <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
   11254:	f7f8 fde2 	bl	9e1c <bt_recv_prio>
					net_buf_unref(buf);
   11258:	4620      	mov	r0, r4
   1125a:	f00a f97b 	bl	1b554 <net_buf_unref>
   1125e:	9d01      	ldr	r5, [sp, #4]
   11260:	e7d6      	b.n	11210 <prio_recv_thread+0x64>
   11262:	bf00      	nop
   11264:	200008f0 	.word	0x200008f0
   11268:	200008c0 	.word	0x200008c0

0001126c <hci_driver_send>:
{
   1126c:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   1126e:	8983      	ldrh	r3, [r0, #12]
{
   11270:	b083      	sub	sp, #12
	if (!buf->len) {
   11272:	2b00      	cmp	r3, #0
   11274:	d03a      	beq.n	112ec <hci_driver_send+0x80>
	return ((struct bt_buf_data *)net_buf_user_data(buf))->type;
   11276:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   11278:	4604      	mov	r4, r0
   1127a:	b31b      	cbz	r3, 112c4 <hci_driver_send+0x58>
   1127c:	2b02      	cmp	r3, #2
   1127e:	d00f      	beq.n	112a0 <hci_driver_send+0x34>
   11280:	4921      	ldr	r1, [pc, #132]	; (11308 <hci_driver_send+0x9c>)
   11282:	4a22      	ldr	r2, [pc, #136]	; (1130c <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
   11284:	4822      	ldr	r0, [pc, #136]	; (11310 <hci_driver_send+0xa4>)
   11286:	1a52      	subs	r2, r2, r1
   11288:	08d2      	lsrs	r2, r2, #3
   1128a:	0192      	lsls	r2, r2, #6
   1128c:	4619      	mov	r1, r3
   1128e:	f042 0201 	orr.w	r2, r2, #1
   11292:	f00e fbba 	bl	1fa0a <log_1>
		return -EINVAL;
   11296:	f06f 0515 	mvn.w	r5, #21
}
   1129a:	4628      	mov	r0, r5
   1129c:	b003      	add	sp, #12
   1129e:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   112a0:	a901      	add	r1, sp, #4
   112a2:	f000 fdb7 	bl	11e14 <hci_acl_handle>
	if (evt) {
   112a6:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   112a8:	4605      	mov	r5, r0
	if (evt) {
   112aa:	b113      	cbz	r3, 112b2 <hci_driver_send+0x46>
		bt_recv_prio(evt);
   112ac:	4618      	mov	r0, r3
   112ae:	f7f8 fdb5 	bl	9e1c <bt_recv_prio>
	if (!err) {
   112b2:	2d00      	cmp	r5, #0
   112b4:	d1f1      	bne.n	1129a <hci_driver_send+0x2e>
		net_buf_unref(buf);
   112b6:	4620      	mov	r0, r4
   112b8:	f00a f94c 	bl	1b554 <net_buf_unref>
   112bc:	2500      	movs	r5, #0
}
   112be:	4628      	mov	r0, r5
   112c0:	b003      	add	sp, #12
   112c2:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   112c4:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   112c6:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   112c8:	f000 f9b4 	bl	11634 <hci_cmd_handle>
	if (evt) {
   112cc:	2800      	cmp	r0, #0
   112ce:	d0f2      	beq.n	112b6 <hci_driver_send+0x4a>
		bt_recv_prio(evt);
   112d0:	f7f8 fda4 	bl	9e1c <bt_recv_prio>
		if (node_rx) {
   112d4:	9d01      	ldr	r5, [sp, #4]
   112d6:	2d00      	cmp	r5, #0
   112d8:	d0ed      	beq.n	112b6 <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   112da:	4628      	mov	r0, r5
   112dc:	f001 f914 	bl	12508 <hci_get_class>
   112e0:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   112e2:	9901      	ldr	r1, [sp, #4]
   112e4:	480b      	ldr	r0, [pc, #44]	; (11314 <hci_driver_send+0xa8>)
   112e6:	f012 ff6b 	bl	241c0 <k_queue_append>
	if (!err) {
   112ea:	e7e4      	b.n	112b6 <hci_driver_send+0x4a>
   112ec:	4b06      	ldr	r3, [pc, #24]	; (11308 <hci_driver_send+0x9c>)
   112ee:	4907      	ldr	r1, [pc, #28]	; (1130c <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
   112f0:	4809      	ldr	r0, [pc, #36]	; (11318 <hci_driver_send+0xac>)
   112f2:	1ac9      	subs	r1, r1, r3
   112f4:	08c9      	lsrs	r1, r1, #3
   112f6:	0189      	lsls	r1, r1, #6
   112f8:	f041 0101 	orr.w	r1, r1, #1
   112fc:	f00e fb78 	bl	1f9f0 <log_0>
		return -EINVAL;
   11300:	f06f 0515 	mvn.w	r5, #21
   11304:	e7c9      	b.n	1129a <hci_driver_send+0x2e>
   11306:	bf00      	nop
   11308:	00024c24 	.word	0x00024c24
   1130c:	00024c6c 	.word	0x00024c6c
   11310:	000256a4 	.word	0x000256a4
   11314:	200008f0 	.word	0x200008f0
   11318:	00025690 	.word	0x00025690

0001131c <hci_driver_open>:
{
   1131c:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   1131e:	4822      	ldr	r0, [pc, #136]	; (113a8 <hci_driver_open+0x8c>)
{
   11320:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   11322:	f001 fba9 	bl	12a78 <ll_init>
	if (err) {
   11326:	4604      	mov	r4, r0
   11328:	2800      	cmp	r0, #0
   1132a:	d12e      	bne.n	1138a <hci_driver_open+0x6e>
	hci_init(NULL);
   1132c:	f001 f902 	bl	12534 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   11330:	2600      	movs	r6, #0
   11332:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11334:	f06f 0309 	mvn.w	r3, #9
   11338:	9303      	str	r3, [sp, #12]
   1133a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1133e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   11342:	4b1a      	ldr	r3, [pc, #104]	; (113ac <hci_driver_open+0x90>)
   11344:	491a      	ldr	r1, [pc, #104]	; (113b0 <hci_driver_open+0x94>)
   11346:	9404      	str	r4, [sp, #16]
   11348:	9400      	str	r4, [sp, #0]
   1134a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1134e:	4819      	ldr	r0, [pc, #100]	; (113b4 <hci_driver_open+0x98>)
   11350:	f00d fa34 	bl	1e7bc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   11354:	4918      	ldr	r1, [pc, #96]	; (113b8 <hci_driver_open+0x9c>)
   11356:	4817      	ldr	r0, [pc, #92]	; (113b4 <hci_driver_open+0x98>)
   11358:	f013 f898 	bl	2448c <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1135c:	f06f 0307 	mvn.w	r3, #7
   11360:	9303      	str	r3, [sp, #12]
   11362:	e9cd 6706 	strd	r6, r7, [sp, #24]
   11366:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1136a:	4b14      	ldr	r3, [pc, #80]	; (113bc <hci_driver_open+0xa0>)
   1136c:	4914      	ldr	r1, [pc, #80]	; (113c0 <hci_driver_open+0xa4>)
   1136e:	9404      	str	r4, [sp, #16]
   11370:	9400      	str	r4, [sp, #0]
   11372:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11376:	4813      	ldr	r0, [pc, #76]	; (113c4 <hci_driver_open+0xa8>)
   11378:	f00d fa20 	bl	1e7bc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1137c:	4912      	ldr	r1, [pc, #72]	; (113c8 <hci_driver_open+0xac>)
   1137e:	4811      	ldr	r0, [pc, #68]	; (113c4 <hci_driver_open+0xa8>)
   11380:	f013 f884 	bl	2448c <z_impl_k_thread_name_set>
}
   11384:	4620      	mov	r0, r4
   11386:	b008      	add	sp, #32
   11388:	bdd0      	pop	{r4, r6, r7, pc}
   1138a:	4b10      	ldr	r3, [pc, #64]	; (113cc <hci_driver_open+0xb0>)
   1138c:	4a10      	ldr	r2, [pc, #64]	; (113d0 <hci_driver_open+0xb4>)
		BT_ERR("LL initialization failed: %d", err);
   1138e:	4811      	ldr	r0, [pc, #68]	; (113d4 <hci_driver_open+0xb8>)
   11390:	1ad2      	subs	r2, r2, r3
   11392:	08d2      	lsrs	r2, r2, #3
   11394:	0192      	lsls	r2, r2, #6
   11396:	f042 0201 	orr.w	r2, r2, #1
   1139a:	4621      	mov	r1, r4
   1139c:	f00e fb35 	bl	1fa0a <log_1>
}
   113a0:	4620      	mov	r0, r4
   113a2:	b008      	add	sp, #32
   113a4:	bdd0      	pop	{r4, r6, r7, pc}
   113a6:	bf00      	nop
   113a8:	200008c0 	.word	0x200008c0
   113ac:	000111ad 	.word	0x000111ad
   113b0:	20007d40 	.word	0x20007d40
   113b4:	20001268 	.word	0x20001268
   113b8:	000256d8 	.word	0x000256d8
   113bc:	000110bd 	.word	0x000110bd
   113c0:	20007f20 	.word	0x20007f20
   113c4:	200012f0 	.word	0x200012f0
   113c8:	000256e4 	.word	0x000256e4
   113cc:	00024c24 	.word	0x00024c24
   113d0:	00024c6c 	.word	0x00024c6c
   113d4:	000256b8 	.word	0x000256b8

000113d8 <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
   113d8:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   113da:	4b07      	ldr	r3, [pc, #28]	; (113f8 <cmd_complete_status+0x20>)
{
   113dc:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   113de:	2101      	movs	r1, #1
   113e0:	8818      	ldrh	r0, [r3, #0]
   113e2:	f010 fc64 	bl	21cae <bt_hci_cmd_complete_create>
	ccst = net_buf_add(buf, sizeof(*ccst));
   113e6:	2101      	movs	r1, #1
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   113e8:	4604      	mov	r4, r0
	ccst = net_buf_add(buf, sizeof(*ccst));
   113ea:	3008      	adds	r0, #8
   113ec:	f012 fa2e 	bl	2384c <net_buf_simple_add>
   113f0:	4603      	mov	r3, r0
	ccst->status = status;

	return buf;
}
   113f2:	4620      	mov	r0, r4
	ccst->status = status;
   113f4:	701d      	strb	r5, [r3, #0]
}
   113f6:	bd38      	pop	{r3, r4, r5, pc}
   113f8:	200042aa 	.word	0x200042aa

000113fc <meta_evt>:

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
   113fc:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   113fe:	f100 0408 	add.w	r4, r0, #8
{
   11402:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   11404:	4620      	mov	r0, r4
   11406:	2102      	movs	r1, #2
{
   11408:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   1140a:	f012 fa1f 	bl	2384c <net_buf_simple_add>
	struct bt_hci_evt_le_meta_event *me;

	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1140e:	1c6b      	adds	r3, r5, #1
	hdr->evt = evt;
   11410:	223e      	movs	r2, #62	; 0x3e
   11412:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   11414:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   11416:	2101      	movs	r1, #1
   11418:	4620      	mov	r0, r4
   1141a:	f012 fa17 	bl	2384c <net_buf_simple_add>
	me->subevent = subevt;
   1141e:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
   11420:	4629      	mov	r1, r5
   11422:	4620      	mov	r0, r4
}
   11424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
   11428:	f012 ba10 	b.w	2384c <net_buf_simple_add>

0001142c <encrypt_change.part.0>:
	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
}

static void encrypt_change(uint8_t err, uint16_t handle,
   1142c:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   1142e:	f102 0508 	add.w	r5, r2, #8
static void encrypt_change(uint8_t err, uint16_t handle,
   11432:	4604      	mov	r4, r0
   11434:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   11436:	4628      	mov	r0, r5
   11438:	2102      	movs	r1, #2
   1143a:	f012 fa07 	bl	2384c <net_buf_simple_add>
   1143e:	4603      	mov	r3, r0
	hdr->evt = evt;
   11440:	2208      	movs	r2, #8
	hdr->len = len;
   11442:	2104      	movs	r1, #4
	hdr->evt = evt;
   11444:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   11446:	7059      	strb	r1, [r3, #1]
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
		return;
	}

	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));
   11448:	4628      	mov	r0, r5
   1144a:	f012 f9ff 	bl	2384c <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
   1144e:	fab4 f384 	clz	r3, r4
   11452:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   11454:	7004      	strb	r4, [r0, #0]
	ep->encrypt = !err ? 1 : 0;
   11456:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
   11458:	f8a0 6001 	strh.w	r6, [r0, #1]
}
   1145c:	bd70      	pop	{r4, r5, r6, pc}
   1145e:	bf00      	nop

00011460 <le_remote_feat_complete>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   11460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11464:	4c17      	ldr	r4, [pc, #92]	; (114c4 <le_remote_feat_complete+0x64>)
   11466:	6866      	ldr	r6, [r4, #4]
   11468:	f04f 0900 	mov.w	r9, #0
   1146c:	464c      	mov	r4, r9
   1146e:	f006 5500 	and.w	r5, r6, #536870912	; 0x20000000
{
   11472:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11474:	ea54 0205 	orrs.w	r2, r4, r5
   11478:	d009      	beq.n	1148e <le_remote_feat_complete+0x2e>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   1147a:	4a13      	ldr	r2, [pc, #76]	; (114c8 <le_remote_feat_complete+0x68>)
   1147c:	6812      	ldr	r2, [r2, #0]
   1147e:	4606      	mov	r6, r0
   11480:	4688      	mov	r8, r1
   11482:	f002 0008 	and.w	r0, r2, #8
   11486:	4649      	mov	r1, r9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11488:	ea50 0201 	orrs.w	r2, r0, r1
   1148c:	d101      	bne.n	11492 <le_remote_feat_complete+0x32>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   1148e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   11492:	4618      	mov	r0, r3
   11494:	220b      	movs	r2, #11
   11496:	2104      	movs	r1, #4
   11498:	f7ff ffb0 	bl	113fc <meta_evt>
	sep->status = status;
   1149c:	7006      	strb	r6, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   1149e:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
   114a2:	b93e      	cbnz	r6, 114b4 <le_remote_feat_complete+0x54>
		memcpy(&sep->features[0],
   114a4:	f108 0104 	add.w	r1, r8, #4
   114a8:	3003      	adds	r0, #3
}
   114aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(&sep->features[0],
   114ae:	2208      	movs	r2, #8
   114b0:	f010 b8f9 	b.w	216a6 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   114b4:	4649      	mov	r1, r9
   114b6:	3003      	adds	r0, #3
}
   114b8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   114bc:	2208      	movs	r2, #8
   114be:	f010 b91d 	b.w	216fc <memset>
   114c2:	bf00      	nop
   114c4:	20000120 	.word	0x20000120
   114c8:	20000128 	.word	0x20000128

000114cc <hci_disconn_complete_encode.part.0>:
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
   114cc:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   114ce:	f102 0408 	add.w	r4, r2, #8
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
   114d2:	4605      	mov	r5, r0
   114d4:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   114d6:	4620      	mov	r0, r4
   114d8:	2102      	movs	r1, #2
   114da:	f012 f9b7 	bl	2384c <net_buf_simple_add>
   114de:	4603      	mov	r3, r0
	hdr->evt = evt;
   114e0:	2205      	movs	r2, #5
	hdr->len = len;
   114e2:	2104      	movs	r1, #4
	hdr->evt = evt;
   114e4:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   114e6:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   114e8:	4620      	mov	r0, r4
   114ea:	f012 f9af 	bl	2384c <net_buf_simple_add>
	ep->status = 0x00;
   114ee:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
   114f0:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->status = 0x00;
   114f4:	7003      	strb	r3, [r0, #0]
	ep->reason = *((uint8_t *)pdu_data);
   114f6:	782b      	ldrb	r3, [r5, #0]
   114f8:	70c3      	strb	r3, [r0, #3]
}
   114fa:	bd70      	pop	{r4, r5, r6, pc}

000114fc <hci_cmd_complete>:
{
   114fc:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   114fe:	4b06      	ldr	r3, [pc, #24]	; (11518 <hci_cmd_complete+0x1c>)
{
   11500:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11502:	8818      	ldrh	r0, [r3, #0]
{
   11504:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11506:	f010 fbd2 	bl	21cae <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   1150a:	4621      	mov	r1, r4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1150c:	6028      	str	r0, [r5, #0]
}
   1150e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
   11512:	3008      	adds	r0, #8
   11514:	f012 b99a 	b.w	2384c <net_buf_simple_add>
   11518:	200042aa 	.word	0x200042aa

0001151c <hci_vendor_cmd_handle_common>:
{
   1151c:	b570      	push	{r4, r5, r6, lr}
   1151e:	1e43      	subs	r3, r0, #1
   11520:	b086      	sub	sp, #24
   11522:	4614      	mov	r4, r2
   11524:	2b09      	cmp	r3, #9
   11526:	d806      	bhi.n	11536 <hci_vendor_cmd_handle_common+0x1a>
   11528:	e8df f003 	tbb	[pc, r3]
   1152c:	05382109 	.word	0x05382109
   11530:	51054605 	.word	0x51054605
   11534:	7465      	.short	0x7465
	return 0;
   11536:	f06f 0015 	mvn.w	r0, #21
}
   1153a:	b006      	add	sp, #24
   1153c:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1153e:	4620      	mov	r0, r4
   11540:	210d      	movs	r1, #13
   11542:	f7ff ffdb 	bl	114fc <hci_cmd_complete>
   11546:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   11548:	2202      	movs	r2, #2
	rp->status = 0x00;
   1154a:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   1154c:	2404      	movs	r4, #4
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   1154e:	2163      	movs	r1, #99	; 0x63
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   11550:	71dc      	strb	r4, [r3, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   11552:	7259      	strb	r1, [r3, #9]
	rp->status = 0x00;
   11554:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   11556:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   11558:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   1155a:	7158      	strb	r0, [r3, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   1155c:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   1155e:	7298      	strb	r0, [r3, #10]
   11560:	72d8      	strb	r0, [r3, #11]
   11562:	7318      	strb	r0, [r3, #12]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   11564:	705a      	strb	r2, [r3, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   11566:	70da      	strb	r2, [r3, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   11568:	719a      	strb	r2, [r3, #6]
}
   1156a:	b006      	add	sp, #24
   1156c:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1156e:	4620      	mov	r0, r4
   11570:	2141      	movs	r1, #65	; 0x41
   11572:	f7ff ffc3 	bl	114fc <hci_cmd_complete>
	rp->status = 0x00;
   11576:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11578:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1157a:	4621      	mov	r1, r4
	rp->status = 0x00;
   1157c:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   11580:	2240      	movs	r2, #64	; 0x40
   11582:	f010 f8bb 	bl	216fc <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   11586:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   11588:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   1158a:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   1158e:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   11592:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   11594:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   11596:	70ab      	strb	r3, [r5, #2]
}
   11598:	b006      	add	sp, #24
   1159a:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1159c:	4620      	mov	r0, r4
   1159e:	2109      	movs	r1, #9
   115a0:	f7ff ffac 	bl	114fc <hci_cmd_complete>
	rp->status = 0x00;
   115a4:	2400      	movs	r4, #0
   115a6:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   115aa:	4621      	mov	r1, r4
   115ac:	2208      	movs	r2, #8
   115ae:	f010 f8a5 	bl	216fc <memset>
	return 0;
   115b2:	4620      	mov	r0, r4
}
   115b4:	b006      	add	sp, #24
   115b6:	bd70      	pop	{r4, r5, r6, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   115b8:	6889      	ldr	r1, [r1, #8]
   115ba:	2000      	movs	r0, #0
   115bc:	f7ff fd44 	bl	11048 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
   115c0:	2000      	movs	r0, #0
   115c2:	f7ff ff09 	bl	113d8 <cmd_complete_status>
   115c6:	6020      	str	r0, [r4, #0]
   115c8:	2000      	movs	r0, #0
}
   115ca:	b006      	add	sp, #24
   115cc:	bd70      	pop	{r4, r5, r6, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   115ce:	4e18      	ldr	r6, [pc, #96]	; (11630 <hci_vendor_cmd_handle_common+0x114>)
   115d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   115d2:	ad01      	add	r5, sp, #4
   115d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   115d6:	6833      	ldr	r3, [r6, #0]
   115d8:	802b      	strh	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   115da:	4620      	mov	r0, r4
   115dc:	2113      	movs	r1, #19
   115de:	f7ff ff8d 	bl	114fc <hci_cmd_complete>
	rp->status = 0x00;
   115e2:	2400      	movs	r4, #0
   115e4:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   115e8:	2212      	movs	r2, #18
   115ea:	a901      	add	r1, sp, #4
   115ec:	f010 f85b 	bl	216a6 <memcpy>
	return 0;
   115f0:	4620      	mov	r0, r4
}
   115f2:	b006      	add	sp, #24
   115f4:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   115f6:	4620      	mov	r0, r4
   115f8:	2118      	movs	r1, #24
   115fa:	f7ff ff7f 	bl	114fc <hci_cmd_complete>
	rp->status = 0x00;
   115fe:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   11600:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   11602:	2101      	movs	r1, #1
	rp->status = 0x00;
   11604:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   11608:	f009 fe2e 	bl	1b268 <hci_vendor_read_static_addr>
   1160c:	7068      	strb	r0, [r5, #1]
	return 0;
   1160e:	4620      	mov	r0, r4
}
   11610:	b006      	add	sp, #24
   11612:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11614:	4620      	mov	r0, r4
   11616:	2121      	movs	r1, #33	; 0x21
   11618:	f7ff ff70 	bl	114fc <hci_cmd_complete>
	rp->status = 0x00;
   1161c:	4601      	mov	r1, r0
   1161e:	2400      	movs	r4, #0
   11620:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   11624:	3001      	adds	r0, #1
   11626:	f009 fe91 	bl	1b34c <hci_vendor_read_key_hierarchy_roots>
	return 0;
   1162a:	4620      	mov	r0, r4
}
   1162c:	b006      	add	sp, #24
   1162e:	bd70      	pop	{r4, r5, r6, pc}
   11630:	00025720 	.word	0x00025720

00011634 <hci_cmd_handle>:
{
   11634:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   11636:	8983      	ldrh	r3, [r0, #12]
{
   11638:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
   1163a:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   1163c:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   1163e:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
   11640:	f240 80ba 	bls.w	117b8 <hci_cmd_handle+0x184>
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
   11644:	4604      	mov	r4, r0
   11646:	2103      	movs	r1, #3
   11648:	3008      	adds	r0, #8
   1164a:	f012 f930 	bl	238ae <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   1164e:	89a2      	ldrh	r2, [r4, #12]
   11650:	7883      	ldrb	r3, [r0, #2]
   11652:	429a      	cmp	r2, r3
   11654:	f0c0 80d7 	bcc.w	11806 <hci_cmd_handle+0x1d2>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   11658:	8801      	ldrh	r1, [r0, #0]
   1165a:	4d7a      	ldr	r5, [pc, #488]	; (11844 <hci_cmd_handle+0x210>)
	switch (BT_OGF(_opcode)) {
   1165c:	f5b1 5f10 	cmp.w	r1, #9216	; 0x2400
	_opcode = sys_le16_to_cpu(chdr->opcode);
   11660:	b288      	uxth	r0, r1
   11662:	8029      	strh	r1, [r5, #0]
	ocf = BT_OCF(_opcode);
   11664:	f3c1 0309 	ubfx	r3, r1, #0, #10
	switch (BT_OGF(_opcode)) {
   11668:	ea4f 2291 	mov.w	r2, r1, lsr #10
   1166c:	d26b      	bcs.n	11746 <hci_cmd_handle+0x112>
   1166e:	2a00      	cmp	r2, #0
   11670:	d073      	beq.n	1175a <hci_cmd_handle+0x126>
   11672:	3a01      	subs	r2, #1
   11674:	2a07      	cmp	r2, #7
   11676:	d870      	bhi.n	1175a <hci_cmd_handle+0x126>
   11678:	e8df f002 	tbb	[pc, r2]
   1167c:	57746f90 	.word	0x57746f90
   11680:	046f6f6f 	.word	0x046f6f6f
	switch (ocf) {
   11684:	3b01      	subs	r3, #1
   11686:	2b4d      	cmp	r3, #77	; 0x4d
   11688:	d867      	bhi.n	1175a <hci_cmd_handle+0x126>
   1168a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1168e:	020c      	.short	0x020c
   11690:	01ec01ff 	.word	0x01ec01ff
   11694:	01e50066 	.word	0x01e50066
   11698:	016801d5 	.word	0x016801d5
   1169c:	01cd0160 	.word	0x01cd0160
   116a0:	006601c6 	.word	0x006601c6
   116a4:	00660066 	.word	0x00660066
   116a8:	01ba0066 	.word	0x01ba0066
   116ac:	01af01b5 	.word	0x01af01b5
   116b0:	017e01a9 	.word	0x017e01a9
   116b4:	01990066 	.word	0x01990066
   116b8:	03600190 	.word	0x03600190
   116bc:	00660354 	.word	0x00660354
   116c0:	0346034e 	.word	0x0346034e
   116c4:	00660330 	.word	0x00660330
   116c8:	00660066 	.word	0x00660066
   116cc:	03150321 	.word	0x03150321
   116d0:	02f7030d 	.word	0x02f7030d
   116d4:	006602ee 	.word	0x006602ee
   116d8:	02e50066 	.word	0x02e50066
   116dc:	02da02df 	.word	0x02da02df
   116e0:	02bd02ce 	.word	0x02bd02ce
   116e4:	02a502ac 	.word	0x02a502ac
   116e8:	027c029d 	.word	0x027c029d
   116ec:	02430254 	.word	0x02430254
   116f0:	00660216 	.word	0x00660216
   116f4:	00660066 	.word	0x00660066
   116f8:	00660066 	.word	0x00660066
   116fc:	00660066 	.word	0x00660066
   11700:	00660066 	.word	0x00660066
   11704:	00660066 	.word	0x00660066
   11708:	00660066 	.word	0x00660066
   1170c:	00660066 	.word	0x00660066
   11710:	00660066 	.word	0x00660066
   11714:	00660066 	.word	0x00660066
   11718:	00660066 	.word	0x00660066
   1171c:	00660066 	.word	0x00660066
   11720:	01710066 	.word	0x01710066
   11724:	00660066 	.word	0x00660066
   11728:	0159      	.short	0x0159
	switch (ocf) {
   1172a:	3b01      	subs	r3, #1
   1172c:	2b08      	cmp	r3, #8
   1172e:	d814      	bhi.n	1175a <hci_cmd_handle+0x126>
   11730:	e8df f013 	tbh	[pc, r3, lsl #1]
   11734:	009400ef 	.word	0x009400ef
   11738:	00130079 	.word	0x00130079
   1173c:	00130013 	.word	0x00130013
   11740:	00130013 	.word	0x00130013
   11744:	006d      	.short	0x006d
	switch (BT_OGF(_opcode)) {
   11746:	2a3f      	cmp	r2, #63	; 0x3f
   11748:	d107      	bne.n	1175a <hci_cmd_handle+0x126>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   1174a:	4621      	mov	r1, r4
   1174c:	4618      	mov	r0, r3
   1174e:	aa07      	add	r2, sp, #28
   11750:	f7ff fee4 	bl	1151c <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   11754:	3016      	adds	r0, #22
   11756:	d154      	bne.n	11802 <hci_cmd_handle+0x1ce>
   11758:	8828      	ldrh	r0, [r5, #0]
	return bt_hci_cmd_status_create(_opcode, status);
   1175a:	2101      	movs	r1, #1
   1175c:	f010 fab9 	bl	21cd2 <bt_hci_cmd_status_create>
}
   11760:	b00d      	add	sp, #52	; 0x34
   11762:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   11764:	2b63      	cmp	r3, #99	; 0x63
   11766:	f000 8341 	beq.w	11dec <hci_cmd_handle+0x7b8>
   1176a:	d837      	bhi.n	117dc <hci_cmd_handle+0x1a8>
   1176c:	2b03      	cmp	r3, #3
   1176e:	f000 8323 	beq.w	11db8 <hci_cmd_handle+0x784>
   11772:	2b2d      	cmp	r3, #45	; 0x2d
   11774:	d12d      	bne.n	117d2 <hci_cmd_handle+0x19e>
		read_tx_power_level(cmd, evt);
   11776:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11778:	2104      	movs	r1, #4
   1177a:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
   1177c:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   1177e:	789e      	ldrb	r6, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11780:	f7ff febc 	bl	114fc <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   11784:	b2a9      	uxth	r1, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11786:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   11788:	1cc3      	adds	r3, r0, #3
   1178a:	4632      	mov	r2, r6
   1178c:	2002      	movs	r0, #2
   1178e:	f7ff fc79 	bl	11084 <ll_tx_pwr_lvl_get>
	rp->status = status;
   11792:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
   11794:	9807      	ldr	r0, [sp, #28]
   11796:	f8a4 5001 	strh.w	r5, [r4, #1]
}
   1179a:	e7e1      	b.n	11760 <hci_cmd_handle+0x12c>
	switch (ocf) {
   1179c:	2b06      	cmp	r3, #6
   1179e:	f000 82ea 	beq.w	11d76 <hci_cmd_handle+0x742>
   117a2:	2b1d      	cmp	r3, #29
   117a4:	d1d9      	bne.n	1175a <hci_cmd_handle+0x126>
	handle = sys_le16_to_cpu(cmd->handle);
   117a6:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   117a8:	8818      	ldrh	r0, [r3, #0]
   117aa:	f003 fb01 	bl	14db0 <ll_version_ind_send>
   117ae:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   117b0:	8828      	ldrh	r0, [r5, #0]
   117b2:	f010 fa8e 	bl	21cd2 <bt_hci_cmd_status_create>
}
   117b6:	e7d3      	b.n	11760 <hci_cmd_handle+0x12c>
   117b8:	4923      	ldr	r1, [pc, #140]	; (11848 <hci_cmd_handle+0x214>)
   117ba:	4b24      	ldr	r3, [pc, #144]	; (1184c <hci_cmd_handle+0x218>)
		BT_ERR("No HCI Command header");
   117bc:	4824      	ldr	r0, [pc, #144]	; (11850 <hci_cmd_handle+0x21c>)
   117be:	1ac9      	subs	r1, r1, r3
   117c0:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
   117c2:	0189      	lsls	r1, r1, #6
   117c4:	f041 0101 	orr.w	r1, r1, #1
   117c8:	f00e f912 	bl	1f9f0 <log_0>
		return NULL;
   117cc:	4628      	mov	r0, r5
}
   117ce:	b00d      	add	sp, #52	; 0x34
   117d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   117d2:	2b01      	cmp	r3, #1
   117d4:	d1c1      	bne.n	1175a <hci_cmd_handle+0x126>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   117d6:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   117d8:	4b1e      	ldr	r3, [pc, #120]	; (11854 <hci_cmd_handle+0x220>)
   117da:	e166      	b.n	11aaa <hci_cmd_handle+0x476>
	switch (ocf) {
   117dc:	2b7b      	cmp	r3, #123	; 0x7b
   117de:	f000 82d4 	beq.w	11d8a <hci_cmd_handle+0x756>
   117e2:	2b7c      	cmp	r3, #124	; 0x7c
   117e4:	d1b9      	bne.n	1175a <hci_cmd_handle+0x126>
		write_auth_payload_timeout(cmd, evt);
   117e6:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   117e8:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   117ea:	8859      	ldrh	r1, [r3, #2]
   117ec:	4628      	mov	r0, r5
   117ee:	f003 fc17 	bl	15020 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   117f2:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   117f4:	2103      	movs	r1, #3
   117f6:	a807      	add	r0, sp, #28
   117f8:	f7ff fe80 	bl	114fc <hci_cmd_complete>
	rp->status = status;
   117fc:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   117fe:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   11802:	9807      	ldr	r0, [sp, #28]
   11804:	e7ac      	b.n	11760 <hci_cmd_handle+0x12c>
   11806:	4910      	ldr	r1, [pc, #64]	; (11848 <hci_cmd_handle+0x214>)
   11808:	4b10      	ldr	r3, [pc, #64]	; (1184c <hci_cmd_handle+0x218>)
		BT_ERR("Invalid HCI CMD packet length");
   1180a:	4813      	ldr	r0, [pc, #76]	; (11858 <hci_cmd_handle+0x224>)
   1180c:	e7d7      	b.n	117be <hci_cmd_handle+0x18a>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1180e:	2107      	movs	r1, #7
   11810:	a807      	add	r0, sp, #28
   11812:	f7ff fe73 	bl	114fc <hci_cmd_complete>
	rp->status = 0x00;
   11816:	4601      	mov	r1, r0
   11818:	2000      	movs	r0, #0
   1181a:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   1181e:	f7ff fbf5 	bl	1100c <ll_addr_get>
	if (err == -EINVAL) {
   11822:	9807      	ldr	r0, [sp, #28]
   11824:	e79c      	b.n	11760 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11826:	2109      	movs	r1, #9
   11828:	a807      	add	r0, sp, #28
   1182a:	f7ff fe67 	bl	114fc <hci_cmd_complete>
	rp->status = 0x00;
   1182e:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11830:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   11832:	2208      	movs	r2, #8
	rp->status = 0x00;
   11834:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   11838:	f00f ff60 	bl	216fc <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   1183c:	2360      	movs	r3, #96	; 0x60
   1183e:	9807      	ldr	r0, [sp, #28]
   11840:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   11842:	e78d      	b.n	11760 <hci_cmd_handle+0x12c>
   11844:	200042aa 	.word	0x200042aa
   11848:	00024c64 	.word	0x00024c64
   1184c:	00024c24 	.word	0x00024c24
   11850:	00025734 	.word	0x00025734
   11854:	20000120 	.word	0x20000120
   11858:	0002574c 	.word	0x0002574c
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1185c:	2141      	movs	r1, #65	; 0x41
   1185e:	a807      	add	r0, sp, #28
   11860:	f7ff fe4c 	bl	114fc <hci_cmd_complete>
	rp->status = 0x00;
   11864:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11866:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   11868:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   1186a:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1186e:	f00f ff45 	bl	216fc <memset>
	rp->commands[14] |= BIT(3) | BIT(5);
   11872:	7be3      	ldrb	r3, [r4, #15]
	rp->commands[0] |= BIT(5);
   11874:	7867      	ldrb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   11876:	79a6      	ldrb	r6, [r4, #6]
	rp->commands[10] |= BIT(2);
   11878:	7ae5      	ldrb	r5, [r4, #11]
	rp->commands[15] |= BIT(1);
   1187a:	7c20      	ldrb	r0, [r4, #16]
	rp->commands[22] |= BIT(2);
   1187c:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1187e:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[26] |= BIT(6) | BIT(7);
   11880:	f894 c01b 	ldrb.w	ip, [r4, #27]
	rp->commands[14] |= BIT(3) | BIT(5);
   11884:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   11888:	73e3      	strb	r3, [r4, #15]
	rp->commands[27] |= BIT(0) | BIT(1);
   1188a:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[0] |= BIT(5);
   1188c:	f047 0720 	orr.w	r7, r7, #32
	rp->commands[5] |= BIT(6) | BIT(7);
   11890:	f066 063f 	orn	r6, r6, #63	; 0x3f
	rp->commands[10] |= BIT(2);
   11894:	f045 0504 	orr.w	r5, r5, #4
	rp->commands[15] |= BIT(1);
   11898:	f040 0002 	orr.w	r0, r0, #2
	rp->commands[22] |= BIT(2);
   1189c:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   118a0:	f062 0208 	orn	r2, r2, #8
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   118a4:	f063 0308 	orn	r3, r3, #8
	rp->commands[0] |= BIT(5);
   118a8:	7067      	strb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   118aa:	71a6      	strb	r6, [r4, #6]
	rp->commands[28] |= BIT(3);
   118ac:	7f67      	ldrb	r7, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   118ae:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
	rp->commands[10] |= BIT(2);
   118b2:	72e5      	strb	r5, [r4, #11]
	rp->commands[15] |= BIT(1);
   118b4:	7420      	strb	r0, [r4, #16]
	rp->commands[33] |= BIT(4) | BIT(5);
   118b6:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   118ba:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
	rp->commands[22] |= BIT(2);
   118be:	75e1      	strb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   118c0:	76a2      	strb	r2, [r4, #26]
	rp->commands[35] |= BIT(3);
   118c2:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   118c6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   118ca:	7723      	strb	r3, [r4, #28]
	rp->commands[38] |= BIT(7);
   118cc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   118d0:	f060 0006 	orn	r0, r0, #6
	rp->commands[26] |= BIT(0) | BIT(1);
   118d4:	f06c 0c3c 	orn	ip, ip, #60	; 0x3c
	rp->commands[28] |= BIT(1) | BIT(2);
   118d8:	f047 070e 	orr.w	r7, r7, #14
	rp->commands[32] |= BIT(4) | BIT(5);
   118dc:	f046 0630 	orr.w	r6, r6, #48	; 0x30
	rp->commands[33] |= BIT(6) | BIT(7);
   118e0:	f065 050f 	orn	r5, r5, #15
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   118e4:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[39] |= BIT(2);
   118e8:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   118ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(0) | BIT(1);
   118f0:	f884 c01b 	strb.w	ip, [r4, #27]
	rp->commands[28] |= BIT(1) | BIT(2);
   118f4:	7767      	strb	r7, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   118f6:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
	rp->commands[33] |= BIT(6) | BIT(7);
   118fa:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   118fe:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   11902:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   11906:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   1190a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   1190e:	9807      	ldr	r0, [sp, #28]
   11910:	e726      	b.n	11760 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11912:	2109      	movs	r1, #9
   11914:	a807      	add	r0, sp, #28
   11916:	f7ff fdf1 	bl	114fc <hci_cmd_complete>
   1191a:	4603      	mov	r3, r0
	rp->status = 0x00;
   1191c:	2200      	movs	r2, #0
	rp->hci_version = LL_VERSION_NUMBER;
   1191e:	200b      	movs	r0, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   11920:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   11924:	f06f 050e 	mvn.w	r5, #14
   11928:	2405      	movs	r4, #5
	rp->status = 0x00;
   1192a:	701a      	strb	r2, [r3, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   1192c:	7058      	strb	r0, [r3, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   1192e:	7118      	strb	r0, [r3, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   11930:	715d      	strb	r5, [r3, #5]
   11932:	9807      	ldr	r0, [sp, #28]
   11934:	719c      	strb	r4, [r3, #6]
	rp->hci_revision = sys_cpu_to_le16(0);
   11936:	709a      	strb	r2, [r3, #2]
   11938:	70da      	strb	r2, [r3, #3]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   1193a:	71d9      	strb	r1, [r3, #7]
   1193c:	7219      	strb	r1, [r3, #8]
	if (err == -EINVAL) {
   1193e:	e70f      	b.n	11760 <hci_cmd_handle+0x12c>
		le_set_privacy_mode(cmd, evt);
   11940:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   11942:	79c1      	ldrb	r1, [r0, #7]
   11944:	f006 fdba 	bl	184bc <ll_priv_mode_set>
	*evt = cmd_complete_status(status);
   11948:	f7ff fd46 	bl	113d8 <cmd_complete_status>
	if (err == -EINVAL) {
   1194c:	e708      	b.n	11760 <hci_cmd_handle+0x12c>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   1194e:	68a1      	ldr	r1, [r4, #8]
   11950:	f811 0b01 	ldrb.w	r0, [r1], #1
   11954:	f002 fc80 	bl	14258 <ll_adv_data_set>
	*evt = cmd_complete_status(status);
   11958:	f7ff fd3e 	bl	113d8 <cmd_complete_status>
	if (err == -EINVAL) {
   1195c:	e700      	b.n	11760 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1195e:	2102      	movs	r1, #2
   11960:	a807      	add	r0, sp, #28
   11962:	f7ff fdcb 	bl	114fc <hci_cmd_complete>
	rp->status = 0x00;
   11966:	2300      	movs	r3, #0
   11968:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   1196a:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   1196c:	9807      	ldr	r0, [sp, #28]
   1196e:	e6f7      	b.n	11760 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11970:	2103      	movs	r1, #3
   11972:	a807      	add	r0, sp, #28
   11974:	f7ff fdc2 	bl	114fc <hci_cmd_complete>
	rp->status = 0x00;
   11978:	4601      	mov	r1, r0
   1197a:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   1197c:	3001      	adds	r0, #1
	rp->status = 0x00;
   1197e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   11982:	f7ff fb8f 	bl	110a4 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   11986:	9807      	ldr	r0, [sp, #28]
   11988:	e6ea      	b.n	11760 <hci_cmd_handle+0x12c>
		le_conn_update(cmd, evt);
   1198a:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   1198c:	8911      	ldrh	r1, [r2, #8]
   1198e:	8853      	ldrh	r3, [r2, #2]
   11990:	8810      	ldrh	r0, [r2, #0]
   11992:	9102      	str	r1, [sp, #8]
   11994:	88d1      	ldrh	r1, [r2, #6]
   11996:	9101      	str	r1, [sp, #4]
   11998:	8892      	ldrh	r2, [r2, #4]
   1199a:	9200      	str	r2, [sp, #0]
   1199c:	2200      	movs	r2, #0
   1199e:	4611      	mov	r1, r2
   119a0:	f003 f90a 	bl	14bb8 <ll_conn_update>
   119a4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   119a6:	8828      	ldrh	r0, [r5, #0]
   119a8:	f010 f993 	bl	21cd2 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   119ac:	e6d8      	b.n	11760 <hci_cmd_handle+0x12c>
	handle = sys_le16_to_cpu(cmd->handle);
   119ae:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   119b0:	8818      	ldrh	r0, [r3, #0]
   119b2:	f003 f9d7 	bl	14d64 <ll_feature_req_send>
   119b6:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   119b8:	8828      	ldrh	r0, [r5, #0]
   119ba:	f010 f98a 	bl	21cd2 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   119be:	e6cf      	b.n	11760 <hci_cmd_handle+0x12c>
	handle = sys_le16_to_cpu(cmd->handle);
   119c0:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   119c2:	2108      	movs	r1, #8
   119c4:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
   119c6:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   119c8:	f7ff fd98 	bl	114fc <hci_cmd_complete>
   119cc:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   119ce:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   119d0:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
   119d2:	f003 f983 	bl	14cdc <ll_chm_get>
	rp->status = status;
   119d6:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   119d8:	9807      	ldr	r0, [sp, #28]
   119da:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   119de:	e6bf      	b.n	11760 <hci_cmd_handle+0x12c>
	status = ll_wl_remove(&cmd->addr);
   119e0:	68a0      	ldr	r0, [r4, #8]
   119e2:	f006 f8bb 	bl	17b5c <ll_wl_remove>
	*evt = cmd_complete_status(status);
   119e6:	f7ff fcf7 	bl	113d8 <cmd_complete_status>
	if (err == -EINVAL) {
   119ea:	e6b9      	b.n	11760 <hci_cmd_handle+0x12c>
	status = ll_wl_add(&cmd->addr);
   119ec:	68a0      	ldr	r0, [r4, #8]
   119ee:	f006 fb63 	bl	180b8 <ll_wl_add>
	*evt = cmd_complete_status(status);
   119f2:	f7ff fcf1 	bl	113d8 <cmd_complete_status>
	if (err == -EINVAL) {
   119f6:	e6b3      	b.n	11760 <hci_cmd_handle+0x12c>
	status = ll_wl_clear();
   119f8:	f006 f886 	bl	17b08 <ll_wl_clear>
	*evt = cmd_complete_status(status);
   119fc:	f7ff fcec 	bl	113d8 <cmd_complete_status>
	if (err == -EINVAL) {
   11a00:	e6ae      	b.n	11760 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11a02:	2102      	movs	r1, #2
   11a04:	a807      	add	r0, sp, #28
   11a06:	f7ff fd79 	bl	114fc <hci_cmd_complete>
	rp->status = 0x00;
   11a0a:	2300      	movs	r3, #0
   11a0c:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11a0e:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   11a10:	f006 f878 	bl	17b04 <ll_wl_size_get>
   11a14:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   11a16:	9807      	ldr	r0, [sp, #28]
   11a18:	e6a2      	b.n	11760 <hci_cmd_handle+0x12c>
	status = ll_adv_enable(cmd->enable);
   11a1a:	68a3      	ldr	r3, [r4, #8]
   11a1c:	7818      	ldrb	r0, [r3, #0]
   11a1e:	f7ee ffbf 	bl	9a0 <ll_adv_enable>
	*evt = cmd_complete_status(status);
   11a22:	f7ff fcd9 	bl	113d8 <cmd_complete_status>
	if (err == -EINVAL) {
   11a26:	e69b      	b.n	11760 <hci_cmd_handle+0x12c>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   11a28:	68a1      	ldr	r1, [r4, #8]
   11a2a:	f811 0b01 	ldrb.w	r0, [r1], #1
   11a2e:	f002 fc47 	bl	142c0 <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
   11a32:	f7ff fcd1 	bl	113d8 <cmd_complete_status>
	if (err == -EINVAL) {
   11a36:	e693      	b.n	11760 <hci_cmd_handle+0x12c>
		le_set_adv_param(cmd, evt);
   11a38:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   11a3a:	7ba5      	ldrb	r5, [r4, #14]
   11a3c:	79a3      	ldrb	r3, [r4, #6]
   11a3e:	7962      	ldrb	r2, [r4, #5]
   11a40:	7921      	ldrb	r1, [r4, #4]
   11a42:	8820      	ldrh	r0, [r4, #0]
   11a44:	9502      	str	r5, [sp, #8]
   11a46:	7b65      	ldrb	r5, [r4, #13]
   11a48:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   11a4a:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   11a4c:	9400      	str	r4, [sp, #0]
   11a4e:	f002 fa1d 	bl	13e8c <ll_adv_params_set>
	*evt = cmd_complete_status(status);
   11a52:	f7ff fcc1 	bl	113d8 <cmd_complete_status>
	if (err == -EINVAL) {
   11a56:	e683      	b.n	11760 <hci_cmd_handle+0x12c>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   11a58:	68a1      	ldr	r1, [r4, #8]
   11a5a:	2001      	movs	r0, #1
   11a5c:	f7ff faf4 	bl	11048 <ll_addr_set>
	*evt = cmd_complete_status(status);
   11a60:	f7ff fcba 	bl	113d8 <cmd_complete_status>
	if (err == -EINVAL) {
   11a64:	e67c      	b.n	11760 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11a66:	2109      	movs	r1, #9
   11a68:	a807      	add	r0, sp, #28
   11a6a:	f7ff fd47 	bl	114fc <hci_cmd_complete>
	rp->status = 0x00;
   11a6e:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11a70:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   11a72:	2208      	movs	r2, #8
	rp->status = 0x00;
   11a74:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   11a78:	f00f fe40 	bl	216fc <memset>
	dst[0] = val;
   11a7c:	217f      	movs	r1, #127	; 0x7f
	dst[1] = val >> 8;
   11a7e:	2249      	movs	r2, #73	; 0x49
	dst[2] = val >> 16;
   11a80:	2301      	movs	r3, #1
	dst[0] = val;
   11a82:	7061      	strb	r1, [r4, #1]
	dst[1] = val >> 8;
   11a84:	70a2      	strb	r2, [r4, #2]
	dst[2] = val >> 16;
   11a86:	70e3      	strb	r3, [r4, #3]
	if (err == -EINVAL) {
   11a88:	9807      	ldr	r0, [sp, #28]
   11a8a:	e669      	b.n	11760 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11a8c:	2104      	movs	r1, #4
   11a8e:	a807      	add	r0, sp, #28
   11a90:	f7ff fd34 	bl	114fc <hci_cmd_complete>
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   11a94:	2203      	movs	r2, #3
	rp->status = 0x00;
   11a96:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   11a98:	70c2      	strb	r2, [r0, #3]
	rp->status = 0x00;
   11a9a:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   11a9c:	221b      	movs	r2, #27
   11a9e:	7042      	strb	r2, [r0, #1]
   11aa0:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   11aa2:	9807      	ldr	r0, [sp, #28]
   11aa4:	e65c      	b.n	11760 <hci_cmd_handle+0x12c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   11aa6:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   11aa8:	4bc2      	ldr	r3, [pc, #776]	; (11db4 <hci_cmd_handle+0x780>)
   11aaa:	6811      	ldr	r1, [r2, #0]
   11aac:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   11aae:	605a      	str	r2, [r3, #4]
   11ab0:	6019      	str	r1, [r3, #0]
	*evt = cmd_complete_status(0x00);
   11ab2:	2000      	movs	r0, #0
   11ab4:	f7ff fc90 	bl	113d8 <cmd_complete_status>
}
   11ab8:	e652      	b.n	11760 <hci_cmd_handle+0x12c>
		le_set_phy(cmd, evt);
   11aba:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   11abc:	7894      	ldrb	r4, [r2, #2]
   11abe:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   11ac0:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   11ac2:	f8b2 6005 	ldrh.w	r6, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   11ac6:	07e3      	lsls	r3, r4, #31
		cmd->tx_phys |= mask_phys;
   11ac8:	bf48      	it	mi
   11aca:	f041 0107 	orrmi.w	r1, r1, #7
   11ace:	7913      	ldrb	r3, [r2, #4]
   11ad0:	bf48      	it	mi
   11ad2:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   11ad4:	07a4      	lsls	r4, r4, #30
		cmd->rx_phys |= mask_phys;
   11ad6:	bf44      	itt	mi
   11ad8:	f043 0307 	orrmi.w	r3, r3, #7
   11adc:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   11ade:	ea41 0203 	orr.w	r2, r1, r3
   11ae2:	f032 0207 	bics.w	r2, r2, #7
   11ae6:	f040 8188 	bne.w	11dfa <hci_cmd_handle+0x7c6>
	if (!(cmd->tx_phys & 0x07) ||
   11aea:	074c      	lsls	r4, r1, #29
   11aec:	f000 8181 	beq.w	11df2 <hci_cmd_handle+0x7be>
   11af0:	075a      	lsls	r2, r3, #29
   11af2:	f000 817e 	beq.w	11df2 <hci_cmd_handle+0x7be>
	if (phy_opts & 0x03) {
   11af6:	f016 0203 	ands.w	r2, r6, #3
		phy_opts -= 1U;
   11afa:	bf1c      	itt	ne
   11afc:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		phy_opts &= 1;
   11b00:	f006 0201 	andne.w	r2, r6, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   11b04:	4638      	mov	r0, r7
   11b06:	f003 fa15 	bl	14f34 <ll_phy_req_send>
   11b0a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   11b0c:	8828      	ldrh	r0, [r5, #0]
   11b0e:	f010 f8e0 	bl	21cd2 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   11b12:	e625      	b.n	11760 <hci_cmd_handle+0x12c>
		le_set_default_phy(cmd, evt);
   11b14:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   11b16:	781a      	ldrb	r2, [r3, #0]
   11b18:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   11b1a:	bf4a      	itet	mi
   11b1c:	2007      	movmi	r0, #7
   11b1e:	7858      	ldrbpl	r0, [r3, #1]
   11b20:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   11b22:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   11b24:	bf4a      	itet	mi
   11b26:	2107      	movmi	r1, #7
   11b28:	7899      	ldrbpl	r1, [r3, #2]
   11b2a:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   11b2c:	f003 f9f8 	bl	14f20 <ll_phy_default_set>
	*evt = cmd_complete_status(status);
   11b30:	f7ff fc52 	bl	113d8 <cmd_complete_status>
	if (err == -EINVAL) {
   11b34:	e614      	b.n	11760 <hci_cmd_handle+0x12c>
	handle = sys_le16_to_cpu(cmd->handle);
   11b36:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11b38:	2105      	movs	r1, #5
   11b3a:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
   11b3c:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11b3e:	f7ff fcdd 	bl	114fc <hci_cmd_complete>
   11b42:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   11b44:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   11b46:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   11b48:	1ce1      	adds	r1, r4, #3
   11b4a:	f003 f9cb 	bl	14ee4 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
   11b4e:	78e2      	ldrb	r2, [r4, #3]
   11b50:	7923      	ldrb	r3, [r4, #4]
	rp->status = status;
   11b52:	7020      	strb	r0, [r4, #0]
   11b54:	2a00      	cmp	r2, #0
   11b56:	fa92 f2a2 	rbit	r2, r2
   11b5a:	fab2 f282 	clz	r2, r2
   11b5e:	bf08      	it	eq
   11b60:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   11b64:	2b00      	cmp	r3, #0
   11b66:	fa93 f3a3 	rbit	r3, r3
   11b6a:	fab3 f383 	clz	r3, r3
   11b6e:	f102 0201 	add.w	r2, r2, #1
   11b72:	bf08      	it	eq
   11b74:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   11b78:	70e2      	strb	r2, [r4, #3]
   11b7a:	3301      	adds	r3, #1
   11b7c:	9807      	ldr	r0, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   11b7e:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   11b82:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
   11b84:	e5ec      	b.n	11760 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11b86:	2109      	movs	r1, #9
   11b88:	a807      	add	r0, sp, #28
   11b8a:	f7ff fcb7 	bl	114fc <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   11b8e:	ab08      	add	r3, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11b90:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   11b92:	f10d 021a 	add.w	r2, sp, #26
   11b96:	f10d 0016 	add.w	r0, sp, #22
   11b9a:	a906      	add	r1, sp, #24
   11b9c:	f003 f998 	bl	14ed0 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   11ba0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   11ba4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   11ba8:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   11bac:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   11bb0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   11bb4:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   11bb8:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   11bba:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   11bbe:	7022      	strb	r2, [r4, #0]
   11bc0:	9807      	ldr	r0, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   11bc2:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   11bc6:	e5cb      	b.n	11760 <hci_cmd_handle+0x12c>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   11bc8:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   11bca:	8818      	ldrh	r0, [r3, #0]
   11bcc:	f006 f898 	bl	17d00 <ll_rl_timeout_set>
	*evt = cmd_complete_status(0x00);
   11bd0:	2000      	movs	r0, #0
   11bd2:	f7ff fc01 	bl	113d8 <cmd_complete_status>
	if (err == -EINVAL) {
   11bd6:	e5c3      	b.n	11760 <hci_cmd_handle+0x12c>
	status = ll_rl_enable(cmd->enable);
   11bd8:	68a3      	ldr	r3, [r4, #8]
   11bda:	7818      	ldrb	r0, [r3, #0]
   11bdc:	f006 f87a 	bl	17cd4 <ll_rl_enable>
	*evt = cmd_complete_status(status);
   11be0:	f7ff fbfa 	bl	113d8 <cmd_complete_status>
	if (err == -EINVAL) {
   11be4:	e5bc      	b.n	11760 <hci_cmd_handle+0x12c>
	memcpy(dst, src, sizeof(*dst));
   11be6:	68a1      	ldr	r1, [r4, #8]
   11be8:	2207      	movs	r2, #7
   11bea:	a808      	add	r0, sp, #32
   11bec:	f00f fd5b 	bl	216a6 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11bf0:	2107      	movs	r1, #7
   11bf2:	a807      	add	r0, sp, #28
   11bf4:	f7ff fc82 	bl	114fc <hci_cmd_complete>
   11bf8:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   11bfa:	1c61      	adds	r1, r4, #1
   11bfc:	a808      	add	r0, sp, #32
   11bfe:	f006 fc41 	bl	18484 <ll_rl_lrpa_get>
   11c02:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   11c04:	9807      	ldr	r0, [sp, #28]
   11c06:	e5ab      	b.n	11760 <hci_cmd_handle+0x12c>
   11c08:	68a1      	ldr	r1, [r4, #8]
   11c0a:	2207      	movs	r2, #7
   11c0c:	a808      	add	r0, sp, #32
   11c0e:	f00f fd4a 	bl	216a6 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11c12:	2107      	movs	r1, #7
   11c14:	a807      	add	r0, sp, #28
   11c16:	f7ff fc71 	bl	114fc <hci_cmd_complete>
   11c1a:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   11c1c:	1c61      	adds	r1, r4, #1
   11c1e:	a808      	add	r0, sp, #32
   11c20:	f006 fc0e 	bl	18440 <ll_rl_crpa_get>
   11c24:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   11c26:	9807      	ldr	r0, [sp, #28]
   11c28:	e59a      	b.n	11760 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11c2a:	2102      	movs	r1, #2
   11c2c:	a807      	add	r0, sp, #28
   11c2e:	f7ff fc65 	bl	114fc <hci_cmd_complete>
   11c32:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   11c34:	f006 f80c 	bl	17c50 <ll_rl_size_get>
	rp->status = 0x00;
   11c38:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   11c3a:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   11c3c:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
   11c3e:	9807      	ldr	r0, [sp, #28]
   11c40:	e58e      	b.n	11760 <hci_cmd_handle+0x12c>
	status = ll_rl_clear();
   11c42:	f006 f807 	bl	17c54 <ll_rl_clear>
	*evt = cmd_complete_status(status);
   11c46:	f7ff fbc7 	bl	113d8 <cmd_complete_status>
	if (err == -EINVAL) {
   11c4a:	e589      	b.n	11760 <hci_cmd_handle+0x12c>
	status = ll_rl_remove(&cmd->peer_id_addr);
   11c4c:	68a0      	ldr	r0, [r4, #8]
   11c4e:	f006 fb53 	bl	182f8 <ll_rl_remove>
	*evt = cmd_complete_status(status);
   11c52:	f7ff fbc1 	bl	113d8 <cmd_complete_status>
	if (err == -EINVAL) {
   11c56:	e583      	b.n	11760 <hci_cmd_handle+0x12c>
		le_add_dev_to_rl(cmd, evt);
   11c58:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   11c5a:	f100 0217 	add.w	r2, r0, #23
   11c5e:	1dc1      	adds	r1, r0, #7
   11c60:	f006 fa8a 	bl	18178 <ll_rl_add>
	*evt = cmd_complete_status(status);
   11c64:	f7ff fbb8 	bl	113d8 <cmd_complete_status>
	if (err == -EINVAL) {
   11c68:	e57a      	b.n	11760 <hci_cmd_handle+0x12c>
		le_write_default_data_len(cmd, evt);
   11c6a:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   11c6c:	8859      	ldrh	r1, [r3, #2]
   11c6e:	8818      	ldrh	r0, [r3, #0]
   11c70:	f003 f924 	bl	14ebc <ll_length_default_set>
	*evt = cmd_complete_status(status);
   11c74:	b2c0      	uxtb	r0, r0
   11c76:	f7ff fbaf 	bl	113d8 <cmd_complete_status>
	if (err == -EINVAL) {
   11c7a:	e571      	b.n	11760 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11c7c:	2105      	movs	r1, #5
   11c7e:	a807      	add	r0, sp, #28
   11c80:	f7ff fc3c 	bl	114fc <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   11c84:	a908      	add	r1, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11c86:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   11c88:	f10d 001a 	add.w	r0, sp, #26
   11c8c:	f003 f90a 	bl	14ea4 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   11c90:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   11c94:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   11c98:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   11c9a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   11c9e:	7022      	strb	r2, [r4, #0]
   11ca0:	9807      	ldr	r0, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   11ca2:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   11ca6:	e55b      	b.n	11760 <hci_cmd_handle+0x12c>
		le_set_data_len(cmd, evt);
   11ca8:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   11caa:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   11cac:	889a      	ldrh	r2, [r3, #4]
   11cae:	8859      	ldrh	r1, [r3, #2]
   11cb0:	4628      	mov	r0, r5
   11cb2:	f003 f8a3 	bl	14dfc <ll_length_req_send>
   11cb6:	e59c      	b.n	117f2 <hci_cmd_handle+0x1be>
		le_conn_param_req_neg_reply(cmd, evt);
   11cb8:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   11cba:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   11cbc:	789a      	ldrb	r2, [r3, #2]
   11cbe:	2300      	movs	r3, #0
   11cc0:	e9cd 3301 	strd	r3, r3, [sp, #4]
   11cc4:	4628      	mov	r0, r5
   11cc6:	9300      	str	r3, [sp, #0]
   11cc8:	2102      	movs	r1, #2
   11cca:	f002 ff75 	bl	14bb8 <ll_conn_update>
   11cce:	e590      	b.n	117f2 <hci_cmd_handle+0x1be>
		le_conn_param_req_reply(cmd, evt);
   11cd0:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   11cd2:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   11cd4:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   11cd6:	8853      	ldrh	r3, [r2, #2]
   11cd8:	9102      	str	r1, [sp, #8]
   11cda:	88d1      	ldrh	r1, [r2, #6]
   11cdc:	9101      	str	r1, [sp, #4]
   11cde:	8892      	ldrh	r2, [r2, #4]
   11ce0:	9200      	str	r2, [sp, #0]
   11ce2:	4628      	mov	r0, r5
   11ce4:	2200      	movs	r2, #0
   11ce6:	2102      	movs	r1, #2
   11ce8:	f002 ff66 	bl	14bb8 <ll_conn_update>
   11cec:	e581      	b.n	117f2 <hci_cmd_handle+0x1be>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11cee:	2109      	movs	r1, #9
   11cf0:	a807      	add	r0, sp, #28
   11cf2:	f7ff fc03 	bl	114fc <hci_cmd_complete>
	dst[0] = val;
   11cf6:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
   11cf8:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   11cfa:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
   11cfc:	2230      	movs	r2, #48	; 0x30
   11cfe:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   11d00:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   11d02:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
   11d04:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
   11d06:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
   11d08:	2201      	movs	r2, #1
   11d0a:	7003      	strb	r3, [r0, #0]
   11d0c:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   11d0e:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   11d10:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   11d12:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   11d14:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   11d16:	9807      	ldr	r0, [sp, #28]
   11d18:	e522      	b.n	11760 <hci_cmd_handle+0x12c>
	handle = sys_le16_to_cpu(cmd->handle);
   11d1a:	68a3      	ldr	r3, [r4, #8]
   11d1c:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   11d1e:	2200      	movs	r2, #0
   11d20:	4628      	mov	r0, r5
   11d22:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   11d24:	f005 fd3a 	bl	1779c <ll_start_enc_req_send>
   11d28:	e563      	b.n	117f2 <hci_cmd_handle+0x1be>
	handle = sys_le16_to_cpu(cmd->handle);
   11d2a:	68a2      	ldr	r2, [r4, #8]
   11d2c:	f832 5b02 	ldrh.w	r5, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   11d30:	2100      	movs	r1, #0
   11d32:	4628      	mov	r0, r5
   11d34:	e7f6      	b.n	11d24 <hci_cmd_handle+0x6f0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11d36:	2109      	movs	r1, #9
   11d38:	a807      	add	r0, sp, #28
   11d3a:	f7ff fbdf 	bl	114fc <hci_cmd_complete>
	rp->status = 0x00;
   11d3e:	2300      	movs	r3, #0
   11d40:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   11d44:	2108      	movs	r1, #8
   11d46:	f006 ff63 	bl	18c10 <lll_csrand_get>
	if (err == -EINVAL) {
   11d4a:	9807      	ldr	r0, [sp, #28]
   11d4c:	e508      	b.n	11760 <hci_cmd_handle+0x12c>
		le_encrypt(cmd, evt);
   11d4e:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   11d50:	aa08      	add	r2, sp, #32
   11d52:	f100 0110 	add.w	r1, r0, #16
   11d56:	2300      	movs	r3, #0
   11d58:	f008 fc14 	bl	1a584 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11d5c:	2111      	movs	r1, #17
   11d5e:	a807      	add	r0, sp, #28
   11d60:	f7ff fbcc 	bl	114fc <hci_cmd_complete>
	rp->status = 0x00;
   11d64:	2300      	movs	r3, #0
   11d66:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   11d6a:	a908      	add	r1, sp, #32
   11d6c:	2210      	movs	r2, #16
   11d6e:	f00f fc9a 	bl	216a6 <memcpy>
	if (err == -EINVAL) {
   11d72:	9807      	ldr	r0, [sp, #28]
   11d74:	e4f4      	b.n	11760 <hci_cmd_handle+0x12c>
		disconnect(cmd, evt);
   11d76:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   11d78:	7899      	ldrb	r1, [r3, #2]
   11d7a:	8818      	ldrh	r0, [r3, #0]
   11d7c:	f002 ffce 	bl	14d1c <ll_terminate_ind_send>
   11d80:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   11d82:	8828      	ldrh	r0, [r5, #0]
   11d84:	f00f ffa5 	bl	21cd2 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   11d88:	e4ea      	b.n	11760 <hci_cmd_handle+0x12c>
	handle = sys_le16_to_cpu(cmd->handle);
   11d8a:	68a3      	ldr	r3, [r4, #8]
   11d8c:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   11d8e:	a908      	add	r1, sp, #32
   11d90:	4628      	mov	r0, r5
   11d92:	f003 f921 	bl	14fd8 <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11d96:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   11d98:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11d9a:	a807      	add	r0, sp, #28
   11d9c:	f7ff fbae 	bl	114fc <hci_cmd_complete>
	rp->status = status;
   11da0:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   11da2:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   11da6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   11daa:	f8a0 3003 	strh.w	r3, [r0, #3]
   11dae:	9807      	ldr	r0, [sp, #28]
}
   11db0:	e4d6      	b.n	11760 <hci_cmd_handle+0x12c>
   11db2:	bf00      	nop
   11db4:	20000128 	.word	0x20000128
	event_mask = DEFAULT_EVENT_MASK;
   11db8:	4912      	ldr	r1, [pc, #72]	; (11e04 <hci_cmd_handle+0x7d0>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   11dba:	4a13      	ldr	r2, [pc, #76]	; (11e08 <hci_cmd_handle+0x7d4>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   11dbc:	4b13      	ldr	r3, [pc, #76]	; (11e0c <hci_cmd_handle+0x7d8>)
	event_mask = DEFAULT_EVENT_MASK;
   11dbe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11dc2:	f641 75ff 	movw	r5, #8191	; 0x1fff
   11dc6:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   11dca:	201f      	movs	r0, #31
   11dcc:	2100      	movs	r1, #0
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   11dce:	2400      	movs	r4, #0
   11dd0:	2500      	movs	r5, #0
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   11dd2:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   11dd6:	e9c2 4500 	strd	r4, r5, [r2]
		ll_reset();
   11dda:	f000 ffb1 	bl	12d40 <ll_reset>
		*evt = cmd_complete_status(0x00);
   11dde:	2000      	movs	r0, #0
   11de0:	f7ff fafa 	bl	113d8 <cmd_complete_status>
	conn_count = 0U;
   11de4:	4b0a      	ldr	r3, [pc, #40]	; (11e10 <hci_cmd_handle+0x7dc>)
   11de6:	2200      	movs	r2, #0
   11de8:	601a      	str	r2, [r3, #0]
}
   11dea:	e4b9      	b.n	11760 <hci_cmd_handle+0x12c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   11dec:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   11dee:	4b06      	ldr	r3, [pc, #24]	; (11e08 <hci_cmd_handle+0x7d4>)
   11df0:	e65b      	b.n	11aaa <hci_cmd_handle+0x476>
	return bt_hci_cmd_status_create(_opcode, status);
   11df2:	2112      	movs	r1, #18
   11df4:	f00f ff6d 	bl	21cd2 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   11df8:	e4b2      	b.n	11760 <hci_cmd_handle+0x12c>
	return bt_hci_cmd_status_create(_opcode, status);
   11dfa:	2111      	movs	r1, #17
   11dfc:	f00f ff69 	bl	21cd2 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   11e00:	e4ae      	b.n	11760 <hci_cmd_handle+0x12c>
   11e02:	bf00      	nop
   11e04:	20000120 	.word	0x20000120
   11e08:	20001378 	.word	0x20001378
   11e0c:	20000128 	.word	0x20000128
   11e10:	20002c50 	.word	0x20002c50

00011e14 <hci_acl_handle>:
	if (buf->len < sizeof(*acl)) {
   11e14:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   11e16:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   11e18:	2b03      	cmp	r3, #3
{
   11e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*evt = NULL;
   11e1e:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   11e20:	d942      	bls.n	11ea8 <hci_acl_handle+0x94>
	acl = net_buf_pull_mem(buf, sizeof(*acl));
   11e22:	4605      	mov	r5, r0
   11e24:	460e      	mov	r6, r1
   11e26:	3008      	adds	r0, #8
   11e28:	2104      	movs	r1, #4
   11e2a:	f011 fd40 	bl	238ae <net_buf_simple_pull_mem>
	if (buf->len < len) {
   11e2e:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   11e30:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   11e32:	f8b0 8000 	ldrh.w	r8, [r0]
	if (buf->len < len) {
   11e36:	42bb      	cmp	r3, r7
   11e38:	d343      	bcc.n	11ec2 <hci_acl_handle+0xae>
	node_tx = ll_tx_mem_acquire();
   11e3a:	f002 fe67 	bl	14b0c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   11e3e:	ea4f 3318 	mov.w	r3, r8, lsr #12
	if (!node_tx) {
   11e42:	4604      	mov	r4, r0
   11e44:	2800      	cmp	r0, #0
   11e46:	d040      	beq.n	11eca <hci_acl_handle+0xb6>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   11e48:	089a      	lsrs	r2, r3, #2
   11e4a:	d102      	bne.n	11e52 <hci_acl_handle+0x3e>
	switch (bt_acl_flags_pb(flags)) {
   11e4c:	b333      	cbz	r3, 11e9c <hci_acl_handle+0x88>
   11e4e:	2b01      	cmp	r3, #1
   11e50:	d003      	beq.n	11e5a <hci_acl_handle+0x46>
		return -EINVAL;
   11e52:	f06f 0015 	mvn.w	r0, #21
}
   11e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11e5a:	7902      	ldrb	r2, [r0, #4]
   11e5c:	f363 0201 	bfi	r2, r3, #0, #2
   11e60:	7102      	strb	r2, [r0, #4]
	pdu_data->len = len;
   11e62:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   11e64:	68a9      	ldr	r1, [r5, #8]
   11e66:	463a      	mov	r2, r7
   11e68:	1de0      	adds	r0, r4, #7
   11e6a:	f00f fc1c 	bl	216a6 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   11e6e:	4621      	mov	r1, r4
   11e70:	f3c8 000b 	ubfx	r0, r8, #0, #12
   11e74:	f002 fe56 	bl	14b24 <ll_tx_mem_enqueue>
   11e78:	2800      	cmp	r0, #0
   11e7a:	d0ec      	beq.n	11e56 <hci_acl_handle+0x42>
   11e7c:	4b2a      	ldr	r3, [pc, #168]	; (11f28 <hci_acl_handle+0x114>)
   11e7e:	492b      	ldr	r1, [pc, #172]	; (11f2c <hci_acl_handle+0x118>)
		BT_ERR("Invalid Tx Enqueue");
   11e80:	482b      	ldr	r0, [pc, #172]	; (11f30 <hci_acl_handle+0x11c>)
   11e82:	1ac9      	subs	r1, r1, r3
   11e84:	08c9      	lsrs	r1, r1, #3
   11e86:	0189      	lsls	r1, r1, #6
   11e88:	f041 0101 	orr.w	r1, r1, #1
   11e8c:	f00d fdb0 	bl	1f9f0 <log_0>
		ll_tx_mem_release(node_tx);
   11e90:	4620      	mov	r0, r4
   11e92:	f002 fe41 	bl	14b18 <ll_tx_mem_release>
		return -EINVAL;
   11e96:	f06f 0015 	mvn.w	r0, #21
   11e9a:	e7dc      	b.n	11e56 <hci_acl_handle+0x42>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   11e9c:	7903      	ldrb	r3, [r0, #4]
   11e9e:	2202      	movs	r2, #2
   11ea0:	f362 0301 	bfi	r3, r2, #0, #2
   11ea4:	7103      	strb	r3, [r0, #4]
		break;
   11ea6:	e7dc      	b.n	11e62 <hci_acl_handle+0x4e>
   11ea8:	4920      	ldr	r1, [pc, #128]	; (11f2c <hci_acl_handle+0x118>)
   11eaa:	4b1f      	ldr	r3, [pc, #124]	; (11f28 <hci_acl_handle+0x114>)
		BT_ERR("No HCI ACL header");
   11eac:	4821      	ldr	r0, [pc, #132]	; (11f34 <hci_acl_handle+0x120>)
   11eae:	1ac9      	subs	r1, r1, r3
   11eb0:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
   11eb2:	0189      	lsls	r1, r1, #6
   11eb4:	f041 0101 	orr.w	r1, r1, #1
   11eb8:	f00d fd9a 	bl	1f9f0 <log_0>
		return -EINVAL;
   11ebc:	f06f 0015 	mvn.w	r0, #21
   11ec0:	e7c9      	b.n	11e56 <hci_acl_handle+0x42>
   11ec2:	491a      	ldr	r1, [pc, #104]	; (11f2c <hci_acl_handle+0x118>)
   11ec4:	4b18      	ldr	r3, [pc, #96]	; (11f28 <hci_acl_handle+0x114>)
		BT_ERR("Invalid HCI ACL packet length");
   11ec6:	481c      	ldr	r0, [pc, #112]	; (11f38 <hci_acl_handle+0x124>)
   11ec8:	e7f1      	b.n	11eae <hci_acl_handle+0x9a>
   11eca:	4b17      	ldr	r3, [pc, #92]	; (11f28 <hci_acl_handle+0x114>)
   11ecc:	4917      	ldr	r1, [pc, #92]	; (11f2c <hci_acl_handle+0x118>)
		BT_ERR("Tx Buffer Overflow");
   11ece:	481b      	ldr	r0, [pc, #108]	; (11f3c <hci_acl_handle+0x128>)
   11ed0:	1ac9      	subs	r1, r1, r3
   11ed2:	08c9      	lsrs	r1, r1, #3
   11ed4:	0189      	lsls	r1, r1, #6
   11ed6:	f041 0101 	orr.w	r1, r1, #1
   11eda:	f00d fd89 	bl	1f9f0 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   11ede:	4b18      	ldr	r3, [pc, #96]	; (11f40 <hci_acl_handle+0x12c>)
   11ee0:	6819      	ldr	r1, [r3, #0]
   11ee2:	4623      	mov	r3, r4
   11ee4:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   11ee8:	4313      	orrs	r3, r2
   11eea:	d102      	bne.n	11ef2 <hci_acl_handle+0xde>
		return -ENOBUFS;
   11eec:	f06f 0036 	mvn.w	r0, #54	; 0x36
   11ef0:	e7b1      	b.n	11e56 <hci_acl_handle+0x42>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   11ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11ef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11efa:	2001      	movs	r0, #1
   11efc:	f7f6 fb24 	bl	8548 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
   11f00:	2102      	movs	r1, #2
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   11f02:	6030      	str	r0, [r6, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
   11f04:	3008      	adds	r0, #8
   11f06:	f011 fca1 	bl	2384c <net_buf_simple_add>
	hdr->len = len;
   11f0a:	2401      	movs	r4, #1
	hdr->evt = evt;
   11f0c:	221a      	movs	r2, #26
   11f0e:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   11f10:	7044      	strb	r4, [r0, #1]
	ep = net_buf_add(*buf, sizeof(*ep));
   11f12:	6830      	ldr	r0, [r6, #0]
   11f14:	4621      	mov	r1, r4
   11f16:	3008      	adds	r0, #8
   11f18:	f011 fc98 	bl	2384c <net_buf_simple_add>
   11f1c:	4603      	mov	r3, r0
		return -ENOBUFS;
   11f1e:	f06f 0036 	mvn.w	r0, #54	; 0x36
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   11f22:	701c      	strb	r4, [r3, #0]
   11f24:	e797      	b.n	11e56 <hci_acl_handle+0x42>
   11f26:	bf00      	nop
   11f28:	00024c24 	.word	0x00024c24
   11f2c:	00024c64 	.word	0x00024c64
   11f30:	000257b4 	.word	0x000257b4
   11f34:	0002576c 	.word	0x0002576c
   11f38:	00025780 	.word	0x00025780
   11f3c:	000257a0 	.word	0x000257a0
   11f40:	20000120 	.word	0x20000120

00011f44 <hci_disconn_complete_encode>:
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   11f44:	4b06      	ldr	r3, [pc, #24]	; (11f60 <hci_disconn_complete_encode+0x1c>)
   11f46:	681b      	ldr	r3, [r3, #0]
{
   11f48:	b430      	push	{r4, r5}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   11f4a:	f003 0410 	and.w	r4, r3, #16
   11f4e:	2500      	movs	r5, #0
   11f50:	ea54 0305 	orrs.w	r3, r4, r5
   11f54:	d101      	bne.n	11f5a <hci_disconn_complete_encode+0x16>
}
   11f56:	bc30      	pop	{r4, r5}
   11f58:	4770      	bx	lr
   11f5a:	bc30      	pop	{r4, r5}
   11f5c:	f7ff bab6 	b.w	114cc <hci_disconn_complete_encode.part.0>
   11f60:	20000120 	.word	0x20000120

00011f64 <hci_disconn_complete_process>:
	conn_count--;
   11f64:	4a02      	ldr	r2, [pc, #8]	; (11f70 <hci_disconn_complete_process+0xc>)
   11f66:	6813      	ldr	r3, [r2, #0]
   11f68:	3b01      	subs	r3, #1
   11f6a:	6013      	str	r3, [r2, #0]
}
   11f6c:	4770      	bx	lr
   11f6e:	bf00      	nop
   11f70:	20002c50 	.word	0x20002c50

00011f74 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   11f74:	7f03      	ldrb	r3, [r0, #28]
   11f76:	f003 0303 	and.w	r3, r3, #3
   11f7a:	3b01      	subs	r3, #1
   11f7c:	2b01      	cmp	r3, #1
{
   11f7e:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   11f80:	d90d      	bls.n	11f9e <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   11f82:	4a16      	ldr	r2, [pc, #88]	; (11fdc <hci_acl_encode+0x68>)
   11f84:	4916      	ldr	r1, [pc, #88]	; (11fe0 <hci_acl_encode+0x6c>)
   11f86:	4817      	ldr	r0, [pc, #92]	; (11fe4 <hci_acl_encode+0x70>)
   11f88:	f241 63e9 	movw	r3, #5865	; 0x16e9
   11f8c:	f00d f862 	bl	1f054 <printk>
   11f90:	4040      	eors	r0, r0
   11f92:	f380 8811 	msr	BASEPRI, r0
   11f96:	f04f 0003 	mov.w	r0, #3
   11f9a:	df02      	svc	2
		break;
	}
}
   11f9c:	bd70      	pop	{r4, r5, r6, pc}
   11f9e:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   11fa0:	f101 0508 	add.w	r5, r1, #8
   11fa4:	4628      	mov	r0, r5
   11fa6:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   11fa8:	88e6      	ldrh	r6, [r4, #6]
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   11faa:	f011 fc4f 	bl	2384c <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   11fae:	7f23      	ldrb	r3, [r4, #28]
   11fb0:	f003 0303 	and.w	r3, r3, #3
   11fb4:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   11fb6:	bf0c      	ite	eq
   11fb8:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   11fbc:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   11fc0:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   11fc2:	7f61      	ldrb	r1, [r4, #29]
   11fc4:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
   11fc6:	4628      	mov	r0, r5
   11fc8:	f011 fc40 	bl	2384c <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   11fcc:	7f62      	ldrb	r2, [r4, #29]
   11fce:	f104 011f 	add.w	r1, r4, #31
}
   11fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   11fd6:	f00f bb66 	b.w	216a6 <memcpy>
   11fda:	bf00      	nop
   11fdc:	000257c8 	.word	0x000257c8
   11fe0:	0002568c 	.word	0x0002568c
   11fe4:	0002561c 	.word	0x0002561c

00011fe8 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   11fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   11fec:	7905      	ldrb	r5, [r0, #4]
   11fee:	88c7      	ldrh	r7, [r0, #6]
   11ff0:	2d02      	cmp	r5, #2
{
   11ff2:	4604      	mov	r4, r0
   11ff4:	b088      	sub	sp, #32
   11ff6:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   11ff8:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   11ffc:	d00c      	beq.n	12018 <hci_evt_encode+0x30>
	switch (node_rx->hdr.type) {
   11ffe:	3d11      	subs	r5, #17
   12000:	2d06      	cmp	r5, #6
   12002:	f200 825c 	bhi.w	124be <hci_evt_encode+0x4d6>
   12006:	e8df f015 	tbh	[pc, r5, lsl #1]
   1200a:	005c      	.short	0x005c
   1200c:	00b000d2 	.word	0x00b000d2
   12010:	00df0110 	.word	0x00df0110
   12014:	002100f6 	.word	0x002100f6
	switch (pdu_data->llctrl.opcode) {
   12018:	7fe3      	ldrb	r3, [r4, #31]
   1201a:	3b03      	subs	r3, #3
   1201c:	2b12      	cmp	r3, #18
   1201e:	f200 811e 	bhi.w	1225e <hci_evt_encode+0x276>
   12022:	e8df f013 	tbh	[pc, r3, lsl #1]
   12026:	016a      	.short	0x016a
   12028:	011c011c 	.word	0x011c011c
   1202c:	01b30190 	.word	0x01b30190
   12030:	01c3011c 	.word	0x01c3011c
   12034:	011c011c 	.word	0x011c011c
   12038:	01ca011c 	.word	0x01ca011c
   1203c:	01d9011c 	.word	0x01d9011c
   12040:	011c011c 	.word	0x011c011c
   12044:	011c011c 	.word	0x011c011c
   12048:	012a012a 	.word	0x012a012a
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1204c:	4bc5      	ldr	r3, [pc, #788]	; (12364 <hci_evt_encode+0x37c>)
   1204e:	6858      	ldr	r0, [r3, #4]
   12050:	2100      	movs	r1, #0
   12052:	460a      	mov	r2, r1
   12054:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12058:	4313      	orrs	r3, r2
   1205a:	d007      	beq.n	1206c <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   1205c:	4bc2      	ldr	r3, [pc, #776]	; (12368 <hci_evt_encode+0x380>)
   1205e:	6818      	ldr	r0, [r3, #0]
   12060:	460b      	mov	r3, r1
   12062:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12066:	4313      	orrs	r3, r2
   12068:	f040 8127 	bne.w	122ba <hci_evt_encode+0x2d2>
   1206c:	7f61      	ldrb	r1, [r4, #29]
   1206e:	48bf      	ldr	r0, [pc, #764]	; (1236c <hci_evt_encode+0x384>)
   12070:	4bbf      	ldr	r3, [pc, #764]	; (12370 <hci_evt_encode+0x388>)
   12072:	7fa2      	ldrb	r2, [r4, #30]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   12074:	7f25      	ldrb	r5, [r4, #28]
   12076:	9704      	str	r7, [sp, #16]
   12078:	2900      	cmp	r1, #0
   1207a:	eba3 0300 	sub.w	r3, r3, r0
   1207e:	fa91 f1a1 	rbit	r1, r1
   12082:	fab1 f181 	clz	r1, r1
   12086:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   1208a:	bf08      	it	eq
   1208c:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   12090:	2a00      	cmp	r2, #0
   12092:	fa92 f2a2 	rbit	r2, r2
   12096:	fab2 f282 	clz	r2, r2
   1209a:	f101 0001 	add.w	r0, r1, #1
   1209e:	bf08      	it	eq
   120a0:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   120a4:	019b      	lsls	r3, r3, #6
   120a6:	1c54      	adds	r4, r2, #1
   120a8:	9006      	str	r0, [sp, #24]
   120aa:	f043 0302 	orr.w	r3, r3, #2
   120ae:	48b1      	ldr	r0, [pc, #708]	; (12374 <hci_evt_encode+0x38c>)
   120b0:	9407      	str	r4, [sp, #28]
   120b2:	2204      	movs	r2, #4
   120b4:	a904      	add	r1, sp, #16
   120b6:	9505      	str	r5, [sp, #20]
   120b8:	f00d fcf0 	bl	1fa9c <log_n>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   120bc:	b008      	add	sp, #32
   120be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t status = cc->status;
   120c2:	7f25      	ldrb	r5, [r4, #28]
	if (!status) {
   120c4:	2d00      	cmp	r5, #0
   120c6:	f000 81a5 	beq.w	12414 <hci_evt_encode+0x42c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   120ca:	4ba6      	ldr	r3, [pc, #664]	; (12364 <hci_evt_encode+0x37c>)
   120cc:	6859      	ldr	r1, [r3, #4]
   120ce:	f04f 0800 	mov.w	r8, #0
   120d2:	4642      	mov	r2, r8
   120d4:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   120d8:	4313      	orrs	r3, r2
   120da:	d0ef      	beq.n	120bc <hci_evt_encode+0xd4>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   120dc:	4ba2      	ldr	r3, [pc, #648]	; (12368 <hci_evt_encode+0x380>)
   120de:	f8d3 c000 	ldr.w	ip, [r3]
   120e2:	f240 2101 	movw	r1, #513	; 0x201
   120e6:	ea0c 0201 	and.w	r2, ip, r1
   120ea:	4643      	mov	r3, r8
   120ec:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   120ee:	f40c 7000 	and.w	r0, ip, #512	; 0x200
   120f2:	4641      	mov	r1, r8
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   120f4:	d0e2      	beq.n	120bc <hci_evt_encode+0xd4>
	if (!status) {
   120f6:	2d00      	cmp	r5, #0
   120f8:	f040 819f 	bne.w	1243a <hci_evt_encode+0x452>
		conn_count++;
   120fc:	4a9e      	ldr	r2, [pc, #632]	; (12378 <hci_evt_encode+0x390>)
   120fe:	6813      	ldr	r3, [r2, #0]
   12100:	3301      	adds	r3, #1
   12102:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   12104:	ea50 0301 	orrs.w	r3, r0, r1
   12108:	f104 081f 	add.w	r8, r4, #31
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   1210c:	4630      	mov	r0, r6
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   1210e:	f000 81a3 	beq.w	12458 <hci_evt_encode+0x470>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   12112:	221e      	movs	r2, #30
   12114:	210a      	movs	r1, #10
   12116:	f7ff f971 	bl	113fc <meta_evt>
		leecc->status = 0x00;
   1211a:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   1211c:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = cc->role;
   12120:	7f63      	ldrb	r3, [r4, #29]
   12122:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   12124:	7fa3      	ldrb	r3, [r4, #30]
   12126:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   12128:	4606      	mov	r6, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   1212a:	4641      	mov	r1, r8
   1212c:	2206      	movs	r2, #6
   1212e:	3005      	adds	r0, #5
   12130:	f00f fab9 	bl	216a6 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   12134:	2206      	movs	r2, #6
   12136:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   1213a:	f106 000b 	add.w	r0, r6, #11
   1213e:	f00f fab2 	bl	216a6 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   12142:	2206      	movs	r2, #6
   12144:	f104 0125 	add.w	r1, r4, #37	; 0x25
   12148:	f106 0011 	add.w	r0, r6, #17
   1214c:	f00f faab 	bl	216a6 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   12150:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   12152:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   12154:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   12156:	f8a6 2019 	strh.w	r2, [r6, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   1215a:	f8a6 1017 	strh.w	r1, [r6, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1215e:	f8a6 301b 	strh.w	r3, [r6, #27]
		leecc->clock_accuracy = cc->sca;
   12162:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   12166:	7773      	strb	r3, [r6, #29]
		return;
   12168:	e7a8      	b.n	120bc <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1216a:	4b7e      	ldr	r3, [pc, #504]	; (12364 <hci_evt_encode+0x37c>)
   1216c:	6858      	ldr	r0, [r3, #4]
   1216e:	2100      	movs	r1, #0
   12170:	460a      	mov	r2, r1
   12172:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12176:	4313      	orrs	r3, r2
   12178:	d0a0      	beq.n	120bc <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   1217a:	4b7b      	ldr	r3, [pc, #492]	; (12368 <hci_evt_encode+0x380>)
   1217c:	6818      	ldr	r0, [r3, #0]
   1217e:	460b      	mov	r3, r1
   12180:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12184:	4313      	orrs	r3, r2
   12186:	d099      	beq.n	120bc <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   12188:	2209      	movs	r2, #9
   1218a:	2103      	movs	r1, #3
   1218c:	4630      	mov	r0, r6
   1218e:	f7ff f935 	bl	113fc <meta_evt>
	sep->status = cu->status;
   12192:	7f23      	ldrb	r3, [r4, #28]
   12194:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   12196:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   12198:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   1219a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1219c:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
   121a0:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   121a4:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   121a8:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   121ac:	e786      	b.n	120bc <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   121ae:	4b6d      	ldr	r3, [pc, #436]	; (12364 <hci_evt_encode+0x37c>)
   121b0:	6819      	ldr	r1, [r3, #0]
   121b2:	2300      	movs	r3, #0
   121b4:	f001 0210 	and.w	r2, r1, #16
   121b8:	4313      	orrs	r3, r2
   121ba:	f43f af7f 	beq.w	120bc <hci_evt_encode+0xd4>
   121be:	4632      	mov	r2, r6
   121c0:	4639      	mov	r1, r7
   121c2:	f7ff f983 	bl	114cc <hci_disconn_complete_encode.part.0>
   121c6:	e779      	b.n	120bc <hci_evt_encode+0xd4>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   121c8:	4b6c      	ldr	r3, [pc, #432]	; (1237c <hci_evt_encode+0x394>)
   121ca:	6819      	ldr	r1, [r3, #0]
   121cc:	2300      	movs	r3, #0
   121ce:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
   121d2:	4313      	orrs	r3, r2
   121d4:	f43f af72 	beq.w	120bc <hci_evt_encode+0xd4>
	hdr = net_buf_add(buf, sizeof(*hdr));
   121d8:	3608      	adds	r6, #8
   121da:	2102      	movs	r1, #2
   121dc:	4630      	mov	r0, r6
   121de:	f011 fb35 	bl	2384c <net_buf_simple_add>
   121e2:	4603      	mov	r3, r0
	hdr->evt = evt;
   121e4:	2257      	movs	r2, #87	; 0x57
	hdr->len = len;
   121e6:	2102      	movs	r1, #2
	ep = net_buf_add(buf, sizeof(*ep));
   121e8:	4630      	mov	r0, r6
	hdr->evt = evt;
   121ea:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   121ec:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   121ee:	f011 fb2d 	bl	2384c <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   121f2:	8007      	strh	r7, [r0, #0]
   121f4:	e762      	b.n	120bc <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   121f6:	4b5b      	ldr	r3, [pc, #364]	; (12364 <hci_evt_encode+0x37c>)
   121f8:	6858      	ldr	r0, [r3, #4]
   121fa:	2100      	movs	r1, #0
   121fc:	460a      	mov	r2, r1
   121fe:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12202:	4313      	orrs	r3, r2
   12204:	f43f af5a 	beq.w	120bc <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   12208:	4b57      	ldr	r3, [pc, #348]	; (12368 <hci_evt_encode+0x380>)
   1220a:	6818      	ldr	r0, [r3, #0]
   1220c:	460b      	mov	r3, r1
   1220e:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12212:	4313      	orrs	r3, r2
   12214:	f43f af52 	beq.w	120bc <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
   12218:	4630      	mov	r0, r6
   1221a:	2203      	movs	r2, #3
   1221c:	2114      	movs	r1, #20
   1221e:	f7ff f8ed 	bl	113fc <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   12222:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   12224:	7f23      	ldrb	r3, [r4, #28]
   12226:	7083      	strb	r3, [r0, #2]
   12228:	e748      	b.n	120bc <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   1222a:	4b4e      	ldr	r3, [pc, #312]	; (12364 <hci_evt_encode+0x37c>)
   1222c:	6859      	ldr	r1, [r3, #4]
   1222e:	2400      	movs	r4, #0
   12230:	4622      	mov	r2, r4
   12232:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
   12236:	4313      	orrs	r3, r2
   12238:	f43f af40 	beq.w	120bc <hci_evt_encode+0xd4>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1223c:	3608      	adds	r6, #8
   1223e:	2102      	movs	r1, #2
   12240:	4630      	mov	r0, r6
   12242:	f011 fb03 	bl	2384c <net_buf_simple_add>
   12246:	4603      	mov	r3, r0
	hdr->evt = evt;
   12248:	2230      	movs	r2, #48	; 0x30
	hdr->len = len;
   1224a:	2103      	movs	r1, #3
	ep = net_buf_add(buf, sizeof(*ep));
   1224c:	4630      	mov	r0, r6
	hdr->evt = evt;
   1224e:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   12250:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   12252:	f011 fafb 	bl	2384c <net_buf_simple_add>
	ep->status = 0x00;
   12256:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   12258:	f8a0 7001 	strh.w	r7, [r0, #1]
   1225c:	e72e      	b.n	120bc <hci_evt_encode+0xd4>
		LL_ASSERT(0);
   1225e:	f241 63bd 	movw	r3, #5821	; 0x16bd
   12262:	4a47      	ldr	r2, [pc, #284]	; (12380 <hci_evt_encode+0x398>)
   12264:	4947      	ldr	r1, [pc, #284]	; (12384 <hci_evt_encode+0x39c>)
   12266:	4848      	ldr	r0, [pc, #288]	; (12388 <hci_evt_encode+0x3a0>)
   12268:	f00c fef4 	bl	1f054 <printk>
   1226c:	4040      	eors	r0, r0
   1226e:	f380 8811 	msr	BASEPRI, r0
   12272:	f04f 0003 	mov.w	r0, #3
   12276:	df02      	svc	2
}
   12278:	e720      	b.n	120bc <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1227a:	4b3a      	ldr	r3, [pc, #232]	; (12364 <hci_evt_encode+0x37c>)
   1227c:	6858      	ldr	r0, [r3, #4]
   1227e:	2100      	movs	r1, #0
   12280:	460a      	mov	r2, r1
   12282:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12286:	4313      	orrs	r3, r2
   12288:	f43f af18 	beq.w	120bc <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   1228c:	4b36      	ldr	r3, [pc, #216]	; (12368 <hci_evt_encode+0x380>)
   1228e:	6818      	ldr	r0, [r3, #0]
   12290:	460b      	mov	r3, r1
   12292:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12296:	4313      	orrs	r3, r2
   12298:	f43f af10 	beq.w	120bc <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
   1229c:	4630      	mov	r0, r6
   1229e:	220a      	movs	r2, #10
   122a0:	2107      	movs	r1, #7
   122a2:	f7ff f8ab 	bl	113fc <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   122a6:	8007      	strh	r7, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   122a8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   122aa:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   122ac:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   122ae:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   122b0:	8c23      	ldrh	r3, [r4, #32]
   122b2:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   122b4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   122b6:	8103      	strh	r3, [r0, #8]
   122b8:	e700      	b.n	120bc <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
   122ba:	2205      	movs	r2, #5
   122bc:	4630      	mov	r0, r6
   122be:	210c      	movs	r1, #12
   122c0:	f7ff f89c 	bl	113fc <meta_evt>
	sep->status = pu->status;
   122c4:	7f23      	ldrb	r3, [r4, #28]
   122c6:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   122c8:	f8a0 7001 	strh.w	r7, [r0, #1]
   122cc:	7f62      	ldrb	r2, [r4, #29]
   122ce:	2a00      	cmp	r2, #0
   122d0:	fa92 f3a2 	rbit	r3, r2
   122d4:	fab3 f383 	clz	r3, r3
   122d8:	bf08      	it	eq
   122da:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   122de:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   122e0:	70c3      	strb	r3, [r0, #3]
   122e2:	7fa2      	ldrb	r2, [r4, #30]
   122e4:	fa92 f3a2 	rbit	r3, r2
   122e8:	2a00      	cmp	r2, #0
   122ea:	fab3 f383 	clz	r3, r3
   122ee:	bf08      	it	eq
   122f0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   122f4:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   122f6:	7103      	strb	r3, [r0, #4]
   122f8:	e6e0      	b.n	120bc <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   122fa:	4b1a      	ldr	r3, [pc, #104]	; (12364 <hci_evt_encode+0x37c>)
   122fc:	6858      	ldr	r0, [r3, #4]
   122fe:	2100      	movs	r1, #0
   12300:	460a      	mov	r2, r1
   12302:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12306:	4313      	orrs	r3, r2
   12308:	f43f aed8 	beq.w	120bc <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   1230c:	4b16      	ldr	r3, [pc, #88]	; (12368 <hci_evt_encode+0x380>)
   1230e:	6818      	ldr	r0, [r3, #0]
   12310:	460b      	mov	r3, r1
   12312:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12316:	4313      	orrs	r3, r2
   12318:	f43f aed0 	beq.w	120bc <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   1231c:	4630      	mov	r0, r6
   1231e:	220c      	movs	r2, #12
   12320:	2105      	movs	r1, #5
   12322:	f7ff f86b 	bl	113fc <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   12326:	f104 0120 	add.w	r1, r4, #32
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   1232a:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   1232c:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   1232e:	f820 7b02 	strh.w	r7, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   12332:	f00f f9b8 	bl	216a6 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   12336:	f105 000a 	add.w	r0, r5, #10
   1233a:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1233e:	2202      	movs	r2, #2
   12340:	f00f f9b1 	bl	216a6 <memcpy>
   12344:	e6ba      	b.n	120bc <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   12346:	4b07      	ldr	r3, [pc, #28]	; (12364 <hci_evt_encode+0x37c>)
   12348:	6819      	ldr	r1, [r3, #0]
   1234a:	2000      	movs	r0, #0
   1234c:	f001 0280 	and.w	r2, r1, #128	; 0x80
   12350:	4603      	mov	r3, r0
   12352:	4313      	orrs	r3, r2
   12354:	f43f aeb2 	beq.w	120bc <hci_evt_encode+0xd4>
   12358:	4632      	mov	r2, r6
   1235a:	4639      	mov	r1, r7
   1235c:	f7ff f866 	bl	1142c <encrypt_change.part.0>
   12360:	e6ac      	b.n	120bc <hci_evt_encode+0xd4>
   12362:	bf00      	nop
   12364:	20000120 	.word	0x20000120
   12368:	20000128 	.word	0x20000128
   1236c:	00024c24 	.word	0x00024c24
   12370:	00024c64 	.word	0x00024c64
   12374:	00025804 	.word	0x00025804
   12378:	20002c50 	.word	0x20002c50
   1237c:	20001378 	.word	0x20001378
   12380:	000257c8 	.word	0x000257c8
   12384:	0002568c 	.word	0x0002568c
   12388:	0002561c 	.word	0x0002561c
		le_unknown_rsp(pdu_data, handle, buf);
   1238c:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   12390:	290e      	cmp	r1, #14
   12392:	f000 8081 	beq.w	12498 <hci_evt_encode+0x4b0>
   12396:	4b4b      	ldr	r3, [pc, #300]	; (124c4 <hci_evt_encode+0x4dc>)
   12398:	4a4b      	ldr	r2, [pc, #300]	; (124c8 <hci_evt_encode+0x4e0>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1239a:	484c      	ldr	r0, [pc, #304]	; (124cc <hci_evt_encode+0x4e4>)
   1239c:	1ad2      	subs	r2, r2, r3
   1239e:	08d2      	lsrs	r2, r2, #3
   123a0:	0192      	lsls	r2, r2, #6
   123a2:	f042 0202 	orr.w	r2, r2, #2
   123a6:	f00d fb30 	bl	1fa0a <log_1>
   123aa:	e687      	b.n	120bc <hci_evt_encode+0xd4>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   123ac:	460b      	mov	r3, r1
   123ae:	463a      	mov	r2, r7
   123b0:	4601      	mov	r1, r0
   123b2:	2000      	movs	r0, #0
   123b4:	f7ff f854 	bl	11460 <le_remote_feat_complete>
		break;
   123b8:	e680      	b.n	120bc <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   123ba:	4b45      	ldr	r3, [pc, #276]	; (124d0 <hci_evt_encode+0x4e8>)
   123bc:	6819      	ldr	r1, [r3, #0]
   123be:	2300      	movs	r3, #0
   123c0:	f001 0280 	and.w	r2, r1, #128	; 0x80
   123c4:	4313      	orrs	r3, r2
   123c6:	f43f ae79 	beq.w	120bc <hci_evt_encode+0xd4>
   123ca:	f894 0020 	ldrb.w	r0, [r4, #32]
   123ce:	4632      	mov	r2, r6
   123d0:	4639      	mov	r1, r7
   123d2:	f7ff f82b 	bl	1142c <encrypt_change.part.0>
   123d6:	e671      	b.n	120bc <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   123d8:	4b3d      	ldr	r3, [pc, #244]	; (124d0 <hci_evt_encode+0x4e8>)
   123da:	6858      	ldr	r0, [r3, #4]
   123dc:	2100      	movs	r1, #0
   123de:	460a      	mov	r2, r1
   123e0:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   123e4:	4313      	orrs	r3, r2
   123e6:	d01e      	beq.n	12426 <hci_evt_encode+0x43e>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   123e8:	4b3a      	ldr	r3, [pc, #232]	; (124d4 <hci_evt_encode+0x4ec>)
   123ea:	6818      	ldr	r0, [r3, #0]
   123ec:	460b      	mov	r3, r1
   123ee:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   123f2:	4313      	orrs	r3, r2
   123f4:	d017      	beq.n	12426 <hci_evt_encode+0x43e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   123f6:	4630      	mov	r0, r6
   123f8:	220a      	movs	r2, #10
   123fa:	2106      	movs	r1, #6
   123fc:	f7fe fffe 	bl	113fc <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   12400:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   12402:	8c23      	ldrh	r3, [r4, #32]
   12404:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   12406:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   12408:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   1240a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1240c:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   1240e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   12410:	8103      	strh	r3, [r0, #8]
   12412:	e653      	b.n	120bc <hci_evt_encode+0xd4>
		ll_rl_crpa_set(cc->peer_addr_type,
   12414:	7fa0      	ldrb	r0, [r4, #30]
   12416:	f104 0325 	add.w	r3, r4, #37	; 0x25
   1241a:	22ff      	movs	r2, #255	; 0xff
   1241c:	f104 011f 	add.w	r1, r4, #31
   12420:	f005 ffea 	bl	183f8 <ll_rl_crpa_set>
   12424:	e651      	b.n	120ca <hci_evt_encode+0xe2>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   12426:	2300      	movs	r3, #0
   12428:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1242c:	4638      	mov	r0, r7
   1242e:	9300      	str	r3, [sp, #0]
   12430:	221a      	movs	r2, #26
   12432:	2102      	movs	r1, #2
   12434:	f002 fbc0 	bl	14bb8 <ll_conn_update>
		return;
   12438:	e640      	b.n	120bc <hci_evt_encode+0xd4>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   1243a:	ea50 0301 	orrs.w	r3, r0, r1
   1243e:	d032      	beq.n	124a6 <hci_evt_encode+0x4be>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   12440:	221e      	movs	r2, #30
   12442:	210a      	movs	r1, #10
   12444:	4630      	mov	r0, r6
   12446:	f7fe ffd9 	bl	113fc <meta_evt>
   1244a:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   1244c:	4641      	mov	r1, r8
   1244e:	221e      	movs	r2, #30
   12450:	f00f f954 	bl	216fc <memset>
			leecc->status = status;
   12454:	7025      	strb	r5, [r4, #0]
			return;
   12456:	e631      	b.n	120bc <hci_evt_encode+0xd4>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   12458:	2212      	movs	r2, #18
   1245a:	2101      	movs	r1, #1
   1245c:	f7fe ffce 	bl	113fc <meta_evt>
	lecc->status = 0x00;
   12460:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   12462:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
   12466:	7f63      	ldrb	r3, [r4, #29]
   12468:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   1246a:	7fa3      	ldrb	r3, [r4, #30]
   1246c:	f003 0301 	and.w	r3, r3, #1
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   12470:	4606      	mov	r6, r0
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   12472:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   12474:	4641      	mov	r1, r8
   12476:	2206      	movs	r2, #6
   12478:	3005      	adds	r0, #5
   1247a:	f00f f914 	bl	216a6 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1247e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   12480:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   12482:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   12484:	f8a6 200d 	strh.w	r2, [r6, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   12488:	f8a6 100b 	strh.w	r1, [r6, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1248c:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = cc->sca;
   12490:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   12494:	7473      	strb	r3, [r6, #17]
   12496:	e611      	b.n	120bc <hci_evt_encode+0xd4>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   12498:	4633      	mov	r3, r6
   1249a:	463a      	mov	r2, r7
   1249c:	2100      	movs	r1, #0
   1249e:	201a      	movs	r0, #26
   124a0:	f7fe ffde 	bl	11460 <le_remote_feat_complete>
		break;
   124a4:	e60a      	b.n	120bc <hci_evt_encode+0xd4>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   124a6:	2212      	movs	r2, #18
   124a8:	2101      	movs	r1, #1
   124aa:	4630      	mov	r0, r6
   124ac:	f7fe ffa6 	bl	113fc <meta_evt>
   124b0:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   124b2:	4641      	mov	r1, r8
   124b4:	2212      	movs	r2, #18
   124b6:	f00f f921 	bl	216fc <memset>
		lecc->status = status;
   124ba:	7025      	strb	r5, [r4, #0]
		return;
   124bc:	e5fe      	b.n	120bc <hci_evt_encode+0xd4>
		LL_ASSERT(0);
   124be:	f241 53f4 	movw	r3, #5620	; 0x15f4
   124c2:	e6ce      	b.n	12262 <hci_evt_encode+0x27a>
   124c4:	00024c24 	.word	0x00024c24
   124c8:	00024c64 	.word	0x00024c64
   124cc:	00025830 	.word	0x00025830
   124d0:	20000120 	.word	0x20000120
   124d4:	20000128 	.word	0x20000128

000124d8 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   124d8:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   124da:	f100 0408 	add.w	r4, r0, #8
{
   124de:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   124e0:	4620      	mov	r0, r4
   124e2:	2102      	movs	r1, #2
{
   124e4:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   124e6:	f011 f9b1 	bl	2384c <net_buf_simple_add>
   124ea:	4603      	mov	r3, r0
	hdr->evt = evt;
   124ec:	2213      	movs	r2, #19
	hdr->len = len;
   124ee:	2105      	movs	r1, #5
	hdr->evt = evt;
   124f0:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   124f2:	7059      	strb	r1, [r3, #1]
	num_handles = 1U;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
   124f4:	4620      	mov	r0, r4
   124f6:	f011 f9a9 	bl	2384c <net_buf_simple_add>
	ep->num_handles = num_handles;
   124fa:	2301      	movs	r3, #1
   124fc:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   124fe:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   12502:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   12506:	bd70      	pop	{r4, r5, r6, pc}

00012508 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12508:	7903      	ldrb	r3, [r0, #4]
   1250a:	2b02      	cmp	r3, #2
   1250c:	d009      	beq.n	12522 <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
   1250e:	2b11      	cmp	r3, #17
   12510:	d005      	beq.n	1251e <hci_get_class+0x16>
   12512:	3b12      	subs	r3, #18
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
   12514:	2b05      	cmp	r3, #5
   12516:	bf94      	ite	ls
   12518:	2003      	movls	r0, #3
   1251a:	2000      	movhi	r0, #0
   1251c:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   1251e:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   12520:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   12522:	7f03      	ldrb	r3, [r0, #28]
   12524:	f003 0303 	and.w	r3, r3, #3
   12528:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   1252a:	bf0c      	ite	eq
   1252c:	2004      	moveq	r0, #4
   1252e:	2005      	movne	r0, #5
   12530:	4770      	bx	lr
   12532:	bf00      	nop

00012534 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
   12534:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   12536:	480b      	ldr	r0, [pc, #44]	; (12564 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   12538:	490b      	ldr	r1, [pc, #44]	; (12568 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1253a:	4a0c      	ldr	r2, [pc, #48]	; (1256c <hci_init+0x38>)
	conn_count = 0U;
   1253c:	4b0c      	ldr	r3, [pc, #48]	; (12570 <hci_init+0x3c>)
	event_mask = DEFAULT_EVENT_MASK;
   1253e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12542:	f641 75ff 	movw	r5, #8191	; 0x1fff
   12546:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1254a:	2400      	movs	r4, #0
   1254c:	2500      	movs	r5, #0
   1254e:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   12552:	201f      	movs	r0, #31
   12554:	2100      	movs	r1, #0
   12556:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
   1255a:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   1255c:	bc30      	pop	{r4, r5}
	conn_count = 0U;
   1255e:	601a      	str	r2, [r3, #0]
}
   12560:	4770      	bx	lr
   12562:	bf00      	nop
   12564:	20000120 	.word	0x20000120
   12568:	20001378 	.word	0x20001378
   1256c:	20000128 	.word	0x20000128
   12570:	20002c50 	.word	0x20002c50

00012574 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   12574:	f006 bb4c 	b.w	18c10 <lll_csrand_get>

00012578 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   12578:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   1257a:	2300      	movs	r3, #0
   1257c:	f008 f802 	bl	1a584 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   12580:	2000      	movs	r0, #0
   12582:	bd08      	pop	{r3, pc}

00012584 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   12584:	b510      	push	{r4, lr}
   12586:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   12588:	f006 fb64 	bl	18c54 <lll_reset>
	LL_ASSERT(!err);
   1258c:	b950      	cbnz	r0, 125a4 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   1258e:	f006 fe79 	bl	19284 <lll_adv_reset>
	LL_ASSERT(!err);
   12592:	b9c0      	cbnz	r0, 125c6 <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   12594:	f007 fb00 	bl	19b98 <lll_conn_reset>
	LL_ASSERT(!err);
   12598:	bb30      	cbnz	r0, 125e8 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   1259a:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   1259c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   125a0:	f00c b872 	b.w	1e688 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   125a4:	4a19      	ldr	r2, [pc, #100]	; (1260c <perform_lll_reset+0x88>)
   125a6:	491a      	ldr	r1, [pc, #104]	; (12610 <perform_lll_reset+0x8c>)
   125a8:	481a      	ldr	r0, [pc, #104]	; (12614 <perform_lll_reset+0x90>)
   125aa:	f240 6337 	movw	r3, #1591	; 0x637
   125ae:	f00c fd51 	bl	1f054 <printk>
   125b2:	4040      	eors	r0, r0
   125b4:	f380 8811 	msr	BASEPRI, r0
   125b8:	f04f 0003 	mov.w	r0, #3
   125bc:	df02      	svc	2
	err = lll_adv_reset();
   125be:	f006 fe61 	bl	19284 <lll_adv_reset>
	LL_ASSERT(!err);
   125c2:	2800      	cmp	r0, #0
   125c4:	d0e6      	beq.n	12594 <perform_lll_reset+0x10>
   125c6:	4a11      	ldr	r2, [pc, #68]	; (1260c <perform_lll_reset+0x88>)
   125c8:	4911      	ldr	r1, [pc, #68]	; (12610 <perform_lll_reset+0x8c>)
   125ca:	4812      	ldr	r0, [pc, #72]	; (12614 <perform_lll_reset+0x90>)
   125cc:	f240 633c 	movw	r3, #1596	; 0x63c
   125d0:	f00c fd40 	bl	1f054 <printk>
   125d4:	4040      	eors	r0, r0
   125d6:	f380 8811 	msr	BASEPRI, r0
   125da:	f04f 0003 	mov.w	r0, #3
   125de:	df02      	svc	2
	err = lll_conn_reset();
   125e0:	f007 fada 	bl	19b98 <lll_conn_reset>
	LL_ASSERT(!err);
   125e4:	2800      	cmp	r0, #0
   125e6:	d0d8      	beq.n	1259a <perform_lll_reset+0x16>
   125e8:	4a08      	ldr	r2, [pc, #32]	; (1260c <perform_lll_reset+0x88>)
   125ea:	4909      	ldr	r1, [pc, #36]	; (12610 <perform_lll_reset+0x8c>)
   125ec:	4809      	ldr	r0, [pc, #36]	; (12614 <perform_lll_reset+0x90>)
   125ee:	f44f 63c9 	mov.w	r3, #1608	; 0x648
   125f2:	f00c fd2f 	bl	1f054 <printk>
   125f6:	4040      	eors	r0, r0
   125f8:	f380 8811 	msr	BASEPRI, r0
   125fc:	f04f 0003 	mov.w	r0, #3
   12600:	df02      	svc	2
   12602:	4620      	mov	r0, r4
}
   12604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12608:	f00c b83e 	b.w	1e688 <z_impl_k_sem_give>
   1260c:	0002585c 	.word	0x0002585c
   12610:	00025898 	.word	0x00025898
   12614:	0002561c 	.word	0x0002561c

00012618 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   12618:	6008      	str	r0, [r1, #0]
   1261a:	4801      	ldr	r0, [pc, #4]	; (12620 <ull_ticker_status_give+0x8>)
   1261c:	f00c b834 	b.w	1e688 <z_impl_k_sem_give>
   12620:	20003040 	.word	0x20003040

00012624 <disabled_cb>:
   12624:	f00c b830 	b.w	1e688 <z_impl_k_sem_give>

00012628 <tx_cmplt_get>:
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */
}

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   12628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1262c:	4f2f      	ldr	r7, [pc, #188]	; (126ec <tx_cmplt_get+0xc4>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   1262e:	780b      	ldrb	r3, [r1, #0]
   12630:	783c      	ldrb	r4, [r7, #0]
{
   12632:	460d      	mov	r5, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   12634:	7879      	ldrb	r1, [r7, #1]
   12636:	4299      	cmp	r1, r3
   12638:	bf9c      	itt	ls
   1263a:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   1263c:	702b      	strbls	r3, [r5, #0]
	}

	if (*idx == last) {
   1263e:	429a      	cmp	r2, r3
{
   12640:	4683      	mov	fp, r0
   12642:	4692      	mov	sl, r2
   12644:	d045      	beq.n	126d2 <tx_cmplt_get+0xaa>
		return NULL;
	}

	i = *idx + 1;
   12646:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   12648:	4e29      	ldr	r6, [pc, #164]	; (126f0 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
   1264a:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   1264c:	fb13 f304 	smulbb	r3, r3, r4
		i = 0U;
   12650:	4291      	cmp	r1, r2
   12652:	bf08      	it	eq
   12654:	2200      	moveq	r2, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
   12656:	18f1      	adds	r1, r6, r3

	*idx = i;
   12658:	702a      	strb	r2, [r5, #0]
   1265a:	d03a      	beq.n	126d2 <tx_cmplt_get+0xaa>
		return 0;
	}

	*handle = tx->handle;
   1265c:	5af3      	ldrh	r3, [r6, r3]
   1265e:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   12660:	f04f 0800 	mov.w	r8, #0
   12664:	f04f 0901 	mov.w	r9, #1
   12668:	e022      	b.n	126b0 <tx_cmplt_get+0x88>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   1266a:	b37b      	cbz	r3, 126cc <tx_cmplt_get+0xa4>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   1266c:	7903      	ldrb	r3, [r0, #4]
   1266e:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   12672:	3b01      	subs	r3, #1
   12674:	2b01      	cmp	r3, #1
   12676:	d931      	bls.n	126dc <tx_cmplt_get+0xb4>
   12678:	2302      	movs	r3, #2
   1267a:	604b      	str	r3, [r1, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   1267c:	f002 fa4c 	bl	14b18 <ll_tx_mem_release>
	if (*idx >= count) {
   12680:	782b      	ldrb	r3, [r5, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   12682:	7879      	ldrb	r1, [r7, #1]
   12684:	7838      	ldrb	r0, [r7, #0]
   12686:	4299      	cmp	r1, r3
   12688:	bf9c      	itt	ls
   1268a:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   1268c:	702b      	strbls	r3, [r5, #0]
	if (*idx == last) {
   1268e:	459a      	cmp	sl, r3
   12690:	d021      	beq.n	126d6 <tx_cmplt_get+0xae>
	i = *idx + 1;
   12692:	1c5c      	adds	r4, r3, #1
   12694:	b2e4      	uxtb	r4, r4
	p = (void *)(fifo + (*idx) * size);
   12696:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   1269a:	42a1      	cmp	r1, r4
   1269c:	bf08      	it	eq
   1269e:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   126a0:	18f1      	adds	r1, r6, r3
	*idx = i;
   126a2:	702c      	strb	r4, [r5, #0]
   126a4:	d017      	beq.n	126d6 <tx_cmplt_get+0xae>
   126a6:	5af0      	ldrh	r0, [r6, r3]
   126a8:	f8bb 3000 	ldrh.w	r3, [fp]
   126ac:	4298      	cmp	r0, r3
   126ae:	d112      	bne.n	126d6 <tx_cmplt_get+0xae>
		node_tx = tx->node;
   126b0:	6848      	ldr	r0, [r1, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   126b2:	2801      	cmp	r0, #1
   126b4:	f020 0303 	bic.w	r3, r0, #3
   126b8:	d8d7      	bhi.n	1266a <tx_cmplt_get+0x42>
			cmplt++;
   126ba:	f108 0801 	add.w	r8, r8, #1
   126be:	fa5f f888 	uxtb.w	r8, r8
   126c2:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
   126c6:	2b00      	cmp	r3, #0
   126c8:	d0da      	beq.n	12680 <tx_cmplt_get+0x58>
   126ca:	e7d7      	b.n	1267c <tx_cmplt_get+0x54>
   126cc:	2302      	movs	r3, #2
   126ce:	604b      	str	r3, [r1, #4]
   126d0:	e7d6      	b.n	12680 <tx_cmplt_get+0x58>
		return 0;
   126d2:	f04f 0800 	mov.w	r8, #0

	return cmplt;
}
   126d6:	4640      	mov	r0, r8
   126d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   126dc:	f108 0801 	add.w	r8, r8, #1
   126e0:	fa5f f888 	uxtb.w	r8, r8
   126e4:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
   126e8:	e7c8      	b.n	1267c <tx_cmplt_get+0x54>
   126ea:	bf00      	nop
   126ec:	20000488 	.word	0x20000488
   126f0:	2000048c 	.word	0x2000048c

000126f4 <rx_demux>:
{
   126f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126f8:	4cad      	ldr	r4, [pc, #692]	; (129b0 <rx_demux+0x2bc>)
	k_sem_give(sem_recv);
   126fa:	4eae      	ldr	r6, [pc, #696]	; (129b4 <rx_demux+0x2c0>)
			static memq_link_t link;
			static struct mayfly mfy = {0, 0, &link, NULL,
						    lll_resume};
			uint32_t ret;

			mfy.param = next;
   126fc:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 129dc <rx_demux+0x2e8>
{
   12700:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   12702:	e9d4 0100 	ldrd	r0, r1, [r4]
   12706:	aa03      	add	r2, sp, #12
   12708:	f7fd f910 	bl	f92c <memq_peek>
		if (link) {
   1270c:	4607      	mov	r7, r0
   1270e:	2800      	cmp	r0, #0
   12710:	d036      	beq.n	12780 <rx_demux+0x8c>
			LL_ASSERT(rx);
   12712:	9b03      	ldr	r3, [sp, #12]
   12714:	2b00      	cmp	r3, #0
   12716:	f000 8124 	beq.w	12962 <rx_demux+0x26e>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   1271a:	7818      	ldrb	r0, [r3, #0]
   1271c:	aa04      	add	r2, sp, #16
   1271e:	a902      	add	r1, sp, #8
   12720:	f004 fd0e 	bl	17140 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   12724:	4605      	mov	r5, r0
   12726:	2800      	cmp	r0, #0
   12728:	d056      	beq.n	127d8 <rx_demux+0xe4>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   1272a:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
   1272e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   12732:	f891 9000 	ldrb.w	r9, [r1]
   12736:	9205      	str	r2, [sp, #20]
   12738:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   1273c:	f10d 0814 	add.w	r8, sp, #20
   12740:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   12744:	f004 fd12 	bl	1716c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   12748:	4629      	mov	r1, r5
   1274a:	9a05      	ldr	r2, [sp, #20]
   1274c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   12750:	f004 fd54 	bl	171fc <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   12754:	4628      	mov	r0, r5
   12756:	f004 fccd 	bl	170f4 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1275a:	4642      	mov	r2, r8
   1275c:	4639      	mov	r1, r7
   1275e:	4648      	mov	r0, r9
   12760:	f004 fcee 	bl	17140 <ull_conn_ack_by_last_peek>
	} while (link);
   12764:	4605      	mov	r5, r0
   12766:	2800      	cmp	r0, #0
   12768:	d1ec      	bne.n	12744 <rx_demux+0x50>
	k_sem_give(sem_recv);
   1276a:	6830      	ldr	r0, [r6, #0]
   1276c:	f00b ff8c 	bl	1e688 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   12770:	e9d4 0100 	ldrd	r0, r1, [r4]
   12774:	aa03      	add	r2, sp, #12
   12776:	f7fd f8d9 	bl	f92c <memq_peek>
		if (link) {
   1277a:	4607      	mov	r7, r0
   1277c:	2800      	cmp	r0, #0
   1277e:	d1c8      	bne.n	12712 <rx_demux+0x1e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   12780:	aa04      	add	r2, sp, #16
   12782:	a902      	add	r1, sp, #8
   12784:	f10d 0007 	add.w	r0, sp, #7
   12788:	f004 fcc0 	bl	1710c <ull_conn_ack_peek>
			if (link) {
   1278c:	4605      	mov	r5, r0
   1278e:	2800      	cmp	r0, #0
   12790:	d063      	beq.n	1285a <rx_demux+0x166>
				rx_demux_conn_tx_ack(ack_last, handle,
   12792:	9a04      	ldr	r2, [sp, #16]
   12794:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   12798:	f89d 9007 	ldrb.w	r9, [sp, #7]
   1279c:	9205      	str	r2, [sp, #20]
   1279e:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   127a2:	f10d 0814 	add.w	r8, sp, #20
   127a6:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   127aa:	f004 fcdf 	bl	1716c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   127ae:	4629      	mov	r1, r5
   127b0:	9a05      	ldr	r2, [sp, #20]
   127b2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   127b6:	f004 fd21 	bl	171fc <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   127ba:	4628      	mov	r0, r5
   127bc:	f004 fc9a 	bl	170f4 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   127c0:	4642      	mov	r2, r8
   127c2:	4639      	mov	r1, r7
   127c4:	4648      	mov	r0, r9
   127c6:	f004 fcbb 	bl	17140 <ull_conn_ack_by_last_peek>
	} while (link);
   127ca:	4605      	mov	r5, r0
   127cc:	2800      	cmp	r0, #0
   127ce:	d1ec      	bne.n	127aa <rx_demux+0xb6>
	k_sem_give(sem_recv);
   127d0:	6830      	ldr	r0, [r6, #0]
   127d2:	f00b ff59 	bl	1e688 <z_impl_k_sem_give>
			if (nack) {
   127d6:	e7cb      	b.n	12770 <rx_demux+0x7c>
				nack = rx_demux_rx(link, rx);
   127d8:	9b03      	ldr	r3, [sp, #12]
   127da:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   127dc:	791b      	ldrb	r3, [r3, #4]
   127de:	3b01      	subs	r3, #1
   127e0:	2b11      	cmp	r3, #17
   127e2:	d80a      	bhi.n	127fa <rx_demux+0x106>
   127e4:	e8df f003 	tbb	[pc, r3]
   127e8:	0909323c 	.word	0x0909323c
   127ec:	09090909 	.word	0x09090909
   127f0:	09090909 	.word	0x09090909
   127f4:	09090909 	.word	0x09090909
   127f8:	1728      	.short	0x1728
		LL_ASSERT(0);
   127fa:	4a6f      	ldr	r2, [pc, #444]	; (129b8 <rx_demux+0x2c4>)
   127fc:	496f      	ldr	r1, [pc, #444]	; (129bc <rx_demux+0x2c8>)
   127fe:	4870      	ldr	r0, [pc, #448]	; (129c0 <rx_demux+0x2cc>)
   12800:	f240 73d5 	movw	r3, #2005	; 0x7d5
   12804:	f00c fc26 	bl	1f054 <printk>
   12808:	4040      	eors	r0, r0
   1280a:	f380 8811 	msr	BASEPRI, r0
   1280e:	f04f 0003 	mov.w	r0, #3
   12812:	df02      	svc	2
			if (nack) {
   12814:	e775      	b.n	12702 <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   12816:	4966      	ldr	r1, [pc, #408]	; (129b0 <rx_demux+0x2bc>)
   12818:	6860      	ldr	r0, [r4, #4]
   1281a:	2200      	movs	r2, #0
   1281c:	f7fd f88e 	bl	f93c <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12820:	4b68      	ldr	r3, [pc, #416]	; (129c4 <rx_demux+0x2d0>)
		ll_rx_put(link, rx);
   12822:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12824:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   12826:	4a68      	ldr	r2, [pc, #416]	; (129c8 <rx_demux+0x2d4>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12828:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1282a:	4638      	mov	r0, r7
   1282c:	f7fd f876 	bl	f91c <memq_enqueue>
	k_sem_give(sem_recv);
   12830:	6830      	ldr	r0, [r6, #0]
   12832:	f00b ff29 	bl	1e688 <z_impl_k_sem_give>
			if (nack) {
   12836:	e79b      	b.n	12770 <rx_demux+0x7c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   12838:	495d      	ldr	r1, [pc, #372]	; (129b0 <rx_demux+0x2bc>)
   1283a:	6860      	ldr	r0, [r4, #4]
   1283c:	2200      	movs	r2, #0
   1283e:	f7fd f87d 	bl	f93c <memq_dequeue>
		ull_conn_setup(link, rx);
   12842:	9905      	ldr	r1, [sp, #20]
   12844:	4638      	mov	r0, r7
   12846:	f002 fc61 	bl	1510c <ull_conn_setup>
			if (nack) {
   1284a:	e75a      	b.n	12702 <rx_demux+0xe>
		nack = ull_conn_rx(link, (void *)&rx);
   1284c:	a905      	add	r1, sp, #20
   1284e:	4638      	mov	r0, r7
   12850:	f002 fc7e 	bl	15150 <ull_conn_rx>
		if (nack) {
   12854:	2800      	cmp	r0, #0
   12856:	f000 80ce 	beq.w	129f6 <rx_demux+0x302>
}
   1285a:	b007      	add	sp, #28
   1285c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   12860:	4953      	ldr	r1, [pc, #332]	; (129b0 <rx_demux+0x2bc>)
   12862:	6860      	ldr	r0, [r4, #4]
   12864:	2200      	movs	r2, #0
   12866:	f7fd f869 	bl	f93c <memq_dequeue>
		rx_demux_event_done(link, rx);
   1286a:	9d05      	ldr	r5, [sp, #20]
	switch (done->extra.type) {
   1286c:	f895 3020 	ldrb.w	r3, [r5, #32]
	ull_hdr = done->param;
   12870:	f8d5 901c 	ldr.w	r9, [r5, #28]
	switch (done->extra.type) {
   12874:	b17b      	cbz	r3, 12896 <rx_demux+0x1a2>
   12876:	2b01      	cmp	r3, #1
   12878:	f000 80b9 	beq.w	129ee <rx_demux+0x2fa>
		LL_ASSERT(0);
   1287c:	4a4e      	ldr	r2, [pc, #312]	; (129b8 <rx_demux+0x2c4>)
   1287e:	494f      	ldr	r1, [pc, #316]	; (129bc <rx_demux+0x2c8>)
   12880:	484f      	ldr	r0, [pc, #316]	; (129c0 <rx_demux+0x2cc>)
   12882:	f640 0315 	movw	r3, #2069	; 0x815
   12886:	f00c fbe5 	bl	1f054 <printk>
   1288a:	4040      	eors	r0, r0
   1288c:	f380 8811 	msr	BASEPRI, r0
   12890:	f04f 0003 	mov.w	r0, #3
   12894:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   12896:	4a4d      	ldr	r2, [pc, #308]	; (129cc <rx_demux+0x2d8>)
   12898:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   1289a:	f892 c001 	ldrb.w	ip, [r2, #1]
   1289e:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   128a0:	1c4b      	adds	r3, r1, #1
   128a2:	b2db      	uxtb	r3, r3
		last = 0U;
   128a4:	459c      	cmp	ip, r3
   128a6:	bf08      	it	eq
   128a8:	2300      	moveq	r3, #0
	if (last == first) {
   128aa:	4298      	cmp	r0, r3
	done->extra.type = 0U;
   128ac:	f04f 0c00 	mov.w	ip, #0
   128b0:	f885 c020 	strb.w	ip, [r5, #32]
   128b4:	f000 80b3 	beq.w	12a1e <rx_demux+0x32a>
	done->hdr.link = link;
   128b8:	602f      	str	r7, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   128ba:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   128bc:	fb00 2101 	mla	r1, r0, r1, r2
   128c0:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
   128c2:	70d3      	strb	r3, [r2, #3]
	return MFIFO_DEQUEUE_GET(prep);
   128c4:	4d42      	ldr	r5, [pc, #264]	; (129d0 <rx_demux+0x2dc>)
   128c6:	78ab      	ldrb	r3, [r5, #2]
	if (first == last) {
   128c8:	78ea      	ldrb	r2, [r5, #3]
   128ca:	f895 c000 	ldrb.w	ip, [r5]
   128ce:	429a      	cmp	r2, r3
   128d0:	d02a      	beq.n	12928 <rx_demux+0x234>
	return (void *)(fifo + first * size);
   128d2:	f105 0a04 	add.w	sl, r5, #4
   128d6:	fb03 ac0c 	mla	ip, r3, ip, sl
	while (next) {
   128da:	f1bc 0f00 	cmp.w	ip, #0
   128de:	d023      	beq.n	12928 <rx_demux+0x234>
		uint8_t is_aborted = next->is_aborted;
   128e0:	f89c 3020 	ldrb.w	r3, [ip, #32]
		if (!is_aborted) {
   128e4:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   128e6:	f3c3 0740 	ubfx	r7, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   128ea:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
   128ee:	d547      	bpl.n	12980 <rx_demux+0x28c>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   128f0:	78ea      	ldrb	r2, [r5, #3]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   128f2:	78ab      	ldrb	r3, [r5, #2]
   128f4:	f895 c000 	ldrb.w	ip, [r5]
   128f8:	7869      	ldrb	r1, [r5, #1]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   128fa:	429a      	cmp	r2, r3
   128fc:	d014      	beq.n	12928 <rx_demux+0x234>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   128fe:	3301      	adds	r3, #1
   12900:	b2db      	uxtb	r3, r3
	if (_first == count) {
   12902:	4299      	cmp	r1, r3
   12904:	d06c      	beq.n	129e0 <rx_demux+0x2ec>
	if (first == last) {
   12906:	429a      	cmp	r2, r3
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
   12908:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   1290a:	d00d      	beq.n	12928 <rx_demux+0x234>
	return (void *)(fifo + first * size);
   1290c:	fb03 ac0c 	mla	ip, r3, ip, sl

		next = ull_prepare_dequeue_get();

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   12910:	f1bc 0f00 	cmp.w	ip, #0
   12914:	d008      	beq.n	12928 <rx_demux+0x234>
   12916:	2f00      	cmp	r7, #0
   12918:	d1e2      	bne.n	128e0 <rx_demux+0x1ec>
   1291a:	f1b8 0f00 	cmp.w	r8, #0
   1291e:	d003      	beq.n	12928 <rx_demux+0x234>
   12920:	f89c 3020 	ldrb.w	r3, [ip, #32]
   12924:	07db      	lsls	r3, r3, #31
   12926:	d5db      	bpl.n	128e0 <rx_demux+0x1ec>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   12928:	f1b9 0f00 	cmp.w	r9, #0
   1292c:	f43f aee9 	beq.w	12702 <rx_demux+0xe>
	return hdr->ref;
   12930:	f899 3000 	ldrb.w	r3, [r9]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
   12934:	2b00      	cmp	r3, #0
   12936:	f000 8080 	beq.w	12a3a <rx_demux+0x346>
	return hdr->ref--;
   1293a:	f899 3000 	ldrb.w	r3, [r9]
   1293e:	3b01      	subs	r3, #1
   12940:	b2db      	uxtb	r3, r3
   12942:	f889 3000 	strb.w	r3, [r9]
	return hdr->ref;
   12946:	f899 3000 	ldrb.w	r3, [r9]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   1294a:	2b00      	cmp	r3, #0
   1294c:	f47f aed9 	bne.w	12702 <rx_demux+0xe>
   12950:	f8d9 3004 	ldr.w	r3, [r9, #4]
   12954:	2b00      	cmp	r3, #0
   12956:	f43f aed4 	beq.w	12702 <rx_demux+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   1295a:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1295e:	4798      	blx	r3
			if (nack) {
   12960:	e6cf      	b.n	12702 <rx_demux+0xe>
			LL_ASSERT(rx);
   12962:	4a15      	ldr	r2, [pc, #84]	; (129b8 <rx_demux+0x2c4>)
   12964:	491b      	ldr	r1, [pc, #108]	; (129d4 <rx_demux+0x2e0>)
   12966:	4816      	ldr	r0, [pc, #88]	; (129c0 <rx_demux+0x2cc>)
   12968:	f240 63e2 	movw	r3, #1762	; 0x6e2
   1296c:	f00c fb72 	bl	1f054 <printk>
   12970:	4040      	eors	r0, r0
   12972:	f380 8811 	msr	BASEPRI, r0
   12976:	f04f 0003 	mov.w	r0, #3
   1297a:	df02      	svc	2
   1297c:	9b03      	ldr	r3, [sp, #12]
   1297e:	e6cc      	b.n	1271a <rx_demux+0x26>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12980:	465b      	mov	r3, fp
   12982:	463a      	mov	r2, r7
   12984:	4639      	mov	r1, r7
   12986:	2001      	movs	r0, #1
			mfy.param = next;
   12988:	f8cb c008 	str.w	ip, [fp, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1298c:	f7fd f83a 	bl	fa04 <mayfly_enqueue>
			LL_ASSERT(!ret);
   12990:	2800      	cmp	r0, #0
   12992:	d0ad      	beq.n	128f0 <rx_demux+0x1fc>
   12994:	4a08      	ldr	r2, [pc, #32]	; (129b8 <rx_demux+0x2c4>)
   12996:	4910      	ldr	r1, [pc, #64]	; (129d8 <rx_demux+0x2e4>)
   12998:	4809      	ldr	r0, [pc, #36]	; (129c0 <rx_demux+0x2cc>)
   1299a:	f640 032d 	movw	r3, #2093	; 0x82d
   1299e:	f00c fb59 	bl	1f054 <printk>
   129a2:	4040      	eors	r0, r0
   129a4:	f380 8811 	msr	BASEPRI, r0
   129a8:	f04f 0003 	mov.w	r0, #3
   129ac:	df02      	svc	2
   129ae:	e79f      	b.n	128f0 <rx_demux+0x1fc>
   129b0:	20003034 	.word	0x20003034
   129b4:	2000303c 	.word	0x2000303c
   129b8:	0002585c 	.word	0x0002585c
   129bc:	0002568c 	.word	0x0002568c
   129c0:	0002561c 	.word	0x0002561c
   129c4:	20000488 	.word	0x20000488
   129c8:	20003030 	.word	0x20003030
   129cc:	20000324 	.word	0x20000324
   129d0:	20000364 	.word	0x20000364
   129d4:	000258a0 	.word	0x000258a0
   129d8:	000258a4 	.word	0x000258a4
   129dc:	200004ec 	.word	0x200004ec
	*first = _first; /* Write back read-index */
   129e0:	2300      	movs	r3, #0
   129e2:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   129e4:	2a00      	cmp	r2, #0
   129e6:	d09f      	beq.n	12928 <rx_demux+0x234>
	return (void *)(fifo + first * size);
   129e8:	f8df c088 	ldr.w	ip, [pc, #136]	; 12a74 <rx_demux+0x380>
   129ec:	e793      	b.n	12916 <rx_demux+0x222>
		ull_conn_done(done);
   129ee:	4628      	mov	r0, r5
   129f0:	f004 f8f4 	bl	16bdc <ull_conn_done>
		break;
   129f4:	e74f      	b.n	12896 <rx_demux+0x1a2>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   129f6:	4918      	ldr	r1, [pc, #96]	; (12a58 <rx_demux+0x364>)
   129f8:	4602      	mov	r2, r0
   129fa:	6860      	ldr	r0, [r4, #4]
   129fc:	f7fc ff9e 	bl	f93c <memq_dequeue>
		if (rx) {
   12a00:	9905      	ldr	r1, [sp, #20]
   12a02:	2900      	cmp	r1, #0
   12a04:	f43f ae7d 	beq.w	12702 <rx_demux+0xe>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12a08:	4b14      	ldr	r3, [pc, #80]	; (12a5c <rx_demux+0x368>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   12a0a:	4a15      	ldr	r2, [pc, #84]	; (12a60 <rx_demux+0x36c>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12a0c:	78db      	ldrb	r3, [r3, #3]
   12a0e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   12a10:	4638      	mov	r0, r7
   12a12:	f7fc ff83 	bl	f91c <memq_enqueue>
	k_sem_give(sem_recv);
   12a16:	6830      	ldr	r0, [r6, #0]
   12a18:	f00b fe36 	bl	1e688 <z_impl_k_sem_give>
			if (nack) {
   12a1c:	e671      	b.n	12702 <rx_demux+0xe>
	LL_ASSERT(release == done);
   12a1e:	4a11      	ldr	r2, [pc, #68]	; (12a64 <rx_demux+0x370>)
   12a20:	4911      	ldr	r1, [pc, #68]	; (12a68 <rx_demux+0x374>)
   12a22:	4812      	ldr	r0, [pc, #72]	; (12a6c <rx_demux+0x378>)
   12a24:	f640 031c 	movw	r3, #2076	; 0x81c
   12a28:	f00c fb14 	bl	1f054 <printk>
   12a2c:	4040      	eors	r0, r0
   12a2e:	f380 8811 	msr	BASEPRI, r0
   12a32:	f04f 0003 	mov.w	r0, #3
   12a36:	df02      	svc	2
   12a38:	e744      	b.n	128c4 <rx_demux+0x1d0>
	LL_ASSERT(ull_ref_get(ull_hdr));
   12a3a:	4a0a      	ldr	r2, [pc, #40]	; (12a64 <rx_demux+0x370>)
   12a3c:	490c      	ldr	r1, [pc, #48]	; (12a70 <rx_demux+0x37c>)
   12a3e:	480b      	ldr	r0, [pc, #44]	; (12a6c <rx_demux+0x378>)
   12a40:	f640 033f 	movw	r3, #2111	; 0x83f
   12a44:	f00c fb06 	bl	1f054 <printk>
   12a48:	4040      	eors	r0, r0
   12a4a:	f380 8811 	msr	BASEPRI, r0
   12a4e:	f04f 0003 	mov.w	r0, #3
   12a52:	df02      	svc	2
   12a54:	e771      	b.n	1293a <rx_demux+0x246>
   12a56:	bf00      	nop
   12a58:	20003034 	.word	0x20003034
   12a5c:	20000488 	.word	0x20000488
   12a60:	20003030 	.word	0x20003030
   12a64:	0002585c 	.word	0x0002585c
   12a68:	000258c4 	.word	0x000258c4
   12a6c:	0002561c 	.word	0x0002561c
   12a70:	000258ac 	.word	0x000258ac
   12a74:	20000368 	.word	0x20000368

00012a78 <ll_init>:
{
   12a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sem_recv = sem_rx;
   12a7c:	4b9a      	ldr	r3, [pc, #616]	; (12ce8 <ll_init+0x270>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   12a7e:	4d9b      	ldr	r5, [pc, #620]	; (12cec <ll_init+0x274>)
	sem_recv = sem_rx;
   12a80:	6018      	str	r0, [r3, #0]
{
   12a82:	b086      	sub	sp, #24
	cntr_init();
   12a84:	f007 fd02 	bl	1a48c <cntr_init>
	mayfly_init();
   12a88:	f7fc ff68 	bl	f95c <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   12a8c:	4898      	ldr	r0, [pc, #608]	; (12cf0 <ll_init+0x278>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   12a8e:	4c99      	ldr	r4, [pc, #612]	; (12cf4 <ll_init+0x27c>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   12a90:	4b99      	ldr	r3, [pc, #612]	; (12cf8 <ll_init+0x280>)
   12a92:	4a9a      	ldr	r2, [pc, #616]	; (12cfc <ll_init+0x284>)
   12a94:	9305      	str	r3, [sp, #20]
   12a96:	e9cd 0502 	strd	r0, r5, [sp, #8]
   12a9a:	9204      	str	r2, [sp, #16]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   12a9c:	2003      	movs	r0, #3
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   12a9e:	2102      	movs	r1, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   12aa0:	220c      	movs	r2, #12
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   12aa2:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   12aa4:	9201      	str	r2, [sp, #4]
   12aa6:	9400      	str	r4, [sp, #0]
   12aa8:	4a95      	ldr	r2, [pc, #596]	; (12d00 <ll_init+0x288>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   12aaa:	7421      	strb	r1, [r4, #16]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   12aac:	7020      	strb	r0, [r4, #0]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   12aae:	7620      	strb	r0, [r4, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   12ab0:	2106      	movs	r1, #6
   12ab2:	2000      	movs	r0, #0
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   12ab4:	7223      	strb	r3, [r4, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   12ab6:	f7fe f92b 	bl	10d10 <ticker_init>
	LL_ASSERT(!err);
   12aba:	2800      	cmp	r0, #0
   12abc:	f040 80e5 	bne.w	12c8a <ll_init+0x212>
	return z_impl_k_sem_init(sem, initial_count, limit);
   12ac0:	2201      	movs	r2, #1
   12ac2:	2100      	movs	r1, #0
   12ac4:	488f      	ldr	r0, [pc, #572]	; (12d04 <ll_init+0x28c>)
   12ac6:	f011 fcc7 	bl	24458 <z_impl_k_sem_init>
	err = lll_init();
   12aca:	f006 f86f 	bl	18bac <lll_init>
	if (err) {
   12ace:	4604      	mov	r4, r0
   12ad0:	b118      	cbz	r0, 12ada <ll_init+0x62>
}
   12ad2:	4620      	mov	r0, r4
   12ad4:	b006      	add	sp, #24
   12ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   12ada:	4b8b      	ldr	r3, [pc, #556]	; (12d08 <ll_init+0x290>)
		link = mem_acquire(&mem_link_done.free);
   12adc:	f8df 8230 	ldr.w	r8, [pc, #560]	; 12d10 <ll_init+0x298>
   12ae0:	4d8a      	ldr	r5, [pc, #552]	; (12d0c <ll_init+0x294>)
		rx = mem_acquire(&mem_done.free);
   12ae2:	4f89      	ldr	r7, [pc, #548]	; (12d08 <ll_init+0x290>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   12ae4:	1d18      	adds	r0, r3, #4
   12ae6:	2203      	movs	r2, #3
   12ae8:	2134      	movs	r1, #52	; 0x34
   12aea:	f7fc fe85 	bl	f7f8 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   12aee:	4643      	mov	r3, r8
   12af0:	2203      	movs	r2, #3
   12af2:	1d18      	adds	r0, r3, #4
   12af4:	2108      	movs	r1, #8
   12af6:	f7fc fe7f 	bl	f7f8 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   12afa:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   12afc:	786a      	ldrb	r2, [r5, #1]
   12afe:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   12b00:	3401      	adds	r4, #1
   12b02:	b2e4      	uxtb	r4, r4
		last = 0U;
   12b04:	42a2      	cmp	r2, r4
   12b06:	bf08      	it	eq
   12b08:	2400      	moveq	r4, #0
	if (last == first) {
   12b0a:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   12b0c:	4640      	mov	r0, r8
   12b0e:	d013      	beq.n	12b38 <ll_init+0xc0>
   12b10:	f7fc fea0 	bl	f854 <mem_acquire>
   12b14:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
   12b16:	4638      	mov	r0, r7
		if (!link) {
   12b18:	b176      	cbz	r6, 12b38 <ll_init+0xc0>
		rx = mem_acquire(&mem_done.free);
   12b1a:	f7fc fe9b 	bl	f854 <mem_acquire>
		if (!rx) {
   12b1e:	b138      	cbz	r0, 12b30 <ll_init+0xb8>
		rx->link = link;
   12b20:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12b22:	78ea      	ldrb	r2, [r5, #3]
   12b24:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12b26:	fb02 5303 	mla	r3, r2, r3, r5
   12b2a:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   12b2c:	70ec      	strb	r4, [r5, #3]
}
   12b2e:	e7e5      	b.n	12afc <ll_init+0x84>
			mem_release(link, &mem_link_done.free);
   12b30:	4977      	ldr	r1, [pc, #476]	; (12d10 <ll_init+0x298>)
   12b32:	4630      	mov	r0, r6
   12b34:	f7fc fea8 	bl	f888 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   12b38:	4b76      	ldr	r3, [pc, #472]	; (12d14 <ll_init+0x29c>)
   12b3a:	2209      	movs	r2, #9
   12b3c:	1d18      	adds	r0, r3, #4
   12b3e:	2148      	movs	r1, #72	; 0x48
   12b40:	f7fc fe5a 	bl	f7f8 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   12b44:	4b74      	ldr	r3, [pc, #464]	; (12d18 <ll_init+0x2a0>)
   12b46:	220b      	movs	r2, #11
   12b48:	1d18      	adds	r0, r3, #4
   12b4a:	2108      	movs	r1, #8
   12b4c:	f7fc fe54 	bl	f7f8 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   12b50:	4871      	ldr	r0, [pc, #452]	; (12d18 <ll_init+0x2a0>)
   12b52:	f7fc fe7f 	bl	f854 <mem_acquire>
	LL_ASSERT(link);
   12b56:	4604      	mov	r4, r0
   12b58:	2800      	cmp	r0, #0
   12b5a:	f000 80b2 	beq.w	12cc2 <ll_init+0x24a>
	MEMQ_INIT(ull_rx, link);
   12b5e:	4a6f      	ldr	r2, [pc, #444]	; (12d1c <ll_init+0x2a4>)
   12b60:	4620      	mov	r0, r4
   12b62:	1f11      	subs	r1, r2, #4
   12b64:	f7fc fecc 	bl	f900 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   12b68:	486b      	ldr	r0, [pc, #428]	; (12d18 <ll_init+0x2a0>)
   12b6a:	f7fc fe73 	bl	f854 <mem_acquire>
	LL_ASSERT(link);
   12b6e:	4604      	mov	r4, r0
   12b70:	2800      	cmp	r0, #0
   12b72:	f000 8098 	beq.w	12ca6 <ll_init+0x22e>
	MEMQ_INIT(ll_rx, link);
   12b76:	4a6a      	ldr	r2, [pc, #424]	; (12d20 <ll_init+0x2a8>)
	mem_link_rx.quota_pdu = RX_CNT;
   12b78:	4d6a      	ldr	r5, [pc, #424]	; (12d24 <ll_init+0x2ac>)
   12b7a:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 12d3c <ll_init+0x2c4>
		rx = mem_acquire(&mem_pdu_rx.free);
   12b7e:	f8df 8194 	ldr.w	r8, [pc, #404]	; 12d14 <ll_init+0x29c>
	MEMQ_INIT(ll_rx, link);
   12b82:	4620      	mov	r0, r4
   12b84:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   12b86:	462e      	mov	r6, r5
	MEMQ_INIT(ll_rx, link);
   12b88:	f7fc feba 	bl	f900 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   12b8c:	2307      	movs	r3, #7
   12b8e:	f806 3b04 	strb.w	r3, [r6], #4
	while (mem_link_rx.quota_pdu &&
   12b92:	f899 4003 	ldrb.w	r4, [r9, #3]
		link->mem = NULL;
   12b96:	2700      	movs	r7, #0
	if (last == count) {
   12b98:	f899 2001 	ldrb.w	r2, [r9, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   12b9c:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
   12ba0:	3401      	adds	r4, #1
   12ba2:	b2e4      	uxtb	r4, r4
		last = 0U;
   12ba4:	42a2      	cmp	r2, r4
   12ba6:	bf08      	it	eq
   12ba8:	2400      	moveq	r4, #0
	if (last == first) {
   12baa:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   12bac:	4630      	mov	r0, r6
   12bae:	d03c      	beq.n	12c2a <ll_init+0x1b2>
   12bb0:	f7fc fe50 	bl	f854 <mem_acquire>
   12bb4:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   12bb6:	4640      	mov	r0, r8
		if (!link) {
   12bb8:	f1ba 0f00 	cmp.w	sl, #0
   12bbc:	d035      	beq.n	12c2a <ll_init+0x1b2>
		rx = mem_acquire(&mem_pdu_rx.free);
   12bbe:	f7fc fe49 	bl	f854 <mem_acquire>
		if (!rx) {
   12bc2:	b370      	cbz	r0, 12c22 <ll_init+0x1aa>
		link->mem = NULL;
   12bc4:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
   12bc8:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12bcc:	f899 1003 	ldrb.w	r1, [r9, #3]
   12bd0:	f899 2000 	ldrb.w	r2, [r9]
	mem_link_rx.quota_pdu += delta;
   12bd4:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12bd6:	fb01 9202 	mla	r2, r1, r2, r9
   12bda:	3b01      	subs	r3, #1
   12bdc:	b2db      	uxtb	r3, r3
   12bde:	6050      	str	r0, [r2, #4]
   12be0:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   12be2:	f889 4003 	strb.w	r4, [r9, #3]
	while (mem_link_rx.quota_pdu &&
   12be6:	2b00      	cmp	r3, #0
   12be8:	d1d6      	bne.n	12b98 <ll_init+0x120>
	err = lll_adv_init();
   12bea:	f006 fb33 	bl	19254 <lll_adv_init>
	if (err) {
   12bee:	4604      	mov	r4, r0
   12bf0:	2800      	cmp	r0, #0
   12bf2:	f47f af6e 	bne.w	12ad2 <ll_init+0x5a>
	err = ull_adv_init();
   12bf6:	f001 f9e9 	bl	13fcc <ull_adv_init>
	if (err) {
   12bfa:	4604      	mov	r4, r0
   12bfc:	2800      	cmp	r0, #0
   12bfe:	f47f af68 	bne.w	12ad2 <ll_init+0x5a>
	err = lll_conn_init();
   12c02:	f006 ffbf 	bl	19b84 <lll_conn_init>
	if (err) {
   12c06:	4604      	mov	r4, r0
   12c08:	2800      	cmp	r0, #0
   12c0a:	f47f af62 	bne.w	12ad2 <ll_init+0x5a>
	err = ull_conn_init();
   12c0e:	f002 fa29 	bl	15064 <ull_conn_init>
	if (err) {
   12c12:	4604      	mov	r4, r0
   12c14:	2800      	cmp	r0, #0
   12c16:	f47f af5c 	bne.w	12ad2 <ll_init+0x5a>
		ull_filter_reset(true);
   12c1a:	2001      	movs	r0, #1
   12c1c:	f005 fc80 	bl	18520 <ull_filter_reset>
	return  0;
   12c20:	e757      	b.n	12ad2 <ll_init+0x5a>
			mem_release(link, &mem_link_rx.free);
   12c22:	493d      	ldr	r1, [pc, #244]	; (12d18 <ll_init+0x2a0>)
   12c24:	4650      	mov	r0, sl
   12c26:	f7fc fe2f 	bl	f888 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   12c2a:	782b      	ldrb	r3, [r5, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12c2c:	1e5f      	subs	r7, r3, #1
   12c2e:	b2ff      	uxtb	r7, r7
   12c30:	2b00      	cmp	r3, #0
   12c32:	d0da      	beq.n	12bea <ll_init+0x172>
   12c34:	4e3c      	ldr	r6, [pc, #240]	; (12d28 <ll_init+0x2b0>)
		link = mem_acquire(&mem_link_rx.free);
   12c36:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 12d18 <ll_init+0x2a0>
   12c3a:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   12c3c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 12d14 <ll_init+0x29c>
	if (last == count) {
   12c40:	7872      	ldrb	r2, [r6, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12c42:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   12c44:	3401      	adds	r4, #1
   12c46:	b2e4      	uxtb	r4, r4
		last = 0U;
   12c48:	42a2      	cmp	r2, r4
   12c4a:	bf08      	it	eq
   12c4c:	2400      	moveq	r4, #0
	if (last == first) {
   12c4e:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   12c50:	4648      	mov	r0, r9
   12c52:	d0ca      	beq.n	12bea <ll_init+0x172>
   12c54:	f7fc fdfe 	bl	f854 <mem_acquire>
   12c58:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   12c5a:	4640      	mov	r0, r8
		if (!link) {
   12c5c:	f1ba 0f00 	cmp.w	sl, #0
   12c60:	d0c3      	beq.n	12bea <ll_init+0x172>
		rx = mem_acquire(&mem_pdu_rx.free);
   12c62:	f7fc fdf7 	bl	f854 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12c66:	3f01      	subs	r7, #1
   12c68:	b2ff      	uxtb	r7, r7
		if (!rx) {
   12c6a:	2800      	cmp	r0, #0
   12c6c:	d037      	beq.n	12cde <ll_init+0x266>
		rx->link = link;
   12c6e:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12c72:	78f1      	ldrb	r1, [r6, #3]
   12c74:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
   12c76:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12c78:	fb01 6202 	mla	r2, r1, r2, r6
   12c7c:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12c7e:	2fff      	cmp	r7, #255	; 0xff
   12c80:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   12c82:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   12c84:	70f4      	strb	r4, [r6, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12c86:	d1db      	bne.n	12c40 <ll_init+0x1c8>
   12c88:	e7af      	b.n	12bea <ll_init+0x172>
	LL_ASSERT(!err);
   12c8a:	4a28      	ldr	r2, [pc, #160]	; (12d2c <ll_init+0x2b4>)
   12c8c:	4928      	ldr	r1, [pc, #160]	; (12d30 <ll_init+0x2b8>)
   12c8e:	4829      	ldr	r0, [pc, #164]	; (12d34 <ll_init+0x2bc>)
   12c90:	f240 1353 	movw	r3, #339	; 0x153
   12c94:	f00c f9de 	bl	1f054 <printk>
   12c98:	4040      	eors	r0, r0
   12c9a:	f380 8811 	msr	BASEPRI, r0
   12c9e:	f04f 0003 	mov.w	r0, #3
   12ca2:	df02      	svc	2
   12ca4:	e70c      	b.n	12ac0 <ll_init+0x48>
	LL_ASSERT(link);
   12ca6:	4a21      	ldr	r2, [pc, #132]	; (12d2c <ll_init+0x2b4>)
   12ca8:	4923      	ldr	r1, [pc, #140]	; (12d38 <ll_init+0x2c0>)
   12caa:	4822      	ldr	r0, [pc, #136]	; (12d34 <ll_init+0x2bc>)
   12cac:	f240 6325 	movw	r3, #1573	; 0x625
   12cb0:	f00c f9d0 	bl	1f054 <printk>
   12cb4:	4040      	eors	r0, r0
   12cb6:	f380 8811 	msr	BASEPRI, r0
   12cba:	f04f 0003 	mov.w	r0, #3
   12cbe:	df02      	svc	2
   12cc0:	e759      	b.n	12b76 <ll_init+0xfe>
	LL_ASSERT(link);
   12cc2:	4a1a      	ldr	r2, [pc, #104]	; (12d2c <ll_init+0x2b4>)
   12cc4:	491c      	ldr	r1, [pc, #112]	; (12d38 <ll_init+0x2c0>)
   12cc6:	481b      	ldr	r0, [pc, #108]	; (12d34 <ll_init+0x2bc>)
   12cc8:	f240 631e 	movw	r3, #1566	; 0x61e
   12ccc:	f00c f9c2 	bl	1f054 <printk>
   12cd0:	4040      	eors	r0, r0
   12cd2:	f380 8811 	msr	BASEPRI, r0
   12cd6:	f04f 0003 	mov.w	r0, #3
   12cda:	df02      	svc	2
   12cdc:	e73f      	b.n	12b5e <ll_init+0xe6>
			mem_release(link, &mem_link_rx.free);
   12cde:	490e      	ldr	r1, [pc, #56]	; (12d18 <ll_init+0x2a0>)
   12ce0:	4650      	mov	r0, sl
   12ce2:	f7fc fdd1 	bl	f888 <mem_release>
			break;
   12ce6:	e780      	b.n	12bea <ll_init+0x172>
   12ce8:	2000303c 	.word	0x2000303c
   12cec:	0001b11d 	.word	0x0001b11d
   12cf0:	20003178 	.word	0x20003178
   12cf4:	200033e8 	.word	0x200033e8
   12cf8:	0001b261 	.word	0x0001b261
   12cfc:	0001b181 	.word	0x0001b181
   12d00:	20003058 	.word	0x20003058
   12d04:	20003040 	.word	0x20003040
   12d08:	20002c84 	.word	0x20002c84
   12d0c:	20000324 	.word	0x20000324
   12d10:	20002d24 	.word	0x20002d24
   12d14:	20002da0 	.word	0x20002da0
   12d18:	20002d44 	.word	0x20002d44
   12d1c:	20003038 	.word	0x20003038
   12d20:	20003030 	.word	0x20003030
   12d24:	20002d40 	.word	0x20002d40
   12d28:	2000034c 	.word	0x2000034c
   12d2c:	0002585c 	.word	0x0002585c
   12d30:	00025898 	.word	0x00025898
   12d34:	0002561c 	.word	0x0002561c
   12d38:	00025b2c 	.word	0x00025b2c
   12d3c:	20000338 	.word	0x20000338

00012d40 <ll_reset>:
{
   12d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d44:	b087      	sub	sp, #28
	err = ull_adv_reset();
   12d46:	f001 f94f 	bl	13fe8 <ull_adv_reset>
	LL_ASSERT(!err);
   12d4a:	2800      	cmp	r0, #0
   12d4c:	f040 80e9 	bne.w	12f22 <ll_reset+0x1e2>
	err = ull_conn_reset();
   12d50:	f002 f98a 	bl	15068 <ull_conn_reset>
	LL_ASSERT(!err);
   12d54:	2800      	cmp	r0, #0
   12d56:	f040 80f6 	bne.w	12f46 <ll_reset+0x206>
	MFIFO_INIT(tx_ack);
   12d5a:	4ba0      	ldr	r3, [pc, #640]	; (12fdc <ll_reset+0x29c>)
	MFIFO_INIT(done);
   12d5c:	4ea0      	ldr	r6, [pc, #640]	; (12fe0 <ll_reset+0x2a0>)
	MFIFO_INIT(pdu_rx_free);
   12d5e:	4fa1      	ldr	r7, [pc, #644]	; (12fe4 <ll_reset+0x2a4>)
	MFIFO_INIT(ll_pdu_rx_free);
   12d60:	4da1      	ldr	r5, [pc, #644]	; (12fe8 <ll_reset+0x2a8>)
	MFIFO_INIT(tx_ack);
   12d62:	2400      	movs	r4, #0
   12d64:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   12d66:	4620      	mov	r0, r4
   12d68:	f005 fbda 	bl	18520 <ull_filter_reset>
	MFIFO_INIT(prep);
   12d6c:	4b9f      	ldr	r3, [pc, #636]	; (12fec <ll_reset+0x2ac>)
	MFIFO_INIT(done);
   12d6e:	8074      	strh	r4, [r6, #2]
	MFIFO_INIT(prep);
   12d70:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   12d72:	807c      	strh	r4, [r7, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   12d74:	806c      	strh	r4, [r5, #2]
   12d76:	2201      	movs	r2, #1
   12d78:	4621      	mov	r1, r4
   12d7a:	4668      	mov	r0, sp
   12d7c:	f011 fb6c 	bl	24458 <z_impl_k_sem_init>
		mfy.param = &sem;
   12d80:	4b9b      	ldr	r3, [pc, #620]	; (12ff0 <ll_reset+0x2b0>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   12d82:	4622      	mov	r2, r4
   12d84:	4621      	mov	r1, r4
   12d86:	2003      	movs	r0, #3
		mfy.param = &sem;
   12d88:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   12d8c:	f7fc fe3a 	bl	fa04 <mayfly_enqueue>
		LL_ASSERT(!retval);
   12d90:	2800      	cmp	r0, #0
   12d92:	f040 80f4 	bne.w	12f7e <ll_reset+0x23e>
	return z_impl_k_sem_take(sem, timeout);
   12d96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12d9e:	4668      	mov	r0, sp
   12da0:	f00b fc98 	bl	1e6d4 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   12da4:	f001 f9bc 	bl	14120 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   12da8:	2800      	cmp	r0, #0
   12daa:	f040 80da 	bne.w	12f62 <ll_reset+0x222>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   12dae:	4b91      	ldr	r3, [pc, #580]	; (12ff4 <ll_reset+0x2b4>)
		link = mem_acquire(&mem_link_done.free);
   12db0:	f8df 9244 	ldr.w	r9, [pc, #580]	; 12ff8 <ll_reset+0x2b8>
		rx = mem_acquire(&mem_done.free);
   12db4:	f8df 823c 	ldr.w	r8, [pc, #572]	; 12ff4 <ll_reset+0x2b4>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   12db8:	1d18      	adds	r0, r3, #4
   12dba:	2203      	movs	r2, #3
   12dbc:	2134      	movs	r1, #52	; 0x34
   12dbe:	f7fc fd1b 	bl	f7f8 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   12dc2:	464b      	mov	r3, r9
   12dc4:	2203      	movs	r2, #3
   12dc6:	1d18      	adds	r0, r3, #4
   12dc8:	2108      	movs	r1, #8
   12dca:	f7fc fd15 	bl	f7f8 <mem_init>
static inline void done_alloc(void)
   12dce:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   12dd0:	7872      	ldrb	r2, [r6, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   12dd2:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   12dd4:	3401      	adds	r4, #1
   12dd6:	b2e4      	uxtb	r4, r4
		last = 0U;
   12dd8:	42a2      	cmp	r2, r4
   12dda:	bf08      	it	eq
   12ddc:	2400      	moveq	r4, #0
	if (last == first) {
   12dde:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   12de0:	4648      	mov	r0, r9
   12de2:	d016      	beq.n	12e12 <ll_reset+0xd2>
   12de4:	f7fc fd36 	bl	f854 <mem_acquire>
   12de8:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_done.free);
   12dea:	4640      	mov	r0, r8
		if (!link) {
   12dec:	f1ba 0f00 	cmp.w	sl, #0
   12df0:	d00f      	beq.n	12e12 <ll_reset+0xd2>
		rx = mem_acquire(&mem_done.free);
   12df2:	f7fc fd2f 	bl	f854 <mem_acquire>
		if (!rx) {
   12df6:	b140      	cbz	r0, 12e0a <ll_reset+0xca>
		rx->link = link;
   12df8:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12dfc:	78f2      	ldrb	r2, [r6, #3]
   12dfe:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12e00:	fb02 6303 	mla	r3, r2, r3, r6
   12e04:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   12e06:	70f4      	strb	r4, [r6, #3]
}
   12e08:	e7e2      	b.n	12dd0 <ll_reset+0x90>
			mem_release(link, &mem_link_done.free);
   12e0a:	497b      	ldr	r1, [pc, #492]	; (12ff8 <ll_reset+0x2b8>)
   12e0c:	4650      	mov	r0, sl
   12e0e:	f7fc fd3b 	bl	f888 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   12e12:	4b7a      	ldr	r3, [pc, #488]	; (12ffc <ll_reset+0x2bc>)
   12e14:	2209      	movs	r2, #9
   12e16:	1d18      	adds	r0, r3, #4
   12e18:	2148      	movs	r1, #72	; 0x48
   12e1a:	f7fc fced 	bl	f7f8 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   12e1e:	4b78      	ldr	r3, [pc, #480]	; (13000 <ll_reset+0x2c0>)
   12e20:	220b      	movs	r2, #11
   12e22:	1d18      	adds	r0, r3, #4
   12e24:	2108      	movs	r1, #8
   12e26:	f7fc fce7 	bl	f7f8 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   12e2a:	4875      	ldr	r0, [pc, #468]	; (13000 <ll_reset+0x2c0>)
   12e2c:	f7fc fd12 	bl	f854 <mem_acquire>
	LL_ASSERT(link);
   12e30:	4604      	mov	r4, r0
   12e32:	2800      	cmp	r0, #0
   12e34:	f000 80bf 	beq.w	12fb6 <ll_reset+0x276>
	MEMQ_INIT(ull_rx, link);
   12e38:	4a72      	ldr	r2, [pc, #456]	; (13004 <ll_reset+0x2c4>)
   12e3a:	4620      	mov	r0, r4
   12e3c:	1f11      	subs	r1, r2, #4
   12e3e:	f7fc fd5f 	bl	f900 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   12e42:	486f      	ldr	r0, [pc, #444]	; (13000 <ll_reset+0x2c0>)
   12e44:	f7fc fd06 	bl	f854 <mem_acquire>
	LL_ASSERT(link);
   12e48:	4604      	mov	r4, r0
   12e4a:	2800      	cmp	r0, #0
   12e4c:	f000 80a5 	beq.w	12f9a <ll_reset+0x25a>
	MEMQ_INIT(ll_rx, link);
   12e50:	4a6d      	ldr	r2, [pc, #436]	; (13008 <ll_reset+0x2c8>)
	mem_link_rx.quota_pdu = RX_CNT;
   12e52:	4e6e      	ldr	r6, [pc, #440]	; (1300c <ll_reset+0x2cc>)
		rx = mem_acquire(&mem_pdu_rx.free);
   12e54:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 12ffc <ll_reset+0x2bc>
	MEMQ_INIT(ll_rx, link);
   12e58:	4620      	mov	r0, r4
   12e5a:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   12e5c:	46b0      	mov	r8, r6
	MEMQ_INIT(ll_rx, link);
   12e5e:	f7fc fd4f 	bl	f900 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   12e62:	2307      	movs	r3, #7
   12e64:	f808 3b04 	strb.w	r3, [r8], #4
	while (mem_link_rx.quota_pdu &&
   12e68:	78ec      	ldrb	r4, [r5, #3]
		link->mem = NULL;
   12e6a:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   12e6e:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   12e70:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   12e72:	3401      	adds	r4, #1
   12e74:	b2e4      	uxtb	r4, r4
		last = 0U;
   12e76:	42a2      	cmp	r2, r4
   12e78:	bf08      	it	eq
   12e7a:	2400      	moveq	r4, #0
	if (last == first) {
   12e7c:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   12e7e:	4640      	mov	r0, r8
   12e80:	d020      	beq.n	12ec4 <ll_reset+0x184>
   12e82:	f7fc fce7 	bl	f854 <mem_acquire>
   12e86:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   12e88:	4650      	mov	r0, sl
		if (!link) {
   12e8a:	f1bb 0f00 	cmp.w	fp, #0
   12e8e:	d019      	beq.n	12ec4 <ll_reset+0x184>
		rx = mem_acquire(&mem_pdu_rx.free);
   12e90:	f7fc fce0 	bl	f854 <mem_acquire>
		if (!rx) {
   12e94:	b190      	cbz	r0, 12ebc <ll_reset+0x17c>
		link->mem = NULL;
   12e96:	f8cb 9004 	str.w	r9, [fp, #4]
		rx->link = link;
   12e9a:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12e9e:	78e9      	ldrb	r1, [r5, #3]
   12ea0:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
   12ea2:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12ea4:	fb01 5202 	mla	r2, r1, r2, r5
   12ea8:	3b01      	subs	r3, #1
   12eaa:	b2db      	uxtb	r3, r3
   12eac:	6050      	str	r0, [r2, #4]
   12eae:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   12eb0:	70ec      	strb	r4, [r5, #3]
	while (mem_link_rx.quota_pdu &&
   12eb2:	2b00      	cmp	r3, #0
   12eb4:	d1db      	bne.n	12e6e <ll_reset+0x12e>
}
   12eb6:	b007      	add	sp, #28
   12eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   12ebc:	4950      	ldr	r1, [pc, #320]	; (13000 <ll_reset+0x2c0>)
   12ebe:	4658      	mov	r0, fp
   12ec0:	f7fc fce2 	bl	f888 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   12ec4:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12ec6:	1e5d      	subs	r5, r3, #1
   12ec8:	b2ed      	uxtb	r5, r5
   12eca:	2b00      	cmp	r3, #0
   12ecc:	d0f3      	beq.n	12eb6 <ll_reset+0x176>
   12ece:	78fc      	ldrb	r4, [r7, #3]
		link = mem_acquire(&mem_link_rx.free);
   12ed0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 13000 <ll_reset+0x2c0>
		rx = mem_acquire(&mem_pdu_rx.free);
   12ed4:	f8df 8124 	ldr.w	r8, [pc, #292]	; 12ffc <ll_reset+0x2bc>
	if (last == count) {
   12ed8:	787a      	ldrb	r2, [r7, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12eda:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   12edc:	3401      	adds	r4, #1
   12ede:	b2e4      	uxtb	r4, r4
		last = 0U;
   12ee0:	42a2      	cmp	r2, r4
   12ee2:	bf08      	it	eq
   12ee4:	2400      	moveq	r4, #0
	if (last == first) {
   12ee6:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   12ee8:	4648      	mov	r0, r9
   12eea:	d0e4      	beq.n	12eb6 <ll_reset+0x176>
   12eec:	f7fc fcb2 	bl	f854 <mem_acquire>
   12ef0:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   12ef2:	4640      	mov	r0, r8
		if (!link) {
   12ef4:	f1ba 0f00 	cmp.w	sl, #0
   12ef8:	d0dd      	beq.n	12eb6 <ll_reset+0x176>
		rx = mem_acquire(&mem_pdu_rx.free);
   12efa:	f7fc fcab 	bl	f854 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12efe:	3d01      	subs	r5, #1
   12f00:	b2ed      	uxtb	r5, r5
		if (!rx) {
   12f02:	2800      	cmp	r0, #0
   12f04:	d065      	beq.n	12fd2 <ll_reset+0x292>
		rx->link = link;
   12f06:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12f0a:	78f9      	ldrb	r1, [r7, #3]
   12f0c:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   12f0e:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12f10:	fb01 7202 	mla	r2, r1, r2, r7
   12f14:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12f16:	2dff      	cmp	r5, #255	; 0xff
   12f18:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   12f1a:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   12f1c:	70fc      	strb	r4, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12f1e:	d1db      	bne.n	12ed8 <ll_reset+0x198>
   12f20:	e7c9      	b.n	12eb6 <ll_reset+0x176>
	LL_ASSERT(!err);
   12f22:	4a3b      	ldr	r2, [pc, #236]	; (13010 <ll_reset+0x2d0>)
   12f24:	493b      	ldr	r1, [pc, #236]	; (13014 <ll_reset+0x2d4>)
   12f26:	483c      	ldr	r0, [pc, #240]	; (13018 <ll_reset+0x2d8>)
   12f28:	f44f 73e5 	mov.w	r3, #458	; 0x1ca
   12f2c:	f00c f892 	bl	1f054 <printk>
   12f30:	4040      	eors	r0, r0
   12f32:	f380 8811 	msr	BASEPRI, r0
   12f36:	f04f 0003 	mov.w	r0, #3
   12f3a:	df02      	svc	2
	err = ull_conn_reset();
   12f3c:	f002 f894 	bl	15068 <ull_conn_reset>
	LL_ASSERT(!err);
   12f40:	2800      	cmp	r0, #0
   12f42:	f43f af0a 	beq.w	12d5a <ll_reset+0x1a>
   12f46:	4a32      	ldr	r2, [pc, #200]	; (13010 <ll_reset+0x2d0>)
   12f48:	4932      	ldr	r1, [pc, #200]	; (13014 <ll_reset+0x2d4>)
   12f4a:	4833      	ldr	r0, [pc, #204]	; (13018 <ll_reset+0x2d8>)
   12f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
   12f50:	f00c f880 	bl	1f054 <printk>
   12f54:	4040      	eors	r0, r0
   12f56:	f380 8811 	msr	BASEPRI, r0
   12f5a:	f04f 0003 	mov.w	r0, #3
   12f5e:	df02      	svc	2
   12f60:	e6fb      	b.n	12d5a <ll_reset+0x1a>
	LL_ASSERT(!err);
   12f62:	4a2b      	ldr	r2, [pc, #172]	; (13010 <ll_reset+0x2d0>)
   12f64:	492b      	ldr	r1, [pc, #172]	; (13014 <ll_reset+0x2d4>)
   12f66:	482c      	ldr	r0, [pc, #176]	; (13018 <ll_reset+0x2d8>)
   12f68:	f240 233f 	movw	r3, #575	; 0x23f
   12f6c:	f00c f872 	bl	1f054 <printk>
   12f70:	4040      	eors	r0, r0
   12f72:	f380 8811 	msr	BASEPRI, r0
   12f76:	f04f 0003 	mov.w	r0, #3
   12f7a:	df02      	svc	2
   12f7c:	e717      	b.n	12dae <ll_reset+0x6e>
		LL_ASSERT(!retval);
   12f7e:	4a24      	ldr	r2, [pc, #144]	; (13010 <ll_reset+0x2d0>)
   12f80:	4926      	ldr	r1, [pc, #152]	; (1301c <ll_reset+0x2dc>)
   12f82:	4825      	ldr	r0, [pc, #148]	; (13018 <ll_reset+0x2d8>)
   12f84:	f240 2332 	movw	r3, #562	; 0x232
   12f88:	f00c f864 	bl	1f054 <printk>
   12f8c:	4040      	eors	r0, r0
   12f8e:	f380 8811 	msr	BASEPRI, r0
   12f92:	f04f 0003 	mov.w	r0, #3
   12f96:	df02      	svc	2
   12f98:	e6fd      	b.n	12d96 <ll_reset+0x56>
	LL_ASSERT(link);
   12f9a:	4a1d      	ldr	r2, [pc, #116]	; (13010 <ll_reset+0x2d0>)
   12f9c:	4920      	ldr	r1, [pc, #128]	; (13020 <ll_reset+0x2e0>)
   12f9e:	481e      	ldr	r0, [pc, #120]	; (13018 <ll_reset+0x2d8>)
   12fa0:	f240 6325 	movw	r3, #1573	; 0x625
   12fa4:	f00c f856 	bl	1f054 <printk>
   12fa8:	4040      	eors	r0, r0
   12faa:	f380 8811 	msr	BASEPRI, r0
   12fae:	f04f 0003 	mov.w	r0, #3
   12fb2:	df02      	svc	2
   12fb4:	e74c      	b.n	12e50 <ll_reset+0x110>
	LL_ASSERT(link);
   12fb6:	4a16      	ldr	r2, [pc, #88]	; (13010 <ll_reset+0x2d0>)
   12fb8:	4919      	ldr	r1, [pc, #100]	; (13020 <ll_reset+0x2e0>)
   12fba:	4817      	ldr	r0, [pc, #92]	; (13018 <ll_reset+0x2d8>)
   12fbc:	f240 631e 	movw	r3, #1566	; 0x61e
   12fc0:	f00c f848 	bl	1f054 <printk>
   12fc4:	4040      	eors	r0, r0
   12fc6:	f380 8811 	msr	BASEPRI, r0
   12fca:	f04f 0003 	mov.w	r0, #3
   12fce:	df02      	svc	2
   12fd0:	e732      	b.n	12e38 <ll_reset+0xf8>
			mem_release(link, &mem_link_rx.free);
   12fd2:	490b      	ldr	r1, [pc, #44]	; (13000 <ll_reset+0x2c0>)
   12fd4:	4650      	mov	r0, sl
   12fd6:	f7fc fc57 	bl	f888 <mem_release>
			break;
   12fda:	e76c      	b.n	12eb6 <ll_reset+0x176>
   12fdc:	20000488 	.word	0x20000488
   12fe0:	20000324 	.word	0x20000324
   12fe4:	2000034c 	.word	0x2000034c
   12fe8:	20000338 	.word	0x20000338
   12fec:	20000364 	.word	0x20000364
   12ff0:	200004ac 	.word	0x200004ac
   12ff4:	20002c84 	.word	0x20002c84
   12ff8:	20002d24 	.word	0x20002d24
   12ffc:	20002da0 	.word	0x20002da0
   13000:	20002d44 	.word	0x20002d44
   13004:	20003038 	.word	0x20003038
   13008:	20003030 	.word	0x20003030
   1300c:	20002d40 	.word	0x20002d40
   13010:	0002585c 	.word	0x0002585c
   13014:	00025898 	.word	0x00025898
   13018:	0002561c 	.word	0x0002561c
   1301c:	000258d4 	.word	0x000258d4
   13020:	00025b2c 	.word	0x00025b2c

00013024 <ll_rx_get>:
{
   13024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13028:	b085      	sub	sp, #20
   1302a:	e9cd 0100 	strd	r0, r1, [sp]
   1302e:	4c5f      	ldr	r4, [pc, #380]	; (131ac <ll_rx_get+0x188>)
				mem_release(link, &mem_link_rx.free);
   13030:	4d5f      	ldr	r5, [pc, #380]	; (131b0 <ll_rx_get+0x18c>)
   13032:	f8df 9184 	ldr.w	r9, [pc, #388]	; 131b8 <ll_rx_get+0x194>
	*node_rx = NULL;
   13036:	9a00      	ldr	r2, [sp, #0]
   13038:	2300      	movs	r3, #0
   1303a:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   1303c:	e9d9 0100 	ldrd	r0, r1, [r9]
   13040:	aa03      	add	r2, sp, #12
   13042:	f7fc fc73 	bl	f92c <memq_peek>
	if (link) {
   13046:	4607      	mov	r7, r0
   13048:	2800      	cmp	r0, #0
   1304a:	f000 80a4 	beq.w	13196 <ll_rx_get+0x172>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   1304e:	9b03      	ldr	r3, [sp, #12]
   13050:	4958      	ldr	r1, [pc, #352]	; (131b4 <ll_rx_get+0x190>)
   13052:	781a      	ldrb	r2, [r3, #0]
   13054:	9801      	ldr	r0, [sp, #4]
   13056:	f7ff fae7 	bl	12628 <tx_cmplt_get>
		if (!cmplt) {
   1305a:	4603      	mov	r3, r0
   1305c:	2800      	cmp	r0, #0
   1305e:	f040 8091 	bne.w	13184 <ll_rx_get+0x160>
			f = mfifo_tx_ack.f;
   13062:	78a2      	ldrb	r2, [r4, #2]
   13064:	f88d 2009 	strb.w	r2, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   13068:	78e2      	ldrb	r2, [r4, #3]
   1306a:	f10d 0109 	add.w	r1, sp, #9
   1306e:	f10d 000a 	add.w	r0, sp, #10
   13072:	461e      	mov	r6, r3
   13074:	f7ff fad8 	bl	12628 <tx_cmplt_get>
   13078:	ea46 0200 	orr.w	r2, r6, r0
			} while ((cmplt_prev != 0U) ||
   1307c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
   13080:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
   13082:	d1f1      	bne.n	13068 <ll_rx_get+0x44>
			if (rx->type == NODE_RX_TYPE_DC_PDU_RELEASE) {
   13084:	9b03      	ldr	r3, [sp, #12]
   13086:	7919      	ldrb	r1, [r3, #4]
   13088:	2903      	cmp	r1, #3
   1308a:	d178      	bne.n	1317e <ll_rx_get+0x15a>
				(void)memq_dequeue(memq_ll_rx.tail,
   1308c:	494a      	ldr	r1, [pc, #296]	; (131b8 <ll_rx_get+0x194>)
   1308e:	f8d9 0004 	ldr.w	r0, [r9, #4]
   13092:	f7fc fc53 	bl	f93c <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   13096:	4949      	ldr	r1, [pc, #292]	; (131bc <ll_rx_get+0x198>)
   13098:	4638      	mov	r0, r7
   1309a:	f7fc fbf5 	bl	f888 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1309e:	782b      	ldrb	r3, [r5, #0]
   130a0:	2b06      	cmp	r3, #6
   130a2:	d85d      	bhi.n	13160 <ll_rx_get+0x13c>
	mem_link_rx.quota_pdu += delta;
   130a4:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   130a6:	4946      	ldr	r1, [pc, #280]	; (131c0 <ll_rx_get+0x19c>)
   130a8:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   130aa:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   130ac:	f7fc fbec 	bl	f888 <mem_release>
	while (mem_link_rx.quota_pdu &&
   130b0:	782b      	ldrb	r3, [r5, #0]
   130b2:	2b00      	cmp	r3, #0
   130b4:	d0bf      	beq.n	13036 <ll_rx_get+0x12>
   130b6:	4f43      	ldr	r7, [pc, #268]	; (131c4 <ll_rx_get+0x1a0>)
		link = mem_acquire(&mem_link_rx.free);
   130b8:	f8df 8100 	ldr.w	r8, [pc, #256]	; 131bc <ll_rx_get+0x198>
   130bc:	78fe      	ldrb	r6, [r7, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   130be:	f8df a100 	ldr.w	sl, [pc, #256]	; 131c0 <ll_rx_get+0x19c>
	if (last == count) {
   130c2:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   130c4:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   130c6:	3601      	adds	r6, #1
   130c8:	b2f6      	uxtb	r6, r6
		last = 0U;
   130ca:	42b2      	cmp	r2, r6
   130cc:	bf08      	it	eq
   130ce:	2600      	moveq	r6, #0
	if (last == first) {
   130d0:	429e      	cmp	r6, r3
		link = mem_acquire(&mem_link_rx.free);
   130d2:	4640      	mov	r0, r8
   130d4:	d01f      	beq.n	13116 <ll_rx_get+0xf2>
   130d6:	f7fc fbbd 	bl	f854 <mem_acquire>
   130da:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   130dc:	4650      	mov	r0, sl
		if (!link) {
   130de:	f1bb 0f00 	cmp.w	fp, #0
   130e2:	d018      	beq.n	13116 <ll_rx_get+0xf2>
		rx = mem_acquire(&mem_pdu_rx.free);
   130e4:	f7fc fbb6 	bl	f854 <mem_acquire>
		if (!rx) {
   130e8:	b188      	cbz	r0, 1310e <ll_rx_get+0xea>
		link->mem = NULL;
   130ea:	2300      	movs	r3, #0
   130ec:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   130f0:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   130f4:	78f9      	ldrb	r1, [r7, #3]
   130f6:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   130f8:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   130fa:	fb01 7202 	mla	r2, r1, r2, r7
   130fe:	3b01      	subs	r3, #1
   13100:	b2db      	uxtb	r3, r3
   13102:	6050      	str	r0, [r2, #4]
   13104:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   13106:	70fe      	strb	r6, [r7, #3]
	while (mem_link_rx.quota_pdu &&
   13108:	2b00      	cmp	r3, #0
   1310a:	d1da      	bne.n	130c2 <ll_rx_get+0x9e>
   1310c:	e793      	b.n	13036 <ll_rx_get+0x12>
			mem_release(link, &mem_link_rx.free);
   1310e:	492b      	ldr	r1, [pc, #172]	; (131bc <ll_rx_get+0x198>)
   13110:	4658      	mov	r0, fp
   13112:	f7fc fbb9 	bl	f888 <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13116:	782b      	ldrb	r3, [r5, #0]
   13118:	2b00      	cmp	r3, #0
   1311a:	d08c      	beq.n	13036 <ll_rx_get+0x12>
   1311c:	4f2a      	ldr	r7, [pc, #168]	; (131c8 <ll_rx_get+0x1a4>)
	last = last + 1;
   1311e:	78fe      	ldrb	r6, [r7, #3]
	if (last == count) {
   13120:	787a      	ldrb	r2, [r7, #1]
   13122:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   13124:	3601      	adds	r6, #1
   13126:	b2f6      	uxtb	r6, r6
		last = 0U;
   13128:	42b2      	cmp	r2, r6
   1312a:	bf08      	it	eq
   1312c:	2600      	moveq	r6, #0
	if (last == first) {
   1312e:	429e      	cmp	r6, r3
   13130:	d081      	beq.n	13036 <ll_rx_get+0x12>
		link = mem_acquire(&mem_link_rx.free);
   13132:	4822      	ldr	r0, [pc, #136]	; (131bc <ll_rx_get+0x198>)
   13134:	f7fc fb8e 	bl	f854 <mem_acquire>
		if (!link) {
   13138:	4680      	mov	r8, r0
   1313a:	2800      	cmp	r0, #0
   1313c:	f43f af7b 	beq.w	13036 <ll_rx_get+0x12>
		rx = mem_acquire(&mem_pdu_rx.free);
   13140:	481f      	ldr	r0, [pc, #124]	; (131c0 <ll_rx_get+0x19c>)
   13142:	f7fc fb87 	bl	f854 <mem_acquire>
		if (!rx) {
   13146:	b308      	cbz	r0, 1318c <ll_rx_get+0x168>
		rx->link = link;
   13148:	f8c0 8000 	str.w	r8, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1314c:	78f9      	ldrb	r1, [r7, #3]
   1314e:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   13150:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13152:	fb01 7202 	mla	r2, r1, r2, r7
   13156:	3b01      	subs	r3, #1
   13158:	6050      	str	r0, [r2, #4]
   1315a:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   1315c:	70fe      	strb	r6, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1315e:	e76a      	b.n	13036 <ll_rx_get+0x12>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   13160:	4a1a      	ldr	r2, [pc, #104]	; (131cc <ll_rx_get+0x1a8>)
   13162:	491b      	ldr	r1, [pc, #108]	; (131d0 <ll_rx_get+0x1ac>)
   13164:	481b      	ldr	r0, [pc, #108]	; (131d4 <ll_rx_get+0x1b0>)
   13166:	f240 4367 	movw	r3, #1127	; 0x467
   1316a:	f00b ff73 	bl	1f054 <printk>
   1316e:	4040      	eors	r0, r0
   13170:	f380 8811 	msr	BASEPRI, r0
   13174:	f04f 0003 	mov.w	r0, #3
   13178:	df02      	svc	2
   1317a:	782b      	ldrb	r3, [r5, #0]
   1317c:	e792      	b.n	130a4 <ll_rx_get+0x80>
			*node_rx = rx;
   1317e:	9900      	ldr	r1, [sp, #0]
   13180:	600b      	str	r3, [r1, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   13182:	4613      	mov	r3, r2
}
   13184:	4618      	mov	r0, r3
   13186:	b005      	add	sp, #20
   13188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   1318c:	490b      	ldr	r1, [pc, #44]	; (131bc <ll_rx_get+0x198>)
   1318e:	4640      	mov	r0, r8
   13190:	f7fc fb7a 	bl	f888 <mem_release>
			break;
   13194:	e74f      	b.n	13036 <ll_rx_get+0x12>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   13196:	78e2      	ldrb	r2, [r4, #3]
   13198:	4906      	ldr	r1, [pc, #24]	; (131b4 <ll_rx_get+0x190>)
   1319a:	9801      	ldr	r0, [sp, #4]
   1319c:	f7ff fa44 	bl	12628 <tx_cmplt_get>
   131a0:	4603      	mov	r3, r0
}
   131a2:	4618      	mov	r0, r3
   131a4:	b005      	add	sp, #20
   131a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131aa:	bf00      	nop
   131ac:	20000488 	.word	0x20000488
   131b0:	20002d40 	.word	0x20002d40
   131b4:	2000048a 	.word	0x2000048a
   131b8:	2000302c 	.word	0x2000302c
   131bc:	20002d44 	.word	0x20002d44
   131c0:	20002da0 	.word	0x20002da0
   131c4:	20000338 	.word	0x20000338
   131c8:	2000034c 	.word	0x2000034c
   131cc:	0002585c 	.word	0x0002585c
   131d0:	000258dc 	.word	0x000258dc
   131d4:	0002561c 	.word	0x0002561c

000131d8 <ll_rx_dequeue>:
{
   131d8:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   131da:	495d      	ldr	r1, [pc, #372]	; (13350 <ll_rx_dequeue+0x178>)
{
   131dc:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   131de:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   131e0:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   131e2:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   131e4:	aa01      	add	r2, sp, #4
   131e6:	f7fc fba9 	bl	f93c <memq_dequeue>
	LL_ASSERT(link);
   131ea:	4604      	mov	r4, r0
   131ec:	2800      	cmp	r0, #0
   131ee:	d053      	beq.n	13298 <ll_rx_dequeue+0xc0>
	mem_release(link, &mem_link_rx.free);
   131f0:	4958      	ldr	r1, [pc, #352]	; (13354 <ll_rx_dequeue+0x17c>)
   131f2:	4620      	mov	r0, r4
   131f4:	f7fc fb48 	bl	f888 <mem_release>
	switch (rx->type) {
   131f8:	9a01      	ldr	r2, [sp, #4]
   131fa:	7913      	ldrb	r3, [r2, #4]
   131fc:	2b17      	cmp	r3, #23
   131fe:	d811      	bhi.n	13224 <ll_rx_dequeue+0x4c>
   13200:	e8df f003 	tbb	[pc, r3]
   13204:	100c100c 	.word	0x100c100c
   13208:	10101010 	.word	0x10101010
   1320c:	10101010 	.word	0x10101010
   13210:	10101010 	.word	0x10101010
   13214:	0c0c1f10 	.word	0x0c0c1f10
   13218:	0c0c0c0c 	.word	0x0c0c0c0c
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   1321c:	2b00      	cmp	r3, #0
   1321e:	d049      	beq.n	132b4 <ll_rx_dequeue+0xdc>
}
   13220:	b002      	add	sp, #8
   13222:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
   13224:	4a4c      	ldr	r2, [pc, #304]	; (13358 <ll_rx_dequeue+0x180>)
   13226:	494d      	ldr	r1, [pc, #308]	; (1335c <ll_rx_dequeue+0x184>)
   13228:	484d      	ldr	r0, [pc, #308]	; (13360 <ll_rx_dequeue+0x188>)
   1322a:	f240 3377 	movw	r3, #887	; 0x377
   1322e:	f00b ff11 	bl	1f054 <printk>
   13232:	4040      	eors	r0, r0
   13234:	f380 8811 	msr	BASEPRI, r0
   13238:	f04f 0003 	mov.w	r0, #3
   1323c:	df02      	svc	2
}
   1323e:	b002      	add	sp, #8
   13240:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   13242:	7f13      	ldrb	r3, [r2, #28]
   13244:	2b3c      	cmp	r3, #60	; 0x3c
   13246:	d044      	beq.n	132d2 <ll_rx_dequeue+0xfa>
   13248:	7f53      	ldrb	r3, [r2, #29]
   1324a:	b1bb      	cbz	r3, 1327c <ll_rx_dequeue+0xa4>
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   1324c:	6893      	ldr	r3, [r2, #8]
   1324e:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   13250:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   13252:	b120      	cbz	r0, 1325e <ll_rx_dequeue+0x86>
					adv->node_rx_cc_free = NULL;
   13254:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   13256:	4943      	ldr	r1, [pc, #268]	; (13364 <ll_rx_dequeue+0x18c>)
					adv->node_rx_cc_free = NULL;
   13258:	64a3      	str	r3, [r4, #72]	; 0x48
					mem_release(rx_free, &mem_pdu_rx.free);
   1325a:	f7fc fb15 	bl	f888 <mem_release>
			adv->is_enabled = 0U;
   1325e:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   13262:	f36f 0300 	bfc	r3, #0, #1
   13266:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
			      ull_adv_is_enabled(0));
   1326a:	2000      	movs	r0, #0
   1326c:	f000 ff96 	bl	1419c <ull_adv_is_enabled>
			if (!bm) {
   13270:	2800      	cmp	r0, #0
   13272:	d1d5      	bne.n	13220 <ll_rx_dequeue+0x48>
				ull_filter_adv_scan_state_cb(0);
   13274:	f004 fd4e 	bl	17d14 <ull_filter_adv_scan_state_cb>
}
   13278:	b002      	add	sp, #8
   1327a:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   1327c:	4a36      	ldr	r2, [pc, #216]	; (13358 <ll_rx_dequeue+0x180>)
   1327e:	4937      	ldr	r1, [pc, #220]	; (1335c <ll_rx_dequeue+0x184>)
   13280:	4837      	ldr	r0, [pc, #220]	; (13360 <ll_rx_dequeue+0x188>)
   13282:	f240 331f 	movw	r3, #799	; 0x31f
   13286:	f00b fee5 	bl	1f054 <printk>
   1328a:	4040      	eors	r0, r0
   1328c:	f380 8811 	msr	BASEPRI, r0
   13290:	f04f 0003 	mov.w	r0, #3
   13294:	df02      	svc	2
   13296:	e7e8      	b.n	1326a <ll_rx_dequeue+0x92>
	LL_ASSERT(link);
   13298:	4a2f      	ldr	r2, [pc, #188]	; (13358 <ll_rx_dequeue+0x180>)
   1329a:	4933      	ldr	r1, [pc, #204]	; (13368 <ll_rx_dequeue+0x190>)
   1329c:	4830      	ldr	r0, [pc, #192]	; (13360 <ll_rx_dequeue+0x188>)
   1329e:	f240 2396 	movw	r3, #662	; 0x296
   132a2:	f00b fed7 	bl	1f054 <printk>
   132a6:	4040      	eors	r0, r0
   132a8:	f380 8811 	msr	BASEPRI, r0
   132ac:	f04f 0003 	mov.w	r0, #3
   132b0:	df02      	svc	2
   132b2:	e79d      	b.n	131f0 <ll_rx_dequeue+0x18>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   132b4:	4a28      	ldr	r2, [pc, #160]	; (13358 <ll_rx_dequeue+0x180>)
   132b6:	492d      	ldr	r1, [pc, #180]	; (1336c <ll_rx_dequeue+0x194>)
   132b8:	4829      	ldr	r0, [pc, #164]	; (13360 <ll_rx_dequeue+0x188>)
   132ba:	f240 3373 	movw	r3, #883	; 0x373
   132be:	f00b fec9 	bl	1f054 <printk>
   132c2:	4040      	eors	r0, r0
   132c4:	f380 8811 	msr	BASEPRI, r0
   132c8:	f04f 0003 	mov.w	r0, #3
   132cc:	df02      	svc	2
}
   132ce:	b002      	add	sp, #8
   132d0:	bd70      	pop	{r4, r5, r6, pc}
			struct lll_adv *lll = ftr->param;
   132d2:	6896      	ldr	r6, [r2, #8]
				conn_lll = lll->conn;
   132d4:	68b5      	ldr	r5, [r6, #8]
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   132d6:	6834      	ldr	r4, [r6, #0]
				LL_ASSERT(conn_lll);
   132d8:	b1ed      	cbz	r5, 13316 <ll_rx_dequeue+0x13e>
				LL_ASSERT(!conn_lll->link_tx_free);
   132da:	6deb      	ldr	r3, [r5, #92]	; 0x5c
				lll->conn = NULL;
   132dc:	2200      	movs	r2, #0
   132de:	60b2      	str	r2, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
   132e0:	b163      	cbz	r3, 132fc <ll_rx_dequeue+0x124>
   132e2:	4a1d      	ldr	r2, [pc, #116]	; (13358 <ll_rx_dequeue+0x180>)
   132e4:	4922      	ldr	r1, [pc, #136]	; (13370 <ll_rx_dequeue+0x198>)
   132e6:	481e      	ldr	r0, [pc, #120]	; (13360 <ll_rx_dequeue+0x188>)
   132e8:	f44f 7340 	mov.w	r3, #768	; 0x300
   132ec:	f00b feb2 	bl	1f054 <printk>
   132f0:	4040      	eors	r0, r0
   132f2:	f380 8811 	msr	BASEPRI, r0
   132f6:	f04f 0003 	mov.w	r0, #3
   132fa:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   132fc:	f105 0150 	add.w	r1, r5, #80	; 0x50
   13300:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   13304:	f7fc fb00 	bl	f908 <memq_deinit>
				LL_ASSERT(link);
   13308:	4606      	mov	r6, r0
   1330a:	b190      	cbz	r0, 13332 <ll_rx_dequeue+0x15a>
				ll_conn_release(conn);
   1330c:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   1330e:	65ee      	str	r6, [r5, #92]	; 0x5c
				ll_conn_release(conn);
   13310:	f001 fbd4 	bl	14abc <ll_conn_release>
   13314:	e7a3      	b.n	1325e <ll_rx_dequeue+0x86>
				LL_ASSERT(conn_lll);
   13316:	4a10      	ldr	r2, [pc, #64]	; (13358 <ll_rx_dequeue+0x180>)
   13318:	4916      	ldr	r1, [pc, #88]	; (13374 <ll_rx_dequeue+0x19c>)
   1331a:	4811      	ldr	r0, [pc, #68]	; (13360 <ll_rx_dequeue+0x188>)
   1331c:	f240 23fd 	movw	r3, #765	; 0x2fd
   13320:	f00b fe98 	bl	1f054 <printk>
   13324:	4040      	eors	r0, r0
   13326:	f380 8811 	msr	BASEPRI, r0
   1332a:	f04f 0003 	mov.w	r0, #3
   1332e:	df02      	svc	2
   13330:	e7d3      	b.n	132da <ll_rx_dequeue+0x102>
				LL_ASSERT(link);
   13332:	4a09      	ldr	r2, [pc, #36]	; (13358 <ll_rx_dequeue+0x180>)
   13334:	490c      	ldr	r1, [pc, #48]	; (13368 <ll_rx_dequeue+0x190>)
   13336:	480a      	ldr	r0, [pc, #40]	; (13360 <ll_rx_dequeue+0x188>)
   13338:	f240 3303 	movw	r3, #771	; 0x303
   1333c:	f00b fe8a 	bl	1f054 <printk>
   13340:	4040      	eors	r0, r0
   13342:	f380 8811 	msr	BASEPRI, r0
   13346:	f04f 0003 	mov.w	r0, #3
   1334a:	df02      	svc	2
   1334c:	e7de      	b.n	1330c <ll_rx_dequeue+0x134>
   1334e:	bf00      	nop
   13350:	2000302c 	.word	0x2000302c
   13354:	20002d44 	.word	0x20002d44
   13358:	0002585c 	.word	0x0002585c
   1335c:	0002568c 	.word	0x0002568c
   13360:	0002561c 	.word	0x0002561c
   13364:	20002da0 	.word	0x20002da0
   13368:	00025b2c 	.word	0x00025b2c
   1336c:	00025934 	.word	0x00025934
   13370:	0002591c 	.word	0x0002591c
   13374:	00025910 	.word	0x00025910

00013378 <ll_rx_mem_release>:
{
   13378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
   1337c:	6804      	ldr	r4, [r0, #0]
	while (rx) {
   1337e:	4e87      	ldr	r6, [pc, #540]	; (1359c <ll_rx_mem_release+0x224>)
{
   13380:	4681      	mov	r9, r0
	while (rx) {
   13382:	b334      	cbz	r4, 133d2 <ll_rx_mem_release+0x5a>
			LL_ASSERT(0);
   13384:	f8df 8240 	ldr.w	r8, [pc, #576]	; 135c8 <ll_rx_mem_release+0x250>
   13388:	f8df a240 	ldr.w	sl, [pc, #576]	; 135cc <ll_rx_mem_release+0x254>
   1338c:	4f84      	ldr	r7, [pc, #528]	; (135a0 <ll_rx_mem_release+0x228>)
		rx = rx->next;
   1338e:	4625      	mov	r5, r4
   13390:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   13392:	792b      	ldrb	r3, [r5, #4]
   13394:	2b17      	cmp	r3, #23
   13396:	d80d      	bhi.n	133b4 <ll_rx_mem_release+0x3c>
   13398:	e8df f003 	tbb	[pc, r3]
   1339c:	0c610c61 	.word	0x0c610c61
   133a0:	0c0c0c0c 	.word	0x0c0c0c0c
   133a4:	0c0c0c0c 	.word	0x0c0c0c0c
   133a8:	0c0c0c0c 	.word	0x0c0c0c0c
   133ac:	617c4e0c 	.word	0x617c4e0c
   133b0:	61616161 	.word	0x61616161
			LL_ASSERT(0);
   133b4:	f240 435b 	movw	r3, #1115	; 0x45b
   133b8:	4642      	mov	r2, r8
   133ba:	4651      	mov	r1, sl
   133bc:	4638      	mov	r0, r7
   133be:	f00b fe49 	bl	1f054 <printk>
   133c2:	4040      	eors	r0, r0
   133c4:	f380 8811 	msr	BASEPRI, r0
   133c8:	f04f 0003 	mov.w	r0, #3
   133cc:	df02      	svc	2
	while (rx) {
   133ce:	2c00      	cmp	r4, #0
   133d0:	d1dd      	bne.n	1338e <ll_rx_mem_release+0x16>
	*node_rx = rx;
   133d2:	2700      	movs	r7, #0
   133d4:	f8c9 7000 	str.w	r7, [r9]
	while (mem_link_rx.quota_pdu &&
   133d8:	7833      	ldrb	r3, [r6, #0]
   133da:	b35b      	cbz	r3, 13434 <ll_rx_mem_release+0xbc>
   133dc:	4d71      	ldr	r5, [pc, #452]	; (135a4 <ll_rx_mem_release+0x22c>)
		link = mem_acquire(&mem_link_rx.free);
   133de:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 135bc <ll_rx_mem_release+0x244>
   133e2:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   133e4:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 135b0 <ll_rx_mem_release+0x238>
	if (last == count) {
   133e8:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   133ea:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   133ec:	3401      	adds	r4, #1
   133ee:	b2e4      	uxtb	r4, r4
		last = 0U;
   133f0:	42a2      	cmp	r2, r4
   133f2:	bf08      	it	eq
   133f4:	2400      	moveq	r4, #0
	if (last == first) {
   133f6:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   133f8:	4640      	mov	r0, r8
   133fa:	f000 8083 	beq.w	13504 <ll_rx_mem_release+0x18c>
   133fe:	f7fc fa29 	bl	f854 <mem_acquire>
   13402:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13404:	4648      	mov	r0, r9
		if (!link) {
   13406:	f1ba 0f00 	cmp.w	sl, #0
   1340a:	d07b      	beq.n	13504 <ll_rx_mem_release+0x18c>
		rx = mem_acquire(&mem_pdu_rx.free);
   1340c:	f7fc fa22 	bl	f854 <mem_acquire>
		if (!rx) {
   13410:	2800      	cmp	r0, #0
   13412:	d073      	beq.n	134fc <ll_rx_mem_release+0x184>
		link->mem = NULL;
   13414:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
   13418:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1341c:	78e9      	ldrb	r1, [r5, #3]
   1341e:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
   13420:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13422:	fb01 5202 	mla	r2, r1, r2, r5
   13426:	3b01      	subs	r3, #1
   13428:	b2db      	uxtb	r3, r3
   1342a:	6050      	str	r0, [r2, #4]
   1342c:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   1342e:	70ec      	strb	r4, [r5, #3]
	while (mem_link_rx.quota_pdu &&
   13430:	2b00      	cmp	r3, #0
   13432:	d1d9      	bne.n	133e8 <ll_rx_mem_release+0x70>
}
   13434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   13438:	7f2b      	ldrb	r3, [r5, #28]
   1343a:	2b3c      	cmp	r3, #60	; 0x3c
   1343c:	f000 8092 	beq.w	13564 <ll_rx_mem_release+0x1ec>
				LL_ASSERT(!cc->status);
   13440:	b1db      	cbz	r3, 1347a <ll_rx_mem_release+0x102>
   13442:	4959      	ldr	r1, [pc, #356]	; (135a8 <ll_rx_mem_release+0x230>)
   13444:	f240 33e1 	movw	r3, #993	; 0x3e1
   13448:	4642      	mov	r2, r8
   1344a:	4638      	mov	r0, r7
   1344c:	f00b fe02 	bl	1f054 <printk>
   13450:	4040      	eors	r0, r0
   13452:	f380 8811 	msr	BASEPRI, r0
   13456:	f04f 0003 	mov.w	r0, #3
   1345a:	df02      	svc	2
   1345c:	792b      	ldrb	r3, [r5, #4]
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   1345e:	b963      	cbnz	r3, 1347a <ll_rx_mem_release+0x102>
   13460:	4952      	ldr	r1, [pc, #328]	; (135ac <ll_rx_mem_release+0x234>)
   13462:	f240 4327 	movw	r3, #1063	; 0x427
   13466:	4642      	mov	r2, r8
   13468:	4638      	mov	r0, r7
   1346a:	f00b fdf3 	bl	1f054 <printk>
   1346e:	4040      	eors	r0, r0
   13470:	f380 8811 	msr	BASEPRI, r0
   13474:	f04f 0003 	mov.w	r0, #3
   13478:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1347a:	7833      	ldrb	r3, [r6, #0]
   1347c:	2b06      	cmp	r3, #6
   1347e:	d82e      	bhi.n	134de <ll_rx_mem_release+0x166>
	mem_link_rx.quota_pdu += delta;
   13480:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   13482:	494b      	ldr	r1, [pc, #300]	; (135b0 <ll_rx_mem_release+0x238>)
	mem_link_rx.quota_pdu += delta;
   13484:	7033      	strb	r3, [r6, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
   13486:	4628      	mov	r0, r5
   13488:	f7fc f9fe 	bl	f888 <mem_release>
	while (rx) {
   1348c:	2c00      	cmp	r4, #0
   1348e:	f47f af7e 	bne.w	1338e <ll_rx_mem_release+0x16>
   13492:	e79e      	b.n	133d2 <ll_rx_mem_release+0x5a>
			conn = ll_conn_get(rx_free->handle);
   13494:	88e8      	ldrh	r0, [r5, #6]
   13496:	f001 fb1f 	bl	14ad8 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   1349a:	6f83      	ldr	r3, [r0, #120]	; 0x78
			conn = ll_conn_get(rx_free->handle);
   1349c:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   1349e:	b163      	cbz	r3, 134ba <ll_rx_mem_release+0x142>
   134a0:	4944      	ldr	r1, [pc, #272]	; (135b4 <ll_rx_mem_release+0x23c>)
   134a2:	f240 434e 	movw	r3, #1102	; 0x44e
   134a6:	4642      	mov	r2, r8
   134a8:	4638      	mov	r0, r7
   134aa:	f00b fdd3 	bl	1f054 <printk>
   134ae:	4040      	eors	r0, r0
   134b0:	f380 8811 	msr	BASEPRI, r0
   134b4:	f04f 0003 	mov.w	r0, #3
   134b8:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   134ba:	f105 016c 	add.w	r1, r5, #108	; 0x6c
   134be:	f105 0068 	add.w	r0, r5, #104	; 0x68
   134c2:	f7fc fa21 	bl	f908 <memq_deinit>
			LL_ASSERT(link);
   134c6:	4683      	mov	fp, r0
   134c8:	2800      	cmp	r0, #0
   134ca:	d053      	beq.n	13574 <ll_rx_mem_release+0x1fc>
			conn->lll.link_tx_free = link;
   134cc:	f8c5 b078 	str.w	fp, [r5, #120]	; 0x78
			ll_conn_release(conn);
   134d0:	4628      	mov	r0, r5
   134d2:	f001 faf3 	bl	14abc <ll_conn_release>
	while (rx) {
   134d6:	2c00      	cmp	r4, #0
   134d8:	f47f af59 	bne.w	1338e <ll_rx_mem_release+0x16>
   134dc:	e779      	b.n	133d2 <ll_rx_mem_release+0x5a>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   134de:	4936      	ldr	r1, [pc, #216]	; (135b8 <ll_rx_mem_release+0x240>)
   134e0:	f240 4367 	movw	r3, #1127	; 0x467
   134e4:	4642      	mov	r2, r8
   134e6:	4638      	mov	r0, r7
   134e8:	f00b fdb4 	bl	1f054 <printk>
   134ec:	4040      	eors	r0, r0
   134ee:	f380 8811 	msr	BASEPRI, r0
   134f2:	f04f 0003 	mov.w	r0, #3
   134f6:	df02      	svc	2
   134f8:	7833      	ldrb	r3, [r6, #0]
   134fa:	e7c1      	b.n	13480 <ll_rx_mem_release+0x108>
			mem_release(link, &mem_link_rx.free);
   134fc:	492f      	ldr	r1, [pc, #188]	; (135bc <ll_rx_mem_release+0x244>)
   134fe:	4650      	mov	r0, sl
   13500:	f7fc f9c2 	bl	f888 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   13504:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13506:	1e5f      	subs	r7, r3, #1
   13508:	b2ff      	uxtb	r7, r7
   1350a:	2b00      	cmp	r3, #0
   1350c:	d092      	beq.n	13434 <ll_rx_mem_release+0xbc>
   1350e:	4d2c      	ldr	r5, [pc, #176]	; (135c0 <ll_rx_mem_release+0x248>)
		link = mem_acquire(&mem_link_rx.free);
   13510:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 135bc <ll_rx_mem_release+0x244>
   13514:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   13516:	f8df 9098 	ldr.w	r9, [pc, #152]	; 135b0 <ll_rx_mem_release+0x238>
	if (last == count) {
   1351a:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1351c:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1351e:	3401      	adds	r4, #1
   13520:	b2e4      	uxtb	r4, r4
		last = 0U;
   13522:	42a2      	cmp	r2, r4
   13524:	bf08      	it	eq
   13526:	2400      	moveq	r4, #0
	if (last == first) {
   13528:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   1352a:	4640      	mov	r0, r8
   1352c:	d082      	beq.n	13434 <ll_rx_mem_release+0xbc>
   1352e:	f7fc f991 	bl	f854 <mem_acquire>
   13532:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13534:	4648      	mov	r0, r9
		if (!link) {
   13536:	f1ba 0f00 	cmp.w	sl, #0
   1353a:	f43f af7b 	beq.w	13434 <ll_rx_mem_release+0xbc>
		rx = mem_acquire(&mem_pdu_rx.free);
   1353e:	f7fc f989 	bl	f854 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13542:	3f01      	subs	r7, #1
   13544:	b2ff      	uxtb	r7, r7
		if (!rx) {
   13546:	b318      	cbz	r0, 13590 <ll_rx_mem_release+0x218>
		rx->link = link;
   13548:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1354c:	78e9      	ldrb	r1, [r5, #3]
   1354e:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
   13550:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13552:	fb01 5202 	mla	r2, r1, r2, r5
   13556:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13558:	2fff      	cmp	r7, #255	; 0xff
   1355a:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   1355c:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   1355e:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13560:	d1db      	bne.n	1351a <ll_rx_mem_release+0x1a2>
   13562:	e767      	b.n	13434 <ll_rx_mem_release+0xbc>
				mem_release(rx_free, &mem_pdu_rx.free);
   13564:	4912      	ldr	r1, [pc, #72]	; (135b0 <ll_rx_mem_release+0x238>)
   13566:	4628      	mov	r0, r5
   13568:	f7fc f98e 	bl	f888 <mem_release>
	while (rx) {
   1356c:	2c00      	cmp	r4, #0
   1356e:	f47f af0e 	bne.w	1338e <ll_rx_mem_release+0x16>
   13572:	e72e      	b.n	133d2 <ll_rx_mem_release+0x5a>
			LL_ASSERT(link);
   13574:	4913      	ldr	r1, [pc, #76]	; (135c4 <ll_rx_mem_release+0x24c>)
   13576:	f240 4351 	movw	r3, #1105	; 0x451
   1357a:	4642      	mov	r2, r8
   1357c:	4638      	mov	r0, r7
   1357e:	f00b fd69 	bl	1f054 <printk>
   13582:	4040      	eors	r0, r0
   13584:	f380 8811 	msr	BASEPRI, r0
   13588:	f04f 0003 	mov.w	r0, #3
   1358c:	df02      	svc	2
   1358e:	e79d      	b.n	134cc <ll_rx_mem_release+0x154>
			mem_release(link, &mem_link_rx.free);
   13590:	4650      	mov	r0, sl
   13592:	490a      	ldr	r1, [pc, #40]	; (135bc <ll_rx_mem_release+0x244>)
}
   13594:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   13598:	f7fc b976 	b.w	f888 <mem_release>
   1359c:	20002d40 	.word	0x20002d40
   135a0:	0002561c 	.word	0x0002561c
   135a4:	20000338 	.word	0x20000338
   135a8:	00025954 	.word	0x00025954
   135ac:	00025960 	.word	0x00025960
   135b0:	20002da0 	.word	0x20002da0
   135b4:	00025984 	.word	0x00025984
   135b8:	000258dc 	.word	0x000258dc
   135bc:	20002d44 	.word	0x20002d44
   135c0:	2000034c 	.word	0x2000034c
   135c4:	00025b2c 	.word	0x00025b2c
   135c8:	0002585c 	.word	0x0002585c
   135cc:	0002568c 	.word	0x0002568c

000135d0 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   135d0:	4801      	ldr	r0, [pc, #4]	; (135d8 <ll_rx_link_alloc+0x8>)
   135d2:	f7fc b93f 	b.w	f854 <mem_acquire>
   135d6:	bf00      	nop
   135d8:	20002d44 	.word	0x20002d44

000135dc <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   135dc:	4901      	ldr	r1, [pc, #4]	; (135e4 <ll_rx_link_release+0x8>)
   135de:	f7fc b953 	b.w	f888 <mem_release>
   135e2:	bf00      	nop
   135e4:	20002d44 	.word	0x20002d44

000135e8 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   135e8:	4801      	ldr	r0, [pc, #4]	; (135f0 <ll_rx_alloc+0x8>)
   135ea:	f7fc b933 	b.w	f854 <mem_acquire>
   135ee:	bf00      	nop
   135f0:	20002da0 	.word	0x20002da0

000135f4 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   135f4:	4901      	ldr	r1, [pc, #4]	; (135fc <ll_rx_release+0x8>)
   135f6:	f7fc b947 	b.w	f888 <mem_release>
   135fa:	bf00      	nop
   135fc:	20002da0 	.word	0x20002da0

00013600 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13600:	4b02      	ldr	r3, [pc, #8]	; (1360c <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13602:	4a03      	ldr	r2, [pc, #12]	; (13610 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13604:	78db      	ldrb	r3, [r3, #3]
   13606:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13608:	f7fc b988 	b.w	f91c <memq_enqueue>
   1360c:	20000488 	.word	0x20000488
   13610:	20003030 	.word	0x20003030

00013614 <ll_rx_sched>:
	k_sem_give(sem_recv);
   13614:	4b01      	ldr	r3, [pc, #4]	; (1361c <ll_rx_sched+0x8>)
   13616:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   13618:	f00b b836 	b.w	1e688 <z_impl_k_sem_give>
   1361c:	2000303c 	.word	0x2000303c

00013620 <ll_pdu_rx_alloc_peek>:
{
   13620:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   13622:	4b0d      	ldr	r3, [pc, #52]	; (13658 <ll_pdu_rx_alloc_peek+0x38>)
   13624:	789a      	ldrb	r2, [r3, #2]
   13626:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   13628:	42a2      	cmp	r2, r4
   1362a:	d809      	bhi.n	13640 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   1362c:	1aa1      	subs	r1, r4, r2
   1362e:	b2c9      	uxtb	r1, r1
   13630:	4288      	cmp	r0, r1
   13632:	d802      	bhi.n	1363a <ll_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   13634:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   13636:	7819      	ldrb	r1, [r3, #0]
   13638:	d109      	bne.n	1364e <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
   1363a:	2000      	movs	r0, #0
}
   1363c:	bc10      	pop	{r4}
   1363e:	4770      	bx	lr
		return count - first + last;
   13640:	7859      	ldrb	r1, [r3, #1]
   13642:	1a89      	subs	r1, r1, r2
   13644:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   13646:	b2c9      	uxtb	r1, r1
   13648:	4288      	cmp	r0, r1
   1364a:	d8f6      	bhi.n	1363a <ll_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   1364c:	7819      	ldrb	r1, [r3, #0]
}
   1364e:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   13650:	fb02 3301 	mla	r3, r2, r1, r3
   13654:	6858      	ldr	r0, [r3, #4]
   13656:	4770      	bx	lr
   13658:	20000338 	.word	0x20000338

0001365c <ll_pdu_rx_alloc>:
{
   1365c:	b410      	push	{r4}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   1365e:	4b0a      	ldr	r3, [pc, #40]	; (13688 <ll_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   13660:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   13662:	78da      	ldrb	r2, [r3, #3]
   13664:	7818      	ldrb	r0, [r3, #0]
   13666:	785c      	ldrb	r4, [r3, #1]
   13668:	428a      	cmp	r2, r1
   1366a:	d00a      	beq.n	13682 <ll_pdu_rx_alloc+0x26>
	_first += 1U;
   1366c:	1c4a      	adds	r2, r1, #1
   1366e:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   13670:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   13674:	4294      	cmp	r4, r2
   13676:	bf08      	it	eq
   13678:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1367a:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1367c:	709a      	strb	r2, [r3, #2]
}
   1367e:	bc10      	pop	{r4}
   13680:	4770      	bx	lr
		return NULL;
   13682:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   13684:	e7fb      	b.n	1367e <ll_pdu_rx_alloc+0x22>
   13686:	bf00      	nop
   13688:	20000338 	.word	0x20000338

0001368c <ll_tx_ack_put>:
{
   1368c:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   1368e:	4a13      	ldr	r2, [pc, #76]	; (136dc <ll_tx_ack_put+0x50>)
   13690:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   13692:	7855      	ldrb	r5, [r2, #1]
   13694:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   13696:	1c73      	adds	r3, r6, #1
   13698:	b2db      	uxtb	r3, r3
		last = 0U;
   1369a:	429d      	cmp	r5, r3
   1369c:	bf08      	it	eq
   1369e:	2300      	moveq	r3, #0
	if (last == first) {
   136a0:	429c      	cmp	r4, r3
   136a2:	d00a      	beq.n	136ba <ll_tx_ack_put+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   136a4:	4615      	mov	r5, r2
   136a6:	f815 4b04 	ldrb.w	r4, [r5], #4
   136aa:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   136ae:	192e      	adds	r6, r5, r4
   136b0:	d003      	beq.n	136ba <ll_tx_ack_put+0x2e>
	tx->handle = handle;
   136b2:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   136b4:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
   136b6:	6071      	str	r1, [r6, #4]
}
   136b8:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(tx);
   136ba:	4a09      	ldr	r2, [pc, #36]	; (136e0 <ll_tx_ack_put+0x54>)
   136bc:	4909      	ldr	r1, [pc, #36]	; (136e4 <ll_tx_ack_put+0x58>)
   136be:	480a      	ldr	r0, [pc, #40]	; (136e8 <ll_tx_ack_put+0x5c>)
   136c0:	f240 43af 	movw	r3, #1199	; 0x4af
   136c4:	f00b fcc6 	bl	1f054 <printk>
   136c8:	4040      	eors	r0, r0
   136ca:	f380 8811 	msr	BASEPRI, r0
   136ce:	f04f 0003 	mov.w	r0, #3
   136d2:	df02      	svc	2
	tx->handle = handle;
   136d4:	2300      	movs	r3, #0
   136d6:	801b      	strh	r3, [r3, #0]
   136d8:	deff      	udf	#255	; 0xff
   136da:	bf00      	nop
   136dc:	20000488 	.word	0x20000488
   136e0:	0002585c 	.word	0x0002585c
   136e4:	00025b20 	.word	0x00025b20
   136e8:	0002561c 	.word	0x0002561c

000136ec <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   136ec:	2200      	movs	r2, #0
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   136ee:	2304      	movs	r3, #4
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   136f0:	7002      	strb	r2, [r0, #0]
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   136f2:	700b      	strb	r3, [r1, #0]
}
   136f4:	4770      	bx	lr
   136f6:	bf00      	nop

000136f8 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   136f8:	2200      	movs	r2, #0
{
   136fa:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   136fc:	4611      	mov	r1, r2
   136fe:	4b0a      	ldr	r3, [pc, #40]	; (13728 <ll_radio_state_abort+0x30>)
   13700:	2001      	movs	r0, #1
   13702:	f7fc f97f 	bl	fa04 <mayfly_enqueue>
	LL_ASSERT(!ret);
   13706:	b900      	cbnz	r0, 1370a <ll_radio_state_abort+0x12>
}
   13708:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1370a:	4a08      	ldr	r2, [pc, #32]	; (1372c <ll_radio_state_abort+0x34>)
   1370c:	4908      	ldr	r1, [pc, #32]	; (13730 <ll_radio_state_abort+0x38>)
   1370e:	4809      	ldr	r0, [pc, #36]	; (13734 <ll_radio_state_abort+0x3c>)
   13710:	f240 43c7 	movw	r3, #1223	; 0x4c7
   13714:	f00b fc9e 	bl	1f054 <printk>
   13718:	4040      	eors	r0, r0
   1371a:	f380 8811 	msr	BASEPRI, r0
   1371e:	f04f 0003 	mov.w	r0, #3
   13722:	df02      	svc	2
}
   13724:	bd08      	pop	{r3, pc}
   13726:	bf00      	nop
   13728:	200004bc 	.word	0x200004bc
   1372c:	0002585c 	.word	0x0002585c
   13730:	000258a4 	.word	0x000258a4
   13734:	0002561c 	.word	0x0002561c

00013738 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13738:	f030 0302 	bics.w	r3, r0, #2
{
   1373c:	b510      	push	{r4, lr}
   1373e:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13740:	d002      	beq.n	13748 <ull_ticker_status_take+0x10>
   13742:	680b      	ldr	r3, [r1, #0]
   13744:	2b02      	cmp	r3, #2
   13746:	d008      	beq.n	1375a <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   13748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1374c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13750:	4809      	ldr	r0, [pc, #36]	; (13778 <ull_ticker_status_take+0x40>)
   13752:	f00a ffbf 	bl	1e6d4 <z_impl_k_sem_take>
	return *ret_cb;
   13756:	6820      	ldr	r0, [r4, #0]
}
   13758:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1375a:	4a08      	ldr	r2, [pc, #32]	; (1377c <ull_ticker_status_take+0x44>)
   1375c:	4908      	ldr	r1, [pc, #32]	; (13780 <ull_ticker_status_take+0x48>)
   1375e:	4809      	ldr	r0, [pc, #36]	; (13784 <ull_ticker_status_take+0x4c>)
   13760:	f240 43e3 	movw	r3, #1251	; 0x4e3
   13764:	f00b fc76 	bl	1f054 <printk>
   13768:	4040      	eors	r0, r0
   1376a:	f380 8811 	msr	BASEPRI, r0
   1376e:	f04f 0003 	mov.w	r0, #3
   13772:	df02      	svc	2
   13774:	e7e8      	b.n	13748 <ull_ticker_status_take+0x10>
   13776:	bf00      	nop
   13778:	20003040 	.word	0x20003040
   1377c:	0002585c 	.word	0x0002585c
   13780:	0002599c 	.word	0x0002599c
   13784:	0002561c 	.word	0x0002561c

00013788 <ull_disable_mark>:
	if (!*m) {
   13788:	4a04      	ldr	r2, [pc, #16]	; (1379c <ull_disable_mark+0x14>)
   1378a:	6813      	ldr	r3, [r2, #0]
   1378c:	b10b      	cbz	r3, 13792 <ull_disable_mark+0xa>
}
   1378e:	4618      	mov	r0, r3
   13790:	4770      	bx	lr
		*m = param;
   13792:	4603      	mov	r3, r0
   13794:	6010      	str	r0, [r2, #0]
}
   13796:	4618      	mov	r0, r3
   13798:	4770      	bx	lr
   1379a:	bf00      	nop
   1379c:	20002c7c 	.word	0x20002c7c

000137a0 <ull_disable_unmark>:
	if (*m && *m == param) {
   137a0:	4a04      	ldr	r2, [pc, #16]	; (137b4 <ull_disable_unmark+0x14>)
   137a2:	6813      	ldr	r3, [r2, #0]
   137a4:	b123      	cbz	r3, 137b0 <ull_disable_unmark+0x10>
   137a6:	4298      	cmp	r0, r3
		*m = NULL;
   137a8:	bf06      	itte	eq
   137aa:	2100      	moveq	r1, #0
   137ac:	6011      	streq	r1, [r2, #0]
	return NULL;
   137ae:	2300      	movne	r3, #0
}
   137b0:	4618      	mov	r0, r3
   137b2:	4770      	bx	lr
   137b4:	20002c7c 	.word	0x20002c7c

000137b8 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   137b8:	4b01      	ldr	r3, [pc, #4]	; (137c0 <ull_disable_mark_get+0x8>)
}
   137ba:	6818      	ldr	r0, [r3, #0]
   137bc:	4770      	bx	lr
   137be:	bf00      	nop
   137c0:	20002c7c 	.word	0x20002c7c

000137c4 <ull_update_mark>:
	if (!*m) {
   137c4:	4a04      	ldr	r2, [pc, #16]	; (137d8 <ull_update_mark+0x14>)
   137c6:	6813      	ldr	r3, [r2, #0]
   137c8:	b10b      	cbz	r3, 137ce <ull_update_mark+0xa>
}
   137ca:	4618      	mov	r0, r3
   137cc:	4770      	bx	lr
		*m = param;
   137ce:	4603      	mov	r3, r0
   137d0:	6010      	str	r0, [r2, #0]
}
   137d2:	4618      	mov	r0, r3
   137d4:	4770      	bx	lr
   137d6:	bf00      	nop
   137d8:	20002c80 	.word	0x20002c80

000137dc <ull_update_unmark>:
	if (*m && *m == param) {
   137dc:	4a04      	ldr	r2, [pc, #16]	; (137f0 <ull_update_unmark+0x14>)
   137de:	6813      	ldr	r3, [r2, #0]
   137e0:	b123      	cbz	r3, 137ec <ull_update_unmark+0x10>
   137e2:	4298      	cmp	r0, r3
		*m = NULL;
   137e4:	bf06      	itte	eq
   137e6:	2100      	moveq	r1, #0
   137e8:	6011      	streq	r1, [r2, #0]
	return NULL;
   137ea:	2300      	movne	r3, #0
}
   137ec:	4618      	mov	r0, r3
   137ee:	4770      	bx	lr
   137f0:	20002c80 	.word	0x20002c80

000137f4 <ull_update_mark_get>:
	return mark_get(mark_update);
   137f4:	4b01      	ldr	r3, [pc, #4]	; (137fc <ull_update_mark_get+0x8>)
}
   137f6:	6818      	ldr	r0, [r3, #0]
   137f8:	4770      	bx	lr
   137fa:	bf00      	nop
   137fc:	20002c80 	.word	0x20002c80

00013800 <ull_disable>:
{
   13800:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   13802:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
   13804:	f115 0f10 	cmn.w	r5, #16
{
   13808:	b087      	sub	sp, #28
	if (!hdr) {
   1380a:	d00b      	beq.n	13824 <ull_disable+0x24>
	compiler_barrier();
   1380c:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   1380e:	2201      	movs	r2, #1
   13810:	4668      	mov	r0, sp
   13812:	2100      	movs	r1, #0
   13814:	f010 fe20 	bl	24458 <z_impl_k_sem_init>
   13818:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
   1381a:	4a13      	ldr	r2, [pc, #76]	; (13868 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   1381c:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   13820:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   13822:	b913      	cbnz	r3, 1382a <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
   13824:	2000      	movs	r0, #0
}
   13826:	b007      	add	sp, #28
   13828:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
   1382a:	4b10      	ldr	r3, [pc, #64]	; (1386c <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   1382c:	2200      	movs	r2, #0
   1382e:	4611      	mov	r1, r2
   13830:	2003      	movs	r0, #3
	mfy.param = lll;
   13832:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   13834:	f7fc f8e6 	bl	fa04 <mayfly_enqueue>
	LL_ASSERT(!ret);
   13838:	b940      	cbnz	r0, 1384c <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1383a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1383e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13842:	4668      	mov	r0, sp
   13844:	f00a ff46 	bl	1e6d4 <z_impl_k_sem_take>
}
   13848:	b007      	add	sp, #28
   1384a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   1384c:	4a08      	ldr	r2, [pc, #32]	; (13870 <ull_disable+0x70>)
   1384e:	4909      	ldr	r1, [pc, #36]	; (13874 <ull_disable+0x74>)
   13850:	4809      	ldr	r0, [pc, #36]	; (13878 <ull_disable+0x78>)
   13852:	f240 5355 	movw	r3, #1365	; 0x555
   13856:	f00b fbfd 	bl	1f054 <printk>
   1385a:	4040      	eors	r0, r0
   1385c:	f380 8811 	msr	BASEPRI, r0
   13860:	f04f 0003 	mov.w	r0, #3
   13864:	df02      	svc	2
   13866:	e7e8      	b.n	1383a <ull_disable+0x3a>
   13868:	00012625 	.word	0x00012625
   1386c:	200004cc 	.word	0x200004cc
   13870:	0002585c 	.word	0x0002585c
   13874:	000258a4 	.word	0x000258a4
   13878:	0002561c 	.word	0x0002561c

0001387c <ull_ticker_stop_with_mark>:
{
   1387c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   1387e:	4d1d      	ldr	r5, [pc, #116]	; (138f4 <ull_ticker_stop_with_mark+0x78>)
   13880:	682b      	ldr	r3, [r5, #0]
{
   13882:	b085      	sub	sp, #20
   13884:	460c      	mov	r4, r1
   13886:	4616      	mov	r6, r2
	if (!*m) {
   13888:	b323      	cbz	r3, 138d4 <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
   1388a:	4299      	cmp	r1, r3
   1388c:	d112      	bne.n	138b4 <ull_ticker_stop_with_mark+0x38>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1388e:	af03      	add	r7, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   13890:	2102      	movs	r1, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   13892:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   13894:	9103      	str	r1, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   13896:	4b18      	ldr	r3, [pc, #96]	; (138f8 <ull_ticker_stop_with_mark+0x7c>)
   13898:	9700      	str	r7, [sp, #0]
   1389a:	2103      	movs	r1, #3
   1389c:	2000      	movs	r0, #0
   1389e:	f7fd fb69 	bl	10f74 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   138a2:	4639      	mov	r1, r7
   138a4:	f7ff ff48 	bl	13738 <ull_ticker_status_take>
	if (ret) {
   138a8:	b140      	cbz	r0, 138bc <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
   138aa:	682b      	ldr	r3, [r5, #0]
   138ac:	b10b      	cbz	r3, 138b2 <ull_ticker_stop_with_mark+0x36>
   138ae:	429c      	cmp	r4, r3
   138b0:	d012      	beq.n	138d8 <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
   138b2:	b1cc      	cbz	r4, 138e8 <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
   138b4:	f06f 0021 	mvn.w	r0, #33	; 0x21
}
   138b8:	b005      	add	sp, #20
   138ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
   138bc:	4630      	mov	r0, r6
   138be:	f7ff ff9f 	bl	13800 <ull_disable>
	if (ret) {
   138c2:	b9a0      	cbnz	r0, 138ee <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
   138c4:	682b      	ldr	r3, [r5, #0]
   138c6:	b10b      	cbz	r3, 138cc <ull_ticker_stop_with_mark+0x50>
   138c8:	429c      	cmp	r4, r3
   138ca:	d00b      	beq.n	138e4 <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
   138cc:	2c00      	cmp	r4, #0
   138ce:	d1f1      	bne.n	138b4 <ull_ticker_stop_with_mark+0x38>
}
   138d0:	b005      	add	sp, #20
   138d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   138d4:	6029      	str	r1, [r5, #0]
	if (mark != param) {
   138d6:	e7da      	b.n	1388e <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   138d8:	2300      	movs	r3, #0
		return -EALREADY;
   138da:	f06f 0044 	mvn.w	r0, #68	; 0x44
		*m = NULL;
   138de:	602b      	str	r3, [r5, #0]
}
   138e0:	b005      	add	sp, #20
   138e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   138e4:	6028      	str	r0, [r5, #0]
	if (mark != param) {
   138e6:	e7e7      	b.n	138b8 <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
   138e8:	f06f 0044 	mvn.w	r0, #68	; 0x44
   138ec:	e7e4      	b.n	138b8 <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
   138ee:	f06f 000f 	mvn.w	r0, #15
   138f2:	e7e1      	b.n	138b8 <ull_ticker_stop_with_mark+0x3c>
   138f4:	20002c7c 	.word	0x20002c7c
   138f8:	00012619 	.word	0x00012619

000138fc <ull_pdu_rx_alloc_peek>:
{
   138fc:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   138fe:	4b0d      	ldr	r3, [pc, #52]	; (13934 <ull_pdu_rx_alloc_peek+0x38>)
   13900:	789a      	ldrb	r2, [r3, #2]
   13902:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   13904:	42a2      	cmp	r2, r4
   13906:	d809      	bhi.n	1391c <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   13908:	1aa1      	subs	r1, r4, r2
   1390a:	b2c9      	uxtb	r1, r1
   1390c:	4288      	cmp	r0, r1
   1390e:	d802      	bhi.n	13916 <ull_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   13910:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   13912:	7819      	ldrb	r1, [r3, #0]
   13914:	d109      	bne.n	1392a <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
   13916:	2000      	movs	r0, #0
}
   13918:	bc10      	pop	{r4}
   1391a:	4770      	bx	lr
		return count - first + last;
   1391c:	7859      	ldrb	r1, [r3, #1]
   1391e:	1a89      	subs	r1, r1, r2
   13920:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   13922:	b2c9      	uxtb	r1, r1
   13924:	4288      	cmp	r0, r1
   13926:	d8f6      	bhi.n	13916 <ull_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   13928:	7819      	ldrb	r1, [r3, #0]
}
   1392a:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   1392c:	fb02 3301 	mla	r3, r2, r1, r3
   13930:	6858      	ldr	r0, [r3, #4]
   13932:	4770      	bx	lr
   13934:	2000034c 	.word	0x2000034c

00013938 <ull_pdu_rx_alloc>:
{
   13938:	b410      	push	{r4}
	return MFIFO_DEQUEUE(pdu_rx_free);
   1393a:	4b0a      	ldr	r3, [pc, #40]	; (13964 <ull_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   1393c:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1393e:	78da      	ldrb	r2, [r3, #3]
   13940:	7818      	ldrb	r0, [r3, #0]
   13942:	785c      	ldrb	r4, [r3, #1]
   13944:	428a      	cmp	r2, r1
   13946:	d00a      	beq.n	1395e <ull_pdu_rx_alloc+0x26>
	_first += 1U;
   13948:	1c4a      	adds	r2, r1, #1
   1394a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   1394c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   13950:	4294      	cmp	r4, r2
   13952:	bf08      	it	eq
   13954:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   13956:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   13958:	709a      	strb	r2, [r3, #2]
}
   1395a:	bc10      	pop	{r4}
   1395c:	4770      	bx	lr
		return NULL;
   1395e:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   13960:	e7fb      	b.n	1395a <ull_pdu_rx_alloc+0x22>
   13962:	bf00      	nop
   13964:	2000034c 	.word	0x2000034c

00013968 <ull_rx_put>:
{
   13968:	b538      	push	{r3, r4, r5, lr}
   1396a:	460c      	mov	r4, r1
   1396c:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1396e:	f003 fbc7 	bl	17100 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   13972:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   13974:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   13976:	4a03      	ldr	r2, [pc, #12]	; (13984 <ull_rx_put+0x1c>)
   13978:	4628      	mov	r0, r5
}
   1397a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1397e:	f7fb bfcd 	b.w	f91c <memq_enqueue>
   13982:	bf00      	nop
   13984:	20003038 	.word	0x20003038

00013988 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   13988:	2201      	movs	r2, #1
   1398a:	4b02      	ldr	r3, [pc, #8]	; (13994 <ull_rx_sched+0xc>)
   1398c:	4611      	mov	r1, r2
   1398e:	2000      	movs	r0, #0
   13990:	f7fc b838 	b.w	fa04 <mayfly_enqueue>
   13994:	200004dc 	.word	0x200004dc

00013998 <ull_prepare_enqueue>:
{
   13998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1399c:	4e19      	ldr	r6, [pc, #100]	; (13a04 <ull_prepare_enqueue+0x6c>)
{
   1399e:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   139a2:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   139a4:	7877      	ldrb	r7, [r6, #1]
   139a6:	f896 c002 	ldrb.w	ip, [r6, #2]
	last = last + 1;
   139aa:	1c65      	adds	r5, r4, #1
   139ac:	b2ed      	uxtb	r5, r5
		last = 0U;
   139ae:	42af      	cmp	r7, r5
   139b0:	bf08      	it	eq
   139b2:	2500      	moveq	r5, #0
	if (last == first) {
   139b4:	45ac      	cmp	ip, r5
   139b6:	d021      	beq.n	139fc <ull_prepare_enqueue+0x64>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   139b8:	4699      	mov	r9, r3
   139ba:	4633      	mov	r3, r6
   139bc:	460f      	mov	r7, r1
   139be:	4611      	mov	r1, r2
   139c0:	f813 2b04 	ldrb.w	r2, [r3], #4
   139c4:	fb02 3404 	mla	r4, r2, r4, r3
	if (!e) {
   139c8:	b1c4      	cbz	r4, 139fc <ull_prepare_enqueue+0x64>
   139ca:	4680      	mov	r8, r0
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   139cc:	2210      	movs	r2, #16
   139ce:	4620      	mov	r0, r4
   139d0:	f00d fe69 	bl	216a6 <memcpy>
	e->is_resume = is_resume;
   139d4:	f894 2020 	ldrb.w	r2, [r4, #32]
	e->prepare_cb = prepare_cb;
   139d8:	f8c4 9010 	str.w	r9, [r4, #16]
	e->is_resume = is_resume;
   139dc:	f00a 0a01 	and.w	sl, sl, #1
   139e0:	f022 0303 	bic.w	r3, r2, #3
   139e4:	ea43 030a 	orr.w	r3, r3, sl
	e->prio = prio;
   139e8:	9a08      	ldr	r2, [sp, #32]
   139ea:	61e2      	str	r2, [r4, #28]
	e->abort_cb = abort_cb;
   139ec:	e9c4 8705 	strd	r8, r7, [r4, #20]
	*last = idx; /* Commit: Update write index */
   139f0:	70f5      	strb	r5, [r6, #3]
	e->is_resume = is_resume;
   139f2:	f884 3020 	strb.w	r3, [r4, #32]
	return 0;
   139f6:	2000      	movs	r0, #0
}
   139f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
   139fc:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   13a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13a04:	20000364 	.word	0x20000364

00013a08 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   13a08:	4b05      	ldr	r3, [pc, #20]	; (13a20 <ull_prepare_dequeue_get+0x18>)
   13a0a:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   13a0c:	78d9      	ldrb	r1, [r3, #3]
   13a0e:	7818      	ldrb	r0, [r3, #0]
   13a10:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   13a12:	bf1a      	itte	ne
   13a14:	3304      	addne	r3, #4
   13a16:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   13a1a:	2000      	moveq	r0, #0
}
   13a1c:	4770      	bx	lr
   13a1e:	bf00      	nop
   13a20:	20000364 	.word	0x20000364

00013a24 <ull_prepare_dequeue_iter>:
{
   13a24:	b430      	push	{r4, r5}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   13a26:	4b0c      	ldr	r3, [pc, #48]	; (13a58 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
   13a28:	7802      	ldrb	r2, [r0, #0]
   13a2a:	785c      	ldrb	r4, [r3, #1]
   13a2c:	78dd      	ldrb	r5, [r3, #3]
   13a2e:	7819      	ldrb	r1, [r3, #0]
   13a30:	4294      	cmp	r4, r2
   13a32:	bf9c      	itt	ls
   13a34:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   13a36:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   13a38:	4295      	cmp	r5, r2
   13a3a:	d00a      	beq.n	13a52 <ull_prepare_dequeue_iter+0x2e>
	i = *idx + 1;
   13a3c:	1c53      	adds	r3, r2, #1
	p = (void *)(fifo + (*idx) * size);
   13a3e:	4d07      	ldr	r5, [pc, #28]	; (13a5c <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
   13a40:	b2db      	uxtb	r3, r3
		i = 0U;
   13a42:	429c      	cmp	r4, r3
   13a44:	bf08      	it	eq
   13a46:	2300      	moveq	r3, #0
	*idx = i;
   13a48:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   13a4a:	fb02 5001 	mla	r0, r2, r1, r5
}
   13a4e:	bc30      	pop	{r4, r5}
   13a50:	4770      	bx	lr
		return NULL;
   13a52:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   13a54:	e7fb      	b.n	13a4e <ull_prepare_dequeue_iter+0x2a>
   13a56:	bf00      	nop
   13a58:	20000364 	.word	0x20000364
   13a5c:	20000368 	.word	0x20000368

00013a60 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   13a60:	4b06      	ldr	r3, [pc, #24]	; (13a7c <ull_event_done_extra_get+0x1c>)
   13a62:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   13a64:	78d8      	ldrb	r0, [r3, #3]
   13a66:	781a      	ldrb	r2, [r3, #0]
   13a68:	4288      	cmp	r0, r1
   13a6a:	d005      	beq.n	13a78 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   13a6c:	fb01 3302 	mla	r3, r1, r2, r3
   13a70:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   13a72:	b110      	cbz	r0, 13a7a <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   13a74:	3020      	adds	r0, #32
   13a76:	4770      	bx	lr
		return NULL;
   13a78:	2000      	movs	r0, #0
}
   13a7a:	4770      	bx	lr
   13a7c:	20000324 	.word	0x20000324

00013a80 <ull_event_done>:
{
   13a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	evdone = MFIFO_DEQUEUE(done);
   13a82:	4a14      	ldr	r2, [pc, #80]	; (13ad4 <ull_event_done+0x54>)
	uint8_t _first = *first; /* Copy read-index */
   13a84:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   13a86:	78d4      	ldrb	r4, [r2, #3]
   13a88:	7811      	ldrb	r1, [r2, #0]
   13a8a:	7855      	ldrb	r5, [r2, #1]
   13a8c:	429c      	cmp	r4, r3
   13a8e:	d01f      	beq.n	13ad0 <ull_event_done+0x50>
	mem = *((void **)(fifo + _first * size));
   13a90:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   13a94:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   13a96:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   13a98:	b2db      	uxtb	r3, r3
		_first = 0U;
   13a9a:	429d      	cmp	r5, r3
   13a9c:	bf08      	it	eq
   13a9e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   13aa0:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   13aa2:	b19c      	cbz	r4, 13acc <ull_event_done+0x4c>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   13aa4:	2501      	movs	r5, #1
	evdone->hdr.link = NULL;
   13aa6:	2600      	movs	r6, #0
	link = evdone->hdr.link;
   13aa8:	6827      	ldr	r7, [r4, #0]
	evdone->param = param;
   13aaa:	61e0      	str	r0, [r4, #28]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   13aac:	7125      	strb	r5, [r4, #4]
	evdone->hdr.link = NULL;
   13aae:	6026      	str	r6, [r4, #0]
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   13ab0:	f003 fb26 	bl	17100 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   13ab4:	4a08      	ldr	r2, [pc, #32]	; (13ad8 <ull_event_done+0x58>)
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   13ab6:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   13ab8:	4621      	mov	r1, r4
   13aba:	4638      	mov	r0, r7
   13abc:	f7fb ff2e 	bl	f91c <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   13ac0:	4b06      	ldr	r3, [pc, #24]	; (13adc <ull_event_done+0x5c>)
   13ac2:	4630      	mov	r0, r6
   13ac4:	462a      	mov	r2, r5
   13ac6:	4629      	mov	r1, r5
   13ac8:	f7fb ff9c 	bl	fa04 <mayfly_enqueue>
}
   13acc:	4620      	mov	r0, r4
   13ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   13ad0:	2400      	movs	r4, #0
   13ad2:	e7fb      	b.n	13acc <ull_event_done+0x4c>
   13ad4:	20000324 	.word	0x20000324
   13ad8:	20003038 	.word	0x20003038
   13adc:	200004dc 	.word	0x200004dc

00013ae0 <disabled_cb>:
{
   13ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   13ae2:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   13ae4:	6c6f      	ldr	r7, [r5, #68]	; 0x44
{
   13ae6:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   13ae8:	b1d7      	cbz	r7, 13b20 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   13aea:	6cac      	ldr	r4, [r5, #72]	; 0x48
	adv->link_cc_free = NULL;
   13aec:	2300      	movs	r3, #0
   13aee:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
   13af0:	b34c      	cbz	r4, 13b46 <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   13af2:	2100      	movs	r1, #0
	rx->hdr.handle = 0xffff;
   13af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   13af8:	2211      	movs	r2, #17
	adv->node_rx_cc_free = NULL;
   13afa:	64a9      	str	r1, [r5, #72]	; 0x48
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   13afc:	f104 001c 	add.w	r0, r4, #28
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   13b00:	7122      	strb	r2, [r4, #4]
	rx->hdr.handle = 0xffff;
   13b02:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   13b04:	221e      	movs	r2, #30
   13b06:	f00d fdf9 	bl	216fc <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   13b0a:	233c      	movs	r3, #60	; 0x3c
	rx->hdr.rx_ftr.param = param;
   13b0c:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   13b0e:	4638      	mov	r0, r7
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   13b10:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
   13b12:	4621      	mov	r1, r4
   13b14:	f7ff fd74 	bl	13600 <ll_rx_put>
}
   13b18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   13b1c:	f7ff bd7a 	b.w	13614 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   13b20:	4a10      	ldr	r2, [pc, #64]	; (13b64 <disabled_cb+0x84>)
   13b22:	4911      	ldr	r1, [pc, #68]	; (13b68 <disabled_cb+0x88>)
   13b24:	4811      	ldr	r0, [pc, #68]	; (13b6c <disabled_cb+0x8c>)
   13b26:	f240 63fa 	movw	r3, #1786	; 0x6fa
   13b2a:	f00b fa93 	bl	1f054 <printk>
   13b2e:	4040      	eors	r0, r0
   13b30:	f380 8811 	msr	BASEPRI, r0
   13b34:	f04f 0003 	mov.w	r0, #3
   13b38:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   13b3a:	6cac      	ldr	r4, [r5, #72]	; 0x48
   13b3c:	6c6f      	ldr	r7, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
   13b3e:	2300      	movs	r3, #0
   13b40:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
   13b42:	2c00      	cmp	r4, #0
   13b44:	d1d5      	bne.n	13af2 <disabled_cb+0x12>
   13b46:	4a07      	ldr	r2, [pc, #28]	; (13b64 <disabled_cb+0x84>)
   13b48:	4909      	ldr	r1, [pc, #36]	; (13b70 <disabled_cb+0x90>)
   13b4a:	4808      	ldr	r0, [pc, #32]	; (13b6c <disabled_cb+0x8c>)
   13b4c:	f240 63fe 	movw	r3, #1790	; 0x6fe
   13b50:	f00b fa80 	bl	1f054 <printk>
   13b54:	4040      	eors	r0, r0
   13b56:	f380 8811 	msr	BASEPRI, r0
   13b5a:	f04f 0003 	mov.w	r0, #3
   13b5e:	df02      	svc	2
   13b60:	6cac      	ldr	r4, [r5, #72]	; 0x48
   13b62:	e7c6      	b.n	13af2 <disabled_cb+0x12>
   13b64:	000259c8 	.word	0x000259c8
   13b68:	00025a08 	.word	0x00025a08
   13b6c:	0002561c 	.word	0x0002561c
   13b70:	00025a1c 	.word	0x00025a1c

00013b74 <ticker_cb>:
{
   13b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b78:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   13b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13b7e:	4295      	cmp	r5, r2
{
   13b80:	b08a      	sub	sp, #40	; 0x28
   13b82:	461c      	mov	r4, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   13b84:	d018      	beq.n	13bb8 <ticker_cb+0x44>
	return ++hdr->ref;
   13b86:	7c1b      	ldrb	r3, [r3, #16]
   13b88:	3301      	adds	r3, #1
   13b8a:	b2db      	uxtb	r3, r3
   13b8c:	4680      	mov	r8, r0
   13b8e:	460f      	mov	r7, r1
   13b90:	7423      	strb	r3, [r4, #16]
		LL_ASSERT(ref);
   13b92:	2b00      	cmp	r3, #0
   13b94:	d061      	beq.n	13c5a <ticker_cb+0xe6>
		p.ticks_at_expire = ticks_at_expire;
   13b96:	4e38      	ldr	r6, [pc, #224]	; (13c78 <ticker_cb+0x104>)
		mfy.param = &p;
   13b98:	4b38      	ldr	r3, [pc, #224]	; (13c7c <ticker_cb+0x108>)
		p.ticks_at_expire = ticks_at_expire;
   13b9a:	f8c6 8000 	str.w	r8, [r6]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   13b9e:	2200      	movs	r2, #0
	lll = &adv->lll;
   13ba0:	f104 0c1c 	add.w	ip, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   13ba4:	4611      	mov	r1, r2
   13ba6:	2001      	movs	r0, #1
		mfy.param = &p;
   13ba8:	609e      	str	r6, [r3, #8]
		p.remainder = remainder;
   13baa:	6077      	str	r7, [r6, #4]
		p.lazy = lazy;
   13bac:	8135      	strh	r5, [r6, #8]
		p.param = lll;
   13bae:	f8c6 c00c 	str.w	ip, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   13bb2:	f7fb ff27 	bl	fa04 <mayfly_enqueue>
		LL_ASSERT(!ret);
   13bb6:	b938      	cbnz	r0, 13bc8 <ticker_cb+0x54>
	if (!lll->is_hdcd)
   13bb8:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   13bbc:	f015 0501 	ands.w	r5, r5, #1
   13bc0:	d014      	beq.n	13bec <ticker_cb+0x78>
}
   13bc2:	b00a      	add	sp, #40	; 0x28
   13bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   13bc8:	4a2d      	ldr	r2, [pc, #180]	; (13c80 <ticker_cb+0x10c>)
   13bca:	492e      	ldr	r1, [pc, #184]	; (13c84 <ticker_cb+0x110>)
   13bcc:	482e      	ldr	r0, [pc, #184]	; (13c88 <ticker_cb+0x114>)
   13bce:	f240 637a 	movw	r3, #1658	; 0x67a
   13bd2:	f00b fa3f 	bl	1f054 <printk>
   13bd6:	4040      	eors	r0, r0
   13bd8:	f380 8811 	msr	BASEPRI, r0
   13bdc:	f04f 0003 	mov.w	r0, #3
   13be0:	df02      	svc	2
	if (!lll->is_hdcd)
   13be2:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   13be6:	f015 0501 	ands.w	r5, r5, #1
   13bea:	d1ea      	bne.n	13bc2 <ticker_cb+0x4e>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   13bec:	2104      	movs	r1, #4
   13bee:	a809      	add	r0, sp, #36	; 0x24
   13bf0:	f005 f82e 	bl	18c50 <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   13bf4:	9809      	ldr	r0, [sp, #36]	; 0x24
   13bf6:	4925      	ldr	r1, [pc, #148]	; (13c8c <ticker_cb+0x118>)
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   13bf8:	4a25      	ldr	r2, [pc, #148]	; (13c90 <ticker_cb+0x11c>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13bfa:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   13bfc:	fba1 3100 	umull	r3, r1, r1, r0
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   13c00:	1aa2      	subs	r2, r4, r2
   13c02:	4c24      	ldr	r4, [pc, #144]	; (13c94 <ticker_cb+0x120>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13c04:	9504      	str	r5, [sp, #16]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   13c06:	1a43      	subs	r3, r0, r1
   13c08:	eb01 0353 	add.w	r3, r1, r3, lsr #1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   13c0c:	fba4 4202 	umull	r4, r2, r4, r2
		random_delay %= ULL_ADV_RANDOM_DELAY;
   13c10:	f240 1147 	movw	r1, #327	; 0x147
   13c14:	0a1b      	lsrs	r3, r3, #8
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   13c16:	0992      	lsrs	r2, r2, #6
		random_delay %= ULL_ADV_RANDOM_DELAY;
   13c18:	fb01 0313 	mls	r3, r1, r3, r0
				    (TICKER_ID_ADV_BASE +
   13c1c:	3202      	adds	r2, #2
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13c1e:	491e      	ldr	r1, [pc, #120]	; (13c98 <ticker_cb+0x124>)
   13c20:	9105      	str	r1, [sp, #20]
		random_delay += 1;
   13c22:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13c24:	e9cd 5502 	strd	r5, r5, [sp, #8]
   13c28:	e9cd 5500 	strd	r5, r5, [sp]
   13c2c:	4628      	mov	r0, r5
   13c2e:	b2d2      	uxtb	r2, r2
   13c30:	2101      	movs	r1, #1
		random_delay += 1;
   13c32:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13c34:	f7fd f94e 	bl	10ed4 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13c38:	f030 0302 	bics.w	r3, r0, #2
   13c3c:	d0c1      	beq.n	13bc2 <ticker_cb+0x4e>
   13c3e:	4a10      	ldr	r2, [pc, #64]	; (13c80 <ticker_cb+0x10c>)
   13c40:	4916      	ldr	r1, [pc, #88]	; (13c9c <ticker_cb+0x128>)
   13c42:	4811      	ldr	r0, [pc, #68]	; (13c88 <ticker_cb+0x114>)
   13c44:	f44f 63d2 	mov.w	r3, #1680	; 0x690
   13c48:	f00b fa04 	bl	1f054 <printk>
   13c4c:	4040      	eors	r0, r0
   13c4e:	f380 8811 	msr	BASEPRI, r0
   13c52:	f04f 0003 	mov.w	r0, #3
   13c56:	df02      	svc	2
}
   13c58:	e7b3      	b.n	13bc2 <ticker_cb+0x4e>
		LL_ASSERT(ref);
   13c5a:	4a09      	ldr	r2, [pc, #36]	; (13c80 <ticker_cb+0x10c>)
   13c5c:	4910      	ldr	r1, [pc, #64]	; (13ca0 <ticker_cb+0x12c>)
   13c5e:	480a      	ldr	r0, [pc, #40]	; (13c88 <ticker_cb+0x114>)
   13c60:	f240 636e 	movw	r3, #1646	; 0x66e
   13c64:	f00b f9f6 	bl	1f054 <printk>
   13c68:	4040      	eors	r0, r0
   13c6a:	f380 8811 	msr	BASEPRI, r0
   13c6e:	f04f 0003 	mov.w	r0, #3
   13c72:	df02      	svc	2
   13c74:	e78f      	b.n	13b96 <ticker_cb+0x22>
   13c76:	bf00      	nop
   13c78:	2000347c 	.word	0x2000347c
   13c7c:	200004fc 	.word	0x200004fc
   13c80:	000259c8 	.word	0x000259c8
   13c84:	000258a4 	.word	0x000258a4
   13c88:	0002561c 	.word	0x0002561c
   13c8c:	90d4f121 	.word	0x90d4f121
   13c90:	20003418 	.word	0x20003418
   13c94:	ba2e8ba3 	.word	0xba2e8ba3
   13c98:	00013d49 	.word	0x00013d49
   13c9c:	00025a38 	.word	0x00025a38
   13ca0:	00025a34 	.word	0x00025a34

00013ca4 <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   13ca4:	2800      	cmp	r0, #0
   13ca6:	d132      	bne.n	13d0e <ticker_op_stop_cb+0x6a>
{
   13ca8:	b538      	push	{r3, r4, r5, lr}
   13caa:	460c      	mov	r4, r1
	mfy.param = &adv->lll;
   13cac:	4d1f      	ldr	r5, [pc, #124]	; (13d2c <ticker_op_stop_cb+0x88>)
	return hdr->ref;
   13cae:	7c09      	ldrb	r1, [r1, #16]
   13cb0:	f104 031c 	add.w	r3, r4, #28
   13cb4:	60ab      	str	r3, [r5, #8]
	if (ull_ref_get(hdr)) {
   13cb6:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   13cba:	b1e1      	cbz	r1, 13cf6 <ticker_op_stop_cb+0x52>
		LL_ASSERT(!hdr->disabled_cb);
   13cbc:	6962      	ldr	r2, [r4, #20]
   13cbe:	b16a      	cbz	r2, 13cdc <ticker_op_stop_cb+0x38>
   13cc0:	4a1b      	ldr	r2, [pc, #108]	; (13d30 <ticker_op_stop_cb+0x8c>)
   13cc2:	491c      	ldr	r1, [pc, #112]	; (13d34 <ticker_op_stop_cb+0x90>)
   13cc4:	481c      	ldr	r0, [pc, #112]	; (13d38 <ticker_op_stop_cb+0x94>)
   13cc6:	f240 63e1 	movw	r3, #1761	; 0x6e1
   13cca:	f00b f9c3 	bl	1f054 <printk>
   13cce:	4040      	eors	r0, r0
   13cd0:	f380 8811 	msr	BASEPRI, r0
   13cd4:	f04f 0003 	mov.w	r0, #3
   13cd8:	df02      	svc	2
   13cda:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   13cdc:	4917      	ldr	r1, [pc, #92]	; (13d3c <ticker_op_stop_cb+0x98>)
		mfy.fp = lll_disable;
   13cde:	4818      	ldr	r0, [pc, #96]	; (13d40 <ticker_op_stop_cb+0x9c>)
		hdr->disabled_param = mfy.param;
   13ce0:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   13ce2:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   13ce4:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
   13ce6:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   13ce8:	4b10      	ldr	r3, [pc, #64]	; (13d2c <ticker_op_stop_cb+0x88>)
   13cea:	4611      	mov	r1, r2
   13cec:	2002      	movs	r0, #2
   13cee:	f7fb fe89 	bl	fa04 <mayfly_enqueue>
		LL_ASSERT(!ret);
   13cf2:	b968      	cbnz	r0, 13d10 <ticker_op_stop_cb+0x6c>
}
   13cf4:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
   13cf6:	4b11      	ldr	r3, [pc, #68]	; (13d3c <ticker_op_stop_cb+0x98>)
   13cf8:	60eb      	str	r3, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   13cfa:	2101      	movs	r1, #1
   13cfc:	462b      	mov	r3, r5
   13cfe:	2002      	movs	r0, #2
   13d00:	f7fb fe80 	bl	fa04 <mayfly_enqueue>
		LL_ASSERT(!ret);
   13d04:	2800      	cmp	r0, #0
   13d06:	d0f5      	beq.n	13cf4 <ticker_op_stop_cb+0x50>
   13d08:	f240 63ed 	movw	r3, #1773	; 0x6ed
   13d0c:	e002      	b.n	13d14 <ticker_op_stop_cb+0x70>
   13d0e:	4770      	bx	lr
		LL_ASSERT(!ret);
   13d10:	f44f 63dd 	mov.w	r3, #1768	; 0x6e8
		LL_ASSERT(!ret);
   13d14:	4a06      	ldr	r2, [pc, #24]	; (13d30 <ticker_op_stop_cb+0x8c>)
   13d16:	490b      	ldr	r1, [pc, #44]	; (13d44 <ticker_op_stop_cb+0xa0>)
   13d18:	4807      	ldr	r0, [pc, #28]	; (13d38 <ticker_op_stop_cb+0x94>)
   13d1a:	f00b f99b 	bl	1f054 <printk>
   13d1e:	4040      	eors	r0, r0
   13d20:	f380 8811 	msr	BASEPRI, r0
   13d24:	f04f 0003 	mov.w	r0, #3
   13d28:	df02      	svc	2
}
   13d2a:	bd38      	pop	{r3, r4, r5, pc}
   13d2c:	2000050c 	.word	0x2000050c
   13d30:	000259c8 	.word	0x000259c8
   13d34:	00025a54 	.word	0x00025a54
   13d38:	0002561c 	.word	0x0002561c
   13d3c:	00013ae1 	.word	0x00013ae1
   13d40:	00018cbd 	.word	0x00018cbd
   13d44:	000258a4 	.word	0x000258a4

00013d48 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   13d48:	b900      	cbnz	r0, 13d4c <ticker_op_update_cb+0x4>
   13d4a:	4770      	bx	lr
{
   13d4c:	b510      	push	{r4, lr}
   13d4e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   13d50:	f7ff fd32 	bl	137b8 <ull_disable_mark_get>
   13d54:	4284      	cmp	r4, r0
   13d56:	d00c      	beq.n	13d72 <ticker_op_update_cb+0x2a>
   13d58:	4a06      	ldr	r2, [pc, #24]	; (13d74 <ticker_op_update_cb+0x2c>)
   13d5a:	4907      	ldr	r1, [pc, #28]	; (13d78 <ticker_op_update_cb+0x30>)
   13d5c:	4807      	ldr	r0, [pc, #28]	; (13d7c <ticker_op_update_cb+0x34>)
   13d5e:	f240 63b1 	movw	r3, #1713	; 0x6b1
   13d62:	f00b f977 	bl	1f054 <printk>
   13d66:	4040      	eors	r0, r0
   13d68:	f380 8811 	msr	BASEPRI, r0
   13d6c:	f04f 0003 	mov.w	r0, #3
   13d70:	df02      	svc	2
}
   13d72:	bd10      	pop	{r4, pc}
   13d74:	000259c8 	.word	0x000259c8
   13d78:	00025a68 	.word	0x00025a68
   13d7c:	0002561c 	.word	0x0002561c

00013d80 <ticker_stop_cb>:
{
   13d80:	b530      	push	{r4, r5, lr}
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   13d82:	491a      	ldr	r1, [pc, #104]	; (13dec <ticker_stop_cb+0x6c>)
   13d84:	4a1a      	ldr	r2, [pc, #104]	; (13df0 <ticker_stop_cb+0x70>)
   13d86:	1a59      	subs	r1, r3, r1
{
   13d88:	461c      	mov	r4, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   13d8a:	fba2 3101 	umull	r3, r1, r2, r1
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   13d8e:	f411 5f7f 	tst.w	r1, #16320	; 0x3fc0
{
   13d92:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   13d94:	ea4f 1591 	mov.w	r5, r1, lsr #6
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   13d98:	d119      	bne.n	13dce <ticker_stop_cb+0x4e>
			  TICKER_ID_ADV_BASE + handle,
   13d9a:	1caa      	adds	r2, r5, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   13d9c:	4b15      	ldr	r3, [pc, #84]	; (13df4 <ticker_stop_cb+0x74>)
   13d9e:	9400      	str	r4, [sp, #0]
   13da0:	b2d2      	uxtb	r2, r2
   13da2:	2101      	movs	r1, #1
   13da4:	2000      	movs	r0, #0
   13da6:	f7fd f8e5 	bl	10f74 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13daa:	f030 0302 	bics.w	r3, r0, #2
   13dae:	d00c      	beq.n	13dca <ticker_stop_cb+0x4a>
   13db0:	4a11      	ldr	r2, [pc, #68]	; (13df8 <ticker_stop_cb+0x78>)
   13db2:	4912      	ldr	r1, [pc, #72]	; (13dfc <ticker_stop_cb+0x7c>)
   13db4:	4812      	ldr	r0, [pc, #72]	; (13e00 <ticker_stop_cb+0x80>)
   13db6:	f240 63c3 	movw	r3, #1731	; 0x6c3
   13dba:	f00b f94b 	bl	1f054 <printk>
   13dbe:	4040      	eors	r0, r0
   13dc0:	f380 8811 	msr	BASEPRI, r0
   13dc4:	f04f 0003 	mov.w	r0, #3
   13dc8:	df02      	svc	2
}
   13dca:	b003      	add	sp, #12
   13dcc:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   13dce:	4a0a      	ldr	r2, [pc, #40]	; (13df8 <ticker_stop_cb+0x78>)
   13dd0:	490c      	ldr	r1, [pc, #48]	; (13e04 <ticker_stop_cb+0x84>)
   13dd2:	480b      	ldr	r0, [pc, #44]	; (13e00 <ticker_stop_cb+0x80>)
   13dd4:	f240 63be 	movw	r3, #1726	; 0x6be
   13dd8:	f00b f93c 	bl	1f054 <printk>
   13ddc:	4040      	eors	r0, r0
   13dde:	f380 8811 	msr	BASEPRI, r0
   13de2:	f04f 0003 	mov.w	r0, #3
   13de6:	df02      	svc	2
   13de8:	e7d7      	b.n	13d9a <ticker_stop_cb+0x1a>
   13dea:	bf00      	nop
   13dec:	20003418 	.word	0x20003418
   13df0:	ba2e8ba3 	.word	0xba2e8ba3
   13df4:	00013ca5 	.word	0x00013ca5
   13df8:	000259c8 	.word	0x000259c8
   13dfc:	00025a38 	.word	0x00025a38
   13e00:	0002561c 	.word	0x0002561c
   13e04:	00025a98 	.word	0x00025a98

00013e08 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   13e08:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   13e0a:	4c1b      	ldr	r4, [pc, #108]	; (13e78 <conn_release.constprop.0+0x70>)
   13e0c:	6a65      	ldr	r5, [r4, #36]	; 0x24
	LL_ASSERT(!lll->link_tx_free);
   13e0e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   13e10:	b163      	cbz	r3, 13e2c <conn_release.constprop.0+0x24>
   13e12:	4a1a      	ldr	r2, [pc, #104]	; (13e7c <conn_release.constprop.0+0x74>)
   13e14:	491a      	ldr	r1, [pc, #104]	; (13e80 <conn_release.constprop.0+0x78>)
   13e16:	481b      	ldr	r0, [pc, #108]	; (13e84 <conn_release.constprop.0+0x7c>)
   13e18:	f44f 63e5 	mov.w	r3, #1832	; 0x728
   13e1c:	f00b f91a 	bl	1f054 <printk>
   13e20:	4040      	eors	r0, r0
   13e22:	f380 8811 	msr	BASEPRI, r0
   13e26:	f04f 0003 	mov.w	r0, #3
   13e2a:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   13e2c:	f105 0150 	add.w	r1, r5, #80	; 0x50
   13e30:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   13e34:	f7fb fd68 	bl	f908 <memq_deinit>
	LL_ASSERT(link);
   13e38:	4606      	mov	r6, r0
   13e3a:	b170      	cbz	r0, 13e5a <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   13e3c:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   13e3e:	65ee      	str	r6, [r5, #92]	; 0x5c
	ll_conn_release(lll->hdr.parent);
   13e40:	f000 fe3c 	bl	14abc <ll_conn_release>
	adv->lll.conn = NULL;
   13e44:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   13e46:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	adv->lll.conn = NULL;
   13e48:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
   13e4a:	f7ff fbd3 	bl	135f4 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   13e4e:	6c60      	ldr	r0, [r4, #68]	; 0x44
	adv->node_rx_cc_free = NULL;
   13e50:	64a5      	str	r5, [r4, #72]	; 0x48
	ll_rx_link_release(adv->link_cc_free);
   13e52:	f7ff fbc3 	bl	135dc <ll_rx_link_release>
	adv->link_cc_free = NULL;
   13e56:	6465      	str	r5, [r4, #68]	; 0x44
}
   13e58:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   13e5a:	4a08      	ldr	r2, [pc, #32]	; (13e7c <conn_release.constprop.0+0x74>)
   13e5c:	490a      	ldr	r1, [pc, #40]	; (13e88 <conn_release.constprop.0+0x80>)
   13e5e:	4809      	ldr	r0, [pc, #36]	; (13e84 <conn_release.constprop.0+0x7c>)
   13e60:	f240 732a 	movw	r3, #1834	; 0x72a
   13e64:	f00b f8f6 	bl	1f054 <printk>
   13e68:	4040      	eors	r0, r0
   13e6a:	f380 8811 	msr	BASEPRI, r0
   13e6e:	f04f 0003 	mov.w	r0, #3
   13e72:	df02      	svc	2
   13e74:	e7e2      	b.n	13e3c <conn_release.constprop.0+0x34>
   13e76:	bf00      	nop
   13e78:	20003418 	.word	0x20003418
   13e7c:	000259c8 	.word	0x000259c8
   13e80:	00025aa4 	.word	0x00025aa4
   13e84:	0002561c 	.word	0x0002561c
   13e88:	00025b2c 	.word	0x00025b2c

00013e8c <ll_adv_params_set>:
{
   13e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   13e90:	4d4b      	ldr	r5, [pc, #300]	; (13fc0 <ll_adv_params_set+0x134>)
	if (!adv || adv->is_enabled) {
   13e92:	4c4c      	ldr	r4, [pc, #304]	; (13fc4 <ll_adv_params_set+0x138>)
{
   13e94:	4684      	mov	ip, r0
	if (!adv || adv->is_enabled) {
   13e96:	f894 704e 	ldrb.w	r7, [r4, #78]	; 0x4e
{
   13e9a:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   13e9c:	e895 0003 	ldmia.w	r5, {r0, r1}
{
   13ea0:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
   13ea2:	f017 0701 	ands.w	r7, r7, #1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   13ea6:	9000      	str	r0, [sp, #0]
{
   13ea8:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
   13eac:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   13eb0:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   13eb4:	d170      	bne.n	13f98 <ll_adv_params_set+0x10c>
	if (adv_type != 0x01) {
   13eb6:	4699      	mov	r9, r3
   13eb8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   13ebc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu->type = pdu_adv_type[adv_type];
   13ec0:	a902      	add	r1, sp, #8
   13ec2:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   13ec6:	4471      	add	r1, lr
	adv->lll.chan_map = chan_map;
   13ec8:	f006 0607 	and.w	r6, r6, #7
   13ecc:	0076      	lsls	r6, r6, #1
   13ece:	f000 0003 	and.w	r0, r0, #3
	pdu->type = pdu_adv_type[adv_type];
   13ed2:	f811 3c08 	ldrb.w	r3, [r1, #-8]
   13ed6:	f898 1000 	ldrb.w	r1, [r8]
   13eda:	4615      	mov	r5, r2
	adv->lll.chan_map = chan_map;
   13edc:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
   13ee0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   13ee2:	4e39      	ldr	r6, [pc, #228]	; (13fc8 <ll_adv_params_set+0x13c>)
		adv->interval = 0;
   13ee4:	f1be 0f01 	cmp.w	lr, #1
	pdu->type = pdu_adv_type[adv_type];
   13ee8:	f021 011f 	bic.w	r1, r1, #31
		adv->interval = 0;
   13eec:	bf08      	it	eq
   13eee:	f04f 0c00 	moveq.w	ip, #0
	adv->lll.chan_map = chan_map;
   13ef2:	4016      	ands	r6, r2
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   13ef4:	f013 0f0e 	tst.w	r3, #14
	adv->own_addr_type = own_addr_type;
   13ef8:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
   13efc:	f8a4 c04c 	strh.w	ip, [r4, #76]	; 0x4c
	pdu->type = pdu_adv_type[adv_type];
   13f00:	f003 030f 	and.w	r3, r3, #15
   13f04:	ea43 0301 	orr.w	r3, r3, r1
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   13f08:	bf0c      	ite	eq
   13f0a:	2101      	moveq	r1, #1
   13f0c:	2100      	movne	r1, #0
   13f0e:	f361 1345 	bfi	r3, r1, #5, #1
	adv->own_addr_type = own_addr_type;
   13f12:	f365 0242 	bfi	r2, r5, #1, #2
	adv->lll.chan_map = chan_map;
   13f16:	4330      	orrs	r0, r6
   13f18:	8520      	strh	r0, [r4, #40]	; 0x28
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   13f1a:	f888 3000 	strb.w	r3, [r8]
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   13f1e:	0753      	lsls	r3, r2, #29
   13f20:	b2d1      	uxtb	r1, r2
	adv->own_addr_type = own_addr_type;
   13f22:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   13f26:	d50a      	bpl.n	13f3e <ll_adv_params_set+0xb2>
		adv->id_addr_type = direct_addr_type;
   13f28:	460b      	mov	r3, r1
   13f2a:	f369 03c3 	bfi	r3, r9, #3, #1
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   13f2e:	990a      	ldr	r1, [sp, #40]	; 0x28
		adv->id_addr_type = direct_addr_type;
   13f30:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   13f34:	2206      	movs	r2, #6
   13f36:	f104 004f 	add.w	r0, r4, #79	; 0x4f
   13f3a:	f00d fbb4 	bl	216a6 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   13f3e:	f898 2000 	ldrb.w	r2, [r8]
   13f42:	f002 030f 	and.w	r3, r2, #15
   13f46:	2b01      	cmp	r3, #1
   13f48:	f005 0101 	and.w	r1, r5, #1
   13f4c:	d029      	beq.n	13fa2 <ll_adv_params_set+0x116>
	} else if (pdu->len == 0) {
   13f4e:	f898 3001 	ldrb.w	r3, [r8, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   13f52:	f361 1286 	bfi	r2, r1, #6, #1
	} else if (pdu->len == 0) {
   13f56:	b1bb      	cbz	r3, 13f88 <ll_adv_params_set+0xfc>
		pdu->rx_addr = 0;
   13f58:	f36f 12c7 	bfc	r2, #7, #1
   13f5c:	f888 2000 	strb.w	r2, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   13f60:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   13f64:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   13f68:	01ad      	lsls	r5, r5, #6
   13f6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13f6c:	f005 0540 	and.w	r5, r5, #64	; 0x40
		if (pdu->len == 0) {
   13f70:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   13f72:	f045 0504 	orr.w	r5, r5, #4
   13f76:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   13f78:	b912      	cbnz	r2, 13f80 <ll_adv_params_set+0xf4>
			pdu->len = BDADDR_SIZE;
   13f7a:	2106      	movs	r1, #6
	return 0;
   13f7c:	4617      	mov	r7, r2
			pdu->len = BDADDR_SIZE;
   13f7e:	7059      	strb	r1, [r3, #1]
}
   13f80:	4638      	mov	r0, r7
   13f82:	b003      	add	sp, #12
   13f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->rx_addr = 0;
   13f88:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu->len = BDADDR_SIZE;
   13f8c:	2306      	movs	r3, #6
		pdu->rx_addr = 0;
   13f8e:	f888 2000 	strb.w	r2, [r8]
		pdu->len = BDADDR_SIZE;
   13f92:	f888 3001 	strb.w	r3, [r8, #1]
   13f96:	e7e3      	b.n	13f60 <ll_adv_params_set+0xd4>
		return BT_HCI_ERR_CMD_DISALLOWED;
   13f98:	270c      	movs	r7, #12
}
   13f9a:	4638      	mov	r0, r7
   13f9c:	b003      	add	sp, #12
   13f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   13fa2:	f361 1286 	bfi	r2, r1, #6, #1
		pdu->rx_addr = direct_addr_type;
   13fa6:	4640      	mov	r0, r8
   13fa8:	f369 12c7 	bfi	r2, r9, #7, #1
   13fac:	f800 2b08 	strb.w	r2, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   13fb0:	990a      	ldr	r1, [sp, #40]	; 0x28
   13fb2:	2206      	movs	r2, #6
   13fb4:	f00d fb77 	bl	216a6 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   13fb8:	230c      	movs	r3, #12
   13fba:	f888 3001 	strb.w	r3, [r8, #1]
   13fbe:	e7cf      	b.n	13f60 <ll_adv_params_set+0xd4>
   13fc0:	00024e28 	.word	0x00024e28
   13fc4:	20003418 	.word	0x20003418
   13fc8:	fffffcf1 	.word	0xfffffcf1

00013fcc <ull_adv_init>:
{
   13fcc:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   13fce:	4c05      	ldr	r4, [pc, #20]	; (13fe4 <ull_adv_init+0x18>)
   13fd0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   13fd4:	f005 f958 	bl	19288 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   13fd8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   13fdc:	f005 f954 	bl	19288 <lll_adv_data_init>
}
   13fe0:	2000      	movs	r0, #0
   13fe2:	bd10      	pop	{r4, pc}
   13fe4:	20003418 	.word	0x20003418

00013fe8 <ull_adv_reset>:
{
   13fe8:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
   13fea:	4c46      	ldr	r4, [pc, #280]	; (14104 <ull_adv_reset+0x11c>)
   13fec:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   13ff0:	07da      	lsls	r2, r3, #31
{
   13ff2:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
   13ff4:	d544      	bpl.n	14080 <ull_adv_reset+0x98>
	mark = ull_disable_mark(adv);
   13ff6:	4620      	mov	r0, r4
   13ff8:	f7ff fbc6 	bl	13788 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   13ffc:	4284      	cmp	r4, r0
   13ffe:	d00c      	beq.n	1401a <ull_adv_reset+0x32>
   14000:	4a41      	ldr	r2, [pc, #260]	; (14108 <ull_adv_reset+0x120>)
   14002:	4942      	ldr	r1, [pc, #264]	; (1410c <ull_adv_reset+0x124>)
   14004:	4842      	ldr	r0, [pc, #264]	; (14110 <ull_adv_reset+0x128>)
   14006:	f240 737d 	movw	r3, #1917	; 0x77d
   1400a:	f00b f823 	bl	1f054 <printk>
   1400e:	4040      	eors	r0, r0
   14010:	f380 8811 	msr	BASEPRI, r0
   14014:	f04f 0003 	mov.w	r0, #3
   14018:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   1401a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1401e:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   14020:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   14022:	d430      	bmi.n	14086 <ull_adv_reset+0x9e>
	ret_cb = TICKER_STATUS_BUSY;
   14024:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14026:	2103      	movs	r1, #3
   14028:	4b3a      	ldr	r3, [pc, #232]	; (14114 <ull_adv_reset+0x12c>)
   1402a:	9500      	str	r5, [sp, #0]
   1402c:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   1402e:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14030:	f7fc ffa0 	bl	10f74 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   14034:	4629      	mov	r1, r5
   14036:	f7ff fb7f 	bl	13738 <ull_ticker_status_take>
	if (ret) {
   1403a:	2800      	cmp	r0, #0
   1403c:	d14c      	bne.n	140d8 <ull_adv_reset+0xf0>
	ret = ull_disable(&adv->lll);
   1403e:	4836      	ldr	r0, [pc, #216]	; (14118 <ull_adv_reset+0x130>)
   14040:	f7ff fbde 	bl	13800 <ull_disable>
	LL_ASSERT(!ret);
   14044:	2800      	cmp	r0, #0
   14046:	d134      	bne.n	140b2 <ull_adv_reset+0xca>
	mark = ull_disable_unmark(adv);
   14048:	482e      	ldr	r0, [pc, #184]	; (14104 <ull_adv_reset+0x11c>)
   1404a:	f7ff fba9 	bl	137a0 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   1404e:	4284      	cmp	r4, r0
   14050:	d00c      	beq.n	1406c <ull_adv_reset+0x84>
   14052:	4a2d      	ldr	r2, [pc, #180]	; (14108 <ull_adv_reset+0x120>)
   14054:	492d      	ldr	r1, [pc, #180]	; (1410c <ull_adv_reset+0x124>)
   14056:	482e      	ldr	r0, [pc, #184]	; (14110 <ull_adv_reset+0x128>)
   14058:	f240 739f 	movw	r3, #1951	; 0x79f
   1405c:	f00a fffa 	bl	1f054 <printk>
   14060:	4040      	eors	r0, r0
   14062:	f380 8811 	msr	BASEPRI, r0
   14066:	f04f 0003 	mov.w	r0, #3
   1406a:	df02      	svc	2
	if (adv->lll.conn) {
   1406c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1406e:	b10b      	cbz	r3, 14074 <ull_adv_reset+0x8c>
		conn_release(adv);
   14070:	f7ff feca 	bl	13e08 <conn_release.constprop.0>
	adv->is_enabled = 0U;
   14074:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   14078:	f36f 0300 	bfc	r3, #0, #1
   1407c:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
   14080:	2000      	movs	r0, #0
   14082:	b005      	add	sp, #20
   14084:	bd30      	pop	{r4, r5, pc}
		ret_cb = TICKER_STATUS_BUSY;
   14086:	2202      	movs	r2, #2
   14088:	9203      	str	r2, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1408a:	2103      	movs	r1, #3
   1408c:	4b21      	ldr	r3, [pc, #132]	; (14114 <ull_adv_reset+0x12c>)
   1408e:	9500      	str	r5, [sp, #0]
   14090:	2201      	movs	r2, #1
   14092:	2000      	movs	r0, #0
   14094:	f7fc ff6e 	bl	10f74 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   14098:	4629      	mov	r1, r5
   1409a:	f7ff fb4d 	bl	13738 <ull_ticker_status_take>
		if (ret) {
   1409e:	2800      	cmp	r0, #0
   140a0:	d0c0      	beq.n	14024 <ull_adv_reset+0x3c>
			mark = ull_disable_unmark(adv);
   140a2:	4818      	ldr	r0, [pc, #96]	; (14104 <ull_adv_reset+0x11c>)
   140a4:	f7ff fb7c 	bl	137a0 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   140a8:	4284      	cmp	r4, r0
   140aa:	d0e9      	beq.n	14080 <ull_adv_reset+0x98>
   140ac:	f44f 63f1 	mov.w	r3, #1928	; 0x788
   140b0:	e019      	b.n	140e6 <ull_adv_reset+0xfe>
	LL_ASSERT(!ret);
   140b2:	4a15      	ldr	r2, [pc, #84]	; (14108 <ull_adv_reset+0x120>)
   140b4:	4919      	ldr	r1, [pc, #100]	; (1411c <ull_adv_reset+0x134>)
   140b6:	4816      	ldr	r0, [pc, #88]	; (14110 <ull_adv_reset+0x128>)
   140b8:	f240 739c 	movw	r3, #1948	; 0x79c
   140bc:	f00a ffca 	bl	1f054 <printk>
   140c0:	4040      	eors	r0, r0
   140c2:	f380 8811 	msr	BASEPRI, r0
   140c6:	f04f 0003 	mov.w	r0, #3
   140ca:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   140cc:	480d      	ldr	r0, [pc, #52]	; (14104 <ull_adv_reset+0x11c>)
   140ce:	f7ff fb67 	bl	137a0 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   140d2:	4284      	cmp	r4, r0
   140d4:	d1bd      	bne.n	14052 <ull_adv_reset+0x6a>
   140d6:	e7c9      	b.n	1406c <ull_adv_reset+0x84>
		mark = ull_disable_unmark(adv);
   140d8:	480a      	ldr	r0, [pc, #40]	; (14104 <ull_adv_reset+0x11c>)
   140da:	f7ff fb61 	bl	137a0 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   140de:	4284      	cmp	r4, r0
   140e0:	d0ce      	beq.n	14080 <ull_adv_reset+0x98>
   140e2:	f240 7396 	movw	r3, #1942	; 0x796
   140e6:	4a08      	ldr	r2, [pc, #32]	; (14108 <ull_adv_reset+0x120>)
   140e8:	4908      	ldr	r1, [pc, #32]	; (1410c <ull_adv_reset+0x124>)
   140ea:	4809      	ldr	r0, [pc, #36]	; (14110 <ull_adv_reset+0x128>)
   140ec:	f00a ffb2 	bl	1f054 <printk>
   140f0:	4040      	eors	r0, r0
   140f2:	f380 8811 	msr	BASEPRI, r0
   140f6:	f04f 0003 	mov.w	r0, #3
   140fa:	df02      	svc	2
}
   140fc:	2000      	movs	r0, #0
   140fe:	b005      	add	sp, #20
   14100:	bd30      	pop	{r4, r5, pc}
   14102:	bf00      	nop
   14104:	20003418 	.word	0x20003418
   14108:	000259c8 	.word	0x000259c8
   1410c:	00025ab8 	.word	0x00025ab8
   14110:	0002561c 	.word	0x0002561c
   14114:	00012619 	.word	0x00012619
   14118:	20003434 	.word	0x20003434
   1411c:	000258a4 	.word	0x000258a4

00014120 <ull_adv_reset_finalize>:
{
   14120:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
   14122:	4c09      	ldr	r4, [pc, #36]	; (14148 <ull_adv_reset_finalize+0x28>)
   14124:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   14128:	4628      	mov	r0, r5
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
   1412a:	3438      	adds	r4, #56	; 0x38
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
   1412c:	f005 f8ba 	bl	192a4 <lll_adv_data_reset>
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
   14130:	4620      	mov	r0, r4
   14132:	f005 f8b7 	bl	192a4 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   14136:	4628      	mov	r0, r5
   14138:	f005 f8a6 	bl	19288 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   1413c:	4620      	mov	r0, r4
   1413e:	f005 f8a3 	bl	19288 <lll_adv_data_init>
}
   14142:	2000      	movs	r0, #0
   14144:	bd38      	pop	{r3, r4, r5, pc}
   14146:	bf00      	nop
   14148:	20003418 	.word	0x20003418

0001414c <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1414c:	4a03      	ldr	r2, [pc, #12]	; (1415c <ull_adv_handle_get+0x10>)
   1414e:	4b04      	ldr	r3, [pc, #16]	; (14160 <ull_adv_handle_get+0x14>)
   14150:	1a80      	subs	r0, r0, r2
   14152:	fba3 3000 	umull	r3, r0, r3, r0
}
   14156:	f3c0 108f 	ubfx	r0, r0, #6, #16
   1415a:	4770      	bx	lr
   1415c:	20003418 	.word	0x20003418
   14160:	ba2e8ba3 	.word	0xba2e8ba3

00014164 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14164:	4a04      	ldr	r2, [pc, #16]	; (14178 <ull_adv_lll_handle_get+0x14>)
   14166:	6800      	ldr	r0, [r0, #0]
   14168:	4b04      	ldr	r3, [pc, #16]	; (1417c <ull_adv_lll_handle_get+0x18>)
   1416a:	1a80      	subs	r0, r0, r2
   1416c:	fba3 3000 	umull	r3, r0, r3, r0
}
   14170:	f3c0 108f 	ubfx	r0, r0, #6, #16
   14174:	4770      	bx	lr
   14176:	bf00      	nop
   14178:	20003418 	.word	0x20003418
   1417c:	ba2e8ba3 	.word	0xba2e8ba3

00014180 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   14180:	b938      	cbnz	r0, 14192 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   14182:	4805      	ldr	r0, [pc, #20]	; (14198 <ull_adv_is_enabled_get+0x18>)
   14184:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	return &ll_adv[handle];
   14188:	f013 0f01 	tst.w	r3, #1
   1418c:	bf08      	it	eq
   1418e:	2000      	moveq	r0, #0
   14190:	4770      	bx	lr
		return NULL;
   14192:	2000      	movs	r0, #0
}
   14194:	4770      	bx	lr
   14196:	bf00      	nop
   14198:	20003418 	.word	0x20003418

0001419c <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   1419c:	b928      	cbnz	r0, 141aa <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   1419e:	4b04      	ldr	r3, [pc, #16]	; (141b0 <ull_adv_is_enabled+0x14>)
   141a0:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
   141a4:	f000 0001 	and.w	r0, r0, #1
   141a8:	4770      	bx	lr
   141aa:	2000      	movs	r0, #0
}
   141ac:	4770      	bx	lr
   141ae:	bf00      	nop
   141b0:	20003418 	.word	0x20003418

000141b4 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   141b4:	b950      	cbnz	r0, 141cc <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   141b6:	4b06      	ldr	r3, [pc, #24]	; (141d0 <ull_adv_filter_pol_get+0x1c>)
   141b8:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
   141bc:	f010 0001 	ands.w	r0, r0, #1
   141c0:	d005      	beq.n	141ce <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   141c2:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   141c6:	f000 0003 	and.w	r0, r0, #3
   141ca:	4770      	bx	lr
		return 0;
   141cc:	2000      	movs	r0, #0
}
   141ce:	4770      	bx	lr
   141d0:	20003418 	.word	0x20003418

000141d4 <ull_adv_data_set>:
{
   141d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   141d6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   141da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   141de:	b083      	sub	sp, #12
   141e0:	6b1f      	ldr	r7, [r3, #48]	; 0x30
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   141e2:	783b      	ldrb	r3, [r7, #0]
   141e4:	f003 030f 	and.w	r3, r3, #15
   141e8:	2b01      	cmp	r3, #1
   141ea:	d032      	beq.n	14252 <ull_adv_data_set+0x7e>
	if (len > PDU_AC_DATA_SIZE_MAX) {
   141ec:	291f      	cmp	r1, #31
   141ee:	460d      	mov	r5, r1
   141f0:	d82c      	bhi.n	1424c <ull_adv_data_set+0x78>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   141f2:	4604      	mov	r4, r0
   141f4:	f10d 0107 	add.w	r1, sp, #7
   141f8:	302c      	adds	r0, #44	; 0x2c
   141fa:	4616      	mov	r6, r2
   141fc:	f005 f858 	bl	192b0 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   14200:	4639      	mov	r1, r7
   14202:	4607      	mov	r7, r0
   14204:	f811 2b02 	ldrb.w	r2, [r1], #2
   14208:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   1420c:	f3c2 0303 	ubfx	r3, r2, #0, #4
   14210:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   14214:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   14218:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   1421c:	f002 0280 	and.w	r2, r2, #128	; 0x80
   14220:	4638      	mov	r0, r7
   14222:	4313      	orrs	r3, r2
   14224:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   14228:	2206      	movs	r2, #6
   1422a:	f00d fa3c 	bl	216a6 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   1422e:	462a      	mov	r2, r5
   14230:	4631      	mov	r1, r6
   14232:	f107 0008 	add.w	r0, r7, #8
   14236:	f00d fa36 	bl	216a6 <memcpy>
	pdu->last = idx;
   1423a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	pdu->len = BDADDR_SIZE + len;
   1423e:	3506      	adds	r5, #6
	return 0;
   14240:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE + len;
   14242:	707d      	strb	r5, [r7, #1]
   14244:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
   14248:	b003      	add	sp, #12
   1424a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   1424c:	2012      	movs	r0, #18
}
   1424e:	b003      	add	sp, #12
   14250:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   14252:	2000      	movs	r0, #0
}
   14254:	b003      	add	sp, #12
   14256:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014258 <ll_adv_data_set>:
{
   14258:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   1425a:	4601      	mov	r1, r0
   1425c:	4801      	ldr	r0, [pc, #4]	; (14264 <ll_adv_data_set+0xc>)
   1425e:	f7ff bfb9 	b.w	141d4 <ull_adv_data_set>
   14262:	bf00      	nop
   14264:	20003418 	.word	0x20003418

00014268 <ull_scan_rsp_set>:
{
   14268:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1426a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   1426e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   14272:	b083      	sub	sp, #12
   14274:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   14276:	460e      	mov	r6, r1
   14278:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   1427a:	f10d 0107 	add.w	r1, sp, #7
   1427e:	3038      	adds	r0, #56	; 0x38
   14280:	4617      	mov	r7, r2
   14282:	f005 f815 	bl	192b0 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   14286:	4629      	mov	r1, r5
	pdu->len = BDADDR_SIZE + len;
   14288:	1db2      	adds	r2, r6, #6
	pdu->tx_addr = prev->tx_addr;
   1428a:	f811 3b02 	ldrb.w	r3, [r1], #2
	pdu->len = BDADDR_SIZE + len;
   1428e:	7042      	strb	r2, [r0, #1]
	pdu->tx_addr = prev->tx_addr;
   14290:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   14294:	019b      	lsls	r3, r3, #6
   14296:	f043 0304 	orr.w	r3, r3, #4
   1429a:	7003      	strb	r3, [r0, #0]
   1429c:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   1429e:	2206      	movs	r2, #6
   142a0:	3002      	adds	r0, #2
   142a2:	f00d fa00 	bl	216a6 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   142a6:	4632      	mov	r2, r6
   142a8:	4639      	mov	r1, r7
   142aa:	f105 0008 	add.w	r0, r5, #8
   142ae:	f00d f9fa 	bl	216a6 <memcpy>
	pdu->last = idx;
   142b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   142b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
   142ba:	2000      	movs	r0, #0
   142bc:	b003      	add	sp, #12
   142be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000142c0 <ll_adv_scan_rsp_set>:
{
   142c0:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   142c2:	4601      	mov	r1, r0
   142c4:	4801      	ldr	r0, [pc, #4]	; (142cc <ll_adv_scan_rsp_set+0xc>)
   142c6:	f7ff bfcf 	b.w	14268 <ull_scan_rsp_set>
   142ca:	bf00      	nop
   142cc:	20003418 	.word	0x20003418

000142d0 <ull_adv_pdu_update_addrs>:
{
   142d0:	b570      	push	{r4, r5, r6, lr}
   142d2:	460c      	mov	r4, r1
   142d4:	4605      	mov	r5, r0
}

static const uint8_t *adva_update(struct ll_adv_set *adv, struct pdu_adv *pdu)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	const uint8_t *tx_addr = ull_filter_adva_get(adv);
   142d6:	f003 fe6d 	bl	17fb4 <ull_filter_adva_get>
#else
	const uint8_t *tx_addr = NULL;
#endif
	uint8_t *adv_addr;

	if (tx_addr) {
   142da:	4601      	mov	r1, r0
   142dc:	b300      	cbz	r0, 14320 <ull_adv_pdu_update_addrs+0x50>
		pdu->tx_addr = 1;
   142de:	7823      	ldrb	r3, [r4, #0]
   142e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   142e4:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   142e6:	1ca6      	adds	r6, r4, #2
	} else {
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
	}

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   142e8:	4630      	mov	r0, r6
   142ea:	2206      	movs	r2, #6
   142ec:	f00d f9db 	bl	216a6 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   142f0:	7823      	ldrb	r3, [r4, #0]
   142f2:	f003 030f 	and.w	r3, r3, #15
   142f6:	2b01      	cmp	r3, #1
   142f8:	d001      	beq.n	142fe <ull_adv_pdu_update_addrs+0x2e>
}
   142fa:	4630      	mov	r0, r6
   142fc:	bd70      	pop	{r4, r5, r6, pc}
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	const uint8_t *rx_addr = NULL;
	uint8_t *tgt_addr;

	rx_addr = ull_filter_tgta_get(adv);
   142fe:	4628      	mov	r0, r5
   14300:	f003 fe86 	bl	18010 <ull_filter_tgta_get>
	if (rx_addr) {
   14304:	4601      	mov	r1, r0
   14306:	2800      	cmp	r0, #0
   14308:	d0f7      	beq.n	142fa <ull_adv_pdu_update_addrs+0x2a>
		pdu->rx_addr = 1;
   1430a:	7823      	ldrb	r3, [r4, #0]
   1430c:	4620      	mov	r0, r4
   1430e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14312:	f800 3b08 	strb.w	r3, [r0], #8

		/* TargetA always follows AdvA in all PDUs */
		tgt_addr = adv_pdu_adva_get(pdu) + BDADDR_SIZE;
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   14316:	2206      	movs	r2, #6
   14318:	f00d f9c5 	bl	216a6 <memcpy>
}
   1431c:	4630      	mov	r0, r6
   1431e:	bd70      	pop	{r4, r5, r6, pc}
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
   14320:	7820      	ldrb	r0, [r4, #0]
   14322:	f3c0 1080 	ubfx	r0, r0, #6, #1
   14326:	f7fc fe71 	bl	1100c <ll_addr_get>
   1432a:	4601      	mov	r1, r0
   1432c:	e7db      	b.n	142e6 <ull_adv_pdu_update_addrs+0x16>
   1432e:	bf00      	nop

00014330 <tx_ull_dequeue>:
{
   14330:	b410      	push	{r4}
   14332:	e9d0 246c 	ldrd	r2, r4, [r0, #432]	; 0x1b0
   14336:	4603      	mov	r3, r0
   14338:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1433a:	b164      	cbz	r4, 14356 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   1433c:	4294      	cmp	r4, r2
   1433e:	d027      	beq.n	14390 <tx_ull_dequeue+0x60>
		if (conn->tx_head == conn->tx_data) {
   14340:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
   14344:	4291      	cmp	r1, r2
   14346:	d018      	beq.n	1437a <tx_ull_dequeue+0x4a>
		conn->tx_head = conn->tx_head->next;
   14348:	6812      	ldr	r2, [r2, #0]
   1434a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		tx->next = NULL;
   1434e:	2300      	movs	r3, #0
}
   14350:	bc10      	pop	{r4}
		tx->next = NULL;
   14352:	6003      	str	r3, [r0, #0]
}
   14354:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   14356:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
   1435a:	4291      	cmp	r1, r2
   1435c:	d023      	beq.n	143a6 <tx_ull_dequeue+0x76>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1435e:	7911      	ldrb	r1, [r2, #4]
   14360:	f001 0103 	and.w	r1, r1, #3
   14364:	2903      	cmp	r1, #3
   14366:	d00d      	beq.n	14384 <tx_ull_dequeue+0x54>
		conn->tx_head = conn->tx_head->next;
   14368:	6812      	ldr	r2, [r2, #0]
   1436a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
			conn->tx_ctrl = NULL;
   1436e:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   14370:	e9c3 226d 	strd	r2, r2, [r3, #436]	; 0x1b4
}
   14374:	bc10      	pop	{r4}
		tx->next = tx;
   14376:	6000      	str	r0, [r0, #0]
}
   14378:	4770      	bx	lr
   1437a:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
   1437c:	6809      	ldr	r1, [r1, #0]
   1437e:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
   14382:	e7e1      	b.n	14348 <tx_ull_dequeue+0x18>
		    ((pdu_data_tx->llctrl.opcode !=
   14384:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14386:	2903      	cmp	r1, #3
   14388:	d0de      	beq.n	14348 <tx_ull_dequeue+0x18>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1438a:	290a      	cmp	r1, #10
   1438c:	d1ec      	bne.n	14368 <tx_ull_dequeue+0x38>
   1438e:	e7db      	b.n	14348 <tx_ull_dequeue+0x18>
   14390:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
		conn->tx_head = conn->tx_head->next;
   14394:	6812      	ldr	r2, [r2, #0]
   14396:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1439a:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   1439c:	bf18      	it	ne
   1439e:	f8c3 21b4 	strne.w	r2, [r3, #436]	; 0x1b4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   143a2:	d1e7      	bne.n	14374 <tx_ull_dequeue+0x44>
   143a4:	e7e3      	b.n	1436e <tx_ull_dequeue+0x3e>
	if (conn->tx_head == conn->tx_ctrl) {
   143a6:	2a00      	cmp	r2, #0
   143a8:	d1e8      	bne.n	1437c <tx_ull_dequeue+0x4c>
   143aa:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
   143ae:	4614      	mov	r4, r2
   143b0:	e7f0      	b.n	14394 <tx_ull_dequeue+0x64>
   143b2:	bf00      	nop

000143b4 <calc_eff_time>:
	uint16_t time = PKT_US(max_octets, phy);
   143b4:	074b      	lsls	r3, r1, #29
   143b6:	d50c      	bpl.n	143d2 <calc_eff_time+0x1e>
   143b8:	0181      	lsls	r1, r0, #6
	eff_time = MIN(eff_time, default_time);
   143ba:	f501 7074 	add.w	r0, r1, #976	; 0x3d0
   143be:	4290      	cmp	r0, r2
   143c0:	bf28      	it	cs
   143c2:	4610      	movcs	r0, r2
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   143c4:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   143c8:	4288      	cmp	r0, r1
   143ca:	bf38      	it	cc
   143cc:	4608      	movcc	r0, r1
}
   143ce:	b280      	uxth	r0, r0
   143d0:	4770      	bx	lr
{
   143d2:	b410      	push	{r4}
	uint16_t time = PKT_US(max_octets, phy);
   143d4:	f100 040d 	add.w	r4, r0, #13
   143d8:	f001 0003 	and.w	r0, r1, #3
   143dc:	4404      	add	r4, r0
   143de:	f3c1 0140 	ubfx	r1, r1, #1, #1
   143e2:	00e4      	lsls	r4, r4, #3
   143e4:	40cc      	lsrs	r4, r1
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, time);
   143e6:	b2a3      	uxth	r3, r4
   143e8:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   143ec:	f100 0028 	add.w	r0, r0, #40	; 0x28
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, time);
   143f0:	bf38      	it	cc
   143f2:	f44f 73a4 	movcc.w	r3, #328	; 0x148
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   143f6:	00c4      	lsls	r4, r0, #3
	eff_time = MIN(eff_time, default_time);
   143f8:	429a      	cmp	r2, r3
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   143fa:	fa24 f101 	lsr.w	r1, r4, r1
	eff_time = MIN(eff_time, default_time);
   143fe:	bf28      	it	cs
   14400:	461a      	movcs	r2, r3
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14402:	428a      	cmp	r2, r1
	eff_time = MIN(eff_time, default_time);
   14404:	4610      	mov	r0, r2
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14406:	bf38      	it	cc
   14408:	4608      	movcc	r0, r1
}
   1440a:	b280      	uxth	r0, r0
   1440c:	bc10      	pop	{r4}
   1440e:	4770      	bx	lr

00014410 <init_reset>:
{
   14410:	b538      	push	{r3, r4, r5, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   14412:	4813      	ldr	r0, [pc, #76]	; (14460 <init_reset+0x50>)
   14414:	4b13      	ldr	r3, [pc, #76]	; (14464 <init_reset+0x54>)
   14416:	2201      	movs	r2, #1
   14418:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1441c:	f7fb f9ec 	bl	f7f8 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   14420:	4b11      	ldr	r3, [pc, #68]	; (14468 <init_reset+0x58>)
   14422:	2203      	movs	r2, #3
   14424:	1d18      	adds	r0, r3, #4
   14426:	2124      	movs	r1, #36	; 0x24
   14428:	f7fb f9e6 	bl	f7f8 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   1442c:	4b0f      	ldr	r3, [pc, #60]	; (1446c <init_reset+0x5c>)
   1442e:	2204      	movs	r2, #4
   14430:	1898      	adds	r0, r3, r2
   14432:	2120      	movs	r1, #32
   14434:	f7fb f9e0 	bl	f7f8 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   14438:	4b0d      	ldr	r3, [pc, #52]	; (14470 <init_reset+0x60>)
   1443a:	2207      	movs	r2, #7
   1443c:	1d18      	adds	r0, r3, #4
   1443e:	2108      	movs	r1, #8
   14440:	f7fb f9da 	bl	f7f8 <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   14444:	4b0b      	ldr	r3, [pc, #44]	; (14474 <init_reset+0x64>)
	default_phy_tx |= BIT(2);
   14446:	490c      	ldr	r1, [pc, #48]	; (14478 <init_reset+0x68>)
	default_phy_rx |= BIT(2);
   14448:	4a0c      	ldr	r2, [pc, #48]	; (1447c <init_reset+0x6c>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   1444a:	480d      	ldr	r0, [pc, #52]	; (14480 <init_reset+0x70>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   1444c:	251b      	movs	r5, #27
   1444e:	801d      	strh	r5, [r3, #0]
	default_phy_tx |= BIT(2);
   14450:	2307      	movs	r3, #7
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   14452:	f44f 74a4 	mov.w	r4, #328	; 0x148
	default_phy_tx |= BIT(2);
   14456:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= BIT(2);
   14458:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   1445a:	8004      	strh	r4, [r0, #0]
}
   1445c:	2000      	movs	r0, #0
   1445e:	bd38      	pop	{r3, r4, r5, pc}
   14460:	20003490 	.word	0x20003490
   14464:	2000348c 	.word	0x2000348c
   14468:	2000366c 	.word	0x2000366c
   1446c:	200036dc 	.word	0x200036dc
   14470:	20003760 	.word	0x20003760
   14474:	200042ac 	.word	0x200042ac
   14478:	2000683f 	.word	0x2000683f
   1447c:	2000683e 	.word	0x2000683e
   14480:	200042ae 	.word	0x200042ae

00014484 <ctrl_tx_pause_enqueue>:
{
   14484:	b538      	push	{r3, r4, r5, lr}
	    conn->tx_head &&
   14486:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
{
   1448a:	4604      	mov	r4, r0
   1448c:	460d      	mov	r5, r1
	if (
   1448e:	b11b      	cbz	r3, 14498 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   14490:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
	    conn->tx_head &&
   14494:	0788      	lsls	r0, r1, #30
   14496:	d50d      	bpl.n	144b4 <ctrl_tx_pause_enqueue+0x30>
		if (!conn->tx_ctrl) {
   14498:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   1449c:	b301      	cbz	r1, 144e0 <ctrl_tx_pause_enqueue+0x5c>
			LL_ASSERT(!pause);
   1449e:	bb4a      	cbnz	r2, 144f4 <ctrl_tx_pause_enqueue+0x70>
	tx->next = conn->tx_ctrl_last->next;
   144a0:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   144a4:	681a      	ldr	r2, [r3, #0]
   144a6:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   144a8:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   144aa:	682b      	ldr	r3, [r5, #0]
   144ac:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
   144b0:	b19b      	cbz	r3, 144da <ctrl_tx_pause_enqueue+0x56>
}
   144b2:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   144b4:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
   144b8:	07c9      	lsls	r1, r1, #31
   144ba:	d4ed      	bmi.n	14498 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   144bc:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   144c0:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   144c2:	bf04      	itt	eq
   144c4:	6819      	ldreq	r1, [r3, #0]
   144c6:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   144ca:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   144ce:	b1f9      	cbz	r1, 14510 <ctrl_tx_pause_enqueue+0x8c>
			LL_ASSERT(!pause);
   144d0:	2a00      	cmp	r2, #0
   144d2:	d0e5      	beq.n	144a0 <ctrl_tx_pause_enqueue+0x1c>
   144d4:	f240 7392 	movw	r3, #1938	; 0x792
   144d8:	e00e      	b.n	144f8 <ctrl_tx_pause_enqueue+0x74>
		conn->tx_data_last = tx;
   144da:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
   144de:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   144e0:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   144e2:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
			if (!pause) {
   144e6:	2a00      	cmp	r2, #0
   144e8:	d1e2      	bne.n	144b0 <ctrl_tx_pause_enqueue+0x2c>
				conn->tx_ctrl_last = tx;
   144ea:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
	if (!tx->next) {
   144ee:	2b00      	cmp	r3, #0
   144f0:	d1df      	bne.n	144b2 <ctrl_tx_pause_enqueue+0x2e>
   144f2:	e7f2      	b.n	144da <ctrl_tx_pause_enqueue+0x56>
			LL_ASSERT(!pause);
   144f4:	f240 73a4 	movw	r3, #1956	; 0x7a4
   144f8:	4a0a      	ldr	r2, [pc, #40]	; (14524 <ctrl_tx_pause_enqueue+0xa0>)
   144fa:	490b      	ldr	r1, [pc, #44]	; (14528 <ctrl_tx_pause_enqueue+0xa4>)
   144fc:	480b      	ldr	r0, [pc, #44]	; (1452c <ctrl_tx_pause_enqueue+0xa8>)
   144fe:	f00a fda9 	bl	1f054 <printk>
   14502:	4040      	eors	r0, r0
   14504:	f380 8811 	msr	BASEPRI, r0
   14508:	f04f 0003 	mov.w	r0, #3
   1450c:	df02      	svc	2
   1450e:	e7c7      	b.n	144a0 <ctrl_tx_pause_enqueue+0x1c>
			tx->next = conn->tx_head->next;
   14510:	6819      	ldr	r1, [r3, #0]
   14512:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   14514:	601d      	str	r5, [r3, #0]
			if (!pause) {
   14516:	b90a      	cbnz	r2, 1451c <ctrl_tx_pause_enqueue+0x98>
				conn->tx_ctrl_last = tx;
   14518:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
   1451c:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   1451e:	2b00      	cmp	r3, #0
   14520:	d1c7      	bne.n	144b2 <ctrl_tx_pause_enqueue+0x2e>
   14522:	e7da      	b.n	144da <ctrl_tx_pause_enqueue+0x56>
   14524:	00025ad4 	.word	0x00025ad4
   14528:	00025b14 	.word	0x00025b14
   1452c:	0002561c 	.word	0x0002561c

00014530 <tx_lll_flush>:
{
   14530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   14534:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   14538:	4935      	ldr	r1, [pc, #212]	; (14610 <tx_lll_flush+0xe0>)
{
   1453a:	b083      	sub	sp, #12
   1453c:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1453e:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   14542:	4640      	mov	r0, r8
   14544:	f7fb f9bc 	bl	f8c0 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14548:	f105 064c 	add.w	r6, r5, #76	; 0x4c
	lll_conn_flush(handle, lll);
   1454c:	4629      	mov	r1, r5
   1454e:	f005 fb25 	bl	19b9c <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14552:	6d28      	ldr	r0, [r5, #80]	; 0x50
   14554:	4631      	mov	r1, r6
   14556:	aa01      	add	r2, sp, #4
   14558:	f7fb f9f0 	bl	f93c <memq_dequeue>
	while (link) {
   1455c:	b340      	cbz	r0, 145b0 <tx_lll_flush+0x80>
   1455e:	4c2d      	ldr	r4, [pc, #180]	; (14614 <tx_lll_flush+0xe4>)
		lll_tx->handle = 0xFFFF;
   14560:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14564:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   14568:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   1456a:	f894 c001 	ldrb.w	ip, [r4, #1]
   1456e:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   14570:	1c4b      	adds	r3, r1, #1
   14572:	b2db      	uxtb	r3, r3
		last = 0U;
   14574:	459c      	cmp	ip, r3
   14576:	bf08      	it	eq
   14578:	2300      	moveq	r3, #0
	if (last == first) {
   1457a:	429a      	cmp	r2, r3
   1457c:	d038      	beq.n	145f0 <tx_lll_flush+0xc0>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1457e:	7822      	ldrb	r2, [r4, #0]
   14580:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   14584:	eb19 0e02 	adds.w	lr, r9, r2
   14588:	d032      	beq.n	145f0 <tx_lll_flush+0xc0>
		lll_tx->node = tx;
   1458a:	f8dd c004 	ldr.w	ip, [sp, #4]
		lll_tx->handle = 0xFFFF;
   1458e:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   14592:	f8dc 1000 	ldr.w	r1, [ip]
		lll_tx->node = tx;
   14596:	f8ce c004 	str.w	ip, [lr, #4]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1459a:	aa01      	add	r2, sp, #4
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   1459c:	6001      	str	r1, [r0, #0]
		tx->next = link;
   1459e:	f8cc 0000 	str.w	r0, [ip]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   145a2:	4631      	mov	r1, r6
   145a4:	6d28      	ldr	r0, [r5, #80]	; 0x50
	*last = idx; /* Commit: Update write index */
   145a6:	70e3      	strb	r3, [r4, #3]
   145a8:	f7fb f9c8 	bl	f93c <memq_dequeue>
	while (link) {
   145ac:	2800      	cmp	r0, #0
   145ae:	d1db      	bne.n	14568 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   145b0:	f8d8 0130 	ldr.w	r0, [r8, #304]	; 0x130
	rx = (void *)&conn->llcp_terminate.node_rx;
   145b4:	f508 7498 	add.w	r4, r8, #304	; 0x130
	LL_ASSERT(rx->hdr.link);
   145b8:	b150      	cbz	r0, 145d0 <tx_lll_flush+0xa0>
	rx->hdr.link = NULL;
   145ba:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   145bc:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   145be:	f8c8 3130 	str.w	r3, [r8, #304]	; 0x130
	ull_rx_put(link, rx);
   145c2:	f7ff f9d1 	bl	13968 <ull_rx_put>
	ull_rx_sched();
   145c6:	f7ff f9df 	bl	13988 <ull_rx_sched>
}
   145ca:	b003      	add	sp, #12
   145cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   145d0:	4a11      	ldr	r2, [pc, #68]	; (14618 <tx_lll_flush+0xe8>)
   145d2:	4912      	ldr	r1, [pc, #72]	; (1461c <tx_lll_flush+0xec>)
   145d4:	4812      	ldr	r0, [pc, #72]	; (14620 <tx_lll_flush+0xf0>)
   145d6:	f240 7337 	movw	r3, #1847	; 0x737
   145da:	f00a fd3b 	bl	1f054 <printk>
   145de:	4040      	eors	r0, r0
   145e0:	f380 8811 	msr	BASEPRI, r0
   145e4:	f04f 0003 	mov.w	r0, #3
   145e8:	df02      	svc	2
   145ea:	f8d8 0130 	ldr.w	r0, [r8, #304]	; 0x130
   145ee:	e7e4      	b.n	145ba <tx_lll_flush+0x8a>
		LL_ASSERT(lll_tx);
   145f0:	4a09      	ldr	r2, [pc, #36]	; (14618 <tx_lll_flush+0xe8>)
   145f2:	490c      	ldr	r1, [pc, #48]	; (14624 <tx_lll_flush+0xf4>)
   145f4:	480a      	ldr	r0, [pc, #40]	; (14620 <tx_lll_flush+0xf0>)
   145f6:	f240 7323 	movw	r3, #1827	; 0x723
   145fa:	f00a fd2b 	bl	1f054 <printk>
   145fe:	4040      	eors	r0, r0
   14600:	f380 8811 	msr	BASEPRI, r0
   14604:	f04f 0003 	mov.w	r0, #3
   14608:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   1460a:	2300      	movs	r3, #0
   1460c:	801b      	strh	r3, [r3, #0]
   1460e:	deff      	udf	#255	; 0xff
   14610:	20003490 	.word	0x20003490
   14614:	2000051c 	.word	0x2000051c
   14618:	00025ad4 	.word	0x00025ad4
   1461c:	00025b24 	.word	0x00025b24
   14620:	0002561c 	.word	0x0002561c
   14624:	00025b1c 	.word	0x00025b1c

00014628 <ticker_op_stop_cb>:
{
   14628:	b510      	push	{r4, lr}
   1462a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1462c:	b9b0      	cbnz	r0, 1465c <ticker_op_stop_cb+0x34>
	mfy.param = param;
   1462e:	4b12      	ldr	r3, [pc, #72]	; (14678 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   14630:	2200      	movs	r2, #0
   14632:	4611      	mov	r1, r2
   14634:	2002      	movs	r0, #2
	mfy.param = param;
   14636:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   14638:	f7fb f9e4 	bl	fa04 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1463c:	b900      	cbnz	r0, 14640 <ticker_op_stop_cb+0x18>
}
   1463e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   14640:	4a0e      	ldr	r2, [pc, #56]	; (1467c <ticker_op_stop_cb+0x54>)
   14642:	490f      	ldr	r1, [pc, #60]	; (14680 <ticker_op_stop_cb+0x58>)
   14644:	480f      	ldr	r0, [pc, #60]	; (14684 <ticker_op_stop_cb+0x5c>)
   14646:	f44f 63d2 	mov.w	r3, #1680	; 0x690
   1464a:	f00a fd03 	bl	1f054 <printk>
   1464e:	4040      	eors	r0, r0
   14650:	f380 8811 	msr	BASEPRI, r0
   14654:	f04f 0003 	mov.w	r0, #3
   14658:	df02      	svc	2
}
   1465a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1465c:	4a07      	ldr	r2, [pc, #28]	; (1467c <ticker_op_stop_cb+0x54>)
   1465e:	490a      	ldr	r1, [pc, #40]	; (14688 <ticker_op_stop_cb+0x60>)
   14660:	4808      	ldr	r0, [pc, #32]	; (14684 <ticker_op_stop_cb+0x5c>)
   14662:	f240 6389 	movw	r3, #1673	; 0x689
   14666:	f00a fcf5 	bl	1f054 <printk>
   1466a:	4040      	eors	r0, r0
   1466c:	f380 8811 	msr	BASEPRI, r0
   14670:	f04f 0003 	mov.w	r0, #3
   14674:	df02      	svc	2
   14676:	e7da      	b.n	1462e <ticker_op_stop_cb+0x6>
   14678:	20000594 	.word	0x20000594
   1467c:	00025ad4 	.word	0x00025ad4
   14680:	000258d4 	.word	0x000258d4
   14684:	0002561c 	.word	0x0002561c
   14688:	00025b34 	.word	0x00025b34

0001468c <ticker_start_conn_op_cb>:
{
   1468c:	b510      	push	{r4, lr}
   1468e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14690:	b990      	cbnz	r0, 146b8 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   14692:	4620      	mov	r0, r4
   14694:	f7ff f8a2 	bl	137dc <ull_update_unmark>
	LL_ASSERT(p == param);
   14698:	4284      	cmp	r4, r0
   1469a:	d00c      	beq.n	146b6 <ticker_start_conn_op_cb+0x2a>
   1469c:	4a0d      	ldr	r2, [pc, #52]	; (146d4 <ticker_start_conn_op_cb+0x48>)
   1469e:	490e      	ldr	r1, [pc, #56]	; (146d8 <ticker_start_conn_op_cb+0x4c>)
   146a0:	480e      	ldr	r0, [pc, #56]	; (146dc <ticker_start_conn_op_cb+0x50>)
   146a2:	f44f 63d0 	mov.w	r3, #1664	; 0x680
   146a6:	f00a fcd5 	bl	1f054 <printk>
   146aa:	4040      	eors	r0, r0
   146ac:	f380 8811 	msr	BASEPRI, r0
   146b0:	f04f 0003 	mov.w	r0, #3
   146b4:	df02      	svc	2
}
   146b6:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   146b8:	4a06      	ldr	r2, [pc, #24]	; (146d4 <ticker_start_conn_op_cb+0x48>)
   146ba:	4909      	ldr	r1, [pc, #36]	; (146e0 <ticker_start_conn_op_cb+0x54>)
   146bc:	4807      	ldr	r0, [pc, #28]	; (146dc <ticker_start_conn_op_cb+0x50>)
   146be:	f240 637d 	movw	r3, #1661	; 0x67d
   146c2:	f00a fcc7 	bl	1f054 <printk>
   146c6:	4040      	eors	r0, r0
   146c8:	f380 8811 	msr	BASEPRI, r0
   146cc:	f04f 0003 	mov.w	r0, #3
   146d0:	df02      	svc	2
   146d2:	e7de      	b.n	14692 <ticker_start_conn_op_cb+0x6>
   146d4:	00025ad4 	.word	0x00025ad4
   146d8:	00025b40 	.word	0x00025b40
   146dc:	0002561c 	.word	0x0002561c
   146e0:	00025b34 	.word	0x00025b34

000146e4 <ticker_stop_conn_op_cb>:
{
   146e4:	b510      	push	{r4, lr}
   146e6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   146e8:	b990      	cbnz	r0, 14710 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   146ea:	4620      	mov	r0, r4
   146ec:	f7ff f86a 	bl	137c4 <ull_update_mark>
	LL_ASSERT(p == param);
   146f0:	4284      	cmp	r4, r0
   146f2:	d00c      	beq.n	1470e <ticker_stop_conn_op_cb+0x2a>
   146f4:	4a0d      	ldr	r2, [pc, #52]	; (1472c <ticker_stop_conn_op_cb+0x48>)
   146f6:	490e      	ldr	r1, [pc, #56]	; (14730 <ticker_stop_conn_op_cb+0x4c>)
   146f8:	480e      	ldr	r0, [pc, #56]	; (14734 <ticker_stop_conn_op_cb+0x50>)
   146fa:	f240 6376 	movw	r3, #1654	; 0x676
   146fe:	f00a fca9 	bl	1f054 <printk>
   14702:	4040      	eors	r0, r0
   14704:	f380 8811 	msr	BASEPRI, r0
   14708:	f04f 0003 	mov.w	r0, #3
   1470c:	df02      	svc	2
}
   1470e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14710:	4a06      	ldr	r2, [pc, #24]	; (1472c <ticker_stop_conn_op_cb+0x48>)
   14712:	4909      	ldr	r1, [pc, #36]	; (14738 <ticker_stop_conn_op_cb+0x54>)
   14714:	4807      	ldr	r0, [pc, #28]	; (14734 <ticker_stop_conn_op_cb+0x50>)
   14716:	f240 6373 	movw	r3, #1651	; 0x673
   1471a:	f00a fc9b 	bl	1f054 <printk>
   1471e:	4040      	eors	r0, r0
   14720:	f380 8811 	msr	BASEPRI, r0
   14724:	f04f 0003 	mov.w	r0, #3
   14728:	df02      	svc	2
   1472a:	e7de      	b.n	146ea <ticker_stop_conn_op_cb+0x6>
   1472c:	00025ad4 	.word	0x00025ad4
   14730:	00025b40 	.word	0x00025b40
   14734:	0002561c 	.word	0x0002561c
   14738:	00025b34 	.word	0x00025b34

0001473c <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1473c:	b900      	cbnz	r0, 14740 <ticker_update_conn_op_cb+0x4>
   1473e:	4770      	bx	lr
{
   14740:	b510      	push	{r4, lr}
   14742:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14744:	f7ff f856 	bl	137f4 <ull_update_mark_get>
   14748:	4284      	cmp	r4, r0
   1474a:	d010      	beq.n	1476e <ticker_update_conn_op_cb+0x32>
   1474c:	f7ff f834 	bl	137b8 <ull_disable_mark_get>
   14750:	4284      	cmp	r4, r0
   14752:	d00c      	beq.n	1476e <ticker_update_conn_op_cb+0x32>
   14754:	4a06      	ldr	r2, [pc, #24]	; (14770 <ticker_update_conn_op_cb+0x34>)
   14756:	4907      	ldr	r1, [pc, #28]	; (14774 <ticker_update_conn_op_cb+0x38>)
   14758:	4807      	ldr	r0, [pc, #28]	; (14778 <ticker_update_conn_op_cb+0x3c>)
   1475a:	f240 636a 	movw	r3, #1642	; 0x66a
   1475e:	f00a fc79 	bl	1f054 <printk>
   14762:	4040      	eors	r0, r0
   14764:	f380 8811 	msr	BASEPRI, r0
   14768:	f04f 0003 	mov.w	r0, #3
   1476c:	df02      	svc	2
}
   1476e:	bd10      	pop	{r4, pc}
   14770:	00025ad4 	.word	0x00025ad4
   14774:	00025b4c 	.word	0x00025b4c
   14778:	0002561c 	.word	0x0002561c

0001477c <reject_ext_ind_send.isra.0>:

	return 0;
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1477c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14780:	4605      	mov	r5, r0
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14782:	4826      	ldr	r0, [pc, #152]	; (1481c <reject_ext_ind_send.isra.0+0xa0>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   14784:	460e      	mov	r6, r1
   14786:	4690      	mov	r8, r2
   14788:	461f      	mov	r7, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1478a:	f7fb f863 	bl	f854 <mem_acquire>
	if (!tx) {
   1478e:	2800      	cmp	r0, #0
   14790:	d041      	beq.n	14816 <reject_ext_ind_send.isra.0+0x9a>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   14792:	2303      	movs	r3, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14794:	7904      	ldrb	r4, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   14796:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   14798:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   1479c:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   147a0:	4323      	orrs	r3, r4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   147a2:	2111      	movs	r1, #17
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   147a4:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   147a6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   147a8:	71c1      	strb	r1, [r0, #7]
	if (
   147aa:	b11a      	cbz	r2, 147b4 <reject_ext_ind_send.isra.0+0x38>
	    !conn->llcp_enc.pause_tx &&
   147ac:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
	    conn->tx_head &&
   147b0:	0799      	lsls	r1, r3, #30
   147b2:	d510      	bpl.n	147d6 <reject_ext_ind_send.isra.0+0x5a>
		if (!conn->tx_ctrl) {
   147b4:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   147b8:	b33b      	cbz	r3, 1480a <reject_ext_ind_send.isra.0+0x8e>
	tx->next = conn->tx_ctrl_last->next;
   147ba:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
   147be:	681a      	ldr	r2, [r3, #0]
   147c0:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   147c2:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   147c4:	6802      	ldr	r2, [r0, #0]
   147c6:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
	if (!tx->next) {
   147ca:	b1da      	cbz	r2, 14804 <reject_ext_ind_send.isra.0+0x88>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   147cc:	2303      	movs	r3, #3
   147ce:	7033      	strb	r3, [r6, #0]

	return 0;
   147d0:	2000      	movs	r0, #0
}
   147d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    !conn->llcp_phy.pause_tx &&
   147d6:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
   147da:	07db      	lsls	r3, r3, #31
   147dc:	d4ea      	bmi.n	147b4 <reject_ext_ind_send.isra.0+0x38>
		if (conn->tx_head == conn->tx_data) {
   147de:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   147e2:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   147e4:	bf04      	itt	eq
   147e6:	6813      	ldreq	r3, [r2, #0]
   147e8:	f8c5 31bc 	streq.w	r3, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   147ec:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   147f0:	2b00      	cmp	r3, #0
   147f2:	d1e2      	bne.n	147ba <reject_ext_ind_send.isra.0+0x3e>
			tx->next = conn->tx_head->next;
   147f4:	6813      	ldr	r3, [r2, #0]
   147f6:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   147f8:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   147fa:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   147fc:	e9c5 006d 	strd	r0, r0, [r5, #436]	; 0x1b4
	if (!tx->next) {
   14800:	2a00      	cmp	r2, #0
   14802:	d1e3      	bne.n	147cc <reject_ext_ind_send.isra.0+0x50>
		conn->tx_data_last = tx;
   14804:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
   14808:	e7e0      	b.n	147cc <reject_ext_ind_send.isra.0+0x50>
			tx->next = conn->tx_head;
   1480a:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   1480c:	e9c5 006c 	strd	r0, r0, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   14810:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
   14814:	e7d9      	b.n	147ca <reject_ext_ind_send.isra.0+0x4e>
		return -ENOBUFS;
   14816:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1481a:	e7da      	b.n	147d2 <reject_ext_ind_send.isra.0+0x56>
   1481c:	200036dc 	.word	0x200036dc

00014820 <start_enc_rsp_send>:
{
   14820:	b570      	push	{r4, r5, r6, lr}
   14822:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   14824:	b179      	cbz	r1, 14846 <start_enc_rsp_send+0x26>
	conn->lll.enc_tx = 1;
   14826:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1482a:	780b      	ldrb	r3, [r1, #0]
	conn->lll.enc_tx = 1;
   1482c:	f042 0210 	orr.w	r2, r2, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   14830:	2601      	movs	r6, #1
	conn->lll.enc_tx = 1;
   14832:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14836:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1483a:	2506      	movs	r5, #6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1483c:	704e      	strb	r6, [r1, #1]
	return 0;
   1483e:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14840:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   14842:	70cd      	strb	r5, [r1, #3]
}
   14844:	bd70      	pop	{r4, r5, r6, pc}
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14846:	4826      	ldr	r0, [pc, #152]	; (148e0 <start_enc_rsp_send+0xc0>)
   14848:	f7fb f804 	bl	f854 <mem_acquire>
		if (!tx) {
   1484c:	2800      	cmp	r0, #0
   1484e:	d043      	beq.n	148d8 <start_enc_rsp_send+0xb8>
	conn->lll.enc_tx = 1;
   14850:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14854:	7902      	ldrb	r2, [r0, #4]
	conn->lll.enc_tx = 1;
   14856:	f043 0310 	orr.w	r3, r3, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1485a:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
   1485c:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   14860:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   14862:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14866:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1486a:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1486c:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1486e:	71c1      	strb	r1, [r0, #7]
	if (
   14870:	b1e3      	cbz	r3, 148ac <start_enc_rsp_send+0x8c>
	    !conn->llcp_enc.pause_tx &&
   14872:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
   14876:	0791      	lsls	r1, r2, #30
   14878:	d418      	bmi.n	148ac <start_enc_rsp_send+0x8c>
	    !conn->llcp_phy.pause_tx &&
   1487a:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
   1487e:	07d2      	lsls	r2, r2, #31
   14880:	d414      	bmi.n	148ac <start_enc_rsp_send+0x8c>
		if (conn->tx_head == conn->tx_data) {
   14882:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
   14886:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   14888:	bf04      	itt	eq
   1488a:	681a      	ldreq	r2, [r3, #0]
   1488c:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   14890:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   14894:	b1ca      	cbz	r2, 148ca <start_enc_rsp_send+0xaa>
	tx->next = conn->tx_ctrl_last->next;
   14896:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   1489a:	681a      	ldr	r2, [r3, #0]
   1489c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1489e:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   148a0:	6803      	ldr	r3, [r0, #0]
   148a2:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
   148a6:	b163      	cbz	r3, 148c2 <start_enc_rsp_send+0xa2>
	return 0;
   148a8:	2000      	movs	r0, #0
}
   148aa:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   148ac:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   148b0:	2a00      	cmp	r2, #0
   148b2:	d1f0      	bne.n	14896 <start_enc_rsp_send+0x76>
			tx->next = conn->tx_head;
   148b4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   148b6:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   148ba:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
   148be:	2b00      	cmp	r3, #0
   148c0:	d1f2      	bne.n	148a8 <start_enc_rsp_send+0x88>
		conn->tx_data_last = tx;
   148c2:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
	return 0;
   148c6:	4618      	mov	r0, r3
}
   148c8:	bd70      	pop	{r4, r5, r6, pc}
			tx->next = conn->tx_head->next;
   148ca:	681a      	ldr	r2, [r3, #0]
   148cc:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   148ce:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   148d0:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   148d2:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
   148d6:	e7e6      	b.n	148a6 <start_enc_rsp_send+0x86>
			return -ENOBUFS;
   148d8:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   148dc:	bd70      	pop	{r4, r5, r6, pc}
   148de:	bf00      	nop
   148e0:	200036dc 	.word	0x200036dc

000148e4 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   148e4:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
   148e8:	f8d0 21b4 	ldr.w	r2, [r0, #436]	; 0x1b4
   148ec:	079b      	lsls	r3, r3, #30
{
   148ee:	b570      	push	{r4, r5, r6, lr}
   148f0:	4604      	mov	r4, r0
   148f2:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   148f4:	d509      	bpl.n	1490a <ctrl_tx_sec_enqueue+0x26>
		if (!conn->tx_ctrl) {
   148f6:	2a00      	cmp	r2, #0
   148f8:	d03d      	beq.n	14976 <ctrl_tx_sec_enqueue+0x92>
			tx->next = conn->tx_ctrl_last->next;
   148fa:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
   148fe:	681a      	ldr	r2, [r3, #0]
   14900:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   14902:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   14904:	682b      	ldr	r3, [r5, #0]
   14906:	b333      	cbz	r3, 14956 <ctrl_tx_sec_enqueue+0x72>
}
   14908:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->tx_head) {
   1490a:	f8d0 11b0 	ldr.w	r1, [r0, #432]	; 0x1b0
   1490e:	b1e1      	cbz	r1, 1494a <ctrl_tx_sec_enqueue+0x66>
			if ((conn->llcp_req != conn->llcp_ack) &&
   14910:	f890 31ab 	ldrb.w	r3, [r0, #427]	; 0x1ab
   14914:	f890 60e8 	ldrb.w	r6, [r0, #232]	; 0xe8
   14918:	f890 00e9 	ldrb.w	r0, [r0, #233]	; 0xe9
   1491c:	4286      	cmp	r6, r0
   1491e:	f003 0301 	and.w	r3, r3, #1
   14922:	d003      	beq.n	1492c <ctrl_tx_sec_enqueue+0x48>
   14924:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   14928:	2803      	cmp	r0, #3
   1492a:	d02c      	beq.n	14986 <ctrl_tx_sec_enqueue+0xa2>
	    !conn->llcp_phy.pause_tx &&
   1492c:	b9b3      	cbnz	r3, 1495c <ctrl_tx_sec_enqueue+0x78>
		if (conn->tx_head == conn->tx_data) {
   1492e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   14932:	4299      	cmp	r1, r3
   14934:	d045      	beq.n	149c2 <ctrl_tx_sec_enqueue+0xde>
		if (!conn->tx_ctrl) {
   14936:	b99a      	cbnz	r2, 14960 <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head->next;
   14938:	680b      	ldr	r3, [r1, #0]
   1493a:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   1493c:	600d      	str	r5, [r1, #0]
				conn->tx_ctrl = tx;
   1493e:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   14940:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
		if (!tx->next) {
   14944:	2b00      	cmp	r3, #0
   14946:	d1df      	bne.n	14908 <ctrl_tx_sec_enqueue+0x24>
   14948:	e005      	b.n	14956 <ctrl_tx_sec_enqueue+0x72>
		if (!conn->tx_ctrl) {
   1494a:	b94a      	cbnz	r2, 14960 <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head;
   1494c:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   1494e:	e9c0 556c 	strd	r5, r5, [r0, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   14952:	f8c0 51b8 	str.w	r5, [r0, #440]	; 0x1b8
			conn->tx_data_last = tx;
   14956:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
   1495a:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   1495c:	2a00      	cmp	r2, #0
   1495e:	d036      	beq.n	149ce <ctrl_tx_sec_enqueue+0xea>
	tx->next = conn->tx_ctrl_last->next;
   14960:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   14964:	681a      	ldr	r2, [r3, #0]
   14966:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   14968:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   1496a:	682b      	ldr	r3, [r5, #0]
   1496c:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
		if (!tx->next) {
   14970:	2b00      	cmp	r3, #0
   14972:	d1c9      	bne.n	14908 <ctrl_tx_sec_enqueue+0x24>
   14974:	e7ef      	b.n	14956 <ctrl_tx_sec_enqueue+0x72>
			tx->next = conn->tx_head;
   14976:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   1497a:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   1497c:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		if (!tx->next) {
   14980:	2b00      	cmp	r3, #0
   14982:	d1c1      	bne.n	14908 <ctrl_tx_sec_enqueue+0x24>
   14984:	e7e7      	b.n	14956 <ctrl_tx_sec_enqueue+0x72>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   14986:	7908      	ldrb	r0, [r1, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   14988:	f000 0003 	and.w	r0, r0, #3
   1498c:	2803      	cmp	r0, #3
   1498e:	d1cd      	bne.n	1492c <ctrl_tx_sec_enqueue+0x48>
			    ((pdu_data_tx->llctrl.opcode ==
   14990:	79c8      	ldrb	r0, [r1, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   14992:	2803      	cmp	r0, #3
   14994:	d001      	beq.n	1499a <ctrl_tx_sec_enqueue+0xb6>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   14996:	280a      	cmp	r0, #10
   14998:	d1c8      	bne.n	1492c <ctrl_tx_sec_enqueue+0x48>
	    !conn->llcp_phy.pause_tx &&
   1499a:	b9f3      	cbnz	r3, 149da <ctrl_tx_sec_enqueue+0xf6>
		if (conn->tx_head == conn->tx_data) {
   1499c:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   149a0:	428b      	cmp	r3, r1
   149a2:	d022      	beq.n	149ea <ctrl_tx_sec_enqueue+0x106>
		if (!conn->tx_ctrl) {
   149a4:	b332      	cbz	r2, 149f4 <ctrl_tx_sec_enqueue+0x110>
			LL_ASSERT(!pause);
   149a6:	f240 7392 	movw	r3, #1938	; 0x792
			LL_ASSERT(!pause);
   149aa:	4a14      	ldr	r2, [pc, #80]	; (149fc <ctrl_tx_sec_enqueue+0x118>)
   149ac:	4914      	ldr	r1, [pc, #80]	; (14a00 <ctrl_tx_sec_enqueue+0x11c>)
   149ae:	4815      	ldr	r0, [pc, #84]	; (14a04 <ctrl_tx_sec_enqueue+0x120>)
   149b0:	f00a fb50 	bl	1f054 <printk>
   149b4:	4040      	eors	r0, r0
   149b6:	f380 8811 	msr	BASEPRI, r0
   149ba:	f04f 0003 	mov.w	r0, #3
   149be:	df02      	svc	2
   149c0:	e7ce      	b.n	14960 <ctrl_tx_sec_enqueue+0x7c>
			conn->tx_data = conn->tx_data->next;
   149c2:	680b      	ldr	r3, [r1, #0]
   149c4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   149c8:	2a00      	cmp	r2, #0
   149ca:	d1c9      	bne.n	14960 <ctrl_tx_sec_enqueue+0x7c>
   149cc:	e7b4      	b.n	14938 <ctrl_tx_sec_enqueue+0x54>
			tx->next = conn->tx_head;
   149ce:	6029      	str	r1, [r5, #0]
				conn->tx_ctrl = tx;
   149d0:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   149d4:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
}
   149d8:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   149da:	b112      	cbz	r2, 149e2 <ctrl_tx_sec_enqueue+0xfe>
			LL_ASSERT(!pause);
   149dc:	f240 73a4 	movw	r3, #1956	; 0x7a4
   149e0:	e7e3      	b.n	149aa <ctrl_tx_sec_enqueue+0xc6>
			tx->next = conn->tx_head;
   149e2:	6029      	str	r1, [r5, #0]
			conn->tx_head = tx;
   149e4:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
}
   149e8:	bd70      	pop	{r4, r5, r6, pc}
			conn->tx_data = conn->tx_data->next;
   149ea:	680b      	ldr	r3, [r1, #0]
   149ec:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   149f0:	2a00      	cmp	r2, #0
   149f2:	d1d8      	bne.n	149a6 <ctrl_tx_sec_enqueue+0xc2>
			tx->next = conn->tx_head->next;
   149f4:	680b      	ldr	r3, [r1, #0]
   149f6:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   149f8:	600d      	str	r5, [r1, #0]
			if (!pause) {
   149fa:	e783      	b.n	14904 <ctrl_tx_sec_enqueue+0x20>
   149fc:	00025ad4 	.word	0x00025ad4
   14a00:	00025b14 	.word	0x00025b14
   14a04:	0002561c 	.word	0x0002561c

00014a08 <feature_rsp_send.isra.0>:
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   14a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a0a:	4606      	mov	r6, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14a0c:	4825      	ldr	r0, [pc, #148]	; (14aa4 <feature_rsp_send.isra.0+0x9c>)
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   14a0e:	460d      	mov	r5, r1
   14a10:	4617      	mov	r7, r2
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14a12:	f7fa ff1f 	bl	f854 <mem_acquire>
	if (!tx) {
   14a16:	2800      	cmp	r0, #0
   14a18:	d040      	beq.n	14a9c <feature_rsp_send.isra.0+0x94>
	       (features[1] << 8) | (features[2] << 16);
   14a1a:	79bb      	ldrb	r3, [r7, #6]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   14a1c:	7939      	ldrb	r1, [r7, #4]
	       (features[1] << 8) | (features[2] << 16);
   14a1e:	4a22      	ldr	r2, [pc, #136]	; (14aa8 <feature_rsp_send.isra.0+0xa0>)
   14a20:	4604      	mov	r4, r0
   14a22:	7978      	ldrb	r0, [r7, #5]
   14a24:	041b      	lsls	r3, r3, #16
   14a26:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   14a2a:	430b      	orrs	r3, r1
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   14a2c:	f8d6 111c 	ldr.w	r1, [r6, #284]	; 0x11c
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   14a30:	481e      	ldr	r0, [pc, #120]	; (14aac <feature_rsp_send.isra.0+0xa4>)
	       (features[1] << 8) | (features[2] << 16);
   14a32:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   14a34:	400b      	ands	r3, r1
   14a36:	f3c3 0310 	ubfx	r3, r3, #0, #17
   14a3a:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
   14a3e:	79bb      	ldrb	r3, [r7, #6]
   14a40:	f897 c005 	ldrb.w	ip, [r7, #5]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   14a44:	7939      	ldrb	r1, [r7, #4]
	conn->common.fex_valid = 1U;
   14a46:	f896 70dc 	ldrb.w	r7, [r6, #220]	; 0xdc
	       (features[1] << 8) | (features[2] << 16);
   14a4a:	041b      	lsls	r3, r3, #16
   14a4c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   14a50:	430b      	orrs	r3, r1
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14a52:	7921      	ldrb	r1, [r4, #4]
	       (features[1] << 8) | (features[2] << 16);
   14a54:	4313      	orrs	r3, r2
	conn->common.fex_valid = 1U;
   14a56:	f047 0201 	orr.w	r2, r7, #1
   14a5a:	f886 20dc 	strb.w	r2, [r6, #220]	; 0xdc
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   14a5e:	4018      	ands	r0, r3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   14a60:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14a62:	f041 0303 	orr.w	r3, r1, #3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   14a66:	2109      	movs	r1, #9
	conn->llcp_feature.features_peer =
   14a68:	f8c6 0120 	str.w	r0, [r6, #288]	; 0x120
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14a6c:	7123      	strb	r3, [r4, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   14a6e:	7161      	strb	r1, [r4, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   14a70:	71e1      	strb	r1, [r4, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   14a72:	18a0      	adds	r0, r4, r2
   14a74:	2100      	movs	r1, #0
   14a76:	f00c fe41 	bl	216fc <memset>
	feat_result &= 0xFF;
   14a7a:	f8d6 311c 	ldr.w	r3, [r6, #284]	; 0x11c
	dst[2] = val >> 16;
   14a7e:	2201      	movs	r2, #1
   14a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	dst[1] = val >> 8;
   14a84:	2149      	movs	r1, #73	; 0x49
	dst[0] = val;
   14a86:	7223      	strb	r3, [r4, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   14a88:	4630      	mov	r0, r6
	dst[1] = val >> 8;
   14a8a:	7261      	strb	r1, [r4, #9]
	dst[2] = val >> 16;
   14a8c:	72a2      	strb	r2, [r4, #10]
   14a8e:	4621      	mov	r1, r4
   14a90:	f7ff ff28 	bl	148e4 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14a94:	2303      	movs	r3, #3
   14a96:	702b      	strb	r3, [r5, #0]
	return 0;
   14a98:	2000      	movs	r0, #0
}
   14a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   14a9c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   14aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14aa2:	bf00      	nop
   14aa4:	200036dc 	.word	0x200036dc
   14aa8:	fffe30d0 	.word	0xfffe30d0
   14aac:	0001ff7f 	.word	0x0001ff7f

00014ab0 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   14ab0:	4801      	ldr	r0, [pc, #4]	; (14ab8 <ll_conn_acquire+0x8>)
   14ab2:	f7fa becf 	b.w	f854 <mem_acquire>
   14ab6:	bf00      	nop
   14ab8:	2000348c 	.word	0x2000348c

00014abc <ll_conn_release>:
	mem_release(conn, &conn_free);
   14abc:	4901      	ldr	r1, [pc, #4]	; (14ac4 <ll_conn_release+0x8>)
   14abe:	f7fa bee3 	b.w	f888 <mem_release>
   14ac2:	bf00      	nop
   14ac4:	2000348c 	.word	0x2000348c

00014ac8 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   14ac8:	4902      	ldr	r1, [pc, #8]	; (14ad4 <ll_conn_handle_get+0xc>)
   14aca:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   14ace:	f7fa bef7 	b.w	f8c0 <mem_index_get>
   14ad2:	bf00      	nop
   14ad4:	20003490 	.word	0x20003490

00014ad8 <ll_conn_get>:
{
   14ad8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14ada:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   14ade:	4801      	ldr	r0, [pc, #4]	; (14ae4 <ll_conn_get+0xc>)
   14ae0:	f7fa beea 	b.w	f8b8 <mem_get>
   14ae4:	20003490 	.word	0x20003490

00014ae8 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14ae8:	b958      	cbnz	r0, 14b02 <ll_connected_get+0x1a>
{
   14aea:	b508      	push	{r3, lr}
   14aec:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14aee:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   14af2:	4805      	ldr	r0, [pc, #20]	; (14b08 <ll_connected_get+0x20>)
   14af4:	f7fa fee0 	bl	f8b8 <mem_get>
	if (conn->lll.handle != handle) {
   14af8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   14afa:	b903      	cbnz	r3, 14afe <ll_connected_get+0x16>
}
   14afc:	bd08      	pop	{r3, pc}
		return NULL;
   14afe:	2000      	movs	r0, #0
}
   14b00:	bd08      	pop	{r3, pc}
		return NULL;
   14b02:	2000      	movs	r0, #0
}
   14b04:	4770      	bx	lr
   14b06:	bf00      	nop
   14b08:	20003490 	.word	0x20003490

00014b0c <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   14b0c:	4801      	ldr	r0, [pc, #4]	; (14b14 <ll_tx_mem_acquire+0x8>)
   14b0e:	f7fa bea1 	b.w	f854 <mem_acquire>
   14b12:	bf00      	nop
   14b14:	2000366c 	.word	0x2000366c

00014b18 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   14b18:	4901      	ldr	r1, [pc, #4]	; (14b20 <ll_tx_mem_release+0x8>)
   14b1a:	f7fa beb5 	b.w	f888 <mem_release>
   14b1e:	bf00      	nop
   14b20:	2000366c 	.word	0x2000366c

00014b24 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14b24:	2800      	cmp	r0, #0
   14b26:	d13d      	bne.n	14ba4 <ll_tx_mem_enqueue+0x80>
{
   14b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14b2a:	4602      	mov	r2, r0
   14b2c:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14b2e:	481f      	ldr	r0, [pc, #124]	; (14bac <ll_tx_mem_enqueue+0x88>)
   14b30:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   14b34:	f7fa fec0 	bl	f8b8 <mem_get>
	if (conn->lll.handle != handle) {
   14b38:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14b3a:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   14b3c:	b9e2      	cbnz	r2, 14b78 <ll_tx_mem_enqueue+0x54>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   14b3e:	491c      	ldr	r1, [pc, #112]	; (14bb0 <ll_tx_mem_enqueue+0x8c>)
   14b40:	78cf      	ldrb	r7, [r1, #3]
	if (last == count) {
   14b42:	784e      	ldrb	r6, [r1, #1]
   14b44:	7888      	ldrb	r0, [r1, #2]
	last = last + 1;
   14b46:	1c7b      	adds	r3, r7, #1
   14b48:	b2db      	uxtb	r3, r3
		last = 0U;
   14b4a:	429e      	cmp	r6, r3
   14b4c:	bf08      	it	eq
   14b4e:	2300      	moveq	r3, #0
	if (last == first) {
   14b50:	4298      	cmp	r0, r3
   14b52:	d014      	beq.n	14b7e <ll_tx_mem_enqueue+0x5a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14b54:	460e      	mov	r6, r1
   14b56:	f816 0b04 	ldrb.w	r0, [r6], #4
   14b5a:	fb10 f007 	smulbb	r0, r0, r7
	if (!lll_tx) {
   14b5e:	1837      	adds	r7, r6, r0
   14b60:	d00d      	beq.n	14b7e <ll_tx_mem_enqueue+0x5a>
	lll_tx->handle = handle;
   14b62:	5232      	strh	r2, [r6, r0]
	lll_tx->node = tx;
   14b64:	607d      	str	r5, [r7, #4]
   14b66:	7c20      	ldrb	r0, [r4, #16]
	*last = idx; /* Commit: Update write index */
   14b68:	70cb      	strb	r3, [r1, #3]
	if (ull_ref_get(&conn->ull)) {
   14b6a:	b958      	cbnz	r0, 14b84 <ll_tx_mem_enqueue+0x60>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14b6c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   14b70:	2b00      	cmp	r3, #0
   14b72:	db11      	blt.n	14b98 <ll_tx_mem_enqueue+0x74>
	return 0;
   14b74:	2000      	movs	r0, #0
}
   14b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   14b78:	f06f 0015 	mvn.w	r0, #21
}
   14b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   14b7e:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   14b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mfy.param = conn;
   14b84:	4b0b      	ldr	r3, [pc, #44]	; (14bb4 <ll_tx_mem_enqueue+0x90>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   14b86:	2101      	movs	r1, #1
   14b88:	2003      	movs	r0, #3
		mfy.param = conn;
   14b8a:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   14b8c:	f7fa ff3a 	bl	fa04 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14b90:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   14b94:	2b00      	cmp	r3, #0
   14b96:	daed      	bge.n	14b74 <ll_tx_mem_enqueue+0x50>
		ull_slave_latency_cancel(conn, handle);
   14b98:	4620      	mov	r0, r4
   14b9a:	2100      	movs	r1, #0
   14b9c:	f002 fdc6 	bl	1772c <ull_slave_latency_cancel>
	return 0;
   14ba0:	2000      	movs	r0, #0
}
   14ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   14ba4:	f06f 0015 	mvn.w	r0, #21
}
   14ba8:	4770      	bx	lr
   14baa:	bf00      	nop
   14bac:	20003490 	.word	0x20003490
   14bb0:	20000560 	.word	0x20000560
   14bb4:	20000584 	.word	0x20000584

00014bb8 <ll_conn_update>:
{
   14bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14bbc:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   14bc0:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   14bc4:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   14bc8:	2800      	cmp	r0, #0
   14bca:	d154      	bne.n	14c76 <ll_conn_update+0xbe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14bcc:	460c      	mov	r4, r1
   14bce:	4616      	mov	r6, r2
   14bd0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   14bd4:	4602      	mov	r2, r0
   14bd6:	4840      	ldr	r0, [pc, #256]	; (14cd8 <ll_conn_update+0x120>)
   14bd8:	461d      	mov	r5, r3
   14bda:	f7fa fe6d 	bl	f8b8 <mem_get>
	if (conn->lll.handle != handle) {
   14bde:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   14be0:	2b00      	cmp	r3, #0
   14be2:	d148      	bne.n	14c76 <ll_conn_update+0xbe>
	if (!cmd) {
   14be4:	b1e4      	cbz	r4, 14c20 <ll_conn_update+0x68>
		cmd--;
   14be6:	3c01      	subs	r4, #1
		if (cmd) {
   14be8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   14bec:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   14bf0:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
   14bf4:	d04e      	beq.n	14c94 <ll_conn_update+0xdc>
			if ((conn->llcp_conn_param.req ==
   14bf6:	428a      	cmp	r2, r1
   14bf8:	d03a      	beq.n	14c70 <ll_conn_update+0xb8>
			    (conn->llcp_conn_param.state !=
   14bfa:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
			     conn->llcp_conn_param.ack) ||
   14bfe:	f002 0107 	and.w	r1, r2, #7
   14c02:	2903      	cmp	r1, #3
   14c04:	d134      	bne.n	14c70 <ll_conn_update+0xb8>
			conn->llcp_conn_param.state = cmd;
   14c06:	f004 0407 	and.w	r4, r4, #7
   14c0a:	f044 0408 	orr.w	r4, r4, #8
   14c0e:	f022 020f 	bic.w	r2, r2, #15
   14c12:	4314      	orrs	r4, r2
   14c14:	f880 4172 	strb.w	r4, [r0, #370]	; 0x172
			conn->llcp_conn_param.status = status;
   14c18:	f880 6173 	strb.w	r6, [r0, #371]	; 0x173
	return 0;
   14c1c:	4618      	mov	r0, r3
   14c1e:	e028      	b.n	14c72 <ll_conn_update+0xba>
		if (!conn->llcp_conn_param.disabled &&
   14c20:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   14c24:	06d9      	lsls	r1, r3, #27
   14c26:	d529      	bpl.n	14c7c <ll_conn_update+0xc4>
		} else if (conn->lll.role) {
   14c28:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   14c2c:	2b00      	cmp	r3, #0
   14c2e:	db4c      	blt.n	14cca <ll_conn_update+0x112>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   14c30:	f890 2104 	ldrb.w	r2, [r0, #260]	; 0x104
   14c34:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
   14c38:	4293      	cmp	r3, r2
   14c3a:	d119      	bne.n	14c70 <ll_conn_update+0xb8>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   14c3c:	f890 2106 	ldrb.w	r2, [r0, #262]	; 0x106
		conn->llcp_cu.interval = interval_max;
   14c40:	f8a0 9108 	strh.w	r9, [r0, #264]	; 0x108
		conn->llcp_cu.req++;
   14c44:	3301      	adds	r3, #1
		conn->llcp_cu.win_size = 1U;
   14c46:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   14c48:	f022 0207 	bic.w	r2, r2, #7
		conn->llcp_cu.req++;
   14c4c:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   14c50:	f042 0205 	orr.w	r2, r2, #5
		conn->llcp_cu.win_offset_us = 0U;
   14c54:	2300      	movs	r3, #0
		conn->llcp_cu.win_size = 1U;
   14c56:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
		conn->llcp_cu.latency = latency;
   14c5a:	f8a0 810a 	strh.w	r8, [r0, #266]	; 0x10a
		conn->llcp_cu.timeout = timeout;
   14c5e:	f8a0 710c 	strh.w	r7, [r0, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   14c62:	f880 2106 	strb.w	r2, [r0, #262]	; 0x106
		conn->llcp_cu.win_offset_us = 0U;
   14c66:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
	return 0;
   14c6a:	4618      	mov	r0, r3
}
   14c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   14c70:	200c      	movs	r0, #12
}
   14c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14c76:	2002      	movs	r0, #2
}
   14c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		    (!conn->common.fex_valid ||
   14c7c:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
		if (!conn->llcp_conn_param.disabled &&
   14c80:	07da      	lsls	r2, r3, #31
   14c82:	d503      	bpl.n	14c8c <ll_conn_update+0xd4>
		     (conn->llcp_feature.features_conn &
   14c84:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
		    (!conn->common.fex_valid ||
   14c88:	079b      	lsls	r3, r3, #30
   14c8a:	d5cd      	bpl.n	14c28 <ll_conn_update+0x70>
   14c8c:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   14c90:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
			if (conn->llcp_conn_param.req !=
   14c94:	428a      	cmp	r2, r1
   14c96:	d1eb      	bne.n	14c70 <ll_conn_update+0xb8>
			conn->llcp_conn_param.state = cmd;
   14c98:	f8b0 3172 	ldrh.w	r3, [r0, #370]	; 0x172
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14c9c:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
			conn->llcp_conn_param.interval_min = interval_min;
   14ca0:	f8a0 5174 	strh.w	r5, [r0, #372]	; 0x174
			conn->llcp_conn_param.state = cmd;
   14ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
			conn->llcp_conn_param.req++;
   14ca8:	3201      	adds	r2, #1
			conn->llcp_conn_param.state = cmd;
   14caa:	f043 0308 	orr.w	r3, r3, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14cae:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   14cb0:	f8a0 9176 	strh.w	r9, [r0, #374]	; 0x176
			conn->llcp_conn_param.req++;
   14cb4:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
			conn->llcp_conn_param.latency = latency;
   14cb8:	f8a0 8178 	strh.w	r8, [r0, #376]	; 0x178
			conn->llcp_conn_param.timeout = timeout;
   14cbc:	f8a0 717a 	strh.w	r7, [r0, #378]	; 0x17a
			conn->llcp_conn_param.state = cmd;
   14cc0:	f8a0 3172 	strh.w	r3, [r0, #370]	; 0x172
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14cc4:	db03      	blt.n	14cce <ll_conn_update+0x116>
	return 0;
   14cc6:	2000      	movs	r0, #0
   14cc8:	e7d3      	b.n	14c72 <ll_conn_update+0xba>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   14cca:	201a      	movs	r0, #26
   14ccc:	e7d1      	b.n	14c72 <ll_conn_update+0xba>
				ull_slave_latency_cancel(conn, handle);
   14cce:	2100      	movs	r1, #0
   14cd0:	f002 fd2c 	bl	1772c <ull_slave_latency_cancel>
	return 0;
   14cd4:	2000      	movs	r0, #0
   14cd6:	e7cc      	b.n	14c72 <ll_conn_update+0xba>
   14cd8:	20003490 	.word	0x20003490

00014cdc <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14cdc:	b9d0      	cbnz	r0, 14d14 <ll_chm_get+0x38>
{
   14cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14ce0:	4602      	mov	r2, r0
   14ce2:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14ce4:	480c      	ldr	r0, [pc, #48]	; (14d18 <ll_chm_get+0x3c>)
   14ce6:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   14cea:	f7fa fde5 	bl	f8b8 <mem_get>
	if (conn->lll.handle != handle) {
   14cee:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14cf0:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   14cf2:	b96e      	cbnz	r6, 14d10 <ll_chm_get+0x34>
   14cf4:	f100 0738 	add.w	r7, r0, #56	; 0x38
		conn->chm_updated = 0U;
   14cf8:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
		memcpy(chm, conn->lll.data_chan_map,
   14cfc:	2205      	movs	r2, #5
   14cfe:	4639      	mov	r1, r7
   14d00:	4628      	mov	r0, r5
   14d02:	f00c fcd0 	bl	216a6 <memcpy>
	} while (conn->chm_updated);
   14d06:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
   14d0a:	2800      	cmp	r0, #0
   14d0c:	d1f4      	bne.n	14cf8 <ll_chm_get+0x1c>
}
   14d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14d10:	2002      	movs	r0, #2
}
   14d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14d14:	2002      	movs	r0, #2
}
   14d16:	4770      	bx	lr
   14d18:	20003490 	.word	0x20003490

00014d1c <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14d1c:	b9e8      	cbnz	r0, 14d5a <ll_terminate_ind_send+0x3e>
{
   14d1e:	b538      	push	{r3, r4, r5, lr}
   14d20:	4602      	mov	r2, r0
   14d22:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14d24:	480e      	ldr	r0, [pc, #56]	; (14d60 <ll_terminate_ind_send+0x44>)
   14d26:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   14d2a:	f7fa fdc5 	bl	f8b8 <mem_get>
	if (conn->lll.handle != handle) {
   14d2e:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   14d30:	b964      	cbnz	r4, 14d4c <ll_terminate_ind_send+0x30>
	conn->llcp_terminate.req++;
   14d32:	f890 212c 	ldrb.w	r2, [r0, #300]	; 0x12c
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14d36:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_terminate.reason_own = reason;
   14d3a:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
	conn->llcp_terminate.req++;
   14d3e:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14d40:	2900      	cmp	r1, #0
	conn->llcp_terminate.req++;
   14d42:	f880 212c 	strb.w	r2, [r0, #300]	; 0x12c
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14d46:	db03      	blt.n	14d50 <ll_terminate_ind_send+0x34>
	return 0;
   14d48:	4620      	mov	r0, r4
}
   14d4a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14d4c:	2002      	movs	r0, #2
}
   14d4e:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   14d50:	4621      	mov	r1, r4
   14d52:	f002 fceb 	bl	1772c <ull_slave_latency_cancel>
	return 0;
   14d56:	4620      	mov	r0, r4
}
   14d58:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14d5a:	2002      	movs	r0, #2
}
   14d5c:	4770      	bx	lr
   14d5e:	bf00      	nop
   14d60:	20003490 	.word	0x20003490

00014d64 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14d64:	b9d8      	cbnz	r0, 14d9e <ll_feature_req_send+0x3a>
{
   14d66:	b510      	push	{r4, lr}
   14d68:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14d6a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   14d6e:	480f      	ldr	r0, [pc, #60]	; (14dac <ll_feature_req_send+0x48>)
   14d70:	f7fa fda2 	bl	f8b8 <mem_get>
	if (conn->lll.handle != handle) {
   14d74:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   14d76:	b984      	cbnz	r4, 14d9a <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   14d78:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
   14d7c:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
   14d80:	428a      	cmp	r2, r1
   14d82:	d108      	bne.n	14d96 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14d84:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_feature.req++;
   14d88:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14d8a:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   14d8c:	f880 2118 	strb.w	r2, [r0, #280]	; 0x118
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14d90:	db07      	blt.n	14da2 <ll_feature_req_send+0x3e>
	return 0;
   14d92:	4620      	mov	r0, r4
}
   14d94:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   14d96:	200c      	movs	r0, #12
}
   14d98:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14d9a:	2002      	movs	r0, #2
}
   14d9c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14d9e:	2002      	movs	r0, #2
}
   14da0:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   14da2:	4621      	mov	r1, r4
   14da4:	f002 fcc2 	bl	1772c <ull_slave_latency_cancel>
	return 0;
   14da8:	4620      	mov	r0, r4
}
   14daa:	bd10      	pop	{r4, pc}
   14dac:	20003490 	.word	0x20003490

00014db0 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14db0:	b9d8      	cbnz	r0, 14dea <ll_version_ind_send+0x3a>
{
   14db2:	b510      	push	{r4, lr}
   14db4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14db6:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   14dba:	480f      	ldr	r0, [pc, #60]	; (14df8 <ll_version_ind_send+0x48>)
   14dbc:	f7fa fd7c 	bl	f8b8 <mem_get>
	if (conn->lll.handle != handle) {
   14dc0:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   14dc2:	b984      	cbnz	r4, 14de6 <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   14dc4:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
   14dc8:	f890 2125 	ldrb.w	r2, [r0, #293]	; 0x125
   14dcc:	428a      	cmp	r2, r1
   14dce:	d108      	bne.n	14de2 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14dd0:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_version.req++;
   14dd4:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14dd6:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   14dd8:	f880 2124 	strb.w	r2, [r0, #292]	; 0x124
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14ddc:	db07      	blt.n	14dee <ll_version_ind_send+0x3e>
	return 0;
   14dde:	4620      	mov	r0, r4
}
   14de0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   14de2:	200c      	movs	r0, #12
}
   14de4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14de6:	2002      	movs	r0, #2
}
   14de8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14dea:	2002      	movs	r0, #2
}
   14dec:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   14dee:	4621      	mov	r1, r4
   14df0:	f002 fc9c 	bl	1772c <ull_slave_latency_cancel>
	return 0;
   14df4:	4620      	mov	r0, r4
}
   14df6:	bd10      	pop	{r4, pc}
   14df8:	20003490 	.word	0x20003490

00014dfc <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14dfc:	2800      	cmp	r0, #0
   14dfe:	d147      	bne.n	14e90 <ll_length_req_send+0x94>
{
   14e00:	b538      	push	{r3, r4, r5, lr}
   14e02:	460d      	mov	r5, r1
   14e04:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14e06:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   14e0a:	4602      	mov	r2, r0
   14e0c:	4824      	ldr	r0, [pc, #144]	; (14ea0 <ll_length_req_send+0xa4>)
   14e0e:	f7fa fd53 	bl	f8b8 <mem_get>
	if (conn->lll.handle != handle) {
   14e12:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   14e14:	bb1b      	cbnz	r3, 14e5e <ll_length_req_send+0x62>
	if (conn->llcp_length.disabled ||
   14e16:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   14e1a:	071a      	lsls	r2, r3, #28
   14e1c:	d421      	bmi.n	14e62 <ll_length_req_send+0x66>
	    (conn->common.fex_valid &&
   14e1e:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
	if (conn->llcp_length.disabled ||
   14e22:	07d1      	lsls	r1, r2, #31
   14e24:	d503      	bpl.n	14e2e <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_DLE)))) {
   14e26:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
	    (conn->common.fex_valid &&
   14e2a:	0692      	lsls	r2, r2, #26
   14e2c:	d519      	bpl.n	14e62 <ll_length_req_send+0x66>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   14e2e:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
   14e32:	f890 2199 	ldrb.w	r2, [r0, #409]	; 0x199
   14e36:	428a      	cmp	r2, r1
   14e38:	d017      	beq.n	14e6a <ll_length_req_send+0x6e>
		switch (conn->llcp_length.state) {
   14e3a:	f003 0307 	and.w	r3, r3, #7
   14e3e:	2b03      	cmp	r3, #3
   14e40:	d004      	beq.n	14e4c <ll_length_req_send+0x50>
   14e42:	3303      	adds	r3, #3
   14e44:	f003 0307 	and.w	r3, r3, #7
   14e48:	2b01      	cmp	r3, #1
   14e4a:	d80c      	bhi.n	14e66 <ll_length_req_send+0x6a>
			if (!conn->llcp_length.cache.tx_octets) {
   14e4c:	f8b0 31a4 	ldrh.w	r3, [r0, #420]	; 0x1a4
   14e50:	b94b      	cbnz	r3, 14e66 <ll_length_req_send+0x6a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   14e52:	f8a0 51a4 	strh.w	r5, [r0, #420]	; 0x1a4
				conn->llcp_length.cache.tx_time = tx_time;
   14e56:	f8a0 41a6 	strh.w	r4, [r0, #422]	; 0x1a6
				return 0;
   14e5a:	4618      	mov	r0, r3
}
   14e5c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14e5e:	2002      	movs	r0, #2
}
   14e60:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   14e62:	201a      	movs	r0, #26
}
   14e64:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   14e66:	200c      	movs	r0, #12
}
   14e68:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14e6a:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14e6e:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_length.tx_octets = tx_octets;
   14e72:	f8a0 519e 	strh.w	r5, [r0, #414]	; 0x19e
	conn->llcp_length.req++;
   14e76:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14e78:	f36f 0302 	bfc	r3, #0, #3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14e7c:	2900      	cmp	r1, #0
	conn->llcp_length.req++;
   14e7e:	f880 2198 	strb.w	r2, [r0, #408]	; 0x198
	conn->llcp_length.tx_time = tx_time;
   14e82:	f8a0 41a2 	strh.w	r4, [r0, #418]	; 0x1a2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14e86:	f880 319a 	strb.w	r3, [r0, #410]	; 0x19a
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14e8a:	db03      	blt.n	14e94 <ll_length_req_send+0x98>
	return 0;
   14e8c:	2000      	movs	r0, #0
}
   14e8e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14e90:	2002      	movs	r0, #2
}
   14e92:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   14e94:	2100      	movs	r1, #0
   14e96:	f002 fc49 	bl	1772c <ull_slave_latency_cancel>
	return 0;
   14e9a:	2000      	movs	r0, #0
}
   14e9c:	bd38      	pop	{r3, r4, r5, pc}
   14e9e:	bf00      	nop
   14ea0:	20003490 	.word	0x20003490

00014ea4 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   14ea4:	4a03      	ldr	r2, [pc, #12]	; (14eb4 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   14ea6:	4b04      	ldr	r3, [pc, #16]	; (14eb8 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   14ea8:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   14eaa:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   14eac:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   14eae:	800b      	strh	r3, [r1, #0]
}
   14eb0:	4770      	bx	lr
   14eb2:	bf00      	nop
   14eb4:	200042ac 	.word	0x200042ac
   14eb8:	200042ae 	.word	0x200042ae

00014ebc <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   14ebc:	4a02      	ldr	r2, [pc, #8]	; (14ec8 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   14ebe:	4b03      	ldr	r3, [pc, #12]	; (14ecc <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   14ec0:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   14ec2:	8019      	strh	r1, [r3, #0]
}
   14ec4:	2000      	movs	r0, #0
   14ec6:	4770      	bx	lr
   14ec8:	200042ac 	.word	0x200042ac
   14ecc:	200042ae 	.word	0x200042ae

00014ed0 <ll_length_max_get>:
{
   14ed0:	b430      	push	{r4, r5}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   14ed2:	251b      	movs	r5, #27
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   14ed4:	f44f 6429 	mov.w	r4, #2704	; 0xa90
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   14ed8:	8005      	strh	r5, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   14eda:	8015      	strh	r5, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   14edc:	800c      	strh	r4, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   14ede:	801c      	strh	r4, [r3, #0]
}
   14ee0:	bc30      	pop	{r4, r5}
   14ee2:	4770      	bx	lr

00014ee4 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14ee4:	b9c0      	cbnz	r0, 14f18 <ll_phy_get+0x34>
{
   14ee6:	b538      	push	{r3, r4, r5, lr}
   14ee8:	460d      	mov	r5, r1
   14eea:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14eec:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   14ef0:	4602      	mov	r2, r0
   14ef2:	480a      	ldr	r0, [pc, #40]	; (14f1c <ll_phy_get+0x38>)
   14ef4:	f7fa fce0 	bl	f8b8 <mem_get>
   14ef8:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   14efa:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   14efc:	b950      	cbnz	r0, 14f14 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   14efe:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   14f02:	f3c2 0202 	ubfx	r2, r2, #0, #3
   14f06:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   14f08:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
   14f0c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   14f10:	7023      	strb	r3, [r4, #0]
}
   14f12:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14f14:	2002      	movs	r0, #2
}
   14f16:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14f18:	2002      	movs	r0, #2
}
   14f1a:	4770      	bx	lr
   14f1c:	20003490 	.word	0x20003490

00014f20 <ll_phy_default_set>:
	default_phy_tx = tx;
   14f20:	4a02      	ldr	r2, [pc, #8]	; (14f2c <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   14f22:	4b03      	ldr	r3, [pc, #12]	; (14f30 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   14f24:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   14f26:	7019      	strb	r1, [r3, #0]
}
   14f28:	2000      	movs	r0, #0
   14f2a:	4770      	bx	lr
   14f2c:	2000683f 	.word	0x2000683f
   14f30:	2000683e 	.word	0x2000683e

00014f34 <ll_phy_req_send>:
{
   14f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   14f36:	2800      	cmp	r0, #0
   14f38:	d146      	bne.n	14fc8 <ll_phy_req_send+0x94>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14f3a:	460c      	mov	r4, r1
   14f3c:	4615      	mov	r5, r2
   14f3e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   14f42:	4602      	mov	r2, r0
   14f44:	4823      	ldr	r0, [pc, #140]	; (14fd4 <ll_phy_req_send+0xa0>)
   14f46:	461e      	mov	r6, r3
   14f48:	f7fa fcb6 	bl	f8b8 <mem_get>
	if (conn->lll.handle != handle) {
   14f4c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   14f4e:	bbdb      	cbnz	r3, 14fc8 <ll_phy_req_send+0x94>
	if (conn->llcp_phy.disabled ||
   14f50:	f890 71ab 	ldrb.w	r7, [r0, #427]	; 0x1ab
   14f54:	f017 0708 	ands.w	r7, r7, #8
   14f58:	d139      	bne.n	14fce <ll_phy_req_send+0x9a>
	    (conn->common.fex_valid &&
   14f5a:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
	if (conn->llcp_phy.disabled ||
   14f5e:	07db      	lsls	r3, r3, #31
   14f60:	d504      	bpl.n	14f6c <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_PHY_2M)) &&
   14f62:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   14f66:	f413 6f10 	tst.w	r3, #2304	; 0x900
   14f6a:	d030      	beq.n	14fce <ll_phy_req_send+0x9a>
	if ((conn->llcp_req != conn->llcp_ack) ||
   14f6c:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   14f70:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   14f74:	429a      	cmp	r2, r3
   14f76:	d124      	bne.n	14fc2 <ll_phy_req_send+0x8e>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   14f78:	f890 31a8 	ldrb.w	r3, [r0, #424]	; 0x1a8
	if ((conn->llcp_req != conn->llcp_ack) ||
   14f7c:	f890 21a9 	ldrb.w	r2, [r0, #425]	; 0x1a9
   14f80:	429a      	cmp	r2, r3
   14f82:	d11e      	bne.n	14fc2 <ll_phy_req_send+0x8e>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   14f84:	f004 0407 	and.w	r4, r4, #7
   14f88:	00a4      	lsls	r4, r4, #2
   14f8a:	f8b0 11aa 	ldrh.w	r1, [r0, #426]	; 0x1aa
   14f8e:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   14f92:	f006 0307 	and.w	r3, r6, #7
   14f96:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   14f9a:	f005 0501 	and.w	r5, r5, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14f9e:	f990 403d 	ldrsb.w	r4, [r0, #61]	; 0x3d
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   14fa2:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
   14fa6:	f401 4179 	and.w	r1, r1, #63744	; 0xf900
	conn->llcp_phy.req++;
   14faa:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   14fac:	430b      	orrs	r3, r1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14fae:	2c00      	cmp	r4, #0
	conn->llcp_phy.req++;
   14fb0:	f880 21a8 	strb.w	r2, [r0, #424]	; 0x1a8
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   14fb4:	f8a0 31aa 	strh.w	r3, [r0, #426]	; 0x1aa
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   14fb8:	da04      	bge.n	14fc4 <ll_phy_req_send+0x90>
		ull_slave_latency_cancel(conn, handle);
   14fba:	2100      	movs	r1, #0
   14fbc:	f002 fbb6 	bl	1772c <ull_slave_latency_cancel>
   14fc0:	e000      	b.n	14fc4 <ll_phy_req_send+0x90>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14fc2:	270c      	movs	r7, #12
}
   14fc4:	4638      	mov	r0, r7
   14fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14fc8:	2702      	movs	r7, #2
}
   14fca:	4638      	mov	r0, r7
   14fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   14fce:	271a      	movs	r7, #26
}
   14fd0:	4638      	mov	r0, r7
   14fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14fd4:	20003490 	.word	0x20003490

00014fd8 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14fd8:	b9d8      	cbnz	r0, 15012 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14fda:	4602      	mov	r2, r0
{
   14fdc:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14fde:	480e      	ldr	r0, [pc, #56]	; (15018 <ll_apto_get+0x40>)
   14fe0:	460c      	mov	r4, r1
   14fe2:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   14fe6:	f7fa fc67 	bl	f8b8 <mem_get>
   14fea:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   14fec:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   14fee:	b970      	cbnz	r0, 1500e <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   14ff0:	f8b2 10d2 	ldrh.w	r1, [r2, #210]	; 0xd2
   14ff4:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
   14ff6:	4a09      	ldr	r2, [pc, #36]	; (1501c <ll_apto_get+0x44>)
   14ff8:	fb03 f301 	mul.w	r3, r3, r1
   14ffc:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   15000:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   15004:	fba2 2303 	umull	r2, r3, r2, r3
   15008:	099b      	lsrs	r3, r3, #6
   1500a:	8023      	strh	r3, [r4, #0]
}
   1500c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1500e:	2002      	movs	r0, #2
}
   15010:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15012:	2002      	movs	r0, #2
}
   15014:	4770      	bx	lr
   15016:	bf00      	nop
   15018:	20003490 	.word	0x20003490
   1501c:	10624dd3 	.word	0x10624dd3

00015020 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15020:	b9d8      	cbnz	r0, 1505a <ll_apto_set+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15022:	4602      	mov	r2, r0
{
   15024:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15026:	480e      	ldr	r0, [pc, #56]	; (15060 <ll_apto_set+0x40>)
   15028:	460d      	mov	r5, r1
   1502a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1502e:	f7fa fc43 	bl	f8b8 <mem_get>
   15032:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   15034:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   15036:	b970      	cbnz	r0, 15056 <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   15038:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
   1503a:	f240 44e2 	movw	r4, #1250	; 0x4e2
   1503e:	fb04 f403 	mul.w	r4, r4, r3
   15042:	f242 7310 	movw	r3, #10000	; 0x2710
   15046:	fb03 4305 	mla	r3, r3, r5, r4
   1504a:	3b01      	subs	r3, #1
   1504c:	fbb3 f3f4 	udiv	r3, r3, r4
   15050:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
}
   15054:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15056:	2002      	movs	r0, #2
}
   15058:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1505a:	2002      	movs	r0, #2
}
   1505c:	4770      	bx	lr
   1505e:	bf00      	nop
   15060:	20003490 	.word	0x20003490

00015064 <ull_conn_init>:
	err = init_reset();
   15064:	f7ff b9d4 	b.w	14410 <init_reset>

00015068 <ull_conn_reset>:
{
   15068:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1506a:	2200      	movs	r2, #0
   1506c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   15070:	4813      	ldr	r0, [pc, #76]	; (150c0 <ull_conn_reset+0x58>)
   15072:	f7fa fc21 	bl	f8b8 <mem_get>
   15076:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   15078:	f100 021c 	add.w	r2, r0, #28
   1507c:	4601      	mov	r1, r0
   1507e:	2003      	movs	r0, #3
   15080:	f7fe fbfc 	bl	1387c <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   15084:	b108      	cbz	r0, 1508a <ull_conn_reset+0x22>
   15086:	3045      	adds	r0, #69	; 0x45
   15088:	d10b      	bne.n	150a2 <ull_conn_reset+0x3a>
	MFIFO_INIT(conn_tx);
   1508a:	480e      	ldr	r0, [pc, #56]	; (150c4 <ull_conn_reset+0x5c>)
	MFIFO_INIT(conn_ack);
   1508c:	490e      	ldr	r1, [pc, #56]	; (150c8 <ull_conn_reset+0x60>)
	conn_upd_curr = NULL;
   1508e:	4a0f      	ldr	r2, [pc, #60]	; (150cc <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   15090:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   15092:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   15094:	804b      	strh	r3, [r1, #2]
	conn->lll.link_tx_free = NULL;
   15096:	67a3      	str	r3, [r4, #120]	; 0x78
}
   15098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   1509c:	6013      	str	r3, [r2, #0]
	err = init_reset();
   1509e:	f7ff b9b7 	b.w	14410 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   150a2:	4a0b      	ldr	r2, [pc, #44]	; (150d0 <ull_conn_reset+0x68>)
   150a4:	490b      	ldr	r1, [pc, #44]	; (150d4 <ull_conn_reset+0x6c>)
   150a6:	480c      	ldr	r0, [pc, #48]	; (150d8 <ull_conn_reset+0x70>)
   150a8:	f240 639c 	movw	r3, #1692	; 0x69c
   150ac:	f009 ffd2 	bl	1f054 <printk>
   150b0:	4040      	eors	r0, r0
   150b2:	f380 8811 	msr	BASEPRI, r0
   150b6:	f04f 0003 	mov.w	r0, #3
   150ba:	df02      	svc	2
   150bc:	e7e5      	b.n	1508a <ull_conn_reset+0x22>
   150be:	bf00      	nop
   150c0:	20003490 	.word	0x20003490
   150c4:	20000560 	.word	0x20000560
   150c8:	2000051c 	.word	0x2000051c
   150cc:	20003658 	.word	0x20003658
   150d0:	00025ad4 	.word	0x00025ad4
   150d4:	00025ba0 	.word	0x00025ba0
   150d8:	0002561c 	.word	0x0002561c

000150dc <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   150dc:	4b01      	ldr	r3, [pc, #4]	; (150e4 <ull_conn_default_tx_octets_get+0x8>)
}
   150de:	8818      	ldrh	r0, [r3, #0]
   150e0:	4770      	bx	lr
   150e2:	bf00      	nop
   150e4:	200042ac 	.word	0x200042ac

000150e8 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   150e8:	4b01      	ldr	r3, [pc, #4]	; (150f0 <ull_conn_default_tx_time_get+0x8>)
}
   150ea:	8818      	ldrh	r0, [r3, #0]
   150ec:	4770      	bx	lr
   150ee:	bf00      	nop
   150f0:	200042ae 	.word	0x200042ae

000150f4 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   150f4:	4b01      	ldr	r3, [pc, #4]	; (150fc <ull_conn_default_phy_tx_get+0x8>)
}
   150f6:	7818      	ldrb	r0, [r3, #0]
   150f8:	4770      	bx	lr
   150fa:	bf00      	nop
   150fc:	2000683f 	.word	0x2000683f

00015100 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   15100:	4b01      	ldr	r3, [pc, #4]	; (15108 <ull_conn_default_phy_rx_get+0x8>)
}
   15102:	7818      	ldrb	r0, [r3, #0]
   15104:	4770      	bx	lr
   15106:	bf00      	nop
   15108:	2000683e 	.word	0x2000683e

0001510c <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   1510c:	688b      	ldr	r3, [r1, #8]
   1510e:	689b      	ldr	r3, [r3, #8]
{
   15110:	b510      	push	{r4, lr}
	switch (lll->role) {
   15112:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   15116:	09e4      	lsrs	r4, r4, #7
   15118:	d10d      	bne.n	15136 <ull_conn_setup+0x2a>
		LL_ASSERT(0);
   1511a:	4a0a      	ldr	r2, [pc, #40]	; (15144 <ull_conn_setup+0x38>)
   1511c:	490a      	ldr	r1, [pc, #40]	; (15148 <ull_conn_setup+0x3c>)
   1511e:	480b      	ldr	r0, [pc, #44]	; (1514c <ull_conn_setup+0x40>)
   15120:	f240 23fa 	movw	r3, #762	; 0x2fa
   15124:	f009 ff96 	bl	1f054 <printk>
   15128:	4040      	eors	r0, r0
   1512a:	f380 8811 	msr	BASEPRI, r0
   1512e:	f04f 0003 	mov.w	r0, #3
   15132:	df02      	svc	2
}
   15134:	bd10      	pop	{r4, pc}
		ull_slave_setup(link, rx, ftr, lll);
   15136:	460a      	mov	r2, r1
}
   15138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
   1513c:	3208      	adds	r2, #8
   1513e:	f7ed bcc3 	b.w	2ac8 <ull_slave_setup>
   15142:	bf00      	nop
   15144:	00025ad4 	.word	0x00025ad4
   15148:	0002568c 	.word	0x0002568c
   1514c:	0002561c 	.word	0x0002561c

00015150 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   15150:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   15152:	88da      	ldrh	r2, [r3, #6]
   15154:	2a00      	cmp	r2, #0
   15156:	d15e      	bne.n	15216 <ull_conn_rx+0xc6>
{
   15158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1515c:	460d      	mov	r5, r1
   1515e:	b085      	sub	sp, #20
   15160:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15162:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   15166:	48b2      	ldr	r0, [pc, #712]	; (15430 <ull_conn_rx+0x2e0>)
   15168:	f7fa fba6 	bl	f8b8 <mem_get>
	if (conn->lll.handle != handle) {
   1516c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1516e:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   15170:	2b00      	cmp	r3, #0
   15172:	f040 8091 	bne.w	15298 <ull_conn_rx+0x148>
	pdu_rx = (void *)(*rx)->pdu;
   15176:	6828      	ldr	r0, [r5, #0]
   15178:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
	switch (pdu_rx->ll_id) {
   1517c:	7f02      	ldrb	r2, [r0, #28]
   1517e:	f002 0203 	and.w	r2, r2, #3
   15182:	2a03      	cmp	r2, #3
	pdu_rx = (void *)(*rx)->pdu;
   15184:	4606      	mov	r6, r0
	switch (pdu_rx->ll_id) {
   15186:	f001 0c01 	and.w	ip, r1, #1
   1518a:	d12b      	bne.n	151e4 <ull_conn_rx+0x94>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   1518c:	f890 a01f 	ldrb.w	sl, [r0, #31]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   15190:	f1bc 0f00 	cmp.w	ip, #0
   15194:	f000 8087 	beq.w	152a6 <ull_conn_rx+0x156>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   15198:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1519c:	2b00      	cmp	r3, #0
   1519e:	f001 0204 	and.w	r2, r1, #4
   151a2:	f2c0 8639 	blt.w	15e18 <ull_conn_rx+0xcc8>
	return (!conn->lll.role &&
   151a6:	2a00      	cmp	r2, #0
   151a8:	f040 80e4 	bne.w	15374 <ull_conn_rx+0x224>
		((!conn->llcp_enc.refresh &&
   151ac:	f1ba 0f02 	cmp.w	sl, #2
   151b0:	f000 8331 	beq.w	15816 <ull_conn_rx+0x6c6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   151b4:	f1ba 0f05 	cmp.w	sl, #5
   151b8:	f000 856a 	beq.w	15c90 <ull_conn_rx+0xb40>
   151bc:	f1ba 0f06 	cmp.w	sl, #6
   151c0:	f000 86a7 	beq.w	15f12 <ull_conn_rx+0xdc2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   151c4:	f1ba 0f0d 	cmp.w	sl, #13
   151c8:	f000 84c9 	beq.w	15b5e <ull_conn_rx+0xa0e>
   151cc:	f1ba 0f11 	cmp.w	sl, #17
   151d0:	f000 837b 	beq.w	158ca <ull_conn_rx+0x77a>
		conn->llcp_terminate.reason_peer =
   151d4:	233d      	movs	r3, #61	; 0x3d
   151d6:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   151da:	682b      	ldr	r3, [r5, #0]
   151dc:	2203      	movs	r2, #3
   151de:	711a      	strb	r2, [r3, #4]

		return 0;
   151e0:	2000      	movs	r0, #0
   151e2:	e00a      	b.n	151fa <ull_conn_rx+0xaa>
	switch (pdu_rx->ll_id) {
   151e4:	b962      	cbnz	r2, 15200 <ull_conn_rx+0xb0>
		if (conn->llcp_enc.pause_rx) {
   151e6:	f1bc 0f00 	cmp.w	ip, #0
   151ea:	d003      	beq.n	151f4 <ull_conn_rx+0xa4>
			conn->llcp_terminate.reason_peer =
   151ec:	233d      	movs	r3, #61	; 0x3d
   151ee:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
   151f2:	6828      	ldr	r0, [r5, #0]
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   151f4:	2303      	movs	r3, #3
   151f6:	7103      	strb	r3, [r0, #4]
	return 0;
   151f8:	2000      	movs	r0, #0
}
   151fa:	b005      	add	sp, #20
   151fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   15200:	f1bc 0f00 	cmp.w	ip, #0
   15204:	d0f8      	beq.n	151f8 <ull_conn_rx+0xa8>
			conn->llcp_terminate.reason_peer =
   15206:	223d      	movs	r2, #61	; 0x3d
   15208:	f884 212f 	strb.w	r2, [r4, #303]	; 0x12f
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1520c:	682a      	ldr	r2, [r5, #0]
   1520e:	2103      	movs	r1, #3
	return 0;
   15210:	4618      	mov	r0, r3
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15212:	7111      	strb	r1, [r2, #4]
   15214:	e7f1      	b.n	151fa <ull_conn_rx+0xaa>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15216:	2203      	movs	r2, #3
   15218:	711a      	strb	r2, [r3, #4]
		return 0;
   1521a:	2000      	movs	r0, #0
}
   1521c:	4770      	bx	lr
			} else {
				struct pdu_data_llctrl *c = &pdu_rx->llctrl;
				struct pdu_data_llctrl_phy_req *p =
					&c->phy_req;

				conn->llcp_phy.state =
   1521e:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
					LLCP_PHY_STATE_UPD;

				if (conn->llcp_phy.ack ==
   15222:	428b      	cmp	r3, r1
				conn->llcp_phy.state =
   15224:	f042 0203 	orr.w	r2, r2, #3
   15228:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
				if (conn->llcp_phy.ack ==
   1522c:	d10f      	bne.n	1524e <ull_conn_rx+0xfe>
				    conn->llcp_phy.req) {
					conn->llcp_phy.ack--;

					conn->llcp_phy.cmd = 0U;

					conn->llcp_phy.tx =
   1522e:	f8b4 21aa 	ldrh.w	r2, [r4, #426]	; 0x1aa
   15232:	4980      	ldr	r1, [pc, #512]	; (15434 <ull_conn_rx+0x2e4>)
						conn->phy_pref_tx;
					conn->llcp_phy.rx =
						conn->phy_pref_rx;
   15234:	f894 01ac 	ldrb.w	r0, [r4, #428]	; 0x1ac
					conn->llcp_phy.tx =
   15238:	4011      	ands	r1, r2
   1523a:	f240 42fc 	movw	r2, #1276	; 0x4fc
   1523e:	ea02 0280 	and.w	r2, r2, r0, lsl #2
					conn->llcp_phy.ack--;
   15242:	3b01      	subs	r3, #1
					conn->llcp_phy.tx =
   15244:	430a      	orrs	r2, r1
					conn->llcp_phy.ack--;
   15246:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
					conn->llcp_phy.tx =
   1524a:	f8a4 21aa 	strh.w	r2, [r4, #426]	; 0x1aa
				}

				conn->llcp_phy.tx &= p->rx_phys;
				conn->llcp_phy.rx &= p->tx_phys;
   1524e:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
				conn->llcp_phy.tx &= p->rx_phys;
   15252:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
				conn->llcp_phy.rx &= p->tx_phys;
   15256:	f896 1020 	ldrb.w	r1, [r6, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   1525a:	f3c2 0082 	ubfx	r0, r2, #2, #3
   1525e:	4003      	ands	r3, r0
				conn->llcp_phy.rx &= p->tx_phys;
   15260:	ea01 1152 	and.w	r1, r1, r2, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   15264:	009b      	lsls	r3, r3, #2
   15266:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   1526a:	f002 0203 	and.w	r2, r2, #3
   1526e:	4313      	orrs	r3, r2

				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   15270:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   15274:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   15278:	d002      	beq.n	15280 <ull_conn_rx+0x130>
   1527a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1527e:	d105      	bne.n	1528c <ull_conn_rx+0x13c>
					conn->llcp_phy.tx = 0;
   15280:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
   15284:	f003 0303 	and.w	r3, r3, #3
   15288:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
					conn->llcp_phy.rx = 0;
				}

				/* pause data packet tx */
				conn->llcp_phy.pause_tx = 1U;
   1528c:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   15290:	f043 0301 	orr.w	r3, r3, #1
   15294:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab

				/* Mark for buffer for release */
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15298:	682b      	ldr	r3, [r5, #0]
   1529a:	2203      	movs	r2, #3
	int nack = 0;
   1529c:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1529e:	711a      	strb	r2, [r3, #4]
}
   152a0:	b005      	add	sp, #20
   152a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pdu_rx = (void *)(*rx)->pdu;
   152a6:	f100 021c 	add.w	r2, r0, #28
	switch (opcode) {
   152aa:	f1ba 0f19 	cmp.w	sl, #25
   152ae:	d81f      	bhi.n	152f0 <ull_conn_rx+0x1a0>
   152b0:	e8df f01a 	tbh	[pc, sl, lsl #1]
   152b4:	02bd00c4 	.word	0x02bd00c4
   152b8:	049e02b1 	.word	0x049e02b1
   152bc:	04e904e2 	.word	0x04e904e2
   152c0:	027b0508 	.word	0x027b0508
   152c4:	0236026b 	.word	0x0236026b
   152c8:	052201e8 	.word	0x052201e8
   152cc:	04550425 	.word	0x04550425
   152d0:	03d103e6 	.word	0x03d103e6
   152d4:	030b0340 	.word	0x030b0340
   152d8:	03ec02f2 	.word	0x03ec02f2
   152dc:	00880088 	.word	0x00880088
   152e0:	01ab03f8 	.word	0x01ab03f8
   152e4:	01330168 	.word	0x01330168
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   152e8:	7f43      	ldrb	r3, [r0, #29]
   152ea:	2b01      	cmp	r3, #1
   152ec:	f000 850d 	beq.w	15d0a <ull_conn_rx+0xbba>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   152f0:	4851      	ldr	r0, [pc, #324]	; (15438 <ull_conn_rx+0x2e8>)
   152f2:	f7fa faaf 	bl	f854 <mem_acquire>
	if (!tx) {
   152f6:	2800      	cmp	r0, #0
   152f8:	f000 86dc 	beq.w	160b4 <ull_conn_rx+0xf64>
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   152fc:	2302      	movs	r3, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   152fe:	7902      	ldrb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   15300:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   15302:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu->llctrl.unknown_rsp.type = type;
   15306:	f880 a008 	strb.w	sl, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1530a:	f042 0203 	orr.w	r2, r2, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   1530e:	2107      	movs	r1, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   15310:	7102      	strb	r2, [r0, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   15312:	71c1      	strb	r1, [r0, #7]
	if (
   15314:	b303      	cbz	r3, 15358 <ull_conn_rx+0x208>
	    !conn->llcp_enc.pause_tx &&
   15316:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
   1531a:	0791      	lsls	r1, r2, #30
   1531c:	d41c      	bmi.n	15358 <ull_conn_rx+0x208>
	    !conn->llcp_phy.pause_tx &&
   1531e:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
   15322:	07d2      	lsls	r2, r2, #31
   15324:	d418      	bmi.n	15358 <ull_conn_rx+0x208>
		if (conn->tx_head == conn->tx_data) {
   15326:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
   1532a:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   1532c:	bf04      	itt	eq
   1532e:	681a      	ldreq	r2, [r3, #0]
   15330:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   15334:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   15338:	b99a      	cbnz	r2, 15362 <ull_conn_rx+0x212>
			tx->next = conn->tx_head->next;
   1533a:	681a      	ldr	r2, [r3, #0]
   1533c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1533e:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   15340:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   15342:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
	if (!tx->next) {
   15346:	2b00      	cmp	r3, #0
   15348:	f000 8590 	beq.w	15e6c <ull_conn_rx+0xd1c>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1534c:	2303      	movs	r3, #3
	return 0;
   1534e:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15350:	7133      	strb	r3, [r6, #4]
}
   15352:	b005      	add	sp, #20
   15354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!conn->tx_ctrl) {
   15358:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   1535c:	2a00      	cmp	r2, #0
   1535e:	f000 8589 	beq.w	15e74 <ull_conn_rx+0xd24>
	tx->next = conn->tx_ctrl_last->next;
   15362:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   15366:	681a      	ldr	r2, [r3, #0]
   15368:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1536a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1536c:	6803      	ldr	r3, [r0, #0]
   1536e:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
}
   15372:	e7e8      	b.n	15346 <ull_conn_rx+0x1f6>
		 (conn->llcp_enc.refresh &&
   15374:	f1ba 0f02 	cmp.w	sl, #2
   15378:	f000 824d 	beq.w	15816 <ull_conn_rx+0x6c6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1537c:	f1ba 0f0b 	cmp.w	sl, #11
   15380:	f000 857f 	beq.w	15e82 <ull_conn_rx+0xd32>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   15384:	f1ba 0f04 	cmp.w	sl, #4
   15388:	f47f af14 	bne.w	151b4 <ull_conn_rx+0x64>
		if (conn->lll.role ||
   1538c:	7f73      	ldrb	r3, [r6, #29]
   1538e:	2b0d      	cmp	r3, #13
   15390:	d1ae      	bne.n	152f0 <ull_conn_rx+0x1a0>
		memcpy(&conn->llcp.encryption.skd[8],
   15392:	2208      	movs	r2, #8
   15394:	f106 0120 	add.w	r1, r6, #32
   15398:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
   1539c:	f00c f983 	bl	216a6 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   153a0:	f106 0128 	add.w	r1, r6, #40	; 0x28
   153a4:	2204      	movs	r2, #4
   153a6:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   153aa:	f00c f97c 	bl	216a6 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   153ae:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   153b2:	682a      	ldr	r2, [r5, #0]
		conn->llcp_enc.pause_rx = 1U;
   153b4:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   153b8:	2103      	movs	r1, #3
		conn->llcp_enc.pause_rx = 1U;
   153ba:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	int nack = 0;
   153be:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   153c0:	7111      	strb	r1, [r2, #4]
		break;
   153c2:	e71a      	b.n	151fa <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   153c4:	7f43      	ldrb	r3, [r0, #29]
   153c6:	2b09      	cmp	r3, #9
   153c8:	d192      	bne.n	152f0 <ull_conn_rx+0x1a0>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   153ca:	f1ba 0f14 	cmp.w	sl, #20
   153ce:	f000 85b2 	beq.w	15f36 <ull_conn_rx+0xde6>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   153d2:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
	if (/* Local idle, and Peer request then complete the Peer procedure
   153d6:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
	eff_rx_octets = conn->lll.max_rx_octets;
   153da:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
   153de:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   153e0:	428a      	cmp	r2, r1
	eff_tx_octets = conn->lll.max_tx_octets;
   153e2:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   153e6:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   153ea:	f8b4 9060 	ldrh.w	r9, [r4, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   153ee:	9100      	str	r1, [sp, #0]
	eff_tx_octets = conn->lll.max_tx_octets;
   153f0:	9302      	str	r3, [sp, #8]
	if (/* Local idle, and Peer request then complete the Peer procedure
   153f2:	f001 822b 	beq.w	1684c <ull_conn_rx+0x16fc>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   153f6:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
	struct node_tx *tx = NULL;
   153fa:	2100      	movs	r1, #0
	       tx) ||
   153fc:	f002 0207 	and.w	r2, r2, #7
   15400:	2a02      	cmp	r2, #2
   15402:	f000 85b1 	beq.w	15f68 <ull_conn_rx+0xe18>
   15406:	f896 a01f 	ldrb.w	sl, [r6, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   1540a:	f1ba 0f15 	cmp.w	sl, #21
   1540e:	f43f aef3 	beq.w	151f8 <ull_conn_rx+0xa8>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   15412:	4608      	mov	r0, r1
   15414:	4908      	ldr	r1, [pc, #32]	; (15438 <ull_conn_rx+0x2e8>)
   15416:	f7fa fa37 	bl	f888 <mem_release>
			if (conn->llcp_length.state ==
   1541a:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
   1541e:	f003 0307 	and.w	r3, r3, #7
   15422:	2b04      	cmp	r3, #4
   15424:	f47f aee8 	bne.w	151f8 <ull_conn_rx+0xa8>
				return -EBUSY;
   15428:	f06f 000f 	mvn.w	r0, #15
   1542c:	e6e5      	b.n	151fa <ull_conn_rx+0xaa>
   1542e:	bf00      	nop
   15430:	20003490 	.word	0x20003490
   15434:	fffffb03 	.word	0xfffffb03
   15438:	200036dc 	.word	0x200036dc
		if (!conn->lll.role ||
   1543c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15440:	2b00      	cmp	r3, #0
   15442:	f6bf af55 	bge.w	152f0 <ull_conn_rx+0x1a0>
   15446:	7f43      	ldrb	r3, [r0, #29]
   15448:	2b0c      	cmp	r3, #12
   1544a:	f47f af51 	bne.w	152f0 <ull_conn_rx+0x1a0>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   1544e:	f8b0 0029 	ldrh.w	r0, [r0, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   15452:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   15454:	1ac3      	subs	r3, r0, r3
   15456:	041b      	lsls	r3, r3, #16
   15458:	f101 808c 	bmi.w	16574 <ull_conn_rx+0x1424>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1545c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15460:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   15464:	1a9b      	subs	r3, r3, r2
   15466:	f003 0303 	and.w	r3, r3, #3
   1546a:	2b02      	cmp	r3, #2
   1546c:	f001 80b5 	beq.w	165da <ull_conn_rx+0x148a>
	if (!conn_upd_curr) {
   15470:	4be1      	ldr	r3, [pc, #900]	; (157f8 <ull_conn_rx+0x6a8>)
   15472:	681a      	ldr	r2, [r3, #0]
   15474:	2a00      	cmp	r2, #0
   15476:	f001 8100 	beq.w	1667a <ull_conn_rx+0x152a>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   1547a:	f896 3020 	ldrb.w	r3, [r6, #32]
   1547e:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   15482:	f8b6 1021 	ldrh.w	r1, [r6, #33]	; 0x21
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   15486:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   1548a:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1548e:	fb02 f201 	mul.w	r2, r2, r1
	conn->llcp_cu.win_offset_us =
   15492:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   15496:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
   1549a:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   1549e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.interval =
   154a2:	f8a4 2108 	strh.w	r2, [r4, #264]	; 0x108
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   154a6:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
   154aa:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
   154ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.latency =
   154b2:	f8a4 210a 	strh.w	r2, [r4, #266]	; 0x10a
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   154b6:	f896 1027 	ldrb.w	r1, [r6, #39]	; 0x27
	conn->llcp_cu.ack--;
   154ba:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   154be:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   154c2:	f8a4 00ec 	strh.w	r0, [r4, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   154c6:	f023 0307 	bic.w	r3, r3, #7
	link->mem = conn->llcp_rx;
   154ca:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   154ce:	f043 0304 	orr.w	r3, r3, #4
	conn->llcp_cu.ack--;
   154d2:	3a01      	subs	r2, #1
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   154d4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	conn->llcp_cu.ack--;
   154d8:	f884 2105 	strb.w	r2, [r4, #261]	; 0x105
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   154dc:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
	conn->llcp_cu.timeout =
   154e0:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
	link->mem = conn->llcp_rx;
   154e4:	6078      	str	r0, [r7, #4]
	(*rx)->hdr.link = link;
   154e6:	682b      	ldr	r3, [r5, #0]
   154e8:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   154ea:	682b      	ldr	r3, [r5, #0]
   154ec:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	*rx = NULL;
   154f0:	2300      	movs	r3, #0
   154f2:	602b      	str	r3, [r5, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   154f4:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
   154f8:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
   154fc:	4293      	cmp	r3, r2
   154fe:	d007      	beq.n	15510 <ull_conn_rx+0x3c0>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   15500:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   15504:	f003 0307 	and.w	r3, r3, #7
   15508:	2b04      	cmp	r3, #4
   1550a:	d101      	bne.n	15510 <ull_conn_rx+0x3c0>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1550c:	f884 2171 	strb.w	r2, [r4, #369]	; 0x171
		conn->procedure_expire = 0U;
   15510:	2300      	movs	r3, #0
   15512:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   15516:	4618      	mov	r0, r3
		break;
   15518:	e66f      	b.n	151fa <ull_conn_rx+0xaa>
	break;
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   1551a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1551e:	2b00      	cmp	r3, #0
   15520:	f6ff aee6 	blt.w	152f0 <ull_conn_rx+0x1a0>
   15524:	7f47      	ldrb	r7, [r0, #29]
   15526:	2f03      	cmp	r7, #3
   15528:	f47f aee2 	bne.w	152f0 <ull_conn_rx+0x1a0>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   1552c:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
					 conn->lll.phy_rx))) {
   15530:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
			if (!(p->phys & (conn->lll.phy_tx |
   15534:	f890 2020 	ldrb.w	r2, [r0, #32]
   15538:	430b      	orrs	r3, r1
   1553a:	f003 0307 	and.w	r3, r3, #7
   1553e:	4213      	tst	r3, r2
   15540:	f43f ae5a 	beq.w	151f8 <ull_conn_rx+0xa8>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   15544:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15548:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   1554c:	1a9b      	subs	r3, r3, r2
   1554e:	f003 0303 	and.w	r3, r3, #3
   15552:	2b02      	cmp	r3, #2
   15554:	f43f ae50 	beq.w	151f8 <ull_conn_rx+0xa8>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   15558:	f104 00ed 	add.w	r0, r4, #237	; 0xed
   1555c:	f002 f968 	bl	17830 <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   15560:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.chan_map.initiate = 1U;
   15564:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			conn->llcp_ack -= 2U;
   15568:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   1556a:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   1556c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp_type = LLCP_CHAN_MAP;
   15570:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15574:	682a      	ldr	r2, [r5, #0]
			conn->llcp.chan_map.initiate = 1U;
   15576:	f043 0301 	orr.w	r3, r3, #1
   1557a:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	int nack = 0;
   1557e:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15580:	7117      	strb	r7, [r2, #4]

		break;
   15582:	e63a      	b.n	151fa <ull_conn_rx+0xaa>
		if (!conn->lll.role ||
   15584:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15588:	2b00      	cmp	r3, #0
   1558a:	f6bf aeb1 	bge.w	152f0 <ull_conn_rx+0x1a0>
   1558e:	7f43      	ldrb	r3, [r0, #29]
   15590:	2b05      	cmp	r3, #5
   15592:	f47f aead 	bne.w	152f0 <ull_conn_rx+0x1a0>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   15596:	f890 1020 	ldrb.w	r1, [r0, #32]
   1559a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   1559e:	ea41 0003 	orr.w	r0, r1, r3
   155a2:	f010 0007 	ands.w	r0, r0, #7
   155a6:	f040 8722 	bne.w	163ee <ull_conn_rx+0x129e>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   155aa:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   155ae:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   155b2:	428b      	cmp	r3, r1
   155b4:	f43f aeca 	beq.w	1534c <ull_conn_rx+0x1fc>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   155b8:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   155bc:	f003 0303 	and.w	r3, r3, #3
   155c0:	2b02      	cmp	r3, #2
   155c2:	f47f aec3 	bne.w	1534c <ull_conn_rx+0x1fc>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   155c6:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   155ca:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
   155ce:	f884 11a9 	strb.w	r1, [r4, #425]	; 0x1a9
		conn->llcp_phy.pause_tx = 0U;
   155d2:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   155d6:	4611      	mov	r1, r2
   155d8:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   155dc:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		if (!conn->llcp_phy.cmd) {
   155e0:	f013 0304 	ands.w	r3, r3, #4
		conn->procedure_expire = 0U;
   155e4:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   155e8:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
   155ec:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   155f0:	f43f ae0c 	beq.w	1520c <ull_conn_rx+0xbc>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   155f4:	682b      	ldr	r3, [r5, #0]
   155f6:	2117      	movs	r1, #23
   155f8:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
   155fa:	7730      	strb	r0, [r6, #28]
		p->tx = conn->lll.phy_tx;
   155fc:	7772      	strb	r2, [r6, #29]
		p->rx = conn->lll.phy_rx;
   155fe:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   15602:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15606:	77b3      	strb	r3, [r6, #30]
		if (err) {
   15608:	e5f7      	b.n	151fa <ull_conn_rx+0xaa>
		if (conn->lll.role ||
   1560a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1560e:	2b00      	cmp	r3, #0
   15610:	f6ff ae6e 	blt.w	152f0 <ull_conn_rx+0x1a0>
   15614:	7f43      	ldrb	r3, [r0, #29]
   15616:	2b03      	cmp	r3, #3
   15618:	f47f ae6a 	bne.w	152f0 <ull_conn_rx+0x1a0>
		if (!conn->lll.role &&
   1561c:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
   15620:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   15624:	429a      	cmp	r2, r3
   15626:	f43f ae91 	beq.w	1534c <ull_conn_rx+0x1fc>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   1562a:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1562e:	f001 0303 	and.w	r3, r1, #3
   15632:	2b02      	cmp	r3, #2
   15634:	f47f ae8a 	bne.w	1534c <ull_conn_rx+0x1fc>
			conn->llcp_phy.tx &= p->rx_phys;
   15638:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
			conn->llcp_phy.rx &= p->tx_phys;
   1563c:	f890 2020 	ldrb.w	r2, [r0, #32]
			conn->llcp_phy.tx &= p->rx_phys;
   15640:	f3c1 0082 	ubfx	r0, r1, #2, #3
   15644:	4003      	ands	r3, r0
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   15646:	009b      	lsls	r3, r3, #2
   15648:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   1564c:	ea02 1251 	and.w	r2, r2, r1, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   15650:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   15654:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   15658:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1565c:	d002      	beq.n	15664 <ull_conn_rx+0x514>
   1565e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   15662:	d105      	bne.n	15670 <ull_conn_rx+0x520>
				conn->llcp_phy.tx = 0;
   15664:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
   15668:	f003 0303 	and.w	r3, r3, #3
   1566c:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
			conn->llcp_phy.pause_tx = 1U;
   15670:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
			conn->procedure_expire = 0U;
   15674:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   15676:	f043 0301 	orr.w	r3, r3, #1
   1567a:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
			conn->procedure_expire = 0U;
   1567e:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15682:	e663      	b.n	1534c <ull_conn_rx+0x1fc>
		if (!conn->lll.role ||
   15684:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15688:	2b00      	cmp	r3, #0
   1568a:	f6bf ae31 	bge.w	152f0 <ull_conn_rx+0x1a0>
   1568e:	7f45      	ldrb	r5, [r0, #29]
   15690:	2d01      	cmp	r5, #1
   15692:	f47f ae2d 	bne.w	152f0 <ull_conn_rx+0x1a0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15696:	4859      	ldr	r0, [pc, #356]	; (157fc <ull_conn_rx+0x6ac>)
   15698:	f7fa f8dc 	bl	f854 <mem_acquire>
		if (!tx) {
   1569c:	4603      	mov	r3, r0
   1569e:	2800      	cmp	r0, #0
   156a0:	f000 8508 	beq.w	160b4 <ull_conn_rx+0xf64>
	conn->llcp_enc.pause_rx = 1U;
   156a4:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
   156a8:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   156ac:	f022 0205 	bic.w	r2, r2, #5
	conn->lll.enc_rx = 0;
   156b0:	f36f 01c3 	bfc	r1, #3, #1
   156b4:	f884 107e 	strb.w	r1, [r4, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   156b8:	f042 0205 	orr.w	r2, r2, #5
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   156bc:	7901      	ldrb	r1, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   156be:	f884 2152 	strb.w	r2, [r4, #338]	; 0x152
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   156c2:	7145      	strb	r5, [r0, #5]
	    conn->tx_head &&
   156c4:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   156c8:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   156cc:	200b      	movs	r0, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   156ce:	7119      	strb	r1, [r3, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   156d0:	71d8      	strb	r0, [r3, #7]
	if (
   156d2:	2a00      	cmp	r2, #0
   156d4:	f000 8423 	beq.w	15f1e <ull_conn_rx+0xdce>
	    !conn->llcp_enc.pause_tx &&
   156d8:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
	    conn->tx_head &&
   156dc:	0788      	lsls	r0, r1, #30
   156de:	f100 841e 	bmi.w	15f1e <ull_conn_rx+0xdce>
	    !conn->llcp_phy.pause_tx &&
   156e2:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
   156e6:	07c9      	lsls	r1, r1, #31
   156e8:	f100 8419 	bmi.w	15f1e <ull_conn_rx+0xdce>
		if (conn->tx_head == conn->tx_data) {
   156ec:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   156f0:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   156f2:	bf04      	itt	eq
   156f4:	6811      	ldreq	r1, [r2, #0]
   156f6:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   156fa:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   156fe:	2900      	cmp	r1, #0
   15700:	f001 80e4 	beq.w	168cc <ull_conn_rx+0x177c>
	tx->next = conn->tx_ctrl_last->next;
   15704:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
   15708:	6811      	ldr	r1, [r2, #0]
   1570a:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   1570c:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
   1570e:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
	if (!tx->next) {
   15712:	681a      	ldr	r2, [r3, #0]
   15714:	2a00      	cmp	r2, #0
   15716:	f47f ae19 	bne.w	1534c <ull_conn_rx+0x1fc>
		conn->tx_data_last = tx;
   1571a:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
   1571e:	e615      	b.n	1534c <ull_conn_rx+0x1fc>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   15720:	7f43      	ldrb	r3, [r0, #29]
   15722:	2b09      	cmp	r3, #9
   15724:	f47f ade4 	bne.w	152f0 <ull_conn_rx+0x1a0>
	       (features[1] << 8) | (features[2] << 16);
   15728:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   1572c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   15730:	f896 2020 	ldrb.w	r2, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   15734:	4932      	ldr	r1, [pc, #200]	; (15800 <ull_conn_rx+0x6b0>)
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   15736:	4d33      	ldr	r5, [pc, #204]	; (15804 <ull_conn_rx+0x6b4>)
	       (features[1] << 8) | (features[2] << 16);
   15738:	041b      	lsls	r3, r3, #16
   1573a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1573e:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   15740:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
   15744:	430b      	orrs	r3, r1
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   15746:	4013      	ands	r3, r2
   15748:	f3c3 0310 	ubfx	r3, r3, #0, #17
   1574c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
   15750:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   15754:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   15758:	f896 2020 	ldrb.w	r2, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   1575c:	041b      	lsls	r3, r3, #16
   1575e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   15762:	4313      	orrs	r3, r2
	conn->common.fex_valid = 1U;
   15764:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
	conn->llcp_feature.ack = conn->llcp_feature.req;
   15768:	f894 0118 	ldrb.w	r0, [r4, #280]	; 0x118
   1576c:	f884 0119 	strb.w	r0, [r4, #281]	; 0x119
	       (features[1] << 8) | (features[2] << 16);
   15770:	430b      	orrs	r3, r1
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   15772:	401d      	ands	r5, r3
	conn->common.fex_valid = 1U;
   15774:	f042 0201 	orr.w	r2, r2, #1
	conn->procedure_expire = 0U;
   15778:	2300      	movs	r3, #0
	conn->llcp_feature.features_peer =
   1577a:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
	conn->common.fex_valid = 1U;
   1577e:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
	conn->procedure_expire = 0U;
   15782:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   15786:	4618      	mov	r0, r3
}
   15788:	e537      	b.n	151fa <ull_conn_rx+0xaa>
		if (!conn->lll.role ||
   1578a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1578e:	2b00      	cmp	r3, #0
   15790:	f6bf adae 	bge.w	152f0 <ull_conn_rx+0x1a0>
		if (conn->lll.role ||
   15794:	7f73      	ldrb	r3, [r6, #29]
   15796:	2b09      	cmp	r3, #9
   15798:	f47f adaa 	bne.w	152f0 <ull_conn_rx+0x1a0>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   1579c:	1d31      	adds	r1, r6, #4
   1579e:	4620      	mov	r0, r4
}
   157a0:	b005      	add	sp, #20
   157a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   157a6:	f7ff b92f 	b.w	14a08 <feature_rsp_send.isra.0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   157aa:	7f73      	ldrb	r3, [r6, #29]
   157ac:	2b02      	cmp	r3, #2
   157ae:	f47f ad9f 	bne.w	152f0 <ull_conn_rx+0x1a0>
		} else if ((conn->llcp_conn_param.ack !=
   157b2:	f894 1171 	ldrb.w	r1, [r4, #369]	; 0x171
   157b6:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   157ba:	f896 2020 	ldrb.w	r2, [r6, #32]
   157be:	4299      	cmp	r1, r3
   157c0:	d002      	beq.n	157c8 <ull_conn_rx+0x678>
			    conn->llcp_conn_param.req) &&
   157c2:	2a0f      	cmp	r2, #15
   157c4:	f000 8512 	beq.w	161ec <ull_conn_rx+0x109c>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   157c8:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
   157cc:	f894 1199 	ldrb.w	r1, [r4, #409]	; 0x199
   157d0:	4299      	cmp	r1, r3
   157d2:	d002      	beq.n	157da <ull_conn_rx+0x68a>
   157d4:	2a14      	cmp	r2, #20
   157d6:	f000 86b9 	beq.w	1654c <ull_conn_rx+0x13fc>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   157da:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   157de:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   157e2:	428b      	cmp	r3, r1
   157e4:	d002      	beq.n	157ec <ull_conn_rx+0x69c>
   157e6:	2a16      	cmp	r2, #22
   157e8:	f000 86fb 	beq.w	165e2 <ull_conn_rx+0x1492>
			switch (llctrl->unknown_rsp.type) {
   157ec:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   157ee:	bf04      	itt	eq
   157f0:	2303      	moveq	r3, #3
   157f2:	7133      	strbeq	r3, [r6, #4]
				break;
   157f4:	e68c      	b.n	15510 <ull_conn_rx+0x3c0>
   157f6:	bf00      	nop
   157f8:	20003658 	.word	0x20003658
   157fc:	200036dc 	.word	0x200036dc
   15800:	fffe30d0 	.word	0xfffe30d0
   15804:	0001ff7f 	.word	0x0001ff7f
		((!conn->llcp_enc.refresh &&
   15808:	f1ba 0f07 	cmp.w	sl, #7
   1580c:	d0cd      	beq.n	157aa <ull_conn_rx+0x65a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   1580e:	f1ba 0f02 	cmp.w	sl, #2
   15812:	f040 8310 	bne.w	15e36 <ull_conn_rx+0xce6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   15816:	7f73      	ldrb	r3, [r6, #29]
   15818:	2b02      	cmp	r3, #2
   1581a:	f47f ad69 	bne.w	152f0 <ull_conn_rx+0x1a0>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   1581e:	f896 3020 	ldrb.w	r3, [r6, #32]
   15822:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15826:	2303      	movs	r3, #3
   15828:	7133      	strb	r3, [r6, #4]
	int nack = 0;
   1582a:	2000      	movs	r0, #0
}
   1582c:	e4e5      	b.n	151fa <ull_conn_rx+0xaa>
		if (!conn->lll.role ||
   1582e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15832:	2b00      	cmp	r3, #0
   15834:	f6bf ad5c 	bge.w	152f0 <ull_conn_rx+0x1a0>
   15838:	7f43      	ldrb	r3, [r0, #29]
   1583a:	2b08      	cmp	r3, #8
   1583c:	f47f ad58 	bne.w	152f0 <ull_conn_rx+0x1a0>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   15840:	f8b0 5025 	ldrh.w	r5, [r0, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   15844:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   15846:	1aeb      	subs	r3, r5, r3
   15848:	041f      	lsls	r7, r3, #16
   1584a:	f100 8693 	bmi.w	16574 <ull_conn_rx+0x1424>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1584e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15852:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   15856:	1a9b      	subs	r3, r3, r2
   15858:	f003 0303 	and.w	r3, r3, #3
   1585c:	2b02      	cmp	r3, #2
   1585e:	f000 86bc 	beq.w	165da <ull_conn_rx+0x148a>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   15862:	f100 0120 	add.w	r1, r0, #32
   15866:	2205      	movs	r2, #5
   15868:	f104 00ed 	add.w	r0, r4, #237	; 0xed
   1586c:	f00b ff1b 	bl	216a6 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   15870:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn->llcp_ack -= 2U;
   15874:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	conn->llcp.chan_map.instant = instant;
   15878:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
	conn->llcp_type = LLCP_CHAN_MAP;
   1587c:	2002      	movs	r0, #2
	conn->llcp.chan_map.initiate = 0U;
   1587e:	f36f 0200 	bfc	r2, #0, #1
	conn->llcp_ack -= 2U;
   15882:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15884:	2103      	movs	r1, #3
	conn->llcp_type = LLCP_CHAN_MAP;
   15886:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
	conn->llcp.chan_map.initiate = 0U;
   1588a:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
	conn->llcp_ack -= 2U;
   1588e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	int nack = 0;
   15892:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15894:	7131      	strb	r1, [r6, #4]
		if (err) {
   15896:	e4b0      	b.n	151fa <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
   15898:	7f45      	ldrb	r5, [r0, #29]
   1589a:	2d01      	cmp	r5, #1
   1589c:	f47f ad28 	bne.w	152f0 <ull_conn_rx+0x1a0>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   158a0:	48d1      	ldr	r0, [pc, #836]	; (15be8 <ull_conn_rx+0xa98>)
   158a2:	f7f9 ffd7 	bl	f854 <mem_acquire>
	if (!tx) {
   158a6:	4601      	mov	r1, r0
   158a8:	2800      	cmp	r0, #0
   158aa:	f000 8403 	beq.w	160b4 <ull_conn_rx+0xf64>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   158ae:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   158b0:	7145      	strb	r5, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   158b2:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   158b6:	2213      	movs	r2, #19
	ctrl_tx_sec_enqueue(conn, tx);
   158b8:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   158ba:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   158bc:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   158be:	f7ff f811 	bl	148e4 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   158c2:	2303      	movs	r3, #3
   158c4:	7133      	strb	r3, [r6, #4]
	return 0;
   158c6:	2000      	movs	r0, #0
   158c8:	e497      	b.n	151fa <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   158ca:	7f73      	ldrb	r3, [r6, #29]
   158cc:	2b03      	cmp	r3, #3
   158ce:	f47f ad0f 	bne.w	152f0 <ull_conn_rx+0x1a0>
	switch (rej_ext_ind->reject_opcode) {
   158d2:	f896 3020 	ldrb.w	r3, [r6, #32]
   158d6:	3b03      	subs	r3, #3
   158d8:	2b13      	cmp	r3, #19
   158da:	f63f ad37 	bhi.w	1534c <ull_conn_rx+0x1fc>
   158de:	a201      	add	r2, pc, #4	; (adr r2, 158e4 <ull_conn_rx+0x794>)
   158e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   158e4:	00015dbf 	.word	0x00015dbf
   158e8:	0001534d 	.word	0x0001534d
   158ec:	0001534d 	.word	0x0001534d
   158f0:	0001534d 	.word	0x0001534d
   158f4:	0001534d 	.word	0x0001534d
   158f8:	0001534d 	.word	0x0001534d
   158fc:	0001534d 	.word	0x0001534d
   15900:	0001534d 	.word	0x0001534d
   15904:	0001534d 	.word	0x0001534d
   15908:	0001534d 	.word	0x0001534d
   1590c:	0001534d 	.word	0x0001534d
   15910:	0001534d 	.word	0x0001534d
   15914:	00015d59 	.word	0x00015d59
   15918:	0001534d 	.word	0x0001534d
   1591c:	0001534d 	.word	0x0001534d
   15920:	0001534d 	.word	0x0001534d
   15924:	0001534d 	.word	0x0001534d
   15928:	00015d1b 	.word	0x00015d1b
   1592c:	0001534d 	.word	0x0001534d
   15930:	00015dff 	.word	0x00015dff
		if (conn->lll.role ||
   15934:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15938:	2b00      	cmp	r3, #0
   1593a:	f6ff acd9 	blt.w	152f0 <ull_conn_rx+0x1a0>
   1593e:	7f43      	ldrb	r3, [r0, #29]
   15940:	2b18      	cmp	r3, #24
   15942:	f47f acd5 	bne.w	152f0 <ull_conn_rx+0x1a0>
		if (!conn->lll.role &&
   15946:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
   1594a:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
   1594e:	429a      	cmp	r2, r3
   15950:	f43f acfc 	beq.w	1534c <ull_conn_rx+0x1fc>
		    (conn->llcp_conn_param.state ==
   15954:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		     conn->llcp_conn_param.ack) &&
   15958:	f003 0307 	and.w	r3, r3, #7
   1595c:	2b04      	cmp	r3, #4
   1595e:	f47f acf5 	bne.w	1534c <ull_conn_rx+0x1fc>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   15962:	8c07      	ldrh	r7, [r0, #32]
			if ((interval_min < 6) ||
   15964:	2f05      	cmp	r7, #5
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   15966:	b2ba      	uxth	r2, r7
			if ((interval_min < 6) ||
   15968:	f240 8631 	bls.w	165ce <ull_conn_rx+0x147e>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1596c:	8c40      	ldrh	r0, [r0, #34]	; 0x22
			if ((interval_min < 6) ||
   1596e:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   15972:	b283      	uxth	r3, r0
			if ((interval_min < 6) ||
   15974:	f200 862b 	bhi.w	165ce <ull_conn_rx+0x147e>
			    (interval_max > 3200) ||
   15978:	429a      	cmp	r2, r3
   1597a:	f200 8628 	bhi.w	165ce <ull_conn_rx+0x147e>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1597e:	8cb1      	ldrh	r1, [r6, #36]	; 0x24
			    (interval_min > interval_max) ||
   15980:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   15984:	fa1f fc81 	uxth.w	ip, r1
			    (interval_min > interval_max) ||
   15988:	f080 8621 	bcs.w	165ce <ull_conn_rx+0x147e>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1598c:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
			    (latency > 499) ||
   1598e:	f1a2 0e0a 	sub.w	lr, r2, #10
   15992:	fa1f fe8e 	uxth.w	lr, lr
   15996:	f640 4976 	movw	r9, #3190	; 0xc76
   1599a:	45ce      	cmp	lr, r9
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1599c:	fa1f f882 	uxth.w	r8, r2
			    (latency > 499) ||
   159a0:	f200 8615 	bhi.w	165ce <ull_conn_rx+0x147e>
			     ((latency + 1) * interval_max)) ||
   159a4:	fb0c 3c03 	mla	ip, ip, r3, r3
			    (timeout < 10) || (timeout > 3200) ||
   159a8:	ebbc 0f88 	cmp.w	ip, r8, lsl #2
   159ac:	f080 860f 	bcs.w	165ce <ull_conn_rx+0x147e>
			     ((latency + 1) * interval_max)) ||
   159b0:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
   159b4:	4573      	cmp	r3, lr
   159b6:	f0c0 860a 	bcc.w	165ce <ull_conn_rx+0x147e>
			conn->procedure_expire = 0U;
   159ba:	2300      	movs	r3, #0
			conn->llcp_conn_param.timeout =	timeout;
   159bc:	f8a4 217a 	strh.w	r2, [r4, #378]	; 0x17a
			conn->llcp_conn_param.preferred_periodicity =
   159c0:	f884 e17c 	strb.w	lr, [r4, #380]	; 0x17c
			conn->llcp_conn_param.interval_min = interval_min;
   159c4:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
   159c8:	f8a4 0176 	strh.w	r0, [r4, #374]	; 0x176
			conn->llcp_conn_param.latency =	latency;
   159cc:	f8a4 1178 	strh.w	r1, [r4, #376]	; 0x178
			conn->procedure_expire = 0U;
   159d0:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   159d4:	f896 102a 	ldrb.w	r1, [r6, #42]	; 0x2a
   159d8:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   159dc:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   159e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   159e4:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
   159e8:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
   159ec:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
   159f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   159f4:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
   159f8:	f896 102e 	ldrb.w	r1, [r6, #46]	; 0x2e
   159fc:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
   15a00:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   15a04:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
   15a08:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
   15a0c:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   15a10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   15a14:	f8a4 3184 	strh.w	r3, [r4, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
   15a18:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
   15a1c:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
   15a20:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   15a24:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
   15a28:	f896 1034 	ldrb.w	r1, [r6, #52]	; 0x34
   15a2c:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
   15a30:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   15a34:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
   15a38:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
   15a3c:	f896 0036 	ldrb.w	r0, [r6, #54]	; 0x36
   15a40:	682e      	ldr	r6, [r5, #0]
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   15a42:	2101      	movs	r1, #1
				sys_le16_to_cpu(cpr->offset5);
   15a44:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   15a48:	f361 0202 	bfi	r2, r1, #0, #3
			conn->llcp_conn_param.offset5 =
   15a4c:	f8a4 318a 	strh.w	r3, [r4, #394]	; 0x18a
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   15a50:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15a54:	e47a      	b.n	1534c <ull_conn_rx+0x1fc>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   15a56:	7f43      	ldrb	r3, [r0, #29]
   15a58:	2b18      	cmp	r3, #24
   15a5a:	f47f ac49 	bne.w	152f0 <ull_conn_rx+0x1a0>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   15a5e:	4f63      	ldr	r7, [pc, #396]	; (15bec <ull_conn_rx+0xa9c>)
   15a60:	683b      	ldr	r3, [r7, #0]
   15a62:	2b00      	cmp	r3, #0
   15a64:	f000 8228 	beq.w	15eb8 <ull_conn_rx+0xd68>
   15a68:	429c      	cmp	r4, r3
   15a6a:	f000 8225 	beq.w	15eb8 <ull_conn_rx+0xd68>
			nack = reject_ext_ind_send(conn, *rx,
   15a6e:	1d01      	adds	r1, r0, #4
   15a70:	2320      	movs	r3, #32
   15a72:	4620      	mov	r0, r4
   15a74:	220f      	movs	r2, #15
}
   15a76:	b005      	add	sp, #20
   15a78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   15a7c:	f7fe be7e 	b.w	1477c <reject_ext_ind_send.isra.0>
		if (conn->lll.role ||
   15a80:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15a84:	2b00      	cmp	r3, #0
   15a86:	f6bf ae85 	bge.w	15794 <ull_conn_rx+0x644>
   15a8a:	e431      	b.n	152f0 <ull_conn_rx+0x1a0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
   15a8c:	7f43      	ldrb	r3, [r0, #29]
   15a8e:	2b01      	cmp	r3, #1
   15a90:	f47f ac2e 	bne.w	152f0 <ull_conn_rx+0x1a0>
		conn->procedure_expire = 0U;
   15a94:	2300      	movs	r3, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15a96:	2203      	movs	r2, #3
		conn->procedure_expire = 0U;
   15a98:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   15a9c:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15a9e:	7132      	strb	r2, [r6, #4]
		break;
   15aa0:	f7ff bbab 	b.w	151fa <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
   15aa4:	7f43      	ldrb	r3, [r0, #29]
   15aa6:	2b03      	cmp	r3, #3
   15aa8:	f47f ac22 	bne.w	152f0 <ull_conn_rx+0x1a0>
		if (!conn->lll.role) {
   15aac:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15ab0:	2b00      	cmp	r3, #0
   15ab2:	f2c0 8303 	blt.w	160bc <ull_conn_rx+0xf6c>
			if ((conn->llcp_phy.ack !=
   15ab6:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
			     conn->llcp_phy.req) &&
   15aba:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
			if ((conn->llcp_phy.ack !=
   15abe:	428b      	cmp	r3, r1
   15ac0:	d007      	beq.n	15ad2 <ull_conn_rx+0x982>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   15ac2:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
   15ac6:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   15aca:	3a01      	subs	r2, #1
   15acc:	2a02      	cmp	r2, #2
   15ace:	f240 8579 	bls.w	165c4 <ull_conn_rx+0x1474>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   15ad2:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   15ad6:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   15ada:	1a12      	subs	r2, r2, r0
   15adc:	f002 0203 	and.w	r2, r2, #3
   15ae0:	2a02      	cmp	r2, #2
   15ae2:	f000 847d 	beq.w	163e0 <ull_conn_rx+0x1290>
				     LLCP_ENCRYPTION)) ||
   15ae6:	f894 0170 	ldrb.w	r0, [r4, #368]	; 0x170
   15aea:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   15aee:	4290      	cmp	r0, r2
   15af0:	f43f ab95 	beq.w	1521e <ull_conn_rx+0xce>
				nack = reject_ext_ind_send(conn, *rx,
   15af4:	1d31      	adds	r1, r6, #4
   15af6:	4620      	mov	r0, r4
   15af8:	232a      	movs	r3, #42	; 0x2a
   15afa:	2216      	movs	r2, #22
   15afc:	e7bb      	b.n	15a76 <ull_conn_rx+0x926>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   15afe:	7f45      	ldrb	r5, [r0, #29]
   15b00:	2d06      	cmp	r5, #6
   15b02:	f47f abf5 	bne.w	152f0 <ull_conn_rx+0x1a0>
	if (!conn->llcp_version.tx) {
   15b06:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
   15b0a:	07df      	lsls	r7, r3, #31
   15b0c:	f140 83ba 	bpl.w	16284 <ull_conn_rx+0x1134>
	} else if (!conn->llcp_version.rx) {
   15b10:	f013 0302 	ands.w	r3, r3, #2
   15b14:	f47f ac1a 	bne.w	1534c <ull_conn_rx+0x1fc>
		conn->llcp_version.ack = conn->llcp_version.req;
   15b18:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
		conn->procedure_expire = 0U;
   15b1c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		conn->llcp_version.ack = conn->llcp_version.req;
   15b20:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
	conn->llcp_version.version_number = v->version_number;
   15b24:	f896 3020 	ldrb.w	r3, [r6, #32]
   15b28:	f884 3127 	strb.w	r3, [r4, #295]	; 0x127
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   15b2c:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
   15b30:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   15b34:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   15b38:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   15b3c:	f8a4 2128 	strh.w	r2, [r4, #296]	; 0x128
		sys_le16_to_cpu(v->sub_version_number);
   15b40:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   15b44:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   15b48:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   15b4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   15b50:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
	conn->llcp_version.rx = 1U;
   15b54:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
	return 0;
   15b58:	2000      	movs	r0, #0
   15b5a:	f7ff bb4e 	b.w	151fa <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
   15b5e:	7f73      	ldrb	r3, [r6, #29]
   15b60:	2b02      	cmp	r3, #2
   15b62:	f47f abc5 	bne.w	152f0 <ull_conn_rx+0x1a0>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   15b66:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15b6a:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   15b6e:	429a      	cmp	r2, r3
   15b70:	d004      	beq.n	15b7c <ull_conn_rx+0xa2c>
   15b72:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   15b76:	2a03      	cmp	r2, #3
   15b78:	f000 8516 	beq.w	165a8 <ull_conn_rx+0x1458>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   15b7c:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
   15b80:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   15b84:	4283      	cmp	r3, r0
   15b86:	f000 84ab 	beq.w	164e0 <ull_conn_rx+0x1390>
		rej_ext_ind->error_code = rej_ind->error_code;
   15b8a:	f896 2020 	ldrb.w	r2, [r6, #32]
   15b8e:	f886 2021 	strb.w	r2, [r6, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   15b92:	2a23      	cmp	r2, #35	; 0x23
   15b94:	d012      	beq.n	15bbc <ull_conn_rx+0xa6c>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   15b96:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   15b9a:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
   15b9e:	f884 01a9 	strb.w	r0, [r4, #425]	; 0x1a9
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   15ba2:	f3c3 0002 	ubfx	r0, r3, #0, #3
   15ba6:	f360 1306 	bfi	r3, r0, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   15baa:	f36f 0100 	bfc	r1, #0, #1
		conn->procedure_expire = 0U;
   15bae:	2000      	movs	r0, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   15bb0:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   15bb4:	f884 11ab 	strb.w	r1, [r4, #427]	; 0x1ab
		conn->procedure_expire = 0U;
   15bb8:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
	if (!conn->llcp_phy.cmd) {
   15bbc:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   15bc0:	0759      	lsls	r1, r3, #29
   15bc2:	f57f abc3 	bpl.w	1534c <ull_conn_rx+0x1fc>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15bc6:	2317      	movs	r3, #23
	p->status = rej_ext_ind->error_code;
   15bc8:	7732      	strb	r2, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15bca:	7133      	strb	r3, [r6, #4]
	p->tx = conn->lll.phy_tx;
   15bcc:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   15bd0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15bd4:	7773      	strb	r3, [r6, #29]
	p->rx = conn->lll.phy_rx;
   15bd6:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   15bda:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15bde:	77b3      	strb	r3, [r6, #30]
	int nack = 0;
   15be0:	2000      	movs	r0, #0
   15be2:	f7ff bb0a 	b.w	151fa <ull_conn_rx+0xaa>
   15be6:	bf00      	nop
   15be8:	200036dc 	.word	0x200036dc
   15bec:	20003658 	.word	0x20003658
		if (!conn->lll.role ||
   15bf0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15bf4:	2b00      	cmp	r3, #0
   15bf6:	f6bf ab7b 	bge.w	152f0 <ull_conn_rx+0x1a0>
   15bfa:	7f73      	ldrb	r3, [r6, #29]
   15bfc:	2b17      	cmp	r3, #23
   15bfe:	f47f ab77 	bne.w	152f0 <ull_conn_rx+0x1a0>
		memcpy(&conn->llcp_enc.rand[0],
   15c02:	2208      	movs	r2, #8
   15c04:	f106 0120 	add.w	r1, r6, #32
   15c08:	f204 1055 	addw	r0, r4, #341	; 0x155
   15c0c:	f00b fd4b 	bl	216a6 <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   15c10:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   15c14:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   15c18:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
   15c1c:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   15c20:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15c24:	6829      	ldr	r1, [r5, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   15c26:	2201      	movs	r2, #1
   15c28:	f362 0301 	bfi	r3, r2, #0, #2
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15c2c:	2203      	movs	r2, #3
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   15c2e:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15c32:	710a      	strb	r2, [r1, #4]
		conn->llcp_ack -= 2U;
   15c34:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
		conn->llcp_type = LLCP_ENCRYPTION;
   15c38:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		conn->llcp_ack -= 2U;
   15c3c:	3b02      	subs	r3, #2
   15c3e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&conn->llcp.encryption.skd[0],
   15c42:	2208      	movs	r2, #8
   15c44:	f106 012a 	add.w	r1, r6, #42	; 0x2a
   15c48:	f104 00ee 	add.w	r0, r4, #238	; 0xee
   15c4c:	f00b fd2b 	bl	216a6 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   15c50:	2204      	movs	r2, #4
   15c52:	f106 0132 	add.w	r1, r6, #50	; 0x32
   15c56:	f104 0098 	add.w	r0, r4, #152	; 0x98
   15c5a:	f00b fd24 	bl	216a6 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   15c5e:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   15c62:	f8b4 20ca 	ldrh.w	r2, [r4, #202]	; 0xca
   15c66:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		conn->llcp_enc.pause_rx = 1U;
   15c6a:	f043 0301 	orr.w	r3, r3, #1
   15c6e:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	int nack = 0;
   15c72:	2000      	movs	r0, #0
		break;
   15c74:	f7ff bac1 	b.w	151fa <ull_conn_rx+0xaa>
		if (conn->lll.role ||
   15c78:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15c7c:	2b00      	cmp	r3, #0
   15c7e:	f6bf ab85 	bge.w	1538c <ull_conn_rx+0x23c>
   15c82:	f7ff bb35 	b.w	152f0 <ull_conn_rx+0x1a0>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   15c86:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15c8a:	2b00      	cmp	r3, #0
   15c8c:	f6ff ab30 	blt.w	152f0 <ull_conn_rx+0x1a0>
   15c90:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   15c94:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   15c98:	429a      	cmp	r2, r3
   15c9a:	f43f ab29 	beq.w	152f0 <ull_conn_rx+0x1a0>
   15c9e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   15ca2:	2b03      	cmp	r3, #3
   15ca4:	f47f ab24 	bne.w	152f0 <ull_conn_rx+0x1a0>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   15ca8:	7f72      	ldrb	r2, [r6, #29]
   15caa:	2a01      	cmp	r2, #1
   15cac:	f47f ab20 	bne.w	152f0 <ull_conn_rx+0x1a0>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   15cb0:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   15cb4:	f36f 0201 	bfc	r2, #0, #2
   15cb8:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
	int nack = 0;
   15cbc:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15cbe:	7133      	strb	r3, [r6, #4]
		break;
   15cc0:	f7ff ba9b 	b.w	151fa <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   15cc4:	7f43      	ldrb	r3, [r0, #29]
   15cc6:	2b01      	cmp	r3, #1
   15cc8:	f47f ab12 	bne.w	152f0 <ull_conn_rx+0x1a0>
		if (conn->lll.role) {
   15ccc:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15cd0:	2b00      	cmp	r3, #0
   15cd2:	f2c0 80b8 	blt.w	15e46 <ull_conn_rx+0xcf6>
			conn->llcp_enc.pause_rx = 0U;
   15cd6:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
   15cda:	f021 0103 	bic.w	r1, r1, #3
   15cde:	f884 1152 	strb.w	r1, [r4, #338]	; 0x152
		if (conn->llcp_enc.refresh) {
   15ce2:	074e      	lsls	r6, r1, #29
   15ce4:	f57f ac14 	bpl.w	15510 <ull_conn_rx+0x3c0>
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   15ce8:	682b      	ldr	r3, [r5, #0]
			conn->llcp_enc.refresh = 0U;
   15cea:	f36f 0182 	bfc	r1, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   15cee:	2214      	movs	r2, #20
			conn->llcp_enc.refresh = 0U;
   15cf0:	f884 1152 	strb.w	r1, [r4, #338]	; 0x152
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   15cf4:	711a      	strb	r2, [r3, #4]
		conn->procedure_expire = 0U;
   15cf6:	e40b      	b.n	15510 <ull_conn_rx+0x3c0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   15cf8:	7f43      	ldrb	r3, [r0, #29]
   15cfa:	2b01      	cmp	r3, #1
   15cfc:	f47f aaf8 	bne.w	152f0 <ull_conn_rx+0x1a0>
	} else if (!conn->lll.role) {
   15d00:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15d04:	2b00      	cmp	r3, #0
   15d06:	f280 80c0 	bge.w	15e8a <ull_conn_rx+0xd3a>
		conn->lll.enc_tx = 0;
   15d0a:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   15d0e:	f36f 1304 	bfc	r3, #4, #1
   15d12:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		goto pause_enc_rsp_send_exit;
   15d16:	f7ff bb19 	b.w	1534c <ull_conn_rx+0x1fc>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   15d1a:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
   15d1e:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
   15d22:	4293      	cmp	r3, r2
   15d24:	f43f ab12 	beq.w	1534c <ull_conn_rx+0x1fc>
	conn->procedure_expire = 0U;
   15d28:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   15d2a:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   15d2c:	f884 2199 	strb.w	r2, [r4, #409]	; 0x199
	conn->procedure_expire = 0U;
   15d30:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   15d34:	7771      	strb	r1, [r6, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   15d36:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   15d3a:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   15d3e:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   15d42:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   15d46:	8432      	strh	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   15d48:	2215      	movs	r2, #21
	int nack = 0;
   15d4a:	4618      	mov	r0, r3
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   15d4c:	84b7      	strh	r7, [r6, #36]	; 0x24
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   15d4e:	8475      	strh	r5, [r6, #34]	; 0x22
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   15d50:	84f1      	strh	r1, [r6, #38]	; 0x26
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   15d52:	77f2      	strb	r2, [r6, #31]
	if (err) {
   15d54:	f7ff ba51 	b.w	151fa <ull_conn_rx+0xaa>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   15d58:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   15d5c:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   15d60:	429a      	cmp	r2, r3
   15d62:	f43f aaf3 	beq.w	1534c <ull_conn_rx+0x1fc>
	if (!lll->role && (rej_ext_ind->error_code ==
   15d66:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
   15d6a:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   15d6e:	2900      	cmp	r1, #0
   15d70:	f2c0 859b 	blt.w	168aa <ull_conn_rx+0x175a>
   15d74:	2a1a      	cmp	r2, #26
   15d76:	f000 85d7 	beq.w	16928 <ull_conn_rx+0x17d8>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   15d7a:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
   15d7e:	f002 0107 	and.w	r1, r2, #7
   15d82:	2904      	cmp	r1, #4
   15d84:	f000 8574 	beq.w	16870 <ull_conn_rx+0x1720>
	if (!conn->llcp_conn_param.cmd) {
   15d88:	0713      	lsls	r3, r2, #28
   15d8a:	f57f aadf 	bpl.w	1534c <ull_conn_rx+0x1fc>
	cu->status = rej_ext_ind->error_code;
   15d8e:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   15d92:	7733      	strb	r3, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   15d94:	2213      	movs	r2, #19
   15d96:	7132      	strb	r2, [r6, #4]
	cu->interval = lll->interval;
   15d98:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
	cu->timeout = conn->supervision_reload *
   15d9a:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	cu->latency = lll->latency;
   15d9e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
	cu->interval = lll->interval;
   15da0:	83f3      	strh	r3, [r6, #30]
	cu->timeout = conn->supervision_reload *
   15da2:	fb03 f202 	mul.w	r2, r3, r2
		      lll->interval * 125U / 1000;
   15da6:	237d      	movs	r3, #125	; 0x7d
   15da8:	fb03 f302 	mul.w	r3, r3, r2
	cu->latency = lll->latency;
   15dac:	8431      	strh	r1, [r6, #32]
		      lll->interval * 125U / 1000;
   15dae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	int nack = 0;
   15db2:	2000      	movs	r0, #0
		      lll->interval * 125U / 1000;
   15db4:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   15db8:	8473      	strh	r3, [r6, #34]	; 0x22
	if (err) {
   15dba:	f7ff ba1e 	b.w	151fa <ull_conn_rx+0xaa>
		if ((conn->llcp_ack != conn->llcp_req) &&
   15dbe:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15dc2:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   15dc6:	429a      	cmp	r2, r3
   15dc8:	f43f aac0 	beq.w	1534c <ull_conn_rx+0x1fc>
   15dcc:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   15dd0:	2a03      	cmp	r2, #3
   15dd2:	f47f aabb 	bne.w	1534c <ull_conn_rx+0x1fc>
	conn->llcp_enc.pause_rx = 0U;
   15dd6:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	conn->llcp_ack = conn->llcp_req;
   15dda:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	conn->llcp_enc.pause_rx = 0U;
   15dde:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   15de2:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   15de4:	f884 2152 	strb.w	r2, [r4, #338]	; 0x152
	conn->procedure_expire = 0U;
   15de8:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   15dec:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   15df0:	f886 2020 	strb.w	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   15df4:	220d      	movs	r2, #13
	int nack = 0;
   15df6:	4618      	mov	r0, r3
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   15df8:	77f2      	strb	r2, [r6, #31]
	if (err) {
   15dfa:	f7ff b9fe 	b.w	151fa <ull_conn_rx+0xaa>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   15dfe:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
   15e02:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   15e06:	4283      	cmp	r3, r0
   15e08:	f43f aaa0 	beq.w	1534c <ull_conn_rx+0x1fc>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   15e0c:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   15e10:	2a23      	cmp	r2, #35	; 0x23
   15e12:	f47f aec0 	bne.w	15b96 <ull_conn_rx+0xa46>
   15e16:	e6d1      	b.n	15bbc <ull_conn_rx+0xa6c>
	       (conn->lll.role &&
   15e18:	2a00      	cmp	r2, #0
   15e1a:	f43f acf5 	beq.w	15808 <ull_conn_rx+0x6b8>
		 (conn->llcp_enc.refresh &&
   15e1e:	f1ba 0f02 	cmp.w	sl, #2
   15e22:	f43f acf8 	beq.w	15816 <ull_conn_rx+0x6c6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   15e26:	f1ba 0f0b 	cmp.w	sl, #11
   15e2a:	f43f aa5d 	beq.w	152e8 <ull_conn_rx+0x198>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   15e2e:	f1ba 0f03 	cmp.w	sl, #3
   15e32:	f43f aee2 	beq.w	15bfa <ull_conn_rx+0xaaa>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15e36:	f1ba 0f06 	cmp.w	sl, #6
   15e3a:	f47f a9c3 	bne.w	151c4 <ull_conn_rx+0x74>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   15e3e:	7f73      	ldrb	r3, [r6, #29]
   15e40:	2b01      	cmp	r3, #1
   15e42:	f47f aa55 	bne.w	152f0 <ull_conn_rx+0x1a0>
			if ((conn->llcp_req != conn->llcp_ack) &&
   15e46:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   15e4a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15e4e:	4293      	cmp	r3, r2
   15e50:	f000 8456 	beq.w	16700 <ull_conn_rx+0x15b0>
   15e54:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   15e58:	2b03      	cmp	r3, #3
   15e5a:	f47f aa49 	bne.w	152f0 <ull_conn_rx+0x1a0>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   15e5e:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   15e62:	f36f 0301 	bfc	r3, #0, #2
   15e66:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
			if (conn->llcp_req == conn->llcp_ack) {
   15e6a:	e73a      	b.n	15ce2 <ull_conn_rx+0xb92>
		conn->tx_data_last = tx;
   15e6c:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
   15e70:	f7ff ba6c 	b.w	1534c <ull_conn_rx+0x1fc>
			tx->next = conn->tx_head;
   15e74:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   15e76:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   15e7a:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
   15e7e:	f7ff ba62 	b.w	15346 <ull_conn_rx+0x1f6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   15e82:	7f43      	ldrb	r3, [r0, #29]
   15e84:	2b01      	cmp	r3, #1
   15e86:	f47f aa33 	bne.w	152f0 <ull_conn_rx+0x1a0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15e8a:	48d4      	ldr	r0, [pc, #848]	; (161dc <ull_conn_rx+0x108c>)
   15e8c:	f7f9 fce2 	bl	f854 <mem_acquire>
		if (!tx) {
   15e90:	4603      	mov	r3, r0
   15e92:	2800      	cmp	r0, #0
   15e94:	f000 810e 	beq.w	160b4 <ull_conn_rx+0xf64>
	conn->llcp_enc.pause_rx = 1U;
   15e98:	f894 0152 	ldrb.w	r0, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
   15e9c:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15ea0:	7919      	ldrb	r1, [r3, #4]
	conn->llcp_enc.pause_rx = 1U;
   15ea2:	f040 0001 	orr.w	r0, r0, #1
   15ea6:	f884 0152 	strb.w	r0, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
   15eaa:	f022 0218 	bic.w	r2, r2, #24
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   15eae:	2001      	movs	r0, #1
	conn->lll.enc_rx = 0;
   15eb0:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   15eb4:	7158      	strb	r0, [r3, #5]
   15eb6:	e405      	b.n	156c4 <ull_conn_rx+0x574>
		if (!conn->lll.role) {
   15eb8:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   15ebc:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   15ec0:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
   15ec4:	9000      	str	r0, [sp, #0]
   15ec6:	f1bc 0f00 	cmp.w	ip, #0
   15eca:	f2c0 816d 	blt.w	161a8 <ull_conn_rx+0x1058>
			if ((conn->llcp_conn_param.req !=
   15ece:	4282      	cmp	r2, r0
   15ed0:	d009      	beq.n	15ee6 <ull_conn_rx+0xd96>
			    ((conn->llcp_conn_param.state ==
   15ed2:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
					conn->llcp_conn_param.ack) &&
   15ed6:	f012 0207 	ands.w	r2, r2, #7
   15eda:	f000 8353 	beq.w	16584 <ull_conn_rx+0x1434>
			      LLCP_CPR_STATE_REQ) ||
   15ede:	3a04      	subs	r2, #4
   15ee0:	2a01      	cmp	r2, #1
   15ee2:	f240 834f 	bls.w	16584 <ull_conn_rx+0x1434>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   15ee6:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   15eea:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   15eee:	1a12      	subs	r2, r2, r0
   15ef0:	f002 0203 	and.w	r2, r2, #3
   15ef4:	2a02      	cmp	r2, #2
   15ef6:	f000 84a2 	beq.w	1683e <ull_conn_rx+0x16ee>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   15efa:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
   15efe:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
   15f02:	4290      	cmp	r0, r2
   15f04:	f000 840d 	beq.w	16722 <ull_conn_rx+0x15d2>
				nack = reject_ext_ind_send(conn, *rx,
   15f08:	1d31      	adds	r1, r6, #4
   15f0a:	4620      	mov	r0, r4
   15f0c:	232a      	movs	r3, #42	; 0x2a
   15f0e:	220f      	movs	r2, #15
   15f10:	e5b1      	b.n	15a76 <ull_conn_rx+0x926>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   15f12:	7f73      	ldrb	r3, [r6, #29]
   15f14:	2b01      	cmp	r3, #1
   15f16:	f43f aede 	beq.w	15cd6 <ull_conn_rx+0xb86>
   15f1a:	f7ff b9e9 	b.w	152f0 <ull_conn_rx+0x1a0>
		if (!conn->tx_ctrl) {
   15f1e:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   15f22:	2900      	cmp	r1, #0
   15f24:	f47f abee 	bne.w	15704 <ull_conn_rx+0x5b4>
			tx->next = conn->tx_head;
   15f28:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   15f2a:	e9c4 336c 	strd	r3, r3, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   15f2e:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
   15f32:	f7ff bbee 	b.w	15712 <ull_conn_rx+0x5c2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15f36:	48a9      	ldr	r0, [pc, #676]	; (161dc <ull_conn_rx+0x108c>)
   15f38:	f7f9 fc8c 	bl	f854 <mem_acquire>
		if (!tx) {
   15f3c:	4601      	mov	r1, r0
   15f3e:	2800      	cmp	r0, #0
   15f40:	f000 80b8 	beq.w	160b4 <ull_conn_rx+0xf64>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   15f44:	f894 0198 	ldrb.w	r0, [r4, #408]	; 0x198
   15f48:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
	eff_rx_octets = conn->lll.max_rx_octets;
   15f4c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
   15f50:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   15f52:	4290      	cmp	r0, r2
	eff_tx_octets = conn->lll.max_tx_octets;
   15f54:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   15f58:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   15f5c:	f8b4 9060 	ldrh.w	r9, [r4, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   15f60:	9000      	str	r0, [sp, #0]
	eff_tx_octets = conn->lll.max_tx_octets;
   15f62:	9302      	str	r3, [sp, #8]
	if (/* Local idle, and Peer request then complete the Peer procedure
   15f64:	f040 854e 	bne.w	16a04 <ull_conn_rx+0x18b4>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   15f68:	8c32      	ldrh	r2, [r6, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   15f6a:	2a1a      	cmp	r2, #26
   15f6c:	f240 8300 	bls.w	16570 <ull_conn_rx+0x1420>
			eff_tx_octets = MIN(max_rx_octets,
   15f70:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
   15f74:	4282      	cmp	r2, r0
   15f76:	bf28      	it	cs
   15f78:	4602      	movcs	r2, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   15f7a:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
	if (!conn->common.fex_valid ||
   15f7e:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
			eff_rx_octets = MIN(max_tx_octets,
   15f82:	9b01      	ldr	r3, [sp, #4]
   15f84:	f1bc 0f1b 	cmp.w	ip, #27
   15f88:	bf34      	ite	cc
   15f8a:	469e      	movcc	lr, r3
   15f8c:	f04f 0e1b 	movcs.w	lr, #27
	if (!conn->common.fex_valid ||
   15f90:	07c0      	lsls	r0, r0, #31
   15f92:	f140 82e9 	bpl.w	16568 <ull_conn_rx+0x1418>
	feature_coded_phy = (conn->llcp_feature.features_conn &
   15f96:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
	if (!conn->common.fex_valid ||
   15f9a:	0503      	lsls	r3, r0, #20
   15f9c:	f140 83a7 	bpl.w	166ee <ull_conn_rx+0x159e>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
   15fa0:	f8b4 00d8 	ldrh.w	r0, [r4, #216]	; 0xd8
   15fa4:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
   15fa8:	bf28      	it	cs
   15faa:	f44f 6029 	movcs.w	r0, #2704	; 0xa90
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
   15fae:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   15fb2:	bf38      	it	cc
   15fb4:	f44f 70a4 	movcc.w	r0, #328	; 0x148
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
   15fb8:	f44f 6c29 	mov.w	ip, #2704	; 0xa90
		lr_rx_time = sys_le16_to_cpu(lr->max_rx_time);
   15fbc:	f8b6 b022 	ldrh.w	fp, [r6, #34]	; 0x22
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   15fc0:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
   15fc2:	9303      	str	r3, [sp, #12]
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   15fc4:	f5bb 7fa4 	cmp.w	fp, #328	; 0x148
   15fc8:	f0c0 82cc 	bcc.w	16564 <ull_conn_rx+0x1414>
			eff_tx_time = MAX(eff_tx_time,
   15fcc:	f894 a064 	ldrb.w	sl, [r4, #100]	; 0x64
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   15fd0:	4583      	cmp	fp, r0
   15fd2:	bf28      	it	cs
   15fd4:	4683      	movcs	fp, r0
			eff_tx_time = MAX(eff_tx_time,
   15fd6:	f01a 0f04 	tst.w	sl, #4
   15fda:	f00a 0007 	and.w	r0, sl, #7
   15fde:	f040 8383 	bne.w	166e8 <ull_conn_rx+0x1598>
   15fe2:	f100 0a28 	add.w	sl, r0, #40	; 0x28
   15fe6:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   15fea:	1040      	asrs	r0, r0, #1
   15fec:	fa2a f000 	lsr.w	r0, sl, r0
   15ff0:	4558      	cmp	r0, fp
   15ff2:	bf38      	it	cc
   15ff4:	4658      	movcc	r0, fp
   15ff6:	b280      	uxth	r0, r0
		if (lr_tx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   15ff8:	9b03      	ldr	r3, [sp, #12]
   15ffa:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   15ffe:	f0c0 82af 	bcc.w	16560 <ull_conn_rx+0x1410>
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   16002:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
			eff_rx_time = MAX(eff_rx_time,
   16006:	f894 a065 	ldrb.w	sl, [r4, #101]	; 0x65
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   1600a:	bf38      	it	cc
   1600c:	f44f 7ca4 	movcc.w	ip, #328	; 0x148
   16010:	4563      	cmp	r3, ip
   16012:	bf28      	it	cs
   16014:	4663      	movcs	r3, ip
			eff_rx_time = MAX(eff_rx_time,
   16016:	f01a 0f04 	tst.w	sl, #4
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   1601a:	469b      	mov	fp, r3
			eff_rx_time = MAX(eff_rx_time,
   1601c:	f00a 0c07 	and.w	ip, sl, #7
   16020:	f040 837c 	bne.w	1671c <ull_conn_rx+0x15cc>
   16024:	f10c 0a28 	add.w	sl, ip, #40	; 0x28
   16028:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   1602c:	ea4f 0c6c 	mov.w	ip, ip, asr #1
   16030:	fa2a fc0c 	lsr.w	ip, sl, ip
   16034:	45dc      	cmp	ip, fp
   16036:	bf38      	it	cc
   16038:	46dc      	movcc	ip, fp
   1603a:	fa1f fc8c 	uxth.w	ip, ip
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   1603e:	9b01      	ldr	r3, [sp, #4]
   16040:	459e      	cmp	lr, r3
   16042:	f000 82f1 	beq.w	16628 <ull_conn_rx+0x14d8>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   16046:	9b00      	ldr	r3, [sp, #0]
			conn->llcp_length.rx_octets = eff_rx_octets;
   16048:	f8a4 e19c 	strh.w	lr, [r4, #412]	; 0x19c
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   1604c:	3b01      	subs	r3, #1
   1604e:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
			conn->llcp_length.tx_octets = eff_tx_octets;
   16052:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.state =
   16056:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
			conn->llcp_length.rx_time = eff_rx_time;
   1605a:	f8a4 c1a0 	strh.w	ip, [r4, #416]	; 0x1a0
			conn->llcp_length.tx_time = eff_tx_time;
   1605e:	f8a4 01a2 	strh.w	r0, [r4, #418]	; 0x1a2
			if (tx) {
   16062:	2900      	cmp	r1, #0
   16064:	f000 83fa 	beq.w	1685c <ull_conn_rx+0x170c>
				conn->llcp_length.state =
   16068:	2605      	movs	r6, #5
   1606a:	f366 0302 	bfi	r3, r6, #0, #3
   1606e:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
			link->mem = conn->llcp_rx;
   16072:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   16076:	607b      	str	r3, [r7, #4]
			(*rx)->hdr.link = link;
   16078:	682b      	ldr	r3, [r5, #0]
   1607a:	601f      	str	r7, [r3, #0]
			conn->llcp_rx = *rx;
   1607c:	682b      	ldr	r3, [r5, #0]
   1607e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			*rx = NULL;
   16082:	2300      	movs	r3, #0
   16084:	602b      	str	r3, [r5, #0]
	if (tx) {
   16086:	2900      	cmp	r1, #0
   16088:	f43f a8b6 	beq.w	151f8 <ull_conn_rx+0xa8>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1608c:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   1608e:	818a      	strh	r2, [r1, #12]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16090:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16094:	2215      	movs	r2, #21
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16096:	2509      	movs	r5, #9
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   16098:	81c8      	strh	r0, [r1, #14]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   1609a:	f8a1 e008 	strh.w	lr, [r1, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   1609e:	4620      	mov	r0, r4
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   160a0:	f8a1 c00a 	strh.w	ip, [r1, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   160a4:	710b      	strb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   160a6:	714d      	strb	r5, [r1, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   160a8:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   160aa:	f7fe fc1b 	bl	148e4 <ctrl_tx_sec_enqueue>
	return 0;
   160ae:	2000      	movs	r0, #0
}
   160b0:	f7ff b8a3 	b.w	151fa <ull_conn_rx+0xaa>
			return -ENOBUFS;
   160b4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   160b8:	f7ff b89f 	b.w	151fa <ull_conn_rx+0xaa>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   160bc:	4847      	ldr	r0, [pc, #284]	; (161dc <ull_conn_rx+0x108c>)
   160be:	f7f9 fbc9 	bl	f854 <mem_acquire>
	if (!tx) {
   160c2:	4602      	mov	r2, r0
   160c4:	2800      	cmp	r0, #0
   160c6:	d0f5      	beq.n	160b4 <ull_conn_rx+0xf64>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   160c8:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
   160cc:	f894 e1a9 	ldrb.w	lr, [r4, #425]	; 0x1a9
   160d0:	f894 71a8 	ldrb.w	r7, [r4, #424]	; 0x1a8
   160d4:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   160d8:	2002      	movs	r0, #2
   160da:	f360 0101 	bfi	r1, r0, #0, #2
	if (conn->llcp_phy.ack ==
   160de:	4577      	cmp	r7, lr
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   160e0:	f884 11aa 	strb.w	r1, [r4, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
   160e4:	f3c3 0502 	ubfx	r5, r3, #0, #3
   160e8:	f003 0c07 	and.w	ip, r3, #7
   160ec:	f3c3 00c2 	ubfx	r0, r3, #3, #3
   160f0:	d113      	bne.n	1611a <ull_conn_rx+0xfca>
		conn->llcp_phy.tx =
   160f2:	b2c9      	uxtb	r1, r1
   160f4:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.cmd = 0U;
   160f8:	f894 c1ab 	ldrb.w	ip, [r4, #427]	; 0x1ab
		conn->procedure_expire =
   160fc:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   16100:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		conn->llcp_phy.ack--;
   16104:	3f01      	subs	r7, #1
		conn->llcp_phy.rx =
   16106:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   1610a:	f36f 0c82 	bfc	ip, #2, #1
		conn->llcp_phy.ack--;
   1610e:	f884 71a9 	strb.w	r7, [r4, #425]	; 0x1a9
		conn->llcp_phy.rx =
   16112:	f884 11aa 	strb.w	r1, [r4, #426]	; 0x1aa
		conn->llcp_phy.cmd = 0U;
   16116:	f884 c1ab 	strb.w	ip, [r4, #427]	; 0x1ab
	conn->llcp_phy.rx &= p->tx_phys;
   1611a:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
	conn->llcp_phy.tx &= p->rx_phys;
   1611e:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   16122:	f896 7020 	ldrb.w	r7, [r6, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   16126:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   1612a:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   1612e:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   16132:	009b      	lsls	r3, r3, #2
   16134:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   16138:	f001 0103 	and.w	r1, r1, #3
   1613c:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   1613e:	2703      	movs	r7, #3
	conn->llcp_phy.tx &= p->rx_phys;
   16140:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16144:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   16146:	7157      	strb	r7, [r2, #5]
	    conn->tx_head &&
   16148:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   1614c:	7215      	strb	r5, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1614e:	4339      	orrs	r1, r7
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   16150:	2517      	movs	r5, #23
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   16152:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16154:	7111      	strb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   16156:	71d5      	strb	r5, [r2, #7]
	if (
   16158:	2b00      	cmp	r3, #0
   1615a:	f000 81b6 	beq.w	164ca <ull_conn_rx+0x137a>
	    !conn->llcp_enc.pause_tx &&
   1615e:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
	    conn->tx_head &&
   16162:	0788      	lsls	r0, r1, #30
   16164:	f100 81b1 	bmi.w	164ca <ull_conn_rx+0x137a>
	    !conn->llcp_phy.pause_tx &&
   16168:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
   1616c:	07c9      	lsls	r1, r1, #31
   1616e:	f100 81ac 	bmi.w	164ca <ull_conn_rx+0x137a>
		if (conn->tx_head == conn->tx_data) {
   16172:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   16176:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   16178:	bf04      	itt	eq
   1617a:	6819      	ldreq	r1, [r3, #0]
   1617c:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   16180:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   16184:	2900      	cmp	r1, #0
   16186:	f000 83c9 	beq.w	1691c <ull_conn_rx+0x17cc>
	tx->next = conn->tx_ctrl_last->next;
   1618a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   1618e:	6819      	ldr	r1, [r3, #0]
   16190:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   16192:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   16194:	f8c4 21b8 	str.w	r2, [r4, #440]	; 0x1b8
	if (!tx->next) {
   16198:	6813      	ldr	r3, [r2, #0]
   1619a:	2b00      	cmp	r3, #0
   1619c:	f47f a8d6 	bne.w	1534c <ull_conn_rx+0x1fc>
		conn->tx_data_last = tx;
   161a0:	f8c4 21c0 	str.w	r2, [r4, #448]	; 0x1c0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   161a4:	f7ff b8d2 	b.w	1534c <ull_conn_rx+0x1fc>
		} else if ((conn->llcp_conn_param.req ==
   161a8:	9900      	ldr	r1, [sp, #0]
   161aa:	428a      	cmp	r2, r1
   161ac:	f000 808f 	beq.w	162ce <ull_conn_rx+0x117e>
			    conn->llcp_conn_param.ack) ||
   161b0:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
   161b4:	0790      	lsls	r0, r2, #30
   161b6:	f000 808a 	beq.w	162ce <ull_conn_rx+0x117e>
			LL_ASSERT(0);
   161ba:	4a09      	ldr	r2, [pc, #36]	; (161e0 <ull_conn_rx+0x1090>)
   161bc:	4909      	ldr	r1, [pc, #36]	; (161e4 <ull_conn_rx+0x1094>)
   161be:	480a      	ldr	r0, [pc, #40]	; (161e8 <ull_conn_rx+0x1098>)
   161c0:	f241 63d7 	movw	r3, #5847	; 0x16d7
   161c4:	f008 ff46 	bl	1f054 <printk>
   161c8:	4040      	eors	r0, r0
   161ca:	f380 8811 	msr	BASEPRI, r0
   161ce:	f04f 0003 	mov.w	r0, #3
   161d2:	df02      	svc	2
	int nack = 0;
   161d4:	2000      	movs	r0, #0
   161d6:	f7ff b810 	b.w	151fa <ull_conn_rx+0xaa>
   161da:	bf00      	nop
   161dc:	200036dc 	.word	0x200036dc
   161e0:	00025ad4 	.word	0x00025ad4
   161e4:	0002568c 	.word	0x0002568c
   161e8:	0002561c 	.word	0x0002561c
			conn->llcp_conn_param.disabled = 1U;
   161ec:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
			if (!conn->lll.role) {
   161f0:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
			conn->llcp_conn_param.disabled = 1U;
   161f4:	f042 0210 	orr.w	r2, r2, #16
			if (!conn->lll.role) {
   161f8:	2900      	cmp	r1, #0
			conn->llcp_conn_param.disabled = 1U;
   161fa:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
			if (!conn->lll.role) {
   161fe:	f2c0 823f 	blt.w	16680 <ull_conn_rx+0x1530>
				LL_ASSERT(conn->llcp_cu.req ==
   16202:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   16206:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
   1620a:	4293      	cmp	r3, r2
   1620c:	d00e      	beq.n	1622c <ull_conn_rx+0x10dc>
   1620e:	4ae0      	ldr	r2, [pc, #896]	; (16590 <ull_conn_rx+0x1440>)
   16210:	49e0      	ldr	r1, [pc, #896]	; (16594 <ull_conn_rx+0x1444>)
   16212:	48e1      	ldr	r0, [pc, #900]	; (16598 <ull_conn_rx+0x1448>)
   16214:	f241 735b 	movw	r3, #5979	; 0x175b
   16218:	f008 ff1c 	bl	1f054 <printk>
   1621c:	4040      	eors	r0, r0
   1621e:	f380 8811 	msr	BASEPRI, r0
   16222:	f04f 0003 	mov.w	r0, #3
   16226:	df02      	svc	2
   16228:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
				conn->llcp_conn_param.state =
   1622c:	f894 0172 	ldrb.w	r0, [r4, #370]	; 0x172
				conn->llcp_cu.interval =
   16230:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
   16234:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
				conn->llcp_conn_param.state =
   16238:	2305      	movs	r3, #5
   1623a:	f363 0002 	bfi	r0, r3, #0, #3
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1623e:	f894 1106 	ldrb.w	r1, [r4, #262]	; 0x106
				conn->llcp_cu.latency =
   16242:	f8b4 6178 	ldrh.w	r6, [r4, #376]	; 0x178
				conn->llcp_cu.ack--;
   16246:	1e53      	subs	r3, r2, #1
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   16248:	f3c0 02c0 	ubfx	r2, r0, #3, #1
				conn->llcp_cu.ack--;
   1624c:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16250:	0092      	lsls	r2, r2, #2
				conn->llcp_cu.win_size = 1U;
   16252:	2301      	movs	r3, #1
   16254:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16258:	431a      	orrs	r2, r3
   1625a:	f021 0307 	bic.w	r3, r1, #7
   1625e:	431a      	orrs	r2, r3
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16260:	6829      	ldr	r1, [r5, #0]
				conn->llcp_cu.timeout =
   16262:	f8b4 517a 	ldrh.w	r5, [r4, #378]	; 0x17a
				conn->llcp_conn_param.state =
   16266:	f884 0172 	strb.w	r0, [r4, #370]	; 0x172
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1626a:	f884 2106 	strb.w	r2, [r4, #262]	; 0x106
				conn->llcp_cu.win_offset_us = 0U;
   1626e:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16270:	2203      	movs	r2, #3
				conn->llcp_cu.win_offset_us = 0U;
   16272:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
				conn->llcp_cu.latency =
   16276:	f8a4 610a 	strh.w	r6, [r4, #266]	; 0x10a
				conn->llcp_cu.timeout =
   1627a:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1627e:	710a      	strb	r2, [r1, #4]
				break;
   16280:	f7fe bfbb 	b.w	151fa <ull_conn_rx+0xaa>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16284:	48c5      	ldr	r0, [pc, #788]	; (1659c <ull_conn_rx+0x144c>)
   16286:	f7f9 fae5 	bl	f854 <mem_acquire>
		if (!tx) {
   1628a:	4601      	mov	r1, r0
   1628c:	2800      	cmp	r0, #0
   1628e:	f43f af11 	beq.w	160b4 <ull_conn_rx+0xf64>
		conn->llcp_version.tx = 1U;
   16292:	f894 2126 	ldrb.w	r2, [r4, #294]	; 0x126
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16296:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_version.tx = 1U;
   16298:	f042 0201 	orr.w	r2, r2, #1
   1629c:	f884 2126 	strb.w	r2, [r4, #294]	; 0x126
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   162a0:	f043 0303 	orr.w	r3, r3, #3
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   162a4:	220c      	movs	r2, #12
		pdu_tx->len =
   162a6:	7145      	strb	r5, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   162a8:	7103      	strb	r3, [r0, #4]
		v->version_number = LL_VERSION_NUMBER;
   162aa:	250b      	movs	r5, #11
		v->sub_version_number =
   162ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   162b0:	f06f 000e 	mvn.w	r0, #14
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   162b4:	71ca      	strb	r2, [r1, #7]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   162b6:	2205      	movs	r2, #5
   162b8:	7248      	strb	r0, [r1, #9]
		v->sub_version_number =
   162ba:	72cb      	strb	r3, [r1, #11]
   162bc:	730b      	strb	r3, [r1, #12]
		v->version_number = LL_VERSION_NUMBER;
   162be:	720d      	strb	r5, [r1, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   162c0:	728a      	strb	r2, [r1, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   162c2:	4620      	mov	r0, r4
   162c4:	f7fe fb0e 	bl	148e4 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   162c8:	2303      	movs	r3, #3
   162ca:	7133      	strb	r3, [r6, #4]
   162cc:	e42a      	b.n	15b24 <ull_conn_rx+0x9d4>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   162ce:	f8b6 8020 	ldrh.w	r8, [r6, #32]
			if ((interval_min < 6) ||
   162d2:	f1b8 0f05 	cmp.w	r8, #5
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   162d6:	fa1f f288 	uxth.w	r2, r8
			if ((interval_min < 6) ||
   162da:	d97b      	bls.n	163d4 <ull_conn_rx+0x1284>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   162dc:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
			if ((interval_min < 6) ||
   162e0:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   162e4:	fa1f f18e 	uxth.w	r1, lr
			if ((interval_min < 6) ||
   162e8:	d874      	bhi.n	163d4 <ull_conn_rx+0x1284>
			    (interval_max > 3200) ||
   162ea:	428a      	cmp	r2, r1
   162ec:	d872      	bhi.n	163d4 <ull_conn_rx+0x1284>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   162ee:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
			    (interval_min > interval_max) ||
   162f2:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   162f6:	fa1f fa8c 	uxth.w	sl, ip
			    (interval_min > interval_max) ||
   162fa:	d26b      	bcs.n	163d4 <ull_conn_rx+0x1284>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   162fc:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
			    (latency > 499) ||
   162fe:	f1a0 090a 	sub.w	r9, r0, #10
   16302:	fa1f f989 	uxth.w	r9, r9
   16306:	f640 4b76 	movw	fp, #3190	; 0xc76
   1630a:	45d9      	cmp	r9, fp
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1630c:	b282      	uxth	r2, r0
			    (latency > 499) ||
   1630e:	d861      	bhi.n	163d4 <ull_conn_rx+0x1284>
			     ((latency + 1) * interval_max)) ||
   16310:	fb0a 1901 	mla	r9, sl, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   16314:	ebb9 0f82 	cmp.w	r9, r2, lsl #2
   16318:	d25c      	bcs.n	163d4 <ull_conn_rx+0x1284>
			     ((latency + 1) * interval_max)) ||
   1631a:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
   1631e:	4559      	cmp	r1, fp
   16320:	d358      	bcc.n	163d4 <ull_conn_rx+0x1284>
			conn->llcp_conn_param.latency =	latency;
   16322:	f8a4 c178 	strh.w	ip, [r4, #376]	; 0x178
			conn->llcp_conn_param.interval_min = interval_min;
   16326:	f8a4 8174 	strh.w	r8, [r4, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
   1632a:	f8a4 e176 	strh.w	lr, [r4, #374]	; 0x176
			conn->llcp_conn_param.timeout =	timeout;
   1632e:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			conn->llcp_conn_param.preferred_periodicity =
   16332:	f884 b17c 	strb.w	fp, [r4, #380]	; 0x17c
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   16336:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   1633a:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
			     lll->interval) ||
   1633e:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   16342:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   16346:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
   1634a:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   1634e:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   16352:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   16356:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
   1635a:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   1635e:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   16362:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   16366:	f8a4 0182 	strh.w	r0, [r4, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
   1636a:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   1636e:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   16372:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   16376:	f8a4 0184 	strh.w	r0, [r4, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
   1637a:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   1637e:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   16382:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   16386:	f8a4 0186 	strh.w	r0, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
   1638a:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   1638e:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   16392:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   16396:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
   1639a:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   1639e:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
			if ((conn->llcp_conn_param.interval_max !=
   163a2:	4561      	cmp	r1, ip
				sys_le16_to_cpu(cpr->offset5);
   163a4:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
			conn->llcp_conn_param.offset5 =
   163a8:	f8a4 018a 	strh.w	r0, [r4, #394]	; 0x18a
			if ((conn->llcp_conn_param.interval_max !=
   163ac:	f000 8332 	beq.w	16a14 <ull_conn_rx+0x18c4>
				conn->llcp_conn_param.state =
   163b0:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
   163b4:	2103      	movs	r1, #3
   163b6:	f361 0202 	bfi	r2, r1, #0, #3
   163ba:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
			conn->llcp_conn_param.ack--;
   163be:	9a00      	ldr	r2, [sp, #0]
   163c0:	3a01      	subs	r2, #1
   163c2:	f884 2171 	strb.w	r2, [r4, #369]	; 0x171
			if (!conn_upd_curr) {
   163c6:	2b00      	cmp	r3, #0
   163c8:	f47e af16 	bne.w	151f8 <ull_conn_rx+0xa8>
				conn_upd_curr = conn;
   163cc:	603c      	str	r4, [r7, #0]
	int nack = 0;
   163ce:	4618      	mov	r0, r3
   163d0:	f7fe bf13 	b.w	151fa <ull_conn_rx+0xaa>
				nack = reject_ext_ind_send(conn, *rx,
   163d4:	1d31      	adds	r1, r6, #4
   163d6:	4620      	mov	r0, r4
   163d8:	231e      	movs	r3, #30
   163da:	220f      	movs	r2, #15
   163dc:	f7ff bb4b 	b.w	15a76 <ull_conn_rx+0x926>
				      0x03) == 0x02) &&
   163e0:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   163e4:	2a03      	cmp	r2, #3
   163e6:	f47f ab85 	bne.w	15af4 <ull_conn_rx+0x9a4>
   163ea:	f7ff bb7c 	b.w	15ae6 <ull_conn_rx+0x996>
	instant = sys_le16_to_cpu(ind->instant);
   163ee:	8c70      	ldrh	r0, [r6, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   163f0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   163f2:	1a82      	subs	r2, r0, r2
   163f4:	0412      	lsls	r2, r2, #16
   163f6:	f100 80bd 	bmi.w	16574 <ull_conn_rx+0x1424>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   163fa:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   163fe:	f894 c0e9 	ldrb.w	ip, [r4, #233]	; 0xe9
   16402:	eba2 020c 	sub.w	r2, r2, ip
   16406:	f002 0203 	and.w	r2, r2, #3
   1640a:	2a02      	cmp	r2, #2
   1640c:	f000 80e5 	beq.w	165da <ull_conn_rx+0x148a>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   16410:	f894 c1a8 	ldrb.w	ip, [r4, #424]	; 0x1a8
   16414:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
   16418:	4562      	cmp	r2, ip
   1641a:	d019      	beq.n	16450 <ull_conn_rx+0x1300>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   1641c:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   16420:	f002 0203 	and.w	r2, r2, #3
   16424:	2a02      	cmp	r2, #2
   16426:	d113      	bne.n	16450 <ull_conn_rx+0x1300>
		conn->llcp_phy.pause_tx = 0U;
   16428:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1642c:	f894 60ec 	ldrb.w	r6, [r4, #236]	; 0xec
		conn->llcp_phy.ack = conn->llcp_phy.req;
   16430:	f884 c1a9 	strb.w	ip, [r4, #425]	; 0x1a9
		conn->llcp_phy.pause_tx = 0U;
   16434:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16438:	f3c2 0c80 	ubfx	ip, r2, #2, #1
   1643c:	f36c 0641 	bfi	r6, ip, #1, #1
		conn->procedure_expire = 0U;
   16440:	f04f 0c00 	mov.w	ip, #0
		conn->llcp_phy.pause_tx = 0U;
   16444:	f884 21ab 	strb.w	r2, [r4, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16448:	f884 60ec 	strb.w	r6, [r4, #236]	; 0xec
		conn->procedure_expire = 0U;
   1644c:	f8a4 c0cc 	strh.w	ip, [r4, #204]	; 0xcc
	conn->llcp.phy_upd_ind.initiate = 0U;
   16450:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn->llcp.phy_upd_ind.instant = instant;
   16454:	f8a4 00ee 	strh.w	r0, [r4, #238]	; 0xee
	conn->llcp.phy_upd_ind.initiate = 0U;
   16458:	009b      	lsls	r3, r3, #2
   1645a:	f003 031c 	and.w	r3, r3, #28
   1645e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   16462:	f002 0202 	and.w	r2, r2, #2
   16466:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   16468:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
	conn->llcp.phy_upd_ind.initiate = 0U;
   1646c:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	link->mem = conn->llcp_rx;
   16470:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   16472:	682b      	ldr	r3, [r5, #0]
   16474:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   16476:	682b      	ldr	r3, [r5, #0]
   16478:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	*rx = NULL;
   1647c:	2300      	movs	r3, #0
   1647e:	602b      	str	r3, [r5, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   16480:	f7fd f8ec 	bl	1365c <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   16484:	4605      	mov	r5, r0
   16486:	2800      	cmp	r0, #0
   16488:	f000 822a 	beq.w	168e0 <ull_conn_rx+0x1790>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   1648c:	682b      	ldr	r3, [r5, #0]
   1648e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   16492:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   16494:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   16498:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
	conn->llcp_rx = rx_dle;
   1649c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
	conn->llcp_ack -= 2U;
   164a0:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_PHY_UPD;
   164a2:	2106      	movs	r1, #6
	if (conn->llcp.phy_upd_ind.tx) {
   164a4:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_ack -= 2U;
   164a8:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	conn->llcp_type = LLCP_PHY_UPD;
   164ac:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
	if (conn->llcp.phy_upd_ind.tx) {
   164b0:	f43e aea2 	beq.w	151f8 <ull_conn_rx+0xa8>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   164b4:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
   164b8:	f3c3 0382 	ubfx	r3, r3, #2, #3
   164bc:	f363 1206 	bfi	r2, r3, #4, #3
   164c0:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
	int nack = 0;
   164c4:	2000      	movs	r0, #0
   164c6:	f7fe be98 	b.w	151fa <ull_conn_rx+0xaa>
		if (!conn->tx_ctrl) {
   164ca:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   164ce:	2900      	cmp	r1, #0
   164d0:	f47f ae5b 	bne.w	1618a <ull_conn_rx+0x103a>
			tx->next = conn->tx_head;
   164d4:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   164d6:	e9c4 226c 	strd	r2, r2, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   164da:	f8c4 21b8 	str.w	r2, [r4, #440]	; 0x1b8
   164de:	e65b      	b.n	16198 <ull_conn_rx+0x1048>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   164e0:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   164e4:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   164e8:	429a      	cmp	r2, r3
   164ea:	f43f ac16 	beq.w	15d1a <ull_conn_rx+0xbca>
		rej_ext_ind->error_code = rej_ind->error_code;
   164ee:	f896 3020 	ldrb.w	r3, [r6, #32]
   164f2:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   164f6:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   164fa:	2a00      	cmp	r2, #0
   164fc:	f2c0 81de 	blt.w	168bc <ull_conn_rx+0x176c>
   16500:	2b1a      	cmp	r3, #26
   16502:	f000 8211 	beq.w	16928 <ull_conn_rx+0x17d8>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   16506:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
   1650a:	f002 0307 	and.w	r3, r2, #7
   1650e:	2b04      	cmp	r3, #4
   16510:	f47f ac3a 	bne.w	15d88 <ull_conn_rx+0xc38>
		LL_ASSERT(conn_upd_curr == conn);
   16514:	4f22      	ldr	r7, [pc, #136]	; (165a0 <ull_conn_rx+0x1450>)
   16516:	683b      	ldr	r3, [r7, #0]
   16518:	429c      	cmp	r4, r3
   1651a:	d00e      	beq.n	1653a <ull_conn_rx+0x13ea>
   1651c:	4a1c      	ldr	r2, [pc, #112]	; (16590 <ull_conn_rx+0x1440>)
   1651e:	4921      	ldr	r1, [pc, #132]	; (165a4 <ull_conn_rx+0x1454>)
   16520:	481d      	ldr	r0, [pc, #116]	; (16598 <ull_conn_rx+0x1448>)
   16522:	f241 03e4 	movw	r3, #4324	; 0x10e4
   16526:	f008 fd95 	bl	1f054 <printk>
   1652a:	4040      	eors	r0, r0
   1652c:	f380 8811 	msr	BASEPRI, r0
   16530:	f04f 0003 	mov.w	r0, #3
   16534:	df02      	svc	2
   16536:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1653a:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   1653e:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
   16542:	2300      	movs	r3, #0
   16544:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   16546:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   1654a:	e41d      	b.n	15d88 <ull_conn_rx+0xc38>
			conn->llcp_length.disabled = 1U;
   1654c:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
			conn->llcp_length.ack = conn->llcp_length.req;
   16550:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
			conn->llcp_length.disabled = 1U;
   16554:	f042 0308 	orr.w	r3, r2, #8
   16558:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
			conn->llcp_length.ack = conn->llcp_length.req;
   1655c:	f7fe bfd8 	b.w	15510 <ull_conn_rx+0x3c0>
   16560:	46c4      	mov	ip, r8
   16562:	e56c      	b.n	1603e <ull_conn_rx+0xeee>
   16564:	4648      	mov	r0, r9
   16566:	e547      	b.n	15ff8 <ull_conn_rx+0xea8>
		tx_time = CLAMP(conn->default_tx_time,
   16568:	f44f 70a4 	mov.w	r0, #328	; 0x148
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M);
   1656c:	4684      	mov	ip, r0
   1656e:	e525      	b.n	15fbc <ull_conn_rx+0xe6c>
   16570:	9a02      	ldr	r2, [sp, #8]
   16572:	e502      	b.n	15f7a <ull_conn_rx+0xe2a>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16574:	2303      	movs	r3, #3
   16576:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   16578:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_peer = err;
   1657a:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
	int nack = 0;
   1657e:	2000      	movs	r0, #0
   16580:	f7fe be3b 	b.w	151fa <ull_conn_rx+0xaa>
				nack = reject_ext_ind_send(conn, *rx,
   16584:	1d31      	adds	r1, r6, #4
   16586:	4620      	mov	r0, r4
   16588:	2323      	movs	r3, #35	; 0x23
   1658a:	220f      	movs	r2, #15
   1658c:	f7ff ba73 	b.w	15a76 <ull_conn_rx+0x926>
   16590:	00025ad4 	.word	0x00025ad4
   16594:	00025bb8 	.word	0x00025bb8
   16598:	0002561c 	.word	0x0002561c
   1659c:	200036dc 	.word	0x200036dc
   165a0:	20003658 	.word	0x20003658
   165a4:	00025be0 	.word	0x00025be0
	conn->llcp_enc.pause_rx = 0U;
   165a8:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	conn->llcp_ack = conn->llcp_req;
   165ac:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	conn->llcp_enc.pause_rx = 0U;
   165b0:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   165b4:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   165b6:	f884 2152 	strb.w	r2, [r4, #338]	; 0x152
	conn->procedure_expire = 0U;
   165ba:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   165be:	4618      	mov	r0, r3
   165c0:	f7fe be1b 	b.w	151fa <ull_conn_rx+0xaa>
				nack = reject_ext_ind_send(conn, *rx,
   165c4:	1d01      	adds	r1, r0, #4
   165c6:	2323      	movs	r3, #35	; 0x23
   165c8:	4620      	mov	r0, r4
   165ca:	f7ff ba96 	b.w	15afa <ull_conn_rx+0x9aa>
				nack = reject_ext_ind_send(conn, *rx,
   165ce:	1d31      	adds	r1, r6, #4
   165d0:	4620      	mov	r0, r4
   165d2:	231e      	movs	r3, #30
   165d4:	2210      	movs	r2, #16
   165d6:	f7ff ba4e 	b.w	15a76 <ull_conn_rx+0x926>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   165da:	2303      	movs	r3, #3
   165dc:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   165de:	232a      	movs	r3, #42	; 0x2a
   165e0:	e7cb      	b.n	1657a <ull_conn_rx+0x142a>
			conn->llcp_phy.pause_tx = 0U;
   165e2:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
   165e6:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
			conn->llcp_phy.ack = conn->llcp_phy.req;
   165ea:	f884 11a9 	strb.w	r1, [r4, #425]	; 0x1a9
			conn->llcp_phy.pause_tx = 0U;
   165ee:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   165f2:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   165f4:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   165f8:	f362 1106 	bfi	r1, r2, #4, #3
			if (conn->llcp_phy.cmd) {
   165fc:	075f      	lsls	r7, r3, #29
			conn->llcp_phy.pause_tx = 0U;
   165fe:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
   16602:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
   16606:	f3c2 0202 	ubfx	r2, r2, #0, #3
			if (conn->llcp_phy.cmd) {
   1660a:	f140 8122 	bpl.w	16852 <ull_conn_rx+0x1702>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1660e:	6829      	ldr	r1, [r5, #0]
				p->status = 0U;
   16610:	2300      	movs	r3, #0
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16612:	2017      	movs	r0, #23
   16614:	7108      	strb	r0, [r1, #4]
				p->tx = lll->phy_tx;
   16616:	7772      	strb	r2, [r6, #29]
				p->status = 0U;
   16618:	7733      	strb	r3, [r6, #28]
				p->rx = lll->phy_rx;
   1661a:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   1661e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16622:	77b3      	strb	r3, [r6, #30]
   16624:	f7fe bf74 	b.w	15510 <ull_conn_rx+0x3c0>
			conn->llcp_length.ack = conn->llcp_length.req;
   16628:	9b00      	ldr	r3, [sp, #0]
   1662a:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1662e:	9b02      	ldr	r3, [sp, #8]
			conn->procedure_expire = 0U;
   16630:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   16632:	429a      	cmp	r2, r3
			conn->procedure_expire = 0U;
   16634:	f8a4 70cc 	strh.w	r7, [r4, #204]	; 0xcc
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   16638:	f000 8165 	beq.w	16906 <ull_conn_rx+0x17b6>
			conn->lll.max_rx_time = eff_rx_time;
   1663c:	f8a4 c062 	strh.w	ip, [r4, #98]	; 0x62
			if (tx) {
   16640:	2900      	cmp	r1, #0
   16642:	f000 815b 	beq.w	168fc <ull_conn_rx+0x17ac>
				conn->llcp_length.state =
   16646:	f894 519a 	ldrb.w	r5, [r4, #410]	; 0x19a
					(conn->llcp_length.req - 1);
   1664a:	9b00      	ldr	r3, [sp, #0]
				conn->llcp_length.rx_octets = eff_rx_octets;
   1664c:	f8a4 e19c 	strh.w	lr, [r4, #412]	; 0x19c
				conn->llcp_length.state =
   16650:	2703      	movs	r7, #3
					(conn->llcp_length.req - 1);
   16652:	3b01      	subs	r3, #1
				conn->llcp_length.state =
   16654:	f367 0502 	bfi	r5, r7, #0, #3
				conn->llcp_length.ack =
   16658:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
				conn->llcp_length.tx_octets = eff_tx_octets;
   1665c:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.rx_time = eff_rx_time;
   16660:	f8a4 c1a0 	strh.w	ip, [r4, #416]	; 0x1a0
				conn->llcp_length.tx_time = eff_tx_time;
   16664:	f8a4 01a2 	strh.w	r0, [r4, #418]	; 0x1a2
				conn->llcp_length.state =
   16668:	f884 519a 	strb.w	r5, [r4, #410]	; 0x19a
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   1666c:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   16670:	84b2      	strh	r2, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   16672:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   16676:	84f0      	strh	r0, [r6, #38]	; 0x26
   16678:	e505      	b.n	16086 <ull_conn_rx+0xf36>
		conn_upd_curr = conn;
   1667a:	601c      	str	r4, [r3, #0]
   1667c:	f7fe befd 	b.w	1547a <ull_conn_rx+0x32a>
			LL_ASSERT(conn_upd_curr == conn);
   16680:	4fda      	ldr	r7, [pc, #872]	; (169ec <ull_conn_rx+0x189c>)
   16682:	683a      	ldr	r2, [r7, #0]
   16684:	4294      	cmp	r4, r2
   16686:	d00e      	beq.n	166a6 <ull_conn_rx+0x1556>
   16688:	4ad9      	ldr	r2, [pc, #868]	; (169f0 <ull_conn_rx+0x18a0>)
   1668a:	49da      	ldr	r1, [pc, #872]	; (169f4 <ull_conn_rx+0x18a4>)
   1668c:	48da      	ldr	r0, [pc, #872]	; (169f8 <ull_conn_rx+0x18a8>)
   1668e:	f241 7373 	movw	r3, #6003	; 0x1773
   16692:	f008 fcdf 	bl	1f054 <printk>
   16696:	4040      	eors	r0, r0
   16698:	f380 8811 	msr	BASEPRI, r0
   1669c:	f04f 0003 	mov.w	r0, #3
   166a0:	df02      	svc	2
   166a2:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
			if (!conn->llcp_conn_param.cmd) {
   166a6:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   166aa:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
   166ae:	2300      	movs	r3, #0
   166b0:	603b      	str	r3, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
   166b2:	f012 0308 	ands.w	r3, r2, #8
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   166b6:	682a      	ldr	r2, [r5, #0]
			if (!conn->llcp_conn_param.cmd) {
   166b8:	f43e ada9 	beq.w	1520e <ull_conn_rx+0xbe>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   166bc:	2113      	movs	r1, #19
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   166be:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   166c0:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   166c2:	7733      	strb	r3, [r6, #28]
			cu->interval = lll->interval;
   166c4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			cu->timeout = conn->supervision_reload *
   166c6:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
			cu->latency = lll->latency;
   166ca:	8e21      	ldrh	r1, [r4, #48]	; 0x30
			cu->interval = lll->interval;
   166cc:	83f3      	strh	r3, [r6, #30]
			cu->timeout = conn->supervision_reload *
   166ce:	fb03 f202 	mul.w	r2, r3, r2
				      lll->interval * 125U / 1000;
   166d2:	237d      	movs	r3, #125	; 0x7d
   166d4:	fb03 f302 	mul.w	r3, r3, r2
			cu->latency = lll->latency;
   166d8:	8431      	strh	r1, [r6, #32]
				      lll->interval * 125U / 1000;
   166da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   166de:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   166e2:	8473      	strh	r3, [r6, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   166e4:	f7fe bf14 	b.w	15510 <ull_conn_rx+0x3c0>
			eff_tx_time = MAX(eff_tx_time,
   166e8:	f44f 6029 	mov.w	r0, #2704	; 0xa90
   166ec:	e480      	b.n	15ff0 <ull_conn_rx+0xea0>
	    (!feature_coded_phy && !feature_phy_2m)) {
   166ee:	f410 7f80 	tst.w	r0, #256	; 0x100
		tx_time = CLAMP(conn->default_tx_time,
   166f2:	f44f 70a4 	mov.w	r0, #328	; 0x148
	    (!feature_coded_phy && !feature_phy_2m)) {
   166f6:	f000 80f0 	beq.w	168da <ull_conn_rx+0x178a>
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_2M),
   166fa:	f04f 0ca8 	mov.w	ip, #168	; 0xa8
   166fe:	e45d      	b.n	15fbc <ull_conn_rx+0xe6c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16700:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
				conn->llcp_ack -= 2U;
   16704:	3b02      	subs	r3, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16706:	f36f 0201 	bfc	r2, #0, #2
				conn->llcp_type = LLCP_ENCRYPTION;
   1670a:	2003      	movs	r0, #3
				conn->llcp_ack -= 2U;
   1670c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16710:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
				conn->llcp_type = LLCP_ENCRYPTION;
   16714:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
				conn->llcp_ack -= 2U;
   16718:	f7ff bae3 	b.w	15ce2 <ull_conn_rx+0xb92>
			eff_rx_time = MAX(eff_rx_time,
   1671c:	f44f 6c29 	mov.w	ip, #2704	; 0xa90
   16720:	e488      	b.n	16034 <ull_conn_rx+0xee4>
				uint16_t interval_min =
   16722:	f8b6 8020 	ldrh.w	r8, [r6, #32]
				if ((interval_min < 6) ||
   16726:	f1b8 0f05 	cmp.w	r8, #5
				uint16_t interval_min =
   1672a:	fa1f f088 	uxth.w	r0, r8
				if ((interval_min < 6) ||
   1672e:	f67f ae51 	bls.w	163d4 <ull_conn_rx+0x1284>
				uint16_t interval_max =
   16732:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
				if ((interval_min < 6) ||
   16736:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
				uint16_t interval_max =
   1673a:	fa1f f28e 	uxth.w	r2, lr
				if ((interval_min < 6) ||
   1673e:	f63f ae49 	bhi.w	163d4 <ull_conn_rx+0x1284>
				    (interval_max > 3200) ||
   16742:	4290      	cmp	r0, r2
   16744:	f63f ae46 	bhi.w	163d4 <ull_conn_rx+0x1284>
				uint16_t latency =
   16748:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
   1674c:	fa1f f08c 	uxth.w	r0, ip
				    (interval_min > interval_max) ||
   16750:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
				uint16_t latency =
   16754:	e9cd 0001 	strd	r0, r0, [sp, #4]
				    (interval_min > interval_max) ||
   16758:	f4bf ae3c 	bcs.w	163d4 <ull_conn_rx+0x1284>
				uint16_t timeout =
   1675c:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
   1675e:	f8ad 000c 	strh.w	r0, [sp, #12]
				    (latency > 499) ||
   16762:	f1a0 090a 	sub.w	r9, r0, #10
   16766:	fa1f f989 	uxth.w	r9, r9
   1676a:	f640 4a76 	movw	sl, #3190	; 0xc76
   1676e:	45d1      	cmp	r9, sl
				uint16_t timeout =
   16770:	fa1f fb80 	uxth.w	fp, r0
				    (latency > 499) ||
   16774:	f63f ae2e 	bhi.w	163d4 <ull_conn_rx+0x1284>
				     ((latency + 1) * interval_max)) ||
   16778:	9801      	ldr	r0, [sp, #4]
   1677a:	fb00 2902 	mla	r9, r0, r2, r2
				    (timeout > 3200) ||
   1677e:	ebb9 0f8b 	cmp.w	r9, fp, lsl #2
   16782:	f4bf ae27 	bcs.w	163d4 <ull_conn_rx+0x1284>
				     ((latency + 1) * interval_max)) ||
   16786:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
   1678a:	4552      	cmp	r2, sl
   1678c:	f4ff ae22 	bcc.w	163d4 <ull_conn_rx+0x1284>
				conn->llcp_conn_param.timeout =	timeout;
   16790:	f8bd 000c 	ldrh.w	r0, [sp, #12]
				conn->llcp_conn_param.latency =	latency;
   16794:	f8a4 c178 	strh.w	ip, [r4, #376]	; 0x178
				conn->llcp_conn_param.interval_min =
   16798:	f8a4 8174 	strh.w	r8, [r4, #372]	; 0x174
				conn->llcp_conn_param.interval_max =
   1679c:	f8a4 e176 	strh.w	lr, [r4, #374]	; 0x176
				conn->llcp_conn_param.timeout =	timeout;
   167a0:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
				conn->llcp_conn_param.preferred_periodicity =
   167a4:	f884 a17c 	strb.w	sl, [r4, #380]	; 0x17c
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   167a8:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   167ac:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
				     lll->interval) ||
   167b0:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   167b4:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   167b8:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
					sys_le16_to_cpu(cpr->offset0);
   167bc:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   167c0:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   167c4:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   167c8:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
					sys_le16_to_cpu(cpr->offset1);
   167cc:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   167d0:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   167d4:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   167d8:	f8a4 0182 	strh.w	r0, [r4, #386]	; 0x182
					sys_le16_to_cpu(cpr->offset2);
   167dc:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   167e0:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   167e4:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   167e8:	f8a4 0184 	strh.w	r0, [r4, #388]	; 0x184
					sys_le16_to_cpu(cpr->offset3);
   167ec:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   167f0:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   167f4:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   167f8:	f8a4 0186 	strh.w	r0, [r4, #390]	; 0x186
					sys_le16_to_cpu(cpr->offset4);
   167fc:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   16800:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   16804:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   16808:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
					sys_le16_to_cpu(cpr->offset5);
   1680c:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   16810:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
				if ((conn->llcp_conn_param.interval_max !=
   16814:	4562      	cmp	r2, ip
					sys_le16_to_cpu(cpr->offset5);
   16816:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
				conn->llcp_conn_param.offset5 =
   1681a:	f8a4 018a 	strh.w	r0, [r4, #394]	; 0x18a
				if ((conn->llcp_conn_param.interval_max !=
   1681e:	f000 80c2 	beq.w	169a6 <ull_conn_rx+0x1856>
					if (conn->llcp_enc.pause_tx) {
   16822:	078e      	lsls	r6, r1, #30
						conn->llcp_conn_param.state =
   16824:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
					if (conn->llcp_enc.pause_tx) {
   16828:	f57f adc4 	bpl.w	163b4 <ull_conn_rx+0x1264>
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1682c:	6829      	ldr	r1, [r5, #0]
						conn->llcp_conn_param.state =
   1682e:	2002      	movs	r0, #2
   16830:	f360 0202 	bfi	r2, r0, #0, #3
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16834:	2003      	movs	r0, #3
						conn->llcp_conn_param.state =
   16836:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1683a:	7108      	strb	r0, [r1, #4]
   1683c:	e5bf      	b.n	163be <ull_conn_rx+0x126e>
				      0x03) == 0x02) &&
   1683e:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   16842:	2a03      	cmp	r2, #3
   16844:	f47f ab60 	bne.w	15f08 <ull_conn_rx+0xdb8>
   16848:	f7ff bb57 	b.w	15efa <ull_conn_rx+0xdaa>
	struct node_tx *tx = NULL;
   1684c:	2100      	movs	r1, #0
   1684e:	f7fe bddc 	b.w	1540a <ull_conn_rx+0x2ba>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16852:	682b      	ldr	r3, [r5, #0]
   16854:	2203      	movs	r2, #3
   16856:	711a      	strb	r2, [r3, #4]
   16858:	f7fe be5a 	b.w	15510 <ull_conn_rx+0x3c0>
				conn->llcp_length.state =
   1685c:	2604      	movs	r6, #4
   1685e:	f366 0302 	bfi	r3, r6, #0, #3
				conn->lll.max_tx_octets = eff_tx_octets;
   16862:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   16866:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
				conn->llcp_length.state =
   1686a:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
   1686e:	e400      	b.n	16072 <ull_conn_rx+0xf22>
		LL_ASSERT(conn_upd_curr == conn);
   16870:	4f5e      	ldr	r7, [pc, #376]	; (169ec <ull_conn_rx+0x189c>)
   16872:	6839      	ldr	r1, [r7, #0]
   16874:	428c      	cmp	r4, r1
   16876:	d010      	beq.n	1689a <ull_conn_rx+0x174a>
   16878:	4a5d      	ldr	r2, [pc, #372]	; (169f0 <ull_conn_rx+0x18a0>)
   1687a:	495e      	ldr	r1, [pc, #376]	; (169f4 <ull_conn_rx+0x18a4>)
   1687c:	485e      	ldr	r0, [pc, #376]	; (169f8 <ull_conn_rx+0x18a8>)
   1687e:	f241 03e4 	movw	r3, #4324	; 0x10e4
   16882:	f008 fbe7 	bl	1f054 <printk>
   16886:	4040      	eors	r0, r0
   16888:	f380 8811 	msr	BASEPRI, r0
   1688c:	f04f 0003 	mov.w	r0, #3
   16890:	df02      	svc	2
   16892:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   16896:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1689a:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
   1689e:	2300      	movs	r3, #0
   168a0:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   168a2:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   168a6:	f7ff ba6f 	b.w	15d88 <ull_conn_rx+0xc38>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   168aa:	2a23      	cmp	r2, #35	; 0x23
   168ac:	f43f aa65 	beq.w	15d7a <ull_conn_rx+0xc2a>
			conn->slave.ticks_to_offset =
   168b0:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
   168b4:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
   168b8:	f7ff ba5f 	b.w	15d7a <ull_conn_rx+0xc2a>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   168bc:	2b23      	cmp	r3, #35	; 0x23
   168be:	f43f ae22 	beq.w	16506 <ull_conn_rx+0x13b6>
			conn->slave.ticks_to_offset =
   168c2:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   168c6:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
   168ca:	e61c      	b.n	16506 <ull_conn_rx+0x13b6>
			tx->next = conn->tx_head->next;
   168cc:	6811      	ldr	r1, [r2, #0]
   168ce:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   168d0:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
   168d2:	e9c4 336d 	strd	r3, r3, [r4, #436]	; 0x1b4
   168d6:	f7fe bf1c 	b.w	15712 <ull_conn_rx+0x5c2>
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M);
   168da:	4684      	mov	ip, r0
   168dc:	f7ff bb6e 	b.w	15fbc <ull_conn_rx+0xe6c>
	LL_ASSERT(rx_dle);
   168e0:	4a43      	ldr	r2, [pc, #268]	; (169f0 <ull_conn_rx+0x18a0>)
   168e2:	4946      	ldr	r1, [pc, #280]	; (169fc <ull_conn_rx+0x18ac>)
   168e4:	4844      	ldr	r0, [pc, #272]	; (169f8 <ull_conn_rx+0x18a8>)
   168e6:	f241 339c 	movw	r3, #5020	; 0x139c
   168ea:	f008 fbb3 	bl	1f054 <printk>
   168ee:	4040      	eors	r0, r0
   168f0:	f380 8811 	msr	BASEPRI, r0
   168f4:	f04f 0003 	mov.w	r0, #3
   168f8:	df02      	svc	2
   168fa:	e5c7      	b.n	1648c <ull_conn_rx+0x133c>
				conn->lll.max_tx_octets = eff_tx_octets;
   168fc:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   16900:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
   16904:	e6b2      	b.n	1666c <ull_conn_rx+0x151c>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   16906:	4548      	cmp	r0, r9
   16908:	f47f ae98 	bne.w	1663c <ull_conn_rx+0x14ec>
			    eff_rx_time == conn->lll.max_rx_time &&
   1690c:	45c4      	cmp	ip, r8
   1690e:	f47f ae95 	bne.w	1663c <ull_conn_rx+0x14ec>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16912:	682b      	ldr	r3, [r5, #0]
   16914:	2503      	movs	r5, #3
   16916:	711d      	strb	r5, [r3, #4]
				goto send_length_resp;
   16918:	f7ff bbb5 	b.w	16086 <ull_conn_rx+0xf36>
			tx->next = conn->tx_head->next;
   1691c:	6819      	ldr	r1, [r3, #0]
   1691e:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   16920:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   16922:	e9c4 226d 	strd	r2, r2, [r4, #436]	; 0x1b4
   16926:	e437      	b.n	16198 <ull_conn_rx+0x1048>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   16928:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1692c:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
   16930:	4293      	cmp	r3, r2
   16932:	d00e      	beq.n	16952 <ull_conn_rx+0x1802>
   16934:	4a2e      	ldr	r2, [pc, #184]	; (169f0 <ull_conn_rx+0x18a0>)
   16936:	4932      	ldr	r1, [pc, #200]	; (16a00 <ull_conn_rx+0x18b0>)
   16938:	482f      	ldr	r0, [pc, #188]	; (169f8 <ull_conn_rx+0x18a8>)
   1693a:	f241 03c9 	movw	r3, #4297	; 0x10c9
   1693e:	f008 fb89 	bl	1f054 <printk>
   16942:	4040      	eors	r0, r0
   16944:	f380 8811 	msr	BASEPRI, r0
   16948:	f04f 0003 	mov.w	r0, #3
   1694c:	df02      	svc	2
   1694e:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   16952:	f894 1172 	ldrb.w	r1, [r4, #370]	; 0x172
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   16956:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
   1695a:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1695e:	2305      	movs	r3, #5
   16960:	f363 0102 	bfi	r1, r3, #0, #3
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16964:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   16968:	f884 1172 	strb.w	r1, [r4, #370]	; 0x172
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1696c:	f3c1 03c0 	ubfx	r3, r1, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16970:	009b      	lsls	r3, r3, #2
   16972:	f020 0007 	bic.w	r0, r0, #7
   16976:	f043 0301 	orr.w	r3, r3, #1
   1697a:	4303      	orrs	r3, r0
		conn->llcp_cu.ack--;
   1697c:	3a01      	subs	r2, #1
		conn->llcp_cu.win_size = 1U;
   1697e:	2501      	movs	r5, #1
		conn->llcp_cu.ack--;
   16980:	f884 2105 	strb.w	r2, [r4, #261]	; 0x105
		conn->llcp_cu.win_offset_us = 0U;
   16984:	2000      	movs	r0, #0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   16986:	f8b4 2178 	ldrh.w	r2, [r4, #376]	; 0x178
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1698a:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1698e:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
		conn->llcp_cu.win_size = 1U;
   16992:	f884 5114 	strb.w	r5, [r4, #276]	; 0x114
		conn->llcp_cu.win_offset_us = 0U;
   16996:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1699a:	f8a4 210a 	strh.w	r2, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1699e:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
	if (err) {
   169a2:	f7fe bcd3 	b.w	1534c <ull_conn_rx+0x1fc>
				     lll->interval) ||
   169a6:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   169a8:	9802      	ldr	r0, [sp, #8]
   169aa:	4282      	cmp	r2, r0
   169ac:	f47f af39 	bne.w	16822 <ull_conn_rx+0x16d2>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   169b0:	f240 42e2 	movw	r2, #1250	; 0x4e2
   169b4:	fb02 f00c 	mul.w	r0, r2, ip
   169b8:	f242 7210 	movw	r2, #10000	; 0x2710
				     lll->latency) ||
   169bc:	f8b4 60c6 	ldrh.w	r6, [r4, #198]	; 0xc6
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   169c0:	fb02 020b 	mla	r2, r2, fp, r0
   169c4:	3a01      	subs	r2, #1
   169c6:	fbb2 f2f0 	udiv	r2, r2, r0
				     lll->latency) ||
   169ca:	b292      	uxth	r2, r2
   169cc:	4296      	cmp	r6, r2
   169ce:	f47f af28 	bne.w	16822 <ull_conn_rx+0x16d2>
				conn->llcp_conn_param.state =
   169d2:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
   169d6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   169da:	f042 0201 	orr.w	r2, r2, #1
   169de:	f8a4 2172 	strh.w	r2, [r4, #370]	; 0x172
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   169e2:	682a      	ldr	r2, [r5, #0]
   169e4:	2103      	movs	r1, #3
   169e6:	7111      	strb	r1, [r2, #4]
   169e8:	e4e9      	b.n	163be <ull_conn_rx+0x126e>
   169ea:	bf00      	nop
   169ec:	20003658 	.word	0x20003658
   169f0:	00025ad4 	.word	0x00025ad4
   169f4:	00025be0 	.word	0x00025be0
   169f8:	0002561c 	.word	0x0002561c
   169fc:	00025bf8 	.word	0x00025bf8
   16a00:	00025bb8 	.word	0x00025bb8
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   16a04:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   16a08:	f012 0f06 	tst.w	r2, #6
   16a0c:	f43f aaac 	beq.w	15f68 <ull_conn_rx+0xe18>
   16a10:	f7fe bcf4 	b.w	153fc <ull_conn_rx+0x2ac>
			     lll->interval) ||
   16a14:	8e20      	ldrh	r0, [r4, #48]	; 0x30
   16a16:	4550      	cmp	r0, sl
   16a18:	f47f acca 	bne.w	163b0 <ull_conn_rx+0x1260>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   16a1c:	f240 40e2 	movw	r0, #1250	; 0x4e2
   16a20:	fb00 f101 	mul.w	r1, r0, r1
   16a24:	f242 7010 	movw	r0, #10000	; 0x2710
   16a28:	fb00 1202 	mla	r2, r0, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   16a2c:	f8b4 00c6 	ldrh.w	r0, [r4, #198]	; 0xc6
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   16a30:	3a01      	subs	r2, #1
   16a32:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   16a36:	b292      	uxth	r2, r2
   16a38:	4290      	cmp	r0, r2
   16a3a:	f47f acb9 	bne.w	163b0 <ull_conn_rx+0x1260>
   16a3e:	e7c8      	b.n	169d2 <ull_conn_rx+0x1882>

00016a40 <ull_conn_tx_demux>:
{
   16a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16a44:	4f24      	ldr	r7, [pc, #144]	; (16ad8 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16a46:	4e25      	ldr	r6, [pc, #148]	; (16adc <ull_conn_tx_demux+0x9c>)
   16a48:	78fa      	ldrb	r2, [r7, #3]
{
   16a4a:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   16a4c:	1d3d      	adds	r5, r7, #4
   16a4e:	e021      	b.n	16a94 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16a50:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   16a54:	4630      	mov	r0, r6
   16a56:	f7f8 ff2f 	bl	f8b8 <mem_get>
	if (conn->lll.handle != handle) {
   16a5a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   16a5c:	bb32      	cbnz	r2, 16aac <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   16a5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   16a62:	f8d0 11bc 	ldr.w	r1, [r0, #444]	; 0x1bc
			tx->next = NULL;
   16a66:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   16a68:	b369      	cbz	r1, 16ac6 <ull_conn_tx_demux+0x86>
			if (conn->tx_data_last) {
   16a6a:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
   16a6e:	b102      	cbz	r2, 16a72 <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   16a70:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   16a72:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
		MFIFO_DEQUEUE(conn_tx);
   16a76:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   16a78:	78bb      	ldrb	r3, [r7, #2]
   16a7a:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   16a7c:	429a      	cmp	r2, r3
   16a7e:	d005      	beq.n	16a8c <ull_conn_tx_demux+0x4c>
	_first += 1U;
   16a80:	3301      	adds	r3, #1
   16a82:	b2db      	uxtb	r3, r3
		_first = 0U;
   16a84:	4299      	cmp	r1, r3
   16a86:	bf08      	it	eq
   16a88:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   16a8a:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   16a8c:	3c01      	subs	r4, #1
   16a8e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   16a92:	d016      	beq.n	16ac2 <ull_conn_tx_demux+0x82>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   16a94:	78bb      	ldrb	r3, [r7, #2]
   16a96:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   16a98:	4293      	cmp	r3, r2
   16a9a:	d012      	beq.n	16ac2 <ull_conn_tx_demux+0x82>
	return (void *)(fifo + first * size);
   16a9c:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   16aa0:	eb15 0803 	adds.w	r8, r5, r3
   16aa4:	d00d      	beq.n	16ac2 <ull_conn_tx_demux+0x82>
	if (handle >= CONFIG_BT_MAX_CONN) {
   16aa6:	5aea      	ldrh	r2, [r5, r3]
   16aa8:	2a00      	cmp	r2, #0
   16aaa:	d0d1      	beq.n	16a50 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   16aac:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   16ab0:	790b      	ldrb	r3, [r1, #4]
   16ab2:	f36f 0301 	bfc	r3, #0, #2
   16ab6:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   16ab8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   16abc:	f7fc fde6 	bl	1368c <ll_tx_ack_put>
   16ac0:	e7d9      	b.n	16a76 <ull_conn_tx_demux+0x36>
}
   16ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (!conn->tx_head) {
   16ac6:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
				conn->tx_data = tx;
   16aca:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
				if (!conn->tx_head) {
   16ace:	2a00      	cmp	r2, #0
   16ad0:	d1cb      	bne.n	16a6a <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   16ad2:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
			if (conn->tx_data_last) {
   16ad6:	e7cc      	b.n	16a72 <ull_conn_tx_demux+0x32>
   16ad8:	20000560 	.word	0x20000560
   16adc:	20003490 	.word	0x20003490

00016ae0 <conn_cleanup>:
{
   16ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = conn->llcp_rx;
   16ae4:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	rx->hdr.handle = conn->lll.handle;
   16ae8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	*((uint8_t *)rx->pdu) = reason;
   16aea:	f880 114c 	strb.w	r1, [r0, #332]	; 0x14c
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   16aee:	2312      	movs	r3, #18
{
   16af0:	b083      	sub	sp, #12
   16af2:	4606      	mov	r6, r0
	rx->hdr.handle = conn->lll.handle;
   16af4:	f8a0 2136 	strh.w	r2, [r0, #310]	; 0x136
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   16af8:	f880 3134 	strb.w	r3, [r0, #308]	; 0x134
	struct lll_conn *lll = &conn->lll;
   16afc:	f100 0b1c 	add.w	fp, r0, #28
	while (rx) {
   16b00:	b144      	cbz	r4, 16b14 <conn_cleanup+0x34>
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16b02:	2503      	movs	r5, #3
		rx = hdr->link->mem;
   16b04:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   16b06:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   16b08:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16b0a:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   16b0c:	f7fc fd78 	bl	13600 <ll_rx_put>
	while (rx) {
   16b10:	2c00      	cmp	r4, #0
   16b12:	d1f7      	bne.n	16b04 <conn_cleanup+0x24>
	while (conn->tx_head) {
   16b14:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   16b18:	b381      	cbz	r1, 16b7c <conn_cleanup+0x9c>
		link = mem_acquire(&mem_link_tx.free);
   16b1a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 16bd4 <conn_cleanup+0xf4>
		LL_ASSERT(link);
   16b1e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 16bcc <conn_cleanup+0xec>
   16b22:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 16bd8 <conn_cleanup+0xf8>
   16b26:	f106 076c 	add.w	r7, r6, #108	; 0x6c
   16b2a:	e007      	b.n	16b3c <conn_cleanup+0x5c>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   16b2c:	4629      	mov	r1, r5
   16b2e:	4620      	mov	r0, r4
   16b30:	463a      	mov	r2, r7
   16b32:	f7f8 fef3 	bl	f91c <memq_enqueue>
	while (conn->tx_head) {
   16b36:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   16b3a:	b1f9      	cbz	r1, 16b7c <conn_cleanup+0x9c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   16b3c:	4630      	mov	r0, r6
   16b3e:	f7fd fbf7 	bl	14330 <tx_ull_dequeue>
   16b42:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   16b44:	4640      	mov	r0, r8
   16b46:	f7f8 fe85 	bl	f854 <mem_acquire>
		LL_ASSERT(link);
   16b4a:	4604      	mov	r4, r0
   16b4c:	2800      	cmp	r0, #0
   16b4e:	d1ed      	bne.n	16b2c <conn_cleanup+0x4c>
   16b50:	481c      	ldr	r0, [pc, #112]	; (16bc4 <conn_cleanup+0xe4>)
   16b52:	f240 730b 	movw	r3, #1803	; 0x70b
   16b56:	4652      	mov	r2, sl
   16b58:	4649      	mov	r1, r9
   16b5a:	f008 fa7b 	bl	1f054 <printk>
   16b5e:	4040      	eors	r0, r0
   16b60:	f380 8811 	msr	BASEPRI, r0
   16b64:	f04f 0003 	mov.w	r0, #3
   16b68:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   16b6a:	4629      	mov	r1, r5
   16b6c:	4620      	mov	r0, r4
   16b6e:	463a      	mov	r2, r7
   16b70:	f7f8 fed4 	bl	f91c <memq_enqueue>
	while (conn->tx_head) {
   16b74:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   16b78:	2900      	cmp	r1, #0
   16b7a:	d1df      	bne.n	16b3c <conn_cleanup+0x5c>
				    TICKER_ID_CONN_BASE + lll->handle,
   16b7c:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   16b80:	4b11      	ldr	r3, [pc, #68]	; (16bc8 <conn_cleanup+0xe8>)
   16b82:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
   16b86:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   16b88:	b2d2      	uxtb	r2, r2
   16b8a:	2101      	movs	r1, #1
   16b8c:	2000      	movs	r0, #0
   16b8e:	f7fa f9f1 	bl	10f74 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16b92:	f030 0302 	bics.w	r3, r0, #2
   16b96:	d00c      	beq.n	16bb2 <conn_cleanup+0xd2>
   16b98:	4a0c      	ldr	r2, [pc, #48]	; (16bcc <conn_cleanup+0xec>)
   16b9a:	490d      	ldr	r1, [pc, #52]	; (16bd0 <conn_cleanup+0xf0>)
   16b9c:	4809      	ldr	r0, [pc, #36]	; (16bc4 <conn_cleanup+0xe4>)
   16b9e:	f240 63ca 	movw	r3, #1738	; 0x6ca
   16ba2:	f008 fa57 	bl	1f054 <printk>
   16ba6:	4040      	eors	r0, r0
   16ba8:	f380 8811 	msr	BASEPRI, r0
   16bac:	f04f 0003 	mov.w	r0, #3
   16bb0:	df02      	svc	2
	lll->handle = 0xFFFF;
   16bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   16bb6:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   16bb8:	85b3      	strh	r3, [r6, #44]	; 0x2c
}
   16bba:	b003      	add	sp, #12
   16bbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   16bc0:	f7ff bf3e 	b.w	16a40 <ull_conn_tx_demux>
   16bc4:	0002561c 	.word	0x0002561c
   16bc8:	00014629 	.word	0x00014629
   16bcc:	00025ad4 	.word	0x00025ad4
   16bd0:	00025c14 	.word	0x00025c14
   16bd4:	20003760 	.word	0x20003760
   16bd8:	00025b2c 	.word	0x00025b2c

00016bdc <ull_conn_done>:
{
   16bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   16be0:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   16be2:	8baa      	ldrh	r2, [r5, #28]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   16be4:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
   16be6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16bea:	429a      	cmp	r2, r3
{
   16bec:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == 0xFFFF)) {
   16bee:	f000 8092 	beq.w	16d16 <ull_conn_done+0x13a>
	switch (done->extra.mic_state) {
   16bf2:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   16bf6:	2b01      	cmp	r3, #1
   16bf8:	4606      	mov	r6, r0
   16bfa:	f000 80dd 	beq.w	16db8 <ull_conn_done+0x1dc>
   16bfe:	2b02      	cmp	r3, #2
   16c00:	f000 80d0 	beq.w	16da4 <ull_conn_done+0x1c8>
   16c04:	2b00      	cmp	r3, #0
   16c06:	f000 80b3 	beq.w	16d70 <ull_conn_done+0x194>
	reason_peer = conn->llcp_terminate.reason_peer;
   16c0a:	f894 712f 	ldrb.w	r7, [r4, #303]	; 0x12f
	if (reason_peer && (
   16c0e:	2f00      	cmp	r7, #0
   16c10:	f040 80cb 	bne.w	16daa <ull_conn_done+0x1ce>
	latency_event = lll->latency_event;
   16c14:	f8b5 9024 	ldrh.w	r9, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
   16c18:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	ticks_drift_plus = 0U;
   16c1a:	9709      	str	r7, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   16c1c:	f109 0801 	add.w	r8, r9, #1
	ticks_drift_minus = 0U;
   16c20:	9708      	str	r7, [sp, #32]
	elapsed_event = latency_event + 1;
   16c22:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
   16c26:	2b00      	cmp	r3, #0
   16c28:	d078      	beq.n	16d1c <ull_conn_done+0x140>
		} else if (lll->role) {
   16c2a:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   16c2e:	2b00      	cmp	r3, #0
   16c30:	f2c0 8108 	blt.w	16e44 <ull_conn_done+0x268>
	if (done->extra.crc_valid) {
   16c34:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		conn->connect_expire = 0U;
   16c38:	2200      	movs	r2, #0
   16c3a:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
	if (done->extra.crc_valid) {
   16c3e:	2b00      	cmp	r3, #0
   16c40:	f000 80c0 	beq.w	16dc4 <ull_conn_done+0x1e8>
		conn->supervision_expire = 0U;
   16c44:	2300      	movs	r3, #0
   16c46:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->procedure_expire != 0U) {
   16c4a:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   16c4e:	b133      	cbz	r3, 16c5e <ull_conn_done+0x82>
		if (conn->procedure_expire > elapsed_event) {
   16c50:	4543      	cmp	r3, r8
   16c52:	f240 810d 	bls.w	16e70 <ull_conn_done+0x294>
			conn->procedure_expire -= elapsed_event;
   16c56:	eba3 0308 	sub.w	r3, r3, r8
   16c5a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (conn->apto_expire != 0U) {
   16c5e:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   16c62:	b133      	cbz	r3, 16c72 <ull_conn_done+0x96>
		if (conn->apto_expire > elapsed_event) {
   16c64:	4543      	cmp	r3, r8
   16c66:	f240 80d5 	bls.w	16e14 <ull_conn_done+0x238>
			conn->apto_expire -= elapsed_event;
   16c6a:	eba3 0308 	sub.w	r3, r3, r8
   16c6e:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
	if (conn->appto_expire != 0U) {
   16c72:	f8b4 20d0 	ldrh.w	r2, [r4, #208]	; 0xd0
   16c76:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   16c7a:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   16c7e:	b15a      	cbz	r2, 16c98 <ull_conn_done+0xbc>
		if (conn->appto_expire > elapsed_event) {
   16c80:	4542      	cmp	r2, r8
   16c82:	f200 80ab 	bhi.w	16ddc <ull_conn_done+0x200>
			if ((conn->procedure_expire == 0U) &&
   16c86:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
			conn->appto_expire = 0U;
   16c8a:	2000      	movs	r0, #0
   16c8c:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
			if ((conn->procedure_expire == 0U) &&
   16c90:	b912      	cbnz	r2, 16c98 <ull_conn_done+0xbc>
   16c92:	4299      	cmp	r1, r3
   16c94:	f000 8103 	beq.w	16e9e <ull_conn_done+0x2c2>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   16c98:	1a5b      	subs	r3, r3, r1
   16c9a:	f003 0303 	and.w	r3, r3, #3
   16c9e:	2b02      	cmp	r3, #2
   16ca0:	f000 80a6 	beq.w	16df0 <ull_conn_done+0x214>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   16ca4:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
   16ca8:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
   16cac:	429a      	cmp	r2, r3
   16cae:	f000 80c7 	beq.w	16e40 <ull_conn_done+0x264>
		lll->latency_event = 0U;
   16cb2:	2200      	movs	r2, #0
   16cb4:	84aa      	strh	r2, [r5, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   16cb6:	e9dd 4308 	ldrd	r4, r3, [sp, #32]
   16cba:	b917      	cbnz	r7, 16cc2 <ull_conn_done+0xe6>
   16cbc:	454a      	cmp	r2, r9
   16cbe:	f000 80a4 	beq.w	16e0a <ull_conn_done+0x22e>
		lazy = lll->latency_event + 1U;
   16cc2:	3201      	adds	r2, #1
   16cc4:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   16cc6:	b913      	cbnz	r3, 16cce <ull_conn_done+0xf2>
   16cc8:	2c00      	cmp	r4, #0
   16cca:	f000 8084 	beq.w	16dd6 <ull_conn_done+0x1fa>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   16cce:	7f2a      	ldrb	r2, [r5, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   16cd0:	4e83      	ldr	r6, [pc, #524]	; (16ee0 <ull_conn_done+0x304>)
		struct ll_conn *conn = lll->hdr.parent;
   16cd2:	68ed      	ldr	r5, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   16cd4:	9506      	str	r5, [sp, #24]
   16cd6:	2000      	movs	r0, #0
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   16cd8:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   16cda:	9103      	str	r1, [sp, #12]
   16cdc:	e9cd 0001 	strd	r0, r0, [sp, #4]
   16ce0:	b2d2      	uxtb	r2, r2
   16ce2:	9704      	str	r7, [sp, #16]
   16ce4:	9400      	str	r4, [sp, #0]
   16ce6:	9605      	str	r6, [sp, #20]
   16ce8:	2101      	movs	r1, #1
   16cea:	f7fa f8f3 	bl	10ed4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16cee:	f030 0302 	bics.w	r3, r0, #2
   16cf2:	d010      	beq.n	16d16 <ull_conn_done+0x13a>
   16cf4:	f7fc fd60 	bl	137b8 <ull_disable_mark_get>
   16cf8:	4285      	cmp	r5, r0
   16cfa:	d00c      	beq.n	16d16 <ull_conn_done+0x13a>
   16cfc:	4a79      	ldr	r2, [pc, #484]	; (16ee4 <ull_conn_done+0x308>)
   16cfe:	497a      	ldr	r1, [pc, #488]	; (16ee8 <ull_conn_done+0x30c>)
   16d00:	487a      	ldr	r0, [pc, #488]	; (16eec <ull_conn_done+0x310>)
   16d02:	f240 531e 	movw	r3, #1310	; 0x51e
   16d06:	f008 f9a5 	bl	1f054 <printk>
   16d0a:	4040      	eors	r0, r0
   16d0c:	f380 8811 	msr	BASEPRI, r0
   16d10:	f04f 0003 	mov.w	r0, #3
   16d14:	df02      	svc	2
}
   16d16:	b00b      	add	sp, #44	; 0x2c
   16d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.crc_valid) {
   16d1c:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
   16d20:	2b00      	cmp	r3, #0
   16d22:	d18f      	bne.n	16c44 <ull_conn_done+0x68>
	else if (conn->connect_expire) {
   16d24:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   16d28:	2b00      	cmp	r3, #0
   16d2a:	d04b      	beq.n	16dc4 <ull_conn_done+0x1e8>
		if (conn->connect_expire > elapsed_event) {
   16d2c:	4543      	cmp	r3, r8
   16d2e:	f240 80bd 	bls.w	16eac <ull_conn_done+0x2d0>
			conn->connect_expire -= elapsed_event;
   16d32:	eba3 0308 	sub.w	r3, r3, r8
   16d36:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   16d3a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
	if (conn->supervision_expire) {
   16d3e:	2b00      	cmp	r3, #0
   16d40:	d083      	beq.n	16c4a <ull_conn_done+0x6e>
		if (conn->supervision_expire > elapsed_event) {
   16d42:	4598      	cmp	r8, r3
   16d44:	f080 808f 	bcs.w	16e66 <ull_conn_done+0x28a>
			conn->supervision_expire -= elapsed_event;
   16d48:	eba3 0308 	sub.w	r3, r3, r8
   16d4c:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   16d4e:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   16d50:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   16d52:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			lll->latency_event = 0U;
   16d56:	84aa      	strh	r2, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   16d58:	d908      	bls.n	16d6c <ull_conn_done+0x190>
			else if (lll->role) {
   16d5a:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   16d5e:	4293      	cmp	r3, r2
   16d60:	f6bf af73 	bge.w	16c4a <ull_conn_done+0x6e>
				if (latency_event) {
   16d64:	f1b9 0f00 	cmp.w	r9, #0
   16d68:	f000 808b 	beq.w	16e82 <ull_conn_done+0x2a6>
				force = 1U;
   16d6c:	2701      	movs	r7, #1
   16d6e:	e76c      	b.n	16c4a <ull_conn_done+0x6e>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   16d70:	f895 306e 	ldrb.w	r3, [r5, #110]	; 0x6e
   16d74:	0719      	lsls	r1, r3, #28
   16d76:	d542      	bpl.n	16dfe <ull_conn_done+0x222>
					    (lll->latency + 6)) ?
   16d78:	8c2b      	ldrh	r3, [r5, #32]
			appto_reload_new = (conn->apto_reload >
   16d7a:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
					    (lll->latency + 6)) ?
   16d7e:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   16d80:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   16d82:	bfc4      	itt	gt
   16d84:	1ad3      	subgt	r3, r2, r3
   16d86:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   16d88:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
			appto_reload_new = (conn->apto_reload >
   16d8c:	bfcc      	ite	gt
   16d8e:	b29b      	uxthgt	r3, r3
   16d90:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   16d92:	4299      	cmp	r1, r3
   16d94:	d061      	beq.n	16e5a <ull_conn_done+0x27e>
				conn->appto_reload = appto_reload_new;
   16d96:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				conn->appto_expire = conn->appto_reload;
   16d9a:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				conn->apto_expire = conn->apto_reload;
   16d9e:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
   16da2:	e732      	b.n	16c0a <ull_conn_done+0x2e>
		conn->llcp_terminate.reason_peer =
   16da4:	273d      	movs	r7, #61	; 0x3d
   16da6:	f884 712f 	strb.w	r7, [r4, #303]	; 0x12f
		conn_cleanup(conn, reason_peer);
   16daa:	4639      	mov	r1, r7
   16dac:	4620      	mov	r0, r4
   16dae:	f7ff fe97 	bl	16ae0 <conn_cleanup>
}
   16db2:	b00b      	add	sp, #44	; 0x2c
   16db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		conn->appto_expire = conn->apto_expire = 0U;
   16db8:	2300      	movs	r3, #0
   16dba:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   16dbe:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		break;
   16dc2:	e722      	b.n	16c0a <ull_conn_done+0x2e>
		if (!conn->supervision_expire) {
   16dc4:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   16dc8:	2b00      	cmp	r3, #0
   16dca:	d1ba      	bne.n	16d42 <ull_conn_done+0x166>
			conn->supervision_expire = conn->supervision_reload;
   16dcc:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   16dd0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   16dd4:	e7b3      	b.n	16d3e <ull_conn_done+0x162>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   16dd6:	b371      	cbz	r1, 16e36 <ull_conn_done+0x25a>
   16dd8:	4623      	mov	r3, r4
   16dda:	e778      	b.n	16cce <ull_conn_done+0xf2>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   16ddc:	1a5b      	subs	r3, r3, r1
   16dde:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   16de2:	eba2 0808 	sub.w	r8, r2, r8
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   16de6:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   16de8:	f8a4 80d0 	strh.w	r8, [r4, #208]	; 0xd0
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   16dec:	f47f af5a 	bne.w	16ca4 <ull_conn_done+0xc8>
   16df0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   16df4:	3b01      	subs	r3, #1
   16df6:	2b01      	cmp	r3, #1
   16df8:	f63f af54 	bhi.w	16ca4 <ull_conn_done+0xc8>
   16dfc:	e759      	b.n	16cb2 <ull_conn_done+0xd6>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   16dfe:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   16e02:	07da      	lsls	r2, r3, #31
   16e04:	f57f af01 	bpl.w	16c0a <ull_conn_done+0x2e>
   16e08:	e7b6      	b.n	16d78 <ull_conn_done+0x19c>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   16e0a:	b90b      	cbnz	r3, 16e10 <ull_conn_done+0x234>
   16e0c:	2c00      	cmp	r4, #0
   16e0e:	d082      	beq.n	16d16 <ull_conn_done+0x13a>
	lazy = 0U;
   16e10:	4639      	mov	r1, r7
   16e12:	e75c      	b.n	16cce <ull_conn_done+0xf2>
			rx = ll_pdu_rx_alloc();
   16e14:	f7fc fc22 	bl	1365c <ll_pdu_rx_alloc>
			if (rx) {
   16e18:	4601      	mov	r1, r0
   16e1a:	b370      	cbz	r0, 16e7a <ull_conn_done+0x29e>
				conn->apto_expire = 0U;
   16e1c:	2300      	movs	r3, #0
				rx->handle = lll->handle;
   16e1e:	8baa      	ldrh	r2, [r5, #28]
				conn->apto_expire = 0U;
   16e20:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
				rx->type = NODE_RX_TYPE_APTO;
   16e24:	2315      	movs	r3, #21
				rx->handle = lll->handle;
   16e26:	80c2      	strh	r2, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   16e28:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   16e2a:	6800      	ldr	r0, [r0, #0]
   16e2c:	f7fc fbe8 	bl	13600 <ll_rx_put>
				ll_rx_sched();
   16e30:	f7fc fbf0 	bl	13614 <ll_rx_sched>
   16e34:	e71d      	b.n	16c72 <ull_conn_done+0x96>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   16e36:	2f00      	cmp	r7, #0
   16e38:	f43f af6d 	beq.w	16d16 <ull_conn_done+0x13a>
   16e3c:	4623      	mov	r3, r4
   16e3e:	e746      	b.n	16cce <ull_conn_done+0xf2>
   16e40:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   16e42:	e738      	b.n	16cb6 <ull_conn_done+0xda>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   16e44:	aa08      	add	r2, sp, #32
   16e46:	a909      	add	r1, sp, #36	; 0x24
   16e48:	4630      	mov	r0, r6
   16e4a:	f7e9 fd61 	bl	910 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   16e4e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   16e52:	b383      	cbz	r3, 16eb6 <ull_conn_done+0x2da>
				lll->latency_event = 0;
   16e54:	2300      	movs	r3, #0
   16e56:	84ab      	strh	r3, [r5, #36]	; 0x24
   16e58:	e6ec      	b.n	16c34 <ull_conn_done+0x58>
			if (conn->apto_expire == 0U) {
   16e5a:	f8b4 10d4 	ldrh.w	r1, [r4, #212]	; 0xd4
   16e5e:	2900      	cmp	r1, #0
   16e60:	f47f aed3 	bne.w	16c0a <ull_conn_done+0x2e>
   16e64:	e799      	b.n	16d9a <ull_conn_done+0x1be>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   16e66:	4620      	mov	r0, r4
   16e68:	2108      	movs	r1, #8
   16e6a:	f7ff fe39 	bl	16ae0 <conn_cleanup>
			return;
   16e6e:	e752      	b.n	16d16 <ull_conn_done+0x13a>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   16e70:	4620      	mov	r0, r4
   16e72:	2122      	movs	r1, #34	; 0x22
   16e74:	f7ff fe34 	bl	16ae0 <conn_cleanup>
			return;
   16e78:	e74d      	b.n	16d16 <ull_conn_done+0x13a>
				conn->apto_expire = 1U;
   16e7a:	2301      	movs	r3, #1
   16e7c:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   16e80:	e6f7      	b.n	16c72 <ull_conn_done+0x96>
					force = conn->slave.force & 0x01;
   16e82:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
					conn->slave.force >>= 1U;
   16e86:	085a      	lsrs	r2, r3, #1
					if (force) {
   16e88:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   16e8c:	bf17      	itett	ne
   16e8e:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   16e92:	f8c4 20e0 	streq.w	r2, [r4, #224]	; 0xe0
						conn->slave.force |= BIT(31);
   16e96:	f8c4 20e0 	strne.w	r2, [r4, #224]	; 0xe0
					force = conn->slave.force & 0x01;
   16e9a:	461f      	movne	r7, r3
   16e9c:	e6d5      	b.n	16c4a <ull_conn_done+0x6e>
				conn->llcp_ack -= 2U;
   16e9e:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
   16ea0:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   16ea2:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
				conn->llcp_type = LLCP_PING;
   16ea6:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   16eaa:	e6fb      	b.n	16ca4 <ull_conn_done+0xc8>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   16eac:	4620      	mov	r0, r4
   16eae:	213e      	movs	r1, #62	; 0x3e
   16eb0:	f7ff fe16 	bl	16ae0 <conn_cleanup>
			return;
   16eb4:	e72f      	b.n	16d16 <ull_conn_done+0x13a>
				ull_conn_tx_demux(UINT8_MAX);
   16eb6:	20ff      	movs	r0, #255	; 0xff
   16eb8:	f7ff fdc2 	bl	16a40 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   16ebc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   16ec0:	2b00      	cmp	r3, #0
   16ec2:	d1c7      	bne.n	16e54 <ull_conn_done+0x278>
   16ec4:	e9d5 0116 	ldrd	r0, r1, [r5, #88]	; 0x58
   16ec8:	463a      	mov	r2, r7
   16eca:	f7f8 fd2f 	bl	f92c <memq_peek>
   16ece:	2800      	cmp	r0, #0
   16ed0:	d1c0      	bne.n	16e54 <ull_conn_done+0x278>
			} else if (lll->slave.latency_enabled) {
   16ed2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   16ed6:	07db      	lsls	r3, r3, #31
				lll->latency_event = lll->latency;
   16ed8:	bf44      	itt	mi
   16eda:	8c2b      	ldrhmi	r3, [r5, #32]
   16edc:	84ab      	strhmi	r3, [r5, #36]	; 0x24
   16ede:	e6a9      	b.n	16c34 <ull_conn_done+0x58>
   16ee0:	0001473d 	.word	0x0001473d
   16ee4:	00025ad4 	.word	0x00025ad4
   16ee8:	00025c44 	.word	0x00025c44
   16eec:	0002561c 	.word	0x0002561c

00016ef0 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   16ef0:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   16ef4:	2b00      	cmp	r3, #0
   16ef6:	f000 80e7 	beq.w	170c8 <ull_conn_tx_lll_enqueue+0x1d8>
   16efa:	3901      	subs	r1, #1
{
   16efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   16f00:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 170d0 <ull_conn_tx_lll_enqueue+0x1e0>
		LL_ASSERT(link);
   16f04:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 170d4 <ull_conn_tx_lll_enqueue+0x1e4>
   16f08:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 170d8 <ull_conn_tx_lll_enqueue+0x1e8>
   16f0c:	4604      	mov	r4, r0
   16f0e:	b2cd      	uxtb	r5, r1
   16f10:	e012      	b.n	16f38 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   16f12:	4640      	mov	r0, r8
   16f14:	f7f8 fc9e 	bl	f854 <mem_acquire>
		LL_ASSERT(link);
   16f18:	4607      	mov	r7, r0
   16f1a:	2800      	cmp	r0, #0
   16f1c:	d066      	beq.n	16fec <ull_conn_tx_lll_enqueue+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   16f1e:	4631      	mov	r1, r6
   16f20:	4638      	mov	r0, r7
   16f22:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   16f26:	f7f8 fcf9 	bl	f91c <memq_enqueue>
	while (conn->tx_head &&
   16f2a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   16f2e:	3d01      	subs	r5, #1
   16f30:	b2ed      	uxtb	r5, r5
   16f32:	2b00      	cmp	r3, #0
   16f34:	f000 8089 	beq.w	1704a <ull_conn_tx_lll_enqueue+0x15a>
		 !conn->llcp_phy.pause_tx &&
   16f38:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
	while (conn->tx_head &&
   16f3c:	07d1      	lsls	r1, r2, #31
   16f3e:	d403      	bmi.n	16f48 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   16f40:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
		 !conn->llcp_phy.pause_tx &&
   16f44:	0792      	lsls	r2, r2, #30
   16f46:	d566      	bpl.n	17016 <ull_conn_tx_lll_enqueue+0x126>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   16f48:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   16f4c:	4293      	cmp	r3, r2
   16f4e:	d17c      	bne.n	1704a <ull_conn_tx_lll_enqueue+0x15a>
   16f50:	2dff      	cmp	r5, #255	; 0xff
   16f52:	d07a      	beq.n	1704a <ull_conn_tx_lll_enqueue+0x15a>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   16f54:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
   16f58:	4620      	mov	r0, r4
   16f5a:	f7fd f9e9 	bl	14330 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   16f5e:	7903      	ldrb	r3, [r0, #4]
   16f60:	f003 0303 	and.w	r3, r3, #3
   16f64:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   16f66:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   16f68:	d1d3      	bne.n	16f12 <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   16f6a:	79c3      	ldrb	r3, [r0, #7]
   16f6c:	3b03      	subs	r3, #3
   16f6e:	2b14      	cmp	r3, #20
   16f70:	d8cf      	bhi.n	16f12 <ull_conn_tx_lll_enqueue+0x22>
   16f72:	a201      	add	r2, pc, #4	; (adr r2, 16f78 <ull_conn_tx_lll_enqueue+0x88>)
   16f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16f78:	00016fd5 	.word	0x00016fd5
   16f7c:	00016fd5 	.word	0x00016fd5
   16f80:	00016f13 	.word	0x00016f13
   16f84:	00016f13 	.word	0x00016f13
   16f88:	00016f13 	.word	0x00016f13
   16f8c:	00016f13 	.word	0x00016f13
   16f90:	00016f13 	.word	0x00016f13
   16f94:	00016fd5 	.word	0x00016fd5
   16f98:	00016fcd 	.word	0x00016fcd
   16f9c:	00016f13 	.word	0x00016f13
   16fa0:	00016f13 	.word	0x00016f13
   16fa4:	00016f13 	.word	0x00016f13
   16fa8:	00016f13 	.word	0x00016f13
   16fac:	00016f13 	.word	0x00016f13
   16fb0:	00016f13 	.word	0x00016f13
   16fb4:	00016f13 	.word	0x00016f13
   16fb8:	00016f13 	.word	0x00016f13
   16fbc:	00016f13 	.word	0x00016f13
   16fc0:	00016f13 	.word	0x00016f13
   16fc4:	00017009 	.word	0x00017009
   16fc8:	00017009 	.word	0x00017009
		if (!conn->lll.role) {
   16fcc:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   16fd0:	2b00      	cmp	r3, #0
   16fd2:	da9e      	bge.n	16f12 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   16fd4:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   16fd8:	f043 0302 	orr.w	r3, r3, #2
   16fdc:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		link = mem_acquire(&mem_link_tx.free);
   16fe0:	4640      	mov	r0, r8
   16fe2:	f7f8 fc37 	bl	f854 <mem_acquire>
		LL_ASSERT(link);
   16fe6:	4607      	mov	r7, r0
   16fe8:	2800      	cmp	r0, #0
   16fea:	d198      	bne.n	16f1e <ull_conn_tx_lll_enqueue+0x2e>
   16fec:	4837      	ldr	r0, [pc, #220]	; (170cc <ull_conn_tx_lll_enqueue+0x1dc>)
   16fee:	f240 5372 	movw	r3, #1394	; 0x572
   16ff2:	4652      	mov	r2, sl
   16ff4:	4649      	mov	r1, r9
   16ff6:	f008 f82d 	bl	1f054 <printk>
   16ffa:	4040      	eors	r0, r0
   16ffc:	f380 8811 	msr	BASEPRI, r0
   17000:	f04f 0003 	mov.w	r0, #3
   17004:	df02      	svc	2
   17006:	e78a      	b.n	16f1e <ull_conn_tx_lll_enqueue+0x2e>
		conn->llcp_phy.pause_tx = 1U;
   17008:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   1700c:	f043 0301 	orr.w	r3, r3, #1
   17010:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		break;
   17014:	e77d      	b.n	16f12 <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   17016:	791a      	ldrb	r2, [r3, #4]
   17018:	f002 0203 	and.w	r2, r2, #3
   1701c:	2a03      	cmp	r2, #3
   1701e:	d197      	bne.n	16f50 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   17020:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   17022:	2a03      	cmp	r2, #3
   17024:	d001      	beq.n	1702a <ull_conn_tx_lll_enqueue+0x13a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   17026:	2a0a      	cmp	r2, #10
   17028:	d192      	bne.n	16f50 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   1702a:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   1702e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   17032:	428a      	cmp	r2, r1
   17034:	d00b      	beq.n	1704e <ull_conn_tx_lll_enqueue+0x15e>
   17036:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   1703a:	2a03      	cmp	r2, #3
   1703c:	d088      	beq.n	16f50 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   1703e:	681a      	ldr	r2, [r3, #0]
   17040:	b11a      	cbz	r2, 1704a <ull_conn_tx_lll_enqueue+0x15a>
   17042:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   17046:	428a      	cmp	r2, r1
   17048:	d02d      	beq.n	170a6 <ull_conn_tx_lll_enqueue+0x1b6>
}
   1704a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		    ((conn->llcp_req == conn->llcp_ack) &&
   1704e:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
   17052:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
   17056:	4288      	cmp	r0, r1
   17058:	d1f1      	bne.n	1703e <ull_conn_tx_lll_enqueue+0x14e>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   1705a:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
   1705e:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
   17062:	4288      	cmp	r0, r1
   17064:	d1eb      	bne.n	1703e <ull_conn_tx_lll_enqueue+0x14e>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   17066:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   1706a:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   1706e:	4288      	cmp	r0, r1
   17070:	d1e5      	bne.n	1703e <ull_conn_tx_lll_enqueue+0x14e>
		       conn->llcp_conn_param.req) ||
   17072:	f894 0199 	ldrb.w	r0, [r4, #409]	; 0x199
   17076:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
   1707a:	4288      	cmp	r0, r1
   1707c:	d1df      	bne.n	1703e <ull_conn_tx_lll_enqueue+0x14e>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   1707e:	f894 01a9 	ldrb.w	r0, [r4, #425]	; 0x1a9
   17082:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   17086:	4288      	cmp	r0, r1
   17088:	d1d9      	bne.n	1703e <ull_conn_tx_lll_enqueue+0x14e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1708a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1708e:	2101      	movs	r1, #1
   17090:	f361 0301 	bfi	r3, r1, #0, #2
			conn->llcp_ack -= 2U;
   17094:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
   17096:	2103      	movs	r1, #3
			conn->llcp_ack -= 2U;
   17098:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1709c:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
			conn->llcp_type = LLCP_ENCRYPTION;
   170a0:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   170a4:	e754      	b.n	16f50 <ull_conn_tx_lll_enqueue+0x60>
				tx->next = conn->tx_ctrl_last->next;
   170a6:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
				if (!conn->tx_data_last) {
   170aa:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
				conn->tx_head = tx->next;
   170ae:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
				tx->next = conn->tx_ctrl_last->next;
   170b2:	680a      	ldr	r2, [r1, #0]
   170b4:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   170b6:	600b      	str	r3, [r1, #0]
				conn->tx_data = tx;
   170b8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
				if (!conn->tx_data_last) {
   170bc:	2800      	cmp	r0, #0
   170be:	f47f af47 	bne.w	16f50 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   170c2:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
   170c6:	e743      	b.n	16f50 <ull_conn_tx_lll_enqueue+0x60>
   170c8:	4770      	bx	lr
   170ca:	bf00      	nop
   170cc:	0002561c 	.word	0x0002561c
   170d0:	20003760 	.word	0x20003760
   170d4:	00025ad4 	.word	0x00025ad4
   170d8:	00025b2c 	.word	0x00025b2c

000170dc <tx_demux>:
{
   170dc:	b510      	push	{r4, lr}
   170de:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   170e0:	2001      	movs	r0, #1
   170e2:	f7ff fcad 	bl	16a40 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   170e6:	4620      	mov	r0, r4
   170e8:	2101      	movs	r1, #1
}
   170ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   170ee:	f7ff beff 	b.w	16ef0 <ull_conn_tx_lll_enqueue>
   170f2:	bf00      	nop

000170f4 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   170f4:	4901      	ldr	r1, [pc, #4]	; (170fc <ull_conn_link_tx_release+0x8>)
   170f6:	f7f8 bbc7 	b.w	f888 <mem_release>
   170fa:	bf00      	nop
   170fc:	20003760 	.word	0x20003760

00017100 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   17100:	4b01      	ldr	r3, [pc, #4]	; (17108 <ull_conn_ack_last_idx_get+0x8>)
}
   17102:	78d8      	ldrb	r0, [r3, #3]
   17104:	4770      	bx	lr
   17106:	bf00      	nop
   17108:	2000051c 	.word	0x2000051c

0001710c <ull_conn_ack_peek>:
{
   1710c:	b4f0      	push	{r4, r5, r6, r7}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1710e:	4b0b      	ldr	r3, [pc, #44]	; (1713c <ull_conn_ack_peek+0x30>)
   17110:	789c      	ldrb	r4, [r3, #2]
   17112:	78de      	ldrb	r6, [r3, #3]
   17114:	781f      	ldrb	r7, [r3, #0]
	if (first == last) {
   17116:	42b4      	cmp	r4, r6
   17118:	d00d      	beq.n	17136 <ull_conn_ack_peek+0x2a>
	return (void *)(fifo + first * size);
   1711a:	3304      	adds	r3, #4
   1711c:	fb14 f407 	smulbb	r4, r4, r7
	if (!lll_tx) {
   17120:	4605      	mov	r5, r0
   17122:	1918      	adds	r0, r3, r4
   17124:	d005      	beq.n	17132 <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   17126:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   17128:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   1712a:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   1712c:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   1712e:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   17130:	6818      	ldr	r0, [r3, #0]
}
   17132:	bcf0      	pop	{r4, r5, r6, r7}
   17134:	4770      	bx	lr
		return NULL;
   17136:	2000      	movs	r0, #0
   17138:	e7fb      	b.n	17132 <ull_conn_ack_peek+0x26>
   1713a:	bf00      	nop
   1713c:	2000051c 	.word	0x2000051c

00017140 <ull_conn_ack_by_last_peek>:
{
   17140:	b430      	push	{r4, r5}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   17142:	4b09      	ldr	r3, [pc, #36]	; (17168 <ull_conn_ack_by_last_peek+0x28>)
   17144:	789c      	ldrb	r4, [r3, #2]
   17146:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   17148:	4284      	cmp	r4, r0
   1714a:	d00b      	beq.n	17164 <ull_conn_ack_by_last_peek+0x24>
	return (void *)(fifo + first * size);
   1714c:	3304      	adds	r3, #4
   1714e:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   17152:	1918      	adds	r0, r3, r4
   17154:	d004      	beq.n	17160 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   17156:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   17158:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   1715a:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   1715c:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1715e:	6818      	ldr	r0, [r3, #0]
}
   17160:	bc30      	pop	{r4, r5}
   17162:	4770      	bx	lr
		return NULL;
   17164:	2000      	movs	r0, #0
   17166:	e7fb      	b.n	17160 <ull_conn_ack_by_last_peek+0x20>
   17168:	2000051c 	.word	0x2000051c

0001716c <ull_conn_ack_dequeue>:
{
   1716c:	b410      	push	{r4}
	return MFIFO_DEQUEUE(conn_ack);
   1716e:	4b0a      	ldr	r3, [pc, #40]	; (17198 <ull_conn_ack_dequeue+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   17170:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   17172:	78da      	ldrb	r2, [r3, #3]
   17174:	7818      	ldrb	r0, [r3, #0]
   17176:	785c      	ldrb	r4, [r3, #1]
   17178:	428a      	cmp	r2, r1
   1717a:	d00a      	beq.n	17192 <ull_conn_ack_dequeue+0x26>
	_first += 1U;
   1717c:	1c4a      	adds	r2, r1, #1
   1717e:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   17180:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   17184:	4294      	cmp	r4, r2
   17186:	bf08      	it	eq
   17188:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1718a:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1718c:	709a      	strb	r2, [r3, #2]
}
   1718e:	bc10      	pop	{r4}
   17190:	4770      	bx	lr
		return NULL;
   17192:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   17194:	e7fb      	b.n	1718e <ull_conn_ack_dequeue+0x22>
   17196:	bf00      	nop
   17198:	2000051c 	.word	0x2000051c

0001719c <ull_conn_lll_ack_enqueue>:
{
   1719c:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1719e:	4a13      	ldr	r2, [pc, #76]	; (171ec <ull_conn_lll_ack_enqueue+0x50>)
   171a0:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   171a2:	7855      	ldrb	r5, [r2, #1]
   171a4:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   171a6:	1c73      	adds	r3, r6, #1
   171a8:	b2db      	uxtb	r3, r3
		last = 0U;
   171aa:	429d      	cmp	r5, r3
   171ac:	bf08      	it	eq
   171ae:	2300      	moveq	r3, #0
	if (last == first) {
   171b0:	429c      	cmp	r4, r3
   171b2:	d00a      	beq.n	171ca <ull_conn_lll_ack_enqueue+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   171b4:	4615      	mov	r5, r2
   171b6:	f815 4b04 	ldrb.w	r4, [r5], #4
   171ba:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   171be:	192e      	adds	r6, r5, r4
   171c0:	d003      	beq.n	171ca <ull_conn_lll_ack_enqueue+0x2e>
	lll_tx->handle = handle;
   171c2:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   171c4:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   171c6:	6071      	str	r1, [r6, #4]
}
   171c8:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(lll_tx);
   171ca:	4a09      	ldr	r2, [pc, #36]	; (171f0 <ull_conn_lll_ack_enqueue+0x54>)
   171cc:	4909      	ldr	r1, [pc, #36]	; (171f4 <ull_conn_lll_ack_enqueue+0x58>)
   171ce:	480a      	ldr	r0, [pc, #40]	; (171f8 <ull_conn_lll_ack_enqueue+0x5c>)
   171d0:	f44f 63b6 	mov.w	r3, #1456	; 0x5b0
   171d4:	f007 ff3e 	bl	1f054 <printk>
   171d8:	4040      	eors	r0, r0
   171da:	f380 8811 	msr	BASEPRI, r0
   171de:	f04f 0003 	mov.w	r0, #3
   171e2:	df02      	svc	2
	lll_tx->handle = handle;
   171e4:	2300      	movs	r3, #0
   171e6:	801b      	strh	r3, [r3, #0]
   171e8:	deff      	udf	#255	; 0xff
   171ea:	bf00      	nop
   171ec:	2000051c 	.word	0x2000051c
   171f0:	00025ad4 	.word	0x00025ad4
   171f4:	00025b1c 	.word	0x00025b1c
   171f8:	0002561c 	.word	0x0002561c

000171fc <ull_conn_tx_ack>:
{
   171fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   171fe:	7953      	ldrb	r3, [r2, #5]
{
   17200:	b083      	sub	sp, #12
   17202:	4614      	mov	r4, r2
   17204:	4605      	mov	r5, r0
   17206:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   17208:	b37b      	cbz	r3, 1726a <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1720a:	7923      	ldrb	r3, [r4, #4]
   1720c:	f003 0203 	and.w	r2, r3, #3
   17210:	2a03      	cmp	r2, #3
   17212:	d00d      	beq.n	17230 <ull_conn_tx_ack+0x34>
	} else if (handle == 0xFFFF) {
   17214:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17218:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   1721a:	bf04      	itt	eq
   1721c:	f36f 0301 	bfceq	r3, #0, #2
   17220:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   17222:	4621      	mov	r1, r4
   17224:	4628      	mov	r0, r5
}
   17226:	b003      	add	sp, #12
   17228:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   1722c:	f7fc ba2e 	b.w	1368c <ll_tx_ack_put>
		if (handle != 0xFFFF) {
   17230:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17234:	429d      	cmp	r5, r3
   17236:	d126      	bne.n	17286 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   17238:	6830      	ldr	r0, [r6, #0]
   1723a:	4284      	cmp	r4, r0
   1723c:	d04b      	beq.n	172d6 <ull_conn_tx_ack+0xda>
			LL_ASSERT(!link->next);
   1723e:	2800      	cmp	r0, #0
   17240:	d0ef      	beq.n	17222 <ull_conn_tx_ack+0x26>
   17242:	4ac0      	ldr	r2, [pc, #768]	; (17544 <ull_conn_tx_ack+0x348>)
   17244:	49c0      	ldr	r1, [pc, #768]	; (17548 <ull_conn_tx_ack+0x34c>)
   17246:	48c1      	ldr	r0, [pc, #772]	; (1754c <ull_conn_tx_ack+0x350>)
   17248:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
   1724c:	f007 ff02 	bl	1f054 <printk>
   17250:	4040      	eors	r0, r0
   17252:	f380 8811 	msr	BASEPRI, r0
   17256:	f04f 0003 	mov.w	r0, #3
   1725a:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   1725c:	4621      	mov	r1, r4
   1725e:	4628      	mov	r0, r5
}
   17260:	b003      	add	sp, #12
   17262:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   17266:	f7fc ba11 	b.w	1368c <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   1726a:	4ab6      	ldr	r2, [pc, #728]	; (17544 <ull_conn_tx_ack+0x348>)
   1726c:	49b8      	ldr	r1, [pc, #736]	; (17550 <ull_conn_tx_ack+0x354>)
   1726e:	48b7      	ldr	r0, [pc, #732]	; (1754c <ull_conn_tx_ack+0x350>)
   17270:	f240 53bd 	movw	r3, #1469	; 0x5bd
   17274:	f007 feee 	bl	1f054 <printk>
   17278:	4040      	eors	r0, r0
   1727a:	f380 8811 	msr	BASEPRI, r0
   1727e:	f04f 0003 	mov.w	r0, #3
   17282:	df02      	svc	2
   17284:	e7c1      	b.n	1720a <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17286:	48b3      	ldr	r0, [pc, #716]	; (17554 <ull_conn_tx_ack+0x358>)
   17288:	462a      	mov	r2, r5
   1728a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1728e:	f7f8 fb13 	bl	f8b8 <mem_get>
   17292:	79e3      	ldrb	r3, [r4, #7]
   17294:	3b02      	subs	r3, #2
   17296:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   17298:	2b16      	cmp	r3, #22
   1729a:	d818      	bhi.n	172ce <ull_conn_tx_ack+0xd2>
   1729c:	e8df f013 	tbh	[pc, r3, lsl #1]
   172a0:	00f70113 	.word	0x00f70113
   172a4:	00170048 	.word	0x00170048
   172a8:	00170017 	.word	0x00170017
   172ac:	00170017 	.word	0x00170017
   172b0:	005d00e6 	.word	0x005d00e6
   172b4:	00530017 	.word	0x00530017
   172b8:	00170017 	.word	0x00170017
   172bc:	004f0017 	.word	0x004f0017
   172c0:	00170017 	.word	0x00170017
   172c4:	00a400cd 	.word	0x00a400cd
   172c8:	00280021 	.word	0x00280021
   172cc:	00d5      	.short	0x00d5
		if (link->next == (void *)tx) {
   172ce:	6830      	ldr	r0, [r6, #0]
   172d0:	42a0      	cmp	r0, r4
   172d2:	d1b4      	bne.n	1723e <ull_conn_tx_ack+0x42>
   172d4:	4620      	mov	r0, r4
			mem_release(tx, &mem_conn_tx_ctrl.free);
   172d6:	49a0      	ldr	r1, [pc, #640]	; (17558 <ull_conn_tx_ack+0x35c>)
}
   172d8:	b003      	add	sp, #12
   172da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   172de:	f7f8 bad3 	b.w	f888 <mem_release>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   172e2:	f890 31aa 	ldrb.w	r3, [r0, #426]	; 0x1aa
   172e6:	2202      	movs	r2, #2
   172e8:	f362 0301 	bfi	r3, r2, #0, #2
   172ec:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
		if (conn->lll.role) {
   172f0:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
   172f4:	2b00      	cmp	r3, #0
   172f6:	da14      	bge.n	17322 <ull_conn_tx_ack+0x126>
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   172f8:	4998      	ldr	r1, [pc, #608]	; (1755c <ull_conn_tx_ack+0x360>)
			phys = conn->llcp_phy.tx | lll->phy_tx;
   172fa:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
   172fe:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   17302:	c903      	ldmia	r1, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   17304:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   17308:	f10d 0c08 	add.w	ip, sp, #8
   1730c:	e90c 0003 	stmdb	ip, {r0, r1}
			lll->phy_tx_time = phy_tx_time[phys];
   17310:	f003 0307 	and.w	r3, r3, #7
   17314:	4463      	add	r3, ip
   17316:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   1731a:	f363 1206 	bfi	r2, r3, #4, #3
   1731e:	f887 2064 	strb.w	r2, [r7, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   17322:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
   17326:	f36f 0300 	bfc	r3, #0, #1
   1732a:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
		break;
   1732e:	e783      	b.n	17238 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   17330:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
   17334:	f043 0302 	orr.w	r3, r3, #2
   17338:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
   1733c:	e77c      	b.n	17238 <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   1733e:	7a23      	ldrb	r3, [r4, #8]
   17340:	2b03      	cmp	r3, #3
   17342:	f47f af79 	bne.w	17238 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   17346:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
		conn->procedure_expire = 0U;
   1734a:	2200      	movs	r2, #0
		conn->llcp_enc.pause_rx = 0U;
   1734c:	f023 0303 	bic.w	r3, r3, #3
   17350:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
		conn->procedure_expire = 0U;
   17354:	f8a7 20cc 	strh.w	r2, [r7, #204]	; 0xcc
		break;
   17358:	e76e      	b.n	17238 <ull_conn_tx_ack+0x3c>
		if (!conn->lll.role) {
   1735a:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   1735e:	2b00      	cmp	r3, #0
   17360:	dbe6      	blt.n	17330 <ull_conn_tx_ack+0x134>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17362:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   17364:	2203      	movs	r2, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17366:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1736a:	2117      	movs	r1, #23
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1736c:	71e2      	strb	r2, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   1736e:	2208      	movs	r2, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17370:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   17372:	7161      	strb	r1, [r4, #5]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   17374:	f200 1155 	addw	r1, r0, #341	; 0x155
   17378:	18a0      	adds	r0, r4, r2
   1737a:	f00a f994 	bl	216a6 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   1737e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
   17382:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   17384:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
   17388:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   1738a:	210c      	movs	r1, #12
   1738c:	f104 0012 	add.w	r0, r4, #18
   17390:	f001 fc4a 	bl	18c28 <lll_csrand_isr_get>
	    conn->tx_head &&
   17394:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
	if (
   17398:	2b00      	cmp	r3, #0
   1739a:	f000 80ad 	beq.w	174f8 <ull_conn_tx_ack+0x2fc>
	    !conn->llcp_enc.pause_tx &&
   1739e:	f897 2152 	ldrb.w	r2, [r7, #338]	; 0x152
	    conn->tx_head &&
   173a2:	0791      	lsls	r1, r2, #30
   173a4:	f100 80a8 	bmi.w	174f8 <ull_conn_tx_ack+0x2fc>
	    !conn->llcp_phy.pause_tx &&
   173a8:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
   173ac:	07d2      	lsls	r2, r2, #31
   173ae:	f100 80a3 	bmi.w	174f8 <ull_conn_tx_ack+0x2fc>
		if (conn->tx_head == conn->tx_data) {
   173b2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
   173b6:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   173b8:	bf04      	itt	eq
   173ba:	681a      	ldreq	r2, [r3, #0]
   173bc:	f8c7 21bc 	streq.w	r2, [r7, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   173c0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
   173c4:	2a00      	cmp	r2, #0
   173c6:	f000 80b6 	beq.w	17536 <ull_conn_tx_ack+0x33a>
	tx->next = conn->tx_ctrl_last->next;
   173ca:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
   173ce:	681a      	ldr	r2, [r3, #0]
   173d0:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   173d2:	601c      	str	r4, [r3, #0]
	conn->tx_ctrl_last = tx;
   173d4:	6823      	ldr	r3, [r4, #0]
   173d6:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
	if (!tx->next) {
   173da:	6832      	ldr	r2, [r6, #0]
   173dc:	2b00      	cmp	r3, #0
   173de:	d079      	beq.n	174d4 <ull_conn_tx_ack+0x2d8>
		if (link->next == (void *)tx) {
   173e0:	2a00      	cmp	r2, #0
   173e2:	d07a      	beq.n	174da <ull_conn_tx_ack+0x2de>
}
   173e4:	b003      	add	sp, #12
   173e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   173e8:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
   173ec:	f890 3199 	ldrb.w	r3, [r0, #409]	; 0x199
   173f0:	428b      	cmp	r3, r1
   173f2:	f43f af21 	beq.w	17238 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   173f6:	f890 219a 	ldrb.w	r2, [r0, #410]	; 0x19a
   173fa:	f002 0307 	and.w	r3, r2, #7
   173fe:	2b03      	cmp	r3, #3
   17400:	d005      	beq.n	1740e <ull_conn_tx_ack+0x212>
   17402:	3303      	adds	r3, #3
   17404:	f003 0307 	and.w	r3, r3, #7
   17408:	2b01      	cmp	r3, #1
   1740a:	f63f af60 	bhi.w	172ce <ull_conn_tx_ack+0xd2>
				conn->lll.max_tx_octets =
   1740e:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
   17412:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				if (conn->llcp_length.state ==
   17416:	f002 0307 	and.w	r3, r2, #7
				conn->lll.max_tx_time =
   1741a:	f8b7 01a2 	ldrh.w	r0, [r7, #418]	; 0x1a2
   1741e:	f8a7 0060 	strh.w	r0, [r7, #96]	; 0x60
				if (conn->llcp_length.state ==
   17422:	2b05      	cmp	r3, #5
   17424:	f000 8081 	beq.w	1752a <ull_conn_tx_ack+0x32e>
				if (!conn->llcp_length.cache.tx_octets) {
   17428:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
   1742c:	2b00      	cmp	r3, #0
   1742e:	d16e      	bne.n	1750e <ull_conn_tx_ack+0x312>
					conn->llcp_length.ack =
   17430:	f887 1199 	strb.w	r1, [r7, #409]	; 0x199
					conn->procedure_expire = 0U;
   17434:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
					break;
   17438:	e6fe      	b.n	17238 <ull_conn_tx_ack+0x3c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   1743a:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   1743e:	2202      	movs	r2, #2
   17440:	f362 0302 	bfi	r3, r2, #0, #3
   17444:	f880 319a 	strb.w	r3, [r0, #410]	; 0x19a
		break;
   17448:	e6f6      	b.n	17238 <ull_conn_tx_ack+0x3c>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1744a:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   1744e:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   17452:	f890 21ab 	ldrb.w	r2, [r0, #427]	; 0x1ab
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   17456:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1745a:	f363 1106 	bfi	r1, r3, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   1745e:	f36f 0200 	bfc	r2, #0, #1
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   17462:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   17466:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
		break;
   1746a:	e6e5      	b.n	17238 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_tx = 1U;
   1746c:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   17470:	f8b0 20ca 	ldrh.w	r2, [r0, #202]	; 0xca
   17474:	f8a0 20cc 	strh.w	r2, [r0, #204]	; 0xcc
		conn->llcp_enc.pause_tx = 1U;
   17478:	f023 0306 	bic.w	r3, r3, #6
		conn->llcp_enc.ack = conn->llcp_enc.req;
   1747c:	f890 2150 	ldrb.w	r2, [r0, #336]	; 0x150
   17480:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
		conn->llcp_enc.pause_tx = 1U;
   17484:	f043 0306 	orr.w	r3, r3, #6
   17488:	f880 3152 	strb.w	r3, [r0, #338]	; 0x152
		break;
   1748c:	e6d4      	b.n	17238 <ull_conn_tx_ack+0x3c>
		memcpy(&conn->llcp.encryption.skd[0],
   1748e:	2208      	movs	r2, #8
   17490:	f104 0112 	add.w	r1, r4, #18
   17494:	30ee      	adds	r0, #238	; 0xee
   17496:	f00a f906 	bl	216a6 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   1749a:	2204      	movs	r2, #4
   1749c:	f104 011a 	add.w	r1, r4, #26
   174a0:	f107 0098 	add.w	r0, r7, #152	; 0x98
   174a4:	f00a f8ff 	bl	216a6 <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   174a8:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   174ac:	f8b7 10ca 	ldrh.w	r1, [r7, #202]	; 0xca
		conn->llcp_enc.ack = conn->llcp_enc.req;
   174b0:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
		conn->procedure_expire = conn->procedure_reload;
   174b4:	f8a7 10cc 	strh.w	r1, [r7, #204]	; 0xcc
		conn->llcp_enc.pause_tx = 1U;
   174b8:	f043 0302 	orr.w	r3, r3, #2
   174bc:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
		conn->llcp_enc.ack = conn->llcp_enc.req;
   174c0:	f887 2151 	strb.w	r2, [r7, #337]	; 0x151
		break;
   174c4:	e6b8      	b.n	17238 <ull_conn_tx_ack+0x3c>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   174c6:	7a21      	ldrb	r1, [r4, #8]
   174c8:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   174ca:	bf08      	it	eq
   174cc:	2116      	moveq	r1, #22
   174ce:	f7ff fb07 	bl	16ae0 <conn_cleanup>
	break;
   174d2:	e6b1      	b.n	17238 <ull_conn_tx_ack+0x3c>
		conn->tx_data_last = tx;
   174d4:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
   174d8:	e782      	b.n	173e0 <ull_conn_tx_ack+0x1e4>
			LL_ASSERT(link->next);
   174da:	4a1a      	ldr	r2, [pc, #104]	; (17544 <ull_conn_tx_ack+0x348>)
   174dc:	4920      	ldr	r1, [pc, #128]	; (17560 <ull_conn_tx_ack+0x364>)
   174de:	481b      	ldr	r0, [pc, #108]	; (1754c <ull_conn_tx_ack+0x350>)
   174e0:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
   174e4:	f007 fdb6 	bl	1f054 <printk>
   174e8:	4040      	eors	r0, r0
   174ea:	f380 8811 	msr	BASEPRI, r0
   174ee:	f04f 0003 	mov.w	r0, #3
   174f2:	df02      	svc	2
   174f4:	2000      	movs	r0, #0
   174f6:	e6ee      	b.n	172d6 <ull_conn_tx_ack+0xda>
		if (!conn->tx_ctrl) {
   174f8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
   174fc:	2a00      	cmp	r2, #0
   174fe:	f47f af64 	bne.w	173ca <ull_conn_tx_ack+0x1ce>
			tx->next = conn->tx_head;
   17502:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   17504:	e9c7 446c 	strd	r4, r4, [r7, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   17508:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
   1750c:	e765      	b.n	173da <ull_conn_tx_ack+0x1de>
				conn->llcp_length.cache.tx_octets = 0;
   1750e:	2100      	movs	r1, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17510:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_length.tx_octets =
   17514:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
				conn->llcp_length.tx_time =
   17518:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1751c:	f887 219a 	strb.w	r2, [r7, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
   17520:	f8a7 11a4 	strh.w	r1, [r7, #420]	; 0x1a4
				conn->llcp_length.tx_time =
   17524:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
				break;
   17528:	e686      	b.n	17238 <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   1752a:	2304      	movs	r3, #4
   1752c:	f363 0202 	bfi	r2, r3, #0, #3
   17530:	f887 219a 	strb.w	r2, [r7, #410]	; 0x19a
					break;
   17534:	e680      	b.n	17238 <ull_conn_tx_ack+0x3c>
			tx->next = conn->tx_head->next;
   17536:	681a      	ldr	r2, [r3, #0]
   17538:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   1753a:	601c      	str	r4, [r3, #0]
				conn->tx_ctrl = tx;
   1753c:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   1753e:	e9c7 446d 	strd	r4, r4, [r7, #436]	; 0x1b4
   17542:	e74a      	b.n	173da <ull_conn_tx_ack+0x1de>
   17544:	00025ad4 	.word	0x00025ad4
   17548:	00025cac 	.word	0x00025cac
   1754c:	0002561c 	.word	0x0002561c
   17550:	00025ca0 	.word	0x00025ca0
   17554:	20003490 	.word	0x20003490
   17558:	200036dc 	.word	0x200036dc
   1755c:	00025cc4 	.word	0x00025cc4
   17560:	00025cb8 	.word	0x00025cb8

00017564 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   17564:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
   17568:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   1756c:	f3c1 1202 	ubfx	r2, r1, #4, #3
   17570:	2a02      	cmp	r2, #2
   17572:	d010      	beq.n	17596 <ull_conn_lll_max_tx_octets_get+0x32>
   17574:	2a04      	cmp	r2, #4
   17576:	d012      	beq.n	1759e <ull_conn_lll_max_tx_octets_get+0x3a>
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   17578:	08db      	lsrs	r3, r3, #3
   1757a:	3b0a      	subs	r3, #10
   1757c:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   1757e:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
	return max_tx_octets;
   17582:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
	if (lll->enc_tx) {
   17586:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   17588:	bf44      	itt	mi
   1758a:	3b04      	submi	r3, #4
   1758c:	b29b      	uxthmi	r3, r3
}
   1758e:	4298      	cmp	r0, r3
   17590:	bf28      	it	cs
   17592:	4618      	movcs	r0, r3
   17594:	4770      	bx	lr
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   17596:	089b      	lsrs	r3, r3, #2
   17598:	3b0b      	subs	r3, #11
   1759a:	b29b      	uxth	r3, r3
		break;
   1759c:	e7ef      	b.n	1757e <ull_conn_lll_max_tx_octets_get+0x1a>
		if (lll->phy_flags & 0x01) {
   1759e:	0709      	lsls	r1, r1, #28
			max_tx_octets = ((lll->max_tx_time - 592) >>
   175a0:	bf4b      	itete	mi
   175a2:	f5a3 7314 	submi.w	r3, r3, #592	; 0x250
			max_tx_octets = ((lll->max_tx_time - 430) >>
   175a6:	f5a3 73d7 	subpl.w	r3, r3, #430	; 0x1ae
			max_tx_octets = ((lll->max_tx_time - 592) >>
   175aa:	119b      	asrmi	r3, r3, #6
			max_tx_octets = ((lll->max_tx_time - 430) >>
   175ac:	111b      	asrpl	r3, r3, #4
					  4) - 2;
   175ae:	3b02      	subs	r3, #2
			max_tx_octets = ((lll->max_tx_time - 430) >>
   175b0:	b29b      	uxth	r3, r3
   175b2:	e7e4      	b.n	1757e <ull_conn_lll_max_tx_octets_get+0x1a>

000175b4 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   175b4:	b510      	push	{r4, lr}
   175b6:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   175b8:	b930      	cbnz	r0, 175c8 <ticker_update_latency_cancel_op_cb+0x14>

	conn->slave.latency_cancel = 0U;
   175ba:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   175be:	f36f 0341 	bfc	r3, #1, #1
   175c2:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   175c6:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   175c8:	4a09      	ldr	r2, [pc, #36]	; (175f0 <ticker_update_latency_cancel_op_cb+0x3c>)
   175ca:	490a      	ldr	r1, [pc, #40]	; (175f4 <ticker_update_latency_cancel_op_cb+0x40>)
   175cc:	480a      	ldr	r0, [pc, #40]	; (175f8 <ticker_update_latency_cancel_op_cb+0x44>)
   175ce:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
   175d2:	f007 fd3f 	bl	1f054 <printk>
   175d6:	4040      	eors	r0, r0
   175d8:	f380 8811 	msr	BASEPRI, r0
   175dc:	f04f 0003 	mov.w	r0, #3
   175e0:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   175e2:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   175e6:	f36f 0341 	bfc	r3, #1, #1
   175ea:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   175ee:	bd10      	pop	{r4, pc}
   175f0:	00025ce4 	.word	0x00025ce4
   175f4:	00025d28 	.word	0x00025d28
   175f8:	0002561c 	.word	0x0002561c

000175fc <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   175fc:	b900      	cbnz	r0, 17600 <ticker_op_cb+0x4>
   175fe:	4770      	bx	lr
{
   17600:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17602:	4a07      	ldr	r2, [pc, #28]	; (17620 <ticker_op_cb+0x24>)
   17604:	4907      	ldr	r1, [pc, #28]	; (17624 <ticker_op_cb+0x28>)
   17606:	4808      	ldr	r0, [pc, #32]	; (17628 <ticker_op_cb+0x2c>)
   17608:	f44f 73ef 	mov.w	r3, #478	; 0x1de
   1760c:	f007 fd22 	bl	1f054 <printk>
   17610:	4040      	eors	r0, r0
   17612:	f380 8811 	msr	BASEPRI, r0
   17616:	f04f 0003 	mov.w	r0, #3
   1761a:	df02      	svc	2
}
   1761c:	bd08      	pop	{r3, pc}
   1761e:	bf00      	nop
   17620:	00025ce4 	.word	0x00025ce4
   17624:	00025b34 	.word	0x00025b34
   17628:	0002561c 	.word	0x0002561c

0001762c <ticker_op_stop_adv_cb.part.0>:
static void ticker_op_stop_adv_cb(uint32_t status, void *param)
   1762c:	b508      	push	{r3, lr}
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1762e:	4a07      	ldr	r2, [pc, #28]	; (1764c <ticker_op_stop_adv_cb.part.0+0x20>)
   17630:	4907      	ldr	r1, [pc, #28]	; (17650 <ticker_op_stop_adv_cb.part.0+0x24>)
   17632:	4808      	ldr	r0, [pc, #32]	; (17654 <ticker_op_stop_adv_cb.part.0+0x28>)
   17634:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
   17638:	f007 fd0c 	bl	1f054 <printk>
   1763c:	4040      	eors	r0, r0
   1763e:	f380 8811 	msr	BASEPRI, r0
   17642:	f04f 0003 	mov.w	r0, #3
   17646:	df02      	svc	2
}
   17648:	bd08      	pop	{r3, pc}
   1764a:	bf00      	nop
   1764c:	00025ce4 	.word	0x00025ce4
   17650:	00025d3c 	.word	0x00025d3c
   17654:	0002561c 	.word	0x0002561c

00017658 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   17658:	2801      	cmp	r0, #1
   1765a:	d000      	beq.n	1765e <ticker_op_stop_adv_cb+0x6>
   1765c:	4770      	bx	lr
{
   1765e:	b510      	push	{r4, lr}
   17660:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   17662:	f7fc f8a9 	bl	137b8 <ull_disable_mark_get>
   17666:	4284      	cmp	r4, r0
   17668:	d003      	beq.n	17672 <ticker_op_stop_adv_cb+0x1a>
}
   1766a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1766e:	f7ff bfdd 	b.w	1762c <ticker_op_stop_adv_cb.part.0>
   17672:	bd10      	pop	{r4, pc}

00017674 <ull_slave_ticker_cb>:
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   17674:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	; 0x2c
{
   17678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1767a:	461c      	mov	r4, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1767c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17680:	459c      	cmp	ip, r3
   17682:	d02a      	beq.n	176da <ull_slave_ticker_cb+0x66>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   17684:	4605      	mov	r5, r0
   17686:	460f      	mov	r7, r1
   17688:	4601      	mov	r1, r0
   1768a:	4620      	mov	r0, r4
   1768c:	4616      	mov	r6, r2
   1768e:	f7e9 fc5f 	bl	f50 <ull_conn_llcp>
		if (ret) {
   17692:	bb10      	cbnz	r0, 176da <ull_slave_ticker_cb+0x66>
	return ++hdr->ref;
   17694:	7c23      	ldrb	r3, [r4, #16]
   17696:	3301      	adds	r3, #1
   17698:	b2db      	uxtb	r3, r3
   1769a:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   1769c:	b363      	cbz	r3, 176f8 <ull_slave_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   1769e:	f8df c088 	ldr.w	ip, [pc, #136]	; 17728 <ull_slave_ticker_cb+0xb4>
	mfy.param = &p;
   176a2:	4b1c      	ldr	r3, [pc, #112]	; (17714 <ull_slave_ticker_cb+0xa0>)
	p.ticks_at_expire = ticks_at_expire;
   176a4:	f8cc 5000 	str.w	r5, [ip]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   176a8:	2200      	movs	r2, #0
	p.param = &conn->lll;
   176aa:	f104 0e1c 	add.w	lr, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   176ae:	4611      	mov	r1, r2
   176b0:	2001      	movs	r0, #1
	mfy.param = &p;
   176b2:	f8c3 c008 	str.w	ip, [r3, #8]
	p.remainder = remainder;
   176b6:	f8cc 7004 	str.w	r7, [ip, #4]
	p.lazy = lazy;
   176ba:	f8ac 6008 	strh.w	r6, [ip, #8]
	p.param = &conn->lll;
   176be:	f8cc e00c 	str.w	lr, [ip, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   176c2:	f7f8 f99f 	bl	fa04 <mayfly_enqueue>
	LL_ASSERT(!err);
   176c6:	b948      	cbnz	r0, 176dc <ull_slave_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   176c8:	20ff      	movs	r0, #255	; 0xff
   176ca:	f7ff f9b9 	bl	16a40 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   176ce:	4620      	mov	r0, r4
   176d0:	21ff      	movs	r1, #255	; 0xff
}
   176d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   176d6:	f7ff bc0b 	b.w	16ef0 <ull_conn_tx_lll_enqueue>
}
   176da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(!err);
   176dc:	4a0e      	ldr	r2, [pc, #56]	; (17718 <ull_slave_ticker_cb+0xa4>)
   176de:	490f      	ldr	r1, [pc, #60]	; (1771c <ull_slave_ticker_cb+0xa8>)
   176e0:	480f      	ldr	r0, [pc, #60]	; (17720 <ull_slave_ticker_cb+0xac>)
   176e2:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   176e6:	f007 fcb5 	bl	1f054 <printk>
   176ea:	4040      	eors	r0, r0
   176ec:	f380 8811 	msr	BASEPRI, r0
   176f0:	f04f 0003 	mov.w	r0, #3
   176f4:	df02      	svc	2
   176f6:	e7e7      	b.n	176c8 <ull_slave_ticker_cb+0x54>
	LL_ASSERT(ref);
   176f8:	4a07      	ldr	r2, [pc, #28]	; (17718 <ull_slave_ticker_cb+0xa4>)
   176fa:	490a      	ldr	r1, [pc, #40]	; (17724 <ull_slave_ticker_cb+0xb0>)
   176fc:	4808      	ldr	r0, [pc, #32]	; (17720 <ull_slave_ticker_cb+0xac>)
   176fe:	f44f 73c7 	mov.w	r3, #398	; 0x18e
   17702:	f007 fca7 	bl	1f054 <printk>
   17706:	4040      	eors	r0, r0
   17708:	f380 8811 	msr	BASEPRI, r0
   1770c:	f04f 0003 	mov.w	r0, #3
   17710:	df02      	svc	2
   17712:	e7c4      	b.n	1769e <ull_slave_ticker_cb+0x2a>
   17714:	200005a4 	.word	0x200005a4
   17718:	00025ce4 	.word	0x00025ce4
   1771c:	00025898 	.word	0x00025898
   17720:	0002561c 	.word	0x0002561c
   17724:	00025a34 	.word	0x00025a34
   17728:	200037a4 	.word	0x200037a4

0001772c <ull_slave_latency_cancel>:
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   1772c:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   1772e:	b123      	cbz	r3, 1773a <ull_slave_latency_cancel+0xe>
   17730:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   17734:	f012 0302 	ands.w	r3, r2, #2
   17738:	d000      	beq.n	1773c <ull_slave_latency_cancel+0x10>
   1773a:	4770      	bx	lr
{
   1773c:	b530      	push	{r4, r5, lr}
   1773e:	b089      	sub	sp, #36	; 0x24
		conn->slave.latency_cancel = 1U;
   17740:	f042 0202 	orr.w	r2, r2, #2
				      (TICKER_ID_CONN_BASE + handle),
   17744:	3103      	adds	r1, #3
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   17746:	4d11      	ldr	r5, [pc, #68]	; (1778c <ull_slave_latency_cancel+0x60>)
		conn->slave.latency_cancel = 1U;
   17748:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1774c:	2401      	movs	r4, #1
   1774e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   17752:	b2ca      	uxtb	r2, r1
   17754:	9006      	str	r0, [sp, #24]
   17756:	9304      	str	r3, [sp, #16]
   17758:	9300      	str	r3, [sp, #0]
   1775a:	4618      	mov	r0, r3
   1775c:	9505      	str	r5, [sp, #20]
   1775e:	9403      	str	r4, [sp, #12]
   17760:	2103      	movs	r1, #3
   17762:	f7f9 fbb7 	bl	10ed4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17766:	f030 0302 	bics.w	r3, r0, #2
   1776a:	d00c      	beq.n	17786 <ull_slave_latency_cancel+0x5a>
   1776c:	4a08      	ldr	r2, [pc, #32]	; (17790 <ull_slave_latency_cancel+0x64>)
   1776e:	4909      	ldr	r1, [pc, #36]	; (17794 <ull_slave_latency_cancel+0x68>)
   17770:	4809      	ldr	r0, [pc, #36]	; (17798 <ull_slave_latency_cancel+0x6c>)
   17772:	f44f 73b0 	mov.w	r3, #352	; 0x160
   17776:	f007 fc6d 	bl	1f054 <printk>
   1777a:	4040      	eors	r0, r0
   1777c:	f380 8811 	msr	BASEPRI, r0
   17780:	f04f 0003 	mov.w	r0, #3
   17784:	df02      	svc	2
}
   17786:	b009      	add	sp, #36	; 0x24
   17788:	bd30      	pop	{r4, r5, pc}
   1778a:	bf00      	nop
   1778c:	000175b5 	.word	0x000175b5
   17790:	00025ce4 	.word	0x00025ce4
   17794:	00025c14 	.word	0x00025c14
   17798:	0002561c 	.word	0x0002561c

0001779c <ll_start_enc_req_send>:
{
   1779c:	b570      	push	{r4, r5, r6, lr}
   1779e:	460e      	mov	r6, r1
   177a0:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   177a2:	f7fd f9a1 	bl	14ae8 <ll_connected_get>
	if (!conn) {
   177a6:	2800      	cmp	r0, #0
   177a8:	d040      	beq.n	1782c <ll_start_enc_req_send+0x90>
	if (error_code) {
   177aa:	4604      	mov	r4, r0
   177ac:	b95e      	cbnz	r6, 177c6 <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   177ae:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   177b2:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   177b6:	429a      	cmp	r2, r3
   177b8:	d003      	beq.n	177c2 <ll_start_enc_req_send+0x26>
   177ba:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   177be:	2b03      	cmp	r3, #3
   177c0:	d026      	beq.n	17810 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   177c2:	200c      	movs	r0, #12
}
   177c4:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   177c6:	f890 0152 	ldrb.w	r0, [r0, #338]	; 0x152
   177ca:	f010 0004 	ands.w	r0, r0, #4
   177ce:	d112      	bne.n	177f6 <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   177d0:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   177d4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   177d8:	429a      	cmp	r2, r3
   177da:	d0f2      	beq.n	177c2 <ll_start_enc_req_send+0x26>
   177dc:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   177e0:	2b03      	cmp	r3, #3
   177e2:	d1ee      	bne.n	177c2 <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   177e4:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			conn->llcp.encryption.error_code = error_code;
   177e8:	f884 60ed 	strb.w	r6, [r4, #237]	; 0xed
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   177ec:	f360 0301 	bfi	r3, r0, #0, #2
   177f0:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
}
   177f4:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   177f6:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
			if (conn->llcp_terminate.ack !=
   177fa:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
   177fe:	4293      	cmp	r3, r2
   17800:	d1df      	bne.n	177c2 <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   17802:	3301      	adds	r3, #1
   17804:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
			conn->llcp_terminate.reason_own = error_code;
   17808:	f884 612e 	strb.w	r6, [r4, #302]	; 0x12e
	return 0;
   1780c:	2000      	movs	r0, #0
}
   1780e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   17810:	4629      	mov	r1, r5
   17812:	2210      	movs	r2, #16
   17814:	f200 105d 	addw	r0, r0, #349	; 0x15d
   17818:	f009 ff45 	bl	216a6 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1781c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   17820:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
	return 0;
   17824:	4630      	mov	r0, r6
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   17826:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
}
   1782a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1782c:	2002      	movs	r0, #2
}
   1782e:	bd70      	pop	{r4, r5, r6, pc}

00017830 <ull_chan_map_get>:

	return 0;
}

uint8_t ull_chan_map_get(uint8_t *const chan_map)
{
   17830:	b508      	push	{r3, lr}
	memcpy(chan_map, map, sizeof(map));
   17832:	4903      	ldr	r1, [pc, #12]	; (17840 <ull_chan_map_get+0x10>)
   17834:	2205      	movs	r2, #5
   17836:	f009 ff36 	bl	216a6 <memcpy>

	return count;
   1783a:	4b02      	ldr	r3, [pc, #8]	; (17844 <ull_chan_map_get+0x14>)
}
   1783c:	7818      	ldrb	r0, [r3, #0]
   1783e:	bd08      	pop	{r3, pc}
   17840:	200005b4 	.word	0x200005b4
   17844:	2000072a 	.word	0x2000072a

00017848 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   17848:	b470      	push	{r4, r5, r6}
   1784a:	4605      	mov	r5, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1784c:	7800      	ldrb	r0, [r0, #0]
   1784e:	4c1b      	ldr	r4, [pc, #108]	; (178bc <lll_chan_sel_1+0x74>)
   17850:	fb02 1101 	mla	r1, r2, r1, r1
   17854:	180a      	adds	r2, r1, r0
   17856:	fb84 0102 	smull	r0, r1, r4, r2
   1785a:	4411      	add	r1, r2
   1785c:	1149      	asrs	r1, r1, #5
   1785e:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   17862:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   17866:	1a51      	subs	r1, r2, r1
   17868:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1786a:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   1786c:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1786e:	5c9c      	ldrb	r4, [r3, r2]
{
   17870:	f89d 500c 	ldrb.w	r5, [sp, #12]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   17874:	f001 0107 	and.w	r1, r1, #7
   17878:	410c      	asrs	r4, r1
   1787a:	f014 0401 	ands.w	r4, r4, #1
   1787e:	d11b      	bne.n	178b8 <lll_chan_sel_1+0x70>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   17880:	fbb0 f2f5 	udiv	r2, r0, r5
   17884:	fb05 0212 	mls	r2, r5, r2, r0
   17888:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   1788a:	1e5d      	subs	r5, r3, #1
   1788c:	1d1e      	adds	r6, r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   1788e:	f104 0108 	add.w	r1, r4, #8
   17892:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   17896:	4620      	mov	r0, r4
   17898:	b2cc      	uxtb	r4, r1
			if (bite & 0x01) {
   1789a:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   1789e:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   178a2:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   178a6:	d002      	beq.n	178ae <lll_chan_sel_1+0x66>
				if (chan_index == 0U) {
   178a8:	b132      	cbz	r2, 178b8 <lll_chan_sel_1+0x70>
				chan_index--;
   178aa:	3a01      	subs	r2, #1
   178ac:	b2d2      	uxtb	r2, r2
			chan_next++;
   178ae:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   178b0:	4284      	cmp	r4, r0
   178b2:	d1f2      	bne.n	1789a <lll_chan_sel_1+0x52>
	while (byte_count--) {
   178b4:	42b5      	cmp	r5, r6
   178b6:	d1ea      	bne.n	1788e <lll_chan_sel_1+0x46>
}
   178b8:	bc70      	pop	{r4, r5, r6}
   178ba:	4770      	bx	lr
   178bc:	dd67c8a7 	.word	0xdd67c8a7

000178c0 <lll_chan_sel_2>:
{
   178c0:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   178c2:	4f2f      	ldr	r7, [pc, #188]	; (17980 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   178c4:	4e2f      	ldr	r6, [pc, #188]	; (17984 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   178c6:	ea80 0501 	eor.w	r5, r0, r1
   178ca:	2403      	movs	r4, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   178cc:	0a28      	lsrs	r0, r5, #8
   178ce:	b2ed      	uxtb	r5, r5
   178d0:	eb00 2080 	add.w	r0, r0, r0, lsl #10
   178d4:	eb05 2585 	add.w	r5, r5, r5, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   178d8:	ea06 1e40 	and.w	lr, r6, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   178dc:	ea07 0c40 	and.w	ip, r7, r0, lsl #1
   178e0:	ea07 0045 	and.w	r0, r7, r5, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   178e4:	ea06 1545 	and.w	r5, r6, r5, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   178e8:	ea4c 0c0e 	orr.w	ip, ip, lr
   178ec:	4328      	orrs	r0, r5
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   178ee:	eb00 2500 	add.w	r5, r0, r0, lsl #8
   178f2:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
   178f6:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   178fa:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
   178fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   17902:	f3c0 4007 	ubfx	r0, r0, #16, #8
   17906:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1790a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   1790e:	3c01      	subs	r4, #1
   17910:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
   17912:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   17916:	b285      	uxth	r5, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   17918:	d1d8      	bne.n	178cc <lll_chan_sel_2+0xc>
	chan_next = prn_e % 37;
   1791a:	481b      	ldr	r0, [pc, #108]	; (17988 <lll_chan_sel_2+0xc8>)
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   1791c:	4069      	eors	r1, r5
	chan_next = prn_e % 37;
   1791e:	fba0 5001 	umull	r5, r0, r0, r1
   17922:	1a0d      	subs	r5, r1, r0
   17924:	eb00 0055 	add.w	r0, r0, r5, lsr #1
   17928:	0940      	lsrs	r0, r0, #5
   1792a:	eb00 05c0 	add.w	r5, r0, r0, lsl #3
   1792e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   17932:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   17934:	f3c0 05c4 	ubfx	r5, r0, #3, #5
   17938:	f000 0607 	and.w	r6, r0, #7
   1793c:	5d55      	ldrb	r5, [r2, r5]
   1793e:	4135      	asrs	r5, r6
   17940:	07ed      	lsls	r5, r5, #31
	chan_next = prn_e % 37;
   17942:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   17944:	d41a      	bmi.n	1797c <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   17946:	fb01 f303 	mul.w	r3, r1, r3
   1794a:	1e56      	subs	r6, r2, #1
   1794c:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   17950:	3204      	adds	r2, #4
		bite = *chan_map;
   17952:	f104 0508 	add.w	r5, r4, #8
   17956:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   1795a:	4620      	mov	r0, r4
   1795c:	b2ec      	uxtb	r4, r5
			if (bite & 0x01) {
   1795e:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   17962:	f100 0501 	add.w	r5, r0, #1
			bite >>= 1;
   17966:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   1796a:	d002      	beq.n	17972 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   1796c:	b133      	cbz	r3, 1797c <lll_chan_sel_2+0xbc>
				chan_index--;
   1796e:	3b01      	subs	r3, #1
   17970:	b2db      	uxtb	r3, r3
			chan_next++;
   17972:	b2e8      	uxtb	r0, r5
		while (bit_count--) {
   17974:	42a0      	cmp	r0, r4
   17976:	d1f2      	bne.n	1795e <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   17978:	42b2      	cmp	r2, r6
   1797a:	d1ea      	bne.n	17952 <lll_chan_sel_2+0x92>
}
   1797c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1797e:	bf00      	nop
   17980:	00022110 	.word	0x00022110
   17984:	00088440 	.word	0x00088440
   17988:	bacf914d 	.word	0xbacf914d

0001798c <wl_find>:
		wl[i].taken = 0U;
	}
}

static uint8_t wl_find(uint8_t addr_type, uint8_t *addr, uint8_t *free)
{
   1798c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17990:	4688      	mov	r8, r1
	int i;

	if (free) {
   17992:	4615      	mov	r5, r2
   17994:	b10a      	cbz	r2, 1799a <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   17996:	23ff      	movs	r3, #255	; 0xff
   17998:	7013      	strb	r3, [r2, #0]
   1799a:	4e17      	ldr	r6, [pc, #92]	; (179f8 <wl_find+0x6c>)
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1799c:	f000 0701 	and.w	r7, r0, #1
   179a0:	f106 0902 	add.w	r9, r6, #2
{
   179a4:	2400      	movs	r4, #0
   179a6:	e004      	b.n	179b2 <wl_find+0x26>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   179a8:	42ba      	cmp	r2, r7
   179aa:	d014      	beq.n	179d6 <wl_find+0x4a>
	for (i = 0; i < WL_SIZE; i++) {
   179ac:	3401      	adds	r4, #1
   179ae:	2c08      	cmp	r4, #8
   179b0:	d00e      	beq.n	179d0 <wl_find+0x44>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   179b2:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   179b6:	07d9      	lsls	r1, r3, #31
   179b8:	f3c3 0240 	ubfx	r2, r3, #1, #1
   179bc:	d4f4      	bmi.n	179a8 <wl_find+0x1c>
			return i;
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   179be:	2d00      	cmp	r5, #0
   179c0:	d0f4      	beq.n	179ac <wl_find+0x20>
   179c2:	782b      	ldrb	r3, [r5, #0]
   179c4:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   179c6:	bf08      	it	eq
   179c8:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   179ca:	3401      	adds	r4, #1
   179cc:	2c08      	cmp	r4, #8
   179ce:	d1f0      	bne.n	179b2 <wl_find+0x26>
		}
	}

	return FILTER_IDX_NONE;
   179d0:	20ff      	movs	r0, #255	; 0xff
}
   179d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   179d6:	2206      	movs	r2, #6
   179d8:	4641      	mov	r1, r8
   179da:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
   179de:	f009 fe52 	bl	21686 <memcmp>
   179e2:	b130      	cbz	r0, 179f2 <wl_find+0x66>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   179e4:	2d00      	cmp	r5, #0
   179e6:	d0e1      	beq.n	179ac <wl_find+0x20>
   179e8:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   179ec:	07db      	lsls	r3, r3, #31
   179ee:	d4dd      	bmi.n	179ac <wl_find+0x20>
   179f0:	e7e7      	b.n	179c2 <wl_find+0x36>
			return i;
   179f2:	b2e0      	uxtb	r0, r4
   179f4:	e7ed      	b.n	179d2 <wl_find+0x46>
   179f6:	bf00      	nop
   179f8:	200039e4 	.word	0x200039e4

000179fc <wl_update>:

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}

static void wl_update(void)
{
   179fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a00:	4f21      	ldr	r7, [pc, #132]	; (17a88 <wl_update+0x8c>)
   17a02:	4d22      	ldr	r5, [pc, #136]	; (17a8c <wl_update+0x90>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   17a04:	f8df 9088 	ldr.w	r9, [pc, #136]	; 17a90 <wl_update+0x94>
   17a08:	f8df a088 	ldr.w	sl, [pc, #136]	; 17a94 <wl_update+0x98>
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   17a0c:	f1a7 0802 	sub.w	r8, r7, #2
   17a10:	f1a5 0b02 	sub.w	fp, r5, #2
{
   17a14:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   17a16:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   17a1a:	2601      	movs	r6, #1
		if (!wl[i].taken) {
   17a1c:	f013 0f01 	tst.w	r3, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   17a20:	4638      	mov	r0, r7
	filter->enable_bitmask |= BIT(index);
   17a22:	fa06 f604 	lsl.w	r6, r6, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   17a26:	4629      	mov	r1, r5
   17a28:	f107 0706 	add.w	r7, r7, #6
   17a2c:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
   17a30:	d022      	beq.n	17a78 <wl_update+0x7c>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   17a32:	f899 3000 	ldrb.w	r3, [r9]
   17a36:	b163      	cbz	r3, 17a52 <wl_update+0x56>
		j = wl[i].rl_idx;
   17a38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   17a3c:	2b07      	cmp	r3, #7
   17a3e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   17a42:	d806      	bhi.n	17a52 <wl_update+0x56>
   17a44:	f81a 303c 	ldrb.w	r3, [sl, ip, lsl #3]
   17a48:	f013 0f04 	tst.w	r3, #4
   17a4c:	d001      	beq.n	17a52 <wl_update+0x56>
   17a4e:	06db      	lsls	r3, r3, #27
   17a50:	d512      	bpl.n	17a78 <wl_update+0x7c>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   17a52:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   17a56:	f898 e001 	ldrb.w	lr, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   17a5a:	f898 c000 	ldrb.w	ip, [r8]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   17a5e:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   17a62:	40a3      	lsls	r3, r4
   17a64:	ea4e 0303 	orr.w	r3, lr, r3
	filter->enable_bitmask |= BIT(index);
   17a68:	ea4c 0606 	orr.w	r6, ip, r6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   17a6c:	f888 3001 	strb.w	r3, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   17a70:	f888 6000 	strb.w	r6, [r8]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   17a74:	f009 fe17 	bl	216a6 <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
   17a78:	3401      	adds	r4, #1
   17a7a:	2c08      	cmp	r4, #8
   17a7c:	f105 0508 	add.w	r5, r5, #8
   17a80:	d1c9      	bne.n	17a16 <wl_update+0x1a>
}
   17a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a86:	bf00      	nop
   17a88:	20003a26 	.word	0x20003a26
   17a8c:	200039e6 	.word	0x200039e6
   17a90:	20006841 	.word	0x20006841
   17a94:	2000386c 	.word	0x2000386c

00017a98 <rl_update>:
{
   17a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a9c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 17b00 <rl_update+0x68>
	filter->enable_bitmask |= BIT(index);
   17aa0:	4d16      	ldr	r5, [pc, #88]	; (17afc <rl_update+0x64>)
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   17aa2:	f108 0701 	add.w	r7, r8, #1
   17aa6:	1cae      	adds	r6, r5, #2
{
   17aa8:	2400      	movs	r4, #0
   17aaa:	e002      	b.n	17ab2 <rl_update+0x1a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17aac:	3401      	adds	r4, #1
   17aae:	2c08      	cmp	r4, #8
   17ab0:	d021      	beq.n	17af6 <rl_update+0x5e>
		if (rl[i].taken) {
   17ab2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17ab6:	00d9      	lsls	r1, r3, #3
   17ab8:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   17abc:	07da      	lsls	r2, r3, #31
   17abe:	d5f5      	bpl.n	17aac <rl_update+0x14>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   17ac0:	786a      	ldrb	r2, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   17ac2:	f895 c000 	ldrb.w	ip, [r5]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   17ac6:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   17aca:	f04f 0e01 	mov.w	lr, #1
   17ace:	fa0e fe04 	lsl.w	lr, lr, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   17ad2:	40a3      	lsls	r3, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   17ad4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   17ad8:	4313      	orrs	r3, r2
	filter->enable_bitmask |= BIT(index);
   17ada:	ea4c 0c0e 	orr.w	ip, ip, lr
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   17ade:	4439      	add	r1, r7
   17ae0:	eb06 0040 	add.w	r0, r6, r0, lsl #1
   17ae4:	2206      	movs	r2, #6
   17ae6:	3401      	adds	r4, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   17ae8:	706b      	strb	r3, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   17aea:	f885 c000 	strb.w	ip, [r5]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   17aee:	f009 fdda 	bl	216a6 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17af2:	2c08      	cmp	r4, #8
   17af4:	d1dd      	bne.n	17ab2 <rl_update+0x1a>
}
   17af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17afa:	bf00      	nop
   17afc:	200039ac 	.word	0x200039ac
   17b00:	2000386c 	.word	0x2000386c

00017b04 <ll_wl_size_get>:
}
   17b04:	2008      	movs	r0, #8
   17b06:	4770      	bx	lr

00017b08 <ll_wl_clear>:
{
   17b08:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   17b0a:	2000      	movs	r0, #0
   17b0c:	f7fc fb52 	bl	141b4 <ull_adv_filter_pol_get>
   17b10:	b9d8      	cbnz	r0, 17b4a <ll_wl_clear+0x42>
   17b12:	4a0f      	ldr	r2, [pc, #60]	; (17b50 <ll_wl_clear+0x48>)
			rl[j].wl = 0U;
   17b14:	4c0f      	ldr	r4, [pc, #60]	; (17b54 <ll_wl_clear+0x4c>)
		uint8_t j = wl[i].rl_idx;
   17b16:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   17b1a:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   17b1c:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   17b1e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   17b22:	d805      	bhi.n	17b30 <ll_wl_clear+0x28>
			rl[j].wl = 0U;
   17b24:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   17b28:	f36f 1345 	bfc	r3, #5, #1
   17b2c:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   17b30:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   17b34:	f36f 0300 	bfc	r3, #0, #1
   17b38:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   17b3c:	3001      	adds	r0, #1
   17b3e:	2808      	cmp	r0, #8
   17b40:	d1e9      	bne.n	17b16 <ll_wl_clear+0xe>
	wl_anon = 0U;
   17b42:	4b05      	ldr	r3, [pc, #20]	; (17b58 <ll_wl_clear+0x50>)
   17b44:	2000      	movs	r0, #0
   17b46:	7018      	strb	r0, [r3, #0]
}
   17b48:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   17b4a:	200c      	movs	r0, #12
}
   17b4c:	bd10      	pop	{r4, pc}
   17b4e:	bf00      	nop
   17b50:	200039e4 	.word	0x200039e4
   17b54:	2000386c 	.word	0x2000386c
   17b58:	20006842 	.word	0x20006842

00017b5c <ll_wl_remove>:
{
   17b5c:	b538      	push	{r3, r4, r5, lr}
   17b5e:	4605      	mov	r5, r0
	if (ull_adv_filter_pol_get(0)) {
   17b60:	2000      	movs	r0, #0
   17b62:	f7fc fb27 	bl	141b4 <ull_adv_filter_pol_get>
   17b66:	bb30      	cbnz	r0, 17bb6 <ll_wl_remove+0x5a>
   17b68:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   17b6a:	7828      	ldrb	r0, [r5, #0]
   17b6c:	28ff      	cmp	r0, #255	; 0xff
   17b6e:	d01e      	beq.n	17bae <ll_wl_remove+0x52>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   17b70:	1c69      	adds	r1, r5, #1
   17b72:	4622      	mov	r2, r4
   17b74:	f7ff ff0a 	bl	1798c <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   17b78:	2807      	cmp	r0, #7
   17b7a:	d901      	bls.n	17b80 <ll_wl_remove+0x24>
   17b7c:	2002      	movs	r0, #2
}
   17b7e:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t j = wl[i].rl_idx;
   17b80:	4a0e      	ldr	r2, [pc, #56]	; (17bbc <ll_wl_remove+0x60>)
   17b82:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   17b86:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   17b88:	2b07      	cmp	r3, #7
   17b8a:	d808      	bhi.n	17b9e <ll_wl_remove+0x42>
			rl[j].wl = 0U;
   17b8c:	490c      	ldr	r1, [pc, #48]	; (17bc0 <ll_wl_remove+0x64>)
   17b8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   17b92:	f811 5033 	ldrb.w	r5, [r1, r3, lsl #3]
   17b96:	f364 1545 	bfi	r5, r4, #5, #1
   17b9a:	f801 5033 	strb.w	r5, [r1, r3, lsl #3]
		wl[i].taken = 0U;
   17b9e:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   17ba2:	f36f 0300 	bfc	r3, #0, #1
   17ba6:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
		return 0;
   17baa:	2000      	movs	r0, #0
}
   17bac:	bd38      	pop	{r3, r4, r5, pc}
		wl_anon = 0U;
   17bae:	4b05      	ldr	r3, [pc, #20]	; (17bc4 <ll_wl_remove+0x68>)
   17bb0:	701c      	strb	r4, [r3, #0]
		return 0;
   17bb2:	4620      	mov	r0, r4
}
   17bb4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   17bb6:	200c      	movs	r0, #12
}
   17bb8:	bd38      	pop	{r3, r4, r5, pc}
   17bba:	bf00      	nop
   17bbc:	200039e4 	.word	0x200039e4
   17bc0:	2000386c 	.word	0x2000386c
   17bc4:	20006842 	.word	0x20006842

00017bc8 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   17bc8:	2807      	cmp	r0, #7
{
   17bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17bce:	4604      	mov	r4, r0
   17bd0:	460d      	mov	r5, r1
   17bd2:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   17bd4:	d817      	bhi.n	17c06 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   17bd6:	4e19      	ldr	r6, [pc, #100]	; (17c3c <ll_rl_id_addr_get+0x74>)
   17bd8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17bdc:	00a7      	lsls	r7, r4, #2
   17bde:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   17be2:	07db      	lsls	r3, r3, #31
   17be4:	d51c      	bpl.n	17c20 <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   17be6:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   17be8:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   17bea:	f816 3037 	ldrb.w	r3, [r6, r7, lsl #3]
   17bee:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   17bf2:	fb01 6104 	mla	r1, r1, r4, r6
	*id_addr_type = rl[rl_idx].id_addr_type;
   17bf6:	702b      	strb	r3, [r5, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   17bf8:	4640      	mov	r0, r8
   17bfa:	3101      	adds	r1, #1
}
   17bfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   17c00:	2206      	movs	r2, #6
   17c02:	f009 bd50 	b.w	216a6 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   17c06:	4a0e      	ldr	r2, [pc, #56]	; (17c40 <ll_rl_id_addr_get+0x78>)
   17c08:	490e      	ldr	r1, [pc, #56]	; (17c44 <ll_rl_id_addr_get+0x7c>)
   17c0a:	480f      	ldr	r0, [pc, #60]	; (17c48 <ll_rl_id_addr_get+0x80>)
   17c0c:	23e9      	movs	r3, #233	; 0xe9
   17c0e:	f007 fa21 	bl	1f054 <printk>
   17c12:	4040      	eors	r0, r0
   17c14:	f380 8811 	msr	BASEPRI, r0
   17c18:	f04f 0003 	mov.w	r0, #3
   17c1c:	df02      	svc	2
   17c1e:	e7da      	b.n	17bd6 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   17c20:	4a07      	ldr	r2, [pc, #28]	; (17c40 <ll_rl_id_addr_get+0x78>)
   17c22:	490a      	ldr	r1, [pc, #40]	; (17c4c <ll_rl_id_addr_get+0x84>)
   17c24:	4808      	ldr	r0, [pc, #32]	; (17c48 <ll_rl_id_addr_get+0x80>)
   17c26:	23ea      	movs	r3, #234	; 0xea
   17c28:	f007 fa14 	bl	1f054 <printk>
   17c2c:	4040      	eors	r0, r0
   17c2e:	f380 8811 	msr	BASEPRI, r0
   17c32:	f04f 0003 	mov.w	r0, #3
   17c36:	df02      	svc	2
   17c38:	e7d5      	b.n	17be6 <ll_rl_id_addr_get+0x1e>
   17c3a:	bf00      	nop
   17c3c:	2000386c 	.word	0x2000386c
   17c40:	00025d94 	.word	0x00025d94
   17c44:	00025dd8 	.word	0x00025dd8
   17c48:	0002561c 	.word	0x0002561c
   17c4c:	00025de4 	.word	0x00025de4

00017c50 <ll_rl_size_get>:
   17c50:	2008      	movs	r0, #8
   17c52:	4770      	bx	lr

00017c54 <ll_rl_clear>:
{
   17c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   17c56:	2000      	movs	r0, #0
   17c58:	f7fc faa0 	bl	1419c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   17c5c:	bb98      	cbnz	r0, 17cc6 <ll_rl_clear+0x72>
		rl[i].taken = 0U;
   17c5e:	4b1b      	ldr	r3, [pc, #108]	; (17ccc <ll_rl_clear+0x78>)
	peer_irk_count = 0U;
   17c60:	491b      	ldr	r1, [pc, #108]	; (17cd0 <ll_rl_clear+0x7c>)
		rl[i].taken = 0U;
   17c62:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   17c66:	f893 c000 	ldrb.w	ip, [r3]
   17c6a:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
   17c6e:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
   17c72:	f893 50a0 	ldrb.w	r5, [r3, #160]	; 0xa0
   17c76:	f893 40c8 	ldrb.w	r4, [r3, #200]	; 0xc8
	peer_irk_count = 0U;
   17c7a:	7008      	strb	r0, [r1, #0]
		rl[i].taken = 0U;
   17c7c:	f360 0200 	bfi	r2, r0, #0, #1
   17c80:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   17c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   17c88:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   17c8c:	f360 0c00 	bfi	ip, r0, #0, #1
   17c90:	f360 0700 	bfi	r7, r0, #0, #1
   17c94:	f360 0600 	bfi	r6, r0, #0, #1
   17c98:	f360 0500 	bfi	r5, r0, #0, #1
   17c9c:	f360 0400 	bfi	r4, r0, #0, #1
   17ca0:	f360 0100 	bfi	r1, r0, #0, #1
   17ca4:	f360 0200 	bfi	r2, r0, #0, #1
   17ca8:	f883 c000 	strb.w	ip, [r3]
   17cac:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
   17cb0:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
   17cb4:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
   17cb8:	f883 40c8 	strb.w	r4, [r3, #200]	; 0xc8
   17cbc:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   17cc0:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   17cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   17cc6:	200c      	movs	r0, #12
}
   17cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17cca:	bf00      	nop
   17ccc:	2000386c 	.word	0x2000386c
   17cd0:	20006840 	.word	0x20006840

00017cd4 <ll_rl_enable>:
{
   17cd4:	b510      	push	{r4, lr}
   17cd6:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   17cd8:	2000      	movs	r0, #0
   17cda:	f7fc fa5f 	bl	1419c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   17cde:	b958      	cbnz	r0, 17cf8 <ll_rl_enable+0x24>
	switch (enable) {
   17ce0:	b134      	cbz	r4, 17cf0 <ll_rl_enable+0x1c>
   17ce2:	2c01      	cmp	r4, #1
   17ce4:	d001      	beq.n	17cea <ll_rl_enable+0x16>
   17ce6:	2012      	movs	r0, #18
}
   17ce8:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   17cea:	4b04      	ldr	r3, [pc, #16]	; (17cfc <ll_rl_enable+0x28>)
   17cec:	701c      	strb	r4, [r3, #0]
}
   17cee:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   17cf0:	4b02      	ldr	r3, [pc, #8]	; (17cfc <ll_rl_enable+0x28>)
   17cf2:	701c      	strb	r4, [r3, #0]
	return 0;
   17cf4:	4620      	mov	r0, r4
}
   17cf6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   17cf8:	200c      	movs	r0, #12
}
   17cfa:	bd10      	pop	{r4, pc}
   17cfc:	20006841 	.word	0x20006841

00017d00 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   17d00:	4a03      	ldr	r2, [pc, #12]	; (17d10 <ll_rl_timeout_set+0x10>)
   17d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17d06:	fb03 f300 	mul.w	r3, r3, r0
   17d0a:	6013      	str	r3, [r2, #0]
}
   17d0c:	4770      	bx	lr
   17d0e:	bf00      	nop
   17d10:	200039e0 	.word	0x200039e0

00017d14 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   17d14:	b1b0      	cbz	r0, 17d44 <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   17d16:	4b0d      	ldr	r3, [pc, #52]	; (17d4c <ull_filter_adv_scan_state_cb+0x38>)
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   17d18:	681a      	ldr	r2, [r3, #0]
{
   17d1a:	b510      	push	{r4, lr}
   17d1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   17d20:	f240 30e7 	movw	r0, #999	; 0x3e7
   17d24:	2100      	movs	r1, #0
   17d26:	fbe3 0102 	umlal	r0, r1, r3, r2
   17d2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17d2e:	2300      	movs	r3, #0
   17d30:	f7e8 f9e6 	bl	100 <__aeabi_uldivmod>
}
   17d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17d38:	4602      	mov	r2, r0
   17d3a:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   17d3c:	4804      	ldr	r0, [pc, #16]	; (17d50 <ull_filter_adv_scan_state_cb+0x3c>)
   17d3e:	4905      	ldr	r1, [pc, #20]	; (17d54 <ull_filter_adv_scan_state_cb+0x40>)
   17d40:	f006 be00 	b.w	1e944 <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
   17d44:	4803      	ldr	r0, [pc, #12]	; (17d54 <ull_filter_adv_scan_state_cb+0x40>)
   17d46:	f00c bc09 	b.w	2455c <k_delayed_work_cancel>
   17d4a:	bf00      	nop
   17d4c:	200039e0 	.word	0x200039e0
   17d50:	200014c8 	.word	0x200014c8
   17d54:	20001388 	.word	0x20001388

00017d58 <ull_filter_adv_update>:
{
   17d58:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   17d5a:	4b09      	ldr	r3, [pc, #36]	; (17d80 <ull_filter_adv_update+0x28>)
   17d5c:	2200      	movs	r2, #0
   17d5e:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   17d60:	b930      	cbnz	r0, 17d70 <ull_filter_adv_update+0x18>
	if (rl_enable &&
   17d62:	4b08      	ldr	r3, [pc, #32]	; (17d84 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   17d64:	4a08      	ldr	r2, [pc, #32]	; (17d88 <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   17d66:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   17d68:	2100      	movs	r1, #0
   17d6a:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   17d6c:	b91b      	cbnz	r3, 17d76 <ull_filter_adv_update+0x1e>
}
   17d6e:	bd08      	pop	{r3, pc}
		wl_update();
   17d70:	f7ff fe44 	bl	179fc <wl_update>
   17d74:	e7f5      	b.n	17d62 <ull_filter_adv_update+0xa>
}
   17d76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   17d7a:	f7ff be8d 	b.w	17a98 <rl_update>
   17d7e:	bf00      	nop
   17d80:	20003a24 	.word	0x20003a24
   17d84:	20006841 	.word	0x20006841
   17d88:	200039ac 	.word	0x200039ac

00017d8c <ull_filter_rpa_update>:
{
   17d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d90:	4682      	mov	sl, r0
   17d92:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   17d94:	f00c fc3b 	bl	2460e <z_impl_k_uptime_ticks>
   17d98:	0142      	lsls	r2, r0, #5
   17d9a:	014b      	lsls	r3, r1, #5
   17d9c:	ebb2 0800 	subs.w	r8, r2, r0
   17da0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   17da4:	eb63 0301 	sbc.w	r3, r3, r1
   17da8:	009b      	lsls	r3, r3, #2
   17daa:	ea4f 0288 	mov.w	r2, r8, lsl #2
   17dae:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
   17db2:	eb12 0800 	adds.w	r8, r2, r0
   17db6:	eb43 0101 	adc.w	r1, r3, r1
   17dba:	00c9      	lsls	r1, r1, #3
   17dbc:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
   17dc0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   17dc4:	ea4f 38d3 	mov.w	r8, r3, lsr #15
   17dc8:	0bc8      	lsrs	r0, r1, #15
   17dca:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   17dce:	9001      	str	r0, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   17dd0:	f1ba 0f00 	cmp.w	sl, #0
   17dd4:	d117      	bne.n	17e06 <ull_filter_rpa_update+0x7a>
   17dd6:	4b5f      	ldr	r3, [pc, #380]	; (17f54 <ull_filter_rpa_update+0x1c8>)
   17dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   17ddc:	1c59      	adds	r1, r3, #1
   17dde:	bf08      	it	eq
   17de0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   17de4:	d00f      	beq.n	17e06 <ull_filter_rpa_update+0x7a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   17de6:	495c      	ldr	r1, [pc, #368]	; (17f58 <ull_filter_rpa_update+0x1cc>)
   17de8:	6809      	ldr	r1, [r1, #0]
   17dea:	ebb8 0402 	subs.w	r4, r8, r2
   17dee:	eb60 0503 	sbc.w	r5, r0, r3
   17df2:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   17df4:	428c      	cmp	r4, r1
   17df6:	eb75 0303 	sbcs.w	r3, r5, r3
   17dfa:	bfac      	ite	ge
   17dfc:	f04f 0901 	movge.w	r9, #1
   17e00:	f04f 0900 	movlt.w	r9, #0
   17e04:	e001      	b.n	17e0a <ull_filter_rpa_update+0x7e>
   17e06:	f04f 0901 	mov.w	r9, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17e0a:	4e54      	ldr	r6, [pc, #336]	; (17f5c <ull_filter_rpa_update+0x1d0>)
				LL_ASSERT(!err);
   17e0c:	f8df b160 	ldr.w	fp, [pc, #352]	; 17f70 <ull_filter_rpa_update+0x1e4>
   17e10:	f1a6 0724 	sub.w	r7, r6, #36	; 0x24
	bool all = timeout || (rpa_last_ms == -1) ||
   17e14:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   17e16:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17e1a:	00a5      	lsls	r5, r4, #2
   17e1c:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   17e20:	07da      	lsls	r2, r3, #31
   17e22:	d515      	bpl.n	17e50 <ull_filter_rpa_update+0xc4>
   17e24:	f1b9 0f00 	cmp.w	r9, #0
   17e28:	d101      	bne.n	17e2e <ull_filter_rpa_update+0xa2>
   17e2a:	0798      	lsls	r0, r3, #30
   17e2c:	d410      	bmi.n	17e50 <ull_filter_rpa_update+0xc4>
			if (rl[i].pirk) {
   17e2e:	192b      	adds	r3, r5, r4
   17e30:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   17e34:	0759      	lsls	r1, r3, #29
   17e36:	d434      	bmi.n	17ea2 <ull_filter_rpa_update+0x116>
			if (rl[i].lirk) {
   17e38:	192b      	adds	r3, r5, r4
   17e3a:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   17e3e:	071a      	lsls	r2, r3, #28
   17e40:	d419      	bmi.n	17e76 <ull_filter_rpa_update+0xea>
			rl[i].rpas_ready = 1U;
   17e42:	4425      	add	r5, r4
   17e44:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   17e48:	f043 0302 	orr.w	r3, r3, #2
   17e4c:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17e50:	3401      	adds	r4, #1
   17e52:	2c08      	cmp	r4, #8
   17e54:	f106 0628 	add.w	r6, r6, #40	; 0x28
   17e58:	d1dd      	bne.n	17e16 <ull_filter_rpa_update+0x8a>
	if (all) {
   17e5a:	f1b9 0f00 	cmp.w	r9, #0
   17e5e:	d004      	beq.n	17e6a <ull_filter_rpa_update+0xde>
		rpa_last_ms = now;
   17e60:	4b3c      	ldr	r3, [pc, #240]	; (17f54 <ull_filter_rpa_update+0x1c8>)
   17e62:	9a01      	ldr	r2, [sp, #4]
   17e64:	f8c3 8000 	str.w	r8, [r3]
   17e68:	605a      	str	r2, [r3, #4]
	if (timeout) {
   17e6a:	f1ba 0f00 	cmp.w	sl, #0
   17e6e:	d13c      	bne.n	17eea <ull_filter_rpa_update+0x15e>
}
   17e70:	b007      	add	sp, #28
   17e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   17e76:	a902      	add	r1, sp, #8
   17e78:	f1a6 001d 	sub.w	r0, r6, #29
   17e7c:	f009 fca3 	bl	217c6 <bt_rpa_create>
				LL_ASSERT(!err);
   17e80:	2800      	cmp	r0, #0
   17e82:	d158      	bne.n	17f36 <ull_filter_rpa_update+0x1aa>
				rl[i].local_rpa = &rpa;
   17e84:	4a36      	ldr	r2, [pc, #216]	; (17f60 <ull_filter_rpa_update+0x1d4>)
   17e86:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   17e8a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	memcpy(dst, src, sizeof(*dst));
   17e8e:	a902      	add	r1, sp, #8
   17e90:	4618      	mov	r0, r3
   17e92:	2206      	movs	r2, #6
   17e94:	9300      	str	r3, [sp, #0]
   17e96:	6031      	str	r1, [r6, #0]
   17e98:	f009 fc05 	bl	216a6 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   17e9c:	9b00      	ldr	r3, [sp, #0]
   17e9e:	6033      	str	r3, [r6, #0]
   17ea0:	e7cf      	b.n	17e42 <ull_filter_rpa_update+0xb6>
	psrc += length - 1;
   17ea2:	f816 3c0d 	ldrb.w	r3, [r6, #-13]
   17ea6:	4a2f      	ldr	r2, [pc, #188]	; (17f64 <ull_filter_rpa_update+0x1d8>)
   17ea8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   17eac:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   17eae:	f10d 0307 	add.w	r3, sp, #7
   17eb2:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   17eb6:	f812 1901 	ldrb.w	r1, [r2], #-1
   17eba:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   17ebe:	4283      	cmp	r3, r0
   17ec0:	d1f9      	bne.n	17eb6 <ull_filter_rpa_update+0x12a>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   17ec2:	1fb1      	subs	r1, r6, #6
   17ec4:	a802      	add	r0, sp, #8
   17ec6:	f009 fc7e 	bl	217c6 <bt_rpa_create>
				LL_ASSERT(!err);
   17eca:	2800      	cmp	r0, #0
   17ecc:	d0b4      	beq.n	17e38 <ull_filter_rpa_update+0xac>
   17ece:	4926      	ldr	r1, [pc, #152]	; (17f68 <ull_filter_rpa_update+0x1dc>)
   17ed0:	4826      	ldr	r0, [pc, #152]	; (17f6c <ull_filter_rpa_update+0x1e0>)
   17ed2:	f240 2316 	movw	r3, #534	; 0x216
   17ed6:	465a      	mov	r2, fp
   17ed8:	f007 f8bc 	bl	1f054 <printk>
   17edc:	4040      	eors	r0, r0
   17ede:	f380 8811 	msr	BASEPRI, r0
   17ee2:	f04f 0003 	mov.w	r0, #3
   17ee6:	df02      	svc	2
   17ee8:	e7a6      	b.n	17e38 <ull_filter_rpa_update+0xac>
		adv = ull_adv_is_enabled_get(0);
   17eea:	2000      	movs	r0, #0
   17eec:	f7fc f948 	bl	14180 <ull_adv_is_enabled_get>
		if (adv) {
   17ef0:	4604      	mov	r4, r0
   17ef2:	2800      	cmp	r0, #0
   17ef4:	d0bc      	beq.n	17e70 <ull_filter_rpa_update+0xe4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   17ef6:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   17efa:	075b      	lsls	r3, r3, #29
   17efc:	d5b8      	bpl.n	17e70 <ull_filter_rpa_update+0xe4>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   17efe:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   17f02:	2b07      	cmp	r3, #7
   17f04:	d8b4      	bhi.n	17e70 <ull_filter_rpa_update+0xe4>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   17f06:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   17f0a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   17f0e:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   17f10:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   17f12:	302c      	adds	r0, #44	; 0x2c
   17f14:	f001 f9cc 	bl	192b0 <lll_adv_pdu_alloc>
	memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   17f18:	786a      	ldrb	r2, [r5, #1]
   17f1a:	4629      	mov	r1, r5
   17f1c:	3202      	adds	r2, #2
   17f1e:	4605      	mov	r5, r0
   17f20:	f009 fbc1 	bl	216a6 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   17f24:	4629      	mov	r1, r5
   17f26:	4620      	mov	r0, r4
   17f28:	f7fc f9d2 	bl	142d0 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   17f2c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   17f30:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   17f34:	e79c      	b.n	17e70 <ull_filter_rpa_update+0xe4>
				LL_ASSERT(!err);
   17f36:	490c      	ldr	r1, [pc, #48]	; (17f68 <ull_filter_rpa_update+0x1dc>)
   17f38:	480c      	ldr	r0, [pc, #48]	; (17f6c <ull_filter_rpa_update+0x1e0>)
   17f3a:	f240 2323 	movw	r3, #547	; 0x223
   17f3e:	465a      	mov	r2, fp
   17f40:	f007 f888 	bl	1f054 <printk>
   17f44:	4040      	eors	r0, r0
   17f46:	f380 8811 	msr	BASEPRI, r0
   17f4a:	f04f 0003 	mov.w	r0, #3
   17f4e:	df02      	svc	2
   17f50:	e798      	b.n	17e84 <ull_filter_rpa_update+0xf8>
   17f52:	bf00      	nop
   17f54:	20001380 	.word	0x20001380
   17f58:	200039e0 	.word	0x200039e0
   17f5c:	20003890 	.word	0x20003890
   17f60:	200037b4 	.word	0x200037b4
   17f64:	200037ec 	.word	0x200037ec
   17f68:	00025898 	.word	0x00025898
   17f6c:	0002561c 	.word	0x0002561c
   17f70:	00025d94 	.word	0x00025d94

00017f74 <rpa_timeout>:
{
   17f74:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   17f76:	2001      	movs	r0, #1
   17f78:	f7ff ff08 	bl	17d8c <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   17f7c:	4b0a      	ldr	r3, [pc, #40]	; (17fa8 <rpa_timeout+0x34>)
   17f7e:	681a      	ldr	r2, [r3, #0]
   17f80:	f240 30e7 	movw	r0, #999	; 0x3e7
   17f84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   17f88:	2100      	movs	r1, #0
   17f8a:	fbe3 0102 	umlal	r0, r1, r3, r2
   17f8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17f92:	2300      	movs	r3, #0
   17f94:	f7e8 f8b4 	bl	100 <__aeabi_uldivmod>
}
   17f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17f9c:	4602      	mov	r2, r0
   17f9e:	460b      	mov	r3, r1
   17fa0:	4802      	ldr	r0, [pc, #8]	; (17fac <rpa_timeout+0x38>)
   17fa2:	4903      	ldr	r1, [pc, #12]	; (17fb0 <rpa_timeout+0x3c>)
   17fa4:	f006 bcce 	b.w	1e944 <k_delayed_work_submit_to_queue>
   17fa8:	200039e0 	.word	0x200039e0
   17fac:	200014c8 	.word	0x200014c8
   17fb0:	20001388 	.word	0x20001388

00017fb4 <ull_filter_adva_get>:
{
   17fb4:	b570      	push	{r4, r5, r6, lr}
	uint8_t idx = adv->lll.rl_idx;
   17fb6:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   17fba:	2c07      	cmp	r4, #7
   17fbc:	d810      	bhi.n	17fe0 <ull_filter_adva_get+0x2c>
   17fbe:	4d10      	ldr	r5, [pc, #64]	; (18000 <ull_filter_adva_get+0x4c>)
   17fc0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17fc4:	00a6      	lsls	r6, r4, #2
   17fc6:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   17fca:	071a      	lsls	r2, r3, #28
   17fcc:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   17fd0:	d505      	bpl.n	17fde <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[idx].rpas_ready);
   17fd2:	079b      	lsls	r3, r3, #30
   17fd4:	d506      	bpl.n	17fe4 <ull_filter_adva_get+0x30>
		return rl[idx].local_rpa->val;
   17fd6:	4434      	add	r4, r6
   17fd8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   17fdc:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   17fde:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   17fe0:	2000      	movs	r0, #0
}
   17fe2:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rl[idx].rpas_ready);
   17fe4:	4a07      	ldr	r2, [pc, #28]	; (18004 <ull_filter_adva_get+0x50>)
   17fe6:	4908      	ldr	r1, [pc, #32]	; (18008 <ull_filter_adva_get+0x54>)
   17fe8:	4808      	ldr	r0, [pc, #32]	; (1800c <ull_filter_adva_get+0x58>)
   17fea:	f240 2349 	movw	r3, #585	; 0x249
   17fee:	f007 f831 	bl	1f054 <printk>
   17ff2:	4040      	eors	r0, r0
   17ff4:	f380 8811 	msr	BASEPRI, r0
   17ff8:	f04f 0003 	mov.w	r0, #3
   17ffc:	df02      	svc	2
   17ffe:	e7ea      	b.n	17fd6 <ull_filter_adva_get+0x22>
   18000:	2000386c 	.word	0x2000386c
   18004:	00025d94 	.word	0x00025d94
   18008:	00025df8 	.word	0x00025df8
   1800c:	0002561c 	.word	0x0002561c

00018010 <ull_filter_tgta_get>:
	uint8_t idx = adv->lll.rl_idx;
   18010:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   18014:	2b07      	cmp	r3, #7
   18016:	d80e      	bhi.n	18036 <ull_filter_tgta_get+0x26>
   18018:	4908      	ldr	r1, [pc, #32]	; (1803c <ull_filter_tgta_get+0x2c>)
   1801a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1801e:	f811 2032 	ldrb.w	r2, [r1, r2, lsl #3]
   18022:	f3c2 0080 	ubfx	r0, r2, #2, #1
   18026:	0752      	lsls	r2, r2, #29
   18028:	d506      	bpl.n	18038 <ull_filter_tgta_get+0x28>
		return rl[idx].peer_rpa.val;
   1802a:	2028      	movs	r0, #40	; 0x28
   1802c:	fb00 1303 	mla	r3, r0, r3, r1
   18030:	f103 001e 	add.w	r0, r3, #30
   18034:	4770      	bx	lr
	return NULL;
   18036:	2000      	movs	r0, #0
}
   18038:	4770      	bx	lr
   1803a:	bf00      	nop
   1803c:	2000386c 	.word	0x2000386c

00018040 <ull_filter_rl_find>:
{
   18040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18044:	468b      	mov	fp, r1
	if (free) {
   18046:	4616      	mov	r6, r2
   18048:	b10a      	cbz	r2, 1804e <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   1804a:	23ff      	movs	r3, #255	; 0xff
   1804c:	7013      	strb	r3, [r2, #0]
   1804e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 180b4 <ull_filter_rl_find+0x74>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18052:	f000 0901 	and.w	r9, r0, #1
   18056:	f108 0a01 	add.w	sl, r8, #1
{
   1805a:	2400      	movs	r4, #0
   1805c:	e004      	b.n	18068 <ull_filter_rl_find+0x28>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1805e:	454a      	cmp	r2, r9
   18060:	d019      	beq.n	18096 <ull_filter_rl_find+0x56>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18062:	3401      	adds	r4, #1
   18064:	2c08      	cmp	r4, #8
   18066:	d012      	beq.n	1808e <ull_filter_rl_find+0x4e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18068:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1806c:	00e8      	lsls	r0, r5, #3
   1806e:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   18072:	07d9      	lsls	r1, r3, #31
   18074:	f3c3 1280 	ubfx	r2, r3, #6, #1
   18078:	b2e7      	uxtb	r7, r4
   1807a:	d4f0      	bmi.n	1805e <ull_filter_rl_find+0x1e>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1807c:	2e00      	cmp	r6, #0
   1807e:	d0f0      	beq.n	18062 <ull_filter_rl_find+0x22>
   18080:	7833      	ldrb	r3, [r6, #0]
   18082:	3401      	adds	r4, #1
   18084:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   18086:	bf08      	it	eq
   18088:	7037      	strbeq	r7, [r6, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1808a:	2c08      	cmp	r4, #8
   1808c:	d1ec      	bne.n	18068 <ull_filter_rl_find+0x28>
	return FILTER_IDX_NONE;
   1808e:	27ff      	movs	r7, #255	; 0xff
}
   18090:	4638      	mov	r0, r7
   18092:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18096:	4450      	add	r0, sl
   18098:	2206      	movs	r2, #6
   1809a:	4659      	mov	r1, fp
   1809c:	f009 faf3 	bl	21686 <memcmp>
   180a0:	2800      	cmp	r0, #0
   180a2:	d0f5      	beq.n	18090 <ull_filter_rl_find+0x50>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   180a4:	2e00      	cmp	r6, #0
   180a6:	d0dc      	beq.n	18062 <ull_filter_rl_find+0x22>
   180a8:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   180ac:	07db      	lsls	r3, r3, #31
   180ae:	d4d8      	bmi.n	18062 <ull_filter_rl_find+0x22>
   180b0:	e7e6      	b.n	18080 <ull_filter_rl_find+0x40>
   180b2:	bf00      	nop
   180b4:	2000386c 	.word	0x2000386c

000180b8 <ll_wl_add>:
{
   180b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   180bc:	4605      	mov	r5, r0
   180be:	b082      	sub	sp, #8
	if (ull_adv_filter_pol_get(0)) {
   180c0:	2000      	movs	r0, #0
   180c2:	f7fc f877 	bl	141b4 <ull_adv_filter_pol_get>
   180c6:	2800      	cmp	r0, #0
   180c8:	d13b      	bne.n	18142 <ll_wl_add+0x8a>
   180ca:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   180cc:	7828      	ldrb	r0, [r5, #0]
   180ce:	28ff      	cmp	r0, #255	; 0xff
   180d0:	d030      	beq.n	18134 <ll_wl_add+0x7c>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   180d2:	f105 0801 	add.w	r8, r5, #1
   180d6:	4641      	mov	r1, r8
   180d8:	f10d 0207 	add.w	r2, sp, #7
   180dc:	f7ff fc56 	bl	1798c <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   180e0:	2807      	cmp	r0, #7
   180e2:	d923      	bls.n	1812c <ll_wl_add+0x74>
	} else if (j >= ARRAY_SIZE(wl)) {
   180e4:	f89d 6007 	ldrb.w	r6, [sp, #7]
   180e8:	2e07      	cmp	r6, #7
   180ea:	d83b      	bhi.n	18164 <ll_wl_add+0xac>
	wl[i].id_addr_type = id_addr->type & 0x1;
   180ec:	4f1f      	ldr	r7, [pc, #124]	; (1816c <ll_wl_add+0xb4>)
   180ee:	782a      	ldrb	r2, [r5, #0]
   180f0:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   180f4:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   180f8:	f362 0341 	bfi	r3, r2, #1, #1
   180fc:	4641      	mov	r1, r8
   180fe:	2206      	movs	r2, #6
   18100:	3002      	adds	r0, #2
   18102:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
   18106:	f009 face 	bl	216a6 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1810a:	7828      	ldrb	r0, [r5, #0]
   1810c:	4622      	mov	r2, r4
   1810e:	4641      	mov	r1, r8
   18110:	f7ff ff96 	bl	18040 <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   18114:	2807      	cmp	r0, #7
   18116:	d918      	bls.n	1814a <ll_wl_add+0x92>
		wl[i].rl_idx = FILTER_IDX_NONE;
   18118:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   1811c:	22ff      	movs	r2, #255	; 0xff
   1811e:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   18120:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   18124:	f043 0301 	orr.w	r3, r3, #1
   18128:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	return 0;
   1812c:	2000      	movs	r0, #0
}
   1812e:	b002      	add	sp, #8
   18130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 1U;
   18134:	4b0e      	ldr	r3, [pc, #56]	; (18170 <ll_wl_add+0xb8>)
   18136:	2201      	movs	r2, #1
		return 0;
   18138:	4620      	mov	r0, r4
		wl_anon = 1U;
   1813a:	701a      	strb	r2, [r3, #0]
}
   1813c:	b002      	add	sp, #8
   1813e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18142:	200c      	movs	r0, #12
}
   18144:	b002      	add	sp, #8
   18146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rl[j].wl = 1U;
   1814a:	490a      	ldr	r1, [pc, #40]	; (18174 <ll_wl_add+0xbc>)
   1814c:	eb00 0480 	add.w	r4, r0, r0, lsl #2
		wl[i].rl_idx = j;
   18150:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
		rl[j].wl = 1U;
   18154:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
		wl[i].rl_idx = j;
   18158:	7050      	strb	r0, [r2, #1]
		rl[j].wl = 1U;
   1815a:	f043 0320 	orr.w	r3, r3, #32
   1815e:	f801 3034 	strb.w	r3, [r1, r4, lsl #3]
   18162:	e7dd      	b.n	18120 <ll_wl_add+0x68>
   18164:	2007      	movs	r0, #7
}
   18166:	b002      	add	sp, #8
   18168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1816c:	200039e4 	.word	0x200039e4
   18170:	20006842 	.word	0x20006842
   18174:	2000386c 	.word	0x2000386c

00018178 <ll_rl_add>:
{
   18178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1817c:	4606      	mov	r6, r0
   1817e:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   18180:	2000      	movs	r0, #0
{
   18182:	460d      	mov	r5, r1
   18184:	4690      	mov	r8, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   18186:	f7fc f809 	bl	1419c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1818a:	2800      	cmp	r0, #0
   1818c:	f040 8085 	bne.w	1829a <ll_rl_add+0x122>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   18190:	46b1      	mov	r9, r6
   18192:	f10d 020f 	add.w	r2, sp, #15
   18196:	f819 0b01 	ldrb.w	r0, [r9], #1
   1819a:	4649      	mov	r1, r9
   1819c:	f7ff ff50 	bl	18040 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   181a0:	2807      	cmp	r0, #7
   181a2:	f240 808b 	bls.w	182bc <ll_rl_add+0x144>
	} else if (j >= ARRAY_SIZE(rl)) {
   181a6:	f89d 700f 	ldrb.w	r7, [sp, #15]
   181aa:	2f07      	cmp	r7, #7
   181ac:	d879      	bhi.n	182a2 <ll_rl_add+0x12a>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   181ae:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   181b2:	4c4c      	ldr	r4, [pc, #304]	; (182e4 <ll_rl_add+0x16c>)
   181b4:	00db      	lsls	r3, r3, #3
   181b6:	1c58      	adds	r0, r3, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   181b8:	eb07 0a87 	add.w	sl, r7, r7, lsl #2
   181bc:	2206      	movs	r2, #6
   181be:	4649      	mov	r1, r9
   181c0:	4420      	add	r0, r4
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   181c2:	9301      	str	r3, [sp, #4]
   181c4:	f009 fa6f 	bl	216a6 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   181c8:	7831      	ldrb	r1, [r6, #0]
   181ca:	f814 203a 	ldrb.w	r2, [r4, sl, lsl #3]
   181ce:	ea4f 0bca 	mov.w	fp, sl, lsl #3
   181d2:	f361 1286 	bfi	r2, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   181d6:	4628      	mov	r0, r5
   181d8:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   181da:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   181de:	f7f7 fb83 	bl	f8e8 <mem_nz>
   181e2:	f814 200b 	ldrb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   181e6:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   181e8:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   181ec:	4640      	mov	r0, r8
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   181ee:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   181f2:	f7f7 fb79 	bl	f8e8 <mem_nz>
   181f6:	f814 200b 	ldrb.w	r2, [r4, fp]
	if (rl[i].pirk) {
   181fa:	9b01      	ldr	r3, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   181fc:	f000 0001 	and.w	r0, r0, #1
   18200:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   18204:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   18208:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   1820c:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
   18210:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   18214:	d01a      	beq.n	1824c <ll_rl_add+0xd4>
		rl[i].pirk_idx = peer_irk_count;
   18216:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 182f0 <ll_rl_add+0x178>
		peer_irk_rl_ids[peer_irk_count] = i;
   1821a:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 182f4 <ll_rl_add+0x17c>
		rl[i].pirk_idx = peer_irk_count;
   1821e:	f89e 1000 	ldrb.w	r1, [lr]
   18222:	4a31      	ldr	r2, [pc, #196]	; (182e8 <ll_rl_add+0x170>)
		peer_irk_rl_ids[peer_irk_count] = i;
   18224:	f80c 7001 	strb.w	r7, [ip, r1]
		rl[i].pirk_idx = peer_irk_count;
   18228:	f88a 1017 	strb.w	r1, [sl, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   1822c:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   18230:	3101      	adds	r1, #1
	psrc += length - 1;
   18232:	f105 020f 	add.w	r2, r5, #15
   18236:	f88e 1000 	strb.w	r1, [lr]
	for (; length > 0; length--) {
   1823a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1823e:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   18240:	f812 1901 	ldrb.w	r1, [r2], #-1
   18244:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   18248:	42aa      	cmp	r2, r5
   1824a:	d1f9      	bne.n	18240 <ll_rl_add+0xc8>
	if (rl[i].lirk) {
   1824c:	2800      	cmp	r0, #0
   1824e:	d139      	bne.n	182c4 <ll_rl_add+0x14c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   18250:	f103 0018 	add.w	r0, r3, #24
   18254:	2206      	movs	r2, #6
   18256:	2100      	movs	r1, #0
   18258:	4420      	add	r0, r4
   1825a:	f009 fa4f 	bl	216fc <memset>
	rl[i].dev = 0U;
   1825e:	eb0b 0307 	add.w	r3, fp, r7
   18262:	00dd      	lsls	r5, r3, #3
	rl[i].rpas_ready = 0U;
   18264:	f814 3033 	ldrb.w	r3, [r4, r3, lsl #3]
   18268:	f023 0312 	bic.w	r3, r3, #18
   1826c:	5563      	strb	r3, [r4, r5]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1826e:	4649      	mov	r1, r9
   18270:	7830      	ldrb	r0, [r6, #0]
   18272:	2200      	movs	r2, #0
   18274:	f7ff fb8a 	bl	1798c <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   18278:	2807      	cmp	r0, #7
   1827a:	d916      	bls.n	182aa <ll_rl_add+0x132>
		rl[i].wl = 0U;
   1827c:	5d63      	ldrb	r3, [r4, r5]
   1827e:	f36f 1345 	bfc	r3, #5, #1
   18282:	5563      	strb	r3, [r4, r5]
	rl[i].taken = 1U;
   18284:	445f      	add	r7, fp
	return 0;
   18286:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   18288:	f814 3037 	ldrb.w	r3, [r4, r7, lsl #3]
   1828c:	f043 0301 	orr.w	r3, r3, #1
   18290:	f804 3037 	strb.w	r3, [r4, r7, lsl #3]
}
   18294:	b005      	add	sp, #20
   18296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1829a:	200c      	movs	r0, #12
}
   1829c:	b005      	add	sp, #20
   1829e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   182a2:	2007      	movs	r0, #7
}
   182a4:	b005      	add	sp, #20
   182a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl[j].rl_idx = i;
   182aa:	4a10      	ldr	r2, [pc, #64]	; (182ec <ll_rl_add+0x174>)
		rl[i].wl = 1U;
   182ac:	5d63      	ldrb	r3, [r4, r5]
		wl[j].rl_idx = i;
   182ae:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		rl[i].wl = 1U;
   182b2:	f043 0320 	orr.w	r3, r3, #32
   182b6:	5563      	strb	r3, [r4, r5]
		wl[j].rl_idx = i;
   182b8:	7047      	strb	r7, [r0, #1]
		rl[i].wl = 1U;
   182ba:	e7e3      	b.n	18284 <ll_rl_add+0x10c>
		return BT_HCI_ERR_INVALID_PARAM;
   182bc:	2012      	movs	r0, #18
}
   182be:	b005      	add	sp, #20
   182c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   182c4:	1dd8      	adds	r0, r3, #7
   182c6:	4641      	mov	r1, r8
   182c8:	2210      	movs	r2, #16
   182ca:	4420      	add	r0, r4
   182cc:	9301      	str	r3, [sp, #4]
   182ce:	f009 f9ea 	bl	216a6 <memcpy>
		rl[i].local_rpa = NULL;
   182d2:	eb0b 0207 	add.w	r2, fp, r7
   182d6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   182da:	2100      	movs	r1, #0
   182dc:	9b01      	ldr	r3, [sp, #4]
   182de:	6251      	str	r1, [r2, #36]	; 0x24
   182e0:	e7b6      	b.n	18250 <ll_rl_add+0xd8>
   182e2:	bf00      	nop
   182e4:	2000386c 	.word	0x2000386c
   182e8:	200037ec 	.word	0x200037ec
   182ec:	200039e4 	.word	0x200039e4
   182f0:	20006840 	.word	0x20006840
   182f4:	200037e4 	.word	0x200037e4

000182f8 <ll_rl_remove>:
{
   182f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182fc:	4605      	mov	r5, r0
   182fe:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   18300:	2000      	movs	r0, #0
   18302:	f7fb ff4b 	bl	1419c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   18306:	2800      	cmp	r0, #0
   18308:	d13e      	bne.n	18388 <ll_rl_remove+0x90>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1830a:	462f      	mov	r7, r5
   1830c:	4602      	mov	r2, r0
   1830e:	4604      	mov	r4, r0
   18310:	f817 0b01 	ldrb.w	r0, [r7], #1
   18314:	4639      	mov	r1, r7
   18316:	f7ff fe93 	bl	18040 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1831a:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1831c:	4606      	mov	r6, r0
	if (i < ARRAY_SIZE(rl)) {
   1831e:	d903      	bls.n	18328 <ll_rl_remove+0x30>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18320:	2002      	movs	r0, #2
}
   18322:	b003      	add	sp, #12
   18324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rl[i].pirk) {
   18328:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 183f0 <ll_rl_remove+0xf8>
   1832c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   18330:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   18334:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   18338:	075b      	lsls	r3, r3, #29
   1833a:	ea4f 0980 	mov.w	r9, r0, lsl #2
   1833e:	d50c      	bpl.n	1835a <ll_rl_remove+0x62>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   18340:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 183f4 <ll_rl_remove+0xfc>
   18344:	f89a 2000 	ldrb.w	r2, [sl]
   18348:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
   1834a:	f012 0bff 	ands.w	fp, r2, #255	; 0xff
   1834e:	d01f      	beq.n	18390 <ll_rl_remove+0x98>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   18350:	7dcb      	ldrb	r3, [r1, #23]
			if (pj && pi != pj) {
   18352:	455b      	cmp	r3, fp
   18354:	d11e      	bne.n	18394 <ll_rl_remove+0x9c>
			peer_irk_count--;
   18356:	f88a 2000 	strb.w	r2, [sl]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1835a:	7828      	ldrb	r0, [r5, #0]
   1835c:	4639      	mov	r1, r7
   1835e:	2200      	movs	r2, #0
   18360:	f7ff fb14 	bl	1798c <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   18364:	2807      	cmp	r0, #7
   18366:	d804      	bhi.n	18372 <ll_rl_remove+0x7a>
			wl[j].rl_idx = FILTER_IDX_NONE;
   18368:	4b1e      	ldr	r3, [pc, #120]	; (183e4 <ll_rl_remove+0xec>)
   1836a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1836e:	23ff      	movs	r3, #255	; 0xff
   18370:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0U;
   18372:	444e      	add	r6, r9
		return 0;
   18374:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   18376:	f818 3036 	ldrb.w	r3, [r8, r6, lsl #3]
   1837a:	f36f 0300 	bfc	r3, #0, #1
   1837e:	f808 3036 	strb.w	r3, [r8, r6, lsl #3]
}
   18382:	b003      	add	sp, #12
   18384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18388:	200c      	movs	r0, #12
}
   1838a:	b003      	add	sp, #12
   1838c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18390:	465a      	mov	r2, fp
   18392:	e7e0      	b.n	18356 <ll_rl_remove+0x5e>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   18394:	4814      	ldr	r0, [pc, #80]	; (183e8 <ll_rl_remove+0xf0>)
   18396:	9301      	str	r3, [sp, #4]
   18398:	eb00 110b 	add.w	r1, r0, fp, lsl #4
   1839c:	2210      	movs	r2, #16
   1839e:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   183a2:	f009 f980 	bl	216a6 <memcpy>
   183a6:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   183a8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   183ac:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   183b0:	f818 2032 	ldrb.w	r2, [r8, r2, lsl #3]
   183b4:	f012 0f01 	tst.w	r2, #1
   183b8:	b2e0      	uxtb	r0, r4
   183ba:	f104 0401 	add.w	r4, r4, #1
   183be:	d004      	beq.n	183ca <ll_rl_remove+0xd2>
   183c0:	0752      	lsls	r2, r2, #29
   183c2:	d502      	bpl.n	183ca <ll_rl_remove+0xd2>
   183c4:	7dca      	ldrb	r2, [r1, #23]
   183c6:	455a      	cmp	r2, fp
   183c8:	d005      	beq.n	183d6 <ll_rl_remove+0xde>
				for (k = 0U;
   183ca:	2c08      	cmp	r4, #8
   183cc:	d1ec      	bne.n	183a8 <ll_rl_remove+0xb0>
   183ce:	f89a 2000 	ldrb.w	r2, [sl]
   183d2:	3a01      	subs	r2, #1
   183d4:	e7bf      	b.n	18356 <ll_rl_remove+0x5e>
						peer_irk_rl_ids[pi] = k;
   183d6:	4c05      	ldr	r4, [pc, #20]	; (183ec <ll_rl_remove+0xf4>)
   183d8:	f89a 2000 	ldrb.w	r2, [sl]
   183dc:	54e0      	strb	r0, [r4, r3]
						rl[k].pirk_idx = pi;
   183de:	75cb      	strb	r3, [r1, #23]
						break;
   183e0:	3a01      	subs	r2, #1
   183e2:	e7b8      	b.n	18356 <ll_rl_remove+0x5e>
   183e4:	200039e4 	.word	0x200039e4
   183e8:	200037ec 	.word	0x200037ec
   183ec:	200037e4 	.word	0x200037e4
   183f0:	2000386c 	.word	0x2000386c
   183f4:	20006840 	.word	0x20006840

000183f8 <ll_rl_crpa_set>:
{
   183f8:	b538      	push	{r3, r4, r5, lr}
   183fa:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   183fc:	795b      	ldrb	r3, [r3, #5]
   183fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18402:	2b40      	cmp	r3, #64	; 0x40
   18404:	d000      	beq.n	18408 <ll_rl_crpa_set+0x10>
}
   18406:	bd38      	pop	{r3, r4, r5, pc}
		if (id_addr) {
   18408:	b119      	cbz	r1, 18412 <ll_rl_crpa_set+0x1a>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   1840a:	2200      	movs	r2, #0
   1840c:	f7ff fe18 	bl	18040 <ull_filter_rl_find>
   18410:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   18412:	2a07      	cmp	r2, #7
   18414:	d8f7      	bhi.n	18406 <ll_rl_crpa_set+0xe>
   18416:	4b09      	ldr	r3, [pc, #36]	; (1843c <ll_rl_crpa_set+0x44>)
   18418:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1841c:	f813 1031 	ldrb.w	r1, [r3, r1, lsl #3]
   18420:	07c9      	lsls	r1, r1, #31
   18422:	d5f0      	bpl.n	18406 <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   18424:	2118      	movs	r1, #24
   18426:	2028      	movs	r0, #40	; 0x28
   18428:	fb10 1002 	smlabb	r0, r0, r2, r1
   1842c:	4418      	add	r0, r3
   1842e:	4621      	mov	r1, r4
   18430:	2206      	movs	r2, #6
}
   18432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   18436:	f009 b936 	b.w	216a6 <memcpy>
   1843a:	bf00      	nop
   1843c:	2000386c 	.word	0x2000386c

00018440 <ll_rl_crpa_get>:
{
   18440:	b538      	push	{r3, r4, r5, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18442:	4603      	mov	r3, r0
{
   18444:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18446:	f813 0b01 	ldrb.w	r0, [r3], #1
   1844a:	2200      	movs	r2, #0
   1844c:	4619      	mov	r1, r3
   1844e:	f7ff fdf7 	bl	18040 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   18452:	2807      	cmp	r0, #7
   18454:	d901      	bls.n	1845a <ll_rl_crpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18456:	2002      	movs	r0, #2
}
   18458:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1845a:	4c09      	ldr	r4, [pc, #36]	; (18480 <ll_rl_crpa_get+0x40>)
   1845c:	2328      	movs	r3, #40	; 0x28
   1845e:	2218      	movs	r2, #24
   18460:	fb13 2000 	smlabb	r0, r3, r0, r2
   18464:	4404      	add	r4, r0
   18466:	4620      	mov	r0, r4
   18468:	2106      	movs	r1, #6
   1846a:	f7f7 fa3d 	bl	f8e8 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1846e:	2800      	cmp	r0, #0
   18470:	d0f1      	beq.n	18456 <ll_rl_crpa_get+0x16>
   18472:	4621      	mov	r1, r4
   18474:	4628      	mov	r0, r5
   18476:	2206      	movs	r2, #6
   18478:	f009 f915 	bl	216a6 <memcpy>
		return 0;
   1847c:	2000      	movs	r0, #0
}
   1847e:	bd38      	pop	{r3, r4, r5, pc}
   18480:	2000386c 	.word	0x2000386c

00018484 <ll_rl_lrpa_get>:
{
   18484:	b510      	push	{r4, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   18486:	4603      	mov	r3, r0
{
   18488:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1848a:	f813 0b01 	ldrb.w	r0, [r3], #1
   1848e:	2200      	movs	r2, #0
   18490:	4619      	mov	r1, r3
   18492:	f7ff fdd5 	bl	18040 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   18496:	2807      	cmp	r0, #7
   18498:	d901      	bls.n	1849e <ll_rl_lrpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1849a:	2002      	movs	r0, #2
}
   1849c:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1849e:	4b06      	ldr	r3, [pc, #24]	; (184b8 <ll_rl_lrpa_get+0x34>)
   184a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   184a4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   184a8:	2206      	movs	r2, #6
   184aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
   184ac:	4620      	mov	r0, r4
   184ae:	f009 f8fa 	bl	216a6 <memcpy>
		return 0;
   184b2:	2000      	movs	r0, #0
}
   184b4:	bd10      	pop	{r4, pc}
   184b6:	bf00      	nop
   184b8:	2000386c 	.word	0x2000386c

000184bc <ll_priv_mode_set>:
{
   184bc:	b570      	push	{r4, r5, r6, lr}
   184be:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   184c0:	2000      	movs	r0, #0
{
   184c2:	460e      	mov	r6, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   184c4:	f7fb fe6a 	bl	1419c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   184c8:	b968      	cbnz	r0, 184e6 <ll_priv_mode_set+0x2a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   184ca:	4629      	mov	r1, r5
   184cc:	4602      	mov	r2, r0
   184ce:	4604      	mov	r4, r0
   184d0:	f811 0b01 	ldrb.w	r0, [r1], #1
   184d4:	f7ff fdb4 	bl	18040 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   184d8:	2807      	cmp	r0, #7
   184da:	d81c      	bhi.n	18516 <ll_priv_mode_set+0x5a>
		switch (mode) {
   184dc:	b186      	cbz	r6, 18500 <ll_priv_mode_set+0x44>
   184de:	2e01      	cmp	r6, #1
   184e0:	d003      	beq.n	184ea <ll_priv_mode_set+0x2e>
   184e2:	2012      	movs	r0, #18
}
   184e4:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   184e6:	200c      	movs	r0, #12
}
   184e8:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 1U;
   184ea:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   184ee:	490b      	ldr	r1, [pc, #44]	; (1851c <ll_priv_mode_set+0x60>)
   184f0:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   184f4:	f042 0210 	orr.w	r2, r2, #16
   184f8:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	return 0;
   184fc:	4620      	mov	r0, r4
}
   184fe:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   18500:	4b06      	ldr	r3, [pc, #24]	; (1851c <ll_priv_mode_set+0x60>)
   18502:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18506:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   1850a:	f366 1204 	bfi	r2, r6, #4, #1
   1850e:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return 0;
   18512:	4630      	mov	r0, r6
}
   18514:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18516:	2002      	movs	r0, #2
}
   18518:	bd70      	pop	{r4, r5, r6, pc}
   1851a:	bf00      	nop
   1851c:	2000386c 	.word	0x2000386c

00018520 <ull_filter_reset>:
	wl_anon = 0U;
   18520:	4a33      	ldr	r2, [pc, #204]	; (185f0 <ull_filter_reset+0xd0>)
   18522:	4934      	ldr	r1, [pc, #208]	; (185f4 <ull_filter_reset+0xd4>)
{
   18524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	wl_anon = 0U;
   18526:	2300      	movs	r3, #0
   18528:	4c33      	ldr	r4, [pc, #204]	; (185f8 <ull_filter_reset+0xd8>)
   1852a:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   1852c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   18530:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   18532:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   18534:	eb02 0582 	add.w	r5, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   18538:	d805      	bhi.n	18546 <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   1853a:	f814 2035 	ldrb.w	r2, [r4, r5, lsl #3]
   1853e:	f36f 1245 	bfc	r2, #5, #1
   18542:	f804 2035 	strb.w	r2, [r4, r5, lsl #3]
		wl[i].taken = 0U;
   18546:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   1854a:	f36f 0200 	bfc	r2, #0, #1
   1854e:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   18552:	3301      	adds	r3, #1
   18554:	2b08      	cmp	r3, #8
   18556:	d1e9      	bne.n	1852c <ull_filter_reset+0xc>
		rl[i].taken = 0U;
   18558:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   1855c:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
   18560:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   18564:	7827      	ldrb	r7, [r4, #0]
   18566:	f894 60a0 	ldrb.w	r6, [r4, #160]	; 0xa0
	rl_enable = 0U;
   1856a:	2100      	movs	r1, #0
		rl[i].taken = 0U;
   1856c:	f361 0500 	bfi	r5, r1, #0, #1
   18570:	f361 0200 	bfi	r2, r1, #0, #1
   18574:	f361 0300 	bfi	r3, r1, #0, #1
   18578:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
   1857c:	f894 50c8 	ldrb.w	r5, [r4, #200]	; 0xc8
   18580:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
   18584:	f361 0700 	bfi	r7, r1, #0, #1
   18588:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   1858c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   18590:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   18594:	7027      	strb	r7, [r4, #0]
   18596:	f361 0500 	bfi	r5, r1, #0, #1
	rl_enable = 0U;
   1859a:	4f18      	ldr	r7, [pc, #96]	; (185fc <ull_filter_reset+0xdc>)
		rl[i].taken = 0U;
   1859c:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
   185a0:	f361 0200 	bfi	r2, r1, #0, #1
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   185a4:	4d16      	ldr	r5, [pc, #88]	; (18600 <ull_filter_reset+0xe0>)
	rl_enable = 0U;
   185a6:	7039      	strb	r1, [r7, #0]
		rl[i].taken = 0U;
   185a8:	f361 0300 	bfi	r3, r1, #0, #1
   185ac:	f884 20f0 	strb.w	r2, [r4, #240]	; 0xf0
   185b0:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	peer_irk_count = 0U;
   185b4:	4f13      	ldr	r7, [pc, #76]	; (18604 <ull_filter_reset+0xe4>)
	rpa_last_ms = -1;
   185b6:	4a14      	ldr	r2, [pc, #80]	; (18608 <ull_filter_reset+0xe8>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   185b8:	4b14      	ldr	r3, [pc, #80]	; (1860c <ull_filter_reset+0xec>)
   185ba:	602b      	str	r3, [r5, #0]
		rl[i].taken = 0U;
   185bc:	f361 0600 	bfi	r6, r1, #0, #1
   185c0:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
	rpa_last_ms = -1;
   185c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   185c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   185cc:	e9c2 4500 	strd	r4, r5, [r2]
	peer_irk_count = 0U;
   185d0:	7039      	strb	r1, [r7, #0]
	if (init) {
   185d2:	b138      	cbz	r0, 185e4 <ull_filter_reset+0xc4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   185d4:	4b0e      	ldr	r3, [pc, #56]	; (18610 <ull_filter_reset+0xf0>)
   185d6:	2230      	movs	r2, #48	; 0x30
   185d8:	4618      	mov	r0, r3
   185da:	f009 f88f 	bl	216fc <memset>
   185de:	4a0d      	ldr	r2, [pc, #52]	; (18614 <ull_filter_reset+0xf4>)
   185e0:	6042      	str	r2, [r0, #4]
}
   185e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   185e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		k_delayed_work_cancel(&rpa_work);
   185e8:	4809      	ldr	r0, [pc, #36]	; (18610 <ull_filter_reset+0xf0>)
   185ea:	f00b bfb7 	b.w	2455c <k_delayed_work_cancel>
   185ee:	bf00      	nop
   185f0:	20006842 	.word	0x20006842
   185f4:	200039e4 	.word	0x200039e4
   185f8:	2000386c 	.word	0x2000386c
   185fc:	20006841 	.word	0x20006841
   18600:	200039e0 	.word	0x200039e0
   18604:	20006840 	.word	0x20006840
   18608:	20001380 	.word	0x20001380
   1860c:	000dbba0 	.word	0x000dbba0
   18610:	20001388 	.word	0x20001388
   18614:	00017f75 	.word	0x00017f75

00018618 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   18618:	2807      	cmp	r0, #7
   1861a:	d807      	bhi.n	1862c <ull_filter_lll_lrpa_used+0x14>
   1861c:	4b04      	ldr	r3, [pc, #16]	; (18630 <ull_filter_lll_lrpa_used+0x18>)
   1861e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18622:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   18626:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1862a:	4770      	bx	lr
   1862c:	2000      	movs	r0, #0
}
   1862e:	4770      	bx	lr
   18630:	2000386c 	.word	0x2000386c

00018634 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   18634:	4b02      	ldr	r3, [pc, #8]	; (18640 <ull_filter_lll_irks_get+0xc>)
   18636:	781b      	ldrb	r3, [r3, #0]
   18638:	7003      	strb	r3, [r0, #0]
}
   1863a:	4802      	ldr	r0, [pc, #8]	; (18644 <ull_filter_lll_irks_get+0x10>)
   1863c:	4770      	bx	lr
   1863e:	bf00      	nop
   18640:	20006840 	.word	0x20006840
   18644:	200037ec 	.word	0x200037ec

00018648 <ull_filter_lll_rl_irk_idx>:
{
   18648:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1864a:	4b20      	ldr	r3, [pc, #128]	; (186cc <ull_filter_lll_rl_irk_idx+0x84>)
   1864c:	781b      	ldrb	r3, [r3, #0]
   1864e:	4283      	cmp	r3, r0
{
   18650:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   18652:	d90c      	bls.n	1866e <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   18654:	4b1e      	ldr	r3, [pc, #120]	; (186d0 <ull_filter_lll_rl_irk_idx+0x88>)
   18656:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   18658:	2c07      	cmp	r4, #7
   1865a:	d819      	bhi.n	18690 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   1865c:	4b1d      	ldr	r3, [pc, #116]	; (186d4 <ull_filter_lll_rl_irk_idx+0x8c>)
   1865e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18662:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   18666:	07db      	lsls	r3, r3, #31
   18668:	d520      	bpl.n	186ac <ull_filter_lll_rl_irk_idx+0x64>
}
   1866a:	4620      	mov	r0, r4
   1866c:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1866e:	4a1a      	ldr	r2, [pc, #104]	; (186d8 <ull_filter_lll_rl_irk_idx+0x90>)
   18670:	491a      	ldr	r1, [pc, #104]	; (186dc <ull_filter_lll_rl_irk_idx+0x94>)
   18672:	481b      	ldr	r0, [pc, #108]	; (186e0 <ull_filter_lll_rl_irk_idx+0x98>)
   18674:	f240 23b9 	movw	r3, #697	; 0x2b9
   18678:	f006 fcec 	bl	1f054 <printk>
   1867c:	4040      	eors	r0, r0
   1867e:	f380 8811 	msr	BASEPRI, r0
   18682:	f04f 0003 	mov.w	r0, #3
   18686:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   18688:	4b11      	ldr	r3, [pc, #68]	; (186d0 <ull_filter_lll_rl_irk_idx+0x88>)
   1868a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1868c:	2c07      	cmp	r4, #7
   1868e:	d9e5      	bls.n	1865c <ull_filter_lll_rl_irk_idx+0x14>
   18690:	4a11      	ldr	r2, [pc, #68]	; (186d8 <ull_filter_lll_rl_irk_idx+0x90>)
   18692:	4914      	ldr	r1, [pc, #80]	; (186e4 <ull_filter_lll_rl_irk_idx+0x9c>)
   18694:	4812      	ldr	r0, [pc, #72]	; (186e0 <ull_filter_lll_rl_irk_idx+0x98>)
   18696:	f240 23bb 	movw	r3, #699	; 0x2bb
   1869a:	f006 fcdb 	bl	1f054 <printk>
   1869e:	4040      	eors	r0, r0
   186a0:	f380 8811 	msr	BASEPRI, r0
   186a4:	f04f 0003 	mov.w	r0, #3
   186a8:	df02      	svc	2
   186aa:	e7d7      	b.n	1865c <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   186ac:	4a0a      	ldr	r2, [pc, #40]	; (186d8 <ull_filter_lll_rl_irk_idx+0x90>)
   186ae:	490e      	ldr	r1, [pc, #56]	; (186e8 <ull_filter_lll_rl_irk_idx+0xa0>)
   186b0:	480b      	ldr	r0, [pc, #44]	; (186e0 <ull_filter_lll_rl_irk_idx+0x98>)
   186b2:	f44f 732f 	mov.w	r3, #700	; 0x2bc
   186b6:	f006 fccd 	bl	1f054 <printk>
   186ba:	4040      	eors	r0, r0
   186bc:	f380 8811 	msr	BASEPRI, r0
   186c0:	f04f 0003 	mov.w	r0, #3
   186c4:	df02      	svc	2
}
   186c6:	4620      	mov	r0, r4
   186c8:	bd10      	pop	{r4, pc}
   186ca:	bf00      	nop
   186cc:	20006840 	.word	0x20006840
   186d0:	200037e4 	.word	0x200037e4
   186d4:	2000386c 	.word	0x2000386c
   186d8:	00025d94 	.word	0x00025d94
   186dc:	00025f78 	.word	0x00025f78
   186e0:	0002561c 	.word	0x0002561c
   186e4:	00025f98 	.word	0x00025f98
   186e8:	00025f6c 	.word	0x00025f6c

000186ec <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   186ec:	2807      	cmp	r0, #7
   186ee:	d823      	bhi.n	18738 <ull_filter_lll_irk_whitelisted+0x4c>
{
   186f0:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   186f2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   186f6:	4e11      	ldr	r6, [pc, #68]	; (1873c <ull_filter_lll_irk_whitelisted+0x50>)
   186f8:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   186fc:	07db      	lsls	r3, r3, #31
   186fe:	4604      	mov	r4, r0
   18700:	ea4f 0580 	mov.w	r5, r0, lsl #2
   18704:	d505      	bpl.n	18712 <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   18706:	442c      	add	r4, r5
   18708:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1870c:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   18710:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   18712:	4a0b      	ldr	r2, [pc, #44]	; (18740 <ull_filter_lll_irk_whitelisted+0x54>)
   18714:	490b      	ldr	r1, [pc, #44]	; (18744 <ull_filter_lll_irk_whitelisted+0x58>)
   18716:	480c      	ldr	r0, [pc, #48]	; (18748 <ull_filter_lll_irk_whitelisted+0x5c>)
   18718:	f240 23c7 	movw	r3, #711	; 0x2c7
   1871c:	f006 fc9a 	bl	1f054 <printk>
   18720:	4040      	eors	r0, r0
   18722:	f380 8811 	msr	BASEPRI, r0
   18726:	f04f 0003 	mov.w	r0, #3
   1872a:	df02      	svc	2
	return rl[rl_idx].wl;
   1872c:	442c      	add	r4, r5
   1872e:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   18732:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   18736:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   18738:	2000      	movs	r0, #0
}
   1873a:	4770      	bx	lr
   1873c:	2000386c 	.word	0x2000386c
   18740:	00025d94 	.word	0x00025d94
   18744:	00025de4 	.word	0x00025de4
   18748:	0002561c 	.word	0x0002561c

0001874c <ull_filter_lll_get>:
		return &wl_filter;
   1874c:	4a03      	ldr	r2, [pc, #12]	; (1875c <ull_filter_lll_get+0x10>)
   1874e:	4b04      	ldr	r3, [pc, #16]	; (18760 <ull_filter_lll_get+0x14>)
}
   18750:	2800      	cmp	r0, #0
   18752:	bf0c      	ite	eq
   18754:	4610      	moveq	r0, r2
   18756:	4618      	movne	r0, r3
   18758:	4770      	bx	lr
   1875a:	bf00      	nop
   1875c:	200039ac 	.word	0x200039ac
   18760:	20003a24 	.word	0x20003a24

00018764 <ull_filter_lll_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   18764:	4b1c      	ldr	r3, [pc, #112]	; (187d8 <ull_filter_lll_rl_addr_allowed+0x74>)
   18766:	781b      	ldrb	r3, [r3, #0]
   18768:	b1fb      	cbz	r3, 187aa <ull_filter_lll_rl_addr_allowed+0x46>
   1876a:	7813      	ldrb	r3, [r2, #0]
   1876c:	2bff      	cmp	r3, #255	; 0xff
   1876e:	d11c      	bne.n	187aa <ull_filter_lll_rl_addr_allowed+0x46>
{
   18770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18774:	4d19      	ldr	r5, [pc, #100]	; (187dc <ull_filter_lll_rl_addr_allowed+0x78>)
   18776:	4606      	mov	r6, r0
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   18778:	2300      	movs	r3, #0
   1877a:	1faf      	subs	r7, r5, #6
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1877c:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   18780:	fa5f fe83 	uxtb.w	lr, r3
   18784:	f817 4034 	ldrb.w	r4, [r7, r4, lsl #3]
   18788:	f014 0001 	ands.w	r0, r4, #1
   1878c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   18790:	d003      	beq.n	1879a <ull_filter_lll_rl_addr_allowed+0x36>
   18792:	f3c4 1480 	ubfx	r4, r4, #6, #1
   18796:	42b4      	cmp	r4, r6
   18798:	d009      	beq.n	187ae <ull_filter_lll_rl_addr_allowed+0x4a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1879a:	3301      	adds	r3, #1
   1879c:	2b08      	cmp	r3, #8
   1879e:	f105 0528 	add.w	r5, r5, #40	; 0x28
   187a2:	d1eb      	bne.n	1877c <ull_filter_lll_rl_addr_allowed+0x18>
		return true;
   187a4:	2001      	movs	r0, #1
}
   187a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
   187aa:	2001      	movs	r0, #1
}
   187ac:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   187ae:	1fac      	subs	r4, r5, #6
   187b0:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
				if (addr[j] != id_addr[j]) {
   187b4:	f814 af01 	ldrb.w	sl, [r4, #1]!
   187b8:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   187bc:	45ca      	cmp	sl, r9
   187be:	d1ec      	bne.n	1879a <ull_filter_lll_rl_addr_allowed+0x36>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   187c0:	42ac      	cmp	r4, r5
   187c2:	d1f7      	bne.n	187b4 <ull_filter_lll_rl_addr_allowed+0x50>
				return !rl[i].pirk || rl[i].dev;
   187c4:	4463      	add	r3, ip
				*rl_idx = i;
   187c6:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   187ca:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   187ce:	075a      	lsls	r2, r3, #29
   187d0:	d5e9      	bpl.n	187a6 <ull_filter_lll_rl_addr_allowed+0x42>
   187d2:	f3c3 1000 	ubfx	r0, r3, #4, #1
   187d6:	e7e6      	b.n	187a6 <ull_filter_lll_rl_addr_allowed+0x42>
   187d8:	20006841 	.word	0x20006841
   187dc:	20003872 	.word	0x20003872

000187e0 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   187e0:	4b02      	ldr	r3, [pc, #8]	; (187ec <ull_filter_lll_rl_enabled+0xc>)
   187e2:	7818      	ldrb	r0, [r3, #0]
}
   187e4:	3800      	subs	r0, #0
   187e6:	bf18      	it	ne
   187e8:	2001      	movne	r0, #1
   187ea:	4770      	bx	lr
   187ec:	20006841 	.word	0x20006841

000187f0 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   187f0:	4668      	mov	r0, sp
   187f2:	f020 0107 	bic.w	r1, r0, #7
   187f6:	468d      	mov	sp, r1
   187f8:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	isr_radio();
   187fa:	f002 f815 	bl	1a828 <isr_radio>

	ISR_DIRECT_PM();
   187fe:	f7ee ffef 	bl	77e0 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   18802:	f7ef fb27 	bl	7e54 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   18806:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1880a:	4685      	mov	sp, r0
   1880c:	4770      	bx	lr
   1880e:	bf00      	nop

00018810 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   18810:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   18812:	4b09      	ldr	r3, [pc, #36]	; (18838 <rtc0_nrf5_isr+0x28>)
   18814:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   18818:	b93a      	cbnz	r2, 1882a <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1881a:	2001      	movs	r0, #1
   1881c:	f7f7 f946 	bl	faac <mayfly_run>
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
#endif

	DEBUG_TICKER_ISR(0);
}
   18820:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   18824:	2002      	movs	r0, #2
   18826:	f7f7 b941 	b.w	faac <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1882a:	2000      	movs	r0, #0
   1882c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   18830:	f7f8 fac6 	bl	10dc0 <ticker_trigger>
   18834:	e7f1      	b.n	1881a <rtc0_nrf5_isr+0xa>
   18836:	bf00      	nop
   18838:	4000b000 	.word	0x4000b000

0001883c <swi_lll_nrf5_isr>:

static void swi_lll_nrf5_isr(const void *arg)
{
	DEBUG_RADIO_ISR(1);

	mayfly_run(TICKER_USER_ID_LLL);
   1883c:	2000      	movs	r0, #0
   1883e:	f7f7 b935 	b.w	faac <mayfly_run>
   18842:	bf00      	nop

00018844 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   18844:	f002 b91c 	b.w	1aa80 <radio_status_reset>

00018848 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   18848:	2801      	cmp	r0, #1
   1884a:	d800      	bhi.n	1884e <ticker_stop_op_cb+0x6>
   1884c:	4770      	bx	lr
{
   1884e:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   18850:	4a06      	ldr	r2, [pc, #24]	; (1886c <ticker_stop_op_cb+0x24>)
   18852:	4907      	ldr	r1, [pc, #28]	; (18870 <ticker_stop_op_cb+0x28>)
   18854:	4807      	ldr	r0, [pc, #28]	; (18874 <ticker_stop_op_cb+0x2c>)
   18856:	f240 238a 	movw	r3, #650	; 0x28a
   1885a:	f006 fbfb 	bl	1f054 <printk>
   1885e:	4040      	eors	r0, r0
   18860:	f380 8811 	msr	BASEPRI, r0
   18864:	f04f 0003 	mov.w	r0, #3
   18868:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1886a:	bd08      	pop	{r3, pc}
   1886c:	00025fb4 	.word	0x00025fb4
   18870:	00025ffc 	.word	0x00025ffc
   18874:	0002561c 	.word	0x0002561c

00018878 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   18878:	2801      	cmp	r0, #1
   1887a:	d800      	bhi.n	1887e <ticker_start_op_cb+0x6>
   1887c:	4770      	bx	lr
{
   1887e:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   18880:	4a06      	ldr	r2, [pc, #24]	; (1889c <ticker_start_op_cb+0x24>)
   18882:	4907      	ldr	r1, [pc, #28]	; (188a0 <ticker_start_op_cb+0x28>)
   18884:	4807      	ldr	r0, [pc, #28]	; (188a4 <ticker_start_op_cb+0x2c>)
   18886:	f240 2395 	movw	r3, #661	; 0x295
   1888a:	f006 fbe3 	bl	1f054 <printk>
   1888e:	4040      	eors	r0, r0
   18890:	f380 8811 	msr	BASEPRI, r0
   18894:	f04f 0003 	mov.w	r0, #3
   18898:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1889a:	bd08      	pop	{r3, pc}
   1889c:	00025fb4 	.word	0x00025fb4
   188a0:	00025ffc 	.word	0x00025ffc
   188a4:	0002561c 	.word	0x0002561c

000188a8 <preempt_ticker_start.isra.0>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   188a8:	b530      	push	{r4, r5, lr}
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   188aa:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   188ac:	b08b      	sub	sp, #44	; 0x2c
	evt = HDR_LLL2EVT(prepare_param->param);
   188ae:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   188b0:	4c15      	ldr	r4, [pc, #84]	; (18908 <preempt_ticker_start.isra.0+0x60>)
   188b2:	4916      	ldr	r1, [pc, #88]	; (1890c <preempt_ticker_start.isra.0+0x64>)
   188b4:	9208      	str	r2, [sp, #32]
   188b6:	e9cd 2203 	strd	r2, r2, [sp, #12]
   188ba:	e9cd 2201 	strd	r2, r2, [sp, #4]
   188be:	9206      	str	r2, [sp, #24]
   188c0:	9407      	str	r4, [sp, #28]
   188c2:	9105      	str	r1, [sp, #20]
	preempt_to = MAX(evt->ticks_active_to_start,
   188c4:	e9d3 5400 	ldrd	r5, r4, [r3]
   188c8:	6899      	ldr	r1, [r3, #8]
   188ca:	42a5      	cmp	r5, r4
   188cc:	bf2c      	ite	cs
   188ce:	ebc1 0105 	rsbcs	r1, r1, r5
   188d2:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   188d6:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   188d8:	9100      	str	r1, [sp, #0]
   188da:	4610      	mov	r0, r2
   188dc:	4611      	mov	r1, r2
   188de:	f7f8 fadd 	bl	10e9c <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   188e2:	2802      	cmp	r0, #2
   188e4:	d801      	bhi.n	188ea <preempt_ticker_start.isra.0+0x42>
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   188e6:	b00b      	add	sp, #44	; 0x2c
   188e8:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   188ea:	4a09      	ldr	r2, [pc, #36]	; (18910 <preempt_ticker_start.isra.0+0x68>)
   188ec:	4909      	ldr	r1, [pc, #36]	; (18914 <preempt_ticker_start.isra.0+0x6c>)
   188ee:	480a      	ldr	r0, [pc, #40]	; (18918 <preempt_ticker_start.isra.0+0x70>)
   188f0:	f240 23b3 	movw	r3, #691	; 0x2b3
   188f4:	f006 fbae 	bl	1f054 <printk>
   188f8:	4040      	eors	r0, r0
   188fa:	f380 8811 	msr	BASEPRI, r0
   188fe:	f04f 0003 	mov.w	r0, #3
   18902:	df02      	svc	2
}
   18904:	b00b      	add	sp, #44	; 0x2c
   18906:	bd30      	pop	{r4, r5, pc}
   18908:	00018879 	.word	0x00018879
   1890c:	00018b6d 	.word	0x00018b6d
   18910:	00025fb4 	.word	0x00025fb4
   18914:	0002601c 	.word	0x0002601c
   18918:	0002561c 	.word	0x0002561c

0001891c <prepare>:
{
   1891c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18920:	b085      	sub	sp, #20
   18922:	4604      	mov	r4, r0
	idx = UINT8_MAX;
   18924:	f04f 0cff 	mov.w	ip, #255	; 0xff
	p = ull_prepare_dequeue_iter(&idx);
   18928:	f10d 000f 	add.w	r0, sp, #15
{
   1892c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   18930:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	idx = UINT8_MAX;
   18934:	f88d c00f 	strb.w	ip, [sp, #15]
{
   18938:	460d      	mov	r5, r1
   1893a:	4616      	mov	r6, r2
   1893c:	461f      	mov	r7, r3
	p = ull_prepare_dequeue_iter(&idx);
   1893e:	f7fb f871 	bl	13a24 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   18942:	b918      	cbnz	r0, 1894c <prepare+0x30>
   18944:	e01e      	b.n	18984 <prepare+0x68>
		p = ull_prepare_dequeue_iter(&idx);
   18946:	f7fb f86d 	bl	13a24 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1894a:	b1d8      	cbz	r0, 18984 <prepare+0x68>
   1894c:	f890 3020 	ldrb.w	r3, [r0, #32]
   18950:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   18952:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   18956:	d1f6      	bne.n	18946 <prepare+0x2a>
	if (event.curr.abort_cb || (p && is_resume)) {
   18958:	4b2d      	ldr	r3, [pc, #180]	; (18a10 <prepare+0xf4>)
   1895a:	689a      	ldr	r2, [r3, #8]
   1895c:	b9aa      	cbnz	r2, 1898a <prepare+0x6e>
   1895e:	f1b9 0f00 	cmp.w	r9, #0
   18962:	d036      	beq.n	189d2 <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   18964:	2201      	movs	r2, #1
   18966:	9201      	str	r2, [sp, #4]
   18968:	9700      	str	r7, [sp, #0]
   1896a:	4633      	mov	r3, r6
   1896c:	4629      	mov	r1, r5
   1896e:	4620      	mov	r0, r4
   18970:	4642      	mov	r2, r8
   18972:	f7fb f811 	bl	13998 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   18976:	b9d8      	cbnz	r0, 189b0 <prepare+0x94>
		return -EINPROGRESS;
   18978:	f06f 0443 	mvn.w	r4, #67	; 0x43
}
   1897c:	4620      	mov	r0, r4
   1897e:	b005      	add	sp, #20
   18980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (event.curr.abort_cb || (p && is_resume)) {
   18984:	4b22      	ldr	r3, [pc, #136]	; (18a10 <prepare+0xf4>)
   18986:	689a      	ldr	r2, [r3, #8]
   18988:	b31a      	cbz	r2, 189d2 <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1898a:	e9cd 7900 	strd	r7, r9, [sp]
   1898e:	4633      	mov	r3, r6
   18990:	4629      	mov	r1, r5
   18992:	4620      	mov	r0, r4
   18994:	4642      	mov	r2, r8
   18996:	f7fa ffff 	bl	13998 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1899a:	b948      	cbnz	r0, 189b0 <prepare+0x94>
		if (is_resume) {
   1899c:	f1b9 0f00 	cmp.w	r9, #0
   189a0:	d1ea      	bne.n	18978 <prepare+0x5c>
		preempt_ticker_start(prepare_param);
   189a2:	f8d8 100c 	ldr.w	r1, [r8, #12]
   189a6:	f8d8 0000 	ldr.w	r0, [r8]
   189aa:	f7ff ff7d 	bl	188a8 <preempt_ticker_start.isra.0>
   189ae:	e7e3      	b.n	18978 <prepare+0x5c>
		LL_ASSERT(!err);
   189b0:	4a18      	ldr	r2, [pc, #96]	; (18a14 <prepare+0xf8>)
   189b2:	4919      	ldr	r1, [pc, #100]	; (18a18 <prepare+0xfc>)
   189b4:	4819      	ldr	r0, [pc, #100]	; (18a1c <prepare+0x100>)
   189b6:	f240 232f 	movw	r3, #559	; 0x22f
   189ba:	f006 fb4b 	bl	1f054 <printk>
   189be:	4040      	eors	r0, r0
   189c0:	f380 8811 	msr	BASEPRI, r0
   189c4:	f04f 0003 	mov.w	r0, #3
   189c8:	df02      	svc	2
		if (is_resume) {
   189ca:	f1b9 0f00 	cmp.w	r9, #0
   189ce:	d1d3      	bne.n	18978 <prepare+0x5c>
   189d0:	e7e7      	b.n	189a2 <prepare+0x86>
	event.curr.param = prepare_param->param;
   189d2:	f8d8 200c 	ldr.w	r2, [r8, #12]
   189d6:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   189d8:	e9c3 4501 	strd	r4, r5, [r3, #4]
	err = prepare_cb(prepare_param);
   189dc:	4640      	mov	r0, r8
   189de:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   189e0:	2200      	movs	r2, #0
   189e2:	4b0f      	ldr	r3, [pc, #60]	; (18a20 <prepare+0x104>)
   189e4:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   189e6:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   189e8:	4611      	mov	r1, r2
   189ea:	4610      	mov	r0, r2
   189ec:	f7f8 fac2 	bl	10f74 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   189f0:	2802      	cmp	r0, #2
   189f2:	d9c3      	bls.n	1897c <prepare+0x60>
   189f4:	4a07      	ldr	r2, [pc, #28]	; (18a14 <prepare+0xf8>)
   189f6:	490b      	ldr	r1, [pc, #44]	; (18a24 <prepare+0x108>)
   189f8:	4808      	ldr	r0, [pc, #32]	; (18a1c <prepare+0x100>)
   189fa:	f240 2369 	movw	r3, #617	; 0x269
   189fe:	f006 fb29 	bl	1f054 <printk>
   18a02:	4040      	eors	r0, r0
   18a04:	f380 8811 	msr	BASEPRI, r0
   18a08:	f04f 0003 	mov.w	r0, #3
   18a0c:	df02      	svc	2
   18a0e:	e7b5      	b.n	1897c <prepare+0x60>
   18a10:	20003a5c 	.word	0x20003a5c
   18a14:	00025fb4 	.word	0x00025fb4
   18a18:	00025898 	.word	0x00025898
   18a1c:	0002561c 	.word	0x0002561c
   18a20:	00018849 	.word	0x00018849
   18a24:	0002601c 	.word	0x0002601c

00018a28 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   18a28:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	int resume_prio;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   18a2a:	4e4b      	ldr	r6, [pc, #300]	; (18b58 <preempt+0x130>)
   18a2c:	68b3      	ldr	r3, [r6, #8]
{
   18a2e:	b08b      	sub	sp, #44	; 0x2c
	if (!event.curr.abort_cb || !event.curr.param) {
   18a30:	b1b3      	cbz	r3, 18a60 <preempt+0x38>
   18a32:	6833      	ldr	r3, [r6, #0]
   18a34:	b1a3      	cbz	r3, 18a60 <preempt+0x38>
		return;
	}

	idx = UINT8_MAX;
   18a36:	23ff      	movs	r3, #255	; 0xff
	next = ull_prepare_dequeue_iter(&idx);
   18a38:	f10d 000e 	add.w	r0, sp, #14
	idx = UINT8_MAX;
   18a3c:	f88d 300e 	strb.w	r3, [sp, #14]
	next = ull_prepare_dequeue_iter(&idx);
   18a40:	f7fa fff0 	bl	13a24 <ull_prepare_dequeue_iter>
	if (!next) {
   18a44:	4604      	mov	r4, r0
   18a46:	b158      	cbz	r0, 18a60 <preempt+0x38>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   18a48:	f894 3020 	ldrb.w	r3, [r4, #32]
   18a4c:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   18a50:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
   18a54:	d006      	beq.n	18a64 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   18a56:	f7fa ffe5 	bl	13a24 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   18a5a:	4604      	mov	r4, r0
   18a5c:	2800      	cmp	r0, #0
   18a5e:	d1f3      	bne.n	18a48 <preempt+0x20>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   18a60:	b00b      	add	sp, #44	; 0x2c
   18a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   18a64:	ab05      	add	r3, sp, #20
   18a66:	e9d6 2700 	ldrd	r2, r7, [r6]
   18a6a:	69e1      	ldr	r1, [r4, #28]
   18a6c:	68e0      	ldr	r0, [r4, #12]
   18a6e:	9300      	str	r3, [sp, #0]
   18a70:	ab04      	add	r3, sp, #16
   18a72:	47b8      	blx	r7
	if (!ret) {
   18a74:	4607      	mov	r7, r0
   18a76:	2800      	cmp	r0, #0
   18a78:	d062      	beq.n	18b40 <preempt+0x118>
	event.curr.abort_cb(NULL, event.curr.param);
   18a7a:	68b3      	ldr	r3, [r6, #8]
   18a7c:	6831      	ldr	r1, [r6, #0]
   18a7e:	4628      	mov	r0, r5
   18a80:	4798      	blx	r3
	if (ret == -EAGAIN) {
   18a82:	f117 0f0b 	cmn.w	r7, #11
   18a86:	d01a      	beq.n	18abe <preempt+0x96>
		LL_ASSERT(ret == -ECANCELED);
   18a88:	3748      	adds	r7, #72	; 0x48
   18a8a:	d011      	beq.n	18ab0 <preempt+0x88>
   18a8c:	4a33      	ldr	r2, [pc, #204]	; (18b5c <preempt+0x134>)
   18a8e:	4934      	ldr	r1, [pc, #208]	; (18b60 <preempt+0x138>)
   18a90:	4834      	ldr	r0, [pc, #208]	; (18b64 <preempt+0x13c>)
   18a92:	f240 23ff 	movw	r3, #767	; 0x2ff
   18a96:	f006 fadd 	bl	1f054 <printk>
   18a9a:	4040      	eors	r0, r0
   18a9c:	f380 8811 	msr	BASEPRI, r0
   18aa0:	f04f 0003 	mov.w	r0, #3
   18aa4:	df02      	svc	2
   18aa6:	e003      	b.n	18ab0 <preempt+0x88>
	} while (next->is_aborted || next->is_resume);
   18aa8:	f890 3020 	ldrb.w	r3, [r0, #32]
   18aac:	079b      	lsls	r3, r3, #30
   18aae:	d041      	beq.n	18b34 <preempt+0x10c>
		next = ull_prepare_dequeue_iter(&idx);
   18ab0:	f10d 000e 	add.w	r0, sp, #14
   18ab4:	f7fa ffb6 	bl	13a24 <ull_prepare_dequeue_iter>
		if (!next) {
   18ab8:	2800      	cmp	r0, #0
   18aba:	d1f5      	bne.n	18aa8 <preempt+0x80>
   18abc:	e7d0      	b.n	18a60 <preempt+0x38>
		iter_idx = UINT8_MAX;
   18abe:	23ff      	movs	r3, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   18ac0:	f10d 000f 	add.w	r0, sp, #15
		iter_idx = UINT8_MAX;
   18ac4:	f88d 300f 	strb.w	r3, [sp, #15]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   18ac8:	f7fa ffac 	bl	13a24 <ull_prepare_dequeue_iter>
		while (iter) {
   18acc:	bb48      	cbnz	r0, 18b22 <preempt+0xfa>
	prepare_param.param = event.curr.param;
   18ace:	6832      	ldr	r2, [r6, #0]
		ret = resume_enqueue(resume_cb, resume_prio);
   18ad0:	9b05      	ldr	r3, [sp, #20]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   18ad2:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   18ad4:	9209      	str	r2, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   18ad6:	2301      	movs	r3, #1
	event.curr.param = NULL;
   18ad8:	2200      	movs	r2, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   18ada:	9301      	str	r3, [sp, #4]
	event.curr.param = NULL;
   18adc:	6032      	str	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   18ade:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   18ae2:	9b04      	ldr	r3, [sp, #16]
   18ae4:	aa06      	add	r2, sp, #24
   18ae6:	f7fa ff57 	bl	13998 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   18aea:	2800      	cmp	r0, #0
   18aec:	d0e0      	beq.n	18ab0 <preempt+0x88>
   18aee:	4a1b      	ldr	r2, [pc, #108]	; (18b5c <preempt+0x134>)
   18af0:	491d      	ldr	r1, [pc, #116]	; (18b68 <preempt+0x140>)
   18af2:	481c      	ldr	r0, [pc, #112]	; (18b64 <preempt+0x13c>)
   18af4:	f240 23fd 	movw	r3, #765	; 0x2fd
   18af8:	f006 faac 	bl	1f054 <printk>
   18afc:	4040      	eors	r0, r0
   18afe:	f380 8811 	msr	BASEPRI, r0
   18b02:	f04f 0003 	mov.w	r0, #3
   18b06:	df02      	svc	2
   18b08:	e7d2      	b.n	18ab0 <preempt+0x88>
				iter->is_aborted = 1;
   18b0a:	f043 0302 	orr.w	r3, r3, #2
   18b0e:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   18b12:	6983      	ldr	r3, [r0, #24]
   18b14:	4798      	blx	r3
			iter = ull_prepare_dequeue_iter(&iter_idx);
   18b16:	f10d 000f 	add.w	r0, sp, #15
   18b1a:	f7fa ff83 	bl	13a24 <ull_prepare_dequeue_iter>
		while (iter) {
   18b1e:	2800      	cmp	r0, #0
   18b20:	d0d5      	beq.n	18ace <preempt+0xa6>
			if (!iter->is_aborted &&
   18b22:	f890 3020 	ldrb.w	r3, [r0, #32]
   18b26:	079a      	lsls	r2, r3, #30
   18b28:	d4f5      	bmi.n	18b16 <preempt+0xee>
			    event.curr.param == iter->prepare_param.param) {
   18b2a:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   18b2c:	6831      	ldr	r1, [r6, #0]
   18b2e:	4291      	cmp	r1, r2
   18b30:	d1f1      	bne.n	18b16 <preempt+0xee>
   18b32:	e7ea      	b.n	18b0a <preempt+0xe2>
	preempt_ticker_start(&next->prepare_param);
   18b34:	68c1      	ldr	r1, [r0, #12]
   18b36:	6800      	ldr	r0, [r0, #0]
   18b38:	f7ff feb6 	bl	188a8 <preempt_ticker_start.isra.0>
}
   18b3c:	b00b      	add	sp, #44	; 0x2c
   18b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   18b40:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   18b44:	69a2      	ldr	r2, [r4, #24]
   18b46:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   18b48:	f043 0302 	orr.w	r3, r3, #2
   18b4c:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   18b50:	4620      	mov	r0, r4
   18b52:	4790      	blx	r2
		goto preempt_next;
   18b54:	e7ac      	b.n	18ab0 <preempt+0x88>
   18b56:	bf00      	nop
   18b58:	20003a5c 	.word	0x20003a5c
   18b5c:	00025fb4 	.word	0x00025fb4
   18b60:	00026044 	.word	0x00026044
   18b64:	0002561c 	.word	0x0002561c
   18b68:	000258a4 	.word	0x000258a4

00018b6c <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   18b6c:	2200      	movs	r2, #0
{
   18b6e:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   18b70:	4611      	mov	r1, r2
   18b72:	4b0a      	ldr	r3, [pc, #40]	; (18b9c <preempt_ticker_cb+0x30>)
   18b74:	2001      	movs	r0, #1
   18b76:	f7f6 ff45 	bl	fa04 <mayfly_enqueue>
	LL_ASSERT(!ret);
   18b7a:	b900      	cbnz	r0, 18b7e <preempt_ticker_cb+0x12>
}
   18b7c:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   18b7e:	4a08      	ldr	r2, [pc, #32]	; (18ba0 <preempt_ticker_cb+0x34>)
   18b80:	4908      	ldr	r1, [pc, #32]	; (18ba4 <preempt_ticker_cb+0x38>)
   18b82:	4809      	ldr	r0, [pc, #36]	; (18ba8 <preempt_ticker_cb+0x3c>)
   18b84:	f240 23c1 	movw	r3, #705	; 0x2c1
   18b88:	f006 fa64 	bl	1f054 <printk>
   18b8c:	4040      	eors	r0, r0
   18b8e:	f380 8811 	msr	BASEPRI, r0
   18b92:	f04f 0003 	mov.w	r0, #3
   18b96:	df02      	svc	2
}
   18b98:	bd08      	pop	{r3, pc}
   18b9a:	bf00      	nop
   18b9c:	200005bc 	.word	0x200005bc
   18ba0:	00025fb4 	.word	0x00025fb4
   18ba4:	000258a4 	.word	0x000258a4
   18ba8:	0002561c 	.word	0x0002561c

00018bac <lll_init>:
{
   18bac:	b510      	push	{r4, lr}
   18bae:	4815      	ldr	r0, [pc, #84]	; (18c04 <lll_init+0x58>)
   18bb0:	f004 fec4 	bl	1d93c <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   18bb4:	4b14      	ldr	r3, [pc, #80]	; (18c08 <lll_init+0x5c>)
   18bb6:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   18bb8:	b300      	cbz	r0, 18bfc <lll_init+0x50>
	event.curr.abort_cb = NULL;
   18bba:	4b14      	ldr	r3, [pc, #80]	; (18c0c <lll_init+0x60>)
   18bbc:	2400      	movs	r4, #0
   18bbe:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   18bc0:	f000 fa22 	bl	19008 <lll_clock_init>
	if (err < 0) {
   18bc4:	2800      	cmp	r0, #0
   18bc6:	db18      	blt.n	18bfa <lll_init+0x4e>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   18bc8:	4622      	mov	r2, r4
   18bca:	4621      	mov	r1, r4
   18bcc:	2001      	movs	r0, #1
   18bce:	f7ee fdef 	bl	77b0 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   18bd2:	4622      	mov	r2, r4
   18bd4:	4621      	mov	r1, r4
   18bd6:	200b      	movs	r0, #11
   18bd8:	f7ee fdea 	bl	77b0 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   18bdc:	4622      	mov	r2, r4
   18bde:	4621      	mov	r1, r4
   18be0:	2018      	movs	r0, #24
   18be2:	f7ee fde5 	bl	77b0 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   18be6:	2001      	movs	r0, #1
   18be8:	f7ee fdb0 	bl	774c <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   18bec:	200b      	movs	r0, #11
   18bee:	f7ee fdad 	bl	774c <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   18bf2:	2018      	movs	r0, #24
   18bf4:	f7ee fdaa 	bl	774c <arch_irq_enable>
	return 0;
   18bf8:	4620      	mov	r0, r4
}
   18bfa:	bd10      	pop	{r4, pc}
		return -ENODEV;
   18bfc:	f06f 0012 	mvn.w	r0, #18
}
   18c00:	bd10      	pop	{r4, pc}
   18c02:	bf00      	nop
   18c04:	00026050 	.word	0x00026050
   18c08:	20003a58 	.word	0x20003a58
   18c0c:	20003a5c 	.word	0x20003a5c

00018c10 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   18c10:	4a04      	ldr	r2, [pc, #16]	; (18c24 <lll_csrand_get+0x14>)
{
   18c12:	b410      	push	{r4}
   18c14:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   18c16:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   18c18:	6884      	ldr	r4, [r0, #8]
   18c1a:	b28a      	uxth	r2, r1
   18c1c:	4619      	mov	r1, r3
   18c1e:	6823      	ldr	r3, [r4, #0]
}
   18c20:	bc10      	pop	{r4}
   18c22:	4718      	bx	r3
   18c24:	20003a58 	.word	0x20003a58

00018c28 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   18c28:	4b08      	ldr	r3, [pc, #32]	; (18c4c <lll_csrand_isr_get+0x24>)
   18c2a:	681b      	ldr	r3, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   18c2c:	689a      	ldr	r2, [r3, #8]
{
   18c2e:	b410      	push	{r4}
   18c30:	6854      	ldr	r4, [r2, #4]
   18c32:	b134      	cbz	r4, 18c42 <lll_csrand_isr_get+0x1a>
   18c34:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   18c36:	46a4      	mov	ip, r4
   18c38:	4601      	mov	r1, r0
}
   18c3a:	bc10      	pop	{r4}
   18c3c:	4618      	mov	r0, r3
   18c3e:	2300      	movs	r3, #0
   18c40:	4760      	bx	ip
   18c42:	f06f 0022 	mvn.w	r0, #34	; 0x22
   18c46:	bc10      	pop	{r4}
   18c48:	4770      	bx	lr
   18c4a:	bf00      	nop
   18c4c:	20003a58 	.word	0x20003a58

00018c50 <lll_rand_isr_get>:
   18c50:	f7ff bfea 	b.w	18c28 <lll_csrand_isr_get>

00018c54 <lll_reset>:
}
   18c54:	2000      	movs	r0, #0
   18c56:	4770      	bx	lr

00018c58 <lll_prepare>:
{
   18c58:	b510      	push	{r4, lr}
   18c5a:	b082      	sub	sp, #8
   18c5c:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   18c5e:	9400      	str	r4, [sp, #0]
   18c60:	2400      	movs	r4, #0
   18c62:	9401      	str	r4, [sp, #4]
   18c64:	f7ff fe5a 	bl	1891c <prepare>
}
   18c68:	b002      	add	sp, #8
   18c6a:	bd10      	pop	{r4, pc}

00018c6c <lll_resume>:
{
   18c6c:	b510      	push	{r4, lr}
   18c6e:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   18c70:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume);
   18c72:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   18c76:	69c3      	ldr	r3, [r0, #28]
   18c78:	6902      	ldr	r2, [r0, #16]
   18c7a:	f004 0401 	and.w	r4, r4, #1
   18c7e:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   18c82:	9401      	str	r4, [sp, #4]
   18c84:	f7ff fe4a 	bl	1891c <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   18c88:	b108      	cbz	r0, 18c8e <lll_resume+0x22>
   18c8a:	3044      	adds	r0, #68	; 0x44
   18c8c:	d101      	bne.n	18c92 <lll_resume+0x26>
}
   18c8e:	b002      	add	sp, #8
   18c90:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   18c92:	4a07      	ldr	r2, [pc, #28]	; (18cb0 <lll_resume+0x44>)
   18c94:	4907      	ldr	r1, [pc, #28]	; (18cb4 <lll_resume+0x48>)
   18c96:	4808      	ldr	r0, [pc, #32]	; (18cb8 <lll_resume+0x4c>)
   18c98:	23e5      	movs	r3, #229	; 0xe5
   18c9a:	f006 f9db 	bl	1f054 <printk>
   18c9e:	4040      	eors	r0, r0
   18ca0:	f380 8811 	msr	BASEPRI, r0
   18ca4:	f04f 0003 	mov.w	r0, #3
   18ca8:	df02      	svc	2
}
   18caa:	b002      	add	sp, #8
   18cac:	bd10      	pop	{r4, pc}
   18cae:	bf00      	nop
   18cb0:	00025fb4 	.word	0x00025fb4
   18cb4:	00026054 	.word	0x00026054
   18cb8:	0002561c 	.word	0x0002561c

00018cbc <lll_disable>:
{
   18cbc:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   18cbe:	4604      	mov	r4, r0
{
   18cc0:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   18cc2:	2800      	cmp	r0, #0
   18cc4:	d035      	beq.n	18d32 <lll_disable+0x76>
   18cc6:	4b26      	ldr	r3, [pc, #152]	; (18d60 <lll_disable+0xa4>)
   18cc8:	681a      	ldr	r2, [r3, #0]
   18cca:	4282      	cmp	r2, r0
   18ccc:	d02b      	beq.n	18d26 <lll_disable+0x6a>
		idx = UINT8_MAX;
   18cce:	23ff      	movs	r3, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   18cd0:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   18cd4:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   18cd8:	f7fa fea4 	bl	13a24 <ull_prepare_dequeue_iter>
		while (next) {
   18cdc:	4603      	mov	r3, r0
   18cde:	b940      	cbnz	r0, 18cf2 <lll_disable+0x36>
   18ce0:	e01f      	b.n	18d22 <lll_disable+0x66>
			    (!param || (param == next->prepare_param.param))) {
   18ce2:	4294      	cmp	r4, r2
   18ce4:	d00e      	beq.n	18d04 <lll_disable+0x48>
			next = ull_prepare_dequeue_iter(&idx);
   18ce6:	f10d 0007 	add.w	r0, sp, #7
   18cea:	f7fa fe9b 	bl	13a24 <ull_prepare_dequeue_iter>
		while (next) {
   18cee:	4603      	mov	r3, r0
   18cf0:	b1b8      	cbz	r0, 18d22 <lll_disable+0x66>
			if (!next->is_aborted &&
   18cf2:	f893 2020 	ldrb.w	r2, [r3, #32]
   18cf6:	0792      	lsls	r2, r2, #30
   18cf8:	d4f5      	bmi.n	18ce6 <lll_disable+0x2a>
				next->is_aborted = 1;
   18cfa:	68da      	ldr	r2, [r3, #12]
				next->abort_cb(&next->prepare_param,
   18cfc:	4618      	mov	r0, r3
   18cfe:	4611      	mov	r1, r2
			if (!next->is_aborted &&
   18d00:	2c00      	cmp	r4, #0
   18d02:	d1ee      	bne.n	18ce2 <lll_disable+0x26>
				next->is_aborted = 1;
   18d04:	f893 2020 	ldrb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   18d08:	699d      	ldr	r5, [r3, #24]
				next->is_aborted = 1;
   18d0a:	f042 0202 	orr.w	r2, r2, #2
   18d0e:	f883 2020 	strb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   18d12:	47a8      	blx	r5
			next = ull_prepare_dequeue_iter(&idx);
   18d14:	f10d 0007 	add.w	r0, sp, #7
   18d18:	f7fa fe84 	bl	13a24 <ull_prepare_dequeue_iter>
		while (next) {
   18d1c:	4603      	mov	r3, r0
   18d1e:	2800      	cmp	r0, #0
   18d20:	d1e7      	bne.n	18cf2 <lll_disable+0x36>
}
   18d22:	b003      	add	sp, #12
   18d24:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   18d26:	689b      	ldr	r3, [r3, #8]
   18d28:	b16b      	cbz	r3, 18d46 <lll_disable+0x8a>
   18d2a:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   18d2c:	2000      	movs	r0, #0
   18d2e:	4798      	blx	r3
   18d30:	e7cd      	b.n	18cce <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   18d32:	4a0b      	ldr	r2, [pc, #44]	; (18d60 <lll_disable+0xa4>)
   18d34:	6893      	ldr	r3, [r2, #8]
   18d36:	2b00      	cmp	r3, #0
   18d38:	d0c9      	beq.n	18cce <lll_disable+0x12>
   18d3a:	6811      	ldr	r1, [r2, #0]
   18d3c:	2900      	cmp	r1, #0
   18d3e:	d0c6      	beq.n	18cce <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   18d40:	2000      	movs	r0, #0
   18d42:	4798      	blx	r3
   18d44:	e7c3      	b.n	18cce <lll_disable+0x12>
			LL_ASSERT(!param);
   18d46:	4a07      	ldr	r2, [pc, #28]	; (18d64 <lll_disable+0xa8>)
   18d48:	4907      	ldr	r1, [pc, #28]	; (18d68 <lll_disable+0xac>)
   18d4a:	4808      	ldr	r0, [pc, #32]	; (18d6c <lll_disable+0xb0>)
   18d4c:	23ef      	movs	r3, #239	; 0xef
   18d4e:	f006 f981 	bl	1f054 <printk>
   18d52:	4040      	eors	r0, r0
   18d54:	f380 8811 	msr	BASEPRI, r0
   18d58:	f04f 0003 	mov.w	r0, #3
   18d5c:	df02      	svc	2
   18d5e:	e7b6      	b.n	18cce <lll_disable+0x12>
   18d60:	20003a5c 	.word	0x20003a5c
   18d64:	00025fb4 	.word	0x00025fb4
   18d68:	00026068 	.word	0x00026068
   18d6c:	0002561c 	.word	0x0002561c

00018d70 <lll_prepare_done>:
}
   18d70:	2000      	movs	r0, #0
   18d72:	4770      	bx	lr

00018d74 <lll_done>:
{
   18d74:	b510      	push	{r4, lr}
   18d76:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   18d78:	f7fa fe46 	bl	13a08 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   18d7c:	b13c      	cbz	r4, 18d8e <lll_done+0x1a>
   18d7e:	b320      	cbz	r0, 18dca <lll_done+0x56>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   18d80:	6820      	ldr	r0, [r4, #0]
   18d82:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   18d84:	f7fa fe7c 	bl	13a80 <ull_event_done>
	LL_ASSERT(evdone);
   18d88:	b180      	cbz	r0, 18dac <lll_done+0x38>
}
   18d8a:	2000      	movs	r0, #0
   18d8c:	bd10      	pop	{r4, pc}
		LL_ASSERT(event.curr.abort_cb);
   18d8e:	4c1d      	ldr	r4, [pc, #116]	; (18e04 <lll_done+0x90>)
   18d90:	68a3      	ldr	r3, [r4, #8]
   18d92:	b343      	cbz	r3, 18de6 <lll_done+0x72>
		param = event.curr.param;
   18d94:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   18d96:	2300      	movs	r3, #0
   18d98:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   18d9a:	6023      	str	r3, [r4, #0]
		if (param) {
   18d9c:	2800      	cmp	r0, #0
   18d9e:	d0f1      	beq.n	18d84 <lll_done+0x10>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   18da0:	6800      	ldr	r0, [r0, #0]
   18da2:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   18da4:	f7fa fe6c 	bl	13a80 <ull_event_done>
	LL_ASSERT(evdone);
   18da8:	2800      	cmp	r0, #0
   18daa:	d1ee      	bne.n	18d8a <lll_done+0x16>
   18dac:	4a16      	ldr	r2, [pc, #88]	; (18e08 <lll_done+0x94>)
   18dae:	4917      	ldr	r1, [pc, #92]	; (18e0c <lll_done+0x98>)
   18db0:	4817      	ldr	r0, [pc, #92]	; (18e10 <lll_done+0x9c>)
   18db2:	f44f 73a0 	mov.w	r3, #320	; 0x140
   18db6:	f006 f94d 	bl	1f054 <printk>
   18dba:	4040      	eors	r0, r0
   18dbc:	f380 8811 	msr	BASEPRI, r0
   18dc0:	f04f 0003 	mov.w	r0, #3
   18dc4:	df02      	svc	2
}
   18dc6:	2000      	movs	r0, #0
   18dc8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
   18dca:	4a0f      	ldr	r2, [pc, #60]	; (18e08 <lll_done+0x94>)
   18dcc:	4911      	ldr	r1, [pc, #68]	; (18e14 <lll_done+0xa0>)
   18dce:	4810      	ldr	r0, [pc, #64]	; (18e10 <lll_done+0x9c>)
   18dd0:	f44f 7391 	mov.w	r3, #290	; 0x122
   18dd4:	f006 f93e 	bl	1f054 <printk>
   18dd8:	4040      	eors	r0, r0
   18dda:	f380 8811 	msr	BASEPRI, r0
   18dde:	f04f 0003 	mov.w	r0, #3
   18de2:	df02      	svc	2
   18de4:	e7cc      	b.n	18d80 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   18de6:	4a08      	ldr	r2, [pc, #32]	; (18e08 <lll_done+0x94>)
   18de8:	490b      	ldr	r1, [pc, #44]	; (18e18 <lll_done+0xa4>)
   18dea:	4809      	ldr	r0, [pc, #36]	; (18e10 <lll_done+0x9c>)
   18dec:	f44f 7394 	mov.w	r3, #296	; 0x128
   18df0:	f006 f930 	bl	1f054 <printk>
   18df4:	4040      	eors	r0, r0
   18df6:	f380 8811 	msr	BASEPRI, r0
   18dfa:	f04f 0003 	mov.w	r0, #3
   18dfe:	df02      	svc	2
   18e00:	e7c8      	b.n	18d94 <lll_done+0x20>
   18e02:	bf00      	nop
   18e04:	20003a5c 	.word	0x20003a5c
   18e08:	00025fb4 	.word	0x00025fb4
   18e0c:	00026094 	.word	0x00026094
   18e10:	0002561c 	.word	0x0002561c
   18e14:	00026070 	.word	0x00026070
   18e18:	00026080 	.word	0x00026080

00018e1c <lll_is_abort_cb>:
}
   18e1c:	f06f 0047 	mvn.w	r0, #71	; 0x47
   18e20:	4770      	bx	lr
   18e22:	bf00      	nop

00018e24 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   18e24:	e9d0 2300 	ldrd	r2, r3, [r0]
   18e28:	2a00      	cmp	r2, #0
   18e2a:	db04      	blt.n	18e36 <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   18e2c:	429a      	cmp	r2, r3
   18e2e:	bf38      	it	cc
   18e30:	461a      	movcc	r2, r3
   18e32:	4610      	mov	r0, r2
}
   18e34:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   18e36:	6880      	ldr	r0, [r0, #8]
   18e38:	4298      	cmp	r0, r3
   18e3a:	bf38      	it	cc
   18e3c:	4618      	movcc	r0, r3
   18e3e:	4770      	bx	lr

00018e40 <lll_preempt_calc>:
{
   18e40:	b510      	push	{r4, lr}
   18e42:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   18e44:	f7f8 f8dc 	bl	11000 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   18e48:	4621      	mov	r1, r4
   18e4a:	f7f8 f8db 	bl	11004 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   18e4e:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   18e50:	0203      	lsls	r3, r0, #8
   18e52:	d404      	bmi.n	18e5e <lll_preempt_calc+0x1e>
   18e54:	2809      	cmp	r0, #9
   18e56:	bf94      	ite	ls
   18e58:	2000      	movls	r0, #0
   18e5a:	2001      	movhi	r0, #1
}
   18e5c:	bd10      	pop	{r4, pc}
	return 0;
   18e5e:	2000      	movs	r0, #0
}
   18e60:	bd10      	pop	{r4, pc}
   18e62:	bf00      	nop

00018e64 <lll_chan_set>:
	switch (chan) {
   18e64:	2826      	cmp	r0, #38	; 0x26
{
   18e66:	b510      	push	{r4, lr}
   18e68:	4604      	mov	r4, r0
	switch (chan) {
   18e6a:	d01c      	beq.n	18ea6 <lll_chan_set+0x42>
   18e6c:	2827      	cmp	r0, #39	; 0x27
   18e6e:	d012      	beq.n	18e96 <lll_chan_set+0x32>
   18e70:	2825      	cmp	r0, #37	; 0x25
   18e72:	d008      	beq.n	18e86 <lll_chan_set+0x22>
		if (chan < 11) {
   18e74:	280a      	cmp	r0, #10
   18e76:	d91e      	bls.n	18eb6 <lll_chan_set+0x52>
		} else if (chan < 40) {
   18e78:	2827      	cmp	r0, #39	; 0x27
   18e7a:	d821      	bhi.n	18ec0 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   18e7c:	3003      	adds	r0, #3
   18e7e:	0040      	lsls	r0, r0, #1
   18e80:	f001 fd5a 	bl	1a938 <radio_freq_chan_set>
   18e84:	e002      	b.n	18e8c <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   18e86:	2002      	movs	r0, #2
   18e88:	f001 fd56 	bl	1a938 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   18e8c:	4620      	mov	r0, r4
}
   18e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   18e92:	f001 bd57 	b.w	1a944 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   18e96:	2050      	movs	r0, #80	; 0x50
   18e98:	f001 fd4e 	bl	1a938 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   18e9c:	4620      	mov	r0, r4
}
   18e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   18ea2:	f001 bd4f 	b.w	1a944 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   18ea6:	201a      	movs	r0, #26
   18ea8:	f001 fd46 	bl	1a938 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   18eac:	4620      	mov	r0, r4
}
   18eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   18eb2:	f001 bd47 	b.w	1a944 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   18eb6:	3002      	adds	r0, #2
   18eb8:	0040      	lsls	r0, r0, #1
   18eba:	f001 fd3d 	bl	1a938 <radio_freq_chan_set>
   18ebe:	e7e5      	b.n	18e8c <lll_chan_set+0x28>
			LL_ASSERT(0);
   18ec0:	4a06      	ldr	r2, [pc, #24]	; (18edc <lll_chan_set+0x78>)
   18ec2:	4907      	ldr	r1, [pc, #28]	; (18ee0 <lll_chan_set+0x7c>)
   18ec4:	4807      	ldr	r0, [pc, #28]	; (18ee4 <lll_chan_set+0x80>)
   18ec6:	f240 13a3 	movw	r3, #419	; 0x1a3
   18eca:	f006 f8c3 	bl	1f054 <printk>
   18ece:	4040      	eors	r0, r0
   18ed0:	f380 8811 	msr	BASEPRI, r0
   18ed4:	f04f 0003 	mov.w	r0, #3
   18ed8:	df02      	svc	2
   18eda:	e7d7      	b.n	18e8c <lll_chan_set+0x28>
   18edc:	00025fb4 	.word	0x00025fb4
   18ee0:	0002568c 	.word	0x0002568c
   18ee4:	0002561c 	.word	0x0002561c

00018ee8 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   18ee8:	f001 bd9c 	b.w	1aa24 <radio_rx_ready_delay_get>

00018eec <lll_isr_tx_status_reset>:
{
   18eec:	b508      	push	{r3, lr}
	radio_status_reset();
   18eee:	f001 fdc7 	bl	1aa80 <radio_status_reset>
}
   18ef2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   18ef6:	f001 be83 	b.w	1ac00 <radio_tmr_status_reset>
   18efa:	bf00      	nop

00018efc <lll_isr_rx_status_reset>:
{
   18efc:	b508      	push	{r3, lr}
	radio_status_reset();
   18efe:	f001 fdbf 	bl	1aa80 <radio_status_reset>
	radio_tmr_status_reset();
   18f02:	f001 fe7d 	bl	1ac00 <radio_tmr_status_reset>
}
   18f06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   18f0a:	f001 be29 	b.w	1ab60 <radio_rssi_status_reset>
   18f0e:	bf00      	nop

00018f10 <lll_isr_status_reset>:
{
   18f10:	b508      	push	{r3, lr}
	radio_status_reset();
   18f12:	f001 fdb5 	bl	1aa80 <radio_status_reset>
	radio_tmr_status_reset();
   18f16:	f001 fe73 	bl	1ac00 <radio_tmr_status_reset>
	radio_filter_status_reset();
   18f1a:	f001 fe59 	bl	1abd0 <radio_filter_status_reset>
	radio_ar_status_reset();
   18f1e:	f002 f84d 	bl	1afbc <radio_ar_status_reset>
}
   18f22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   18f26:	f001 be1b 	b.w	1ab60 <radio_rssi_status_reset>
   18f2a:	bf00      	nop

00018f2c <lll_isr_cleanup>:
{
   18f2c:	b508      	push	{r3, lr}
   18f2e:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   18f30:	4815      	ldr	r0, [pc, #84]	; (18f88 <lll_isr_cleanup+0x5c>)
   18f32:	f001 fc89 	bl	1a848 <radio_isr_set>
	if (!radio_is_idle()) {
   18f36:	f001 fdc3 	bl	1aac0 <radio_is_idle>
   18f3a:	b150      	cbz	r0, 18f52 <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   18f3c:	f001 feee 	bl	1ad1c <radio_tmr_stop>
	err = lll_hfclock_off();
   18f40:	f000 f894 	bl	1906c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   18f44:	2800      	cmp	r0, #0
   18f46:	db0c      	blt.n	18f62 <lll_isr_cleanup+0x36>
}
   18f48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   18f4c:	2000      	movs	r0, #0
   18f4e:	f7ff bf11 	b.w	18d74 <lll_done>
		radio_disable();
   18f52:	f001 fd7d 	bl	1aa50 <radio_disable>
	radio_tmr_stop();
   18f56:	f001 fee1 	bl	1ad1c <radio_tmr_stop>
	err = lll_hfclock_off();
   18f5a:	f000 f887 	bl	1906c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   18f5e:	2800      	cmp	r0, #0
   18f60:	daf2      	bge.n	18f48 <lll_isr_cleanup+0x1c>
   18f62:	4a0a      	ldr	r2, [pc, #40]	; (18f8c <lll_isr_cleanup+0x60>)
   18f64:	490a      	ldr	r1, [pc, #40]	; (18f90 <lll_isr_cleanup+0x64>)
   18f66:	480b      	ldr	r0, [pc, #44]	; (18f94 <lll_isr_cleanup+0x68>)
   18f68:	f240 2306 	movw	r3, #518	; 0x206
   18f6c:	f006 f872 	bl	1f054 <printk>
   18f70:	4040      	eors	r0, r0
   18f72:	f380 8811 	msr	BASEPRI, r0
   18f76:	f04f 0003 	mov.w	r0, #3
   18f7a:	df02      	svc	2
	lll_done(NULL);
   18f7c:	2000      	movs	r0, #0
}
   18f7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   18f82:	f7ff bef7 	b.w	18d74 <lll_done>
   18f86:	bf00      	nop
   18f88:	00018845 	.word	0x00018845
   18f8c:	00025fb4 	.word	0x00025fb4
   18f90:	0002609c 	.word	0x0002609c
   18f94:	0002561c 	.word	0x0002561c

00018f98 <lll_isr_abort>:
{
   18f98:	b510      	push	{r4, lr}
   18f9a:	4604      	mov	r4, r0
	lll_isr_status_reset();
   18f9c:	f7ff ffb8 	bl	18f10 <lll_isr_status_reset>
	lll_isr_cleanup(param);
   18fa0:	4620      	mov	r0, r4
}
   18fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   18fa6:	f7ff bfc1 	b.w	18f2c <lll_isr_cleanup>
   18faa:	bf00      	nop

00018fac <clock_ready>:
	z_impl_k_sem_give(sem);
   18fac:	f101 0010 	add.w	r0, r1, #16
   18fb0:	f005 bb6a 	b.w	1e688 <z_impl_k_sem_give>

00018fb4 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   18fb4:	b530      	push	{r4, r5, lr}
   18fb6:	4604      	mov	r4, r0
   18fb8:	b08b      	sub	sp, #44	; 0x2c
   18fba:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   18fbc:	2201      	movs	r2, #1
   18fbe:	2100      	movs	r1, #0
   18fc0:	a804      	add	r0, sp, #16
   18fc2:	f00b fa49 	bl	24458 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   18fc6:	2300      	movs	r3, #0
   18fc8:	4a0e      	ldr	r2, [pc, #56]	; (19004 <blocking_on+0x50>)
   18fca:	9303      	str	r3, [sp, #12]
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   18fcc:	4620      	mov	r0, r4
   18fce:	2303      	movs	r3, #3
   18fd0:	4669      	mov	r1, sp
   18fd2:	9201      	str	r2, [sp, #4]
   18fd4:	9302      	str	r3, [sp, #8]
   18fd6:	f006 f8b9 	bl	1f14c <onoff_request>
	if (err < 0) {
   18fda:	2800      	cmp	r0, #0
   18fdc:	db10      	blt.n	19000 <blocking_on+0x4c>
   18fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   18fe2:	f240 30e7 	movw	r0, #999	; 0x3e7
   18fe6:	2100      	movs	r1, #0
   18fe8:	fbe3 0105 	umlal	r0, r1, r3, r5
   18fec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18ff0:	2300      	movs	r3, #0
   18ff2:	f7e7 f885 	bl	100 <__aeabi_uldivmod>
   18ff6:	4602      	mov	r2, r0
   18ff8:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   18ffa:	a804      	add	r0, sp, #16
   18ffc:	f005 fb6a 	bl	1e6d4 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   19000:	b00b      	add	sp, #44	; 0x2c
   19002:	bd30      	pop	{r4, r5, pc}
   19004:	00018fad 	.word	0x00018fad

00019008 <lll_clock_init>:

int lll_clock_init(void)
{
   19008:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1900a:	2001      	movs	r0, #1
   1900c:	f7ed f82e 	bl	606c <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   19010:	4904      	ldr	r1, [pc, #16]	; (19024 <lll_clock_init+0x1c>)
   19012:	2401      	movs	r4, #1
   19014:	2300      	movs	r3, #0
   19016:	608c      	str	r4, [r1, #8]
   19018:	60cb      	str	r3, [r1, #12]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1901a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1901e:	604b      	str	r3, [r1, #4]
	return onoff_request(mgr, &lf_cli);
   19020:	f006 b894 	b.w	1f14c <onoff_request>
   19024:	20003a74 	.word	0x20003a74

00019028 <lll_clock_wait>:

int lll_clock_wait(void)
{
   19028:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1902a:	2001      	movs	r0, #1
   1902c:	f7ed f81e 	bl	606c <z_nrf_clock_control_get_onoff>

	return blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
}
   19030:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   19034:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   19038:	f7ff bfbc 	b.w	18fb4 <blocking_on>

0001903c <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1903c:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1903e:	4b0a      	ldr	r3, [pc, #40]	; (19068 <lll_hfclock_on+0x2c>)
   19040:	f3bf 8f5b 	dmb	ish
   19044:	e853 2f00 	ldrex	r2, [r3]
   19048:	1c51      	adds	r1, r2, #1
   1904a:	e843 1000 	strex	r0, r1, [r3]
   1904e:	2800      	cmp	r0, #0
   19050:	d1f8      	bne.n	19044 <lll_hfclock_on+0x8>
   19052:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   19056:	2a00      	cmp	r2, #0
   19058:	dd01      	ble.n	1905e <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1905a:	2000      	movs	r0, #0
   1905c:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1905e:	f7ed f80d 	bl	607c <z_nrf_clock_bt_ctlr_hf_request>
}
   19062:	2000      	movs	r0, #0
   19064:	bd08      	pop	{r3, pc}
   19066:	bf00      	nop
   19068:	20003a70 	.word	0x20003a70

0001906c <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1906c:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1906e:	4b0d      	ldr	r3, [pc, #52]	; (190a4 <lll_hfclock_off+0x38>)
   19070:	681a      	ldr	r2, [r3, #0]
   19072:	2a00      	cmp	r2, #0
   19074:	dd12      	ble.n	1909c <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   19076:	f3bf 8f5b 	dmb	ish
   1907a:	e853 2f00 	ldrex	r2, [r3]
   1907e:	1e51      	subs	r1, r2, #1
   19080:	e843 1000 	strex	r0, r1, [r3]
   19084:	2800      	cmp	r0, #0
   19086:	d1f8      	bne.n	1907a <lll_hfclock_off+0xe>
   19088:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1908c:	2a01      	cmp	r2, #1
   1908e:	dd01      	ble.n	19094 <lll_hfclock_off+0x28>
		return 0;
   19090:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   19092:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   19094:	f7ed f808 	bl	60a8 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   19098:	2000      	movs	r0, #0
}
   1909a:	bd08      	pop	{r3, pc}
		return -EALREADY;
   1909c:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   190a0:	bd08      	pop	{r3, pc}
   190a2:	bf00      	nop
   190a4:	20003a70 	.word	0x20003a70

000190a8 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   190a8:	2014      	movs	r0, #20
   190aa:	4770      	bx	lr

000190ac <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   190ac:	4b01      	ldr	r3, [pc, #4]	; (190b4 <lll_clock_ppm_get+0x8>)
}
   190ae:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   190b2:	4770      	bx	lr
   190b4:	000260c8 	.word	0x000260c8

000190b8 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   190b8:	b510      	push	{r4, lr}
   190ba:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   190bc:	f7ff ff28 	bl	18f10 <lll_isr_status_reset>

	radio_filter_disable();
   190c0:	f001 fd7c 	bl	1abbc <radio_filter_disable>

	lll_isr_cleanup(param);
   190c4:	4620      	mov	r0, r4
}
   190c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   190ca:	f7ff bf2f 	b.w	18f2c <lll_isr_cleanup>
   190ce:	bf00      	nop

000190d0 <isr_tx>:
{
   190d0:	b530      	push	{r4, r5, lr}
   190d2:	b083      	sub	sp, #12
   190d4:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   190d6:	f7ff ff09 	bl	18eec <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   190da:	2096      	movs	r0, #150	; 0x96
   190dc:	f001 fda0 	bl	1ac20 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   190e0:	2300      	movs	r3, #0
   190e2:	461a      	mov	r2, r3
   190e4:	4619      	mov	r1, r3
   190e6:	4618      	mov	r0, r3
   190e8:	f001 fd20 	bl	1ab2c <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   190ec:	f001 fd0c 	bl	1ab08 <radio_pkt_scratch_get>
   190f0:	f001 fc8a 	bl	1aa08 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   190f4:	f001 fcd0 	bl	1aa98 <radio_is_ready>
   190f8:	b9d8      	cbnz	r0, 19132 <isr_tx+0x62>
	radio_isr_set(isr_rx, param);
   190fa:	481e      	ldr	r0, [pc, #120]	; (19174 <isr_tx+0xa4>)
   190fc:	4621      	mov	r1, r4
   190fe:	f001 fba3 	bl	1a848 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   19102:	f7ff fb6d 	bl	187e0 <ull_filter_lll_rl_enabled>
   19106:	bb48      	cbnz	r0, 1915c <isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   19108:	f001 fe64 	bl	1add4 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1910c:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1910e:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   19110:	4608      	mov	r0, r1
   19112:	f001 fc89 	bl	1aa28 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   19116:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   19118:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1911a:	4608      	mov	r0, r1
   1911c:	f001 fc80 	bl	1aa20 <radio_tx_chain_delay_get>
   19120:	442c      	add	r4, r5
   19122:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   19124:	1a20      	subs	r0, r4, r0
   19126:	f001 fe0d 	bl	1ad44 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
   1912a:	f001 fe45 	bl	1adb8 <radio_tmr_end_capture>
}
   1912e:	b003      	add	sp, #12
   19130:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!radio_is_ready());
   19132:	4a11      	ldr	r2, [pc, #68]	; (19178 <isr_tx+0xa8>)
   19134:	4911      	ldr	r1, [pc, #68]	; (1917c <isr_tx+0xac>)
   19136:	4812      	ldr	r0, [pc, #72]	; (19180 <isr_tx+0xb0>)
   19138:	f240 235d 	movw	r3, #605	; 0x25d
   1913c:	f005 ff8a 	bl	1f054 <printk>
   19140:	4040      	eors	r0, r0
   19142:	f380 8811 	msr	BASEPRI, r0
   19146:	f04f 0003 	mov.w	r0, #3
   1914a:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   1914c:	4809      	ldr	r0, [pc, #36]	; (19174 <isr_tx+0xa4>)
   1914e:	4621      	mov	r1, r4
   19150:	f001 fb7a 	bl	1a848 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   19154:	f7ff fb44 	bl	187e0 <ull_filter_lll_rl_enabled>
   19158:	2800      	cmp	r0, #0
   1915a:	d0d5      	beq.n	19108 <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1915c:	f10d 0007 	add.w	r0, sp, #7
   19160:	f7ff fa68 	bl	18634 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   19164:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   19166:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   19168:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1916c:	f001 fee6 	bl	1af3c <radio_ar_configure>
   19170:	e7ca      	b.n	19108 <isr_tx+0x38>
   19172:	bf00      	nop
   19174:	000197dd 	.word	0x000197dd
   19178:	000260d8 	.word	0x000260d8
   1917c:	00026124 	.word	0x00026124
   19180:	0002561c 	.word	0x0002561c

00019184 <is_abort_cb>:
	if (next != curr) {
   19184:	4282      	cmp	r2, r0
{
   19186:	b508      	push	{r3, lr}
	if (next != curr) {
   19188:	d011      	beq.n	191ae <is_abort_cb+0x2a>
		} else if (lll->is_hdcd) {
   1918a:	7b12      	ldrb	r2, [r2, #12]
   1918c:	07d2      	lsls	r2, r2, #31
   1918e:	d402      	bmi.n	19196 <is_abort_cb+0x12>
			return -ECANCELED;
   19190:	f06f 0047 	mvn.w	r0, #71	; 0x47
}
   19194:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   19196:	4a14      	ldr	r2, [pc, #80]	; (191e8 <is_abort_cb+0x64>)
   19198:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1919a:	9a02      	ldr	r2, [sp, #8]
   1919c:	2300      	movs	r3, #0
   1919e:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   191a0:	f7ff ff4c 	bl	1903c <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   191a4:	2800      	cmp	r0, #0
   191a6:	db0f      	blt.n	191c8 <is_abort_cb+0x44>
   191a8:	f06f 000a 	mvn.w	r0, #10
}
   191ac:	bd08      	pop	{r3, pc}
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   191ae:	7c13      	ldrb	r3, [r2, #16]
   191b0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   191b4:	6953      	ldr	r3, [r2, #20]
   191b6:	781b      	ldrb	r3, [r3, #0]
   191b8:	f003 030f 	and.w	r3, r3, #15
   191bc:	2b01      	cmp	r3, #1
		return 0;
   191be:	bf14      	ite	ne
   191c0:	f06f 0047 	mvnne.w	r0, #71	; 0x47
   191c4:	2000      	moveq	r0, #0
}
   191c6:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   191c8:	4a08      	ldr	r2, [pc, #32]	; (191ec <is_abort_cb+0x68>)
   191ca:	4909      	ldr	r1, [pc, #36]	; (191f0 <is_abort_cb+0x6c>)
   191cc:	4809      	ldr	r0, [pc, #36]	; (191f4 <is_abort_cb+0x70>)
   191ce:	f240 231b 	movw	r3, #539	; 0x21b
   191d2:	f005 ff3f 	bl	1f054 <printk>
   191d6:	4040      	eors	r0, r0
   191d8:	f380 8811 	msr	BASEPRI, r0
   191dc:	f04f 0003 	mov.w	r0, #3
   191e0:	df02      	svc	2
   191e2:	f06f 000a 	mvn.w	r0, #10
}
   191e6:	bd08      	pop	{r3, pc}
   191e8:	00019685 	.word	0x00019685
   191ec:	000260d8 	.word	0x000260d8
   191f0:	0002609c 	.word	0x0002609c
   191f4:	0002561c 	.word	0x0002561c

000191f8 <abort_cb>:
{
   191f8:	b510      	push	{r4, lr}
	if (!prepare_param) {
   191fa:	b1d8      	cbz	r0, 19234 <abort_cb+0x3c>
	err = lll_hfclock_off();
   191fc:	460c      	mov	r4, r1
   191fe:	f7ff ff35 	bl	1906c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   19202:	2800      	cmp	r0, #0
   19204:	db04      	blt.n	19210 <abort_cb+0x18>
	lll_done(param);
   19206:	4620      	mov	r0, r4
}
   19208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1920c:	f7ff bdb2 	b.w	18d74 <lll_done>
	LL_ASSERT(err >= 0);
   19210:	4a0c      	ldr	r2, [pc, #48]	; (19244 <abort_cb+0x4c>)
   19212:	490d      	ldr	r1, [pc, #52]	; (19248 <abort_cb+0x50>)
   19214:	480d      	ldr	r0, [pc, #52]	; (1924c <abort_cb+0x54>)
   19216:	f240 2341 	movw	r3, #577	; 0x241
   1921a:	f005 ff1b 	bl	1f054 <printk>
   1921e:	4040      	eors	r0, r0
   19220:	f380 8811 	msr	BASEPRI, r0
   19224:	f04f 0003 	mov.w	r0, #3
   19228:	df02      	svc	2
	lll_done(param);
   1922a:	4620      	mov	r0, r4
}
   1922c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   19230:	f7ff bda0 	b.w	18d74 <lll_done>
		radio_isr_set(isr_abort, param);
   19234:	4806      	ldr	r0, [pc, #24]	; (19250 <abort_cb+0x58>)
   19236:	f001 fb07 	bl	1a848 <radio_isr_set>
}
   1923a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1923e:	f001 bc07 	b.w	1aa50 <radio_disable>
   19242:	bf00      	nop
   19244:	000260d8 	.word	0x000260d8
   19248:	0002609c 	.word	0x0002609c
   1924c:	0002561c 	.word	0x0002561c
   19250:	000190b9 	.word	0x000190b9

00019254 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   19254:	4b08      	ldr	r3, [pc, #32]	; (19278 <lll_adv_init+0x24>)
{
   19256:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   19258:	1d18      	adds	r0, r3, #4
   1925a:	2205      	movs	r2, #5
   1925c:	2128      	movs	r1, #40	; 0x28
   1925e:	f7f6 facb 	bl	f7f8 <mem_init>
	MFIFO_INIT(pdu_free);
   19262:	4b06      	ldr	r3, [pc, #24]	; (1927c <lll_adv_init+0x28>)
   19264:	2400      	movs	r4, #0
   19266:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   19268:	2203      	movs	r2, #3
   1926a:	4621      	mov	r1, r4
   1926c:	4804      	ldr	r0, [pc, #16]	; (19280 <lll_adv_init+0x2c>)
   1926e:	f00b f8f3 	bl	24458 <z_impl_k_sem_init>
}
   19272:	4620      	mov	r0, r4
   19274:	bd10      	pop	{r4, pc}
   19276:	bf00      	nop
   19278:	20003a84 	.word	0x20003a84
   1927c:	200005cc 	.word	0x200005cc
   19280:	20003b50 	.word	0x20003b50

00019284 <lll_adv_reset>:
   19284:	f7ff bfe6 	b.w	19254 <lll_adv_init>

00019288 <lll_adv_data_init>:
{
   19288:	b510      	push	{r4, lr}
   1928a:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   1928c:	4804      	ldr	r0, [pc, #16]	; (192a0 <lll_adv_data_init+0x18>)
   1928e:	f7f6 fae1 	bl	f854 <mem_acquire>
	if (!p) {
   19292:	b110      	cbz	r0, 1929a <lll_adv_data_init+0x12>
	pdu->pdu[0] = (void *)p;
   19294:	6060      	str	r0, [r4, #4]
	return 0;
   19296:	2000      	movs	r0, #0
}
   19298:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1929a:	f06f 000b 	mvn.w	r0, #11
}
   1929e:	bd10      	pop	{r4, pc}
   192a0:	20003a84 	.word	0x20003a84

000192a4 <lll_adv_data_reset>:
{
   192a4:	4603      	mov	r3, r0
	pdu->first = 0U;
   192a6:	2000      	movs	r0, #0
   192a8:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   192aa:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   192ac:	6098      	str	r0, [r3, #8]
}
   192ae:	4770      	bx	lr

000192b0 <lll_adv_pdu_alloc>:
{
   192b0:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   192b2:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   192b4:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   192b6:	429a      	cmp	r2, r3
   192b8:	d006      	beq.n	192c8 <lll_adv_pdu_alloc+0x18>
		pdu->last = first;
   192ba:	b2d4      	uxtb	r4, r2
   192bc:	7044      	strb	r4, [r0, #1]
  __ASM volatile ("dsb 0xF":::"memory");
   192be:	f3bf 8f4f 	dsb	sy
		first_latest = pdu->first;
   192c2:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   192c4:	4294      	cmp	r4, r2
   192c6:	d003      	beq.n	192d0 <lll_adv_pdu_alloc+0x20>
		last++;
   192c8:	3301      	adds	r3, #1
   192ca:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   192cc:	2b02      	cmp	r3, #2
   192ce:	d007      	beq.n	192e0 <lll_adv_pdu_alloc+0x30>
	*idx = last;
   192d0:	461c      	mov	r4, r3
   192d2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   192d6:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   192d8:	6865      	ldr	r5, [r4, #4]
	if (p) {
   192da:	b14d      	cbz	r5, 192f0 <lll_adv_pdu_alloc+0x40>
}
   192dc:	4628      	mov	r0, r5
   192de:	bd70      	pop	{r4, r5, r6, pc}
{
   192e0:	2400      	movs	r4, #0
			last = 0U;
   192e2:	4623      	mov	r3, r4
	*idx = last;
   192e4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   192e8:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   192ea:	6865      	ldr	r5, [r4, #4]
	if (p) {
   192ec:	2d00      	cmp	r5, #0
   192ee:	d1f5      	bne.n	192dc <lll_adv_pdu_alloc+0x2c>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   192f0:	4e33      	ldr	r6, [pc, #204]	; (193c0 <lll_adv_pdu_alloc+0x110>)
   192f2:	78b2      	ldrb	r2, [r6, #2]
	if (first == last) {
   192f4:	78f1      	ldrb	r1, [r6, #3]
   192f6:	7833      	ldrb	r3, [r6, #0]
   192f8:	4291      	cmp	r1, r2
   192fa:	d003      	beq.n	19304 <lll_adv_pdu_alloc+0x54>
	return *((void **)(fifo + first * size));
   192fc:	fb02 6303 	mla	r3, r2, r3, r6
   19300:	685d      	ldr	r5, [r3, #4]
	if (p) {
   19302:	b93d      	cbnz	r5, 19314 <lll_adv_pdu_alloc+0x64>
	p = mem_acquire(&mem_pdu.free);
   19304:	482f      	ldr	r0, [pc, #188]	; (193c4 <lll_adv_pdu_alloc+0x114>)
   19306:	f7f6 faa5 	bl	f854 <mem_acquire>
	if (p) {
   1930a:	4605      	mov	r5, r0
   1930c:	b1a8      	cbz	r0, 1933a <lll_adv_pdu_alloc+0x8a>
	pdu->pdu[last] = (void *)p;
   1930e:	6065      	str	r5, [r4, #4]
}
   19310:	4628      	mov	r0, r5
   19312:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
   19314:	482c      	ldr	r0, [pc, #176]	; (193c8 <lll_adv_pdu_alloc+0x118>)
   19316:	2200      	movs	r2, #0
   19318:	2300      	movs	r3, #0
   1931a:	f005 f9db 	bl	1e6d4 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1931e:	2800      	cmp	r0, #0
   19320:	d133      	bne.n	1938a <lll_adv_pdu_alloc+0xda>
	uint8_t _first = *first; /* Copy read-index */
   19322:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   19324:	78f2      	ldrb	r2, [r6, #3]
		MFIFO_DEQUEUE(pdu_free);
   19326:	7871      	ldrb	r1, [r6, #1]
   19328:	429a      	cmp	r2, r3
   1932a:	d0f0      	beq.n	1930e <lll_adv_pdu_alloc+0x5e>
	_first += 1U;
   1932c:	3301      	adds	r3, #1
   1932e:	b2db      	uxtb	r3, r3
		_first = 0U;
   19330:	4299      	cmp	r1, r3
   19332:	bf08      	it	eq
   19334:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   19336:	70b3      	strb	r3, [r6, #2]

	return mem;
   19338:	e7e9      	b.n	1930e <lll_adv_pdu_alloc+0x5e>
   1933a:	4823      	ldr	r0, [pc, #140]	; (193c8 <lll_adv_pdu_alloc+0x118>)
   1933c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19344:	f005 f9c6 	bl	1e6d4 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   19348:	2800      	cmp	r0, #0
   1934a:	d12b      	bne.n	193a4 <lll_adv_pdu_alloc+0xf4>
	uint8_t _first = *first; /* Copy read-index */
   1934c:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   1934e:	78f1      	ldrb	r1, [r6, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   19350:	7832      	ldrb	r2, [r6, #0]
   19352:	7870      	ldrb	r0, [r6, #1]
   19354:	4299      	cmp	r1, r3
   19356:	d00a      	beq.n	1936e <lll_adv_pdu_alloc+0xbe>
	mem = *((void **)(fifo + _first * size));
   19358:	fb03 6202 	mla	r2, r3, r2, r6
	_first += 1U;
   1935c:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1935e:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   19360:	b2db      	uxtb	r3, r3
		_first = 0U;
   19362:	4298      	cmp	r0, r3
   19364:	bf08      	it	eq
   19366:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   19368:	70b3      	strb	r3, [r6, #2]
	LL_ASSERT(p);
   1936a:	2d00      	cmp	r5, #0
   1936c:	d1cf      	bne.n	1930e <lll_adv_pdu_alloc+0x5e>
   1936e:	4a17      	ldr	r2, [pc, #92]	; (193cc <lll_adv_pdu_alloc+0x11c>)
   19370:	4917      	ldr	r1, [pc, #92]	; (193d0 <lll_adv_pdu_alloc+0x120>)
   19372:	4818      	ldr	r0, [pc, #96]	; (193d4 <lll_adv_pdu_alloc+0x124>)
   19374:	23fa      	movs	r3, #250	; 0xfa
   19376:	f005 fe6d 	bl	1f054 <printk>
   1937a:	4040      	eors	r0, r0
   1937c:	f380 8811 	msr	BASEPRI, r0
   19380:	f04f 0003 	mov.w	r0, #3
   19384:	df02      	svc	2
   19386:	2500      	movs	r5, #0
   19388:	e7c1      	b.n	1930e <lll_adv_pdu_alloc+0x5e>
		LL_ASSERT(!err);
   1938a:	4a10      	ldr	r2, [pc, #64]	; (193cc <lll_adv_pdu_alloc+0x11c>)
   1938c:	4912      	ldr	r1, [pc, #72]	; (193d8 <lll_adv_pdu_alloc+0x128>)
   1938e:	4811      	ldr	r0, [pc, #68]	; (193d4 <lll_adv_pdu_alloc+0x124>)
   19390:	23e7      	movs	r3, #231	; 0xe7
   19392:	f005 fe5f 	bl	1f054 <printk>
   19396:	4040      	eors	r0, r0
   19398:	f380 8811 	msr	BASEPRI, r0
   1939c:	f04f 0003 	mov.w	r0, #3
   193a0:	df02      	svc	2
   193a2:	e7be      	b.n	19322 <lll_adv_pdu_alloc+0x72>
	LL_ASSERT(!err);
   193a4:	4a09      	ldr	r2, [pc, #36]	; (193cc <lll_adv_pdu_alloc+0x11c>)
   193a6:	490c      	ldr	r1, [pc, #48]	; (193d8 <lll_adv_pdu_alloc+0x128>)
   193a8:	480a      	ldr	r0, [pc, #40]	; (193d4 <lll_adv_pdu_alloc+0x124>)
   193aa:	23f7      	movs	r3, #247	; 0xf7
   193ac:	f005 fe52 	bl	1f054 <printk>
   193b0:	4040      	eors	r0, r0
   193b2:	f380 8811 	msr	BASEPRI, r0
   193b6:	f04f 0003 	mov.w	r0, #3
   193ba:	df02      	svc	2
   193bc:	e7c6      	b.n	1934c <lll_adv_pdu_alloc+0x9c>
   193be:	bf00      	nop
   193c0:	200005cc 	.word	0x200005cc
   193c4:	20003a84 	.word	0x20003a84
   193c8:	20003b50 	.word	0x20003b50
   193cc:	000260d8 	.word	0x000260d8
   193d0:	00026138 	.word	0x00026138
   193d4:	0002561c 	.word	0x0002561c
   193d8:	00025898 	.word	0x00025898

000193dc <lll_adv_pdu_latest_get>:
{
   193dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   193de:	4604      	mov	r4, r0
	first = pdu->first;
   193e0:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   193e2:	7840      	ldrb	r0, [r0, #1]
   193e4:	4298      	cmp	r0, r3
   193e6:	d029      	beq.n	1943c <lll_adv_pdu_latest_get+0x60>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   193e8:	4d1d      	ldr	r5, [pc, #116]	; (19460 <lll_adv_pdu_latest_get+0x84>)
   193ea:	b2da      	uxtb	r2, r3
	last = last + 1;
   193ec:	78eb      	ldrb	r3, [r5, #3]
	if (last == count) {
   193ee:	786e      	ldrb	r6, [r5, #1]
   193f0:	78a8      	ldrb	r0, [r5, #2]
	last = last + 1;
   193f2:	3301      	adds	r3, #1
   193f4:	b2db      	uxtb	r3, r3
		last = 0U;
   193f6:	429e      	cmp	r6, r3
   193f8:	bf08      	it	eq
   193fa:	2300      	moveq	r3, #0
	if (last == first) {
   193fc:	4298      	cmp	r0, r3
   193fe:	d01f      	beq.n	19440 <lll_adv_pdu_latest_get+0x64>
		first += 1U;
   19400:	1c50      	adds	r0, r2, #1
   19402:	b2c0      	uxtb	r0, r0
		if (first == DOUBLE_BUFFER_SIZE) {
   19404:	2802      	cmp	r0, #2
   19406:	bf04      	itt	eq
   19408:	2600      	moveq	r6, #0
			first = 0U;
   1940a:	4630      	moveq	r0, r6
		*is_modified = 1U;
   1940c:	f04f 0701 	mov.w	r7, #1
		pdu->first = first;
   19410:	7020      	strb	r0, [r4, #0]
		*is_modified = 1U;
   19412:	700f      	strb	r7, [r1, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   19414:	7829      	ldrb	r1, [r5, #0]
   19416:	bf18      	it	ne
   19418:	4606      	movne	r6, r0
   1941a:	78e8      	ldrb	r0, [r5, #3]
   1941c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   19420:	fb00 5101 	mla	r1, r0, r1, r5
		pdu->pdu[pdu_idx] = NULL;
   19424:	2700      	movs	r7, #0
		p = pdu->pdu[pdu_idx];
   19426:	6850      	ldr	r0, [r2, #4]
		pdu->pdu[pdu_idx] = NULL;
   19428:	6057      	str	r7, [r2, #4]
   1942a:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1942c:	70eb      	strb	r3, [r5, #3]
	z_impl_k_sem_give(sem);
   1942e:	480d      	ldr	r0, [pc, #52]	; (19464 <lll_adv_pdu_latest_get+0x88>)
   19430:	f005 f92a 	bl	1e688 <z_impl_k_sem_give>
	return (void *)pdu->pdu[first];
   19434:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   19438:	6860      	ldr	r0, [r4, #4]
}
   1943a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1943c:	4606      	mov	r6, r0
   1943e:	e7f9      	b.n	19434 <lll_adv_pdu_latest_get+0x58>
			LL_ASSERT(false);
   19440:	4a09      	ldr	r2, [pc, #36]	; (19468 <lll_adv_pdu_latest_get+0x8c>)
   19442:	490a      	ldr	r1, [pc, #40]	; (1946c <lll_adv_pdu_latest_get+0x90>)
   19444:	480a      	ldr	r0, [pc, #40]	; (19470 <lll_adv_pdu_latest_get+0x94>)
   19446:	f240 130d 	movw	r3, #269	; 0x10d
   1944a:	f005 fe03 	bl	1f054 <printk>
   1944e:	4040      	eors	r0, r0
   19450:	f380 8811 	msr	BASEPRI, r0
   19454:	f04f 0003 	mov.w	r0, #3
   19458:	df02      	svc	2
   1945a:	2000      	movs	r0, #0
}
   1945c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1945e:	bf00      	nop
   19460:	200005cc 	.word	0x200005cc
   19464:	20003b50 	.word	0x20003b50
   19468:	000260d8 	.word	0x000260d8
   1946c:	0002568c 	.word	0x0002568c
   19470:	0002561c 	.word	0x0002561c

00019474 <chan_prepare>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   19474:	7b03      	ldrb	r3, [r0, #12]
{
   19476:	b530      	push	{r4, r5, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   19478:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1947c:	2b00      	cmp	r3, #0
{
   1947e:	4604      	mov	r4, r0
   19480:	fa93 f0a3 	rbit	r0, r3
   19484:	fab0 f080 	clz	r0, r0
   19488:	bf08      	it	eq
   1948a:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   1948e:	1c45      	adds	r5, r0, #1
{
   19490:	b083      	sub	sp, #12
	LL_ASSERT(chan);
   19492:	d03f      	beq.n	19514 <chan_prepare+0xa0>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   19494:	7b22      	ldrb	r2, [r4, #12]
   19496:	1e59      	subs	r1, r3, #1
   19498:	400b      	ands	r3, r1
   1949a:	f363 1206 	bfi	r2, r3, #4, #3

	lll_chan_set(36 + chan);
   1949e:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   194a2:	7322      	strb	r2, [r4, #12]
	lll_chan_set(36 + chan);
   194a4:	f7ff fcde 	bl	18e64 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   194a8:	2300      	movs	r3, #0
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   194aa:	f10d 0107 	add.w	r1, sp, #7
   194ae:	f104 0010 	add.w	r0, r4, #16
   194b2:	f88d 3007 	strb.w	r3, [sp, #7]
   194b6:	f7ff ff91 	bl	193dc <lll_adv_pdu_latest_get>
   194ba:	4605      	mov	r5, r0
	pdu = lll_adv_data_latest_get(lll, &upd);

	radio_pkt_tx_set(pdu);
   194bc:	f001 faaa 	bl	1aa14 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   194c0:	782b      	ldrb	r3, [r5, #0]
   194c2:	f003 030f 	and.w	r3, r3, #15
   194c6:	2b02      	cmp	r3, #2
   194c8:	d01b      	beq.n	19502 <chan_prepare+0x8e>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   194ca:	f10d 0107 	add.w	r1, sp, #7
   194ce:	f104 001c 	add.w	r0, r4, #28
   194d2:	f7ff ff83 	bl	193dc <lll_adv_pdu_latest_get>
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   194d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   194da:	b963      	cbnz	r3, 194f6 <chan_prepare+0x82>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   194dc:	4621      	mov	r1, r4
   194de:	4816      	ldr	r0, [pc, #88]	; (19538 <chan_prepare+0xc4>)
   194e0:	f001 f9b2 	bl	1a848 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   194e4:	2096      	movs	r0, #150	; 0x96
   194e6:	f001 fb9b 	bl	1ac20 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   194ea:	2000      	movs	r0, #0
   194ec:	f001 fb10 	bl	1ab10 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   194f0:	4628      	mov	r0, r5
   194f2:	b003      	add	sp, #12
   194f4:	bd30      	pop	{r4, r5, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   194f6:	2206      	movs	r2, #6
   194f8:	1ca9      	adds	r1, r5, #2
   194fa:	3002      	adds	r0, #2
   194fc:	f008 f8d3 	bl	216a6 <memcpy>
   19500:	e7ec      	b.n	194dc <chan_prepare+0x68>
		radio_isr_set(isr_done, lll);
   19502:	480e      	ldr	r0, [pc, #56]	; (1953c <chan_prepare+0xc8>)
   19504:	4621      	mov	r1, r4
   19506:	f001 f99f 	bl	1a848 <radio_isr_set>
		radio_switch_complete_and_disable();
   1950a:	f001 fb1b 	bl	1ab44 <radio_switch_complete_and_disable>
}
   1950e:	4628      	mov	r0, r5
   19510:	b003      	add	sp, #12
   19512:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(chan);
   19514:	4a0a      	ldr	r2, [pc, #40]	; (19540 <chan_prepare+0xcc>)
   19516:	490b      	ldr	r1, [pc, #44]	; (19544 <chan_prepare+0xd0>)
   19518:	480b      	ldr	r0, [pc, #44]	; (19548 <chan_prepare+0xd4>)
   1951a:	f240 3356 	movw	r3, #854	; 0x356
   1951e:	f005 fd99 	bl	1f054 <printk>
   19522:	4040      	eors	r0, r0
   19524:	f380 8811 	msr	BASEPRI, r0
   19528:	f04f 0003 	mov.w	r0, #3
   1952c:	df02      	svc	2
   1952e:	7b23      	ldrb	r3, [r4, #12]
   19530:	f3c3 1302 	ubfx	r3, r3, #4, #3
   19534:	e7ae      	b.n	19494 <chan_prepare+0x20>
   19536:	bf00      	nop
   19538:	000190d1 	.word	0x000190d1
   1953c:	000196ad 	.word	0x000196ad
   19540:	000260d8 	.word	0x000260d8
   19544:	00025d8c 	.word	0x00025d8c
   19548:	0002561c 	.word	0x0002561c

0001954c <prepare_cb>:
{
   1954c:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   1954e:	68c4      	ldr	r4, [r0, #12]

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   19550:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   19552:	f015 0501 	ands.w	r5, r5, #1
{
   19556:	b083      	sub	sp, #12
	if (unlikely(lll_is_stop(lll))) {
   19558:	d16e      	bne.n	19638 <prepare_cb+0xec>
	radio_reset();
   1955a:	4606      	mov	r6, r0
   1955c:	f001 f994 	bl	1a888 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   19560:	4628      	mov	r0, r5
   19562:	f001 f9e3 	bl	1a92c <radio_tx_power_set>
	radio_phy_set(0, 0);
   19566:	4629      	mov	r1, r5
   19568:	4628      	mov	r0, r5
   1956a:	f001 f9b3 	bl	1a8d4 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   1956e:	462a      	mov	r2, r5
   19570:	2125      	movs	r1, #37	; 0x25
   19572:	2008      	movs	r0, #8
   19574:	f001 fa12 	bl	1a99c <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   19578:	4b3b      	ldr	r3, [pc, #236]	; (19668 <prepare_cb+0x11c>)
   1957a:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   1957c:	a801      	add	r0, sp, #4
   1957e:	f001 f9f3 	bl	1a968 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   19582:	493a      	ldr	r1, [pc, #232]	; (1966c <prepare_cb+0x120>)
   19584:	f240 605b 	movw	r0, #1627	; 0x65b
   19588:	f001 faa4 	bl	1aad4 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1958c:	7b23      	ldrb	r3, [r4, #12]
   1958e:	f3c3 0242 	ubfx	r2, r3, #1, #3
   19592:	f362 1306 	bfi	r3, r2, #4, #3
   19596:	7323      	strb	r3, [r4, #12]
	pdu = chan_prepare(lll);
   19598:	4620      	mov	r0, r4
   1959a:	f7ff ff6b 	bl	19474 <chan_prepare>
	if (ull_filter_lll_rl_enabled()) {
   1959e:	f7ff f91f 	bl	187e0 <ull_filter_lll_rl_enabled>
   195a2:	bb50      	cbnz	r0, 195fa <prepare_cb+0xae>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   195a4:	7b63      	ldrb	r3, [r4, #13]
   195a6:	079b      	lsls	r3, r3, #30
   195a8:	d134      	bne.n	19614 <prepare_cb+0xc8>
	evt = HDR_LLL2EVT(lll);
   195aa:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   195ac:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   195ae:	4638      	mov	r0, r7
   195b0:	f7ff fc38 	bl	18e24 <lll_evt_offset_get>
   195b4:	4405      	add	r5, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   195b6:	6872      	ldr	r2, [r6, #4]
   195b8:	f105 0109 	add.w	r1, r5, #9
   195bc:	2001      	movs	r0, #1
   195be:	f001 fb3b 	bl	1ac38 <radio_tmr_start>
	radio_tmr_end_capture();
   195c2:	f001 fbf9 	bl	1adb8 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   195c6:	4620      	mov	r0, r4
   195c8:	f7fa fdcc 	bl	14164 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   195cc:	1c81      	adds	r1, r0, #2
   195ce:	462a      	mov	r2, r5
   195d0:	b2c9      	uxtb	r1, r1
   195d2:	4638      	mov	r0, r7
   195d4:	f7ff fc34 	bl	18e40 <lll_preempt_calc>
   195d8:	b930      	cbnz	r0, 195e8 <prepare_cb+0x9c>
		ret = lll_prepare_done(lll);
   195da:	4620      	mov	r0, r4
   195dc:	f7ff fbc8 	bl	18d70 <lll_prepare_done>
		LL_ASSERT(!ret);
   195e0:	b9d0      	cbnz	r0, 19618 <prepare_cb+0xcc>
}
   195e2:	2000      	movs	r0, #0
   195e4:	b003      	add	sp, #12
   195e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   195e8:	4821      	ldr	r0, [pc, #132]	; (19670 <prepare_cb+0x124>)
   195ea:	4621      	mov	r1, r4
   195ec:	f001 f92c 	bl	1a848 <radio_isr_set>
		radio_disable();
   195f0:	f001 fa2e 	bl	1aa50 <radio_disable>
}
   195f4:	2000      	movs	r0, #0
   195f6:	b003      	add	sp, #12
   195f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy));
   195fa:	7b60      	ldrb	r0, [r4, #13]
   195fc:	f010 0003 	ands.w	r0, r0, #3
   19600:	bf18      	it	ne
   19602:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
   19604:	f7ff f8a2 	bl	1874c <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   19608:	7841      	ldrb	r1, [r0, #1]
   1960a:	1c82      	adds	r2, r0, #2
   1960c:	7800      	ldrb	r0, [r0, #0]
   1960e:	f001 fab9 	bl	1ab84 <radio_filter_configure>
   19612:	e7ca      	b.n	195aa <prepare_cb+0x5e>
		struct lll_filter *wl = ull_filter_lll_get(true);
   19614:	2001      	movs	r0, #1
   19616:	e7f5      	b.n	19604 <prepare_cb+0xb8>
		LL_ASSERT(!ret);
   19618:	4a16      	ldr	r2, [pc, #88]	; (19674 <prepare_cb+0x128>)
   1961a:	4917      	ldr	r1, [pc, #92]	; (19678 <prepare_cb+0x12c>)
   1961c:	4817      	ldr	r0, [pc, #92]	; (1967c <prepare_cb+0x130>)
   1961e:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
   19622:	f005 fd17 	bl	1f054 <printk>
   19626:	4040      	eors	r0, r0
   19628:	f380 8811 	msr	BASEPRI, r0
   1962c:	f04f 0003 	mov.w	r0, #3
   19630:	df02      	svc	2
}
   19632:	2000      	movs	r0, #0
   19634:	b003      	add	sp, #12
   19636:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = lll_hfclock_off();
   19638:	f7ff fd18 	bl	1906c <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1963c:	2800      	cmp	r0, #0
   1963e:	db05      	blt.n	1964c <prepare_cb+0x100>
		lll_done(NULL);
   19640:	2000      	movs	r0, #0
   19642:	f7ff fb97 	bl	18d74 <lll_done>
}
   19646:	2000      	movs	r0, #0
   19648:	b003      	add	sp, #12
   1964a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(err >= 0);
   1964c:	4a09      	ldr	r2, [pc, #36]	; (19674 <prepare_cb+0x128>)
   1964e:	490c      	ldr	r1, [pc, #48]	; (19680 <prepare_cb+0x134>)
   19650:	480a      	ldr	r0, [pc, #40]	; (1967c <prepare_cb+0x130>)
   19652:	f240 1391 	movw	r3, #401	; 0x191
   19656:	f005 fcfd 	bl	1f054 <printk>
   1965a:	4040      	eors	r0, r0
   1965c:	f380 8811 	msr	BASEPRI, r0
   19660:	f04f 0003 	mov.w	r0, #3
   19664:	df02      	svc	2
   19666:	e7eb      	b.n	19640 <prepare_cb+0xf4>
   19668:	8e89bed6 	.word	0x8e89bed6
   1966c:	00555555 	.word	0x00555555
   19670:	000190b9 	.word	0x000190b9
   19674:	000260d8 	.word	0x000260d8
   19678:	000258a4 	.word	0x000258a4
   1967c:	0002561c 	.word	0x0002561c
   19680:	0002609c 	.word	0x0002609c

00019684 <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   19684:	68c3      	ldr	r3, [r0, #12]
{
   19686:	b570      	push	{r4, r5, r6, lr}
	evt = HDR_LLL2EVT(p->param);
   19688:	681e      	ldr	r6, [r3, #0]
{
   1968a:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1968c:	f7f7 fcb8 	bl	11000 <ticker_ticks_now_get>
   19690:	4605      	mov	r5, r0
   19692:	4630      	mov	r0, r6
   19694:	f7ff fbc6 	bl	18e24 <lll_evt_offset_get>
	p->remainder = 0;
   19698:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1969a:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1969c:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   196a0:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   196a2:	4620      	mov	r0, r4
}
   196a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   196a8:	f7ff bf50 	b.w	1954c <prepare_cb>

000196ac <isr_done>:
{
   196ac:	b510      	push	{r4, lr}
   196ae:	4604      	mov	r4, r0
	lll_isr_status_reset();
   196b0:	f7ff fc2e 	bl	18f10 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   196b4:	7b23      	ldrb	r3, [r4, #12]
   196b6:	f003 0271 	and.w	r2, r3, #113	; 0x71
   196ba:	2a01      	cmp	r2, #1
   196bc:	d105      	bne.n	196ca <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   196be:	f3c3 0242 	ubfx	r2, r3, #1, #3
   196c2:	f362 1306 	bfi	r3, r2, #4, #3
   196c6:	7323      	strb	r3, [r4, #12]
   196c8:	b2db      	uxtb	r3, r3
	if (lll->chan_map_curr) {
   196ca:	f013 0f70 	tst.w	r3, #112	; 0x70
   196ce:	d106      	bne.n	196de <isr_done+0x32>
	radio_filter_disable();
   196d0:	f001 fa74 	bl	1abbc <radio_filter_disable>
	lll_isr_cleanup(param);
   196d4:	4620      	mov	r0, r4
}
   196d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   196da:	f7ff bc27 	b.w	18f2c <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   196de:	4620      	mov	r0, r4
   196e0:	f7ff fec8 	bl	19474 <chan_prepare>
		radio_tx_enable();
   196e4:	f001 f9ae 	bl	1aa44 <radio_tx_enable>
}
   196e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   196ec:	f001 bb64 	b.w	1adb8 <radio_tmr_end_capture>

000196f0 <lll_adv_prepare>:
{
   196f0:	b510      	push	{r4, lr}
   196f2:	b082      	sub	sp, #8
   196f4:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   196f6:	f7ff fca1 	bl	1903c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   196fa:	2800      	cmp	r0, #0
   196fc:	db1a      	blt.n	19734 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   196fe:	4a14      	ldr	r2, [pc, #80]	; (19750 <lll_adv_prepare+0x60>)
   19700:	4914      	ldr	r1, [pc, #80]	; (19754 <lll_adv_prepare+0x64>)
   19702:	4815      	ldr	r0, [pc, #84]	; (19758 <lll_adv_prepare+0x68>)
   19704:	9400      	str	r4, [sp, #0]
   19706:	2300      	movs	r3, #0
   19708:	f7ff faa6 	bl	18c58 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1970c:	b108      	cbz	r0, 19712 <lll_adv_prepare+0x22>
   1970e:	3044      	adds	r0, #68	; 0x44
   19710:	d101      	bne.n	19716 <lll_adv_prepare+0x26>
}
   19712:	b002      	add	sp, #8
   19714:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   19716:	4a11      	ldr	r2, [pc, #68]	; (1975c <lll_adv_prepare+0x6c>)
   19718:	4911      	ldr	r1, [pc, #68]	; (19760 <lll_adv_prepare+0x70>)
   1971a:	4812      	ldr	r0, [pc, #72]	; (19764 <lll_adv_prepare+0x74>)
   1971c:	f240 132d 	movw	r3, #301	; 0x12d
   19720:	f005 fc98 	bl	1f054 <printk>
   19724:	4040      	eors	r0, r0
   19726:	f380 8811 	msr	BASEPRI, r0
   1972a:	f04f 0003 	mov.w	r0, #3
   1972e:	df02      	svc	2
}
   19730:	b002      	add	sp, #8
   19732:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   19734:	4a09      	ldr	r2, [pc, #36]	; (1975c <lll_adv_prepare+0x6c>)
   19736:	490c      	ldr	r1, [pc, #48]	; (19768 <lll_adv_prepare+0x78>)
   19738:	480a      	ldr	r0, [pc, #40]	; (19764 <lll_adv_prepare+0x74>)
   1973a:	f44f 7395 	mov.w	r3, #298	; 0x12a
   1973e:	f005 fc89 	bl	1f054 <printk>
   19742:	4040      	eors	r0, r0
   19744:	f380 8811 	msr	BASEPRI, r0
   19748:	f04f 0003 	mov.w	r0, #3
   1974c:	df02      	svc	2
   1974e:	e7d6      	b.n	196fe <lll_adv_prepare+0xe>
   19750:	0001954d 	.word	0x0001954d
   19754:	000191f9 	.word	0x000191f9
   19758:	00019185 	.word	0x00019185
   1975c:	000260d8 	.word	0x000260d8
   19760:	0002613c 	.word	0x0002613c
   19764:	0002561c 	.word	0x0002561c
   19768:	0002609c 	.word	0x0002609c

0001976c <lll_adv_scan_req_check>:
{
   1976c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   19770:	7b45      	ldrb	r5, [r0, #13]
{
   19772:	f89d 8020 	ldrb.w	r8, [sp, #32]
   19776:	4617      	mov	r7, r2
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   19778:	07ea      	lsls	r2, r5, #31
{
   1977a:	4689      	mov	r9, r1
   1977c:	461e      	mov	r6, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1977e:	d50a      	bpl.n	19796 <lll_adv_scan_req_check+0x2a>
		(((lll->filter_policy & 0x01) != 0) &&
   19780:	f1b8 0f00 	cmp.w	r8, #0
   19784:	d017      	beq.n	197b6 <lll_adv_scan_req_check+0x4a>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   19786:	f899 3000 	ldrb.w	r3, [r9]
   1978a:	ebb7 1fd3 	cmp.w	r7, r3, lsr #7
   1978e:	d019      	beq.n	197c4 <lll_adv_scan_req_check+0x58>
{
   19790:	2000      	movs	r0, #0
}
   19792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19796:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   19798:	f811 0b02 	ldrb.w	r0, [r1], #2
   1979c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1979e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   197a2:	f7fe ffdf 	bl	18764 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   197a6:	2800      	cmp	r0, #0
   197a8:	d1ed      	bne.n	19786 <lll_adv_scan_req_check+0x1a>
		(((lll->filter_policy & 0x01) != 0) &&
   197aa:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   197ac:	07db      	lsls	r3, r3, #31
   197ae:	d5ef      	bpl.n	19790 <lll_adv_scan_req_check+0x24>
		(((lll->filter_policy & 0x01) != 0) &&
   197b0:	f1b8 0f00 	cmp.w	r8, #0
   197b4:	d1e7      	bne.n	19786 <lll_adv_scan_req_check+0x1a>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   197b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   197b8:	7818      	ldrb	r0, [r3, #0]
   197ba:	f7fe ff97 	bl	186ec <ull_filter_lll_irk_whitelisted>
   197be:	2800      	cmp	r0, #0
   197c0:	d1e1      	bne.n	19786 <lll_adv_scan_req_check+0x1a>
   197c2:	e7e5      	b.n	19790 <lll_adv_scan_req_check+0x24>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   197c4:	f109 0108 	add.w	r1, r9, #8
   197c8:	4630      	mov	r0, r6
   197ca:	2206      	movs	r2, #6
   197cc:	f007 ff5b 	bl	21686 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   197d0:	fab0 f080 	clz	r0, r0
   197d4:	0940      	lsrs	r0, r0, #5
}
   197d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   197da:	bf00      	nop

000197dc <isr_rx>:
{
   197dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   197e0:	b084      	sub	sp, #16
   197e2:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   197e4:	f001 f962 	bl	1aaac <radio_is_done>
	if (trx_done) {
   197e8:	f010 0fff 	tst.w	r0, #255	; 0xff
   197ec:	d10a      	bne.n	19804 <isr_rx+0x28>
	lll_isr_status_reset();
   197ee:	f7ff fb8f 	bl	18f10 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   197f2:	48b2      	ldr	r0, [pc, #712]	; (19abc <isr_rx+0x2e0>)
   197f4:	4621      	mov	r1, r4
   197f6:	f001 f827 	bl	1a848 <radio_isr_set>
	radio_disable();
   197fa:	f001 f929 	bl	1aa50 <radio_disable>
}
   197fe:	b004      	add	sp, #16
   19800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = radio_crc_is_valid();
   19804:	f001 f972 	bl	1aaec <radio_crc_is_valid>
   19808:	4606      	mov	r6, r0
		devmatch_ok = radio_filter_has_match();
   1980a:	f001 f9e9 	bl	1abe0 <radio_filter_has_match>
   1980e:	4680      	mov	r8, r0
		devmatch_id = radio_filter_match_get();
   19810:	f001 f9f0 	bl	1abf4 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   19814:	f001 fbe8 	bl	1afe8 <radio_ar_has_match>
   19818:	4607      	mov	r7, r0
		irkmatch_id = radio_ar_match_get();
   1981a:	f001 fbc9 	bl	1afb0 <radio_ar_match_get>
   1981e:	4681      	mov	r9, r0
		rssi_ready = radio_rssi_is_ready();
   19820:	f001 f9a6 	bl	1ab70 <radio_rssi_is_ready>
	lll_isr_status_reset();
   19824:	f7ff fb74 	bl	18f10 <lll_isr_status_reset>
	if (crc_ok) {
   19828:	f016 0fff 	tst.w	r6, #255	; 0xff
   1982c:	d0e1      	beq.n	197f2 <isr_rx+0x16>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1982e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   19832:	d17f      	bne.n	19934 <isr_rx+0x158>
   19834:	20ff      	movs	r0, #255	; 0xff
   19836:	f88d 000f 	strb.w	r0, [sp, #15]
	pdu_rx = (void *)radio_pkt_scratch_get();
   1983a:	f001 f965 	bl	1ab08 <radio_pkt_scratch_get>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1983e:	7c23      	ldrb	r3, [r4, #16]
   19840:	4606      	mov	r6, r0
   19842:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   19846:	7800      	ldrb	r0, [r0, #0]
   19848:	695d      	ldr	r5, [r3, #20]
   1984a:	f000 020f 	and.w	r2, r0, #15
   1984e:	2a03      	cmp	r2, #3
		devmatch_ok = radio_filter_has_match();
   19850:	fa5f f888 	uxtb.w	r8, r8
	addr = pdu_adv->adv_ind.addr;
   19854:	f105 0902 	add.w	r9, r5, #2
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   19858:	d07f      	beq.n	1995a <isr_rx+0x17e>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1985a:	2a05      	cmp	r2, #5
   1985c:	d1c9      	bne.n	197f2 <isr_rx+0x16>
   1985e:	7873      	ldrb	r3, [r6, #1]
   19860:	2b22      	cmp	r3, #34	; 0x22
   19862:	d1c6      	bne.n	197f2 <isr_rx+0x16>
static inline bool isr_rx_ci_check(struct lll_adv *lll, struct pdu_adv *adv,
				   struct pdu_adv *ci, uint8_t devmatch_ok,
				   uint8_t *rl_idx)
{
	/* LL 4.3.2: filter policy shall be ignored for directed adv */
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   19864:	782a      	ldrb	r2, [r5, #0]
   19866:	f002 020f 	and.w	r2, r2, #15
   1986a:	2a01      	cmp	r2, #1
   1986c:	f000 80b7 	beq.w	199de <isr_rx+0x202>
		       isr_rx_ci_adva_check(adv, ci) &&
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	return ((((lll->filter_policy & 0x02) == 0) &&
   19870:	7b63      	ldrb	r3, [r4, #13]
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
						ci->connect_ind.init_addr,
						rl_idx)) ||
		(((lll->filter_policy & 0x02) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   19872:	0799      	lsls	r1, r3, #30
   19874:	d563      	bpl.n	1993e <isr_rx+0x162>
		(((lll->filter_policy & 0x02) != 0) &&
   19876:	f1b8 0f00 	cmp.w	r8, #0
   1987a:	f000 80a8 	beq.w	199ce <isr_rx+0x1f2>
}

static inline bool isr_rx_ci_adva_check(struct pdu_adv *adv,
					struct pdu_adv *ci)
{
	return (adv->tx_addr == ci->rx_addr) &&
   1987e:	782b      	ldrb	r3, [r5, #0]
   19880:	7831      	ldrb	r1, [r6, #0]
   19882:	f3c3 1280 	ubfx	r2, r3, #6, #1
   19886:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   1988a:	d1b2      	bne.n	197f2 <isr_rx+0x16>
   1988c:	f003 030f 	and.w	r3, r3, #15
   19890:	2b01      	cmp	r3, #1
   19892:	f106 0508 	add.w	r5, r6, #8
   19896:	f000 80cf 	beq.w	19a38 <isr_rx+0x25c>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
			 BDADDR_SIZE)) ||
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   1989a:	4629      	mov	r1, r5
   1989c:	4648      	mov	r0, r9
   1989e:	2206      	movs	r2, #6
   198a0:	f007 fef1 	bl	21686 <memcmp>
			 BDADDR_SIZE)) ||
   198a4:	fab0 f080 	clz	r0, r0
   198a8:	0940      	lsrs	r0, r0, #5
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   198aa:	2800      	cmp	r0, #0
   198ac:	d0a1      	beq.n	197f2 <isr_rx+0x16>
				   &rl_idx) &&
   198ae:	68a3      	ldr	r3, [r4, #8]
   198b0:	2b00      	cmp	r3, #0
   198b2:	d09e      	beq.n	197f2 <isr_rx+0x16>
			rx = ull_pdu_rx_alloc_peek(4);
   198b4:	2004      	movs	r0, #4
   198b6:	f7fa f821 	bl	138fc <ull_pdu_rx_alloc_peek>
		if (!rx) {
   198ba:	2800      	cmp	r0, #0
   198bc:	d099      	beq.n	197f2 <isr_rx+0x16>
		radio_isr_set(isr_abort, lll);
   198be:	4880      	ldr	r0, [pc, #512]	; (19ac0 <isr_rx+0x2e4>)
   198c0:	4621      	mov	r1, r4
   198c2:	f000 ffc1 	bl	1a848 <radio_isr_set>
		radio_disable();
   198c6:	f001 f8c3 	bl	1aa50 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   198ca:	f001 f8e5 	bl	1aa98 <radio_is_ready>
   198ce:	2800      	cmp	r0, #0
   198d0:	d16f      	bne.n	199b2 <isr_rx+0x1d6>
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
   198d2:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
   198d4:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
   198d8:	07db      	lsls	r3, r3, #31
   198da:	7122      	strb	r2, [r4, #4]
   198dc:	d45b      	bmi.n	19996 <isr_rx+0x1ba>
		rx = ull_pdu_rx_alloc();
   198de:	f7fa f82b 	bl	13938 <ull_pdu_rx_alloc>
		rx->hdr.handle = 0xffff;
   198e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx = ull_pdu_rx_alloc();
   198e6:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   198e8:	2211      	movs	r2, #17
		rx->hdr.handle = 0xffff;
   198ea:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   198ec:	4631      	mov	r1, r6
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   198ee:	7102      	strb	r2, [r0, #4]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   198f0:	2224      	movs	r2, #36	; 0x24
   198f2:	301c      	adds	r0, #28
   198f4:	f007 fed7 	bl	216a6 <memcpy>
		ftr->param = lll;
   198f8:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   198fa:	f001 fa09 	bl	1ad10 <radio_tmr_start_get>
   198fe:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   19900:	f001 fa62 	bl	1adc8 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   19904:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   19906:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   19908:	4608      	mov	r0, r1
   1990a:	f001 f889 	bl	1aa20 <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1990e:	1a24      	subs	r4, r4, r0
   19910:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   19912:	2f00      	cmp	r7, #0
   19914:	d03d      	beq.n	19992 <isr_rx+0x1b6>
   19916:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1991a:	76ab      	strb	r3, [r5, #26]
			ftr->extra = ull_pdu_rx_alloc();
   1991c:	f7fa f80c 	bl	13938 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   19920:	4629      	mov	r1, r5
			ftr->extra = ull_pdu_rx_alloc();
   19922:	60e8      	str	r0, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   19924:	6828      	ldr	r0, [r5, #0]
   19926:	f7fa f81f 	bl	13968 <ull_rx_put>
		ull_rx_sched();
   1992a:	f7fa f82d 	bl	13988 <ull_rx_sched>
}
   1992e:	b004      	add	sp, #16
   19930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   19934:	fa5f f089 	uxtb.w	r0, r9
   19938:	f7fe fe86 	bl	18648 <ull_filter_lll_rl_irk_idx>
   1993c:	e77b      	b.n	19836 <isr_rx+0x5a>
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1993e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19942:	f10d 020f 	add.w	r2, sp, #15
   19946:	1cb1      	adds	r1, r6, #2
   19948:	f7fe ff0c 	bl	18764 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   1994c:	2800      	cmp	r0, #0
   1994e:	d196      	bne.n	1987e <isr_rx+0xa2>
		(((lll->filter_policy & 0x02) != 0) &&
   19950:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   19952:	079a      	lsls	r2, r3, #30
   19954:	f57f af4d 	bpl.w	197f2 <isr_rx+0x16>
   19958:	e78d      	b.n	19876 <isr_rx+0x9a>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1995a:	7873      	ldrb	r3, [r6, #1]
   1995c:	2b0c      	cmp	r3, #12
   1995e:	f47f af48 	bne.w	197f2 <isr_rx+0x16>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   19962:	782a      	ldrb	r2, [r5, #0]
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   19964:	f002 030f 	and.w	r3, r2, #15
   19968:	2b01      	cmp	r3, #1
   1996a:	f43f af42 	beq.w	197f2 <isr_rx+0x16>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1996e:	f10d 030f 	add.w	r3, sp, #15
   19972:	9301      	str	r3, [sp, #4]
   19974:	f8cd 8000 	str.w	r8, [sp]
   19978:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1997c:	464b      	mov	r3, r9
   1997e:	4631      	mov	r1, r6
   19980:	4620      	mov	r0, r4
   19982:	f7ff fef3 	bl	1976c <lll_adv_scan_req_check>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   19986:	2800      	cmp	r0, #0
   19988:	d15f      	bne.n	19a4a <isr_rx+0x26e>
   1998a:	7830      	ldrb	r0, [r6, #0]
   1998c:	f000 020f 	and.w	r2, r0, #15
   19990:	e763      	b.n	1985a <isr_rx+0x7e>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   19992:	23ff      	movs	r3, #255	; 0xff
   19994:	e7c1      	b.n	1991a <isr_rx+0x13e>
		LL_ASSERT(!ret);
   19996:	4a4b      	ldr	r2, [pc, #300]	; (19ac4 <isr_rx+0x2e8>)
   19998:	494b      	ldr	r1, [pc, #300]	; (19ac8 <isr_rx+0x2ec>)
   1999a:	484c      	ldr	r0, [pc, #304]	; (19acc <isr_rx+0x2f0>)
   1999c:	f240 33ee 	movw	r3, #1006	; 0x3ee
   199a0:	f005 fb58 	bl	1f054 <printk>
   199a4:	4040      	eors	r0, r0
   199a6:	f380 8811 	msr	BASEPRI, r0
   199aa:	f04f 0003 	mov.w	r0, #3
   199ae:	df02      	svc	2
   199b0:	e795      	b.n	198de <isr_rx+0x102>
		LL_ASSERT(!radio_is_ready());
   199b2:	4a44      	ldr	r2, [pc, #272]	; (19ac4 <isr_rx+0x2e8>)
   199b4:	4946      	ldr	r1, [pc, #280]	; (19ad0 <isr_rx+0x2f4>)
   199b6:	4845      	ldr	r0, [pc, #276]	; (19acc <isr_rx+0x2f0>)
   199b8:	f44f 7378 	mov.w	r3, #992	; 0x3e0
   199bc:	f005 fb4a 	bl	1f054 <printk>
   199c0:	4040      	eors	r0, r0
   199c2:	f380 8811 	msr	BASEPRI, r0
   199c6:	f04f 0003 	mov.w	r0, #3
   199ca:	df02      	svc	2
   199cc:	e781      	b.n	198d2 <isr_rx+0xf6>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   199ce:	f89d 000f 	ldrb.w	r0, [sp, #15]
   199d2:	f7fe fe8b 	bl	186ec <ull_filter_lll_irk_whitelisted>
   199d6:	2800      	cmp	r0, #0
   199d8:	f47f af51 	bne.w	1987e <isr_rx+0xa2>
   199dc:	e709      	b.n	197f2 <isr_rx+0x16>
						      ci->connect_ind.init_addr,
   199de:	f106 0802 	add.w	r8, r6, #2
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   199e2:	f3c0 1080 	ubfx	r0, r0, #6, #1
   199e6:	4641      	mov	r1, r8
   199e8:	f10d 020f 	add.w	r2, sp, #15
   199ec:	f7fe feba 	bl	18764 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(adv, ci) &&
   199f0:	2800      	cmp	r0, #0
   199f2:	f43f aefe 	beq.w	197f2 <isr_rx+0x16>
	return (adv->tx_addr == ci->rx_addr) &&
   199f6:	782b      	ldrb	r3, [r5, #0]
   199f8:	7831      	ldrb	r1, [r6, #0]
   199fa:	f3c3 1280 	ubfx	r2, r3, #6, #1
   199fe:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   19a02:	f47f aef6 	bne.w	197f2 <isr_rx+0x16>
   19a06:	f003 030f 	and.w	r3, r3, #15
   19a0a:	2b01      	cmp	r3, #1
   19a0c:	f106 0a08 	add.w	sl, r6, #8
   19a10:	d04c      	beq.n	19aac <isr_rx+0x2d0>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   19a12:	4651      	mov	r1, sl
   19a14:	4648      	mov	r0, r9
   19a16:	2206      	movs	r2, #6
   19a18:	f007 fe35 	bl	21686 <memcmp>
			 BDADDR_SIZE)) ||
   19a1c:	2800      	cmp	r0, #0
   19a1e:	f47f aee8 	bne.w	197f2 <isr_rx+0x16>
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
   19a22:	f89d 000f 	ldrb.w	r0, [sp, #15]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   19a26:	28ff      	cmp	r0, #255	; 0xff
   19a28:	d02e      	beq.n	19a88 <isr_rx+0x2ac>
   19a2a:	7ba3      	ldrb	r3, [r4, #14]
   19a2c:	2bff      	cmp	r3, #255	; 0xff
   19a2e:	d02b      	beq.n	19a88 <isr_rx+0x2ac>
		return rl_idx == lll->rl_idx;
   19a30:	1ac5      	subs	r5, r0, r3
   19a32:	4268      	negs	r0, r5
   19a34:	4168      	adcs	r0, r5
   19a36:	e738      	b.n	198aa <isr_rx+0xce>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   19a38:	2206      	movs	r2, #6
   19a3a:	4629      	mov	r1, r5
   19a3c:	4648      	mov	r0, r9
   19a3e:	f007 fe22 	bl	21686 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   19a42:	2800      	cmp	r0, #0
   19a44:	f43f af33 	beq.w	198ae <isr_rx+0xd2>
   19a48:	e727      	b.n	1989a <isr_rx+0xbe>
		radio_isr_set(isr_done, lll);
   19a4a:	4621      	mov	r1, r4
   19a4c:	481b      	ldr	r0, [pc, #108]	; (19abc <isr_rx+0x2e0>)
   19a4e:	f000 fefb 	bl	1a848 <radio_isr_set>
		radio_switch_complete_and_disable();
   19a52:	f001 f877 	bl	1ab44 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   19a56:	7f23      	ldrb	r3, [r4, #28]
   19a58:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   19a5c:	6a20      	ldr	r0, [r4, #32]
   19a5e:	f000 ffd9 	bl	1aa14 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   19a62:	f001 f819 	bl	1aa98 <radio_is_ready>
   19a66:	2800      	cmp	r0, #0
   19a68:	f43f aec9 	beq.w	197fe <isr_rx+0x22>
   19a6c:	4a15      	ldr	r2, [pc, #84]	; (19ac4 <isr_rx+0x2e8>)
   19a6e:	4918      	ldr	r1, [pc, #96]	; (19ad0 <isr_rx+0x2f4>)
   19a70:	4816      	ldr	r0, [pc, #88]	; (19acc <isr_rx+0x2f0>)
   19a72:	f240 33a3 	movw	r3, #931	; 0x3a3
   19a76:	f005 faed 	bl	1f054 <printk>
   19a7a:	4040      	eors	r0, r0
   19a7c:	f380 8811 	msr	BASEPRI, r0
   19a80:	f04f 0003 	mov.w	r0, #3
   19a84:	df02      	svc	2
		if (!err) {
   19a86:	e6ba      	b.n	197fe <isr_rx+0x22>
	return (adv->rx_addr == ci->tx_addr) &&
   19a88:	7833      	ldrb	r3, [r6, #0]
   19a8a:	782a      	ldrb	r2, [r5, #0]
   19a8c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   19a90:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   19a94:	f47f aead 	bne.w	197f2 <isr_rx+0x16>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   19a98:	4641      	mov	r1, r8
   19a9a:	f105 0008 	add.w	r0, r5, #8
   19a9e:	2206      	movs	r2, #6
   19aa0:	f007 fdf1 	bl	21686 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   19aa4:	fab0 f080 	clz	r0, r0
   19aa8:	0940      	lsrs	r0, r0, #5
		       isr_rx_ci_adva_check(adv, ci) &&
   19aaa:	e6fe      	b.n	198aa <isr_rx+0xce>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   19aac:	2206      	movs	r2, #6
   19aae:	4651      	mov	r1, sl
   19ab0:	4648      	mov	r0, r9
   19ab2:	f007 fde8 	bl	21686 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   19ab6:	2800      	cmp	r0, #0
   19ab8:	d0b3      	beq.n	19a22 <isr_rx+0x246>
   19aba:	e7aa      	b.n	19a12 <isr_rx+0x236>
   19abc:	000196ad 	.word	0x000196ad
   19ac0:	000190b9 	.word	0x000190b9
   19ac4:	000260d8 	.word	0x000260d8
   19ac8:	000258a4 	.word	0x000258a4
   19acc:	0002561c 	.word	0x0002561c
   19ad0:	00026124 	.word	0x00026124

00019ad4 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   19ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19ad6:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   19ad8:	f7ff fa1a 	bl	18f10 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   19adc:	f7f9 ffc0 	bl	13a60 <ull_event_done_extra_get>
	LL_ASSERT(e);
   19ae0:	4604      	mov	r4, r0
   19ae2:	2800      	cmp	r0, #0
   19ae4:	d033      	beq.n	19b4e <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   19ae6:	4b21      	ldr	r3, [pc, #132]	; (19b6c <isr_done+0x98>)
	e->crc_valid = crc_valid;
   19ae8:	4921      	ldr	r1, [pc, #132]	; (19b70 <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   19aea:	4a22      	ldr	r2, [pc, #136]	; (19b74 <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   19aec:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   19aee:	7808      	ldrb	r0, [r1, #0]
	e->mic_state = mic_state;
   19af0:	7811      	ldrb	r1, [r2, #0]
	e->trx_cnt = trx_cnt;
   19af2:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   19af4:	2201      	movs	r2, #1
	e->crc_valid = crc_valid;
   19af6:	71a0      	strb	r0, [r4, #6]
	e->mic_state = mic_state;
   19af8:	71e1      	strb	r1, [r4, #7]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   19afa:	7022      	strb	r2, [r4, #0]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   19afc:	b11b      	cbz	r3, 19b06 <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   19afe:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   19b02:	2b00      	cmp	r3, #0
   19b04:	db04      	blt.n	19b10 <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   19b06:	4628      	mov	r0, r5
}
   19b08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   19b0c:	f7ff ba0e 	b.w	18f2c <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   19b10:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   19b14:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   19b18:	2b02      	cmp	r3, #2
   19b1a:	d016      	beq.n	19b4a <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   19b1c:	2b04      	cmp	r3, #4
   19b1e:	bf14      	ite	ne
   19b20:	2728      	movne	r7, #40	; 0x28
   19b22:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   19b26:	f001 f93b 	bl	1ada0 <radio_tmr_aa_restore>
   19b2a:	4606      	mov	r6, r0
   19b2c:	f001 f93e 	bl	1adac <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   19b30:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   19b32:	1a36      	subs	r6, r6, r0
			lll->slave.window_widening_event_us = 0;
   19b34:	2300      	movs	r3, #0
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   19b36:	e9c4 2703 	strd	r2, r7, [r4, #12]
			e->drift.start_to_address_actual_us =
   19b3a:	60a6      	str	r6, [r4, #8]
	lll_isr_cleanup(param);
   19b3c:	4628      	mov	r0, r5
			lll->slave.window_widening_event_us = 0;
   19b3e:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   19b40:	63eb      	str	r3, [r5, #60]	; 0x3c
}
   19b42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   19b46:	f7ff b9f1 	b.w	18f2c <lll_isr_cleanup>
	switch (phy) {
   19b4a:	2718      	movs	r7, #24
   19b4c:	e7eb      	b.n	19b26 <isr_done+0x52>
	LL_ASSERT(e);
   19b4e:	4a0a      	ldr	r2, [pc, #40]	; (19b78 <isr_done+0xa4>)
   19b50:	490a      	ldr	r1, [pc, #40]	; (19b7c <isr_done+0xa8>)
   19b52:	480b      	ldr	r0, [pc, #44]	; (19b80 <isr_done+0xac>)
   19b54:	f240 236d 	movw	r3, #621	; 0x26d
   19b58:	f005 fa7c 	bl	1f054 <printk>
   19b5c:	4040      	eors	r0, r0
   19b5e:	f380 8811 	msr	BASEPRI, r0
   19b62:	f04f 0003 	mov.w	r0, #3
   19b66:	df02      	svc	2
   19b68:	e7bd      	b.n	19ae6 <isr_done+0x12>
   19b6a:	bf00      	nop
   19b6c:	200042b0 	.word	0x200042b0
   19b70:	20006844 	.word	0x20006844
   19b74:	20006845 	.word	0x20006845
   19b78:	00026160 	.word	0x00026160
   19b7c:	00025a18 	.word	0x00025a18
   19b80:	0002561c 	.word	0x0002561c

00019b84 <lll_conn_init>:
{
   19b84:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   19b86:	f000 ffbb 	bl	1ab00 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   19b8a:	7803      	ldrb	r3, [r0, #0]
   19b8c:	2201      	movs	r2, #1
   19b8e:	f362 0301 	bfi	r3, r2, #0, #2
   19b92:	7003      	strb	r3, [r0, #0]
}
   19b94:	2000      	movs	r0, #0
   19b96:	bd08      	pop	{r3, pc}

00019b98 <lll_conn_reset>:
}
   19b98:	2000      	movs	r0, #0
   19b9a:	4770      	bx	lr

00019b9c <lll_conn_flush>:
}
   19b9c:	4770      	bx	lr
   19b9e:	bf00      	nop

00019ba0 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   19ba0:	4805      	ldr	r0, [pc, #20]	; (19bb8 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   19ba2:	4906      	ldr	r1, [pc, #24]	; (19bbc <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   19ba4:	4a06      	ldr	r2, [pc, #24]	; (19bc0 <lll_conn_prepare_reset+0x20>)
{
   19ba6:	b410      	push	{r4}
	trx_cnt = 0U;
   19ba8:	2300      	movs	r3, #0
   19baa:	4c06      	ldr	r4, [pc, #24]	; (19bc4 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   19bac:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   19bae:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   19bb0:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   19bb2:	8023      	strh	r3, [r4, #0]
}
   19bb4:	bc10      	pop	{r4}
   19bb6:	4770      	bx	lr
   19bb8:	20006844 	.word	0x20006844
   19bbc:	20006843 	.word	0x20006843
   19bc0:	20006845 	.word	0x20006845
   19bc4:	200042b0 	.word	0x200042b0

00019bc8 <lll_conn_abort_cb>:
{
   19bc8:	b510      	push	{r4, lr}
	if (!prepare_param) {
   19bca:	b1d0      	cbz	r0, 19c02 <lll_conn_abort_cb+0x3a>
	err = lll_hfclock_off();
   19bcc:	460c      	mov	r4, r1
   19bce:	f7ff fa4d 	bl	1906c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   19bd2:	2800      	cmp	r0, #0
   19bd4:	db04      	blt.n	19be0 <lll_conn_abort_cb+0x18>
	lll_done(param);
   19bd6:	4620      	mov	r0, r4
}
   19bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   19bdc:	f7ff b8ca 	b.w	18d74 <lll_done>
	LL_ASSERT(err >= 0);
   19be0:	4a0b      	ldr	r2, [pc, #44]	; (19c10 <lll_conn_abort_cb+0x48>)
   19be2:	490c      	ldr	r1, [pc, #48]	; (19c14 <lll_conn_abort_cb+0x4c>)
   19be4:	480c      	ldr	r0, [pc, #48]	; (19c18 <lll_conn_abort_cb+0x50>)
   19be6:	239b      	movs	r3, #155	; 0x9b
   19be8:	f005 fa34 	bl	1f054 <printk>
   19bec:	4040      	eors	r0, r0
   19bee:	f380 8811 	msr	BASEPRI, r0
   19bf2:	f04f 0003 	mov.w	r0, #3
   19bf6:	df02      	svc	2
	lll_done(param);
   19bf8:	4620      	mov	r0, r4
}
   19bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   19bfe:	f7ff b8b9 	b.w	18d74 <lll_done>
		radio_isr_set(isr_done, param);
   19c02:	4806      	ldr	r0, [pc, #24]	; (19c1c <lll_conn_abort_cb+0x54>)
   19c04:	f000 fe20 	bl	1a848 <radio_isr_set>
}
   19c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   19c0c:	f000 bf20 	b.w	1aa50 <radio_disable>
   19c10:	00026160 	.word	0x00026160
   19c14:	0002609c 	.word	0x0002609c
   19c18:	0002561c 	.word	0x0002561c
   19c1c:	00019ad5 	.word	0x00019ad5

00019c20 <lll_conn_rx_pkt_set>:
{
   19c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c22:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   19c24:	2001      	movs	r0, #1
   19c26:	f7f9 fe69 	bl	138fc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   19c2a:	4604      	mov	r4, r0
   19c2c:	b350      	cbz	r0, 19c84 <lll_conn_rx_pkt_set+0x64>
	phy = lll->phy_rx;
   19c2e:	f895 6049 	ldrb.w	r6, [r5, #73]	; 0x49
	max_rx_octets = lll->max_rx_octets;
   19c32:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
	phy = lll->phy_rx;
   19c36:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   19c3a:	4630      	mov	r0, r6
   19c3c:	2100      	movs	r1, #0
   19c3e:	f000 fe49 	bl	1a8d4 <radio_phy_set>
	} else if (lll->enc_rx) {
   19c42:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   19c46:	0072      	lsls	r2, r6, #1
   19c48:	071b      	lsls	r3, r3, #28
   19c4a:	f104 041c 	add.w	r4, r4, #28
   19c4e:	f042 0201 	orr.w	r2, r2, #1
   19c52:	d50e      	bpl.n	19c72 <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   19c54:	1d39      	adds	r1, r7, #4
   19c56:	b2c9      	uxtb	r1, r1
   19c58:	2008      	movs	r0, #8
   19c5a:	f000 fe9f 	bl	1a99c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   19c5e:	4622      	mov	r2, r4
   19c60:	4631      	mov	r1, r6
   19c62:	f105 0063 	add.w	r0, r5, #99	; 0x63
   19c66:	f001 f8bb 	bl	1ade0 <radio_ccm_rx_pkt_set>
}
   19c6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   19c6e:	f000 becb 	b.w	1aa08 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   19c72:	b2f9      	uxtb	r1, r7
   19c74:	2008      	movs	r0, #8
   19c76:	f000 fe91 	bl	1a99c <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   19c7a:	4620      	mov	r0, r4
}
   19c7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   19c80:	f000 bec2 	b.w	1aa08 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   19c84:	4a06      	ldr	r2, [pc, #24]	; (19ca0 <lll_conn_rx_pkt_set+0x80>)
   19c86:	4907      	ldr	r1, [pc, #28]	; (19ca4 <lll_conn_rx_pkt_set+0x84>)
   19c88:	4807      	ldr	r0, [pc, #28]	; (19ca8 <lll_conn_rx_pkt_set+0x88>)
   19c8a:	f240 13d5 	movw	r3, #469	; 0x1d5
   19c8e:	f005 f9e1 	bl	1f054 <printk>
   19c92:	4040      	eors	r0, r0
   19c94:	f380 8811 	msr	BASEPRI, r0
   19c98:	f04f 0003 	mov.w	r0, #3
   19c9c:	df02      	svc	2
   19c9e:	e7c6      	b.n	19c2e <lll_conn_rx_pkt_set+0xe>
   19ca0:	00026160 	.word	0x00026160
   19ca4:	000261ac 	.word	0x000261ac
   19ca8:	0002561c 	.word	0x0002561c

00019cac <lll_conn_isr_tx>:
{
   19cac:	b538      	push	{r3, r4, r5, lr}
   19cae:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   19cb0:	f7ff f91c 	bl	18eec <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   19cb4:	2096      	movs	r0, #150	; 0x96
   19cb6:	f000 ffb3 	bl	1ac20 <radio_tmr_tifs_set>
				     lll->phy_flags);
   19cba:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   19cbe:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   19cc2:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   19cc6:	f000 0007 	and.w	r0, r0, #7
   19cca:	f002 0207 	and.w	r2, r2, #7
   19cce:	2100      	movs	r1, #0
   19cd0:	f000 ff2c 	bl	1ab2c <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   19cd4:	4620      	mov	r0, r4
   19cd6:	f7ff ffa3 	bl	19c20 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   19cda:	f000 fedd 	bl	1aa98 <radio_is_ready>
   19cde:	bb58      	cbnz	r0, 19d38 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   19ce0:	f001 f878 	bl	1add4 <radio_tmr_tifs_base_get>
   19ce4:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   19ce6:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   19cea:	2101      	movs	r1, #1
   19cec:	f000 0007 	and.w	r0, r0, #7
   19cf0:	f000 fe9a 	bl	1aa28 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   19cf4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   19cf8:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   19cfc:	4405      	add	r5, r0
   19cfe:	2b02      	cmp	r3, #2
   19d00:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   19d04:	d016      	beq.n	19d34 <lll_conn_isr_tx+0x88>
		return 376;
   19d06:	2b04      	cmp	r3, #4
   19d08:	bf14      	ite	ne
   19d0a:	2328      	movne	r3, #40	; 0x28
   19d0c:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   19d10:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   19d14:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   19d18:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   19d1c:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   19d1e:	f000 fe7f 	bl	1aa20 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   19d22:	1a28      	subs	r0, r5, r0
   19d24:	f001 f80e 	bl	1ad44 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   19d28:	4621      	mov	r1, r4
   19d2a:	480a      	ldr	r0, [pc, #40]	; (19d54 <lll_conn_isr_tx+0xa8>)
}
   19d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   19d30:	f000 bd8a 	b.w	1a848 <radio_isr_set>
	switch (phy) {
   19d34:	2318      	movs	r3, #24
   19d36:	e7eb      	b.n	19d10 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   19d38:	4a07      	ldr	r2, [pc, #28]	; (19d58 <lll_conn_isr_tx+0xac>)
   19d3a:	4908      	ldr	r1, [pc, #32]	; (19d5c <lll_conn_isr_tx+0xb0>)
   19d3c:	4808      	ldr	r0, [pc, #32]	; (19d60 <lll_conn_isr_tx+0xb4>)
   19d3e:	f240 13a1 	movw	r3, #417	; 0x1a1
   19d42:	f005 f987 	bl	1f054 <printk>
   19d46:	4040      	eors	r0, r0
   19d48:	f380 8811 	msr	BASEPRI, r0
   19d4c:	f04f 0003 	mov.w	r0, #3
   19d50:	df02      	svc	2
   19d52:	e7c5      	b.n	19ce0 <lll_conn_isr_tx+0x34>
   19d54:	00019e9d 	.word	0x00019e9d
   19d58:	00026160 	.word	0x00026160
   19d5c:	00026124 	.word	0x00026124
   19d60:	0002561c 	.word	0x0002561c

00019d64 <lll_conn_tx_pkt_set>:
{
   19d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d66:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   19d68:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	max_tx_octets = lll->max_tx_octets;
   19d6c:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
	phy = lll->phy_tx;
   19d70:	f001 0407 	and.w	r4, r1, #7
{
   19d74:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   19d76:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   19d7a:	4620      	mov	r0, r4
   19d7c:	f000 fdaa 	bl	1a8d4 <radio_phy_set>
	} else if (lll->enc_tx) {
   19d80:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   19d84:	0062      	lsls	r2, r4, #1
   19d86:	06db      	lsls	r3, r3, #27
   19d88:	f042 0201 	orr.w	r2, r2, #1
   19d8c:	b2f1      	uxtb	r1, r6
   19d8e:	d50d      	bpl.n	19dac <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   19d90:	3104      	adds	r1, #4
   19d92:	b2c9      	uxtb	r1, r1
   19d94:	2008      	movs	r0, #8
   19d96:	f000 fe01 	bl	1a99c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   19d9a:	4639      	mov	r1, r7
   19d9c:	f105 0084 	add.w	r0, r5, #132	; 0x84
   19da0:	f001 f876 	bl	1ae90 <radio_ccm_tx_pkt_set>
}
   19da4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   19da8:	f000 be34 	b.w	1aa14 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   19dac:	2008      	movs	r0, #8
   19dae:	f000 fdf5 	bl	1a99c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   19db2:	4638      	mov	r0, r7
}
   19db4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   19db8:	f000 be2c 	b.w	1aa14 <radio_pkt_tx_set>

00019dbc <lll_conn_pdu_tx_prep>:
{
   19dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19dc0:	4604      	mov	r4, r0
   19dc2:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   19dc4:	aa01      	add	r2, sp, #4
   19dc6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
   19dc8:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   19dca:	6d21      	ldr	r1, [r4, #80]	; 0x50
   19dcc:	f7f5 fdae 	bl	f92c <memq_peek>
	if (lll->empty || !link) {
   19dd0:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   19dd4:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   19dd6:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   19dd8:	d432      	bmi.n	19e40 <lll_conn_pdu_tx_prep+0x84>
   19dda:	2800      	cmp	r0, #0
   19ddc:	d04e      	beq.n	19e7c <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   19dde:	9a01      	ldr	r2, [sp, #4]
   19de0:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
		if (!lll->packet_tx_head_len) {
   19de4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   19de8:	f102 0804 	add.w	r8, r2, #4
   19dec:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   19df0:	b913      	cbnz	r3, 19df8 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   19df2:	786b      	ldrb	r3, [r5, #1]
   19df4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (lll->packet_tx_head_offset) {
   19df8:	b137      	cbz	r7, 19e08 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   19dfa:	f818 2007 	ldrb.w	r2, [r8, r7]
   19dfe:	2101      	movs	r1, #1
   19e00:	f361 0201 	bfi	r2, r1, #0, #2
   19e04:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   19e08:	1bdb      	subs	r3, r3, r7
   19e0a:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   19e0c:	4620      	mov	r0, r4
   19e0e:	f7fd fba9 	bl	17564 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   19e12:	786b      	ldrb	r3, [r5, #1]
   19e14:	4283      	cmp	r3, r0
   19e16:	d924      	bls.n	19e62 <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   19e18:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   19e1a:	f818 3007 	ldrb.w	r3, [r8, r7]
   19e1e:	f043 0310 	orr.w	r3, r3, #16
   19e22:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   19e26:	f818 3007 	ldrb.w	r3, [r8, r7]
		p->resv = 0U;
   19e2a:	2200      	movs	r2, #0
		p->rfu = 0U;
   19e2c:	f36f 1347 	bfc	r3, #5, #3
   19e30:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   19e34:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   19e36:	f8c9 5000 	str.w	r5, [r9]
}
   19e3a:	b003      	add	sp, #12
   19e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   19e40:	f043 0304 	orr.w	r3, r3, #4
   19e44:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   19e48:	f000 fe5a 	bl	1ab00 <radio_pkt_empty_get>
   19e4c:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   19e4e:	b1e6      	cbz	r6, 19e8a <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   19e50:	7803      	ldrb	r3, [r0, #0]
   19e52:	f043 0310 	orr.w	r3, r3, #16
   19e56:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   19e58:	f8c9 5000 	str.w	r5, [r9]
}
   19e5c:	b003      	add	sp, #12
   19e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   19e62:	6d23      	ldr	r3, [r4, #80]	; 0x50
   19e64:	6832      	ldr	r2, [r6, #0]
   19e66:	429a      	cmp	r2, r3
			p->md = 1U;
   19e68:	f818 3007 	ldrb.w	r3, [r8, r7]
   19e6c:	bf14      	ite	ne
   19e6e:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   19e72:	f36f 1304 	bfceq	r3, #4, #1
   19e76:	f808 3007 	strb.w	r3, [r8, r7]
   19e7a:	e7d4      	b.n	19e26 <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   19e7c:	f043 0304 	orr.w	r3, r3, #4
   19e80:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   19e84:	f000 fe3c 	bl	1ab00 <radio_pkt_empty_get>
   19e88:	4605      	mov	r5, r0
			p->md = 0U;
   19e8a:	782b      	ldrb	r3, [r5, #0]
   19e8c:	f36f 1304 	bfc	r3, #4, #1
   19e90:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   19e92:	f8c9 5000 	str.w	r5, [r9]
}
   19e96:	b003      	add	sp, #12
   19e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00019e9c <lll_conn_isr_rx>:
{
   19e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e9e:	b083      	sub	sp, #12
   19ea0:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   19ea2:	f000 fe03 	bl	1aaac <radio_is_done>
	if (trx_done) {
   19ea6:	f010 0fff 	tst.w	r0, #255	; 0xff
   19eaa:	d109      	bne.n	19ec0 <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   19eac:	f7ff f826 	bl	18efc <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   19eb0:	48ac      	ldr	r0, [pc, #688]	; (1a164 <lll_conn_isr_rx+0x2c8>)
   19eb2:	4621      	mov	r1, r4
   19eb4:	f000 fcc8 	bl	1a848 <radio_isr_set>
		radio_disable();
   19eb8:	f000 fdca 	bl	1aa50 <radio_disable>
}
   19ebc:	b003      	add	sp, #12
   19ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		crc_ok = radio_crc_is_valid();
   19ec0:	f000 fe14 	bl	1aaec <radio_crc_is_valid>
   19ec4:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   19ec6:	f000 fe53 	bl	1ab70 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   19eca:	f7ff f817 	bl	18efc <lll_isr_rx_status_reset>
	trx_cnt++;
   19ece:	4aa6      	ldr	r2, [pc, #664]	; (1a168 <lll_conn_isr_rx+0x2cc>)
   19ed0:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   19ed2:	2001      	movs	r0, #1
	trx_cnt++;
   19ed4:	4403      	add	r3, r0
   19ed6:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   19ed8:	f7f9 fd10 	bl	138fc <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   19edc:	4606      	mov	r6, r0
   19ede:	2800      	cmp	r0, #0
   19ee0:	f000 80b6 	beq.w	1a050 <lll_conn_isr_rx+0x1b4>
	if (crc_ok) {
   19ee4:	2d00      	cmp	r5, #0
   19ee6:	d155      	bne.n	19f94 <lll_conn_isr_rx+0xf8>
		if (crc_expire == 0U) {
   19ee8:	4ba0      	ldr	r3, [pc, #640]	; (1a16c <lll_conn_isr_rx+0x2d0>)
   19eea:	781f      	ldrb	r7, [r3, #0]
   19eec:	2f00      	cmp	r7, #0
   19eee:	f040 809e 	bne.w	1a02e <lll_conn_isr_rx+0x192>
		crc_expire--;
   19ef2:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   19ef4:	a901      	add	r1, sp, #4
   19ef6:	4620      	mov	r0, r4
		crc_expire--;
   19ef8:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   19efa:	f7ff ff5f 	bl	19dbc <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   19efe:	2096      	movs	r0, #150	; 0x96
   19f00:	f000 fe8e 	bl	1ac20 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   19f04:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   19f08:	f000 0007 	and.w	r0, r0, #7
   19f0c:	f000 fe00 	bl	1ab10 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   19f10:	4897      	ldr	r0, [pc, #604]	; (1a170 <lll_conn_isr_rx+0x2d4>)
   19f12:	4621      	mov	r1, r4
   19f14:	f000 fc98 	bl	1a848 <radio_isr_set>
		radio_tmr_end_capture();
   19f18:	f000 ff4e 	bl	1adb8 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   19f1c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   19f20:	9901      	ldr	r1, [sp, #4]
	pdu_data_tx->nesn = lll->nesn;
   19f22:	f3c2 0340 	ubfx	r3, r2, #1, #1
   19f26:	7808      	ldrb	r0, [r1, #0]
	pdu_data_tx->sn = lll->sn;
   19f28:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   19f2c:	009b      	lsls	r3, r3, #2
   19f2e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   19f32:	f020 020c 	bic.w	r2, r0, #12
   19f36:	4313      	orrs	r3, r2
   19f38:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   19f3a:	4620      	mov	r0, r4
   19f3c:	f7ff ff12 	bl	19d64 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   19f40:	f000 fdaa 	bl	1aa98 <radio_is_ready>
   19f44:	2800      	cmp	r0, #0
   19f46:	f040 80b2 	bne.w	1a0ae <lll_conn_isr_rx+0x212>
	if (!radio_tmr_aa_restore()) {
   19f4a:	f000 ff29 	bl	1ada0 <radio_tmr_aa_restore>
   19f4e:	b170      	cbz	r0, 19f6e <lll_conn_isr_rx+0xd2>
	if (tx_release) {
   19f50:	b19d      	cbz	r5, 19f7a <lll_conn_isr_rx+0xde>
		LL_ASSERT(lll->handle != 0xFFFF);
   19f52:	8a20      	ldrh	r0, [r4, #16]
   19f54:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19f58:	4298      	cmp	r0, r3
   19f5a:	f000 80c1 	beq.w	1a0e0 <lll_conn_isr_rx+0x244>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   19f5e:	4629      	mov	r1, r5
   19f60:	f7fd f91c 	bl	1719c <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   19f64:	b95f      	cbnz	r7, 19f7e <lll_conn_isr_rx+0xe2>
		ull_rx_sched();
   19f66:	f7f9 fd0f 	bl	13988 <ull_rx_sched>
}
   19f6a:	b003      	add	sp, #12
   19f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   19f6e:	f000 ff0b 	bl	1ad88 <radio_tmr_aa_get>
   19f72:	f000 ff0f 	bl	1ad94 <radio_tmr_aa_save>
	if (tx_release) {
   19f76:	2d00      	cmp	r5, #0
   19f78:	d1eb      	bne.n	19f52 <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   19f7a:	2f00      	cmp	r7, #0
   19f7c:	d09e      	beq.n	19ebc <lll_conn_isr_rx+0x20>
		ull_pdu_rx_alloc();
   19f7e:	f7f9 fcdb 	bl	13938 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   19f82:	2302      	movs	r3, #2
   19f84:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   19f86:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   19f88:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   19f8a:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   19f8c:	4631      	mov	r1, r6
   19f8e:	f7f9 fceb 	bl	13968 <ull_rx_put>
	if (is_ull_rx) {
   19f92:	e7e8      	b.n	19f66 <lll_conn_isr_rx+0xca>
	if (pdu_data_rx->nesn != lll->sn) {
   19f94:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   19f98:	7f32      	ldrb	r2, [r6, #28]
   19f9a:	f003 0101 	and.w	r1, r3, #1
   19f9e:	f3c2 0080 	ubfx	r0, r2, #2, #1
   19fa2:	4288      	cmp	r0, r1
   19fa4:	d064      	beq.n	1a070 <lll_conn_isr_rx+0x1d4>
		if (lll->role) {
   19fa6:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
		lll->sn++;
   19faa:	f081 0101 	eor.w	r1, r1, #1
   19fae:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   19fb2:	2a00      	cmp	r2, #0
		lll->sn++;
   19fb4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (lll->role) {
   19fb8:	da05      	bge.n	19fc6 <lll_conn_isr_rx+0x12a>
			lll->slave.latency_enabled = 1;
   19fba:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   19fbe:	f043 0301 	orr.w	r3, r3, #1
   19fc2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		if (!lll->empty) {
   19fc6:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   19fca:	075f      	lsls	r7, r3, #29
   19fcc:	d47d      	bmi.n	1a0ca <lll_conn_isr_rx+0x22e>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   19fce:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   19fd2:	aa01      	add	r2, sp, #4
   19fd4:	f7f5 fcaa 	bl	f92c <memq_peek>
		if (link) {
   19fd8:	4607      	mov	r7, r0
   19fda:	2800      	cmp	r0, #0
   19fdc:	d07b      	beq.n	1a0d6 <lll_conn_isr_rx+0x23a>
					       lll->packet_tx_head_offset);
   19fde:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
			pdu_data_tx_len = pdu_data_tx->len;
   19fe2:	9b01      	ldr	r3, [sp, #4]
   19fe4:	4413      	add	r3, r2
   19fe6:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   19fe8:	b151      	cbz	r1, 1a000 <lll_conn_isr_rx+0x164>
				if (lll->enc_tx) {
   19fea:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   19fee:	06dd      	lsls	r5, r3, #27
   19ff0:	d506      	bpl.n	1a000 <lll_conn_isr_rx+0x164>
					lll->ccm_tx.counter++;
   19ff2:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   19ff6:	3301      	adds	r3, #1
   19ff8:	f140 0000 	adc.w	r0, r0, #0
   19ffc:	e9c4 3025 	strd	r3, r0, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   1a000:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1a004:	440a      	add	r2, r1
   1a006:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1a008:	429a      	cmp	r2, r3
   1a00a:	d378      	bcc.n	1a0fe <lll_conn_isr_rx+0x262>
			} else if (offset == lll->packet_tx_head_len) {
   1a00c:	d163      	bne.n	1a0d6 <lll_conn_isr_rx+0x23a>
				lll->packet_tx_head_len = 0;
   1a00e:	2200      	movs	r2, #0
   1a010:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				memq_dequeue(lll->memq_tx.tail,
   1a014:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1a016:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1a01a:	f7f5 fc8f 	bl	f93c <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1a01e:	9d01      	ldr	r5, [sp, #4]
   1a020:	7f32      	ldrb	r2, [r6, #28]
   1a022:	682b      	ldr	r3, [r5, #0]
   1a024:	603b      	str	r3, [r7, #0]
				tx->next = link;
   1a026:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1a02a:	602f      	str	r7, [r5, #0]
				*tx_release = tx;
   1a02c:	e021      	b.n	1a072 <lll_conn_isr_rx+0x1d6>
		crc_expire--;
   1a02e:	3f01      	subs	r7, #1
   1a030:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a032:	a901      	add	r1, sp, #4
   1a034:	4620      	mov	r0, r4
		crc_expire--;
   1a036:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a038:	f7ff fec0 	bl	19dbc <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1a03c:	2f00      	cmp	r7, #0
   1a03e:	f040 80dc 	bne.w	1a1fa <lll_conn_isr_rx+0x35e>
		radio_isr_set(isr_done, param);
   1a042:	4848      	ldr	r0, [pc, #288]	; (1a164 <lll_conn_isr_rx+0x2c8>)
   1a044:	4621      	mov	r1, r4
   1a046:	f000 fbff 	bl	1a848 <radio_isr_set>
			radio_switch_complete_and_disable();
   1a04a:	f000 fd7b 	bl	1ab44 <radio_switch_complete_and_disable>
   1a04e:	e765      	b.n	19f1c <lll_conn_isr_rx+0x80>
	LL_ASSERT(node_rx);
   1a050:	4a48      	ldr	r2, [pc, #288]	; (1a174 <lll_conn_isr_rx+0x2d8>)
   1a052:	4949      	ldr	r1, [pc, #292]	; (1a178 <lll_conn_isr_rx+0x2dc>)
   1a054:	4849      	ldr	r0, [pc, #292]	; (1a17c <lll_conn_isr_rx+0x2e0>)
   1a056:	23d0      	movs	r3, #208	; 0xd0
   1a058:	f004 fffc 	bl	1f054 <printk>
   1a05c:	4040      	eors	r0, r0
   1a05e:	f380 8811 	msr	BASEPRI, r0
   1a062:	f04f 0003 	mov.w	r0, #3
   1a066:	df02      	svc	2
	if (crc_ok) {
   1a068:	2d00      	cmp	r5, #0
   1a06a:	f43f af3d 	beq.w	19ee8 <lll_conn_isr_rx+0x4c>
   1a06e:	e791      	b.n	19f94 <lll_conn_isr_rx+0xf8>
	tx_release = NULL;
   1a070:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   1a072:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1a076:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1a07a:	429a      	cmp	r2, r3
   1a07c:	d046      	beq.n	1a10c <lll_conn_isr_rx+0x270>
	is_rx_enqueue = 0U;
   1a07e:	2700      	movs	r7, #0
		crc_expire = 0U;
   1a080:	4a3a      	ldr	r2, [pc, #232]	; (1a16c <lll_conn_isr_rx+0x2d0>)
		crc_valid = 1U;
   1a082:	4b3f      	ldr	r3, [pc, #252]	; (1a180 <lll_conn_isr_rx+0x2e4>)
		crc_expire = 0U;
   1a084:	2100      	movs	r1, #0
   1a086:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a088:	4620      	mov	r0, r4
		crc_valid = 1U;
   1a08a:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a08c:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1a08e:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1a090:	f7ff fe94 	bl	19dbc <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1a094:	7f33      	ldrb	r3, [r6, #28]
   1a096:	06d9      	lsls	r1, r3, #27
   1a098:	f53f af31 	bmi.w	19efe <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   1a09c:	9b01      	ldr	r3, [sp, #4]
   1a09e:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1a0a0:	06d2      	lsls	r2, r2, #27
   1a0a2:	f53f af2c 	bmi.w	19efe <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   1a0a6:	785b      	ldrb	r3, [r3, #1]
   1a0a8:	2b00      	cmp	r3, #0
   1a0aa:	d0ca      	beq.n	1a042 <lll_conn_isr_rx+0x1a6>
   1a0ac:	e727      	b.n	19efe <lll_conn_isr_rx+0x62>
	LL_ASSERT(!radio_is_ready());
   1a0ae:	4a31      	ldr	r2, [pc, #196]	; (1a174 <lll_conn_isr_rx+0x2d8>)
   1a0b0:	4934      	ldr	r1, [pc, #208]	; (1a184 <lll_conn_isr_rx+0x2e8>)
   1a0b2:	4832      	ldr	r0, [pc, #200]	; (1a17c <lll_conn_isr_rx+0x2e0>)
   1a0b4:	f44f 739e 	mov.w	r3, #316	; 0x13c
   1a0b8:	f004 ffcc 	bl	1f054 <printk>
   1a0bc:	4040      	eors	r0, r0
   1a0be:	f380 8811 	msr	BASEPRI, r0
   1a0c2:	f04f 0003 	mov.w	r0, #3
   1a0c6:	df02      	svc	2
   1a0c8:	e73f      	b.n	19f4a <lll_conn_isr_rx+0xae>
			lll->empty = 0;
   1a0ca:	f36f 0382 	bfc	r3, #2, #1
   1a0ce:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1a0d2:	f000 fd15 	bl	1ab00 <radio_pkt_empty_get>
		if (link) {
   1a0d6:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1a0da:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   1a0dc:	2500      	movs	r5, #0
   1a0de:	e7c8      	b.n	1a072 <lll_conn_isr_rx+0x1d6>
		LL_ASSERT(lll->handle != 0xFFFF);
   1a0e0:	4a24      	ldr	r2, [pc, #144]	; (1a174 <lll_conn_isr_rx+0x2d8>)
   1a0e2:	4929      	ldr	r1, [pc, #164]	; (1a188 <lll_conn_isr_rx+0x2ec>)
   1a0e4:	4825      	ldr	r0, [pc, #148]	; (1a17c <lll_conn_isr_rx+0x2e0>)
   1a0e6:	f240 134b 	movw	r3, #331	; 0x14b
   1a0ea:	f004 ffb3 	bl	1f054 <printk>
   1a0ee:	4040      	eors	r0, r0
   1a0f0:	f380 8811 	msr	BASEPRI, r0
   1a0f4:	f04f 0003 	mov.w	r0, #3
   1a0f8:	df02      	svc	2
   1a0fa:	8a20      	ldrh	r0, [r4, #16]
   1a0fc:	e72f      	b.n	19f5e <lll_conn_isr_rx+0xc2>
				lll->packet_tx_head_offset = offset;
   1a0fe:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
   1a102:	7f32      	ldrb	r2, [r6, #28]
   1a104:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
	tx_release = NULL;
   1a108:	2500      	movs	r5, #0
   1a10a:	e7b2      	b.n	1a072 <lll_conn_isr_rx+0x1d6>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1a10c:	2003      	movs	r0, #3
   1a10e:	f7f9 fbf5 	bl	138fc <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1a112:	2800      	cmp	r0, #0
   1a114:	d0b3      	beq.n	1a07e <lll_conn_isr_rx+0x1e2>
		lll->nesn++;
   1a116:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1a11a:	f083 0302 	eor.w	r3, r3, #2
   1a11e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (pdu_data_rx->len != 0) {
   1a122:	7f73      	ldrb	r3, [r6, #29]
   1a124:	2b00      	cmp	r3, #0
   1a126:	d0aa      	beq.n	1a07e <lll_conn_isr_rx+0x1e2>
			if (lll->enc_rx) {
   1a128:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1a12c:	0718      	lsls	r0, r3, #28
   1a12e:	d401      	bmi.n	1a134 <lll_conn_isr_rx+0x298>
			*is_rx_enqueue = 1U;
   1a130:	2701      	movs	r7, #1
   1a132:	e7a5      	b.n	1a080 <lll_conn_isr_rx+0x1e4>
				done = radio_ccm_is_done();
   1a134:	f000 fed6 	bl	1aee4 <radio_ccm_is_done>
				LL_ASSERT(done);
   1a138:	2800      	cmp	r0, #0
   1a13a:	d050      	beq.n	1a1de <lll_conn_isr_rx+0x342>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1a13c:	f000 fef4 	bl	1af28 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1a140:	2800      	cmp	r0, #0
   1a142:	d13c      	bne.n	1a1be <lll_conn_isr_rx+0x322>
				    lll->ccm_rx.counter == 0 &&
   1a144:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   1a148:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
				if (mic_failure &&
   1a14c:	4313      	orrs	r3, r2
   1a14e:	d104      	bne.n	1a15a <lll_conn_isr_rx+0x2be>
				    (pdu_data_rx->ll_id ==
   1a150:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   1a152:	f003 0303 	and.w	r3, r3, #3
   1a156:	2b03      	cmp	r3, #3
   1a158:	d01a      	beq.n	1a190 <lll_conn_isr_rx+0x2f4>
					mic_state = LLL_CONN_MIC_FAIL;
   1a15a:	4b0c      	ldr	r3, [pc, #48]	; (1a18c <lll_conn_isr_rx+0x2f0>)
   1a15c:	2202      	movs	r2, #2
   1a15e:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   1a160:	2700      	movs	r7, #0
   1a162:	e6f2      	b.n	19f4a <lll_conn_isr_rx+0xae>
   1a164:	00019ad5 	.word	0x00019ad5
   1a168:	200042b0 	.word	0x200042b0
   1a16c:	20006843 	.word	0x20006843
   1a170:	00019cad 	.word	0x00019cad
   1a174:	00026160 	.word	0x00026160
   1a178:	000261ac 	.word	0x000261ac
   1a17c:	0002561c 	.word	0x0002561c
   1a180:	20006844 	.word	0x20006844
   1a184:	00026124 	.word	0x00026124
   1a188:	000261bc 	.word	0x000261bc
   1a18c:	20006845 	.word	0x20006845
						radio_pkt_scratch_get();
   1a190:	f000 fcba 	bl	1ab08 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1a194:	7842      	ldrb	r2, [r0, #1]
   1a196:	2a1b      	cmp	r2, #27
						radio_pkt_scratch_get();
   1a198:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1a19a:	d8de      	bhi.n	1a15a <lll_conn_isr_rx+0x2be>
						memcpy(pdu_data_rx,
   1a19c:	3203      	adds	r2, #3
   1a19e:	f106 001c 	add.w	r0, r6, #28
   1a1a2:	f007 fa80 	bl	216a6 <memcpy>
						lll->ccm_rx.counter--;
   1a1a6:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   1a1aa:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   1a1ae:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   1a1b2:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   1a1b6:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   1a1ba:	f8c4 2077 	str.w	r2, [r4, #119]	; 0x77
				lll->ccm_rx.counter++;
   1a1be:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   1a1c2:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
				mic_state = LLL_CONN_MIC_PASS;
   1a1c6:	490e      	ldr	r1, [pc, #56]	; (1a200 <lll_conn_isr_rx+0x364>)
				lll->ccm_rx.counter++;
   1a1c8:	3301      	adds	r3, #1
						lll->ccm_rx.counter--;
   1a1ca:	f104 0073 	add.w	r0, r4, #115	; 0x73
				lll->ccm_rx.counter++;
   1a1ce:	f142 0200 	adc.w	r2, r2, #0
				mic_state = LLL_CONN_MIC_PASS;
   1a1d2:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   1a1d4:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   1a1d8:	700f      	strb	r7, [r1, #0]
				lll->ccm_rx.counter++;
   1a1da:	6042      	str	r2, [r0, #4]
		if (err) {
   1a1dc:	e750      	b.n	1a080 <lll_conn_isr_rx+0x1e4>
				LL_ASSERT(done);
   1a1de:	4a09      	ldr	r2, [pc, #36]	; (1a204 <lll_conn_isr_rx+0x368>)
   1a1e0:	4909      	ldr	r1, [pc, #36]	; (1a208 <lll_conn_isr_rx+0x36c>)
   1a1e2:	480a      	ldr	r0, [pc, #40]	; (1a20c <lll_conn_isr_rx+0x370>)
   1a1e4:	f240 330f 	movw	r3, #783	; 0x30f
   1a1e8:	f004 ff34 	bl	1f054 <printk>
   1a1ec:	4040      	eors	r0, r0
   1a1ee:	f380 8811 	msr	BASEPRI, r0
   1a1f2:	f04f 0003 	mov.w	r0, #3
   1a1f6:	df02      	svc	2
   1a1f8:	e7a0      	b.n	1a13c <lll_conn_isr_rx+0x2a0>
	is_rx_enqueue = 0U;
   1a1fa:	462f      	mov	r7, r5
   1a1fc:	e67f      	b.n	19efe <lll_conn_isr_rx+0x62>
   1a1fe:	bf00      	nop
   1a200:	20006845 	.word	0x20006845
   1a204:	00026160 	.word	0x00026160
   1a208:	000261b4 	.word	0x000261b4
   1a20c:	0002561c 	.word	0x0002561c

0001a210 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1a210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   1a214:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1a216:	8a22      	ldrh	r2, [r4, #16]
   1a218:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a21c:	429a      	cmp	r2, r3
{
   1a21e:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   1a220:	f000 80c3 	beq.w	1a3aa <prepare_cb+0x19a>
		DEBUG_RADIO_CLOSE_S(0);
		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1a224:	4605      	mov	r5, r0
   1a226:	f7ff fcbb 	bl	19ba0 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1a22a:	8ae1      	ldrh	r1, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1a22c:	8b66      	ldrh	r6, [r4, #26]
	lll->event_counter = lll->event_counter + lll->latency_prepare;

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1a22e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   1a232:	1e48      	subs	r0, r1, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1a234:	4431      	add	r1, r6
	lll->latency_prepare = 0;
   1a236:	2200      	movs	r2, #0
	lll->latency_event = lll->latency_prepare - 1;
   1a238:	b280      	uxth	r0, r0
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1a23a:	8361      	strh	r1, [r4, #26]
	if (lll->data_chan_sel) {
   1a23c:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   1a23e:	82e2      	strh	r2, [r4, #22]
	lll->latency_event = lll->latency_prepare - 1;
   1a240:	8320      	strh	r0, [r4, #24]
	if (lll->data_chan_sel) {
   1a242:	f104 021c 	add.w	r2, r4, #28
   1a246:	f100 808f 	bmi.w	1a368 <prepare_cb+0x158>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1a24a:	f003 063f 	and.w	r6, r3, #63	; 0x3f
   1a24e:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1a252:	9600      	str	r6, [sp, #0]
   1a254:	4613      	mov	r3, r2
   1a256:	4602      	mov	r2, r0
   1a258:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1a25c:	f7fd faf4 	bl	17848 <lll_chan_sel_1>
   1a260:	4607      	mov	r7, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   1a262:	e9d4 610c 	ldrd	r6, r1, [r4, #48]	; 0x30
		lll->slave.window_widening_prepare_us;
	lll->slave.window_widening_prepare_us = 0;
	if (lll->slave.window_widening_event_us >
	    lll->slave.window_widening_max_us) {
   1a266:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   1a268:	e9d4 030e 	ldrd	r0, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_event_us +=
   1a26c:	4431      	add	r1, r6
		lll->slave.window_widening_event_us =
   1a26e:	428a      	cmp	r2, r1
   1a270:	bf28      	it	cs
   1a272:	460a      	movcs	r2, r1
	lll->slave.window_size_event_us +=
   1a274:	4403      	add	r3, r0
	lll->slave.window_widening_prepare_us = 0;
   1a276:	2600      	movs	r6, #0
		lll->slave.window_widening_event_us =
   1a278:	6362      	str	r2, [r4, #52]	; 0x34
	lll->slave.window_size_event_us +=
   1a27a:	63e3      	str	r3, [r4, #60]	; 0x3c
	lll->slave.window_widening_prepare_us = 0;
   1a27c:	6326      	str	r6, [r4, #48]	; 0x30
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   1a27e:	63a6      	str	r6, [r4, #56]	; 0x38

	/* Start setting up Radio h/w */
	radio_reset();
   1a280:	f000 fb02 	bl	1a888 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1a284:	4630      	mov	r0, r6
   1a286:	f000 fb51 	bl	1a92c <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   1a28a:	4620      	mov	r0, r4
   1a28c:	f7ff fcc8 	bl	19c20 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   1a290:	f104 0008 	add.w	r0, r4, #8
   1a294:	f000 fb68 	bl	1a968 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   1a298:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1a29a:	7ba2      	ldrb	r2, [r4, #14]
			     ((uint32_t)lll->crc_init[0])));
   1a29c:	7b21      	ldrb	r1, [r4, #12]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1a29e:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1a2a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1a2a4:	4319      	orrs	r1, r3
   1a2a6:	f240 605b 	movw	r0, #1627	; 0x65b
   1a2aa:	f000 fc13 	bl	1aad4 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   1a2ae:	4638      	mov	r0, r7
   1a2b0:	f7fe fdd8 	bl	18e64 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   1a2b4:	4621      	mov	r1, r4
   1a2b6:	4849      	ldr	r0, [pc, #292]	; (1a3dc <prepare_cb+0x1cc>)
   1a2b8:	f000 fac6 	bl	1a848 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1a2bc:	2096      	movs	r0, #150	; 0x96
   1a2be:	f000 fcaf 	bl	1ac20 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   1a2c2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   1a2c6:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1a2ca:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1a2ce:	4631      	mov	r1, r6
   1a2d0:	f002 0207 	and.w	r2, r2, #7
   1a2d4:	f000 0007 	and.w	r0, r0, #7
   1a2d8:	f000 fc28 	bl	1ab2c <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   1a2dc:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1a2e0:	682f      	ldr	r7, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1a2e2:	4640      	mov	r0, r8
   1a2e4:	f7fe fd9e 	bl	18e24 <lll_evt_offset_get>
   1a2e8:	4407      	add	r7, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1a2ea:	686a      	ldr	r2, [r5, #4]
   1a2ec:	f107 0109 	add.w	r1, r7, #9
   1a2f0:	4630      	mov	r0, r6
   1a2f2:	f000 fca1 	bl	1ac38 <radio_tmr_start>
   1a2f6:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   1a2f8:	f000 fd32 	bl	1ad60 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1a2fc:	4630      	mov	r0, r6
   1a2fe:	f000 fd49 	bl	1ad94 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1a302:	6b62      	ldr	r2, [r4, #52]	; 0x34
	hcto = remainder_us +
   1a304:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1a306:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1a30a:	3230      	adds	r2, #48	; 0x30
	hcto = remainder_us +
   1a30c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1a310:	f000 0007 	and.w	r0, r0, #7
   1a314:	2101      	movs	r1, #1
	hcto = remainder_us +
   1a316:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1a318:	f000 fb84 	bl	1aa24 <radio_rx_ready_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1a31c:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
   1a320:	f002 0207 	and.w	r2, r2, #7
   1a324:	2a02      	cmp	r2, #2
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1a326:	4405      	add	r5, r0
   1a328:	d03d      	beq.n	1a3a6 <prepare_cb+0x196>
		return 40;
   1a32a:	2a04      	cmp	r2, #4
   1a32c:	bf0c      	ite	eq
   1a32e:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   1a332:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1a334:	4610      	mov	r0, r2
   1a336:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   1a338:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1a33a:	f000 fb75 	bl	1aa28 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   1a33e:	4428      	add	r0, r5
   1a340:	f000 fd00 	bl	1ad44 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1a344:	7c21      	ldrb	r1, [r4, #16]
   1a346:	3103      	adds	r1, #3
   1a348:	463a      	mov	r2, r7
   1a34a:	4640      	mov	r0, r8
   1a34c:	b2c9      	uxtb	r1, r1
   1a34e:	f7fe fd77 	bl	18e40 <lll_preempt_calc>
   1a352:	b190      	cbz	r0, 1a37a <prepare_cb+0x16a>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1a354:	4822      	ldr	r0, [pc, #136]	; (1a3e0 <prepare_cb+0x1d0>)
   1a356:	4621      	mov	r1, r4
   1a358:	f000 fa76 	bl	1a848 <radio_isr_set>
		radio_disable();
   1a35c:	f000 fb78 	bl	1aa50 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1a360:	2000      	movs	r0, #0
   1a362:	b002      	add	sp, #8
   1a364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	event_counter = lll->event_counter + lll->latency_event;
   1a368:	4430      	add	r0, r6
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1a36a:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   1a36c:	b280      	uxth	r0, r0
   1a36e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1a372:	f7fd faa5 	bl	178c0 <lll_chan_sel_2>
   1a376:	4607      	mov	r7, r0
   1a378:	e773      	b.n	1a262 <prepare_cb+0x52>
		ret = lll_prepare_done(lll);
   1a37a:	4620      	mov	r0, r4
   1a37c:	f7fe fcf8 	bl	18d70 <lll_prepare_done>
		LL_ASSERT(!ret);
   1a380:	2800      	cmp	r0, #0
   1a382:	d0ed      	beq.n	1a360 <prepare_cb+0x150>
   1a384:	4a17      	ldr	r2, [pc, #92]	; (1a3e4 <prepare_cb+0x1d4>)
   1a386:	4918      	ldr	r1, [pc, #96]	; (1a3e8 <prepare_cb+0x1d8>)
   1a388:	4818      	ldr	r0, [pc, #96]	; (1a3ec <prepare_cb+0x1dc>)
   1a38a:	f240 1313 	movw	r3, #275	; 0x113
   1a38e:	f004 fe61 	bl	1f054 <printk>
   1a392:	4040      	eors	r0, r0
   1a394:	f380 8811 	msr	BASEPRI, r0
   1a398:	f04f 0003 	mov.w	r0, #3
   1a39c:	df02      	svc	2
}
   1a39e:	2000      	movs	r0, #0
   1a3a0:	b002      	add	sp, #8
   1a3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   1a3a6:	2318      	movs	r3, #24
   1a3a8:	e7c4      	b.n	1a334 <prepare_cb+0x124>
		err = lll_hfclock_off();
   1a3aa:	f7fe fe5f 	bl	1906c <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1a3ae:	2800      	cmp	r0, #0
   1a3b0:	db06      	blt.n	1a3c0 <prepare_cb+0x1b0>
		lll_done(NULL);
   1a3b2:	2000      	movs	r0, #0
   1a3b4:	f7fe fcde 	bl	18d74 <lll_done>
}
   1a3b8:	2000      	movs	r0, #0
   1a3ba:	b002      	add	sp, #8
   1a3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(err >= 0);
   1a3c0:	4a08      	ldr	r2, [pc, #32]	; (1a3e4 <prepare_cb+0x1d4>)
   1a3c2:	490b      	ldr	r1, [pc, #44]	; (1a3f0 <prepare_cb+0x1e0>)
   1a3c4:	4809      	ldr	r0, [pc, #36]	; (1a3ec <prepare_cb+0x1dc>)
   1a3c6:	237d      	movs	r3, #125	; 0x7d
   1a3c8:	f004 fe44 	bl	1f054 <printk>
   1a3cc:	4040      	eors	r0, r0
   1a3ce:	f380 8811 	msr	BASEPRI, r0
   1a3d2:	f04f 0003 	mov.w	r0, #3
   1a3d6:	df02      	svc	2
   1a3d8:	e7eb      	b.n	1a3b2 <prepare_cb+0x1a2>
   1a3da:	bf00      	nop
   1a3dc:	00019e9d 	.word	0x00019e9d
   1a3e0:	00018f99 	.word	0x00018f99
   1a3e4:	000261e8 	.word	0x000261e8
   1a3e8:	000258a4 	.word	0x000258a4
   1a3ec:	0002561c 	.word	0x0002561c
   1a3f0:	0002609c 	.word	0x0002609c

0001a3f4 <lll_slave_prepare>:
{
   1a3f4:	b570      	push	{r4, r5, r6, lr}
   1a3f6:	b082      	sub	sp, #8
   1a3f8:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1a3fa:	f7fe fe1f 	bl	1903c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1a3fe:	2800      	cmp	r0, #0
   1a400:	db29      	blt.n	1a456 <lll_slave_prepare+0x62>
	lll = p->param;
   1a402:	68e1      	ldr	r1, [r4, #12]
	elapsed = p->lazy + 1;
   1a404:	8923      	ldrh	r3, [r4, #8]
	    lll->slave.window_widening_periodic_us * elapsed;
   1a406:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->slave.window_widening_prepare_us +=
   1a408:	6b0d      	ldr	r5, [r1, #48]	; 0x30
	lll->latency_prepare += elapsed;
   1a40a:	8ace      	ldrh	r6, [r1, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1a40c:	4a18      	ldr	r2, [pc, #96]	; (1a470 <lll_slave_prepare+0x7c>)
	elapsed = p->lazy + 1;
   1a40e:	3301      	adds	r3, #1
   1a410:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   1a412:	fb00 5503 	mla	r5, r0, r3, r5
	    lll->slave.window_widening_max_us) {
   1a416:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
		lll->slave.window_widening_prepare_us =
   1a418:	42a8      	cmp	r0, r5
   1a41a:	bf28      	it	cs
   1a41c:	4628      	movcs	r0, r5
	lll->latency_prepare += elapsed;
   1a41e:	4433      	add	r3, r6
		lll->slave.window_widening_prepare_us =
   1a420:	6308      	str	r0, [r1, #48]	; 0x30
	lll->latency_prepare += elapsed;
   1a422:	82cb      	strh	r3, [r1, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1a424:	4813      	ldr	r0, [pc, #76]	; (1a474 <lll_slave_prepare+0x80>)
   1a426:	4914      	ldr	r1, [pc, #80]	; (1a478 <lll_slave_prepare+0x84>)
   1a428:	9400      	str	r4, [sp, #0]
   1a42a:	2300      	movs	r3, #0
   1a42c:	f7fe fc14 	bl	18c58 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a430:	b108      	cbz	r0, 1a436 <lll_slave_prepare+0x42>
   1a432:	3044      	adds	r0, #68	; 0x44
   1a434:	d101      	bne.n	1a43a <lll_slave_prepare+0x46>
}
   1a436:	b002      	add	sp, #8
   1a438:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a43a:	4a10      	ldr	r2, [pc, #64]	; (1a47c <lll_slave_prepare+0x88>)
   1a43c:	4910      	ldr	r1, [pc, #64]	; (1a480 <lll_slave_prepare+0x8c>)
   1a43e:	4811      	ldr	r0, [pc, #68]	; (1a484 <lll_slave_prepare+0x90>)
   1a440:	235f      	movs	r3, #95	; 0x5f
   1a442:	f004 fe07 	bl	1f054 <printk>
   1a446:	4040      	eors	r0, r0
   1a448:	f380 8811 	msr	BASEPRI, r0
   1a44c:	f04f 0003 	mov.w	r0, #3
   1a450:	df02      	svc	2
}
   1a452:	b002      	add	sp, #8
   1a454:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(err >= 0);
   1a456:	4a09      	ldr	r2, [pc, #36]	; (1a47c <lll_slave_prepare+0x88>)
   1a458:	490b      	ldr	r1, [pc, #44]	; (1a488 <lll_slave_prepare+0x94>)
   1a45a:	480a      	ldr	r0, [pc, #40]	; (1a484 <lll_slave_prepare+0x90>)
   1a45c:	2348      	movs	r3, #72	; 0x48
   1a45e:	f004 fdf9 	bl	1f054 <printk>
   1a462:	4040      	eors	r0, r0
   1a464:	f380 8811 	msr	BASEPRI, r0
   1a468:	f04f 0003 	mov.w	r0, #3
   1a46c:	df02      	svc	2
   1a46e:	e7c8      	b.n	1a402 <lll_slave_prepare+0xe>
   1a470:	0001a211 	.word	0x0001a211
   1a474:	00018e1d 	.word	0x00018e1d
   1a478:	00019bc9 	.word	0x00019bc9
   1a47c:	000261e8 	.word	0x000261e8
   1a480:	0002613c 	.word	0x0002613c
   1a484:	0002561c 	.word	0x0002561c
   1a488:	0002609c 	.word	0x0002609c

0001a48c <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1a48c:	4b05      	ldr	r3, [pc, #20]	; (1a4a4 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1a48e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a492:	2100      	movs	r1, #0
   1a494:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1a498:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1a49c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1a4a0:	4770      	bx	lr
   1a4a2:	bf00      	nop
   1a4a4:	4000b000 	.word	0x4000b000

0001a4a8 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1a4a8:	4b05      	ldr	r3, [pc, #20]	; (1a4c0 <cntr_start+0x18>)
   1a4aa:	7818      	ldrb	r0, [r3, #0]
   1a4ac:	1c42      	adds	r2, r0, #1
   1a4ae:	701a      	strb	r2, [r3, #0]
   1a4b0:	b918      	cbnz	r0, 1a4ba <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1a4b2:	4b04      	ldr	r3, [pc, #16]	; (1a4c4 <cntr_start+0x1c>)
   1a4b4:	2201      	movs	r2, #1
   1a4b6:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1a4b8:	4770      	bx	lr
		return 1;
   1a4ba:	2001      	movs	r0, #1
}
   1a4bc:	4770      	bx	lr
   1a4be:	bf00      	nop
   1a4c0:	20006846 	.word	0x20006846
   1a4c4:	4000b000 	.word	0x4000b000

0001a4c8 <cntr_stop>:

uint32_t cntr_stop(void)
{
   1a4c8:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1a4ca:	4c0d      	ldr	r4, [pc, #52]	; (1a500 <cntr_stop+0x38>)
   1a4cc:	7820      	ldrb	r0, [r4, #0]
   1a4ce:	b148      	cbz	r0, 1a4e4 <cntr_stop+0x1c>

	if (--_refcount) {
   1a4d0:	3801      	subs	r0, #1
   1a4d2:	b2c0      	uxtb	r0, r0
   1a4d4:	7020      	strb	r0, [r4, #0]
   1a4d6:	b918      	cbnz	r0, 1a4e0 <cntr_stop+0x18>
   1a4d8:	4b0a      	ldr	r3, [pc, #40]	; (1a504 <cntr_stop+0x3c>)
   1a4da:	2201      	movs	r2, #1
   1a4dc:	601a      	str	r2, [r3, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1a4de:	bd10      	pop	{r4, pc}
		return 1;
   1a4e0:	2001      	movs	r0, #1
}
   1a4e2:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1a4e4:	4a08      	ldr	r2, [pc, #32]	; (1a508 <cntr_stop+0x40>)
   1a4e6:	4909      	ldr	r1, [pc, #36]	; (1a50c <cntr_stop+0x44>)
   1a4e8:	4809      	ldr	r0, [pc, #36]	; (1a510 <cntr_stop+0x48>)
   1a4ea:	232e      	movs	r3, #46	; 0x2e
   1a4ec:	f004 fdb2 	bl	1f054 <printk>
   1a4f0:	4040      	eors	r0, r0
   1a4f2:	f380 8811 	msr	BASEPRI, r0
   1a4f6:	f04f 0003 	mov.w	r0, #3
   1a4fa:	df02      	svc	2
   1a4fc:	7820      	ldrb	r0, [r4, #0]
   1a4fe:	e7e7      	b.n	1a4d0 <cntr_stop+0x8>
   1a500:	20006846 	.word	0x20006846
   1a504:	4000b004 	.word	0x4000b004
   1a508:	00026248 	.word	0x00026248
   1a50c:	00026294 	.word	0x00026294
   1a510:	0002561c 	.word	0x0002561c

0001a514 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1a514:	4b01      	ldr	r3, [pc, #4]	; (1a51c <cntr_cnt_get+0x8>)
   1a516:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1a51a:	4770      	bx	lr
   1a51c:	4000b000 	.word	0x4000b000

0001a520 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1a520:	4b02      	ldr	r3, [pc, #8]	; (1a52c <cntr_cmp_set+0xc>)
   1a522:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1a526:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1a52a:	4770      	bx	lr
   1a52c:	4000b000 	.word	0x4000b000

0001a530 <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1a530:	b4f0      	push	{r4, r5, r6, r7}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1a532:	4b12      	ldr	r3, [pc, #72]	; (1a57c <do_ecb+0x4c>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a534:	4d12      	ldr	r5, [pc, #72]	; (1a580 <do_ecb+0x50>)
   1a536:	2601      	movs	r6, #1
   1a538:	4634      	mov	r4, r6
		NRF_ECB->EVENTS_ENDECB = 0;
   1a53a:	2100      	movs	r1, #0
   1a53c:	602c      	str	r4, [r5, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1a53e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1a542:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1a546:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   1a54a:	601c      	str	r4, [r3, #0]
}
   1a54c:	e005      	b.n	1a55a <do_ecb+0x2a>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1a54e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1a552:	b932      	cbnz	r2, 1a562 <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1a554:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1a558:	b11a      	cbz	r2, 1a562 <do_ecb+0x32>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1a55a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1a55e:	2a00      	cmp	r2, #0
   1a560:	d0f5      	beq.n	1a54e <do_ecb+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a562:	602e      	str	r6, [r5, #0]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1a564:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1a568:	2a00      	cmp	r2, #0
   1a56a:	d1e7      	bne.n	1a53c <do_ecb+0xc>
   1a56c:	f8d3 7504 	ldr.w	r7, [r3, #1284]	; 0x504
   1a570:	2f00      	cmp	r7, #0
   1a572:	d0e3      	beq.n	1a53c <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
}
   1a574:	bcf0      	pop	{r4, r5, r6, r7}
	NRF_ECB->ECBDATAPTR = 0;
   1a576:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1a57a:	4770      	bx	lr
   1a57c:	4000e000 	.word	0x4000e000
   1a580:	4000e004 	.word	0x4000e004

0001a584 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1a584:	b570      	push	{r4, r5, r6, lr}
   1a586:	b08c      	sub	sp, #48	; 0x30
   1a588:	460e      	mov	r6, r1
   1a58a:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1a58c:	4601      	mov	r1, r0
   1a58e:	2210      	movs	r2, #16
   1a590:	4668      	mov	r0, sp
{
   1a592:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1a594:	f7f5 f99a 	bl	f8cc <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1a598:	2210      	movs	r2, #16
   1a59a:	eb0d 0002 	add.w	r0, sp, r2
   1a59e:	4631      	mov	r1, r6
   1a5a0:	f7f5 f994 	bl	f8cc <mem_rcopy>

	do_ecb(&ecb);
   1a5a4:	4668      	mov	r0, sp
   1a5a6:	f7ff ffc3 	bl	1a530 <do_ecb>

	if (cipher_text_le) {
   1a5aa:	b125      	cbz	r5, 1a5b6 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1a5ac:	4628      	mov	r0, r5
   1a5ae:	2210      	movs	r2, #16
   1a5b0:	a908      	add	r1, sp, #32
   1a5b2:	f7f5 f98b 	bl	f8cc <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1a5b6:	b124      	cbz	r4, 1a5c2 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1a5b8:	4620      	mov	r0, r4
   1a5ba:	2210      	movs	r2, #16
   1a5bc:	a908      	add	r1, sp, #32
   1a5be:	f007 f872 	bl	216a6 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1a5c2:	b00c      	add	sp, #48	; 0x30
   1a5c4:	bd70      	pop	{r4, r5, r6, pc}
   1a5c6:	bf00      	nop

0001a5c8 <sw_switch.isra.0>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   1a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1a5cc:	f8df 824c 	ldr.w	r8, [pc, #588]	; 1a81c <sw_switch.isra.0+0x254>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a5d0:	f8df a23c 	ldr.w	sl, [pc, #572]	; 1a810 <sw_switch.isra.0+0x248>
   1a5d4:	f998 7000 	ldrsb.w	r7, [r8]
   1a5d8:	4b88      	ldr	r3, [pc, #544]	; (1a7fc <sw_switch.isra.0+0x234>)
   1a5da:	f898 6000 	ldrb.w	r6, [r8]
   1a5de:	f8ca 3560 	str.w	r3, [sl, #1376]	; 0x560
   1a5e2:	f107 030b 	add.w	r3, r7, #11
   1a5e6:	b2db      	uxtb	r3, r3
   1a5e8:	00db      	lsls	r3, r3, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1a5ea:	4c85      	ldr	r4, [pc, #532]	; (1a800 <sw_switch.isra.0+0x238>)
   1a5ec:	f8df e230 	ldr.w	lr, [pc, #560]	; 1a820 <sw_switch.isra.0+0x258>
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1a5f0:	ea4f 09c6 	mov.w	r9, r6, lsl #3
   1a5f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a5f8:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1a5fc:	f109 4c80 	add.w	ip, r9, #1073741824	; 0x40000000
   1a600:	f50c 3cf8 	add.w	ip, ip, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1a604:	eb04 0b86 	add.w	fp, r4, r6, lsl #2
   1a608:	f107 0508 	add.w	r5, r7, #8
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a60c:	f107 0410 	add.w	r4, r7, #16
   1a610:	f8ca c564 	str.w	ip, [sl, #1380]	; 0x564

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a614:	44ce      	add	lr, r9
   1a616:	f8c3 b510 	str.w	fp, [r3, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   1a61a:	b2e4      	uxtb	r4, r4
   1a61c:	b2ed      	uxtb	r5, r5
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1a61e:	fa0f fc86 	sxth.w	ip, r6
   1a622:	b1e8      	cbz	r0, 1a660 <sw_switch.isra.0+0x98>
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1a624:	2a02      	cmp	r2, #2
   1a626:	ea4f 0a86 	mov.w	sl, r6, lsl #2
   1a62a:	d04d      	beq.n	1a6c8 <sw_switch.isra.0+0x100>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
   1a62c:	f24a 593c 	movw	r9, #42300	; 0xa53c
   1a630:	f649 70c4 	movw	r0, #40900	; 0x9fc4
   1a634:	2a04      	cmp	r2, #4
   1a636:	bf18      	it	ne
   1a638:	4681      	movne	r9, r0
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1a63a:	2902      	cmp	r1, #2
   1a63c:	f000 80b1 	beq.w	1a7a2 <sw_switch.isra.0+0x1da>
   1a640:	2904      	cmp	r1, #4
   1a642:	f040 80a4 	bne.w	1a78e <sw_switch.isra.0+0x1c6>
   1a646:	486f      	ldr	r0, [pc, #444]	; (1a804 <sw_switch.isra.0+0x23c>)
   1a648:	f509 49eb 	add.w	r9, r9, #30080	; 0x7580
   1a64c:	f109 0914 	add.w	r9, r9, #20
   1a650:	fba0 0909 	umull	r0, r9, r0, r9
   1a654:	ea4f 1999 	mov.w	r9, r9, lsr #6

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a658:	486b      	ldr	r0, [pc, #428]	; (1a808 <sw_switch.isra.0+0x240>)
   1a65a:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
		uint8_t ppi_dis =
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
			    sw_tifs_toggle);

		if (phy_curr & BIT(2)) {
   1a65e:	e040      	b.n	1a6e2 <sw_switch.isra.0+0x11a>
   1a660:	00e4      	lsls	r4, r4, #3
   1a662:	00ed      	lsls	r5, r5, #3
   1a664:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1a668:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   1a66c:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1a670:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
   1a674:	4a65      	ldr	r2, [pc, #404]	; (1a80c <sw_switch.isra.0+0x244>)
   1a676:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	} else {
		/* RX */
		delay = HAL_RADIO_NS2US_CEIL(
   1a67a:	f04f 0928 	mov.w	r9, #40	; 0x28
static inline void hal_radio_sw_switch_coded_config_clear(uint8_t ppi_en,
	uint8_t ppi_dis, uint8_t cc_reg, uint8_t group_index)
{
	/* Invalidate PPI used when RXing on LE Coded PHY. */
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(
		ppi_en) = 0;
   1a67e:	f8c4 0510 	str.w	r0, [r4, #1296]	; 0x510
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(
		ppi_en) = 0;
   1a682:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514

	/* Wire the Group task disable to the default EVENTS_COMPARE. */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		ppi_dis) =
   1a686:	f8c5 b510 	str.w	fp, [r5, #1296]	; 0x510
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(cc_reg);
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		ppi_dis) =
   1a68a:	f8c5 e514 	str.w	lr, [r5, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   1a68e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   1a692:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   1a696:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   1a69a:	3601      	adds	r6, #1
		SW_SWITCH_TIMER->CC[cc]) {
   1a69c:	f8dc 3540 	ldr.w	r3, [ip, #1344]	; 0x540
	if (delay <
   1a6a0:	454b      	cmp	r3, r9
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1a6a2:	bf8a      	itet	hi
   1a6a4:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1a6a8:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1a6aa:	eba3 0309 	subhi.w	r3, r3, r9
   1a6ae:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
    p_reg->CHENSET = mask;
   1a6b2:	4b57      	ldr	r3, [pc, #348]	; (1a810 <sw_switch.isra.0+0x248>)
	sw_tifs_toggle &= 1;
   1a6b4:	f006 0601 	and.w	r6, r6, #1
   1a6b8:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1a6bc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1a6c0:	f888 6000 	strb.w	r6, [r8]
}
   1a6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6c8:	2902      	cmp	r1, #2
   1a6ca:	f000 8090 	beq.w	1a7ee <sw_switch.isra.0+0x226>
   1a6ce:	2904      	cmp	r1, #4
   1a6d0:	f000 808a 	beq.w	1a7e8 <sw_switch.isra.0+0x220>
   1a6d4:	f04f 0931 	mov.w	r9, #49	; 0x31
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a6d8:	484b      	ldr	r0, [pc, #300]	; (1a808 <sw_switch.isra.0+0x240>)
   1a6da:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
		if (phy_curr & BIT(2)) {
   1a6de:	074b      	lsls	r3, r1, #29
   1a6e0:	d56b      	bpl.n	1a7ba <sw_switch.isra.0+0x1f2>
	switch (phy) {
   1a6e2:	2a02      	cmp	r2, #2
   1a6e4:	d07d      	beq.n	1a7e2 <sw_switch.isra.0+0x21a>
   1a6e6:	f24a 10b8 	movw	r0, #41400	; 0xa1b8
   1a6ea:	f24a 7330 	movw	r3, #42800	; 0xa730
   1a6ee:	2a04      	cmp	r2, #4
   1a6f0:	bf14      	ite	ne
   1a6f2:	4602      	movne	r2, r0
   1a6f4:	461a      	moveq	r2, r3
			    SW_SWITCH_TIMER_S2_EVTS_COMP(sw_tifs_toggle);
   1a6f6:	3702      	adds	r7, #2
   1a6f8:	b2ff      	uxtb	r7, r7
   1a6fa:	00b8      	lsls	r0, r7, #2
				SW_SWITCH_TIMER->CC[cc];
   1a6fc:	f8df b124 	ldr.w	fp, [pc, #292]	; 1a824 <sw_switch.isra.0+0x25c>
   1a700:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1a704:	f506 73a8 	add.w	r3, r6, #336	; 0x150
   1a708:	f500 4010 	add.w	r0, r0, #36864	; 0x9000
   1a70c:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
			SW_SWITCH_TIMER->CC[cc_s2] =
   1a710:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
#if defined(CONFIG_BT_CTLR_PHY_CODED)
	case BIT(2):
		if (flags & 0x01) {
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S8_NS;
		} else {
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_NS;
   1a714:	f246 0b18 	movw	fp, #24600	; 0x6018
   1a718:	f242 43b8 	movw	r3, #9400	; 0x24b8
   1a71c:	2904      	cmp	r1, #4
   1a71e:	bf14      	ite	ne
   1a720:	4619      	movne	r1, r3
   1a722:	4659      	moveq	r1, fp
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1a724:	440a      	add	r2, r1
   1a726:	4937      	ldr	r1, [pc, #220]	; (1a804 <sw_switch.isra.0+0x23c>)
			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   1a728:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1a72c:	fba1 1202 	umull	r1, r2, r1, r2
			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   1a730:	ebb3 1f92 	cmp.w	r3, r2, lsr #6
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   1a734:	bf88      	it	hi
   1a736:	f8d0 3540 	ldrhi.w	r3, [r0, #1344]	; 0x540
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1a73a:	ea4f 1192 	mov.w	r1, r2, lsr #6
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   1a73e:	bf8c      	ite	hi
   1a740:	1a5b      	subhi	r3, r3, r1
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   1a742:	2301      	movls	r3, #1
   1a744:	00e4      	lsls	r4, r4, #3
   1a746:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
   1a74a:	00ed      	lsls	r5, r5, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
   1a74c:	4b2c      	ldr	r3, [pc, #176]	; (1a800 <sw_switch.isra.0+0x238>)
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   1a74e:	4931      	ldr	r1, [pc, #196]	; (1a814 <sw_switch.isra.0+0x24c>)
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   1a750:	4a2f      	ldr	r2, [pc, #188]	; (1a810 <sw_switch.isra.0+0x248>)
   1a752:	4831      	ldr	r0, [pc, #196]	; (1a818 <sw_switch.isra.0+0x250>)
   1a754:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1a758:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1a75c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
   1a760:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   1a764:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   1a768:	4b27      	ldr	r3, [pc, #156]	; (1a808 <sw_switch.isra.0+0x240>)
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   1a76a:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   1a76e:	4451      	add	r1, sl
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   1a770:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1a774:	f44f 2380 	mov.w	r3, #262144	; 0x40000
	    ppi_dis)	=
   1a778:	f8c5 7510 	str.w	r7, [r5, #1296]	; 0x510
	    ppi_dis) =
   1a77c:	f8c5 e514 	str.w	lr, [r5, #1300]	; 0x514
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   1a780:	f8c2 05a0 	str.w	r0, [r2, #1440]	; 0x5a0
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
   1a784:	f8c2 15a4 	str.w	r1, [r2, #1444]	; 0x5a4
   1a788:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1a78c:	e77f      	b.n	1a68e <sw_switch.isra.0+0xc6>
   1a78e:	481d      	ldr	r0, [pc, #116]	; (1a804 <sw_switch.isra.0+0x23c>)
   1a790:	f509 591a 	add.w	r9, r9, #9856	; 0x2680
   1a794:	f109 092c 	add.w	r9, r9, #44	; 0x2c
   1a798:	fba0 0909 	umull	r0, r9, r0, r9
   1a79c:	ea4f 1999 	mov.w	r9, r9, lsr #6
   1a7a0:	e79a      	b.n	1a6d8 <sw_switch.isra.0+0x110>
		delay = HAL_RADIO_NS2US_ROUND(
   1a7a2:	4a18      	ldr	r2, [pc, #96]	; (1a804 <sw_switch.isra.0+0x23c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a7a4:	4918      	ldr	r1, [pc, #96]	; (1a808 <sw_switch.isra.0+0x240>)
   1a7a6:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   1a7aa:	f509 59ab 	add.w	r9, r9, #5472	; 0x1560
   1a7ae:	f109 091c 	add.w	r9, r9, #28
   1a7b2:	fba2 3909 	umull	r3, r9, r2, r9
   1a7b6:	ea4f 1999 	mov.w	r9, r9, lsr #6
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(
   1a7ba:	00e4      	lsls	r4, r4, #3
   1a7bc:	00ed      	lsls	r5, r5, #3
   1a7be:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1a7c2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   1a7c6:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1a7ca:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
		ppi_en) = 0;
   1a7ce:	2300      	movs	r3, #0
   1a7d0:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
		ppi_en) = 0;
   1a7d4:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
		ppi_dis) =
   1a7d8:	f8c5 b510 	str.w	fp, [r5, #1296]	; 0x510
		ppi_dis) =
   1a7dc:	f8c5 e514 	str.w	lr, [r5, #1300]	; 0x514
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
			group_index);
}
   1a7e0:	e755      	b.n	1a68e <sw_switch.isra.0+0xc6>
	switch (phy) {
   1a7e2:	f649 6234 	movw	r2, #40500	; 0x9e34
   1a7e6:	e786      	b.n	1a6f6 <sw_switch.isra.0+0x12e>
	switch (phy) {
   1a7e8:	f04f 0946 	mov.w	r9, #70	; 0x46
   1a7ec:	e734      	b.n	1a658 <sw_switch.isra.0+0x90>
   1a7ee:	4a06      	ldr	r2, [pc, #24]	; (1a808 <sw_switch.isra.0+0x240>)
   1a7f0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
   1a7f4:	f04f 092d 	mov.w	r9, #45	; 0x2d
   1a7f8:	e7df      	b.n	1a7ba <sw_switch.isra.0+0x1f2>
   1a7fa:	bf00      	nop
   1a7fc:	4000110c 	.word	0x4000110c
   1a800:	40009140 	.word	0x40009140
   1a804:	10624dd3 	.word	0x10624dd3
   1a808:	40001000 	.word	0x40001000
   1a80c:	40001004 	.word	0x40001004
   1a810:	4001f000 	.word	0x4001f000
   1a814:	40009040 	.word	0x40009040
   1a818:	40001150 	.word	0x40001150
   1a81c:	20006847 	.word	0x20006847
   1a820:	4001f004 	.word	0x4001f004
   1a824:	40009000 	.word	0x40009000

0001a828 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1a828:	4b04      	ldr	r3, [pc, #16]	; (1a83c <isr_radio+0x14>)
   1a82a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1a82e:	b123      	cbz	r3, 1a83a <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1a830:	4a03      	ldr	r2, [pc, #12]	; (1a840 <isr_radio+0x18>)
   1a832:	4b04      	ldr	r3, [pc, #16]	; (1a844 <isr_radio+0x1c>)
   1a834:	6810      	ldr	r0, [r2, #0]
   1a836:	681b      	ldr	r3, [r3, #0]
   1a838:	4718      	bx	r3
}
   1a83a:	4770      	bx	lr
   1a83c:	40001000 	.word	0x40001000
   1a840:	20003d84 	.word	0x20003d84
   1a844:	20003d80 	.word	0x20003d80

0001a848 <radio_isr_set>:
{
   1a848:	b538      	push	{r3, r4, r5, lr}
   1a84a:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1a84c:	2001      	movs	r0, #1
{
   1a84e:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1a850:	f7ec ff8c 	bl	776c <arch_irq_disable>
	isr_cb_param = param;
   1a854:	4a08      	ldr	r2, [pc, #32]	; (1a878 <radio_isr_set+0x30>)
	isr_cb = cb;
   1a856:	4809      	ldr	r0, [pc, #36]	; (1a87c <radio_isr_set+0x34>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a858:	4b09      	ldr	r3, [pc, #36]	; (1a880 <radio_isr_set+0x38>)
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1a85a:	490a      	ldr	r1, [pc, #40]	; (1a884 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1a85c:	6015      	str	r5, [r2, #0]
   1a85e:	2510      	movs	r5, #16
   1a860:	2202      	movs	r2, #2
	isr_cb = cb;
   1a862:	6004      	str	r4, [r0, #0]
   1a864:	f8c1 5304 	str.w	r5, [r1, #772]	; 0x304
	irq_enable(RADIO_IRQn);
   1a868:	2001      	movs	r0, #1
   1a86a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1a86e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1a872:	f7ec bf6b 	b.w	774c <arch_irq_enable>
   1a876:	bf00      	nop
   1a878:	20003d84 	.word	0x20003d84
   1a87c:	20003d80 	.word	0x20003d80
   1a880:	e000e100 	.word	0xe000e100
   1a884:	40001000 	.word	0x40001000

0001a888 <radio_reset>:
{
   1a888:	b538      	push	{r3, r4, r5, lr}
	irq_disable(RADIO_IRQn);
   1a88a:	2001      	movs	r0, #1
   1a88c:	f7ec ff6e 	bl	776c <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1a890:	4b0b      	ldr	r3, [pc, #44]	; (1a8c0 <radio_reset+0x38>)
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1a892:	490c      	ldr	r1, [pc, #48]	; (1a8c4 <radio_reset+0x3c>)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(1));
#else
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1a894:	4a0c      	ldr	r2, [pc, #48]	; (1a8c8 <radio_reset+0x40>)
   1a896:	4c0d      	ldr	r4, [pc, #52]	; (1a8cc <radio_reset+0x44>)
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1a898:	480d      	ldr	r0, [pc, #52]	; (1a8d0 <radio_reset+0x48>)
   1a89a:	2500      	movs	r5, #0
   1a89c:	f8c3 5ffc 	str.w	r5, [r3, #4092]	; 0xffc
   1a8a0:	2501      	movs	r5, #1
   1a8a2:	f8c3 5ffc 	str.w	r5, [r3, #4092]	; 0xffc
   1a8a6:	680b      	ldr	r3, [r1, #0]
					 0xfffffffe) | 0x01000000;
   1a8a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1a8ac:	f023 0301 	bic.w	r3, r3, #1
   1a8b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1a8b4:	600b      	str	r3, [r1, #0]
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1a8b6:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1a8ba:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
}
   1a8be:	bd38      	pop	{r3, r4, r5, pc}
   1a8c0:	40001000 	.word	0x40001000
   1a8c4:	40001774 	.word	0x40001774
   1a8c8:	4001f000 	.word	0x4001f000
   1a8cc:	00010900 	.word	0x00010900
   1a8d0:	00021200 	.word	0x00021200

0001a8d4 <radio_phy_set>:
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1a8d4:	4a13      	ldr	r2, [pc, #76]	; (1a924 <radio_phy_set+0x50>)
	switch (phy) {
   1a8d6:	2802      	cmp	r0, #2
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1a8d8:	6813      	ldr	r3, [r2, #0]
	switch (phy) {
   1a8da:	d00f      	beq.n	1a8fc <radio_phy_set+0x28>
   1a8dc:	2804      	cmp	r0, #4
   1a8de:	d012      	beq.n	1a906 <radio_phy_set+0x32>
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1a8e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1a8e4:	6013      	str	r3, [r2, #0]
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   1a8e6:	2103      	movs	r1, #3
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1a8e8:	4b0f      	ldr	r3, [pc, #60]	; (1a928 <radio_phy_set+0x54>)
   1a8ea:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1a8ee:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1a8f2:	f042 0201 	orr.w	r2, r2, #1
   1a8f6:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1a8fa:	4770      	bx	lr
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1a8fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1a900:	6013      	str	r3, [r2, #0]
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1a902:	2104      	movs	r1, #4
		break;
   1a904:	e7f0      	b.n	1a8e8 <radio_phy_set+0x14>
		*(volatile uint32_t *)0x4000173c |= 0x80000000;
   1a906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1a90a:	6013      	str	r3, [r2, #0]
				((*(volatile uint32_t *)0x4000173c) & 0xFFFFFF00) |
   1a90c:	6813      	ldr	r3, [r2, #0]
   1a90e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
		if (flags & 0x01) {
   1a912:	f001 0101 	and.w	r1, r1, #1
				((*(volatile uint32_t *)0x4000173c) & 0xFFFFFF00) |
   1a916:	f043 035c 	orr.w	r3, r3, #92	; 0x5c
		if (flags & 0x01) {
   1a91a:	f1c1 0106 	rsb	r1, r1, #6
		*(volatile uint32_t *)0x4000173c =
   1a91e:	6013      	str	r3, [r2, #0]
		break;
   1a920:	e7e2      	b.n	1a8e8 <radio_phy_set+0x14>
   1a922:	bf00      	nop
   1a924:	4000173c 	.word	0x4000173c
   1a928:	40001000 	.word	0x40001000

0001a92c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1a92c:	4b01      	ldr	r3, [pc, #4]	; (1a934 <radio_tx_power_set+0x8>)
   1a92e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1a932:	4770      	bx	lr
   1a934:	40001000 	.word	0x40001000

0001a938 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1a938:	4b01      	ldr	r3, [pc, #4]	; (1a940 <radio_freq_chan_set+0x8>)
   1a93a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1a93e:	4770      	bx	lr
   1a940:	40001000 	.word	0x40001000

0001a944 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1a944:	4b07      	ldr	r3, [pc, #28]	; (1a964 <radio_whiten_iv_set+0x20>)
   1a946:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1a94a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1a94e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1a952:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1a956:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1a95a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1a95e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1a962:	4770      	bx	lr
   1a964:	40001000 	.word	0x40001000

0001a968 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1a968:	4a0b      	ldr	r2, [pc, #44]	; (1a998 <radio_aa_set+0x30>)
   1a96a:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1a96c:	2301      	movs	r3, #1
{
   1a96e:	b410      	push	{r4}
	NRF_RADIO->TXADDRESS =
   1a970:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1a974:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1a978:	78c3      	ldrb	r3, [r0, #3]
   1a97a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1a97e:	7843      	ldrb	r3, [r0, #1]
   1a980:	7884      	ldrb	r4, [r0, #2]
   1a982:	7801      	ldrb	r1, [r0, #0]
   1a984:	041b      	lsls	r3, r3, #16
   1a986:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   1a98a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   1a98e:	bc10      	pop	{r4}
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1a990:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1a994:	4770      	bx	lr
   1a996:	bf00      	nop
   1a998:	40001000 	.word	0x40001000

0001a99c <radio_pkt_configure>:
	phy = (flags >> 1) & 0x07; /* phy */
   1a99c:	f3c2 0342 	ubfx	r3, r2, #1, #3
	switch (phy) {
   1a9a0:	2b02      	cmp	r3, #2
{
   1a9a2:	b410      	push	{r4}
	uint8_t dc = flags & 0x01; /* Adv or Data channel */
   1a9a4:	f002 0201 	and.w	r2, r2, #1
	switch (phy) {
   1a9a8:	d024      	beq.n	1a9f4 <radio_pkt_configure+0x58>
		extra |= (3UL << RADIO_PCNF0_TERMLEN_Pos) &
   1a9aa:	2b04      	cmp	r3, #4
   1a9ac:	bf14      	ite	ne
   1a9ae:	2400      	movne	r4, #0
   1a9b0:	f04f 44c7 	moveq.w	r4, #1669332992	; 0x63800000
	if (dc) {
   1a9b4:	b10a      	cbz	r2, 1a9ba <radio_pkt_configure+0x1e>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1a9b6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1a9ba:	f1c0 0308 	rsb	r3, r0, #8
   1a9be:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1a9c0:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1a9c4:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1a9c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1a9ca:	4a0d      	ldr	r2, [pc, #52]	; (1aa00 <radio_pkt_configure+0x64>)
}
   1a9cc:	bc10      	pop	{r4}
			    RADIO_PCNF0_S1LEN_Msk) |
   1a9ce:	4303      	orrs	r3, r0
   1a9d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1a9d4:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1a9d8:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1a9dc:	4809      	ldr	r0, [pc, #36]	; (1aa04 <radio_pkt_configure+0x68>)
   1a9de:	4018      	ands	r0, r3
   1a9e0:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1a9e4:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1a9e8:	4319      	orrs	r1, r3
   1a9ea:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1a9ee:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1a9f2:	4770      	bx	lr
	switch (phy) {
   1a9f4:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	if (dc) {
   1a9f8:	2a00      	cmp	r2, #0
   1a9fa:	d0de      	beq.n	1a9ba <radio_pkt_configure+0x1e>
   1a9fc:	e7db      	b.n	1a9b6 <radio_pkt_configure+0x1a>
   1a9fe:	bf00      	nop
   1aa00:	40001000 	.word	0x40001000
   1aa04:	fef80000 	.word	0xfef80000

0001aa08 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1aa08:	4b01      	ldr	r3, [pc, #4]	; (1aa10 <radio_pkt_rx_set+0x8>)
   1aa0a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1aa0e:	4770      	bx	lr
   1aa10:	40001000 	.word	0x40001000

0001aa14 <radio_pkt_tx_set>:
   1aa14:	4b01      	ldr	r3, [pc, #4]	; (1aa1c <radio_pkt_tx_set+0x8>)
   1aa16:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1aa1a:	4770      	bx	lr
   1aa1c:	40001000 	.word	0x40001000

0001aa20 <radio_tx_chain_delay_get>:
}
   1aa20:	2001      	movs	r0, #1
   1aa22:	4770      	bx	lr

0001aa24 <radio_rx_ready_delay_get>:
}
   1aa24:	2029      	movs	r0, #41	; 0x29
   1aa26:	4770      	bx	lr

0001aa28 <radio_rx_chain_delay_get>:
	switch (phy) {
   1aa28:	2802      	cmp	r0, #2
   1aa2a:	d009      	beq.n	1aa40 <radio_rx_chain_delay_get+0x18>
   1aa2c:	2804      	cmp	r0, #4
   1aa2e:	d105      	bne.n	1aa3c <radio_rx_chain_delay_get+0x14>
		if (flags & 0x01) {
   1aa30:	f011 0f01 	tst.w	r1, #1
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_US;
   1aa34:	bf14      	ite	ne
   1aa36:	201e      	movne	r0, #30
   1aa38:	2019      	moveq	r0, #25
   1aa3a:	4770      	bx	lr
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   1aa3c:	200a      	movs	r0, #10
}
   1aa3e:	4770      	bx	lr
	switch (phy) {
   1aa40:	2005      	movs	r0, #5
   1aa42:	4770      	bx	lr

0001aa44 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aa44:	4b01      	ldr	r3, [pc, #4]	; (1aa4c <radio_tx_enable+0x8>)
   1aa46:	2201      	movs	r2, #1
   1aa48:	601a      	str	r2, [r3, #0]
}
   1aa4a:	4770      	bx	lr
   1aa4c:	40001000 	.word	0x40001000

0001aa50 <radio_disable>:
{
   1aa50:	b430      	push	{r4, r5}
    p_reg->CHENCLR = mask;
   1aa52:	4a08      	ldr	r2, [pc, #32]	; (1aa74 <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   1aa54:	4808      	ldr	r0, [pc, #32]	; (1aa78 <radio_disable+0x28>)
   1aa56:	4909      	ldr	r1, [pc, #36]	; (1aa7c <radio_disable+0x2c>)
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1aa58:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1aa5a:	f44f 6590 	mov.w	r5, #1152	; 0x480
   1aa5e:	2400      	movs	r4, #0
   1aa60:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1aa64:	6053      	str	r3, [r2, #4]
   1aa66:	60d3      	str	r3, [r2, #12]
   1aa68:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   1aa6c:	bc30      	pop	{r4, r5}
   1aa6e:	600b      	str	r3, [r1, #0]
   1aa70:	4770      	bx	lr
   1aa72:	bf00      	nop
   1aa74:	4001f000 	.word	0x4001f000
   1aa78:	40001000 	.word	0x40001000
   1aa7c:	40001010 	.word	0x40001010

0001aa80 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1aa80:	4b04      	ldr	r3, [pc, #16]	; (1aa94 <radio_status_reset+0x14>)
   1aa82:	2200      	movs	r2, #0
   1aa84:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1aa88:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1aa8c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1aa90:	4770      	bx	lr
   1aa92:	bf00      	nop
   1aa94:	40001000 	.word	0x40001000

0001aa98 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1aa98:	4b03      	ldr	r3, [pc, #12]	; (1aaa8 <radio_is_ready+0x10>)
   1aa9a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1aa9e:	3800      	subs	r0, #0
   1aaa0:	bf18      	it	ne
   1aaa2:	2001      	movne	r0, #1
   1aaa4:	4770      	bx	lr
   1aaa6:	bf00      	nop
   1aaa8:	40001000 	.word	0x40001000

0001aaac <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1aaac:	4b03      	ldr	r3, [pc, #12]	; (1aabc <radio_is_done+0x10>)
   1aaae:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1aab2:	3800      	subs	r0, #0
   1aab4:	bf18      	it	ne
   1aab6:	2001      	movne	r0, #1
   1aab8:	4770      	bx	lr
   1aaba:	bf00      	nop
   1aabc:	40001000 	.word	0x40001000

0001aac0 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1aac0:	4b03      	ldr	r3, [pc, #12]	; (1aad0 <radio_is_idle+0x10>)
   1aac2:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1aac6:	fab0 f080 	clz	r0, r0
   1aaca:	0940      	lsrs	r0, r0, #5
   1aacc:	4770      	bx	lr
   1aace:	bf00      	nop
   1aad0:	40001000 	.word	0x40001000

0001aad4 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1aad4:	4b04      	ldr	r3, [pc, #16]	; (1aae8 <radio_crc_configure+0x14>)
   1aad6:	f240 1203 	movw	r2, #259	; 0x103
   1aada:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1aade:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1aae2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1aae6:	4770      	bx	lr
   1aae8:	40001000 	.word	0x40001000

0001aaec <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1aaec:	4b03      	ldr	r3, [pc, #12]	; (1aafc <radio_crc_is_valid+0x10>)
   1aaee:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1aaf2:	3800      	subs	r0, #0
   1aaf4:	bf18      	it	ne
   1aaf6:	2001      	movne	r0, #1
   1aaf8:	4770      	bx	lr
   1aafa:	bf00      	nop
   1aafc:	40001000 	.word	0x40001000

0001ab00 <radio_pkt_empty_get>:
}
   1ab00:	4800      	ldr	r0, [pc, #0]	; (1ab04 <radio_pkt_empty_get+0x4>)
   1ab02:	4770      	bx	lr
   1ab04:	20003c78 	.word	0x20003c78

0001ab08 <radio_pkt_scratch_get>:
}
   1ab08:	4800      	ldr	r0, [pc, #0]	; (1ab0c <radio_pkt_scratch_get+0x4>)
   1ab0a:	4770      	bx	lr
   1ab0c:	20003c7c 	.word	0x20003c7c

0001ab10 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1ab10:	4b05      	ldr	r3, [pc, #20]	; (1ab28 <radio_switch_complete_and_rx+0x18>)
{
   1ab12:	b410      	push	{r4}
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1ab14:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1ab16:	2403      	movs	r4, #3
{
   1ab18:	4602      	mov	r2, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1ab1a:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1ab1e:	4608      	mov	r0, r1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1ab20:	bc10      	pop	{r4}
	sw_switch(0, 0, 0, phy_rx, 0);
   1ab22:	f7ff bd51 	b.w	1a5c8 <sw_switch.isra.0>
   1ab26:	bf00      	nop
   1ab28:	40001000 	.word	0x40001000

0001ab2c <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1ab2c:	4b04      	ldr	r3, [pc, #16]	; (1ab40 <radio_switch_complete_and_tx+0x14>)
{
   1ab2e:	b410      	push	{r4}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1ab30:	2403      	movs	r4, #3
{
   1ab32:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1ab34:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1ab38:	2001      	movs	r0, #1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1ab3a:	bc10      	pop	{r4}
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1ab3c:	f7ff bd44 	b.w	1a5c8 <sw_switch.isra.0>
   1ab40:	40001000 	.word	0x40001000

0001ab44 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1ab44:	4904      	ldr	r1, [pc, #16]	; (1ab58 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1ab46:	4b05      	ldr	r3, [pc, #20]	; (1ab5c <radio_switch_complete_and_disable+0x18>)
   1ab48:	2003      	movs	r0, #3
   1ab4a:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1ab4e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1ab52:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1ab56:	4770      	bx	lr
   1ab58:	40001000 	.word	0x40001000
   1ab5c:	4001f000 	.word	0x4001f000

0001ab60 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1ab60:	4b02      	ldr	r3, [pc, #8]	; (1ab6c <radio_rssi_status_reset+0xc>)
   1ab62:	2200      	movs	r2, #0
   1ab64:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1ab68:	4770      	bx	lr
   1ab6a:	bf00      	nop
   1ab6c:	40001000 	.word	0x40001000

0001ab70 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1ab70:	4b03      	ldr	r3, [pc, #12]	; (1ab80 <radio_rssi_is_ready+0x10>)
   1ab72:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1ab76:	3800      	subs	r0, #0
   1ab78:	bf18      	it	ne
   1ab7a:	2001      	movne	r0, #1
   1ab7c:	4770      	bx	lr
   1ab7e:	bf00      	nop
   1ab80:	40001000 	.word	0x40001000

0001ab84 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1ab84:	b430      	push	{r4, r5}
   1ab86:	2400      	movs	r4, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1ab88:	00a3      	lsls	r3, r4, #2
   1ab8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ab8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1ab92:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1ab94:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1ab98:	3401      	adds	r4, #1
   1ab9a:	8895      	ldrh	r5, [r2, #4]
   1ab9c:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1aba0:	2c08      	cmp	r4, #8
		bdaddr += 6;
   1aba2:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1aba6:	d1ef      	bne.n	1ab88 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1aba8:	4b03      	ldr	r3, [pc, #12]	; (1abb8 <radio_filter_configure+0x34>)
   1abaa:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
}
   1abae:	bc30      	pop	{r4, r5}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1abb0:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1abb4:	4770      	bx	lr
   1abb6:	bf00      	nop
   1abb8:	40001000 	.word	0x40001000

0001abbc <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1abbc:	4a03      	ldr	r2, [pc, #12]	; (1abcc <radio_filter_disable+0x10>)
   1abbe:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1abc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1abc6:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1abca:	4770      	bx	lr
   1abcc:	40001000 	.word	0x40001000

0001abd0 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1abd0:	4b02      	ldr	r3, [pc, #8]	; (1abdc <radio_filter_status_reset+0xc>)
   1abd2:	2200      	movs	r2, #0
   1abd4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1abd8:	4770      	bx	lr
   1abda:	bf00      	nop
   1abdc:	40001000 	.word	0x40001000

0001abe0 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1abe0:	4b03      	ldr	r3, [pc, #12]	; (1abf0 <radio_filter_has_match+0x10>)
   1abe2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1abe6:	3800      	subs	r0, #0
   1abe8:	bf18      	it	ne
   1abea:	2001      	movne	r0, #1
   1abec:	4770      	bx	lr
   1abee:	bf00      	nop
   1abf0:	40001000 	.word	0x40001000

0001abf4 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1abf4:	4b01      	ldr	r3, [pc, #4]	; (1abfc <radio_filter_match_get+0x8>)
   1abf6:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1abfa:	4770      	bx	lr
   1abfc:	40001000 	.word	0x40001000

0001ac00 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1ac00:	4904      	ldr	r1, [pc, #16]	; (1ac14 <radio_tmr_status_reset+0x14>)
   1ac02:	4b05      	ldr	r3, [pc, #20]	; (1ac18 <radio_tmr_status_reset+0x18>)
   1ac04:	4a05      	ldr	r2, [pc, #20]	; (1ac1c <radio_tmr_status_reset+0x1c>)
   1ac06:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1ac0a:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1ac0e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1ac12:	4770      	bx	lr
   1ac14:	4000b000 	.word	0x4000b000
   1ac18:	4001f000 	.word	0x4001f000
   1ac1c:	0e742060 	.word	0x0e742060

0001ac20 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1ac20:	4b03      	ldr	r3, [pc, #12]	; (1ac30 <radio_tmr_tifs_set+0x10>)
   1ac22:	4a04      	ldr	r2, [pc, #16]	; (1ac34 <radio_tmr_tifs_set+0x14>)
   1ac24:	781b      	ldrb	r3, [r3, #0]
   1ac26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1ac2a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1ac2e:	4770      	bx	lr
   1ac30:	20006847 	.word	0x20006847
   1ac34:	40009000 	.word	0x40009000

0001ac38 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1ac38:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1ac3a:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1ac3e:	4d2a      	ldr	r5, [pc, #168]	; (1ace8 <radio_tmr_start+0xb0>)
   1ac40:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1ac44:	42ab      	cmp	r3, r5
{
   1ac46:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1ac48:	d906      	bls.n	1ac58 <radio_tmr_start+0x20>
		ticks_start--;
		remainder += 30517578UL;
   1ac4a:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1ac4e:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   1ac52:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
		ticks_start--;
   1ac56:	3901      	subs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ac58:	4d24      	ldr	r5, [pc, #144]	; (1acec <radio_tmr_start+0xb4>)
	}
	remainder /= 1000000UL;

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1ac5a:	4b25      	ldr	r3, [pc, #148]	; (1acf0 <radio_tmr_start+0xb8>)
	remainder /= 1000000UL;
   1ac5c:	4825      	ldr	r0, [pc, #148]	; (1acf4 <radio_tmr_start+0xbc>)
   1ac5e:	2601      	movs	r6, #1
   1ac60:	602e      	str	r6, [r5, #0]
	EVENT_TIMER->MODE = 0;
   1ac62:	2600      	movs	r6, #0
   1ac64:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->CC[ch] = cc_val;
   1ac68:	4d23      	ldr	r5, [pc, #140]	; (1acf8 <radio_tmr_start+0xc0>)
	remainder /= 1000000UL;
   1ac6a:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1ac6e:	2604      	movs	r6, #4
   1ac70:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   1ac74:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1ac76:	2602      	movs	r6, #2
   1ac78:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ac7c:	4a1f      	ldr	r2, [pc, #124]	; (1acfc <radio_tmr_start+0xc4>)
    p_reg->CC[cc_channel] = cc_value;
   1ac7e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1ac82:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1ac86:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1ac8a:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
   1ac8e:	491c      	ldr	r1, [pc, #112]	; (1ad00 <radio_tmr_start+0xc8>)
   1ac90:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538
    p_reg->CHENSET = mask;
   1ac94:	2120      	movs	r1, #32
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ac96:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   1ac9a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1ac9e:	b1e4      	cbz	r4, 1acda <radio_tmr_start+0xa2>
    p_reg->CHENCLR = mask;
   1aca0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1aca4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1aca8:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1acac:	4a13      	ldr	r2, [pc, #76]	; (1acfc <radio_tmr_start+0xc4>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1acae:	4b15      	ldr	r3, [pc, #84]	; (1ad04 <radio_tmr_start+0xcc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1acb0:	4915      	ldr	r1, [pc, #84]	; (1ad08 <radio_tmr_start+0xd0>)
   1acb2:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   1acb6:	2500      	movs	r5, #0
   1acb8:	2401      	movs	r4, #1
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1acba:	4e14      	ldr	r6, [pc, #80]	; (1ad0c <radio_tmr_start+0xd4>)
   1acbc:	600c      	str	r4, [r1, #0]
	SW_SWITCH_TIMER->PRESCALER = 4;
   1acbe:	2704      	movs	r7, #4
	SW_SWITCH_TIMER->MODE = 0;
   1acc0:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1acc4:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1acc8:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
   1accc:	601c      	str	r4, [r3, #0]
   1acce:	f8c2 6548 	str.w	r6, [r2, #1352]	; 0x548
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1acd2:	bcf0      	pop	{r4, r5, r6, r7}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1acd4:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
   1acd8:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1acda:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1acde:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1ace2:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   1ace6:	e7e1      	b.n	1acac <radio_tmr_start+0x74>
   1ace8:	7ff0bdbf 	.word	0x7ff0bdbf
   1acec:	4000800c 	.word	0x4000800c
   1acf0:	40008000 	.word	0x40008000
   1acf4:	431bde83 	.word	0x431bde83
   1acf8:	4000b000 	.word	0x4000b000
   1acfc:	4001f000 	.word	0x4001f000
   1ad00:	4000b148 	.word	0x4000b148
   1ad04:	40009000 	.word	0x40009000
   1ad08:	4000900c 	.word	0x4000900c
   1ad0c:	4000110c 	.word	0x4000110c

0001ad10 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1ad10:	4b01      	ldr	r3, [pc, #4]	; (1ad18 <radio_tmr_start_get+0x8>)
   1ad12:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1ad16:	4770      	bx	lr
   1ad18:	4000b000 	.word	0x4000b000

0001ad1c <radio_tmr_stop>:

void radio_tmr_stop(void)
{
   1ad1c:	b410      	push	{r4}
   1ad1e:	4805      	ldr	r0, [pc, #20]	; (1ad34 <radio_tmr_stop+0x18>)
   1ad20:	4c05      	ldr	r4, [pc, #20]	; (1ad38 <radio_tmr_stop+0x1c>)
   1ad22:	4906      	ldr	r1, [pc, #24]	; (1ad3c <radio_tmr_stop+0x20>)
   1ad24:	4a06      	ldr	r2, [pc, #24]	; (1ad40 <radio_tmr_stop+0x24>)
   1ad26:	2301      	movs	r3, #1
   1ad28:	6023      	str	r3, [r4, #0]
   1ad2a:	6003      	str	r3, [r0, #0]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1ad2c:	bc10      	pop	{r4}
   1ad2e:	600b      	str	r3, [r1, #0]
   1ad30:	6013      	str	r3, [r2, #0]
   1ad32:	4770      	bx	lr
   1ad34:	40008010 	.word	0x40008010
   1ad38:	40008004 	.word	0x40008004
   1ad3c:	40009004 	.word	0x40009004
   1ad40:	40009010 	.word	0x40009010

0001ad44 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1ad44:	4904      	ldr	r1, [pc, #16]	; (1ad58 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   1ad46:	4b05      	ldr	r3, [pc, #20]	; (1ad5c <radio_tmr_hcto_configure+0x18>)
   1ad48:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1ad4c:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1ad50:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1ad54:	4770      	bx	lr
   1ad56:	bf00      	nop
   1ad58:	40008000 	.word	0x40008000
   1ad5c:	4001f000 	.word	0x4001f000

0001ad60 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ad60:	4b05      	ldr	r3, [pc, #20]	; (1ad78 <radio_tmr_aa_capture+0x18>)
   1ad62:	4806      	ldr	r0, [pc, #24]	; (1ad7c <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ad64:	4906      	ldr	r1, [pc, #24]	; (1ad80 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   1ad66:	4a07      	ldr	r2, [pc, #28]	; (1ad84 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ad68:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ad6c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1ad70:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1ad74:	4770      	bx	lr
   1ad76:	bf00      	nop
   1ad78:	4001f000 	.word	0x4001f000
   1ad7c:	40001100 	.word	0x40001100
   1ad80:	40008040 	.word	0x40008040
   1ad84:	04000040 	.word	0x04000040

0001ad88 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1ad88:	4b01      	ldr	r3, [pc, #4]	; (1ad90 <radio_tmr_aa_get+0x8>)
   1ad8a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1ad8e:	4770      	bx	lr
   1ad90:	40008000 	.word	0x40008000

0001ad94 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1ad94:	4b01      	ldr	r3, [pc, #4]	; (1ad9c <radio_tmr_aa_save+0x8>)
   1ad96:	6018      	str	r0, [r3, #0]
}
   1ad98:	4770      	bx	lr
   1ad9a:	bf00      	nop
   1ad9c:	20003d88 	.word	0x20003d88

0001ada0 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1ada0:	4b01      	ldr	r3, [pc, #4]	; (1ada8 <radio_tmr_aa_restore+0x8>)
}
   1ada2:	6818      	ldr	r0, [r3, #0]
   1ada4:	4770      	bx	lr
   1ada6:	bf00      	nop
   1ada8:	20003d88 	.word	0x20003d88

0001adac <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1adac:	4b01      	ldr	r3, [pc, #4]	; (1adb4 <radio_tmr_ready_get+0x8>)
   1adae:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1adb2:	4770      	bx	lr
   1adb4:	40008000 	.word	0x40008000

0001adb8 <radio_tmr_end_capture>:
   1adb8:	4b02      	ldr	r3, [pc, #8]	; (1adc4 <radio_tmr_end_capture+0xc>)
   1adba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1adbe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1adc2:	4770      	bx	lr
   1adc4:	4001f000 	.word	0x4001f000

0001adc8 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1adc8:	4b01      	ldr	r3, [pc, #4]	; (1add0 <radio_tmr_end_get+0x8>)
   1adca:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1adce:	4770      	bx	lr
   1add0:	40008000 	.word	0x40008000

0001add4 <radio_tmr_tifs_base_get>:
   1add4:	4b01      	ldr	r3, [pc, #4]	; (1addc <radio_tmr_tifs_base_get+0x8>)
   1add6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1adda:	4770      	bx	lr
   1addc:	40008000 	.word	0x40008000

0001ade0 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   1ade0:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ade2:	4b21      	ldr	r3, [pc, #132]	; (1ae68 <radio_ccm_rx_pkt_set+0x88>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1ade4:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ade6:	2500      	movs	r5, #0
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   1ade8:	42a1      	cmp	r1, r4
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1adea:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
{
   1adee:	4606      	mov	r6, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1adf0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	switch (phy) {
   1adf4:	d035      	beq.n	1ae62 <radio_ccm_rx_pkt_set+0x82>
   1adf6:	2904      	cmp	r1, #4
   1adf8:	d131      	bne.n	1ae5e <radio_ccm_rx_pkt_set+0x7e>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1adfa:	491c      	ldr	r1, [pc, #112]	; (1ae6c <radio_ccm_rx_pkt_set+0x8c>)
   1adfc:	4c1c      	ldr	r4, [pc, #112]	; (1ae70 <radio_ccm_rx_pkt_set+0x90>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1adfe:	481d      	ldr	r0, [pc, #116]	; (1ae74 <radio_ccm_rx_pkt_set+0x94>)
	case BIT(2):
		mode |= (CCM_MODE_DATARATE_125Kbps <<
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;

		NRF_CCM->RATEOVERRIDE =
   1ae00:	2503      	movs	r5, #3
   1ae02:	f8c3 551c 	str.w	r5, [r3, #1308]	; 0x51c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ae06:	f8c1 4578 	str.w	r4, [r1, #1400]	; 0x578
    p_reg->CHENSET = mask;
   1ae0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		mode |= (CCM_MODE_DATARATE_125Kbps <<
   1ae0e:	4c1a      	ldr	r4, [pc, #104]	; (1ae78 <radio_ccm_rx_pkt_set+0x98>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ae10:	f8c1 057c 	str.w	r0, [r1, #1404]	; 0x57c
    p_reg->CHENSET = mask;
   1ae14:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1ae18:	4918      	ldr	r1, [pc, #96]	; (1ae7c <radio_ccm_rx_pkt_set+0x9c>)
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   1ae1a:	4b13      	ldr	r3, [pc, #76]	; (1ae68 <radio_ccm_rx_pkt_set+0x88>)
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1ae1c:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1ae20:	4817      	ldr	r0, [pc, #92]	; (1ae80 <radio_ccm_rx_pkt_set+0xa0>)
   1ae22:	4d12      	ldr	r5, [pc, #72]	; (1ae6c <radio_ccm_rx_pkt_set+0x8c>)
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1ae24:	4f17      	ldr	r7, [pc, #92]	; (1ae84 <radio_ccm_rx_pkt_set+0xa4>)
   1ae26:	b2c9      	uxtb	r1, r1
	NRF_CCM->MAXPACKETSIZE = max_len;
   1ae28:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
	NRF_CCM->MODE = mode;
   1ae2c:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->SHORTS = 0;
   1ae30:	2100      	movs	r1, #0
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1ae32:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   1ae36:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1ae3a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1ae3e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ae42:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1ae44:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   1ae48:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1ae4c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1ae50:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1ae54:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1ae58:	bcf0      	pop	{r4, r5, r6, r7}
   1ae5a:	601a      	str	r2, [r3, #0]
   1ae5c:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1ae5e:	4c0a      	ldr	r4, [pc, #40]	; (1ae88 <radio_ccm_rx_pkt_set+0xa8>)
   1ae60:	e7da      	b.n	1ae18 <radio_ccm_rx_pkt_set+0x38>
	switch (phy) {
   1ae62:	4c0a      	ldr	r4, [pc, #40]	; (1ae8c <radio_ccm_rx_pkt_set+0xac>)
   1ae64:	e7d8      	b.n	1ae18 <radio_ccm_rx_pkt_set+0x38>
   1ae66:	bf00      	nop
   1ae68:	4000f000 	.word	0x4000f000
   1ae6c:	4001f000 	.word	0x4001f000
   1ae70:	40001150 	.word	0x40001150
   1ae74:	4000f00c 	.word	0x4000f00c
   1ae78:	01020001 	.word	0x01020001
   1ae7c:	40001000 	.word	0x40001000
   1ae80:	20003c7c 	.word	0x20003c7c
   1ae84:	20003b6c 	.word	0x20003b6c
   1ae88:	01000001 	.word	0x01000001
   1ae8c:	01010001 	.word	0x01010001

0001ae90 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   1ae90:	b470      	push	{r4, r5, r6}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ae92:	4b10      	ldr	r3, [pc, #64]	; (1aed4 <radio_ccm_tx_pkt_set+0x44>)
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1ae94:	4d10      	ldr	r5, [pc, #64]	; (1aed8 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->MODE = mode;
   1ae96:	4e11      	ldr	r6, [pc, #68]	; (1aedc <radio_ccm_tx_pkt_set+0x4c>)
{
   1ae98:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ae9a:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1ae9c:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ae9e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1aea2:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   1aea6:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1aeaa:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1aeae:	4e0c      	ldr	r6, [pc, #48]	; (1aee0 <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1aeb0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1aeb4:	2401      	movs	r4, #1
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1aeb6:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1aeba:	4628      	mov	r0, r5
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1aebc:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1aec0:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1aec4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1aec8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1aecc:	601c      	str	r4, [r3, #0]
}
   1aece:	bc70      	pop	{r4, r5, r6}
   1aed0:	4770      	bx	lr
   1aed2:	bf00      	nop
   1aed4:	4000f000 	.word	0x4000f000
   1aed8:	20003c7c 	.word	0x20003c7c
   1aedc:	01010000 	.word	0x01010000
   1aee0:	20003b6c 	.word	0x20003b6c

0001aee4 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1aee4:	4a0e      	ldr	r2, [pc, #56]	; (1af20 <radio_ccm_is_done+0x3c>)
   1aee6:	2302      	movs	r3, #2
   1aee8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1aeec:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1aef0:	b933      	cbnz	r3, 1af00 <radio_ccm_is_done+0x1c>
		__WFE();
   1aef2:	bf20      	wfe
		__SEV();
   1aef4:	bf40      	sev
		__WFE();
   1aef6:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1aef8:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1aefc:	2b00      	cmp	r3, #0
   1aefe:	d0f8      	beq.n	1aef2 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1af00:	4b07      	ldr	r3, [pc, #28]	; (1af20 <radio_ccm_is_done+0x3c>)
   1af02:	4a08      	ldr	r2, [pc, #32]	; (1af24 <radio_ccm_is_done+0x40>)
   1af04:	2002      	movs	r0, #2
   1af06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1af0a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1af0e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1af12:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1af16:	fab0 f080 	clz	r0, r0
   1af1a:	0940      	lsrs	r0, r0, #5
   1af1c:	4770      	bx	lr
   1af1e:	bf00      	nop
   1af20:	4000f000 	.word	0x4000f000
   1af24:	e000e100 	.word	0xe000e100

0001af28 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1af28:	4b03      	ldr	r3, [pc, #12]	; (1af38 <radio_ccm_mic_is_valid+0x10>)
   1af2a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1af2e:	3800      	subs	r0, #0
   1af30:	bf18      	it	ne
   1af32:	2001      	movne	r0, #1
   1af34:	4770      	bx	lr
   1af36:	bf00      	nop
   1af38:	4000f000 	.word	0x4000f000

0001af3c <radio_ar_configure>:

static uint8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(uint32_t nirk, void *irk, uint8_t flags)
{
   1af3c:	b4f0      	push	{r4, r5, r6, r7}
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > BIT(0))))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1af3e:	4c18      	ldr	r4, [pc, #96]	; (1afa0 <radio_ar_configure+0x64>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == BIT(2))) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1af40:	4b18      	ldr	r3, [pc, #96]	; (1afa4 <radio_ar_configure+0x68>)
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1af42:	f8d4 5504 	ldr.w	r5, [r4, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1af46:	4e18      	ldr	r6, [pc, #96]	; (1afa8 <radio_ar_configure+0x6c>)
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == BIT(2))) {
   1af48:	0892      	lsrs	r2, r2, #2
   1af4a:	2a04      	cmp	r2, #4
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1af4c:	f04f 0203 	mov.w	r2, #3
   1af50:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1af54:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff

	NRF_AAR->EVENTS_END = 0;
   1af58:	f04f 0200 	mov.w	r2, #0
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == BIT(2))) {
   1af5c:	bf14      	ite	ne
   1af5e:	2740      	movne	r7, #64	; 0x40
   1af60:	2745      	moveq	r7, #69	; 0x45
	NRF_AAR->NIRK = nirk;
   1af62:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1af66:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = addrptr;
   1af6a:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1af6e:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1af72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1af76:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1af7a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    p_reg->BCC = radio_bcc;
   1af7e:	f8c4 7560 	str.w	r7, [r4, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1af82:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   1af86:	4909      	ldr	r1, [pc, #36]	; (1afac <radio_ar_configure+0x70>)
   1af88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1af8c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1af90:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1af94:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1af98:	bcf0      	pop	{r4, r5, r6, r7}
   1af9a:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   1af9e:	4770      	bx	lr
   1afa0:	40001000 	.word	0x40001000
   1afa4:	4000f000 	.word	0x4000f000
   1afa8:	20003b68 	.word	0x20003b68
   1afac:	4001f000 	.word	0x4001f000

0001afb0 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1afb0:	4b01      	ldr	r3, [pc, #4]	; (1afb8 <radio_ar_match_get+0x8>)
   1afb2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1afb6:	4770      	bx	lr
   1afb8:	4000f000 	.word	0x4000f000

0001afbc <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   1afbc:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1afbe:	4807      	ldr	r0, [pc, #28]	; (1afdc <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1afc0:	4c07      	ldr	r4, [pc, #28]	; (1afe0 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   1afc2:	4a08      	ldr	r2, [pc, #32]	; (1afe4 <radio_ar_status_reset+0x28>)
   1afc4:	2300      	movs	r3, #0
   1afc6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1afca:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1afce:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1afd2:	bc10      	pop	{r4}
   1afd4:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   1afd8:	4770      	bx	lr
   1afda:	bf00      	nop
   1afdc:	4000f000 	.word	0x4000f000
   1afe0:	40001000 	.word	0x40001000
   1afe4:	4001f000 	.word	0x4001f000

0001afe8 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1afe8:	4b08      	ldr	r3, [pc, #32]	; (1b00c <radio_ar_has_match+0x24>)
   1afea:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1afee:	b160      	cbz	r0, 1b00a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1aff0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1aff4:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1aff8:	b138      	cbz	r0, 1b00a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1affa:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1affe:	b120      	cbz	r0, 1b00a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1b000:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1b004:	fab0 f080 	clz	r0, r0
   1b008:	0940      	lsrs	r0, r0, #5
}
   1b00a:	4770      	bx	lr
   1b00c:	40001000 	.word	0x40001000

0001b010 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1b010:	2902      	cmp	r1, #2
{
   1b012:	b510      	push	{r4, lr}
   1b014:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1b016:	d00b      	beq.n	1b030 <mayfly_enable_cb+0x20>
   1b018:	4a0a      	ldr	r2, [pc, #40]	; (1b044 <mayfly_enable_cb+0x34>)
   1b01a:	490b      	ldr	r1, [pc, #44]	; (1b048 <mayfly_enable_cb+0x38>)
   1b01c:	480b      	ldr	r0, [pc, #44]	; (1b04c <mayfly_enable_cb+0x3c>)
   1b01e:	231f      	movs	r3, #31
   1b020:	f004 f818 	bl	1f054 <printk>
   1b024:	4040      	eors	r0, r0
   1b026:	f380 8811 	msr	BASEPRI, r0
   1b02a:	f04f 0003 	mov.w	r0, #3
   1b02e:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1b030:	200b      	movs	r0, #11
	if (enable) {
   1b032:	b11c      	cbz	r4, 1b03c <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1b034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1b038:	f7ec bb88 	b.w	774c <arch_irq_enable>
}
   1b03c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1b040:	f7ec bb94 	b.w	776c <arch_irq_disable>
   1b044:	000262c8 	.word	0x000262c8
   1b048:	00026318 	.word	0x00026318
   1b04c:	0002561c 	.word	0x0002561c

0001b050 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1b050:	b129      	cbz	r1, 1b05e <mayfly_is_enabled+0xe>
   1b052:	3901      	subs	r1, #1
   1b054:	2901      	cmp	r1, #1
   1b056:	d805      	bhi.n	1b064 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1b058:	200b      	movs	r0, #11
   1b05a:	f7ec bb9b 	b.w	7794 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1b05e:	2018      	movs	r0, #24
   1b060:	f7ec bb98 	b.w	7794 <arch_irq_is_enabled>
{
   1b064:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1b066:	4a07      	ldr	r2, [pc, #28]	; (1b084 <mayfly_is_enabled+0x34>)
   1b068:	4907      	ldr	r1, [pc, #28]	; (1b088 <mayfly_is_enabled+0x38>)
   1b06a:	4808      	ldr	r0, [pc, #32]	; (1b08c <mayfly_is_enabled+0x3c>)
   1b06c:	2337      	movs	r3, #55	; 0x37
   1b06e:	f003 fff1 	bl	1f054 <printk>
   1b072:	4040      	eors	r0, r0
   1b074:	f380 8811 	msr	BASEPRI, r0
   1b078:	f04f 0003 	mov.w	r0, #3
   1b07c:	df02      	svc	2
		break;
	}

	return 0;
}
   1b07e:	2000      	movs	r0, #0
   1b080:	bd08      	pop	{r3, pc}
   1b082:	bf00      	nop
   1b084:	000262c8 	.word	0x000262c8
   1b088:	0002568c 	.word	0x0002568c
   1b08c:	0002561c 	.word	0x0002561c

0001b090 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1b090:	4288      	cmp	r0, r1
   1b092:	d013      	beq.n	1b0bc <mayfly_prio_is_equal+0x2c>
	return (caller_id == callee_id) ||
   1b094:	b928      	cbnz	r0, 1b0a2 <mayfly_prio_is_equal+0x12>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   1b096:	1e48      	subs	r0, r1, #1
   1b098:	2801      	cmp	r0, #1
   1b09a:	bf8c      	ite	hi
   1b09c:	2000      	movhi	r0, #0
   1b09e:	2001      	movls	r0, #1
   1b0a0:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1b0a2:	2801      	cmp	r0, #1
   1b0a4:	d106      	bne.n	1b0b4 <mayfly_prio_is_equal+0x24>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1b0a6:	b159      	cbz	r1, 1b0c0 <mayfly_prio_is_equal+0x30>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1b0a8:	f1a1 0002 	sub.w	r0, r1, #2
   1b0ac:	fab0 f080 	clz	r0, r0
   1b0b0:	0940      	lsrs	r0, r0, #5
   1b0b2:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1b0b4:	2802      	cmp	r0, #2
   1b0b6:	d004      	beq.n	1b0c2 <mayfly_prio_is_equal+0x32>
   1b0b8:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1b0ba:	4770      	bx	lr
   1b0bc:	2001      	movs	r0, #1
   1b0be:	4770      	bx	lr
#endif
	       0;
}
   1b0c0:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1b0c2:	2901      	cmp	r1, #1
   1b0c4:	bf8c      	ite	hi
   1b0c6:	2000      	movhi	r0, #0
   1b0c8:	2001      	movls	r0, #1
   1b0ca:	4770      	bx	lr

0001b0cc <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1b0cc:	2901      	cmp	r1, #1
{
   1b0ce:	b508      	push	{r3, lr}
	switch (callee_id) {
   1b0d0:	d00f      	beq.n	1b0f2 <mayfly_pend+0x26>
   1b0d2:	2902      	cmp	r1, #2
   1b0d4:	d00d      	beq.n	1b0f2 <mayfly_pend+0x26>
   1b0d6:	b191      	cbz	r1, 1b0fe <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1b0d8:	4a0c      	ldr	r2, [pc, #48]	; (1b10c <mayfly_pend+0x40>)
   1b0da:	490d      	ldr	r1, [pc, #52]	; (1b110 <mayfly_pend+0x44>)
   1b0dc:	480d      	ldr	r0, [pc, #52]	; (1b114 <mayfly_pend+0x48>)
   1b0de:	2368      	movs	r3, #104	; 0x68
   1b0e0:	f003 ffb8 	bl	1f054 <printk>
   1b0e4:	4040      	eors	r0, r0
   1b0e6:	f380 8811 	msr	BASEPRI, r0
   1b0ea:	f04f 0003 	mov.w	r0, #3
   1b0ee:	df02      	svc	2
		break;
	}
}
   1b0f0:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b0f2:	4b09      	ldr	r3, [pc, #36]	; (1b118 <mayfly_pend+0x4c>)
   1b0f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1b0f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1b0fc:	bd08      	pop	{r3, pc}
   1b0fe:	4b06      	ldr	r3, [pc, #24]	; (1b118 <mayfly_pend+0x4c>)
   1b100:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1b104:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1b108:	bd08      	pop	{r3, pc}
   1b10a:	bf00      	nop
   1b10c:	000262c8 	.word	0x000262c8
   1b110:	0002568c 	.word	0x0002568c
   1b114:	0002561c 	.word	0x0002561c
   1b118:	e000e100 	.word	0xe000e100

0001b11c <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1b11c:	2803      	cmp	r0, #3
{
   1b11e:	b510      	push	{r4, lr}
   1b120:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1b122:	d804      	bhi.n	1b12e <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1b124:	4b11      	ldr	r3, [pc, #68]	; (1b16c <hal_ticker_instance0_caller_id_get+0x50>)
   1b126:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1b128:	b18c      	cbz	r4, 1b14e <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1b12a:	4620      	mov	r0, r4
   1b12c:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1b12e:	4a10      	ldr	r2, [pc, #64]	; (1b170 <hal_ticker_instance0_caller_id_get+0x54>)
   1b130:	4910      	ldr	r1, [pc, #64]	; (1b174 <hal_ticker_instance0_caller_id_get+0x58>)
   1b132:	4811      	ldr	r0, [pc, #68]	; (1b178 <hal_ticker_instance0_caller_id_get+0x5c>)
   1b134:	232b      	movs	r3, #43	; 0x2b
   1b136:	f003 ff8d 	bl	1f054 <printk>
   1b13a:	4040      	eors	r0, r0
   1b13c:	f380 8811 	msr	BASEPRI, r0
   1b140:	f04f 0003 	mov.w	r0, #3
   1b144:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1b146:	4b09      	ldr	r3, [pc, #36]	; (1b16c <hal_ticker_instance0_caller_id_get+0x50>)
   1b148:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1b14a:	2c00      	cmp	r4, #0
   1b14c:	d1ed      	bne.n	1b12a <hal_ticker_instance0_caller_id_get+0xe>
   1b14e:	4a08      	ldr	r2, [pc, #32]	; (1b170 <hal_ticker_instance0_caller_id_get+0x54>)
   1b150:	490a      	ldr	r1, [pc, #40]	; (1b17c <hal_ticker_instance0_caller_id_get+0x60>)
   1b152:	4809      	ldr	r0, [pc, #36]	; (1b178 <hal_ticker_instance0_caller_id_get+0x5c>)
   1b154:	232e      	movs	r3, #46	; 0x2e
   1b156:	f003 ff7d 	bl	1f054 <printk>
   1b15a:	4040      	eors	r0, r0
   1b15c:	f380 8811 	msr	BASEPRI, r0
   1b160:	f04f 0003 	mov.w	r0, #3
   1b164:	df02      	svc	2
}
   1b166:	4620      	mov	r0, r4
   1b168:	bd10      	pop	{r4, pc}
   1b16a:	bf00      	nop
   1b16c:	000263d0 	.word	0x000263d0
   1b170:	0002633c 	.word	0x0002633c
   1b174:	0002638c 	.word	0x0002638c
   1b178:	0002561c 	.word	0x0002561c
   1b17c:	000263ac 	.word	0x000263ac

0001b180 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1b180:	3801      	subs	r0, #1
{
   1b182:	b510      	push	{r4, lr}
   1b184:	461c      	mov	r4, r3
   1b186:	2804      	cmp	r0, #4
   1b188:	d855      	bhi.n	1b236 <hal_ticker_instance0_sched+0xb6>
   1b18a:	e8df f000 	tbb	[pc, r0]
   1b18e:	1a12      	.short	0x1a12
   1b190:	1e16      	.short	0x1e16
   1b192:	03          	.byte	0x03
   1b193:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1b194:	2904      	cmp	r1, #4
   1b196:	d01e      	beq.n	1b1d6 <hal_ticker_instance0_sched+0x56>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1b198:	23ba      	movs	r3, #186	; 0xba
			break;
		}
		break;

	default:
		LL_ASSERT(0);
   1b19a:	4a28      	ldr	r2, [pc, #160]	; (1b23c <hal_ticker_instance0_sched+0xbc>)
   1b19c:	4928      	ldr	r1, [pc, #160]	; (1b240 <hal_ticker_instance0_sched+0xc0>)
   1b19e:	4829      	ldr	r0, [pc, #164]	; (1b244 <hal_ticker_instance0_sched+0xc4>)
   1b1a0:	f003 ff58 	bl	1f054 <printk>
   1b1a4:	4040      	eors	r0, r0
   1b1a6:	f380 8811 	msr	BASEPRI, r0
   1b1aa:	f04f 0003 	mov.w	r0, #3
   1b1ae:	df02      	svc	2
		break;
	}
}
   1b1b0:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1b1b2:	2904      	cmp	r1, #4
   1b1b4:	d01f      	beq.n	1b1f6 <hal_ticker_instance0_sched+0x76>
			LL_ASSERT(0);
   1b1b6:	234e      	movs	r3, #78	; 0x4e
   1b1b8:	e7ef      	b.n	1b19a <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1b1ba:	2904      	cmp	r1, #4
   1b1bc:	d013      	beq.n	1b1e6 <hal_ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   1b1be:	237c      	movs	r3, #124	; 0x7c
   1b1c0:	e7eb      	b.n	1b19a <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1b1c2:	2903      	cmp	r1, #3
   1b1c4:	d01f      	beq.n	1b206 <hal_ticker_instance0_sched+0x86>
			LL_ASSERT(0);
   1b1c6:	2365      	movs	r3, #101	; 0x65
   1b1c8:	e7e7      	b.n	1b19a <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1b1ca:	2903      	cmp	r1, #3
   1b1cc:	d02b      	beq.n	1b226 <hal_ticker_instance0_sched+0xa6>
   1b1ce:	2904      	cmp	r1, #4
   1b1d0:	d021      	beq.n	1b216 <hal_ticker_instance0_sched+0x96>
			LL_ASSERT(0);
   1b1d2:	23a2      	movs	r3, #162	; 0xa2
   1b1d4:	e7e1      	b.n	1b19a <hal_ticker_instance0_sched+0x1a>
			m.param = instance;
   1b1d6:	4b1c      	ldr	r3, [pc, #112]	; (1b248 <hal_ticker_instance0_sched+0xc8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1b1d8:	2102      	movs	r1, #2
			m.param = instance;
   1b1da:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1b1dc:	2003      	movs	r0, #3
}
   1b1de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1b1e2:	f7f4 bc0f 	b.w	fa04 <mayfly_enqueue>
			m.param = instance;
   1b1e6:	4b19      	ldr	r3, [pc, #100]	; (1b24c <hal_ticker_instance0_sched+0xcc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1b1e8:	2102      	movs	r1, #2
			m.param = instance;
   1b1ea:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1b1ec:	2001      	movs	r0, #1
}
   1b1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1b1f2:	f7f4 bc07 	b.w	fa04 <mayfly_enqueue>
			m.param = instance;
   1b1f6:	4b16      	ldr	r3, [pc, #88]	; (1b250 <hal_ticker_instance0_sched+0xd0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1b1f8:	2102      	movs	r1, #2
			m.param = instance;
   1b1fa:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1b1fc:	2000      	movs	r0, #0
}
   1b1fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1b202:	f7f4 bbff 	b.w	fa04 <mayfly_enqueue>
			m.param = instance;
   1b206:	4b13      	ldr	r3, [pc, #76]	; (1b254 <hal_ticker_instance0_sched+0xd4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1b208:	2101      	movs	r1, #1
			m.param = instance;
   1b20a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1b20c:	4608      	mov	r0, r1
}
   1b20e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1b212:	f7f4 bbf7 	b.w	fa04 <mayfly_enqueue>
			m.param = instance;
   1b216:	4b10      	ldr	r3, [pc, #64]	; (1b258 <hal_ticker_instance0_sched+0xd8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1b218:	2102      	movs	r1, #2
			m.param = instance;
   1b21a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1b21c:	4608      	mov	r0, r1
}
   1b21e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1b222:	f7f4 bbef 	b.w	fa04 <mayfly_enqueue>
			m.param = instance;
   1b226:	4b0d      	ldr	r3, [pc, #52]	; (1b25c <hal_ticker_instance0_sched+0xdc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1b228:	2101      	movs	r1, #1
			m.param = instance;
   1b22a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1b22c:	2002      	movs	r0, #2
}
   1b22e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1b232:	f7f4 bbe7 	b.w	fa04 <mayfly_enqueue>
		LL_ASSERT(0);
   1b236:	23c0      	movs	r3, #192	; 0xc0
   1b238:	e7af      	b.n	1b19a <hal_ticker_instance0_sched+0x1a>
   1b23a:	bf00      	nop
   1b23c:	0002633c 	.word	0x0002633c
   1b240:	0002568c 	.word	0x0002568c
   1b244:	0002561c 	.word	0x0002561c
   1b248:	20000630 	.word	0x20000630
   1b24c:	20000600 	.word	0x20000600
   1b250:	200005e0 	.word	0x200005e0
   1b254:	200005f0 	.word	0x200005f0
   1b258:	20000620 	.word	0x20000620
   1b25c:	20000610 	.word	0x20000610

0001b260 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1b260:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1b262:	2000      	movs	r0, #0
   1b264:	f7ff b95c 	b.w	1a520 <cntr_cmp_set>

0001b268 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1b268:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b26c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1b270:	3201      	adds	r2, #1
   1b272:	d008      	beq.n	1b286 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1b274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b278:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1b27c:	f013 0301 	ands.w	r3, r3, #1
   1b280:	d10f      	bne.n	1b2a2 <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   1b282:	2000      	movs	r0, #0
   1b284:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1b286:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1b28a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b28e:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1b290:	4293      	cmp	r3, r2
   1b292:	d0f6      	beq.n	1b282 <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1b294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b298:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1b29c:	f013 0301 	ands.w	r3, r3, #1
   1b2a0:	d0ef      	beq.n	1b282 <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1b2a2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	sys_put_le16(val >> 16, &dst[2]);
   1b2a6:	0c19      	lsrs	r1, r3, #16
{
   1b2a8:	b510      	push	{r4, lr}
	dst[0] = val;
   1b2aa:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1b2ac:	0a0c      	lsrs	r4, r1, #8
   1b2ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1b2b2:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1b2b4:	70c4      	strb	r4, [r0, #3]
   1b2b6:	7043      	strb	r3, [r0, #1]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1b2b8:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1b2bc:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1b2be:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1b2c2:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b2c6:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1b2c8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1b2cc:	3301      	adds	r3, #1
   1b2ce:	d035      	beq.n	1b33c <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1b2d0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1b2d4:	3301      	adds	r3, #1
   1b2d6:	d031      	beq.n	1b33c <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1b2d8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1b2dc:	3301      	adds	r3, #1
   1b2de:	d02d      	beq.n	1b33c <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1b2e0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1b2e4:	3301      	adds	r3, #1
   1b2e6:	d029      	beq.n	1b33c <hci_vendor_read_static_addr+0xd4>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1b2e8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1b2ec:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1b2ee:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1b2f0:	0a0c      	lsrs	r4, r1, #8
   1b2f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1b2f6:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1b2f8:	7244      	strb	r4, [r0, #9]
   1b2fa:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1b2fc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1b300:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   1b302:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1b304:	0a0c      	lsrs	r4, r1, #8
   1b306:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1b30a:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1b30c:	7344      	strb	r4, [r0, #13]
   1b30e:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1b310:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1b314:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   1b316:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1b318:	0a0c      	lsrs	r4, r1, #8
   1b31a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1b31e:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1b320:	7444      	strb	r4, [r0, #17]
   1b322:	73c3      	strb	r3, [r0, #15]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1b324:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   1b328:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   1b32a:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1b32c:	0a11      	lsrs	r1, r2, #8
   1b32e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1b332:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1b334:	7541      	strb	r1, [r0, #21]
   1b336:	74c3      	strb	r3, [r0, #19]
		return 1;
   1b338:	2001      	movs	r0, #1
}
   1b33a:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1b33c:	2210      	movs	r2, #16
   1b33e:	2100      	movs	r1, #0
   1b340:	3006      	adds	r0, #6
   1b342:	f006 f9db 	bl	216fc <memset>
		return 1;
   1b346:	2001      	movs	r0, #1
}
   1b348:	bd10      	pop	{r4, pc}
   1b34a:	bf00      	nop

0001b34c <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   1b34c:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1b34e:	2210      	movs	r2, #16
{
   1b350:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1b352:	2100      	movs	r1, #0
   1b354:	f006 f9d2 	bl	216fc <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1b358:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b35c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1b360:	3201      	adds	r2, #1
   1b362:	d034      	beq.n	1b3ce <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1b364:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1b368:	3201      	adds	r2, #1
   1b36a:	d030      	beq.n	1b3ce <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1b36c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1b370:	3201      	adds	r2, #1
   1b372:	d02c      	beq.n	1b3ce <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1b374:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1b378:	3201      	adds	r2, #1
   1b37a:	d028      	beq.n	1b3ce <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1b37c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   1b380:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1b382:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1b384:	0a08      	lsrs	r0, r1, #8
   1b386:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1b38a:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   1b38c:	70e0      	strb	r0, [r4, #3]
   1b38e:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1b390:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   1b394:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1b396:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1b398:	0a08      	lsrs	r0, r1, #8
   1b39a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1b39e:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   1b3a0:	71e0      	strb	r0, [r4, #7]
   1b3a2:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1b3a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   1b3a8:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1b3aa:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1b3ac:	0a08      	lsrs	r0, r1, #8
   1b3ae:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1b3b2:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   1b3b4:	7262      	strb	r2, [r4, #9]
   1b3b6:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1b3b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   1b3bc:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   1b3be:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1b3c0:	0a11      	lsrs	r1, r2, #8
   1b3c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1b3c6:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   1b3c8:	73e1      	strb	r1, [r4, #15]
   1b3ca:	7363      	strb	r3, [r4, #13]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1b3cc:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   1b3ce:	4620      	mov	r0, r4
   1b3d0:	2210      	movs	r2, #16
}
   1b3d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1b3d6:	2100      	movs	r1, #0
   1b3d8:	f006 b990 	b.w	216fc <memset>

0001b3dc <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1b3dc:	4b02      	ldr	r3, [pc, #8]	; (1b3e8 <net_buf_pool_get+0xc>)
   1b3de:	2228      	movs	r2, #40	; 0x28
   1b3e0:	fb02 3000 	mla	r0, r2, r0, r3
   1b3e4:	4770      	bx	lr
   1b3e6:	bf00      	nop
   1b3e8:	20000920 	.word	0x20000920

0001b3ec <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b3ec:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1b3ee:	4a05      	ldr	r2, [pc, #20]	; (1b404 <net_buf_id+0x18>)
   1b3f0:	2128      	movs	r1, #40	; 0x28
   1b3f2:	fb01 2303 	mla	r3, r1, r3, r2
   1b3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b3f8:	1ac0      	subs	r0, r0, r3
}
   1b3fa:	4b03      	ldr	r3, [pc, #12]	; (1b408 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1b3fc:	10c0      	asrs	r0, r0, #3
}
   1b3fe:	4358      	muls	r0, r3
   1b400:	4770      	bx	lr
   1b402:	bf00      	nop
   1b404:	20000920 	.word	0x20000920
   1b408:	aaaaaaab 	.word	0xaaaaaaab

0001b40c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1b40c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b40e:	4a0a      	ldr	r2, [pc, #40]	; (1b438 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b410:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b412:	2428      	movs	r4, #40	; 0x28
   1b414:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1b418:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b41a:	6a1b      	ldr	r3, [r3, #32]
   1b41c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1b41e:	6823      	ldr	r3, [r4, #0]
   1b420:	429a      	cmp	r2, r3
   1b422:	bf94      	ite	ls
   1b424:	600a      	strls	r2, [r1, #0]
   1b426:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1b428:	f7ff ffe0 	bl	1b3ec <net_buf_id>
   1b42c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1b430:	fb02 3000 	mla	r0, r2, r0, r3
   1b434:	bd10      	pop	{r4, pc}
   1b436:	bf00      	nop
   1b438:	20000920 	.word	0x20000920

0001b43c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1b43c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1b440:	4605      	mov	r5, r0
   1b442:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1b444:	4610      	mov	r0, r2
   1b446:	4619      	mov	r1, r3
{
   1b448:	4616      	mov	r6, r2
   1b44a:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1b44c:	f009 f8e1 	bl	24612 <z_timeout_end_calc>
   1b450:	4680      	mov	r8, r0
   1b452:	4689      	mov	r9, r1
	__asm__ volatile(
   1b454:	f04f 0320 	mov.w	r3, #32
   1b458:	f3ef 8a11 	mrs	sl, BASEPRI
   1b45c:	f383 8811 	msr	BASEPRI, r3
   1b460:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1b464:	8b6b      	ldrh	r3, [r5, #26]
   1b466:	2b00      	cmp	r3, #0
   1b468:	d054      	beq.n	1b514 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1b46a:	8b2a      	ldrh	r2, [r5, #24]
   1b46c:	429a      	cmp	r2, r3
   1b46e:	d93d      	bls.n	1b4ec <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   1b470:	2200      	movs	r2, #0
   1b472:	2300      	movs	r3, #0
   1b474:	4628      	mov	r0, r5
   1b476:	f002 fd35 	bl	1dee4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1b47a:	4604      	mov	r4, r0
   1b47c:	2800      	cmp	r0, #0
   1b47e:	d035      	beq.n	1b4ec <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   1b480:	f38a 8811 	msr	BASEPRI, sl
   1b484:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1b488:	9b01      	ldr	r3, [sp, #4]
   1b48a:	2b00      	cmp	r3, #0
   1b48c:	d052      	beq.n	1b534 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1b48e:	ea56 0307 	orrs.w	r3, r6, r7
   1b492:	d010      	beq.n	1b4b6 <net_buf_alloc_len+0x7a>
   1b494:	1c7b      	adds	r3, r7, #1
   1b496:	bf08      	it	eq
   1b498:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1b49c:	d00b      	beq.n	1b4b6 <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1b49e:	f003 fbfb 	bl	1ec98 <z_tick_get>
   1b4a2:	ebb8 0600 	subs.w	r6, r8, r0
   1b4a6:	eb69 0701 	sbc.w	r7, r9, r1
   1b4aa:	2e00      	cmp	r6, #0
   1b4ac:	f177 0300 	sbcs.w	r3, r7, #0
   1b4b0:	bfbc      	itt	lt
   1b4b2:	2600      	movlt	r6, #0
   1b4b4:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b4b6:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1b4b8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1b54c <net_buf_alloc_len+0x110>
   1b4bc:	2228      	movs	r2, #40	; 0x28
   1b4be:	fb02 8303 	mla	r3, r2, r3, r8
   1b4c2:	a901      	add	r1, sp, #4
   1b4c4:	6a1b      	ldr	r3, [r3, #32]
   1b4c6:	681b      	ldr	r3, [r3, #0]
   1b4c8:	4632      	mov	r2, r6
   1b4ca:	681d      	ldr	r5, [r3, #0]
   1b4cc:	4620      	mov	r0, r4
   1b4ce:	463b      	mov	r3, r7
   1b4d0:	47a8      	blx	r5
   1b4d2:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1b4d4:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1b4d6:	bb70      	cbnz	r0, 1b536 <net_buf_alloc_len+0xfa>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   1b4d8:	79a0      	ldrb	r0, [r4, #6]
   1b4da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1b4de:	4621      	mov	r1, r4
   1b4e0:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1b4e4:	f008 fe77 	bl	241d6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1b4e8:	462c      	mov	r4, r5
}
   1b4ea:	e01f      	b.n	1b52c <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   1b4ec:	8b68      	ldrh	r0, [r5, #26]
   1b4ee:	1e43      	subs	r3, r0, #1
   1b4f0:	836b      	strh	r3, [r5, #26]
   1b4f2:	f38a 8811 	msr	BASEPRI, sl
   1b4f6:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1b4fa:	8b2c      	ldrh	r4, [r5, #24]
   1b4fc:	1a24      	subs	r4, r4, r0
   1b4fe:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1b500:	2318      	movs	r3, #24
   1b502:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1b506:	4811      	ldr	r0, [pc, #68]	; (1b54c <net_buf_alloc_len+0x110>)
   1b508:	4b11      	ldr	r3, [pc, #68]	; (1b550 <net_buf_alloc_len+0x114>)
   1b50a:	1a2d      	subs	r5, r5, r0
   1b50c:	10ed      	asrs	r5, r5, #3
   1b50e:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1b510:	71a5      	strb	r5, [r4, #6]
		goto success;
   1b512:	e7b9      	b.n	1b488 <net_buf_alloc_len+0x4c>
   1b514:	f38a 8811 	msr	BASEPRI, sl
   1b518:	f3bf 8f6f 	isb	sy
   1b51c:	4632      	mov	r2, r6
   1b51e:	463b      	mov	r3, r7
   1b520:	4628      	mov	r0, r5
   1b522:	f002 fcdf 	bl	1dee4 <z_impl_k_queue_get>
	if (!buf) {
   1b526:	4604      	mov	r4, r0
   1b528:	2800      	cmp	r0, #0
   1b52a:	d1ad      	bne.n	1b488 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1b52c:	4620      	mov	r0, r4
   1b52e:	b002      	add	sp, #8
   1b530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   1b534:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1b536:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1b538:	2201      	movs	r2, #1
	buf->frags = NULL;
   1b53a:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1b53c:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1b53e:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1b540:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1b542:	6923      	ldr	r3, [r4, #16]
   1b544:	81e2      	strh	r2, [r4, #14]
   1b546:	60a3      	str	r3, [r4, #8]
	return buf;
   1b548:	e7f0      	b.n	1b52c <net_buf_alloc_len+0xf0>
   1b54a:	bf00      	nop
   1b54c:	20000920 	.word	0x20000920
   1b550:	cccccccd 	.word	0xcccccccd

0001b554 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1b554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b558:	4d17      	ldr	r5, [pc, #92]	; (1b5b8 <net_buf_unref+0x64>)
   1b55a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1b55c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1b55e:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1b560:	b90c      	cbnz	r4, 1b566 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1b562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1b566:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1b568:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1b56c:	3b01      	subs	r3, #1
   1b56e:	b2db      	uxtb	r3, r3
   1b570:	7123      	strb	r3, [r4, #4]
   1b572:	2b00      	cmp	r3, #0
   1b574:	d1f5      	bne.n	1b562 <net_buf_unref+0xe>
		if (buf->__buf) {
   1b576:	6921      	ldr	r1, [r4, #16]
   1b578:	b159      	cbz	r1, 1b592 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1b57a:	7963      	ldrb	r3, [r4, #5]
   1b57c:	079b      	lsls	r3, r3, #30
   1b57e:	d407      	bmi.n	1b590 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   1b580:	79a3      	ldrb	r3, [r4, #6]
   1b582:	fb07 5303 	mla	r3, r7, r3, r5
   1b586:	4620      	mov	r0, r4
   1b588:	6a1b      	ldr	r3, [r3, #32]
   1b58a:	681b      	ldr	r3, [r3, #0]
   1b58c:	689b      	ldr	r3, [r3, #8]
   1b58e:	4798      	blx	r3
			buf->__buf = NULL;
   1b590:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1b592:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1b594:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1b596:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1b59a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1b59c:	69db      	ldr	r3, [r3, #28]
   1b59e:	b11b      	cbz	r3, 1b5a8 <net_buf_unref+0x54>
			pool->destroy(buf);
   1b5a0:	4620      	mov	r0, r4
   1b5a2:	4798      	blx	r3
{
   1b5a4:	4644      	mov	r4, r8
   1b5a6:	e7db      	b.n	1b560 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1b5a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1b5ac:	4621      	mov	r1, r4
   1b5ae:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1b5b2:	f008 fe10 	bl	241d6 <k_queue_prepend>
}
   1b5b6:	e7f5      	b.n	1b5a4 <net_buf_unref+0x50>
   1b5b8:	20000920 	.word	0x20000920

0001b5bc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1b5bc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1b5be:	4b09      	ldr	r3, [pc, #36]	; (1b5e4 <gpio_nrfx_init+0x28>)
   1b5c0:	781a      	ldrb	r2, [r3, #0]
   1b5c2:	b96a      	cbnz	r2, 1b5e0 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1b5c4:	2101      	movs	r1, #1
   1b5c6:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1b5c8:	2006      	movs	r0, #6
   1b5ca:	2105      	movs	r1, #5
   1b5cc:	f7ec f8f0 	bl	77b0 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1b5d0:	2006      	movs	r0, #6
   1b5d2:	f7ec f8bb 	bl	774c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1b5d6:	4b04      	ldr	r3, [pc, #16]	; (1b5e8 <gpio_nrfx_init+0x2c>)
   1b5d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1b5dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1b5e0:	2000      	movs	r0, #0
   1b5e2:	bd08      	pop	{r3, pc}
   1b5e4:	20006848 	.word	0x20006848
   1b5e8:	40006000 	.word	0x40006000

0001b5ec <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1b5ec:	4b2b      	ldr	r3, [pc, #172]	; (1b69c <gpio_nrfx_config+0xb0>)
{
   1b5ee:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b5f0:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1b5f2:	482b      	ldr	r0, [pc, #172]	; (1b6a0 <gpio_nrfx_config+0xb4>)
   1b5f4:	4013      	ands	r3, r2
   1b5f6:	4283      	cmp	r3, r0
   1b5f8:	d041      	beq.n	1b67e <gpio_nrfx_config+0x92>
   1b5fa:	d80d      	bhi.n	1b618 <gpio_nrfx_config+0x2c>
   1b5fc:	2b06      	cmp	r3, #6
   1b5fe:	d015      	beq.n	1b62c <gpio_nrfx_config+0x40>
   1b600:	d805      	bhi.n	1b60e <gpio_nrfx_config+0x22>
   1b602:	b19b      	cbz	r3, 1b62c <gpio_nrfx_config+0x40>
   1b604:	2b02      	cmp	r3, #2
   1b606:	d03c      	beq.n	1b682 <gpio_nrfx_config+0x96>
   1b608:	f06f 0015 	mvn.w	r0, #21
   1b60c:	e036      	b.n	1b67c <gpio_nrfx_config+0x90>
   1b60e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1b612:	d1f9      	bne.n	1b608 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1b614:	2301      	movs	r3, #1
   1b616:	e009      	b.n	1b62c <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1b618:	4822      	ldr	r0, [pc, #136]	; (1b6a4 <gpio_nrfx_config+0xb8>)
   1b61a:	4283      	cmp	r3, r0
   1b61c:	d033      	beq.n	1b686 <gpio_nrfx_config+0x9a>
   1b61e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1b622:	d032      	beq.n	1b68a <gpio_nrfx_config+0x9e>
   1b624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1b628:	d1ee      	bne.n	1b608 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1b62a:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1b62c:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1b62e:	bf54      	ite	pl
   1b630:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1b634:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1b636:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1b63a:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1b63c:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1b640:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1b644:	d507      	bpl.n	1b656 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1b646:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b64a:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1b64c:	d01f      	beq.n	1b68e <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1b64e:	2201      	movs	r2, #1
   1b650:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1b652:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1b656:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   1b658:	4c13      	ldr	r4, [pc, #76]	; (1b6a8 <gpio_nrfx_config+0xbc>)
   1b65a:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1b65c:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1b660:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   1b664:	bf18      	it	ne
   1b666:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1b66a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1b66e:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1b672:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1b676:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   1b67a:	2000      	movs	r0, #0
}
   1b67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1b67e:	2307      	movs	r3, #7
   1b680:	e7d4      	b.n	1b62c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1b682:	2304      	movs	r3, #4
   1b684:	e7d2      	b.n	1b62c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1b686:	2305      	movs	r3, #5
   1b688:	e7d0      	b.n	1b62c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1b68a:	2303      	movs	r3, #3
   1b68c:	e7ce      	b.n	1b62c <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1b68e:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1b690:	bf42      	ittt	mi
   1b692:	2201      	movmi	r2, #1
   1b694:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1b696:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   1b69a:	e7dc      	b.n	1b656 <gpio_nrfx_config+0x6a>
   1b69c:	00f00006 	.word	0x00f00006
   1b6a0:	00100006 	.word	0x00100006
   1b6a4:	00400002 	.word	0x00400002
   1b6a8:	50000300 	.word	0x50000300

0001b6ac <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1b6ac:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1b6b0:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1b6b2:	4b08      	ldr	r3, [pc, #32]	; (1b6d4 <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b6b4:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   1b6b6:	bf18      	it	ne
   1b6b8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1b6bc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1b6c0:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   1b6c4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1b6c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1b6cc:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   1b6d0:	4770      	bx	lr
   1b6d2:	bf00      	nop
   1b6d4:	50000300 	.word	0x50000300

0001b6d8 <gpio_nrfx_pin_interrupt_configure>:
{
   1b6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b6da:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1b6dc:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   1b6de:	68c7      	ldr	r7, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1b6e0:	7a08      	ldrb	r0, [r1, #8]
   1b6e2:	f005 061f 	and.w	r6, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1b6e6:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1b6ea:	ea46 1640 	orr.w	r6, r6, r0, lsl #5
   1b6ee:	d110      	bne.n	1b712 <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
   1b6f0:	0970      	lsrs	r0, r6, #5
        case 1: return NRF_P1;
   1b6f2:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
   1b6f4:	f006 011f 	and.w	r1, r6, #31
        case 1: return NRF_P1;
   1b6f8:	486b      	ldr	r0, [pc, #428]	; (1b8a8 <gpio_nrfx_pin_interrupt_configure+0x1d0>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1b6fa:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
   1b6fe:	bf18      	it	ne
   1b700:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1b704:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1b708:	07cc      	lsls	r4, r1, #31
   1b70a:	d507      	bpl.n	1b71c <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
   1b70c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1b710:	e0bd      	b.n	1b88e <gpio_nrfx_pin_interrupt_configure+0x1b6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1b712:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1b716:	68f9      	ldr	r1, [r7, #12]
   1b718:	f000 80aa 	beq.w	1b870 <gpio_nrfx_pin_interrupt_configure+0x198>
   1b71c:	68f8      	ldr	r0, [r7, #12]
   1b71e:	2101      	movs	r1, #1
   1b720:	40a9      	lsls	r1, r5
   1b722:	4301      	orrs	r1, r0
   1b724:	6978      	ldr	r0, [r7, #20]
   1b726:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1b728:	2101      	movs	r1, #1
   1b72a:	40a9      	lsls	r1, r5
   1b72c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1b730:	69ba      	ldr	r2, [r7, #24]
   1b732:	bf0c      	ite	eq
   1b734:	4308      	orreq	r0, r1
   1b736:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1b738:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1b73c:	bf0c      	ite	eq
   1b73e:	430a      	orreq	r2, r1
   1b740:	438a      	bicne	r2, r1
   1b742:	61ba      	str	r2, [r7, #24]
   1b744:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1b746:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1b748:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1b74c:	bf0c      	ite	eq
   1b74e:	4311      	orreq	r1, r2
   1b750:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1b754:	4a55      	ldr	r2, [pc, #340]	; (1b8ac <gpio_nrfx_pin_interrupt_configure+0x1d4>)
   1b756:	6139      	str	r1, [r7, #16]
   1b758:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1b75c:	2300      	movs	r3, #0
   1b75e:	b2c9      	uxtb	r1, r1
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1b760:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   1b764:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   1b768:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1b76c:	4286      	cmp	r6, r0
   1b76e:	f040 8084 	bne.w	1b87a <gpio_nrfx_pin_interrupt_configure+0x1a2>
		    && (intenset & BIT(i))) {
   1b772:	fa21 f003 	lsr.w	r0, r1, r3
   1b776:	07c0      	lsls	r0, r0, #31
   1b778:	d57f      	bpl.n	1b87a <gpio_nrfx_pin_interrupt_configure+0x1a2>
			(void)atomic_and(mask, ~BIT(i));
   1b77a:	2101      	movs	r1, #1
   1b77c:	4099      	lsls	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b77e:	484c      	ldr	r0, [pc, #304]	; (1b8b0 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
   1b780:	f3bf 8f5b 	dmb	ish
   1b784:	43cc      	mvns	r4, r1
   1b786:	e850 cf00 	ldrex	ip, [r0]
   1b78a:	ea0c 0c04 	and.w	ip, ip, r4
   1b78e:	e840 ce00 	strex	lr, ip, [r0]
   1b792:	f1be 0f00 	cmp.w	lr, #0
   1b796:	d1f6      	bne.n	1b786 <gpio_nrfx_pin_interrupt_configure+0xae>
   1b798:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1b79c:	009b      	lsls	r3, r3, #2
   1b79e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b7a2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1b7a6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1b7aa:	f020 0001 	bic.w	r0, r0, #1
   1b7ae:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   1b7b2:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1b7b6:	2100      	movs	r1, #0
   1b7b8:	4630      	mov	r0, r6
   1b7ba:	f7ff ff77 	bl	1b6ac <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1b7be:	68fb      	ldr	r3, [r7, #12]
   1b7c0:	40eb      	lsrs	r3, r5
   1b7c2:	f013 0301 	ands.w	r3, r3, #1
   1b7c6:	d051      	beq.n	1b86c <gpio_nrfx_pin_interrupt_configure+0x194>
		if (data->trig_edge & BIT(pin)) {
   1b7c8:	697b      	ldr	r3, [r7, #20]
   1b7ca:	40eb      	lsrs	r3, r5
   1b7cc:	f013 0401 	ands.w	r4, r3, #1
   1b7d0:	d05e      	beq.n	1b890 <gpio_nrfx_pin_interrupt_configure+0x1b8>
			if (data->double_edge & BIT(pin)) {
   1b7d2:	69bb      	ldr	r3, [r7, #24]
   1b7d4:	40eb      	lsrs	r3, r5
   1b7d6:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1b7d8:	bf5f      	itttt	pl
   1b7da:	6939      	ldrpl	r1, [r7, #16]
   1b7dc:	fa21 f505 	lsrpl.w	r5, r1, r5
   1b7e0:	f005 0501 	andpl.w	r5, r5, #1
   1b7e4:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b7e8:	4931      	ldr	r1, [pc, #196]	; (1b8b0 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
   1b7ea:	bf54      	ite	pl
   1b7ec:	b2ed      	uxtbpl	r5, r5
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1b7ee:	2503      	movmi	r5, #3
   1b7f0:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   1b7f2:	2701      	movs	r7, #1
   1b7f4:	fa07 f402 	lsl.w	r4, r7, r2
   1b7f8:	f3bf 8f5b 	dmb	ish
   1b7fc:	e851 0f00 	ldrex	r0, [r1]
   1b800:	ea40 0304 	orr.w	r3, r0, r4
   1b804:	e841 3c00 	strex	ip, r3, [r1]
   1b808:	f1bc 0f00 	cmp.w	ip, #0
   1b80c:	d1f6      	bne.n	1b7fc <gpio_nrfx_pin_interrupt_configure+0x124>
   1b80e:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
   1b812:	40d0      	lsrs	r0, r2
   1b814:	f010 0301 	ands.w	r3, r0, #1
   1b818:	d134      	bne.n	1b884 <gpio_nrfx_pin_interrupt_configure+0x1ac>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1b81a:	0091      	lsls	r1, r2, #2
   1b81c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1b820:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
			nrf_gpiote_event_t evt =
   1b824:	3240      	adds	r2, #64	; 0x40
   1b826:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   1b82a:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   1b82e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1b832:	0092      	lsls	r2, r2, #2
   1b834:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b838:	0236      	lsls	r6, r6, #8
    return ((uint32_t)p_reg + event);
   1b83a:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b83c:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   1b840:	f406 567c 	and.w	r6, r6, #16128	; 0x3f00
    return ((uint32_t)p_reg + event);
   1b844:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1b848:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b84c:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
   1b850:	4306      	orrs	r6, r0
   1b852:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b856:	6013      	str	r3, [r2, #0]
   1b858:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1b85a:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   1b85e:	f042 0201 	orr.w	r2, r2, #1
   1b862:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1b866:	4a11      	ldr	r2, [pc, #68]	; (1b8ac <gpio_nrfx_pin_interrupt_configure+0x1d4>)
   1b868:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
	int res = 0;
   1b86c:	4618      	mov	r0, r3
   1b86e:	e00e      	b.n	1b88e <gpio_nrfx_pin_interrupt_configure+0x1b6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1b870:	2001      	movs	r0, #1
   1b872:	40a8      	lsls	r0, r5
   1b874:	ea21 0100 	bic.w	r1, r1, r0
   1b878:	e754      	b.n	1b724 <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1b87a:	3301      	adds	r3, #1
   1b87c:	2b08      	cmp	r3, #8
   1b87e:	f47f af6f 	bne.w	1b760 <gpio_nrfx_pin_interrupt_configure+0x88>
   1b882:	e798      	b.n	1b7b6 <gpio_nrfx_pin_interrupt_configure+0xde>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   1b884:	3201      	adds	r2, #1
   1b886:	2a08      	cmp	r2, #8
   1b888:	d1b4      	bne.n	1b7f4 <gpio_nrfx_pin_interrupt_configure+0x11c>
	return -ENODEV;
   1b88a:	f06f 0012 	mvn.w	r0, #18
}
   1b88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1b890:	6939      	ldr	r1, [r7, #16]
   1b892:	40e9      	lsrs	r1, r5
   1b894:	f001 0101 	and.w	r1, r1, #1
   1b898:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1b89c:	4630      	mov	r0, r6
   1b89e:	b2c9      	uxtb	r1, r1
   1b8a0:	f7ff ff04 	bl	1b6ac <nrf_gpio_cfg_sense_set>
	int res = 0;
   1b8a4:	4620      	mov	r0, r4
   1b8a6:	e7f2      	b.n	1b88e <gpio_nrfx_pin_interrupt_configure+0x1b6>
   1b8a8:	50000300 	.word	0x50000300
   1b8ac:	40006000 	.word	0x40006000
   1b8b0:	20003df4 	.word	0x20003df4

0001b8b4 <gpiote_event_handler>:
{
   1b8b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1b8b6:	2600      	movs	r6, #0
   1b8b8:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b8bc:	4d26      	ldr	r5, [pc, #152]	; (1b958 <gpiote_event_handler+0xa4>)
   1b8be:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
   1b8c0:	b14c      	cbz	r4, 1b8d6 <gpiote_event_handler+0x22>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   1b8c2:	4826      	ldr	r0, [pc, #152]	; (1b95c <gpiote_event_handler+0xa8>)
   1b8c4:	f008 f8a3 	bl	23a0e <check_level_trigger_pins>
		fired_triggers[0] =
   1b8c8:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   1b8ca:	4825      	ldr	r0, [pc, #148]	; (1b960 <gpiote_event_handler+0xac>)
   1b8cc:	f008 f89f 	bl	23a0e <check_level_trigger_pins>
		fired_triggers[1] =
   1b8d0:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b8d2:	602e      	str	r6, [r5, #0]
   1b8d4:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   1b8d6:	4d23      	ldr	r5, [pc, #140]	; (1b964 <gpiote_event_handler+0xb0>)
{
   1b8d8:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1b8da:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b8dc:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1b8de:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1b8e2:	fa06 f102 	lsl.w	r1, r6, r2
   1b8e6:	4219      	tst	r1, r3
   1b8e8:	d01b      	beq.n	1b922 <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b8ea:	0091      	lsls	r1, r2, #2
   1b8ec:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1b8f0:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   1b8f4:	680b      	ldr	r3, [r1, #0]
   1b8f6:	b1a3      	cbz	r3, 1b922 <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1b8f8:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1b8fc:	af02      	add	r7, sp, #8
   1b8fe:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b902:	f8c1 c000 	str.w	ip, [r1]
   1b906:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1b90a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1b90e:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1b912:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1b916:	fa06 f303 	lsl.w	r3, r6, r3
   1b91a:	433b      	orrs	r3, r7
   1b91c:	f840 3c08 	str.w	r3, [r0, #-8]
   1b920:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1b922:	3201      	adds	r2, #1
   1b924:	2a08      	cmp	r2, #8
   1b926:	d1da      	bne.n	1b8de <gpiote_event_handler+0x2a>
	if (fired_triggers[0]) {
   1b928:	9a00      	ldr	r2, [sp, #0]
   1b92a:	b11a      	cbz	r2, 1b934 <gpiote_event_handler+0x80>
	gpio_fire_callbacks(list, port, pins);
   1b92c:	490b      	ldr	r1, [pc, #44]	; (1b95c <gpiote_event_handler+0xa8>)
   1b92e:	480e      	ldr	r0, [pc, #56]	; (1b968 <gpiote_event_handler+0xb4>)
   1b930:	f008 f803 	bl	2393a <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   1b934:	9a01      	ldr	r2, [sp, #4]
   1b936:	b11a      	cbz	r2, 1b940 <gpiote_event_handler+0x8c>
	gpio_fire_callbacks(list, port, pins);
   1b938:	4909      	ldr	r1, [pc, #36]	; (1b960 <gpiote_event_handler+0xac>)
   1b93a:	480c      	ldr	r0, [pc, #48]	; (1b96c <gpiote_event_handler+0xb8>)
   1b93c:	f007 fffd 	bl	2393a <gpio_fire_callbacks>
	if (port_event) {
   1b940:	b144      	cbz	r4, 1b954 <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1b942:	4806      	ldr	r0, [pc, #24]	; (1b95c <gpiote_event_handler+0xa8>)
   1b944:	f008 f88c 	bl	23a60 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1b948:	4805      	ldr	r0, [pc, #20]	; (1b960 <gpiote_event_handler+0xac>)
}
   1b94a:	b003      	add	sp, #12
   1b94c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1b950:	f008 b886 	b.w	23a60 <cfg_level_pins>
}
   1b954:	b003      	add	sp, #12
   1b956:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b958:	4000617c 	.word	0x4000617c
   1b95c:	2000077c 	.word	0x2000077c
   1b960:	2000078c 	.word	0x2000078c
   1b964:	40006000 	.word	0x40006000
   1b968:	20003dc0 	.word	0x20003dc0
   1b96c:	20003ddc 	.word	0x20003ddc

0001b970 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1b970:	4b02      	ldr	r3, [pc, #8]	; (1b97c <flash_nrf_pages_layout+0xc>)
   1b972:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1b974:	2301      	movs	r3, #1
   1b976:	6013      	str	r3, [r2, #0]
}
   1b978:	4770      	bx	lr
   1b97a:	bf00      	nop
   1b97c:	20003df8 	.word	0x20003df8

0001b980 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1b980:	4800      	ldr	r0, [pc, #0]	; (1b984 <flash_nrf_get_parameters+0x4>)
   1b982:	4770      	bx	lr
   1b984:	00026434 	.word	0x00026434

0001b988 <flash_nrf_read>:
{
   1b988:	b570      	push	{r4, r5, r6, lr}
   1b98a:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1b98c:	4628      	mov	r0, r5
   1b98e:	4619      	mov	r1, r3
{
   1b990:	4616      	mov	r6, r2
   1b992:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1b994:	f008 f88c 	bl	23ab0 <is_regular_addr_valid>
   1b998:	b970      	cbnz	r0, 1b9b8 <flash_nrf_read+0x30>
   1b99a:	4a0c      	ldr	r2, [pc, #48]	; (1b9cc <flash_nrf_read+0x44>)
   1b99c:	4b0c      	ldr	r3, [pc, #48]	; (1b9d0 <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1b99e:	480d      	ldr	r0, [pc, #52]	; (1b9d4 <flash_nrf_read+0x4c>)
   1b9a0:	1a9b      	subs	r3, r3, r2
   1b9a2:	08db      	lsrs	r3, r3, #3
   1b9a4:	019b      	lsls	r3, r3, #6
   1b9a6:	f043 0301 	orr.w	r3, r3, #1
   1b9aa:	4622      	mov	r2, r4
   1b9ac:	4629      	mov	r1, r5
   1b9ae:	f004 f840 	bl	1fa32 <log_2>
		return -EINVAL;
   1b9b2:	f06f 0015 	mvn.w	r0, #21
}
   1b9b6:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1b9b8:	b134      	cbz	r4, 1b9c8 <flash_nrf_read+0x40>
	memcpy(data, (void *)addr, len);
   1b9ba:	4622      	mov	r2, r4
   1b9bc:	4629      	mov	r1, r5
   1b9be:	4630      	mov	r0, r6
   1b9c0:	f005 fe71 	bl	216a6 <memcpy>
	return 0;
   1b9c4:	2000      	movs	r0, #0
   1b9c6:	e7f6      	b.n	1b9b6 <flash_nrf_read+0x2e>
		return 0;
   1b9c8:	4620      	mov	r0, r4
   1b9ca:	e7f4      	b.n	1b9b6 <flash_nrf_read+0x2e>
   1b9cc:	00024c24 	.word	0x00024c24
   1b9d0:	00024d1c 	.word	0x00024d1c
   1b9d4:	000288b6 	.word	0x000288b6

0001b9d8 <flash_nrf_erase>:
{
   1b9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b9da:	b087      	sub	sp, #28
   1b9dc:	460e      	mov	r6, r1
   1b9de:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1b9e0:	f008 f9ec 	bl	23dbc <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1b9e4:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1b9e6:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1b9e8:	4630      	mov	r0, r6
   1b9ea:	f008 f861 	bl	23ab0 <is_regular_addr_valid>
   1b9ee:	b388      	cbz	r0, 1ba54 <flash_nrf_erase+0x7c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1b9f0:	fbb6 f3f7 	udiv	r3, r6, r7
   1b9f4:	fb07 6313 	mls	r3, r7, r3, r6
   1b9f8:	b923      	cbnz	r3, 1ba04 <flash_nrf_erase+0x2c>
   1b9fa:	fbb5 f4f7 	udiv	r4, r5, r7
   1b9fe:	fb07 5414 	mls	r4, r7, r4, r5
   1ba02:	b184      	cbz	r4, 1ba26 <flash_nrf_erase+0x4e>
   1ba04:	4a25      	ldr	r2, [pc, #148]	; (1ba9c <flash_nrf_erase+0xc4>)
   1ba06:	4b26      	ldr	r3, [pc, #152]	; (1baa0 <flash_nrf_erase+0xc8>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1ba08:	4826      	ldr	r0, [pc, #152]	; (1baa4 <flash_nrf_erase+0xcc>)
   1ba0a:	1a9b      	subs	r3, r3, r2
   1ba0c:	08db      	lsrs	r3, r3, #3
   1ba0e:	019b      	lsls	r3, r3, #6
   1ba10:	f043 0301 	orr.w	r3, r3, #1
   1ba14:	462a      	mov	r2, r5
   1ba16:	4631      	mov	r1, r6
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1ba18:	f004 f80b 	bl	1fa32 <log_2>
		return -EINVAL;
   1ba1c:	f06f 0415 	mvn.w	r4, #21
}
   1ba20:	4620      	mov	r0, r4
   1ba22:	b007      	add	sp, #28
   1ba24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1ba26:	42bd      	cmp	r5, r7
   1ba28:	d3fa      	bcc.n	1ba20 <flash_nrf_erase+0x48>
	return z_impl_k_sem_take(sem, timeout);
   1ba2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ba2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ba32:	481d      	ldr	r0, [pc, #116]	; (1baa8 <flash_nrf_erase+0xd0>)
   1ba34:	f002 fe4e 	bl	1e6d4 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1ba38:	f008 f872 	bl	23b20 <nrf_flash_sync_is_required>
   1ba3c:	ab02      	add	r3, sp, #8
   1ba3e:	4601      	mov	r1, r0
   1ba40:	b998      	cbnz	r0, 1ba6a <flash_nrf_erase+0x92>
	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   1ba42:	2210      	movs	r2, #16
   1ba44:	4618      	mov	r0, r3
   1ba46:	f005 fe59 	bl	216fc <memset>
   1ba4a:	e9cd 6503 	strd	r6, r5, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   1ba4e:	f008 f842 	bl	23ad6 <erase_op>
   1ba52:	e01d      	b.n	1ba90 <flash_nrf_erase+0xb8>
   1ba54:	4a11      	ldr	r2, [pc, #68]	; (1ba9c <flash_nrf_erase+0xc4>)
   1ba56:	4b12      	ldr	r3, [pc, #72]	; (1baa0 <flash_nrf_erase+0xc8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1ba58:	4814      	ldr	r0, [pc, #80]	; (1baac <flash_nrf_erase+0xd4>)
   1ba5a:	1a9b      	subs	r3, r3, r2
   1ba5c:	08db      	lsrs	r3, r3, #3
   1ba5e:	019b      	lsls	r3, r3, #6
   1ba60:	f043 0301 	orr.w	r3, r3, #1
   1ba64:	462a      	mov	r2, r5
   1ba66:	4631      	mov	r1, r6
   1ba68:	e7d6      	b.n	1ba18 <flash_nrf_erase+0x40>
	struct flash_context context = {
   1ba6a:	2210      	movs	r2, #16
   1ba6c:	4621      	mov	r1, r4
   1ba6e:	4618      	mov	r0, r3
   1ba70:	f005 fe44 	bl	216fc <memset>
   1ba74:	2201      	movs	r2, #1
   1ba76:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1ba7a:	4a0d      	ldr	r2, [pc, #52]	; (1bab0 <flash_nrf_erase+0xd8>)
   1ba7c:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1ba80:	480c      	ldr	r0, [pc, #48]	; (1bab4 <flash_nrf_erase+0xdc>)
	struct flash_context context = {
   1ba82:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1ba86:	f000 f937 	bl	1bcf8 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1ba8a:	4668      	mov	r0, sp
   1ba8c:	f7e7 fa18 	bl	2ec0 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1ba90:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1ba92:	4805      	ldr	r0, [pc, #20]	; (1baa8 <flash_nrf_erase+0xd0>)
   1ba94:	f002 fdf8 	bl	1e688 <z_impl_k_sem_give>
}
   1ba98:	e7c2      	b.n	1ba20 <flash_nrf_erase+0x48>
   1ba9a:	bf00      	nop
   1ba9c:	00024c24 	.word	0x00024c24
   1baa0:	00024d1c 	.word	0x00024d1c
   1baa4:	000288d3 	.word	0x000288d3
   1baa8:	20003e00 	.word	0x20003e00
   1baac:	000288b6 	.word	0x000288b6
   1bab0:	00023ad7 	.word	0x00023ad7
   1bab4:	00015e64 	.word	0x00015e64

0001bab8 <nrf_flash_init>:
{
   1bab8:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1baba:	2201      	movs	r2, #1
   1babc:	4611      	mov	r1, r2
   1babe:	4807      	ldr	r0, [pc, #28]	; (1badc <nrf_flash_init+0x24>)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1bac0:	4c07      	ldr	r4, [pc, #28]	; (1bae0 <nrf_flash_init+0x28>)
   1bac2:	f008 fcc9 	bl	24458 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1bac6:	f000 f90d 	bl	1bce4 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1baca:	f008 f97b 	bl	23dc4 <nrfx_nvmc_flash_page_count_get>
   1bace:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1bad0:	f008 f974 	bl	23dbc <nrfx_nvmc_flash_page_size_get>
   1bad4:	6060      	str	r0, [r4, #4]
}
   1bad6:	2000      	movs	r0, #0
   1bad8:	bd10      	pop	{r4, pc}
   1bada:	bf00      	nop
   1badc:	20003e00 	.word	0x20003e00
   1bae0:	20003df8 	.word	0x20003df8

0001bae4 <write_op>:
{
   1bae4:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   1bae6:	7b03      	ldrb	r3, [r0, #12]
{
   1bae8:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1baea:	b10b      	cbz	r3, 1baf0 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1baec:	f000 f90c 	bl	1bd08 <nrf_flash_sync_get_timestamp_begin>
{
   1baf0:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1baf2:	68a3      	ldr	r3, [r4, #8]
   1baf4:	2b03      	cmp	r3, #3
   1baf6:	d806      	bhi.n	1bb06 <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1baf8:	4a12      	ldr	r2, [pc, #72]	; (1bb44 <write_op+0x60>)
   1bafa:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1bafe:	07db      	lsls	r3, r3, #31
   1bb00:	d5fb      	bpl.n	1bafa <write_op+0x16>
	return FLASH_OP_DONE;
   1bb02:	2000      	movs	r0, #0
}
   1bb04:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1bb06:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1bb08:	6860      	ldr	r0, [r4, #4]
   1bb0a:	6819      	ldr	r1, [r3, #0]
   1bb0c:	f000 fe52 	bl	1c7b4 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   1bb10:	6863      	ldr	r3, [r4, #4]
   1bb12:	3304      	adds	r3, #4
   1bb14:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1bb16:	6823      	ldr	r3, [r4, #0]
   1bb18:	3304      	adds	r3, #4
   1bb1a:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1bb1c:	68a3      	ldr	r3, [r4, #8]
   1bb1e:	3b04      	subs	r3, #4
   1bb20:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1bb22:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1bb24:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1bb26:	2b00      	cmp	r3, #0
   1bb28:	d0e3      	beq.n	1baf2 <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   1bb2a:	4628      	mov	r0, r5
   1bb2c:	f7e7 fa44 	bl	2fb8 <nrf_flash_sync_check_time_limit>
   1bb30:	2800      	cmp	r0, #0
   1bb32:	d0de      	beq.n	1baf2 <write_op+0xe>
   1bb34:	4a03      	ldr	r2, [pc, #12]	; (1bb44 <write_op+0x60>)
   1bb36:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1bb3a:	07d9      	lsls	r1, r3, #31
   1bb3c:	d5fb      	bpl.n	1bb36 <write_op+0x52>
				return FLASH_OP_ONGOING;
   1bb3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bb42:	e7df      	b.n	1bb04 <write_op+0x20>
   1bb44:	4001e000 	.word	0x4001e000

0001bb48 <flash_nrf_write>:
{
   1bb48:	b570      	push	{r4, r5, r6, lr}
   1bb4a:	460d      	mov	r5, r1
   1bb4c:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1bb4e:	4619      	mov	r1, r3
   1bb50:	4628      	mov	r0, r5
{
   1bb52:	4616      	mov	r6, r2
   1bb54:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1bb56:	f007 ffab 	bl	23ab0 <is_regular_addr_valid>
   1bb5a:	b980      	cbnz	r0, 1bb7e <flash_nrf_write+0x36>
   1bb5c:	4a23      	ldr	r2, [pc, #140]	; (1bbec <flash_nrf_write+0xa4>)
   1bb5e:	4b24      	ldr	r3, [pc, #144]	; (1bbf0 <flash_nrf_write+0xa8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1bb60:	4824      	ldr	r0, [pc, #144]	; (1bbf4 <flash_nrf_write+0xac>)
   1bb62:	1a9b      	subs	r3, r3, r2
   1bb64:	08db      	lsrs	r3, r3, #3
   1bb66:	019b      	lsls	r3, r3, #6
   1bb68:	f043 0301 	orr.w	r3, r3, #1
   1bb6c:	4622      	mov	r2, r4
   1bb6e:	4629      	mov	r1, r5
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1bb70:	f003 ff5f 	bl	1fa32 <log_2>
		return -EINVAL;
   1bb74:	f06f 0415 	mvn.w	r4, #21
}
   1bb78:	4620      	mov	r0, r4
   1bb7a:	b006      	add	sp, #24
   1bb7c:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1bb7e:	ea44 0305 	orr.w	r3, r4, r5
   1bb82:	079b      	lsls	r3, r3, #30
   1bb84:	d00a      	beq.n	1bb9c <flash_nrf_write+0x54>
   1bb86:	4a19      	ldr	r2, [pc, #100]	; (1bbec <flash_nrf_write+0xa4>)
   1bb88:	4b19      	ldr	r3, [pc, #100]	; (1bbf0 <flash_nrf_write+0xa8>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1bb8a:	481b      	ldr	r0, [pc, #108]	; (1bbf8 <flash_nrf_write+0xb0>)
   1bb8c:	1a9b      	subs	r3, r3, r2
   1bb8e:	08db      	lsrs	r3, r3, #3
   1bb90:	019b      	lsls	r3, r3, #6
   1bb92:	f043 0301 	orr.w	r3, r3, #1
   1bb96:	4622      	mov	r2, r4
   1bb98:	4629      	mov	r1, r5
   1bb9a:	e7e9      	b.n	1bb70 <flash_nrf_write+0x28>
	if (!len) {
   1bb9c:	2c00      	cmp	r4, #0
   1bb9e:	d0eb      	beq.n	1bb78 <flash_nrf_write+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1bba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bba8:	4814      	ldr	r0, [pc, #80]	; (1bbfc <flash_nrf_write+0xb4>)
   1bbaa:	f002 fd93 	bl	1e6d4 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1bbae:	f007 ffb7 	bl	23b20 <nrf_flash_sync_is_required>
   1bbb2:	4603      	mov	r3, r0
	struct flash_context context = {
   1bbb4:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1bbb8:	a802      	add	r0, sp, #8
   1bbba:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1bbbc:	b18b      	cbz	r3, 1bbe2 <flash_nrf_write+0x9a>
	struct flash_context context = {
   1bbbe:	2301      	movs	r3, #1
   1bbc0:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1bbc4:	4b0e      	ldr	r3, [pc, #56]	; (1bc00 <flash_nrf_write+0xb8>)
   1bbc6:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1bbca:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1bbce:	f000 f893 	bl	1bcf8 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1bbd2:	4668      	mov	r0, sp
   1bbd4:	f7e7 f974 	bl	2ec0 <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   1bbd8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1bbda:	4808      	ldr	r0, [pc, #32]	; (1bbfc <flash_nrf_write+0xb4>)
   1bbdc:	f002 fd54 	bl	1e688 <z_impl_k_sem_give>
}
   1bbe0:	e7ca      	b.n	1bb78 <flash_nrf_write+0x30>
	struct flash_context context = {
   1bbe2:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1bbe6:	f7ff ff7d 	bl	1bae4 <write_op>
   1bbea:	e7f5      	b.n	1bbd8 <flash_nrf_write+0x90>
   1bbec:	00024c24 	.word	0x00024c24
   1bbf0:	00024d1c 	.word	0x00024d1c
   1bbf4:	000288b6 	.word	0x000288b6
   1bbf8:	000288f2 	.word	0x000288f2
   1bbfc:	20003e00 	.word	0x20003e00
   1bc00:	0001bae5 	.word	0x0001bae5

0001bc04 <time_slot_callback_work>:
{
   1bc04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (op_desc->handler(op_desc->context) == FLASH_OP_DONE) {
   1bc06:	e9d3 2000 	ldrd	r2, r0, [r3]
   1bc0a:	4790      	blx	r2
   1bc0c:	4604      	mov	r4, r0
   1bc0e:	b998      	cbnz	r0, 1bc38 <time_slot_callback_work+0x34>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1bc10:	f10d 010f 	add.w	r1, sp, #15
   1bc14:	f10d 000e 	add.w	r0, sp, #14
   1bc18:	f7f7 fd68 	bl	136ec <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1bc1c:	4623      	mov	r3, r4
   1bc1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1bc22:	f89d 000e 	ldrb.w	r0, [sp, #14]
   1bc26:	9400      	str	r4, [sp, #0]
   1bc28:	4621      	mov	r1, r4
   1bc2a:	f7f5 f9a3 	bl	10f74 <ticker_stop>
		_ticker_sync_context.result = 0;
   1bc2e:	4b03      	ldr	r3, [pc, #12]	; (1bc3c <time_slot_callback_work+0x38>)
   1bc30:	60dc      	str	r4, [r3, #12]
	z_impl_k_sem_give(sem);
   1bc32:	4803      	ldr	r0, [pc, #12]	; (1bc40 <time_slot_callback_work+0x3c>)
   1bc34:	f002 fd28 	bl	1e688 <z_impl_k_sem_give>
}
   1bc38:	b004      	add	sp, #16
   1bc3a:	bd10      	pop	{r4, pc}
   1bc3c:	20003e18 	.word	0x20003e18
   1bc40:	20003e28 	.word	0x20003e28

0001bc44 <time_slot_delay>:
{
   1bc44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bc48:	b08d      	sub	sp, #52	; 0x34
   1bc4a:	4606      	mov	r6, r0
   1bc4c:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1bc4e:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1bc52:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   1bc56:	4690      	mov	r8, r2
   1bc58:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1bc5a:	f7f7 fd47 	bl	136ec <ll_timeslice_ticker_id_get>
			   (ticker_id + 1), /* ticker_id */
   1bc5e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
	err = ticker_start(instance_index, /* Radio instance ticker */
   1bc62:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1bc66:	9700      	str	r7, [sp, #0]
   1bc68:	2400      	movs	r4, #0
			   (ticker_id + 1), /* ticker_id */
   1bc6a:	3501      	adds	r5, #1
	err = ticker_start(instance_index, /* Radio instance ticker */
   1bc6c:	4633      	mov	r3, r6
   1bc6e:	e9cd 4407 	strd	r4, r4, [sp, #28]
   1bc72:	e9cd 8905 	strd	r8, r9, [sp, #20]
   1bc76:	e9cd 4403 	strd	r4, r4, [sp, #12]
   1bc7a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1bc7e:	b2ea      	uxtb	r2, r5
   1bc80:	4621      	mov	r1, r4
   1bc82:	f7f5 f90b 	bl	10e9c <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   1bc86:	f030 0302 	bics.w	r3, r0, #2
   1bc8a:	d00d      	beq.n	1bca8 <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   1bc8c:	4b08      	ldr	r3, [pc, #32]	; (1bcb0 <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1bc8e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   1bc92:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1bc94:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1bc98:	9400      	str	r4, [sp, #0]
   1bc9a:	4623      	mov	r3, r4
   1bc9c:	4621      	mov	r1, r4
   1bc9e:	f7f5 f969 	bl	10f74 <ticker_stop>
   1bca2:	4804      	ldr	r0, [pc, #16]	; (1bcb4 <time_slot_delay+0x70>)
   1bca4:	f002 fcf0 	bl	1e688 <z_impl_k_sem_give>
}
   1bca8:	b00d      	add	sp, #52	; 0x34
   1bcaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bcae:	bf00      	nop
   1bcb0:	20003e18 	.word	0x20003e18
   1bcb4:	20003e28 	.word	0x20003e28

0001bcb8 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   1bcb8:	4a01      	ldr	r2, [pc, #4]	; (1bcc0 <time_slot_callback_prepare+0x8>)
   1bcba:	2131      	movs	r1, #49	; 0x31
   1bcbc:	f7ff bfc2 	b.w	1bc44 <time_slot_delay>
   1bcc0:	0001bcc5 	.word	0x0001bcc5

0001bcc4 <time_slot_callback_abort>:
{
   1bcc4:	b570      	push	{r4, r5, r6, lr}
   1bcc6:	4604      	mov	r4, r0
   1bcc8:	461d      	mov	r5, r3
	ll_radio_state_abort();
   1bcca:	f7f7 fd15 	bl	136f8 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   1bcce:	462b      	mov	r3, r5
   1bcd0:	4620      	mov	r0, r4
   1bcd2:	4a03      	ldr	r2, [pc, #12]	; (1bce0 <time_slot_callback_abort+0x1c>)
}
   1bcd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   1bcd8:	2106      	movs	r1, #6
   1bcda:	f7ff bfb3 	b.w	1bc44 <time_slot_delay>
   1bcde:	bf00      	nop
   1bce0:	0001bc05 	.word	0x0001bc05

0001bce4 <nrf_flash_sync_init>:
{
   1bce4:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1bce6:	2201      	movs	r2, #1
   1bce8:	2100      	movs	r1, #0
   1bcea:	4802      	ldr	r0, [pc, #8]	; (1bcf4 <nrf_flash_sync_init+0x10>)
   1bcec:	f008 fbb4 	bl	24458 <z_impl_k_sem_init>
}
   1bcf0:	2000      	movs	r0, #0
   1bcf2:	bd08      	pop	{r3, pc}
   1bcf4:	20003e28 	.word	0x20003e28

0001bcf8 <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   1bcf8:	4b02      	ldr	r3, [pc, #8]	; (1bd04 <nrf_flash_sync_set_context+0xc>)
   1bcfa:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   1bcfe:	e9c3 2000 	strd	r2, r0, [r3]
}
   1bd02:	4770      	bx	lr
   1bd04:	20003e18 	.word	0x20003e18

0001bd08 <nrf_flash_sync_get_timestamp_begin>:
{
   1bd08:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   1bd0a:	f7f5 f979 	bl	11000 <ticker_ticks_now_get>
   1bd0e:	4b01      	ldr	r3, [pc, #4]	; (1bd14 <nrf_flash_sync_get_timestamp_begin+0xc>)
   1bd10:	6098      	str	r0, [r3, #8]
}
   1bd12:	bd08      	pop	{r3, pc}
   1bd14:	20003e18 	.word	0x20003e18

0001bd18 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1bd18:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1bd1a:	794b      	ldrb	r3, [r1, #5]
   1bd1c:	2b01      	cmp	r3, #1
   1bd1e:	d029      	beq.n	1bd74 <uarte_nrfx_configure+0x5c>
   1bd20:	2b03      	cmp	r3, #3
   1bd22:	d124      	bne.n	1bd6e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1bd24:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1bd26:	798b      	ldrb	r3, [r1, #6]
   1bd28:	2b03      	cmp	r3, #3
   1bd2a:	d120      	bne.n	1bd6e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1bd2c:	79cc      	ldrb	r4, [r1, #7]
   1bd2e:	b124      	cbz	r4, 1bd3a <uarte_nrfx_configure+0x22>
   1bd30:	2c01      	cmp	r4, #1
   1bd32:	d11c      	bne.n	1bd6e <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1bd34:	6843      	ldr	r3, [r0, #4]
   1bd36:	791b      	ldrb	r3, [r3, #4]
   1bd38:	b1cb      	cbz	r3, 1bd6e <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1bd3a:	790a      	ldrb	r2, [r1, #4]
   1bd3c:	b112      	cbz	r2, 1bd44 <uarte_nrfx_configure+0x2c>
   1bd3e:	2a02      	cmp	r2, #2
   1bd40:	d115      	bne.n	1bd6e <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1bd42:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1bd44:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1bd46:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1bd48:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1bd4c:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1bd4e:	d065      	beq.n	1be1c <uarte_nrfx_configure+0x104>
   1bd50:	d82d      	bhi.n	1bdae <uarte_nrfx_configure+0x96>
   1bd52:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1bd56:	d064      	beq.n	1be22 <uarte_nrfx_configure+0x10a>
   1bd58:	d816      	bhi.n	1bd88 <uarte_nrfx_configure+0x70>
   1bd5a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1bd5e:	d062      	beq.n	1be26 <uarte_nrfx_configure+0x10e>
   1bd60:	d80a      	bhi.n	1bd78 <uarte_nrfx_configure+0x60>
   1bd62:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1bd66:	d061      	beq.n	1be2c <uarte_nrfx_configure+0x114>
   1bd68:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1bd6c:	d061      	beq.n	1be32 <uarte_nrfx_configure+0x11a>
   1bd6e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1bd72:	e052      	b.n	1be1a <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   1bd74:	2600      	movs	r6, #0
   1bd76:	e7d6      	b.n	1bd26 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1bd78:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1bd7c:	d05c      	beq.n	1be38 <uarte_nrfx_configure+0x120>
   1bd7e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1bd82:	d1f4      	bne.n	1bd6e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1bd84:	4b37      	ldr	r3, [pc, #220]	; (1be64 <uarte_nrfx_configure+0x14c>)
   1bd86:	e03c      	b.n	1be02 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1bd88:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1bd8c:	d057      	beq.n	1be3e <uarte_nrfx_configure+0x126>
   1bd8e:	d807      	bhi.n	1bda0 <uarte_nrfx_configure+0x88>
   1bd90:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1bd94:	d055      	beq.n	1be42 <uarte_nrfx_configure+0x12a>
   1bd96:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1bd9a:	d1e8      	bne.n	1bd6e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1bd9c:	4b32      	ldr	r3, [pc, #200]	; (1be68 <uarte_nrfx_configure+0x150>)
   1bd9e:	e030      	b.n	1be02 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1bda0:	f647 2712 	movw	r7, #31250	; 0x7a12
   1bda4:	42bb      	cmp	r3, r7
   1bda6:	d1e2      	bne.n	1bd6e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1bda8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1bdac:	e029      	b.n	1be02 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1bdae:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1bdb2:	d048      	beq.n	1be46 <uarte_nrfx_configure+0x12e>
   1bdb4:	d813      	bhi.n	1bdde <uarte_nrfx_configure+0xc6>
   1bdb6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1bdba:	d047      	beq.n	1be4c <uarte_nrfx_configure+0x134>
   1bdbc:	d809      	bhi.n	1bdd2 <uarte_nrfx_configure+0xba>
   1bdbe:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1bdc2:	42bb      	cmp	r3, r7
   1bdc4:	d044      	beq.n	1be50 <uarte_nrfx_configure+0x138>
   1bdc6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1bdca:	d1d0      	bne.n	1bd6e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1bdcc:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1bdd0:	e017      	b.n	1be02 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1bdd2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1bdd6:	d1ca      	bne.n	1bd6e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1bdd8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1bddc:	e011      	b.n	1be02 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1bdde:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1bde2:	d038      	beq.n	1be56 <uarte_nrfx_configure+0x13e>
   1bde4:	d808      	bhi.n	1bdf8 <uarte_nrfx_configure+0xe0>
   1bde6:	4f21      	ldr	r7, [pc, #132]	; (1be6c <uarte_nrfx_configure+0x154>)
   1bde8:	42bb      	cmp	r3, r7
   1bdea:	d037      	beq.n	1be5c <uarte_nrfx_configure+0x144>
   1bdec:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1bdf0:	d1bd      	bne.n	1bd6e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1bdf2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1bdf6:	e004      	b.n	1be02 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1bdf8:	4f1d      	ldr	r7, [pc, #116]	; (1be70 <uarte_nrfx_configure+0x158>)
   1bdfa:	42bb      	cmp	r3, r7
   1bdfc:	d1b7      	bne.n	1bd6e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1bdfe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1be02:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1be06:	68c3      	ldr	r3, [r0, #12]
   1be08:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1be0a:	4334      	orrs	r4, r6
   1be0c:	4322      	orrs	r2, r4
   1be0e:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1be10:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1be14:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1be18:	2000      	movs	r0, #0
}
   1be1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1be1c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1be20:	e7ef      	b.n	1be02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1be22:	4b14      	ldr	r3, [pc, #80]	; (1be74 <uarte_nrfx_configure+0x15c>)
   1be24:	e7ed      	b.n	1be02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1be26:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1be2a:	e7ea      	b.n	1be02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   1be2c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1be30:	e7e7      	b.n	1be02 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1be32:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1be36:	e7e4      	b.n	1be02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1be38:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1be3c:	e7e1      	b.n	1be02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1be3e:	4b0e      	ldr	r3, [pc, #56]	; (1be78 <uarte_nrfx_configure+0x160>)
   1be40:	e7df      	b.n	1be02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1be42:	4b0e      	ldr	r3, [pc, #56]	; (1be7c <uarte_nrfx_configure+0x164>)
   1be44:	e7dd      	b.n	1be02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1be46:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1be4a:	e7da      	b.n	1be02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1be4c:	4b0c      	ldr	r3, [pc, #48]	; (1be80 <uarte_nrfx_configure+0x168>)
   1be4e:	e7d8      	b.n	1be02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1be50:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1be54:	e7d5      	b.n	1be02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1be56:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1be5a:	e7d2      	b.n	1be02 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1be5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1be60:	e7cf      	b.n	1be02 <uarte_nrfx_configure+0xea>
   1be62:	bf00      	nop
   1be64:	0013b000 	.word	0x0013b000
   1be68:	004ea000 	.word	0x004ea000
   1be6c:	0003d090 	.word	0x0003d090
   1be70:	000f4240 	.word	0x000f4240
   1be74:	00275000 	.word	0x00275000
   1be78:	0075c000 	.word	0x0075c000
   1be7c:	003af000 	.word	0x003af000
   1be80:	013a9000 	.word	0x013a9000

0001be84 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1be84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1be88:	68c7      	ldr	r7, [r0, #12]
{
   1be8a:	4606      	mov	r6, r0
   1be8c:	4688      	mov	r8, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1be8e:	f008 faf3 	bl	24478 <k_is_in_isr>
   1be92:	b9b8      	cbnz	r0, 1bec4 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   1be94:	4b28      	ldr	r3, [pc, #160]	; (1bf38 <uarte_nrfx_poll_out+0xb4>)
   1be96:	781b      	ldrb	r3, [r3, #0]
   1be98:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   1be9c:	6872      	ldr	r2, [r6, #4]
   1be9e:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   1bea0:	b193      	cbz	r3, 1bec8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1bea2:	f04f 0320 	mov.w	r3, #32
   1bea6:	f3ef 8411 	mrs	r4, BASEPRI
   1beaa:	f383 8811 	msr	BASEPRI, r3
   1beae:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1beb2:	4630      	mov	r0, r6
   1beb4:	f007 fe85 	bl	23bc2 <is_tx_ready>
   1beb8:	bb38      	cbnz	r0, 1bf0a <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   1beba:	f384 8811 	msr	BASEPRI, r4
   1bebe:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1bec2:	e7ee      	b.n	1bea2 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1bec4:	2301      	movs	r3, #1
   1bec6:	e7e9      	b.n	1be9c <uarte_nrfx_poll_out+0x18>
   1bec8:	2464      	movs	r4, #100	; 0x64
	} else {
		do {
			/* wait arbitrary time before back off. */
			bool res;

			NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1beca:	4630      	mov	r0, r6
   1becc:	f007 fe79 	bl	23bc2 <is_tx_ready>
   1bed0:	b970      	cbnz	r0, 1bef0 <uarte_nrfx_poll_out+0x6c>
   1bed2:	2001      	movs	r0, #1
   1bed4:	f007 ff6a 	bl	23dac <nrfx_busy_wait>
   1bed8:	3c01      	subs	r4, #1
   1beda:	d1f6      	bne.n	1beca <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   1bedc:	2100      	movs	r1, #0
   1bede:	2021      	movs	r0, #33	; 0x21
   1bee0:	f002 fbaa 	bl	1e638 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1bee4:	e7f0      	b.n	1bec8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1bee6:	f384 8811 	msr	BASEPRI, r4
   1beea:	f3bf 8f6f 	isb	sy
}
   1beee:	e7f5      	b.n	1bedc <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   1bef0:	f04f 0320 	mov.w	r3, #32
   1bef4:	f3ef 8411 	mrs	r4, BASEPRI
   1bef8:	f383 8811 	msr	BASEPRI, r3
   1befc:	f3bf 8f6f 	isb	sy

			if (res) {
				key = irq_lock();
				if (is_tx_ready(dev)) {
   1bf00:	4630      	mov	r0, r6
   1bf02:	f007 fe5e 	bl	23bc2 <is_tx_ready>
   1bf06:	2800      	cmp	r0, #0
   1bf08:	d0ed      	beq.n	1bee6 <uarte_nrfx_poll_out+0x62>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   1bf0a:	f807 8f10 	strb.w	r8, [r7, #16]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1bf0e:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bf10:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1bf12:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1bf16:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bf1a:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   1bf1e:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   1bf22:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   1bf26:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bf2a:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   1bf2c:	f384 8811 	msr	BASEPRI, r4
   1bf30:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   1bf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bf38:	2000688f 	.word	0x2000688f

0001bf3c <nrf_gpio_cfg_output>:
    *p_pin = pin_number & 0x1F;
   1bf3c:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1bf40:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1bf42:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   1bf44:	4b04      	ldr	r3, [pc, #16]	; (1bf58 <nrf_gpio_cfg_output+0x1c>)
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1bf46:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   1bf4a:	bf18      	it	ne
   1bf4c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1bf50:	2103      	movs	r1, #3
   1bf52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1bf56:	4770      	bx	lr
   1bf58:	50000300 	.word	0x50000300

0001bf5c <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
   1bf5c:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1bf60:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1bf62:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   1bf64:	4b04      	ldr	r3, [pc, #16]	; (1bf78 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1bf66:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   1bf6a:	bf18      	it	ne
   1bf6c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1bf70:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   1bf72:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   1bf76:	4770      	bx	lr
   1bf78:	50000300 	.word	0x50000300

0001bf7c <uarte_instance_init.isra.0>:
	return config->uarte_regs;
   1bf7c:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1bf7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1bf82:	681c      	ldr	r4, [r3, #0]
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1bf84:	68c7      	ldr	r7, [r0, #12]
static int uarte_instance_init(const struct device *dev,
   1bf86:	460d      	mov	r5, r1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1bf88:	f04f 0800 	mov.w	r8, #0
   1bf8c:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
   1bf90:	4606      	mov	r6, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1bf92:	6038      	str	r0, [r7, #0]
        nrf_gpio_pin_set(pin_number);
   1bf94:	6808      	ldr	r0, [r1, #0]
   1bf96:	f7ff ffe1 	bl	1bf5c <nrf_gpio_pin_set>

	nrf_gpio_pin_write(config->pseltxd, 1);
	nrf_gpio_cfg_output(config->pseltxd);
   1bf9a:	6828      	ldr	r0, [r5, #0]
   1bf9c:	f7ff ffce 	bl	1bf3c <nrf_gpio_cfg_output>

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1bfa0:	686a      	ldr	r2, [r5, #4]
   1bfa2:	1c51      	adds	r1, r2, #1
   1bfa4:	d00b      	beq.n	1bfbe <uarte_instance_init.isra.0+0x42>
    return pin_number >> 5;
   1bfa6:	0951      	lsrs	r1, r2, #5
        case 1: return NRF_P1;
   1bfa8:	2901      	cmp	r1, #1
    *p_pin = pin_number & 0x1F;
   1bfaa:	f002 031f 	and.w	r3, r2, #31
        case 1: return NRF_P1;
   1bfae:	4941      	ldr	r1, [pc, #260]	; (1c0b4 <uarte_instance_init.isra.0+0x138>)
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1bfb0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   1bfb4:	bf18      	it	ne
   1bfb6:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1bfba:	f841 8023 	str.w	r8, [r1, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   1bfbe:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   1bfc0:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1bfc4:	68ab      	ldr	r3, [r5, #8]
    p_reg->PSEL.RXD = pselrxd;
   1bfc6:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   1bfca:	1c5a      	adds	r2, r3, #1
   1bfcc:	d00c      	beq.n	1bfe8 <uarte_instance_init.isra.0+0x6c>
    *p_pin = pin_number & 0x1F;
   1bfce:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1bfd2:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1bfd4:	2b01      	cmp	r3, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1bfd6:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   1bfda:	4b36      	ldr	r3, [pc, #216]	; (1c0b4 <uarte_instance_init.isra.0+0x138>)
   1bfdc:	bf18      	it	ne
   1bfde:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1bfe2:	2100      	movs	r1, #0
   1bfe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1bfe8:	68e8      	ldr	r0, [r5, #12]
   1bfea:	1c43      	adds	r3, r0, #1
   1bfec:	d004      	beq.n	1bff8 <uarte_instance_init.isra.0+0x7c>
        nrf_gpio_pin_set(pin_number);
   1bfee:	f7ff ffb5 	bl	1bf5c <nrf_gpio_pin_set>
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
   1bff2:	68e8      	ldr	r0, [r5, #12]
   1bff4:	f7ff ffa2 	bl	1bf3c <nrf_gpio_cfg_output>
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   1bff8:	e9d5 3202 	ldrd	r3, r2, [r5, #8]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1bffc:	68f1      	ldr	r1, [r6, #12]
    p_reg->PSEL.RTS = pselrts;
   1bffe:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   1c002:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   1c004:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1c008:	4630      	mov	r0, r6
   1c00a:	f7ff fe85 	bl	1bd18 <uarte_nrfx_configure>
	if (err) {
   1c00e:	4680      	mov	r8, r0
   1c010:	b9a8      	cbnz	r0, 1c03e <uarte_instance_init.isra.0+0xc2>

#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
   1c012:	6873      	ldr	r3, [r6, #4]
   1c014:	799b      	ldrb	r3, [r3, #6]
   1c016:	b343      	cbz	r3, 1c06a <uarte_instance_init.isra.0+0xee>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1c018:	f107 0012 	add.w	r0, r7, #18
   1c01c:	f000 fc7e 	bl	1c91c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1c020:	4b25      	ldr	r3, [pc, #148]	; (1c0b8 <uarte_instance_init.isra.0+0x13c>)
   1c022:	4298      	cmp	r0, r3
   1c024:	d00e      	beq.n	1c044 <uarte_instance_init.isra.0+0xc8>
   1c026:	4b25      	ldr	r3, [pc, #148]	; (1c0bc <uarte_instance_init.isra.0+0x140>)
   1c028:	4925      	ldr	r1, [pc, #148]	; (1c0c0 <uarte_instance_init.isra.0+0x144>)
		LOG_ERR("Failed to allocate PPI Channel");
   1c02a:	4826      	ldr	r0, [pc, #152]	; (1c0c4 <uarte_instance_init.isra.0+0x148>)
   1c02c:	1ac9      	subs	r1, r1, r3
   1c02e:	08c9      	lsrs	r1, r1, #3
   1c030:	0189      	lsls	r1, r1, #6
   1c032:	f041 0101 	orr.w	r1, r1, #1
   1c036:	f003 fcdb 	bl	1f9f0 <log_0>
		return -EIO;
   1c03a:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1c03e:	4640      	mov	r0, r8
   1c040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1c044:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1c046:	00c3      	lsls	r3, r0, #3
   1c048:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c04c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1c050:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1c054:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c058:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c05c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1c060:	4a19      	ldr	r2, [pc, #100]	; (1c0c8 <uarte_instance_init.isra.0+0x14c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1c062:	2301      	movs	r3, #1
   1c064:	4083      	lsls	r3, r0
   1c066:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1c06a:	2308      	movs	r3, #8
   1c06c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1c070:	686b      	ldr	r3, [r5, #4]
   1c072:	3301      	adds	r3, #1
   1c074:	d00c      	beq.n	1c090 <uarte_instance_init.isra.0+0x114>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c076:	2300      	movs	r3, #0
   1c078:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1c07c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1c080:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1c084:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1c088:	2301      	movs	r3, #1
   1c08a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c08e:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   1c090:	6873      	ldr	r3, [r6, #4]
   1c092:	799b      	ldrb	r3, [r3, #6]
   1c094:	b91b      	cbnz	r3, 1c09e <uarte_instance_init.isra.0+0x122>
    p_reg->INTENSET = mask;
   1c096:	f44f 7380 	mov.w	r3, #256	; 0x100
   1c09a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   1c09e:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1c0a0:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1c0a2:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1c0a6:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c0aa:	2301      	movs	r3, #1
   1c0ac:	60a3      	str	r3, [r4, #8]
   1c0ae:	60e3      	str	r3, [r4, #12]
	return 0;
   1c0b0:	e7c5      	b.n	1c03e <uarte_instance_init.isra.0+0xc2>
   1c0b2:	bf00      	nop
   1c0b4:	50000300 	.word	0x50000300
   1c0b8:	0bad0000 	.word	0x0bad0000
   1c0bc:	00024c24 	.word	0x00024c24
   1c0c0:	00024d5c 	.word	0x00024d5c
   1c0c4:	0002892d 	.word	0x0002892d
   1c0c8:	4001f000 	.word	0x4001f000

0001c0cc <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1c0cc:	b530      	push	{r4, r5, lr}
   1c0ce:	4b0a      	ldr	r3, [pc, #40]	; (1c0f8 <uarte_0_init+0x2c>)
   1c0d0:	4605      	mov	r5, r0
   1c0d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1c0d4:	b085      	sub	sp, #20
   1c0d6:	466c      	mov	r4, sp
   1c0d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1c0dc:	2200      	movs	r2, #0
   1c0de:	2101      	movs	r1, #1
   1c0e0:	2002      	movs	r0, #2
   1c0e2:	f7eb fb65 	bl	77b0 <z_arm_irq_priority_set>
   1c0e6:	2002      	movs	r0, #2
   1c0e8:	f7eb fb30 	bl	774c <arch_irq_enable>
   1c0ec:	4621      	mov	r1, r4
   1c0ee:	4628      	mov	r0, r5
   1c0f0:	f7ff ff44 	bl	1bf7c <uarte_instance_init.isra.0>
   1c0f4:	b005      	add	sp, #20
   1c0f6:	bd30      	pop	{r4, r5, pc}
   1c0f8:	00024e30 	.word	0x00024e30

0001c0fc <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1c0fc:	b530      	push	{r4, r5, lr}
   1c0fe:	4b0a      	ldr	r3, [pc, #40]	; (1c128 <uarte_1_init+0x2c>)
   1c100:	4605      	mov	r5, r0
   1c102:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1c104:	b085      	sub	sp, #20
   1c106:	466c      	mov	r4, sp
   1c108:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1c10c:	2200      	movs	r2, #0
   1c10e:	2101      	movs	r1, #1
   1c110:	2028      	movs	r0, #40	; 0x28
   1c112:	f7eb fb4d 	bl	77b0 <z_arm_irq_priority_set>
   1c116:	2028      	movs	r0, #40	; 0x28
   1c118:	f7eb fb18 	bl	774c <arch_irq_enable>
   1c11c:	4621      	mov	r1, r4
   1c11e:	4628      	mov	r0, r5
   1c120:	f7ff ff2c 	bl	1bf7c <uarte_instance_init.isra.0>
   1c124:	b005      	add	sp, #20
   1c126:	bd30      	pop	{r4, r5, pc}
   1c128:	00024e40 	.word	0x00024e40

0001c12c <random_byte_get>:
	__asm__ volatile(
   1c12c:	f04f 0320 	mov.w	r3, #32
   1c130:	f3ef 8211 	mrs	r2, BASEPRI
   1c134:	f383 8811 	msr	BASEPRI, r3
   1c138:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c13c:	4b08      	ldr	r3, [pc, #32]	; (1c160 <random_byte_get+0x34>)
   1c13e:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1c140:	b159      	cbz	r1, 1c15a <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1c142:	4908      	ldr	r1, [pc, #32]	; (1c164 <random_byte_get+0x38>)
   1c144:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c148:	2100      	movs	r1, #0
   1c14a:	6019      	str	r1, [r3, #0]
   1c14c:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1c14e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1c150:	f382 8811 	msr	BASEPRI, r2
   1c154:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1c158:	4770      	bx	lr
	int retval = -EAGAIN;
   1c15a:	f06f 000a 	mvn.w	r0, #10
   1c15e:	e7f7      	b.n	1c150 <random_byte_get+0x24>
   1c160:	4000d100 	.word	0x4000d100
   1c164:	4000d000 	.word	0x4000d000

0001c168 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1c168:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c16a:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1c16c:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1c16e:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1c170:	f04f 0520 	mov.w	r5, #32
   1c174:	f3ef 8011 	mrs	r0, BASEPRI
   1c178:	f385 8811 	msr	BASEPRI, r5
   1c17c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1c180:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1c182:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1c186:	1ba4      	subs	r4, r4, r6
   1c188:	403c      	ands	r4, r7
	if (available < len) {
   1c18a:	42a2      	cmp	r2, r4
		len = available;
   1c18c:	bf88      	it	hi
   1c18e:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1c190:	eb06 0c02 	add.w	ip, r6, r2
   1c194:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1c198:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1c19a:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1c19e:	f380 8811 	msr	BASEPRI, r0
   1c1a2:	f3bf 8f6f 	isb	sy
   1c1a6:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1c1a8:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1c1aa:	4282      	cmp	r2, r0
   1c1ac:	d119      	bne.n	1c1e2 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1c1ae:	4576      	cmp	r6, lr
   1c1b0:	d10d      	bne.n	1c1ce <rng_pool_get+0x66>
	__asm__ volatile(
   1c1b2:	f04f 0520 	mov.w	r5, #32
   1c1b6:	f3ef 8211 	mrs	r2, BASEPRI
   1c1ba:	f385 8811 	msr	BASEPRI, r5
   1c1be:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1c1c2:	781d      	ldrb	r5, [r3, #0]
   1c1c4:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1c1c6:	f382 8811 	msr	BASEPRI, r2
   1c1ca:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1c1ce:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1c1d0:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1c1d2:	b288      	uxth	r0, r1
	available = available - len;
   1c1d4:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1c1d6:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c1d8:	bf22      	ittt	cs
   1c1da:	4b06      	ldrcs	r3, [pc, #24]	; (1c1f4 <rng_pool_get+0x8c>)
   1c1dc:	2201      	movcs	r2, #1
   1c1de:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1c1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1c1e2:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1c1e6:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1c1e8:	f89c c005 	ldrb.w	ip, [ip, #5]
   1c1ec:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1c1f0:	403d      	ands	r5, r7
   1c1f2:	e7da      	b.n	1c1aa <rng_pool_get+0x42>
   1c1f4:	4000d000 	.word	0x4000d000

0001c1f8 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c1f8:	43db      	mvns	r3, r3
{
   1c1fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c1fe:	f013 0501 	ands.w	r5, r3, #1
{
   1c202:	460e      	mov	r6, r1
   1c204:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c206:	d004      	beq.n	1c212 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1c208:	4821      	ldr	r0, [pc, #132]	; (1c290 <entropy_nrf5_get_entropy_isr+0x98>)
   1c20a:	f7ff ffad 	bl	1c168 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1c20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1c212:	2a00      	cmp	r2, #0
   1c214:	d033      	beq.n	1c27e <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1c216:	f04f 0320 	mov.w	r3, #32
   1c21a:	f3ef 8811 	mrs	r8, BASEPRI
   1c21e:	f383 8811 	msr	BASEPRI, r3
   1c222:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1c226:	200d      	movs	r0, #13
   1c228:	f7eb fab4 	bl	7794 <arch_irq_is_enabled>
   1c22c:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1c22e:	200d      	movs	r0, #13
   1c230:	f7eb fa9c 	bl	776c <arch_irq_disable>
	__asm__ volatile(
   1c234:	f388 8811 	msr	BASEPRI, r8
   1c238:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c23c:	4a15      	ldr	r2, [pc, #84]	; (1c294 <entropy_nrf5_get_entropy_isr+0x9c>)
   1c23e:	6015      	str	r5, [r2, #0]
   1c240:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c242:	4b15      	ldr	r3, [pc, #84]	; (1c298 <entropy_nrf5_get_entropy_isr+0xa0>)
   1c244:	2101      	movs	r1, #1
   1c246:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c248:	4914      	ldr	r1, [pc, #80]	; (1c29c <entropy_nrf5_get_entropy_isr+0xa4>)
   1c24a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1c24e:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1c252:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c254:	4691      	mov	r9, r2
   1c256:	468a      	mov	sl, r1
   1c258:	4698      	mov	r8, r3
   1c25a:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1c25e:	b183      	cbz	r3, 1c282 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1c260:	f7ff ff64 	bl	1c12c <random_byte_get>
			if (byte < 0) {
   1c264:	1e03      	subs	r3, r0, #0
   1c266:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1c26a:	dbf6      	blt.n	1c25a <entropy_nrf5_get_entropy_isr+0x62>
   1c26c:	3d01      	subs	r5, #1
   1c26e:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1c270:	5573      	strb	r3, [r6, r5]
		} while (len);
   1c272:	2d00      	cmp	r5, #0
   1c274:	d1f1      	bne.n	1c25a <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1c276:	b117      	cbz	r7, 1c27e <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1c278:	200d      	movs	r0, #13
   1c27a:	f7eb fa67 	bl	774c <arch_irq_enable>
	return cnt;
   1c27e:	4620      	mov	r0, r4
   1c280:	e7c5      	b.n	1c20e <entropy_nrf5_get_entropy_isr+0x16>
   1c282:	f3bf 8f4f 	dsb	sy
				__WFE();
   1c286:	bf20      	wfe
				__SEV();
   1c288:	bf40      	sev
				__WFE();
   1c28a:	bf20      	wfe
   1c28c:	e7e5      	b.n	1c25a <entropy_nrf5_get_entropy_isr+0x62>
   1c28e:	bf00      	nop
   1c290:	20003e70 	.word	0x20003e70
   1c294:	4000d100 	.word	0x4000d100
   1c298:	4000d000 	.word	0x4000d000
   1c29c:	e000e100 	.word	0xe000e100

0001c2a0 <entropy_nrf5_get_entropy>:
{
   1c2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1c2a4:	4f13      	ldr	r7, [pc, #76]	; (1c2f4 <entropy_nrf5_get_entropy+0x54>)
   1c2a6:	460d      	mov	r5, r1
   1c2a8:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1c2aa:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1c2ae:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1c2b2:	b914      	cbnz	r4, 1c2ba <entropy_nrf5_get_entropy+0x1a>
}
   1c2b4:	4620      	mov	r0, r4
   1c2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c2ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c2be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c2c2:	4638      	mov	r0, r7
   1c2c4:	f002 fa06 	bl	1e6d4 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1c2c8:	4622      	mov	r2, r4
   1c2ca:	4629      	mov	r1, r5
   1c2cc:	4640      	mov	r0, r8
   1c2ce:	f7ff ff4b 	bl	1c168 <rng_pool_get>
   1c2d2:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1c2d4:	4638      	mov	r0, r7
   1c2d6:	f002 f9d7 	bl	1e688 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1c2da:	b93e      	cbnz	r6, 1c2ec <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1c2dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c2e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c2e4:	4648      	mov	r0, r9
   1c2e6:	f002 f9f5 	bl	1e6d4 <z_impl_k_sem_take>
			continue;
   1c2ea:	e7e2      	b.n	1c2b2 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1c2ec:	1ba4      	subs	r4, r4, r6
   1c2ee:	b2a4      	uxth	r4, r4
		buf += bytes;
   1c2f0:	4435      	add	r5, r6
   1c2f2:	e7de      	b.n	1c2b2 <entropy_nrf5_get_entropy+0x12>
   1c2f4:	20003e40 	.word	0x20003e40

0001c2f8 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *device)
{
   1c2f8:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c2fa:	4c19      	ldr	r4, [pc, #100]	; (1c360 <entropy_nrf5_init+0x68>)
   1c2fc:	2201      	movs	r2, #1
   1c2fe:	4611      	mov	r1, r2
   1c300:	4620      	mov	r0, r4
   1c302:	f008 f8a9 	bl	24458 <z_impl_k_sem_init>
   1c306:	2201      	movs	r2, #1
   1c308:	2100      	movs	r1, #0
   1c30a:	f104 0018 	add.w	r0, r4, #24
   1c30e:	f008 f8a3 	bl	24458 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1c312:	f240 4307 	movw	r3, #1031	; 0x407
   1c316:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1c31a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1c31e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1c320:	230c      	movs	r3, #12
   1c322:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1c326:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1c328:	4b0e      	ldr	r3, [pc, #56]	; (1c364 <entropy_nrf5_init+0x6c>)
   1c32a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1c32e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1c332:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1c336:	f042 0201 	orr.w	r2, r2, #1
   1c33a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c33e:	4a0a      	ldr	r2, [pc, #40]	; (1c368 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   1c340:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c342:	6015      	str	r5, [r2, #0]
   1c344:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1c346:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1c34a:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c34c:	6019      	str	r1, [r3, #0]
   1c34e:	200d      	movs	r0, #13
   1c350:	f7eb fa2e 	bl	77b0 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1c354:	200d      	movs	r0, #13
   1c356:	f7eb f9f9 	bl	774c <arch_irq_enable>

	return 0;
}
   1c35a:	4628      	mov	r0, r5
   1c35c:	bd38      	pop	{r3, r4, r5, pc}
   1c35e:	bf00      	nop
   1c360:	20003e40 	.word	0x20003e40
   1c364:	4000d000 	.word	0x4000d000
   1c368:	4000d100 	.word	0x4000d100

0001c36c <isr>:
{
   1c36c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1c36e:	f7ff fedd 	bl	1c12c <random_byte_get>
	if (byte < 0) {
   1c372:	2800      	cmp	r0, #0
   1c374:	db20      	blt.n	1c3b8 <isr+0x4c>
	uint8_t last  = rngp->last;
   1c376:	4b17      	ldr	r3, [pc, #92]	; (1c3d4 <isr+0x68>)
   1c378:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1c37c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1c380:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1c384:	1a51      	subs	r1, r2, r1
   1c386:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1c38a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1c38c:	d10d      	bne.n	1c3aa <isr+0x3e>
	uint8_t last  = rngp->last;
   1c38e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1c392:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1c396:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1c39a:	1a51      	subs	r1, r2, r1
   1c39c:	ea34 0101 	bics.w	r1, r4, r1
   1c3a0:	d10b      	bne.n	1c3ba <isr+0x4e>
   1c3a2:	4b0d      	ldr	r3, [pc, #52]	; (1c3d8 <isr+0x6c>)
   1c3a4:	2201      	movs	r2, #1
   1c3a6:	601a      	str	r2, [r3, #0]
}
   1c3a8:	e00e      	b.n	1c3c8 <isr+0x5c>
	rngp->buffer[last] = byte;
   1c3aa:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1c3ac:	3201      	adds	r2, #1
   1c3ae:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1c3b0:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1c3b4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1c3b8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1c3ba:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1c3bc:	3201      	adds	r2, #1
   1c3be:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1c3c0:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1c3c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1c3c8:	4804      	ldr	r0, [pc, #16]	; (1c3dc <isr+0x70>)
}
   1c3ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c3ce:	f002 b95b 	b.w	1e688 <z_impl_k_sem_give>
   1c3d2:	bf00      	nop
   1c3d4:	20003e40 	.word	0x20003e40
   1c3d8:	4000d004 	.word	0x4000d004
   1c3dc:	20003e58 	.word	0x20003e58

0001c3e0 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c3e0:	4b06      	ldr	r3, [pc, #24]	; (1c3fc <nrf52_errata_136+0x1c>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1c3e2:	681b      	ldr	r3, [r3, #0]
   1c3e4:	2b08      	cmp	r3, #8
   1c3e6:	d106      	bne.n	1c3f6 <nrf52_errata_136+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c3e8:	4b05      	ldr	r3, [pc, #20]	; (1c400 <nrf52_errata_136+0x20>)
   1c3ea:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1c3ec:	2b05      	cmp	r3, #5
   1c3ee:	d802      	bhi.n	1c3f6 <nrf52_errata_136+0x16>
   1c3f0:	4a04      	ldr	r2, [pc, #16]	; (1c404 <nrf52_errata_136+0x24>)
   1c3f2:	5cd0      	ldrb	r0, [r2, r3]
   1c3f4:	4770      	bx	lr
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1c3f6:	2000      	movs	r0, #0
    #endif
}
   1c3f8:	4770      	bx	lr
   1c3fa:	bf00      	nop
   1c3fc:	10000130 	.word	0x10000130
   1c400:	10000134 	.word	0x10000134
   1c404:	00028967 	.word	0x00028967

0001c408 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c408:	4b06      	ldr	r3, [pc, #24]	; (1c424 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1c40a:	681b      	ldr	r3, [r3, #0]
   1c40c:	2b08      	cmp	r3, #8
   1c40e:	d106      	bne.n	1c41e <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c410:	4b05      	ldr	r3, [pc, #20]	; (1c428 <nrf52_errata_103+0x20>)
   1c412:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1c414:	2b05      	cmp	r3, #5
   1c416:	d802      	bhi.n	1c41e <nrf52_errata_103+0x16>
   1c418:	4a04      	ldr	r2, [pc, #16]	; (1c42c <nrf52_errata_103+0x24>)
   1c41a:	5cd0      	ldrb	r0, [r2, r3]
   1c41c:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1c41e:	2000      	movs	r0, #0
    #endif
}
   1c420:	4770      	bx	lr
   1c422:	bf00      	nop
   1c424:	10000130 	.word	0x10000130
   1c428:	10000134 	.word	0x10000134
   1c42c:	0002896d 	.word	0x0002896d

0001c430 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1c430:	4a02      	ldr	r2, [pc, #8]	; (1c43c <nvmc_wait+0xc>)
   1c432:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1c436:	2b00      	cmp	r3, #0
   1c438:	d0fb      	beq.n	1c432 <nvmc_wait+0x2>
}
   1c43a:	4770      	bx	lr
   1c43c:	4001e000 	.word	0x4001e000

0001c440 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1c440:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1c442:	f7ff ffcd 	bl	1c3e0 <nrf52_errata_136>
   1c446:	b140      	cbz	r0, 1c45a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1c448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c44c:	2200      	movs	r2, #0
   1c44e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1c452:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1c456:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1c45a:	f7ff ffc1 	bl	1c3e0 <nrf52_errata_136>
   1c45e:	2800      	cmp	r0, #0
   1c460:	d046      	beq.n	1c4f0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1c462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c466:	4b52      	ldr	r3, [pc, #328]	; (1c5b0 <SystemInit+0x170>)
   1c468:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1c46c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1c470:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1c474:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1c478:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1c47c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1c480:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1c484:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1c488:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1c48c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1c490:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1c494:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1c498:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1c49c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1c4a0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1c4a4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1c4a8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1c4ac:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1c4b0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1c4b4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1c4b8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1c4bc:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1c4c0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1c4c4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1c4c8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1c4cc:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1c4d0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1c4d4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1c4d8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1c4dc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1c4e0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1c4e4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1c4e8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1c4ec:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1c4f0:	f7ff ff8a 	bl	1c408 <nrf52_errata_103>
   1c4f4:	b110      	cbz	r0, 1c4fc <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1c4f6:	4b2f      	ldr	r3, [pc, #188]	; (1c5b4 <SystemInit+0x174>)
   1c4f8:	4a2f      	ldr	r2, [pc, #188]	; (1c5b8 <SystemInit+0x178>)
   1c4fa:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1c4fc:	f7ff ff84 	bl	1c408 <nrf52_errata_103>
   1c500:	b118      	cbz	r0, 1c50a <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1c502:	4b2e      	ldr	r3, [pc, #184]	; (1c5bc <SystemInit+0x17c>)
   1c504:	22fb      	movs	r2, #251	; 0xfb
   1c506:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1c50a:	f7ff ff7d 	bl	1c408 <nrf52_errata_103>
   1c50e:	b148      	cbz	r0, 1c524 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1c510:	492b      	ldr	r1, [pc, #172]	; (1c5c0 <SystemInit+0x180>)
   1c512:	4b2c      	ldr	r3, [pc, #176]	; (1c5c4 <SystemInit+0x184>)
   1c514:	680a      	ldr	r2, [r1, #0]
   1c516:	681b      	ldr	r3, [r3, #0]
   1c518:	f022 020f 	bic.w	r2, r2, #15
   1c51c:	f003 030f 	and.w	r3, r3, #15
   1c520:	4313      	orrs	r3, r2
   1c522:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1c524:	f7ff ff70 	bl	1c408 <nrf52_errata_103>
   1c528:	b118      	cbz	r0, 1c532 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1c52a:	4b27      	ldr	r3, [pc, #156]	; (1c5c8 <SystemInit+0x188>)
   1c52c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1c530:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1c532:	f7ff ff55 	bl	1c3e0 <nrf52_errata_136>
   1c536:	b148      	cbz	r0, 1c54c <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1c538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c53c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1c540:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1c542:	bf44      	itt	mi
   1c544:	f06f 0201 	mvnmi.w	r2, #1
   1c548:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c54c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1c550:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1c554:	2a00      	cmp	r2, #0
   1c556:	db03      	blt.n	1c560 <SystemInit+0x120>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1c558:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c55c:	2b00      	cmp	r3, #0
   1c55e:	da22      	bge.n	1c5a6 <SystemInit+0x166>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c560:	491a      	ldr	r1, [pc, #104]	; (1c5cc <SystemInit+0x18c>)
   1c562:	2301      	movs	r3, #1
   1c564:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1c568:	f7ff ff62 	bl	1c430 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1c56c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   1c570:	2412      	movs	r4, #18
   1c572:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1c576:	f7ff ff5b 	bl	1c430 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1c57a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1c57e:	f7ff ff57 	bl	1c430 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c582:	2300      	movs	r3, #0
   1c584:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1c588:	f7ff ff52 	bl	1c430 <nvmc_wait>
   1c58c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1c590:	490f      	ldr	r1, [pc, #60]	; (1c5d0 <SystemInit+0x190>)
   1c592:	4b10      	ldr	r3, [pc, #64]	; (1c5d4 <SystemInit+0x194>)
   1c594:	68ca      	ldr	r2, [r1, #12]
   1c596:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1c59a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1c59c:	60cb      	str	r3, [r1, #12]
   1c59e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1c5a2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1c5a4:	e7fd      	b.n	1c5a2 <SystemInit+0x162>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1c5a6:	4b0c      	ldr	r3, [pc, #48]	; (1c5d8 <SystemInit+0x198>)
   1c5a8:	4a0c      	ldr	r2, [pc, #48]	; (1c5dc <SystemInit+0x19c>)
   1c5aa:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1c5ac:	bd10      	pop	{r4, pc}
   1c5ae:	bf00      	nop
   1c5b0:	4000c000 	.word	0x4000c000
   1c5b4:	4000568c 	.word	0x4000568c
   1c5b8:	00038148 	.word	0x00038148
   1c5bc:	4000f000 	.word	0x4000f000
   1c5c0:	40000ee4 	.word	0x40000ee4
   1c5c4:	10000258 	.word	0x10000258
   1c5c8:	40029640 	.word	0x40029640
   1c5cc:	4001e000 	.word	0x4001e000
   1c5d0:	e000ed00 	.word	0xe000ed00
   1c5d4:	05fa0004 	.word	0x05fa0004
   1c5d8:	20000690 	.word	0x20000690
   1c5dc:	03d09000 	.word	0x03d09000

0001c5e0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1c5e0:	4b04      	ldr	r3, [pc, #16]	; (1c5f4 <nrfx_clock_init+0x14>)
   1c5e2:	791a      	ldrb	r2, [r3, #4]
   1c5e4:	b922      	cbnz	r2, 1c5f0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1c5e6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1c5e8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1c5ea:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1c5ec:	4802      	ldr	r0, [pc, #8]	; (1c5f8 <nrfx_clock_init+0x18>)
   1c5ee:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1c5f0:	4802      	ldr	r0, [pc, #8]	; (1c5fc <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1c5f2:	4770      	bx	lr
   1c5f4:	20003e94 	.word	0x20003e94
   1c5f8:	0bad0000 	.word	0x0bad0000
   1c5fc:	0bad000c 	.word	0x0bad000c

0001c600 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   1c600:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1c602:	2000      	movs	r0, #0
   1c604:	f7eb f8c6 	bl	7794 <arch_irq_is_enabled>
   1c608:	b908      	cbnz	r0, 1c60e <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1c60a:	f7eb f89f 	bl	774c <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   1c60e:	4b02      	ldr	r3, [pc, #8]	; (1c618 <nrfx_clock_enable+0x18>)
   1c610:	2201      	movs	r2, #1
   1c612:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1c614:	bd08      	pop	{r3, pc}
   1c616:	bf00      	nop
   1c618:	20006889 	.word	0x20006889

0001c61c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1c61c:	b110      	cbz	r0, 1c624 <nrfx_clock_start+0x8>
   1c61e:	2801      	cmp	r0, #1
   1c620:	d020      	beq.n	1c664 <nrfx_clock_start+0x48>
   1c622:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c628:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c62c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1c630:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   1c634:	4619      	mov	r1, r3
   1c636:	d011      	beq.n	1c65c <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1c638:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1c63c:	2a01      	cmp	r2, #1
   1c63e:	d10d      	bne.n	1c65c <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c640:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c644:	4b0c      	ldr	r3, [pc, #48]	; (1c678 <nrfx_clock_start+0x5c>)
   1c646:	2200      	movs	r2, #0
   1c648:	601a      	str	r2, [r3, #0]
   1c64a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1c64c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c650:	2202      	movs	r2, #2
   1c652:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c656:	2201      	movs	r2, #1
   1c658:	609a      	str	r2, [r3, #8]
}
   1c65a:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c65c:	2300      	movs	r3, #0
   1c65e:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   1c662:	e7ef      	b.n	1c644 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c664:	4b05      	ldr	r3, [pc, #20]	; (1c67c <nrfx_clock_start+0x60>)
   1c666:	2200      	movs	r2, #0
   1c668:	601a      	str	r2, [r3, #0]
   1c66a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1c66c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c670:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c674:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1c676:	4770      	bx	lr
   1c678:	40000104 	.word	0x40000104
   1c67c:	40000100 	.word	0x40000100

0001c680 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1c680:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1c682:	b110      	cbz	r0, 1c68a <nrfx_clock_stop+0xa>
   1c684:	2801      	cmp	r0, #1
   1c686:	d018      	beq.n	1c6ba <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1c688:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1c68a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c68e:	2202      	movs	r2, #2
   1c690:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c694:	4a18      	ldr	r2, [pc, #96]	; (1c6f8 <nrfx_clock_stop+0x78>)
   1c696:	6010      	str	r0, [r2, #0]
   1c698:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c69a:	4a18      	ldr	r2, [pc, #96]	; (1c6fc <nrfx_clock_stop+0x7c>)
   1c69c:	2101      	movs	r1, #1
   1c69e:	6011      	str	r1, [r2, #0]
   1c6a0:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c6a4:	461c      	mov	r4, r3
   1c6a6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1c6aa:	03db      	lsls	r3, r3, #15
   1c6ac:	d5ec      	bpl.n	1c688 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1c6ae:	2001      	movs	r0, #1
   1c6b0:	f007 fb7c 	bl	23dac <nrfx_busy_wait>
   1c6b4:	3d01      	subs	r5, #1
   1c6b6:	d1f6      	bne.n	1c6a6 <nrfx_clock_stop+0x26>
   1c6b8:	e7e6      	b.n	1c688 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c6ba:	4b11      	ldr	r3, [pc, #68]	; (1c700 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
   1c6bc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c6c0:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   1c6c2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c6c6:	601a      	str	r2, [r3, #0]
   1c6c8:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c6ca:	4b0e      	ldr	r3, [pc, #56]	; (1c704 <nrfx_clock_stop+0x84>)
   1c6cc:	f242 7510 	movw	r5, #10000	; 0x2710
   1c6d0:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1c6d2:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1c6d6:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   1c6da:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1c6dc:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1c6e0:	d505      	bpl.n	1c6ee <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1c6e2:	b123      	cbz	r3, 1c6ee <nrfx_clock_stop+0x6e>
   1c6e4:	2001      	movs	r0, #1
   1c6e6:	f007 fb61 	bl	23dac <nrfx_busy_wait>
   1c6ea:	3d01      	subs	r5, #1
   1c6ec:	d1f1      	bne.n	1c6d2 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
   1c6ee:	4b06      	ldr	r3, [pc, #24]	; (1c708 <nrfx_clock_stop+0x88>)
   1c6f0:	2200      	movs	r2, #0
   1c6f2:	715a      	strb	r2, [r3, #5]
   1c6f4:	e7c8      	b.n	1c688 <nrfx_clock_stop+0x8>
   1c6f6:	bf00      	nop
   1c6f8:	40000104 	.word	0x40000104
   1c6fc:	4000000c 	.word	0x4000000c
   1c700:	40000100 	.word	0x40000100
   1c704:	40000004 	.word	0x40000004
   1c708:	20003e94 	.word	0x20003e94

0001c70c <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c70c:	4b16      	ldr	r3, [pc, #88]	; (1c768 <nrfx_clock_irq_handler+0x5c>)
   1c70e:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1c710:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1c712:	b16a      	cbz	r2, 1c730 <nrfx_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c714:	2200      	movs	r2, #0
   1c716:	601a      	str	r2, [r3, #0]
   1c718:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1c71a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c71e:	2201      	movs	r2, #1
   1c720:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1c724:	4b11      	ldr	r3, [pc, #68]	; (1c76c <nrfx_clock_irq_handler+0x60>)
   1c726:	7958      	ldrb	r0, [r3, #5]
   1c728:	b910      	cbnz	r0, 1c730 <nrfx_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
   1c72a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1c72c:	681b      	ldr	r3, [r3, #0]
   1c72e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c730:	4b0f      	ldr	r3, [pc, #60]	; (1c770 <nrfx_clock_irq_handler+0x64>)
   1c732:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1c734:	b172      	cbz	r2, 1c754 <nrfx_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c736:	2200      	movs	r2, #0
   1c738:	601a      	str	r2, [r3, #0]
   1c73a:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c73c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c740:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c744:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1c748:	0792      	lsls	r2, r2, #30
   1c74a:	d104      	bne.n	1c756 <nrfx_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c74c:	2201      	movs	r2, #1
   1c74e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c752:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1c754:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1c756:	2202      	movs	r2, #2
   1c758:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1c75c:	4b03      	ldr	r3, [pc, #12]	; (1c76c <nrfx_clock_irq_handler+0x60>)
}
   1c75e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1c762:	681b      	ldr	r3, [r3, #0]
   1c764:	2001      	movs	r0, #1
   1c766:	4718      	bx	r3
   1c768:	40000100 	.word	0x40000100
   1c76c:	20003e94 	.word	0x20003e94
   1c770:	40000104 	.word	0x40000104

0001c774 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1c774:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1c778:	691a      	ldr	r2, [r3, #16]
}

static bool is_page_aligned_check(uint32_t addr)
{
    /* If the modulo operation returns '0', then the address is aligned. */
    return !(addr % flash_page_size_get());
   1c77a:	fbb0 f3f2 	udiv	r3, r0, r2
   1c77e:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   1c782:	b973      	cbnz	r3, 1c7a2 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1c784:	4b08      	ldr	r3, [pc, #32]	; (1c7a8 <nrfx_nvmc_page_erase+0x34>)
   1c786:	2202      	movs	r2, #2
   1c788:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1c78c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1c790:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1c794:	07d2      	lsls	r2, r2, #31
   1c796:	d5fb      	bpl.n	1c790 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   1c798:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1c79a:	4804      	ldr	r0, [pc, #16]	; (1c7ac <nrfx_nvmc_page_erase+0x38>)
   1c79c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1c7a0:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   1c7a2:	4803      	ldr	r0, [pc, #12]	; (1c7b0 <nrfx_nvmc_page_erase+0x3c>)
}
   1c7a4:	4770      	bx	lr
   1c7a6:	bf00      	nop
   1c7a8:	4001e000 	.word	0x4001e000
   1c7ac:	0bad0000 	.word	0x0bad0000
   1c7b0:	0bad000a 	.word	0x0bad000a

0001c7b4 <nrfx_nvmc_word_write>:
   1c7b4:	4b07      	ldr	r3, [pc, #28]	; (1c7d4 <nrfx_nvmc_word_write+0x20>)
   1c7b6:	2201      	movs	r2, #1
   1c7b8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1c7bc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1c7c0:	07d2      	lsls	r2, r2, #31
   1c7c2:	d5fb      	bpl.n	1c7bc <nrfx_nvmc_word_write+0x8>
    *(volatile uint32_t *)addr = value;
   1c7c4:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1c7c6:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
   1c7ca:	2200      	movs	r2, #0
   1c7cc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   1c7d0:	4770      	bx	lr
   1c7d2:	bf00      	nop
   1c7d4:	4001e000 	.word	0x4001e000

0001c7d8 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   1c7d8:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   1c7da:	4c16      	ldr	r4, [pc, #88]	; (1c834 <nrfx_power_init+0x5c>)
   1c7dc:	7823      	ldrb	r3, [r4, #0]
   1c7de:	bb33      	cbnz	r3, 1c82e <nrfx_power_init+0x56>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   1c7e0:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
   1c7e2:	0791      	lsls	r1, r2, #30
   1c7e4:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1c7e8:	d50d      	bpl.n	1c806 <nrfx_power_init+0x2e>
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c7ea:	4b13      	ldr	r3, [pc, #76]	; (1c838 <nrfx_power_init+0x60>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1c7ec:	681b      	ldr	r3, [r3, #0]
   1c7ee:	2b08      	cmp	r3, #8
   1c7f0:	d11b      	bne.n	1c82a <nrfx_power_init+0x52>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c7f2:	4b12      	ldr	r3, [pc, #72]	; (1c83c <nrfx_power_init+0x64>)
   1c7f4:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1c7f6:	2b05      	cmp	r3, #5
   1c7f8:	d817      	bhi.n	1c82a <nrfx_power_init+0x52>
   1c7fa:	4911      	ldr	r1, [pc, #68]	; (1c840 <nrfx_power_init+0x68>)
   1c7fc:	5cc9      	ldrb	r1, [r1, r3]
   1c7fe:	2301      	movs	r3, #1
   1c800:	b109      	cbz	r1, 1c806 <nrfx_power_init+0x2e>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   1c802:	4910      	ldr	r1, [pc, #64]	; (1c844 <nrfx_power_init+0x6c>)
   1c804:	600b      	str	r3, [r1, #0]
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   1c806:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1c80a:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   1c80e:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1c812:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1c814:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
   1c818:	f7ea ffbc 	bl	7794 <arch_irq_is_enabled>
   1c81c:	b908      	cbnz	r0, 1c822 <nrfx_power_init+0x4a>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1c81e:	f7ea ff95 	bl	774c <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   1c822:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   1c824:	4808      	ldr	r0, [pc, #32]	; (1c848 <nrfx_power_init+0x70>)
    m_initialized = true;
   1c826:	7023      	strb	r3, [r4, #0]
}
   1c828:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   1c82a:	2301      	movs	r3, #1
   1c82c:	e7eb      	b.n	1c806 <nrfx_power_init+0x2e>
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1c82e:	4807      	ldr	r0, [pc, #28]	; (1c84c <nrfx_power_init+0x74>)
   1c830:	e7fa      	b.n	1c828 <nrfx_power_init+0x50>
   1c832:	bf00      	nop
   1c834:	2000688a 	.word	0x2000688a
   1c838:	10000130 	.word	0x10000130
   1c83c:	10000134 	.word	0x10000134
   1c840:	00028973 	.word	0x00028973
   1c844:	40000638 	.word	0x40000638
   1c848:	0bad0000 	.word	0x0bad0000
   1c84c:	0bad000c 	.word	0x0bad000c

0001c850 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   1c850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c854:	f44f 7260 	mov.w	r2, #896	; 0x380
   1c858:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   1c85c:	4b01      	ldr	r3, [pc, #4]	; (1c864 <nrfx_power_usbevt_uninit+0x14>)
   1c85e:	2200      	movs	r2, #0
   1c860:	601a      	str	r2, [r3, #0]
}
   1c862:	4770      	bx	lr
   1c864:	20003ea4 	.word	0x20003ea4

0001c868 <nrfx_power_usbevt_init>:
{
   1c868:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   1c86a:	f7ff fff1 	bl	1c850 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   1c86e:	6803      	ldr	r3, [r0, #0]
   1c870:	b10b      	cbz	r3, 1c876 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   1c872:	4a01      	ldr	r2, [pc, #4]	; (1c878 <nrfx_power_usbevt_init+0x10>)
   1c874:	6013      	str	r3, [r2, #0]
}
   1c876:	bd08      	pop	{r3, pc}
   1c878:	20003ea4 	.word	0x20003ea4

0001c87c <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
   1c87c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   1c880:	b510      	push	{r4, lr}
   1c882:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   1c886:	0762      	lsls	r2, r4, #29
   1c888:	d507      	bpl.n	1c89a <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   1c88a:	f44f 7084 	mov.w	r0, #264	; 0x108
   1c88e:	f007 fa9d 	bl	23dcc <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   1c892:	b110      	cbz	r0, 1c89a <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   1c894:	4b1e      	ldr	r3, [pc, #120]	; (1c910 <nrfx_power_irq_handler+0x94>)
   1c896:	681b      	ldr	r3, [r3, #0]
   1c898:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   1c89a:	06a3      	lsls	r3, r4, #26
   1c89c:	d508      	bpl.n	1c8b0 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   1c89e:	f44f 708a 	mov.w	r0, #276	; 0x114
   1c8a2:	f007 fa93 	bl	23dcc <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   1c8a6:	b118      	cbz	r0, 1c8b0 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   1c8a8:	4b1a      	ldr	r3, [pc, #104]	; (1c914 <nrfx_power_irq_handler+0x98>)
   1c8aa:	2000      	movs	r0, #0
   1c8ac:	681b      	ldr	r3, [r3, #0]
   1c8ae:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   1c8b0:	0660      	lsls	r0, r4, #25
   1c8b2:	d508      	bpl.n	1c8c6 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   1c8b4:	f44f 708c 	mov.w	r0, #280	; 0x118
   1c8b8:	f007 fa88 	bl	23dcc <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   1c8bc:	b118      	cbz	r0, 1c8c6 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   1c8be:	4b15      	ldr	r3, [pc, #84]	; (1c914 <nrfx_power_irq_handler+0x98>)
   1c8c0:	2001      	movs	r0, #1
   1c8c2:	681b      	ldr	r3, [r3, #0]
   1c8c4:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   1c8c6:	0621      	lsls	r1, r4, #24
   1c8c8:	d508      	bpl.n	1c8dc <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   1c8ca:	f44f 708e 	mov.w	r0, #284	; 0x11c
   1c8ce:	f007 fa7d 	bl	23dcc <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   1c8d2:	b118      	cbz	r0, 1c8dc <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   1c8d4:	4b10      	ldr	r3, [pc, #64]	; (1c918 <nrfx_power_irq_handler+0x9c>)
   1c8d6:	2000      	movs	r0, #0
   1c8d8:	681b      	ldr	r3, [r3, #0]
   1c8da:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   1c8dc:	05e2      	lsls	r2, r4, #23
   1c8de:	d508      	bpl.n	1c8f2 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   1c8e0:	f44f 7090 	mov.w	r0, #288	; 0x120
   1c8e4:	f007 fa72 	bl	23dcc <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   1c8e8:	b118      	cbz	r0, 1c8f2 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   1c8ea:	4b0b      	ldr	r3, [pc, #44]	; (1c918 <nrfx_power_irq_handler+0x9c>)
   1c8ec:	2001      	movs	r0, #1
   1c8ee:	681b      	ldr	r3, [r3, #0]
   1c8f0:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   1c8f2:	05a3      	lsls	r3, r4, #22
   1c8f4:	d50a      	bpl.n	1c90c <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   1c8f6:	f44f 7092 	mov.w	r0, #292	; 0x124
   1c8fa:	f007 fa67 	bl	23dcc <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   1c8fe:	b128      	cbz	r0, 1c90c <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   1c900:	4b05      	ldr	r3, [pc, #20]	; (1c918 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   1c902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   1c906:	681b      	ldr	r3, [r3, #0]
   1c908:	2002      	movs	r0, #2
   1c90a:	4718      	bx	r3
}
   1c90c:	bd10      	pop	{r4, pc}
   1c90e:	bf00      	nop
   1c910:	20003e9c 	.word	0x20003e9c
   1c914:	20003ea0 	.word	0x20003ea0
   1c918:	20003ea4 	.word	0x20003ea4

0001c91c <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1c91c:	4b18      	ldr	r3, [pc, #96]	; (1c980 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   1c91e:	f8df c06c 	ldr.w	ip, [pc, #108]	; 1c98c <nrfx_ppi_channel_alloc+0x70>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1c922:	681b      	ldr	r3, [r3, #0]
{
   1c924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1c928:	43db      	mvns	r3, r3
{
   1c92a:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1c92c:	4f15      	ldr	r7, [pc, #84]	; (1c984 <nrfx_ppi_channel_alloc+0x68>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1c92e:	4816      	ldr	r0, [pc, #88]	; (1c988 <nrfx_ppi_channel_alloc+0x6c>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1c930:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1c934:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   1c936:	f04f 0e01 	mov.w	lr, #1
   1c93a:	b2e6      	uxtb	r6, r4
   1c93c:	b90b      	cbnz	r3, 1c942 <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1c93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1c942:	f04f 0220 	mov.w	r2, #32
   1c946:	f3ef 8811 	mrs	r8, BASEPRI
   1c94a:	f382 8811 	msr	BASEPRI, r2
   1c94e:	f3bf 8f6f 	isb	sy
   1c952:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1c956:	4213      	tst	r3, r2
   1c958:	d006      	beq.n	1c968 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1c95a:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1c95c:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   1c95e:	bf01      	itttt	eq
   1c960:	4311      	orreq	r1, r2
   1c962:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   1c964:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   1c966:	4660      	moveq	r0, ip
	__asm__ volatile(
   1c968:	f388 8811 	msr	BASEPRI, r8
   1c96c:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   1c970:	4560      	cmp	r0, ip
   1c972:	f104 0401 	add.w	r4, r4, #1
   1c976:	d0e2      	beq.n	1c93e <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   1c978:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1c97c:	e7dd      	b.n	1c93a <nrfx_ppi_channel_alloc+0x1e>
   1c97e:	bf00      	nop
   1c980:	000262c4 	.word	0x000262c4
   1c984:	20003ea8 	.word	0x20003ea8
   1c988:	0bad0002 	.word	0x0bad0002
   1c98c:	0bad0000 	.word	0x0bad0000

0001c990 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c990:	4b06      	ldr	r3, [pc, #24]	; (1c9ac <nrf52_errata_166+0x1c>)
            if (var1 == 0x08)
   1c992:	681b      	ldr	r3, [r3, #0]
   1c994:	2b08      	cmp	r3, #8
   1c996:	d106      	bne.n	1c9a6 <nrf52_errata_166+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c998:	4b05      	ldr	r3, [pc, #20]	; (1c9b0 <nrf52_errata_166+0x20>)
   1c99a:	681b      	ldr	r3, [r3, #0]
                switch(var2)
   1c99c:	2b05      	cmp	r3, #5
   1c99e:	d802      	bhi.n	1c9a6 <nrf52_errata_166+0x16>
   1c9a0:	4a04      	ldr	r2, [pc, #16]	; (1c9b4 <nrf52_errata_166+0x24>)
   1c9a2:	5cd0      	ldrb	r0, [r2, r3]
   1c9a4:	4770      	bx	lr
        return false;
   1c9a6:	2000      	movs	r0, #0
}
   1c9a8:	4770      	bx	lr
   1c9aa:	bf00      	nop
   1c9ac:	10000130 	.word	0x10000130
   1c9b0:	10000134 	.word	0x10000134
   1c9b4:	00028979 	.word	0x00028979

0001c9b8 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c9b8:	4b06      	ldr	r3, [pc, #24]	; (1c9d4 <nrf52_errata_187+0x1c>)
            if (var1 == 0x08)
   1c9ba:	681b      	ldr	r3, [r3, #0]
   1c9bc:	2b08      	cmp	r3, #8
   1c9be:	d106      	bne.n	1c9ce <nrf52_errata_187+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c9c0:	4b05      	ldr	r3, [pc, #20]	; (1c9d8 <nrf52_errata_187+0x20>)
   1c9c2:	681b      	ldr	r3, [r3, #0]
                switch(var2)
   1c9c4:	2b05      	cmp	r3, #5
   1c9c6:	d802      	bhi.n	1c9ce <nrf52_errata_187+0x16>
   1c9c8:	4a04      	ldr	r2, [pc, #16]	; (1c9dc <nrf52_errata_187+0x24>)
   1c9ca:	5cd0      	ldrb	r0, [r2, r3]
   1c9cc:	4770      	bx	lr
        return false;
   1c9ce:	2000      	movs	r0, #0
}
   1c9d0:	4770      	bx	lr
   1c9d2:	bf00      	nop
   1c9d4:	10000130 	.word	0x10000130
   1c9d8:	10000134 	.word	0x10000134
   1c9dc:	0002897f 	.word	0x0002897f

0001c9e0 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1c9e0:	4b05      	ldr	r3, [pc, #20]	; (1c9f8 <ep_state_access+0x18>)
   1c9e2:	f010 0f80 	tst.w	r0, #128	; 0x80
   1c9e6:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   1c9ea:	bf08      	it	eq
   1c9ec:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   1c9ee:	f000 000f 	and.w	r0, r0, #15
}
   1c9f2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1c9f6:	4770      	bx	lr
   1c9f8:	2000401c 	.word	0x2000401c

0001c9fc <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
   1c9fc:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   1c9fe:	f7ff ffc7 	bl	1c990 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   1ca02:	b110      	cbz	r0, 1ca0a <usbd_dma_pending_clear+0xe>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1ca04:	4b03      	ldr	r3, [pc, #12]	; (1ca14 <usbd_dma_pending_clear+0x18>)
   1ca06:	2200      	movs	r2, #0
   1ca08:	601a      	str	r2, [r3, #0]
    }
    m_dma_pending = false;
   1ca0a:	4b03      	ldr	r3, [pc, #12]	; (1ca18 <usbd_dma_pending_clear+0x1c>)
   1ca0c:	2200      	movs	r2, #0
   1ca0e:	701a      	strb	r2, [r3, #0]
}
   1ca10:	bd08      	pop	{r3, pc}
   1ca12:	bf00      	nop
   1ca14:	40027c1c 	.word	0x40027c1c
   1ca18:	2000688c 	.word	0x2000688c

0001ca1c <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   1ca1c:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   1ca1e:	4a09      	ldr	r2, [pc, #36]	; (1ca44 <ev_usbreset_handler+0x28>)
   1ca20:	2300      	movs	r3, #0
   1ca22:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   1ca24:	4a08      	ldr	r2, [pc, #32]	; (1ca48 <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
   1ca26:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   1ca2a:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
   1ca2c:	f88d 3007 	strb.w	r3, [sp, #7]
   1ca30:	2301      	movs	r3, #1
   1ca32:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   1ca36:	4b05      	ldr	r3, [pc, #20]	; (1ca4c <ev_usbreset_handler+0x30>)
   1ca38:	a801      	add	r0, sp, #4
   1ca3a:	681b      	ldr	r3, [r3, #0]
   1ca3c:	4798      	blx	r3
}
   1ca3e:	b003      	add	sp, #12
   1ca40:	f85d fb04 	ldr.w	pc, [sp], #4
   1ca44:	2000688b 	.word	0x2000688b
   1ca48:	2000688e 	.word	0x2000688e
   1ca4c:	200040ac 	.word	0x200040ac

0001ca50 <usbd_errata_187_211_begin>:

/**
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
   1ca50:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ca52:	f04f 0320 	mov.w	r3, #32
   1ca56:	f3ef 8411 	mrs	r4, BASEPRI
   1ca5a:	f383 8811 	msr	BASEPRI, r3
   1ca5e:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1ca62:	4b08      	ldr	r3, [pc, #32]	; (1ca84 <usbd_errata_187_211_begin+0x34>)
   1ca64:	4a08      	ldr	r2, [pc, #32]	; (1ca88 <usbd_errata_187_211_begin+0x38>)
   1ca66:	6818      	ldr	r0, [r3, #0]
   1ca68:	2103      	movs	r1, #3
   1ca6a:	b948      	cbnz	r0, 1ca80 <usbd_errata_187_211_begin+0x30>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1ca6c:	f249 3075 	movw	r0, #37749	; 0x9375
   1ca70:	6018      	str	r0, [r3, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   1ca72:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1ca74:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
   1ca76:	f384 8811 	msr	BASEPRI, r4
   1ca7a:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   1ca7e:	bd10      	pop	{r4, pc}
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   1ca80:	6011      	str	r1, [r2, #0]
   1ca82:	e7f8      	b.n	1ca76 <usbd_errata_187_211_begin+0x26>
   1ca84:	4006ec00 	.word	0x4006ec00
   1ca88:	4006ed14 	.word	0x4006ed14

0001ca8c <usbd_errata_187_211_end>:

/**
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
   1ca8c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ca8e:	f04f 0320 	mov.w	r3, #32
   1ca92:	f3ef 8411 	mrs	r4, BASEPRI
   1ca96:	f383 8811 	msr	BASEPRI, r3
   1ca9a:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1ca9e:	4b08      	ldr	r3, [pc, #32]	; (1cac0 <usbd_errata_187_211_end+0x34>)
   1caa0:	4a08      	ldr	r2, [pc, #32]	; (1cac4 <usbd_errata_187_211_end+0x38>)
   1caa2:	6818      	ldr	r0, [r3, #0]
   1caa4:	b948      	cbnz	r0, 1caba <usbd_errata_187_211_end+0x2e>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1caa6:	f249 3175 	movw	r1, #37749	; 0x9375
   1caaa:	6019      	str	r1, [r3, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   1caac:	6010      	str	r0, [r2, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1caae:	6019      	str	r1, [r3, #0]
	__asm__ volatile(
   1cab0:	f384 8811 	msr	BASEPRI, r4
   1cab4:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   1cab8:	bd10      	pop	{r4, pc}
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   1caba:	2300      	movs	r3, #0
   1cabc:	6013      	str	r3, [r2, #0]
   1cabe:	e7f7      	b.n	1cab0 <usbd_errata_187_211_end+0x24>
   1cac0:	4006ec00 	.word	0x4006ec00
   1cac4:	4006ed14 	.word	0x4006ed14

0001cac8 <nrfx_usbd_feeder_flash>:
{
   1cac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   1caca:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   1cacc:	4f0b      	ldr	r7, [pc, #44]	; (1cafc <nrfx_usbd_feeder_flash+0x34>)
   1cace:	4295      	cmp	r5, r2
   1cad0:	bf28      	it	cs
   1cad2:	4615      	movcs	r5, r2
{
   1cad4:	460c      	mov	r4, r1
   1cad6:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   1cad8:	462a      	mov	r2, r5
   1cada:	6809      	ldr	r1, [r1, #0]
   1cadc:	4638      	mov	r0, r7
   1cade:	f004 fde2 	bl	216a6 <memcpy>
    p_transfer->size -= tx_size;
   1cae2:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   1cae4:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
   1cae6:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
   1cae8:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
   1caec:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
   1caee:	6060      	str	r0, [r4, #4]
}
   1caf0:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   1caf2:	6022      	str	r2, [r4, #0]
}
   1caf4:	bf18      	it	ne
   1caf6:	2001      	movne	r0, #1
   1caf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cafa:	bf00      	nop
   1cafc:	200040b0 	.word	0x200040b0

0001cb00 <nrfx_usbd_feeder_flash_zlp>:
{
   1cb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   1cb02:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
   1cb04:	4294      	cmp	r4, r2
   1cb06:	bf28      	it	cs
   1cb08:	4614      	movcs	r4, r2
{
   1cb0a:	4606      	mov	r6, r0
   1cb0c:	460d      	mov	r5, r1
    if (tx_size != 0)
   1cb0e:	b18c      	cbz	r4, 1cb34 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   1cb10:	4f09      	ldr	r7, [pc, #36]	; (1cb38 <nrfx_usbd_feeder_flash_zlp+0x38>)
   1cb12:	6809      	ldr	r1, [r1, #0]
   1cb14:	4622      	mov	r2, r4
   1cb16:	4638      	mov	r0, r7
   1cb18:	f004 fdc5 	bl	216a6 <memcpy>
        p_next->p_data.tx = p_buffer;
   1cb1c:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
   1cb1e:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
   1cb20:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   1cb22:	1b1b      	subs	r3, r3, r4
   1cb24:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   1cb26:	682b      	ldr	r3, [r5, #0]
}
   1cb28:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   1cb2a:	4423      	add	r3, r4
   1cb2c:	602b      	str	r3, [r5, #0]
}
   1cb2e:	bf18      	it	ne
   1cb30:	2001      	movne	r0, #1
   1cb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
   1cb34:	6004      	str	r4, [r0, #0]
   1cb36:	e7f2      	b.n	1cb1e <nrfx_usbd_feeder_flash_zlp+0x1e>
   1cb38:	200040b0 	.word	0x200040b0

0001cb3c <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
   1cb3c:	4b21      	ldr	r3, [pc, #132]	; (1cbc4 <ev_usbevent_handler+0x88>)
{
   1cb3e:	b513      	push	{r0, r1, r4, lr}
   1cb40:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   1cb44:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   1cb48:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   1cb4a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1cb4e:	d50e      	bpl.n	1cb6e <ev_usbevent_handler+0x32>
        m_bus_suspend = true;
   1cb50:	4b1d      	ldr	r3, [pc, #116]	; (1cbc8 <ev_usbevent_handler+0x8c>)
   1cb52:	2201      	movs	r2, #1
   1cb54:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   1cb56:	2300      	movs	r3, #0
   1cb58:	f8ad 3005 	strh.w	r3, [sp, #5]
   1cb5c:	f88d 3007 	strb.w	r3, [sp, #7]
   1cb60:	2302      	movs	r3, #2
   1cb62:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   1cb66:	4b19      	ldr	r3, [pc, #100]	; (1cbcc <ev_usbevent_handler+0x90>)
   1cb68:	a801      	add	r0, sp, #4
   1cb6a:	681b      	ldr	r3, [r3, #0]
   1cb6c:	4798      	blx	r3
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   1cb6e:	05a2      	lsls	r2, r4, #22
   1cb70:	d50d      	bpl.n	1cb8e <ev_usbevent_handler+0x52>
        m_bus_suspend = false;
   1cb72:	4a15      	ldr	r2, [pc, #84]	; (1cbc8 <ev_usbevent_handler+0x8c>)
   1cb74:	2300      	movs	r3, #0
   1cb76:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
   1cb78:	f8ad 3005 	strh.w	r3, [sp, #5]
   1cb7c:	f88d 3007 	strb.w	r3, [sp, #7]
   1cb80:	2303      	movs	r3, #3
   1cb82:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   1cb86:	4b11      	ldr	r3, [pc, #68]	; (1cbcc <ev_usbevent_handler+0x90>)
   1cb88:	a801      	add	r0, sp, #4
   1cb8a:	681b      	ldr	r3, [r3, #0]
   1cb8c:	4798      	blx	r3
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   1cb8e:	0563      	lsls	r3, r4, #21
   1cb90:	d516      	bpl.n	1cbc0 <ev_usbevent_handler+0x84>
        if (m_bus_suspend)
   1cb92:	4a0d      	ldr	r2, [pc, #52]	; (1cbc8 <ev_usbevent_handler+0x8c>)
   1cb94:	7813      	ldrb	r3, [r2, #0]
   1cb96:	b19b      	cbz	r3, 1cbc0 <ev_usbevent_handler+0x84>
            m_bus_suspend = false;
   1cb98:	2300      	movs	r3, #0
   1cb9a:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   1cb9c:	4a09      	ldr	r2, [pc, #36]	; (1cbc4 <ev_usbevent_handler+0x88>)
   1cb9e:	2101      	movs	r1, #1
   1cba0:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1cba4:	6591      	str	r1, [r2, #88]	; 0x58
   1cba6:	3258      	adds	r2, #88	; 0x58
            m_event_handler(&evt);
   1cba8:	a801      	add	r0, sp, #4
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1cbaa:	6812      	ldr	r2, [r2, #0]
            const nrfx_usbd_evt_t evt = {
   1cbac:	f8ad 3005 	strh.w	r3, [sp, #5]
   1cbb0:	f88d 3007 	strb.w	r3, [sp, #7]
   1cbb4:	2304      	movs	r3, #4
   1cbb6:	f88d 3004 	strb.w	r3, [sp, #4]
            m_event_handler(&evt);
   1cbba:	4b04      	ldr	r3, [pc, #16]	; (1cbcc <ev_usbevent_handler+0x90>)
   1cbbc:	681b      	ldr	r3, [r3, #0]
   1cbbe:	4798      	blx	r3
}
   1cbc0:	b002      	add	sp, #8
   1cbc2:	bd10      	pop	{r4, pc}
   1cbc4:	40027000 	.word	0x40027000
   1cbc8:	2000688b 	.word	0x2000688b
   1cbcc:	200040ac 	.word	0x200040ac

0001cbd0 <ev_sof_handler>:
{
   1cbd0:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   1cbd2:	2300      	movs	r3, #0
   1cbd4:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   1cbd8:	4b0b      	ldr	r3, [pc, #44]	; (1cc08 <ev_sof_handler+0x38>)
   1cbda:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   1cbde:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   1cbe2:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   1cbe6:	4a09      	ldr	r2, [pc, #36]	; (1cc0c <ev_sof_handler+0x3c>)
    if (size_isoout == 0)
   1cbe8:	2b00      	cmp	r3, #0
   1cbea:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   1cbec:	bf0c      	ite	eq
   1cbee:	f44f 7180 	moveq.w	r1, #256	; 0x100
   1cbf2:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
   1cbf6:	430b      	orrs	r3, r1
   1cbf8:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   1cbfa:	4b05      	ldr	r3, [pc, #20]	; (1cc10 <ev_sof_handler+0x40>)
   1cbfc:	a801      	add	r0, sp, #4
   1cbfe:	681b      	ldr	r3, [r3, #0]
   1cc00:	4798      	blx	r3
}
   1cc02:	b003      	add	sp, #12
   1cc04:	f85d fb04 	ldr.w	pc, [sp], #4
   1cc08:	40027000 	.word	0x40027000
   1cc0c:	20003f88 	.word	0x20003f88
   1cc10:	200040ac 	.word	0x200040ac

0001cc14 <atomic_and.constprop.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cc14:	4b07      	ldr	r3, [pc, #28]	; (1cc34 <atomic_and.constprop.0+0x20>)
}
   1cc16:	f3bf 8f5b 	dmb	ish
   1cc1a:	4602      	mov	r2, r0
   1cc1c:	e853 0f00 	ldrex	r0, [r3]
   1cc20:	ea00 0102 	and.w	r1, r0, r2
   1cc24:	e843 1c00 	strex	ip, r1, [r3]
   1cc28:	f1bc 0f00 	cmp.w	ip, #0
   1cc2c:	d1f6      	bne.n	1cc1c <atomic_and.constprop.0+0x8>
   1cc2e:	f3bf 8f5b 	dmb	ish
   1cc32:	4770      	bx	lr
   1cc34:	20003f18 	.word	0x20003f18

0001cc38 <nrf_usbd_ep0in_dma_handler>:
{
   1cc38:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   1cc3a:	f7ff fedf 	bl	1c9fc <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1cc3e:	4b08      	ldr	r3, [pc, #32]	; (1cc60 <nrf_usbd_ep0in_dma_handler+0x28>)
   1cc40:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   1cc44:	2a03      	cmp	r2, #3
   1cc46:	d105      	bne.n	1cc54 <nrf_usbd_ep0in_dma_handler+0x1c>
}
   1cc48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1cc4c:	f06f 0001 	mvn.w	r0, #1
   1cc50:	f7ff bfe0 	b.w	1cc14 <atomic_and.constprop.0>
    else if (p_state->handler.feeder == NULL)
   1cc54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1cc58:	2b00      	cmp	r3, #0
   1cc5a:	d0f5      	beq.n	1cc48 <nrf_usbd_ep0in_dma_handler+0x10>
}
   1cc5c:	bd08      	pop	{r3, pc}
   1cc5e:	bf00      	nop
   1cc60:	20003f8c 	.word	0x20003f8c

0001cc64 <usbd_ep_data_handler>:
{
   1cc64:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1cc66:	460d      	mov	r5, r1
    m_ep_ready |= (1U << bitpos);
   1cc68:	491f      	ldr	r1, [pc, #124]	; (1cce8 <usbd_ep_data_handler+0x84>)
   1cc6a:	2201      	movs	r2, #1
   1cc6c:	680e      	ldr	r6, [r1, #0]
   1cc6e:	fa02 f305 	lsl.w	r3, r2, r5
   1cc72:	4333      	orrs	r3, r6
    if (NRF_USBD_EPIN_CHECK(ep))
   1cc74:	f010 0f80 	tst.w	r0, #128	; 0x80
   1cc78:	4e1c      	ldr	r6, [pc, #112]	; (1ccec <usbd_ep_data_handler+0x88>)
    m_ep_ready |= (1U << bitpos);
   1cc7a:	600b      	str	r3, [r1, #0]
{
   1cc7c:	4604      	mov	r4, r0
    if (NRF_USBD_EPIN_CHECK(ep))
   1cc7e:	d026      	beq.n	1ccce <usbd_ep_data_handler+0x6a>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   1cc80:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1cc84:	4b1a      	ldr	r3, [pc, #104]	; (1ccf0 <usbd_ep_data_handler+0x8c>)
   1cc86:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1cc8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cc8e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1cc92:	681a      	ldr	r2, [r3, #0]
    if (ret)
   1cc94:	b132      	cbz	r2, 1cca4 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   1cc96:	2200      	movs	r2, #0
   1cc98:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   1cc9a:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   1cc9c:	681b      	ldr	r3, [r3, #0]
   1cc9e:	d013      	beq.n	1ccc8 <usbd_ep_data_handler+0x64>
                nrf_usbd_epin_dma_handler(ep);
   1cca0:	f007 f8fe 	bl	23ea0 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   1cca4:	6831      	ldr	r1, [r6, #0]
   1cca6:	40e9      	lsrs	r1, r5
   1cca8:	f011 0101 	ands.w	r1, r1, #1
   1ccac:	d10a      	bne.n	1ccc4 <usbd_ep_data_handler+0x60>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1ccae:	2306      	movs	r3, #6
   1ccb0:	f88d 3004 	strb.w	r3, [sp, #4]
   1ccb4:	f88d 4006 	strb.w	r4, [sp, #6]
   1ccb8:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
   1ccbc:	4b0d      	ldr	r3, [pc, #52]	; (1ccf4 <usbd_ep_data_handler+0x90>)
   1ccbe:	a801      	add	r0, sp, #4
   1ccc0:	681b      	ldr	r3, [r3, #0]
   1ccc2:	4798      	blx	r3
}
   1ccc4:	b002      	add	sp, #8
   1ccc6:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   1ccc8:	f7ff ffb6 	bl	1cc38 <nrf_usbd_ep0in_dma_handler>
   1cccc:	e7ea      	b.n	1cca4 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   1ccce:	6831      	ldr	r1, [r6, #0]
   1ccd0:	40e9      	lsrs	r1, r5
   1ccd2:	07cb      	lsls	r3, r1, #31
   1ccd4:	d4f6      	bmi.n	1ccc4 <usbd_ep_data_handler+0x60>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   1ccd6:	2306      	movs	r3, #6
   1ccd8:	f88d 3004 	strb.w	r3, [sp, #4]
   1ccdc:	f88d 0006 	strb.w	r0, [sp, #6]
   1cce0:	f88d 2007 	strb.w	r2, [sp, #7]
   1cce4:	e7ea      	b.n	1ccbc <usbd_ep_data_handler+0x58>
   1cce6:	bf00      	nop
   1cce8:	20003f88 	.word	0x20003f88
   1ccec:	20003f18 	.word	0x20003f18
   1ccf0:	00026538 	.word	0x00026538
   1ccf4:	200040ac 	.word	0x200040ac

0001ccf8 <ev_setup_data_handler>:
{
   1ccf8:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   1ccfa:	4b05      	ldr	r3, [pc, #20]	; (1cd10 <ev_setup_data_handler+0x18>)
   1ccfc:	781a      	ldrb	r2, [r3, #0]
   1ccfe:	4610      	mov	r0, r2
   1cd00:	f007 f8c2 	bl	23e88 <ep2bit>
}
   1cd04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   1cd08:	4601      	mov	r1, r0
   1cd0a:	4610      	mov	r0, r2
   1cd0c:	f7ff bfaa 	b.w	1cc64 <usbd_ep_data_handler>
   1cd10:	2000688e 	.word	0x2000688e

0001cd14 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   1cd14:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   1cd16:	f7ff fe71 	bl	1c9fc <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1cd1a:	4b0f      	ldr	r3, [pc, #60]	; (1cd58 <ev_dma_epin8_handler+0x44>)
   1cd1c:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   1cd20:	2a03      	cmp	r2, #3
   1cd22:	d106      	bne.n	1cd32 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1cd24:	f46f 7080 	mvn.w	r0, #256	; 0x100
   1cd28:	f7ff ff74 	bl	1cc14 <atomic_and.constprop.0>
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   1cd2c:	b003      	add	sp, #12
   1cd2e:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (p_state->handler.feeder == NULL)
   1cd32:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1cd36:	2b00      	cmp	r3, #0
   1cd38:	d1f8      	bne.n	1cd2c <ev_dma_epin8_handler+0x18>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1cd3a:	f46f 7080 	mvn.w	r0, #256	; 0x100
   1cd3e:	f7ff ff69 	bl	1cc14 <atomic_and.constprop.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1cd42:	2306      	movs	r3, #6
   1cd44:	f88d 3004 	strb.w	r3, [sp, #4]
   1cd48:	2388      	movs	r3, #136	; 0x88
   1cd4a:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   1cd4e:	4b03      	ldr	r3, [pc, #12]	; (1cd5c <ev_dma_epin8_handler+0x48>)
   1cd50:	a801      	add	r0, sp, #4
   1cd52:	681b      	ldr	r3, [r3, #0]
   1cd54:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   1cd56:	e7e9      	b.n	1cd2c <ev_dma_epin8_handler+0x18>
   1cd58:	20003f8c 	.word	0x20003f8c
   1cd5c:	200040ac 	.word	0x200040ac

0001cd60 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   1cd60:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   1cd62:	f7ff fe4b 	bl	1c9fc <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1cd66:	4b0c      	ldr	r3, [pc, #48]	; (1cd98 <ev_dma_epout8_handler+0x38>)
   1cd68:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   1cd6c:	2a03      	cmp	r2, #3
   1cd6e:	d010      	beq.n	1cd92 <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   1cd70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1cd74:	b96b      	cbnz	r3, 1cd92 <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1cd76:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   1cd7a:	f7ff ff4b 	bl	1cc14 <atomic_and.constprop.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1cd7e:	2306      	movs	r3, #6
   1cd80:	f88d 3004 	strb.w	r3, [sp, #4]
   1cd84:	2308      	movs	r3, #8
   1cd86:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   1cd8a:	4b04      	ldr	r3, [pc, #16]	; (1cd9c <ev_dma_epout8_handler+0x3c>)
   1cd8c:	a801      	add	r0, sp, #4
   1cd8e:	681b      	ldr	r3, [r3, #0]
   1cd90:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   1cd92:	b003      	add	sp, #12
   1cd94:	f85d fb04 	ldr.w	pc, [sp], #4
   1cd98:	20003f8c 	.word	0x20003f8c
   1cd9c:	200040ac 	.word	0x200040ac

0001cda0 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   1cda0:	4a02      	ldr	r2, [pc, #8]	; (1cdac <nrfx_usbd_uninit+0xc>)
   1cda2:	2300      	movs	r3, #0
   1cda4:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   1cda6:	4a02      	ldr	r2, [pc, #8]	; (1cdb0 <nrfx_usbd_uninit+0x10>)
   1cda8:	7013      	strb	r3, [r2, #0]
    return;
}
   1cdaa:	4770      	bx	lr
   1cdac:	200040ac 	.word	0x200040ac
   1cdb0:	2000688d 	.word	0x2000688d

0001cdb4 <nrfx_usbd_enable>:
    p_reg->EVENTCAUSE = flags;
   1cdb4:	4b43      	ldr	r3, [pc, #268]	; (1cec4 <nrfx_usbd_enable+0x110>)
   1cdb6:	f44f 6200 	mov.w	r2, #2048	; 0x800


void nrfx_usbd_enable(void)
{
   1cdba:	b510      	push	{r4, lr}
   1cdbc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   1cdc0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   1cdc4:	f7ff fdf8 	bl	1c9b8 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   1cdc8:	b108      	cbz	r0, 1cdce <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   1cdca:	f7ff fe41 	bl	1ca50 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   1cdce:	f7ff fddf 	bl	1c990 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   1cdd2:	b1b0      	cbz	r0, 1ce02 <nrfx_usbd_enable+0x4e>
	__asm__ volatile(
   1cdd4:	f04f 0320 	mov.w	r3, #32
   1cdd8:	f3ef 8411 	mrs	r4, BASEPRI
   1cddc:	f383 8811 	msr	BASEPRI, r3
   1cde0:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1cde4:	4b38      	ldr	r3, [pc, #224]	; (1cec8 <nrfx_usbd_enable+0x114>)
   1cde6:	4a39      	ldr	r2, [pc, #228]	; (1cecc <nrfx_usbd_enable+0x118>)
   1cde8:	6818      	ldr	r0, [r3, #0]
   1cdea:	21c0      	movs	r1, #192	; 0xc0
   1cdec:	2800      	cmp	r0, #0
   1cdee:	d163      	bne.n	1ceb8 <nrfx_usbd_enable+0x104>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1cdf0:	f249 3075 	movw	r0, #37749	; 0x9375
   1cdf4:	6018      	str	r0, [r3, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   1cdf6:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1cdf8:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
   1cdfa:	f384 8811 	msr	BASEPRI, r4
   1cdfe:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   1ce02:	4b30      	ldr	r3, [pc, #192]	; (1cec4 <nrfx_usbd_enable+0x110>)
   1ce04:	2201      	movs	r2, #1
   1ce06:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   1ce0a:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   1ce0e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   1ce12:	0512      	lsls	r2, r2, #20
   1ce14:	d5fb      	bpl.n	1ce0e <nrfx_usbd_enable+0x5a>
    p_reg->EVENTCAUSE = flags;
   1ce16:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1ce1a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   1ce1e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1ce22:	f7ff fdb5 	bl	1c990 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   1ce26:	b1a8      	cbz	r0, 1ce54 <nrfx_usbd_enable+0xa0>
	__asm__ volatile(
   1ce28:	f04f 0320 	mov.w	r3, #32
   1ce2c:	f3ef 8411 	mrs	r4, BASEPRI
   1ce30:	f383 8811 	msr	BASEPRI, r3
   1ce34:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1ce38:	4b23      	ldr	r3, [pc, #140]	; (1cec8 <nrfx_usbd_enable+0x114>)
   1ce3a:	4a24      	ldr	r2, [pc, #144]	; (1cecc <nrfx_usbd_enable+0x118>)
   1ce3c:	6818      	ldr	r0, [r3, #0]
   1ce3e:	2800      	cmp	r0, #0
   1ce40:	d13c      	bne.n	1cebc <nrfx_usbd_enable+0x108>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1ce42:	f249 3175 	movw	r1, #37749	; 0x9375
   1ce46:	6019      	str	r1, [r3, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   1ce48:	6010      	str	r0, [r2, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1ce4a:	6019      	str	r1, [r3, #0]
	__asm__ volatile(
   1ce4c:	f384 8811 	msr	BASEPRI, r4
   1ce50:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   1ce54:	f7ff fdb0 	bl	1c9b8 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   1ce58:	b130      	cbz	r0, 1ce68 <nrfx_usbd_enable+0xb4>
        usbd_errata_187_211_end();
   1ce5a:	f7ff fe17 	bl	1ca8c <usbd_errata_187_211_end>
   1ce5e:	f7ff fdab 	bl	1c9b8 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   1ce62:	b108      	cbz	r0, 1ce68 <nrfx_usbd_enable+0xb4>
#endif
    {
        usbd_errata_187_211_begin();
   1ce64:	f7ff fdf4 	bl	1ca50 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
   1ce68:	f7ff fd92 	bl	1c990 <nrf52_errata_166>
    }

    if (nrfx_usbd_errata_166())
   1ce6c:	b148      	cbz	r0, 1ce82 <nrfx_usbd_enable+0xce>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   1ce6e:	4b18      	ldr	r3, [pc, #96]	; (1ced0 <nrfx_usbd_enable+0x11c>)
   1ce70:	f240 72e3 	movw	r2, #2019	; 0x7e3
   1ce74:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   1ce76:	2240      	movs	r2, #64	; 0x40
   1ce78:	605a      	str	r2, [r3, #4]
  __ASM volatile ("isb 0xF":::"memory");
   1ce7a:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   1ce7e:	f3bf 8f4f 	dsb	sy
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   1ce82:	4b10      	ldr	r3, [pc, #64]	; (1cec4 <nrfx_usbd_enable+0x110>)
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   1ce84:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   1ce86:	2280      	movs	r2, #128	; 0x80
   1ce88:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   1ce8c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   1ce90:	4b10      	ldr	r3, [pc, #64]	; (1ced4 <nrfx_usbd_enable+0x120>)
   1ce92:	f240 12ff 	movw	r2, #511	; 0x1ff
   1ce96:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   1ce98:	4b0f      	ldr	r3, [pc, #60]	; (1ced8 <nrfx_usbd_enable+0x124>)
   1ce9a:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   1ce9c:	f7ff fdae 	bl	1c9fc <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   1cea0:	4b0e      	ldr	r3, [pc, #56]	; (1cedc <nrfx_usbd_enable+0x128>)
   1cea2:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   1cea4:	4b0e      	ldr	r3, [pc, #56]	; (1cee0 <nrfx_usbd_enable+0x12c>)
   1cea6:	2202      	movs	r2, #2
   1cea8:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   1ceaa:	f7ff fd85 	bl	1c9b8 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   1ceae:	b140      	cbz	r0, 1cec2 <nrfx_usbd_enable+0x10e>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   1ceb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        usbd_errata_187_211_end();
   1ceb4:	f7ff bdea 	b.w	1ca8c <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   1ceb8:	6011      	str	r1, [r2, #0]
   1ceba:	e79e      	b.n	1cdfa <nrfx_usbd_enable+0x46>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   1cebc:	2300      	movs	r3, #0
   1cebe:	6013      	str	r3, [r2, #0]
   1cec0:	e7c4      	b.n	1ce4c <nrfx_usbd_enable+0x98>
}
   1cec2:	bd10      	pop	{r4, pc}
   1cec4:	40027000 	.word	0x40027000
   1cec8:	4006ec00 	.word	0x4006ec00
   1cecc:	4006ec14 	.word	0x4006ec14
   1ced0:	40027800 	.word	0x40027800
   1ced4:	20003f88 	.word	0x20003f88
   1ced8:	20003f18 	.word	0x20003f18
   1cedc:	2000688e 	.word	0x2000688e
   1cee0:	2000688d 	.word	0x2000688d

0001cee4 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   1cee4:	4b0a      	ldr	r3, [pc, #40]	; (1cf10 <nrfx_usbd_start+0x2c>)
   1cee6:	2200      	movs	r2, #0
{
   1cee8:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   1ceea:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
   1ceec:	4a09      	ldr	r2, [pc, #36]	; (1cf14 <nrfx_usbd_start+0x30>)
   1ceee:	4b0a      	ldr	r3, [pc, #40]	; (1cf18 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   1cef0:	4c0a      	ldr	r4, [pc, #40]	; (1cf1c <nrfx_usbd_start+0x38>)
   1cef2:	2800      	cmp	r0, #0
   1cef4:	bf18      	it	ne
   1cef6:	4613      	movne	r3, r2
   1cef8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   1cefc:	2027      	movs	r0, #39	; 0x27
   1cefe:	f7ea fc25 	bl	774c <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   1cf02:	2301      	movs	r3, #1
   1cf04:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   1cf08:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   1cf0c:	bd10      	pop	{r4, pc}
   1cf0e:	bf00      	nop
   1cf10:	2000688b 	.word	0x2000688b
   1cf14:	01e01407 	.word	0x01e01407
   1cf18:	01c01407 	.word	0x01c01407
   1cf1c:	40027000 	.word	0x40027000

0001cf20 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   1cf20:	4b03      	ldr	r3, [pc, #12]	; (1cf30 <nrfx_usbd_is_enabled+0x10>)
   1cf22:	7818      	ldrb	r0, [r3, #0]
}
   1cf24:	2801      	cmp	r0, #1
   1cf26:	bf94      	ite	ls
   1cf28:	2000      	movls	r0, #0
   1cf2a:	2001      	movhi	r0, #1
   1cf2c:	4770      	bx	lr
   1cf2e:	bf00      	nop
   1cf30:	2000688d 	.word	0x2000688d

0001cf34 <nrfx_usbd_init>:
{
   1cf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   1cf36:	4b1c      	ldr	r3, [pc, #112]	; (1cfa8 <nrfx_usbd_init+0x74>)
   1cf38:	781c      	ldrb	r4, [r3, #0]
   1cf3a:	bb94      	cbnz	r4, 1cfa2 <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
   1cf3c:	4a1b      	ldr	r2, [pc, #108]	; (1cfac <nrfx_usbd_init+0x78>)
   1cf3e:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   1cf40:	2201      	movs	r2, #1
   1cf42:	701a      	strb	r2, [r3, #0]
   1cf44:	4625      	mov	r5, r4
        p_state->status = NRFX_USBD_EP_OK;
   1cf46:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   1cf48:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1cf4c:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   1cf50:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1cf52:	bf0c      	ite	eq
   1cf54:	2140      	moveq	r1, #64	; 0x40
   1cf56:	f44f 7100 	movne.w	r1, #512	; 0x200
   1cf5a:	4630      	mov	r0, r6
   1cf5c:	f006 ffce 	bl	23efc <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   1cf60:	4630      	mov	r0, r6
   1cf62:	f7ff fd3d 	bl	1c9e0 <ep_state_access>
        p_state->status = NRFX_USBD_EP_OK;
   1cf66:	3501      	adds	r5, #1
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   1cf68:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
   1cf6a:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
   1cf6c:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
   1cf6e:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   1cf70:	d1ea      	bne.n	1cf48 <nrfx_usbd_init+0x14>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1cf72:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
   1cf74:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1cf76:	4620      	mov	r0, r4
   1cf78:	f006 ffc0 	bl	23efc <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   1cf7c:	4620      	mov	r0, r4
   1cf7e:	f7ff fd2f 	bl	1c9e0 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   1cf82:	3401      	adds	r4, #1
   1cf84:	b2e4      	uxtb	r4, r4
   1cf86:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   1cf88:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   1cf8a:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   1cf8c:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   1cf8e:	d101      	bne.n	1cf94 <nrfx_usbd_init+0x60>
    return NRFX_SUCCESS;
   1cf90:	4807      	ldr	r0, [pc, #28]	; (1cfb0 <nrfx_usbd_init+0x7c>)
}
   1cf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   1cf94:	f014 0f08 	tst.w	r4, #8
   1cf98:	bf14      	ite	ne
   1cf9a:	f44f 7100 	movne.w	r1, #512	; 0x200
   1cf9e:	2140      	moveq	r1, #64	; 0x40
   1cfa0:	e7e9      	b.n	1cf76 <nrfx_usbd_init+0x42>
        return NRFX_ERROR_INVALID_STATE;
   1cfa2:	4804      	ldr	r0, [pc, #16]	; (1cfb4 <nrfx_usbd_init+0x80>)
   1cfa4:	e7f5      	b.n	1cf92 <nrfx_usbd_init+0x5e>
   1cfa6:	bf00      	nop
   1cfa8:	2000688d 	.word	0x2000688d
   1cfac:	200040ac 	.word	0x200040ac
   1cfb0:	0bad0000 	.word	0x0bad0000
   1cfb4:	0bad0005 	.word	0x0bad0005

0001cfb8 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   1cfb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cfbc:	4605      	mov	r5, r0
	__asm__ volatile(
   1cfbe:	f04f 0320 	mov.w	r3, #32
   1cfc2:	f3ef 8711 	mrs	r7, BASEPRI
   1cfc6:	f383 8811 	msr	BASEPRI, r3
   1cfca:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   1cfce:	f010 040f 	ands.w	r4, r0, #15
   1cfd2:	d103      	bne.n	1cfdc <nrfx_usbd_ep_transfer+0x24>
   1cfd4:	4b28      	ldr	r3, [pc, #160]	; (1d078 <nrfx_usbd_ep_transfer+0xc0>)
   1cfd6:	781b      	ldrb	r3, [r3, #0]
   1cfd8:	4283      	cmp	r3, r0
   1cfda:	d149      	bne.n	1d070 <nrfx_usbd_ep_transfer+0xb8>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   1cfdc:	4b27      	ldr	r3, [pc, #156]	; (1d07c <nrfx_usbd_ep_transfer+0xc4>)
   1cfde:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 1d0ac <nrfx_usbd_ep_transfer+0xf4>
   1cfe2:	681a      	ldr	r2, [r3, #0]
   1cfe4:	f8d9 6000 	ldr.w	r6, [r9]
   1cfe8:	43d2      	mvns	r2, r2
   1cfea:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
   1cfec:	4628      	mov	r0, r5
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   1cfee:	4332      	orrs	r2, r6
    const uint8_t ep_bitpos = ep2bit(ep);
   1cff0:	f006 ff4a 	bl	23e88 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   1cff4:	f04f 0801 	mov.w	r8, #1
   1cff8:	fa08 f800 	lsl.w	r8, r8, r0
   1cffc:	ea12 0f08 	tst.w	r2, r8
   1d000:	d138      	bne.n	1d074 <nrfx_usbd_ep_transfer+0xbc>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   1d002:	4628      	mov	r0, r5
   1d004:	f7ff fcec 	bl	1c9e0 <ep_state_access>
   1d008:	220c      	movs	r2, #12
   1d00a:	4354      	muls	r4, r2
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
   1d00c:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   1d00e:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
   1d010:	d52a      	bpl.n	1d068 <nrfx_usbd_ep_transfer+0xb0>
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   1d012:	4a1b      	ldr	r2, [pc, #108]	; (1d080 <nrfx_usbd_ep_transfer+0xc8>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1d014:	6808      	ldr	r0, [r1, #0]
   1d016:	4414      	add	r4, r2
   1d018:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
   1d01c:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   1d01e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1d022:	f002 0201 	and.w	r2, r2, #1
   1d026:	d11a      	bne.n	1d05e <nrfx_usbd_ep_transfer+0xa6>
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   1d028:	b9ba      	cbnz	r2, 1d05a <nrfx_usbd_ep_transfer+0xa2>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
   1d02a:	4a16      	ldr	r2, [pc, #88]	; (1d084 <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   1d02c:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
   1d02e:	c907      	ldmia	r1, {r0, r1, r2}
   1d030:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
   1d034:	2200      	movs	r2, #0
   1d036:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   1d038:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
   1d03a:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d03c:	4b12      	ldr	r3, [pc, #72]	; (1d088 <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
   1d03e:	4813      	ldr	r0, [pc, #76]	; (1d08c <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   1d040:	ea46 0608 	orr.w	r6, r6, r8
   1d044:	2280      	movs	r2, #128	; 0x80
   1d046:	f8c9 6000 	str.w	r6, [r9]
   1d04a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   1d04e:	f387 8811 	msr	BASEPRI, r7
   1d052:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   1d056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
   1d05a:	4a0d      	ldr	r2, [pc, #52]	; (1d090 <nrfx_usbd_ep_transfer+0xd8>)
   1d05c:	e7e6      	b.n	1d02c <nrfx_usbd_ep_transfer+0x74>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   1d05e:	b90a      	cbnz	r2, 1d064 <nrfx_usbd_ep_transfer+0xac>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
   1d060:	4a0c      	ldr	r2, [pc, #48]	; (1d094 <nrfx_usbd_ep_transfer+0xdc>)
   1d062:	e7e3      	b.n	1d02c <nrfx_usbd_ep_transfer+0x74>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
   1d064:	4a0c      	ldr	r2, [pc, #48]	; (1d098 <nrfx_usbd_ep_transfer+0xe0>)
   1d066:	e7e1      	b.n	1d02c <nrfx_usbd_ep_transfer+0x74>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   1d068:	4a0c      	ldr	r2, [pc, #48]	; (1d09c <nrfx_usbd_ep_transfer+0xe4>)
   1d06a:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   1d06c:	4a0c      	ldr	r2, [pc, #48]	; (1d0a0 <nrfx_usbd_ep_transfer+0xe8>)
   1d06e:	e7dd      	b.n	1d02c <nrfx_usbd_ep_transfer+0x74>
        ret = NRFX_ERROR_INVALID_ADDR;
   1d070:	480c      	ldr	r0, [pc, #48]	; (1d0a4 <nrfx_usbd_ep_transfer+0xec>)
   1d072:	e7ec      	b.n	1d04e <nrfx_usbd_ep_transfer+0x96>
        ret = NRFX_ERROR_BUSY;
   1d074:	480c      	ldr	r0, [pc, #48]	; (1d0a8 <nrfx_usbd_ep_transfer+0xf0>)
   1d076:	e7ea      	b.n	1d04e <nrfx_usbd_ep_transfer+0x96>
   1d078:	2000688e 	.word	0x2000688e
   1d07c:	20003f88 	.word	0x20003f88
   1d080:	20003f1c 	.word	0x20003f1c
   1d084:	00023e3d 	.word	0x00023e3d
   1d088:	e000e100 	.word	0xe000e100
   1d08c:	0bad0000 	.word	0x0bad0000
   1d090:	00023e5f 	.word	0x00023e5f
   1d094:	0001cac9 	.word	0x0001cac9
   1d098:	0001cb01 	.word	0x0001cb01
   1d09c:	20003eac 	.word	0x20003eac
   1d0a0:	00023e0f 	.word	0x00023e0f
   1d0a4:	0bad000a 	.word	0x0bad000a
   1d0a8:	0bad000b 	.word	0x0bad000b
   1d0ac:	20003f18 	.word	0x20003f18

0001d0b0 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   1d0b0:	f010 0f08 	tst.w	r0, #8
   1d0b4:	4b07      	ldr	r3, [pc, #28]	; (1d0d4 <nrfx_usbd_epout_size_get+0x24>)
   1d0b6:	d006      	beq.n	1d0c6 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   1d0b8:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
   1d0bc:	f410 3f80 	tst.w	r0, #65536	; 0x10000
            size_isoout = 0;
   1d0c0:	bf18      	it	ne
   1d0c2:	2000      	movne	r0, #0
   1d0c4:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   1d0c6:	f000 000f 	and.w	r0, r0, #15
   1d0ca:	f500 7094 	add.w	r0, r0, #296	; 0x128
   1d0ce:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   1d0d2:	4770      	bx	lr
   1d0d4:	40027000 	.word	0x40027000

0001d0d8 <usbd_dmareq_process>:
{
   1d0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   1d0dc:	4b59      	ldr	r3, [pc, #356]	; (1d244 <usbd_dmareq_process+0x16c>)
{
   1d0de:	b087      	sub	sp, #28
    if (!m_dma_pending)
   1d0e0:	781a      	ldrb	r2, [r3, #0]
   1d0e2:	9301      	str	r3, [sp, #4]
   1d0e4:	2a00      	cmp	r2, #0
   1d0e6:	d16a      	bne.n	1d1be <usbd_dmareq_process+0xe6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   1d0e8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 1d260 <usbd_dmareq_process+0x188>
   1d0ec:	f8df b174 	ldr.w	fp, [pc, #372]	; 1d264 <usbd_dmareq_process+0x18c>
   1d0f0:	46ca      	mov	sl, r9
   1d0f2:	f8db 1000 	ldr.w	r1, [fp]
   1d0f6:	f8d9 6000 	ldr.w	r6, [r9]
   1d0fa:	4031      	ands	r1, r6
   1d0fc:	d05f      	beq.n	1d1be <usbd_dmareq_process+0xe6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   1d0fe:	f011 2601 	ands.w	r6, r1, #16777472	; 0x1000100
   1d102:	d05f      	beq.n	1d1c4 <usbd_dmareq_process+0xec>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   1d104:	fa96 f1a6 	rbit	r1, r6
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
   1d108:	2900      	cmp	r1, #0
   1d10a:	d05e      	beq.n	1d1ca <usbd_dmareq_process+0xf2>
  {
    return 32U;
  }
  return __builtin_clz(value);
   1d10c:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1d110:	290f      	cmp	r1, #15
   1d112:	d95c      	bls.n	1d1ce <usbd_dmareq_process+0xf6>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
   1d114:	f1a1 0410 	sub.w	r4, r1, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1d118:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
   1d11a:	4620      	mov	r0, r4
   1d11c:	f7ff fc60 	bl	1c9e0 <ep_state_access>
   1d120:	2601      	movs	r6, #1
            if (NRF_USBD_EPIN_CHECK(ep))
   1d122:	fa4f f884 	sxtb.w	r8, r4
   1d126:	408e      	lsls	r6, r1
   1d128:	43f3      	mvns	r3, r6
   1d12a:	f1b8 0f00 	cmp.w	r8, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
   1d12e:	4605      	mov	r5, r0
            if (NRF_USBD_EPIN_CHECK(ep))
   1d130:	9300      	str	r3, [sp, #0]
   1d132:	da4f      	bge.n	1d1d4 <usbd_dmareq_process+0xfc>
                continue_transfer = p_state->handler.feeder(
   1d134:	6803      	ldr	r3, [r0, #0]
   1d136:	8982      	ldrh	r2, [r0, #12]
   1d138:	6841      	ldr	r1, [r0, #4]
   1d13a:	a804      	add	r0, sp, #16
   1d13c:	4798      	blx	r3
                if (!continue_transfer)
   1d13e:	b900      	cbnz	r0, 1d142 <usbd_dmareq_process+0x6a>
                    p_state->handler.consumer = NULL;
   1d140:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   1d142:	f7ff fc25 	bl	1c990 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   1d146:	b110      	cbz	r0, 1d14e <usbd_dmareq_process+0x76>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   1d148:	4b3f      	ldr	r3, [pc, #252]	; (1d248 <usbd_dmareq_process+0x170>)
   1d14a:	2282      	movs	r2, #130	; 0x82
   1d14c:	601a      	str	r2, [r3, #0]
    m_dma_pending = true;
   1d14e:	9a01      	ldr	r2, [sp, #4]
            m_ep_ready &= ~(1U << pos);
   1d150:	9e00      	ldr	r6, [sp, #0]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   1d152:	9804      	ldr	r0, [sp, #16]
    m_dma_pending = true;
   1d154:	2301      	movs	r3, #1
   1d156:	7013      	strb	r3, [r2, #0]
            m_ep_ready &= ~(1U << pos);
   1d158:	f8da 3000 	ldr.w	r3, [sl]
            p_state->transfer_cnt += transfer.size;
   1d15c:	9a05      	ldr	r2, [sp, #20]
            m_ep_ready &= ~(1U << pos);
   1d15e:	401e      	ands	r6, r3
            p_state->transfer_cnt += transfer.size;
   1d160:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
   1d162:	f8ca 6000 	str.w	r6, [sl]
            p_state->transfer_cnt += transfer.size;
   1d166:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
   1d168:	f1b8 0f00 	cmp.w	r8, #0
   1d16c:	60ab      	str	r3, [r5, #8]
   1d16e:	f004 0108 	and.w	r1, r4, #8
   1d172:	4b36      	ldr	r3, [pc, #216]	; (1d24c <usbd_dmareq_process+0x174>)
   1d174:	f004 040f 	and.w	r4, r4, #15
   1d178:	da55      	bge.n	1d226 <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
   1d17a:	2900      	cmp	r1, #0
   1d17c:	d04b      	beq.n	1d216 <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
   1d17e:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   1d182:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   1d186:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1d188:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1d18c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d190:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1d194:	2201      	movs	r2, #1
   1d196:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1d198:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   1d19a:	4a2d      	ldr	r2, [pc, #180]	; (1d250 <usbd_dmareq_process+0x178>)
   1d19c:	4b2d      	ldr	r3, [pc, #180]	; (1d254 <usbd_dmareq_process+0x17c>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1d19e:	492e      	ldr	r1, [pc, #184]	; (1d258 <usbd_dmareq_process+0x180>)
   1d1a0:	ea13 0828 	ands.w	r8, r3, r8, asr #32
   1d1a4:	bf38      	it	cc
   1d1a6:	4690      	movcc	r8, r2
   1d1a8:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1d1ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d1b0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1d1b4:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   1d1b6:	b912      	cbnz	r2, 1d1be <usbd_dmareq_process+0xe6>
   1d1b8:	680a      	ldr	r2, [r1, #0]
   1d1ba:	2a00      	cmp	r2, #0
   1d1bc:	d0fa      	beq.n	1d1b4 <usbd_dmareq_process+0xdc>
}
   1d1be:	b007      	add	sp, #28
   1d1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   1d1c4:	fa91 f1a1 	rbit	r1, r1
   1d1c8:	e79e      	b.n	1d108 <usbd_dmareq_process+0x30>
    return 32U;
   1d1ca:	2120      	movs	r1, #32
   1d1cc:	e7a2      	b.n	1d114 <usbd_dmareq_process+0x3c>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1d1ce:	f041 0480 	orr.w	r4, r1, #128	; 0x80
   1d1d2:	e7a2      	b.n	1d11a <usbd_dmareq_process+0x42>
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   1d1d4:	4620      	mov	r0, r4
   1d1d6:	f7ff ff6b 	bl	1d0b0 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   1d1da:	89aa      	ldrh	r2, [r5, #12]
   1d1dc:	6869      	ldr	r1, [r5, #4]
   1d1de:	682e      	ldr	r6, [r5, #0]
   1d1e0:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   1d1e2:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
   1d1e4:	a804      	add	r0, sp, #16
   1d1e6:	47b0      	blx	r6
                if (transfer.p_data.rx == NULL)
   1d1e8:	9a04      	ldr	r2, [sp, #16]
   1d1ea:	2a00      	cmp	r2, #0
   1d1ec:	d0a7      	beq.n	1d13e <usbd_dmareq_process+0x66>
                else if (transfer.size < rx_size)
   1d1ee:	9a05      	ldr	r2, [sp, #20]
   1d1f0:	4297      	cmp	r7, r2
   1d1f2:	d9a4      	bls.n	1d13e <usbd_dmareq_process+0x66>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   1d1f4:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   1d1f6:	9800      	ldr	r0, [sp, #0]
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   1d1f8:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   1d1fa:	f7ff fd0b 	bl	1cc14 <atomic_and.constprop.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   1d1fe:	2306      	movs	r3, #6
   1d200:	f88d 300c 	strb.w	r3, [sp, #12]
                    m_event_handler(&evt);
   1d204:	4b15      	ldr	r3, [pc, #84]	; (1d25c <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   1d206:	f88d 400e 	strb.w	r4, [sp, #14]
                    m_event_handler(&evt);
   1d20a:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   1d20c:	f88d 700f 	strb.w	r7, [sp, #15]
                    m_event_handler(&evt);
   1d210:	a803      	add	r0, sp, #12
   1d212:	4798      	blx	r3
                    continue;
   1d214:	e76d      	b.n	1d0f2 <usbd_dmareq_process+0x1a>
            p_reg->EPIN[epnr].PTR    = ptr;
   1d216:	2114      	movs	r1, #20
   1d218:	fb01 3304 	mla	r3, r1, r4, r3
   1d21c:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   1d220:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
   1d224:	e7af      	b.n	1d186 <usbd_dmareq_process+0xae>
        if (NRF_USBD_EPISO_CHECK(ep))
   1d226:	b129      	cbz	r1, 1d234 <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
   1d228:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   1d22c:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
   1d230:	2328      	movs	r3, #40	; 0x28
   1d232:	e7a9      	b.n	1d188 <usbd_dmareq_process+0xb0>
            p_reg->EPOUT[epnr].PTR    = ptr;
   1d234:	2114      	movs	r1, #20
   1d236:	fb01 3304 	mla	r3, r1, r4, r3
   1d23a:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   1d23e:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   1d242:	e7f5      	b.n	1d230 <usbd_dmareq_process+0x158>
   1d244:	2000688c 	.word	0x2000688c
   1d248:	40027c1c 	.word	0x40027c1c
   1d24c:	40027000 	.word	0x40027000
   1d250:	0002654a 	.word	0x0002654a
   1d254:	00026538 	.word	0x00026538
   1d258:	40027100 	.word	0x40027100
   1d25c:	200040ac 	.word	0x200040ac
   1d260:	20003f88 	.word	0x20003f88
   1d264:	20003f18 	.word	0x20003f18

0001d268 <ev_epdata_handler>:
{
   1d268:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   1d26a:	4b11      	ldr	r3, [pc, #68]	; (1d2b0 <ev_epdata_handler+0x48>)
   1d26c:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   1d270:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   1d274:	2501      	movs	r5, #1
    while (dataepstatus)
   1d276:	b91c      	cbnz	r4, 1d280 <ev_epdata_handler+0x18>
}
   1d278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   1d27c:	f7ff bf2c 	b.w	1d0d8 <usbd_dmareq_process>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   1d280:	fa94 f1a4 	rbit	r1, r4
  if (value == 0U)
   1d284:	b171      	cbz	r1, 1d2a4 <ev_epdata_handler+0x3c>
  return __builtin_clz(value);
   1d286:	fab1 f381 	clz	r3, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1d28a:	2b0f      	cmp	r3, #15
   1d28c:	4619      	mov	r1, r3
   1d28e:	dd0b      	ble.n	1d2a8 <ev_epdata_handler+0x40>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
   1d290:	f1a1 0010 	sub.w	r0, r1, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1d294:	b2c0      	uxtb	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   1d296:	fa05 f301 	lsl.w	r3, r5, r1
   1d29a:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   1d29e:	f7ff fce1 	bl	1cc64 <usbd_ep_data_handler>
   1d2a2:	e7e8      	b.n	1d276 <ev_epdata_handler+0xe>
    return 32U;
   1d2a4:	2120      	movs	r1, #32
   1d2a6:	e7f3      	b.n	1d290 <ev_epdata_handler+0x28>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1d2a8:	f043 0080 	orr.w	r0, r3, #128	; 0x80
   1d2ac:	e7f3      	b.n	1d296 <ev_epdata_handler+0x2e>
   1d2ae:	bf00      	nop
   1d2b0:	40027000 	.word	0x40027000

0001d2b4 <nrf_usbd_epout_dma_handler>:
{
   1d2b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d2b6:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   1d2b8:	f7ff fba0 	bl	1c9fc <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   1d2bc:	4620      	mov	r0, r4
   1d2be:	f7ff fb8f 	bl	1c9e0 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1d2c2:	7b83      	ldrb	r3, [r0, #14]
   1d2c4:	2b03      	cmp	r3, #3
   1d2c6:	d10c      	bne.n	1d2e2 <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1d2c8:	4620      	mov	r0, r4
   1d2ca:	f006 fddd 	bl	23e88 <ep2bit>
   1d2ce:	2301      	movs	r3, #1
   1d2d0:	fa03 f000 	lsl.w	r0, r3, r0
   1d2d4:	43c0      	mvns	r0, r0
   1d2d6:	f7ff fc9d 	bl	1cc14 <atomic_and.constprop.0>
    usbd_dmareq_process();
   1d2da:	f7ff fefd 	bl	1d0d8 <usbd_dmareq_process>
}
   1d2de:	b003      	add	sp, #12
   1d2e0:	bd30      	pop	{r4, r5, pc}
    else if (p_state->handler.consumer == NULL)
   1d2e2:	6805      	ldr	r5, [r0, #0]
   1d2e4:	2d00      	cmp	r5, #0
   1d2e6:	d1f8      	bne.n	1d2da <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1d2e8:	4620      	mov	r0, r4
   1d2ea:	f006 fdcd 	bl	23e88 <ep2bit>
   1d2ee:	2301      	movs	r3, #1
   1d2f0:	fa03 f000 	lsl.w	r0, r3, r0
   1d2f4:	43c0      	mvns	r0, r0
   1d2f6:	f7ff fc8d 	bl	1cc14 <atomic_and.constprop.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1d2fa:	2306      	movs	r3, #6
   1d2fc:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   1d300:	4b04      	ldr	r3, [pc, #16]	; (1d314 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1d302:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   1d306:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1d308:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   1d30c:	a801      	add	r0, sp, #4
   1d30e:	4798      	blx	r3
   1d310:	e7e3      	b.n	1d2da <nrf_usbd_epout_dma_handler+0x26>
   1d312:	bf00      	nop
   1d314:	200040ac 	.word	0x200040ac

0001d318 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   1d318:	4b02      	ldr	r3, [pc, #8]	; (1d324 <nrfx_usbd_ep_stall+0xc>)
   1d31a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   1d31e:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   1d322:	4770      	bx	lr
   1d324:	40027000 	.word	0x40027000

0001d328 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   1d328:	0702      	lsls	r2, r0, #28
   1d32a:	d413      	bmi.n	1d354 <nrfx_usbd_ep_stall_check+0x2c>
    if (NRF_USBD_EPIN_CHECK(ep))
   1d32c:	f000 030f 	and.w	r3, r0, #15
   1d330:	f010 0f80 	tst.w	r0, #128	; 0x80
   1d334:	4a08      	ldr	r2, [pc, #32]	; (1d358 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   1d336:	bf0b      	itete	eq
   1d338:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   1d33c:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   1d340:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   1d344:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   1d348:	bf08      	it	eq
   1d34a:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   1d34c:	1e43      	subs	r3, r0, #1
   1d34e:	4258      	negs	r0, r3
   1d350:	4158      	adcs	r0, r3
   1d352:	4770      	bx	lr
        return false;
   1d354:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   1d356:	4770      	bx	lr
   1d358:	40027000 	.word	0x40027000

0001d35c <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   1d35c:	4b04      	ldr	r3, [pc, #16]	; (1d370 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   1d35e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   1d362:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   1d366:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   1d36a:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   1d36e:	4770      	bx	lr
   1d370:	40027000 	.word	0x40027000

0001d374 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   1d374:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   1d376:	2208      	movs	r2, #8
   1d378:	2100      	movs	r1, #0
{
   1d37a:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   1d37c:	f004 f9be 	bl	216fc <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   1d380:	4b0e      	ldr	r3, [pc, #56]	; (1d3bc <nrfx_usbd_setup_get+0x48>)
   1d382:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   1d386:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   1d388:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   1d38c:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   1d38e:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   1d392:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   1d396:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   1d39a:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   1d39c:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   1d3a0:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   1d3a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   1d3a8:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   1d3aa:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   1d3ae:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   1d3b2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   1d3b6:	80e3      	strh	r3, [r4, #6]
}
   1d3b8:	bd10      	pop	{r4, pc}
   1d3ba:	bf00      	nop
   1d3bc:	40027000 	.word	0x40027000

0001d3c0 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1d3c0:	4b02      	ldr	r3, [pc, #8]	; (1d3cc <nrfx_usbd_setup_data_clear+0xc>)
   1d3c2:	2201      	movs	r2, #1
   1d3c4:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1d3c6:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   1d3c8:	4770      	bx	lr
   1d3ca:	bf00      	nop
   1d3cc:	4002704c 	.word	0x4002704c

0001d3d0 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   1d3d0:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   1d3d2:	f7ff fb13 	bl	1c9fc <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1d3d6:	4b0e      	ldr	r3, [pc, #56]	; (1d410 <ev_dma_epout0_handler+0x40>)
   1d3d8:	7b9a      	ldrb	r2, [r3, #14]
   1d3da:	2a03      	cmp	r2, #3
   1d3dc:	d105      	bne.n	1d3ea <ev_dma_epout0_handler+0x1a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1d3de:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   1d3e2:	f7ff fc17 	bl	1cc14 <atomic_and.constprop.0>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   1d3e6:	b002      	add	sp, #8
   1d3e8:	bd10      	pop	{r4, pc}
    else if (p_state->handler.consumer == NULL)
   1d3ea:	681c      	ldr	r4, [r3, #0]
   1d3ec:	b96c      	cbnz	r4, 1d40a <ev_dma_epout0_handler+0x3a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1d3ee:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   1d3f2:	f7ff fc0f 	bl	1cc14 <atomic_and.constprop.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1d3f6:	2306      	movs	r3, #6
   1d3f8:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   1d3fc:	4b05      	ldr	r3, [pc, #20]	; (1d414 <ev_dma_epout0_handler+0x44>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1d3fe:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   1d402:	681b      	ldr	r3, [r3, #0]
   1d404:	a801      	add	r0, sp, #4
   1d406:	4798      	blx	r3
   1d408:	e7ed      	b.n	1d3e6 <ev_dma_epout0_handler+0x16>
        nrfx_usbd_setup_data_clear();
   1d40a:	f7ff ffd9 	bl	1d3c0 <nrfx_usbd_setup_data_clear>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   1d40e:	e7ea      	b.n	1d3e6 <ev_dma_epout0_handler+0x16>
   1d410:	20003f8c 	.word	0x20003f8c
   1d414:	200040ac 	.word	0x200040ac

0001d418 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1d418:	4b02      	ldr	r3, [pc, #8]	; (1d424 <nrfx_usbd_setup_clear+0xc>)
   1d41a:	2201      	movs	r2, #1
   1d41c:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1d41e:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   1d420:	4770      	bx	lr
   1d422:	bf00      	nop
   1d424:	40027050 	.word	0x40027050

0001d428 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1d428:	4b02      	ldr	r3, [pc, #8]	; (1d434 <nrfx_usbd_setup_stall+0xc>)
   1d42a:	2201      	movs	r2, #1
   1d42c:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1d42e:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   1d430:	4770      	bx	lr
   1d432:	bf00      	nop
   1d434:	40027054 	.word	0x40027054

0001d438 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   1d438:	4b01      	ldr	r3, [pc, #4]	; (1d440 <nrfx_usbd_last_setup_dir_get+0x8>)
   1d43a:	7818      	ldrb	r0, [r3, #0]
   1d43c:	4770      	bx	lr
   1d43e:	bf00      	nop
   1d440:	2000688e 	.word	0x2000688e

0001d444 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   1d444:	b510      	push	{r4, lr}
   1d446:	4602      	mov	r2, r0
	__asm__ volatile(
   1d448:	f04f 0320 	mov.w	r3, #32
   1d44c:	f3ef 8411 	mrs	r4, BASEPRI
   1d450:	f383 8811 	msr	BASEPRI, r3
   1d454:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   1d458:	f006 fd16 	bl	23e88 <ep2bit>
   1d45c:	490d      	ldr	r1, [pc, #52]	; (1d494 <nrfx_usbd_transfer_out_drop+0x50>)
   1d45e:	2301      	movs	r3, #1
   1d460:	fa03 f000 	lsl.w	r0, r3, r0
   1d464:	680b      	ldr	r3, [r1, #0]
   1d466:	ea23 0300 	bic.w	r3, r3, r0
   1d46a:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   1d46c:	f012 0108 	ands.w	r1, r2, #8
   1d470:	d10a      	bne.n	1d488 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   1d472:	f002 030f 	and.w	r3, r2, #15
   1d476:	009b      	lsls	r3, r3, #2
   1d478:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d47c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   1d480:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   1d484:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   1d488:	f384 8811 	msr	BASEPRI, r4
   1d48c:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   1d490:	bd10      	pop	{r4, pc}
   1d492:	bf00      	nop
   1d494:	20003f88 	.word	0x20003f88

0001d498 <usbd_ep_abort>:
{
   1d498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d49a:	4601      	mov	r1, r0
	__asm__ volatile(
   1d49c:	f04f 0320 	mov.w	r3, #32
   1d4a0:	f3ef 8411 	mrs	r4, BASEPRI
   1d4a4:	f383 8811 	msr	BASEPRI, r3
   1d4a8:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   1d4ac:	f7ff fa98 	bl	1c9e0 <ep_state_access>
   1d4b0:	4605      	mov	r5, r0
    if (NRF_USBD_EPOUT_CHECK(ep))
   1d4b2:	4608      	mov	r0, r1
   1d4b4:	f006 fce8 	bl	23e88 <ep2bit>
   1d4b8:	f011 0f80 	tst.w	r1, #128	; 0x80
   1d4bc:	4e2f      	ldr	r6, [pc, #188]	; (1d57c <usbd_ep_abort+0xe4>)
   1d4be:	d11d      	bne.n	1d4fc <usbd_ep_abort+0x64>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   1d4c0:	6832      	ldr	r2, [r6, #0]
   1d4c2:	43d3      	mvns	r3, r2
   1d4c4:	40c3      	lsrs	r3, r0
   1d4c6:	f013 0301 	ands.w	r3, r3, #1
   1d4ca:	d00a      	beq.n	1d4e2 <usbd_ep_abort+0x4a>
            nrfx_usbd_transfer_out_drop(ep);
   1d4cc:	4608      	mov	r0, r1
   1d4ce:	f7ff ffb9 	bl	1d444 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   1d4d2:	2303      	movs	r3, #3
   1d4d4:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
   1d4d6:	f384 8811 	msr	BASEPRI, r4
   1d4da:	f3bf 8f6f 	isb	sy
}
   1d4de:	b003      	add	sp, #12
   1d4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
   1d4e2:	602b      	str	r3, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1d4e4:	2301      	movs	r3, #1
   1d4e6:	fa03 f000 	lsl.w	r0, r3, r0
   1d4ea:	ea22 0200 	bic.w	r2, r2, r0
   1d4ee:	6032      	str	r2, [r6, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   1d4f0:	4a23      	ldr	r2, [pc, #140]	; (1d580 <usbd_ep_abort+0xe8>)
   1d4f2:	6813      	ldr	r3, [r2, #0]
   1d4f4:	ea23 0000 	bic.w	r0, r3, r0
   1d4f8:	6010      	str	r0, [r2, #0]
   1d4fa:	e7ea      	b.n	1d4d2 <usbd_ep_abort+0x3a>
        if(!NRF_USBD_EPISO_CHECK(ep))
   1d4fc:	070b      	lsls	r3, r1, #28
   1d4fe:	d411      	bmi.n	1d524 <usbd_ep_abort+0x8c>
            if(ep != NRFX_USBD_EPIN0)
   1d500:	2980      	cmp	r1, #128	; 0x80
   1d502:	4f20      	ldr	r7, [pc, #128]	; (1d584 <usbd_ep_abort+0xec>)
   1d504:	4b20      	ldr	r3, [pc, #128]	; (1d588 <usbd_ep_abort+0xf0>)
   1d506:	d02f      	beq.n	1d568 <usbd_ep_abort+0xd0>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   1d508:	f001 020f 	and.w	r2, r1, #15
   1d50c:	f202 32da 	addw	r2, r2, #986	; 0x3da
   1d510:	0052      	lsls	r2, r2, #1
   1d512:	603a      	str	r2, [r7, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1d514:	681a      	ldr	r2, [r3, #0]
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1d516:	681f      	ldr	r7, [r3, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1d518:	b2d2      	uxtb	r2, r2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1d51a:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1d51e:	433a      	orrs	r2, r7
   1d520:	601a      	str	r2, [r3, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   1d522:	681b      	ldr	r3, [r3, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   1d524:	f8df c058 	ldr.w	ip, [pc, #88]	; 1d580 <usbd_ep_abort+0xe8>
   1d528:	6837      	ldr	r7, [r6, #0]
   1d52a:	f8dc 2000 	ldr.w	r2, [ip]
   1d52e:	2301      	movs	r3, #1
   1d530:	fa03 f000 	lsl.w	r0, r3, r0
   1d534:	ea67 0302 	orn	r3, r7, r2
   1d538:	4203      	tst	r3, r0
   1d53a:	d0cc      	beq.n	1d4d6 <usbd_ep_abort+0x3e>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1d53c:	ea27 0700 	bic.w	r7, r7, r0
            p_state->handler.feeder = NULL;
   1d540:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1d542:	6037      	str	r7, [r6, #0]
            p_state->handler.feeder = NULL;
   1d544:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   1d546:	2303      	movs	r3, #3
   1d548:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   1d54a:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   1d54e:	4b0f      	ldr	r3, [pc, #60]	; (1d58c <usbd_ep_abort+0xf4>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   1d550:	f88d 1006 	strb.w	r1, [sp, #6]
            m_ep_ready       |=   1U << ep2bit(ep) ;
   1d554:	4310      	orrs	r0, r2
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   1d556:	2206      	movs	r2, #6
            m_ep_ready       |=   1U << ep2bit(ep) ;
   1d558:	f8cc 0000 	str.w	r0, [ip]
            m_event_handler(&evt);
   1d55c:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   1d55e:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   1d562:	a801      	add	r0, sp, #4
   1d564:	4798      	blx	r3
   1d566:	e7b6      	b.n	1d4d6 <usbd_ep_abort+0x3e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   1d568:	f240 72b4 	movw	r2, #1972	; 0x7b4
   1d56c:	603a      	str	r2, [r7, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1d56e:	681a      	ldr	r2, [r3, #0]
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1d570:	681f      	ldr	r7, [r3, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   1d572:	b2d2      	uxtb	r2, r2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   1d574:	f042 0204 	orr.w	r2, r2, #4
   1d578:	e7d1      	b.n	1d51e <usbd_ep_abort+0x86>
   1d57a:	bf00      	nop
   1d57c:	20003f18 	.word	0x20003f18
   1d580:	20003f88 	.word	0x20003f88
   1d584:	40027800 	.word	0x40027800
   1d588:	40027804 	.word	0x40027804
   1d58c:	200040ac 	.word	0x200040ac

0001d590 <ev_setup_handler>:
{
   1d590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   1d592:	4b17      	ldr	r3, [pc, #92]	; (1d5f0 <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   1d594:	4c17      	ldr	r4, [pc, #92]	; (1d5f4 <ev_setup_handler+0x64>)
   1d596:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
   1d59a:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   1d59c:	4d16      	ldr	r5, [pc, #88]	; (1d5f8 <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   1d59e:	43da      	mvns	r2, r3
   1d5a0:	4b16      	ldr	r3, [pc, #88]	; (1d5fc <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
   1d5a2:	782f      	ldrb	r7, [r5, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   1d5a4:	681b      	ldr	r3, [r3, #0]
   1d5a6:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   1d5a8:	4638      	mov	r0, r7
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   1d5aa:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   1d5ac:	f006 fc6c 	bl	23e88 <ep2bit>
   1d5b0:	2301      	movs	r3, #1
   1d5b2:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   1d5b4:	4213      	tst	r3, r2
   1d5b6:	d002      	beq.n	1d5be <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   1d5b8:	4638      	mov	r0, r7
   1d5ba:	f7ff ff6d 	bl	1d498 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   1d5be:	f006 0680 	and.w	r6, r6, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
   1d5c2:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   1d5c6:	702e      	strb	r6, [r5, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   1d5c8:	f7ff fb24 	bl	1cc14 <atomic_and.constprop.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   1d5cc:	6823      	ldr	r3, [r4, #0]
   1d5ce:	f043 0301 	orr.w	r3, r3, #1
   1d5d2:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   1d5d4:	2300      	movs	r3, #0
   1d5d6:	f8ad 3005 	strh.w	r3, [sp, #5]
   1d5da:	f88d 3007 	strb.w	r3, [sp, #7]
   1d5de:	2305      	movs	r3, #5
   1d5e0:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
   1d5e4:	4b06      	ldr	r3, [pc, #24]	; (1d600 <ev_setup_handler+0x70>)
   1d5e6:	a801      	add	r0, sp, #4
   1d5e8:	681b      	ldr	r3, [r3, #0]
   1d5ea:	4798      	blx	r3
}
   1d5ec:	b003      	add	sp, #12
   1d5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d5f0:	40027000 	.word	0x40027000
   1d5f4:	20003f88 	.word	0x20003f88
   1d5f8:	2000688e 	.word	0x2000688e
   1d5fc:	20003f18 	.word	0x20003f18
   1d600:	200040ac 	.word	0x200040ac

0001d604 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
   1d604:	4b1b      	ldr	r3, [pc, #108]	; (1d674 <nrfx_usbd_irq_handler+0x70>)
   1d606:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   1d60a:	2300      	movs	r3, #0
{
   1d60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d610:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   1d612:	461d      	mov	r5, r3
    while (to_process)
   1d614:	b970      	cbnz	r0, 1d634 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   1d616:	4f18      	ldr	r7, [pc, #96]	; (1d678 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   1d618:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   1d61c:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   1d620:	f04f 0801 	mov.w	r8, #1
    while (active)
   1d624:	b9bc      	cbnz	r4, 1d656 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   1d626:	f7ff fd57 	bl	1d0d8 <usbd_dmareq_process>
    if (setup_active)
   1d62a:	b306      	cbz	r6, 1d66e <nrfx_usbd_irq_handler+0x6a>
}
   1d62c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   1d630:	f7ff bfae 	b.w	1d590 <ev_setup_handler>
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1d634:	4911      	ldr	r1, [pc, #68]	; (1d67c <nrfx_usbd_irq_handler+0x78>)
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   1d636:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
   1d63a:	fab2 f282 	clz	r2, r2
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   1d63e:	0096      	lsls	r6, r2, #2
   1d640:	4431      	add	r1, r6
   1d642:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1d646:	680e      	ldr	r6, [r1, #0]
    if (ret)
   1d648:	b116      	cbz	r6, 1d650 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   1d64a:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   1d64c:	6809      	ldr	r1, [r1, #0]
            active |= 1UL << event_nr;
   1d64e:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   1d650:	ea20 0002 	bic.w	r0, r0, r2
   1d654:	e7de      	b.n	1d614 <nrfx_usbd_irq_handler+0x10>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   1d656:	fa94 f5a4 	rbit	r5, r4
  return __builtin_clz(value);
   1d65a:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   1d65e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   1d662:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   1d666:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   1d668:	ea24 0405 	bic.w	r4, r4, r5
   1d66c:	e7da      	b.n	1d624 <nrfx_usbd_irq_handler+0x20>
}
   1d66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d672:	bf00      	nop
   1d674:	40027000 	.word	0x40027000
   1d678:	000264a8 	.word	0x000264a8
   1d67c:	40027100 	.word	0x40027100

0001d680 <usbd_ep_abort_all>:
{
   1d680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   1d682:	4e13      	ldr	r6, [pc, #76]	; (1d6d0 <usbd_ep_abort_all+0x50>)
   1d684:	4a13      	ldr	r2, [pc, #76]	; (1d6d4 <usbd_ep_abort_all+0x54>)
   1d686:	6834      	ldr	r4, [r6, #0]
   1d688:	6812      	ldr	r2, [r2, #0]
   1d68a:	0c24      	lsrs	r4, r4, #16
   1d68c:	0424      	lsls	r4, r4, #16
   1d68e:	4314      	orrs	r4, r2
        ep_waiting &= ~(1U << bitpos);
   1d690:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   1d692:	b91c      	cbnz	r4, 1d69c <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   1d694:	f240 13ff 	movw	r3, #511	; 0x1ff
   1d698:	6033      	str	r3, [r6, #0]
}
   1d69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   1d69c:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
   1d6a0:	b185      	cbz	r5, 1d6c4 <usbd_ep_abort_all+0x44>
  return __builtin_clz(value);
   1d6a2:	fab5 f385 	clz	r3, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1d6a6:	2b0f      	cmp	r3, #15
   1d6a8:	461d      	mov	r5, r3
   1d6aa:	dd0d      	ble.n	1d6c8 <usbd_ep_abort_all+0x48>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
   1d6ac:	f1a5 0010 	sub.w	r0, r5, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1d6b0:	b2c0      	uxtb	r0, r0
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   1d6b2:	0703      	lsls	r3, r0, #28
   1d6b4:	d401      	bmi.n	1d6ba <usbd_ep_abort_all+0x3a>
            usbd_ep_abort(bit2ep(bitpos));
   1d6b6:	f7ff feef 	bl	1d498 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   1d6ba:	fa07 f505 	lsl.w	r5, r7, r5
   1d6be:	ea24 0405 	bic.w	r4, r4, r5
   1d6c2:	e7e6      	b.n	1d692 <usbd_ep_abort_all+0x12>
    return 32U;
   1d6c4:	2520      	movs	r5, #32
   1d6c6:	e7f1      	b.n	1d6ac <usbd_ep_abort_all+0x2c>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   1d6c8:	f043 0080 	orr.w	r0, r3, #128	; 0x80
   1d6cc:	e7f1      	b.n	1d6b2 <usbd_ep_abort_all+0x32>
   1d6ce:	bf00      	nop
   1d6d0:	20003f88 	.word	0x20003f88
   1d6d4:	20003f18 	.word	0x20003f18

0001d6d8 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d6d8:	4b0c      	ldr	r3, [pc, #48]	; (1d70c <nrfx_usbd_stop+0x34>)
   1d6da:	2280      	movs	r2, #128	; 0x80
{
   1d6dc:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   1d6de:	2027      	movs	r0, #39	; 0x27
   1d6e0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   1d6e4:	f7ea f856 	bl	7794 <arch_irq_is_enabled>
   1d6e8:	b170      	cbz	r0, 1d708 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   1d6ea:	4c09      	ldr	r4, [pc, #36]	; (1d710 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
   1d6ec:	f7ff ffc8 	bl	1d680 <usbd_ep_abort_all>
   1d6f0:	2300      	movs	r3, #0
   1d6f2:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   1d6f6:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
   1d6f8:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   1d6fc:	f7ea f836 	bl	776c <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1d700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d704:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   1d708:	bd10      	pop	{r4, pc}
   1d70a:	bf00      	nop
   1d70c:	e000e100 	.word	0xe000e100
   1d710:	40027000 	.word	0x40027000

0001d714 <nrfx_usbd_disable>:
{
   1d714:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   1d716:	f7ff ffdf 	bl	1d6d8 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   1d71a:	4b08      	ldr	r3, [pc, #32]	; (1d73c <nrfx_usbd_disable+0x28>)
   1d71c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   1d720:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   1d724:	2200      	movs	r2, #0
   1d726:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   1d72a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   1d72e:	f7ff f965 	bl	1c9fc <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   1d732:	4b03      	ldr	r3, [pc, #12]	; (1d740 <nrfx_usbd_disable+0x2c>)
   1d734:	2201      	movs	r2, #1
   1d736:	701a      	strb	r2, [r3, #0]
}
   1d738:	bd08      	pop	{r3, pc}
   1d73a:	bf00      	nop
   1d73c:	40027000 	.word	0x40027000
   1d740:	2000688d 	.word	0x2000688d

0001d744 <nrfx_usbd_suspend>:
{
   1d744:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1d746:	f04f 0320 	mov.w	r3, #32
   1d74a:	f3ef 8511 	mrs	r5, BASEPRI
   1d74e:	f383 8811 	msr	BASEPRI, r3
   1d752:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   1d756:	4b11      	ldr	r3, [pc, #68]	; (1d79c <nrfx_usbd_suspend+0x58>)
   1d758:	781b      	ldrb	r3, [r3, #0]
   1d75a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1d75e:	b933      	cbnz	r3, 1d76e <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
   1d760:	2400      	movs	r4, #0
	__asm__ volatile(
   1d762:	f385 8811 	msr	BASEPRI, r5
   1d766:	f3bf 8f6f 	isb	sy
}
   1d76a:	4620      	mov	r0, r4
   1d76c:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
   1d76e:	f7ff ff87 	bl	1d680 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   1d772:	4b0b      	ldr	r3, [pc, #44]	; (1d7a0 <nrfx_usbd_suspend+0x5c>)
   1d774:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   1d778:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   1d77c:	d1f0      	bne.n	1d760 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   1d77e:	2101      	movs	r1, #1
   1d780:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   1d784:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   1d788:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   1d78c:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   1d78e:	bf42      	ittt	mi
   1d790:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   1d794:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   1d798:	4614      	movmi	r4, r2
}
   1d79a:	e7e2      	b.n	1d762 <nrfx_usbd_suspend+0x1e>
   1d79c:	2000688b 	.word	0x2000688b
   1d7a0:	40027000 	.word	0x40027000

0001d7a4 <nrfx_usbd_ep_disable>:
{
   1d7a4:	b510      	push	{r4, lr}
   1d7a6:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   1d7a8:	f7ff fe76 	bl	1d498 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   1d7ac:	4a10      	ldr	r2, [pc, #64]	; (1d7f0 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   1d7ae:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   1d7b2:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   1d7b6:	f04f 0301 	mov.w	r3, #1
   1d7ba:	bf14      	ite	ne
   1d7bc:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   1d7c0:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
   1d7c4:	fa03 f300 	lsl.w	r3, r3, r0
   1d7c8:	ea6f 0303 	mvn.w	r3, r3
        p_reg->EPINEN &= ~(1UL << epnr);
   1d7cc:	bf15      	itete	ne
   1d7ce:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   1d7d0:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   1d7d2:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   1d7d6:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   1d7da:	bf14      	ite	ne
   1d7dc:	4b05      	ldrne	r3, [pc, #20]	; (1d7f4 <nrfx_usbd_ep_disable+0x50>)
   1d7de:	4b06      	ldreq	r3, [pc, #24]	; (1d7f8 <nrfx_usbd_ep_disable+0x54>)
   1d7e0:	5c1a      	ldrb	r2, [r3, r0]
   1d7e2:	2301      	movs	r3, #1
   1d7e4:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   1d7e6:	4a02      	ldr	r2, [pc, #8]	; (1d7f0 <nrfx_usbd_ep_disable+0x4c>)
   1d7e8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1d7ec:	bd10      	pop	{r4, pc}
   1d7ee:	bf00      	nop
   1d7f0:	40027000 	.word	0x40027000
   1d7f4:	00028985 	.word	0x00028985
   1d7f8:	0002898e 	.word	0x0002898e

0001d7fc <nrfx_usbd_ep_enable>:
{
   1d7fc:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   1d7fe:	b243      	sxtb	r3, r0
   1d800:	2b00      	cmp	r3, #0
   1d802:	4b23      	ldr	r3, [pc, #140]	; (1d890 <nrfx_usbd_ep_enable+0x94>)
   1d804:	4a23      	ldr	r2, [pc, #140]	; (1d894 <nrfx_usbd_ep_enable+0x98>)
   1d806:	bfa8      	it	ge
   1d808:	461a      	movge	r2, r3
   1d80a:	f000 030f 	and.w	r3, r0, #15
   1d80e:	f04f 0401 	mov.w	r4, #1
   1d812:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
   1d814:	4a20      	ldr	r2, [pc, #128]	; (1d898 <nrfx_usbd_ep_enable+0x9c>)
   1d816:	fa04 f101 	lsl.w	r1, r4, r1
{
   1d81a:	4605      	mov	r5, r0
   1d81c:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
   1d820:	da0c      	bge.n	1d83c <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   1d822:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   1d826:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   1d828:	07c8      	lsls	r0, r1, #31
   1d82a:	d406      	bmi.n	1d83a <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
   1d82c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1d830:	fa04 f303 	lsl.w	r3, r4, r3
   1d834:	4303      	orrs	r3, r0
   1d836:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   1d83a:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   1d83c:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
   1d840:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   1d842:	07c9      	lsls	r1, r1, #31
   1d844:	d4f9      	bmi.n	1d83a <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
   1d846:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
   1d84a:	fa04 f103 	lsl.w	r1, r4, r3
   1d84e:	4331      	orrs	r1, r6
   1d850:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   1d854:	2b00      	cmp	r3, #0
   1d856:	d0f0      	beq.n	1d83a <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
   1d858:	0703      	lsls	r3, r0, #28
   1d85a:	d4ee      	bmi.n	1d83a <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
   1d85c:	f04f 0320 	mov.w	r3, #32
   1d860:	f3ef 8611 	mrs	r6, BASEPRI
   1d864:	f383 8811 	msr	BASEPRI, r3
   1d868:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   1d86c:	f7ff fdea 	bl	1d444 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   1d870:	4628      	mov	r0, r5
   1d872:	f006 fb09 	bl	23e88 <ep2bit>
   1d876:	4a09      	ldr	r2, [pc, #36]	; (1d89c <nrfx_usbd_ep_enable+0xa0>)
   1d878:	6813      	ldr	r3, [r2, #0]
   1d87a:	fa04 f000 	lsl.w	r0, r4, r0
   1d87e:	ea23 0000 	bic.w	r0, r3, r0
   1d882:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
   1d884:	f386 8811 	msr	BASEPRI, r6
   1d888:	f3bf 8f6f 	isb	sy
}
   1d88c:	e7d5      	b.n	1d83a <nrfx_usbd_ep_enable+0x3e>
   1d88e:	bf00      	nop
   1d890:	0002898e 	.word	0x0002898e
   1d894:	00028985 	.word	0x00028985
   1d898:	40027000 	.word	0x40027000
   1d89c:	20003f18 	.word	0x20003f18

0001d8a0 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   1d8a0:	0603      	lsls	r3, r0, #24
{
   1d8a2:	b510      	push	{r4, lr}
   1d8a4:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   1d8a6:	d405      	bmi.n	1d8b4 <nrfx_usbd_ep_stall_clear+0x14>
   1d8a8:	f7ff fd3e 	bl	1d328 <nrfx_usbd_ep_stall_check>
   1d8ac:	b110      	cbz	r0, 1d8b4 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   1d8ae:	4620      	mov	r0, r4
   1d8b0:	f7ff fdc8 	bl	1d444 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   1d8b4:	4b01      	ldr	r3, [pc, #4]	; (1d8bc <nrfx_usbd_ep_stall_clear+0x1c>)
   1d8b6:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   1d8ba:	bd10      	pop	{r4, pc}
   1d8bc:	40027000 	.word	0x40027000

0001d8c0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1d8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1d8c2:	4b10      	ldr	r3, [pc, #64]	; (1d904 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1d8c4:	4f10      	ldr	r7, [pc, #64]	; (1d908 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1d8c6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1d8ca:	3001      	adds	r0, #1
   1d8cc:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1d8d0:	42ae      	cmp	r6, r5
   1d8d2:	d800      	bhi.n	1d8d6 <z_sys_init_run_level+0x16>
		}
	}
}
   1d8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1d8d6:	e9d5 3400 	ldrd	r3, r4, [r5]
   1d8da:	4620      	mov	r0, r4
   1d8dc:	4798      	blx	r3
   1d8de:	b170      	cbz	r0, 1d8fe <z_sys_init_run_level+0x3e>
   1d8e0:	b16c      	cbz	r4, 1d8fe <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   1d8e2:	1be4      	subs	r4, r4, r7
   1d8e4:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1d8e6:	0961      	lsrs	r1, r4, #5
   1d8e8:	4a08      	ldr	r2, [pc, #32]	; (1d90c <z_sys_init_run_level+0x4c>)
   1d8ea:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1d8ee:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1d8f2:	2301      	movs	r3, #1
   1d8f4:	fa03 f404 	lsl.w	r4, r3, r4
   1d8f8:	4304      	orrs	r4, r0
   1d8fa:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1d8fe:	3508      	adds	r5, #8
   1d900:	e7e6      	b.n	1d8d0 <z_sys_init_run_level+0x10>
   1d902:	bf00      	nop
   1d904:	0002650c 	.word	0x0002650c
   1d908:	2000072c 	.word	0x2000072c
   1d90c:	200007bc 	.word	0x200007bc

0001d910 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1d910:	4b08      	ldr	r3, [pc, #32]	; (1d934 <z_device_ready+0x24>)
   1d912:	1ac0      	subs	r0, r0, r3
   1d914:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1d916:	4b08      	ldr	r3, [pc, #32]	; (1d938 <z_device_ready+0x28>)
   1d918:	0942      	lsrs	r2, r0, #5
   1d91a:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1d91e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1d922:	2301      	movs	r3, #1
   1d924:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1d928:	4210      	tst	r0, r2
}
   1d92a:	bf0c      	ite	eq
   1d92c:	4618      	moveq	r0, r3
   1d92e:	2000      	movne	r0, #0
   1d930:	4770      	bx	lr
   1d932:	bf00      	nop
   1d934:	2000072c 	.word	0x2000072c
   1d938:	200007bc 	.word	0x200007bc

0001d93c <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   1d93c:	4911      	ldr	r1, [pc, #68]	; (1d984 <z_impl_device_get_binding+0x48>)
{
   1d93e:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1d940:	4c11      	ldr	r4, [pc, #68]	; (1d988 <z_impl_device_get_binding+0x4c>)
{
   1d942:	4605      	mov	r5, r0
   1d944:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   1d946:	428c      	cmp	r4, r1
   1d948:	d104      	bne.n	1d954 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   1d94a:	4c0f      	ldr	r4, [pc, #60]	; (1d988 <z_impl_device_get_binding+0x4c>)
   1d94c:	42b4      	cmp	r4, r6
   1d94e:	d10a      	bne.n	1d966 <z_impl_device_get_binding+0x2a>
	return NULL;
   1d950:	2400      	movs	r4, #0
   1d952:	e014      	b.n	1d97e <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   1d954:	4620      	mov	r0, r4
   1d956:	f7ff ffdb 	bl	1d910 <z_device_ready>
   1d95a:	b110      	cbz	r0, 1d962 <z_impl_device_get_binding+0x26>
   1d95c:	6823      	ldr	r3, [r4, #0]
   1d95e:	42ab      	cmp	r3, r5
   1d960:	d00d      	beq.n	1d97e <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   1d962:	3410      	adds	r4, #16
   1d964:	e7ef      	b.n	1d946 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1d966:	4620      	mov	r0, r4
   1d968:	f7ff ffd2 	bl	1d910 <z_device_ready>
   1d96c:	b908      	cbnz	r0, 1d972 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   1d96e:	3410      	adds	r4, #16
   1d970:	e7ec      	b.n	1d94c <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1d972:	6821      	ldr	r1, [r4, #0]
   1d974:	4628      	mov	r0, r5
   1d976:	f003 fe7a 	bl	2166e <strcmp>
   1d97a:	2800      	cmp	r0, #0
   1d97c:	d1f7      	bne.n	1d96e <z_impl_device_get_binding+0x32>
}
   1d97e:	4620      	mov	r0, r4
   1d980:	bd70      	pop	{r4, r5, r6, pc}
   1d982:	bf00      	nop
   1d984:	200007bc 	.word	0x200007bc
   1d988:	2000072c 	.word	0x2000072c

0001d98c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1d98c:	b510      	push	{r4, lr}
   1d98e:	4604      	mov	r4, r0
	z_impl_log_panic();
   1d990:	f7e6 fcb8 	bl	4304 <z_impl_log_panic>
   1d994:	4b06      	ldr	r3, [pc, #24]	; (1d9b0 <k_sys_fatal_error_handler+0x24>)
   1d996:	4907      	ldr	r1, [pc, #28]	; (1d9b4 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1d998:	4807      	ldr	r0, [pc, #28]	; (1d9b8 <k_sys_fatal_error_handler+0x2c>)
   1d99a:	1ac9      	subs	r1, r1, r3
   1d99c:	08c9      	lsrs	r1, r1, #3
   1d99e:	0189      	lsls	r1, r1, #6
   1d9a0:	f041 0101 	orr.w	r1, r1, #1
   1d9a4:	f002 f824 	bl	1f9f0 <log_0>
	arch_system_halt(reason);
   1d9a8:	4620      	mov	r0, r4
   1d9aa:	f006 fada 	bl	23f62 <arch_system_halt>
   1d9ae:	bf00      	nop
   1d9b0:	00024c24 	.word	0x00024c24
   1d9b4:	00024d3c 	.word	0x00024d3c
   1d9b8:	00028997 	.word	0x00028997

0001d9bc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1d9bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d9c0:	4606      	mov	r6, r0
   1d9c2:	460f      	mov	r7, r1
	__asm__ volatile(
   1d9c4:	f04f 0320 	mov.w	r3, #32
   1d9c8:	f3ef 8811 	mrs	r8, BASEPRI
   1d9cc:	f383 8811 	msr	BASEPRI, r3
   1d9d0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1d9d4:	f000 fe52 	bl	1e67c <z_impl_k_current_get>
   1d9d8:	4c1f      	ldr	r4, [pc, #124]	; (1da58 <z_fatal_error+0x9c>)
   1d9da:	4b20      	ldr	r3, [pc, #128]	; (1da5c <z_fatal_error+0xa0>)
   1d9dc:	1ae4      	subs	r4, r4, r3
   1d9de:	2e04      	cmp	r6, #4
   1d9e0:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1d9e4:	bf96      	itet	ls
   1d9e6:	4a1e      	ldrls	r2, [pc, #120]	; (1da60 <z_fatal_error+0xa4>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1d9e8:	4a1e      	ldrhi	r2, [pc, #120]	; (1da64 <z_fatal_error+0xa8>)
   1d9ea:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1d9ee:	01a4      	lsls	r4, r4, #6
   1d9f0:	f044 0301 	orr.w	r3, r4, #1
   1d9f4:	4605      	mov	r5, r0
   1d9f6:	f8ad 3000 	strh.w	r3, [sp]
   1d9fa:	481b      	ldr	r0, [pc, #108]	; (1da68 <z_fatal_error+0xac>)
   1d9fc:	2300      	movs	r3, #0
   1d9fe:	4631      	mov	r1, r6
   1da00:	f002 f830 	bl	1fa64 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1da04:	b147      	cbz	r7, 1da18 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1da06:	69fb      	ldr	r3, [r7, #28]
   1da08:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1da0c:	b123      	cbz	r3, 1da18 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1da0e:	4817      	ldr	r0, [pc, #92]	; (1da6c <z_fatal_error+0xb0>)
   1da10:	f044 0101 	orr.w	r1, r4, #1
   1da14:	f001 ffec 	bl	1f9f0 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1da18:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   1da1c:	b12d      	cbz	r5, 1da2a <z_fatal_error+0x6e>
   1da1e:	4628      	mov	r0, r5
   1da20:	f006 fd37 	bl	24492 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1da24:	b108      	cbz	r0, 1da2a <z_fatal_error+0x6e>
   1da26:	7803      	ldrb	r3, [r0, #0]
   1da28:	b903      	cbnz	r3, 1da2c <z_fatal_error+0x70>
		thread_name = "unknown";
   1da2a:	4811      	ldr	r0, [pc, #68]	; (1da70 <z_fatal_error+0xb4>)
	LOG_ERR("Current thread: %p (%s)", thread,
   1da2c:	f7e6 fae8 	bl	4000 <log_strdup>
   1da30:	4623      	mov	r3, r4
   1da32:	4602      	mov	r2, r0
   1da34:	4629      	mov	r1, r5
   1da36:	480f      	ldr	r0, [pc, #60]	; (1da74 <z_fatal_error+0xb8>)
   1da38:	f001 fffb 	bl	1fa32 <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1da3c:	4639      	mov	r1, r7
   1da3e:	4630      	mov	r0, r6
   1da40:	f7ff ffa4 	bl	1d98c <k_sys_fatal_error_handler>
	__asm__ volatile(
   1da44:	f388 8811 	msr	BASEPRI, r8
   1da48:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1da4c:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1da4e:	b002      	add	sp, #8
   1da50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1da54:	f7ea ba18 	b.w	7e88 <z_impl_k_thread_abort>
   1da58:	00024d3c 	.word	0x00024d3c
   1da5c:	00024c24 	.word	0x00024c24
   1da60:	00026524 	.word	0x00026524
   1da64:	000289a6 	.word	0x000289a6
   1da68:	000289b4 	.word	0x000289b4
   1da6c:	000289dc 	.word	0x000289dc
   1da70:	000275f2 	.word	0x000275f2
   1da74:	000289fd 	.word	0x000289fd

0001da78 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1da78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_kernel.idle = ticks;
   1da7a:	4e1c      	ldr	r6, [pc, #112]	; (1daec <idle+0x74>)
{
   1da7c:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   1da7e:	2700      	movs	r7, #0
	__asm__ volatile(
   1da80:	f04f 0220 	mov.w	r2, #32
   1da84:	f3ef 8311 	mrs	r3, BASEPRI
   1da88:	f382 8811 	msr	BASEPRI, r2
   1da8c:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   1da90:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   1da92:	b188      	cbz	r0, 1dab8 <idle+0x40>
			cpu->pending_abort = NULL;
   1da94:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   1da96:	f383 8811 	msr	BASEPRI, r3
   1da9a:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
   1da9e:	f000 fc1d 	bl	1e2dc <z_thread_single_abort>
	__asm__ volatile(
   1daa2:	f04f 0320 	mov.w	r3, #32
   1daa6:	f3ef 8011 	mrs	r0, BASEPRI
   1daaa:	f383 8811 	msr	BASEPRI, r3
   1daae:	f3bf 8f6f 	isb	sy
   1dab2:	f006 fbff 	bl	242b4 <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
   1dab6:	e7e3      	b.n	1da80 <idle+0x8>
	__asm__ volatile(
   1dab8:	f383 8811 	msr	BASEPRI, r3
   1dabc:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1dac0:	f04f 0220 	mov.w	r2, #32
   1dac4:	f3ef 8311 	mrs	r3, BASEPRI
   1dac8:	f382 8811 	msr	BASEPRI, r2
   1dacc:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1dad0:	f006 fd6f 	bl	245b2 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1dad4:	2101      	movs	r1, #1
   1dad6:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
   1dad8:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1dada:	bfd8      	it	le
   1dadc:	4608      	movle	r0, r1
   1dade:	f006 fd78 	bl	245d2 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1dae2:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   1dae4:	f7e9 fee0 	bl	78a8 <arch_cpu_idle>
}
   1dae8:	e7ca      	b.n	1da80 <idle+0x8>
   1daea:	bf00      	nop
   1daec:	200040f0 	.word	0x200040f0

0001daf0 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1daf0:	4802      	ldr	r0, [pc, #8]	; (1dafc <z_bss_zero+0xc>)
   1daf2:	4a03      	ldr	r2, [pc, #12]	; (1db00 <z_bss_zero+0x10>)
   1daf4:	2100      	movs	r1, #0
   1daf6:	1a12      	subs	r2, r2, r0
   1daf8:	f003 be00 	b.w	216fc <memset>
   1dafc:	20000af8 	.word	0x20000af8
   1db00:	20006890 	.word	0x20006890

0001db04 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1db04:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   1db06:	4b0a      	ldr	r3, [pc, #40]	; (1db30 <bg_thread_main+0x2c>)
   1db08:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1db0a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1db0c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1db0e:	f7ff fed7 	bl	1d8c0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1db12:	f000 ff57 	bl	1e9c4 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1db16:	2003      	movs	r0, #3
   1db18:	f7ff fed2 	bl	1d8c0 <z_sys_init_run_level>

	z_init_static_threads();
   1db1c:	f000 fe7a 	bl	1e814 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1db20:	f7e5 fb52 	bl	31c8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1db24:	4a03      	ldr	r2, [pc, #12]	; (1db34 <bg_thread_main+0x30>)
   1db26:	7b13      	ldrb	r3, [r2, #12]
   1db28:	f023 0301 	bic.w	r3, r3, #1
   1db2c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1db2e:	bd08      	pop	{r3, pc}
   1db30:	2000688f 	.word	0x2000688f
   1db34:	20001440 	.word	0x20001440

0001db38 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1db38:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1db3c:	b0a9      	sub	sp, #164	; 0xa4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1db3e:	f7e6 f9b7 	bl	3eb0 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1db42:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1dc38 <z_cstart+0x100>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1db46:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1db4a:	4d33      	ldr	r5, [pc, #204]	; (1dc18 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
   1db4c:	4e33      	ldr	r6, [pc, #204]	; (1dc1c <z_cstart+0xe4>)
   1db4e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1db50:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1dc3c <z_cstart+0x104>
	z_setup_new_thread(thread, stack,
   1db54:	4f32      	ldr	r7, [pc, #200]	; (1dc20 <z_cstart+0xe8>)
   1db56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1db5a:	2400      	movs	r4, #0
   1db5c:	616b      	str	r3, [r5, #20]
   1db5e:	23e0      	movs	r3, #224	; 0xe0
   1db60:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1db64:	77ec      	strb	r4, [r5, #31]
   1db66:	762c      	strb	r4, [r5, #24]
   1db68:	766c      	strb	r4, [r5, #25]
   1db6a:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1db6c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1db6e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1db72:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1db74:	f7ea f966 	bl	7e44 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1db78:	f7e9 fe90 	bl	789c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1db7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1db80:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1db82:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1db84:	4d27      	ldr	r5, [pc, #156]	; (1dc24 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1db86:	f240 1301 	movw	r3, #257	; 0x101
   1db8a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1db8e:	ab06      	add	r3, sp, #24
   1db90:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1db92:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1db94:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   1db98:	f7ff fe92 	bl	1d8c0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1db9c:	2001      	movs	r0, #1
   1db9e:	f7ff fe8f 	bl	1d8c0 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1dba2:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1dba6:	f000 fced 	bl	1e584 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1dbaa:	4b1f      	ldr	r3, [pc, #124]	; (1dc28 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   1dbac:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1dbae:	491f      	ldr	r1, [pc, #124]	; (1dc2c <z_cstart+0xf4>)
   1dbb0:	9305      	str	r3, [sp, #20]
   1dbb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1dbb6:	4653      	mov	r3, sl
   1dbb8:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1dbbc:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1dbc0:	9400      	str	r4, [sp, #0]
   1dbc2:	4630      	mov	r0, r6
   1dbc4:	f000 fdc8 	bl	1e758 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1dbc8:	7b73      	ldrb	r3, [r6, #13]
   1dbca:	4680      	mov	r8, r0
   1dbcc:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1dbd0:	4630      	mov	r0, r6
   1dbd2:	7373      	strb	r3, [r6, #13]
   1dbd4:	f006 fbb0 	bl	24338 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1dbd8:	230f      	movs	r3, #15
   1dbda:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1dbde:	4914      	ldr	r1, [pc, #80]	; (1dc30 <z_cstart+0xf8>)
   1dbe0:	4b14      	ldr	r3, [pc, #80]	; (1dc34 <z_cstart+0xfc>)
   1dbe2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1dbe6:	e9cd b404 	strd	fp, r4, [sp, #16]
   1dbea:	e9cd 5400 	strd	r5, r4, [sp]
   1dbee:	4638      	mov	r0, r7
   1dbf0:	f000 fdb2 	bl	1e758 <z_setup_new_thread>
   1dbf4:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1dbf6:	60ef      	str	r7, [r5, #12]
   1dbf8:	f023 0304 	bic.w	r3, r3, #4
   1dbfc:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1dbfe:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
   1dc02:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
   1dc06:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   1dc08:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1dc0c:	4652      	mov	r2, sl
   1dc0e:	4641      	mov	r1, r8
   1dc10:	4630      	mov	r0, r6
   1dc12:	f7e9 fe29 	bl	7868 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1dc16:	bf00      	nop
   1dc18:	e000ed00 	.word	0xe000ed00
   1dc1c:	20001440 	.word	0x20001440
   1dc20:	200013b8 	.word	0x200013b8
   1dc24:	200040f0 	.word	0x200040f0
   1dc28:	00028a5f 	.word	0x00028a5f
   1dc2c:	20008340 	.word	0x20008340
   1dc30:	2000a360 	.word	0x2000a360
   1dc34:	0001da79 	.word	0x0001da79
   1dc38:	2000ace0 	.word	0x2000ace0
   1dc3c:	0001db05 	.word	0x0001db05

0001dc40 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1dc40:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1dc42:	4c06      	ldr	r4, [pc, #24]	; (1dc5c <statics_init+0x1c>)
   1dc44:	4d06      	ldr	r5, [pc, #24]	; (1dc60 <statics_init+0x20>)
   1dc46:	42ac      	cmp	r4, r5
   1dc48:	d301      	bcc.n	1dc4e <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1dc4a:	2000      	movs	r0, #0
   1dc4c:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1dc4e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1dc52:	4620      	mov	r0, r4
   1dc54:	f006 f990 	bl	23f78 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1dc58:	3414      	adds	r4, #20
   1dc5a:	e7f4      	b.n	1dc46 <statics_init+0x6>
   1dc5c:	20000814 	.word	0x20000814
   1dc60:	20000850 	.word	0x20000850

0001dc64 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1dc64:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1dc66:	4b0e      	ldr	r3, [pc, #56]	; (1dca0 <init_mem_slab_module+0x3c>)
   1dc68:	4c0e      	ldr	r4, [pc, #56]	; (1dca4 <init_mem_slab_module+0x40>)
   1dc6a:	42a3      	cmp	r3, r4
   1dc6c:	d301      	bcc.n	1dc72 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1dc6e:	2000      	movs	r0, #0
	return rc;
}
   1dc70:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1dc72:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1dc76:	ea41 0200 	orr.w	r2, r1, r0
   1dc7a:	f012 0203 	ands.w	r2, r2, #3
   1dc7e:	d10b      	bne.n	1dc98 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1dc80:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1dc82:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1dc84:	42aa      	cmp	r2, r5
   1dc86:	d101      	bne.n	1dc8c <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1dc88:	331c      	adds	r3, #28
   1dc8a:	e7ee      	b.n	1dc6a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1dc8c:	695e      	ldr	r6, [r3, #20]
   1dc8e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1dc90:	3201      	adds	r2, #1
		slab->free_list = p;
   1dc92:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1dc94:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1dc96:	e7f5      	b.n	1dc84 <init_mem_slab_module+0x20>
		return -EINVAL;
   1dc98:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1dc9c:	e7e8      	b.n	1dc70 <init_mem_slab_module+0xc>
   1dc9e:	bf00      	nop
   1dca0:	200007c0 	.word	0x200007c0
   1dca4:	20000814 	.word	0x20000814

0001dca8 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1dca8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1dcaa:	460c      	mov	r4, r1
   1dcac:	4616      	mov	r6, r2
   1dcae:	461f      	mov	r7, r3
   1dcb0:	f04f 0320 	mov.w	r3, #32
   1dcb4:	f3ef 8111 	mrs	r1, BASEPRI
   1dcb8:	f383 8811 	msr	BASEPRI, r3
   1dcbc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1dcc0:	6943      	ldr	r3, [r0, #20]
   1dcc2:	b15b      	cbz	r3, 1dcdc <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1dcc4:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1dcc6:	681b      	ldr	r3, [r3, #0]
   1dcc8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1dcca:	6983      	ldr	r3, [r0, #24]
   1dccc:	3301      	adds	r3, #1
   1dcce:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1dcd0:	2000      	movs	r0, #0
	__asm__ volatile(
   1dcd2:	f381 8811 	msr	BASEPRI, r1
   1dcd6:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1dcda:	e011      	b.n	1dd00 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1dcdc:	ea56 0207 	orrs.w	r2, r6, r7
   1dce0:	d103      	bne.n	1dcea <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1dce2:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1dce4:	f06f 000b 	mvn.w	r0, #11
   1dce8:	e7f3      	b.n	1dcd2 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1dcea:	4602      	mov	r2, r0
   1dcec:	e9cd 6700 	strd	r6, r7, [sp]
   1dcf0:	4804      	ldr	r0, [pc, #16]	; (1dd04 <k_mem_slab_alloc+0x5c>)
   1dcf2:	f000 fbb5 	bl	1e460 <z_pend_curr>
		if (result == 0) {
   1dcf6:	b918      	cbnz	r0, 1dd00 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1dcf8:	4b03      	ldr	r3, [pc, #12]	; (1dd08 <k_mem_slab_alloc+0x60>)
   1dcfa:	689b      	ldr	r3, [r3, #8]
   1dcfc:	695b      	ldr	r3, [r3, #20]
   1dcfe:	6023      	str	r3, [r4, #0]
}
   1dd00:	b002      	add	sp, #8
   1dd02:	bdd0      	pop	{r4, r6, r7, pc}
   1dd04:	20006890 	.word	0x20006890
   1dd08:	200040f0 	.word	0x200040f0

0001dd0c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dd0e:	4604      	mov	r4, r0
   1dd10:	460d      	mov	r5, r1
	__asm__ volatile(
   1dd12:	f04f 0320 	mov.w	r3, #32
   1dd16:	f3ef 8611 	mrs	r6, BASEPRI
   1dd1a:	f383 8811 	msr	BASEPRI, r3
   1dd1e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   1dd22:	6947      	ldr	r7, [r0, #20]
   1dd24:	b977      	cbnz	r7, 1dd44 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1dd26:	f006 fb62 	bl	243ee <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1dd2a:	b158      	cbz	r0, 1dd44 <k_mem_slab_free+0x38>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1dd2c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1dd2e:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1dd30:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
			z_ready_thread(pending_thread);
   1dd34:	f006 fb00 	bl	24338 <z_ready_thread>
			z_reschedule(&lock, key);
   1dd38:	4631      	mov	r1, r6
   1dd3a:	4809      	ldr	r0, [pc, #36]	; (1dd60 <k_mem_slab_free+0x54>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   1dd3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   1dd40:	f000 b946 	b.w	1dfd0 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1dd44:	682b      	ldr	r3, [r5, #0]
   1dd46:	6962      	ldr	r2, [r4, #20]
   1dd48:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1dd4a:	682b      	ldr	r3, [r5, #0]
   1dd4c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1dd4e:	69a3      	ldr	r3, [r4, #24]
   1dd50:	3b01      	subs	r3, #1
   1dd52:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1dd54:	f386 8811 	msr	BASEPRI, r6
   1dd58:	f3bf 8f6f 	isb	sy
}
   1dd5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dd5e:	bf00      	nop
   1dd60:	20006890 	.word	0x20006890

0001dd64 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1dd64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1dd68:	4604      	mov	r4, r0
   1dd6a:	4616      	mov	r6, r2
   1dd6c:	461f      	mov	r7, r3
	__asm__ volatile(
   1dd6e:	f04f 0320 	mov.w	r3, #32
   1dd72:	f3ef 8811 	mrs	r8, BASEPRI
   1dd76:	f383 8811 	msr	BASEPRI, r3
   1dd7a:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1dd7e:	68c3      	ldr	r3, [r0, #12]
   1dd80:	4a32      	ldr	r2, [pc, #200]	; (1de4c <z_impl_k_mutex_lock+0xe8>)
   1dd82:	b16b      	cbz	r3, 1dda0 <z_impl_k_mutex_lock+0x3c>
   1dd84:	6880      	ldr	r0, [r0, #8]
   1dd86:	6891      	ldr	r1, [r2, #8]
   1dd88:	4288      	cmp	r0, r1
   1dd8a:	d019      	beq.n	1ddc0 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1dd8c:	ea56 0307 	orrs.w	r3, r6, r7
   1dd90:	d118      	bne.n	1ddc4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1dd92:	f388 8811 	msr	BASEPRI, r8
   1dd96:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1dd9a:	f06f 000f 	mvn.w	r0, #15
   1dd9e:	e00c      	b.n	1ddba <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1dda0:	6891      	ldr	r1, [r2, #8]
   1dda2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1dda6:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1dda8:	3301      	adds	r3, #1
   1ddaa:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1ddac:	6893      	ldr	r3, [r2, #8]
   1ddae:	60a3      	str	r3, [r4, #8]
   1ddb0:	f388 8811 	msr	BASEPRI, r8
   1ddb4:	f3bf 8f6f 	isb	sy
		return 0;
   1ddb8:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1ddba:	b002      	add	sp, #8
   1ddbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1ddc0:	6921      	ldr	r1, [r4, #16]
   1ddc2:	e7f0      	b.n	1dda6 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1ddc4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1ddc8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1ddcc:	4299      	cmp	r1, r3
   1ddce:	bfa8      	it	ge
   1ddd0:	4619      	movge	r1, r3
   1ddd2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1ddd6:	428b      	cmp	r3, r1
   1ddd8:	dd2c      	ble.n	1de34 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1ddda:	f000 fb8f 	bl	1e4fc <z_set_prio>
   1ddde:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1dde0:	e9cd 6700 	strd	r6, r7, [sp]
   1dde4:	481a      	ldr	r0, [pc, #104]	; (1de50 <z_impl_k_mutex_lock+0xec>)
   1dde6:	4622      	mov	r2, r4
   1dde8:	4641      	mov	r1, r8
   1ddea:	f000 fb39 	bl	1e460 <z_pend_curr>
	if (got_mutex == 0) {
   1ddee:	2800      	cmp	r0, #0
   1ddf0:	d0e3      	beq.n	1ddba <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1ddf2:	f04f 0320 	mov.w	r3, #32
   1ddf6:	f3ef 8611 	mrs	r6, BASEPRI
   1ddfa:	f383 8811 	msr	BASEPRI, r3
   1ddfe:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1de02:	6823      	ldr	r3, [r4, #0]
   1de04:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1de06:	42a3      	cmp	r3, r4
   1de08:	d007      	beq.n	1de1a <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1de0a:	b133      	cbz	r3, 1de1a <z_impl_k_mutex_lock+0xb6>
   1de0c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1de10:	4299      	cmp	r1, r3
   1de12:	bfa8      	it	ge
   1de14:	4619      	movge	r1, r3
   1de16:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1de1a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1de1c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1de20:	4299      	cmp	r1, r3
   1de22:	d109      	bne.n	1de38 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1de24:	b16d      	cbz	r5, 1de42 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1de26:	480a      	ldr	r0, [pc, #40]	; (1de50 <z_impl_k_mutex_lock+0xec>)
   1de28:	4631      	mov	r1, r6
   1de2a:	f000 f8d1 	bl	1dfd0 <z_reschedule>
	return -EAGAIN;
   1de2e:	f06f 000a 	mvn.w	r0, #10
   1de32:	e7c2      	b.n	1ddba <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1de34:	2500      	movs	r5, #0
   1de36:	e7d3      	b.n	1dde0 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1de38:	f000 fb60 	bl	1e4fc <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1de3c:	2800      	cmp	r0, #0
   1de3e:	d1f2      	bne.n	1de26 <z_impl_k_mutex_lock+0xc2>
   1de40:	e7f0      	b.n	1de24 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1de42:	f386 8811 	msr	BASEPRI, r6
   1de46:	f3bf 8f6f 	isb	sy
   1de4a:	e7f0      	b.n	1de2e <z_impl_k_mutex_lock+0xca>
   1de4c:	200040f0 	.word	0x200040f0
   1de50:	20006890 	.word	0x20006890

0001de54 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1de54:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1de56:	6883      	ldr	r3, [r0, #8]
{
   1de58:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1de5a:	2b00      	cmp	r3, #0
   1de5c:	d037      	beq.n	1dece <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1de5e:	4a1f      	ldr	r2, [pc, #124]	; (1dedc <z_impl_k_mutex_unlock+0x88>)
   1de60:	6892      	ldr	r2, [r2, #8]
   1de62:	4293      	cmp	r3, r2
   1de64:	d136      	bne.n	1ded4 <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1de66:	7bda      	ldrb	r2, [r3, #15]
   1de68:	3a01      	subs	r2, #1
   1de6a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1de6c:	68c3      	ldr	r3, [r0, #12]
   1de6e:	2b01      	cmp	r3, #1
   1de70:	d005      	beq.n	1de7e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1de72:	3b01      	subs	r3, #1
   1de74:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1de76:	f000 f90f 	bl	1e098 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1de7a:	2000      	movs	r0, #0
}
   1de7c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1de7e:	f04f 0320 	mov.w	r3, #32
   1de82:	f3ef 8511 	mrs	r5, BASEPRI
   1de86:	f383 8811 	msr	BASEPRI, r3
   1de8a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1de8e:	6901      	ldr	r1, [r0, #16]
   1de90:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1de92:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1de96:	4299      	cmp	r1, r3
   1de98:	d001      	beq.n	1de9e <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1de9a:	f000 fb2f 	bl	1e4fc <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1de9e:	4620      	mov	r0, r4
   1dea0:	f006 faa5 	bl	243ee <z_unpend_first_thread>
	mutex->owner = new_owner;
   1dea4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1dea6:	b160      	cbz	r0, 1dec2 <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   1dea8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1deac:	6122      	str	r2, [r4, #16]
   1deae:	2200      	movs	r2, #0
   1deb0:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
   1deb4:	f006 fa40 	bl	24338 <z_ready_thread>
		z_reschedule(&lock, key);
   1deb8:	4809      	ldr	r0, [pc, #36]	; (1dee0 <z_impl_k_mutex_unlock+0x8c>)
   1deba:	4629      	mov	r1, r5
   1debc:	f000 f888 	bl	1dfd0 <z_reschedule>
   1dec0:	e7d9      	b.n	1de76 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1dec2:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1dec4:	f385 8811 	msr	BASEPRI, r5
   1dec8:	f3bf 8f6f 	isb	sy
   1decc:	e7d3      	b.n	1de76 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1dece:	f06f 0015 	mvn.w	r0, #21
   1ded2:	e7d3      	b.n	1de7c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1ded4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ded8:	e7d0      	b.n	1de7c <z_impl_k_mutex_unlock+0x28>
   1deda:	bf00      	nop
   1dedc:	200040f0 	.word	0x200040f0
   1dee0:	20006890 	.word	0x20006890

0001dee4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1dee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1dee6:	4616      	mov	r6, r2
   1dee8:	461f      	mov	r7, r3
	__asm__ volatile(
   1deea:	f04f 0320 	mov.w	r3, #32
   1deee:	f3ef 8511 	mrs	r5, BASEPRI
   1def2:	f383 8811 	msr	BASEPRI, r3
   1def6:	f3bf 8f6f 	isb	sy
   1defa:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1defc:	b19c      	cbz	r4, 1df26 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1defe:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1df00:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1df02:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1df06:	4294      	cmp	r4, r2
	list->head = node;
   1df08:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1df0a:	bf08      	it	eq
   1df0c:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1df0e:	2101      	movs	r1, #1
   1df10:	4620      	mov	r0, r4
   1df12:	f006 f93d 	bl	24190 <z_queue_node_peek>
   1df16:	4604      	mov	r4, r0
	__asm__ volatile(
   1df18:	f385 8811 	msr	BASEPRI, r5
   1df1c:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1df20:	4620      	mov	r0, r4
   1df22:	b003      	add	sp, #12
   1df24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1df26:	ea56 0307 	orrs.w	r3, r6, r7
   1df2a:	d0f5      	beq.n	1df18 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1df2c:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1df30:	e9cd 6700 	strd	r6, r7, [sp]
   1df34:	4629      	mov	r1, r5
   1df36:	4610      	mov	r0, r2
   1df38:	f000 fa92 	bl	1e460 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1df3c:	2800      	cmp	r0, #0
   1df3e:	d1ef      	bne.n	1df20 <z_impl_k_queue_get+0x3c>
   1df40:	4b01      	ldr	r3, [pc, #4]	; (1df48 <z_impl_k_queue_get+0x64>)
   1df42:	689b      	ldr	r3, [r3, #8]
   1df44:	695c      	ldr	r4, [r3, #20]
   1df46:	e7eb      	b.n	1df20 <z_impl_k_queue_get+0x3c>
   1df48:	200040f0 	.word	0x200040f0

0001df4c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1df4c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1df4e:	4c08      	ldr	r4, [pc, #32]	; (1df70 <z_reset_time_slice+0x24>)
   1df50:	6823      	ldr	r3, [r4, #0]
   1df52:	b15b      	cbz	r3, 1df6c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1df54:	f7e9 f958 	bl	7208 <z_clock_elapsed>
   1df58:	4603      	mov	r3, r0
   1df5a:	6820      	ldr	r0, [r4, #0]
   1df5c:	4a05      	ldr	r2, [pc, #20]	; (1df74 <z_reset_time_slice+0x28>)
   1df5e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1df60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1df64:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1df66:	2100      	movs	r1, #0
   1df68:	f006 bb33 	b.w	245d2 <z_set_timeout_expiry>
}
   1df6c:	bd10      	pop	{r4, pc}
   1df6e:	bf00      	nop
   1df70:	2000412c 	.word	0x2000412c
   1df74:	200040f0 	.word	0x200040f0

0001df78 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1df78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1df7a:	4605      	mov	r5, r0
   1df7c:	460c      	mov	r4, r1
	__asm__ volatile(
   1df7e:	f04f 0320 	mov.w	r3, #32
   1df82:	f3ef 8611 	mrs	r6, BASEPRI
   1df86:	f383 8811 	msr	BASEPRI, r3
   1df8a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1df8e:	4b0d      	ldr	r3, [pc, #52]	; (1dfc4 <k_sched_time_slice_set+0x4c>)
   1df90:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1df92:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1df96:	f240 30e7 	movw	r0, #999	; 0x3e7
   1df9a:	2100      	movs	r1, #0
   1df9c:	615a      	str	r2, [r3, #20]
   1df9e:	fbe7 0105 	umlal	r0, r1, r7, r5
   1dfa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1dfa6:	2300      	movs	r3, #0
   1dfa8:	f7e2 f8aa 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1dfac:	4b06      	ldr	r3, [pc, #24]	; (1dfc8 <k_sched_time_slice_set+0x50>)
   1dfae:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1dfb0:	4b06      	ldr	r3, [pc, #24]	; (1dfcc <k_sched_time_slice_set+0x54>)
   1dfb2:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1dfb4:	f7ff ffca 	bl	1df4c <z_reset_time_slice>
	__asm__ volatile(
   1dfb8:	f386 8811 	msr	BASEPRI, r6
   1dfbc:	f3bf 8f6f 	isb	sy
	}
}
   1dfc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dfc2:	bf00      	nop
   1dfc4:	200040f0 	.word	0x200040f0
   1dfc8:	2000412c 	.word	0x2000412c
   1dfcc:	20004128 	.word	0x20004128

0001dfd0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1dfd0:	b949      	cbnz	r1, 1dfe6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1dfd2:	f3ef 8005 	mrs	r0, IPSR
   1dfd6:	b930      	cbnz	r0, 1dfe6 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   1dfd8:	4b05      	ldr	r3, [pc, #20]	; (1dff0 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1dfda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1dfdc:	689b      	ldr	r3, [r3, #8]
   1dfde:	429a      	cmp	r2, r3
   1dfe0:	d001      	beq.n	1dfe6 <z_reschedule+0x16>
	ret = arch_swap(key);
   1dfe2:	f7e9 bb5d 	b.w	76a0 <arch_swap>
   1dfe6:	f381 8811 	msr	BASEPRI, r1
   1dfea:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1dfee:	4770      	bx	lr
   1dff0:	200040f0 	.word	0x200040f0

0001dff4 <k_sched_lock>:
	__asm__ volatile(
   1dff4:	f04f 0320 	mov.w	r3, #32
   1dff8:	f3ef 8111 	mrs	r1, BASEPRI
   1dffc:	f383 8811 	msr	BASEPRI, r3
   1e000:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1e004:	4b04      	ldr	r3, [pc, #16]	; (1e018 <k_sched_lock+0x24>)
   1e006:	689a      	ldr	r2, [r3, #8]
   1e008:	7bd3      	ldrb	r3, [r2, #15]
   1e00a:	3b01      	subs	r3, #1
   1e00c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1e00e:	f381 8811 	msr	BASEPRI, r1
   1e012:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1e016:	4770      	bx	lr
   1e018:	200040f0 	.word	0x200040f0

0001e01c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1e01c:	4b09      	ldr	r3, [pc, #36]	; (1e044 <z_priq_dumb_remove+0x28>)
   1e01e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1e022:	4282      	cmp	r2, r0
   1e024:	d105      	bne.n	1e032 <z_priq_dumb_remove+0x16>
   1e026:	689b      	ldr	r3, [r3, #8]
   1e028:	428b      	cmp	r3, r1
   1e02a:	d102      	bne.n	1e032 <z_priq_dumb_remove+0x16>
   1e02c:	7b4b      	ldrb	r3, [r1, #13]
   1e02e:	06db      	lsls	r3, r3, #27
   1e030:	d106      	bne.n	1e040 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1e032:	e9d1 3200 	ldrd	r3, r2, [r1]
   1e036:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1e038:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e03a:	2300      	movs	r3, #0
	node->prev = NULL;
   1e03c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1e040:	4770      	bx	lr
   1e042:	bf00      	nop
   1e044:	200040f0 	.word	0x200040f0

0001e048 <update_cache>:
{
   1e048:	b538      	push	{r3, r4, r5, lr}
   1e04a:	4c12      	ldr	r4, [pc, #72]	; (1e094 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
   1e04c:	6923      	ldr	r3, [r4, #16]
   1e04e:	68a2      	ldr	r2, [r4, #8]
{
   1e050:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   1e052:	b10b      	cbz	r3, 1e058 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   1e054:	68e5      	ldr	r5, [r4, #12]
   1e056:	e00c      	b.n	1e072 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1e058:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1e05c:	f006 f962 	bl	24324 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1e060:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1e062:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1e064:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1e066:	bf44      	itt	mi
   1e068:	f043 0308 	orrmi.w	r3, r3, #8
   1e06c:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1e06e:	2d00      	cmp	r5, #0
   1e070:	d0f0      	beq.n	1e054 <update_cache+0xc>
	if (preempt_ok != 0) {
   1e072:	b949      	cbnz	r1, 1e088 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   1e074:	7b53      	ldrb	r3, [r2, #13]
   1e076:	06db      	lsls	r3, r3, #27
   1e078:	d106      	bne.n	1e088 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1e07a:	69ab      	ldr	r3, [r5, #24]
   1e07c:	b923      	cbnz	r3, 1e088 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   1e07e:	89d3      	ldrh	r3, [r2, #14]
   1e080:	2b7f      	cmp	r3, #127	; 0x7f
   1e082:	d901      	bls.n	1e088 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   1e084:	62a2      	str	r2, [r4, #40]	; 0x28
}
   1e086:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1e088:	4295      	cmp	r5, r2
   1e08a:	d001      	beq.n	1e090 <update_cache+0x48>
			z_reset_time_slice();
   1e08c:	f7ff ff5e 	bl	1df4c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1e090:	62a5      	str	r5, [r4, #40]	; 0x28
}
   1e092:	e7f8      	b.n	1e086 <update_cache+0x3e>
   1e094:	200040f0 	.word	0x200040f0

0001e098 <k_sched_unlock>:
{
   1e098:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e09a:	f04f 0320 	mov.w	r3, #32
   1e09e:	f3ef 8411 	mrs	r4, BASEPRI
   1e0a2:	f383 8811 	msr	BASEPRI, r3
   1e0a6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1e0aa:	4b08      	ldr	r3, [pc, #32]	; (1e0cc <k_sched_unlock+0x34>)
   1e0ac:	689a      	ldr	r2, [r3, #8]
   1e0ae:	7bd3      	ldrb	r3, [r2, #15]
   1e0b0:	3301      	adds	r3, #1
   1e0b2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1e0b4:	2000      	movs	r0, #0
   1e0b6:	f7ff ffc7 	bl	1e048 <update_cache>
	__asm__ volatile(
   1e0ba:	f384 8811 	msr	BASEPRI, r4
   1e0be:	f3bf 8f6f 	isb	sy
}
   1e0c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1e0c6:	f006 b901 	b.w	242cc <z_reschedule_unlocked>
   1e0ca:	bf00      	nop
   1e0cc:	200040f0 	.word	0x200040f0

0001e0d0 <ready_thread>:
{
   1e0d0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1e0d2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1e0d6:	7b43      	ldrb	r3, [r0, #13]
   1e0d8:	2a00      	cmp	r2, #0
   1e0da:	db2c      	blt.n	1e136 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1e0dc:	06db      	lsls	r3, r3, #27
   1e0de:	d12a      	bne.n	1e136 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1e0e0:	6983      	ldr	r3, [r0, #24]
   1e0e2:	bb43      	cbnz	r3, 1e136 <ready_thread+0x66>
	return list->head == list;
   1e0e4:	4a15      	ldr	r2, [pc, #84]	; (1e13c <ready_thread+0x6c>)
   1e0e6:	4611      	mov	r1, r2
   1e0e8:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e0ec:	428c      	cmp	r4, r1
   1e0ee:	bf18      	it	ne
   1e0f0:	4623      	movne	r3, r4
   1e0f2:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e0f4:	6b14      	ldr	r4, [r2, #48]	; 0x30
   1e0f6:	bf38      	it	cc
   1e0f8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e0fa:	b1b3      	cbz	r3, 1e12a <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   1e0fc:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1e100:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1e104:	42ae      	cmp	r6, r5
   1e106:	db03      	blt.n	1e110 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   1e108:	42a3      	cmp	r3, r4
   1e10a:	d00e      	beq.n	1e12a <ready_thread+0x5a>
   1e10c:	681b      	ldr	r3, [r3, #0]
   1e10e:	e7f4      	b.n	1e0fa <ready_thread+0x2a>
	node->prev = successor->prev;
   1e110:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1e112:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1e116:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1e118:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1e11a:	7b43      	ldrb	r3, [r0, #13]
   1e11c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1e120:	7343      	strb	r3, [r0, #13]
}
   1e122:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1e124:	2000      	movs	r0, #0
   1e126:	f7ff bf8f 	b.w	1e048 <update_cache>
	node->prev = list->tail;
   1e12a:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1e12e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1e130:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1e132:	6310      	str	r0, [r2, #48]	; 0x30
}
   1e134:	e7f1      	b.n	1e11a <ready_thread+0x4a>
}
   1e136:	bc70      	pop	{r4, r5, r6}
   1e138:	4770      	bx	lr
   1e13a:	bf00      	nop
   1e13c:	200040f0 	.word	0x200040f0

0001e140 <z_sched_start>:
{
   1e140:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e142:	f04f 0220 	mov.w	r2, #32
   1e146:	f3ef 8411 	mrs	r4, BASEPRI
   1e14a:	f382 8811 	msr	BASEPRI, r2
   1e14e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1e152:	7b42      	ldrb	r2, [r0, #13]
   1e154:	0751      	lsls	r1, r2, #29
   1e156:	d404      	bmi.n	1e162 <z_sched_start+0x22>
	__asm__ volatile(
   1e158:	f384 8811 	msr	BASEPRI, r4
   1e15c:	f3bf 8f6f 	isb	sy
}
   1e160:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1e162:	f022 0204 	bic.w	r2, r2, #4
   1e166:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1e168:	f7ff ffb2 	bl	1e0d0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1e16c:	4621      	mov	r1, r4
   1e16e:	4802      	ldr	r0, [pc, #8]	; (1e178 <z_sched_start+0x38>)
}
   1e170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1e174:	f7ff bf2c 	b.w	1dfd0 <z_reschedule>
   1e178:	20006890 	.word	0x20006890

0001e17c <move_thread_to_end_of_prio_q>:
{
   1e17c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1e17e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1e182:	2b00      	cmp	r3, #0
{
   1e184:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1e186:	da02      	bge.n	1e18e <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1e188:	4817      	ldr	r0, [pc, #92]	; (1e1e8 <move_thread_to_end_of_prio_q+0x6c>)
   1e18a:	f7ff ff47 	bl	1e01c <z_priq_dumb_remove>
	return list->head == list;
   1e18e:	4a17      	ldr	r2, [pc, #92]	; (1e1ec <move_thread_to_end_of_prio_q+0x70>)
   1e190:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e192:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return list->head == list;
   1e194:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e198:	4283      	cmp	r3, r0
   1e19a:	bf08      	it	eq
   1e19c:	2300      	moveq	r3, #0
   1e19e:	2b00      	cmp	r3, #0
   1e1a0:	bf38      	it	cc
   1e1a2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e1a4:	b1d3      	cbz	r3, 1e1dc <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   1e1a6:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1e1aa:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1e1ae:	42ae      	cmp	r6, r5
   1e1b0:	db03      	blt.n	1e1ba <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1e1b2:	42a3      	cmp	r3, r4
   1e1b4:	d012      	beq.n	1e1dc <move_thread_to_end_of_prio_q+0x60>
   1e1b6:	681b      	ldr	r3, [r3, #0]
   1e1b8:	e7f4      	b.n	1e1a4 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   1e1ba:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1e1bc:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1e1c0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1e1c2:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1e1c4:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   1e1c6:	6890      	ldr	r0, [r2, #8]
   1e1c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1e1cc:	734b      	strb	r3, [r1, #13]
   1e1ce:	1a43      	subs	r3, r0, r1
   1e1d0:	4258      	negs	r0, r3
}
   1e1d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1e1d6:	4158      	adcs	r0, r3
   1e1d8:	f7ff bf36 	b.w	1e048 <update_cache>
	node->prev = list->tail;
   1e1dc:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   1e1e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1e1e2:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1e1e4:	6311      	str	r1, [r2, #48]	; 0x30
}
   1e1e6:	e7ed      	b.n	1e1c4 <move_thread_to_end_of_prio_q+0x48>
   1e1e8:	2000411c 	.word	0x2000411c
   1e1ec:	200040f0 	.word	0x200040f0

0001e1f0 <z_time_slice>:
{
   1e1f0:	b570      	push	{r4, r5, r6, lr}
   1e1f2:	4601      	mov	r1, r0
	__asm__ volatile(
   1e1f4:	f04f 0320 	mov.w	r3, #32
   1e1f8:	f3ef 8411 	mrs	r4, BASEPRI
   1e1fc:	f383 8811 	msr	BASEPRI, r3
   1e200:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1e204:	4b16      	ldr	r3, [pc, #88]	; (1e260 <z_time_slice+0x70>)
   1e206:	4a17      	ldr	r2, [pc, #92]	; (1e264 <z_time_slice+0x74>)
   1e208:	6898      	ldr	r0, [r3, #8]
   1e20a:	6815      	ldr	r5, [r2, #0]
   1e20c:	42a8      	cmp	r0, r5
   1e20e:	461d      	mov	r5, r3
   1e210:	d106      	bne.n	1e220 <z_time_slice+0x30>
			z_reset_time_slice();
   1e212:	f7ff fe9b 	bl	1df4c <z_reset_time_slice>
	__asm__ volatile(
   1e216:	f384 8811 	msr	BASEPRI, r4
   1e21a:	f3bf 8f6f 	isb	sy
}
   1e21e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1e220:	2600      	movs	r6, #0
   1e222:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1e224:	4a10      	ldr	r2, [pc, #64]	; (1e268 <z_time_slice+0x78>)
   1e226:	6812      	ldr	r2, [r2, #0]
   1e228:	b1ba      	cbz	r2, 1e25a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1e22a:	89c2      	ldrh	r2, [r0, #14]
   1e22c:	2a7f      	cmp	r2, #127	; 0x7f
   1e22e:	d814      	bhi.n	1e25a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1e230:	7b42      	ldrb	r2, [r0, #13]
   1e232:	06d2      	lsls	r2, r2, #27
   1e234:	d111      	bne.n	1e25a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1e236:	4a0d      	ldr	r2, [pc, #52]	; (1e26c <z_time_slice+0x7c>)
   1e238:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1e23c:	6812      	ldr	r2, [r2, #0]
   1e23e:	4296      	cmp	r6, r2
   1e240:	db0b      	blt.n	1e25a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1e242:	4a0b      	ldr	r2, [pc, #44]	; (1e270 <z_time_slice+0x80>)
   1e244:	4290      	cmp	r0, r2
   1e246:	d008      	beq.n	1e25a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1e248:	695a      	ldr	r2, [r3, #20]
   1e24a:	428a      	cmp	r2, r1
   1e24c:	dc02      	bgt.n	1e254 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1e24e:	f7ff ff95 	bl	1e17c <move_thread_to_end_of_prio_q>
   1e252:	e7de      	b.n	1e212 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1e254:	1a52      	subs	r2, r2, r1
   1e256:	615a      	str	r2, [r3, #20]
   1e258:	e7dd      	b.n	1e216 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1e25a:	2300      	movs	r3, #0
   1e25c:	616b      	str	r3, [r5, #20]
   1e25e:	e7da      	b.n	1e216 <z_time_slice+0x26>
   1e260:	200040f0 	.word	0x200040f0
   1e264:	20004124 	.word	0x20004124
   1e268:	2000412c 	.word	0x2000412c
   1e26c:	20004128 	.word	0x20004128
   1e270:	200013b8 	.word	0x200013b8

0001e274 <z_impl_k_thread_suspend>:
{
   1e274:	b570      	push	{r4, r5, r6, lr}
   1e276:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1e278:	3018      	adds	r0, #24
   1e27a:	f006 f984 	bl	24586 <z_abort_timeout>
	__asm__ volatile(
   1e27e:	f04f 0320 	mov.w	r3, #32
   1e282:	f3ef 8611 	mrs	r6, BASEPRI
   1e286:	f383 8811 	msr	BASEPRI, r3
   1e28a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1e28e:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1e292:	2b00      	cmp	r3, #0
   1e294:	da07      	bge.n	1e2a6 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1e296:	480f      	ldr	r0, [pc, #60]	; (1e2d4 <z_impl_k_thread_suspend+0x60>)
   1e298:	4621      	mov	r1, r4
   1e29a:	f7ff febf 	bl	1e01c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1e29e:	7b63      	ldrb	r3, [r4, #13]
   1e2a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e2a4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1e2a6:	4d0c      	ldr	r5, [pc, #48]	; (1e2d8 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1e2a8:	7b63      	ldrb	r3, [r4, #13]
   1e2aa:	68a8      	ldr	r0, [r5, #8]
   1e2ac:	f043 0310 	orr.w	r3, r3, #16
   1e2b0:	7363      	strb	r3, [r4, #13]
   1e2b2:	1b03      	subs	r3, r0, r4
   1e2b4:	4258      	negs	r0, r3
   1e2b6:	4158      	adcs	r0, r3
   1e2b8:	f7ff fec6 	bl	1e048 <update_cache>
	__asm__ volatile(
   1e2bc:	f386 8811 	msr	BASEPRI, r6
   1e2c0:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1e2c4:	68ab      	ldr	r3, [r5, #8]
   1e2c6:	42a3      	cmp	r3, r4
   1e2c8:	d103      	bne.n	1e2d2 <z_impl_k_thread_suspend+0x5e>
}
   1e2ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1e2ce:	f005 bffd 	b.w	242cc <z_reschedule_unlocked>
}
   1e2d2:	bd70      	pop	{r4, r5, r6, pc}
   1e2d4:	2000411c 	.word	0x2000411c
   1e2d8:	200040f0 	.word	0x200040f0

0001e2dc <z_thread_single_abort>:
{
   1e2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e2e0:	4604      	mov	r4, r0
	__asm__ volatile(
   1e2e2:	f04f 0320 	mov.w	r3, #32
   1e2e6:	f3ef 8211 	mrs	r2, BASEPRI
   1e2ea:	f383 8811 	msr	BASEPRI, r3
   1e2ee:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   1e2f2:	7b43      	ldrb	r3, [r0, #13]
   1e2f4:	f013 0f28 	tst.w	r3, #40	; 0x28
   1e2f8:	d005      	beq.n	1e306 <z_thread_single_abort+0x2a>
	__asm__ volatile(
   1e2fa:	f382 8811 	msr	BASEPRI, r2
   1e2fe:	f3bf 8f6f 	isb	sy
}
   1e302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1e306:	f043 0320 	orr.w	r3, r3, #32
   1e30a:	7343      	strb	r3, [r0, #13]
   1e30c:	f382 8811 	msr	BASEPRI, r2
   1e310:	f3bf 8f6f 	isb	sy
   1e314:	3018      	adds	r0, #24
   1e316:	f006 f936 	bl	24586 <z_abort_timeout>
	__asm__ volatile(
   1e31a:	f04f 0320 	mov.w	r3, #32
   1e31e:	f3ef 8611 	mrs	r6, BASEPRI
   1e322:	f383 8811 	msr	BASEPRI, r3
   1e326:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1e32a:	7b63      	ldrb	r3, [r4, #13]
   1e32c:	06d8      	lsls	r0, r3, #27
   1e32e:	d116      	bne.n	1e35e <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   1e330:	69a2      	ldr	r2, [r4, #24]
   1e332:	b9a2      	cbnz	r2, 1e35e <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   1e334:	0619      	lsls	r1, r3, #24
   1e336:	d507      	bpl.n	1e348 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   1e338:	4826      	ldr	r0, [pc, #152]	; (1e3d4 <z_thread_single_abort+0xf8>)
   1e33a:	4621      	mov	r1, r4
   1e33c:	f7ff fe6e 	bl	1e01c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1e340:	7b63      	ldrb	r3, [r4, #13]
   1e342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e346:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1e348:	4b23      	ldr	r3, [pc, #140]	; (1e3d8 <z_thread_single_abort+0xfc>)
   1e34a:	6898      	ldr	r0, [r3, #8]
   1e34c:	1b02      	subs	r2, r0, r4
   1e34e:	4250      	negs	r0, r2
   1e350:	4150      	adcs	r0, r2
   1e352:	f7ff fe79 	bl	1e048 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1e356:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   1e35a:	2700      	movs	r7, #0
   1e35c:	e01e      	b.n	1e39c <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   1e35e:	079b      	lsls	r3, r3, #30
   1e360:	d5f9      	bpl.n	1e356 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1e362:	68a0      	ldr	r0, [r4, #8]
   1e364:	4621      	mov	r1, r4
   1e366:	f7ff fe59 	bl	1e01c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e36a:	7b63      	ldrb	r3, [r4, #13]
   1e36c:	f023 0302 	bic.w	r3, r3, #2
   1e370:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1e372:	2300      	movs	r3, #0
   1e374:	60a3      	str	r3, [r4, #8]
   1e376:	e7ee      	b.n	1e356 <z_thread_single_abort+0x7a>
   1e378:	f105 0018 	add.w	r0, r5, #24
   1e37c:	f006 f903 	bl	24586 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1e380:	68a8      	ldr	r0, [r5, #8]
   1e382:	4629      	mov	r1, r5
   1e384:	f7ff fe4a 	bl	1e01c <z_priq_dumb_remove>
   1e388:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1e38a:	60af      	str	r7, [r5, #8]
   1e38c:	f023 0302 	bic.w	r3, r3, #2
   1e390:	736b      	strb	r3, [r5, #13]
   1e392:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   1e396:	4628      	mov	r0, r5
   1e398:	f7ff fe9a 	bl	1e0d0 <ready_thread>
	return list->head == list;
   1e39c:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e39e:	4545      	cmp	r5, r8
   1e3a0:	d001      	beq.n	1e3a6 <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1e3a2:	2d00      	cmp	r5, #0
   1e3a4:	d1e8      	bne.n	1e378 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   1e3a6:	4b0c      	ldr	r3, [pc, #48]	; (1e3d8 <z_thread_single_abort+0xfc>)
   1e3a8:	689a      	ldr	r2, [r3, #8]
   1e3aa:	4b0c      	ldr	r3, [pc, #48]	; (1e3dc <z_thread_single_abort+0x100>)
   1e3ac:	429a      	cmp	r2, r3
   1e3ae:	d102      	bne.n	1e3b6 <z_thread_single_abort+0xda>
			update_cache(1);
   1e3b0:	2001      	movs	r0, #1
   1e3b2:	f7ff fe49 	bl	1e048 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   1e3b6:	7b63      	ldrb	r3, [r4, #13]
   1e3b8:	f043 0308 	orr.w	r3, r3, #8
   1e3bc:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1e3be:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   1e3c0:	f386 8811 	msr	BASEPRI, r6
   1e3c4:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1e3c8:	2b00      	cmp	r3, #0
   1e3ca:	d09a      	beq.n	1e302 <z_thread_single_abort+0x26>
		fn_abort(thread);
   1e3cc:	4620      	mov	r0, r4
}
   1e3ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   1e3d2:	4718      	bx	r3
   1e3d4:	2000411c 	.word	0x2000411c
   1e3d8:	200040f0 	.word	0x200040f0
   1e3dc:	200013b8 	.word	0x200013b8

0001e3e0 <unready_thread>:
{
   1e3e0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1e3e2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1e3e6:	2b00      	cmp	r3, #0
{
   1e3e8:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1e3ea:	da06      	bge.n	1e3fa <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1e3ec:	4807      	ldr	r0, [pc, #28]	; (1e40c <unready_thread+0x2c>)
   1e3ee:	f7ff fe15 	bl	1e01c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1e3f2:	7b4b      	ldrb	r3, [r1, #13]
   1e3f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e3f8:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1e3fa:	4b05      	ldr	r3, [pc, #20]	; (1e410 <unready_thread+0x30>)
   1e3fc:	6898      	ldr	r0, [r3, #8]
   1e3fe:	1a43      	subs	r3, r0, r1
   1e400:	4258      	negs	r0, r3
   1e402:	4158      	adcs	r0, r3
}
   1e404:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1e408:	f7ff be1e 	b.w	1e048 <update_cache>
   1e40c:	2000411c 	.word	0x2000411c
   1e410:	200040f0 	.word	0x200040f0

0001e414 <pend>:
{
   1e414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e418:	4606      	mov	r6, r0
   1e41a:	4614      	mov	r4, r2
   1e41c:	461d      	mov	r5, r3
	__asm__ volatile(
   1e41e:	f04f 0320 	mov.w	r3, #32
   1e422:	f3ef 8711 	mrs	r7, BASEPRI
   1e426:	f383 8811 	msr	BASEPRI, r3
   1e42a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1e42e:	f005 ffb3 	bl	24398 <add_to_waitq_locked>
	__asm__ volatile(
   1e432:	f387 8811 	msr	BASEPRI, r7
   1e436:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e43a:	1c6b      	adds	r3, r5, #1
   1e43c:	bf08      	it	eq
   1e43e:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1e442:	d008      	beq.n	1e456 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1e444:	4622      	mov	r2, r4
   1e446:	462b      	mov	r3, r5
   1e448:	f106 0018 	add.w	r0, r6, #24
   1e44c:	4903      	ldr	r1, [pc, #12]	; (1e45c <pend+0x48>)
}
   1e44e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e452:	f000 bb2d 	b.w	1eab0 <z_add_timeout>
   1e456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e45a:	bf00      	nop
   1e45c:	00024359 	.word	0x00024359

0001e460 <z_pend_curr>:
{
   1e460:	b510      	push	{r4, lr}
	pending_current = _current;
   1e462:	4b07      	ldr	r3, [pc, #28]	; (1e480 <z_pend_curr+0x20>)
   1e464:	6898      	ldr	r0, [r3, #8]
   1e466:	4b07      	ldr	r3, [pc, #28]	; (1e484 <z_pend_curr+0x24>)
{
   1e468:	460c      	mov	r4, r1
	pending_current = _current;
   1e46a:	6018      	str	r0, [r3, #0]
{
   1e46c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1e46e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1e472:	f7ff ffcf 	bl	1e414 <pend>
   1e476:	4620      	mov	r0, r4
}
   1e478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e47c:	f7e9 b910 	b.w	76a0 <arch_swap>
   1e480:	200040f0 	.word	0x200040f0
   1e484:	20004124 	.word	0x20004124

0001e488 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   1e488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e48c:	4605      	mov	r5, r0
   1e48e:	460f      	mov	r7, r1
#else
	ticks += _TICK_ALIGN;
	timeout = Z_TIMEOUT_TICKS(ticks);
#endif

	expected_wakeup_ticks = ticks + z_tick_get_32();
   1e490:	f006 f8b9 	bl	24606 <z_tick_get_32>
   1e494:	4604      	mov	r4, r0
	__asm__ volatile(
   1e496:	f04f 0320 	mov.w	r3, #32
   1e49a:	f3ef 8811 	mrs	r8, BASEPRI
   1e49e:	f383 8811 	msr	BASEPRI, r3
   1e4a2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1e4a6:	4e12      	ldr	r6, [pc, #72]	; (1e4f0 <z_tick_sleep.part.0+0x68>)
   1e4a8:	4b12      	ldr	r3, [pc, #72]	; (1e4f4 <z_tick_sleep.part.0+0x6c>)
   1e4aa:	68b0      	ldr	r0, [r6, #8]
   1e4ac:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1e4ae:	f7ff ff97 	bl	1e3e0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1e4b2:	68b0      	ldr	r0, [r6, #8]
   1e4b4:	4910      	ldr	r1, [pc, #64]	; (1e4f8 <z_tick_sleep.part.0+0x70>)
   1e4b6:	462a      	mov	r2, r5
   1e4b8:	463b      	mov	r3, r7
   1e4ba:	3018      	adds	r0, #24
   1e4bc:	f000 faf8 	bl	1eab0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1e4c0:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1e4c2:	7b53      	ldrb	r3, [r2, #13]
   1e4c4:	f043 0310 	orr.w	r3, r3, #16
   1e4c8:	7353      	strb	r3, [r2, #13]
   1e4ca:	4640      	mov	r0, r8
   1e4cc:	f7e9 f8e8 	bl	76a0 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1e4d0:	f006 f899 	bl	24606 <z_tick_get_32>
	expected_wakeup_ticks = ticks + z_tick_get_32();
   1e4d4:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1e4d6:	1a24      	subs	r4, r4, r0
   1e4d8:	f04f 0500 	mov.w	r5, #0
   1e4dc:	f165 0500 	sbc.w	r5, r5, #0
   1e4e0:	2c00      	cmp	r4, #0
   1e4e2:	f175 0300 	sbcs.w	r3, r5, #0
   1e4e6:	bfb8      	it	lt
   1e4e8:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   1e4ea:	4620      	mov	r0, r4
   1e4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e4f0:	200040f0 	.word	0x200040f0
   1e4f4:	20004124 	.word	0x20004124
   1e4f8:	00024359 	.word	0x00024359

0001e4fc <z_set_prio>:
{
   1e4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e500:	4604      	mov	r4, r0
   1e502:	f04f 0320 	mov.w	r3, #32
   1e506:	f3ef 8811 	mrs	r8, BASEPRI
   1e50a:	f383 8811 	msr	BASEPRI, r3
   1e50e:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1e512:	7b43      	ldrb	r3, [r0, #13]
   1e514:	06db      	lsls	r3, r3, #27
   1e516:	b24e      	sxtb	r6, r1
   1e518:	d12e      	bne.n	1e578 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   1e51a:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1e51c:	bb65      	cbnz	r5, 1e578 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1e51e:	4f18      	ldr	r7, [pc, #96]	; (1e580 <z_set_prio+0x84>)
   1e520:	4621      	mov	r1, r4
   1e522:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1e526:	f7ff fd79 	bl	1e01c <z_priq_dumb_remove>
	return list->head == list;
   1e52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e52c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
				thread->base.prio = prio;
   1e52e:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e530:	4283      	cmp	r3, r0
   1e532:	bf18      	it	ne
   1e534:	461d      	movne	r5, r3
   1e536:	2d00      	cmp	r5, #0
   1e538:	bf38      	it	cc
   1e53a:	2500      	movcc	r5, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e53c:	b1b5      	cbz	r5, 1e56c <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1e53e:	f995 100e 	ldrsb.w	r1, [r5, #14]
   1e542:	42b1      	cmp	r1, r6
   1e544:	dc03      	bgt.n	1e54e <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   1e546:	42aa      	cmp	r2, r5
   1e548:	d010      	beq.n	1e56c <z_set_prio+0x70>
   1e54a:	682d      	ldr	r5, [r5, #0]
   1e54c:	e7f6      	b.n	1e53c <z_set_prio+0x40>
	node->prev = successor->prev;
   1e54e:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   1e550:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   1e554:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1e556:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1e558:	2001      	movs	r0, #1
   1e55a:	f7ff fd75 	bl	1e048 <update_cache>
   1e55e:	2001      	movs	r0, #1
	__asm__ volatile(
   1e560:	f388 8811 	msr	BASEPRI, r8
   1e564:	f3bf 8f6f 	isb	sy
}
   1e568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   1e56c:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   1e570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e572:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e574:	633c      	str	r4, [r7, #48]	; 0x30
}
   1e576:	e7ef      	b.n	1e558 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1e578:	73a6      	strb	r6, [r4, #14]
   1e57a:	2000      	movs	r0, #0
   1e57c:	e7f0      	b.n	1e560 <z_set_prio+0x64>
   1e57e:	bf00      	nop
   1e580:	200040f0 	.word	0x200040f0

0001e584 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1e584:	4b04      	ldr	r3, [pc, #16]	; (1e598 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1e586:	2100      	movs	r1, #0
   1e588:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1e58c:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1e590:	4608      	mov	r0, r1
   1e592:	f7ff bcf1 	b.w	1df78 <k_sched_time_slice_set>
   1e596:	bf00      	nop
   1e598:	200040f0 	.word	0x200040f0

0001e59c <z_impl_k_yield>:
{
   1e59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1e59e:	4c24      	ldr	r4, [pc, #144]	; (1e630 <z_impl_k_yield+0x94>)
   1e5a0:	4b24      	ldr	r3, [pc, #144]	; (1e634 <z_impl_k_yield+0x98>)
   1e5a2:	68a2      	ldr	r2, [r4, #8]
   1e5a4:	429a      	cmp	r2, r3
   1e5a6:	d030      	beq.n	1e60a <z_impl_k_yield+0x6e>
	__asm__ volatile(
   1e5a8:	f04f 0320 	mov.w	r3, #32
   1e5ac:	f3ef 8511 	mrs	r5, BASEPRI
   1e5b0:	f383 8811 	msr	BASEPRI, r3
   1e5b4:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1e5b8:	68a1      	ldr	r1, [r4, #8]
   1e5ba:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1e5be:	f7ff fd2d 	bl	1e01c <z_priq_dumb_remove>
	return list->head == list;
   1e5c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1e5c4:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e5c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e5c8:	4283      	cmp	r3, r0
   1e5ca:	bf08      	it	eq
   1e5cc:	2300      	moveq	r3, #0
   1e5ce:	2b00      	cmp	r3, #0
   1e5d0:	bf38      	it	cc
   1e5d2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e5d4:	b32b      	cbz	r3, 1e622 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   1e5d6:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1e5da:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1e5de:	42b7      	cmp	r7, r6
   1e5e0:	db03      	blt.n	1e5ea <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1e5e2:	428b      	cmp	r3, r1
   1e5e4:	d01d      	beq.n	1e622 <z_impl_k_yield+0x86>
   1e5e6:	681b      	ldr	r3, [r3, #0]
   1e5e8:	e7f4      	b.n	1e5d4 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1e5ea:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1e5ec:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1e5f0:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1e5f2:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   1e5f4:	7b53      	ldrb	r3, [r2, #13]
   1e5f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1e5fa:	7353      	strb	r3, [r2, #13]
			update_cache(1);
   1e5fc:	2001      	movs	r0, #1
   1e5fe:	f7ff fd23 	bl	1e048 <update_cache>
	__asm__ volatile(
   1e602:	f385 8811 	msr	BASEPRI, r5
   1e606:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1e60a:	f04f 0320 	mov.w	r3, #32
   1e60e:	f3ef 8011 	mrs	r0, BASEPRI
   1e612:	f383 8811 	msr	BASEPRI, r3
   1e616:	f3bf 8f6f 	isb	sy
}
   1e61a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1e61e:	f7e9 b83f 	b.w	76a0 <arch_swap>
	node->prev = list->tail;
   1e622:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   1e626:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e628:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1e62a:	6322      	str	r2, [r4, #48]	; 0x30
}
   1e62c:	e7e2      	b.n	1e5f4 <z_impl_k_yield+0x58>
   1e62e:	bf00      	nop
   1e630:	200040f0 	.word	0x200040f0
   1e634:	200013b8 	.word	0x200013b8

0001e638 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e638:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1e63c:	bf08      	it	eq
   1e63e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1e642:	b508      	push	{r3, lr}
   1e644:	4602      	mov	r2, r0
   1e646:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e648:	d106      	bne.n	1e658 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   1e64a:	4b0b      	ldr	r3, [pc, #44]	; (1e678 <z_impl_k_sleep+0x40>)
   1e64c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1e64e:	f7ff fe11 	bl	1e274 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1e652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1e656:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   1e658:	4313      	orrs	r3, r2
   1e65a:	d10a      	bne.n	1e672 <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   1e65c:	f7ff ff9e 	bl	1e59c <z_impl_k_yield>
		return 0;
   1e660:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
   1e662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1e666:	fb80 2303 	smull	r2, r3, r0, r3
   1e66a:	0bd0      	lsrs	r0, r2, #15
   1e66c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1e670:	e7f1      	b.n	1e656 <z_impl_k_sleep+0x1e>
   1e672:	f7ff ff09 	bl	1e488 <z_tick_sleep.part.0>
   1e676:	e7f4      	b.n	1e662 <z_impl_k_sleep+0x2a>
   1e678:	200040f0 	.word	0x200040f0

0001e67c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1e67c:	4b01      	ldr	r3, [pc, #4]	; (1e684 <z_impl_k_current_get+0x8>)
   1e67e:	6898      	ldr	r0, [r3, #8]
   1e680:	4770      	bx	lr
   1e682:	bf00      	nop
   1e684:	200040f0 	.word	0x200040f0

0001e688 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1e688:	b538      	push	{r3, r4, r5, lr}
   1e68a:	4604      	mov	r4, r0
   1e68c:	f04f 0320 	mov.w	r3, #32
   1e690:	f3ef 8511 	mrs	r5, BASEPRI
   1e694:	f383 8811 	msr	BASEPRI, r3
   1e698:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1e69c:	f005 fea7 	bl	243ee <z_unpend_first_thread>

	if (thread != NULL) {
   1e6a0:	b150      	cbz	r0, 1e6b8 <z_impl_k_sem_give+0x30>
   1e6a2:	2200      	movs	r2, #0
   1e6a4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1e6a8:	f005 fe46 	bl	24338 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1e6ac:	4629      	mov	r1, r5
   1e6ae:	4808      	ldr	r0, [pc, #32]	; (1e6d0 <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1e6b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1e6b4:	f7ff bc8c 	b.w	1dfd0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1e6b8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1e6bc:	429a      	cmp	r2, r3
   1e6be:	bf18      	it	ne
   1e6c0:	3301      	addne	r3, #1
   1e6c2:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1e6c4:	2102      	movs	r1, #2
   1e6c6:	f104 0010 	add.w	r0, r4, #16
   1e6ca:	f006 f93d 	bl	24948 <z_handle_obj_poll_events>
}
   1e6ce:	e7ed      	b.n	1e6ac <z_impl_k_sem_give+0x24>
   1e6d0:	20006890 	.word	0x20006890

0001e6d4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1e6d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e6d6:	4614      	mov	r4, r2
   1e6d8:	461d      	mov	r5, r3
   1e6da:	f04f 0320 	mov.w	r3, #32
   1e6de:	f3ef 8111 	mrs	r1, BASEPRI
   1e6e2:	f383 8811 	msr	BASEPRI, r3
   1e6e6:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1e6ea:	6883      	ldr	r3, [r0, #8]
   1e6ec:	b143      	cbz	r3, 1e700 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1e6ee:	3b01      	subs	r3, #1
   1e6f0:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1e6f2:	f381 8811 	msr	BASEPRI, r1
   1e6f6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1e6fa:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1e6fc:	b003      	add	sp, #12
   1e6fe:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e700:	ea54 0305 	orrs.w	r3, r4, r5
   1e704:	d106      	bne.n	1e714 <z_impl_k_sem_take+0x40>
   1e706:	f381 8811 	msr	BASEPRI, r1
   1e70a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1e70e:	f06f 000f 	mvn.w	r0, #15
   1e712:	e7f3      	b.n	1e6fc <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1e714:	4602      	mov	r2, r0
   1e716:	e9cd 4500 	strd	r4, r5, [sp]
   1e71a:	4802      	ldr	r0, [pc, #8]	; (1e724 <z_impl_k_sem_take+0x50>)
   1e71c:	f7ff fea0 	bl	1e460 <z_pend_curr>
	return ret;
   1e720:	e7ec      	b.n	1e6fc <z_impl_k_sem_take+0x28>
   1e722:	bf00      	nop
   1e724:	20006890 	.word	0x20006890

0001e728 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1e728:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1e72a:	4c08      	ldr	r4, [pc, #32]	; (1e74c <k_sys_work_q_init+0x24>)
   1e72c:	4908      	ldr	r1, [pc, #32]	; (1e750 <k_sys_work_q_init+0x28>)
   1e72e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e732:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1e736:	4620      	mov	r0, r4
   1e738:	f000 f8de 	bl	1e8f8 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1e73c:	4905      	ldr	r1, [pc, #20]	; (1e754 <k_sys_work_q_init+0x2c>)
   1e73e:	f104 0018 	add.w	r0, r4, #24
   1e742:	f005 fea3 	bl	2448c <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1e746:	2000      	movs	r0, #0
   1e748:	bd10      	pop	{r4, pc}
   1e74a:	bf00      	nop
   1e74c:	200014c8 	.word	0x200014c8
   1e750:	2000ace0 	.word	0x2000ace0
   1e754:	00028a67 	.word	0x00028a67

0001e758 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1e758:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   1e75c:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   1e760:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1e764:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1e766:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1e768:	2504      	movs	r5, #4
   1e76a:	7345      	strb	r5, [r0, #13]
{
   1e76c:	460f      	mov	r7, r1

	thread_base->prio = priority;
   1e76e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1e770:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1e772:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
   1e774:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e776:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   1e778:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1e77a:	f026 0607 	bic.w	r6, r6, #7

#define K_KERNEL_STACK_SIZEOF(sym) (sizeof(sym) - K_KERNEL_STACK_RESERVED)

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1e77e:	3720      	adds	r7, #32
	node->prev = NULL;
   1e780:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1e784:	e9c0 761b 	strd	r7, r6, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
   1e788:	6745      	str	r5, [r0, #116]	; 0x74
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1e78a:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e78e:	9202      	str	r2, [sp, #8]
   1e790:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1e792:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1e794:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e796:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e798:	9200      	str	r2, [sp, #0]
   1e79a:	4642      	mov	r2, r8
{
   1e79c:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1e79e:	f7e9 f82d 	bl	77fc <arch_new_thread>
	if (!_current) {
   1e7a2:	4b05      	ldr	r3, [pc, #20]	; (1e7b8 <z_setup_new_thread+0x60>)
   1e7a4:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   1e7a6:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   1e7aa:	b103      	cbz	r3, 1e7ae <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1e7ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	return stack_ptr;
   1e7ae:	67a3      	str	r3, [r4, #120]	; 0x78
}
   1e7b0:	4640      	mov	r0, r8
   1e7b2:	b004      	add	sp, #16
   1e7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e7b8:	200040f0 	.word	0x200040f0

0001e7bc <z_impl_k_thread_create>:
{
   1e7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e7be:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1e7c0:	2500      	movs	r5, #0
   1e7c2:	9505      	str	r5, [sp, #20]
   1e7c4:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1e7c6:	9504      	str	r5, [sp, #16]
   1e7c8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1e7ca:	9503      	str	r5, [sp, #12]
   1e7cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1e7ce:	9502      	str	r5, [sp, #8]
{
   1e7d0:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1e7d4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1e7d6:	9501      	str	r5, [sp, #4]
   1e7d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1e7da:	9500      	str	r5, [sp, #0]
{
   1e7dc:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1e7de:	f7ff ffbb 	bl	1e758 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1e7e2:	1c7b      	adds	r3, r7, #1
   1e7e4:	bf08      	it	eq
   1e7e6:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1e7ea:	d005      	beq.n	1e7f8 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e7ec:	ea56 0307 	orrs.w	r3, r6, r7
   1e7f0:	d105      	bne.n	1e7fe <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1e7f2:	4620      	mov	r0, r4
   1e7f4:	f7ff fca4 	bl	1e140 <z_sched_start>
}
   1e7f8:	4620      	mov	r0, r4
   1e7fa:	b007      	add	sp, #28
   1e7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1e7fe:	4904      	ldr	r1, [pc, #16]	; (1e810 <z_impl_k_thread_create+0x54>)
   1e800:	4632      	mov	r2, r6
   1e802:	463b      	mov	r3, r7
   1e804:	f104 0018 	add.w	r0, r4, #24
   1e808:	f000 f952 	bl	1eab0 <z_add_timeout>
   1e80c:	e7f4      	b.n	1e7f8 <z_impl_k_thread_create+0x3c>
   1e80e:	bf00      	nop
   1e810:	00024359 	.word	0x00024359

0001e814 <z_init_static_threads>:
{
   1e814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1e818:	4e2a      	ldr	r6, [pc, #168]	; (1e8c4 <z_init_static_threads+0xb0>)
   1e81a:	4d2b      	ldr	r5, [pc, #172]	; (1e8c8 <z_init_static_threads+0xb4>)
{
   1e81c:	b086      	sub	sp, #24
   1e81e:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1e820:	42b5      	cmp	r5, r6
   1e822:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1e826:	d310      	bcc.n	1e84a <z_init_static_threads+0x36>
	k_sched_lock();
   1e828:	f7ff fbe4 	bl	1dff4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1e82c:	4c26      	ldr	r4, [pc, #152]	; (1e8c8 <z_init_static_threads+0xb4>)
   1e82e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1e8cc <z_init_static_threads+0xb8>
   1e832:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1e836:	f240 36e7 	movw	r6, #999	; 0x3e7
   1e83a:	2700      	movs	r7, #0
   1e83c:	4544      	cmp	r4, r8
   1e83e:	d321      	bcc.n	1e884 <z_init_static_threads+0x70>
}
   1e840:	b006      	add	sp, #24
   1e842:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1e846:	f7ff bc27 	b.w	1e098 <k_sched_unlock>
		z_setup_new_thread(
   1e84a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1e84e:	9305      	str	r3, [sp, #20]
   1e850:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1e854:	9304      	str	r3, [sp, #16]
   1e856:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1e85a:	9303      	str	r3, [sp, #12]
   1e85c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1e860:	9302      	str	r3, [sp, #8]
   1e862:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1e866:	9301      	str	r3, [sp, #4]
   1e868:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1e86c:	9300      	str	r3, [sp, #0]
   1e86e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1e872:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1e876:	f7ff ff6f 	bl	1e758 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1e87a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1e87e:	65dd      	str	r5, [r3, #92]	; 0x5c
   1e880:	4625      	mov	r5, r4
   1e882:	e7cd      	b.n	1e820 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1e884:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e886:	1c5a      	adds	r2, r3, #1
   1e888:	d00d      	beq.n	1e8a6 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1e88a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1e88e:	4630      	mov	r0, r6
   1e890:	4639      	mov	r1, r7
   1e892:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e896:	42b9      	cmp	r1, r7
   1e898:	bf08      	it	eq
   1e89a:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1e89c:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e89e:	d104      	bne.n	1e8aa <z_init_static_threads+0x96>
	z_sched_start(thread);
   1e8a0:	4628      	mov	r0, r5
   1e8a2:	f7ff fc4d 	bl	1e140 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1e8a6:	3430      	adds	r4, #48	; 0x30
   1e8a8:	e7c8      	b.n	1e83c <z_init_static_threads+0x28>
   1e8aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e8ae:	2300      	movs	r3, #0
   1e8b0:	f7e1 fc26 	bl	100 <__aeabi_uldivmod>
   1e8b4:	4602      	mov	r2, r0
   1e8b6:	460b      	mov	r3, r1
   1e8b8:	f105 0018 	add.w	r0, r5, #24
   1e8bc:	4651      	mov	r1, sl
   1e8be:	f000 f8f7 	bl	1eab0 <z_add_timeout>
   1e8c2:	e7f0      	b.n	1e8a6 <z_init_static_threads+0x92>
   1e8c4:	200007c0 	.word	0x200007c0
   1e8c8:	200007c0 	.word	0x200007c0
   1e8cc:	00024359 	.word	0x00024359

0001e8d0 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   1e8d0:	b508      	push	{r3, lr}
	__asm__ volatile(
   1e8d2:	f04f 0320 	mov.w	r3, #32
   1e8d6:	f3ef 8411 	mrs	r4, BASEPRI
   1e8da:	f383 8811 	msr	BASEPRI, r3
   1e8de:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   1e8e2:	4b04      	ldr	r3, [pc, #16]	; (1e8f4 <z_self_abort+0x24>)
   1e8e4:	6898      	ldr	r0, [r3, #8]
   1e8e6:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   1e8e8:	f7ff fcc4 	bl	1e274 <z_impl_k_thread_suspend>
   1e8ec:	4620      	mov	r0, r4
   1e8ee:	f7e8 fed7 	bl	76a0 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
   1e8f2:	bf00      	nop
   1e8f4:	200040f0 	.word	0x200040f0

0001e8f8 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1e8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e8fc:	4604      	mov	r4, r0
   1e8fe:	b088      	sub	sp, #32
   1e900:	460d      	mov	r5, r1
   1e902:	4616      	mov	r6, r2
   1e904:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1e906:	f005 fc4f 	bl	241a8 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1e90a:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1e90e:	2200      	movs	r2, #0
   1e910:	2300      	movs	r3, #0
   1e912:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1e916:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1e91a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1e91e:	4b07      	ldr	r3, [pc, #28]	; (1e93c <k_work_q_start+0x44>)
   1e920:	9400      	str	r4, [sp, #0]
   1e922:	4632      	mov	r2, r6
   1e924:	4629      	mov	r1, r5
   1e926:	4640      	mov	r0, r8
   1e928:	f7ff ff48 	bl	1e7bc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1e92c:	4904      	ldr	r1, [pc, #16]	; (1e940 <k_work_q_start+0x48>)
   1e92e:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1e930:	b008      	add	sp, #32
   1e932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e936:	f005 bda9 	b.w	2448c <z_impl_k_thread_name_set>
   1e93a:	bf00      	nop
   1e93c:	0001f29d 	.word	0x0001f29d
   1e940:	00028a70 	.word	0x00028a70

0001e944 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1e944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e948:	4606      	mov	r6, r0
   1e94a:	460d      	mov	r5, r1
   1e94c:	4690      	mov	r8, r2
   1e94e:	4699      	mov	r9, r3
   1e950:	f04f 0320 	mov.w	r3, #32
   1e954:	f3ef 8711 	mrs	r7, BASEPRI
   1e958:	f383 8811 	msr	BASEPRI, r3
   1e95c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1e960:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1e962:	b17b      	cbz	r3, 1e984 <k_delayed_work_submit_to_queue+0x40>
   1e964:	4283      	cmp	r3, r0
   1e966:	d128      	bne.n	1e9ba <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1e968:	4628      	mov	r0, r5
   1e96a:	f005 fdb1 	bl	244d0 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   1e96e:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1e972:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1e974:	d008      	beq.n	1e988 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1e976:	2800      	cmp	r0, #0
   1e978:	da07      	bge.n	1e98a <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1e97a:	f387 8811 	msr	BASEPRI, r7
   1e97e:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1e982:	e00f      	b.n	1e9a4 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   1e984:	2800      	cmp	r0, #0
   1e986:	d0ef      	beq.n	1e968 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1e988:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e98a:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   1e98e:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1e990:	d10b      	bne.n	1e9aa <k_delayed_work_submit_to_queue+0x66>
   1e992:	f387 8811 	msr	BASEPRI, r7
   1e996:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1e99a:	4629      	mov	r1, r5
   1e99c:	4630      	mov	r0, r6
   1e99e:	f005 fd7a 	bl	24496 <k_work_submit_to_queue>
		return 0;
   1e9a2:	2400      	movs	r4, #0
}
   1e9a4:	4620      	mov	r0, r4
   1e9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1e9aa:	4905      	ldr	r1, [pc, #20]	; (1e9c0 <k_delayed_work_submit_to_queue+0x7c>)
   1e9ac:	4642      	mov	r2, r8
   1e9ae:	464b      	mov	r3, r9
   1e9b0:	f105 0010 	add.w	r0, r5, #16
   1e9b4:	f000 f87c 	bl	1eab0 <z_add_timeout>
   1e9b8:	e7df      	b.n	1e97a <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1e9ba:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1e9be:	e7dc      	b.n	1e97a <k_delayed_work_submit_to_queue+0x36>
   1e9c0:	000244c7 	.word	0x000244c7

0001e9c4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1e9c4:	4a02      	ldr	r2, [pc, #8]	; (1e9d0 <boot_banner+0xc>)
   1e9c6:	4903      	ldr	r1, [pc, #12]	; (1e9d4 <boot_banner+0x10>)
   1e9c8:	4803      	ldr	r0, [pc, #12]	; (1e9d8 <boot_banner+0x14>)
   1e9ca:	f000 bb43 	b.w	1f054 <printk>
   1e9ce:	bf00      	nop
   1e9d0:	0002670c 	.word	0x0002670c
   1e9d4:	00028a7a 	.word	0x00028a7a
   1e9d8:	00028a9b 	.word	0x00028a9b

0001e9dc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1e9dc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1e9de:	4806      	ldr	r0, [pc, #24]	; (1e9f8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1e9e0:	4a06      	ldr	r2, [pc, #24]	; (1e9fc <z_data_copy+0x20>)
   1e9e2:	4907      	ldr	r1, [pc, #28]	; (1ea00 <z_data_copy+0x24>)
   1e9e4:	1a12      	subs	r2, r2, r0
   1e9e6:	f002 fe5e 	bl	216a6 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1e9ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1e9ee:	4a05      	ldr	r2, [pc, #20]	; (1ea04 <z_data_copy+0x28>)
   1e9f0:	4905      	ldr	r1, [pc, #20]	; (1ea08 <z_data_copy+0x2c>)
   1e9f2:	4806      	ldr	r0, [pc, #24]	; (1ea0c <z_data_copy+0x30>)
   1e9f4:	f002 be57 	b.w	216a6 <memcpy>
   1e9f8:	20000000 	.word	0x20000000
   1e9fc:	20000af4 	.word	0x20000af4
   1ea00:	00028ac4 	.word	0x00028ac4
   1ea04:	00000000 	.word	0x00000000
   1ea08:	00028ac4 	.word	0x00028ac4
   1ea0c:	20000000 	.word	0x20000000

0001ea10 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   1ea10:	4b03      	ldr	r3, [pc, #12]	; (1ea20 <elapsed+0x10>)
   1ea12:	681b      	ldr	r3, [r3, #0]
   1ea14:	b90b      	cbnz	r3, 1ea1a <elapsed+0xa>
   1ea16:	f7e8 bbf7 	b.w	7208 <z_clock_elapsed>
}
   1ea1a:	2000      	movs	r0, #0
   1ea1c:	4770      	bx	lr
   1ea1e:	bf00      	nop
   1ea20:	20004130 	.word	0x20004130

0001ea24 <remove_timeout>:
{
   1ea24:	b530      	push	{r4, r5, lr}
   1ea26:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ea28:	b168      	cbz	r0, 1ea46 <remove_timeout+0x22>
   1ea2a:	4a0a      	ldr	r2, [pc, #40]	; (1ea54 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1ea2c:	6852      	ldr	r2, [r2, #4]
   1ea2e:	4290      	cmp	r0, r2
   1ea30:	d009      	beq.n	1ea46 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1ea32:	b143      	cbz	r3, 1ea46 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1ea34:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1ea38:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1ea3c:	1912      	adds	r2, r2, r4
   1ea3e:	eb45 0101 	adc.w	r1, r5, r1
   1ea42:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1ea46:	6842      	ldr	r2, [r0, #4]
   1ea48:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1ea4a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ea4c:	2300      	movs	r3, #0
	node->prev = NULL;
   1ea4e:	e9c0 3300 	strd	r3, r3, [r0]
}
   1ea52:	bd30      	pop	{r4, r5, pc}
   1ea54:	20000694 	.word	0x20000694

0001ea58 <next_timeout>:

static int32_t next_timeout(void)
{
   1ea58:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1ea5a:	4b13      	ldr	r3, [pc, #76]	; (1eaa8 <next_timeout+0x50>)
   1ea5c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ea5e:	429c      	cmp	r4, r3
   1ea60:	bf08      	it	eq
   1ea62:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1ea64:	f7ff ffd4 	bl	1ea10 <elapsed>
   1ea68:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1ea6a:	b1bc      	cbz	r4, 1ea9c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1ea6c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1ea70:	1b40      	subs	r0, r0, r5
   1ea72:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1ea76:	2801      	cmp	r0, #1
   1ea78:	f171 0300 	sbcs.w	r3, r1, #0
   1ea7c:	db11      	blt.n	1eaa2 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1ea7e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1ea82:	2300      	movs	r3, #0
   1ea84:	4282      	cmp	r2, r0
   1ea86:	eb73 0401 	sbcs.w	r4, r3, r1
   1ea8a:	da00      	bge.n	1ea8e <next_timeout+0x36>
   1ea8c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1ea8e:	4b07      	ldr	r3, [pc, #28]	; (1eaac <next_timeout+0x54>)
   1ea90:	695b      	ldr	r3, [r3, #20]
   1ea92:	b113      	cbz	r3, 1ea9a <next_timeout+0x42>
   1ea94:	4298      	cmp	r0, r3
   1ea96:	bfa8      	it	ge
   1ea98:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1ea9a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1ea9c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1eaa0:	e7f5      	b.n	1ea8e <next_timeout+0x36>
   1eaa2:	2000      	movs	r0, #0
   1eaa4:	e7f3      	b.n	1ea8e <next_timeout+0x36>
   1eaa6:	bf00      	nop
   1eaa8:	20000694 	.word	0x20000694
   1eaac:	200040f0 	.word	0x200040f0

0001eab0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1eab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eab4:	9101      	str	r1, [sp, #4]
   1eab6:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1eab8:	1c4b      	adds	r3, r1, #1
   1eaba:	bf08      	it	eq
   1eabc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1eac0:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1eac2:	d06c      	beq.n	1eb9e <z_add_timeout+0xee>
#endif

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
   1eac4:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1eac6:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
   1eaca:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1eace:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1ead2:	ebb3 0804 	subs.w	r8, r3, r4
   1ead6:	eb6b 0905 	sbc.w	r9, fp, r5
   1eada:	f1b8 0f00 	cmp.w	r8, #0
   1eade:	f179 0300 	sbcs.w	r3, r9, #0
   1eae2:	db0f      	blt.n	1eb04 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1eae4:	f7ff ff94 	bl	1ea10 <elapsed>
   1eae8:	4a33      	ldr	r2, [pc, #204]	; (1ebb8 <z_add_timeout+0x108>)
   1eaea:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1eaee:	f06f 0301 	mvn.w	r3, #1
   1eaf2:	1a5b      	subs	r3, r3, r1
   1eaf4:	eb6b 020c 	sbc.w	r2, fp, ip
   1eaf8:	1b1e      	subs	r6, r3, r4
   1eafa:	eb62 0705 	sbc.w	r7, r2, r5
   1eafe:	1a34      	subs	r4, r6, r0
   1eb00:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1eb04:	9b01      	ldr	r3, [sp, #4]
   1eb06:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   1eb0a:	f04f 0320 	mov.w	r3, #32
   1eb0e:	f3ef 8611 	mrs	r6, BASEPRI
   1eb12:	f383 8811 	msr	BASEPRI, r3
   1eb16:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1eb1a:	f7ff ff79 	bl	1ea10 <elapsed>
	ticks = MAX(1, ticks);
   1eb1e:	2c01      	cmp	r4, #1
   1eb20:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
   1eb24:	4b25      	ldr	r3, [pc, #148]	; (1ebbc <z_add_timeout+0x10c>)
   1eb26:	bfb8      	it	lt
   1eb28:	2401      	movlt	r4, #1
   1eb2a:	681a      	ldr	r2, [r3, #0]
   1eb2c:	bfb8      	it	lt
   1eb2e:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
   1eb30:	1824      	adds	r4, r4, r0
   1eb32:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1eb36:	429a      	cmp	r2, r3
   1eb38:	e9ca 4504 	strd	r4, r5, [sl, #16]
   1eb3c:	d001      	beq.n	1eb42 <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1eb3e:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1eb40:	b952      	cbnz	r2, 1eb58 <z_add_timeout+0xa8>
	node->prev = list->tail;
   1eb42:	685a      	ldr	r2, [r3, #4]
   1eb44:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   1eb48:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1eb4a:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   1eb4e:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1eb52:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1eb56:	e014      	b.n	1eb82 <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
   1eb58:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   1eb5c:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1eb60:	4544      	cmp	r4, r8
   1eb62:	eb75 0109 	sbcs.w	r1, r5, r9
   1eb66:	da1d      	bge.n	1eba4 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
   1eb68:	ebb8 0004 	subs.w	r0, r8, r4
   1eb6c:	eb69 0105 	sbc.w	r1, r9, r5
   1eb70:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   1eb74:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1eb76:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   1eb7a:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1eb7e:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   1eb82:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1eb84:	429a      	cmp	r2, r3
   1eb86:	d006      	beq.n	1eb96 <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1eb88:	4592      	cmp	sl, r2
   1eb8a:	d104      	bne.n	1eb96 <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
   1eb8c:	f7ff ff64 	bl	1ea58 <next_timeout>
   1eb90:	2100      	movs	r1, #0
   1eb92:	f7e8 fb07 	bl	71a4 <z_clock_set_timeout>
	__asm__ volatile(
   1eb96:	f386 8811 	msr	BASEPRI, r6
   1eb9a:	f3bf 8f6f 	isb	sy
		}
	}
}
   1eb9e:	b003      	add	sp, #12
   1eba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1eba4:	ebb4 0008 	subs.w	r0, r4, r8
   1eba8:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   1ebac:	42ba      	cmp	r2, r7
   1ebae:	e9ca 0104 	strd	r0, r1, [sl, #16]
   1ebb2:	d0c6      	beq.n	1eb42 <z_add_timeout+0x92>
   1ebb4:	6812      	ldr	r2, [r2, #0]
   1ebb6:	e7c3      	b.n	1eb40 <z_add_timeout+0x90>
   1ebb8:	20001568 	.word	0x20001568
   1ebbc:	20000694 	.word	0x20000694

0001ebc0 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   1ebc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ebc4:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1ebc6:	f7ff fb13 	bl	1e1f0 <z_time_slice>
	__asm__ volatile(
   1ebca:	f04f 0320 	mov.w	r3, #32
   1ebce:	f3ef 8411 	mrs	r4, BASEPRI
   1ebd2:	f383 8811 	msr	BASEPRI, r3
   1ebd6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1ebda:	4d2c      	ldr	r5, [pc, #176]	; (1ec8c <z_clock_announce+0xcc>)
   1ebdc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1ec90 <z_clock_announce+0xd0>
	return list->head == list;
   1ebe0:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1ec94 <z_clock_announce+0xd4>
   1ebe4:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1ebe6:	4651      	mov	r1, sl
   1ebe8:	f8d5 c000 	ldr.w	ip, [r5]
   1ebec:	f8db 0000 	ldr.w	r0, [fp]
   1ebf0:	4662      	mov	r2, ip
   1ebf2:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ebf4:	4558      	cmp	r0, fp
   1ebf6:	e9da 8900 	ldrd	r8, r9, [sl]
   1ebfa:	e9cd 2300 	strd	r2, r3, [sp]
   1ebfe:	d00d      	beq.n	1ec1c <z_clock_announce+0x5c>
   1ec00:	b160      	cbz	r0, 1ec1c <z_clock_announce+0x5c>
   1ec02:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1ec06:	45b4      	cmp	ip, r6
   1ec08:	41bb      	sbcs	r3, r7
   1ec0a:	da1e      	bge.n	1ec4a <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1ec0c:	9b00      	ldr	r3, [sp, #0]
   1ec0e:	ebb6 0c03 	subs.w	ip, r6, r3
   1ec12:	9b01      	ldr	r3, [sp, #4]
   1ec14:	eb67 0603 	sbc.w	r6, r7, r3
   1ec18:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1ec1c:	9b00      	ldr	r3, [sp, #0]
   1ec1e:	eb13 0208 	adds.w	r2, r3, r8
   1ec22:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1ec24:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1ec28:	eb43 0309 	adc.w	r3, r3, r9
   1ec2c:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1ec30:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   1ec32:	f7ff ff11 	bl	1ea58 <next_timeout>
   1ec36:	4631      	mov	r1, r6
   1ec38:	f7e8 fab4 	bl	71a4 <z_clock_set_timeout>
	__asm__ volatile(
   1ec3c:	f384 8811 	msr	BASEPRI, r4
   1ec40:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1ec44:	b003      	add	sp, #12
   1ec46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1ec4a:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1ec4e:	f04f 0200 	mov.w	r2, #0
   1ec52:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1ec56:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1ec5a:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1ec5e:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1ec62:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1ec66:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1ec68:	f7ff fedc 	bl	1ea24 <remove_timeout>
   1ec6c:	f384 8811 	msr	BASEPRI, r4
   1ec70:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1ec74:	6883      	ldr	r3, [r0, #8]
   1ec76:	4798      	blx	r3
	__asm__ volatile(
   1ec78:	f04f 0320 	mov.w	r3, #32
   1ec7c:	f3ef 8411 	mrs	r4, BASEPRI
   1ec80:	f383 8811 	msr	BASEPRI, r3
   1ec84:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1ec88:	4901      	ldr	r1, [pc, #4]	; (1ec90 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1ec8a:	e7ad      	b.n	1ebe8 <z_clock_announce+0x28>
   1ec8c:	20004130 	.word	0x20004130
   1ec90:	20001568 	.word	0x20001568
   1ec94:	20000694 	.word	0x20000694

0001ec98 <z_tick_get>:

int64_t z_tick_get(void)
{
   1ec98:	b510      	push	{r4, lr}
   1ec9a:	f04f 0320 	mov.w	r3, #32
   1ec9e:	f3ef 8411 	mrs	r4, BASEPRI
   1eca2:	f383 8811 	msr	BASEPRI, r3
   1eca6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1ecaa:	f7e8 faad 	bl	7208 <z_clock_elapsed>
   1ecae:	4b06      	ldr	r3, [pc, #24]	; (1ecc8 <z_tick_get+0x30>)
   1ecb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ecb4:	1812      	adds	r2, r2, r0
   1ecb6:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1ecba:	f384 8811 	msr	BASEPRI, r4
   1ecbe:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1ecc2:	4610      	mov	r0, r2
   1ecc4:	4619      	mov	r1, r3
   1ecc6:	bd10      	pop	{r4, pc}
   1ecc8:	20001568 	.word	0x20001568

0001eccc <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1eccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1ecce:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1ecd2:	1c56      	adds	r6, r2, #1
   1ecd4:	f143 0700 	adc.w	r7, r3, #0
   1ecd8:	2f00      	cmp	r7, #0
   1ecda:	bf08      	it	eq
   1ecdc:	2e02      	cmpeq	r6, #2
{
   1ecde:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1ece0:	d302      	bcc.n	1ece8 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ece2:	490c      	ldr	r1, [pc, #48]	; (1ed14 <z_timer_expiration_handler+0x48>)
   1ece4:	f7ff fee4 	bl	1eab0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1ece8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ecea:	3301      	adds	r3, #1
   1ecec:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1ecee:	6a23      	ldr	r3, [r4, #32]
   1ecf0:	b10b      	cbz	r3, 1ecf6 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1ecf2:	4620      	mov	r0, r4
   1ecf4:	4798      	blx	r3
	return list->head == list;
   1ecf6:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ecfa:	42a5      	cmp	r5, r4
   1ecfc:	d009      	beq.n	1ed12 <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1ecfe:	b145      	cbz	r5, 1ed12 <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1ed00:	4628      	mov	r0, r5
   1ed02:	f005 fac7 	bl	24294 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   1ed06:	4628      	mov	r0, r5
   1ed08:	f005 fb16 	bl	24338 <z_ready_thread>
   1ed0c:	2300      	movs	r3, #0
   1ed0e:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
   1ed12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ed14:	0001eccd 	.word	0x0001eccd

0001ed18 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1ed18:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1ed1c:	4619      	mov	r1, r3
   1ed1e:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1ed20:	1c4c      	adds	r4, r1, #1
{
   1ed22:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1ed24:	bf08      	it	eq
   1ed26:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1ed2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1ed2e:	4680      	mov	r8, r0
   1ed30:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1ed32:	d047      	beq.n	1edc4 <z_impl_k_timer_start+0xac>
   1ed34:	4614      	mov	r4, r2
   1ed36:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   1ed38:	ea54 0305 	orrs.w	r3, r4, r5
   1ed3c:	d016      	beq.n	1ed6c <z_impl_k_timer_start+0x54>
   1ed3e:	f06f 0301 	mvn.w	r3, #1
   1ed42:	ebb3 0a02 	subs.w	sl, r3, r2
   1ed46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ed4a:	eb63 0b05 	sbc.w	fp, r3, r5
   1ed4e:	f1ba 0f00 	cmp.w	sl, #0
   1ed52:	f17b 0300 	sbcs.w	r3, fp, #0
   1ed56:	da09      	bge.n	1ed6c <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   1ed58:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   1ed5c:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   1ed60:	2c01      	cmp	r4, #1
   1ed62:	f175 0300 	sbcs.w	r3, r5, #0
   1ed66:	bfbc      	itt	lt
   1ed68:	2401      	movlt	r4, #1
   1ed6a:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1ed6c:	f06f 0301 	mvn.w	r3, #1
   1ed70:	1a1b      	subs	r3, r3, r0
   1ed72:	9300      	str	r3, [sp, #0]
   1ed74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ed78:	eb63 0301 	sbc.w	r3, r3, r1
   1ed7c:	9301      	str	r3, [sp, #4]
   1ed7e:	e9dd 2300 	ldrd	r2, r3, [sp]
   1ed82:	2a00      	cmp	r2, #0
   1ed84:	f173 0300 	sbcs.w	r3, r3, #0
   1ed88:	da0c      	bge.n	1eda4 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1ed8a:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   1ed8e:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   1ed92:	f1b8 0f00 	cmp.w	r8, #0
   1ed96:	f179 0300 	sbcs.w	r3, r9, #0
   1ed9a:	bfbc      	itt	lt
   1ed9c:	f04f 0800 	movlt.w	r8, #0
   1eda0:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   1eda4:	4630      	mov	r0, r6
   1eda6:	f005 fbee 	bl	24586 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1edaa:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1edac:	4907      	ldr	r1, [pc, #28]	; (1edcc <z_impl_k_timer_start+0xb4>)
	timer->status = 0U;
   1edae:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1edb0:	4642      	mov	r2, r8
   1edb2:	464b      	mov	r3, r9
   1edb4:	4630      	mov	r0, r6
	timer->period = period;
   1edb6:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1edba:	b002      	add	sp, #8
   1edbc:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1edc0:	f7ff be76 	b.w	1eab0 <z_add_timeout>
}
   1edc4:	b002      	add	sp, #8
   1edc6:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1edca:	bf00      	nop
   1edcc:	0001eccd 	.word	0x0001eccd

0001edd0 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1edd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1edd4:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1edd6:	4b2a      	ldr	r3, [pc, #168]	; (1ee80 <z_impl_k_poll+0xb0>)
   1edd8:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1edda:	2301      	movs	r3, #1
   1eddc:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
   1ede0:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   1ede4:	ea52 0307 	orrs.w	r3, r2, r7
{
   1ede8:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1edea:	bf0c      	ite	eq
   1edec:	2301      	moveq	r3, #1
   1edee:	2300      	movne	r3, #0
   1edf0:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
   1edf4:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1edf6:	f005 fd37 	bl	24868 <register_events>
   1edfa:	4681      	mov	r9, r0
	__asm__ volatile(
   1edfc:	f04f 0320 	mov.w	r3, #32
   1ee00:	f3ef 8a11 	mrs	sl, BASEPRI
   1ee04:	f383 8811 	msr	BASEPRI, r3
   1ee08:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1ee0c:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
   1ee10:	b964      	cbnz	r4, 1ee2c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1ee12:	4601      	mov	r1, r0
   1ee14:	4652      	mov	r2, sl
   1ee16:	4640      	mov	r0, r8
   1ee18:	f005 fc52 	bl	246c0 <clear_event_registrations>
	__asm__ volatile(
   1ee1c:	f38a 8811 	msr	BASEPRI, sl
   1ee20:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1ee24:	4620      	mov	r0, r4
   1ee26:	b004      	add	sp, #16
   1ee28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1ee2c:	2300      	movs	r3, #0
   1ee2e:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ee32:	ea56 0307 	orrs.w	r3, r6, r7
   1ee36:	d106      	bne.n	1ee46 <z_impl_k_poll+0x76>
   1ee38:	f38a 8811 	msr	BASEPRI, sl
   1ee3c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1ee40:	f06f 040a 	mvn.w	r4, #10
   1ee44:	e7ee      	b.n	1ee24 <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1ee46:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1ee48:	e9cd 6700 	strd	r6, r7, [sp]
   1ee4c:	4651      	mov	r1, sl
   1ee4e:	480d      	ldr	r0, [pc, #52]	; (1ee84 <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1ee50:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1ee54:	f7ff fb04 	bl	1e460 <z_pend_curr>
   1ee58:	4604      	mov	r4, r0
	__asm__ volatile(
   1ee5a:	f04f 0320 	mov.w	r3, #32
   1ee5e:	f3ef 8511 	mrs	r5, BASEPRI
   1ee62:	f383 8811 	msr	BASEPRI, r3
   1ee66:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1ee6a:	462a      	mov	r2, r5
   1ee6c:	4649      	mov	r1, r9
   1ee6e:	4640      	mov	r0, r8
   1ee70:	f005 fc26 	bl	246c0 <clear_event_registrations>
	__asm__ volatile(
   1ee74:	f385 8811 	msr	BASEPRI, r5
   1ee78:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1ee7c:	e7d2      	b.n	1ee24 <z_impl_k_poll+0x54>
   1ee7e:	bf00      	nop
   1ee80:	200040f0 	.word	0x200040f0
   1ee84:	20006890 	.word	0x20006890

0001ee88 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1ee88:	b538      	push	{r3, r4, r5, lr}
   1ee8a:	4603      	mov	r3, r0
	__asm__ volatile(
   1ee8c:	f04f 0220 	mov.w	r2, #32
   1ee90:	f3ef 8511 	mrs	r5, BASEPRI
   1ee94:	f382 8811 	msr	BASEPRI, r2
   1ee98:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1ee9c:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   1ee9e:	2101      	movs	r1, #1
   1eea0:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1eea2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1eea4:	4283      	cmp	r3, r0
   1eea6:	d106      	bne.n	1eeb6 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1eea8:	f385 8811 	msr	BASEPRI, r5
   1eeac:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1eeb0:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1eeb2:	4620      	mov	r0, r4
   1eeb4:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1eeb6:	e9d0 3200 	ldrd	r3, r2, [r0]
   1eeba:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1eebc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1eebe:	2300      	movs	r3, #0
	node->prev = NULL;
   1eec0:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1eec4:	f005 fc3f 	bl	24746 <signal_poll_event>
	z_reschedule(&lock, key);
   1eec8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1eeca:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1eecc:	4801      	ldr	r0, [pc, #4]	; (1eed4 <z_impl_k_poll_signal_raise+0x4c>)
   1eece:	f7ff f87f 	bl	1dfd0 <z_reschedule>
	return rc;
   1eed2:	e7ee      	b.n	1eeb2 <z_impl_k_poll_signal_raise+0x2a>
   1eed4:	20006890 	.word	0x20006890

0001eed8 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   1eed8:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   1eeda:	4801      	ldr	r0, [pc, #4]	; (1eee0 <k_malloc+0x8>)
   1eedc:	f005 bd44 	b.w	24968 <k_mem_pool_malloc>
   1eee0:	2000069c 	.word	0x2000069c

0001eee4 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   1eee4:	b510      	push	{r4, lr}
   1eee6:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1eee8:	f005 fac6 	bl	24478 <k_is_in_isr>
   1eeec:	b948      	cbnz	r0, 1ef02 <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1eeee:	4b06      	ldr	r3, [pc, #24]	; (1ef08 <z_thread_malloc+0x24>)
   1eef0:	689b      	ldr	r3, [r3, #8]
   1eef2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	}

	if (pool) {
   1eef4:	b13b      	cbz	r3, 1ef06 <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   1eef6:	4621      	mov	r1, r4
   1eef8:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1eefa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   1eefe:	f005 bd33 	b.w	24968 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   1ef02:	4b02      	ldr	r3, [pc, #8]	; (1ef0c <z_thread_malloc+0x28>)
   1ef04:	e7f7      	b.n	1eef6 <z_thread_malloc+0x12>
}
   1ef06:	bd10      	pop	{r4, pc}
   1ef08:	200040f0 	.word	0x200040f0
   1ef0c:	2000069c 	.word	0x2000069c

0001ef10 <gpio_pin_set>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1ef10:	2301      	movs	r3, #1
   1ef12:	fa03 f101 	lsl.w	r1, r3, r1
   1ef16:	68c3      	ldr	r3, [r0, #12]
   1ef18:	681b      	ldr	r3, [r3, #0]
   1ef1a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1ef1c:	bf1c      	itt	ne
   1ef1e:	fab2 f282 	clzne	r2, r2
   1ef22:	0952      	lsrne	r2, r2, #5
	if (value != 0)	{
   1ef24:	b112      	cbz	r2, 1ef2c <gpio_pin_set+0x1c>
	return api->port_set_bits_raw(port, pins);
   1ef26:	6883      	ldr	r3, [r0, #8]
   1ef28:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1ef2a:	4718      	bx	r3
   1ef2c:	6883      	ldr	r3, [r0, #8]
   1ef2e:	691b      	ldr	r3, [r3, #16]
   1ef30:	e7fb      	b.n	1ef2a <gpio_pin_set+0x1a>

0001ef32 <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(const struct device *port,
   1ef32:	b538      	push	{r3, r4, r5, lr}
	struct gpio_driver_data *data =
   1ef34:	68c5      	ldr	r5, [r0, #12]
static inline int gpio_pin_configure(const struct device *port,
   1ef36:	460c      	mov	r4, r1
	return api->pin_configure(port, pin, flags);
   1ef38:	6883      	ldr	r3, [r0, #8]
   1ef3a:	f240 6201 	movw	r2, #1537	; 0x601
   1ef3e:	681b      	ldr	r3, [r3, #0]
   1ef40:	4798      	blx	r3
	if (ret != 0) {
   1ef42:	b928      	cbnz	r0, 1ef50 <gpio_pin_configure.constprop.0+0x1e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1ef44:	2301      	movs	r3, #1
   1ef46:	fa03 f104 	lsl.w	r1, r3, r4
   1ef4a:	682b      	ldr	r3, [r5, #0]
   1ef4c:	430b      	orrs	r3, r1
   1ef4e:	602b      	str	r3, [r5, #0]
}
   1ef50:	bd38      	pop	{r3, r4, r5, pc}

0001ef52 <new_remote_device>:

#include "defines.h"

struct remote_device* new_remote_device( uint8_t* uuid
                                       , uint8_t* service
                                       , uint8_t* characteristic) {
   1ef52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ef54:	4607      	mov	r7, r0
    struct remote_device* device = (struct remote_device*) k_malloc(sizeof(struct remote_device));
   1ef56:	2038      	movs	r0, #56	; 0x38
                                       , uint8_t* characteristic) {
   1ef58:	460e      	mov	r6, r1
   1ef5a:	4615      	mov	r5, r2
    struct remote_device* device = (struct remote_device*) k_malloc(sizeof(struct remote_device));
   1ef5c:	f7ff ffbc 	bl	1eed8 <k_malloc>
   1ef60:	4604      	mov	r4, r0
    device->uuid           = (struct bt_uuid*) k_malloc(sizeof(struct bt_uuid_16));
   1ef62:	2004      	movs	r0, #4
   1ef64:	f7ff ffb8 	bl	1eed8 <k_malloc>
   1ef68:	6020      	str	r0, [r4, #0]
    device->service        = (struct bt_uuid*) k_malloc(sizeof(struct bt_uuid_16));
   1ef6a:	2004      	movs	r0, #4
   1ef6c:	f7ff ffb4 	bl	1eed8 <k_malloc>
   1ef70:	6060      	str	r0, [r4, #4]
    device->characteristic = (struct bt_uuid*) k_malloc(sizeof(struct bt_uuid_16));
   1ef72:	2004      	movs	r0, #4
   1ef74:	f7ff ffb0 	bl	1eed8 <k_malloc>

    /* Hardcoded 2 for now, so they have to be 16 bits */
    bt_uuid_create(device->uuid          , uuid,           2);
   1ef78:	4639      	mov	r1, r7
    device->characteristic = (struct bt_uuid*) k_malloc(sizeof(struct bt_uuid_16));
   1ef7a:	60a0      	str	r0, [r4, #8]
    bt_uuid_create(device->uuid          , uuid,           2);
   1ef7c:	2202      	movs	r2, #2
   1ef7e:	6820      	ldr	r0, [r4, #0]
   1ef80:	f002 fc97 	bl	218b2 <bt_uuid_create>
    bt_uuid_create(device->service       , service,        2);
   1ef84:	4631      	mov	r1, r6
   1ef86:	6860      	ldr	r0, [r4, #4]
   1ef88:	2202      	movs	r2, #2
   1ef8a:	f002 fc92 	bl	218b2 <bt_uuid_create>
    bt_uuid_create(device->characteristic, characteristic, 2);
   1ef8e:	68a0      	ldr	r0, [r4, #8]
   1ef90:	2202      	movs	r2, #2
   1ef92:	4629      	mov	r1, r5
   1ef94:	f002 fc8d 	bl	218b2 <bt_uuid_create>

    /* 0 for now, not sure if we will need to do something smarter. */
    device->handle.offset = 0U;
   1ef98:	2300      	movs	r3, #0
   1ef9a:	8263      	strh	r3, [r4, #18]

    return device;
}
   1ef9c:	4620      	mov	r0, r4
   1ef9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001efa0 <set_handle>:
    k_free(device->characteristic);
    k_free(device);
}

void set_handle(uint16_t handle, struct remote_device* device) {
    device->handle.handle = handle;
   1efa0:	8208      	strh	r0, [r1, #16]
}
   1efa2:	4770      	bx	lr

0001efa4 <set_message_payload>:

void set_message_payload(const void* data, uint16_t len, struct remote_device* device) {
    device->handle.data   = data;
   1efa4:	6150      	str	r0, [r2, #20]
    device->handle.length = len;
   1efa6:	8311      	strh	r1, [r2, #24]
}
   1efa8:	4770      	bx	lr

0001efaa <set_addr>:

void set_addr(bt_addr_le_t addr, struct remote_device* device) {
   1efaa:	b082      	sub	sp, #8
   1efac:	466b      	mov	r3, sp
   1efae:	e883 0003 	stmia.w	r3, {r0, r1}
    device->address = addr;
   1efb2:	e893 0003 	ldmia.w	r3, {r0, r1}
   1efb6:	8411      	strh	r1, [r2, #32]
   1efb8:	0c09      	lsrs	r1, r1, #16
   1efba:	61d0      	str	r0, [r2, #28]
   1efbc:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
}
   1efc0:	b002      	add	sp, #8
   1efc2:	4770      	bx	lr

0001efc4 <set_connection>:
                            , BT_CONN_LE_CREATE_CONN
                            , BT_LE_CONN_PARAM_DEFAULT
                            , &device->connection);
}

void set_connection(struct bt_conn* conn, struct remote_device* device) {
   1efc4:	b510      	push	{r4, lr}
   1efc6:	460c      	mov	r4, r1
    device->connection = bt_conn_ref(conn   );
   1efc8:	f002 ff3f 	bl	21e4a <bt_conn_ref>
   1efcc:	6320      	str	r0, [r4, #48]	; 0x30
}
   1efce:	bd10      	pop	{r4, pc}

0001efd0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1efd0:	4603      	mov	r3, r0
   1efd2:	b140      	cbz	r0, 1efe6 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1efd4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1efd6:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1efda:	2a02      	cmp	r2, #2
   1efdc:	d006      	beq.n	1efec <sys_notify_validate+0x1c>
   1efde:	2a03      	cmp	r2, #3
   1efe0:	d004      	beq.n	1efec <sys_notify_validate+0x1c>
   1efe2:	2a01      	cmp	r2, #1
   1efe4:	d005      	beq.n	1eff2 <sys_notify_validate+0x22>
		return -EINVAL;
   1efe6:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1efea:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1efec:	681a      	ldr	r2, [r3, #0]
   1efee:	2a00      	cmp	r2, #0
   1eff0:	d0f9      	beq.n	1efe6 <sys_notify_validate+0x16>
		notify->result = 0;
   1eff2:	2000      	movs	r0, #0
   1eff4:	6098      	str	r0, [r3, #8]
   1eff6:	4770      	bx	lr

0001eff8 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1eff8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1effa:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1effe:	2a02      	cmp	r2, #2
{
   1f000:	b510      	push	{r4, lr}
   1f002:	4603      	mov	r3, r0
	notify->result = res;
   1f004:	6081      	str	r1, [r0, #8]
	switch (method) {
   1f006:	d00a      	beq.n	1f01e <sys_notify_finalize+0x26>
   1f008:	2a03      	cmp	r2, #3
   1f00a:	d10b      	bne.n	1f024 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1f00c:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1f00e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1f010:	2200      	movs	r2, #0
   1f012:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1f014:	b108      	cbz	r0, 1f01a <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   1f016:	f7ff ff37 	bl	1ee88 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1f01a:	4620      	mov	r0, r4
   1f01c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1f01e:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   1f020:	2400      	movs	r4, #0
		break;
   1f022:	e7f5      	b.n	1f010 <sys_notify_finalize+0x18>
	switch (method) {
   1f024:	2400      	movs	r4, #0
   1f026:	4620      	mov	r0, r4
   1f028:	e7f2      	b.n	1f010 <sys_notify_finalize+0x18>

0001f02a <arch_printk_char_out>:
}
   1f02a:	2000      	movs	r0, #0
   1f02c:	4770      	bx	lr

0001f02e <str_out>:
{
   1f02e:	b530      	push	{r4, r5, lr}
   1f030:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1f032:	680c      	ldr	r4, [r1, #0]
   1f034:	1c55      	adds	r5, r2, #1
   1f036:	b114      	cbz	r4, 1f03e <str_out+0x10>
   1f038:	684b      	ldr	r3, [r1, #4]
   1f03a:	4293      	cmp	r3, r2
   1f03c:	dc01      	bgt.n	1f042 <str_out+0x14>
		ctx->count++;
   1f03e:	608d      	str	r5, [r1, #8]
}
   1f040:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1f042:	3b01      	subs	r3, #1
   1f044:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1f046:	bf08      	it	eq
   1f048:	2200      	moveq	r2, #0
   1f04a:	608d      	str	r5, [r1, #8]
   1f04c:	bf0c      	ite	eq
   1f04e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1f050:	54a0      	strbne	r0, [r4, r2]
   1f052:	e7f5      	b.n	1f040 <str_out+0x12>

0001f054 <printk>:
{
   1f054:	b40f      	push	{r0, r1, r2, r3}
   1f056:	b507      	push	{r0, r1, r2, lr}
   1f058:	a904      	add	r1, sp, #16
   1f05a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1f05e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1f060:	f7e4 fa88 	bl	3574 <vprintk>
}
   1f064:	b003      	add	sp, #12
   1f066:	f85d eb04 	ldr.w	lr, [sp], #4
   1f06a:	b004      	add	sp, #16
   1f06c:	4770      	bx	lr

0001f06e <snprintk>:
{
   1f06e:	b40c      	push	{r2, r3}
   1f070:	b507      	push	{r0, r1, r2, lr}
   1f072:	ab04      	add	r3, sp, #16
   1f074:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1f078:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1f07a:	f7e4 fa89 	bl	3590 <vsnprintk>
}
   1f07e:	b003      	add	sp, #12
   1f080:	f85d eb04 	ldr.w	lr, [sp], #4
   1f084:	b002      	add	sp, #8
   1f086:	4770      	bx	lr

0001f088 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f088:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1f08a:	f013 0307 	ands.w	r3, r3, #7
   1f08e:	d105      	bne.n	1f09c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1f090:	6803      	ldr	r3, [r0, #0]
   1f092:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1f094:	bf0c      	ite	eq
   1f096:	2000      	moveq	r0, #0
   1f098:	2003      	movne	r0, #3
   1f09a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1f09c:	2b02      	cmp	r3, #2
   1f09e:	d105      	bne.n	1f0ac <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1f0a0:	8b43      	ldrh	r3, [r0, #26]
   1f0a2:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1f0a4:	bf14      	ite	ne
   1f0a6:	2000      	movne	r0, #0
   1f0a8:	2004      	moveq	r0, #4
   1f0aa:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1f0ac:	2b01      	cmp	r3, #1
   1f0ae:	d105      	bne.n	1f0bc <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1f0b0:	6803      	ldr	r3, [r0, #0]
   1f0b2:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1f0b4:	bf0c      	ite	eq
   1f0b6:	2000      	moveq	r0, #0
   1f0b8:	2005      	movne	r0, #5
   1f0ba:	4770      	bx	lr
	int evt = EVT_NOP;
   1f0bc:	2000      	movs	r0, #0
}
   1f0be:	4770      	bx	lr

0001f0c0 <notify_one>:
{
   1f0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f0c4:	460d      	mov	r5, r1
   1f0c6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1f0c8:	4619      	mov	r1, r3
   1f0ca:	1d28      	adds	r0, r5, #4
{
   1f0cc:	4690      	mov	r8, r2
   1f0ce:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1f0d0:	f7ff ff92 	bl	1eff8 <sys_notify_finalize>
	if (cb) {
   1f0d4:	4604      	mov	r4, r0
   1f0d6:	b138      	cbz	r0, 1f0e8 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1f0d8:	4633      	mov	r3, r6
   1f0da:	4642      	mov	r2, r8
   1f0dc:	4629      	mov	r1, r5
   1f0de:	4638      	mov	r0, r7
   1f0e0:	46a4      	mov	ip, r4
}
   1f0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1f0e6:	4760      	bx	ip
}
   1f0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f0ec <transition_complete>:
{
   1f0ec:	b410      	push	{r4}
	__asm__ volatile(
   1f0ee:	f04f 0420 	mov.w	r4, #32
   1f0f2:	f3ef 8211 	mrs	r2, BASEPRI
   1f0f6:	f384 8811 	msr	BASEPRI, r4
   1f0fa:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1f0fe:	6141      	str	r1, [r0, #20]
}
   1f100:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1f102:	2101      	movs	r1, #1
   1f104:	f7e4 ba58 	b.w	35b8 <process_event>

0001f108 <validate_args>:
{
   1f108:	b510      	push	{r4, lr}
   1f10a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1f10c:	b140      	cbz	r0, 1f120 <validate_args+0x18>
   1f10e:	b139      	cbz	r1, 1f120 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1f110:	1d08      	adds	r0, r1, #4
   1f112:	f7ff ff5d 	bl	1efd0 <sys_notify_validate>
	if ((rv == 0)
   1f116:	b928      	cbnz	r0, 1f124 <validate_args+0x1c>
	    && ((cli->notify.flags
   1f118:	68a3      	ldr	r3, [r4, #8]
   1f11a:	f033 0303 	bics.w	r3, r3, #3
   1f11e:	d001      	beq.n	1f124 <validate_args+0x1c>
		rv = -EINVAL;
   1f120:	f06f 0015 	mvn.w	r0, #21
}
   1f124:	bd10      	pop	{r4, pc}

0001f126 <onoff_manager_init>:
{
   1f126:	b538      	push	{r3, r4, r5, lr}
   1f128:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1f12a:	4605      	mov	r5, r0
   1f12c:	b158      	cbz	r0, 1f146 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1f12e:	b151      	cbz	r1, 1f146 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1f130:	680b      	ldr	r3, [r1, #0]
   1f132:	b143      	cbz	r3, 1f146 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1f134:	684b      	ldr	r3, [r1, #4]
   1f136:	b133      	cbz	r3, 1f146 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1f138:	221c      	movs	r2, #28
   1f13a:	2100      	movs	r1, #0
   1f13c:	f002 fade 	bl	216fc <memset>
   1f140:	612c      	str	r4, [r5, #16]
	return 0;
   1f142:	2000      	movs	r0, #0
}
   1f144:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1f146:	f06f 0015 	mvn.w	r0, #21
   1f14a:	e7fb      	b.n	1f144 <onoff_manager_init+0x1e>

0001f14c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1f14c:	b570      	push	{r4, r5, r6, lr}
   1f14e:	4604      	mov	r4, r0
   1f150:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1f152:	f7ff ffd9 	bl	1f108 <validate_args>

	if (rv < 0) {
   1f156:	1e05      	subs	r5, r0, #0
   1f158:	db31      	blt.n	1f1be <onoff_request+0x72>
   1f15a:	f04f 0320 	mov.w	r3, #32
   1f15e:	f3ef 8111 	mrs	r1, BASEPRI
   1f162:	f383 8811 	msr	BASEPRI, r3
   1f166:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f16a:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f16c:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f16e:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1f172:	42ab      	cmp	r3, r5
   1f174:	f000 0207 	and.w	r2, r0, #7
   1f178:	d02e      	beq.n	1f1d8 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1f17a:	2a02      	cmp	r2, #2
   1f17c:	d10e      	bne.n	1f19c <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1f17e:	3301      	adds	r3, #1
   1f180:	8363      	strh	r3, [r4, #26]
	rv = state;
   1f182:	4615      	mov	r5, r2
		notify = true;
   1f184:	2301      	movs	r3, #1
	__asm__ volatile(
   1f186:	f381 8811 	msr	BASEPRI, r1
   1f18a:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1f18e:	b1b3      	cbz	r3, 1f1be <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1f190:	2300      	movs	r3, #0
   1f192:	4631      	mov	r1, r6
   1f194:	4620      	mov	r0, r4
   1f196:	f7ff ff93 	bl	1f0c0 <notify_one>
   1f19a:	e010      	b.n	1f1be <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1f19c:	0783      	lsls	r3, r0, #30
   1f19e:	d001      	beq.n	1f1a4 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1f1a0:	2a06      	cmp	r2, #6
   1f1a2:	d10e      	bne.n	1f1c2 <onoff_request+0x76>
	parent->next = child;
   1f1a4:	2300      	movs	r3, #0
   1f1a6:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1f1a8:	6863      	ldr	r3, [r4, #4]
   1f1aa:	b993      	cbnz	r3, 1f1d2 <onoff_request+0x86>
	list->head = node;
   1f1ac:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1f1b0:	4615      	mov	r5, r2
   1f1b2:	b962      	cbnz	r2, 1f1ce <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1f1b4:	460a      	mov	r2, r1
   1f1b6:	4620      	mov	r0, r4
   1f1b8:	2102      	movs	r1, #2
   1f1ba:	f7e4 f9fd 	bl	35b8 <process_event>
		}
	}

	return rv;
}
   1f1be:	4628      	mov	r0, r5
   1f1c0:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1f1c2:	2a05      	cmp	r2, #5
   1f1c4:	bf0c      	ite	eq
   1f1c6:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   1f1ca:	f06f 0504 	mvnne.w	r5, #4
   1f1ce:	2300      	movs	r3, #0
   1f1d0:	e7d9      	b.n	1f186 <onoff_request+0x3a>
	parent->next = child;
   1f1d2:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1f1d4:	6066      	str	r6, [r4, #4]
}
   1f1d6:	e7eb      	b.n	1f1b0 <onoff_request+0x64>
		rv = -EAGAIN;
   1f1d8:	f06f 050a 	mvn.w	r5, #10
   1f1dc:	e7f7      	b.n	1f1ce <onoff_request+0x82>

0001f1de <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   1f1de:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f1e0:	f04f 0320 	mov.w	r3, #32
   1f1e4:	f3ef 8211 	mrs	r2, BASEPRI
   1f1e8:	f383 8811 	msr	BASEPRI, r3
   1f1ec:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f1f0:	8b04      	ldrh	r4, [r0, #24]
   1f1f2:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1f1f6:	2c02      	cmp	r4, #2
   1f1f8:	d00a      	beq.n	1f210 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
   1f1fa:	2c01      	cmp	r4, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1f1fc:	bf0c      	ite	eq
   1f1fe:	f06f 0004 	mvneq.w	r0, #4
   1f202:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	__asm__ volatile(
   1f206:	f382 8811 	msr	BASEPRI, r2
   1f20a:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   1f20e:	e008      	b.n	1f222 <onoff_release+0x44>
	mgr->refs -= 1U;
   1f210:	8b43      	ldrh	r3, [r0, #26]
   1f212:	3b01      	subs	r3, #1
   1f214:	b29b      	uxth	r3, r3
   1f216:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1f218:	b923      	cbnz	r3, 1f224 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1f21a:	4621      	mov	r1, r4
   1f21c:	f7e4 f9cc 	bl	35b8 <process_event>
	int rv = state;
   1f220:	4620      	mov	r0, r4
}
   1f222:	bd10      	pop	{r4, pc}
	int rv = state;
   1f224:	4620      	mov	r0, r4
   1f226:	e7ee      	b.n	1f206 <onoff_release+0x28>

0001f228 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   1f228:	b530      	push	{r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   1f22a:	b350      	cbz	r0, 1f282 <onoff_cancel+0x5a>
   1f22c:	b349      	cbz	r1, 1f282 <onoff_cancel+0x5a>
	__asm__ volatile(
   1f22e:	f04f 0320 	mov.w	r3, #32
   1f232:	f3ef 8511 	mrs	r5, BASEPRI
   1f236:	f383 8811 	msr	BASEPRI, r3
   1f23a:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f23e:	6803      	ldr	r3, [r0, #0]
   1f240:	2200      	movs	r2, #0
   1f242:	b913      	cbnz	r3, 1f24a <onoff_cancel+0x22>
		return -EINVAL;
	}

	int rv = -EALREADY;
   1f244:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1f248:	e00d      	b.n	1f266 <onoff_cancel+0x3e>
   1f24a:	4299      	cmp	r1, r3
   1f24c:	d116      	bne.n	1f27c <onoff_cancel+0x54>
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f24e:	8b03      	ldrh	r3, [r0, #24]
Z_GENLIST_REMOVE(slist, snode)
   1f250:	680c      	ldr	r4, [r1, #0]
   1f252:	b96a      	cbnz	r2, 1f270 <onoff_cancel+0x48>
   1f254:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   1f256:	6004      	str	r4, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f258:	4291      	cmp	r1, r2
   1f25a:	d100      	bne.n	1f25e <onoff_cancel+0x36>
	list->tail = node;
   1f25c:	6044      	str	r4, [r0, #4]
	parent->next = child;
   1f25e:	2200      	movs	r2, #0
   1f260:	600a      	str	r2, [r1, #0]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   1f262:	f003 0007 	and.w	r0, r3, #7
	__asm__ volatile(
   1f266:	f385 8811 	msr	BASEPRI, r5
   1f26a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   1f26e:	bd30      	pop	{r4, r5, pc}
   1f270:	6014      	str	r4, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f272:	6844      	ldr	r4, [r0, #4]
   1f274:	42a1      	cmp	r1, r4
	list->tail = node;
   1f276:	bf08      	it	eq
   1f278:	6042      	streq	r2, [r0, #4]
}
   1f27a:	e7f0      	b.n	1f25e <onoff_cancel+0x36>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f27c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f27e:	681b      	ldr	r3, [r3, #0]
   1f280:	e7df      	b.n	1f242 <onoff_cancel+0x1a>
		return -EINVAL;
   1f282:	f06f 0015 	mvn.w	r0, #21
   1f286:	e7f2      	b.n	1f26e <onoff_cancel+0x46>

0001f288 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1f288:	4604      	mov	r4, r0
   1f28a:	b508      	push	{r3, lr}
   1f28c:	4608      	mov	r0, r1
   1f28e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1f290:	461a      	mov	r2, r3
   1f292:	47a0      	blx	r4
	return z_impl_k_current_get();
   1f294:	f7ff f9f2 	bl	1e67c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1f298:	f7e8 fdf6 	bl	7e88 <z_impl_k_thread_abort>

0001f29c <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1f29c:	b510      	push	{r4, lr}
   1f29e:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1f2a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f2a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f2a8:	4620      	mov	r0, r4
   1f2aa:	f7fe fe1b 	bl	1dee4 <z_impl_k_queue_get>
   1f2ae:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1f2b0:	2800      	cmp	r0, #0
   1f2b2:	d0f5      	beq.n	1f2a0 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f2b4:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   1f2b6:	6842      	ldr	r2, [r0, #4]
   1f2b8:	f3bf 8f5b 	dmb	ish
   1f2bc:	e853 1f00 	ldrex	r1, [r3]
   1f2c0:	f021 0c01 	bic.w	ip, r1, #1
   1f2c4:	e843 ce00 	strex	lr, ip, [r3]
   1f2c8:	f1be 0f00 	cmp.w	lr, #0
   1f2cc:	d1f6      	bne.n	1f2bc <z_work_q_main+0x20>
   1f2ce:	f3bf 8f5b 	dmb	ish
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1f2d2:	07cb      	lsls	r3, r1, #31
   1f2d4:	d500      	bpl.n	1f2d8 <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1f2d6:	4790      	blx	r2
	z_impl_k_yield();
   1f2d8:	f7ff f960 	bl	1e59c <z_impl_k_yield>
   1f2dc:	e7e0      	b.n	1f2a0 <z_work_q_main+0x4>

0001f2de <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1f2de:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1f2e0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1f2e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1f2e8:	bf2c      	ite	cs
   1f2ea:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1f2ee:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1f2f2:	4770      	bx	lr

0001f2f4 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1f2f4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1f2f8:	6880      	ldr	r0, [r0, #8]
   1f2fa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1f2fe:	bf2c      	ite	cs
   1f300:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1f304:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1f308:	4770      	bx	lr

0001f30a <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1f30a:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1f30c:	2201      	movs	r2, #1
   1f30e:	f7ff ffe6 	bl	1f2de <chunk_field>
}
   1f312:	0840      	lsrs	r0, r0, #1
   1f314:	bd08      	pop	{r3, pc}

0001f316 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1f316:	6883      	ldr	r3, [r0, #8]
   1f318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1f31c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1f320:	d308      	bcc.n	1f334 <set_chunk_used+0x1e>
		if (used) {
   1f322:	684b      	ldr	r3, [r1, #4]
   1f324:	b11a      	cbz	r2, 1f32e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f326:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1f32a:	604b      	str	r3, [r1, #4]
   1f32c:	4770      	bx	lr
   1f32e:	f023 0301 	bic.w	r3, r3, #1
   1f332:	e7fa      	b.n	1f32a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1f334:	884b      	ldrh	r3, [r1, #2]
   1f336:	b11a      	cbz	r2, 1f340 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f338:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1f33c:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1f33e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1f340:	f023 0301 	bic.w	r3, r3, #1
   1f344:	e7fa      	b.n	1f33c <set_chunk_used+0x26>

0001f346 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1f346:	0053      	lsls	r3, r2, #1
   1f348:	2201      	movs	r2, #1
   1f34a:	f7ff bfd3 	b.w	1f2f4 <chunk_set>

0001f34e <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1f34e:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1f350:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1f352:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1f356:	bf2c      	ite	cs
   1f358:	2002      	movcs	r0, #2
   1f35a:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1f35c:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1f35e:	fab0 f080 	clz	r0, r0
}
   1f362:	f1c0 001f 	rsb	r0, r0, #31
   1f366:	4770      	bx	lr

0001f368 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1f368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f36c:	4616      	mov	r6, r2
   1f36e:	4604      	mov	r4, r0
   1f370:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1f372:	f7ff ffca 	bl	1f30a <chunk_size>
   1f376:	4631      	mov	r1, r6
   1f378:	4605      	mov	r5, r0
   1f37a:	4620      	mov	r0, r4
   1f37c:	f7ff ffc5 	bl	1f30a <chunk_size>
   1f380:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   1f382:	462a      	mov	r2, r5
   1f384:	4639      	mov	r1, r7
   1f386:	4620      	mov	r0, r4
   1f388:	f7ff ffdd 	bl	1f346 <set_chunk_size>
	return c + chunk_size(h, c);
   1f38c:	4631      	mov	r1, r6
   1f38e:	4620      	mov	r0, r4
   1f390:	f7ff ffbb 	bl	1f30a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1f394:	462b      	mov	r3, r5
   1f396:	1831      	adds	r1, r6, r0
   1f398:	2200      	movs	r2, #0
   1f39a:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1f39c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f3a0:	f7ff bfa8 	b.w	1f2f4 <chunk_set>

0001f3a4 <split_chunks>:
{
   1f3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f3a8:	4614      	mov	r4, r2
   1f3aa:	4605      	mov	r5, r0
   1f3ac:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   1f3ae:	f7ff ffac 	bl	1f30a <chunk_size>
	size_t lsz = rc - lc;
   1f3b2:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1f3b6:	1b37      	subs	r7, r6, r4
   1f3b8:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1f3ba:	4642      	mov	r2, r8
   1f3bc:	4631      	mov	r1, r6
   1f3be:	4628      	mov	r0, r5
   1f3c0:	f7ff ffc1 	bl	1f346 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1f3c4:	463a      	mov	r2, r7
   1f3c6:	4621      	mov	r1, r4
   1f3c8:	4628      	mov	r0, r5
   1f3ca:	f7ff ffbc 	bl	1f346 <set_chunk_size>
   1f3ce:	4643      	mov	r3, r8
   1f3d0:	2200      	movs	r2, #0
   1f3d2:	4621      	mov	r1, r4
   1f3d4:	4628      	mov	r0, r5
   1f3d6:	f7ff ff8d 	bl	1f2f4 <chunk_set>
	return c + chunk_size(h, c);
   1f3da:	4621      	mov	r1, r4
   1f3dc:	4628      	mov	r0, r5
   1f3de:	f7ff ff94 	bl	1f30a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1f3e2:	463b      	mov	r3, r7
   1f3e4:	1821      	adds	r1, r4, r0
   1f3e6:	2200      	movs	r2, #0
   1f3e8:	4628      	mov	r0, r5
}
   1f3ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f3ee:	f7ff bf81 	b.w	1f2f4 <chunk_set>

0001f3f2 <free_list_remove_bidx>:
{
   1f3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f3f6:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1f3f8:	2203      	movs	r2, #3
   1f3fa:	460e      	mov	r6, r1
   1f3fc:	4604      	mov	r4, r0
   1f3fe:	f7ff ff6e 	bl	1f2de <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1f402:	4286      	cmp	r6, r0
   1f404:	4605      	mov	r5, r0
   1f406:	f107 0804 	add.w	r8, r7, #4
   1f40a:	d10b      	bne.n	1f424 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1f40c:	2301      	movs	r3, #1
   1f40e:	fa03 f707 	lsl.w	r7, r3, r7
   1f412:	68e3      	ldr	r3, [r4, #12]
   1f414:	ea23 0307 	bic.w	r3, r3, r7
   1f418:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1f41a:	2300      	movs	r3, #0
   1f41c:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1f420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1f424:	4631      	mov	r1, r6
   1f426:	2202      	movs	r2, #2
   1f428:	4620      	mov	r0, r4
   1f42a:	f7ff ff58 	bl	1f2de <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1f42e:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1f430:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1f432:	4601      	mov	r1, r0
		b->next = second;
   1f434:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1f438:	4620      	mov	r0, r4
   1f43a:	2203      	movs	r2, #3
   1f43c:	f7ff ff5a 	bl	1f2f4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1f440:	4633      	mov	r3, r6
   1f442:	4629      	mov	r1, r5
   1f444:	4620      	mov	r0, r4
   1f446:	2202      	movs	r2, #2
}
   1f448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f44c:	f7ff bf52 	b.w	1f2f4 <chunk_set>

0001f450 <free_list_remove>:
{
   1f450:	b538      	push	{r3, r4, r5, lr}
   1f452:	4604      	mov	r4, r0
   1f454:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1f456:	f7ff ff58 	bl	1f30a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1f45a:	68a3      	ldr	r3, [r4, #8]
   1f45c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1f460:	4601      	mov	r1, r0
   1f462:	d301      	bcc.n	1f468 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1f464:	2801      	cmp	r0, #1
   1f466:	d009      	beq.n	1f47c <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1f468:	4620      	mov	r0, r4
   1f46a:	f7ff ff70 	bl	1f34e <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1f46e:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1f470:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1f472:	4620      	mov	r0, r4
}
   1f474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1f478:	f7ff bfbb 	b.w	1f3f2 <free_list_remove_bidx>
}
   1f47c:	bd38      	pop	{r3, r4, r5, pc}

0001f47e <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   1f47e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f482:	4604      	mov	r4, r0
   1f484:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1f486:	f7ff ff62 	bl	1f34e <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   1f48a:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   1f48c:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1f48e:	4620      	mov	r0, r4
   1f490:	f7ff ff5d 	bl	1f34e <bucket_idx>
   1f494:	42a8      	cmp	r0, r5
   1f496:	da03      	bge.n	1f4a0 <alloc_chunk+0x22>
		return 0;
   1f498:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1f49a:	4630      	mov	r0, r6
   1f49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   1f4a0:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   1f4a4:	f8da 9010 	ldr.w	r9, [sl, #16]
   1f4a8:	f1b9 0f00 	cmp.w	r9, #0
   1f4ac:	d019      	beq.n	1f4e2 <alloc_chunk+0x64>
   1f4ae:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1f4b0:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1f4b4:	4620      	mov	r0, r4
   1f4b6:	4631      	mov	r1, r6
   1f4b8:	f7ff ff27 	bl	1f30a <chunk_size>
   1f4bc:	4540      	cmp	r0, r8
   1f4be:	d305      	bcc.n	1f4cc <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   1f4c0:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1f4c2:	4631      	mov	r1, r6
   1f4c4:	4620      	mov	r0, r4
   1f4c6:	f7ff ff94 	bl	1f3f2 <free_list_remove_bidx>
		return c;
   1f4ca:	e7e6      	b.n	1f49a <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   1f4cc:	2203      	movs	r2, #3
   1f4ce:	4631      	mov	r1, r6
   1f4d0:	4620      	mov	r0, r4
   1f4d2:	f7ff ff04 	bl	1f2de <chunk_field>
		} while (--i && b->next != first);
   1f4d6:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1f4d8:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1f4dc:	d001      	beq.n	1f4e2 <alloc_chunk+0x64>
   1f4de:	4581      	cmp	r9, r0
   1f4e0:	d1e6      	bne.n	1f4b0 <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1f4e2:	68e3      	ldr	r3, [r4, #12]
   1f4e4:	3501      	adds	r5, #1
   1f4e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f4ea:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1f4ec:	401a      	ands	r2, r3
   1f4ee:	d0d3      	beq.n	1f498 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1f4f0:	fa92 f2a2 	rbit	r2, r2
   1f4f4:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1f4f8:	1d13      	adds	r3, r2, #4
   1f4fa:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1f4fe:	e7e0      	b.n	1f4c2 <alloc_chunk+0x44>

0001f500 <free_list_add>:
{
   1f500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f504:	4604      	mov	r4, r0
   1f506:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1f508:	f7ff feff 	bl	1f30a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1f50c:	68a3      	ldr	r3, [r4, #8]
   1f50e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1f512:	4601      	mov	r1, r0
   1f514:	d301      	bcc.n	1f51a <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1f516:	2801      	cmp	r0, #1
   1f518:	d035      	beq.n	1f586 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1f51a:	4620      	mov	r0, r4
   1f51c:	f7ff ff17 	bl	1f34e <bucket_idx>
	if (b->next == 0U) {
   1f520:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1f524:	6916      	ldr	r6, [r2, #16]
   1f526:	b99e      	cbnz	r6, 1f550 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1f528:	2301      	movs	r3, #1
   1f52a:	fa03 f000 	lsl.w	r0, r3, r0
   1f52e:	68e3      	ldr	r3, [r4, #12]
   1f530:	4303      	orrs	r3, r0
   1f532:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1f534:	4629      	mov	r1, r5
		b->next = c;
   1f536:	6115      	str	r5, [r2, #16]
   1f538:	462b      	mov	r3, r5
   1f53a:	2202      	movs	r2, #2
   1f53c:	4620      	mov	r0, r4
   1f53e:	f7ff fed9 	bl	1f2f4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1f542:	2203      	movs	r2, #3
   1f544:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1f546:	4620      	mov	r0, r4
}
   1f548:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f54c:	f7ff bed2 	b.w	1f2f4 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1f550:	2202      	movs	r2, #2
   1f552:	4631      	mov	r1, r6
   1f554:	4620      	mov	r0, r4
   1f556:	f7ff fec2 	bl	1f2de <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1f55a:	2202      	movs	r2, #2
   1f55c:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1f55e:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1f560:	4629      	mov	r1, r5
   1f562:	4620      	mov	r0, r4
   1f564:	f7ff fec6 	bl	1f2f4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1f568:	4633      	mov	r3, r6
   1f56a:	2203      	movs	r2, #3
   1f56c:	4629      	mov	r1, r5
   1f56e:	4620      	mov	r0, r4
   1f570:	f7ff fec0 	bl	1f2f4 <chunk_set>
   1f574:	2203      	movs	r2, #3
   1f576:	4639      	mov	r1, r7
   1f578:	462b      	mov	r3, r5
   1f57a:	4620      	mov	r0, r4
   1f57c:	f7ff feba 	bl	1f2f4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1f580:	2202      	movs	r2, #2
   1f582:	4631      	mov	r1, r6
   1f584:	e7df      	b.n	1f546 <free_list_add+0x46>
   1f586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f58a <sys_heap_free>:
{
   1f58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   1f58c:	2900      	cmp	r1, #0
   1f58e:	d04e      	beq.n	1f62e <sys_heap_free+0xa4>
	struct z_heap *h = heap->heap;
   1f590:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1f592:	68ab      	ldr	r3, [r5, #8]
   1f594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1f598:	bf2c      	ite	cs
   1f59a:	2408      	movcs	r4, #8
   1f59c:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1f59e:	1b0c      	subs	r4, r1, r4
   1f5a0:	1b64      	subs	r4, r4, r5
   1f5a2:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1f5a4:	2200      	movs	r2, #0
   1f5a6:	4621      	mov	r1, r4
   1f5a8:	4628      	mov	r0, r5
   1f5aa:	f7ff feb4 	bl	1f316 <set_chunk_used>
	return c + chunk_size(h, c);
   1f5ae:	4621      	mov	r1, r4
   1f5b0:	f7ff feab 	bl	1f30a <chunk_size>
   1f5b4:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1f5b6:	2201      	movs	r2, #1
   1f5b8:	4631      	mov	r1, r6
   1f5ba:	4628      	mov	r0, r5
   1f5bc:	f7ff fe8f 	bl	1f2de <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1f5c0:	07c3      	lsls	r3, r0, #31
   1f5c2:	d40c      	bmi.n	1f5de <sys_heap_free+0x54>
		free_list_remove(h, right_chunk(h, c));
   1f5c4:	4631      	mov	r1, r6
   1f5c6:	4628      	mov	r0, r5
   1f5c8:	f7ff ff42 	bl	1f450 <free_list_remove>
	return c + chunk_size(h, c);
   1f5cc:	4621      	mov	r1, r4
   1f5ce:	4628      	mov	r0, r5
   1f5d0:	f7ff fe9b 	bl	1f30a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1f5d4:	4621      	mov	r1, r4
   1f5d6:	1822      	adds	r2, r4, r0
   1f5d8:	4628      	mov	r0, r5
   1f5da:	f7ff fec5 	bl	1f368 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1f5de:	2200      	movs	r2, #0
   1f5e0:	4621      	mov	r1, r4
   1f5e2:	4628      	mov	r0, r5
   1f5e4:	f7ff fe7b 	bl	1f2de <chunk_field>
   1f5e8:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1f5ea:	2201      	movs	r2, #1
   1f5ec:	4639      	mov	r1, r7
   1f5ee:	4628      	mov	r0, r5
   1f5f0:	f7ff fe75 	bl	1f2de <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1f5f4:	f010 0601 	ands.w	r6, r0, #1
   1f5f8:	d113      	bne.n	1f622 <sys_heap_free+0x98>
		free_list_remove(h, left_chunk(h, c));
   1f5fa:	4639      	mov	r1, r7
   1f5fc:	4628      	mov	r0, r5
   1f5fe:	f7ff ff27 	bl	1f450 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1f602:	4621      	mov	r1, r4
   1f604:	4632      	mov	r2, r6
   1f606:	4628      	mov	r0, r5
   1f608:	f7ff fe69 	bl	1f2de <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1f60c:	4622      	mov	r2, r4
   1f60e:	1a21      	subs	r1, r4, r0
   1f610:	4628      	mov	r0, r5
   1f612:	f7ff fea9 	bl	1f368 <merge_chunks>
   1f616:	4621      	mov	r1, r4
   1f618:	4632      	mov	r2, r6
   1f61a:	4628      	mov	r0, r5
   1f61c:	f7ff fe5f 	bl	1f2de <chunk_field>
   1f620:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1f622:	4621      	mov	r1, r4
   1f624:	4628      	mov	r0, r5
}
   1f626:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1f62a:	f7ff bf69 	b.w	1f500 <free_list_add>
}
   1f62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f630 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1f630:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0U) {
   1f632:	b909      	cbnz	r1, 1f638 <sys_heap_alloc+0x8>
		return NULL;
   1f634:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1f636:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   1f638:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1f63a:	68ab      	ldr	r3, [r5, #8]
   1f63c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1f640:	bf2c      	ite	cs
   1f642:	2208      	movcs	r2, #8
   1f644:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1f646:	1dcc      	adds	r4, r1, #7
   1f648:	4414      	add	r4, r2
   1f64a:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1f64c:	4621      	mov	r1, r4
   1f64e:	4628      	mov	r0, r5
   1f650:	f7ff ff15 	bl	1f47e <alloc_chunk>
	if (c == 0U) {
   1f654:	4606      	mov	r6, r0
   1f656:	2800      	cmp	r0, #0
   1f658:	d0ec      	beq.n	1f634 <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   1f65a:	4601      	mov	r1, r0
   1f65c:	4628      	mov	r0, r5
   1f65e:	f7ff fe54 	bl	1f30a <chunk_size>
   1f662:	42a0      	cmp	r0, r4
   1f664:	d909      	bls.n	1f67a <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   1f666:	4434      	add	r4, r6
   1f668:	4631      	mov	r1, r6
   1f66a:	4628      	mov	r0, r5
   1f66c:	4622      	mov	r2, r4
   1f66e:	f7ff fe99 	bl	1f3a4 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1f672:	4621      	mov	r1, r4
   1f674:	4628      	mov	r0, r5
   1f676:	f7ff ff43 	bl	1f500 <free_list_add>
	set_chunk_used(h, c, true);
   1f67a:	4628      	mov	r0, r5
   1f67c:	2201      	movs	r2, #1
   1f67e:	4631      	mov	r1, r6
   1f680:	f7ff fe49 	bl	1f316 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1f684:	68ab      	ldr	r3, [r5, #8]
   1f686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1f68a:	bf2c      	ite	cs
   1f68c:	2008      	movcs	r0, #8
   1f68e:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1f690:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1f694:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1f696:	e7ce      	b.n	1f636 <sys_heap_alloc+0x6>

0001f698 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1f698:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1f69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f69e:	bf2c      	ite	cs
   1f6a0:	2508      	movcs	r5, #8
   1f6a2:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1f6a4:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1f6a6:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1f6a8:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1f6aa:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1f6ae:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   1f6b2:	2200      	movs	r2, #0
   1f6b4:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1f6b6:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
   1f6b8:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1f6ba:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
   1f6bc:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   1f6c0:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1f6c2:	4629      	mov	r1, r5
	h->len = buf_sz;
   1f6c4:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1f6c6:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1f6c8:	4620      	mov	r0, r4
   1f6ca:	f7ff fe40 	bl	1f34e <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1f6ce:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1f6d0:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1f6d2:	1c41      	adds	r1, r0, #1
   1f6d4:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1f6d6:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1f6da:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1f6dc:	428b      	cmp	r3, r1
   1f6de:	db29      	blt.n	1f734 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1f6e0:	4632      	mov	r2, r6
   1f6e2:	4620      	mov	r0, r4
   1f6e4:	2100      	movs	r1, #0
   1f6e6:	f7ff fe2e 	bl	1f346 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1f6ea:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1f6ec:	4620      	mov	r0, r4
   1f6ee:	2201      	movs	r2, #1
   1f6f0:	2100      	movs	r1, #0
   1f6f2:	f7ff fe10 	bl	1f316 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1f6f6:	463a      	mov	r2, r7
   1f6f8:	4631      	mov	r1, r6
   1f6fa:	f7ff fe24 	bl	1f346 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1f6fe:	4633      	mov	r3, r6
   1f700:	4631      	mov	r1, r6
   1f702:	4620      	mov	r0, r4
   1f704:	2200      	movs	r2, #0
   1f706:	f7ff fdf5 	bl	1f2f4 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   1f70a:	4629      	mov	r1, r5
   1f70c:	4620      	mov	r0, r4
   1f70e:	2200      	movs	r2, #0
   1f710:	f7ff fe19 	bl	1f346 <set_chunk_size>
   1f714:	463b      	mov	r3, r7
   1f716:	4629      	mov	r1, r5
   1f718:	4620      	mov	r0, r4
   1f71a:	2200      	movs	r2, #0
   1f71c:	f7ff fdea 	bl	1f2f4 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   1f720:	4629      	mov	r1, r5
   1f722:	4620      	mov	r0, r4
   1f724:	2201      	movs	r2, #1
   1f726:	f7ff fdf6 	bl	1f316 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1f72a:	4631      	mov	r1, r6
}
   1f72c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1f730:	f7ff bee6 	b.w	1f500 <free_list_add>
		h->buckets[i].next = 0;
   1f734:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1f738:	3301      	adds	r3, #1
   1f73a:	e7cf      	b.n	1f6dc <sys_heap_init+0x44>

0001f73c <encode_uint>:
{
   1f73c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f740:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1f742:	78d3      	ldrb	r3, [r2, #3]
{
   1f744:	4614      	mov	r4, r2
	switch (specifier) {
   1f746:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1f748:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   1f74c:	4606      	mov	r6, r0
   1f74e:	460f      	mov	r7, r1
   1f750:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1f752:	d02d      	beq.n	1f7b0 <encode_uint+0x74>
   1f754:	d828      	bhi.n	1f7a8 <encode_uint+0x6c>
		return 16;
   1f756:	2b58      	cmp	r3, #88	; 0x58
   1f758:	bf14      	ite	ne
   1f75a:	250a      	movne	r5, #10
   1f75c:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   1f75e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1f762:	46aa      	mov	sl, r5
   1f764:	f04f 0b00 	mov.w	fp, #0
   1f768:	4652      	mov	r2, sl
   1f76a:	465b      	mov	r3, fp
   1f76c:	4630      	mov	r0, r6
   1f76e:	4639      	mov	r1, r7
   1f770:	f7e0 fcc6 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1f774:	2a09      	cmp	r2, #9
   1f776:	b2d3      	uxtb	r3, r2
   1f778:	d81f      	bhi.n	1f7ba <encode_uint+0x7e>
   1f77a:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1f77c:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1f77e:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1f780:	bf08      	it	eq
   1f782:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1f784:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1f788:	d301      	bcc.n	1f78e <encode_uint+0x52>
   1f78a:	45c8      	cmp	r8, r9
   1f78c:	d812      	bhi.n	1f7b4 <encode_uint+0x78>
	if (conv->flag_hash) {
   1f78e:	7823      	ldrb	r3, [r4, #0]
   1f790:	069b      	lsls	r3, r3, #26
   1f792:	d505      	bpl.n	1f7a0 <encode_uint+0x64>
		if (radix == 8) {
   1f794:	2d08      	cmp	r5, #8
   1f796:	d116      	bne.n	1f7c6 <encode_uint+0x8a>
			conv->altform_0 = true;
   1f798:	78a3      	ldrb	r3, [r4, #2]
   1f79a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1f79e:	70a3      	strb	r3, [r4, #2]
}
   1f7a0:	4640      	mov	r0, r8
   1f7a2:	b003      	add	sp, #12
   1f7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1f7a8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1f7ac:	2b70      	cmp	r3, #112	; 0x70
   1f7ae:	e7d3      	b.n	1f758 <encode_uint+0x1c>
	switch (specifier) {
   1f7b0:	2508      	movs	r5, #8
   1f7b2:	e7d4      	b.n	1f75e <encode_uint+0x22>
		value /= radix;
   1f7b4:	4606      	mov	r6, r0
   1f7b6:	460f      	mov	r7, r1
   1f7b8:	e7d6      	b.n	1f768 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1f7ba:	9a01      	ldr	r2, [sp, #4]
   1f7bc:	2a19      	cmp	r2, #25
   1f7be:	bf94      	ite	ls
   1f7c0:	3337      	addls	r3, #55	; 0x37
   1f7c2:	3357      	addhi	r3, #87	; 0x57
   1f7c4:	e7da      	b.n	1f77c <encode_uint+0x40>
		} else if (radix == 16) {
   1f7c6:	2d10      	cmp	r5, #16
   1f7c8:	d1ea      	bne.n	1f7a0 <encode_uint+0x64>
			conv->altform_0c = true;
   1f7ca:	78a3      	ldrb	r3, [r4, #2]
   1f7cc:	f043 0310 	orr.w	r3, r3, #16
   1f7d0:	e7e5      	b.n	1f79e <encode_uint+0x62>

0001f7d2 <outs>:
{
   1f7d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f7d6:	4607      	mov	r7, r0
   1f7d8:	4688      	mov	r8, r1
   1f7da:	4615      	mov	r5, r2
   1f7dc:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1f7de:	4614      	mov	r4, r2
   1f7e0:	42b4      	cmp	r4, r6
   1f7e2:	eba4 0005 	sub.w	r0, r4, r5
   1f7e6:	d302      	bcc.n	1f7ee <outs+0x1c>
   1f7e8:	b93e      	cbnz	r6, 1f7fa <outs+0x28>
   1f7ea:	7823      	ldrb	r3, [r4, #0]
   1f7ec:	b12b      	cbz	r3, 1f7fa <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1f7ee:	f814 0b01 	ldrb.w	r0, [r4], #1
   1f7f2:	4641      	mov	r1, r8
   1f7f4:	47b8      	blx	r7
		if (rc < 0) {
   1f7f6:	2800      	cmp	r0, #0
   1f7f8:	daf2      	bge.n	1f7e0 <outs+0xe>
}
   1f7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f7fe <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
   1f7fe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   1f802:	4770      	bx	lr

0001f804 <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   1f804:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1f806:	6985      	ldr	r5, [r0, #24]
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   1f808:	6886      	ldr	r6, [r0, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1f80a:	6907      	ldr	r7, [r0, #16]
{
   1f80c:	4604      	mov	r4, r0
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1f80e:	b185      	cbz	r5, 1f832 <ring_buf_put_claim+0x2e>
   1f810:	4035      	ands	r5, r6
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
   1f812:	6823      	ldr	r3, [r4, #0]
   1f814:	443b      	add	r3, r7
   1f816:	1b98      	subs	r0, r3, r6
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
   1f818:	4290      	cmp	r0, r2
   1f81a:	bf28      	it	cs
   1f81c:	4610      	movcs	r0, r2
	trail_size = buf->size - tmp_trail_mod;
   1f81e:	1b7f      	subs	r7, r7, r5

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
   1f820:	6963      	ldr	r3, [r4, #20]
	allocated = MIN(trail_size, size);
   1f822:	42b8      	cmp	r0, r7
   1f824:	bf28      	it	cs
   1f826:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
   1f828:	441d      	add	r5, r3

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   1f82a:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
   1f82c:	600d      	str	r5, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
   1f82e:	60a6      	str	r6, [r4, #8]

	return allocated;
}
   1f830:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1f832:	fbb6 f5f7 	udiv	r5, r6, r7
   1f836:	fb07 6515 	mls	r5, r7, r5, r6
   1f83a:	e7ea      	b.n	1f812 <ring_buf_put_claim+0xe>

0001f83c <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->tail + size) > (buf->head + buf->size)) {
   1f83c:	6843      	ldr	r3, [r0, #4]
   1f83e:	6902      	ldr	r2, [r0, #16]
   1f840:	4419      	add	r1, r3
   1f842:	6803      	ldr	r3, [r0, #0]
   1f844:	4413      	add	r3, r2
   1f846:	4299      	cmp	r1, r3
		return -EINVAL;
	}

	buf->tail += size;
	buf->misc.byte_mode.tmp_tail = buf->tail;
   1f848:	bf9a      	itte	ls
   1f84a:	e9c0 1101 	strdls	r1, r1, [r0, #4]

	return 0;
   1f84e:	2000      	movls	r0, #0
		return -EINVAL;
   1f850:	f06f 0015 	mvnhi.w	r0, #21
}
   1f854:	4770      	bx	lr

0001f856 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   1f856:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f85a:	4680      	mov	r8, r0
   1f85c:	460e      	mov	r6, r1
   1f85e:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   1f860:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   1f862:	462a      	mov	r2, r5
   1f864:	a901      	add	r1, sp, #4
   1f866:	4640      	mov	r0, r8
   1f868:	f7ff ffcc 	bl	1f804 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
   1f86c:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
   1f86e:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   1f870:	4602      	mov	r2, r0
   1f872:	9801      	ldr	r0, [sp, #4]
   1f874:	f001 ff17 	bl	216a6 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   1f878:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   1f87a:	4427      	add	r7, r4
		data += partial_size;
   1f87c:	4426      	add	r6, r4
	} while (size && partial_size);
   1f87e:	d001      	beq.n	1f884 <ring_buf_put+0x2e>
   1f880:	2c00      	cmp	r4, #0
   1f882:	d1ee      	bne.n	1f862 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   1f884:	4639      	mov	r1, r7
   1f886:	4640      	mov	r0, r8
   1f888:	f7ff ffd8 	bl	1f83c <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   1f88c:	4638      	mov	r0, r7
   1f88e:	b002      	add	sp, #8
   1f890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f894 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   1f894:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1f896:	6985      	ldr	r5, [r0, #24]
	uint32_t space, granted_size, trail_size, tmp_head_mod;

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   1f898:	68c6      	ldr	r6, [r0, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1f89a:	6903      	ldr	r3, [r0, #16]
{
   1f89c:	4604      	mov	r4, r0
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1f89e:	b185      	cbz	r5, 1f8c2 <ring_buf_get_claim+0x2e>
   1f8a0:	4035      	ands	r5, r6
	space = buf->tail - buf->misc.byte_mode.tmp_head;
   1f8a2:	6867      	ldr	r7, [r4, #4]
   1f8a4:	1bb8      	subs	r0, r7, r6
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   1f8a6:	4290      	cmp	r0, r2
   1f8a8:	bf28      	it	cs
   1f8aa:	4610      	movcs	r0, r2
   1f8ac:	4607      	mov	r7, r0
	trail_size = buf->size - tmp_head_mod;
   1f8ae:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   1f8b0:	42b8      	cmp	r0, r7

	*data = &buf->buf.buf8[tmp_head_mod];
   1f8b2:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
   1f8b4:	bf28      	it	cs
   1f8b6:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_head_mod];
   1f8b8:	441d      	add	r5, r3
	buf->misc.byte_mode.tmp_head += granted_size;
   1f8ba:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_head_mod];
   1f8bc:	600d      	str	r5, [r1, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   1f8be:	60e6      	str	r6, [r4, #12]

	return granted_size;
}
   1f8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1f8c2:	fbb6 f5f3 	udiv	r5, r6, r3
   1f8c6:	fb03 6515 	mls	r5, r3, r5, r6
   1f8ca:	e7ea      	b.n	1f8a2 <ring_buf_get_claim+0xe>

0001f8cc <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->head + size) > buf->tail) {
   1f8cc:	6803      	ldr	r3, [r0, #0]
   1f8ce:	4419      	add	r1, r3
   1f8d0:	6843      	ldr	r3, [r0, #4]
   1f8d2:	4299      	cmp	r1, r3
{
   1f8d4:	b510      	push	{r4, lr}
   1f8d6:	4604      	mov	r4, r0
	if ((buf->head + size) > buf->tail) {
   1f8d8:	d824      	bhi.n	1f924 <ring_buf_get_finish+0x58>
		return -EINVAL;
	}

	buf->head += size;
   1f8da:	6001      	str	r1, [r0, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   1f8dc:	60c1      	str	r1, [r0, #12]
	uint32_t threshold = ring_buf_get_rewind_threshold();
   1f8de:	f7ff ff8e 	bl	1f7fe <ring_buf_get_rewind_threshold>
	if (buf->head < threshold) {
   1f8e2:	6823      	ldr	r3, [r4, #0]
   1f8e4:	4298      	cmp	r0, r3
   1f8e6:	d81b      	bhi.n	1f920 <ring_buf_get_finish+0x54>
	rewind = buf->size * (threshold / buf->size);
   1f8e8:	6923      	ldr	r3, [r4, #16]
   1f8ea:	fbb0 f0f3 	udiv	r0, r0, r3
   1f8ee:	4358      	muls	r0, r3
	__asm__ volatile(
   1f8f0:	f04f 0320 	mov.w	r3, #32
   1f8f4:	f3ef 8211 	mrs	r2, BASEPRI
   1f8f8:	f383 8811 	msr	BASEPRI, r3
   1f8fc:	f3bf 8f6f 	isb	sy
	buf->tail -= rewind;
   1f900:	6863      	ldr	r3, [r4, #4]
   1f902:	1a1b      	subs	r3, r3, r0
   1f904:	6063      	str	r3, [r4, #4]
	buf->head -= rewind;
   1f906:	6823      	ldr	r3, [r4, #0]
   1f908:	1a1b      	subs	r3, r3, r0
   1f90a:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head -= rewind;
   1f90c:	68e3      	ldr	r3, [r4, #12]
   1f90e:	1a1b      	subs	r3, r3, r0
   1f910:	60e3      	str	r3, [r4, #12]
	buf->misc.byte_mode.tmp_tail -= rewind;
   1f912:	68a3      	ldr	r3, [r4, #8]
   1f914:	1a18      	subs	r0, r3, r0
   1f916:	60a0      	str	r0, [r4, #8]
	__asm__ volatile(
   1f918:	f382 8811 	msr	BASEPRI, r2
   1f91c:	f3bf 8f6f 	isb	sy

	byte_indexes_rewind(buf);

	return 0;
   1f920:	2000      	movs	r0, #0
   1f922:	e001      	b.n	1f928 <ring_buf_get_finish+0x5c>
		return -EINVAL;
   1f924:	f06f 0015 	mvn.w	r0, #21
}
   1f928:	bd10      	pop	{r4, pc}

0001f92a <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   1f92a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f92e:	4680      	mov	r8, r0
   1f930:	460e      	mov	r6, r1
   1f932:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   1f934:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   1f936:	462a      	mov	r2, r5
   1f938:	a901      	add	r1, sp, #4
   1f93a:	4640      	mov	r0, r8
   1f93c:	f7ff ffaa 	bl	1f894 <ring_buf_get_claim>
		memcpy(data, src, partial_size);
   1f940:	9901      	ldr	r1, [sp, #4]
		partial_size = ring_buf_get_claim(buf, &src, size);
   1f942:	4604      	mov	r4, r0
		memcpy(data, src, partial_size);
   1f944:	4602      	mov	r2, r0
   1f946:	4630      	mov	r0, r6
   1f948:	f001 fead 	bl	216a6 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   1f94c:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   1f94e:	4427      	add	r7, r4
		data += partial_size;
   1f950:	4426      	add	r6, r4
	} while (size && partial_size);
   1f952:	d001      	beq.n	1f958 <ring_buf_get+0x2e>
   1f954:	2c00      	cmp	r4, #0
   1f956:	d1ee      	bne.n	1f936 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   1f958:	4639      	mov	r1, r7
   1f95a:	4640      	mov	r0, r8
   1f95c:	f7ff ffb6 	bl	1f8cc <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   1f960:	4638      	mov	r0, r7
   1f962:	b002      	add	sp, #8
   1f964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f968 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1f968:	4770      	bx	lr

0001f96a <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1f96a:	2300      	movs	r3, #0
	list->head = NULL;
   1f96c:	e9c0 3300 	strd	r3, r3, [r0]
}
   1f970:	4770      	bx	lr

0001f972 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1f972:	6803      	ldr	r3, [r0, #0]
   1f974:	b923      	cbnz	r3, 1f980 <log_list_add_tail+0xe>
		list->head = msg;
   1f976:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1f978:	2300      	movs	r3, #0
	list->tail = msg;
   1f97a:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1f97c:	600b      	str	r3, [r1, #0]
}
   1f97e:	4770      	bx	lr
		list->tail->next = msg;
   1f980:	6843      	ldr	r3, [r0, #4]
   1f982:	6019      	str	r1, [r3, #0]
   1f984:	e7f8      	b.n	1f978 <log_list_add_tail+0x6>

0001f986 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1f986:	6800      	ldr	r0, [r0, #0]
   1f988:	4770      	bx	lr

0001f98a <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1f98a:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1f98c:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1f98e:	b108      	cbz	r0, 1f994 <log_list_head_get+0xa>
		list->head = list->head->next;
   1f990:	6802      	ldr	r2, [r0, #0]
   1f992:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1f994:	4770      	bx	lr

0001f996 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1f996:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1f998:	f7e4 fd14 	bl	43c4 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1f99c:	b118      	cbz	r0, 1f9a6 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1f99e:	2301      	movs	r3, #1
   1f9a0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1f9a2:	2300      	movs	r3, #0
   1f9a4:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1f9a6:	bd08      	pop	{r3, pc}

0001f9a8 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1f9a8:	f7e7 bc48 	b.w	723c <z_timer_cycle_get_32>

0001f9ac <dummy_timestamp>:
   1f9ac:	2000      	movs	r0, #0
   1f9ae:	4770      	bx	lr

0001f9b0 <z_log_get_s_mask>:
{
   1f9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f9b2:	4605      	mov	r5, r0
	uint32_t mask = 0;
   1f9b4:	2000      	movs	r0, #0
	uint32_t arg = 0;
   1f9b6:	4603      	mov	r3, r0
	bool arm = false;
   1f9b8:	4602      	mov	r2, r0
				mask |= BIT(arg);
   1f9ba:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1f9bc:	f815 4b01 	ldrb.w	r4, [r5], #1
   1f9c0:	b10c      	cbz	r4, 1f9c6 <z_log_get_s_mask+0x16>
   1f9c2:	428b      	cmp	r3, r1
   1f9c4:	d300      	bcc.n	1f9c8 <z_log_get_s_mask+0x18>
}
   1f9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1f9c8:	2c25      	cmp	r4, #37	; 0x25
   1f9ca:	d102      	bne.n	1f9d2 <z_log_get_s_mask+0x22>
			arm = !arm;
   1f9cc:	f082 0201 	eor.w	r2, r2, #1
   1f9d0:	e7f4      	b.n	1f9bc <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1f9d2:	2a00      	cmp	r2, #0
   1f9d4:	d0f2      	beq.n	1f9bc <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1f9d6:	f044 0620 	orr.w	r6, r4, #32
   1f9da:	3e61      	subs	r6, #97	; 0x61
   1f9dc:	2e19      	cmp	r6, #25
   1f9de:	d8ed      	bhi.n	1f9bc <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1f9e0:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1f9e2:	bf04      	itt	eq
   1f9e4:	fa07 f203 	lsleq.w	r2, r7, r3
   1f9e8:	4310      	orreq	r0, r2
			arg++;
   1f9ea:	3301      	adds	r3, #1
			arm = false;
   1f9ec:	2200      	movs	r2, #0
   1f9ee:	e7e5      	b.n	1f9bc <z_log_get_s_mask+0xc>

0001f9f0 <log_0>:
{
   1f9f0:	b538      	push	{r3, r4, r5, lr}
   1f9f2:	4605      	mov	r5, r0
   1f9f4:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1f9f6:	f7ff ffce 	bl	1f996 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1f9fa:	b128      	cbz	r0, 1fa08 <log_0+0x18>
		msg->str = str;
   1f9fc:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1f9fe:	4621      	mov	r1, r4
}
   1fa00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1fa04:	f7e4 bbf8 	b.w	41f8 <msg_finalize>
}
   1fa08:	bd38      	pop	{r3, r4, r5, pc}

0001fa0a <log_1>:
{
   1fa0a:	b570      	push	{r4, r5, r6, lr}
   1fa0c:	4606      	mov	r6, r0
   1fa0e:	460d      	mov	r5, r1
   1fa10:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1fa12:	f7ff ffc0 	bl	1f996 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1fa16:	b158      	cbz	r0, 1fa30 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1fa18:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1fa1a:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1fa1c:	2101      	movs	r1, #1
   1fa1e:	f361 1207 	bfi	r2, r1, #4, #4
   1fa22:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1fa24:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1fa26:	4621      	mov	r1, r4
}
   1fa28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1fa2c:	f7e4 bbe4 	b.w	41f8 <msg_finalize>
}
   1fa30:	bd70      	pop	{r4, r5, r6, pc}

0001fa32 <log_2>:
{
   1fa32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fa36:	4680      	mov	r8, r0
   1fa38:	460f      	mov	r7, r1
   1fa3a:	4616      	mov	r6, r2
   1fa3c:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1fa3e:	f7ff ffaa 	bl	1f996 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1fa42:	b168      	cbz	r0, 1fa60 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1fa44:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1fa46:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1fa4a:	2202      	movs	r2, #2
   1fa4c:	f362 1307 	bfi	r3, r2, #4, #4
   1fa50:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1fa52:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1fa56:	4629      	mov	r1, r5
}
   1fa58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1fa5c:	f7e4 bbcc 	b.w	41f8 <msg_finalize>
}
   1fa60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fa64 <log_3>:
{
   1fa64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fa68:	4680      	mov	r8, r0
   1fa6a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1fa6e:	460f      	mov	r7, r1
   1fa70:	4616      	mov	r6, r2
   1fa72:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1fa74:	f7ff ff8f 	bl	1f996 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1fa78:	b170      	cbz	r0, 1fa98 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1fa7a:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1fa7c:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1fa80:	2203      	movs	r2, #3
   1fa82:	f362 1307 	bfi	r3, r2, #4, #4
   1fa86:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1fa88:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1fa8c:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1fa8e:	4649      	mov	r1, r9
}
   1fa90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1fa94:	f7e4 bbb0 	b.w	41f8 <msg_finalize>
}
   1fa98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001fa9c <log_n>:
{
   1fa9c:	b510      	push	{r4, lr}
   1fa9e:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1faa0:	f000 f8a1 	bl	1fbe6 <log_msg_create_n>
		if (msg == NULL) {
   1faa4:	b120      	cbz	r0, 1fab0 <log_n+0x14>
		msg_finalize(msg, src_level);
   1faa6:	4621      	mov	r1, r4
}
   1faa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1faac:	f7e4 bba4 	b.w	41f8 <msg_finalize>
}
   1fab0:	bd10      	pop	{r4, pc}

0001fab2 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1fab2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fab6:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1fab8:	8903      	ldrh	r3, [r0, #8]
{
   1faba:	f89d 8020 	ldrb.w	r8, [sp, #32]
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1fabe:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
{
   1fac2:	460e      	mov	r6, r1
   1fac4:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1fac6:	ea4f 0293 	mov.w	r2, r3, lsr #2
	if (offset >= available_len) {
   1faca:	d303      	bcc.n	1fad4 <log_msg_hexdump_data_op+0x22>
		*length = 0;
   1facc:	2300      	movs	r3, #0
   1face:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1fad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1fad4:	680b      	ldr	r3, [r1, #0]
   1fad6:	4423      	add	r3, r4
   1fad8:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1fada:	bf84      	itt	hi
   1fadc:	1b13      	subhi	r3, r2, r4
   1fade:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1fae0:	2a0c      	cmp	r2, #12
	req_len = *length;
   1fae2:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1fae6:	d92b      	bls.n	1fb40 <log_msg_hexdump_data_op+0x8e>
	if (offset < chunk_len) {
   1fae8:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1faea:	6947      	ldr	r7, [r0, #20]
	if (offset < chunk_len) {
   1faec:	d82e      	bhi.n	1fb4c <log_msg_hexdump_data_op+0x9a>
		head_data = msg->payload.ext.data.bytes;
   1faee:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1faf0:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1faf2:	454a      	cmp	r2, r9
   1faf4:	bf28      	it	cs
   1faf6:	464a      	movcs	r2, r9
   1faf8:	4615      	mov	r5, r2
		if (put_op) {
   1fafa:	4420      	add	r0, r4
   1fafc:	f1b8 0f00 	cmp.w	r8, #0
   1fb00:	d021      	beq.n	1fb46 <log_msg_hexdump_data_op+0x94>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1fb02:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1fb04:	f001 fdcf 	bl	216a6 <memcpy>
		req_len -= cpy_len;
   1fb08:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1fb0c:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1fb0e:	f1b9 0f00 	cmp.w	r9, #0
   1fb12:	d0dd      	beq.n	1fad0 <log_msg_hexdump_data_op+0x1e>
   1fb14:	2f00      	cmp	r7, #0
   1fb16:	d0db      	beq.n	1fad0 <log_msg_hexdump_data_op+0x1e>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1fb18:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1fb1c:	454d      	cmp	r5, r9
   1fb1e:	bf28      	it	cs
   1fb20:	464d      	movcs	r5, r9
		if (put_op) {
   1fb22:	1d20      	adds	r0, r4, #4
   1fb24:	4438      	add	r0, r7
			(void)memcpy(&cont->payload.bytes[offset],
   1fb26:	462a      	mov	r2, r5
		if (put_op) {
   1fb28:	f1b8 0f00 	cmp.w	r8, #0
   1fb2c:	d014      	beq.n	1fb58 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   1fb2e:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1fb30:	f001 fdb9 	bl	216a6 <memcpy>
		req_len -= cpy_len;
   1fb34:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1fb38:	683f      	ldr	r7, [r7, #0]
		data += cpy_len;
   1fb3a:	442e      	add	r6, r5
		offset = 0;
   1fb3c:	2400      	movs	r4, #0
   1fb3e:	e7e6      	b.n	1fb0e <log_msg_hexdump_data_op+0x5c>
		head_data = msg->payload.single.bytes;
   1fb40:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1fb42:	2700      	movs	r7, #0
   1fb44:	e7d5      	b.n	1faf2 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1fb46:	4601      	mov	r1, r0
   1fb48:	4630      	mov	r0, r6
   1fb4a:	e7db      	b.n	1fb04 <log_msg_hexdump_data_op+0x52>
		offset -= chunk_len;
   1fb4c:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1fb4e:	2c1b      	cmp	r4, #27
   1fb50:	d9dd      	bls.n	1fb0e <log_msg_hexdump_data_op+0x5c>
			cont = cont->next;
   1fb52:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
   1fb54:	3c1c      	subs	r4, #28
   1fb56:	e7fa      	b.n	1fb4e <log_msg_hexdump_data_op+0x9c>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1fb58:	4601      	mov	r1, r0
   1fb5a:	4630      	mov	r0, r6
   1fb5c:	e7e8      	b.n	1fb30 <log_msg_hexdump_data_op+0x7e>

0001fb5e <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1fb5e:	3004      	adds	r0, #4
   1fb60:	f3bf 8f5b 	dmb	ish
   1fb64:	e850 3f00 	ldrex	r3, [r0]
   1fb68:	3301      	adds	r3, #1
   1fb6a:	e840 3200 	strex	r2, r3, [r0]
   1fb6e:	2a00      	cmp	r2, #0
   1fb70:	d1f8      	bne.n	1fb64 <log_msg_get+0x6>
   1fb72:	f3bf 8f5b 	dmb	ish
}
   1fb76:	4770      	bx	lr

0001fb78 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1fb78:	7a40      	ldrb	r0, [r0, #9]
}
   1fb7a:	0900      	lsrs	r0, r0, #4
   1fb7c:	4770      	bx	lr

0001fb7e <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1fb7e:	7a43      	ldrb	r3, [r0, #9]
   1fb80:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1fb84:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1fb88:	d216      	bcs.n	1fbb8 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1fb8a:	2a03      	cmp	r2, #3
   1fb8c:	d803      	bhi.n	1fb96 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1fb8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1fb92:	6948      	ldr	r0, [r1, #20]
   1fb94:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1fb96:	2901      	cmp	r1, #1
   1fb98:	d803      	bhi.n	1fba2 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1fb9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1fb9e:	6988      	ldr	r0, [r1, #24]
   1fba0:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1fba2:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1fba4:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1fba6:	2906      	cmp	r1, #6
   1fba8:	d803      	bhi.n	1fbb2 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1fbaa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1fbae:	6848      	ldr	r0, [r1, #4]
   1fbb0:	4770      	bx	lr
		cont = cont->next;
   1fbb2:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1fbb4:	3907      	subs	r1, #7
		cont = cont->next;
   1fbb6:	e7f6      	b.n	1fba6 <log_msg_arg_get+0x28>
		return 0;
   1fbb8:	2000      	movs	r0, #0
}
   1fbba:	4770      	bx	lr

0001fbbc <log_msg_put>:
{
   1fbbc:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1fbbe:	1d02      	adds	r2, r0, #4
   1fbc0:	f3bf 8f5b 	dmb	ish
   1fbc4:	e852 1f00 	ldrex	r1, [r2]
   1fbc8:	3901      	subs	r1, #1
   1fbca:	e842 1c00 	strex	ip, r1, [r2]
   1fbce:	f1bc 0f00 	cmp.w	ip, #0
   1fbd2:	d1f7      	bne.n	1fbc4 <log_msg_put+0x8>
   1fbd4:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1fbd8:	685b      	ldr	r3, [r3, #4]
   1fbda:	b90b      	cbnz	r3, 1fbe0 <log_msg_put+0x24>
		msg_free(msg);
   1fbdc:	f7e4 bc06 	b.w	43ec <msg_free>
}
   1fbe0:	4770      	bx	lr

0001fbe2 <log_msg_str_get>:
}
   1fbe2:	6900      	ldr	r0, [r0, #16]
   1fbe4:	4770      	bx	lr

0001fbe6 <log_msg_create_n>:
{
   1fbe6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fbea:	4681      	mov	r9, r0
   1fbec:	4688      	mov	r8, r1
   1fbee:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1fbf0:	f7e4 fbe8 	bl	43c4 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1fbf4:	4604      	mov	r4, r0
   1fbf6:	b330      	cbz	r0, 1fc46 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1fbf8:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1fbfa:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1fbfc:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1fbfe:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1fc00:	8107      	strh	r7, [r0, #8]
   1fc02:	d909      	bls.n	1fc18 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1fc04:	2202      	movs	r2, #2
   1fc06:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1fc08:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   1fc0c:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1fc10:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1fc12:	f1ba 0f00 	cmp.w	sl, #0
   1fc16:	dc0e      	bgt.n	1fc36 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1fc18:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1fc1a:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1fc1e:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1fc22:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1fc24:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1fc26:	d818      	bhi.n	1fc5a <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1fc28:	00aa      	lsls	r2, r5, #2
   1fc2a:	4641      	mov	r1, r8
   1fc2c:	f104 0014 	add.w	r0, r4, #20
   1fc30:	f001 fd39 	bl	216a6 <memcpy>
	while (nargs != 0U) {
   1fc34:	e007      	b.n	1fc46 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1fc36:	f7e4 fbc5 	bl	43c4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1fc3a:	4606      	mov	r6, r0
   1fc3c:	b930      	cbnz	r0, 1fc4c <log_msg_create_n+0x66>
			msg_free(msg);
   1fc3e:	4620      	mov	r0, r4
   1fc40:	f7e4 fbd4 	bl	43ec <msg_free>
			return NULL;
   1fc44:	4634      	mov	r4, r6
}
   1fc46:	4620      	mov	r0, r4
   1fc48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1fc4c:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1fc50:	f1aa 0a07 	sub.w	sl, sl, #7
   1fc54:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   1fc56:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1fc58:	e7db      	b.n	1fc12 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1fc5a:	4641      	mov	r1, r8
   1fc5c:	2208      	movs	r2, #8
   1fc5e:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1fc62:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1fc64:	f001 fd1f 	bl	216a6 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1fc68:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1fc6a:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1fc6e:	2d07      	cmp	r5, #7
   1fc70:	462e      	mov	r6, r5
   1fc72:	bf28      	it	cs
   1fc74:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1fc76:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1fc7a:	4641      	mov	r1, r8
   1fc7c:	1d38      	adds	r0, r7, #4
   1fc7e:	464a      	mov	r2, r9
   1fc80:	f001 fd11 	bl	216a6 <memcpy>
	while (nargs != 0U) {
   1fc84:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1fc86:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1fc88:	44c8      	add	r8, r9
	while (nargs != 0U) {
   1fc8a:	d1f0      	bne.n	1fc6e <log_msg_create_n+0x88>
   1fc8c:	e7db      	b.n	1fc46 <log_msg_create_n+0x60>

0001fc8e <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1fc8e:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1fc90:	2400      	movs	r4, #0
   1fc92:	9400      	str	r4, [sp, #0]
   1fc94:	f7ff ff0d 	bl	1fab2 <log_msg_hexdump_data_op>
}
   1fc98:	b002      	add	sp, #8
   1fc9a:	bd10      	pop	{r4, pc}

0001fc9c <buffer_write>:
{
   1fc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fc9e:	4606      	mov	r6, r0
   1fca0:	460d      	mov	r5, r1
   1fca2:	4614      	mov	r4, r2
   1fca4:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1fca6:	4621      	mov	r1, r4
   1fca8:	4628      	mov	r0, r5
   1fcaa:	463a      	mov	r2, r7
   1fcac:	47b0      	blx	r6
	} while (len != 0);
   1fcae:	1a24      	subs	r4, r4, r0
		buf += processed;
   1fcb0:	4405      	add	r5, r0
	} while (len != 0);
   1fcb2:	d1f8      	bne.n	1fca6 <buffer_write+0xa>
}
   1fcb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fcb6 <std_print>:
{
   1fcb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fcba:	b08e      	sub	sp, #56	; 0x38
   1fcbc:	af0e      	add	r7, sp, #56	; 0x38
   1fcbe:	4680      	mov	r8, r0
   1fcc0:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1fcc2:	f7ff ff8e 	bl	1fbe2 <log_msg_str_get>
   1fcc6:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1fcc8:	4640      	mov	r0, r8
   1fcca:	f7ff ff55 	bl	1fb78 <log_msg_nargs_get>
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   1fcce:	0083      	lsls	r3, r0, #2
   1fcd0:	3307      	adds	r3, #7
   1fcd2:	f023 0307 	bic.w	r3, r3, #7
   1fcd6:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   1fcda:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   1fcdc:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1fcde:	f04f 0900 	mov.w	r9, #0
   1fce2:	45d1      	cmp	r9, sl
   1fce4:	d116      	bne.n	1fd14 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1fce6:	4640      	mov	r0, r8
   1fce8:	f7ff ff46 	bl	1fb78 <log_msg_nargs_get>
   1fcec:	280f      	cmp	r0, #15
   1fcee:	d81e      	bhi.n	1fd2e <std_print+0x78>
   1fcf0:	e8df f010 	tbh	[pc, r0, lsl #1]
   1fcf4:	00200019 	.word	0x00200019
   1fcf8:	002d0026 	.word	0x002d0026
   1fcfc:	00410036 	.word	0x00410036
   1fd00:	005d004e 	.word	0x005d004e
   1fd04:	0081006e 	.word	0x0081006e
   1fd08:	00ad0096 	.word	0x00ad0096
   1fd0c:	00e100c6 	.word	0x00e100c6
   1fd10:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   1fd14:	4649      	mov	r1, r9
   1fd16:	4640      	mov	r0, r8
   1fd18:	f7ff ff31 	bl	1fb7e <log_msg_arg_get>
   1fd1c:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1fd20:	f109 0901 	add.w	r9, r9, #1
   1fd24:	e7dd      	b.n	1fce2 <std_print+0x2c>
		print_formatted(log_output, str);
   1fd26:	4631      	mov	r1, r6
   1fd28:	4628      	mov	r0, r5
   1fd2a:	f7e4 fb9d 	bl	4468 <print_formatted>
}
   1fd2e:	46bd      	mov	sp, r7
   1fd30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1fd34:	6822      	ldr	r2, [r4, #0]
   1fd36:	4631      	mov	r1, r6
   1fd38:	4628      	mov	r0, r5
   1fd3a:	f7e4 fb95 	bl	4468 <print_formatted>
		break;
   1fd3e:	e7f6      	b.n	1fd2e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1fd40:	e9d4 2300 	ldrd	r2, r3, [r4]
   1fd44:	4631      	mov	r1, r6
   1fd46:	4628      	mov	r0, r5
   1fd48:	f7e4 fb8e 	bl	4468 <print_formatted>
		break;
   1fd4c:	e7ef      	b.n	1fd2e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1fd4e:	68a3      	ldr	r3, [r4, #8]
   1fd50:	9300      	str	r3, [sp, #0]
   1fd52:	e9d4 2300 	ldrd	r2, r3, [r4]
   1fd56:	4631      	mov	r1, r6
   1fd58:	4628      	mov	r0, r5
   1fd5a:	f7e4 fb85 	bl	4468 <print_formatted>
		break;
   1fd5e:	e7e6      	b.n	1fd2e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1fd60:	68e3      	ldr	r3, [r4, #12]
   1fd62:	9301      	str	r3, [sp, #4]
   1fd64:	68a3      	ldr	r3, [r4, #8]
   1fd66:	9300      	str	r3, [sp, #0]
   1fd68:	e9d4 2300 	ldrd	r2, r3, [r4]
   1fd6c:	4631      	mov	r1, r6
   1fd6e:	4628      	mov	r0, r5
   1fd70:	f7e4 fb7a 	bl	4468 <print_formatted>
		break;
   1fd74:	e7db      	b.n	1fd2e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1fd76:	6923      	ldr	r3, [r4, #16]
   1fd78:	9302      	str	r3, [sp, #8]
   1fd7a:	68e3      	ldr	r3, [r4, #12]
   1fd7c:	9301      	str	r3, [sp, #4]
   1fd7e:	68a3      	ldr	r3, [r4, #8]
   1fd80:	9300      	str	r3, [sp, #0]
   1fd82:	e9d4 2300 	ldrd	r2, r3, [r4]
   1fd86:	4631      	mov	r1, r6
   1fd88:	4628      	mov	r0, r5
   1fd8a:	f7e4 fb6d 	bl	4468 <print_formatted>
		break;
   1fd8e:	e7ce      	b.n	1fd2e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1fd90:	6963      	ldr	r3, [r4, #20]
   1fd92:	9303      	str	r3, [sp, #12]
   1fd94:	6923      	ldr	r3, [r4, #16]
   1fd96:	9302      	str	r3, [sp, #8]
   1fd98:	68e3      	ldr	r3, [r4, #12]
   1fd9a:	9301      	str	r3, [sp, #4]
   1fd9c:	68a3      	ldr	r3, [r4, #8]
   1fd9e:	9300      	str	r3, [sp, #0]
   1fda0:	e9d4 2300 	ldrd	r2, r3, [r4]
   1fda4:	4631      	mov	r1, r6
   1fda6:	4628      	mov	r0, r5
   1fda8:	f7e4 fb5e 	bl	4468 <print_formatted>
		break;
   1fdac:	e7bf      	b.n	1fd2e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1fdae:	69a3      	ldr	r3, [r4, #24]
   1fdb0:	9304      	str	r3, [sp, #16]
   1fdb2:	6963      	ldr	r3, [r4, #20]
   1fdb4:	9303      	str	r3, [sp, #12]
   1fdb6:	6923      	ldr	r3, [r4, #16]
   1fdb8:	9302      	str	r3, [sp, #8]
   1fdba:	68e3      	ldr	r3, [r4, #12]
   1fdbc:	9301      	str	r3, [sp, #4]
   1fdbe:	68a3      	ldr	r3, [r4, #8]
   1fdc0:	9300      	str	r3, [sp, #0]
   1fdc2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1fdc6:	4631      	mov	r1, r6
   1fdc8:	4628      	mov	r0, r5
   1fdca:	f7e4 fb4d 	bl	4468 <print_formatted>
		break;
   1fdce:	e7ae      	b.n	1fd2e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1fdd0:	69e3      	ldr	r3, [r4, #28]
   1fdd2:	9305      	str	r3, [sp, #20]
   1fdd4:	69a3      	ldr	r3, [r4, #24]
   1fdd6:	9304      	str	r3, [sp, #16]
   1fdd8:	6963      	ldr	r3, [r4, #20]
   1fdda:	9303      	str	r3, [sp, #12]
   1fddc:	6923      	ldr	r3, [r4, #16]
   1fdde:	9302      	str	r3, [sp, #8]
   1fde0:	68e3      	ldr	r3, [r4, #12]
   1fde2:	9301      	str	r3, [sp, #4]
   1fde4:	68a3      	ldr	r3, [r4, #8]
   1fde6:	9300      	str	r3, [sp, #0]
   1fde8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1fdec:	4631      	mov	r1, r6
   1fdee:	4628      	mov	r0, r5
   1fdf0:	f7e4 fb3a 	bl	4468 <print_formatted>
		break;
   1fdf4:	e79b      	b.n	1fd2e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1fdf6:	6a23      	ldr	r3, [r4, #32]
   1fdf8:	9306      	str	r3, [sp, #24]
   1fdfa:	69e3      	ldr	r3, [r4, #28]
   1fdfc:	9305      	str	r3, [sp, #20]
   1fdfe:	69a3      	ldr	r3, [r4, #24]
   1fe00:	9304      	str	r3, [sp, #16]
   1fe02:	6963      	ldr	r3, [r4, #20]
   1fe04:	9303      	str	r3, [sp, #12]
   1fe06:	6923      	ldr	r3, [r4, #16]
   1fe08:	9302      	str	r3, [sp, #8]
   1fe0a:	68e3      	ldr	r3, [r4, #12]
   1fe0c:	9301      	str	r3, [sp, #4]
   1fe0e:	68a3      	ldr	r3, [r4, #8]
   1fe10:	9300      	str	r3, [sp, #0]
   1fe12:	e9d4 2300 	ldrd	r2, r3, [r4]
   1fe16:	4631      	mov	r1, r6
   1fe18:	4628      	mov	r0, r5
   1fe1a:	f7e4 fb25 	bl	4468 <print_formatted>
		break;
   1fe1e:	e786      	b.n	1fd2e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1fe20:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fe22:	9307      	str	r3, [sp, #28]
   1fe24:	6a23      	ldr	r3, [r4, #32]
   1fe26:	9306      	str	r3, [sp, #24]
   1fe28:	69e3      	ldr	r3, [r4, #28]
   1fe2a:	9305      	str	r3, [sp, #20]
   1fe2c:	69a3      	ldr	r3, [r4, #24]
   1fe2e:	9304      	str	r3, [sp, #16]
   1fe30:	6963      	ldr	r3, [r4, #20]
   1fe32:	9303      	str	r3, [sp, #12]
   1fe34:	6923      	ldr	r3, [r4, #16]
   1fe36:	9302      	str	r3, [sp, #8]
   1fe38:	68e3      	ldr	r3, [r4, #12]
   1fe3a:	9301      	str	r3, [sp, #4]
   1fe3c:	68a3      	ldr	r3, [r4, #8]
   1fe3e:	9300      	str	r3, [sp, #0]
   1fe40:	e9d4 2300 	ldrd	r2, r3, [r4]
   1fe44:	4631      	mov	r1, r6
   1fe46:	4628      	mov	r0, r5
   1fe48:	f7e4 fb0e 	bl	4468 <print_formatted>
		break;
   1fe4c:	e76f      	b.n	1fd2e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1fe4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1fe50:	9308      	str	r3, [sp, #32]
   1fe52:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fe54:	9307      	str	r3, [sp, #28]
   1fe56:	6a23      	ldr	r3, [r4, #32]
   1fe58:	9306      	str	r3, [sp, #24]
   1fe5a:	69e3      	ldr	r3, [r4, #28]
   1fe5c:	9305      	str	r3, [sp, #20]
   1fe5e:	69a3      	ldr	r3, [r4, #24]
   1fe60:	9304      	str	r3, [sp, #16]
   1fe62:	6963      	ldr	r3, [r4, #20]
   1fe64:	9303      	str	r3, [sp, #12]
   1fe66:	6923      	ldr	r3, [r4, #16]
   1fe68:	9302      	str	r3, [sp, #8]
   1fe6a:	68e3      	ldr	r3, [r4, #12]
   1fe6c:	9301      	str	r3, [sp, #4]
   1fe6e:	68a3      	ldr	r3, [r4, #8]
   1fe70:	9300      	str	r3, [sp, #0]
   1fe72:	e9d4 2300 	ldrd	r2, r3, [r4]
   1fe76:	4631      	mov	r1, r6
   1fe78:	4628      	mov	r0, r5
   1fe7a:	f7e4 faf5 	bl	4468 <print_formatted>
		break;
   1fe7e:	e756      	b.n	1fd2e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1fe80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1fe82:	9309      	str	r3, [sp, #36]	; 0x24
   1fe84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1fe86:	9308      	str	r3, [sp, #32]
   1fe88:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fe8a:	9307      	str	r3, [sp, #28]
   1fe8c:	6a23      	ldr	r3, [r4, #32]
   1fe8e:	9306      	str	r3, [sp, #24]
   1fe90:	69e3      	ldr	r3, [r4, #28]
   1fe92:	9305      	str	r3, [sp, #20]
   1fe94:	69a3      	ldr	r3, [r4, #24]
   1fe96:	9304      	str	r3, [sp, #16]
   1fe98:	6963      	ldr	r3, [r4, #20]
   1fe9a:	9303      	str	r3, [sp, #12]
   1fe9c:	6923      	ldr	r3, [r4, #16]
   1fe9e:	9302      	str	r3, [sp, #8]
   1fea0:	68e3      	ldr	r3, [r4, #12]
   1fea2:	9301      	str	r3, [sp, #4]
   1fea4:	68a3      	ldr	r3, [r4, #8]
   1fea6:	9300      	str	r3, [sp, #0]
   1fea8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1feac:	4631      	mov	r1, r6
   1feae:	4628      	mov	r0, r5
   1feb0:	f7e4 fada 	bl	4468 <print_formatted>
		break;
   1feb4:	e73b      	b.n	1fd2e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1feb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1feb8:	930a      	str	r3, [sp, #40]	; 0x28
   1feba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1febc:	9309      	str	r3, [sp, #36]	; 0x24
   1febe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1fec0:	9308      	str	r3, [sp, #32]
   1fec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fec4:	9307      	str	r3, [sp, #28]
   1fec6:	6a23      	ldr	r3, [r4, #32]
   1fec8:	9306      	str	r3, [sp, #24]
   1feca:	69e3      	ldr	r3, [r4, #28]
   1fecc:	9305      	str	r3, [sp, #20]
   1fece:	69a3      	ldr	r3, [r4, #24]
   1fed0:	9304      	str	r3, [sp, #16]
   1fed2:	6963      	ldr	r3, [r4, #20]
   1fed4:	9303      	str	r3, [sp, #12]
   1fed6:	6923      	ldr	r3, [r4, #16]
   1fed8:	9302      	str	r3, [sp, #8]
   1feda:	68e3      	ldr	r3, [r4, #12]
   1fedc:	9301      	str	r3, [sp, #4]
   1fede:	68a3      	ldr	r3, [r4, #8]
   1fee0:	9300      	str	r3, [sp, #0]
   1fee2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1fee6:	4631      	mov	r1, r6
   1fee8:	4628      	mov	r0, r5
   1feea:	f7e4 fabd 	bl	4468 <print_formatted>
		break;
   1feee:	e71e      	b.n	1fd2e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1fef0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1fef2:	930b      	str	r3, [sp, #44]	; 0x2c
   1fef4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1fef6:	930a      	str	r3, [sp, #40]	; 0x28
   1fef8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1fefa:	9309      	str	r3, [sp, #36]	; 0x24
   1fefc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1fefe:	9308      	str	r3, [sp, #32]
   1ff00:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ff02:	9307      	str	r3, [sp, #28]
   1ff04:	6a23      	ldr	r3, [r4, #32]
   1ff06:	9306      	str	r3, [sp, #24]
   1ff08:	69e3      	ldr	r3, [r4, #28]
   1ff0a:	9305      	str	r3, [sp, #20]
   1ff0c:	69a3      	ldr	r3, [r4, #24]
   1ff0e:	9304      	str	r3, [sp, #16]
   1ff10:	6963      	ldr	r3, [r4, #20]
   1ff12:	9303      	str	r3, [sp, #12]
   1ff14:	6923      	ldr	r3, [r4, #16]
   1ff16:	9302      	str	r3, [sp, #8]
   1ff18:	68e3      	ldr	r3, [r4, #12]
   1ff1a:	9301      	str	r3, [sp, #4]
   1ff1c:	68a3      	ldr	r3, [r4, #8]
   1ff1e:	9300      	str	r3, [sp, #0]
   1ff20:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ff24:	4631      	mov	r1, r6
   1ff26:	4628      	mov	r0, r5
   1ff28:	f7e4 fa9e 	bl	4468 <print_formatted>
		break;
   1ff2c:	e6ff      	b.n	1fd2e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1ff2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1ff30:	930c      	str	r3, [sp, #48]	; 0x30
   1ff32:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ff34:	930b      	str	r3, [sp, #44]	; 0x2c
   1ff36:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ff38:	930a      	str	r3, [sp, #40]	; 0x28
   1ff3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ff3c:	9309      	str	r3, [sp, #36]	; 0x24
   1ff3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ff40:	9308      	str	r3, [sp, #32]
   1ff42:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ff44:	9307      	str	r3, [sp, #28]
   1ff46:	6a23      	ldr	r3, [r4, #32]
   1ff48:	9306      	str	r3, [sp, #24]
   1ff4a:	69e3      	ldr	r3, [r4, #28]
   1ff4c:	9305      	str	r3, [sp, #20]
   1ff4e:	69a3      	ldr	r3, [r4, #24]
   1ff50:	9304      	str	r3, [sp, #16]
   1ff52:	6963      	ldr	r3, [r4, #20]
   1ff54:	9303      	str	r3, [sp, #12]
   1ff56:	6923      	ldr	r3, [r4, #16]
   1ff58:	9302      	str	r3, [sp, #8]
   1ff5a:	68e3      	ldr	r3, [r4, #12]
   1ff5c:	9301      	str	r3, [sp, #4]
   1ff5e:	68a3      	ldr	r3, [r4, #8]
   1ff60:	9300      	str	r3, [sp, #0]
   1ff62:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ff66:	4631      	mov	r1, r6
   1ff68:	4628      	mov	r0, r5
   1ff6a:	f7e4 fa7d 	bl	4468 <print_formatted>
}
   1ff6e:	e6de      	b.n	1fd2e <std_print+0x78>

0001ff70 <log_output_flush>:
		     log_output->control_block->offset,
   1ff70:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   1ff72:	6881      	ldr	r1, [r0, #8]
{
   1ff74:	b510      	push	{r4, lr}
   1ff76:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1ff78:	e9d2 2300 	ldrd	r2, r3, [r2]
   1ff7c:	6800      	ldr	r0, [r0, #0]
   1ff7e:	f7ff fe8d 	bl	1fc9c <buffer_write>
	log_output->control_block->offset = 0;
   1ff82:	6863      	ldr	r3, [r4, #4]
   1ff84:	2200      	movs	r2, #0
   1ff86:	601a      	str	r2, [r3, #0]
}
   1ff88:	bd10      	pop	{r4, pc}

0001ff8a <out_func>:
{
   1ff8a:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ff8c:	684b      	ldr	r3, [r1, #4]
   1ff8e:	681a      	ldr	r2, [r3, #0]
   1ff90:	68cb      	ldr	r3, [r1, #12]
   1ff92:	429a      	cmp	r2, r3
{
   1ff94:	4605      	mov	r5, r0
   1ff96:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ff98:	d102      	bne.n	1ffa0 <out_func+0x16>
		log_output_flush(out_ctx);
   1ff9a:	4608      	mov	r0, r1
   1ff9c:	f7ff ffe8 	bl	1ff70 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ffa0:	6863      	ldr	r3, [r4, #4]
   1ffa2:	f3bf 8f5b 	dmb	ish
   1ffa6:	e853 2f00 	ldrex	r2, [r3]
   1ffaa:	1c51      	adds	r1, r2, #1
   1ffac:	e843 1000 	strex	r0, r1, [r3]
   1ffb0:	2800      	cmp	r0, #0
   1ffb2:	d1f8      	bne.n	1ffa6 <out_func+0x1c>
   1ffb4:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1ffb8:	68a3      	ldr	r3, [r4, #8]
   1ffba:	549d      	strb	r5, [r3, r2]
}
   1ffbc:	2000      	movs	r0, #0
   1ffbe:	bd38      	pop	{r3, r4, r5, pc}

0001ffc0 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1ffc0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1ffc4:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1ffc8:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1ffca:	4640      	mov	r0, r8
{
   1ffcc:	461f      	mov	r7, r3
   1ffce:	460c      	mov	r4, r1
   1ffd0:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1ffd2:	f001 fb45 	bl	21660 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1ffd6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1ffda:	9300      	str	r3, [sp, #0]
   1ffdc:	b280      	uxth	r0, r0
   1ffde:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1ffe2:	463b      	mov	r3, r7
   1ffe4:	4632      	mov	r2, r6
   1ffe6:	4621      	mov	r1, r4
   1ffe8:	4628      	mov	r0, r5
   1ffea:	f002 fe77 	bl	22cdc <bt_gatt_attr_read>
}
   1ffee:	b004      	add	sp, #16
   1fff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fff4 <usb_get_dev_data_by_cfg>:
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   1fff4:	6800      	ldr	r0, [r0, #0]
   1fff6:	b158      	cbz	r0, 20010 <usb_get_dev_data_by_cfg+0x1c>
   1fff8:	3804      	subs	r0, #4
   1fffa:	b900      	cbnz	r0, 1fffe <usb_get_dev_data_by_cfg+0xa>
   1fffc:	4770      	bx	lr
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
   1fffe:	6803      	ldr	r3, [r0, #0]

		if (cfg_cur == cfg) {
   20000:	685b      	ldr	r3, [r3, #4]
   20002:	428b      	cmp	r3, r1
   20004:	d004      	beq.n	20010 <usb_get_dev_data_by_cfg+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20006:	1d03      	adds	r3, r0, #4
   20008:	d001      	beq.n	2000e <usb_get_dev_data_by_cfg+0x1a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2000a:	6840      	ldr	r0, [r0, #4]
   2000c:	e7f3      	b.n	1fff6 <usb_get_dev_data_by_cfg+0x2>
		}
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
   2000e:	4618      	mov	r0, r3
}
   20010:	4770      	bx	lr

00020012 <usb_get_dev_data_by_iface>:
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   20012:	6800      	ldr	r0, [r0, #0]
   20014:	b168      	cbz	r0, 20032 <usb_get_dev_data_by_iface+0x20>
   20016:	3804      	subs	r0, #4
   20018:	b900      	cbnz	r0, 2001c <usb_get_dev_data_by_iface+0xa>
   2001a:	4770      	bx	lr
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   2001c:	6803      	ldr	r3, [r0, #0]
		const struct usb_if_descriptor *if_desc =
   2001e:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   20020:	685b      	ldr	r3, [r3, #4]
   20022:	789b      	ldrb	r3, [r3, #2]
   20024:	428b      	cmp	r3, r1
   20026:	d004      	beq.n	20032 <usb_get_dev_data_by_iface+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20028:	1d03      	adds	r3, r0, #4
   2002a:	d001      	beq.n	20030 <usb_get_dev_data_by_iface+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2002c:	6840      	ldr	r0, [r0, #4]
   2002e:	e7f1      	b.n	20014 <usb_get_dev_data_by_iface+0x2>
		}
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
   20030:	4618      	mov	r0, r3
}
   20032:	4770      	bx	lr

00020034 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
   20034:	b530      	push	{r4, r5, lr}
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   20036:	6800      	ldr	r0, [r0, #0]
   20038:	b198      	cbz	r0, 20062 <usb_get_dev_data_by_ep+0x2e>
   2003a:	3804      	subs	r0, #4
   2003c:	b188      	cbz	r0, 20062 <usb_get_dev_data_by_ep+0x2e>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   2003e:	6803      	ldr	r3, [r0, #0]
   20040:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   20042:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   20044:	7f1d      	ldrb	r5, [r3, #28]
			if (ep_data[i].ep_addr == ep) {
   20046:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   20048:	2300      	movs	r3, #0
   2004a:	b2dc      	uxtb	r4, r3
   2004c:	42a5      	cmp	r5, r4
   2004e:	d803      	bhi.n	20058 <usb_get_dev_data_by_ep+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode)
   20050:	1d03      	adds	r3, r0, #4
   20052:	d007      	beq.n	20064 <usb_get_dev_data_by_ep+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20054:	6840      	ldr	r0, [r0, #4]
   20056:	e7ef      	b.n	20038 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
   20058:	3301      	adds	r3, #1
   2005a:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
   2005e:	428c      	cmp	r4, r1
   20060:	d1f3      	bne.n	2004a <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   20062:	bd30      	pop	{r4, r5, pc}
	return NULL;
   20064:	4618      	mov	r0, r3
   20066:	e7fc      	b.n	20062 <usb_get_dev_data_by_ep+0x2e>

00020068 <cdc_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   20068:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   2006a:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   2006c:	3101      	adds	r1, #1
   2006e:	b2c9      	uxtb	r1, r1
   20070:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   20074:	76c1      	strb	r1, [r0, #27]
}
   20076:	4770      	bx	lr

00020078 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   20078:	e950 3108 	ldrd	r3, r1, [r0, #-32]
   2007c:	6f00      	ldr	r0, [r0, #112]	; 0x70
   2007e:	4718      	bx	r3

00020080 <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
   20080:	68c3      	ldr	r3, [r0, #12]
   20082:	2200      	movs	r2, #0
   20084:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
   20088:	4770      	bx	lr

0002008a <cdc_acm_irq_tx_ready>:
	if (dev_data->tx_ready) {
   2008a:	68c3      	ldr	r3, [r0, #12]
}
   2008c:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
   20090:	4770      	bx	lr

00020092 <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
   20092:	68c3      	ldr	r3, [r0, #12]
   20094:	2200      	movs	r2, #0
   20096:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
   2009a:	4770      	bx	lr

0002009c <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
   2009c:	68c3      	ldr	r3, [r0, #12]
}
   2009e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
   200a2:	4770      	bx	lr

000200a4 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   200a4:	68c3      	ldr	r3, [r0, #12]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   200a6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   200aa:	b112      	cbz	r2, 200b2 <cdc_acm_irq_is_pending+0xe>
   200ac:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   200b0:	b92a      	cbnz	r2, 200be <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   200b2:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
   200b6:	b118      	cbz	r0, 200c0 <cdc_acm_irq_is_pending+0x1c>
		return 0;
   200b8:	f893 003b 	ldrb.w	r0, [r3, #59]	; 0x3b
   200bc:	4770      	bx	lr
		return 1;
   200be:	2001      	movs	r0, #1
}
   200c0:	4770      	bx	lr

000200c2 <cdc_acm_irq_update>:
}
   200c2:	2001      	movs	r0, #1
   200c4:	4770      	bx	lr

000200c6 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   200c6:	68c3      	ldr	r3, [r0, #12]
	dev_data->cb_data = cb_data;
   200c8:	e9c3 1200 	strd	r1, r2, [r3]
}
   200cc:	4770      	bx	lr

000200ce <cdc_acm_line_ctrl_get>:
static int cdc_acm_line_ctrl_get(const struct device *dev,
				 uint32_t ctrl, uint32_t *val)
{
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);

	switch (ctrl) {
   200ce:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   200d0:	68c3      	ldr	r3, [r0, #12]
	switch (ctrl) {
   200d2:	d008      	beq.n	200e6 <cdc_acm_line_ctrl_get+0x18>
   200d4:	2904      	cmp	r1, #4
   200d6:	d00b      	beq.n	200f0 <cdc_acm_line_ctrl_get+0x22>
   200d8:	2901      	cmp	r1, #1
   200da:	d10e      	bne.n	200fa <cdc_acm_line_ctrl_get+0x2c>
	case UART_LINE_CTRL_BAUD_RATE:
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   200dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
		return 0;
	case UART_LINE_CTRL_RTS:
		*val = (dev_data->line_state &
   200e0:	6013      	str	r3, [r2, #0]
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
		return 0;
   200e2:	2000      	movs	r0, #0
   200e4:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
   200e6:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
   200ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
   200ee:	e7f7      	b.n	200e0 <cdc_acm_line_ctrl_get+0x12>
	case UART_LINE_CTRL_DTR:
		*val = (dev_data->line_state &
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
   200f0:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
   200f4:	f003 0301 	and.w	r3, r3, #1
   200f8:	e7f2      	b.n	200e0 <cdc_acm_line_ctrl_get+0x12>
	switch (ctrl) {
   200fa:	f06f 0022 	mvn.w	r0, #34	; 0x22
		return 0;
	}

	return -ENOTSUP;
}
   200fe:	4770      	bx	lr

00020100 <cdc_acm_poll_in>:
{
	ARG_UNUSED(dev);
	ARG_UNUSED(c);

	return -ENOTSUP;
}
   20100:	f06f 0022 	mvn.w	r0, #34	; 0x22
   20104:	4770      	bx	lr

00020106 <cdc_acm_fifo_read>:
{
   20106:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   20108:	68c4      	ldr	r4, [r0, #12]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   2010a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
   2010c:	f7ff fc0d 	bl	1f92a <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   20110:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   20112:	e9d3 3200 	ldrd	r3, r2, [r3]
   20116:	429a      	cmp	r2, r3
		dev_data->rx_ready = false;
   20118:	bf04      	itt	eq
   2011a:	2300      	moveq	r3, #0
   2011c:	f884 3039 	strbeq.w	r3, [r4, #57]	; 0x39
}
   20120:	bd10      	pop	{r4, pc}

00020122 <cdc_acm_line_ctrl_set>:
	switch (ctrl) {
   20122:	2940      	cmp	r1, #64	; 0x40
{
   20124:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   20126:	68c3      	ldr	r3, [r0, #12]
	switch (ctrl) {
   20128:	d043      	beq.n	201b2 <cdc_acm_line_ctrl_set+0x90>
   2012a:	d813      	bhi.n	20154 <cdc_acm_line_ctrl_set+0x32>
   2012c:	2910      	cmp	r1, #16
   2012e:	d033      	beq.n	20198 <cdc_acm_line_ctrl_set+0x76>
   20130:	d806      	bhi.n	20140 <cdc_acm_line_ctrl_set+0x1e>
   20132:	2901      	cmp	r1, #1
   20134:	d01e      	beq.n	20174 <cdc_acm_line_ctrl_set+0x52>
   20136:	2908      	cmp	r1, #8
   20138:	d020      	beq.n	2017c <cdc_acm_line_ctrl_set+0x5a>
   2013a:	f06f 0012 	mvn.w	r0, #18
}
   2013e:	bd08      	pop	{r3, pc}
	switch (ctrl) {
   20140:	2920      	cmp	r1, #32
   20142:	d1fa      	bne.n	2013a <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
   20144:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
   20148:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
   2014c:	b34a      	cbz	r2, 201a2 <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
   2014e:	f041 0104 	orr.w	r1, r1, #4
   20152:	e026      	b.n	201a2 <cdc_acm_line_ctrl_set+0x80>
	switch (ctrl) {
   20154:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   20158:	d034      	beq.n	201c4 <cdc_acm_line_ctrl_set+0xa2>
   2015a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2015e:	d03a      	beq.n	201d6 <cdc_acm_line_ctrl_set+0xb4>
   20160:	2980      	cmp	r1, #128	; 0x80
   20162:	d1ea      	bne.n	2013a <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
   20164:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
   20168:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
   2016c:	b1ca      	cbz	r2, 201a2 <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
   2016e:	f041 0110 	orr.w	r1, r1, #16
   20172:	e016      	b.n	201a2 <cdc_acm_line_ctrl_set+0x80>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
   20174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		return 0;
   20178:	2000      	movs	r0, #0
   2017a:	e7e0      	b.n	2013e <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
   2017c:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
   20180:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
   20184:	b92a      	cbnz	r2, 20192 <cdc_acm_line_ctrl_set+0x70>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   20186:	f883 108c 	strb.w	r1, [r3, #140]	; 0x8c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
   2018a:	2101      	movs	r1, #1
		cdc_acm_send_notification(dev, dev_data->serial_state);
   2018c:	f7e5 fca0 	bl	5ad0 <cdc_acm_send_notification>
   20190:	e7f2      	b.n	20178 <cdc_acm_line_ctrl_set+0x56>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   20192:	f041 0101 	orr.w	r1, r1, #1
   20196:	e7f6      	b.n	20186 <cdc_acm_line_ctrl_set+0x64>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
   20198:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
   2019c:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
   201a0:	b922      	cbnz	r2, 201ac <cdc_acm_line_ctrl_set+0x8a>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   201a2:	f883 108c 	strb.w	r1, [r3, #140]	; 0x8c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   201a6:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
   201aa:	e7ef      	b.n	2018c <cdc_acm_line_ctrl_set+0x6a>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
   201ac:	f041 0102 	orr.w	r1, r1, #2
   201b0:	e7f7      	b.n	201a2 <cdc_acm_line_ctrl_set+0x80>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
   201b2:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
   201b6:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
   201ba:	2a00      	cmp	r2, #0
   201bc:	d0f1      	beq.n	201a2 <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
   201be:	f041 0108 	orr.w	r1, r1, #8
   201c2:	e7ee      	b.n	201a2 <cdc_acm_line_ctrl_set+0x80>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
   201c4:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
   201c8:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
   201cc:	2a00      	cmp	r2, #0
   201ce:	d0e8      	beq.n	201a2 <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
   201d0:	f041 0120 	orr.w	r1, r1, #32
   201d4:	e7e5      	b.n	201a2 <cdc_acm_line_ctrl_set+0x80>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
   201d6:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
   201da:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
   201de:	2a00      	cmp	r2, #0
   201e0:	d0df      	beq.n	201a2 <cdc_acm_line_ctrl_set+0x80>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   201e2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   201e6:	e7dc      	b.n	201a2 <cdc_acm_line_ctrl_set+0x80>

000201e8 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
   201e8:	2301      	movs	r3, #1
{
   201ea:	b510      	push	{r4, lr}
   201ec:	4614      	mov	r4, r2
	dev_data->tx_ready = true;
   201ee:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	z_impl_k_sem_give(sem);
   201f2:	f102 0008 	add.w	r0, r2, #8
   201f6:	f7fe fa47 	bl	1e688 <z_impl_k_sem_give>
	if (dev_data->cb && dev_data->tx_irq_ena) {
   201fa:	6823      	ldr	r3, [r4, #0]
   201fc:	b133      	cbz	r3, 2020c <cdc_acm_write_cb+0x24>
   201fe:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   20202:	b11b      	cbz	r3, 2020c <cdc_acm_write_cb+0x24>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   20204:	f104 0020 	add.w	r0, r4, #32
   20208:	f7e5 fcb0 	bl	5b6c <k_work_submit_to_queue.constprop.0>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
   2020c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   20210:	e9d3 3200 	ldrd	r3, r2, [r3]
   20214:	429a      	cmp	r2, r3
   20216:	d005      	beq.n	20224 <cdc_acm_write_cb+0x3c>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
   20218:	f104 002c 	add.w	r0, r4, #44	; 0x2c
}
   2021c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
   20220:	f7e5 bca4 	b.w	5b6c <k_work_submit_to_queue.constprop.0>
}
   20224:	bd10      	pop	{r4, pc}

00020226 <cdc_acm_poll_out>:
 * The UART poll method for USB UART is simulated by waiting till
 * we get the next BULK In upcall from the USB device controller or 100 ms.
 */
static void cdc_acm_poll_out(const struct device *dev,
				      unsigned char c)
{
   20226:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);

	cdc_acm_fifo_fill(dev, &c, 1);
   20228:	2201      	movs	r2, #1
{
   2022a:	f88d 1007 	strb.w	r1, [sp, #7]
	cdc_acm_fifo_fill(dev, &c, 1);
   2022e:	f10d 0107 	add.w	r1, sp, #7
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   20232:	68c4      	ldr	r4, [r0, #12]
	cdc_acm_fifo_fill(dev, &c, 1);
   20234:	f7e5 fcb2 	bl	5b9c <cdc_acm_fifo_fill>
	return z_impl_k_sem_take(sem, timeout);
   20238:	f640 42cd 	movw	r2, #3277	; 0xccd
   2023c:	2300      	movs	r3, #0
   2023e:	f104 0008 	add.w	r0, r4, #8
   20242:	f7fe fa47 	bl	1e6d4 <z_impl_k_sem_take>
	k_sem_take(&dev_data->poll_wait_sem, K_MSEC(100));
}
   20246:	b002      	add	sp, #8
   20248:	bd10      	pop	{r4, pc}

0002024a <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   2024a:	68c0      	ldr	r0, [r0, #12]
	dev_data->tx_irq_ena = true;
   2024c:	2301      	movs	r3, #1
   2024e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
	if (dev_data->cb && dev_data->tx_ready) {
   20252:	6803      	ldr	r3, [r0, #0]
   20254:	b12b      	cbz	r3, 20262 <cdc_acm_irq_tx_enable+0x18>
   20256:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   2025a:	b113      	cbz	r3, 20262 <cdc_acm_irq_tx_enable+0x18>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   2025c:	3020      	adds	r0, #32
   2025e:	f7e5 bc85 	b.w	5b6c <k_work_submit_to_queue.constprop.0>
}
   20262:	4770      	bx	lr

00020264 <cdc_acm_irq_rx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   20264:	68c0      	ldr	r0, [r0, #12]
	dev_data->rx_irq_ena = true;
   20266:	2301      	movs	r3, #1
   20268:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
	if (dev_data->cb && dev_data->rx_ready) {
   2026c:	6803      	ldr	r3, [r0, #0]
   2026e:	b12b      	cbz	r3, 2027c <cdc_acm_irq_rx_enable+0x18>
   20270:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   20274:	b113      	cbz	r3, 2027c <cdc_acm_irq_rx_enable+0x18>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   20276:	3020      	adds	r0, #32
   20278:	f7e5 bc78 	b.w	5b6c <k_work_submit_to_queue.constprop.0>
}
   2027c:	4770      	bx	lr

0002027e <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2027e:	68c2      	ldr	r2, [r0, #12]
   20280:	b2cb      	uxtb	r3, r1
   20282:	210c      	movs	r1, #12
   20284:	fb03 2101 	mla	r1, r3, r1, r2
   20288:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   2028a:	f000 0007 	and.w	r0, r0, #7
   2028e:	4770      	bx	lr

00020290 <set_off_state>:
	__asm__ volatile(
   20290:	f04f 0320 	mov.w	r3, #32
   20294:	f3ef 8211 	mrs	r2, BASEPRI
   20298:	f383 8811 	msr	BASEPRI, r3
   2029c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   202a0:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   202a2:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   202a6:	d001      	beq.n	202ac <set_off_state+0x1c>
   202a8:	428b      	cmp	r3, r1
   202aa:	d107      	bne.n	202bc <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   202ac:	2301      	movs	r3, #1
   202ae:	6003      	str	r3, [r0, #0]
	int err = 0;
   202b0:	2000      	movs	r0, #0
	__asm__ volatile(
   202b2:	f382 8811 	msr	BASEPRI, r2
   202b6:	f3bf 8f6f 	isb	sy
}
   202ba:	4770      	bx	lr
		err = -EPERM;
   202bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   202c0:	e7f7      	b.n	202b2 <set_off_state+0x22>

000202c2 <set_starting_state>:
{
   202c2:	b510      	push	{r4, lr}
	__asm__ volatile(
   202c4:	f04f 0320 	mov.w	r3, #32
   202c8:	f3ef 8211 	mrs	r2, BASEPRI
   202cc:	f383 8811 	msr	BASEPRI, r3
   202d0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   202d4:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   202d6:	f003 0407 	and.w	r4, r3, #7
   202da:	2c01      	cmp	r4, #1
   202dc:	d106      	bne.n	202ec <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   202de:	6001      	str	r1, [r0, #0]
	int err = 0;
   202e0:	2000      	movs	r0, #0
	__asm__ volatile(
   202e2:	f382 8811 	msr	BASEPRI, r2
   202e6:	f3bf 8f6f 	isb	sy
}
   202ea:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   202ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   202f0:	428b      	cmp	r3, r1
		err = -EALREADY;
   202f2:	bf14      	ite	ne
   202f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   202f8:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   202fc:	e7f1      	b.n	202e2 <set_starting_state+0x20>

000202fe <set_on_state>:
	__asm__ volatile(
   202fe:	f04f 0320 	mov.w	r3, #32
   20302:	f3ef 8211 	mrs	r2, BASEPRI
   20306:	f383 8811 	msr	BASEPRI, r3
   2030a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2030e:	6803      	ldr	r3, [r0, #0]
   20310:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   20314:	f043 0302 	orr.w	r3, r3, #2
   20318:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2031a:	f382 8811 	msr	BASEPRI, r2
   2031e:	f3bf 8f6f 	isb	sy
}
   20322:	4770      	bx	lr

00020324 <onoff_started_callback>:
	return &data->mgr[type];
   20324:	68c0      	ldr	r0, [r0, #12]
{
   20326:	b410      	push	{r4}
	return &data->mgr[type];
   20328:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2032a:	241c      	movs	r4, #28
   2032c:	fb03 0004 	mla	r0, r3, r4, r0
   20330:	2100      	movs	r1, #0
}
   20332:	bc10      	pop	{r4}
	notify(mgr, 0);
   20334:	4710      	bx	r2

00020336 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   20336:	2000      	movs	r0, #0
   20338:	f7fc b970 	b.w	1c61c <nrfx_clock_start>

0002033c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2033c:	2000      	movs	r0, #0
   2033e:	f7fc b99f 	b.w	1c680 <nrfx_clock_stop>

00020342 <blocking_start_callback>:
{
   20342:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   20344:	f7fe b9a0 	b.w	1e688 <z_impl_k_sem_give>

00020348 <api_stop>:
{
   20348:	b538      	push	{r3, r4, r5, lr}
   2034a:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   2034c:	240c      	movs	r4, #12
   2034e:	434c      	muls	r4, r1
{
   20350:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   20352:	68c0      	ldr	r0, [r0, #12]
   20354:	f104 0340 	add.w	r3, r4, #64	; 0x40
   20358:	2180      	movs	r1, #128	; 0x80
   2035a:	4418      	add	r0, r3
   2035c:	f7ff ff98 	bl	20290 <set_off_state>
	if (err < 0) {
   20360:	2800      	cmp	r0, #0
   20362:	db04      	blt.n	2036e <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   20364:	6869      	ldr	r1, [r5, #4]
   20366:	440c      	add	r4, r1
   20368:	6863      	ldr	r3, [r4, #4]
   2036a:	4798      	blx	r3
	return 0;
   2036c:	2000      	movs	r0, #0
}
   2036e:	bd38      	pop	{r3, r4, r5, pc}

00020370 <api_start>:
{
   20370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20374:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   20376:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   20378:	68c5      	ldr	r5, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
   2037a:	434c      	muls	r4, r1
{
   2037c:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   2037e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   20382:	2180      	movs	r1, #128	; 0x80
   20384:	4428      	add	r0, r5
{
   20386:	4690      	mov	r8, r2
   20388:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   2038a:	f7ff ff9a 	bl	202c2 <set_starting_state>
	if (err < 0) {
   2038e:	2800      	cmp	r0, #0
   20390:	db06      	blt.n	203a0 <api_start+0x30>
	subdata->cb = cb;
   20392:	4425      	add	r5, r4
	subdata->user_data = user_data;
   20394:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   20398:	6873      	ldr	r3, [r6, #4]
   2039a:	591b      	ldr	r3, [r3, r4]
   2039c:	4798      	blx	r3
	return 0;
   2039e:	2000      	movs	r0, #0
}
   203a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000203a4 <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   203a4:	6903      	ldr	r3, [r0, #16]
{
   203a6:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
   203a8:	e9c0 3306 	strd	r3, r3, [r0, #24]
	ep_ctx->buf.len  = 0U;
   203ac:	2300      	movs	r3, #0
   203ae:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   203b0:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
{
   203b4:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   203b6:	b113      	cbz	r3, 203be <ep_ctx_reset+0x1a>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   203b8:	7a40      	ldrb	r0, [r0, #9]
   203ba:	f003 fdd0 	bl	23f5e <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   203be:	2301      	movs	r3, #1
   203c0:	f884 3020 	strb.w	r3, [r4, #32]
	ep_ctx->read_pending = false;
   203c4:	2300      	movs	r3, #0
   203c6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	ep_ctx->trans_zlp = false;
   203ca:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	ep_ctx->write_in_progress = false;
   203ce:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
   203d2:	bd10      	pop	{r4, pc}

000203d4 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   203d4:	f7fd bd3e 	b.w	1de54 <z_impl_k_mutex_unlock>

000203d8 <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   203d8:	f7fd bcc4 	b.w	1dd64 <z_impl_k_mutex_lock>

000203dc <usb_dc_ep_read>:
{
   203dc:	b570      	push	{r4, r5, r6, lr}
   203de:	4604      	mov	r4, r0
   203e0:	460e      	mov	r6, r1
   203e2:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   203e4:	f7e6 fd64 	bl	6eb0 <usb_dc_ep_read_wait>
	if (ret) {
   203e8:	b930      	cbnz	r0, 203f8 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   203ea:	b906      	cbnz	r6, 203ee <usb_dc_ep_read+0x12>
   203ec:	b125      	cbz	r5, 203f8 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   203ee:	4620      	mov	r0, r4
}
   203f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   203f4:	f7e6 bdba 	b.w	6f6c <usb_dc_ep_read_continue>
}
   203f8:	bd70      	pop	{r4, r5, r6, pc}

000203fa <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   203fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   203fc:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   20400:	2908      	cmp	r1, #8
   20402:	6e66      	ldr	r6, [r4, #100]	; 0x64
   20404:	6e65      	ldr	r5, [r4, #100]	; 0x64
   20406:	6e62      	ldr	r2, [r4, #100]	; 0x64
   20408:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   2040a:	ea4f 2515 	mov.w	r5, r5, lsr #8
   2040e:	ea4f 6303 	mov.w	r3, r3, lsl #24
   20412:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   20416:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   2041a:	ea4f 2202 	mov.w	r2, r2, lsl #8
   2041e:	ea43 0305 	orr.w	r3, r3, r5
   20422:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   20426:	ea43 0302 	orr.w	r3, r3, r2
   2042a:	9300      	str	r3, [sp, #0]
   2042c:	6e26      	ldr	r6, [r4, #96]	; 0x60
   2042e:	6e25      	ldr	r5, [r4, #96]	; 0x60
   20430:	6e22      	ldr	r2, [r4, #96]	; 0x60
   20432:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   20434:	ea4f 2415 	mov.w	r4, r5, lsr #8
   20438:	ea4f 6303 	mov.w	r3, r3, lsl #24
   2043c:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   20440:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   20444:	ea43 0304 	orr.w	r3, r3, r4
   20448:	ea4f 2402 	mov.w	r4, r2, lsl #8
   2044c:	bf28      	it	cs
   2044e:	2108      	movcs	r1, #8
   20450:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   20454:	4323      	orrs	r3, r4

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   20456:	460a      	mov	r2, r1
   20458:	460c      	mov	r4, r1
   2045a:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   2045c:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   2045e:	f001 f922 	bl	216a6 <memcpy>

	return length;
}
   20462:	4620      	mov	r0, r4
   20464:	b002      	add	sp, #8
   20466:	bd70      	pop	{r4, r5, r6, pc}

00020468 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   20468:	4770      	bx	lr

0002046a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   2046a:	4770      	bx	lr

0002046c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2046c:	f7e6 bf00 	b.w	7270 <_DoInit>

00020470 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   20470:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   20472:	f7ff fffb 	bl	2046c <SEGGER_RTT_Init>

	return 0;
}
   20476:	2000      	movs	r0, #0
   20478:	bd08      	pop	{r3, pc}

0002047a <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2047a:	b538      	push	{r3, r4, r5, lr}
   2047c:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2047e:	42ab      	cmp	r3, r5
{
   20480:	4611      	mov	r1, r2
   20482:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   20484:	d804      	bhi.n	20490 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   20486:	461a      	mov	r2, r3
   20488:	f001 f90d 	bl	216a6 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2048c:	4620      	mov	r0, r4
   2048e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   20490:	2400      	movs	r4, #0
   20492:	e7fb      	b.n	2048c <_copy+0x12>

00020494 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   20494:	f001 b932 	b.w	216fc <memset>

00020498 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   20498:	09c3      	lsrs	r3, r0, #7
   2049a:	005a      	lsls	r2, r3, #1
   2049c:	4413      	add	r3, r2
   2049e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   204a2:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   204a6:	b2c0      	uxtb	r0, r0
   204a8:	4770      	bx	lr

000204aa <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   204aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   204ae:	4606      	mov	r6, r0
   204b0:	b0a9      	sub	sp, #164	; 0xa4
   204b2:	4688      	mov	r8, r1
   204b4:	4614      	mov	r4, r2
   204b6:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   204b8:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   204bc:	f7e6 ff5e 	bl	737c <uECC_get_rng>
		if (!rng_function ||
   204c0:	4603      	mov	r3, r0
   204c2:	2800      	cmp	r0, #0
   204c4:	d03e      	beq.n	20544 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   204c6:	2140      	movs	r1, #64	; 0x40
   204c8:	a808      	add	r0, sp, #32
   204ca:	4798      	blx	r3
		if (!rng_function ||
   204cc:	b3d0      	cbz	r0, 20544 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   204ce:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   204d2:	f112 031f 	adds.w	r3, r2, #31
   204d6:	bf48      	it	mi
   204d8:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   204dc:	466d      	mov	r5, sp
   204de:	464a      	mov	r2, r9
   204e0:	a908      	add	r1, sp, #32
   204e2:	4628      	mov	r0, r5
   204e4:	f343 1347 	sbfx	r3, r3, #5, #8
   204e8:	f000 fa03 	bl	208f2 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   204ec:	4622      	mov	r2, r4
   204ee:	4629      	mov	r1, r5
   204f0:	a818      	add	r0, sp, #96	; 0x60
   204f2:	f000 fe19 	bl	21128 <EccPoint_compute_public_key>
   204f6:	b318      	cbz	r0, 20540 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   204f8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   204fc:	1dd9      	adds	r1, r3, #7
   204fe:	bf48      	it	mi
   20500:	f103 010e 	addmi.w	r1, r3, #14
   20504:	462a      	mov	r2, r5
   20506:	4640      	mov	r0, r8
   20508:	10c9      	asrs	r1, r1, #3
   2050a:	f000 fe35 	bl	21178 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   2050e:	f994 1001 	ldrsb.w	r1, [r4, #1]
   20512:	aa18      	add	r2, sp, #96	; 0x60
   20514:	4630      	mov	r0, r6
   20516:	f000 fe2f 	bl	21178 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2051a:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   2051e:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   20522:	ab18      	add	r3, sp, #96	; 0x60
   20524:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   20528:	1870      	adds	r0, r6, r1
   2052a:	f000 fe25 	bl	21178 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   2052e:	2220      	movs	r2, #32
   20530:	2100      	movs	r1, #0
   20532:	4628      	mov	r0, r5
   20534:	f001 f8e2 	bl	216fc <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   20538:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   2053a:	b029      	add	sp, #164	; 0xa4
   2053c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   20540:	3f01      	subs	r7, #1
   20542:	d1bb      	bne.n	204bc <uECC_make_key+0x12>
        		return 0;
   20544:	2000      	movs	r0, #0
   20546:	e7f8      	b.n	2053a <uECC_make_key+0x90>

00020548 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   20548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2054c:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   2054e:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   20552:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   20556:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   2055a:	b0a4      	sub	sp, #144	; 0x90
   2055c:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   2055e:	1dda      	adds	r2, r3, #7
   20560:	bf48      	it	mi
   20562:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   20566:	ad04      	add	r5, sp, #16
{
   20568:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   2056a:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   2056c:	4628      	mov	r0, r5
   2056e:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   20570:	9502      	str	r5, [sp, #8]
   20572:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   20574:	f000 fe14 	bl	211a0 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   20578:	463a      	mov	r2, r7
   2057a:	4649      	mov	r1, r9
   2057c:	a814      	add	r0, sp, #80	; 0x50
   2057e:	f000 fe0f 	bl	211a0 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   20582:	ab14      	add	r3, sp, #80	; 0x50
   20584:	eb09 0107 	add.w	r1, r9, r7
   20588:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   2058c:	463a      	mov	r2, r7
   2058e:	f000 fe07 	bl	211a0 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   20592:	4623      	mov	r3, r4
   20594:	4632      	mov	r2, r6
   20596:	4629      	mov	r1, r5
   20598:	4628      	mov	r0, r5
   2059a:	f000 fd99 	bl	210d0 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   2059e:	fab0 f080 	clz	r0, r0
   205a2:	9401      	str	r4, [sp, #4]
   205a4:	ab24      	add	r3, sp, #144	; 0x90
   205a6:	0940      	lsrs	r0, r0, #5
   205a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   205ac:	8863      	ldrh	r3, [r4, #2]
   205ae:	3301      	adds	r3, #1
   205b0:	b21b      	sxth	r3, r3
   205b2:	9300      	str	r3, [sp, #0]
   205b4:	a914      	add	r1, sp, #80	; 0x50
   205b6:	2300      	movs	r3, #0
   205b8:	f850 2c88 	ldr.w	r2, [r0, #-136]
   205bc:	4608      	mov	r0, r1
   205be:	f000 fcb8 	bl	20f32 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   205c2:	aa14      	add	r2, sp, #80	; 0x50
   205c4:	4639      	mov	r1, r7
   205c6:	4640      	mov	r0, r8
   205c8:	f000 fdd6 	bl	21178 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   205cc:	4621      	mov	r1, r4
   205ce:	a814      	add	r0, sp, #80	; 0x50
   205d0:	f000 fc24 	bl	20e1c <EccPoint_isZero>
   205d4:	af02      	add	r7, sp, #8
   205d6:	4604      	mov	r4, r0
   205d8:	2208      	movs	r2, #8
   205da:	2100      	movs	r1, #0
   205dc:	4638      	mov	r0, r7
   205de:	f001 f88d 	bl	216fc <memset>
   205e2:	2220      	movs	r2, #32
   205e4:	2100      	movs	r1, #0
   205e6:	4630      	mov	r0, r6
   205e8:	f001 f888 	bl	216fc <memset>
   205ec:	2220      	movs	r2, #32
   205ee:	2100      	movs	r1, #0
   205f0:	4628      	mov	r0, r5
   205f2:	f001 f883 	bl	216fc <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   205f6:	fab4 f084 	clz	r0, r4
   205fa:	0940      	lsrs	r0, r0, #5
   205fc:	b024      	add	sp, #144	; 0x90
   205fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00020602 <uECC_vli_add>:
{
   20602:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   20604:	2400      	movs	r4, #0
{
   20606:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   20608:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2060a:	b265      	sxtb	r5, r4
   2060c:	42ab      	cmp	r3, r5
   2060e:	dc00      	bgt.n	20612 <uECC_vli_add+0x10>
}
   20610:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   20612:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   20616:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   2061a:	443d      	add	r5, r7
   2061c:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   2061e:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   20620:	bf8c      	ite	hi
   20622:	2701      	movhi	r7, #1
   20624:	2700      	movls	r7, #0
		result[i] = sum;
   20626:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2062a:	bf18      	it	ne
   2062c:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   2062e:	3401      	adds	r4, #1
   20630:	e7eb      	b.n	2060a <uECC_vli_add+0x8>

00020632 <uECC_vli_rshift1>:
	vli += num_words;
   20632:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   20636:	2300      	movs	r3, #0
	while (vli-- > end) {
   20638:	4288      	cmp	r0, r1
   2063a:	d300      	bcc.n	2063e <uECC_vli_rshift1+0xc>
}
   2063c:	4770      	bx	lr
		uECC_word_t temp = *vli;
   2063e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   20642:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   20646:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   20648:	07d3      	lsls	r3, r2, #31
   2064a:	e7f5      	b.n	20638 <uECC_vli_rshift1+0x6>

0002064c <vli_modInv_update>:
	if (!EVEN(uv)) {
   2064c:	6803      	ldr	r3, [r0, #0]
{
   2064e:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   20650:	f013 0601 	ands.w	r6, r3, #1
{
   20654:	4605      	mov	r5, r0
   20656:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   20658:	d005      	beq.n	20666 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   2065a:	4613      	mov	r3, r2
   2065c:	460a      	mov	r2, r1
   2065e:	4601      	mov	r1, r0
   20660:	f7ff ffcf 	bl	20602 <uECC_vli_add>
   20664:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   20666:	4621      	mov	r1, r4
   20668:	4628      	mov	r0, r5
   2066a:	f7ff ffe2 	bl	20632 <uECC_vli_rshift1>
	if (carry) {
   2066e:	b146      	cbz	r6, 20682 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   20670:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   20674:	3a01      	subs	r2, #1
   20676:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   2067a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2067e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   20682:	bd70      	pop	{r4, r5, r6, pc}

00020684 <uECC_vli_mult>:
{
   20684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   20688:	2500      	movs	r5, #0
{
   2068a:	b087      	sub	sp, #28
   2068c:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   20690:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   20692:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   20694:	fa4f f885 	sxtb.w	r8, r5
   20698:	4543      	cmp	r3, r8
   2069a:	dc16      	bgt.n	206ca <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   2069c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   206a0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   206a4:	9502      	str	r5, [sp, #8]
   206a6:	f04f 0a00 	mov.w	sl, #0
   206aa:	9e02      	ldr	r6, [sp, #8]
   206ac:	fa53 fe8a 	uxtab	lr, r3, sl
   206b0:	fa4f fe8e 	sxtb.w	lr, lr
   206b4:	45b6      	cmp	lr, r6
   206b6:	fa5f f58a 	uxtb.w	r5, sl
   206ba:	db2d      	blt.n	20718 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   206bc:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   206c0:	f840 2c04 	str.w	r2, [r0, #-4]
}
   206c4:	b007      	add	sp, #28
   206c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   206ca:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   206cc:	f04f 0c00 	mov.w	ip, #0
   206d0:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   206d4:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   206d6:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   206da:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   206dc:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   206e0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   206e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   206e8:	fba7 ab06 	umull	sl, fp, r7, r6
   206ec:	eb1a 0601 	adds.w	r6, sl, r1
   206f0:	f10c 0c01 	add.w	ip, ip, #1
   206f4:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   206f8:	fa4f fa8c 	sxtb.w	sl, ip
   206fc:	bf2c      	ite	cs
   206fe:	2201      	movcs	r2, #1
   20700:	2200      	movcc	r2, #0
   20702:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   20704:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   20706:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   20708:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   2070a:	dde4      	ble.n	206d6 <uECC_vli_mult+0x52>
		result[k] = r0;
   2070c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   20710:	463a      	mov	r2, r7
   20712:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   20714:	4674      	mov	r4, lr
   20716:	e7bd      	b.n	20694 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   20718:	3501      	adds	r5, #1
   2071a:	9900      	ldr	r1, [sp, #0]
   2071c:	9e01      	ldr	r6, [sp, #4]
   2071e:	fa4f fc85 	sxtb.w	ip, r5
   20722:	ebae 0b0c 	sub.w	fp, lr, ip
   20726:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   2072a:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   2072e:	4621      	mov	r1, r4
   20730:	2400      	movs	r4, #0
   20732:	459c      	cmp	ip, r3
   20734:	db05      	blt.n	20742 <uECC_vli_mult+0xbe>
		result[k] = r0;
   20736:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   2073a:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   2073e:	460a      	mov	r2, r1
   20740:	e7b3      	b.n	206aa <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   20742:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   20746:	f855 7b04 	ldr.w	r7, [r5], #4
   2074a:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   2074e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   20752:	fba7 6706 	umull	r6, r7, r7, r6
   20756:	eb16 0801 	adds.w	r8, r6, r1
   2075a:	eb57 0902 	adcs.w	r9, r7, r2
   2075e:	bf2c      	ite	cs
   20760:	2201      	movcs	r2, #1
   20762:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   20764:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   20768:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   2076a:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   2076c:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2076e:	fa4f fc8c 	sxtb.w	ip, ip
   20772:	e7de      	b.n	20732 <uECC_vli_mult+0xae>

00020774 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   20774:	2300      	movs	r3, #0
{
   20776:	b510      	push	{r4, lr}
		 vli[i] = 0;
   20778:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   2077a:	b25a      	sxtb	r2, r3
   2077c:	4291      	cmp	r1, r2
   2077e:	dc00      	bgt.n	20782 <uECC_vli_clear+0xe>
}
   20780:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   20782:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   20786:	3301      	adds	r3, #1
   20788:	e7f7      	b.n	2077a <uECC_vli_clear+0x6>

0002078a <uECC_vli_isZero>:
{
   2078a:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   2078c:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   2078e:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   20790:	b25c      	sxtb	r4, r3
   20792:	42a1      	cmp	r1, r4
   20794:	dc03      	bgt.n	2079e <uECC_vli_isZero+0x14>
}
   20796:	fab2 f082 	clz	r0, r2
   2079a:	0940      	lsrs	r0, r0, #5
   2079c:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   2079e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   207a2:	3301      	adds	r3, #1
   207a4:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   207a6:	e7f3      	b.n	20790 <uECC_vli_isZero+0x6>

000207a8 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   207a8:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   207aa:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   207ac:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   207b0:	f001 011f 	and.w	r1, r1, #31
   207b4:	fa03 f101 	lsl.w	r1, r3, r1
}
   207b8:	4008      	ands	r0, r1
   207ba:	4770      	bx	lr

000207bc <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   207bc:	3901      	subs	r1, #1
   207be:	b24b      	sxtb	r3, r1
{
   207c0:	4602      	mov	r2, r0
   207c2:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   207c6:	2b00      	cmp	r3, #0
   207c8:	da03      	bge.n	207d2 <uECC_vli_numBits+0x16>
	return (i + 1);
   207ca:	3301      	adds	r3, #1
   207cc:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   207ce:	b938      	cbnz	r0, 207e0 <uECC_vli_numBits+0x24>
   207d0:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   207d2:	f851 0904 	ldr.w	r0, [r1], #-4
   207d6:	2800      	cmp	r0, #0
   207d8:	d1f7      	bne.n	207ca <uECC_vli_numBits+0xe>
   207da:	3b01      	subs	r3, #1
   207dc:	b25b      	sxtb	r3, r3
   207de:	e7f2      	b.n	207c6 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   207e0:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   207e4:	3b01      	subs	r3, #1
   207e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   207ea:	2300      	movs	r3, #0
   207ec:	b922      	cbnz	r2, 207f8 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   207ee:	3801      	subs	r0, #1
   207f0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   207f4:	b200      	sxth	r0, r0
}
   207f6:	4770      	bx	lr
		digit >>= 1;
   207f8:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   207fa:	3301      	adds	r3, #1
   207fc:	e7f6      	b.n	207ec <uECC_vli_numBits+0x30>

000207fe <uECC_vli_set>:
{
   207fe:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   20800:	2300      	movs	r3, #0
   20802:	b25c      	sxtb	r4, r3
   20804:	42a2      	cmp	r2, r4
   20806:	dc00      	bgt.n	2080a <uECC_vli_set+0xc>
}
   20808:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   2080a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   2080e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   20812:	3301      	adds	r3, #1
   20814:	e7f5      	b.n	20802 <uECC_vli_set+0x4>

00020816 <uECC_vli_cmp_unsafe>:
{
   20816:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   20818:	3a01      	subs	r2, #1
   2081a:	b253      	sxtb	r3, r2
   2081c:	009a      	lsls	r2, r3, #2
   2081e:	2b00      	cmp	r3, #0
   20820:	da01      	bge.n	20826 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   20822:	2000      	movs	r0, #0
}
   20824:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   20826:	5885      	ldr	r5, [r0, r2]
   20828:	588c      	ldr	r4, [r1, r2]
   2082a:	42a5      	cmp	r5, r4
   2082c:	d805      	bhi.n	2083a <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   2082e:	f1a2 0204 	sub.w	r2, r2, #4
   20832:	d304      	bcc.n	2083e <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   20834:	3b01      	subs	r3, #1
   20836:	b25b      	sxtb	r3, r3
   20838:	e7f1      	b.n	2081e <uECC_vli_cmp_unsafe+0x8>
			return 1;
   2083a:	2001      	movs	r0, #1
   2083c:	e7f2      	b.n	20824 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   2083e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20842:	e7ef      	b.n	20824 <uECC_vli_cmp_unsafe+0xe>

00020844 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   20844:	3a01      	subs	r2, #1
   20846:	b253      	sxtb	r3, r2
{
   20848:	b570      	push	{r4, r5, r6, lr}
   2084a:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   2084c:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   2084e:	2b00      	cmp	r3, #0
   20850:	da03      	bge.n	2085a <uECC_vli_equal+0x16>
}
   20852:	1e20      	subs	r0, r4, #0
   20854:	bf18      	it	ne
   20856:	2001      	movne	r0, #1
   20858:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   2085a:	5885      	ldr	r5, [r0, r2]
   2085c:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   2085e:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   20860:	4075      	eors	r5, r6
   20862:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   20864:	b25b      	sxtb	r3, r3
   20866:	3a04      	subs	r2, #4
   20868:	e7f1      	b.n	2084e <uECC_vli_equal+0xa>

0002086a <uECC_vli_sub>:
{
   2086a:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   2086c:	2400      	movs	r4, #0
{
   2086e:	4606      	mov	r6, r0
   20870:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   20872:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   20874:	b265      	sxtb	r5, r4
   20876:	45ac      	cmp	ip, r5
   20878:	dc00      	bgt.n	2087c <uECC_vli_sub+0x12>
}
   2087a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   2087c:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   20880:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   20884:	1a3d      	subs	r5, r7, r0
   20886:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   20888:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   2088a:	bf34      	ite	cc
   2088c:	2701      	movcc	r7, #1
   2088e:	2700      	movcs	r7, #0
		result[i] = diff;
   20890:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   20894:	bf18      	it	ne
   20896:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   20898:	3401      	adds	r4, #1
   2089a:	e7eb      	b.n	20874 <uECC_vli_sub+0xa>

0002089c <uECC_vli_modAdd>:
{
   2089c:	b570      	push	{r4, r5, r6, lr}
   2089e:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   208a2:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   208a4:	4633      	mov	r3, r6
{
   208a6:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   208a8:	f7ff feab 	bl	20602 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   208ac:	b930      	cbnz	r0, 208bc <uECC_vli_modAdd+0x20>
   208ae:	4632      	mov	r2, r6
   208b0:	4621      	mov	r1, r4
   208b2:	4628      	mov	r0, r5
   208b4:	f7ff ffaf 	bl	20816 <uECC_vli_cmp_unsafe>
   208b8:	2801      	cmp	r0, #1
   208ba:	d007      	beq.n	208cc <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   208bc:	4633      	mov	r3, r6
   208be:	462a      	mov	r2, r5
   208c0:	4621      	mov	r1, r4
   208c2:	4620      	mov	r0, r4
}
   208c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   208c8:	f7ff bfcf 	b.w	2086a <uECC_vli_sub>
}
   208cc:	bd70      	pop	{r4, r5, r6, pc}

000208ce <uECC_vli_modSub>:
{
   208ce:	b570      	push	{r4, r5, r6, lr}
   208d0:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   208d4:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   208d6:	4633      	mov	r3, r6
{
   208d8:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   208da:	f7ff ffc6 	bl	2086a <uECC_vli_sub>
	if (l_borrow) {
   208de:	b138      	cbz	r0, 208f0 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   208e0:	4633      	mov	r3, r6
   208e2:	462a      	mov	r2, r5
   208e4:	4621      	mov	r1, r4
   208e6:	4620      	mov	r0, r4
}
   208e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   208ec:	f7ff be89 	b.w	20602 <uECC_vli_add>
}
   208f0:	bd70      	pop	{r4, r5, r6, pc}

000208f2 <uECC_vli_mmod>:
{
   208f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   208f6:	b0a5      	sub	sp, #148	; 0x94
   208f8:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   208fa:	ab14      	add	r3, sp, #80	; 0x50
   208fc:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   20900:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   20902:	4629      	mov	r1, r5
   20904:	4610      	mov	r0, r2
{
   20906:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   20908:	f7ff ff58 	bl	207bc <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   2090c:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   20910:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   20912:	2c00      	cmp	r4, #0
   20914:	4621      	mov	r1, r4
   20916:	bfb8      	it	lt
   20918:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2091c:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2091e:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   20922:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   20926:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   20928:	f004 071f 	and.w	r7, r4, #31
   2092c:	bf58      	it	pl
   2092e:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   20930:	f7ff ff20 	bl	20774 <uECC_vli_clear>
	if (bit_shift > 0) {
   20934:	2f00      	cmp	r7, #0
   20936:	b208      	sxth	r0, r1
   20938:	dd2b      	ble.n	20992 <uECC_vli_mmod+0xa0>
   2093a:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   2093c:	2200      	movs	r2, #0
   2093e:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   20942:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   20946:	4613      	mov	r3, r2
   20948:	429d      	cmp	r5, r3
   2094a:	d817      	bhi.n	2097c <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   2094c:	006b      	lsls	r3, r5, #1
   2094e:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   20950:	ab04      	add	r3, sp, #16
   20952:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   20956:	1e6f      	subs	r7, r5, #1
   20958:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2095a:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2095c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   20960:	2c00      	cmp	r4, #0
   20962:	da54      	bge.n	20a0e <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   20964:	ab24      	add	r3, sp, #144	; 0x90
   20966:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2096a:	462a      	mov	r2, r5
   2096c:	f856 1c88 	ldr.w	r1, [r6, #-136]
   20970:	4640      	mov	r0, r8
   20972:	f7ff ff44 	bl	207fe <uECC_vli_set>
}
   20976:	b025      	add	sp, #148	; 0x94
   20978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   2097c:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   20980:	fa0c f007 	lsl.w	r0, ip, r7
   20984:	4302      	orrs	r2, r0
   20986:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2098a:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   2098c:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   20990:	e7da      	b.n	20948 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   20992:	ab04      	add	r3, sp, #16
   20994:	462a      	mov	r2, r5
   20996:	4631      	mov	r1, r6
   20998:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2099c:	f7ff ff2f 	bl	207fe <uECC_vli_set>
   209a0:	e7d4      	b.n	2094c <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   209a2:	fa0f fe82 	sxth.w	lr, r2
   209a6:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   209aa:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   209ae:	ab24      	add	r3, sp, #144	; 0x90
   209b0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   209b4:	3001      	adds	r0, #1
   209b6:	f852 3c80 	ldr.w	r3, [r2, #-128]
   209ba:	440b      	add	r3, r1
   209bc:	ebbb 0303 	subs.w	r3, fp, r3
   209c0:	bf34      	ite	cc
   209c2:	2201      	movcc	r2, #1
   209c4:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   209c6:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   209c8:	bf18      	it	ne
   209ca:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   209cc:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   209d0:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   209d4:	9b01      	ldr	r3, [sp, #4]
   209d6:	b242      	sxtb	r2, r0
   209d8:	429a      	cmp	r2, r3
   209da:	dbe2      	blt.n	209a2 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   209dc:	1a73      	subs	r3, r6, r1
   209de:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   209e0:	4629      	mov	r1, r5
   209e2:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   209e4:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   209e6:	f7ff fe24 	bl	20632 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   209ea:	ab24      	add	r3, sp, #144	; 0x90
   209ec:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   209f0:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   209f2:	f853 2c80 	ldr.w	r2, [r3, #-128]
   209f6:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   209fa:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   209fc:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   20a00:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   20a02:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   20a06:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   20a08:	f7ff fe13 	bl	20632 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   20a0c:	e7a8      	b.n	20960 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   20a0e:	ab24      	add	r3, sp, #144	; 0x90
   20a10:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   20a12:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   20a16:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   20a18:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   20a1c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   20a20:	e7d8      	b.n	209d4 <uECC_vli_mmod+0xe2>

00020a22 <uECC_vli_modMult_fast>:
{
   20a22:	b530      	push	{r4, r5, lr}
   20a24:	461c      	mov	r4, r3
   20a26:	b091      	sub	sp, #68	; 0x44
   20a28:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   20a2a:	f993 3000 	ldrsb.w	r3, [r3]
   20a2e:	4668      	mov	r0, sp
   20a30:	f7ff fe28 	bl	20684 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   20a34:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   20a38:	4669      	mov	r1, sp
   20a3a:	4628      	mov	r0, r5
   20a3c:	4798      	blx	r3
}
   20a3e:	b011      	add	sp, #68	; 0x44
   20a40:	bd30      	pop	{r4, r5, pc}

00020a42 <uECC_vli_modSquare_fast>:
{
   20a42:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   20a44:	460a      	mov	r2, r1
   20a46:	f7ff bfec 	b.w	20a22 <uECC_vli_modMult_fast>

00020a4a <double_jacobian_default>:
{
   20a4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   20a4e:	f993 6000 	ldrsb.w	r6, [r3]
{
   20a52:	b092      	sub	sp, #72	; 0x48
   20a54:	4604      	mov	r4, r0
   20a56:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   20a58:	4610      	mov	r0, r2
   20a5a:	4631      	mov	r1, r6
{
   20a5c:	4615      	mov	r5, r2
   20a5e:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   20a60:	f7ff fe93 	bl	2078a <uECC_vli_isZero>
   20a64:	2800      	cmp	r0, #0
   20a66:	f040 8091 	bne.w	20b8c <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   20a6a:	463a      	mov	r2, r7
   20a6c:	4649      	mov	r1, r9
   20a6e:	a802      	add	r0, sp, #8
   20a70:	f7ff ffe7 	bl	20a42 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   20a74:	463b      	mov	r3, r7
   20a76:	aa02      	add	r2, sp, #8
   20a78:	4621      	mov	r1, r4
   20a7a:	a80a      	add	r0, sp, #40	; 0x28
   20a7c:	f7ff ffd1 	bl	20a22 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   20a80:	a902      	add	r1, sp, #8
   20a82:	4608      	mov	r0, r1
   20a84:	463a      	mov	r2, r7
   20a86:	f7ff ffdc 	bl	20a42 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   20a8a:	463b      	mov	r3, r7
   20a8c:	462a      	mov	r2, r5
   20a8e:	4649      	mov	r1, r9
   20a90:	4648      	mov	r0, r9
   20a92:	f7ff ffc6 	bl	20a22 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   20a96:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   20a9a:	463a      	mov	r2, r7
   20a9c:	4629      	mov	r1, r5
   20a9e:	4628      	mov	r0, r5
   20aa0:	f7ff ffcf 	bl	20a42 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   20aa4:	4643      	mov	r3, r8
   20aa6:	462a      	mov	r2, r5
   20aa8:	4621      	mov	r1, r4
   20aaa:	4620      	mov	r0, r4
   20aac:	9600      	str	r6, [sp, #0]
   20aae:	f7ff fef5 	bl	2089c <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   20ab2:	4643      	mov	r3, r8
   20ab4:	462a      	mov	r2, r5
   20ab6:	4629      	mov	r1, r5
   20ab8:	4628      	mov	r0, r5
   20aba:	9600      	str	r6, [sp, #0]
   20abc:	f7ff feee 	bl	2089c <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   20ac0:	4643      	mov	r3, r8
   20ac2:	462a      	mov	r2, r5
   20ac4:	4621      	mov	r1, r4
   20ac6:	4628      	mov	r0, r5
   20ac8:	9600      	str	r6, [sp, #0]
   20aca:	f7ff ff00 	bl	208ce <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   20ace:	463b      	mov	r3, r7
   20ad0:	462a      	mov	r2, r5
   20ad2:	4621      	mov	r1, r4
   20ad4:	4620      	mov	r0, r4
   20ad6:	f7ff ffa4 	bl	20a22 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   20ada:	4643      	mov	r3, r8
   20adc:	4622      	mov	r2, r4
   20ade:	4621      	mov	r1, r4
   20ae0:	4628      	mov	r0, r5
   20ae2:	9600      	str	r6, [sp, #0]
   20ae4:	f7ff feda 	bl	2089c <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   20ae8:	4643      	mov	r3, r8
   20aea:	9600      	str	r6, [sp, #0]
   20aec:	462a      	mov	r2, r5
   20aee:	4621      	mov	r1, r4
   20af0:	4620      	mov	r0, r4
   20af2:	f7ff fed3 	bl	2089c <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   20af6:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   20af8:	07db      	lsls	r3, r3, #31
   20afa:	d54a      	bpl.n	20b92 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   20afc:	4633      	mov	r3, r6
   20afe:	4642      	mov	r2, r8
   20b00:	4621      	mov	r1, r4
   20b02:	4620      	mov	r0, r4
   20b04:	f7ff fd7d 	bl	20602 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   20b08:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   20b0a:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   20b0c:	4620      	mov	r0, r4
   20b0e:	f7ff fd90 	bl	20632 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   20b12:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   20b16:	3b01      	subs	r3, #1
   20b18:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   20b1c:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   20b20:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   20b24:	463a      	mov	r2, r7
   20b26:	4621      	mov	r1, r4
   20b28:	4628      	mov	r0, r5
   20b2a:	f7ff ff8a 	bl	20a42 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   20b2e:	4643      	mov	r3, r8
   20b30:	aa0a      	add	r2, sp, #40	; 0x28
   20b32:	4629      	mov	r1, r5
   20b34:	4628      	mov	r0, r5
   20b36:	9600      	str	r6, [sp, #0]
   20b38:	f7ff fec9 	bl	208ce <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   20b3c:	4643      	mov	r3, r8
   20b3e:	aa0a      	add	r2, sp, #40	; 0x28
   20b40:	4629      	mov	r1, r5
   20b42:	4628      	mov	r0, r5
   20b44:	9600      	str	r6, [sp, #0]
   20b46:	f7ff fec2 	bl	208ce <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   20b4a:	a90a      	add	r1, sp, #40	; 0x28
   20b4c:	4608      	mov	r0, r1
   20b4e:	4643      	mov	r3, r8
   20b50:	462a      	mov	r2, r5
   20b52:	9600      	str	r6, [sp, #0]
   20b54:	f7ff febb 	bl	208ce <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   20b58:	463b      	mov	r3, r7
   20b5a:	aa0a      	add	r2, sp, #40	; 0x28
   20b5c:	4621      	mov	r1, r4
   20b5e:	4620      	mov	r0, r4
   20b60:	f7ff ff5f 	bl	20a22 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   20b64:	aa02      	add	r2, sp, #8
   20b66:	4643      	mov	r3, r8
   20b68:	4610      	mov	r0, r2
   20b6a:	4621      	mov	r1, r4
   20b6c:	9600      	str	r6, [sp, #0]
   20b6e:	f7ff feae 	bl	208ce <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   20b72:	4632      	mov	r2, r6
   20b74:	4629      	mov	r1, r5
   20b76:	4620      	mov	r0, r4
   20b78:	f7ff fe41 	bl	207fe <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   20b7c:	4649      	mov	r1, r9
   20b7e:	4628      	mov	r0, r5
   20b80:	f7ff fe3d 	bl	207fe <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   20b84:	a902      	add	r1, sp, #8
   20b86:	4648      	mov	r0, r9
   20b88:	f7ff fe39 	bl	207fe <uECC_vli_set>
}
   20b8c:	b012      	add	sp, #72	; 0x48
   20b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   20b92:	4631      	mov	r1, r6
   20b94:	4620      	mov	r0, r4
   20b96:	f7ff fd4c 	bl	20632 <uECC_vli_rshift1>
   20b9a:	e7c3      	b.n	20b24 <double_jacobian_default+0xda>

00020b9c <x_side_default>:
{
   20b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ba0:	4615      	mov	r5, r2
   20ba2:	b08a      	sub	sp, #40	; 0x28
   20ba4:	4604      	mov	r4, r0
   20ba6:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   20ba8:	221c      	movs	r2, #28
   20baa:	2100      	movs	r1, #0
   20bac:	a803      	add	r0, sp, #12
   20bae:	f000 fda5 	bl	216fc <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   20bb2:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   20bb4:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   20bb8:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   20bba:	462a      	mov	r2, r5
   20bbc:	4631      	mov	r1, r6
   20bbe:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   20bc0:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   20bc2:	f7ff ff3e 	bl	20a42 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   20bc6:	463b      	mov	r3, r7
   20bc8:	aa02      	add	r2, sp, #8
   20bca:	4621      	mov	r1, r4
   20bcc:	4620      	mov	r0, r4
   20bce:	f8cd 8000 	str.w	r8, [sp]
   20bd2:	f7ff fe7c 	bl	208ce <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   20bd6:	462b      	mov	r3, r5
   20bd8:	4632      	mov	r2, r6
   20bda:	4621      	mov	r1, r4
   20bdc:	4620      	mov	r0, r4
   20bde:	f7ff ff20 	bl	20a22 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   20be2:	f8cd 8000 	str.w	r8, [sp]
   20be6:	463b      	mov	r3, r7
   20be8:	f105 0284 	add.w	r2, r5, #132	; 0x84
   20bec:	4621      	mov	r1, r4
   20bee:	4620      	mov	r0, r4
   20bf0:	f7ff fe54 	bl	2089c <uECC_vli_modAdd>
}
   20bf4:	b00a      	add	sp, #40	; 0x28
   20bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020bfa <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   20bfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20bfe:	b09a      	sub	sp, #104	; 0x68
   20c00:	4616      	mov	r6, r2
   20c02:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   20c06:	4644      	mov	r4, r8
{
   20c08:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   20c0a:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   20c0e:	9500      	str	r5, [sp, #0]
{
   20c10:	4607      	mov	r7, r0
   20c12:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   20c14:	4623      	mov	r3, r4
   20c16:	4602      	mov	r2, r0
   20c18:	4631      	mov	r1, r6
   20c1a:	a802      	add	r0, sp, #8
   20c1c:	f7ff fe57 	bl	208ce <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   20c20:	a902      	add	r1, sp, #8
   20c22:	4642      	mov	r2, r8
   20c24:	4608      	mov	r0, r1
   20c26:	f7ff ff0c 	bl	20a42 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   20c2a:	4643      	mov	r3, r8
   20c2c:	aa02      	add	r2, sp, #8
   20c2e:	4639      	mov	r1, r7
   20c30:	4638      	mov	r0, r7
   20c32:	f7ff fef6 	bl	20a22 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   20c36:	4643      	mov	r3, r8
   20c38:	aa02      	add	r2, sp, #8
   20c3a:	4631      	mov	r1, r6
   20c3c:	4630      	mov	r0, r6
   20c3e:	f7ff fef0 	bl	20a22 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   20c42:	4623      	mov	r3, r4
   20c44:	4652      	mov	r2, sl
   20c46:	4649      	mov	r1, r9
   20c48:	a802      	add	r0, sp, #8
   20c4a:	9500      	str	r5, [sp, #0]
   20c4c:	f7ff fe26 	bl	2089c <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   20c50:	4623      	mov	r3, r4
   20c52:	4652      	mov	r2, sl
   20c54:	4649      	mov	r1, r9
   20c56:	4648      	mov	r0, r9
   20c58:	9500      	str	r5, [sp, #0]
   20c5a:	f7ff fe38 	bl	208ce <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   20c5e:	4623      	mov	r3, r4
   20c60:	463a      	mov	r2, r7
   20c62:	4631      	mov	r1, r6
   20c64:	a80a      	add	r0, sp, #40	; 0x28
   20c66:	9500      	str	r5, [sp, #0]
   20c68:	f7ff fe31 	bl	208ce <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   20c6c:	4643      	mov	r3, r8
   20c6e:	aa0a      	add	r2, sp, #40	; 0x28
   20c70:	4651      	mov	r1, sl
   20c72:	4650      	mov	r0, sl
   20c74:	f7ff fed5 	bl	20a22 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   20c78:	4623      	mov	r3, r4
   20c7a:	4632      	mov	r2, r6
   20c7c:	4639      	mov	r1, r7
   20c7e:	a80a      	add	r0, sp, #40	; 0x28
   20c80:	9500      	str	r5, [sp, #0]
   20c82:	f7ff fe0b 	bl	2089c <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   20c86:	4642      	mov	r2, r8
   20c88:	4649      	mov	r1, r9
   20c8a:	4630      	mov	r0, r6
   20c8c:	f7ff fed9 	bl	20a42 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   20c90:	4623      	mov	r3, r4
   20c92:	aa0a      	add	r2, sp, #40	; 0x28
   20c94:	4631      	mov	r1, r6
   20c96:	4630      	mov	r0, r6
   20c98:	9500      	str	r5, [sp, #0]
   20c9a:	f7ff fe18 	bl	208ce <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   20c9e:	4623      	mov	r3, r4
   20ca0:	4632      	mov	r2, r6
   20ca2:	4639      	mov	r1, r7
   20ca4:	a812      	add	r0, sp, #72	; 0x48
   20ca6:	9500      	str	r5, [sp, #0]
   20ca8:	f7ff fe11 	bl	208ce <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   20cac:	4643      	mov	r3, r8
   20cae:	aa12      	add	r2, sp, #72	; 0x48
   20cb0:	4649      	mov	r1, r9
   20cb2:	4648      	mov	r0, r9
   20cb4:	f7ff feb5 	bl	20a22 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   20cb8:	4623      	mov	r3, r4
   20cba:	4652      	mov	r2, sl
   20cbc:	4649      	mov	r1, r9
   20cbe:	4648      	mov	r0, r9
   20cc0:	9500      	str	r5, [sp, #0]
   20cc2:	f7ff fe04 	bl	208ce <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   20cc6:	4642      	mov	r2, r8
   20cc8:	a902      	add	r1, sp, #8
   20cca:	a812      	add	r0, sp, #72	; 0x48
   20ccc:	f7ff feb9 	bl	20a42 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   20cd0:	a912      	add	r1, sp, #72	; 0x48
   20cd2:	4623      	mov	r3, r4
   20cd4:	aa0a      	add	r2, sp, #40	; 0x28
   20cd6:	4608      	mov	r0, r1
   20cd8:	9500      	str	r5, [sp, #0]
   20cda:	f7ff fdf8 	bl	208ce <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   20cde:	4623      	mov	r3, r4
   20ce0:	463a      	mov	r2, r7
   20ce2:	a912      	add	r1, sp, #72	; 0x48
   20ce4:	a80a      	add	r0, sp, #40	; 0x28
   20ce6:	9500      	str	r5, [sp, #0]
   20ce8:	f7ff fdf1 	bl	208ce <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   20cec:	a90a      	add	r1, sp, #40	; 0x28
   20cee:	4643      	mov	r3, r8
   20cf0:	aa02      	add	r2, sp, #8
   20cf2:	4608      	mov	r0, r1
   20cf4:	f7ff fe95 	bl	20a22 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   20cf8:	4623      	mov	r3, r4
   20cfa:	4652      	mov	r2, sl
   20cfc:	a90a      	add	r1, sp, #40	; 0x28
   20cfe:	4650      	mov	r0, sl
   20d00:	9500      	str	r5, [sp, #0]
   20d02:	f7ff fde4 	bl	208ce <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   20d06:	462a      	mov	r2, r5
   20d08:	a912      	add	r1, sp, #72	; 0x48
   20d0a:	4638      	mov	r0, r7
   20d0c:	f7ff fd77 	bl	207fe <uECC_vli_set>
}
   20d10:	b01a      	add	sp, #104	; 0x68
   20d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00020d16 <uECC_vli_modInv>:
{
   20d16:	b5f0      	push	{r4, r5, r6, r7, lr}
   20d18:	460f      	mov	r7, r1
   20d1a:	b0a1      	sub	sp, #132	; 0x84
   20d1c:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   20d1e:	4619      	mov	r1, r3
   20d20:	4638      	mov	r0, r7
{
   20d22:	4615      	mov	r5, r2
   20d24:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   20d26:	f7ff fd30 	bl	2078a <uECC_vli_isZero>
   20d2a:	b120      	cbz	r0, 20d36 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   20d2c:	4630      	mov	r0, r6
   20d2e:	f7ff fd21 	bl	20774 <uECC_vli_clear>
}
   20d32:	b021      	add	sp, #132	; 0x84
   20d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   20d36:	4622      	mov	r2, r4
   20d38:	4639      	mov	r1, r7
   20d3a:	4668      	mov	r0, sp
   20d3c:	f7ff fd5f 	bl	207fe <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   20d40:	4629      	mov	r1, r5
   20d42:	a808      	add	r0, sp, #32
   20d44:	f7ff fd5b 	bl	207fe <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   20d48:	a810      	add	r0, sp, #64	; 0x40
   20d4a:	4621      	mov	r1, r4
   20d4c:	f7ff fd12 	bl	20774 <uECC_vli_clear>
	u[0] = 1;
   20d50:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   20d52:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   20d54:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   20d56:	f7ff fd0d 	bl	20774 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   20d5a:	4622      	mov	r2, r4
   20d5c:	a908      	add	r1, sp, #32
   20d5e:	4668      	mov	r0, sp
   20d60:	f7ff fd59 	bl	20816 <uECC_vli_cmp_unsafe>
   20d64:	b928      	cbnz	r0, 20d72 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   20d66:	4622      	mov	r2, r4
   20d68:	a910      	add	r1, sp, #64	; 0x40
   20d6a:	4630      	mov	r0, r6
   20d6c:	f7ff fd47 	bl	207fe <uECC_vli_set>
   20d70:	e7df      	b.n	20d32 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   20d72:	9b00      	ldr	r3, [sp, #0]
   20d74:	07da      	lsls	r2, r3, #31
   20d76:	d409      	bmi.n	20d8c <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   20d78:	4621      	mov	r1, r4
   20d7a:	4668      	mov	r0, sp
   20d7c:	f7ff fc59 	bl	20632 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   20d80:	4622      	mov	r2, r4
   20d82:	4629      	mov	r1, r5
   20d84:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   20d86:	f7ff fc61 	bl	2064c <vli_modInv_update>
   20d8a:	e7e6      	b.n	20d5a <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   20d8c:	9b08      	ldr	r3, [sp, #32]
   20d8e:	07db      	lsls	r3, r3, #31
   20d90:	d407      	bmi.n	20da2 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   20d92:	4621      	mov	r1, r4
   20d94:	a808      	add	r0, sp, #32
   20d96:	f7ff fc4c 	bl	20632 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   20d9a:	4622      	mov	r2, r4
   20d9c:	4629      	mov	r1, r5
   20d9e:	a818      	add	r0, sp, #96	; 0x60
   20da0:	e7f1      	b.n	20d86 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   20da2:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   20da4:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   20da6:	dd1c      	ble.n	20de2 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   20da8:	aa08      	add	r2, sp, #32
   20daa:	4669      	mov	r1, sp
   20dac:	4668      	mov	r0, sp
   20dae:	f7ff fd5c 	bl	2086a <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   20db2:	4621      	mov	r1, r4
   20db4:	4668      	mov	r0, sp
   20db6:	f7ff fc3c 	bl	20632 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   20dba:	4622      	mov	r2, r4
   20dbc:	a918      	add	r1, sp, #96	; 0x60
   20dbe:	a810      	add	r0, sp, #64	; 0x40
   20dc0:	f7ff fd29 	bl	20816 <uECC_vli_cmp_unsafe>
   20dc4:	2800      	cmp	r0, #0
   20dc6:	da05      	bge.n	20dd4 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   20dc8:	a910      	add	r1, sp, #64	; 0x40
   20dca:	4623      	mov	r3, r4
   20dcc:	462a      	mov	r2, r5
   20dce:	4608      	mov	r0, r1
   20dd0:	f7ff fc17 	bl	20602 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   20dd4:	a910      	add	r1, sp, #64	; 0x40
   20dd6:	4623      	mov	r3, r4
   20dd8:	aa18      	add	r2, sp, #96	; 0x60
   20dda:	4608      	mov	r0, r1
   20ddc:	f7ff fd45 	bl	2086a <uECC_vli_sub>
   20de0:	e7ce      	b.n	20d80 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   20de2:	a908      	add	r1, sp, #32
   20de4:	466a      	mov	r2, sp
   20de6:	4608      	mov	r0, r1
   20de8:	f7ff fd3f 	bl	2086a <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   20dec:	4621      	mov	r1, r4
   20dee:	a808      	add	r0, sp, #32
   20df0:	f7ff fc1f 	bl	20632 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   20df4:	4622      	mov	r2, r4
   20df6:	a910      	add	r1, sp, #64	; 0x40
   20df8:	a818      	add	r0, sp, #96	; 0x60
   20dfa:	f7ff fd0c 	bl	20816 <uECC_vli_cmp_unsafe>
   20dfe:	2800      	cmp	r0, #0
   20e00:	da05      	bge.n	20e0e <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   20e02:	a918      	add	r1, sp, #96	; 0x60
   20e04:	4623      	mov	r3, r4
   20e06:	462a      	mov	r2, r5
   20e08:	4608      	mov	r0, r1
   20e0a:	f7ff fbfa 	bl	20602 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   20e0e:	a918      	add	r1, sp, #96	; 0x60
   20e10:	4623      	mov	r3, r4
   20e12:	aa10      	add	r2, sp, #64	; 0x40
   20e14:	4608      	mov	r0, r1
   20e16:	f7ff fd28 	bl	2086a <uECC_vli_sub>
   20e1a:	e7be      	b.n	20d9a <uECC_vli_modInv+0x84>

00020e1c <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   20e1c:	7809      	ldrb	r1, [r1, #0]
   20e1e:	0049      	lsls	r1, r1, #1
   20e20:	b249      	sxtb	r1, r1
   20e22:	f7ff bcb2 	b.w	2078a <uECC_vli_isZero>

00020e26 <apply_z>:
{
   20e26:	b5f0      	push	{r4, r5, r6, r7, lr}
   20e28:	4615      	mov	r5, r2
   20e2a:	b089      	sub	sp, #36	; 0x24
   20e2c:	461c      	mov	r4, r3
   20e2e:	4607      	mov	r7, r0
   20e30:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   20e32:	461a      	mov	r2, r3
   20e34:	4629      	mov	r1, r5
   20e36:	4668      	mov	r0, sp
   20e38:	f7ff fe03 	bl	20a42 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   20e3c:	4623      	mov	r3, r4
   20e3e:	466a      	mov	r2, sp
   20e40:	4639      	mov	r1, r7
   20e42:	4638      	mov	r0, r7
   20e44:	f7ff fded 	bl	20a22 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   20e48:	4623      	mov	r3, r4
   20e4a:	462a      	mov	r2, r5
   20e4c:	4669      	mov	r1, sp
   20e4e:	4668      	mov	r0, sp
   20e50:	f7ff fde7 	bl	20a22 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   20e54:	4623      	mov	r3, r4
   20e56:	466a      	mov	r2, sp
   20e58:	4631      	mov	r1, r6
   20e5a:	4630      	mov	r0, r6
   20e5c:	f7ff fde1 	bl	20a22 <uECC_vli_modMult_fast>
}
   20e60:	b009      	add	sp, #36	; 0x24
   20e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020e64 <XYcZ_add>:
{
   20e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20e68:	b08a      	sub	sp, #40	; 0x28
   20e6a:	4614      	mov	r4, r2
   20e6c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   20e70:	4655      	mov	r5, sl
{
   20e72:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   20e74:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   20e78:	9600      	str	r6, [sp, #0]
{
   20e7a:	4680      	mov	r8, r0
   20e7c:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   20e7e:	462b      	mov	r3, r5
   20e80:	4602      	mov	r2, r0
   20e82:	4621      	mov	r1, r4
   20e84:	a802      	add	r0, sp, #8
   20e86:	f7ff fd22 	bl	208ce <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   20e8a:	a902      	add	r1, sp, #8
   20e8c:	4652      	mov	r2, sl
   20e8e:	4608      	mov	r0, r1
   20e90:	f7ff fdd7 	bl	20a42 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   20e94:	4653      	mov	r3, sl
   20e96:	aa02      	add	r2, sp, #8
   20e98:	4641      	mov	r1, r8
   20e9a:	4640      	mov	r0, r8
   20e9c:	f7ff fdc1 	bl	20a22 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   20ea0:	4653      	mov	r3, sl
   20ea2:	aa02      	add	r2, sp, #8
   20ea4:	4621      	mov	r1, r4
   20ea6:	4620      	mov	r0, r4
   20ea8:	f7ff fdbb 	bl	20a22 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   20eac:	462b      	mov	r3, r5
   20eae:	464a      	mov	r2, r9
   20eb0:	4639      	mov	r1, r7
   20eb2:	4638      	mov	r0, r7
   20eb4:	9600      	str	r6, [sp, #0]
   20eb6:	f7ff fd0a 	bl	208ce <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   20eba:	4652      	mov	r2, sl
   20ebc:	4639      	mov	r1, r7
   20ebe:	a802      	add	r0, sp, #8
   20ec0:	f7ff fdbf 	bl	20a42 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   20ec4:	a902      	add	r1, sp, #8
   20ec6:	462b      	mov	r3, r5
   20ec8:	4642      	mov	r2, r8
   20eca:	4608      	mov	r0, r1
   20ecc:	9600      	str	r6, [sp, #0]
   20ece:	f7ff fcfe 	bl	208ce <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   20ed2:	a902      	add	r1, sp, #8
   20ed4:	462b      	mov	r3, r5
   20ed6:	4622      	mov	r2, r4
   20ed8:	4608      	mov	r0, r1
   20eda:	9600      	str	r6, [sp, #0]
   20edc:	f7ff fcf7 	bl	208ce <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   20ee0:	462b      	mov	r3, r5
   20ee2:	4642      	mov	r2, r8
   20ee4:	4621      	mov	r1, r4
   20ee6:	4620      	mov	r0, r4
   20ee8:	9600      	str	r6, [sp, #0]
   20eea:	f7ff fcf0 	bl	208ce <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   20eee:	4653      	mov	r3, sl
   20ef0:	4622      	mov	r2, r4
   20ef2:	4649      	mov	r1, r9
   20ef4:	4648      	mov	r0, r9
   20ef6:	f7ff fd94 	bl	20a22 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   20efa:	462b      	mov	r3, r5
   20efc:	aa02      	add	r2, sp, #8
   20efe:	4641      	mov	r1, r8
   20f00:	4620      	mov	r0, r4
   20f02:	9600      	str	r6, [sp, #0]
   20f04:	f7ff fce3 	bl	208ce <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   20f08:	4653      	mov	r3, sl
   20f0a:	4622      	mov	r2, r4
   20f0c:	4639      	mov	r1, r7
   20f0e:	4638      	mov	r0, r7
   20f10:	f7ff fd87 	bl	20a22 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   20f14:	462b      	mov	r3, r5
   20f16:	464a      	mov	r2, r9
   20f18:	4639      	mov	r1, r7
   20f1a:	4638      	mov	r0, r7
   20f1c:	9600      	str	r6, [sp, #0]
   20f1e:	f7ff fcd6 	bl	208ce <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   20f22:	4632      	mov	r2, r6
   20f24:	a902      	add	r1, sp, #8
   20f26:	4620      	mov	r0, r4
   20f28:	f7ff fc69 	bl	207fe <uECC_vli_set>
}
   20f2c:	b00a      	add	sp, #40	; 0x28
   20f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00020f32 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   20f32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f36:	b0b1      	sub	sp, #196	; 0xc4
   20f38:	e9cd 0103 	strd	r0, r1, [sp, #12]
   20f3c:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   20f3e:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   20f42:	a818      	add	r0, sp, #96	; 0x60
{
   20f44:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   20f46:	463a      	mov	r2, r7
{
   20f48:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   20f4a:	f7ff fc58 	bl	207fe <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   20f4e:	00bb      	lsls	r3, r7, #2
   20f50:	9305      	str	r3, [sp, #20]
   20f52:	9b04      	ldr	r3, [sp, #16]
   20f54:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   20f58:	4619      	mov	r1, r3
   20f5a:	a828      	add	r0, sp, #160	; 0xa0
   20f5c:	9302      	str	r3, [sp, #8]
   20f5e:	f7ff fc4e 	bl	207fe <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   20f62:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   20f66:	2e00      	cmp	r6, #0
   20f68:	f000 8088 	beq.w	2107c <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   20f6c:	462a      	mov	r2, r5
   20f6e:	4631      	mov	r1, r6
   20f70:	a808      	add	r0, sp, #32
   20f72:	f7ff fc44 	bl	207fe <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   20f76:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   20f7a:	462a      	mov	r2, r5
   20f7c:	a918      	add	r1, sp, #96	; 0x60
   20f7e:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   20f80:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   20f84:	f7ff fc3b 	bl	207fe <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   20f88:	a928      	add	r1, sp, #160	; 0xa0
   20f8a:	4648      	mov	r0, r9
   20f8c:	f7ff fc37 	bl	207fe <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   20f90:	4623      	mov	r3, r4
   20f92:	aa08      	add	r2, sp, #32
   20f94:	a928      	add	r1, sp, #160	; 0xa0
   20f96:	a818      	add	r0, sp, #96	; 0x60
   20f98:	f7ff ff45 	bl	20e26 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   20f9c:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   20fa0:	4623      	mov	r3, r4
   20fa2:	aa08      	add	r2, sp, #32
   20fa4:	a928      	add	r1, sp, #160	; 0xa0
   20fa6:	a818      	add	r0, sp, #96	; 0x60
   20fa8:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   20faa:	4623      	mov	r3, r4
   20fac:	aa08      	add	r2, sp, #32
   20fae:	4649      	mov	r1, r9
   20fb0:	4640      	mov	r0, r8
   20fb2:	f7ff ff38 	bl	20e26 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   20fb6:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   20fba:	3d02      	subs	r5, #2
   20fbc:	b22d      	sxth	r5, r5
   20fbe:	2d00      	cmp	r5, #0
   20fc0:	dc63      	bgt.n	2108a <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   20fc2:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   20fc6:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   20fc8:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   20fcc:	ab10      	add	r3, sp, #64	; 0x40
   20fce:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   20fd2:	43ed      	mvns	r5, r5
   20fd4:	ab20      	add	r3, sp, #128	; 0x80
   20fd6:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   20fda:	f005 0501 	and.w	r5, r5, #1
   20fde:	ab10      	add	r3, sp, #64	; 0x40
   20fe0:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   20fe4:	ab20      	add	r3, sp, #128	; 0x80
   20fe6:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   20fea:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   20fee:	462b      	mov	r3, r5
   20ff0:	464a      	mov	r2, r9
   20ff2:	4631      	mov	r1, r6
   20ff4:	4640      	mov	r0, r8
   20ff6:	f7ff fe00 	bl	20bfa <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   20ffa:	4653      	mov	r3, sl
   20ffc:	aa10      	add	r2, sp, #64	; 0x40
   20ffe:	a918      	add	r1, sp, #96	; 0x60
   21000:	a808      	add	r0, sp, #32
   21002:	9700      	str	r7, [sp, #0]
   21004:	f7ff fc63 	bl	208ce <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   21008:	a908      	add	r1, sp, #32
   2100a:	4623      	mov	r3, r4
   2100c:	4632      	mov	r2, r6
   2100e:	4608      	mov	r0, r1
   21010:	f7ff fd07 	bl	20a22 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   21014:	a908      	add	r1, sp, #32
   21016:	9a04      	ldr	r2, [sp, #16]
   21018:	4623      	mov	r3, r4
   2101a:	4608      	mov	r0, r1
   2101c:	f7ff fd01 	bl	20a22 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   21020:	a908      	add	r1, sp, #32
   21022:	463b      	mov	r3, r7
   21024:	4652      	mov	r2, sl
   21026:	4608      	mov	r0, r1
   21028:	f7ff fe75 	bl	20d16 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   2102c:	a908      	add	r1, sp, #32
   2102e:	9a02      	ldr	r2, [sp, #8]
   21030:	4623      	mov	r3, r4
   21032:	4608      	mov	r0, r1
   21034:	f7ff fcf5 	bl	20a22 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   21038:	a908      	add	r1, sp, #32
   2103a:	4623      	mov	r3, r4
   2103c:	4642      	mov	r2, r8
   2103e:	4608      	mov	r0, r1
   21040:	f7ff fcef 	bl	20a22 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   21044:	9400      	str	r4, [sp, #0]
   21046:	4633      	mov	r3, r6
   21048:	4642      	mov	r2, r8
   2104a:	4629      	mov	r1, r5
   2104c:	4648      	mov	r0, r9
   2104e:	f7ff ff09 	bl	20e64 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   21052:	4623      	mov	r3, r4
   21054:	aa08      	add	r2, sp, #32
   21056:	a920      	add	r1, sp, #128	; 0x80
   21058:	a810      	add	r0, sp, #64	; 0x40
   2105a:	f7ff fee4 	bl	20e26 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   2105e:	9803      	ldr	r0, [sp, #12]
   21060:	463a      	mov	r2, r7
   21062:	a910      	add	r1, sp, #64	; 0x40
   21064:	f7ff fbcb 	bl	207fe <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   21068:	9b03      	ldr	r3, [sp, #12]
   2106a:	9c05      	ldr	r4, [sp, #20]
   2106c:	4423      	add	r3, r4
   2106e:	a920      	add	r1, sp, #128	; 0x80
   21070:	4618      	mov	r0, r3
   21072:	f7ff fbc4 	bl	207fe <uECC_vli_set>
}
   21076:	b031      	add	sp, #196	; 0xc4
   21078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   2107c:	4629      	mov	r1, r5
   2107e:	a808      	add	r0, sp, #32
   21080:	f7ff fb78 	bl	20774 <uECC_vli_clear>
		z[0] = 1;
   21084:	2301      	movs	r3, #1
   21086:	9308      	str	r3, [sp, #32]
   21088:	e775      	b.n	20f76 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   2108a:	4629      	mov	r1, r5
   2108c:	4650      	mov	r0, sl
   2108e:	f7ff fb8b 	bl	207a8 <uECC_vli_testBit>
   21092:	fab0 f680 	clz	r6, r0
   21096:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   21098:	f1c6 0101 	rsb	r1, r6, #1
   2109c:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   210a0:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   210a4:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   210a8:	4633      	mov	r3, r6
   210aa:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   210ae:	465a      	mov	r2, fp
   210b0:	9400      	str	r4, [sp, #0]
   210b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   210b6:	f7ff fda0 	bl	20bfa <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   210ba:	9907      	ldr	r1, [sp, #28]
   210bc:	9806      	ldr	r0, [sp, #24]
   210be:	9400      	str	r4, [sp, #0]
   210c0:	460b      	mov	r3, r1
   210c2:	4602      	mov	r2, r0
   210c4:	4631      	mov	r1, r6
   210c6:	4658      	mov	r0, fp
   210c8:	f7ff fecc 	bl	20e64 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   210cc:	3d01      	subs	r5, #1
   210ce:	e775      	b.n	20fbc <EccPoint_mult+0x8a>

000210d0 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   210d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   210d4:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   210d8:	f119 081f 	adds.w	r8, r9, #31
{
   210dc:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   210de:	bf48      	it	mi
   210e0:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   210e4:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   210e6:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   210ea:	3524      	adds	r5, #36	; 0x24
   210ec:	4601      	mov	r1, r0
{
   210ee:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   210f0:	4643      	mov	r3, r8
   210f2:	462a      	mov	r2, r5
   210f4:	4630      	mov	r0, r6
   210f6:	f7ff fa84 	bl	20602 <uECC_vli_add>
   210fa:	4604      	mov	r4, r0
   210fc:	b990      	cbnz	r0, 21124 <regularize_k+0x54>
   210fe:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   21102:	da06      	bge.n	21112 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   21104:	4649      	mov	r1, r9
   21106:	4630      	mov	r0, r6
   21108:	f7ff fb4e 	bl	207a8 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   2110c:	1e04      	subs	r4, r0, #0
   2110e:	bf18      	it	ne
   21110:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   21112:	4643      	mov	r3, r8
   21114:	462a      	mov	r2, r5
   21116:	4631      	mov	r1, r6
   21118:	4638      	mov	r0, r7
   2111a:	f7ff fa72 	bl	20602 <uECC_vli_add>

	return carry;
}
   2111e:	4620      	mov	r0, r4
   21120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   21124:	2401      	movs	r4, #1
   21126:	e7f4      	b.n	21112 <regularize_k+0x42>

00021128 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   21128:	b530      	push	{r4, r5, lr}
   2112a:	4614      	mov	r4, r2
   2112c:	b095      	sub	sp, #84	; 0x54
   2112e:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   21130:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   21132:	4623      	mov	r3, r4
{
   21134:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   21136:	a904      	add	r1, sp, #16
   21138:	9102      	str	r1, [sp, #8]
   2113a:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2113c:	f7ff ffc8 	bl	210d0 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   21140:	fab0 f380 	clz	r3, r0
   21144:	095b      	lsrs	r3, r3, #5
   21146:	aa14      	add	r2, sp, #80	; 0x50
   21148:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2114c:	8863      	ldrh	r3, [r4, #2]
   2114e:	9401      	str	r4, [sp, #4]
   21150:	3301      	adds	r3, #1
   21152:	b21b      	sxth	r3, r3
   21154:	9300      	str	r3, [sp, #0]
   21156:	f852 2c48 	ldr.w	r2, [r2, #-72]
   2115a:	2300      	movs	r3, #0
   2115c:	f104 0144 	add.w	r1, r4, #68	; 0x44
   21160:	4628      	mov	r0, r5
   21162:	f7ff fee6 	bl	20f32 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   21166:	4621      	mov	r1, r4
   21168:	4628      	mov	r0, r5
   2116a:	f7ff fe57 	bl	20e1c <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   2116e:	fab0 f080 	clz	r0, r0
   21172:	0940      	lsrs	r0, r0, #5
   21174:	b015      	add	sp, #84	; 0x54
   21176:	bd30      	pop	{r4, r5, pc}

00021178 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   21178:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   2117a:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2117c:	1e4f      	subs	r7, r1, #1
   2117e:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   21180:	428c      	cmp	r4, r1
   21182:	f105 0501 	add.w	r5, r5, #1
   21186:	db00      	blt.n	2118a <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   21188:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2118a:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   2118c:	f023 0603 	bic.w	r6, r3, #3
   21190:	f003 0303 	and.w	r3, r3, #3
   21194:	5996      	ldr	r6, [r2, r6]
   21196:	00db      	lsls	r3, r3, #3
   21198:	fa26 f303 	lsr.w	r3, r6, r3
   2119c:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   2119e:	e7ee      	b.n	2117e <uECC_vli_nativeToBytes+0x6>

000211a0 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   211a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   211a2:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   211a4:	1cd1      	adds	r1, r2, #3
   211a6:	bf48      	it	mi
   211a8:	1d91      	addmi	r1, r2, #6
   211aa:	f341 0187 	sbfx	r1, r1, #2, #8
{
   211ae:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   211b0:	f7ff fae0 	bl	20774 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   211b4:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   211b6:	1e67      	subs	r7, r4, #1
   211b8:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   211ba:	42a2      	cmp	r2, r4
   211bc:	f105 0501 	add.w	r5, r5, #1
   211c0:	db00      	blt.n	211c4 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   211c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   211c4:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   211c6:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   211ca:	5cb2      	ldrb	r2, [r6, r2]
   211cc:	f003 0303 	and.w	r3, r3, #3
   211d0:	00db      	lsls	r3, r3, #3
   211d2:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   211d6:	5842      	ldr	r2, [r0, r1]
   211d8:	431a      	orrs	r2, r3
   211da:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   211dc:	e7ec      	b.n	211b8 <uECC_vli_bytesToNative+0x18>

000211de <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   211de:	b5f0      	push	{r4, r5, r6, r7, lr}
   211e0:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   211e2:	f991 6000 	ldrsb.w	r6, [r1]
{
   211e6:	4605      	mov	r5, r0
   211e8:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   211ea:	f7ff fe17 	bl	20e1c <EccPoint_isZero>
   211ee:	bb28      	cbnz	r0, 2123c <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   211f0:	1d27      	adds	r7, r4, #4
   211f2:	4632      	mov	r2, r6
   211f4:	4629      	mov	r1, r5
   211f6:	4638      	mov	r0, r7
   211f8:	f7ff fb0d 	bl	20816 <uECC_vli_cmp_unsafe>
   211fc:	2801      	cmp	r0, #1
   211fe:	d120      	bne.n	21242 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   21200:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   21204:	4632      	mov	r2, r6
   21206:	4638      	mov	r0, r7
   21208:	f7ff fb05 	bl	20816 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2120c:	2801      	cmp	r0, #1
   2120e:	d118      	bne.n	21242 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   21210:	4622      	mov	r2, r4
   21212:	4668      	mov	r0, sp
   21214:	f7ff fc15 	bl	20a42 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   21218:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   2121c:	4622      	mov	r2, r4
   2121e:	4629      	mov	r1, r5
   21220:	a808      	add	r0, sp, #32
   21222:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   21224:	4632      	mov	r2, r6
   21226:	a908      	add	r1, sp, #32
   21228:	4668      	mov	r0, sp
   2122a:	f7ff fb0b 	bl	20844 <uECC_vli_equal>
   2122e:	2800      	cmp	r0, #0
		return -3;
   21230:	bf0c      	ite	eq
   21232:	2000      	moveq	r0, #0
   21234:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   21238:	b011      	add	sp, #68	; 0x44
   2123a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   2123c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21240:	e7fa      	b.n	21238 <uECC_valid_point+0x5a>
		return -2;
   21242:	f06f 0001 	mvn.w	r0, #1
   21246:	e7f7      	b.n	21238 <uECC_valid_point+0x5a>

00021248 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   21248:	b570      	push	{r4, r5, r6, lr}
   2124a:	460c      	mov	r4, r1
   2124c:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   2124e:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   21250:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   21254:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   21256:	4601      	mov	r1, r0
   21258:	4668      	mov	r0, sp
   2125a:	f7ff ffa1 	bl	211a0 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   2125e:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   21262:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   21266:	18a9      	adds	r1, r5, r2
   21268:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   2126c:	f7ff ff98 	bl	211a0 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   21270:	2210      	movs	r2, #16
   21272:	4631      	mov	r1, r6
   21274:	4668      	mov	r0, sp
   21276:	f7ff face 	bl	20816 <uECC_vli_cmp_unsafe>
   2127a:	b128      	cbz	r0, 21288 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   2127c:	4621      	mov	r1, r4
   2127e:	4668      	mov	r0, sp
   21280:	f7ff ffad 	bl	211de <uECC_valid_point>
}
   21284:	b010      	add	sp, #64	; 0x40
   21286:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   21288:	f06f 0003 	mvn.w	r0, #3
   2128c:	e7fa      	b.n	21284 <uECC_valid_public_key+0x3c>

0002128e <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2128e:	78cb      	ldrb	r3, [r1, #3]
   21290:	7802      	ldrb	r2, [r0, #0]
   21292:	4053      	eors	r3, r2
   21294:	7003      	strb	r3, [r0, #0]
   21296:	884b      	ldrh	r3, [r1, #2]
   21298:	7842      	ldrb	r2, [r0, #1]
   2129a:	4053      	eors	r3, r2
   2129c:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2129e:	680a      	ldr	r2, [r1, #0]
   212a0:	7883      	ldrb	r3, [r0, #2]
   212a2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   212a6:	7083      	strb	r3, [r0, #2]
   212a8:	680a      	ldr	r2, [r1, #0]
   212aa:	78c3      	ldrb	r3, [r0, #3]
   212ac:	4053      	eors	r3, r2
   212ae:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   212b0:	79cb      	ldrb	r3, [r1, #7]
   212b2:	7902      	ldrb	r2, [r0, #4]
   212b4:	4053      	eors	r3, r2
   212b6:	7103      	strb	r3, [r0, #4]
   212b8:	88cb      	ldrh	r3, [r1, #6]
   212ba:	7942      	ldrb	r2, [r0, #5]
   212bc:	4053      	eors	r3, r2
   212be:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   212c0:	684a      	ldr	r2, [r1, #4]
   212c2:	7983      	ldrb	r3, [r0, #6]
   212c4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   212c8:	7183      	strb	r3, [r0, #6]
   212ca:	684a      	ldr	r2, [r1, #4]
   212cc:	79c3      	ldrb	r3, [r0, #7]
   212ce:	4053      	eors	r3, r2
   212d0:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   212d2:	7acb      	ldrb	r3, [r1, #11]
   212d4:	7a02      	ldrb	r2, [r0, #8]
   212d6:	4053      	eors	r3, r2
   212d8:	7203      	strb	r3, [r0, #8]
   212da:	7a42      	ldrb	r2, [r0, #9]
   212dc:	894b      	ldrh	r3, [r1, #10]
   212de:	4053      	eors	r3, r2
   212e0:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   212e2:	688a      	ldr	r2, [r1, #8]
   212e4:	7a83      	ldrb	r3, [r0, #10]
   212e6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   212ea:	7283      	strb	r3, [r0, #10]
   212ec:	688a      	ldr	r2, [r1, #8]
   212ee:	7ac3      	ldrb	r3, [r0, #11]
   212f0:	4053      	eors	r3, r2
   212f2:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   212f4:	7bcb      	ldrb	r3, [r1, #15]
   212f6:	7b02      	ldrb	r2, [r0, #12]
   212f8:	4053      	eors	r3, r2
   212fa:	7303      	strb	r3, [r0, #12]
   212fc:	89cb      	ldrh	r3, [r1, #14]
   212fe:	7b42      	ldrb	r2, [r0, #13]
   21300:	4053      	eors	r3, r2
   21302:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   21304:	68ca      	ldr	r2, [r1, #12]
   21306:	7b83      	ldrb	r3, [r0, #14]
   21308:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2130c:	7383      	strb	r3, [r0, #14]
   2130e:	68ca      	ldr	r2, [r1, #12]
   21310:	7bc3      	ldrb	r3, [r0, #15]
   21312:	4053      	eors	r3, r2
   21314:	73c3      	strb	r3, [r0, #15]
}
   21316:	4770      	bx	lr

00021318 <shift_rows>:
{
   21318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2131a:	7802      	ldrb	r2, [r0, #0]
   2131c:	f88d 2000 	strb.w	r2, [sp]
   21320:	7942      	ldrb	r2, [r0, #5]
   21322:	f88d 2001 	strb.w	r2, [sp, #1]
   21326:	7a82      	ldrb	r2, [r0, #10]
   21328:	f88d 2002 	strb.w	r2, [sp, #2]
   2132c:	7bc2      	ldrb	r2, [r0, #15]
   2132e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   21332:	7902      	ldrb	r2, [r0, #4]
   21334:	f88d 2004 	strb.w	r2, [sp, #4]
   21338:	7a42      	ldrb	r2, [r0, #9]
   2133a:	f88d 2005 	strb.w	r2, [sp, #5]
   2133e:	7b82      	ldrb	r2, [r0, #14]
   21340:	f88d 2006 	strb.w	r2, [sp, #6]
   21344:	78c2      	ldrb	r2, [r0, #3]
   21346:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2134a:	7a02      	ldrb	r2, [r0, #8]
   2134c:	f88d 2008 	strb.w	r2, [sp, #8]
   21350:	7b42      	ldrb	r2, [r0, #13]
   21352:	f88d 2009 	strb.w	r2, [sp, #9]
   21356:	7882      	ldrb	r2, [r0, #2]
   21358:	f88d 200a 	strb.w	r2, [sp, #10]
   2135c:	79c2      	ldrb	r2, [r0, #7]
   2135e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   21362:	7b02      	ldrb	r2, [r0, #12]
   21364:	f88d 200c 	strb.w	r2, [sp, #12]
   21368:	7842      	ldrb	r2, [r0, #1]
   2136a:	7ac3      	ldrb	r3, [r0, #11]
   2136c:	f88d 200d 	strb.w	r2, [sp, #13]
   21370:	7982      	ldrb	r2, [r0, #6]
   21372:	f88d 200e 	strb.w	r2, [sp, #14]
   21376:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2137a:	2310      	movs	r3, #16
   2137c:	466a      	mov	r2, sp
   2137e:	4619      	mov	r1, r3
   21380:	f7ff f87b 	bl	2047a <_copy>
}
   21384:	b005      	add	sp, #20
   21386:	f85d fb04 	ldr.w	pc, [sp], #4

0002138a <mult_row_column>:
{
   2138a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2138c:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2138e:	7808      	ldrb	r0, [r1, #0]
{
   21390:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   21392:	f7ff f881 	bl	20498 <_double_byte>
   21396:	4605      	mov	r5, r0
   21398:	7860      	ldrb	r0, [r4, #1]
   2139a:	f7ff f87d 	bl	20498 <_double_byte>
   2139e:	78a2      	ldrb	r2, [r4, #2]
   213a0:	7863      	ldrb	r3, [r4, #1]
   213a2:	4053      	eors	r3, r2
   213a4:	78e2      	ldrb	r2, [r4, #3]
   213a6:	4053      	eors	r3, r2
   213a8:	405d      	eors	r5, r3
   213aa:	4045      	eors	r5, r0
   213ac:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   213ae:	7860      	ldrb	r0, [r4, #1]
   213b0:	7827      	ldrb	r7, [r4, #0]
   213b2:	f7ff f871 	bl	20498 <_double_byte>
   213b6:	4605      	mov	r5, r0
   213b8:	78a0      	ldrb	r0, [r4, #2]
   213ba:	f7ff f86d 	bl	20498 <_double_byte>
   213be:	78a3      	ldrb	r3, [r4, #2]
   213c0:	405f      	eors	r7, r3
   213c2:	78e3      	ldrb	r3, [r4, #3]
   213c4:	405f      	eors	r7, r3
   213c6:	407d      	eors	r5, r7
   213c8:	4045      	eors	r5, r0
   213ca:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   213cc:	78a0      	ldrb	r0, [r4, #2]
   213ce:	7865      	ldrb	r5, [r4, #1]
   213d0:	7827      	ldrb	r7, [r4, #0]
   213d2:	f7ff f861 	bl	20498 <_double_byte>
   213d6:	406f      	eors	r7, r5
   213d8:	4605      	mov	r5, r0
   213da:	78e0      	ldrb	r0, [r4, #3]
   213dc:	f7ff f85c 	bl	20498 <_double_byte>
   213e0:	78e3      	ldrb	r3, [r4, #3]
   213e2:	405f      	eors	r7, r3
   213e4:	407d      	eors	r5, r7
   213e6:	4045      	eors	r5, r0
   213e8:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   213ea:	7820      	ldrb	r0, [r4, #0]
   213ec:	f7ff f854 	bl	20498 <_double_byte>
   213f0:	7863      	ldrb	r3, [r4, #1]
   213f2:	7825      	ldrb	r5, [r4, #0]
   213f4:	405d      	eors	r5, r3
   213f6:	78a3      	ldrb	r3, [r4, #2]
   213f8:	405d      	eors	r5, r3
   213fa:	4045      	eors	r5, r0
   213fc:	78e0      	ldrb	r0, [r4, #3]
   213fe:	f7ff f84b 	bl	20498 <_double_byte>
   21402:	b2ed      	uxtb	r5, r5
   21404:	4045      	eors	r5, r0
   21406:	70f5      	strb	r5, [r6, #3]
}
   21408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002140a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2140a:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2140c:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2140e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   21410:	f912 3b10 	ldrsb.w	r3, [r2], #16
   21414:	2b00      	cmp	r3, #0
   21416:	bfb4      	ite	lt
   21418:	2387      	movlt	r3, #135	; 0x87
   2141a:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2141c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   21420:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   21424:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   21426:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2142a:	d002      	beq.n	21432 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2142c:	7813      	ldrb	r3, [r2, #0]
   2142e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   21430:	e7f4      	b.n	2141c <gf_double+0x12>
	}
}
   21432:	bd10      	pop	{r4, pc}

00021434 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   21434:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   21436:	b120      	cbz	r0, 21442 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   21438:	2258      	movs	r2, #88	; 0x58
   2143a:	2100      	movs	r1, #0
   2143c:	f7ff f82a 	bl	20494 <_set>
   21440:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   21442:	bd08      	pop	{r3, pc}

00021444 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   21444:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   21446:	4604      	mov	r4, r0
   21448:	b188      	cbz	r0, 2146e <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2144a:	2210      	movs	r2, #16
   2144c:	2100      	movs	r1, #0
   2144e:	f7ff f821 	bl	20494 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   21452:	2210      	movs	r2, #16
   21454:	f104 0030 	add.w	r0, r4, #48	; 0x30
   21458:	2100      	movs	r1, #0
   2145a:	f7ff f81b 	bl	20494 <_set>
	s->leftover_offset = 0;
   2145e:	2300      	movs	r3, #0
   21460:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   21462:	2200      	movs	r2, #0
   21464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21468:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   2146c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2146e:	bd10      	pop	{r4, pc}

00021470 <tc_cmac_setup>:
{
   21470:	b570      	push	{r4, r5, r6, lr}
   21472:	460d      	mov	r5, r1
   21474:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   21476:	4604      	mov	r4, r0
   21478:	b310      	cbz	r0, 214c0 <tc_cmac_setup+0x50>
   2147a:	b311      	cbz	r1, 214c2 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2147c:	2258      	movs	r2, #88	; 0x58
   2147e:	2100      	movs	r1, #0
   21480:	f7ff f808 	bl	20494 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   21484:	4629      	mov	r1, r5
	s->sched = sched;
   21486:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   21488:	4630      	mov	r0, r6
   2148a:	f7e6 f84d 	bl	7528 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2148e:	2210      	movs	r2, #16
   21490:	2100      	movs	r1, #0
   21492:	4620      	mov	r0, r4
   21494:	f7fe fffe 	bl	20494 <_set>
	gf_double (s->K1, s->iv);
   21498:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2149c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2149e:	4621      	mov	r1, r4
   214a0:	4620      	mov	r0, r4
   214a2:	f7e6 f893 	bl	75cc <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   214a6:	4621      	mov	r1, r4
   214a8:	4628      	mov	r0, r5
   214aa:	f7ff ffae 	bl	2140a <gf_double>
	gf_double (s->K2, s->K1);
   214ae:	4629      	mov	r1, r5
   214b0:	f104 0020 	add.w	r0, r4, #32
   214b4:	f7ff ffa9 	bl	2140a <gf_double>
	tc_cmac_init(s);
   214b8:	4620      	mov	r0, r4
   214ba:	f7ff ffc3 	bl	21444 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   214be:	2001      	movs	r0, #1
}
   214c0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   214c2:	4608      	mov	r0, r1
   214c4:	e7fc      	b.n	214c0 <tc_cmac_setup+0x50>

000214c6 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   214c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   214ca:	460d      	mov	r5, r1
   214cc:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   214ce:	4604      	mov	r4, r0
   214d0:	2800      	cmp	r0, #0
   214d2:	d062      	beq.n	2159a <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   214d4:	b912      	cbnz	r2, 214dc <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   214d6:	2001      	movs	r0, #1
}
   214d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   214dc:	2900      	cmp	r1, #0
   214de:	d05c      	beq.n	2159a <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   214e0:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   214e4:	ea50 0301 	orrs.w	r3, r0, r1
   214e8:	d057      	beq.n	2159a <tc_cmac_update+0xd4>
	s->countdown--;
   214ea:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   214ee:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   214f2:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   214f6:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   214fa:	f1b8 0f00 	cmp.w	r8, #0
   214fe:	d02a      	beq.n	21556 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   21500:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   21504:	f108 0030 	add.w	r0, r8, #48	; 0x30
   21508:	42be      	cmp	r6, r7
   2150a:	4420      	add	r0, r4
   2150c:	d208      	bcs.n	21520 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2150e:	462a      	mov	r2, r5
   21510:	4633      	mov	r3, r6
   21512:	4631      	mov	r1, r6
   21514:	f7fe ffb1 	bl	2047a <_copy>
			s->leftover_offset += data_length;
   21518:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2151a:	4432      	add	r2, r6
   2151c:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2151e:	e7da      	b.n	214d6 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   21520:	463b      	mov	r3, r7
   21522:	462a      	mov	r2, r5
   21524:	4639      	mov	r1, r7
   21526:	f7fe ffa8 	bl	2047a <_copy>
		data_length -= remaining_space;
   2152a:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   2152c:	2300      	movs	r3, #0
   2152e:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   21530:	4446      	add	r6, r8
		data += remaining_space;
   21532:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21534:	1e63      	subs	r3, r4, #1
   21536:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2153a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2153e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21542:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   21544:	ea82 0200 	eor.w	r2, r2, r0
   21548:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2154a:	d1f6      	bne.n	2153a <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2154c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2154e:	4621      	mov	r1, r4
   21550:	4620      	mov	r0, r4
   21552:	f7e6 f83b 	bl	75cc <tc_aes_encrypt>
   21556:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2155a:	2e10      	cmp	r6, #16
   2155c:	d80a      	bhi.n	21574 <tc_cmac_update+0xae>
	if (data_length > 0) {
   2155e:	2e00      	cmp	r6, #0
   21560:	d0b9      	beq.n	214d6 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   21562:	4633      	mov	r3, r6
   21564:	462a      	mov	r2, r5
   21566:	4631      	mov	r1, r6
   21568:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2156c:	f7fe ff85 	bl	2047a <_copy>
		s->leftover_offset = data_length;
   21570:	6466      	str	r6, [r4, #68]	; 0x44
   21572:	e7b0      	b.n	214d6 <tc_cmac_update+0x10>
   21574:	1e63      	subs	r3, r4, #1
   21576:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   21578:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2157c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21580:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   21582:	ea82 0200 	eor.w	r2, r2, r0
   21586:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21588:	d1f6      	bne.n	21578 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2158a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2158c:	4621      	mov	r1, r4
   2158e:	4620      	mov	r0, r4
   21590:	f7e6 f81c 	bl	75cc <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   21594:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   21596:	3e10      	subs	r6, #16
   21598:	e7df      	b.n	2155a <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   2159a:	2000      	movs	r0, #0
   2159c:	e79c      	b.n	214d8 <tc_cmac_update+0x12>

0002159e <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2159e:	b570      	push	{r4, r5, r6, lr}
   215a0:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   215a2:	4605      	mov	r5, r0
   215a4:	b1e8      	cbz	r0, 215e2 <tc_cmac_final+0x44>
   215a6:	b369      	cbz	r1, 21604 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   215a8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   215aa:	2a10      	cmp	r2, #16
   215ac:	d11a      	bne.n	215e4 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   215ae:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   215b0:	1e63      	subs	r3, r4, #1
   215b2:	3901      	subs	r1, #1
   215b4:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   215b8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   215bc:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   215c0:	4072      	eors	r2, r6
   215c2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   215c6:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   215c8:	ea82 0206 	eor.w	r2, r2, r6
   215cc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   215ce:	d1f3      	bne.n	215b8 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   215d0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   215d2:	4621      	mov	r1, r4
   215d4:	4628      	mov	r0, r5
   215d6:	f7e5 fff9 	bl	75cc <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   215da:	4620      	mov	r0, r4
   215dc:	f7ff ff2a 	bl	21434 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   215e0:	2001      	movs	r0, #1
}
   215e2:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   215e4:	f102 0030 	add.w	r0, r2, #48	; 0x30
   215e8:	2100      	movs	r1, #0
   215ea:	f1c2 0210 	rsb	r2, r2, #16
   215ee:	4420      	add	r0, r4
   215f0:	f7fe ff50 	bl	20494 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   215f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   215f6:	4423      	add	r3, r4
   215f8:	2280      	movs	r2, #128	; 0x80
   215fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   215fe:	f104 0120 	add.w	r1, r4, #32
   21602:	e7d5      	b.n	215b0 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   21604:	4608      	mov	r0, r1
   21606:	e7ec      	b.n	215e2 <tc_cmac_final+0x44>

00021608 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   21608:	2100      	movs	r1, #0
   2160a:	2001      	movs	r0, #1
   2160c:	f7e6 b964 	b.w	78d8 <z_arm_fatal_error>

00021610 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   21610:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   21612:	6800      	ldr	r0, [r0, #0]
   21614:	f7e6 b960 	b.w	78d8 <z_arm_fatal_error>

00021618 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   21618:	b508      	push	{r3, lr}
	handler();
   2161a:	f7e6 f995 	bl	7948 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2161e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   21622:	f7e6 bc17 	b.w	7e54 <z_arm_exc_exit>

00021626 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   21626:	3901      	subs	r1, #1
   21628:	4603      	mov	r3, r0
   2162a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2162e:	b90a      	cbnz	r2, 21634 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   21630:	701a      	strb	r2, [r3, #0]

	return dest;
}
   21632:	4770      	bx	lr
		*d = *s;
   21634:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   21638:	e7f7      	b.n	2162a <strcpy+0x4>

0002163a <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   2163a:	b570      	push	{r4, r5, r6, lr}
   2163c:	3901      	subs	r1, #1
   2163e:	4605      	mov	r5, r0
   21640:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   21642:	b142      	cbz	r2, 21656 <strncpy+0x1c>
   21644:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   21648:	1e56      	subs	r6, r2, #1
   2164a:	b92b      	cbnz	r3, 21658 <strncpy+0x1e>
   2164c:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   2164e:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   21652:	42a2      	cmp	r2, r4
   21654:	d1fb      	bne.n	2164e <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   21656:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   21658:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   2165c:	4632      	mov	r2, r6
   2165e:	e7ef      	b.n	21640 <strncpy+0x6>

00021660 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   21660:	4603      	mov	r3, r0
	size_t n = 0;
   21662:	2000      	movs	r0, #0

	while (*s != '\0') {
   21664:	5c1a      	ldrb	r2, [r3, r0]
   21666:	b902      	cbnz	r2, 2166a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   21668:	4770      	bx	lr
		n++;
   2166a:	3001      	adds	r0, #1
   2166c:	e7fa      	b.n	21664 <strlen+0x4>

0002166e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2166e:	1e43      	subs	r3, r0, #1
   21670:	3901      	subs	r1, #1
   21672:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   21676:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2167a:	4282      	cmp	r2, r0
   2167c:	d101      	bne.n	21682 <strcmp+0x14>
   2167e:	2a00      	cmp	r2, #0
   21680:	d1f7      	bne.n	21672 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   21682:	1a10      	subs	r0, r2, r0
   21684:	4770      	bx	lr

00021686 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   21686:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   21688:	b15a      	cbz	r2, 216a2 <memcmp+0x1c>
   2168a:	3901      	subs	r1, #1
   2168c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2168e:	f810 2b01 	ldrb.w	r2, [r0], #1
   21692:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   21696:	42a0      	cmp	r0, r4
   21698:	d001      	beq.n	2169e <memcmp+0x18>
   2169a:	429a      	cmp	r2, r3
   2169c:	d0f7      	beq.n	2168e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   2169e:	1ad0      	subs	r0, r2, r3
}
   216a0:	bd10      	pop	{r4, pc}
		return 0;
   216a2:	4610      	mov	r0, r2
   216a4:	e7fc      	b.n	216a0 <memcmp+0x1a>

000216a6 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   216a6:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   216a8:	ea81 0400 	eor.w	r4, r1, r0
   216ac:	07a5      	lsls	r5, r4, #30
   216ae:	4603      	mov	r3, r0
   216b0:	d00b      	beq.n	216ca <memcpy+0x24>
   216b2:	3b01      	subs	r3, #1
   216b4:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   216b6:	4291      	cmp	r1, r2
   216b8:	d11b      	bne.n	216f2 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   216ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   216bc:	2a00      	cmp	r2, #0
   216be:	d0fc      	beq.n	216ba <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   216c0:	f811 4b01 	ldrb.w	r4, [r1], #1
   216c4:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   216c8:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   216ca:	079c      	lsls	r4, r3, #30
   216cc:	d1f6      	bne.n	216bc <memcpy+0x16>
   216ce:	f022 0403 	bic.w	r4, r2, #3
   216d2:	1f1d      	subs	r5, r3, #4
   216d4:	0896      	lsrs	r6, r2, #2
   216d6:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   216d8:	42b9      	cmp	r1, r7
   216da:	d105      	bne.n	216e8 <memcpy+0x42>
   216dc:	f06f 0503 	mvn.w	r5, #3
   216e0:	fb05 2206 	mla	r2, r5, r6, r2
   216e4:	4423      	add	r3, r4
   216e6:	e7e4      	b.n	216b2 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   216e8:	f851 cb04 	ldr.w	ip, [r1], #4
   216ec:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   216f0:	e7f2      	b.n	216d8 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   216f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   216f6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   216fa:	e7dc      	b.n	216b6 <memcpy+0x10>

000216fc <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   216fc:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   216fe:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   21700:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   21702:	079c      	lsls	r4, r3, #30
   21704:	d111      	bne.n	2172a <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   21706:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   2170a:	f022 0603 	bic.w	r6, r2, #3
   2170e:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   21712:	441e      	add	r6, r3
   21714:	0894      	lsrs	r4, r2, #2
   21716:	42b3      	cmp	r3, r6
   21718:	d10d      	bne.n	21736 <memset+0x3a>
   2171a:	f06f 0503 	mvn.w	r5, #3
   2171e:	fb05 2204 	mla	r2, r5, r4, r2
   21722:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   21724:	4293      	cmp	r3, r2
   21726:	d109      	bne.n	2173c <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   21728:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   2172a:	2a00      	cmp	r2, #0
   2172c:	d0fc      	beq.n	21728 <memset+0x2c>
		*(d_byte++) = c_byte;
   2172e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   21732:	3a01      	subs	r2, #1
   21734:	e7e5      	b.n	21702 <memset+0x6>
		*(d_word++) = c_word;
   21736:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   2173a:	e7ec      	b.n	21716 <memset+0x1a>
		*(d_byte++) = c_byte;
   2173c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   21740:	e7f0      	b.n	21724 <memset+0x28>

00021742 <_stdout_hook_default>:
}
   21742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21746:	4770      	bx	lr

00021748 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   21748:	684b      	ldr	r3, [r1, #4]
   2174a:	2b01      	cmp	r3, #1
   2174c:	dd07      	ble.n	2175e <sprintf_out+0x16>
		*(p->ptr) = c;
   2174e:	680b      	ldr	r3, [r1, #0]
   21750:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   21752:	680b      	ldr	r3, [r1, #0]
   21754:	3301      	adds	r3, #1
   21756:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   21758:	684b      	ldr	r3, [r1, #4]
   2175a:	3b01      	subs	r3, #1
   2175c:	604b      	str	r3, [r1, #4]
}
   2175e:	2000      	movs	r0, #0
   21760:	4770      	bx	lr

00021762 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   21762:	f7fa be6d 	b.w	1c440 <SystemInit>

00021766 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   21766:	b530      	push	{r4, r5, lr}
   21768:	b085      	sub	sp, #20
   2176a:	4604      	mov	r4, r0
   2176c:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   2176e:	4668      	mov	r0, sp
   21770:	2203      	movs	r2, #3
   21772:	f7ff ff98 	bl	216a6 <memcpy>
	(void)memset(res + 3, 0, 13);
   21776:	220d      	movs	r2, #13
   21778:	2100      	movs	r1, #0
   2177a:	f10d 0003 	add.w	r0, sp, #3
   2177e:	f7ff ffbd 	bl	216fc <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   21782:	4620      	mov	r0, r4
   21784:	466a      	mov	r2, sp
   21786:	4669      	mov	r1, sp
   21788:	f7f0 fef6 	bl	12578 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   2178c:	4604      	mov	r4, r0
   2178e:	b920      	cbnz	r0, 2179a <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   21790:	2203      	movs	r2, #3
   21792:	4669      	mov	r1, sp
   21794:	4628      	mov	r0, r5
   21796:	f7ff ff86 	bl	216a6 <memcpy>

	return 0;
}
   2179a:	4620      	mov	r0, r4
   2179c:	b005      	add	sp, #20
   2179e:	bd30      	pop	{r4, r5, pc}

000217a0 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   217a0:	b513      	push	{r0, r1, r4, lr}
   217a2:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   217a4:	aa01      	add	r2, sp, #4
   217a6:	3103      	adds	r1, #3
   217a8:	f7ff ffdd 	bl	21766 <ah>
	if (err) {
   217ac:	b948      	cbnz	r0, 217c2 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   217ae:	2203      	movs	r2, #3
   217b0:	a901      	add	r1, sp, #4
   217b2:	4620      	mov	r0, r4
   217b4:	f7ff ff67 	bl	21686 <memcmp>
   217b8:	fab0 f080 	clz	r0, r0
   217bc:	0940      	lsrs	r0, r0, #5
}
   217be:	b002      	add	sp, #8
   217c0:	bd10      	pop	{r4, pc}
		return false;
   217c2:	2000      	movs	r0, #0
   217c4:	e7fb      	b.n	217be <bt_rpa_irk_matches+0x1e>

000217c6 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   217c6:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   217c8:	1cce      	adds	r6, r1, #3
{
   217ca:	4605      	mov	r5, r0
   217cc:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   217ce:	4630      	mov	r0, r6
   217d0:	2103      	movs	r1, #3
   217d2:	f7f0 fecf 	bl	12574 <bt_rand>
	if (err) {
   217d6:	b960      	cbnz	r0, 217f2 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   217d8:	7963      	ldrb	r3, [r4, #5]
   217da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   217de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   217e2:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   217e4:	4622      	mov	r2, r4
   217e6:	4631      	mov	r1, r6
   217e8:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   217ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   217ee:	f7ff bfba 	b.w	21766 <ah>
}
   217f2:	bd70      	pop	{r4, r5, r6, pc}

000217f4 <send_cmd_status>:
{
   217f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   217f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   217fc:	4606      	mov	r6, r0
   217fe:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   21800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21804:	2100      	movs	r1, #0
   21806:	200f      	movs	r0, #15
   21808:	f7e6 fed4 	bl	85b4 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2180c:	2701      	movs	r7, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   2180e:	f100 0808 	add.w	r8, r0, #8
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   21812:	4604      	mov	r4, r0
   21814:	7507      	strb	r7, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   21816:	2102      	movs	r1, #2
   21818:	4640      	mov	r0, r8
   2181a:	f002 f817 	bl	2384c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2181e:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   21820:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   21822:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   21824:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   21826:	4640      	mov	r0, r8
   21828:	f002 f810 	bl	2384c <net_buf_simple_add>
	evt->ncmd = 1U;
   2182c:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   2182e:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   21830:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   21832:	4620      	mov	r0, r4
}
   21834:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   21838:	f7e8 baf0 	b.w	9e1c <bt_recv_prio>

0002183c <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   2183c:	f101 0320 	add.w	r3, r1, #32
   21840:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   21842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   21846:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2184a:	428b      	cmp	r3, r1
   2184c:	d1f9      	bne.n	21842 <sys_memcpy_swap.constprop.0+0x6>
}
   2184e:	4770      	bx	lr

00021850 <default_CSPRNG>:
{
   21850:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   21852:	f7f0 fe8f 	bl	12574 <bt_rand>
}
   21856:	fab0 f080 	clz	r0, r0
   2185a:	0940      	lsrs	r0, r0, #5
   2185c:	bd08      	pop	{r3, pc}

0002185e <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2185e:	b510      	push	{r4, lr}
   21860:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   21862:	7801      	ldrb	r1, [r0, #0]
   21864:	7822      	ldrb	r2, [r4, #0]
   21866:	428a      	cmp	r2, r1
{
   21868:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2186a:	d00e      	beq.n	2188a <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   2186c:	4669      	mov	r1, sp
   2186e:	f7e6 fe2d 	bl	84cc <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   21872:	a905      	add	r1, sp, #20
   21874:	4620      	mov	r0, r4
   21876:	f7e6 fe29 	bl	84cc <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2187a:	2210      	movs	r2, #16
   2187c:	f10d 0115 	add.w	r1, sp, #21
   21880:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   21884:	f7ff feff 	bl	21686 <memcmp>
   21888:	e007      	b.n	2189a <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   2188a:	2a01      	cmp	r2, #1
   2188c:	d007      	beq.n	2189e <bt_uuid_cmp+0x40>
   2188e:	2a02      	cmp	r2, #2
   21890:	d008      	beq.n	218a4 <bt_uuid_cmp+0x46>
   21892:	b95a      	cbnz	r2, 218ac <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   21894:	8840      	ldrh	r0, [r0, #2]
   21896:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   21898:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   2189a:	b00a      	add	sp, #40	; 0x28
   2189c:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2189e:	6840      	ldr	r0, [r0, #4]
   218a0:	6863      	ldr	r3, [r4, #4]
   218a2:	e7f9      	b.n	21898 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   218a4:	2210      	movs	r2, #16
   218a6:	1c61      	adds	r1, r4, #1
   218a8:	3001      	adds	r0, #1
   218aa:	e7eb      	b.n	21884 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   218ac:	f06f 0015 	mvn.w	r0, #21
   218b0:	e7f3      	b.n	2189a <bt_uuid_cmp+0x3c>

000218b2 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   218b2:	2a04      	cmp	r2, #4
{
   218b4:	b538      	push	{r3, r4, r5, lr}
   218b6:	460c      	mov	r4, r1
	switch (data_len) {
   218b8:	d00d      	beq.n	218d6 <bt_uuid_create+0x24>
   218ba:	2a10      	cmp	r2, #16
   218bc:	d019      	beq.n	218f2 <bt_uuid_create+0x40>
   218be:	2a02      	cmp	r2, #2
   218c0:	f04f 0300 	mov.w	r3, #0
   218c4:	d11b      	bne.n	218fe <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   218c6:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   218c8:	784a      	ldrb	r2, [r1, #1]
   218ca:	780b      	ldrb	r3, [r1, #0]
   218cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   218d0:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   218d2:	2001      	movs	r0, #1
}
   218d4:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   218d6:	2301      	movs	r3, #1
   218d8:	7003      	strb	r3, [r0, #0]
   218da:	78a2      	ldrb	r2, [r4, #2]
   218dc:	78c9      	ldrb	r1, [r1, #3]
   218de:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   218e0:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   218e4:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   218e6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   218ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   218ee:	6042      	str	r2, [r0, #4]
		break;
   218f0:	e7ef      	b.n	218d2 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   218f2:	2302      	movs	r3, #2
   218f4:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   218f8:	f7ff fed5 	bl	216a6 <memcpy>
		break;
   218fc:	e7e9      	b.n	218d2 <bt_uuid_create+0x20>
	switch (data_len) {
   218fe:	4618      	mov	r0, r3
   21900:	e7e8      	b.n	218d4 <bt_uuid_create+0x22>

00021902 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   21902:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   21904:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   21906:	2106      	movs	r1, #6
{
   21908:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2190a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2190e:	f7f0 fe31 	bl	12574 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   21912:	b918      	cbnz	r0, 2191c <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   21914:	79a3      	ldrb	r3, [r4, #6]
   21916:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2191a:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2191c:	bd10      	pop	{r4, pc}

0002191e <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2191e:	280f      	cmp	r0, #15
   21920:	d806      	bhi.n	21930 <bt_hci_evt_get_flags+0x12>
   21922:	280d      	cmp	r0, #13
   21924:	d80b      	bhi.n	2193e <bt_hci_evt_get_flags+0x20>
   21926:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   21928:	bf14      	ite	ne
   2192a:	2002      	movne	r0, #2
   2192c:	2003      	moveq	r0, #3
   2192e:	4770      	bx	lr
	switch (evt) {
   21930:	2813      	cmp	r0, #19
   21932:	d004      	beq.n	2193e <bt_hci_evt_get_flags+0x20>
   21934:	281a      	cmp	r0, #26
   21936:	bf14      	ite	ne
   21938:	2002      	movne	r0, #2
   2193a:	2001      	moveq	r0, #1
   2193c:	4770      	bx	lr
   2193e:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   21940:	4770      	bx	lr

00021942 <get_adv_channel_map>:
{
   21942:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   21944:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   21948:	bf0c      	ite	eq
   2194a:	2007      	moveq	r0, #7
   2194c:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2194e:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   21950:	bf48      	it	mi
   21952:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   21956:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   21958:	bf48      	it	mi
   2195a:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2195e:	4770      	bx	lr

00021960 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21960:	f3bf 8f5b 	dmb	ish
   21964:	6800      	ldr	r0, [r0, #0]
   21966:	f3bf 8f5b 	dmb	ish
}
   2196a:	4770      	bx	lr

0002196c <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2196c:	2207      	movs	r2, #7
   2196e:	f7ff be9a 	b.w	216a6 <memcpy>

00021972 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   21972:	2207      	movs	r2, #7
   21974:	f7ff be87 	b.w	21686 <memcmp>

00021978 <atomic_and>:
{
   21978:	4603      	mov	r3, r0
}
   2197a:	f3bf 8f5b 	dmb	ish
   2197e:	e853 0f00 	ldrex	r0, [r3]
   21982:	ea00 0201 	and.w	r2, r0, r1
   21986:	e843 2c00 	strex	ip, r2, [r3]
   2198a:	f1bc 0f00 	cmp.w	ip, #0
   2198e:	d1f6      	bne.n	2197e <atomic_and+0x6>
   21990:	f3bf 8f5b 	dmb	ish
   21994:	4770      	bx	lr

00021996 <atomic_or>:
{
   21996:	4603      	mov	r3, r0
}
   21998:	f3bf 8f5b 	dmb	ish
   2199c:	e853 0f00 	ldrex	r0, [r3]
   219a0:	ea40 0201 	orr.w	r2, r0, r1
   219a4:	e843 2c00 	strex	ip, r2, [r3]
   219a8:	f1bc 0f00 	cmp.w	ip, #0
   219ac:	d1f6      	bne.n	2199c <atomic_or+0x6>
   219ae:	f3bf 8f5b 	dmb	ish
   219b2:	4770      	bx	lr

000219b4 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   219b4:	460b      	mov	r3, r1
   219b6:	b410      	push	{r4}
   219b8:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   219ba:	f001 041f 	and.w	r4, r1, #31
   219be:	2101      	movs	r1, #1
   219c0:	40a1      	lsls	r1, r4

	if (val) {
   219c2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   219c6:	b112      	cbz	r2, 219ce <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   219c8:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   219ca:	f7ff bfe4 	b.w	21996 <atomic_or>
}
   219ce:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   219d0:	43c9      	mvns	r1, r1
   219d2:	f7ff bfd1 	b.w	21978 <atomic_and>

000219d6 <sys_put_le64>:
	dst[1] = val >> 8;
   219d6:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   219da:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   219dc:	0e00      	lsrs	r0, r0, #24
   219de:	7053      	strb	r3, [r2, #1]
   219e0:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   219e2:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   219e4:	f3c1 2007 	ubfx	r0, r1, #8, #8
   219e8:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   219ea:	7093      	strb	r3, [r2, #2]
   219ec:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   219ee:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   219f0:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   219f2:	71d1      	strb	r1, [r2, #7]
}
   219f4:	4770      	bx	lr

000219f6 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   219f6:	f100 0310 	add.w	r3, r0, #16
{
   219fa:	b510      	push	{r4, lr}
   219fc:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   219fe:	4618      	mov	r0, r3
   21a00:	f7ff ffae 	bl	21960 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   21a04:	0642      	lsls	r2, r0, #25
   21a06:	d50a      	bpl.n	21a1e <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   21a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   21a0c:	4618      	mov	r0, r3
   21a0e:	f7ff ffc2 	bl	21996 <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   21a12:	4620      	mov	r0, r4
   21a14:	2100      	movs	r1, #0
}
   21a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   21a1a:	f7e7 bdb1 	b.w	9580 <set_le_adv_enable_legacy>
}
   21a1e:	bd10      	pop	{r4, pc}

00021a20 <adv_unpause_enabled>:
{
   21a20:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21a22:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   21a26:	4604      	mov	r4, r0
   21a28:	3010      	adds	r0, #16
   21a2a:	f7ff ffa5 	bl	21978 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   21a2e:	0483      	lsls	r3, r0, #18
   21a30:	d505      	bpl.n	21a3e <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   21a32:	4620      	mov	r0, r4
   21a34:	2101      	movs	r1, #1
}
   21a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   21a3a:	f7e7 bda1 	b.w	9580 <set_le_adv_enable_legacy>
}
   21a3e:	bd10      	pop	{r4, pc}

00021a40 <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   21a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21a42:	4607      	mov	r7, r0
   21a44:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   21a46:	f242 0027 	movw	r0, #8231	; 0x2027
   21a4a:	2127      	movs	r1, #39	; 0x27
   21a4c:	f7e7 fb12 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
   21a50:	4604      	mov	r4, r0
   21a52:	b1d0      	cbz	r0, 21a8a <hci_id_add.isra.0+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
   21a54:	2127      	movs	r1, #39	; 0x27
   21a56:	3008      	adds	r0, #8
   21a58:	f001 fef8 	bl	2384c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   21a5c:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
   21a5e:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   21a60:	f7ff ff84 	bl	2196c <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   21a64:	4631      	mov	r1, r6
   21a66:	2210      	movs	r2, #16
   21a68:	1de8      	adds	r0, r5, #7
   21a6a:	f7ff fe1c 	bl	216a6 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   21a6e:	2210      	movs	r2, #16
   21a70:	2100      	movs	r1, #0
   21a72:	f105 0017 	add.w	r0, r5, #23
   21a76:	f7ff fe41 	bl	216fc <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   21a7a:	4621      	mov	r1, r4
   21a7c:	2200      	movs	r2, #0
}
   21a7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   21a82:	f242 0027 	movw	r0, #8231	; 0x2027
   21a86:	f7e7 bc51 	b.w	932c <bt_hci_cmd_send_sync>
}
   21a8a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   21a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021a90 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   21a90:	7a03      	ldrb	r3, [r0, #8]
   21a92:	075b      	lsls	r3, r3, #29
   21a94:	d504      	bpl.n	21aa0 <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   21a96:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   21a9a:	3001      	adds	r0, #1
   21a9c:	f7ff bfd0 	b.w	21a40 <hci_id_add.isra.0>
}
   21aa0:	4770      	bx	lr

00021aa2 <addr_res_enable>:
{
   21aa2:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   21aa4:	2101      	movs	r1, #1
{
   21aa6:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   21aa8:	f242 002d 	movw	r0, #8237	; 0x202d
   21aac:	f7e7 fae2 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
   21ab0:	4604      	mov	r4, r0
   21ab2:	b158      	cbz	r0, 21acc <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
   21ab4:	4629      	mov	r1, r5
   21ab6:	3008      	adds	r0, #8
   21ab8:	f001 fed7 	bl	2386a <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   21abc:	4621      	mov	r1, r4
   21abe:	2200      	movs	r2, #0
}
   21ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   21ac4:	f242 002d 	movw	r0, #8237	; 0x202d
   21ac8:	f7e7 bc30 	b.w	932c <bt_hci_cmd_send_sync>
}
   21acc:	f06f 0036 	mvn.w	r0, #54	; 0x36
   21ad0:	bd38      	pop	{r3, r4, r5, pc}

00021ad2 <bt_lookup_id_addr>:
{
   21ad2:	b510      	push	{r4, lr}
   21ad4:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   21ad6:	f7ed fe45 	bl	f764 <bt_keys_find_irk>
		if (keys) {
   21ada:	b100      	cbz	r0, 21ade <bt_lookup_id_addr+0xc>
			return &keys->addr;
   21adc:	1c44      	adds	r4, r0, #1
}
   21ade:	4620      	mov	r0, r4
   21ae0:	bd10      	pop	{r4, pc}

00021ae2 <bt_hci_disconnect>:
{
   21ae2:	b570      	push	{r4, r5, r6, lr}
   21ae4:	4606      	mov	r6, r0
   21ae6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   21ae8:	f240 4006 	movw	r0, #1030	; 0x406
   21aec:	2103      	movs	r1, #3
   21aee:	f7e7 fac1 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
   21af2:	4604      	mov	r4, r0
   21af4:	b160      	cbz	r0, 21b10 <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   21af6:	2103      	movs	r1, #3
   21af8:	3008      	adds	r0, #8
   21afa:	f001 fea7 	bl	2384c <net_buf_simple_add>
	disconn->reason = reason;
   21afe:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   21b00:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   21b02:	4621      	mov	r1, r4
   21b04:	f240 4006 	movw	r0, #1030	; 0x406
}
   21b08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   21b0c:	f7e7 baea 	b.w	90e4 <bt_hci_cmd_send>
}
   21b10:	f06f 0036 	mvn.w	r0, #54	; 0x36
   21b14:	bd70      	pop	{r4, r5, r6, pc}

00021b16 <bt_le_set_data_len>:
{
   21b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21b18:	4607      	mov	r7, r0
   21b1a:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   21b1c:	f242 0022 	movw	r0, #8226	; 0x2022
   21b20:	2106      	movs	r1, #6
{
   21b22:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   21b24:	f7e7 faa6 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
   21b28:	4604      	mov	r4, r0
   21b2a:	b170      	cbz	r0, 21b4a <bt_le_set_data_len+0x34>
	cp = net_buf_add(buf, sizeof(*cp));
   21b2c:	2106      	movs	r1, #6
   21b2e:	3008      	adds	r0, #8
   21b30:	f001 fe8c 	bl	2384c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   21b34:	883b      	ldrh	r3, [r7, #0]
   21b36:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   21b38:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   21b3a:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   21b3c:	4621      	mov	r1, r4
   21b3e:	f242 0022 	movw	r0, #8226	; 0x2022
}
   21b42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   21b46:	f7e7 bacd 	b.w	90e4 <bt_hci_cmd_send>
}
   21b4a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   21b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021b50 <bt_le_set_phy>:
{
   21b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21b54:	4680      	mov	r8, r0
   21b56:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   21b58:	f242 0032 	movw	r0, #8242	; 0x2032
   21b5c:	2107      	movs	r1, #7
{
   21b5e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   21b62:	4616      	mov	r6, r2
   21b64:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   21b66:	f7e7 fa85 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
   21b6a:	4604      	mov	r4, r0
   21b6c:	b190      	cbz	r0, 21b94 <bt_le_set_phy+0x44>
	cp = net_buf_add(buf, sizeof(*cp));
   21b6e:	2107      	movs	r1, #7
   21b70:	3008      	adds	r0, #8
   21b72:	f001 fe6b 	bl	2384c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   21b76:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   21b7a:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   21b7c:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   21b7e:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   21b80:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   21b82:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   21b86:	4621      	mov	r1, r4
   21b88:	f242 0032 	movw	r0, #8242	; 0x2032
}
   21b8c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   21b90:	f7e7 baa8 	b.w	90e4 <bt_hci_cmd_send>
}
   21b94:	f06f 0036 	mvn.w	r0, #54	; 0x36
   21b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00021b9c <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   21b9c:	8802      	ldrh	r2, [r0, #0]
   21b9e:	8843      	ldrh	r3, [r0, #2]
   21ba0:	429a      	cmp	r2, r3
{
   21ba2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   21ba4:	d818      	bhi.n	21bd8 <bt_le_conn_params_valid+0x3c>
   21ba6:	2a05      	cmp	r2, #5
   21ba8:	d916      	bls.n	21bd8 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   21baa:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   21bae:	d813      	bhi.n	21bd8 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   21bb0:	8884      	ldrh	r4, [r0, #4]
   21bb2:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   21bb6:	d20f      	bcs.n	21bd8 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   21bb8:	88c1      	ldrh	r1, [r0, #6]
   21bba:	f1a1 020a 	sub.w	r2, r1, #10
   21bbe:	b292      	uxth	r2, r2
   21bc0:	f640 4076 	movw	r0, #3190	; 0xc76
   21bc4:	4282      	cmp	r2, r0
   21bc6:	d807      	bhi.n	21bd8 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   21bc8:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   21bcc:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   21bd0:	bf34      	ite	cc
   21bd2:	2001      	movcc	r0, #1
   21bd4:	2000      	movcs	r0, #0
}
   21bd6:	bd10      	pop	{r4, pc}
		return false;
   21bd8:	2000      	movs	r0, #0
   21bda:	e7fc      	b.n	21bd6 <bt_le_conn_params_valid+0x3a>

00021bdc <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   21bdc:	7a03      	ldrb	r3, [r0, #8]
   21bde:	07d9      	lsls	r1, r3, #31
   21be0:	d504      	bpl.n	21bec <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   21be2:	f023 0301 	bic.w	r3, r3, #1
   21be6:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   21be8:	f7e7 beba 	b.w	9960 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   21bec:	0799      	lsls	r1, r3, #30
   21bee:	d504      	bpl.n	21bfa <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   21bf0:	f023 0302 	bic.w	r3, r3, #2
   21bf4:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   21bf6:	f7e7 bf7f 	b.w	9af8 <bt_id_del>
}
   21bfa:	4770      	bx	lr

00021bfc <bt_send>:
		return bt_hci_ecc_send(buf);
   21bfc:	f7e6 bbba 	b.w	8374 <bt_hci_ecc_send>

00021c00 <bt_addr_le_is_bonded>:
{
   21c00:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   21c02:	f7ed fde9 	bl	f7d8 <bt_keys_find_addr>
		return keys && keys->keys;
   21c06:	b118      	cbz	r0, 21c10 <bt_addr_le_is_bonded+0x10>
   21c08:	89c0      	ldrh	r0, [r0, #14]
   21c0a:	3800      	subs	r0, #0
   21c0c:	bf18      	it	ne
   21c0e:	2001      	movne	r0, #1
}
   21c10:	bd08      	pop	{r3, pc}

00021c12 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   21c12:	6880      	ldr	r0, [r0, #8]
   21c14:	f7e8 bcfc 	b.w	a610 <enh_conn_complete>

00021c18 <le_legacy_conn_complete>:
{
   21c18:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   21c1a:	6881      	ldr	r1, [r0, #8]
{
   21c1c:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   21c1e:	780b      	ldrb	r3, [r1, #0]
   21c20:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   21c24:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   21c28:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   21c2c:	78cb      	ldrb	r3, [r1, #3]
   21c2e:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   21c32:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   21c36:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   21c3a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   21c3e:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   21c42:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   21c46:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   21c4a:	7c4b      	ldrb	r3, [r1, #17]
   21c4c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   21c50:	a803      	add	r0, sp, #12
   21c52:	3104      	adds	r1, #4
   21c54:	f7ff fe8a 	bl	2196c <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   21c58:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   21c5a:	4669      	mov	r1, sp
   21c5c:	2206      	movs	r2, #6
   21c5e:	f10d 0013 	add.w	r0, sp, #19
   21c62:	9400      	str	r4, [sp, #0]
   21c64:	f8ad 4004 	strh.w	r4, [sp, #4]
   21c68:	f7ff fd1d 	bl	216a6 <memcpy>
   21c6c:	2206      	movs	r2, #6
   21c6e:	4669      	mov	r1, sp
   21c70:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   21c74:	9400      	str	r4, [sp, #0]
   21c76:	f8ad 4004 	strh.w	r4, [sp, #4]
   21c7a:	f7ff fd14 	bl	216a6 <memcpy>
	enh_conn_complete(&enh);
   21c7e:	a802      	add	r0, sp, #8
   21c80:	f7e8 fcc6 	bl	a610 <enh_conn_complete>
}
   21c84:	b00a      	add	sp, #40	; 0x28
   21c86:	bd10      	pop	{r4, pc}

00021c88 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   21c88:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   21c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   21c8e:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   21c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21c94:	2100      	movs	r1, #0
{
   21c96:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   21c98:	f7e6 fc8c 	bl	85b4 <bt_buf_get_evt>

	hdr = net_buf_add(buf, sizeof(*hdr));
   21c9c:	2102      	movs	r1, #2
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   21c9e:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   21ca0:	3008      	adds	r0, #8
   21ca2:	f001 fdd3 	bl	2384c <net_buf_simple_add>
	hdr->evt = evt;
   21ca6:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   21ca8:	7045      	strb	r5, [r0, #1]

	return buf;
}
   21caa:	4620      	mov	r0, r4
   21cac:	bd70      	pop	{r4, r5, r6, pc}

00021cae <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   21cae:	3103      	adds	r1, #3
{
   21cb0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   21cb2:	b2c9      	uxtb	r1, r1
{
   21cb4:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   21cb6:	200e      	movs	r0, #14
   21cb8:	f7ff ffe6 	bl	21c88 <bt_hci_evt_create>

	cc = net_buf_add(buf, sizeof(*cc));
   21cbc:	2103      	movs	r1, #3
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   21cbe:	4604      	mov	r4, r0
	cc = net_buf_add(buf, sizeof(*cc));
   21cc0:	3008      	adds	r0, #8
   21cc2:	f001 fdc3 	bl	2384c <net_buf_simple_add>
	cc->ncmd = 1U;
   21cc6:	2301      	movs	r3, #1
   21cc8:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   21cca:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   21cce:	4620      	mov	r0, r4
   21cd0:	bd38      	pop	{r3, r4, r5, pc}

00021cd2 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   21cd2:	b570      	push	{r4, r5, r6, lr}
   21cd4:	4605      	mov	r5, r0
   21cd6:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   21cd8:	200f      	movs	r0, #15
   21cda:	2104      	movs	r1, #4
   21cdc:	f7ff ffd4 	bl	21c88 <bt_hci_evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
   21ce0:	2104      	movs	r1, #4
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   21ce2:	4604      	mov	r4, r0
	cs = net_buf_add(buf, sizeof(*cs));
   21ce4:	3008      	adds	r0, #8
   21ce6:	f001 fdb1 	bl	2384c <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1U;
   21cea:	2201      	movs	r2, #1
	cs->status = status;
   21cec:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   21cee:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   21cf0:	8045      	strh	r5, [r0, #2]

	return buf;
}
   21cf2:	4620      	mov	r0, r4
   21cf4:	bd70      	pop	{r4, r5, r6, pc}

00021cf6 <tx_notify>:
{
   21cf6:	b570      	push	{r4, r5, r6, lr}
   21cf8:	4604      	mov	r4, r0
	__asm__ volatile(
   21cfa:	f04f 0220 	mov.w	r2, #32
   21cfe:	f3ef 8311 	mrs	r3, BASEPRI
   21d02:	f382 8811 	msr	BASEPRI, r2
   21d06:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   21d0a:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   21d0c:	b920      	cbnz	r0, 21d18 <tx_notify+0x22>
	__asm__ volatile(
   21d0e:	f383 8811 	msr	BASEPRI, r3
   21d12:	f3bf 8f6f 	isb	sy
}
   21d16:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21d18:	6a61      	ldr	r1, [r4, #36]	; 0x24
   21d1a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   21d1c:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21d1e:	4288      	cmp	r0, r1
	list->tail = node;
   21d20:	bf08      	it	eq
   21d22:	6262      	streq	r2, [r4, #36]	; 0x24
   21d24:	f383 8811 	msr	BASEPRI, r3
   21d28:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   21d2c:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   21d30:	f7e8 fdec 	bl	a90c <tx_free>
		cb(conn, user_data);
   21d34:	4631      	mov	r1, r6
   21d36:	4620      	mov	r0, r4
   21d38:	47a8      	blx	r5
	while (1) {
   21d3a:	e7de      	b.n	21cfa <tx_notify+0x4>

00021d3c <tx_complete_work>:
	tx_notify(conn);
   21d3c:	3828      	subs	r0, #40	; 0x28
   21d3e:	f7ff bfda 	b.w	21cf6 <tx_notify>

00021d42 <bt_conn_new>:
{
   21d42:	b538      	push	{r3, r4, r5, lr}
   21d44:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   21d46:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   21d48:	2501      	movs	r5, #1
   21d4a:	428b      	cmp	r3, r1
   21d4c:	d102      	bne.n	21d54 <bt_conn_new+0x12>
		return NULL;
   21d4e:	2400      	movs	r4, #0
}
   21d50:	4620      	mov	r0, r4
   21d52:	bd38      	pop	{r3, r4, r5, pc}
   21d54:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   21d58:	f3bf 8f5b 	dmb	ish
   21d5c:	e852 0f00 	ldrex	r0, [r2]
   21d60:	2800      	cmp	r0, #0
   21d62:	d104      	bne.n	21d6e <bt_conn_new+0x2c>
   21d64:	e842 5c00 	strex	ip, r5, [r2]
   21d68:	f1bc 0f00 	cmp.w	ip, #0
   21d6c:	d1f6      	bne.n	21d5c <bt_conn_new+0x1a>
   21d6e:	f3bf 8f5b 	dmb	ish
   21d72:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   21d76:	d002      	beq.n	21d7e <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   21d78:	3301      	adds	r3, #1
   21d7a:	4604      	mov	r4, r0
   21d7c:	e7e5      	b.n	21d4a <bt_conn_new+0x8>
	if (!conn) {
   21d7e:	2c00      	cmp	r4, #0
   21d80:	d0e6      	beq.n	21d50 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   21d82:	22b8      	movs	r2, #184	; 0xb8
   21d84:	2100      	movs	r1, #0
   21d86:	4620      	mov	r0, r4
   21d88:	f7ff fcb8 	bl	216fc <memset>
	return conn;
   21d8c:	e7e0      	b.n	21d50 <bt_conn_new+0xe>

00021d8e <bt_conn_set_security>:
{
   21d8e:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   21d90:	7b43      	ldrb	r3, [r0, #13]
   21d92:	2b07      	cmp	r3, #7
{
   21d94:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   21d96:	d128      	bne.n	21dea <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   21d98:	7a43      	ldrb	r3, [r0, #9]
   21d9a:	428b      	cmp	r3, r1
   21d9c:	d228      	bcs.n	21df0 <bt_conn_set_security+0x62>
   21d9e:	7a83      	ldrb	r3, [r0, #10]
   21da0:	428b      	cmp	r3, r1
   21da2:	d225      	bcs.n	21df0 <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21da4:	f3bf 8f5b 	dmb	ish
	if (val) {
   21da8:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   21daa:	f100 0304 	add.w	r3, r0, #4
   21dae:	d513      	bpl.n	21dd8 <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21db0:	e853 2f00 	ldrex	r2, [r3]
   21db4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   21db8:	e843 2000 	strex	r0, r2, [r3]
   21dbc:	2800      	cmp	r0, #0
   21dbe:	d1f7      	bne.n	21db0 <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21dc0:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   21dc4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   21dc8:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   21dca:	4620      	mov	r0, r4
   21dcc:	f7ed fb1a 	bl	f404 <bt_smp_start_security>
	if (err) {
   21dd0:	b108      	cbz	r0, 21dd6 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   21dd2:	7a63      	ldrb	r3, [r4, #9]
   21dd4:	72a3      	strb	r3, [r4, #10]
}
   21dd6:	bd10      	pop	{r4, pc}
   21dd8:	e853 2f00 	ldrex	r2, [r3]
   21ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   21de0:	e843 2000 	strex	r0, r2, [r3]
   21de4:	2800      	cmp	r0, #0
   21de6:	d0eb      	beq.n	21dc0 <bt_conn_set_security+0x32>
   21de8:	e7f6      	b.n	21dd8 <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   21dea:	f06f 0038 	mvn.w	r0, #56	; 0x38
   21dee:	e7f2      	b.n	21dd6 <bt_conn_set_security+0x48>
		return 0;
   21df0:	2000      	movs	r0, #0
   21df2:	e7f0      	b.n	21dd6 <bt_conn_set_security+0x48>

00021df4 <bt_conn_get_security>:
}
   21df4:	7a40      	ldrb	r0, [r0, #9]
   21df6:	4770      	bx	lr

00021df8 <bt_conn_reset_rx_state>:
{
   21df8:	b510      	push	{r4, lr}
   21dfa:	4604      	mov	r4, r0
	if (!conn->rx) {
   21dfc:	6900      	ldr	r0, [r0, #16]
   21dfe:	b118      	cbz	r0, 21e08 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   21e00:	f7f9 fba8 	bl	1b554 <net_buf_unref>
	conn->rx = NULL;
   21e04:	2300      	movs	r3, #0
   21e06:	6123      	str	r3, [r4, #16]
}
   21e08:	bd10      	pop	{r4, pc}

00021e0a <bt_conn_is_peer_addr_le>:
{
   21e0a:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   21e0c:	7a03      	ldrb	r3, [r0, #8]
   21e0e:	428b      	cmp	r3, r1
{
   21e10:	4604      	mov	r4, r0
   21e12:	4615      	mov	r5, r2
	if (id != conn->id) {
   21e14:	d115      	bne.n	21e42 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   21e16:	f100 0188 	add.w	r1, r0, #136	; 0x88
   21e1a:	2207      	movs	r2, #7
   21e1c:	4628      	mov	r0, r5
   21e1e:	f7ff fc32 	bl	21686 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   21e22:	b180      	cbz	r0, 21e46 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   21e24:	78e3      	ldrb	r3, [r4, #3]
   21e26:	2207      	movs	r2, #7
   21e28:	b943      	cbnz	r3, 21e3c <bt_conn_is_peer_addr_le+0x32>
   21e2a:	f104 0196 	add.w	r1, r4, #150	; 0x96
   21e2e:	4628      	mov	r0, r5
   21e30:	f7ff fc29 	bl	21686 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   21e34:	fab0 f080 	clz	r0, r0
   21e38:	0940      	lsrs	r0, r0, #5
}
   21e3a:	bd38      	pop	{r3, r4, r5, pc}
   21e3c:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   21e40:	e7f5      	b.n	21e2e <bt_conn_is_peer_addr_le+0x24>
		return false;
   21e42:	2000      	movs	r0, #0
   21e44:	e7f9      	b.n	21e3a <bt_conn_is_peer_addr_le+0x30>
		return true;
   21e46:	2001      	movs	r0, #1
   21e48:	e7f7      	b.n	21e3a <bt_conn_is_peer_addr_le+0x30>

00021e4a <bt_conn_ref>:
{
   21e4a:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   21e4c:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21e50:	f3bf 8f5b 	dmb	ish
   21e54:	6813      	ldr	r3, [r2, #0]
   21e56:	f3bf 8f5b 	dmb	ish
		if (!old) {
   21e5a:	b17b      	cbz	r3, 21e7c <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   21e5c:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   21e60:	1c59      	adds	r1, r3, #1
   21e62:	e852 4f00 	ldrex	r4, [r2]
   21e66:	429c      	cmp	r4, r3
   21e68:	d104      	bne.n	21e74 <bt_conn_ref+0x2a>
   21e6a:	e842 1c00 	strex	ip, r1, [r2]
   21e6e:	f1bc 0f00 	cmp.w	ip, #0
   21e72:	d1f6      	bne.n	21e62 <bt_conn_ref+0x18>
   21e74:	f3bf 8f5b 	dmb	ish
   21e78:	d1ea      	bne.n	21e50 <bt_conn_ref+0x6>
}
   21e7a:	bd10      	pop	{r4, pc}
			return NULL;
   21e7c:	4618      	mov	r0, r3
   21e7e:	e7fc      	b.n	21e7a <bt_conn_ref+0x30>

00021e80 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   21e80:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   21e84:	f3bf 8f5b 	dmb	ish
   21e88:	e853 2f00 	ldrex	r2, [r3]
   21e8c:	3a01      	subs	r2, #1
   21e8e:	e843 2100 	strex	r1, r2, [r3]
   21e92:	2900      	cmp	r1, #0
   21e94:	d1f8      	bne.n	21e88 <bt_conn_unref+0x8>
   21e96:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21e9a:	f3bf 8f5b 	dmb	ish
   21e9e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   21ea2:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   21ea6:	b90b      	cbnz	r3, 21eac <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   21ea8:	f7e8 bb7c 	b.w	a5a4 <bt_le_adv_resume>
}
   21eac:	4770      	bx	lr

00021eae <conn_lookup_handle>:
{
   21eae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21eb2:	4607      	mov	r7, r0
   21eb4:	460e      	mov	r6, r1
   21eb6:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   21eb8:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   21eba:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   21ebe:	42b4      	cmp	r4, r6
   21ec0:	d103      	bne.n	21eca <conn_lookup_handle+0x1c>
	return NULL;
   21ec2:	2300      	movs	r3, #0
}
   21ec4:	4618      	mov	r0, r3
   21ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   21eca:	fb09 7004 	mla	r0, r9, r4, r7
   21ece:	f7ff ffbc 	bl	21e4a <bt_conn_ref>
   21ed2:	4603      	mov	r3, r0
		if (!conn) {
   21ed4:	b158      	cbz	r0, 21eee <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   21ed6:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   21ed8:	2d01      	cmp	r5, #1
   21eda:	d002      	beq.n	21ee2 <conn_lookup_handle+0x34>
   21edc:	3d07      	subs	r5, #7
   21ede:	2d01      	cmp	r5, #1
   21ee0:	d803      	bhi.n	21eea <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   21ee2:	881a      	ldrh	r2, [r3, #0]
   21ee4:	4542      	cmp	r2, r8
   21ee6:	d0ed      	beq.n	21ec4 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   21ee8:	4618      	mov	r0, r3
   21eea:	f7ff ffc9 	bl	21e80 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   21eee:	3401      	adds	r4, #1
   21ef0:	e7e5      	b.n	21ebe <conn_lookup_handle+0x10>

00021ef2 <bt_conn_get_dst>:
}
   21ef2:	3088      	adds	r0, #136	; 0x88
   21ef4:	4770      	bx	lr

00021ef6 <bt_conn_le_conn_update>:
{
   21ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ef8:	4607      	mov	r7, r0
   21efa:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   21efc:	f242 0013 	movw	r0, #8211	; 0x2013
   21f00:	210e      	movs	r1, #14
   21f02:	f7e7 f8b7 	bl	9074 <bt_hci_cmd_create>
	if (!buf) {
   21f06:	4606      	mov	r6, r0
   21f08:	b1d0      	cbz	r0, 21f40 <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   21f0a:	210e      	movs	r1, #14
   21f0c:	3008      	adds	r0, #8
   21f0e:	f001 fc9d 	bl	2384c <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   21f12:	220e      	movs	r2, #14
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   21f14:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   21f16:	2100      	movs	r1, #0
   21f18:	f7ff fbf0 	bl	216fc <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   21f1c:	883b      	ldrh	r3, [r7, #0]
   21f1e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   21f20:	882b      	ldrh	r3, [r5, #0]
   21f22:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   21f24:	886b      	ldrh	r3, [r5, #2]
   21f26:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   21f28:	88ab      	ldrh	r3, [r5, #4]
   21f2a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   21f2c:	88eb      	ldrh	r3, [r5, #6]
   21f2e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   21f30:	4631      	mov	r1, r6
   21f32:	2200      	movs	r2, #0
}
   21f34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   21f38:	f242 0013 	movw	r0, #8211	; 0x2013
   21f3c:	f7e7 b9f6 	b.w	932c <bt_hci_cmd_send_sync>
}
   21f40:	f06f 0036 	mvn.w	r0, #54	; 0x36
   21f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021f46 <l2cap_connected>:
}
   21f46:	4770      	bx	lr

00021f48 <l2cap_disconnected>:
   21f48:	4770      	bx	lr

00021f4a <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21f4a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   21f4c:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21f4e:	b17b      	cbz	r3, 21f70 <bt_l2cap_chan_remove+0x26>
   21f50:	3b08      	subs	r3, #8
   21f52:	2200      	movs	r2, #0
   21f54:	b163      	cbz	r3, 21f70 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   21f56:	428b      	cmp	r3, r1
   21f58:	f103 0408 	add.w	r4, r3, #8
   21f5c:	d10f      	bne.n	21f7e <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   21f5e:	688b      	ldr	r3, [r1, #8]
   21f60:	b93a      	cbnz	r2, 21f72 <bt_l2cap_chan_remove+0x28>
   21f62:	6d02      	ldr	r2, [r0, #80]	; 0x50
	list->head = node;
   21f64:	64c3      	str	r3, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   21f66:	4294      	cmp	r4, r2
   21f68:	d100      	bne.n	21f6c <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   21f6a:	6503      	str	r3, [r0, #80]	; 0x50
	parent->next = child;
   21f6c:	2300      	movs	r3, #0
   21f6e:	608b      	str	r3, [r1, #8]
}
   21f70:	bd10      	pop	{r4, pc}
   21f72:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   21f74:	6d03      	ldr	r3, [r0, #80]	; 0x50
   21f76:	429c      	cmp	r4, r3
	list->tail = node;
   21f78:	bf08      	it	eq
   21f7a:	6502      	streq	r2, [r0, #80]	; 0x50
}
   21f7c:	e7f6      	b.n	21f6c <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21f7e:	2c00      	cmp	r4, #0
   21f80:	d0f6      	beq.n	21f70 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21f82:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21f84:	2b00      	cmp	r3, #0
   21f86:	d0f3      	beq.n	21f70 <bt_l2cap_chan_remove+0x26>
   21f88:	3b08      	subs	r3, #8
   21f8a:	4622      	mov	r2, r4
   21f8c:	e7e2      	b.n	21f54 <bt_l2cap_chan_remove+0xa>

00021f8e <bt_l2cap_chan_del>:
{
   21f8e:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   21f90:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   21f94:	4604      	mov	r4, r0
	if (!chan->conn) {
   21f96:	b123      	cbz	r3, 21fa2 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   21f98:	686b      	ldr	r3, [r5, #4]
   21f9a:	b103      	cbz	r3, 21f9e <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   21f9c:	4798      	blx	r3
	chan->conn = NULL;
   21f9e:	2300      	movs	r3, #0
   21fa0:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   21fa2:	68e3      	ldr	r3, [r4, #12]
   21fa4:	b10b      	cbz	r3, 21faa <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   21fa6:	4620      	mov	r0, r4
   21fa8:	4798      	blx	r3
	if (ops->released) {
   21faa:	69eb      	ldr	r3, [r5, #28]
   21fac:	b11b      	cbz	r3, 21fb6 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   21fae:	4620      	mov	r0, r4
}
   21fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   21fb4:	4718      	bx	r3
}
   21fb6:	bd70      	pop	{r4, r5, r6, pc}

00021fb8 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   21fb8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   21fba:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   21fbc:	b18b      	cbz	r3, 21fe2 <bt_l2cap_disconnected+0x2a>
   21fbe:	f1b3 0008 	subs.w	r0, r3, #8
   21fc2:	d00e      	beq.n	21fe2 <bt_l2cap_disconnected+0x2a>
   21fc4:	681c      	ldr	r4, [r3, #0]
   21fc6:	b104      	cbz	r4, 21fca <bt_l2cap_disconnected+0x12>
   21fc8:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   21fca:	f7ff ffe0 	bl	21f8e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   21fce:	b144      	cbz	r4, 21fe2 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21fd0:	f114 0308 	adds.w	r3, r4, #8
   21fd4:	d002      	beq.n	21fdc <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21fd6:	68a3      	ldr	r3, [r4, #8]
   21fd8:	b103      	cbz	r3, 21fdc <bt_l2cap_disconnected+0x24>
   21fda:	3b08      	subs	r3, #8
{
   21fdc:	4620      	mov	r0, r4
   21fde:	461c      	mov	r4, r3
   21fe0:	e7f3      	b.n	21fca <bt_l2cap_disconnected+0x12>
}
   21fe2:	bd10      	pop	{r4, pc}

00021fe4 <bt_l2cap_security_changed>:
{
   21fe4:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   21fe6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   21fe8:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   21fea:	b1a3      	cbz	r3, 22016 <bt_l2cap_security_changed+0x32>
   21fec:	f1b3 0008 	subs.w	r0, r3, #8
   21ff0:	d011      	beq.n	22016 <bt_l2cap_security_changed+0x32>
   21ff2:	681c      	ldr	r4, [r3, #0]
   21ff4:	b104      	cbz	r4, 21ff8 <bt_l2cap_security_changed+0x14>
   21ff6:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   21ff8:	6843      	ldr	r3, [r0, #4]
   21ffa:	689b      	ldr	r3, [r3, #8]
   21ffc:	b10b      	cbz	r3, 22002 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   21ffe:	4629      	mov	r1, r5
   22000:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   22002:	b144      	cbz	r4, 22016 <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22004:	f114 0308 	adds.w	r3, r4, #8
   22008:	d002      	beq.n	22010 <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2200a:	68a3      	ldr	r3, [r4, #8]
   2200c:	b103      	cbz	r3, 22010 <bt_l2cap_security_changed+0x2c>
   2200e:	3b08      	subs	r3, #8
{
   22010:	4620      	mov	r0, r4
   22012:	461c      	mov	r4, r3
   22014:	e7f0      	b.n	21ff8 <bt_l2cap_security_changed+0x14>
}
   22016:	bd38      	pop	{r3, r4, r5, pc}

00022018 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   22018:	3104      	adds	r1, #4
   2201a:	f7e9 b965 	b.w	b2e8 <bt_conn_create_pdu_timeout>

0002201e <bt_l2cap_send_cb>:
{
   2201e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22022:	4614      	mov	r4, r2
   22024:	4605      	mov	r5, r0
   22026:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   22028:	f102 0008 	add.w	r0, r2, #8
   2202c:	2104      	movs	r1, #4
{
   2202e:	461e      	mov	r6, r3
   22030:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   22034:	f001 fc2b 	bl	2388e <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   22038:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   2203a:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2203c:	3a04      	subs	r2, #4
   2203e:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   22040:	4643      	mov	r3, r8
   22042:	4632      	mov	r2, r6
   22044:	4621      	mov	r1, r4
   22046:	4628      	mov	r0, r5
}
   22048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2204c:	f7e8 be5a 	b.w	ad04 <bt_conn_send_cb>

00022050 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22050:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   22052:	b160      	cbz	r0, 2206e <bt_l2cap_le_lookup_tx_cid+0x1e>
   22054:	3808      	subs	r0, #8
   22056:	b900      	cbnz	r0, 2205a <bt_l2cap_le_lookup_tx_cid+0xa>
   22058:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2205a:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   2205e:	428b      	cmp	r3, r1
   22060:	d005      	beq.n	2206e <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22062:	f110 0308 	adds.w	r3, r0, #8
   22066:	d001      	beq.n	2206c <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22068:	6880      	ldr	r0, [r0, #8]
   2206a:	e7f2      	b.n	22052 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   2206c:	4618      	mov	r0, r3
}
   2206e:	4770      	bx	lr

00022070 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22070:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   22072:	b160      	cbz	r0, 2208e <bt_l2cap_le_lookup_rx_cid+0x1e>
   22074:	3808      	subs	r0, #8
   22076:	b900      	cbnz	r0, 2207a <bt_l2cap_le_lookup_rx_cid+0xa>
   22078:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2207a:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   2207e:	428b      	cmp	r3, r1
   22080:	d005      	beq.n	2208e <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22082:	f110 0308 	adds.w	r3, r0, #8
   22086:	d001      	beq.n	2208c <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22088:	6880      	ldr	r0, [r0, #8]
   2208a:	e7f2      	b.n	22072 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   2208c:	4618      	mov	r0, r3
}
   2208e:	4770      	bx	lr

00022090 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   22090:	4770      	bx	lr

00022092 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   22092:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   22094:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   22096:	b128      	cbz	r0, 220a4 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22098:	6859      	ldr	r1, [r3, #4]
   2209a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2209c:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2209e:	4288      	cmp	r0, r1
	list->tail = node;
   220a0:	bf08      	it	eq
   220a2:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   220a4:	4770      	bx	lr

000220a6 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   220a6:	4603      	mov	r3, r0
   220a8:	6800      	ldr	r0, [r0, #0]
   220aa:	2200      	movs	r2, #0
   220ac:	b900      	cbnz	r0, 220b0 <sys_slist_find_and_remove+0xa>
   220ae:	4770      	bx	lr
   220b0:	4288      	cmp	r0, r1
   220b2:	d110      	bne.n	220d6 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   220b4:	6808      	ldr	r0, [r1, #0]
   220b6:	b942      	cbnz	r2, 220ca <sys_slist_find_and_remove+0x24>
   220b8:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   220ba:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   220bc:	4291      	cmp	r1, r2
   220be:	d100      	bne.n	220c2 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   220c0:	6058      	str	r0, [r3, #4]
	parent->next = child;
   220c2:	2300      	movs	r3, #0
   220c4:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   220c6:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   220c8:	4770      	bx	lr
	parent->next = child;
   220ca:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   220cc:	6858      	ldr	r0, [r3, #4]
   220ce:	4281      	cmp	r1, r0
	list->tail = node;
   220d0:	bf08      	it	eq
   220d2:	605a      	streq	r2, [r3, #4]
}
   220d4:	e7f5      	b.n	220c2 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   220d6:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   220d8:	6800      	ldr	r0, [r0, #0]
   220da:	e7e7      	b.n	220ac <sys_slist_find_and_remove+0x6>

000220dc <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   220dc:	4603      	mov	r3, r0
	size_t bytes = 0;
   220de:	2000      	movs	r0, #0

	while (buf) {
   220e0:	b903      	cbnz	r3, 220e4 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   220e2:	4770      	bx	lr
		bytes += buf->len;
   220e4:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   220e6:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   220e8:	4410      	add	r0, r2
		buf = buf->frags;
   220ea:	e7f9      	b.n	220e0 <net_buf_frags_len+0x4>

000220ec <att_sent>:
	if (chan->ops->sent) {
   220ec:	684b      	ldr	r3, [r1, #4]
   220ee:	695b      	ldr	r3, [r3, #20]
{
   220f0:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   220f2:	b103      	cbz	r3, 220f6 <att_sent+0xa>
		chan->ops->sent(chan);
   220f4:	4718      	bx	r3
}
   220f6:	4770      	bx	lr

000220f8 <attr_read_type_cb>:
{
   220f8:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   220fa:	68d4      	ldr	r4, [r2, #12]
   220fc:	7823      	ldrb	r3, [r4, #0]
   220fe:	3102      	adds	r1, #2
   22100:	b913      	cbnz	r3, 22108 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   22102:	7021      	strb	r1, [r4, #0]
	return true;
   22104:	2001      	movs	r0, #1
   22106:	e006      	b.n	22116 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   22108:	428b      	cmp	r3, r1
   2210a:	d0fb      	beq.n	22104 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2210c:	8983      	ldrh	r3, [r0, #12]
   2210e:	3b02      	subs	r3, #2
   22110:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   22112:	2000      	movs	r0, #0
   22114:	6110      	str	r0, [r2, #16]
}
   22116:	bd10      	pop	{r4, pc}

00022118 <att_prepare_write_req>:
}
   22118:	2006      	movs	r0, #6
   2211a:	4770      	bx	lr

0002211c <att_op_get_type>:
	switch (op) {
   2211c:	281e      	cmp	r0, #30
   2211e:	d816      	bhi.n	2214e <att_op_get_type+0x32>
   22120:	b308      	cbz	r0, 22166 <att_op_get_type+0x4a>
   22122:	1e43      	subs	r3, r0, #1
   22124:	2b1d      	cmp	r3, #29
   22126:	d81e      	bhi.n	22166 <att_op_get_type+0x4a>
   22128:	e8df f003 	tbb	[pc, r3]
   2212c:	23172317 	.word	0x23172317
   22130:	23172317 	.word	0x23172317
   22134:	23172317 	.word	0x23172317
   22138:	23172317 	.word	0x23172317
   2213c:	1d172317 	.word	0x1d172317
   22140:	2317231d 	.word	0x2317231d
   22144:	1d191d17 	.word	0x1d191d17
   22148:	0f1b      	.short	0x0f1b
   2214a:	2004      	movs	r0, #4
   2214c:	4770      	bx	lr
   2214e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   22152:	2b52      	cmp	r3, #82	; 0x52
   22154:	d107      	bne.n	22166 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   22156:	2000      	movs	r0, #0
}
   22158:	4770      	bx	lr
		return ATT_RESPONSE;
   2215a:	2002      	movs	r0, #2
   2215c:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2215e:	2003      	movs	r0, #3
   22160:	4770      	bx	lr
		return ATT_INDICATION;
   22162:	2005      	movs	r0, #5
   22164:	4770      	bx	lr
		return ATT_COMMAND;
   22166:	f010 0f40 	tst.w	r0, #64	; 0x40
   2216a:	bf0c      	ite	eq
   2216c:	2006      	moveq	r0, #6
   2216e:	2000      	movne	r0, #0
   22170:	4770      	bx	lr
		return ATT_REQUEST;
   22172:	2001      	movs	r0, #1
   22174:	4770      	bx	lr

00022176 <att_notify_mult>:
{
   22176:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   22178:	6803      	ldr	r3, [r0, #0]
   2217a:	898a      	ldrh	r2, [r1, #12]
   2217c:	6818      	ldr	r0, [r3, #0]
   2217e:	6889      	ldr	r1, [r1, #8]
   22180:	f7eb fe50 	bl	de24 <bt_gatt_mult_notification>
}
   22184:	2000      	movs	r0, #0
   22186:	bd08      	pop	{r3, pc}

00022188 <att_notify>:
{
   22188:	b538      	push	{r3, r4, r5, lr}
   2218a:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   2218c:	f101 0008 	add.w	r0, r1, #8
{
   22190:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
   22192:	f001 fb94 	bl	238be <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   22196:	682d      	ldr	r5, [r5, #0]
   22198:	89a3      	ldrh	r3, [r4, #12]
   2219a:	68a2      	ldr	r2, [r4, #8]
	handle = net_buf_pull_le16(buf);
   2219c:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2219e:	6828      	ldr	r0, [r5, #0]
   221a0:	f000 ff1a 	bl	22fd8 <bt_gatt_notification>
}
   221a4:	2000      	movs	r0, #0
   221a6:	bd38      	pop	{r3, r4, r5, pc}

000221a8 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   221a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   221aa:	e9cd 2301 	strd	r2, r3, [sp, #4]
   221ae:	2300      	movs	r3, #0
   221b0:	9300      	str	r3, [sp, #0]
   221b2:	461a      	mov	r2, r3
   221b4:	f7eb f812 	bl	d1dc <bt_gatt_foreach_attr_type>
				  user_data);
}
   221b8:	b005      	add	sp, #20
   221ba:	f85d fb04 	ldr.w	pc, [sp], #4

000221be <att_chan_read>:
{
   221be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221c2:	4680      	mov	r8, r0
   221c4:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   221c6:	4610      	mov	r0, r2
{
   221c8:	4699      	mov	r9, r3
   221ca:	468b      	mov	fp, r1
   221cc:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   221ce:	f7ff ff85 	bl	220dc <net_buf_frags_len>
   221d2:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   221d6:	4283      	cmp	r3, r0
   221d8:	d97a      	bls.n	222d0 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   221da:	f8d8 3008 	ldr.w	r3, [r8, #8]
   221de:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   221e0:	4630      	mov	r0, r6
   221e2:	f001 fb11 	bl	23808 <net_buf_frag_last>
	size_t len, total = 0;
   221e6:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   221ea:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   221ec:	4630      	mov	r0, r6
   221ee:	f7ff ff75 	bl	220dc <net_buf_frags_len>
   221f2:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   221f6:	f105 0708 	add.w	r7, r5, #8
   221fa:	1a24      	subs	r4, r4, r0
   221fc:	4638      	mov	r0, r7
   221fe:	f001 fb6a 	bl	238d6 <net_buf_simple_tailroom>
   22202:	4284      	cmp	r4, r0
   22204:	d211      	bcs.n	2222a <att_chan_read+0x6c>
   22206:	4630      	mov	r0, r6
   22208:	f7ff ff68 	bl	220dc <net_buf_frags_len>
   2220c:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   22210:	1a24      	subs	r4, r4, r0
		if (!len) {
   22212:	bb34      	cbnz	r4, 22262 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   22214:	79b0      	ldrb	r0, [r6, #6]
   22216:	f7f9 f8e1 	bl	1b3dc <net_buf_pool_get>
   2221a:	2200      	movs	r2, #0
   2221c:	2300      	movs	r3, #0
   2221e:	f001 fab9 	bl	23794 <net_buf_alloc_fixed>
			if (!frag) {
   22222:	4605      	mov	r5, r0
   22224:	b930      	cbnz	r0, 22234 <att_chan_read+0x76>
	return total;
   22226:	4657      	mov	r7, sl
   22228:	e02c      	b.n	22284 <att_chan_read+0xc6>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2222a:	4638      	mov	r0, r7
   2222c:	f001 fb53 	bl	238d6 <net_buf_simple_tailroom>
   22230:	4604      	mov	r4, r0
   22232:	e7ee      	b.n	22212 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   22234:	4601      	mov	r1, r0
   22236:	4630      	mov	r0, r6
   22238:	f001 faf7 	bl	2382a <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2223c:	4630      	mov	r0, r6
   2223e:	f7ff ff4d 	bl	220dc <net_buf_frags_len>
   22242:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   22246:	f105 0708 	add.w	r7, r5, #8
   2224a:	1a24      	subs	r4, r4, r0
   2224c:	4638      	mov	r0, r7
   2224e:	f001 fb42 	bl	238d6 <net_buf_simple_tailroom>
   22252:	4284      	cmp	r4, r0
   22254:	d21a      	bcs.n	2228c <att_chan_read+0xce>
   22256:	4630      	mov	r0, r6
   22258:	f7ff ff40 	bl	220dc <net_buf_frags_len>
   2225c:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   22260:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   22262:	68a9      	ldr	r1, [r5, #8]
   22264:	89aa      	ldrh	r2, [r5, #12]
   22266:	f8db 7004 	ldr.w	r7, [fp, #4]
   2226a:	9803      	ldr	r0, [sp, #12]
   2226c:	f8cd 9000 	str.w	r9, [sp]
   22270:	440a      	add	r2, r1
   22272:	b2a3      	uxth	r3, r4
   22274:	4659      	mov	r1, fp
   22276:	47b8      	blx	r7
		if (read < 0) {
   22278:	1e07      	subs	r7, r0, #0
   2227a:	da0c      	bge.n	22296 <att_chan_read+0xd8>
				return total;
   2227c:	f1ba 0f00 	cmp.w	sl, #0
   22280:	bf18      	it	ne
   22282:	4657      	movne	r7, sl
}
   22284:	4638      	mov	r0, r7
   22286:	b005      	add	sp, #20
   22288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2228c:	4638      	mov	r0, r7
   2228e:	f001 fb22 	bl	238d6 <net_buf_simple_tailroom>
   22292:	4604      	mov	r4, r0
   22294:	e7e5      	b.n	22262 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   22296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22298:	b993      	cbnz	r3, 222c0 <att_chan_read+0x102>
		net_buf_add(frag, read);
   2229a:	4639      	mov	r1, r7
   2229c:	f105 0008 	add.w	r0, r5, #8
   222a0:	f001 fad4 	bl	2384c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   222a4:	4630      	mov	r0, r6
   222a6:	f7ff ff19 	bl	220dc <net_buf_frags_len>
   222aa:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   222ae:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   222b0:	4283      	cmp	r3, r0
		total += read;
   222b2:	44ba      	add	sl, r7
		offset += read;
   222b4:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   222b8:	d9b5      	bls.n	22226 <att_chan_read+0x68>
   222ba:	42a7      	cmp	r7, r4
   222bc:	d096      	beq.n	221ec <att_chan_read+0x2e>
   222be:	e7b2      	b.n	22226 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   222c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   222c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   222c4:	4639      	mov	r1, r7
   222c6:	4628      	mov	r0, r5
   222c8:	4798      	blx	r3
   222ca:	2800      	cmp	r0, #0
   222cc:	d1e5      	bne.n	2229a <att_chan_read+0xdc>
   222ce:	e7aa      	b.n	22226 <att_chan_read+0x68>
		return 0;
   222d0:	2700      	movs	r7, #0
   222d2:	e7d7      	b.n	22284 <att_chan_read+0xc6>

000222d4 <find_info_cb>:
{
   222d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   222d6:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   222d8:	6817      	ldr	r7, [r2, #0]
{
   222da:	4605      	mov	r5, r0
   222dc:	460e      	mov	r6, r1
   222de:	4614      	mov	r4, r2
	if (!data->rsp) {
   222e0:	b963      	cbnz	r3, 222fc <find_info_cb+0x28>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   222e2:	6850      	ldr	r0, [r2, #4]
   222e4:	2101      	movs	r1, #1
   222e6:	3008      	adds	r0, #8
   222e8:	f001 fab0 	bl	2384c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   222ec:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   222ee:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   222f0:	781b      	ldrb	r3, [r3, #0]
   222f2:	2b00      	cmp	r3, #0
   222f4:	bf0c      	ite	eq
   222f6:	2301      	moveq	r3, #1
   222f8:	2302      	movne	r3, #2
   222fa:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   222fc:	68a3      	ldr	r3, [r4, #8]
   222fe:	781b      	ldrb	r3, [r3, #0]
   22300:	2b01      	cmp	r3, #1
   22302:	d003      	beq.n	2230c <find_info_cb+0x38>
   22304:	2b02      	cmp	r3, #2
   22306:	d019      	beq.n	2233c <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   22308:	2000      	movs	r0, #0
   2230a:	e016      	b.n	2233a <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2230c:	682b      	ldr	r3, [r5, #0]
   2230e:	781b      	ldrb	r3, [r3, #0]
   22310:	2b00      	cmp	r3, #0
   22312:	d1f9      	bne.n	22308 <find_info_cb+0x34>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   22314:	6860      	ldr	r0, [r4, #4]
   22316:	2104      	movs	r1, #4
   22318:	3008      	adds	r0, #8
   2231a:	f001 fa97 	bl	2384c <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2231e:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   22320:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   22322:	885b      	ldrh	r3, [r3, #2]
   22324:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   22326:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   22328:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2232a:	899b      	ldrh	r3, [r3, #12]
   2232c:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   22330:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   22332:	2804      	cmp	r0, #4
   22334:	bf94      	ite	ls
   22336:	2000      	movls	r0, #0
   22338:	2001      	movhi	r0, #1
}
   2233a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2233c:	682b      	ldr	r3, [r5, #0]
   2233e:	781b      	ldrb	r3, [r3, #0]
   22340:	2b02      	cmp	r3, #2
   22342:	d1e1      	bne.n	22308 <find_info_cb+0x34>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   22344:	6860      	ldr	r0, [r4, #4]
   22346:	2112      	movs	r1, #18
   22348:	3008      	adds	r0, #8
   2234a:	f001 fa7f 	bl	2384c <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2234e:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   22350:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   22352:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   22354:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   22358:	3101      	adds	r1, #1
   2235a:	f7ff f9a4 	bl	216a6 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2235e:	6863      	ldr	r3, [r4, #4]
   22360:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   22364:	899b      	ldrh	r3, [r3, #12]
   22366:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   22368:	2812      	cmp	r0, #18
   2236a:	e7e3      	b.n	22334 <find_info_cb+0x60>

0002236c <attr_read_group_cb>:
	if (!data->rsp->len) {
   2236c:	68d0      	ldr	r0, [r2, #12]
   2236e:	7803      	ldrb	r3, [r0, #0]
   22370:	3104      	adds	r1, #4
   22372:	b913      	cbnz	r3, 2237a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   22374:	7001      	strb	r1, [r0, #0]
	return true;
   22376:	2001      	movs	r0, #1
}
   22378:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2237a:	428b      	cmp	r3, r1
   2237c:	d0fb      	beq.n	22376 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2237e:	6891      	ldr	r1, [r2, #8]
   22380:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   22382:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   22384:	3b04      	subs	r3, #4
   22386:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   22388:	6110      	str	r0, [r2, #16]
		return false;
   2238a:	4770      	bx	lr

0002238c <att_exec_write_req>:
   2238c:	2006      	movs	r0, #6
   2238e:	4770      	bx	lr

00022390 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22390:	30c0      	adds	r0, #192	; 0xc0
   22392:	f3bf 8f5b 	dmb	ish
   22396:	e850 3f00 	ldrex	r3, [r0]
   2239a:	f023 0301 	bic.w	r3, r3, #1
   2239e:	e840 3200 	strex	r2, r3, [r0]
   223a2:	2a00      	cmp	r2, #0
   223a4:	d1f7      	bne.n	22396 <chan_rsp_sent+0x6>
   223a6:	f3bf 8f5b 	dmb	ish
}
   223aa:	4770      	bx	lr

000223ac <chan_cfm_sent>:
   223ac:	30c0      	adds	r0, #192	; 0xc0
   223ae:	f3bf 8f5b 	dmb	ish
   223b2:	e850 3f00 	ldrex	r3, [r0]
   223b6:	f023 0302 	bic.w	r3, r3, #2
   223ba:	e840 3200 	strex	r2, r3, [r0]
   223be:	2a00      	cmp	r2, #0
   223c0:	d1f7      	bne.n	223b2 <chan_cfm_sent+0x6>
   223c2:	f3bf 8f5b 	dmb	ish
}
   223c6:	4770      	bx	lr

000223c8 <write_cb>:
{
   223c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   223ca:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   223cc:	4601      	mov	r1, r0
{
   223ce:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   223d0:	222a      	movs	r2, #42	; 0x2a
   223d2:	6820      	ldr	r0, [r4, #0]
   223d4:	f000 fcf4 	bl	22dc0 <bt_gatt_check_perm>
   223d8:	4605      	mov	r5, r0
   223da:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   223dc:	bb00      	cbnz	r0, 22420 <write_cb+0x58>
	if (!data->req) {
   223de:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   223e0:	68b7      	ldr	r7, [r6, #8]
   223e2:	68e2      	ldr	r2, [r4, #12]
   223e4:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   223e6:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   223e8:	bf14      	ite	ne
   223ea:	2300      	movne	r3, #0
   223ec:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   223ee:	9301      	str	r3, [sp, #4]
   223f0:	8a63      	ldrh	r3, [r4, #18]
   223f2:	9300      	str	r3, [sp, #0]
   223f4:	4631      	mov	r1, r6
   223f6:	8a23      	ldrh	r3, [r4, #16]
   223f8:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   223fa:	1e03      	subs	r3, r0, #0
   223fc:	db05      	blt.n	2240a <write_cb+0x42>
   223fe:	8a22      	ldrh	r2, [r4, #16]
   22400:	4293      	cmp	r3, r2
   22402:	d10b      	bne.n	2241c <write_cb+0x54>
	data->err = 0U;
   22404:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   22406:	2501      	movs	r5, #1
   22408:	e005      	b.n	22416 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   2240a:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2240e:	d305      	bcc.n	2241c <write_cb+0x54>
		return -err;
   22410:	425b      	negs	r3, r3
   22412:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   22414:	7523      	strb	r3, [r4, #20]
}
   22416:	4628      	mov	r0, r5
   22418:	b003      	add	sp, #12
   2241a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2241c:	230e      	movs	r3, #14
   2241e:	e7f9      	b.n	22414 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   22420:	2500      	movs	r5, #0
   22422:	e7f8      	b.n	22416 <write_cb+0x4e>

00022424 <read_cb>:
{
   22424:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   22428:	f8d2 8000 	ldr.w	r8, [r2]
{
   2242c:	4606      	mov	r6, r0
	data->err = 0x00;
   2242e:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   22430:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   22434:	7317      	strb	r7, [r2, #12]
{
   22436:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   22438:	4631      	mov	r1, r6
   2243a:	2215      	movs	r2, #21
   2243c:	f000 fcc0 	bl	22dc0 <bt_gatt_check_perm>
   22440:	4604      	mov	r4, r0
   22442:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   22444:	b9a0      	cbnz	r0, 22470 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   22446:	e9cd 0000 	strd	r0, r0, [sp]
   2244a:	88ab      	ldrh	r3, [r5, #4]
   2244c:	68aa      	ldr	r2, [r5, #8]
   2244e:	4631      	mov	r1, r6
   22450:	4640      	mov	r0, r8
   22452:	f7ff feb4 	bl	221be <att_chan_read>
	if (ret < 0) {
   22456:	1e03      	subs	r3, r0, #0
   22458:	da0c      	bge.n	22474 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   2245a:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2245e:	bf26      	itte	cs
   22460:	425b      	negcs	r3, r3
   22462:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   22464:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   22466:	732b      	strb	r3, [r5, #12]
}
   22468:	4620      	mov	r0, r4
   2246a:	b002      	add	sp, #8
   2246c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   22470:	463c      	mov	r4, r7
   22472:	e7f9      	b.n	22468 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   22474:	2401      	movs	r4, #1
   22476:	e7f7      	b.n	22468 <read_cb+0x44>

00022478 <chan_req_send>:
{
   22478:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2247a:	690e      	ldr	r6, [r1, #16]
{
   2247c:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2247e:	4630      	mov	r0, r6
{
   22480:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   22482:	f7ff fe2b 	bl	220dc <net_buf_frags_len>
   22486:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   2248a:	4283      	cmp	r3, r0
   2248c:	d317      	bcc.n	224be <chan_req_send+0x46>
	chan->req = req;
   2248e:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	state->offset = net_buf_simple_headroom(buf);
   22492:	f106 0008 	add.w	r0, r6, #8
   22496:	f001 fa1a 	bl	238ce <net_buf_simple_headroom>
	state->len = buf->len;
   2249a:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   2249c:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   2249e:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   224a0:	6920      	ldr	r0, [r4, #16]
   224a2:	f001 f9ad 	bl	23800 <net_buf_ref>
   224a6:	2200      	movs	r2, #0
   224a8:	4601      	mov	r1, r0
   224aa:	4628      	mov	r0, r5
   224ac:	f7e9 fc18 	bl	bce0 <chan_send>
	if (err) {
   224b0:	4605      	mov	r5, r0
   224b2:	b110      	cbz	r0, 224ba <chan_req_send+0x42>
		net_buf_unref(req->buf);
   224b4:	6920      	ldr	r0, [r4, #16]
   224b6:	f7f9 f84d 	bl	1b554 <net_buf_unref>
}
   224ba:	4628      	mov	r0, r5
   224bc:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   224be:	f06f 0523 	mvn.w	r5, #35	; 0x23
   224c2:	e7fa      	b.n	224ba <chan_req_send+0x42>

000224c4 <bt_att_chan_req_send>:
{
   224c4:	b570      	push	{r4, r5, r6, lr}
   224c6:	4604      	mov	r4, r0
   224c8:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   224ca:	f500 7688 	add.w	r6, r0, #272	; 0x110
	return z_impl_k_sem_take(sem, timeout);
   224ce:	2200      	movs	r2, #0
   224d0:	2300      	movs	r3, #0
   224d2:	4630      	mov	r0, r6
   224d4:	f7fc f8fe 	bl	1e6d4 <z_impl_k_sem_take>
   224d8:	2800      	cmp	r0, #0
   224da:	db0a      	blt.n	224f2 <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   224dc:	4620      	mov	r0, r4
   224de:	4629      	mov	r1, r5
   224e0:	f7ff ffca 	bl	22478 <chan_req_send>
	if (err < 0) {
   224e4:	1e04      	subs	r4, r0, #0
   224e6:	da02      	bge.n	224ee <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   224e8:	4630      	mov	r0, r6
   224ea:	f7fc f8cd 	bl	1e688 <z_impl_k_sem_give>
}
   224ee:	4620      	mov	r0, r4
   224f0:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   224f2:	f06f 040a 	mvn.w	r4, #10
   224f6:	e7fa      	b.n	224ee <bt_att_chan_req_send+0x2a>

000224f8 <bt_att_status>:
{
   224f8:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   224fa:	f3bf 8f5b 	dmb	ish
   224fe:	680b      	ldr	r3, [r1, #0]
   22500:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   22504:	07db      	lsls	r3, r3, #31
{
   22506:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   22508:	d518      	bpl.n	2253c <bt_att_status+0x44>
	if (chan->req) {
   2250a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2250e:	b9ab      	cbnz	r3, 2253c <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   22510:	f850 0c08 	ldr.w	r0, [r0, #-8]
   22514:	3004      	adds	r0, #4
   22516:	f7ff fdbc 	bl	22092 <sys_slist_get>
	if (!node) {
   2251a:	4604      	mov	r4, r0
   2251c:	b170      	cbz	r0, 2253c <bt_att_status+0x44>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2251e:	4601      	mov	r1, r0
   22520:	f1a5 0008 	sub.w	r0, r5, #8
   22524:	f7ff ffce 	bl	224c4 <bt_att_chan_req_send>
   22528:	2800      	cmp	r0, #0
   2252a:	da07      	bge.n	2253c <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   2252c:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   22530:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   22532:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   22534:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   22536:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   22538:	b902      	cbnz	r2, 2253c <bt_att_status+0x44>
	list->tail = node;
   2253a:	609c      	str	r4, [r3, #8]
}
   2253c:	bd38      	pop	{r3, r4, r5, pc}

0002253e <bt_att_chan_send>:
{
   2253e:	b570      	push	{r4, r5, r6, lr}
   22540:	4604      	mov	r4, r0
   22542:	460e      	mov	r6, r1
	if (!cb) {
   22544:	4615      	mov	r5, r2
   22546:	b132      	cbz	r2, 22556 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   22548:	462a      	mov	r2, r5
   2254a:	4631      	mov	r1, r6
   2254c:	4620      	mov	r0, r4
}
   2254e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   22552:	f7e9 bbc5 	b.w	bce0 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   22556:	2200      	movs	r2, #0
   22558:	2300      	movs	r3, #0
   2255a:	f500 7088 	add.w	r0, r0, #272	; 0x110
   2255e:	f7fc f8b9 	bl	1e6d4 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   22562:	2800      	cmp	r0, #0
   22564:	daf0      	bge.n	22548 <bt_att_chan_send+0xa>
}
   22566:	f06f 000a 	mvn.w	r0, #10
   2256a:	bd70      	pop	{r4, r5, r6, pc}

0002256c <bt_att_chan_send_rsp>:
{
   2256c:	b538      	push	{r3, r4, r5, lr}
   2256e:	4604      	mov	r4, r0
   22570:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   22572:	f7ff ffe4 	bl	2253e <bt_att_chan_send>
	if (err) {
   22576:	b130      	cbz	r0, 22586 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   22578:	4629      	mov	r1, r5
   2257a:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
   2257e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   22582:	f001 b930 	b.w	237e6 <net_buf_put>
}
   22586:	bd38      	pop	{r3, r4, r5, pc}

00022588 <process_queue>:
{
   22588:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   2258a:	2200      	movs	r2, #0
{
   2258c:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   2258e:	2300      	movs	r3, #0
   22590:	4608      	mov	r0, r1
{
   22592:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   22594:	f001 f903 	bl	2379e <net_buf_get>
	if (buf) {
   22598:	4605      	mov	r5, r0
   2259a:	b160      	cbz	r0, 225b6 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   2259c:	4601      	mov	r1, r0
   2259e:	2200      	movs	r2, #0
   225a0:	4620      	mov	r0, r4
   225a2:	f7e9 fb9d 	bl	bce0 <chan_send>
		if (err) {
   225a6:	4604      	mov	r4, r0
   225a8:	b118      	cbz	r0, 225b2 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   225aa:	4629      	mov	r1, r5
   225ac:	4630      	mov	r0, r6
   225ae:	f001 fe12 	bl	241d6 <k_queue_prepend>
}
   225b2:	4620      	mov	r0, r4
   225b4:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   225b6:	f06f 0401 	mvn.w	r4, #1
   225ba:	e7fa      	b.n	225b2 <process_queue+0x2a>

000225bc <bt_att_sent>:
{
   225bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   225be:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
	struct bt_att *att = chan->att;
   225c2:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   225c6:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   225c8:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   225cc:	b10b      	cbz	r3, 225d2 <bt_att_sent+0x16>
		chan->sent(chan);
   225ce:	4638      	mov	r0, r7
   225d0:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   225d2:	f3bf 8f5b 	dmb	ish
   225d6:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   225da:	e853 2f00 	ldrex	r2, [r3]
   225de:	f022 0210 	bic.w	r2, r2, #16
   225e2:	e843 2100 	strex	r1, r2, [r3]
   225e6:	2900      	cmp	r1, #0
   225e8:	d1f7      	bne.n	225da <bt_att_sent+0x1e>
   225ea:	f3bf 8f5b 	dmb	ish
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   225ee:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   225f2:	b98b      	cbnz	r3, 22618 <bt_att_sent+0x5c>
   225f4:	686b      	ldr	r3, [r5, #4]
   225f6:	b17b      	cbz	r3, 22618 <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   225f8:	1d28      	adds	r0, r5, #4
   225fa:	f7ff fd4a 	bl	22092 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   225fe:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   22600:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   22602:	4638      	mov	r0, r7
   22604:	f7ff ff38 	bl	22478 <chan_req_send>
   22608:	2800      	cmp	r0, #0
   2260a:	da17      	bge.n	2263c <bt_att_sent+0x80>
Z_GENLIST_PREPEND(slist, snode)
   2260c:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2260e:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   22610:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   22612:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   22614:	b903      	cbnz	r3, 22618 <bt_att_sent+0x5c>
	list->tail = node;
   22616:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   22618:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   2261c:	4638      	mov	r0, r7
   2261e:	f7ff ffb3 	bl	22588 <process_queue>
	if (!err) {
   22622:	b158      	cbz	r0, 2263c <bt_att_sent+0x80>
	err = process_queue(chan, &att->tx_queue);
   22624:	f105 010c 	add.w	r1, r5, #12
   22628:	4638      	mov	r0, r7
   2262a:	f7ff ffad 	bl	22588 <process_queue>
	if (!err) {
   2262e:	b128      	cbz	r0, 2263c <bt_att_sent+0x80>
	z_impl_k_sem_give(sem);
   22630:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   22634:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22638:	f7fc b826 	b.w	1e688 <z_impl_k_sem_give>
   2263c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002263e <att_read_blob_req>:
{
   2263e:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   22640:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   22642:	8813      	ldrh	r3, [r2, #0]
   22644:	8852      	ldrh	r2, [r2, #2]
   22646:	9200      	str	r2, [sp, #0]
   22648:	210c      	movs	r1, #12
   2264a:	220d      	movs	r2, #13
   2264c:	f7e9 fe8c 	bl	c368 <att_read_rsp>
}
   22650:	b003      	add	sp, #12
   22652:	f85d fb04 	ldr.w	pc, [sp], #4

00022656 <att_read_req>:
{
   22656:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   22658:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2265a:	2200      	movs	r2, #0
   2265c:	881b      	ldrh	r3, [r3, #0]
   2265e:	9200      	str	r2, [sp, #0]
   22660:	210a      	movs	r1, #10
   22662:	220b      	movs	r2, #11
   22664:	f7e9 fe80 	bl	c368 <att_read_rsp>
}
   22668:	b003      	add	sp, #12
   2266a:	f85d fb04 	ldr.w	pc, [sp], #4

0002266e <bt_att_init>:
	bt_gatt_init();
   2266e:	f7ea bd2b 	b.w	d0c8 <bt_gatt_init>

00022672 <bt_att_get_mtu>:
{
   22672:	b508      	push	{r3, lr}
	att = att_get(conn);
   22674:	f7e9 fa4a 	bl	bb0c <att_get>
	if (!att) {
   22678:	b1d8      	cbz	r0, 226b2 <bt_att_get_mtu+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2267a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   2267c:	b1c8      	cbz	r0, 226b2 <bt_att_get_mtu+0x40>
   2267e:	f5b0 7196 	subs.w	r1, r0, #300	; 0x12c
   22682:	d015      	beq.n	226b0 <bt_att_get_mtu+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22684:	6803      	ldr	r3, [r0, #0]
   22686:	b10b      	cbz	r3, 2268c <bt_att_get_mtu+0x1a>
   22688:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   2268c:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   2268e:	f8b1 205e 	ldrh.w	r2, [r1, #94]	; 0x5e
   22692:	4290      	cmp	r0, r2
   22694:	bf38      	it	cc
   22696:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22698:	b15b      	cbz	r3, 226b2 <bt_att_get_mtu+0x40>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2269a:	f513 7296 	adds.w	r2, r3, #300	; 0x12c
   2269e:	d004      	beq.n	226aa <bt_att_get_mtu+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   226a0:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
   226a4:	b10a      	cbz	r2, 226aa <bt_att_get_mtu+0x38>
   226a6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
{
   226aa:	4619      	mov	r1, r3
   226ac:	4613      	mov	r3, r2
   226ae:	e7ee      	b.n	2268e <bt_att_get_mtu+0x1c>
		return 0;
   226b0:	4608      	mov	r0, r1
}
   226b2:	bd08      	pop	{r3, pc}

000226b4 <att_req_destroy>:
{
   226b4:	b510      	push	{r4, lr}
   226b6:	4604      	mov	r4, r0
	if (req->buf) {
   226b8:	6900      	ldr	r0, [r0, #16]
   226ba:	b108      	cbz	r0, 226c0 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   226bc:	f7f8 ff4a 	bl	1b554 <net_buf_unref>
	if (req->destroy) {
   226c0:	68a3      	ldr	r3, [r4, #8]
   226c2:	b10b      	cbz	r3, 226c8 <att_req_destroy+0x14>
		req->destroy(req);
   226c4:	4620      	mov	r0, r4
   226c6:	4798      	blx	r3
	bt_att_req_free(req);
   226c8:	4620      	mov	r0, r4
}
   226ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   226ce:	f7e9 bfef 	b.w	c6b0 <bt_att_req_free>

000226d2 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   226d2:	898a      	ldrh	r2, [r1, #12]
   226d4:	6889      	ldr	r1, [r1, #8]
   226d6:	2300      	movs	r3, #0
   226d8:	f7e9 bff6 	b.w	c6c8 <att_handle_rsp>

000226dc <att_handle_find_type_rsp>:
   226dc:	f7ff bff9 	b.w	226d2 <att_handle_find_info_rsp>

000226e0 <att_handle_read_type_rsp>:
   226e0:	f7ff bff7 	b.w	226d2 <att_handle_find_info_rsp>

000226e4 <att_handle_read_rsp>:
   226e4:	f7ff bff5 	b.w	226d2 <att_handle_find_info_rsp>

000226e8 <att_handle_read_blob_rsp>:
   226e8:	f7ff bff3 	b.w	226d2 <att_handle_find_info_rsp>

000226ec <att_handle_read_mult_rsp>:
   226ec:	f7ff bff1 	b.w	226d2 <att_handle_find_info_rsp>

000226f0 <att_handle_read_group_rsp>:
   226f0:	f7ff bfef 	b.w	226d2 <att_handle_find_info_rsp>

000226f4 <att_handle_write_rsp>:
   226f4:	f7ff bfed 	b.w	226d2 <att_handle_find_info_rsp>

000226f8 <att_handle_prepare_write_rsp>:
   226f8:	f7ff bfeb 	b.w	226d2 <att_handle_find_info_rsp>

000226fc <att_handle_exec_write_rsp>:
   226fc:	f7ff bfe9 	b.w	226d2 <att_handle_find_info_rsp>

00022700 <att_confirm>:
   22700:	f7ff bfe7 	b.w	226d2 <att_handle_find_info_rsp>

00022704 <att_mtu_rsp>:
{
   22704:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   22706:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   22708:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2270a:	2b16      	cmp	r3, #22
{
   2270c:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2270e:	d805      	bhi.n	2271c <att_mtu_rsp+0x18>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   22710:	2200      	movs	r2, #0
   22712:	2304      	movs	r3, #4
   22714:	4611      	mov	r1, r2
}
   22716:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   22718:	f7e9 bfd6 	b.w	c6c8 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   2271c:	2b41      	cmp	r3, #65	; 0x41
   2271e:	bf28      	it	cs
   22720:	2341      	movcs	r3, #65	; 0x41
   22722:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   22726:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2272a:	8992      	ldrh	r2, [r2, #12]
   2272c:	2300      	movs	r3, #0
   2272e:	e7f2      	b.n	22716 <att_mtu_rsp+0x12>

00022730 <att_chan_detach>:
{
   22730:	b538      	push	{r3, r4, r5, lr}
   22732:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   22734:	6800      	ldr	r0, [r0, #0]
   22736:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   2273a:	3024      	adds	r0, #36	; 0x24
   2273c:	f7ff fcb3 	bl	220a6 <sys_slist_find_and_remove>
		k_sem_give(&chan->tx_sem);
   22740:	f504 7588 	add.w	r5, r4, #272	; 0x110
   22744:	4628      	mov	r0, r5
   22746:	f7fb ff9f 	bl	1e688 <z_impl_k_sem_give>
   2274a:	4628      	mov	r0, r5
   2274c:	f7fb ff9c 	bl	1e688 <z_impl_k_sem_give>
   22750:	4628      	mov	r0, r5
   22752:	f7fb ff99 	bl	1e688 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   22756:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   2275a:	2200      	movs	r2, #0
   2275c:	2300      	movs	r3, #0
   2275e:	4628      	mov	r0, r5
   22760:	f001 f81d 	bl	2379e <net_buf_get>
   22764:	4602      	mov	r2, r0
   22766:	b950      	cbnz	r0, 2277e <att_chan_detach+0x4e>
	if (chan->req) {
   22768:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   2276c:	b123      	cbz	r3, 22778 <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2276e:	4601      	mov	r1, r0
   22770:	230e      	movs	r3, #14
   22772:	4620      	mov	r0, r4
   22774:	f7e9 ffa8 	bl	c6c8 <att_handle_rsp>
	chan->att = NULL;
   22778:	2300      	movs	r3, #0
   2277a:	6023      	str	r3, [r4, #0]
}
   2277c:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   2277e:	f7f8 fee9 	bl	1b554 <net_buf_unref>
   22782:	e7ea      	b.n	2275a <att_chan_detach+0x2a>

00022784 <bt_att_disconnected>:
{
   22784:	b538      	push	{r3, r4, r5, lr}
   22786:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   22788:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   2278c:	f7ff ffd0 	bl	22730 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   22790:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   22792:	b93b      	cbnz	r3, 227a4 <bt_att_disconnected+0x20>
	att_reset(att);
   22794:	4628      	mov	r0, r5
   22796:	f7ea f885 	bl	c8a4 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   2279a:	6820      	ldr	r0, [r4, #0]
}
   2279c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   227a0:	f7eb bc12 	b.w	dfc8 <bt_gatt_disconnected>
}
   227a4:	bd38      	pop	{r3, r4, r5, pc}

000227a6 <bt_att_send>:
{
   227a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   227aa:	4605      	mov	r5, r0
   227ac:	460e      	mov	r6, r1
   227ae:	4614      	mov	r4, r2
   227b0:	4698      	mov	r8, r3
	att = att_get(conn);
   227b2:	f7e9 f9ab 	bl	bb0c <att_get>
	if (!att) {
   227b6:	4607      	mov	r7, r0
   227b8:	b938      	cbnz	r0, 227ca <bt_att_send+0x24>
		net_buf_unref(buf);
   227ba:	4630      	mov	r0, r6
   227bc:	f7f8 feca 	bl	1b554 <net_buf_unref>
		return -ENOTCONN;
   227c0:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   227c4:	b002      	add	sp, #8
   227c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   227ca:	b144      	cbz	r4, 227de <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   227cc:	f8cd 8000 	str.w	r8, [sp]
   227d0:	4623      	mov	r3, r4
   227d2:	4632      	mov	r2, r6
   227d4:	2104      	movs	r1, #4
   227d6:	4628      	mov	r0, r5
   227d8:	f7ff fc21 	bl	2201e <bt_l2cap_send_cb>
   227dc:	e7f2      	b.n	227c4 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   227de:	6a44      	ldr	r4, [r0, #36]	; 0x24
   227e0:	b184      	cbz	r4, 22804 <bt_att_send+0x5e>
   227e2:	f5b4 7596 	subs.w	r5, r4, #300	; 0x12c
   227e6:	d00f      	beq.n	22808 <bt_att_send+0x62>
   227e8:	6824      	ldr	r4, [r4, #0]
   227ea:	b10c      	cbz	r4, 227f0 <bt_att_send+0x4a>
   227ec:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   227f0:	2000      	movs	r0, #0
   227f2:	b95d      	cbnz	r5, 2280c <bt_att_send+0x66>
	if (ret < 0) {
   227f4:	b188      	cbz	r0, 2281a <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   227f6:	f107 000c 	add.w	r0, r7, #12
   227fa:	4631      	mov	r1, r6
   227fc:	f000 fff3 	bl	237e6 <net_buf_put>
	return 0;
   22800:	4628      	mov	r0, r5
   22802:	e7df      	b.n	227c4 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22804:	4625      	mov	r5, r4
   22806:	e7f3      	b.n	227f0 <bt_att_send+0x4a>
   22808:	462c      	mov	r4, r5
   2280a:	e7f1      	b.n	227f0 <bt_att_send+0x4a>
		ret = bt_att_chan_send(chan, buf, NULL);
   2280c:	2200      	movs	r2, #0
   2280e:	4631      	mov	r1, r6
   22810:	4628      	mov	r0, r5
   22812:	f7ff fe94 	bl	2253e <bt_att_chan_send>
		if (ret >= 0) {
   22816:	2800      	cmp	r0, #0
   22818:	db01      	blt.n	2281e <bt_att_send+0x78>
	return 0;
   2281a:	2000      	movs	r0, #0
   2281c:	e7d2      	b.n	227c4 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2281e:	b154      	cbz	r4, 22836 <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22820:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
   22824:	d004      	beq.n	22830 <bt_att_send+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22826:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   2282a:	b10b      	cbz	r3, 22830 <bt_att_send+0x8a>
   2282c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   22830:	4625      	mov	r5, r4
   22832:	461c      	mov	r4, r3
   22834:	e7dd      	b.n	227f2 <bt_att_send+0x4c>
   22836:	4623      	mov	r3, r4
   22838:	e7fa      	b.n	22830 <bt_att_send+0x8a>

0002283a <bt_att_req_send>:
{
   2283a:	b570      	push	{r4, r5, r6, lr}
   2283c:	460c      	mov	r4, r1
	att = att_get(conn);
   2283e:	f7e9 f965 	bl	bb0c <att_get>
	if (!att) {
   22842:	4605      	mov	r5, r0
   22844:	b930      	cbnz	r0, 22854 <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   22846:	6920      	ldr	r0, [r4, #16]
   22848:	f7f8 fe84 	bl	1b554 <net_buf_unref>
		req->buf = NULL;
   2284c:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   2284e:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   22852:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22854:	6a43      	ldr	r3, [r0, #36]	; 0x24
   22856:	b153      	cbz	r3, 2286e <bt_att_req_send+0x34>
   22858:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   2285c:	d007      	beq.n	2286e <bt_att_req_send+0x34>
   2285e:	681e      	ldr	r6, [r3, #0]
   22860:	b10e      	cbz	r6, 22866 <bt_att_req_send+0x2c>
   22862:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   22866:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   2286a:	b143      	cbz	r3, 2287e <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2286c:	b96e      	cbnz	r6, 2288a <bt_att_req_send+0x50>
	parent->next = child;
   2286e:	2000      	movs	r0, #0
   22870:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   22872:	68ab      	ldr	r3, [r5, #8]
   22874:	b9a3      	cbnz	r3, 228a0 <bt_att_req_send+0x66>
	list->head = node;
   22876:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
   2287a:	4618      	mov	r0, r3
}
   2287c:	e7e9      	b.n	22852 <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   2287e:	4621      	mov	r1, r4
   22880:	f7ff fe20 	bl	224c4 <bt_att_chan_req_send>
			if (ret >= 0) {
   22884:	2800      	cmp	r0, #0
   22886:	dbf1      	blt.n	2286c <bt_att_req_send+0x32>
   22888:	e7e3      	b.n	22852 <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2288a:	f516 7396 	adds.w	r3, r6, #300	; 0x12c
   2288e:	d004      	beq.n	2289a <bt_att_req_send+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22890:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22894:	b10b      	cbz	r3, 2289a <bt_att_req_send+0x60>
   22896:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   2289a:	4630      	mov	r0, r6
   2289c:	461e      	mov	r6, r3
   2289e:	e7e2      	b.n	22866 <bt_att_req_send+0x2c>
	parent->next = child;
   228a0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   228a2:	60ac      	str	r4, [r5, #8]
}
   228a4:	e7d5      	b.n	22852 <bt_att_req_send+0x18>

000228a6 <gatt_ccc_changed>:
{
   228a6:	460b      	mov	r3, r1
   228a8:	8909      	ldrh	r1, [r1, #8]
   228aa:	8a5a      	ldrh	r2, [r3, #18]
   228ac:	4291      	cmp	r1, r2
   228ae:	bf38      	it	cc
   228b0:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   228b2:	8a9a      	ldrh	r2, [r3, #20]
   228b4:	428a      	cmp	r2, r1
   228b6:	d003      	beq.n	228c0 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   228b8:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   228ba:	699b      	ldr	r3, [r3, #24]
   228bc:	b103      	cbz	r3, 228c0 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   228be:	4718      	bx	r3
}
   228c0:	4770      	bx	lr

000228c2 <gatt_indicate_rsp>:
{
   228c2:	b510      	push	{r4, lr}
   228c4:	9c02      	ldr	r4, [sp, #8]
	params->_ref--;
   228c6:	7da3      	ldrb	r3, [r4, #22]
   228c8:	3b01      	subs	r3, #1
{
   228ca:	460a      	mov	r2, r1
	params->_ref--;
   228cc:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   228ce:	4621      	mov	r1, r4
   228d0:	68a3      	ldr	r3, [r4, #8]
   228d2:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   228d4:	68e3      	ldr	r3, [r4, #12]
   228d6:	b12b      	cbz	r3, 228e4 <gatt_indicate_rsp+0x22>
   228d8:	7da2      	ldrb	r2, [r4, #22]
   228da:	b91a      	cbnz	r2, 228e4 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   228dc:	4620      	mov	r0, r4
}
   228de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   228e2:	4718      	bx	r3
}
   228e4:	bd10      	pop	{r4, pc}

000228e6 <match_uuid>:
	data->attr = attr;
   228e6:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   228e8:	8091      	strh	r1, [r2, #4]
}
   228ea:	2000      	movs	r0, #0
   228ec:	4770      	bx	lr

000228ee <gatt_write_rsp>:
{
   228ee:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   228f0:	6813      	ldr	r3, [r2, #0]
   228f2:	4718      	bx	r3

000228f4 <ccc_set_cb>:
}
   228f4:	2000      	movs	r0, #0
   228f6:	4770      	bx	lr

000228f8 <gen_hash_m>:
{
   228f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   228fa:	6807      	ldr	r7, [r0, #0]
   228fc:	783d      	ldrb	r5, [r7, #0]
{
   228fe:	b089      	sub	sp, #36	; 0x24
   22900:	4606      	mov	r6, r0
   22902:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   22904:	b10d      	cbz	r5, 2290a <gen_hash_m+0x12>
	switch (u16->val) {
   22906:	2501      	movs	r5, #1
   22908:	e014      	b.n	22934 <gen_hash_m+0x3c>
   2290a:	887b      	ldrh	r3, [r7, #2]
   2290c:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   22910:	d004      	beq.n	2291c <gen_hash_m+0x24>
   22912:	d812      	bhi.n	2293a <gen_hash_m+0x42>
   22914:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   22918:	2b03      	cmp	r3, #3
   2291a:	d8f4      	bhi.n	22906 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2291c:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22920:	2202      	movs	r2, #2
   22922:	f10d 010e 	add.w	r1, sp, #14
   22926:	4620      	mov	r0, r4
   22928:	f7fe fdcd 	bl	214c6 <tc_cmac_update>
   2292c:	b9e0      	cbnz	r0, 22968 <gen_hash_m+0x70>
			state->err = -EINVAL;
   2292e:	f06f 0315 	mvn.w	r3, #21
   22932:	65a3      	str	r3, [r4, #88]	; 0x58
}
   22934:	4628      	mov	r0, r5
   22936:	b009      	add	sp, #36	; 0x24
   22938:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2293a:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2293e:	33ff      	adds	r3, #255	; 0xff
   22940:	b29b      	uxth	r3, r3
   22942:	2b04      	cmp	r3, #4
   22944:	d8df      	bhi.n	22906 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   22946:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2294a:	2202      	movs	r2, #2
   2294c:	f10d 010e 	add.w	r1, sp, #14
   22950:	4620      	mov	r0, r4
   22952:	f7fe fdb8 	bl	214c6 <tc_cmac_update>
   22956:	2800      	cmp	r0, #0
   22958:	d0e9      	beq.n	2292e <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2295a:	887b      	ldrh	r3, [r7, #2]
   2295c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22960:	2202      	movs	r2, #2
   22962:	f10d 010e 	add.w	r1, sp, #14
   22966:	e017      	b.n	22998 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   22968:	887b      	ldrh	r3, [r7, #2]
   2296a:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2296e:	2202      	movs	r2, #2
   22970:	f10d 010e 	add.w	r1, sp, #14
   22974:	4620      	mov	r0, r4
   22976:	f7fe fda6 	bl	214c6 <tc_cmac_update>
   2297a:	2800      	cmp	r0, #0
   2297c:	d0d7      	beq.n	2292e <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2297e:	2000      	movs	r0, #0
   22980:	2310      	movs	r3, #16
   22982:	eb0d 0203 	add.w	r2, sp, r3
   22986:	6877      	ldr	r7, [r6, #4]
   22988:	9000      	str	r0, [sp, #0]
   2298a:	4631      	mov	r1, r6
   2298c:	47b8      	blx	r7
		if (len < 0) {
   2298e:	1e02      	subs	r2, r0, #0
   22990:	da01      	bge.n	22996 <gen_hash_m+0x9e>
			state->err = len;
   22992:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22994:	e7ce      	b.n	22934 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   22996:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22998:	4620      	mov	r0, r4
   2299a:	f7fe fd94 	bl	214c6 <tc_cmac_update>
   2299e:	2800      	cmp	r0, #0
   229a0:	d1b1      	bne.n	22906 <gen_hash_m+0xe>
   229a2:	e7c4      	b.n	2292e <gen_hash_m+0x36>

000229a4 <bt_addr_le_cmp>:
   229a4:	2207      	movs	r2, #7
   229a6:	f7fe be6e 	b.w	21686 <memcmp>

000229aa <find_ccc_cfg>:
{
   229aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   229ac:	1c4a      	adds	r2, r1, #1
   229ae:	460c      	mov	r4, r1
		if (conn) {
   229b0:	4605      	mov	r5, r0
   229b2:	b948      	cbnz	r0, 229c8 <find_ccc_cfg+0x1e>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   229b4:	9000      	str	r0, [sp, #0]
   229b6:	4669      	mov	r1, sp
   229b8:	f8cd 0003 	str.w	r0, [sp, #3]
   229bc:	4610      	mov	r0, r2
   229be:	f7ff fff1 	bl	229a4 <bt_addr_le_cmp>
   229c2:	b930      	cbnz	r0, 229d2 <find_ccc_cfg+0x28>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   229c4:	4626      	mov	r6, r4
   229c6:	e00e      	b.n	229e6 <find_ccc_cfg+0x3c>
   229c8:	7809      	ldrb	r1, [r1, #0]
   229ca:	f7ff fa1e 	bl	21e0a <bt_conn_is_peer_addr_le>
   229ce:	2800      	cmp	r0, #0
   229d0:	d1f8      	bne.n	229c4 <find_ccc_cfg+0x1a>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   229d2:	f104 060a 	add.w	r6, r4, #10
		if (conn) {
   229d6:	f104 020b 	add.w	r2, r4, #11
   229da:	b13d      	cbz	r5, 229ec <find_ccc_cfg+0x42>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   229dc:	7aa1      	ldrb	r1, [r4, #10]
   229de:	4628      	mov	r0, r5
   229e0:	f7ff fa13 	bl	21e0a <bt_conn_is_peer_addr_le>
   229e4:	b158      	cbz	r0, 229fe <find_ccc_cfg+0x54>
}
   229e6:	4630      	mov	r0, r6
   229e8:	b002      	add	sp, #8
   229ea:	bd70      	pop	{r4, r5, r6, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   229ec:	4669      	mov	r1, sp
   229ee:	4610      	mov	r0, r2
   229f0:	9500      	str	r5, [sp, #0]
   229f2:	f8cd 5003 	str.w	r5, [sp, #3]
   229f6:	f7ff ffd5 	bl	229a4 <bt_addr_le_cmp>
   229fa:	2800      	cmp	r0, #0
   229fc:	d0f3      	beq.n	229e6 <find_ccc_cfg+0x3c>
	return NULL;
   229fe:	2600      	movs	r6, #0
   22a00:	e7f1      	b.n	229e6 <find_ccc_cfg+0x3c>

00022a02 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   22a02:	2207      	movs	r2, #7
   22a04:	f7fe be4f 	b.w	216a6 <memcpy>

00022a08 <gatt_sub_remove.part.0>:
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   22a08:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   22a0a:	2300      	movs	r3, #0
   22a0c:	4669      	mov	r1, sp
   22a0e:	3001      	adds	r0, #1
   22a10:	9300      	str	r3, [sp, #0]
   22a12:	f8cd 3003 	str.w	r3, [sp, #3]
   22a16:	f7ff fff4 	bl	22a02 <bt_addr_le_copy>
}
   22a1a:	b003      	add	sp, #12
   22a1c:	f85d fb04 	ldr.w	pc, [sp], #4

00022a20 <clear_cf_cfg>:
{
   22a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22a22:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   22a24:	2500      	movs	r5, #0
   22a26:	4669      	mov	r1, sp
   22a28:	3001      	adds	r0, #1
   22a2a:	9500      	str	r5, [sp, #0]
   22a2c:	f8cd 5003 	str.w	r5, [sp, #3]
   22a30:	f7ff ffe7 	bl	22a02 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   22a34:	f104 0008 	add.w	r0, r4, #8
   22a38:	2201      	movs	r2, #1
   22a3a:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22a3c:	340c      	adds	r4, #12
   22a3e:	f7fe fe5d 	bl	216fc <memset>
   22a42:	f3bf 8f5b 	dmb	ish
   22a46:	e854 3f00 	ldrex	r3, [r4]
   22a4a:	e844 5200 	strex	r2, r5, [r4]
   22a4e:	2a00      	cmp	r2, #0
   22a50:	d1f9      	bne.n	22a46 <clear_cf_cfg+0x26>
   22a52:	f3bf 8f5b 	dmb	ish
}
   22a56:	b003      	add	sp, #12
   22a58:	bd30      	pop	{r4, r5, pc}

00022a5a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   22a5a:	2301      	movs	r3, #1
   22a5c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22a5e:	f3bf 8f5b 	dmb	ish
   22a62:	e850 2f00 	ldrex	r2, [r0]
   22a66:	431a      	orrs	r2, r3
   22a68:	e840 2100 	strex	r1, r2, [r0]
   22a6c:	2900      	cmp	r1, #0
   22a6e:	d1f8      	bne.n	22a62 <atomic_set_bit+0x8>
   22a70:	f3bf 8f5b 	dmb	ish
}
   22a74:	4770      	bx	lr

00022a76 <sc_restore_rsp>:
{
   22a76:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   22a78:	f7e9 ff9a 	bl	c9b0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   22a7c:	b140      	cbz	r0, 22a90 <sc_restore_rsp+0x1a>
   22a7e:	7a03      	ldrb	r3, [r0, #8]
   22a80:	07db      	lsls	r3, r3, #31
   22a82:	d505      	bpl.n	22a90 <sc_restore_rsp+0x1a>
}
   22a84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   22a88:	2100      	movs	r1, #0
   22a8a:	300c      	adds	r0, #12
   22a8c:	f7ff bfe5 	b.w	22a5a <atomic_set_bit>
}
   22a90:	bd08      	pop	{r3, pc}

00022a92 <read_appearance>:
{
   22a92:	b513      	push	{r0, r1, r4, lr}
   22a94:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   22a98:	4610      	mov	r0, r2
	if (offset > value_len) {
   22a9a:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   22a9c:	f240 3241 	movw	r2, #833	; 0x341
   22aa0:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   22aa4:	d80d      	bhi.n	22ac2 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   22aa6:	f1c1 0402 	rsb	r4, r1, #2
   22aaa:	429c      	cmp	r4, r3
   22aac:	bfa8      	it	ge
   22aae:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   22ab0:	f10d 0306 	add.w	r3, sp, #6
   22ab4:	4622      	mov	r2, r4
   22ab6:	4419      	add	r1, r3
   22ab8:	f7fe fdf5 	bl	216a6 <memcpy>
}
   22abc:	4620      	mov	r0, r4
   22abe:	b002      	add	sp, #8
   22ac0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22ac2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   22ac6:	e7f9      	b.n	22abc <read_appearance+0x2a>

00022ac8 <read_name>:
{
   22ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22acc:	4698      	mov	r8, r3
   22ace:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   22ad2:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   22ad4:	f7e7 fa40 	bl	9f58 <bt_get_name>
   22ad8:	4607      	mov	r7, r0
				 strlen(name));
   22ada:	f7fe fdc1 	bl	21660 <strlen>
	if (offset > value_len) {
   22ade:	b283      	uxth	r3, r0
   22ae0:	42b3      	cmp	r3, r6
   22ae2:	d30c      	bcc.n	22afe <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   22ae4:	1b9c      	subs	r4, r3, r6
   22ae6:	4544      	cmp	r4, r8
   22ae8:	bfa8      	it	ge
   22aea:	4644      	movge	r4, r8
   22aec:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   22aee:	4622      	mov	r2, r4
   22af0:	19b9      	adds	r1, r7, r6
   22af2:	4628      	mov	r0, r5
   22af4:	f7fe fdd7 	bl	216a6 <memcpy>
}
   22af8:	4620      	mov	r0, r4
   22afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22afe:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   22b02:	e7f9      	b.n	22af8 <read_name+0x30>

00022b04 <cf_read>:
{
   22b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22b06:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   22b08:	2300      	movs	r3, #0
{
   22b0a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   22b0e:	f88d 3004 	strb.w	r3, [sp, #4]
{
   22b12:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   22b14:	f7e9 ff4c 	bl	c9b0 <find_cf_cfg>
	if (cfg) {
   22b18:	b128      	cbz	r0, 22b26 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   22b1a:	f100 0108 	add.w	r1, r0, #8
   22b1e:	2201      	movs	r2, #1
   22b20:	a801      	add	r0, sp, #4
   22b22:	f7fe fdc0 	bl	216a6 <memcpy>
	if (offset > value_len) {
   22b26:	2e01      	cmp	r6, #1
   22b28:	d80d      	bhi.n	22b46 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   22b2a:	f1c6 0401 	rsb	r4, r6, #1
   22b2e:	42bc      	cmp	r4, r7
   22b30:	bfa8      	it	ge
   22b32:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   22b34:	ab01      	add	r3, sp, #4
   22b36:	4622      	mov	r2, r4
   22b38:	1999      	adds	r1, r3, r6
   22b3a:	4628      	mov	r0, r5
   22b3c:	f7fe fdb3 	bl	216a6 <memcpy>
}
   22b40:	4620      	mov	r0, r4
   22b42:	b003      	add	sp, #12
   22b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22b46:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   22b4a:	e7f9      	b.n	22b40 <cf_read+0x3c>

00022b4c <bt_gatt_attr_read_ccc>:
{
   22b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   22b4e:	68c9      	ldr	r1, [r1, #12]
{
   22b50:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   22b54:	4615      	mov	r5, r2
   22b56:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   22b58:	f7ff ff27 	bl	229aa <find_ccc_cfg>
	if (cfg) {
   22b5c:	b100      	cbz	r0, 22b60 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   22b5e:	8900      	ldrh	r0, [r0, #8]
   22b60:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   22b64:	2e02      	cmp	r6, #2
   22b66:	d80e      	bhi.n	22b86 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   22b68:	f1c6 0402 	rsb	r4, r6, #2
   22b6c:	42bc      	cmp	r4, r7
   22b6e:	bfa8      	it	ge
   22b70:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   22b72:	f10d 0306 	add.w	r3, sp, #6
   22b76:	4622      	mov	r2, r4
   22b78:	1999      	adds	r1, r3, r6
   22b7a:	4628      	mov	r0, r5
   22b7c:	f7fe fd93 	bl	216a6 <memcpy>
}
   22b80:	4620      	mov	r0, r4
   22b82:	b003      	add	sp, #12
   22b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22b86:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   22b8a:	e7f9      	b.n	22b80 <bt_gatt_attr_read_ccc+0x34>

00022b8c <bt_gatt_attr_read_service>:
{
   22b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   22b8e:	68c9      	ldr	r1, [r1, #12]
{
   22b90:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   22b94:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   22b96:	780b      	ldrb	r3, [r1, #0]
{
   22b98:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   22b9a:	b993      	cbnz	r3, 22bc2 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   22b9c:	884b      	ldrh	r3, [r1, #2]
   22b9e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   22ba2:	2d02      	cmp	r5, #2
   22ba4:	d819      	bhi.n	22bda <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   22ba6:	f1c5 0202 	rsb	r2, r5, #2
   22baa:	4294      	cmp	r4, r2
   22bac:	bfa8      	it	ge
   22bae:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   22bb0:	f10d 0306 	add.w	r3, sp, #6
   22bb4:	4622      	mov	r2, r4
   22bb6:	1959      	adds	r1, r3, r5
   22bb8:	f7fe fd75 	bl	216a6 <memcpy>
}
   22bbc:	4620      	mov	r0, r4
   22bbe:	b003      	add	sp, #12
   22bc0:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   22bc2:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   22bc4:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   22bc8:	d807      	bhi.n	22bda <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   22bca:	f1c5 0210 	rsb	r2, r5, #16
   22bce:	4294      	cmp	r4, r2
   22bd0:	bfa8      	it	ge
   22bd2:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   22bd4:	4622      	mov	r2, r4
   22bd6:	4429      	add	r1, r5
   22bd8:	e7ee      	b.n	22bb8 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22bda:	f06f 0406 	mvn.w	r4, #6
   22bde:	e7ed      	b.n	22bbc <bt_gatt_attr_read_service+0x30>

00022be0 <gatt_sub_remove>:
{
   22be0:	b538      	push	{r3, r4, r5, lr}
   22be2:	460c      	mov	r4, r1
	if (params) {
   22be4:	4619      	mov	r1, r3
   22be6:	b16b      	cbz	r3, 22c04 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   22be8:	f103 0514 	add.w	r5, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   22bec:	695b      	ldr	r3, [r3, #20]
   22bee:	b982      	cbnz	r2, 22c12 <gatt_sub_remove+0x32>
   22bf0:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   22bf2:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   22bf4:	4295      	cmp	r5, r2
   22bf6:	d100      	bne.n	22bfa <gatt_sub_remove+0x1a>
	list->tail = node;
   22bf8:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   22bfa:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   22bfc:	680d      	ldr	r5, [r1, #0]
   22bfe:	614b      	str	r3, [r1, #20]
   22c00:	461a      	mov	r2, r3
   22c02:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   22c04:	68a3      	ldr	r3, [r4, #8]
   22c06:	b953      	cbnz	r3, 22c1e <gatt_sub_remove+0x3e>
   22c08:	4620      	mov	r0, r4
}
   22c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22c0e:	f7ff befb 	b.w	22a08 <gatt_sub_remove.part.0>
   22c12:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   22c14:	68e3      	ldr	r3, [r4, #12]
   22c16:	429d      	cmp	r5, r3
	list->tail = node;
   22c18:	bf08      	it	eq
   22c1a:	60e2      	streq	r2, [r4, #12]
}
   22c1c:	e7ed      	b.n	22bfa <gatt_sub_remove+0x1a>
   22c1e:	bd38      	pop	{r3, r4, r5, pc}

00022c20 <gatt_write_ccc_rsp>:
{
   22c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22c24:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22c26:	f3bf 8f5b 	dmb	ish
   22c2a:	4606      	mov	r6, r0
   22c2c:	460d      	mov	r5, r1
   22c2e:	f104 0310 	add.w	r3, r4, #16
   22c32:	e853 2f00 	ldrex	r2, [r3]
   22c36:	f022 0204 	bic.w	r2, r2, #4
   22c3a:	e843 2100 	strex	r1, r2, [r3]
   22c3e:	2900      	cmp	r1, #0
   22c40:	d1f7      	bne.n	22c32 <gatt_write_ccc_rsp+0x12>
   22c42:	f3bf 8f5b 	dmb	ish
	if (err) {
   22c46:	b1dd      	cbz	r5, 22c80 <gatt_write_ccc_rsp+0x60>
		sub = gatt_sub_find(conn);
   22c48:	f7e9 ff00 	bl	ca4c <gatt_sub_find>
		if (!sub) {
   22c4c:	4601      	mov	r1, r0
   22c4e:	b300      	cbz	r0, 22c92 <gatt_write_ccc_rsp+0x72>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   22c50:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   22c52:	b143      	cbz	r3, 22c66 <gatt_write_ccc_rsp+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22c54:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   22c56:	f104 0014 	add.w	r0, r4, #20
   22c5a:	4283      	cmp	r3, r0
   22c5c:	d10b      	bne.n	22c76 <gatt_write_ccc_rsp+0x56>
				gatt_sub_remove(conn, sub, tmp, params);
   22c5e:	4623      	mov	r3, r4
   22c60:	4630      	mov	r0, r6
   22c62:	f7ff ffbd 	bl	22be0 <gatt_sub_remove>
	if (params->write) {
   22c66:	6863      	ldr	r3, [r4, #4]
   22c68:	b19b      	cbz	r3, 22c92 <gatt_write_ccc_rsp+0x72>
		params->write(conn, err, NULL);
   22c6a:	4629      	mov	r1, r5
   22c6c:	4630      	mov	r0, r6
   22c6e:	2200      	movs	r2, #0
}
   22c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   22c74:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   22c76:	2a00      	cmp	r2, #0
   22c78:	d0f5      	beq.n	22c66 <gatt_write_ccc_rsp+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22c7a:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   22c7c:	6812      	ldr	r2, [r2, #0]
   22c7e:	e7ec      	b.n	22c5a <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   22c80:	89a3      	ldrh	r3, [r4, #12]
   22c82:	2b00      	cmp	r3, #0
   22c84:	d1ef      	bne.n	22c66 <gatt_write_ccc_rsp+0x46>
		params->notify(conn, params, NULL, 0);
   22c86:	6827      	ldr	r7, [r4, #0]
   22c88:	462b      	mov	r3, r5
   22c8a:	462a      	mov	r2, r5
   22c8c:	4621      	mov	r1, r4
   22c8e:	47b8      	blx	r7
   22c90:	e7e9      	b.n	22c66 <gatt_write_ccc_rsp+0x46>
}
   22c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022c96 <sc_clear>:
{
   22c96:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   22c98:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   22c9c:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   22c9e:	4631      	mov	r1, r6
   22ca0:	7a00      	ldrb	r0, [r0, #8]
   22ca2:	f7fe ffad 	bl	21c00 <bt_addr_le_is_bonded>
   22ca6:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   22ca8:	4631      	mov	r1, r6
   22caa:	f7e9 feaf 	bl	ca0c <find_sc_cfg>
	if (!cfg) {
   22cae:	b128      	cbz	r0, 22cbc <sc_clear+0x26>
}
   22cb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   22cb4:	220c      	movs	r2, #12
   22cb6:	2100      	movs	r1, #0
   22cb8:	f7fe bd20 	b.w	216fc <memset>
}
   22cbc:	bd70      	pop	{r4, r5, r6, pc}

00022cbe <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   22cbe:	2a02      	cmp	r2, #2
{
   22cc0:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   22cc2:	d108      	bne.n	22cd6 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   22cc4:	2300      	movs	r3, #0
   22cc6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   22cca:	461a      	mov	r2, r3
   22ccc:	7a00      	ldrb	r0, [r0, #8]
   22cce:	f7e9 ff55 	bl	cb7c <sc_save>
}
   22cd2:	2002      	movs	r0, #2
   22cd4:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   22cd6:	f7ff ffde 	bl	22c96 <sc_clear>
   22cda:	e7fa      	b.n	22cd2 <sc_ccc_cfg_write+0x14>

00022cdc <bt_gatt_attr_read>:
{
   22cdc:	b538      	push	{r3, r4, r5, lr}
   22cde:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   22ce2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   22ce6:	42a9      	cmp	r1, r5
{
   22ce8:	4610      	mov	r0, r2
	if (offset > value_len) {
   22cea:	d80b      	bhi.n	22d04 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   22cec:	1a6d      	subs	r5, r5, r1
   22cee:	429d      	cmp	r5, r3
   22cf0:	bfa8      	it	ge
   22cf2:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   22cf4:	9b05      	ldr	r3, [sp, #20]
   22cf6:	b2ad      	uxth	r5, r5
   22cf8:	462a      	mov	r2, r5
   22cfa:	4419      	add	r1, r3
   22cfc:	f7fe fcd3 	bl	216a6 <memcpy>
}
   22d00:	4628      	mov	r0, r5
   22d02:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22d04:	f06f 0506 	mvn.w	r5, #6
   22d08:	e7fa      	b.n	22d00 <bt_gatt_attr_read+0x24>

00022d0a <bt_gatt_attr_value_handle>:
{
   22d0a:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   22d0c:	4604      	mov	r4, r0
   22d0e:	b910      	cbnz	r0, 22d16 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   22d10:	2000      	movs	r0, #0
}
   22d12:	b002      	add	sp, #8
   22d14:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   22d16:	2300      	movs	r3, #0
   22d18:	f88d 3004 	strb.w	r3, [sp, #4]
   22d1c:	6800      	ldr	r0, [r0, #0]
   22d1e:	f642 0303 	movw	r3, #10243	; 0x2803
   22d22:	a901      	add	r1, sp, #4
   22d24:	f8ad 3006 	strh.w	r3, [sp, #6]
   22d28:	f7fe fd99 	bl	2185e <bt_uuid_cmp>
   22d2c:	2800      	cmp	r0, #0
   22d2e:	d1ef      	bne.n	22d10 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   22d30:	68e3      	ldr	r3, [r4, #12]
   22d32:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   22d34:	2800      	cmp	r0, #0
   22d36:	d1ec      	bne.n	22d12 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   22d38:	4620      	mov	r0, r4
   22d3a:	f7ea fa1f 	bl	d17c <bt_gatt_attr_get_handle>
   22d3e:	3001      	adds	r0, #1
   22d40:	b280      	uxth	r0, r0
	return handle;
   22d42:	e7e6      	b.n	22d12 <bt_gatt_attr_value_handle+0x8>

00022d44 <bt_gatt_attr_read_chrc>:
{
   22d44:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   22d46:	68cf      	ldr	r7, [r1, #12]
{
   22d48:	b087      	sub	sp, #28
   22d4a:	4608      	mov	r0, r1
   22d4c:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   22d4e:	79bb      	ldrb	r3, [r7, #6]
   22d50:	f88d 3004 	strb.w	r3, [sp, #4]
{
   22d54:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   22d58:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   22d5a:	f7ff ffd6 	bl	22d0a <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   22d5e:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   22d60:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   22d64:	780b      	ldrb	r3, [r1, #0]
   22d66:	b99b      	cbnz	r3, 22d90 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   22d68:	884b      	ldrh	r3, [r1, #2]
   22d6a:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   22d6e:	2105      	movs	r1, #5
	if (offset > value_len) {
   22d70:	42b1      	cmp	r1, r6
   22d72:	d315      	bcc.n	22da0 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   22d74:	1b89      	subs	r1, r1, r6
   22d76:	42a1      	cmp	r1, r4
   22d78:	bfa8      	it	ge
   22d7a:	4621      	movge	r1, r4
   22d7c:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   22d7e:	ab01      	add	r3, sp, #4
   22d80:	4622      	mov	r2, r4
   22d82:	1999      	adds	r1, r3, r6
   22d84:	4628      	mov	r0, r5
   22d86:	f7fe fc8e 	bl	216a6 <memcpy>
}
   22d8a:	4620      	mov	r0, r4
   22d8c:	b007      	add	sp, #28
   22d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   22d90:	3101      	adds	r1, #1
   22d92:	2210      	movs	r2, #16
   22d94:	f10d 0007 	add.w	r0, sp, #7
   22d98:	f7fe fc85 	bl	216a6 <memcpy>
		value_len += 16U;
   22d9c:	2113      	movs	r1, #19
   22d9e:	e7e7      	b.n	22d70 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22da0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   22da4:	e7f1      	b.n	22d8a <bt_gatt_attr_read_chrc+0x46>

00022da6 <bt_gatt_foreach_attr>:
{
   22da6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   22da8:	e9cd 2301 	strd	r2, r3, [sp, #4]
   22dac:	2300      	movs	r3, #0
   22dae:	9300      	str	r3, [sp, #0]
   22db0:	461a      	mov	r2, r3
   22db2:	f7ea fa13 	bl	d1dc <bt_gatt_foreach_attr_type>
}
   22db6:	b005      	add	sp, #20
   22db8:	f85d fb04 	ldr.w	pc, [sp], #4

00022dbc <db_hash_process>:
	db_hash_gen(true);
   22dbc:	f7ea ba68 	b.w	d290 <db_hash_gen.isra.0>

00022dc0 <bt_gatt_check_perm>:
{
   22dc0:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   22dc2:	07d4      	lsls	r4, r2, #31
{
   22dc4:	4605      	mov	r5, r0
   22dc6:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   22dc8:	d504      	bpl.n	22dd4 <bt_gatt_check_perm+0x14>
   22dca:	f010 0f15 	tst.w	r0, #21
   22dce:	d01e      	beq.n	22e0e <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   22dd0:	684b      	ldr	r3, [r1, #4]
   22dd2:	b1e3      	cbz	r3, 22e0e <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   22dd4:	0793      	lsls	r3, r2, #30
   22dd6:	d504      	bpl.n	22de2 <bt_gatt_check_perm+0x22>
   22dd8:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   22ddc:	d019      	beq.n	22e12 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   22dde:	688b      	ldr	r3, [r1, #8]
   22de0:	b1bb      	cbz	r3, 22e12 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   22de2:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   22de6:	f014 0f30 	tst.w	r4, #48	; 0x30
   22dea:	d103      	bne.n	22df4 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   22dec:	f014 000c 	ands.w	r0, r4, #12
   22df0:	d107      	bne.n	22e02 <bt_gatt_check_perm+0x42>
}
   22df2:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   22df4:	4628      	mov	r0, r5
   22df6:	f7fe fffd 	bl	21df4 <bt_conn_get_security>
   22dfa:	2802      	cmp	r0, #2
   22dfc:	d8f6      	bhi.n	22dec <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   22dfe:	2005      	movs	r0, #5
   22e00:	e7f7      	b.n	22df2 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   22e02:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   22e04:	2b00      	cmp	r3, #0
   22e06:	bf14      	ite	ne
   22e08:	2000      	movne	r0, #0
   22e0a:	200f      	moveq	r0, #15
   22e0c:	e7f1      	b.n	22df2 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   22e0e:	2002      	movs	r0, #2
   22e10:	e7ef      	b.n	22df2 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   22e12:	2003      	movs	r0, #3
   22e14:	e7ed      	b.n	22df2 <bt_gatt_check_perm+0x32>

00022e16 <gatt_discover_next>:
{
   22e16:	b570      	push	{r4, r5, r6, lr}
   22e18:	4605      	mov	r5, r0
   22e1a:	4614      	mov	r4, r2
	if (!last_handle)
   22e1c:	b929      	cbnz	r1, 22e2a <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   22e1e:	4621      	mov	r1, r4
   22e20:	4628      	mov	r0, r5
   22e22:	f7ea fbc3 	bl	d5ac <bt_gatt_discover>
   22e26:	b928      	cbnz	r0, 22e34 <gatt_discover_next+0x1e>
}
   22e28:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   22e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   22e2e:	4291      	cmp	r1, r2
   22e30:	d107      	bne.n	22e42 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   22e32:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   22e34:	6863      	ldr	r3, [r4, #4]
   22e36:	4622      	mov	r2, r4
   22e38:	4628      	mov	r0, r5
   22e3a:	2100      	movs	r1, #0
}
   22e3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   22e40:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   22e42:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   22e44:	1c4b      	adds	r3, r1, #1
   22e46:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   22e48:	429a      	cmp	r2, r3
		params->start_handle++;
   22e4a:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   22e4c:	d2e7      	bcs.n	22e1e <gatt_discover_next+0x8>
   22e4e:	e7f1      	b.n	22e34 <gatt_discover_next+0x1e>

00022e50 <gatt_find_type_rsp>:
{
   22e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22e54:	b088      	sub	sp, #32
   22e56:	4607      	mov	r7, r0
   22e58:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   22e5c:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   22e5e:	b911      	cbnz	r1, 22e66 <gatt_find_type_rsp+0x16>
   22e60:	f013 0803 	ands.w	r8, r3, #3
   22e64:	d008      	beq.n	22e78 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   22e66:	f8d9 3004 	ldr.w	r3, [r9, #4]
   22e6a:	464a      	mov	r2, r9
   22e6c:	2100      	movs	r1, #0
   22e6e:	4638      	mov	r0, r7
   22e70:	4798      	blx	r3
}
   22e72:	b008      	add	sp, #32
   22e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0U; i < count; i++) {
   22e78:	f3c3 0387 	ubfx	r3, r3, #2, #8
   22e7c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   22e80:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   22e82:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   22e86:	42ac      	cmp	r4, r5
   22e88:	d105      	bne.n	22e96 <gatt_find_type_rsp+0x46>
	gatt_discover_next(conn, end_handle, params);
   22e8a:	464a      	mov	r2, r9
   22e8c:	4641      	mov	r1, r8
   22e8e:	4638      	mov	r0, r7
   22e90:	f7ff ffc1 	bl	22e16 <gatt_discover_next>
	return;
   22e94:	e7ed      	b.n	22e72 <gatt_find_type_rsp+0x22>
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   22e96:	8863      	ldrh	r3, [r4, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   22e98:	f899 1010 	ldrb.w	r1, [r9, #16]
		value.end_handle = end_handle;
   22e9c:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   22ea0:	2900      	cmp	r1, #0
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   22ea2:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   22ea6:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   22eaa:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   22eac:	9301      	str	r3, [sp, #4]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   22eae:	bf0c      	ite	eq
   22eb0:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   22eb4:	4651      	movne	r1, sl
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   22eb6:	ab01      	add	r3, sp, #4
   22eb8:	f8ad 1002 	strh.w	r1, [sp, #2]
   22ebc:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   22ebe:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   22ec2:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   22ec6:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   22eca:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   22ece:	f8cd d00c 	str.w	sp, [sp, #12]
   22ed2:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   22ed6:	464a      	mov	r2, r9
   22ed8:	a903      	add	r1, sp, #12
   22eda:	4638      	mov	r0, r7
   22edc:	4798      	blx	r3
   22ede:	3404      	adds	r4, #4
   22ee0:	2800      	cmp	r0, #0
   22ee2:	d1d0      	bne.n	22e86 <gatt_find_type_rsp+0x36>
   22ee4:	e7c5      	b.n	22e72 <gatt_find_type_rsp+0x22>

00022ee6 <bt_gatt_unsubscribe>:
{
   22ee6:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   22eea:	7b43      	ldrb	r3, [r0, #13]
   22eec:	2b07      	cmp	r3, #7
{
   22eee:	4681      	mov	r9, r0
   22ef0:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
   22ef2:	d16e      	bne.n	22fd2 <bt_gatt_unsubscribe+0xec>
	sub = gatt_sub_find(conn);
   22ef4:	f7e9 fdaa 	bl	ca4c <gatt_sub_find>
	if (!sub) {
   22ef8:	4607      	mov	r7, r0
   22efa:	b920      	cbnz	r0, 22f06 <bt_gatt_unsubscribe+0x20>
		return -EINVAL;
   22efc:	f06f 0015 	mvn.w	r0, #21
}
   22f00:	b001      	add	sp, #4
   22f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   22f06:	6884      	ldr	r4, [r0, #8]
   22f08:	b1cc      	cbz	r4, 22f3e <bt_gatt_unsubscribe+0x58>
   22f0a:	f1b4 0514 	subs.w	r5, r4, #20
   22f0e:	d018      	beq.n	22f42 <bt_gatt_unsubscribe+0x5c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22f10:	6824      	ldr	r4, [r4, #0]
   22f12:	b104      	cbz	r4, 22f16 <bt_gatt_unsubscribe+0x30>
   22f14:	3c14      	subs	r4, #20
   22f16:	f04f 0800 	mov.w	r8, #0
   22f1a:	46c3      	mov	fp, r8
   22f1c:	46c2      	mov	sl, r8
	parent->next = child;
   22f1e:	4642      	mov	r2, r8
   22f20:	b98d      	cbnz	r5, 22f46 <bt_gatt_unsubscribe+0x60>
	if (!found) {
   22f22:	f1bb 0f00 	cmp.w	fp, #0
   22f26:	d0e9      	beq.n	22efc <bt_gatt_unsubscribe+0x16>
	if (has_subscription) {
   22f28:	f1ba 0f00 	cmp.w	sl, #0
   22f2c:	d046      	beq.n	22fbc <bt_gatt_unsubscribe+0xd6>
		params->notify(conn, params, NULL, 0);
   22f2e:	6834      	ldr	r4, [r6, #0]
   22f30:	462b      	mov	r3, r5
   22f32:	462a      	mov	r2, r5
   22f34:	4631      	mov	r1, r6
   22f36:	4648      	mov	r0, r9
   22f38:	47a0      	blx	r4
		return 0;
   22f3a:	4628      	mov	r0, r5
   22f3c:	e7e0      	b.n	22f00 <bt_gatt_unsubscribe+0x1a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   22f3e:	4625      	mov	r5, r4
   22f40:	e7e9      	b.n	22f16 <bt_gatt_unsubscribe+0x30>
   22f42:	462c      	mov	r4, r5
   22f44:	e7e7      	b.n	22f16 <bt_gatt_unsubscribe+0x30>
		if (params == tmp) {
   22f46:	42b5      	cmp	r5, r6
   22f48:	f105 0114 	add.w	r1, r5, #20
   22f4c:	d129      	bne.n	22fa2 <bt_gatt_unsubscribe+0xbc>
Z_GENLIST_REMOVE(slist, snode)
   22f4e:	6968      	ldr	r0, [r5, #20]
   22f50:	f1b8 0f00 	cmp.w	r8, #0
   22f54:	d11d      	bne.n	22f92 <bt_gatt_unsubscribe+0xac>
   22f56:	68fb      	ldr	r3, [r7, #12]
	list->head = node;
   22f58:	60b8      	str	r0, [r7, #8]
Z_GENLIST_REMOVE(slist, snode)
   22f5a:	4299      	cmp	r1, r3
   22f5c:	d100      	bne.n	22f60 <bt_gatt_unsubscribe+0x7a>
	list->tail = node;
   22f5e:	60f8      	str	r0, [r7, #12]
	parent->next = child;
   22f60:	616a      	str	r2, [r5, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22f62:	f3bf 8f5b 	dmb	ish
   22f66:	6933      	ldr	r3, [r6, #16]
   22f68:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   22f6c:	f3c3 0b80 	ubfx	fp, r3, #2, #1
			if (atomic_test_bit(params->flags,
   22f70:	075b      	lsls	r3, r3, #29
   22f72:	d51e      	bpl.n	22fb2 <bt_gatt_unsubscribe+0xcc>
	bt_att_req_cancel(conn, params);
   22f74:	4631      	mov	r1, r6
   22f76:	4648      	mov	r0, r9
   22f78:	f7e9 fcea 	bl	c950 <bt_att_req_cancel>
}
   22f7c:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   22f7e:	b1dc      	cbz	r4, 22fb8 <bt_gatt_unsubscribe+0xd2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22f80:	f114 0314 	adds.w	r3, r4, #20
   22f84:	d002      	beq.n	22f8c <bt_gatt_unsubscribe+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22f86:	6963      	ldr	r3, [r4, #20]
   22f88:	b103      	cbz	r3, 22f8c <bt_gatt_unsubscribe+0xa6>
   22f8a:	3b14      	subs	r3, #20
   22f8c:	4625      	mov	r5, r4
   22f8e:	461c      	mov	r4, r3
   22f90:	e7c6      	b.n	22f20 <bt_gatt_unsubscribe+0x3a>
	parent->next = child;
   22f92:	f8c8 0000 	str.w	r0, [r8]
Z_GENLIST_REMOVE(slist, snode)
   22f96:	68fb      	ldr	r3, [r7, #12]
   22f98:	4299      	cmp	r1, r3
	list->tail = node;
   22f9a:	bf08      	it	eq
   22f9c:	f8c7 800c 	streq.w	r8, [r7, #12]
}
   22fa0:	e7de      	b.n	22f60 <bt_gatt_unsubscribe+0x7a>
		if (tmp->value_handle == params->value_handle) {
   22fa2:	8928      	ldrh	r0, [r5, #8]
   22fa4:	8933      	ldrh	r3, [r6, #8]
   22fa6:	4688      	mov	r8, r1
   22fa8:	4298      	cmp	r0, r3
   22faa:	bf08      	it	eq
   22fac:	f04f 0a01 	moveq.w	sl, #1
   22fb0:	e7e5      	b.n	22f7e <bt_gatt_unsubscribe+0x98>
			found = true;
   22fb2:	f04f 0b01 	mov.w	fp, #1
   22fb6:	e7e2      	b.n	22f7e <bt_gatt_unsubscribe+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   22fb8:	4623      	mov	r3, r4
   22fba:	e7e7      	b.n	22f8c <bt_gatt_unsubscribe+0xa6>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   22fbc:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   22fbe:	f8a6 a00c 	strh.w	sl, [r6, #12]
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   22fc2:	4633      	mov	r3, r6
   22fc4:	4652      	mov	r2, sl
   22fc6:	4648      	mov	r0, r9
}
   22fc8:	b001      	add	sp, #4
   22fca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   22fce:	f7e9 bf3d 	b.w	ce4c <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   22fd2:	f06f 0038 	mvn.w	r0, #56	; 0x38
   22fd6:	e793      	b.n	22f00 <bt_gatt_unsubscribe+0x1a>

00022fd8 <bt_gatt_notification>:
{
   22fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22fdc:	4607      	mov	r7, r0
   22fde:	4688      	mov	r8, r1
   22fe0:	4691      	mov	r9, r2
   22fe2:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   22fe4:	f7e9 fd32 	bl	ca4c <gatt_sub_find>
	if (!sub) {
   22fe8:	b1f8      	cbz	r0, 2302a <bt_gatt_notification+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   22fea:	6883      	ldr	r3, [r0, #8]
   22fec:	b1eb      	cbz	r3, 2302a <bt_gatt_notification+0x52>
   22fee:	f1b3 0614 	subs.w	r6, r3, #20
   22ff2:	d01a      	beq.n	2302a <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22ff4:	681c      	ldr	r4, [r3, #0]
   22ff6:	b104      	cbz	r4, 22ffa <bt_gatt_notification+0x22>
   22ff8:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   22ffa:	8933      	ldrh	r3, [r6, #8]
   22ffc:	4543      	cmp	r3, r8
   22ffe:	d10a      	bne.n	23016 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   23000:	6835      	ldr	r5, [r6, #0]
   23002:	4653      	mov	r3, sl
   23004:	464a      	mov	r2, r9
   23006:	4631      	mov	r1, r6
   23008:	4638      	mov	r0, r7
   2300a:	47a8      	blx	r5
   2300c:	b918      	cbnz	r0, 23016 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   2300e:	4631      	mov	r1, r6
   23010:	4638      	mov	r0, r7
   23012:	f7ff ff68 	bl	22ee6 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   23016:	b144      	cbz	r4, 2302a <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23018:	f114 0514 	adds.w	r5, r4, #20
   2301c:	d002      	beq.n	23024 <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2301e:	6965      	ldr	r5, [r4, #20]
   23020:	b105      	cbz	r5, 23024 <bt_gatt_notification+0x4c>
   23022:	3d14      	subs	r5, #20
{
   23024:	4626      	mov	r6, r4
   23026:	462c      	mov	r4, r5
   23028:	e7e7      	b.n	22ffa <bt_gatt_notification+0x22>
}
   2302a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002302e <bt_gatt_change_aware>:
{
   2302e:	b510      	push	{r4, lr}
   23030:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   23032:	f7e9 fcbd 	bl	c9b0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   23036:	4603      	mov	r3, r0
   23038:	b910      	cbnz	r0, 23040 <bt_gatt_change_aware+0x12>
		return true;
   2303a:	2401      	movs	r4, #1
}
   2303c:	4620      	mov	r0, r4
   2303e:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   23040:	7a02      	ldrb	r2, [r0, #8]
   23042:	07d2      	lsls	r2, r2, #31
   23044:	d5f9      	bpl.n	2303a <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23046:	f3bf 8f5b 	dmb	ish
   2304a:	68d9      	ldr	r1, [r3, #12]
   2304c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   23050:	f011 0101 	ands.w	r1, r1, #1
   23054:	f100 000c 	add.w	r0, r0, #12
   23058:	d1ef      	bne.n	2303a <bt_gatt_change_aware+0xc>
	if (!req) {
   2305a:	2c00      	cmp	r4, #0
   2305c:	d0ee      	beq.n	2303c <bt_gatt_change_aware+0xe>
   2305e:	f3bf 8f5b 	dmb	ish
   23062:	68db      	ldr	r3, [r3, #12]
   23064:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   23068:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2306c:	079b      	lsls	r3, r3, #30
   2306e:	d50e      	bpl.n	2308e <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23070:	f3bf 8f5b 	dmb	ish
   23074:	e850 3f00 	ldrex	r3, [r0]
   23078:	f023 0302 	bic.w	r3, r3, #2
   2307c:	e840 3200 	strex	r2, r3, [r0]
   23080:	2a00      	cmp	r2, #0
   23082:	d1f7      	bne.n	23074 <bt_gatt_change_aware+0x46>
   23084:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   23088:	f7ff fce7 	bl	22a5a <atomic_set_bit>
	return false;
   2308c:	e7d6      	b.n	2303c <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2308e:	2101      	movs	r1, #1
   23090:	e7fa      	b.n	23088 <bt_gatt_change_aware+0x5a>

00023092 <sys_memcpy_swap>:
	psrc += length - 1;
   23092:	1e53      	subs	r3, r2, #1
   23094:	4419      	add	r1, r3
	for (; length > 0; length--) {
   23096:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   23098:	f811 3901 	ldrb.w	r3, [r1], #-1
   2309c:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   230a0:	4290      	cmp	r0, r2
   230a2:	d1f9      	bne.n	23098 <sys_memcpy_swap+0x6>
}
   230a4:	4770      	bx	lr

000230a6 <smp_pairing_rsp>:
}
   230a6:	2007      	movs	r0, #7
   230a8:	4770      	bx	lr

000230aa <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   230aa:	2301      	movs	r3, #1
   230ac:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   230ae:	f3bf 8f5b 	dmb	ish
   230b2:	e850 2f00 	ldrex	r2, [r0]
   230b6:	431a      	orrs	r2, r3
   230b8:	e840 2100 	strex	r1, r2, [r0]
   230bc:	2900      	cmp	r1, #0
   230be:	d1f8      	bne.n	230b2 <atomic_set_bit+0x8>
   230c0:	f3bf 8f5b 	dmb	ish
}
   230c4:	4770      	bx	lr

000230c6 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   230c6:	2301      	movs	r3, #1
   230c8:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   230ca:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   230cc:	f3bf 8f5b 	dmb	ish
   230d0:	e850 2f00 	ldrex	r2, [r0]
   230d4:	401a      	ands	r2, r3
   230d6:	e840 2100 	strex	r1, r2, [r0]
   230da:	2900      	cmp	r1, #0
   230dc:	d1f8      	bne.n	230d0 <atomic_clear_bit+0xa>
   230de:	f3bf 8f5b 	dmb	ish
}
   230e2:	4770      	bx	lr

000230e4 <bt_smp_aes_cmac>:
{
   230e4:	b570      	push	{r4, r5, r6, lr}
   230e6:	b0c2      	sub	sp, #264	; 0x108
   230e8:	460d      	mov	r5, r1
   230ea:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   230ec:	4601      	mov	r1, r0
   230ee:	aa16      	add	r2, sp, #88	; 0x58
   230f0:	4668      	mov	r0, sp
{
   230f2:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   230f4:	f7fe f9bc 	bl	21470 <tc_cmac_setup>
   230f8:	b150      	cbz	r0, 23110 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   230fa:	4632      	mov	r2, r6
   230fc:	4629      	mov	r1, r5
   230fe:	4668      	mov	r0, sp
   23100:	f7fe f9e1 	bl	214c6 <tc_cmac_update>
   23104:	b120      	cbz	r0, 23110 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   23106:	4669      	mov	r1, sp
   23108:	4620      	mov	r0, r4
   2310a:	f7fe fa48 	bl	2159e <tc_cmac_final>
   2310e:	b918      	cbnz	r0, 23118 <bt_smp_aes_cmac+0x34>
		return -EIO;
   23110:	f06f 0004 	mvn.w	r0, #4
}
   23114:	b042      	add	sp, #264	; 0x108
   23116:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   23118:	2000      	movs	r0, #0
   2311a:	e7fb      	b.n	23114 <bt_smp_aes_cmac+0x30>

0002311c <bt_smp_disconnected>:
{
   2311c:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   2311e:	6803      	ldr	r3, [r0, #0]
   23120:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
{
   23124:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   23126:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   2312a:	f001 fa17 	bl	2455c <k_delayed_work_cancel>
	if (keys) {
   2312e:	b13d      	cbz	r5, 23140 <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   23130:	89eb      	ldrh	r3, [r5, #14]
   23132:	b113      	cbz	r3, 2313a <bt_smp_disconnected+0x1e>
   23134:	7b6b      	ldrb	r3, [r5, #13]
   23136:	079b      	lsls	r3, r3, #30
   23138:	d502      	bpl.n	23140 <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   2313a:	4628      	mov	r0, r5
   2313c:	f000 fb1b 	bl	23776 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   23140:	4620      	mov	r0, r4
   23142:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
}
   23146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   2314a:	2100      	movs	r1, #0
   2314c:	f7fe bad6 	b.w	216fc <memset>

00023150 <smp_security_request>:
   23150:	2007      	movs	r0, #7
   23152:	4770      	bx	lr

00023154 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   23154:	b510      	push	{r4, lr}
   23156:	1e43      	subs	r3, r0, #1
   23158:	f100 0210 	add.w	r2, r0, #16
   2315c:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2315e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   23162:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   23166:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   23168:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2316a:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2316c:	d1f7      	bne.n	2315e <sys_mem_swap.constprop.0+0xa>
	}
}
   2316e:	bd10      	pop	{r4, pc}

00023170 <smp_f6>:
{
   23170:	b5f0      	push	{r4, r5, r6, r7, lr}
   23172:	b097      	sub	sp, #92	; 0x5c
   23174:	4605      	mov	r5, r0
   23176:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   23178:	a805      	add	r0, sp, #20
   2317a:	2210      	movs	r2, #16
{
   2317c:	461c      	mov	r4, r3
   2317e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   23180:	f7ff ff87 	bl	23092 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   23184:	2210      	movs	r2, #16
   23186:	4631      	mov	r1, r6
   23188:	a809      	add	r0, sp, #36	; 0x24
   2318a:	f7ff ff82 	bl	23092 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2318e:	4621      	mov	r1, r4
   23190:	2210      	movs	r2, #16
   23192:	a80d      	add	r0, sp, #52	; 0x34
   23194:	f7ff ff7d 	bl	23092 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   23198:	991c      	ldr	r1, [sp, #112]	; 0x70
   2319a:	2203      	movs	r2, #3
   2319c:	a811      	add	r0, sp, #68	; 0x44
   2319e:	f7ff ff78 	bl	23092 <sys_memcpy_swap>
	m[51] = a1->type;
   231a2:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   231a4:	f814 3b01 	ldrb.w	r3, [r4], #1
   231a8:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   231ac:	4621      	mov	r1, r4
   231ae:	2206      	movs	r2, #6
   231b0:	a812      	add	r0, sp, #72	; 0x48
   231b2:	f7fe fa78 	bl	216a6 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   231b6:	4621      	mov	r1, r4
   231b8:	2206      	movs	r2, #6
   231ba:	a812      	add	r0, sp, #72	; 0x48
   231bc:	f7ff ff69 	bl	23092 <sys_memcpy_swap>
	m[58] = a2->type;
   231c0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   231c2:	f814 3b01 	ldrb.w	r3, [r4], #1
   231c6:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   231ca:	4621      	mov	r1, r4
   231cc:	2206      	movs	r2, #6
   231ce:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   231d2:	f7fe fa68 	bl	216a6 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   231d6:	4621      	mov	r1, r4
   231d8:	2206      	movs	r2, #6
   231da:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   231de:	f7ff ff58 	bl	23092 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   231e2:	2210      	movs	r2, #16
   231e4:	4629      	mov	r1, r5
   231e6:	a801      	add	r0, sp, #4
   231e8:	f7ff ff53 	bl	23092 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   231ec:	463b      	mov	r3, r7
   231ee:	2241      	movs	r2, #65	; 0x41
   231f0:	a905      	add	r1, sp, #20
   231f2:	a801      	add	r0, sp, #4
   231f4:	f7ff ff76 	bl	230e4 <bt_smp_aes_cmac>
	if (err) {
   231f8:	4604      	mov	r4, r0
   231fa:	b910      	cbnz	r0, 23202 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   231fc:	4638      	mov	r0, r7
   231fe:	f7ff ffa9 	bl	23154 <sys_mem_swap.constprop.0>
}
   23202:	4620      	mov	r0, r4
   23204:	b017      	add	sp, #92	; 0x5c
   23206:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023208 <smp_f4>:
{
   23208:	b5f0      	push	{r4, r5, r6, r7, lr}
   2320a:	b097      	sub	sp, #92	; 0x5c
   2320c:	4614      	mov	r4, r2
   2320e:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   23210:	2220      	movs	r2, #32
   23212:	4601      	mov	r1, r0
   23214:	a805      	add	r0, sp, #20
{
   23216:	461d      	mov	r5, r3
   23218:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2321a:	f7ff ff3a 	bl	23092 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2321e:	2220      	movs	r2, #32
   23220:	4631      	mov	r1, r6
   23222:	a80d      	add	r0, sp, #52	; 0x34
   23224:	f7ff ff35 	bl	23092 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   23228:	4621      	mov	r1, r4
   2322a:	2210      	movs	r2, #16
   2322c:	a801      	add	r0, sp, #4
	m[64] = z;
   2322e:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   23232:	f7ff ff2e 	bl	23092 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   23236:	463b      	mov	r3, r7
   23238:	2241      	movs	r2, #65	; 0x41
   2323a:	a905      	add	r1, sp, #20
   2323c:	a801      	add	r0, sp, #4
   2323e:	f7ff ff51 	bl	230e4 <bt_smp_aes_cmac>
	if (err) {
   23242:	4604      	mov	r4, r0
   23244:	b910      	cbnz	r0, 2324c <smp_f4+0x44>
	sys_mem_swap(res, 16);
   23246:	4638      	mov	r0, r7
   23248:	f7ff ff84 	bl	23154 <sys_mem_swap.constprop.0>
}
   2324c:	4620      	mov	r0, r4
   2324e:	b017      	add	sp, #92	; 0x5c
   23250:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023252 <smp_signing_info>:
   23252:	2007      	movs	r0, #7
   23254:	4770      	bx	lr

00023256 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23256:	f3bf 8f5b 	dmb	ish
   2325a:	6800      	ldr	r0, [r0, #0]
   2325c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   23260:	4108      	asrs	r0, r1
}
   23262:	f000 0001 	and.w	r0, r0, #1
   23266:	4770      	bx	lr

00023268 <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   23268:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2326a:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2326e:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   23270:	4628      	mov	r0, r5
   23272:	2104      	movs	r1, #4
   23274:	f7ff ffef 	bl	23256 <atomic_test_bit>
   23278:	b168      	cbz	r0, 23296 <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   2327a:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2327c:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2327e:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   23280:	4608      	mov	r0, r1
   23282:	f7fe fec9 	bl	22018 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   23286:	4604      	mov	r4, r0
   23288:	b940      	cbnz	r0, 2329c <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2328a:	2104      	movs	r1, #4
   2328c:	4628      	mov	r0, r5
   2328e:	f7ff ff0c 	bl	230aa <atomic_set_bit>
}
   23292:	4620      	mov	r0, r4
   23294:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   23296:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2329a:	e7ef      	b.n	2327c <smp_create_pdu.isra.0+0x14>
	hdr = net_buf_add(buf, sizeof(*hdr));
   2329c:	2101      	movs	r1, #1
   2329e:	3008      	adds	r0, #8
   232a0:	f000 fad4 	bl	2384c <net_buf_simple_add>
	hdr->code = op;
   232a4:	7006      	strb	r6, [r0, #0]
	return buf;
   232a6:	e7f4      	b.n	23292 <smp_create_pdu.isra.0+0x2a>

000232a8 <smp_send_pairing_random>:
{
   232a8:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   232aa:	2104      	movs	r1, #4
{
   232ac:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   232ae:	f7ff ffdb 	bl	23268 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   232b2:	4604      	mov	r4, r0
   232b4:	b178      	cbz	r0, 232d6 <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
   232b6:	2110      	movs	r1, #16
   232b8:	3008      	adds	r0, #8
   232ba:	f000 fac7 	bl	2384c <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   232be:	2210      	movs	r2, #16
   232c0:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   232c4:	f7fe f9ef 	bl	216a6 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   232c8:	4628      	mov	r0, r5
   232ca:	2200      	movs	r2, #0
   232cc:	4621      	mov	r1, r4
   232ce:	f7ea ff83 	bl	e1d8 <smp_send.isra.0>
	return 0;
   232d2:	2000      	movs	r0, #0
}
   232d4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   232d6:	2008      	movs	r0, #8
   232d8:	e7fc      	b.n	232d4 <smp_send_pairing_random+0x2c>

000232da <send_pairing_rsp>:
{
   232da:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   232dc:	2102      	movs	r1, #2
{
   232de:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   232e0:	f7ff ffc2 	bl	23268 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   232e4:	4604      	mov	r4, r0
   232e6:	b178      	cbz	r0, 23308 <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
   232e8:	2106      	movs	r1, #6
   232ea:	3008      	adds	r0, #8
   232ec:	f000 faae 	bl	2384c <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   232f0:	2206      	movs	r2, #6
   232f2:	f105 01c9 	add.w	r1, r5, #201	; 0xc9
   232f6:	f7fe f9d6 	bl	216a6 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   232fa:	4628      	mov	r0, r5
   232fc:	2200      	movs	r2, #0
   232fe:	4621      	mov	r1, r4
   23300:	f7ea ff6a 	bl	e1d8 <smp_send.isra.0>
	return 0;
   23304:	2000      	movs	r0, #0
}
   23306:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   23308:	2008      	movs	r0, #8
   2330a:	e7fc      	b.n	23306 <send_pairing_rsp+0x2c>

0002330c <smp_dhkey_check>:
{
   2330c:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   2330e:	6803      	ldr	r3, [r0, #0]
   23310:	78db      	ldrb	r3, [r3, #3]
   23312:	2b01      	cmp	r3, #1
{
   23314:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   23316:	d115      	bne.n	23344 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   23318:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2331a:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
   2331e:	210f      	movs	r1, #15
   23320:	4628      	mov	r0, r5
   23322:	f7ff fed0 	bl	230c6 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   23326:	4631      	mov	r1, r6
   23328:	2210      	movs	r2, #16
   2332a:	f204 106f 	addw	r0, r4, #367	; 0x16f
   2332e:	f7fe f9ba 	bl	216a6 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   23332:	2107      	movs	r1, #7
   23334:	4628      	mov	r0, r5
   23336:	f7ff ff8e 	bl	23256 <atomic_test_bit>
   2333a:	b128      	cbz	r0, 23348 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2333c:	2108      	movs	r1, #8
   2333e:	4628      	mov	r0, r5
   23340:	f7ff feb3 	bl	230aa <atomic_set_bit>
}
   23344:	2000      	movs	r0, #0
   23346:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   23348:	2109      	movs	r1, #9
   2334a:	4628      	mov	r0, r5
   2334c:	f7ff ff83 	bl	23256 <atomic_test_bit>
   23350:	2800      	cmp	r0, #0
   23352:	d1f3      	bne.n	2333c <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   23354:	4620      	mov	r0, r4
}
   23356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   2335a:	f7ea bf55 	b.w	e208 <compute_and_check_and_send_slave_dhcheck>

0002335e <atomic_test_and_clear_bit>:
{
   2335e:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   23360:	2301      	movs	r3, #1
   23362:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   23366:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23368:	f3bf 8f5b 	dmb	ish
   2336c:	e850 3f00 	ldrex	r3, [r0]
   23370:	ea03 0c02 	and.w	ip, r3, r2
   23374:	e840 ce00 	strex	lr, ip, [r0]
   23378:	f1be 0f00 	cmp.w	lr, #0
   2337c:	d1f6      	bne.n	2336c <atomic_test_and_clear_bit+0xe>
   2337e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   23382:	420b      	tst	r3, r1
}
   23384:	bf14      	ite	ne
   23386:	2001      	movne	r0, #1
   23388:	2000      	moveq	r0, #0
   2338a:	f85d fb04 	ldr.w	pc, [sp], #4

0002338e <smp_reset>:
{
   2338e:	b538      	push	{r3, r4, r5, lr}
   23390:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   23392:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   23394:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   23398:	f001 f8e0 	bl	2455c <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   2339c:	2300      	movs	r3, #0
   2339e:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	atomic_set(&smp->allowed_cmds, 0);
   233a2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   233a6:	f3bf 8f5b 	dmb	ish
   233aa:	e850 2f00 	ldrex	r2, [r0]
   233ae:	e840 3100 	strex	r1, r3, [r0]
   233b2:	2900      	cmp	r1, #0
   233b4:	d1f9      	bne.n	233aa <smp_reset+0x1c>
   233b6:	f3bf 8f5b 	dmb	ish
   233ba:	f3bf 8f5b 	dmb	ish
   233be:	34bc      	adds	r4, #188	; 0xbc
   233c0:	e854 2f00 	ldrex	r2, [r4]
   233c4:	e844 3100 	strex	r1, r3, [r4]
   233c8:	2900      	cmp	r1, #0
   233ca:	d1f9      	bne.n	233c0 <smp_reset+0x32>
   233cc:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
   233d0:	7a6b      	ldrb	r3, [r5, #9]
   233d2:	7aaa      	ldrb	r2, [r5, #10]
   233d4:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   233d6:	bf18      	it	ne
   233d8:	72ab      	strbne	r3, [r5, #10]
}
   233da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   233de:	2101      	movs	r1, #1
   233e0:	f7ff be63 	b.w	230aa <atomic_set_bit>

000233e4 <smp_error>:
{
   233e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   233e6:	4606      	mov	r6, r0
   233e8:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   233ea:	f7eb fb21 	bl	ea30 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   233ee:	2105      	movs	r1, #5
   233f0:	4630      	mov	r0, r6
   233f2:	f7ff ff39 	bl	23268 <smp_create_pdu.isra.0>
	if (!buf) {
   233f6:	4605      	mov	r5, r0
   233f8:	b178      	cbz	r0, 2341a <smp_error+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
   233fa:	2101      	movs	r1, #1
   233fc:	3008      	adds	r0, #8
   233fe:	f000 fa25 	bl	2384c <net_buf_simple_add>
	rsp->reason = reason;
   23402:	7004      	strb	r4, [r0, #0]
   23404:	2400      	movs	r4, #0
   23406:	6830      	ldr	r0, [r6, #0]
   23408:	9400      	str	r4, [sp, #0]
   2340a:	4623      	mov	r3, r4
   2340c:	462a      	mov	r2, r5
   2340e:	2106      	movs	r1, #6
   23410:	f7fe fe05 	bl	2201e <bt_l2cap_send_cb>
	return 0;
   23414:	4620      	mov	r0, r4
}
   23416:	b002      	add	sp, #8
   23418:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   2341a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2341e:	e7fa      	b.n	23416 <smp_error+0x32>

00023420 <smp_ident_sent>:
{
   23420:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   23422:	7883      	ldrb	r3, [r0, #2]
   23424:	2b01      	cmp	r3, #1
   23426:	d10f      	bne.n	23448 <smp_ident_sent+0x28>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   23428:	2106      	movs	r1, #6
   2342a:	f7fe fe11 	bl	22050 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   2342e:	f890 21a0 	ldrb.w	r2, [r0, #416]	; 0x1a0
   23432:	f022 0201 	bic.w	r2, r2, #1
   23436:	f880 21a0 	strb.w	r2, [r0, #416]	; 0x1a0
		if (!smp->local_dist && !smp->remote_dist) {
   2343a:	f8b0 11a0 	ldrh.w	r1, [r0, #416]	; 0x1a0
   2343e:	b919      	cbnz	r1, 23448 <smp_ident_sent+0x28>
}
   23440:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   23444:	f7eb baf4 	b.w	ea30 <smp_pairing_complete>
}
   23448:	bd08      	pop	{r3, pc}

0002344a <smp_c1>:
{
   2344a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2344e:	b089      	sub	sp, #36	; 0x24
   23450:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   23454:	4699      	mov	r9, r3
	p1[0] = ia->type;
   23456:	783b      	ldrb	r3, [r7, #0]
{
   23458:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   2345a:	f88d 3000 	strb.w	r3, [sp]
{
   2345e:	460c      	mov	r4, r1
	p1[1] = ra->type;
   23460:	f898 3000 	ldrb.w	r3, [r8]
   23464:	f88d 3001 	strb.w	r3, [sp, #1]
{
   23468:	4611      	mov	r1, r2
   2346a:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   2346c:	2207      	movs	r2, #7
   2346e:	f10d 0002 	add.w	r0, sp, #2
   23472:	f7fe f918 	bl	216a6 <memcpy>
	memcpy(p1 + 9, pres, 7);
   23476:	2207      	movs	r2, #7
   23478:	4649      	mov	r1, r9
   2347a:	f10d 0009 	add.w	r0, sp, #9
   2347e:	f7fe f912 	bl	216a6 <memcpy>
	while (len--) {
   23482:	f104 0010 	add.w	r0, r4, #16
   23486:	4629      	mov	r1, r5
   23488:	466a      	mov	r2, sp
   2348a:	4284      	cmp	r4, r0
   2348c:	d127      	bne.n	234de <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2348e:	462a      	mov	r2, r5
   23490:	4629      	mov	r1, r5
   23492:	4630      	mov	r0, r6
   23494:	f7ef f870 	bl	12578 <bt_encrypt_le>
	if (err) {
   23498:	4604      	mov	r4, r0
   2349a:	b9e0      	cbnz	r0, 234d6 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   2349c:	2206      	movs	r2, #6
   2349e:	f108 0101 	add.w	r1, r8, #1
   234a2:	a804      	add	r0, sp, #16
   234a4:	f7fe f8ff 	bl	216a6 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   234a8:	2206      	movs	r2, #6
   234aa:	1c79      	adds	r1, r7, #1
   234ac:	f10d 0016 	add.w	r0, sp, #22
   234b0:	f7fe f8f9 	bl	216a6 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   234b4:	2204      	movs	r2, #4
   234b6:	4621      	mov	r1, r4
   234b8:	a807      	add	r0, sp, #28
   234ba:	f7fe f91f 	bl	216fc <memset>
	while (len--) {
   234be:	f105 0010 	add.w	r0, r5, #16
   234c2:	462a      	mov	r2, r5
   234c4:	ab04      	add	r3, sp, #16
   234c6:	4282      	cmp	r2, r0
   234c8:	d112      	bne.n	234f0 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   234ca:	462a      	mov	r2, r5
   234cc:	4629      	mov	r1, r5
   234ce:	4630      	mov	r0, r6
   234d0:	f7ef f852 	bl	12578 <bt_encrypt_le>
   234d4:	4604      	mov	r4, r0
}
   234d6:	4620      	mov	r0, r4
   234d8:	b009      	add	sp, #36	; 0x24
   234da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   234de:	f814 3b01 	ldrb.w	r3, [r4], #1
   234e2:	f812 cb01 	ldrb.w	ip, [r2], #1
   234e6:	ea83 030c 	eor.w	r3, r3, ip
   234ea:	f801 3b01 	strb.w	r3, [r1], #1
   234ee:	e7cc      	b.n	2348a <smp_c1+0x40>
   234f0:	f812 1b01 	ldrb.w	r1, [r2], #1
   234f4:	f813 4b01 	ldrb.w	r4, [r3], #1
   234f8:	4061      	eors	r1, r4
   234fa:	f802 1c01 	strb.w	r1, [r2, #-1]
   234fe:	e7e2      	b.n	234c6 <smp_c1+0x7c>

00023500 <legacy_pairing_confirm>:
{
   23500:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   23502:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
{
   23506:	b085      	sub	sp, #20
   23508:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2350a:	2109      	movs	r1, #9
   2350c:	4638      	mov	r0, r7
   2350e:	f7ff fea2 	bl	23256 <atomic_test_bit>
   23512:	bb90      	cbnz	r0, 2357a <legacy_pairing_confirm+0x7a>
			atomic_set_bit(&smp->allowed_cmds,
   23514:	2104      	movs	r1, #4
   23516:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   2351a:	f7ff fdc6 	bl	230aa <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2351e:	2103      	movs	r1, #3
   23520:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   23522:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   23524:	f7ff fea0 	bl	23268 <smp_create_pdu.isra.0>
	if (!buf) {
   23528:	4606      	mov	r6, r0
   2352a:	b1c0      	cbz	r0, 2355e <legacy_pairing_confirm+0x5e>
	req = net_buf_add(buf, sizeof(*req));
   2352c:	2110      	movs	r1, #16
   2352e:	3008      	adds	r0, #8
   23530:	f000 f98c 	bl	2384c <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   23534:	f104 0396 	add.w	r3, r4, #150	; 0x96
   23538:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2353a:	9002      	str	r0, [sp, #8]
   2353c:	9301      	str	r3, [sp, #4]
   2353e:	9400      	str	r4, [sp, #0]
   23540:	f105 03c8 	add.w	r3, r5, #200	; 0xc8
   23544:	f105 02c1 	add.w	r2, r5, #193	; 0xc1
   23548:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   2354c:	f105 00ff 	add.w	r0, r5, #255	; 0xff
   23550:	f7ff ff7b 	bl	2344a <smp_c1>
   23554:	4604      	mov	r4, r0
   23556:	b120      	cbz	r0, 23562 <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   23558:	4630      	mov	r0, r6
   2355a:	f7f7 fffb 	bl	1b554 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2355e:	2008      	movs	r0, #8
   23560:	e009      	b.n	23576 <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   23562:	4602      	mov	r2, r0
   23564:	4631      	mov	r1, r6
   23566:	4628      	mov	r0, r5
   23568:	f7ea fe36 	bl	e1d8 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2356c:	4621      	mov	r1, r4
   2356e:	4638      	mov	r0, r7
   23570:	f7ff fda9 	bl	230c6 <atomic_clear_bit>
	return 0;
   23574:	2000      	movs	r0, #0
}
   23576:	b005      	add	sp, #20
   23578:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2357a:	2100      	movs	r1, #0
   2357c:	4638      	mov	r0, r7
   2357e:	f7ff fd94 	bl	230aa <atomic_set_bit>
   23582:	e7f7      	b.n	23574 <legacy_pairing_confirm+0x74>

00023584 <smp_pairing_confirm>:
{
   23584:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   23586:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   23588:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
{
   2358c:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   2358e:	210a      	movs	r1, #10
   23590:	4628      	mov	r0, r5
   23592:	f7ff fd98 	bl	230c6 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   23596:	4631      	mov	r1, r6
   23598:	2210      	movs	r2, #16
   2359a:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
   2359e:	f7fe f882 	bl	216a6 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   235a2:	2105      	movs	r1, #5
   235a4:	4628      	mov	r0, r5
   235a6:	f7ff fe56 	bl	23256 <atomic_test_bit>
   235aa:	b920      	cbnz	r0, 235b6 <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   235ac:	4620      	mov	r0, r4
}
   235ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   235b2:	f7ff bfa5 	b.w	23500 <legacy_pairing_confirm>
	switch (smp->method) {
   235b6:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   235ba:	2b01      	cmp	r3, #1
   235bc:	d00b      	beq.n	235d6 <smp_pairing_confirm+0x52>
   235be:	2b02      	cmp	r3, #2
   235c0:	d115      	bne.n	235ee <smp_pairing_confirm+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   235c2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   235c6:	2104      	movs	r1, #4
   235c8:	f7ff fd6f 	bl	230aa <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   235cc:	4620      	mov	r0, r4
}
   235ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   235d2:	f7ea bf1f 	b.w	e414 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   235d6:	2109      	movs	r1, #9
   235d8:	4628      	mov	r0, r5
   235da:	f7ff fe3c 	bl	23256 <atomic_test_bit>
   235de:	2800      	cmp	r0, #0
   235e0:	d0ef      	beq.n	235c2 <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   235e2:	4628      	mov	r0, r5
   235e4:	2100      	movs	r1, #0
   235e6:	f7ff fd60 	bl	230aa <atomic_set_bit>
			return 0;
   235ea:	2000      	movs	r0, #0
}
   235ec:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   235ee:	2008      	movs	r0, #8
   235f0:	e7fc      	b.n	235ec <smp_pairing_confirm+0x68>

000235f2 <bt_smp_request_ltk>:
{
   235f2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   235f6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   235f8:	e9cd 2300 	strd	r2, r3, [sp]
   235fc:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   235fe:	f7ea fd93 	bl	e128 <smp_chan_get>
	if (!smp) {
   23602:	4605      	mov	r5, r0
   23604:	2800      	cmp	r0, #0
   23606:	f000 809d 	beq.w	23744 <bt_smp_request_ltk+0x152>
	if (ediv == 0U && rand == 0U &&
   2360a:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   2360e:	f1b9 0f00 	cmp.w	r9, #0
   23612:	d12d      	bne.n	23670 <bt_smp_request_ltk+0x7e>
   23614:	e9dd 2300 	ldrd	r2, r3, [sp]
   23618:	4313      	orrs	r3, r2
   2361a:	d129      	bne.n	23670 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2361c:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
   23620:	2103      	movs	r1, #3
   23622:	4640      	mov	r0, r8
   23624:	f7ff fe17 	bl	23256 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   23628:	b310      	cbz	r0, 23670 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2362a:	2101      	movs	r1, #1
   2362c:	4640      	mov	r0, r8
   2362e:	f7ff fe12 	bl	23256 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   23632:	4606      	mov	r6, r0
   23634:	b1e0      	cbz	r0, 23670 <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   23636:	f895 40cc 	ldrb.w	r4, [r5, #204]	; 0xcc
   2363a:	f895 30c5 	ldrb.w	r3, [r5, #197]	; 0xc5
   2363e:	429c      	cmp	r4, r3
   23640:	bf28      	it	cs
   23642:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   23644:	4622      	mov	r2, r4
   23646:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   2364a:	4638      	mov	r0, r7
   2364c:	f7fe f82b 	bl	216a6 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   23650:	2c0f      	cmp	r4, #15
   23652:	d805      	bhi.n	23660 <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   23654:	f1c4 0210 	rsb	r2, r4, #16
   23658:	4649      	mov	r1, r9
   2365a:	1938      	adds	r0, r7, r4
   2365c:	f7fe f84e 	bl	216fc <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   23660:	2101      	movs	r1, #1
   23662:	4640      	mov	r0, r8
   23664:	f7ff fd21 	bl	230aa <atomic_set_bit>
}
   23668:	4630      	mov	r0, r6
   2366a:	b003      	add	sp, #12
   2366c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   23670:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   23674:	b983      	cbnz	r3, 23698 <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   23676:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2367a:	7a21      	ldrb	r1, [r4, #8]
   2367c:	4632      	mov	r2, r6
   2367e:	2020      	movs	r0, #32
   23680:	f7ec f85a 	bl	f738 <bt_keys_find>
   23684:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   23688:	b930      	cbnz	r0, 23698 <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   2368a:	7a21      	ldrb	r1, [r4, #8]
   2368c:	4632      	mov	r2, r6
   2368e:	2001      	movs	r0, #1
   23690:	f7ec f852 	bl	f738 <bt_keys_find>
   23694:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   23698:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   2369c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   236a0:	b9ce      	cbnz	r6, 236d6 <bt_smp_request_ltk+0xe4>
   236a2:	e9dd 2300 	ldrd	r2, r3, [sp]
   236a6:	4313      	orrs	r3, r2
   236a8:	d115      	bne.n	236d6 <bt_smp_request_ltk+0xe4>
   236aa:	2800      	cmp	r0, #0
   236ac:	d03c      	beq.n	23728 <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   236ae:	89c3      	ldrh	r3, [r0, #14]
   236b0:	069a      	lsls	r2, r3, #26
   236b2:	d511      	bpl.n	236d8 <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   236b4:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   236b6:	f100 011a 	add.w	r1, r0, #26
   236ba:	4622      	mov	r2, r4
   236bc:	4638      	mov	r0, r7
   236be:	f7fd fff2 	bl	216a6 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   236c2:	2c0f      	cmp	r4, #15
   236c4:	d805      	bhi.n	236d2 <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   236c6:	f1c4 0210 	rsb	r2, r4, #16
   236ca:	4631      	mov	r1, r6
   236cc:	1938      	adds	r0, r7, r4
   236ce:	f7fe f815 	bl	216fc <memset>
		return true;
   236d2:	2601      	movs	r6, #1
   236d4:	e7c8      	b.n	23668 <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   236d6:	b338      	cbz	r0, 23728 <bt_smp_request_ltk+0x136>
   236d8:	89c3      	ldrh	r3, [r0, #14]
   236da:	07db      	lsls	r3, r3, #31
   236dc:	d524      	bpl.n	23728 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   236de:	2208      	movs	r2, #8
   236e0:	4669      	mov	r1, sp
   236e2:	3040      	adds	r0, #64	; 0x40
   236e4:	f7fd ffcf 	bl	21686 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   236e8:	b9f0      	cbnz	r0, 23728 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   236ea:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   236ee:	2202      	movs	r2, #2
   236f0:	a90a      	add	r1, sp, #40	; 0x28
   236f2:	3048      	adds	r0, #72	; 0x48
   236f4:	f7fd ffc7 	bl	21686 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   236f8:	4606      	mov	r6, r0
   236fa:	b9a8      	cbnz	r0, 23728 <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   236fc:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   23700:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   23702:	4638      	mov	r0, r7
   23704:	4622      	mov	r2, r4
   23706:	314a      	adds	r1, #74	; 0x4a
   23708:	f7fd ffcd 	bl	216a6 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2370c:	2c0f      	cmp	r4, #15
   2370e:	d805      	bhi.n	2371c <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   23710:	f1c4 0210 	rsb	r2, r4, #16
   23714:	4631      	mov	r1, r6
   23716:	1938      	adds	r0, r7, r4
   23718:	f7fd fff0 	bl	216fc <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2371c:	2101      	movs	r1, #1
   2371e:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   23722:	f7ff fcc2 	bl	230aa <atomic_set_bit>
		return true;
   23726:	e7d4      	b.n	236d2 <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   23728:	210e      	movs	r1, #14
   2372a:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   2372e:	f7ff fd92 	bl	23256 <atomic_test_bit>
   23732:	b120      	cbz	r0, 2373e <bt_smp_request_ltk+0x14c>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   23734:	2202      	movs	r2, #2
   23736:	2106      	movs	r1, #6
   23738:	4620      	mov	r0, r4
   2373a:	f7e7 fa19 	bl	ab70 <bt_conn_security_changed>
	smp_reset(smp);
   2373e:	4628      	mov	r0, r5
   23740:	f7ff fe25 	bl	2338e <smp_reset>
	return false;
   23744:	2600      	movs	r6, #0
   23746:	e78f      	b.n	23668 <bt_smp_request_ltk+0x76>

00023748 <bt_smp_sign>:
   23748:	f06f 0022 	mvn.w	r0, #34	; 0x22
   2374c:	4770      	bx	lr

0002374e <bt_keys_get_type>:
{
   2374e:	b570      	push	{r4, r5, r6, lr}
   23750:	4604      	mov	r4, r0
   23752:	460d      	mov	r5, r1
   23754:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   23756:	f7eb ffef 	bl	f738 <bt_keys_find>
	if (keys) {
   2375a:	b938      	cbnz	r0, 2376c <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2375c:	4631      	mov	r1, r6
   2375e:	4628      	mov	r0, r5
   23760:	f7eb ffb4 	bl	f6cc <bt_keys_get_addr>
	if (!keys) {
   23764:	b110      	cbz	r0, 2376c <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   23766:	89c3      	ldrh	r3, [r0, #14]
   23768:	431c      	orrs	r4, r3
   2376a:	81c4      	strh	r4, [r0, #14]
}
   2376c:	bd70      	pop	{r4, r5, r6, pc}

0002376e <bt_keys_add_type>:
	keys->keys |= type;
   2376e:	89c3      	ldrh	r3, [r0, #14]
   23770:	4319      	orrs	r1, r3
   23772:	81c1      	strh	r1, [r0, #14]
}
   23774:	4770      	bx	lr

00023776 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   23776:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   23778:	7a03      	ldrb	r3, [r0, #8]
   2377a:	075b      	lsls	r3, r3, #29
{
   2377c:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2377e:	d501      	bpl.n	23784 <bt_keys_clear+0xe>
		bt_id_del(keys);
   23780:	f7e6 f9ba 	bl	9af8 <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   23784:	4620      	mov	r0, r4
   23786:	225c      	movs	r2, #92	; 0x5c
}
   23788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   2378c:	2100      	movs	r1, #0
   2378e:	f7fd bfb5 	b.w	216fc <memset>

00023792 <fixed_data_unref>:
}
   23792:	4770      	bx	lr

00023794 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   23794:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   23796:	6849      	ldr	r1, [r1, #4]
   23798:	6809      	ldr	r1, [r1, #0]
   2379a:	f7f7 be4f 	b.w	1b43c <net_buf_alloc_len>

0002379e <net_buf_get>:
{
   2379e:	b570      	push	{r4, r5, r6, lr}
   237a0:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   237a2:	f7fa fb9f 	bl	1dee4 <z_impl_k_queue_get>
	if (!buf) {
   237a6:	4605      	mov	r5, r0
   237a8:	b128      	cbz	r0, 237b6 <net_buf_get+0x18>
   237aa:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   237ac:	7963      	ldrb	r3, [r4, #5]
   237ae:	f013 0301 	ands.w	r3, r3, #1
   237b2:	d102      	bne.n	237ba <net_buf_get+0x1c>
	frag->frags = NULL;
   237b4:	6023      	str	r3, [r4, #0]
}
   237b6:	4628      	mov	r0, r5
   237b8:	bd70      	pop	{r4, r5, r6, pc}
   237ba:	2300      	movs	r3, #0
   237bc:	2200      	movs	r2, #0
   237be:	4630      	mov	r0, r6
   237c0:	f7fa fb90 	bl	1dee4 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   237c4:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   237c6:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   237c8:	f023 0301 	bic.w	r3, r3, #1
   237cc:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   237ce:	4604      	mov	r4, r0
   237d0:	e7ec      	b.n	237ac <net_buf_get+0xe>

000237d2 <net_buf_simple_init_with_data>:
	buf->size  = size;
   237d2:	b292      	uxth	r2, r2
	buf->__buf = data;
   237d4:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   237d6:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   237d8:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   237da:	8082      	strh	r2, [r0, #4]
}
   237dc:	4770      	bx	lr

000237de <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   237de:	6883      	ldr	r3, [r0, #8]
   237e0:	440b      	add	r3, r1
   237e2:	6003      	str	r3, [r0, #0]
}
   237e4:	4770      	bx	lr

000237e6 <net_buf_put>:
{
   237e6:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   237e8:	460a      	mov	r2, r1
   237ea:	6814      	ldr	r4, [r2, #0]
   237ec:	b914      	cbnz	r4, 237f4 <net_buf_put+0xe>
}
   237ee:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   237f0:	f000 bcfb 	b.w	241ea <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   237f4:	7953      	ldrb	r3, [r2, #5]
   237f6:	f043 0301 	orr.w	r3, r3, #1
   237fa:	7153      	strb	r3, [r2, #5]
   237fc:	4622      	mov	r2, r4
   237fe:	e7f4      	b.n	237ea <net_buf_put+0x4>

00023800 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   23800:	7902      	ldrb	r2, [r0, #4]
   23802:	3201      	adds	r2, #1
   23804:	7102      	strb	r2, [r0, #4]
	return buf;
}
   23806:	4770      	bx	lr

00023808 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   23808:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2380a:	4618      	mov	r0, r3
   2380c:	681b      	ldr	r3, [r3, #0]
   2380e:	2b00      	cmp	r3, #0
   23810:	d1fb      	bne.n	2380a <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   23812:	4770      	bx	lr

00023814 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   23814:	6802      	ldr	r2, [r0, #0]
{
   23816:	b510      	push	{r4, lr}
	if (parent->frags) {
   23818:	b12a      	cbz	r2, 23826 <net_buf_frag_insert+0x12>
   2381a:	460b      	mov	r3, r1
	while (buf->frags) {
   2381c:	461c      	mov	r4, r3
   2381e:	681b      	ldr	r3, [r3, #0]
   23820:	2b00      	cmp	r3, #0
   23822:	d1fb      	bne.n	2381c <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   23824:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   23826:	6001      	str	r1, [r0, #0]
}
   23828:	bd10      	pop	{r4, pc}

0002382a <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2382a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2382c:	4604      	mov	r4, r0
   2382e:	b920      	cbnz	r0, 2383a <net_buf_frag_add+0x10>
	buf->ref++;
   23830:	790b      	ldrb	r3, [r1, #4]
   23832:	3301      	adds	r3, #1
   23834:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   23836:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   23838:	bd10      	pop	{r4, pc}
   2383a:	4603      	mov	r3, r0
	while (buf->frags) {
   2383c:	4618      	mov	r0, r3
   2383e:	681b      	ldr	r3, [r3, #0]
   23840:	2b00      	cmp	r3, #0
   23842:	d1fb      	bne.n	2383c <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   23844:	f7ff ffe6 	bl	23814 <net_buf_frag_insert>
   23848:	4620      	mov	r0, r4
   2384a:	e7f5      	b.n	23838 <net_buf_frag_add+0xe>

0002384c <net_buf_simple_add>:
	return buf->data + buf->len;
   2384c:	8883      	ldrh	r3, [r0, #4]
   2384e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   23850:	4419      	add	r1, r3
   23852:	8081      	strh	r1, [r0, #4]
	return tail;
}
   23854:	18d0      	adds	r0, r2, r3
   23856:	4770      	bx	lr

00023858 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   23858:	b430      	push	{r4, r5}
   2385a:	8884      	ldrh	r4, [r0, #4]
   2385c:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2385e:	18a3      	adds	r3, r4, r2
   23860:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   23862:	1928      	adds	r0, r5, r4
}
   23864:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   23866:	f7fd bf1e 	b.w	216a6 <memcpy>

0002386a <net_buf_simple_add_u8>:
   2386a:	8883      	ldrh	r3, [r0, #4]
   2386c:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2386e:	b510      	push	{r4, lr}
	buf->len += len;
   23870:	1c5c      	adds	r4, r3, #1
   23872:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   23874:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   23876:	18d0      	adds	r0, r2, r3
   23878:	bd10      	pop	{r4, pc}

0002387a <net_buf_simple_add_le16>:
   2387a:	8883      	ldrh	r3, [r0, #4]
   2387c:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   2387e:	b530      	push	{r4, r5, lr}
   23880:	18d4      	adds	r4, r2, r3
	buf->len += len;
   23882:	1c9d      	adds	r5, r3, #2
   23884:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   23886:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   23888:	0a09      	lsrs	r1, r1, #8
   2388a:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   2388c:	bd30      	pop	{r4, r5, pc}

0002388e <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2388e:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   23890:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   23892:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   23894:	1a40      	subs	r0, r0, r1
	buf->len += len;
   23896:	4411      	add	r1, r2
	buf->data -= len;
   23898:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2389a:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2389c:	4770      	bx	lr

0002389e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2389e:	8882      	ldrh	r2, [r0, #4]
   238a0:	1a52      	subs	r2, r2, r1
{
   238a2:	4603      	mov	r3, r0
	buf->len -= len;
   238a4:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   238a6:	6800      	ldr	r0, [r0, #0]
   238a8:	4408      	add	r0, r1
   238aa:	6018      	str	r0, [r3, #0]
}
   238ac:	4770      	bx	lr

000238ae <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   238ae:	4603      	mov	r3, r0
	void *data = buf->data;
   238b0:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   238b2:	889a      	ldrh	r2, [r3, #4]
   238b4:	1a52      	subs	r2, r2, r1
	buf->data += len;
   238b6:	4401      	add	r1, r0
	buf->len -= len;
   238b8:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   238ba:	6019      	str	r1, [r3, #0]

	return data;
}
   238bc:	4770      	bx	lr

000238be <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   238be:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   238c0:	6803      	ldr	r3, [r0, #0]
   238c2:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   238c4:	2102      	movs	r1, #2
   238c6:	f7ff ffea 	bl	2389e <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   238ca:	4620      	mov	r0, r4
   238cc:	bd10      	pop	{r4, pc}

000238ce <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   238ce:	6802      	ldr	r2, [r0, #0]
   238d0:	6880      	ldr	r0, [r0, #8]
}
   238d2:	1a10      	subs	r0, r2, r0
   238d4:	4770      	bx	lr

000238d6 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   238d6:	8883      	ldrh	r3, [r0, #4]
   238d8:	88c2      	ldrh	r2, [r0, #6]
   238da:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   238dc:	6803      	ldr	r3, [r0, #0]
   238de:	6880      	ldr	r0, [r0, #8]
   238e0:	1a18      	subs	r0, r3, r0
}
   238e2:	1a10      	subs	r0, r2, r0
   238e4:	4770      	bx	lr

000238e6 <net_buf_append_bytes>:
{
   238e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   238ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   238ec:	4681      	mov	r9, r0
   238ee:	460f      	mov	r7, r1
   238f0:	4690      	mov	r8, r2
	while (buf->frags) {
   238f2:	4606      	mov	r6, r0
   238f4:	4631      	mov	r1, r6
   238f6:	6836      	ldr	r6, [r6, #0]
   238f8:	2e00      	cmp	r6, #0
   238fa:	d1fb      	bne.n	238f4 <net_buf_append_bytes+0xe>
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   238fc:	f101 0a08 	add.w	sl, r1, #8
   23900:	4650      	mov	r0, sl
   23902:	f7ff ffe8 	bl	238d6 <net_buf_simple_tailroom>
   23906:	42b8      	cmp	r0, r7
   23908:	bf94      	ite	ls
   2390a:	b284      	uxthls	r4, r0
   2390c:	b2bc      	uxthhi	r4, r7
		net_buf_add_mem(frag, value8, count);
   2390e:	4641      	mov	r1, r8
   23910:	4622      	mov	r2, r4
   23912:	4650      	mov	r0, sl
   23914:	f7ff ffa0 	bl	23858 <net_buf_simple_add_mem>
		if (len == 0) {
   23918:	1b3f      	subs	r7, r7, r4
		added_len += count;
   2391a:	4426      	add	r6, r4
		value8 += count;
   2391c:	44a0      	add	r8, r4
		if (len == 0) {
   2391e:	d009      	beq.n	23934 <net_buf_append_bytes+0x4e>
		frag = allocate_cb(timeout, user_data);
   23920:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   23924:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   23926:	47a8      	blx	r5
		if (!frag) {
   23928:	4601      	mov	r1, r0
   2392a:	b118      	cbz	r0, 23934 <net_buf_append_bytes+0x4e>
		net_buf_frag_add(buf, frag);
   2392c:	4648      	mov	r0, r9
   2392e:	f7ff ff7c 	bl	2382a <net_buf_frag_add>
	do {
   23932:	e7e3      	b.n	238fc <net_buf_append_bytes+0x16>
}
   23934:	4630      	mov	r0, r6
   23936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002393a <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   2393a:	b570      	push	{r4, r5, r6, lr}
   2393c:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2393e:	6801      	ldr	r1, [r0, #0]
{
   23940:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   23942:	b189      	cbz	r1, 23968 <gpio_fire_callbacks+0x2e>
	return node->next;
   23944:	680c      	ldr	r4, [r1, #0]
   23946:	2c00      	cmp	r4, #0
   23948:	bf38      	it	cc
   2394a:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   2394c:	688a      	ldr	r2, [r1, #8]
   2394e:	402a      	ands	r2, r5
   23950:	d002      	beq.n	23958 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   23952:	684b      	ldr	r3, [r1, #4]
   23954:	4630      	mov	r0, r6
   23956:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   23958:	b134      	cbz	r4, 23968 <gpio_fire_callbacks+0x2e>
   2395a:	6823      	ldr	r3, [r4, #0]
   2395c:	2b00      	cmp	r3, #0
   2395e:	bf38      	it	cc
   23960:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23962:	4621      	mov	r1, r4
   23964:	461c      	mov	r4, r3
   23966:	e7f1      	b.n	2394c <gpio_fire_callbacks+0x12>
		}
	}
}
   23968:	bd70      	pop	{r4, r5, r6, pc}

0002396a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2396a:	6843      	ldr	r3, [r0, #4]
   2396c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2396e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   23972:	600b      	str	r3, [r1, #0]
}
   23974:	2000      	movs	r0, #0
   23976:	4770      	bx	lr

00023978 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   23978:	6843      	ldr	r3, [r0, #4]
   2397a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2397c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   23980:	4042      	eors	r2, r0
   23982:	400a      	ands	r2, r1
   23984:	4042      	eors	r2, r0
    p_reg->OUT = value;
   23986:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2398a:	2000      	movs	r0, #0
   2398c:	4770      	bx	lr

0002398e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2398e:	6843      	ldr	r3, [r0, #4]
   23990:	685b      	ldr	r3, [r3, #4]
}
   23992:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   23994:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   23998:	4770      	bx	lr

0002399a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2399a:	6843      	ldr	r3, [r0, #4]
   2399c:	685b      	ldr	r3, [r3, #4]
}
   2399e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   239a0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   239a4:	4770      	bx	lr

000239a6 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   239a6:	6843      	ldr	r3, [r0, #4]
   239a8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   239aa:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   239ae:	404b      	eors	r3, r1
    p_reg->OUT = value;
   239b0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   239b4:	2000      	movs	r0, #0
   239b6:	4770      	bx	lr

000239b8 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   239b8:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   239ba:	6858      	ldr	r0, [r3, #4]
{
   239bc:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   239be:	b158      	cbz	r0, 239d8 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   239c0:	2400      	movs	r4, #0
   239c2:	4281      	cmp	r1, r0
   239c4:	d113      	bne.n	239ee <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   239c6:	6808      	ldr	r0, [r1, #0]
   239c8:	b95c      	cbnz	r4, 239e2 <gpio_nrfx_manage_callback+0x2a>
   239ca:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   239cc:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   239ce:	42a1      	cmp	r1, r4
   239d0:	d100      	bne.n	239d4 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   239d2:	6098      	str	r0, [r3, #8]
	parent->next = child;
   239d4:	2000      	movs	r0, #0
   239d6:	6008      	str	r0, [r1, #0]
	if (set) {
   239d8:	b972      	cbnz	r2, 239f8 <gpio_nrfx_manage_callback+0x40>
	return 0;
   239da:	2000      	movs	r0, #0
}
   239dc:	bd30      	pop	{r4, r5, pc}
   239de:	4628      	mov	r0, r5
   239e0:	e7ef      	b.n	239c2 <gpio_nrfx_manage_callback+0xa>
   239e2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   239e4:	6898      	ldr	r0, [r3, #8]
   239e6:	4281      	cmp	r1, r0
	list->tail = node;
   239e8:	bf08      	it	eq
   239ea:	609c      	streq	r4, [r3, #8]
}
   239ec:	e7f2      	b.n	239d4 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   239ee:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   239f0:	4604      	mov	r4, r0
   239f2:	2d00      	cmp	r5, #0
   239f4:	d1f3      	bne.n	239de <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   239f6:	b13a      	cbz	r2, 23a08 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   239f8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   239fa:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   239fc:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   239fe:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   23a00:	2800      	cmp	r0, #0
   23a02:	d1ea      	bne.n	239da <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   23a04:	6099      	str	r1, [r3, #8]
}
   23a06:	e7e9      	b.n	239dc <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   23a08:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   23a0c:	e7e6      	b.n	239dc <gpio_nrfx_manage_callback+0x24>

00023a0e <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
   23a0e:	68c3      	ldr	r3, [r0, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   23a10:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
{
   23a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t out = data->pin_int_en;
   23a18:	68dc      	ldr	r4, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   23a1a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   23a1e:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   23a20:	430a      	orrs	r2, r1
   23a22:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   23a26:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return p_reg->IN;
   23a2a:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   23a2e:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   23a30:	ea24 0505 	bic.w	r5, r4, r5
	uint32_t bit = 1U << pin;
   23a34:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   23a36:	2700      	movs	r7, #0
	while (level_pins) {
   23a38:	b914      	cbnz	r4, 23a40 <check_level_trigger_pins+0x32>
}
   23a3a:	4628      	mov	r0, r5
   23a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   23a40:	4234      	tst	r4, r6
   23a42:	d00a      	beq.n	23a5a <check_level_trigger_pins+0x4c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   23a44:	f898 3008 	ldrb.w	r3, [r8, #8]
   23a48:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   23a4c:	2100      	movs	r1, #0
   23a4e:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   23a52:	f7f7 fe2b 	bl	1b6ac <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   23a56:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   23a5a:	3701      	adds	r7, #1
		bit <<= 1;
   23a5c:	0076      	lsls	r6, r6, #1
   23a5e:	e7eb      	b.n	23a38 <check_level_trigger_pins+0x2a>

00023a60 <cfg_level_pins>:
{
   23a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   23a64:	68c7      	ldr	r7, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   23a66:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   23a6a:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   23a6c:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   23a70:	4313      	orrs	r3, r2
   23a72:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   23a76:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   23a78:	2500      	movs	r5, #0
	while (level_pins) {
   23a7a:	b90c      	cbnz	r4, 23a80 <cfg_level_pins+0x20>
}
   23a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   23a80:	4226      	tst	r6, r4
   23a82:	d010      	beq.n	23aa6 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   23a84:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   23a86:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   23a8a:	40e9      	lsrs	r1, r5
   23a8c:	f001 0101 	and.w	r1, r1, #1
   23a90:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   23a94:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   23a98:	b2c9      	uxtb	r1, r1
   23a9a:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   23a9e:	f7f7 fe05 	bl	1b6ac <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   23aa2:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   23aa6:	3501      	adds	r5, #1
		bit <<= 1;
   23aa8:	0076      	lsls	r6, r6, #1
   23aaa:	e7e6      	b.n	23a7a <cfg_level_pins+0x1a>

00023aac <flash_nrf_write_protection>:
}
   23aac:	2000      	movs	r0, #0
   23aae:	4770      	bx	lr

00023ab0 <is_regular_addr_valid>:
{
   23ab0:	b538      	push	{r3, r4, r5, lr}
   23ab2:	4604      	mov	r4, r0
   23ab4:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   23ab6:	f000 f97b 	bl	23db0 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   23aba:	4284      	cmp	r4, r0
   23abc:	d209      	bcs.n	23ad2 <is_regular_addr_valid+0x22>
   23abe:	2c00      	cmp	r4, #0
   23ac0:	db07      	blt.n	23ad2 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   23ac2:	42a8      	cmp	r0, r5
   23ac4:	d305      	bcc.n	23ad2 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   23ac6:	442c      	add	r4, r5
	    len > flash_size ||
   23ac8:	4284      	cmp	r4, r0
   23aca:	bf8c      	ite	hi
   23acc:	2000      	movhi	r0, #0
   23ace:	2001      	movls	r0, #1
}
   23ad0:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   23ad2:	2000      	movs	r0, #0
   23ad4:	e7fc      	b.n	23ad0 <is_regular_addr_valid+0x20>

00023ad6 <erase_op>:
{
   23ad6:	b570      	push	{r4, r5, r6, lr}
   23ad8:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   23ada:	f000 f96f 	bl	23dbc <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   23ade:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   23ae0:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   23ae2:	b10b      	cbz	r3, 23ae8 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   23ae4:	f7f8 f910 	bl	1bd08 <nrf_flash_sync_get_timestamp_begin>
{
   23ae8:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   23aea:	6860      	ldr	r0, [r4, #4]
   23aec:	f7f8 fe42 	bl	1c774 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   23af0:	68a3      	ldr	r3, [r4, #8]
   23af2:	1b5b      	subs	r3, r3, r5
   23af4:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   23af6:	6863      	ldr	r3, [r4, #4]
   23af8:	442b      	add	r3, r5
   23afa:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   23afc:	7b23      	ldrb	r3, [r4, #12]
		i++;
   23afe:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   23b00:	b943      	cbnz	r3, 23b14 <erase_op+0x3e>
	} while (e_ctx->len > 0);
   23b02:	68a3      	ldr	r3, [r4, #8]
   23b04:	2b00      	cmp	r3, #0
   23b06:	d1f0      	bne.n	23aea <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   23b08:	68a0      	ldr	r0, [r4, #8]
   23b0a:	3800      	subs	r0, #0
   23b0c:	bf18      	it	ne
   23b0e:	2001      	movne	r0, #1
}
   23b10:	4240      	negs	r0, r0
   23b12:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   23b14:	4630      	mov	r0, r6
   23b16:	f7df fa4f 	bl	2fb8 <nrf_flash_sync_check_time_limit>
   23b1a:	2800      	cmp	r0, #0
   23b1c:	d0f1      	beq.n	23b02 <erase_op+0x2c>
   23b1e:	e7f3      	b.n	23b08 <erase_op+0x32>

00023b20 <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   23b20:	2000      	movs	r0, #0
   23b22:	f7ed b941 	b.w	10da8 <ticker_is_initialized>

00023b26 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   23b26:	6843      	ldr	r3, [r0, #4]
   23b28:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   23b2a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   23b2e:	05d2      	lsls	r2, r2, #23
{
   23b30:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   23b32:	d518      	bpl.n	23b66 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23b34:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   23b38:	b1aa      	cbz	r2, 23b66 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   23b3a:	f04f 0120 	mov.w	r1, #32
   23b3e:	f3ef 8211 	mrs	r2, BASEPRI
   23b42:	f381 8811 	msr	BASEPRI, r1
   23b46:	f3bf 8f6f 	isb	sy
   23b4a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   23b4e:	b131      	cbz	r1, 23b5e <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23b50:	2100      	movs	r1, #0
   23b52:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   23b56:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23b5a:	2101      	movs	r1, #1
   23b5c:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   23b5e:	f382 8811 	msr	BASEPRI, r2
   23b62:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   23b66:	68c2      	ldr	r2, [r0, #12]
   23b68:	68d2      	ldr	r2, [r2, #12]
   23b6a:	b15a      	cbz	r2, 23b84 <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23b6c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   23b70:	b151      	cbz	r1, 23b88 <uarte_nrfx_isr_int+0x62>
		if (data->int_driven->disable_tx_irq) {
   23b72:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   23b74:	2100      	movs	r1, #0
   23b76:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   23b78:	b134      	cbz	r4, 23b88 <uarte_nrfx_isr_int+0x62>
    p_reg->INTENCLR = mask;
   23b7a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   23b7e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   23b82:	7391      	strb	r1, [r2, #14]
}
   23b84:	bc10      	pop	{r4}
   23b86:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23b88:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   23b8c:	b121      	cbz	r1, 23b98 <uarte_nrfx_isr_int+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23b8e:	2100      	movs	r1, #0
   23b90:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   23b94:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   23b98:	6813      	ldr	r3, [r2, #0]
   23b9a:	2b00      	cmp	r3, #0
   23b9c:	d0f2      	beq.n	23b84 <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   23b9e:	6851      	ldr	r1, [r2, #4]
}
   23ba0:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   23ba2:	4718      	bx	r3

00023ba4 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   23ba4:	68c2      	ldr	r2, [r0, #12]
{
   23ba6:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   23ba8:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   23bac:	e883 0003 	stmia.w	r3, {r0, r1}
}
   23bb0:	2000      	movs	r0, #0
   23bb2:	4770      	bx	lr

00023bb4 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   23bb4:	6843      	ldr	r3, [r0, #4]
   23bb6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   23bb8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   23bbc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   23bc0:	4770      	bx	lr

00023bc2 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   23bc2:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   23bc4:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23bc6:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   23bca:	b938      	cbnz	r0, 23bdc <is_tx_ready+0x1a>
   23bcc:	7992      	ldrb	r2, [r2, #6]
   23bce:	b932      	cbnz	r2, 23bde <is_tx_ready+0x1c>
   23bd0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   23bd4:	3800      	subs	r0, #0
   23bd6:	bf18      	it	ne
   23bd8:	2001      	movne	r0, #1
   23bda:	4770      	bx	lr
   23bdc:	2001      	movs	r0, #1
}
   23bde:	4770      	bx	lr

00023be0 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   23be0:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   23be2:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   23be4:	681b      	ldr	r3, [r3, #0]
   23be6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   23bea:	b148      	cbz	r0, 23c00 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   23bec:	7c52      	ldrb	r2, [r2, #17]
   23bee:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23bf0:	2000      	movs	r0, #0
   23bf2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   23bf6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23bfa:	2201      	movs	r2, #1
   23bfc:	601a      	str	r2, [r3, #0]
	return 0;
   23bfe:	4770      	bx	lr
		return -1;
   23c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   23c04:	4770      	bx	lr

00023c06 <uarte_nrfx_fifo_fill>:
{
   23c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   23c08:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   23c0a:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   23c0c:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
   23c0e:	68f3      	ldr	r3, [r6, #12]
   23c10:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   23c12:	f3bf 8f5b 	dmb	ish
   23c16:	4294      	cmp	r4, r2
   23c18:	bfa8      	it	ge
   23c1a:	4614      	movge	r4, r2
   23c1c:	3310      	adds	r3, #16
   23c1e:	2201      	movs	r2, #1
   23c20:	e853 7f00 	ldrex	r7, [r3]
   23c24:	2f00      	cmp	r7, #0
   23c26:	d104      	bne.n	23c32 <uarte_nrfx_fifo_fill+0x2c>
   23c28:	e843 2c00 	strex	ip, r2, [r3]
   23c2c:	f1bc 0f00 	cmp.w	ip, #0
   23c30:	d1f6      	bne.n	23c20 <uarte_nrfx_fifo_fill+0x1a>
   23c32:	f3bf 8f5b 	dmb	ish
   23c36:	bf0c      	ite	eq
   23c38:	4613      	moveq	r3, r2
   23c3a:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   23c3c:	d01c      	beq.n	23c78 <uarte_nrfx_fifo_fill+0x72>
		return 0;
   23c3e:	461c      	mov	r4, r3
}
   23c40:	4620      	mov	r0, r4
   23c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   23c44:	68f2      	ldr	r2, [r6, #12]
   23c46:	5ccf      	ldrb	r7, [r1, r3]
   23c48:	6892      	ldr	r2, [r2, #8]
   23c4a:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
   23c4c:	3301      	adds	r3, #1
   23c4e:	42a3      	cmp	r3, r4
   23c50:	dbf8      	blt.n	23c44 <uarte_nrfx_fifo_fill+0x3e>
	__asm__ volatile(
   23c52:	f04f 0320 	mov.w	r3, #32
   23c56:	f3ef 8111 	mrs	r1, BASEPRI
   23c5a:	f383 8811 	msr	BASEPRI, r3
   23c5e:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   23c62:	f7ff ffae 	bl	23bc2 <is_tx_ready>
   23c66:	68f3      	ldr	r3, [r6, #12]
   23c68:	b940      	cbnz	r0, 23c7c <uarte_nrfx_fifo_fill+0x76>
		data->int_driven->fifo_fill_lock = 0;
   23c6a:	6118      	str	r0, [r3, #16]
		len = 0;
   23c6c:	4604      	mov	r4, r0
	__asm__ volatile(
   23c6e:	f381 8811 	msr	BASEPRI, r1
   23c72:	f3bf 8f6f 	isb	sy
	return len;
   23c76:	e7e3      	b.n	23c40 <uarte_nrfx_fifo_fill+0x3a>
	for (int i = 0; i < len; i++) {
   23c78:	2300      	movs	r3, #0
   23c7a:	e7e8      	b.n	23c4e <uarte_nrfx_fifo_fill+0x48>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   23c7c:	689b      	ldr	r3, [r3, #8]
   23c7e:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23c82:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
   23c84:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23c88:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   23c8c:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   23c90:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   23c94:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23c98:	2301      	movs	r3, #1
   23c9a:	60ab      	str	r3, [r5, #8]
}
   23c9c:	e7e7      	b.n	23c6e <uarte_nrfx_fifo_fill+0x68>

00023c9e <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   23c9e:	6843      	ldr	r3, [r0, #4]
   23ca0:	681b      	ldr	r3, [r3, #0]
{
   23ca2:	4602      	mov	r2, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23ca4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   23ca8:	b148      	cbz	r0, 23cbe <uarte_nrfx_fifo_read+0x20>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   23caa:	68d2      	ldr	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23cac:	2000      	movs	r0, #0
   23cae:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   23cb2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   23cb6:	7c52      	ldrb	r2, [r2, #17]
   23cb8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23cba:	2001      	movs	r0, #1
   23cbc:	6018      	str	r0, [r3, #0]
}
   23cbe:	4770      	bx	lr

00023cc0 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   23cc0:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   23cc2:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
   23cc4:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   23cc6:	f04f 0020 	mov.w	r0, #32
   23cca:	f3ef 8311 	mrs	r3, BASEPRI
   23cce:	f380 8811 	msr	BASEPRI, r0
   23cd2:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   23cd6:	68c9      	ldr	r1, [r1, #12]
   23cd8:	2000      	movs	r0, #0
   23cda:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   23cdc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   23ce0:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   23ce4:	f383 8811 	msr	BASEPRI, r3
   23ce8:	f3bf 8f6f 	isb	sy
}
   23cec:	4770      	bx	lr

00023cee <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   23cee:	68c3      	ldr	r3, [r0, #12]
   23cf0:	68db      	ldr	r3, [r3, #12]
   23cf2:	2201      	movs	r2, #1
   23cf4:	739a      	strb	r2, [r3, #14]
}
   23cf6:	4770      	bx	lr

00023cf8 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   23cf8:	68c3      	ldr	r3, [r0, #12]
   23cfa:	68db      	ldr	r3, [r3, #12]
   23cfc:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   23cfe:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   23d02:	b962      	cbnz	r2, 23d1e <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   23d04:	6842      	ldr	r2, [r0, #4]
   23d06:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23d08:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   23d0c:	b140      	cbz	r0, 23d20 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   23d0e:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   23d12:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   23d16:	d003      	beq.n	23d20 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   23d18:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   23d1a:	2001      	movs	r0, #1
   23d1c:	4770      	bx	lr
   23d1e:	2000      	movs	r0, #0
}
   23d20:	4770      	bx	lr

00023d22 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   23d22:	6843      	ldr	r3, [r0, #4]
   23d24:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23d26:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   23d2a:	3800      	subs	r0, #0
   23d2c:	bf18      	it	ne
   23d2e:	2001      	movne	r0, #1
   23d30:	4770      	bx	lr

00023d32 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   23d32:	6843      	ldr	r3, [r0, #4]
   23d34:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   23d36:	2210      	movs	r2, #16
   23d38:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   23d3c:	4770      	bx	lr

00023d3e <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   23d3e:	6843      	ldr	r3, [r0, #4]
   23d40:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   23d42:	2210      	movs	r2, #16
   23d44:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   23d48:	4770      	bx	lr

00023d4a <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   23d4a:	6843      	ldr	r3, [r0, #4]
   23d4c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   23d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
   23d52:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   23d56:	4770      	bx	lr

00023d58 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   23d58:	6843      	ldr	r3, [r0, #4]
   23d5a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   23d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
   23d60:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   23d64:	4770      	bx	lr

00023d66 <uarte_nrfx_irq_update>:
}
   23d66:	2001      	movs	r0, #1
   23d68:	4770      	bx	lr

00023d6a <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   23d6a:	68c3      	ldr	r3, [r0, #12]
   23d6c:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   23d6e:	e9c3 1200 	strd	r1, r2, [r3]
}
   23d72:	4770      	bx	lr

00023d74 <uarte_nrfx_irq_is_pending>:
{
   23d74:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   23d76:	6843      	ldr	r3, [r0, #4]
   23d78:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   23d7a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   23d7e:	025b      	lsls	r3, r3, #9
{
   23d80:	4604      	mov	r4, r0
		||
   23d82:	d405      	bmi.n	23d90 <uarte_nrfx_irq_is_pending+0x1c>
   23d84:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   23d88:	f010 0010 	ands.w	r0, r0, #16
   23d8c:	d106      	bne.n	23d9c <uarte_nrfx_irq_is_pending+0x28>
}
   23d8e:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   23d90:	f7ff ffb2 	bl	23cf8 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   23d94:	2800      	cmp	r0, #0
   23d96:	d0f5      	beq.n	23d84 <uarte_nrfx_irq_is_pending+0x10>
		||
   23d98:	2001      	movs	r0, #1
   23d9a:	e7f8      	b.n	23d8e <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   23d9c:	4620      	mov	r0, r4
   23d9e:	f7ff ffc0 	bl	23d22 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   23da2:	3800      	subs	r0, #0
   23da4:	bf18      	it	ne
   23da6:	2001      	movne	r0, #1
   23da8:	e7f1      	b.n	23d8e <uarte_nrfx_irq_is_pending+0x1a>

00023daa <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   23daa:	4700      	bx	r0

00023dac <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   23dac:	f000 bb6a 	b.w	24484 <z_impl_k_busy_wait>

00023db0 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   23db0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23db4:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   23db6:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   23db8:	4350      	muls	r0, r2
   23dba:	4770      	bx	lr

00023dbc <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   23dbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23dc0:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   23dc2:	4770      	bx	lr

00023dc4 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   23dc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23dc8:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   23dca:	4770      	bx	lr

00023dcc <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23dcc:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   23dd0:	681a      	ldr	r2, [r3, #0]
   23dd2:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23dd4:	bf1f      	itttt	ne
   23dd6:	2200      	movne	r2, #0
   23dd8:	601a      	strne	r2, [r3, #0]
   23dda:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23ddc:	2001      	movne	r0, #1
   23dde:	bf08      	it	eq
   23de0:	2000      	moveq	r0, #0
}
   23de2:	4770      	bx	lr

00023de4 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   23de4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23de8:	f44f 7260 	mov.w	r2, #896	; 0x380
   23dec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   23df0:	4770      	bx	lr

00023df2 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   23df2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23df6:	f44f 7260 	mov.w	r2, #896	; 0x380
   23dfa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   23dfe:	4770      	bx	lr

00023e00 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   23e00:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   23e02:	f7f8 fd3b 	bl	1c87c <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   23e06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   23e0a:	f7f8 bc7f 	b.w	1c70c <nrfx_clock_irq_handler>

00023e0e <nrfx_usbd_consumer>:
{
   23e0e:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
   23e10:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   23e12:	680d      	ldr	r5, [r1, #0]
   23e14:	429c      	cmp	r4, r3
        p_next->p_data = p_transfer->p_data;
   23e16:	bf29      	itett	cs
   23e18:	e9c0 5300 	strdcs	r5, r3, [r0]
        p_next->size = 0;
   23e1c:	2100      	movcc	r1, #0
        size -= data_size;
   23e1e:	1ae4      	subcs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   23e20:	18ed      	addcs	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
   23e22:	bf32      	itee	cc
   23e24:	e9c0 5100 	strdcc	r5, r1, [r0]
        p_transfer->size = size;
   23e28:	604c      	strcs	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   23e2a:	600d      	strcs	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
   23e2c:	4293      	cmp	r3, r2
   23e2e:	d103      	bne.n	23e38 <nrfx_usbd_consumer+0x2a>
   23e30:	1e20      	subs	r0, r4, #0
   23e32:	bf18      	it	ne
   23e34:	2001      	movne	r0, #1
}
   23e36:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
   23e38:	2000      	movs	r0, #0
   23e3a:	e7fc      	b.n	23e36 <nrfx_usbd_consumer+0x28>

00023e3c <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   23e3c:	684b      	ldr	r3, [r1, #4]
{
   23e3e:	b510      	push	{r4, lr}
   23e40:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
   23e42:	680c      	ldr	r4, [r1, #0]
   23e44:	bf28      	it	cs
   23e46:	461a      	movcs	r2, r3
    p_next->size = tx_size;
   23e48:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
   23e4c:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
   23e4e:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   23e50:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   23e52:	441a      	add	r2, r3
}
   23e54:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   23e56:	600a      	str	r2, [r1, #0]
}
   23e58:	bf18      	it	ne
   23e5a:	2001      	movne	r0, #1
   23e5c:	bd10      	pop	{r4, pc}

00023e5e <nrfx_usbd_feeder_ram_zlp>:
{
   23e5e:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
   23e60:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
   23e62:	680b      	ldr	r3, [r1, #0]
   23e64:	42a2      	cmp	r2, r4
   23e66:	bf28      	it	cs
   23e68:	4622      	movcs	r2, r4
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   23e6a:	2a00      	cmp	r2, #0
   23e6c:	bf14      	ite	ne
   23e6e:	461d      	movne	r5, r3
   23e70:	2500      	moveq	r5, #0
    p_next->size = tx_size;
   23e72:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
   23e76:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
   23e7a:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
   23e7c:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   23e7e:	600a      	str	r2, [r1, #0]
}
   23e80:	bf14      	ite	ne
   23e82:	2001      	movne	r0, #1
   23e84:	2000      	moveq	r0, #0
   23e86:	bd30      	pop	{r4, r5, pc}

00023e88 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   23e88:	b243      	sxtb	r3, r0
   23e8a:	2b00      	cmp	r3, #0
   23e8c:	bfb4      	ite	lt
   23e8e:	2000      	movlt	r0, #0
   23e90:	2010      	movge	r0, #16
   23e92:	f003 030f 	and.w	r3, r3, #15
}
   23e96:	4418      	add	r0, r3
   23e98:	4770      	bx	lr

00023e9a <ev_started_handler>:
}
   23e9a:	4770      	bx	lr

00023e9c <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   23e9c:	f7f8 becc 	b.w	1cc38 <nrf_usbd_ep0in_dma_handler>

00023ea0 <nrf_usbd_epin_dma_handler>:
{
   23ea0:	b508      	push	{r3, lr}
   23ea2:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
   23ea4:	f7f8 fdaa 	bl	1c9fc <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   23ea8:	4608      	mov	r0, r1
   23eaa:	f7f8 fd99 	bl	1c9e0 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   23eae:	7b83      	ldrb	r3, [r0, #14]
   23eb0:	2b03      	cmp	r3, #3
   23eb2:	d10a      	bne.n	23eca <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   23eb4:	4608      	mov	r0, r1
   23eb6:	f7ff ffe7 	bl	23e88 <ep2bit>
   23eba:	2301      	movs	r3, #1
   23ebc:	fa03 f000 	lsl.w	r0, r3, r0
   23ec0:	43c0      	mvns	r0, r0
}
   23ec2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   23ec6:	f7f8 bea5 	b.w	1cc14 <atomic_and.constprop.0>
    else if (p_state->handler.feeder == NULL)
   23eca:	6803      	ldr	r3, [r0, #0]
   23ecc:	2b00      	cmp	r3, #0
   23ece:	d0f1      	beq.n	23eb4 <nrf_usbd_epin_dma_handler+0x14>
}
   23ed0:	bd08      	pop	{r3, pc}

00023ed2 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   23ed2:	2087      	movs	r0, #135	; 0x87
   23ed4:	f7ff bfe4 	b.w	23ea0 <nrf_usbd_epin_dma_handler>

00023ed8 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   23ed8:	2086      	movs	r0, #134	; 0x86
   23eda:	f7ff bfe1 	b.w	23ea0 <nrf_usbd_epin_dma_handler>

00023ede <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   23ede:	2085      	movs	r0, #133	; 0x85
   23ee0:	f7ff bfde 	b.w	23ea0 <nrf_usbd_epin_dma_handler>

00023ee4 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   23ee4:	2084      	movs	r0, #132	; 0x84
   23ee6:	f7ff bfdb 	b.w	23ea0 <nrf_usbd_epin_dma_handler>

00023eea <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   23eea:	2083      	movs	r0, #131	; 0x83
   23eec:	f7ff bfd8 	b.w	23ea0 <nrf_usbd_epin_dma_handler>

00023ef0 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   23ef0:	2082      	movs	r0, #130	; 0x82
   23ef2:	f7ff bfd5 	b.w	23ea0 <nrf_usbd_epin_dma_handler>

00023ef6 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   23ef6:	2081      	movs	r0, #129	; 0x81
   23ef8:	f7ff bfd2 	b.w	23ea0 <nrf_usbd_epin_dma_handler>

00023efc <nrfx_usbd_ep_max_packet_size_set>:
{
   23efc:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   23efe:	f7f8 fd6f 	bl	1c9e0 <ep_state_access>
    p_state->max_packet_size = size;
   23f02:	8181      	strh	r1, [r0, #12]
}
   23f04:	bd08      	pop	{r3, pc}

00023f06 <nrfx_usbd_ep_status_get>:
{
   23f06:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   23f08:	f7f8 fd6a 	bl	1c9e0 <ep_state_access>
	__asm__ volatile(
   23f0c:	f04f 0220 	mov.w	r2, #32
   23f10:	f3ef 8311 	mrs	r3, BASEPRI
   23f14:	f382 8811 	msr	BASEPRI, r2
   23f18:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   23f1c:	6882      	ldr	r2, [r0, #8]
   23f1e:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   23f20:	6802      	ldr	r2, [r0, #0]
   23f22:	b92a      	cbnz	r2, 23f30 <nrfx_usbd_ep_status_get+0x2a>
   23f24:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   23f26:	f383 8811 	msr	BASEPRI, r3
   23f2a:	f3bf 8f6f 	isb	sy
}
   23f2e:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   23f30:	2004      	movs	r0, #4
   23f32:	e7f8      	b.n	23f26 <nrfx_usbd_ep_status_get+0x20>

00023f34 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   23f34:	2007      	movs	r0, #7
   23f36:	f7f9 b9bd 	b.w	1d2b4 <nrf_usbd_epout_dma_handler>

00023f3a <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   23f3a:	2006      	movs	r0, #6
   23f3c:	f7f9 b9ba 	b.w	1d2b4 <nrf_usbd_epout_dma_handler>

00023f40 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   23f40:	2005      	movs	r0, #5
   23f42:	f7f9 b9b7 	b.w	1d2b4 <nrf_usbd_epout_dma_handler>

00023f46 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   23f46:	2004      	movs	r0, #4
   23f48:	f7f9 b9b4 	b.w	1d2b4 <nrf_usbd_epout_dma_handler>

00023f4c <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   23f4c:	2003      	movs	r0, #3
   23f4e:	f7f9 b9b1 	b.w	1d2b4 <nrf_usbd_epout_dma_handler>

00023f52 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   23f52:	2002      	movs	r0, #2
   23f54:	f7f9 b9ae 	b.w	1d2b4 <nrf_usbd_epout_dma_handler>

00023f58 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   23f58:	2001      	movs	r0, #1
   23f5a:	f7f9 b9ab 	b.w	1d2b4 <nrf_usbd_epout_dma_handler>

00023f5e <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   23f5e:	f7f9 ba9b 	b.w	1d498 <usbd_ep_abort>

00023f62 <arch_system_halt>:
	__asm__ volatile(
   23f62:	f04f 0220 	mov.w	r2, #32
   23f66:	f3ef 8311 	mrs	r3, BASEPRI
   23f6a:	f382 8811 	msr	BASEPRI, r2
   23f6e:	f3bf 8f6f 	isb	sy
	for (;;) {
   23f72:	e7fe      	b.n	23f72 <arch_system_halt+0x10>

00023f74 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   23f74:	f7fc ba79 	b.w	2046a <z_clock_idle_exit>

00023f78 <k_heap_init>:
{
   23f78:	b410      	push	{r4}
   23f7a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   23f7e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   23f82:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   23f84:	f7fb bb88 	b.w	1f698 <sys_heap_init>

00023f88 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   23f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f8c:	4604      	mov	r4, r0
   23f8e:	b085      	sub	sp, #20
   23f90:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   23f92:	4610      	mov	r0, r2
   23f94:	4619      	mov	r1, r3
   23f96:	f000 fb3c 	bl	24612 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   23f9a:	f104 0a14 	add.w	sl, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   23f9e:	4605      	mov	r5, r0
   23fa0:	460f      	mov	r7, r1
   23fa2:	f04f 0220 	mov.w	r2, #32
   23fa6:	f3ef 8311 	mrs	r3, BASEPRI
   23faa:	f382 8811 	msr	BASEPRI, r2
   23fae:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   23fb2:	f104 0b0c 	add.w	fp, r4, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   23fb6:	4631      	mov	r1, r6
   23fb8:	4620      	mov	r0, r4
   23fba:	9303      	str	r3, [sp, #12]
   23fbc:	f7fb fb38 	bl	1f630 <sys_heap_alloc>
   23fc0:	9002      	str	r0, [sp, #8]
		now = z_tick_get();
   23fc2:	f7fa fe69 	bl	1ec98 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   23fc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   23fca:	b13a      	cbz	r2, 23fdc <k_heap_alloc+0x54>
	__asm__ volatile(
   23fcc:	f383 8811 	msr	BASEPRI, r3
   23fd0:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   23fd4:	4610      	mov	r0, r2
   23fd6:	b005      	add	sp, #20
   23fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   23fdc:	ebb5 0800 	subs.w	r8, r5, r0
   23fe0:	eb67 0901 	sbc.w	r9, r7, r1
   23fe4:	f1b8 0f01 	cmp.w	r8, #1
   23fe8:	f179 0100 	sbcs.w	r1, r9, #0
   23fec:	dbee      	blt.n	23fcc <k_heap_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   23fee:	e9cd 8900 	strd	r8, r9, [sp]
   23ff2:	465a      	mov	r2, fp
   23ff4:	4619      	mov	r1, r3
   23ff6:	4650      	mov	r0, sl
   23ff8:	f7fa fa32 	bl	1e460 <z_pend_curr>
	__asm__ volatile(
   23ffc:	f04f 0220 	mov.w	r2, #32
   24000:	f3ef 8311 	mrs	r3, BASEPRI
   24004:	f382 8811 	msr	BASEPRI, r2
   24008:	f3bf 8f6f 	isb	sy
   2400c:	e7d3      	b.n	23fb6 <k_heap_alloc+0x2e>

0002400e <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   2400e:	b538      	push	{r3, r4, r5, lr}
   24010:	4604      	mov	r4, r0
   24012:	f04f 0320 	mov.w	r3, #32
   24016:	f3ef 8511 	mrs	r5, BASEPRI
   2401a:	f383 8811 	msr	BASEPRI, r3
   2401e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   24022:	f7fb fab2 	bl	1f58a <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   24026:	f104 000c 	add.w	r0, r4, #12
   2402a:	f000 fa05 	bl	24438 <z_unpend_all>
   2402e:	b130      	cbz	r0, 2403e <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   24030:	4629      	mov	r1, r5
   24032:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   24036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2403a:	f7f9 bfc9 	b.w	1dfd0 <z_reschedule>
	__asm__ volatile(
   2403e:	f385 8811 	msr	BASEPRI, r5
   24042:	f3bf 8f6f 	isb	sy
}
   24046:	bd38      	pop	{r3, r4, r5, pc}

00024048 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   24048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2404a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
	block->id.heap = p->heap;
   2404e:	6800      	ldr	r0, [r0, #0]
   24050:	6048      	str	r0, [r1, #4]
{
   24052:	4614      	mov	r4, r2
   24054:	460d      	mov	r5, r1
	block->data = k_heap_alloc(p->heap, size, timeout);
   24056:	4632      	mov	r2, r6
   24058:	463b      	mov	r3, r7
   2405a:	4621      	mov	r1, r4
   2405c:	f7ff ff94 	bl	23f88 <k_heap_alloc>
   24060:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   24062:	b144      	cbz	r4, 24076 <k_mem_pool_alloc+0x2e>
   24064:	b938      	cbnz	r0, 24076 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   24066:	ea56 0307 	orrs.w	r3, r6, r7
   2406a:	bf0c      	ite	eq
   2406c:	f06f 000b 	mvneq.w	r0, #11
   24070:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   24074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   24076:	2000      	movs	r0, #0
   24078:	e7fc      	b.n	24074 <k_mem_pool_alloc+0x2c>

0002407a <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   2407a:	e9d0 1000 	ldrd	r1, r0, [r0]
   2407e:	f7ff bfc6 	b.w	2400e <k_heap_free>

00024082 <k_mem_slab_init>:
{
   24082:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   24084:	2400      	movs	r4, #0
   24086:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   24088:	ea41 0402 	orr.w	r4, r1, r2
   2408c:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   24090:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   24094:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   24096:	d10c      	bne.n	240b2 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   24098:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2409a:	42a3      	cmp	r3, r4
   2409c:	d103      	bne.n	240a6 <k_mem_slab_init+0x24>
   2409e:	e9c0 0000 	strd	r0, r0, [r0]
}
   240a2:	2000      	movs	r0, #0
}
   240a4:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   240a6:	6945      	ldr	r5, [r0, #20]
   240a8:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   240aa:	3401      	adds	r4, #1
		slab->free_list = p;
   240ac:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   240ae:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   240b0:	e7f3      	b.n	2409a <k_mem_slab_init+0x18>
		return -EINVAL;
   240b2:	f06f 0015 	mvn.w	r0, #21
	return rc;
   240b6:	e7f5      	b.n	240a4 <k_mem_slab_init+0x22>

000240b8 <z_impl_k_mutex_init>:
{
   240b8:	4603      	mov	r3, r0
	mutex->owner = NULL;
   240ba:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   240bc:	e9c3 0002 	strd	r0, r0, [r3, #8]
   240c0:	e9c3 3300 	strd	r3, r3, [r3]
}
   240c4:	4770      	bx	lr

000240c6 <queue_insert>:
{
   240c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   240ca:	4699      	mov	r9, r3
   240cc:	4604      	mov	r4, r0
   240ce:	f89d 3020 	ldrb.w	r3, [sp, #32]
   240d2:	460d      	mov	r5, r1
   240d4:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   240d6:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   240da:	f04f 0220 	mov.w	r2, #32
   240de:	f3ef 8711 	mrs	r7, BASEPRI
   240e2:	f382 8811 	msr	BASEPRI, r2
   240e6:	f3bf 8f6f 	isb	sy
	if (is_append) {
   240ea:	b103      	cbz	r3, 240ee <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   240ec:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   240ee:	4630      	mov	r0, r6
   240f0:	f000 f97d 	bl	243ee <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   240f4:	b160      	cbz	r0, 24110 <queue_insert+0x4a>
   240f6:	2400      	movs	r4, #0
   240f8:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
   240fc:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   24100:	f000 f91a 	bl	24338 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   24104:	4630      	mov	r0, r6
   24106:	4639      	mov	r1, r7
   24108:	f7f9 ff62 	bl	1dfd0 <z_reschedule>
	return 0;
   2410c:	2000      	movs	r0, #0
   2410e:	e00c      	b.n	2412a <queue_insert+0x64>
	if (alloc) {
   24110:	f1b9 0f00 	cmp.w	r9, #0
   24114:	d01b      	beq.n	2414e <queue_insert+0x88>
		anode = z_thread_malloc(sizeof(*anode));
   24116:	2008      	movs	r0, #8
   24118:	f7fa fee4 	bl	1eee4 <z_thread_malloc>
		if (anode == NULL) {
   2411c:	b938      	cbnz	r0, 2412e <queue_insert+0x68>
	__asm__ volatile(
   2411e:	f387 8811 	msr	BASEPRI, r7
   24122:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   24126:	f06f 000b 	mvn.w	r0, #11
}
   2412a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2412e:	2301      	movs	r3, #1
		anode->data = data;
   24130:	f8c0 8004 	str.w	r8, [r0, #4]
   24134:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   24136:	6803      	ldr	r3, [r0, #0]
   24138:	f003 0203 	and.w	r2, r3, #3
   2413c:	b95d      	cbnz	r5, 24156 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2413e:	6823      	ldr	r3, [r4, #0]
   24140:	4313      	orrs	r3, r2
   24142:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   24144:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   24146:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   24148:	b973      	cbnz	r3, 24168 <queue_insert+0xa2>
	list->tail = node;
   2414a:	6060      	str	r0, [r4, #4]
}
   2414c:	e00c      	b.n	24168 <queue_insert+0xa2>
	node->next_and_flags = flags;
   2414e:	f8c8 9000 	str.w	r9, [r8]
}
   24152:	4640      	mov	r0, r8
   24154:	e7ef      	b.n	24136 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24156:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   24158:	f033 0303 	bics.w	r3, r3, #3
   2415c:	d110      	bne.n	24180 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2415e:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   24160:	6862      	ldr	r2, [r4, #4]
   24162:	b93a      	cbnz	r2, 24174 <queue_insert+0xae>
	list->head = node;
   24164:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   24168:	2104      	movs	r1, #4
   2416a:	f104 0010 	add.w	r0, r4, #16
   2416e:	f000 fbeb 	bl	24948 <z_handle_obj_poll_events>
   24172:	e7c7      	b.n	24104 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24174:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24176:	f003 0303 	and.w	r3, r3, #3
   2417a:	4303      	orrs	r3, r0
   2417c:	6013      	str	r3, [r2, #0]
   2417e:	e7e4      	b.n	2414a <queue_insert+0x84>
   24180:	4313      	orrs	r3, r2
   24182:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24184:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24186:	f003 0303 	and.w	r3, r3, #3
   2418a:	4303      	orrs	r3, r0
   2418c:	602b      	str	r3, [r5, #0]
}
   2418e:	e7eb      	b.n	24168 <queue_insert+0xa2>

00024190 <z_queue_node_peek>:
{
   24190:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   24192:	4604      	mov	r4, r0
   24194:	b130      	cbz	r0, 241a4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24196:	6802      	ldr	r2, [r0, #0]
   24198:	0793      	lsls	r3, r2, #30
   2419a:	d003      	beq.n	241a4 <z_queue_node_peek+0x14>
		ret = anode->data;
   2419c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2419e:	b109      	cbz	r1, 241a4 <z_queue_node_peek+0x14>
			k_free(anode);
   241a0:	f000 fbfa 	bl	24998 <k_free>
}
   241a4:	4620      	mov	r0, r4
   241a6:	bd10      	pop	{r4, pc}

000241a8 <z_impl_k_queue_init>:
	list->head = NULL;
   241a8:	2300      	movs	r3, #0
	list->tail = NULL;
   241aa:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   241ae:	f100 0308 	add.w	r3, r0, #8
   241b2:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   241b6:	f100 0310 	add.w	r3, r0, #16
   241ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   241be:	4770      	bx	lr

000241c0 <k_queue_append>:
{
   241c0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   241c2:	2301      	movs	r3, #1
   241c4:	9300      	str	r3, [sp, #0]
   241c6:	2300      	movs	r3, #0
{
   241c8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   241ca:	4619      	mov	r1, r3
   241cc:	f7ff ff7b 	bl	240c6 <queue_insert>
}
   241d0:	b003      	add	sp, #12
   241d2:	f85d fb04 	ldr.w	pc, [sp], #4

000241d6 <k_queue_prepend>:
{
   241d6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   241d8:	2300      	movs	r3, #0
{
   241da:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   241dc:	9300      	str	r3, [sp, #0]
   241de:	4619      	mov	r1, r3
   241e0:	f7ff ff71 	bl	240c6 <queue_insert>
}
   241e4:	b003      	add	sp, #12
   241e6:	f85d fb04 	ldr.w	pc, [sp], #4

000241ea <k_queue_append_list>:
{
   241ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   241ee:	4605      	mov	r5, r0
   241f0:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   241f2:	460c      	mov	r4, r1
   241f4:	b391      	cbz	r1, 2425c <k_queue_append_list+0x72>
   241f6:	b38a      	cbz	r2, 2425c <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   241f8:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   241fc:	f04f 0320 	mov.w	r3, #32
   24200:	f3ef 8811 	mrs	r8, BASEPRI
   24204:	f383 8811 	msr	BASEPRI, r3
   24208:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2420c:	4638      	mov	r0, r7
   2420e:	f000 f8ee 	bl	243ee <z_unpend_first_thread>
   24212:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   24216:	b920      	cbnz	r0, 24222 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   24218:	686b      	ldr	r3, [r5, #4]
   2421a:	b9cb      	cbnz	r3, 24250 <k_queue_append_list+0x66>
	list->head = node;
   2421c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2421e:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   24220:	e00a      	b.n	24238 <k_queue_append_list+0x4e>
   24222:	6144      	str	r4, [r0, #20]
   24224:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
	z_ready_thread(thread);
   24228:	f000 f886 	bl	24338 <z_ready_thread>
		head = *(void **)head;
   2422c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2422e:	4638      	mov	r0, r7
   24230:	f000 f8dd 	bl	243ee <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   24234:	2c00      	cmp	r4, #0
   24236:	d1ee      	bne.n	24216 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   24238:	2104      	movs	r1, #4
   2423a:	f105 0010 	add.w	r0, r5, #16
   2423e:	f000 fb83 	bl	24948 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   24242:	4638      	mov	r0, r7
   24244:	4641      	mov	r1, r8
   24246:	f7f9 fec3 	bl	1dfd0 <z_reschedule>
	return 0;
   2424a:	2000      	movs	r0, #0
}
   2424c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24250:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24252:	f001 0103 	and.w	r1, r1, #3
   24256:	430c      	orrs	r4, r1
   24258:	601c      	str	r4, [r3, #0]
}
   2425a:	e7e0      	b.n	2421e <k_queue_append_list+0x34>
		return -EINVAL;
   2425c:	f06f 0015 	mvn.w	r0, #21
   24260:	e7f4      	b.n	2424c <k_queue_append_list+0x62>

00024262 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   24262:	f990 000e 	ldrsb.w	r0, [r0, #14]
   24266:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   2426a:	4298      	cmp	r0, r3
   2426c:	bfac      	ite	ge
   2426e:	2000      	movge	r0, #0
   24270:	2001      	movlt	r0, #1
   24272:	4770      	bx	lr

00024274 <z_find_first_thread_to_unpend>:
{
   24274:	b510      	push	{r4, lr}
   24276:	f04f 0320 	mov.w	r3, #32
   2427a:	f3ef 8411 	mrs	r4, BASEPRI
   2427e:	f383 8811 	msr	BASEPRI, r3
   24282:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   24286:	f000 f84d 	bl	24324 <z_priq_dumb_best>
	__asm__ volatile(
   2428a:	f384 8811 	msr	BASEPRI, r4
   2428e:	f3bf 8f6f 	isb	sy
}
   24292:	bd10      	pop	{r4, pc}

00024294 <z_unpend_thread_no_timeout>:
{
   24294:	b510      	push	{r4, lr}
	__asm__ volatile(
   24296:	f04f 0320 	mov.w	r3, #32
   2429a:	f3ef 8411 	mrs	r4, BASEPRI
   2429e:	f383 8811 	msr	BASEPRI, r3
   242a2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   242a6:	f000 f81b 	bl	242e0 <unpend_thread_no_timeout>
	__asm__ volatile(
   242aa:	f384 8811 	msr	BASEPRI, r4
   242ae:	f3bf 8f6f 	isb	sy
}
   242b2:	bd10      	pop	{r4, pc}

000242b4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   242b4:	4603      	mov	r3, r0
   242b6:	b920      	cbnz	r0, 242c2 <z_reschedule_irqlock+0xe>
   242b8:	f3ef 8205 	mrs	r2, IPSR
   242bc:	b90a      	cbnz	r2, 242c2 <z_reschedule_irqlock+0xe>
   242be:	f7e3 b9ef 	b.w	76a0 <arch_swap>
   242c2:	f383 8811 	msr	BASEPRI, r3
   242c6:	f3bf 8f6f 	isb	sy
}
   242ca:	4770      	bx	lr

000242cc <z_reschedule_unlocked>:
	__asm__ volatile(
   242cc:	f04f 0320 	mov.w	r3, #32
   242d0:	f3ef 8011 	mrs	r0, BASEPRI
   242d4:	f383 8811 	msr	BASEPRI, r3
   242d8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   242dc:	f7ff bfea 	b.w	242b4 <z_reschedule_irqlock>

000242e0 <unpend_thread_no_timeout>:
{
   242e0:	4601      	mov	r1, r0
   242e2:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   242e4:	6880      	ldr	r0, [r0, #8]
   242e6:	f7f9 fe99 	bl	1e01c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   242ea:	7b4b      	ldrb	r3, [r1, #13]
   242ec:	f023 0302 	bic.w	r3, r3, #2
   242f0:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   242f2:	2300      	movs	r3, #0
   242f4:	608b      	str	r3, [r1, #8]
}
   242f6:	bd08      	pop	{r3, pc}

000242f8 <z_unpend_thread>:
{
   242f8:	b538      	push	{r3, r4, r5, lr}
   242fa:	4604      	mov	r4, r0
   242fc:	f04f 0320 	mov.w	r3, #32
   24300:	f3ef 8511 	mrs	r5, BASEPRI
   24304:	f383 8811 	msr	BASEPRI, r3
   24308:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2430c:	f7ff ffe8 	bl	242e0 <unpend_thread_no_timeout>
	__asm__ volatile(
   24310:	f385 8811 	msr	BASEPRI, r5
   24314:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   24318:	f104 0018 	add.w	r0, r4, #24
}
   2431c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24320:	f000 b931 	b.w	24586 <z_abort_timeout>

00024324 <z_priq_dumb_best>:
{
   24324:	4603      	mov	r3, r0
	return list->head == list;
   24326:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24328:	4283      	cmp	r3, r0
   2432a:	d003      	beq.n	24334 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2432c:	2800      	cmp	r0, #0
   2432e:	bf38      	it	cc
   24330:	2000      	movcc	r0, #0
   24332:	4770      	bx	lr
	struct k_thread *thread = NULL;
   24334:	2000      	movs	r0, #0
}
   24336:	4770      	bx	lr

00024338 <z_ready_thread>:
{
   24338:	b510      	push	{r4, lr}
	__asm__ volatile(
   2433a:	f04f 0320 	mov.w	r3, #32
   2433e:	f3ef 8411 	mrs	r4, BASEPRI
   24342:	f383 8811 	msr	BASEPRI, r3
   24346:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   2434a:	f7f9 fec1 	bl	1e0d0 <ready_thread>
	__asm__ volatile(
   2434e:	f384 8811 	msr	BASEPRI, r4
   24352:	f3bf 8f6f 	isb	sy
}
   24356:	bd10      	pop	{r4, pc}

00024358 <z_thread_timeout>:
{
   24358:	b570      	push	{r4, r5, r6, lr}
   2435a:	4604      	mov	r4, r0
	__asm__ volatile(
   2435c:	f04f 0320 	mov.w	r3, #32
   24360:	f3ef 8611 	mrs	r6, BASEPRI
   24364:	f383 8811 	msr	BASEPRI, r3
   24368:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   2436c:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   24370:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   24374:	b113      	cbz	r3, 2437c <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   24376:	4628      	mov	r0, r5
   24378:	f7ff ffb2 	bl	242e0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2437c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   24380:	f023 0314 	bic.w	r3, r3, #20
   24384:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   24388:	4628      	mov	r0, r5
   2438a:	f7f9 fea1 	bl	1e0d0 <ready_thread>
	__asm__ volatile(
   2438e:	f386 8811 	msr	BASEPRI, r6
   24392:	f3bf 8f6f 	isb	sy
}
   24396:	bd70      	pop	{r4, r5, r6, pc}

00024398 <add_to_waitq_locked>:
{
   24398:	b538      	push	{r3, r4, r5, lr}
   2439a:	4604      	mov	r4, r0
   2439c:	460d      	mov	r5, r1
	unready_thread(thread);
   2439e:	f7fa f81f 	bl	1e3e0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   243a2:	7b63      	ldrb	r3, [r4, #13]
   243a4:	f043 0302 	orr.w	r3, r3, #2
   243a8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   243aa:	b1c5      	cbz	r5, 243de <add_to_waitq_locked+0x46>
	return list->head == list;
   243ac:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   243ae:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   243b0:	429d      	cmp	r5, r3
   243b2:	bf08      	it	eq
   243b4:	2300      	moveq	r3, #0
   243b6:	2b00      	cmp	r3, #0
   243b8:	bf38      	it	cc
   243ba:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   243bc:	b183      	cbz	r3, 243e0 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   243be:	f994 100e 	ldrsb.w	r1, [r4, #14]
   243c2:	f993 200e 	ldrsb.w	r2, [r3, #14]
   243c6:	4291      	cmp	r1, r2
   243c8:	db04      	blt.n	243d4 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   243ca:	686a      	ldr	r2, [r5, #4]
   243cc:	429a      	cmp	r2, r3
   243ce:	d007      	beq.n	243e0 <add_to_waitq_locked+0x48>
   243d0:	681b      	ldr	r3, [r3, #0]
   243d2:	e7f3      	b.n	243bc <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   243d4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   243d6:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   243da:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   243dc:	605c      	str	r4, [r3, #4]
}
   243de:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   243e0:	686b      	ldr	r3, [r5, #4]
   243e2:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   243e4:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   243e6:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   243e8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   243ea:	606c      	str	r4, [r5, #4]
   243ec:	e7f7      	b.n	243de <add_to_waitq_locked+0x46>

000243ee <z_unpend_first_thread>:
{
   243ee:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   243f0:	f04f 0320 	mov.w	r3, #32
   243f4:	f3ef 8211 	mrs	r2, BASEPRI
   243f8:	f383 8811 	msr	BASEPRI, r3
   243fc:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   24400:	f7ff ff90 	bl	24324 <z_priq_dumb_best>
   24404:	4604      	mov	r4, r0
	__asm__ volatile(
   24406:	f382 8811 	msr	BASEPRI, r2
   2440a:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   2440e:	b188      	cbz	r0, 24434 <z_unpend_first_thread+0x46>
	__asm__ volatile(
   24410:	f04f 0320 	mov.w	r3, #32
   24414:	f3ef 8511 	mrs	r5, BASEPRI
   24418:	f383 8811 	msr	BASEPRI, r3
   2441c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   24420:	f7ff ff5e 	bl	242e0 <unpend_thread_no_timeout>
	__asm__ volatile(
   24424:	f385 8811 	msr	BASEPRI, r5
   24428:	f3bf 8f6f 	isb	sy
   2442c:	f104 0018 	add.w	r0, r4, #24
   24430:	f000 f8a9 	bl	24586 <z_abort_timeout>
}
   24434:	4620      	mov	r0, r4
   24436:	bd38      	pop	{r3, r4, r5, pc}

00024438 <z_unpend_all>:
{
   24438:	b538      	push	{r3, r4, r5, lr}
   2443a:	4605      	mov	r5, r0
	int need_sched = 0;
   2443c:	2000      	movs	r0, #0
	return list->head == list;
   2443e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24440:	42a5      	cmp	r5, r4
   24442:	d000      	beq.n	24446 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   24444:	b904      	cbnz	r4, 24448 <z_unpend_all+0x10>
}
   24446:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   24448:	4620      	mov	r0, r4
   2444a:	f7ff ff55 	bl	242f8 <z_unpend_thread>
		z_ready_thread(thread);
   2444e:	4620      	mov	r0, r4
   24450:	f7ff ff72 	bl	24338 <z_ready_thread>
		need_sched = 1;
   24454:	2001      	movs	r0, #1
   24456:	e7f2      	b.n	2443e <z_unpend_all+0x6>

00024458 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   24458:	b15a      	cbz	r2, 24472 <z_impl_k_sem_init+0x1a>
   2445a:	428a      	cmp	r2, r1
   2445c:	d309      	bcc.n	24472 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2445e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   24462:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   24466:	e9c0 0000 	strd	r0, r0, [r0]
   2446a:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2446e:	2000      	movs	r0, #0
   24470:	4770      	bx	lr
		return -EINVAL;
   24472:	f06f 0015 	mvn.w	r0, #21
}
   24476:	4770      	bx	lr

00024478 <k_is_in_isr>:
   24478:	f3ef 8005 	mrs	r0, IPSR
}
   2447c:	3800      	subs	r0, #0
   2447e:	bf18      	it	ne
   24480:	2001      	movne	r0, #1
   24482:	4770      	bx	lr

00024484 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   24484:	b108      	cbz	r0, 2448a <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   24486:	f7e3 be29 	b.w	80dc <arch_busy_wait>
}
   2448a:	4770      	bx	lr

0002448c <z_impl_k_thread_name_set>:
}
   2448c:	f06f 0046 	mvn.w	r0, #70	; 0x46
   24490:	4770      	bx	lr

00024492 <k_thread_name_get>:
}
   24492:	2000      	movs	r0, #0
   24494:	4770      	bx	lr

00024496 <k_work_submit_to_queue>:
{
   24496:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24498:	f101 0308 	add.w	r3, r1, #8
   2449c:	f3bf 8f5b 	dmb	ish
   244a0:	e853 2f00 	ldrex	r2, [r3]
   244a4:	f042 0c01 	orr.w	ip, r2, #1
   244a8:	e843 ce00 	strex	lr, ip, [r3]
   244ac:	f1be 0f00 	cmp.w	lr, #0
   244b0:	d1f6      	bne.n	244a0 <k_work_submit_to_queue+0xa>
   244b2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   244b6:	07d3      	lsls	r3, r2, #31
   244b8:	d403      	bmi.n	244c2 <k_work_submit_to_queue+0x2c>
}
   244ba:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   244be:	f7ff be7f 	b.w	241c0 <k_queue_append>
}
   244c2:	f85d fb04 	ldr.w	pc, [sp], #4

000244c6 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   244c6:	f1a0 0110 	sub.w	r1, r0, #16
   244ca:	6980      	ldr	r0, [r0, #24]
   244cc:	f7ff bfe3 	b.w	24496 <k_work_submit_to_queue>

000244d0 <work_cancel>:
{
   244d0:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   244d2:	f3bf 8f5b 	dmb	ish
   244d6:	6883      	ldr	r3, [r0, #8]
   244d8:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   244dc:	07db      	lsls	r3, r3, #31
{
   244de:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   244e0:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   244e4:	d532      	bpl.n	2454c <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   244e6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   244e8:	6813      	ldr	r3, [r2, #0]
   244ea:	2100      	movs	r1, #0
   244ec:	b913      	cbnz	r3, 244f4 <work_cancel+0x24>
			return -EINVAL;
   244ee:	f06f 0015 	mvn.w	r0, #21
}
   244f2:	bd70      	pop	{r4, r5, r6, pc}
   244f4:	429c      	cmp	r4, r3
   244f6:	d124      	bne.n	24542 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   244f8:	6823      	ldr	r3, [r4, #0]
   244fa:	6856      	ldr	r6, [r2, #4]
   244fc:	f023 0003 	bic.w	r0, r3, #3
   24500:	b9b1      	cbnz	r1, 24530 <work_cancel+0x60>
   24502:	42b4      	cmp	r4, r6
	list->head = node;
   24504:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   24506:	d100      	bne.n	2450a <work_cancel+0x3a>
	list->tail = node;
   24508:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2450a:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2450c:	f003 0303 	and.w	r3, r3, #3
   24510:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   24512:	2000      	movs	r0, #0
   24514:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24516:	f3bf 8f5b 	dmb	ish
   2451a:	e855 3f00 	ldrex	r3, [r5]
   2451e:	f023 0301 	bic.w	r3, r3, #1
   24522:	e845 3200 	strex	r2, r3, [r5]
   24526:	2a00      	cmp	r2, #0
   24528:	d1f7      	bne.n	2451a <work_cancel+0x4a>
   2452a:	f3bf 8f5b 	dmb	ish
   2452e:	e7e0      	b.n	244f2 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24530:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24532:	f003 0303 	and.w	r3, r3, #3
   24536:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   24538:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2453a:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2453c:	bf08      	it	eq
   2453e:	6051      	streq	r1, [r2, #4]
}
   24540:	e7e3      	b.n	2450a <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24542:	6818      	ldr	r0, [r3, #0]
   24544:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   24546:	f020 0303 	bic.w	r3, r0, #3
   2454a:	e7cf      	b.n	244ec <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   2454c:	3010      	adds	r0, #16
   2454e:	f000 f81a 	bl	24586 <z_abort_timeout>
		if (err) {
   24552:	2800      	cmp	r0, #0
   24554:	d0dd      	beq.n	24512 <work_cancel+0x42>
			return -EALREADY;
   24556:	f06f 0044 	mvn.w	r0, #68	; 0x44
   2455a:	e7ca      	b.n	244f2 <work_cancel+0x22>

0002455c <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   2455c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2455e:	f04f 0220 	mov.w	r2, #32
   24562:	f3ef 8411 	mrs	r4, BASEPRI
   24566:	f382 8811 	msr	BASEPRI, r2
   2456a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   2456e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   24570:	b133      	cbz	r3, 24580 <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   24572:	f7ff ffad 	bl	244d0 <work_cancel>
	__asm__ volatile(
   24576:	f384 8811 	msr	BASEPRI, r4
   2457a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   2457e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   24580:	f06f 0015 	mvn.w	r0, #21
   24584:	e7f7      	b.n	24576 <k_delayed_work_cancel+0x1a>

00024586 <z_abort_timeout>:
{
   24586:	b510      	push	{r4, lr}
	__asm__ volatile(
   24588:	f04f 0220 	mov.w	r2, #32
   2458c:	f3ef 8411 	mrs	r4, BASEPRI
   24590:	f382 8811 	msr	BASEPRI, r2
   24594:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   24598:	6803      	ldr	r3, [r0, #0]
   2459a:	b13b      	cbz	r3, 245ac <z_abort_timeout+0x26>
			remove_timeout(to);
   2459c:	f7fa fa42 	bl	1ea24 <remove_timeout>
			ret = 0;
   245a0:	2000      	movs	r0, #0
	__asm__ volatile(
   245a2:	f384 8811 	msr	BASEPRI, r4
   245a6:	f3bf 8f6f 	isb	sy
}
   245aa:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   245ac:	f06f 0015 	mvn.w	r0, #21
   245b0:	e7f7      	b.n	245a2 <z_abort_timeout+0x1c>

000245b2 <z_get_next_timeout_expiry>:
{
   245b2:	b510      	push	{r4, lr}
	__asm__ volatile(
   245b4:	f04f 0320 	mov.w	r3, #32
   245b8:	f3ef 8411 	mrs	r4, BASEPRI
   245bc:	f383 8811 	msr	BASEPRI, r3
   245c0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   245c4:	f7fa fa48 	bl	1ea58 <next_timeout>
	__asm__ volatile(
   245c8:	f384 8811 	msr	BASEPRI, r4
   245cc:	f3bf 8f6f 	isb	sy
}
   245d0:	bd10      	pop	{r4, pc}

000245d2 <z_set_timeout_expiry>:
{
   245d2:	b570      	push	{r4, r5, r6, lr}
   245d4:	4604      	mov	r4, r0
   245d6:	460d      	mov	r5, r1
	__asm__ volatile(
   245d8:	f04f 0320 	mov.w	r3, #32
   245dc:	f3ef 8611 	mrs	r6, BASEPRI
   245e0:	f383 8811 	msr	BASEPRI, r3
   245e4:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   245e8:	f7fa fa36 	bl	1ea58 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   245ec:	2801      	cmp	r0, #1
   245ee:	dd05      	ble.n	245fc <z_set_timeout_expiry+0x2a>
   245f0:	42a0      	cmp	r0, r4
   245f2:	dd03      	ble.n	245fc <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   245f4:	4629      	mov	r1, r5
   245f6:	4620      	mov	r0, r4
   245f8:	f7e2 fdd4 	bl	71a4 <z_clock_set_timeout>
	__asm__ volatile(
   245fc:	f386 8811 	msr	BASEPRI, r6
   24600:	f3bf 8f6f 	isb	sy
}
   24604:	bd70      	pop	{r4, r5, r6, pc}

00024606 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   24606:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   24608:	f7fa fb46 	bl	1ec98 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2460c:	bd08      	pop	{r3, pc}

0002460e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   2460e:	f7fa bb43 	b.w	1ec98 <z_tick_get>

00024612 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   24612:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24614:	1c4b      	adds	r3, r1, #1
   24616:	bf08      	it	eq
   24618:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2461c:	4604      	mov	r4, r0
   2461e:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24620:	d013      	beq.n	2464a <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24622:	ea54 0105 	orrs.w	r1, r4, r5
   24626:	d103      	bne.n	24630 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   24628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   2462c:	f7fa bb34 	b.w	1ec98 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   24630:	f06f 0101 	mvn.w	r1, #1
   24634:	1a0a      	subs	r2, r1, r0
   24636:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2463a:	eb61 0305 	sbc.w	r3, r1, r5
   2463e:	2a00      	cmp	r2, #0
   24640:	f173 0100 	sbcs.w	r1, r3, #0
   24644:	db02      	blt.n	2464c <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   24646:	4610      	mov	r0, r2
   24648:	4619      	mov	r1, r3
}
   2464a:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   2464c:	f7fa fb24 	bl	1ec98 <z_tick_get>
   24650:	2c01      	cmp	r4, #1
   24652:	f175 0300 	sbcs.w	r3, r5, #0
   24656:	bfbc      	itt	lt
   24658:	2401      	movlt	r4, #1
   2465a:	2500      	movlt	r5, #0
   2465c:	1820      	adds	r0, r4, r0
   2465e:	eb45 0101 	adc.w	r1, r5, r1
   24662:	e7f2      	b.n	2464a <z_timeout_end_calc+0x38>

00024664 <k_timer_init>:
	timer->status = 0U;
   24664:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   24666:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2466a:	f100 0218 	add.w	r2, r0, #24
   2466e:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   24672:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   24676:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   24678:	6343      	str	r3, [r0, #52]	; 0x34
}
   2467a:	4770      	bx	lr

0002467c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2467c:	b510      	push	{r4, lr}
   2467e:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   24680:	f7ff ff81 	bl	24586 <z_abort_timeout>

	if (inactive) {
   24684:	b9d8      	cbnz	r0, 246be <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   24686:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24688:	b10b      	cbz	r3, 2468e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2468a:	4620      	mov	r0, r4
   2468c:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   2468e:	f104 0018 	add.w	r0, r4, #24
   24692:	2100      	movs	r1, #0
   24694:	f7ff fdee 	bl	24274 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   24698:	4604      	mov	r4, r0
   2469a:	b180      	cbz	r0, 246be <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   2469c:	f7ff fdfa 	bl	24294 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   246a0:	4620      	mov	r0, r4
   246a2:	f7ff fe49 	bl	24338 <z_ready_thread>
	__asm__ volatile(
   246a6:	f04f 0320 	mov.w	r3, #32
   246aa:	f3ef 8011 	mrs	r0, BASEPRI
   246ae:	f383 8811 	msr	BASEPRI, r3
   246b2:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   246b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   246ba:	f7ff bdfb 	b.w	242b4 <z_reschedule_irqlock>
   246be:	bd10      	pop	{r4, pc}

000246c0 <clear_event_registrations>:
	while (num_events--) {
   246c0:	2314      	movs	r3, #20
{
   246c2:	b530      	push	{r4, r5, lr}
   246c4:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   246c8:	2400      	movs	r4, #0
	while (num_events--) {
   246ca:	4281      	cmp	r1, r0
   246cc:	d100      	bne.n	246d0 <clear_event_registrations+0x10>
}
   246ce:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   246d0:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   246d4:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   246d8:	f003 030f 	and.w	r3, r3, #15
   246dc:	2b02      	cmp	r3, #2
   246de:	d80a      	bhi.n	246f6 <clear_event_registrations+0x36>
   246e0:	b15b      	cbz	r3, 246fa <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   246e2:	f851 3c14 	ldr.w	r3, [r1, #-20]
   246e6:	b143      	cbz	r3, 246fa <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   246e8:	f851 5c10 	ldr.w	r5, [r1, #-16]
   246ec:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   246ee:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   246f0:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   246f4:	e001      	b.n	246fa <clear_event_registrations+0x3a>
	switch (event->type) {
   246f6:	2b04      	cmp	r3, #4
   246f8:	d0f3      	beq.n	246e2 <clear_event_registrations+0x22>
	__asm__ volatile(
   246fa:	f382 8811 	msr	BASEPRI, r2
   246fe:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   24702:	f04f 0320 	mov.w	r3, #32
   24706:	f3ef 8211 	mrs	r2, BASEPRI
   2470a:	f383 8811 	msr	BASEPRI, r3
   2470e:	f3bf 8f6f 	isb	sy
   24712:	3914      	subs	r1, #20
   24714:	e7d9      	b.n	246ca <clear_event_registrations+0xa>

00024716 <k_work_submit_to_queue>:
{
   24716:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24718:	f101 0308 	add.w	r3, r1, #8
   2471c:	f3bf 8f5b 	dmb	ish
   24720:	e853 2f00 	ldrex	r2, [r3]
   24724:	f042 0c01 	orr.w	ip, r2, #1
   24728:	e843 ce00 	strex	lr, ip, [r3]
   2472c:	f1be 0f00 	cmp.w	lr, #0
   24730:	d1f6      	bne.n	24720 <k_work_submit_to_queue+0xa>
   24732:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   24736:	07d3      	lsls	r3, r2, #31
   24738:	d403      	bmi.n	24742 <k_work_submit_to_queue+0x2c>
}
   2473a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2473e:	f7ff bd3f 	b.w	241c0 <k_queue_append>
}
   24742:	f85d fb04 	ldr.w	pc, [sp], #4

00024746 <signal_poll_event>:
{
   24746:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2474a:	6884      	ldr	r4, [r0, #8]
{
   2474c:	4605      	mov	r5, r0
   2474e:	460e      	mov	r6, r1
	if (poller) {
   24750:	b144      	cbz	r4, 24764 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   24752:	7863      	ldrb	r3, [r4, #1]
   24754:	2b01      	cmp	r3, #1
   24756:	d138      	bne.n	247ca <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   24758:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   2475c:	f013 0302 	ands.w	r3, r3, #2
   24760:	d10a      	bne.n	24778 <signal_poll_event+0x32>
		poller->is_polling = false;
   24762:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   24764:	68eb      	ldr	r3, [r5, #12]
   24766:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2476a:	430e      	orrs	r6, r1
	event->poller = NULL;
   2476c:	2000      	movs	r0, #0
	event->state |= state;
   2476e:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   24772:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   24774:	60eb      	str	r3, [r5, #12]
	return retcode;
   24776:	e00d      	b.n	24794 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   24778:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   2477c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   24780:	f06f 0001 	mvn.w	r0, #1
   24784:	428b      	cmp	r3, r1
   24786:	bf08      	it	eq
   24788:	4282      	cmpeq	r2, r0
   2478a:	d105      	bne.n	24798 <signal_poll_event+0x52>
		poller->is_polling = false;
   2478c:	2300      	movs	r3, #0
   2478e:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   24790:	f06f 000a 	mvn.w	r0, #10
}
   24794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   24798:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
   2479c:	4640      	mov	r0, r8
   2479e:	f7ff fdab 	bl	242f8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   247a2:	2e08      	cmp	r6, #8
   247a4:	bf0c      	ite	eq
   247a6:	f06f 0303 	mvneq.w	r3, #3
   247aa:	2300      	movne	r3, #0
   247ac:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   247ae:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   247b2:	06db      	lsls	r3, r3, #27
   247b4:	d102      	bne.n	247bc <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   247b6:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   247ba:	b10f      	cbz	r7, 247c0 <signal_poll_event+0x7a>
		poller->is_polling = false;
   247bc:	2300      	movs	r3, #0
   247be:	e7d0      	b.n	24762 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   247c0:	4640      	mov	r0, r8
   247c2:	f7ff fdb9 	bl	24338 <z_ready_thread>
		poller->is_polling = false;
   247c6:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   247c8:	e7cc      	b.n	24764 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   247ca:	2b02      	cmp	r3, #2
   247cc:	d1f6      	bne.n	247bc <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   247ce:	7823      	ldrb	r3, [r4, #0]
   247d0:	2b00      	cmp	r3, #0
   247d2:	d0c7      	beq.n	24764 <signal_poll_event+0x1e>
   247d4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   247d8:	2f00      	cmp	r7, #0
   247da:	d0f4      	beq.n	247c6 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   247dc:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   247e0:	f1a4 0910 	sub.w	r9, r4, #16
   247e4:	f104 0010 	add.w	r0, r4, #16
   247e8:	f7ff fecd 	bl	24586 <z_abort_timeout>
		twork->poll_result = 0;
   247ec:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   247f0:	4649      	mov	r1, r9
   247f2:	4638      	mov	r0, r7
   247f4:	f7ff ff8f 	bl	24716 <k_work_submit_to_queue>
		poller->is_polling = false;
   247f8:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   247fc:	e7b2      	b.n	24764 <signal_poll_event+0x1e>

000247fe <add_event>:
{
   247fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24800:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   24802:	e9d0 2300 	ldrd	r2, r3, [r0]
   24806:	4290      	cmp	r0, r2
   24808:	4604      	mov	r4, r0
   2480a:	460d      	mov	r5, r1
   2480c:	d106      	bne.n	2481c <add_event+0x1e>
	node->prev = list->tail;
   2480e:	6863      	ldr	r3, [r4, #4]
   24810:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   24812:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   24814:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   24816:	601d      	str	r5, [r3, #0]
	list->tail = node;
   24818:	6065      	str	r5, [r4, #4]
}
   2481a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2481c:	2b00      	cmp	r3, #0
   2481e:	d0f6      	beq.n	2480e <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   24820:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   24822:	b100      	cbz	r0, 24826 <add_event+0x28>
   24824:	3864      	subs	r0, #100	; 0x64
   24826:	b107      	cbz	r7, 2482a <add_event+0x2c>
   24828:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   2482a:	4639      	mov	r1, r7
   2482c:	f7ff fd19 	bl	24262 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   24830:	2800      	cmp	r0, #0
   24832:	d1ec      	bne.n	2480e <add_event+0x10>
	return list->head == list;
   24834:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24836:	42b4      	cmp	r4, r6
   24838:	d0e9      	beq.n	2480e <add_event+0x10>
   2483a:	2e00      	cmp	r6, #0
   2483c:	bf38      	it	cc
   2483e:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   24840:	2e00      	cmp	r6, #0
   24842:	d0e4      	beq.n	2480e <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   24844:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   24846:	b101      	cbz	r1, 2484a <add_event+0x4c>
   24848:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   2484a:	4638      	mov	r0, r7
   2484c:	f7ff fd09 	bl	24262 <z_is_t1_higher_prio_than_t2>
   24850:	b128      	cbz	r0, 2485e <add_event+0x60>
	node->prev = successor->prev;
   24852:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   24854:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   24858:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2485a:	6075      	str	r5, [r6, #4]
			return;
   2485c:	e7dd      	b.n	2481a <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2485e:	6863      	ldr	r3, [r4, #4]
   24860:	42b3      	cmp	r3, r6
   24862:	d0d4      	beq.n	2480e <add_event+0x10>
   24864:	6836      	ldr	r6, [r6, #0]
   24866:	e7eb      	b.n	24840 <add_event+0x42>

00024868 <register_events>:
{
   24868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2486c:	f04f 0a00 	mov.w	sl, #0
{
   24870:	460e      	mov	r6, r1
   24872:	4614      	mov	r4, r2
   24874:	461f      	mov	r7, r3
   24876:	4683      	mov	fp, r0
	int events_registered = 0;
   24878:	4655      	mov	r5, sl
	event->poller = NULL;
   2487a:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   2487c:	45b2      	cmp	sl, r6
   2487e:	db02      	blt.n	24886 <register_events+0x1e>
}
   24880:	4628      	mov	r0, r5
   24882:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24886:	f04f 0320 	mov.w	r3, #32
   2488a:	f3ef 8911 	mrs	r9, BASEPRI
   2488e:	f383 8811 	msr	BASEPRI, r3
   24892:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   24896:	f89b 200d 	ldrb.w	r2, [fp, #13]
   2489a:	f002 020f 	and.w	r2, r2, #15
   2489e:	2a02      	cmp	r2, #2
   248a0:	d006      	beq.n	248b0 <register_events+0x48>
   248a2:	2a04      	cmp	r2, #4
   248a4:	d008      	beq.n	248b8 <register_events+0x50>
   248a6:	2a01      	cmp	r2, #1
   248a8:	d120      	bne.n	248ec <register_events+0x84>
		if (event->signal->signaled != 0U) {
   248aa:	f8db 3010 	ldr.w	r3, [fp, #16]
   248ae:	e001      	b.n	248b4 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   248b0:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   248b4:	689b      	ldr	r3, [r3, #8]
   248b6:	e002      	b.n	248be <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   248b8:	f8db 3010 	ldr.w	r3, [fp, #16]
   248bc:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   248be:	b1ab      	cbz	r3, 248ec <register_events+0x84>
	event->state |= state;
   248c0:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   248c4:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   248c8:	f3c3 3104 	ubfx	r1, r3, #12, #5
   248cc:	430a      	orrs	r2, r1
   248ce:	f362 3310 	bfi	r3, r2, #12, #5
   248d2:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   248d6:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   248da:	f389 8811 	msr	BASEPRI, r9
   248de:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   248e2:	f10a 0a01 	add.w	sl, sl, #1
   248e6:	f10b 0b14 	add.w	fp, fp, #20
   248ea:	e7c7      	b.n	2487c <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   248ec:	2f00      	cmp	r7, #0
   248ee:	d1f4      	bne.n	248da <register_events+0x72>
   248f0:	7823      	ldrb	r3, [r4, #0]
   248f2:	2b00      	cmp	r3, #0
   248f4:	d0f1      	beq.n	248da <register_events+0x72>
	switch (event->type) {
   248f6:	f89b 300d 	ldrb.w	r3, [fp, #13]
   248fa:	f003 030f 	and.w	r3, r3, #15
   248fe:	2b02      	cmp	r3, #2
   24900:	d008      	beq.n	24914 <register_events+0xac>
   24902:	2b04      	cmp	r3, #4
   24904:	d006      	beq.n	24914 <register_events+0xac>
   24906:	2b01      	cmp	r3, #1
   24908:	d10b      	bne.n	24922 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   2490a:	f8db 0010 	ldr.w	r0, [fp, #16]
   2490e:	4622      	mov	r2, r4
   24910:	4659      	mov	r1, fp
   24912:	e004      	b.n	2491e <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   24914:	f8db 0010 	ldr.w	r0, [fp, #16]
   24918:	4622      	mov	r2, r4
   2491a:	4659      	mov	r1, fp
   2491c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   2491e:	f7ff ff6e 	bl	247fe <add_event>
	event->poller = poller;
   24922:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   24926:	3501      	adds	r5, #1
   24928:	e7d7      	b.n	248da <register_events+0x72>

0002492a <k_poll_event_init>:
{
   2492a:	b510      	push	{r4, lr}
	event->type = type;
   2492c:	0452      	lsls	r2, r2, #17
   2492e:	0209      	lsls	r1, r1, #8
   24930:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   24934:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   24938:	430a      	orrs	r2, r1
   2493a:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2493c:	2400      	movs	r4, #0
	event->type = type;
   2493e:	430a      	orrs	r2, r1
	event->obj = obj;
   24940:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   24944:	6084      	str	r4, [r0, #8]
}
   24946:	bd10      	pop	{r4, pc}

00024948 <z_handle_obj_poll_events>:
{
   24948:	4603      	mov	r3, r0
	return list->head == list;
   2494a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2494c:	4283      	cmp	r3, r0
   2494e:	d008      	beq.n	24962 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   24950:	e9d0 3200 	ldrd	r3, r2, [r0]
   24954:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   24956:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24958:	2300      	movs	r3, #0
	node->prev = NULL;
   2495a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2495e:	f7ff bef2 	b.w	24746 <signal_poll_event>
}
   24962:	4770      	bx	lr

00024964 <k_mem_pool_free>:
	k_mem_pool_free_id(&block->id);
   24964:	f7ff bb89 	b.w	2407a <k_mem_pool_free_id>

00024968 <k_mem_pool_malloc>:
{
   24968:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2496a:	2408      	movs	r4, #8
   2496c:	190a      	adds	r2, r1, r4
   2496e:	d208      	bcs.n	24982 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   24970:	2600      	movs	r6, #0
   24972:	2700      	movs	r7, #0
   24974:	e9cd 6700 	strd	r6, r7, [sp]
   24978:	eb0d 0104 	add.w	r1, sp, r4
   2497c:	f7ff fb64 	bl	24048 <k_mem_pool_alloc>
   24980:	b110      	cbz	r0, 24988 <k_mem_pool_malloc+0x20>
		return NULL;
   24982:	2000      	movs	r0, #0
}
   24984:	b004      	add	sp, #16
   24986:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   24988:	9802      	ldr	r0, [sp, #8]
   2498a:	4622      	mov	r2, r4
   2498c:	a902      	add	r1, sp, #8
   2498e:	f7fc fe8a 	bl	216a6 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   24992:	9802      	ldr	r0, [sp, #8]
   24994:	3008      	adds	r0, #8
   24996:	e7f5      	b.n	24984 <k_mem_pool_malloc+0x1c>

00024998 <k_free>:
	if (ptr != NULL) {
   24998:	b110      	cbz	r0, 249a0 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   2499a:	3808      	subs	r0, #8
   2499c:	f7ff bb6d 	b.w	2407a <k_mem_pool_free_id>
}
   249a0:	4770      	bx	lr

000249a2 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   249a2:	4770      	bx	lr
