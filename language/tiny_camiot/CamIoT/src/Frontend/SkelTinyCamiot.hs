-- Haskell module generated by the BNF converter

module SkelTinyCamiot where

import qualified AbsTinyCamiot

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsTinyCamiot.Ident -> Result
transIdent x = case x of
  AbsTinyCamiot.Ident string -> failure x
transUIdent :: AbsTinyCamiot.UIdent -> Result
transUIdent x = case x of
  AbsTinyCamiot.UIdent string -> failure x
transDef :: Show a => AbsTinyCamiot.Def a -> Result
transDef x = case x of
  AbsTinyCamiot.DEquation _ ident pats exp -> failure x
  AbsTinyCamiot.DTypeSig _ ident type_ -> failure x
  AbsTinyCamiot.DDataDec _ uident idents constructordecs -> failure x
transConstructorDec :: Show a => AbsTinyCamiot.ConstructorDec a -> Result
transConstructorDec x = case x of
  AbsTinyCamiot.ConstDec _ uident type_ -> failure x
transType :: Show a => AbsTinyCamiot.Type a -> Result
transType x = case x of
  AbsTinyCamiot.TLam _ type_1 type_2 -> failure x
  AbsTinyCamiot.TPair _ type_1 type_2 -> failure x
  AbsTinyCamiot.TVar _ ident -> failure x
  AbsTinyCamiot.TAdt _ uident types -> failure x
  AbsTinyCamiot.TInt _ -> failure x
  AbsTinyCamiot.TFloat _ -> failure x
  AbsTinyCamiot.TBool _ -> failure x
transTupExp :: Show a => AbsTinyCamiot.TupExp a -> Result
transTupExp x = case x of
  AbsTinyCamiot.ETupExp _ exp -> failure x
transExp :: Show a => AbsTinyCamiot.Exp a -> Result
transExp x = case x of
  AbsTinyCamiot.ETup _ tupexps -> failure x
  AbsTinyCamiot.ECase _ exp patmatchs -> failure x
  AbsTinyCamiot.ELet _ pat exp1 exp2 -> failure x
  AbsTinyCamiot.ELetR _ pat exp1 exp2 -> failure x
  AbsTinyCamiot.ELam _ pat exp -> failure x
  AbsTinyCamiot.EIf _ exp1 exp2 exp3 -> failure x
  AbsTinyCamiot.ECon _ con exps -> failure x
  AbsTinyCamiot.EApp _ exp1 exp2 -> failure x
  AbsTinyCamiot.EOr _ exp1 exp2 -> failure x
  AbsTinyCamiot.EAnd _ exp1 exp2 -> failure x
  AbsTinyCamiot.ERel _ exp1 relop exp2 -> failure x
  AbsTinyCamiot.EAdd _ exp1 addop exp2 -> failure x
  AbsTinyCamiot.EMul _ exp1 mulop exp2 -> failure x
  AbsTinyCamiot.ENot _ exp -> failure x
  AbsTinyCamiot.EVar _ ident -> failure x
  AbsTinyCamiot.EConst _ const -> failure x
  AbsTinyCamiot.ETyped _ exp type_ -> failure x
transAddOp :: Show a => AbsTinyCamiot.AddOp a -> Result
transAddOp x = case x of
  AbsTinyCamiot.Plus _ -> failure x
  AbsTinyCamiot.Minus _ -> failure x
transMulOp :: Show a => AbsTinyCamiot.MulOp a -> Result
transMulOp x = case x of
  AbsTinyCamiot.Times _ -> failure x
  AbsTinyCamiot.Div _ -> failure x
transRelOp :: Show a => AbsTinyCamiot.RelOp a -> Result
transRelOp x = case x of
  AbsTinyCamiot.LTC _ -> failure x
  AbsTinyCamiot.LEC _ -> failure x
  AbsTinyCamiot.GTC _ -> failure x
  AbsTinyCamiot.GEC _ -> failure x
  AbsTinyCamiot.EQC _ -> failure x
transCon :: Show a => AbsTinyCamiot.Con a -> Result
transCon x = case x of
  AbsTinyCamiot.Constructor _ uident -> failure x
transConst :: Show a => AbsTinyCamiot.Const a -> Result
transConst x = case x of
  AbsTinyCamiot.CInt _ integer -> failure x
  AbsTinyCamiot.CFloat _ double -> failure x
  AbsTinyCamiot.CTrue _ -> failure x
  AbsTinyCamiot.CFalse _ -> failure x
  AbsTinyCamiot.CNil _ -> failure x
transPat :: Show a => AbsTinyCamiot.Pat a -> Result
transPat x = case x of
  AbsTinyCamiot.PConst _ const -> failure x
  AbsTinyCamiot.PVar _ ident -> failure x
  AbsTinyCamiot.PAdt _ uident pats -> failure x
  AbsTinyCamiot.PWild _ -> failure x
  AbsTinyCamiot.PNIl _ -> failure x
  AbsTinyCamiot.PTup _ pat1 pat2 -> failure x
  AbsTinyCamiot.PLay _ ident pat -> failure x
transPatMatch :: Show a => AbsTinyCamiot.PatMatch a -> Result
transPatMatch x = case x of
  AbsTinyCamiot.PM _ pat exp -> failure x

