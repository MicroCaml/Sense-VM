Todo items

* Type checking recursive functions does not work unless there is an explicit type signature for the function.
  Do we force type signatures on functions? I like the idea, but it will lead to very simple things being
  unecessarily cluttered. Perhaps we can do a check on a functions body to see if it is recursive, and if it is,
  force the user to annotate just _that_ function.
* If when a definition is typechecked right now, that definition was a function without an
  accompanying type signature, we should update the environment with the inferred type signature
  so that subsequent uses of the function type checks. Now it results in a unbound variable error.
* Maybe we want to generalise the types of variables found in patterns... take a look at how let expressions
  are typechecked in this post: http://dev.stephendiehl.com/fun/006_hindley_milner.html
  