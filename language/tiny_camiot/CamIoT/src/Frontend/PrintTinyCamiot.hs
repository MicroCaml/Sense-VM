{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintTinyCamiot.
--   Generated by the BNF converter.

module PrintTinyCamiot where

import qualified AbsTinyCamiot
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    [";"]        -> showChar ';'
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i     = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsTinyCamiot.Ident where
  prt _ (AbsTinyCamiot.Ident i) = doc $ showString $ i
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsTinyCamiot.UIdent where
  prt _ (AbsTinyCamiot.UIdent i) = doc $ showString $ i

instance Print [AbsTinyCamiot.Def a] where
  prt = prtList

instance Print (AbsTinyCamiot.Def a) where
  prt i e = case e of
    AbsTinyCamiot.DEquation _ id pats exp -> prPrec i 0 (concatD [prt 0 id, prt 0 pats, doc (showString "="), prt 0 exp])
    AbsTinyCamiot.DTypeSig _ id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_])
    AbsTinyCamiot.DDataDec _ uident ids constructordecs -> prPrec i 0 (concatD [doc (showString "data"), prt 0 uident, prt 0 ids, doc (showString "where"), doc (showString "{"), prt 0 constructordecs, doc (showString "}")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print (AbsTinyCamiot.ConstructorDec a) where
  prt i e = case e of
    AbsTinyCamiot.ConstDec _ uident type_ -> prPrec i 0 (concatD [prt 0 uident, doc (showString ":"), prt 0 type_])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [AbsTinyCamiot.ConstructorDec a] where
  prt = prtList

instance Print [AbsTinyCamiot.Ident] where
  prt = prtList

instance Print (AbsTinyCamiot.Type a) where
  prt i e = case e of
    AbsTinyCamiot.TLam _ type_1 type_2 -> prPrec i 0 (concatD [prt 1 type_1, doc (showString "->"), prt 0 type_2])
    AbsTinyCamiot.TPair _ type_1 type_2 -> prPrec i 1 (concatD [prt 2 type_1, doc (showString "*"), prt 1 type_2])
    AbsTinyCamiot.TNil _ -> prPrec i 2 (concatD [doc (showString "("), doc (showString ")")])
    AbsTinyCamiot.TVar _ id -> prPrec i 2 (concatD [prt 0 id])
    AbsTinyCamiot.TAdt _ uident types -> prPrec i 2 (concatD [prt 0 uident, prt 0 types])
    AbsTinyCamiot.TTup _ types -> prPrec i 0 (concatD [prt 0 types])
    AbsTinyCamiot.TInt _ -> prPrec i 0 (concatD [])
    AbsTinyCamiot.TFloat _ -> prPrec i 0 (concatD [])
    AbsTinyCamiot.TBool _ -> prPrec i 0 (concatD [])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsTinyCamiot.Type a] where
  prt = prtList

instance Print (AbsTinyCamiot.TupExp a) where
  prt i e = case e of
    AbsTinyCamiot.ETupExp _ exp -> prPrec i 0 (concatD [prt 0 exp])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsTinyCamiot.TupExp a] where
  prt = prtList

instance Print (AbsTinyCamiot.Exp a) where
  prt i e = case e of
    AbsTinyCamiot.ETup _ tupexps -> prPrec i 0 (concatD [doc (showString "("), prt 0 tupexps, doc (showString ")")])
    AbsTinyCamiot.ECase _ exp patmatchs -> prPrec i 0 (concatD [doc (showString "case"), prt 0 exp, doc (showString "of"), doc (showString "{"), prt 0 patmatchs, doc (showString "}")])
    AbsTinyCamiot.ELet _ pat exp1 exp2 -> prPrec i 0 (concatD [doc (showString "let"), prt 0 pat, doc (showString "="), prt 0 exp1, doc (showString "in"), prt 0 exp2])
    AbsTinyCamiot.ELetR _ pat exp1 exp2 -> prPrec i 0 (concatD [doc (showString "letrec"), prt 0 pat, doc (showString "="), prt 0 exp1, doc (showString "in"), prt 0 exp2])
    AbsTinyCamiot.ELam _ pat exp -> prPrec i 0 (concatD [doc (showString "\\"), prt 0 pat, doc (showString "->"), prt 0 exp])
    AbsTinyCamiot.EIf _ exp1 exp2 exp3 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp1, doc (showString "then"), prt 0 exp2, doc (showString "else"), prt 0 exp3])
    AbsTinyCamiot.ECon _ con exps -> prPrec i 0 (concatD [prt 0 con, prt 0 exps])
    AbsTinyCamiot.EApp _ exp1 exp2 -> prPrec i 1 (concatD [prt 2 exp1, prt 1 exp2])
    AbsTinyCamiot.EOr _ exp1 exp2 -> prPrec i 1 (concatD [prt 2 exp1, doc (showString "||"), prt 1 exp2])
    AbsTinyCamiot.EAnd _ exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "&&"), prt 2 exp2])
    AbsTinyCamiot.ERel _ exp1 relop exp2 -> prPrec i 3 (concatD [prt 3 exp1, prt 0 relop, prt 4 exp2])
    AbsTinyCamiot.EAdd _ exp1 addop exp2 -> prPrec i 4 (concatD [prt 4 exp1, prt 0 addop, prt 5 exp2])
    AbsTinyCamiot.EMul _ exp1 mulop exp2 -> prPrec i 5 (concatD [prt 5 exp1, prt 0 mulop, prt 6 exp2])
    AbsTinyCamiot.ENot _ exp -> prPrec i 6 (concatD [doc (showString "!"), prt 7 exp])
    AbsTinyCamiot.EVar _ id -> prPrec i 7 (concatD [prt 0 id])
    AbsTinyCamiot.EConst _ const -> prPrec i 7 (concatD [prt 0 const])
    AbsTinyCamiot.ETyped _ exp type_ -> prPrec i 0 (concatD [prt 0 exp, prt 0 type_])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (AbsTinyCamiot.AddOp a) where
  prt i e = case e of
    AbsTinyCamiot.Plus _ -> prPrec i 0 (concatD [doc (showString "+")])
    AbsTinyCamiot.FPlus _ -> prPrec i 0 (concatD [doc (showString "+.")])
    AbsTinyCamiot.Minus _ -> prPrec i 0 (concatD [doc (showString "-")])
    AbsTinyCamiot.FMinus _ -> prPrec i 0 (concatD [doc (showString "-.")])

instance Print (AbsTinyCamiot.MulOp a) where
  prt i e = case e of
    AbsTinyCamiot.Times _ -> prPrec i 0 (concatD [doc (showString "*")])
    AbsTinyCamiot.FTImes _ -> prPrec i 0 (concatD [doc (showString "*.")])
    AbsTinyCamiot.Div _ -> prPrec i 0 (concatD [doc (showString "/")])
    AbsTinyCamiot.FDiv _ -> prPrec i 0 (concatD [doc (showString "/.")])

instance Print (AbsTinyCamiot.RelOp a) where
  prt i e = case e of
    AbsTinyCamiot.LTC _ -> prPrec i 0 (concatD [doc (showString "<")])
    AbsTinyCamiot.FLTC _ -> prPrec i 0 (concatD [doc (showString "<.")])
    AbsTinyCamiot.LEC _ -> prPrec i 0 (concatD [doc (showString "<=")])
    AbsTinyCamiot.FLEC _ -> prPrec i 0 (concatD [doc (showString "<=.")])
    AbsTinyCamiot.GTC _ -> prPrec i 0 (concatD [doc (showString ">")])
    AbsTinyCamiot.FGTC _ -> prPrec i 0 (concatD [doc (showString ">.")])
    AbsTinyCamiot.GEC _ -> prPrec i 0 (concatD [doc (showString ">=")])
    AbsTinyCamiot.FGEC _ -> prPrec i 0 (concatD [doc (showString ">=.")])
    AbsTinyCamiot.EQC _ -> prPrec i 0 (concatD [doc (showString "==")])

instance Print [AbsTinyCamiot.Exp a] where
  prt = prtList

instance Print (AbsTinyCamiot.Con a) where
  prt i e = case e of
    AbsTinyCamiot.Constructor _ uident -> prPrec i 0 (concatD [prt 0 uident])

instance Print (AbsTinyCamiot.Const a) where
  prt i e = case e of
    AbsTinyCamiot.CInt _ n -> prPrec i 0 (concatD [prt 0 n])
    AbsTinyCamiot.CFloat _ d -> prPrec i 0 (concatD [prt 0 d])
    AbsTinyCamiot.CTrue _ -> prPrec i 0 (concatD [doc (showString "True")])
    AbsTinyCamiot.CFalse _ -> prPrec i 0 (concatD [doc (showString "False")])
    AbsTinyCamiot.CNil _ -> prPrec i 0 (concatD [doc (showString "()")])

instance Print (AbsTinyCamiot.Pat a) where
  prt i e = case e of
    AbsTinyCamiot.PConst _ const -> prPrec i 0 (concatD [prt 0 const])
    AbsTinyCamiot.PVar _ id -> prPrec i 0 (concatD [prt 0 id])
    AbsTinyCamiot.PAdt _ uident pats -> prPrec i 0 (concatD [prt 0 uident, prt 0 pats])
    AbsTinyCamiot.PWild _ -> prPrec i 0 (concatD [doc (showString "_")])
    AbsTinyCamiot.PNil _ -> prPrec i 0 (concatD [doc (showString "("), doc (showString ")")])
    AbsTinyCamiot.PTup _ pat1 pat2 -> prPrec i 1 (concatD [doc (showString "("), prt 0 pat1, doc (showString ","), prt 0 pat2, doc (showString ")")])
    AbsTinyCamiot.PLay _ id pat -> prPrec i 2 (concatD [prt 0 id, doc (showString "as"), prt 0 pat])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsTinyCamiot.Pat a] where
  prt = prtList

instance Print (AbsTinyCamiot.PatMatch a) where
  prt i e = case e of
    AbsTinyCamiot.PM _ pat exp -> prPrec i 0 (concatD [prt 0 pat, doc (showString "->"), prt 0 exp])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [AbsTinyCamiot.PatMatch a] where
  prt = prtList

