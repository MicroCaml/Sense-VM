data Maybe a where
  Just    : a -> Maybe a
  Nothing : Maybe a

data List a where
  Nil  : List a
  Cons : a -> List a -> List a

head : List a -> Maybe a
head (Cons a b) = Just a
head Nil        = Nothing

take : Int -> List a -> List a
take 0 _ = Nil
take n Nil = Nil
take n (Cons h t) = Cons h (take (n - 1) t)

drop : Int -> List a -> List a
drop 0 r = r
drop n Nil = Nil
drop n (Cons a r) = drop (n-1) r

length : List a -> Int
length Nil = 0
length (Cons a b) = 1 + length b

map : (a -> b) -> List a -> List b
map f _ = Nil
map f (Cons a rest) = Cons (f a) (map f rest)

zip : List a -> List b -> List (a, b)
zip Nil _ = Nil
zip _ Nil = Nil
zip (Cons a r1) (Cons b r2) = Cons (a, b) (zip r1 r2)

-- Just want to test let-bindings
zipWith : (a -> b -> c) -> List a -> List b -> List c
zipWith f l1 l2 = let res = zip l1 l2
                  in map (\(o1, o2) -> f o1 o2) res

foldl : (b -> a -> b) -> b -> List a -> b
foldl _ b Nil = b
foldl f b (Cons a rest) = foldl f (f b a) rest

main = foldl (\b -> (\a -> b + a)) 0 (Cons 3 (Cons 5 (Cons 7 Nil)))
