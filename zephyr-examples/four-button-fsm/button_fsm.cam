butchan1 : Channel Int
butchan1 = channel ()
butchan2 : Channel Int
butchan2 = channel ()
butchan3 : Channel Int
butchan3 = channel ()
butchan4 : Channel Int
butchan4 = channel ()

ledchan1 : Channel Int
ledchan1 = channel ()
ledchan2 : Channel Int
ledchan2 = channel ()
ledchan3 : Channel Int
ledchan3 = channel ()
ledchan4 : Channel Int
ledchan4 = channel ()

not : Int -> Int
not 1 = 0
not 0 = 1

errorLed x = ledchan3

fail1ev = choose (wrap (recv butchan1) errorLed)
         (choose (wrap (recv butchan3) errorLed) 
                 (wrap (recv butchan4) errorLed))

fail2ev = choose (wrap (recv butchan1) errorLed)
         (choose (wrap (recv butchan2) errorLed)
                 (wrap (recv butchan3) errorLed))

led1Handler x =
   sync (choose (wrap (recv butchan2) (\x -> ledchan1)) fail1ev)

led2Handler x =
   sync (choose (wrap (recv butchan4) (\x -> ledchan2)) fail2ev)

led : Int -> ()
led state =
  let fsm1 = wrap (recv butchan1) led1Handler in
  let fsm2 = wrap (recv butchan3) led2Handler in
  let ch = sync (choose fsm1 fsm2) in
  let _ = sync (send ch (not state)) in
  led (not state)

main =
  let _ = spawnExternal butchan1  0 in
  let _ = spawnExternal butchan2 1 in
  let _ = spawnExternal butchan3 2 in
  let _ = spawnExternal butchan4 3 in
  let _ = spawnExternal ledchan1  4 in
  let _ = spawnExternal ledchan2 5 in	
  let _ = spawnExternal ledchan3 6 in
  let _ = spawnExternal ledchan4 7 in
  led 0
