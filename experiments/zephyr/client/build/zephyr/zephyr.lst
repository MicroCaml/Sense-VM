
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	forced_pm_state = state;
#endif
}

enum power_states _sys_suspend(int32_t ticks)
{
   0:	20004660 	.word	0x20004660
	bool deep_sleep;
#if CONFIG_DEVICE_POWER_MANAGEMENT
	bool low_power = false;
#endif

	pm_state = (forced_pm_state == SYS_POWER_STATE_AUTO) ?
   4:	000069dd 	.word	0x000069dd
		   sys_pm_policy_next_state(ticks) : forced_pm_state;
   8:	00021759 	.word	0x00021759
   c:	00006a0d 	.word	0x00006a0d
  10:	00006a0d 	.word	0x00006a0d

	if (pm_state == SYS_POWER_STATE_ACTIVE) {
  14:	00006a0d 	.word	0x00006a0d
  18:	00006a0d 	.word	0x00006a0d
	...
#endif
	}

	/* Enter power state */
	sys_pm_debug_start_timer();
	sys_set_power_state(pm_state);
  2c:	00006735 	.word	0x00006735
		sys_pm_resume_devices();
	}
#endif
	sys_pm_log_debug_info(pm_state);

	if (!post_ops_done) {
  30:	00006a0d 	.word	0x00006a0d
		post_ops_done = 1;
		/* clear forced_pm_state */
		forced_pm_state = SYS_POWER_STATE_AUTO;
		sys_pm_notify_power_state_exit(pm_state);
  34:	00000000 	.word	0x00000000
		post_ops_done = 1;
  38:	000066e1 	.word	0x000066e1
		forced_pm_state = SYS_POWER_STATE_AUTO;
  3c:	000205a9 	.word	0x000205a9

00000040 <_irq_vector_table>:
		sys_pm_notify_power_state_exit(pm_state);
  40:	0000699d 000199f1 0000699d 0000699d     .i.......i...i..
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	0000699d 0000699d 0000699d 0000699d     .i...i...i...i..
  60:	0000699d 0000699d 0000699d 0000699d     .i...i...i...i..
  70:	0000699d 0000699d 0000699d 0000699d     .i...i...i...i..
  80:	0000699d 0000699d 0000699d 0000699d     .i...i...i...i..
  90:	0000699d 0000699d 0000699d 0000699d     .i...i...i...i..
  a0:	0000699d 0000699d 0000699d 0000699d     .i...i...i...i..
  b0:	0000699d 0000699d 0000699d 0000699d     .i...i...i...i..
  c0:	0000699d 0000699d 0000699d 0000699d     .i...i...i...i..
  d0:	0000699d 0000699d 0000699d 0000699d     .i...i...i...i..
  e0:	0000699d 0000699d 0000699d 0000699d     .i...i...i...i..
  f0:	0000699d 0000699d 0000699d 0000699d     .i...i...i...i..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b96e 	b.w	3f4 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9d08      	ldr	r5, [sp, #32]
     136:	460e      	mov	r6, r1
     138:	4604      	mov	r4, r0
     13a:	468c      	mov	ip, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8081 	bne.w	244 <CONFIG_UART_MUX_RX_STACK_SIZE+0x44>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d945      	bls.n	1d4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x14>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa06 f302 	lsl.w	r3, r6, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0c03 	orr.w	ip, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbc f6fe 	udiv	r6, ip, lr
     16c:	b2b9      	uxth	r1, r7
     16e:	fb0e cc16 	mls	ip, lr, r6, ip
     172:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     176:	fb06 f001 	mul.w	r0, r6, r1
     17a:	4298      	cmp	r0, r3
     17c:	d909      	bls.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     17e:	18fb      	adds	r3, r7, r3
     180:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     184:	f080 8115 	bcs.w	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     188:	4298      	cmp	r0, r3
     18a:	f240 8112 	bls.w	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     18e:	3e02      	subs	r6, #2
     190:	443b      	add	r3, r7
     192:	1a1b      	subs	r3, r3, r0
     194:	b2a4      	uxth	r4, r4
     196:	fbb3 f0fe 	udiv	r0, r3, lr
     19a:	fb0e 3310 	mls	r3, lr, r0, r3
     19e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a2:	fb00 f101 	mul.w	r1, r0, r1
     1a6:	42a1      	cmp	r1, r4
     1a8:	d909      	bls.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1aa:	193c      	adds	r4, r7, r4
     1ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b0:	f080 8101 	bcs.w	3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     1b4:	42a1      	cmp	r1, r4
     1b6:	f240 80fe 	bls.w	3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     1ba:	3802      	subs	r0, #2
     1bc:	443c      	add	r4, r7
     1be:	1a64      	subs	r4, r4, r1
     1c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     1c4:	2100      	movs	r1, #0
     1c6:	b11d      	cbz	r5, 1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     1c8:	40d4      	lsrs	r4, r2
     1ca:	2300      	movs	r3, #0
     1cc:	e9c5 4300 	strd	r4, r3, [r5]
     1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d4:	b902      	cbnz	r2, 1d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x18>
     1d6:	deff      	udf	#255	; 0xff
     1d8:	fab2 f282 	clz	r2, r2
     1dc:	2a00      	cmp	r2, #0
     1de:	d14f      	bne.n	280 <CONFIG_UART_MUX_RX_STACK_SIZE+0x80>
     1e0:	1bcb      	subs	r3, r1, r7
     1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e6:	fa1f f887 	uxth.w	r8, r7
     1ea:	2101      	movs	r1, #1
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c26      	lsrs	r6, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     1fa:	fb08 f30c 	mul.w	r3, r8, ip
     1fe:	42b3      	cmp	r3, r6
     200:	d907      	bls.n	212 <CONFIG_UART_MUX_RX_STACK_SIZE+0x12>
     202:	19be      	adds	r6, r7, r6
     204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     208:	d202      	bcs.n	210 <CONFIG_UART_MUX_RX_STACK_SIZE+0x10>
     20a:	42b3      	cmp	r3, r6
     20c:	f200 80eb 	bhi.w	3e6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe6>
     210:	4684      	mov	ip, r0
     212:	1af6      	subs	r6, r6, r3
     214:	b2a3      	uxth	r3, r4
     216:	fbb6 f0fe 	udiv	r0, r6, lr
     21a:	fb0e 6610 	mls	r6, lr, r0, r6
     21e:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     222:	fb08 f800 	mul.w	r8, r8, r0
     226:	45a0      	cmp	r8, r4
     228:	d907      	bls.n	23a <CONFIG_UART_MUX_RX_STACK_SIZE+0x3a>
     22a:	193c      	adds	r4, r7, r4
     22c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     230:	d202      	bcs.n	238 <CONFIG_UART_MUX_RX_STACK_SIZE+0x38>
     232:	45a0      	cmp	r8, r4
     234:	f200 80d2 	bhi.w	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     238:	4618      	mov	r0, r3
     23a:	eba4 0408 	sub.w	r4, r4, r8
     23e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     242:	e7c0      	b.n	1c6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x6>
     244:	428b      	cmp	r3, r1
     246:	d908      	bls.n	25a <CONFIG_UART_MUX_RX_STACK_SIZE+0x5a>
     248:	2d00      	cmp	r5, #0
     24a:	f000 80af 	beq.w	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     24e:	2100      	movs	r1, #0
     250:	e9c5 0600 	strd	r0, r6, [r5]
     254:	4608      	mov	r0, r1
     256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25a:	fab3 f183 	clz	r1, r3
     25e:	2900      	cmp	r1, #0
     260:	d149      	bne.n	2f6 <CONFIG_UART_MUX_RX_STACK_SIZE+0xf6>
     262:	42b3      	cmp	r3, r6
     264:	d302      	bcc.n	26c <CONFIG_UART_MUX_RX_STACK_SIZE+0x6c>
     266:	4282      	cmp	r2, r0
     268:	f200 80bb 	bhi.w	3e2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe2>
     26c:	1a84      	subs	r4, r0, r2
     26e:	eb66 0303 	sbc.w	r3, r6, r3
     272:	2001      	movs	r0, #1
     274:	469c      	mov	ip, r3
     276:	2d00      	cmp	r5, #0
     278:	d0aa      	beq.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     27a:	e9c5 4c00 	strd	r4, ip, [r5]
     27e:	e7a7      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     280:	f1c2 0320 	rsb	r3, r2, #32
     284:	4097      	lsls	r7, r2
     286:	40d8      	lsrs	r0, r3
     288:	4091      	lsls	r1, r2
     28a:	40de      	lsrs	r6, r3
     28c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     290:	4308      	orrs	r0, r1
     292:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     296:	fbb6 f1fe 	udiv	r1, r6, lr
     29a:	fa1f f887 	uxth.w	r8, r7
     29e:	fb0e 6611 	mls	r6, lr, r1, r6
     2a2:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     2a6:	fb01 f308 	mul.w	r3, r1, r8
     2aa:	42b3      	cmp	r3, r6
     2ac:	fa04 f402 	lsl.w	r4, r4, r2
     2b0:	d909      	bls.n	2c6 <CONFIG_UART_MUX_RX_STACK_SIZE+0xc6>
     2b2:	19be      	adds	r6, r7, r6
     2b4:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     2b8:	f080 808e 	bcs.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2bc:	42b3      	cmp	r3, r6
     2be:	f240 808b 	bls.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c2:	3902      	subs	r1, #2
     2c4:	443e      	add	r6, r7
     2c6:	1af3      	subs	r3, r6, r3
     2c8:	b286      	uxth	r6, r0
     2ca:	fbb3 f0fe 	udiv	r0, r3, lr
     2ce:	fb0e 3310 	mls	r3, lr, r0, r3
     2d2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     2d6:	fb00 f308 	mul.w	r3, r0, r8
     2da:	42b3      	cmp	r3, r6
     2dc:	d907      	bls.n	2ee <CONFIG_UART_MUX_RX_STACK_SIZE+0xee>
     2de:	19be      	adds	r6, r7, r6
     2e0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2e4:	d274      	bcs.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2e6:	42b3      	cmp	r3, r6
     2e8:	d972      	bls.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2ea:	3802      	subs	r0, #2
     2ec:	443e      	add	r6, r7
     2ee:	1af3      	subs	r3, r6, r3
     2f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2f4:	e77a      	b.n	1ec <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x2c>
     2f6:	f1c1 0720 	rsb	r7, r1, #32
     2fa:	fa03 f401 	lsl.w	r4, r3, r1
     2fe:	fa22 f307 	lsr.w	r3, r2, r7
     302:	431c      	orrs	r4, r3
     304:	fa20 f907 	lsr.w	r9, r0, r7
     308:	fa06 f301 	lsl.w	r3, r6, r1
     30c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     310:	40fe      	lsrs	r6, r7
     312:	ea49 0903 	orr.w	r9, r9, r3
     316:	ea4f 4319 	mov.w	r3, r9, lsr #16
     31a:	fbb6 fefc 	udiv	lr, r6, ip
     31e:	fa1f f884 	uxth.w	r8, r4
     322:	fb0c 661e 	mls	r6, ip, lr, r6
     326:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     32a:	fb0e fa08 	mul.w	sl, lr, r8
     32e:	45b2      	cmp	sl, r6
     330:	fa02 f201 	lsl.w	r2, r2, r1
     334:	fa00 f301 	lsl.w	r3, r0, r1
     338:	d908      	bls.n	34c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4c>
     33a:	19a6      	adds	r6, r4, r6
     33c:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     340:	d248      	bcs.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     342:	45b2      	cmp	sl, r6
     344:	d946      	bls.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     346:	f1ae 0e02 	sub.w	lr, lr, #2
     34a:	4426      	add	r6, r4
     34c:	eba6 060a 	sub.w	r6, r6, sl
     350:	fa1f f989 	uxth.w	r9, r9
     354:	fbb6 f0fc 	udiv	r0, r6, ip
     358:	fb0c 6610 	mls	r6, ip, r0, r6
     35c:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45b0      	cmp	r8, r6
     366:	d907      	bls.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     368:	19a6      	adds	r6, r4, r6
     36a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     36e:	d22d      	bcs.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     370:	45b0      	cmp	r8, r6
     372:	d92b      	bls.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     374:	3802      	subs	r0, #2
     376:	4426      	add	r6, r4
     378:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     37c:	eba6 0608 	sub.w	r6, r6, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454e      	cmp	r6, r9
     386:	46c4      	mov	ip, r8
     388:	46ce      	mov	lr, r9
     38a:	d318      	bcc.n	3be <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbe>
     38c:	d015      	beq.n	3ba <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xba>
     38e:	b375      	cbz	r5, 3ee <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x6>
     390:	ebb3 020c 	subs.w	r2, r3, ip
     394:	eb66 060e 	sbc.w	r6, r6, lr
     398:	fa06 f707 	lsl.w	r7, r6, r7
     39c:	fa22 f301 	lsr.w	r3, r2, r1
     3a0:	40ce      	lsrs	r6, r1
     3a2:	431f      	orrs	r7, r3
     3a4:	e9c5 7600 	strd	r7, r6, [r5]
     3a8:	2100      	movs	r1, #0
     3aa:	e711      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     3ac:	4629      	mov	r1, r5
     3ae:	4628      	mov	r0, r5
     3b0:	e70e      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     3b2:	4666      	mov	r6, ip
     3b4:	e6ed      	b.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     3b6:	4618      	mov	r0, r3
     3b8:	e701      	b.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     3ba:	4543      	cmp	r3, r8
     3bc:	d2e7      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3be:	ebb8 0c02 	subs.w	ip, r8, r2
     3c2:	eb69 0404 	sbc.w	r4, r9, r4
     3c6:	3801      	subs	r0, #1
     3c8:	46a6      	mov	lr, r4
     3ca:	e7e0      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3cc:	4660      	mov	r0, ip
     3ce:	e7d3      	b.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     3d0:	4660      	mov	r0, ip
     3d2:	e78c      	b.n	2ee <CONFIG_UART_MUX_RX_STACK_SIZE+0xee>
     3d4:	4686      	mov	lr, r0
     3d6:	e7b9      	b.n	34c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4c>
     3d8:	4661      	mov	r1, ip
     3da:	e774      	b.n	2c6 <CONFIG_UART_MUX_RX_STACK_SIZE+0xc6>
     3dc:	3802      	subs	r0, #2
     3de:	443c      	add	r4, r7
     3e0:	e72b      	b.n	23a <CONFIG_UART_MUX_RX_STACK_SIZE+0x3a>
     3e2:	4608      	mov	r0, r1
     3e4:	e747      	b.n	276 <CONFIG_UART_MUX_RX_STACK_SIZE+0x76>
     3e6:	f1ac 0c02 	sub.w	ip, ip, #2
     3ea:	443e      	add	r6, r7
     3ec:	e711      	b.n	212 <CONFIG_UART_MUX_RX_STACK_SIZE+0x12>
     3ee:	4629      	mov	r1, r5
     3f0:	e6ee      	b.n	1d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x10>
     3f2:	bf00      	nop

000003f4 <__aeabi_idiv0>:
     3f4:	4770      	bx	lr
     3f6:	bf00      	nop

000003f8 <hci_init>:
	}
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
     3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     3fa:	4d45      	ldr	r5, [pc, #276]	; (510 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc4>)
     3fc:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
     400:	6899      	ldr	r1, [r3, #8]
     402:	f011 0101 	ands.w	r1, r1, #1
{
     406:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     408:	d121      	bne.n	44e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     40a:	aa03      	add	r2, sp, #12
     40c:	f640 4003 	movw	r0, #3075	; 0xc03
     410:	f007 ff6e 	bl	82f0 <bt_hci_cmd_send_sync>
		if (err) {
     414:	4604      	mov	r4, r0
     416:	2800      	cmp	r0, #0
     418:	d176      	bne.n	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
		hci_reset_complete(rsp);
     41a:	9b03      	ldr	r3, [sp, #12]
	uint8_t status = buf->data[0];
     41c:	689b      	ldr	r3, [r3, #8]
	if (status) {
     41e:	781b      	ldrb	r3, [r3, #0]
     420:	b993      	cbnz	r3, 448 <CONFIG_BT_HCI_TX_STACK_SIZE+0x48>
	scan_dev_found_cb = NULL;
     422:	4a3c      	ldr	r2, [pc, #240]	; (514 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc8>)
     424:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     426:	f105 0394 	add.w	r3, r5, #148	; 0x94
     42a:	4618      	mov	r0, r3
     42c:	f021 fb1c 	bl	21a68 <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     430:	f3bf 8f5b 	dmb	ish
     434:	f000 0005 	and.w	r0, r0, #5
     438:	e853 2f00 	ldrex	r2, [r3]
     43c:	e843 0100 	strex	r1, r0, [r3]
     440:	2900      	cmp	r1, #0
     442:	d1f9      	bne.n	438 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     444:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
     448:	9803      	ldr	r0, [sp, #12]
     44a:	f01c fe67 	bl	1d11c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     44e:	aa03      	add	r2, sp, #12
     450:	2100      	movs	r1, #0
     452:	f241 0003 	movw	r0, #4099	; 0x1003
     456:	f007 ff4b 	bl	82f0 <bt_hci_cmd_send_sync>
	if (err) {
     45a:	4604      	mov	r4, r0
     45c:	2800      	cmp	r0, #0
     45e:	d153      	bne.n	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
	read_local_features_complete(rsp);
     460:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     462:	482d      	ldr	r0, [pc, #180]	; (518 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xcc>)
     464:	6899      	ldr	r1, [r3, #8]
     466:	2208      	movs	r2, #8
     468:	3101      	adds	r1, #1
     46a:	f021 f9bc 	bl	217e6 <memcpy>
	net_buf_unref(rsp);
     46e:	9803      	ldr	r0, [sp, #12]
     470:	f01c fe54 	bl	1d11c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     474:	4621      	mov	r1, r4
     476:	aa03      	add	r2, sp, #12
     478:	f241 0001 	movw	r0, #4097	; 0x1001
     47c:	f007 ff38 	bl	82f0 <bt_hci_cmd_send_sync>
	if (err) {
     480:	4604      	mov	r4, r0
     482:	2800      	cmp	r0, #0
     484:	d140      	bne.n	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
	read_local_ver_complete(rsp);
     486:	9803      	ldr	r0, [sp, #12]
     488:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     48a:	785a      	ldrb	r2, [r3, #1]
     48c:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     490:	78d9      	ldrb	r1, [r3, #3]
     492:	789a      	ldrb	r2, [r3, #2]
     494:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     498:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
     49a:	791a      	ldrb	r2, [r3, #4]
     49c:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     4a0:	7a19      	ldrb	r1, [r3, #8]
     4a2:	79da      	ldrb	r2, [r3, #7]
     4a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     4a8:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     4aa:	795a      	ldrb	r2, [r3, #5]
     4ac:	799b      	ldrb	r3, [r3, #6]
     4ae:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     4b2:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
     4b4:	f01c fe32 	bl	1d11c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     4b8:	4621      	mov	r1, r4
     4ba:	aa03      	add	r2, sp, #12
     4bc:	f241 0002 	movw	r0, #4098	; 0x1002
     4c0:	f007 ff16 	bl	82f0 <bt_hci_cmd_send_sync>
	if (err) {
     4c4:	4604      	mov	r4, r0
     4c6:	b9f8      	cbnz	r0, 508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
	read_supported_commands_complete(rsp);
     4c8:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
     4ca:	4814      	ldr	r0, [pc, #80]	; (51c <CONFIG_BT_HCI_ECC_STACK_SIZE+0xd0>)
     4cc:	6899      	ldr	r1, [r3, #8]
     4ce:	2240      	movs	r2, #64	; 0x40
     4d0:	3101      	adds	r1, #1
     4d2:	f021 f988 	bl	217e6 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
     4d6:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
     4da:	9803      	ldr	r0, [sp, #12]
		bt_dev.supported_commands[34] |= 0x04;
     4dc:	f043 0306 	orr.w	r3, r3, #6
     4e0:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
     4e4:	f01c fe1a 	bl	1d11c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
     4e8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
     4ec:	065b      	lsls	r3, r3, #25
     4ee:	d41d      	bmi.n	52c <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe0>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
     4f0:	4b0b      	ldr	r3, [pc, #44]	; (520 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xd4>)
     4f2:	490c      	ldr	r1, [pc, #48]	; (524 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xd8>)
		BT_ERR("Non-LE capable controller detected!");
     4f4:	480c      	ldr	r0, [pc, #48]	; (528 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xdc>)
     4f6:	1ac9      	subs	r1, r1, r3
     4f8:	08c9      	lsrs	r1, r1, #3
     4fa:	0189      	lsls	r1, r1, #6
     4fc:	f041 0101 	orr.w	r1, r1, #1
     500:	f01f fcbd 	bl	1fe7e <log_0>
		return -ENODEV;
     504:	f06f 0412 	mvn.w	r4, #18
			return err;
		}
	}

	return 0;
}
     508:	4620      	mov	r0, r4
     50a:	b009      	add	sp, #36	; 0x24
     50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     50e:	bf00      	nop
     510:	20000000 	.word	0x20000000
     514:	20001380 	.word	0x20001380
     518:	2000003c 	.word	0x2000003c
     51c:	20000044 	.word	0x20000044
     520:	00024fd8 	.word	0x00024fd8
     524:	000250c0 	.word	0x000250c0
     528:	00027c92 	.word	0x00027c92
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     52c:	4621      	mov	r1, r4
     52e:	aa03      	add	r2, sp, #12
     530:	f242 0003 	movw	r0, #8195	; 0x2003
     534:	f007 fedc 	bl	82f0 <bt_hci_cmd_send_sync>
	if (err) {
     538:	4604      	mov	r4, r0
     53a:	2800      	cmp	r0, #0
     53c:	d1e4      	bne.n	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
	read_le_features_complete(rsp);
     53e:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     540:	48a5      	ldr	r0, [pc, #660]	; (7d8 <CONFIG_BT_COMPANY_ID+0x1e7>)
     542:	6899      	ldr	r1, [r3, #8]
     544:	2208      	movs	r2, #8
     546:	3101      	adds	r1, #1
     548:	f021 f94d 	bl	217e6 <memcpy>
	net_buf_unref(rsp);
     54c:	9803      	ldr	r0, [sp, #12]
     54e:	f01c fde5 	bl	1d11c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     552:	4621      	mov	r1, r4
     554:	aa03      	add	r2, sp, #12
     556:	f242 0002 	movw	r0, #8194	; 0x2002
     55a:	f007 fec9 	bl	82f0 <bt_hci_cmd_send_sync>
		if (err) {
     55e:	4604      	mov	r4, r0
     560:	2800      	cmp	r0, #0
     562:	d1d1      	bne.n	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
		le_read_buffer_size_complete(rsp);
     564:	9b03      	ldr	r3, [sp, #12]
     566:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
     568:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     56c:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
     570:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
     572:	b121      	cbz	r1, 57e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x132>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
     574:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     576:	4899      	ldr	r0, [pc, #612]	; (7dc <CONFIG_BT_COMPANY_ID+0x1eb>)
     578:	4611      	mov	r1, r2
     57a:	f024 f967 	bl	2484c <z_impl_k_sem_init>
		net_buf_unref(rsp);
     57e:	9803      	ldr	r0, [sp, #12]
     580:	f01c fdcc 	bl	1d11c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     584:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
     588:	f016 0620 	ands.w	r6, r6, #32
     58c:	f000 80ff 	beq.w	78e <CONFIG_BT_COMPANY_ID+0x19d>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     590:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
     594:	071f      	lsls	r7, r3, #28
     596:	d511      	bpl.n	5bc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x170>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     598:	aa03      	add	r2, sp, #12
     59a:	2100      	movs	r1, #0
     59c:	f242 001c 	movw	r0, #8220	; 0x201c
     5a0:	f007 fea6 	bl	82f0 <bt_hci_cmd_send_sync>
		if (err) {
     5a4:	4604      	mov	r4, r0
     5a6:	2800      	cmp	r0, #0
     5a8:	d1ae      	bne.n	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
		le_read_supp_states_complete(rsp);
     5aa:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     5ac:	6883      	ldr	r3, [r0, #8]
     5ae:	f853 2f01 	ldr.w	r2, [r3, #1]!
     5b2:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     5b4:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
     5b8:	f01c fdb0 	bl	1d11c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     5bc:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
     5c0:	069e      	lsls	r6, r3, #26
     5c2:	d524      	bpl.n	60e <CONFIG_BT_COMPANY_ID+0x1d>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
     5c4:	a902      	add	r1, sp, #8
     5c6:	f10d 0006 	add.w	r0, sp, #6
     5ca:	f007 ff09 	bl	83e0 <hci_le_read_max_data_len>
		if (err) {
     5ce:	4604      	mov	r4, r0
     5d0:	2800      	cmp	r0, #0
     5d2:	d199      	bne.n	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     5d4:	2104      	movs	r1, #4
     5d6:	f242 0024 	movw	r0, #8228	; 0x2024
     5da:	f007 fd2d 	bl	8038 <bt_hci_cmd_create>
		if (!buf) {
     5de:	4606      	mov	r6, r0
     5e0:	2800      	cmp	r0, #0
     5e2:	f000 80db 	beq.w	79c <CONFIG_BT_COMPANY_ID+0x1ab>
		cp = net_buf_add(buf, sizeof(*cp));
     5e6:	2104      	movs	r1, #4
     5e8:	3008      	adds	r0, #8
     5ea:	f023 fd25 	bl	24038 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     5ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     5f2:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     5f4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
     5f8:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     5fa:	4622      	mov	r2, r4
     5fc:	4631      	mov	r1, r6
     5fe:	f242 0024 	movw	r0, #8228	; 0x2024
     602:	f007 fe75 	bl	82f0 <bt_hci_cmd_send_sync>
		if (err) {
     606:	4604      	mov	r4, r0
     608:	2800      	cmp	r0, #0
     60a:	f47f af7d 	bne.w	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     60e:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
     612:	065c      	lsls	r4, r3, #25
     614:	d510      	bpl.n	638 <CONFIG_BT_COMPANY_ID+0x47>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     616:	aa03      	add	r2, sp, #12
     618:	2100      	movs	r1, #0
     61a:	f242 002a 	movw	r0, #8234	; 0x202a
     61e:	f007 fe67 	bl	82f0 <bt_hci_cmd_send_sync>
		if (err) {
     622:	4604      	mov	r4, r0
     624:	2800      	cmp	r0, #0
     626:	f47f af6f 	bne.w	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
		le_read_resolving_list_size_complete(rsp);
     62a:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
     62c:	6883      	ldr	r3, [r0, #8]
     62e:	785b      	ldrb	r3, [r3, #1]
     630:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
     634:	f01c fd72 	bl	1d11c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     638:	2108      	movs	r1, #8
     63a:	f242 0001 	movw	r0, #8193	; 0x2001
     63e:	f007 fcfb 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
     642:	4604      	mov	r4, r0
     644:	2800      	cmp	r0, #0
     646:	f000 80a9 	beq.w	79c <CONFIG_BT_COMPANY_ID+0x1ab>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     64a:	2108      	movs	r1, #8
     64c:	4408      	add	r0, r1
     64e:	f023 fcf3 	bl	24038 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
     652:	f895 1098 	ldrb.w	r1, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     656:	f011 0f40 	tst.w	r1, #64	; 0x40
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     65a:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     65c:	f240 2302 	movw	r3, #514	; 0x202
     660:	bf08      	it	eq
     662:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     664:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     666:	bf4c      	ite	mi
     668:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     66c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     670:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     674:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     676:	bf48      	it	mi
     678:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     67c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     680:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     684:	bf18      	it	ne
     686:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     68a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     68e:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     690:	bf48      	it	mi
     692:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     696:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     698:	bf08      	it	eq
     69a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     69e:	2100      	movs	r1, #0
     6a0:	f021 fa28 	bl	21af4 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     6a4:	4621      	mov	r1, r4
     6a6:	2200      	movs	r2, #0
     6a8:	f242 0001 	movw	r0, #8193	; 0x2001
     6ac:	f007 fe20 	bl	82f0 <bt_hci_cmd_send_sync>
	if (err) {
     6b0:	4604      	mov	r4, r0
     6b2:	2800      	cmp	r0, #0
     6b4:	f47f af28 	bne.w	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     6b8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
     6bc:	0698      	lsls	r0, r3, #26
     6be:	d41e      	bmi.n	6fe <CONFIG_BT_COMPANY_ID+0x10d>
	if (bt_dev.le.acl_mtu) {
     6c0:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
     6c4:	b9d9      	cbnz	r1, 6fe <CONFIG_BT_COMPANY_ID+0x10d>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
     6c6:	aa03      	add	r2, sp, #12
     6c8:	f241 0005 	movw	r0, #4101	; 0x1005
     6cc:	f007 fe10 	bl	82f0 <bt_hci_cmd_send_sync>
	if (err) {
     6d0:	4604      	mov	r4, r0
     6d2:	2800      	cmp	r0, #0
     6d4:	f47f af18 	bne.w	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
	if (bt_dev.le.acl_mtu) {
     6d8:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
     6dc:	b963      	cbnz	r3, 6f8 <CONFIG_BT_COMPANY_ID+0x107>
	read_buffer_size_complete(rsp);
     6de:	9b03      	ldr	r3, [sp, #12]
     6e0:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
     6e2:	785a      	ldrb	r2, [r3, #1]
     6e4:	7899      	ldrb	r1, [r3, #2]
     6e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     6ea:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
     6ee:	889a      	ldrh	r2, [r3, #4]
     6f0:	483a      	ldr	r0, [pc, #232]	; (7dc <CONFIG_BT_COMPANY_ID+0x1eb>)
     6f2:	4611      	mov	r1, r2
     6f4:	f024 f8aa 	bl	2484c <z_impl_k_sem_init>
	net_buf_unref(rsp);
     6f8:	9803      	ldr	r0, [sp, #12]
     6fa:	f01c fd0f 	bl	1d11c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
     6fe:	2108      	movs	r1, #8
     700:	f640 4001 	movw	r0, #3073	; 0xc01
     704:	f007 fc98 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
     708:	4604      	mov	r4, r0
     70a:	2800      	cmp	r0, #0
     70c:	d046      	beq.n	79c <CONFIG_BT_COMPANY_ID+0x1ab>
	ev = net_buf_add(buf, sizeof(*ev));
     70e:	2108      	movs	r1, #8
     710:	4408      	add	r0, r1
     712:	f023 fc91 	bl	24038 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     716:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
     71a:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
     71c:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     71e:	d552      	bpl.n	7c6 <CONFIG_BT_COMPANY_ID+0x1d5>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
     720:	a12b      	add	r1, pc, #172	; (adr r1, 7d0 <CONFIG_BT_COMPANY_ID+0x1df>)
     722:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
     726:	f021 f9e5 	bl	21af4 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
     72a:	4621      	mov	r1, r4
     72c:	2200      	movs	r2, #0
     72e:	f640 4001 	movw	r0, #3073	; 0xc01
     732:	f007 fddd 	bl	82f0 <bt_hci_cmd_send_sync>
	if (err) {
     736:	4604      	mov	r4, r0
     738:	2800      	cmp	r0, #0
     73a:	f47f aee5 	bne.w	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
     73e:	4601      	mov	r1, r0
     740:	aa02      	add	r2, sp, #8
     742:	f64f 4001 	movw	r0, #64513	; 0xfc01
     746:	f007 fdd3 	bl	82f0 <bt_hci_cmd_send_sync>
	if (err) {
     74a:	4e25      	ldr	r6, [pc, #148]	; (7e0 <CONFIG_BT_COMPANY_ID+0x1ef>)
     74c:	4b25      	ldr	r3, [pc, #148]	; (7e4 <CONFIG_BT_COMPANY_ID+0x1f3>)
     74e:	1af6      	subs	r6, r6, r3
     750:	08f6      	lsrs	r6, r6, #3
     752:	01b6      	lsls	r6, r6, #6
     754:	2800      	cmp	r0, #0
     756:	d04d      	beq.n	7f4 <CONFIG_BT_COMPANY_ID+0x203>
		BT_WARN("Vendor HCI extensions not available");
     758:	4823      	ldr	r0, [pc, #140]	; (7e8 <CONFIG_BT_COMPANY_ID+0x1f7>)
     75a:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
     75e:	f01f fb8e 	bl	1fe7e <log_0>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
     762:	79eb      	ldrb	r3, [r5, #7]
     764:	2b00      	cmp	r3, #0
     766:	f47f aecf 	bne.w	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
		bt_setup_public_id_addr();
     76a:	f008 fdf9 	bl	9360 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
     76e:	79eb      	ldrb	r3, [r5, #7]
     770:	2b00      	cmp	r3, #0
     772:	f47f aec9 	bne.w	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
		err = bt_setup_random_id_addr();
     776:	f008 fe9d 	bl	94b4 <bt_setup_random_id_addr>
		if (err) {
     77a:	4604      	mov	r4, r0
     77c:	2800      	cmp	r0, #0
     77e:	f000 80a6 	beq.w	8ce <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xce>
			BT_ERR("Unable to set identity address");
     782:	481a      	ldr	r0, [pc, #104]	; (7ec <CONFIG_BT_COMPANY_ID+0x1fb>)
     784:	f046 0101 	orr.w	r1, r6, #1
			BT_ERR("Unable to set random address");
     788:	f01f fb79 	bl	1fe7e <log_0>
			return err;
     78c:	e6bc      	b.n	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
     78e:	2102      	movs	r1, #2
     790:	f640 406d 	movw	r0, #3181	; 0xc6d
     794:	f007 fc50 	bl	8038 <bt_hci_cmd_create>
		if (!buf) {
     798:	4604      	mov	r4, r0
     79a:	b910      	cbnz	r0, 7a2 <CONFIG_BT_COMPANY_ID+0x1b1>
		return -ENOBUFS;
     79c:	f06f 0436 	mvn.w	r4, #54	; 0x36
     7a0:	e6b2      	b.n	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
     7a2:	2102      	movs	r1, #2
     7a4:	3008      	adds	r0, #8
     7a6:	f023 fc47 	bl	24038 <net_buf_simple_add>
		cp_le->le = 0x01;
     7aa:	2301      	movs	r3, #1
     7ac:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
     7ae:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     7b0:	4621      	mov	r1, r4
     7b2:	4632      	mov	r2, r6
     7b4:	f640 406d 	movw	r0, #3181	; 0xc6d
     7b8:	f007 fd9a 	bl	82f0 <bt_hci_cmd_send_sync>
		if (err) {
     7bc:	4604      	mov	r4, r0
     7be:	2800      	cmp	r0, #0
     7c0:	f43f aee6 	beq.w	590 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x144>
     7c4:	e6a0      	b.n	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
     7c6:	480a      	ldr	r0, [pc, #40]	; (7f0 <CONFIG_BT_COMPANY_ID+0x1ff>)
     7c8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     7cc:	e7ab      	b.n	726 <CONFIG_BT_COMPANY_ID+0x135>
     7ce:	bf00      	nop
     7d0:	02008890 	.word	0x02008890
     7d4:	20008000 	.word	0x20008000
     7d8:	20000098 	.word	0x20000098
     7dc:	200000c8 	.word	0x200000c8
     7e0:	000250c0 	.word	0x000250c0
     7e4:	00024fd8 	.word	0x00024fd8
     7e8:	00027cb6 	.word	0x00027cb6
     7ec:	00027d8a 	.word	0x00027d8a
     7f0:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
     7f4:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
     7f6:	483b      	ldr	r0, [pc, #236]	; (8e4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe4>)
	rp.info = (void *)rsp->data;
     7f8:	689f      	ldr	r7, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
     7fa:	f8b7 2001 	ldrh.w	r2, [r7, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
     7fe:	2a03      	cmp	r2, #3
		return plat_str[platform];
     800:	bf96      	itet	ls
     802:	4939      	ldrls	r1, [pc, #228]	; (8e8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe8>)
	return "unknown";
     804:	4939      	ldrhi	r1, [pc, #228]	; (8ec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xec>)
		return plat_str[platform];
     806:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
     80a:	f046 0303 	orr.w	r3, r6, #3
     80e:	f01f fb57 	bl	1fec0 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     812:	f8b7 1001 	ldrh.w	r1, [r7, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
     816:	f8b7 2003 	ldrh.w	r2, [r7, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     81a:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
     81c:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     820:	d12e      	bne.n	880 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x80>
	if (variant < ARRAY_SIZE(nordic_str)) {
     822:	2a03      	cmp	r2, #3
     824:	d82c      	bhi.n	880 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x80>
		return nordic_str[variant];
     826:	4932      	ldr	r1, [pc, #200]	; (8f0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xf0>)
     828:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
     82c:	4831      	ldr	r0, [pc, #196]	; (8f4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xf4>)
     82e:	f01f fb47 	bl	1fec0 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     832:	797a      	ldrb	r2, [r7, #5]
     834:	4830      	ldr	r0, [pc, #192]	; (8f8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xf8>)
	if (variant < ARRAY_SIZE(var_str)) {
     836:	2a03      	cmp	r2, #3
		return var_str[variant];
     838:	bf96      	itet	ls
     83a:	4930      	ldrls	r1, [pc, #192]	; (8fc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xfc>)
	return "unknown";
     83c:	492b      	ldrhi	r1, [pc, #172]	; (8ec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xec>)
		return var_str[variant];
     83e:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     842:	e9cd 1203 	strd	r1, r2, [sp, #12]
     846:	79ba      	ldrb	r2, [r7, #6]
     848:	9205      	str	r2, [sp, #20]
     84a:	f8b7 2007 	ldrh.w	r2, [r7, #7]
     84e:	9206      	str	r2, [sp, #24]
     850:	f8d7 2009 	ldr.w	r2, [r7, #9]
     854:	9207      	str	r2, [sp, #28]
     856:	f046 0303 	orr.w	r3, r6, #3
     85a:	2205      	movs	r2, #5
     85c:	a903      	add	r1, sp, #12
     85e:	f01f fb64 	bl	1ff2a <log_n>
	net_buf_unref(rsp);
     862:	9802      	ldr	r0, [sp, #8]
     864:	f01c fc5a 	bl	1d11c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
     868:	aa02      	add	r2, sp, #8
     86a:	2100      	movs	r1, #0
     86c:	f64f 4002 	movw	r0, #64514	; 0xfc02
     870:	f007 fd3e 	bl	82f0 <bt_hci_cmd_send_sync>
	if (err) {
     874:	4607      	mov	r7, r0
     876:	b128      	cbz	r0, 884 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x84>
		BT_WARN("Failed to read supported vendor commands");
     878:	4821      	ldr	r0, [pc, #132]	; (900 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x100>)
     87a:	f046 0102 	orr.w	r1, r6, #2
     87e:	e76e      	b.n	75e <CONFIG_BT_COMPANY_ID+0x16d>
		return "unknown";
     880:	491a      	ldr	r1, [pc, #104]	; (8ec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xec>)
     882:	e7d3      	b.n	82c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2c>
	rp.cmds = (void *)rsp->data;
     884:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
     886:	481f      	ldr	r0, [pc, #124]	; (904 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x104>)
     888:	6899      	ldr	r1, [r3, #8]
     88a:	2202      	movs	r2, #2
     88c:	3101      	adds	r1, #1
     88e:	f020 ffaa 	bl	217e6 <memcpy>
	net_buf_unref(rsp);
     892:	9802      	ldr	r0, [sp, #8]
     894:	f01c fc42 	bl	1d11c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
     898:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
     89c:	075b      	lsls	r3, r3, #29
     89e:	f57f af60 	bpl.w	762 <CONFIG_BT_COMPANY_ID+0x171>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
     8a2:	aa02      	add	r2, sp, #8
     8a4:	4639      	mov	r1, r7
     8a6:	f64f 4003 	movw	r0, #64515	; 0xfc03
     8aa:	f007 fd21 	bl	82f0 <bt_hci_cmd_send_sync>
		if (err) {
     8ae:	b118      	cbz	r0, 8b8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb8>
			BT_WARN("Failed to read supported vendor features");
     8b0:	4815      	ldr	r0, [pc, #84]	; (908 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x108>)
     8b2:	f046 0102 	orr.w	r1, r6, #2
     8b6:	e752      	b.n	75e <CONFIG_BT_COMPANY_ID+0x16d>
		rp.feat = (void *)rsp->data;
     8b8:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
     8ba:	4814      	ldr	r0, [pc, #80]	; (90c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x10c>)
     8bc:	6899      	ldr	r1, [r3, #8]
     8be:	2201      	movs	r2, #1
     8c0:	4411      	add	r1, r2
     8c2:	f020 ff90 	bl	217e6 <memcpy>
		net_buf_unref(rsp);
     8c6:	9802      	ldr	r0, [sp, #8]
     8c8:	f01c fc28 	bl	1d11c <net_buf_unref>
     8cc:	e749      	b.n	762 <CONFIG_BT_COMPANY_ID+0x171>
		err = set_random_address(&bt_dev.id_addr[0].a);
     8ce:	4810      	ldr	r0, [pc, #64]	; (910 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x110>)
     8d0:	f007 fdb0 	bl	8434 <set_random_address>
		if (err) {
     8d4:	4604      	mov	r4, r0
     8d6:	2800      	cmp	r0, #0
     8d8:	f43f ae16 	beq.w	508 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
			BT_ERR("Unable to set random address");
     8dc:	480d      	ldr	r0, [pc, #52]	; (914 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x114>)
     8de:	f046 0101 	orr.w	r1, r6, #1
     8e2:	e751      	b.n	788 <CONFIG_BT_COMPANY_ID+0x197>
     8e4:	00027cda 	.word	0x00027cda
     8e8:	000255e8 	.word	0x000255e8
     8ec:	00027599 	.word	0x00027599
     8f0:	000255a8 	.word	0x000255a8
     8f4:	00027cf3 	.word	0x00027cf3
     8f8:	00027d0b 	.word	0x00027d0b
     8fc:	00025620 	.word	0x00025620
     900:	00027d38 	.word	0x00027d38
     904:	20000085 	.word	0x20000085
     908:	00027d61 	.word	0x00027d61
     90c:	20000084 	.word	0x20000084
     910:	20000001 	.word	0x20000001
     914:	00027da9 	.word	0x00027da9

00000918 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     91c:	e9d0 c70b 	ldrd	ip, r7, [r0, #44]	; 0x2c
	start_to_address_actual_us =
     920:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     924:	eb0c 0407 	add.w	r4, ip, r7
	start_to_address_expected_us = EVENT_JITTER_US +
     928:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     92a:	45a0      	cmp	r8, r4
{
     92c:	460e      	mov	r6, r1
     92e:	4615      	mov	r5, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     930:	d818      	bhi.n	964 <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     932:	4f1b      	ldr	r7, [pc, #108]	; (9a0 <ull_drift_ticks_get+0x88>)
     934:	a318      	add	r3, pc, #96	; (adr r3, 998 <ull_drift_ticks_get+0x80>)
     936:	e9d3 2300 	ldrd	r2, r3, [r3]
     93a:	fbac 0107 	umull	r0, r1, ip, r7
     93e:	f7ff fbdf 	bl	100 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     942:	eba4 0408 	sub.w	r4, r4, r8
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     946:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     94a:	6030      	str	r0, [r6, #0]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     94c:	a312      	add	r3, pc, #72	; (adr r3, 998 <ull_drift_ticks_get+0x80>)
     94e:	e9d3 2300 	ldrd	r2, r3, [r3]
     952:	fba4 0107 	umull	r0, r1, r4, r7
     956:	f7ff fbd3 	bl	100 <__aeabi_uldivmod>
     95a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     95e:	6028      	str	r0, [r5, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     964:	4c0e      	ldr	r4, [pc, #56]	; (9a0 <ull_drift_ticks_get+0x88>)
     966:	a30c      	add	r3, pc, #48	; (adr r3, 998 <ull_drift_ticks_get+0x80>)
     968:	e9d3 2300 	ldrd	r2, r3, [r3]
     96c:	fba8 0104 	umull	r0, r1, r8, r4
     970:	f7ff fbc6 	bl	100 <__aeabi_uldivmod>
     974:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     978:	f107 0030 	add.w	r0, r7, #48	; 0x30
		*ticks_drift_plus =
     97c:	6033      	str	r3, [r6, #0]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     97e:	fba0 0104 	umull	r0, r1, r0, r4
     982:	a305      	add	r3, pc, #20	; (adr r3, 998 <ull_drift_ticks_get+0x80>)
     984:	e9d3 2300 	ldrd	r2, r3, [r3]
     988:	f7ff fbba 	bl	100 <__aeabi_uldivmod>
     98c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     990:	6028      	str	r0, [r5, #0]
}
     992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     996:	bf00      	nop
     998:	1afd498d 	.word	0x1afd498d
     99c:	00000007 	.word	0x00000007
     9a0:	3b9aca00 	.word	0x3b9aca00
     9a4:	00000000 	.word	0x00000000

000009a8 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9ac:	4ca9      	ldr	r4, [pc, #676]	; (c54 <ll_adv_enable+0x2ac>)
     9ae:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
     9b2:	b08f      	sub	sp, #60	; 0x3c
     9b4:	f006 0601 	and.w	r6, r6, #1
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
     9b8:	2800      	cmp	r0, #0
     9ba:	f000 8155 	beq.w	c68 <ll_adv_enable+0x2c0>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     9be:	bbb6      	cbnz	r6, a2e <ll_adv_enable+0x86>
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     9c0:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     9c4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
	ull_filter_adv_update(lll->filter_policy);
     9c8:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     9cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     9d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     9d4:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
     9d8:	21ff      	movs	r1, #255	; 0xff
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     9da:	f8d2 803c 	ldr.w	r8, [r2, #60]	; 0x3c
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     9de:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
     9e2:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
	ull_filter_adv_update(lll->filter_policy);
     9e6:	f018 f9d5 	bl	18d94 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     9ea:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
     9ee:	0742      	lsls	r2, r0, #29
     9f0:	f100 8114 	bmi.w	c1c <ll_adv_enable+0x274>
	if (pdu_adv_to_update) {
     9f4:	f1b9 0f00 	cmp.w	r9, #0
     9f8:	d011      	beq.n	a1e <ll_adv_enable+0x76>
		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
     9fa:	4896      	ldr	r0, [pc, #600]	; (c54 <ll_adv_enable+0x2ac>)
     9fc:	4649      	mov	r1, r9
     9fe:	f013 ff6f 	bl	148e0 <ull_adv_pdu_update_addrs>
		if (pdu_adv_to_update->tx_addr &&
     a02:	f899 3000 	ldrb.w	r3, [r9]
     a06:	065b      	lsls	r3, r3, #25
     a08:	d505      	bpl.n	a16 <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
     a0a:	2106      	movs	r1, #6
     a0c:	f00e fe04 	bl	f618 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
     a10:	2800      	cmp	r0, #0
     a12:	f000 8246 	beq.w	ea2 <ll_adv_enable+0x4fa>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
     a16:	488f      	ldr	r0, [pc, #572]	; (c54 <ll_adv_enable+0x2ac>)
     a18:	4641      	mov	r1, r8
     a1a:	f013 ff61 	bl	148e0 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     a1e:	f899 3000 	ldrb.w	r3, [r9]
     a22:	f013 0f0e 	tst.w	r3, #14
     a26:	f040 80cf 	bne.w	bc8 <ll_adv_enable+0x220>
		if (lll->conn) {
     a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
     a2c:	b123      	cbz	r3, a38 <ll_adv_enable+0x90>
	ret = ull_ticker_status_take(ret, &ret_cb);
	if (ret) {
		mark = ull_disable_unmark(adv);
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
     a2e:	260c      	movs	r6, #12
}
     a30:	4630      	mov	r0, r6
     a32:	b00f      	add	sp, #60	; 0x3c
     a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
     a38:	f013 f8ee 	bl	13c18 <ll_rx_link_alloc>
		if (!link) {
     a3c:	4682      	mov	sl, r0
     a3e:	2800      	cmp	r0, #0
     a40:	f000 824c 	beq.w	edc <ll_adv_enable+0x534>
		node_rx = ll_rx_alloc();
     a44:	f013 f8f4 	bl	13c30 <ll_rx_alloc>
		if (!node_rx) {
     a48:	4683      	mov	fp, r0
     a4a:	2800      	cmp	r0, #0
     a4c:	f000 825f 	beq.w	f0e <ll_adv_enable+0x566>
		conn = ll_conn_acquire();
     a50:	f014 fc64 	bl	1531c <ll_conn_acquire>
		if (!conn) {
     a54:	4605      	mov	r5, r0
     a56:	2800      	cmp	r0, #0
     a58:	f000 8256 	beq.w	f08 <ll_adv_enable+0x560>
		conn_lll->handle = 0xFFFF;
     a5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (!conn_lll->link_tx_free) {
     a60:	6f80      	ldr	r0, [r0, #120]	; 0x78
		conn_lll->handle = 0xFFFF;
     a62:	85ab      	strh	r3, [r5, #44]	; 0x2c
		conn_lll = &conn->lll;
     a64:	f105 031c 	add.w	r3, r5, #28
     a68:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
     a6a:	2800      	cmp	r0, #0
     a6c:	f000 8232 	beq.w	ed4 <ll_adv_enable+0x52c>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     a70:	f105 026c 	add.w	r2, r5, #108	; 0x6c
     a74:	f105 0168 	add.w	r1, r5, #104	; 0x68
     a78:	f00e fdda 	bl	f630 <memq_init>
		conn_lll->phy_tx = BIT(0);
     a7c:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
     a80:	4875      	ldr	r0, [pc, #468]	; (c58 <ll_adv_enable+0x2b0>)
		conn_lll->data_chan_sel = 0;
     a82:	f895 103d 	ldrb.w	r1, [r5, #61]	; 0x3d
		conn->common.fex_valid = 0;
     a86:	f895 70dc 	ldrb.w	r7, [r5, #220]	; 0xdc
		conn_lll->slave.latency_enabled = 0;
     a8a:	f895 c040 	ldrb.w	ip, [r5, #64]	; 0x40
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
     a8e:	4b73      	ldr	r3, [pc, #460]	; (c5c <ll_adv_enable+0x2b4>)
     a90:	662b      	str	r3, [r5, #96]	; 0x60
		conn_lll->phy_tx = BIT(0);
     a92:	4002      	ands	r2, r0
     a94:	f442 7288 	orr.w	r2, r2, #272	; 0x110
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     a98:	f895 0126 	ldrb.w	r0, [r5, #294]	; 0x126
		conn->llcp_terminate.node_rx.hdr.link = link;
     a9c:	f8c5 a130 	str.w	sl, [r5, #304]	; 0x130
		conn_lll->phy_tx = BIT(0);
     aa0:	f042 0201 	orr.w	r2, r2, #1
		conn_lll->data_chan_sel = 0;
     aa4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
		conn->common.fex_valid = 0;
     aa8:	f027 0e03 	bic.w	lr, r7, #3
		conn_lll->data_chan_sel = 0;
     aac:	f061 017f 	orn	r1, r1, #127	; 0x7f
		conn_lll->data_chan_use = 0;
     ab0:	2700      	movs	r7, #0
		conn_lll->phy_tx = BIT(0);
     ab2:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     ab6:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     aba:	f020 0003 	bic.w	r0, r0, #3
		conn_lll->data_chan_sel = 0;
     abe:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
		conn_lll->slave.latency_enabled = 0;
     ac2:	f367 0c00 	bfi	ip, r7, #0, #1
		conn->connect_expire = 6;
     ac6:	2106      	movs	r1, #6
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     ac8:	65ea      	str	r2, [r5, #92]	; 0x5c
		conn->llcp_feature.features_conn = LL_FEAT;
     aca:	4a65      	ldr	r2, [pc, #404]	; (c60 <ll_adv_enable+0x2b8>)
		conn->common.fex_valid = 0;
     acc:	f885 e0dc 	strb.w	lr, [r5, #220]	; 0xdc
		conn_lll->slave.latency_enabled = 0;
     ad0:	f885 c040 	strb.w	ip, [r5, #64]	; 0x40
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     ad4:	f885 0126 	strb.w	r0, [r5, #294]	; 0x126
		conn->connect_expire = 6;
     ad8:	f8a5 10c4 	strh.w	r1, [r5, #196]	; 0xc4
		conn->llcp_feature.features_conn = LL_FEAT;
     adc:	f8c5 211c 	str.w	r2, [r5, #284]	; 0x11c
		conn_lll->slave.window_widening_event_us = 0;
     ae0:	e9c5 7713 	strd	r7, r7, [r5, #76]	; 0x4c
		conn_lll->data_chan_use = 0;
     ae4:	f885 703f 	strb.w	r7, [r5, #63]	; 0x3f
		conn_lll->latency_prepare = 0;
     ae8:	866f      	strh	r7, [r5, #50]	; 0x32
		conn_lll->latency_event = 0;
     aea:	636f      	str	r7, [r5, #52]	; 0x34
		conn_lll->slave.window_size_prepare_us = 0;
     aec:	656f      	str	r7, [r5, #84]	; 0x54
		conn->supervision_expire = 0;
     aee:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->procedure_expire = 0;
     af2:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     af6:	f8a5 70e8 	strh.w	r7, [r5, #232]	; 0xe8
     afa:	f885 70ea 	strb.w	r7, [r5, #234]	; 0xea
		conn->llcp_rx = NULL;
     afe:	f8c5 7100 	str.w	r7, [r5, #256]	; 0x100
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     b02:	f8a5 7104 	strh.w	r7, [r5, #260]	; 0x104
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     b06:	f8a5 7118 	strh.w	r7, [r5, #280]	; 0x118
		conn->llcp_feature.features_peer = 0;
     b0a:	f8c5 7120 	str.w	r7, [r5, #288]	; 0x120
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     b0e:	f8a5 7124 	strh.w	r7, [r5, #292]	; 0x124
		conn->llcp_terminate.reason_peer = 0;
     b12:	f885 712f 	strb.w	r7, [r5, #303]	; 0x12f
		conn_lll->link_tx_free = NULL;
     b16:	67af      	str	r7, [r5, #120]	; 0x78
		conn_lll->packet_tx_head_len = 0;
     b18:	f8a5 707c 	strh.w	r7, [r5, #124]	; 0x7c
		conn->llcp_conn_param.disabled = 0;
     b1c:	f895 c172 	ldrb.w	ip, [r5, #370]	; 0x172
		conn->llcp_length.disabled = 0U;
     b20:	f895 019a 	ldrb.w	r0, [r5, #410]	; 0x19a
		conn_lll->sn = 0;
     b24:	f895 107e 	ldrb.w	r1, [r5, #126]	; 0x7e
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     b28:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
     b2c:	f8a5 7150 	strh.w	r7, [r5, #336]	; 0x150
		conn->llcp_conn_param.disabled = 0;
     b30:	f367 1c04 	bfi	ip, r7, #4, #1
		conn_lll->sn = 0;
     b34:	f021 011f 	bic.w	r1, r1, #31
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     b38:	f022 0207 	bic.w	r2, r2, #7
		conn->llcp_length.disabled = 0U;
     b3c:	f367 00c3 	bfi	r0, r7, #3, #1
		conn->llcp_conn_param.disabled = 0;
     b40:	f885 c172 	strb.w	ip, [r5, #370]	; 0x172
		conn_lll->sn = 0;
     b44:	f885 107e 	strb.w	r1, [r5, #126]	; 0x7e
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     b48:	f885 2152 	strb.w	r2, [r5, #338]	; 0x152
		conn->llcp_conn_param.req = 0;
     b4c:	f8a5 7170 	strh.w	r7, [r5, #368]	; 0x170
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
     b50:	f8a5 7198 	strh.w	r7, [r5, #408]	; 0x198
		conn->llcp_length.cache.tx_octets = 0U;
     b54:	f8a5 71a4 	strh.w	r7, [r5, #420]	; 0x1a4
		conn->llcp_length.disabled = 0U;
     b58:	f885 019a 	strb.w	r0, [r5, #410]	; 0x19a
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
     b5c:	f014 fef4 	bl	15948 <ull_conn_default_tx_octets_get>
     b60:	f8a5 00d6 	strh.w	r0, [r5, #214]	; 0xd6
		conn->default_tx_time = ull_conn_default_tx_time_get();
     b64:	f014 fef6 	bl	15954 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     b68:	f8d5 11a8 	ldr.w	r1, [r5, #424]	; 0x1a8
     b6c:	4a3d      	ldr	r2, [pc, #244]	; (c64 <ll_adv_enable+0x2bc>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
     b6e:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     b72:	400a      	ands	r2, r1
     b74:	f8c5 21a8 	str.w	r2, [r5, #424]	; 0x1a8
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     b78:	f014 fef2 	bl	15960 <ull_conn_default_phy_tx_get>
     b7c:	f895 21ac 	ldrb.w	r2, [r5, #428]	; 0x1ac
     b80:	f360 0202 	bfi	r2, r0, #0, #3
     b84:	f885 21ac 	strb.w	r2, [r5, #428]	; 0x1ac
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     b88:	f014 fef0 	bl	1596c <ull_conn_default_phy_rx_get>
		adv->node_rx_cc_free = node_rx;
     b8c:	e9c4 ab11 	strd	sl, fp, [r4, #68]	; 0x44
		lll->conn = conn_lll;
     b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b92:	6263      	str	r3, [r4, #36]	; 0x24
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     b94:	f895 21ac 	ldrb.w	r2, [r5, #428]	; 0x1ac
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
     b98:	f895 3020 	ldrb.w	r3, [r5, #32]
		conn->tx_data = conn->tx_data_last = 0;
     b9c:	f8c5 71c0 	str.w	r7, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     ba0:	f360 02c5 	bfi	r2, r0, #3, #3
     ba4:	f367 0300 	bfi	r3, r7, #0, #1
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     ba8:	e9c5 776e 	strd	r7, r7, [r5, #440]	; 0x1b8
     bac:	e9c5 776c 	strd	r7, r7, [r5, #432]	; 0x1b0
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
     bb0:	e9c5 7705 	strd	r7, r7, [r5, #20]
	hdr->parent = parent;
     bb4:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     bb6:	f885 21ac 	strb.w	r2, [r5, #428]	; 0x1ac
	hdr->is_stop = 0U;
     bba:	f885 3020 	strb.w	r3, [r5, #32]
		err = lll_clock_wait();
     bbe:	f019 fb31 	bl	1a224 <lll_clock_wait>
		if (err) {
     bc2:	2800      	cmp	r0, #0
     bc4:	f040 816f 	bne.w	ea6 <ll_adv_enable+0x4fe>
	uint8_t ch_map = lll->chan_map;
     bc8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     bcc:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     bce:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     bd2:	a80d      	add	r0, sp, #52	; 0x34
	uint8_t ch_map = lll->chan_map;
     bd4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     bd8:	f00e fea2 	bl	f920 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     bdc:	b390      	cbz	r0, c44 <ll_adv_enable+0x29c>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     bde:	f899 3000 	ldrb.w	r3, [r9]
     be2:	f003 030f 	and.w	r3, r3, #15
     be6:	2b02      	cmp	r3, #2
     be8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
     bec:	f000 80a1 	beq.w	d32 <ll_adv_enable+0x38a>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     bf0:	2b01      	cmp	r3, #1
     bf2:	f000 815c 	beq.w	eae <ll_adv_enable+0x506>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
     bf6:	f898 0001 	ldrb.w	r0, [r8, #1]
     bfa:	3010      	adds	r0, #16
		const uint16_t scan_rsp_us =
     bfc:	00c0      	lsls	r0, r0, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
     bfe:	2b00      	cmp	r3, #0
     c00:	f040 8147 	bne.w	e92 <ll_adv_enable+0x4ea>
				adv_size += pdu_adv->len;
     c04:	f899 3001 	ldrb.w	r3, [r9, #1]
     c08:	3310      	adds	r3, #16
     c0a:	00db      	lsls	r3, r3, #3
     c0c:	f503 714d 	add.w	r1, r3, #820	; 0x334
     c10:	4408      	add	r0, r1
     c12:	f503 739a 	add.w	r3, r3, #308	; 0x134
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     c16:	fb03 0002 	mla	r0, r3, r2, r0
     c1a:	e095      	b.n	d48 <ll_adv_enable+0x3a0>
		lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
     c1c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     c20:	4632      	mov	r2, r6
     c22:	f104 014f 	add.w	r1, r4, #79	; 0x4f
     c26:	f018 fa31 	bl	1908c <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
     c2a:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
     c2c:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
		if (lll->rl_idx != FILTER_IDX_NONE) {
     c30:	f43f aee0 	beq.w	9f4 <ll_adv_enable+0x4c>
			ull_filter_rpa_update(false);
     c34:	4630      	mov	r0, r6
     c36:	f018 f8f3 	bl	18e20 <ull_filter_rpa_update>
	if (pdu_adv_to_update) {
     c3a:	f1b9 0f00 	cmp.w	r9, #0
     c3e:	f47f aedc 	bne.w	9fa <ll_adv_enable+0x52>
     c42:	e6ec      	b.n	a1e <ll_adv_enable+0x76>
	if (adv->lll.conn) {
     c44:	6a63      	ldr	r3, [r4, #36]	; 0x24
     c46:	2b00      	cmp	r3, #0
     c48:	f43f aef1 	beq.w	a2e <ll_adv_enable+0x86>
		conn_release(adv);
     c4c:	f013 fbda 	bl	14404 <conn_release.constprop.0>
     c50:	e6ed      	b.n	a2e <ll_adv_enable+0x86>
     c52:	bf00      	nop
     c54:	20001e7c 	.word	0x20001e7c
     c58:	fffff880 	.word	0xfffff880
     c5c:	01480148 	.word	0x01480148
     c60:	000149ff 	.word	0x000149ff
     c64:	f6ff0000 	.word	0xf6ff0000
	if (!adv || !adv->is_enabled) {
     c68:	2e00      	cmp	r6, #0
     c6a:	f43f aee0 	beq.w	a2e <ll_adv_enable+0x86>
	mark = ull_disable_mark(adv);
     c6e:	4620      	mov	r0, r4
     c70:	f013 f888 	bl	13d84 <ull_disable_mark>
	LL_ASSERT(mark == adv);
     c74:	4284      	cmp	r4, r0
     c76:	d00c      	beq.n	c92 <ll_adv_enable+0x2ea>
     c78:	4aaf      	ldr	r2, [pc, #700]	; (f38 <ll_adv_enable+0x590>)
     c7a:	49b0      	ldr	r1, [pc, #704]	; (f3c <ll_adv_enable+0x594>)
     c7c:	48b0      	ldr	r0, [pc, #704]	; (f40 <ll_adv_enable+0x598>)
     c7e:	f240 737d 	movw	r3, #1917	; 0x77d
     c82:	f01e fd38 	bl	1f6f6 <printk>
     c86:	4040      	eors	r0, r0
     c88:	f380 8811 	msr	BASEPRI, r0
     c8c:	f04f 0003 	mov.w	r0, #3
     c90:	df02      	svc	2
	if (adv->lll.is_hdcd) {
     c92:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     c96:	07d9      	lsls	r1, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     c98:	ad0d      	add	r5, sp, #52	; 0x34
	if (adv->lll.is_hdcd) {
     c9a:	d50e      	bpl.n	cba <ll_adv_enable+0x312>
		ret_cb = TICKER_STATUS_BUSY;
     c9c:	2202      	movs	r2, #2
     c9e:	920d      	str	r2, [sp, #52]	; 0x34
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     ca0:	2103      	movs	r1, #3
     ca2:	4ba8      	ldr	r3, [pc, #672]	; (f44 <ll_adv_enable+0x59c>)
     ca4:	9500      	str	r5, [sp, #0]
     ca6:	2201      	movs	r2, #1
     ca8:	2000      	movs	r0, #0
     caa:	f010 f94f 	bl	10f4c <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
     cae:	4629      	mov	r1, r5
     cb0:	f013 f840 	bl	13d34 <ull_ticker_status_take>
		if (ret) {
     cb4:	2800      	cmp	r0, #0
     cb6:	f040 812f 	bne.w	f18 <ll_adv_enable+0x570>
	ret_cb = TICKER_STATUS_BUSY;
     cba:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
     cbc:	2103      	movs	r1, #3
     cbe:	4ba1      	ldr	r3, [pc, #644]	; (f44 <ll_adv_enable+0x59c>)
     cc0:	9500      	str	r5, [sp, #0]
     cc2:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
     cc4:	920d      	str	r2, [sp, #52]	; 0x34
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
     cc6:	f010 f941 	bl	10f4c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
     cca:	4629      	mov	r1, r5
     ccc:	f013 f832 	bl	13d34 <ull_ticker_status_take>
	if (ret) {
     cd0:	2800      	cmp	r0, #0
     cd2:	f040 8105 	bne.w	ee0 <ll_adv_enable+0x538>
	}

	ret = ull_disable(&adv->lll);
     cd6:	489c      	ldr	r0, [pc, #624]	; (f48 <ll_adv_enable+0x5a0>)
     cd8:	f013 f890 	bl	13dfc <ull_disable>
	LL_ASSERT(!ret);
     cdc:	2800      	cmp	r0, #0
     cde:	f040 80eb 	bne.w	eb8 <ll_adv_enable+0x510>

	mark = ull_disable_unmark(adv);
     ce2:	489a      	ldr	r0, [pc, #616]	; (f4c <ll_adv_enable+0x5a4>)
     ce4:	f013 f85a 	bl	13d9c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
     ce8:	4284      	cmp	r4, r0
     cea:	d00c      	beq.n	d06 <ll_adv_enable+0x35e>
     cec:	4a92      	ldr	r2, [pc, #584]	; (f38 <ll_adv_enable+0x590>)
     cee:	4993      	ldr	r1, [pc, #588]	; (f3c <ll_adv_enable+0x594>)
     cf0:	4893      	ldr	r0, [pc, #588]	; (f40 <ll_adv_enable+0x598>)
     cf2:	f240 739f 	movw	r3, #1951	; 0x79f
     cf6:	f01e fcfe 	bl	1f6f6 <printk>
     cfa:	4040      	eors	r0, r0
     cfc:	f380 8811 	msr	BASEPRI, r0
     d00:	f04f 0003 	mov.w	r0, #3
     d04:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
     d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
     d08:	b10b      	cbz	r3, d0e <ll_adv_enable+0x366>
		conn_release(adv);
     d0a:	f013 fb7b 	bl	14404 <conn_release.constprop.0>
		ll_rx_link_release(node_rx_adv_term->hdr.link);
		ll_rx_release(node_rx_adv_term);
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	adv->is_enabled = 0U;
     d0e:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e

#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
     d12:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
     d14:	f36f 0300 	bfc	r3, #0, #1
     d18:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
     d1c:	f013 ff00 	bl	14b20 <ull_scan_is_enabled_get>
     d20:	4606      	mov	r6, r0
     d22:	2800      	cmp	r0, #0
     d24:	f000 8082 	beq.w	e2c <ll_adv_enable+0x484>
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
     d28:	2600      	movs	r6, #0
}
     d2a:	4630      	mov	r0, r6
     d2c:	b00f      	add	sp, #60	; 0x3c
     d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			adv_size += pdu_adv->len;
     d32:	f899 3001 	ldrb.w	r3, [r9, #1]
     d36:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     d38:	00db      	lsls	r3, r3, #3
     d3a:	fb00 f003 	mul.w	r0, r0, r3
     d3e:	f500 70aa 	add.w	r0, r0, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
     d42:	2364      	movs	r3, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     d44:	fb03 0002 	mla	r0, r3, r2, r0
     d48:	f894 7020 	ldrb.w	r7, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     d4c:	4a80      	ldr	r2, [pc, #512]	; (f50 <ll_adv_enable+0x5a8>)
	hdr->parent = parent;
     d4e:	61e4      	str	r4, [r4, #28]
     d50:	2500      	movs	r5, #0
	adv->evt.ticks_xtal_to_start =
     d52:	2331      	movs	r3, #49	; 0x31
	hdr->is_stop = 0U;
     d54:	f365 0700 	bfi	r7, r5, #0, #1
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     d58:	fba0 0102 	umull	r0, r1, r0, r2
	adv->evt.ticks_xtal_to_start =
     d5c:	6023      	str	r3, [r4, #0]
     d5e:	f884 7020 	strb.w	r7, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     d62:	a373      	add	r3, pc, #460	; (adr r3, f30 <ll_adv_enable+0x588>)
     d64:	e9d3 2300 	ldrd	r2, r3, [r3]
     d68:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_preempt_to_start =
     d6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     d70:	f7ff f9c6 	bl	100 <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
     d74:	f8b4 804c 	ldrh.w	r8, [r4, #76]	; 0x4c
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     d78:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
     d7a:	f010 f98b 	bl	11094 <ticker_ticks_now_get>
     d7e:	4607      	mov	r7, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     d80:	f1b8 0f00 	cmp.w	r8, #0
     d84:	d108      	bne.n	d98 <ll_adv_enable+0x3f0>
     d86:	f899 5000 	ldrb.w	r5, [r9]
     d8a:	f005 050f 	and.w	r5, r5, #15
     d8e:	f1a5 0501 	sub.w	r5, r5, #1
     d92:	fab5 f585 	clz	r5, r5
     d96:	096d      	lsrs	r5, r5, #5
     d98:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     d9c:	68e3      	ldr	r3, [r4, #12]
     d9e:	f365 0200 	bfi	r2, r5, #0, #1
	if (lll->is_hdcd) {
     da2:	f012 0501 	ands.w	r5, r2, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     da6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	if (lll->is_hdcd) {
     daa:	d042      	beq.n	e32 <ll_adv_enable+0x48a>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     dac:	f8df 9194 	ldr.w	r9, [pc, #404]	; f44 <ll_adv_enable+0x59c>
     db0:	4968      	ldr	r1, [pc, #416]	; (f54 <ll_adv_enable+0x5ac>)
     db2:	9304      	str	r3, [sp, #16]
     db4:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
     db6:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     db8:	f10d 0830 	add.w	r8, sp, #48	; 0x30
     dbc:	9301      	str	r3, [sp, #4]
     dbe:	9105      	str	r1, [sp, #20]
     dc0:	e9cd 9807 	strd	r9, r8, [sp, #28]
     dc4:	2103      	movs	r1, #3
     dc6:	e9cd 0002 	strd	r0, r0, [sp, #8]
     dca:	9406      	str	r4, [sp, #24]
     dcc:	462a      	mov	r2, r5
     dce:	9000      	str	r0, [sp, #0]
     dd0:	463b      	mov	r3, r7
		ret_cb = TICKER_STATUS_BUSY;
     dd2:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     dd4:	f010 f84e 	bl	10e74 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     dd8:	4641      	mov	r1, r8
     dda:	f012 ffab 	bl	13d34 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     dde:	2800      	cmp	r0, #0
     de0:	f47f af30 	bne.w	c44 <ll_adv_enable+0x29c>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     de4:	495c      	ldr	r1, [pc, #368]	; (f58 <ll_adv_enable+0x5b0>)
     de6:	9105      	str	r1, [sp, #20]
     de8:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
     dec:	9200      	str	r2, [sp, #0]
     dee:	e9cd 9807 	strd	r9, r8, [sp, #28]
     df2:	e9cd 0003 	strd	r0, r0, [sp, #12]
     df6:	e9cd 0001 	strd	r0, r0, [sp, #4]
     dfa:	9406      	str	r4, [sp, #24]
     dfc:	463b      	mov	r3, r7
     dfe:	2201      	movs	r2, #1
     e00:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
     e02:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     e04:	f010 f836 	bl	10e74 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     e08:	4641      	mov	r1, r8
     e0a:	f012 ff93 	bl	13d34 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     e0e:	2800      	cmp	r0, #0
     e10:	f47f af18 	bne.w	c44 <ll_adv_enable+0x29c>
	adv->is_enabled = 1;
     e14:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
     e18:	f043 0301 	orr.w	r3, r3, #1
     e1c:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
     e20:	f013 fe7e 	bl	14b20 <ull_scan_is_enabled_get>
     e24:	2800      	cmp	r0, #0
     e26:	f47f af7f 	bne.w	d28 <ll_adv_enable+0x380>
		ull_filter_adv_scan_state_cb(BIT(0));
     e2a:	2001      	movs	r0, #1
     e2c:	f017 ffa0 	bl	18d70 <ull_filter_adv_scan_state_cb>
     e30:	e5fe      	b.n	a30 <ll_adv_enable+0x88>
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     e32:	484a      	ldr	r0, [pc, #296]	; (f5c <ll_adv_enable+0x5b4>)
		ll_adv_ticker_ext[handle].ticks_slot_window =
     e34:	4a4a      	ldr	r2, [pc, #296]	; (f60 <ll_adv_enable+0x5b8>)
		ret = ticker_start_ext(
     e36:	f8df e10c 	ldr.w	lr, [pc, #268]	; f44 <ll_adv_enable+0x59c>
     e3a:	f8df c118 	ldr.w	ip, [pc, #280]	; f54 <ll_adv_enable+0x5ac>
     e3e:	9406      	str	r4, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     e40:	fba8 0100 	umull	r0, r1, r8, r0
     e44:	f04f 0991 	mov.w	r9, #145	; 0x91
     e48:	fb09 1108 	mla	r1, r9, r8, r1
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     e4c:	f203 1847 	addw	r8, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
     e50:	f8c2 8000 	str.w	r8, [r2]
		ret_cb = TICKER_STATUS_BUSY;
     e54:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
     e58:	9304      	str	r3, [sp, #16]
     e5a:	9209      	str	r2, [sp, #36]	; 0x24
     e5c:	f10d 0830 	add.w	r8, sp, #48	; 0x30
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     e60:	a333      	add	r3, pc, #204	; (adr r3, f30 <ll_adv_enable+0x588>)
     e62:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
     e66:	f64f 7aff 	movw	sl, #65535	; 0xffff
     e6a:	e9cd e807 	strd	lr, r8, [sp, #28]
     e6e:	9502      	str	r5, [sp, #8]
		ret_cb = TICKER_STATUS_BUSY;
     e70:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
		ret = ticker_start_ext(
     e74:	f8cd c014 	str.w	ip, [sp, #20]
     e78:	f8cd a00c 	str.w	sl, [sp, #12]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     e7c:	f7ff f940 	bl	100 <__aeabi_uldivmod>
		ret = ticker_start_ext(
     e80:	464a      	mov	r2, r9
     e82:	e9cd 5000 	strd	r5, r0, [sp]
     e86:	463b      	mov	r3, r7
     e88:	4628      	mov	r0, r5
     e8a:	2103      	movs	r1, #3
     e8c:	f00f ff9c 	bl	10dc8 <ticker_start_ext>
     e90:	e7ba      	b.n	e08 <ll_adv_enable+0x460>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
     e92:	2b06      	cmp	r3, #6
     e94:	f43f aeb6 	beq.w	c04 <ll_adv_enable+0x25c>
     e98:	f44f 73da 	mov.w	r3, #436	; 0x1b4
     e9c:	f44f 701b 	mov.w	r0, #620	; 0x26c
     ea0:	e6b9      	b.n	c16 <ll_adv_enable+0x26e>
			return BT_HCI_ERR_INVALID_PARAM;
     ea2:	2612      	movs	r6, #18
     ea4:	e5c4      	b.n	a30 <ll_adv_enable+0x88>
			conn_release(adv);
     ea6:	f013 faad 	bl	14404 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
     eaa:	2603      	movs	r6, #3
     eac:	e5c0      	b.n	a30 <ll_adv_enable+0x88>
     eae:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
     eb2:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
     eb6:	e6ae      	b.n	c16 <ll_adv_enable+0x26e>
	LL_ASSERT(!ret);
     eb8:	4a1f      	ldr	r2, [pc, #124]	; (f38 <ll_adv_enable+0x590>)
     eba:	492a      	ldr	r1, [pc, #168]	; (f64 <ll_adv_enable+0x5bc>)
     ebc:	4820      	ldr	r0, [pc, #128]	; (f40 <ll_adv_enable+0x598>)
     ebe:	f240 739c 	movw	r3, #1948	; 0x79c
     ec2:	f01e fc18 	bl	1f6f6 <printk>
     ec6:	4040      	eors	r0, r0
     ec8:	f380 8811 	msr	BASEPRI, r0
     ecc:	f04f 0003 	mov.w	r0, #3
     ed0:	df02      	svc	2
     ed2:	e706      	b.n	ce2 <ll_adv_enable+0x33a>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     ed4:	f105 0070 	add.w	r0, r5, #112	; 0x70
     ed8:	67a8      	str	r0, [r5, #120]	; 0x78
     eda:	e5c9      	b.n	a70 <ll_adv_enable+0xc8>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     edc:	2607      	movs	r6, #7
     ede:	e5a7      	b.n	a30 <ll_adv_enable+0x88>
		mark = ull_disable_unmark(adv);
     ee0:	481a      	ldr	r0, [pc, #104]	; (f4c <ll_adv_enable+0x5a4>)
     ee2:	f012 ff5b 	bl	13d9c <ull_disable_unmark>
		LL_ASSERT(mark == adv);
     ee6:	4284      	cmp	r4, r0
     ee8:	f43f ada1 	beq.w	a2e <ll_adv_enable+0x86>
     eec:	f240 7396 	movw	r3, #1942	; 0x796
     ef0:	4a11      	ldr	r2, [pc, #68]	; (f38 <ll_adv_enable+0x590>)
     ef2:	4912      	ldr	r1, [pc, #72]	; (f3c <ll_adv_enable+0x594>)
     ef4:	4812      	ldr	r0, [pc, #72]	; (f40 <ll_adv_enable+0x598>)
     ef6:	f01e fbfe 	bl	1f6f6 <printk>
     efa:	4040      	eors	r0, r0
     efc:	f380 8811 	msr	BASEPRI, r0
     f00:	f04f 0003 	mov.w	r0, #3
     f04:	df02      	svc	2
     f06:	e592      	b.n	a2e <ll_adv_enable+0x86>
			ll_rx_release(node_rx);
     f08:	4658      	mov	r0, fp
     f0a:	f012 fe97 	bl	13c3c <ll_rx_release>
			ll_rx_link_release(link);
     f0e:	4650      	mov	r0, sl
     f10:	f012 fe88 	bl	13c24 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     f14:	2607      	movs	r6, #7
     f16:	e58b      	b.n	a30 <ll_adv_enable+0x88>
			mark = ull_disable_unmark(adv);
     f18:	480c      	ldr	r0, [pc, #48]	; (f4c <ll_adv_enable+0x5a4>)
     f1a:	f012 ff3f 	bl	13d9c <ull_disable_unmark>
			LL_ASSERT(mark == adv);
     f1e:	4284      	cmp	r4, r0
     f20:	f43f ad85 	beq.w	a2e <ll_adv_enable+0x86>
     f24:	f44f 63f1 	mov.w	r3, #1928	; 0x788
     f28:	e7e2      	b.n	ef0 <ll_adv_enable+0x548>
     f2a:	bf00      	nop
     f2c:	f3af 8000 	nop.w
     f30:	1afd498d 	.word	0x1afd498d
     f34:	00000007 	.word	0x00000007
     f38:	00025d6c 	.word	0x00025d6c
     f3c:	00025e5c 	.word	0x00025e5c
     f40:	00025984 	.word	0x00025984
     f44:	00012ae5 	.word	0x00012ae5
     f48:	20001e98 	.word	0x20001e98
     f4c:	20001e7c 	.word	0x20001e7c
     f50:	3b9aca00 	.word	0x3b9aca00
     f54:	00014171 	.word	0x00014171
     f58:	0001437d 	.word	0x0001437d
     f5c:	84e72a00 	.word	0x84e72a00
     f60:	20001ed4 	.word	0x20001ed4
     f64:	00025c48 	.word	0x00025c48

00000f68 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
     f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
     f6a:	4e19      	ldr	r6, [pc, #100]	; (fd0 <ll_scan_params_set+0x68>)
{
     f6c:	f89d 4018 	ldrb.w	r4, [sp, #24]
	if (!scan || scan->is_enabled) {
     f70:	f896 5048 	ldrb.w	r5, [r6, #72]	; 0x48
     f74:	f015 0701 	ands.w	r7, r5, #1
     f78:	d121      	bne.n	fbe <ll_scan_params_set+0x56>
	lll->filter_policy = filter_policy;
     f7a:	f896 c032 	ldrb.w	ip, [r6, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     f7e:	f8df e054 	ldr.w	lr, [pc, #84]	; fd4 <ll_scan_params_set+0x6c>
	lll->interval = interval;
     f82:	f8a6 1042 	strh.w	r1, [r6, #66]	; 0x42
	lll->filter_policy = filter_policy;
     f86:	00e4      	lsls	r4, r4, #3
     f88:	f004 0418 	and.w	r4, r4, #24
     f8c:	f00c 0c67 	and.w	ip, ip, #103	; 0x67
     f90:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
	scan->own_addr_type = own_addr_type;
     f94:	f363 0542 	bfi	r5, r3, #1, #2
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     f98:	fba2 010e 	umull	r0, r1, r2, lr
	lll->filter_policy = filter_policy;
     f9c:	ea44 040c 	orr.w	r4, r4, ip
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     fa0:	2391      	movs	r3, #145	; 0x91
     fa2:	fb03 1102 	mla	r1, r3, r2, r1
	scan->own_addr_type = own_addr_type;
     fa6:	f886 5048 	strb.w	r5, [r6, #72]	; 0x48
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     faa:	a307      	add	r3, pc, #28	; (adr r3, fc8 <ll_scan_params_set+0x60>)
     fac:	e9d3 2300 	ldrd	r2, r3, [r3]
	lll->filter_policy = filter_policy;
     fb0:	f886 4032 	strb.w	r4, [r6, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     fb4:	f7ff f8a4 	bl	100 <__aeabi_uldivmod>
     fb8:	6470      	str	r0, [r6, #68]	; 0x44
}
     fba:	4638      	mov	r0, r7
     fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     fbe:	270c      	movs	r7, #12
}
     fc0:	4638      	mov	r0, r7
     fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fc4:	f3af 8000 	nop.w
     fc8:	1afd498d 	.word	0x1afd498d
     fcc:	00000007 	.word	0x00000007
     fd0:	20001ef8 	.word	0x20001ef8
     fd4:	84e72a00 	.word	0x84e72a00

00000fd8 <ull_scan_params_set>:
{
     fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fda:	f89d 4018 	ldrb.w	r4, [sp, #24]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     fde:	4e10      	ldr	r6, [pc, #64]	; (1020 <ull_scan_params_set+0x48>)
{
     fe0:	4605      	mov	r5, r0
	lll->filter_policy = filter_policy;
     fe2:	00e4      	lsls	r4, r4, #3
     fe4:	7d80      	ldrb	r0, [r0, #22]
	lll->interval = interval;
     fe6:	84ea      	strh	r2, [r5, #38]	; 0x26
	lll->filter_policy = filter_policy;
     fe8:	f004 0418 	and.w	r4, r4, #24
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     fec:	fba3 6706 	umull	r6, r7, r3, r6
	lll->filter_policy = filter_policy;
     ff0:	f000 0067 	and.w	r0, r0, #103	; 0x67
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     ff4:	2291      	movs	r2, #145	; 0x91
	lll->filter_policy = filter_policy;
     ff6:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
     ffa:	4301      	orrs	r1, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     ffc:	fb02 7703 	mla	r7, r2, r3, r7
	lll->filter_policy = filter_policy;
    1000:	75a9      	strb	r1, [r5, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1002:	a305      	add	r3, pc, #20	; (adr r3, 1018 <ull_scan_params_set+0x40>)
    1004:	e9d3 2300 	ldrd	r2, r3, [r3]
    1008:	4630      	mov	r0, r6
    100a:	4639      	mov	r1, r7
    100c:	f7ff f878 	bl	100 <__aeabi_uldivmod>
    1010:	62a8      	str	r0, [r5, #40]	; 0x28
}
    1012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1014:	f3af 8000 	nop.w
    1018:	1afd498d 	.word	0x1afd498d
    101c:	00000007 	.word	0x00000007
    1020:	84e72a00 	.word	0x84e72a00
    1024:	00000000 	.word	0x00000000

00001028 <ull_scan_enable>:
{
    1028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	lll->chan = 0;
    102c:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
{
    1030:	4604      	mov	r4, r0
	ll_addr_get(lll->init_addr_type, lll->init_addr);
    1032:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
    1036:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    103a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    103e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1042:	f360 1386 	bfi	r3, r0, #6, #1
{
    1046:	b08d      	sub	sp, #52	; 0x34
	lll->init_addr_type = scan->own_addr_type;
    1048:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	ll_addr_get(lll->init_addr_type, lll->init_addr);
    104c:	f010 f828 	bl	110a0 <ll_addr_get>
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1050:	f8b4 6042 	ldrh.w	r6, [r4, #66]	; 0x42
    1054:	f894 3020 	ldrb.w	r3, [r4, #32]
    1058:	484f      	ldr	r0, [pc, #316]	; (1198 <ull_scan_enable+0x170>)
	hdr->parent = parent;
    105a:	61e4      	str	r4, [r4, #28]
    105c:	2500      	movs	r5, #0
    105e:	fba6 0100 	umull	r0, r1, r6, r0
	hdr->is_stop = 0U;
    1062:	f365 0300 	bfi	r3, r5, #0, #1
    1066:	2291      	movs	r2, #145	; 0x91
    1068:	fb02 1106 	mla	r1, r2, r6, r1
    106c:	e9c4 5505 	strd	r5, r5, [r4, #20]
    1070:	f884 3020 	strb.w	r3, [r4, #32]
    1074:	a346      	add	r3, pc, #280	; (adr r3, 1190 <ull_scan_enable+0x168>)
    1076:	e9d3 2300 	ldrd	r2, r3, [r3]
    107a:	f7ff f841 	bl	100 <__aeabi_uldivmod>
	if ((lll->ticks_window +
    107e:	6c63      	ldr	r3, [r4, #68]	; 0x44
	scan->evt.ticks_active_to_start = 0U;
    1080:	6065      	str	r5, [r4, #4]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1082:	4606      	mov	r6, r0
	if ((lll->ticks_window +
    1084:	3309      	adds	r3, #9
	    (ticks_interval -
    1086:	f1a6 0231 	sub.w	r2, r6, #49	; 0x31
	if ((lll->ticks_window +
    108a:	4293      	cmp	r3, r2
	scan->evt.ticks_xtal_to_start =
    108c:	f04f 0131 	mov.w	r1, #49	; 0x31
	scan->evt.ticks_preempt_to_start =
    1090:	60a5      	str	r5, [r4, #8]
		lll->ticks_window = 0U;
    1092:	bf28      	it	cs
    1094:	6465      	strcs	r5, [r4, #68]	; 0x44
	scan->evt.ticks_xtal_to_start =
    1096:	6021      	str	r1, [r4, #0]
		scan->evt.ticks_slot =
    1098:	bf34      	ite	cc
    109a:	60e3      	strcc	r3, [r4, #12]
			scan->evt.ticks_slot = ticks_interval -
    109c:	60e2      	strcs	r2, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
    109e:	f00f fff9 	bl	11094 <ticker_ticks_now_get>
	if (!lll->conn) {
    10a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
	ticks_anchor = ticker_ticks_now_get();
    10a4:	4680      	mov	r8, r0
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    10a6:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
	if (!lll->conn) {
    10aa:	2d00      	cmp	r5, #0
    10ac:	d04e      	beq.n	114c <ull_scan_enable+0x124>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    10ae:	4d3b      	ldr	r5, [pc, #236]	; (119c <ull_scan_enable+0x174>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    10b0:	f8cd 9020 	str.w	r9, [sp, #32]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    10b4:	f8b4 a042 	ldrh.w	sl, [r4, #66]	; 0x42
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    10b8:	4939      	ldr	r1, [pc, #228]	; (11a0 <ull_scan_enable+0x178>)
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    10ba:	4837      	ldr	r0, [pc, #220]	; (1198 <ull_scan_enable+0x170>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    10bc:	68e2      	ldr	r2, [r4, #12]
    10be:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 11ac <ull_scan_enable+0x184>
    10c2:	9204      	str	r2, [sp, #16]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    10c4:	1b65      	subs	r5, r4, r5
    10c6:	08ad      	lsrs	r5, r5, #2
    10c8:	fba1 3505 	umull	r3, r5, r1, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    10cc:	fbaa 0100 	umull	r0, r1, sl, r0
    10d0:	2391      	movs	r3, #145	; 0x91
    10d2:	fb03 110a 	mla	r1, r3, sl, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    10d6:	4b33      	ldr	r3, [pc, #204]	; (11a4 <ull_scan_enable+0x17c>)
    10d8:	9305      	str	r3, [sp, #20]
    10da:	f04f 0a00 	mov.w	sl, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    10de:	a32c      	add	r3, pc, #176	; (adr r3, 1190 <ull_scan_enable+0x168>)
    10e0:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret_cb = TICKER_STATUS_BUSY;
    10e4:	2702      	movs	r7, #2
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    10e6:	f8cd c01c 	str.w	ip, [sp, #28]
    10ea:	9406      	str	r4, [sp, #24]
	ret_cb = TICKER_STATUS_BUSY;
    10ec:	970b      	str	r7, [sp, #44]	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    10ee:	f8cd a00c 	str.w	sl, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    10f2:	f7ff f805 	bl	100 <__aeabi_uldivmod>
    10f6:	4610      	mov	r0, r2
    10f8:	4619      	mov	r1, r3
    10fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    10fe:	2300      	movs	r3, #0
    1100:	f7fe fffe 	bl	100 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1104:	086d      	lsrs	r5, r5, #1
			   TICKER_USER_ID_THREAD, TICKER_ID_SCAN_BASE + handle,
    1106:	3504      	adds	r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1108:	b2ed      	uxtb	r5, r5
    110a:	462a      	mov	r2, r5
    110c:	9002      	str	r0, [sp, #8]
    110e:	4643      	mov	r3, r8
    1110:	2103      	movs	r1, #3
    1112:	f8cd a000 	str.w	sl, [sp]
    1116:	4650      	mov	r0, sl
    1118:	9601      	str	r6, [sp, #4]
    111a:	f00f feab 	bl	10e74 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    111e:	4649      	mov	r1, r9
    1120:	f012 fe08 	bl	13d34 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1124:	4605      	mov	r5, r0
    1126:	b968      	cbnz	r0, 1144 <ull_scan_enable+0x11c>
	scan->is_enabled = 1U;
    1128:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    112c:	f043 0301 	orr.w	r3, r3, #1
    1130:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ull_adv_is_enabled_get(0))
    1134:	f013 fb2c 	bl	14790 <ull_adv_is_enabled_get>
    1138:	4604      	mov	r4, r0
    113a:	b1f8      	cbz	r0, 117c <ull_scan_enable+0x154>
	return 0;
    113c:	4628      	mov	r0, r5
}
    113e:	b00d      	add	sp, #52	; 0x34
    1140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1144:	200c      	movs	r0, #12
}
    1146:	b00d      	add	sp, #52	; 0x34
    1148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    114c:	68e1      	ldr	r1, [r4, #12]
		uint32_t ticks_ref = 0U;
    114e:	950a      	str	r5, [sp, #40]	; 0x28
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    1150:	464b      	mov	r3, r9
    1152:	aa0a      	add	r2, sp, #40	; 0x28
    1154:	2003      	movs	r0, #3
		uint32_t offset_us = 0U;
    1156:	950b      	str	r5, [sp, #44]	; 0x2c
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    1158:	f002 fb5e 	bl	3818 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
    115c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    115e:	2900      	cmp	r1, #0
    1160:	d0a5      	beq.n	10ae <ull_scan_enable+0x86>
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1162:	4811      	ldr	r0, [pc, #68]	; (11a8 <ull_scan_enable+0x180>)
    1164:	a30a      	add	r3, pc, #40	; (adr r3, 1190 <ull_scan_enable+0x168>)
    1166:	e9d3 2300 	ldrd	r2, r3, [r3]
    116a:	fba1 0100 	umull	r0, r1, r1, r0
    116e:	f7fe ffc7 	bl	100 <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
    1172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1174:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
    1178:	4498      	add	r8, r3
    117a:	e798      	b.n	10ae <ull_scan_enable+0x86>
		ull_filter_adv_scan_state_cb(BIT(1));
    117c:	4638      	mov	r0, r7
    117e:	f017 fdf7 	bl	18d70 <ull_filter_adv_scan_state_cb>
	return 0;
    1182:	4620      	mov	r0, r4
}
    1184:	b00d      	add	sp, #52	; 0x34
    1186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    118a:	bf00      	nop
    118c:	f3af 8000 	nop.w
    1190:	1afd498d 	.word	0x1afd498d
    1194:	00000007 	.word	0x00000007
    1198:	84e72a00 	.word	0x84e72a00
    119c:	20001ef8 	.word	0x20001ef8
    11a0:	1af286bd 	.word	0x1af286bd
    11a4:	00014941 	.word	0x00014941
    11a8:	3b9aca00 	.word	0x3b9aca00
    11ac:	00012ae5 	.word	0x00012ae5

000011b0 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
    11b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11b4:	4604      	mov	r4, r0
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    11b6:	f890 70e9 	ldrb.w	r7, [r0, #233]	; 0xe9
    11ba:	f890 00e8 	ldrb.w	r0, [r0, #232]	; 0xe8
    11be:	4287      	cmp	r7, r0
{
    11c0:	b08d      	sub	sp, #52	; 0x34
    11c2:	460d      	mov	r5, r1
    11c4:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
    11c6:	d00e      	beq.n	11e6 <ull_conn_llcp+0x36>
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    11c8:	1bc0      	subs	r0, r0, r7
    11ca:	f000 0003 	and.w	r0, r0, #3
    11ce:	2802      	cmp	r0, #2
    11d0:	d01b      	beq.n	120a <ull_conn_llcp+0x5a>
			break;
		}
	}

	/* Terminate Procedure Request */
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    11d2:	f894 212d 	ldrb.w	r2, [r4, #301]	; 0x12d
    11d6:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
    11da:	429a      	cmp	r2, r3
    11dc:	d130      	bne.n	1240 <ull_conn_llcp+0x90>
				conn->procedure_expire++;
			}
		}
	}

	return 0;
    11de:	2000      	movs	r0, #0
}
    11e0:	b00d      	add	sp, #52	; 0x34
    11e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !conn->llcp_enc.pause_rx) {
    11e6:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	if ((conn->llcp_ack == conn->llcp_req) &&
    11ea:	f013 0801 	ands.w	r8, r3, #1
    11ee:	d1f0      	bne.n	11d2 <ull_conn_llcp+0x22>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    11f0:	f894 1105 	ldrb.w	r1, [r4, #261]	; 0x105
    11f4:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
    11f8:	428a      	cmp	r2, r1
    11fa:	f000 8398 	beq.w	192e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a6>
			conn->llcp_ack -= 2U;
    11fe:	1eb8      	subs	r0, r7, #2
			conn->llcp_type = LLCP_CONN_UPD;
    1200:	2301      	movs	r3, #1
			conn->llcp_ack -= 2U;
    1202:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
			conn->llcp_type = LLCP_CONN_UPD;
    1206:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    120a:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    120e:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
    1212:	429a      	cmp	r2, r3
    1214:	d006      	beq.n	1224 <ull_conn_llcp+0x74>
			if ((conn->llcp_length.state ==
    1216:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
    121a:	f002 0106 	and.w	r1, r2, #6
    121e:	2904      	cmp	r1, #4
    1220:	f000 83ca 	beq.w	19b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x630>
		switch (conn->llcp_type) {
    1224:	f894 70ea 	ldrb.w	r7, [r4, #234]	; 0xea
    1228:	1e7b      	subs	r3, r7, #1
    122a:	2b05      	cmp	r3, #5
    122c:	f200 8371 	bhi.w	1912 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58a>
    1230:	e8df f013 	tbh	[pc, r3, lsl #1]
    1234:	0308005c 	.word	0x0308005c
    1238:	036f0284 	.word	0x036f0284
    123c:	01b30332 	.word	0x01b30332
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1240:	4829      	ldr	r0, [pc, #164]	; (12e8 <ull_conn_llcp+0x138>)
    1242:	f00e f99f 	bl	f584 <mem_acquire>
		if (tx) {
    1246:	b358      	cbz	r0, 12a0 <ull_conn_llcp+0xf0>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    1248:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
    124c:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1250:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    1252:	2202      	movs	r2, #2
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1254:	f043 0303 	orr.w	r3, r3, #3
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    1258:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    125a:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
    125c:	71c2      	strb	r2, [r0, #7]
					 struct node_tx *tx, bool pause)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* data/ctrl packet is in the head */
	    conn->tx_head &&
    125e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_tx->llctrl.terminate_ind.error_code =
    1262:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
    1266:	7202      	strb	r2, [r0, #8]
	if (
    1268:	b32b      	cbz	r3, 12b6 <ull_conn_llcp+0x106>
#if defined(CONFIG_BT_CTLR_LE_ENC)
	    !conn->llcp_enc.pause_tx &&
    126a:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    126e:	0791      	lsls	r1, r2, #30
    1270:	d421      	bmi.n	12b6 <ull_conn_llcp+0x106>
#endif /* CONFIG_BT_CTLR_LE_ENC */
#if defined(CONFIG_BT_CTLR_PHY)
	    !conn->llcp_phy.pause_tx &&
    1272:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1276:	07d2      	lsls	r2, r2, #31
    1278:	d41d      	bmi.n	12b6 <ull_conn_llcp+0x106>

		/* if data transmitted once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->tx_head == conn->tx_data) {
    127a:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    127e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1280:	bf04      	itt	eq
    1282:	681a      	ldreq	r2, [r3, #0]
    1284:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->tx_ctrl) {
    1288:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    128c:	b9b2      	cbnz	r2, 12bc <ull_conn_llcp+0x10c>
			tx->next = conn->tx_head->next;
    128e:	681a      	ldr	r2, [r3, #0]
    1290:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    1292:	6018      	str	r0, [r3, #0]
			 * control PDU in Encryption Procedure that is not
			 * implicitly paused, will set the control and control
			 * last marker.
			 */
			if (!pause) {
				conn->tx_ctrl = tx;
    1294:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    1296:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
			ctrl_tx_last_enqueue(conn, tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (!tx->next) {
    129a:	b90b      	cbnz	r3, 12a0 <ull_conn_llcp+0xf0>
		conn->tx_data_last = tx;
    129c:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
		if (!conn->procedure_expire) {
    12a0:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
    12a4:	2800      	cmp	r0, #0
    12a6:	d19a      	bne.n	11de <ull_conn_llcp+0x2e>
			conn->procedure_expire = conn->supervision_reload;
    12a8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			if (conn->procedure_expire <= 1U) {
    12ac:	2b01      	cmp	r3, #1
    12ae:	d90e      	bls.n	12ce <ull_conn_llcp+0x11e>
			conn->procedure_expire = conn->supervision_reload;
    12b0:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    12b4:	e793      	b.n	11de <ull_conn_llcp+0x2e>
		if (!conn->tx_ctrl) {
    12b6:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    12ba:	b172      	cbz	r2, 12da <ull_conn_llcp+0x12a>
	tx->next = conn->tx_ctrl_last->next;
    12bc:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    12c0:	681a      	ldr	r2, [r3, #0]
    12c2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    12c4:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    12c6:	6803      	ldr	r3, [r0, #0]
    12c8:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
}
    12cc:	e7e5      	b.n	129a <ull_conn_llcp+0xea>
				conn->procedure_expire++;
    12ce:	3301      	adds	r3, #1
    12d0:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
    12d4:	b00d      	add	sp, #52	; 0x34
    12d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    12da:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    12dc:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    12e0:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    12e4:	e7d9      	b.n	129a <ull_conn_llcp+0xea>
    12e6:	bf00      	nop
    12e8:	200021a4 	.word	0x200021a4
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
    12ec:	f8df 8448 	ldr.w	r8, [pc, #1096]	; 1738 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b0>

	/* set mutex */
	if (!conn_upd) {
    12f0:	f8d8 3000 	ldr.w	r3, [r8]
    12f4:	2b00      	cmp	r3, #0
    12f6:	f000 854c 	beq.w	1d92 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa0a>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    12fa:	8ee7      	ldrh	r7, [r4, #54]	; 0x36
    12fc:	8e62      	ldrh	r2, [r4, #50]	; 0x32

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    12fe:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1302:	4417      	add	r7, r2
    1304:	4437      	add	r7, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1306:	f013 0303 	ands.w	r3, r3, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    130a:	b2bf      	uxth	r7, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    130c:	f040 83ae 	bne.w	1a6c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e4>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1310:	f8b4 90ec 	ldrh.w	r9, [r4, #236]	; 0xec
    1314:	eba7 0209 	sub.w	r2, r7, r9
    1318:	fa1f fa82 	uxth.w	sl, r2
				    pdu_ctrl_tx, NULL, NULL);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */

		ctrl_tx_enqueue(conn, tx);

	} else if (instant_latency <= 0x7FFF) {
    131c:	0412      	lsls	r2, r2, #16
    131e:	f53f af58 	bmi.w	11d2 <ull_conn_llcp+0x22>
		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;
		conn->llcp_ack = conn->llcp_req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1322:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
    1326:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
		conn->llcp_cu.ack = conn->llcp_cu.req;
    132a:	f894 0104 	ldrb.w	r0, [r4, #260]	; 0x104
    132e:	f884 0105 	strb.w	r0, [r4, #261]	; 0x105
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1332:	428a      	cmp	r2, r1
		conn->llcp_ack = conn->llcp_req;
    1334:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    1338:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    133c:	d009      	beq.n	1352 <ull_conn_llcp+0x1a2>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    133e:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1342:	f002 0207 	and.w	r2, r2, #7
    1346:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1348:	bf04      	itt	eq
    134a:	f884 1171 	strbeq.w	r1, [r4, #369]	; 0x171

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
    134e:	f8a4 30cc 	strheq.w	r3, [r4, #204]	; 0xcc
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
    1352:	f8d8 3000 	ldr.w	r3, [r8]
    1356:	429c      	cmp	r4, r3
	conn_upd_curr = NULL;
    1358:	bf04      	itt	eq
    135a:	2300      	moveq	r3, #0
    135c:	f8c8 3000 	streq.w	r3, [r8]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1360:	f8d4 8100 	ldr.w	r8, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    1364:	f1b8 0f00 	cmp.w	r8, #0
    1368:	f000 85ec 	beq.w	1f44 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbbc>
    136c:	f8d8 0000 	ldr.w	r0, [r8]
    1370:	2800      	cmp	r0, #0
    1372:	f000 85e7 	beq.w	1f44 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbbc>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    1376:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
    137a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
		conn->llcp_rx = rx->hdr.link->mem;
    137c:	6841      	ldr	r1, [r0, #4]
    137e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		if ((conn->llcp_cu.interval != lll->interval) ||
    1382:	4293      	cmp	r3, r2
    1384:	f8b4 110a 	ldrh.w	r1, [r4, #266]	; 0x10a
    1388:	f8b4 c10c 	ldrh.w	ip, [r4, #268]	; 0x10c
    138c:	f000 86ec 	beq.w	2168 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xde0>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
				       lll->interval * 1250) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    1390:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1392:	f8a8 2006 	strh.w	r2, [r8, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1396:	f04f 0e13 	mov.w	lr, #19

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
    139a:	2200      	movs	r2, #0
			cu->interval = conn->llcp_cu.interval;
    139c:	f8a8 301e 	strh.w	r3, [r8, #30]
			cu->latency = conn->llcp_cu.latency;
    13a0:	f8a8 1020 	strh.w	r1, [r8, #32]
			cu->timeout = conn->llcp_cu.timeout;
    13a4:	f8a8 c022 	strh.w	ip, [r8, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    13a8:	f888 e004 	strb.w	lr, [r8, #4]
			cu->status = 0x00;
    13ac:	f888 201c 	strb.w	r2, [r8, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    13b0:	4641      	mov	r1, r8
    13b2:	f012 fc49 	bl	13c48 <ll_rx_put>
		ll_rx_sched();
    13b6:	f012 fc51 	bl	13c5c <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    13ba:	6823      	ldr	r3, [r4, #0]
    13bc:	2b00      	cmp	r3, #0
    13be:	da09      	bge.n	13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>
			uint32_t ticks_prepare_to_start =
    13c0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
				MAX(conn->evt.ticks_active_to_start,
				    conn->evt.ticks_preempt_to_start);

			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    13c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    13c8:	428a      	cmp	r2, r1
    13ca:	bf2c      	ite	cs
    13cc:	18a9      	addcs	r1, r5, r2
    13ce:	1869      	addcc	r1, r5, r1
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    13d0:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    13d2:	1acd      	subs	r5, r1, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    13d4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    13d6:	f8b4 8108 	ldrh.w	r8, [r4, #264]	; 0x108
		conn_interval_old = instant_latency * lll->interval;
    13da:	fb13 f30a 	smulbb	r3, r3, sl
    13de:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    13e0:	fbb3 f1f8 	udiv	r1, r3, r8
		conn_interval_new = latency * conn->llcp_cu.interval;
    13e4:	fb18 f201 	smulbb	r2, r8, r1
    13e8:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    13ea:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
    13ec:	fa1f fb81 	uxth.w	fp, r1
		if (conn_interval_new > conn_interval_old) {
    13f0:	f080 8596 	bcs.w	1f20 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb98>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    13f4:	1ad3      	subs	r3, r2, r3
    13f6:	48c4      	ldr	r0, [pc, #784]	; (1708 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x380>)
    13f8:	f240 42e2 	movw	r2, #1250	; 0x4e2
    13fc:	fb02 f303 	mul.w	r3, r2, r3
    1400:	fba3 0100 	umull	r0, r1, r3, r0
    1404:	a3be      	add	r3, pc, #760	; (adr r3, 1700 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x378>)
    1406:	e9d3 2300 	ldrd	r2, r3, [r3]
    140a:	f7fe fe79 	bl	100 <__aeabi_uldivmod>
    140e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1412:	4405      	add	r5, r0
				(conn_interval_new - conn_interval_old) * 1250U);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) * 1250U);
		}
		lll->latency_prepare += lazy;
    1414:	8e62      	ldrh	r2, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    1416:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    141a:	eba9 0707 	sub.w	r7, r9, r7
		lll->latency_prepare += lazy;
    141e:	4432      	add	r2, r6
		lll->latency_prepare -= (instant_latency - latency);
    1420:	445f      	add	r7, fp
    1422:	4417      	add	r7, r2
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    1424:	f240 49e2 	movw	r9, #1250	; 0x4e2
		} else if (lll->role) {
    1428:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    142a:	8667      	strh	r7, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    142c:	fb09 f608 	mul.w	r6, r9, r8
		} else if (lll->role) {
    1430:	f2c0 86e4 	blt.w	21fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe74>
			periodic_us -= lll->slave.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1434:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    1438:	49b3      	ldr	r1, [pc, #716]	; (1708 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x380>)
    143a:	a3b1      	add	r3, pc, #708	; (adr r3, 1700 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x378>)
    143c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1440:	fba0 0101 	umull	r0, r1, r0, r1
    1444:	f7fe fe5c 	bl	100 <__aeabi_uldivmod>
    1448:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
    144c:	f109 0901 	add.w	r9, r9, #1
		periodic_us = conn_interval_us;
    1450:	4637      	mov	r7, r6

		lll->interval = conn->llcp_cu.interval;
		lll->latency = conn->llcp_cu.latency;

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1452:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
		lll->latency = conn->llcp_cu.latency;
    1456:	f8b4 110a 	ldrh.w	r1, [r4, #266]	; 0x10a
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    145a:	4bac      	ldr	r3, [pc, #688]	; (170c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x384>)
		lll->interval = conn->llcp_cu.interval;
    145c:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1460:	f242 7010 	movw	r0, #10000	; 0x2710
    1464:	fb00 6202 	mla	r2, r0, r2, r6
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1468:	48a9      	ldr	r0, [pc, #676]	; (1710 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x388>)
		lll->latency = conn->llcp_cu.latency;
    146a:	8621      	strh	r1, [r4, #48]	; 0x30
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    146c:	4433      	add	r3, r6
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    146e:	4430      	add	r0, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1470:	fbb3 f3f6 	udiv	r3, r3, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1474:	3a01      	subs	r2, #1
    1476:	fbb2 f2f6 	udiv	r2, r2, r6
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    147a:	fbb0 f6f6 	udiv	r6, r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    147e:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1482:	b298      	uxth	r0, r3
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1484:	1d8a      	adds	r2, r1, #6
    1486:	4290      	cmp	r0, r2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1488:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    148c:	f8a4 60ca 	strh.w	r6, [r4, #202]	; 0xca
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1490:	dd02      	ble.n	1498 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x110>
				     (conn->apto_reload - (lll->latency + 6)) :
    1492:	1a40      	subs	r0, r0, r1
    1494:	3806      	subs	r0, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1496:	b280      	uxth	r0, r0
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    1498:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    149c:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
		if (conn->llcp_cu.cmd) {
    14a0:	075b      	lsls	r3, r3, #29
			conn->supervision_expire = 0U;
    14a2:	bf44      	itt	mi
    14a4:	2300      	movmi	r3, #0
    14a6:	f8a4 30c8 	strhmi.w	r3, [r4, #200]	; 0xc8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    14aa:	2102      	movs	r1, #2
    14ac:	2001      	movs	r0, #1
    14ae:	f01b fbb3 	bl	1cc18 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    14b2:	2200      	movs	r2, #0
    14b4:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    14b6:	4682      	mov	sl, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    14b8:	2001      	movs	r0, #1
    14ba:	f00e f907 	bl	f6cc <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    14be:	4995      	ldr	r1, [pc, #596]	; (1714 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38c>)
    14c0:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    14c4:	4620      	mov	r0, r4
    14c6:	f00e f893 	bl	f5f0 <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    14ca:	f100 0805 	add.w	r8, r0, #5
    14ce:	fa5f f888 	uxtb.w	r8, r8
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    14d2:	4b91      	ldr	r3, [pc, #580]	; (1718 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x390>)
    14d4:	9400      	str	r4, [sp, #0]
    14d6:	4642      	mov	r2, r8
    14d8:	2101      	movs	r1, #1
    14da:	2000      	movs	r0, #0
    14dc:	f00f fd36 	bl	10f4c <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    14e0:	f030 0302 	bics.w	r3, r0, #2
    14e4:	d00c      	beq.n	1500 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x178>
    14e6:	4a8d      	ldr	r2, [pc, #564]	; (171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>)
    14e8:	498d      	ldr	r1, [pc, #564]	; (1720 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x398>)
    14ea:	488e      	ldr	r0, [pc, #568]	; (1724 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x39c>)
    14ec:	f640 138b 	movw	r3, #2443	; 0x98b
    14f0:	f01e f901 	bl	1f6f6 <printk>
    14f4:	4040      	eors	r0, r0
    14f6:	f380 8811 	msr	BASEPRI, r0
    14fa:	f04f 0003 	mov.w	r0, #3
    14fe:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1500:	4e81      	ldr	r6, [pc, #516]	; (1708 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x380>)
    1502:	fba7 6706 	umull	r6, r7, r7, r6
    1506:	a37e      	add	r3, pc, #504	; (adr r3, 1700 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x378>)
    1508:	e9d3 2300 	ldrd	r2, r3, [r3]
    150c:	4630      	mov	r0, r6
    150e:	4639      	mov	r1, r7
    1510:	f7fe fdf6 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    1514:	4a84      	ldr	r2, [pc, #528]	; (1728 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a0>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1516:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    151a:	fbab 2302 	umull	r2, r3, fp, r2
    151e:	2107      	movs	r1, #7
    1520:	1ab0      	subs	r0, r6, r2
    1522:	fb01 330b 	mla	r3, r1, fp, r3
    1526:	eb67 0103 	sbc.w	r1, r7, r3
    152a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    152e:	2300      	movs	r3, #0
    1530:	f7fe fde6 	bl	100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1534:	4a7d      	ldr	r2, [pc, #500]	; (172c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a4>)
    1536:	497e      	ldr	r1, [pc, #504]	; (1730 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a8>)
				     TICKER_LAZY_MUST_EXPIRE,
#else
				     TICKER_NULL_LAZY,
#endif /* CONFIG_BT_CTLR_CONN_META */
				     (ticks_slot_overhead +
				      conn->evt.ticks_slot),
    1538:	68e6      	ldr	r6, [r4, #12]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    153a:	4f7e      	ldr	r7, [pc, #504]	; (1734 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3ac>)
				     HAL_TICKER_REMAINDER(periodic_us),
    153c:	4603      	mov	r3, r0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    153e:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
    1542:	9302      	str	r3, [sp, #8]
    1544:	ea11 0120 	ands.w	r1, r1, r0, asr #32
    1548:	bf38      	it	cc
    154a:	4611      	movcc	r1, r2
    154c:	2000      	movs	r0, #0
    154e:	e9cd 6104 	strd	r6, r1, [sp, #16]
    1552:	462b      	mov	r3, r5
    1554:	f8cd b004 	str.w	fp, [sp, #4]
    1558:	9408      	str	r4, [sp, #32]
    155a:	9406      	str	r4, [sp, #24]
    155c:	f8cd 9000 	str.w	r9, [sp]
    1560:	4642      	mov	r2, r8
    1562:	9707      	str	r7, [sp, #28]
    1564:	9003      	str	r0, [sp, #12]
    1566:	2101      	movs	r1, #1
    1568:	f00f fc84 	bl	10e74 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    156c:	f030 0302 	bics.w	r3, r0, #2
    1570:	d00c      	beq.n	158c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x204>
    1572:	4a6a      	ldr	r2, [pc, #424]	; (171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>)
    1574:	496a      	ldr	r1, [pc, #424]	; (1720 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x398>)
    1576:	486b      	ldr	r0, [pc, #428]	; (1724 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x39c>)
    1578:	f640 13a5 	movw	r3, #2469	; 0x9a5
    157c:	f01e f8bb 	bl	1f6f6 <printk>
    1580:	4040      	eors	r0, r0
    1582:	f380 8811 	msr	BASEPRI, r0
    1586:	f04f 0003 	mov.w	r0, #3
    158a:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    158c:	f1ba 0f00 	cmp.w	sl, #0
    1590:	f040 861a 	bne.w	21c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe40>
				return -ECANCELED;
    1594:	f06f 0047 	mvn.w	r0, #71	; 0x47
    1598:	e622      	b.n	11e0 <ull_conn_llcp+0x30>
			event_counter = lll->event_counter +
    159a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    159c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
static inline void event_phy_upd_ind_prep(struct ll_conn *conn,
					  uint16_t event_counter)
{
	struct node_rx_pu *upd;

	if (conn->llcp.phy_upd_ind.initiate) {
    159e:	f894 50ec 	ldrb.w	r5, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    15a2:	441a      	add	r2, r3
					lll->latency_prepare + lazy;
    15a4:	4432      	add	r2, r6
	if (conn->llcp.phy_upd_ind.initiate) {
    15a6:	07ef      	lsls	r7, r5, #31
			event_counter = lll->event_counter +
    15a8:	b296      	uxth	r6, r2
	if (conn->llcp.phy_upd_ind.initiate) {
    15aa:	46ab      	mov	fp, r5
    15ac:	f100 83ad 	bmi.w	1d0a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x982>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);

		ctrl_tx_enqueue(conn, tx);
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    15b0:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
    15b4:	1ab6      	subs	r6, r6, r2
    15b6:	0437      	lsls	r7, r6, #16
    15b8:	f53f ae0b 	bmi.w	11d2 <ull_conn_llcp+0x22>
	if (!conn->common.fex_valid ||
    15bc:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = lll->phy_tx;
    15c0:	f894 8064 	ldrb.w	r8, [r4, #100]	; 0x64
		old_rx = lll->phy_rx;
    15c4:	f894 a065 	ldrb.w	sl, [r4, #101]	; 0x65
		conn->llcp_ack = conn->llcp_req;
    15c8:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		uint16_t eff_tx_time = lll->max_tx_time;
		uint16_t eff_rx_time = lll->max_rx_time;
    15cc:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
		conn->llcp_ack = conn->llcp_req;
    15d0:	f884 10e9 	strb.w	r1, [r4, #233]	; 0xe9
	if (!conn->common.fex_valid ||
    15d4:	07d6      	lsls	r6, r2, #31
		old_tx = lll->phy_tx;
    15d6:	f008 0807 	and.w	r8, r8, #7
		old_rx = lll->phy_rx;
    15da:	f00a 0a07 	and.w	sl, sl, #7
	if (!conn->common.fex_valid ||
    15de:	f140 85fc 	bpl.w	21da <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe52>
	feature_coded_phy = (conn->llcp_feature.features_conn &
    15e2:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
	if (!conn->common.fex_valid ||
    15e6:	0510      	lsls	r0, r2, #20
    15e8:	f140 85f7 	bpl.w	21da <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe52>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    15ec:	f8b4 90d8 	ldrh.w	r9, [r4, #216]	; 0xd8
    15f0:	f5b9 6f29 	cmp.w	r9, #2704	; 0xa90
    15f4:	bf28      	it	cs
    15f6:	f44f 6929 	movcs.w	r9, #2704	; 0xa90
    15fa:	f5b9 7fa4 	cmp.w	r9, #328	; 0x148
    15fe:	f44f 6329 	mov.w	r3, #2704	; 0xa90
    1602:	bf38      	it	cc
    1604:	f44f 79a4 	movcc.w	r9, #328	; 0x148
    1608:	930b      	str	r3, [sp, #44]	; 0x2c
		uint16_t max_rx_time, max_tx_time;

		dle_max_time_get(conn, &max_rx_time, &max_tx_time);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		if (conn->llcp.phy_upd_ind.tx) {
    160a:	f015 0f1c 	tst.w	r5, #28
    160e:	f040 86a8 	bne.w	2362 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfda>
		uint16_t eff_tx_time = lll->max_tx_time;
    1612:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
						    lll->phy_tx,
						    max_tx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		if (conn->llcp.phy_upd_ind.rx) {
    1616:	f015 0fe0 	tst.w	r5, #224	; 0xe0
    161a:	d00c      	beq.n	1636 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ae>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    161c:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
			eff_rx_time =
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    1620:	f894 005e 	ldrb.w	r0, [r4, #94]	; 0x5e
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    1624:	0969      	lsrs	r1, r5, #5
    1626:	f361 0202 	bfi	r2, r1, #0, #3
    162a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    162e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1630:	f013 fafa 	bl	14c28 <calc_eff_time>
    1634:	4607      	mov	r7, r0

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1636:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    163a:	2d00      	cmp	r5, #0
    163c:	f000 8773 	beq.w	2526 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x119e>
    1640:	6828      	ldr	r0, [r5, #0]
    1642:	2800      	cmp	r0, #0
    1644:	f000 876f 	beq.w	2526 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x119e>
		conn->llcp_rx = rx->hdr.link->mem;
    1648:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    164c:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
    1650:	6843      	ldr	r3, [r0, #4]
    1652:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1656:	f01b 0f02 	tst.w	fp, #2
    165a:	f3c1 0e02 	ubfx	lr, r1, #0, #3
    165e:	f3c2 0c02 	ubfx	ip, r2, #0, #3
    1662:	f001 0107 	and.w	r1, r1, #7
    1666:	f002 0207 	and.w	r2, r2, #7
    166a:	d102      	bne.n	1672 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ea>
    166c:	4588      	cmp	r8, r1
    166e:	f001 8100 	beq.w	2872 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14ea>
			ll_rx_sched();

			return;
		}

		rx->hdr.handle = lll->handle;
    1672:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1674:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1676:	2217      	movs	r2, #23

		upd = (void *)rx->pdu;
		upd->status = 0U;
    1678:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
    167a:	f885 e01d 	strb.w	lr, [r5, #29]
		upd->rx = lll->phy_rx;
    167e:	f885 c01e 	strb.w	ip, [r5, #30]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1682:	712a      	strb	r2, [r5, #4]
		upd->status = 0U;
    1684:	772b      	strb	r3, [r5, #28]

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1686:	4629      	mov	r1, r5
    1688:	f012 fade 	bl	13c48 <ll_rx_put>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		/* get a rx node for ULL->LL */
		rx = conn->llcp_rx;
    168c:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    1690:	2d00      	cmp	r5, #0
    1692:	f000 8779 	beq.w	2588 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1200>
    1696:	6828      	ldr	r0, [r5, #0]
    1698:	2800      	cmp	r0, #0
    169a:	f000 8775 	beq.w	2588 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1200>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Update max tx and/or max rx if changed */
		if ((eff_tx_time <= lll->max_tx_time) &&
    169e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
		conn->llcp_rx = rx->hdr.link->mem;
    16a2:	6842      	ldr	r2, [r0, #4]
    16a4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		if ((eff_tx_time <= lll->max_tx_time) &&
    16a8:	42b3      	cmp	r3, r6
    16aa:	d309      	bcc.n	16c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x338>
    16ac:	454b      	cmp	r3, r9
    16ae:	d807      	bhi.n	16c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x338>
		    (lll->max_tx_time <= max_tx_time) &&
		    (eff_rx_time <= lll->max_rx_time) &&
    16b0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
		    (lll->max_tx_time <= max_tx_time) &&
    16b4:	42bb      	cmp	r3, r7
    16b6:	d303      	bcc.n	16c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x338>
		    (eff_rx_time <= lll->max_rx_time) &&
    16b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    16ba:	4293      	cmp	r3, r2
    16bc:	f241 80ed 	bls.w	289a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1512>
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
			ll_rx_sched();
			return;
		}
		lll->max_tx_time = eff_tx_time;
    16c0:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
		lll->max_rx_time = eff_rx_time;
    16c4:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
		rx->hdr.handle = lll->handle;
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		struct pdu_data *pdu_rx = (void *)rx->pdu;

		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    16c8:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
    16ca:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    16cc:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    16ce:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    16d2:	2102      	movs	r1, #2
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    16d4:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    16d6:	7129      	strb	r1, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    16d8:	772b      	strb	r3, [r5, #28]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    16da:	776a      	strb	r2, [r5, #29]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		struct pdu_data_llctrl_length_req *lr =
			(void *)&pdu_rx->llctrl.length_rsp;

		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    16dc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    16e0:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    16e4:	842b      	strh	r3, [r5, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    16e6:	2315      	movs	r3, #21
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    16e8:	84aa      	strh	r2, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    16ea:	77eb      	strb	r3, [r5, #31]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    16ec:	4629      	mov	r1, r5
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    16ee:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    16f0:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    16f2:	f012 faa9 	bl	13c48 <ll_rx_put>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		ll_rx_sched();
    16f6:	f012 fab1 	bl	13c5c <ll_rx_sched>
    16fa:	e56a      	b.n	11d2 <ull_conn_llcp+0x22>
    16fc:	f3af 8000 	nop.w
    1700:	1afd498d 	.word	0x1afd498d
    1704:	00000007 	.word	0x00000007
    1708:	3b9aca00 	.word	0x3b9aca00
    170c:	01c9c37f 	.word	0x01c9c37f
    1710:	026259ff 	.word	0x026259ff
    1714:	20001f58 	.word	0x20001f58
    1718:	00014f59 	.word	0x00014f59
    171c:	00025ee4 	.word	0x00025ee4
    1720:	0002600c 	.word	0x0002600c
    1724:	00025984 	.word	0x00025984
    1728:	1afd498d 	.word	0x1afd498d
    172c:	00018109 	.word	0x00018109
    1730:	00017f19 	.word	0x00017f19
    1734:	00014f01 	.word	0x00014f01
    1738:	20002120 	.word	0x20002120
	if (conn->llcp.encryption.state) {
    173c:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1740:	f013 0503 	ands.w	r5, r3, #3
    1744:	f000 8286 	beq.w	1c54 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8cc>
		if (lll->role &&
    1748:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    174c:	2b00      	cmp	r3, #0
    174e:	f6bf ad40 	bge.w	11d2 <ull_conn_llcp+0x22>
    1752:	2d01      	cmp	r5, #1
    1754:	f47f ad3d 	bne.w	11d2 <ull_conn_llcp+0x22>
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1758:	48c0      	ldr	r0, [pc, #768]	; (1a5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d4>)
    175a:	f00d ff13 	bl	f584 <mem_acquire>
	if (!tx) {
    175e:	4605      	mov	r5, r0
    1760:	2800      	cmp	r0, #0
    1762:	f43f ad36 	beq.w	11d2 <ull_conn_llcp+0x22>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1766:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    1768:	220d      	movs	r2, #13
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    176a:	f043 0303 	orr.w	r3, r3, #3
			   sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    176e:	2704      	movs	r7, #4
	BUILD_ASSERT(offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), ivs) ==
		     (offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), skds) +
		     sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds)));

	/* NOTE: if not sufficient random numbers, ignore waiting */
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    1770:	f100 0608 	add.w	r6, r0, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1774:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    1776:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    1778:	71c7      	strb	r7, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    177a:	210c      	movs	r1, #12
    177c:	4630      	mov	r0, r6
    177e:	f018 fb53 	bl	19e28 <lll_csrand_isr_get>
			   sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds) +
			   sizeof(pdu_ctrl_tx->llctrl.enc_rsp.ivs));

	/* things from slave stored for session key calculation */
	memcpy(&conn->llcp.encryption.skd[8],
    1782:	4631      	mov	r1, r6
    1784:	2208      	movs	r2, #8
    1786:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    178a:	f020 f82c 	bl	217e6 <memcpy>
	       &pdu_ctrl_tx->llctrl.enc_rsp.skds[0], 8);
	memcpy(&conn->lll.ccm_rx.iv[4],
    178e:	463a      	mov	r2, r7
    1790:	f105 0110 	add.w	r1, r5, #16
    1794:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    1798:	f020 f825 	bl	217e6 <memcpy>
	    conn->tx_head &&
    179c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    17a0:	2b00      	cmp	r3, #0
    17a2:	f000 876b 	beq.w	267c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12f4>
	    !conn->llcp_enc.pause_tx &&
    17a6:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    17aa:	0790      	lsls	r0, r2, #30
    17ac:	f100 8766 	bmi.w	267c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12f4>
	    !conn->llcp_phy.pause_tx &&
    17b0:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    17b4:	07d1      	lsls	r1, r2, #31
    17b6:	f100 8761 	bmi.w	267c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12f4>
		if (conn->tx_head == conn->tx_data) {
    17ba:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    17be:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    17c0:	bf04      	itt	eq
    17c2:	681a      	ldreq	r2, [r3, #0]
    17c4:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    17c8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    17cc:	2a00      	cmp	r2, #0
    17ce:	f001 81b0 	beq.w	2b32 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17aa>
	tx->next = conn->tx_ctrl_last->next;
    17d2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    17d6:	681a      	ldr	r2, [r3, #0]
    17d8:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    17da:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    17dc:	682b      	ldr	r3, [r5, #0]
    17de:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    17e2:	2b00      	cmp	r3, #0
    17e4:	f001 815c 	beq.w	2aa0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1718>
			rx = ll_pdu_rx_alloc();
    17e8:	f012 fa5c 	bl	13ca4 <ll_pdu_rx_alloc>
			if (!rx) {
    17ec:	4605      	mov	r5, r0
    17ee:	2800      	cmp	r0, #0
    17f0:	f43f acef 	beq.w	11d2 <ull_conn_llcp+0x22>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    17f4:	7f2b      	ldrb	r3, [r5, #28]
			rx->hdr.handle = conn->lll.handle;
    17f6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    17f8:	80ea      	strh	r2, [r5, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    17fa:	f043 0303 	orr.w	r3, r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    17fe:	2602      	movs	r6, #2
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    1800:	2117      	movs	r1, #23
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1802:	2203      	movs	r2, #3
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1804:	772b      	strb	r3, [r5, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    1806:	7769      	strb	r1, [r5, #29]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1808:	77ea      	strb	r2, [r5, #31]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    180a:	f204 1155 	addw	r1, r4, #341	; 0x155
    180e:	2208      	movs	r2, #8
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1810:	712e      	strb	r6, [r5, #4]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    1812:	f105 0020 	add.w	r0, r5, #32
    1816:	f01f ffe6 	bl	217e6 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    181a:	f894 3153 	ldrb.w	r3, [r4, #339]	; 0x153
    181e:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    1822:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    1826:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
    182a:	6828      	ldr	r0, [r5, #0]
    182c:	4629      	mov	r1, r5
    182e:	f012 fa0b 	bl	13c48 <ll_rx_put>
			ll_rx_sched();
    1832:	f012 fa13 	bl	13c5c <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    1836:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    183a:	f366 0301 	bfi	r3, r6, #0, #2
    183e:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    1842:	e4c6      	b.n	11d2 <ull_conn_llcp+0x22>
			event_counter = lll->event_counter +
    1844:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    1846:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
    1848:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    184c:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
    184e:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
    1850:	07df      	lsls	r7, r3, #31
			event_counter = lll->event_counter +
    1852:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
    1854:	f100 81b0 	bmi.w	1bb8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x830>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    1858:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
    185c:	1ab6      	subs	r6, r6, r2
    185e:	0435      	lsls	r5, r6, #16
    1860:	f53f acb7 	bmi.w	11d2 <ull_conn_llcp+0x22>
		conn->llcp_ack = conn->llcp_req;
    1864:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1868:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&lll->data_chan_map[0],
    186c:	f104 0538 	add.w	r5, r4, #56	; 0x38
    1870:	2205      	movs	r2, #5
    1872:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    1876:	4628      	mov	r0, r5
    1878:	f01f ffb5 	bl	217e6 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    187c:	4628      	mov	r0, r5
    187e:	2105      	movs	r1, #5
    1880:	f00e f84e 	bl	f920 <util_ones_count_get>
		lll->data_chan_count =
    1884:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    1888:	2201      	movs	r2, #1
		lll->data_chan_count =
    188a:	f360 0305 	bfi	r3, r0, #0, #6
    188e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    1892:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
    1896:	e49c      	b.n	11d2 <ull_conn_llcp+0x22>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1898:	4870      	ldr	r0, [pc, #448]	; (1a5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d4>)
    189a:	f00d fe73 	bl	f584 <mem_acquire>
	if (tx) {
    189e:	2800      	cmp	r0, #0
    18a0:	f43f ac97 	beq.w	11d2 <ull_conn_llcp+0x22>
		conn->llcp_ack = conn->llcp_req;
    18a4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    18a8:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    18ac:	2301      	movs	r3, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    18ae:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    18b0:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    18b2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    18b6:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    18ba:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    18bc:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    18be:	71c1      	strb	r1, [r0, #7]
	if (
    18c0:	2b00      	cmp	r3, #0
    18c2:	f000 8322 	beq.w	1f0a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb82>
	    !conn->llcp_enc.pause_tx &&
    18c6:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    18ca:	0791      	lsls	r1, r2, #30
    18cc:	f100 831d 	bmi.w	1f0a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb82>
	    !conn->llcp_phy.pause_tx &&
    18d0:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    18d4:	07d2      	lsls	r2, r2, #31
    18d6:	f100 8318 	bmi.w	1f0a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb82>
		if (conn->tx_head == conn->tx_data) {
    18da:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    18de:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    18e0:	bf04      	itt	eq
    18e2:	681a      	ldreq	r2, [r3, #0]
    18e4:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    18e8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    18ec:	2a00      	cmp	r2, #0
    18ee:	f001 80ef 	beq.w	2ad0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1748>
	tx->next = conn->tx_ctrl_last->next;
    18f2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    18f6:	681a      	ldr	r2, [r3, #0]
    18f8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    18fa:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    18fc:	6803      	ldr	r3, [r0, #0]
    18fe:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1902:	2b00      	cmp	r3, #0
    1904:	f000 8529 	beq.w	235a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfd2>
		conn->procedure_expire = conn->procedure_reload;
    1908:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    190c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1910:	e45f      	b.n	11d2 <ull_conn_llcp+0x22>
			LL_ASSERT(0);
    1912:	4a53      	ldr	r2, [pc, #332]	; (1a60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d8>)
    1914:	4953      	ldr	r1, [pc, #332]	; (1a64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6dc>)
    1916:	4854      	ldr	r0, [pc, #336]	; (1a68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e0>)
    1918:	f240 33bf 	movw	r3, #959	; 0x3bf
    191c:	f01d feeb 	bl	1f6f6 <printk>
    1920:	4040      	eors	r0, r0
    1922:	f380 8811 	msr	BASEPRI, r0
    1926:	f04f 0003 	mov.w	r0, #3
    192a:	df02      	svc	2
			break;
    192c:	e451      	b.n	11d2 <ull_conn_llcp+0x22>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    192e:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
    1932:	f894 c118 	ldrb.w	ip, [r4, #280]	; 0x118
    1936:	4562      	cmp	r2, ip
    1938:	d154      	bne.n	19e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x65c>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    193a:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
    193e:	f894 c124 	ldrb.w	ip, [r4, #292]	; 0x124
    1942:	4562      	cmp	r2, ip
    1944:	f000 830f 	beq.w	1f66 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbde>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    1948:	eba2 020c 	sub.w	r2, r2, ip
    194c:	07d1      	lsls	r1, r2, #31
    194e:	f57f ac40 	bpl.w	11d2 <ull_conn_llcp+0x22>
	if (conn->llcp_version.tx == 0U) {
    1952:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
    1956:	07da      	lsls	r2, r3, #31
    1958:	f140 87dc 	bpl.w	2914 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x158c>
	} else if (conn->llcp_version.rx) {
    195c:	079a      	lsls	r2, r3, #30
    195e:	f140 87c3 	bpl.w	28e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1560>
		rx = ll_pdu_rx_alloc();
    1962:	f012 f99f 	bl	13ca4 <ll_pdu_rx_alloc>
		if (!rx) {
    1966:	4601      	mov	r1, r0
    1968:	2800      	cmp	r0, #0
    196a:	d070      	beq.n	1a4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c6>
		conn->llcp_version.ack = conn->llcp_version.req;
    196c:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
    1970:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1974:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    1976:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1978:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    197a:	f043 0303 	orr.w	r3, r3, #3
    197e:	770b      	strb	r3, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1980:	2002      	movs	r0, #2
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1982:	2206      	movs	r2, #6
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1984:	230c      	movs	r3, #12
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1986:	7108      	strb	r0, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1988:	774a      	strb	r2, [r1, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    198a:	77cb      	strb	r3, [r1, #31]
		pdu->llctrl.version_ind.version_number =
    198c:	f894 0127 	ldrb.w	r0, [r4, #295]	; 0x127
		pdu->llctrl.version_ind.company_id =
    1990:	f8b4 2128 	ldrh.w	r2, [r4, #296]	; 0x128
		pdu->llctrl.version_ind.sub_version_number =
    1994:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
    1998:	f8a1 3023 	strh.w	r3, [r1, #35]	; 0x23
		pdu->llctrl.version_ind.version_number =
    199c:	f881 0020 	strb.w	r0, [r1, #32]
		pdu->llctrl.version_ind.company_id =
    19a0:	f8a1 2021 	strh.w	r2, [r1, #33]	; 0x21
		ll_rx_put(rx->hdr.link, rx);
    19a4:	6808      	ldr	r0, [r1, #0]
    19a6:	f012 f94f 	bl	13c48 <ll_rx_put>
		ll_rx_sched();
    19aa:	f012 f957 	bl	13c5c <ll_rx_sched>
    19ae:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    19b2:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
    19b6:	e407      	b.n	11c8 <ull_conn_llcp+0x18>
	switch (conn->llcp_length.state) {
    19b8:	f002 0107 	and.w	r1, r2, #7
    19bc:	2906      	cmp	r1, #6
    19be:	f201 8227 	bhi.w	2e10 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a88>
    19c2:	a001      	add	r0, pc, #4	; (adr r0, 19c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x640>)
    19c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    19c8:	00001e39 	.word	0x00001e39
    19cc:	00001225 	.word	0x00001225
    19d0:	00001225 	.word	0x00001225
    19d4:	00001225 	.word	0x00001225
    19d8:	00001db5 	.word	0x00001db5
    19dc:	00001db5 	.word	0x00001db5
    19e0:	00001225 	.word	0x00001225
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    19e4:	eba2 020c 	sub.w	r2, r2, ip
    19e8:	07d3      	lsls	r3, r2, #31
    19ea:	f57f abf2 	bpl.w	11d2 <ull_conn_llcp+0x22>
	if (conn->common.fex_valid) {
    19ee:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
    19f2:	f011 0701 	ands.w	r7, r1, #1
    19f6:	f000 8455 	beq.w	22a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf1c>
		rx = ll_pdu_rx_alloc();
    19fa:	f012 f953 	bl	13ca4 <ll_pdu_rx_alloc>
		if (!rx) {
    19fe:	4607      	mov	r7, r0
    1a00:	b328      	cbz	r0, 1a4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c6>
		conn->llcp_feature.ack = conn->llcp_feature.req;
    1a02:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    1a06:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1a0a:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    1a0c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1a0e:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1a10:	f043 0303 	orr.w	r3, r3, #3
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1a14:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1a16:	2002      	movs	r0, #2
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    1a18:	4641      	mov	r1, r8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1a1a:	773b      	strb	r3, [r7, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1a1c:	7138      	strb	r0, [r7, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1a1e:	777a      	strb	r2, [r7, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    1a20:	77fa      	strb	r2, [r7, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    1a22:	f107 0020 	add.w	r0, r7, #32
    1a26:	2208      	movs	r2, #8
    1a28:	f01f ff08 	bl	2183c <memset>
		sys_put_le24(conn->llcp_feature.features_peer,
    1a2c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	dst[0] = val;
    1a30:	f887 3020 	strb.w	r3, [r7, #32]
	dst[1] = val >> 8;
    1a34:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    1a38:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    1a3a:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	dst[2] = val >> 16;
    1a3e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
    1a42:	4639      	mov	r1, r7
	ll_rx_put(rx->hdr.link, rx);
    1a44:	6808      	ldr	r0, [r1, #0]
    1a46:	f012 f8ff 	bl	13c48 <ll_rx_put>
	ll_rx_sched();
    1a4a:	f012 f907 	bl	13c5c <ll_rx_sched>
	break;
    1a4e:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    1a52:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
    1a56:	f7ff bbb7 	b.w	11c8 <ull_conn_llcp+0x18>
    1a5a:	bf00      	nop
    1a5c:	200021a4 	.word	0x200021a4
    1a60:	00025ee4 	.word	0x00025ee4
    1a64:	000259f4 	.word	0x000259f4
    1a68:	00025984 	.word	0x00025984
		rx = ll_pdu_rx_alloc_peek(1);
    1a6c:	2001      	movs	r0, #1
    1a6e:	f012 f8fb 	bl	13c68 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1a72:	4680      	mov	r8, r0
    1a74:	2800      	cmp	r0, #0
    1a76:	f43f abac 	beq.w	11d2 <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1a7a:	48c8      	ldr	r0, [pc, #800]	; (1d9c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa14>)
    1a7c:	f00d fd82 	bl	f584 <mem_acquire>
		if (!tx) {
    1a80:	4606      	mov	r6, r0
    1a82:	2800      	cmp	r0, #0
    1a84:	f43f aba5 	beq.w	11d2 <ull_conn_llcp+0x22>
		(void)ll_pdu_rx_alloc();
    1a88:	f012 f90c 	bl	13ca4 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    1a8c:	f8d8 3000 	ldr.w	r3, [r8]
    1a90:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1a94:	605a      	str	r2, [r3, #4]
		switch (conn->llcp_cu.state) {
    1a96:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		conn->llcp_rx = rx;
    1a9a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
		switch (conn->llcp_cu.state) {
    1a9e:	f003 0303 	and.w	r3, r3, #3
    1aa2:	2b01      	cmp	r3, #1
    1aa4:	f000 8677 	beq.w	2796 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x140e>
    1aa8:	2b02      	cmp	r3, #2
    1aaa:	f000 85e0 	beq.w	266e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12e6>
			LL_ASSERT(0);
    1aae:	4abc      	ldr	r2, [pc, #752]	; (1da0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa18>)
    1ab0:	49bc      	ldr	r1, [pc, #752]	; (1da4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa1c>)
    1ab2:	48bd      	ldr	r0, [pc, #756]	; (1da8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa20>)
    1ab4:	f640 03b6 	movw	r3, #2230	; 0x8b6
    1ab8:	f01d fe1d 	bl	1f6f6 <printk>
    1abc:	4040      	eors	r0, r0
    1abe:	f380 8811 	msr	BASEPRI, r0
    1ac2:	f04f 0003 	mov.w	r0, #3
    1ac6:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
    1ac8:	2100      	movs	r1, #0
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1aca:	8e23      	ldrh	r3, [r4, #48]	; 0x30
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1acc:	f894 c106 	ldrb.w	ip, [r4, #262]	; 0x106
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1ad0:	7932      	ldrb	r2, [r6, #4]
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1ad2:	443b      	add	r3, r7
    1ad4:	3306      	adds	r3, #6
    1ad6:	b298      	uxth	r0, r3
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1ad8:	f36f 0c01 	bfc	ip, #0, #2
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1adc:	230c      	movs	r3, #12
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1ade:	f8a4 00ec 	strh.w	r0, [r4, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1ae2:	f884 c106 	strb.w	ip, [r4, #262]	; 0x106
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1ae6:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1aea:	7173      	strb	r3, [r6, #5]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1aec:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    1af0:	4fae      	ldr	r7, [pc, #696]	; (1dac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa24>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1af2:	7132      	strb	r2, [r6, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1af4:	2200      	movs	r2, #0
    1af6:	71f2      	strb	r2, [r6, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1af8:	fba7 2303 	umull	r2, r3, r7, r3
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1afc:	f894 7114 	ldrb.w	r7, [r4, #276]	; 0x114
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1b00:	6822      	ldr	r2, [r4, #0]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1b02:	7237      	strb	r7, [r6, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1b04:	f8b4 7108 	ldrh.w	r7, [r4, #264]	; 0x108
    1b08:	f8a6 700b 	strh.w	r7, [r6, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1b0c:	f8b4 710a 	ldrh.w	r7, [r4, #266]	; 0x10a
    1b10:	f8a6 700d 	strh.w	r7, [r6, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1b14:	f3c3 238f 	ubfx	r3, r3, #10, #16
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    1b18:	f8b4 710c 	ldrh.w	r7, [r4, #268]	; 0x10c
    1b1c:	f8a6 700f 	strh.w	r7, [r6, #15]
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1b20:	2a00      	cmp	r2, #0
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1b22:	f8a6 0011 	strh.w	r0, [r6, #17]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1b26:	f8a6 3009 	strh.w	r3, [r6, #9]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    1b2a:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1b2e:	da0a      	bge.n	1b46 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7be>
			uint32_t ticks_prepare_to_start =
    1b30:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
				(conn->evt.ticks_xtal_to_start &
    1b34:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    1b38:	4283      	cmp	r3, r0
    1b3a:	bf2c      	ite	cs
    1b3c:	18eb      	addcs	r3, r5, r3
    1b3e:	182b      	addcc	r3, r5, r0
    1b40:	1a9a      	subs	r2, r3, r2
    1b42:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    1b46:	4b9a      	ldr	r3, [pc, #616]	; (1db0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa28>)
		conn->llcp.conn_upd.pdu_win_offset = (uint16_t *)
    1b48:	f106 0009 	add.w	r0, r6, #9
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1b4c:	2201      	movs	r2, #1
		conn->llcp.conn_upd.pdu_win_offset = (uint16_t *)
    1b4e:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    1b52:	60d9      	str	r1, [r3, #12]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1b54:	4610      	mov	r0, r2
    1b56:	2102      	movs	r1, #2
		mfy_sched_offset->param = (void *)conn;
    1b58:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1b5a:	f00d fdeb 	bl	f734 <mayfly_enqueue>
		LL_ASSERT(!retval);
    1b5e:	2800      	cmp	r0, #0
    1b60:	f040 861c 	bne.w	279c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1414>
	    conn->tx_head &&
    1b64:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    1b68:	2b00      	cmp	r3, #0
    1b6a:	f000 833c 	beq.w	21e6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe5e>
	    !conn->llcp_enc.pause_tx &&
    1b6e:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1b72:	0790      	lsls	r0, r2, #30
    1b74:	f100 8337 	bmi.w	21e6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe5e>
	    !conn->llcp_phy.pause_tx &&
    1b78:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1b7c:	07d1      	lsls	r1, r2, #31
    1b7e:	f100 8332 	bmi.w	21e6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe5e>
		if (conn->tx_head == conn->tx_data) {
    1b82:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1b86:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1b88:	bf04      	itt	eq
    1b8a:	681a      	ldreq	r2, [r3, #0]
    1b8c:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1b90:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1b94:	2a00      	cmp	r2, #0
    1b96:	f000 87b9 	beq.w	2b0c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1784>
	tx->next = conn->tx_ctrl_last->next;
    1b9a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1b9e:	681a      	ldr	r2, [r3, #0]
    1ba0:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    1ba2:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    1ba4:	6833      	ldr	r3, [r6, #0]
    1ba6:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1baa:	2b00      	cmp	r3, #0
    1bac:	f47f ab11 	bne.w	11d2 <ull_conn_llcp+0x22>
		conn->tx_data_last = tx;
    1bb0:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    1bb4:	f7ff bb0d 	b.w	11d2 <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1bb8:	4878      	ldr	r0, [pc, #480]	; (1d9c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa14>)
    1bba:	f00d fce3 	bl	f584 <mem_acquire>
		if (tx) {
    1bbe:	4605      	mov	r5, r0
    1bc0:	2800      	cmp	r0, #0
    1bc2:	f43f ab06 	beq.w	11d2 <ull_conn_llcp+0x22>
			conn->llcp.chan_map.instant = event_counter +
    1bc6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1bc8:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
    1bca:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
    1bce:	4433      	add	r3, r6
						      conn->lll.latency + 6;
    1bd0:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
    1bd2:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			conn->llcp.chan_map.initiate = 0U;
    1bd6:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->llctrl.opcode =
    1bda:	2301      	movs	r3, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1bdc:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1be0:	2008      	movs	r0, #8
			conn->llcp.chan_map.initiate = 0U;
    1be2:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1be6:	712a      	strb	r2, [r5, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1be8:	7168      	strb	r0, [r5, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1bea:	71eb      	strb	r3, [r5, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    1bec:	2205      	movs	r2, #5
    1bee:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    1bf2:	1828      	adds	r0, r5, r0
    1bf4:	f01f fdf7 	bl	217e6 <memcpy>
	    conn->tx_head &&
    1bf8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    1bfc:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
    1c00:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
    1c04:	2b00      	cmp	r3, #0
    1c06:	f000 80b9 	beq.w	1d7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9f4>
	    !conn->llcp_enc.pause_tx &&
    1c0a:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1c0e:	0791      	lsls	r1, r2, #30
    1c10:	f100 80b4 	bmi.w	1d7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9f4>
	    !conn->llcp_phy.pause_tx &&
    1c14:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1c18:	07d2      	lsls	r2, r2, #31
    1c1a:	f100 80af 	bmi.w	1d7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9f4>
		if (conn->tx_head == conn->tx_data) {
    1c1e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1c22:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1c24:	bf04      	itt	eq
    1c26:	681a      	ldreq	r2, [r3, #0]
    1c28:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1c2c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1c30:	2a00      	cmp	r2, #0
    1c32:	f000 8760 	beq.w	2af6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x176e>
	tx->next = conn->tx_ctrl_last->next;
    1c36:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1c3a:	681a      	ldr	r2, [r3, #0]
    1c3c:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1c3e:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    1c40:	682b      	ldr	r3, [r5, #0]
    1c42:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1c46:	2b00      	cmp	r3, #0
    1c48:	f47f aac3 	bne.w	11d2 <ull_conn_llcp+0x22>
		conn->tx_data_last = tx;
    1c4c:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
    1c50:	f7ff babf 	b.w	11d2 <ull_conn_llcp+0x22>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1c54:	4851      	ldr	r0, [pc, #324]	; (1d9c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa14>)
    1c56:	f00d fc95 	bl	f584 <mem_acquire>
	if (!tx) {
    1c5a:	4606      	mov	r6, r0
    1c5c:	2800      	cmp	r0, #0
    1c5e:	f43f aab8 	beq.w	11d2 <ull_conn_llcp+0x22>
	if (!lll->role) {
    1c62:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1c66:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
    1c68:	f100 0804 	add.w	r8, r0, #4
	if (!lll->role) {
    1c6c:	f280 849c 	bge.w	25a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1220>
	else if (!lll->enc_rx) {
    1c70:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    1c74:	071d      	lsls	r5, r3, #28
    1c76:	f100 86a0 	bmi.w	29ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1632>
		if (conn->llcp.encryption.error_code) {
    1c7a:	f894 50ed 	ldrb.w	r5, [r4, #237]	; 0xed
    1c7e:	2d00      	cmp	r5, #0
    1c80:	f000 851f 	beq.w	26c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x133a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1c84:	7903      	ldrb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    1c86:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1c8a:	f043 0303 	orr.w	r3, r3, #3
    1c8e:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    1c90:	07d0      	lsls	r0, r2, #31
    1c92:	f140 868c 	bpl.w	29ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1626>
	    (conn->llcp_feature.features_conn &
    1c96:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	if (conn->common.fex_valid &&
    1c9a:	0759      	lsls	r1, r3, #29
    1c9c:	f140 8687 	bpl.w	29ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1626>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1ca0:	2211      	movs	r2, #17
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1ca2:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
    1ca4:	7275      	strb	r5, [r6, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1ca6:	71f2      	strb	r2, [r6, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1ca8:	7233      	strb	r3, [r6, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    1caa:	7177      	strb	r7, [r6, #5]
	    conn->tx_head &&
    1cac:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	conn->llcp.encryption.error_code = 0U;
    1cb0:	2200      	movs	r2, #0
    1cb2:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
	if (
    1cb6:	2b00      	cmp	r3, #0
    1cb8:	f000 854d 	beq.w	2756 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13ce>
	    !conn->llcp_enc.pause_tx &&
    1cbc:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1cc0:	0792      	lsls	r2, r2, #30
    1cc2:	f100 8548 	bmi.w	2756 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13ce>
	    !conn->llcp_phy.pause_tx &&
    1cc6:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1cca:	07d7      	lsls	r7, r2, #31
    1ccc:	f100 8543 	bmi.w	2756 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13ce>
		if (conn->tx_head == conn->tx_data) {
    1cd0:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1cd4:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1cd6:	bf04      	itt	eq
    1cd8:	681a      	ldreq	r2, [r3, #0]
    1cda:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1cde:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1ce2:	2a00      	cmp	r2, #0
    1ce4:	f000 877b 	beq.w	2bde <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1856>
	tx->next = conn->tx_ctrl_last->next;
    1ce8:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1cec:	681a      	ldr	r2, [r3, #0]
    1cee:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    1cf0:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    1cf2:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1cf6:	6833      	ldr	r3, [r6, #0]
    1cf8:	2b00      	cmp	r3, #0
    1cfa:	f000 85b6 	beq.w	286a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14e2>
	conn->llcp_ack = conn->llcp_req;
    1cfe:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1d02:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
    1d06:	f7ff ba64 	b.w	11d2 <ull_conn_llcp+0x22>
		rx = ll_pdu_rx_alloc_peek(2);
    1d0a:	2002      	movs	r0, #2
    1d0c:	f011 ffac 	bl	13c68 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1d10:	4607      	mov	r7, r0
    1d12:	2800      	cmp	r0, #0
    1d14:	f43f aa5d 	beq.w	11d2 <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1d18:	4820      	ldr	r0, [pc, #128]	; (1d9c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa14>)
    1d1a:	f00d fc33 	bl	f584 <mem_acquire>
		if (!tx) {
    1d1e:	4605      	mov	r5, r0
    1d20:	2800      	cmp	r0, #0
    1d22:	f43f aa56 	beq.w	11d2 <ull_conn_llcp+0x22>
		conn->llcp.phy_upd_ind.initiate = 0U;
    1d26:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1d2a:	f36f 0300 	bfc	r3, #0, #1
		if (!((conn->llcp.phy_upd_ind.tx |
    1d2e:	f3c3 0082 	ubfx	r0, r3, #2, #3
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    1d32:	f3c3 1242 	ubfx	r2, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
    1d36:	ea50 0802 	orrs.w	r8, r0, r2
		conn->llcp.phy_upd_ind.initiate = 0U;
    1d3a:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (!((conn->llcp.phy_upd_ind.tx |
    1d3e:	b2db      	uxtb	r3, r3
    1d40:	f040 85b4 	bne.w	28ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1524>
			conn->llcp_ack = conn->llcp_req;
    1d44:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.phy_upd_ind.instant = 0U;
    1d48:	f8a4 80ee 	strh.w	r8, [r4, #238]	; 0xee
			if (conn->llcp.phy_upd_ind.cmd) {
    1d4c:	0798      	lsls	r0, r3, #30
			conn->llcp_ack = conn->llcp_req;
    1d4e:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			if (conn->llcp.phy_upd_ind.cmd) {
    1d52:	f100 866e 	bmi.w	2a32 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16aa>
    1d56:	4643      	mov	r3, r8
    1d58:	4641      	mov	r1, r8
		pdu_ctrl_tx->len =
    1d5a:	2205      	movs	r2, #5
    1d5c:	716a      	strb	r2, [r5, #5]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    1d5e:	f885 8008 	strb.w	r8, [r5, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1d62:	792a      	ldrb	r2, [r5, #4]
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    1d64:	726b      	strb	r3, [r5, #9]
	    conn->tx_head &&
    1d66:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    1d6a:	8169      	strh	r1, [r5, #10]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1d6c:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    1d70:	2118      	movs	r1, #24
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1d72:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_tx->llctrl.opcode =
    1d74:	71e9      	strb	r1, [r5, #7]
	if (
    1d76:	2b00      	cmp	r3, #0
    1d78:	f47f af47 	bne.w	1c0a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x882>
		if (!conn->tx_ctrl) {
    1d7c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1d80:	2a00      	cmp	r2, #0
    1d82:	f47f af58 	bne.w	1c36 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8ae>
			tx->next = conn->tx_head;
    1d86:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    1d88:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1d8c:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    1d90:	e759      	b.n	1c46 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8be>
		conn_upd_curr = conn;
    1d92:	f8c8 4000 	str.w	r4, [r8]
    1d96:	f7ff bab0 	b.w	12fa <ull_conn_llcp+0x14a>
    1d9a:	bf00      	nop
    1d9c:	200021a4 	.word	0x200021a4
    1da0:	00025ee4 	.word	0x00025ee4
    1da4:	000259f4 	.word	0x000259f4
    1da8:	00025984 	.word	0x00025984
    1dac:	d1b71759 	.word	0xd1b71759
    1db0:	200004c0 	.word	0x200004c0
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1db4:	f002 0207 	and.w	r2, r2, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    1db8:	f8b4 c19c 	ldrh.w	ip, [r4, #412]	; 0x19c
		lll->max_rx_time = conn->llcp_length.rx_time;
    1dbc:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
		tx_octets = conn->llcp_length.tx_octets;
    1dc0:	f8b4 919e 	ldrh.w	r9, [r4, #414]	; 0x19e
		uint16_t tx_time = conn->llcp_length.tx_time;
    1dc4:	f8b4 81a2 	ldrh.w	r8, [r4, #418]	; 0x1a2
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    1dc8:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1dcc:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
    1dce:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1dd2:	f000 84f2 	beq.w	27ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1432>
			conn->llcp_length.state =
    1dd6:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
    1dda:	2206      	movs	r2, #6
    1ddc:	f362 0302 	bfi	r3, r2, #0, #3
    1de0:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		rx = conn->llcp_rx;
    1de4:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    1de8:	2f00      	cmp	r7, #0
    1dea:	f000 84c0 	beq.w	276e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13e6>
    1dee:	6838      	ldr	r0, [r7, #0]
    1df0:	2800      	cmp	r0, #0
    1df2:	f000 84bc 	beq.w	276e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13e6>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1df6:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    1df8:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    1dfa:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
    1dfe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1e02:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1e06:	2202      	movs	r2, #2
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1e08:	773b      	strb	r3, [r7, #28]
		pdu_ctrl_rx->len =
    1e0a:	f04f 0a09 	mov.w	sl, #9
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1e0e:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
    1e10:	f8a7 e006 	strh.w	lr, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1e14:	f8a7 c020 	strh.w	ip, [r7, #32]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1e18:	8479      	strh	r1, [r7, #34]	; 0x22
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1e1a:	713a      	strb	r2, [r7, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1e1c:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
    1e1e:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    1e20:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1e24:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		pdu_ctrl_rx->len =
    1e28:	f887 a01d 	strb.w	sl, [r7, #29]
		ll_rx_put(rx->hdr.link, rx);
    1e2c:	f011 ff0c 	bl	13c48 <ll_rx_put>
		ll_rx_sched();
    1e30:	f011 ff14 	bl	13c5c <ll_rx_sched>
	break;
    1e34:	f7ff b9f6 	b.w	1224 <ull_conn_llcp+0x74>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1e38:	48db      	ldr	r0, [pc, #876]	; (21a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe20>)
    1e3a:	f00d fba3 	bl	f584 <mem_acquire>
		if (!tx) {
    1e3e:	2800      	cmp	r0, #0
    1e40:	f43f a9f0 	beq.w	1224 <ull_conn_llcp+0x74>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1e44:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    1e48:	f8b4 119e 	ldrh.w	r1, [r4, #414]	; 0x19e
		conn->default_tx_time = conn->llcp_length.tx_time;
    1e4c:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    1e50:	f8a4 10d6 	strh.w	r1, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1e54:	2701      	movs	r7, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    1e56:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1e5a:	f367 0202 	bfi	r2, r7, #0, #3
    1e5e:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
		pdu_ctrl_tx->len =
    1e62:	2709      	movs	r7, #9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1e64:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len =
    1e66:	7147      	strb	r7, [r0, #5]
	if (!conn->common.fex_valid ||
    1e68:	f894 70dc 	ldrb.w	r7, [r4, #220]	; 0xdc
	feature_coded_phy = (conn->llcp_feature.features_conn &
    1e6c:	f8d4 e11c 	ldr.w	lr, [r4, #284]	; 0x11c
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    1e70:	8181      	strh	r1, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1e72:	f042 0203 	orr.w	r2, r2, #3
    1e76:	7102      	strb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1e78:	221b      	movs	r2, #27
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    1e7a:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1e7e:	2100      	movs	r1, #0
    1e80:	7202      	strb	r2, [r0, #8]
	if (!conn->common.fex_valid ||
    1e82:	07fa      	lsls	r2, r7, #31
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    1e84:	f880 c007 	strb.w	ip, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1e88:	7241      	strb	r1, [r0, #9]
	if (!conn->common.fex_valid ||
    1e8a:	f140 83f3 	bpl.w	2674 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12ec>
    1e8e:	f41e 6f00 	tst.w	lr, #2048	; 0x800
    1e92:	f000 83ef 	beq.w	2674 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12ec>
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
    1e96:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
    1e9a:	bf28      	it	cs
    1e9c:	f44f 6329 	movcs.w	r3, #2704	; 0xa90
    1ea0:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    1ea4:	bf38      	it	cc
    1ea6:	f44f 73a4 	movcc.w	r3, #328	; 0x148
    1eaa:	f44f 6129 	mov.w	r1, #2704	; 0xa90
	    conn->tx_head &&
    1eae:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1eb2:	8141      	strh	r1, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1eb4:	81c3      	strh	r3, [r0, #14]
	if (
    1eb6:	2a00      	cmp	r2, #0
    1eb8:	f000 8347 	beq.w	254a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c2>
	    !conn->llcp_enc.pause_tx &&
    1ebc:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	    conn->tx_head &&
    1ec0:	079b      	lsls	r3, r3, #30
    1ec2:	f100 8342 	bmi.w	254a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c2>
	    !conn->llcp_phy.pause_tx &&
    1ec6:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    1eca:	07df      	lsls	r7, r3, #31
    1ecc:	f100 833d 	bmi.w	254a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c2>
		if (conn->tx_head == conn->tx_data) {
    1ed0:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    1ed4:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
    1ed6:	bf04      	itt	eq
    1ed8:	6813      	ldreq	r3, [r2, #0]
    1eda:	f8c4 31bc 	streq.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1ede:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    1ee2:	2b00      	cmp	r3, #0
    1ee4:	f000 863c 	beq.w	2b60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17d8>
	tx->next = conn->tx_ctrl_last->next;
    1ee8:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1eec:	681a      	ldr	r2, [r3, #0]
    1eee:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1ef0:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1ef2:	6802      	ldr	r2, [r0, #0]
    1ef4:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1ef8:	2a00      	cmp	r2, #0
    1efa:	f000 858c 	beq.w	2a16 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x168e>
		conn->procedure_expire = conn->procedure_reload;
    1efe:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1f02:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
    1f06:	f7ff b98d 	b.w	1224 <ull_conn_llcp+0x74>
		if (!conn->tx_ctrl) {
    1f0a:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1f0e:	2a00      	cmp	r2, #0
    1f10:	f47f acef 	bne.w	18f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x56a>
			tx->next = conn->tx_head;
    1f14:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    1f16:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1f1a:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    1f1e:	e4f0      	b.n	1902 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x57a>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1f20:	fb08 3311 	mls	r3, r8, r1, r3
    1f24:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1f28:	48a0      	ldr	r0, [pc, #640]	; (21ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe24>)
    1f2a:	b29b      	uxth	r3, r3
    1f2c:	fb02 f303 	mul.w	r3, r2, r3
    1f30:	fba3 0100 	umull	r0, r1, r3, r0
    1f34:	a39a      	add	r3, pc, #616	; (adr r3, 21a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe18>)
    1f36:	e9d3 2300 	ldrd	r2, r3, [r3]
    1f3a:	f7fe f8e1 	bl	100 <__aeabi_uldivmod>
    1f3e:	1a2d      	subs	r5, r5, r0
    1f40:	f7ff ba68 	b.w	1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>
		LL_ASSERT(rx && rx->hdr.link);
    1f44:	4a9a      	ldr	r2, [pc, #616]	; (21b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe28>)
    1f46:	499b      	ldr	r1, [pc, #620]	; (21b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe2c>)
    1f48:	489b      	ldr	r0, [pc, #620]	; (21b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe30>)
    1f4a:	f640 03e7 	movw	r3, #2279	; 0x8e7
    1f4e:	f01d fbd2 	bl	1f6f6 <printk>
    1f52:	4040      	eors	r0, r0
    1f54:	f380 8811 	msr	BASEPRI, r0
    1f58:	f04f 0003 	mov.w	r0, #3
    1f5c:	df02      	svc	2
    1f5e:	f8d8 0000 	ldr.w	r0, [r8]
    1f62:	f7ff ba08 	b.w	1376 <ull_conn_llcp+0x1c6>
		} else if (conn->llcp_conn_param.ack !=
    1f66:	f894 c171 	ldrb.w	ip, [r4, #369]	; 0x171
    1f6a:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
    1f6e:	4594      	cmp	ip, r2
    1f70:	f000 8207 	beq.w	2382 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xffa>
	conn_upd = conn_upd_curr;
    1f74:	f8df 824c 	ldr.w	r8, [pc, #588]	; 21c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe3c>
    1f78:	f8d8 2000 	ldr.w	r2, [r8]
	if (conn_upd && (conn_upd != conn)) {
    1f7c:	2a00      	cmp	r2, #0
    1f7e:	f000 8579 	beq.w	2a74 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16ec>
    1f82:	4294      	cmp	r4, r2
    1f84:	f47f a925 	bne.w	11d2 <ull_conn_llcp+0x22>
	switch (conn->llcp_conn_param.state) {
    1f88:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    1f8c:	f002 0207 	and.w	r2, r2, #7
    1f90:	2a05      	cmp	r2, #5
    1f92:	f200 874c 	bhi.w	2e2e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1aa6>
    1f96:	f20f 0c08 	addw	ip, pc, #8
    1f9a:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
    1f9e:	bf00      	nop
    1fa0:	00002089 	.word	0x00002089
    1fa4:	00002009 	.word	0x00002009
    1fa8:	00001fb9 	.word	0x00001fb9
    1fac:	000011c9 	.word	0x000011c9
    1fb0:	000011c9 	.word	0x000011c9
    1fb4:	000011c9 	.word	0x000011c9
	if (conn->llcp_enc.pause_tx) {
    1fb8:	079b      	lsls	r3, r3, #30
    1fba:	f53f a90a 	bmi.w	11d2 <ull_conn_llcp+0x22>
	rx = ll_pdu_rx_alloc();
    1fbe:	f011 fe71 	bl	13ca4 <ll_pdu_rx_alloc>
	if (!rx) {
    1fc2:	4601      	mov	r1, r0
    1fc4:	2800      	cmp	r0, #0
    1fc6:	f43f ad42 	beq.w	1a4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1fca:	7f03      	ldrb	r3, [r0, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    1fcc:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    1fd0:	2003      	movs	r0, #3
    1fd2:	f360 0202 	bfi	r2, r0, #0, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1fd6:	4303      	orrs	r3, r0
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    1fd8:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
	rx->hdr.handle = conn->lll.handle;
    1fdc:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1fde:	770b      	strb	r3, [r1, #28]
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1fe0:	2702      	movs	r7, #2
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1fe2:	2318      	movs	r3, #24
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1fe4:	710f      	strb	r7, [r1, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1fe6:	774b      	strb	r3, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1fe8:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1fec:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
	rx->hdr.handle = conn->lll.handle;
    1ff0:	80c8      	strh	r0, [r1, #6]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1ff2:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1ff6:	840a      	strh	r2, [r1, #32]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1ff8:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1ffc:	844b      	strh	r3, [r1, #34]	; 0x22
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1ffe:	230f      	movs	r3, #15
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2000:	8488      	strh	r0, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2002:	84ca      	strh	r2, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2004:	77cb      	strb	r3, [r1, #31]
    2006:	e51d      	b.n	1a44 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6bc>
	if (conn->llcp_conn_param.status) {
    2008:	f894 7173 	ldrb.w	r7, [r4, #371]	; 0x173
    200c:	2f00      	cmp	r7, #0
    200e:	f040 85af 	bne.w	2b70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17e8>
	if (!conn->lll.role) {
    2012:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    2016:	2b00      	cmp	r3, #0
    2018:	f2c0 8644 	blt.w	2ca4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x191c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    201c:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		if (conn->llcp_conn_param.preferred_periodicity) {
    2020:	f894 017c 	ldrb.w	r0, [r4, #380]	; 0x17c
		conn->llcp_cu.win_offset_us = 0U;
    2024:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2028:	2205      	movs	r2, #5
    202a:	f362 0302 	bfi	r3, r2, #0, #3
		conn->llcp_cu.win_size = 1U;
    202e:	2201      	movs	r2, #1
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2030:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
		conn->llcp_cu.win_size = 1U;
    2034:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
		if (conn->llcp_conn_param.preferred_periodicity) {
    2038:	2800      	cmp	r0, #0
    203a:	f000 86a8 	beq.w	2d8e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a06>
				((conn->llcp_conn_param.interval_min /
    203e:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
    2042:	fbb3 f3f0 	udiv	r3, r3, r0
				  conn->llcp_conn_param.preferred_periodicity) +
    2046:	4413      	add	r3, r2
			conn->llcp_cu.interval =
    2048:	fb13 f300 	smulbb	r3, r3, r0
    204c:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    204e:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2052:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
    2056:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    205a:	f3c2 03c0 	ubfx	r3, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    205e:	009b      	lsls	r3, r3, #2
    2060:	f020 0207 	bic.w	r2, r0, #7
    2064:	f043 0302 	orr.w	r3, r3, #2
    2068:	4313      	orrs	r3, r2
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    206a:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    206e:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2072:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.ack--;
    2076:	3901      	subs	r1, #1
    2078:	f884 1105 	strb.w	r1, [r4, #261]	; 0x105
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    207c:	f8a4 010a 	strh.w	r0, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    2080:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
		return;
    2084:	f7ff b8a5 	b.w	11d2 <ull_conn_llcp+0x22>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2088:	4847      	ldr	r0, [pc, #284]	; (21a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe20>)
			event_counter = lll->event_counter +
    208a:	f8b4 9036 	ldrh.w	r9, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
    208e:	f8b4 a032 	ldrh.w	sl, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2092:	f00d fa77 	bl	f584 <mem_acquire>
	if (!tx) {
    2096:	4607      	mov	r7, r0
    2098:	2800      	cmp	r0, #0
    209a:	f43f acd8 	beq.w	1a4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c6>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    209e:	7902      	ldrb	r2, [r0, #4]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    20a0:	f894 1172 	ldrb.w	r1, [r4, #370]	; 0x172
    20a4:	2004      	movs	r0, #4
    20a6:	f360 0102 	bfi	r1, r0, #0, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    20aa:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    20ae:	2018      	movs	r0, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    20b0:	f884 1172 	strb.w	r1, [r4, #370]	; 0x172
			event_counter = lll->event_counter +
    20b4:	eb09 030a 	add.w	r3, r9, sl
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    20b8:	713a      	strb	r2, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    20ba:	7178      	strb	r0, [r7, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    20bc:	f8b4 0174 	ldrh.w	r0, [r4, #372]	; 0x174
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    20c0:	f8b4 1176 	ldrh.w	r1, [r4, #374]	; 0x176
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    20c4:	f8b4 2178 	ldrh.w	r2, [r4, #376]	; 0x178
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    20c8:	8138      	strh	r0, [r7, #8]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    20ca:	4433      	add	r3, r6
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    20cc:	f8b4 017a 	ldrh.w	r0, [r4, #378]	; 0x17a
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    20d0:	8179      	strh	r1, [r7, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    20d2:	81ba      	strh	r2, [r7, #12]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    20d4:	210f      	movs	r1, #15
	p->preferred_periodicity = 0U;
    20d6:	2200      	movs	r2, #0
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    20d8:	f8a7 3011 	strh.w	r3, [r7, #17]
	p->offset1 = sys_cpu_to_le16(0xffff);
    20dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    20e0:	81f8      	strh	r0, [r7, #14]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    20e2:	71f9      	strb	r1, [r7, #7]
	p->preferred_periodicity = 0U;
    20e4:	743a      	strb	r2, [r7, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    20e6:	74fa      	strb	r2, [r7, #19]
    20e8:	753a      	strb	r2, [r7, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
    20ea:	757b      	strb	r3, [r7, #21]
    20ec:	75bb      	strb	r3, [r7, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    20ee:	75fb      	strb	r3, [r7, #23]
    20f0:	763b      	strb	r3, [r7, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    20f2:	767b      	strb	r3, [r7, #25]
    20f4:	76bb      	strb	r3, [r7, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    20f6:	76fb      	strb	r3, [r7, #27]
    20f8:	773b      	strb	r3, [r7, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    20fa:	777b      	strb	r3, [r7, #29]
    20fc:	77bb      	strb	r3, [r7, #30]
	ctrl_tx_pause_enqueue(conn, tx, false);
    20fe:	4639      	mov	r1, r7
    2100:	4620      	mov	r0, r4
    2102:	f012 fdf9 	bl	14cf8 <ctrl_tx_pause_enqueue>
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    2106:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    2108:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
	conn_upd_curr = conn;
    210c:	f8c8 4000 	str.w	r4, [r8]
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    2110:	2a00      	cmp	r2, #0
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    2112:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
	conn->procedure_expire = conn->procedure_reload;
    2116:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    211a:	da0a      	bge.n	2132 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdaa>
			uint32_t ticks_prepare_to_start =
    211c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
				(conn->evt.ticks_xtal_to_start &
    2120:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    2124:	428b      	cmp	r3, r1
    2126:	bf2c      	ite	cs
    2128:	18eb      	addcs	r3, r5, r3
    212a:	186b      	addcc	r3, r5, r1
    212c:	1a9b      	subs	r3, r3, r2
    212e:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
		s_mfy_sched_offset.param = (void *)conn;
    2132:	4b22      	ldr	r3, [pc, #136]	; (21bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe34>)
		conn->llcp_conn_param.pdu_win_offset0 = (uint16_t *)&p->offset0;
    2134:	3713      	adds	r7, #19
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2136:	2201      	movs	r2, #1
		conn->llcp_conn_param.pdu_win_offset0 = (uint16_t *)&p->offset0;
    2138:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    213c:	4610      	mov	r0, r2
    213e:	2102      	movs	r1, #2
		s_mfy_sched_offset.param = (void *)conn;
    2140:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2142:	f00d faf7 	bl	f734 <mayfly_enqueue>
		LL_ASSERT(!retval);
    2146:	2800      	cmp	r0, #0
    2148:	f43f ac81 	beq.w	1a4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c6>
    214c:	4a18      	ldr	r2, [pc, #96]	; (21b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe28>)
    214e:	491c      	ldr	r1, [pc, #112]	; (21c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe38>)
    2150:	f640 339e 	movw	r3, #2974	; 0xb9e
		LL_ASSERT(0);
    2154:	4818      	ldr	r0, [pc, #96]	; (21b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe30>)
    2156:	f01d face 	bl	1f6f6 <printk>
    215a:	4040      	eors	r0, r0
    215c:	f380 8811 	msr	BASEPRI, r0
    2160:	f04f 0003 	mov.w	r0, #3
    2164:	df02      	svc	2
		break;
    2166:	e472      	b.n	1a4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c6>
		if ((conn->llcp_cu.interval != lll->interval) ||
    2168:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    216a:	428a      	cmp	r2, r1
    216c:	f47f a910 	bne.w	1390 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2170:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2174:	fb02 fb03 	mul.w	fp, r2, r3
    2178:	f242 7210 	movw	r2, #10000	; 0x2710
		    (conn->llcp_cu.latency != lll->latency) ||
    217c:	f8b4 e0c6 	ldrh.w	lr, [r4, #198]	; 0xc6
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2180:	fb02 b20c 	mla	r2, r2, ip, fp
    2184:	3a01      	subs	r2, #1
    2186:	fbb2 f2fb 	udiv	r2, r2, fp
		    (conn->llcp_cu.latency != lll->latency) ||
    218a:	b292      	uxth	r2, r2
    218c:	4596      	cmp	lr, r2
    218e:	f47f a8ff 	bne.w	1390 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2192:	2303      	movs	r3, #3
    2194:	f888 3004 	strb.w	r3, [r8, #4]
    2198:	f7ff b90a 	b.w	13b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28>
    219c:	f3af 8000 	nop.w
    21a0:	1afd498d 	.word	0x1afd498d
    21a4:	00000007 	.word	0x00000007
    21a8:	200021a4 	.word	0x200021a4
    21ac:	3b9aca00 	.word	0x3b9aca00
    21b0:	00025ee4 	.word	0x00025ee4
    21b4:	00025ff8 	.word	0x00025ff8
    21b8:	00025984 	.word	0x00025984
    21bc:	200004d0 	.word	0x200004d0
    21c0:	00025c78 	.word	0x00025c78
    21c4:	20002120 	.word	0x20002120
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    21c8:	2201      	movs	r2, #1
    21ca:	4610      	mov	r0, r2
    21cc:	2102      	movs	r1, #2
    21ce:	f00d fa7d 	bl	f6cc <mayfly_enable>
				return -ECANCELED;
    21d2:	f06f 0047 	mvn.w	r0, #71	; 0x47
    21d6:	f7ff b803 	b.w	11e0 <ull_conn_llcp+0x30>
    21da:	f44f 79a4 	mov.w	r9, #328	; 0x148
    21de:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    21e2:	f7ff ba12 	b.w	160a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x282>
		if (!conn->tx_ctrl) {
    21e6:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    21ea:	2a00      	cmp	r2, #0
    21ec:	f47f acd5 	bne.w	1b9a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x812>
			tx->next = conn->tx_head;
    21f0:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    21f2:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    21f6:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    21fa:	e4d6      	b.n	1baa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x822>
			lll->slave.window_widening_prepare_us -=
    21fc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
    21fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2200:	4fd9      	ldr	r7, [pc, #868]	; (2568 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11e0>)
			lll->slave.window_widening_prepare_us -=
    2202:	fb03 231a 	mls	r3, r3, sl, r2
    2206:	64e3      	str	r3, [r4, #76]	; 0x4c
				(((lll_clock_ppm_local_get() +
    2208:	f018 f84e 	bl	1a2a8 <lll_clock_ppm_local_get>
    220c:	4680      	mov	r8, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    220e:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    2212:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2216:	f018 f849 	bl	1a2ac <lll_clock_ppm_get>
				(((lll_clock_ppm_local_get() +
    221a:	eb08 0300 	add.w	r3, r8, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    221e:	fb06 f303 	mul.w	r3, r6, r3
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2222:	48d2      	ldr	r0, [pc, #840]	; (256c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11e4>)
			lll->slave.window_widening_prepare_us +=
    2224:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				conn->llcp_cu.win_size * 1250U;
    2226:	f894 1114 	ldrb.w	r1, [r4, #276]	; 0x114
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    222a:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    222e:	f203 233f 	addw	r3, r3, #575	; 0x23f
    2232:	fba0 0303 	umull	r0, r3, r0, r3
    2236:	ea4f 4893 	mov.w	r8, r3, lsr #18
				lll->slave.window_widening_periodic_us *
    223a:	fb08 f00b 	mul.w	r0, r8, fp
				(conn_interval_us >> 1) - EVENT_IFS_US;
    223e:	0873      	lsrs	r3, r6, #1
			lll->slave.window_widening_prepare_us +=
    2240:	4402      	add	r2, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    2242:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    2244:	429a      	cmp	r2, r3
				conn->llcp_cu.win_size * 1250U;
    2246:	fb09 fc01 	mul.w	ip, r9, r1
			lll->slave.window_widening_prepare_us +=
    224a:	bf28      	it	cs
    224c:	461a      	movcs	r2, r3
			conn->slave.ticks_to_offset = 0U;
    224e:	f04f 0e00 	mov.w	lr, #0
			lll->slave.window_widening_max_us =
    2252:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
			lll->slave.window_widening_periodic_us =
    2256:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    225a:	a3c1      	add	r3, pc, #772	; (adr r3, 2560 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11d8>)
    225c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2260:	fba0 0107 	umull	r0, r1, r0, r7
			lll->slave.window_size_prepare_us =
    2264:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
			conn->slave.ticks_to_offset = 0U;
    2268:	f8c4 e0e4 	str.w	lr, [r4, #228]	; 0xe4
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    226c:	f7fd ff48 	bl	100 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2270:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2274:	4684      	mov	ip, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2276:	48be      	ldr	r0, [pc, #760]	; (2570 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11e8>)
    2278:	fba0 3003 	umull	r3, r0, r0, r3
    227c:	0a80      	lsrs	r0, r0, #10
    227e:	fb09 f000 	mul.w	r0, r9, r0
    2282:	fba0 0107 	umull	r0, r1, r0, r7
    2286:	a3b6      	add	r3, pc, #728	; (adr r3, 2560 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11d8>)
    2288:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    228c:	eba5 050c 	sub.w	r5, r5, ip
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2290:	f7fd ff36 	bl	100 <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    2294:	eba6 0708 	sub.w	r7, r6, r8
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2298:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    229c:	f8b4 8108 	ldrh.w	r8, [r4, #264]	; 0x108
    22a0:	f7ff b8d7 	b.w	1452 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xca>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    22a4:	48b3      	ldr	r0, [pc, #716]	; (2574 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11ec>)
    22a6:	f00d f96d 	bl	f584 <mem_acquire>
	if (tx) {
    22aa:	4680      	mov	r8, r0
    22ac:	2800      	cmp	r0, #0
    22ae:	f43f abce 	beq.w	1a4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c6>
		conn->llcp_feature.ack--;
    22b2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		conn->llcp_feature.features_conn = LL_FEAT;
    22b6:	4ab0      	ldr	r2, [pc, #704]	; (2578 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11f0>)
    22b8:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
		conn->llcp_feature.ack--;
    22bc:	3b01      	subs	r3, #1
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    22be:	2209      	movs	r2, #9
		conn->llcp_feature.ack--;
    22c0:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    22c4:	7142      	strb	r2, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    22c6:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    22ca:	7903      	ldrb	r3, [r0, #4]
		pdu->llctrl.opcode = !conn->lll.role ?
    22cc:	2a00      	cmp	r2, #0
    22ce:	bfac      	ite	ge
    22d0:	2208      	movge	r2, #8
    22d2:	220e      	movlt	r2, #14
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    22d4:	f043 0303 	orr.w	r3, r3, #3
		pdu->llctrl.opcode = !conn->lll.role ?
    22d8:	71c2      	strb	r2, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    22da:	2208      	movs	r2, #8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    22dc:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    22de:	4639      	mov	r1, r7
    22e0:	4410      	add	r0, r2
    22e2:	f01f faab 	bl	2183c <memset>
		sys_put_le24(conn->llcp_feature.features_conn,
    22e6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	dst[0] = val;
    22ea:	f888 3008 	strb.w	r3, [r8, #8]
	dst[1] = val >> 8;
    22ee:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    22f2:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    22f4:	f888 2009 	strb.w	r2, [r8, #9]
	dst[2] = val >> 16;
    22f8:	f888 300a 	strb.w	r3, [r8, #10]
	    conn->tx_head &&
    22fc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    2300:	2b00      	cmp	r3, #0
    2302:	f000 81c7 	beq.w	2694 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130c>
	    !conn->llcp_enc.pause_tx &&
    2306:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    230a:	0797      	lsls	r7, r2, #30
    230c:	f100 81c2 	bmi.w	2694 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130c>
	    !conn->llcp_phy.pause_tx &&
    2310:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    2314:	07d0      	lsls	r0, r2, #31
    2316:	f100 81bd 	bmi.w	2694 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130c>
		if (conn->tx_head == conn->tx_data) {
    231a:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    231e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2320:	bf04      	itt	eq
    2322:	681a      	ldreq	r2, [r3, #0]
    2324:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2328:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    232c:	2a00      	cmp	r2, #0
    232e:	f000 845d 	beq.w	2bec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1864>
	tx->next = conn->tx_ctrl_last->next;
    2332:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    2336:	681a      	ldr	r2, [r3, #0]
    2338:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    233c:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
    2340:	f8d8 3000 	ldr.w	r3, [r8]
    2344:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
	if (!tx->next) {
    2348:	2b00      	cmp	r3, #0
    234a:	f000 83ad 	beq.w	2aa8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1720>
		conn->procedure_expire = conn->procedure_reload;
    234e:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    2352:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    2356:	f7ff bb7a 	b.w	1a4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c6>
		conn->tx_data_last = tx;
    235a:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    235e:	f7ff bad3 	b.w	1908 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x580>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    2362:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    2366:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    236a:	f3c5 0182 	ubfx	r1, r5, #2, #3
    236e:	f361 0202 	bfi	r2, r1, #0, #3
    2372:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    2376:	464a      	mov	r2, r9
    2378:	f012 fc56 	bl	14c28 <calc_eff_time>
    237c:	4606      	mov	r6, r0
    237e:	f7ff b94a 	b.w	1616 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28e>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    2382:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
    2386:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    238a:	428b      	cmp	r3, r1
    238c:	f000 8220 	beq.w	27d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1448>
	switch (conn->llcp_length.state) {
    2390:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
    2394:	f003 0207 	and.w	r2, r3, #7
    2398:	2a06      	cmp	r2, #6
    239a:	f200 855b 	bhi.w	2e54 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1acc>
    239e:	f20f 0c08 	addw	ip, pc, #8
    23a2:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
    23a6:	bf00      	nop
    23a8:	0000244f 	.word	0x0000244f
    23ac:	000011c9 	.word	0x000011c9
    23b0:	000011c9 	.word	0x000011c9
    23b4:	000011c9 	.word	0x000011c9
    23b8:	000023c5 	.word	0x000023c5
    23bc:	000023c5 	.word	0x000023c5
    23c0:	000011c9 	.word	0x000011c9
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    23c4:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
    23c8:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    23cc:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_time = conn->llcp_length.rx_time;
    23d0:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
		tx_octets = conn->llcp_length.tx_octets;
    23d4:	f8b4 919e 	ldrh.w	r9, [r4, #414]	; 0x19e
		uint16_t tx_time = conn->llcp_length.tx_time;
    23d8:	f8b4 81a2 	ldrh.w	r8, [r4, #418]	; 0x1a2
		lll->max_rx_time = conn->llcp_length.rx_time;
    23dc:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    23e0:	2a04      	cmp	r2, #4
    23e2:	f000 83ea 	beq.w	2bba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1832>
			conn->llcp_length.state =
    23e6:	2206      	movs	r2, #6
    23e8:	f362 0302 	bfi	r3, r2, #0, #3
    23ec:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		rx = conn->llcp_rx;
    23f0:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    23f4:	2f00      	cmp	r7, #0
    23f6:	f000 83a4 	beq.w	2b42 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17ba>
    23fa:	6838      	ldr	r0, [r7, #0]
    23fc:	2800      	cmp	r0, #0
    23fe:	f000 83a0 	beq.w	2b42 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17ba>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    2402:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    2404:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    2406:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
    240a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    240e:	f043 0303 	orr.w	r3, r3, #3
    2412:	773b      	strb	r3, [r7, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2414:	2202      	movs	r2, #2
		pdu_ctrl_rx->len =
    2416:	2309      	movs	r3, #9
    2418:	777b      	strb	r3, [r7, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    241a:	713a      	strb	r2, [r7, #4]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    241c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    2420:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    2424:	847a      	strh	r2, [r7, #34]	; 0x22
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    2426:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
    2428:	f8a7 c006 	strh.w	ip, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    242c:	8439      	strh	r1, [r7, #32]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    242e:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
    2430:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2432:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    2436:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    243a:	f011 fc05 	bl	13c48 <ll_rx_put>
		ll_rx_sched();
    243e:	f011 fc0d 	bl	13c5c <ll_rx_sched>
	break;
    2442:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    2446:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
    244a:	f7fe bebd 	b.w	11c8 <ull_conn_llcp+0x18>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    244e:	4849      	ldr	r0, [pc, #292]	; (2574 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11ec>)
    2450:	f00d f898 	bl	f584 <mem_acquire>
		if (!tx) {
    2454:	4601      	mov	r1, r0
    2456:	2800      	cmp	r0, #0
    2458:	f43f aaf9 	beq.w	1a4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c6>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    245c:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    2460:	f8b4 019e 	ldrh.w	r0, [r4, #414]	; 0x19e
		conn->default_tx_time = conn->llcp_length.tx_time;
    2464:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    2468:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    246c:	2701      	movs	r7, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    246e:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    2472:	f367 0202 	bfi	r2, r7, #0, #3
		pdu_ctrl_tx->len =
    2476:	2709      	movs	r7, #9
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    2478:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    247c:	790a      	ldrb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    247e:	714f      	strb	r7, [r1, #5]
	if (!conn->common.fex_valid ||
    2480:	f894 70dc 	ldrb.w	r7, [r4, #220]	; 0xdc
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    2484:	8188      	strh	r0, [r1, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2486:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    248a:	2014      	movs	r0, #20
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    248c:	f04f 0c00 	mov.w	ip, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2490:	710a      	strb	r2, [r1, #4]
	if (!conn->common.fex_valid ||
    2492:	07ff      	lsls	r7, r7, #31
	feature_coded_phy = (conn->llcp_feature.features_conn &
    2494:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    2498:	71c8      	strb	r0, [r1, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    249a:	f04f 001b 	mov.w	r0, #27
    249e:	f881 c009 	strb.w	ip, [r1, #9]
    24a2:	7208      	strb	r0, [r1, #8]
	if (!conn->common.fex_valid ||
    24a4:	f140 83ad 	bpl.w	2c02 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x187a>
    24a8:	0510      	lsls	r0, r2, #20
    24aa:	f140 8454 	bpl.w	2d56 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19ce>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    24ae:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
    24b2:	bf28      	it	cs
    24b4:	f44f 6329 	movcs.w	r3, #2704	; 0xa90
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
    24b8:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    24bc:	bf38      	it	cc
    24be:	f44f 73a4 	movcc.w	r3, #328	; 0x148
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    24c2:	f44f 6229 	mov.w	r2, #2704	; 0xa90
	    conn->tx_head &&
    24c6:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    24ca:	81cb      	strh	r3, [r1, #14]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    24cc:	f5b2 7fa4 	cmp.w	r2, #328	; 0x148
    24d0:	bf38      	it	cc
    24d2:	f44f 72a4 	movcc.w	r2, #328	; 0x148
    24d6:	814a      	strh	r2, [r1, #10]
	if (
    24d8:	2800      	cmp	r0, #0
    24da:	f000 831f 	beq.w	2b1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1794>
	    !conn->llcp_enc.pause_tx &&
    24de:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	    conn->tx_head &&
    24e2:	079b      	lsls	r3, r3, #30
    24e4:	f100 831a 	bmi.w	2b1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1794>
	    !conn->llcp_phy.pause_tx &&
    24e8:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    24ec:	07df      	lsls	r7, r3, #31
    24ee:	f100 8315 	bmi.w	2b1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1794>
		if (conn->tx_head == conn->tx_data) {
    24f2:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    24f6:	4298      	cmp	r0, r3
			conn->tx_data = conn->tx_data->next;
    24f8:	bf04      	itt	eq
    24fa:	6803      	ldreq	r3, [r0, #0]
    24fc:	f8c4 31bc 	streq.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2500:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2504:	2b00      	cmp	r3, #0
    2506:	f000 847c 	beq.w	2e02 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a7a>
	tx->next = conn->tx_ctrl_last->next;
    250a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    250e:	681a      	ldr	r2, [r3, #0]
    2510:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
    2512:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last = tx;
    2514:	f8c4 11b8 	str.w	r1, [r4, #440]	; 0x1b8
	if (!tx->next) {
    2518:	680b      	ldr	r3, [r1, #0]
    251a:	2b00      	cmp	r3, #0
    251c:	f47f af17 	bne.w	234e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfc6>
		conn->tx_data_last = tx;
    2520:	f8c4 11c0 	str.w	r1, [r4, #448]	; 0x1c0
    2524:	e713      	b.n	234e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfc6>
		LL_ASSERT(rx && rx->hdr.link);
    2526:	4a15      	ldr	r2, [pc, #84]	; (257c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11f4>)
    2528:	4915      	ldr	r1, [pc, #84]	; (2580 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11f8>)
    252a:	4816      	ldr	r0, [pc, #88]	; (2584 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11fc>)
    252c:	f640 635f 	movw	r3, #3679	; 0xe5f
    2530:	f01d f8e1 	bl	1f6f6 <printk>
    2534:	4040      	eors	r0, r0
    2536:	f380 8811 	msr	BASEPRI, r0
    253a:	f04f 0003 	mov.w	r0, #3
    253e:	df02      	svc	2
    2540:	6828      	ldr	r0, [r5, #0]
    2542:	f894 b0ec 	ldrb.w	fp, [r4, #236]	; 0xec
    2546:	f7ff b87f 	b.w	1648 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c0>
		if (!conn->tx_ctrl) {
    254a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    254e:	2b00      	cmp	r3, #0
    2550:	f47f acca 	bne.w	1ee8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb60>
			tx->next = conn->tx_head;
    2554:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    2556:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    255a:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    255e:	e4cb      	b.n	1ef8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb70>
    2560:	1afd498d 	.word	0x1afd498d
    2564:	00000007 	.word	0x00000007
    2568:	3b9aca00 	.word	0x3b9aca00
    256c:	431bde83 	.word	0x431bde83
    2570:	d1b71759 	.word	0xd1b71759
    2574:	200021a4 	.word	0x200021a4
    2578:	000149ff 	.word	0x000149ff
    257c:	00025ee4 	.word	0x00025ee4
    2580:	00025ff8 	.word	0x00025ff8
    2584:	00025984 	.word	0x00025984
		LL_ASSERT(rx && rx->hdr.link);
    2588:	4ada      	ldr	r2, [pc, #872]	; (28f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x156c>)
    258a:	49db      	ldr	r1, [pc, #876]	; (28f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1570>)
    258c:	48db      	ldr	r0, [pc, #876]	; (28fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1574>)
    258e:	f640 638b 	movw	r3, #3723	; 0xe8b
    2592:	f01d f8b0 	bl	1f6f6 <printk>
    2596:	4040      	eors	r0, r0
    2598:	f380 8811 	msr	BASEPRI, r0
    259c:	f04f 0003 	mov.w	r0, #3
    25a0:	df02      	svc	2
    25a2:	6828      	ldr	r0, [r5, #0]
    25a4:	f7ff b87b 	b.w	169e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x316>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    25a8:	f104 077f 	add.w	r7, r4, #127	; 0x7f
    25ac:	463b      	mov	r3, r7
    25ae:	462a      	mov	r2, r5
    25b0:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    25b4:	f204 105d 	addw	r0, r4, #349	; 0x15d
    25b8:	f019 fd6e 	bl	1c098 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    25bc:	4639      	mov	r1, r7
    25be:	2210      	movs	r2, #16
    25c0:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    25c4:	f01f f90f 	bl	217e6 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    25c8:	2208      	movs	r2, #8
    25ca:	f104 0198 	add.w	r1, r4, #152	; 0x98
    25ce:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    25d2:	f01f f908 	bl	217e6 <memcpy>
		lll->ccm_rx.direction = 0;
    25d6:	f894 0097 	ldrb.w	r0, [r4, #151]	; 0x97
		lll->ccm_tx.direction = 1;
    25da:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
		lll->enc_rx = 1;
    25de:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    25e2:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
		lll->enc_rx = 1;
    25e6:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.direction = 0;
    25ea:	f365 0000 	bfi	r0, r5, #0, #1
		lll->ccm_tx.direction = 1;
    25ee:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.direction = 0;
    25f2:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97
		lll->enc_rx = 1;
    25f6:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    25fa:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    25fe:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    2602:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    2606:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    260a:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    260e:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    2612:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
		lll->ccm_tx.counter = 0;
    2616:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    261a:	4641      	mov	r1, r8
		lll->ccm_tx.counter = 0;
    261c:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		lll->ccm_tx.direction = 1;
    2620:	f884 20b8 	strb.w	r2, [r4, #184]	; 0xb8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    2624:	4620      	mov	r0, r4
    2626:	f012 fd35 	bl	15094 <start_enc_rsp_send>
	    conn->tx_head &&
    262a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    262e:	2b00      	cmp	r3, #0
    2630:	d03c      	beq.n	26ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1324>
	    !conn->llcp_enc.pause_tx &&
    2632:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    2636:	0792      	lsls	r2, r2, #30
    2638:	d438      	bmi.n	26ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1324>
	    !conn->llcp_phy.pause_tx &&
    263a:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    263e:	07d7      	lsls	r7, r2, #31
    2640:	d434      	bmi.n	26ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1324>
		if (conn->tx_head == conn->tx_data) {
    2642:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2646:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2648:	bf04      	itt	eq
    264a:	681a      	ldreq	r2, [r3, #0]
    264c:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2650:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2654:	2a00      	cmp	r2, #0
    2656:	f000 82ba 	beq.w	2bce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1846>
	tx->next = conn->tx_ctrl_last->next;
    265a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    265e:	681a      	ldr	r2, [r3, #0]
    2660:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    2662:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    2664:	6833      	ldr	r3, [r6, #0]
    2666:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
}
    266a:	f7ff bb45 	b.w	1cf8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x970>
		switch (conn->llcp_cu.state) {
    266e:	49a4      	ldr	r1, [pc, #656]	; (2900 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1578>)
    2670:	f7ff ba2b 	b.w	1aca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x742>
    2674:	f44f 73a4 	mov.w	r3, #328	; 0x148
    2678:	4619      	mov	r1, r3
    267a:	e418      	b.n	1eae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb26>
		if (!conn->tx_ctrl) {
    267c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2680:	2a00      	cmp	r2, #0
    2682:	f47f a8a6 	bne.w	17d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44a>
			tx->next = conn->tx_head;
    2686:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    2688:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    268c:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    2690:	f7ff b8a7 	b.w	17e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x45a>
		if (!conn->tx_ctrl) {
    2694:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2698:	2a00      	cmp	r2, #0
    269a:	f47f ae4a 	bne.w	2332 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfaa>
			tx->next = conn->tx_head;
    269e:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    26a2:	e9c4 886c 	strd	r8, r8, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    26a6:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
    26aa:	e64d      	b.n	2348 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfc0>
		if (!conn->tx_ctrl) {
    26ac:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    26b0:	2a00      	cmp	r2, #0
    26b2:	d1d2      	bne.n	265a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12d2>
			tx->next = conn->tx_head;
    26b4:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    26b6:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    26ba:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    26be:	f7ff bb1b 	b.w	1cf8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x970>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    26c2:	f104 077f 	add.w	r7, r4, #127	; 0x7f
    26c6:	463b      	mov	r3, r7
    26c8:	462a      	mov	r2, r5
    26ca:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    26ce:	f204 105d 	addw	r0, r4, #349	; 0x15d
    26d2:	f019 fce1 	bl	1c098 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    26d6:	4639      	mov	r1, r7
    26d8:	2210      	movs	r2, #16
    26da:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    26de:	f01f f882 	bl	217e6 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    26e2:	2208      	movs	r2, #8
    26e4:	f104 0198 	add.w	r1, r4, #152	; 0x98
    26e8:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    26ec:	f01f f87b 	bl	217e6 <memcpy>
			lll->ccm_rx.direction = 1U;
    26f0:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    26f4:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    26f8:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    26fc:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
			lll->ccm_rx.direction = 1U;
    2700:	f042 0201 	orr.w	r2, r2, #1
			lll->ccm_tx.direction = 0U;
    2704:	f365 0100 	bfi	r1, r5, #0, #1
			lll->enc_rx = 1U;
    2708:	f043 0308 	orr.w	r3, r3, #8
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    270c:	2001      	movs	r0, #1
			lll->ccm_rx.direction = 1U;
    270e:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    2712:	f884 10b8 	strb.w	r1, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    2716:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    271a:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    271e:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    2722:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    2726:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    272a:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    272e:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    2732:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
			lll->ccm_tx.counter = 0U;
    2736:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
    273a:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    273e:	7932      	ldrb	r2, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2740:	7170      	strb	r0, [r6, #5]
	    conn->tx_head &&
    2742:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2746:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
    274a:	2105      	movs	r1, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    274c:	7132      	strb	r2, [r6, #4]
			pdu_ctrl_tx->llctrl.opcode =
    274e:	71f1      	strb	r1, [r6, #7]
	if (
    2750:	2b00      	cmp	r3, #0
    2752:	f47f aab3 	bne.w	1cbc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x934>
		if (!conn->tx_ctrl) {
    2756:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    275a:	2a00      	cmp	r2, #0
    275c:	f47f aac4 	bne.w	1ce8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x960>
			tx->next = conn->tx_head;
    2760:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2762:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2766:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    276a:	f7ff bac4 	b.w	1cf6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x96e>
		LL_ASSERT(rx && rx->hdr.link);
    276e:	4a61      	ldr	r2, [pc, #388]	; (28f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x156c>)
    2770:	4961      	ldr	r1, [pc, #388]	; (28f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1570>)
    2772:	4862      	ldr	r0, [pc, #392]	; (28fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1574>)
    2774:	f44f 6353 	mov.w	r3, #3376	; 0xd30
    2778:	f01c ffbd 	bl	1f6f6 <printk>
    277c:	4040      	eors	r0, r0
    277e:	f380 8811 	msr	BASEPRI, r0
    2782:	f04f 0003 	mov.w	r0, #3
    2786:	df02      	svc	2
    2788:	6838      	ldr	r0, [r7, #0]
    278a:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
    278e:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
    2792:	f7ff bb30 	b.w	1df6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa6e>
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
    2796:	495b      	ldr	r1, [pc, #364]	; (2904 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x157c>)
    2798:	f7ff b997 	b.w	1aca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x742>
		LL_ASSERT(!retval);
    279c:	4a55      	ldr	r2, [pc, #340]	; (28f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x156c>)
    279e:	495a      	ldr	r1, [pc, #360]	; (2908 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1580>)
    27a0:	4856      	ldr	r0, [pc, #344]	; (28fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1574>)
    27a2:	f640 0371 	movw	r3, #2161	; 0x871
    27a6:	f01c ffa6 	bl	1f6f6 <printk>
    27aa:	4040      	eors	r0, r0
    27ac:	f380 8811 	msr	BASEPRI, r0
    27b0:	f04f 0003 	mov.w	r0, #3
    27b4:	df02      	svc	2
    27b6:	f7ff b9d5 	b.w	1b64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7dc>
			if (!conn->llcp_length.cache.tx_octets) {
    27ba:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    27be:	2a00      	cmp	r2, #0
    27c0:	f040 8175 	bne.w	2aae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1726>
				conn->llcp_length.ack = conn->llcp_length.req;
    27c4:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    27c8:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
    27cc:	f7ff bb0a 	b.w	1de4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa5c>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    27d0:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    27d4:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
    27d8:	429a      	cmp	r2, r3
    27da:	f43e acfa 	beq.w	11d2 <ull_conn_llcp+0x22>
	switch (conn->llcp_phy.state) {
    27de:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    27e2:	f002 0103 	and.w	r1, r2, #3
    27e6:	2903      	cmp	r1, #3
    27e8:	f000 8218 	beq.w	2c1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1894>
    27ec:	2900      	cmp	r1, #0
    27ee:	f47e acf0 	bne.w	11d2 <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    27f2:	4846      	ldr	r0, [pc, #280]	; (290c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1584>)
    27f4:	f00c fec6 	bl	f584 <mem_acquire>
		if (!tx) {
    27f8:	4601      	mov	r1, r0
    27fa:	2800      	cmp	r0, #0
    27fc:	f43f a927 	beq.w	1a4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c6>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2800:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2804:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
		conn->lll.phy_flags = conn->llcp_phy.flags;
    2808:	f894 71ab 	ldrb.w	r7, [r4, #427]	; 0x1ab
    280c:	f894 c064 	ldrb.w	ip, [r4, #100]	; 0x64
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2810:	2001      	movs	r0, #1
    2812:	f360 0301 	bfi	r3, r0, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2816:	f3c3 0082 	ubfx	r0, r3, #2, #3
    281a:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    281e:	f3c3 1042 	ubfx	r0, r3, #5, #3
    2822:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
    2826:	f3c7 0740 	ubfx	r7, r7, #1, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    282a:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
    282c:	f884 21ac 	strb.w	r2, [r4, #428]	; 0x1ac
		conn->lll.phy_flags = conn->llcp_phy.flags;
    2830:	f367 0cc3 	bfi	ip, r7, #3, #1
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2834:	f3c3 0282 	ubfx	r2, r3, #2, #3
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2838:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		conn->lll.phy_flags = conn->llcp_phy.flags;
    283c:	f884 c064 	strb.w	ip, [r4, #100]	; 0x64
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2840:	f3c3 1342 	ubfx	r3, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2844:	f040 0003 	orr.w	r0, r0, #3
		pr->tx_phys = conn->llcp_phy.tx;
    2848:	720a      	strb	r2, [r1, #8]
		pdu_ctrl_tx->len =
    284a:	2703      	movs	r7, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    284c:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    284e:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2850:	7108      	strb	r0, [r1, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2852:	71ca      	strb	r2, [r1, #7]
		pdu_ctrl_tx->len =
    2854:	714f      	strb	r7, [r1, #5]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2856:	2200      	movs	r2, #0
    2858:	4620      	mov	r0, r4
    285a:	f012 fa4d 	bl	14cf8 <ctrl_tx_pause_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    285e:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    2862:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
    2866:	f7ff b8f2 	b.w	1a4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c6>
		conn->tx_data_last = tx;
    286a:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    286e:	f7ff ba46 	b.w	1cfe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x976>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    2872:	4592      	cmp	sl, r2
    2874:	f47e aefd 	bne.w	1672 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ea>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2878:	2303      	movs	r3, #3
    287a:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    287c:	4629      	mov	r1, r5
    287e:	f011 f9e3 	bl	13c48 <ll_rx_put>
				rx = conn->llcp_rx;
    2882:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
				LL_ASSERT(rx && rx->hdr.link);
    2886:	2d00      	cmp	r5, #0
    2888:	f000 826c 	beq.w	2d64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19dc>
    288c:	6828      	ldr	r0, [r5, #0]
    288e:	2800      	cmp	r0, #0
    2890:	f000 8268 	beq.w	2d64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19dc>
				conn->llcp_rx = rx->hdr.link->mem;
    2894:	6843      	ldr	r3, [r0, #4]
    2896:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    289a:	2303      	movs	r3, #3
    289c:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    289e:	4629      	mov	r1, r5
    28a0:	f011 f9d2 	bl	13c48 <ll_rx_put>
			ll_rx_sched();
    28a4:	f011 f9da 	bl	13c5c <ll_rx_sched>
			return;
    28a8:	f7fe bc93 	b.w	11d2 <ull_conn_llcp+0x22>
			conn->llcp.phy_upd_ind.instant = event_counter +
    28ac:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    28ae:	4433      	add	r3, r6
							 lll->latency +
    28b0:	3306      	adds	r3, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
    28b2:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			(void)ll_pdu_rx_alloc();
    28b6:	f011 f9f5 	bl	13ca4 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    28ba:	683b      	ldr	r3, [r7, #0]
    28bc:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    28c0:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    28c2:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
			rx = ll_pdu_rx_alloc();
    28c6:	f011 f9ed 	bl	13ca4 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    28ca:	6803      	ldr	r3, [r0, #0]
    28cc:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    28d0:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    28d2:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    28d6:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    28da:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    28de:	f3c3 0882 	ubfx	r8, r3, #2, #3
    28e2:	095b      	lsrs	r3, r3, #5
    28e4:	f7ff ba39 	b.w	1d5a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9d2>
		LL_ASSERT(0);
    28e8:	f640 334f 	movw	r3, #2895	; 0xb4f
		LL_ASSERT(0);
    28ec:	4a01      	ldr	r2, [pc, #4]	; (28f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x156c>)
    28ee:	4908      	ldr	r1, [pc, #32]	; (2910 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1588>)
    28f0:	e430      	b.n	2154 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdcc>
    28f2:	bf00      	nop
    28f4:	00025ee4 	.word	0x00025ee4
    28f8:	00025ff8 	.word	0x00025ff8
    28fc:	00025984 	.word	0x00025984
    2900:	000039e9 	.word	0x000039e9
    2904:	000187b5 	.word	0x000187b5
    2908:	00025c78 	.word	0x00025c78
    290c:	200021a4 	.word	0x200021a4
    2910:	000259f4 	.word	0x000259f4
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2914:	48bd      	ldr	r0, [pc, #756]	; (2c0c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1884>)
    2916:	f00c fe35 	bl	f584 <mem_acquire>
		if (tx) {
    291a:	2800      	cmp	r0, #0
    291c:	f43f a897 	beq.w	1a4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c6>
			conn->llcp_version.ack--;
    2920:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
			conn->llcp_version.tx = 1U;
    2924:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
			conn->llcp_version.ack--;
    2928:	3a01      	subs	r2, #1
    292a:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    292e:	7902      	ldrb	r2, [r0, #4]
			conn->llcp_version.tx = 1U;
    2930:	f043 0301 	orr.w	r3, r3, #1
			pdu->len =
    2934:	2106      	movs	r1, #6
			conn->llcp_version.tx = 1U;
    2936:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    293a:	f042 0203 	orr.w	r2, r2, #3
			pdu->len =
    293e:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
    2940:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2944:	7102      	strb	r2, [r0, #4]
			pdu->llctrl.version_ind.version_number =
    2946:	210b      	movs	r1, #11
			pdu->llctrl.version_ind.company_id = cid;
    2948:	f06f 020e 	mvn.w	r2, #14
			pdu->llctrl.opcode =
    294c:	270c      	movs	r7, #12
			pdu->llctrl.version_ind.version_number =
    294e:	7201      	strb	r1, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    2950:	7242      	strb	r2, [r0, #9]
    2952:	2105      	movs	r1, #5
			pdu->llctrl.version_ind.sub_version_number = svn;
    2954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			pdu->llctrl.opcode =
    2958:	71c7      	strb	r7, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
    295a:	7281      	strb	r1, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    295c:	72c2      	strb	r2, [r0, #11]
    295e:	7302      	strb	r2, [r0, #12]
	if (
    2960:	2b00      	cmp	r3, #0
    2962:	f000 80bd 	beq.w	2ae0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1758>
	    !conn->llcp_enc.pause_tx &&
    2966:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    296a:	0797      	lsls	r7, r2, #30
    296c:	f100 80b8 	bmi.w	2ae0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1758>
	    !conn->llcp_phy.pause_tx &&
    2970:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    2974:	07d1      	lsls	r1, r2, #31
    2976:	f100 80b3 	bmi.w	2ae0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1758>
		if (conn->tx_head == conn->tx_data) {
    297a:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    297e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2980:	bf04      	itt	eq
    2982:	681a      	ldreq	r2, [r3, #0]
    2984:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2988:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    298c:	2a00      	cmp	r2, #0
    298e:	f000 822b 	beq.w	2de8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a60>
	tx->next = conn->tx_ctrl_last->next;
    2992:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    2996:	681a      	ldr	r2, [r3, #0]
    2998:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    299a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    299c:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    29a0:	6803      	ldr	r3, [r0, #0]
    29a2:	2b00      	cmp	r3, #0
    29a4:	f47f acd3 	bne.w	234e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfc6>
		conn->tx_data_last = tx;
    29a8:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
			conn->procedure_expire = conn->procedure_reload;
    29ac:	e4cf      	b.n	234e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfc6>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    29ae:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
    29b0:	7235      	strb	r5, [r6, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    29b2:	71f3      	strb	r3, [r6, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    29b4:	2702      	movs	r7, #2
    29b6:	f7ff b978 	b.w	1caa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x922>
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    29ba:	4641      	mov	r1, r8
    29bc:	4620      	mov	r0, r4
    29be:	f012 fb69 	bl	15094 <start_enc_rsp_send>
	    conn->tx_head &&
    29c2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    29c6:	b353      	cbz	r3, 2a1e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1696>
	    !conn->llcp_enc.pause_tx &&
    29c8:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    29cc:	0795      	lsls	r5, r2, #30
    29ce:	d426      	bmi.n	2a1e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1696>
	    !conn->llcp_phy.pause_tx &&
    29d0:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    29d4:	07d0      	lsls	r0, r2, #31
    29d6:	d422      	bmi.n	2a1e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1696>
		if (conn->tx_head == conn->tx_data) {
    29d8:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    29dc:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    29de:	bf04      	itt	eq
    29e0:	681a      	ldreq	r2, [r3, #0]
    29e2:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    29e6:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    29ea:	2a00      	cmp	r2, #0
    29ec:	f000 81c9 	beq.w	2d82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19fa>
	tx->next = conn->tx_ctrl_last->next;
    29f0:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    29f4:	681a      	ldr	r2, [r3, #0]
    29f6:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    29f8:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    29fa:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
	if (!tx->next) {
    29fe:	6833      	ldr	r3, [r6, #0]
    2a00:	2b00      	cmp	r3, #0
    2a02:	f000 8080 	beq.w	2b06 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x177e>
		conn->llcp_enc.pause_rx = 0U;
    2a06:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    2a0a:	f023 0303 	bic.w	r3, r3, #3
    2a0e:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
    2a12:	f7ff b974 	b.w	1cfe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x976>
		conn->tx_data_last = tx;
    2a16:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    2a1a:	f7ff ba70 	b.w	1efe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb76>
		if (!conn->tx_ctrl) {
    2a1e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2a22:	2a00      	cmp	r2, #0
    2a24:	d1e4      	bne.n	29f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1668>
			tx->next = conn->tx_head;
    2a26:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2a28:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2a2c:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    2a30:	e7e5      	b.n	29fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1676>
				(void)ll_pdu_rx_alloc();
    2a32:	f011 f937 	bl	13ca4 <ll_pdu_rx_alloc>
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2a36:	2317      	movs	r3, #23
				rx->hdr.handle = lll->handle;
    2a38:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
				upd->status = 0U;
    2a3a:	f887 801c 	strb.w	r8, [r7, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2a3e:	713b      	strb	r3, [r7, #4]
				upd->tx = lll->phy_tx;
    2a40:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
				ll_rx_put(rx->hdr.link, rx);
    2a44:	6838      	ldr	r0, [r7, #0]
				rx->hdr.handle = lll->handle;
    2a46:	80fa      	strh	r2, [r7, #6]
				upd->tx = lll->phy_tx;
    2a48:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2a4c:	777b      	strb	r3, [r7, #29]
				upd->rx = lll->phy_rx;
    2a4e:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    2a52:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2a56:	77bb      	strb	r3, [r7, #30]
				ll_rx_put(rx->hdr.link, rx);
    2a58:	4639      	mov	r1, r7
    2a5a:	f011 f8f5 	bl	13c48 <ll_rx_put>
				ll_rx_sched();
    2a5e:	f011 f8fd 	bl	13c5c <ll_rx_sched>
    2a62:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    2a66:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    2a6a:	f3c3 0882 	ubfx	r8, r3, #2, #3
    2a6e:	095b      	lsrs	r3, r3, #5
    2a70:	f7ff b973 	b.w	1d5a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9d2>
	switch (conn->llcp_conn_param.state) {
    2a74:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    2a78:	f002 0207 	and.w	r2, r2, #7
    2a7c:	2a05      	cmp	r2, #5
    2a7e:	f200 81d6 	bhi.w	2e2e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1aa6>
    2a82:	a001      	add	r0, pc, #4	; (adr r0, 2a88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1700>)
    2a84:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    2a88:	00002089 	.word	0x00002089
    2a8c:	00002009 	.word	0x00002009
    2a90:	00001fb9 	.word	0x00001fb9
    2a94:	000011d3 	.word	0x000011d3
    2a98:	000011d3 	.word	0x000011d3
    2a9c:	000011d3 	.word	0x000011d3
		conn->tx_data_last = tx;
    2aa0:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
    2aa4:	f7fe bea0 	b.w	17e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x460>
    2aa8:	f8c4 81c0 	str.w	r8, [r4, #448]	; 0x1c0
		conn->procedure_expire = conn->procedure_reload;
    2aac:	e44f      	b.n	234e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfc6>
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2aae:	f894 019a 	ldrb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.tx_time =
    2ab2:	f8b4 71a6 	ldrh.w	r7, [r4, #422]	; 0x1a6
				conn->llcp_length.tx_octets =
    2ab6:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.cache.tx_octets = 0;
    2aba:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2abc:	f363 0002 	bfi	r0, r3, #0, #3
    2ac0:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    2ac4:	f8a4 31a4 	strh.w	r3, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    2ac8:	f8a4 71a2 	strh.w	r7, [r4, #418]	; 0x1a2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2acc:	f7ff b98a 	b.w	1de4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa5c>
			tx->next = conn->tx_head->next;
    2ad0:	681a      	ldr	r2, [r3, #0]
    2ad2:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2ad4:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    2ad6:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    2ad8:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2adc:	f7fe bf11 	b.w	1902 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x57a>
		if (!conn->tx_ctrl) {
    2ae0:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2ae4:	2a00      	cmp	r2, #0
    2ae6:	f47f af54 	bne.w	2992 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x160a>
			tx->next = conn->tx_head;
    2aea:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2aec:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2af0:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    2af4:	e754      	b.n	29a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1618>
			tx->next = conn->tx_head->next;
    2af6:	681a      	ldr	r2, [r3, #0]
    2af8:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2afa:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    2afc:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    2afe:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    2b02:	f7ff b8a0 	b.w	1c46 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8be>
		conn->tx_data_last = tx;
    2b06:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    2b0a:	e77c      	b.n	2a06 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x167e>
			tx->next = conn->tx_head->next;
    2b0c:	681a      	ldr	r2, [r3, #0]
    2b0e:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2b10:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
    2b12:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    2b14:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    2b18:	f7ff b847 	b.w	1baa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x822>
		if (!conn->tx_ctrl) {
    2b1c:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2b20:	2b00      	cmp	r3, #0
    2b22:	f47f acf2 	bne.w	250a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1182>
			tx->next = conn->tx_head;
    2b26:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl = tx;
    2b28:	e9c4 116c 	strd	r1, r1, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2b2c:	f8c4 11b8 	str.w	r1, [r4, #440]	; 0x1b8
    2b30:	e4f2      	b.n	2518 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1190>
			tx->next = conn->tx_head->next;
    2b32:	681a      	ldr	r2, [r3, #0]
    2b34:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2b36:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    2b38:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    2b3a:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    2b3e:	f7fe be50 	b.w	17e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x45a>
		LL_ASSERT(rx && rx->hdr.link);
    2b42:	4a33      	ldr	r2, [pc, #204]	; (2c10 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1888>)
    2b44:	4933      	ldr	r1, [pc, #204]	; (2c14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x188c>)
    2b46:	4834      	ldr	r0, [pc, #208]	; (2c18 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1890>)
    2b48:	f44f 6353 	mov.w	r3, #3376	; 0xd30
    2b4c:	f01c fdd3 	bl	1f6f6 <printk>
    2b50:	4040      	eors	r0, r0
    2b52:	f380 8811 	msr	BASEPRI, r0
    2b56:	f04f 0003 	mov.w	r0, #3
    2b5a:	df02      	svc	2
    2b5c:	6838      	ldr	r0, [r7, #0]
    2b5e:	e450      	b.n	2402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x107a>
			tx->next = conn->tx_head->next;
    2b60:	6813      	ldr	r3, [r2, #0]
    2b62:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    2b64:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
    2b66:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
    2b68:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2b6c:	f7ff b9c4 	b.w	1ef8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb70>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2b70:	4826      	ldr	r0, [pc, #152]	; (2c0c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1884>)
    2b72:	f00c fd07 	bl	f584 <mem_acquire>
		if (!tx) {
    2b76:	4601      	mov	r1, r0
    2b78:	2800      	cmp	r0, #0
    2b7a:	f43e af68 	beq.w	1a4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c6>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2b7e:	7903      	ldrb	r3, [r0, #4]
    2b80:	f043 0303 	orr.w	r3, r3, #3
    2b84:	710b      	strb	r3, [r1, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2b86:	2011      	movs	r0, #17
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2b88:	2203      	movs	r2, #3
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2b8a:	230f      	movs	r3, #15
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2b8c:	71c8      	strb	r0, [r1, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2b8e:	714a      	strb	r2, [r1, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2b90:	720b      	strb	r3, [r1, #8]
		rej->error_code = conn->llcp_conn_param.status;
    2b92:	f894 3173 	ldrb.w	r3, [r4, #371]	; 0x173
    2b96:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2b98:	4620      	mov	r0, r4
    2b9a:	2200      	movs	r2, #0
    2b9c:	f012 f8ac 	bl	14cf8 <ctrl_tx_pause_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2ba0:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    2ba4:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
    2ba8:	2300      	movs	r3, #0
    2baa:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    2bae:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
    2bb2:	f8c8 3000 	str.w	r3, [r8]
		return;
    2bb6:	f7fe bb07 	b.w	11c8 <ull_conn_llcp+0x18>
			if (!conn->llcp_length.cache.tx_octets) {
    2bba:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    2bbe:	2a00      	cmp	r2, #0
    2bc0:	f040 80ba 	bne.w	2d38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19b0>
				conn->llcp_length.ack = conn->llcp_length.req;
    2bc4:	f884 1199 	strb.w	r1, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    2bc8:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
    2bcc:	e410      	b.n	23f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1068>
			tx->next = conn->tx_head->next;
    2bce:	681a      	ldr	r2, [r3, #0]
    2bd0:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2bd2:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
    2bd4:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    2bd6:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    2bda:	f7ff b88d 	b.w	1cf8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x970>
			tx->next = conn->tx_head->next;
    2bde:	681a      	ldr	r2, [r3, #0]
    2be0:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2be2:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    2be4:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    2be8:	f7ff b885 	b.w	1cf6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x96e>
			tx->next = conn->tx_head->next;
    2bec:	681a      	ldr	r2, [r3, #0]
    2bee:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    2bf2:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
    2bf6:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    2bfa:	e9c4 886d 	strd	r8, r8, [r4, #436]	; 0x1b4
    2bfe:	f7ff bba3 	b.w	2348 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfc0>
		tx_time = CLAMP(conn->default_tx_time,
    2c02:	f44f 73a4 	mov.w	r3, #328	; 0x148
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M);
    2c06:	461a      	mov	r2, r3
    2c08:	e45d      	b.n	24c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x113e>
    2c0a:	bf00      	nop
    2c0c:	200021a4 	.word	0x200021a4
    2c10:	00025ee4 	.word	0x00025ee4
    2c14:	00025ff8 	.word	0x00025ff8
    2c18:	00025984 	.word	0x00025984
		if (conn->llcp_phy.tx & BIT(1)) {
    2c1c:	0711      	lsls	r1, r2, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    2c1e:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
		if (conn->llcp_phy.tx & BIT(1)) {
    2c22:	f3c2 0382 	ubfx	r3, r2, #2, #3
    2c26:	f140 80be 	bpl.w	2da6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a1e>
			conn->llcp_phy.tx = BIT(1);
    2c2a:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    2c2e:	2202      	movs	r2, #2
    2c30:	f362 0384 	bfi	r3, r2, #2, #3
    2c34:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.rx & BIT(1)) {
    2c38:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    2c3c:	0658      	lsls	r0, r3, #25
    2c3e:	ea4f 1253 	mov.w	r2, r3, lsr #5
    2c42:	f140 80a8 	bpl.w	2d96 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a0e>
			conn->llcp_phy.rx = BIT(1);
    2c46:	2202      	movs	r2, #2
    2c48:	f362 1347 	bfi	r3, r2, #5, #3
    2c4c:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    2c50:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    2c54:	f894 c064 	ldrb.w	ip, [r4, #100]	; 0x64
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2c58:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    2c5c:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2c60:	f000 0007 	and.w	r0, r0, #7
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    2c64:	f3c2 0182 	ubfx	r1, r2, #2, #3
    2c68:	f00c 0c07 	and.w	ip, ip, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    2c6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    2c70:	458c      	cmp	ip, r1
    2c72:	bf08      	it	eq
    2c74:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    2c76:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    2c78:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    2c7c:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2c80:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    2c84:	bf08      	it	eq
    2c86:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    2c88:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
		conn->llcp_ack -= 2U;
    2c8c:	1eb8      	subs	r0, r7, #2
		conn->llcp.phy_upd_ind.initiate = 1U;
    2c8e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    2c92:	2206      	movs	r2, #6
		conn->llcp_ack -= 2U;
    2c94:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
		conn->llcp.phy_upd_ind.initiate = 1U;
    2c98:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_PHY_UPD;
    2c9c:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    2ca0:	f7fe bac0 	b.w	1224 <ull_conn_llcp+0x74>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2ca4:	486d      	ldr	r0, [pc, #436]	; (2e5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ad4>)
    2ca6:	f00c fc6d 	bl	f584 <mem_acquire>
	if (!tx) {
    2caa:	4601      	mov	r1, r0
    2cac:	2800      	cmp	r0, #0
    2cae:	f43e aece 	beq.w	1a4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2cb2:	7903      	ldrb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2cb4:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2cb6:	f043 0303 	orr.w	r3, r3, #3
    2cba:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2cbc:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
    2cbe:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	rsp->interval_max =
    2cc2:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
	rsp->latency =
    2cc6:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
	rsp->interval_min =
    2cca:	810a      	strh	r2, [r1, #8]
	rsp->timeout =
    2ccc:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
	rsp->interval_max =
    2cd0:	814b      	strh	r3, [r1, #10]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    2cd2:	2310      	movs	r3, #16
	rsp->latency =
    2cd4:	8188      	strh	r0, [r1, #12]
	rsp->timeout =
    2cd6:	81ca      	strh	r2, [r1, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    2cd8:	71cb      	strb	r3, [r1, #7]
	rsp->preferred_periodicity =
    2cda:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
    2cde:	740b      	strb	r3, [r1, #16]
	rsp->reference_conn_event_count =
    2ce0:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    2ce4:	f8b4 0180 	ldrh.w	r0, [r4, #384]	; 0x180
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    2ce8:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
	rsp->reference_conn_event_count =
    2cec:	f8a1 3011 	strh.w	r3, [r1, #17]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    2cf0:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    2cf4:	f8a1 0013 	strh.w	r0, [r1, #19]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2cf8:	f8b4 0186 	ldrh.w	r0, [r4, #390]	; 0x186
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    2cfc:	f8a1 2015 	strh.w	r2, [r1, #21]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    2d00:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    2d04:	f8a1 3017 	strh.w	r3, [r1, #23]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    2d08:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
    2d0c:	f8a1 301d 	strh.w	r3, [r1, #29]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2d10:	f8a1 0019 	strh.w	r0, [r1, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    2d14:	f8a1 201b 	strh.w	r2, [r1, #27]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2d18:	4620      	mov	r0, r4
    2d1a:	463a      	mov	r2, r7
    2d1c:	f011 ffec 	bl	14cf8 <ctrl_tx_pause_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2d20:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
	conn_upd_curr = NULL;
    2d24:	f8c8 7000 	str.w	r7, [r8]
    2d28:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    2d2c:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2d30:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
}
    2d34:	f7fe ba48 	b.w	11c8 <ull_conn_llcp+0x18>
				conn->llcp_length.cache.tx_octets = 0;
    2d38:	2100      	movs	r1, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2d3a:	f361 0302 	bfi	r3, r1, #0, #3
				conn->llcp_length.tx_octets =
    2d3e:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.tx_time =
    2d42:	f8b4 21a6 	ldrh.w	r2, [r4, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2d46:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    2d4a:	f8a4 11a4 	strh.w	r1, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    2d4e:	f8a4 21a2 	strh.w	r2, [r4, #418]	; 0x1a2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2d52:	f7ff bb4d 	b.w	23f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1068>
	    (!feature_coded_phy && !feature_phy_2m)) {
    2d56:	05d2      	lsls	r2, r2, #23
		tx_time = CLAMP(conn->default_tx_time,
    2d58:	f44f 73a4 	mov.w	r3, #328	; 0x148
	    (!feature_coded_phy && !feature_phy_2m)) {
    2d5c:	d541      	bpl.n	2de2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a5a>
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_2M),
    2d5e:	22a8      	movs	r2, #168	; 0xa8
    2d60:	f7ff bbb1 	b.w	24c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x113e>
				LL_ASSERT(rx && rx->hdr.link);
    2d64:	4a3e      	ldr	r2, [pc, #248]	; (2e60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ad8>)
    2d66:	493f      	ldr	r1, [pc, #252]	; (2e64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1adc>)
    2d68:	483f      	ldr	r0, [pc, #252]	; (2e68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ae0>)
    2d6a:	f640 636e 	movw	r3, #3694	; 0xe6e
    2d6e:	f01c fcc2 	bl	1f6f6 <printk>
    2d72:	4040      	eors	r0, r0
    2d74:	f380 8811 	msr	BASEPRI, r0
    2d78:	f04f 0003 	mov.w	r0, #3
    2d7c:	df02      	svc	2
    2d7e:	6828      	ldr	r0, [r5, #0]
    2d80:	e588      	b.n	2894 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x150c>
			tx->next = conn->tx_head->next;
    2d82:	681a      	ldr	r2, [r3, #0]
    2d84:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2d86:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    2d88:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    2d8c:	e637      	b.n	29fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1676>
				conn->llcp_conn_param.interval_max;
    2d8e:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    2d92:	f7ff b95c 	b.w	204e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcc6>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    2d96:	07d1      	lsls	r1, r2, #31
    2d98:	d50f      	bpl.n	2dba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a32>
			conn->llcp_phy.rx = BIT(0);
    2d9a:	2201      	movs	r2, #1
    2d9c:	f362 1347 	bfi	r3, r2, #5, #3
    2da0:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2da4:	e754      	b.n	2c50 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18c8>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    2da6:	07da      	lsls	r2, r3, #31
    2da8:	d510      	bpl.n	2dcc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a44>
			conn->llcp_phy.tx = BIT(0);
    2daa:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    2dae:	2201      	movs	r2, #1
    2db0:	f362 0384 	bfi	r3, r2, #2, #3
    2db4:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2db8:	e73e      	b.n	2c38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18b0>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    2dba:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    2dbe:	bf18      	it	ne
    2dc0:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
    2dc2:	f362 1347 	bfi	r3, r2, #5, #3
    2dc6:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2dca:	e741      	b.n	2c50 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18c8>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    2dcc:	f013 0304 	ands.w	r3, r3, #4
    2dd0:	d010      	beq.n	2df4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a6c>
			conn->llcp_phy.tx = BIT(2);
    2dd2:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    2dd6:	2204      	movs	r2, #4
    2dd8:	f362 0384 	bfi	r3, r2, #2, #3
    2ddc:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2de0:	e72a      	b.n	2c38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18b0>
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M);
    2de2:	461a      	mov	r2, r3
    2de4:	f7ff bb6f 	b.w	24c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x113e>
			tx->next = conn->tx_head->next;
    2de8:	681a      	ldr	r2, [r3, #0]
    2dea:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2dec:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    2dee:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2df2:	e5d5      	b.n	29a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1618>
			conn->llcp_phy.tx = 0U;
    2df4:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    2df8:	f363 0284 	bfi	r2, r3, #2, #3
    2dfc:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
    2e00:	e71a      	b.n	2c38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18b0>
			tx->next = conn->tx_head->next;
    2e02:	6803      	ldr	r3, [r0, #0]
    2e04:	600b      	str	r3, [r1, #0]
			conn->tx_head->next = tx;
    2e06:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
    2e08:	e9c4 116d 	strd	r1, r1, [r4, #436]	; 0x1b4
    2e0c:	f7ff bb84 	b.w	2518 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1190>
		LL_ASSERT(0);
    2e10:	4a13      	ldr	r2, [pc, #76]	; (2e60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ad8>)
    2e12:	4916      	ldr	r1, [pc, #88]	; (2e6c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ae4>)
    2e14:	4814      	ldr	r0, [pc, #80]	; (2e68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ae0>)
    2e16:	f640 5358 	movw	r3, #3416	; 0xd58
    2e1a:	f01c fc6c 	bl	1f6f6 <printk>
    2e1e:	4040      	eors	r0, r0
    2e20:	f380 8811 	msr	BASEPRI, r0
    2e24:	f04f 0003 	mov.w	r0, #3
    2e28:	df02      	svc	2
		break;
    2e2a:	f7fe b9fb 	b.w	1224 <ull_conn_llcp+0x74>
		LL_ASSERT(0);
    2e2e:	4a0c      	ldr	r2, [pc, #48]	; (2e60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ad8>)
    2e30:	490e      	ldr	r1, [pc, #56]	; (2e6c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ae4>)
    2e32:	480d      	ldr	r0, [pc, #52]	; (2e68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ae0>)
    2e34:	f640 435c 	movw	r3, #3164	; 0xc5c
    2e38:	f01c fc5d 	bl	1f6f6 <printk>
    2e3c:	4040      	eors	r0, r0
    2e3e:	f380 8811 	msr	BASEPRI, r0
    2e42:	f04f 0003 	mov.w	r0, #3
    2e46:	df02      	svc	2
		break;
    2e48:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    2e4c:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
    2e50:	f7fe b9ba 	b.w	11c8 <ull_conn_llcp+0x18>
		LL_ASSERT(0);
    2e54:	f640 5358 	movw	r3, #3416	; 0xd58
    2e58:	e548      	b.n	28ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1564>
    2e5a:	bf00      	nop
    2e5c:	200021a4 	.word	0x200021a4
    2e60:	00025ee4 	.word	0x00025ee4
    2e64:	00025ff8 	.word	0x00025ff8
    2e68:	00025984 	.word	0x00025984
    2e6c:	000259f4 	.word	0x000259f4

00002e70 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    2e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t timeout;
	uint16_t interval;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
	conn = lll->hdr.parent;
    2e74:	469c      	mov	ip, r3
{
    2e76:	b095      	sub	sp, #84	; 0x54
	conn = lll->hdr.parent;
    2e78:	f85c 6b0c 	ldr.w	r6, [ip], #12
{
    2e7c:	461d      	mov	r5, r3
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2e7e:	6813      	ldr	r3, [r2, #0]
{
    2e80:	4686      	mov	lr, r0
    2e82:	460c      	mov	r4, r1

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2e84:	4660      	mov	r0, ip
    2e86:	312e      	adds	r1, #46	; 0x2e
{
    2e88:	4617      	mov	r7, r2
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    2e8a:	f105 0a08 	add.w	sl, r5, #8
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2e8e:	2203      	movs	r2, #3
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2e90:	f8d3 9000 	ldr.w	r9, [r3]
{
    2e94:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2e98:	f105 081c 	add.w	r8, r5, #28
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2e9c:	f01e fca3 	bl	217e6 <memcpy>
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    2ea0:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    2ea4:	2204      	movs	r2, #4
    2ea6:	4650      	mov	r0, sl
    2ea8:	f01e fc9d 	bl	217e6 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2eac:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    2eb0:	2205      	movs	r2, #5
    2eb2:	4640      	mov	r0, r8
    2eb4:	f01e fc97 	bl	217e6 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2eb8:	4640      	mov	r0, r8
    2eba:	2105      	movs	r1, #5
    2ebc:	f00c fd30 	bl	f920 <util_ones_count_get>
    2ec0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    2ec4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    2ec8:	f360 0305 	bfi	r3, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    2ecc:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2ece:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    2ed2:	d90a      	bls.n	2eea <ull_slave_setup+0x7a>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2ed4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    2ed8:	f003 021f 	and.w	r2, r3, #31
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2edc:	3a05      	subs	r2, #5
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2ede:	f3c3 0104 	ubfx	r1, r3, #0, #5
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2ee2:	2a0b      	cmp	r2, #11
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2ee4:	f885 1022 	strb.w	r1, [r5, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2ee8:	d902      	bls.n	2ef0 <ull_slave_setup+0x80>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    2eea:	b015      	add	sp, #84	; 0x54
    2eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    2ef0:	683a      	ldr	r2, [r7, #0]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2ef2:	f896 10dc 	ldrb.w	r1, [r6, #220]	; 0xdc
	((struct lll_adv *)ftr->param)->conn = NULL;
    2ef6:	2000      	movs	r0, #0
    2ef8:	6090      	str	r0, [r2, #8]
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    2efa:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
	lll->interval = interval;
    2efe:	f8a5 8012 	strh.w	r8, [r5, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2f02:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    2f06:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2f0a:	095b      	lsrs	r3, r3, #5
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2f0c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2f10:	f363 0184 	bfi	r1, r3, #2, #3
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2f14:	82aa      	strh	r2, [r5, #20]
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    2f16:	8e63      	ldrh	r3, [r4, #50]	; 0x32
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2f18:	f886 10dc 	strb.w	r1, [r6, #220]	; 0xdc
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    2f1c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		(((lll_clock_ppm_local_get() +
    2f20:	f017 f9c2 	bl	1a2a8 <lll_clock_ppm_local_get>
    2f24:	4603      	mov	r3, r0
		   lll_clock_ppm_get(conn->slave.sca)) *
    2f26:	f896 00dc 	ldrb.w	r0, [r6, #220]	; 0xdc
		(((lll_clock_ppm_local_get() +
    2f2a:	930b      	str	r3, [sp, #44]	; 0x2c
		   lll_clock_ppm_get(conn->slave.sca)) *
    2f2c:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2f30:	f017 f9bc 	bl	1a2ac <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    2f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2f36:	f8df c328 	ldr.w	ip, [pc, #808]	; 3260 <ull_slave_setup+0x3f0>
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    2f3a:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2f3e:	8aaa      	ldrh	r2, [r5, #20]
	conn_interval_us = interval * 1250U;
    2f40:	f240 4be2 	movw	fp, #1250	; 0x4e2
    2f44:	fb0b f808 	mul.w	r8, fp, r8
		(((lll_clock_ppm_local_get() +
    2f48:	4418      	add	r0, r3
		   lll_clock_ppm_get(conn->slave.sca)) *
    2f4a:	fb08 f000 	mul.w	r0, r8, r0
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2f4e:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    2f52:	f200 203f 	addw	r0, r0, #575	; 0x23f
    2f56:	fbac c000 	umull	ip, r0, ip, r0
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2f5a:	ea4f 0c58 	mov.w	ip, r8, lsr #1
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2f5e:	0c80      	lsrs	r0, r0, #18
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    2f60:	fb0b f101 	mul.w	r1, fp, r1
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2f64:	f1ac 0c96 	sub.w	ip, ip, #150	; 0x96
	lll->slave.window_widening_periodic_us =
    2f68:	62a8      	str	r0, [r5, #40]	; 0x28
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2f6a:	f8c5 c02c 	str.w	ip, [r5, #44]	; 0x2c
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    2f6e:	63e9      	str	r1, [r5, #60]	; 0x3c
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2f70:	8f21      	ldrh	r1, [r4, #56]	; 0x38
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2f72:	4bb1      	ldr	r3, [pc, #708]	; (3238 <ull_slave_setup+0x3c8>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2f74:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2f78:	f242 7c10 	movw	ip, #10000	; 0x2710
    2f7c:	fb0c 8101 	mla	r1, ip, r1, r8
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2f80:	48ae      	ldr	r0, [pc, #696]	; (323c <ull_slave_setup+0x3cc>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2f82:	4443      	add	r3, r8
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2f84:	f102 0c06 	add.w	ip, r2, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2f88:	3901      	subs	r1, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2f8a:	fbb3 f3f8 	udiv	r3, r3, r8
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2f8e:	fbb1 f1f8 	udiv	r1, r1, r8
    2f92:	f8a6 10c6 	strh.w	r1, [r6, #198]	; 0xc6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2f96:	b299      	uxth	r1, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2f98:	4561      	cmp	r1, ip
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2f9a:	4440      	add	r0, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2f9c:	f8a6 10d2 	strh.w	r1, [r6, #210]	; 0xd2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2fa0:	fbb0 f0f8 	udiv	r0, r0, r8
    2fa4:	f8a6 00ca 	strh.w	r0, [r6, #202]	; 0xca
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2fa8:	dd02      	ble.n	2fb0 <ull_slave_setup+0x140>
			     (conn->apto_reload - (lll->latency + 6)) :
    2faa:	1a89      	subs	r1, r1, r2
    2fac:	3906      	subs	r1, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2fae:	b289      	uxth	r1, r1
    2fb0:	f8a6 10ce 	strh.w	r1, [r6, #206]	; 0xce
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    2fb4:	2204      	movs	r2, #4
    2fb6:	4651      	mov	r1, sl
    2fb8:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
    2fbc:	f01e fc13 	bl	217e6 <memcpy>
	peer_addr_type = pdu_adv->tx_addr;
    2fc0:	7f23      	ldrb	r3, [r4, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2fc2:	f104 0a1e 	add.w	sl, r4, #30
    2fc6:	4651      	mov	r1, sl
	peer_addr_type = pdu_adv->tx_addr;
    2fc8:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2fcc:	2206      	movs	r2, #6
    2fce:	a812      	add	r0, sp, #72	; 0x48
	peer_addr_type = pdu_adv->tx_addr;
    2fd0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2fd4:	f01e fc07 	bl	217e6 <memcpy>
	chan_sel = pdu_adv->chan_sel;
    2fd8:	7f23      	ldrb	r3, [r4, #28]
	cc->status = 0U;
    2fda:	f44f 7280 	mov.w	r2, #256	; 0x100
    2fde:	83a2      	strh	r2, [r4, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2fe0:	f899 002a 	ldrb.w	r0, [r9, #42]	; 0x2a
	uint8_t rl_idx = ftr->rl_idx;
    2fe4:	f897 b012 	ldrb.w	fp, [r7, #18]
	chan_sel = pdu_adv->chan_sel;
    2fe8:	f3c3 1240 	ubfx	r2, r3, #5, #1
    2fec:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    2ff0:	920b      	str	r2, [sp, #44]	; 0x2c
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2ff2:	f016 fb3d 	bl	19670 <ull_filter_lll_lrpa_used>
    2ff6:	4601      	mov	r1, r0
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    2ff8:	2206      	movs	r2, #6
    2ffa:	f104 002b 	add.w	r0, r4, #43	; 0x2b
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2ffe:	2900      	cmp	r1, #0
    3000:	f040 80ed 	bne.w	31de <ull_slave_setup+0x36e>
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    3004:	f01e fc1a 	bl	2183c <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    3008:	f104 0325 	add.w	r3, r4, #37	; 0x25
    300c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    3010:	930e      	str	r3, [sp, #56]	; 0x38
    3012:	f104 031f 	add.w	r3, r4, #31
    3016:	f000 80eb 	beq.w	31f0 <ull_slave_setup+0x380>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    301a:	461a      	mov	r2, r3
    301c:	4651      	mov	r1, sl
    301e:	4658      	mov	r0, fp
    3020:	f015 fdf4 	bl	18c0c <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    3024:	7fa2      	ldrb	r2, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3026:	980e      	ldr	r0, [sp, #56]	; 0x38
		cc->peer_addr_type += 2;
    3028:	3202      	adds	r2, #2
    302a:	77a2      	strb	r2, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    302c:	a912      	add	r1, sp, #72	; 0x48
    302e:	2206      	movs	r2, #6
    3030:	f01e fbd9 	bl	217e6 <memcpy>
	cc->sca = conn->slave.sca;
    3034:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
	cc->interval = lll->interval;
    3038:	8a69      	ldrh	r1, [r5, #18]
	cc->latency = lll->latency;
    303a:	8aaa      	ldrh	r2, [r5, #20]
    303c:	86a2      	strh	r2, [r4, #52]	; 0x34
	cc->sca = conn->slave.sca;
    303e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    3042:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	cc->timeout = timeout;
    3046:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    304a:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->interval = lll->interval;
    304c:	8661      	strh	r1, [r4, #50]	; 0x32
	lll->handle = ll_conn_handle_get(conn);
    304e:	4630      	mov	r0, r6
    3050:	f012 f970 	bl	15334 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    3054:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    3056:	8228      	strh	r0, [r5, #16]
	rx->handle = lll->handle;
    3058:	80e0      	strh	r0, [r4, #6]
		rx_csa = (void *)ftr->extra;
    305a:	687c      	ldr	r4, [r7, #4]
		ll_rx_put(link, rx);
    305c:	980a      	ldr	r0, [sp, #40]	; 0x28
    305e:	f010 fdf3 	bl	13c48 <ll_rx_put>
		rx->handle = lll->handle;
    3062:	8a2b      	ldrh	r3, [r5, #16]
    3064:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    3066:	2316      	movs	r3, #22
    3068:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
    306a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		link = rx->link;
    306c:	6820      	ldr	r0, [r4, #0]
		if (chan_sel) {
    306e:	2b00      	cmp	r3, #0
    3070:	f000 80ba 	beq.w	31e8 <ull_slave_setup+0x378>
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    3074:	f895 e009 	ldrb.w	lr, [r5, #9]
				      lll->access_addr[0];
    3078:	7a2b      	ldrb	r3, [r5, #8]
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    307a:	f895 c00b 	ldrb.w	ip, [r5, #11]
				      lll->access_addr[2];
    307e:	7aa9      	ldrb	r1, [r5, #10]
			lll->data_chan_sel = 1;
    3080:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    3084:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    3088:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
			lll->data_chan_id = aa_ms ^ aa_ls;
    308c:	404b      	eors	r3, r1
			lll->data_chan_sel = 1;
    308e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
			cs->csa = 0x01;
    3092:	2101      	movs	r1, #1
			lll->data_chan_id = aa_ms ^ aa_ls;
    3094:	846b      	strh	r3, [r5, #34]	; 0x22
			lll->data_chan_sel = 1;
    3096:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
			cs->csa = 0x01;
    309a:	7721      	strb	r1, [r4, #28]
	ll_rx_put(link, rx);
    309c:	4621      	mov	r1, r4
    309e:	f010 fdd3 	bl	13c48 <ll_rx_put>
	ll_rx_sched();
    30a2:	f010 fddb 	bl	13c5c <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    30a6:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
    30aa:	2101      	movs	r1, #1
    30ac:	f000 0007 	and.w	r0, r0, #7
    30b0:	f017 f824 	bl	1a0fc <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    30b4:	4a62      	ldr	r2, [pc, #392]	; (3240 <ull_slave_setup+0x3d0>)
	conn->evt.ticks_active_to_start = 0U;
    30b6:	f04f 0a00 	mov.w	sl, #0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    30ba:	4683      	mov	fp, r0
	conn->evt.ticks_xtal_to_start =
    30bc:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    30be:	f200 4052 	addw	r0, r0, #1106	; 0x452
    30c2:	fba0 0102 	umull	r0, r1, r0, r2
	conn->evt.ticks_xtal_to_start =
    30c6:	6033      	str	r3, [r6, #0]
	conn->evt.ticks_preempt_to_start =
    30c8:	e9c6 aa01 	strd	sl, sl, [r6, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    30cc:	a358      	add	r3, pc, #352	; (adr r3, 3230 <ull_slave_setup+0x3c0>)
    30ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    30d2:	f7fd f815 	bl	100 <__aeabi_uldivmod>
    30d6:	68fc      	ldr	r4, [r7, #12]
	conn_offset_us += ((uint64_t)win_offset + 1) * 1250U;
    30d8:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    30dc:	6aad      	ldr	r5, [r5, #40]	; 0x28
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    30de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += ((uint64_t)win_offset + 1) * 1250U;
    30e2:	f240 43e2 	movw	r3, #1250	; 0x4e2
    30e6:	fb03 3302 	mla	r3, r3, r2, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    30ea:	2102      	movs	r1, #2
    30ec:	4652      	mov	r2, sl
	conn->evt.ticks_slot =
    30ee:	60f0      	str	r0, [r6, #12]
    30f0:	f5a4 74ae 	sub.w	r4, r4, #348	; 0x15c
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    30f4:	2001      	movs	r0, #1
	conn_offset_us -= EVENT_JITTER_US;
    30f6:	441c      	add	r4, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    30f8:	f00c fae8 	bl	f6cc <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    30fc:	4648      	mov	r0, r9
    30fe:	f011 fb2d 	bl	1475c <ull_adv_handle_get>
    3102:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    3104:	4b4f      	ldr	r3, [pc, #316]	; (3244 <ull_slave_setup+0x3d4>)
    3106:	f8cd 9000 	str.w	r9, [sp]
    310a:	b2d2      	uxtb	r2, r2
    310c:	4650      	mov	r0, sl
    310e:	2101      	movs	r1, #1
    3110:	f00d ff1c 	bl	10f4c <ticker_stop>
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    3114:	2801      	cmp	r0, #1
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    3116:	eba8 0805 	sub.w	r8, r8, r5
	conn_offset_us -= ready_delay_us;
    311a:	eba4 040b 	sub.w	r4, r4, fp
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    311e:	d07f      	beq.n	3220 <ull_slave_setup+0x3b0>
	if (adv->lll.is_hdcd) {
    3120:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
    3124:	07db      	lsls	r3, r3, #31
    3126:	d473      	bmi.n	3210 <ull_slave_setup+0x3a0>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    3128:	4630      	mov	r0, r6
    312a:	f012 f903 	bl	15334 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    312e:	f8df b110 	ldr.w	fp, [pc, #272]	; 3240 <ull_slave_setup+0x3d0>
    3132:	fba8 890b 	umull	r8, r9, r8, fp
    3136:	a33e      	add	r3, pc, #248	; (adr r3, 3230 <ull_slave_setup+0x3c0>)
    3138:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    313c:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    313e:	4649      	mov	r1, r9
    3140:	4640      	mov	r0, r8
    3142:	f7fc ffdd 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
    3146:	4a40      	ldr	r2, [pc, #256]	; (3248 <ull_slave_setup+0x3d8>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3148:	9606      	str	r6, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    314a:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
    314e:	fbaa 2302 	umull	r2, r3, sl, r2
    3152:	2107      	movs	r1, #7
    3154:	fb01 330a 	mla	r3, r1, sl, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3158:	f240 1145 	movw	r1, #325	; 0x145
    315c:	68bf      	ldr	r7, [r7, #8]
    315e:	9108      	str	r1, [sp, #32]
    3160:	493a      	ldr	r1, [pc, #232]	; (324c <ull_slave_setup+0x3dc>)
    3162:	9107      	str	r1, [sp, #28]
    3164:	493a      	ldr	r1, [pc, #232]	; (3250 <ull_slave_setup+0x3e0>)
    3166:	9105      	str	r1, [sp, #20]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    3168:	ebb8 0002 	subs.w	r0, r8, r2
    316c:	eb69 0103 	sbc.w	r1, r9, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3170:	68f3      	ldr	r3, [r6, #12]
    3172:	9304      	str	r3, [sp, #16]
    3174:	2600      	movs	r6, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    3176:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    317a:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    317c:	9603      	str	r6, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    317e:	f7fc ffbf 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3182:	a32b      	add	r3, pc, #172	; (adr r3, 3230 <ull_slave_setup+0x3c0>)
    3184:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    3188:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    318a:	fba4 010b 	umull	r0, r1, r4, fp
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    318e:	e9cd ac01 	strd	sl, ip, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3192:	f7fc ffb5 	bl	100 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    3196:	3505      	adds	r5, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3198:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    319c:	b2ed      	uxtb	r5, r5
    319e:	3f31      	subs	r7, #49	; 0x31
    31a0:	463b      	mov	r3, r7
    31a2:	9000      	str	r0, [sp, #0]
    31a4:	462a      	mov	r2, r5
    31a6:	4630      	mov	r0, r6
    31a8:	2101      	movs	r1, #1
    31aa:	f00d fe63 	bl	10e74 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    31ae:	f030 0302 	bics.w	r3, r0, #2
    31b2:	d00c      	beq.n	31ce <ull_slave_setup+0x35e>
    31b4:	4a27      	ldr	r2, [pc, #156]	; (3254 <ull_slave_setup+0x3e4>)
    31b6:	4928      	ldr	r1, [pc, #160]	; (3258 <ull_slave_setup+0x3e8>)
    31b8:	4828      	ldr	r0, [pc, #160]	; (325c <ull_slave_setup+0x3ec>)
    31ba:	f44f 73a3 	mov.w	r3, #326	; 0x146
    31be:	f01c fa9a 	bl	1f6f6 <printk>
    31c2:	4040      	eors	r0, r0
    31c4:	f380 8811 	msr	BASEPRI, r0
    31c8:	f04f 0003 	mov.w	r0, #3
    31cc:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    31ce:	2201      	movs	r2, #1
    31d0:	4610      	mov	r0, r2
    31d2:	2102      	movs	r1, #2
    31d4:	f00c fa7a 	bl	f6cc <mayfly_enable>
}
    31d8:	b015      	add	sp, #84	; 0x54
    31da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    31de:	f104 0124 	add.w	r1, r4, #36	; 0x24
    31e2:	f01e fb00 	bl	217e6 <memcpy>
    31e6:	e70f      	b.n	3008 <ull_slave_setup+0x198>
			cs->csa = 0x00;
    31e8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    31ec:	7723      	strb	r3, [r4, #28]
    31ee:	e755      	b.n	309c <ull_slave_setup+0x22c>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    31f0:	980e      	ldr	r0, [sp, #56]	; 0x38
    31f2:	9311      	str	r3, [sp, #68]	; 0x44
    31f4:	2206      	movs	r2, #6
    31f6:	2100      	movs	r1, #0
    31f8:	f01e fb20 	bl	2183c <memset>
		cc->peer_addr_type = peer_addr_type;
    31fc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    3200:	77a3      	strb	r3, [r4, #30]
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    3202:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3204:	a912      	add	r1, sp, #72	; 0x48
    3206:	4618      	mov	r0, r3
    3208:	2206      	movs	r2, #6
    320a:	f01e faec 	bl	217e6 <memcpy>
    320e:	e711      	b.n	3034 <ull_slave_setup+0x1c4>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    3210:	2300      	movs	r3, #0
    3212:	2201      	movs	r2, #1
    3214:	9300      	str	r3, [sp, #0]
    3216:	4618      	mov	r0, r3
    3218:	4611      	mov	r1, r2
    321a:	f00d fe97 	bl	10f4c <ticker_stop>
    321e:	e783      	b.n	3128 <ull_slave_setup+0x2b8>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    3220:	f010 fdc8 	bl	13db4 <ull_disable_mark_get>
    3224:	4581      	cmp	r9, r0
    3226:	f43f af7b 	beq.w	3120 <ull_slave_setup+0x2b0>
    322a:	f014 fe51 	bl	17ed0 <ticker_op_stop_adv_cb.part.0>
    322e:	e777      	b.n	3120 <ull_slave_setup+0x2b0>
    3230:	1afd498d 	.word	0x1afd498d
    3234:	00000007 	.word	0x00000007
    3238:	01c9c37f 	.word	0x01c9c37f
    323c:	026259ff 	.word	0x026259ff
    3240:	3b9aca00 	.word	0x3b9aca00
    3244:	00017efd 	.word	0x00017efd
    3248:	1afd498d 	.word	0x1afd498d
    324c:	00017ea1 	.word	0x00017ea1
    3250:	00017f19 	.word	0x00017f19
    3254:	000260dc 	.word	0x000260dc
    3258:	0002600c 	.word	0x0002600c
    325c:	00025984 	.word	0x00025984
    3260:	431bde83 	.word	0x431bde83
    3264:	00000000 	.word	0x00000000

00003268 <ull_master_setup>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

void ull_master_setup(memq_link_t *link, struct node_rx_hdr *rx,
		      struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    3268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	scan = ((struct lll_scan *)ftr->param)->hdr.parent;
	conn = lll->hdr.parent;

	pdu_tx = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_tx->rx_addr;
    326c:	7f0e      	ldrb	r6, [r1, #28]
{
    326e:	4617      	mov	r7, r2
	((struct lll_scan *)ftr->param)->conn = NULL;
    3270:	6812      	ldr	r2, [r2, #0]
{
    3272:	b091      	sub	sp, #68	; 0x44
    3274:	460c      	mov	r4, r1
	((struct lll_scan *)ftr->param)->conn = NULL;
    3276:	f04f 0a00 	mov.w	sl, #0
{
    327a:	461d      	mov	r5, r3
	((struct lll_scan *)ftr->param)->conn = NULL;
    327c:	f8c2 a008 	str.w	sl, [r2, #8]
	peer_addr_type = pdu_tx->rx_addr;
    3280:	f3c6 13c0 	ubfx	r3, r6, #7, #1
	scan = ((struct lll_scan *)ftr->param)->hdr.parent;
    3284:	f8d2 9000 	ldr.w	r9, [r2]
	peer_addr_type = pdu_tx->rx_addr;
    3288:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    328c:	3124      	adds	r1, #36	; 0x24
    328e:	2206      	movs	r2, #6
{
    3290:	4680      	mov	r8, r0
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    3292:	a80e      	add	r0, sp, #56	; 0x38
	conn = lll->hdr.parent;
    3294:	682e      	ldr	r6, [r5, #0]
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    3296:	f01e faa6 	bl	217e6 <memcpy>

	/* This is the chan sel bit from the received adv pdu */
	chan_sel = pdu_tx->chan_sel;
    329a:	7f23      	ldrb	r3, [r4, #28]

	cc = (void *)pdu_tx;
	cc->status = 0U;
    329c:	f8a4 a01c 	strh.w	sl, [r4, #28]
	cc->role = 0U;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;

	if (ftr->lrpa_used) {
    32a0:	7c79      	ldrb	r1, [r7, #17]
	uint8_t rl_idx = ftr->rl_idx;
    32a2:	f897 a012 	ldrb.w	sl, [r7, #18]
	chan_sel = pdu_tx->chan_sel;
    32a6:	f3c3 1240 	ubfx	r2, r3, #5, #1
	if (ftr->lrpa_used) {
    32aa:	f011 0101 	ands.w	r1, r1, #1
	chan_sel = pdu_tx->chan_sel;
    32ae:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    32b2:	920b      	str	r2, [sp, #44]	; 0x2c
	if (ftr->lrpa_used) {
    32b4:	f104 002b 	add.w	r0, r4, #43	; 0x2b
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    32b8:	f04f 0206 	mov.w	r2, #6
	if (ftr->lrpa_used) {
    32bc:	f000 80ef 	beq.w	349e <ull_master_setup+0x236>
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    32c0:	f104 011e 	add.w	r1, r4, #30
    32c4:	f01e fa8f 	bl	217e6 <memcpy>
		       BDADDR_SIZE);
	} else {
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
	}

	if (rl_idx != FILTER_IDX_NONE) {
    32c8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    32cc:	f104 0325 	add.w	r3, r4, #37	; 0x25
    32d0:	f104 0b1f 	add.w	fp, r4, #31
    32d4:	f000 80ed 	beq.w	34b2 <ull_master_setup+0x24a>
		/* Store identity address */
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    32d8:	465a      	mov	r2, fp
    32da:	4650      	mov	r0, sl
    32dc:	f104 011e 	add.w	r1, r4, #30
    32e0:	930d      	str	r3, [sp, #52]	; 0x34
    32e2:	f015 fc93 	bl	18c0c <ll_rl_id_addr_get>
				  &cc->peer_addr[0]);
		/* Mark it as identity address from RPA (0x02, 0x03) */
		cc->peer_addr_type += 2;
    32e6:	7fa2      	ldrb	r2, [r4, #30]

		/* Store peer RPA */
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    32e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		cc->peer_addr_type += 2;
    32ea:	3202      	adds	r2, #2
    32ec:	77a2      	strb	r2, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    32ee:	a90e      	add	r1, sp, #56	; 0x38
    32f0:	4618      	mov	r0, r3
    32f2:	2206      	movs	r2, #6
    32f4:	f01e fa77 	bl	217e6 <memcpy>
#endif /* CONFIG_BT_CTLR_PRIVACY */
		cc->peer_addr_type = peer_addr_type;
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
	}

	cc->interval = lll->interval;
    32f8:	8a6b      	ldrh	r3, [r5, #18]
	cc->latency = lll->latency;
    32fa:	8aaa      	ldrh	r2, [r5, #20]
	cc->interval = lll->interval;
    32fc:	8663      	strh	r3, [r4, #50]	; 0x32
	cc->timeout = scan->lll.conn_timeout;
    32fe:	f8b9 3030 	ldrh.w	r3, [r9, #48]	; 0x30
    3302:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->latency = lll->latency;
    3304:	86a2      	strh	r2, [r4, #52]	; 0x34
	cc->sca = lll_clock_sca_local_get();
    3306:	f016 ffcd 	bl	1a2a4 <lll_clock_sca_local_get>
    330a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

	lll->handle = ll_conn_handle_get(conn);
    330e:	4630      	mov	r0, r6
    3310:	f012 f810 	bl	15334 <ll_conn_handle_get>
    3314:	4603      	mov	r3, r0
    3316:	8228      	strh	r0, [r5, #16]
		 * rx node.
		 */
		rx_csa = (void *)ftr->extra;

		/* Enqueue the connection event */
		ll_rx_put(link, rx);
    3318:	4621      	mov	r1, r4
	rx->handle = lll->handle;
    331a:	80e3      	strh	r3, [r4, #6]
		ll_rx_put(link, rx);
    331c:	4640      	mov	r0, r8
		rx_csa = (void *)ftr->extra;
    331e:	687c      	ldr	r4, [r7, #4]
		ll_rx_put(link, rx);
    3320:	f010 fc92 	bl	13c48 <ll_rx_put>

		/* use the rx node for CSA event */
		rx = (void *)rx_csa;
		link = rx->link;

		rx->handle = lll->handle;
    3324:	8a2b      	ldrh	r3, [r5, #16]
    3326:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    3328:	2316      	movs	r3, #22
    332a:	7123      	strb	r3, [r4, #4]

		cs = (void *)rx_csa->pdu;

		if (chan_sel) {
    332c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		link = rx->link;
    332e:	6820      	ldr	r0, [r4, #0]
		if (chan_sel) {
    3330:	2b00      	cmp	r3, #0
    3332:	f000 80b0 	beq.w	3496 <ull_master_setup+0x22e>
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    3336:	f895 e009 	ldrb.w	lr, [r5, #9]
				      lll->access_addr[0];
    333a:	7a2b      	ldrb	r3, [r5, #8]
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    333c:	f895 c00b 	ldrb.w	ip, [r5, #11]
				      lll->access_addr[2];
    3340:	7aa9      	ldrb	r1, [r5, #10]

			lll->data_chan_sel = 1;
    3342:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    3346:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    334a:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
			lll->data_chan_id = aa_ms ^ aa_ls;
    334e:	404b      	eors	r3, r1
			lll->data_chan_sel = 1;
    3350:	f042 0240 	orr.w	r2, r2, #64	; 0x40

			cs->csa = 0x01;
    3354:	2101      	movs	r1, #1
			lll->data_chan_id = aa_ms ^ aa_ls;
    3356:	846b      	strh	r3, [r5, #34]	; 0x22
			lll->data_chan_sel = 1;
    3358:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
			cs->csa = 0x01;
    335c:	7721      	strb	r1, [r4, #28]
		} else {
			cs->csa = 0x00;
		}
	}

	ll_rx_put(link, rx);
    335e:	4621      	mov	r1, r4
    3360:	f010 fc72 	bl	13c48 <ll_rx_put>
	ll_rx_sched();
    3364:	f010 fc7a 	bl	13c5c <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(lll->phy_tx,
						      lll->phy_flags);
    3368:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
	conn->evt.ticks_xtal_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	conn->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	conn->evt.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    336c:	f8df a180 	ldr.w	sl, [pc, #384]	; 34f0 <ull_master_setup+0x288>
	ready_delay_us = lll_radio_tx_ready_delay_get(lll->phy_tx,
    3370:	f3c0 01c0 	ubfx	r1, r0, #3, #1
    3374:	f000 0007 	and.w	r0, r0, #7
    3378:	f016 febe 	bl	1a0f8 <lll_radio_tx_ready_delay_get>
	conn->evt.ticks_active_to_start = 0U;
    337c:	2400      	movs	r4, #0
	ready_delay_us = lll_radio_tx_ready_delay_get(lll->phy_tx,
    337e:	4683      	mov	fp, r0
	conn->evt.ticks_xtal_to_start =
    3380:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    3382:	f200 4052 	addw	r0, r0, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    3386:	6033      	str	r3, [r6, #0]
	conn->evt.ticks_preempt_to_start =
    3388:	e9c6 4401 	strd	r4, r4, [r6, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    338c:	a350      	add	r3, pc, #320	; (adr r3, 34d0 <ull_master_setup+0x268>)
    338e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3392:	fba0 010a 	umull	r0, r1, r0, sl
    3396:	f7fc feb3 	bl	100 <__aeabi_uldivmod>
		ticks_slot_overhead = ticks_slot_offset;
	} else {
		ticks_slot_overhead = 0U;
	}

	conn_interval_us = lll->interval * 1250;
    339a:	f8b5 c012 	ldrh.w	ip, [r5, #18]
	conn_offset_us = ftr->radio_end_us;
    339e:	68fb      	ldr	r3, [r7, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    33a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->evt.ticks_slot =
    33a4:	60f0      	str	r0, [r6, #12]

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* disable ticker job, in order to chain stop and start to avoid RTC
	 * being stopped if no tickers active.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    33a6:	4622      	mov	r2, r4
    33a8:	2102      	movs	r1, #2
    33aa:	2001      	movs	r0, #1
	conn_interval_us = lll->interval * 1250;
    33ac:	f240 48e2 	movw	r8, #1250	; 0x4e2
    33b0:	fb08 f80c 	mul.w	r8, r8, ip
	conn_offset_us -= EVENT_OVERHEAD_START_US;
    33b4:	f5a3 7587 	sub.w	r5, r3, #270	; 0x10e
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    33b8:	f00c f988 	bl	f6cc <mayfly_enable>
#endif

	/* Stop Scanner */
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
    33bc:	4648      	mov	r0, r9
    33be:	f011 fb93 	bl	14ae8 <ull_scan_handle_get>
    33c2:	1d02      	adds	r2, r0, #4
    33c4:	b2d2      	uxtb	r2, r2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    33c6:	4b44      	ldr	r3, [pc, #272]	; (34d8 <ull_master_setup+0x270>)
				    TICKER_USER_ID_ULL_HIGH,
				    ticker_id_scan, ticker_op_stop_scan_cb,
				    (void *)(uint32_t)ticker_id_scan);
    33c8:	9200      	str	r2, [sp, #0]
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    33ca:	2101      	movs	r1, #1
    33cc:	4620      	mov	r0, r4
    33ce:	f00d fdbd 	bl	10f4c <ticker_stop>

	/* Scanner stop can expire while here in this ISR.
	 * Deferred attempt to stop can fail as it would have
	 * expired, hence ignore failure.
	 */
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    33d2:	4623      	mov	r3, r4
    33d4:	2203      	movs	r2, #3
    33d6:	2101      	movs	r1, #1
    33d8:	9400      	str	r4, [sp, #0]
    33da:	4620      	mov	r0, r4
    33dc:	f00d fdb6 	bl	10f4c <ticker_stop>
		    TICKER_ID_SCAN_STOP, NULL, NULL);

	/* Start master */
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    33e0:	4630      	mov	r0, r6
    33e2:	f011 ffa7 	bl	15334 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    33e6:	9606      	str	r6, [sp, #24]
    33e8:	f44f 7334 	mov.w	r3, #720	; 0x2d0
    33ec:	68bf      	ldr	r7, [r7, #8]
    33ee:	4a3b      	ldr	r2, [pc, #236]	; (34dc <ull_master_setup+0x274>)
    33f0:	9308      	str	r3, [sp, #32]
    33f2:	4b3b      	ldr	r3, [pc, #236]	; (34e0 <ull_master_setup+0x278>)
    33f4:	9207      	str	r2, [sp, #28]
    33f6:	9305      	str	r3, [sp, #20]
    33f8:	68f3      	ldr	r3, [r6, #12]
    33fa:	9304      	str	r3, [sp, #16]
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ftr->ticks_anchor - ticks_slot_offset,
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    33fc:	fb88 890a 	smull	r8, r9, r8, sl
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    3400:	f100 0c05 	add.w	ip, r0, #5
				     HAL_TICKER_REMAINDER(conn_interval_us),
    3404:	a332      	add	r3, pc, #200	; (adr r3, 34d0 <ull_master_setup+0x268>)
    3406:	e9d3 2300 	ldrd	r2, r3, [r3]
    340a:	4640      	mov	r0, r8
    340c:	4649      	mov	r1, r9
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    340e:	fa5f f68c 	uxtb.w	r6, ip
    3412:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    3414:	f7fc fe74 	bl	100 <__aeabi_uldivmod>
    3418:	4610      	mov	r0, r2
    341a:	4619      	mov	r1, r3
    341c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3420:	2300      	movs	r3, #0
    3422:	f7fc fe6d 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3426:	a32a      	add	r3, pc, #168	; (adr r3, 34d0 <ull_master_setup+0x268>)
    3428:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    342c:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    342e:	4649      	mov	r1, r9
    3430:	4640      	mov	r0, r8
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3432:	f8cd c008 	str.w	ip, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3436:	f7fc fe63 	bl	100 <__aeabi_uldivmod>
	conn_offset_us -= ready_delay_us;
    343a:	eba5 050b 	sub.w	r5, r5, fp
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    343e:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3440:	a323      	add	r3, pc, #140	; (adr r3, 34d0 <ull_master_setup+0x268>)
    3442:	e9d3 2300 	ldrd	r2, r3, [r3]
    3446:	fba5 010a 	umull	r0, r1, r5, sl
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    344a:	f8cd c004 	str.w	ip, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    344e:	f7fc fe57 	bl	100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3452:	3f31      	subs	r7, #49	; 0x31
    3454:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3458:	463b      	mov	r3, r7
    345a:	9000      	str	r0, [sp, #0]
    345c:	4632      	mov	r2, r6
    345e:	4620      	mov	r0, r4
    3460:	2101      	movs	r1, #1
    3462:	f00d fd07 	bl	10e74 <ticker_start>
				     TICKER_NULL_LAZY,
				     (conn->evt.ticks_slot +
				      ticks_slot_overhead),
				     ull_master_ticker_cb, conn, ticker_op_cb,
				     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3466:	f030 0302 	bics.w	r3, r0, #2
    346a:	d00c      	beq.n	3486 <ull_master_setup+0x21e>
    346c:	4a1d      	ldr	r2, [pc, #116]	; (34e4 <ull_master_setup+0x27c>)
    346e:	491e      	ldr	r1, [pc, #120]	; (34e8 <ull_master_setup+0x280>)
    3470:	481e      	ldr	r0, [pc, #120]	; (34ec <ull_master_setup+0x284>)
    3472:	f240 23d1 	movw	r3, #721	; 0x2d1
    3476:	f01c f93e 	bl	1f6f6 <printk>
    347a:	4040      	eors	r0, r0
    347c:	f380 8811 	msr	BASEPRI, r0
    3480:	f04f 0003 	mov.w	r0, #3
    3484:	df02      	svc	2

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    3486:	2201      	movs	r2, #1
    3488:	4610      	mov	r0, r2
    348a:	2102      	movs	r1, #2
    348c:	f00c f91e 	bl	f6cc <mayfly_enable>
#endif
}
    3490:	b011      	add	sp, #68	; 0x44
    3492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cs->csa = 0x00;
    3496:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    349a:	7723      	strb	r3, [r4, #28]
    349c:	e75f      	b.n	335e <ull_master_setup+0xf6>
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    349e:	f01e f9cd 	bl	2183c <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    34a2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    34a6:	f104 0325 	add.w	r3, r4, #37	; 0x25
    34aa:	f104 0b1f 	add.w	fp, r4, #31
    34ae:	f47f af13 	bne.w	32d8 <ull_master_setup+0x70>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    34b2:	4618      	mov	r0, r3
    34b4:	2206      	movs	r2, #6
    34b6:	2100      	movs	r1, #0
    34b8:	f01e f9c0 	bl	2183c <memset>
		cc->peer_addr_type = peer_addr_type;
    34bc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    34c0:	77a3      	strb	r3, [r4, #30]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
    34c2:	a90e      	add	r1, sp, #56	; 0x38
    34c4:	4658      	mov	r0, fp
    34c6:	2206      	movs	r2, #6
    34c8:	f01e f98d 	bl	217e6 <memcpy>
    34cc:	e714      	b.n	32f8 <ull_master_setup+0x90>
    34ce:	bf00      	nop
    34d0:	1afd498d 	.word	0x1afd498d
    34d4:	00000007 	.word	0x00000007
    34d8:	000180d5 	.word	0x000180d5
    34dc:	000180d9 	.word	0x000180d9
    34e0:	00018109 	.word	0x00018109
    34e4:	00026178 	.word	0x00026178
    34e8:	0002600c 	.word	0x0002600c
    34ec:	00025984 	.word	0x00025984
    34f0:	3b9aca00 	.word	0x3b9aca00
    34f4:	00000000 	.word	0x00000000

000034f8 <win_offset_calc>:

static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
			    uint32_t *ticks_to_offset_next,
			    uint16_t conn_interval, uint8_t *offset_max,
			    uint8_t *win_offset)
{
    34f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34fc:	b093      	sub	sp, #76	; 0x4c
    34fe:	4604      	mov	r4, r0
    3500:	9009      	str	r0, [sp, #36]	; 0x24
	}
#endif

	ticks_slot_abs += conn_curr->evt.ticks_slot;

	if (conn_curr->lll.role) {
    3502:	f990 003d 	ldrsb.w	r0, [r0, #61]	; 0x3d
	ticks_slot_abs += conn_curr->evt.ticks_slot;
    3506:	68e4      	ldr	r4, [r4, #12]
    3508:	940d      	str	r4, [sp, #52]	; 0x34
	if (conn_curr->lll.role) {
    350a:	2800      	cmp	r0, #0
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
    350c:	bfb8      	it	lt
    350e:	3414      	addlt	r4, #20
{
    3510:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
    3514:	9307      	str	r3, [sp, #28]
	}

	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
    3516:	f04f 02ff 	mov.w	r2, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    351a:	f04f 0300 	mov.w	r3, #0
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
    351e:	bfb8      	it	lt
    3520:	940d      	strlt	r4, [sp, #52]	; 0x34
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    3522:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
{
    3526:	9e1c      	ldr	r6, [sp, #112]	; 0x70
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
						 TICKER_USER_ID_ULL_LOW);
			}
		}

		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    3528:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 3810 <win_offset_calc+0x318>
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
    352c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
    3530:	4692      	mov	sl, r2
		ticks_anchor_prev = offset_index = offset = 0U;
    3532:	461f      	mov	r7, r3
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
    3534:	9206      	str	r2, [sp, #24]
		ticks_anchor_prev = offset_index = offset = 0U;
    3536:	461c      	mov	r4, r3
    3538:	469b      	mov	fp, r3
	ticks_slot_abs_prev = 0U;
    353a:	9305      	str	r3, [sp, #20]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    353c:	461d      	mov	r5, r3
    353e:	e003      	b.n	3548 <win_offset_calc+0x50>
#endif /* !CONFIG_BT_BROADCASTER */
		{
			continue;
		}

		if (ticker_id < TICKER_ID_CONN_BASE) {
    3540:	9306      	str	r3, [sp, #24]
    3542:	7833      	ldrb	r3, [r6, #0]
			ticks_anchor_prev = ticks_anchor;
			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
			ticks_slot_abs_prev = ticks_slot_abs_curr;
		}
	} while (offset_index < *offset_max);
    3544:	429c      	cmp	r4, r3
    3546:	d258      	bcs.n	35fa <win_offset_calc+0x102>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
    3548:	ab11      	add	r3, sp, #68	; 0x44
    354a:	9302      	str	r3, [sp, #8]
    354c:	4baa      	ldr	r3, [pc, #680]	; (37f8 <win_offset_calc+0x300>)
    354e:	9301      	str	r3, [sp, #4]
    3550:	ab0f      	add	r3, sp, #60	; 0x3c
		ret_cb = TICKER_STATUS_BUSY;
    3552:	2102      	movs	r1, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
    3554:	9300      	str	r3, [sp, #0]
    3556:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
    355a:	ab10      	add	r3, sp, #64	; 0x40
    355c:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
    355e:	9111      	str	r1, [sp, #68]	; 0x44
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
    3560:	f00d fd3a 	bl	10fd8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    3564:	2802      	cmp	r0, #2
    3566:	f000 80b8 	beq.w	36da <win_offset_calc+0x1e2>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    356a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    356c:	2b00      	cmp	r3, #0
    356e:	d14f      	bne.n	3610 <win_offset_calc+0x118>
		if (ticker_id == 0xff) {
    3570:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
    3574:	2bff      	cmp	r3, #255	; 0xff
    3576:	d05c      	beq.n	3632 <win_offset_calc+0x13a>
		if ((ticker_id_prev != 0xff) &&
    3578:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    357c:	d011      	beq.n	35a2 <win_offset_calc+0xaa>
    357e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3580:	455a      	cmp	r2, fp
    3582:	d00e      	beq.n	35a2 <win_offset_calc+0xaa>
			LL_ASSERT(0);
    3584:	499d      	ldr	r1, [pc, #628]	; (37fc <win_offset_calc+0x304>)
    3586:	489e      	ldr	r0, [pc, #632]	; (3800 <win_offset_calc+0x308>)
    3588:	f44f 73bc 	mov.w	r3, #376	; 0x178
    358c:	464a      	mov	r2, r9
    358e:	f01c f8b2 	bl	1f6f6 <printk>
    3592:	4040      	eors	r0, r0
    3594:	f380 8811 	msr	BASEPRI, r0
    3598:	f04f 0003 	mov.w	r0, #3
    359c:	df02      	svc	2
    359e:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
		if ((ticker_id < TICKER_ID_ADV_BASE) ||
    35a2:	1e9a      	subs	r2, r3, #2
    35a4:	2a03      	cmp	r2, #3
    35a6:	d831      	bhi.n	360c <win_offset_calc+0x114>
		if (ticker_id < TICKER_ID_CONN_BASE) {
    35a8:	2b05      	cmp	r3, #5
    35aa:	d1c9      	bne.n	3540 <win_offset_calc+0x48>
		if (ticker_id_other != 0xff) {
    35ac:	9b06      	ldr	r3, [sp, #24]
    35ae:	2bff      	cmp	r3, #255	; 0xff
    35b0:	d128      	bne.n	3604 <win_offset_calc+0x10c>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    35b2:	2000      	movs	r0, #0
    35b4:	f011 fec6 	bl	15344 <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
    35b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    35ba:	4283      	cmp	r3, r0
    35bc:	d026      	beq.n	360c <win_offset_calc+0x114>
    35be:	990b      	ldr	r1, [sp, #44]	; 0x2c
    35c0:	f990 203d 	ldrsb.w	r2, [r0, #61]	; 0x3d
    35c4:	7833      	ldrb	r3, [r6, #0]
    35c6:	2900      	cmp	r1, #0
    35c8:	f040 8093 	bne.w	36f2 <win_offset_calc+0x1fa>
    35cc:	2a00      	cmp	r2, #0
    35ce:	dbb9      	blt.n	3544 <win_offset_calc+0x4c>
			ticks_slot_abs_curr += conn->evt.ticks_slot +
    35d0:	68c2      	ldr	r2, [r0, #12]
				ticks_to_expire + ticks_prepare_reduced;
    35d2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
			uint32_t ticks_slot_margin = 0U;
    35d6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
			ticks_slot_abs_curr += conn->evt.ticks_slot +
    35da:	3228      	adds	r2, #40	; 0x28
    35dc:	920a      	str	r2, [sp, #40]	; 0x28
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    35de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    35e0:	6812      	ldr	r2, [r2, #0]
    35e2:	4542      	cmp	r2, r8
    35e4:	f0c0 8094 	bcc.w	3710 <win_offset_calc+0x218>
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    35e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			ticks_anchor_prev = ticks_anchor;
    35ea:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
			ticker_id_prev = ticker_id;
    35ee:	f89d a03b 	ldrb.w	sl, [sp, #59]	; 0x3b
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    35f2:	9205      	str	r2, [sp, #20]
	} while (offset_index < *offset_max);
    35f4:	429c      	cmp	r4, r3
			ticker_id_prev = ticker_id;
    35f6:	4645      	mov	r5, r8
	} while (offset_index < *offset_max);
    35f8:	d3a6      	bcc.n	3548 <win_offset_calc+0x50>

	if (ticker_id == 0xff) {
    35fa:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
    35fe:	2bff      	cmp	r3, #255	; 0xff
    3600:	f000 80ed 	beq.w	37de <win_offset_calc+0x2e6>
		}

		*ticks_to_offset_next = ticks_to_expire_prev;
	}

	*offset_max = offset_index;
    3604:	7034      	strb	r4, [r6, #0]
}
    3606:	b013      	add	sp, #76	; 0x4c
    3608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    360c:	7833      	ldrb	r3, [r6, #0]
    360e:	e799      	b.n	3544 <win_offset_calc+0x4c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    3610:	497c      	ldr	r1, [pc, #496]	; (3804 <win_offset_calc+0x30c>)
    3612:	487b      	ldr	r0, [pc, #492]	; (3800 <win_offset_calc+0x308>)
    3614:	f240 136f 	movw	r3, #367	; 0x16f
    3618:	464a      	mov	r2, r9
    361a:	f01c f86c 	bl	1f6f6 <printk>
    361e:	4040      	eors	r0, r0
    3620:	f380 8811 	msr	BASEPRI, r0
    3624:	f04f 0003 	mov.w	r0, #3
    3628:	df02      	svc	2
		if (ticker_id == 0xff) {
    362a:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
    362e:	2bff      	cmp	r3, #255	; 0xff
    3630:	d1a2      	bne.n	3578 <win_offset_calc+0x80>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
    3632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3634:	681a      	ldr	r2, [r3, #0]
		while (offset_index < *offset_max) {
    3636:	7833      	ldrb	r3, [r6, #0]
    3638:	4295      	cmp	r5, r2
    363a:	bf38      	it	cc
    363c:	4615      	movcc	r5, r2
    363e:	42a3      	cmp	r3, r4
    3640:	d945      	bls.n	36ce <win_offset_calc+0x1d6>
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3642:	9b05      	ldr	r3, [sp, #20]
    3644:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 380c <win_offset_calc+0x314>
    3648:	18eb      	adds	r3, r5, r3
    364a:	fba3 0108 	umull	r0, r1, r3, r8
    364e:	2707      	movs	r7, #7
    3650:	fb07 1103 	mla	r1, r7, r3, r1
    3654:	a366      	add	r3, pc, #408	; (adr r3, 37f0 <win_offset_calc+0x2f8>)
    3656:	e9d3 2300 	ldrd	r2, r3, [r3]
    365a:	f7fc fd51 	bl	100 <__aeabi_uldivmod>
							ticks_slot_abs_prev) /
    365e:	4b6a      	ldr	r3, [pc, #424]	; (3808 <win_offset_calc+0x310>)
    3660:	fba3 2000 	umull	r2, r0, r3, r0
			if (offset >= conn_interval) {
    3664:	9a07      	ldr	r2, [sp, #28]
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3666:	f3c0 218f 	ubfx	r1, r0, #10, #16
			if (offset >= conn_interval) {
    366a:	428a      	cmp	r2, r1
							ticks_slot_abs_prev) /
    366c:	ea4f 2090 	mov.w	r0, r0, lsr #10
			if (offset >= conn_interval) {
    3670:	f240 80a3 	bls.w	37ba <win_offset_calc+0x2c2>
    3674:	961c      	str	r6, [sp, #112]	; 0x70
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3676:	f20f 1b78 	addw	fp, pc, #376	; 0x178
    367a:	e9db ab00 	ldrd	sl, fp, [fp]
    367e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
							ticks_slot_abs_prev) /
    3680:	4699      	mov	r9, r3
    3682:	e00b      	b.n	369c <win_offset_calc+0x1a4>
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3684:	f7fc fd3c 	bl	100 <__aeabi_uldivmod>
							ticks_slot_abs_prev) /
    3688:	fba9 3000 	umull	r3, r0, r9, r0
			if (offset >= conn_interval) {
    368c:	9b07      	ldr	r3, [sp, #28]
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    368e:	f3c0 218f 	ubfx	r1, r0, #10, #16
			if (offset >= conn_interval) {
    3692:	428b      	cmp	r3, r1
							ticks_slot_abs_prev) /
    3694:	ea4f 2090 	mov.w	r0, r0, lsr #10
			if (offset >= conn_interval) {
    3698:	f240 808e 	bls.w	37b8 <win_offset_calc+0x2c0>
			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
    369c:	eb06 0c44 	add.w	ip, r6, r4, lsl #1
	dst[1] = val >> 8;
    36a0:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
    36a2:	f806 0014 	strb.w	r0, [r6, r4, lsl #1]
	dst[1] = val >> 8;
    36a6:	f88c 1001 	strb.w	r1, [ip, #1]
		while (offset_index < *offset_max) {
    36aa:	991c      	ldr	r1, [sp, #112]	; 0x70
    36ac:	f891 c000 	ldrb.w	ip, [r1]
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    36b0:	9905      	ldr	r1, [sp, #20]
			offset_index++;
    36b2:	3401      	adds	r4, #1
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    36b4:	3528      	adds	r5, #40	; 0x28
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    36b6:	eb01 0e05 	add.w	lr, r1, r5
			offset_index++;
    36ba:	b2e4      	uxtb	r4, r4
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    36bc:	fbae 0108 	umull	r0, r1, lr, r8
		while (offset_index < *offset_max) {
    36c0:	45a4      	cmp	ip, r4
			offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    36c2:	4652      	mov	r2, sl
    36c4:	465b      	mov	r3, fp
    36c6:	fb07 110e 	mla	r1, r7, lr, r1
		while (offset_index < *offset_max) {
    36ca:	d8db      	bhi.n	3684 <win_offset_calc+0x18c>
    36cc:	9e1c      	ldr	r6, [sp, #112]	; 0x70
		*ticks_to_offset_next = ticks_to_expire_prev;
    36ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    36d0:	601d      	str	r5, [r3, #0]
	*offset_max = offset_index;
    36d2:	7034      	strb	r4, [r6, #0]
}
    36d4:	b013      	add	sp, #76	; 0x4c
    36d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (ret_cb == TICKER_STATUS_BUSY) {
    36da:	9b11      	ldr	r3, [sp, #68]	; 0x44
    36dc:	2b02      	cmp	r3, #2
    36de:	f47f af44 	bne.w	356a <win_offset_calc+0x72>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
    36e2:	2102      	movs	r1, #2
    36e4:	2000      	movs	r0, #0
    36e6:	f00d fcbd 	bl	11064 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    36ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    36ec:	2b02      	cmp	r3, #2
    36ee:	d0f8      	beq.n	36e2 <win_offset_calc+0x1ea>
    36f0:	e73b      	b.n	356a <win_offset_calc+0x72>
			if (conn->lll.role) {
    36f2:	2a00      	cmp	r2, #0
			ticks_slot_abs_curr += conn->evt.ticks_slot +
    36f4:	68c1      	ldr	r1, [r0, #12]
				ticks_to_expire + ticks_prepare_reduced;
    36f6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
			if (conn->lll.role) {
    36fa:	da52      	bge.n	37a2 <win_offset_calc+0x2aa>
				ticks_slot_abs_curr += ticks_slot_margin;
    36fc:	f101 023c 	add.w	r2, r1, #60	; 0x3c
    3700:	920a      	str	r2, [sp, #40]	; 0x28
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    3702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3704:	6812      	ldr	r2, [r2, #0]
    3706:	4542      	cmp	r2, r8
				ticks_slot_margin =
    3708:	f04f 0a14 	mov.w	sl, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    370c:	f4bf af6c 	bcs.w	35e8 <win_offset_calc+0xf0>
				if (ticks_to_expire_prev <
    3710:	4295      	cmp	r5, r2
    3712:	bf38      	it	cc
    3714:	4615      	movcc	r5, r2
				while ((offset_index < *offset_max) &&
    3716:	429c      	cmp	r4, r3
    3718:	d23c      	bcs.n	3794 <win_offset_calc+0x29c>
    371a:	9b05      	ldr	r3, [sp, #20]
    371c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    371e:	961c      	str	r6, [sp, #112]	; 0x70
    3720:	4413      	add	r3, r2
    3722:	449a      	add	sl, r3
    3724:	f8cd a020 	str.w	sl, [sp, #32]
    3728:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
    372c:	e01b      	b.n	3766 <win_offset_calc+0x26e>
					offset = HAL_TICKER_TICKS_TO_US(
    372e:	f7fc fce7 	bl	100 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    3732:	4b35      	ldr	r3, [pc, #212]	; (3808 <win_offset_calc+0x310>)
					if (offset >= conn_interval) {
    3734:	9e07      	ldr	r6, [sp, #28]
						ticks_slot_abs_prev) / 1250;
    3736:	fba3 3000 	umull	r3, r0, r3, r0
					offset = HAL_TICKER_TICKS_TO_US(
    373a:	f3c0 278f 	ubfx	r7, r0, #10, #16
					if (offset >= conn_interval) {
    373e:	42b7      	cmp	r7, r6
					sys_put_le16(offset,
    3740:	eb0a 0244 	add.w	r2, sl, r4, lsl #1
					offset_index++;
    3744:	f104 0301 	add.w	r3, r4, #1
    3748:	ea4f 2117 	mov.w	r1, r7, lsr #8
						ticks_slot_abs_prev) / 1250;
    374c:	ea4f 2090 	mov.w	r0, r0, lsr #10
					ticks_to_expire_prev +=
    3750:	f105 0528 	add.w	r5, r5, #40	; 0x28
					if (offset >= conn_interval) {
    3754:	d235      	bcs.n	37c2 <win_offset_calc+0x2ca>
	dst[0] = val;
    3756:	f80a 0014 	strb.w	r0, [sl, r4, lsl #1]
	dst[1] = val >> 8;
    375a:	7051      	strb	r1, [r2, #1]
				while ((offset_index < *offset_max) &&
    375c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    375e:	7812      	ldrb	r2, [r2, #0]
					offset_index++;
    3760:	b2dc      	uxtb	r4, r3
				while ((offset_index < *offset_max) &&
    3762:	42a2      	cmp	r2, r4
    3764:	d923      	bls.n	37ae <win_offset_calc+0x2b6>
				       (ticker_ticks_diff_get(
    3766:	4629      	mov	r1, r5
    3768:	4640      	mov	r0, r8
    376a:	f00d fc95 	bl	11098 <ticker_ticks_diff_get>
					offset = HAL_TICKER_TICKS_TO_US(
    376e:	9b05      	ldr	r3, [sp, #20]
    3770:	4a26      	ldr	r2, [pc, #152]	; (380c <win_offset_calc+0x314>)
				while ((offset_index < *offset_max) &&
    3772:	9e08      	ldr	r6, [sp, #32]
					offset = HAL_TICKER_TICKS_TO_US(
    3774:	442b      	add	r3, r5
				       (ticker_ticks_diff_get(
    3776:	4684      	mov	ip, r0
				while ((offset_index < *offset_max) &&
    3778:	45b4      	cmp	ip, r6
					offset = HAL_TICKER_TICKS_TO_US(
    377a:	fba3 0102 	umull	r0, r1, r3, r2
    377e:	f04f 0207 	mov.w	r2, #7
    3782:	fb02 1103 	mla	r1, r2, r3, r1
    3786:	f04f 0b00 	mov.w	fp, #0
    378a:	a319      	add	r3, pc, #100	; (adr r3, 37f0 <win_offset_calc+0x2f8>)
    378c:	e9d3 2300 	ldrd	r2, r3, [r3]
				while ((offset_index < *offset_max) &&
    3790:	d2cd      	bcs.n	372e <win_offset_calc+0x236>
    3792:	9e1c      	ldr	r6, [sp, #112]	; 0x70
				*ticks_to_offset_next = ticks_to_expire_prev;
    3794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3796:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
    3798:	9b07      	ldr	r3, [sp, #28]
    379a:	42bb      	cmp	r3, r7
    379c:	d916      	bls.n	37cc <win_offset_calc+0x2d4>
    379e:	7833      	ldrb	r3, [r6, #0]
    37a0:	e722      	b.n	35e8 <win_offset_calc+0xf0>
			ticks_slot_abs_curr += conn->evt.ticks_slot +
    37a2:	f101 0228 	add.w	r2, r1, #40	; 0x28
    37a6:	920a      	str	r2, [sp, #40]	; 0x28
			uint32_t ticks_slot_margin = 0U;
    37a8:	f04f 0a00 	mov.w	sl, #0
    37ac:	e717      	b.n	35de <win_offset_calc+0xe6>
				*ticks_to_offset_next = ticks_to_expire_prev;
    37ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    37b0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    37b2:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
    37b4:	7833      	ldrb	r3, [r6, #0]
    37b6:	e717      	b.n	35e8 <win_offset_calc+0xf0>
    37b8:	9e1c      	ldr	r6, [sp, #112]	; 0x70
		*ticks_to_offset_next = ticks_to_expire_prev;
    37ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				ticks_to_expire_prev = 0U;
    37bc:	2500      	movs	r5, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
    37be:	601d      	str	r5, [r3, #0]
    37c0:	e787      	b.n	36d2 <win_offset_calc+0x1da>
				*ticks_to_offset_next = ticks_to_expire_prev;
    37c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    37c4:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    37c6:	f8c3 b000 	str.w	fp, [r3]
						ticks_to_expire_prev = 0U;
    37ca:	465d      	mov	r5, fp
	if (ticker_id == 0xff) {
    37cc:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
    37d0:	2bff      	cmp	r3, #255	; 0xff
    37d2:	f43f af2e 	beq.w	3632 <win_offset_calc+0x13a>
	*offset_max = offset_index;
    37d6:	7034      	strb	r4, [r6, #0]
}
    37d8:	b013      	add	sp, #76	; 0x4c
    37da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
    37de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    37e0:	681b      	ldr	r3, [r3, #0]
    37e2:	429d      	cmp	r5, r3
    37e4:	bf38      	it	cc
    37e6:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
    37e8:	e771      	b.n	36ce <win_offset_calc+0x1d6>
    37ea:	bf00      	nop
    37ec:	f3af 8000 	nop.w
    37f0:	3b9aca00 	.word	0x3b9aca00
    37f4:	00000000 	.word	0x00000000
    37f8:	00018799 	.word	0x00018799
    37fc:	000259f4 	.word	0x000259f4
    3800:	00025984 	.word	0x00025984
    3804:	00026214 	.word	0x00026214
    3808:	d1b71759 	.word	0xd1b71759
    380c:	1afd498d 	.word	0x1afd498d
    3810:	000261d0 	.word	0x000261d0
    3814:	00000000 	.word	0x00000000

00003818 <ull_sched_after_mstr_slot_get>:
{
    3818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    381c:	b08f      	sub	sp, #60	; 0x3c
    381e:	461c      	mov	r4, r3
	ticker_id = ticker_id_prev = 0xff;
    3820:	26ff      	movs	r6, #255	; 0xff
{
    3822:	9309      	str	r3, [sp, #36]	; 0x24
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    3824:	3104      	adds	r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3826:	2300      	movs	r3, #0
    3828:	f8df 8110 	ldr.w	r8, [pc, #272]	; 393c <ull_sched_after_mstr_slot_get+0x124>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    382c:	f8df b110 	ldr.w	fp, [pc, #272]	; 3940 <ull_sched_after_mstr_slot_get+0x128>
    3830:	f8df a110 	ldr.w	sl, [pc, #272]	; 3944 <ull_sched_after_mstr_slot_get+0x12c>
    3834:	f8df 9110 	ldr.w	r9, [pc, #272]	; 3948 <ull_sched_after_mstr_slot_get+0x130>
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3838:	6023      	str	r3, [r4, #0]
	ticker_id = ticker_id_prev = 0xff;
    383a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
    383e:	9604      	str	r6, [sp, #16]
	ticks_slot_abs_prev = 0U;
    3840:	9305      	str	r3, [sp, #20]
{
    3842:	4604      	mov	r4, r0
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    3844:	9108      	str	r1, [sp, #32]
{
    3846:	4615      	mov	r5, r2
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    3848:	930c      	str	r3, [sp, #48]	; 0x30
    384a:	9306      	str	r3, [sp, #24]
    384c:	af0d      	add	r7, sp, #52	; 0x34
    384e:	ae0c      	add	r6, sp, #48	; 0x30
		ret_cb = TICKER_STATUS_BUSY;
    3850:	f04f 0c02 	mov.w	ip, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
    3854:	e9cd 8701 	strd	r8, r7, [sp, #4]
    3858:	9600      	str	r6, [sp, #0]
    385a:	462b      	mov	r3, r5
    385c:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
    3860:	4621      	mov	r1, r4
    3862:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
    3864:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
    3868:	f00d fbb6 	bl	10fd8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    386c:	2802      	cmp	r0, #2
    386e:	d02f      	beq.n	38d0 <ull_sched_after_mstr_slot_get+0xb8>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    3870:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3872:	2b00      	cmp	r3, #0
    3874:	d132      	bne.n	38dc <ull_sched_after_mstr_slot_get+0xc4>
		if (ticker_id == 0xff) {
    3876:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    387a:	2bff      	cmp	r3, #255	; 0xff
    387c:	d03e      	beq.n	38fc <ull_sched_after_mstr_slot_get+0xe4>
		if ((ticker_id < TICKER_ID_CONN_BASE) ||
    387e:	2b05      	cmp	r3, #5
    3880:	d1e6      	bne.n	3850 <ull_sched_after_mstr_slot_get+0x38>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    3882:	2000      	movs	r0, #0
    3884:	f011 fd5e 	bl	15344 <ll_conn_get>
		if (conn && !conn->lll.role) {
    3888:	2800      	cmp	r0, #0
    388a:	d0e1      	beq.n	3850 <ull_sched_after_mstr_slot_get+0x38>
    388c:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
    3890:	2b00      	cmp	r3, #0
    3892:	dbdd      	blt.n	3850 <ull_sched_after_mstr_slot_get+0x38>
			if ((ticker_id_prev != 0xff) &&
    3894:	9904      	ldr	r1, [sp, #16]
			ticks_slot_abs_curr +=
    3896:	68c3      	ldr	r3, [r0, #12]
			uint32_t ticks_to_expire_normal = ticks_to_expire;
    3898:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if ((ticker_id_prev != 0xff) &&
    389a:	29ff      	cmp	r1, #255	; 0xff
			ticks_slot_abs_curr +=
    389c:	f103 0304 	add.w	r3, r3, #4
			if ((ticker_id_prev != 0xff) &&
    38a0:	d00c      	beq.n	38bc <ull_sched_after_mstr_slot_get+0xa4>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    38a2:	9906      	ldr	r1, [sp, #24]
    38a4:	9307      	str	r3, [sp, #28]
    38a6:	4610      	mov	r0, r2
    38a8:	9204      	str	r2, [sp, #16]
    38aa:	f00d fbf5 	bl	11098 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    38ae:	9b05      	ldr	r3, [sp, #20]
    38b0:	9a08      	ldr	r2, [sp, #32]
    38b2:	1899      	adds	r1, r3, r2
			if ((ticker_id_prev != 0xff) &&
    38b4:	4288      	cmp	r0, r1
    38b6:	9a04      	ldr	r2, [sp, #16]
    38b8:	9b07      	ldr	r3, [sp, #28]
    38ba:	d822      	bhi.n	3902 <ull_sched_after_mstr_slot_get+0xea>
			ticks_to_expire_prev = ticks_to_expire_normal;
    38bc:	e9cd 3205 	strd	r3, r2, [sp, #20]
			ticker_id_prev = ticker_id;
    38c0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    38c4:	9304      	str	r3, [sp, #16]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    38c6:	e7c3      	b.n	3850 <ull_sched_after_mstr_slot_get+0x38>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
    38c8:	4621      	mov	r1, r4
    38ca:	2000      	movs	r0, #0
    38cc:	f00d fbca 	bl	11064 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    38d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    38d2:	2b02      	cmp	r3, #2
    38d4:	d0f8      	beq.n	38c8 <ull_sched_after_mstr_slot_get+0xb0>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    38d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    38d8:	2b00      	cmp	r3, #0
    38da:	d0cc      	beq.n	3876 <ull_sched_after_mstr_slot_get+0x5e>
    38dc:	2352      	movs	r3, #82	; 0x52
    38de:	465a      	mov	r2, fp
    38e0:	4651      	mov	r1, sl
    38e2:	4648      	mov	r0, r9
    38e4:	f01b ff07 	bl	1f6f6 <printk>
    38e8:	4040      	eors	r0, r0
    38ea:	f380 8811 	msr	BASEPRI, r0
    38ee:	f04f 0003 	mov.w	r0, #3
    38f2:	df02      	svc	2
		if (ticker_id == 0xff) {
    38f4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    38f8:	2bff      	cmp	r3, #255	; 0xff
    38fa:	d1c0      	bne.n	387e <ull_sched_after_mstr_slot_get+0x66>
	if (ticker_id_prev != 0xff) {
    38fc:	9b04      	ldr	r3, [sp, #16]
    38fe:	2bff      	cmp	r3, #255	; 0xff
    3900:	d010      	beq.n	3924 <ull_sched_after_mstr_slot_get+0x10c>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3902:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    3906:	480c      	ldr	r0, [pc, #48]	; (3938 <ull_sched_after_mstr_slot_get+0x120>)
    3908:	4413      	add	r3, r2
    390a:	fba3 0100 	umull	r0, r1, r3, r0
    390e:	2207      	movs	r2, #7
    3910:	fb02 1103 	mla	r1, r2, r3, r1
    3914:	a306      	add	r3, pc, #24	; (adr r3, 3930 <ull_sched_after_mstr_slot_get+0x118>)
    3916:	e9d3 2300 	ldrd	r2, r3, [r3]
    391a:	f7fc fbf1 	bl	100 <__aeabi_uldivmod>
    391e:	9b09      	ldr	r3, [sp, #36]	; 0x24
						    ticks_slot_abs_prev) +
    3920:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    3922:	6018      	str	r0, [r3, #0]
}
    3924:	b00f      	add	sp, #60	; 0x3c
    3926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    392a:	bf00      	nop
    392c:	f3af 8000 	nop.w
    3930:	3b9aca00 	.word	0x3b9aca00
    3934:	00000000 	.word	0x00000000
    3938:	1afd498d 	.word	0x1afd498d
    393c:	00018799 	.word	0x00018799
    3940:	000261d0 	.word	0x000261d0
    3944:	00026214 	.word	0x00026214
    3948:	00025984 	.word	0x00025984
    394c:	00000000 	.word	0x00000000

00003950 <after_mstr_offset_get>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

static void after_mstr_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				  uint32_t ticks_anchor,
				  uint32_t *win_offset_us)
{
    3950:	b570      	push	{r4, r5, r6, lr}
    3952:	461c      	mov	r4, r3
    3954:	b082      	sub	sp, #8
    3956:	4615      	mov	r5, r2
    3958:	4606      	mov	r6, r0
	uint32_t ticks_anchor_offset = ticks_anchor;

	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
    395a:	aa01      	add	r2, sp, #4
    395c:	2002      	movs	r0, #2
	uint32_t ticks_anchor_offset = ticks_anchor;
    395e:	9501      	str	r5, [sp, #4]
	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
    3960:	f7ff ff5a 	bl	3818 <ull_sched_after_mstr_slot_get>
				      &ticks_anchor_offset, win_offset_us);

	if (!*win_offset_us) {
    3964:	6823      	ldr	r3, [r4, #0]
    3966:	b30b      	cbz	r3, 39ac <after_mstr_offset_get+0x5c>
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
    3968:	9801      	ldr	r0, [sp, #4]
    396a:	1b43      	subs	r3, r0, r5
    396c:	021b      	lsls	r3, r3, #8
    396e:	d41f      	bmi.n	39b0 <after_mstr_offset_get+0x60>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
    3970:	4629      	mov	r1, r5
    3972:	f00d fb91 	bl	11098 <ticker_ticks_diff_get>
    3976:	4b1a      	ldr	r3, [pc, #104]	; (39e0 <after_mstr_offset_get+0x90>)
    3978:	4602      	mov	r2, r0
    397a:	fba0 0103 	umull	r0, r1, r0, r3
    397e:	2307      	movs	r3, #7
    3980:	fb03 1102 	mla	r1, r3, r2, r1
    3984:	a314      	add	r3, pc, #80	; (adr r3, 39d8 <after_mstr_offset_get+0x88>)
    3986:	e9d3 2300 	ldrd	r2, r3, [r3]
    398a:	f7fc fbb9 	bl	100 <__aeabi_uldivmod>
    398e:	6822      	ldr	r2, [r4, #0]
    3990:	4402      	add	r2, r0
    3992:	6022      	str	r2, [r4, #0]
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
    3994:	2a00      	cmp	r2, #0
    3996:	db09      	blt.n	39ac <after_mstr_offset_get+0x5c>
		uint32_t conn_interval_us = conn_interval * 1250;
    3998:	f240 41e2 	movw	r1, #1250	; 0x4e2
    399c:	fb01 f006 	mul.w	r0, r1, r6

		while (*win_offset_us > conn_interval_us) {
    39a0:	4290      	cmp	r0, r2
    39a2:	d203      	bcs.n	39ac <after_mstr_offset_get+0x5c>
			*win_offset_us -= conn_interval_us;
    39a4:	1a12      	subs	r2, r2, r0
		while (*win_offset_us > conn_interval_us) {
    39a6:	4290      	cmp	r0, r2
    39a8:	d3fc      	bcc.n	39a4 <after_mstr_offset_get+0x54>
    39aa:	6022      	str	r2, [r4, #0]
		}
	}
}
    39ac:	b002      	add	sp, #8
    39ae:	bd70      	pop	{r4, r5, r6, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
    39b0:	4601      	mov	r1, r0
    39b2:	4628      	mov	r0, r5
    39b4:	f00d fb70 	bl	11098 <ticker_ticks_diff_get>
    39b8:	4b09      	ldr	r3, [pc, #36]	; (39e0 <after_mstr_offset_get+0x90>)
    39ba:	4602      	mov	r2, r0
    39bc:	fba0 0103 	umull	r0, r1, r0, r3
    39c0:	2307      	movs	r3, #7
    39c2:	fb03 1102 	mla	r1, r3, r2, r1
    39c6:	a304      	add	r3, pc, #16	; (adr r3, 39d8 <after_mstr_offset_get+0x88>)
    39c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    39cc:	f7fc fb98 	bl	100 <__aeabi_uldivmod>
    39d0:	6822      	ldr	r2, [r4, #0]
    39d2:	1a12      	subs	r2, r2, r0
    39d4:	6022      	str	r2, [r4, #0]
    39d6:	e7dd      	b.n	3994 <after_mstr_offset_get+0x44>
    39d8:	3b9aca00 	.word	0x3b9aca00
    39dc:	00000000 	.word	0x00000000
    39e0:	1afd498d 	.word	0x1afd498d
    39e4:	00000000 	.word	0x00000000

000039e8 <ull_sched_mfy_win_offset_select>:
{
    39e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    39ec:	f8b0 2180 	ldrh.w	r2, [r0, #384]	; 0x180
{
    39f0:	b088      	sub	sp, #32
    39f2:	4605      	mov	r5, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    39f4:	f240 43e2 	movw	r3, #1250	; 0x4e2
    39f8:	4845      	ldr	r0, [pc, #276]	; (3b10 <ull_sched_mfy_win_offset_select+0x128>)
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    39fa:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    39fc:	fb03 f302 	mul.w	r3, r3, r2
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    3a00:	2700      	movs	r7, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3a02:	fb83 0100 	smull	r0, r1, r3, r0
	uint8_t offset_m_max = OFFSET_M_MAX;
    3a06:	2406      	movs	r4, #6
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3a08:	a33f      	add	r3, pc, #252	; (adr r3, 3b08 <ull_sched_mfy_win_offset_select+0x120>)
    3a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    3a0e:	6077      	str	r7, [r6, #4]
    3a10:	9705      	str	r7, [sp, #20]
    3a12:	60b7      	str	r7, [r6, #8]
	uint8_t offset_m_max = OFFSET_M_MAX;
    3a14:	f88d 400f 	strb.w	r4, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3a18:	f7fc fb72 	bl	100 <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
    3a1c:	f10d 020f 	add.w	r2, sp, #15
    3a20:	9601      	str	r6, [sp, #4]
    3a22:	f8b5 3176 	ldrh.w	r3, [r5, #374]	; 0x176
    3a26:	9200      	str	r2, [sp, #0]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3a28:	4604      	mov	r4, r0
	win_offset_calc(conn, 1, &ticks_to_offset,
    3a2a:	2101      	movs	r1, #1
    3a2c:	4628      	mov	r0, r5
    3a2e:	aa04      	add	r2, sp, #16
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3a30:	9404      	str	r4, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
    3a32:	f7ff fd61 	bl	34f8 <win_offset_calc>
		while (offset_index_m < offset_m_max) {
    3a36:	f89d c00f 	ldrb.w	ip, [sp, #15]
    3a3a:	f10c 34ff 	add.w	r4, ip, #4294967295	; 0xffffffff
    3a3e:	b2e4      	uxtb	r4, r4
    3a40:	f10d 0316 	add.w	r3, sp, #22
	uint8_t has_offset_s = 0U;
    3a44:	4639      	mov	r1, r7
    3a46:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    3a4a:	462f      	mov	r7, r5
    3a4c:	f105 0e0c 	add.w	lr, r5, #12
			if (win_offset_s != 0xffff) {
    3a50:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return ((uint16_t)src[1] << 8) | src[0];
    3a54:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
    3a58:	f897 2180 	ldrb.w	r2, [r7, #384]	; 0x180
    3a5c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    3a60:	fa0f f882 	sxth.w	r8, r2
		while (offset_index_m < offset_m_max) {
    3a64:	f1bc 0f00 	cmp.w	ip, #0
    3a68:	d009      	beq.n	3a7e <ull_sched_mfy_win_offset_select+0x96>
    3a6a:	4633      	mov	r3, r6
			if (win_offset_s != 0xffff) {
    3a6c:	4282      	cmp	r2, r0
    3a6e:	d003      	beq.n	3a78 <ull_sched_mfy_win_offset_select+0x90>
				if (win_offset_s ==
    3a70:	8819      	ldrh	r1, [r3, #0]
    3a72:	4291      	cmp	r1, r2
    3a74:	d017      	beq.n	3aa6 <ull_sched_mfy_win_offset_select+0xbe>
				has_offset_s = 1U;
    3a76:	2101      	movs	r1, #1
    3a78:	3302      	adds	r3, #2
		while (offset_index_m < offset_m_max) {
    3a7a:	429c      	cmp	r4, r3
    3a7c:	d1f6      	bne.n	3a6c <ull_sched_mfy_win_offset_select+0x84>
	while (offset_index_s < OFFSET_S_MAX) {
    3a7e:	3702      	adds	r7, #2
    3a80:	45be      	cmp	lr, r7
    3a82:	d1e7      	bne.n	3a54 <ull_sched_mfy_win_offset_select+0x6c>
	} else if (!has_offset_s) {
    3a84:	b9f1      	cbnz	r1, 3ac4 <ull_sched_mfy_win_offset_select+0xdc>
		conn->llcp_cu.win_offset_us = win_offset_m[0] * 1250;
    3a86:	f8bd 3014 	ldrh.w	r3, [sp, #20]
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    3a8a:	f8d5 10f0 	ldr.w	r1, [r5, #240]	; 0xf0
		conn->llcp_cu.win_offset_us = win_offset_m[0] * 1250;
    3a8e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    3a92:	fb02 f203 	mul.w	r2, r2, r3
	dst[1] = val >> 8;
    3a96:	0a18      	lsrs	r0, r3, #8
    3a98:	f8c5 2110 	str.w	r2, [r5, #272]	; 0x110
	dst[0] = val;
    3a9c:	700b      	strb	r3, [r1, #0]
	dst[1] = val >> 8;
    3a9e:	7048      	strb	r0, [r1, #1]
}
    3aa0:	b008      	add	sp, #32
    3aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    3aa6:	f8d5 10f0 	ldr.w	r1, [r5, #240]	; 0xf0
		conn->llcp_cu.win_offset_us = win_offset_s * 1250;
    3aaa:	f240 43e2 	movw	r3, #1250	; 0x4e2
    3aae:	fb03 f302 	mul.w	r3, r3, r2
    3ab2:	0a12      	lsrs	r2, r2, #8
    3ab4:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
	dst[0] = val;
    3ab8:	f881 8000 	strb.w	r8, [r1]
	dst[1] = val >> 8;
    3abc:	704a      	strb	r2, [r1, #1]
}
    3abe:	b008      	add	sp, #32
    3ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->llcp_ack = conn->llcp_req;
    3ac4:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    3ac8:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
		conn->llcp_ack = conn->llcp_req;
    3acc:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    3ad0:	f885 3171 	strb.w	r3, [r5, #369]	; 0x171
		ull_conn_upd_curr_reset();
    3ad4:	f014 f9ba 	bl	17e4c <ull_conn_upd_curr_reset>
			((uint8_t *)conn->llcp.conn_upd.pdu_win_offset -
    3ad8:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3adc:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    3ae0:	2503      	movs	r5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3ae2:	432a      	orrs	r2, r5
		pdu_ctrl_tx->llctrl.opcode =
    3ae4:	2411      	movs	r4, #17
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    3ae6:	200f      	movs	r0, #15
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    3ae8:	2120      	movs	r1, #32
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3aea:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    3aee:	f803 5c04 	strb.w	r5, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    3af2:	f803 4c02 	strb.w	r4, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    3af6:	f803 0c01 	strb.w	r0, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    3afa:	7019      	strb	r1, [r3, #0]
}
    3afc:	b008      	add	sp, #32
    3afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b02:	bf00      	nop
    3b04:	f3af 8000 	nop.w
    3b08:	1afd498d 	.word	0x1afd498d
    3b0c:	00000007 	.word	0x00000007
    3b10:	3b9aca00 	.word	0x3b9aca00
    3b14:	00000000 	.word	0x00000000

00003b18 <isr_window>:
	 */
	radio_tmr_end_capture();
}

static void isr_window(void *param)
{
    3b18:	b538      	push	{r3, r4, r5, lr}
    3b1a:	4604      	mov	r4, r0
	uint32_t ticks_at_start;
	bool is_sched_advanced;
	uint32_t remainder_us;
	struct lll_scan *lll;

	isr_common_done(param);
    3b1c:	f017 fa2c 	bl	1af78 <isr_common_done>

	lll = param;

	/* Next radio channel to scan, round-robin 37, 38, and 39. */
	if (++lll->chan == 3U) {
    3b20:	7da2      	ldrb	r2, [r4, #22]
    3b22:	f3c2 0341 	ubfx	r3, r2, #1, #2
    3b26:	3301      	adds	r3, #1
    3b28:	f003 0303 	and.w	r3, r3, #3
    3b2c:	2b03      	cmp	r3, #3
    3b2e:	d034      	beq.n	3b9a <isr_window+0x82>
    3b30:	f363 0242 	bfi	r2, r3, #1, #2
    3b34:	75a2      	strb	r2, [r4, #22]
    3b36:	f103 0025 	add.w	r0, r3, #37	; 0x25
		lll->chan = 0U;
	}
	lll_chan_set(37 + lll->chan);
    3b3a:	f016 fa9b 	bl	1a074 <lll_chan_set>

	is_sched_advanced = IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) &&
			    lll->conn && lll->conn_win_offset_us;
    3b3e:	68a3      	ldr	r3, [r4, #8]
    3b40:	b30b      	cbz	r3, 3b86 <isr_window+0x6e>
    3b42:	6923      	ldr	r3, [r4, #16]
    3b44:	b1fb      	cbz	r3, 3b86 <isr_window+0x6e>
		 * a new central event was last calculated at the start of the
		 * initiator window. This can be either the previous full window
		 * start or remainder resume start of the continuous initiator
		 * after it was preempted.
		 */
		ticks_anchor_prev = radio_tmr_start_get();
    3b46:	f018 fec7 	bl	1c8d8 <radio_tmr_start_get>
    3b4a:	4605      	mov	r5, r0
	} else {
		ticks_anchor_prev = 0U;
	}

	ticks_at_start = ticker_ticks_now_get() +
    3b4c:	f00d faa2 	bl	11094 <ticker_ticks_now_get>
			 HAL_TICKER_CNTR_CMP_OFFSET_MIN;
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    3b50:	1cc1      	adds	r1, r0, #3
    3b52:	2000      	movs	r0, #0
    3b54:	f018 fe86 	bl	1c864 <radio_tmr_start_tick>

	/* capture end of Rx-ed PDU, for initiator to calculate first
	 * master event.
	 */
	radio_tmr_end_capture();
    3b58:	f018 ff12 	bl	1c980 <radio_tmr_end_capture>

		/* Calculation to reduce the conn_win_offset_us, as a new
		 * window is started here and the reference ticks_anchor is
		 * now at the start of this new window.
		 */
		ticks_anchor_new = radio_tmr_start_get();
    3b5c:	f018 febc 	bl	1c8d8 <radio_tmr_start_get>
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    3b60:	4629      	mov	r1, r5
    3b62:	f00d fa99 	bl	11098 <ticker_ticks_diff_get>
						    ticks_anchor_prev);
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    3b66:	4b12      	ldr	r3, [pc, #72]	; (3bb0 <isr_window+0x98>)
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    3b68:	4602      	mov	r2, r0
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    3b6a:	fba0 0103 	umull	r0, r1, r0, r3
    3b6e:	2307      	movs	r3, #7
    3b70:	fb03 1102 	mla	r1, r3, r2, r1
    3b74:	a30c      	add	r3, pc, #48	; (adr r3, 3ba8 <isr_window+0x90>)
    3b76:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b7a:	f7fc fac1 	bl	100 <__aeabi_uldivmod>

		/* Underflow is accepted, as it will be corrected at the time of
		 * connection establishment by incrementing it in connection
		 * interval units until it is in the future.
		 */
		lll->conn_win_offset_us -= ticks_delta_us;
    3b7e:	6923      	ldr	r3, [r4, #16]
    3b80:	1a1b      	subs	r3, r3, r0
    3b82:	6123      	str	r3, [r4, #16]
	}
}
    3b84:	bd38      	pop	{r3, r4, r5, pc}
	ticks_at_start = ticker_ticks_now_get() +
    3b86:	f00d fa85 	bl	11094 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    3b8a:	1cc1      	adds	r1, r0, #3
    3b8c:	2000      	movs	r0, #0
    3b8e:	f018 fe69 	bl	1c864 <radio_tmr_start_tick>
}
    3b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
    3b96:	f018 bef3 	b.w	1c980 <radio_tmr_end_capture>
		lll->chan = 0U;
    3b9a:	f36f 0242 	bfc	r2, #1, #2
    3b9e:	75a2      	strb	r2, [r4, #22]
    3ba0:	2025      	movs	r0, #37	; 0x25
    3ba2:	e7ca      	b.n	3b3a <isr_window+0x22>
    3ba4:	f3af 8000 	nop.w
    3ba8:	3b9aca00 	.word	0x3b9aca00
    3bac:	00000000 	.word	0x00000000
    3bb0:	1afd498d 	.word	0x1afd498d
    3bb4:	00000000 	.word	0x00000000

00003bb8 <isr_rx>:
{
    3bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bbc:	b083      	sub	sp, #12
    3bbe:	4604      	mov	r4, r0
	trx_done = radio_is_done();
    3bc0:	f018 fd0e 	bl	1c5e0 <radio_is_done>
	if (trx_done) {
    3bc4:	f010 0fff 	tst.w	r0, #255	; 0xff
    3bc8:	d10a      	bne.n	3be0 <isr_rx+0x28>
	lll_isr_status_reset();
    3bca:	f016 faab 	bl	1a124 <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
    3bce:	48c2      	ldr	r0, [pc, #776]	; (3ed8 <isr_rx+0x320>)
    3bd0:	4621      	mov	r1, r4
    3bd2:	f018 fbc3 	bl	1c35c <radio_isr_set>
}
    3bd6:	b003      	add	sp, #12
    3bd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
    3bdc:	f018 bcd2 	b.w	1c584 <radio_disable>
		crc_ok = radio_crc_is_valid();
    3be0:	f018 fd1e 	bl	1c620 <radio_crc_is_valid>
    3be4:	fa5f f980 	uxtb.w	r9, r0
		devmatch_ok = radio_filter_has_match();
    3be8:	f018 fda4 	bl	1c734 <radio_filter_has_match>
    3bec:	fa5f f880 	uxtb.w	r8, r0
		devmatch_id = radio_filter_match_get();
    3bf0:	f018 fdaa 	bl	1c748 <radio_filter_match_get>
    3bf4:	4607      	mov	r7, r0
		irkmatch_ok = radio_ar_has_match();
    3bf6:	f018 ffdb 	bl	1cbb0 <radio_ar_has_match>
    3bfa:	b2c6      	uxtb	r6, r0
		irkmatch_id = radio_ar_match_get();
    3bfc:	f018 ffbc 	bl	1cb78 <radio_ar_match_get>
    3c00:	4683      	mov	fp, r0
		rssi_ready = radio_rssi_is_ready();
    3c02:	f018 fd5f 	bl	1c6c4 <radio_rssi_is_ready>
    3c06:	4682      	mov	sl, r0
	lll_isr_status_reset();
    3c08:	f016 fa8c 	bl	1a124 <lll_isr_status_reset>
	node_rx = ull_pdu_rx_alloc_peek(1);
    3c0c:	2001      	movs	r0, #1
    3c0e:	f010 f973 	bl	13ef8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    3c12:	4605      	mov	r5, r0
    3c14:	2800      	cmp	r0, #0
    3c16:	f000 80a4 	beq.w	3d62 <isr_rx+0x1aa>
	rl_idx = devmatch_ok ?
    3c1a:	f1b8 0f00 	cmp.w	r8, #0
    3c1e:	f040 80b1 	bne.w	3d84 <isr_rx+0x1cc>
    3c22:	2e00      	cmp	r6, #0
    3c24:	f040 80ba 	bne.w	3d9c <isr_rx+0x1e4>
    3c28:	27ff      	movs	r7, #255	; 0xff
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
    3c2a:	f1b9 0f00 	cmp.w	r9, #0
    3c2e:	d0ce      	beq.n	3bce <isr_rx+0x16>

static inline bool isr_rx_scan_check(struct lll_scan *lll, uint8_t irkmatch_ok,
				     uint8_t devmatch_ok, uint8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return (((lll->filter_policy & 0x01) == 0) &&
    3c30:	7da3      	ldrb	r3, [r4, #22]
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
								rl_idx))) ||
    3c32:	071a      	lsls	r2, r3, #28
		rssi_ready = radio_rssi_is_ready();
    3c34:	fa5f fa8a 	uxtb.w	sl, sl
								rl_idx))) ||
    3c38:	f140 80ba 	bpl.w	3db0 <isr_rx+0x1f8>
		(((lll->filter_policy & 0x01) != 0) &&
    3c3c:	f1b8 0f00 	cmp.w	r8, #0
    3c40:	f000 81e1 	beq.w	4006 <isr_rx+0x44e>
	bool dir_report = false;

	if (0) {
#if defined(CONFIG_BT_CENTRAL)
	/* Initiator */
	} else if ((lll->conn) &&
    3c44:	68a3      	ldr	r3, [r4, #8]
    3c46:	2b00      	cmp	r3, #0
    3c48:	f000 80b8 	beq.w	3dbc <isr_rx+0x204>
static inline bool isr_scan_init_check(struct lll_scan *lll,
				       struct pdu_adv *pdu, uint8_t rl_idx)
{
	return ((((lll->filter_policy & 0x01) != 0U) ||
		 isr_scan_init_adva_check(lll, pdu, rl_idx)) &&
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    3c4c:	7f28      	ldrb	r0, [r5, #28]
		 isr_scan_init_adva_check(lll, pdu, rl_idx)) &&
    3c4e:	f010 030f 	ands.w	r3, r0, #15
    3c52:	f040 81df 	bne.w	4014 <isr_rx+0x45c>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    3c56:	7f6b      	ldrb	r3, [r5, #29]
    3c58:	2b25      	cmp	r3, #37	; 0x25
    3c5a:	f200 80fb 	bhi.w	3e54 <isr_rx+0x29c>
			rx = ull_pdu_rx_alloc_peek(4);
    3c5e:	2004      	movs	r0, #4
    3c60:	f010 f94a 	bl	13ef8 <ull_pdu_rx_alloc_peek>
		if (!rx) {
    3c64:	2800      	cmp	r0, #0
    3c66:	d0b2      	beq.n	3bce <isr_rx+0x16>
		pdu_end_us = radio_tmr_end_get();
    3c68:	f018 fe92 	bl	1c990 <radio_tmr_end_get>
		if (!lll->ticks_window) {
    3c6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		pdu_end_us = radio_tmr_end_get();
    3c6e:	4680      	mov	r8, r0
		if (!lll->ticks_window) {
    3c70:	b943      	cbnz	r3, 3c84 <isr_rx+0xcc>
			scan_interval_us = lll->interval * 625U;
    3c72:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    3c74:	f240 2371 	movw	r3, #625	; 0x271
    3c78:	fb03 f302 	mul.w	r3, r3, r2
			pdu_end_us %= scan_interval_us;
    3c7c:	fbb0 f2f3 	udiv	r2, r0, r3
    3c80:	fb03 0812 	mls	r8, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(evt->ticks_slot) -
    3c84:	6823      	ldr	r3, [r4, #0]
    3c86:	4895      	ldr	r0, [pc, #596]	; (3edc <isr_rx+0x324>)
    3c88:	68db      	ldr	r3, [r3, #12]
    3c8a:	2207      	movs	r2, #7
    3c8c:	fba3 0100 	umull	r0, r1, r3, r0
    3c90:	fb02 1103 	mla	r1, r2, r3, r1
    3c94:	a38e      	add	r3, pc, #568	; (adr r3, 3ed0 <isr_rx+0x318>)
    3c96:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c9a:	f7fc fa31 	bl	100 <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
    3c9e:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(evt->ticks_slot) -
    3ca2:	4543      	cmp	r3, r8
    3ca4:	d393      	bcc.n	3bce <isr_rx+0x16>
		radio_switch_complete_and_disable();
    3ca6:	f018 fce7 	bl	1c678 <radio_switch_complete_and_disable>
		lll_conn = lll->conn;
    3caa:	f8d4 a008 	ldr.w	sl, [r4, #8]
		pdu_tx = (void *)radio_pkt_scratch_get();
    3cae:	f018 fcc5 	bl	1c63c <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    3cb2:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    3cb4:	7802      	ldrb	r2, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    3cb6:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    3cba:	01db      	lsls	r3, r3, #7
    3cbc:	f002 0250 	and.w	r2, r2, #80	; 0x50
    3cc0:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    3cc4:	4313      	orrs	r3, r2
		pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
    3cc6:	2222      	movs	r2, #34	; 0x22
		pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    3cc8:	7003      	strb	r3, [r0, #0]
		pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
    3cca:	7042      	strb	r2, [r0, #1]
		pdu_tx = (void *)radio_pkt_scratch_get();
    3ccc:	4681      	mov	r9, r0
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    3cce:	4638      	mov	r0, r7
    3cd0:	f015 fcdc 	bl	1968c <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    3cd4:	7de3      	ldrb	r3, [r4, #23]
    3cd6:	07da      	lsls	r2, r3, #31
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    3cd8:	4683      	mov	fp, r0
		if (lll->rpa_gen && lrpa) {
    3cda:	f109 0002 	add.w	r0, r9, #2
    3cde:	f140 81cf 	bpl.w	4080 <isr_rx+0x4c8>
    3ce2:	f1bb 0f00 	cmp.w	fp, #0
    3ce6:	f000 81cb 	beq.w	4080 <isr_rx+0x4c8>
			pdu_tx->tx_addr = 1;
    3cea:	f899 3000 	ldrb.w	r3, [r9]
    3cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3cf2:	f889 3000 	strb.w	r3, [r9]
			memcpy(&pdu_tx->connect_ind.init_addr[0], lrpa->val,
    3cf6:	2206      	movs	r2, #6
    3cf8:	4659      	mov	r1, fp
    3cfa:	f01d fd74 	bl	217e6 <memcpy>
		memcpy(&pdu_tx->connect_ind.adv_addr[0],
    3cfe:	2206      	movs	r2, #6
    3d00:	f105 011e 	add.w	r1, r5, #30
    3d04:	f109 0008 	add.w	r0, r9, #8
    3d08:	f01d fd6d 	bl	217e6 <memcpy>
		memcpy(&pdu_tx->connect_ind.access_addr[0],
    3d0c:	2204      	movs	r2, #4
    3d0e:	f10a 0108 	add.w	r1, sl, #8
    3d12:	f109 000e 	add.w	r0, r9, #14
    3d16:	f01d fd66 	bl	217e6 <memcpy>
		memcpy(&pdu_tx->connect_ind.crc_init[0],
    3d1a:	2203      	movs	r2, #3
    3d1c:	f10a 010c 	add.w	r1, sl, #12
    3d20:	f109 0012 	add.w	r0, r9, #18
    3d24:	f01d fd5f 	bl	217e6 <memcpy>
		pdu_tx->connect_ind.win_size = 1;
    3d28:	2301      	movs	r3, #1
    3d2a:	f889 3015 	strb.w	r3, [r9, #21]
		conn_interval_us = (uint32_t)lll_conn->interval * 1250U;
    3d2e:	f8ba 3012 	ldrh.w	r3, [sl, #18]
    3d32:	9301      	str	r3, [sp, #4]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    3d34:	f018 fe2c 	bl	1c990 <radio_tmr_end_get>
		    lll->conn_win_offset_us == 0U) {
    3d38:	f8d4 8010 	ldr.w	r8, [r4, #16]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    3d3c:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
		if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
    3d40:	f1b8 0f00 	cmp.w	r8, #0
    3d44:	f000 81be 	beq.w	40c4 <isr_rx+0x50c>
		conn_interval_us = (uint32_t)lll_conn->interval * 1250U;
    3d48:	9901      	ldr	r1, [sp, #4]
    3d4a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    3d4e:	fb02 f201 	mul.w	r2, r2, r1
			while ((conn_space_us & ((uint32_t)1 << 31)) ||
    3d52:	f1b8 0f00 	cmp.w	r8, #0
    3d56:	db02      	blt.n	3d5e <isr_rx+0x1a6>
    3d58:	4543      	cmp	r3, r8
    3d5a:	f240 80c7 	bls.w	3eec <isr_rx+0x334>
				conn_space_us += conn_interval_us;
    3d5e:	4490      	add	r8, r2
    3d60:	e7f7      	b.n	3d52 <isr_rx+0x19a>
	LL_ASSERT(node_rx);
    3d62:	4a5f      	ldr	r2, [pc, #380]	; (3ee0 <isr_rx+0x328>)
    3d64:	495f      	ldr	r1, [pc, #380]	; (3ee4 <isr_rx+0x32c>)
    3d66:	4860      	ldr	r0, [pc, #384]	; (3ee8 <isr_rx+0x330>)
    3d68:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
    3d6c:	f01b fcc3 	bl	1f6f6 <printk>
    3d70:	4040      	eors	r0, r0
    3d72:	f380 8811 	msr	BASEPRI, r0
    3d76:	f04f 0003 	mov.w	r0, #3
    3d7a:	df02      	svc	2
	rl_idx = devmatch_ok ?
    3d7c:	f1b8 0f00 	cmp.w	r8, #0
    3d80:	f43f af4f 	beq.w	3c22 <isr_rx+0x6a>
		 ull_filter_lll_rl_idx(!!(lll->filter_policy & 0x01),
    3d84:	7da0      	ldrb	r0, [r4, #22]
    3d86:	b2f9      	uxtb	r1, r7
    3d88:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3d8c:	f015 fc9c 	bl	196c8 <ull_filter_lll_rl_idx>
    3d90:	4607      	mov	r7, r0
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
    3d92:	f1b9 0f00 	cmp.w	r9, #0
    3d96:	f43f af1a 	beq.w	3bce <isr_rx+0x16>
    3d9a:	e749      	b.n	3c30 <isr_rx+0x78>
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    3d9c:	fa5f f08b 	uxtb.w	r0, fp
    3da0:	f015 fcfc 	bl	1979c <ull_filter_lll_rl_irk_idx>
    3da4:	4607      	mov	r7, r0
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
    3da6:	f1b9 0f00 	cmp.w	r9, #0
    3daa:	f43f af10 	beq.w	3bce <isr_rx+0x16>
    3dae:	e73f      	b.n	3c30 <isr_rx+0x78>
	return (((lll->filter_policy & 0x01) == 0) &&
    3db0:	f1b8 0f00 	cmp.w	r8, #0
    3db4:	d172      	bne.n	3e9c <isr_rx+0x2e4>
	} else if ((lll->conn) &&
    3db6:	68a2      	ldr	r2, [r4, #8]
    3db8:	2a00      	cmp	r2, #0
    3dba:	d17d      	bne.n	3eb8 <isr_rx+0x300>
    3dbc:	7f28      	ldrb	r0, [r5, #28]
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    3dbe:	f010 030f 	ands.w	r3, r0, #15
    3dc2:	d120      	bne.n	3e06 <isr_rx+0x24e>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    3dc4:	7f6b      	ldrb	r3, [r5, #29]
    3dc6:	2b25      	cmp	r3, #37	; 0x25
    3dc8:	f63f af01 	bhi.w	3bce <isr_rx+0x16>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    3dcc:	f994 2016 	ldrsb.w	r2, [r4, #22]
    3dd0:	2a00      	cmp	r2, #0
    3dd2:	da03      	bge.n	3ddc <isr_rx+0x224>
		   lll->type &&
    3dd4:	68a2      	ldr	r2, [r4, #8]
    3dd6:	2a00      	cmp	r2, #0
    3dd8:	f000 8196 	beq.w	4108 <isr_rx+0x550>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    3ddc:	2b25      	cmp	r3, #37	; 0x25
	bool dir_report = false;
    3dde:	bf98      	it	ls
    3de0:	f04f 0800 	movls.w	r8, #0
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    3de4:	d836      	bhi.n	3e54 <isr_rx+0x29c>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    3de6:	2b00      	cmp	r3, #0
    3de8:	f43f aef1 	beq.w	3bce <isr_rx+0x16>
		 (pdu_adv_rx->len != 0) &&
    3dec:	68a3      	ldr	r3, [r4, #8]
    3dee:	2b00      	cmp	r3, #0
    3df0:	f47f aeed 	bne.w	3bce <isr_rx+0x16>
		err = isr_rx_scan_report(lll, rssi_ready,
    3df4:	2e00      	cmp	r6, #0
    3df6:	bf14      	ite	ne
    3df8:	4639      	movne	r1, r7
    3dfa:	21ff      	moveq	r1, #255	; 0xff
    3dfc:	4642      	mov	r2, r8
    3dfe:	4650      	mov	r0, sl
    3e00:	f017 fa04 	bl	1b20c <isr_rx_scan_report.isra.0>
		if (err) {
    3e04:	e6e3      	b.n	3bce <isr_rx+0x16>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    3e06:	2b06      	cmp	r3, #6
    3e08:	f000 8133 	beq.w	4072 <isr_rx+0x4ba>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    3e0c:	2b02      	cmp	r3, #2
    3e0e:	f000 8135 	beq.w	407c <isr_rx+0x4c4>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    3e12:	2b01      	cmp	r3, #1
    3e14:	d11e      	bne.n	3e54 <isr_rx+0x29c>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    3e16:	7f6b      	ldrb	r3, [r5, #29]
    3e18:	2b0c      	cmp	r3, #12
    3e1a:	f47f aed8 	bne.w	3bce <isr_rx+0x16>
				       struct pdu_adv *pdu, uint8_t rl_idx,
				       bool *dir_report)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
					   pdu->direct_ind.tgt_addr, rl_idx)) {
    3e1e:	f105 0924 	add.w	r9, r5, #36	; 0x24
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
    3e22:	09c0      	lsrs	r0, r0, #7
    3e24:	4649      	mov	r1, r9
    3e26:	463a      	mov	r2, r7
    3e28:	f015 fdb8 	bl	1999c <ull_filter_lll_rl_addr_resolve>
    3e2c:	4680      	mov	r8, r0
    3e2e:	bb88      	cbnz	r0, 3e94 <isr_rx+0x2dc>
		 */
		return false;
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return (((lll->init_addr_type == pdu->rx_addr) &&
    3e30:	7da3      	ldrb	r3, [r4, #22]
    3e32:	7f28      	ldrb	r0, [r5, #28]
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
			BDADDR_SIZE))) ||
    3e34:	f3c3 1280 	ubfx	r2, r3, #6, #1
    3e38:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
    3e3c:	f000 81c4 	beq.w	41c8 <isr_rx+0x610>

static inline bool isr_scan_tgta_rpa_check(struct lll_scan *lll,
					   struct pdu_adv *pdu,
					   bool *dir_report)
{
	if (((lll->filter_policy & 0x02) != 0U) &&
    3e40:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    3e44:	079a      	lsls	r2, r3, #30
    3e46:	d504      	bpl.n	3e52 <isr_rx+0x29a>
    3e48:	f995 301c 	ldrsb.w	r3, [r5, #28]
    3e4c:	2b00      	cmp	r3, #0
    3e4e:	f2c0 81b0 	blt.w	41b2 <isr_rx+0x5fa>
    3e52:	7f28      	ldrb	r0, [r5, #28]
					&dir_report))) ||
    3e54:	f000 000f 	and.w	r0, r0, #15
    3e58:	2804      	cmp	r0, #4
    3e5a:	f47f aeb8 	bne.w	3bce <isr_rx+0x16>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    3e5e:	7f6b      	ldrb	r3, [r5, #29]
    3e60:	2b25      	cmp	r3, #37	; 0x25
    3e62:	f63f aeb4 	bhi.w	3bce <isr_rx+0x16>
		   (lll->state != 0U) &&
    3e66:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    3e68:	07db      	lsls	r3, r3, #31
    3e6a:	f57f aeb0 	bpl.w	3bce <isr_rx+0x16>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    3e6e:	f018 fbe5 	bl	1c63c <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
    3e72:	7f2b      	ldrb	r3, [r5, #28]
    3e74:	7802      	ldrb	r2, [r0, #0]
    3e76:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3e7a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    3e7e:	f47f aea6 	bne.w	3bce <isr_rx+0x16>
		(memcmp(&sreq->scan_req.adv_addr[0],
    3e82:	3008      	adds	r0, #8
    3e84:	2206      	movs	r2, #6
    3e86:	f105 011e 	add.w	r1, r5, #30
    3e8a:	f01d fc9c 	bl	217c6 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    3e8e:	2800      	cmp	r0, #0
    3e90:	f47f ae9d 	bne.w	3bce <isr_rx+0x16>
    3e94:	7f6b      	ldrb	r3, [r5, #29]
	bool dir_report = false;
    3e96:	f04f 0800 	mov.w	r8, #0
    3e9a:	e7a4      	b.n	3de6 <isr_rx+0x22e>
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
    3e9c:	4639      	mov	r1, r7
    3e9e:	4630      	mov	r0, r6
    3ea0:	f015 fd0a 	bl	198b8 <ull_filter_lll_rl_idx_allowed>
    3ea4:	2800      	cmp	r0, #0
    3ea6:	f000 80a9 	beq.w	3ffc <isr_rx+0x444>
	} else if ((lll->conn) &&
    3eaa:	68a3      	ldr	r3, [r4, #8]
    3eac:	2b00      	cmp	r3, #0
    3eae:	d085      	beq.n	3dbc <isr_rx+0x204>
	return ((((lll->filter_policy & 0x01) != 0U) ||
    3eb0:	7da3      	ldrb	r3, [r4, #22]
		 isr_scan_init_adva_check(lll, pdu, rl_idx)) &&
    3eb2:	071a      	lsls	r2, r3, #28
    3eb4:	f53f aeca 	bmi.w	3c4c <isr_rx+0x94>
	if (rl_idx != FILTER_IDX_NONE) {
    3eb8:	2fff      	cmp	r7, #255	; 0xff
    3eba:	f000 80f0 	beq.w	409e <isr_rx+0x4e6>
		return (rl_idx == lll->rl_idx);
    3ebe:	7e23      	ldrb	r3, [r4, #24]
    3ec0:	1bdb      	subs	r3, r3, r7
    3ec2:	fab3 f383 	clz	r3, r3
    3ec6:	095b      	lsrs	r3, r3, #5
    3ec8:	e6bd      	b.n	3c46 <isr_rx+0x8e>
    3eca:	bf00      	nop
    3ecc:	f3af 8000 	nop.w
    3ed0:	3b9aca00 	.word	0x3b9aca00
    3ed4:	00000000 	.word	0x00000000
    3ed8:	0001b009 	.word	0x0001b009
    3edc:	1afd498d 	.word	0x1afd498d
    3ee0:	00026614 	.word	0x00026614
    3ee4:	00026660 	.word	0x00026660
    3ee8:	00025984 	.word	0x00025984
				sys_cpu_to_le16((conn_space_us -
    3eec:	49cf      	ldr	r1, [pc, #828]	; (422c <isr_rx+0x674>)
			pdu_tx->connect_ind.win_size++;
    3eee:	f899 2015 	ldrb.w	r2, [r9, #21]
				sys_cpu_to_le16((conn_space_us -
    3ef2:	eba8 0303 	sub.w	r3, r8, r3
    3ef6:	fba1 1303 	umull	r1, r3, r1, r3
			pdu_tx->connect_ind.win_offset =
    3efa:	f3c3 238f 	ubfx	r3, r3, #10, #16
			pdu_tx->connect_ind.win_size++;
    3efe:	3201      	adds	r2, #1
			pdu_tx->connect_ind.win_offset =
    3f00:	f8a9 3016 	strh.w	r3, [r9, #22]
			pdu_tx->connect_ind.win_size++;
    3f04:	f889 2015 	strb.w	r2, [r9, #21]
		pdu_tx->connect_ind.interval =
    3f08:	f8ba 1012 	ldrh.w	r1, [sl, #18]
		pdu_tx->connect_ind.latency =
    3f0c:	f8ba 2014 	ldrh.w	r2, [sl, #20]
		pdu_tx->connect_ind.timeout =
    3f10:	8aa3      	ldrh	r3, [r4, #20]
    3f12:	f8a9 301c 	strh.w	r3, [r9, #28]
		pdu_tx->connect_ind.interval =
    3f16:	f8a9 1018 	strh.w	r1, [r9, #24]
		pdu_tx->connect_ind.latency =
    3f1a:	f8a9 201a 	strh.w	r2, [r9, #26]
		memcpy(&pdu_tx->connect_ind.chan_map[0],
    3f1e:	f10a 011c 	add.w	r1, sl, #28
    3f22:	2205      	movs	r2, #5
    3f24:	f109 001e 	add.w	r0, r9, #30
    3f28:	f01d fc5d 	bl	217e6 <memcpy>
		pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
    3f2c:	f89a 2022 	ldrb.w	r2, [sl, #34]	; 0x22
    3f30:	f899 3023 	ldrb.w	r3, [r9, #35]	; 0x23
    3f34:	f362 0304 	bfi	r3, r2, #0, #5
    3f38:	f889 3023 	strb.w	r3, [r9, #35]	; 0x23
		pdu_tx->connect_ind.sca = lll_clock_sca_local_get();
    3f3c:	f016 f9b2 	bl	1a2a4 <lll_clock_sca_local_get>
    3f40:	f899 3023 	ldrb.w	r3, [r9, #35]	; 0x23
    3f44:	f360 1347 	bfi	r3, r0, #5, #3
    3f48:	f889 3023 	strb.w	r3, [r9, #35]	; 0x23
		radio_pkt_tx_set(pdu_tx);
    3f4c:	4648      	mov	r0, r9
    3f4e:	f018 faeb 	bl	1c528 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    3f52:	f018 fb3b 	bl	1c5cc <radio_is_ready>
    3f56:	2800      	cmp	r0, #0
    3f58:	f040 80c8 	bne.w	40ec <isr_rx+0x534>
		radio_isr_set(isr_done_cleanup, lll);
    3f5c:	48b4      	ldr	r0, [pc, #720]	; (4230 <isr_rx+0x678>)
    3f5e:	4621      	mov	r1, r4
    3f60:	f018 f9fc 	bl	1c35c <radio_isr_set>
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
    3f64:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
    3f66:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
    3f6a:	07db      	lsls	r3, r3, #31
    3f6c:	7122      	strb	r2, [r4, #4]
    3f6e:	f100 80af 	bmi.w	40d0 <isr_rx+0x518>
		rx = ull_pdu_rx_alloc();
    3f72:	f00f ffdf 	bl	13f34 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    3f76:	2311      	movs	r3, #17
		rx = ull_pdu_rx_alloc();
    3f78:	4682      	mov	sl, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    3f7a:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
    3f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    3f80:	2224      	movs	r2, #36	; 0x24
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    3f82:	7f2d      	ldrb	r5, [r5, #28]
		rx->hdr.handle = 0xffff;
    3f84:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    3f86:	4649      	mov	r1, r9
    3f88:	301c      	adds	r0, #28
    3f8a:	f01d fc2c 	bl	217e6 <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    3f8e:	f89a 301c 	ldrb.w	r3, [sl, #28]
		ftr->param = lll;
    3f92:	f8ca 4008 	str.w	r4, [sl, #8]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    3f96:	f3c5 1540 	ubfx	r5, r5, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    3f9a:	f365 1345 	bfi	r3, r5, #5, #1
    3f9e:	f88a 301c 	strb.w	r3, [sl, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
    3fa2:	f018 fc99 	bl	1c8d8 <radio_tmr_start_get>
				    radio_tx_chain_delay_get(0, 0);
    3fa6:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
    3fa8:	f8ca 0010 	str.w	r0, [sl, #16]
				    radio_tx_chain_delay_get(0, 0);
    3fac:	4608      	mov	r0, r1
    3fae:	f018 facb 	bl	1c548 <radio_tx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    3fb2:	2e00      	cmp	r6, #0
    3fb4:	bf08      	it	eq
    3fb6:	27ff      	moveq	r7, #255	; 0xff
    3fb8:	f88a 701a 	strb.w	r7, [sl, #26]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    3fbc:	7de2      	ldrb	r2, [r4, #23]
		ftr->radio_end_us = conn_space_us -
    3fbe:	eba8 0000 	sub.w	r0, r8, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    3fc2:	f012 0201 	ands.w	r2, r2, #1
		ftr->radio_end_us = conn_space_us -
    3fc6:	f8ca 0014 	str.w	r0, [sl, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    3fca:	d003      	beq.n	3fd4 <isr_rx+0x41c>
    3fcc:	f1bb 0200 	subs.w	r2, fp, #0
    3fd0:	bf18      	it	ne
    3fd2:	2201      	movne	r2, #1
    3fd4:	f89a 3019 	ldrb.w	r3, [sl, #25]
    3fd8:	f362 0300 	bfi	r3, r2, #0, #1
    3fdc:	f88a 3019 	strb.w	r3, [sl, #25]
			ftr->extra = ull_pdu_rx_alloc();
    3fe0:	f00f ffa8 	bl	13f34 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
    3fe4:	4651      	mov	r1, sl
			ftr->extra = ull_pdu_rx_alloc();
    3fe6:	f8ca 000c 	str.w	r0, [sl, #12]
		ull_rx_put(rx->hdr.link, rx);
    3fea:	f8da 0000 	ldr.w	r0, [sl]
    3fee:	f00f ffb9 	bl	13f64 <ull_rx_put>
}
    3ff2:	b003      	add	sp, #12
    3ff4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		ull_rx_sched();
    3ff8:	f00f bfc4 	b.w	13f84 <ull_rx_sched>
		(((lll->filter_policy & 0x01) != 0) &&
    3ffc:	7da3      	ldrb	r3, [r4, #22]
								rl_idx))) ||
    3ffe:	0718      	lsls	r0, r3, #28
    4000:	f57f ade5 	bpl.w	3bce <isr_rx+0x16>
    4004:	e61e      	b.n	3c44 <isr_rx+0x8c>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(rl_idx)));
    4006:	4638      	mov	r0, r7
    4008:	f015 fc1a 	bl	19840 <ull_filter_lll_irk_whitelisted>
    400c:	2800      	cmp	r0, #0
    400e:	f47f af4c 	bne.w	3eaa <isr_rx+0x2f2>
    4012:	e5dc      	b.n	3bce <isr_rx+0x16>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
    4014:	2b01      	cmp	r3, #1
    4016:	f47f aef6 	bne.w	3e06 <isr_rx+0x24e>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
    401a:	7f6b      	ldrb	r3, [r5, #29]
    401c:	2b0c      	cmp	r3, #12
    401e:	f47f add6 	bne.w	3bce <isr_rx+0x16>
					   pdu->direct_ind.tgt_addr, rl_idx)) {
    4022:	f105 0824 	add.w	r8, r5, #36	; 0x24
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
    4026:	09c0      	lsrs	r0, r0, #7
    4028:	4641      	mov	r1, r8
    402a:	463a      	mov	r2, r7
    402c:	f015 fcb6 	bl	1999c <ull_filter_lll_rl_addr_resolve>
    4030:	2800      	cmp	r0, #0
    4032:	f47f ae14 	bne.w	3c5e <isr_rx+0xa6>
	} else if (init && lll->rpa_gen &&
    4036:	7de3      	ldrb	r3, [r4, #23]
    4038:	07db      	lsls	r3, r3, #31
    403a:	f100 80b3 	bmi.w	41a4 <isr_rx+0x5ec>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    403e:	7da3      	ldrb	r3, [r4, #22]
    4040:	7f28      	ldrb	r0, [r5, #28]
			BDADDR_SIZE))) ||
    4042:	f3c3 1280 	ubfx	r2, r3, #6, #1
    4046:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
    404a:	f000 80d6 	beq.w	41fa <isr_rx+0x642>
	if (((lll->filter_policy & 0x02) != 0U) &&
    404e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    4052:	0798      	lsls	r0, r3, #30
    4054:	f57f aeb2 	bpl.w	3dbc <isr_rx+0x204>
    4058:	f995 301c 	ldrsb.w	r3, [r5, #28]
    405c:	2b00      	cmp	r3, #0
    405e:	f6bf aead 	bge.w	3dbc <isr_rx+0x204>
	    (pdu->rx_addr != 0) &&
    4062:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    4066:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    406a:	2b40      	cmp	r3, #64	; 0x40
    406c:	f47f aea6 	bne.w	3dbc <isr_rx+0x204>
    4070:	e5f5      	b.n	3c5e <isr_rx+0xa6>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    4072:	7f6b      	ldrb	r3, [r5, #29]
    4074:	2b25      	cmp	r3, #37	; 0x25
    4076:	f63f aeed 	bhi.w	3e54 <isr_rx+0x29c>
    407a:	e6a7      	b.n	3dcc <isr_rx+0x214>
    407c:	7f6b      	ldrb	r3, [r5, #29]
    407e:	e6ad      	b.n	3ddc <isr_rx+0x224>
			pdu_tx->tx_addr = lll->init_addr_type;
    4080:	7da3      	ldrb	r3, [r4, #22]
    4082:	f899 2000 	ldrb.w	r2, [r9]
    4086:	f3c3 1380 	ubfx	r3, r3, #6, #1
    408a:	f363 1286 	bfi	r2, r3, #6, #1
    408e:	f889 2000 	strb.w	r2, [r9]
			memcpy(&pdu_tx->connect_ind.init_addr[0],
    4092:	f104 0119 	add.w	r1, r4, #25
    4096:	2206      	movs	r2, #6
    4098:	f01d fba5 	bl	217e6 <memcpy>
    409c:	e62f      	b.n	3cfe <isr_rx+0x146>
	return ((lll->adv_addr_type == pdu->tx_addr) &&
    409e:	7f28      	ldrb	r0, [r5, #28]
    40a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
    40a4:	f3c0 1280 	ubfx	r2, r0, #6, #1
    40a8:	4293      	cmp	r3, r2
    40aa:	f47f ae88 	bne.w	3dbe <isr_rx+0x206>
		!memcmp(lll->adv_addr, &pdu->adv_ind.addr[0], BDADDR_SIZE));
    40ae:	2206      	movs	r2, #6
    40b0:	f105 011e 	add.w	r1, r5, #30
    40b4:	f104 001f 	add.w	r0, r4, #31
    40b8:	f01d fb85 	bl	217c6 <memcmp>
	return ((lll->adv_addr_type == pdu->tx_addr) &&
    40bc:	fab0 f380 	clz	r3, r0
    40c0:	095b      	lsrs	r3, r3, #5
    40c2:	e5c0      	b.n	3c46 <isr_rx+0x8e>
			pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
    40c4:	f889 8016 	strb.w	r8, [r9, #22]
    40c8:	f889 8017 	strb.w	r8, [r9, #23]
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    40cc:	4698      	mov	r8, r3
    40ce:	e71b      	b.n	3f08 <isr_rx+0x350>
		LL_ASSERT(!ret);
    40d0:	4a58      	ldr	r2, [pc, #352]	; (4234 <isr_rx+0x67c>)
    40d2:	4959      	ldr	r1, [pc, #356]	; (4238 <isr_rx+0x680>)
    40d4:	4859      	ldr	r0, [pc, #356]	; (423c <isr_rx+0x684>)
    40d6:	f44f 7365 	mov.w	r3, #916	; 0x394
    40da:	f01b fb0c 	bl	1f6f6 <printk>
    40de:	4040      	eors	r0, r0
    40e0:	f380 8811 	msr	BASEPRI, r0
    40e4:	f04f 0003 	mov.w	r0, #3
    40e8:	df02      	svc	2
    40ea:	e742      	b.n	3f72 <isr_rx+0x3ba>
		LL_ASSERT(!radio_is_ready());
    40ec:	4a51      	ldr	r2, [pc, #324]	; (4234 <isr_rx+0x67c>)
    40ee:	4954      	ldr	r1, [pc, #336]	; (4240 <isr_rx+0x688>)
    40f0:	4852      	ldr	r0, [pc, #328]	; (423c <isr_rx+0x684>)
    40f2:	f240 336e 	movw	r3, #878	; 0x36e
    40f6:	f01b fafe 	bl	1f6f6 <printk>
    40fa:	4040      	eors	r0, r0
    40fc:	f380 8811 	msr	BASEPRI, r0
    4100:	f04f 0003 	mov.w	r0, #3
    4104:	df02      	svc	2
    4106:	e729      	b.n	3f5c <isr_rx+0x3a4>
		radio_tmr_tifs_set(EVENT_IFS_US);
    4108:	2096      	movs	r0, #150	; 0x96
    410a:	f018 fb33 	bl	1c774 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    410e:	2000      	movs	r0, #0
    4110:	f018 fa98 	bl	1c644 <radio_switch_complete_and_rx>
		err = isr_rx_scan_report(lll, rssi_ready,
    4114:	2e00      	cmp	r6, #0
    4116:	bf14      	ite	ne
    4118:	4639      	movne	r1, r7
    411a:	21ff      	moveq	r1, #255	; 0xff
    411c:	4650      	mov	r0, sl
    411e:	2200      	movs	r2, #0
    4120:	f017 f874 	bl	1b20c <isr_rx_scan_report.isra.0>
		if (err) {
    4124:	2800      	cmp	r0, #0
    4126:	f47f ad52 	bne.w	3bce <isr_rx+0x16>
		pdu_tx = (void *)radio_pkt_scratch_get();
    412a:	f018 fa87 	bl	1c63c <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    412e:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    4130:	7802      	ldrb	r2, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    4132:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    4136:	01db      	lsls	r3, r3, #7
		pdu_tx = (void *)radio_pkt_scratch_get();
    4138:	4606      	mov	r6, r0
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    413a:	f002 0270 	and.w	r2, r2, #112	; 0x70
    413e:	f043 0303 	orr.w	r3, r3, #3
    4142:	4313      	orrs	r3, r2
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    4144:	220c      	movs	r2, #12
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    4146:	7033      	strb	r3, [r6, #0]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4148:	4638      	mov	r0, r7
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    414a:	7072      	strb	r2, [r6, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    414c:	f015 fa9e 	bl	1968c <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    4150:	7de3      	ldrb	r3, [r4, #23]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    4152:	4601      	mov	r1, r0
		if (lll->rpa_gen && lrpa) {
    4154:	07d8      	lsls	r0, r3, #31
    4156:	d541      	bpl.n	41dc <isr_rx+0x624>
    4158:	2900      	cmp	r1, #0
    415a:	d03f      	beq.n	41dc <isr_rx+0x624>
			pdu_tx->tx_addr = 1;
    415c:	7833      	ldrb	r3, [r6, #0]
    415e:	4630      	mov	r0, r6
    4160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4164:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    4168:	2206      	movs	r2, #6
    416a:	f01d fb3c 	bl	217e6 <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
    416e:	f105 011e 	add.w	r1, r5, #30
    4172:	2206      	movs	r2, #6
    4174:	f106 0008 	add.w	r0, r6, #8
    4178:	f01d fb35 	bl	217e6 <memcpy>
		radio_pkt_tx_set(pdu_tx);
    417c:	4630      	mov	r0, r6
    417e:	f018 f9d3 	bl	1c528 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    4182:	f018 fa23 	bl	1c5cc <radio_is_ready>
    4186:	2800      	cmp	r0, #0
    4188:	d142      	bne.n	4210 <isr_rx+0x658>
		radio_tmr_end_capture();
    418a:	f018 fbf9 	bl	1c980 <radio_tmr_end_capture>
		lll->state = 1U;
    418e:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    4190:	482c      	ldr	r0, [pc, #176]	; (4244 <isr_rx+0x68c>)
		lll->state = 1U;
    4192:	f043 0301 	orr.w	r3, r3, #1
		radio_isr_set(isr_tx, lll);
    4196:	4621      	mov	r1, r4
		lll->state = 1U;
    4198:	75a3      	strb	r3, [r4, #22]
}
    419a:	b003      	add	sp, #12
    419c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		radio_isr_set(isr_tx, lll);
    41a0:	f018 b8dc 	b.w	1c35c <radio_isr_set>
		   ull_filter_lll_lrpa_get(rl_idx)) {
    41a4:	4638      	mov	r0, r7
    41a6:	f015 fa71 	bl	1968c <ull_filter_lll_lrpa_get>
	} else if (init && lll->rpa_gen &&
    41aa:	2800      	cmp	r0, #0
    41ac:	f47f ae06 	bne.w	3dbc <isr_rx+0x204>
    41b0:	e745      	b.n	403e <isr_rx+0x486>
	    (pdu->rx_addr != 0) &&
    41b2:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    41b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    41ba:	2b40      	cmp	r3, #64	; 0x40
    41bc:	f47f ae49 	bne.w	3e52 <isr_rx+0x29a>
    41c0:	7f6b      	ldrb	r3, [r5, #29]
			*dir_report = true;
    41c2:	f04f 0801 	mov.w	r8, #1
    41c6:	e60e      	b.n	3de6 <isr_rx+0x22e>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
    41c8:	4649      	mov	r1, r9
    41ca:	2206      	movs	r2, #6
    41cc:	f104 0019 	add.w	r0, r4, #25
    41d0:	f01d faf9 	bl	217c6 <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    41d4:	2800      	cmp	r0, #0
    41d6:	d037      	beq.n	4248 <isr_rx+0x690>
    41d8:	7da3      	ldrb	r3, [r4, #22]
    41da:	e631      	b.n	3e40 <isr_rx+0x288>
			pdu_tx->tx_addr = lll->init_addr_type;
    41dc:	7da3      	ldrb	r3, [r4, #22]
    41de:	7832      	ldrb	r2, [r6, #0]
    41e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    41e4:	4630      	mov	r0, r6
    41e6:	f363 1286 	bfi	r2, r3, #6, #1
    41ea:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
    41ee:	f104 0119 	add.w	r1, r4, #25
    41f2:	2206      	movs	r2, #6
    41f4:	f01d faf7 	bl	217e6 <memcpy>
    41f8:	e7b9      	b.n	416e <isr_rx+0x5b6>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
    41fa:	4641      	mov	r1, r8
    41fc:	2206      	movs	r2, #6
    41fe:	f104 0019 	add.w	r0, r4, #25
    4202:	f01d fae0 	bl	217c6 <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
    4206:	2800      	cmp	r0, #0
    4208:	f43f ad29 	beq.w	3c5e <isr_rx+0xa6>
    420c:	7da3      	ldrb	r3, [r4, #22]
    420e:	e71e      	b.n	404e <isr_rx+0x496>
		LL_ASSERT(!radio_is_ready());
    4210:	4a08      	ldr	r2, [pc, #32]	; (4234 <isr_rx+0x67c>)
    4212:	490b      	ldr	r1, [pc, #44]	; (4240 <isr_rx+0x688>)
    4214:	4809      	ldr	r0, [pc, #36]	; (423c <isr_rx+0x684>)
    4216:	f240 33ef 	movw	r3, #1007	; 0x3ef
    421a:	f01b fa6c 	bl	1f6f6 <printk>
    421e:	4040      	eors	r0, r0
    4220:	f380 8811 	msr	BASEPRI, r0
    4224:	f04f 0003 	mov.w	r0, #3
    4228:	df02      	svc	2
    422a:	e7ae      	b.n	418a <isr_rx+0x5d2>
    422c:	d1b71759 	.word	0xd1b71759
    4230:	0001af41 	.word	0x0001af41
    4234:	00026614 	.word	0x00026614
    4238:	00025c48 	.word	0x00025c48
    423c:	00025984 	.word	0x00025984
    4240:	000265d8 	.word	0x000265d8
    4244:	0001b01d 	.word	0x0001b01d
    4248:	7f6b      	ldrb	r3, [r5, #29]
    424a:	e5cc      	b.n	3de6 <isr_rx+0x22e>

0000424c <cb>:

	start_scan();
}

void cb(struct bt_conn *conn, uint8_t err, struct bt_gatt_write_params *params) {
    printk("Performed write (err %d) (offset %d) (len %d)\n", err, params->offset, params->length);
    424c:	8993      	ldrh	r3, [r2, #12]
    424e:	4802      	ldr	r0, [pc, #8]	; (4258 <cb+0xc>)
    4250:	88d2      	ldrh	r2, [r2, #6]
    4252:	f01b ba50 	b.w	1f6f6 <printk>
    4256:	bf00      	nop
    4258:	000269ec 	.word	0x000269ec

0000425c <discover_temperature>:
                                 struct bt_gatt_discover_params *params) {
    425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    425e:	4607      	mov	r7, r0
    4260:	4615      	mov	r5, r2
	if (!attr) {
    4262:	460c      	mov	r4, r1
    4264:	b949      	cbnz	r1, 427a <discover_temperature+0x1e>
		printk("Discover complete\n");
    4266:	481e      	ldr	r0, [pc, #120]	; (42e0 <discover_temperature+0x84>)
    4268:	f01b fa45 	bl	1f6f6 <printk>
		(void)memset(params, 0, sizeof(*params));
    426c:	2214      	movs	r2, #20
    426e:	4621      	mov	r1, r4
    4270:	4628      	mov	r0, r5
    4272:	f01d fae3 	bl	2183c <memset>
}
    4276:	2000      	movs	r0, #0
    4278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_uuid_cmp(discover_params.uuid, remote->service)) {
    427a:	4e1a      	ldr	r6, [pc, #104]	; (42e4 <discover_temperature+0x88>)
	printk("[ATTRIBUTE] handle %u\n", attr->handle);
    427c:	8a09      	ldrh	r1, [r1, #16]
    427e:	481a      	ldr	r0, [pc, #104]	; (42e8 <discover_temperature+0x8c>)
	if (!bt_uuid_cmp(discover_params.uuid, remote->service)) {
    4280:	4d1a      	ldr	r5, [pc, #104]	; (42ec <discover_temperature+0x90>)
	printk("[ATTRIBUTE] handle %u\n", attr->handle);
    4282:	f01b fa38 	bl	1f6f6 <printk>
	if (!bt_uuid_cmp(discover_params.uuid, remote->service)) {
    4286:	6833      	ldr	r3, [r6, #0]
    4288:	6828      	ldr	r0, [r5, #0]
    428a:	6859      	ldr	r1, [r3, #4]
    428c:	f01d fb7a 	bl	21984 <bt_uuid_cmp>
		discover_params.uuid         = remote->characteristic;
    4290:	6833      	ldr	r3, [r6, #0]
	if (!bt_uuid_cmp(discover_params.uuid, remote->service)) {
    4292:	b988      	cbnz	r0, 42b8 <discover_temperature+0x5c>
		discover_params.uuid         = remote->characteristic;
    4294:	689b      	ldr	r3, [r3, #8]
    4296:	602b      	str	r3, [r5, #0]
		discover_params.start_handle = attr->handle + 1;
    4298:	8a23      	ldrh	r3, [r4, #16]
    429a:	3301      	adds	r3, #1
    429c:	812b      	strh	r3, [r5, #8]
		err = bt_gatt_discover(conn, &discover_params);
    429e:	4629      	mov	r1, r5
		discover_params.type         = BT_GATT_DISCOVER_CHARACTERISTIC;
    42a0:	2303      	movs	r3, #3
		err = bt_gatt_discover(conn, &discover_params);
    42a2:	4638      	mov	r0, r7
		discover_params.type         = BT_GATT_DISCOVER_CHARACTERISTIC;
    42a4:	742b      	strb	r3, [r5, #16]
		err = bt_gatt_discover(conn, &discover_params);
    42a6:	f008 fe47 	bl	cf38 <bt_gatt_discover>
		if (err) {
    42aa:	4601      	mov	r1, r0
    42ac:	2800      	cmp	r0, #0
    42ae:	d0e2      	beq.n	4276 <discover_temperature+0x1a>
			printk("Discover failed (err %d)\n", err);
    42b0:	480f      	ldr	r0, [pc, #60]	; (42f0 <discover_temperature+0x94>)
    42b2:	f01b fa20 	bl	1f6f6 <printk>
    42b6:	e7de      	b.n	4276 <discover_temperature+0x1a>
	} else if (!bt_uuid_cmp(discover_params.uuid, remote->characteristic)) {
    42b8:	6899      	ldr	r1, [r3, #8]
    42ba:	6828      	ldr	r0, [r5, #0]
    42bc:	f01d fb62 	bl	21984 <bt_uuid_cmp>
    42c0:	2800      	cmp	r0, #0
    42c2:	d1d8      	bne.n	4276 <discover_temperature+0x1a>
		set_handle(bt_gatt_attr_value_handle(attr), remote);
    42c4:	4620      	mov	r0, r4
    42c6:	f01e fe34 	bl	22f32 <bt_gatt_attr_value_handle>
    42ca:	6831      	ldr	r1, [r6, #0]
    42cc:	f01b f9bf 	bl	1f64e <set_handle>
		discovered = 1;
    42d0:	4b08      	ldr	r3, [pc, #32]	; (42f4 <discover_temperature+0x98>)
		printk("Found characteristic handle\n");
    42d2:	4809      	ldr	r0, [pc, #36]	; (42f8 <discover_temperature+0x9c>)
		discovered = 1;
    42d4:	2201      	movs	r2, #1
    42d6:	701a      	strb	r2, [r3, #0]
		printk("Found characteristic handle\n");
    42d8:	f01b fa0d 	bl	1f6f6 <printk>
    42dc:	e7cb      	b.n	4276 <discover_temperature+0x1a>
    42de:	bf00      	nop
    42e0:	00026a1b 	.word	0x00026a1b
    42e4:	2000119c 	.word	0x2000119c
    42e8:	00026a2e 	.word	0x00026a2e
    42ec:	20001188 	.word	0x20001188
    42f0:	00026a45 	.word	0x00026a45
    42f4:	20002b12 	.word	0x20002b12
    42f8:	00026a5f 	.word	0x00026a5f

000042fc <start_scan>:
{
    42fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_le_scan_param scan_param = {
    42fe:	2214      	movs	r2, #20
    4300:	2100      	movs	r1, #0
    4302:	a801      	add	r0, sp, #4
    4304:	f01d fa9a 	bl	2183c <memset>
    4308:	2301      	movs	r3, #1
	err = bt_le_scan_start(&scan_param, device_found);
    430a:	490a      	ldr	r1, [pc, #40]	; (4334 <start_scan+0x38>)
	struct bt_le_scan_param scan_param = {
    430c:	f88d 3004 	strb.w	r3, [sp, #4]
	err = bt_le_scan_start(&scan_param, device_found);
    4310:	a801      	add	r0, sp, #4
	struct bt_le_scan_param scan_param = {
    4312:	4b09      	ldr	r3, [pc, #36]	; (4338 <start_scan+0x3c>)
    4314:	9303      	str	r3, [sp, #12]
	err = bt_le_scan_start(&scan_param, device_found);
    4316:	f005 fb55 	bl	99c4 <bt_le_scan_start>
	if (err) {
    431a:	4601      	mov	r1, r0
    431c:	b128      	cbz	r0, 432a <start_scan+0x2e>
		printk("Scanning failed to start (err %d)\n", err);
    431e:	4807      	ldr	r0, [pc, #28]	; (433c <start_scan+0x40>)
    4320:	f01b f9e9 	bl	1f6f6 <printk>
}
    4324:	b007      	add	sp, #28
    4326:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Scanning successfully started\n");
    432a:	4805      	ldr	r0, [pc, #20]	; (4340 <start_scan+0x44>)
    432c:	f01b f9e3 	bl	1f6f6 <printk>
    4330:	e7f8      	b.n	4324 <start_scan+0x28>
    4332:	bf00      	nop
    4334:	0000447d 	.word	0x0000447d
    4338:	00300060 	.word	0x00300060
    433c:	00026a7c 	.word	0x00026a7c
    4340:	00026a9f 	.word	0x00026a9f

00004344 <bt_addr_le_to_str.constprop.0>:
 * @param len Length of data to be copied to user string buffer. Refer to
 * BT_ADDR_LE_STR_LEN about recommended value.
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    4344:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    4346:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    4348:	b08a      	sub	sp, #40	; 0x28
    434a:	4604      	mov	r4, r0
    434c:	460e      	mov	r6, r1
    434e:	ad07      	add	r5, sp, #28
    4350:	2b03      	cmp	r3, #3
    4352:	d820      	bhi.n	4396 <bt_addr_le_to_str.constprop.0+0x52>
    4354:	e8df f003 	tbb	[pc, r3]
    4358:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    435c:	4911      	ldr	r1, [pc, #68]	; (43a4 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    435e:	4628      	mov	r0, r5
    4360:	f01d fa01 	bl	21766 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    4364:	7863      	ldrb	r3, [r4, #1]
    4366:	9304      	str	r3, [sp, #16]
    4368:	78a3      	ldrb	r3, [r4, #2]
    436a:	9303      	str	r3, [sp, #12]
    436c:	78e3      	ldrb	r3, [r4, #3]
    436e:	9302      	str	r3, [sp, #8]
    4370:	7923      	ldrb	r3, [r4, #4]
    4372:	9301      	str	r3, [sp, #4]
    4374:	7963      	ldrb	r3, [r4, #5]
    4376:	9300      	str	r3, [sp, #0]
    4378:	4a0b      	ldr	r2, [pc, #44]	; (43a8 <bt_addr_le_to_str.constprop.0+0x64>)
    437a:	79a3      	ldrb	r3, [r4, #6]
    437c:	9505      	str	r5, [sp, #20]
    437e:	211e      	movs	r1, #30
    4380:	4630      	mov	r0, r6
    4382:	f01b f9c5 	bl	1f710 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    4386:	b00a      	add	sp, #40	; 0x28
    4388:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    438a:	4908      	ldr	r1, [pc, #32]	; (43ac <bt_addr_le_to_str.constprop.0+0x68>)
    438c:	e7e7      	b.n	435e <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
    438e:	4908      	ldr	r1, [pc, #32]	; (43b0 <bt_addr_le_to_str.constprop.0+0x6c>)
    4390:	e7e5      	b.n	435e <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
    4392:	4908      	ldr	r1, [pc, #32]	; (43b4 <bt_addr_le_to_str.constprop.0+0x70>)
    4394:	e7e3      	b.n	435e <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    4396:	4a08      	ldr	r2, [pc, #32]	; (43b8 <bt_addr_le_to_str.constprop.0+0x74>)
    4398:	210a      	movs	r1, #10
    439a:	4628      	mov	r0, r5
    439c:	f01b f9b8 	bl	1f710 <snprintk>
		break;
    43a0:	e7e0      	b.n	4364 <bt_addr_le_to_str.constprop.0+0x20>
    43a2:	bf00      	nop
    43a4:	00026abe 	.word	0x00026abe
    43a8:	00026ae0 	.word	0x00026ae0
    43ac:	00026ac5 	.word	0x00026ac5
    43b0:	00026acc 	.word	0x00026acc
    43b4:	00026ad6 	.word	0x00026ad6
    43b8:	000287fe 	.word	0x000287fe

000043bc <eir_found>:
{
    43bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43c0:	4606      	mov	r6, r0
    43c2:	b08a      	sub	sp, #40	; 0x28
    43c4:	460d      	mov	r5, r1
	bt_addr_le_to_str(addr, dev, sizeof(dev));
    43c6:	4628      	mov	r0, r5
    43c8:	a902      	add	r1, sp, #8
    43ca:	f7ff ffbb 	bl	4344 <bt_addr_le_to_str.constprop.0>
	switch (data->type) {
    43ce:	7833      	ldrb	r3, [r6, #0]
    43d0:	3b02      	subs	r3, #2
    43d2:	2b01      	cmp	r3, #1
    43d4:	d903      	bls.n	43de <eir_found+0x22>
			return true;
    43d6:	2001      	movs	r0, #1
}
    43d8:	b00a      	add	sp, #40	; 0x28
    43da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (data->data_len % sizeof(uint16_t) != 0U) {
    43de:	7874      	ldrb	r4, [r6, #1]
    43e0:	f014 0401 	ands.w	r4, r4, #1
    43e4:	d03c      	beq.n	4460 <eir_found+0xa4>
			printk("AD malformed\n");
    43e6:	4820      	ldr	r0, [pc, #128]	; (4468 <eir_found+0xac>)
    43e8:	f01b f985 	bl	1f6f6 <printk>
    43ec:	e7f3      	b.n	43d6 <eir_found+0x1a>
			memcpy(&u16, &data->data[i], sizeof(u16));
    43ee:	6871      	ldr	r1, [r6, #4]
    43f0:	2202      	movs	r2, #2
    43f2:	4421      	add	r1, r4
    43f4:	eb0d 0002 	add.w	r0, sp, r2
    43f8:	f01d f9f5 	bl	217e6 <memcpy>
			uuid = BT_UUID_DECLARE_16(sys_le16_to_cpu(u16));
    43fc:	2300      	movs	r3, #0
    43fe:	f88d 3004 	strb.w	r3, [sp, #4]
    4402:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    4406:	f8ad 3006 	strh.w	r3, [sp, #6]
			if (bt_uuid_cmp(uuid, remote->uuid)) {
    440a:	683b      	ldr	r3, [r7, #0]
    440c:	a801      	add	r0, sp, #4
    440e:	6819      	ldr	r1, [r3, #0]
    4410:	f01d fab8 	bl	21984 <bt_uuid_cmp>
    4414:	b948      	cbnz	r0, 442a <eir_found+0x6e>
				printk("Found device uuid\n");
    4416:	4640      	mov	r0, r8
    4418:	f01b f96d 	bl	1f6f6 <printk>
			err = bt_le_scan_stop();
    441c:	f005 fb36 	bl	9a8c <bt_le_scan_stop>
			if (err) {
    4420:	4601      	mov	r1, r0
    4422:	b138      	cbz	r0, 4434 <eir_found+0x78>
				printk("Stop LE scan failed (err %d)\n", err);
    4424:	4811      	ldr	r0, [pc, #68]	; (446c <eir_found+0xb0>)
    4426:	f01b f966 	bl	1f6f6 <printk>
		for (i = 0; i < data->data_len; i += sizeof(uint16_t)) {
    442a:	3402      	adds	r4, #2
    442c:	7873      	ldrb	r3, [r6, #1]
    442e:	429c      	cmp	r4, r3
    4430:	dbdd      	blt.n	43ee <eir_found+0x32>
    4432:	e7d0      	b.n	43d6 <eir_found+0x1a>
			err = connect(addr, remote);
    4434:	6839      	ldr	r1, [r7, #0]
    4436:	4628      	mov	r0, r5
    4438:	f000 f93a 	bl	46b0 <connect>
			if (err) {
    443c:	4601      	mov	r1, r0
    443e:	b110      	cbz	r0, 4446 <eir_found+0x8a>
				printk("Create conn failed (err %d)\n", err);
    4440:	480b      	ldr	r0, [pc, #44]	; (4470 <eir_found+0xb4>)
    4442:	f01b f958 	bl	1f6f6 <printk>
			set_addr(*addr, remote);
    4446:	7969      	ldrb	r1, [r5, #5]
    4448:	792b      	ldrb	r3, [r5, #4]
    444a:	6828      	ldr	r0, [r5, #0]
    444c:	683a      	ldr	r2, [r7, #0]
    444e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    4452:	79a9      	ldrb	r1, [r5, #6]
    4454:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    4458:	f01b f8fe 	bl	1f658 <set_addr>
			return false;
    445c:	2000      	movs	r0, #0
    445e:	e7bb      	b.n	43d8 <eir_found+0x1c>
			if (bt_uuid_cmp(uuid, remote->uuid)) {
    4460:	4f04      	ldr	r7, [pc, #16]	; (4474 <eir_found+0xb8>)
				printk("Found device uuid\n");
    4462:	f8df 8014 	ldr.w	r8, [pc, #20]	; 4478 <eir_found+0xbc>
    4466:	e7e1      	b.n	442c <eir_found+0x70>
    4468:	00026b03 	.word	0x00026b03
    446c:	00026b24 	.word	0x00026b24
    4470:	00026b42 	.word	0x00026b42
    4474:	2000119c 	.word	0x2000119c
    4478:	00026b11 	.word	0x00026b11

0000447c <device_found>:
{
    447c:	b570      	push	{r4, r5, r6, lr}
    447e:	b088      	sub	sp, #32
    4480:	4616      	mov	r6, r2
	bt_addr_le_to_str(addr, dev, sizeof(dev));
    4482:	4669      	mov	r1, sp
{
    4484:	4605      	mov	r5, r0
    4486:	461c      	mov	r4, r3
	bt_addr_le_to_str(addr, dev, sizeof(dev));
    4488:	f7ff ff5c 	bl	4344 <bt_addr_le_to_str.constprop.0>
	if (type == BT_GAP_ADV_TYPE_ADV_IND ||
    448c:	2e01      	cmp	r6, #1
    448e:	d804      	bhi.n	449a <device_found+0x1e>
		bt_data_parse(ad, eir_found, (void *)addr);
    4490:	4903      	ldr	r1, [pc, #12]	; (44a0 <device_found+0x24>)
    4492:	462a      	mov	r2, r5
    4494:	4620      	mov	r0, r4
    4496:	f004 fd4d 	bl	8f34 <bt_data_parse>
}
    449a:	b008      	add	sp, #32
    449c:	bd70      	pop	{r4, r5, r6, pc}
    449e:	bf00      	nop
    44a0:	000043bd 	.word	0x000043bd

000044a4 <connected>:
{
    44a4:	b570      	push	{r4, r5, r6, lr}
    44a6:	b088      	sub	sp, #32
    44a8:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    44aa:	f01d fe06 	bl	220ba <bt_conn_get_dst>
    44ae:	4669      	mov	r1, sp
    44b0:	f7ff ff48 	bl	4344 <bt_addr_le_to_str.constprop.0>
	isConnected = 1;
    44b4:	4b16      	ldr	r3, [pc, #88]	; (4510 <connected+0x6c>)
    44b6:	4d17      	ldr	r5, [pc, #92]	; (4514 <connected+0x70>)
    44b8:	2601      	movs	r6, #1
    44ba:	701e      	strb	r6, [r3, #0]
	if (conn_err) {
    44bc:	b17c      	cbz	r4, 44de <connected+0x3a>
		printk("Failed to connect to %s (%u)\n", addr, conn_err);
    44be:	4622      	mov	r2, r4
    44c0:	4815      	ldr	r0, [pc, #84]	; (4518 <connected+0x74>)
    44c2:	4669      	mov	r1, sp
    44c4:	f01b f917 	bl	1f6f6 <printk>
		bt_conn_unref(remote->connection);
    44c8:	682b      	ldr	r3, [r5, #0]
    44ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
    44cc:	f01d fdbe 	bl	2204c <bt_conn_unref>
		remote->connection = NULL;
    44d0:	682b      	ldr	r3, [r5, #0]
    44d2:	2200      	movs	r2, #0
    44d4:	631a      	str	r2, [r3, #48]	; 0x30
		start_scan();
    44d6:	f7ff ff11 	bl	42fc <start_scan>
}
    44da:	b008      	add	sp, #32
    44dc:	bd70      	pop	{r4, r5, r6, pc}
	printk("Connected: %s\n", addr);
    44de:	480f      	ldr	r0, [pc, #60]	; (451c <connected+0x78>)
    44e0:	4669      	mov	r1, sp
    44e2:	f01b f908 	bl	1f6f6 <printk>
	discover_params.uuid         = remote->service;
    44e6:	682b      	ldr	r3, [r5, #0]
    44e8:	490d      	ldr	r1, [pc, #52]	; (4520 <connected+0x7c>)
    44ea:	685a      	ldr	r2, [r3, #4]
    44ec:	600a      	str	r2, [r1, #0]
	discover_params.func         = discover_temperature;
    44ee:	4a0d      	ldr	r2, [pc, #52]	; (4524 <connected+0x80>)
    44f0:	604a      	str	r2, [r1, #4]
	err = bt_gatt_discover(remote->connection, &discover_params);
    44f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
	discover_params.start_handle = 0x0001;
    44f4:	810e      	strh	r6, [r1, #8]
	discover_params.end_handle   = 0xffff;
    44f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    44fa:	81ca      	strh	r2, [r1, #14]
	discover_params.type         = BT_GATT_DISCOVER_PRIMARY;
    44fc:	740c      	strb	r4, [r1, #16]
	err = bt_gatt_discover(remote->connection, &discover_params);
    44fe:	f008 fd1b 	bl	cf38 <bt_gatt_discover>
	if(err) {
    4502:	4601      	mov	r1, r0
    4504:	2800      	cmp	r0, #0
    4506:	d0e8      	beq.n	44da <connected+0x36>
		printk("Discover failed(err %d)\n", err);
    4508:	4807      	ldr	r0, [pc, #28]	; (4528 <connected+0x84>)
    450a:	f01b f8f4 	bl	1f6f6 <printk>
		return;
    450e:	e7e4      	b.n	44da <connected+0x36>
    4510:	20002b13 	.word	0x20002b13
    4514:	2000119c 	.word	0x2000119c
    4518:	00026b5f 	.word	0x00026b5f
    451c:	00026b7d 	.word	0x00026b7d
    4520:	20001188 	.word	0x20001188
    4524:	0000425d 	.word	0x0000425d
    4528:	00026b8c 	.word	0x00026b8c

0000452c <disconnected>:
{
    452c:	b570      	push	{r4, r5, r6, lr}
    452e:	b088      	sub	sp, #32
    4530:	460d      	mov	r5, r1
    4532:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    4534:	f01d fdc1 	bl	220ba <bt_conn_get_dst>
    4538:	4669      	mov	r1, sp
    453a:	f7ff ff03 	bl	4344 <bt_addr_le_to_str.constprop.0>
	printk("Disconnected: %s (reason 0x%02x)\n", addr, reason);
    453e:	480a      	ldr	r0, [pc, #40]	; (4568 <disconnected+0x3c>)
	if (remote->connection != conn) {
    4540:	4e0a      	ldr	r6, [pc, #40]	; (456c <disconnected+0x40>)
	printk("Disconnected: %s (reason 0x%02x)\n", addr, reason);
    4542:	462a      	mov	r2, r5
    4544:	4669      	mov	r1, sp
    4546:	f01b f8d6 	bl	1f6f6 <printk>
	isConnected = 0;
    454a:	4b09      	ldr	r3, [pc, #36]	; (4570 <disconnected+0x44>)
    454c:	2500      	movs	r5, #0
    454e:	701d      	strb	r5, [r3, #0]
	if (remote->connection != conn) {
    4550:	6833      	ldr	r3, [r6, #0]
    4552:	6b18      	ldr	r0, [r3, #48]	; 0x30
    4554:	42a0      	cmp	r0, r4
    4556:	d105      	bne.n	4564 <disconnected+0x38>
	bt_conn_unref(remote->connection);
    4558:	f01d fd78 	bl	2204c <bt_conn_unref>
	remote->connection = NULL;
    455c:	6833      	ldr	r3, [r6, #0]
    455e:	631d      	str	r5, [r3, #48]	; 0x30
	start_scan();
    4560:	f7ff fecc 	bl	42fc <start_scan>
}
    4564:	b008      	add	sp, #32
    4566:	bd70      	pop	{r4, r5, r6, pc}
    4568:	00026ba5 	.word	0x00026ba5
    456c:	2000119c 	.word	0x2000119c
    4570:	20002b13 	.word	0x20002b13

00004574 <start_bt>:
{
    4574:	b513      	push	{r0, r1, r4, lr}
	err = bt_enable(NULL);
    4576:	2000      	movs	r0, #0
    4578:	f004 ffc8 	bl	950c <bt_enable>
	if (err) {
    457c:	4604      	mov	r4, r0
    457e:	b128      	cbz	r0, 458c <start_bt+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
    4580:	4601      	mov	r1, r0
    4582:	4812      	ldr	r0, [pc, #72]	; (45cc <start_bt+0x58>)
		printk("Registering service failed (err %d)\n",err);
    4584:	f01b f8b7 	bl	1f6f6 <printk>
}
    4588:	b002      	add	sp, #8
    458a:	bd10      	pop	{r4, pc}
	printk("Bluetooth initialized\n");
    458c:	4810      	ldr	r0, [pc, #64]	; (45d0 <start_bt+0x5c>)
    458e:	f01b f8b2 	bl	1f6f6 <printk>
    err = register_service(BT_UUID_MY_SERVICE, BT_UUID_MY_CHARACTERISTIC);
    4592:	f64f 73a1 	movw	r3, #65441	; 0xffa1
    4596:	f8ad 3002 	strh.w	r3, [sp, #2]
    459a:	a901      	add	r1, sp, #4
    459c:	f64f 73a2 	movw	r3, #65442	; 0xffa2
    45a0:	4668      	mov	r0, sp
    45a2:	f88d 4000 	strb.w	r4, [sp]
    45a6:	f88d 4004 	strb.w	r4, [sp, #4]
    45aa:	f8ad 3006 	strh.w	r3, [sp, #6]
    45ae:	f000 f899 	bl	46e4 <register_service>
	if(err) {
    45b2:	4601      	mov	r1, r0
    45b4:	b108      	cbz	r0, 45ba <start_bt+0x46>
		printk("Registering service failed (err %d)\n",err);
    45b6:	4807      	ldr	r0, [pc, #28]	; (45d4 <start_bt+0x60>)
    45b8:	e7e4      	b.n	4584 <start_bt+0x10>
		printk("It seemed that registering went fine\n");
    45ba:	4807      	ldr	r0, [pc, #28]	; (45d8 <start_bt+0x64>)
    45bc:	f01b f89b 	bl	1f6f6 <printk>
	bt_conn_cb_register(&conn_callbacks);
    45c0:	4806      	ldr	r0, [pc, #24]	; (45dc <start_bt+0x68>)
    45c2:	f005 fc55 	bl	9e70 <bt_conn_cb_register>
	start_scan();
    45c6:	f7ff fe99 	bl	42fc <start_scan>
    45ca:	e7dd      	b.n	4588 <start_bt+0x14>
    45cc:	00026bc7 	.word	0x00026bc7
    45d0:	00026be7 	.word	0x00026be7
    45d4:	00026bfe 	.word	0x00026bfe
    45d8:	00026c23 	.word	0x00026c23
    45dc:	20000130 	.word	0x20000130

000045e0 <main>:
uint8_t service[]        = {0x11, 0xff};
uint8_t characteristic[] = {0x12, 0xff};

char* data = "client";

void main(void) {
    45e0:	b570      	push	{r4, r5, r6, lr}
    /* Create and initialise remote device information */
	remote = new_remote_device(device, service, characteristic);
    45e2:	4a1b      	ldr	r2, [pc, #108]	; (4650 <main+0x70>)
    45e4:	491b      	ldr	r1, [pc, #108]	; (4654 <main+0x74>)
    45e6:	481c      	ldr	r0, [pc, #112]	; (4658 <main+0x78>)
    45e8:	4c1c      	ldr	r4, [pc, #112]	; (465c <main+0x7c>)

    start_bt();

	while(!discovered) {
		k_sleep(K_SECONDS(1));
		printk("have not discovered yet\n");
    45ea:	4e1d      	ldr	r6, [pc, #116]	; (4660 <main+0x80>)
	remote = new_remote_device(device, service, characteristic);
    45ec:	f01b f808 	bl	1f600 <new_remote_device>
    set_message_payload(data, strlen(data) + 1, remote);
    45f0:	4b1c      	ldr	r3, [pc, #112]	; (4664 <main+0x84>)
	remote = new_remote_device(device, service, characteristic);
    45f2:	6020      	str	r0, [r4, #0]
    set_message_payload(data, strlen(data) + 1, remote);
    45f4:	681d      	ldr	r5, [r3, #0]
    45f6:	4628      	mov	r0, r5
    45f8:	f01d f8d2 	bl	217a0 <strlen>
    45fc:	1c41      	adds	r1, r0, #1
    45fe:	6822      	ldr	r2, [r4, #0]
    4600:	4628      	mov	r0, r5
    4602:	b289      	uxth	r1, r1
    4604:	f01b f825 	bl	1f652 <set_message_payload>
    remote->handle.func   = cb;
    4608:	6823      	ldr	r3, [r4, #0]
    460a:	4a17      	ldr	r2, [pc, #92]	; (4668 <main+0x88>)
    460c:	60da      	str	r2, [r3, #12]
    start_bt();
    460e:	f7ff ffb1 	bl	4574 <start_bt>
	while(!discovered) {
    4612:	4d16      	ldr	r5, [pc, #88]	; (466c <main+0x8c>)
    4614:	782b      	ldrb	r3, [r5, #0]
    4616:	b193      	cbz	r3, 463e <main+0x5e>
	while(1) {
		k_sleep(K_SECONDS(1));

		int err = bt_gatt_write(remote->connection, &remote->handle);
		if(err) {
			printk("error while writing (err %d)\n", err);
    4618:	4d15      	ldr	r5, [pc, #84]	; (4670 <main+0x90>)
	return z_impl_k_sleep(timeout);
    461a:	2100      	movs	r1, #0
    461c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4620:	f01a fb92 	bl	1ed48 <z_impl_k_sleep>
		int err = bt_gatt_write(remote->connection, &remote->handle);
    4624:	6823      	ldr	r3, [r4, #0]
    4626:	f103 010c 	add.w	r1, r3, #12
    462a:	6b18      	ldr	r0, [r3, #48]	; 0x30
    462c:	f009 f81e 	bl	d66c <bt_gatt_write>
		if(err) {
    4630:	4601      	mov	r1, r0
    4632:	2800      	cmp	r0, #0
    4634:	d0f1      	beq.n	461a <main+0x3a>
			printk("error while writing (err %d)\n", err);
    4636:	4628      	mov	r0, r5
    4638:	f01b f85d 	bl	1f6f6 <printk>
	while(1) {
    463c:	e7ed      	b.n	461a <main+0x3a>
    463e:	2100      	movs	r1, #0
    4640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4644:	f01a fb80 	bl	1ed48 <z_impl_k_sleep>
		printk("have not discovered yet\n");
    4648:	4630      	mov	r0, r6
    464a:	f01b f854 	bl	1f6f6 <printk>
    464e:	e7e1      	b.n	4614 <main+0x34>
    4650:	20000654 	.word	0x20000654
    4654:	20000658 	.word	0x20000658
    4658:	20000656 	.word	0x20000656
    465c:	2000119c 	.word	0x2000119c
    4660:	00026c49 	.word	0x00026c49
    4664:	2000014c 	.word	0x2000014c
    4668:	0000424d 	.word	0x0000424d
    466c:	20002b12 	.word	0x20002b12
    4670:	00026c62 	.word	0x00026c62

00004674 <write_value>:
}

static ssize_t write_value( struct bt_conn *conn
                           , const struct bt_gatt_attr *attr
						   , const void *buf, uint16_t len, uint16_t offset
						   , uint8_t flags) {
    4674:	b598      	push	{r3, r4, r7, lr}
    4676:	af00      	add	r7, sp, #0
    char text[len];
    4678:	461c      	mov	r4, r3
    467a:	3307      	adds	r3, #7
						   , uint8_t flags) {
    467c:	8a38      	ldrh	r0, [r7, #16]
    467e:	4611      	mov	r1, r2
    char text[len];
    4680:	08db      	lsrs	r3, r3, #3
    4682:	466a      	mov	r2, sp
    4684:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
    4688:	469d      	mov	sp, r3

	if (offset + len > sizeof(value) + 1) {
    468a:	1903      	adds	r3, r0, r4
    468c:	2b07      	cmp	r3, #7
    468e:	dc0a      	bgt.n	46a6 <write_value+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(text + offset, buf, len);
    4690:	4622      	mov	r2, r4
    4692:	4468      	add	r0, sp
    4694:	f01d f8a7 	bl	217e6 <memcpy>
	printk("got %s\n", text);
    4698:	4804      	ldr	r0, [pc, #16]	; (46ac <write_value+0x38>)
    469a:	4669      	mov	r1, sp
    469c:	f01b f82b 	bl	1f6f6 <printk>
	return len;
}
    46a0:	4620      	mov	r0, r4
    46a2:	46bd      	mov	sp, r7
    46a4:	bd98      	pop	{r3, r4, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    46a6:	f06f 0406 	mvn.w	r4, #6
    46aa:	e7f9      	b.n	46a0 <write_value+0x2c>
    46ac:	00026c87 	.word	0x00026c87

000046b0 <connect>:
int connect(bt_addr_le_t* addr, struct remote_device* device) {
    46b0:	b5f0      	push	{r4, r5, r6, r7, lr}
                            , BT_CONN_LE_CREATE_CONN
    46b2:	4c0b      	ldr	r4, [pc, #44]	; (46e0 <connect+0x30>)
int connect(bt_addr_le_t* addr, struct remote_device* device) {
    46b4:	4606      	mov	r6, r0
    46b6:	460f      	mov	r7, r1
                            , BT_CONN_LE_CREATE_CONN
    46b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
int connect(bt_addr_le_t* addr, struct remote_device* device) {
    46bc:	b087      	sub	sp, #28
                            , BT_CONN_LE_CREATE_CONN
    46be:	ad02      	add	r5, sp, #8
    46c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                            , BT_LE_CONN_PARAM_DEFAULT
    46c4:	f854 0f10 	ldr.w	r0, [r4, #16]!
    46c8:	6861      	ldr	r1, [r4, #4]
    46ca:	466b      	mov	r3, sp
    46cc:	c303      	stmia	r3!, {r0, r1}
    return bt_conn_le_create( addr
    46ce:	466a      	mov	r2, sp
    46d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
    46d4:	4629      	mov	r1, r5
    46d6:	4630      	mov	r0, r6
    46d8:	f005 fece 	bl	a478 <bt_conn_le_create>
}
    46dc:	b007      	add	sp, #28
    46de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46e0:	00025150 	.word	0x00025150

000046e4 <register_service>:
int register_service(struct bt_uuid* service, struct bt_uuid* characteristic) {
    46e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    46e8:	4605      	mov	r5, r0
    46ea:	b08c      	sub	sp, #48	; 0x30
    /*
     * Allocate memory for and initialize the characteristic attribute.
     */
    struct bt_gatt_attr* chr_attrs = k_malloc(sizeof(struct bt_gatt_attr) * 3);
    46ec:	203c      	movs	r0, #60	; 0x3c
int register_service(struct bt_uuid* service, struct bt_uuid* characteristic) {
    46ee:	4689      	mov	r9, r1
    struct bt_gatt_attr* chr_attrs = k_malloc(sizeof(struct bt_gatt_attr) * 3);
    46f0:	f01a ff5e 	bl	1f5b0 <k_malloc>
    if(chr_attrs == NULL) {
    46f4:	4604      	mov	r4, r0
    46f6:	b938      	cbnz	r0, 4708 <register_service+0x24>
        printk("Allocating memory for attributes failed\n");
    46f8:	4837      	ldr	r0, [pc, #220]	; (47d8 <register_service+0xf4>)
	/*
	 * Allocate and create custom service
	 */
	struct bt_gatt_service* custom_svc = k_malloc(sizeof(struct bt_gatt_service));
    if(custom_svc == NULL) {
        printk("Could not allocate memory for custom_svc\n");
    46fa:	f01a fffc 	bl	1f6f6 <printk>
        return -1;
    46fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    printk("uuid was: %s\n", str);

	printk("Registering communication service\n");
	return bt_gatt_service_register(custom_svc);
    4702:	b00c      	add	sp, #48	; 0x30
    4704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    struct bt_uuid* gatt_primary = k_malloc(sizeof(struct bt_uuid_16));
    4708:	2004      	movs	r0, #4
    470a:	f01a ff51 	bl	1f5b0 <k_malloc>
    uint8_t uuid_data[2] = { (uint8_t) BT_UUID_GATT_PRIMARY_VAL
    470e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    bt_uuid_create(gatt_primary, uuid_data, 2);
    4712:	2202      	movs	r2, #2
    4714:	a901      	add	r1, sp, #4
    struct bt_uuid* gatt_primary = k_malloc(sizeof(struct bt_uuid_16));
    4716:	4680      	mov	r8, r0
    uint8_t uuid_data[2] = { (uint8_t) BT_UUID_GATT_PRIMARY_VAL
    4718:	f8ad 3004 	strh.w	r3, [sp, #4]
    first->write     = NULL;
    471c:	2600      	movs	r6, #0
    bt_uuid_create(gatt_primary, uuid_data, 2);
    471e:	f01d f95b 	bl	219d8 <bt_uuid_create>
    first->perm      = BT_GATT_PERM_READ;
    4722:	f04f 0a01 	mov.w	sl, #1
    first->read      = bt_gatt_attr_read_service;
    4726:	4b2d      	ldr	r3, [pc, #180]	; (47dc <register_service+0xf8>)
    first->uuid      = gatt_primary;
    4728:	f8c4 8000 	str.w	r8, [r4]
    first->user_data = service;
    472c:	e9c4 6502 	strd	r6, r5, [r4, #8]
    first->perm      = BT_GATT_PERM_READ;
    4730:	f884 a012 	strb.w	sl, [r4, #18]
    first->read      = bt_gatt_attr_read_service;
    4734:	6063      	str	r3, [r4, #4]
    first->handle    = 0;
    4736:	8226      	strh	r6, [r4, #16]
    struct bt_gatt_chrc* chrc = k_malloc(sizeof(struct bt_gatt_chrc));
    4738:	2008      	movs	r0, #8
    473a:	f01a ff39 	bl	1f5b0 <k_malloc>
    if(chrc == NULL) {
    473e:	4605      	mov	r5, r0
    4740:	b908      	cbnz	r0, 4746 <register_service+0x62>
        printk("Allocating memory for chrc failed\n");
    4742:	4827      	ldr	r0, [pc, #156]	; (47e0 <register_service+0xfc>)
    4744:	e7d9      	b.n	46fa <register_service+0x16>
    chrc->properties   = BT_GATT_CHRC_READ | BT_GATT_CHRC_WRITE;
    4746:	230a      	movs	r3, #10
    4748:	7183      	strb	r3, [r0, #6]
    chrc->uuid         = characteristic;
    474a:	f8c0 9000 	str.w	r9, [r0]
    chrc->value_handle = 0U;
    474e:	8086      	strh	r6, [r0, #4]
    struct bt_uuid* gatt_chrc = k_malloc(sizeof(struct bt_uuid_16));
    4750:	2004      	movs	r0, #4
    4752:	f01a ff2d 	bl	1f5b0 <k_malloc>
    uuid_data[0] = (uint8_t) BT_UUID_GATT_CHRC_VAL;
    4756:	f642 0303 	movw	r3, #10243	; 0x2803
    bt_uuid_create(gatt_chrc, uuid_data, 2);
    475a:	2202      	movs	r2, #2
    475c:	a901      	add	r1, sp, #4
    struct bt_uuid* gatt_chrc = k_malloc(sizeof(struct bt_uuid_16));
    475e:	4607      	mov	r7, r0
    uuid_data[0] = (uint8_t) BT_UUID_GATT_CHRC_VAL;
    4760:	f8ad 3004 	strh.w	r3, [sp, #4]
    bt_uuid_create(gatt_chrc, uuid_data, 2);
    4764:	f01d f938 	bl	219d8 <bt_uuid_create>
    second->read      = bt_gatt_attr_read_chrc;
    4768:	4b1e      	ldr	r3, [pc, #120]	; (47e4 <register_service+0x100>)
    second->user_data = chrc;
    476a:	6225      	str	r5, [r4, #32]
    second->write     = NULL;
    476c:	e9c4 3606 	strd	r3, r6, [r4, #24]
    third->perm      = BT_GATT_CHRC_AUTH | BT_GATT_PERM_READ | BT_GATT_PERM_WRITE;
    4770:	2343      	movs	r3, #67	; 0x43
    4772:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    third->read      = read_value;
    4776:	4b1c      	ldr	r3, [pc, #112]	; (47e8 <register_service+0x104>)
    4778:	62e3      	str	r3, [r4, #44]	; 0x2c
    third->write     = write_value;
    477a:	4b1c      	ldr	r3, [pc, #112]	; (47ec <register_service+0x108>)
    477c:	6323      	str	r3, [r4, #48]	; 0x30
    third->user_data = &value;
    477e:	4b1c      	ldr	r3, [pc, #112]	; (47f0 <register_service+0x10c>)
    second->uuid      = gatt_chrc;
    4780:	6167      	str	r7, [r4, #20]
    second->perm      = BT_GATT_PERM_READ;
    4782:	f884 a026 	strb.w	sl, [r4, #38]	; 0x26
    second->handle    = 0;
    4786:	84a6      	strh	r6, [r4, #36]	; 0x24
    third->uuid      = characteristic;
    4788:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
    third->user_data = &value;
    478c:	6363      	str	r3, [r4, #52]	; 0x34
    third->handle    = 0;
    478e:	8726      	strh	r6, [r4, #56]	; 0x38
	struct bt_gatt_service* custom_svc = k_malloc(sizeof(struct bt_gatt_service));
    4790:	200c      	movs	r0, #12
    4792:	f01a ff0d 	bl	1f5b0 <k_malloc>
    if(custom_svc == NULL) {
    4796:	4605      	mov	r5, r0
    4798:	b908      	cbnz	r0, 479e <register_service+0xba>
        printk("Could not allocate memory for custom_svc\n");
    479a:	4816      	ldr	r0, [pc, #88]	; (47f4 <register_service+0x110>)
    479c:	e7ad      	b.n	46fa <register_service+0x16>
    custom_svc->attr_count = 3;
    479e:	2303      	movs	r3, #3
    47a0:	6043      	str	r3, [r0, #4]
    custom_svc->attrs      = chr_attrs;
    47a2:	6004      	str	r4, [r0, #0]
    bt_uuid_to_str(gatt_primary, str, BT_UUID_STR_LEN);
    47a4:	2225      	movs	r2, #37	; 0x25
    47a6:	a902      	add	r1, sp, #8
    47a8:	4640      	mov	r0, r8
    47aa:	f002 febf 	bl	752c <bt_uuid_to_str>
    printk("uuid was: %s\n", str);
    47ae:	a902      	add	r1, sp, #8
    47b0:	4811      	ldr	r0, [pc, #68]	; (47f8 <register_service+0x114>)
    47b2:	f01a ffa0 	bl	1f6f6 <printk>
    bt_uuid_to_str(gatt_chrc, str, BT_UUID_STR_LEN);
    47b6:	2225      	movs	r2, #37	; 0x25
    47b8:	a902      	add	r1, sp, #8
    47ba:	4638      	mov	r0, r7
    47bc:	f002 feb6 	bl	752c <bt_uuid_to_str>
    printk("uuid was: %s\n", str);
    47c0:	a902      	add	r1, sp, #8
    47c2:	480d      	ldr	r0, [pc, #52]	; (47f8 <register_service+0x114>)
    47c4:	f01a ff97 	bl	1f6f6 <printk>
	printk("Registering communication service\n");
    47c8:	480c      	ldr	r0, [pc, #48]	; (47fc <register_service+0x118>)
    47ca:	f01a ff94 	bl	1f6f6 <printk>
	return bt_gatt_service_register(custom_svc);
    47ce:	4628      	mov	r0, r5
    47d0:	f008 f98c 	bl	caec <bt_gatt_service_register>
    47d4:	e795      	b.n	4702 <register_service+0x1e>
    47d6:	bf00      	nop
    47d8:	00026c8f 	.word	0x00026c8f
    47dc:	00022e6b 	.word	0x00022e6b
    47e0:	00026cb8 	.word	0x00026cb8
    47e4:	00022f6d 	.word	0x00022f6d
    47e8:	0001f5e9 	.word	0x0001f5e9
    47ec:	00004675 	.word	0x00004675
    47f0:	20002b14 	.word	0x20002b14
    47f4:	00026cdb 	.word	0x00026cdb
    47f8:	00026d05 	.word	0x00026d05
    47fc:	00026d13 	.word	0x00026d13

00004800 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    4800:	680b      	ldr	r3, [r1, #0]
    4802:	3301      	adds	r3, #1
    4804:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    4806:	4b01      	ldr	r3, [pc, #4]	; (480c <char_out+0xc>)
    4808:	681b      	ldr	r3, [r3, #0]
    480a:	4718      	bx	r3
    480c:	20000150 	.word	0x20000150

00004810 <__printk_hook_install>:
	_char_out = fn;
    4810:	4b01      	ldr	r3, [pc, #4]	; (4818 <__printk_hook_install+0x8>)
    4812:	6018      	str	r0, [r3, #0]
}
    4814:	4770      	bx	lr
    4816:	bf00      	nop
    4818:	20000150 	.word	0x20000150

0000481c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    481c:	b507      	push	{r0, r1, r2, lr}
    481e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    4820:	2100      	movs	r1, #0
{
    4822:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    4824:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    4826:	4803      	ldr	r0, [pc, #12]	; (4834 <vprintk+0x18>)
    4828:	a901      	add	r1, sp, #4
    482a:	f000 fa57 	bl	4cdc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    482e:	b003      	add	sp, #12
    4830:	f85d fb04 	ldr.w	pc, [sp], #4
    4834:	00004801 	.word	0x00004801

00004838 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    4838:	b530      	push	{r4, r5, lr}
    483a:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    483c:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    4840:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    4842:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    4844:	a901      	add	r1, sp, #4
    4846:	4805      	ldr	r0, [pc, #20]	; (485c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    4848:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    484a:	f000 fa47 	bl	4cdc <cbvprintf>

	if (ctx.count < ctx.max) {
    484e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    4852:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    4854:	bfb8      	it	lt
    4856:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    4858:	b005      	add	sp, #20
    485a:	bd30      	pop	{r4, r5, pc}
    485c:	0001f6d1 	.word	0x0001f6d1

00004860 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    4860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4864:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    4868:	f019 0808 	ands.w	r8, r9, #8
{
    486c:	4604      	mov	r4, r0
    486e:	4693      	mov	fp, r2
	if (processing) {
    4870:	d00d      	beq.n	488e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    4872:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    4874:	bf0c      	ite	eq
    4876:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    487a:	f049 0920 	orrne.w	r9, r9, #32
    487e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    4882:	f38b 8811 	msr	BASEPRI, fp
    4886:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    488a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    488e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    4892:	2902      	cmp	r1, #2
    4894:	d107      	bne.n	48a6 <process_event+0x46>
			evt = process_recheck(mgr);
    4896:	4620      	mov	r0, r4
    4898:	f01a ff47 	bl	1f72a <process_recheck>
		if (evt == EVT_NOP) {
    489c:	2800      	cmp	r0, #0
    489e:	d0f0      	beq.n	4882 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    48a0:	2801      	cmp	r0, #1
    48a2:	8b23      	ldrh	r3, [r4, #24]
    48a4:	d150      	bne.n	4948 <process_event+0xe8>
			res = mgr->last_res;
    48a6:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    48a8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    48aa:	2f00      	cmp	r7, #0
    48ac:	da15      	bge.n	48da <process_event+0x7a>
		*clients = mgr->clients;
    48ae:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    48b0:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    48b4:	e9c4 8800 	strd	r8, r8, [r4]
    48b8:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    48bc:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    48be:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    48c0:	8b21      	ldrh	r1, [r4, #24]
    48c2:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    48c6:	45ca      	cmp	sl, r9
    48c8:	d002      	beq.n	48d0 <process_event+0x70>
		if (do_monitors
    48ca:	68a3      	ldr	r3, [r4, #8]
    48cc:	2b00      	cmp	r3, #0
    48ce:	d15c      	bne.n	498a <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    48d0:	b90d      	cbnz	r5, 48d6 <process_event+0x76>
		    || (transit != NULL)) {
    48d2:	2e00      	cmp	r6, #0
    48d4:	d074      	beq.n	49c0 <process_event+0x160>
    48d6:	2300      	movs	r3, #0
    48d8:	e058      	b.n	498c <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    48da:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    48de:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    48e0:	2a01      	cmp	r2, #1
    48e2:	d820      	bhi.n	4926 <process_event+0xc6>
		*clients = mgr->clients;
    48e4:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    48e8:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    48ea:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    48ec:	b289      	uxth	r1, r1
	list->tail = NULL;
    48ee:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    48f2:	d10c      	bne.n	490e <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    48f4:	2d00      	cmp	r5, #0
    48f6:	462b      	mov	r3, r5
    48f8:	bf38      	it	cc
    48fa:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    48fc:	b12b      	cbz	r3, 490a <process_event+0xaa>
				mgr->refs += 1U;
    48fe:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4900:	681b      	ldr	r3, [r3, #0]
    4902:	3201      	adds	r2, #1
    4904:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4906:	2b00      	cmp	r3, #0
    4908:	d1f8      	bne.n	48fc <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    490a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    490e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4910:	4620      	mov	r0, r4
    4912:	f01a ff0a 	bl	1f72a <process_recheck>
    4916:	4606      	mov	r6, r0
    4918:	2800      	cmp	r0, #0
    491a:	d0d1      	beq.n	48c0 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    491c:	8b23      	ldrh	r3, [r4, #24]
    491e:	f043 0320 	orr.w	r3, r3, #32
    4922:	8323      	strh	r3, [r4, #24]
    4924:	e7cb      	b.n	48be <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4926:	2b04      	cmp	r3, #4
    4928:	d10c      	bne.n	4944 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    492a:	f021 0107 	bic.w	r1, r1, #7
    492e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4930:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4932:	4620      	mov	r0, r4
    4934:	f01a fef9 	bl	1f72a <process_recheck>
    4938:	4605      	mov	r5, r0
    493a:	2800      	cmp	r0, #0
    493c:	d0bf      	beq.n	48be <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    493e:	f041 0120 	orr.w	r1, r1, #32
    4942:	8321      	strh	r1, [r4, #24]
    4944:	2500      	movs	r5, #0
    4946:	e7ba      	b.n	48be <process_event+0x5e>
		} else if (evt == EVT_START) {
    4948:	2803      	cmp	r0, #3
    494a:	d109      	bne.n	4960 <process_event+0x100>
			transit = mgr->transitions->start;
    494c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    494e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    4952:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4954:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    4958:	8323      	strh	r3, [r4, #24]
}
    495a:	2500      	movs	r5, #0
		res = 0;
    495c:	462f      	mov	r7, r5
    495e:	e7af      	b.n	48c0 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    4960:	2804      	cmp	r0, #4
    4962:	d106      	bne.n	4972 <process_event+0x112>
			transit = mgr->transitions->stop;
    4964:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4966:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    496a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    496c:	f043 0304 	orr.w	r3, r3, #4
    4970:	e7f2      	b.n	4958 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    4972:	2805      	cmp	r0, #5
    4974:	d106      	bne.n	4984 <process_event+0x124>
			transit = mgr->transitions->reset;
    4976:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4978:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    497c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    497e:	f043 0305 	orr.w	r3, r3, #5
    4982:	e7e9      	b.n	4958 <process_event+0xf8>
    4984:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    4986:	462e      	mov	r6, r5
    4988:	e7e8      	b.n	495c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    498a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    498c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    4990:	8321      	strh	r1, [r4, #24]
    4992:	f38b 8811 	msr	BASEPRI, fp
    4996:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    499a:	bb03      	cbnz	r3, 49de <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    499c:	2d00      	cmp	r5, #0
    499e:	d133      	bne.n	4a08 <process_event+0x1a8>
			if (transit != NULL) {
    49a0:	b116      	cbz	r6, 49a8 <process_event+0x148>
				transit(mgr, transition_complete);
    49a2:	4921      	ldr	r1, [pc, #132]	; (4a28 <process_event+0x1c8>)
    49a4:	4620      	mov	r0, r4
    49a6:	47b0      	blx	r6
	__asm__ volatile(
    49a8:	f04f 0320 	mov.w	r3, #32
    49ac:	f3ef 8b11 	mrs	fp, BASEPRI
    49b0:	f383 8811 	msr	BASEPRI, r3
    49b4:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    49b8:	8b23      	ldrh	r3, [r4, #24]
    49ba:	f023 0308 	bic.w	r3, r3, #8
    49be:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    49c0:	8b23      	ldrh	r3, [r4, #24]
    49c2:	06da      	lsls	r2, r3, #27
    49c4:	d528      	bpl.n	4a18 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    49c6:	f023 0310 	bic.w	r3, r3, #16
    49ca:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    49cc:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    49ce:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    49d2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    49d6:	2900      	cmp	r1, #0
    49d8:	f47f af5b 	bne.w	4892 <process_event+0x32>
out:
    49dc:	e751      	b.n	4882 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    49de:	68a1      	ldr	r1, [r4, #8]
    49e0:	2900      	cmp	r1, #0
    49e2:	d0db      	beq.n	499c <process_event+0x13c>
	return node->next;
    49e4:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    49e6:	f8d1 b004 	ldr.w	fp, [r1, #4]
    49ea:	2b00      	cmp	r3, #0
    49ec:	bf38      	it	cc
    49ee:	2300      	movcc	r3, #0
    49f0:	4699      	mov	r9, r3
    49f2:	4652      	mov	r2, sl
    49f4:	463b      	mov	r3, r7
    49f6:	4620      	mov	r0, r4
    49f8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    49fa:	f1b9 0f00 	cmp.w	r9, #0
    49fe:	d0cd      	beq.n	499c <process_event+0x13c>
    4a00:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4a04:	4649      	mov	r1, r9
    4a06:	e7ee      	b.n	49e6 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4a08:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    4a0a:	463b      	mov	r3, r7
    4a0c:	4652      	mov	r2, sl
    4a0e:	4620      	mov	r0, r4
    4a10:	682d      	ldr	r5, [r5, #0]
    4a12:	f01a fea6 	bl	1f762 <notify_one>
    4a16:	e7c1      	b.n	499c <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    4a18:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    4a1c:	bf1e      	ittt	ne
    4a1e:	f023 0320 	bicne.w	r3, r3, #32
    4a22:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    4a24:	2102      	movne	r1, #2
    4a26:	e7d2      	b.n	49ce <process_event+0x16e>
    4a28:	0001f78f 	.word	0x0001f78f

00004a2c <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    4a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	*conv = (struct conversion) {
    4a2e:	2200      	movs	r2, #0
    4a30:	e9c0 2200 	strd	r2, r2, [r0]
    4a34:	6082      	str	r2, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    4a36:	784a      	ldrb	r2, [r1, #1]
    4a38:	2a25      	cmp	r2, #37	; 0x25
{
    4a3a:	4603      	mov	r3, r0
	if (*sp == '%') {
    4a3c:	d033      	beq.n	4aa6 <extract_conversion+0x7a>
	++sp;
    4a3e:	3101      	adds	r1, #1
    4a40:	4608      	mov	r0, r1
		switch (*sp) {
    4a42:	f811 2b01 	ldrb.w	r2, [r1], #1
    4a46:	2a2b      	cmp	r2, #43	; 0x2b
    4a48:	d03d      	beq.n	4ac6 <extract_conversion+0x9a>
    4a4a:	d82f      	bhi.n	4aac <extract_conversion+0x80>
    4a4c:	2a20      	cmp	r2, #32
    4a4e:	d03e      	beq.n	4ace <extract_conversion+0xa2>
    4a50:	2a23      	cmp	r2, #35	; 0x23
    4a52:	d040      	beq.n	4ad6 <extract_conversion+0xaa>
	if (conv->flag_zero && conv->flag_dash) {
    4a54:	781a      	ldrb	r2, [r3, #0]
    4a56:	f002 0144 	and.w	r1, r2, #68	; 0x44
    4a5a:	2944      	cmp	r1, #68	; 0x44
    4a5c:	d102      	bne.n	4a64 <extract_conversion+0x38>
		conv->flag_zero = false;
    4a5e:	f36f 1286 	bfc	r2, #6, #1
    4a62:	701a      	strb	r2, [r3, #0]
	if (*sp == '*') {
    4a64:	7802      	ldrb	r2, [r0, #0]
    4a66:	2a2a      	cmp	r2, #42	; 0x2a
    4a68:	d14c      	bne.n	4b04 <extract_conversion+0xd8>
		conv->width_present = true;
    4a6a:	8819      	ldrh	r1, [r3, #0]
    4a6c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
    4a70:	1c42      	adds	r2, r0, #1
    4a72:	8019      	strh	r1, [r3, #0]
	if (*sp != '.') {
    4a74:	7811      	ldrb	r1, [r2, #0]
    4a76:	292e      	cmp	r1, #46	; 0x2e
    4a78:	d14f      	bne.n	4b1a <extract_conversion+0xee>
	if (*sp == '*') {
    4a7a:	7851      	ldrb	r1, [r2, #1]
    4a7c:	292a      	cmp	r1, #42	; 0x2a
    4a7e:	d045      	beq.n	4b0c <extract_conversion+0xe0>
    4a80:	3201      	adds	r2, #1
	const char *sp = *str;
    4a82:	4615      	mov	r5, r2
	size_t val = 0;
    4a84:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    4a86:	270a      	movs	r7, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    4a88:	4610      	mov	r0, r2
    4a8a:	f810 4b01 	ldrb.w	r4, [r0], #1
    4a8e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    4a92:	2e09      	cmp	r6, #9
    4a94:	d964      	bls.n	4b60 <extract_conversion+0x134>
	if (sp != wp) {
    4a96:	4295      	cmp	r5, r2
		conv->prec_present = true;
    4a98:	bf1f      	itttt	ne
    4a9a:	7858      	ldrbne	r0, [r3, #1]
		conv->prec_value = prec;
    4a9c:	6099      	strne	r1, [r3, #8]
		conv->prec_present = true;
    4a9e:	f040 0002 	orrne.w	r0, r0, #2
    4aa2:	7058      	strbne	r0, [r3, #1]
		if (prec != conv->prec_value) {
    4aa4:	e039      	b.n	4b1a <extract_conversion+0xee>
		conv->specifier = *sp++;
    4aa6:	1c88      	adds	r0, r1, #2
    4aa8:	70da      	strb	r2, [r3, #3]
	sp = extract_prec(conv, sp);
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    4aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (*sp) {
    4aac:	2a2d      	cmp	r2, #45	; 0x2d
    4aae:	d005      	beq.n	4abc <extract_conversion+0x90>
    4ab0:	2a30      	cmp	r2, #48	; 0x30
    4ab2:	d1cf      	bne.n	4a54 <extract_conversion+0x28>
			conv->flag_zero = true;
    4ab4:	781a      	ldrb	r2, [r3, #0]
    4ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    4aba:	e002      	b.n	4ac2 <extract_conversion+0x96>
			conv->flag_dash = true;
    4abc:	781a      	ldrb	r2, [r3, #0]
    4abe:	f042 0204 	orr.w	r2, r2, #4
			conv->flag_zero = true;
    4ac2:	701a      	strb	r2, [r3, #0]
			break;
    4ac4:	e7bc      	b.n	4a40 <extract_conversion+0x14>
			conv->flag_plus = true;
    4ac6:	781a      	ldrb	r2, [r3, #0]
    4ac8:	f042 0208 	orr.w	r2, r2, #8
    4acc:	e7f9      	b.n	4ac2 <extract_conversion+0x96>
			conv->flag_space = true;
    4ace:	781a      	ldrb	r2, [r3, #0]
    4ad0:	f042 0210 	orr.w	r2, r2, #16
    4ad4:	e7f5      	b.n	4ac2 <extract_conversion+0x96>
			conv->flag_hash = true;
    4ad6:	781a      	ldrb	r2, [r3, #0]
    4ad8:	f042 0220 	orr.w	r2, r2, #32
    4adc:	e7f1      	b.n	4ac2 <extract_conversion+0x96>
		val = 10U * val + *sp++ - '0';
    4ade:	fb07 5101 	mla	r1, r7, r1, r5
    4ae2:	3930      	subs	r1, #48	; 0x30
    4ae4:	4622      	mov	r2, r4
    4ae6:	4614      	mov	r4, r2
    4ae8:	f814 5b01 	ldrb.w	r5, [r4], #1
    4aec:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    4af0:	2e09      	cmp	r6, #9
    4af2:	d9f4      	bls.n	4ade <extract_conversion+0xb2>
	if (sp != wp) {
    4af4:	4290      	cmp	r0, r2
		conv->width_present = true;
    4af6:	bf1f      	itttt	ne
    4af8:	7818      	ldrbne	r0, [r3, #0]
		conv->width_value = width;
    4afa:	6059      	strne	r1, [r3, #4]
		conv->width_present = true;
    4afc:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
    4b00:	7018      	strbne	r0, [r3, #0]
		if (width != conv->width_value) {
    4b02:	e7b7      	b.n	4a74 <extract_conversion+0x48>
    4b04:	4602      	mov	r2, r0
	size_t val = 0;
    4b06:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    4b08:	270a      	movs	r7, #10
    4b0a:	e7ec      	b.n	4ae6 <extract_conversion+0xba>
		conv->prec_present = true;
    4b0c:	7859      	ldrb	r1, [r3, #1]
    4b0e:	f021 0106 	bic.w	r1, r1, #6
    4b12:	f041 0106 	orr.w	r1, r1, #6
    4b16:	7059      	strb	r1, [r3, #1]
		return ++sp;
    4b18:	3202      	adds	r2, #2
	switch (*sp) {
    4b1a:	4611      	mov	r1, r2
    4b1c:	f811 0b01 	ldrb.w	r0, [r1], #1
    4b20:	286c      	cmp	r0, #108	; 0x6c
    4b22:	d039      	beq.n	4b98 <extract_conversion+0x16c>
    4b24:	d821      	bhi.n	4b6a <extract_conversion+0x13e>
    4b26:	2868      	cmp	r0, #104	; 0x68
    4b28:	d026      	beq.n	4b78 <extract_conversion+0x14c>
    4b2a:	286a      	cmp	r0, #106	; 0x6a
    4b2c:	d03d      	beq.n	4baa <extract_conversion+0x17e>
    4b2e:	284c      	cmp	r0, #76	; 0x4c
    4b30:	d041      	beq.n	4bb6 <extract_conversion+0x18a>
    4b32:	4611      	mov	r1, r2
	conv->specifier = *sp++;
    4b34:	4608      	mov	r0, r1
    4b36:	f810 4b01 	ldrb.w	r4, [r0], #1
    4b3a:	70dc      	strb	r4, [r3, #3]
	switch (conv->specifier) {
    4b3c:	2c78      	cmp	r4, #120	; 0x78
    4b3e:	f200 80c6 	bhi.w	4cce <extract_conversion+0x2a2>
    4b42:	2c57      	cmp	r4, #87	; 0x57
    4b44:	d842      	bhi.n	4bcc <extract_conversion+0x1a0>
    4b46:	2c41      	cmp	r4, #65	; 0x41
    4b48:	d003      	beq.n	4b52 <extract_conversion+0x126>
    4b4a:	3c45      	subs	r4, #69	; 0x45
    4b4c:	2c02      	cmp	r4, #2
    4b4e:	f200 80be 	bhi.w	4cce <extract_conversion+0x2a2>
		conv->specifier_cat = SPECIFIER_FP;
    4b52:	789a      	ldrb	r2, [r3, #2]
    4b54:	2104      	movs	r1, #4
    4b56:	f361 0202 	bfi	r2, r1, #0, #3
    4b5a:	709a      	strb	r2, [r3, #2]
			unsupported = true;
    4b5c:	2201      	movs	r2, #1
			break;
    4b5e:	e092      	b.n	4c86 <extract_conversion+0x25a>
		val = 10U * val + *sp++ - '0';
    4b60:	fb07 4101 	mla	r1, r7, r1, r4
    4b64:	3930      	subs	r1, #48	; 0x30
    4b66:	4602      	mov	r2, r0
    4b68:	e78e      	b.n	4a88 <extract_conversion+0x5c>
	switch (*sp) {
    4b6a:	2874      	cmp	r0, #116	; 0x74
    4b6c:	d020      	beq.n	4bb0 <extract_conversion+0x184>
    4b6e:	287a      	cmp	r0, #122	; 0x7a
    4b70:	d1df      	bne.n	4b32 <extract_conversion+0x106>
		conv->length_mod = LENGTH_Z;
    4b72:	785a      	ldrb	r2, [r3, #1]
    4b74:	2006      	movs	r0, #6
    4b76:	e00b      	b.n	4b90 <extract_conversion+0x164>
		if (*++sp == 'h') {
    4b78:	7850      	ldrb	r0, [r2, #1]
    4b7a:	785c      	ldrb	r4, [r3, #1]
    4b7c:	2868      	cmp	r0, #104	; 0x68
    4b7e:	d105      	bne.n	4b8c <extract_conversion+0x160>
			conv->length_mod = LENGTH_HH;
    4b80:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    4b82:	f361 04c6 	bfi	r4, r1, #3, #4
    4b86:	705c      	strb	r4, [r3, #1]
			++sp;
    4b88:	1c91      	adds	r1, r2, #2
    4b8a:	e7d3      	b.n	4b34 <extract_conversion+0x108>
			conv->length_mod = LENGTH_H;
    4b8c:	4622      	mov	r2, r4
    4b8e:	2002      	movs	r0, #2
		conv->length_mod = LENGTH_T;
    4b90:	f360 02c6 	bfi	r2, r0, #3, #4
    4b94:	705a      	strb	r2, [r3, #1]
		break;
    4b96:	e7cd      	b.n	4b34 <extract_conversion+0x108>
		if (*++sp == 'l') {
    4b98:	7850      	ldrb	r0, [r2, #1]
    4b9a:	785c      	ldrb	r4, [r3, #1]
    4b9c:	286c      	cmp	r0, #108	; 0x6c
    4b9e:	d101      	bne.n	4ba4 <extract_conversion+0x178>
			conv->length_mod = LENGTH_LL;
    4ba0:	2104      	movs	r1, #4
    4ba2:	e7ee      	b.n	4b82 <extract_conversion+0x156>
			conv->length_mod = LENGTH_L;
    4ba4:	4622      	mov	r2, r4
    4ba6:	2003      	movs	r0, #3
    4ba8:	e7f2      	b.n	4b90 <extract_conversion+0x164>
		conv->length_mod = LENGTH_J;
    4baa:	785a      	ldrb	r2, [r3, #1]
    4bac:	2005      	movs	r0, #5
    4bae:	e7ef      	b.n	4b90 <extract_conversion+0x164>
		conv->length_mod = LENGTH_T;
    4bb0:	785a      	ldrb	r2, [r3, #1]
    4bb2:	2007      	movs	r0, #7
    4bb4:	e7ec      	b.n	4b90 <extract_conversion+0x164>
		conv->unsupported = true;
    4bb6:	881a      	ldrh	r2, [r3, #0]
    4bb8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    4bbc:	f022 0202 	bic.w	r2, r2, #2
    4bc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    4bc4:	f042 0202 	orr.w	r2, r2, #2
    4bc8:	801a      	strh	r2, [r3, #0]
		break;
    4bca:	e7b3      	b.n	4b34 <extract_conversion+0x108>
    4bcc:	f1a4 0258 	sub.w	r2, r4, #88	; 0x58
    4bd0:	2a20      	cmp	r2, #32
    4bd2:	d87c      	bhi.n	4cce <extract_conversion+0x2a2>
    4bd4:	a101      	add	r1, pc, #4	; (adr r1, 4bdc <extract_conversion+0x1b0>)
    4bd6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4bda:	bf00      	nop
    4bdc:	00004c97 	.word	0x00004c97
    4be0:	00004ccf 	.word	0x00004ccf
    4be4:	00004ccf 	.word	0x00004ccf
    4be8:	00004ccf 	.word	0x00004ccf
    4bec:	00004ccf 	.word	0x00004ccf
    4bf0:	00004ccf 	.word	0x00004ccf
    4bf4:	00004ccf 	.word	0x00004ccf
    4bf8:	00004ccf 	.word	0x00004ccf
    4bfc:	00004ccf 	.word	0x00004ccf
    4c00:	00004b53 	.word	0x00004b53
    4c04:	00004ccf 	.word	0x00004ccf
    4c08:	00004c97 	.word	0x00004c97
    4c0c:	00004c61 	.word	0x00004c61
    4c10:	00004b53 	.word	0x00004b53
    4c14:	00004b53 	.word	0x00004b53
    4c18:	00004b53 	.word	0x00004b53
    4c1c:	00004ccf 	.word	0x00004ccf
    4c20:	00004c61 	.word	0x00004c61
    4c24:	00004ccf 	.word	0x00004ccf
    4c28:	00004ccf 	.word	0x00004ccf
    4c2c:	00004ccf 	.word	0x00004ccf
    4c30:	00004ccf 	.word	0x00004ccf
    4c34:	00004c9d 	.word	0x00004c9d
    4c38:	00004c97 	.word	0x00004c97
    4c3c:	00004cb7 	.word	0x00004cb7
    4c40:	00004ccf 	.word	0x00004ccf
    4c44:	00004ccf 	.word	0x00004ccf
    4c48:	00004cb7 	.word	0x00004cb7
    4c4c:	00004ccf 	.word	0x00004ccf
    4c50:	00004c97 	.word	0x00004c97
    4c54:	00004ccf 	.word	0x00004ccf
    4c58:	00004ccf 	.word	0x00004ccf
    4c5c:	00004c97 	.word	0x00004c97
		conv->specifier_cat = SPECIFIER_SINT;
    4c60:	789a      	ldrb	r2, [r3, #2]
    4c62:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    4c64:	f361 0202 	bfi	r2, r1, #0, #3
    4c68:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    4c6a:	785a      	ldrb	r2, [r3, #1]
    4c6c:	f002 0278 	and.w	r2, r2, #120	; 0x78
    4c70:	2a40      	cmp	r2, #64	; 0x40
			conv->invalid = true;
    4c72:	bf02      	ittt	eq
    4c74:	7819      	ldrbeq	r1, [r3, #0]
    4c76:	f041 0101 	orreq.w	r1, r1, #1
    4c7a:	7019      	strbeq	r1, [r3, #0]
		if (conv->specifier == 'c') {
    4c7c:	2c63      	cmp	r4, #99	; 0x63
    4c7e:	d12a      	bne.n	4cd6 <extract_conversion+0x2aa>
			unsupported = (conv->length_mod != LENGTH_NONE);
    4c80:	3a00      	subs	r2, #0
    4c82:	bf18      	it	ne
    4c84:	2201      	movne	r2, #1
	conv->unsupported |= unsupported;
    4c86:	7819      	ldrb	r1, [r3, #0]
    4c88:	f3c1 0440 	ubfx	r4, r1, #1, #1
    4c8c:	4322      	orrs	r2, r4
    4c8e:	f362 0141 	bfi	r1, r2, #1, #1
    4c92:	7019      	strb	r1, [r3, #0]
	return sp;
    4c94:	e709      	b.n	4aaa <extract_conversion+0x7e>
		conv->specifier_cat = SPECIFIER_UINT;
    4c96:	789a      	ldrb	r2, [r3, #2]
    4c98:	2102      	movs	r1, #2
    4c9a:	e7e3      	b.n	4c64 <extract_conversion+0x238>
		conv->specifier_cat = SPECIFIER_PTR;
    4c9c:	789a      	ldrb	r2, [r3, #2]
    4c9e:	2103      	movs	r1, #3
    4ca0:	f361 0202 	bfi	r2, r1, #0, #3
    4ca4:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    4ca6:	785a      	ldrb	r2, [r3, #1]
    4ca8:	f002 0278 	and.w	r2, r2, #120	; 0x78
    4cac:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
    4cb0:	424a      	negs	r2, r1
    4cb2:	414a      	adcs	r2, r1
    4cb4:	e7e7      	b.n	4c86 <extract_conversion+0x25a>
		conv->specifier_cat = SPECIFIER_PTR;
    4cb6:	789a      	ldrb	r2, [r3, #2]
    4cb8:	2103      	movs	r1, #3
    4cba:	f361 0202 	bfi	r2, r1, #0, #3
    4cbe:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod != LENGTH_NONE) {
    4cc0:	785a      	ldrb	r2, [r3, #1]
    4cc2:	f012 0f78 	tst.w	r2, #120	; 0x78
    4cc6:	bf14      	ite	ne
    4cc8:	2201      	movne	r2, #1
    4cca:	2200      	moveq	r2, #0
    4ccc:	e7db      	b.n	4c86 <extract_conversion+0x25a>
		conv->invalid = true;
    4cce:	781a      	ldrb	r2, [r3, #0]
    4cd0:	f042 0201 	orr.w	r2, r2, #1
    4cd4:	701a      	strb	r2, [r3, #0]
	bool unsupported = false;
    4cd6:	2200      	movs	r2, #0
    4cd8:	e7d5      	b.n	4c86 <extract_conversion+0x25a>
    4cda:	bf00      	nop

00004cdc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    4cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ce0:	4682      	mov	sl, r0
    4ce2:	b091      	sub	sp, #68	; 0x44
    4ce4:	468b      	mov	fp, r1
    4ce6:	4691      	mov	r9, r2
    4ce8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    4cea:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    4cec:	f899 0000 	ldrb.w	r0, [r9]
    4cf0:	b908      	cbnz	r0, 4cf6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    4cf2:	4628      	mov	r0, r5
    4cf4:	e10d      	b.n	4f12 <cbvprintf+0x236>
		if (*fp != '%') {
    4cf6:	2825      	cmp	r0, #37	; 0x25
    4cf8:	d009      	beq.n	4d0e <cbvprintf+0x32>
			OUTC(*fp++);
    4cfa:	4659      	mov	r1, fp
    4cfc:	47d0      	blx	sl
    4cfe:	2800      	cmp	r0, #0
    4d00:	f2c0 8107 	blt.w	4f12 <cbvprintf+0x236>
    4d04:	f109 0301 	add.w	r3, r9, #1
    4d08:	9302      	str	r3, [sp, #8]
			OUTC('%');
    4d0a:	3501      	adds	r5, #1
			break;
    4d0c:	e05e      	b.n	4dcc <cbvprintf+0xf0>
		} state = {
    4d0e:	2218      	movs	r2, #24
    4d10:	2100      	movs	r1, #0
    4d12:	a80a      	add	r0, sp, #40	; 0x28
    4d14:	f01c fd92 	bl	2183c <memset>
		fp = extract_conversion(conv, sp);
    4d18:	4649      	mov	r1, r9
    4d1a:	a80c      	add	r0, sp, #48	; 0x30
    4d1c:	f7ff fe86 	bl	4a2c <extract_conversion>
		if (conv->width_star) {
    4d20:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
		fp = extract_conversion(conv, sp);
    4d24:	9002      	str	r0, [sp, #8]
		if (conv->width_star) {
    4d26:	07d9      	lsls	r1, r3, #31
    4d28:	d51b      	bpl.n	4d62 <cbvprintf+0x86>
			width = va_arg(ap, int);
    4d2a:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    4d2e:	f1b8 0f00 	cmp.w	r8, #0
    4d32:	da07      	bge.n	4d44 <cbvprintf+0x68>
				conv->flag_dash = true;
    4d34:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    4d38:	f042 0204 	orr.w	r2, r2, #4
    4d3c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    4d40:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    4d44:	075a      	lsls	r2, r3, #29
    4d46:	d515      	bpl.n	4d74 <cbvprintf+0x98>
			int arg = va_arg(ap, int);
    4d48:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    4d4c:	2f00      	cmp	r7, #0
    4d4e:	da14      	bge.n	4d7a <cbvprintf+0x9e>
				conv->prec_present = false;
    4d50:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    4d54:	f36f 0341 	bfc	r3, #1, #1
    4d58:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    4d5c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    4d60:	e00b      	b.n	4d7a <cbvprintf+0x9e>
		} else if (conv->width_present) {
    4d62:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    4d66:	2a00      	cmp	r2, #0
			width = conv->width_value;
    4d68:	bfb4      	ite	lt
    4d6a:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
		int width = -1;
    4d6e:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    4d72:	e7e7      	b.n	4d44 <cbvprintf+0x68>
		} else if (conv->prec_present) {
    4d74:	079f      	lsls	r7, r3, #30
    4d76:	d5f1      	bpl.n	4d5c <cbvprintf+0x80>
			precision = conv->prec_value;
    4d78:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    4d7a:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    4d7e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    4d80:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    4d84:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    4d88:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    4d8c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    4d8e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    4d92:	d12e      	bne.n	4df2 <cbvprintf+0x116>
			switch (length_mod) {
    4d94:	1ecb      	subs	r3, r1, #3
    4d96:	2b04      	cmp	r3, #4
    4d98:	d81b      	bhi.n	4dd2 <cbvprintf+0xf6>
    4d9a:	e8df f003 	tbb	[pc, r3]
    4d9e:	3a03      	.short	0x3a03
    4da0:	1a3a      	.short	0x1a3a
    4da2:	1a          	.byte	0x1a
    4da3:	00          	.byte	0x00
				value->sint = va_arg(ap, long);
    4da4:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    4da8:	17d3      	asrs	r3, r2, #31
				value->uint =
    4daa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    4dae:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    4db2:	f013 0603 	ands.w	r6, r3, #3
    4db6:	d04f      	beq.n	4e58 <cbvprintf+0x17c>
			OUTS(sp, fp);
    4db8:	9b02      	ldr	r3, [sp, #8]
    4dba:	464a      	mov	r2, r9
    4dbc:	4659      	mov	r1, fp
    4dbe:	4650      	mov	r0, sl
    4dc0:	f01b f803 	bl	1fdca <outs>
    4dc4:	2800      	cmp	r0, #0
    4dc6:	f2c0 80a4 	blt.w	4f12 <cbvprintf+0x236>
    4dca:	4405      	add	r5, r0
			OUTS(bps, bpe);
    4dcc:	f8dd 9008 	ldr.w	r9, [sp, #8]
    4dd0:	e78c      	b.n	4cec <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4dd2:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    4dd6:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4dd8:	ea4f 73e2 	mov.w	r3, r2, asr #31
    4ddc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    4de0:	d102      	bne.n	4de8 <cbvprintf+0x10c>
				value->uint = (unsigned char)value->uint;
    4de2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    4de6:	e010      	b.n	4e0a <cbvprintf+0x12e>
			} else if (length_mod == LENGTH_H) {
    4de8:	2902      	cmp	r1, #2
    4dea:	d1e0      	bne.n	4dae <cbvprintf+0xd2>
				value->sint = (short)value->sint;
    4dec:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
    4df0:	e7da      	b.n	4da8 <cbvprintf+0xcc>
		} else if (specifier_cat == SPECIFIER_UINT) {
    4df2:	2b02      	cmp	r3, #2
    4df4:	d120      	bne.n	4e38 <cbvprintf+0x15c>
			switch (length_mod) {
    4df6:	1ecb      	subs	r3, r1, #3
    4df8:	2b04      	cmp	r3, #4
    4dfa:	d810      	bhi.n	4e1e <cbvprintf+0x142>
    4dfc:	e8df f003 	tbb	[pc, r3]
    4e00:	0f090903 	.word	0x0f090903
    4e04:	0f          	.byte	0x0f
    4e05:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned long);
    4e06:	f854 3b04 	ldr.w	r3, [r4], #4
				value->uint = (unsigned char)value->uint;
    4e0a:	930a      	str	r3, [sp, #40]	; 0x28
    4e0c:	2300      	movs	r3, #0
    4e0e:	930b      	str	r3, [sp, #44]	; 0x2c
    4e10:	e7cd      	b.n	4dae <cbvprintf+0xd2>
					(uint_value_type)va_arg(ap,
    4e12:	3407      	adds	r4, #7
    4e14:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    4e18:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    4e1c:	e7c5      	b.n	4daa <cbvprintf+0xce>
					(uint_value_type)va_arg(ap, size_t);
    4e1e:	f854 3b04 	ldr.w	r3, [r4], #4
    4e22:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    4e24:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    4e26:	f04f 0300 	mov.w	r3, #0
    4e2a:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    4e2c:	d0d9      	beq.n	4de2 <cbvprintf+0x106>
			} else if (length_mod == LENGTH_H) {
    4e2e:	2902      	cmp	r1, #2
    4e30:	d1bd      	bne.n	4dae <cbvprintf+0xd2>
				value->uint = (unsigned short)value->uint;
    4e32:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    4e36:	e7e8      	b.n	4e0a <cbvprintf+0x12e>
		} else if (specifier_cat == SPECIFIER_FP) {
    4e38:	2b04      	cmp	r3, #4
    4e3a:	d107      	bne.n	4e4c <cbvprintf+0x170>
			if (length_mod == LENGTH_UPPER_L) {
    4e3c:	3407      	adds	r4, #7
    4e3e:	f024 0407 	bic.w	r4, r4, #7
    4e42:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    4e46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    4e4a:	e7b0      	b.n	4dae <cbvprintf+0xd2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    4e4c:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    4e4e:	bf04      	itt	eq
    4e50:	f854 3b04 	ldreq.w	r3, [r4], #4
    4e54:	930a      	streq	r3, [sp, #40]	; 0x28
    4e56:	e7aa      	b.n	4dae <cbvprintf+0xd2>
		switch (conv->specifier) {
    4e58:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    4e5c:	2878      	cmp	r0, #120	; 0x78
    4e5e:	d8b5      	bhi.n	4dcc <cbvprintf+0xf0>
    4e60:	2862      	cmp	r0, #98	; 0x62
    4e62:	d81f      	bhi.n	4ea4 <cbvprintf+0x1c8>
    4e64:	2825      	cmp	r0, #37	; 0x25
    4e66:	d04f      	beq.n	4f08 <cbvprintf+0x22c>
    4e68:	2858      	cmp	r0, #88	; 0x58
    4e6a:	d1af      	bne.n	4dcc <cbvprintf+0xf0>
			bps = encode_uint(value->uint, conv, buf, bpe);
    4e6c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    4e70:	9300      	str	r3, [sp, #0]
    4e72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    4e76:	ab04      	add	r3, sp, #16
    4e78:	aa0c      	add	r2, sp, #48	; 0x30
    4e7a:	f01a ff5b 	bl	1fd34 <encode_uint>
    4e7e:	4681      	mov	r9, r0
			if (precision >= 0) {
    4e80:	2f00      	cmp	r7, #0
    4e82:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    4e86:	db0b      	blt.n	4ea0 <cbvprintf+0x1c4>
				conv->flag_zero = false;
    4e88:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    4e8c:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
    4e90:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    4e94:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    4e96:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    4e9a:	d901      	bls.n	4ea0 <cbvprintf+0x1c4>
					conv->pad0_value = precision - (int)len;
    4e9c:	1aff      	subs	r7, r7, r3
    4e9e:	970d      	str	r7, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    4ea0:	4607      	mov	r7, r0
    4ea2:	e046      	b.n	4f32 <cbvprintf+0x256>
    4ea4:	3863      	subs	r0, #99	; 0x63
    4ea6:	2815      	cmp	r0, #21
    4ea8:	d890      	bhi.n	4dcc <cbvprintf+0xf0>
    4eaa:	a201      	add	r2, pc, #4	; (adr r2, 4eb0 <cbvprintf+0x1d4>)
    4eac:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    4eb0:	00004f3b 	.word	0x00004f3b
    4eb4:	00004f9f 	.word	0x00004f9f
    4eb8:	00004dcd 	.word	0x00004dcd
    4ebc:	00004dcd 	.word	0x00004dcd
    4ec0:	00004dcd 	.word	0x00004dcd
    4ec4:	00004dcd 	.word	0x00004dcd
    4ec8:	00004f9f 	.word	0x00004f9f
    4ecc:	00004dcd 	.word	0x00004dcd
    4ed0:	00004dcd 	.word	0x00004dcd
    4ed4:	00004dcd 	.word	0x00004dcd
    4ed8:	00004dcd 	.word	0x00004dcd
    4edc:	00004ffd 	.word	0x00004ffd
    4ee0:	00004fcb 	.word	0x00004fcb
    4ee4:	00004fcf 	.word	0x00004fcf
    4ee8:	00004dcd 	.word	0x00004dcd
    4eec:	00004dcd 	.word	0x00004dcd
    4ef0:	00004f19 	.word	0x00004f19
    4ef4:	00004dcd 	.word	0x00004dcd
    4ef8:	00004fcb 	.word	0x00004fcb
    4efc:	00004dcd 	.word	0x00004dcd
    4f00:	00004dcd 	.word	0x00004dcd
    4f04:	00004fcb 	.word	0x00004fcb
			OUTC('%');
    4f08:	4659      	mov	r1, fp
    4f0a:	47d0      	blx	sl
    4f0c:	2800      	cmp	r0, #0
    4f0e:	f6bf aefc 	bge.w	4d0a <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
    4f12:	b011      	add	sp, #68	; 0x44
    4f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bps = (const char *)value->ptr;
    4f18:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
			size_t len = strlen(bps);
    4f1c:	4648      	mov	r0, r9
    4f1e:	f01c fc3f 	bl	217a0 <strlen>
			if ((precision >= 0)
    4f22:	2f00      	cmp	r7, #0
    4f24:	db02      	blt.n	4f2c <cbvprintf+0x250>
    4f26:	42b8      	cmp	r0, r7
    4f28:	bf28      	it	cs
    4f2a:	4638      	movcs	r0, r7
			bpe = bps + len;
    4f2c:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
    4f30:	2600      	movs	r6, #0
		if (bps == NULL) {
    4f32:	f1b9 0f00 	cmp.w	r9, #0
    4f36:	d108      	bne.n	4f4a <cbvprintf+0x26e>
    4f38:	e748      	b.n	4dcc <cbvprintf+0xf0>
			buf[0] = value->uint;
    4f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4f3c:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    4f40:	2600      	movs	r6, #0
			bpe = buf + 1;
    4f42:	f10d 0711 	add.w	r7, sp, #17
			bps = buf;
    4f46:	f10d 0910 	add.w	r9, sp, #16
		size_t nj_len = (bpe - bps);
    4f4a:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
    4f4e:	b106      	cbz	r6, 4f52 <cbvprintf+0x276>
			nj_len += 1U;
    4f50:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    4f52:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    4f56:	06d0      	lsls	r0, r2, #27
    4f58:	d56a      	bpl.n	5030 <cbvprintf+0x354>
			nj_len += 2U;
    4f5a:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    4f5c:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    4f5e:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    4f60:	bf48      	it	mi
    4f62:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    4f64:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    4f66:	bf48      	it	mi
    4f68:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    4f6a:	f1b8 0f00 	cmp.w	r8, #0
    4f6e:	dd73      	ble.n	5058 <cbvprintf+0x37c>
			if (!conv->flag_dash) {
    4f70:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    4f74:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    4f78:	f3c2 0380 	ubfx	r3, r2, #2, #1
    4f7c:	9303      	str	r3, [sp, #12]
    4f7e:	0753      	lsls	r3, r2, #29
    4f80:	d46a      	bmi.n	5058 <cbvprintf+0x37c>
				if (conv->flag_zero) {
    4f82:	0650      	lsls	r0, r2, #25
    4f84:	f140 80a6 	bpl.w	50d4 <cbvprintf+0x3f8>
					if (sign != 0) {
    4f88:	b13e      	cbz	r6, 4f9a <cbvprintf+0x2be>
						OUTC(sign);
    4f8a:	4659      	mov	r1, fp
    4f8c:	4630      	mov	r0, r6
    4f8e:	47d0      	blx	sl
    4f90:	2800      	cmp	r0, #0
    4f92:	dbbe      	blt.n	4f12 <cbvprintf+0x236>
						sign = 0;
    4f94:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    4f96:	3501      	adds	r5, #1
						sign = 0;
    4f98:	461e      	mov	r6, r3
					pad = '0';
    4f9a:	2330      	movs	r3, #48	; 0x30
    4f9c:	e09b      	b.n	50d6 <cbvprintf+0x3fa>
			if (conv->flag_plus) {
    4f9e:	071e      	lsls	r6, r3, #28
    4fa0:	d411      	bmi.n	4fc6 <cbvprintf+0x2ea>
				sign = ' ';
    4fa2:	f013 0610 	ands.w	r6, r3, #16
    4fa6:	bf18      	it	ne
    4fa8:	2620      	movne	r6, #32
			if (value->sint < 0) {
    4faa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    4fae:	2a00      	cmp	r2, #0
    4fb0:	f173 0100 	sbcs.w	r1, r3, #0
    4fb4:	f6bf af5a 	bge.w	4e6c <cbvprintf+0x190>
				value->uint = (uint_value_type)-value->sint;
    4fb8:	4252      	negs	r2, r2
    4fba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4fbe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    4fc2:	262d      	movs	r6, #45	; 0x2d
    4fc4:	e752      	b.n	4e6c <cbvprintf+0x190>
				sign = '+';
    4fc6:	262b      	movs	r6, #43	; 0x2b
    4fc8:	e7ef      	b.n	4faa <cbvprintf+0x2ce>
		switch (conv->specifier) {
    4fca:	2600      	movs	r6, #0
    4fcc:	e74e      	b.n	4e6c <cbvprintf+0x190>
			if (value->ptr != NULL) {
    4fce:	980a      	ldr	r0, [sp, #40]	; 0x28
    4fd0:	b348      	cbz	r0, 5026 <cbvprintf+0x34a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    4fd2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    4fd6:	9300      	str	r3, [sp, #0]
    4fd8:	aa0c      	add	r2, sp, #48	; 0x30
    4fda:	ab04      	add	r3, sp, #16
    4fdc:	2100      	movs	r1, #0
    4fde:	f01a fea9 	bl	1fd34 <encode_uint>
				conv->altform_0c = true;
    4fe2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    4fe6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    4fea:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    4fee:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    4ff2:	4681      	mov	r9, r0
				conv->altform_0c = true;
    4ff4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    4ff8:	2600      	movs	r6, #0
				goto prec_int_pad0;
    4ffa:	e741      	b.n	4e80 <cbvprintf+0x1a4>
				store_count(conv, value->ptr, count);
    4ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    4ffe:	2907      	cmp	r1, #7
    5000:	f63f aee4 	bhi.w	4dcc <cbvprintf+0xf0>
    5004:	e8df f001 	tbb	[pc, r1]
    5008:	0d06040d 	.word	0x0d06040d
    500c:	0d0d0808 	.word	0x0d0d0808
		*(signed char *)dp = (signed char)count;
    5010:	701d      	strb	r5, [r3, #0]
		break;
    5012:	e6db      	b.n	4dcc <cbvprintf+0xf0>
		*(short *)dp = (short)count;
    5014:	801d      	strh	r5, [r3, #0]
		break;
    5016:	e6d9      	b.n	4dcc <cbvprintf+0xf0>
		*(intmax_t *)dp = (intmax_t)count;
    5018:	4628      	mov	r0, r5
    501a:	17e9      	asrs	r1, r5, #31
    501c:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    5020:	e6d4      	b.n	4dcc <cbvprintf+0xf0>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    5022:	601d      	str	r5, [r3, #0]
		break;
    5024:	e6d2      	b.n	4dcc <cbvprintf+0xf0>
			bpe = bps + 5;
    5026:	4f31      	ldr	r7, [pc, #196]	; (50ec <cbvprintf+0x410>)
    5028:	4606      	mov	r6, r0
			bps = "(nil)";
    502a:	f1a7 0905 	sub.w	r9, r7, #5
    502e:	e78c      	b.n	4f4a <cbvprintf+0x26e>
		} else if (conv->altform_0) {
    5030:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    5032:	bf48      	it	mi
    5034:	3301      	addmi	r3, #1
    5036:	e791      	b.n	4f5c <cbvprintf+0x280>
					OUTC(pad);
    5038:	4618      	mov	r0, r3
    503a:	4659      	mov	r1, fp
    503c:	9303      	str	r3, [sp, #12]
    503e:	47d0      	blx	sl
    5040:	2800      	cmp	r0, #0
    5042:	9b03      	ldr	r3, [sp, #12]
    5044:	f6ff af65 	blt.w	4f12 <cbvprintf+0x236>
    5048:	4642      	mov	r2, r8
				while (width-- > 0) {
    504a:	2a00      	cmp	r2, #0
    504c:	eba5 0108 	sub.w	r1, r5, r8
    5050:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    5054:	dcf0      	bgt.n	5038 <cbvprintf+0x35c>
    5056:	460d      	mov	r5, r1
		if (sign != 0) {
    5058:	b136      	cbz	r6, 5068 <cbvprintf+0x38c>
			OUTC(sign);
    505a:	4659      	mov	r1, fp
    505c:	4630      	mov	r0, r6
    505e:	47d0      	blx	sl
    5060:	2800      	cmp	r0, #0
    5062:	f6ff af56 	blt.w	4f12 <cbvprintf+0x236>
    5066:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    5068:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    506c:	06d9      	lsls	r1, r3, #27
    506e:	d401      	bmi.n	5074 <cbvprintf+0x398>
    5070:	071a      	lsls	r2, r3, #28
    5072:	d506      	bpl.n	5082 <cbvprintf+0x3a6>
				OUTC('0');
    5074:	4659      	mov	r1, fp
    5076:	2030      	movs	r0, #48	; 0x30
    5078:	47d0      	blx	sl
    507a:	2800      	cmp	r0, #0
    507c:	f6ff af49 	blt.w	4f12 <cbvprintf+0x236>
    5080:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    5082:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    5086:	06db      	lsls	r3, r3, #27
    5088:	d507      	bpl.n	509a <cbvprintf+0x3be>
				OUTC(conv->specifier);
    508a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    508e:	4659      	mov	r1, fp
    5090:	47d0      	blx	sl
    5092:	2800      	cmp	r0, #0
    5094:	f6ff af3d 	blt.w	4f12 <cbvprintf+0x236>
    5098:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    509a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    509c:	442e      	add	r6, r5
    509e:	1b73      	subs	r3, r6, r5
    50a0:	2b00      	cmp	r3, #0
    50a2:	dc1a      	bgt.n	50da <cbvprintf+0x3fe>
			OUTS(bps, bpe);
    50a4:	463b      	mov	r3, r7
    50a6:	464a      	mov	r2, r9
    50a8:	4659      	mov	r1, fp
    50aa:	4650      	mov	r0, sl
    50ac:	f01a fe8d 	bl	1fdca <outs>
    50b0:	2800      	cmp	r0, #0
    50b2:	f6ff af2e 	blt.w	4f12 <cbvprintf+0x236>
    50b6:	4405      	add	r5, r0
		while (width > 0) {
    50b8:	44a8      	add	r8, r5
    50ba:	eba8 0305 	sub.w	r3, r8, r5
    50be:	2b00      	cmp	r3, #0
    50c0:	f77f ae84 	ble.w	4dcc <cbvprintf+0xf0>
			OUTC(' ');
    50c4:	4659      	mov	r1, fp
    50c6:	2020      	movs	r0, #32
    50c8:	47d0      	blx	sl
    50ca:	2800      	cmp	r0, #0
    50cc:	f6ff af21 	blt.w	4f12 <cbvprintf+0x236>
    50d0:	3501      	adds	r5, #1
			--width;
    50d2:	e7f2      	b.n	50ba <cbvprintf+0x3de>
				char pad = ' ';
    50d4:	2320      	movs	r3, #32
    50d6:	4445      	add	r5, r8
    50d8:	e7b6      	b.n	5048 <cbvprintf+0x36c>
				OUTC('0');
    50da:	4659      	mov	r1, fp
    50dc:	2030      	movs	r0, #48	; 0x30
    50de:	47d0      	blx	sl
    50e0:	2800      	cmp	r0, #0
    50e2:	f6ff af16 	blt.w	4f12 <cbvprintf+0x236>
    50e6:	3501      	adds	r5, #1
    50e8:	e7d9      	b.n	509e <cbvprintf+0x3c2>
    50ea:	bf00      	nop
    50ec:	00026d3b 	.word	0x00026d3b

000050f0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    50f0:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    50f2:	4910      	ldr	r1, [pc, #64]	; (5134 <enable_logger+0x44>)
    50f4:	4810      	ldr	r0, [pc, #64]	; (5138 <enable_logger+0x48>)
{
    50f6:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    50f8:	2200      	movs	r2, #0
    50fa:	f01f fcad 	bl	24a58 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    50fe:	4d0f      	ldr	r5, [pc, #60]	; (513c <enable_logger+0x4c>)
    5100:	490f      	ldr	r1, [pc, #60]	; (5140 <enable_logger+0x50>)
    5102:	2200      	movs	r2, #0
    5104:	2300      	movs	r3, #0
    5106:	e9cd 2306 	strd	r2, r3, [sp, #24]
    510a:	2400      	movs	r4, #0
    510c:	230e      	movs	r3, #14
    510e:	e9cd 3403 	strd	r3, r4, [sp, #12]
    5112:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5116:	4b0b      	ldr	r3, [pc, #44]	; (5144 <enable_logger+0x54>)
    5118:	9400      	str	r4, [sp, #0]
    511a:	f44f 7240 	mov.w	r2, #768	; 0x300
    511e:	4628      	mov	r0, r5
    5120:	f019 fece 	bl	1eec0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    5124:	4908      	ldr	r1, [pc, #32]	; (5148 <enable_logger+0x58>)
    5126:	4628      	mov	r0, r5
    5128:	f01f fbaa 	bl	24880 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    512c:	4620      	mov	r0, r4
    512e:	b009      	add	sp, #36	; 0x24
    5130:	bd30      	pop	{r4, r5, pc}
    5132:	bf00      	nop
    5134:	0000514d 	.word	0x0000514d
    5138:	200008d8 	.word	0x200008d8
    513c:	20000910 	.word	0x20000910
    5140:	200030a0 	.word	0x200030a0
    5144:	00005565 	.word	0x00005565
    5148:	00026d3c 	.word	0x00026d3c

0000514c <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    514c:	4801      	ldr	r0, [pc, #4]	; (5154 <log_process_thread_timer_expiry_fn+0x8>)
    514e:	f019 be1d 	b.w	1ed8c <z_impl_k_sem_give>
    5152:	bf00      	nop
    5154:	2000076c 	.word	0x2000076c

00005158 <log_core_init>:
{
    5158:	b508      	push	{r3, lr}
		log_msg_pool_init();
    515a:	f000 fa65 	bl	5628 <log_msg_pool_init>
		log_list_init(&list);
    515e:	4809      	ldr	r0, [pc, #36]	; (5184 <log_core_init+0x2c>)
    5160:	f01a fe4a 	bl	1fdf8 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    5164:	2304      	movs	r3, #4
    5166:	2228      	movs	r2, #40	; 0x28
    5168:	4907      	ldr	r1, [pc, #28]	; (5188 <log_core_init+0x30>)
    516a:	4808      	ldr	r0, [pc, #32]	; (518c <log_core_init+0x34>)
    516c:	f01f f98a 	bl	24484 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    5170:	4b07      	ldr	r3, [pc, #28]	; (5190 <log_core_init+0x38>)
    5172:	4a08      	ldr	r2, [pc, #32]	; (5194 <log_core_init+0x3c>)
    5174:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    5176:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    517a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    517e:	f000 bc99 	b.w	5ab4 <log_output_timestamp_freq_set>
    5182:	bf00      	nop
    5184:	200011ac 	.word	0x200011ac
    5188:	200055e0 	.word	0x200055e0
    518c:	200011b4 	.word	0x200011b4
    5190:	20000154 	.word	0x20000154
    5194:	0001fe37 	.word	0x0001fe37

00005198 <dropped_notify>:
{
    5198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    519a:	4b0f      	ldr	r3, [pc, #60]	; (51d8 <dropped_notify+0x40>)
    519c:	f3bf 8f5b 	dmb	ish
    51a0:	2500      	movs	r5, #0
    51a2:	e853 7f00 	ldrex	r7, [r3]
    51a6:	e843 5200 	strex	r2, r5, [r3]
    51aa:	2a00      	cmp	r2, #0
    51ac:	d1f9      	bne.n	51a2 <dropped_notify+0xa>
    51ae:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    51b2:	4c0a      	ldr	r4, [pc, #40]	; (51dc <dropped_notify+0x44>)
    51b4:	4e0a      	ldr	r6, [pc, #40]	; (51e0 <dropped_notify+0x48>)
    51b6:	1b36      	subs	r6, r6, r4
    51b8:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    51ba:	42b5      	cmp	r5, r6
    51bc:	db00      	blt.n	51c0 <dropped_notify+0x28>
}
    51be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    51c0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    51c2:	795b      	ldrb	r3, [r3, #5]
    51c4:	b12b      	cbz	r3, 51d2 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    51c6:	6823      	ldr	r3, [r4, #0]
    51c8:	68db      	ldr	r3, [r3, #12]
    51ca:	b113      	cbz	r3, 51d2 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    51cc:	4639      	mov	r1, r7
    51ce:	4620      	mov	r0, r4
    51d0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    51d2:	3501      	adds	r5, #1
    51d4:	3410      	adds	r4, #16
    51d6:	e7f0      	b.n	51ba <dropped_notify+0x22>
    51d8:	200011a4 	.word	0x200011a4
    51dc:	00025130 	.word	0x00025130
    51e0:	00025150 	.word	0x00025150

000051e4 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    51e4:	4b06      	ldr	r3, [pc, #24]	; (5200 <log_dropped+0x1c>)
    51e6:	f3bf 8f5b 	dmb	ish
    51ea:	e853 2f00 	ldrex	r2, [r3]
    51ee:	3201      	adds	r2, #1
    51f0:	e843 2100 	strex	r1, r2, [r3]
    51f4:	2900      	cmp	r1, #0
    51f6:	d1f8      	bne.n	51ea <log_dropped+0x6>
    51f8:	f3bf 8f5b 	dmb	ish
}
    51fc:	4770      	bx	lr
    51fe:	bf00      	nop
    5200:	200011a4 	.word	0x200011a4

00005204 <log_source_name_get>:
    5204:	4a04      	ldr	r2, [pc, #16]	; (5218 <log_source_name_get+0x14>)
    5206:	4b05      	ldr	r3, [pc, #20]	; (521c <log_source_name_get+0x18>)
    5208:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    520a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    520e:	bf34      	ite	cc
    5210:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    5214:	2000      	movcs	r0, #0
}
    5216:	4770      	bx	lr
    5218:	00024fd8 	.word	0x00024fd8
    521c:	00025130 	.word	0x00025130

00005220 <log_backend_enable>:
	id += backend - log_backend_get(0);
    5220:	4b09      	ldr	r3, [pc, #36]	; (5248 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    5222:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    5224:	1ac3      	subs	r3, r0, r3
    5226:	111b      	asrs	r3, r3, #4
    5228:	3301      	adds	r3, #1
{
    522a:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    522c:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    522e:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    5230:	4c06      	ldr	r4, [pc, #24]	; (524c <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    5232:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    5234:	2201      	movs	r2, #1
    5236:	715a      	strb	r2, [r3, #5]
    5238:	7822      	ldrb	r2, [r4, #0]
    523a:	b912      	cbnz	r2, 5242 <log_backend_enable+0x22>
    523c:	4804      	ldr	r0, [pc, #16]	; (5250 <log_backend_enable+0x30>)
    523e:	f019 fda5 	bl	1ed8c <z_impl_k_sem_give>
	backend_attached = true;
    5242:	2301      	movs	r3, #1
    5244:	7023      	strb	r3, [r4, #0]
}
    5246:	bd10      	pop	{r4, pc}
    5248:	00025130 	.word	0x00025130
    524c:	20002b1a 	.word	0x20002b1a
    5250:	2000076c 	.word	0x2000076c

00005254 <log_init>:
{
    5254:	b570      	push	{r4, r5, r6, lr}
    5256:	4b11      	ldr	r3, [pc, #68]	; (529c <log_init+0x48>)
    5258:	f3bf 8f5b 	dmb	ish
    525c:	e853 5f00 	ldrex	r5, [r3]
    5260:	1c6a      	adds	r2, r5, #1
    5262:	e843 2100 	strex	r1, r2, [r3]
    5266:	2900      	cmp	r1, #0
    5268:	d1f8      	bne.n	525c <log_init+0x8>
    526a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    526e:	b92d      	cbnz	r5, 527c <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    5270:	4c0b      	ldr	r4, [pc, #44]	; (52a0 <log_init+0x4c>)
    5272:	4e0c      	ldr	r6, [pc, #48]	; (52a4 <log_init+0x50>)
    5274:	1b36      	subs	r6, r6, r4
    5276:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    5278:	42b5      	cmp	r5, r6
    527a:	db00      	blt.n	527e <log_init+0x2a>
}
    527c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    527e:	7b23      	ldrb	r3, [r4, #12]
    5280:	b143      	cbz	r3, 5294 <log_init+0x40>
			if (backend->api->init != NULL) {
    5282:	6823      	ldr	r3, [r4, #0]
    5284:	695b      	ldr	r3, [r3, #20]
    5286:	b103      	cbz	r3, 528a <log_init+0x36>
				backend->api->init();
    5288:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    528a:	2204      	movs	r2, #4
    528c:	2100      	movs	r1, #0
    528e:	4620      	mov	r0, r4
    5290:	f7ff ffc6 	bl	5220 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    5294:	3501      	adds	r5, #1
    5296:	3410      	adds	r4, #16
    5298:	e7ee      	b.n	5278 <log_init+0x24>
    529a:	bf00      	nop
    529c:	200011a8 	.word	0x200011a8
    52a0:	00025130 	.word	0x00025130
    52a4:	00025150 	.word	0x00025150

000052a8 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    52a8:	4b16      	ldr	r3, [pc, #88]	; (5304 <log_strdup+0x5c>)
    52aa:	4298      	cmp	r0, r3
{
    52ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    52ae:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    52b0:	d302      	bcc.n	52b8 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    52b2:	4b15      	ldr	r3, [pc, #84]	; (5308 <log_strdup+0x60>)
    52b4:	4298      	cmp	r0, r3
    52b6:	d320      	bcc.n	52fa <log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    52b8:	4814      	ldr	r0, [pc, #80]	; (530c <log_strdup+0x64>)
    52ba:	2200      	movs	r2, #0
    52bc:	2300      	movs	r3, #0
    52be:	a901      	add	r1, sp, #4
    52c0:	f019 f888 	bl	1e3d4 <k_mem_slab_alloc>
	if (err != 0) {
    52c4:	4605      	mov	r5, r0
    52c6:	b9d8      	cbnz	r0, 5300 <log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    52c8:	2201      	movs	r2, #1
    52ca:	9b01      	ldr	r3, [sp, #4]
    52cc:	f3bf 8f5b 	dmb	ish
    52d0:	e853 1f00 	ldrex	r1, [r3]
    52d4:	e843 2000 	strex	r0, r2, [r3]
    52d8:	2800      	cmp	r0, #0
    52da:	d1f9      	bne.n	52d0 <log_strdup+0x28>
    52dc:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    52e0:	9801      	ldr	r0, [sp, #4]
    52e2:	4621      	mov	r1, r4
    52e4:	221f      	movs	r2, #31
    52e6:	3004      	adds	r0, #4
    52e8:	f01c fa47 	bl	2177a <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    52ec:	9c01      	ldr	r4, [sp, #4]
    52ee:	237e      	movs	r3, #126	; 0x7e
    52f0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    52f4:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    52f8:	3404      	adds	r4, #4
}
    52fa:	4620      	mov	r0, r4
    52fc:	b003      	add	sp, #12
    52fe:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    5300:	4c03      	ldr	r4, [pc, #12]	; (5310 <log_strdup+0x68>)
    5302:	e7fa      	b.n	52fa <log_strdup+0x52>
    5304:	00024d9c 	.word	0x00024d9c
    5308:	00028ac8 	.word	0x00028ac8
    530c:	200011b4 	.word	0x200011b4
    5310:	00026d44 	.word	0x00026d44

00005314 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    5314:	b148      	cbz	r0, 532a <log_is_strdup+0x16>
    5316:	4b05      	ldr	r3, [pc, #20]	; (532c <log_is_strdup+0x18>)
    5318:	4298      	cmp	r0, r3
    531a:	d305      	bcc.n	5328 <log_is_strdup+0x14>
    531c:	33a0      	adds	r3, #160	; 0xa0
    531e:	4298      	cmp	r0, r3
    5320:	bf2c      	ite	cs
    5322:	2000      	movcs	r0, #0
    5324:	2001      	movcc	r0, #1
    5326:	4770      	bx	lr
    5328:	2000      	movs	r0, #0
}
    532a:	4770      	bx	lr
    532c:	200055e0 	.word	0x200055e0

00005330 <z_impl_log_process>:
{
    5330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    5334:	4b4c      	ldr	r3, [pc, #304]	; (5468 <z_impl_log_process+0x138>)
    5336:	781b      	ldrb	r3, [r3, #0]
{
    5338:	b085      	sub	sp, #20
    533a:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    533c:	b903      	cbnz	r3, 5340 <z_impl_log_process+0x10>
    533e:	b360      	cbz	r0, 539a <z_impl_log_process+0x6a>
    5340:	f04f 0320 	mov.w	r3, #32
    5344:	f3ef 8611 	mrs	r6, BASEPRI
    5348:	f383 8811 	msr	BASEPRI, r3
    534c:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    5350:	4846      	ldr	r0, [pc, #280]	; (546c <z_impl_log_process+0x13c>)
    5352:	f01a fd61 	bl	1fe18 <log_list_head_get>
    5356:	4605      	mov	r5, r0
	__asm__ volatile(
    5358:	f386 8811 	msr	BASEPRI, r6
    535c:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    5360:	b178      	cbz	r0, 5382 <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5362:	f3bf 8f5b 	dmb	ish
    5366:	4b42      	ldr	r3, [pc, #264]	; (5470 <z_impl_log_process+0x140>)
    5368:	e853 2f00 	ldrex	r2, [r3]
    536c:	3a01      	subs	r2, #1
    536e:	e843 2100 	strex	r1, r2, [r3]
    5372:	2900      	cmp	r1, #0
    5374:	d1f8      	bne.n	5368 <z_impl_log_process+0x38>
    5376:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    537a:	b194      	cbz	r4, 53a2 <z_impl_log_process+0x72>
	log_msg_put(msg);
    537c:	4628      	mov	r0, r5
    537e:	f01a fe64 	bl	2004a <log_msg_put>
	if (!bypass && dropped_cnt) {
    5382:	b924      	cbnz	r4, 538e <z_impl_log_process+0x5e>
    5384:	4b3b      	ldr	r3, [pc, #236]	; (5474 <z_impl_log_process+0x144>)
    5386:	681b      	ldr	r3, [r3, #0]
    5388:	b10b      	cbz	r3, 538e <z_impl_log_process+0x5e>
		dropped_notify();
    538a:	f7ff ff05 	bl	5198 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    538e:	4837      	ldr	r0, [pc, #220]	; (546c <z_impl_log_process+0x13c>)
    5390:	f01a fd40 	bl	1fe14 <log_list_head_peek>
    5394:	1e04      	subs	r4, r0, #0
    5396:	bf18      	it	ne
    5398:	2401      	movne	r4, #1
}
    539a:	4620      	mov	r0, r4
    539c:	b005      	add	sp, #20
    539e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    53a2:	4b35      	ldr	r3, [pc, #212]	; (5478 <z_impl_log_process+0x148>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    53a4:	781b      	ldrb	r3, [r3, #0]
    53a6:	b9cb      	cbnz	r3, 53dc <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    53a8:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    53aa:	07db      	lsls	r3, r3, #31
    53ac:	d416      	bmi.n	53dc <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
    53ae:	f01a fe5f 	bl	20070 <log_msg_str_get>
    53b2:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    53b4:	4628      	mov	r0, r5
    53b6:	f01a fe26 	bl	20006 <log_msg_nargs_get>
    53ba:	4601      	mov	r1, r0
    53bc:	4640      	mov	r0, r8
    53be:	f01a fd3e 	bl	1fe3e <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    53c2:	4f2e      	ldr	r7, [pc, #184]	; (547c <z_impl_log_process+0x14c>)
    53c4:	4b2e      	ldr	r3, [pc, #184]	; (5480 <z_impl_log_process+0x150>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    53c6:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 549c <z_impl_log_process+0x16c>
    53ca:	1bdb      	subs	r3, r3, r7
    53cc:	08db      	lsrs	r3, r3, #3
    53ce:	9303      	str	r3, [sp, #12]
    53d0:	4b2c      	ldr	r3, [pc, #176]	; (5484 <z_impl_log_process+0x154>)
    53d2:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    53d4:	4606      	mov	r6, r0
    53d6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    53da:	b936      	cbnz	r6, 53ea <z_impl_log_process+0xba>
    53dc:	4e2a      	ldr	r6, [pc, #168]	; (5488 <z_impl_log_process+0x158>)
    53de:	4f2b      	ldr	r7, [pc, #172]	; (548c <z_impl_log_process+0x15c>)
    53e0:	1bbf      	subs	r7, r7, r6
    53e2:	113f      	asrs	r7, r7, #4
    53e4:	f04f 0800 	mov.w	r8, #0
    53e8:	e03a      	b.n	5460 <z_impl_log_process+0x130>
		idx = 31 - __builtin_clz(mask);
    53ea:	fab6 f186 	clz	r1, r6
    53ee:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    53f2:	4649      	mov	r1, r9
    53f4:	4628      	mov	r0, r5
    53f6:	f01a fe09 	bl	2000c <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    53fa:	4b25      	ldr	r3, [pc, #148]	; (5490 <z_impl_log_process+0x160>)
    53fc:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    53fe:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    5400:	d302      	bcc.n	5408 <z_impl_log_process+0xd8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    5402:	4b24      	ldr	r3, [pc, #144]	; (5494 <z_impl_log_process+0x164>)
    5404:	4298      	cmp	r0, r3
    5406:	d31a      	bcc.n	543e <z_impl_log_process+0x10e>
    5408:	4608      	mov	r0, r1
    540a:	f7ff ff83 	bl	5314 <log_is_strdup>
    540e:	4602      	mov	r2, r0
    5410:	b9a8      	cbnz	r0, 543e <z_impl_log_process+0x10e>
    5412:	4b21      	ldr	r3, [pc, #132]	; (5498 <z_impl_log_process+0x168>)
    5414:	4299      	cmp	r1, r3
    5416:	d012      	beq.n	543e <z_impl_log_process+0x10e>
	return msg->hdr.ids.source_id;
    5418:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    541a:	9803      	ldr	r0, [sp, #12]
    541c:	0999      	lsrs	r1, r3, #6
    541e:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    5422:	ea4f 138a 	mov.w	r3, sl, lsl #6
    5426:	f043 0301 	orr.w	r3, r3, #1
	return __log_const_start[source_id].name;
    542a:	bf88      	it	hi
    542c:	f857 2031 	ldrhi.w	r2, [r7, r1, lsl #3]
    5430:	f8ad 3000 	strh.w	r3, [sp]
    5434:	4649      	mov	r1, r9
    5436:	4643      	mov	r3, r8
    5438:	4658      	mov	r0, fp
    543a:	f01a fd5a 	bl	1fef2 <log_3>
		mask &= ~BIT(idx);
    543e:	2101      	movs	r1, #1
    5440:	fa01 f109 	lsl.w	r1, r1, r9
    5444:	ea26 0601 	bic.w	r6, r6, r1
    5448:	e7c7      	b.n	53da <z_impl_log_process+0xaa>
	return backend->cb->active;
    544a:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    544c:	795b      	ldrb	r3, [r3, #5]
    544e:	b123      	cbz	r3, 545a <z_impl_log_process+0x12a>
	backend->api->put(backend, msg);
    5450:	6833      	ldr	r3, [r6, #0]
    5452:	4629      	mov	r1, r5
    5454:	681b      	ldr	r3, [r3, #0]
    5456:	4630      	mov	r0, r6
    5458:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    545a:	f108 0801 	add.w	r8, r8, #1
    545e:	3610      	adds	r6, #16
    5460:	45b8      	cmp	r8, r7
    5462:	dbf2      	blt.n	544a <z_impl_log_process+0x11a>
    5464:	e78a      	b.n	537c <z_impl_log_process+0x4c>
    5466:	bf00      	nop
    5468:	20002b1a 	.word	0x20002b1a
    546c:	200011ac 	.word	0x200011ac
    5470:	200011a0 	.word	0x200011a0
    5474:	200011a4 	.word	0x200011a4
    5478:	20002b1b 	.word	0x20002b1b
    547c:	00024fd8 	.word	0x00024fd8
    5480:	00025130 	.word	0x00025130
    5484:	000250f8 	.word	0x000250f8
    5488:	00025130 	.word	0x00025130
    548c:	00025150 	.word	0x00025150
    5490:	00024d9c 	.word	0x00024d9c
    5494:	00028ac8 	.word	0x00028ac8
    5498:	00026d44 	.word	0x00026d44
    549c:	00026d5e 	.word	0x00026d5e

000054a0 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    54a0:	4b29      	ldr	r3, [pc, #164]	; (5548 <msg_finalize+0xa8>)
{
    54a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    54a4:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    54a6:	8141      	strh	r1, [r0, #10]
{
    54a8:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    54aa:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    54ac:	4d27      	ldr	r5, [pc, #156]	; (554c <msg_finalize+0xac>)
    54ae:	60e0      	str	r0, [r4, #12]
    54b0:	f3bf 8f5b 	dmb	ish
    54b4:	e855 3f00 	ldrex	r3, [r5]
    54b8:	3301      	adds	r3, #1
    54ba:	e845 3200 	strex	r2, r3, [r5]
    54be:	2a00      	cmp	r2, #0
    54c0:	d1f8      	bne.n	54b4 <msg_finalize+0x14>
    54c2:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    54c6:	f04f 0320 	mov.w	r3, #32
    54ca:	f3ef 8611 	mrs	r6, BASEPRI
    54ce:	f383 8811 	msr	BASEPRI, r3
    54d2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    54d6:	481e      	ldr	r0, [pc, #120]	; (5550 <msg_finalize+0xb0>)
    54d8:	4621      	mov	r1, r4
    54da:	f01a fc91 	bl	1fe00 <log_list_add_tail>
	__asm__ volatile(
    54de:	f386 8811 	msr	BASEPRI, r6
    54e2:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    54e6:	4b1b      	ldr	r3, [pc, #108]	; (5554 <msg_finalize+0xb4>)
    54e8:	781b      	ldrb	r3, [r3, #0]
    54ea:	b183      	cbz	r3, 550e <msg_finalize+0x6e>
	__asm__ volatile(
    54ec:	f04f 0320 	mov.w	r3, #32
    54f0:	f3ef 8411 	mrs	r4, BASEPRI
    54f4:	f383 8811 	msr	BASEPRI, r3
    54f8:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    54fc:	2000      	movs	r0, #0
    54fe:	f7ff ff17 	bl	5330 <z_impl_log_process>
	__asm__ volatile(
    5502:	f384 8811 	msr	BASEPRI, r4
    5506:	f3bf 8f6f 	isb	sy
}
    550a:	b002      	add	sp, #8
    550c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    550e:	4a12      	ldr	r2, [pc, #72]	; (5558 <msg_finalize+0xb8>)
    5510:	682b      	ldr	r3, [r5, #0]
    5512:	6812      	ldr	r2, [r2, #0]
    5514:	2a00      	cmp	r2, #0
    5516:	d0f8      	beq.n	550a <msg_finalize+0x6a>
    5518:	2b01      	cmp	r3, #1
    551a:	d10a      	bne.n	5532 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    551c:	2200      	movs	r2, #0
    551e:	2300      	movs	r3, #0
    5520:	e9cd 2300 	strd	r2, r3, [sp]
    5524:	480d      	ldr	r0, [pc, #52]	; (555c <msg_finalize+0xbc>)
    5526:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    552a:	2300      	movs	r3, #0
    552c:	f019 ff60 	bl	1f3f0 <z_impl_k_timer_start>
    5530:	e7eb      	b.n	550a <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    5532:	2b0a      	cmp	r3, #10
    5534:	d1e9      	bne.n	550a <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    5536:	4809      	ldr	r0, [pc, #36]	; (555c <msg_finalize+0xbc>)
    5538:	f01f fa9a 	bl	24a70 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    553c:	4808      	ldr	r0, [pc, #32]	; (5560 <msg_finalize+0xc0>)
}
    553e:	b002      	add	sp, #8
    5540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5544:	f019 bc22 	b.w	1ed8c <z_impl_k_sem_give>
    5548:	20000154 	.word	0x20000154
    554c:	200011a0 	.word	0x200011a0
    5550:	200011ac 	.word	0x200011ac
    5554:	20002b1b 	.word	0x20002b1b
    5558:	200011d0 	.word	0x200011d0
    555c:	200008d8 	.word	0x200008d8
    5560:	2000076c 	.word	0x2000076c

00005564 <log_process_thread_func>:
{
    5564:	b510      	push	{r4, lr}
	log_init();
    5566:	f7ff fe75 	bl	5254 <log_init>
	return z_impl_k_current_get();
    556a:	f019 fc09 	bl	1ed80 <z_impl_k_current_get>
	proc_tid = process_tid;
    556e:	4b0c      	ldr	r3, [pc, #48]	; (55a0 <log_process_thread_func+0x3c>)
    5570:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    5572:	b130      	cbz	r0, 5582 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    5574:	4b0b      	ldr	r3, [pc, #44]	; (55a4 <log_process_thread_func+0x40>)
	    process_tid &&
    5576:	681b      	ldr	r3, [r3, #0]
    5578:	2b09      	cmp	r3, #9
    557a:	dd02      	ble.n	5582 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    557c:	480a      	ldr	r0, [pc, #40]	; (55a8 <log_process_thread_func+0x44>)
    557e:	f019 fc05 	bl	1ed8c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    5582:	4c09      	ldr	r4, [pc, #36]	; (55a8 <log_process_thread_func+0x44>)
    5584:	2000      	movs	r0, #0
    5586:	f7ff fed3 	bl	5330 <z_impl_log_process>
		if (log_process(false) == false) {
    558a:	2800      	cmp	r0, #0
    558c:	d1fa      	bne.n	5584 <log_process_thread_func+0x20>
    558e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5596:	4620      	mov	r0, r4
    5598:	f019 fc1e 	bl	1edd8 <z_impl_k_sem_take>
    559c:	e7f2      	b.n	5584 <log_process_thread_func+0x20>
    559e:	bf00      	nop
    55a0:	200011d0 	.word	0x200011d0
    55a4:	200011a0 	.word	0x200011a0
    55a8:	2000076c 	.word	0x2000076c

000055ac <z_impl_log_panic>:
{
    55ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    55ae:	4f0e      	ldr	r7, [pc, #56]	; (55e8 <z_impl_log_panic+0x3c>)
    55b0:	783d      	ldrb	r5, [r7, #0]
    55b2:	b975      	cbnz	r5, 55d2 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    55b4:	4c0d      	ldr	r4, [pc, #52]	; (55ec <z_impl_log_panic+0x40>)
    55b6:	4e0e      	ldr	r6, [pc, #56]	; (55f0 <z_impl_log_panic+0x44>)
	log_init();
    55b8:	f7ff fe4c 	bl	5254 <log_init>
    55bc:	1b36      	subs	r6, r6, r4
    55be:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    55c0:	42b5      	cmp	r5, r6
    55c2:	db07      	blt.n	55d4 <z_impl_log_panic+0x28>
    55c4:	2000      	movs	r0, #0
    55c6:	f7ff feb3 	bl	5330 <z_impl_log_process>
		while (log_process(false) == true) {
    55ca:	2800      	cmp	r0, #0
    55cc:	d1fa      	bne.n	55c4 <z_impl_log_panic+0x18>
	panic_mode = true;
    55ce:	2301      	movs	r3, #1
    55d0:	703b      	strb	r3, [r7, #0]
}
    55d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    55d4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    55d6:	795b      	ldrb	r3, [r3, #5]
    55d8:	b11b      	cbz	r3, 55e2 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    55da:	6823      	ldr	r3, [r4, #0]
    55dc:	4620      	mov	r0, r4
    55de:	691b      	ldr	r3, [r3, #16]
    55e0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    55e2:	3501      	adds	r5, #1
    55e4:	3410      	adds	r4, #16
    55e6:	e7eb      	b.n	55c0 <z_impl_log_panic+0x14>
    55e8:	20002b1b 	.word	0x20002b1b
    55ec:	00025130 	.word	0x00025130
    55f0:	00025150 	.word	0x00025150

000055f4 <log_free>:
{
    55f4:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    55f6:	3804      	subs	r0, #4
    55f8:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    55fa:	f3bf 8f5b 	dmb	ish
    55fe:	e850 3f00 	ldrex	r3, [r0]
    5602:	1e5a      	subs	r2, r3, #1
    5604:	e840 2100 	strex	r1, r2, [r0]
    5608:	2900      	cmp	r1, #0
    560a:	d1f8      	bne.n	55fe <log_free+0xa>
    560c:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    5610:	2b01      	cmp	r3, #1
    5612:	d103      	bne.n	561c <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    5614:	4803      	ldr	r0, [pc, #12]	; (5624 <log_free+0x30>)
    5616:	a901      	add	r1, sp, #4
    5618:	f018 ff0e 	bl	1e438 <k_mem_slab_free>
}
    561c:	b003      	add	sp, #12
    561e:	f85d fb04 	ldr.w	pc, [sp], #4
    5622:	bf00      	nop
    5624:	200011b4 	.word	0x200011b4

00005628 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    5628:	2320      	movs	r3, #32
    562a:	4902      	ldr	r1, [pc, #8]	; (5634 <log_msg_pool_init+0xc>)
    562c:	4802      	ldr	r0, [pc, #8]	; (5638 <log_msg_pool_init+0x10>)
    562e:	461a      	mov	r2, r3
    5630:	f01e bf28 	b.w	24484 <k_mem_slab_init>
    5634:	20005680 	.word	0x20005680
    5638:	200011d4 	.word	0x200011d4

0000563c <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    563c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    563e:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    5640:	4d09      	ldr	r5, [pc, #36]	; (5668 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    5642:	9301      	str	r3, [sp, #4]
    5644:	2001      	movs	r0, #1
    5646:	f7ff fe73 	bl	5330 <z_impl_log_process>
    564a:	4604      	mov	r4, r0
			log_dropped();
    564c:	f7ff fdca 	bl	51e4 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    5650:	2200      	movs	r2, #0
    5652:	2300      	movs	r3, #0
    5654:	a901      	add	r1, sp, #4
    5656:	4628      	mov	r0, r5
    5658:	f018 febc 	bl	1e3d4 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    565c:	b108      	cbz	r0, 5662 <log_msg_no_space_handle+0x26>
    565e:	2c00      	cmp	r4, #0
    5660:	d1f0      	bne.n	5644 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    5662:	9801      	ldr	r0, [sp, #4]
    5664:	b003      	add	sp, #12
    5666:	bd30      	pop	{r4, r5, pc}
    5668:	200011d4 	.word	0x200011d4

0000566c <log_msg_chunk_alloc>:
{
    566c:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    566e:	2300      	movs	r3, #0
    5670:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    5672:	4807      	ldr	r0, [pc, #28]	; (5690 <log_msg_chunk_alloc+0x24>)
    5674:	2200      	movs	r2, #0
    5676:	2300      	movs	r3, #0
    5678:	a901      	add	r1, sp, #4
    567a:	f018 feab 	bl	1e3d4 <k_mem_slab_alloc>
	if (err != 0) {
    567e:	b110      	cbz	r0, 5686 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    5680:	f7ff ffdc 	bl	563c <log_msg_no_space_handle>
    5684:	9001      	str	r0, [sp, #4]
}
    5686:	9801      	ldr	r0, [sp, #4]
    5688:	b003      	add	sp, #12
    568a:	f85d fb04 	ldr.w	pc, [sp], #4
    568e:	bf00      	nop
    5690:	200011d4 	.word	0x200011d4

00005694 <msg_free>:
{
    5694:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5696:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    5698:	7a45      	ldrb	r5, [r0, #9]
{
    569a:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    569c:	092d      	lsrs	r5, r5, #4
{
    569e:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    56a0:	07d8      	lsls	r0, r3, #31
    56a2:	d41c      	bmi.n	56de <msg_free+0x4a>
    56a4:	b1dd      	cbz	r5, 56de <msg_free+0x4a>
		uint32_t smask = 0;
    56a6:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    56a8:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    56aa:	9801      	ldr	r0, [sp, #4]
    56ac:	4631      	mov	r1, r6
    56ae:	f01a fcad 	bl	2000c <log_msg_arg_get>
    56b2:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    56b4:	f7ff fe2e 	bl	5314 <log_is_strdup>
    56b8:	b170      	cbz	r0, 56d8 <msg_free+0x44>
				if (smask == 0) {
    56ba:	b934      	cbnz	r4, 56ca <msg_free+0x36>
					smask = z_log_get_s_mask(
    56bc:	9b01      	ldr	r3, [sp, #4]
    56be:	4629      	mov	r1, r5
    56c0:	6918      	ldr	r0, [r3, #16]
    56c2:	f01a fbbc 	bl	1fe3e <z_log_get_s_mask>
					if (smask == 0) {
    56c6:	4604      	mov	r4, r0
    56c8:	b148      	cbz	r0, 56de <msg_free+0x4a>
				if (smask & BIT(i)) {
    56ca:	fa24 f306 	lsr.w	r3, r4, r6
    56ce:	07d9      	lsls	r1, r3, #31
    56d0:	d502      	bpl.n	56d8 <msg_free+0x44>
					log_free(buf);
    56d2:	4638      	mov	r0, r7
    56d4:	f7ff ff8e 	bl	55f4 <log_free>
		for (i = 0; i < nargs; i++) {
    56d8:	3601      	adds	r6, #1
    56da:	42ae      	cmp	r6, r5
    56dc:	d3e5      	bcc.n	56aa <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    56de:	9b01      	ldr	r3, [sp, #4]
    56e0:	7a1a      	ldrb	r2, [r3, #8]
    56e2:	0792      	lsls	r2, r2, #30
    56e4:	d504      	bpl.n	56f0 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    56e6:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    56e8:	4c08      	ldr	r4, [pc, #32]	; (570c <msg_free+0x78>)
    56ea:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    56ec:	9b03      	ldr	r3, [sp, #12]
    56ee:	b92b      	cbnz	r3, 56fc <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    56f0:	4806      	ldr	r0, [pc, #24]	; (570c <msg_free+0x78>)
    56f2:	a901      	add	r1, sp, #4
    56f4:	f018 fea0 	bl	1e438 <k_mem_slab_free>
}
    56f8:	b005      	add	sp, #20
    56fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    56fc:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    56fe:	a903      	add	r1, sp, #12
    5700:	4620      	mov	r0, r4
    5702:	f018 fe99 	bl	1e438 <k_mem_slab_free>
		cont = next;
    5706:	9503      	str	r5, [sp, #12]
    5708:	e7f0      	b.n	56ec <msg_free+0x58>
    570a:	bf00      	nop
    570c:	200011d4 	.word	0x200011d4

00005710 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    5710:	b40e      	push	{r1, r2, r3}
    5712:	b503      	push	{r0, r1, lr}
    5714:	ab03      	add	r3, sp, #12
    5716:	4601      	mov	r1, r0
    5718:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    571c:	4804      	ldr	r0, [pc, #16]	; (5730 <print_formatted+0x20>)
	va_start(args, fmt);
    571e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    5720:	f7ff fadc 	bl	4cdc <cbvprintf>
	va_end(args);

	return length;
}
    5724:	b002      	add	sp, #8
    5726:	f85d eb04 	ldr.w	lr, [sp], #4
    572a:	b003      	add	sp, #12
    572c:	4770      	bx	lr
    572e:	bf00      	nop
    5730:	00020419 	.word	0x00020419

00005734 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    5734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5738:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    573a:	f011 0402 	ands.w	r4, r1, #2
{
    573e:	4690      	mov	r8, r2
    5740:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    5744:	4606      	mov	r6, r0
    5746:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    5748:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    574c:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    5750:	d007      	beq.n	5762 <prefix_print+0x2e>
	if (!format) {
    5752:	f011 0f44 	tst.w	r1, #68	; 0x44
    5756:	d137      	bne.n	57c8 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    5758:	4932      	ldr	r1, [pc, #200]	; (5824 <prefix_print+0xf0>)
    575a:	f7ff ffd9 	bl	5710 <print_formatted>
			length = print_formatted(log_output,
    575e:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    5760:	460c      	mov	r4, r1
	if (color) {
    5762:	f1b9 0f00 	cmp.w	r9, #0
    5766:	d00a      	beq.n	577e <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
    5768:	4b2f      	ldr	r3, [pc, #188]	; (5828 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    576a:	4930      	ldr	r1, [pc, #192]	; (582c <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    576c:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    5770:	4b2f      	ldr	r3, [pc, #188]	; (5830 <prefix_print+0xfc>)
    5772:	4630      	mov	r0, r6
    5774:	2a00      	cmp	r2, #0
    5776:	bf08      	it	eq
    5778:	461a      	moveq	r2, r3
    577a:	f7ff ffc9 	bl	5710 <print_formatted>
	if (level_on) {
    577e:	b13d      	cbz	r5, 5790 <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    5780:	4b2c      	ldr	r3, [pc, #176]	; (5834 <prefix_print+0x100>)
    5782:	492d      	ldr	r1, [pc, #180]	; (5838 <prefix_print+0x104>)
    5784:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    5788:	4630      	mov	r0, r6
    578a:	f7ff ffc1 	bl	5710 <print_formatted>
    578e:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    5790:	f1b8 0f00 	cmp.w	r8, #0
    5794:	d043      	beq.n	581e <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    5796:	2301      	movs	r3, #1
    5798:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    579c:	4b27      	ldr	r3, [pc, #156]	; (583c <prefix_print+0x108>)
    579e:	f017 0f10 	tst.w	r7, #16
    57a2:	4f27      	ldr	r7, [pc, #156]	; (5840 <prefix_print+0x10c>)
    57a4:	bf18      	it	ne
    57a6:	461f      	movne	r7, r3
    57a8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    57ac:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    57b0:	f7ff fd28 	bl	5204 <log_source_name_get>
    57b4:	4639      	mov	r1, r7
    57b6:	4602      	mov	r2, r0
    57b8:	4630      	mov	r0, r6
    57ba:	f7ff ffa9 	bl	5710 <print_formatted>
    57be:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    57c0:	4420      	add	r0, r4
    57c2:	b005      	add	sp, #20
    57c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    57c8:	4b1e      	ldr	r3, [pc, #120]	; (5844 <prefix_print+0x110>)
    57ca:	6819      	ldr	r1, [r3, #0]
    57cc:	2900      	cmp	r1, #0
    57ce:	d0c7      	beq.n	5760 <prefix_print+0x2c>
		timestamp /= timestamp_div;
    57d0:	4b1d      	ldr	r3, [pc, #116]	; (5848 <prefix_print+0x114>)
    57d2:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    57d6:	681b      	ldr	r3, [r3, #0]
    57d8:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    57dc:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    57e0:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    57e4:	fbb4 f2fe 	udiv	r2, r4, lr
    57e8:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    57ec:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    57f0:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    57f4:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    57f8:	fbb4 fbf1 	udiv	fp, r4, r1
    57fc:	fb01 441b 	mls	r4, r1, fp, r4
    5800:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    5804:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5808:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    580c:	e9cd b101 	strd	fp, r1, [sp, #4]
    5810:	fb0a e113 	mls	r1, sl, r3, lr
    5814:	9100      	str	r1, [sp, #0]
    5816:	490d      	ldr	r1, [pc, #52]	; (584c <prefix_print+0x118>)
    5818:	f7ff ff7a 	bl	5710 <print_formatted>
    581c:	e79f      	b.n	575e <prefix_print+0x2a>
	total += print_formatted(log_output,
    581e:	4f08      	ldr	r7, [pc, #32]	; (5840 <prefix_print+0x10c>)
    5820:	e7c2      	b.n	57a8 <prefix_print+0x74>
    5822:	bf00      	nop
    5824:	00026daf 	.word	0x00026daf
    5828:	00025248 	.word	0x00025248
    582c:	00027b69 	.word	0x00027b69
    5830:	00026da1 	.word	0x00026da1
    5834:	0002525c 	.word	0x0002525c
    5838:	00026dd4 	.word	0x00026dd4
    583c:	00026dab 	.word	0x00026dab
    5840:	00026da6 	.word	0x00026da6
    5844:	200011f0 	.word	0x200011f0
    5848:	200011f4 	.word	0x200011f4
    584c:	00026db8 	.word	0x00026db8

00005850 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    5850:	b538      	push	{r3, r4, r5, lr}
    5852:	460c      	mov	r4, r1
	if (color) {
    5854:	07e1      	lsls	r1, r4, #31
{
    5856:	4605      	mov	r5, r0
	if (color) {
    5858:	d503      	bpl.n	5862 <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    585a:	4a08      	ldr	r2, [pc, #32]	; (587c <postfix_print+0x2c>)
    585c:	4908      	ldr	r1, [pc, #32]	; (5880 <postfix_print+0x30>)
    585e:	f7ff ff57 	bl	5710 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5862:	06e2      	lsls	r2, r4, #27
    5864:	d408      	bmi.n	5878 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5866:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    5868:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    586a:	bf4c      	ite	mi
    586c:	4905      	ldrmi	r1, [pc, #20]	; (5884 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    586e:	4906      	ldrpl	r1, [pc, #24]	; (5888 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    5870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    5874:	f7ff bf4c 	b.w	5710 <print_formatted>
}
    5878:	bd38      	pop	{r3, r4, r5, pc}
    587a:	bf00      	nop
    587c:	00026da1 	.word	0x00026da1
    5880:	00027b69 	.word	0x00027b69
    5884:	00026ddb 	.word	0x00026ddb
    5888:	00026dda 	.word	0x00026dda

0000588c <hexdump_line_print>:
{
    588c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5890:	461d      	mov	r5, r3
    5892:	9b08      	ldr	r3, [sp, #32]
    5894:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5896:	06da      	lsls	r2, r3, #27
{
    5898:	4604      	mov	r4, r0
    589a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    589c:	d405      	bmi.n	58aa <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    589e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    58a0:	bf4c      	ite	mi
    58a2:	492a      	ldrmi	r1, [pc, #168]	; (594c <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    58a4:	492a      	ldrpl	r1, [pc, #168]	; (5950 <hexdump_line_print+0xc4>)
    58a6:	f7ff ff33 	bl	5710 <print_formatted>
		print_formatted(log_output, " ");
    58aa:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 5958 <hexdump_line_print+0xcc>
{
    58ae:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    58b2:	45a8      	cmp	r8, r5
    58b4:	db2a      	blt.n	590c <hexdump_line_print+0x80>
			print_formatted(log_output, "   ");
    58b6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 595c <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    58ba:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 5960 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    58be:	f8df a098 	ldr.w	sl, [pc, #152]	; 5958 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    58c2:	2500      	movs	r5, #0
		if (i < length) {
    58c4:	42bd      	cmp	r5, r7
    58c6:	d22f      	bcs.n	5928 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    58c8:	5d72      	ldrb	r2, [r6, r5]
    58ca:	4649      	mov	r1, r9
    58cc:	4620      	mov	r0, r4
    58ce:	f7ff ff1f 	bl	5710 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    58d2:	3501      	adds	r5, #1
    58d4:	2d10      	cmp	r5, #16
    58d6:	d120      	bne.n	591a <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    58d8:	491e      	ldr	r1, [pc, #120]	; (5954 <hexdump_line_print+0xc8>)
			print_formatted(log_output, " ");
    58da:	f8df 807c 	ldr.w	r8, [pc, #124]	; 5958 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    58de:	f8df 9084 	ldr.w	r9, [pc, #132]	; 5964 <hexdump_line_print+0xd8>
	print_formatted(log_output, "|");
    58e2:	4620      	mov	r0, r4
    58e4:	f7ff ff14 	bl	5710 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    58e8:	2500      	movs	r5, #0
		if (i < length) {
    58ea:	42af      	cmp	r7, r5
    58ec:	d928      	bls.n	5940 <hexdump_line_print+0xb4>
			      isprint((int)c) ? c : '.');
    58ee:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    58f0:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    58f4:	2b5f      	cmp	r3, #95	; 0x5f
    58f6:	bf28      	it	cs
    58f8:	222e      	movcs	r2, #46	; 0x2e
    58fa:	4649      	mov	r1, r9
    58fc:	4620      	mov	r0, r4
    58fe:	f7ff ff07 	bl	5710 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5902:	3501      	adds	r5, #1
    5904:	2d10      	cmp	r5, #16
    5906:	d114      	bne.n	5932 <hexdump_line_print+0xa6>
}
    5908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    590c:	4649      	mov	r1, r9
    590e:	4620      	mov	r0, r4
    5910:	f7ff fefe 	bl	5710 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    5914:	f108 0801 	add.w	r8, r8, #1
    5918:	e7cb      	b.n	58b2 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    591a:	076a      	lsls	r2, r5, #29
    591c:	d1d2      	bne.n	58c4 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    591e:	4651      	mov	r1, sl
    5920:	4620      	mov	r0, r4
    5922:	f7ff fef5 	bl	5710 <print_formatted>
    5926:	e7cd      	b.n	58c4 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    5928:	4641      	mov	r1, r8
    592a:	4620      	mov	r0, r4
    592c:	f7ff fef0 	bl	5710 <print_formatted>
    5930:	e7cf      	b.n	58d2 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    5932:	076b      	lsls	r3, r5, #29
    5934:	d1d9      	bne.n	58ea <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    5936:	4641      	mov	r1, r8
    5938:	4620      	mov	r0, r4
    593a:	f7ff fee9 	bl	5710 <print_formatted>
    593e:	e7d4      	b.n	58ea <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    5940:	4641      	mov	r1, r8
    5942:	4620      	mov	r0, r4
    5944:	f7ff fee4 	bl	5710 <print_formatted>
    5948:	e7db      	b.n	5902 <hexdump_line_print+0x76>
    594a:	bf00      	nop
    594c:	00026ddb 	.word	0x00026ddb
    5950:	00026dda 	.word	0x00026dda
    5954:	00026de7 	.word	0x00026de7
    5958:	00026de5 	.word	0x00026de5
    595c:	00026de3 	.word	0x00026de3
    5960:	00026ddd 	.word	0x00026ddd
    5964:	00026de9 	.word	0x00026de9

00005968 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    5968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    596c:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    596e:	f013 0807 	ands.w	r8, r3, #7
{
    5972:	4617      	mov	r7, r2
    5974:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5976:	7a0a      	ldrb	r2, [r1, #8]
    5978:	4605      	mov	r5, r0
    597a:	460e      	mov	r6, r1
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    597c:	d020      	beq.n	59c0 <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
    597e:	8949      	ldrh	r1, [r1, #10]
    5980:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    5984:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5986:	43d2      	mvns	r2, r2
    5988:	e9cd 8300 	strd	r8, r3, [sp]
    598c:	9102      	str	r1, [sp, #8]
    598e:	68f3      	ldr	r3, [r6, #12]
    5990:	f002 0201 	and.w	r2, r2, #1
    5994:	4639      	mov	r1, r7
    5996:	f7ff fecd 	bl	5734 <prefix_print>
    599a:	4681      	mov	r9, r0
    599c:	7a34      	ldrb	r4, [r6, #8]
    599e:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    59a0:	f014 0401 	ands.w	r4, r4, #1
    59a4:	d00e      	beq.n	59c4 <log_output_msg_process+0x5c>
		std_print(msg, log_output);
    59a6:	4629      	mov	r1, r5
    59a8:	4630      	mov	r0, r6
    59aa:	f01a fbcb 	bl	20144 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    59ae:	f1b8 0f00 	cmp.w	r8, #0
    59b2:	d02b      	beq.n	5a0c <log_output_msg_process+0xa4>
		postfix_print(log_output, flags, level);
    59b4:	4642      	mov	r2, r8
    59b6:	4639      	mov	r1, r7
    59b8:	4628      	mov	r0, r5
    59ba:	f7ff ff49 	bl	5850 <postfix_print>
    59be:	e025      	b.n	5a0c <log_output_msg_process+0xa4>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    59c0:	46c1      	mov	r9, r8
    59c2:	e7eb      	b.n	599c <log_output_msg_process+0x34>
	} else if (raw_string) {
    59c4:	f1b8 0f00 	cmp.w	r8, #0
    59c8:	d126      	bne.n	5a18 <log_output_msg_process+0xb0>
	size_t offset = 0;
    59ca:	4627      	mov	r7, r4
		length = log_output->size;
    59cc:	68eb      	ldr	r3, [r5, #12]
    59ce:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    59d0:	aa06      	add	r2, sp, #24
    59d2:	463b      	mov	r3, r7
    59d4:	68a9      	ldr	r1, [r5, #8]
    59d6:	4630      	mov	r0, r6
    59d8:	f01a fba0 	bl	2011c <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    59dc:	9a06      	ldr	r2, [sp, #24]
    59de:	686b      	ldr	r3, [r5, #4]
    59e0:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    59e2:	b13a      	cbz	r2, 59f4 <log_output_msg_process+0x8c>
			eol = (log_output->buf[length - 1] == '\n');
    59e4:	68ab      	ldr	r3, [r5, #8]
    59e6:	4413      	add	r3, r2
    59e8:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    59ec:	f1a4 030a 	sub.w	r3, r4, #10
    59f0:	425c      	negs	r4, r3
    59f2:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    59f4:	4628      	mov	r0, r5
    59f6:	f01a fd02 	bl	203fe <log_output_flush>
		offset += length;
    59fa:	9b06      	ldr	r3, [sp, #24]
    59fc:	441f      	add	r7, r3
	} while (length > 0);
    59fe:	2b00      	cmp	r3, #0
    5a00:	d1e4      	bne.n	59cc <log_output_msg_process+0x64>
	if (eol) {
    5a02:	b11c      	cbz	r4, 5a0c <log_output_msg_process+0xa4>
		print_formatted(log_output, "\r");
    5a04:	4913      	ldr	r1, [pc, #76]	; (5a54 <log_output_msg_process+0xec>)
    5a06:	4628      	mov	r0, r5
    5a08:	f7ff fe82 	bl	5710 <print_formatted>
	}

	log_output_flush(log_output);
    5a0c:	4628      	mov	r0, r5
    5a0e:	f01a fcf6 	bl	203fe <log_output_flush>
}
    5a12:	b00a      	add	sp, #40	; 0x28
    5a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    5a18:	4630      	mov	r0, r6
    5a1a:	f01a fb29 	bl	20070 <log_msg_str_get>
    5a1e:	490e      	ldr	r1, [pc, #56]	; (5a58 <log_output_msg_process+0xf0>)
    5a20:	4602      	mov	r2, r0
    5a22:	4628      	mov	r0, r5
    5a24:	f7ff fe74 	bl	5710 <print_formatted>
		length = sizeof(buf);
    5a28:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    5a2c:	aa05      	add	r2, sp, #20
    5a2e:	4623      	mov	r3, r4
    5a30:	a906      	add	r1, sp, #24
    5a32:	4630      	mov	r0, r6
		length = sizeof(buf);
    5a34:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    5a38:	f01a fb70 	bl	2011c <log_msg_hexdump_data_get>
		if (length) {
    5a3c:	9a05      	ldr	r2, [sp, #20]
    5a3e:	2a00      	cmp	r2, #0
    5a40:	d0b8      	beq.n	59b4 <log_output_msg_process+0x4c>
			hexdump_line_print(log_output, buf, length,
    5a42:	464b      	mov	r3, r9
    5a44:	9700      	str	r7, [sp, #0]
    5a46:	a906      	add	r1, sp, #24
    5a48:	4628      	mov	r0, r5
    5a4a:	f7ff ff1f 	bl	588c <hexdump_line_print>
			offset += length;
    5a4e:	9b05      	ldr	r3, [sp, #20]
    5a50:	441c      	add	r4, r3
		length = sizeof(buf);
    5a52:	e7eb      	b.n	5a2c <log_output_msg_process+0xc4>
    5a54:	00026dec 	.word	0x00026dec
    5a58:	00027b69 	.word	0x00027b69

00005a5c <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
    5a5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5a5e:	f242 730f 	movw	r3, #9999	; 0x270f
    5a62:	428b      	cmp	r3, r1
    5a64:	bf28      	it	cs
    5a66:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
    5a68:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5a6a:	4a0f      	ldr	r2, [pc, #60]	; (5aa8 <log_output_dropped_process+0x4c>)
{
    5a6c:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5a6e:	2105      	movs	r1, #5
    5a70:	4668      	mov	r0, sp
    5a72:	f019 fe4d 	bl	1f710 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    5a76:	6863      	ldr	r3, [r4, #4]
    5a78:	490c      	ldr	r1, [pc, #48]	; (5aac <log_output_dropped_process+0x50>)
    5a7a:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5a7c:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    5a7e:	220b      	movs	r2, #11
    5a80:	4628      	mov	r0, r5
    5a82:	f01a fb52 	bl	2012a <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    5a86:	6863      	ldr	r3, [r4, #4]
    5a88:	4632      	mov	r2, r6
    5a8a:	4669      	mov	r1, sp
    5a8c:	4628      	mov	r0, r5
    5a8e:	685b      	ldr	r3, [r3, #4]
    5a90:	f01a fb4b 	bl	2012a <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    5a94:	6863      	ldr	r3, [r4, #4]
    5a96:	4906      	ldr	r1, [pc, #24]	; (5ab0 <log_output_dropped_process+0x54>)
    5a98:	685b      	ldr	r3, [r3, #4]
    5a9a:	221b      	movs	r2, #27
    5a9c:	4628      	mov	r0, r5
    5a9e:	f01a fb44 	bl	2012a <buffer_write>
		     log_output->control_block->ctx);
}
    5aa2:	b002      	add	sp, #8
    5aa4:	bd70      	pop	{r4, r5, r6, pc}
    5aa6:	bf00      	nop
    5aa8:	000284eb 	.word	0x000284eb
    5aac:	00026e2a 	.word	0x00026e2a
    5ab0:	00026e0e 	.word	0x00026e0e

00005ab4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    5ab4:	4a08      	ldr	r2, [pc, #32]	; (5ad8 <log_output_timestamp_freq_set+0x24>)
{
    5ab6:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    5ab8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    5aba:	4c08      	ldr	r4, [pc, #32]	; (5adc <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    5abc:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    5abe:	2100      	movs	r1, #0
    5ac0:	42a0      	cmp	r0, r4
    5ac2:	d804      	bhi.n	5ace <log_output_timestamp_freq_set+0x1a>
    5ac4:	b101      	cbz	r1, 5ac8 <log_output_timestamp_freq_set+0x14>
    5ac6:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    5ac8:	4b05      	ldr	r3, [pc, #20]	; (5ae0 <log_output_timestamp_freq_set+0x2c>)
    5aca:	6018      	str	r0, [r3, #0]
}
    5acc:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    5ace:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    5ad0:	005b      	lsls	r3, r3, #1
    5ad2:	2101      	movs	r1, #1
    5ad4:	e7f4      	b.n	5ac0 <log_output_timestamp_freq_set+0xc>
    5ad6:	bf00      	nop
    5ad8:	200011f4 	.word	0x200011f4
    5adc:	000f4240 	.word	0x000f4240
    5ae0:	200011f0 	.word	0x200011f0

00005ae4 <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    5ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    5ae6:	4f07      	ldr	r7, [pc, #28]	; (5b04 <char_out+0x20>)
{
    5ae8:	460d      	mov	r5, r1
    5aea:	4604      	mov	r4, r0
    5aec:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    5aee:	42b4      	cmp	r4, r6
    5af0:	d101      	bne.n	5af6 <char_out+0x12>
	}

	return length;
}
    5af2:	4628      	mov	r0, r5
    5af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    5af6:	6838      	ldr	r0, [r7, #0]
    5af8:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    5afc:	6883      	ldr	r3, [r0, #8]
    5afe:	685b      	ldr	r3, [r3, #4]
    5b00:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    5b02:	e7f4      	b.n	5aee <char_out+0xa>
    5b04:	2000120c 	.word	0x2000120c

00005b08 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    5b08:	4801      	ldr	r0, [pc, #4]	; (5b10 <panic+0x8>)
    5b0a:	f01a bc78 	b.w	203fe <log_output_flush>
    5b0e:	bf00      	nop
    5b10:	00025288 	.word	0x00025288

00005b14 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    5b14:	4801      	ldr	r0, [pc, #4]	; (5b1c <dropped+0x8>)
    5b16:	f7ff bfa1 	b.w	5a5c <log_output_dropped_process>
    5b1a:	bf00      	nop
    5b1c:	00025288 	.word	0x00025288

00005b20 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    5b20:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    5b22:	4803      	ldr	r0, [pc, #12]	; (5b30 <log_backend_uart_init+0x10>)
    5b24:	f018 faa0 	bl	1e068 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    5b28:	4b02      	ldr	r3, [pc, #8]	; (5b34 <log_backend_uart_init+0x14>)
    5b2a:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
}
    5b2c:	bd08      	pop	{r3, pc}
    5b2e:	bf00      	nop
    5b30:	00026e36 	.word	0x00026e36
    5b34:	2000120c 	.word	0x2000120c

00005b38 <put>:
{
    5b38:	b510      	push	{r4, lr}
	log_msg_get(msg);
    5b3a:	4608      	mov	r0, r1
    5b3c:	460c      	mov	r4, r1
    5b3e:	f01a fa55 	bl	1ffec <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    5b42:	4805      	ldr	r0, [pc, #20]	; (5b58 <put+0x20>)
    5b44:	4621      	mov	r1, r4
    5b46:	220f      	movs	r2, #15
    5b48:	f7ff ff0e 	bl	5968 <log_output_msg_process>
	log_msg_put(msg);
    5b4c:	4620      	mov	r0, r4
}
    5b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5b52:	f01a ba7a 	b.w	2004a <log_msg_put>
    5b56:	bf00      	nop
    5b58:	00025288 	.word	0x00025288

00005b5c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    5b5c:	4b01      	ldr	r3, [pc, #4]	; (5b64 <log_backend_rtt_init+0x8>)
    5b5e:	2201      	movs	r2, #1
    5b60:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    5b62:	4770      	bx	lr
    5b64:	20002b2d 	.word	0x20002b2d

00005b68 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    5b68:	4b02      	ldr	r3, [pc, #8]	; (5b74 <panic+0xc>)
	log_output_flush(log_output);
    5b6a:	4803      	ldr	r0, [pc, #12]	; (5b78 <panic+0x10>)
    5b6c:	2201      	movs	r2, #1
    5b6e:	701a      	strb	r2, [r3, #0]
    5b70:	f01a bc45 	b.w	203fe <log_output_flush>
    5b74:	20002b2e 	.word	0x20002b2e
    5b78:	000252b0 	.word	0x000252b0

00005b7c <dropped>:
	log_output_dropped_process(log_output, cnt);
    5b7c:	4801      	ldr	r0, [pc, #4]	; (5b84 <dropped+0x8>)
    5b7e:	f7ff bf6d 	b.w	5a5c <log_output_dropped_process>
    5b82:	bf00      	nop
    5b84:	000252b0 	.word	0x000252b0

00005b88 <put>:
{
    5b88:	b510      	push	{r4, lr}
	log_msg_get(msg);
    5b8a:	4608      	mov	r0, r1
    5b8c:	460c      	mov	r4, r1
    5b8e:	f01a fa2d 	bl	1ffec <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    5b92:	4805      	ldr	r0, [pc, #20]	; (5ba8 <put+0x20>)
    5b94:	4621      	mov	r1, r4
    5b96:	220f      	movs	r2, #15
    5b98:	f7ff fee6 	bl	5968 <log_output_msg_process>
	log_msg_put(msg);
    5b9c:	4620      	mov	r0, r4
}
    5b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5ba2:	f01a ba52 	b.w	2004a <log_msg_put>
    5ba6:	bf00      	nop
    5ba8:	000252b0 	.word	0x000252b0

00005bac <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    5bac:	4b05      	ldr	r3, [pc, #20]	; (5bc4 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    5bae:	781b      	ldrb	r3, [r3, #0]
    5bb0:	b11b      	cbz	r3, 5bba <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    5bb2:	f241 3088 	movw	r0, #5000	; 0x1388
    5bb6:	f01e be5f 	b.w	24878 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    5bba:	2005      	movs	r0, #5
    5bbc:	2100      	movs	r1, #0
    5bbe:	f019 b8c3 	b.w	1ed48 <z_impl_k_sleep>
    5bc2:	bf00      	nop
    5bc4:	20002b2e 	.word	0x20002b2e

00005bc8 <data_out_block_mode>:
{
    5bc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    5bcc:	f8df 9090 	ldr.w	r9, [pc, #144]	; 5c60 <data_out_block_mode+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
    5bd0:	f8df b090 	ldr.w	fp, [pc, #144]	; 5c64 <data_out_block_mode+0x9c>
{
    5bd4:	4607      	mov	r7, r0
    5bd6:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    5bd8:	2404      	movs	r4, #4
    5bda:	46ca      	mov	sl, r9
		if (!is_sync_mode()) {
    5bdc:	f899 3000 	ldrb.w	r3, [r9]
    5be0:	b933      	cbnz	r3, 5bf0 <data_out_block_mode+0x28>
    5be2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5bea:	4658      	mov	r0, fp
    5bec:	f018 fc50 	bl	1e490 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5bf0:	4632      	mov	r2, r6
    5bf2:	4639      	mov	r1, r7
    5bf4:	2000      	movs	r0, #0
    5bf6:	f000 fb6f 	bl	62d8 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    5bfa:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5bfe:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
    5c00:	b913      	cbnz	r3, 5c08 <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
    5c02:	4658      	mov	r0, fp
    5c04:	f018 fcbc 	bl	1e580 <z_impl_k_mutex_unlock>
		if (ret) {
    5c08:	4d14      	ldr	r5, [pc, #80]	; (5c5c <data_out_block_mode+0x94>)
    5c0a:	f1b8 0f00 	cmp.w	r8, #0
    5c0e:	d018      	beq.n	5c42 <data_out_block_mode+0x7a>
	host_present = true;
    5c10:	2301      	movs	r3, #1
    5c12:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    5c14:	f89a 3000 	ldrb.w	r3, [sl]
    5c18:	b933      	cbnz	r3, 5c28 <data_out_block_mode+0x60>
}
    5c1a:	4630      	mov	r0, r6
    5c1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    5c20:	b95c      	cbnz	r4, 5c3a <data_out_block_mode+0x72>
		host_present = false;
    5c22:	702c      	strb	r4, [r5, #0]
    5c24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    5c28:	2000      	movs	r0, #0
    5c2a:	f000 fba1 	bl	6370 <SEGGER_RTT_HasDataUp>
    5c2e:	2800      	cmp	r0, #0
    5c30:	d0f3      	beq.n	5c1a <data_out_block_mode+0x52>
    5c32:	782b      	ldrb	r3, [r5, #0]
    5c34:	2b00      	cmp	r3, #0
    5c36:	d1f3      	bne.n	5c20 <data_out_block_mode+0x58>
    5c38:	e7ef      	b.n	5c1a <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
    5c3a:	3c01      	subs	r4, #1
    5c3c:	f7ff ffb6 	bl	5bac <on_failed_write.part.0>
    5c40:	e7f2      	b.n	5c28 <data_out_block_mode+0x60>
		} else if (host_present) {
    5c42:	782b      	ldrb	r3, [r5, #0]
    5c44:	b113      	cbz	r3, 5c4c <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
    5c46:	3c01      	subs	r4, #1
    5c48:	d104      	bne.n	5c54 <data_out_block_mode+0x8c>
		host_present = false;
    5c4a:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    5c4c:	782b      	ldrb	r3, [r5, #0]
    5c4e:	2b00      	cmp	r3, #0
    5c50:	d1c4      	bne.n	5bdc <data_out_block_mode+0x14>
    5c52:	e7e2      	b.n	5c1a <data_out_block_mode+0x52>
    5c54:	f7ff ffaa 	bl	5bac <on_failed_write.part.0>
    5c58:	e7f8      	b.n	5c4c <data_out_block_mode+0x84>
    5c5a:	bf00      	nop
    5c5c:	20002b2d 	.word	0x20002b2d
    5c60:	20002b2e 	.word	0x20002b2e
    5c64:	20000740 	.word	0x20000740

00005c68 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
    5c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
    5c6a:	2407      	movs	r4, #7
    5c6c:	9402      	str	r4, [sp, #8]
    5c6e:	4c04      	ldr	r4, [pc, #16]	; (5c80 <read_pnp_id+0x18>)
    5c70:	9401      	str	r4, [sp, #4]
    5c72:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    5c76:	9400      	str	r4, [sp, #0]
    5c78:	f01d f944 	bl	22f04 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
    5c7c:	b004      	add	sp, #16
    5c7e:	bd10      	pop	{r4, pc}
    5c80:	2000065a 	.word	0x2000065a

00005c84 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    5c84:	b510      	push	{r4, lr}
    5c86:	4807      	ldr	r0, [pc, #28]	; (5ca4 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    5c88:	4c07      	ldr	r4, [pc, #28]	; (5ca8 <uart_console_init+0x24>)
    5c8a:	f018 f9ed 	bl	1e068 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    5c8e:	4b07      	ldr	r3, [pc, #28]	; (5cac <uart_console_init+0x28>)
    5c90:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    5c92:	4620      	mov	r0, r4
    5c94:	f001 f9f6 	bl	7084 <__stdout_hook_install>
	__printk_hook_install(console_out);
    5c98:	4620      	mov	r0, r4
    5c9a:	f7fe fdb9 	bl	4810 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    5c9e:	2000      	movs	r0, #0
    5ca0:	bd10      	pop	{r4, pc}
    5ca2:	bf00      	nop
    5ca4:	00026e36 	.word	0x00026e36
    5ca8:	00005cb1 	.word	0x00005cb1
    5cac:	20001224 	.word	0x20001224

00005cb0 <console_out>:
	if ('\n' == c) {
    5cb0:	280a      	cmp	r0, #10
{
    5cb2:	b538      	push	{r3, r4, r5, lr}
    5cb4:	4d07      	ldr	r5, [pc, #28]	; (5cd4 <console_out+0x24>)
    5cb6:	4604      	mov	r4, r0
	if ('\n' == c) {
    5cb8:	d104      	bne.n	5cc4 <console_out+0x14>
    5cba:	6828      	ldr	r0, [r5, #0]
    5cbc:	6883      	ldr	r3, [r0, #8]
    5cbe:	210d      	movs	r1, #13
    5cc0:	685b      	ldr	r3, [r3, #4]
    5cc2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    5cc4:	6828      	ldr	r0, [r5, #0]
    5cc6:	6883      	ldr	r3, [r0, #8]
    5cc8:	b2e1      	uxtb	r1, r4
    5cca:	685b      	ldr	r3, [r3, #4]
    5ccc:	4798      	blx	r3
}
    5cce:	4620      	mov	r0, r4
    5cd0:	bd38      	pop	{r3, r4, r5, pc}
    5cd2:	bf00      	nop
    5cd4:	20001224 	.word	0x20001224

00005cd8 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5cd8:	b570      	push	{r4, r5, r6, lr}
    5cda:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    5cdc:	480d      	ldr	r0, [pc, #52]	; (5d14 <onoff_stop+0x3c>)
    5cde:	1a23      	subs	r3, r4, r0
    5ce0:	109a      	asrs	r2, r3, #2
    5ce2:	4b0d      	ldr	r3, [pc, #52]	; (5d18 <onoff_stop+0x40>)
    5ce4:	4353      	muls	r3, r2
    5ce6:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    5ce8:	250c      	movs	r5, #12
    5cea:	435d      	muls	r5, r3
    5cec:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
    5cf0:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    5cf2:	4418      	add	r0, r3
    5cf4:	2140      	movs	r1, #64	; 0x40
    5cf6:	f01a fbcd 	bl	20494 <set_off_state>
	if (err < 0) {
    5cfa:	1e01      	subs	r1, r0, #0
    5cfc:	db04      	blt.n	5d08 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    5cfe:	4b07      	ldr	r3, [pc, #28]	; (5d1c <onoff_stop+0x44>)
    5d00:	442b      	add	r3, r5
    5d02:	685b      	ldr	r3, [r3, #4]
    5d04:	4798      	blx	r3
	return 0;
    5d06:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    5d08:	4620      	mov	r0, r4
    5d0a:	4633      	mov	r3, r6
}
    5d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    5d10:	4718      	bx	r3
    5d12:	bf00      	nop
    5d14:	20001238 	.word	0x20001238
    5d18:	b6db6db7 	.word	0xb6db6db7
    5d1c:	00025360 	.word	0x00025360

00005d20 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    5d24:	4c0f      	ldr	r4, [pc, #60]	; (5d64 <onoff_start+0x44>)
    5d26:	4d10      	ldr	r5, [pc, #64]	; (5d68 <onoff_start+0x48>)
    5d28:	1b03      	subs	r3, r0, r4
    5d2a:	109b      	asrs	r3, r3, #2
    5d2c:	435d      	muls	r5, r3
    5d2e:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    5d30:	250c      	movs	r5, #12
    5d32:	435d      	muls	r5, r3
{
    5d34:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    5d36:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    5d3a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    5d3c:	4420      	add	r0, r4
    5d3e:	2140      	movs	r1, #64	; 0x40
    5d40:	f01a fbc1 	bl	204c6 <set_starting_state>
	if (err < 0) {
    5d44:	1e01      	subs	r1, r0, #0
    5d46:	db08      	blt.n	5d5a <onoff_start+0x3a>
	subdata->cb = cb;
    5d48:	4b08      	ldr	r3, [pc, #32]	; (5d6c <onoff_start+0x4c>)
    5d4a:	442c      	add	r4, r5
	subdata->user_data = user_data;
    5d4c:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    5d50:	4b07      	ldr	r3, [pc, #28]	; (5d70 <onoff_start+0x50>)
    5d52:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    5d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    5d58:	4718      	bx	r3
		notify(mgr, err);
    5d5a:	4638      	mov	r0, r7
    5d5c:	4633      	mov	r3, r6
}
    5d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    5d62:	4718      	bx	r3
    5d64:	20001238 	.word	0x20001238
    5d68:	b6db6db7 	.word	0xb6db6db7
    5d6c:	00020529 	.word	0x00020529
    5d70:	00025360 	.word	0x00025360

00005d74 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5d74:	2200      	movs	r2, #0
{
    5d76:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5d78:	2101      	movs	r1, #1
{
    5d7a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5d7c:	4610      	mov	r0, r2
    5d7e:	f000 fd1b 	bl	67b8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    5d82:	2000      	movs	r0, #0
    5d84:	f000 fce6 	bl	6754 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    5d88:	480f      	ldr	r0, [pc, #60]	; (5dc8 <clk_init+0x54>)
    5d8a:	f018 f839 	bl	1de00 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    5d8e:	4b0f      	ldr	r3, [pc, #60]	; (5dcc <clk_init+0x58>)
    5d90:	4298      	cmp	r0, r3
    5d92:	d115      	bne.n	5dc0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    5d94:	f01e fadc 	bl	24350 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    5d98:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5d9a:	490d      	ldr	r1, [pc, #52]	; (5dd0 <clk_init+0x5c>)
    5d9c:	4630      	mov	r0, r6
    5d9e:	f019 fd13 	bl	1f7c8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    5da2:	2800      	cmp	r0, #0
    5da4:	db0b      	blt.n	5dbe <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5da6:	2501      	movs	r5, #1
    5da8:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    5daa:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    5dac:	4908      	ldr	r1, [pc, #32]	; (5dd0 <clk_init+0x5c>)
    5dae:	f104 001c 	add.w	r0, r4, #28
    5db2:	f019 fd09 	bl	1f7c8 <onoff_manager_init>
		if (err < 0) {
    5db6:	2800      	cmp	r0, #0
    5db8:	db01      	blt.n	5dbe <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5dba:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    5dbc:	2000      	movs	r0, #0
}
    5dbe:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    5dc0:	f06f 0004 	mvn.w	r0, #4
    5dc4:	e7fb      	b.n	5dbe <clk_init+0x4a>
    5dc6:	bf00      	nop
    5dc8:	00005e09 	.word	0x00005e09
    5dcc:	0bad0000 	.word	0x0bad0000
    5dd0:	00025378 	.word	0x00025378

00005dd4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    5dd4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    5dd6:	230c      	movs	r3, #12
    5dd8:	4809      	ldr	r0, [pc, #36]	; (5e00 <clkstarted_handle.constprop.0+0x2c>)
    5dda:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    5ddc:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    5dde:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    5de0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    5de4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    5de6:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    5de8:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    5dea:	4418      	add	r0, r3
    5dec:	f01a fb89 	bl	20502 <set_on_state>
	if (callback) {
    5df0:	b12d      	cbz	r5, 5dfe <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5df2:	4632      	mov	r2, r6
    5df4:	462b      	mov	r3, r5
    5df6:	4803      	ldr	r0, [pc, #12]	; (5e04 <clkstarted_handle.constprop.0+0x30>)
}
    5df8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    5dfc:	4718      	bx	r3
}
    5dfe:	bd70      	pop	{r4, r5, r6, pc}
    5e00:	20001238 	.word	0x20001238
    5e04:	20000664 	.word	0x20000664

00005e08 <clock_event_handler>:
	switch (event) {
    5e08:	b110      	cbz	r0, 5e10 <clock_event_handler+0x8>
    5e0a:	2801      	cmp	r0, #1
    5e0c:	d004      	beq.n	5e18 <clock_event_handler+0x10>
    5e0e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5e10:	4b03      	ldr	r3, [pc, #12]	; (5e20 <clock_event_handler+0x18>)
    5e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5e14:	075b      	lsls	r3, r3, #29
    5e16:	d101      	bne.n	5e1c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5e18:	f7ff bfdc 	b.w	5dd4 <clkstarted_handle.constprop.0>
}
    5e1c:	4770      	bx	lr
    5e1e:	bf00      	nop
    5e20:	20001238 	.word	0x20001238

00005e24 <generic_hfclk_start>:
{
    5e24:	b508      	push	{r3, lr}
	__asm__ volatile(
    5e26:	f04f 0320 	mov.w	r3, #32
    5e2a:	f3ef 8111 	mrs	r1, BASEPRI
    5e2e:	f383 8811 	msr	BASEPRI, r3
    5e32:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    5e36:	4a12      	ldr	r2, [pc, #72]	; (5e80 <generic_hfclk_start+0x5c>)
    5e38:	6813      	ldr	r3, [r2, #0]
    5e3a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    5e3e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    5e42:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5e44:	d00c      	beq.n	5e60 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5e46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5e4a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5e4e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5e52:	f013 0301 	ands.w	r3, r3, #1
    5e56:	d003      	beq.n	5e60 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    5e58:	480a      	ldr	r0, [pc, #40]	; (5e84 <generic_hfclk_start+0x60>)
    5e5a:	f01a fb52 	bl	20502 <set_on_state>
			already_started = true;
    5e5e:	2301      	movs	r3, #1
	__asm__ volatile(
    5e60:	f381 8811 	msr	BASEPRI, r1
    5e64:	f3bf 8f6f 	isb	sy
	if (already_started) {
    5e68:	b123      	cbz	r3, 5e74 <generic_hfclk_start+0x50>
}
    5e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    5e6e:	2000      	movs	r0, #0
    5e70:	f7ff bfb0 	b.w	5dd4 <clkstarted_handle.constprop.0>
}
    5e74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5e78:	2001      	movs	r0, #1
    5e7a:	f017 bfd1 	b.w	1de20 <nrfx_clock_start>
    5e7e:	bf00      	nop
    5e80:	20001288 	.word	0x20001288
    5e84:	20001278 	.word	0x20001278

00005e88 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5e88:	4b09      	ldr	r3, [pc, #36]	; (5eb0 <generic_hfclk_stop+0x28>)
    5e8a:	f3bf 8f5b 	dmb	ish
    5e8e:	e853 2f00 	ldrex	r2, [r3]
    5e92:	f022 0102 	bic.w	r1, r2, #2
    5e96:	e843 1000 	strex	r0, r1, [r3]
    5e9a:	2800      	cmp	r0, #0
    5e9c:	d1f7      	bne.n	5e8e <generic_hfclk_stop+0x6>
    5e9e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    5ea2:	07d3      	lsls	r3, r2, #31
    5ea4:	d402      	bmi.n	5eac <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5ea6:	2001      	movs	r0, #1
    5ea8:	f017 bfec 	b.w	1de84 <nrfx_clock_stop>
}
    5eac:	4770      	bx	lr
    5eae:	bf00      	nop
    5eb0:	20001288 	.word	0x20001288

00005eb4 <api_blocking_start>:
{
    5eb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5eb6:	2200      	movs	r2, #0
    5eb8:	2301      	movs	r3, #1
    5eba:	e9cd 2302 	strd	r2, r3, [sp, #8]
    5ebe:	ab04      	add	r3, sp, #16
    5ec0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5ec4:	4a09      	ldr	r2, [pc, #36]	; (5eec <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5ec6:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5eca:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5ecc:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5ed0:	f01a fb50 	bl	20574 <api_start>
	if (err < 0) {
    5ed4:	2800      	cmp	r0, #0
    5ed6:	db05      	blt.n	5ee4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    5ed8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    5edc:	2300      	movs	r3, #0
    5ede:	4668      	mov	r0, sp
    5ee0:	f018 ff7a 	bl	1edd8 <z_impl_k_sem_take>
}
    5ee4:	b007      	add	sp, #28
    5ee6:	f85d fb04 	ldr.w	pc, [sp], #4
    5eea:	bf00      	nop
    5eec:	00020547 	.word	0x00020547

00005ef0 <z_nrf_clock_control_get_onoff>:
}
    5ef0:	4a02      	ldr	r2, [pc, #8]	; (5efc <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    5ef2:	b2c3      	uxtb	r3, r0
}
    5ef4:	201c      	movs	r0, #28
    5ef6:	fb03 2000 	mla	r0, r3, r0, r2
    5efa:	4770      	bx	lr
    5efc:	20001238 	.word	0x20001238

00005f00 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5f00:	4b09      	ldr	r3, [pc, #36]	; (5f28 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    5f02:	f3bf 8f5b 	dmb	ish
    5f06:	e853 2f00 	ldrex	r2, [r3]
    5f0a:	f042 0101 	orr.w	r1, r2, #1
    5f0e:	e843 1000 	strex	r0, r1, [r3]
    5f12:	2800      	cmp	r0, #0
    5f14:	d1f7      	bne.n	5f06 <z_nrf_clock_bt_ctlr_hf_request+0x6>
    5f16:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    5f1a:	0793      	lsls	r3, r2, #30
    5f1c:	d402      	bmi.n	5f24 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5f1e:	2001      	movs	r0, #1
    5f20:	f017 bf7e 	b.w	1de20 <nrfx_clock_start>
}
    5f24:	4770      	bx	lr
    5f26:	bf00      	nop
    5f28:	20001288 	.word	0x20001288

00005f2c <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5f2c:	4b09      	ldr	r3, [pc, #36]	; (5f54 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    5f2e:	f3bf 8f5b 	dmb	ish
    5f32:	e853 2f00 	ldrex	r2, [r3]
    5f36:	f022 0101 	bic.w	r1, r2, #1
    5f3a:	e843 1000 	strex	r0, r1, [r3]
    5f3e:	2800      	cmp	r0, #0
    5f40:	d1f7      	bne.n	5f32 <z_nrf_clock_bt_ctlr_hf_release+0x6>
    5f42:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    5f46:	0793      	lsls	r3, r2, #30
    5f48:	d402      	bmi.n	5f50 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5f4a:	2001      	movs	r0, #1
    5f4c:	f017 bf9a 	b.w	1de84 <nrfx_clock_stop>
}
    5f50:	4770      	bx	lr
    5f52:	bf00      	nop
    5f54:	20001288 	.word	0x20001288

00005f58 <z_nrf_clock_control_lf_on>:
{
    5f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5f5c:	493a      	ldr	r1, [pc, #232]	; (6048 <z_nrf_clock_control_lf_on+0xf0>)
    5f5e:	f3bf 8f5b 	dmb	ish
    5f62:	4606      	mov	r6, r0
    5f64:	2201      	movs	r2, #1
    5f66:	e851 3f00 	ldrex	r3, [r1]
    5f6a:	e841 2000 	strex	r0, r2, [r1]
    5f6e:	2800      	cmp	r0, #0
    5f70:	d1f9      	bne.n	5f66 <z_nrf_clock_control_lf_on+0xe>
    5f72:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5f76:	b933      	cbnz	r3, 5f86 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    5f78:	4934      	ldr	r1, [pc, #208]	; (604c <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    5f7a:	4835      	ldr	r0, [pc, #212]	; (6050 <z_nrf_clock_control_lf_on+0xf8>)
    5f7c:	604b      	str	r3, [r1, #4]
    5f7e:	60cb      	str	r3, [r1, #12]
    5f80:	608a      	str	r2, [r1, #8]
    5f82:	f019 fc34 	bl	1f7ee <onoff_request>
	switch (start_mode) {
    5f86:	1e73      	subs	r3, r6, #1
    5f88:	2b01      	cmp	r3, #1
    5f8a:	d832      	bhi.n	5ff2 <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    5f8c:	2e01      	cmp	r6, #1
    5f8e:	d107      	bne.n	5fa0 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5f90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f94:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5f98:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    5f9c:	2b01      	cmp	r3, #1
    5f9e:	d028      	beq.n	5ff2 <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5fa0:	f01e fc64 	bl	2486c <k_is_in_isr>
    5fa4:	4604      	mov	r4, r0
    5fa6:	b918      	cbnz	r0, 5fb0 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    5fa8:	4b2a      	ldr	r3, [pc, #168]	; (6054 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    5faa:	781b      	ldrb	r3, [r3, #0]
    5fac:	2b00      	cmp	r3, #0
    5fae:	d144      	bne.n	603a <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    5fb0:	f04f 0320 	mov.w	r3, #32
    5fb4:	f3ef 8511 	mrs	r5, BASEPRI
    5fb8:	f383 8811 	msr	BASEPRI, r3
    5fbc:	f3bf 8f6f 	isb	sy
    5fc0:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5fc2:	4f25      	ldr	r7, [pc, #148]	; (6058 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5fc4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 605c <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5fc8:	f8df 9094 	ldr.w	r9, [pc, #148]	; 6060 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5fcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5fd0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5fd4:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    5fd8:	03d2      	lsls	r2, r2, #15
    5fda:	d50c      	bpl.n	5ff6 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5fdc:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    5fe0:	2b01      	cmp	r3, #1
    5fe2:	d001      	beq.n	5fe8 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    5fe4:	2e01      	cmp	r6, #1
    5fe6:	d106      	bne.n	5ff6 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    5fe8:	b30c      	cbz	r4, 602e <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    5fea:	f385 8811 	msr	BASEPRI, r5
    5fee:	f3bf 8f6f 	isb	sy
}
    5ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    5ff6:	b1ac      	cbz	r4, 6024 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    5ff8:	4628      	mov	r0, r5
    5ffa:	f000 fc67 	bl	68cc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    5ffe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6002:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    6006:	2b00      	cmp	r3, #0
    6008:	d1e0      	bne.n	5fcc <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    600a:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    600c:	2900      	cmp	r1, #0
    600e:	d0dd      	beq.n	5fcc <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6010:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    6012:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    6014:	2301      	movs	r3, #1
    6016:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    601a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    601e:	f8c9 3000 	str.w	r3, [r9]
}
    6022:	e7d3      	b.n	5fcc <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    6024:	2100      	movs	r1, #0
    6026:	2001      	movs	r0, #1
    6028:	f018 fe8e 	bl	1ed48 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    602c:	e7e7      	b.n	5ffe <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    602e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6032:	2202      	movs	r2, #2
    6034:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6038:	e7db      	b.n	5ff2 <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    603a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    603e:	2202      	movs	r2, #2
    6040:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    6044:	4605      	mov	r5, r0
}
    6046:	e7bc      	b.n	5fc2 <z_nrf_clock_control_lf_on+0x6a>
    6048:	2000128c 	.word	0x2000128c
    604c:	20001228 	.word	0x20001228
    6050:	20001254 	.word	0x20001254
    6054:	2000309d 	.word	0x2000309d
    6058:	40000104 	.word	0x40000104
    605c:	e000e100 	.word	0xe000e100
    6060:	40000008 	.word	0x40000008

00006064 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    6064:	4a07      	ldr	r2, [pc, #28]	; (6084 <sys_clock_timeout_handler+0x20>)
{
    6066:	b410      	push	{r4}
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    6068:	6814      	ldr	r4, [r2, #0]
	return (a - b) & COUNTER_MAX;
    606a:	1b08      	subs	r0, r1, r4

	last_count += dticks * CYC_PER_TICK;
    606c:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    6070:	f023 031f 	bic.w	r3, r3, #31
    6074:	4423      	add	r3, r4
		 */
		z_nrf_rtc_timer_compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    6076:	f3c0 1052 	ubfx	r0, r0, #5, #19
						dticks : (dticks > 0));
}
    607a:	bc10      	pop	{r4}
	last_count += dticks * CYC_PER_TICK;
    607c:	6013      	str	r3, [r2, #0]
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    607e:	f019 b90b 	b.w	1f298 <z_clock_announce>
    6082:	bf00      	nop
    6084:	20001298 	.word	0x20001298

00006088 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    6088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_rtc_int_enable_check(NRF_RTC_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    608a:	4e10      	ldr	r6, [pc, #64]	; (60cc <rtc_nrf_isr+0x44>)
}
#endif // defined(DPPI_PRESENT)

NRF_STATIC_INLINE bool nrf_rtc_event_check(NRF_RTC_Type const * p_reg, nrf_rtc_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    608c:	4f10      	ldr	r7, [pc, #64]	; (60d0 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    608e:	2500      	movs	r5, #0
    6090:	4b10      	ldr	r3, [pc, #64]	; (60d4 <rtc_nrf_isr+0x4c>)
    6092:	2000      	movs	r0, #0
    6094:	681c      	ldr	r4, [r3, #0]
    6096:	461a      	mov	r2, r3
    6098:	b105      	cbz	r5, 609c <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    609a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    609c:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    60a0:	03c9      	lsls	r1, r1, #15
    60a2:	d5fa      	bpl.n	609a <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    60a4:	6839      	ldr	r1, [r7, #0]
    60a6:	2900      	cmp	r1, #0
    60a8:	d0f7      	beq.n	609a <rtc_nrf_isr+0x12>
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    60aa:	603d      	str	r5, [r7, #0]
    60ac:	6839      	ldr	r1, [r7, #0]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    60ae:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    60b2:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    60b6:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    60ba:	2501      	movs	r5, #1
			if (handler) {
    60bc:	b11c      	cbz	r4, 60c6 <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
    60be:	685a      	ldr	r2, [r3, #4]
    60c0:	6018      	str	r0, [r3, #0]
    60c2:	47a0      	blx	r4
    60c4:	e7e4      	b.n	6090 <rtc_nrf_isr+0x8>
    60c6:	6014      	str	r4, [r2, #0]
}
    60c8:	e7e7      	b.n	609a <rtc_nrf_isr+0x12>
    60ca:	bf00      	nop
    60cc:	40011000 	.word	0x40011000
    60d0:	40011140 	.word	0x40011140
    60d4:	20001290 	.word	0x20001290

000060d8 <set_absolute_alarm>:
{
    60d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    60dc:	0085      	lsls	r5, r0, #2
    60de:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    60e2:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
     return p_reg->COUNTER;
    60e6:	4f1b      	ldr	r7, [pc, #108]	; (6154 <set_absolute_alarm+0x7c>)
    return p_reg->CC[ch];
    60e8:	f8d5 3540 	ldr.w	r3, [r5, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    60ec:	f44f 3680 	mov.w	r6, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    60f0:	f021 447f 	bic.w	r4, r1, #4278190080	; 0xff000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    60f4:	4086      	lsls	r6, r0
    60f6:	46b8      	mov	r8, r7
     return p_reg->COUNTER;
    60f8:	f8d7 9504 	ldr.w	r9, [r7, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    60fc:	eba3 0309 	sub.w	r3, r3, r9
    6100:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    6104:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    6108:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    610a:	f8c5 2540 	str.w	r2, [r5, #1344]	; 0x540
    610e:	d102      	bne.n	6116 <set_absolute_alarm+0x3e>
	z_impl_k_busy_wait(usec_to_wait);
    6110:	200f      	movs	r0, #15
    6112:	f01e fbb1 	bl	24878 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    6116:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    611a:	1aa3      	subs	r3, r4, r2
    611c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    6120:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    6124:	bf88      	it	hi
    6126:	4614      	movhi	r4, r2
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    6128:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->EVTENSET = mask;
    612c:	f8c8 6344 	str.w	r6, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    6130:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
    6134:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    6138:	4599      	cmp	r9, r3
    613a:	d006      	beq.n	614a <set_absolute_alarm+0x72>
	return (a - b) & COUNTER_MAX;
    613c:	1ae3      	subs	r3, r4, r3
    613e:	3b02      	subs	r3, #2
    6140:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    6144:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    6148:	d801      	bhi.n	614e <set_absolute_alarm+0x76>
}
    614a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    614e:	4623      	mov	r3, r4
    6150:	e7d2      	b.n	60f8 <set_absolute_alarm+0x20>
    6152:	bf00      	nop
    6154:	40011000 	.word	0x40011000

00006158 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    6158:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    615a:	4d0f      	ldr	r5, [pc, #60]	; (6198 <z_clock_driver_init+0x40>)
    615c:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    615e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    6162:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    6166:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    616a:	4b0c      	ldr	r3, [pc, #48]	; (619c <z_clock_driver_init+0x44>)
    616c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6170:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    6174:	2101      	movs	r1, #1
    6176:	4622      	mov	r2, r4
    6178:	2011      	movs	r0, #17
    617a:	f000 fb1d 	bl	67b8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    617e:	2011      	movs	r0, #17
    6180:	f000 fae8 	bl	6754 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6184:	4a06      	ldr	r2, [pc, #24]	; (61a0 <z_clock_driver_init+0x48>)
    6186:	2301      	movs	r3, #1
    6188:	6013      	str	r3, [r2, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    618a:	2002      	movs	r0, #2
    618c:	602b      	str	r3, [r5, #0]
    618e:	f7ff fee3 	bl	5f58 <z_nrf_clock_control_lf_on>

	return 0;
}
    6192:	4620      	mov	r0, r4
    6194:	bd38      	pop	{r3, r4, r5, pc}
    6196:	bf00      	nop
    6198:	40011000 	.word	0x40011000
    619c:	e000e100 	.word	0xe000e100
    61a0:	40011008 	.word	0x40011008

000061a4 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    61a4:	4b14      	ldr	r3, [pc, #80]	; (61f8 <z_clock_set_timeout+0x54>)
    61a6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    61aa:	bf08      	it	eq
    61ac:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    61ae:	3801      	subs	r0, #1
    61b0:	2800      	cmp	r0, #0
    61b2:	dd1f      	ble.n	61f4 <z_clock_set_timeout+0x50>
    61b4:	4298      	cmp	r0, r3
    61b6:	bfa8      	it	ge
    61b8:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    61ba:	4b10      	ldr	r3, [pc, #64]	; (61fc <z_clock_set_timeout+0x58>)
    61bc:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    61c0:	4b0f      	ldr	r3, [pc, #60]	; (6200 <z_clock_set_timeout+0x5c>)
    61c2:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    61c4:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    61c6:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    61ca:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    61ce:	bf18      	it	ne
    61d0:	2000      	movne	r0, #0

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
	cyc += (CYC_PER_TICK - 1);
    61d2:	3320      	adds	r3, #32
	cc_data[chan].callback = handler;
    61d4:	4a0b      	ldr	r2, [pc, #44]	; (6204 <z_clock_set_timeout+0x60>)
	cyc += (CYC_PER_TICK - 1);
    61d6:	eb03 1040 	add.w	r0, r3, r0, lsl #5
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
    61da:	f020 031f 	bic.w	r3, r0, #31
	cc_data[chan].callback = handler;
    61de:	480a      	ldr	r0, [pc, #40]	; (6208 <z_clock_set_timeout+0x64>)
    61e0:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    61e2:	2000      	movs	r0, #0
    61e4:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    61e6:	4a09      	ldr	r2, [pc, #36]	; (620c <z_clock_set_timeout+0x68>)
    61e8:	4293      	cmp	r3, r2
    61ea:	bf94      	ite	ls
    61ec:	18c9      	addls	r1, r1, r3
    61ee:	1889      	addhi	r1, r1, r2
    61f0:	f7ff bf72 	b.w	60d8 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    61f4:	2000      	movs	r0, #0
    61f6:	e7e0      	b.n	61ba <z_clock_set_timeout+0x16>
    61f8:	0003ffff 	.word	0x0003ffff
    61fc:	40011000 	.word	0x40011000
    6200:	20001298 	.word	0x20001298
    6204:	20001290 	.word	0x20001290
    6208:	00006065 	.word	0x00006065
    620c:	007fffe0 	.word	0x007fffe0

00006210 <z_clock_elapsed>:
	__asm__ volatile(
    6210:	f04f 0220 	mov.w	r2, #32
    6214:	f3ef 8311 	mrs	r3, BASEPRI
    6218:	f382 8811 	msr	BASEPRI, r2
    621c:	f3bf 8f6f 	isb	sy
    6220:	4a06      	ldr	r2, [pc, #24]	; (623c <z_clock_elapsed+0x2c>)
    6222:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    6226:	4a06      	ldr	r2, [pc, #24]	; (6240 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    6228:	6812      	ldr	r2, [r2, #0]
    622a:	1a80      	subs	r0, r0, r2
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    622c:	f3c0 1052 	ubfx	r0, r0, #5, #19
	__asm__ volatile(
    6230:	f383 8811 	msr	BASEPRI, r3
    6234:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    6238:	4770      	bx	lr
    623a:	bf00      	nop
    623c:	40011000 	.word	0x40011000
    6240:	20001298 	.word	0x20001298

00006244 <z_timer_cycle_get_32>:
	__asm__ volatile(
    6244:	f04f 0320 	mov.w	r3, #32
    6248:	f3ef 8211 	mrs	r2, BASEPRI
    624c:	f383 8811 	msr	BASEPRI, r3
    6250:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    6254:	4906      	ldr	r1, [pc, #24]	; (6270 <z_timer_cycle_get_32+0x2c>)
    6256:	4b07      	ldr	r3, [pc, #28]	; (6274 <z_timer_cycle_get_32+0x30>)
    6258:	6808      	ldr	r0, [r1, #0]
    625a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    625e:	f382 8811 	msr	BASEPRI, r2
    6262:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    6266:	1a1b      	subs	r3, r3, r0
    6268:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    626c:	4418      	add	r0, r3
    626e:	4770      	bx	lr
    6270:	20001298 	.word	0x20001298
    6274:	40011000 	.word	0x40011000

00006278 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    6278:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    627a:	4c11      	ldr	r4, [pc, #68]	; (62c0 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    627c:	4a11      	ldr	r2, [pc, #68]	; (62c4 <_DoInit+0x4c>)
    627e:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    6280:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    6282:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6286:	4b10      	ldr	r3, [pc, #64]	; (62c8 <_DoInit+0x50>)
    6288:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    628a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    628c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    6290:	4a0e      	ldr	r2, [pc, #56]	; (62cc <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    6292:	490f      	ldr	r1, [pc, #60]	; (62d0 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    6294:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    6296:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    6298:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    629a:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    629c:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    629e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    62a0:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    62a2:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    62a4:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    62a6:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    62a8:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    62aa:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    62ac:	f01b fa5b 	bl	21766 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    62b0:	4908      	ldr	r1, [pc, #32]	; (62d4 <_DoInit+0x5c>)
    62b2:	4620      	mov	r0, r4
    62b4:	f01b fa57 	bl	21766 <strcpy>
  p->acID[6] = ' ';
    62b8:	2320      	movs	r3, #32
    62ba:	71a3      	strb	r3, [r4, #6]
}
    62bc:	bd10      	pop	{r4, pc}
    62be:	bf00      	nop
    62c0:	2000129c 	.word	0x2000129c
    62c4:	00026eb0 	.word	0x00026eb0
    62c8:	20002b3f 	.word	0x20002b3f
    62cc:	20002b2f 	.word	0x20002b2f
    62d0:	00026eb9 	.word	0x00026eb9
    62d4:	00026ebd 	.word	0x00026ebd

000062d8 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    62d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    62dc:	4f23      	ldr	r7, [pc, #140]	; (636c <SEGGER_RTT_WriteSkipNoLock+0x94>)
    62de:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    62e2:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    62e4:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    62e8:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    62ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    62ec:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    62ee:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    62f0:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    62f2:	d834      	bhi.n	635e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    62f4:	f8d2 a020 	ldr.w	sl, [r2, #32]
    62f8:	ebaa 0905 	sub.w	r9, sl, r5
    62fc:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    6300:	4294      	cmp	r4, r2
    6302:	d811      	bhi.n	6328 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    6304:	f04f 0918 	mov.w	r9, #24
    6308:	fb06 9309 	mla	r3, r6, r9, r9
    630c:	443b      	add	r3, r7
    630e:	4622      	mov	r2, r4
    6310:	6858      	ldr	r0, [r3, #4]
    6312:	4641      	mov	r1, r8
    6314:	4428      	add	r0, r5
    6316:	f01b fa66 	bl	217e6 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    631a:	fb09 7606 	mla	r6, r9, r6, r7
    631e:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    6320:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    6322:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    6324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    6328:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    632a:	429c      	cmp	r4, r3
    632c:	d81b      	bhi.n	6366 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    632e:	fb00 bb0b 	mla	fp, r0, fp, fp
    6332:	44bb      	add	fp, r7
    6334:	464a      	mov	r2, r9
    6336:	f8db 0004 	ldr.w	r0, [fp, #4]
    633a:	442c      	add	r4, r5
    633c:	4428      	add	r0, r5
    633e:	f01b fa52 	bl	217e6 <memcpy>
      if (NumBytes) {
    6342:	ebb4 040a 	subs.w	r4, r4, sl
    6346:	d006      	beq.n	6356 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
    6348:	f8db 0004 	ldr.w	r0, [fp, #4]
    634c:	4622      	mov	r2, r4
    634e:	eb08 0109 	add.w	r1, r8, r9
    6352:	f01b fa48 	bl	217e6 <memcpy>
      pRing->WrOff = NumBytes;
    6356:	2018      	movs	r0, #24
    6358:	fb00 7606 	mla	r6, r0, r6, r7
    635c:	e7e0      	b.n	6320 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    635e:	3b01      	subs	r3, #1
    6360:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    6362:	42a3      	cmp	r3, r4
    6364:	d2ce      	bcs.n	6304 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    6366:	2000      	movs	r0, #0
    6368:	e7dc      	b.n	6324 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    636a:	bf00      	nop
    636c:	2000129c 	.word	0x2000129c

00006370 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    6370:	4b03      	ldr	r3, [pc, #12]	; (6380 <SEGGER_RTT_HasDataUp+0x10>)
    6372:	2218      	movs	r2, #24
    6374:	fb02 3300 	mla	r3, r2, r0, r3
    6378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    637a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    637c:	1a80      	subs	r0, r0, r2
    637e:	4770      	bx	lr
    6380:	2000129c 	.word	0x2000129c

00006384 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    6384:	4b01      	ldr	r3, [pc, #4]	; (638c <uECC_get_rng+0x8>)
    6386:	6818      	ldr	r0, [r3, #0]
    6388:	4770      	bx	lr
    638a:	bf00      	nop
    638c:	20000170 	.word	0x20000170

00006390 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    6390:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    6392:	2208      	movs	r2, #8
{
    6394:	b089      	sub	sp, #36	; 0x24
    6396:	460c      	mov	r4, r1
    6398:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    639a:	f01a fad0 	bl	2093e <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    639e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    63a0:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    63a2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    63a4:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    63a6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    63a8:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    63aa:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    63ac:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    63ae:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    63b0:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    63b2:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    63b4:	2308      	movs	r3, #8
    63b6:	466a      	mov	r2, sp
    63b8:	4669      	mov	r1, sp
    63ba:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    63bc:	e9cd 7701 	strd	r7, r7, [sp, #4]
    63c0:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    63c2:	f01a f9be 	bl	20742 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    63c6:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    63c8:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    63ca:	466a      	mov	r2, sp
    63cc:	4631      	mov	r1, r6
    63ce:	4630      	mov	r0, r6
    63d0:	f01a f9b7 	bl	20742 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    63d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    63d6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    63d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    63da:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    63dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    63de:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    63e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    63e2:	4405      	add	r5, r0
	tmp[7] = 0;
    63e4:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    63e8:	466a      	mov	r2, sp
    63ea:	2308      	movs	r3, #8
    63ec:	4669      	mov	r1, sp
    63ee:	4668      	mov	r0, sp
    63f0:	f01a f9a7 	bl	20742 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    63f4:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    63f6:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    63f8:	2308      	movs	r3, #8
    63fa:	466a      	mov	r2, sp
    63fc:	4630      	mov	r0, r6
    63fe:	f01a f9a0 	bl	20742 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    6402:	6a23      	ldr	r3, [r4, #32]
    6404:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    6406:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6408:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    640a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    640c:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    640e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6410:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    6412:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6414:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6416:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6418:	2308      	movs	r3, #8
    641a:	466a      	mov	r2, sp
    641c:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    641e:	e9cd 7704 	strd	r7, r7, [sp, #16]
    6422:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6424:	f01a f98d 	bl	20742 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    6428:	6a63      	ldr	r3, [r4, #36]	; 0x24
    642a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    642c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    642e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    6430:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    6432:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6434:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    6436:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    6438:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    643a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    643c:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    643e:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    6442:	6a23      	ldr	r3, [r4, #32]
    6444:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6446:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6448:	2308      	movs	r3, #8
    644a:	466a      	mov	r2, sp
    644c:	4630      	mov	r0, r6
    644e:	f01a f978 	bl	20742 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    6452:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6454:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    6456:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6458:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    645a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    645c:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    645e:	6a23      	ldr	r3, [r4, #32]
    6460:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    6462:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6464:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6466:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6468:	2308      	movs	r3, #8
    646a:	466a      	mov	r2, sp
    646c:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    646e:	e9cd 7704 	strd	r7, r7, [sp, #16]
    6472:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6474:	f01a fa99 	bl	209aa <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    6478:	6b23      	ldr	r3, [r4, #48]	; 0x30
    647a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    647c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    647e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    6480:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6482:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    6484:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6486:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    6488:	6a63      	ldr	r3, [r4, #36]	; 0x24
    648a:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    648c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    648e:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6490:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6492:	2308      	movs	r3, #8
    6494:	466a      	mov	r2, sp
    6496:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    6498:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    649c:	f01a fa85 	bl	209aa <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    64a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    64a2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    64a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    64a6:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    64a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    64aa:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    64ac:	6a23      	ldr	r3, [r4, #32]
    64ae:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    64b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    64b2:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    64b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    64b6:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    64ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
    64bc:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    64be:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    64c0:	2308      	movs	r3, #8
    64c2:	466a      	mov	r2, sp
    64c4:	4630      	mov	r0, r6
    64c6:	f01a fa70 	bl	209aa <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    64ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    64cc:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    64ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    64d0:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    64d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    64d6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    64d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    64da:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    64dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    64de:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    64e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    64e4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    64e6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    64e8:	2308      	movs	r3, #8
    64ea:	466a      	mov	r2, sp
    64ec:	4630      	mov	r0, r6
    64ee:	f01a fa5c 	bl	209aa <uECC_vli_sub>

	if (carry < 0) {
    64f2:	1a2d      	subs	r5, r5, r0
    64f4:	d410      	bmi.n	6518 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    64f6:	4c0d      	ldr	r4, [pc, #52]	; (652c <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
    64f8:	b935      	cbnz	r5, 6508 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    64fa:	2208      	movs	r2, #8
    64fc:	4631      	mov	r1, r6
    64fe:	4620      	mov	r0, r4
    6500:	f01a fa29 	bl	20956 <uECC_vli_cmp_unsafe>
		while (carry || 
    6504:	2801      	cmp	r0, #1
    6506:	d00f      	beq.n	6528 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    6508:	2308      	movs	r3, #8
    650a:	4622      	mov	r2, r4
    650c:	4631      	mov	r1, r6
    650e:	4630      	mov	r0, r6
    6510:	f01a fa4b 	bl	209aa <uECC_vli_sub>
    6514:	1a2d      	subs	r5, r5, r0
    6516:	e7ef      	b.n	64f8 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    6518:	4a04      	ldr	r2, [pc, #16]	; (652c <vli_mmod_fast_secp256r1+0x19c>)
    651a:	2308      	movs	r3, #8
    651c:	4631      	mov	r1, r6
    651e:	4630      	mov	r0, r6
    6520:	f01a f90f 	bl	20742 <uECC_vli_add>
		while (carry < 0);
    6524:	182d      	adds	r5, r5, r0
    6526:	d4f8      	bmi.n	651a <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
    6528:	b009      	add	sp, #36	; 0x24
    652a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    652c:	00025388 	.word	0x00025388

00006530 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    6530:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    6532:	4e26      	ldr	r6, [pc, #152]	; (65cc <tc_aes128_set_encrypt_key+0x9c>)
{
    6534:	4607      	mov	r7, r0
    6536:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    6538:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    653a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    653c:	ad01      	add	r5, sp, #4
    653e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6540:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    6542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6544:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    6548:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    654c:	4638      	mov	r0, r7
    654e:	2f00      	cmp	r7, #0
    6550:	d038      	beq.n	65c4 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    6552:	2c00      	cmp	r4, #0
    6554:	d038      	beq.n	65c8 <tc_aes128_set_encrypt_key+0x98>
    6556:	1f38      	subs	r0, r7, #4
    6558:	4621      	mov	r1, r4
    655a:	4602      	mov	r2, r0
    655c:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    655e:	784b      	ldrb	r3, [r1, #1]
    6560:	780d      	ldrb	r5, [r1, #0]
    6562:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    6564:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    6568:	78cd      	ldrb	r5, [r1, #3]
    656a:	432b      	orrs	r3, r5
    656c:	788d      	ldrb	r5, [r1, #2]
    656e:	3104      	adds	r1, #4
    6570:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    6574:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    6576:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    657a:	d1f0      	bne.n	655e <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    657c:	4c14      	ldr	r4, [pc, #80]	; (65d0 <tc_aes128_set_encrypt_key+0xa0>)
    657e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    6580:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    6582:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    6584:	d116      	bne.n	65b4 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    6586:	f3c3 4207 	ubfx	r2, r3, #16, #8
    658a:	5ca5      	ldrb	r5, [r4, r2]
    658c:	0e1a      	lsrs	r2, r3, #24
    658e:	5ca2      	ldrb	r2, [r4, r2]
    6590:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    6594:	f3c3 2507 	ubfx	r5, r3, #8, #8
    6598:	b2db      	uxtb	r3, r3
    659a:	5d65      	ldrb	r5, [r4, r5]
    659c:	5ce3      	ldrb	r3, [r4, r3]
    659e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    65a2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    65a6:	ad0c      	add	r5, sp, #48	; 0x30
    65a8:	f021 0303 	bic.w	r3, r1, #3
    65ac:	442b      	add	r3, r5
    65ae:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    65b2:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    65b4:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    65b8:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    65ba:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    65bc:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    65be:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    65c0:	d1de      	bne.n	6580 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
    65c2:	2001      	movs	r0, #1
}
    65c4:	b00d      	add	sp, #52	; 0x34
    65c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    65c8:	4620      	mov	r0, r4
    65ca:	e7fb      	b.n	65c4 <tc_aes128_set_encrypt_key+0x94>
    65cc:	00025168 	.word	0x00025168
    65d0:	00026ec4 	.word	0x00026ec4

000065d4 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    65d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    65d8:	4615      	mov	r5, r2
    65da:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    65dc:	4606      	mov	r6, r0
    65de:	2800      	cmp	r0, #0
    65e0:	d058      	beq.n	6694 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    65e2:	2900      	cmp	r1, #0
    65e4:	d059      	beq.n	669a <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    65e6:	2a00      	cmp	r2, #0
    65e8:	d059      	beq.n	669e <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    65ea:	2310      	movs	r3, #16
    65ec:	460a      	mov	r2, r1
    65ee:	4668      	mov	r0, sp
    65f0:	4619      	mov	r1, r3
    65f2:	f019 ffe2 	bl	205ba <_copy>
	add_round_key(state, s->words);
    65f6:	4629      	mov	r1, r5
    65f8:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    65fa:	4c2a      	ldr	r4, [pc, #168]	; (66a4 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    65fc:	f01a fee7 	bl	213ce <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    6600:	f105 0710 	add.w	r7, r5, #16
    6604:	46a1      	mov	r9, r4
    6606:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    6608:	46e8      	mov	r8, sp
{
    660a:	466a      	mov	r2, sp
    660c:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    660e:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    6610:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    6612:	5c61      	ldrb	r1, [r4, r1]
    6614:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    6618:	d1f9      	bne.n	660e <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    661a:	4668      	mov	r0, sp
    661c:	f01a ff1c 	bl	21458 <shift_rows>
	mult_row_column(t, s);
    6620:	4669      	mov	r1, sp
    6622:	a804      	add	r0, sp, #16
    6624:	f01a ff51 	bl	214ca <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    6628:	a901      	add	r1, sp, #4
    662a:	a805      	add	r0, sp, #20
    662c:	f01a ff4d 	bl	214ca <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    6630:	a902      	add	r1, sp, #8
    6632:	a806      	add	r0, sp, #24
    6634:	f01a ff49 	bl	214ca <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    6638:	a903      	add	r1, sp, #12
    663a:	a807      	add	r0, sp, #28
    663c:	f01a ff45 	bl	214ca <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    6640:	2310      	movs	r3, #16
    6642:	4619      	mov	r1, r3
    6644:	eb0d 0203 	add.w	r2, sp, r3
    6648:	4668      	mov	r0, sp
    664a:	f019 ffb6 	bl	205ba <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    664e:	4639      	mov	r1, r7
    6650:	4668      	mov	r0, sp
    6652:	3710      	adds	r7, #16
    6654:	f01a febb 	bl	213ce <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    6658:	42af      	cmp	r7, r5
    665a:	d1d5      	bne.n	6608 <tc_aes_encrypt+0x34>
    665c:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    665e:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    6662:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    6664:	f819 3003 	ldrb.w	r3, [r9, r3]
    6668:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    666c:	d1f7      	bne.n	665e <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    666e:	4668      	mov	r0, sp
    6670:	f01a fef2 	bl	21458 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    6674:	4629      	mov	r1, r5
    6676:	4668      	mov	r0, sp
    6678:	f01a fea9 	bl	213ce <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    667c:	2310      	movs	r3, #16
    667e:	4619      	mov	r1, r3
    6680:	466a      	mov	r2, sp
    6682:	4630      	mov	r0, r6
    6684:	f019 ff99 	bl	205ba <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    6688:	4668      	mov	r0, sp
    668a:	2210      	movs	r2, #16
    668c:	4621      	mov	r1, r4
    668e:	f019 ffa1 	bl	205d4 <_set>

	return TC_CRYPTO_SUCCESS;
    6692:	2001      	movs	r0, #1
}
    6694:	b009      	add	sp, #36	; 0x24
    6696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    669a:	4608      	mov	r0, r1
    669c:	e7fa      	b.n	6694 <tc_aes_encrypt+0xc0>
    669e:	4610      	mov	r0, r2
    66a0:	e7f8      	b.n	6694 <tc_aes_encrypt+0xc0>
    66a2:	bf00      	nop
    66a4:	00026ec4 	.word	0x00026ec4

000066a8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    66a8:	4a0a      	ldr	r2, [pc, #40]	; (66d4 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    66aa:	490b      	ldr	r1, [pc, #44]	; (66d8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    66ac:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    66ae:	6809      	ldr	r1, [r1, #0]
    66b0:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    66b4:	4909      	ldr	r1, [pc, #36]	; (66dc <arch_swap+0x34>)
	_current->arch.basepri = key;
    66b6:	67d8      	str	r0, [r3, #124]	; 0x7c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    66b8:	684b      	ldr	r3, [r1, #4]
    66ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    66be:	604b      	str	r3, [r1, #4]
    66c0:	2300      	movs	r3, #0
    66c2:	f383 8811 	msr	BASEPRI, r3
    66c6:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    66ca:	6893      	ldr	r3, [r2, #8]
}
    66cc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    66d0:	4770      	bx	lr
    66d2:	bf00      	nop
    66d4:	20002950 	.word	0x20002950
    66d8:	000269d4 	.word	0x000269d4
    66dc:	e000ed00 	.word	0xe000ed00

000066e0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    66e0:	4912      	ldr	r1, [pc, #72]	; (672c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    66e2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    66e4:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    66e8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    66ea:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    66ee:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    66f2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    66f4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    66f8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    66fc:	4f0c      	ldr	r7, [pc, #48]	; (6730 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    66fe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    6702:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    6704:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    6706:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    6708:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
    670a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    670c:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    670e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    6712:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    6714:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    6716:	f000 fbe9 	bl	6eec <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    671a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    671e:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    6722:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    6726:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    672a:	4770      	bx	lr
    ldr r1, =_kernel
    672c:	20002950 	.word	0x20002950
    ldr v4, =_SCS_ICSR
    6730:	e000ed04 	.word	0xe000ed04

00006734 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    6734:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    6738:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    673a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    673e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    6742:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    6744:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    6748:	2902      	cmp	r1, #2
    beq _oops
    674a:	d0ff      	beq.n	674c <_oops>

0000674c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    674c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    674e:	f01a ffff 	bl	21750 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    6752:	bd01      	pop	{r0, pc}

00006754 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    6754:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6756:	2b00      	cmp	r3, #0
    6758:	db08      	blt.n	676c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    675a:	2201      	movs	r2, #1
    675c:	f000 001f 	and.w	r0, r0, #31
    6760:	fa02 f000 	lsl.w	r0, r2, r0
    6764:	095b      	lsrs	r3, r3, #5
    6766:	4a02      	ldr	r2, [pc, #8]	; (6770 <arch_irq_enable+0x1c>)
    6768:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    676c:	4770      	bx	lr
    676e:	bf00      	nop
    6770:	e000e100 	.word	0xe000e100

00006774 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    6774:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6776:	2b00      	cmp	r3, #0
    6778:	db0d      	blt.n	6796 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    677a:	2201      	movs	r2, #1
    677c:	095b      	lsrs	r3, r3, #5
    677e:	f000 001f 	and.w	r0, r0, #31
    6782:	fa02 f000 	lsl.w	r0, r2, r0
    6786:	3320      	adds	r3, #32
    6788:	4a03      	ldr	r2, [pc, #12]	; (6798 <arch_irq_disable+0x24>)
    678a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    678e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6792:	f3bf 8f6f 	isb	sy
}
    6796:	4770      	bx	lr
    6798:	e000e100 	.word	0xe000e100

0000679c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    679c:	4b05      	ldr	r3, [pc, #20]	; (67b4 <arch_irq_is_enabled+0x18>)
    679e:	0942      	lsrs	r2, r0, #5
    67a0:	f000 001f 	and.w	r0, r0, #31
    67a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    67a8:	2301      	movs	r3, #1
    67aa:	fa03 f000 	lsl.w	r0, r3, r0
}
    67ae:	4010      	ands	r0, r2
    67b0:	4770      	bx	lr
    67b2:	bf00      	nop
    67b4:	e000e100 	.word	0xe000e100

000067b8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    67b8:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    67ba:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    67bc:	bfa8      	it	ge
    67be:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    67c2:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    67c6:	bfb8      	it	lt
    67c8:	4b06      	ldrlt	r3, [pc, #24]	; (67e4 <z_arm_irq_priority_set+0x2c>)
    67ca:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    67ce:	bfac      	ite	ge
    67d0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    67d4:	f000 000f 	andlt.w	r0, r0, #15
    67d8:	b2c9      	uxtb	r1, r1
    67da:	bfb4      	ite	lt
    67dc:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    67de:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    67e2:	4770      	bx	lr
    67e4:	e000ed14 	.word	0xe000ed14

000067e8 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    67e8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    67ea:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    67ec:	4b04      	ldr	r3, [pc, #16]	; (6800 <_arch_isr_direct_pm+0x18>)
    67ee:	6a58      	ldr	r0, [r3, #36]	; 0x24
    67f0:	b118      	cbz	r0, 67fa <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    67f2:	2200      	movs	r2, #0
    67f4:	625a      	str	r2, [r3, #36]	; 0x24
		z_sys_power_save_idle_exit(idle_val);
    67f6:	f01d fdbe 	bl	24376 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    67fa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    67fc:	bd08      	pop	{r3, pc}
    67fe:	bf00      	nop
    6800:	20002950 	.word	0x20002950

00006804 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    6804:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    6808:	9b00      	ldr	r3, [sp, #0]
    680a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    680e:	490a      	ldr	r1, [pc, #40]	; (6838 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    6810:	9b01      	ldr	r3, [sp, #4]
    6812:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    6816:	9b02      	ldr	r3, [sp, #8]
    6818:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    681c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    6820:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    6824:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    6828:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    682c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    682e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    6830:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    6832:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    6834:	4770      	bx	lr
    6836:	bf00      	nop
    6838:	0001f881 	.word	0x0001f881

0000683c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    683c:	4a0b      	ldr	r2, [pc, #44]	; (686c <z_check_thread_stack_fail+0x30>)
{
    683e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    6840:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
    6842:	b190      	cbz	r0, 686a <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    6844:	f113 0f16 	cmn.w	r3, #22
    6848:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
    684a:	d005      	beq.n	6858 <z_check_thread_stack_fail+0x1c>
    684c:	f1a0 0220 	sub.w	r2, r0, #32
    6850:	429a      	cmp	r2, r3
    6852:	d806      	bhi.n	6862 <z_check_thread_stack_fail+0x26>
    6854:	4283      	cmp	r3, r0
    6856:	d204      	bcs.n	6862 <z_check_thread_stack_fail+0x26>
    6858:	4281      	cmp	r1, r0
    685a:	bf2c      	ite	cs
    685c:	2100      	movcs	r1, #0
    685e:	2101      	movcc	r1, #1
    6860:	e000      	b.n	6864 <z_check_thread_stack_fail+0x28>
    6862:	2100      	movs	r1, #0
    6864:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    6866:	bf08      	it	eq
    6868:	2000      	moveq	r0, #0
}
    686a:	4770      	bx	lr
    686c:	20002950 	.word	0x20002950

00006870 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    6870:	b508      	push	{r3, lr}
    6872:	4604      	mov	r4, r0
    6874:	460e      	mov	r6, r1
    6876:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    6878:	f000 fb2c 	bl	6ed4 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    687c:	4b08      	ldr	r3, [pc, #32]	; (68a0 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    687e:	4620      	mov	r0, r4
	_current = main_thread;
    6880:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    6882:	f000 fb33 	bl	6eec <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    6886:	4628      	mov	r0, r5
    6888:	f386 8809 	msr	PSP, r6
    688c:	2100      	movs	r1, #0
    688e:	b663      	cpsie	if
    6890:	f381 8811 	msr	BASEPRI, r1
    6894:	f3bf 8f6f 	isb	sy
    6898:	2200      	movs	r2, #0
    689a:	2300      	movs	r3, #0
    689c:	f018 fff0 	bl	1f880 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    68a0:	20002950 	.word	0x20002950

000068a4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    68a4:	4901      	ldr	r1, [pc, #4]	; (68ac <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    68a6:	2210      	movs	r2, #16
	str	r2, [r1]
    68a8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    68aa:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    68ac:	e000ed10 	.word	0xe000ed10

000068b0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    68b0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    68b2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    68b4:	f380 8811 	msr	BASEPRI, r0
	isb
    68b8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    68bc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    68c0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    68c2:	b662      	cpsie	i
	isb
    68c4:	f3bf 8f6f 	isb	sy

	bx	lr
    68c8:	4770      	bx	lr
    68ca:	bf00      	nop

000068cc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    68cc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    68ce:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    68d0:	f381 8811 	msr	BASEPRI, r1

	wfe
    68d4:	bf20      	wfe

	msr	BASEPRI, r0
    68d6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    68da:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    68dc:	4770      	bx	lr
    68de:	bf00      	nop

000068e0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    68e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    68e2:	4606      	mov	r6, r0

	if (esf != NULL) {
    68e4:	460c      	mov	r4, r1
    68e6:	b301      	cbz	r1, 692a <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    68e8:	4b13      	ldr	r3, [pc, #76]	; (6938 <z_arm_fatal_error+0x58>)
    68ea:	4d14      	ldr	r5, [pc, #80]	; (693c <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    68ec:	4814      	ldr	r0, [pc, #80]	; (6940 <z_arm_fatal_error+0x60>)
    68ee:	1aed      	subs	r5, r5, r3
    68f0:	08ed      	lsrs	r5, r5, #3
    68f2:	01ad      	lsls	r5, r5, #6
    68f4:	f045 0501 	orr.w	r5, r5, #1
    68f8:	f8ad 5000 	strh.w	r5, [sp]
    68fc:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    6900:	6809      	ldr	r1, [r1, #0]
    6902:	f019 faf6 	bl	1fef2 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    6906:	f8ad 5000 	strh.w	r5, [sp]
    690a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    690e:	68e1      	ldr	r1, [r4, #12]
    6910:	480c      	ldr	r0, [pc, #48]	; (6944 <z_arm_fatal_error+0x64>)
    6912:	f019 faee 	bl	1fef2 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    6916:	69e1      	ldr	r1, [r4, #28]
    6918:	480b      	ldr	r0, [pc, #44]	; (6948 <z_arm_fatal_error+0x68>)
    691a:	462a      	mov	r2, r5
    691c:	f019 fabc 	bl	1fe98 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    6920:	69a1      	ldr	r1, [r4, #24]
    6922:	480a      	ldr	r0, [pc, #40]	; (694c <z_arm_fatal_error+0x6c>)
    6924:	462a      	mov	r2, r5
    6926:	f019 fab7 	bl	1fe98 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    692a:	4621      	mov	r1, r4
    692c:	4630      	mov	r0, r6
}
    692e:	b002      	add	sp, #8
    6930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    6934:	f017 bbd8 	b.w	1e0e8 <z_fatal_error>
    6938:	00024fd8 	.word	0x00024fd8
    693c:	00025110 	.word	0x00025110
    6940:	00026fc4 	.word	0x00026fc4
    6944:	00026ff3 	.word	0x00026ff3
    6948:	00027022 	.word	0x00027022
    694c:	00027031 	.word	0x00027031

00006950 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    6950:	bf30      	wfi
    b z_SysNmiOnReset
    6952:	f7ff bffd 	b.w	6950 <z_SysNmiOnReset>
    6956:	bf00      	nop

00006958 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6958:	4a0e      	ldr	r2, [pc, #56]	; (6994 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    695a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    695c:	4b0e      	ldr	r3, [pc, #56]	; (6998 <z_arm_prep_c+0x40>)
    695e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    6962:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    6964:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6968:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    696c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6970:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    6974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    6978:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    697c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    6980:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    6984:	f017 fc4a 	bl	1e21c <z_bss_zero>
	z_data_copy();
    6988:	f018 fb94 	bl	1f0b4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    698c:	f000 fa74 	bl	6e78 <z_arm_interrupt_init>
	z_cstart();
    6990:	f017 fc68 	bl	1e264 <z_cstart>
    6994:	00000000 	.word	0x00000000
    6998:	e000ed00 	.word	0xe000ed00

0000699c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    699c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    699e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    69a0:	4a0b      	ldr	r2, [pc, #44]	; (69d0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    69a2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    69a4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    69a6:	bf1e      	ittt	ne
	movne	r1, #0
    69a8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    69aa:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_sys_power_save_idle_exit
    69ac:	f01d fce3 	blne	24376 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    69b0:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    69b2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    69b6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    69ba:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    69be:	4905      	ldr	r1, [pc, #20]	; (69d4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    69c0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    69c2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    69c4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    69c6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    69ca:	4903      	ldr	r1, [pc, #12]	; (69d8 <_isr_wrapper+0x3c>)
	bx r1
    69cc:	4708      	bx	r1
    69ce:	0000      	.short	0x0000
	ldr r2, =_kernel
    69d0:	20002950 	.word	0x20002950
	ldr r1, =_sw_isr_table
    69d4:	00024e1c 	.word	0x00024e1c
	ldr r1, =z_arm_int_exit
    69d8:	00006e5d 	.word	0x00006e5d

000069dc <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    69dc:	f01a ff54 	bl	21888 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    69e0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    69e2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    69e6:	4808      	ldr	r0, [pc, #32]	; (6a08 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    69e8:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    69ec:	1840      	adds	r0, r0, r1
    msr PSP, r0
    69ee:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    69f2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    69f6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    69f8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    69fa:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    69fe:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    6a02:	f7ff ffa9 	bl	6958 <z_arm_prep_c>
    6a06:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    6a08:	200047e0 	.word	0x200047e0

00006a0c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    6a0c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    6a10:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    6a14:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    6a16:	4672      	mov	r2, lr
	bl z_arm_fault
    6a18:	f000 f94a 	bl	6cb0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    6a1c:	bd01      	pop	{r0, pc}
    6a1e:	bf00      	nop

00006a20 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    6a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a24:	4b33      	ldr	r3, [pc, #204]	; (6af4 <mem_manage_fault+0xd4>)
    6a26:	4c34      	ldr	r4, [pc, #208]	; (6af8 <mem_manage_fault+0xd8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6a28:	4d34      	ldr	r5, [pc, #208]	; (6afc <mem_manage_fault+0xdc>)
    6a2a:	1ae4      	subs	r4, r4, r3
    6a2c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    6a2e:	01a4      	lsls	r4, r4, #6
    6a30:	f044 0901 	orr.w	r9, r4, #1
{
    6a34:	4607      	mov	r7, r0
    6a36:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    6a38:	4831      	ldr	r0, [pc, #196]	; (6b00 <mem_manage_fault+0xe0>)
    6a3a:	4649      	mov	r1, r9
{
    6a3c:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    6a3e:	f019 fa1e 	bl	1fe7e <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6a42:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6a44:	06d0      	lsls	r0, r2, #27
    6a46:	d503      	bpl.n	6a50 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    6a48:	482e      	ldr	r0, [pc, #184]	; (6b04 <mem_manage_fault+0xe4>)
    6a4a:	4649      	mov	r1, r9
    6a4c:	f019 fa17 	bl	1fe7e <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    6a50:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6a52:	0719      	lsls	r1, r3, #28
    6a54:	d504      	bpl.n	6a60 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    6a56:	482c      	ldr	r0, [pc, #176]	; (6b08 <mem_manage_fault+0xe8>)
    6a58:	f044 0101 	orr.w	r1, r4, #1
    6a5c:	f019 fa0f 	bl	1fe7e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    6a60:	4d26      	ldr	r5, [pc, #152]	; (6afc <mem_manage_fault+0xdc>)
    6a62:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6a64:	079a      	lsls	r2, r3, #30
    6a66:	d535      	bpl.n	6ad4 <mem_manage_fault+0xb4>
		PR_FAULT_INFO("  Data Access Violation");
    6a68:	f044 0a01 	orr.w	sl, r4, #1
    6a6c:	4827      	ldr	r0, [pc, #156]	; (6b0c <mem_manage_fault+0xec>)
    6a6e:	4651      	mov	r1, sl
    6a70:	f019 fa05 	bl	1fe7e <log_0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    6a74:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    6a78:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6a7a:	061b      	lsls	r3, r3, #24
    6a7c:	d50b      	bpl.n	6a96 <mem_manage_fault+0x76>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    6a7e:	4824      	ldr	r0, [pc, #144]	; (6b10 <mem_manage_fault+0xf0>)
    6a80:	4652      	mov	r2, sl
    6a82:	4649      	mov	r1, r9
    6a84:	f019 fa08 	bl	1fe98 <log_1>
			if (from_hard_fault) {
    6a88:	f1b8 0f00 	cmp.w	r8, #0
    6a8c:	d003      	beq.n	6a96 <mem_manage_fault+0x76>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    6a8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6a90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6a94:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    6a96:	4d19      	ldr	r5, [pc, #100]	; (6afc <mem_manage_fault+0xdc>)
    6a98:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6a9a:	07d0      	lsls	r0, r2, #31
    6a9c:	d504      	bpl.n	6aa8 <mem_manage_fault+0x88>
		PR_FAULT_INFO("  Instruction Access Violation");
    6a9e:	481d      	ldr	r0, [pc, #116]	; (6b14 <mem_manage_fault+0xf4>)
    6aa0:	f044 0101 	orr.w	r1, r4, #1
    6aa4:	f019 f9eb 	bl	1fe7e <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    6aa8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6aaa:	0699      	lsls	r1, r3, #26
    6aac:	d504      	bpl.n	6ab8 <mem_manage_fault+0x98>
		PR_FAULT_INFO(
    6aae:	481a      	ldr	r0, [pc, #104]	; (6b18 <mem_manage_fault+0xf8>)
    6ab0:	f044 0101 	orr.w	r1, r4, #1
    6ab4:	f019 f9e3 	bl	1fe7e <log_0>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    6ab8:	4b10      	ldr	r3, [pc, #64]	; (6afc <mem_manage_fault+0xdc>)
    6aba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6abc:	06d2      	lsls	r2, r2, #27
    6abe:	d40c      	bmi.n	6ada <mem_manage_fault+0xba>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6ac0:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    6ac2:	4a0e      	ldr	r2, [pc, #56]	; (6afc <mem_manage_fault+0xdc>)
    6ac4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6ac6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    6aca:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    6acc:	2300      	movs	r3, #0
    6ace:	7033      	strb	r3, [r6, #0]

	return reason;
}
    6ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
    6ad4:	f06f 0915 	mvn.w	r9, #21
    6ad8:	e7dd      	b.n	6a96 <mem_manage_fault+0x76>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    6ada:	685b      	ldr	r3, [r3, #4]
    6adc:	051b      	lsls	r3, r3, #20
    6ade:	d5ef      	bpl.n	6ac0 <mem_manage_fault+0xa0>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    6ae0:	4639      	mov	r1, r7
    6ae2:	4648      	mov	r0, r9
    6ae4:	f7ff feaa 	bl	683c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    6ae8:	2800      	cmp	r0, #0
    6aea:	d0e9      	beq.n	6ac0 <mem_manage_fault+0xa0>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    6aec:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    6af0:	2002      	movs	r0, #2
    6af2:	e7e6      	b.n	6ac2 <mem_manage_fault+0xa2>
    6af4:	00024fd8 	.word	0x00024fd8
    6af8:	00025110 	.word	0x00025110
    6afc:	e000ed00 	.word	0xe000ed00
    6b00:	0002705f 	.word	0x0002705f
    6b04:	00027075 	.word	0x00027075
    6b08:	000270a8 	.word	0x000270a8
    6b0c:	000270bb 	.word	0x000270bb
    6b10:	000270d3 	.word	0x000270d3
    6b14:	000270e9 	.word	0x000270e9
    6b18:	00027108 	.word	0x00027108

00006b1c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    6b1c:	b570      	push	{r4, r5, r6, lr}
    6b1e:	4b23      	ldr	r3, [pc, #140]	; (6bac <usage_fault.isra.0+0x90>)
    6b20:	4c23      	ldr	r4, [pc, #140]	; (6bb0 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6b22:	4d24      	ldr	r5, [pc, #144]	; (6bb4 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    6b24:	4824      	ldr	r0, [pc, #144]	; (6bb8 <usage_fault.isra.0+0x9c>)
    6b26:	1ae4      	subs	r4, r4, r3
    6b28:	08e4      	lsrs	r4, r4, #3
    6b2a:	01a4      	lsls	r4, r4, #6
    6b2c:	f044 0601 	orr.w	r6, r4, #1
    6b30:	4631      	mov	r1, r6
    6b32:	f019 f9a4 	bl	1fe7e <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6b36:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6b38:	0193      	lsls	r3, r2, #6
    6b3a:	d503      	bpl.n	6b44 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    6b3c:	481f      	ldr	r0, [pc, #124]	; (6bbc <usage_fault.isra.0+0xa0>)
    6b3e:	4631      	mov	r1, r6
    6b40:	f019 f99d 	bl	1fe7e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    6b44:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b46:	01dd      	lsls	r5, r3, #7
    6b48:	d504      	bpl.n	6b54 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    6b4a:	481d      	ldr	r0, [pc, #116]	; (6bc0 <usage_fault.isra.0+0xa4>)
    6b4c:	f044 0101 	orr.w	r1, r4, #1
    6b50:	f019 f995 	bl	1fe7e <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    6b54:	4d17      	ldr	r5, [pc, #92]	; (6bb4 <usage_fault.isra.0+0x98>)
    6b56:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6b58:	0310      	lsls	r0, r2, #12
    6b5a:	d504      	bpl.n	6b66 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    6b5c:	4819      	ldr	r0, [pc, #100]	; (6bc4 <usage_fault.isra.0+0xa8>)
    6b5e:	f044 0101 	orr.w	r1, r4, #1
    6b62:	f019 f98c 	bl	1fe7e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    6b66:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b68:	0359      	lsls	r1, r3, #13
    6b6a:	d504      	bpl.n	6b76 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    6b6c:	4816      	ldr	r0, [pc, #88]	; (6bc8 <usage_fault.isra.0+0xac>)
    6b6e:	f044 0101 	orr.w	r1, r4, #1
    6b72:	f019 f984 	bl	1fe7e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    6b76:	4d0f      	ldr	r5, [pc, #60]	; (6bb4 <usage_fault.isra.0+0x98>)
    6b78:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6b7a:	0392      	lsls	r2, r2, #14
    6b7c:	d504      	bpl.n	6b88 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    6b7e:	4813      	ldr	r0, [pc, #76]	; (6bcc <usage_fault.isra.0+0xb0>)
    6b80:	f044 0101 	orr.w	r1, r4, #1
    6b84:	f019 f97b 	bl	1fe7e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    6b88:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b8a:	03db      	lsls	r3, r3, #15
    6b8c:	d504      	bpl.n	6b98 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    6b8e:	4810      	ldr	r0, [pc, #64]	; (6bd0 <usage_fault.isra.0+0xb4>)
    6b90:	f044 0101 	orr.w	r1, r4, #1
    6b94:	f019 f973 	bl	1fe7e <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6b98:	4a06      	ldr	r2, [pc, #24]	; (6bb4 <usage_fault.isra.0+0x98>)
    6b9a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6b9c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    6ba0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    6ba4:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    6ba6:	2000      	movs	r0, #0
    6ba8:	bd70      	pop	{r4, r5, r6, pc}
    6baa:	bf00      	nop
    6bac:	00024fd8 	.word	0x00024fd8
    6bb0:	00025110 	.word	0x00025110
    6bb4:	e000ed00 	.word	0xe000ed00
    6bb8:	00027137 	.word	0x00027137
    6bbc:	0002714f 	.word	0x0002714f
    6bc0:	00027162 	.word	0x00027162
    6bc4:	0002717c 	.word	0x0002717c
    6bc8:	0002719a 	.word	0x0002719a
    6bcc:	000271bf 	.word	0x000271bf
    6bd0:	000271d9 	.word	0x000271d9

00006bd4 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6bd8:	4b2a      	ldr	r3, [pc, #168]	; (6c84 <bus_fault.isra.0+0xb0>)
    6bda:	4c2b      	ldr	r4, [pc, #172]	; (6c88 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6bdc:	4d2b      	ldr	r5, [pc, #172]	; (6c8c <bus_fault.isra.0+0xb8>)
    6bde:	1ae4      	subs	r4, r4, r3
    6be0:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    6be2:	01a4      	lsls	r4, r4, #6
    6be4:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6be8:	4607      	mov	r7, r0
    6bea:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    6bec:	4828      	ldr	r0, [pc, #160]	; (6c90 <bus_fault.isra.0+0xbc>)
    6bee:	4641      	mov	r1, r8
    6bf0:	f019 f945 	bl	1fe7e <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6bf4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6bf6:	04d1      	lsls	r1, r2, #19
    6bf8:	d503      	bpl.n	6c02 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    6bfa:	4826      	ldr	r0, [pc, #152]	; (6c94 <bus_fault.isra.0+0xc0>)
    6bfc:	4641      	mov	r1, r8
    6bfe:	f019 f93e 	bl	1fe7e <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    6c02:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6c04:	051a      	lsls	r2, r3, #20
    6c06:	d504      	bpl.n	6c12 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    6c08:	4823      	ldr	r0, [pc, #140]	; (6c98 <bus_fault.isra.0+0xc4>)
    6c0a:	f044 0101 	orr.w	r1, r4, #1
    6c0e:	f019 f936 	bl	1fe7e <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    6c12:	4d1e      	ldr	r5, [pc, #120]	; (6c8c <bus_fault.isra.0+0xb8>)
    6c14:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6c16:	059b      	lsls	r3, r3, #22
    6c18:	d512      	bpl.n	6c40 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    6c1a:	f044 0801 	orr.w	r8, r4, #1
    6c1e:	481f      	ldr	r0, [pc, #124]	; (6c9c <bus_fault.isra.0+0xc8>)
    6c20:	4641      	mov	r1, r8
    6c22:	f019 f92c 	bl	1fe7e <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    6c26:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    6c28:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6c2a:	0418      	lsls	r0, r3, #16
    6c2c:	d508      	bpl.n	6c40 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    6c2e:	481c      	ldr	r0, [pc, #112]	; (6ca0 <bus_fault.isra.0+0xcc>)
    6c30:	4642      	mov	r2, r8
    6c32:	f019 f931 	bl	1fe98 <log_1>
			if (from_hard_fault) {
    6c36:	b11f      	cbz	r7, 6c40 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    6c38:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6c3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6c3e:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    6c40:	4d12      	ldr	r5, [pc, #72]	; (6c8c <bus_fault.isra.0+0xb8>)
    6c42:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6c44:	0559      	lsls	r1, r3, #21
    6c46:	d504      	bpl.n	6c52 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    6c48:	4816      	ldr	r0, [pc, #88]	; (6ca4 <bus_fault.isra.0+0xd0>)
    6c4a:	f044 0101 	orr.w	r1, r4, #1
    6c4e:	f019 f916 	bl	1fe7e <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    6c52:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6c54:	05da      	lsls	r2, r3, #23
    6c56:	d50d      	bpl.n	6c74 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    6c58:	4813      	ldr	r0, [pc, #76]	; (6ca8 <bus_fault.isra.0+0xd4>)
    6c5a:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6c5e:	f019 f90e 	bl	1fe7e <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6c62:	4a0a      	ldr	r2, [pc, #40]	; (6c8c <bus_fault.isra.0+0xb8>)
    6c64:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    6c66:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6c68:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    6c6c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    6c6e:	7030      	strb	r0, [r6, #0]
}
    6c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    6c74:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6c76:	049b      	lsls	r3, r3, #18
    6c78:	d5f3      	bpl.n	6c62 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6c7a:	480c      	ldr	r0, [pc, #48]	; (6cac <bus_fault.isra.0+0xd8>)
    6c7c:	f044 0101 	orr.w	r1, r4, #1
    6c80:	e7ed      	b.n	6c5e <bus_fault.isra.0+0x8a>
    6c82:	bf00      	nop
    6c84:	00024fd8 	.word	0x00024fd8
    6c88:	00025110 	.word	0x00025110
    6c8c:	e000ed00 	.word	0xe000ed00
    6c90:	00027204 	.word	0x00027204
    6c94:	0002721a 	.word	0x0002721a
    6c98:	000270a8 	.word	0x000270a8
    6c9c:	0002722b 	.word	0x0002722b
    6ca0:	00027244 	.word	0x00027244
    6ca4:	00027259 	.word	0x00027259
    6ca8:	00027274 	.word	0x00027274
    6cac:	00027108 	.word	0x00027108

00006cb0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    6cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6cb4:	4b57      	ldr	r3, [pc, #348]	; (6e14 <z_arm_fault+0x164>)
    6cb6:	685e      	ldr	r6, [r3, #4]
{
    6cb8:	b08a      	sub	sp, #40	; 0x28
    6cba:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6cbc:	f3c6 0408 	ubfx	r4, r6, #0, #9
    6cc0:	2500      	movs	r5, #0
    6cc2:	f385 8811 	msr	BASEPRI, r5
    6cc6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    6cca:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    6cce:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    6cd2:	d10d      	bne.n	6cf0 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    6cd4:	f002 030c 	and.w	r3, r2, #12
    6cd8:	2b08      	cmp	r3, #8
    6cda:	d10b      	bne.n	6cf4 <z_arm_fault+0x44>
    6cdc:	494e      	ldr	r1, [pc, #312]	; (6e18 <z_arm_fault+0x168>)
    6cde:	4b4f      	ldr	r3, [pc, #316]	; (6e1c <z_arm_fault+0x16c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    6ce0:	484f      	ldr	r0, [pc, #316]	; (6e20 <z_arm_fault+0x170>)
    6ce2:	1ac9      	subs	r1, r1, r3
    6ce4:	08c9      	lsrs	r1, r1, #3
    6ce6:	0189      	lsls	r1, r1, #6
    6ce8:	f041 0101 	orr.w	r1, r1, #1
    6cec:	f019 f8c7 	bl	1fe7e <log_0>
		return NULL;
    6cf0:	462f      	mov	r7, r5
    6cf2:	e003      	b.n	6cfc <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    6cf4:	0712      	lsls	r2, r2, #28
    6cf6:	d401      	bmi.n	6cfc <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    6cf8:	4607      	mov	r7, r0
			*nested_exc = true;
    6cfa:	2501      	movs	r5, #1
	*recoverable = false;
    6cfc:	2300      	movs	r3, #0
    6cfe:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    6d02:	1ee3      	subs	r3, r4, #3
    6d04:	2b09      	cmp	r3, #9
    6d06:	d86b      	bhi.n	6de0 <z_arm_fault+0x130>
    6d08:	e8df f003 	tbb	[pc, r3]
    6d0c:	3d5d5905 	.word	0x3d5d5905
    6d10:	6a6a6a6a 	.word	0x6a6a6a6a
    6d14:	616a      	.short	0x616a
    6d16:	4b41      	ldr	r3, [pc, #260]	; (6e1c <z_arm_fault+0x16c>)
    6d18:	4e3f      	ldr	r6, [pc, #252]	; (6e18 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    6d1a:	4842      	ldr	r0, [pc, #264]	; (6e24 <z_arm_fault+0x174>)
    6d1c:	1af6      	subs	r6, r6, r3
    6d1e:	08f6      	lsrs	r6, r6, #3
    6d20:	01b6      	lsls	r6, r6, #6
    6d22:	f046 0601 	orr.w	r6, r6, #1
    6d26:	4631      	mov	r1, r6
    6d28:	f019 f8a9 	bl	1fe7e <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6d2c:	4b39      	ldr	r3, [pc, #228]	; (6e14 <z_arm_fault+0x164>)
    6d2e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    6d30:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6d34:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    6d38:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6d3c:	d005      	beq.n	6d4a <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    6d3e:	483a      	ldr	r0, [pc, #232]	; (6e28 <z_arm_fault+0x178>)
    6d40:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    6d42:	f019 f89c 	bl	1fe7e <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6d46:	2400      	movs	r4, #0
}
    6d48:	e020      	b.n	6d8c <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    6d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6d4c:	005b      	lsls	r3, r3, #1
    6d4e:	d51d      	bpl.n	6d8c <z_arm_fault+0xdc>
		PR_EXC("  Fault escalation (see below)");
    6d50:	4836      	ldr	r0, [pc, #216]	; (6e2c <z_arm_fault+0x17c>)
    6d52:	4631      	mov	r1, r6
    6d54:	f019 f893 	bl	1fe7e <log_0>
		if (SCB_MMFSR != 0) {
    6d58:	4b35      	ldr	r3, [pc, #212]	; (6e30 <z_arm_fault+0x180>)
    6d5a:	781b      	ldrb	r3, [r3, #0]
    6d5c:	b133      	cbz	r3, 6d6c <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
    6d5e:	f10d 0207 	add.w	r2, sp, #7
    6d62:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    6d64:	4638      	mov	r0, r7
    6d66:	f7ff fe5b 	bl	6a20 <mem_manage_fault>
    6d6a:	e00e      	b.n	6d8a <z_arm_fault+0xda>
		} else if (SCB_BFSR != 0) {
    6d6c:	4b31      	ldr	r3, [pc, #196]	; (6e34 <z_arm_fault+0x184>)
    6d6e:	781b      	ldrb	r3, [r3, #0]
    6d70:	b12b      	cbz	r3, 6d7e <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
    6d72:	f10d 0107 	add.w	r1, sp, #7
    6d76:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    6d78:	f7ff ff2c 	bl	6bd4 <bus_fault.isra.0>
    6d7c:	e005      	b.n	6d8a <z_arm_fault+0xda>
		} else if (SCB_UFSR != 0) {
    6d7e:	4b2e      	ldr	r3, [pc, #184]	; (6e38 <z_arm_fault+0x188>)
    6d80:	881b      	ldrh	r3, [r3, #0]
    6d82:	b29b      	uxth	r3, r3
    6d84:	b113      	cbz	r3, 6d8c <z_arm_fault+0xdc>
			reason = usage_fault(esf);
    6d86:	f7ff fec9 	bl	6b1c <usage_fault.isra.0>
    6d8a:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    6d8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d90:	b993      	cbnz	r3, 6db8 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    6d92:	2220      	movs	r2, #32
    6d94:	4639      	mov	r1, r7
    6d96:	a802      	add	r0, sp, #8
    6d98:	f01a fd25 	bl	217e6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    6d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6d9e:	b39d      	cbz	r5, 6e08 <z_arm_fault+0x158>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    6da0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    6da4:	b922      	cbnz	r2, 6db0 <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    6da6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    6daa:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6dae:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    6db0:	a902      	add	r1, sp, #8
    6db2:	4620      	mov	r0, r4
    6db4:	f7ff fd94 	bl	68e0 <z_arm_fatal_error>
}
    6db8:	b00a      	add	sp, #40	; 0x28
    6dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    6dbe:	f10d 0207 	add.w	r2, sp, #7
    6dc2:	2100      	movs	r1, #0
    6dc4:	e7ce      	b.n	6d64 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    6dc6:	f10d 0107 	add.w	r1, sp, #7
    6dca:	2000      	movs	r0, #0
    6dcc:	e7d4      	b.n	6d78 <z_arm_fault+0xc8>
    6dce:	4912      	ldr	r1, [pc, #72]	; (6e18 <z_arm_fault+0x168>)
    6dd0:	4b12      	ldr	r3, [pc, #72]	; (6e1c <z_arm_fault+0x16c>)
	PR_FAULT_INFO(
    6dd2:	481a      	ldr	r0, [pc, #104]	; (6e3c <z_arm_fault+0x18c>)
    6dd4:	1ac9      	subs	r1, r1, r3
    6dd6:	08c9      	lsrs	r1, r1, #3
    6dd8:	0189      	lsls	r1, r1, #6
    6dda:	f041 0101 	orr.w	r1, r1, #1
    6dde:	e7b0      	b.n	6d42 <z_arm_fault+0x92>
    6de0:	4a0e      	ldr	r2, [pc, #56]	; (6e1c <z_arm_fault+0x16c>)
    6de2:	4b0d      	ldr	r3, [pc, #52]	; (6e18 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** %s %d) *****",
    6de4:	4816      	ldr	r0, [pc, #88]	; (6e40 <z_arm_fault+0x190>)
    6de6:	4917      	ldr	r1, [pc, #92]	; (6e44 <z_arm_fault+0x194>)
    6de8:	1a9b      	subs	r3, r3, r2
    6dea:	08db      	lsrs	r3, r3, #3
    6dec:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    6df0:	ea4f 1383 	mov.w	r3, r3, lsl #6
    6df4:	bf18      	it	ne
    6df6:	4601      	movne	r1, r0
    6df8:	f043 0301 	orr.w	r3, r3, #1
    6dfc:	4812      	ldr	r0, [pc, #72]	; (6e48 <z_arm_fault+0x198>)
    6dfe:	f1a4 0210 	sub.w	r2, r4, #16
    6e02:	f019 f85d 	bl	1fec0 <log_2>
    6e06:	e79e      	b.n	6d46 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6e08:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    6e0c:	f023 0301 	bic.w	r3, r3, #1
    6e10:	e7cd      	b.n	6dae <z_arm_fault+0xfe>
    6e12:	bf00      	nop
    6e14:	e000ed00 	.word	0xe000ed00
    6e18:	00025110 	.word	0x00025110
    6e1c:	00024fd8 	.word	0x00024fd8
    6e20:	0002728c 	.word	0x0002728c
    6e24:	000272b7 	.word	0x000272b7
    6e28:	000272ce 	.word	0x000272ce
    6e2c:	000272ef 	.word	0x000272ef
    6e30:	e000ed28 	.word	0xe000ed28
    6e34:	e000ed29 	.word	0xe000ed29
    6e38:	e000ed2a 	.word	0xe000ed2a
    6e3c:	0002730e 	.word	0x0002730e
    6e40:	00027359 	.word	0x00027359
    6e44:	00027344 	.word	0x00027344
    6e48:	00027372 	.word	0x00027372

00006e4c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6e4c:	4a02      	ldr	r2, [pc, #8]	; (6e58 <z_arm_fault_init+0xc>)
    6e4e:	6953      	ldr	r3, [r2, #20]
    6e50:	f043 0310 	orr.w	r3, r3, #16
    6e54:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    6e56:	4770      	bx	lr
    6e58:	e000ed00 	.word	0xe000ed00

00006e5c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    6e5c:	4b04      	ldr	r3, [pc, #16]	; (6e70 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    6e5e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    6e60:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    6e62:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    6e64:	d003      	beq.n	6e6e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    6e66:	4903      	ldr	r1, [pc, #12]	; (6e74 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    6e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    6e6c:	600a      	str	r2, [r1, #0]

00006e6e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    6e6e:	4770      	bx	lr
	ldr r3, =_kernel
    6e70:	20002950 	.word	0x20002950
	ldr r1, =_SCS_ICSR
    6e74:	e000ed04 	.word	0xe000ed04

00006e78 <z_arm_interrupt_init>:
    6e78:	4804      	ldr	r0, [pc, #16]	; (6e8c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    6e7a:	2300      	movs	r3, #0
    6e7c:	2120      	movs	r1, #32
    6e7e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    6e80:	3301      	adds	r3, #1
    6e82:	2b30      	cmp	r3, #48	; 0x30
    6e84:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    6e88:	d1f9      	bne.n	6e7e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    6e8a:	4770      	bx	lr
    6e8c:	e000e100 	.word	0xe000e100

00006e90 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    6e90:	b508      	push	{r3, lr}
	if (_current == thread) {
    6e92:	4b0e      	ldr	r3, [pc, #56]	; (6ecc <z_impl_k_thread_abort+0x3c>)
    6e94:	689b      	ldr	r3, [r3, #8]
    6e96:	4283      	cmp	r3, r0
    6e98:	d107      	bne.n	6eaa <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6e9a:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    6e9e:	b193      	cbz	r3, 6ec6 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6ea0:	4a0b      	ldr	r2, [pc, #44]	; (6ed0 <z_impl_k_thread_abort+0x40>)
    6ea2:	6853      	ldr	r3, [r2, #4]
    6ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6ea8:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    6eaa:	f017 fd9f 	bl	1e9ec <z_thread_single_abort>
	__asm__ volatile(
    6eae:	f04f 0320 	mov.w	r3, #32
    6eb2:	f3ef 8011 	mrs	r0, BASEPRI
    6eb6:	f383 8811 	msr	BASEPRI, r3
    6eba:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    6ebe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    6ec2:	f01d bbf1 	b.w	246a8 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    6ec6:	f018 f86f 	bl	1efa8 <z_self_abort>
    6eca:	bf00      	nop
    6ecc:	20002950 	.word	0x20002950
    6ed0:	e000ed00 	.word	0xe000ed00

00006ed4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    6ed4:	4b02      	ldr	r3, [pc, #8]	; (6ee0 <z_arm_configure_static_mpu_regions+0xc>)
    6ed6:	4a03      	ldr	r2, [pc, #12]	; (6ee4 <z_arm_configure_static_mpu_regions+0x10>)
    6ed8:	4803      	ldr	r0, [pc, #12]	; (6ee8 <z_arm_configure_static_mpu_regions+0x14>)
    6eda:	2101      	movs	r1, #1
    6edc:	f000 b8b2 	b.w	7044 <arm_core_mpu_configure_static_mpu_regions>
    6ee0:	20040000 	.word	0x20040000
    6ee4:	20000000 	.word	0x20000000
    6ee8:	00025434 	.word	0x00025434

00006eec <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    6eec:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    6eee:	4b05      	ldr	r3, [pc, #20]	; (6f04 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    6ef0:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    6ef2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    6ef4:	4a04      	ldr	r2, [pc, #16]	; (6f08 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    6ef6:	2120      	movs	r1, #32
    6ef8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    6efc:	4618      	mov	r0, r3
    6efe:	2101      	movs	r1, #1
    6f00:	f000 b8aa 	b.w	7058 <arm_core_mpu_configure_dynamic_mpu_regions>
    6f04:	20001344 	.word	0x20001344
    6f08:	150b0000 	.word	0x150b0000

00006f0c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    6f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    6f0e:	4f28      	ldr	r7, [pc, #160]	; (6fb0 <mpu_configure_regions+0xa4>)
    6f10:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    6f12:	2100      	movs	r1, #0
    6f14:	42b1      	cmp	r1, r6
    6f16:	da14      	bge.n	6f42 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    6f18:	6844      	ldr	r4, [r0, #4]
    6f1a:	2c00      	cmp	r4, #0
    6f1c:	d045      	beq.n	6faa <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    6f1e:	b1c3      	cbz	r3, 6f52 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    6f20:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    6f24:	ea14 0f0c 	tst.w	r4, ip
    6f28:	d00d      	beq.n	6f46 <mpu_configure_regions+0x3a>
    6f2a:	4a22      	ldr	r2, [pc, #136]	; (6fb4 <mpu_configure_regions+0xa8>)
    6f2c:	4b22      	ldr	r3, [pc, #136]	; (6fb8 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    6f2e:	4823      	ldr	r0, [pc, #140]	; (6fbc <mpu_configure_regions+0xb0>)
    6f30:	1ad2      	subs	r2, r2, r3
    6f32:	08d2      	lsrs	r2, r2, #3
    6f34:	0192      	lsls	r2, r2, #6
    6f36:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6f3a:	f018 ffad 	bl	1fe98 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    6f3e:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    6f42:	4610      	mov	r0, r2
    6f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    6f46:	2c1f      	cmp	r4, #31
    6f48:	d9ef      	bls.n	6f2a <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    6f4a:	6805      	ldr	r5, [r0, #0]
		&&
    6f4c:	ea1c 0f05 	tst.w	ip, r5
    6f50:	d1eb      	bne.n	6f2a <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    6f52:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    6f54:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    6f56:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    6f5a:	6802      	ldr	r2, [r0, #0]
    6f5c:	d916      	bls.n	6f8c <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    6f5e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    6f62:	d815      	bhi.n	6f90 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    6f64:	3c01      	subs	r4, #1
    6f66:	fab4 f484 	clz	r4, r4
    6f6a:	f1c4 041f 	rsb	r4, r4, #31
    6f6e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    6f70:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    6f72:	ea4c 0404 	orr.w	r4, ip, r4
    6f76:	d90d      	bls.n	6f94 <mpu_configure_regions+0x88>
    6f78:	4a0e      	ldr	r2, [pc, #56]	; (6fb4 <mpu_configure_regions+0xa8>)
    6f7a:	4b0f      	ldr	r3, [pc, #60]	; (6fb8 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6f7c:	4810      	ldr	r0, [pc, #64]	; (6fc0 <mpu_configure_regions+0xb4>)
    6f7e:	1ad2      	subs	r2, r2, r3
    6f80:	08d2      	lsrs	r2, r2, #3
    6f82:	0192      	lsls	r2, r2, #6
    6f84:	f042 0201 	orr.w	r2, r2, #1
    6f88:	4629      	mov	r1, r5
    6f8a:	e7d6      	b.n	6f3a <mpu_configure_regions+0x2e>
		return REGION_32B;
    6f8c:	2408      	movs	r4, #8
    6f8e:	e7ef      	b.n	6f70 <mpu_configure_regions+0x64>
		return REGION_4G;
    6f90:	243e      	movs	r4, #62	; 0x3e
    6f92:	e7ed      	b.n	6f70 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6f94:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    6f98:	432a      	orrs	r2, r5
    6f9a:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6f9e:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    6fa2:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6fa4:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6fa6:	613c      	str	r4, [r7, #16]
		reg_index++;
    6fa8:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    6faa:	3101      	adds	r1, #1
    6fac:	300c      	adds	r0, #12
    6fae:	e7b1      	b.n	6f14 <mpu_configure_regions+0x8>
    6fb0:	e000ed90 	.word	0xe000ed90
    6fb4:	00025100 	.word	0x00025100
    6fb8:	00024fd8 	.word	0x00024fd8
    6fbc:	00027389 	.word	0x00027389
    6fc0:	000273ac 	.word	0x000273ac

00006fc4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    6fc4:	4b03      	ldr	r3, [pc, #12]	; (6fd4 <arm_core_mpu_enable+0x10>)
    6fc6:	2205      	movs	r2, #5
    6fc8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    6fca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6fce:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    6fd2:	4770      	bx	lr
    6fd4:	e000ed90 	.word	0xe000ed90

00006fd8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    6fd8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6fdc:	4b01      	ldr	r3, [pc, #4]	; (6fe4 <arm_core_mpu_disable+0xc>)
    6fde:	2200      	movs	r2, #0
    6fe0:	605a      	str	r2, [r3, #4]
}
    6fe2:	4770      	bx	lr
    6fe4:	e000ed90 	.word	0xe000ed90

00006fe8 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    6fe8:	4913      	ldr	r1, [pc, #76]	; (7038 <arm_mpu_init+0x50>)
    6fea:	6808      	ldr	r0, [r1, #0]
    6fec:	2808      	cmp	r0, #8
{
    6fee:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    6ff0:	d81e      	bhi.n	7030 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    6ff2:	f7ff fff1 	bl	6fd8 <arm_core_mpu_disable>
	MPU->RNR = index;
    6ff6:	4c11      	ldr	r4, [pc, #68]	; (703c <arm_mpu_init+0x54>)
    6ff8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6ffa:	2200      	movs	r2, #0
    6ffc:	4290      	cmp	r0, r2
    6ffe:	f101 010c 	add.w	r1, r1, #12
    7002:	d105      	bne.n	7010 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    7004:	4b0e      	ldr	r3, [pc, #56]	; (7040 <arm_mpu_init+0x58>)
    7006:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    7008:	f7ff ffdc 	bl	6fc4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    700c:	2000      	movs	r0, #0
}
    700e:	bd10      	pop	{r4, pc}
    7010:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7012:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    7016:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    701a:	4313      	orrs	r3, r2
    701c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7020:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7022:	f851 3c04 	ldr.w	r3, [r1, #-4]
    7026:	f043 0301 	orr.w	r3, r3, #1
    702a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    702c:	3201      	adds	r2, #1
    702e:	e7e5      	b.n	6ffc <arm_mpu_init+0x14>
		return -1;
    7030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7034:	e7eb      	b.n	700e <arm_mpu_init+0x26>
    7036:	bf00      	nop
    7038:	00025440 	.word	0x00025440
    703c:	e000ed90 	.word	0xe000ed90
    7040:	20002f3f 	.word	0x20002f3f

00007044 <arm_core_mpu_configure_static_mpu_regions>:
{
    7044:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    7046:	4c03      	ldr	r4, [pc, #12]	; (7054 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    7048:	2301      	movs	r3, #1
    704a:	7822      	ldrb	r2, [r4, #0]
    704c:	f7ff ff5e 	bl	6f0c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    7050:	7020      	strb	r0, [r4, #0]
}
    7052:	bd10      	pop	{r4, pc}
    7054:	20002f3f 	.word	0x20002f3f

00007058 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    7058:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    705a:	4a08      	ldr	r2, [pc, #32]	; (707c <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    705c:	2300      	movs	r3, #0
    705e:	7812      	ldrb	r2, [r2, #0]
    7060:	f7ff ff54 	bl	6f0c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    7064:	f110 0f16 	cmn.w	r0, #22
    7068:	d003      	beq.n	7072 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    706a:	4b05      	ldr	r3, [pc, #20]	; (7080 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    706c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    706e:	2807      	cmp	r0, #7
    7070:	dd00      	ble.n	7074 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    7072:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    7074:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    7076:	611a      	str	r2, [r3, #16]
    7078:	3001      	adds	r0, #1
    707a:	e7f8      	b.n	706e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    707c:	20002f3f 	.word	0x20002f3f
    7080:	e000ed90 	.word	0xe000ed90

00007084 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    7084:	4b01      	ldr	r3, [pc, #4]	; (708c <__stdout_hook_install+0x8>)
    7086:	6018      	str	r0, [r3, #0]
}
    7088:	4770      	bx	lr
    708a:	bf00      	nop
    708c:	20000174 	.word	0x20000174

00007090 <nordicsemi_nrf52_init>:
    7090:	f04f 0320 	mov.w	r3, #32
    7094:	f3ef 8211 	mrs	r2, BASEPRI
    7098:	f383 8811 	msr	BASEPRI, r3
    709c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    70a0:	4906      	ldr	r1, [pc, #24]	; (70bc <nordicsemi_nrf52_init+0x2c>)
    70a2:	2301      	movs	r3, #1
    70a4:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    70a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    70ac:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    70b0:	f382 8811 	msr	BASEPRI, r2
    70b4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    70b8:	2000      	movs	r0, #0
    70ba:	4770      	bx	lr
    70bc:	4001e000 	.word	0x4001e000

000070c0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    70c0:	b120      	cbz	r0, 70cc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    70c2:	4b03      	ldr	r3, [pc, #12]	; (70d0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    70c4:	0180      	lsls	r0, r0, #6
    70c6:	f043 0301 	orr.w	r3, r3, #1
    70ca:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    70cc:	4770      	bx	lr
    70ce:	bf00      	nop
    70d0:	00025240 	.word	0x00025240

000070d4 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    70d4:	4b0e      	ldr	r3, [pc, #56]	; (7110 <bt_hex_real+0x3c>)
    70d6:	2940      	cmp	r1, #64	; 0x40
{
    70d8:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    70da:	bf28      	it	cs
    70dc:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    70de:	4c0d      	ldr	r4, [pc, #52]	; (7114 <bt_hex_real+0x40>)
    70e0:	1846      	adds	r6, r0, r1
    70e2:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    70e4:	42b0      	cmp	r0, r6
    70e6:	f103 0302 	add.w	r3, r3, #2
    70ea:	d104      	bne.n	70f6 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    70ec:	2300      	movs	r3, #0
    70ee:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    70f2:	4807      	ldr	r0, [pc, #28]	; (7110 <bt_hex_real+0x3c>)
    70f4:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    70f6:	7802      	ldrb	r2, [r0, #0]
    70f8:	0912      	lsrs	r2, r2, #4
    70fa:	5ca2      	ldrb	r2, [r4, r2]
    70fc:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    7100:	f810 2b01 	ldrb.w	r2, [r0], #1
    7104:	f002 020f 	and.w	r2, r2, #15
    7108:	5ca2      	ldrb	r2, [r4, r2]
    710a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    710e:	e7e9      	b.n	70e4 <bt_hex_real+0x10>
    7110:	20002f40 	.word	0x20002f40
    7114:	000273e5 	.word	0x000273e5

00007118 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    7118:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    711a:	7803      	ldrb	r3, [r0, #0]
    711c:	b08b      	sub	sp, #44	; 0x2c
    711e:	4604      	mov	r4, r0
    7120:	ad07      	add	r5, sp, #28
    7122:	2b03      	cmp	r3, #3
    7124:	d821      	bhi.n	716a <bt_addr_le_str_real+0x52>
    7126:	e8df f003 	tbb	[pc, r3]
    712a:	1a02      	.short	0x1a02
    712c:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    712e:	4912      	ldr	r1, [pc, #72]	; (7178 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    7130:	4628      	mov	r0, r5
    7132:	f01a fb18 	bl	21766 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    7136:	7863      	ldrb	r3, [r4, #1]
    7138:	9304      	str	r3, [sp, #16]
    713a:	78a3      	ldrb	r3, [r4, #2]
    713c:	9303      	str	r3, [sp, #12]
    713e:	78e3      	ldrb	r3, [r4, #3]
    7140:	9302      	str	r3, [sp, #8]
    7142:	7923      	ldrb	r3, [r4, #4]
    7144:	9301      	str	r3, [sp, #4]
    7146:	7963      	ldrb	r3, [r4, #5]
    7148:	9300      	str	r3, [sp, #0]
    714a:	4a0c      	ldr	r2, [pc, #48]	; (717c <bt_addr_le_str_real+0x64>)
    714c:	79a3      	ldrb	r3, [r4, #6]
    714e:	9505      	str	r5, [sp, #20]
    7150:	211e      	movs	r1, #30
    7152:	480b      	ldr	r0, [pc, #44]	; (7180 <bt_addr_le_str_real+0x68>)
    7154:	f018 fadc 	bl	1f710 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    7158:	4809      	ldr	r0, [pc, #36]	; (7180 <bt_addr_le_str_real+0x68>)
    715a:	b00b      	add	sp, #44	; 0x2c
    715c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    715e:	4909      	ldr	r1, [pc, #36]	; (7184 <bt_addr_le_str_real+0x6c>)
    7160:	e7e6      	b.n	7130 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    7162:	4909      	ldr	r1, [pc, #36]	; (7188 <bt_addr_le_str_real+0x70>)
    7164:	e7e4      	b.n	7130 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    7166:	4909      	ldr	r1, [pc, #36]	; (718c <bt_addr_le_str_real+0x74>)
    7168:	e7e2      	b.n	7130 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    716a:	4a09      	ldr	r2, [pc, #36]	; (7190 <bt_addr_le_str_real+0x78>)
    716c:	210a      	movs	r1, #10
    716e:	4628      	mov	r0, r5
    7170:	f018 face 	bl	1f710 <snprintk>
		break;
    7174:	e7df      	b.n	7136 <bt_addr_le_str_real+0x1e>
    7176:	bf00      	nop
    7178:	00026abe 	.word	0x00026abe
    717c:	00026ae0 	.word	0x00026ae0
    7180:	20002fc1 	.word	0x20002fc1
    7184:	00026ac5 	.word	0x00026ac5
    7188:	00026acc 	.word	0x00026acc
    718c:	00026ad6 	.word	0x00026ad6
    7190:	000287fe 	.word	0x000287fe

00007194 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    7194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7198:	4b64      	ldr	r3, [pc, #400]	; (732c <ecc_thread+0x198>)
    719a:	4d65      	ldr	r5, [pc, #404]	; (7330 <ecc_thread+0x19c>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    719c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 7350 <ecc_thread+0x1bc>
	return z_impl_k_sem_take(sem, timeout);
    71a0:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 7354 <ecc_thread+0x1c0>
    71a4:	1aed      	subs	r5, r5, r3
    71a6:	08ed      	lsrs	r5, r5, #3
    71a8:	4647      	mov	r7, r8
    71aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    71ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    71b2:	4648      	mov	r0, r9
    71b4:	f017 fe10 	bl	1edd8 <z_impl_k_sem_take>
    71b8:	f3bf 8f5b 	dmb	ish
    71bc:	f8d8 4000 	ldr.w	r4, [r8]
    71c0:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    71c4:	f014 0401 	ands.w	r4, r4, #1
    71c8:	d05a      	beq.n	7280 <ecc_thread+0xec>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    71ca:	f8df a17c 	ldr.w	sl, [pc, #380]	; 7348 <ecc_thread+0x1b4>
    71ce:	4c59      	ldr	r4, [pc, #356]	; (7334 <ecc_thread+0x1a0>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    71d0:	4e59      	ldr	r6, [pc, #356]	; (7338 <ecc_thread+0x1a4>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    71d2:	485a      	ldr	r0, [pc, #360]	; (733c <ecc_thread+0x1a8>)
    71d4:	4652      	mov	r2, sl
    71d6:	4621      	mov	r1, r4
    71d8:	f019 fa07 	bl	205ea <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    71dc:	bbe8      	cbnz	r0, 725a <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
    71de:	01a9      	lsls	r1, r5, #6
    71e0:	4857      	ldr	r0, [pc, #348]	; (7340 <ecc_thread+0x1ac>)
    71e2:	f041 0101 	orr.w	r1, r1, #1
    71e6:	f018 fe4a 	bl	1fe7e <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    71ea:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    71ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    71f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    71f6:	2001      	movs	r0, #1
    71f8:	f000 f9f2 	bl	75e0 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    71fc:	f100 0608 	add.w	r6, r0, #8
    7200:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7202:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7204:	4630      	mov	r0, r6
    7206:	f01c ff17 	bl	24038 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    720a:	233e      	movs	r3, #62	; 0x3e
    720c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    720e:	2342      	movs	r3, #66	; 0x42
    7210:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    7212:	2101      	movs	r1, #1
    7214:	4630      	mov	r0, r6
    7216:	f01c ff0f 	bl	24038 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    721a:	2308      	movs	r3, #8
    721c:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    721e:	2141      	movs	r1, #65	; 0x41
    7220:	4630      	mov	r0, r6
    7222:	f01c ff09 	bl	24038 <net_buf_simple_add>
    7226:	4606      	mov	r6, r0
	evt->status = status;
    7228:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    722c:	f1ba 0f00 	cmp.w	sl, #0
    7230:	d01d      	beq.n	726e <ecc_thread+0xda>
		(void)memset(evt->key, 0, sizeof(evt->key));
    7232:	2240      	movs	r2, #64	; 0x40
    7234:	2100      	movs	r1, #0
    7236:	f01a fb01 	bl	2183c <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    723a:	f3bf 8f5b 	dmb	ish
    723e:	e857 3f00 	ldrex	r3, [r7]
    7242:	f023 0301 	bic.w	r3, r3, #1
    7246:	e847 3200 	strex	r2, r3, [r7]
    724a:	2a00      	cmp	r2, #0
    724c:	d1f7      	bne.n	723e <ecc_thread+0xaa>
    724e:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    7252:	4620      	mov	r0, r4
	bt_recv(buf);
    7254:	f001 fef6 	bl	9044 <bt_recv>
	while (true) {
    7258:	e7a7      	b.n	71aa <ecc_thread+0x16>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    725a:	2220      	movs	r2, #32
    725c:	4631      	mov	r1, r6
    725e:	4620      	mov	r0, r4
    7260:	f01a fab1 	bl	217c6 <memcmp>
    7264:	2800      	cmp	r0, #0
    7266:	d0b4      	beq.n	71d2 <ecc_thread+0x3e>
	return 0;
    7268:	f04f 0a00 	mov.w	sl, #0
    726c:	e7bf      	b.n	71ee <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
    726e:	4933      	ldr	r1, [pc, #204]	; (733c <ecc_thread+0x1a8>)
    7270:	f01a fb77 	bl	21962 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
    7274:	4933      	ldr	r1, [pc, #204]	; (7344 <ecc_thread+0x1b0>)
    7276:	f106 0021 	add.w	r0, r6, #33	; 0x21
    727a:	f01a fb72 	bl	21962 <sys_memcpy_swap.constprop.0>
    727e:	e7dc      	b.n	723a <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7280:	f3bf 8f5b 	dmb	ish
    7284:	f8d8 3000 	ldr.w	r3, [r8]
    7288:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    728c:	079b      	lsls	r3, r3, #30
    728e:	d58c      	bpl.n	71aa <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    7290:	492d      	ldr	r1, [pc, #180]	; (7348 <ecc_thread+0x1b4>)
    7292:	482a      	ldr	r0, [pc, #168]	; (733c <ecc_thread+0x1a8>)
    7294:	f01a f878 	bl	21388 <uECC_valid_public_key>
	if (ret < 0) {
    7298:	1e01      	subs	r1, r0, #0
    729a:	da38      	bge.n	730e <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
    729c:	01aa      	lsls	r2, r5, #6
    729e:	482b      	ldr	r0, [pc, #172]	; (734c <ecc_thread+0x1b8>)
    72a0:	f042 0201 	orr.w	r2, r2, #1
    72a4:	f018 fdf8 	bl	1fe98 <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    72a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    72ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    72b0:	2001      	movs	r0, #1
    72b2:	f000 f995 	bl	75e0 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    72b6:	f100 0a08 	add.w	sl, r0, #8
    72ba:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    72bc:	4606      	mov	r6, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    72be:	4650      	mov	r0, sl
    72c0:	f01c feba 	bl	24038 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    72c4:	233e      	movs	r3, #62	; 0x3e
    72c6:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    72c8:	2322      	movs	r3, #34	; 0x22
    72ca:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    72cc:	2101      	movs	r1, #1
    72ce:	4650      	mov	r0, sl
    72d0:	f01c feb2 	bl	24038 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    72d4:	2309      	movs	r3, #9
    72d6:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    72d8:	2121      	movs	r1, #33	; 0x21
    72da:	4650      	mov	r0, sl
    72dc:	f01c feac 	bl	24038 <net_buf_simple_add>
    72e0:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    72e2:	3001      	adds	r0, #1
    72e4:	b9e4      	cbnz	r4, 7320 <ecc_thread+0x18c>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    72e6:	221f      	movs	r2, #31
    72e8:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    72ea:	21ff      	movs	r1, #255	; 0xff
    72ec:	2220      	movs	r2, #32
    72ee:	f01a faa5 	bl	2183c <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    72f2:	f3bf 8f5b 	dmb	ish
    72f6:	e857 3f00 	ldrex	r3, [r7]
    72fa:	f023 0302 	bic.w	r3, r3, #2
    72fe:	e847 3200 	strex	r2, r3, [r7]
    7302:	2a00      	cmp	r2, #0
    7304:	d1f7      	bne.n	72f6 <ecc_thread+0x162>
    7306:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    730a:	4630      	mov	r0, r6
    730c:	e7a2      	b.n	7254 <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.public_key_be, ecc.private_key_be,
    730e:	4a0b      	ldr	r2, [pc, #44]	; (733c <ecc_thread+0x1a8>)
    7310:	4b0d      	ldr	r3, [pc, #52]	; (7348 <ecc_thread+0x1b4>)
    7312:	f1a2 0120 	sub.w	r1, r2, #32
    7316:	4610      	mov	r0, r2
    7318:	f019 f9b6 	bl	20688 <uECC_shared_secret>
    731c:	4604      	mov	r4, r0
    731e:	e7c3      	b.n	72a8 <ecc_thread+0x114>
		evt->status = 0U;
    7320:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    7322:	4906      	ldr	r1, [pc, #24]	; (733c <ecc_thread+0x1a8>)
		evt->status = 0U;
    7324:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    7326:	f01a fb1c 	bl	21962 <sys_memcpy_swap.constprop.0>
    732a:	e7e2      	b.n	72f2 <ecc_thread+0x15e>
    732c:	00024fd8 	.word	0x00024fd8
    7330:	000250c8 	.word	0x000250c8
    7334:	20002fdf 	.word	0x20002fdf
    7338:	00027459 	.word	0x00027459
    733c:	20002fff 	.word	0x20002fff
    7340:	000273fd 	.word	0x000273fd
    7344:	2000301f 	.word	0x2000301f
    7348:	00025460 	.word	0x00025460
    734c:	00027426 	.word	0x00027426
    7350:	20001350 	.word	0x20001350
    7354:	20000754 	.word	0x20000754

00007358 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    7358:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return ((struct bt_buf_data *)net_buf_user_data(buf))->type;
    735a:	7d05      	ldrb	r5, [r0, #20]
    735c:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    735e:	b9ad      	cbnz	r5, 738c <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    7360:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    7362:	881a      	ldrh	r2, [r3, #0]
    7364:	f242 0125 	movw	r1, #8229	; 0x2025
    7368:	428a      	cmp	r2, r1
    736a:	d017      	beq.n	739c <bt_hci_ecc_send+0x44>
    736c:	f242 0126 	movw	r1, #8230	; 0x2026
    7370:	428a      	cmp	r2, r1
    7372:	d03c      	beq.n	73ee <bt_hci_ecc_send+0x96>
    7374:	f242 0101 	movw	r1, #8193	; 0x2001
    7378:	428a      	cmp	r2, r1
    737a:	d107      	bne.n	738c <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    737c:	78da      	ldrb	r2, [r3, #3]
    737e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7382:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    7384:	791a      	ldrb	r2, [r3, #4]
    7386:	f022 0201 	bic.w	r2, r2, #1
    738a:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    738c:	4b31      	ldr	r3, [pc, #196]	; (7454 <bt_hci_ecc_send+0xfc>)
    738e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    7392:	4620      	mov	r0, r4
    7394:	691b      	ldr	r3, [r3, #16]
}
    7396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    739a:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
    739c:	2103      	movs	r1, #3
    739e:	3008      	adds	r0, #8
    73a0:	f01c fe73 	bl	2408a <net_buf_simple_pull>
	net_buf_unref(buf);
    73a4:	4620      	mov	r0, r4
    73a6:	f015 feb9 	bl	1d11c <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    73aa:	f3bf 8f5b 	dmb	ish
    73ae:	4b2a      	ldr	r3, [pc, #168]	; (7458 <bt_hci_ecc_send+0x100>)
    73b0:	681a      	ldr	r2, [r3, #0]
    73b2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    73b6:	0790      	lsls	r0, r2, #30
    73b8:	d507      	bpl.n	73ca <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    73ba:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    73bc:	4629      	mov	r1, r5
    73be:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    73c2:	f01a faaa 	bl	2191a <send_cmd_status>
}
    73c6:	2000      	movs	r0, #0
    73c8:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    73ca:	f3bf 8f5b 	dmb	ish
    73ce:	e853 2f00 	ldrex	r2, [r3]
    73d2:	f042 0101 	orr.w	r1, r2, #1
    73d6:	e843 1000 	strex	r0, r1, [r3]
    73da:	2800      	cmp	r0, #0
    73dc:	d1f7      	bne.n	73ce <bt_hci_ecc_send+0x76>
    73de:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    73e2:	07d1      	lsls	r1, r2, #31
    73e4:	d4e9      	bmi.n	73ba <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
    73e6:	481d      	ldr	r0, [pc, #116]	; (745c <bt_hci_ecc_send+0x104>)
    73e8:	f017 fcd0 	bl	1ed8c <z_impl_k_sem_give>
}
    73ec:	e7e6      	b.n	73bc <bt_hci_ecc_send+0x64>
			net_buf_pull(buf, sizeof(*chdr));
    73ee:	2103      	movs	r1, #3
    73f0:	3008      	adds	r0, #8
    73f2:	f01c fe4a 	bl	2408a <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    73f6:	f3bf 8f5b 	dmb	ish
    73fa:	4b17      	ldr	r3, [pc, #92]	; (7458 <bt_hci_ecc_send+0x100>)
    73fc:	681a      	ldr	r2, [r3, #0]
    73fe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    7402:	07d2      	lsls	r2, r2, #31
    7404:	d507      	bpl.n	7416 <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    7406:	250c      	movs	r5, #12
	net_buf_unref(buf);
    7408:	4620      	mov	r0, r4
    740a:	f015 fe87 	bl	1d11c <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    740e:	4629      	mov	r1, r5
    7410:	f242 0026 	movw	r0, #8230	; 0x2026
    7414:	e7d5      	b.n	73c2 <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    7416:	89a2      	ldrh	r2, [r4, #12]
    7418:	2a3f      	cmp	r2, #63	; 0x3f
    741a:	d919      	bls.n	7450 <bt_hci_ecc_send+0xf8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    741c:	f3bf 8f5b 	dmb	ish
    7420:	e853 2f00 	ldrex	r2, [r3]
    7424:	f042 0102 	orr.w	r1, r2, #2
    7428:	e843 1000 	strex	r0, r1, [r3]
    742c:	2800      	cmp	r0, #0
    742e:	d1f7      	bne.n	7420 <bt_hci_ecc_send+0xc8>
    7430:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    7434:	0793      	lsls	r3, r2, #30
    7436:	d4e6      	bmi.n	7406 <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    7438:	68a1      	ldr	r1, [r4, #8]
	sys_memcpy_swap(ecc.public_key_be, cmd->key, 32);
    743a:	4809      	ldr	r0, [pc, #36]	; (7460 <bt_hci_ecc_send+0x108>)
    743c:	f01a fa91 	bl	21962 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[32], &cmd->key[32], 32);
    7440:	4808      	ldr	r0, [pc, #32]	; (7464 <bt_hci_ecc_send+0x10c>)
    7442:	3120      	adds	r1, #32
    7444:	f01a fa8d 	bl	21962 <sys_memcpy_swap.constprop.0>
	z_impl_k_sem_give(sem);
    7448:	4804      	ldr	r0, [pc, #16]	; (745c <bt_hci_ecc_send+0x104>)
    744a:	f017 fc9f 	bl	1ed8c <z_impl_k_sem_give>
}
    744e:	e7db      	b.n	7408 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    7450:	2512      	movs	r5, #18
    7452:	e7d9      	b.n	7408 <bt_hci_ecc_send+0xb0>
    7454:	20000000 	.word	0x20000000
    7458:	20001350 	.word	0x20001350
    745c:	20000754 	.word	0x20000754
    7460:	20002fff 	.word	0x20002fff
    7464:	2000301f 	.word	0x2000301f

00007468 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    7468:	b510      	push	{r4, lr}
    746a:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    746c:	4c0c      	ldr	r4, [pc, #48]	; (74a0 <bt_hci_ecc_init+0x38>)
    746e:	490d      	ldr	r1, [pc, #52]	; (74a4 <bt_hci_ecc_init+0x3c>)
    7470:	2200      	movs	r2, #0
    7472:	2300      	movs	r3, #0
    7474:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7478:	2300      	movs	r3, #0
    747a:	220a      	movs	r2, #10
    747c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    7480:	e9cd 3301 	strd	r3, r3, [sp, #4]
    7484:	9300      	str	r3, [sp, #0]
    7486:	f44f 628a 	mov.w	r2, #1104	; 0x450
    748a:	4b07      	ldr	r3, [pc, #28]	; (74a8 <bt_hci_ecc_init+0x40>)
    748c:	4620      	mov	r0, r4
    748e:	f017 fd17 	bl	1eec0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    7492:	4906      	ldr	r1, [pc, #24]	; (74ac <bt_hci_ecc_init+0x44>)
    7494:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    7496:	b008      	add	sp, #32
    7498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    749c:	f01d b9f0 	b.w	24880 <z_impl_k_thread_name_set>
    74a0:	20000998 	.word	0x20000998
    74a4:	200033c0 	.word	0x200033c0
    74a8:	00007195 	.word	0x00007195
    74ac:	00027447 	.word	0x00027447

000074b0 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    74b0:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    74b2:	7802      	ldrb	r2, [r0, #0]
    74b4:	2a01      	cmp	r2, #1
{
    74b6:	4604      	mov	r4, r0
    74b8:	460b      	mov	r3, r1
	switch (src->type) {
    74ba:	d016      	beq.n	74ea <uuid_to_uuid128+0x3a>
    74bc:	2a02      	cmp	r2, #2
    74be:	d02c      	beq.n	751a <uuid_to_uuid128+0x6a>
    74c0:	b98a      	cbnz	r2, 74e6 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    74c2:	4a19      	ldr	r2, [pc, #100]	; (7528 <uuid_to_uuid128+0x78>)
    74c4:	460d      	mov	r5, r1
    74c6:	f102 0710 	add.w	r7, r2, #16
    74ca:	6810      	ldr	r0, [r2, #0]
    74cc:	6851      	ldr	r1, [r2, #4]
    74ce:	462e      	mov	r6, r5
    74d0:	c603      	stmia	r6!, {r0, r1}
    74d2:	3208      	adds	r2, #8
    74d4:	42ba      	cmp	r2, r7
    74d6:	4635      	mov	r5, r6
    74d8:	d1f7      	bne.n	74ca <uuid_to_uuid128+0x1a>
    74da:	7812      	ldrb	r2, [r2, #0]
    74dc:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    74de:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    74e0:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    74e2:	0a12      	lsrs	r2, r2, #8
    74e4:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    74e6:	bcf0      	pop	{r4, r5, r6, r7}
    74e8:	4770      	bx	lr
		*dst = uuid128_base;
    74ea:	4a0f      	ldr	r2, [pc, #60]	; (7528 <uuid_to_uuid128+0x78>)
    74ec:	460d      	mov	r5, r1
    74ee:	f102 0710 	add.w	r7, r2, #16
    74f2:	6810      	ldr	r0, [r2, #0]
    74f4:	6851      	ldr	r1, [r2, #4]
    74f6:	462e      	mov	r6, r5
    74f8:	c603      	stmia	r6!, {r0, r1}
    74fa:	3208      	adds	r2, #8
    74fc:	42ba      	cmp	r2, r7
    74fe:	4635      	mov	r5, r6
    7500:	d1f7      	bne.n	74f2 <uuid_to_uuid128+0x42>
    7502:	7812      	ldrb	r2, [r2, #0]
    7504:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    7506:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    7508:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    750a:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    750e:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    7510:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    7512:	0a12      	lsrs	r2, r2, #8
    7514:	7399      	strb	r1, [r3, #14]
    7516:	741a      	strb	r2, [r3, #16]
}
    7518:	e7e5      	b.n	74e6 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
    751a:	4601      	mov	r1, r0
}
    751c:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    751e:	2211      	movs	r2, #17
    7520:	4618      	mov	r0, r3
    7522:	f01a b960 	b.w	217e6 <memcpy>
    7526:	bf00      	nop
    7528:	00027496 	.word	0x00027496

0000752c <bt_uuid_to_str>:
	}
	return true;
}

void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
    752c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t tmp1, tmp5;
	uint16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
    752e:	7805      	ldrb	r5, [r0, #0]
    7530:	2d01      	cmp	r5, #1
{
    7532:	b08b      	sub	sp, #44	; 0x2c
    7534:	4604      	mov	r4, r0
    7536:	460e      	mov	r6, r1
    7538:	4617      	mov	r7, r2
	switch (uuid->type) {
    753a:	d00b      	beq.n	7554 <bt_uuid_to_str+0x28>
    753c:	2d02      	cmp	r5, #2
    753e:	d00c      	beq.n	755a <bt_uuid_to_str+0x2e>
    7540:	2d00      	cmp	r5, #0
    7542:	d142      	bne.n	75ca <bt_uuid_to_str+0x9e>
	case BT_UUID_TYPE_16:
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
    7544:	8843      	ldrh	r3, [r0, #2]
    7546:	4a23      	ldr	r2, [pc, #140]	; (75d4 <bt_uuid_to_str+0xa8>)
		break;
	case BT_UUID_TYPE_32:
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
    7548:	4639      	mov	r1, r7
    754a:	4630      	mov	r0, r6
    754c:	f018 f8e0 	bl	1f710 <snprintk>
		break;
	default:
		(void)memset(str, 0, len);
		return;
	}
}
    7550:	b00b      	add	sp, #44	; 0x2c
    7552:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
    7554:	6843      	ldr	r3, [r0, #4]
    7556:	4a20      	ldr	r2, [pc, #128]	; (75d8 <bt_uuid_to_str+0xac>)
    7558:	e7f6      	b.n	7548 <bt_uuid_to_str+0x1c>
		memcpy(&tmp0, &BT_UUID_128(uuid)->val[0], sizeof(tmp0));
    755a:	462a      	mov	r2, r5
    755c:	1c41      	adds	r1, r0, #1
    755e:	a806      	add	r0, sp, #24
    7560:	f01a f941 	bl	217e6 <memcpy>
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
    7564:	1ce1      	adds	r1, r4, #3
    7566:	2204      	movs	r2, #4
    7568:	a808      	add	r0, sp, #32
    756a:	f01a f93c 	bl	217e6 <memcpy>
		memcpy(&tmp2, &BT_UUID_128(uuid)->val[6], sizeof(tmp2));
    756e:	462a      	mov	r2, r5
    7570:	1de1      	adds	r1, r4, #7
    7572:	f10d 001a 	add.w	r0, sp, #26
    7576:	f01a f936 	bl	217e6 <memcpy>
		memcpy(&tmp3, &BT_UUID_128(uuid)->val[8], sizeof(tmp3));
    757a:	462a      	mov	r2, r5
    757c:	f104 0109 	add.w	r1, r4, #9
    7580:	a807      	add	r0, sp, #28
    7582:	f01a f930 	bl	217e6 <memcpy>
		memcpy(&tmp4, &BT_UUID_128(uuid)->val[10], sizeof(tmp4));
    7586:	462a      	mov	r2, r5
    7588:	f104 010b 	add.w	r1, r4, #11
    758c:	f10d 001e 	add.w	r0, sp, #30
    7590:	f01a f929 	bl	217e6 <memcpy>
		memcpy(&tmp5, &BT_UUID_128(uuid)->val[12], sizeof(tmp5));
    7594:	f104 010d 	add.w	r1, r4, #13
    7598:	2204      	movs	r2, #4
    759a:	a809      	add	r0, sp, #36	; 0x24
    759c:	f01a f923 	bl	217e6 <memcpy>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
    75a0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    75a4:	9304      	str	r3, [sp, #16]
    75a6:	9b08      	ldr	r3, [sp, #32]
    75a8:	9303      	str	r3, [sp, #12]
    75aa:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    75ae:	9302      	str	r3, [sp, #8]
    75b0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    75b4:	9301      	str	r3, [sp, #4]
    75b6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    75ba:	9300      	str	r3, [sp, #0]
    75bc:	4a07      	ldr	r2, [pc, #28]	; (75dc <bt_uuid_to_str+0xb0>)
    75be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    75c0:	4639      	mov	r1, r7
    75c2:	4630      	mov	r0, r6
    75c4:	f018 f8a4 	bl	1f710 <snprintk>
		break;
    75c8:	e7c2      	b.n	7550 <bt_uuid_to_str+0x24>
		(void)memset(str, 0, len);
    75ca:	2100      	movs	r1, #0
    75cc:	4630      	mov	r0, r6
    75ce:	f01a f935 	bl	2183c <memset>
		return;
    75d2:	e7bd      	b.n	7550 <bt_uuid_to_str+0x24>
    75d4:	0002827c 	.word	0x0002827c
    75d8:	00026fee 	.word	0x00026fee
    75dc:	00027479 	.word	0x00027479

000075e0 <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    75e0:	b538      	push	{r3, r4, r5, lr}
    75e2:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    75e4:	4805      	ldr	r0, [pc, #20]	; (75fc <bt_buf_get_rx+0x1c>)
    75e6:	f01c fccb 	bl	23f80 <net_buf_alloc_fixed>
#endif

	if (buf) {
    75ea:	4604      	mov	r4, r0
    75ec:	b120      	cbz	r0, 75f8 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    75ee:	2100      	movs	r1, #0
    75f0:	3008      	adds	r0, #8
    75f2:	f01c fcea 	bl	23fca <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    75f6:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    75f8:	4620      	mov	r0, r4
    75fa:	bd38      	pop	{r3, r4, r5, pc}
    75fc:	20000884 	.word	0x20000884

00007600 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    7600:	b570      	push	{r4, r5, r6, lr}
    7602:	4602      	mov	r2, r0
    7604:	460b      	mov	r3, r1
	__asm__ volatile(
    7606:	f04f 0120 	mov.w	r1, #32
    760a:	f3ef 8511 	mrs	r5, BASEPRI
    760e:	f381 8811 	msr	BASEPRI, r1
    7612:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    7616:	480c      	ldr	r0, [pc, #48]	; (7648 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    7618:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    761a:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
    761e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
	__asm__ volatile(
    7622:	f385 8811 	msr	BASEPRI, r5
    7626:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    762a:	b924      	cbnz	r4, 7636 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    762c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    7630:	2001      	movs	r0, #1
    7632:	f7ff bfd5 	b.w	75e0 <bt_buf_get_rx>
    7636:	2301      	movs	r3, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
    7638:	f104 0008 	add.w	r0, r4, #8
    763c:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    763e:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    7640:	f01c fcc3 	bl	23fca <net_buf_simple_reserve>
}
    7644:	4620      	mov	r0, r4
    7646:	bd70      	pop	{r4, r5, r6, pc}
    7648:	20000000 	.word	0x20000000

0000764c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    764c:	b570      	push	{r4, r5, r6, lr}
    764e:	4604      	mov	r4, r0
	switch (evt) {
    7650:	2c0f      	cmp	r4, #15
{
    7652:	460d      	mov	r5, r1
    7654:	4610      	mov	r0, r2
    7656:	4619      	mov	r1, r3
	switch (evt) {
    7658:	d805      	bhi.n	7666 <bt_buf_get_evt+0x1a>
    765a:	2c0d      	cmp	r4, #13
    765c:	d912      	bls.n	7684 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    765e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    7662:	f7ff bfcd 	b.w	7600 <bt_buf_get_cmd_complete>
	switch (evt) {
    7666:	2c13      	cmp	r4, #19
    7668:	d10c      	bne.n	7684 <bt_buf_get_evt+0x38>
			buf = net_buf_alloc(&num_complete_pool, timeout);
    766a:	480b      	ldr	r0, [pc, #44]	; (7698 <bt_buf_get_evt+0x4c>)
			buf = net_buf_alloc(&discardable_pool, timeout);
    766c:	f01c fc88 	bl	23f80 <net_buf_alloc_fixed>
			if (buf) {
    7670:	4604      	mov	r4, r0
    7672:	b128      	cbz	r0, 7680 <bt_buf_get_evt+0x34>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    7674:	2100      	movs	r1, #0
    7676:	3008      	adds	r0, #8
    7678:	f01c fca7 	bl	23fca <net_buf_simple_reserve>
    767c:	2301      	movs	r3, #1
    767e:	7523      	strb	r3, [r4, #20]
}
    7680:	4620      	mov	r0, r4
    7682:	bd70      	pop	{r4, r5, r6, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
    7684:	4602      	mov	r2, r0
    7686:	460b      	mov	r3, r1
		if (discardable) {
    7688:	b10d      	cbz	r5, 768e <bt_buf_get_evt+0x42>
			buf = net_buf_alloc(&discardable_pool, timeout);
    768a:	4804      	ldr	r0, [pc, #16]	; (769c <bt_buf_get_evt+0x50>)
    768c:	e7ee      	b.n	766c <bt_buf_get_evt+0x20>
}
    768e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    7692:	2001      	movs	r0, #1
    7694:	f7ff bfa4 	b.w	75e0 <bt_buf_get_rx>
    7698:	200008ac 	.word	0x200008ac
    769c:	2000080c 	.word	0x2000080c

000076a0 <le_dhkey_complete>:
{
    76a0:	b510      	push	{r4, lr}
	if (dh_key_cb) {
    76a2:	4c06      	ldr	r4, [pc, #24]	; (76bc <le_dhkey_complete+0x1c>)
    76a4:	6822      	ldr	r2, [r4, #0]
    76a6:	b132      	cbz	r2, 76b6 <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    76a8:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    76aa:	7803      	ldrb	r3, [r0, #0]
    76ac:	b923      	cbnz	r3, 76b8 <le_dhkey_complete+0x18>
    76ae:	3001      	adds	r0, #1
    76b0:	4790      	blx	r2
		dh_key_cb = NULL;
    76b2:	2300      	movs	r3, #0
    76b4:	6023      	str	r3, [r4, #0]
}
    76b6:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    76b8:	2000      	movs	r0, #0
    76ba:	e7f9      	b.n	76b0 <le_dhkey_complete+0x10>
    76bc:	2000136c 	.word	0x2000136c

000076c0 <ver_str>:
{
    76c0:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    76c2:	4d0b      	ldr	r5, [pc, #44]	; (76f0 <ver_str+0x30>)
{
    76c4:	4606      	mov	r6, r0
	const char * const str[] = {
    76c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    76c8:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    76ca:	466c      	mov	r4, sp
    76cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    76ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    76d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    76d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    76d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    76da:	2e0b      	cmp	r6, #11
		return str[ver];
    76dc:	bf9b      	ittet	ls
    76de:	ab0c      	addls	r3, sp, #48	; 0x30
    76e0:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    76e4:	4803      	ldrhi	r0, [pc, #12]	; (76f4 <ver_str+0x34>)
		return str[ver];
    76e6:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    76ea:	b00c      	add	sp, #48	; 0x30
    76ec:	bd70      	pop	{r4, r5, r6, pc}
    76ee:	bf00      	nop
    76f0:	00025194 	.word	0x00025194
    76f4:	00027599 	.word	0x00027599

000076f8 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    76f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    76fa:	4f0a      	ldr	r7, [pc, #40]	; (7724 <id_find+0x2c>)
{
    76fc:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    76fe:	2500      	movs	r5, #0
    7700:	79fb      	ldrb	r3, [r7, #7]
    7702:	b2ec      	uxtb	r4, r5
    7704:	42a3      	cmp	r3, r4
    7706:	d802      	bhi.n	770e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    7708:	f06f 0401 	mvn.w	r4, #1
    770c:	e008      	b.n	7720 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    770e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    7712:	4439      	add	r1, r7
    7714:	4630      	mov	r0, r6
    7716:	f01a f9b0 	bl	21a7a <bt_addr_le_cmp>
    771a:	3501      	adds	r5, #1
    771c:	2800      	cmp	r0, #0
    771e:	d1ef      	bne.n	7700 <id_find+0x8>
}
    7720:	4620      	mov	r0, r4
    7722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7724:	20000000 	.word	0x20000000

00007728 <hci_data_buf_overflow>:
    7728:	4905      	ldr	r1, [pc, #20]	; (7740 <hci_data_buf_overflow+0x18>)
    772a:	4a06      	ldr	r2, [pc, #24]	; (7744 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    772c:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    772e:	4806      	ldr	r0, [pc, #24]	; (7748 <hci_data_buf_overflow+0x20>)
    7730:	1a52      	subs	r2, r2, r1
    7732:	08d2      	lsrs	r2, r2, #3
    7734:	0192      	lsls	r2, r2, #6
    7736:	7819      	ldrb	r1, [r3, #0]
    7738:	f042 0202 	orr.w	r2, r2, #2
    773c:	f018 bbac 	b.w	1fe98 <log_1>
    7740:	00024fd8 	.word	0x00024fd8
    7744:	000250c0 	.word	0x000250c0
    7748:	000275a1 	.word	0x000275a1

0000774c <le_pkey_complete>:
{
    774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    774e:	6886      	ldr	r6, [r0, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7750:	480f      	ldr	r0, [pc, #60]	; (7790 <le_pkey_complete+0x44>)
    7752:	f06f 0110 	mvn.w	r1, #16
    7756:	f01a f993 	bl	21a80 <atomic_and>
	if (!evt->status) {
    775a:	7833      	ldrb	r3, [r6, #0]
    775c:	b943      	cbnz	r3, 7770 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    775e:	1c71      	adds	r1, r6, #1
    7760:	480c      	ldr	r0, [pc, #48]	; (7794 <le_pkey_complete+0x48>)
    7762:	2240      	movs	r2, #64	; 0x40
    7764:	f01a f83f 	bl	217e6 <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7768:	4809      	ldr	r0, [pc, #36]	; (7790 <le_pkey_complete+0x44>)
    776a:	2108      	movs	r1, #8
    776c:	f01a f997 	bl	21a9e <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    7770:	4d09      	ldr	r5, [pc, #36]	; (7798 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    7772:	4f08      	ldr	r7, [pc, #32]	; (7794 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    7774:	682c      	ldr	r4, [r5, #0]
    7776:	b90c      	cbnz	r4, 777c <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    7778:	602c      	str	r4, [r5, #0]
}
    777a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    777c:	7832      	ldrb	r2, [r6, #0]
    777e:	6823      	ldr	r3, [r4, #0]
    7780:	2a00      	cmp	r2, #0
    7782:	bf0c      	ite	eq
    7784:	4638      	moveq	r0, r7
    7786:	2000      	movne	r0, #0
    7788:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    778a:	6864      	ldr	r4, [r4, #4]
    778c:	e7f3      	b.n	7776 <le_pkey_complete+0x2a>
    778e:	bf00      	nop
    7790:	20000094 	.word	0x20000094
    7794:	2000303f 	.word	0x2000303f
    7798:	20001370 	.word	0x20001370

0000779c <hci_hardware_error>:
{
    779c:	b508      	push	{r3, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    779e:	2101      	movs	r1, #1
    77a0:	3008      	adds	r0, #8
    77a2:	f01c fc7a 	bl	2409a <net_buf_simple_pull_mem>
    77a6:	4b06      	ldr	r3, [pc, #24]	; (77c0 <hci_hardware_error+0x24>)
    77a8:	4a06      	ldr	r2, [pc, #24]	; (77c4 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    77aa:	7801      	ldrb	r1, [r0, #0]
    77ac:	4806      	ldr	r0, [pc, #24]	; (77c8 <hci_hardware_error+0x2c>)
    77ae:	1ad2      	subs	r2, r2, r3
    77b0:	08d2      	lsrs	r2, r2, #3
    77b2:	0192      	lsls	r2, r2, #6
}
    77b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    77b8:	f042 0201 	orr.w	r2, r2, #1
    77bc:	f018 bb6c 	b.w	1fe98 <log_1>
    77c0:	00024fd8 	.word	0x00024fd8
    77c4:	000250c0 	.word	0x000250c0
    77c8:	000275c9 	.word	0x000275c9

000077cc <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    77cc:	6883      	ldr	r3, [r0, #8]
{
    77ce:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    77d0:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    77d2:	4620      	mov	r0, r4
    77d4:	f002 fcd8 	bl	a188 <bt_conn_lookup_handle>
	if (!conn) {
    77d8:	b960      	cbnz	r0, 77f4 <le_data_len_change+0x28>
    77da:	4a08      	ldr	r2, [pc, #32]	; (77fc <le_data_len_change+0x30>)
    77dc:	4b08      	ldr	r3, [pc, #32]	; (7800 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    77de:	4809      	ldr	r0, [pc, #36]	; (7804 <le_data_len_change+0x38>)
    77e0:	1ad2      	subs	r2, r2, r3
    77e2:	08d2      	lsrs	r2, r2, #3
    77e4:	0192      	lsls	r2, r2, #6
    77e6:	4621      	mov	r1, r4
    77e8:	f042 0201 	orr.w	r2, r2, #1
}
    77ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    77f0:	f018 bb52 	b.w	1fe98 <log_1>
}
    77f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    77f8:	f01a bc28 	b.w	2204c <bt_conn_unref>
    77fc:	000250c0 	.word	0x000250c0
    7800:	00024fd8 	.word	0x00024fd8
    7804:	000275eb 	.word	0x000275eb

00007808 <hci_disconn_complete_prio>:
{
    7808:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    780a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    780c:	781a      	ldrb	r2, [r3, #0]
    780e:	b9da      	cbnz	r2, 7848 <hci_disconn_complete_prio+0x40>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7810:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    7814:	4628      	mov	r0, r5
    7816:	f002 fcb7 	bl	a188 <bt_conn_lookup_handle>
	if (!conn) {
    781a:	4604      	mov	r4, r0
    781c:	b960      	cbnz	r0, 7838 <hci_disconn_complete_prio+0x30>
    781e:	4b0b      	ldr	r3, [pc, #44]	; (784c <hci_disconn_complete_prio+0x44>)
    7820:	4a0b      	ldr	r2, [pc, #44]	; (7850 <hci_disconn_complete_prio+0x48>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    7822:	480c      	ldr	r0, [pc, #48]	; (7854 <hci_disconn_complete_prio+0x4c>)
    7824:	1ad2      	subs	r2, r2, r3
    7826:	08d2      	lsrs	r2, r2, #3
    7828:	0192      	lsls	r2, r2, #6
    782a:	4629      	mov	r1, r5
    782c:	f042 0201 	orr.w	r2, r2, #1
}
    7830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    7834:	f018 bb30 	b.w	1fe98 <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    7838:	2101      	movs	r1, #1
    783a:	f002 fcb1 	bl	a1a0 <bt_conn_set_state>
	bt_conn_unref(conn);
    783e:	4620      	mov	r0, r4
}
    7840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    7844:	f01a bc02 	b.w	2204c <bt_conn_unref>
}
    7848:	bd38      	pop	{r3, r4, r5, pc}
    784a:	bf00      	nop
    784c:	00024fd8 	.word	0x00024fd8
    7850:	000250c0 	.word	0x000250c0
    7854:	0002760f 	.word	0x0002760f

00007858 <hci_vendor_event>:
{
    7858:	b510      	push	{r4, lr}
    785a:	4a0a      	ldr	r2, [pc, #40]	; (7884 <hci_vendor_event+0x2c>)
    785c:	4c0a      	ldr	r4, [pc, #40]	; (7888 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    785e:	8981      	ldrh	r1, [r0, #12]
    7860:	6880      	ldr	r0, [r0, #8]
    7862:	1aa4      	subs	r4, r4, r2
    7864:	f7ff fc36 	bl	70d4 <bt_hex_real>
    7868:	f7fd fd1e 	bl	52a8 <log_strdup>
    786c:	08e4      	lsrs	r4, r4, #3
    786e:	01a4      	lsls	r4, r4, #6
    7870:	f044 0402 	orr.w	r4, r4, #2
    7874:	4601      	mov	r1, r0
    7876:	4622      	mov	r2, r4
    7878:	4804      	ldr	r0, [pc, #16]	; (788c <hci_vendor_event+0x34>)
}
    787a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    787e:	f018 bb0b 	b.w	1fe98 <log_1>
    7882:	bf00      	nop
    7884:	00024fd8 	.word	0x00024fd8
    7888:	000250c0 	.word	0x000250c0
    788c:	00027635 	.word	0x00027635

00007890 <le_conn_update_complete>:
{
    7890:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    7892:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    7894:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    7898:	4630      	mov	r0, r6
    789a:	f002 fc75 	bl	a188 <bt_conn_lookup_handle>
	if (!conn) {
    789e:	4604      	mov	r4, r0
    78a0:	b960      	cbnz	r0, 78bc <le_conn_update_complete+0x2c>
    78a2:	4a1e      	ldr	r2, [pc, #120]	; (791c <le_conn_update_complete+0x8c>)
    78a4:	4b1e      	ldr	r3, [pc, #120]	; (7920 <le_conn_update_complete+0x90>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    78a6:	481f      	ldr	r0, [pc, #124]	; (7924 <le_conn_update_complete+0x94>)
    78a8:	1ad2      	subs	r2, r2, r3
    78aa:	08d2      	lsrs	r2, r2, #3
    78ac:	0192      	lsls	r2, r2, #6
    78ae:	f042 0201 	orr.w	r2, r2, #1
    78b2:	4631      	mov	r1, r6
    78b4:	f018 faf0 	bl	1fe98 <log_1>
}
    78b8:	b002      	add	sp, #8
    78ba:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    78bc:	782b      	ldrb	r3, [r5, #0]
    78be:	b9bb      	cbnz	r3, 78f0 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    78c0:	792a      	ldrb	r2, [r5, #4]
    78c2:	78eb      	ldrb	r3, [r5, #3]
    78c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    78c8:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    78cc:	79aa      	ldrb	r2, [r5, #6]
    78ce:	796b      	ldrb	r3, [r5, #5]
    78d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    78d4:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    78d8:	79eb      	ldrb	r3, [r5, #7]
    78da:	7a2a      	ldrb	r2, [r5, #8]
    78dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    78e0:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    78e4:	f002 fa40 	bl	9d68 <notify_le_param_updated>
	bt_conn_unref(conn);
    78e8:	4620      	mov	r0, r4
    78ea:	f01a fbaf 	bl	2204c <bt_conn_unref>
    78ee:	e7e3      	b.n	78b8 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    78f0:	2b1a      	cmp	r3, #26
    78f2:	d1f9      	bne.n	78e8 <le_conn_update_complete+0x58>
    78f4:	78c3      	ldrb	r3, [r0, #3]
    78f6:	2b01      	cmp	r3, #1
    78f8:	d1f6      	bne.n	78e8 <le_conn_update_complete+0x58>
		   !atomic_test_and_set_bit(conn->flags,
    78fa:	210a      	movs	r1, #10
    78fc:	3004      	adds	r0, #4
    78fe:	f01a f8ee 	bl	21ade <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    7902:	2800      	cmp	r0, #0
    7904:	d1f0      	bne.n	78e8 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
    7906:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    790a:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    790c:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    790e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    7912:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    7914:	4620      	mov	r0, r4
    7916:	f003 fa59 	bl	adcc <bt_l2cap_update_conn_param>
    791a:	e7e5      	b.n	78e8 <le_conn_update_complete+0x58>
    791c:	000250c0 	.word	0x000250c0
    7920:	00024fd8 	.word	0x00024fd8
    7924:	000275eb 	.word	0x000275eb

00007928 <update_sec_level>:
{
    7928:	b510      	push	{r4, lr}
	if (!conn->encrypt) {
    792a:	7ac3      	ldrb	r3, [r0, #11]
{
    792c:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    792e:	b913      	cbnz	r3, 7936 <update_sec_level+0xe>
		conn->sec_level = BT_SECURITY_L1;
    7930:	2301      	movs	r3, #1
    7932:	7243      	strb	r3, [r0, #9]
}
    7934:	bd10      	pop	{r4, pc}
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    7936:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    793a:	b1fb      	cbz	r3, 797c <update_sec_level+0x54>
    793c:	7b5a      	ldrb	r2, [r3, #13]
    793e:	07d1      	lsls	r1, r2, #31
    7940:	d51c      	bpl.n	797c <update_sec_level+0x54>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    7942:	06d2      	lsls	r2, r2, #27
    7944:	d518      	bpl.n	7978 <update_sec_level+0x50>
    7946:	7b1b      	ldrb	r3, [r3, #12]
    7948:	2b10      	cmp	r3, #16
    794a:	d115      	bne.n	7978 <update_sec_level+0x50>
			conn->sec_level = BT_SECURITY_L4;
    794c:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
    794e:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    7950:	7aa2      	ldrb	r2, [r4, #10]
    7952:	7a63      	ldrb	r3, [r4, #9]
    7954:	429a      	cmp	r2, r3
    7956:	d9ed      	bls.n	7934 <update_sec_level+0xc>
    7958:	4b09      	ldr	r3, [pc, #36]	; (7980 <update_sec_level+0x58>)
    795a:	490a      	ldr	r1, [pc, #40]	; (7984 <update_sec_level+0x5c>)
		BT_ERR("Failed to set required security level");
    795c:	480a      	ldr	r0, [pc, #40]	; (7988 <update_sec_level+0x60>)
    795e:	1ac9      	subs	r1, r1, r3
    7960:	08c9      	lsrs	r1, r1, #3
    7962:	0189      	lsls	r1, r1, #6
    7964:	f041 0101 	orr.w	r1, r1, #1
    7968:	f018 fa89 	bl	1fe7e <log_0>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    796c:	4620      	mov	r0, r4
    796e:	2105      	movs	r1, #5
}
    7970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    7974:	f002 bea0 	b.w	a6b8 <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
    7978:	2303      	movs	r3, #3
    797a:	e7e8      	b.n	794e <update_sec_level+0x26>
		conn->sec_level = BT_SECURITY_L2;
    797c:	2302      	movs	r3, #2
    797e:	e7e6      	b.n	794e <update_sec_level+0x26>
    7980:	00024fd8 	.word	0x00024fd8
    7984:	000250c0 	.word	0x000250c0
    7988:	00027659 	.word	0x00027659

0000798c <hci_encrypt_key_refresh_complete>:
{
    798c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    798e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    7990:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    7994:	4630      	mov	r0, r6
    7996:	f002 fbf7 	bl	a188 <bt_conn_lookup_handle>
	if (!conn) {
    799a:	4604      	mov	r4, r0
    799c:	b960      	cbnz	r0, 79b8 <hci_encrypt_key_refresh_complete+0x2c>
    799e:	4a13      	ldr	r2, [pc, #76]	; (79ec <hci_encrypt_key_refresh_complete+0x60>)
    79a0:	4b13      	ldr	r3, [pc, #76]	; (79f0 <hci_encrypt_key_refresh_complete+0x64>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    79a2:	4814      	ldr	r0, [pc, #80]	; (79f4 <hci_encrypt_key_refresh_complete+0x68>)
    79a4:	1ad2      	subs	r2, r2, r3
    79a6:	08d2      	lsrs	r2, r2, #3
    79a8:	0192      	lsls	r2, r2, #6
    79aa:	4631      	mov	r1, r6
    79ac:	f042 0201 	orr.w	r2, r2, #1
}
    79b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    79b4:	f018 ba70 	b.w	1fe98 <log_1>
	if (evt->status) {
    79b8:	7829      	ldrb	r1, [r5, #0]
    79ba:	b161      	cbz	r1, 79d6 <hci_encrypt_key_refresh_complete+0x4a>
	switch (hci_err) {
    79bc:	2929      	cmp	r1, #41	; 0x29
    79be:	bf9a      	itte	ls
    79c0:	4b0d      	ldrls	r3, [pc, #52]	; (79f8 <hci_encrypt_key_refresh_complete+0x6c>)
    79c2:	5c5a      	ldrbls	r2, [r3, r1]
	if (evt->status) {
    79c4:	2208      	movhi	r2, #8
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    79c6:	4620      	mov	r0, r4
    79c8:	f002 fa3c 	bl	9e44 <bt_conn_security_changed>
	bt_conn_unref(conn);
    79cc:	4620      	mov	r0, r4
}
    79ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    79d2:	f01a bb3b 	b.w	2204c <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    79d6:	7883      	ldrb	r3, [r0, #2]
    79d8:	2b01      	cmp	r3, #1
    79da:	d104      	bne.n	79e6 <hci_encrypt_key_refresh_complete+0x5a>
		bt_smp_update_keys(conn);
    79dc:	f007 fc68 	bl	f2b0 <bt_smp_update_keys>
		update_sec_level(conn);
    79e0:	4620      	mov	r0, r4
    79e2:	f7ff ffa1 	bl	7928 <update_sec_level>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    79e6:	7829      	ldrb	r1, [r5, #0]
    79e8:	2200      	movs	r2, #0
    79ea:	e7ec      	b.n	79c6 <hci_encrypt_key_refresh_complete+0x3a>
    79ec:	000250c0 	.word	0x000250c0
    79f0:	00024fd8 	.word	0x00024fd8
    79f4:	0002760f 	.word	0x0002760f
    79f8:	00027ebd 	.word	0x00027ebd

000079fc <hci_encrypt_change>:
{
    79fc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    79fe:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7a00:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    7a04:	4630      	mov	r0, r6
    7a06:	f002 fbbf 	bl	a188 <bt_conn_lookup_handle>
	if (!conn) {
    7a0a:	4604      	mov	r4, r0
    7a0c:	b960      	cbnz	r0, 7a28 <hci_encrypt_change+0x2c>
    7a0e:	4a15      	ldr	r2, [pc, #84]	; (7a64 <hci_encrypt_change+0x68>)
    7a10:	4b15      	ldr	r3, [pc, #84]	; (7a68 <hci_encrypt_change+0x6c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    7a12:	4816      	ldr	r0, [pc, #88]	; (7a6c <hci_encrypt_change+0x70>)
    7a14:	1ad2      	subs	r2, r2, r3
    7a16:	08d2      	lsrs	r2, r2, #3
    7a18:	0192      	lsls	r2, r2, #6
    7a1a:	4631      	mov	r1, r6
    7a1c:	f042 0201 	orr.w	r2, r2, #1
}
    7a20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    7a24:	f018 ba38 	b.w	1fe98 <log_1>
	if (evt->status) {
    7a28:	7829      	ldrb	r1, [r5, #0]
    7a2a:	b161      	cbz	r1, 7a46 <hci_encrypt_change+0x4a>
	switch (hci_err) {
    7a2c:	2929      	cmp	r1, #41	; 0x29
    7a2e:	bf9a      	itte	ls
    7a30:	4b0f      	ldrls	r3, [pc, #60]	; (7a70 <hci_encrypt_change+0x74>)
    7a32:	5c5a      	ldrbls	r2, [r3, r1]
	if (evt->status) {
    7a34:	2208      	movhi	r2, #8
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    7a36:	4620      	mov	r0, r4
    7a38:	f002 fa04 	bl	9e44 <bt_conn_security_changed>
	bt_conn_unref(conn);
    7a3c:	4620      	mov	r0, r4
}
    7a3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    7a42:	f01a bb03 	b.w	2204c <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    7a46:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    7a48:	78eb      	ldrb	r3, [r5, #3]
    7a4a:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    7a4c:	2a01      	cmp	r2, #1
    7a4e:	d105      	bne.n	7a5c <hci_encrypt_change+0x60>
		if (conn->encrypt) {
    7a50:	b10b      	cbz	r3, 7a56 <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
    7a52:	f007 fc2d 	bl	f2b0 <bt_smp_update_keys>
		update_sec_level(conn);
    7a56:	4620      	mov	r0, r4
    7a58:	f7ff ff66 	bl	7928 <update_sec_level>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    7a5c:	7829      	ldrb	r1, [r5, #0]
    7a5e:	2200      	movs	r2, #0
    7a60:	e7e9      	b.n	7a36 <hci_encrypt_change+0x3a>
    7a62:	bf00      	nop
    7a64:	000250c0 	.word	0x000250c0
    7a68:	00024fd8 	.word	0x00024fd8
    7a6c:	0002760f 	.word	0x0002760f
    7a70:	00027ebd 	.word	0x00027ebd

00007a74 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    7a74:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    7a76:	4c0c      	ldr	r4, [pc, #48]	; (7aa8 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    7a78:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    7a7a:	2205      	movs	r2, #5
    7a7c:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    7a80:	f002 fcd6 	bl	a430 <bt_conn_lookup_state_le>
		if (!conn) {
    7a84:	b970      	cbnz	r0, 7aa4 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    7a86:	4b09      	ldr	r3, [pc, #36]	; (7aac <find_pending_connect.part.0+0x38>)
    7a88:	6818      	ldr	r0, [r3, #0]
    7a8a:	889a      	ldrh	r2, [r3, #4]
    7a8c:	9000      	str	r0, [sp, #0]
    7a8e:	799b      	ldrb	r3, [r3, #6]
    7a90:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    7a94:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    7a98:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    7a9c:	2204      	movs	r2, #4
    7a9e:	4669      	mov	r1, sp
    7aa0:	f002 fcc6 	bl	a430 <bt_conn_lookup_state_le>
}
    7aa4:	b002      	add	sp, #8
    7aa6:	bd10      	pop	{r4, pc}
    7aa8:	20000000 	.word	0x20000000
    7aac:	000251c4 	.word	0x000251c4

00007ab0 <hci_cmd_done>:
{
    7ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7ab4:	4607      	mov	r7, r0
    7ab6:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    7ab8:	7990      	ldrb	r0, [r2, #6]
    7aba:	4e34      	ldr	r6, [pc, #208]	; (7b8c <hci_cmd_done+0xdc>)
{
    7abc:	4688      	mov	r8, r1
    7abe:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    7ac0:	f015 fa70 	bl	1cfa4 <net_buf_pool_get>
    7ac4:	4286      	cmp	r6, r0
    7ac6:	d016      	beq.n	7af6 <hci_cmd_done+0x46>
    7ac8:	4b31      	ldr	r3, [pc, #196]	; (7b90 <hci_cmd_done+0xe0>)
    7aca:	4d32      	ldr	r5, [pc, #200]	; (7b94 <hci_cmd_done+0xe4>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    7acc:	79a0      	ldrb	r0, [r4, #6]
    7ace:	9700      	str	r7, [sp, #0]
    7ad0:	1aed      	subs	r5, r5, r3
    7ad2:	08ed      	lsrs	r5, r5, #3
    7ad4:	9001      	str	r0, [sp, #4]
    7ad6:	f015 fa65 	bl	1cfa4 <net_buf_pool_get>
    7ada:	01ad      	lsls	r5, r5, #6
    7adc:	f045 0502 	orr.w	r5, r5, #2
    7ae0:	e9cd 0602 	strd	r0, r6, [sp, #8]
    7ae4:	462b      	mov	r3, r5
    7ae6:	482c      	ldr	r0, [pc, #176]	; (7b98 <hci_cmd_done+0xe8>)
    7ae8:	2204      	movs	r2, #4
    7aea:	4669      	mov	r1, sp
    7aec:	f018 fa1d 	bl	1ff2a <log_n>
}
    7af0:	b005      	add	sp, #20
    7af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    7af6:	4620      	mov	r0, r4
    7af8:	f015 fa5c 	bl	1cfb4 <net_buf_id>
    7afc:	4d27      	ldr	r5, [pc, #156]	; (7b9c <hci_cmd_done+0xec>)
    7afe:	f04f 090c 	mov.w	r9, #12
    7b02:	fb09 5300 	mla	r3, r9, r0, r5
    7b06:	885b      	ldrh	r3, [r3, #2]
    7b08:	42bb      	cmp	r3, r7
    7b0a:	d011      	beq.n	7b30 <hci_cmd_done+0x80>
    7b0c:	4b20      	ldr	r3, [pc, #128]	; (7b90 <hci_cmd_done+0xe0>)
    7b0e:	4e21      	ldr	r6, [pc, #132]	; (7b94 <hci_cmd_done+0xe4>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    7b10:	4620      	mov	r0, r4
    7b12:	1af6      	subs	r6, r6, r3
    7b14:	f015 fa4e 	bl	1cfb4 <net_buf_id>
    7b18:	08f6      	lsrs	r6, r6, #3
    7b1a:	fb09 5000 	mla	r0, r9, r0, r5
    7b1e:	01b6      	lsls	r6, r6, #6
    7b20:	f046 0602 	orr.w	r6, r6, #2
    7b24:	8842      	ldrh	r2, [r0, #2]
    7b26:	481e      	ldr	r0, [pc, #120]	; (7ba0 <hci_cmd_done+0xf0>)
    7b28:	4633      	mov	r3, r6
    7b2a:	4639      	mov	r1, r7
    7b2c:	f018 f9c8 	bl	1fec0 <log_2>
	if (cmd(buf)->state && !status) {
    7b30:	4620      	mov	r0, r4
    7b32:	f015 fa3f 	bl	1cfb4 <net_buf_id>
    7b36:	260c      	movs	r6, #12
    7b38:	fb06 5000 	mla	r0, r6, r0, r5
    7b3c:	6843      	ldr	r3, [r0, #4]
    7b3e:	b16b      	cbz	r3, 7b5c <hci_cmd_done+0xac>
    7b40:	f1b8 0f00 	cmp.w	r8, #0
    7b44:	d10a      	bne.n	7b5c <hci_cmd_done+0xac>
		struct cmd_state_set *update = cmd(buf)->state;
    7b46:	4620      	mov	r0, r4
    7b48:	f015 fa34 	bl	1cfb4 <net_buf_id>
    7b4c:	fb06 5000 	mla	r0, r6, r0, r5
    7b50:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    7b52:	e9d3 0100 	ldrd	r0, r1, [r3]
    7b56:	7a1a      	ldrb	r2, [r3, #8]
    7b58:	f019 ffb0 	bl	21abc <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    7b5c:	4620      	mov	r0, r4
    7b5e:	f015 fa29 	bl	1cfb4 <net_buf_id>
    7b62:	260c      	movs	r6, #12
    7b64:	fb06 5000 	mla	r0, r6, r0, r5
    7b68:	6883      	ldr	r3, [r0, #8]
    7b6a:	2b00      	cmp	r3, #0
    7b6c:	d0c0      	beq.n	7af0 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    7b6e:	4620      	mov	r0, r4
    7b70:	f015 fa20 	bl	1cfb4 <net_buf_id>
    7b74:	4370      	muls	r0, r6
    7b76:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    7b7a:	4620      	mov	r0, r4
    7b7c:	f015 fa1a 	bl	1cfb4 <net_buf_id>
    7b80:	fb06 5500 	mla	r5, r6, r0, r5
    7b84:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    7b86:	f017 f901 	bl	1ed8c <z_impl_k_sem_give>
}
    7b8a:	e7b1      	b.n	7af0 <hci_cmd_done+0x40>
    7b8c:	2000085c 	.word	0x2000085c
    7b90:	00024fd8 	.word	0x00024fd8
    7b94:	000250c0 	.word	0x000250c0
    7b98:	0002767f 	.word	0x0002767f
    7b9c:	20001354 	.word	0x20001354
    7ba0:	000276b4 	.word	0x000276b4

00007ba4 <handle_event>:
{
    7ba4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7ba6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7baa:	4605      	mov	r5, r0
    7bac:	4608      	mov	r0, r1
		if (handler->event != event) {
    7bae:	7811      	ldrb	r1, [r2, #0]
    7bb0:	42a9      	cmp	r1, r5
    7bb2:	d01a      	beq.n	7bea <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    7bb4:	3208      	adds	r2, #8
    7bb6:	429a      	cmp	r2, r3
    7bb8:	d1f9      	bne.n	7bae <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    7bba:	8986      	ldrh	r6, [r0, #12]
    7bbc:	4b16      	ldr	r3, [pc, #88]	; (7c18 <handle_event+0x74>)
    7bbe:	4c17      	ldr	r4, [pc, #92]	; (7c1c <handle_event+0x78>)
    7bc0:	6880      	ldr	r0, [r0, #8]
    7bc2:	4631      	mov	r1, r6
    7bc4:	1ae4      	subs	r4, r4, r3
    7bc6:	f7ff fa85 	bl	70d4 <bt_hex_real>
    7bca:	f7fd fb6d 	bl	52a8 <log_strdup>
    7bce:	08e4      	lsrs	r4, r4, #3
    7bd0:	01a4      	lsls	r4, r4, #6
    7bd2:	f044 0402 	orr.w	r4, r4, #2
    7bd6:	4603      	mov	r3, r0
    7bd8:	f8ad 4000 	strh.w	r4, [sp]
    7bdc:	4810      	ldr	r0, [pc, #64]	; (7c20 <handle_event+0x7c>)
    7bde:	4632      	mov	r2, r6
    7be0:	4629      	mov	r1, r5
    7be2:	f018 f986 	bl	1fef2 <log_3>
}
    7be6:	b002      	add	sp, #8
    7be8:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    7bea:	8981      	ldrh	r1, [r0, #12]
    7bec:	7853      	ldrb	r3, [r2, #1]
    7bee:	428b      	cmp	r3, r1
    7bf0:	d90d      	bls.n	7c0e <handle_event+0x6a>
    7bf2:	4a09      	ldr	r2, [pc, #36]	; (7c18 <handle_event+0x74>)
    7bf4:	4b09      	ldr	r3, [pc, #36]	; (7c1c <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    7bf6:	480b      	ldr	r0, [pc, #44]	; (7c24 <handle_event+0x80>)
    7bf8:	1a9b      	subs	r3, r3, r2
    7bfa:	08db      	lsrs	r3, r3, #3
    7bfc:	019b      	lsls	r3, r3, #6
    7bfe:	f043 0301 	orr.w	r3, r3, #1
    7c02:	462a      	mov	r2, r5
}
    7c04:	b002      	add	sp, #8
    7c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    7c0a:	f018 b959 	b.w	1fec0 <log_2>
		handler->handler(buf);
    7c0e:	6853      	ldr	r3, [r2, #4]
}
    7c10:	b002      	add	sp, #8
    7c12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    7c16:	4718      	bx	r3
    7c18:	00024fd8 	.word	0x00024fd8
    7c1c:	000250c0 	.word	0x000250c0
    7c20:	00027709 	.word	0x00027709
    7c24:	000276e7 	.word	0x000276e7

00007c28 <hci_le_meta_event>:
{
    7c28:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7c2a:	2101      	movs	r1, #1
{
    7c2c:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7c2e:	3008      	adds	r0, #8
    7c30:	f01c fa33 	bl	2409a <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    7c34:	4621      	mov	r1, r4
    7c36:	4a03      	ldr	r2, [pc, #12]	; (7c44 <hci_le_meta_event+0x1c>)
    7c38:	7800      	ldrb	r0, [r0, #0]
}
    7c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    7c3e:	230b      	movs	r3, #11
    7c40:	f7ff bfb0 	b.w	7ba4 <handle_event>
    7c44:	00025540 	.word	0x00025540

00007c48 <id_create.isra.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    7c48:	b530      	push	{r4, r5, lr}
    7c4a:	4d13      	ldr	r5, [pc, #76]	; (7c98 <id_create.isra.0+0x50>)
    7c4c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    7c50:	b085      	sub	sp, #20
    7c52:	4405      	add	r5, r0
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    7c54:	460c      	mov	r4, r1
    7c56:	b171      	cbz	r1, 7c76 <id_create.isra.0+0x2e>
    7c58:	2300      	movs	r3, #0
    7c5a:	4669      	mov	r1, sp
    7c5c:	4620      	mov	r0, r4
    7c5e:	9300      	str	r3, [sp, #0]
    7c60:	f8cd 3003 	str.w	r3, [sp, #3]
    7c64:	f019 ff09 	bl	21a7a <bt_addr_le_cmp>
    7c68:	b128      	cbz	r0, 7c76 <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    7c6a:	4621      	mov	r1, r4
    7c6c:	4628      	mov	r0, r5
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    7c6e:	f019 ff01 	bl	21a74 <bt_addr_le_copy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
    7c72:	b005      	add	sp, #20
    7c74:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    7c76:	a802      	add	r0, sp, #8
    7c78:	f019 fed6 	bl	21a28 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    7c7c:	a802      	add	r0, sp, #8
    7c7e:	f7ff fd3b 	bl	76f8 <id_find>
    7c82:	2800      	cmp	r0, #0
    7c84:	daf7      	bge.n	7c76 <id_create.isra.0+0x2e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    7c86:	a902      	add	r1, sp, #8
    7c88:	4628      	mov	r0, r5
    7c8a:	f019 fef3 	bl	21a74 <bt_addr_le_copy>
		if (addr) {
    7c8e:	2c00      	cmp	r4, #0
    7c90:	d0ef      	beq.n	7c72 <id_create.isra.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    7c92:	4629      	mov	r1, r5
    7c94:	4620      	mov	r0, r4
    7c96:	e7ea      	b.n	7c6e <id_create.isra.0+0x26>
    7c98:	20000000 	.word	0x20000000

00007c9c <hci_tx_thread>:
{
    7c9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ca0:	4d51      	ldr	r5, [pc, #324]	; (7de8 <hci_tx_thread+0x14c>)
    7ca2:	4b52      	ldr	r3, [pc, #328]	; (7dec <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    7ca4:	f8df 914c 	ldr.w	r9, [pc, #332]	; 7df4 <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
    7ca8:	f8df a174 	ldr.w	sl, [pc, #372]	; 7e20 <hci_tx_thread+0x184>
    7cac:	1aed      	subs	r5, r5, r3
    7cae:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    7cb0:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7cb4:	484e      	ldr	r0, [pc, #312]	; (7df0 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
    7cb6:	f36f 3310 	bfc	r3, #12, #5
    7cba:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7cbe:	f002 f9f7 	bl	a0b0 <bt_conn_prepare_events>
    7cc2:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    7cc4:	484b      	ldr	r0, [pc, #300]	; (7df4 <hci_tx_thread+0x158>)
    7cc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7cce:	4639      	mov	r1, r7
    7cd0:	f017 fbea 	bl	1f4a8 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    7cd4:	b160      	cbz	r0, 7cf0 <hci_tx_thread+0x54>
    7cd6:	4948      	ldr	r1, [pc, #288]	; (7df8 <hci_tx_thread+0x15c>)
    7cd8:	4848      	ldr	r0, [pc, #288]	; (7dfc <hci_tx_thread+0x160>)
    7cda:	f241 4370 	movw	r3, #5232	; 0x1470
    7cde:	4652      	mov	r2, sl
    7ce0:	f017 fd09 	bl	1f6f6 <printk>
    7ce4:	4040      	eors	r0, r0
    7ce6:	f380 8811 	msr	BASEPRI, r0
    7cea:	f04f 0003 	mov.w	r0, #3
    7cee:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    7cf0:	4e43      	ldr	r6, [pc, #268]	; (7e00 <hci_tx_thread+0x164>)
{
    7cf2:	f8df 8100 	ldr.w	r8, [pc, #256]	; 7df4 <hci_tx_thread+0x158>
    7cf6:	f106 0be8 	add.w	fp, r6, #232	; 0xe8
	for (; count; ev++, count--) {
    7cfa:	b917      	cbnz	r7, 7d02 <hci_tx_thread+0x66>
	z_impl_k_yield();
    7cfc:	f016 ffd6 	bl	1ecac <z_impl_k_yield>
	while (1) {
    7d00:	e7d6      	b.n	7cb0 <hci_tx_thread+0x14>
		switch (ev->state) {
    7d02:	f8d8 100c 	ldr.w	r1, [r8, #12]
    7d06:	f3c1 3104 	ubfx	r1, r1, #12, #5
    7d0a:	2901      	cmp	r1, #1
    7d0c:	d959      	bls.n	7dc2 <hci_tx_thread+0x126>
    7d0e:	2904      	cmp	r1, #4
    7d10:	d163      	bne.n	7dda <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    7d12:	f898 300c 	ldrb.w	r3, [r8, #12]
    7d16:	2b00      	cmp	r3, #0
    7d18:	d157      	bne.n	7dca <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    7d1a:	483a      	ldr	r0, [pc, #232]	; (7e04 <hci_tx_thread+0x168>)
    7d1c:	2200      	movs	r2, #0
    7d1e:	2300      	movs	r3, #0
    7d20:	f01c f933 	bl	23f8a <net_buf_get>
	BT_ASSERT(buf);
    7d24:	4604      	mov	r4, r0
    7d26:	b960      	cbnz	r0, 7d42 <hci_tx_thread+0xa6>
    7d28:	4937      	ldr	r1, [pc, #220]	; (7e08 <hci_tx_thread+0x16c>)
    7d2a:	4834      	ldr	r0, [pc, #208]	; (7dfc <hci_tx_thread+0x160>)
    7d2c:	f241 430d 	movw	r3, #5133	; 0x140d
    7d30:	4652      	mov	r2, sl
    7d32:	f017 fce0 	bl	1f6f6 <printk>
    7d36:	4040      	eors	r0, r0
    7d38:	f380 8811 	msr	BASEPRI, r0
    7d3c:	f04f 0003 	mov.w	r0, #3
    7d40:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    7d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7d46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7d4a:	4658      	mov	r0, fp
    7d4c:	f017 f844 	bl	1edd8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    7d50:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    7d54:	b163      	cbz	r3, 7d70 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    7d56:	01a9      	lsls	r1, r5, #6
    7d58:	482c      	ldr	r0, [pc, #176]	; (7e0c <hci_tx_thread+0x170>)
    7d5a:	f041 0101 	orr.w	r1, r1, #1
    7d5e:	f018 f88e 	bl	1fe7e <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    7d62:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    7d66:	f015 f9d9 	bl	1d11c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    7d6a:	2300      	movs	r3, #0
    7d6c:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
    7d70:	4620      	mov	r0, r4
    7d72:	f01c f93b 	bl	23fec <net_buf_ref>
    7d76:	f8c6 0100 	str.w	r0, [r6, #256]	; 0x100
		return bt_hci_ecc_send(buf);
    7d7a:	4620      	mov	r0, r4
    7d7c:	f7ff faec 	bl	7358 <bt_hci_ecc_send>
	if (err) {
    7d80:	4601      	mov	r1, r0
    7d82:	b1f0      	cbz	r0, 7dc2 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    7d84:	01aa      	lsls	r2, r5, #6
    7d86:	4822      	ldr	r0, [pc, #136]	; (7e10 <hci_tx_thread+0x174>)
    7d88:	f042 0201 	orr.w	r2, r2, #1
    7d8c:	f018 f884 	bl	1fe98 <log_1>
	z_impl_k_sem_give(sem);
    7d90:	4820      	ldr	r0, [pc, #128]	; (7e14 <hci_tx_thread+0x178>)
    7d92:	f016 fffb 	bl	1ed8c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    7d96:	4620      	mov	r0, r4
    7d98:	f015 f90c 	bl	1cfb4 <net_buf_id>
    7d9c:	4b1e      	ldr	r3, [pc, #120]	; (7e18 <hci_tx_thread+0x17c>)
    7d9e:	220c      	movs	r2, #12
    7da0:	fb02 3000 	mla	r0, r2, r0, r3
    7da4:	211f      	movs	r1, #31
    7da6:	8840      	ldrh	r0, [r0, #2]
    7da8:	4622      	mov	r2, r4
    7daa:	f7ff fe81 	bl	7ab0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    7dae:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    7db2:	f015 f9b3 	bl	1d11c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    7db6:	2300      	movs	r3, #0
		net_buf_unref(buf);
    7db8:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    7dba:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
		net_buf_unref(buf);
    7dbe:	f015 f9ad 	bl	1d11c <net_buf_unref>
	for (; count; ev++, count--) {
    7dc2:	f108 0814 	add.w	r8, r8, #20
    7dc6:	3f01      	subs	r7, #1
    7dc8:	e797      	b.n	7cfa <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    7dca:	2b01      	cmp	r3, #1
    7dcc:	d1f9      	bne.n	7dc2 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    7dce:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    7dd2:	3834      	subs	r0, #52	; 0x34
    7dd4:	f002 fda2 	bl	a91c <bt_conn_process_tx>
    7dd8:	e7f3      	b.n	7dc2 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    7dda:	01aa      	lsls	r2, r5, #6
    7ddc:	480f      	ldr	r0, [pc, #60]	; (7e1c <hci_tx_thread+0x180>)
    7dde:	f042 0202 	orr.w	r2, r2, #2
    7de2:	f018 f859 	bl	1fe98 <log_1>
    7de6:	e7ec      	b.n	7dc2 <hci_tx_thread+0x126>
    7de8:	000250c0 	.word	0x000250c0
    7dec:	00024fd8 	.word	0x00024fd8
    7df0:	2000018c 	.word	0x2000018c
    7df4:	20000178 	.word	0x20000178
    7df8:	0002775f 	.word	0x0002775f
    7dfc:	00027768 	.word	0x00027768
    7e00:	20000000 	.word	0x20000000
    7e04:	20000104 	.word	0x20000104
    7e08:	000274aa 	.word	0x000274aa
    7e0c:	00027785 	.word	0x00027785
    7e10:	000277a0 	.word	0x000277a0
    7e14:	200000e8 	.word	0x200000e8
    7e18:	20001354 	.word	0x20001354
    7e1c:	000277c2 	.word	0x000277c2
    7e20:	0002772b 	.word	0x0002772b

00007e24 <hci_num_completed_packets>:
{
    7e24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e28:	4d3d      	ldr	r5, [pc, #244]	; (7f20 <hci_num_completed_packets+0xfc>)
    7e2a:	4b3e      	ldr	r3, [pc, #248]	; (7f24 <hci_num_completed_packets+0x100>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    7e2c:	f8d0 8008 	ldr.w	r8, [r0, #8]
		k_queue_append(&work_q->queue, work);
    7e30:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 7f30 <hci_num_completed_packets+0x10c>
    7e34:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    7e36:	2600      	movs	r6, #0
    7e38:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    7e3a:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    7e3c:	f898 3000 	ldrb.w	r3, [r8]
    7e40:	429e      	cmp	r6, r3
    7e42:	db01      	blt.n	7e48 <hci_num_completed_packets+0x24>
}
    7e44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    7e48:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    7e4c:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    7e50:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    7e54:	4658      	mov	r0, fp
    7e56:	f002 f997 	bl	a188 <bt_conn_lookup_handle>
		if (!conn) {
    7e5a:	4604      	mov	r4, r0
    7e5c:	b1d8      	cbz	r0, 7e96 <hci_num_completed_packets+0x72>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7e5e:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    7e62:	2f00      	cmp	r7, #0
    7e64:	d033      	beq.n	7ece <hci_num_completed_packets+0xaa>
	__asm__ volatile(
    7e66:	f04f 0320 	mov.w	r3, #32
    7e6a:	f3ef 8211 	mrs	r2, BASEPRI
    7e6e:	f383 8811 	msr	BASEPRI, r3
    7e72:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    7e76:	69e3      	ldr	r3, [r4, #28]
    7e78:	b1b3      	cbz	r3, 7ea8 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
    7e7a:	3b01      	subs	r3, #1
    7e7c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    7e7e:	f382 8811 	msr	BASEPRI, r2
    7e82:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    7e86:	4620      	mov	r0, r4
    7e88:	f001 ff6a 	bl	9d60 <bt_conn_get_pkts>
    7e8c:	3f01      	subs	r7, #1
    7e8e:	f016 ff7d 	bl	1ed8c <z_impl_k_sem_give>
    7e92:	b2bf      	uxth	r7, r7
    7e94:	e7e5      	b.n	7e62 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    7e96:	01aa      	lsls	r2, r5, #6
    7e98:	4823      	ldr	r0, [pc, #140]	; (7f28 <hci_num_completed_packets+0x104>)
    7e9a:	f042 0201 	orr.w	r2, r2, #1
    7e9e:	4659      	mov	r1, fp
    7ea0:	f017 fffa 	bl	1fe98 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    7ea4:	3601      	adds	r6, #1
    7ea6:	e7c9      	b.n	7e3c <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
    7ea8:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    7eaa:	b12b      	cbz	r3, 7eb8 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7eac:	69a1      	ldr	r1, [r4, #24]
    7eae:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    7eb0:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7eb2:	428b      	cmp	r3, r1
	list->tail = node;
    7eb4:	bf08      	it	eq
    7eb6:	61a0      	streq	r0, [r4, #24]
    7eb8:	f382 8811 	msr	BASEPRI, r2
    7ebc:	f3bf 8f6f 	isb	sy
			if (!node) {
    7ec0:	b94b      	cbnz	r3, 7ed6 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
    7ec2:	01a9      	lsls	r1, r5, #6
    7ec4:	4819      	ldr	r0, [pc, #100]	; (7f2c <hci_num_completed_packets+0x108>)
    7ec6:	f041 0101 	orr.w	r1, r1, #1
    7eca:	f017 ffd8 	bl	1fe7e <log_0>
		bt_conn_unref(conn);
    7ece:	4620      	mov	r0, r4
    7ed0:	f01a f8bc 	bl	2204c <bt_conn_unref>
    7ed4:	e7e6      	b.n	7ea4 <hci_num_completed_packets+0x80>
	__asm__ volatile(
    7ed6:	f04f 0220 	mov.w	r2, #32
    7eda:	f3ef 8111 	mrs	r1, BASEPRI
    7ede:	f382 8811 	msr	BASEPRI, r2
    7ee2:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    7ee6:	68da      	ldr	r2, [r3, #12]
    7ee8:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    7eea:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    7eee:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    7ef0:	f8c3 900c 	str.w	r9, [r3, #12]
    7ef4:	b98a      	cbnz	r2, 7f1a <hci_num_completed_packets+0xf6>
	list->head = node;
    7ef6:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    7efa:	f381 8811 	msr	BASEPRI, r1
    7efe:	f3bf 8f6f 	isb	sy
    7f02:	2100      	movs	r1, #0
    7f04:	f104 0030 	add.w	r0, r4, #48	; 0x30
    7f08:	f019 fde9 	bl	21ade <atomic_test_and_set_bit>
    7f0c:	2800      	cmp	r0, #0
    7f0e:	d1ba      	bne.n	7e86 <hci_num_completed_packets+0x62>
		k_queue_append(&work_q->queue, work);
    7f10:	4659      	mov	r1, fp
    7f12:	4650      	mov	r0, sl
    7f14:	f01c fb4e 	bl	245b4 <k_queue_append>
    7f18:	e7b5      	b.n	7e86 <hci_num_completed_packets+0x62>
	parent->next = child;
    7f1a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    7f1c:	6263      	str	r3, [r4, #36]	; 0x24
}
    7f1e:	e7ec      	b.n	7efa <hci_num_completed_packets+0xd6>
    7f20:	000250c0 	.word	0x000250c0
    7f24:	00024fd8 	.word	0x00024fd8
    7f28:	000277e3 	.word	0x000277e3
    7f2c:	000277ff 	.word	0x000277ff
    7f30:	200010e0 	.word	0x200010e0

00007f34 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    7f34:	b5f0      	push	{r4, r5, r6, r7, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7f36:	4b28      	ldr	r3, [pc, #160]	; (7fd8 <le_adv_start_add_conn+0xa4>)
    7f38:	b085      	sub	sp, #20
    7f3a:	4605      	mov	r5, r0
    7f3c:	460f      	mov	r7, r1
	struct adv_id_check_data check_data = {
		.id = adv->id,
    7f3e:	7801      	ldrb	r1, [r0, #0]
    7f40:	f103 0028 	add.w	r0, r3, #40	; 0x28
    7f44:	f019 fd90 	bl	21a68 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    7f48:	f010 0f40 	tst.w	r0, #64	; 0x40
    7f4c:	461a      	mov	r2, r3
    7f4e:	d008      	beq.n	7f62 <le_adv_start_add_conn+0x2e>
    7f50:	f103 0028 	add.w	r0, r3, #40	; 0x28
    7f54:	f019 fd88 	bl	21a68 <atomic_get>
    7f58:	05c0      	lsls	r0, r0, #23
    7f5a:	d502      	bpl.n	7f62 <le_adv_start_add_conn+0x2e>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    7f5c:	7e1b      	ldrb	r3, [r3, #24]
    7f5e:	428b      	cmp	r3, r1
    7f60:	d131      	bne.n	7fc6 <le_adv_start_add_conn+0x92>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    7f62:	462e      	mov	r6, r5

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    7f64:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
    7f66:	f816 3b09 	ldrb.w	r3, [r6], #9
    7f6a:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    7f6e:	4630      	mov	r0, r6
    7f70:	2300      	movs	r3, #0
    7f72:	9300      	str	r3, [sp, #0]
    7f74:	f8cd 3003 	str.w	r3, [sp, #3]
    7f78:	f019 fd7f 	bl	21a7a <bt_addr_le_cmp>
    7f7c:	4604      	mov	r4, r0
    7f7e:	7828      	ldrb	r0, [r5, #0]
    7f80:	b164      	cbz	r4, 7f9c <le_adv_start_add_conn+0x68>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    7f82:	4631      	mov	r1, r6
    7f84:	f002 fa2e 	bl	a3e4 <bt_conn_exists_le>
    7f88:	4604      	mov	r4, r0
    7f8a:	b9f8      	cbnz	r0, 7fcc <le_adv_start_add_conn+0x98>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    7f8c:	7828      	ldrb	r0, [r5, #0]
    7f8e:	4631      	mov	r1, r6
    7f90:	f002 f8cc 	bl	a12c <bt_conn_add_le>
	if (!conn) {
    7f94:	4605      	mov	r5, r0
    7f96:	b1e0      	cbz	r0, 7fd2 <le_adv_start_add_conn+0x9e>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    7f98:	2105      	movs	r1, #5
    7f9a:	e00e      	b.n	7fba <le_adv_start_add_conn+0x86>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    7f9c:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    7fa0:	9302      	str	r3, [sp, #8]
    7fa2:	a902      	add	r1, sp, #8
    7fa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7fa8:	f8ad 300c 	strh.w	r3, [sp, #12]
    7fac:	f88d 300e 	strb.w	r3, [sp, #14]
    7fb0:	f002 f8bc 	bl	a12c <bt_conn_add_le>
		if (!conn) {
    7fb4:	4605      	mov	r5, r0
    7fb6:	b160      	cbz	r0, 7fd2 <le_adv_start_add_conn+0x9e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    7fb8:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    7fba:	f002 f8f1 	bl	a1a0 <bt_conn_set_state>
	*out_conn = conn;
    7fbe:	603d      	str	r5, [r7, #0]
	return 0;
}
    7fc0:	4620      	mov	r0, r4
    7fc2:	b005      	add	sp, #20
    7fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
    7fc6:	f06f 0422 	mvn.w	r4, #34	; 0x22
    7fca:	e7f9      	b.n	7fc0 <le_adv_start_add_conn+0x8c>
		return -EINVAL;
    7fcc:	f06f 0415 	mvn.w	r4, #21
    7fd0:	e7f6      	b.n	7fc0 <le_adv_start_add_conn+0x8c>
		return -ENOMEM;
    7fd2:	f06f 040b 	mvn.w	r4, #11
    7fd6:	e7f3      	b.n	7fc0 <le_adv_start_add_conn+0x8c>
    7fd8:	20000000 	.word	0x20000000

00007fdc <hci_cmd_status>:
{
    7fdc:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7fde:	2104      	movs	r1, #4
{
    7fe0:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7fe2:	3008      	adds	r0, #8
    7fe4:	f01c f859 	bl	2409a <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    7fe8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    7fea:	7801      	ldrb	r1, [r0, #0]
    7fec:	8840      	ldrh	r0, [r0, #2]
    7fee:	4622      	mov	r2, r4
    7ff0:	f7ff fd5e 	bl	7ab0 <hci_cmd_done>
	if (ncmd) {
    7ff4:	b125      	cbz	r5, 8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
    7ff6:	4803      	ldr	r0, [pc, #12]	; (8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>)
}
    7ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7ffc:	f016 bec6 	b.w	1ed8c <z_impl_k_sem_give>
    8000:	bd38      	pop	{r3, r4, r5, pc}
    8002:	bf00      	nop
    8004:	200000e8 	.word	0x200000e8

00008008 <hci_cmd_complete>:
{
    8008:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    800a:	2103      	movs	r1, #3
{
    800c:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    800e:	3008      	adds	r0, #8
    8010:	f01c f843 	bl	2409a <net_buf_simple_pull_mem>
	status = buf->data[0];
    8014:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    8016:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    8018:	7819      	ldrb	r1, [r3, #0]
    801a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    801e:	4622      	mov	r2, r4
    8020:	f7ff fd46 	bl	7ab0 <hci_cmd_done>
	if (ncmd) {
    8024:	b125      	cbz	r5, 8030 <hci_cmd_complete+0x28>
    8026:	4803      	ldr	r0, [pc, #12]	; (8034 <hci_cmd_complete+0x2c>)
}
    8028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    802c:	f016 beae 	b.w	1ed8c <z_impl_k_sem_give>
    8030:	bd38      	pop	{r3, r4, r5, pc}
    8032:	bf00      	nop
    8034:	200000e8 	.word	0x200000e8

00008038 <bt_hci_cmd_create>:
{
    8038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    803c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
    8044:	4605      	mov	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    8046:	4816      	ldr	r0, [pc, #88]	; (80a0 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
    8048:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80a4 <bt_hci_cmd_create+0x6c>
{
    804c:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    804e:	f01b ff97 	bl	23f80 <net_buf_alloc_fixed>
    8052:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
    8054:	f100 0b08 	add.w	fp, r0, #8
    8058:	2100      	movs	r1, #0
    805a:	2700      	movs	r7, #0
    805c:	4658      	mov	r0, fp
    805e:	f01b ffb4 	bl	23fca <net_buf_simple_reserve>
    8062:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    8064:	4620      	mov	r0, r4
    8066:	f014 ffa5 	bl	1cfb4 <net_buf_id>
    806a:	f04f 0a0c 	mov.w	sl, #12
    806e:	fb0a 8000 	mla	r0, sl, r0, r8
    8072:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    8074:	4620      	mov	r0, r4
    8076:	f014 ff9d 	bl	1cfb4 <net_buf_id>
    807a:	fb0a 8000 	mla	r0, sl, r0, r8
    807e:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    8080:	4620      	mov	r0, r4
    8082:	f014 ff97 	bl	1cfb4 <net_buf_id>
    8086:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
    808a:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    808c:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    808e:	4658      	mov	r0, fp
    8090:	f01b ffd2 	bl	24038 <net_buf_simple_add>
	hdr->param_len = param_len;
    8094:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    8096:	8005      	strh	r5, [r0, #0]
}
    8098:	4620      	mov	r0, r4
    809a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    809e:	bf00      	nop
    80a0:	2000085c 	.word	0x2000085c
    80a4:	20001354 	.word	0x20001354

000080a8 <bt_hci_cmd_send>:
{
    80a8:	b538      	push	{r3, r4, r5, lr}
    80aa:	4605      	mov	r5, r0
	if (!buf) {
    80ac:	460c      	mov	r4, r1
    80ae:	b919      	cbnz	r1, 80b8 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    80b0:	f7ff ffc2 	bl	8038 <bt_hci_cmd_create>
		if (!buf) {
    80b4:	4604      	mov	r4, r0
    80b6:	b1f0      	cbz	r0, 80f6 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    80b8:	f640 4335 	movw	r3, #3125	; 0xc35
    80bc:	429d      	cmp	r5, r3
    80be:	d114      	bne.n	80ea <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
    80c0:	4620      	mov	r0, r4
    80c2:	f7ff f949 	bl	7358 <bt_hci_ecc_send>
		if (err) {
    80c6:	4605      	mov	r5, r0
    80c8:	b168      	cbz	r0, 80e6 <bt_hci_cmd_send+0x3e>
    80ca:	4b0c      	ldr	r3, [pc, #48]	; (80fc <bt_hci_cmd_send+0x54>)
    80cc:	4a0c      	ldr	r2, [pc, #48]	; (8100 <bt_hci_cmd_send+0x58>)
    80ce:	1ad2      	subs	r2, r2, r3
    80d0:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    80d2:	0192      	lsls	r2, r2, #6
    80d4:	4601      	mov	r1, r0
    80d6:	f042 0201 	orr.w	r2, r2, #1
    80da:	480a      	ldr	r0, [pc, #40]	; (8104 <bt_hci_cmd_send+0x5c>)
    80dc:	f017 fedc 	bl	1fe98 <log_1>
			net_buf_unref(buf);
    80e0:	4620      	mov	r0, r4
    80e2:	f015 f81b 	bl	1d11c <net_buf_unref>
}
    80e6:	4628      	mov	r0, r5
    80e8:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    80ea:	4807      	ldr	r0, [pc, #28]	; (8108 <bt_hci_cmd_send+0x60>)
    80ec:	4621      	mov	r1, r4
    80ee:	f01b ff70 	bl	23fd2 <net_buf_put>
	return 0;
    80f2:	2500      	movs	r5, #0
    80f4:	e7f7      	b.n	80e6 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    80f6:	f06f 0536 	mvn.w	r5, #54	; 0x36
    80fa:	e7f4      	b.n	80e6 <bt_hci_cmd_send+0x3e>
    80fc:	00024fd8 	.word	0x00024fd8
    8100:	000250c0 	.word	0x000250c0
    8104:	000277a0 	.word	0x000277a0
    8108:	20000104 	.word	0x20000104

0000810c <le_ltk_request>:
{
    810c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    810e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8110:	882e      	ldrh	r6, [r5, #0]
    8112:	b2b7      	uxth	r7, r6
{
    8114:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
    8116:	4638      	mov	r0, r7
    8118:	f002 f836 	bl	a188 <bt_conn_lookup_handle>
	if (!conn) {
    811c:	4604      	mov	r4, r0
    811e:	b960      	cbnz	r0, 813a <le_ltk_request+0x2e>
    8120:	4a26      	ldr	r2, [pc, #152]	; (81bc <le_ltk_request+0xb0>)
    8122:	4b27      	ldr	r3, [pc, #156]	; (81c0 <le_ltk_request+0xb4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8124:	4827      	ldr	r0, [pc, #156]	; (81c4 <le_ltk_request+0xb8>)
    8126:	1ad2      	subs	r2, r2, r3
    8128:	08d2      	lsrs	r2, r2, #3
    812a:	0192      	lsls	r2, r2, #6
    812c:	f042 0201 	orr.w	r2, r2, #1
    8130:	4639      	mov	r1, r7
    8132:	f017 feb1 	bl	1fe98 <log_1>
}
    8136:	b007      	add	sp, #28
    8138:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    813a:	af02      	add	r7, sp, #8
    813c:	f8d5 2002 	ldr.w	r2, [r5, #2]
    8140:	f8d5 3006 	ldr.w	r3, [r5, #6]
    8144:	9701      	str	r7, [sp, #4]
    8146:	8969      	ldrh	r1, [r5, #10]
    8148:	9100      	str	r1, [sp, #0]
    814a:	f01b fd99 	bl	23c80 <bt_smp_request_ltk>
    814e:	b320      	cbz	r0, 819a <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    8150:	2112      	movs	r1, #18
    8152:	f242 001a 	movw	r0, #8218	; 0x201a
    8156:	f7ff ff6f 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
    815a:	4605      	mov	r5, r0
    815c:	b968      	cbnz	r0, 817a <le_ltk_request+0x6e>
    815e:	4917      	ldr	r1, [pc, #92]	; (81bc <le_ltk_request+0xb0>)
    8160:	4b17      	ldr	r3, [pc, #92]	; (81c0 <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
    8162:	4819      	ldr	r0, [pc, #100]	; (81c8 <le_ltk_request+0xbc>)
    8164:	1ac9      	subs	r1, r1, r3
    8166:	08c9      	lsrs	r1, r1, #3
    8168:	0189      	lsls	r1, r1, #6
    816a:	f041 0101 	orr.w	r1, r1, #1
    816e:	f017 fe86 	bl	1fe7e <log_0>
	bt_conn_unref(conn);
    8172:	4620      	mov	r0, r4
    8174:	f019 ff6a 	bl	2204c <bt_conn_unref>
    8178:	e7dd      	b.n	8136 <le_ltk_request+0x2a>
	cp = net_buf_add(buf, sizeof(*cp));
    817a:	2112      	movs	r1, #18
    817c:	3008      	adds	r0, #8
    817e:	f01b ff5b 	bl	24038 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    8182:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
    8184:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    8188:	2210      	movs	r2, #16
    818a:	f019 fb2c 	bl	217e6 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    818e:	4629      	mov	r1, r5
    8190:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    8194:	f7ff ff88 	bl	80a8 <bt_hci_cmd_send>
    8198:	e7eb      	b.n	8172 <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    819a:	2102      	movs	r1, #2
    819c:	f242 001b 	movw	r0, #8219	; 0x201b
    81a0:	f7ff ff4a 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
    81a4:	4605      	mov	r5, r0
    81a6:	2800      	cmp	r0, #0
    81a8:	d0d9      	beq.n	815e <le_ltk_request+0x52>
	cp = net_buf_add(buf, sizeof(*cp));
    81aa:	2102      	movs	r1, #2
    81ac:	3008      	adds	r0, #8
    81ae:	f01b ff43 	bl	24038 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    81b2:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    81b4:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    81b6:	f242 001b 	movw	r0, #8219	; 0x201b
    81ba:	e7eb      	b.n	8194 <le_ltk_request+0x88>
    81bc:	000250c0 	.word	0x000250c0
    81c0:	00024fd8 	.word	0x00024fd8
    81c4:	000275eb 	.word	0x000275eb
    81c8:	00027816 	.word	0x00027816

000081cc <le_conn_param_neg_reply>:
{
    81cc:	b570      	push	{r4, r5, r6, lr}
    81ce:	4606      	mov	r6, r0
    81d0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    81d2:	f242 0021 	movw	r0, #8225	; 0x2021
    81d6:	2103      	movs	r1, #3
    81d8:	f7ff ff2e 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
    81dc:	4604      	mov	r4, r0
    81de:	b958      	cbnz	r0, 81f8 <le_conn_param_neg_reply+0x2c>
    81e0:	490c      	ldr	r1, [pc, #48]	; (8214 <le_conn_param_neg_reply+0x48>)
    81e2:	4b0d      	ldr	r3, [pc, #52]	; (8218 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    81e4:	480d      	ldr	r0, [pc, #52]	; (821c <le_conn_param_neg_reply+0x50>)
    81e6:	1ac9      	subs	r1, r1, r3
    81e8:	08c9      	lsrs	r1, r1, #3
    81ea:	0189      	lsls	r1, r1, #6
}
    81ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    81f0:	f041 0101 	orr.w	r1, r1, #1
    81f4:	f017 be43 	b.w	1fe7e <log_0>
	cp = net_buf_add(buf, sizeof(*cp));
    81f8:	2103      	movs	r1, #3
    81fa:	3008      	adds	r0, #8
    81fc:	f01b ff1c 	bl	24038 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    8200:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    8202:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    8204:	4621      	mov	r1, r4
    8206:	f242 0021 	movw	r0, #8225	; 0x2021
}
    820a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    820e:	f7ff bf4b 	b.w	80a8 <bt_hci_cmd_send>
    8212:	bf00      	nop
    8214:	000250c0 	.word	0x000250c0
    8218:	00024fd8 	.word	0x00024fd8
    821c:	0002782d 	.word	0x0002782d

00008220 <le_conn_param_req>:
{
    8220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    8222:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    8224:	78d9      	ldrb	r1, [r3, #3]
    8226:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    8228:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    822a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    822e:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    8232:	7959      	ldrb	r1, [r3, #5]
    8234:	791a      	ldrb	r2, [r3, #4]
    8236:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    823a:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    823e:	799a      	ldrb	r2, [r3, #6]
    8240:	79d9      	ldrb	r1, [r3, #7]
    8242:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8246:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    824a:	7a1a      	ldrb	r2, [r3, #8]
    824c:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    824e:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    8250:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    8254:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    8256:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    825a:	f001 ff95 	bl	a188 <bt_conn_lookup_handle>
	if (!conn) {
    825e:	4606      	mov	r6, r0
    8260:	b980      	cbnz	r0, 8284 <le_conn_param_req+0x64>
    8262:	4b20      	ldr	r3, [pc, #128]	; (82e4 <le_conn_param_req+0xc4>)
    8264:	4a20      	ldr	r2, [pc, #128]	; (82e8 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8266:	4821      	ldr	r0, [pc, #132]	; (82ec <le_conn_param_req+0xcc>)
    8268:	1ad2      	subs	r2, r2, r3
    826a:	08d2      	lsrs	r2, r2, #3
    826c:	0192      	lsls	r2, r2, #6
    826e:	4621      	mov	r1, r4
    8270:	f042 0201 	orr.w	r2, r2, #1
    8274:	f017 fe10 	bl	1fe98 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    8278:	2102      	movs	r1, #2
    827a:	4620      	mov	r0, r4
    827c:	f7ff ffa6 	bl	81cc <le_conn_param_neg_reply>
}
    8280:	b003      	add	sp, #12
    8282:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    8284:	4669      	mov	r1, sp
    8286:	f001 fda3 	bl	9dd0 <le_param_req>
    828a:	b938      	cbnz	r0, 829c <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    828c:	211e      	movs	r1, #30
    828e:	4620      	mov	r0, r4
    8290:	f7ff ff9c 	bl	81cc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    8294:	4630      	mov	r0, r6
    8296:	f019 fed9 	bl	2204c <bt_conn_unref>
    829a:	e7f1      	b.n	8280 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    829c:	210e      	movs	r1, #14
    829e:	f242 0020 	movw	r0, #8224	; 0x2020
    82a2:	f7ff fec9 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
    82a6:	4605      	mov	r5, r0
    82a8:	2800      	cmp	r0, #0
    82aa:	d0f3      	beq.n	8294 <le_conn_param_req+0x74>
	cp = net_buf_add(buf, sizeof(*cp));
    82ac:	210e      	movs	r1, #14
    82ae:	3008      	adds	r0, #8
    82b0:	f01b fec2 	bl	24038 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    82b4:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    82b6:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    82b8:	2100      	movs	r1, #0
    82ba:	f019 fabf 	bl	2183c <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    82be:	f8bd 3000 	ldrh.w	r3, [sp]
    82c2:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    82c4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    82c8:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    82ca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    82ce:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    82d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    82d4:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    82d6:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    82d8:	4629      	mov	r1, r5
    82da:	f242 0020 	movw	r0, #8224	; 0x2020
    82de:	f7ff fee3 	bl	80a8 <bt_hci_cmd_send>
    82e2:	e7d7      	b.n	8294 <le_conn_param_req+0x74>
    82e4:	00024fd8 	.word	0x00024fd8
    82e8:	000250c0 	.word	0x000250c0
    82ec:	000275eb 	.word	0x000275eb

000082f0 <bt_hci_cmd_send_sync>:
{
    82f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82f4:	4607      	mov	r7, r0
    82f6:	b086      	sub	sp, #24
    82f8:	4615      	mov	r5, r2
	if (!buf) {
    82fa:	460c      	mov	r4, r1
    82fc:	b921      	cbnz	r1, 8308 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    82fe:	f7ff fe9b 	bl	8038 <bt_hci_cmd_create>
		if (!buf) {
    8302:	4604      	mov	r4, r0
    8304:	2800      	cmp	r0, #0
    8306:	d055      	beq.n	83b4 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    8308:	2201      	movs	r2, #1
    830a:	2100      	movs	r1, #0
    830c:	4668      	mov	r0, sp
    830e:	f01c fa9d 	bl	2484c <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    8312:	4620      	mov	r0, r4
    8314:	f014 fe4e 	bl	1cfb4 <net_buf_id>
    8318:	4e28      	ldr	r6, [pc, #160]	; (83bc <bt_hci_cmd_send_sync+0xcc>)
    831a:	230c      	movs	r3, #12
    831c:	fb03 6000 	mla	r0, r3, r0, r6
    8320:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    8324:	4620      	mov	r0, r4
    8326:	f01b fe61 	bl	23fec <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    832a:	4825      	ldr	r0, [pc, #148]	; (83c0 <bt_hci_cmd_send_sync+0xd0>)
    832c:	4621      	mov	r1, r4
    832e:	f01b fe50 	bl	23fd2 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    8332:	f242 7210 	movw	r2, #10000	; 0x2710
    8336:	2300      	movs	r3, #0
    8338:	4668      	mov	r0, sp
    833a:	f016 fd4d 	bl	1edd8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    833e:	4680      	mov	r8, r0
    8340:	b180      	cbz	r0, 8364 <bt_hci_cmd_send_sync+0x74>
    8342:	4a20      	ldr	r2, [pc, #128]	; (83c4 <bt_hci_cmd_send_sync+0xd4>)
    8344:	4920      	ldr	r1, [pc, #128]	; (83c8 <bt_hci_cmd_send_sync+0xd8>)
    8346:	4821      	ldr	r0, [pc, #132]	; (83cc <bt_hci_cmd_send_sync+0xdc>)
    8348:	f240 1351 	movw	r3, #337	; 0x151
    834c:	f017 f9d3 	bl	1f6f6 <printk>
    8350:	481f      	ldr	r0, [pc, #124]	; (83d0 <bt_hci_cmd_send_sync+0xe0>)
    8352:	4641      	mov	r1, r8
    8354:	f017 f9cf 	bl	1f6f6 <printk>
    8358:	4040      	eors	r0, r0
    835a:	f380 8811 	msr	BASEPRI, r0
    835e:	f04f 0003 	mov.w	r0, #3
    8362:	df02      	svc	2
	status = cmd(buf)->status;
    8364:	4620      	mov	r0, r4
    8366:	f014 fe25 	bl	1cfb4 <net_buf_id>
    836a:	230c      	movs	r3, #12
    836c:	4343      	muls	r3, r0
    836e:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    8370:	b1be      	cbz	r6, 83a2 <bt_hci_cmd_send_sync+0xb2>
    8372:	4a18      	ldr	r2, [pc, #96]	; (83d4 <bt_hci_cmd_send_sync+0xe4>)
    8374:	4b18      	ldr	r3, [pc, #96]	; (83d8 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    8376:	4819      	ldr	r0, [pc, #100]	; (83dc <bt_hci_cmd_send_sync+0xec>)
    8378:	1a9b      	subs	r3, r3, r2
    837a:	08db      	lsrs	r3, r3, #3
    837c:	019b      	lsls	r3, r3, #6
    837e:	f043 0302 	orr.w	r3, r3, #2
    8382:	4632      	mov	r2, r6
    8384:	4639      	mov	r1, r7
    8386:	f017 fd9b 	bl	1fec0 <log_2>
		net_buf_unref(buf);
    838a:	4620      	mov	r0, r4
    838c:	f014 fec6 	bl	1d11c <net_buf_unref>
			return -EIO;
    8390:	2e09      	cmp	r6, #9
    8392:	bf0c      	ite	eq
    8394:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    8398:	f06f 0004 	mvnne.w	r0, #4
}
    839c:	b006      	add	sp, #24
    839e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    83a2:	b115      	cbz	r5, 83aa <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
    83a4:	602c      	str	r4, [r5, #0]
	return 0;
    83a6:	4630      	mov	r0, r6
    83a8:	e7f8      	b.n	839c <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
    83aa:	4620      	mov	r0, r4
    83ac:	f014 feb6 	bl	1d11c <net_buf_unref>
	return 0;
    83b0:	4628      	mov	r0, r5
    83b2:	e7f3      	b.n	839c <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
    83b4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    83b8:	e7f0      	b.n	839c <bt_hci_cmd_send_sync+0xac>
    83ba:	bf00      	nop
    83bc:	20001354 	.word	0x20001354
    83c0:	20000104 	.word	0x20000104
    83c4:	0002772b 	.word	0x0002772b
    83c8:	0002775f 	.word	0x0002775f
    83cc:	00027768 	.word	0x00027768
    83d0:	00027847 	.word	0x00027847
    83d4:	00024fd8 	.word	0x00024fd8
    83d8:	000250c0 	.word	0x000250c0
    83dc:	00027867 	.word	0x00027867

000083e0 <hci_le_read_max_data_len>:
{
    83e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    83e2:	4606      	mov	r6, r0
    83e4:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    83e6:	aa01      	add	r2, sp, #4
    83e8:	2100      	movs	r1, #0
    83ea:	f242 002f 	movw	r0, #8239	; 0x202f
    83ee:	f7ff ff7f 	bl	82f0 <bt_hci_cmd_send_sync>
	if (err) {
    83f2:	4604      	mov	r4, r0
    83f4:	b160      	cbz	r0, 8410 <hci_le_read_max_data_len+0x30>
    83f6:	490c      	ldr	r1, [pc, #48]	; (8428 <hci_le_read_max_data_len+0x48>)
    83f8:	4b0c      	ldr	r3, [pc, #48]	; (842c <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    83fa:	480d      	ldr	r0, [pc, #52]	; (8430 <hci_le_read_max_data_len+0x50>)
    83fc:	1ac9      	subs	r1, r1, r3
    83fe:	08c9      	lsrs	r1, r1, #3
    8400:	0189      	lsls	r1, r1, #6
    8402:	f041 0101 	orr.w	r1, r1, #1
    8406:	f017 fd3a 	bl	1fe7e <log_0>
}
    840a:	4620      	mov	r0, r4
    840c:	b002      	add	sp, #8
    840e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    8410:	9801      	ldr	r0, [sp, #4]
    8412:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    8414:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    8418:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    841a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    841e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    8420:	f014 fe7c 	bl	1d11c <net_buf_unref>
	return 0;
    8424:	e7f1      	b.n	840a <hci_le_read_max_data_len+0x2a>
    8426:	bf00      	nop
    8428:	000250c0 	.word	0x000250c0
    842c:	00024fd8 	.word	0x00024fd8
    8430:	00027883 	.word	0x00027883

00008434 <set_random_address>:
{
    8434:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    8436:	4e15      	ldr	r6, [pc, #84]	; (848c <set_random_address+0x58>)
    8438:	2206      	movs	r2, #6
    843a:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    843e:	4605      	mov	r5, r0
    8440:	f019 f9c1 	bl	217c6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    8444:	4604      	mov	r4, r0
    8446:	b1e0      	cbz	r0, 8482 <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    8448:	2106      	movs	r1, #6
    844a:	f242 0005 	movw	r0, #8197	; 0x2005
    844e:	f7ff fdf3 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
    8452:	4604      	mov	r4, r0
    8454:	b1b8      	cbz	r0, 8486 <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    8456:	2206      	movs	r2, #6
    8458:	4629      	mov	r1, r5
    845a:	3008      	adds	r0, #8
    845c:	f01b fdf2 	bl	24044 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    8460:	4621      	mov	r1, r4
    8462:	2200      	movs	r2, #0
    8464:	f242 0005 	movw	r0, #8197	; 0x2005
    8468:	f7ff ff42 	bl	82f0 <bt_hci_cmd_send_sync>
	if (err) {
    846c:	4604      	mov	r4, r0
    846e:	b940      	cbnz	r0, 8482 <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    8470:	2206      	movs	r2, #6
    8472:	4629      	mov	r1, r5
    8474:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    8478:	f019 f9b5 	bl	217e6 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    847c:	2301      	movs	r3, #1
    847e:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    8482:	4620      	mov	r0, r4
    8484:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    8486:	f06f 0436 	mvn.w	r4, #54	; 0x36
    848a:	e7fa      	b.n	8482 <set_random_address+0x4e>
    848c:	20000000 	.word	0x20000000

00008490 <le_create_conn_set_random_addr.isra.0>:
static int le_create_conn_set_random_addr(bool use_filter, uint8_t *own_addr_type)
    8490:	b538      	push	{r3, r4, r5, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    8492:	4c07      	ldr	r4, [pc, #28]	; (84b0 <le_create_conn_set_random_addr.isra.0+0x20>)
    8494:	7823      	ldrb	r3, [r4, #0]
    8496:	2b01      	cmp	r3, #1
static int le_create_conn_set_random_addr(bool use_filter, uint8_t *own_addr_type)
    8498:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    849a:	d003      	beq.n	84a4 <le_create_conn_set_random_addr.isra.0+0x14>
		*own_addr_type = addr->type;
    849c:	7823      	ldrb	r3, [r4, #0]
    849e:	702b      	strb	r3, [r5, #0]
	return 0;
    84a0:	2000      	movs	r0, #0
}
    84a2:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
    84a4:	1c60      	adds	r0, r4, #1
    84a6:	f7ff ffc5 	bl	8434 <set_random_address>
			if (err) {
    84aa:	2800      	cmp	r0, #0
    84ac:	d0f6      	beq.n	849c <le_create_conn_set_random_addr.isra.0+0xc>
    84ae:	e7f8      	b.n	84a2 <le_create_conn_set_random_addr.isra.0+0x12>
    84b0:	20000000 	.word	0x20000000

000084b4 <set_le_adv_enable_legacy>:
{
    84b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    84b6:	4606      	mov	r6, r0
    84b8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    84ba:	f242 000a 	movw	r0, #8202	; 0x200a
    84be:	2101      	movs	r1, #1
    84c0:	f7ff fdba 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
    84c4:	4604      	mov	r4, r0
    84c6:	b1e8      	cbz	r0, 8504 <set_le_adv_enable_legacy+0x50>
	if (enable) {
    84c8:	3008      	adds	r0, #8
    84ca:	b1cd      	cbz	r5, 8500 <set_le_adv_enable_legacy+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    84cc:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    84ce:	f01b fdc2 	bl	24056 <net_buf_simple_add_u8>
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    84d2:	3610      	adds	r6, #16
	state->bit = bit;
    84d4:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    84d6:	4620      	mov	r0, r4
	state->bit = bit;
    84d8:	9302      	str	r3, [sp, #8]
	state->target = target;
    84da:	9601      	str	r6, [sp, #4]
	state->val = val;
    84dc:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    84e0:	f014 fd68 	bl	1cfb4 <net_buf_id>
    84e4:	4b09      	ldr	r3, [pc, #36]	; (850c <set_le_adv_enable_legacy+0x58>)
    84e6:	220c      	movs	r2, #12
    84e8:	fb02 3000 	mla	r0, r2, r0, r3
    84ec:	ab01      	add	r3, sp, #4
    84ee:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    84f0:	2200      	movs	r2, #0
    84f2:	4621      	mov	r1, r4
    84f4:	f242 000a 	movw	r0, #8202	; 0x200a
    84f8:	f7ff fefa 	bl	82f0 <bt_hci_cmd_send_sync>
}
    84fc:	b004      	add	sp, #16
    84fe:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    8500:	4629      	mov	r1, r5
    8502:	e7e4      	b.n	84ce <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    8504:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8508:	e7f8      	b.n	84fc <set_le_adv_enable_legacy+0x48>
    850a:	bf00      	nop
    850c:	20001354 	.word	0x20001354

00008510 <set_le_scan_enable_legacy>:
{
    8510:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    8512:	2102      	movs	r1, #2
{
    8514:	b085      	sub	sp, #20
    8516:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    8518:	f242 000c 	movw	r0, #8204	; 0x200c
    851c:	f7ff fd8c 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
    8520:	4605      	mov	r5, r0
    8522:	b348      	cbz	r0, 8578 <set_le_scan_enable_legacy+0x68>
	cp = net_buf_add(buf, sizeof(*cp));
    8524:	2102      	movs	r1, #2
    8526:	3008      	adds	r0, #8
    8528:	f01b fd86 	bl	24038 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    852c:	2c01      	cmp	r4, #1
	cp = net_buf_add(buf, sizeof(*cp));
    852e:	4603      	mov	r3, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    8530:	d11f      	bne.n	8572 <set_le_scan_enable_legacy+0x62>
    8532:	4813      	ldr	r0, [pc, #76]	; (8580 <set_le_scan_enable_legacy+0x70>)
    8534:	f019 fa98 	bl	21a68 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    8538:	f3c0 2000 	ubfx	r0, r0, #8, #1
    853c:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    853e:	701c      	strb	r4, [r3, #0]
	state->target = target;
    8540:	4b0f      	ldr	r3, [pc, #60]	; (8580 <set_le_scan_enable_legacy+0x70>)
    8542:	9301      	str	r3, [sp, #4]
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    8544:	f004 0401 	and.w	r4, r4, #1
	state->bit = bit;
    8548:	2305      	movs	r3, #5
	cmd(buf)->state = &state;
    854a:	4628      	mov	r0, r5
	state->bit = bit;
    854c:	9302      	str	r3, [sp, #8]
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    854e:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    8552:	f014 fd2f 	bl	1cfb4 <net_buf_id>
    8556:	4b0b      	ldr	r3, [pc, #44]	; (8584 <set_le_scan_enable_legacy+0x74>)
    8558:	220c      	movs	r2, #12
    855a:	fb02 3000 	mla	r0, r2, r0, r3
    855e:	ab01      	add	r3, sp, #4
    8560:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    8562:	2200      	movs	r2, #0
    8564:	4629      	mov	r1, r5
    8566:	f242 000c 	movw	r0, #8204	; 0x200c
    856a:	f7ff fec1 	bl	82f0 <bt_hci_cmd_send_sync>
}
    856e:	b005      	add	sp, #20
    8570:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    8572:	2200      	movs	r2, #0
    8574:	7042      	strb	r2, [r0, #1]
    8576:	e7e2      	b.n	853e <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    8578:	f06f 0036 	mvn.w	r0, #54	; 0x36
    857c:	e7f7      	b.n	856e <set_le_scan_enable_legacy+0x5e>
    857e:	bf00      	nop
    8580:	20000094 	.word	0x20000094
    8584:	20001354 	.word	0x20001354

00008588 <start_le_scan_legacy>:
{
    8588:	b573      	push	{r0, r1, r4, r5, r6, lr}
    858a:	460e      	mov	r6, r1
    858c:	4605      	mov	r5, r0
	(void)memset(&set_param, 0, sizeof(set_param));
    858e:	2100      	movs	r1, #0
{
    8590:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    8592:	4668      	mov	r0, sp
    8594:	2207      	movs	r2, #7
    8596:	f019 f951 	bl	2183c <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    859a:	f8ad 6001 	strh.w	r6, [sp, #1]
		*own_addr_type = bt_dev.id_addr[0].type;
    859e:	4e28      	ldr	r6, [pc, #160]	; (8640 <start_le_scan_legacy+0xb8>)
	set_param.scan_type = scan_type;
    85a0:	f88d 5000 	strb.w	r5, [sp]
		*own_addr_type = bt_dev.id_addr[0].type;
    85a4:	4630      	mov	r0, r6
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    85a6:	2300      	movs	r3, #0
    85a8:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    85ac:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.window = sys_cpu_to_le16(window);
    85b0:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    85b4:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    85b8:	f019 fa56 	bl	21a68 <atomic_get>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    85bc:	0641      	lsls	r1, r0, #25
    85be:	d419      	bmi.n	85f4 <start_le_scan_legacy+0x6c>
			err = le_set_private_addr(BT_ID_DEFAULT);
    85c0:	f019 faa8 	bl	21b14 <le_adv_set_private_addr.isra.0>
			if (err) {
    85c4:	4604      	mov	r4, r0
    85c6:	b190      	cbz	r0, 85ee <start_le_scan_legacy+0x66>
				if (active_scan || !is_adv_using_rand_addr()) {
    85c8:	2d01      	cmp	r5, #1
    85ca:	d033      	beq.n	8634 <start_le_scan_legacy+0xac>
    85cc:	f106 0028 	add.w	r0, r6, #40	; 0x28
    85d0:	f019 fa4a 	bl	21a68 <atomic_get>
    85d4:	0642      	lsls	r2, r0, #25
    85d6:	d52d      	bpl.n	8634 <start_le_scan_legacy+0xac>
    85d8:	4a1a      	ldr	r2, [pc, #104]	; (8644 <start_le_scan_legacy+0xbc>)
    85da:	4b1b      	ldr	r3, [pc, #108]	; (8648 <start_le_scan_legacy+0xc0>)
					BT_WARN("Ignoring failure to set "
    85dc:	481b      	ldr	r0, [pc, #108]	; (864c <start_le_scan_legacy+0xc4>)
    85de:	1ad2      	subs	r2, r2, r3
    85e0:	08d2      	lsrs	r2, r2, #3
    85e2:	0192      	lsls	r2, r2, #6
    85e4:	f042 0202 	orr.w	r2, r2, #2
    85e8:	4621      	mov	r1, r4
    85ea:	f017 fc55 	bl	1fe98 <log_1>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    85ee:	2301      	movs	r3, #1
    85f0:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    85f4:	2107      	movs	r1, #7
    85f6:	f242 000b 	movw	r0, #8203	; 0x200b
    85fa:	f7ff fd1d 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
    85fe:	4604      	mov	r4, r0
    8600:	b1d8      	cbz	r0, 863a <start_le_scan_legacy+0xb2>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    8602:	2207      	movs	r2, #7
    8604:	4669      	mov	r1, sp
    8606:	3008      	adds	r0, #8
    8608:	f01b fd1c 	bl	24044 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    860c:	4621      	mov	r1, r4
    860e:	2200      	movs	r2, #0
    8610:	f242 000b 	movw	r0, #8203	; 0x200b
    8614:	f7ff fe6c 	bl	82f0 <bt_hci_cmd_send_sync>
	if (err) {
    8618:	4604      	mov	r4, r0
    861a:	b958      	cbnz	r0, 8634 <start_le_scan_legacy+0xac>
	return set_le_scan_enable_legacy(enable);
    861c:	2001      	movs	r0, #1
    861e:	f7ff ff77 	bl	8510 <set_le_scan_enable_legacy>
	if (err) {
    8622:	4604      	mov	r4, r0
    8624:	b930      	cbnz	r0, 8634 <start_le_scan_legacy+0xac>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    8626:	1e6b      	subs	r3, r5, #1
    8628:	425a      	negs	r2, r3
    862a:	4809      	ldr	r0, [pc, #36]	; (8650 <start_le_scan_legacy+0xc8>)
    862c:	415a      	adcs	r2, r3
    862e:	2107      	movs	r1, #7
    8630:	f019 fa44 	bl	21abc <atomic_set_bit_to>
}
    8634:	4620      	mov	r0, r4
    8636:	b002      	add	sp, #8
    8638:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    863a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    863e:	e7f9      	b.n	8634 <start_le_scan_legacy+0xac>
    8640:	20000000 	.word	0x20000000
    8644:	000250c0 	.word	0x000250c0
    8648:	00024fd8 	.word	0x00024fd8
    864c:	000278aa 	.word	0x000278aa
    8650:	20000094 	.word	0x20000094

00008654 <bt_le_scan_random_addr_check>:
{
    8654:	b508      	push	{r3, lr}
    8656:	4802      	ldr	r0, [pc, #8]	; (8660 <bt_le_scan_random_addr_check+0xc>)
    8658:	f019 fa06 	bl	21a68 <atomic_get>
}
    865c:	2001      	movs	r0, #1
    865e:	bd08      	pop	{r3, pc}
    8660:	20000028 	.word	0x20000028

00008664 <bt_le_create_conn_legacy>:
{
    8664:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8668:	4606      	mov	r6, r0
	err = le_create_conn_set_random_addr(use_filter, &own_addr_type);
    866a:	f10d 0003 	add.w	r0, sp, #3
    866e:	f7ff ff0f 	bl	8490 <le_create_conn_set_random_addr.isra.0>
	if (err) {
    8672:	4605      	mov	r5, r0
    8674:	2800      	cmp	r0, #0
    8676:	d150      	bne.n	871a <bt_le_create_conn_legacy+0xb6>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    8678:	2119      	movs	r1, #25
    867a:	f242 000d 	movw	r0, #8205	; 0x200d
    867e:	f7ff fcdb 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
    8682:	4607      	mov	r7, r0
    8684:	2800      	cmp	r0, #0
    8686:	d04f      	beq.n	8728 <bt_le_create_conn_legacy+0xc4>
	cp = net_buf_add(buf, sizeof(*cp));
    8688:	2119      	movs	r1, #25
    868a:	3008      	adds	r0, #8
    868c:	f01b fcd4 	bl	24038 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    8690:	4629      	mov	r1, r5
	cp = net_buf_add(buf, sizeof(*cp));
    8692:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    8694:	2219      	movs	r2, #25
    8696:	f019 f8d1 	bl	2183c <memset>
		if (!bt_dev.le.rl_size ||
    869a:	4d25      	ldr	r5, [pc, #148]	; (8730 <bt_le_create_conn_legacy+0xcc>)
	cp->own_addr_type = own_addr_type;
    869c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    86a0:	7323      	strb	r3, [r4, #12]
		if (!bt_dev.le.rl_size ||
    86a2:	f895 30e0 	ldrb.w	r3, [r5, #224]	; 0xe0
    86a6:	2b00      	cmp	r3, #0
    86a8:	d03b      	beq.n	8722 <bt_le_create_conn_legacy+0xbe>
    86aa:	f895 20e1 	ldrb.w	r2, [r5, #225]	; 0xe1
    86ae:	429a      	cmp	r2, r3
    86b0:	d837      	bhi.n	8722 <bt_le_create_conn_legacy+0xbe>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
    86b2:	f106 0188 	add.w	r1, r6, #136	; 0x88
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    86b6:	1d60      	adds	r0, r4, #5
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    86b8:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    86bc:	f019 f9da 	bl	21a74 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    86c0:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    86c4:	89ab      	ldrh	r3, [r5, #12]
    86c6:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    86c8:	89eb      	ldrh	r3, [r5, #14]
    86ca:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    86cc:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
    86d0:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    86d4:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
    86d8:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    86dc:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
    86e0:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    86e4:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
    86e8:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    86ec:	4b11      	ldr	r3, [pc, #68]	; (8734 <bt_le_create_conn_legacy+0xd0>)
    86ee:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    86f0:	230b      	movs	r3, #11
    86f2:	9302      	str	r3, [sp, #8]
	cmd(buf)->state = &state;
    86f4:	4638      	mov	r0, r7
	state->val = val;
    86f6:	2301      	movs	r3, #1
    86f8:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    86fc:	f014 fc5a 	bl	1cfb4 <net_buf_id>
    8700:	4b0d      	ldr	r3, [pc, #52]	; (8738 <bt_le_create_conn_legacy+0xd4>)
    8702:	220c      	movs	r2, #12
    8704:	fb02 3000 	mla	r0, r2, r0, r3
    8708:	ab01      	add	r3, sp, #4
    870a:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    870c:	4642      	mov	r2, r8
    870e:	4639      	mov	r1, r7
    8710:	f242 000d 	movw	r0, #8205	; 0x200d
    8714:	f7ff fdec 	bl	82f0 <bt_hci_cmd_send_sync>
    8718:	4605      	mov	r5, r0
}
    871a:	4628      	mov	r0, r5
    871c:	b004      	add	sp, #16
    871e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			peer_addr = &conn->le.resp_addr;
    8722:	f106 0196 	add.w	r1, r6, #150	; 0x96
    8726:	e7c6      	b.n	86b6 <bt_le_create_conn_legacy+0x52>
		return -ENOBUFS;
    8728:	f06f 0536 	mvn.w	r5, #54	; 0x36
    872c:	e7f5      	b.n	871a <bt_le_create_conn_legacy+0xb6>
    872e:	bf00      	nop
    8730:	20000000 	.word	0x20000000
    8734:	20000094 	.word	0x20000094
    8738:	20001354 	.word	0x20001354

0000873c <bt_le_create_conn_cancel>:
{
    873c:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    873e:	2100      	movs	r1, #0
{
    8740:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    8742:	f242 000e 	movw	r0, #8206	; 0x200e
    8746:	f7ff fc77 	bl	8038 <bt_hci_cmd_create>
	state->target = target;
    874a:	4b0c      	ldr	r3, [pc, #48]	; (877c <bt_le_create_conn_cancel+0x40>)
    874c:	9301      	str	r3, [sp, #4]
	state->val = val;
    874e:	2500      	movs	r5, #0
	state->bit = bit;
    8750:	230b      	movs	r3, #11
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    8752:	4604      	mov	r4, r0
	state->bit = bit;
    8754:	9302      	str	r3, [sp, #8]
	state->val = val;
    8756:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    875a:	f014 fc2b 	bl	1cfb4 <net_buf_id>
    875e:	4b08      	ldr	r3, [pc, #32]	; (8780 <bt_le_create_conn_cancel+0x44>)
    8760:	220c      	movs	r2, #12
    8762:	fb02 3000 	mla	r0, r2, r0, r3
    8766:	ab01      	add	r3, sp, #4
    8768:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    876a:	462a      	mov	r2, r5
    876c:	4621      	mov	r1, r4
    876e:	f242 000e 	movw	r0, #8206	; 0x200e
    8772:	f7ff fdbd 	bl	82f0 <bt_hci_cmd_send_sync>
}
    8776:	b005      	add	sp, #20
    8778:	bd30      	pop	{r4, r5, pc}
    877a:	bf00      	nop
    877c:	20000094 	.word	0x20000094
    8780:	20001354 	.word	0x20001354

00008784 <conn_auto_initiate>:
{
    8784:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    8786:	7b43      	ldrb	r3, [r0, #13]
    8788:	2b07      	cmp	r3, #7
{
    878a:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    878c:	d11e      	bne.n	87cc <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    878e:	1d06      	adds	r6, r0, #4
    8790:	4630      	mov	r0, r6
    8792:	f019 f969 	bl	21a68 <atomic_get>
    8796:	0483      	lsls	r3, r0, #18
    8798:	d41a      	bmi.n	87d0 <conn_auto_initiate+0x4c>
    879a:	78e3      	ldrb	r3, [r4, #3]
    879c:	b123      	cbz	r3, 87a8 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    879e:	4b31      	ldr	r3, [pc, #196]	; (8864 <conn_auto_initiate+0xe0>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    87a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    87a4:	071d      	lsls	r5, r3, #28
    87a6:	d513      	bpl.n	87d0 <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    87a8:	2102      	movs	r1, #2
    87aa:	f242 0016 	movw	r0, #8214	; 0x2016
    87ae:	f7ff fc43 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
    87b2:	4605      	mov	r5, r0
    87b4:	b160      	cbz	r0, 87d0 <conn_auto_initiate+0x4c>
	cp = net_buf_add(buf, sizeof(*cp));
    87b6:	2102      	movs	r1, #2
    87b8:	3008      	adds	r0, #8
    87ba:	f01b fc3d 	bl	24038 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    87be:	8823      	ldrh	r3, [r4, #0]
    87c0:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    87c2:	4629      	mov	r1, r5
    87c4:	f242 0016 	movw	r0, #8214	; 0x2016
    87c8:	f7ff fc6e 	bl	80a8 <bt_hci_cmd_send>
}
    87cc:	b004      	add	sp, #16
    87ce:	bd70      	pop	{r4, r5, r6, pc}
    87d0:	4630      	mov	r0, r6
    87d2:	f019 f949 	bl	21a68 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    87d6:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    87da:	4d22      	ldr	r5, [pc, #136]	; (8864 <conn_auto_initiate+0xe0>)
    87dc:	f3c0 3100 	ubfx	r1, r0, #12, #1
    87e0:	d11a      	bne.n	8818 <conn_auto_initiate+0x94>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    87e2:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    87e6:	07d8      	lsls	r0, r3, #31
    87e8:	d516      	bpl.n	8818 <conn_auto_initiate+0x94>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    87ea:	2302      	movs	r3, #2
    87ec:	9100      	str	r1, [sp, #0]
    87ee:	461a      	mov	r2, r3
    87f0:	4620      	mov	r0, r4
    87f2:	f019 fa52 	bl	21c9a <bt_le_set_phy>
		if (!err) {
    87f6:	4601      	mov	r1, r0
    87f8:	b920      	cbnz	r0, 8804 <conn_auto_initiate+0x80>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    87fa:	2180      	movs	r1, #128	; 0x80
    87fc:	4630      	mov	r0, r6
    87fe:	f019 f94e 	bl	21a9e <atomic_or>
			return;
    8802:	e7e3      	b.n	87cc <conn_auto_initiate+0x48>
    8804:	4a18      	ldr	r2, [pc, #96]	; (8868 <conn_auto_initiate+0xe4>)
    8806:	4b19      	ldr	r3, [pc, #100]	; (886c <conn_auto_initiate+0xe8>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    8808:	4819      	ldr	r0, [pc, #100]	; (8870 <conn_auto_initiate+0xec>)
    880a:	1ad2      	subs	r2, r2, r3
    880c:	08d2      	lsrs	r2, r2, #3
    880e:	0192      	lsls	r2, r2, #6
    8810:	f042 0201 	orr.w	r2, r2, #1
    8814:	f017 fb40 	bl	1fe98 <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    8818:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    881c:	069a      	lsls	r2, r3, #26
    881e:	d5d5      	bpl.n	87cc <conn_auto_initiate+0x48>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    8820:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    8824:	689b      	ldr	r3, [r3, #8]
    8826:	079b      	lsls	r3, r3, #30
    8828:	d5d0      	bpl.n	87cc <conn_auto_initiate+0x48>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    882a:	f10d 010e 	add.w	r1, sp, #14
    882e:	a803      	add	r0, sp, #12
    8830:	f7ff fdd6 	bl	83e0 <hci_le_read_max_data_len>
			if (!err) {
    8834:	2800      	cmp	r0, #0
    8836:	d1c9      	bne.n	87cc <conn_auto_initiate+0x48>
				err = bt_le_set_data_len(conn,
    8838:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    883c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8840:	4620      	mov	r0, r4
    8842:	f019 fa0d 	bl	21c60 <bt_le_set_data_len>
				if (err) {
    8846:	4601      	mov	r1, r0
    8848:	2800      	cmp	r0, #0
    884a:	d0bf      	beq.n	87cc <conn_auto_initiate+0x48>
    884c:	4b07      	ldr	r3, [pc, #28]	; (886c <conn_auto_initiate+0xe8>)
    884e:	4a06      	ldr	r2, [pc, #24]	; (8868 <conn_auto_initiate+0xe4>)
					BT_ERR("Failed to set data len (%d)", err);
    8850:	4808      	ldr	r0, [pc, #32]	; (8874 <conn_auto_initiate+0xf0>)
    8852:	1ad2      	subs	r2, r2, r3
    8854:	08d2      	lsrs	r2, r2, #3
    8856:	0192      	lsls	r2, r2, #6
    8858:	f042 0201 	orr.w	r2, r2, #1
    885c:	f017 fb1c 	bl	1fe98 <log_1>
		}
    8860:	e7b4      	b.n	87cc <conn_auto_initiate+0x48>
    8862:	bf00      	nop
    8864:	20000000 	.word	0x20000000
    8868:	000250c0 	.word	0x000250c0
    886c:	00024fd8 	.word	0x00024fd8
    8870:	000278e0 	.word	0x000278e0
    8874:	000278fa 	.word	0x000278fa

00008878 <le_phy_update_complete>:
{
    8878:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    887a:	6883      	ldr	r3, [r0, #8]
    887c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    8880:	4628      	mov	r0, r5
    8882:	f001 fc81 	bl	a188 <bt_conn_lookup_handle>
	if (!conn) {
    8886:	4604      	mov	r4, r0
    8888:	b960      	cbnz	r0, 88a4 <le_phy_update_complete+0x2c>
    888a:	4b11      	ldr	r3, [pc, #68]	; (88d0 <le_phy_update_complete+0x58>)
    888c:	4a11      	ldr	r2, [pc, #68]	; (88d4 <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    888e:	4812      	ldr	r0, [pc, #72]	; (88d8 <le_phy_update_complete+0x60>)
    8890:	1ad2      	subs	r2, r2, r3
    8892:	08d2      	lsrs	r2, r2, #3
    8894:	0192      	lsls	r2, r2, #6
    8896:	4629      	mov	r1, r5
    8898:	f042 0201 	orr.w	r2, r2, #1
}
    889c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    88a0:	f017 bafa 	b.w	1fe98 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    88a4:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    88a6:	f06f 0180 	mvn.w	r1, #128	; 0x80
    88aa:	4628      	mov	r0, r5
    88ac:	f019 f8e8 	bl	21a80 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    88b0:	0603      	lsls	r3, r0, #24
    88b2:	d507      	bpl.n	88c4 <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    88b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    88b8:	4628      	mov	r0, r5
    88ba:	f019 f8f0 	bl	21a9e <atomic_or>
		conn_auto_initiate(conn);
    88be:	4620      	mov	r0, r4
    88c0:	f7ff ff60 	bl	8784 <conn_auto_initiate>
	bt_conn_unref(conn);
    88c4:	4620      	mov	r0, r4
}
    88c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    88ca:	f019 bbbf 	b.w	2204c <bt_conn_unref>
    88ce:	bf00      	nop
    88d0:	00024fd8 	.word	0x00024fd8
    88d4:	000250c0 	.word	0x000250c0
    88d8:	000275eb 	.word	0x000275eb

000088dc <le_remote_feat_complete>:
{
    88dc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    88de:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    88e0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    88e4:	4630      	mov	r0, r6
    88e6:	f001 fc4f 	bl	a188 <bt_conn_lookup_handle>
	if (!conn) {
    88ea:	4604      	mov	r4, r0
    88ec:	b960      	cbnz	r0, 8908 <le_remote_feat_complete+0x2c>
    88ee:	4a10      	ldr	r2, [pc, #64]	; (8930 <le_remote_feat_complete+0x54>)
    88f0:	4b10      	ldr	r3, [pc, #64]	; (8934 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    88f2:	4811      	ldr	r0, [pc, #68]	; (8938 <le_remote_feat_complete+0x5c>)
    88f4:	1ad2      	subs	r2, r2, r3
    88f6:	08d2      	lsrs	r2, r2, #3
    88f8:	0192      	lsls	r2, r2, #6
    88fa:	4631      	mov	r1, r6
    88fc:	f042 0201 	orr.w	r2, r2, #1
}
    8900:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8904:	f017 bac8 	b.w	1fe98 <log_1>
	if (!evt->status) {
    8908:	782b      	ldrb	r3, [r5, #0]
    890a:	b923      	cbnz	r3, 8916 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    890c:	2208      	movs	r2, #8
    890e:	1ce9      	adds	r1, r5, #3
    8910:	30ac      	adds	r0, #172	; 0xac
    8912:	f018 ff68 	bl	217e6 <memcpy>
    8916:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    891a:	1d20      	adds	r0, r4, #4
    891c:	f019 f8bf 	bl	21a9e <atomic_or>
	conn_auto_initiate(conn);
    8920:	4620      	mov	r0, r4
    8922:	f7ff ff2f 	bl	8784 <conn_auto_initiate>
	bt_conn_unref(conn);
    8926:	4620      	mov	r0, r4
}
    8928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    892c:	f019 bb8e 	b.w	2204c <bt_conn_unref>
    8930:	000250c0 	.word	0x000250c0
    8934:	00024fd8 	.word	0x00024fd8
    8938:	000275eb 	.word	0x000275eb

0000893c <bt_id_add>:
{
    893c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    8940:	4f63      	ldr	r7, [pc, #396]	; (8ad0 <bt_id_add+0x194>)
    8942:	f897 20e0 	ldrb.w	r2, [r7, #224]	; 0xe0
    8946:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
{
    894a:	4604      	mov	r4, r0
    894c:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    894e:	b10a      	cbz	r2, 8954 <bt_id_add+0x18>
    8950:	429a      	cmp	r2, r3
    8952:	d209      	bcs.n	8968 <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
    8954:	3301      	adds	r3, #1
    8956:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    895a:	7a23      	ldrb	r3, [r4, #8]
    895c:	f043 0304 	orr.w	r3, r3, #4
    8960:	7223      	strb	r3, [r4, #8]
}
    8962:	b002      	add	sp, #8
    8964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    8968:	2100      	movs	r1, #0
    896a:	2206      	movs	r2, #6
    896c:	4608      	mov	r0, r1
    896e:	f001 fd5f 	bl	a430 <bt_conn_lookup_state_le>
	if (conn) {
    8972:	4606      	mov	r6, r0
    8974:	b168      	cbz	r0, 8992 <bt_id_add+0x56>
    8976:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    897a:	f107 0094 	add.w	r0, r7, #148	; 0x94
    897e:	f019 f88e 	bl	21a9e <atomic_or>
	keys->state |= flag;
    8982:	7a23      	ldrb	r3, [r4, #8]
    8984:	f043 0301 	orr.w	r3, r3, #1
    8988:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    898a:	4630      	mov	r0, r6
    898c:	f019 fb5e 	bl	2204c <bt_conn_unref>
		return;
    8990:	e7e7      	b.n	8962 <bt_id_add+0x26>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8992:	f107 0094 	add.w	r0, r7, #148	; 0x94
    8996:	f019 f867 	bl	21a68 <atomic_get>
	func(&bt_dev.adv, data);
    899a:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    899c:	f3c0 1740 	ubfx	r7, r0, #5, #1
    89a0:	f105 0018 	add.w	r0, r5, #24
    89a4:	f019 f8c8 	bl	21b38 <adv_pause_enabled>
	if (scan_enabled) {
    89a8:	b117      	cbz	r7, 89b0 <bt_id_add+0x74>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    89aa:	4630      	mov	r0, r6
    89ac:	f019 f932 	bl	21c14 <set_le_scan_enable>
	if (bt_dev.le.rl_entries) {
    89b0:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    89b4:	b173      	cbz	r3, 89d4 <bt_id_add+0x98>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    89b6:	2000      	movs	r0, #0
    89b8:	f019 f914 	bl	21be4 <addr_res_enable>
		if (err) {
    89bc:	b150      	cbz	r0, 89d4 <bt_id_add+0x98>
    89be:	4945      	ldr	r1, [pc, #276]	; (8ad4 <bt_id_add+0x198>)
    89c0:	4b45      	ldr	r3, [pc, #276]	; (8ad8 <bt_id_add+0x19c>)
			BT_WARN("Failed to disable address resolution");
    89c2:	4846      	ldr	r0, [pc, #280]	; (8adc <bt_id_add+0x1a0>)
    89c4:	1ac9      	subs	r1, r1, r3
    89c6:	08c9      	lsrs	r1, r1, #3
    89c8:	0189      	lsls	r1, r1, #6
    89ca:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
    89ce:	f017 fa56 	bl	1fe7e <log_0>
	if (err) {
    89d2:	e023      	b.n	8a1c <bt_id_add+0xe0>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    89d4:	f895 20e1 	ldrb.w	r2, [r5, #225]	; 0xe1
    89d8:	f895 30e0 	ldrb.w	r3, [r5, #224]	; 0xe0
    89dc:	429a      	cmp	r2, r3
    89de:	d129      	bne.n	8a34 <bt_id_add+0xf8>
    89e0:	4b3d      	ldr	r3, [pc, #244]	; (8ad8 <bt_id_add+0x19c>)
    89e2:	4e3c      	ldr	r6, [pc, #240]	; (8ad4 <bt_id_add+0x198>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
    89e4:	483e      	ldr	r0, [pc, #248]	; (8ae0 <bt_id_add+0x1a4>)
    89e6:	1af6      	subs	r6, r6, r3
    89e8:	08f6      	lsrs	r6, r6, #3
    89ea:	01b6      	lsls	r6, r6, #6
    89ec:	f046 0102 	orr.w	r1, r6, #2
    89f0:	f017 fa45 	bl	1fe7e <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    89f4:	2200      	movs	r2, #0
    89f6:	4611      	mov	r1, r2
    89f8:	f242 0029 	movw	r0, #8233	; 0x2029
    89fc:	f7ff fc78 	bl	82f0 <bt_hci_cmd_send_sync>
		if (err) {
    8a00:	b118      	cbz	r0, 8a0a <bt_id_add+0xce>
			BT_ERR("Failed to clear resolution list");
    8a02:	4838      	ldr	r0, [pc, #224]	; (8ae4 <bt_id_add+0x1a8>)
    8a04:	f046 0101 	orr.w	r1, r6, #1
    8a08:	e7e1      	b.n	89ce <bt_id_add+0x92>
		bt_dev.le.rl_entries++;
    8a0a:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    8a0e:	3301      	adds	r3, #1
    8a10:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    8a14:	7a23      	ldrb	r3, [r4, #8]
    8a16:	f043 0304 	orr.w	r3, r3, #4
    8a1a:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    8a1c:	2001      	movs	r0, #1
    8a1e:	f019 f8e1 	bl	21be4 <addr_res_enable>
	if (scan_enabled) {
    8a22:	b117      	cbz	r7, 8a2a <bt_id_add+0xee>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    8a24:	2001      	movs	r0, #1
    8a26:	f019 f8f5 	bl	21c14 <set_le_scan_enable>
	func(&bt_dev.adv, data);
    8a2a:	482f      	ldr	r0, [pc, #188]	; (8ae8 <bt_id_add+0x1ac>)
    8a2c:	2100      	movs	r1, #0
    8a2e:	f019 f898 	bl	21b62 <adv_unpause_enabled>
}
    8a32:	e796      	b.n	8962 <bt_id_add+0x26>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    8a34:	f104 0801 	add.w	r8, r4, #1
    8a38:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    8a3c:	4640      	mov	r0, r8
    8a3e:	f019 f8a0 	bl	21b82 <hci_id_add.isra.0>
	if (err) {
    8a42:	4606      	mov	r6, r0
    8a44:	b140      	cbz	r0, 8a58 <bt_id_add+0x11c>
    8a46:	4923      	ldr	r1, [pc, #140]	; (8ad4 <bt_id_add+0x198>)
    8a48:	4b23      	ldr	r3, [pc, #140]	; (8ad8 <bt_id_add+0x19c>)
		BT_ERR("Failed to add IRK to controller");
    8a4a:	4828      	ldr	r0, [pc, #160]	; (8aec <bt_id_add+0x1b0>)
    8a4c:	1ac9      	subs	r1, r1, r3
    8a4e:	08c9      	lsrs	r1, r1, #3
    8a50:	0189      	lsls	r1, r1, #6
    8a52:	f041 0101 	orr.w	r1, r1, #1
    8a56:	e7ba      	b.n	89ce <bt_id_add+0x92>
	bt_dev.le.rl_entries++;
    8a58:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    8a5c:	3301      	adds	r3, #1
    8a5e:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
	keys->state |= BT_KEYS_ID_ADDED;
    8a62:	7a23      	ldrb	r3, [r4, #8]
    8a64:	f043 0304 	orr.w	r3, r3, #4
    8a68:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    8a6a:	f895 306b 	ldrb.w	r3, [r5, #107]	; 0x6b
    8a6e:	075b      	lsls	r3, r3, #29
    8a70:	d408      	bmi.n	8a84 <bt_id_add+0x148>
    8a72:	4918      	ldr	r1, [pc, #96]	; (8ad4 <bt_id_add+0x198>)
    8a74:	4b18      	ldr	r3, [pc, #96]	; (8ad8 <bt_id_add+0x19c>)
		BT_WARN("Set privacy mode command is not supported");
    8a76:	481e      	ldr	r0, [pc, #120]	; (8af0 <bt_id_add+0x1b4>)
    8a78:	1ac9      	subs	r1, r1, r3
    8a7a:	08c9      	lsrs	r1, r1, #3
    8a7c:	0189      	lsls	r1, r1, #6
    8a7e:	f041 0102 	orr.w	r1, r1, #2
    8a82:	e7a4      	b.n	89ce <bt_id_add+0x92>
	bt_addr_le_copy(&cp.id_addr, addr);
    8a84:	4641      	mov	r1, r8
    8a86:	4668      	mov	r0, sp
    8a88:	f018 fff4 	bl	21a74 <bt_addr_le_copy>
	cp.mode = mode;
    8a8c:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    8a8e:	2108      	movs	r1, #8
    8a90:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    8a94:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    8a98:	f7ff face 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
    8a9c:	4604      	mov	r4, r0
    8a9e:	b940      	cbnz	r0, 8ab2 <bt_id_add+0x176>
    8aa0:	490c      	ldr	r1, [pc, #48]	; (8ad4 <bt_id_add+0x198>)
    8aa2:	4b0d      	ldr	r3, [pc, #52]	; (8ad8 <bt_id_add+0x19c>)
		BT_ERR("Failed to set privacy mode");
    8aa4:	4813      	ldr	r0, [pc, #76]	; (8af4 <bt_id_add+0x1b8>)
    8aa6:	1ac9      	subs	r1, r1, r3
    8aa8:	08c9      	lsrs	r1, r1, #3
    8aaa:	0189      	lsls	r1, r1, #6
    8aac:	f041 0101 	orr.w	r1, r1, #1
    8ab0:	e78d      	b.n	89ce <bt_id_add+0x92>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    8ab2:	2208      	movs	r2, #8
    8ab4:	4669      	mov	r1, sp
    8ab6:	4410      	add	r0, r2
    8ab8:	f01b fac4 	bl	24044 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    8abc:	4632      	mov	r2, r6
    8abe:	4621      	mov	r1, r4
    8ac0:	f242 004e 	movw	r0, #8270	; 0x204e
    8ac4:	f7ff fc14 	bl	82f0 <bt_hci_cmd_send_sync>
	if (err) {
    8ac8:	2800      	cmp	r0, #0
    8aca:	d0a7      	beq.n	8a1c <bt_id_add+0xe0>
    8acc:	e7e8      	b.n	8aa0 <bt_id_add+0x164>
    8ace:	bf00      	nop
    8ad0:	20000000 	.word	0x20000000
    8ad4:	000250c0 	.word	0x000250c0
    8ad8:	00024fd8 	.word	0x00024fd8
    8adc:	00027916 	.word	0x00027916
    8ae0:	0002793b 	.word	0x0002793b
    8ae4:	0002796c 	.word	0x0002796c
    8ae8:	20000018 	.word	0x20000018
    8aec:	0002798c 	.word	0x0002798c
    8af0:	000279ac 	.word	0x000279ac
    8af4:	000279d6 	.word	0x000279d6

00008af8 <bt_id_del>:
{
    8af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    8afc:	4e4c      	ldr	r6, [pc, #304]	; (8c30 <bt_id_del+0x138>)
    8afe:	f896 20e0 	ldrb.w	r2, [r6, #224]	; 0xe0
    8b02:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
{
    8b06:	4604      	mov	r4, r0
    8b08:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size ||
    8b0a:	b112      	cbz	r2, 8b12 <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    8b0c:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    8b0e:	4293      	cmp	r3, r2
    8b10:	dd08      	ble.n	8b24 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
    8b12:	3b01      	subs	r3, #1
    8b14:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    8b18:	7a23      	ldrb	r3, [r4, #8]
    8b1a:	f023 0304 	bic.w	r3, r3, #4
    8b1e:	7223      	strb	r3, [r4, #8]
}
    8b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    8b24:	2100      	movs	r1, #0
    8b26:	2206      	movs	r2, #6
    8b28:	4608      	mov	r0, r1
    8b2a:	f001 fc81 	bl	a430 <bt_conn_lookup_state_le>
	if (conn) {
    8b2e:	4607      	mov	r7, r0
    8b30:	b170      	cbz	r0, 8b50 <bt_id_del+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8b32:	f106 0094 	add.w	r0, r6, #148	; 0x94
    8b36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    8b3a:	f018 ffb0 	bl	21a9e <atomic_or>
	keys->state |= flag;
    8b3e:	7a23      	ldrb	r3, [r4, #8]
    8b40:	f043 0302 	orr.w	r3, r3, #2
    8b44:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    8b46:	4638      	mov	r0, r7
}
    8b48:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    8b4c:	f019 ba7e 	b.w	2204c <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8b50:	f106 0094 	add.w	r0, r6, #148	; 0x94
    8b54:	f018 ff88 	bl	21a68 <atomic_get>
	func(&bt_dev.adv, data);
    8b58:	4639      	mov	r1, r7
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    8b5a:	f3c0 1640 	ubfx	r6, r0, #5, #1
    8b5e:	f105 0018 	add.w	r0, r5, #24
    8b62:	f018 ffe9 	bl	21b38 <adv_pause_enabled>
	if (scan_enabled) {
    8b66:	b116      	cbz	r6, 8b6e <bt_id_del+0x76>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    8b68:	4638      	mov	r0, r7
    8b6a:	f019 f853 	bl	21c14 <set_le_scan_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    8b6e:	2000      	movs	r0, #0
    8b70:	f019 f838 	bl	21be4 <addr_res_enable>
	if (err) {
    8b74:	4607      	mov	r7, r0
    8b76:	b1d0      	cbz	r0, 8bae <bt_id_del+0xb6>
    8b78:	4a2e      	ldr	r2, [pc, #184]	; (8c34 <bt_id_del+0x13c>)
    8b7a:	4b2f      	ldr	r3, [pc, #188]	; (8c38 <bt_id_del+0x140>)
    8b7c:	1ad2      	subs	r2, r2, r3
    8b7e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
    8b80:	0192      	lsls	r2, r2, #6
    8b82:	4601      	mov	r1, r0
    8b84:	f042 0201 	orr.w	r2, r2, #1
    8b88:	482c      	ldr	r0, [pc, #176]	; (8c3c <bt_id_del+0x144>)
    8b8a:	f017 f985 	bl	1fe98 <log_1>
	if (bt_dev.le.rl_entries) {
    8b8e:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    8b92:	b113      	cbz	r3, 8b9a <bt_id_del+0xa2>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    8b94:	2001      	movs	r0, #1
    8b96:	f019 f825 	bl	21be4 <addr_res_enable>
	if (scan_enabled) {
    8b9a:	b116      	cbz	r6, 8ba2 <bt_id_del+0xaa>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    8b9c:	2001      	movs	r0, #1
    8b9e:	f019 f839 	bl	21c14 <set_le_scan_enable>
}
    8ba2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	func(&bt_dev.adv, data);
    8ba6:	4826      	ldr	r0, [pc, #152]	; (8c40 <bt_id_del+0x148>)
    8ba8:	2100      	movs	r1, #0
    8baa:	f018 bfda 	b.w	21b62 <adv_unpause_enabled>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    8bae:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    8bb2:	f895 20e0 	ldrb.w	r2, [r5, #224]	; 0xe0
    8bb6:	429a      	cmp	r2, r3
    8bb8:	d20c      	bcs.n	8bd4 <bt_id_del+0xdc>
		bt_dev.le.rl_entries--;
    8bba:	3b01      	subs	r3, #1
    8bbc:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    8bc0:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    8bc2:	4920      	ldr	r1, [pc, #128]	; (8c44 <bt_id_del+0x14c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    8bc4:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    8bc8:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    8bca:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    8bcc:	2002      	movs	r0, #2
    8bce:	f006 fc3d 	bl	f44c <bt_keys_foreach>
		goto done;
    8bd2:	e7dc      	b.n	8b8e <bt_id_del+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    8bd4:	2107      	movs	r1, #7
    8bd6:	f242 0028 	movw	r0, #8232	; 0x2028
    8bda:	f7ff fa2d 	bl	8038 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    8bde:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
    8be2:	4680      	mov	r8, r0
    8be4:	b950      	cbnz	r0, 8bfc <bt_id_del+0x104>
    8be6:	4b14      	ldr	r3, [pc, #80]	; (8c38 <bt_id_del+0x140>)
    8be8:	4912      	ldr	r1, [pc, #72]	; (8c34 <bt_id_del+0x13c>)
		BT_ERR("Failed to remove IRK from controller");
    8bea:	4817      	ldr	r0, [pc, #92]	; (8c48 <bt_id_del+0x150>)
    8bec:	1ac9      	subs	r1, r1, r3
    8bee:	08c9      	lsrs	r1, r1, #3
    8bf0:	0189      	lsls	r1, r1, #6
    8bf2:	f041 0101 	orr.w	r1, r1, #1
    8bf6:	f017 f942 	bl	1fe7e <log_0>
		goto done;
    8bfa:	e7c8      	b.n	8b8e <bt_id_del+0x96>
	cp = net_buf_add(buf, sizeof(*cp));
    8bfc:	2107      	movs	r1, #7
    8bfe:	3008      	adds	r0, #8
    8c00:	f01b fa1a 	bl	24038 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    8c04:	4649      	mov	r1, r9
    8c06:	f018 ff35 	bl	21a74 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    8c0a:	463a      	mov	r2, r7
    8c0c:	4641      	mov	r1, r8
    8c0e:	f242 0028 	movw	r0, #8232	; 0x2028
    8c12:	f7ff fb6d 	bl	82f0 <bt_hci_cmd_send_sync>
	if (err) {
    8c16:	2800      	cmp	r0, #0
    8c18:	d1e5      	bne.n	8be6 <bt_id_del+0xee>
	bt_dev.le.rl_entries--;
    8c1a:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    8c1e:	3b01      	subs	r3, #1
    8c20:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
	keys->state &= ~BT_KEYS_ID_ADDED;
    8c24:	7a23      	ldrb	r3, [r4, #8]
    8c26:	f023 0304 	bic.w	r3, r3, #4
    8c2a:	7223      	strb	r3, [r4, #8]
    8c2c:	e7af      	b.n	8b8e <bt_id_del+0x96>
    8c2e:	bf00      	nop
    8c30:	20000000 	.word	0x20000000
    8c34:	000250c0 	.word	0x000250c0
    8c38:	00024fd8 	.word	0x00024fd8
    8c3c:	000279f1 	.word	0x000279f1
    8c40:	20000018 	.word	0x20000018
    8c44:	00021bd3 	.word	0x00021bd3
    8c48:	00027a1e 	.word	0x00027a1e

00008c4c <bt_le_scan_update>:
{
    8c4c:	b570      	push	{r4, r5, r6, lr}
    8c4e:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8c50:	481c      	ldr	r0, [pc, #112]	; (8cc4 <bt_le_scan_update+0x78>)
    8c52:	f018 ff09 	bl	21a68 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    8c56:	0641      	lsls	r1, r0, #25
    8c58:	f3c0 1380 	ubfx	r3, r0, #6, #1
    8c5c:	d501      	bpl.n	8c62 <bt_le_scan_update+0x16>
			return 0;
    8c5e:	2000      	movs	r0, #0
    8c60:	e02c      	b.n	8cbc <bt_le_scan_update+0x70>
    8c62:	4818      	ldr	r0, [pc, #96]	; (8cc4 <bt_le_scan_update+0x78>)
    8c64:	f018 ff00 	bl	21a68 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    8c68:	0682      	lsls	r2, r0, #26
    8c6a:	d422      	bmi.n	8cb2 <bt_le_scan_update+0x66>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    8c6c:	2100      	movs	r1, #0
    8c6e:	2206      	movs	r2, #6
    8c70:	4608      	mov	r0, r1
    8c72:	f001 fbdd 	bl	a430 <bt_conn_lookup_state_le>
		if (conn) {
    8c76:	4604      	mov	r4, r0
    8c78:	bb08      	cbnz	r0, 8cbe <bt_le_scan_update+0x72>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    8c7a:	2202      	movs	r2, #2
    8c7c:	4601      	mov	r1, r0
    8c7e:	f001 fbd7 	bl	a430 <bt_conn_lookup_state_le>
		if (conn) {
    8c82:	4605      	mov	r5, r0
    8c84:	2800      	cmp	r0, #0
    8c86:	d0ea      	beq.n	8c5e <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8c88:	f44f 7180 	mov.w	r1, #256	; 0x100
    8c8c:	480d      	ldr	r0, [pc, #52]	; (8cc4 <bt_le_scan_update+0x78>)
    8c8e:	f018 ff06 	bl	21a9e <atomic_or>
			bt_conn_unref(conn);
    8c92:	4628      	mov	r0, r5
    8c94:	f019 f9da 	bl	2204c <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    8c98:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    8c9a:	4620      	mov	r0, r4
    8c9c:	bf18      	it	ne
    8c9e:	2230      	movne	r2, #48	; 0x30
}
    8ca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    8ca4:	bf0a      	itet	eq
    8ca6:	2212      	moveq	r2, #18
    8ca8:	2160      	movne	r1, #96	; 0x60
    8caa:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    8cae:	f7ff bc6b 	b.w	8588 <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    8cb2:	4618      	mov	r0, r3
    8cb4:	f7ff fc2c 	bl	8510 <set_le_scan_enable_legacy>
		if (err) {
    8cb8:	2800      	cmp	r0, #0
    8cba:	d0d7      	beq.n	8c6c <bt_le_scan_update+0x20>
}
    8cbc:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    8cbe:	f019 f9c5 	bl	2204c <bt_conn_unref>
    8cc2:	e7cc      	b.n	8c5e <bt_le_scan_update+0x12>
    8cc4:	20000094 	.word	0x20000094

00008cc8 <hci_disconn_complete>:
{
    8cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8cca:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    8ccc:	7835      	ldrb	r5, [r6, #0]
    8cce:	bb75      	cbnz	r5, 8d2e <hci_disconn_complete+0x66>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8cd0:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    8cd4:	4638      	mov	r0, r7
    8cd6:	f001 fa57 	bl	a188 <bt_conn_lookup_handle>
	if (!conn) {
    8cda:	4604      	mov	r4, r0
    8cdc:	b960      	cbnz	r0, 8cf8 <hci_disconn_complete+0x30>
    8cde:	4b14      	ldr	r3, [pc, #80]	; (8d30 <hci_disconn_complete+0x68>)
    8ce0:	4a14      	ldr	r2, [pc, #80]	; (8d34 <hci_disconn_complete+0x6c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    8ce2:	4815      	ldr	r0, [pc, #84]	; (8d38 <hci_disconn_complete+0x70>)
    8ce4:	1ad2      	subs	r2, r2, r3
    8ce6:	08d2      	lsrs	r2, r2, #3
    8ce8:	0192      	lsls	r2, r2, #6
    8cea:	4639      	mov	r1, r7
    8cec:	f042 0201 	orr.w	r2, r2, #1
}
    8cf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8cf4:	f017 b8d0 	b.w	1fe98 <log_1>
	conn->err = evt->reason;
    8cf8:	78f3      	ldrb	r3, [r6, #3]
    8cfa:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8cfc:	4629      	mov	r1, r5
    8cfe:	f001 fa4f 	bl	a1a0 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    8d02:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    8d04:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    8d06:	2b01      	cmp	r3, #1
    8d08:	d004      	beq.n	8d14 <hci_disconn_complete+0x4c>
	bt_conn_unref(conn);
    8d0a:	4620      	mov	r0, r4
}
    8d0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    8d10:	f019 b99c 	b.w	2204c <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8d14:	1d20      	adds	r0, r4, #4
    8d16:	f018 fea7 	bl	21a68 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    8d1a:	07c3      	lsls	r3, r0, #31
    8d1c:	d5f5      	bpl.n	8d0a <hci_disconn_complete+0x42>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    8d1e:	4620      	mov	r0, r4
    8d20:	2102      	movs	r1, #2
    8d22:	f001 fa3d 	bl	a1a0 <bt_conn_set_state>
		bt_le_scan_update(false);
    8d26:	4628      	mov	r0, r5
    8d28:	f7ff ff90 	bl	8c4c <bt_le_scan_update>
    8d2c:	e7ed      	b.n	8d0a <hci_disconn_complete+0x42>
}
    8d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8d30:	00024fd8 	.word	0x00024fd8
    8d34:	000250c0 	.word	0x000250c0
    8d38:	0002760f 	.word	0x0002760f

00008d3c <le_adv_report>:
{
    8d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t num_reports = net_buf_pull_u8(buf);
    8d40:	f100 0708 	add.w	r7, r0, #8
{
    8d44:	b08d      	sub	sp, #52	; 0x34
    8d46:	4604      	mov	r4, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
    8d48:	4638      	mov	r0, r7
    8d4a:	f01b f9ae 	bl	240aa <net_buf_simple_pull_u8>
    8d4e:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8f2c <le_adv_report+0x1f0>
	if (scan_dev_found_cb) {
    8d52:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8f30 <le_adv_report+0x1f4>
	uint8_t num_reports = net_buf_pull_u8(buf);
    8d56:	9002      	str	r0, [sp, #8]
	while (num_reports--) {
    8d58:	9b02      	ldr	r3, [sp, #8]
    8d5a:	b163      	cbz	r3, 8d76 <le_adv_report+0x3a>
		if (buf->len < sizeof(*evt)) {
    8d5c:	89a3      	ldrh	r3, [r4, #12]
    8d5e:	2b08      	cmp	r3, #8
    8d60:	d80c      	bhi.n	8d7c <le_adv_report+0x40>
    8d62:	496d      	ldr	r1, [pc, #436]	; (8f18 <le_adv_report+0x1dc>)
    8d64:	4b6d      	ldr	r3, [pc, #436]	; (8f1c <le_adv_report+0x1e0>)
			BT_ERR("Unexpected end of buffer");
    8d66:	486e      	ldr	r0, [pc, #440]	; (8f20 <le_adv_report+0x1e4>)
    8d68:	1ac9      	subs	r1, r1, r3
    8d6a:	08c9      	lsrs	r1, r1, #3
    8d6c:	0189      	lsls	r1, r1, #6
    8d6e:	f041 0101 	orr.w	r1, r1, #1
    8d72:	f017 f884 	bl	1fe7e <log_0>
}
    8d76:	b00d      	add	sp, #52	; 0x34
    8d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		evt = net_buf_pull_mem(buf, sizeof(*evt));
    8d7c:	2109      	movs	r1, #9
    8d7e:	4638      	mov	r0, r7
    8d80:	f01b f98b 	bl	2409a <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    8d84:	237f      	movs	r3, #127	; 0x7f
    8d86:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    8d8a:	7a03      	ldrb	r3, [r0, #8]
    8d8c:	9301      	str	r3, [sp, #4]
    8d8e:	18c3      	adds	r3, r0, r3
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    8d90:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    8d92:	7a5b      	ldrb	r3, [r3, #9]
    8d94:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    8d98:	23ff      	movs	r3, #255	; 0xff
    8d9a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    8d9e:	2300      	movs	r3, #0
    8da0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    8da4:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
    8da8:	7802      	ldrb	r2, [r0, #0]
    8daa:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    8dae:	2a04      	cmp	r2, #4
    8db0:	bf98      	it	ls
    8db2:	4b5c      	ldrls	r3, [pc, #368]	; (8f24 <le_adv_report+0x1e8>)
		evt = net_buf_pull_mem(buf, sizeof(*evt));
    8db4:	4606      	mov	r6, r0
	switch (evt_type) {
    8db6:	bf98      	it	ls
    8db8:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props(evt->evt_type);
    8dba:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    8dbe:	f100 0901 	add.w	r9, r0, #1
    8dc2:	4640      	mov	r0, r8
    8dc4:	f018 fe50 	bl	21a68 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    8dc8:	0645      	lsls	r5, r0, #25
    8dca:	d50d      	bpl.n	8de8 <le_adv_report+0xac>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    8dcc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8dd0:	0758      	lsls	r0, r3, #29
    8dd2:	d509      	bpl.n	8de8 <le_adv_report+0xac>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    8dd4:	7a31      	ldrb	r1, [r6, #8]
    8dd6:	4638      	mov	r0, r7
    8dd8:	3101      	adds	r1, #1
    8dda:	f01b f956 	bl	2408a <net_buf_simple_pull>
    8dde:	9b02      	ldr	r3, [sp, #8]
    8de0:	1e58      	subs	r0, r3, #1
    8de2:	b2c3      	uxtb	r3, r0
    8de4:	9302      	str	r3, [sp, #8]
    8de6:	e7b7      	b.n	8d58 <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    8de8:	7873      	ldrb	r3, [r6, #1]
    8dea:	1e9a      	subs	r2, r3, #2
    8dec:	2a01      	cmp	r2, #1
    8dee:	d852      	bhi.n	8e96 <le_adv_report+0x15a>
		bt_addr_le_copy(&id_addr, addr);
    8df0:	4649      	mov	r1, r9
    8df2:	a804      	add	r0, sp, #16
    8df4:	f018 fe3e 	bl	21a74 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    8df8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    8dfc:	3b02      	subs	r3, #2
    8dfe:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    8e02:	ab04      	add	r3, sp, #16
    8e04:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    8e06:	f8da 3000 	ldr.w	r3, [sl]
    8e0a:	b1b3      	cbz	r3, 8e3a <le_adv_report+0xfe>
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    8e0c:	4638      	mov	r0, r7
    8e0e:	f01b f95c 	bl	240ca <net_buf_simple_headroom>
	state->len = buf->len;
    8e12:	89a3      	ldrh	r3, [r4, #12]
    8e14:	9303      	str	r3, [sp, #12]
		buf->len = len;
    8e16:	9b01      	ldr	r3, [sp, #4]
    8e18:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    8e1a:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    8e1c:	463b      	mov	r3, r7
    8e1e:	a804      	add	r0, sp, #16
    8e20:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    8e24:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    8e28:	f8da 5000 	ldr.w	r5, [sl]
    8e2c:	47a8      	blx	r5
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    8e2e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    8e30:	9b03      	ldr	r3, [sp, #12]
    8e32:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8e34:	fa10 f08b 	uxtah	r0, r0, fp
    8e38:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
    8e3a:	4b3b      	ldr	r3, [pc, #236]	; (8f28 <le_adv_report+0x1ec>)
    8e3c:	681d      	ldr	r5, [r3, #0]
    8e3e:	2d00      	cmp	r5, #0
    8e40:	d13a      	bne.n	8eb8 <le_adv_report+0x17c>
    8e42:	4640      	mov	r0, r8
	check_pending_conn(&id_addr, addr, info->adv_props);
    8e44:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8e48:	f018 fe0e 	bl	21a68 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    8e4c:	0641      	lsls	r1, r0, #25
    8e4e:	f3c0 1580 	ubfx	r5, r0, #6, #1
    8e52:	d4bf      	bmi.n	8dd4 <le_adv_report+0x98>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    8e54:	07da      	lsls	r2, r3, #31
    8e56:	d5bd      	bpl.n	8dd4 <le_adv_report+0x98>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    8e58:	2202      	movs	r2, #2
    8e5a:	a904      	add	r1, sp, #16
    8e5c:	4628      	mov	r0, r5
    8e5e:	f001 fae7 	bl	a430 <bt_conn_lookup_state_le>
	if (!conn) {
    8e62:	4683      	mov	fp, r0
    8e64:	2800      	cmp	r0, #0
    8e66:	d0b5      	beq.n	8dd4 <le_adv_report+0x98>
    8e68:	4640      	mov	r0, r8
    8e6a:	f018 fdfd 	bl	21a68 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    8e6e:	0683      	lsls	r3, r0, #26
    8e70:	d43e      	bmi.n	8ef0 <le_adv_report+0x1b4>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    8e72:	f10b 0096 	add.w	r0, fp, #150	; 0x96
    8e76:	4649      	mov	r1, r9
    8e78:	f018 fdfc 	bl	21a74 <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    8e7c:	4658      	mov	r0, fp
    8e7e:	f7ff fbf1 	bl	8664 <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    8e82:	2800      	cmp	r0, #0
    8e84:	d139      	bne.n	8efa <le_adv_report+0x1be>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    8e86:	4658      	mov	r0, fp
    8e88:	2106      	movs	r1, #6
    8e8a:	f001 f989 	bl	a1a0 <bt_conn_set_state>
	bt_conn_unref(conn);
    8e8e:	4658      	mov	r0, fp
    8e90:	f019 f8dc 	bl	2204c <bt_conn_unref>
	return;
    8e94:	e79e      	b.n	8dd4 <le_adv_report+0x98>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    8e96:	2bff      	cmp	r3, #255	; 0xff
    8e98:	d108      	bne.n	8eac <le_adv_report+0x170>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    8e9a:	2300      	movs	r3, #0
    8e9c:	9306      	str	r3, [sp, #24]
    8e9e:	a906      	add	r1, sp, #24
    8ea0:	f8cd 301b 	str.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
    8ea4:	a804      	add	r0, sp, #16
    8ea6:	f018 fde5 	bl	21a74 <bt_addr_le_copy>
    8eaa:	e7aa      	b.n	8e02 <le_adv_report+0xc6>
    8eac:	4649      	mov	r1, r9
    8eae:	2000      	movs	r0, #0
    8eb0:	f018 feb2 	bl	21c18 <bt_lookup_id_addr>
    8eb4:	4601      	mov	r1, r0
    8eb6:	e7f5      	b.n	8ea4 <le_adv_report+0x168>
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
    8eb8:	3d08      	subs	r5, #8
    8eba:	2d00      	cmp	r5, #0
    8ebc:	d0c1      	beq.n	8e42 <le_adv_report+0x106>
		if (listener->recv) {
    8ebe:	682b      	ldr	r3, [r5, #0]
    8ec0:	b18b      	cbz	r3, 8ee6 <le_adv_report+0x1aa>
	state->offset = net_buf_simple_headroom(buf);
    8ec2:	4638      	mov	r0, r7
    8ec4:	f01b f901 	bl	240ca <net_buf_simple_headroom>
			buf->len = len;
    8ec8:	9b01      	ldr	r3, [sp, #4]
	state->len = buf->len;
    8eca:	89a2      	ldrh	r2, [r4, #12]
    8ecc:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    8ece:	4683      	mov	fp, r0
			listener->recv(info, &buf->b);
    8ed0:	682b      	ldr	r3, [r5, #0]
	state->len = buf->len;
    8ed2:	9203      	str	r2, [sp, #12]
    8ed4:	a808      	add	r0, sp, #32
    8ed6:	4639      	mov	r1, r7
    8ed8:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
    8eda:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    8edc:	9a03      	ldr	r2, [sp, #12]
    8ede:	81a2      	strh	r2, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8ee0:	fa10 f08b 	uxtah	r0, r0, fp
    8ee4:	60a0      	str	r0, [r4, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
    8ee6:	f115 0f08 	cmn.w	r5, #8
    8eea:	d0aa      	beq.n	8e42 <le_adv_report+0x106>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8eec:	68ad      	ldr	r5, [r5, #8]
	return node->next;
    8eee:	e7a6      	b.n	8e3e <le_adv_report+0x102>
	return set_le_scan_enable_legacy(enable);
    8ef0:	4628      	mov	r0, r5
    8ef2:	f7ff fb0d 	bl	8510 <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    8ef6:	2800      	cmp	r0, #0
    8ef8:	d0bb      	beq.n	8e72 <le_adv_report+0x136>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    8efa:	231f      	movs	r3, #31
    8efc:	f88b 300c 	strb.w	r3, [fp, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8f00:	2100      	movs	r1, #0
    8f02:	4658      	mov	r0, fp
    8f04:	f001 f94c 	bl	a1a0 <bt_conn_set_state>
	bt_conn_unref(conn);
    8f08:	4658      	mov	r0, fp
    8f0a:	f019 f89f 	bl	2204c <bt_conn_unref>
	bt_le_scan_update(false);
    8f0e:	2000      	movs	r0, #0
    8f10:	f7ff fe9c 	bl	8c4c <bt_le_scan_update>
    8f14:	e75e      	b.n	8dd4 <le_adv_report+0x98>
    8f16:	bf00      	nop
    8f18:	000250c0 	.word	0x000250c0
    8f1c:	00024fd8 	.word	0x00024fd8
    8f20:	00027a43 	.word	0x00027a43
    8f24:	00027eb8 	.word	0x00027eb8
    8f28:	20001378 	.word	0x20001378
    8f2c:	20000094 	.word	0x20000094
    8f30:	20001380 	.word	0x20001380

00008f34 <bt_data_parse>:
{
    8f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8f36:	4604      	mov	r4, r0
    8f38:	460e      	mov	r6, r1
    8f3a:	4617      	mov	r7, r2
	while (ad->len > 1) {
    8f3c:	88a3      	ldrh	r3, [r4, #4]
    8f3e:	2b01      	cmp	r3, #1
    8f40:	d912      	bls.n	8f68 <bt_data_parse+0x34>
		len = net_buf_simple_pull_u8(ad);
    8f42:	4620      	mov	r0, r4
    8f44:	f01b f8b1 	bl	240aa <net_buf_simple_pull_u8>
		if (len == 0U) {
    8f48:	4605      	mov	r5, r0
    8f4a:	b168      	cbz	r0, 8f68 <bt_data_parse+0x34>
		if (len > ad->len) {
    8f4c:	88a2      	ldrh	r2, [r4, #4]
    8f4e:	b283      	uxth	r3, r0
    8f50:	429a      	cmp	r2, r3
    8f52:	d20b      	bcs.n	8f6c <bt_data_parse+0x38>
    8f54:	490f      	ldr	r1, [pc, #60]	; (8f94 <bt_data_parse+0x60>)
    8f56:	4b10      	ldr	r3, [pc, #64]	; (8f98 <bt_data_parse+0x64>)
			BT_WARN("Malformed data");
    8f58:	4810      	ldr	r0, [pc, #64]	; (8f9c <bt_data_parse+0x68>)
    8f5a:	1ac9      	subs	r1, r1, r3
    8f5c:	08c9      	lsrs	r1, r1, #3
    8f5e:	0189      	lsls	r1, r1, #6
    8f60:	f041 0102 	orr.w	r1, r1, #2
    8f64:	f016 ff8b 	bl	1fe7e <log_0>
}
    8f68:	b003      	add	sp, #12
    8f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.type = net_buf_simple_pull_u8(ad);
    8f6c:	4620      	mov	r0, r4
    8f6e:	f01b f89c 	bl	240aa <net_buf_simple_pull_u8>
		data.data_len = len - 1;
    8f72:	3d01      	subs	r5, #1
		data.data = ad->data;
    8f74:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    8f76:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
    8f7a:	4639      	mov	r1, r7
    8f7c:	4668      	mov	r0, sp
		data.data_len = len - 1;
    8f7e:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    8f82:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    8f84:	47b0      	blx	r6
    8f86:	2800      	cmp	r0, #0
    8f88:	d0ee      	beq.n	8f68 <bt_data_parse+0x34>
		net_buf_simple_pull(ad, len - 1);
    8f8a:	4629      	mov	r1, r5
    8f8c:	4620      	mov	r0, r4
    8f8e:	f01b f87c 	bl	2408a <net_buf_simple_pull>
    8f92:	e7d3      	b.n	8f3c <bt_data_parse+0x8>
    8f94:	000250c0 	.word	0x000250c0
    8f98:	00024fd8 	.word	0x00024fd8
    8f9c:	00027a5c 	.word	0x00027a5c

00008fa0 <hci_event_prio>:
{
    8fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8fa4:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    8fa6:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    8faa:	4630      	mov	r0, r6
    8fac:	f01b f88d 	bl	240ca <net_buf_simple_headroom>
	state->len = buf->len;
    8fb0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8fb4:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    8fb8:	4605      	mov	r5, r0
    8fba:	d80c      	bhi.n	8fd6 <hci_event_prio+0x36>
    8fbc:	4a1c      	ldr	r2, [pc, #112]	; (9030 <hci_event_prio+0x90>)
    8fbe:	491d      	ldr	r1, [pc, #116]	; (9034 <hci_event_prio+0x94>)
    8fc0:	481d      	ldr	r0, [pc, #116]	; (9038 <hci_event_prio+0x98>)
    8fc2:	f641 03a4 	movw	r3, #6308	; 0x18a4
    8fc6:	f016 fb96 	bl	1f6f6 <printk>
    8fca:	4040      	eors	r0, r0
    8fcc:	f380 8811 	msr	BASEPRI, r0
    8fd0:	f04f 0003 	mov.w	r0, #3
    8fd4:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8fd6:	2102      	movs	r1, #2
    8fd8:	4630      	mov	r0, r6
    8fda:	f01b f85e 	bl	2409a <net_buf_simple_pull_mem>
    8fde:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    8fe0:	7800      	ldrb	r0, [r0, #0]
    8fe2:	f018 fd2f 	bl	21a44 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    8fe6:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    8fe8:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    8fea:	d40c      	bmi.n	9006 <hci_event_prio+0x66>
    8fec:	4a10      	ldr	r2, [pc, #64]	; (9030 <hci_event_prio+0x90>)
    8fee:	4913      	ldr	r1, [pc, #76]	; (903c <hci_event_prio+0x9c>)
    8ff0:	4811      	ldr	r0, [pc, #68]	; (9038 <hci_event_prio+0x98>)
    8ff2:	f641 03a8 	movw	r3, #6312	; 0x18a8
    8ff6:	f016 fb7e 	bl	1f6f6 <printk>
    8ffa:	4040      	eors	r0, r0
    8ffc:	f380 8811 	msr	BASEPRI, r0
    9000:	f04f 0003 	mov.w	r0, #3
    9004:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    9006:	2305      	movs	r3, #5
    9008:	4a0d      	ldr	r2, [pc, #52]	; (9040 <hci_event_prio+0xa0>)
    900a:	7838      	ldrb	r0, [r7, #0]
    900c:	4621      	mov	r1, r4
    900e:	f7fe fdc9 	bl	7ba4 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    9012:	07b3      	lsls	r3, r6, #30
    9014:	d507      	bpl.n	9026 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    9016:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    9018:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    901c:	fa10 f585 	uxtah	r5, r0, r5
    9020:	60a5      	str	r5, [r4, #8]
}
    9022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    9026:	4620      	mov	r0, r4
}
    9028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    902c:	f014 b876 	b.w	1d11c <net_buf_unref>
    9030:	0002772b 	.word	0x0002772b
    9034:	00027a6b 	.word	0x00027a6b
    9038:	00027768 	.word	0x00027768
    903c:	00027a84 	.word	0x00027a84
    9040:	000255f8 	.word	0x000255f8

00009044 <bt_recv>:
{
    9044:	b570      	push	{r4, r5, r6, lr}
	return ((struct bt_buf_data *)net_buf_user_data(buf))->type;
    9046:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    9048:	2901      	cmp	r1, #1
{
    904a:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    904c:	d04b      	beq.n	90e6 <bt_recv+0xa2>
    904e:	2903      	cmp	r1, #3
    9050:	d178      	bne.n	9144 <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9052:	8983      	ldrh	r3, [r0, #12]
    9054:	2b03      	cmp	r3, #3
    9056:	d80c      	bhi.n	9072 <bt_recv+0x2e>
    9058:	4a42      	ldr	r2, [pc, #264]	; (9164 <bt_recv+0x120>)
    905a:	4943      	ldr	r1, [pc, #268]	; (9168 <bt_recv+0x124>)
    905c:	4843      	ldr	r0, [pc, #268]	; (916c <bt_recv+0x128>)
    905e:	f240 43af 	movw	r3, #1199	; 0x4af
    9062:	f016 fb48 	bl	1f6f6 <printk>
    9066:	4040      	eors	r0, r0
    9068:	f380 8811 	msr	BASEPRI, r0
    906c:	f04f 0003 	mov.w	r0, #3
    9070:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9072:	2104      	movs	r1, #4
    9074:	f104 0008 	add.w	r0, r4, #8
    9078:	f01b f80f 	bl	2409a <net_buf_simple_pull_mem>
	if (buf->len != len) {
    907c:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    907e:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    9080:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    9082:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    9084:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    9088:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    908a:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    908c:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    908e:	d00d      	beq.n	90ac <bt_recv+0x68>
    9090:	4837      	ldr	r0, [pc, #220]	; (9170 <bt_recv+0x12c>)
    9092:	4b38      	ldr	r3, [pc, #224]	; (9174 <bt_recv+0x130>)
    9094:	1a1b      	subs	r3, r3, r0
    9096:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    9098:	019b      	lsls	r3, r3, #6
    909a:	4837      	ldr	r0, [pc, #220]	; (9178 <bt_recv+0x134>)
    909c:	f043 0301 	orr.w	r3, r3, #1
    90a0:	f016 ff0e 	bl	1fec0 <log_2>
	net_buf_unref(buf);
    90a4:	4620      	mov	r0, r4
    90a6:	f014 f839 	bl	1d11c <net_buf_unref>
    90aa:	e01a      	b.n	90e2 <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    90ac:	f001 f86c 	bl	a188 <bt_conn_lookup_handle>
	if (!conn) {
    90b0:	4605      	mov	r5, r0
    90b2:	b958      	cbnz	r0, 90cc <bt_recv+0x88>
    90b4:	4b2e      	ldr	r3, [pc, #184]	; (9170 <bt_recv+0x12c>)
    90b6:	4a2f      	ldr	r2, [pc, #188]	; (9174 <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    90b8:	8ae1      	ldrh	r1, [r4, #22]
    90ba:	4830      	ldr	r0, [pc, #192]	; (917c <bt_recv+0x138>)
    90bc:	1ad2      	subs	r2, r2, r3
    90be:	08d2      	lsrs	r2, r2, #3
    90c0:	0192      	lsls	r2, r2, #6
    90c2:	f042 0201 	orr.w	r2, r2, #1
    90c6:	f016 fee7 	bl	1fe98 <log_1>
		net_buf_unref(buf);
    90ca:	e7eb      	b.n	90a4 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    90cc:	f001 fc8e 	bl	a9ec <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    90d0:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    90d2:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    90d4:	4621      	mov	r1, r4
    90d6:	4628      	mov	r0, r5
    90d8:	f000 fef4 	bl	9ec4 <bt_conn_recv>
	bt_conn_unref(conn);
    90dc:	4628      	mov	r0, r5
    90de:	f018 ffb5 	bl	2204c <bt_conn_unref>
		return 0;
    90e2:	2000      	movs	r0, #0
}
    90e4:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    90e6:	8983      	ldrh	r3, [r0, #12]
    90e8:	2b01      	cmp	r3, #1
    90ea:	d80c      	bhi.n	9106 <bt_recv+0xc2>
    90ec:	4a1d      	ldr	r2, [pc, #116]	; (9164 <bt_recv+0x120>)
    90ee:	491e      	ldr	r1, [pc, #120]	; (9168 <bt_recv+0x124>)
    90f0:	481e      	ldr	r0, [pc, #120]	; (916c <bt_recv+0x128>)
    90f2:	f241 33fa 	movw	r3, #5114	; 0x13fa
    90f6:	f016 fafe 	bl	1f6f6 <printk>
    90fa:	4040      	eors	r0, r0
    90fc:	f380 8811 	msr	BASEPRI, r0
    9100:	f04f 0003 	mov.w	r0, #3
    9104:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9106:	2102      	movs	r1, #2
    9108:	f104 0008 	add.w	r0, r4, #8
    910c:	f01a ffc5 	bl	2409a <net_buf_simple_pull_mem>
    9110:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    9112:	7800      	ldrb	r0, [r0, #0]
    9114:	f018 fc96 	bl	21a44 <bt_hci_evt_get_flags>
    9118:	0783      	lsls	r3, r0, #30
    911a:	d40c      	bmi.n	9136 <bt_recv+0xf2>
    911c:	4a11      	ldr	r2, [pc, #68]	; (9164 <bt_recv+0x120>)
    911e:	4918      	ldr	r1, [pc, #96]	; (9180 <bt_recv+0x13c>)
    9120:	4812      	ldr	r0, [pc, #72]	; (916c <bt_recv+0x128>)
    9122:	f241 33fe 	movw	r3, #5118	; 0x13fe
    9126:	f016 fae6 	bl	1f6f6 <printk>
    912a:	4040      	eors	r0, r0
    912c:	f380 8811 	msr	BASEPRI, r0
    9130:	f04f 0003 	mov.w	r0, #3
    9134:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    9136:	4a13      	ldr	r2, [pc, #76]	; (9184 <bt_recv+0x140>)
    9138:	7828      	ldrb	r0, [r5, #0]
    913a:	2306      	movs	r3, #6
    913c:	4621      	mov	r1, r4
    913e:	f7fe fd31 	bl	7ba4 <handle_event>
    9142:	e7af      	b.n	90a4 <bt_recv+0x60>
    9144:	4b0a      	ldr	r3, [pc, #40]	; (9170 <bt_recv+0x12c>)
    9146:	4a0b      	ldr	r2, [pc, #44]	; (9174 <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    9148:	480f      	ldr	r0, [pc, #60]	; (9188 <bt_recv+0x144>)
    914a:	1ad2      	subs	r2, r2, r3
    914c:	08d2      	lsrs	r2, r2, #3
    914e:	0192      	lsls	r2, r2, #6
    9150:	f042 0201 	orr.w	r2, r2, #1
    9154:	f016 fea0 	bl	1fe98 <log_1>
		net_buf_unref(buf);
    9158:	4620      	mov	r0, r4
    915a:	f013 ffdf 	bl	1d11c <net_buf_unref>
		return -EINVAL;
    915e:	f06f 0015 	mvn.w	r0, #21
    9162:	e7bf      	b.n	90e4 <bt_recv+0xa0>
    9164:	0002772b 	.word	0x0002772b
    9168:	00027a6b 	.word	0x00027a6b
    916c:	00027768 	.word	0x00027768
    9170:	00024fd8 	.word	0x00024fd8
    9174:	000250c0 	.word	0x000250c0
    9178:	00027a9d 	.word	0x00027a9d
    917c:	00027ac1 	.word	0x00027ac1
    9180:	00027ae3 	.word	0x00027ae3
    9184:	000255b8 	.word	0x000255b8
    9188:	00027b11 	.word	0x00027b11

0000918c <bt_recv_prio>:
{
    918c:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    918e:	7d03      	ldrb	r3, [r0, #20]
    9190:	2b01      	cmp	r3, #1
{
    9192:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9194:	d00c      	beq.n	91b0 <bt_recv_prio+0x24>
    9196:	4a09      	ldr	r2, [pc, #36]	; (91bc <bt_recv_prio+0x30>)
    9198:	4909      	ldr	r1, [pc, #36]	; (91c0 <bt_recv_prio+0x34>)
    919a:	480a      	ldr	r0, [pc, #40]	; (91c4 <bt_recv_prio+0x38>)
    919c:	f641 03eb 	movw	r3, #6379	; 0x18eb
    91a0:	f016 faa9 	bl	1f6f6 <printk>
    91a4:	4040      	eors	r0, r0
    91a6:	f380 8811 	msr	BASEPRI, r0
    91aa:	f04f 0003 	mov.w	r0, #3
    91ae:	df02      	svc	2
	hci_event_prio(buf);
    91b0:	4620      	mov	r0, r4
    91b2:	f7ff fef5 	bl	8fa0 <hci_event_prio>
}
    91b6:	2000      	movs	r0, #0
    91b8:	bd10      	pop	{r4, pc}
    91ba:	bf00      	nop
    91bc:	0002772b 	.word	0x0002772b
    91c0:	00027b25 	.word	0x00027b25
    91c4:	00027768 	.word	0x00027768

000091c8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    91c8:	4a08      	ldr	r2, [pc, #32]	; (91ec <bt_hci_driver_register+0x24>)
{
    91ca:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    91cc:	f8d2 011c 	ldr.w	r0, [r2, #284]	; 0x11c
    91d0:	b930      	cbnz	r0, 91e0 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    91d2:	68d9      	ldr	r1, [r3, #12]
    91d4:	b139      	cbz	r1, 91e6 <bt_hci_driver_register+0x1e>
    91d6:	6919      	ldr	r1, [r3, #16]
    91d8:	b129      	cbz	r1, 91e6 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    91da:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	return 0;
    91de:	4770      	bx	lr
		return -EALREADY;
    91e0:	f06f 0044 	mvn.w	r0, #68	; 0x44
    91e4:	4770      	bx	lr
		return -EINVAL;
    91e6:	f06f 0015 	mvn.w	r0, #21
}
    91ea:	4770      	bx	lr
    91ec:	20000000 	.word	0x20000000

000091f0 <bt_finalize_init>:
{
    91f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    91f4:	4c2d      	ldr	r4, [pc, #180]	; (92ac <bt_finalize_init+0xbc>)
    91f6:	4d2e      	ldr	r5, [pc, #184]	; (92b0 <bt_finalize_init+0xc0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    91f8:	4e2e      	ldr	r6, [pc, #184]	; (92b4 <bt_finalize_init+0xc4>)
		BT_INFO("Identity[%d]: %s",
    91fa:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 92cc <bt_finalize_init+0xdc>
{
    91fe:	b087      	sub	sp, #28
    9200:	2102      	movs	r1, #2
    9202:	f104 0094 	add.w	r0, r4, #148	; 0x94
    9206:	f018 fc4a 	bl	21a9e <atomic_or>
		bt_le_scan_update(false);
    920a:	2000      	movs	r0, #0
    920c:	f7ff fd1e 	bl	8c4c <bt_le_scan_update>
    9210:	4b29      	ldr	r3, [pc, #164]	; (92b8 <bt_finalize_init+0xc8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    9212:	492a      	ldr	r1, [pc, #168]	; (92bc <bt_finalize_init+0xcc>)
    9214:	1aed      	subs	r5, r5, r3
    9216:	79e3      	ldrb	r3, [r4, #7]
    9218:	4620      	mov	r0, r4
    921a:	2b01      	cmp	r3, #1
    921c:	bf88      	it	hi
    921e:	460e      	movhi	r6, r1
    9220:	f7fd ff7a 	bl	7118 <bt_addr_le_str_real>
    9224:	f7fc f840 	bl	52a8 <log_strdup>
    9228:	08ed      	lsrs	r5, r5, #3
    922a:	01ad      	lsls	r5, r5, #6
    922c:	f045 0703 	orr.w	r7, r5, #3
    9230:	4602      	mov	r2, r0
    9232:	4631      	mov	r1, r6
    9234:	4822      	ldr	r0, [pc, #136]	; (92c0 <bt_finalize_init+0xd0>)
    9236:	463b      	mov	r3, r7
    9238:	f016 fe42 	bl	1fec0 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    923c:	46a0      	mov	r8, r4
    923e:	2601      	movs	r6, #1
    9240:	79e3      	ldrb	r3, [r4, #7]
    9242:	429e      	cmp	r6, r3
    9244:	f108 0807 	add.w	r8, r8, #7
    9248:	db22      	blt.n	9290 <bt_finalize_init+0xa0>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    924a:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
    924e:	4630      	mov	r0, r6
    9250:	f7fe fa36 	bl	76c0 <ver_str>
    9254:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    9256:	9304      	str	r3, [sp, #16]
    9258:	f045 0503 	orr.w	r5, r5, #3
    925c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    925e:	9305      	str	r3, [sp, #20]
    9260:	e9cd 0602 	strd	r0, r6, [sp, #8]
    9264:	462b      	mov	r3, r5
    9266:	a902      	add	r1, sp, #8
    9268:	2204      	movs	r2, #4
    926a:	4816      	ldr	r0, [pc, #88]	; (92c4 <bt_finalize_init+0xd4>)
    926c:	f016 fe5d 	bl	1ff2a <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    9270:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
    9274:	4630      	mov	r0, r6
    9276:	f7fe fa23 	bl	76c0 <ver_str>
    927a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    927c:	f8ad 5000 	strh.w	r5, [sp]
    9280:	4601      	mov	r1, r0
    9282:	4632      	mov	r2, r6
    9284:	4810      	ldr	r0, [pc, #64]	; (92c8 <bt_finalize_init+0xd8>)
    9286:	f016 fe34 	bl	1fef2 <log_3>
}
    928a:	b007      	add	sp, #28
    928c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    9290:	4640      	mov	r0, r8
    9292:	f7fd ff41 	bl	7118 <bt_addr_le_str_real>
    9296:	f7fc f807 	bl	52a8 <log_strdup>
    929a:	4631      	mov	r1, r6
    929c:	4602      	mov	r2, r0
    929e:	463b      	mov	r3, r7
    92a0:	4648      	mov	r0, r9
    92a2:	f016 fe0d 	bl	1fec0 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    92a6:	3601      	adds	r6, #1
    92a8:	e7ca      	b.n	9240 <bt_finalize_init+0x50>
    92aa:	bf00      	nop
    92ac:	20000000 	.word	0x20000000
    92b0:	000250c0 	.word	0x000250c0
    92b4:	00026ddc 	.word	0x00026ddc
    92b8:	00024fd8 	.word	0x00024fd8
    92bc:	00027b48 	.word	0x00027b48
    92c0:	00027b4c 	.word	0x00027b4c
    92c4:	00027b6c 	.word	0x00027b6c
    92c8:	00027baa 	.word	0x00027baa
    92cc:	00027b5b 	.word	0x00027b5b

000092d0 <bt_get_name>:
}
    92d0:	4800      	ldr	r0, [pc, #0]	; (92d4 <bt_get_name+0x4>)
    92d2:	4770      	bx	lr
    92d4:	000278a3 	.word	0x000278a3

000092d8 <bt_id_create>:
{
    92d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    92da:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    92dc:	4605      	mov	r5, r0
    92de:	b918      	cbnz	r0, 92e8 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    92e0:	b344      	cbz	r4, 9334 <bt_id_create+0x5c>
		return -EINVAL;
    92e2:	f06f 0415 	mvn.w	r4, #21
    92e6:	e022      	b.n	932e <bt_id_create+0x56>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    92e8:	2300      	movs	r3, #0
    92ea:	4669      	mov	r1, sp
    92ec:	9300      	str	r3, [sp, #0]
    92ee:	f8cd 3003 	str.w	r3, [sp, #3]
    92f2:	f018 fbc2 	bl	21a7a <bt_addr_le_cmp>
    92f6:	2800      	cmp	r0, #0
    92f8:	d0f2      	beq.n	92e0 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    92fa:	782b      	ldrb	r3, [r5, #0]
    92fc:	2b01      	cmp	r3, #1
    92fe:	d104      	bne.n	930a <bt_id_create+0x32>
    9300:	79ab      	ldrb	r3, [r5, #6]
    9302:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9306:	2bc0      	cmp	r3, #192	; 0xc0
    9308:	d00a      	beq.n	9320 <bt_id_create+0x48>
    930a:	4b11      	ldr	r3, [pc, #68]	; (9350 <bt_id_create+0x78>)
    930c:	4911      	ldr	r1, [pc, #68]	; (9354 <bt_id_create+0x7c>)
			BT_ERR("Only static random identity address supported");
    930e:	4812      	ldr	r0, [pc, #72]	; (9358 <bt_id_create+0x80>)
    9310:	1ac9      	subs	r1, r1, r3
    9312:	08c9      	lsrs	r1, r1, #3
    9314:	0189      	lsls	r1, r1, #6
    9316:	f041 0101 	orr.w	r1, r1, #1
    931a:	f016 fdb0 	bl	1fe7e <log_0>
			return -EINVAL;
    931e:	e7e0      	b.n	92e2 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    9320:	4628      	mov	r0, r5
    9322:	f7fe f9e9 	bl	76f8 <id_find>
    9326:	2800      	cmp	r0, #0
    9328:	dbda      	blt.n	92e0 <bt_id_create+0x8>
			return -EALREADY;
    932a:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
    932e:	4620      	mov	r0, r4
    9330:	b003      	add	sp, #12
    9332:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    9334:	4b09      	ldr	r3, [pc, #36]	; (935c <bt_id_create+0x84>)
    9336:	79dc      	ldrb	r4, [r3, #7]
    9338:	2c01      	cmp	r4, #1
    933a:	d006      	beq.n	934a <bt_id_create+0x72>
	new_id = bt_dev.id_count++;
    933c:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    933e:	4629      	mov	r1, r5
    9340:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    9342:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    9344:	f7fe fc80 	bl	7c48 <id_create.isra.0>
	return new_id;
    9348:	e7f1      	b.n	932e <bt_id_create+0x56>
		return -ENOMEM;
    934a:	f06f 040b 	mvn.w	r4, #11
    934e:	e7ee      	b.n	932e <bt_id_create+0x56>
    9350:	00024fd8 	.word	0x00024fd8
    9354:	000250c0 	.word	0x000250c0
    9358:	00027bd1 	.word	0x00027bd1
    935c:	20000000 	.word	0x20000000

00009360 <bt_setup_public_id_addr>:
{
    9360:	b570      	push	{r4, r5, r6, lr}
    9362:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    9364:	aa01      	add	r2, sp, #4
    9366:	2100      	movs	r1, #0
    9368:	f241 0009 	movw	r0, #4105	; 0x1009
    936c:	f7fe ffc0 	bl	82f0 <bt_hci_cmd_send_sync>
	if (err) {
    9370:	4e1f      	ldr	r6, [pc, #124]	; (93f0 <bt_setup_public_id_addr+0x90>)
    9372:	4604      	mov	r4, r0
    9374:	b168      	cbz	r0, 9392 <bt_setup_public_id_addr+0x32>
    9376:	491f      	ldr	r1, [pc, #124]	; (93f4 <bt_setup_public_id_addr+0x94>)
    9378:	4b1f      	ldr	r3, [pc, #124]	; (93f8 <bt_setup_public_id_addr+0x98>)
		BT_WARN("Failed to read public address");
    937a:	4820      	ldr	r0, [pc, #128]	; (93fc <bt_setup_public_id_addr+0x9c>)
    937c:	1ac9      	subs	r1, r1, r3
    937e:	08c9      	lsrs	r1, r1, #3
    9380:	0189      	lsls	r1, r1, #6
    9382:	f041 0102 	orr.w	r1, r1, #2
    9386:	f016 fd7a 	bl	1fe7e <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    938a:	2300      	movs	r3, #0
    938c:	71f3      	strb	r3, [r6, #7]
}
    938e:	b006      	add	sp, #24
    9390:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    9392:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    9394:	689d      	ldr	r5, [r3, #8]
    9396:	9004      	str	r0, [sp, #16]
    9398:	3501      	adds	r5, #1
    939a:	f8ad 0014 	strh.w	r0, [sp, #20]
	return memcmp(a, b, sizeof(*a));
    939e:	2206      	movs	r2, #6
    93a0:	a904      	add	r1, sp, #16
    93a2:	4628      	mov	r0, r5
    93a4:	f018 fa0f 	bl	217c6 <memcmp>
    93a8:	b918      	cbnz	r0, 93b2 <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    93aa:	9801      	ldr	r0, [sp, #4]
    93ac:	f013 feb6 	bl	1d11c <net_buf_unref>
    93b0:	e7eb      	b.n	938a <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    93b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    93b6:	2206      	movs	r2, #6
    93b8:	a902      	add	r1, sp, #8
    93ba:	4628      	mov	r0, r5
    93bc:	9302      	str	r3, [sp, #8]
    93be:	f8ad 300c 	strh.w	r3, [sp, #12]
    93c2:	f018 fa00 	bl	217c6 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    93c6:	2800      	cmp	r0, #0
    93c8:	d0ef      	beq.n	93aa <bt_setup_public_id_addr+0x4a>
	memcpy(dst, src, sizeof(*dst));
    93ca:	4629      	mov	r1, r5
    93cc:	2206      	movs	r2, #6
    93ce:	f10d 0011 	add.w	r0, sp, #17
    93d2:	f018 fa08 	bl	217e6 <memcpy>
	net_buf_unref(rsp);
    93d6:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    93d8:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    93dc:	f013 fe9e 	bl	1d11c <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    93e0:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    93e2:	a904      	add	r1, sp, #16
    93e4:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
    93e6:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    93e8:	f7fe fc2e 	bl	7c48 <id_create.isra.0>
    93ec:	e7cf      	b.n	938e <bt_setup_public_id_addr+0x2e>
    93ee:	bf00      	nop
    93f0:	20000000 	.word	0x20000000
    93f4:	000250c0 	.word	0x000250c0
    93f8:	00024fd8 	.word	0x00024fd8
    93fc:	00027bff 	.word	0x00027bff

00009400 <bt_read_static_addr>:
{
    9400:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    9404:	4b25      	ldr	r3, [pc, #148]	; (949c <bt_read_static_addr+0x9c>)
    9406:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    940a:	f014 0401 	ands.w	r4, r4, #1
{
    940e:	4607      	mov	r7, r0
    9410:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    9412:	d10a      	bne.n	942a <bt_read_static_addr+0x2a>
    9414:	4922      	ldr	r1, [pc, #136]	; (94a0 <bt_read_static_addr+0xa0>)
    9416:	4b23      	ldr	r3, [pc, #140]	; (94a4 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    9418:	4823      	ldr	r0, [pc, #140]	; (94a8 <bt_read_static_addr+0xa8>)
    941a:	1ac9      	subs	r1, r1, r3
    941c:	08c9      	lsrs	r1, r1, #3
    941e:	0189      	lsls	r1, r1, #6
    9420:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("No static addresses stored in controller");
    9424:	f016 fd2b 	bl	1fe7e <log_0>
    9428:	e012      	b.n	9450 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    942a:	aa01      	add	r2, sp, #4
    942c:	2100      	movs	r1, #0
    942e:	f64f 4009 	movw	r0, #64521	; 0xfc09
    9432:	f7fe ff5d 	bl	82f0 <bt_hci_cmd_send_sync>
	if (err) {
    9436:	4605      	mov	r5, r0
    9438:	b170      	cbz	r0, 9458 <bt_read_static_addr+0x58>
    943a:	4b1a      	ldr	r3, [pc, #104]	; (94a4 <bt_read_static_addr+0xa4>)
    943c:	4918      	ldr	r1, [pc, #96]	; (94a0 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    943e:	481b      	ldr	r0, [pc, #108]	; (94ac <bt_read_static_addr+0xac>)
    9440:	1ac9      	subs	r1, r1, r3
    9442:	08c9      	lsrs	r1, r1, #3
    9444:	0189      	lsls	r1, r1, #6
    9446:	f041 0102 	orr.w	r1, r1, #2
    944a:	f016 fd18 	bl	1fe7e <log_0>
		return 0;
    944e:	2400      	movs	r4, #0
}
    9450:	4620      	mov	r0, r4
    9452:	b002      	add	sp, #8
    9454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    9458:	9b01      	ldr	r3, [sp, #4]
    945a:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    945c:	785c      	ldrb	r4, [r3, #1]
    945e:	42b4      	cmp	r4, r6
    9460:	bf28      	it	cs
    9462:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    9464:	f04f 0816 	mov.w	r8, #22
    9468:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    946a:	42a5      	cmp	r5, r4
    946c:	db0d      	blt.n	948a <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    946e:	9801      	ldr	r0, [sp, #4]
    9470:	f013 fe54 	bl	1d11c <net_buf_unref>
	if (!cnt) {
    9474:	2c00      	cmp	r4, #0
    9476:	d1eb      	bne.n	9450 <bt_read_static_addr+0x50>
    9478:	4909      	ldr	r1, [pc, #36]	; (94a0 <bt_read_static_addr+0xa0>)
    947a:	4b0a      	ldr	r3, [pc, #40]	; (94a4 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    947c:	480c      	ldr	r0, [pc, #48]	; (94b0 <bt_read_static_addr+0xb0>)
    947e:	1ac9      	subs	r1, r1, r3
    9480:	08c9      	lsrs	r1, r1, #3
    9482:	0189      	lsls	r1, r1, #6
    9484:	f041 0102 	orr.w	r1, r1, #2
    9488:	e7cc      	b.n	9424 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    948a:	fb08 7005 	mla	r0, r8, r5, r7
    948e:	2216      	movs	r2, #22
    9490:	4631      	mov	r1, r6
    9492:	f018 f9a8 	bl	217e6 <memcpy>
	for (i = 0; i < cnt; i++) {
    9496:	3501      	adds	r5, #1
    9498:	e7e7      	b.n	946a <bt_read_static_addr+0x6a>
    949a:	bf00      	nop
    949c:	20000000 	.word	0x20000000
    94a0:	000250c0 	.word	0x000250c0
    94a4:	00024fd8 	.word	0x00024fd8
    94a8:	00027c1d 	.word	0x00027c1d
    94ac:	00027c49 	.word	0x00027c49
    94b0:	00027c69 	.word	0x00027c69

000094b4 <bt_setup_random_id_addr>:
{
    94b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
    94b6:	4d14      	ldr	r5, [pc, #80]	; (9508 <bt_setup_random_id_addr+0x54>)
    94b8:	79ec      	ldrb	r4, [r5, #7]
{
    94ba:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    94bc:	b9f4      	cbnz	r4, 94fc <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    94be:	2101      	movs	r1, #1
    94c0:	a802      	add	r0, sp, #8
    94c2:	f7ff ff9d 	bl	9400 <bt_read_static_addr>
    94c6:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    94c8:	b1c0      	cbz	r0, 94fc <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    94ca:	2716      	movs	r7, #22
    94cc:	e00f      	b.n	94ee <bt_setup_random_id_addr+0x3a>
    94ce:	ab02      	add	r3, sp, #8
    94d0:	fb07 3106 	mla	r1, r7, r6, r3
    94d4:	2206      	movs	r2, #6
    94d6:	f10d 0001 	add.w	r0, sp, #1
    94da:	f018 f984 	bl	217e6 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    94de:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    94e0:	4669      	mov	r1, sp
    94e2:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    94e4:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    94e8:	f7fe fbae 	bl	7c48 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    94ec:	3401      	adds	r4, #1
    94ee:	79eb      	ldrb	r3, [r5, #7]
    94f0:	b2e6      	uxtb	r6, r4
    94f2:	42b3      	cmp	r3, r6
    94f4:	d8eb      	bhi.n	94ce <bt_setup_random_id_addr+0x1a>
			return 0;
    94f6:	2000      	movs	r0, #0
}
    94f8:	b009      	add	sp, #36	; 0x24
    94fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    94fc:	2100      	movs	r1, #0
    94fe:	4608      	mov	r0, r1
    9500:	f7ff feea 	bl	92d8 <bt_id_create>
    9504:	e7f8      	b.n	94f8 <bt_setup_random_id_addr+0x44>
    9506:	bf00      	nop
    9508:	20000000 	.word	0x20000000

0000950c <bt_enable>:
{
    950c:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    950e:	4d33      	ldr	r5, [pc, #204]	; (95dc <bt_enable+0xd0>)
    9510:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
{
    9514:	b088      	sub	sp, #32
    9516:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    9518:	b973      	cbnz	r3, 9538 <bt_enable+0x2c>
    951a:	4b31      	ldr	r3, [pc, #196]	; (95e0 <bt_enable+0xd4>)
    951c:	4931      	ldr	r1, [pc, #196]	; (95e4 <bt_enable+0xd8>)
		BT_ERR("No HCI driver registered");
    951e:	4832      	ldr	r0, [pc, #200]	; (95e8 <bt_enable+0xdc>)
    9520:	1ac9      	subs	r1, r1, r3
    9522:	08c9      	lsrs	r1, r1, #3
    9524:	0189      	lsls	r1, r1, #6
    9526:	f041 0101 	orr.w	r1, r1, #1
    952a:	f016 fca8 	bl	1fe7e <log_0>
		return -ENODEV;
    952e:	f06f 0412 	mvn.w	r4, #18
}
    9532:	4620      	mov	r0, r4
    9534:	b008      	add	sp, #32
    9536:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    9538:	2100      	movs	r1, #0
    953a:	f105 0094 	add.w	r0, r5, #148	; 0x94
    953e:	f018 face 	bl	21ade <atomic_test_and_set_bit>
    9542:	2800      	cmp	r0, #0
    9544:	d146      	bne.n	95d4 <bt_enable+0xc8>
	ready_cb = cb;
    9546:	4b29      	ldr	r3, [pc, #164]	; (95ec <bt_enable+0xe0>)
    9548:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    954a:	2200      	movs	r2, #0
    954c:	2300      	movs	r3, #0
    954e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    9552:	f06f 0308 	mvn.w	r3, #8
    9556:	e9cd 0302 	strd	r0, r3, [sp, #8]
    955a:	e9cd 0000 	strd	r0, r0, [sp]
    955e:	9004      	str	r0, [sp, #16]
    9560:	4b23      	ldr	r3, [pc, #140]	; (95f0 <bt_enable+0xe4>)
    9562:	4924      	ldr	r1, [pc, #144]	; (95f4 <bt_enable+0xe8>)
    9564:	4824      	ldr	r0, [pc, #144]	; (95f8 <bt_enable+0xec>)
    9566:	f44f 6280 	mov.w	r2, #1024	; 0x400
    956a:	f015 fca9 	bl	1eec0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    956e:	4923      	ldr	r1, [pc, #140]	; (95fc <bt_enable+0xf0>)
    9570:	4821      	ldr	r0, [pc, #132]	; (95f8 <bt_enable+0xec>)
    9572:	f01b f985 	bl	24880 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    9576:	f7fd ff77 	bl	7468 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    957a:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    957e:	68db      	ldr	r3, [r3, #12]
    9580:	4798      	blx	r3
	if (err) {
    9582:	4604      	mov	r4, r0
    9584:	b158      	cbz	r0, 959e <bt_enable+0x92>
    9586:	4b16      	ldr	r3, [pc, #88]	; (95e0 <bt_enable+0xd4>)
    9588:	4a16      	ldr	r2, [pc, #88]	; (95e4 <bt_enable+0xd8>)
    958a:	1ad2      	subs	r2, r2, r3
    958c:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    958e:	0192      	lsls	r2, r2, #6
    9590:	4601      	mov	r1, r0
    9592:	f042 0201 	orr.w	r2, r2, #1
    9596:	481a      	ldr	r0, [pc, #104]	; (9600 <bt_enable+0xf4>)
    9598:	f016 fc7e 	bl	1fe98 <log_1>
		return err;
    959c:	e7c9      	b.n	9532 <bt_enable+0x26>
	if (!cb) {
    959e:	b966      	cbnz	r6, 95ba <bt_enable+0xae>
	err = hci_init();
    95a0:	f7f6 ff2a 	bl	3f8 <hci_init>
	if (err) {
    95a4:	4604      	mov	r4, r0
    95a6:	2800      	cmp	r0, #0
    95a8:	d1c3      	bne.n	9532 <bt_enable+0x26>
		err = bt_conn_init();
    95aa:	f001 fa2b 	bl	aa04 <bt_conn_init>
		if (err) {
    95ae:	4604      	mov	r4, r0
    95b0:	2800      	cmp	r0, #0
    95b2:	d1be      	bne.n	9532 <bt_enable+0x26>
	bt_finalize_init();
    95b4:	f7ff fe1c 	bl	91f0 <bt_finalize_init>
	return 0;
    95b8:	e7bb      	b.n	9532 <bt_enable+0x26>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    95ba:	4601      	mov	r1, r0
    95bc:	f105 0090 	add.w	r0, r5, #144	; 0x90
    95c0:	f018 fa8d 	bl	21ade <atomic_test_and_set_bit>
    95c4:	2800      	cmp	r0, #0
    95c6:	d1b4      	bne.n	9532 <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    95c8:	480e      	ldr	r0, [pc, #56]	; (9604 <bt_enable+0xf8>)
    95ca:	f105 0188 	add.w	r1, r5, #136	; 0x88
    95ce:	f01a fff1 	bl	245b4 <k_queue_append>
    95d2:	e7ae      	b.n	9532 <bt_enable+0x26>
		return -EALREADY;
    95d4:	f06f 0444 	mvn.w	r4, #68	; 0x44
    95d8:	e7ab      	b.n	9532 <bt_enable+0x26>
    95da:	bf00      	nop
    95dc:	20000000 	.word	0x20000000
    95e0:	00024fd8 	.word	0x00024fd8
    95e4:	000250c0 	.word	0x000250c0
    95e8:	00027dc6 	.word	0x00027dc6
    95ec:	20001374 	.word	0x20001374
    95f0:	00007c9d 	.word	0x00007c9d
    95f4:	20003840 	.word	0x20003840
    95f8:	20000a20 	.word	0x20000a20
    95fc:	00027ddf 	.word	0x00027ddf
    9600:	00027de5 	.word	0x00027de5
    9604:	200010e0 	.word	0x200010e0

00009608 <init_work>:
{
    9608:	b510      	push	{r4, lr}
	err = hci_init();
    960a:	f7f6 fef5 	bl	3f8 <hci_init>
	if (err) {
    960e:	4604      	mov	r4, r0
    9610:	b928      	cbnz	r0, 961e <init_work+0x16>
		err = bt_conn_init();
    9612:	f001 f9f7 	bl	aa04 <bt_conn_init>
		if (err) {
    9616:	4604      	mov	r4, r0
    9618:	b908      	cbnz	r0, 961e <init_work+0x16>
	bt_finalize_init();
    961a:	f7ff fde9 	bl	91f0 <bt_finalize_init>
	if (ready_cb) {
    961e:	4b04      	ldr	r3, [pc, #16]	; (9630 <init_work+0x28>)
    9620:	681b      	ldr	r3, [r3, #0]
    9622:	b11b      	cbz	r3, 962c <init_work+0x24>
		ready_cb(err);
    9624:	4620      	mov	r0, r4
}
    9626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    962a:	4718      	bx	r3
}
    962c:	bd10      	pop	{r4, pc}
    962e:	bf00      	nop
    9630:	20001374 	.word	0x20001374

00009634 <bt_le_adv_stop>:

	return err;
}

int bt_le_adv_stop(void)
{
    9634:	b530      	push	{r4, r5, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9636:	4c29      	ldr	r4, [pc, #164]	; (96dc <bt_le_adv_stop+0xa8>)
    9638:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    963c:	b085      	sub	sp, #20
    963e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    9642:	f018 fa1d 	bl	21a80 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9646:	f104 0028 	add.w	r0, r4, #40	; 0x28
    964a:	f018 fa0d 	bl	21a68 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    964e:	0641      	lsls	r1, r0, #25
    9650:	d403      	bmi.n	965a <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
    9652:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    9654:	4620      	mov	r0, r4
    9656:	b005      	add	sp, #20
    9658:	bd30      	pop	{r4, r5, pc}
    965a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    965e:	f018 fa03 	bl	21a68 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9662:	05c2      	lsls	r2, r0, #23
    9664:	d521      	bpl.n	96aa <bt_le_adv_stop+0x76>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    9666:	2300      	movs	r3, #0
    9668:	4669      	mov	r1, sp
    966a:	f104 0021 	add.w	r0, r4, #33	; 0x21
    966e:	9300      	str	r3, [sp, #0]
    9670:	f8cd 3003 	str.w	r3, [sp, #3]
    9674:	f018 fa01 	bl	21a7a <bt_addr_le_cmp>
    9678:	7e25      	ldrb	r5, [r4, #24]
    967a:	bb58      	cbnz	r0, 96d4 <bt_le_adv_stop+0xa0>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    967c:	4b18      	ldr	r3, [pc, #96]	; (96e0 <bt_le_adv_stop+0xac>)
    967e:	889a      	ldrh	r2, [r3, #4]
    9680:	6818      	ldr	r0, [r3, #0]
    9682:	799b      	ldrb	r3, [r3, #6]
    9684:	f8ad 200c 	strh.w	r2, [sp, #12]
    9688:	9002      	str	r0, [sp, #8]
    968a:	f88d 300e 	strb.w	r3, [sp, #14]
    968e:	2204      	movs	r2, #4
    9690:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    9692:	4628      	mov	r0, r5
    9694:	f000 fecc 	bl	a430 <bt_conn_lookup_state_le>
    9698:	4604      	mov	r4, r0
	if (conn) {
    969a:	b130      	cbz	r0, 96aa <bt_le_adv_stop+0x76>
		conn->err = status;
    969c:	2100      	movs	r1, #0
    969e:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    96a0:	f000 fd7e 	bl	a1a0 <bt_conn_set_state>
		bt_conn_unref(conn);
    96a4:	4620      	mov	r0, r4
    96a6:	f018 fcd1 	bl	2204c <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
    96aa:	480e      	ldr	r0, [pc, #56]	; (96e4 <bt_le_adv_stop+0xb0>)
    96ac:	2100      	movs	r1, #0
    96ae:	f7fe ff01 	bl	84b4 <set_le_adv_enable_legacy>
		if (err) {
    96b2:	4604      	mov	r4, r0
    96b4:	2800      	cmp	r0, #0
    96b6:	d1cd      	bne.n	9654 <bt_le_adv_stop+0x20>
    96b8:	480b      	ldr	r0, [pc, #44]	; (96e8 <bt_le_adv_stop+0xb4>)
    96ba:	f018 f9d5 	bl	21a68 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    96be:	0683      	lsls	r3, r0, #26
    96c0:	d5c7      	bpl.n	9652 <bt_le_adv_stop+0x1e>
			set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    96c2:	4620      	mov	r0, r4
    96c4:	f018 faa6 	bl	21c14 <set_le_scan_enable>
			le_set_private_addr(BT_ID_DEFAULT);
    96c8:	f018 fa24 	bl	21b14 <le_adv_set_private_addr.isra.0>
			set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    96cc:	2001      	movs	r0, #1
    96ce:	f018 faa1 	bl	21c14 <set_le_scan_enable>
    96d2:	e7bf      	b.n	9654 <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    96d4:	2205      	movs	r2, #5
    96d6:	f104 0121 	add.w	r1, r4, #33	; 0x21
    96da:	e7da      	b.n	9692 <bt_le_adv_stop+0x5e>
    96dc:	20000000 	.word	0x20000000
    96e0:	000251c4 	.word	0x000251c4
    96e4:	20000018 	.word	0x20000018
    96e8:	20000094 	.word	0x20000094

000096ec <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    96ec:	b513      	push	{r0, r1, r4, lr}
    96ee:	4818      	ldr	r0, [pc, #96]	; (9750 <bt_le_adv_resume+0x64>)
    96f0:	f018 f9ba 	bl	21a68 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    96f4:	04c1      	lsls	r1, r0, #19
    96f6:	d529      	bpl.n	974c <bt_le_adv_resume+0x60>
    96f8:	4815      	ldr	r0, [pc, #84]	; (9750 <bt_le_adv_resume+0x64>)
    96fa:	f018 f9b5 	bl	21a68 <atomic_get>
    96fe:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    9700:	f3c0 1480 	ubfx	r4, r0, #6, #1
    9704:	d422      	bmi.n	974c <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9706:	4812      	ldr	r0, [pc, #72]	; (9750 <bt_le_adv_resume+0x64>)
    9708:	f018 f9ae 	bl	21a68 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    970c:	05c3      	lsls	r3, r0, #23
    970e:	d51d      	bpl.n	974c <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    9710:	4810      	ldr	r0, [pc, #64]	; (9754 <bt_le_adv_resume+0x68>)
    9712:	a901      	add	r1, sp, #4
    9714:	f7fe fc0e 	bl	7f34 <le_adv_start_add_conn>
	if (err) {
    9718:	b9c0      	cbnz	r0, 974c <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
    971a:	480e      	ldr	r0, [pc, #56]	; (9754 <bt_le_adv_resume+0x68>)
    971c:	2101      	movs	r1, #1
    971e:	f7fe fec9 	bl	84b4 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    9722:	b150      	cbz	r0, 973a <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9724:	4621      	mov	r1, r4
    9726:	9801      	ldr	r0, [sp, #4]
    9728:	f000 fd3a 	bl	a1a0 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    972c:	4808      	ldr	r0, [pc, #32]	; (9750 <bt_le_adv_resume+0x64>)
    972e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    9732:	f018 f9a5 	bl	21a80 <atomic_and>
	return (old & mask) != 0;
    9736:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    973a:	9801      	ldr	r0, [sp, #4]
    973c:	f018 fc86 	bl	2204c <bt_conn_unref>
	if (persist_paused) {
    9740:	b124      	cbz	r4, 974c <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9742:	4803      	ldr	r0, [pc, #12]	; (9750 <bt_le_adv_resume+0x64>)
    9744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    9748:	f018 f9a9 	bl	21a9e <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    974c:	b002      	add	sp, #8
    974e:	bd10      	pop	{r4, pc}
    9750:	20000028 	.word	0x20000028
    9754:	20000018 	.word	0x20000018

00009758 <enh_conn_complete>:
{
    9758:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    975c:	f8b0 8001 	ldrh.w	r8, [r0, #1]
{
    9760:	4605      	mov	r5, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9762:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    9766:	488d      	ldr	r0, [pc, #564]	; (999c <enh_conn_complete+0x244>)
    9768:	f018 f98a 	bl	21a80 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    976c:	0442      	lsls	r2, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    976e:	fa1f f788 	uxth.w	r7, r8
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    9772:	d504      	bpl.n	977e <enh_conn_complete+0x26>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    9774:	498a      	ldr	r1, [pc, #552]	; (99a0 <enh_conn_complete+0x248>)
    9776:	2200      	movs	r2, #0
    9778:	2002      	movs	r0, #2
    977a:	f005 fe67 	bl	f44c <bt_keys_foreach>
	if (evt->status) {
    977e:	782c      	ldrb	r4, [r5, #0]
    9780:	2c00      	cmp	r4, #0
    9782:	d054      	beq.n	982e <enh_conn_complete+0xd6>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9784:	2c3c      	cmp	r4, #60	; 0x3c
    9786:	d11e      	bne.n	97c6 <enh_conn_complete+0x6e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9788:	f06f 0140 	mvn.w	r1, #64	; 0x40
    978c:	4885      	ldr	r0, [pc, #532]	; (99a4 <enh_conn_complete+0x24c>)
    978e:	f018 f977 	bl	21a80 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    9792:	2000      	movs	r0, #0
    9794:	f7fe f96e 	bl	7a74 <find_pending_connect.part.0>
		if (!conn) {
    9798:	4605      	mov	r5, r0
    979a:	b960      	cbnz	r0, 97b6 <enh_conn_complete+0x5e>
    979c:	4982      	ldr	r1, [pc, #520]	; (99a8 <enh_conn_complete+0x250>)
    979e:	4b83      	ldr	r3, [pc, #524]	; (99ac <enh_conn_complete+0x254>)
			BT_ERR("No pending slave connection");
    97a0:	4883      	ldr	r0, [pc, #524]	; (99b0 <enh_conn_complete+0x258>)
    97a2:	1ac9      	subs	r1, r1, r3
    97a4:	08c9      	lsrs	r1, r1, #3
    97a6:	0189      	lsls	r1, r1, #6
    97a8:	f041 0101 	orr.w	r1, r1, #1
    97ac:	f016 fb67 	bl	1fe7e <log_0>
}
    97b0:	b004      	add	sp, #16
    97b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    97b6:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    97b8:	2100      	movs	r1, #0
    97ba:	f000 fcf1 	bl	a1a0 <bt_conn_set_state>
		bt_conn_unref(conn);
    97be:	4628      	mov	r0, r5
    97c0:	f018 fc44 	bl	2204c <bt_conn_unref>
    97c4:	e7f4      	b.n	97b0 <enh_conn_complete+0x58>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    97c6:	2c02      	cmp	r4, #2
    97c8:	d125      	bne.n	9816 <enh_conn_complete+0xbe>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    97ca:	2100      	movs	r1, #0
    97cc:	2206      	movs	r2, #6
    97ce:	4608      	mov	r0, r1
    97d0:	f000 fe2e 	bl	a430 <bt_conn_lookup_state_le>
	if (!conn) {
    97d4:	4605      	mov	r5, r0
    97d6:	b968      	cbnz	r0, 97f4 <enh_conn_complete+0x9c>
    97d8:	4973      	ldr	r1, [pc, #460]	; (99a8 <enh_conn_complete+0x250>)
    97da:	4b74      	ldr	r3, [pc, #464]	; (99ac <enh_conn_complete+0x254>)
		BT_ERR("No pending master connection");
    97dc:	4875      	ldr	r0, [pc, #468]	; (99b4 <enh_conn_complete+0x25c>)
    97de:	1ac9      	subs	r1, r1, r3
    97e0:	08c9      	lsrs	r1, r1, #3
    97e2:	0189      	lsls	r1, r1, #6
    97e4:	f041 0101 	orr.w	r1, r1, #1
    97e8:	f016 fb49 	bl	1fe7e <log_0>
			bt_le_scan_update(false);
    97ec:	2000      	movs	r0, #0
    97ee:	f7ff fa2d 	bl	8c4c <bt_le_scan_update>
			return;
    97f2:	e7dd      	b.n	97b0 <enh_conn_complete+0x58>
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    97f4:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    97f6:	2100      	movs	r1, #0
    97f8:	f000 fcd2 	bl	a1a0 <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    97fc:	1d28      	adds	r0, r5, #4
    97fe:	f018 f933 	bl	21a68 <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    9802:	07c3      	lsls	r3, r0, #31
    9804:	d503      	bpl.n	980e <enh_conn_complete+0xb6>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    9806:	4621      	mov	r1, r4
    9808:	4628      	mov	r0, r5
    980a:	f000 fcc9 	bl	a1a0 <bt_conn_set_state>
	bt_conn_unref(conn);
    980e:	4628      	mov	r0, r5
    9810:	f018 fc1c 	bl	2204c <bt_conn_unref>
    9814:	e7ea      	b.n	97ec <enh_conn_complete+0x94>
    9816:	4b65      	ldr	r3, [pc, #404]	; (99ac <enh_conn_complete+0x254>)
    9818:	4a63      	ldr	r2, [pc, #396]	; (99a8 <enh_conn_complete+0x250>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    981a:	4867      	ldr	r0, [pc, #412]	; (99b8 <enh_conn_complete+0x260>)
    981c:	1ad2      	subs	r2, r2, r3
    981e:	08d2      	lsrs	r2, r2, #3
    9820:	0192      	lsls	r2, r2, #6
    9822:	f042 0202 	orr.w	r2, r2, #2
    9826:	4621      	mov	r1, r4
    9828:	f016 fb36 	bl	1fe98 <log_1>
		return;
    982c:	e7c0      	b.n	97b0 <enh_conn_complete+0x58>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    982e:	792b      	ldrb	r3, [r5, #4]
    9830:	3b02      	subs	r3, #2
    9832:	2b01      	cmp	r3, #1
    9834:	f105 0604 	add.w	r6, r5, #4
    9838:	d840      	bhi.n	98bc <enh_conn_complete+0x164>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    983a:	4631      	mov	r1, r6
    983c:	a802      	add	r0, sp, #8
    983e:	f018 f919 	bl	21a74 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    9842:	f89d 3008 	ldrb.w	r3, [sp, #8]
    9846:	2206      	movs	r2, #6
    9848:	3b02      	subs	r3, #2
    984a:	f105 0111 	add.w	r1, r5, #17
    984e:	f10d 0001 	add.w	r0, sp, #1
    9852:	f88d 3008 	strb.w	r3, [sp, #8]
    9856:	f017 ffc6 	bl	217e6 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    985a:	2301      	movs	r3, #1
    985c:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
    9860:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
    9862:	2800      	cmp	r0, #0
    9864:	d13d      	bne.n	98e2 <enh_conn_complete+0x18a>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    9866:	2206      	movs	r2, #6
    9868:	a902      	add	r1, sp, #8
    986a:	f000 fde1 	bl	a430 <bt_conn_lookup_state_le>
    986e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9870:	78eb      	ldrb	r3, [r5, #3]
    9872:	2b01      	cmp	r3, #1
    9874:	d104      	bne.n	9880 <enh_conn_complete+0x128>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9876:	484b      	ldr	r0, [pc, #300]	; (99a4 <enh_conn_complete+0x24c>)
    9878:	f06f 0140 	mvn.w	r1, #64	; 0x40
    987c:	f018 f900 	bl	21a80 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9880:	78eb      	ldrb	r3, [r5, #3]
    9882:	b923      	cbnz	r3, 988e <enh_conn_complete+0x136>
    9884:	4845      	ldr	r0, [pc, #276]	; (999c <enh_conn_complete+0x244>)
    9886:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    988a:	f018 f8f9 	bl	21a80 <atomic_and>
	if (!conn) {
    988e:	bb84      	cbnz	r4, 98f2 <enh_conn_complete+0x19a>
    9890:	4a46      	ldr	r2, [pc, #280]	; (99ac <enh_conn_complete+0x254>)
    9892:	4c45      	ldr	r4, [pc, #276]	; (99a8 <enh_conn_complete+0x250>)
		BT_ERR("No pending conn for peer %s",
    9894:	4630      	mov	r0, r6
    9896:	1aa4      	subs	r4, r4, r2
    9898:	f7fd fc3e 	bl	7118 <bt_addr_le_str_real>
    989c:	f7fb fd04 	bl	52a8 <log_strdup>
    98a0:	08e4      	lsrs	r4, r4, #3
    98a2:	01a4      	lsls	r4, r4, #6
    98a4:	f044 0401 	orr.w	r4, r4, #1
    98a8:	4601      	mov	r1, r0
    98aa:	4622      	mov	r2, r4
    98ac:	4843      	ldr	r0, [pc, #268]	; (99bc <enh_conn_complete+0x264>)
    98ae:	f016 faf3 	bl	1fe98 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    98b2:	211f      	movs	r1, #31
    98b4:	4638      	mov	r0, r7
    98b6:	f018 f9b9 	bl	21c2c <bt_hci_disconnect>
		return;
    98ba:	e779      	b.n	97b0 <enh_conn_complete+0x58>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    98bc:	78eb      	ldrb	r3, [r5, #3]
    98be:	2b01      	cmp	r3, #1
    98c0:	bf04      	itt	eq
    98c2:	4b3f      	ldreq	r3, [pc, #252]	; (99c0 <enh_conn_complete+0x268>)
    98c4:	f893 4033 	ldrbeq.w	r4, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
    98c8:	4631      	mov	r1, r6
    98ca:	4620      	mov	r0, r4
    98cc:	f018 f9a4 	bl	21c18 <bt_lookup_id_addr>
    98d0:	4601      	mov	r1, r0
    98d2:	a802      	add	r0, sp, #8
    98d4:	f018 f8ce 	bl	21a74 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    98d8:	4631      	mov	r1, r6
    98da:	4668      	mov	r0, sp
    98dc:	f018 f8ca 	bl	21a74 <bt_addr_le_copy>
    98e0:	e7be      	b.n	9860 <enh_conn_complete+0x108>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    98e2:	2801      	cmp	r0, #1
    98e4:	d103      	bne.n	98ee <enh_conn_complete+0x196>
    98e6:	a802      	add	r0, sp, #8
    98e8:	f7fe f8c4 	bl	7a74 <find_pending_connect.part.0>
    98ec:	e7bf      	b.n	986e <enh_conn_complete+0x116>
	return NULL;
    98ee:	2400      	movs	r4, #0
    98f0:	e7be      	b.n	9870 <enh_conn_complete+0x118>
	conn->handle = handle;
    98f2:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    98f4:	a902      	add	r1, sp, #8
	conn->handle = handle;
    98f6:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    98fa:	f018 f8bb 	bl	21a74 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    98fe:	7e2a      	ldrb	r2, [r5, #24]
    9900:	7deb      	ldrb	r3, [r5, #23]
    9902:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9906:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    990a:	7eaa      	ldrb	r2, [r5, #26]
    990c:	7e6b      	ldrb	r3, [r5, #25]
    990e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9912:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    9916:	7eeb      	ldrb	r3, [r5, #27]
    9918:	7f2a      	ldrb	r2, [r5, #28]
    991a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    991e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    9922:	78eb      	ldrb	r3, [r5, #3]
    9924:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    9926:	2500      	movs	r5, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9928:	2b01      	cmp	r3, #1
	conn->err = 0U;
    992a:	7325      	strb	r5, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    992c:	d116      	bne.n	995c <enh_conn_complete+0x204>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    992e:	4669      	mov	r1, sp
    9930:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    9934:	f018 f89e 	bl	21a74 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
    9938:	7a21      	ldrb	r1, [r4, #8]
    993a:	4e21      	ldr	r6, [pc, #132]	; (99c0 <enh_conn_complete+0x268>)
    993c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    9940:	4431      	add	r1, r6
    9942:	f104 0096 	add.w	r0, r4, #150	; 0x96
    9946:	f018 f895 	bl	21a74 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    994a:	f8d6 10a4 	ldr.w	r1, [r6, #164]	; 0xa4
    994e:	462a      	mov	r2, r5
    9950:	f001 0340 	and.w	r3, r1, #64	; 0x40
    9954:	4313      	orrs	r3, r2
    9956:	d001      	beq.n	995c <enh_conn_complete+0x204>
			bt_le_adv_resume();
    9958:	f7ff fec8 	bl	96ec <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    995c:	78e3      	ldrb	r3, [r4, #3]
    995e:	b96b      	cbnz	r3, 997c <enh_conn_complete+0x224>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    9960:	4669      	mov	r1, sp
    9962:	f104 0096 	add.w	r0, r4, #150	; 0x96
    9966:	f018 f885 	bl	21a74 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    996a:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    996c:	4b14      	ldr	r3, [pc, #80]	; (99c0 <enh_conn_complete+0x268>)
					&bt_dev.id_addr[conn->id]);
    996e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    9972:	4419      	add	r1, r3
    9974:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    9978:	f018 f87c 	bl	21a74 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    997c:	2107      	movs	r1, #7
    997e:	4620      	mov	r0, r4
    9980:	f000 fc0e 	bl	a1a0 <bt_conn_set_state>
	conn_auto_initiate(conn);
    9984:	4620      	mov	r0, r4
    9986:	f7fe fefd 	bl	8784 <conn_auto_initiate>
	bt_conn_unref(conn);
    998a:	4620      	mov	r0, r4
    998c:	f018 fb5e 	bl	2204c <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9990:	78e3      	ldrb	r3, [r4, #3]
    9992:	2b00      	cmp	r3, #0
    9994:	f47f af0c 	bne.w	97b0 <enh_conn_complete+0x58>
    9998:	e728      	b.n	97ec <enh_conn_complete+0x94>
    999a:	bf00      	nop
    999c:	20000094 	.word	0x20000094
    99a0:	00021d27 	.word	0x00021d27
    99a4:	20000028 	.word	0x20000028
    99a8:	000250c0 	.word	0x000250c0
    99ac:	00024fd8 	.word	0x00024fd8
    99b0:	00027e01 	.word	0x00027e01
    99b4:	00027e1d 	.word	0x00027e1d
    99b8:	00027e3a 	.word	0x00027e3a
    99bc:	00027e53 	.word	0x00027e53
    99c0:	20000000 	.word	0x20000000

000099c4 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    99c4:	b570      	push	{r4, r5, r6, lr}
    99c6:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    99c8:	482e      	ldr	r0, [pc, #184]	; (9a84 <bt_le_scan_start+0xc0>)
    99ca:	460e      	mov	r6, r1
    99cc:	f018 f84c 	bl	21a68 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    99d0:	0781      	lsls	r1, r0, #30
    99d2:	d553      	bpl.n	9a7c <bt_le_scan_start+0xb8>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    99d4:	782a      	ldrb	r2, [r5, #0]
    99d6:	2a01      	cmp	r2, #1
    99d8:	d903      	bls.n	99e2 <bt_le_scan_start+0x1e>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    99da:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    99de:	4620      	mov	r0, r4
    99e0:	bd70      	pop	{r4, r5, r6, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    99e2:	686b      	ldr	r3, [r5, #4]
    99e4:	f033 030f 	bics.w	r3, r3, #15
    99e8:	d1f7      	bne.n	99da <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    99ea:	8928      	ldrh	r0, [r5, #8]
    99ec:	1f03      	subs	r3, r0, #4
    99ee:	b29b      	uxth	r3, r3
    99f0:	f643 74fc 	movw	r4, #16380	; 0x3ffc
    99f4:	42a3      	cmp	r3, r4
    99f6:	d8f0      	bhi.n	99da <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
    99f8:	8969      	ldrh	r1, [r5, #10]
    99fa:	1f0b      	subs	r3, r1, #4
    99fc:	b29b      	uxth	r3, r3
    99fe:	42a3      	cmp	r3, r4
    9a00:	d8eb      	bhi.n	99da <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
    9a02:	4288      	cmp	r0, r1
    9a04:	d3e9      	bcc.n	99da <bt_le_scan_start+0x16>
	if (param->type && !bt_le_scan_random_addr_check()) {
    9a06:	b942      	cbnz	r2, 9a1a <bt_le_scan_start+0x56>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    9a08:	481e      	ldr	r0, [pc, #120]	; (9a84 <bt_le_scan_start+0xc0>)
    9a0a:	2106      	movs	r1, #6
    9a0c:	f018 f867 	bl	21ade <atomic_test_and_set_bit>
    9a10:	4603      	mov	r3, r0
    9a12:	b138      	cbz	r0, 9a24 <bt_le_scan_start+0x60>
		return -EALREADY;
    9a14:	f06f 0444 	mvn.w	r4, #68	; 0x44
    9a18:	e7e1      	b.n	99de <bt_le_scan_start+0x1a>
	if (param->type && !bt_le_scan_random_addr_check()) {
    9a1a:	f7fe fe1b 	bl	8654 <bt_le_scan_random_addr_check>
    9a1e:	2800      	cmp	r0, #0
    9a20:	d1f2      	bne.n	9a08 <bt_le_scan_start+0x44>
    9a22:	e7da      	b.n	99da <bt_le_scan_start+0x16>
    9a24:	4817      	ldr	r0, [pc, #92]	; (9a84 <bt_le_scan_start+0xc0>)
    9a26:	f018 f81f 	bl	21a68 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    9a2a:	0682      	lsls	r2, r0, #26
    9a2c:	d50a      	bpl.n	9a44 <bt_le_scan_start+0x80>
	return set_le_scan_enable_legacy(enable);
    9a2e:	4618      	mov	r0, r3
    9a30:	f7fe fd6e 	bl	8510 <set_le_scan_enable_legacy>
		if (err) {
    9a34:	4604      	mov	r4, r0
    9a36:	b128      	cbz	r0, 9a44 <bt_le_scan_start+0x80>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9a38:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9a3c:	4811      	ldr	r0, [pc, #68]	; (9a84 <bt_le_scan_start+0xc0>)
    9a3e:	f018 f81f 	bl	21a80 <atomic_and>
		return err;
    9a42:	e7cc      	b.n	99de <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    9a44:	686a      	ldr	r2, [r5, #4]
    9a46:	480f      	ldr	r0, [pc, #60]	; (9a84 <bt_le_scan_start+0xc0>)
    9a48:	f002 0201 	and.w	r2, r2, #1
    9a4c:	2108      	movs	r1, #8
    9a4e:	f018 f835 	bl	21abc <atomic_set_bit_to>
		if (param->timeout) {
    9a52:	89ab      	ldrh	r3, [r5, #12]
    9a54:	b13b      	cbz	r3, 9a66 <bt_le_scan_start+0xa2>
    9a56:	480b      	ldr	r0, [pc, #44]	; (9a84 <bt_le_scan_start+0xc0>)
    9a58:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9a5c:	f018 f810 	bl	21a80 <atomic_and>
			return -ENOTSUP;
    9a60:	f06f 0422 	mvn.w	r4, #34	; 0x22
    9a64:	e7bb      	b.n	99de <bt_le_scan_start+0x1a>
		err = start_le_scan_legacy(param->type, param->interval,
    9a66:	896a      	ldrh	r2, [r5, #10]
    9a68:	8929      	ldrh	r1, [r5, #8]
    9a6a:	7828      	ldrb	r0, [r5, #0]
    9a6c:	f7fe fd8c 	bl	8588 <start_le_scan_legacy>
	if (err) {
    9a70:	4604      	mov	r4, r0
    9a72:	2800      	cmp	r0, #0
    9a74:	d1e0      	bne.n	9a38 <bt_le_scan_start+0x74>
	scan_dev_found_cb = cb;
    9a76:	4b04      	ldr	r3, [pc, #16]	; (9a88 <bt_le_scan_start+0xc4>)
    9a78:	601e      	str	r6, [r3, #0]
	return 0;
    9a7a:	e7b0      	b.n	99de <bt_le_scan_start+0x1a>
		return -EAGAIN;
    9a7c:	f06f 040a 	mvn.w	r4, #10
    9a80:	e7ad      	b.n	99de <bt_le_scan_start+0x1a>
    9a82:	bf00      	nop
    9a84:	20000094 	.word	0x20000094
    9a88:	20001380 	.word	0x20001380

00009a8c <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    9a8c:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9a8e:	4808      	ldr	r0, [pc, #32]	; (9ab0 <bt_le_scan_stop+0x24>)
    9a90:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9a94:	f017 fff4 	bl	21a80 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    9a98:	0643      	lsls	r3, r0, #25
    9a9a:	d506      	bpl.n	9aaa <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    9a9c:	4b05      	ldr	r3, [pc, #20]	; (9ab4 <bt_le_scan_stop+0x28>)
    9a9e:	2000      	movs	r0, #0
    9aa0:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    9aa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    9aa6:	f7ff b8d1 	b.w	8c4c <bt_le_scan_update>
}
    9aaa:	f06f 0044 	mvn.w	r0, #68	; 0x44
    9aae:	bd08      	pop	{r3, pc}
    9ab0:	20000094 	.word	0x20000094
    9ab4:	20001380 	.word	0x20001380

00009ab8 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    9ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    9aba:	4d21      	ldr	r5, [pc, #132]	; (9b40 <bt_pub_key_gen+0x88>)
    9abc:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
    9ac0:	f003 0306 	and.w	r3, r3, #6
    9ac4:	2b06      	cmp	r3, #6
    9ac6:	d00d      	beq.n	9ae4 <bt_pub_key_gen+0x2c>
    9ac8:	4b1e      	ldr	r3, [pc, #120]	; (9b44 <bt_pub_key_gen+0x8c>)
    9aca:	491f      	ldr	r1, [pc, #124]	; (9b48 <bt_pub_key_gen+0x90>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    9acc:	481f      	ldr	r0, [pc, #124]	; (9b4c <bt_pub_key_gen+0x94>)
    9ace:	1ac9      	subs	r1, r1, r3
    9ad0:	08c9      	lsrs	r1, r1, #3
    9ad2:	0189      	lsls	r1, r1, #6
    9ad4:	f041 0102 	orr.w	r1, r1, #2
    9ad8:	f016 f9d1 	bl	1fe7e <log_0>
		return -ENOTSUP;
    9adc:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    9ae0:	4620      	mov	r0, r4
    9ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    9ae4:	4e1a      	ldr	r6, [pc, #104]	; (9b50 <bt_pub_key_gen+0x98>)
    9ae6:	6833      	ldr	r3, [r6, #0]
    9ae8:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    9aea:	6030      	str	r0, [r6, #0]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9aec:	2104      	movs	r1, #4
    9aee:	f105 0094 	add.w	r0, r5, #148	; 0x94
    9af2:	f017 fff4 	bl	21ade <atomic_test_and_set_bit>
    9af6:	4607      	mov	r7, r0
    9af8:	bb00      	cbnz	r0, 9b3c <bt_pub_key_gen+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9afa:	f06f 0108 	mvn.w	r1, #8
    9afe:	f105 0094 	add.w	r0, r5, #148	; 0x94
    9b02:	f017 ffbd 	bl	21a80 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    9b06:	463a      	mov	r2, r7
    9b08:	4639      	mov	r1, r7
    9b0a:	f242 0025 	movw	r0, #8229	; 0x2025
    9b0e:	f7fe fbef 	bl	82f0 <bt_hci_cmd_send_sync>
	if (err) {
    9b12:	4604      	mov	r4, r0
    9b14:	2800      	cmp	r0, #0
    9b16:	d0e3      	beq.n	9ae0 <bt_pub_key_gen+0x28>
    9b18:	4b0a      	ldr	r3, [pc, #40]	; (9b44 <bt_pub_key_gen+0x8c>)
    9b1a:	490b      	ldr	r1, [pc, #44]	; (9b48 <bt_pub_key_gen+0x90>)
		BT_ERR("Sending LE P256 Public Key command failed");
    9b1c:	480d      	ldr	r0, [pc, #52]	; (9b54 <bt_pub_key_gen+0x9c>)
    9b1e:	1ac9      	subs	r1, r1, r3
    9b20:	08c9      	lsrs	r1, r1, #3
    9b22:	0189      	lsls	r1, r1, #6
    9b24:	f041 0101 	orr.w	r1, r1, #1
    9b28:	f016 f9a9 	bl	1fe7e <log_0>
    9b2c:	f06f 0110 	mvn.w	r1, #16
    9b30:	f105 0094 	add.w	r0, r5, #148	; 0x94
    9b34:	f017 ffa4 	bl	21a80 <atomic_and>
		pub_key_cb = NULL;
    9b38:	6037      	str	r7, [r6, #0]
		return err;
    9b3a:	e7d1      	b.n	9ae0 <bt_pub_key_gen+0x28>
		return 0;
    9b3c:	2400      	movs	r4, #0
    9b3e:	e7cf      	b.n	9ae0 <bt_pub_key_gen+0x28>
    9b40:	20000000 	.word	0x20000000
    9b44:	00024fd8 	.word	0x00024fd8
    9b48:	000250c0 	.word	0x000250c0
    9b4c:	00027e6f 	.word	0x00027e6f
    9b50:	20001370 	.word	0x20001370
    9b54:	00027e8e 	.word	0x00027e8e

00009b58 <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    9b58:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9b5a:	4804      	ldr	r0, [pc, #16]	; (9b6c <bt_pub_key_get+0x14>)
    9b5c:	f017 ff84 	bl	21a68 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    9b60:	f010 0f08 	tst.w	r0, #8
		return pub_key;
	}

	return NULL;
}
    9b64:	4802      	ldr	r0, [pc, #8]	; (9b70 <bt_pub_key_get+0x18>)
    9b66:	bf08      	it	eq
    9b68:	2000      	moveq	r0, #0
    9b6a:	bd08      	pop	{r3, pc}
    9b6c:	20000094 	.word	0x20000094
    9b70:	2000303f 	.word	0x2000303f

00009b74 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    9b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9b76:	4d1a      	ldr	r5, [pc, #104]	; (9be0 <bt_dh_key_gen+0x6c>)
    9b78:	682b      	ldr	r3, [r5, #0]
{
    9b7a:	4606      	mov	r6, r0
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9b7c:	b113      	cbz	r3, 9b84 <bt_dh_key_gen+0x10>
		return -EBUSY;
    9b7e:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    9b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9b84:	4817      	ldr	r0, [pc, #92]	; (9be4 <bt_dh_key_gen+0x70>)
    9b86:	f017 ff6f 	bl	21a68 <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9b8a:	06c2      	lsls	r2, r0, #27
    9b8c:	f3c0 1700 	ubfx	r7, r0, #4, #1
    9b90:	d4f5      	bmi.n	9b7e <bt_dh_key_gen+0xa>
    9b92:	4814      	ldr	r0, [pc, #80]	; (9be4 <bt_dh_key_gen+0x70>)
    9b94:	f017 ff68 	bl	21a68 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    9b98:	0703      	lsls	r3, r0, #28
    9b9a:	d51d      	bpl.n	9bd8 <bt_dh_key_gen+0x64>
	dh_key_cb = cb;
    9b9c:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    9b9e:	f242 0026 	movw	r0, #8230	; 0x2026
    9ba2:	2140      	movs	r1, #64	; 0x40
    9ba4:	f7fe fa48 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
    9ba8:	4604      	mov	r4, r0
    9baa:	b918      	cbnz	r0, 9bb4 <bt_dh_key_gen+0x40>
		dh_key_cb = NULL;
    9bac:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    9bae:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9bb2:	e7e6      	b.n	9b82 <bt_dh_key_gen+0xe>
	cp = net_buf_add(buf, sizeof(*cp));
    9bb4:	2140      	movs	r1, #64	; 0x40
    9bb6:	3008      	adds	r0, #8
    9bb8:	f01a fa3e 	bl	24038 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    9bbc:	2240      	movs	r2, #64	; 0x40
    9bbe:	4631      	mov	r1, r6
    9bc0:	f017 fe11 	bl	217e6 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    9bc4:	463a      	mov	r2, r7
    9bc6:	4621      	mov	r1, r4
    9bc8:	f242 0026 	movw	r0, #8230	; 0x2026
    9bcc:	f7fe fb90 	bl	82f0 <bt_hci_cmd_send_sync>
	if (err) {
    9bd0:	2800      	cmp	r0, #0
    9bd2:	d0d6      	beq.n	9b82 <bt_dh_key_gen+0xe>
		dh_key_cb = NULL;
    9bd4:	602f      	str	r7, [r5, #0]
		return err;
    9bd6:	e7d4      	b.n	9b82 <bt_dh_key_gen+0xe>
		return -EADDRNOTAVAIL;
    9bd8:	f06f 0030 	mvn.w	r0, #48	; 0x30
    9bdc:	e7d1      	b.n	9b82 <bt_dh_key_gen+0xe>
    9bde:	bf00      	nop
    9be0:	2000136c 	.word	0x2000136c
    9be4:	20000094 	.word	0x20000094

00009be8 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    9be8:	2300      	movs	r3, #0
	tx->user_data = NULL;
    9bea:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    9bee:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    9bf0:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    9bf2:	4801      	ldr	r0, [pc, #4]	; (9bf8 <tx_free+0x10>)
    9bf4:	f01a bcde 	b.w	245b4 <k_queue_append>
    9bf8:	200007b4 	.word	0x200007b4

00009bfc <notify_connected>:
{
    9bfc:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    9bfe:	4b09      	ldr	r3, [pc, #36]	; (9c24 <notify_connected+0x28>)
    9c00:	681d      	ldr	r5, [r3, #0]
{
    9c02:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    9c04:	7b21      	ldrb	r1, [r4, #12]
    9c06:	b92d      	cbnz	r5, 9c14 <notify_connected+0x18>
	if (!conn->err) {
    9c08:	b951      	cbnz	r1, 9c20 <notify_connected+0x24>
		bt_gatt_connected(conn);
    9c0a:	4620      	mov	r0, r4
}
    9c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    9c10:	f003 be2c 	b.w	d86c <bt_gatt_connected>
		if (cb->connected) {
    9c14:	682b      	ldr	r3, [r5, #0]
    9c16:	b10b      	cbz	r3, 9c1c <notify_connected+0x20>
			cb->connected(conn, conn->err);
    9c18:	4620      	mov	r0, r4
    9c1a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    9c1c:	69ad      	ldr	r5, [r5, #24]
    9c1e:	e7f1      	b.n	9c04 <notify_connected+0x8>
}
    9c20:	bd38      	pop	{r3, r4, r5, pc}
    9c22:	bf00      	nop
    9c24:	20001388 	.word	0x20001388

00009c28 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    9c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    9c2c:	694d      	ldr	r5, [r1, #20]
{
    9c2e:	4604      	mov	r4, r0
    9c30:	460e      	mov	r6, r1
    9c32:	4691      	mov	r9, r2
    9c34:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    9c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9c3a:	4845      	ldr	r0, [pc, #276]	; (9d50 <send_frag+0x128>)
    9c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9c40:	f015 f8ca 	bl	1edd8 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    9c44:	7b63      	ldrb	r3, [r4, #13]
    9c46:	2b07      	cmp	r3, #7
    9c48:	d151      	bne.n	9cee <send_frag+0xc6>
	__asm__ volatile(
    9c4a:	f04f 0320 	mov.w	r3, #32
    9c4e:	f3ef 8211 	mrs	r2, BASEPRI
    9c52:	f383 8811 	msr	BASEPRI, r3
    9c56:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    9c5a:	2d00      	cmp	r5, #0
    9c5c:	d059      	beq.n	9d12 <send_frag+0xea>
	parent->next = child;
    9c5e:	2300      	movs	r3, #0
    9c60:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    9c62:	69a3      	ldr	r3, [r4, #24]
    9c64:	2b00      	cmp	r3, #0
    9c66:	d151      	bne.n	9d0c <send_frag+0xe4>
	list->head = node;
    9c68:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    9c6c:	f382 8811 	msr	BASEPRI, r2
    9c70:	f3bf 8f6f 	isb	sy
	hdr = net_buf_push(buf, sizeof(*hdr));
    9c74:	2104      	movs	r1, #4
    9c76:	f106 0008 	add.w	r0, r6, #8
    9c7a:	f01a f9fe 	bl	2407a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    9c7e:	8823      	ldrh	r3, [r4, #0]
    9c80:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
    9c84:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    9c88:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    9c8a:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    9c8e:	3b04      	subs	r3, #4
    9c90:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    9c92:	2302      	movs	r3, #2
    9c94:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    9c96:	4630      	mov	r0, r6
    9c98:	f018 f855 	bl	21d46 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    9c9c:	4601      	mov	r1, r0
    9c9e:	2800      	cmp	r0, #0
    9ca0:	d053      	beq.n	9d4a <send_frag+0x122>
    9ca2:	4b2c      	ldr	r3, [pc, #176]	; (9d54 <send_frag+0x12c>)
    9ca4:	4a2c      	ldr	r2, [pc, #176]	; (9d58 <send_frag+0x130>)
		BT_ERR("Unable to send to driver (err %d)", err);
    9ca6:	482d      	ldr	r0, [pc, #180]	; (9d5c <send_frag+0x134>)
    9ca8:	1ad2      	subs	r2, r2, r3
    9caa:	08d2      	lsrs	r2, r2, #3
    9cac:	0192      	lsls	r2, r2, #6
    9cae:	f042 0201 	orr.w	r2, r2, #1
    9cb2:	f016 f8f1 	bl	1fe98 <log_1>
	__asm__ volatile(
    9cb6:	f04f 0320 	mov.w	r3, #32
    9cba:	f3ef 8111 	mrs	r1, BASEPRI
    9cbe:	f383 8811 	msr	BASEPRI, r3
    9cc2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    9cc6:	2d00      	cmp	r5, #0
    9cc8:	d039      	beq.n	9d3e <send_frag+0x116>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9cca:	6963      	ldr	r3, [r4, #20]
    9ccc:	2200      	movs	r2, #0
    9cce:	b153      	cbz	r3, 9ce6 <send_frag+0xbe>
    9cd0:	429d      	cmp	r5, r3
    9cd2:	d131      	bne.n	9d38 <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
    9cd4:	682b      	ldr	r3, [r5, #0]
    9cd6:	bb4a      	cbnz	r2, 9d2c <send_frag+0x104>
    9cd8:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    9cda:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    9cdc:	4295      	cmp	r5, r2
    9cde:	d100      	bne.n	9ce2 <send_frag+0xba>
	list->tail = node;
    9ce0:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    9ce2:	2300      	movs	r3, #0
    9ce4:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    9ce6:	f381 8811 	msr	BASEPRI, r1
    9cea:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    9cee:	4818      	ldr	r0, [pc, #96]	; (9d50 <send_frag+0x128>)
    9cf0:	f015 f84c 	bl	1ed8c <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    9cf4:	b115      	cbz	r5, 9cfc <send_frag+0xd4>
		tx_free(tx);
    9cf6:	4628      	mov	r0, r5
    9cf8:	f7ff ff76 	bl	9be8 <tx_free>
	}

	if (always_consume) {
    9cfc:	b11f      	cbz	r7, 9d06 <send_frag+0xde>
		net_buf_unref(buf);
    9cfe:	4630      	mov	r0, r6
    9d00:	f013 fa0c 	bl	1d11c <net_buf_unref>
	}
	return false;
    9d04:	2700      	movs	r7, #0
}
    9d06:	4638      	mov	r0, r7
    9d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9d0c:	601d      	str	r5, [r3, #0]
	list->tail = node;
    9d0e:	61a5      	str	r5, [r4, #24]
}
    9d10:	e7ac      	b.n	9c6c <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    9d12:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    9d14:	b133      	cbz	r3, 9d24 <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
    9d16:	f103 080c 	add.w	r8, r3, #12
    9d1a:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    9d1c:	3301      	adds	r3, #1
    9d1e:	f8c8 3000 	str.w	r3, [r8]
    9d22:	e7a3      	b.n	9c6c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    9d24:	69e3      	ldr	r3, [r4, #28]
    9d26:	f104 081c 	add.w	r8, r4, #28
    9d2a:	e7f7      	b.n	9d1c <send_frag+0xf4>
	parent->next = child;
    9d2c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    9d2e:	69a3      	ldr	r3, [r4, #24]
    9d30:	429d      	cmp	r5, r3
	list->tail = node;
    9d32:	bf08      	it	eq
    9d34:	61a2      	streq	r2, [r4, #24]
}
    9d36:	e7d4      	b.n	9ce2 <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9d38:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9d3a:	681b      	ldr	r3, [r3, #0]
    9d3c:	e7c7      	b.n	9cce <send_frag+0xa6>
			(*pending_no_cb)--;
    9d3e:	f8d8 3000 	ldr.w	r3, [r8]
    9d42:	3b01      	subs	r3, #1
    9d44:	f8c8 3000 	str.w	r3, [r8]
    9d48:	e7cd      	b.n	9ce6 <send_frag+0xbe>
	return true;
    9d4a:	2701      	movs	r7, #1
    9d4c:	e7db      	b.n	9d06 <send_frag+0xde>
    9d4e:	bf00      	nop
    9d50:	200000c8 	.word	0x200000c8
    9d54:	00024fd8 	.word	0x00024fd8
    9d58:	00024fe8 	.word	0x00024fe8
    9d5c:	000277a0 	.word	0x000277a0

00009d60 <bt_conn_get_pkts>:
}
    9d60:	4800      	ldr	r0, [pc, #0]	; (9d64 <bt_conn_get_pkts+0x4>)
    9d62:	4770      	bx	lr
    9d64:	200000c8 	.word	0x200000c8

00009d68 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    9d68:	1d03      	adds	r3, r0, #4
{
    9d6a:	b570      	push	{r4, r5, r6, lr}
    9d6c:	4604      	mov	r4, r0
    9d6e:	4618      	mov	r0, r3
    9d70:	f018 f866 	bl	21e40 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    9d74:	0582      	lsls	r2, r0, #22
    9d76:	d519      	bpl.n	9dac <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    9d78:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    9d7c:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    9d80:	4291      	cmp	r1, r2
    9d82:	d813      	bhi.n	9dac <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    9d84:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    9d88:	4291      	cmp	r1, r2
    9d8a:	d30f      	bcc.n	9dac <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    9d8c:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    9d90:	4291      	cmp	r1, r2
    9d92:	d10b      	bne.n	9dac <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9d94:	f3bf 8f5b 	dmb	ish
    9d98:	e853 2f00 	ldrex	r2, [r3]
    9d9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    9da0:	e843 2100 	strex	r1, r2, [r3]
    9da4:	2900      	cmp	r1, #0
    9da6:	d1f7      	bne.n	9d98 <notify_le_param_updated+0x30>
    9da8:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    9dac:	4b07      	ldr	r3, [pc, #28]	; (9dcc <notify_le_param_updated+0x64>)
    9dae:	681d      	ldr	r5, [r3, #0]
    9db0:	b905      	cbnz	r5, 9db4 <notify_le_param_updated+0x4c>
}
    9db2:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    9db4:	68ee      	ldr	r6, [r5, #12]
    9db6:	b13e      	cbz	r6, 9dc8 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    9db8:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    9dbc:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    9dc0:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    9dc4:	4620      	mov	r0, r4
    9dc6:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    9dc8:	69ad      	ldr	r5, [r5, #24]
    9dca:	e7f1      	b.n	9db0 <notify_le_param_updated+0x48>
    9dcc:	20001388 	.word	0x20001388

00009dd0 <le_param_req>:
{
    9dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9dd2:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    9dd4:	4608      	mov	r0, r1
{
    9dd6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    9dd8:	f017 ff85 	bl	21ce6 <bt_le_conn_params_valid>
    9ddc:	4604      	mov	r4, r0
    9dde:	b910      	cbnz	r0, 9de6 <le_param_req+0x16>
		return false;
    9de0:	2400      	movs	r4, #0
}
    9de2:	4620      	mov	r0, r4
    9de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    9de6:	4b09      	ldr	r3, [pc, #36]	; (9e0c <le_param_req+0x3c>)
    9de8:	681e      	ldr	r6, [r3, #0]
    9dea:	2e00      	cmp	r6, #0
    9dec:	d0f9      	beq.n	9de2 <le_param_req+0x12>
		if (!cb->le_param_req) {
    9dee:	68b3      	ldr	r3, [r6, #8]
    9df0:	b90b      	cbnz	r3, 9df6 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    9df2:	69b6      	ldr	r6, [r6, #24]
    9df4:	e7f9      	b.n	9dea <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    9df6:	4629      	mov	r1, r5
    9df8:	4638      	mov	r0, r7
    9dfa:	4798      	blx	r3
    9dfc:	2800      	cmp	r0, #0
    9dfe:	d0ef      	beq.n	9de0 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    9e00:	4628      	mov	r0, r5
    9e02:	f017 ff70 	bl	21ce6 <bt_le_conn_params_valid>
    9e06:	2800      	cmp	r0, #0
    9e08:	d1f3      	bne.n	9df2 <le_param_req+0x22>
    9e0a:	e7e9      	b.n	9de0 <le_param_req+0x10>
    9e0c:	20001388 	.word	0x20001388

00009e10 <bt_conn_identity_resolved>:
{
    9e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    9e12:	78c3      	ldrb	r3, [r0, #3]
{
    9e14:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    9e16:	b93b      	cbnz	r3, 9e28 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    9e18:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    9e1c:	4b08      	ldr	r3, [pc, #32]	; (9e40 <bt_conn_identity_resolved+0x30>)
    9e1e:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    9e20:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    9e24:	b91d      	cbnz	r5, 9e2e <bt_conn_identity_resolved+0x1e>
}
    9e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    9e28:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    9e2c:	e7f6      	b.n	9e1c <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    9e2e:	692b      	ldr	r3, [r5, #16]
    9e30:	b11b      	cbz	r3, 9e3a <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    9e32:	463a      	mov	r2, r7
    9e34:	4631      	mov	r1, r6
    9e36:	4620      	mov	r0, r4
    9e38:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    9e3a:	69ad      	ldr	r5, [r5, #24]
    9e3c:	e7f2      	b.n	9e24 <bt_conn_identity_resolved+0x14>
    9e3e:	bf00      	nop
    9e40:	20001388 	.word	0x20001388

00009e44 <bt_conn_security_changed>:
{
    9e44:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
    9e46:	7a43      	ldrb	r3, [r0, #9]
    9e48:	7283      	strb	r3, [r0, #10]
{
    9e4a:	4604      	mov	r4, r0
    9e4c:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
    9e4e:	f018 f9ad 	bl	221ac <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
    9e52:	4b06      	ldr	r3, [pc, #24]	; (9e6c <bt_conn_security_changed+0x28>)
    9e54:	681d      	ldr	r5, [r3, #0]
    9e56:	b905      	cbnz	r5, 9e5a <bt_conn_security_changed+0x16>
}
    9e58:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
    9e5a:	696b      	ldr	r3, [r5, #20]
    9e5c:	b11b      	cbz	r3, 9e66 <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
    9e5e:	7a61      	ldrb	r1, [r4, #9]
    9e60:	4632      	mov	r2, r6
    9e62:	4620      	mov	r0, r4
    9e64:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    9e66:	69ad      	ldr	r5, [r5, #24]
    9e68:	e7f5      	b.n	9e56 <bt_conn_security_changed+0x12>
    9e6a:	bf00      	nop
    9e6c:	20001388 	.word	0x20001388

00009e70 <bt_conn_cb_register>:
	cb->_next = callback_list;
    9e70:	4b02      	ldr	r3, [pc, #8]	; (9e7c <bt_conn_cb_register+0xc>)
    9e72:	681a      	ldr	r2, [r3, #0]
    9e74:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    9e76:	6018      	str	r0, [r3, #0]
}
    9e78:	4770      	bx	lr
    9e7a:	bf00      	nop
    9e7c:	20001388 	.word	0x20001388

00009e80 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    9e80:	b570      	push	{r4, r5, r6, lr}
    9e82:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    9e84:	f100 0634 	add.w	r6, r0, #52	; 0x34
    9e88:	2200      	movs	r2, #0
    9e8a:	2300      	movs	r3, #0
    9e8c:	4630      	mov	r0, r6
    9e8e:	f01a f87c 	bl	23f8a <net_buf_get>
    9e92:	4605      	mov	r5, r0
    9e94:	b958      	cbnz	r0, 9eae <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    9e96:	4620      	mov	r0, r4
    9e98:	f018 f894 	bl	21fc4 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9e9c:	f104 0158 	add.w	r1, r4, #88	; 0x58
    9ea0:	4807      	ldr	r0, [pc, #28]	; (9ec0 <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    9ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9ea6:	2200      	movs	r2, #0
    9ea8:	2300      	movs	r3, #0
    9eaa:	f015 b8b7 	b.w	1f01c <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    9eae:	6968      	ldr	r0, [r5, #20]
    9eb0:	b108      	cbz	r0, 9eb6 <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    9eb2:	f7ff fe99 	bl	9be8 <tx_free>
		net_buf_unref(buf);
    9eb6:	4628      	mov	r0, r5
    9eb8:	f013 f930 	bl	1d11c <net_buf_unref>
    9ebc:	e7e4      	b.n	9e88 <conn_cleanup+0x8>
    9ebe:	bf00      	nop
    9ec0:	200010e0 	.word	0x200010e0

00009ec4 <bt_conn_recv>:
{
    9ec4:	b570      	push	{r4, r5, r6, lr}
    9ec6:	4616      	mov	r6, r2
    9ec8:	4604      	mov	r4, r0
    9eca:	460d      	mov	r5, r1
	tx_notify(conn);
    9ecc:	f017 ffbe 	bl	21e4c <tx_notify>
	switch (flags) {
    9ed0:	2e01      	cmp	r6, #1
    9ed2:	d02e      	beq.n	9f32 <bt_conn_recv+0x6e>
    9ed4:	2e02      	cmp	r6, #2
    9ed6:	d15b      	bne.n	9f90 <bt_conn_recv+0xcc>
		if (conn->rx) {
    9ed8:	6923      	ldr	r3, [r4, #16]
    9eda:	b163      	cbz	r3, 9ef6 <bt_conn_recv+0x32>
    9edc:	4b37      	ldr	r3, [pc, #220]	; (9fbc <bt_conn_recv+0xf8>)
    9ede:	4938      	ldr	r1, [pc, #224]	; (9fc0 <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
    9ee0:	4838      	ldr	r0, [pc, #224]	; (9fc4 <bt_conn_recv+0x100>)
    9ee2:	1ac9      	subs	r1, r1, r3
    9ee4:	08c9      	lsrs	r1, r1, #3
    9ee6:	0189      	lsls	r1, r1, #6
    9ee8:	f041 0101 	orr.w	r1, r1, #1
    9eec:	f015 ffc7 	bl	1fe7e <log_0>
			bt_conn_reset_rx_state(conn);
    9ef0:	4620      	mov	r0, r4
    9ef2:	f018 f867 	bl	21fc4 <bt_conn_reset_rx_state>
		conn->rx = buf;
    9ef6:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    9ef8:	6923      	ldr	r3, [r4, #16]
    9efa:	8999      	ldrh	r1, [r3, #12]
    9efc:	2901      	cmp	r1, #1
    9efe:	d95b      	bls.n	9fb8 <bt_conn_recv+0xf4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    9f00:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    9f02:	7845      	ldrb	r5, [r0, #1]
    9f04:	7802      	ldrb	r2, [r0, #0]
    9f06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    9f0a:	3204      	adds	r2, #4
    9f0c:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    9f0e:	428a      	cmp	r2, r1
    9f10:	d852      	bhi.n	9fb8 <bt_conn_recv+0xf4>
	if (conn->rx->len > acl_total_len) {
    9f12:	d249      	bcs.n	9fa8 <bt_conn_recv+0xe4>
    9f14:	4829      	ldr	r0, [pc, #164]	; (9fbc <bt_conn_recv+0xf8>)
    9f16:	4b2a      	ldr	r3, [pc, #168]	; (9fc0 <bt_conn_recv+0xfc>)
    9f18:	1a1b      	subs	r3, r3, r0
    9f1a:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    9f1c:	019b      	lsls	r3, r3, #6
    9f1e:	482a      	ldr	r0, [pc, #168]	; (9fc8 <bt_conn_recv+0x104>)
    9f20:	f043 0301 	orr.w	r3, r3, #1
    9f24:	f015 ffcc 	bl	1fec0 <log_2>
		bt_conn_reset_rx_state(conn);
    9f28:	4620      	mov	r0, r4
}
    9f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    9f2e:	f018 b849 	b.w	21fc4 <bt_conn_reset_rx_state>
		if (!conn->rx) {
    9f32:	6920      	ldr	r0, [r4, #16]
    9f34:	b968      	cbnz	r0, 9f52 <bt_conn_recv+0x8e>
    9f36:	4922      	ldr	r1, [pc, #136]	; (9fc0 <bt_conn_recv+0xfc>)
    9f38:	4b20      	ldr	r3, [pc, #128]	; (9fbc <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
    9f3a:	4824      	ldr	r0, [pc, #144]	; (9fcc <bt_conn_recv+0x108>)
    9f3c:	1ac9      	subs	r1, r1, r3
    9f3e:	08c9      	lsrs	r1, r1, #3
    9f40:	0189      	lsls	r1, r1, #6
    9f42:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    9f46:	f015 ff9a 	bl	1fe7e <log_0>
			bt_conn_reset_rx_state(conn);
    9f4a:	4620      	mov	r0, r4
    9f4c:	f018 f83a 	bl	21fc4 <bt_conn_reset_rx_state>
    9f50:	e001      	b.n	9f56 <bt_conn_recv+0x92>
		if (!buf->len) {
    9f52:	89ae      	ldrh	r6, [r5, #12]
    9f54:	b926      	cbnz	r6, 9f60 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
    9f56:	4628      	mov	r0, r5
}
    9f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    9f5c:	f013 b8de 	b.w	1d11c <net_buf_unref>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    9f60:	3008      	adds	r0, #8
    9f62:	f01a f8b6 	bl	240d2 <net_buf_simple_tailroom>
    9f66:	4286      	cmp	r6, r0
    9f68:	d908      	bls.n	9f7c <bt_conn_recv+0xb8>
    9f6a:	4915      	ldr	r1, [pc, #84]	; (9fc0 <bt_conn_recv+0xfc>)
    9f6c:	4b13      	ldr	r3, [pc, #76]	; (9fbc <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
    9f6e:	4818      	ldr	r0, [pc, #96]	; (9fd0 <bt_conn_recv+0x10c>)
    9f70:	1ac9      	subs	r1, r1, r3
    9f72:	08c9      	lsrs	r1, r1, #3
    9f74:	0189      	lsls	r1, r1, #6
    9f76:	f041 0101 	orr.w	r1, r1, #1
    9f7a:	e7e4      	b.n	9f46 <bt_conn_recv+0x82>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    9f7c:	6920      	ldr	r0, [r4, #16]
    9f7e:	89aa      	ldrh	r2, [r5, #12]
    9f80:	68a9      	ldr	r1, [r5, #8]
    9f82:	3008      	adds	r0, #8
    9f84:	f01a f85e 	bl	24044 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    9f88:	4628      	mov	r0, r5
    9f8a:	f013 f8c7 	bl	1d11c <net_buf_unref>
		break;
    9f8e:	e7b3      	b.n	9ef8 <bt_conn_recv+0x34>
    9f90:	4a0a      	ldr	r2, [pc, #40]	; (9fbc <bt_conn_recv+0xf8>)
    9f92:	4b0b      	ldr	r3, [pc, #44]	; (9fc0 <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    9f94:	480f      	ldr	r0, [pc, #60]	; (9fd4 <bt_conn_recv+0x110>)
    9f96:	1a9b      	subs	r3, r3, r2
    9f98:	08db      	lsrs	r3, r3, #3
    9f9a:	019b      	lsls	r3, r3, #6
    9f9c:	f043 0201 	orr.w	r2, r3, #1
    9fa0:	4631      	mov	r1, r6
    9fa2:	f015 ff79 	bl	1fe98 <log_1>
		bt_conn_reset_rx_state(conn);
    9fa6:	e7d0      	b.n	9f4a <bt_conn_recv+0x86>
	conn->rx = NULL;
    9fa8:	2200      	movs	r2, #0
    9faa:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    9fac:	4620      	mov	r0, r4
    9fae:	4619      	mov	r1, r3
}
    9fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    9fb4:	f000 bed2 	b.w	ad5c <bt_l2cap_recv>
}
    9fb8:	bd70      	pop	{r4, r5, r6, pc}
    9fba:	bf00      	nop
    9fbc:	00024fd8 	.word	0x00024fd8
    9fc0:	00024fe8 	.word	0x00024fe8
    9fc4:	00027ee7 	.word	0x00027ee7
    9fc8:	00027f67 	.word	0x00027f67
    9fcc:	00027f04 	.word	0x00027f04
    9fd0:	00027f22 	.word	0x00027f22
    9fd4:	00027f49 	.word	0x00027f49

00009fd8 <bt_conn_send_cb>:
{
    9fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9fdc:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    9fde:	7b43      	ldrb	r3, [r0, #13]
    9fe0:	2b07      	cmp	r3, #7
{
    9fe2:	4606      	mov	r6, r0
    9fe4:	460d      	mov	r5, r1
    9fe6:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    9fe8:	d00f      	beq.n	a00a <bt_conn_send_cb+0x32>
    9fea:	4b2a      	ldr	r3, [pc, #168]	; (a094 <bt_conn_send_cb+0xbc>)
    9fec:	492a      	ldr	r1, [pc, #168]	; (a098 <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    9fee:	482b      	ldr	r0, [pc, #172]	; (a09c <bt_conn_send_cb+0xc4>)
    9ff0:	1ac9      	subs	r1, r1, r3
    9ff2:	08c9      	lsrs	r1, r1, #3
    9ff4:	0189      	lsls	r1, r1, #6
    9ff6:	f041 0101 	orr.w	r1, r1, #1
    9ffa:	f015 ff40 	bl	1fe7e <log_0>
		net_buf_unref(buf);
    9ffe:	4628      	mov	r0, r5
    a000:	f013 f88c 	bl	1d11c <net_buf_unref>
			return -ENOTCONN;
    a004:	f06f 0038 	mvn.w	r0, #56	; 0x38
    a008:	e020      	b.n	a04c <bt_conn_send_cb+0x74>
	if (cb) {
    a00a:	2a00      	cmp	r2, #0
    a00c:	d040      	beq.n	a090 <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    a00e:	f014 feb7 	bl	1ed80 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    a012:	4b23      	ldr	r3, [pc, #140]	; (a0a0 <bt_conn_send_cb+0xc8>)
    a014:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    a016:	4823      	ldr	r0, [pc, #140]	; (a0a4 <bt_conn_send_cb+0xcc>)
    a018:	bf07      	ittee	eq
    a01a:	2200      	moveq	r2, #0
    a01c:	2300      	moveq	r3, #0
    a01e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    a022:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    a026:	f014 faf3 	bl	1e610 <z_impl_k_queue_get>
    a02a:	4604      	mov	r4, r0
		if (!tx) {
    a02c:	b980      	cbnz	r0, a050 <bt_conn_send_cb+0x78>
    a02e:	4b19      	ldr	r3, [pc, #100]	; (a094 <bt_conn_send_cb+0xbc>)
    a030:	4919      	ldr	r1, [pc, #100]	; (a098 <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    a032:	481d      	ldr	r0, [pc, #116]	; (a0a8 <bt_conn_send_cb+0xd0>)
    a034:	1ac9      	subs	r1, r1, r3
    a036:	08c9      	lsrs	r1, r1, #3
    a038:	0189      	lsls	r1, r1, #6
    a03a:	f041 0101 	orr.w	r1, r1, #1
    a03e:	f015 ff1e 	bl	1fe7e <log_0>
			net_buf_unref(buf);
    a042:	4628      	mov	r0, r5
    a044:	f013 f86a 	bl	1d11c <net_buf_unref>
			return -ENOBUFS;
    a048:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    a04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    a050:	7b73      	ldrb	r3, [r6, #13]
    a052:	2b07      	cmp	r3, #7
    a054:	d010      	beq.n	a078 <bt_conn_send_cb+0xa0>
    a056:	4b0f      	ldr	r3, [pc, #60]	; (a094 <bt_conn_send_cb+0xbc>)
    a058:	490f      	ldr	r1, [pc, #60]	; (a098 <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    a05a:	4814      	ldr	r0, [pc, #80]	; (a0ac <bt_conn_send_cb+0xd4>)
    a05c:	1ac9      	subs	r1, r1, r3
    a05e:	08c9      	lsrs	r1, r1, #3
    a060:	0189      	lsls	r1, r1, #6
    a062:	f041 0102 	orr.w	r1, r1, #2
    a066:	f015 ff0a 	bl	1fe7e <log_0>
			net_buf_unref(buf);
    a06a:	4628      	mov	r0, r5
    a06c:	f013 f856 	bl	1d11c <net_buf_unref>
			tx_free(tx);
    a070:	4620      	mov	r0, r4
    a072:	f7ff fdb9 	bl	9be8 <tx_free>
    a076:	e7c5      	b.n	a004 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    a078:	2300      	movs	r3, #0
		tx->user_data = user_data;
    a07a:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    a07e:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    a080:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    a082:	f106 0034 	add.w	r0, r6, #52	; 0x34
    a086:	4629      	mov	r1, r5
    a088:	f019 ffa3 	bl	23fd2 <net_buf_put>
	return 0;
    a08c:	2000      	movs	r0, #0
    a08e:	e7dd      	b.n	a04c <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    a090:	614a      	str	r2, [r1, #20]
    a092:	e7f6      	b.n	a082 <bt_conn_send_cb+0xaa>
    a094:	00024fd8 	.word	0x00024fd8
    a098:	00024fe8 	.word	0x00024fe8
    a09c:	00027f82 	.word	0x00027f82
    a0a0:	200010f8 	.word	0x200010f8
    a0a4:	200007b4 	.word	0x200007b4
    a0a8:	00027f91 	.word	0x00027f91
    a0ac:	00027faf 	.word	0x00027faf

0000a0b0 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    a0b0:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    a0b2:	4b1b      	ldr	r3, [pc, #108]	; (a120 <bt_conn_prepare_events+0x70>)
    a0b4:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a0b6:	2101      	movs	r1, #1
{
    a0b8:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
    a0ba:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a0bc:	f01a fe2f 	bl	24d1e <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
    a0c0:	4b18      	ldr	r3, [pc, #96]	; (a124 <bt_conn_prepare_events+0x74>)
    a0c2:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
    a0c6:	f017 febb 	bl	21e40 <atomic_get>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    a0ca:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
    a0ce:	4619      	mov	r1, r3
    a0d0:	b908      	cbnz	r0, a0d6 <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
    a0d2:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    a0d4:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    a0d6:	7b5a      	ldrb	r2, [r3, #13]
    a0d8:	b99a      	cbnz	r2, a102 <bt_conn_prepare_events+0x52>
    a0da:	f3bf 8f5b 	dmb	ish
    a0de:	1d1a      	adds	r2, r3, #4
    a0e0:	e852 0f00 	ldrex	r0, [r2]
    a0e4:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
    a0e8:	e842 ce00 	strex	lr, ip, [r2]
    a0ec:	f1be 0f00 	cmp.w	lr, #0
    a0f0:	d1f6      	bne.n	a0e0 <bt_conn_prepare_events+0x30>
    a0f2:	f3bf 8f5b 	dmb	ish
    a0f6:	0642      	lsls	r2, r0, #25
    a0f8:	d503      	bpl.n	a102 <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
    a0fa:	4618      	mov	r0, r3
    a0fc:	f7ff fec0 	bl	9e80 <conn_cleanup>
    a100:	e7e7      	b.n	a0d2 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
    a102:	7b4b      	ldrb	r3, [r1, #13]
    a104:	2b07      	cmp	r3, #7
    a106:	d1e4      	bne.n	a0d2 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
    a108:	4b07      	ldr	r3, [pc, #28]	; (a128 <bt_conn_prepare_events+0x78>)
    a10a:	4628      	mov	r0, r5
    a10c:	2200      	movs	r2, #0
    a10e:	2104      	movs	r1, #4
    a110:	f01a fe05 	bl	24d1e <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    a114:	2301      	movs	r3, #1
    a116:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    a11a:	2002      	movs	r0, #2
	return ev_count;
    a11c:	e7da      	b.n	a0d4 <bt_conn_prepare_events+0x24>
    a11e:	bf00      	nop
    a120:	200001b4 	.word	0x200001b4
    a124:	20000aa8 	.word	0x20000aa8
    a128:	20000adc 	.word	0x20000adc

0000a12c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    a12c:	b570      	push	{r4, r5, r6, lr}
    a12e:	4606      	mov	r6, r0
    a130:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    a132:	4811      	ldr	r0, [pc, #68]	; (a178 <bt_conn_add_le+0x4c>)
    a134:	2101      	movs	r1, #1
    a136:	f017 feaf 	bl	21e98 <bt_conn_new>
	if (!conn) {
    a13a:	4604      	mov	r4, r0
    a13c:	b1c8      	cbz	r0, a172 <bt_conn_add_le+0x46>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    a13e:	2230      	movs	r2, #48	; 0x30
    a140:	2100      	movs	r1, #0
    a142:	3058      	adds	r0, #88	; 0x58
    a144:	f017 fb7a 	bl	2183c <memset>
    a148:	4b0c      	ldr	r3, [pc, #48]	; (a17c <bt_conn_add_le+0x50>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    a14a:	4a0d      	ldr	r2, [pc, #52]	; (a180 <bt_conn_add_le+0x54>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    a14c:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    a14e:	2300      	movs	r3, #0
    a150:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    a154:	62a3      	str	r3, [r4, #40]	; 0x28

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    a156:	7226      	strb	r6, [r4, #8]
	memcpy(dst, src, sizeof(*dst));
    a158:	2207      	movs	r2, #7
    a15a:	4629      	mov	r1, r5
    a15c:	f104 0088 	add.w	r0, r4, #136	; 0x88
    a160:	f017 fb41 	bl	217e6 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    a164:	2301      	movs	r3, #1
    a166:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    a168:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    a16a:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    a16c:	4b05      	ldr	r3, [pc, #20]	; (a184 <bt_conn_add_le+0x58>)
    a16e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    a172:	4620      	mov	r0, r4
    a174:	bd70      	pop	{r4, r5, r6, pc}
    a176:	bf00      	nop
    a178:	20000aa8 	.word	0x20000aa8
    a17c:	0000a7b5 	.word	0x0000a7b5
    a180:	00021e93 	.word	0x00021e93
    a184:	00280018 	.word	0x00280018

0000a188 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    a188:	4602      	mov	r2, r0
    a18a:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    a18c:	2101      	movs	r1, #1
    a18e:	4803      	ldr	r0, [pc, #12]	; (a19c <bt_conn_lookup_handle+0x14>)
    a190:	f017 ff71 	bl	22076 <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
    a194:	2800      	cmp	r0, #0
    a196:	bf38      	it	cc
    a198:	2000      	movcc	r0, #0
    a19a:	bd08      	pop	{r3, pc}
    a19c:	20000aa8 	.word	0x20000aa8

0000a1a0 <bt_conn_set_state>:
{
    a1a0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    a1a2:	7b46      	ldrb	r6, [r0, #13]
    a1a4:	428e      	cmp	r6, r1
{
    a1a6:	4604      	mov	r4, r0
    a1a8:	460d      	mov	r5, r1
	if (conn->state == state) {
    a1aa:	d112      	bne.n	a1d2 <bt_conn_set_state+0x32>
    a1ac:	4b73      	ldr	r3, [pc, #460]	; (a37c <bt_conn_set_state+0x1dc>)
    a1ae:	4a74      	ldr	r2, [pc, #464]	; (a380 <bt_conn_set_state+0x1e0>)
		BT_WARN("no transition %s", state2str(state));
    a1b0:	4874      	ldr	r0, [pc, #464]	; (a384 <bt_conn_set_state+0x1e4>)
    a1b2:	2e08      	cmp	r6, #8
    a1b4:	eba2 0203 	sub.w	r2, r2, r3
    a1b8:	bf96      	itet	ls
    a1ba:	4b73      	ldrls	r3, [pc, #460]	; (a388 <bt_conn_set_state+0x1e8>)
    a1bc:	4973      	ldrhi	r1, [pc, #460]	; (a38c <bt_conn_set_state+0x1ec>)
    a1be:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    a1c2:	08d2      	lsrs	r2, r2, #3
    a1c4:	0192      	lsls	r2, r2, #6
    a1c6:	f042 0202 	orr.w	r2, r2, #2
}
    a1ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    a1ce:	f015 be63 	b.w	1fe98 <log_1>
	conn->state = state;
    a1d2:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    a1d4:	b166      	cbz	r6, a1f0 <bt_conn_set_state+0x50>
    a1d6:	2e06      	cmp	r6, #6
    a1d8:	d00d      	beq.n	a1f6 <bt_conn_set_state+0x56>
	switch (conn->state) {
    a1da:	7b63      	ldrb	r3, [r4, #13]
    a1dc:	2b08      	cmp	r3, #8
    a1de:	f200 80c1 	bhi.w	a364 <bt_conn_set_state+0x1c4>
    a1e2:	e8df f003 	tbb	[pc, r3]
    a1e6:	0f4a      	.short	0x0f4a
    a1e8:	c9c9c9c9 	.word	0xc9c9c9c9
    a1ec:	2797      	.short	0x2797
    a1ee:	c9          	.byte	0xc9
    a1ef:	00          	.byte	0x00
		bt_conn_ref(conn);
    a1f0:	f017 ff11 	bl	22016 <bt_conn_ref>
		break;
    a1f4:	e7f1      	b.n	a1da <bt_conn_set_state+0x3a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a1f6:	7883      	ldrb	r3, [r0, #2]
    a1f8:	2b01      	cmp	r3, #1
    a1fa:	d1ee      	bne.n	a1da <bt_conn_set_state+0x3a>
			k_delayed_work_cancel(&conn->deferred_work);
    a1fc:	3058      	adds	r0, #88	; 0x58
    a1fe:	f01a fba7 	bl	24950 <k_delayed_work_cancel>
    a202:	e7ea      	b.n	a1da <bt_conn_set_state+0x3a>
	z_impl_k_sem_give(sem);
    a204:	4d62      	ldr	r5, [pc, #392]	; (a390 <bt_conn_set_state+0x1f0>)
		tx->pending_no_cb = 0U;
    a206:	2600      	movs	r6, #0
	__asm__ volatile(
    a208:	f04f 0320 	mov.w	r3, #32
    a20c:	f3ef 8211 	mrs	r2, BASEPRI
    a210:	f383 8811 	msr	BASEPRI, r3
    a214:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    a218:	69e3      	ldr	r3, [r4, #28]
    a21a:	2b00      	cmp	r3, #0
    a21c:	f000 8083 	beq.w	a326 <bt_conn_set_state+0x186>
			conn->pending_no_cb--;
    a220:	3b01      	subs	r3, #1
    a222:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    a224:	f382 8811 	msr	BASEPRI, r2
    a228:	f3bf 8f6f 	isb	sy
    a22c:	4628      	mov	r0, r5
    a22e:	f014 fdad 	bl	1ed8c <z_impl_k_sem_give>
}
    a232:	e7e9      	b.n	a208 <bt_conn_set_state+0x68>
		if (conn->type == BT_CONN_TYPE_SCO) {
    a234:	78a3      	ldrb	r3, [r4, #2]
    a236:	2b04      	cmp	r3, #4
    a238:	f000 809e 	beq.w	a378 <bt_conn_set_state+0x1d8>
	z_impl_k_queue_init(queue);
    a23c:	f104 0034 	add.w	r0, r4, #52	; 0x34
    a240:	f01a f9ac 	bl	2459c <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    a244:	2100      	movs	r1, #0
    a246:	4853      	ldr	r0, [pc, #332]	; (a394 <bt_conn_set_state+0x1f4>)
    a248:	f015 f98a 	bl	1f560 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    a24c:	2300      	movs	r3, #0
	list->tail = NULL;
    a24e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		bt_l2cap_connected(conn);
    a252:	4620      	mov	r0, r4
    a254:	f000 fc72 	bl	ab3c <bt_l2cap_connected>
		notify_connected(conn);
    a258:	4620      	mov	r0, r4
    a25a:	f7ff fccf 	bl	9bfc <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a25e:	78e3      	ldrb	r3, [r4, #3]
    a260:	2b01      	cmp	r3, #1
    a262:	f040 8089 	bne.w	a378 <bt_conn_set_state+0x1d8>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a266:	f241 3288 	movw	r2, #5000	; 0x1388
    a26a:	2300      	movs	r3, #0
    a26c:	f104 0158 	add.w	r1, r4, #88	; 0x58
    a270:	4849      	ldr	r0, [pc, #292]	; (a398 <bt_conn_set_state+0x1f8>)
}
    a272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a276:	f014 bed1 	b.w	1f01c <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
    a27a:	78a3      	ldrb	r3, [r4, #2]
    a27c:	2b04      	cmp	r3, #4
    a27e:	d104      	bne.n	a28a <bt_conn_set_state+0xea>
			bt_conn_unref(conn);
    a280:	4620      	mov	r0, r4
}
    a282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    a286:	f017 bee1 	b.w	2204c <bt_conn_unref>
		switch (old_state) {
    a28a:	2e08      	cmp	r6, #8
    a28c:	d874      	bhi.n	a378 <bt_conn_set_state+0x1d8>
    a28e:	a301      	add	r3, pc, #4	; (adr r3, a294 <bt_conn_set_state+0xf4>)
    a290:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    a294:	0000a301 	.word	0x0000a301
    a298:	0000a2b9 	.word	0x0000a2b9
    a29c:	0000a2f3 	.word	0x0000a2f3
    a2a0:	0000a281 	.word	0x0000a281
    a2a4:	0000a281 	.word	0x0000a281
    a2a8:	0000a2f3 	.word	0x0000a2f3
    a2ac:	0000a2f3 	.word	0x0000a2f3
    a2b0:	0000a301 	.word	0x0000a301
    a2b4:	0000a301 	.word	0x0000a301
			tx_notify(conn);
    a2b8:	4620      	mov	r0, r4
    a2ba:	f017 fdc7 	bl	21e4c <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    a2be:	78a3      	ldrb	r3, [r4, #2]
    a2c0:	2b01      	cmp	r3, #1
    a2c2:	d103      	bne.n	a2cc <bt_conn_set_state+0x12c>
				k_delayed_work_cancel(&conn->deferred_work);
    a2c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
    a2c8:	f01a fb42 	bl	24950 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a2cc:	f3bf 8f5b 	dmb	ish
    a2d0:	3404      	adds	r4, #4
    a2d2:	e854 3f00 	ldrex	r3, [r4]
    a2d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a2da:	e844 3200 	strex	r2, r3, [r4]
    a2de:	2a00      	cmp	r2, #0
    a2e0:	d1f7      	bne.n	a2d2 <bt_conn_set_state+0x132>
    a2e2:	f3bf 8f5b 	dmb	ish
    a2e6:	482b      	ldr	r0, [pc, #172]	; (a394 <bt_conn_set_state+0x1f4>)
}
    a2e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a2ec:	2100      	movs	r1, #0
    a2ee:	f015 b937 	b.w	1f560 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    a2f2:	7b23      	ldrb	r3, [r4, #12]
    a2f4:	2b00      	cmp	r3, #0
    a2f6:	d0c3      	beq.n	a280 <bt_conn_set_state+0xe0>
				notify_connected(conn);
    a2f8:	4620      	mov	r0, r4
    a2fa:	f7ff fc7f 	bl	9bfc <notify_connected>
    a2fe:	e7bf      	b.n	a280 <bt_conn_set_state+0xe0>
    a300:	4a1f      	ldr	r2, [pc, #124]	; (a380 <bt_conn_set_state+0x1e0>)
    a302:	4b1e      	ldr	r3, [pc, #120]	; (a37c <bt_conn_set_state+0x1dc>)
			BT_WARN("Invalid (%u) old state", state);
    a304:	4825      	ldr	r0, [pc, #148]	; (a39c <bt_conn_set_state+0x1fc>)
    a306:	1ad2      	subs	r2, r2, r3
    a308:	08d2      	lsrs	r2, r2, #3
    a30a:	0192      	lsls	r2, r2, #6
    a30c:	f042 0202 	orr.w	r2, r2, #2
    a310:	4629      	mov	r1, r5
    a312:	e75a      	b.n	a1ca <bt_conn_set_state+0x2a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a314:	78a3      	ldrb	r3, [r4, #2]
    a316:	2b01      	cmp	r3, #1
    a318:	d12e      	bne.n	a378 <bt_conn_set_state+0x1d8>
				K_MSEC(10 * bt_dev.create_param.timeout));
    a31a:	4b21      	ldr	r3, [pc, #132]	; (a3a0 <bt_conn_set_state+0x200>)
    a31c:	8a9b      	ldrh	r3, [r3, #20]
    a31e:	220a      	movs	r2, #10
    a320:	435a      	muls	r2, r3
    a322:	17d3      	asrs	r3, r2, #31
    a324:	e7a2      	b.n	a26c <bt_conn_set_state+0xcc>
Z_GENLIST_IS_EMPTY(slist)
    a326:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    a328:	b128      	cbz	r0, a336 <bt_conn_set_state+0x196>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a32a:	69a1      	ldr	r1, [r4, #24]
    a32c:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    a32e:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a330:	4288      	cmp	r0, r1
	list->tail = node;
    a332:	bf08      	it	eq
    a334:	61a3      	streq	r3, [r4, #24]
    a336:	f382 8811 	msr	BASEPRI, r2
    a33a:	f3bf 8f6f 	isb	sy
		if (!node) {
    a33e:	b1d8      	cbz	r0, a378 <bt_conn_set_state+0x1d8>
	__asm__ volatile(
    a340:	f04f 0220 	mov.w	r2, #32
    a344:	f3ef 8311 	mrs	r3, BASEPRI
    a348:	f382 8811 	msr	BASEPRI, r2
    a34c:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    a350:	68c2      	ldr	r2, [r0, #12]
    a352:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    a354:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    a356:	f383 8811 	msr	BASEPRI, r3
    a35a:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    a35e:	f7ff fc43 	bl	9be8 <tx_free>
    a362:	e763      	b.n	a22c <bt_conn_set_state+0x8c>
    a364:	4a06      	ldr	r2, [pc, #24]	; (a380 <bt_conn_set_state+0x1e0>)
    a366:	4b05      	ldr	r3, [pc, #20]	; (a37c <bt_conn_set_state+0x1dc>)
		BT_WARN("no valid (%u) state was set", state);
    a368:	480e      	ldr	r0, [pc, #56]	; (a3a4 <bt_conn_set_state+0x204>)
    a36a:	1ad2      	subs	r2, r2, r3
    a36c:	08d2      	lsrs	r2, r2, #3
    a36e:	0192      	lsls	r2, r2, #6
    a370:	f042 0202 	orr.w	r2, r2, #2
    a374:	4629      	mov	r1, r5
    a376:	e728      	b.n	a1ca <bt_conn_set_state+0x2a>
}
    a378:	bd70      	pop	{r4, r5, r6, pc}
    a37a:	bf00      	nop
    a37c:	00024fd8 	.word	0x00024fd8
    a380:	00024fe8 	.word	0x00024fe8
    a384:	00027fdf 	.word	0x00027fdf
    a388:	00025630 	.word	0x00025630
    a38c:	00027fd5 	.word	0x00027fd5
    a390:	200000c8 	.word	0x200000c8
    a394:	200001b4 	.word	0x200001b4
    a398:	200010e0 	.word	0x200010e0
    a39c:	00027ff0 	.word	0x00027ff0
    a3a0:	20000000 	.word	0x20000000
    a3a4:	00028007 	.word	0x00028007

0000a3a8 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    a3a8:	b570      	push	{r4, r5, r6, lr}
    a3aa:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    a3ac:	480c      	ldr	r0, [pc, #48]	; (a3e0 <bt_conn_lookup_addr_le+0x38>)
{
    a3ae:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    a3b0:	f017 fe31 	bl	22016 <bt_conn_ref>

		if (!conn) {
    a3b4:	4604      	mov	r4, r0
    a3b6:	b128      	cbz	r0, a3c4 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    a3b8:	7883      	ldrb	r3, [r0, #2]
    a3ba:	2b01      	cmp	r3, #1
    a3bc:	d004      	beq.n	a3c8 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    a3be:	f017 fe45 	bl	2204c <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    a3c2:	2400      	movs	r4, #0
}
    a3c4:	4620      	mov	r0, r4
    a3c6:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    a3c8:	4629      	mov	r1, r5
    a3ca:	4632      	mov	r2, r6
    a3cc:	f017 fe03 	bl	21fd6 <bt_conn_is_peer_addr_le>
    a3d0:	4605      	mov	r5, r0
    a3d2:	2800      	cmp	r0, #0
    a3d4:	d1f6      	bne.n	a3c4 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    a3d6:	4620      	mov	r0, r4
    a3d8:	f017 fe38 	bl	2204c <bt_conn_unref>
	return NULL;
    a3dc:	462c      	mov	r4, r5
			continue;
    a3de:	e7f1      	b.n	a3c4 <bt_conn_lookup_addr_le+0x1c>
    a3e0:	20000aa8 	.word	0x20000aa8

0000a3e4 <bt_conn_exists_le>:
{
    a3e4:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    a3e6:	f7ff ffdf 	bl	a3a8 <bt_conn_lookup_addr_le>
	if (conn) {
    a3ea:	4604      	mov	r4, r0
    a3ec:	b1a0      	cbz	r0, a418 <bt_conn_exists_le+0x34>
    a3ee:	4b0b      	ldr	r3, [pc, #44]	; (a41c <bt_conn_exists_le+0x38>)
    a3f0:	4a0b      	ldr	r2, [pc, #44]	; (a420 <bt_conn_exists_le+0x3c>)
    a3f2:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    a3f4:	7b43      	ldrb	r3, [r0, #13]
    a3f6:	480b      	ldr	r0, [pc, #44]	; (a424 <bt_conn_exists_le+0x40>)
    a3f8:	2b08      	cmp	r3, #8
    a3fa:	bf96      	itet	ls
    a3fc:	490a      	ldrls	r1, [pc, #40]	; (a428 <bt_conn_exists_le+0x44>)
    a3fe:	490b      	ldrhi	r1, [pc, #44]	; (a42c <bt_conn_exists_le+0x48>)
    a400:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    a404:	08d2      	lsrs	r2, r2, #3
    a406:	0192      	lsls	r2, r2, #6
    a408:	f042 0202 	orr.w	r2, r2, #2
    a40c:	f015 fd44 	bl	1fe98 <log_1>
		bt_conn_unref(conn);
    a410:	4620      	mov	r0, r4
    a412:	f017 fe1b 	bl	2204c <bt_conn_unref>
		return true;
    a416:	2001      	movs	r0, #1
}
    a418:	bd10      	pop	{r4, pc}
    a41a:	bf00      	nop
    a41c:	00024fd8 	.word	0x00024fd8
    a420:	00024fe8 	.word	0x00024fe8
    a424:	00028023 	.word	0x00028023
    a428:	00025630 	.word	0x00025630
    a42c:	00027fd5 	.word	0x00027fd5

0000a430 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a432:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    a434:	480f      	ldr	r0, [pc, #60]	; (a474 <bt_conn_lookup_state_le+0x44>)
{
    a436:	460e      	mov	r6, r1
    a438:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    a43a:	f017 fdec 	bl	22016 <bt_conn_ref>

		if (!conn) {
    a43e:	4604      	mov	r4, r0
    a440:	b1b0      	cbz	r0, a470 <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    a442:	7883      	ldrb	r3, [r0, #2]
    a444:	2b01      	cmp	r3, #1
    a446:	d003      	beq.n	a450 <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
    a448:	f017 fde5 	bl	22016 <bt_conn_ref>
		}

		return conn;
	}

	return NULL;
    a44c:	2400      	movs	r4, #0
			continue;
    a44e:	e00f      	b.n	a470 <bt_conn_lookup_state_le+0x40>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    a450:	b146      	cbz	r6, a464 <bt_conn_lookup_state_le+0x34>
    a452:	4632      	mov	r2, r6
    a454:	4629      	mov	r1, r5
    a456:	f017 fdbe 	bl	21fd6 <bt_conn_is_peer_addr_le>
    a45a:	b918      	cbnz	r0, a464 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
    a45c:	4620      	mov	r0, r4
    a45e:	f017 fdf5 	bl	2204c <bt_conn_unref>
    a462:	e7f3      	b.n	a44c <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
    a464:	7b63      	ldrb	r3, [r4, #13]
    a466:	42bb      	cmp	r3, r7
    a468:	d1f8      	bne.n	a45c <bt_conn_lookup_state_le+0x2c>
    a46a:	7a23      	ldrb	r3, [r4, #8]
    a46c:	42ab      	cmp	r3, r5
    a46e:	d1f5      	bne.n	a45c <bt_conn_lookup_state_le+0x2c>
}
    a470:	4620      	mov	r0, r4
    a472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a474:	20000aa8 	.word	0x20000aa8

0000a478 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
    a478:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a47c:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a47e:	4851      	ldr	r0, [pc, #324]	; (a5c4 <bt_conn_le_create+0x14c>)
    a480:	460f      	mov	r7, r1
    a482:	4615      	mov	r5, r2
    a484:	461e      	mov	r6, r3
    a486:	f017 fcdb 	bl	21e40 <atomic_get>
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a48a:	0781      	lsls	r1, r0, #30
    a48c:	f140 8090 	bpl.w	a5b0 <bt_conn_le_create+0x138>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
    a490:	4610      	mov	r0, r2
    a492:	f017 fc28 	bl	21ce6 <bt_le_conn_params_valid>
    a496:	b928      	cbnz	r0, a4a4 <bt_conn_le_create+0x2c>
		return -EINVAL;
    a498:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
    a49c:	4628      	mov	r0, r5
    a49e:	b002      	add	sp, #8
    a4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4a4:	4847      	ldr	r0, [pc, #284]	; (a5c4 <bt_conn_le_create+0x14c>)
    a4a6:	f017 fccb 	bl	21e40 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    a4aa:	0642      	lsls	r2, r0, #25
    a4ac:	d4f4      	bmi.n	a498 <bt_conn_le_create+0x20>
    a4ae:	4845      	ldr	r0, [pc, #276]	; (a5c4 <bt_conn_le_create+0x14c>)
    a4b0:	f017 fcc6 	bl	21e40 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
    a4b4:	0503      	lsls	r3, r0, #20
    a4b6:	f3c0 28c0 	ubfx	r8, r0, #11, #1
    a4ba:	d47c      	bmi.n	a5b6 <bt_conn_le_create+0x13e>
	if (!bt_le_scan_random_addr_check()) {
    a4bc:	f7fe f8ca 	bl	8654 <bt_le_scan_random_addr_check>
    a4c0:	2800      	cmp	r0, #0
    a4c2:	d0e9      	beq.n	a498 <bt_conn_le_create+0x20>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
    a4c4:	4621      	mov	r1, r4
    a4c6:	4640      	mov	r0, r8
    a4c8:	f7ff ff8c 	bl	a3e4 <bt_conn_exists_le>
    a4cc:	2800      	cmp	r0, #0
    a4ce:	d1e3      	bne.n	a498 <bt_conn_le_create+0x20>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
    a4d0:	7823      	ldrb	r3, [r4, #0]
    a4d2:	3b02      	subs	r3, #2
    a4d4:	2b01      	cmp	r3, #1
    a4d6:	d84a      	bhi.n	a56e <bt_conn_le_create+0xf6>
    a4d8:	2207      	movs	r2, #7
    a4da:	4621      	mov	r1, r4
    a4dc:	4668      	mov	r0, sp
    a4de:	f017 f982 	bl	217e6 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
    a4e2:	f89d 3000 	ldrb.w	r3, [sp]
    a4e6:	3b02      	subs	r3, #2
    a4e8:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
    a4ec:	4669      	mov	r1, sp
    a4ee:	2000      	movs	r0, #0
    a4f0:	f7ff fe1c 	bl	a12c <bt_conn_add_le>
	if (!conn) {
    a4f4:	4604      	mov	r4, r0
    a4f6:	2800      	cmp	r0, #0
    a4f8:	d060      	beq.n	a5bc <bt_conn_le_create+0x144>
	conn->le.interval_min = param->interval_min;
    a4fa:	882b      	ldrh	r3, [r5, #0]
    a4fc:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    a500:	886b      	ldrh	r3, [r5, #2]
    a502:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
    a506:	88ab      	ldrh	r3, [r5, #4]
    a508:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    a50c:	88eb      	ldrh	r3, [r5, #6]
    a50e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
    a512:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    a516:	4d2c      	ldr	r5, [pc, #176]	; (a5c8 <bt_conn_le_create+0x150>)
    a518:	f105 0c08 	add.w	ip, r5, #8
    a51c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
    a520:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
    a522:	2b00      	cmp	r3, #0
    a524:	bf08      	it	eq
    a526:	f44f 7396 	moveq.w	r3, #300	; 0x12c
    a52a:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
    a52c:	8a2b      	ldrh	r3, [r5, #16]
    a52e:	462a      	mov	r2, r5
	bt_dev.create_param.interval_coded =
    a530:	b903      	cbnz	r3, a534 <bt_conn_le_create+0xbc>
    a532:	89ab      	ldrh	r3, [r5, #12]
    a534:	8213      	strh	r3, [r2, #16]
		(bt_dev.create_param.window_coded != 0) ?
    a536:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
    a538:	b903      	cbnz	r3, a53c <bt_conn_le_create+0xc4>
    a53a:	89d3      	ldrh	r3, [r2, #14]
    a53c:	8253      	strh	r3, [r2, #18]
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    a53e:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
    a542:	b11b      	cbz	r3, a54c <bt_conn_le_create+0xd4>
    a544:	f892 20e1 	ldrb.w	r2, [r2, #225]	; 0xe1
    a548:	429a      	cmp	r2, r3
    a54a:	d919      	bls.n	a580 <bt_conn_le_create+0x108>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    a54c:	2102      	movs	r1, #2
    a54e:	4620      	mov	r0, r4
    a550:	f7ff fe26 	bl	a1a0 <bt_conn_set_state>
		err = bt_le_scan_update(true);
    a554:	2001      	movs	r0, #1
    a556:	f7fe fb79 	bl	8c4c <bt_le_scan_update>
		if (err) {
    a55a:	4605      	mov	r5, r0
    a55c:	b330      	cbz	r0, a5ac <bt_conn_le_create+0x134>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a55e:	4620      	mov	r0, r4
    a560:	2100      	movs	r1, #0
    a562:	f7ff fe1d 	bl	a1a0 <bt_conn_set_state>
			bt_conn_unref(conn);
    a566:	4620      	mov	r0, r4
    a568:	f017 fd70 	bl	2204c <bt_conn_unref>
			return err;
    a56c:	e796      	b.n	a49c <bt_conn_le_create+0x24>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
    a56e:	4621      	mov	r1, r4
    a570:	f017 fb52 	bl	21c18 <bt_lookup_id_addr>
    a574:	2207      	movs	r2, #7
    a576:	4601      	mov	r1, r0
    a578:	4668      	mov	r0, sp
    a57a:	f017 f934 	bl	217e6 <memcpy>
}
    a57e:	e7b5      	b.n	a4ec <bt_conn_le_create+0x74>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    a580:	2106      	movs	r1, #6
    a582:	4620      	mov	r0, r4
    a584:	f7ff fe0c 	bl	a1a0 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
    a588:	4620      	mov	r0, r4
    a58a:	f017 fb4d 	bl	21c28 <bt_le_create_conn>
	if (err) {
    a58e:	4605      	mov	r5, r0
    a590:	b160      	cbz	r0, a5ac <bt_conn_le_create+0x134>
		conn->err = 0;
    a592:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a594:	4631      	mov	r1, r6
    a596:	4620      	mov	r0, r4
		conn->err = 0;
    a598:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a59a:	f7ff fe01 	bl	a1a0 <bt_conn_set_state>
		bt_conn_unref(conn);
    a59e:	4620      	mov	r0, r4
    a5a0:	f017 fd54 	bl	2204c <bt_conn_unref>
		bt_le_scan_update(false);
    a5a4:	4630      	mov	r0, r6
    a5a6:	f7fe fb51 	bl	8c4c <bt_le_scan_update>
		return err;
    a5aa:	e777      	b.n	a49c <bt_conn_le_create+0x24>
	*ret_conn = conn;
    a5ac:	6034      	str	r4, [r6, #0]
	return 0;
    a5ae:	e775      	b.n	a49c <bt_conn_le_create+0x24>
		return -EAGAIN;
    a5b0:	f06f 050a 	mvn.w	r5, #10
    a5b4:	e772      	b.n	a49c <bt_conn_le_create+0x24>
		return -EALREADY;
    a5b6:	f06f 0544 	mvn.w	r5, #68	; 0x44
    a5ba:	e76f      	b.n	a49c <bt_conn_le_create+0x24>
		return -ENOMEM;
    a5bc:	f06f 050b 	mvn.w	r5, #11
    a5c0:	e76c      	b.n	a49c <bt_conn_le_create+0x24>
    a5c2:	bf00      	nop
    a5c4:	20000094 	.word	0x20000094
    a5c8:	20000000 	.word	0x20000000

0000a5cc <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    a5cc:	b570      	push	{r4, r5, r6, lr}
    a5ce:	4606      	mov	r6, r0
    a5d0:	4838      	ldr	r0, [pc, #224]	; (a6b4 <bt_le_set_auto_conn+0xe8>)
    a5d2:	460d      	mov	r5, r1
    a5d4:	f017 fc34 	bl	21e40 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a5d8:	0780      	lsls	r0, r0, #30
    a5da:	d564      	bpl.n	a6a6 <bt_le_set_auto_conn+0xda>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
    a5dc:	b929      	cbnz	r1, a5ea <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
    a5de:	f7fe f839 	bl	8654 <bt_le_scan_random_addr_check>
    a5e2:	b940      	cbnz	r0, a5f6 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
    a5e4:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
    a5e8:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    a5ea:	4608      	mov	r0, r1
    a5ec:	f017 fb7b 	bl	21ce6 <bt_le_conn_params_valid>
    a5f0:	2800      	cmp	r0, #0
    a5f2:	d1f4      	bne.n	a5de <bt_le_set_auto_conn+0x12>
    a5f4:	e7f6      	b.n	a5e4 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
    a5f6:	4631      	mov	r1, r6
    a5f8:	2000      	movs	r0, #0
    a5fa:	f7ff fed5 	bl	a3a8 <bt_conn_lookup_addr_le>
	if (!conn) {
    a5fe:	4604      	mov	r4, r0
    a600:	b928      	cbnz	r0, a60e <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
    a602:	4631      	mov	r1, r6
    a604:	f7ff fd92 	bl	a12c <bt_conn_add_le>
		if (!conn) {
    a608:	4604      	mov	r4, r0
    a60a:	2800      	cmp	r0, #0
    a60c:	d04e      	beq.n	a6ac <bt_le_set_auto_conn+0xe0>
	if (param) {
    a60e:	1d23      	adds	r3, r4, #4
    a610:	b385      	cbz	r5, a674 <bt_le_set_auto_conn+0xa8>
	conn->le.interval_min = param->interval_min;
    a612:	882a      	ldrh	r2, [r5, #0]
    a614:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    a618:	886a      	ldrh	r2, [r5, #2]
    a61a:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
    a61e:	88aa      	ldrh	r2, [r5, #4]
    a620:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    a624:	88ea      	ldrh	r2, [r5, #6]
    a626:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a62a:	f3bf 8f5b 	dmb	ish
    a62e:	e853 2f00 	ldrex	r2, [r3]
    a632:	f042 0101 	orr.w	r1, r2, #1
    a636:	e843 1000 	strex	r0, r1, [r3]
    a63a:	2800      	cmp	r0, #0
    a63c:	d1f7      	bne.n	a62e <bt_le_set_auto_conn+0x62>
    a63e:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_and_set_bit(conn->flags,
    a642:	07d1      	lsls	r1, r2, #31
    a644:	d402      	bmi.n	a64c <bt_le_set_auto_conn+0x80>
			bt_conn_ref(conn);
    a646:	4620      	mov	r0, r4
    a648:	f017 fce5 	bl	22016 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
    a64c:	7b63      	ldrb	r3, [r4, #13]
    a64e:	b963      	cbnz	r3, a66a <bt_le_set_auto_conn+0x9e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a650:	4818      	ldr	r0, [pc, #96]	; (a6b4 <bt_le_set_auto_conn+0xe8>)
    a652:	f017 fbf5 	bl	21e40 <atomic_get>
    a656:	0783      	lsls	r3, r0, #30
    a658:	d507      	bpl.n	a66a <bt_le_set_auto_conn+0x9e>
		if (param) {
    a65a:	b11d      	cbz	r5, a664 <bt_le_set_auto_conn+0x98>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    a65c:	2102      	movs	r1, #2
    a65e:	4620      	mov	r0, r4
    a660:	f7ff fd9e 	bl	a1a0 <bt_conn_set_state>
		bt_le_scan_update(false);
    a664:	2000      	movs	r0, #0
    a666:	f7fe faf1 	bl	8c4c <bt_le_scan_update>
	bt_conn_unref(conn);
    a66a:	4620      	mov	r0, r4
    a66c:	f017 fcee 	bl	2204c <bt_conn_unref>
	return 0;
    a670:	2000      	movs	r0, #0
    a672:	e7b9      	b.n	a5e8 <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a674:	f3bf 8f5b 	dmb	ish
    a678:	e853 2f00 	ldrex	r2, [r3]
    a67c:	f022 0101 	bic.w	r1, r2, #1
    a680:	e843 1000 	strex	r0, r1, [r3]
    a684:	2800      	cmp	r0, #0
    a686:	d1f7      	bne.n	a678 <bt_le_set_auto_conn+0xac>
    a688:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    a68c:	07d2      	lsls	r2, r2, #31
    a68e:	d5dd      	bpl.n	a64c <bt_le_set_auto_conn+0x80>
			bt_conn_unref(conn);
    a690:	4620      	mov	r0, r4
    a692:	f017 fcdb 	bl	2204c <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    a696:	7b63      	ldrb	r3, [r4, #13]
    a698:	2b02      	cmp	r3, #2
    a69a:	d1d7      	bne.n	a64c <bt_le_set_auto_conn+0x80>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a69c:	4629      	mov	r1, r5
    a69e:	4620      	mov	r0, r4
    a6a0:	f7ff fd7e 	bl	a1a0 <bt_conn_set_state>
    a6a4:	e7d2      	b.n	a64c <bt_le_set_auto_conn+0x80>
		return -EAGAIN;
    a6a6:	f06f 000a 	mvn.w	r0, #10
    a6aa:	e79d      	b.n	a5e8 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    a6ac:	f06f 000b 	mvn.w	r0, #11
    a6b0:	e79a      	b.n	a5e8 <bt_le_set_auto_conn+0x1c>
    a6b2:	bf00      	nop
    a6b4:	20000094 	.word	0x20000094

0000a6b8 <bt_conn_disconnect>:
{
    a6b8:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a6ba:	7883      	ldrb	r3, [r0, #2]
    a6bc:	2b01      	cmp	r3, #1
{
    a6be:	4604      	mov	r4, r0
    a6c0:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a6c2:	d103      	bne.n	a6cc <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    a6c4:	2100      	movs	r1, #0
    a6c6:	3088      	adds	r0, #136	; 0x88
    a6c8:	f7ff ff80 	bl	a5cc <bt_le_set_auto_conn>
	switch (conn->state) {
    a6cc:	7b63      	ldrb	r3, [r4, #13]
    a6ce:	3b02      	subs	r3, #2
    a6d0:	2b06      	cmp	r3, #6
    a6d2:	d805      	bhi.n	a6e0 <bt_conn_disconnect+0x28>
    a6d4:	e8df f003 	tbb	[pc, r3]
    a6d8:	12040408 	.word	0x12040408
    a6dc:	2d25      	.short	0x2d25
    a6de:	10          	.byte	0x10
    a6df:	00          	.byte	0x00
    a6e0:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    a6e4:	4628      	mov	r0, r5
    a6e6:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a6e8:	4620      	mov	r0, r4
		conn->err = reason;
    a6ea:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a6ec:	2100      	movs	r1, #0
    a6ee:	f7ff fd57 	bl	a1a0 <bt_conn_set_state>
			bt_le_scan_update(false);
    a6f2:	2000      	movs	r0, #0
    a6f4:	f7fe faaa 	bl	8c4c <bt_le_scan_update>
		return 0;
    a6f8:	2500      	movs	r5, #0
    a6fa:	e7f3      	b.n	a6e4 <bt_conn_disconnect+0x2c>
    a6fc:	4913      	ldr	r1, [pc, #76]	; (a74c <bt_conn_disconnect+0x94>)
    a6fe:	4b14      	ldr	r3, [pc, #80]	; (a750 <bt_conn_disconnect+0x98>)
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
    a700:	4814      	ldr	r0, [pc, #80]	; (a754 <bt_conn_disconnect+0x9c>)
    a702:	1a5b      	subs	r3, r3, r1
    a704:	08db      	lsrs	r3, r3, #3
    a706:	019b      	lsls	r3, r3, #6
    a708:	f043 0102 	orr.w	r1, r3, #2
    a70c:	f015 fbb7 	bl	1fe7e <log_0>
		conn->err = reason;
    a710:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a712:	4620      	mov	r0, r4
    a714:	2100      	movs	r1, #0
    a716:	f7ff fd43 	bl	a1a0 <bt_conn_set_state>
}
    a71a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
    a71e:	f7fe bf89 	b.w	9634 <bt_le_adv_stop>
			k_delayed_work_cancel(&conn->deferred_work);
    a722:	f104 0058 	add.w	r0, r4, #88	; 0x58
    a726:	f01a f913 	bl	24950 <k_delayed_work_cancel>
}
    a72a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
    a72e:	f7fe b805 	b.w	873c <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
    a732:	4629      	mov	r1, r5
    a734:	8820      	ldrh	r0, [r4, #0]
    a736:	f017 fa79 	bl	21c2c <bt_hci_disconnect>
	if (err) {
    a73a:	4605      	mov	r5, r0
    a73c:	2800      	cmp	r0, #0
    a73e:	d1d1      	bne.n	a6e4 <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    a740:	2108      	movs	r1, #8
    a742:	4620      	mov	r0, r4
    a744:	f7ff fd2c 	bl	a1a0 <bt_conn_set_state>
	return 0;
    a748:	e7cc      	b.n	a6e4 <bt_conn_disconnect+0x2c>
    a74a:	bf00      	nop
    a74c:	00024fd8 	.word	0x00024fd8
    a750:	00024fe8 	.word	0x00024fe8
    a754:	00028046 	.word	0x00028046

0000a758 <send_conn_le_param_update>:
{
    a758:	b538      	push	{r3, r4, r5, lr}
    a75a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    a75c:	4608      	mov	r0, r1
{
    a75e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    a760:	f017 fac1 	bl	21ce6 <bt_le_conn_params_valid>
    a764:	b308      	cbz	r0, a7aa <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    a766:	4b12      	ldr	r3, [pc, #72]	; (a7b0 <send_conn_le_param_update+0x58>)
    a768:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    a76c:	0799      	lsls	r1, r3, #30
    a76e:	d407      	bmi.n	a780 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    a770:	78e3      	ldrb	r3, [r4, #3]
    a772:	b173      	cbz	r3, a792 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    a774:	4629      	mov	r1, r5
    a776:	4620      	mov	r0, r4
}
    a778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    a77c:	f000 bb26 	b.w	adcc <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    a780:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    a784:	079a      	lsls	r2, r3, #30
    a786:	d5f3      	bpl.n	a770 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a788:	1d20      	adds	r0, r4, #4
    a78a:	f017 fb59 	bl	21e40 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    a78e:	0543      	lsls	r3, r0, #21
    a790:	d4ee      	bmi.n	a770 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    a792:	4629      	mov	r1, r5
    a794:	4620      	mov	r0, r4
    a796:	f017 fc92 	bl	220be <bt_conn_le_conn_update>
		if (rc == 0) {
    a79a:	b928      	cbnz	r0, a7a8 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
    a79c:	88ab      	ldrh	r3, [r5, #4]
    a79e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    a7a2:	88eb      	ldrh	r3, [r5, #6]
    a7a4:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    a7a8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    a7aa:	f06f 0015 	mvn.w	r0, #21
    a7ae:	e7fb      	b.n	a7a8 <send_conn_le_param_update+0x50>
    a7b0:	20000000 	.word	0x20000000

0000a7b4 <deferred_work>:
{
    a7b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    a7b6:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    a7ba:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    a7bc:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    a7c0:	b993      	cbnz	r3, a7e8 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
    a7c2:	4630      	mov	r0, r6
    a7c4:	f017 fcdc 	bl	22180 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    a7c8:	4b22      	ldr	r3, [pc, #136]	; (a854 <deferred_work+0xa0>)
    a7ca:	681d      	ldr	r5, [r3, #0]
    a7cc:	b925      	cbnz	r5, a7d8 <deferred_work+0x24>
		bt_conn_unref(conn);
    a7ce:	4630      	mov	r0, r6
    a7d0:	f017 fc3c 	bl	2204c <bt_conn_unref>
}
    a7d4:	b002      	add	sp, #8
    a7d6:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    a7d8:	686b      	ldr	r3, [r5, #4]
    a7da:	b11b      	cbz	r3, a7e4 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
    a7dc:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    a7e0:	4630      	mov	r0, r6
    a7e2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a7e4:	69ad      	ldr	r5, [r5, #24]
    a7e6:	e7f1      	b.n	a7cc <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    a7e8:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    a7ec:	2b01      	cmp	r3, #1
    a7ee:	d1f1      	bne.n	a7d4 <deferred_work+0x20>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a7f0:	f810 3c55 	ldrb.w	r3, [r0, #-85]
    a7f4:	b913      	cbnz	r3, a7fc <deferred_work+0x48>
		bt_le_create_conn_cancel();
    a7f6:	f7fd ffa1 	bl	873c <bt_le_create_conn_cancel>
		return;
    a7fa:	e7eb      	b.n	a7d4 <deferred_work+0x20>
	if (atomic_test_and_clear_bit(conn->flags,
    a7fc:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a800:	f3bf 8f5b 	dmb	ish
    a804:	e855 3f00 	ldrex	r3, [r5]
    a808:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    a80c:	e845 2100 	strex	r1, r2, [r5]
    a810:	2900      	cmp	r1, #0
    a812:	d1f7      	bne.n	a804 <deferred_work+0x50>
    a814:	f3bf 8f5b 	dmb	ish
    a818:	059b      	lsls	r3, r3, #22
    a81a:	d514      	bpl.n	a846 <deferred_work+0x92>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    a81c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a81e:	9300      	str	r3, [sp, #0]
    a820:	6d23      	ldr	r3, [r4, #80]	; 0x50
    a822:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    a824:	4669      	mov	r1, sp
    a826:	4630      	mov	r0, r6
    a828:	f7ff ff96 	bl	a758 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a82c:	f3bf 8f5b 	dmb	ish
    a830:	e855 3f00 	ldrex	r3, [r5]
    a834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a838:	e845 3200 	strex	r2, r3, [r5]
    a83c:	2a00      	cmp	r2, #0
    a83e:	d1f7      	bne.n	a830 <deferred_work+0x7c>
    a840:	f3bf 8f5b 	dmb	ish
    a844:	e7c6      	b.n	a7d4 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
    a846:	4a04      	ldr	r2, [pc, #16]	; (a858 <deferred_work+0xa4>)
    a848:	6810      	ldr	r0, [r2, #0]
    a84a:	6851      	ldr	r1, [r2, #4]
    a84c:	466b      	mov	r3, sp
    a84e:	c303      	stmia	r3!, {r0, r1}
    a850:	e7e8      	b.n	a824 <deferred_work+0x70>
    a852:	bf00      	nop
    a854:	20001388 	.word	0x20001388
    a858:	000251fc 	.word	0x000251fc

0000a85c <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    a85c:	b538      	push	{r3, r4, r5, lr}
    a85e:	460d      	mov	r5, r1
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
    a860:	490c      	ldr	r1, [pc, #48]	; (a894 <bt_conn_create_pdu_timeout+0x38>)
    a862:	2800      	cmp	r0, #0
    a864:	bf08      	it	eq
    a866:	4608      	moveq	r0, r1
    a868:	f019 fb8a 	bl	23f80 <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
    a86c:	4604      	mov	r4, r0
    a86e:	b958      	cbnz	r0, a888 <bt_conn_create_pdu_timeout+0x2c>
    a870:	4909      	ldr	r1, [pc, #36]	; (a898 <bt_conn_create_pdu_timeout+0x3c>)
    a872:	4b0a      	ldr	r3, [pc, #40]	; (a89c <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    a874:	480a      	ldr	r0, [pc, #40]	; (a8a0 <bt_conn_create_pdu_timeout+0x44>)
    a876:	1ac9      	subs	r1, r1, r3
    a878:	08c9      	lsrs	r1, r1, #3
    a87a:	0189      	lsls	r1, r1, #6
    a87c:	f041 0102 	orr.w	r1, r1, #2
    a880:	f015 fafd 	bl	1fe7e <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    a884:	4620      	mov	r0, r4
    a886:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_reserve(buf, reserve);
    a888:	1d29      	adds	r1, r5, #4
    a88a:	3008      	adds	r0, #8
    a88c:	f019 fb9d 	bl	23fca <net_buf_simple_reserve>
	return buf;
    a890:	e7f8      	b.n	a884 <bt_conn_create_pdu_timeout+0x28>
    a892:	bf00      	nop
    a894:	200007e4 	.word	0x200007e4
    a898:	00024fe8 	.word	0x00024fe8
    a89c:	00024fd8 	.word	0x00024fd8
    a8a0:	0002806d 	.word	0x0002806d

0000a8a4 <bt_conn_create_frag_timeout>:
{
    a8a4:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    a8a6:	4801      	ldr	r0, [pc, #4]	; (a8ac <bt_conn_create_frag_timeout+0x8>)
    a8a8:	f7ff bfd8 	b.w	a85c <bt_conn_create_pdu_timeout>
    a8ac:	20000834 	.word	0x20000834

0000a8b0 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    a8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8b4:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    a8b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a8ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a8be:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    a8c0:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    a8c2:	f7ff ffef 	bl	a8a4 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    a8c6:	7833      	ldrb	r3, [r6, #0]
    a8c8:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    a8ca:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    a8cc:	f04f 0600 	mov.w	r6, #0
    a8d0:	d005      	beq.n	a8de <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    a8d2:	f012 fc23 	bl	1d11c <net_buf_unref>
		return NULL;
    a8d6:	4635      	mov	r5, r6
}
    a8d8:	4628      	mov	r0, r5
    a8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    a8de:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    a8e0:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    a8e4:	4e0c      	ldr	r6, [pc, #48]	; (a918 <create_frag.isra.0+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    a8e6:	4638      	mov	r0, r7
    a8e8:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
    a8ec:	f019 fbf1 	bl	240d2 <net_buf_simple_tailroom>
    a8f0:	4580      	cmp	r8, r0
    a8f2:	d20c      	bcs.n	a90e <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
    a8f4:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	net_buf_add_mem(frag, buf->data, frag_len);
    a8f8:	f854 1f08 	ldr.w	r1, [r4, #8]!
    a8fc:	4632      	mov	r2, r6
    a8fe:	4638      	mov	r0, r7
    a900:	f019 fba0 	bl	24044 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    a904:	4631      	mov	r1, r6
    a906:	4620      	mov	r0, r4
    a908:	f019 fbbf 	bl	2408a <net_buf_simple_pull>
	return frag;
    a90c:	e7e4      	b.n	a8d8 <create_frag.isra.0+0x28>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    a90e:	4638      	mov	r0, r7
    a910:	f019 fbdf 	bl	240d2 <net_buf_simple_tailroom>
    a914:	b286      	uxth	r6, r0
    a916:	e7ef      	b.n	a8f8 <create_frag.isra.0+0x48>
    a918:	20000000 	.word	0x20000000

0000a91c <bt_conn_process_tx>:
{
    a91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    a91e:	7b43      	ldrb	r3, [r0, #13]
{
    a920:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    a922:	b993      	cbnz	r3, a94a <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a924:	f3bf 8f5b 	dmb	ish
    a928:	1d03      	adds	r3, r0, #4
    a92a:	e853 2f00 	ldrex	r2, [r3]
    a92e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    a932:	e843 1400 	strex	r4, r1, [r3]
    a936:	2c00      	cmp	r4, #0
    a938:	d1f7      	bne.n	a92a <bt_conn_process_tx+0xe>
    a93a:	f3bf 8f5b 	dmb	ish
    a93e:	0653      	lsls	r3, r2, #25
    a940:	d503      	bpl.n	a94a <bt_conn_process_tx+0x2e>
}
    a942:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    a946:	f7ff ba9b 	b.w	9e80 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    a94a:	2200      	movs	r2, #0
    a94c:	2300      	movs	r3, #0
    a94e:	f105 0034 	add.w	r0, r5, #52	; 0x34
    a952:	f019 fb1a 	bl	23f8a <net_buf_get>
	BT_ASSERT(buf);
    a956:	4604      	mov	r4, r0
    a958:	b960      	cbnz	r0, a974 <bt_conn_process_tx+0x58>
    a95a:	4a20      	ldr	r2, [pc, #128]	; (a9dc <bt_conn_process_tx+0xc0>)
    a95c:	4920      	ldr	r1, [pc, #128]	; (a9e0 <bt_conn_process_tx+0xc4>)
    a95e:	4821      	ldr	r0, [pc, #132]	; (a9e4 <bt_conn_process_tx+0xc8>)
    a960:	f240 535f 	movw	r3, #1375	; 0x55f
    a964:	f014 fec7 	bl	1f6f6 <printk>
    a968:	4040      	eors	r0, r0
    a96a:	f380 8811 	msr	BASEPRI, r0
    a96e:	f04f 0003 	mov.w	r0, #3
    a972:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    a974:	4f1c      	ldr	r7, [pc, #112]	; (a9e8 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    a976:	89a1      	ldrh	r1, [r4, #12]
    a978:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
    a97c:	4291      	cmp	r1, r2
    a97e:	d807      	bhi.n	a990 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    a980:	2300      	movs	r3, #0
    a982:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    a984:	4621      	mov	r1, r4
    a986:	4628      	mov	r0, r5
    a988:	f7ff f94e 	bl	9c28 <send_frag>
	if (!send_buf(conn, buf)) {
    a98c:	b140      	cbz	r0, a9a0 <bt_conn_process_tx+0x84>
}
    a98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    a990:	f105 060d 	add.w	r6, r5, #13
    a994:	4621      	mov	r1, r4
    a996:	4630      	mov	r0, r6
    a998:	f7ff ff8a 	bl	a8b0 <create_frag.isra.0>
	if (!frag) {
    a99c:	4601      	mov	r1, r0
    a99e:	b920      	cbnz	r0, a9aa <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
    a9a0:	4620      	mov	r0, r4
}
    a9a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    a9a6:	f012 bbb9 	b.w	1d11c <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    a9aa:	2301      	movs	r3, #1
    a9ac:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    a9ae:	4628      	mov	r0, r5
    a9b0:	f7ff f93a 	bl	9c28 <send_frag>
    a9b4:	2800      	cmp	r0, #0
    a9b6:	d0f3      	beq.n	a9a0 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
    a9b8:	89a2      	ldrh	r2, [r4, #12]
    a9ba:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
    a9be:	429a      	cmp	r2, r3
    a9c0:	d802      	bhi.n	a9c8 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
    a9c2:	2300      	movs	r3, #0
    a9c4:	2203      	movs	r2, #3
    a9c6:	e7dd      	b.n	a984 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    a9c8:	4621      	mov	r1, r4
    a9ca:	4630      	mov	r0, r6
    a9cc:	f7ff ff70 	bl	a8b0 <create_frag.isra.0>
		if (!frag) {
    a9d0:	4601      	mov	r1, r0
    a9d2:	2800      	cmp	r0, #0
    a9d4:	d0e4      	beq.n	a9a0 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    a9d6:	2301      	movs	r3, #1
    a9d8:	461a      	mov	r2, r3
    a9da:	e7e8      	b.n	a9ae <bt_conn_process_tx+0x92>
    a9dc:	00028096 	.word	0x00028096
    a9e0:	000274aa 	.word	0x000274aa
    a9e4:	00027768 	.word	0x00027768
    a9e8:	20000000 	.word	0x20000000

0000a9ec <bt_conn_index>:
		__ASSERT(index < CONFIG_BT_MAX_SCO_CONN,
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    a9ec:	4b03      	ldr	r3, [pc, #12]	; (a9fc <bt_conn_index+0x10>)
    a9ee:	1ac0      	subs	r0, r0, r3
    a9f0:	4b03      	ldr	r3, [pc, #12]	; (aa00 <bt_conn_index+0x14>)
    a9f2:	1180      	asrs	r0, r0, #6
    a9f4:	4358      	muls	r0, r3
		__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
		break;
	}

	return index;
}
    a9f6:	b2c0      	uxtb	r0, r0
    a9f8:	4770      	bx	lr
    a9fa:	bf00      	nop
    a9fc:	20000aa8 	.word	0x20000aa8
    aa00:	aaaaaaab 	.word	0xaaaaaaab

0000aa04 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    aa04:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    aa06:	4914      	ldr	r1, [pc, #80]	; (aa58 <bt_conn_init+0x54>)
    aa08:	4814      	ldr	r0, [pc, #80]	; (aa5c <bt_conn_init+0x58>)
    aa0a:	f019 fdd3 	bl	245b4 <k_queue_append>
    aa0e:	4914      	ldr	r1, [pc, #80]	; (aa60 <bt_conn_init+0x5c>)
    aa10:	4812      	ldr	r0, [pc, #72]	; (aa5c <bt_conn_init+0x58>)
    aa12:	f019 fdcf 	bl	245b4 <k_queue_append>
    aa16:	4913      	ldr	r1, [pc, #76]	; (aa64 <bt_conn_init+0x60>)
    aa18:	4810      	ldr	r0, [pc, #64]	; (aa5c <bt_conn_init+0x58>)
    aa1a:	f019 fdcb 	bl	245b4 <k_queue_append>
	}

	bt_att_init();
    aa1e:	f017 ff21 	bl	22864 <bt_att_init>

	err = bt_smp_init();
    aa22:	f004 fcd5 	bl	f3d0 <bt_smp_init>
	if (err) {
    aa26:	4605      	mov	r5, r0
    aa28:	b998      	cbnz	r0, aa52 <bt_conn_init+0x4e>
		return err;
	}

	bt_l2cap_init();
    aa2a:	f017 fc2c 	bl	22286 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    aa2e:	480e      	ldr	r0, [pc, #56]	; (aa68 <bt_conn_init+0x64>)
    aa30:	f017 faf1 	bl	22016 <bt_conn_ref>

			if (!conn) {
    aa34:	4604      	mov	r4, r0
    aa36:	b160      	cbz	r0, aa52 <bt_conn_init+0x4e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    aa38:	3004      	adds	r0, #4
    aa3a:	f017 fa01 	bl	21e40 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
    aa3e:	07c3      	lsls	r3, r0, #31
    aa40:	d504      	bpl.n	aa4c <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
    aa42:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    aa44:	2102      	movs	r1, #2
    aa46:	4620      	mov	r0, r4
    aa48:	f7ff fbaa 	bl	a1a0 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_WHITELIST) */

			bt_conn_unref(conn);
    aa4c:	4620      	mov	r0, r4
    aa4e:	f017 fafd 	bl	2204c <bt_conn_unref>
		}
	}

	return 0;
}
    aa52:	4628      	mov	r0, r5
    aa54:	bd38      	pop	{r3, r4, r5, pc}
    aa56:	bf00      	nop
    aa58:	2000138c 	.word	0x2000138c
    aa5c:	200007b4 	.word	0x200007b4
    aa60:	2000139c 	.word	0x2000139c
    aa64:	200013ac 	.word	0x200013ac
    aa68:	20000aa8 	.word	0x20000aa8

0000aa6c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    aa6c:	4a0b      	ldr	r2, [pc, #44]	; (aa9c <l2cap_accept+0x30>)
{
    aa6e:	b508      	push	{r3, lr}
    aa70:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    aa72:	6810      	ldr	r0, [r2, #0]
    aa74:	b918      	cbnz	r0, aa7e <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    aa76:	4b0a      	ldr	r3, [pc, #40]	; (aaa0 <l2cap_accept+0x34>)
    aa78:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    aa7a:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    aa7c:	bd08      	pop	{r3, pc}
    aa7e:	4909      	ldr	r1, [pc, #36]	; (aaa4 <l2cap_accept+0x38>)
    aa80:	4a09      	ldr	r2, [pc, #36]	; (aaa8 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    aa82:	480a      	ldr	r0, [pc, #40]	; (aaac <l2cap_accept+0x40>)
    aa84:	1a52      	subs	r2, r2, r1
    aa86:	08d2      	lsrs	r2, r2, #3
    aa88:	0192      	lsls	r2, r2, #6
    aa8a:	f042 0201 	orr.w	r2, r2, #1
    aa8e:	4619      	mov	r1, r3
    aa90:	f015 fa02 	bl	1fe98 <log_1>
	return -ENOMEM;
    aa94:	f06f 000b 	mvn.w	r0, #11
    aa98:	e7f0      	b.n	aa7c <l2cap_accept+0x10>
    aa9a:	bf00      	nop
    aa9c:	20000b68 	.word	0x20000b68
    aaa0:	00025674 	.word	0x00025674
    aaa4:	00024fd8 	.word	0x00024fd8
    aaa8:	000250d8 	.word	0x000250d8
    aaac:	00028123 	.word	0x00028123

0000aab0 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    aab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aab2:	4605      	mov	r5, r0
    aab4:	460f      	mov	r7, r1
    aab6:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    aab8:	2300      	movs	r3, #0
    aaba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    aabe:	2104      	movs	r1, #4
    aac0:	2000      	movs	r0, #0
    aac2:	f7ff fecb 	bl	a85c <bt_conn_create_pdu_timeout>
	if (!buf) {
    aac6:	4604      	mov	r4, r0
    aac8:	b960      	cbnz	r0, aae4 <l2cap_create_le_sig_pdu.isra.0+0x34>
    aaca:	4a0a      	ldr	r2, [pc, #40]	; (aaf4 <l2cap_create_le_sig_pdu.isra.0+0x44>)
    aacc:	4b0a      	ldr	r3, [pc, #40]	; (aaf8 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    aace:	480b      	ldr	r0, [pc, #44]	; (aafc <l2cap_create_le_sig_pdu.isra.0+0x4c>)
    aad0:	1ad2      	subs	r2, r2, r3
    aad2:	08d2      	lsrs	r2, r2, #3
    aad4:	0192      	lsls	r2, r2, #6
    aad6:	f042 0201 	orr.w	r2, r2, #1
    aada:	4629      	mov	r1, r5
    aadc:	f015 f9dc 	bl	1fe98 <log_1>
}
    aae0:	4620      	mov	r0, r4
    aae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
    aae4:	2104      	movs	r1, #4
    aae6:	3008      	adds	r0, #8
    aae8:	f019 faa6 	bl	24038 <net_buf_simple_add>
	hdr->code = code;
    aaec:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    aaee:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    aaf0:	8046      	strh	r6, [r0, #2]
	return buf;
    aaf2:	e7f5      	b.n	aae0 <l2cap_create_le_sig_pdu.isra.0+0x30>
    aaf4:	000250d8 	.word	0x000250d8
    aaf8:	00024fd8 	.word	0x00024fd8
    aafc:	0002814a 	.word	0x0002814a

0000ab00 <l2cap_rtx_timeout>:
{
    ab00:	b538      	push	{r3, r4, r5, lr}
    ab02:	4a0b      	ldr	r2, [pc, #44]	; (ab30 <l2cap_rtx_timeout+0x30>)
    ab04:	4b0b      	ldr	r3, [pc, #44]	; (ab34 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
    ab06:	4604      	mov	r4, r0
    ab08:	1ad2      	subs	r2, r2, r3
    ab0a:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    ab0e:	480a      	ldr	r0, [pc, #40]	; (ab38 <l2cap_rtx_timeout+0x38>)
    ab10:	08d2      	lsrs	r2, r2, #3
    ab12:	0192      	lsls	r2, r2, #6
    ab14:	4621      	mov	r1, r4
    ab16:	f042 0201 	orr.w	r2, r2, #1
    ab1a:	f015 f9bd 	bl	1fe98 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    ab1e:	4628      	mov	r0, r5
    ab20:	4621      	mov	r1, r4
    ab22:	f017 faf6 	bl	22112 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    ab26:	4620      	mov	r0, r4
}
    ab28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    ab2c:	f017 bb13 	b.w	22156 <bt_l2cap_chan_del>
    ab30:	000250d8 	.word	0x000250d8
    ab34:	00024fd8 	.word	0x00024fd8
    ab38:	00028172 	.word	0x00028172

0000ab3c <bt_l2cap_connected>:
{
    ab3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    ab40:	4e2a      	ldr	r6, [pc, #168]	; (abec <bt_l2cap_connected+0xb0>)
    ab42:	4f2b      	ldr	r7, [pc, #172]	; (abf0 <bt_l2cap_connected+0xb4>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    ab44:	f8df 80ac 	ldr.w	r8, [pc, #172]	; abf4 <bt_l2cap_connected+0xb8>
{
    ab48:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    ab4a:	42be      	cmp	r6, r7
    ab4c:	d302      	bcc.n	ab54 <bt_l2cap_connected+0x18>
}
    ab4e:	b003      	add	sp, #12
    ab50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    ab54:	6873      	ldr	r3, [r6, #4]
    ab56:	a901      	add	r1, sp, #4
    ab58:	4628      	mov	r0, r5
    ab5a:	4798      	blx	r3
    ab5c:	2800      	cmp	r0, #0
    ab5e:	db40      	blt.n	abe2 <bt_l2cap_connected+0xa6>
		ch = BT_L2CAP_LE_CHAN(chan);
    ab60:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    ab62:	8833      	ldrh	r3, [r6, #0]
    ab64:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    ab68:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    ab6c:	2230      	movs	r2, #48	; 0x30
    ab6e:	2100      	movs	r1, #0
    ab70:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    ab74:	f8d6 9008 	ldr.w	r9, [r6, #8]
    ab78:	f016 fe60 	bl	2183c <memset>
    ab7c:	f8c4 8014 	str.w	r8, [r4, #20]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ab80:	f104 0340 	add.w	r3, r4, #64	; 0x40
    ab84:	2200      	movs	r2, #0
    ab86:	f3bf 8f5b 	dmb	ish
    ab8a:	e853 1f00 	ldrex	r1, [r3]
    ab8e:	e843 2000 	strex	r0, r2, [r3]
    ab92:	2800      	cmp	r0, #0
    ab94:	d1f9      	bne.n	ab8a <bt_l2cap_connected+0x4e>
    ab96:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    ab9a:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    ab9c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    ab9e:	f104 0308 	add.w	r3, r4, #8
    aba2:	bb02      	cbnz	r2, abe6 <bt_l2cap_connected+0xaa>
	list->head = node;
    aba4:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
		if (chan->ops->connected) {
    aba8:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    abaa:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
    abac:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    abae:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
    abb2:	681b      	ldr	r3, [r3, #0]
    abb4:	b103      	cbz	r3, abb8 <bt_l2cap_connected+0x7c>
			chan->ops->connected(chan);
    abb6:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    abb8:	9b01      	ldr	r3, [sp, #4]
    abba:	f3bf 8f5b 	dmb	ish
    abbe:	3340      	adds	r3, #64	; 0x40
    abc0:	e853 2f00 	ldrex	r2, [r3]
    abc4:	f042 0201 	orr.w	r2, r2, #1
    abc8:	e843 2100 	strex	r1, r2, [r3]
    abcc:	2900      	cmp	r1, #0
    abce:	d1f7      	bne.n	abc0 <bt_l2cap_connected+0x84>
    abd0:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    abd4:	9801      	ldr	r0, [sp, #4]
    abd6:	6843      	ldr	r3, [r0, #4]
    abd8:	699b      	ldr	r3, [r3, #24]
    abda:	b113      	cbz	r3, abe2 <bt_l2cap_connected+0xa6>
			chan->ops->status(chan, chan->status);
    abdc:	f100 0140 	add.w	r1, r0, #64	; 0x40
    abe0:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    abe2:	360c      	adds	r6, #12
    abe4:	e7b1      	b.n	ab4a <bt_l2cap_connected+0xe>
	parent->next = child;
    abe6:	6013      	str	r3, [r2, #0]
	list->tail = node;
    abe8:	652b      	str	r3, [r5, #80]	; 0x50
}
    abea:	e7dd      	b.n	aba8 <bt_l2cap_connected+0x6c>
    abec:	00024f9c 	.word	0x00024f9c
    abf0:	00024fc0 	.word	0x00024fc0
    abf4:	0000ab01 	.word	0x0000ab01

0000abf8 <l2cap_recv>:
{
    abf8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    abfa:	898b      	ldrh	r3, [r1, #12]
    abfc:	2b03      	cmp	r3, #3
{
    abfe:	b085      	sub	sp, #20
    ac00:	4606      	mov	r6, r0
    ac02:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    ac04:	d80a      	bhi.n	ac1c <l2cap_recv+0x24>
    ac06:	494d      	ldr	r1, [pc, #308]	; (ad3c <l2cap_recv+0x144>)
    ac08:	4b4d      	ldr	r3, [pc, #308]	; (ad40 <l2cap_recv+0x148>)
		BT_ERR("Too small L2CAP signaling PDU");
    ac0a:	484e      	ldr	r0, [pc, #312]	; (ad44 <l2cap_recv+0x14c>)
    ac0c:	1ac9      	subs	r1, r1, r3
    ac0e:	08c9      	lsrs	r1, r1, #3
    ac10:	0189      	lsls	r1, r1, #6
    ac12:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    ac16:	f015 f932 	bl	1fe7e <log_0>
		return 0;
    ac1a:	e013      	b.n	ac44 <l2cap_recv+0x4c>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    ac1c:	2104      	movs	r1, #4
    ac1e:	f105 0008 	add.w	r0, r5, #8
    ac22:	f019 fa3a 	bl	2409a <net_buf_simple_pull_mem>
	if (buf->len != len) {
    ac26:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    ac28:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    ac2a:	428a      	cmp	r2, r1
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    ac2c:	4604      	mov	r4, r0
	if (buf->len != len) {
    ac2e:	d00c      	beq.n	ac4a <l2cap_recv+0x52>
    ac30:	4843      	ldr	r0, [pc, #268]	; (ad40 <l2cap_recv+0x148>)
    ac32:	4b42      	ldr	r3, [pc, #264]	; (ad3c <l2cap_recv+0x144>)
    ac34:	1a1b      	subs	r3, r3, r0
    ac36:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    ac38:	019b      	lsls	r3, r3, #6
    ac3a:	4843      	ldr	r0, [pc, #268]	; (ad48 <l2cap_recv+0x150>)
    ac3c:	f043 0301 	orr.w	r3, r3, #1
    ac40:	f015 f93e 	bl	1fec0 <log_2>
}
    ac44:	2000      	movs	r0, #0
    ac46:	b005      	add	sp, #20
    ac48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    ac4a:	7841      	ldrb	r1, [r0, #1]
    ac4c:	b941      	cbnz	r1, ac60 <l2cap_recv+0x68>
    ac4e:	493b      	ldr	r1, [pc, #236]	; (ad3c <l2cap_recv+0x144>)
    ac50:	4b3b      	ldr	r3, [pc, #236]	; (ad40 <l2cap_recv+0x148>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    ac52:	483e      	ldr	r0, [pc, #248]	; (ad4c <l2cap_recv+0x154>)
    ac54:	1ac9      	subs	r1, r1, r3
    ac56:	08c9      	lsrs	r1, r1, #3
    ac58:	0189      	lsls	r1, r1, #6
    ac5a:	f041 0101 	orr.w	r1, r1, #1
    ac5e:	e7da      	b.n	ac16 <l2cap_recv+0x1e>
	switch (hdr->code) {
    ac60:	7803      	ldrb	r3, [r0, #0]
    ac62:	2b12      	cmp	r3, #18
    ac64:	d01c      	beq.n	aca0 <l2cap_recv+0xa8>
    ac66:	2b13      	cmp	r3, #19
    ac68:	d00f      	beq.n	ac8a <l2cap_recv+0x92>
    ac6a:	2b01      	cmp	r3, #1
    ac6c:	d0ea      	beq.n	ac44 <l2cap_recv+0x4c>
    ac6e:	4934      	ldr	r1, [pc, #208]	; (ad40 <l2cap_recv+0x148>)
    ac70:	4a32      	ldr	r2, [pc, #200]	; (ad3c <l2cap_recv+0x144>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    ac72:	4837      	ldr	r0, [pc, #220]	; (ad50 <l2cap_recv+0x158>)
    ac74:	1a52      	subs	r2, r2, r1
    ac76:	08d2      	lsrs	r2, r2, #3
    ac78:	0192      	lsls	r2, r2, #6
    ac7a:	4619      	mov	r1, r3
    ac7c:	f042 0202 	orr.w	r2, r2, #2
    ac80:	f015 f90a 	bl	1fe98 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
    ac84:	7861      	ldrb	r1, [r4, #1]
    ac86:	6830      	ldr	r0, [r6, #0]
    ac88:	e019      	b.n	acbe <l2cap_recv+0xc6>
	if (buf->len < sizeof(*rsp)) {
    ac8a:	2a01      	cmp	r2, #1
    ac8c:	d8da      	bhi.n	ac44 <l2cap_recv+0x4c>
    ac8e:	492b      	ldr	r1, [pc, #172]	; (ad3c <l2cap_recv+0x144>)
    ac90:	4b2b      	ldr	r3, [pc, #172]	; (ad40 <l2cap_recv+0x148>)
		BT_ERR("Too small LE conn param rsp");
    ac92:	4830      	ldr	r0, [pc, #192]	; (ad54 <l2cap_recv+0x15c>)
    ac94:	1ac9      	subs	r1, r1, r3
    ac96:	08c9      	lsrs	r1, r1, #3
    ac98:	0189      	lsls	r1, r1, #6
    ac9a:	f041 0101 	orr.w	r1, r1, #1
    ac9e:	e7ba      	b.n	ac16 <l2cap_recv+0x1e>
	if (buf->len < sizeof(*req)) {
    aca0:	2a07      	cmp	r2, #7
    aca2:	d808      	bhi.n	acb6 <l2cap_recv+0xbe>
    aca4:	4925      	ldr	r1, [pc, #148]	; (ad3c <l2cap_recv+0x144>)
    aca6:	4b26      	ldr	r3, [pc, #152]	; (ad40 <l2cap_recv+0x148>)
		BT_ERR("Too small LE conn update param req");
    aca8:	482b      	ldr	r0, [pc, #172]	; (ad58 <l2cap_recv+0x160>)
    acaa:	1ac9      	subs	r1, r1, r3
    acac:	08c9      	lsrs	r1, r1, #3
    acae:	0189      	lsls	r1, r1, #6
    acb0:	f041 0101 	orr.w	r1, r1, #1
    acb4:	e7af      	b.n	ac16 <l2cap_recv+0x1e>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
    acb6:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    acb8:	78e7      	ldrb	r7, [r4, #3]
    acba:	b11f      	cbz	r7, acc4 <l2cap_recv+0xcc>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    acbc:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
    acbe:	f017 faab 	bl	22218 <l2cap_send_reject.constprop.0>
		break;
    acc2:	e7bf      	b.n	ac44 <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    acc4:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    acc6:	7850      	ldrb	r0, [r2, #1]
    acc8:	7813      	ldrb	r3, [r2, #0]
    acca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    acce:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    acd2:	78d0      	ldrb	r0, [r2, #3]
    acd4:	7893      	ldrb	r3, [r2, #2]
    acd6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    acda:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    acde:	7950      	ldrb	r0, [r2, #5]
    ace0:	7913      	ldrb	r3, [r2, #4]
    ace2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    ace6:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    acea:	7993      	ldrb	r3, [r2, #6]
    acec:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    acee:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    acf0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    acf4:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    acf6:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    acfa:	f7ff fed9 	bl	aab0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    acfe:	4605      	mov	r5, r0
    ad00:	2800      	cmp	r0, #0
    ad02:	d09f      	beq.n	ac44 <l2cap_recv+0x4c>
	accepted = le_param_req(conn, &param);
    ad04:	a902      	add	r1, sp, #8
    ad06:	4620      	mov	r0, r4
    ad08:	f7ff f862 	bl	9dd0 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    ad0c:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    ad0e:	4606      	mov	r6, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    ad10:	f105 0008 	add.w	r0, r5, #8
    ad14:	f019 f990 	bl	24038 <net_buf_simple_add>
	if (accepted) {
    ad18:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    ad1c:	b2db      	uxtb	r3, r3
    ad1e:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    ad20:	462a      	mov	r2, r5
    ad22:	9700      	str	r7, [sp, #0]
    ad24:	463b      	mov	r3, r7
    ad26:	2105      	movs	r1, #5
    ad28:	4620      	mov	r0, r4
    ad2a:	f017 fa5c 	bl	221e6 <bt_l2cap_send_cb>
	if (accepted) {
    ad2e:	2e00      	cmp	r6, #0
    ad30:	d088      	beq.n	ac44 <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
    ad32:	a902      	add	r1, sp, #8
    ad34:	4620      	mov	r0, r4
    ad36:	f017 f9c2 	bl	220be <bt_conn_le_conn_update>
    ad3a:	e783      	b.n	ac44 <l2cap_recv+0x4c>
    ad3c:	000250d8 	.word	0x000250d8
    ad40:	00024fd8 	.word	0x00024fd8
    ad44:	00028182 	.word	0x00028182
    ad48:	000281a0 	.word	0x000281a0
    ad4c:	000281c1 	.word	0x000281c1
    ad50:	00028221 	.word	0x00028221
    ad54:	000281e2 	.word	0x000281e2
    ad58:	000281fe 	.word	0x000281fe

0000ad5c <bt_l2cap_recv>:
{
    ad5c:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    ad5e:	898b      	ldrh	r3, [r1, #12]
    ad60:	2b03      	cmp	r3, #3
{
    ad62:	4605      	mov	r5, r0
    ad64:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    ad66:	d80e      	bhi.n	ad86 <bt_l2cap_recv+0x2a>
    ad68:	4914      	ldr	r1, [pc, #80]	; (adbc <bt_l2cap_recv+0x60>)
    ad6a:	4b15      	ldr	r3, [pc, #84]	; (adc0 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    ad6c:	4815      	ldr	r0, [pc, #84]	; (adc4 <bt_l2cap_recv+0x68>)
    ad6e:	1ac9      	subs	r1, r1, r3
    ad70:	08c9      	lsrs	r1, r1, #3
    ad72:	0189      	lsls	r1, r1, #6
    ad74:	f041 0101 	orr.w	r1, r1, #1
    ad78:	f015 f881 	bl	1fe7e <log_0>
	net_buf_unref(buf);
    ad7c:	4620      	mov	r0, r4
}
    ad7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    ad82:	f012 b9cb 	b.w	1d11c <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    ad86:	2104      	movs	r1, #4
    ad88:	f104 0008 	add.w	r0, r4, #8
    ad8c:	f019 f985 	bl	2409a <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    ad90:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    ad92:	4628      	mov	r0, r5
    ad94:	f017 fa67 	bl	22266 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    ad98:	b950      	cbnz	r0, adb0 <bt_l2cap_recv+0x54>
    ad9a:	4b09      	ldr	r3, [pc, #36]	; (adc0 <bt_l2cap_recv+0x64>)
    ad9c:	4a07      	ldr	r2, [pc, #28]	; (adbc <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    ad9e:	480a      	ldr	r0, [pc, #40]	; (adc8 <bt_l2cap_recv+0x6c>)
    ada0:	1ad2      	subs	r2, r2, r3
    ada2:	08d2      	lsrs	r2, r2, #3
    ada4:	0192      	lsls	r2, r2, #6
    ada6:	f042 0202 	orr.w	r2, r2, #2
    adaa:	f015 f875 	bl	1fe98 <log_1>
		net_buf_unref(buf);
    adae:	e7e5      	b.n	ad7c <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    adb0:	6843      	ldr	r3, [r0, #4]
    adb2:	4621      	mov	r1, r4
    adb4:	691b      	ldr	r3, [r3, #16]
    adb6:	4798      	blx	r3
    adb8:	e7e0      	b.n	ad7c <bt_l2cap_recv+0x20>
    adba:	bf00      	nop
    adbc:	000250d8 	.word	0x000250d8
    adc0:	00024fd8 	.word	0x00024fd8
    adc4:	0002823f 	.word	0x0002823f
    adc8:	0002825c 	.word	0x0002825c

0000adcc <bt_l2cap_update_conn_param>:
{
    adcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    adce:	4b15      	ldr	r3, [pc, #84]	; (ae24 <bt_l2cap_update_conn_param+0x58>)
    add0:	781a      	ldrb	r2, [r3, #0]
    add2:	3201      	adds	r2, #1
	if (!ident) {
    add4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    add8:	bf08      	it	eq
    adda:	2201      	moveq	r2, #1
    addc:	701a      	strb	r2, [r3, #0]
{
    adde:	4605      	mov	r5, r0
    ade0:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    ade2:	2208      	movs	r2, #8
    ade4:	7819      	ldrb	r1, [r3, #0]
    ade6:	2012      	movs	r0, #18
    ade8:	f7ff fe62 	bl	aab0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    adec:	4606      	mov	r6, r0
    adee:	b1b0      	cbz	r0, ae1e <bt_l2cap_update_conn_param+0x52>
	req = net_buf_add(buf, sizeof(*req));
    adf0:	2108      	movs	r1, #8
    adf2:	4408      	add	r0, r1
    adf4:	f019 f920 	bl	24038 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    adf8:	8822      	ldrh	r2, [r4, #0]
    adfa:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    adfc:	8862      	ldrh	r2, [r4, #2]
    adfe:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    ae00:	88a2      	ldrh	r2, [r4, #4]
    ae02:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    ae04:	88e2      	ldrh	r2, [r4, #6]
    ae06:	80c2      	strh	r2, [r0, #6]
    ae08:	2400      	movs	r4, #0
    ae0a:	9400      	str	r4, [sp, #0]
    ae0c:	4623      	mov	r3, r4
    ae0e:	4632      	mov	r2, r6
    ae10:	2105      	movs	r1, #5
    ae12:	4628      	mov	r0, r5
    ae14:	f017 f9e7 	bl	221e6 <bt_l2cap_send_cb>
	return 0;
    ae18:	4620      	mov	r0, r4
}
    ae1a:	b002      	add	sp, #8
    ae1c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    ae1e:	f06f 000b 	mvn.w	r0, #11
    ae22:	e7fa      	b.n	ae1a <bt_l2cap_update_conn_param+0x4e>
    ae24:	2000307f 	.word	0x2000307f

0000ae28 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    ae28:	4b02      	ldr	r3, [pc, #8]	; (ae34 <att_cfm_sent+0xc>)
    ae2a:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    ae2e:	f017 ba58 	b.w	222e2 <att_sent>
    ae32:	bf00      	nop
    ae34:	000225a3 	.word	0x000225a3

0000ae38 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    ae38:	4b02      	ldr	r3, [pc, #8]	; (ae44 <att_rsp_sent+0xc>)
    ae3a:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    ae3e:	f017 ba50 	b.w	222e2 <att_sent>
    ae42:	bf00      	nop
    ae44:	00022587 	.word	0x00022587

0000ae48 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    ae48:	4b02      	ldr	r3, [pc, #8]	; (ae54 <att_req_sent+0xc>)
    ae4a:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    ae4e:	f017 ba48 	b.w	222e2 <att_sent>
    ae52:	bf00      	nop
    ae54:	0000b1a9 	.word	0x0000b1a9

0000ae58 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    ae58:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    ae5a:	3808      	subs	r0, #8
    ae5c:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    ae5e:	a901      	add	r1, sp, #4
    ae60:	4802      	ldr	r0, [pc, #8]	; (ae6c <bt_att_released+0x14>)
    ae62:	f013 fae9 	bl	1e438 <k_mem_slab_free>
}
    ae66:	b003      	add	sp, #12
    ae68:	f85d fb04 	ldr.w	pc, [sp], #4
    ae6c:	200006f4 	.word	0x200006f4

0000ae70 <read_group_cb>:
{
    ae70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    ae74:	4606      	mov	r6, r0
    ae76:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    ae78:	f04f 0800 	mov.w	r8, #0
    ae7c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    ae80:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    ae82:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    ae84:	f88d 8008 	strb.w	r8, [sp, #8]
    ae88:	a902      	add	r1, sp, #8
{
    ae8a:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    ae8c:	f8ad 300a 	strh.w	r3, [sp, #10]
    ae90:	f016 fd78 	bl	21984 <bt_uuid_cmp>
    ae94:	b1a0      	cbz	r0, aec0 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    ae96:	f642 0301 	movw	r3, #10241	; 0x2801
    ae9a:	6830      	ldr	r0, [r6, #0]
    ae9c:	f88d 800c 	strb.w	r8, [sp, #12]
    aea0:	a903      	add	r1, sp, #12
    aea2:	f8ad 300e 	strh.w	r3, [sp, #14]
    aea6:	f016 fd6d 	bl	21984 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    aeaa:	b148      	cbz	r0, aec0 <read_group_cb+0x50>
		if (data->group &&
    aeac:	6923      	ldr	r3, [r4, #16]
    aeae:	b11b      	cbz	r3, aeb8 <read_group_cb+0x48>
    aeb0:	885a      	ldrh	r2, [r3, #2]
    aeb2:	42aa      	cmp	r2, r5
    aeb4:	d200      	bcs.n	aeb8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    aeb6:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    aeb8:	2001      	movs	r0, #1
}
    aeba:	b004      	add	sp, #16
    aebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    aec0:	6861      	ldr	r1, [r4, #4]
    aec2:	6830      	ldr	r0, [r6, #0]
    aec4:	f016 fd5e 	bl	21984 <bt_uuid_cmp>
    aec8:	b110      	cbz	r0, aed0 <read_group_cb+0x60>
		data->group = NULL;
    aeca:	2300      	movs	r3, #0
    aecc:	6123      	str	r3, [r4, #16]
    aece:	e7f3      	b.n	aeb8 <read_group_cb+0x48>
	if (data->rsp->len &&
    aed0:	68e3      	ldr	r3, [r4, #12]
    aed2:	68a0      	ldr	r0, [r4, #8]
    aed4:	781a      	ldrb	r2, [r3, #0]
    aed6:	b13a      	cbz	r2, aee8 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    aed8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    aedc:	8981      	ldrh	r1, [r0, #12]
    aede:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    aee0:	4293      	cmp	r3, r2
    aee2:	da01      	bge.n	aee8 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    aee4:	2000      	movs	r0, #0
    aee6:	e7e8      	b.n	aeba <read_group_cb+0x4a>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    aee8:	2104      	movs	r1, #4
    aeea:	3008      	adds	r0, #8
    aeec:	f019 f8a4 	bl	24038 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    aef0:	4b09      	ldr	r3, [pc, #36]	; (af18 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    aef2:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    aef4:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    aef6:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    aef8:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    aefa:	4631      	mov	r1, r6
    aefc:	9300      	str	r3, [sp, #0]
    aefe:	9401      	str	r4, [sp, #4]
    af00:	2300      	movs	r3, #0
    af02:	4638      	mov	r0, r7
    af04:	f017 fa56 	bl	223b4 <att_chan_read>
	if (read < 0) {
    af08:	2800      	cmp	r0, #0
    af0a:	dbeb      	blt.n	aee4 <read_group_cb+0x74>
	if (!data->group) {
    af0c:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    af0e:	3800      	subs	r0, #0
    af10:	bf18      	it	ne
    af12:	2001      	movne	r0, #1
    af14:	e7d1      	b.n	aeba <read_group_cb+0x4a>
    af16:	bf00      	nop
    af18:	00022563 	.word	0x00022563

0000af1c <read_type_cb>:
{
    af1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    af20:	f8d2 8000 	ldr.w	r8, [r2]
{
    af24:	4606      	mov	r6, r0
    af26:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    af28:	6800      	ldr	r0, [r0, #0]
    af2a:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    af2c:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    af30:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    af32:	f016 fd27 	bl	21984 <bt_uuid_cmp>
    af36:	4607      	mov	r7, r0
    af38:	2800      	cmp	r0, #0
    af3a:	d13e      	bne.n	afba <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    af3c:	4628      	mov	r0, r5
    af3e:	2215      	movs	r2, #21
    af40:	4631      	mov	r1, r6
    af42:	f018 f851 	bl	22fe8 <bt_gatt_check_perm>
    af46:	4605      	mov	r5, r0
    af48:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    af4a:	b148      	cbz	r0, af60 <read_type_cb+0x44>
		if (data->rsp->len) {
    af4c:	68e3      	ldr	r3, [r4, #12]
    af4e:	781b      	ldrb	r3, [r3, #0]
    af50:	b923      	cbnz	r3, af5c <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    af52:	2500      	movs	r5, #0
}
    af54:	4628      	mov	r0, r5
    af56:	b003      	add	sp, #12
    af58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    af5c:	7527      	strb	r7, [r4, #20]
    af5e:	e7f8      	b.n	af52 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    af60:	68a0      	ldr	r0, [r4, #8]
    af62:	f019 f847 	bl	23ff4 <net_buf_frag_last>
    af66:	2102      	movs	r1, #2
    af68:	3008      	adds	r0, #8
    af6a:	f019 f865 	bl	24038 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    af6e:	4b14      	ldr	r3, [pc, #80]	; (afc0 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    af70:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    af72:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    af74:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    af78:	4631      	mov	r1, r6
    af7a:	9300      	str	r3, [sp, #0]
    af7c:	9401      	str	r4, [sp, #4]
    af7e:	462b      	mov	r3, r5
    af80:	4640      	mov	r0, r8
    af82:	f017 fa17 	bl	223b4 <att_chan_read>
	if (read < 0) {
    af86:	2800      	cmp	r0, #0
    af88:	da07      	bge.n	af9a <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    af8a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    af8e:	bf26      	itte	cs
    af90:	4240      	negcs	r0, r0
    af92:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    af94:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    af96:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    af98:	e7dc      	b.n	af54 <read_type_cb+0x38>
	if (!data->item) {
    af9a:	6923      	ldr	r3, [r4, #16]
    af9c:	2b00      	cmp	r3, #0
    af9e:	d0d8      	beq.n	af52 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    afa0:	68a0      	ldr	r0, [r4, #8]
    afa2:	f017 f996 	bl	222d2 <net_buf_frags_len>
    afa6:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    afaa:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    afac:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    afae:	7818      	ldrb	r0, [r3, #0]
    afb0:	4285      	cmp	r5, r0
    afb2:	bf94      	ite	ls
    afb4:	2500      	movls	r5, #0
    afb6:	2501      	movhi	r5, #1
    afb8:	e7cc      	b.n	af54 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    afba:	2501      	movs	r5, #1
    afbc:	e7ca      	b.n	af54 <read_type_cb+0x38>
    afbe:	bf00      	nop
    afc0:	000222ef 	.word	0x000222ef

0000afc4 <find_type_cb>:
{
    afc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    afc8:	f8d2 9000 	ldr.w	r9, [r2]
{
    afcc:	b091      	sub	sp, #68	; 0x44
    afce:	4607      	mov	r7, r0
    afd0:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    afd2:	2400      	movs	r4, #0
    afd4:	f642 0301 	movw	r3, #10241	; 0x2801
    afd8:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    afda:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    afde:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
    afe2:	a90b      	add	r1, sp, #44	; 0x2c
{
    afe4:	4615      	mov	r5, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    afe6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    afea:	f016 fccb 	bl	21984 <bt_uuid_cmp>
    afee:	2800      	cmp	r0, #0
    aff0:	d06a      	beq.n	b0c8 <find_type_cb+0x104>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    aff2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    aff6:	6838      	ldr	r0, [r7, #0]
    aff8:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
    affc:	a90b      	add	r1, sp, #44	; 0x2c
    affe:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    b002:	f016 fcbf 	bl	21984 <bt_uuid_cmp>
    b006:	4604      	mov	r4, r0
    b008:	b148      	cbz	r0, b01e <find_type_cb+0x5a>
		if (data->group &&
    b00a:	68ab      	ldr	r3, [r5, #8]
    b00c:	b11b      	cbz	r3, b016 <find_type_cb+0x52>
    b00e:	885a      	ldrh	r2, [r3, #2]
    b010:	42b2      	cmp	r2, r6
    b012:	d200      	bcs.n	b016 <find_type_cb+0x52>
			data->group->end_handle = sys_cpu_to_le16(handle);
    b014:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    b016:	2001      	movs	r0, #1
}
    b018:	b011      	add	sp, #68	; 0x44
    b01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    b01e:	6869      	ldr	r1, [r5, #4]
    b020:	4608      	mov	r0, r1
    b022:	f017 f956 	bl	222d2 <net_buf_frags_len>
    b026:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    b02a:	1a1b      	subs	r3, r3, r0
    b02c:	2b03      	cmp	r3, #3
    b02e:	d922      	bls.n	b076 <find_type_cb+0xb2>
	frag = net_buf_frag_last(data->buf);
    b030:	4608      	mov	r0, r1
    b032:	f018 ffdf 	bl	23ff4 <net_buf_frag_last>
    b036:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    b038:	6868      	ldr	r0, [r5, #4]
    b03a:	f017 f94a 	bl	222d2 <net_buf_frags_len>
    b03e:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
    b042:	f104 0b08 	add.w	fp, r4, #8
    b046:	ebaa 0a00 	sub.w	sl, sl, r0
    b04a:	4658      	mov	r0, fp
    b04c:	f019 f841 	bl	240d2 <net_buf_simple_tailroom>
    b050:	4582      	cmp	sl, r0
    b052:	d212      	bcs.n	b07a <find_type_cb+0xb6>
    b054:	6868      	ldr	r0, [r5, #4]
    b056:	f017 f93c 	bl	222d2 <net_buf_frags_len>
    b05a:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    b05e:	1a18      	subs	r0, r3, r0
	if (!len) {
    b060:	b998      	cbnz	r0, b08a <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    b062:	686b      	ldr	r3, [r5, #4]
    b064:	7998      	ldrb	r0, [r3, #6]
    b066:	f011 ff9d 	bl	1cfa4 <net_buf_pool_get>
    b06a:	2200      	movs	r2, #0
    b06c:	2300      	movs	r3, #0
    b06e:	f018 ff87 	bl	23f80 <net_buf_alloc_fixed>
		if (!frag) {
    b072:	4604      	mov	r4, r0
    b074:	b928      	cbnz	r0, b082 <find_type_cb+0xbe>
		return BT_GATT_ITER_STOP;
    b076:	4620      	mov	r0, r4
    b078:	e7ce      	b.n	b018 <find_type_cb+0x54>
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    b07a:	4658      	mov	r0, fp
    b07c:	f019 f829 	bl	240d2 <net_buf_simple_tailroom>
    b080:	e7ee      	b.n	b060 <find_type_cb+0x9c>
		net_buf_frag_add(data->buf, frag);
    b082:	4601      	mov	r1, r0
    b084:	6868      	ldr	r0, [r5, #4]
    b086:	f018 ffc6 	bl	24016 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    b08a:	2300      	movs	r3, #0
    b08c:	9300      	str	r3, [sp, #0]
    b08e:	f8d7 9004 	ldr.w	r9, [r7, #4]
    b092:	4639      	mov	r1, r7
    b094:	2310      	movs	r3, #16
    b096:	aa02      	add	r2, sp, #8
    b098:	4640      	mov	r0, r8
    b09a:	47c8      	blx	r9
	if (read < 0) {
    b09c:	1e07      	subs	r7, r0, #0
    b09e:	db13      	blt.n	b0c8 <find_type_cb+0x104>
	if (read != data->value_len) {
    b0a0:	7c2a      	ldrb	r2, [r5, #16]
    b0a2:	68e8      	ldr	r0, [r5, #12]
    b0a4:	42ba      	cmp	r2, r7
    b0a6:	d033      	beq.n	b110 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    b0a8:	4601      	mov	r1, r0
    b0aa:	a80b      	add	r0, sp, #44	; 0x2c
    b0ac:	f016 fc94 	bl	219d8 <bt_uuid_create>
    b0b0:	b968      	cbnz	r0, b0ce <find_type_cb+0x10a>
    b0b2:	4a19      	ldr	r2, [pc, #100]	; (b118 <find_type_cb+0x154>)
    b0b4:	4b19      	ldr	r3, [pc, #100]	; (b11c <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    b0b6:	7c29      	ldrb	r1, [r5, #16]
    b0b8:	4819      	ldr	r0, [pc, #100]	; (b120 <find_type_cb+0x15c>)
    b0ba:	1ad2      	subs	r2, r2, r3
    b0bc:	08d2      	lsrs	r2, r2, #3
    b0be:	0192      	lsls	r2, r2, #6
    b0c0:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    b0c4:	f014 fee8 	bl	1fe98 <log_1>
	data->group = NULL;
    b0c8:	2300      	movs	r3, #0
    b0ca:	60ab      	str	r3, [r5, #8]
    b0cc:	e7a3      	b.n	b016 <find_type_cb+0x52>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    b0ce:	b2fa      	uxtb	r2, r7
    b0d0:	a902      	add	r1, sp, #8
    b0d2:	a806      	add	r0, sp, #24
    b0d4:	f016 fc80 	bl	219d8 <bt_uuid_create>
    b0d8:	b948      	cbnz	r0, b0ee <find_type_cb+0x12a>
    b0da:	4a0f      	ldr	r2, [pc, #60]	; (b118 <find_type_cb+0x154>)
    b0dc:	4b0f      	ldr	r3, [pc, #60]	; (b11c <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    b0de:	4811      	ldr	r0, [pc, #68]	; (b124 <find_type_cb+0x160>)
    b0e0:	1ad2      	subs	r2, r2, r3
    b0e2:	08d2      	lsrs	r2, r2, #3
    b0e4:	0192      	lsls	r2, r2, #6
    b0e6:	f042 0202 	orr.w	r2, r2, #2
    b0ea:	4639      	mov	r1, r7
    b0ec:	e7ea      	b.n	b0c4 <find_type_cb+0x100>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    b0ee:	a906      	add	r1, sp, #24
    b0f0:	a80b      	add	r0, sp, #44	; 0x2c
    b0f2:	f016 fc47 	bl	21984 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    b0f6:	2800      	cmp	r0, #0
    b0f8:	d1e6      	bne.n	b0c8 <find_type_cb+0x104>
	data->err = 0x00;
    b0fa:	2300      	movs	r3, #0
    b0fc:	746b      	strb	r3, [r5, #17]
	data->group = net_buf_add(frag, sizeof(*data->group));
    b0fe:	2104      	movs	r1, #4
    b100:	f104 0008 	add.w	r0, r4, #8
    b104:	f018 ff98 	bl	24038 <net_buf_simple_add>
    b108:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    b10a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    b10c:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    b10e:	e782      	b.n	b016 <find_type_cb+0x52>
	} else if (memcmp(data->value, uuid, read)) {
    b110:	a902      	add	r1, sp, #8
    b112:	f016 fb58 	bl	217c6 <memcmp>
    b116:	e7ee      	b.n	b0f6 <find_type_cb+0x132>
    b118:	00024fd8 	.word	0x00024fd8
    b11c:	00024fd8 	.word	0x00024fd8
    b120:	00028291 	.word	0x00028291
    b124:	000282b0 	.word	0x000282b0

0000b128 <att_get>:
{
    b128:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    b12a:	7b43      	ldrb	r3, [r0, #13]
    b12c:	2b07      	cmp	r3, #7
    b12e:	d00b      	beq.n	b148 <att_get+0x20>
    b130:	4918      	ldr	r1, [pc, #96]	; (b194 <att_get+0x6c>)
    b132:	4b19      	ldr	r3, [pc, #100]	; (b198 <att_get+0x70>)
		BT_WARN("Not connected");
    b134:	4819      	ldr	r0, [pc, #100]	; (b19c <att_get+0x74>)
    b136:	1ac9      	subs	r1, r1, r3
    b138:	08c9      	lsrs	r1, r1, #3
    b13a:	0189      	lsls	r1, r1, #6
    b13c:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
    b140:	f014 fe9d 	bl	1fe7e <log_0>
		return NULL;
    b144:	2400      	movs	r4, #0
    b146:	e00e      	b.n	b166 <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    b148:	2104      	movs	r1, #4
    b14a:	f017 f88c 	bl	22266 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b14e:	4604      	mov	r4, r0
    b150:	b958      	cbnz	r0, b16a <att_get+0x42>
    b152:	4910      	ldr	r1, [pc, #64]	; (b194 <att_get+0x6c>)
    b154:	4b10      	ldr	r3, [pc, #64]	; (b198 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    b156:	4812      	ldr	r0, [pc, #72]	; (b1a0 <att_get+0x78>)
    b158:	1ac9      	subs	r1, r1, r3
    b15a:	08c9      	lsrs	r1, r1, #3
    b15c:	0189      	lsls	r1, r1, #6
    b15e:	f041 0101 	orr.w	r1, r1, #1
    b162:	f014 fe8c 	bl	1fe7e <log_0>
}
    b166:	4620      	mov	r0, r4
    b168:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b16a:	f3bf 8f5b 	dmb	ish
    b16e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
    b172:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    b176:	075b      	lsls	r3, r3, #29
    b178:	d508      	bpl.n	b18c <att_get+0x64>
    b17a:	4906      	ldr	r1, [pc, #24]	; (b194 <att_get+0x6c>)
    b17c:	4b06      	ldr	r3, [pc, #24]	; (b198 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    b17e:	4809      	ldr	r0, [pc, #36]	; (b1a4 <att_get+0x7c>)
    b180:	1ac9      	subs	r1, r1, r3
    b182:	08c9      	lsrs	r1, r1, #3
    b184:	0189      	lsls	r1, r1, #6
    b186:	f041 0102 	orr.w	r1, r1, #2
    b18a:	e7d9      	b.n	b140 <att_get+0x18>
	return att_chan->att;
    b18c:	f850 4c08 	ldr.w	r4, [r0, #-8]
    b190:	e7e9      	b.n	b166 <att_get+0x3e>
    b192:	bf00      	nop
    b194:	00024fd8 	.word	0x00024fd8
    b198:	00024fd8 	.word	0x00024fd8
    b19c:	000282cf 	.word	0x000282cf
    b1a0:	000282dd 	.word	0x000282dd
    b1a4:	000282f8 	.word	0x000282f8

0000b1a8 <chan_req_sent>:
	if (chan->req) {
    b1a8:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    b1ac:	b13b      	cbz	r3, b1be <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b1ae:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    b1b2:	f247 5230 	movw	r2, #30000	; 0x7530
    b1b6:	4802      	ldr	r0, [pc, #8]	; (b1c0 <chan_req_sent+0x18>)
    b1b8:	2300      	movs	r3, #0
    b1ba:	f013 bf2f 	b.w	1f01c <k_delayed_work_submit_to_queue>
}
    b1be:	4770      	bx	lr
    b1c0:	200010e0 	.word	0x200010e0

0000b1c4 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    b1c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    b1c6:	2300      	movs	r3, #0
{
    b1c8:	4606      	mov	r6, r0
    b1ca:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    b1cc:	482c      	ldr	r0, [pc, #176]	; (b280 <bt_att_accept+0xbc>)
    b1ce:	2200      	movs	r2, #0
    b1d0:	4669      	mov	r1, sp
    b1d2:	f013 f8ff 	bl	1e3d4 <k_mem_slab_alloc>
    b1d6:	4604      	mov	r4, r0
    b1d8:	b178      	cbz	r0, b1fa <bt_att_accept+0x36>
    b1da:	4a2a      	ldr	r2, [pc, #168]	; (b284 <bt_att_accept+0xc0>)
    b1dc:	4b2a      	ldr	r3, [pc, #168]	; (b288 <bt_att_accept+0xc4>)
		BT_ERR("No available ATT context for conn %p", conn);
    b1de:	482b      	ldr	r0, [pc, #172]	; (b28c <bt_att_accept+0xc8>)
    b1e0:	1ad2      	subs	r2, r2, r3
    b1e2:	08d2      	lsrs	r2, r2, #3
    b1e4:	0192      	lsls	r2, r2, #6
    b1e6:	f042 0201 	orr.w	r2, r2, #1
    b1ea:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    b1ec:	f014 fe54 	bl	1fe98 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    b1f0:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    b1f4:	4620      	mov	r0, r4
    b1f6:	b003      	add	sp, #12
    b1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    b1fa:	4601      	mov	r1, r0
    b1fc:	222c      	movs	r2, #44	; 0x2c
    b1fe:	9800      	ldr	r0, [sp, #0]
    b200:	f016 fb1c 	bl	2183c <memset>
	att->conn = conn;
    b204:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    b206:	4822      	ldr	r0, [pc, #136]	; (b290 <bt_att_accept+0xcc>)
	list->tail = NULL;
    b208:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    b20a:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    b20e:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    b212:	2200      	movs	r2, #0
    b214:	2300      	movs	r3, #0
    b216:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    b218:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    b21a:	f013 f8db 	bl	1e3d4 <k_mem_slab_alloc>
    b21e:	4604      	mov	r4, r0
    b220:	b148      	cbz	r0, b236 <bt_att_accept+0x72>
    b222:	4a18      	ldr	r2, [pc, #96]	; (b284 <bt_att_accept+0xc0>)
    b224:	4b18      	ldr	r3, [pc, #96]	; (b288 <bt_att_accept+0xc4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    b226:	6829      	ldr	r1, [r5, #0]
    b228:	481a      	ldr	r0, [pc, #104]	; (b294 <bt_att_accept+0xd0>)
    b22a:	1ad2      	subs	r2, r2, r3
    b22c:	08d2      	lsrs	r2, r2, #3
    b22e:	0192      	lsls	r2, r2, #6
    b230:	f042 0201 	orr.w	r2, r2, #1
    b234:	e7da      	b.n	b1ec <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    b236:	4601      	mov	r1, r0
    b238:	f44f 7298 	mov.w	r2, #304	; 0x130
    b23c:	9801      	ldr	r0, [sp, #4]
    b23e:	f016 fafd 	bl	2183c <memset>
	chan->chan.chan.ops = &ops;
    b242:	9801      	ldr	r0, [sp, #4]
    b244:	4b14      	ldr	r3, [pc, #80]	; (b298 <bt_att_accept+0xd4>)
    b246:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    b248:	30c8      	adds	r0, #200	; 0xc8
    b24a:	f019 f9a7 	bl	2459c <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    b24e:	9801      	ldr	r0, [sp, #4]
    b250:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
    b254:	2203      	movs	r2, #3
    b256:	4611      	mov	r1, r2
    b258:	f019 faf8 	bl	2484c <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b25c:	9b01      	ldr	r3, [sp, #4]
    b25e:	f3bf 8f5b 	dmb	ish
    b262:	33c0      	adds	r3, #192	; 0xc0
    b264:	e853 2f00 	ldrex	r2, [r3]
    b268:	e843 4100 	strex	r1, r4, [r3]
    b26c:	2900      	cmp	r1, #0
    b26e:	d1f9      	bne.n	b264 <bt_att_accept+0xa0>
    b270:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    b274:	9b01      	ldr	r3, [sp, #4]
    b276:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    b27a:	603b      	str	r3, [r7, #0]
	return 0;
    b27c:	e7ba      	b.n	b1f4 <bt_att_accept+0x30>
    b27e:	bf00      	nop
    b280:	200006d8 	.word	0x200006d8
    b284:	00024fd8 	.word	0x00024fd8
    b288:	00024fd8 	.word	0x00024fd8
    b28c:	0002831c 	.word	0x0002831c
    b290:	200006f4 	.word	0x200006f4
    b294:	00028341 	.word	0x00028341
    b298:	200001c4 	.word	0x200001c4

0000b29c <bt_att_connected>:
{
    b29c:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    b29e:	2104      	movs	r1, #4
{
    b2a0:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    b2a2:	6800      	ldr	r0, [r0, #0]
    b2a4:	f016 ffcf 	bl	22246 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    b2a8:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    b2ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b2ae:	b91b      	cbnz	r3, b2b8 <bt_att_connected+0x1c>
	z_impl_k_queue_init(queue);
    b2b0:	f105 000c 	add.w	r0, r5, #12
    b2b4:	f019 f972 	bl	2459c <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    b2b8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
    b2ba:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
Z_GENLIST_PREPEND(slist, snode)
    b2be:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    b2c0:	f504 7392 	add.w	r3, r4, #292	; 0x124
	list->head = node;
    b2c4:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    b2c6:	b902      	cbnz	r2, b2ca <bt_att_connected+0x2e>
	list->tail = node;
    b2c8:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b2ca:	f3bf 8f5b 	dmb	ish
    b2ce:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    b2d2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    b2d6:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    b2d8:	bf5e      	ittt	pl
    b2da:	2317      	movpl	r3, #23
    b2dc:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    b2e0:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    b2e4:	2230      	movs	r2, #48	; 0x30
    b2e6:	2100      	movs	r1, #0
    b2e8:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    b2ec:	f016 faa6 	bl	2183c <memset>
    b2f0:	4b01      	ldr	r3, [pc, #4]	; (b2f8 <bt_att_connected+0x5c>)
    b2f2:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
}
    b2f6:	bd38      	pop	{r3, r4, r5, pc}
    b2f8:	0000bf25 	.word	0x0000bf25

0000b2fc <chan_send>:
{
    b2fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    b300:	688b      	ldr	r3, [r1, #8]
    b302:	781b      	ldrb	r3, [r3, #0]
    b304:	2bd2      	cmp	r3, #210	; 0xd2
{
    b306:	4605      	mov	r5, r0
    b308:	460c      	mov	r4, r1
    b30a:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    b30c:	d116      	bne.n	b33c <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
    b30e:	6803      	ldr	r3, [r0, #0]
    b310:	6818      	ldr	r0, [r3, #0]
    b312:	f018 fd60 	bl	23dd6 <bt_smp_sign>
		if (err) {
    b316:	4606      	mov	r6, r0
    b318:	b180      	cbz	r0, b33c <chan_send+0x40>
    b31a:	4928      	ldr	r1, [pc, #160]	; (b3bc <chan_send+0xc0>)
    b31c:	4b28      	ldr	r3, [pc, #160]	; (b3c0 <chan_send+0xc4>)
			BT_ERR("Error signing data");
    b31e:	4829      	ldr	r0, [pc, #164]	; (b3c4 <chan_send+0xc8>)
    b320:	1ac9      	subs	r1, r1, r3
    b322:	08c9      	lsrs	r1, r1, #3
    b324:	0189      	lsls	r1, r1, #6
    b326:	f041 0101 	orr.w	r1, r1, #1
    b32a:	f014 fda8 	bl	1fe7e <log_0>
		net_buf_unref(buf);
    b32e:	4620      	mov	r0, r4
    b330:	f011 fef4 	bl	1d11c <net_buf_unref>
}
    b334:	4630      	mov	r0, r6
    b336:	b003      	add	sp, #12
    b338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    b33c:	f104 0008 	add.w	r0, r4, #8
    b340:	f018 fec3 	bl	240ca <net_buf_simple_headroom>
	state->len = buf->len;
    b344:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    b348:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
    b34a:	f1b9 0f00 	cmp.w	r9, #0
    b34e:	d10a      	bne.n	b366 <chan_send+0x6a>
	switch (att_op_get_type(buf->data[0])) {
    b350:	68a3      	ldr	r3, [r4, #8]
    b352:	7818      	ldrb	r0, [r3, #0]
    b354:	f016 ffdd 	bl	22312 <att_op_get_type>
    b358:	1e43      	subs	r3, r0, #1
    b35a:	b2db      	uxtb	r3, r3
    b35c:	2b04      	cmp	r3, #4
    b35e:	bf9c      	itt	ls
    b360:	4a19      	ldrls	r2, [pc, #100]	; (b3c8 <chan_send+0xcc>)
    b362:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    b366:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    b368:	f8c5 9128 	str.w	r9, [r5, #296]	; 0x128
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    b36c:	4620      	mov	r0, r4
    b36e:	681e      	ldr	r6, [r3, #0]
    b370:	f018 fe3c 	bl	23fec <net_buf_ref>
    b374:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
	if (cb == chan_rsp_sent) {
    b378:	4b14      	ldr	r3, [pc, #80]	; (b3cc <chan_send+0xd0>)
    b37a:	4299      	cmp	r1, r3
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    b37c:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
    b37e:	d019      	beq.n	b3b4 <chan_send+0xb8>
	} else if (cb == chan_cfm_sent) {
    b380:	4b13      	ldr	r3, [pc, #76]	; (b3d0 <chan_send+0xd4>)
    b382:	4299      	cmp	r1, r3
    b384:	d018      	beq.n	b3b8 <chan_send+0xbc>
		return att_sent;
    b386:	f8df c05c 	ldr.w	ip, [pc, #92]	; b3e4 <chan_send+0xe8>
    b38a:	4b12      	ldr	r3, [pc, #72]	; (b3d4 <chan_send+0xd8>)
    b38c:	4812      	ldr	r0, [pc, #72]	; (b3d8 <chan_send+0xdc>)
    b38e:	4561      	cmp	r1, ip
    b390:	bf18      	it	ne
    b392:	4603      	movne	r3, r0
				&chan->chan.chan);
    b394:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    b396:	4630      	mov	r0, r6
    b398:	9500      	str	r5, [sp, #0]
    b39a:	2104      	movs	r1, #4
    b39c:	f016 ff23 	bl	221e6 <bt_l2cap_send_cb>
	if (!err) {
    b3a0:	4606      	mov	r6, r0
    b3a2:	2800      	cmp	r0, #0
    b3a4:	d0c3      	beq.n	b32e <chan_send+0x32>
	buf->data = buf->__buf + state->offset;
    b3a6:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    b3a8:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    b3ac:	fa10 f787 	uxtah	r7, r0, r7
    b3b0:	60a7      	str	r7, [r4, #8]
}
    b3b2:	e7bf      	b.n	b334 <chan_send+0x38>
		return att_rsp_sent;
    b3b4:	4b09      	ldr	r3, [pc, #36]	; (b3dc <chan_send+0xe0>)
    b3b6:	e7ed      	b.n	b394 <chan_send+0x98>
		return att_cfm_sent;
    b3b8:	4b09      	ldr	r3, [pc, #36]	; (b3e0 <chan_send+0xe4>)
    b3ba:	e7eb      	b.n	b394 <chan_send+0x98>
    b3bc:	00024fd8 	.word	0x00024fd8
    b3c0:	00024fd8 	.word	0x00024fd8
    b3c4:	00028366 	.word	0x00028366
    b3c8:	00025694 	.word	0x00025694
    b3cc:	00022587 	.word	0x00022587
    b3d0:	000225a3 	.word	0x000225a3
    b3d4:	0000ae49 	.word	0x0000ae49
    b3d8:	000222e3 	.word	0x000222e3
    b3dc:	0000ae39 	.word	0x0000ae39
    b3e0:	0000ae29 	.word	0x0000ae29
    b3e4:	0000b1a9 	.word	0x0000b1a9

0000b3e8 <att_write_cmd>:
{
    b3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3ea:	4604      	mov	r4, r0
    b3ec:	b087      	sub	sp, #28
	handle = net_buf_pull_le16(buf);
    b3ee:	f101 0008 	add.w	r0, r1, #8
{
    b3f2:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    b3f4:	f018 fe61 	bl	240ba <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    b3f8:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
    b3fa:	68af      	ldr	r7, [r5, #8]
    b3fc:	89ad      	ldrh	r5, [r5, #12]
	handle = net_buf_pull_le16(buf);
    b3fe:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    b400:	2100      	movs	r1, #0
    b402:	6818      	ldr	r0, [r3, #0]
    b404:	f017 ff18 	bl	23238 <bt_gatt_change_aware>
    b408:	b328      	cbz	r0, b456 <att_write_cmd+0x6e>
	if (!handle) {
    b40a:	b336      	cbz	r6, b45a <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
    b40c:	2218      	movs	r2, #24
    b40e:	2100      	movs	r1, #0
    b410:	4668      	mov	r0, sp
    b412:	f016 fa13 	bl	2183c <memset>
	data.conn = chan->att->conn;
    b416:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b418:	4a11      	ldr	r2, [pc, #68]	; (b460 <att_write_cmd+0x78>)
	data.conn = chan->att->conn;
    b41a:	681b      	ldr	r3, [r3, #0]
    b41c:	9300      	str	r3, [sp, #0]
	data.req = req;
    b41e:	2300      	movs	r3, #0
    b420:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
    b424:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    b428:	2301      	movs	r3, #1
    b42a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b42e:	4631      	mov	r1, r6
    b430:	466b      	mov	r3, sp
    b432:	4630      	mov	r0, r6
	data.value = value;
    b434:	9703      	str	r7, [sp, #12]
	data.len = len;
    b436:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b43a:	f016 ffb0 	bl	2239e <bt_gatt_foreach_attr>
	if (data.err) {
    b43e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b442:	b92b      	cbnz	r3, b450 <att_write_cmd+0x68>
	if (data.buf) {
    b444:	9901      	ldr	r1, [sp, #4]
    b446:	b119      	cbz	r1, b450 <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b448:	4a06      	ldr	r2, [pc, #24]	; (b464 <att_write_cmd+0x7c>)
    b44a:	4620      	mov	r0, r4
    b44c:	f017 f989 	bl	22762 <bt_att_chan_send_rsp>
    b450:	2000      	movs	r0, #0
}
    b452:	b007      	add	sp, #28
    b454:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    b456:	2012      	movs	r0, #18
    b458:	e7fb      	b.n	b452 <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
    b45a:	2001      	movs	r0, #1
    b45c:	e7f9      	b.n	b452 <att_write_cmd+0x6a>
    b45e:	bf00      	nop
    b460:	000225bf 	.word	0x000225bf
    b464:	00022587 	.word	0x00022587

0000b468 <bt_att_chan_create_pdu>:
{
    b468:	b538      	push	{r3, r4, r5, lr}
    b46a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    b46c:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    b470:	3201      	adds	r2, #1
    b472:	428a      	cmp	r2, r1
    b474:	d90c      	bls.n	b490 <bt_att_chan_create_pdu+0x28>
    b476:	481a      	ldr	r0, [pc, #104]	; (b4e0 <bt_att_chan_create_pdu+0x78>)
    b478:	4b1a      	ldr	r3, [pc, #104]	; (b4e4 <bt_att_chan_create_pdu+0x7c>)
    b47a:	1a1b      	subs	r3, r3, r0
    b47c:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    b47e:	019b      	lsls	r3, r3, #6
    b480:	4819      	ldr	r0, [pc, #100]	; (b4e8 <bt_att_chan_create_pdu+0x80>)
    b482:	f043 0302 	orr.w	r3, r3, #2
    b486:	f014 fd1b 	bl	1fec0 <log_2>
		return NULL;
    b48a:	2400      	movs	r4, #0
}
    b48c:	4620      	mov	r0, r4
    b48e:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    b490:	4628      	mov	r0, r5
    b492:	f016 ff3e 	bl	22312 <att_op_get_type>
    b496:	2802      	cmp	r0, #2
    b498:	d001      	beq.n	b49e <bt_att_chan_create_pdu+0x36>
    b49a:	2804      	cmp	r0, #4
    b49c:	d114      	bne.n	b4c8 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    b49e:	f247 5230 	movw	r2, #30000	; 0x7530
    b4a2:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    b4a4:	2100      	movs	r1, #0
    b4a6:	4608      	mov	r0, r1
    b4a8:	f016 fe9a 	bl	221e0 <bt_l2cap_create_pdu_timeout>
    b4ac:	4604      	mov	r4, r0
	if (!buf) {
    b4ae:	b980      	cbnz	r0, b4d2 <bt_att_chan_create_pdu+0x6a>
    b4b0:	4b0b      	ldr	r3, [pc, #44]	; (b4e0 <bt_att_chan_create_pdu+0x78>)
    b4b2:	4a0c      	ldr	r2, [pc, #48]	; (b4e4 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    b4b4:	480d      	ldr	r0, [pc, #52]	; (b4ec <bt_att_chan_create_pdu+0x84>)
    b4b6:	1ad2      	subs	r2, r2, r3
    b4b8:	08d2      	lsrs	r2, r2, #3
    b4ba:	0192      	lsls	r2, r2, #6
    b4bc:	f042 0201 	orr.w	r2, r2, #1
    b4c0:	4629      	mov	r1, r5
    b4c2:	f014 fce9 	bl	1fe98 <log_1>
		return NULL;
    b4c6:	e7e1      	b.n	b48c <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    b4c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b4cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b4d0:	e7e8      	b.n	b4a4 <bt_att_chan_create_pdu+0x3c>
	hdr = net_buf_add(buf, sizeof(*hdr));
    b4d2:	2101      	movs	r1, #1
    b4d4:	3008      	adds	r0, #8
    b4d6:	f018 fdaf 	bl	24038 <net_buf_simple_add>
	hdr->code = op;
    b4da:	7005      	strb	r5, [r0, #0]
	return buf;
    b4dc:	e7d6      	b.n	b48c <bt_att_chan_create_pdu+0x24>
    b4de:	bf00      	nop
    b4e0:	00024fd8 	.word	0x00024fd8
    b4e4:	00024fd8 	.word	0x00024fd8
    b4e8:	00028379 	.word	0x00028379
    b4ec:	0002814a 	.word	0x0002814a

0000b4f0 <att_indicate>:
{
    b4f0:	b570      	push	{r4, r5, r6, lr}
    b4f2:	4604      	mov	r4, r0
	handle = net_buf_pull_le16(buf);
    b4f4:	f101 0008 	add.w	r0, r1, #8
{
    b4f8:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    b4fa:	f018 fdde 	bl	240ba <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    b4fe:	6826      	ldr	r6, [r4, #0]
    b500:	89ab      	ldrh	r3, [r5, #12]
    b502:	68aa      	ldr	r2, [r5, #8]
	handle = net_buf_pull_le16(buf);
    b504:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    b506:	6830      	ldr	r0, [r6, #0]
    b508:	f017 fe6b 	bl	231e2 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
    b50c:	211e      	movs	r1, #30
    b50e:	2200      	movs	r2, #0
    b510:	4620      	mov	r0, r4
    b512:	f7ff ffa9 	bl	b468 <bt_att_chan_create_pdu>
	if (!buf) {
    b516:	4601      	mov	r1, r0
    b518:	b118      	cbz	r0, b522 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
    b51a:	4a03      	ldr	r2, [pc, #12]	; (b528 <att_indicate+0x38>)
    b51c:	4620      	mov	r0, r4
    b51e:	f017 f920 	bl	22762 <bt_att_chan_send_rsp>
}
    b522:	2000      	movs	r0, #0
    b524:	bd70      	pop	{r4, r5, r6, pc}
    b526:	bf00      	nop
    b528:	000225a3 	.word	0x000225a3

0000b52c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    b52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b530:	4688      	mov	r8, r1
    b532:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    b534:	2101      	movs	r1, #1
    b536:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    b538:	4605      	mov	r5, r0
    b53a:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    b53c:	f7ff ff94 	bl	b468 <bt_att_chan_create_pdu>
	if (!buf) {
    b540:	4604      	mov	r4, r0
    b542:	b178      	cbz	r0, b564 <send_err_rsp.part.0+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    b544:	2104      	movs	r1, #4
    b546:	3008      	adds	r0, #8
    b548:	f018 fd76 	bl	24038 <net_buf_simple_add>
	rsp->request = req;
    b54c:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    b550:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    b552:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    b556:	4621      	mov	r1, r4
    b558:	4628      	mov	r0, r5
    b55a:	4a03      	ldr	r2, [pc, #12]	; (b568 <send_err_rsp.part.0+0x3c>)
}
    b55c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    b560:	f017 b8ff 	b.w	22762 <bt_att_chan_send_rsp>
}
    b564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b568:	00022587 	.word	0x00022587

0000b56c <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    b56c:	898b      	ldrh	r3, [r1, #12]
{
    b56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b572:	4604      	mov	r4, r0
    b574:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    b576:	b963      	cbnz	r3, b592 <bt_att_recv+0x26>
    b578:	494a      	ldr	r1, [pc, #296]	; (b6a4 <bt_att_recv+0x138>)
    b57a:	4b4b      	ldr	r3, [pc, #300]	; (b6a8 <bt_att_recv+0x13c>)
		BT_ERR("Too small ATT PDU received");
    b57c:	484b      	ldr	r0, [pc, #300]	; (b6ac <bt_att_recv+0x140>)
    b57e:	1ac9      	subs	r1, r1, r3
    b580:	08c9      	lsrs	r1, r1, #3
    b582:	0189      	lsls	r1, r1, #6
    b584:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    b588:	f014 fc79 	bl	1fe7e <log_0>
}
    b58c:	2000      	movs	r0, #0
    b58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    b592:	2101      	movs	r1, #1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    b594:	f1a0 0608 	sub.w	r6, r0, #8
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    b598:	f108 0008 	add.w	r0, r8, #8
    b59c:	f018 fd7d 	bl	2409a <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    b5a0:	4a43      	ldr	r2, [pc, #268]	; (b6b0 <bt_att_recv+0x144>)
    b5a2:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    b5a4:	4605      	mov	r5, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    b5a6:	2300      	movs	r3, #0
    b5a8:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
    b5aa:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    b5ae:	4288      	cmp	r0, r1
    b5b0:	d11d      	bne.n	b5ee <bt_att_recv+0x82>
		if (handler->type == ATT_REQUEST &&
    b5b2:	00d8      	lsls	r0, r3, #3
    b5b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    b5b8:	789f      	ldrb	r7, [r3, #2]
    b5ba:	2f01      	cmp	r7, #1
    b5bc:	d132      	bne.n	b624 <bt_att_recv+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b5be:	f3bf 8f5b 	dmb	ish
    b5c2:	34b8      	adds	r4, #184	; 0xb8
    b5c4:	e854 3f00 	ldrex	r3, [r4]
    b5c8:	f043 0201 	orr.w	r2, r3, #1
    b5cc:	e844 2100 	strex	r1, r2, [r4]
    b5d0:	2900      	cmp	r1, #0
    b5d2:	d1f7      	bne.n	b5c4 <bt_att_recv+0x58>
    b5d4:	f3bf 8f5b 	dmb	ish
    b5d8:	07da      	lsls	r2, r3, #31
    b5da:	d53d      	bpl.n	b658 <bt_att_recv+0xec>
    b5dc:	4931      	ldr	r1, [pc, #196]	; (b6a4 <bt_att_recv+0x138>)
    b5de:	4b32      	ldr	r3, [pc, #200]	; (b6a8 <bt_att_recv+0x13c>)
			BT_WARN("Ignoring unexpected request");
    b5e0:	4834      	ldr	r0, [pc, #208]	; (b6b4 <bt_att_recv+0x148>)
    b5e2:	1ac9      	subs	r1, r1, r3
    b5e4:	08c9      	lsrs	r1, r1, #3
    b5e6:	0189      	lsls	r1, r1, #6
    b5e8:	f041 0102 	orr.w	r1, r1, #2
    b5ec:	e7cc      	b.n	b588 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    b5ee:	3301      	adds	r3, #1
    b5f0:	2b1c      	cmp	r3, #28
    b5f2:	d1da      	bne.n	b5aa <bt_att_recv+0x3e>
    b5f4:	4b2c      	ldr	r3, [pc, #176]	; (b6a8 <bt_att_recv+0x13c>)
    b5f6:	4a2b      	ldr	r2, [pc, #172]	; (b6a4 <bt_att_recv+0x138>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    b5f8:	482f      	ldr	r0, [pc, #188]	; (b6b8 <bt_att_recv+0x14c>)
    b5fa:	1ad2      	subs	r2, r2, r3
    b5fc:	08d2      	lsrs	r2, r2, #3
    b5fe:	0192      	lsls	r2, r2, #6
    b600:	f042 0202 	orr.w	r2, r2, #2
    b604:	f014 fc48 	bl	1fe98 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    b608:	7829      	ldrb	r1, [r5, #0]
    b60a:	4608      	mov	r0, r1
    b60c:	f016 fe81 	bl	22312 <att_op_get_type>
    b610:	2800      	cmp	r0, #0
    b612:	d0bb      	beq.n	b58c <bt_att_recv+0x20>
	if (!req) {
    b614:	2900      	cmp	r1, #0
    b616:	d0b9      	beq.n	b58c <bt_att_recv+0x20>
    b618:	2306      	movs	r3, #6
    b61a:	2200      	movs	r2, #0
    b61c:	4630      	mov	r0, r6
    b61e:	f7ff ff85 	bl	b52c <send_err_rsp.part.0>
    b622:	e7b3      	b.n	b58c <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    b624:	2f05      	cmp	r7, #5
    b626:	d117      	bne.n	b658 <bt_att_recv+0xec>
    b628:	f3bf 8f5b 	dmb	ish
    b62c:	34b8      	adds	r4, #184	; 0xb8
    b62e:	e854 3f00 	ldrex	r3, [r4]
    b632:	f043 0202 	orr.w	r2, r3, #2
    b636:	e844 2100 	strex	r1, r2, [r4]
    b63a:	2900      	cmp	r1, #0
    b63c:	d1f7      	bne.n	b62e <bt_att_recv+0xc2>
    b63e:	f3bf 8f5b 	dmb	ish
    b642:	079b      	lsls	r3, r3, #30
    b644:	d508      	bpl.n	b658 <bt_att_recv+0xec>
    b646:	4917      	ldr	r1, [pc, #92]	; (b6a4 <bt_att_recv+0x138>)
    b648:	4b17      	ldr	r3, [pc, #92]	; (b6a8 <bt_att_recv+0x13c>)
			BT_WARN("Ignoring unexpected indication");
    b64a:	481c      	ldr	r0, [pc, #112]	; (b6bc <bt_att_recv+0x150>)
    b64c:	1ac9      	subs	r1, r1, r3
    b64e:	08c9      	lsrs	r1, r1, #3
    b650:	0189      	lsls	r1, r1, #6
    b652:	f041 0102 	orr.w	r1, r1, #2
    b656:	e797      	b.n	b588 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    b658:	eb0c 0300 	add.w	r3, ip, r0
    b65c:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    b660:	785a      	ldrb	r2, [r3, #1]
    b662:	428a      	cmp	r2, r1
    b664:	d90e      	bls.n	b684 <bt_att_recv+0x118>
    b666:	4a10      	ldr	r2, [pc, #64]	; (b6a8 <bt_att_recv+0x13c>)
    b668:	4b0e      	ldr	r3, [pc, #56]	; (b6a4 <bt_att_recv+0x138>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    b66a:	4815      	ldr	r0, [pc, #84]	; (b6c0 <bt_att_recv+0x154>)
    b66c:	1a9b      	subs	r3, r3, r2
    b66e:	08db      	lsrs	r3, r3, #3
    b670:	019b      	lsls	r3, r3, #6
    b672:	782a      	ldrb	r2, [r5, #0]
    b674:	f043 0301 	orr.w	r3, r3, #1
    b678:	f014 fc22 	bl	1fec0 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    b67c:	2f01      	cmp	r7, #1
    b67e:	d185      	bne.n	b58c <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    b680:	2304      	movs	r3, #4
    b682:	e00a      	b.n	b69a <bt_att_recv+0x12e>
		err = handler->func(att_chan, buf);
    b684:	685b      	ldr	r3, [r3, #4]
    b686:	4641      	mov	r1, r8
    b688:	4630      	mov	r0, r6
    b68a:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    b68c:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    b68e:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    b690:	f47f af7c 	bne.w	b58c <bt_att_recv+0x20>
    b694:	2800      	cmp	r0, #0
    b696:	f43f af79 	beq.w	b58c <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    b69a:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    b69c:	2900      	cmp	r1, #0
    b69e:	f43f af75 	beq.w	b58c <bt_att_recv+0x20>
    b6a2:	e7ba      	b.n	b61a <bt_att_recv+0xae>
    b6a4:	00024fd8 	.word	0x00024fd8
    b6a8:	00024fd8 	.word	0x00024fd8
    b6ac:	0002839e 	.word	0x0002839e
    b6b0:	000256a8 	.word	0x000256a8
    b6b4:	000283b9 	.word	0x000283b9
    b6b8:	00028413 	.word	0x00028413
    b6bc:	000283d5 	.word	0x000283d5
    b6c0:	000283f4 	.word	0x000283f4

0000b6c4 <att_write_req>:
{
    b6c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b6c8:	4604      	mov	r4, r0
    b6ca:	b087      	sub	sp, #28
	handle = net_buf_pull_le16(buf);
    b6cc:	f101 0008 	add.w	r0, r1, #8
{
    b6d0:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    b6d2:	f018 fcf2 	bl	240ba <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    b6d6:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
    b6d8:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    b6dc:	89ad      	ldrh	r5, [r5, #12]
	handle = net_buf_pull_le16(buf);
    b6de:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    b6e0:	2101      	movs	r1, #1
    b6e2:	6818      	ldr	r0, [r3, #0]
    b6e4:	f017 fda8 	bl	23238 <bt_gatt_change_aware>
    b6e8:	2800      	cmp	r0, #0
    b6ea:	d040      	beq.n	b76e <att_write_req+0xaa>
	if (!handle) {
    b6ec:	2e00      	cmp	r6, #0
    b6ee:	d040      	beq.n	b772 <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
    b6f0:	2218      	movs	r2, #24
    b6f2:	2100      	movs	r1, #0
    b6f4:	4668      	mov	r0, sp
    b6f6:	f016 f8a1 	bl	2183c <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    b6fa:	2200      	movs	r2, #0
    b6fc:	2113      	movs	r1, #19
    b6fe:	4620      	mov	r0, r4
    b700:	f7ff feb2 	bl	b468 <bt_att_chan_create_pdu>
    b704:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    b706:	b380      	cbz	r0, b76a <att_write_req+0xa6>
	data.conn = chan->att->conn;
    b708:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b70a:	4a1b      	ldr	r2, [pc, #108]	; (b778 <att_write_req+0xb4>)
	data.conn = chan->att->conn;
    b70c:	681b      	ldr	r3, [r3, #0]
    b70e:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    b710:	2301      	movs	r3, #1
    b712:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
    b716:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
    b71a:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b71c:	466b      	mov	r3, sp
    b71e:	4631      	mov	r1, r6
    b720:	4630      	mov	r0, r6
	data.len = len;
    b722:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
    b726:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
    b72a:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
    b72e:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    b732:	f016 fe34 	bl	2239e <bt_gatt_foreach_attr>
	if (data.err) {
    b736:	f89d 5014 	ldrb.w	r5, [sp, #20]
    b73a:	b175      	cbz	r5, b75a <att_write_req+0x96>
			net_buf_unref(data.buf);
    b73c:	9801      	ldr	r0, [sp, #4]
    b73e:	f011 fced 	bl	1d11c <net_buf_unref>
	if (!req) {
    b742:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b746:	4632      	mov	r2, r6
    b748:	4641      	mov	r1, r8
    b74a:	4620      	mov	r0, r4
    b74c:	f7ff feee 	bl	b52c <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    b750:	463d      	mov	r5, r7
}
    b752:	4628      	mov	r0, r5
    b754:	b007      	add	sp, #28
    b756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    b75a:	9901      	ldr	r1, [sp, #4]
    b75c:	2900      	cmp	r1, #0
    b75e:	d0f8      	beq.n	b752 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b760:	4a06      	ldr	r2, [pc, #24]	; (b77c <att_write_req+0xb8>)
    b762:	4620      	mov	r0, r4
    b764:	f016 fffd 	bl	22762 <bt_att_chan_send_rsp>
    b768:	e7f3      	b.n	b752 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
    b76a:	250e      	movs	r5, #14
    b76c:	e7f1      	b.n	b752 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    b76e:	2512      	movs	r5, #18
    b770:	e7ef      	b.n	b752 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
    b772:	2501      	movs	r5, #1
    b774:	e7ed      	b.n	b752 <att_write_req+0x8e>
    b776:	bf00      	nop
    b778:	000225bf 	.word	0x000225bf
    b77c:	00022587 	.word	0x00022587

0000b780 <bt_att_create_pdu>:
{
    b780:	b570      	push	{r4, r5, r6, lr}
    b782:	460e      	mov	r6, r1
    b784:	4615      	mov	r5, r2
	att = att_get(conn);
    b786:	f7ff fccf 	bl	b128 <att_get>
	if (!att) {
    b78a:	b1c0      	cbz	r0, b7be <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b78c:	6a43      	ldr	r3, [r0, #36]	; 0x24
	return list->head;
    b78e:	1c69      	adds	r1, r5, #1
    b790:	b15b      	cbz	r3, b7aa <bt_att_create_pdu+0x2a>
    b792:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
    b796:	d008      	beq.n	b7aa <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b798:	681b      	ldr	r3, [r3, #0]
    b79a:	b10b      	cbz	r3, b7a0 <bt_att_create_pdu+0x20>
    b79c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    b7a0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    b7a4:	4291      	cmp	r1, r2
    b7a6:	d90c      	bls.n	b7c2 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b7a8:	b98b      	cbnz	r3, b7ce <bt_att_create_pdu+0x4e>
    b7aa:	4a0e      	ldr	r2, [pc, #56]	; (b7e4 <bt_att_create_pdu+0x64>)
    b7ac:	4b0e      	ldr	r3, [pc, #56]	; (b7e8 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    b7ae:	480f      	ldr	r0, [pc, #60]	; (b7ec <bt_att_create_pdu+0x6c>)
    b7b0:	1ad2      	subs	r2, r2, r3
    b7b2:	08d2      	lsrs	r2, r2, #3
    b7b4:	0192      	lsls	r2, r2, #6
    b7b6:	f042 0202 	orr.w	r2, r2, #2
    b7ba:	f014 fb6d 	bl	1fe98 <log_1>
}
    b7be:	2000      	movs	r0, #0
    b7c0:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    b7c2:	462a      	mov	r2, r5
    b7c4:	4631      	mov	r1, r6
}
    b7c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    b7ca:	f7ff be4d 	b.w	b468 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b7ce:	f513 7496 	adds.w	r4, r3, #300	; 0x12c
    b7d2:	d004      	beq.n	b7de <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b7d4:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b7d8:	b10c      	cbz	r4, b7de <bt_att_create_pdu+0x5e>
    b7da:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
{
    b7de:	4618      	mov	r0, r3
    b7e0:	4623      	mov	r3, r4
    b7e2:	e7dd      	b.n	b7a0 <bt_att_create_pdu+0x20>
    b7e4:	00024fd8 	.word	0x00024fd8
    b7e8:	00024fd8 	.word	0x00024fd8
    b7ec:	0002842d 	.word	0x0002842d

0000b7f0 <att_read_group_req>:
{
    b7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    b7f4:	7b0c      	ldrb	r4, [r1, #12]
    b7f6:	3c04      	subs	r4, #4
    b7f8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    b7fa:	2c02      	cmp	r4, #2
{
    b7fc:	4605      	mov	r5, r0
    b7fe:	b08c      	sub	sp, #48	; 0x30
    b800:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    b802:	d001      	beq.n	b808 <att_read_group_req+0x18>
    b804:	2c10      	cmp	r4, #16
    b806:	d16f      	bne.n	b8e8 <att_read_group_req+0xf8>
	req = net_buf_pull_mem(buf, sizeof(*req));
    b808:	2104      	movs	r1, #4
    b80a:	3008      	adds	r0, #8
    b80c:	f018 fc45 	bl	2409a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b810:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    b814:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    b816:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b818:	1d01      	adds	r1, r0, #4
    b81a:	4622      	mov	r2, r4
    b81c:	4640      	mov	r0, r8
    b81e:	f016 f8db 	bl	219d8 <bt_uuid_create>
    b822:	2800      	cmp	r0, #0
    b824:	d062      	beq.n	b8ec <att_read_group_req+0xfc>
	if (!start || !end) {
    b826:	2e00      	cmp	r6, #0
    b828:	d03a      	beq.n	b8a0 <att_read_group_req+0xb0>
    b82a:	2400      	movs	r4, #0
    b82c:	2f00      	cmp	r7, #0
    b82e:	d036      	beq.n	b89e <att_read_group_req+0xae>
	if (start > end) {
    b830:	42be      	cmp	r6, r7
    b832:	d835      	bhi.n	b8a0 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    b834:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b838:	a901      	add	r1, sp, #4
    b83a:	4640      	mov	r0, r8
    b83c:	f88d 4004 	strb.w	r4, [sp, #4]
    b840:	f8ad 3006 	strh.w	r3, [sp, #6]
    b844:	f016 f89e 	bl	21984 <bt_uuid_cmp>
    b848:	2800      	cmp	r0, #0
    b84a:	d134      	bne.n	b8b6 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    b84c:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    b84e:	2214      	movs	r2, #20
    b850:	2100      	movs	r1, #0
    b852:	a807      	add	r0, sp, #28
    b854:	f015 fff2 	bl	2183c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    b858:	2201      	movs	r2, #1
    b85a:	2111      	movs	r1, #17
    b85c:	4620      	mov	r0, r4
    b85e:	f7ff ff8f 	bl	b780 <bt_att_create_pdu>
    b862:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    b864:	2800      	cmp	r0, #0
    b866:	d041      	beq.n	b8ec <att_read_group_req+0xfc>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b868:	2101      	movs	r1, #1
    b86a:	3008      	adds	r0, #8
	data.uuid = uuid;
    b86c:	e9cd 5807 	strd	r5, r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b870:	f018 fbe2 	bl	24038 <net_buf_simple_add>
	data.rsp->len = 0U;
    b874:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b878:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    b87a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    b87c:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    b880:	4a1b      	ldr	r2, [pc, #108]	; (b8f0 <att_read_group_req+0x100>)
	data.group = NULL;
    b882:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    b886:	4639      	mov	r1, r7
    b888:	4630      	mov	r0, r6
    b88a:	f016 fd88 	bl	2239e <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    b88e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b890:	781c      	ldrb	r4, [r3, #0]
    b892:	bb1c      	cbnz	r4, b8dc <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    b894:	9809      	ldr	r0, [sp, #36]	; 0x24
    b896:	f011 fc41 	bl	1d11c <net_buf_unref>
	if (!req) {
    b89a:	230a      	movs	r3, #10
    b89c:	e018      	b.n	b8d0 <att_read_group_req+0xe0>
			*err = 0U;
    b89e:	463e      	mov	r6, r7
	if (!req) {
    b8a0:	2301      	movs	r3, #1
    b8a2:	4632      	mov	r2, r6
    b8a4:	2110      	movs	r1, #16
    b8a6:	4628      	mov	r0, r5
    b8a8:	f7ff fe40 	bl	b52c <send_err_rsp.part.0>
		return 0;
    b8ac:	2400      	movs	r4, #0
}
    b8ae:	4620      	mov	r0, r4
    b8b0:	b00c      	add	sp, #48	; 0x30
    b8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    b8b6:	f642 0301 	movw	r3, #10241	; 0x2801
    b8ba:	a907      	add	r1, sp, #28
    b8bc:	4640      	mov	r0, r8
    b8be:	f88d 401c 	strb.w	r4, [sp, #28]
    b8c2:	f8ad 301e 	strh.w	r3, [sp, #30]
    b8c6:	f016 f85d 	bl	21984 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    b8ca:	2800      	cmp	r0, #0
    b8cc:	d0be      	beq.n	b84c <att_read_group_req+0x5c>
	if (!req) {
    b8ce:	2310      	movs	r3, #16
    b8d0:	4632      	mov	r2, r6
    b8d2:	2110      	movs	r1, #16
    b8d4:	4628      	mov	r0, r5
    b8d6:	f7ff fe29 	bl	b52c <send_err_rsp.part.0>
		return 0;
    b8da:	e7e8      	b.n	b8ae <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b8dc:	4a05      	ldr	r2, [pc, #20]	; (b8f4 <att_read_group_req+0x104>)
    b8de:	9909      	ldr	r1, [sp, #36]	; 0x24
    b8e0:	4628      	mov	r0, r5
    b8e2:	f016 ff3e 	bl	22762 <bt_att_chan_send_rsp>
	return 0;
    b8e6:	e7e1      	b.n	b8ac <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    b8e8:	2404      	movs	r4, #4
    b8ea:	e7e0      	b.n	b8ae <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    b8ec:	240e      	movs	r4, #14
    b8ee:	e7de      	b.n	b8ae <att_read_group_req+0xbe>
    b8f0:	0000ae71 	.word	0x0000ae71
    b8f4:	00022587 	.word	0x00022587

0000b8f8 <att_read_mult_req>:
{
    b8f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    b8fc:	6886      	ldr	r6, [r0, #8]
{
    b8fe:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    b900:	2210      	movs	r2, #16
{
    b902:	4604      	mov	r4, r0
    b904:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    b906:	4668      	mov	r0, sp
    b908:	2100      	movs	r1, #0
    b90a:	f015 ff97 	bl	2183c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    b90e:	2200      	movs	r2, #0
    b910:	210f      	movs	r1, #15
    b912:	4630      	mov	r0, r6
    b914:	f7ff ff34 	bl	b780 <bt_att_create_pdu>
    b918:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    b91a:	b360      	cbz	r0, b976 <att_read_mult_req+0x7e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b91c:	f8df 9060 	ldr.w	r9, [pc, #96]	; b980 <att_read_mult_req+0x88>
	data.chan = chan;
    b920:	9400      	str	r4, [sp, #0]
		handle = net_buf_pull_le16(buf);
    b922:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    b926:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    b92a:	89ab      	ldrh	r3, [r5, #12]
    b92c:	2b01      	cmp	r3, #1
    b92e:	d805      	bhi.n	b93c <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b930:	4a12      	ldr	r2, [pc, #72]	; (b97c <att_read_mult_req+0x84>)
    b932:	9902      	ldr	r1, [sp, #8]
    b934:	4620      	mov	r0, r4
    b936:	f016 ff14 	bl	22762 <bt_att_chan_send_rsp>
    b93a:	e018      	b.n	b96e <att_read_mult_req+0x76>
		handle = net_buf_pull_le16(buf);
    b93c:	4638      	mov	r0, r7
    b93e:	f018 fbbc 	bl	240ba <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b942:	466b      	mov	r3, sp
    b944:	464a      	mov	r2, r9
    b946:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    b948:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    b94a:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b94e:	f016 fd26 	bl	2239e <bt_gatt_foreach_attr>
		if (data.err) {
    b952:	f89d 300c 	ldrb.w	r3, [sp, #12]
    b956:	2b00      	cmp	r3, #0
    b958:	d0e7      	beq.n	b92a <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    b95a:	9802      	ldr	r0, [sp, #8]
    b95c:	f011 fbde 	bl	1d11c <net_buf_unref>
	if (!req) {
    b960:	f89d 300c 	ldrb.w	r3, [sp, #12]
    b964:	4632      	mov	r2, r6
    b966:	210e      	movs	r1, #14
    b968:	4620      	mov	r0, r4
    b96a:	f7ff fddf 	bl	b52c <send_err_rsp.part.0>
	return 0;
    b96e:	2000      	movs	r0, #0
}
    b970:	b005      	add	sp, #20
    b972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    b976:	200e      	movs	r0, #14
    b978:	e7fa      	b.n	b970 <att_read_mult_req+0x78>
    b97a:	bf00      	nop
    b97c:	00022587 	.word	0x00022587
    b980:	0002261b 	.word	0x0002261b

0000b984 <att_read_rsp>:
{
    b984:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    b988:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    b98c:	4605      	mov	r5, r0
    b98e:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    b990:	4640      	mov	r0, r8
    b992:	2101      	movs	r1, #1
{
    b994:	4614      	mov	r4, r2
    b996:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    b998:	f017 fc4e 	bl	23238 <bt_gatt_change_aware>
    b99c:	b390      	cbz	r0, ba04 <att_read_rsp+0x80>
	if (!handle) {
    b99e:	b39e      	cbz	r6, ba08 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
    b9a0:	2210      	movs	r2, #16
    b9a2:	2100      	movs	r1, #0
    b9a4:	4668      	mov	r0, sp
    b9a6:	f015 ff49 	bl	2183c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    b9aa:	2200      	movs	r2, #0
    b9ac:	4621      	mov	r1, r4
    b9ae:	4640      	mov	r0, r8
    b9b0:	f7ff fee6 	bl	b780 <bt_att_create_pdu>
    b9b4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    b9b6:	b348      	cbz	r0, ba0c <att_read_rsp+0x88>
	data.offset = offset;
    b9b8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    b9bc:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    b9c0:	2301      	movs	r3, #1
    b9c2:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b9c6:	4a12      	ldr	r2, [pc, #72]	; (ba10 <att_read_rsp+0x8c>)
	data.chan = chan;
    b9c8:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b9ca:	466b      	mov	r3, sp
    b9cc:	4631      	mov	r1, r6
    b9ce:	4630      	mov	r0, r6
    b9d0:	f016 fce5 	bl	2239e <bt_gatt_foreach_attr>
	if (data.err) {
    b9d4:	f89d 400c 	ldrb.w	r4, [sp, #12]
    b9d8:	b174      	cbz	r4, b9f8 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    b9da:	9802      	ldr	r0, [sp, #8]
    b9dc:	f011 fb9e 	bl	1d11c <net_buf_unref>
	if (!req) {
    b9e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    b9e4:	4632      	mov	r2, r6
    b9e6:	4639      	mov	r1, r7
    b9e8:	4628      	mov	r0, r5
    b9ea:	f7ff fd9f 	bl	b52c <send_err_rsp.part.0>
		return 0;
    b9ee:	2400      	movs	r4, #0
}
    b9f0:	4620      	mov	r0, r4
    b9f2:	b004      	add	sp, #16
    b9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b9f8:	4a06      	ldr	r2, [pc, #24]	; (ba14 <att_read_rsp+0x90>)
    b9fa:	9902      	ldr	r1, [sp, #8]
    b9fc:	4628      	mov	r0, r5
    b9fe:	f016 feb0 	bl	22762 <bt_att_chan_send_rsp>
	return 0;
    ba02:	e7f5      	b.n	b9f0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    ba04:	2412      	movs	r4, #18
    ba06:	e7f3      	b.n	b9f0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    ba08:	2401      	movs	r4, #1
    ba0a:	e7f1      	b.n	b9f0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    ba0c:	240e      	movs	r4, #14
    ba0e:	e7ef      	b.n	b9f0 <att_read_rsp+0x6c>
    ba10:	0002261b 	.word	0x0002261b
    ba14:	00022587 	.word	0x00022587

0000ba18 <att_read_type_req>:
{
    ba18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    ba1c:	7b0c      	ldrb	r4, [r1, #12]
    ba1e:	3c04      	subs	r4, #4
    ba20:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    ba22:	2c02      	cmp	r4, #2
{
    ba24:	4605      	mov	r5, r0
    ba26:	b08c      	sub	sp, #48	; 0x30
    ba28:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    ba2a:	d001      	beq.n	ba30 <att_read_type_req+0x18>
    ba2c:	2c10      	cmp	r4, #16
    ba2e:	d150      	bne.n	bad2 <att_read_type_req+0xba>
	req = net_buf_pull_mem(buf, sizeof(*req));
    ba30:	2104      	movs	r1, #4
    ba32:	3008      	adds	r0, #8
    ba34:	f018 fb31 	bl	2409a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    ba38:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    ba3c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    ba3e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    ba40:	1d01      	adds	r1, r0, #4
    ba42:	4622      	mov	r2, r4
    ba44:	4640      	mov	r0, r8
    ba46:	f015 ffc7 	bl	219d8 <bt_uuid_create>
    ba4a:	b188      	cbz	r0, ba70 <att_read_type_req+0x58>
	if (!start || !end) {
    ba4c:	b19e      	cbz	r6, ba76 <att_read_type_req+0x5e>
    ba4e:	b18f      	cbz	r7, ba74 <att_read_type_req+0x5c>
	if (start > end) {
    ba50:	42b7      	cmp	r7, r6
    ba52:	d310      	bcc.n	ba76 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    ba54:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    ba56:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    ba58:	2100      	movs	r1, #0
    ba5a:	eb0d 0002 	add.w	r0, sp, r2
    ba5e:	f015 feed 	bl	2183c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    ba62:	2201      	movs	r2, #1
    ba64:	2109      	movs	r1, #9
    ba66:	4620      	mov	r0, r4
    ba68:	f7ff fe8a 	bl	b780 <bt_att_create_pdu>
    ba6c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    ba6e:	b968      	cbnz	r0, ba8c <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    ba70:	240e      	movs	r4, #14
    ba72:	e007      	b.n	ba84 <att_read_type_req+0x6c>
			*err = 0U;
    ba74:	463e      	mov	r6, r7
	if (!req) {
    ba76:	2301      	movs	r3, #1
    ba78:	4632      	mov	r2, r6
    ba7a:	2108      	movs	r1, #8
    ba7c:	4628      	mov	r0, r5
    ba7e:	f7ff fd55 	bl	b52c <send_err_rsp.part.0>
		return 0;
    ba82:	2400      	movs	r4, #0
}
    ba84:	4620      	mov	r0, r4
    ba86:	b00c      	add	sp, #48	; 0x30
    ba88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    ba8c:	2101      	movs	r1, #1
    ba8e:	3008      	adds	r0, #8
	data.uuid = uuid;
    ba90:	e9cd 5806 	strd	r5, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    ba94:	f018 fad0 	bl	24038 <net_buf_simple_add>
	data.rsp->len = 0U;
    ba98:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    ba9c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    ba9e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    baa0:	4a0d      	ldr	r2, [pc, #52]	; (bad8 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
    baa2:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    baa6:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    baa8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    baac:	4630      	mov	r0, r6
    baae:	ab06      	add	r3, sp, #24
    bab0:	f016 fc75 	bl	2239e <bt_gatt_foreach_attr>
	if (data.err) {
    bab4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    bab8:	b12c      	cbz	r4, bac6 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    baba:	9808      	ldr	r0, [sp, #32]
    babc:	f011 fb2e 	bl	1d11c <net_buf_unref>
	if (!req) {
    bac0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    bac4:	e7d8      	b.n	ba78 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    bac6:	4a05      	ldr	r2, [pc, #20]	; (badc <att_read_type_req+0xc4>)
    bac8:	9908      	ldr	r1, [sp, #32]
    baca:	4628      	mov	r0, r5
    bacc:	f016 fe49 	bl	22762 <bt_att_chan_send_rsp>
	return 0;
    bad0:	e7d8      	b.n	ba84 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    bad2:	2404      	movs	r4, #4
    bad4:	e7d6      	b.n	ba84 <att_read_type_req+0x6c>
    bad6:	bf00      	nop
    bad8:	0000af1d 	.word	0x0000af1d
    badc:	00022587 	.word	0x00022587

0000bae0 <att_find_type_req>:
{
    bae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bae4:	4688      	mov	r8, r1
    bae6:	b086      	sub	sp, #24
    bae8:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    baea:	2106      	movs	r1, #6
    baec:	f108 0008 	add.w	r0, r8, #8
    baf0:	f018 fad3 	bl	2409a <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    baf4:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    baf6:	b317      	cbz	r7, bb3e <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    baf8:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    bafc:	f1b9 0f00 	cmp.w	r9, #0
    bb00:	d01c      	beq.n	bb3c <att_find_type_req+0x5c>
	if (start > end) {
    bb02:	454f      	cmp	r7, r9
    bb04:	d81b      	bhi.n	bb3e <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    bb06:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    bb08:	f8ad 3002 	strh.w	r3, [sp, #2]
    bb0c:	2400      	movs	r4, #0
    bb0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    bb12:	a901      	add	r1, sp, #4
    bb14:	4668      	mov	r0, sp
	value = buf->data;
    bb16:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    bb1a:	f88d 4000 	strb.w	r4, [sp]
    bb1e:	f88d 4004 	strb.w	r4, [sp, #4]
    bb22:	f8ad 3006 	strh.w	r3, [sp, #6]
    bb26:	f015 ff2d 	bl	21984 <bt_uuid_cmp>
    bb2a:	4606      	mov	r6, r0
    bb2c:	b190      	cbz	r0, bb54 <att_find_type_req+0x74>
	if (!req) {
    bb2e:	230a      	movs	r3, #10
    bb30:	463a      	mov	r2, r7
    bb32:	2106      	movs	r1, #6
    bb34:	4628      	mov	r0, r5
    bb36:	f7ff fcf9 	bl	b52c <send_err_rsp.part.0>
		return 0;
    bb3a:	e007      	b.n	bb4c <att_find_type_req+0x6c>
			*err = 0U;
    bb3c:	464f      	mov	r7, r9
	if (!req) {
    bb3e:	2301      	movs	r3, #1
    bb40:	463a      	mov	r2, r7
    bb42:	2106      	movs	r1, #6
    bb44:	4628      	mov	r0, r5
    bb46:	f7ff fcf1 	bl	b52c <send_err_rsp.part.0>
		return 0;
    bb4a:	2400      	movs	r4, #0
}
    bb4c:	4620      	mov	r0, r4
    bb4e:	b006      	add	sp, #24
    bb50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    bb54:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    bb58:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    bb5c:	4601      	mov	r1, r0
    bb5e:	2214      	movs	r2, #20
    bb60:	a801      	add	r0, sp, #4
    bb62:	f015 fe6b 	bl	2183c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    bb66:	4632      	mov	r2, r6
    bb68:	2107      	movs	r1, #7
    bb6a:	4640      	mov	r0, r8
    bb6c:	f7ff fe08 	bl	b780 <bt_att_create_pdu>
    bb70:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    bb72:	b1e0      	cbz	r0, bbae <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    bb74:	230a      	movs	r3, #10
    bb76:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    bb7a:	4a0e      	ldr	r2, [pc, #56]	; (bbb4 <att_find_type_req+0xd4>)
	data.value_len = value_len;
    bb7c:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    bb80:	ab01      	add	r3, sp, #4
    bb82:	4649      	mov	r1, r9
    bb84:	4638      	mov	r0, r7
	data.value = value;
    bb86:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    bb8a:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    bb8c:	f016 fc07 	bl	2239e <bt_gatt_foreach_attr>
	if (data.err) {
    bb90:	f89d 4015 	ldrb.w	r4, [sp, #21]
    bb94:	b12c      	cbz	r4, bba2 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    bb96:	9802      	ldr	r0, [sp, #8]
    bb98:	f011 fac0 	bl	1d11c <net_buf_unref>
	if (!req) {
    bb9c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    bba0:	e7ce      	b.n	bb40 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    bba2:	4a05      	ldr	r2, [pc, #20]	; (bbb8 <att_find_type_req+0xd8>)
    bba4:	9902      	ldr	r1, [sp, #8]
    bba6:	4628      	mov	r0, r5
    bba8:	f016 fddb 	bl	22762 <bt_att_chan_send_rsp>
	return 0;
    bbac:	e7ce      	b.n	bb4c <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    bbae:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    bbb0:	e7cc      	b.n	bb4c <att_find_type_req+0x6c>
    bbb2:	bf00      	nop
    bbb4:	0000afc5 	.word	0x0000afc5
    bbb8:	00022587 	.word	0x00022587

0000bbbc <att_find_info_req>:
{
    bbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    bbbe:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    bbc0:	881e      	ldrh	r6, [r3, #0]
{
    bbc2:	b085      	sub	sp, #20
    bbc4:	4605      	mov	r5, r0
	if (!start || !end) {
    bbc6:	b19e      	cbz	r6, bbf0 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    bbc8:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    bbca:	b184      	cbz	r4, bbee <att_find_info_req+0x32>
	if (start > end) {
    bbcc:	42b4      	cmp	r4, r6
    bbce:	d30f      	bcc.n	bbf0 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    bbd0:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    bbd2:	2210      	movs	r2, #16
    bbd4:	2100      	movs	r1, #0
    bbd6:	4668      	mov	r0, sp
    bbd8:	f015 fe30 	bl	2183c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    bbdc:	2200      	movs	r2, #0
    bbde:	2105      	movs	r1, #5
    bbe0:	4638      	mov	r0, r7
    bbe2:	f7ff fdcd 	bl	b780 <bt_att_create_pdu>
    bbe6:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    bbe8:	b958      	cbnz	r0, bc02 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    bbea:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    bbec:	e007      	b.n	bbfe <att_find_info_req+0x42>
			*err = 0U;
    bbee:	4626      	mov	r6, r4
	if (!req) {
    bbf0:	2301      	movs	r3, #1
    bbf2:	4632      	mov	r2, r6
    bbf4:	2104      	movs	r1, #4
    bbf6:	4628      	mov	r0, r5
    bbf8:	f7ff fc98 	bl	b52c <send_err_rsp.part.0>
	return 0;
    bbfc:	2000      	movs	r0, #0
}
    bbfe:	b005      	add	sp, #20
    bc00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    bc02:	4621      	mov	r1, r4
    bc04:	4a09      	ldr	r2, [pc, #36]	; (bc2c <att_find_info_req+0x70>)
	data.chan = chan;
    bc06:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    bc08:	466b      	mov	r3, sp
    bc0a:	4630      	mov	r0, r6
    bc0c:	f016 fbc7 	bl	2239e <bt_gatt_foreach_attr>
	if (!data.rsp) {
    bc10:	9c02      	ldr	r4, [sp, #8]
    bc12:	b924      	cbnz	r4, bc1e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    bc14:	9801      	ldr	r0, [sp, #4]
    bc16:	f011 fa81 	bl	1d11c <net_buf_unref>
	if (!req) {
    bc1a:	230a      	movs	r3, #10
    bc1c:	e7e9      	b.n	bbf2 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    bc1e:	4a04      	ldr	r2, [pc, #16]	; (bc30 <att_find_info_req+0x74>)
    bc20:	9901      	ldr	r1, [sp, #4]
    bc22:	4628      	mov	r0, r5
    bc24:	f016 fd9d 	bl	22762 <bt_att_chan_send_rsp>
    bc28:	e7e8      	b.n	bbfc <att_find_info_req+0x40>
    bc2a:	bf00      	nop
    bc2c:	000224cb 	.word	0x000224cb
    bc30:	00022587 	.word	0x00022587

0000bc34 <att_mtu_req>:
{
    bc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    bc36:	6803      	ldr	r3, [r0, #0]
{
    bc38:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
    bc3a:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bc3c:	f3bf 8f5b 	dmb	ish
    bc40:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
    bc44:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    bc48:	f3c3 04c0 	ubfx	r4, r3, #3, #1
    bc4c:	071b      	lsls	r3, r3, #28
    bc4e:	d41e      	bmi.n	bc8e <att_mtu_req+0x5a>
	mtu_client = sys_le16_to_cpu(req->mtu);
    bc50:	688b      	ldr	r3, [r1, #8]
    bc52:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    bc54:	2e16      	cmp	r6, #22
    bc56:	d91c      	bls.n	bc92 <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    bc58:	2202      	movs	r2, #2
    bc5a:	2103      	movs	r1, #3
    bc5c:	f7ff fd90 	bl	b780 <bt_att_create_pdu>
	if (!pdu) {
    bc60:	4607      	mov	r7, r0
    bc62:	b1c0      	cbz	r0, bc96 <att_mtu_req+0x62>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    bc64:	2102      	movs	r1, #2
    bc66:	3008      	adds	r0, #8
    bc68:	f018 f9e6 	bl	24038 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    bc6c:	2341      	movs	r3, #65	; 0x41
    bc6e:	7003      	strb	r3, [r0, #0]
    bc70:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    bc72:	4a0a      	ldr	r2, [pc, #40]	; (bc9c <att_mtu_req+0x68>)
    bc74:	4628      	mov	r0, r5
    bc76:	4639      	mov	r1, r7
    bc78:	f016 fd73 	bl	22762 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    bc7c:	2e41      	cmp	r6, #65	; 0x41
    bc7e:	bf28      	it	cs
    bc80:	2641      	movcs	r6, #65	; 0x41
    bc82:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    bc86:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
    bc8a:	4620      	mov	r0, r4
}
    bc8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    bc8e:	2006      	movs	r0, #6
    bc90:	e7fc      	b.n	bc8c <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
    bc92:	2004      	movs	r0, #4
    bc94:	e7fa      	b.n	bc8c <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
    bc96:	200e      	movs	r0, #14
    bc98:	e7f8      	b.n	bc8c <att_mtu_req+0x58>
    bc9a:	bf00      	nop
    bc9c:	00022587 	.word	0x00022587

0000bca0 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    bca0:	b513      	push	{r0, r1, r4, lr}
    bca2:	4602      	mov	r2, r0
    bca4:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    bca6:	4808      	ldr	r0, [pc, #32]	; (bcc8 <bt_att_req_alloc+0x28>)
    bca8:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    bcaa:	2400      	movs	r4, #0
    bcac:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    bcae:	f012 fb91 	bl	1e3d4 <k_mem_slab_alloc>
    bcb2:	4601      	mov	r1, r0
    bcb4:	b930      	cbnz	r0, bcc4 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    bcb6:	9801      	ldr	r0, [sp, #4]
    bcb8:	221c      	movs	r2, #28
    bcba:	f015 fdbf 	bl	2183c <memset>

	return req;
    bcbe:	9801      	ldr	r0, [sp, #4]
}
    bcc0:	b002      	add	sp, #8
    bcc2:	bd10      	pop	{r4, pc}
		return NULL;
    bcc4:	4620      	mov	r0, r4
    bcc6:	e7fb      	b.n	bcc0 <bt_att_req_alloc+0x20>
    bcc8:	20000710 	.word	0x20000710

0000bccc <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    bccc:	b507      	push	{r0, r1, r2, lr}
    bcce:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    bcd0:	a901      	add	r1, sp, #4
    bcd2:	4803      	ldr	r0, [pc, #12]	; (bce0 <bt_att_req_free+0x14>)
    bcd4:	f012 fbb0 	bl	1e438 <k_mem_slab_free>
}
    bcd8:	b003      	add	sp, #12
    bcda:	f85d fb04 	ldr.w	pc, [sp], #4
    bcde:	bf00      	nop
    bce0:	20000710 	.word	0x20000710

0000bce4 <att_handle_rsp>:
{
    bce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bce8:	4605      	mov	r5, r0
    bcea:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    bcec:	30e0      	adds	r0, #224	; 0xe0
{
    bcee:	4689      	mov	r9, r1
    bcf0:	4692      	mov	sl, r2
    bcf2:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    bcf4:	f018 fe2c 	bl	24950 <k_delayed_work_cancel>
	if (!chan->req) {
    bcf8:	f8d5 40c4 	ldr.w	r4, [r5, #196]	; 0xc4
    bcfc:	bb64      	cbnz	r4, bd58 <att_handle_rsp+0x74>
    bcfe:	4932      	ldr	r1, [pc, #200]	; (bdc8 <att_handle_rsp+0xe4>)
    bd00:	4b32      	ldr	r3, [pc, #200]	; (bdcc <att_handle_rsp+0xe8>)
		BT_WARN("No pending ATT request");
    bd02:	4833      	ldr	r0, [pc, #204]	; (bdd0 <att_handle_rsp+0xec>)
    bd04:	1ac9      	subs	r1, r1, r3
    bd06:	08c9      	lsrs	r1, r1, #3
    bd08:	0189      	lsls	r1, r1, #6
    bd0a:	f041 0102 	orr.w	r1, r1, #2
    bd0e:	f014 f8b6 	bl	1fe7e <log_0>
	att_process(chan->att);
    bd12:	f8d5 b000 	ldr.w	fp, [r5]
	node = sys_slist_get(&att->reqs);
    bd16:	f10b 0004 	add.w	r0, fp, #4
    bd1a:	f016 fab5 	bl	22288 <sys_slist_get>
	if (!node) {
    bd1e:	4607      	mov	r7, r0
    bd20:	2800      	cmp	r0, #0
    bd22:	d039      	beq.n	bd98 <att_handle_rsp+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    bd24:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
    bd28:	b15a      	cbz	r2, bd42 <att_handle_rsp+0x5e>
    bd2a:	f5b2 7096 	subs.w	r0, r2, #300	; 0x12c
    bd2e:	d008      	beq.n	bd42 <att_handle_rsp+0x5e>
    bd30:	6816      	ldr	r6, [r2, #0]
    bd32:	b10e      	cbz	r6, bd38 <att_handle_rsp+0x54>
    bd34:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
    bd38:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    bd3c:	b33a      	cbz	r2, bd8e <att_handle_rsp+0xaa>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    bd3e:	2e00      	cmp	r6, #0
    bd40:	d137      	bne.n	bdb2 <att_handle_rsp+0xce>
Z_GENLIST_PREPEND(slist, snode)
    bd42:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
    bd46:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
    bd48:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
    bd4c:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
    bd50:	bb12      	cbnz	r2, bd98 <att_handle_rsp+0xb4>
	list->tail = node;
    bd52:	f8cb 7008 	str.w	r7, [fp, #8]
}
    bd56:	e01f      	b.n	bd98 <att_handle_rsp+0xb4>
	if (chan->req == &cancel) {
    bd58:	4b1e      	ldr	r3, [pc, #120]	; (bdd4 <att_handle_rsp+0xf0>)
    bd5a:	429c      	cmp	r4, r3
    bd5c:	d103      	bne.n	bd66 <att_handle_rsp+0x82>
		chan->req = NULL;
    bd5e:	2400      	movs	r4, #0
    bd60:	f8c5 40c4 	str.w	r4, [r5, #196]	; 0xc4
		goto process;
    bd64:	e7d5      	b.n	bd12 <att_handle_rsp+0x2e>
	if (chan->req->buf) {
    bd66:	6920      	ldr	r0, [r4, #16]
    bd68:	b128      	cbz	r0, bd76 <att_handle_rsp+0x92>
		net_buf_unref(chan->req->buf);
    bd6a:	f011 f9d7 	bl	1d11c <net_buf_unref>
		chan->req->buf = NULL;
    bd6e:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    bd72:	2200      	movs	r2, #0
    bd74:	611a      	str	r2, [r3, #16]
	func = chan->req->func;
    bd76:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
	chan->req->func = NULL;
    bd7a:	2600      	movs	r6, #0
	func = chan->req->func;
    bd7c:	6844      	ldr	r4, [r0, #4]
	params = chan->req->user_data;
    bd7e:	6983      	ldr	r3, [r0, #24]
	chan->req->func = NULL;
    bd80:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    bd82:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
    bd84:	f016 fd91 	bl	228aa <att_req_destroy>
	chan->req = NULL;
    bd88:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
    bd8c:	e7c1      	b.n	bd12 <att_handle_rsp+0x2e>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    bd8e:	4639      	mov	r1, r7
    bd90:	f016 fc93 	bl	226ba <bt_att_chan_req_send>
    bd94:	2800      	cmp	r0, #0
    bd96:	dbd2      	blt.n	bd3e <att_handle_rsp+0x5a>
	if (func) {
    bd98:	b13c      	cbz	r4, bdaa <att_handle_rsp+0xc6>
		func(chan->att->conn, err, pdu, len, params);
    bd9a:	9b03      	ldr	r3, [sp, #12]
    bd9c:	6828      	ldr	r0, [r5, #0]
    bd9e:	9300      	str	r3, [sp, #0]
    bda0:	6800      	ldr	r0, [r0, #0]
    bda2:	4653      	mov	r3, sl
    bda4:	464a      	mov	r2, r9
    bda6:	4641      	mov	r1, r8
    bda8:	47a0      	blx	r4
}
    bdaa:	2000      	movs	r0, #0
    bdac:	b005      	add	sp, #20
    bdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    bdb2:	f516 7296 	adds.w	r2, r6, #300	; 0x12c
    bdb6:	d004      	beq.n	bdc2 <att_handle_rsp+0xde>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    bdb8:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    bdbc:	b10a      	cbz	r2, bdc2 <att_handle_rsp+0xde>
    bdbe:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	bt_att_func_t func = NULL;
    bdc2:	4630      	mov	r0, r6
    bdc4:	4616      	mov	r6, r2
    bdc6:	e7b7      	b.n	bd38 <att_handle_rsp+0x54>
    bdc8:	00024fd8 	.word	0x00024fd8
    bdcc:	00024fd8 	.word	0x00024fd8
    bdd0:	00028448 	.word	0x00028448
    bdd4:	200013bc 	.word	0x200013bc

0000bdd8 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
    bdd8:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
{
    bddc:	b570      	push	{r4, r5, r6, lr}
    bdde:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
    bde0:	b352      	cbz	r2, be38 <att_error_rsp+0x60>
    bde2:	4b1a      	ldr	r3, [pc, #104]	; (be4c <att_error_rsp+0x74>)
    bde4:	429a      	cmp	r2, r3
    bde6:	d027      	beq.n	be38 <att_error_rsp+0x60>
	if (chan->req->buf) {
    bde8:	6913      	ldr	r3, [r2, #16]
	rsp = (void *)buf->data;
    bdea:	6888      	ldr	r0, [r1, #8]
	if (chan->req->buf) {
    bdec:	b12b      	cbz	r3, bdfa <att_error_rsp+0x22>
	buf->data = buf->__buf + state->offset;
    bdee:	8995      	ldrh	r5, [r2, #12]
    bdf0:	6919      	ldr	r1, [r3, #16]
    bdf2:	4429      	add	r1, r5
    bdf4:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    bdf6:	89d1      	ldrh	r1, [r2, #14]
    bdf8:	8199      	strh	r1, [r3, #12]
	if (chan->req->retrying) {
    bdfa:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    bdfc:	78c5      	ldrb	r5, [r0, #3]
	if (chan->req->retrying) {
    bdfe:	b9e3      	cbnz	r3, be3a <att_error_rsp+0x62>
	switch (err) {
    be00:	2d05      	cmp	r5, #5
	if (!att_change_security(chan->chan.chan.conn, err)) {
    be02:	68a0      	ldr	r0, [r4, #8]
	switch (err) {
    be04:	d006      	beq.n	be14 <att_error_rsp+0x3c>
    be06:	2d0f      	cmp	r5, #15
    be08:	d117      	bne.n	be3a <att_error_rsp+0x62>
		if (conn->sec_level >= BT_SECURITY_L2)
    be0a:	7a43      	ldrb	r3, [r0, #9]
    be0c:	2b01      	cmp	r3, #1
    be0e:	d814      	bhi.n	be3a <att_error_rsp+0x62>
		sec = BT_SECURITY_L2;
    be10:	2102      	movs	r1, #2
    be12:	e007      	b.n	be24 <att_error_rsp+0x4c>
		if (conn->sec_level < BT_SECURITY_L2) {
    be14:	7a43      	ldrb	r3, [r0, #9]
    be16:	2b01      	cmp	r3, #1
    be18:	d9fa      	bls.n	be10 <att_error_rsp+0x38>
		} else if (conn->sec_level < BT_SECURITY_L3) {
    be1a:	2b02      	cmp	r3, #2
    be1c:	d00a      	beq.n	be34 <att_error_rsp+0x5c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
    be1e:	2b03      	cmp	r3, #3
    be20:	d10b      	bne.n	be3a <att_error_rsp+0x62>
			sec = BT_SECURITY_L4;
    be22:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
    be24:	f016 f899 	bl	21f5a <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
    be28:	b938      	cbnz	r0, be3a <att_error_rsp+0x62>
		chan->req->retrying = true;
    be2a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    be2e:	2201      	movs	r2, #1
    be30:	751a      	strb	r2, [r3, #20]
}
    be32:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
    be34:	2103      	movs	r1, #3
    be36:	e7f5      	b.n	be24 <att_error_rsp+0x4c>
		err = BT_ATT_ERR_UNLIKELY;
    be38:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
    be3a:	2200      	movs	r2, #0
    be3c:	462b      	mov	r3, r5
    be3e:	4620      	mov	r0, r4
    be40:	4611      	mov	r1, r2
}
    be42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
    be46:	f7ff bf4d 	b.w	bce4 <att_handle_rsp>
    be4a:	bf00      	nop
    be4c:	200013bc 	.word	0x200013bc

0000be50 <bt_att_encrypt_change>:
{
    be50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be54:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    be56:	f1a0 0608 	sub.w	r6, r0, #8
	if (hci_status) {
    be5a:	460d      	mov	r5, r1
    be5c:	b161      	cbz	r1, be78 <bt_att_encrypt_change+0x28>
		if (att_chan->req && att_chan->req->retrying) {
    be5e:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    be62:	b34b      	cbz	r3, beb8 <bt_att_encrypt_change+0x68>
    be64:	7d1b      	ldrb	r3, [r3, #20]
    be66:	b33b      	cbz	r3, beb8 <bt_att_encrypt_change+0x68>
			att_handle_rsp(att_chan, NULL, 0,
    be68:	2200      	movs	r2, #0
    be6a:	4630      	mov	r0, r6
    be6c:	2305      	movs	r3, #5
}
    be6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			att_handle_rsp(att_chan, NULL, 0,
    be72:	4611      	mov	r1, r2
    be74:	f7ff bf36 	b.w	bce4 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    be78:	6807      	ldr	r7, [r0, #0]
	bt_gatt_encrypt_change(conn);
    be7a:	4638      	mov	r0, r7
    be7c:	f001 fd34 	bl	d8e8 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
    be80:	7a7b      	ldrb	r3, [r7, #9]
    be82:	2b01      	cmp	r3, #1
    be84:	d018      	beq.n	beb8 <bt_att_encrypt_change+0x68>
	if (!(att_chan->req && att_chan->req->retrying)) {
    be86:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    be8a:	b1ab      	cbz	r3, beb8 <bt_att_encrypt_change+0x68>
    be8c:	7d1a      	ldrb	r2, [r3, #20]
    be8e:	b19a      	cbz	r2, beb8 <bt_att_encrypt_change+0x68>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    be90:	6919      	ldr	r1, [r3, #16]
	switch (att_op_get_type(buf->data[0])) {
    be92:	688b      	ldr	r3, [r1, #8]
    be94:	7818      	ldrb	r0, [r3, #0]
    be96:	f016 fa3c 	bl	22312 <att_op_get_type>
    be9a:	3801      	subs	r0, #1
    be9c:	b2c0      	uxtb	r0, r0
    be9e:	2804      	cmp	r0, #4
    bea0:	bf96      	itet	ls
    bea2:	4b06      	ldrls	r3, [pc, #24]	; (bebc <bt_att_encrypt_change+0x6c>)
    bea4:	462a      	movhi	r2, r5
    bea6:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    beaa:	4630      	mov	r0, r6
    beac:	f016 fc59 	bl	22762 <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
    beb0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    beb4:	2200      	movs	r2, #0
    beb6:	611a      	str	r2, [r3, #16]
}
    beb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bebc:	00025694 	.word	0x00025694

0000bec0 <att_reset>:
{
    bec0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    bec2:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    bec4:	9803      	ldr	r0, [sp, #12]
    bec6:	2200      	movs	r2, #0
    bec8:	2300      	movs	r3, #0
    beca:	300c      	adds	r0, #12
    becc:	f018 f85d 	bl	23f8a <net_buf_get>
    bed0:	b948      	cbnz	r0, bee6 <att_reset+0x26>
	att->conn = NULL;
    bed2:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    bed4:	6855      	ldr	r5, [r2, #4]
	att->conn = NULL;
    bed6:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    bed8:	b945      	cbnz	r5, beec <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
    beda:	4811      	ldr	r0, [pc, #68]	; (bf20 <att_reset+0x60>)
    bedc:	a903      	add	r1, sp, #12
    bede:	f012 faab 	bl	1e438 <k_mem_slab_free>
}
    bee2:	b004      	add	sp, #16
    bee4:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    bee6:	f011 f919 	bl	1d11c <net_buf_unref>
    beea:	e7eb      	b.n	bec4 <att_reset+0x4>
	return node->next;
    beec:	682c      	ldr	r4, [r5, #0]
    beee:	2c00      	cmp	r4, #0
    bef0:	bf38      	it	cc
    bef2:	2400      	movcc	r4, #0
		if (req->func) {
    bef4:	686e      	ldr	r6, [r5, #4]
    bef6:	b136      	cbz	r6, bf06 <att_reset+0x46>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    bef8:	69ab      	ldr	r3, [r5, #24]
    befa:	9300      	str	r3, [sp, #0]
    befc:	2300      	movs	r3, #0
    befe:	461a      	mov	r2, r3
    bf00:	210e      	movs	r1, #14
    bf02:	4618      	mov	r0, r3
    bf04:	47b0      	blx	r6
		att_req_destroy(req);
    bf06:	4628      	mov	r0, r5
    bf08:	f016 fccf 	bl	228aa <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    bf0c:	2c00      	cmp	r4, #0
    bf0e:	d0e4      	beq.n	beda <att_reset+0x1a>
    bf10:	6823      	ldr	r3, [r4, #0]
    bf12:	2b00      	cmp	r3, #0
    bf14:	bf38      	it	cc
    bf16:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    bf18:	4625      	mov	r5, r4
    bf1a:	461c      	mov	r4, r3
    bf1c:	e7ea      	b.n	bef4 <att_reset+0x34>
    bf1e:	bf00      	nop
    bf20:	200006d8 	.word	0x200006d8

0000bf24 <att_timeout>:
    bf24:	4b0e      	ldr	r3, [pc, #56]	; (bf60 <att_timeout+0x3c>)
    bf26:	490f      	ldr	r1, [pc, #60]	; (bf64 <att_timeout+0x40>)
{
    bf28:	b570      	push	{r4, r5, r6, lr}
    bf2a:	1ac9      	subs	r1, r1, r3
	struct bt_att *att = chan->att;
    bf2c:	4605      	mov	r5, r0
    bf2e:	08c9      	lsrs	r1, r1, #3
    bf30:	f855 6de0 	ldr.w	r6, [r5, #-224]!
	BT_ERR("ATT Timeout");
    bf34:	0189      	lsls	r1, r1, #6
    bf36:	f041 0101 	orr.w	r1, r1, #1
{
    bf3a:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    bf3c:	480a      	ldr	r0, [pc, #40]	; (bf68 <att_timeout+0x44>)
    bf3e:	f013 ff9e 	bl	1fe7e <log_0>
	att_chan_detach(chan);
    bf42:	4628      	mov	r0, r5
    bf44:	f016 fcef 	bl	22926 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
    bf48:	6a75      	ldr	r5, [r6, #36]	; 0x24
    bf4a:	b945      	cbnz	r5, bf5e <att_timeout+0x3a>
	att_reset(att);
    bf4c:	4630      	mov	r0, r6
    bf4e:	f7ff ffb7 	bl	bec0 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    bf52:	f854 0cd8 	ldr.w	r0, [r4, #-216]
    bf56:	f001 fcfd 	bl	d954 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    bf5a:	f844 5cd8 	str.w	r5, [r4, #-216]
}
    bf5e:	bd70      	pop	{r4, r5, r6, pc}
    bf60:	00024fd8 	.word	0x00024fd8
    bf64:	00024fd8 	.word	0x00024fd8
    bf68:	0002845f 	.word	0x0002845f

0000bf6c <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    bf6c:	b510      	push	{r4, lr}
    bf6e:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    bf70:	b348      	cbz	r0, bfc6 <bt_att_req_cancel+0x5a>
    bf72:	b341      	cbz	r1, bfc6 <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
    bf74:	f7ff f8d8 	bl	b128 <att_get>
	if (!att) {
    bf78:	b328      	cbz	r0, bfc6 <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    bf7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    bf7c:	b15b      	cbz	r3, bf96 <bt_att_req_cancel+0x2a>
    bf7e:	f5b3 7196 	subs.w	r1, r3, #300	; 0x12c
    bf82:	d008      	beq.n	bf96 <bt_att_req_cancel+0x2a>
    bf84:	681b      	ldr	r3, [r3, #0]
    bf86:	b10b      	cbz	r3, bf8c <bt_att_req_cancel+0x20>
    bf88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
	if (chan->req != req) {
    bf8c:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
    bf90:	4294      	cmp	r4, r2
    bf92:	d005      	beq.n	bfa0 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    bf94:	b963      	cbnz	r3, bfb0 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
    bf96:	4621      	mov	r1, r4
    bf98:	3004      	adds	r0, #4
    bf9a:	f016 f97f 	bl	2229c <sys_slist_find_and_remove>
    bf9e:	e002      	b.n	bfa6 <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
    bfa0:	4b09      	ldr	r3, [pc, #36]	; (bfc8 <bt_att_req_cancel+0x5c>)
    bfa2:	f8c1 30c4 	str.w	r3, [r1, #196]	; 0xc4

	att_req_destroy(req);
    bfa6:	4620      	mov	r0, r4
}
    bfa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
    bfac:	f016 bc7d 	b.w	228aa <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
    bfb0:	f513 7296 	adds.w	r2, r3, #300	; 0x12c
    bfb4:	d004      	beq.n	bfc0 <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    bfb6:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    bfba:	b10a      	cbz	r2, bfc0 <bt_att_req_cancel+0x54>
    bfbc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
{
    bfc0:	4619      	mov	r1, r3
    bfc2:	4613      	mov	r3, r2
    bfc4:	e7e2      	b.n	bf8c <bt_att_req_cancel+0x20>
}
    bfc6:	bd10      	pop	{r4, pc}
    bfc8:	200013bc 	.word	0x200013bc

0000bfcc <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    bfcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bfce:	4c15      	ldr	r4, [pc, #84]	; (c024 <find_cf_cfg+0x58>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    bfd0:	4605      	mov	r5, r0
    bfd2:	b140      	cbz	r0, bfe6 <find_cf_cfg+0x1a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    bfd4:	4622      	mov	r2, r4
    bfd6:	f812 1b01 	ldrb.w	r1, [r2], #1
    bfda:	f015 fffc 	bl	21fd6 <bt_conn_is_peer_addr_le>
    bfde:	b1b0      	cbz	r0, c00e <find_cf_cfg+0x42>
			return cfg;
		}
	}

	return NULL;
}
    bfe0:	4620      	mov	r0, r4
    bfe2:	b003      	add	sp, #12
    bfe4:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    bfe6:	9000      	str	r0, [sp, #0]
    bfe8:	4669      	mov	r1, sp
    bfea:	f8cd 0003 	str.w	r0, [sp, #3]
    bfee:	1c60      	adds	r0, r4, #1
    bff0:	f016 fde4 	bl	22bbc <bt_addr_le_cmp>
    bff4:	2800      	cmp	r0, #0
    bff6:	d0f3      	beq.n	bfe0 <find_cf_cfg+0x14>
    bff8:	4669      	mov	r1, sp
    bffa:	f104 0011 	add.w	r0, r4, #17
    bffe:	9500      	str	r5, [sp, #0]
    c000:	f8cd 5003 	str.w	r5, [sp, #3]
    c004:	f016 fdda 	bl	22bbc <bt_addr_le_cmp>
    c008:	b948      	cbnz	r0, c01e <find_cf_cfg+0x52>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    c00a:	3410      	adds	r4, #16
    c00c:	e7e8      	b.n	bfe0 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c00e:	7c21      	ldrb	r1, [r4, #16]
    c010:	f104 0211 	add.w	r2, r4, #17
    c014:	4628      	mov	r0, r5
    c016:	f015 ffde 	bl	21fd6 <bt_conn_is_peer_addr_le>
    c01a:	2800      	cmp	r0, #0
    c01c:	d1f5      	bne.n	c00a <find_cf_cfg+0x3e>
	return NULL;
    c01e:	2400      	movs	r4, #0
    c020:	e7de      	b.n	bfe0 <find_cf_cfg+0x14>
    c022:	bf00      	nop
    c024:	200013d8 	.word	0x200013d8

0000c028 <find_sc_cfg>:
{
    c028:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    c02a:	4c0d      	ldr	r4, [pc, #52]	; (c060 <find_sc_cfg+0x38>)
    c02c:	7823      	ldrb	r3, [r4, #0]
    c02e:	4283      	cmp	r3, r0
{
    c030:	4605      	mov	r5, r0
    c032:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    c034:	d009      	beq.n	c04a <find_sc_cfg+0x22>
    c036:	7b23      	ldrb	r3, [r4, #12]
    c038:	42ab      	cmp	r3, r5
    c03a:	d10f      	bne.n	c05c <find_sc_cfg+0x34>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    c03c:	4809      	ldr	r0, [pc, #36]	; (c064 <find_sc_cfg+0x3c>)
    c03e:	4631      	mov	r1, r6
    c040:	f016 fdbc 	bl	22bbc <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    c044:	b950      	cbnz	r0, c05c <find_sc_cfg+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    c046:	2001      	movs	r0, #1
    c048:	e004      	b.n	c054 <find_sc_cfg+0x2c>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    c04a:	1c60      	adds	r0, r4, #1
    c04c:	f016 fdb6 	bl	22bbc <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    c050:	2800      	cmp	r0, #0
    c052:	d1f0      	bne.n	c036 <find_sc_cfg+0xe>
			return &sc_cfg[i];
    c054:	230c      	movs	r3, #12
    c056:	fb03 4000 	mla	r0, r3, r0, r4
    c05a:	e000      	b.n	c05e <find_sc_cfg+0x36>
	return NULL;
    c05c:	2000      	movs	r0, #0
}
    c05e:	bd70      	pop	{r4, r5, r6, pc}
    c060:	20002af2 	.word	0x20002af2
    c064:	20002aff 	.word	0x20002aff

0000c068 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
    c068:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c06a:	4c15      	ldr	r4, [pc, #84]	; (c0c0 <gatt_sub_find+0x58>)
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
    c06c:	4605      	mov	r5, r0
    c06e:	b140      	cbz	r0, c082 <gatt_sub_find+0x1a>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
				return sub;
			}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    c070:	4622      	mov	r2, r4
    c072:	f812 1b01 	ldrb.w	r1, [r2], #1
    c076:	f015 ffae 	bl	21fd6 <bt_conn_is_peer_addr_le>
    c07a:	b1b0      	cbz	r0, c0aa <gatt_sub_find+0x42>
			return sub;
		}
	}

	return NULL;
}
    c07c:	4620      	mov	r0, r4
    c07e:	b003      	add	sp, #12
    c080:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
    c082:	9000      	str	r0, [sp, #0]
    c084:	4669      	mov	r1, sp
    c086:	f8cd 0003 	str.w	r0, [sp, #3]
    c08a:	1c60      	adds	r0, r4, #1
    c08c:	f016 fd96 	bl	22bbc <bt_addr_le_cmp>
    c090:	2800      	cmp	r0, #0
    c092:	d0f3      	beq.n	c07c <gatt_sub_find+0x14>
    c094:	4669      	mov	r1, sp
    c096:	f104 0011 	add.w	r0, r4, #17
    c09a:	9500      	str	r5, [sp, #0]
    c09c:	f8cd 5003 	str.w	r5, [sp, #3]
    c0a0:	f016 fd8c 	bl	22bbc <bt_addr_le_cmp>
    c0a4:	b948      	cbnz	r0, c0ba <gatt_sub_find+0x52>
		struct gatt_sub *sub = &subscriptions[i];
    c0a6:	3410      	adds	r4, #16
    c0a8:	e7e8      	b.n	c07c <gatt_sub_find+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    c0aa:	7c21      	ldrb	r1, [r4, #16]
    c0ac:	f104 0211 	add.w	r2, r4, #17
    c0b0:	4628      	mov	r0, r5
    c0b2:	f015 ff90 	bl	21fd6 <bt_conn_is_peer_addr_le>
    c0b6:	2800      	cmp	r0, #0
    c0b8:	d1f5      	bne.n	c0a6 <gatt_sub_find+0x3e>
	return NULL;
    c0ba:	2400      	movs	r4, #0
    c0bc:	e7de      	b.n	c07c <gatt_sub_find+0x14>
    c0be:	bf00      	nop
    c0c0:	20001420 	.word	0x20001420

0000c0c4 <bt_gatt_attr_write_ccc>:
{
    c0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c0c8:	461f      	mov	r7, r3
    c0ca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    c0ce:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    c0d2:	4606      	mov	r6, r0
    c0d4:	4688      	mov	r8, r1
	if (offset) {
    c0d6:	2b00      	cmp	r3, #0
    c0d8:	d14a      	bne.n	c170 <bt_gatt_attr_write_ccc+0xac>
	if (!len || len > sizeof(uint16_t)) {
    c0da:	1e7b      	subs	r3, r7, #1
    c0dc:	2b01      	cmp	r3, #1
    c0de:	d84a      	bhi.n	c176 <bt_gatt_attr_write_ccc+0xb2>
	if (len < sizeof(uint16_t)) {
    c0e0:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
    c0e2:	7815      	ldrb	r5, [r2, #0]
    c0e4:	bf18      	it	ne
    c0e6:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    c0e8:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
    c0ea:	bf0c      	ite	eq
    c0ec:	b2ad      	uxtheq	r5, r5
    c0ee:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    c0f2:	f016 fd66 	bl	22bc2 <find_ccc_cfg>
	if (!cfg) {
    c0f6:	4604      	mov	r4, r0
    c0f8:	b9e0      	cbnz	r0, c134 <bt_gatt_attr_write_ccc+0x70>
		if (!value) {
    c0fa:	b915      	cbnz	r5, c102 <bt_gatt_attr_write_ccc+0x3e>
			return len;
    c0fc:	4638      	mov	r0, r7
}
    c0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    c102:	4649      	mov	r1, r9
    c104:	f016 fd5d 	bl	22bc2 <find_ccc_cfg>
		if (!cfg) {
    c108:	4604      	mov	r4, r0
    c10a:	b960      	cbnz	r0, c126 <bt_gatt_attr_write_ccc+0x62>
    c10c:	4b1b      	ldr	r3, [pc, #108]	; (c17c <bt_gatt_attr_write_ccc+0xb8>)
    c10e:	491c      	ldr	r1, [pc, #112]	; (c180 <bt_gatt_attr_write_ccc+0xbc>)
			BT_WARN("No space to store CCC cfg");
    c110:	481c      	ldr	r0, [pc, #112]	; (c184 <bt_gatt_attr_write_ccc+0xc0>)
    c112:	1ac9      	subs	r1, r1, r3
    c114:	08c9      	lsrs	r1, r1, #3
    c116:	0189      	lsls	r1, r1, #6
    c118:	f041 0102 	orr.w	r1, r1, #2
    c11c:	f013 feaf 	bl	1fe7e <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    c120:	f06f 0010 	mvn.w	r0, #16
    c124:	e7eb      	b.n	c0fe <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    c126:	f106 0188 	add.w	r1, r6, #136	; 0x88
    c12a:	3001      	adds	r0, #1
    c12c:	f016 fd75 	bl	22c1a <bt_addr_le_copy>
		cfg->id = conn->id;
    c130:	7a33      	ldrb	r3, [r6, #8]
    c132:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    c134:	f8d9 301c 	ldr.w	r3, [r9, #28]
    c138:	b973      	cbnz	r3, c158 <bt_gatt_attr_write_ccc+0x94>
	if (cfg->value != ccc->value) {
    c13a:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
    c13e:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    c140:	42ab      	cmp	r3, r5
    c142:	d003      	beq.n	c14c <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
    c144:	4649      	mov	r1, r9
    c146:	4640      	mov	r0, r8
    c148:	f016 fcbb 	bl	22ac2 <gatt_ccc_changed>
	if (!value) {
    c14c:	2d00      	cmp	r5, #0
    c14e:	d1d5      	bne.n	c0fc <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
    c150:	4620      	mov	r0, r4
    c152:	f016 fd65 	bl	22c20 <clear_ccc_cfg>
    c156:	e7d1      	b.n	c0fc <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    c158:	462a      	mov	r2, r5
    c15a:	4641      	mov	r1, r8
    c15c:	4630      	mov	r0, r6
    c15e:	4798      	blx	r3
		if (write < 0) {
    c160:	2800      	cmp	r0, #0
    c162:	dbcc      	blt.n	c0fe <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    c164:	1e42      	subs	r2, r0, #1
    c166:	2a01      	cmp	r2, #1
    c168:	d9e7      	bls.n	c13a <bt_gatt_attr_write_ccc+0x76>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    c16a:	f06f 000d 	mvn.w	r0, #13
    c16e:	e7c6      	b.n	c0fe <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    c170:	f06f 0006 	mvn.w	r0, #6
    c174:	e7c3      	b.n	c0fe <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    c176:	f06f 000c 	mvn.w	r0, #12
    c17a:	e7c0      	b.n	c0fe <bt_gatt_attr_write_ccc+0x3a>
    c17c:	00024fd8 	.word	0x00024fd8
    c180:	000250b8 	.word	0x000250b8
    c184:	00028472 	.word	0x00028472

0000c188 <sc_save>:
{
    c188:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c18c:	4680      	mov	r8, r0
    c18e:	460f      	mov	r7, r1
    c190:	4616      	mov	r6, r2
    c192:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    c194:	f7ff ff48 	bl	c028 <find_sc_cfg>
	if (!cfg) {
    c198:	4604      	mov	r4, r0
    c19a:	b9c8      	cbnz	r0, c1d0 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    c19c:	4669      	mov	r1, sp
    c19e:	9000      	str	r0, [sp, #0]
    c1a0:	f8cd 0003 	str.w	r0, [sp, #3]
    c1a4:	f7ff ff40 	bl	c028 <find_sc_cfg>
		if (!cfg) {
    c1a8:	4604      	mov	r4, r0
    c1aa:	b960      	cbnz	r0, c1c6 <sc_save+0x3e>
    c1ac:	490f      	ldr	r1, [pc, #60]	; (c1ec <sc_save+0x64>)
    c1ae:	4b10      	ldr	r3, [pc, #64]	; (c1f0 <sc_save+0x68>)
			BT_ERR("unable to save SC: no cfg left");
    c1b0:	4810      	ldr	r0, [pc, #64]	; (c1f4 <sc_save+0x6c>)
    c1b2:	1ac9      	subs	r1, r1, r3
    c1b4:	08c9      	lsrs	r1, r1, #3
    c1b6:	0189      	lsls	r1, r1, #6
    c1b8:	f041 0101 	orr.w	r1, r1, #1
    c1bc:	f013 fe5f 	bl	1fe7e <log_0>
}
    c1c0:	b002      	add	sp, #8
    c1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    c1c6:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    c1ca:	4639      	mov	r1, r7
    c1cc:	f016 fd25 	bl	22c1a <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    c1d0:	8922      	ldrh	r2, [r4, #8]
    c1d2:	8963      	ldrh	r3, [r4, #10]
    c1d4:	b91a      	cbnz	r2, c1de <sc_save+0x56>
    c1d6:	b923      	cbnz	r3, c1e2 <sc_save+0x5a>
		cfg->data.start = start;
    c1d8:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    c1da:	8165      	strh	r5, [r4, #10]
    c1dc:	e7f0      	b.n	c1c0 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    c1de:	4296      	cmp	r6, r2
    c1e0:	d302      	bcc.n	c1e8 <sc_save+0x60>
    c1e2:	429d      	cmp	r5, r3
    c1e4:	d9ec      	bls.n	c1c0 <sc_save+0x38>
    c1e6:	e7f8      	b.n	c1da <sc_save+0x52>
		*start = new_start;
    c1e8:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    c1ea:	e7fa      	b.n	c1e2 <sc_save+0x5a>
    c1ec:	000250b8 	.word	0x000250b8
    c1f0:	00024fd8 	.word	0x00024fd8
    c1f4:	0002848c 	.word	0x0002848c

0000c1f8 <bt_gatt_service_init.part.0>:
static void bt_gatt_service_init(void)
    c1f8:	4a08      	ldr	r2, [pc, #32]	; (c21c <bt_gatt_service_init.part.0+0x24>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c1fa:	4909      	ldr	r1, [pc, #36]	; (c220 <bt_gatt_service_init.part.0+0x28>)
    c1fc:	8813      	ldrh	r3, [r2, #0]
static void bt_gatt_service_init(void)
    c1fe:	b510      	push	{r4, lr}
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c200:	4c08      	ldr	r4, [pc, #32]	; (c224 <bt_gatt_service_init.part.0+0x2c>)
    c202:	2000      	movs	r0, #0
    c204:	42a1      	cmp	r1, r4
    c206:	d302      	bcc.n	c20e <bt_gatt_service_init.part.0+0x16>
    c208:	b100      	cbz	r0, c20c <bt_gatt_service_init.part.0+0x14>
    c20a:	8013      	strh	r3, [r2, #0]
}
    c20c:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    c20e:	6848      	ldr	r0, [r1, #4]
    c210:	4403      	add	r3, r0
    c212:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c214:	3108      	adds	r1, #8
    c216:	2001      	movs	r0, #1
    c218:	e7f4      	b.n	c204 <bt_gatt_service_init.part.0+0xc>
    c21a:	bf00      	nop
    c21c:	20002af0 	.word	0x20002af0
    c220:	00024fc0 	.word	0x00024fc0
    c224:	00024fd8 	.word	0x00024fd8

0000c228 <gatt_notify>:
{
    c228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c22c:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    c22e:	8992      	ldrh	r2, [r2, #12]
{
    c230:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    c232:	3202      	adds	r2, #2
    c234:	211b      	movs	r1, #27
{
    c236:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    c238:	f7ff faa2 	bl	b780 <bt_att_create_pdu>
	if (!buf) {
    c23c:	4605      	mov	r5, r0
    c23e:	b1c8      	cbz	r0, c274 <gatt_notify+0x4c>
	nfy = net_buf_add(buf, sizeof(*nfy));
    c240:	f100 0908 	add.w	r9, r0, #8
    c244:	2102      	movs	r1, #2
    c246:	4648      	mov	r0, r9
    c248:	f017 fef6 	bl	24038 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    c24c:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    c24e:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
    c250:	f826 8b02 	strh.w	r8, [r6], #2
	net_buf_add(buf, params->len);
    c254:	4648      	mov	r0, r9
    c256:	f017 feef 	bl	24038 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    c25a:	89a2      	ldrh	r2, [r4, #12]
    c25c:	68a1      	ldr	r1, [r4, #8]
    c25e:	4630      	mov	r0, r6
    c260:	f015 fac1 	bl	217e6 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    c264:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    c268:	4629      	mov	r1, r5
    c26a:	4638      	mov	r0, r7
}
    c26c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    c270:	f016 bb94 	b.w	2299c <bt_att_send>
    c274:	4b06      	ldr	r3, [pc, #24]	; (c290 <gatt_notify+0x68>)
    c276:	4907      	ldr	r1, [pc, #28]	; (c294 <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
    c278:	4807      	ldr	r0, [pc, #28]	; (c298 <gatt_notify+0x70>)
    c27a:	1ac9      	subs	r1, r1, r3
    c27c:	08c9      	lsrs	r1, r1, #3
    c27e:	0189      	lsls	r1, r1, #6
    c280:	f041 0102 	orr.w	r1, r1, #2
    c284:	f013 fdfb 	bl	1fe7e <log_0>
}
    c288:	f06f 000b 	mvn.w	r0, #11
    c28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c290:	00024fd8 	.word	0x00024fd8
    c294:	000250b8 	.word	0x000250b8
    c298:	000284ab 	.word	0x000284ab

0000c29c <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    c29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2a0:	4606      	mov	r6, r0
    c2a2:	4688      	mov	r8, r1
    c2a4:	4617      	mov	r7, r2
	if (params) {
    c2a6:	461c      	mov	r4, r3
    c2a8:	b34b      	cbz	r3, c2fe <gatt_send.constprop.0+0x62>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    c2aa:	f247 5030 	movw	r0, #30000	; 0x7530
    c2ae:	2100      	movs	r1, #0
    c2b0:	f7ff fcf6 	bl	bca0 <bt_att_req_alloc>
		if (!req) {
    c2b4:	4605      	mov	r5, r0
    c2b6:	b920      	cbnz	r0, c2c2 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
    c2b8:	f06f 040b 	mvn.w	r4, #11
}
    c2bc:	4620      	mov	r0, r4
    c2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
    c2c2:	2300      	movs	r3, #0
		req->user_data = params;
    c2c4:	6184      	str	r4, [r0, #24]
		req->buf = buf;
    c2c6:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    c2ca:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    c2cc:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    c2ce:	4601      	mov	r1, r0
    c2d0:	4630      	mov	r0, r6
    c2d2:	f016 fbad 	bl	22a30 <bt_att_req_send>
		if (err) {
    c2d6:	4604      	mov	r4, r0
    c2d8:	2800      	cmp	r0, #0
    c2da:	d0ef      	beq.n	c2bc <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
    c2dc:	4628      	mov	r0, r5
    c2de:	f7ff fcf5 	bl	bccc <bt_att_req_free>
	if (err) {
    c2e2:	2c00      	cmp	r4, #0
    c2e4:	d0ea      	beq.n	c2bc <gatt_send.constprop.0+0x20>
    c2e6:	4b08      	ldr	r3, [pc, #32]	; (c308 <gatt_send.constprop.0+0x6c>)
    c2e8:	4a08      	ldr	r2, [pc, #32]	; (c30c <gatt_send.constprop.0+0x70>)
		BT_ERR("Error sending ATT PDU: %d", err);
    c2ea:	4809      	ldr	r0, [pc, #36]	; (c310 <gatt_send.constprop.0+0x74>)
    c2ec:	1ad2      	subs	r2, r2, r3
    c2ee:	08d2      	lsrs	r2, r2, #3
    c2f0:	0192      	lsls	r2, r2, #6
    c2f2:	f042 0201 	orr.w	r2, r2, #1
    c2f6:	4621      	mov	r1, r4
    c2f8:	f013 fdce 	bl	1fe98 <log_1>
    c2fc:	e7de      	b.n	c2bc <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
    c2fe:	461a      	mov	r2, r3
    c300:	f016 fb4c 	bl	2299c <bt_att_send>
    c304:	4604      	mov	r4, r0
    c306:	e7ec      	b.n	c2e2 <gatt_send.constprop.0+0x46>
    c308:	00024fd8 	.word	0x00024fd8
    c30c:	000250b8 	.word	0x000250b8
    c310:	000284d4 	.word	0x000284d4

0000c314 <gatt_indicate>:
{
    c314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c318:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    c31a:	8a92      	ldrh	r2, [r2, #20]
{
    c31c:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    c31e:	3202      	adds	r2, #2
    c320:	211d      	movs	r1, #29
{
    c322:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    c324:	f7ff fa2c 	bl	b780 <bt_att_create_pdu>
	if (!buf) {
    c328:	4605      	mov	r5, r0
    c32a:	b1e8      	cbz	r0, c368 <gatt_indicate+0x54>
	ind = net_buf_add(buf, sizeof(*ind));
    c32c:	f100 0808 	add.w	r8, r0, #8
    c330:	2102      	movs	r1, #2
    c332:	4640      	mov	r0, r8
    c334:	f017 fe80 	bl	24038 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    c338:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    c33a:	8aa1      	ldrh	r1, [r4, #20]
	ind->handle = sys_cpu_to_le16(handle);
    c33c:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    c340:	4640      	mov	r0, r8
    c342:	f017 fe79 	bl	24038 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    c346:	8aa2      	ldrh	r2, [r4, #20]
    c348:	6921      	ldr	r1, [r4, #16]
    c34a:	4630      	mov	r0, r6
    c34c:	f015 fa4b 	bl	217e6 <memcpy>
	if (!params->func) {
    c350:	68a3      	ldr	r3, [r4, #8]
    c352:	b933      	cbnz	r3, c362 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    c354:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    c356:	4629      	mov	r1, r5
    c358:	4638      	mov	r0, r7
}
    c35a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    c35e:	f7ff bf9d 	b.w	c29c <gatt_send.constprop.0>
    c362:	4a08      	ldr	r2, [pc, #32]	; (c384 <gatt_indicate+0x70>)
    c364:	4623      	mov	r3, r4
    c366:	e7f6      	b.n	c356 <gatt_indicate+0x42>
    c368:	4b07      	ldr	r3, [pc, #28]	; (c388 <gatt_indicate+0x74>)
    c36a:	4908      	ldr	r1, [pc, #32]	; (c38c <gatt_indicate+0x78>)
		BT_WARN("No buffer available to send indication");
    c36c:	4808      	ldr	r0, [pc, #32]	; (c390 <gatt_indicate+0x7c>)
    c36e:	1ac9      	subs	r1, r1, r3
    c370:	08c9      	lsrs	r1, r1, #3
    c372:	0189      	lsls	r1, r1, #6
    c374:	f041 0102 	orr.w	r1, r1, #2
    c378:	f013 fd81 	bl	1fe7e <log_0>
}
    c37c:	f06f 000b 	mvn.w	r0, #11
    c380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c384:	00022adf 	.word	0x00022adf
    c388:	00024fd8 	.word	0x00024fd8
    c38c:	000250b8 	.word	0x000250b8
    c390:	000284ee 	.word	0x000284ee

0000c394 <notify_cb>:
{
    c394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    c398:	4b38      	ldr	r3, [pc, #224]	; (c47c <notify_cb+0xe8>)
{
    c39a:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    c39c:	6882      	ldr	r2, [r0, #8]
    c39e:	429a      	cmp	r2, r3
{
    c3a0:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    c3a2:	d003      	beq.n	c3ac <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
    c3a4:	2001      	movs	r0, #1
}
    c3a6:	b003      	add	sp, #12
    c3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    c3ac:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    c3b0:	4b33      	ldr	r3, [pc, #204]	; (c480 <notify_cb+0xec>)
    c3b2:	4599      	cmp	r9, r3
    c3b4:	d01a      	beq.n	c3ec <notify_cb+0x58>
    c3b6:	f109 0701 	add.w	r7, r9, #1
    c3ba:	f109 0a15 	add.w	sl, r9, #21
    c3be:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
    c3c2:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    c3c6:	89a3      	ldrh	r3, [r4, #12]
    c3c8:	429a      	cmp	r2, r3
    c3ca:	d10b      	bne.n	c3e4 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    c3cc:	f817 0c01 	ldrb.w	r0, [r7, #-1]
    c3d0:	4639      	mov	r1, r7
    c3d2:	f7fd ffe9 	bl	a3a8 <bt_conn_lookup_addr_le>
		if (!conn) {
    c3d6:	4605      	mov	r5, r0
    c3d8:	b120      	cbz	r0, c3e4 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
    c3da:	7b43      	ldrb	r3, [r0, #13]
    c3dc:	2b07      	cmp	r3, #7
    c3de:	d028      	beq.n	c432 <notify_cb+0x9e>
			bt_conn_unref(conn);
    c3e0:	f015 fe34 	bl	2204c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    c3e4:	370a      	adds	r7, #10
    c3e6:	4557      	cmp	r7, sl
    c3e8:	d0dc      	beq.n	c3a4 <notify_cb+0x10>
    c3ea:	e7ea      	b.n	c3c2 <notify_cb+0x2e>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    c3ec:	2600      	movs	r6, #0
    c3ee:	4d25      	ldr	r5, [pc, #148]	; (c484 <notify_cb+0xf0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    c3f0:	4637      	mov	r7, r6
    c3f2:	4669      	mov	r1, sp
    c3f4:	4628      	mov	r0, r5
    c3f6:	9700      	str	r7, [sp, #0]
    c3f8:	f8cd 7003 	str.w	r7, [sp, #3]
    c3fc:	f016 fbde 	bl	22bbc <bt_addr_le_cmp>
    c400:	b178      	cbz	r0, c422 <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    c402:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    c406:	2207      	movs	r2, #7
    c408:	4629      	mov	r1, r5
    c40a:	f7fe f811 	bl	a430 <bt_conn_lookup_state_le>
			if (!conn) {
    c40e:	b968      	cbnz	r0, c42c <notify_cb+0x98>
				sc = (struct sc_data *)data->ind_params->data;
    c410:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    c412:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    c416:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    c418:	4629      	mov	r1, r5
    c41a:	8853      	ldrh	r3, [r2, #2]
    c41c:	8812      	ldrh	r2, [r2, #0]
    c41e:	f7ff feb3 	bl	c188 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    c422:	350c      	adds	r5, #12
    c424:	2e00      	cmp	r6, #0
    c426:	d1c6      	bne.n	c3b6 <notify_cb+0x22>
    c428:	2601      	movs	r6, #1
    c42a:	e7e2      	b.n	c3f2 <notify_cb+0x5e>
			bt_conn_unref(conn);
    c42c:	f015 fe0e 	bl	2204c <bt_conn_unref>
    c430:	e7f7      	b.n	c422 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    c432:	f8d9 3020 	ldr.w	r3, [r9, #32]
    c436:	b123      	cbz	r3, c442 <notify_cb+0xae>
    c438:	4641      	mov	r1, r8
    c43a:	4798      	blx	r3
    c43c:	b908      	cbnz	r0, c442 <notify_cb+0xae>
			bt_conn_unref(conn);
    c43e:	4628      	mov	r0, r5
    c440:	e7ce      	b.n	c3e0 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    c442:	89a3      	ldrh	r3, [r4, #12]
    c444:	88a1      	ldrh	r1, [r4, #4]
    c446:	6922      	ldr	r2, [r4, #16]
    c448:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    c44a:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    c44c:	d10f      	bne.n	c46e <notify_cb+0xda>
			err = gatt_indicate(conn, data->handle,
    c44e:	f7ff ff61 	bl	c314 <gatt_indicate>
			if (err == 0) {
    c452:	4606      	mov	r6, r0
    c454:	b918      	cbnz	r0, c45e <notify_cb+0xca>
				data->ind_params->_ref++;
    c456:	6922      	ldr	r2, [r4, #16]
    c458:	7d93      	ldrb	r3, [r2, #22]
    c45a:	3301      	adds	r3, #1
    c45c:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    c45e:	4628      	mov	r0, r5
    c460:	f015 fdf4 	bl	2204c <bt_conn_unref>
		if (err < 0) {
    c464:	2e00      	cmp	r6, #0
    c466:	db06      	blt.n	c476 <notify_cb+0xe2>
		data->err = 0;
    c468:	f8c4 b008 	str.w	fp, [r4, #8]
    c46c:	e7ba      	b.n	c3e4 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    c46e:	f7ff fedb 	bl	c228 <gatt_notify>
    c472:	4606      	mov	r6, r0
    c474:	e7f3      	b.n	c45e <notify_cb+0xca>
			return BT_GATT_ITER_STOP;
    c476:	2000      	movs	r0, #0
    c478:	e795      	b.n	c3a6 <notify_cb+0x12>
    c47a:	bf00      	nop
    c47c:	0000c0c5 	.word	0x0000c0c5
    c480:	20000214 	.word	0x20000214
    c484:	20002af3 	.word	0x20002af3

0000c488 <gatt_write_ccc.constprop.0>:
	if (params->write) {
		params->write(conn, err, NULL);
	}
}

static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    c488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c48c:	4688      	mov	r8, r1
    c48e:	4617      	mov	r7, r2
			  struct bt_gatt_subscribe_params *params)
{
	struct net_buf *buf;
	struct bt_att_write_req *req;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    c490:	2112      	movs	r1, #18
    c492:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    c494:	4606      	mov	r6, r0
    c496:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    c498:	f7ff f972 	bl	b780 <bt_att_create_pdu>
				sizeof(*req) + sizeof(uint16_t));
	if (!buf) {
    c49c:	4604      	mov	r4, r0
    c49e:	b308      	cbz	r0, c4e4 <gatt_write_ccc.constprop.0+0x5c>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    c4a0:	f100 0908 	add.w	r9, r0, #8
    c4a4:	2102      	movs	r1, #2
    c4a6:	4648      	mov	r0, r9
    c4a8:	f017 fdc6 	bl	24038 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(handle);
	net_buf_add_le16(buf, value);
    c4ac:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
    c4ae:	f8a0 8000 	strh.w	r8, [r0]
	net_buf_add_le16(buf, value);
    c4b2:	4648      	mov	r0, r9
    c4b4:	f017 fdd7 	bl	24066 <net_buf_simple_add_le16>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c4b8:	f3bf 8f5b 	dmb	ish
    c4bc:	f105 0310 	add.w	r3, r5, #16
    c4c0:	e853 2f00 	ldrex	r2, [r3]
    c4c4:	f042 0204 	orr.w	r2, r2, #4
    c4c8:	e843 2100 	strex	r1, r2, [r3]
    c4cc:	2900      	cmp	r1, #0
    c4ce:	d1f7      	bne.n	c4c0 <gatt_write_ccc.constprop.0+0x38>
    c4d0:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle 0x%04x value 0x%04x", handle, value);

	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);

	return gatt_send(conn, buf, func, params, NULL);
    c4d4:	462b      	mov	r3, r5
    c4d6:	4621      	mov	r1, r4
    c4d8:	4630      	mov	r0, r6
    c4da:	4a04      	ldr	r2, [pc, #16]	; (c4ec <gatt_write_ccc.constprop.0+0x64>)
}
    c4dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    c4e0:	f7ff bedc 	b.w	c29c <gatt_send.constprop.0>
}
    c4e4:	f06f 000b 	mvn.w	r0, #11
    c4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c4ec:	00022d6d 	.word	0x00022d6d

0000c4f0 <cf_write>:
{
    c4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4f4:	461f      	mov	r7, r3
    c4f6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    c4fa:	2b01      	cmp	r3, #1
{
    c4fc:	4680      	mov	r8, r0
    c4fe:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
    c500:	d847      	bhi.n	c592 <cf_write+0xa2>
	if (offset + len > sizeof(cfg->data)) {
    c502:	443b      	add	r3, r7
    c504:	2b01      	cmp	r3, #1
    c506:	463d      	mov	r5, r7
    c508:	dc46      	bgt.n	c598 <cf_write+0xa8>
	cfg = find_cf_cfg(conn);
    c50a:	f7ff fd5f 	bl	bfcc <find_cf_cfg>
	if (!cfg) {
    c50e:	4604      	mov	r4, r0
    c510:	b990      	cbnz	r0, c538 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
    c512:	f7ff fd5b 	bl	bfcc <find_cf_cfg>
	if (!cfg) {
    c516:	4604      	mov	r4, r0
    c518:	b970      	cbnz	r0, c538 <cf_write+0x48>
    c51a:	4b22      	ldr	r3, [pc, #136]	; (c5a4 <cf_write+0xb4>)
    c51c:	4922      	ldr	r1, [pc, #136]	; (c5a8 <cf_write+0xb8>)
		BT_WARN("No space to store Client Supported Features");
    c51e:	4823      	ldr	r0, [pc, #140]	; (c5ac <cf_write+0xbc>)
    c520:	1ac9      	subs	r1, r1, r3
    c522:	08c9      	lsrs	r1, r1, #3
    c524:	0189      	lsls	r1, r1, #6
    c526:	f041 0102 	orr.w	r1, r1, #2
    c52a:	f013 fca8 	bl	1fe7e <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    c52e:	f06f 0510 	mvn.w	r5, #16
}
    c532:	4628      	mov	r0, r5
    c534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
    c538:	4632      	mov	r2, r6
    c53a:	eb07 0c06 	add.w	ip, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
    c53e:	4562      	cmp	r2, ip
    c540:	d114      	bne.n	c56c <cf_write+0x7c>
	for (i = 0U; i < len && i < last_byte; i++) {
    c542:	b12f      	cbz	r7, c550 <cf_write+0x60>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    c544:	7833      	ldrb	r3, [r6, #0]
    c546:	7a22      	ldrb	r2, [r4, #8]
    c548:	f003 0307 	and.w	r3, r3, #7
    c54c:	4313      	orrs	r3, r2
    c54e:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    c550:	f108 0188 	add.w	r1, r8, #136	; 0x88
    c554:	1c60      	adds	r0, r4, #1
    c556:	f016 fb60 	bl	22c1a <bt_addr_le_copy>
	cfg->id = conn->id;
    c55a:	4620      	mov	r0, r4
    c55c:	f898 3008 	ldrb.w	r3, [r8, #8]
    c560:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    c564:	2100      	movs	r1, #0
    c566:	f016 fbac 	bl	22cc2 <atomic_set_bit>
	return len;
    c56a:	e7e2      	b.n	c532 <cf_write+0x42>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    c56c:	f812 1b01 	ldrb.w	r1, [r2], #1
    c570:	7a20      	ldrb	r0, [r4, #8]
    c572:	2300      	movs	r3, #0
    c574:	4041      	eors	r1, r0
			if ((BIT(bit) & chg_bits) &&
    c576:	fa21 fe03 	lsr.w	lr, r1, r3
    c57a:	f01e 0f01 	tst.w	lr, #1
    c57e:	d004      	beq.n	c58a <cf_write+0x9a>
    c580:	fa20 fe03 	lsr.w	lr, r0, r3
    c584:	f01e 0f01 	tst.w	lr, #1
    c588:	d109      	bne.n	c59e <cf_write+0xae>
		for (bit = 0U; bit <= last_bit; bit++) {
    c58a:	3301      	adds	r3, #1
    c58c:	2b03      	cmp	r3, #3
    c58e:	d1f2      	bne.n	c576 <cf_write+0x86>
    c590:	e7d5      	b.n	c53e <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    c592:	f06f 0506 	mvn.w	r5, #6
    c596:	e7cc      	b.n	c532 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    c598:	f06f 050c 	mvn.w	r5, #12
    c59c:	e7c9      	b.n	c532 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    c59e:	f06f 0512 	mvn.w	r5, #18
    c5a2:	e7c6      	b.n	c532 <cf_write+0x42>
    c5a4:	00024fd8 	.word	0x00024fd8
    c5a8:	000250b8 	.word	0x000250b8
    c5ac:	00028515 	.word	0x00028515

0000c5b0 <sc_indicate_rsp>:
{
    c5b0:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c5b2:	4915      	ldr	r1, [pc, #84]	; (c608 <sc_indicate_rsp+0x58>)
    c5b4:	f3bf 8f5b 	dmb	ish
    c5b8:	4604      	mov	r4, r0
    c5ba:	f101 0350 	add.w	r3, r1, #80	; 0x50
    c5be:	e853 2f00 	ldrex	r2, [r3]
    c5c2:	f022 0202 	bic.w	r2, r2, #2
    c5c6:	e843 2000 	strex	r0, r2, [r3]
    c5ca:	2800      	cmp	r0, #0
    c5cc:	d1f7      	bne.n	c5be <sc_indicate_rsp+0xe>
    c5ce:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c5d2:	f3bf 8f5b 	dmb	ish
    c5d6:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    c5d8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    c5dc:	07da      	lsls	r2, r3, #31
    c5de:	d505      	bpl.n	c5ec <sc_indicate_rsp+0x3c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c5e0:	480a      	ldr	r0, [pc, #40]	; (c60c <sc_indicate_rsp+0x5c>)
    c5e2:	2200      	movs	r2, #0
    c5e4:	2300      	movs	r3, #0
    c5e6:	3120      	adds	r1, #32
    c5e8:	f012 fd18 	bl	1f01c <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    c5ec:	4620      	mov	r0, r4
    c5ee:	f7ff fced 	bl	bfcc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    c5f2:	b140      	cbz	r0, c606 <sc_indicate_rsp+0x56>
    c5f4:	7a03      	ldrb	r3, [r0, #8]
    c5f6:	07db      	lsls	r3, r3, #31
    c5f8:	d505      	bpl.n	c606 <sc_indicate_rsp+0x56>
}
    c5fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    c5fe:	2100      	movs	r1, #0
    c600:	300c      	adds	r0, #12
    c602:	f016 bb5e 	b.w	22cc2 <atomic_set_bit>
}
    c606:	bd10      	pop	{r4, pc}
    c608:	20000c50 	.word	0x20000c50
    c60c:	200010e0 	.word	0x200010e0

0000c610 <read_ppcp>:
{
    c610:	b513      	push	{r0, r1, r4, lr}
    c612:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    c616:	4c0b      	ldr	r4, [pc, #44]	; (c644 <read_ppcp+0x34>)
{
    c618:	4610      	mov	r0, r2
	if (offset > value_len) {
    c61a:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    c61c:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    c620:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    c624:	d80b      	bhi.n	c63e <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    c626:	f1c1 0408 	rsb	r4, r1, #8
    c62a:	429c      	cmp	r4, r3
    c62c:	bfa8      	it	ge
    c62e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
    c630:	4622      	mov	r2, r4
    c632:	4469      	add	r1, sp
    c634:	f015 f8d7 	bl	217e6 <memcpy>
}
    c638:	4620      	mov	r0, r4
    c63a:	b002      	add	sp, #8
    c63c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    c63e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    c642:	e7f9      	b.n	c638 <read_ppcp+0x28>
    c644:	00280018 	.word	0x00280018

0000c648 <db_changed>:
{
    c648:	b513      	push	{r0, r1, r4, lr}
		if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    c64a:	4c2a      	ldr	r4, [pc, #168]	; (c6f4 <db_changed+0xac>)
    c64c:	492a      	ldr	r1, [pc, #168]	; (c6f8 <db_changed+0xb0>)
    c64e:	482b      	ldr	r0, [pc, #172]	; (c6fc <db_changed+0xb4>)
    c650:	2300      	movs	r3, #0
    c652:	220a      	movs	r2, #10
    c654:	f012 fce2 	bl	1f01c <k_delayed_work_submit_to_queue>
    c658:	2300      	movs	r3, #0
    c65a:	4669      	mov	r1, sp
    c65c:	1c60      	adds	r0, r4, #1
    c65e:	9300      	str	r3, [sp, #0]
    c660:	f8cd 3003 	str.w	r3, [sp, #3]
    c664:	f016 faaa 	bl	22bbc <bt_addr_le_cmp>
    c668:	b1e0      	cbz	r0, c6a4 <db_changed+0x5c>
		if (CF_ROBUST_CACHING(cfg)) {
    c66a:	7a23      	ldrb	r3, [r4, #8]
    c66c:	07da      	lsls	r2, r3, #31
    c66e:	d519      	bpl.n	c6a4 <db_changed+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c670:	f3bf 8f5b 	dmb	ish
    c674:	f104 030c 	add.w	r3, r4, #12
    c678:	e853 2f00 	ldrex	r2, [r3]
    c67c:	f022 0202 	bic.w	r2, r2, #2
    c680:	e843 2100 	strex	r1, r2, [r3]
    c684:	2900      	cmp	r1, #0
    c686:	d1f7      	bne.n	c678 <db_changed+0x30>
    c688:	f3bf 8f5b 	dmb	ish
    c68c:	f3bf 8f5b 	dmb	ish
    c690:	e853 2f00 	ldrex	r2, [r3]
    c694:	f022 0201 	bic.w	r2, r2, #1
    c698:	e843 2100 	strex	r1, r2, [r3]
    c69c:	2900      	cmp	r1, #0
    c69e:	d1f7      	bne.n	c690 <db_changed+0x48>
    c6a0:	f3bf 8f5b 	dmb	ish
		if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    c6a4:	2300      	movs	r3, #0
    c6a6:	4816      	ldr	r0, [pc, #88]	; (c700 <db_changed+0xb8>)
    c6a8:	9300      	str	r3, [sp, #0]
    c6aa:	4669      	mov	r1, sp
    c6ac:	f8cd 3003 	str.w	r3, [sp, #3]
    c6b0:	f016 fa84 	bl	22bbc <bt_addr_le_cmp>
    c6b4:	b1d8      	cbz	r0, c6ee <db_changed+0xa6>
		if (CF_ROBUST_CACHING(cfg)) {
    c6b6:	7e23      	ldrb	r3, [r4, #24]
    c6b8:	07db      	lsls	r3, r3, #31
    c6ba:	d518      	bpl.n	c6ee <db_changed+0xa6>
    c6bc:	f3bf 8f5b 	dmb	ish
    c6c0:	4b10      	ldr	r3, [pc, #64]	; (c704 <db_changed+0xbc>)
    c6c2:	e853 2f00 	ldrex	r2, [r3]
    c6c6:	f022 0202 	bic.w	r2, r2, #2
    c6ca:	e843 2100 	strex	r1, r2, [r3]
    c6ce:	2900      	cmp	r1, #0
    c6d0:	d1f7      	bne.n	c6c2 <db_changed+0x7a>
    c6d2:	f3bf 8f5b 	dmb	ish
    c6d6:	f3bf 8f5b 	dmb	ish
    c6da:	e853 2f00 	ldrex	r2, [r3]
    c6de:	f022 0201 	bic.w	r2, r2, #1
    c6e2:	e843 2100 	strex	r1, r2, [r3]
    c6e6:	2900      	cmp	r1, #0
    c6e8:	d1f7      	bne.n	c6da <db_changed+0x92>
    c6ea:	f3bf 8f5b 	dmb	ish
}
    c6ee:	b002      	add	sp, #8
    c6f0:	bd10      	pop	{r4, pc}
    c6f2:	bf00      	nop
    c6f4:	200013d8 	.word	0x200013d8
    c6f8:	20000c20 	.word	0x20000c20
    c6fc:	200010e0 	.word	0x200010e0
    c700:	200013e9 	.word	0x200013e9
    c704:	200013f4 	.word	0x200013f4

0000c708 <disconnected_cb>:
{
    c708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    c70c:	4b25      	ldr	r3, [pc, #148]	; (c7a4 <disconnected_cb+0x9c>)
{
    c70e:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    c710:	6882      	ldr	r2, [r0, #8]
    c712:	429a      	cmp	r2, r3
{
    c714:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    c716:	d12f      	bne.n	c778 <disconnected_cb+0x70>
	ccc = attr->user_data;
    c718:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    c71a:	8aab      	ldrh	r3, [r5, #20]
    c71c:	b363      	cbz	r3, c778 <disconnected_cb+0x70>
				if (ccc == &sc_ccc) {
    c71e:	f8df b088 	ldr.w	fp, [pc, #136]	; c7a8 <disconnected_cb+0xa0>
    c722:	1c6c      	adds	r4, r5, #1
    c724:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
    c728:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c72c:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
    c730:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    c734:	b19b      	cbz	r3, c75e <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c736:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    c73a:	4622      	mov	r2, r4
    c73c:	4630      	mov	r0, r6
    c73e:	f015 fc4a 	bl	21fd6 <bt_conn_is_peer_addr_le>
    c742:	b9e0      	cbnz	r0, c77e <disconnected_cb+0x76>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    c744:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    c748:	4621      	mov	r1, r4
    c74a:	f7fd fe2d 	bl	a3a8 <bt_conn_lookup_addr_le>
			if (tmp) {
    c74e:	b130      	cbz	r0, c75e <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
    c750:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
    c752:	2b07      	cmp	r3, #7
    c754:	bf08      	it	eq
    c756:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
    c75a:	f015 fc77 	bl	2204c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    c75e:	340a      	adds	r4, #10
    c760:	45a2      	cmp	sl, r4
    c762:	d1e5      	bne.n	c730 <disconnected_cb+0x28>
	if (!value_used) {
    c764:	f1b8 0f00 	cmp.w	r8, #0
    c768:	d106      	bne.n	c778 <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
    c76a:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
    c76c:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
    c770:	b113      	cbz	r3, c778 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
    c772:	4641      	mov	r1, r8
    c774:	4638      	mov	r0, r7
    c776:	4798      	blx	r3
}
    c778:	2001      	movs	r0, #1
    c77a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c77e:	7a30      	ldrb	r0, [r6, #8]
    c780:	4649      	mov	r1, r9
    c782:	f015 fae2 	bl	21d4a <bt_addr_le_is_bonded>
    c786:	b940      	cbnz	r0, c79a <disconnected_cb+0x92>
				if (ccc == &sc_ccc) {
    c788:	455d      	cmp	r5, fp
    c78a:	d102      	bne.n	c792 <disconnected_cb+0x8a>
					sc_clear(conn);
    c78c:	4630      	mov	r0, r6
    c78e:	f016 fb96 	bl	22ebe <sc_clear>
				clear_ccc_cfg(cfg);
    c792:	1e60      	subs	r0, r4, #1
    c794:	f016 fa44 	bl	22c20 <clear_ccc_cfg>
    c798:	e7e1      	b.n	c75e <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    c79a:	4649      	mov	r1, r9
    c79c:	4620      	mov	r0, r4
    c79e:	f016 fa3c 	bl	22c1a <bt_addr_le_copy>
    c7a2:	e7dc      	b.n	c75e <disconnected_cb+0x56>
    c7a4:	0000c0c5 	.word	0x0000c0c5
    c7a8:	20000214 	.word	0x20000214

0000c7ac <sc_indicate>:
{
    c7ac:	b510      	push	{r4, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c7ae:	4b17      	ldr	r3, [pc, #92]	; (c80c <sc_indicate+0x60>)
    c7b0:	f3bf 8f5b 	dmb	ish
    c7b4:	f103 0250 	add.w	r2, r3, #80	; 0x50
    c7b8:	e852 4f00 	ldrex	r4, [r2]
    c7bc:	f044 0c01 	orr.w	ip, r4, #1
    c7c0:	e842 ce00 	strex	lr, ip, [r2]
    c7c4:	f1be 0f00 	cmp.w	lr, #0
    c7c8:	d1f6      	bne.n	c7b8 <sc_indicate+0xc>
    c7ca:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    c7ce:	07e2      	lsls	r2, r4, #31
    c7d0:	d410      	bmi.n	c7f4 <sc_indicate+0x48>
		gatt_sc.start = start;
    c7d2:	8318      	strh	r0, [r3, #24]
		*end = new_end;
    c7d4:	8359      	strh	r1, [r3, #26]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c7d6:	f3bf 8f5b 	dmb	ish
    c7da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    c7dc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    c7e0:	079b      	lsls	r3, r3, #30
    c7e2:	d40d      	bmi.n	c800 <sc_indicate+0x54>
}
    c7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c7e8:	4909      	ldr	r1, [pc, #36]	; (c810 <sc_indicate+0x64>)
    c7ea:	480a      	ldr	r0, [pc, #40]	; (c814 <sc_indicate+0x68>)
    c7ec:	220a      	movs	r2, #10
    c7ee:	2300      	movs	r3, #0
    c7f0:	f012 bc14 	b.w	1f01c <k_delayed_work_submit_to_queue>
	if (new_start >= *start && new_end <= *end) {
    c7f4:	8b1c      	ldrh	r4, [r3, #24]
    c7f6:	8b5a      	ldrh	r2, [r3, #26]
    c7f8:	4284      	cmp	r4, r0
    c7fa:	d802      	bhi.n	c802 <sc_indicate+0x56>
    c7fc:	4291      	cmp	r1, r2
    c7fe:	d8e9      	bhi.n	c7d4 <sc_indicate+0x28>
}
    c800:	bd10      	pop	{r4, pc}
	if (*end < new_end) {
    c802:	4291      	cmp	r1, r2
		*start = new_start;
    c804:	8318      	strh	r0, [r3, #24]
	if (*end < new_end) {
    c806:	d9e6      	bls.n	c7d6 <sc_indicate+0x2a>
    c808:	e7e4      	b.n	c7d4 <sc_indicate+0x28>
    c80a:	bf00      	nop
    c80c:	20000c50 	.word	0x20000c50
    c810:	20000c70 	.word	0x20000c70
    c814:	200010e0 	.word	0x200010e0

0000c818 <bt_gatt_init>:
{
    c818:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c81a:	4b1b      	ldr	r3, [pc, #108]	; (c888 <bt_gatt_init+0x70>)
    c81c:	f3bf 8f5b 	dmb	ish
    c820:	2201      	movs	r2, #1
    c822:	e853 1f00 	ldrex	r1, [r3]
    c826:	2900      	cmp	r1, #0
    c828:	d103      	bne.n	c832 <bt_gatt_init+0x1a>
    c82a:	e843 2000 	strex	r0, r2, [r3]
    c82e:	2800      	cmp	r0, #0
    c830:	d1f7      	bne.n	c822 <bt_gatt_init+0xa>
    c832:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    c836:	d126      	bne.n	c886 <bt_gatt_init+0x6e>
    c838:	f3bf 8f5b 	dmb	ish
    c83c:	4b13      	ldr	r3, [pc, #76]	; (c88c <bt_gatt_init+0x74>)
    c83e:	e853 1f00 	ldrex	r1, [r3]
    c842:	2900      	cmp	r1, #0
    c844:	d103      	bne.n	c84e <bt_gatt_init+0x36>
    c846:	e843 2000 	strex	r0, r2, [r3]
    c84a:	2800      	cmp	r0, #0
    c84c:	d1f7      	bne.n	c83e <bt_gatt_init+0x26>
    c84e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    c852:	d101      	bne.n	c858 <bt_gatt_init+0x40>
    c854:	f7ff fcd0 	bl	c1f8 <bt_gatt_service_init.part.0>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    c858:	4c0d      	ldr	r4, [pc, #52]	; (c890 <bt_gatt_init+0x78>)
    c85a:	2230      	movs	r2, #48	; 0x30
    c85c:	2100      	movs	r1, #0
    c85e:	4620      	mov	r0, r4
    c860:	f014 ffec 	bl	2183c <memset>
    c864:	4b0b      	ldr	r3, [pc, #44]	; (c894 <bt_gatt_init+0x7c>)
    c866:	6063      	str	r3, [r4, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c868:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    c86a:	4c0b      	ldr	r4, [pc, #44]	; (c898 <bt_gatt_init+0x80>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c86c:	480b      	ldr	r0, [pc, #44]	; (c89c <bt_gatt_init+0x84>)
    c86e:	2300      	movs	r3, #0
    c870:	220a      	movs	r2, #10
    c872:	f012 fbd3 	bl	1f01c <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    c876:	2230      	movs	r2, #48	; 0x30
    c878:	2100      	movs	r1, #0
    c87a:	f104 0020 	add.w	r0, r4, #32
    c87e:	f014 ffdd 	bl	2183c <memset>
    c882:	4b07      	ldr	r3, [pc, #28]	; (c8a0 <bt_gatt_init+0x88>)
    c884:	6263      	str	r3, [r4, #36]	; 0x24
}
    c886:	bd10      	pop	{r4, pc}
    c888:	20001400 	.word	0x20001400
    c88c:	2000141c 	.word	0x2000141c
    c890:	20000c20 	.word	0x20000c20
    c894:	00022fe5 	.word	0x00022fe5
    c898:	20000c50 	.word	0x20000c50
    c89c:	200010e0 	.word	0x200010e0
    c8a0:	0000cda1 	.word	0x0000cda1

0000c8a4 <bt_gatt_attr_get_handle>:
{
    c8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    c8a8:	4603      	mov	r3, r0
    c8aa:	b148      	cbz	r0, c8c0 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    c8ac:	8a00      	ldrh	r0, [r0, #16]
    c8ae:	b938      	cbnz	r0, c8c0 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c8b0:	4912      	ldr	r1, [pc, #72]	; (c8fc <bt_gatt_attr_get_handle+0x58>)
    c8b2:	f8df e04c 	ldr.w	lr, [pc, #76]	; c900 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    c8b6:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    c8b8:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c8bc:	4571      	cmp	r1, lr
    c8be:	d301      	bcc.n	c8c4 <bt_gatt_attr_get_handle+0x20>
}
    c8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
    c8c4:	e9d1 7600 	ldrd	r7, r6, [r1]
    c8c8:	42bb      	cmp	r3, r7
    c8ca:	d304      	bcc.n	c8d6 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    c8cc:	fb0c 7206 	mla	r2, ip, r6, r7
    c8d0:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    c8d2:	4293      	cmp	r3, r2
    c8d4:	d90e      	bls.n	c8f4 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    c8d6:	19a2      	adds	r2, r4, r6
    c8d8:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c8da:	3108      	adds	r1, #8
    c8dc:	4614      	mov	r4, r2
    c8de:	e7ed      	b.n	c8bc <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    c8e0:	fb0c 7805 	mla	r8, ip, r5, r7
    c8e4:	4543      	cmp	r3, r8
    c8e6:	d007      	beq.n	c8f8 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    c8e8:	3501      	adds	r5, #1
    c8ea:	1962      	adds	r2, r4, r5
    c8ec:	42b5      	cmp	r5, r6
    c8ee:	b292      	uxth	r2, r2
    c8f0:	d1f6      	bne.n	c8e0 <bt_gatt_attr_get_handle+0x3c>
    c8f2:	e7f2      	b.n	c8da <bt_gatt_attr_get_handle+0x36>
    c8f4:	2500      	movs	r5, #0
    c8f6:	e7f8      	b.n	c8ea <bt_gatt_attr_get_handle+0x46>
    c8f8:	4610      	mov	r0, r2
    c8fa:	e7e1      	b.n	c8c0 <bt_gatt_attr_get_handle+0x1c>
    c8fc:	00024fc0 	.word	0x00024fc0
    c900:	00024fd8 	.word	0x00024fd8

0000c904 <bt_gatt_foreach_attr_type>:
{
    c904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c908:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
    c90c:	9100      	str	r1, [sp, #0]
    c90e:	4698      	mov	r8, r3
		num_matches = UINT16_MAX;
    c910:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c914:	2c00      	cmp	r4, #0
    c916:	bf08      	it	eq
    c918:	461c      	moveq	r4, r3
	if (start_handle <= last_static_handle) {
    c91a:	4b4c      	ldr	r3, [pc, #304]	; (ca4c <bt_gatt_foreach_attr_type+0x148>)
    c91c:	881b      	ldrh	r3, [r3, #0]
    c91e:	4283      	cmp	r3, r0
{
    c920:	4606      	mov	r6, r0
    c922:	4617      	mov	r7, r2
	if (start_handle <= last_static_handle) {
    c924:	d25d      	bcs.n	c9e2 <bt_gatt_foreach_attr_type+0xde>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    c926:	4b4a      	ldr	r3, [pc, #296]	; (ca50 <bt_gatt_foreach_attr_type+0x14c>)
    c928:	681d      	ldr	r5, [r3, #0]
    c92a:	2d00      	cmp	r5, #0
    c92c:	d04f      	beq.n	c9ce <bt_gatt_foreach_attr_type+0xca>
    c92e:	3d08      	subs	r5, #8
    c930:	2d00      	cmp	r5, #0
    c932:	d04c      	beq.n	c9ce <bt_gatt_foreach_attr_type+0xca>
Z_GENLIST_PEEK_NEXT(slist, snode)
    c934:	f115 0b08 	adds.w	fp, r5, #8
    c938:	d00b      	beq.n	c952 <bt_gatt_foreach_attr_type+0x4e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c93a:	68ab      	ldr	r3, [r5, #8]
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
    c93c:	2b00      	cmp	r3, #0
    c93e:	f000 8082 	beq.w	ca46 <bt_gatt_foreach_attr_type+0x142>
		if (next) {
    c942:	f1b3 0908 	subs.w	r9, r3, #8
    c946:	d006      	beq.n	c956 <bt_gatt_foreach_attr_type+0x52>
			if (next->attrs[0].handle <= start_handle) {
    c948:	f853 3c08 	ldr.w	r3, [r3, #-8]
    c94c:	8a1b      	ldrh	r3, [r3, #16]
    c94e:	42b3      	cmp	r3, r6
    c950:	d907      	bls.n	c962 <bt_gatt_foreach_attr_type+0x5e>
    c952:	f04f 0900 	mov.w	r9, #0
		for (i = 0; i < svc->attr_count; i++) {
    c956:	686b      	ldr	r3, [r5, #4]
    c958:	4599      	cmp	r9, r3
    c95a:	d348      	bcc.n	c9ee <bt_gatt_foreach_attr_type+0xea>
Z_GENLIST_PEEK_NEXT(slist, snode)
    c95c:	f1bb 0f00 	cmp.w	fp, #0
    c960:	d035      	beq.n	c9ce <bt_gatt_foreach_attr_type+0xca>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c962:	68ad      	ldr	r5, [r5, #8]
    c964:	e7e1      	b.n	c92a <bt_gatt_foreach_attr_type+0x26>
			if (handle + static_svc->attr_count < start_handle) {
    c966:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c96a:	442b      	add	r3, r5
    c96c:	42b3      	cmp	r3, r6
    c96e:	d235      	bcs.n	c9dc <bt_gatt_foreach_attr_type+0xd8>
				handle += static_svc->attr_count;
    c970:	b29d      	uxth	r5, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c972:	f109 0908 	add.w	r9, r9, #8
    c976:	4b37      	ldr	r3, [pc, #220]	; (ca54 <bt_gatt_foreach_attr_type+0x150>)
    c978:	4599      	cmp	r9, r3
    c97a:	d3f4      	bcc.n	c966 <bt_gatt_foreach_attr_type+0x62>
    c97c:	e7d3      	b.n	c926 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    c97e:	5889      	ldr	r1, [r1, r2]
    c980:	9301      	str	r3, [sp, #4]
    c982:	4638      	mov	r0, r7
    c984:	f014 fffe 	bl	21984 <bt_uuid_cmp>
    c988:	9b01      	ldr	r3, [sp, #4]
    c98a:	b198      	cbz	r0, c9b4 <bt_gatt_foreach_attr_type+0xb0>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    c98c:	3501      	adds	r5, #1
    c98e:	f10a 0a01 	add.w	sl, sl, #1
    c992:	b2ad      	uxth	r5, r5
    c994:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c998:	4553      	cmp	r3, sl
    c99a:	d9ea      	bls.n	c972 <bt_gatt_foreach_attr_type+0x6e>
	if (handle > end_handle) {
    c99c:	9b00      	ldr	r3, [sp, #0]
    c99e:	429d      	cmp	r5, r3
    c9a0:	d815      	bhi.n	c9ce <bt_gatt_foreach_attr_type+0xca>
	if (handle < start_handle) {
    c9a2:	42b5      	cmp	r5, r6
    c9a4:	d3f2      	bcc.n	c98c <bt_gatt_foreach_attr_type+0x88>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    c9a6:	f8d9 1000 	ldr.w	r1, [r9]
    c9aa:	fb0b f20a 	mul.w	r2, fp, sl
    c9ae:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    c9b0:	2f00      	cmp	r7, #0
    c9b2:	d1e4      	bne.n	c97e <bt_gatt_foreach_attr_type+0x7a>
	if (attr_data && attr_data != attr->user_data) {
    c9b4:	f1b8 0f00 	cmp.w	r8, #0
    c9b8:	d10c      	bne.n	c9d4 <bt_gatt_foreach_attr_type+0xd0>
	*num_matches -= 1;
    c9ba:	3c01      	subs	r4, #1
    c9bc:	b2a4      	uxth	r4, r4
	result = func(attr, handle, user_data);
    c9be:	4618      	mov	r0, r3
    c9c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c9c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c9c4:	4629      	mov	r1, r5
    c9c6:	4798      	blx	r3
	if (!*num_matches) {
    c9c8:	b10c      	cbz	r4, c9ce <bt_gatt_foreach_attr_type+0xca>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    c9ca:	2800      	cmp	r0, #0
    c9cc:	d1de      	bne.n	c98c <bt_gatt_foreach_attr_type+0x88>
}
    c9ce:	b003      	add	sp, #12
    c9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    c9d4:	68da      	ldr	r2, [r3, #12]
    c9d6:	4590      	cmp	r8, r2
    c9d8:	d1d8      	bne.n	c98c <bt_gatt_foreach_attr_type+0x88>
    c9da:	e7ee      	b.n	c9ba <bt_gatt_foreach_attr_type+0xb6>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    c9dc:	f04f 0a00 	mov.w	sl, #0
    c9e0:	e7d8      	b.n	c994 <bt_gatt_foreach_attr_type+0x90>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c9e2:	f8df 9074 	ldr.w	r9, [pc, #116]	; ca58 <bt_gatt_foreach_attr_type+0x154>
		uint16_t handle = 1;
    c9e6:	2501      	movs	r5, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    c9e8:	f04f 0b14 	mov.w	fp, #20
    c9ec:	e7c3      	b.n	c976 <bt_gatt_foreach_attr_type+0x72>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    c9ee:	2314      	movs	r3, #20
    c9f0:	6829      	ldr	r1, [r5, #0]
	if (handle > end_handle) {
    c9f2:	9800      	ldr	r0, [sp, #0]
			struct bt_gatt_attr *attr = &svc->attrs[i];
    c9f4:	fb03 f209 	mul.w	r2, r3, r9
    c9f8:	eb01 0a02 	add.w	sl, r1, r2
			if (gatt_foreach_iter(attr, attr->handle,
    c9fc:	f8ba 3010 	ldrh.w	r3, [sl, #16]
	if (handle > end_handle) {
    ca00:	4298      	cmp	r0, r3
    ca02:	d3e4      	bcc.n	c9ce <bt_gatt_foreach_attr_type+0xca>
	if (handle < start_handle) {
    ca04:	429e      	cmp	r6, r3
    ca06:	d816      	bhi.n	ca36 <bt_gatt_foreach_attr_type+0x132>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    ca08:	b96f      	cbnz	r7, ca26 <bt_gatt_foreach_attr_type+0x122>
	if (attr_data && attr_data != attr->user_data) {
    ca0a:	f1b8 0f00 	cmp.w	r8, #0
    ca0e:	d115      	bne.n	ca3c <bt_gatt_foreach_attr_type+0x138>
	*num_matches -= 1;
    ca10:	3c01      	subs	r4, #1
    ca12:	b2a4      	uxth	r4, r4
	result = func(attr, handle, user_data);
    ca14:	4619      	mov	r1, r3
    ca16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ca18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca1a:	4650      	mov	r0, sl
    ca1c:	4798      	blx	r3
	if (!*num_matches) {
    ca1e:	2c00      	cmp	r4, #0
    ca20:	d0d5      	beq.n	c9ce <bt_gatt_foreach_attr_type+0xca>
			if (gatt_foreach_iter(attr, attr->handle,
    ca22:	b940      	cbnz	r0, ca36 <bt_gatt_foreach_attr_type+0x132>
    ca24:	e7d3      	b.n	c9ce <bt_gatt_foreach_attr_type+0xca>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    ca26:	5889      	ldr	r1, [r1, r2]
    ca28:	9301      	str	r3, [sp, #4]
    ca2a:	4638      	mov	r0, r7
    ca2c:	f014 ffaa 	bl	21984 <bt_uuid_cmp>
    ca30:	9b01      	ldr	r3, [sp, #4]
    ca32:	2800      	cmp	r0, #0
    ca34:	d0e9      	beq.n	ca0a <bt_gatt_foreach_attr_type+0x106>
		for (i = 0; i < svc->attr_count; i++) {
    ca36:	f109 0901 	add.w	r9, r9, #1
    ca3a:	e78c      	b.n	c956 <bt_gatt_foreach_attr_type+0x52>
	if (attr_data && attr_data != attr->user_data) {
    ca3c:	f8da 200c 	ldr.w	r2, [sl, #12]
    ca40:	4590      	cmp	r8, r2
    ca42:	d1f8      	bne.n	ca36 <bt_gatt_foreach_attr_type+0x132>
    ca44:	e7e4      	b.n	ca10 <bt_gatt_foreach_attr_type+0x10c>
    ca46:	4699      	mov	r9, r3
    ca48:	e785      	b.n	c956 <bt_gatt_foreach_attr_type+0x52>
    ca4a:	bf00      	nop
    ca4c:	20002af0 	.word	0x20002af0
    ca50:	200013f8 	.word	0x200013f8
    ca54:	00024fd8 	.word	0x00024fd8
    ca58:	00024fc0 	.word	0x00024fc0

0000ca5c <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
    ca5c:	b510      	push	{r4, lr}
    ca5e:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    ca60:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    ca62:	aa1c      	add	r2, sp, #112	; 0x70
    ca64:	4669      	mov	r1, sp
    ca66:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    ca68:	e9cd 3300 	strd	r3, r3, [sp]
    ca6c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    ca70:	f014 fd9e 	bl	215b0 <tc_cmac_setup>
    ca74:	b958      	cbnz	r0, ca8e <db_hash_gen.isra.0+0x32>
    ca76:	4917      	ldr	r1, [pc, #92]	; (cad4 <db_hash_gen.isra.0+0x78>)
    ca78:	4b17      	ldr	r3, [pc, #92]	; (cad8 <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to setup AES CMAC");
    ca7a:	4818      	ldr	r0, [pc, #96]	; (cadc <db_hash_gen.isra.0+0x80>)
    ca7c:	1ac9      	subs	r1, r1, r3
    ca7e:	08c9      	lsrs	r1, r1, #3
    ca80:	0189      	lsls	r1, r1, #6
    ca82:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    ca86:	f013 f9fa 	bl	1fe7e <log_0>
}
    ca8a:	b048      	add	sp, #288	; 0x120
    ca8c:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    ca8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ca92:	2001      	movs	r0, #1
    ca94:	4a12      	ldr	r2, [pc, #72]	; (cae0 <db_hash_gen.isra.0+0x84>)
    ca96:	ab04      	add	r3, sp, #16
    ca98:	f016 fa99 	bl	22fce <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    ca9c:	4811      	ldr	r0, [pc, #68]	; (cae4 <db_hash_gen.isra.0+0x88>)
    ca9e:	a904      	add	r1, sp, #16
    caa0:	f014 fe1d 	bl	216de <tc_cmac_final>
    caa4:	b940      	cbnz	r0, cab8 <db_hash_gen.isra.0+0x5c>
    caa6:	490b      	ldr	r1, [pc, #44]	; (cad4 <db_hash_gen.isra.0+0x78>)
    caa8:	4b0b      	ldr	r3, [pc, #44]	; (cad8 <db_hash_gen.isra.0+0x7c>)
		BT_ERR("Unable to calculate hash");
    caaa:	480f      	ldr	r0, [pc, #60]	; (cae8 <db_hash_gen.isra.0+0x8c>)
    caac:	1ac9      	subs	r1, r1, r3
    caae:	08c9      	lsrs	r1, r1, #3
    cab0:	0189      	lsls	r1, r1, #6
    cab2:	f041 0101 	orr.w	r1, r1, #1
    cab6:	e7e6      	b.n	ca86 <db_hash_gen.isra.0+0x2a>
    cab8:	4b0a      	ldr	r3, [pc, #40]	; (cae4 <db_hash_gen.isra.0+0x88>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    caba:	2208      	movs	r2, #8
    cabc:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    cac0:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    cac2:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    cac6:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    caca:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    cacc:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    cace:	d1f7      	bne.n	cac0 <db_hash_gen.isra.0+0x64>
    cad0:	e7db      	b.n	ca8a <db_hash_gen.isra.0+0x2e>
    cad2:	bf00      	nop
    cad4:	000250b8 	.word	0x000250b8
    cad8:	00024fd8 	.word	0x00024fd8
    cadc:	00028541 	.word	0x00028541
    cae0:	00022b11 	.word	0x00022b11
    cae4:	20003080 	.word	0x20003080
    cae8:	0002855a 	.word	0x0002855a

0000caec <bt_gatt_service_register>:
{
    caec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    caf0:	4b66      	ldr	r3, [pc, #408]	; (cc8c <bt_gatt_service_register+0x1a0>)
    caf2:	f3bf 8f5b 	dmb	ish
    caf6:	4605      	mov	r5, r0
    caf8:	2201      	movs	r2, #1
    cafa:	e853 1f00 	ldrex	r1, [r3]
    cafe:	2900      	cmp	r1, #0
    cb00:	d103      	bne.n	cb0a <bt_gatt_service_register+0x1e>
    cb02:	e843 2000 	strex	r0, r2, [r3]
    cb06:	2800      	cmp	r0, #0
    cb08:	d1f7      	bne.n	cafa <bt_gatt_service_register+0xe>
    cb0a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    cb0e:	d101      	bne.n	cb14 <bt_gatt_service_register+0x28>
    cb10:	f7ff fb72 	bl	c1f8 <bt_gatt_service_init.part.0>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    cb14:	682b      	ldr	r3, [r5, #0]
    cb16:	2400      	movs	r4, #0
    cb18:	6818      	ldr	r0, [r3, #0]
    cb1a:	f88d 4000 	strb.w	r4, [sp]
    cb1e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    cb22:	4669      	mov	r1, sp
    cb24:	f8ad 3002 	strh.w	r3, [sp, #2]
    cb28:	f014 ff2c 	bl	21984 <bt_uuid_cmp>
    cb2c:	b920      	cbnz	r0, cb38 <bt_gatt_service_register+0x4c>
		return -EALREADY;
    cb2e:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
    cb32:	b003      	add	sp, #12
    cb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    cb38:	682b      	ldr	r3, [r5, #0]
    cb3a:	a901      	add	r1, sp, #4
    cb3c:	6818      	ldr	r0, [r3, #0]
    cb3e:	f88d 4004 	strb.w	r4, [sp, #4]
    cb42:	f641 0301 	movw	r3, #6145	; 0x1801
    cb46:	f8ad 3006 	strh.w	r3, [sp, #6]
    cb4a:	f014 ff1b 	bl	21984 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    cb4e:	2800      	cmp	r0, #0
    cb50:	d0ed      	beq.n	cb2e <bt_gatt_service_register+0x42>
Z_GENLIST_IS_EMPTY(slist)
    cb52:	4c4f      	ldr	r4, [pc, #316]	; (cc90 <bt_gatt_service_register+0x1a4>)
	struct bt_gatt_attr *attrs = svc->attrs;
    cb54:	f8d5 8000 	ldr.w	r8, [r5]
	if (sys_slist_is_empty(&db)) {
    cb58:	6826      	ldr	r6, [r4, #0]
	uint16_t count = svc->attr_count;
    cb5a:	f8b5 9004 	ldrh.w	r9, [r5, #4]
	if (sys_slist_is_empty(&db)) {
    cb5e:	b936      	cbnz	r6, cb6e <bt_gatt_service_register+0x82>
		handle = last_static_handle;
    cb60:	4b4c      	ldr	r3, [pc, #304]	; (cc94 <bt_gatt_service_register+0x1a8>)
    cb62:	881f      	ldrh	r7, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    cb64:	f8df b140 	ldr.w	fp, [pc, #320]	; cca8 <bt_gatt_service_register+0x1bc>
	const struct bt_gatt_attr *attr = NULL;
    cb68:	f04f 0a00 	mov.w	sl, #0
    cb6c:	e01b      	b.n	cba6 <bt_gatt_service_register+0xba>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    cb6e:	6863      	ldr	r3, [r4, #4]
    cb70:	2b00      	cmp	r3, #0
    cb72:	f000 8089 	beq.w	cc88 <bt_gatt_service_register+0x19c>
	handle = last->attrs[last->attr_count - 1].handle;
    cb76:	e953 3202 	ldrd	r3, r2, [r3, #-8]
    cb7a:	2114      	movs	r1, #20
    cb7c:	fb01 3302 	mla	r3, r1, r2, r3
    cb80:	f833 7c04 	ldrh.w	r7, [r3, #-4]
    cb84:	463e      	mov	r6, r7
    cb86:	e7ed      	b.n	cb64 <bt_gatt_service_register+0x78>
		if (!attrs->handle) {
    cb88:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    cb8c:	2900      	cmp	r1, #0
    cb8e:	d134      	bne.n	cbfa <bt_gatt_service_register+0x10e>
			attrs->handle = ++handle;
    cb90:	1c79      	adds	r1, r7, #1
    cb92:	b289      	uxth	r1, r1
    cb94:	f8a8 1010 	strh.w	r1, [r8, #16]
	for (; attrs && count; attrs++, count--) {
    cb98:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    cb9c:	f108 0814 	add.w	r8, r8, #20
    cba0:	fa1f f989 	uxth.w	r9, r9
    cba4:	460f      	mov	r7, r1
    cba6:	f1b8 0f00 	cmp.w	r8, #0
    cbaa:	d002      	beq.n	cbb2 <bt_gatt_service_register+0xc6>
    cbac:	f1b9 0f00 	cmp.w	r9, #0
    cbb0:	d1ea      	bne.n	cb88 <bt_gatt_service_register+0x9c>
	if (last_handle == 0 || svc->attrs[0].handle > last_handle) {
    cbb2:	b11e      	cbz	r6, cbbc <bt_gatt_service_register+0xd0>
    cbb4:	682b      	ldr	r3, [r5, #0]
    cbb6:	8a18      	ldrh	r0, [r3, #16]
    cbb8:	4286      	cmp	r6, r0
    cbba:	d23a      	bcs.n	cc32 <bt_gatt_service_register+0x146>
	parent->next = child;
    cbbc:	2200      	movs	r2, #0
		sys_slist_append(&db, &svc->node);
    cbbe:	f105 0308 	add.w	r3, r5, #8
    cbc2:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
    cbc4:	6862      	ldr	r2, [r4, #4]
    cbc6:	2a00      	cmp	r2, #0
    cbc8:	d151      	bne.n	cc6e <bt_gatt_service_register+0x182>
	list->head = node;
    cbca:	e9c4 3300 	strd	r3, r3, [r4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cbce:	f3bf 8f5b 	dmb	ish
    cbd2:	4b31      	ldr	r3, [pc, #196]	; (cc98 <bt_gatt_service_register+0x1ac>)
    cbd4:	6818      	ldr	r0, [r3, #0]
    cbd6:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&init)) {
    cbda:	2800      	cmp	r0, #0
    cbdc:	d0a9      	beq.n	cb32 <bt_gatt_service_register+0x46>
		    svc->attrs[svc->attr_count - 1].handle);
    cbde:	e9d5 2300 	ldrd	r2, r3, [r5]
	sc_indicate(svc->attrs[0].handle,
    cbe2:	2114      	movs	r1, #20
    cbe4:	fb01 2303 	mla	r3, r1, r3, r2
    cbe8:	8a10      	ldrh	r0, [r2, #16]
    cbea:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    cbee:	f7ff fddd 	bl	c7ac <sc_indicate>
	db_changed();
    cbf2:	f7ff fd29 	bl	c648 <db_changed>
	return 0;
    cbf6:	2000      	movs	r0, #0
    cbf8:	e79b      	b.n	cb32 <bt_gatt_service_register+0x46>
		} else if (attrs->handle > handle) {
    cbfa:	42b9      	cmp	r1, r7
    cbfc:	d8cc      	bhi.n	cb98 <bt_gatt_service_register+0xac>
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    cbfe:	ab01      	add	r3, sp, #4
    cc00:	465a      	mov	r2, fp
    cc02:	4608      	mov	r0, r1
	const struct bt_gatt_attr *attr = NULL;
    cc04:	f8cd a004 	str.w	sl, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    cc08:	f016 f9e1 	bl	22fce <bt_gatt_foreach_attr>
	return attr;
    cc0c:	9b01      	ldr	r3, [sp, #4]
		} else if (find_attr(attrs->handle)) {
    cc0e:	b173      	cbz	r3, cc2e <bt_gatt_service_register+0x142>
    cc10:	4b22      	ldr	r3, [pc, #136]	; (cc9c <bt_gatt_service_register+0x1b0>)
    cc12:	4a23      	ldr	r2, [pc, #140]	; (cca0 <bt_gatt_service_register+0x1b4>)
			BT_ERR("Unable to register handle 0x%04x",
    cc14:	4823      	ldr	r0, [pc, #140]	; (cca4 <bt_gatt_service_register+0x1b8>)
    cc16:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    cc1a:	1ad2      	subs	r2, r2, r3
    cc1c:	08d2      	lsrs	r2, r2, #3
    cc1e:	0192      	lsls	r2, r2, #6
    cc20:	f042 0201 	orr.w	r2, r2, #1
    cc24:	f013 f938 	bl	1fe98 <log_1>
			return -EINVAL;
    cc28:	f06f 0015 	mvn.w	r0, #21
    cc2c:	e781      	b.n	cb32 <bt_gatt_service_register+0x46>
    cc2e:	4639      	mov	r1, r7
    cc30:	e7b2      	b.n	cb98 <bt_gatt_service_register+0xac>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    cc32:	6821      	ldr	r1, [r4, #0]
    cc34:	2900      	cmp	r1, #0
    cc36:	d0ca      	beq.n	cbce <bt_gatt_service_register+0xe2>
    cc38:	f1a1 0308 	sub.w	r3, r1, #8
    cc3c:	2200      	movs	r2, #0
    cc3e:	2b00      	cmp	r3, #0
    cc40:	d0c5      	beq.n	cbce <bt_gatt_service_register+0xe2>
		if (tmp->attrs[0].handle > svc->attrs[0].handle) {
    cc42:	681e      	ldr	r6, [r3, #0]
    cc44:	8a36      	ldrh	r6, [r6, #16]
    cc46:	4286      	cmp	r6, r0
    cc48:	d914      	bls.n	cc74 <bt_gatt_service_register+0x188>
			if (prev) {
    cc4a:	f105 0308 	add.w	r3, r5, #8
    cc4e:	b112      	cbz	r2, cc56 <bt_gatt_service_register+0x16a>
Z_GENLIST_INSERT(slist, snode)
    cc50:	f112 0f08 	cmn.w	r2, #8
    cc54:	d105      	bne.n	cc62 <bt_gatt_service_register+0x176>
Z_GENLIST_PREPEND(slist, snode)
    cc56:	6862      	ldr	r2, [r4, #4]
	parent->next = child;
    cc58:	60a9      	str	r1, [r5, #8]
	list->head = node;
    cc5a:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    cc5c:	2a00      	cmp	r2, #0
    cc5e:	d1b6      	bne.n	cbce <bt_gatt_service_register+0xe2>
    cc60:	e006      	b.n	cc70 <bt_gatt_service_register+0x184>
Z_GENLIST_INSERT(slist, snode)
    cc62:	6891      	ldr	r1, [r2, #8]
	parent->next = child;
    cc64:	60a9      	str	r1, [r5, #8]
Z_GENLIST_INSERT(slist, snode)
    cc66:	2900      	cmp	r1, #0
    cc68:	d0ac      	beq.n	cbc4 <bt_gatt_service_register+0xd8>
	parent->next = child;
    cc6a:	6093      	str	r3, [r2, #8]
	if (err < 0) {
    cc6c:	e7af      	b.n	cbce <bt_gatt_service_register+0xe2>
    cc6e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    cc70:	6063      	str	r3, [r4, #4]
    cc72:	e7ac      	b.n	cbce <bt_gatt_service_register+0xe2>
Z_GENLIST_PEEK_NEXT(slist, snode)
    cc74:	f113 0f08 	cmn.w	r3, #8
    cc78:	d0a9      	beq.n	cbce <bt_gatt_service_register+0xe2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    cc7a:	689e      	ldr	r6, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    cc7c:	2e00      	cmp	r6, #0
    cc7e:	d0a6      	beq.n	cbce <bt_gatt_service_register+0xe2>
    cc80:	461a      	mov	r2, r3
    cc82:	f1a6 0308 	sub.w	r3, r6, #8
    cc86:	e7da      	b.n	cc3e <bt_gatt_service_register+0x152>
	handle = last->attrs[last->attr_count - 1].handle;
    cc88:	681b      	ldr	r3, [r3, #0]
    cc8a:	deff      	udf	#255	; 0xff
    cc8c:	2000141c 	.word	0x2000141c
    cc90:	200013f8 	.word	0x200013f8
    cc94:	20002af0 	.word	0x20002af0
    cc98:	20001400 	.word	0x20001400
    cc9c:	00024fd8 	.word	0x00024fd8
    cca0:	000250b8 	.word	0x000250b8
    cca4:	00028573 	.word	0x00028573
    cca8:	00022abd 	.word	0x00022abd

0000ccac <bt_gatt_indicate>:
{
    ccac:	b530      	push	{r4, r5, lr}
    ccae:	4b39      	ldr	r3, [pc, #228]	; (cd94 <bt_gatt_indicate+0xe8>)
    ccb0:	f3bf 8f5b 	dmb	ish
    ccb4:	681b      	ldr	r3, [r3, #0]
    ccb6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ccba:	079a      	lsls	r2, r3, #30
{
    ccbc:	b08b      	sub	sp, #44	; 0x2c
    ccbe:	4604      	mov	r4, r0
    ccc0:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ccc2:	d561      	bpl.n	cd88 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    ccc4:	6848      	ldr	r0, [r1, #4]
    ccc6:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    ccc8:	b114      	cbz	r4, ccd0 <bt_gatt_indicate+0x24>
    ccca:	7b63      	ldrb	r3, [r4, #13]
    cccc:	2b07      	cmp	r3, #7
    ccce:	d15e      	bne.n	cd8e <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    ccd0:	f7ff fde8 	bl	c8a4 <bt_gatt_attr_get_handle>
    ccd4:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    ccd8:	b918      	cbnz	r0, cce2 <bt_gatt_indicate+0x36>
		return -ENOENT;
    ccda:	f06f 0001 	mvn.w	r0, #1
}
    ccde:	b00b      	add	sp, #44	; 0x2c
    cce0:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    cce2:	682a      	ldr	r2, [r5, #0]
    cce4:	b9ba      	cbnz	r2, cd16 <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    cce6:	9b05      	ldr	r3, [sp, #20]
    cce8:	6818      	ldr	r0, [r3, #0]
    ccea:	2300      	movs	r3, #0
    ccec:	f88d 3010 	strb.w	r3, [sp, #16]
    ccf0:	a904      	add	r1, sp, #16
    ccf2:	f642 0303 	movw	r3, #10243	; 0x2803
    ccf6:	f8ad 3012 	strh.w	r3, [sp, #18]
    ccfa:	f014 fe43 	bl	21984 <bt_uuid_cmp>
    ccfe:	b1d0      	cbz	r0, cd36 <bt_gatt_indicate+0x8a>
	if (conn) {
    cd00:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    cd04:	b324      	cbz	r4, cd50 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    cd06:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    cd08:	4601      	mov	r1, r0
		params->_ref = 1;
    cd0a:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    cd0c:	462a      	mov	r2, r5
    cd0e:	4620      	mov	r0, r4
    cd10:	f7ff fb00 	bl	c314 <gatt_indicate>
    cd14:	e7e3      	b.n	ccde <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    cd16:	a905      	add	r1, sp, #20
    cd18:	9102      	str	r1, [sp, #8]
    cd1a:	491f      	ldr	r1, [pc, #124]	; (cd98 <bt_gatt_indicate+0xec>)
    cd1c:	9101      	str	r1, [sp, #4]
    cd1e:	2101      	movs	r1, #1
	found->attr = NULL;
    cd20:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    cd22:	9100      	str	r1, [sp, #0]
    cd24:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    cd28:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    cd2a:	f7ff fdeb 	bl	c904 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    cd2e:	9b05      	ldr	r3, [sp, #20]
    cd30:	2b00      	cmp	r3, #0
    cd32:	d1d8      	bne.n	cce6 <bt_gatt_indicate+0x3a>
    cd34:	e7d1      	b.n	ccda <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    cd36:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    cd38:	68c3      	ldr	r3, [r0, #12]
    cd3a:	799b      	ldrb	r3, [r3, #6]
    cd3c:	069b      	lsls	r3, r3, #26
    cd3e:	d402      	bmi.n	cd46 <bt_gatt_indicate+0x9a>
			return -EINVAL;
    cd40:	f06f 0015 	mvn.w	r0, #21
    cd44:	e7cb      	b.n	ccde <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    cd46:	f016 f8f4 	bl	22f32 <bt_gatt_attr_value_handle>
    cd4a:	f8ad 0018 	strh.w	r0, [sp, #24]
    cd4e:	e7d7      	b.n	cd00 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
    cd50:	f06f 0338 	mvn.w	r3, #56	; 0x38
    cd54:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    cd56:	2302      	movs	r3, #2
    cd58:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cd5c:	f642 1302 	movw	r3, #10498	; 0x2902
    cd60:	f8ad 3012 	strh.w	r3, [sp, #18]
    cd64:	ab05      	add	r3, sp, #20
    cd66:	9302      	str	r3, [sp, #8]
    cd68:	4b0c      	ldr	r3, [pc, #48]	; (cd9c <bt_gatt_indicate+0xf0>)
    cd6a:	9301      	str	r3, [sp, #4]
    cd6c:	2301      	movs	r3, #1
    cd6e:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    cd70:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cd72:	4623      	mov	r3, r4
    cd74:	aa04      	add	r2, sp, #16
    cd76:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    cd7a:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cd7c:	f88d 4010 	strb.w	r4, [sp, #16]
    cd80:	f7ff fdc0 	bl	c904 <bt_gatt_foreach_attr_type>
	return data.err;
    cd84:	9807      	ldr	r0, [sp, #28]
    cd86:	e7aa      	b.n	ccde <bt_gatt_indicate+0x32>
		return -EAGAIN;
    cd88:	f06f 000a 	mvn.w	r0, #10
    cd8c:	e7a7      	b.n	ccde <bt_gatt_indicate+0x32>
		return -ENOTCONN;
    cd8e:	f06f 0038 	mvn.w	r0, #56	; 0x38
    cd92:	e7a4      	b.n	ccde <bt_gatt_indicate+0x32>
    cd94:	20000094 	.word	0x20000094
    cd98:	00022b03 	.word	0x00022b03
    cd9c:	0000c395 	.word	0x0000c395

0000cda0 <sc_process>:
{
    cda0:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    cda2:	f850 2c08 	ldr.w	r2, [r0, #-8]
    cda6:	9201      	str	r2, [sp, #4]
{
    cda8:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    cdaa:	f1a0 0120 	sub.w	r1, r0, #32
    cdae:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    cdb2:	f3bf 8f5b 	dmb	ish
    cdb6:	e854 2f00 	ldrex	r2, [r4]
    cdba:	f022 0201 	bic.w	r2, r2, #1
    cdbe:	e844 2000 	strex	r0, r2, [r4]
    cdc2:	2800      	cmp	r0, #0
    cdc4:	d1f7      	bne.n	cdb6 <sc_process+0x16>
    cdc6:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    cdca:	4a0d      	ldr	r2, [pc, #52]	; (ce00 <sc_process+0x60>)
    cdcc:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    cdd0:	4a0c      	ldr	r2, [pc, #48]	; (ce04 <sc_process+0x64>)
    cdd2:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    cdd6:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    cdd8:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    cdda:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    cdde:	2204      	movs	r2, #4
	sc->start = 0U;
    cde0:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    cde4:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    cde8:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    cdec:	f7ff ff5e 	bl	ccac <bt_gatt_indicate>
    cdf0:	b918      	cbnz	r0, cdfa <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    cdf2:	2101      	movs	r1, #1
    cdf4:	4620      	mov	r0, r4
    cdf6:	f015 ff64 	bl	22cc2 <atomic_set_bit>
}
    cdfa:	b002      	add	sp, #8
    cdfc:	bd10      	pop	{r4, pc}
    cdfe:	bf00      	nop
    ce00:	000257b0 	.word	0x000257b0
    ce04:	0000c5b1 	.word	0x0000c5b1

0000ce08 <update_ccc>:
{
    ce08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    ce0c:	6881      	ldr	r1, [r0, #8]
{
    ce0e:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    ce10:	4a40      	ldr	r2, [pc, #256]	; (cf14 <update_ccc+0x10c>)
    ce12:	4291      	cmp	r1, r2
{
    ce14:	b085      	sub	sp, #20
    ce16:	4682      	mov	sl, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    ce18:	d178      	bne.n	cf0c <update_ccc+0x104>
    ce1a:	4c3f      	ldr	r4, [pc, #252]	; (cf18 <update_ccc+0x110>)
    ce1c:	493f      	ldr	r1, [pc, #252]	; (cf1c <update_ccc+0x114>)
	ccc = attr->user_data;
    ce1e:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
    ce22:	683d      	ldr	r5, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
    ce24:	f8df b10c 	ldr.w	fp, [pc, #268]	; cf34 <update_ccc+0x12c>
    ce28:	1a64      	subs	r4, r4, r1
    ce2a:	08e4      	lsrs	r4, r4, #3
    ce2c:	f108 0315 	add.w	r3, r8, #21
    ce30:	ea4f 1984 	mov.w	r9, r4, lsl #6
    ce34:	f108 0601 	add.w	r6, r8, #1
    ce38:	9300      	str	r3, [sp, #0]
    ce3a:	f049 0902 	orr.w	r9, r9, #2
		if (!cfg->value ||
    ce3e:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    ce42:	b19a      	cbz	r2, ce6c <update_ccc+0x64>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    ce44:	f816 1c01 	ldrb.w	r1, [r6, #-1]
    ce48:	4632      	mov	r2, r6
    ce4a:	4628      	mov	r0, r5
    ce4c:	f015 f8c3 	bl	21fd6 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    ce50:	b160      	cbz	r0, ce6c <update_ccc+0x64>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    ce52:	222a      	movs	r2, #42	; 0x2a
    ce54:	4651      	mov	r1, sl
    ce56:	4628      	mov	r0, r5
    ce58:	f016 f8c6 	bl	22fe8 <bt_gatt_check_perm>
		if (err) {
    ce5c:	b1d8      	cbz	r0, ce96 <update_ccc+0x8e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    ce5e:	2803      	cmp	r0, #3
    ce60:	d109      	bne.n	ce76 <update_ccc+0x6e>
				BT_WARN("CCC %p not writable", attr);
    ce62:	464a      	mov	r2, r9
    ce64:	4651      	mov	r1, sl
    ce66:	4658      	mov	r0, fp
    ce68:	f013 f816 	bl	1fe98 <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    ce6c:	9b00      	ldr	r3, [sp, #0]
    ce6e:	360a      	adds	r6, #10
    ce70:	429e      	cmp	r6, r3
    ce72:	d04b      	beq.n	cf0c <update_ccc+0x104>
    ce74:	e7e3      	b.n	ce3e <update_ccc+0x36>
				sec = BT_SECURITY_L3;
    ce76:	2805      	cmp	r0, #5
    ce78:	bf14      	ite	ne
    ce7a:	2202      	movne	r2, #2
    ce7c:	2203      	moveq	r2, #3
			    bt_conn_get_security(conn) < sec) {
    ce7e:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    ce80:	9201      	str	r2, [sp, #4]
			    bt_conn_get_security(conn) < sec) {
    ce82:	f015 f89d 	bl	21fc0 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    ce86:	9a01      	ldr	r2, [sp, #4]
    ce88:	4282      	cmp	r2, r0
    ce8a:	d904      	bls.n	ce96 <update_ccc+0x8e>
				if (data->sec < sec) {
    ce8c:	7939      	ldrb	r1, [r7, #4]
    ce8e:	4291      	cmp	r1, r2
    ce90:	d2ec      	bcs.n	ce6c <update_ccc+0x64>
					data->sec = sec;
    ce92:	713a      	strb	r2, [r7, #4]
    ce94:	e7ea      	b.n	ce6c <update_ccc+0x64>
		gatt_ccc_changed(attr, ccc);
    ce96:	4641      	mov	r1, r8
    ce98:	4650      	mov	r0, sl
    ce9a:	f015 fe12 	bl	22ac2 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    ce9e:	4b20      	ldr	r3, [pc, #128]	; (cf20 <update_ccc+0x118>)
    cea0:	4598      	cmp	r8, r3
    cea2:	d133      	bne.n	cf0c <update_ccc+0x104>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    cea4:	7a28      	ldrb	r0, [r5, #8]
    cea6:	f105 0188 	add.w	r1, r5, #136	; 0x88
    ceaa:	f7ff f8bd 	bl	c028 <find_sc_cfg>
	if (!cfg) {
    ceae:	4606      	mov	r6, r0
    ceb0:	b360      	cbz	r0, cf0c <update_ccc+0x104>
	if (!(cfg->data.start || cfg->data.end)) {
    ceb2:	8902      	ldrh	r2, [r0, #8]
    ceb4:	8943      	ldrh	r3, [r0, #10]
    ceb6:	ea52 0103 	orrs.w	r1, r2, r3
    ceba:	d027      	beq.n	cf0c <update_ccc+0x104>
	index = bt_conn_index(conn);
    cebc:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    cebe:	f8ad 200c 	strh.w	r2, [sp, #12]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    cec2:	f8ad 300e 	strh.w	r3, [sp, #14]
	index = bt_conn_index(conn);
    cec6:	f7fd fd91 	bl	a9ec <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    ceca:	4916      	ldr	r1, [pc, #88]	; (cf24 <update_ccc+0x11c>)
    cecc:	4a16      	ldr	r2, [pc, #88]	; (cf28 <update_ccc+0x120>)
    cece:	2318      	movs	r3, #24
    ced0:	fb03 1300 	mla	r3, r3, r0, r1
    ced4:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    ced6:	4a15      	ldr	r2, [pc, #84]	; (cf2c <update_ccc+0x124>)
    ced8:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    ceda:	aa03      	add	r2, sp, #12
    cedc:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    cede:	2204      	movs	r2, #4
    cee0:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    cee2:	b203      	sxth	r3, r0
    cee4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    cee8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    ceec:	4628      	mov	r0, r5
    ceee:	f7ff fedd 	bl	ccac <bt_gatt_indicate>
    cef2:	b128      	cbz	r0, cf00 <update_ccc+0xf8>
		BT_ERR("SC restore indication failed");
    cef4:	01a1      	lsls	r1, r4, #6
    cef6:	480e      	ldr	r0, [pc, #56]	; (cf30 <update_ccc+0x128>)
    cef8:	f041 0101 	orr.w	r1, r1, #1
    cefc:	f012 ffbf 	bl	1fe7e <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    cf00:	2204      	movs	r2, #4
    cf02:	2100      	movs	r1, #0
    cf04:	f106 0008 	add.w	r0, r6, #8
    cf08:	f014 fc98 	bl	2183c <memset>
}
    cf0c:	2001      	movs	r0, #1
    cf0e:	b005      	add	sp, #20
    cf10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf14:	0000c0c5 	.word	0x0000c0c5
    cf18:	000250b8 	.word	0x000250b8
    cf1c:	00024fd8 	.word	0x00024fd8
    cf20:	20000214 	.word	0x20000214
    cf24:	20001404 	.word	0x20001404
    cf28:	000257b0 	.word	0x000257b0
    cf2c:	00022cdf 	.word	0x00022cdf
    cf30:	000285a8 	.word	0x000285a8
    cf34:	00028594 	.word	0x00028594

0000cf38 <bt_gatt_discover>:
{
    cf38:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    cf3a:	7b43      	ldrb	r3, [r0, #13]
    cf3c:	2b07      	cmp	r3, #7
{
    cf3e:	b085      	sub	sp, #20
    cf40:	4605      	mov	r5, r0
    cf42:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    cf44:	f040 80dc 	bne.w	d100 <bt_gatt_discover+0x1c8>
	switch (params->type) {
    cf48:	7c09      	ldrb	r1, [r1, #16]
    cf4a:	2905      	cmp	r1, #5
    cf4c:	f200 80cd 	bhi.w	d0ea <bt_gatt_discover+0x1b2>
    cf50:	e8df f001 	tbb	[pc, r1]
    cf54:	66660303 	.word	0x66660303
    cf58:	b784      	.short	0xb784
		if (params->uuid) {
    cf5a:	6823      	ldr	r3, [r4, #0]
    cf5c:	2b00      	cmp	r3, #0
    cf5e:	d041      	beq.n	cfe4 <bt_gatt_discover+0xac>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
    cf60:	2206      	movs	r2, #6
    cf62:	4611      	mov	r1, r2
    cf64:	f7fe fc0c 	bl	b780 <bt_att_create_pdu>
	if (!buf) {
    cf68:	4606      	mov	r6, r0
    cf6a:	b918      	cbnz	r0, cf74 <bt_gatt_discover+0x3c>
		return -ENOMEM;
    cf6c:	f06f 000b 	mvn.w	r0, #11
}
    cf70:	b005      	add	sp, #20
    cf72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	req = net_buf_add(buf, sizeof(*req));
    cf74:	f100 0708 	add.w	r7, r0, #8
    cf78:	2106      	movs	r1, #6
    cf7a:	4638      	mov	r0, r7
    cf7c:	f017 f85c 	bl	24038 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    cf80:	8923      	ldrh	r3, [r4, #8]
    cf82:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    cf84:	89e3      	ldrh	r3, [r4, #14]
    cf86:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    cf88:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
    cf8a:	2b00      	cmp	r3, #0
	req->type = sys_cpu_to_le16(uuid_val);
    cf8c:	f642 0301 	movw	r3, #10241	; 0x2801
    cf90:	bf08      	it	eq
    cf92:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    cf96:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
    cf98:	6823      	ldr	r3, [r4, #0]
    cf9a:	7819      	ldrb	r1, [r3, #0]
    cf9c:	b189      	cbz	r1, cfc2 <bt_gatt_discover+0x8a>
    cf9e:	2902      	cmp	r1, #2
    cfa0:	d01a      	beq.n	cfd8 <bt_gatt_discover+0xa0>
    cfa2:	4b59      	ldr	r3, [pc, #356]	; (d108 <bt_gatt_discover+0x1d0>)
    cfa4:	4a59      	ldr	r2, [pc, #356]	; (d10c <bt_gatt_discover+0x1d4>)
		BT_ERR("Unknown UUID type %u", params->uuid->type);
    cfa6:	485a      	ldr	r0, [pc, #360]	; (d110 <bt_gatt_discover+0x1d8>)
    cfa8:	1ad2      	subs	r2, r2, r3
    cfaa:	08d2      	lsrs	r2, r2, #3
    cfac:	0192      	lsls	r2, r2, #6
    cfae:	f042 0201 	orr.w	r2, r2, #1
    cfb2:	f012 ff71 	bl	1fe98 <log_1>
		net_buf_unref(buf);
    cfb6:	4630      	mov	r0, r6
    cfb8:	f010 f8b0 	bl	1d11c <net_buf_unref>
	return -EINVAL;
    cfbc:	f06f 0015 	mvn.w	r0, #21
    cfc0:	e7d6      	b.n	cf70 <bt_gatt_discover+0x38>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
    cfc2:	8859      	ldrh	r1, [r3, #2]
    cfc4:	4638      	mov	r0, r7
    cfc6:	f017 f84e 	bl	24066 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
    cfca:	4a52      	ldr	r2, [pc, #328]	; (d114 <bt_gatt_discover+0x1dc>)
    cfcc:	4623      	mov	r3, r4
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    cfce:	4631      	mov	r1, r6
    cfd0:	4628      	mov	r0, r5
    cfd2:	f7ff f963 	bl	c29c <gatt_send.constprop.0>
    cfd6:	e7cb      	b.n	cf70 <bt_gatt_discover+0x38>
		net_buf_add_mem(buf, BT_UUID_128(params->uuid)->val, 16);
    cfd8:	2210      	movs	r2, #16
    cfda:	1c59      	adds	r1, r3, #1
    cfdc:	4638      	mov	r0, r7
    cfde:	f017 f831 	bl	24044 <net_buf_simple_add_mem>
		break;
    cfe2:	e7f2      	b.n	cfca <bt_gatt_discover+0x92>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
    cfe4:	2204      	movs	r2, #4
    cfe6:	2110      	movs	r1, #16
    cfe8:	f7fe fbca 	bl	b780 <bt_att_create_pdu>
	if (!buf) {
    cfec:	4606      	mov	r6, r0
    cfee:	2800      	cmp	r0, #0
    cff0:	d0bc      	beq.n	cf6c <bt_gatt_discover+0x34>
	req = net_buf_add(buf, sizeof(*req));
    cff2:	f100 0708 	add.w	r7, r0, #8
    cff6:	2104      	movs	r1, #4
    cff8:	4638      	mov	r0, r7
    cffa:	f017 f81d 	bl	24038 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    cffe:	8923      	ldrh	r3, [r4, #8]
    d000:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    d002:	89e3      	ldrh	r3, [r4, #14]
    d004:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    d006:	7c23      	ldrb	r3, [r4, #16]
    d008:	b93b      	cbnz	r3, d01a <bt_gatt_discover+0xe2>
		net_buf_add_le16(buf, BT_UUID_GATT_PRIMARY_VAL);
    d00a:	f44f 5120 	mov.w	r1, #10240	; 0x2800
		net_buf_add_le16(buf, BT_UUID_GATT_SECONDARY_VAL);
    d00e:	4638      	mov	r0, r7
    d010:	f017 f829 	bl	24066 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
    d014:	4a40      	ldr	r2, [pc, #256]	; (d118 <bt_gatt_discover+0x1e0>)
    d016:	4623      	mov	r3, r4
    d018:	e7d9      	b.n	cfce <bt_gatt_discover+0x96>
		net_buf_add_le16(buf, BT_UUID_GATT_SECONDARY_VAL);
    d01a:	f642 0101 	movw	r1, #10241	; 0x2801
    d01e:	e7f6      	b.n	d00e <bt_gatt_discover+0xd6>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    d020:	2204      	movs	r2, #4
    d022:	2108      	movs	r1, #8
    d024:	f7fe fbac 	bl	b780 <bt_att_create_pdu>
	if (!buf) {
    d028:	4606      	mov	r6, r0
    d02a:	2800      	cmp	r0, #0
    d02c:	d09e      	beq.n	cf6c <bt_gatt_discover+0x34>
	req = net_buf_add(buf, sizeof(*req));
    d02e:	f100 0708 	add.w	r7, r0, #8
    d032:	2104      	movs	r1, #4
    d034:	4638      	mov	r0, r7
    d036:	f016 ffff 	bl	24038 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    d03a:	8923      	ldrh	r3, [r4, #8]
    d03c:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    d03e:	89e3      	ldrh	r3, [r4, #14]
    d040:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    d042:	7c23      	ldrb	r3, [r4, #16]
    d044:	2b02      	cmp	r3, #2
		net_buf_add_le16(buf, BT_UUID_GATT_INCLUDE_VAL);
    d046:	bf0c      	ite	eq
    d048:	f642 0102 	movweq	r1, #10242	; 0x2802
		net_buf_add_le16(buf, BT_UUID_GATT_CHRC_VAL);
    d04c:	f642 0103 	movwne	r1, #10243	; 0x2803
    d050:	4638      	mov	r0, r7
    d052:	f017 f808 	bl	24066 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
    d056:	4a31      	ldr	r2, [pc, #196]	; (d11c <bt_gatt_discover+0x1e4>)
    d058:	4623      	mov	r3, r4
    d05a:	e7b8      	b.n	cfce <bt_gatt_discover+0x96>
		if (params->uuid &&
    d05c:	6820      	ldr	r0, [r4, #0]
    d05e:	b380      	cbz	r0, d0c2 <bt_gatt_discover+0x18a>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    d060:	2600      	movs	r6, #0
    d062:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    d066:	4669      	mov	r1, sp
    d068:	f88d 6000 	strb.w	r6, [sp]
    d06c:	f8ad 3002 	strh.w	r3, [sp, #2]
    d070:	f014 fc88 	bl	21984 <bt_uuid_cmp>
		if (params->uuid &&
    d074:	2800      	cmp	r0, #0
    d076:	d0a1      	beq.n	cfbc <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    d078:	f642 0301 	movw	r3, #10241	; 0x2801
    d07c:	6820      	ldr	r0, [r4, #0]
    d07e:	f88d 6004 	strb.w	r6, [sp, #4]
    d082:	a901      	add	r1, sp, #4
    d084:	f8ad 3006 	strh.w	r3, [sp, #6]
    d088:	f014 fc7c 	bl	21984 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    d08c:	2800      	cmp	r0, #0
    d08e:	d095      	beq.n	cfbc <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    d090:	f642 0302 	movw	r3, #10242	; 0x2802
    d094:	6820      	ldr	r0, [r4, #0]
    d096:	f88d 6008 	strb.w	r6, [sp, #8]
    d09a:	a902      	add	r1, sp, #8
    d09c:	f8ad 300a 	strh.w	r3, [sp, #10]
    d0a0:	f014 fc70 	bl	21984 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    d0a4:	2800      	cmp	r0, #0
    d0a6:	d089      	beq.n	cfbc <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
    d0a8:	f642 0303 	movw	r3, #10243	; 0x2803
    d0ac:	6820      	ldr	r0, [r4, #0]
    d0ae:	f88d 600c 	strb.w	r6, [sp, #12]
    d0b2:	a903      	add	r1, sp, #12
    d0b4:	f8ad 300e 	strh.w	r3, [sp, #14]
    d0b8:	f014 fc64 	bl	21984 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    d0bc:	2800      	cmp	r0, #0
    d0be:	f43f af7d 	beq.w	cfbc <bt_gatt_discover+0x84>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
    d0c2:	2204      	movs	r2, #4
    d0c4:	4611      	mov	r1, r2
    d0c6:	4628      	mov	r0, r5
    d0c8:	f7fe fb5a 	bl	b780 <bt_att_create_pdu>
	if (!buf) {
    d0cc:	4606      	mov	r6, r0
    d0ce:	2800      	cmp	r0, #0
    d0d0:	f43f af4c 	beq.w	cf6c <bt_gatt_discover+0x34>
	req = net_buf_add(buf, sizeof(*req));
    d0d4:	2104      	movs	r1, #4
    d0d6:	3008      	adds	r0, #8
    d0d8:	f016 ffae 	bl	24038 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    d0dc:	8923      	ldrh	r3, [r4, #8]
    d0de:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    d0e0:	89e3      	ldrh	r3, [r4, #14]
    d0e2:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    d0e4:	4a0e      	ldr	r2, [pc, #56]	; (d120 <bt_gatt_discover+0x1e8>)
    d0e6:	4623      	mov	r3, r4
    d0e8:	e771      	b.n	cfce <bt_gatt_discover+0x96>
    d0ea:	4b07      	ldr	r3, [pc, #28]	; (d108 <bt_gatt_discover+0x1d0>)
    d0ec:	4a07      	ldr	r2, [pc, #28]	; (d10c <bt_gatt_discover+0x1d4>)
		BT_ERR("Invalid discovery type: %u", params->type);
    d0ee:	480d      	ldr	r0, [pc, #52]	; (d124 <bt_gatt_discover+0x1ec>)
    d0f0:	1ad2      	subs	r2, r2, r3
    d0f2:	08d2      	lsrs	r2, r2, #3
    d0f4:	0192      	lsls	r2, r2, #6
    d0f6:	f042 0201 	orr.w	r2, r2, #1
    d0fa:	f012 fecd 	bl	1fe98 <log_1>
    d0fe:	e75d      	b.n	cfbc <bt_gatt_discover+0x84>
		return -ENOTCONN;
    d100:	f06f 0038 	mvn.w	r0, #56	; 0x38
    d104:	e734      	b.n	cf70 <bt_gatt_discover+0x38>
    d106:	bf00      	nop
    d108:	00024fd8 	.word	0x00024fd8
    d10c:	000250b8 	.word	0x000250b8
    d110:	000285c5 	.word	0x000285c5
    d114:	00023079 	.word	0x00023079
    d118:	0000d129 	.word	0x0000d129
    d11c:	0000d239 	.word	0x0000d239
    d120:	0000d509 	.word	0x0000d509
    d124:	000285da 	.word	0x000285da

0000d128 <gatt_read_group_rsp>:
{
    d128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d12c:	b08f      	sub	sp, #60	; 0x3c
    d12e:	4617      	mov	r7, r2
    d130:	9d18      	ldr	r5, [sp, #96]	; 0x60
    d132:	4681      	mov	r9, r0
	if (err) {
    d134:	460a      	mov	r2, r1
    d136:	b131      	cbz	r1, d146 <gatt_read_group_rsp+0x1e>
		params->func(conn, NULL, params);
    d138:	686b      	ldr	r3, [r5, #4]
    d13a:	462a      	mov	r2, r5
    d13c:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
    d13e:	4798      	blx	r3
}
    d140:	b00f      	add	sp, #60	; 0x3c
    d142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (rsp->len) {
    d146:	7839      	ldrb	r1, [r7, #0]
    d148:	2906      	cmp	r1, #6
    d14a:	d011      	beq.n	d170 <gatt_read_group_rsp+0x48>
    d14c:	2914      	cmp	r1, #20
    d14e:	d00e      	beq.n	d16e <gatt_read_group_rsp+0x46>
    d150:	4a36      	ldr	r2, [pc, #216]	; (d22c <gatt_read_group_rsp+0x104>)
    d152:	4b37      	ldr	r3, [pc, #220]	; (d230 <gatt_read_group_rsp+0x108>)
		BT_ERR("Invalid data len %u", rsp->len);
    d154:	4837      	ldr	r0, [pc, #220]	; (d234 <gatt_read_group_rsp+0x10c>)
    d156:	1ad2      	subs	r2, r2, r3
    d158:	08d2      	lsrs	r2, r2, #3
    d15a:	0192      	lsls	r2, r2, #6
    d15c:	f042 0201 	orr.w	r2, r2, #1
    d160:	f012 fe9a 	bl	1fe98 <log_1>
	params->func(conn, NULL, params);
    d164:	686b      	ldr	r3, [r5, #4]
    d166:	462a      	mov	r2, r5
    d168:	2100      	movs	r1, #0
    d16a:	4648      	mov	r0, r9
    d16c:	e7e7      	b.n	d13e <gatt_read_group_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
    d16e:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
    d170:	3b01      	subs	r3, #1
		u.uuid.type = BT_UUID_TYPE_128;
    d172:	f88d 2010 	strb.w	r2, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
    d176:	b29c      	uxth	r4, r3
    d178:	f107 0801 	add.w	r8, r7, #1
	uint16_t start_handle, end_handle = 0U;
    d17c:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    d17e:	783b      	ldrb	r3, [r7, #0]
    d180:	42a3      	cmp	r3, r4
    d182:	d909      	bls.n	d198 <gatt_read_group_rsp+0x70>
	if (length == 0U && end_handle) {
    d184:	2c00      	cmp	r4, #0
    d186:	d1ed      	bne.n	d164 <gatt_read_group_rsp+0x3c>
    d188:	2e00      	cmp	r6, #0
    d18a:	d0eb      	beq.n	d164 <gatt_read_group_rsp+0x3c>
	gatt_discover_next(conn, handle, params);
    d18c:	462a      	mov	r2, r5
    d18e:	4631      	mov	r1, r6
    d190:	4648      	mov	r0, r9
    d192:	f015 ff54 	bl	2303e <gatt_discover_next>
    d196:	e7d3      	b.n	d140 <gatt_read_group_rsp+0x18>
		struct bt_gatt_attr attr = {};
    d198:	2214      	movs	r2, #20
    d19a:	2100      	movs	r1, #0
    d19c:	a809      	add	r0, sp, #36	; 0x24
    d19e:	f014 fb4d 	bl	2183c <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
    d1a2:	f8b8 a000 	ldrh.w	sl, [r8]
    d1a6:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
    d1aa:	2b00      	cmp	r3, #0
    d1ac:	d0da      	beq.n	d164 <gatt_read_group_rsp+0x3c>
		end_handle = sys_le16_to_cpu(data->end_handle);
    d1ae:	f8b8 b002 	ldrh.w	fp, [r8, #2]
    d1b2:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
    d1b6:	2e00      	cmp	r6, #0
    d1b8:	d0d4      	beq.n	d164 <gatt_read_group_rsp+0x3c>
    d1ba:	42b3      	cmp	r3, r6
    d1bc:	d8d2      	bhi.n	d164 <gatt_read_group_rsp+0x3c>
		switch (u.uuid.type) {
    d1be:	f89d 3010 	ldrb.w	r3, [sp, #16]
    d1c2:	b323      	cbz	r3, d20e <gatt_read_group_rsp+0xe6>
    d1c4:	2b02      	cmp	r3, #2
    d1c6:	d02a      	beq.n	d21e <gatt_read_group_rsp+0xf6>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
    d1c8:	f04f 0300 	mov.w	r3, #0
    d1cc:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    d1d0:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
    d1d2:	f8ad b00c 	strh.w	fp, [sp, #12]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
    d1d6:	2b00      	cmp	r3, #0
    d1d8:	f642 0301 	movw	r3, #10241	; 0x2801
    d1dc:	bf08      	it	eq
    d1de:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    d1e2:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
    d1e6:	ab04      	add	r3, sp, #16
    d1e8:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
    d1ea:	ab01      	add	r3, sp, #4
    d1ec:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
    d1ee:	ab02      	add	r3, sp, #8
    d1f0:	930c      	str	r3, [sp, #48]	; 0x30
		attr.handle = start_handle;
    d1f2:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d1f6:	686b      	ldr	r3, [r5, #4]
    d1f8:	462a      	mov	r2, r5
    d1fa:	a909      	add	r1, sp, #36	; 0x24
    d1fc:	4648      	mov	r0, r9
    d1fe:	4798      	blx	r3
    d200:	2800      	cmp	r0, #0
    d202:	d09d      	beq.n	d140 <gatt_read_group_rsp+0x18>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    d204:	783a      	ldrb	r2, [r7, #0]
    d206:	1aa4      	subs	r4, r4, r2
    d208:	b2a4      	uxth	r4, r4
    d20a:	4490      	add	r8, r2
    d20c:	e7b7      	b.n	d17e <gatt_read_group_rsp+0x56>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
    d20e:	2202      	movs	r2, #2
    d210:	f108 0104 	add.w	r1, r8, #4
    d214:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    d218:	f014 fae5 	bl	217e6 <memcpy>
			break;
    d21c:	e7d4      	b.n	d1c8 <gatt_read_group_rsp+0xa0>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    d21e:	2210      	movs	r2, #16
    d220:	f108 0104 	add.w	r1, r8, #4
    d224:	f10d 0011 	add.w	r0, sp, #17
    d228:	e7f6      	b.n	d218 <gatt_read_group_rsp+0xf0>
    d22a:	bf00      	nop
    d22c:	000250b8 	.word	0x000250b8
    d230:	00024fd8 	.word	0x00024fd8
    d234:	000285f5 	.word	0x000285f5

0000d238 <gatt_read_type_rsp>:
{
    d238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d23c:	b091      	sub	sp, #68	; 0x44
    d23e:	4690      	mov	r8, r2
    d240:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    d242:	4607      	mov	r7, r0
	if (err) {
    d244:	460a      	mov	r2, r1
    d246:	b121      	cbz	r1, d252 <gatt_read_type_rsp+0x1a>
		params->func(conn, NULL, params);
    d248:	686b      	ldr	r3, [r5, #4]
    d24a:	462a      	mov	r2, r5
    d24c:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
    d24e:	4798      	blx	r3
	if (!handle) {
    d250:	e06d      	b.n	d32e <gatt_read_type_rsp+0xf6>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    d252:	7c28      	ldrb	r0, [r5, #16]
    d254:	f898 1000 	ldrb.w	r1, [r8]
    d258:	2802      	cmp	r0, #2
    d25a:	f040 8087 	bne.w	d36c <gatt_read_type_rsp+0x134>
	switch (rsp->len) {
    d25e:	2906      	cmp	r1, #6
    d260:	d019      	beq.n	d296 <gatt_read_type_rsp+0x5e>
    d262:	2908      	cmp	r1, #8
    d264:	f040 8086 	bne.w	d374 <gatt_read_type_rsp+0x13c>
		u.uuid.type = BT_UUID_TYPE_16;
    d268:	f88d 2018 	strb.w	r2, [sp, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
    d26c:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
    d26e:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    d270:	b2a4      	uxth	r4, r4
    d272:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
    d276:	f10d 0a18 	add.w	sl, sp, #24
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d27a:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    d27c:	f898 3000 	ldrb.w	r3, [r8]
    d280:	42a3      	cmp	r3, r4
    d282:	d90b      	bls.n	d29c <gatt_read_type_rsp+0x64>
	if (length == 0U && handle) {
    d284:	b914      	cbnz	r4, d28c <gatt_read_type_rsp+0x54>
    d286:	2e00      	cmp	r6, #0
    d288:	f040 80da 	bne.w	d440 <gatt_read_type_rsp+0x208>
	params->func(conn, NULL, params);
    d28c:	686b      	ldr	r3, [r5, #4]
    d28e:	462a      	mov	r2, r5
    d290:	2100      	movs	r1, #0
    d292:	4638      	mov	r0, r7
    d294:	e7db      	b.n	d24e <gatt_read_type_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
    d296:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
    d29a:	e7e7      	b.n	d26c <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
    d29c:	f8b9 3000 	ldrh.w	r3, [r9]
    d2a0:	b29e      	uxth	r6, r3
		if (!handle) {
    d2a2:	2e00      	cmp	r6, #0
    d2a4:	d0f2      	beq.n	d28c <gatt_read_type_rsp+0x54>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    d2a6:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    d2aa:	f8ad 2014 	strh.w	r2, [sp, #20]
    d2ae:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
    d2b0:	f8b9 2004 	ldrh.w	r2, [r9, #4]
    d2b4:	f8ad 2016 	strh.w	r2, [sp, #22]
    d2b8:	b291      	uxth	r1, r2
		switch (u.uuid.type) {
    d2ba:	f89d 2018 	ldrb.w	r2, [sp, #24]
    d2be:	b182      	cbz	r2, d2e2 <gatt_read_type_rsp+0xaa>
    d2c0:	2a02      	cmp	r2, #2
    d2c2:	d019      	beq.n	d2f8 <gatt_read_type_rsp+0xc0>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    d2c4:	6829      	ldr	r1, [r5, #0]
    d2c6:	2900      	cmp	r1, #0
    d2c8:	d037      	beq.n	d33a <gatt_read_type_rsp+0x102>
    d2ca:	4650      	mov	r0, sl
    d2cc:	9301      	str	r3, [sp, #4]
    d2ce:	f014 fb59 	bl	21984 <bt_uuid_cmp>
    d2d2:	9b01      	ldr	r3, [sp, #4]
    d2d4:	b388      	cbz	r0, d33a <gatt_read_type_rsp+0x102>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    d2d6:	f898 2000 	ldrb.w	r2, [r8]
    d2da:	1aa4      	subs	r4, r4, r2
    d2dc:	b2a4      	uxth	r4, r4
    d2de:	4491      	add	r9, r2
    d2e0:	e7cc      	b.n	d27c <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
    d2e2:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
    d2e6:	f899 2006 	ldrb.w	r2, [r9, #6]
    d2ea:	f899 1007 	ldrb.w	r1, [r9, #7]
    d2ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d2f2:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
    d2f6:	e7e5      	b.n	d2c4 <gatt_read_type_rsp+0x8c>
			params->_included.start_handle = value.start_handle;
    d2f8:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
    d2fa:	81a9      	strh	r1, [r5, #12]
			params->_included.attr_handle = handle;
    d2fc:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    d2fe:	210a      	movs	r1, #10
    d300:	4638      	mov	r0, r7
    d302:	9201      	str	r2, [sp, #4]
    d304:	f7fe fa3c 	bl	b780 <bt_att_create_pdu>
	if (!buf) {
    d308:	4604      	mov	r4, r0
    d30a:	b198      	cbz	r0, d334 <gatt_read_type_rsp+0xfc>
	req = net_buf_add(buf, sizeof(*req));
    d30c:	9a01      	ldr	r2, [sp, #4]
    d30e:	3008      	adds	r0, #8
    d310:	4611      	mov	r1, r2
    d312:	f016 fe91 	bl	24038 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
    d316:	896b      	ldrh	r3, [r5, #10]
    d318:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
    d31a:	4a4c      	ldr	r2, [pc, #304]	; (d44c <gatt_read_type_rsp+0x214>)
    d31c:	462b      	mov	r3, r5
    d31e:	4621      	mov	r1, r4
    d320:	4638      	mov	r0, r7
    d322:	f7fe ffbb 	bl	c29c <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
    d326:	b286      	uxth	r6, r0
	if (!handle) {
    d328:	2e00      	cmp	r6, #0
    d32a:	f040 8089 	bne.w	d440 <gatt_read_type_rsp+0x208>
}
    d32e:	b011      	add	sp, #68	; 0x44
    d330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    d334:	f06f 000b 	mvn.w	r0, #11
    d338:	e7f5      	b.n	d326 <gatt_read_type_rsp+0xee>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d33a:	f642 0202 	movw	r2, #10242	; 0x2802
    d33e:	f8ad 200e 	strh.w	r2, [sp, #14]
    d342:	aa03      	add	r2, sp, #12
    d344:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
    d348:	aa04      	add	r2, sp, #16
    d34a:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
    d34c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d350:	f88d b00c 	strb.w	fp, [sp, #12]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d354:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d356:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    d35a:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d35e:	462a      	mov	r2, r5
    d360:	a90b      	add	r1, sp, #44	; 0x2c
    d362:	4638      	mov	r0, r7
    d364:	4798      	blx	r3
    d366:	2800      	cmp	r0, #0
    d368:	d1b5      	bne.n	d2d6 <gatt_read_type_rsp+0x9e>
    d36a:	e7e0      	b.n	d32e <gatt_read_type_rsp+0xf6>
	switch (rsp->len) {
    d36c:	2907      	cmp	r1, #7
    d36e:	d00d      	beq.n	d38c <gatt_read_type_rsp+0x154>
    d370:	2915      	cmp	r1, #21
    d372:	d00a      	beq.n	d38a <gatt_read_type_rsp+0x152>
    d374:	4b36      	ldr	r3, [pc, #216]	; (d450 <gatt_read_type_rsp+0x218>)
    d376:	4a37      	ldr	r2, [pc, #220]	; (d454 <gatt_read_type_rsp+0x21c>)
		BT_ERR("Invalid data len %u", rsp->len);
    d378:	4837      	ldr	r0, [pc, #220]	; (d458 <gatt_read_type_rsp+0x220>)
    d37a:	1ad2      	subs	r2, r2, r3
    d37c:	08d2      	lsrs	r2, r2, #3
    d37e:	0192      	lsls	r2, r2, #6
    d380:	f042 0201 	orr.w	r2, r2, #1
    d384:	f012 fd88 	bl	1fe98 <log_1>
		goto done;
    d388:	e780      	b.n	d28c <gatt_read_type_rsp+0x54>
		u.uuid.type = BT_UUID_TYPE_128;
    d38a:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
    d38c:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_128;
    d38e:	f88d 2018 	strb.w	r2, [sp, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
    d392:	b2a4      	uxth	r4, r4
    d394:	f108 0901 	add.w	r9, r8, #1
	uint16_t handle = 0U;
    d398:	2600      	movs	r6, #0
    d39a:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
    d39e:	f898 3000 	ldrb.w	r3, [r8]
    d3a2:	42a3      	cmp	r3, r4
    d3a4:	f63f af6e 	bhi.w	d284 <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
    d3a8:	f8b9 b000 	ldrh.w	fp, [r9]
    d3ac:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
    d3b0:	2e00      	cmp	r6, #0
    d3b2:	f43f af6b 	beq.w	d28c <gatt_read_type_rsp+0x54>
		switch (u.uuid.type) {
    d3b6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    d3ba:	b16b      	cbz	r3, d3d8 <gatt_read_type_rsp+0x1a0>
    d3bc:	2b02      	cmp	r3, #2
    d3be:	d014      	beq.n	d3ea <gatt_read_type_rsp+0x1b2>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    d3c0:	6829      	ldr	r1, [r5, #0]
    d3c2:	b1d1      	cbz	r1, d3fa <gatt_read_type_rsp+0x1c2>
    d3c4:	4650      	mov	r0, sl
    d3c6:	f014 fadd 	bl	21984 <bt_uuid_cmp>
    d3ca:	b1b0      	cbz	r0, d3fa <gatt_read_type_rsp+0x1c2>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    d3cc:	f898 2000 	ldrb.w	r2, [r8]
    d3d0:	1aa4      	subs	r4, r4, r2
    d3d2:	b2a4      	uxth	r4, r4
    d3d4:	4491      	add	r9, r2
    d3d6:	e7e2      	b.n	d39e <gatt_read_type_rsp+0x166>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
    d3d8:	f899 3005 	ldrb.w	r3, [r9, #5]
    d3dc:	f899 2006 	ldrb.w	r2, [r9, #6]
    d3e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d3e4:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
    d3e8:	e7ea      	b.n	d3c0 <gatt_read_type_rsp+0x188>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
    d3ea:	2210      	movs	r2, #16
    d3ec:	f109 0105 	add.w	r1, r9, #5
    d3f0:	f10d 0019 	add.w	r0, sp, #25
    d3f4:	f014 f9f7 	bl	217e6 <memcpy>
			break;
    d3f8:	e7e2      	b.n	d3c0 <gatt_read_type_rsp+0x188>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    d3fa:	f8b9 2003 	ldrh.w	r2, [r9, #3]
    d3fe:	f899 3002 	ldrb.w	r3, [r9, #2]
    d402:	f8ad 2014 	strh.w	r2, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d406:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    d40a:	f88d 3016 	strb.w	r3, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d40e:	f8ad 200e 	strh.w	r2, [sp, #14]
    d412:	2300      	movs	r3, #0
    d414:	aa03      	add	r2, sp, #12
    d416:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    d41a:	aa04      	add	r2, sp, #16
    d41c:	f88d 300c 	strb.w	r3, [sp, #12]
    d420:	930d      	str	r3, [sp, #52]	; 0x34
    d422:	920e      	str	r2, [sp, #56]	; 0x38
    d424:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    d428:	f8cd a010 	str.w	sl, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d42c:	686b      	ldr	r3, [r5, #4]
		attr.handle = handle;
    d42e:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d432:	462a      	mov	r2, r5
    d434:	a90b      	add	r1, sp, #44	; 0x2c
    d436:	4638      	mov	r0, r7
    d438:	4798      	blx	r3
    d43a:	2800      	cmp	r0, #0
    d43c:	d1c6      	bne.n	d3cc <gatt_read_type_rsp+0x194>
    d43e:	e776      	b.n	d32e <gatt_read_type_rsp+0xf6>
	gatt_discover_next(conn, handle, params);
    d440:	462a      	mov	r2, r5
    d442:	4631      	mov	r1, r6
    d444:	4638      	mov	r0, r7
    d446:	f015 fdfa 	bl	2303e <gatt_discover_next>
    d44a:	e770      	b.n	d32e <gatt_read_type_rsp+0xf6>
    d44c:	0000d45d 	.word	0x0000d45d
    d450:	00024fd8 	.word	0x00024fd8
    d454:	000250b8 	.word	0x000250b8
    d458:	000285f5 	.word	0x000285f5

0000d45c <read_included_uuid_cb>:
{
    d45c:	b570      	push	{r4, r5, r6, lr}
    d45e:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
    d460:	2b10      	cmp	r3, #16
{
    d462:	9c12      	ldr	r4, [sp, #72]	; 0x48
    d464:	4605      	mov	r5, r0
    d466:	4611      	mov	r1, r2
	if (length != 16U) {
    d468:	d011      	beq.n	d48e <read_included_uuid_cb+0x32>
    d46a:	4924      	ldr	r1, [pc, #144]	; (d4fc <read_included_uuid_cb+0xa0>)
    d46c:	4a24      	ldr	r2, [pc, #144]	; (d500 <read_included_uuid_cb+0xa4>)
		BT_ERR("Invalid data len %u", length);
    d46e:	4825      	ldr	r0, [pc, #148]	; (d504 <read_included_uuid_cb+0xa8>)
    d470:	1a52      	subs	r2, r2, r1
    d472:	08d2      	lsrs	r2, r2, #3
    d474:	0192      	lsls	r2, r2, #6
    d476:	4619      	mov	r1, r3
    d478:	f042 0201 	orr.w	r2, r2, #1
    d47c:	f012 fd0c 	bl	1fe98 <log_1>
		params->func(conn, NULL, params);
    d480:	6863      	ldr	r3, [r4, #4]
    d482:	4622      	mov	r2, r4
    d484:	2100      	movs	r1, #0
    d486:	4628      	mov	r0, r5
    d488:	4798      	blx	r3
}
    d48a:	b00e      	add	sp, #56	; 0x38
    d48c:	bd70      	pop	{r4, r5, r6, pc}
	value.start_handle = params->_included.start_handle;
    d48e:	8962      	ldrh	r2, [r4, #10]
    d490:	f8ad 200c 	strh.w	r2, [sp, #12]
	value.end_handle = params->_included.end_handle;
    d494:	89a2      	ldrh	r2, [r4, #12]
    d496:	f8ad 200e 	strh.w	r2, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
    d49a:	2202      	movs	r2, #2
    d49c:	f88d 2010 	strb.w	r2, [sp, #16]
	value.uuid = &u.uuid;
    d4a0:	ae04      	add	r6, sp, #16
	memcpy(u.u128.val, pdu, length);
    d4a2:	461a      	mov	r2, r3
    d4a4:	f10d 0011 	add.w	r0, sp, #17
	value.uuid = &u.uuid;
    d4a8:	9602      	str	r6, [sp, #8]
	memcpy(u.u128.val, pdu, length);
    d4aa:	f014 f99c 	bl	217e6 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    d4ae:	6821      	ldr	r1, [r4, #0]
    d4b0:	b9f1      	cbnz	r1, d4f0 <read_included_uuid_cb+0x94>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d4b2:	f642 0202 	movw	r2, #10242	; 0x2802
    d4b6:	2300      	movs	r3, #0
    d4b8:	f8ad 2006 	strh.w	r2, [sp, #6]
    d4bc:	aa01      	add	r2, sp, #4
    d4be:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    d4c2:	f88d 3004 	strb.w	r3, [sp, #4]
    d4c6:	aa02      	add	r2, sp, #8
    d4c8:	930b      	str	r3, [sp, #44]	; 0x2c
    d4ca:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
    d4ce:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d4d0:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
    d4d2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d4d6:	4622      	mov	r2, r4
    d4d8:	6863      	ldr	r3, [r4, #4]
    d4da:	a909      	add	r1, sp, #36	; 0x24
    d4dc:	4628      	mov	r0, r5
    d4de:	4798      	blx	r3
    d4e0:	2800      	cmp	r0, #0
    d4e2:	d0d2      	beq.n	d48a <read_included_uuid_cb+0x2e>
	gatt_discover_next(conn, params->start_handle, params);
    d4e4:	8921      	ldrh	r1, [r4, #8]
    d4e6:	4622      	mov	r2, r4
    d4e8:	4628      	mov	r0, r5
    d4ea:	f015 fda8 	bl	2303e <gatt_discover_next>
	return;
    d4ee:	e7cc      	b.n	d48a <read_included_uuid_cb+0x2e>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    d4f0:	4630      	mov	r0, r6
    d4f2:	f014 fa47 	bl	21984 <bt_uuid_cmp>
    d4f6:	2800      	cmp	r0, #0
    d4f8:	d0db      	beq.n	d4b2 <read_included_uuid_cb+0x56>
    d4fa:	e7f3      	b.n	d4e4 <read_included_uuid_cb+0x88>
    d4fc:	00024fd8 	.word	0x00024fd8
    d500:	000250b8 	.word	0x000250b8
    d504:	000285f5 	.word	0x000285f5

0000d508 <gatt_find_info_rsp>:
{
    d508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d50c:	b08f      	sub	sp, #60	; 0x3c
    d50e:	4680      	mov	r8, r0
    d510:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
    d512:	4608      	mov	r0, r1
    d514:	b971      	cbnz	r1, d534 <gatt_find_info_rsp+0x2c>
	switch (rsp->format) {
    d516:	7811      	ldrb	r1, [r2, #0]
    d518:	2901      	cmp	r1, #1
    d51a:	d011      	beq.n	d540 <gatt_find_info_rsp+0x38>
    d51c:	2902      	cmp	r1, #2
    d51e:	d028      	beq.n	d572 <gatt_find_info_rsp+0x6a>
    d520:	4a4f      	ldr	r2, [pc, #316]	; (d660 <gatt_find_info_rsp+0x158>)
    d522:	4b50      	ldr	r3, [pc, #320]	; (d664 <gatt_find_info_rsp+0x15c>)
		BT_ERR("Invalid format %u", rsp->format);
    d524:	4850      	ldr	r0, [pc, #320]	; (d668 <gatt_find_info_rsp+0x160>)
    d526:	1ad2      	subs	r2, r2, r3
    d528:	08d2      	lsrs	r2, r2, #3
    d52a:	0192      	lsls	r2, r2, #6
    d52c:	f042 0201 	orr.w	r2, r2, #1
    d530:	f012 fcb2 	bl	1fe98 <log_1>
	params->func(conn, NULL, params);
    d534:	6873      	ldr	r3, [r6, #4]
    d536:	4632      	mov	r2, r6
    d538:	2100      	movs	r1, #0
    d53a:	4640      	mov	r0, r8
    d53c:	4798      	blx	r3
    d53e:	e08b      	b.n	d658 <gatt_find_info_rsp+0x150>
		u.uuid.type = BT_UUID_TYPE_16;
    d540:	f88d 0010 	strb.w	r0, [sp, #16]
		len = sizeof(*info.i16);
    d544:	f04f 0a04 	mov.w	sl, #4
	length--;
    d548:	3b01      	subs	r3, #1
    d54a:	b29b      	uxth	r3, r3
	if (length < len) {
    d54c:	4553      	cmp	r3, sl
    d54e:	d3f1      	bcc.n	d534 <gatt_find_info_rsp+0x2c>
	for (i = length / len, pdu = rsp->info; i != 0;
    d550:	fbb3 f3fa 	udiv	r3, r3, sl
	bool skip = false;
    d554:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
    d558:	9300      	str	r3, [sp, #0]
    d55a:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
    d55c:	46cb      	mov	fp, r9
			skip = false;
    d55e:	464d      	mov	r5, r9
    d560:	af04      	add	r7, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
    d562:	9b00      	ldr	r3, [sp, #0]
    d564:	b953      	cbnz	r3, d57c <gatt_find_info_rsp+0x74>
	gatt_discover_next(conn, handle, params);
    d566:	4632      	mov	r2, r6
    d568:	4659      	mov	r1, fp
    d56a:	4640      	mov	r0, r8
    d56c:	f015 fd67 	bl	2303e <gatt_discover_next>
	return;
    d570:	e072      	b.n	d658 <gatt_find_info_rsp+0x150>
		u.uuid.type = BT_UUID_TYPE_128;
    d572:	f88d 1010 	strb.w	r1, [sp, #16]
		len = sizeof(*info.i128);
    d576:	f04f 0a12 	mov.w	sl, #18
		break;
    d57a:	e7e5      	b.n	d548 <gatt_find_info_rsp+0x40>
		handle = sys_le16_to_cpu(info.i16->handle);
    d57c:	8823      	ldrh	r3, [r4, #0]
    d57e:	f8ad 3004 	strh.w	r3, [sp, #4]
    d582:	fa1f fb83 	uxth.w	fp, r3
		if (skip) {
    d586:	f1b9 0f00 	cmp.w	r9, #0
    d58a:	d151      	bne.n	d630 <gatt_find_info_rsp+0x128>
		switch (u.uuid.type) {
    d58c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    d590:	2b00      	cmp	r3, #0
    d592:	d03a      	beq.n	d60a <gatt_find_info_rsp+0x102>
    d594:	2b02      	cmp	r3, #2
    d596:	d03f      	beq.n	d618 <gatt_find_info_rsp+0x110>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    d598:	6831      	ldr	r1, [r6, #0]
    d59a:	2900      	cmp	r1, #0
    d59c:	d143      	bne.n	d626 <gatt_find_info_rsp+0x11e>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
    d59e:	7c33      	ldrb	r3, [r6, #16]
    d5a0:	2b04      	cmp	r3, #4
    d5a2:	d148      	bne.n	d636 <gatt_find_info_rsp+0x12e>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    d5a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    d5a8:	a902      	add	r1, sp, #8
    d5aa:	4638      	mov	r0, r7
    d5ac:	f88d 5008 	strb.w	r5, [sp, #8]
    d5b0:	f8ad 300a 	strh.w	r3, [sp, #10]
    d5b4:	f014 f9e6 	bl	21984 <bt_uuid_cmp>
    d5b8:	b310      	cbz	r0, d600 <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    d5ba:	f642 0301 	movw	r3, #10241	; 0x2801
    d5be:	a903      	add	r1, sp, #12
    d5c0:	4638      	mov	r0, r7
    d5c2:	f88d 500c 	strb.w	r5, [sp, #12]
    d5c6:	f8ad 300e 	strh.w	r3, [sp, #14]
    d5ca:	f014 f9db 	bl	21984 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    d5ce:	b1b8      	cbz	r0, d600 <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
    d5d0:	f642 0302 	movw	r3, #10242	; 0x2802
    d5d4:	a909      	add	r1, sp, #36	; 0x24
    d5d6:	4638      	mov	r0, r7
    d5d8:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    d5dc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    d5e0:	f014 f9d0 	bl	21984 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    d5e4:	b160      	cbz	r0, d600 <gatt_find_info_rsp+0xf8>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
    d5e6:	f642 0303 	movw	r3, #10243	; 0x2803
    d5ea:	a909      	add	r1, sp, #36	; 0x24
    d5ec:	4638      	mov	r0, r7
    d5ee:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    d5f2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    d5f6:	f014 f9c5 	bl	21984 <bt_uuid_cmp>
    d5fa:	b9e0      	cbnz	r0, d636 <gatt_find_info_rsp+0x12e>
				skip = true;
    d5fc:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
    d600:	9b00      	ldr	r3, [sp, #0]
    d602:	3b01      	subs	r3, #1
    d604:	9300      	str	r3, [sp, #0]
    d606:	4454      	add	r4, sl
    d608:	e7ab      	b.n	d562 <gatt_find_info_rsp+0x5a>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
    d60a:	78a3      	ldrb	r3, [r4, #2]
    d60c:	78e2      	ldrb	r2, [r4, #3]
    d60e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d612:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
    d616:	e7bf      	b.n	d598 <gatt_find_info_rsp+0x90>
			memcpy(u.u128.val, info.i128->uuid, 16);
    d618:	2210      	movs	r2, #16
    d61a:	1ca1      	adds	r1, r4, #2
    d61c:	f10d 0011 	add.w	r0, sp, #17
    d620:	f014 f8e1 	bl	217e6 <memcpy>
			break;
    d624:	e7b8      	b.n	d598 <gatt_find_info_rsp+0x90>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    d626:	4638      	mov	r0, r7
    d628:	f014 f9ac 	bl	21984 <bt_uuid_cmp>
    d62c:	2800      	cmp	r0, #0
    d62e:	d0b6      	beq.n	d59e <gatt_find_info_rsp+0x96>
			skip = false;
    d630:	f04f 0900 	mov.w	r9, #0
    d634:	e7e4      	b.n	d600 <gatt_find_info_rsp+0xf8>
		attr.handle = handle;
    d636:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d63a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d63e:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
    d642:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d646:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d648:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d64c:	4632      	mov	r2, r6
    d64e:	a909      	add	r1, sp, #36	; 0x24
    d650:	4640      	mov	r0, r8
    d652:	4798      	blx	r3
    d654:	2800      	cmp	r0, #0
    d656:	d1d3      	bne.n	d600 <gatt_find_info_rsp+0xf8>
}
    d658:	b00f      	add	sp, #60	; 0x3c
    d65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d65e:	bf00      	nop
    d660:	000250b8 	.word	0x000250b8
    d664:	00024fd8 	.word	0x00024fd8
    d668:	00028609 	.word	0x00028609

0000d66c <bt_gatt_write>:
{
    d66c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    d66e:	7b43      	ldrb	r3, [r0, #13]
    d670:	2b07      	cmp	r3, #7
{
    d672:	b085      	sub	sp, #20
    d674:	4605      	mov	r5, r0
    d676:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    d678:	d16b      	bne.n	d752 <bt_gatt_write+0xe6>
	if (params->offset ||
    d67a:	88cf      	ldrh	r7, [r1, #6]
    d67c:	b167      	cbz	r7, d698 <bt_gatt_write+0x2c>
	len = MIN(params->length, bt_att_get_mtu(conn) - sizeof(*req) - 1);
    d67e:	4628      	mov	r0, r5
    d680:	89a6      	ldrh	r6, [r4, #12]
    d682:	f015 f8f1 	bl	22868 <bt_att_get_mtu>
    d686:	3805      	subs	r0, #5
    d688:	4286      	cmp	r6, r0
    d68a:	d32e      	bcc.n	d6ea <bt_gatt_write+0x7e>
    d68c:	4628      	mov	r0, r5
    d68e:	f015 f8eb 	bl	22868 <bt_att_get_mtu>
    d692:	1f46      	subs	r6, r0, #5
    d694:	b2b6      	uxth	r6, r6
    d696:	e029      	b.n	d6ec <bt_gatt_write+0x80>
    d698:	898e      	ldrh	r6, [r1, #12]
	    params->length > (bt_att_get_mtu(conn) - sizeof(*req) - 1)) {
    d69a:	f015 f8e5 	bl	22868 <bt_att_get_mtu>
    d69e:	3803      	subs	r0, #3
	if (params->offset ||
    d6a0:	42b0      	cmp	r0, r6
    d6a2:	d3ec      	bcc.n	d67e <bt_gatt_write+0x12>
				sizeof(*req) + params->length);
    d6a4:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    d6a6:	2112      	movs	r1, #18
    d6a8:	3202      	adds	r2, #2
    d6aa:	4628      	mov	r0, r5
    d6ac:	f7fe f868 	bl	b780 <bt_att_create_pdu>
	if (!buf) {
    d6b0:	4606      	mov	r6, r0
    d6b2:	b1b0      	cbz	r0, d6e2 <bt_gatt_write+0x76>
	req = net_buf_add(buf, sizeof(*req));
    d6b4:	2102      	movs	r1, #2
    d6b6:	3008      	adds	r0, #8
    d6b8:	f016 fcbe 	bl	24038 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
    d6bc:	88a3      	ldrh	r3, [r4, #4]
    d6be:	8003      	strh	r3, [r0, #0]
	write = net_buf_append_bytes(buf, params->length, params->data,
    d6c0:	2200      	movs	r2, #0
    d6c2:	2300      	movs	r3, #0
    d6c4:	e9cd 2300 	strd	r2, r3, [sp]
    d6c8:	e9cd 7702 	strd	r7, r7, [sp, #8]
    d6cc:	68a2      	ldr	r2, [r4, #8]
    d6ce:	89a1      	ldrh	r1, [r4, #12]
    d6d0:	4630      	mov	r0, r6
    d6d2:	f016 fd06 	bl	240e2 <net_buf_append_bytes>
	if (write != params->length) {
    d6d6:	89a3      	ldrh	r3, [r4, #12]
    d6d8:	4298      	cmp	r0, r3
    d6da:	d036      	beq.n	d74a <bt_gatt_write+0xde>
		net_buf_unref(buf);
    d6dc:	4630      	mov	r0, r6
    d6de:	f00f fd1d 	bl	1d11c <net_buf_unref>
		return -ENOMEM;
    d6e2:	f06f 000b 	mvn.w	r0, #11
}
    d6e6:	b005      	add	sp, #20
    d6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = MIN(params->length, bt_att_get_mtu(conn) - sizeof(*req) - 1);
    d6ea:	89a6      	ldrh	r6, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_REQ,
    d6ec:	1d32      	adds	r2, r6, #4
    d6ee:	2116      	movs	r1, #22
    d6f0:	4628      	mov	r0, r5
    d6f2:	f7fe f845 	bl	b780 <bt_att_create_pdu>
	if (!buf) {
    d6f6:	4607      	mov	r7, r0
    d6f8:	2800      	cmp	r0, #0
    d6fa:	d0f2      	beq.n	d6e2 <bt_gatt_write+0x76>
	req = net_buf_add(buf, sizeof(*req));
    d6fc:	2104      	movs	r1, #4
    d6fe:	3008      	adds	r0, #8
    d700:	f016 fc9a 	bl	24038 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
    d704:	88a3      	ldrh	r3, [r4, #4]
    d706:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->offset);
    d708:	88e3      	ldrh	r3, [r4, #6]
    d70a:	8043      	strh	r3, [r0, #2]
	write = net_buf_append_bytes(buf, len, params->data, K_NO_WAIT,
    d70c:	2300      	movs	r3, #0
    d70e:	e9cd 3302 	strd	r3, r3, [sp, #8]
    d712:	2200      	movs	r2, #0
    d714:	2300      	movs	r3, #0
    d716:	e9cd 2300 	strd	r2, r3, [sp]
    d71a:	4631      	mov	r1, r6
    d71c:	68a2      	ldr	r2, [r4, #8]
    d71e:	4638      	mov	r0, r7
    d720:	f016 fcdf 	bl	240e2 <net_buf_append_bytes>
	params->offset += write;
    d724:	88e2      	ldrh	r2, [r4, #6]
	params->length -= write;
    d726:	89a3      	ldrh	r3, [r4, #12]
	params->offset += write;
    d728:	fa12 f280 	uxtah	r2, r2, r0
    d72c:	80e2      	strh	r2, [r4, #6]
	params->data = (const uint8_t *)params->data + len;
    d72e:	68a2      	ldr	r2, [r4, #8]
	params->length -= write;
    d730:	1a1b      	subs	r3, r3, r0
	params->data = (const uint8_t *)params->data + len;
    d732:	4416      	add	r6, r2
	return gatt_send(conn, buf, gatt_prepare_write_rsp, params, NULL);
    d734:	4a08      	ldr	r2, [pc, #32]	; (d758 <bt_gatt_write+0xec>)
	params->length -= write;
    d736:	81a3      	strh	r3, [r4, #12]
	params->data = (const uint8_t *)params->data + len;
    d738:	60a6      	str	r6, [r4, #8]
	return gatt_send(conn, buf, gatt_prepare_write_rsp, params, NULL);
    d73a:	4623      	mov	r3, r4
    d73c:	4639      	mov	r1, r7
	return gatt_send(conn, buf, gatt_write_rsp, params, NULL);
    d73e:	4628      	mov	r0, r5
}
    d740:	b005      	add	sp, #20
    d742:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return gatt_send(conn, buf, gatt_write_rsp, params, NULL);
    d746:	f7fe bda9 	b.w	c29c <gatt_send.constprop.0>
    d74a:	4a04      	ldr	r2, [pc, #16]	; (d75c <bt_gatt_write+0xf0>)
    d74c:	4623      	mov	r3, r4
    d74e:	4631      	mov	r1, r6
    d750:	e7f5      	b.n	d73e <bt_gatt_write+0xd2>
		return -ENOTCONN;
    d752:	f06f 0038 	mvn.w	r0, #56	; 0x38
    d756:	e7c6      	b.n	d6e6 <bt_gatt_write+0x7a>
    d758:	0000d761 	.word	0x0000d761
    d75c:	00022b0b 	.word	0x00022b0b

0000d760 <gatt_prepare_write_rsp>:
{
    d760:	b570      	push	{r4, r5, r6, lr}
    d762:	9c04      	ldr	r4, [sp, #16]
    d764:	4606      	mov	r6, r0
	if (err) {
    d766:	b121      	cbz	r1, d772 <gatt_prepare_write_rsp+0x12>
		params->func(conn, err, params);
    d768:	6823      	ldr	r3, [r4, #0]
    d76a:	4622      	mov	r2, r4
}
    d76c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, err, params);
    d770:	4718      	bx	r3
	if (!params->length) {
    d772:	89a3      	ldrh	r3, [r4, #12]
    d774:	b99b      	cbnz	r3, d79e <gatt_prepare_write_rsp+0x3e>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_REQ, sizeof(*req));
    d776:	2201      	movs	r2, #1
    d778:	2118      	movs	r1, #24
    d77a:	f7fe f801 	bl	b780 <bt_att_create_pdu>
	if (!buf) {
    d77e:	4605      	mov	r5, r0
    d780:	b190      	cbz	r0, d7a8 <gatt_prepare_write_rsp+0x48>
	req = net_buf_add(buf, sizeof(*req));
    d782:	2101      	movs	r1, #1
    d784:	3008      	adds	r0, #8
    d786:	f016 fc57 	bl	24038 <net_buf_simple_add>
	req->flags = BT_ATT_FLAG_EXEC;
    d78a:	2301      	movs	r3, #1
    d78c:	7003      	strb	r3, [r0, #0]
	return gatt_send(conn, buf, gatt_write_rsp, params, NULL);
    d78e:	4629      	mov	r1, r5
    d790:	4623      	mov	r3, r4
    d792:	4630      	mov	r0, r6
    d794:	4a05      	ldr	r2, [pc, #20]	; (d7ac <gatt_prepare_write_rsp+0x4c>)
}
    d796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return gatt_send(conn, buf, gatt_write_rsp, params, NULL);
    d79a:	f7fe bd7f 	b.w	c29c <gatt_send.constprop.0>
	bt_gatt_write(conn, params);
    d79e:	4621      	mov	r1, r4
}
    d7a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_gatt_write(conn, params);
    d7a4:	f7ff bf62 	b.w	d66c <bt_gatt_write>
}
    d7a8:	bd70      	pop	{r4, r5, r6, pc}
    d7aa:	bf00      	nop
    d7ac:	00022b0b 	.word	0x00022b0b

0000d7b0 <bt_gatt_mult_notification>:
{
    d7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7b4:	b087      	sub	sp, #28
    d7b6:	4682      	mov	sl, r0
    d7b8:	460c      	mov	r4, r1
    d7ba:	4616      	mov	r6, r2
	sub = gatt_sub_find(conn);
    d7bc:	f7fe fc54 	bl	c068 <gatt_sub_find>
	if (!sub) {
    d7c0:	4607      	mov	r7, r0
    d7c2:	b1f8      	cbz	r0, d804 <bt_gatt_mult_notification+0x54>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
    d7c4:	4632      	mov	r2, r6
    d7c6:	4621      	mov	r1, r4
    d7c8:	a803      	add	r0, sp, #12
    d7ca:	f016 fbf8 	bl	23fbe <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
    d7ce:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    d7d2:	2b04      	cmp	r3, #4
    d7d4:	d916      	bls.n	d804 <bt_gatt_mult_notification+0x54>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    d7d6:	2104      	movs	r1, #4
    d7d8:	a803      	add	r0, sp, #12
    d7da:	f016 fc5e 	bl	2409a <net_buf_simple_pull_mem>
		if (len > buf.len) {
    d7de:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		len = sys_cpu_to_le16(nfy->len);
    d7e2:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		if (len > buf.len) {
    d7e6:	4543      	cmp	r3, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    d7e8:	4605      	mov	r5, r0
		if (len > buf.len) {
    d7ea:	d20e      	bcs.n	d80a <bt_gatt_mult_notification+0x5a>
    d7ec:	4a1c      	ldr	r2, [pc, #112]	; (d860 <bt_gatt_mult_notification+0xb0>)
    d7ee:	4b1d      	ldr	r3, [pc, #116]	; (d864 <bt_gatt_mult_notification+0xb4>)
			BT_ERR("Invalid data len %u > %u", len, length);
    d7f0:	481d      	ldr	r0, [pc, #116]	; (d868 <bt_gatt_mult_notification+0xb8>)
    d7f2:	1a9b      	subs	r3, r3, r2
    d7f4:	08db      	lsrs	r3, r3, #3
    d7f6:	019b      	lsls	r3, r3, #6
    d7f8:	f043 0301 	orr.w	r3, r3, #1
    d7fc:	4632      	mov	r2, r6
    d7fe:	4641      	mov	r1, r8
    d800:	f012 fb5e 	bl	1fec0 <log_2>
}
    d804:	b007      	add	sp, #28
    d806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    d80a:	68bb      	ldr	r3, [r7, #8]
    d80c:	b31b      	cbz	r3, d856 <bt_gatt_mult_notification+0xa6>
    d80e:	f1b3 0914 	subs.w	r9, r3, #20
    d812:	d020      	beq.n	d856 <bt_gatt_mult_notification+0xa6>
    d814:	681c      	ldr	r4, [r3, #0]
    d816:	b104      	cbz	r4, d81a <bt_gatt_mult_notification+0x6a>
    d818:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
    d81a:	462b      	mov	r3, r5
    d81c:	f833 bb04 	ldrh.w	fp, [r3], #4
    d820:	9301      	str	r3, [sp, #4]
			if (handle != params->value_handle) {
    d822:	f8b9 3008 	ldrh.w	r3, [r9, #8]
    d826:	455b      	cmp	r3, fp
    d828:	d10b      	bne.n	d842 <bt_gatt_mult_notification+0x92>
			if (params->notify(conn, params, nfy->value, len) ==
    d82a:	9a01      	ldr	r2, [sp, #4]
    d82c:	f8d9 5000 	ldr.w	r5, [r9]
    d830:	4643      	mov	r3, r8
    d832:	4649      	mov	r1, r9
    d834:	4650      	mov	r0, sl
    d836:	47a8      	blx	r5
    d838:	b918      	cbnz	r0, d842 <bt_gatt_mult_notification+0x92>
				bt_gatt_unsubscribe(conn, params);
    d83a:	4649      	mov	r1, r9
    d83c:	4650      	mov	r0, sl
    d83e:	f015 fc66 	bl	2310e <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    d842:	b144      	cbz	r4, d856 <bt_gatt_mult_notification+0xa6>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d844:	f114 0314 	adds.w	r3, r4, #20
    d848:	d002      	beq.n	d850 <bt_gatt_mult_notification+0xa0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d84a:	6963      	ldr	r3, [r4, #20]
    d84c:	b103      	cbz	r3, d850 <bt_gatt_mult_notification+0xa0>
    d84e:	3b14      	subs	r3, #20
{
    d850:	46a1      	mov	r9, r4
    d852:	461c      	mov	r4, r3
    d854:	e7e5      	b.n	d822 <bt_gatt_mult_notification+0x72>
		net_buf_simple_pull_mem(&buf, len);
    d856:	4641      	mov	r1, r8
    d858:	a803      	add	r0, sp, #12
    d85a:	f016 fc1e 	bl	2409a <net_buf_simple_pull_mem>
    d85e:	e7b6      	b.n	d7ce <bt_gatt_mult_notification+0x1e>
    d860:	00024fd8 	.word	0x00024fd8
    d864:	000250b8 	.word	0x000250b8
    d868:	0002861b 	.word	0x0002861b

0000d86c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    d86c:	b573      	push	{r0, r1, r4, r5, r6, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    d86e:	4a1d      	ldr	r2, [pc, #116]	; (d8e4 <bt_gatt_connected+0x78>)
	data.conn = conn;
    d870:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    d872:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
    d876:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    d878:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    d87a:	2001      	movs	r0, #1
    d87c:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    d880:	f015 fba5 	bl	22fce <bt_gatt_foreach_attr>
	 * client prior to sending an indication or notification. If the client
	 * does not have an LTK indicating that the client has lost the bond,
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    bt_conn_get_security(conn) < data.sec) {
    d884:	4628      	mov	r0, r5
    d886:	f014 fb9b 	bl	21fc0 <bt_conn_get_security>
    d88a:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    d88e:	4288      	cmp	r0, r1
    d890:	d202      	bcs.n	d898 <bt_gatt_connected+0x2c>
		bt_conn_set_security(conn, data.sec);
    d892:	4628      	mov	r0, r5
    d894:	f014 fb61 	bl	21f5a <bt_conn_set_security>
	sub = gatt_sub_find(conn);
    d898:	4628      	mov	r0, r5
    d89a:	f7fe fbe5 	bl	c068 <gatt_sub_find>
	if (!sub) {
    d89e:	b128      	cbz	r0, d8ac <bt_gatt_connected+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    d8a0:	6884      	ldr	r4, [r0, #8]
    d8a2:	b11c      	cbz	r4, d8ac <bt_gatt_connected+0x40>
    d8a4:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    d8a6:	f105 0688 	add.w	r6, r5, #136	; 0x88
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    d8aa:	b90c      	cbnz	r4, d8b0 <bt_gatt_connected+0x44>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    d8ac:	b002      	add	sp, #8
    d8ae:	bd70      	pop	{r4, r5, r6, pc}
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    d8b0:	7a28      	ldrb	r0, [r5, #8]
    d8b2:	4631      	mov	r1, r6
    d8b4:	f014 fa49 	bl	21d4a <bt_addr_le_is_bonded>
    d8b8:	b160      	cbz	r0, d8d4 <bt_gatt_connected+0x68>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d8ba:	f3bf 8f5b 	dmb	ish
    d8be:	6923      	ldr	r3, [r4, #16]
    d8c0:	f3bf 8f5b 	dmb	ish
    d8c4:	079b      	lsls	r3, r3, #30
    d8c6:	d405      	bmi.n	d8d4 <bt_gatt_connected+0x68>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
    d8c8:	89a2      	ldrh	r2, [r4, #12]
    d8ca:	8961      	ldrh	r1, [r4, #10]
    d8cc:	4623      	mov	r3, r4
    d8ce:	4628      	mov	r0, r5
    d8d0:	f7fe fdda 	bl	c488 <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d8d4:	f114 0f14 	cmn.w	r4, #20
    d8d8:	d0e8      	beq.n	d8ac <bt_gatt_connected+0x40>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d8da:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    d8dc:	2c00      	cmp	r4, #0
    d8de:	d0e5      	beq.n	d8ac <bt_gatt_connected+0x40>
    d8e0:	3c14      	subs	r4, #20
    d8e2:	e7e2      	b.n	d8aa <bt_gatt_connected+0x3e>
    d8e4:	0000ce09 	.word	0x0000ce09

0000d8e8 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
    d8e8:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    d8ea:	4a06      	ldr	r2, [pc, #24]	; (d904 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    d8ec:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    d8ee:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    d8f0:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    d8f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    d8f6:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    d8fa:	f015 fb68 	bl	22fce <bt_gatt_foreach_attr>
}
    d8fe:	b003      	add	sp, #12
    d900:	f85d fb04 	ldr.w	pc, [sp], #4
    d904:	0000ce09 	.word	0x0000ce09

0000d908 <db_hash_read>:
{
    d908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d90a:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    d90c:	480f      	ldr	r0, [pc, #60]	; (d94c <db_hash_read+0x44>)
{
    d90e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    d912:	4615      	mov	r5, r2
    d914:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
    d916:	f017 f81b 	bl	24950 <k_delayed_work_cancel>
	if (!err) {
    d91a:	b908      	cbnz	r0, d920 <db_hash_read+0x18>
		db_hash_gen(true);
    d91c:	f7ff f89e 	bl	ca5c <db_hash_gen.isra.0>
	bt_gatt_change_aware(conn, true);
    d920:	2101      	movs	r1, #1
    d922:	4620      	mov	r0, r4
    d924:	f015 fc88 	bl	23238 <bt_gatt_change_aware>
	if (offset > value_len) {
    d928:	2e10      	cmp	r6, #16
    d92a:	d80c      	bhi.n	d946 <db_hash_read+0x3e>
	len = MIN(buf_len, value_len - offset);
    d92c:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    d930:	4907      	ldr	r1, [pc, #28]	; (d950 <db_hash_read+0x48>)
	len = MIN(buf_len, value_len - offset);
    d932:	42bc      	cmp	r4, r7
    d934:	bfa8      	it	ge
    d936:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    d938:	4622      	mov	r2, r4
    d93a:	4431      	add	r1, r6
    d93c:	4628      	mov	r0, r5
    d93e:	f013 ff52 	bl	217e6 <memcpy>
}
    d942:	4620      	mov	r0, r4
    d944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d946:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    d94a:	e7fa      	b.n	d942 <db_hash_read+0x3a>
    d94c:	20000c20 	.word	0x20000c20
    d950:	20003080 	.word	0x20003080

0000d954 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    d954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    d958:	4a33      	ldr	r2, [pc, #204]	; (da28 <bt_gatt_disconnected+0xd4>)
    d95a:	4603      	mov	r3, r0
{
    d95c:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    d95e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d962:	2001      	movs	r0, #1
    d964:	f015 fb33 	bl	22fce <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    d968:	4620      	mov	r0, r4
    d96a:	f7fe fb7d 	bl	c068 <gatt_sub_find>
	if (!sub) {
    d96e:	4606      	mov	r6, r0
    d970:	b3a8      	cbz	r0, d9de <bt_gatt_disconnected+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    d972:	6883      	ldr	r3, [r0, #8]
    d974:	b39b      	cbz	r3, d9de <bt_gatt_disconnected+0x8a>
    d976:	f1b3 0714 	subs.w	r7, r3, #20
    d97a:	d030      	beq.n	d9de <bt_gatt_disconnected+0x8a>
    d97c:	681d      	ldr	r5, [r3, #0]
    d97e:	b105      	cbz	r5, d982 <bt_gatt_disconnected+0x2e>
    d980:	3d14      	subs	r5, #20
{
    d982:	f04f 0b00 	mov.w	fp, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    d986:	f104 0888 	add.w	r8, r4, #136	; 0x88
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    d98a:	f106 0901 	add.w	r9, r6, #1
			params->value = 0U;
    d98e:	46da      	mov	sl, fp
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    d990:	7a20      	ldrb	r0, [r4, #8]
    d992:	4641      	mov	r1, r8
    d994:	f014 f9d9 	bl	21d4a <bt_addr_le_is_bonded>
    d998:	b988      	cbnz	r0, d9be <bt_gatt_disconnected+0x6a>
			params->value = 0U;
    d99a:	f8a7 a00c 	strh.w	sl, [r7, #12]
			gatt_sub_remove(conn, sub, prev, params);
    d99e:	463b      	mov	r3, r7
    d9a0:	465a      	mov	r2, fp
    d9a2:	4631      	mov	r1, r6
    d9a4:	4620      	mov	r0, r4
    d9a6:	f015 f955 	bl	22c54 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    d9aa:	b1c5      	cbz	r5, d9de <bt_gatt_disconnected+0x8a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    d9ac:	f115 0114 	adds.w	r1, r5, #20
    d9b0:	d002      	beq.n	d9b8 <bt_gatt_disconnected+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d9b2:	6969      	ldr	r1, [r5, #20]
    d9b4:	b101      	cbz	r1, d9b8 <bt_gatt_disconnected+0x64>
    d9b6:	3914      	subs	r1, #20
{
    d9b8:	462f      	mov	r7, r5
    d9ba:	460d      	mov	r5, r1
    d9bc:	e7e8      	b.n	d990 <bt_gatt_disconnected+0x3c>
    d9be:	f3bf 8f5b 	dmb	ish
    d9c2:	693b      	ldr	r3, [r7, #16]
    d9c4:	f3bf 8f5b 	dmb	ish
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    d9c8:	07db      	lsls	r3, r3, #31
    d9ca:	d4e6      	bmi.n	d99a <bt_gatt_disconnected+0x46>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    d9cc:	7873      	ldrb	r3, [r6, #1]
    d9ce:	b11b      	cbz	r3, d9d8 <bt_gatt_disconnected+0x84>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    d9d0:	4641      	mov	r1, r8
    d9d2:	4648      	mov	r0, r9
    d9d4:	f015 f921 	bl	22c1a <bt_addr_le_copy>
			prev = &params->node;
    d9d8:	f107 0b14 	add.w	fp, r7, #20
    d9dc:	e7e5      	b.n	d9aa <bt_gatt_disconnected+0x56>
	cfg = find_cf_cfg(conn);
    d9de:	4620      	mov	r0, r4
    d9e0:	f7fe faf4 	bl	bfcc <find_cf_cfg>
	if (!cfg) {
    d9e4:	4605      	mov	r5, r0
    d9e6:	b1e0      	cbz	r0, da22 <bt_gatt_disconnected+0xce>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d9e8:	f104 0688 	add.w	r6, r4, #136	; 0x88
    d9ec:	7a20      	ldrb	r0, [r4, #8]
    d9ee:	4631      	mov	r1, r6
    d9f0:	f014 f9ab 	bl	21d4a <bt_addr_le_is_bonded>
    d9f4:	b920      	cbnz	r0, da00 <bt_gatt_disconnected+0xac>
		clear_cf_cfg(cfg);
    d9f6:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    d9f8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
    d9fc:	f015 b944 	b.w	22c88 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    da00:	1c68      	adds	r0, r5, #1
    da02:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    da04:	350c      	adds	r5, #12
    da06:	f015 f908 	bl	22c1a <bt_addr_le_copy>
    da0a:	f3bf 8f5b 	dmb	ish
    da0e:	e855 3f00 	ldrex	r3, [r5]
    da12:	f023 0302 	bic.w	r3, r3, #2
    da16:	e845 3200 	strex	r2, r3, [r5]
    da1a:	2a00      	cmp	r2, #0
    da1c:	d1f7      	bne.n	da0e <bt_gatt_disconnected+0xba>
    da1e:	f3bf 8f5b 	dmb	ish
}
    da22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da26:	bf00      	nop
    da28:	0000c709 	.word	0x0000c709

0000da2c <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    da2c:	4b10      	ldr	r3, [pc, #64]	; (da70 <get_io_capa+0x44>)
    da2e:	681b      	ldr	r3, [r3, #0]
    da30:	b1bb      	cbz	r3, da62 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    da32:	681a      	ldr	r2, [r3, #0]
    da34:	b142      	cbz	r2, da48 <get_io_capa+0x1c>
    da36:	6859      	ldr	r1, [r3, #4]
    da38:	b131      	cbz	r1, da48 <get_io_capa+0x1c>
    da3a:	6899      	ldr	r1, [r3, #8]
    da3c:	b911      	cbnz	r1, da44 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    da3e:	490d      	ldr	r1, [pc, #52]	; (da74 <get_io_capa+0x48>)
    da40:	7809      	ldrb	r1, [r1, #0]
    da42:	b939      	cbnz	r1, da54 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    da44:	2004      	movs	r0, #4
    da46:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    da48:	490a      	ldr	r1, [pc, #40]	; (da74 <get_io_capa+0x48>)
    da4a:	7809      	ldrb	r1, [r1, #0]
    da4c:	b111      	cbz	r1, da54 <get_io_capa+0x28>
    da4e:	b10a      	cbz	r2, da54 <get_io_capa+0x28>
    da50:	6899      	ldr	r1, [r3, #8]
    da52:	b941      	cbnz	r1, da66 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    da54:	685b      	ldr	r3, [r3, #4]
    da56:	b943      	cbnz	r3, da6a <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    da58:	2a00      	cmp	r2, #0
    da5a:	bf0c      	ite	eq
    da5c:	2003      	moveq	r0, #3
    da5e:	2000      	movne	r0, #0
    da60:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    da62:	2003      	movs	r0, #3
    da64:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    da66:	2001      	movs	r0, #1
    da68:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    da6a:	2002      	movs	r0, #2
	}
}
    da6c:	4770      	bx	lr
    da6e:	bf00      	nop
    da70:	20001384 	.word	0x20001384
    da74:	20003091 	.word	0x20003091

0000da78 <smp_g2>:
	return 0;
}

static int smp_g2(const uint8_t u[32], const uint8_t v[32],
		  const uint8_t x[16], const uint8_t y[16], uint32_t *passkey)
{
    da78:	b5f0      	push	{r4, r5, r6, r7, lr}
    da7a:	b099      	sub	sp, #100	; 0x64
    da7c:	4614      	mov	r4, r2
    da7e:	460f      	mov	r7, r1
	BT_DBG("u %s", bt_hex(u, 32));
	BT_DBG("v %s", bt_hex(v, 32));
	BT_DBG("x %s", bt_hex(x, 16));
	BT_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
    da80:	2220      	movs	r2, #32
    da82:	4601      	mov	r1, r0
    da84:	a804      	add	r0, sp, #16
{
    da86:	461e      	mov	r6, r3
    da88:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
    da8a:	f015 fc07 	bl	2329c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    da8e:	2220      	movs	r2, #32
    da90:	4639      	mov	r1, r7
    da92:	a80c      	add	r0, sp, #48	; 0x30
    da94:	f015 fc02 	bl	2329c <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    da98:	2210      	movs	r2, #16
    da9a:	4631      	mov	r1, r6
    da9c:	a814      	add	r0, sp, #80	; 0x50
    da9e:	f015 fbfd 	bl	2329c <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
    daa2:	4621      	mov	r1, r4
    daa4:	2210      	movs	r2, #16
    daa6:	4668      	mov	r0, sp
    daa8:	f015 fbf8 	bl	2329c <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    daac:	466b      	mov	r3, sp
    daae:	2250      	movs	r2, #80	; 0x50
    dab0:	a904      	add	r1, sp, #16
    dab2:	4618      	mov	r0, r3
    dab4:	f015 fc0d 	bl	232d2 <bt_smp_aes_cmac>
	if (err) {
    dab8:	4604      	mov	r4, r0
    daba:	b960      	cbnz	r0, dad6 <smp_g2+0x5e>
		return err;
	}
	BT_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
    dabc:	2204      	movs	r2, #4
    dabe:	a903      	add	r1, sp, #12
    dac0:	4628      	mov	r0, r5
    dac2:	f013 fe90 	bl	217e6 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    dac6:	682b      	ldr	r3, [r5, #0]
    dac8:	4904      	ldr	r1, [pc, #16]	; (dadc <smp_g2+0x64>)
    daca:	ba1b      	rev	r3, r3
    dacc:	fbb3 f2f1 	udiv	r2, r3, r1
    dad0:	fb01 3312 	mls	r3, r1, r2, r3
    dad4:	602b      	str	r3, [r5, #0]

	BT_DBG("passkey %u", *passkey);

	return 0;
}
    dad6:	4620      	mov	r0, r4
    dad8:	b019      	add	sp, #100	; 0x64
    dada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dadc:	000f4240 	.word	0x000f4240

0000dae0 <get_auth.isra.0>:
	oobd_present = enable;
}

static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
{
	if (sc_supported) {
    dae0:	4b0c      	ldr	r3, [pc, #48]	; (db14 <get_auth.isra.0+0x34>)
    dae2:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    dae4:	b510      	push	{r4, lr}
	if (sc_supported) {
    dae6:	b17b      	cbz	r3, db08 <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    dae8:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    daec:	f7ff ff9e 	bl	da2c <get_io_capa>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
	}

	if (bondable) {
    daf0:	4b09      	ldr	r3, [pc, #36]	; (db18 <get_auth.isra.0+0x38>)
    daf2:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    daf4:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    daf6:	bf0c      	ite	eq
    daf8:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    dafc:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    db00:	b12b      	cbz	r3, db0e <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    db02:	f044 0001 	orr.w	r0, r4, #1
	} else {
		auth &= ~BT_SMP_AUTH_BONDING;
	}

	return auth;
}
    db06:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    db08:	f000 0407 	and.w	r4, r0, #7
    db0c:	e7ee      	b.n	daec <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    db0e:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    db12:	e7f8      	b.n	db06 <get_auth.isra.0+0x26>
    db14:	20003091 	.word	0x20003091
    db18:	20000661 	.word	0x20000661

0000db1c <sec_level_reachable.isra.0>:

static bool sec_level_reachable(struct bt_conn *conn)
{
	switch (conn->required_sec_level) {
    db1c:	2803      	cmp	r0, #3
static bool sec_level_reachable(struct bt_conn *conn)
    db1e:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    db20:	d00a      	beq.n	db38 <sec_level_reachable.isra.0+0x1c>
    db22:	d805      	bhi.n	db30 <sec_level_reachable.isra.0+0x14>
    db24:	3801      	subs	r0, #1
    db26:	2801      	cmp	r0, #1
    db28:	bf8c      	ite	hi
    db2a:	2000      	movhi	r0, #0
    db2c:	2001      	movls	r0, #1
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
	default:
		return false;
	}
}
    db2e:	bd08      	pop	{r3, pc}
	switch (conn->required_sec_level) {
    db30:	2804      	cmp	r0, #4
    db32:	d010      	beq.n	db56 <sec_level_reachable.isra.0+0x3a>
    db34:	2000      	movs	r0, #0
    db36:	e7fa      	b.n	db2e <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    db38:	f7ff ff78 	bl	da2c <get_io_capa>
    db3c:	2803      	cmp	r0, #3
    db3e:	d108      	bne.n	db52 <sec_level_reachable.isra.0+0x36>
		       (bt_auth && bt_auth->oob_data_request);
    db40:	4b0c      	ldr	r3, [pc, #48]	; (db74 <sec_level_reachable.isra.0+0x58>)
    db42:	6818      	ldr	r0, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    db44:	2800      	cmp	r0, #0
    db46:	d0f2      	beq.n	db2e <sec_level_reachable.isra.0+0x12>
		       (bt_auth && bt_auth->oob_data_request);
    db48:	68c0      	ldr	r0, [r0, #12]
    db4a:	3800      	subs	r0, #0
    db4c:	bf18      	it	ne
    db4e:	2001      	movne	r0, #1
    db50:	e7ed      	b.n	db2e <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    db52:	2001      	movs	r0, #1
    db54:	e7eb      	b.n	db2e <sec_level_reachable.isra.0+0x12>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    db56:	f7ff ff69 	bl	da2c <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    db5a:	2803      	cmp	r0, #3
    db5c:	d104      	bne.n	db68 <sec_level_reachable.isra.0+0x4c>
    db5e:	4b05      	ldr	r3, [pc, #20]	; (db74 <sec_level_reachable.isra.0+0x58>)
    db60:	6818      	ldr	r0, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    db62:	b118      	cbz	r0, db6c <sec_level_reachable.isra.0+0x50>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    db64:	68c0      	ldr	r0, [r0, #12]
    db66:	b108      	cbz	r0, db6c <sec_level_reachable.isra.0+0x50>
    db68:	4b03      	ldr	r3, [pc, #12]	; (db78 <sec_level_reachable.isra.0+0x5c>)
    db6a:	7818      	ldrb	r0, [r3, #0]
    db6c:	f000 0001 	and.w	r0, r0, #1
    db70:	e7dd      	b.n	db2e <sec_level_reachable.isra.0+0x12>
    db72:	bf00      	nop
    db74:	20001384 	.word	0x20001384
    db78:	20003091 	.word	0x20003091

0000db7c <smp_chan_get>:

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
    db7c:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    db7e:	2106      	movs	r1, #6
    db80:	f014 fb71 	bl	22266 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    db84:	4604      	mov	r4, r0
    db86:	b948      	cbnz	r0, db9c <smp_chan_get+0x20>
    db88:	4905      	ldr	r1, [pc, #20]	; (dba0 <smp_chan_get+0x24>)
    db8a:	4b06      	ldr	r3, [pc, #24]	; (dba4 <smp_chan_get+0x28>)
		BT_ERR("Unable to find SMP channel");
    db8c:	4806      	ldr	r0, [pc, #24]	; (dba8 <smp_chan_get+0x2c>)
    db8e:	1ac9      	subs	r1, r1, r3
    db90:	08c9      	lsrs	r1, r1, #3
    db92:	0189      	lsls	r1, r1, #6
    db94:	f041 0101 	orr.w	r1, r1, #1
    db98:	f012 f971 	bl	1fe7e <log_0>
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
}
    db9c:	4620      	mov	r0, r4
    db9e:	bd10      	pop	{r4, pc}
    dba0:	000250e8 	.word	0x000250e8
    dba4:	00024fd8 	.word	0x00024fd8
    dba8:	00028643 	.word	0x00028643

0000dbac <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    dbac:	4a0b      	ldr	r2, [pc, #44]	; (dbdc <bt_smp_accept+0x30>)
{
    dbae:	b508      	push	{r3, lr}
    dbb0:	4603      	mov	r3, r0
		if (smp->chan.chan.conn) {
    dbb2:	6810      	ldr	r0, [r2, #0]
    dbb4:	b918      	cbnz	r0, dbbe <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    dbb6:	4b0a      	ldr	r3, [pc, #40]	; (dbe0 <bt_smp_accept+0x34>)
    dbb8:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan.chan;
    dbba:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    dbbc:	bd08      	pop	{r3, pc}
    dbbe:	4909      	ldr	r1, [pc, #36]	; (dbe4 <bt_smp_accept+0x38>)
    dbc0:	4a09      	ldr	r2, [pc, #36]	; (dbe8 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    dbc2:	480a      	ldr	r0, [pc, #40]	; (dbec <bt_smp_accept+0x40>)
    dbc4:	1a52      	subs	r2, r2, r1
    dbc6:	08d2      	lsrs	r2, r2, #3
    dbc8:	0192      	lsls	r2, r2, #6
    dbca:	f042 0201 	orr.w	r2, r2, #1
    dbce:	4619      	mov	r1, r3
    dbd0:	f012 f962 	bl	1fe98 <log_1>
	return -ENOMEM;
    dbd4:	f06f 000b 	mvn.w	r0, #11
    dbd8:	e7f0      	b.n	dbbc <bt_smp_accept+0x10>
    dbda:	bf00      	nop
    dbdc:	20000ca8 	.word	0x20000ca8
    dbe0:	00025924 	.word	0x00025924
    dbe4:	00024fd8 	.word	0x00024fd8
    dbe8:	000250e8 	.word	0x000250e8
    dbec:	0002865e 	.word	0x0002865e

0000dbf0 <smp_f5>:
{
    dbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dbf4:	b09a      	sub	sp, #104	; 0x68
    dbf6:	461d      	mov	r5, r3
    dbf8:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	uint8_t m[53] = { 0x00, /* counter */
    dbfc:	4b2e      	ldr	r3, [pc, #184]	; (dcb8 <smp_f5+0xc8>)
{
    dbfe:	4616      	mov	r6, r2
	uint8_t m[53] = { 0x00, /* counter */
    dc00:	aa0c      	add	r2, sp, #48	; 0x30
{
    dc02:	4684      	mov	ip, r0
    dc04:	468a      	mov	sl, r1
	uint8_t m[53] = { 0x00, /* counter */
    dc06:	f103 0e30 	add.w	lr, r3, #48	; 0x30
    dc0a:	4690      	mov	r8, r2
    dc0c:	6818      	ldr	r0, [r3, #0]
    dc0e:	6859      	ldr	r1, [r3, #4]
    dc10:	4614      	mov	r4, r2
    dc12:	c403      	stmia	r4!, {r0, r1}
    dc14:	3308      	adds	r3, #8
    dc16:	4573      	cmp	r3, lr
    dc18:	4622      	mov	r2, r4
    dc1a:	d1f7      	bne.n	dc0c <smp_f5+0x1c>
    dc1c:	6818      	ldr	r0, [r3, #0]
    dc1e:	791b      	ldrb	r3, [r3, #4]
    dc20:	6020      	str	r0, [r4, #0]
    dc22:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
    dc24:	4661      	mov	r1, ip
    dc26:	2220      	movs	r2, #32
    dc28:	a804      	add	r0, sp, #16
    dc2a:	f015 fb37 	bl	2329c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    dc2e:	4823      	ldr	r0, [pc, #140]	; (dcbc <smp_f5+0xcc>)
    dc30:	466b      	mov	r3, sp
    dc32:	2220      	movs	r2, #32
    dc34:	a904      	add	r1, sp, #16
    dc36:	f015 fb4c 	bl	232d2 <bt_smp_aes_cmac>
	if (err) {
    dc3a:	4604      	mov	r4, r0
    dc3c:	bbc0      	cbnz	r0, dcb0 <smp_f5+0xc0>
	sys_memcpy_swap(m + 5, n1, 16);
    dc3e:	2210      	movs	r2, #16
    dc40:	4651      	mov	r1, sl
    dc42:	f10d 0035 	add.w	r0, sp, #53	; 0x35
    dc46:	f015 fb29 	bl	2329c <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    dc4a:	2210      	movs	r2, #16
    dc4c:	4631      	mov	r1, r6
    dc4e:	f10d 0045 	add.w	r0, sp, #69	; 0x45
    dc52:	f015 fb23 	bl	2329c <sys_memcpy_swap>
	m[37] = a1->type;
    dc56:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    dc58:	2206      	movs	r2, #6
	m[37] = a1->type;
    dc5a:	f811 3b01 	ldrb.w	r3, [r1], #1
    dc5e:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    dc62:	f10d 0056 	add.w	r0, sp, #86	; 0x56
    dc66:	f015 fb19 	bl	2329c <sys_memcpy_swap>
	m[44] = a2->type;
    dc6a:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    dc6c:	2206      	movs	r2, #6
	m[44] = a2->type;
    dc6e:	f811 3b01 	ldrb.w	r3, [r1], #1
    dc72:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    dc76:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
    dc7a:	f015 fb0f 	bl	2329c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    dc7e:	464b      	mov	r3, r9
    dc80:	2235      	movs	r2, #53	; 0x35
    dc82:	4641      	mov	r1, r8
    dc84:	4668      	mov	r0, sp
    dc86:	f015 fb24 	bl	232d2 <bt_smp_aes_cmac>
	if (err) {
    dc8a:	4604      	mov	r4, r0
    dc8c:	b980      	cbnz	r0, dcb0 <smp_f5+0xc0>
	sys_mem_swap(mackey, 16);
    dc8e:	4648      	mov	r0, r9
    dc90:	f015 fb9c 	bl	233cc <sys_mem_swap.constprop.0>
	m[0] = 0x01;
    dc94:	2301      	movs	r3, #1
    dc96:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    dc9a:	2235      	movs	r2, #53	; 0x35
    dc9c:	463b      	mov	r3, r7
    dc9e:	4641      	mov	r1, r8
    dca0:	4668      	mov	r0, sp
    dca2:	f015 fb16 	bl	232d2 <bt_smp_aes_cmac>
	if (err) {
    dca6:	4604      	mov	r4, r0
    dca8:	b910      	cbnz	r0, dcb0 <smp_f5+0xc0>
	sys_mem_swap(ltk, 16);
    dcaa:	4638      	mov	r0, r7
    dcac:	f015 fb8e 	bl	233cc <sys_mem_swap.constprop.0>
}
    dcb0:	4620      	mov	r0, r4
    dcb2:	b01a      	add	sp, #104	; 0x68
    dcb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dcb8:	00025204 	.word	0x00025204
    dcbc:	000288e8 	.word	0x000288e8

0000dcc0 <sc_smp_check_confirm>:
{
    dcc0:	b530      	push	{r4, r5, lr}
    dcc2:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
    dcc6:	b087      	sub	sp, #28
    dcc8:	4604      	mov	r4, r0
    dcca:	2b05      	cmp	r3, #5
    dccc:	d829      	bhi.n	dd22 <sc_smp_check_confirm+0x62>
    dcce:	e8df f003 	tbb	[pc, r3]
    dcd2:	0324      	.short	0x0324
    dcd4:	26282403 	.word	0x26282403
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    dcd8:	f890 2194 	ldrb.w	r2, [r0, #404]	; 0x194
    dcdc:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
    dce0:	40d3      	lsrs	r3, r2
    dce2:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    dce6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    dcea:	b2db      	uxtb	r3, r3
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    dcec:	490e      	ldr	r1, [pc, #56]	; (dd28 <sc_smp_check_confirm+0x68>)
    dcee:	ad02      	add	r5, sp, #8
    dcf0:	9500      	str	r5, [sp, #0]
    dcf2:	6809      	ldr	r1, [r1, #0]
    dcf4:	f104 02ef 	add.w	r2, r4, #239	; 0xef
    dcf8:	f204 100f 	addw	r0, r4, #271	; 0x10f
    dcfc:	f015 fbc0 	bl	23480 <smp_f4>
    dd00:	b978      	cbnz	r0, dd22 <sc_smp_check_confirm+0x62>
	if (memcmp(smp->pcnf, cfm, 16)) {
    dd02:	2210      	movs	r2, #16
    dd04:	4629      	mov	r1, r5
    dd06:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    dd0a:	f013 fd5c 	bl	217c6 <memcmp>
    dd0e:	2800      	cmp	r0, #0
		return BT_SMP_ERR_CONFIRM_FAILED;
    dd10:	bf0c      	ite	eq
    dd12:	2000      	moveq	r0, #0
    dd14:	2004      	movne	r0, #4
}
    dd16:	b007      	add	sp, #28
    dd18:	bd30      	pop	{r4, r5, pc}
	switch (smp->method) {
    dd1a:	2300      	movs	r3, #0
    dd1c:	e7e6      	b.n	dcec <sc_smp_check_confirm+0x2c>
		return 0;
    dd1e:	2000      	movs	r0, #0
    dd20:	e7f9      	b.n	dd16 <sc_smp_check_confirm+0x56>
		return BT_SMP_ERR_UNSPECIFIED;
    dd22:	2008      	movs	r0, #8
    dd24:	e7f7      	b.n	dd16 <sc_smp_check_confirm+0x56>
    dd26:	bf00      	nop
    dd28:	20001440 	.word	0x20001440

0000dd2c <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    dd2c:	b513      	push	{r0, r1, r4, lr}
    dd2e:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    dd30:	2200      	movs	r2, #0
    dd32:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    dd34:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    dd36:	460a      	mov	r2, r1
    dd38:	6800      	ldr	r0, [r0, #0]
    dd3a:	2106      	movs	r1, #6
    dd3c:	f014 fa53 	bl	221e6 <bt_l2cap_send_cb>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    dd40:	4805      	ldr	r0, [pc, #20]	; (dd58 <smp_send.isra.0+0x2c>)
    dd42:	f247 5230 	movw	r2, #30000	; 0x7530
    dd46:	2300      	movs	r3, #0
    dd48:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
}
    dd4c:	b002      	add	sp, #8
    dd4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd52:	f011 b963 	b.w	1f01c <k_delayed_work_submit_to_queue>
    dd56:	bf00      	nop
    dd58:	200010e0 	.word	0x200010e0

0000dd5c <get_pair_method>:
{
    dd5c:	b538      	push	{r3, r4, r5, lr}
    dd5e:	4605      	mov	r5, r0
    dd60:	460c      	mov	r4, r1
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    dd62:	30bc      	adds	r0, #188	; 0xbc
    dd64:	2105      	movs	r1, #5
    dd66:	f015 fbb0 	bl	234ca <atomic_test_bit>
    dd6a:	bb00      	cbnz	r0, ddae <get_pair_method+0x52>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    dd6c:	2c04      	cmp	r4, #4
    dd6e:	d81d      	bhi.n	ddac <get_pair_method+0x50>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    dd70:	f895 30c3 	ldrb.w	r3, [r5, #195]	; 0xc3
    dd74:	f895 20ca 	ldrb.w	r2, [r5, #202]	; 0xca
    dd78:	4013      	ands	r3, r2
    dd7a:	07d8      	lsls	r0, r3, #31
    dd7c:	d434      	bmi.n	dde8 <get_pair_method+0x8c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    dd7e:	f895 00cb 	ldrb.w	r0, [r5, #203]	; 0xcb
    dd82:	f895 30c4 	ldrb.w	r3, [r5, #196]	; 0xc4
    dd86:	4303      	orrs	r3, r0
    dd88:	f013 0004 	ands.w	r0, r3, #4
    dd8c:	d00e      	beq.n	ddac <get_pair_method+0x50>
	method = gen_method_legacy[remote_io][get_io_capa()];
    dd8e:	f7ff fe4d 	bl	da2c <get_io_capa>
    dd92:	4b18      	ldr	r3, [pc, #96]	; (ddf4 <get_pair_method+0x98>)
    dd94:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    dd98:	441c      	add	r4, r3
    dd9a:	5c20      	ldrb	r0, [r4, r0]
	if (method == PASSKEY_ROLE) {
    dd9c:	2804      	cmp	r0, #4
    dd9e:	d105      	bne.n	ddac <get_pair_method+0x50>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    dda0:	682b      	ldr	r3, [r5, #0]
    dda2:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
    dda4:	2b00      	cmp	r3, #0
    dda6:	bf0c      	ite	eq
    dda8:	2002      	moveq	r0, #2
    ddaa:	2001      	movne	r0, #1
}
    ddac:	bd38      	pop	{r3, r4, r5, pc}
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    ddae:	f895 30c4 	ldrb.w	r3, [r5, #196]	; 0xc4
    ddb2:	f895 00cb 	ldrb.w	r0, [r5, #203]	; 0xcb
    ddb6:	ea03 0200 	and.w	r2, r3, r0
    ddba:	0711      	lsls	r1, r2, #28
    ddbc:	d506      	bpl.n	ddcc <get_pair_method+0x70>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    ddbe:	f895 20c3 	ldrb.w	r2, [r5, #195]	; 0xc3
    ddc2:	f895 10ca 	ldrb.w	r1, [r5, #202]	; 0xca
    ddc6:	430a      	orrs	r2, r1
    ddc8:	07d2      	lsls	r2, r2, #31
    ddca:	d40f      	bmi.n	ddec <get_pair_method+0x90>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    ddcc:	2c04      	cmp	r4, #4
    ddce:	d80f      	bhi.n	ddf0 <get_pair_method+0x94>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    ddd0:	4318      	orrs	r0, r3
    ddd2:	f010 0004 	ands.w	r0, r0, #4
    ddd6:	d0e9      	beq.n	ddac <get_pair_method+0x50>
	return gen_method_sc[remote_io][get_io_capa()];
    ddd8:	f7ff fe28 	bl	da2c <get_io_capa>
    dddc:	4906      	ldr	r1, [pc, #24]	; (ddf8 <get_pair_method+0x9c>)
    ddde:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    dde2:	440c      	add	r4, r1
    dde4:	5c20      	ldrb	r0, [r4, r0]
    dde6:	e7e1      	b.n	ddac <get_pair_method+0x50>
		return LEGACY_OOB;
    dde8:	2006      	movs	r0, #6
    ddea:	e7df      	b.n	ddac <get_pair_method+0x50>
			return LE_SC_OOB;
    ddec:	2005      	movs	r0, #5
    ddee:	e7dd      	b.n	ddac <get_pair_method+0x50>
		return JUST_WORKS;
    ddf0:	2000      	movs	r0, #0
    ddf2:	e7db      	b.n	ddac <get_pair_method+0x50>
    ddf4:	000288b6 	.word	0x000288b6
    ddf8:	000288cf 	.word	0x000288cf

0000ddfc <sc_send_public_key>:
{
    ddfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    ddfe:	210c      	movs	r1, #12
{
    de00:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    de02:	f015 fbc3 	bl	2358c <smp_create_pdu.isra.0>
	if (!req_buf) {
    de06:	4604      	mov	r4, r0
    de08:	b1b0      	cbz	r0, de38 <sc_send_public_key+0x3c>
	req = net_buf_add(req_buf, sizeof(*req));
    de0a:	2140      	movs	r1, #64	; 0x40
    de0c:	3008      	adds	r0, #8
    de0e:	f016 f913 	bl	24038 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    de12:	4f0a      	ldr	r7, [pc, #40]	; (de3c <sc_send_public_key+0x40>)
    de14:	2220      	movs	r2, #32
    de16:	6839      	ldr	r1, [r7, #0]
	req = net_buf_add(req_buf, sizeof(*req));
    de18:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    de1a:	f013 fce4 	bl	217e6 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    de1e:	6839      	ldr	r1, [r7, #0]
    de20:	2220      	movs	r2, #32
    de22:	4411      	add	r1, r2
    de24:	18b0      	adds	r0, r6, r2
    de26:	f013 fcde 	bl	217e6 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    de2a:	4628      	mov	r0, r5
    de2c:	2200      	movs	r2, #0
    de2e:	4621      	mov	r1, r4
    de30:	f7ff ff7c 	bl	dd2c <smp_send.isra.0>
	return 0;
    de34:	2000      	movs	r0, #0
}
    de36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    de38:	2008      	movs	r0, #8
    de3a:	e7fc      	b.n	de36 <sc_send_public_key+0x3a>
    de3c:	20001440 	.word	0x20001440

0000de40 <smp_send_pairing_confirm>:
{
    de40:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    de42:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
    de46:	2c02      	cmp	r4, #2
{
    de48:	4605      	mov	r5, r0
	switch (smp->method) {
    de4a:	d824      	bhi.n	de96 <smp_send_pairing_confirm+0x56>
    de4c:	b14c      	cbz	r4, de62 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    de4e:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    de52:	f8d0 4190 	ldr.w	r4, [r0, #400]	; 0x190
    de56:	40dc      	lsrs	r4, r3
    de58:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    de5c:	f064 047f 	orn	r4, r4, #127	; 0x7f
    de60:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    de62:	2103      	movs	r1, #3
    de64:	4628      	mov	r0, r5
    de66:	f015 fb91 	bl	2358c <smp_create_pdu.isra.0>
	if (!buf) {
    de6a:	4606      	mov	r6, r0
    de6c:	b1a8      	cbz	r0, de9a <smp_send_pairing_confirm+0x5a>
	req = net_buf_add(buf, sizeof(*req));
    de6e:	2110      	movs	r1, #16
    de70:	3008      	adds	r0, #8
    de72:	f016 f8e1 	bl	24038 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    de76:	9000      	str	r0, [sp, #0]
    de78:	4810      	ldr	r0, [pc, #64]	; (debc <smp_send_pairing_confirm+0x7c>)
    de7a:	4623      	mov	r3, r4
    de7c:	6800      	ldr	r0, [r0, #0]
    de7e:	f105 02df 	add.w	r2, r5, #223	; 0xdf
    de82:	f205 110f 	addw	r1, r5, #271	; 0x10f
    de86:	f015 fafb 	bl	23480 <smp_f4>
    de8a:	4604      	mov	r4, r0
    de8c:	b148      	cbz	r0, dea2 <smp_send_pairing_confirm+0x62>
		net_buf_unref(buf);
    de8e:	4630      	mov	r0, r6
    de90:	f00f f944 	bl	1d11c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    de94:	e001      	b.n	de9a <smp_send_pairing_confirm+0x5a>
	switch (smp->method) {
    de96:	2c03      	cmp	r4, #3
    de98:	d001      	beq.n	de9e <smp_send_pairing_confirm+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    de9a:	2008      	movs	r0, #8
    de9c:	e00c      	b.n	deb8 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
    de9e:	2400      	movs	r4, #0
    dea0:	e7df      	b.n	de62 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
    dea2:	4602      	mov	r2, r0
    dea4:	4631      	mov	r1, r6
    dea6:	4628      	mov	r0, r5
    dea8:	f7ff ff40 	bl	dd2c <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    deac:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    deb0:	4621      	mov	r1, r4
    deb2:	f015 f9ff 	bl	232b4 <atomic_clear_bit>
	return 0;
    deb6:	4620      	mov	r0, r4
}
    deb8:	b002      	add	sp, #8
    deba:	bd70      	pop	{r4, r5, r6, pc}
    debc:	20001440 	.word	0x20001440

0000dec0 <bt_smp_distribute_keys>:
{
    dec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dec4:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    dec6:	6800      	ldr	r0, [r0, #0]
	if (!keys) {
    dec8:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
{
    decc:	b089      	sub	sp, #36	; 0x24
	if (!keys) {
    dece:	b9a3      	cbnz	r3, defa <bt_smp_distribute_keys+0x3a>
    ded0:	4a48      	ldr	r2, [pc, #288]	; (dff4 <bt_smp_distribute_keys+0x134>)
    ded2:	4c49      	ldr	r4, [pc, #292]	; (dff8 <bt_smp_distribute_keys+0x138>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    ded4:	3088      	adds	r0, #136	; 0x88
    ded6:	1aa4      	subs	r4, r4, r2
    ded8:	f7f9 f91e 	bl	7118 <bt_addr_le_str_real>
    dedc:	f7f7 f9e4 	bl	52a8 <log_strdup>
    dee0:	08e4      	lsrs	r4, r4, #3
    dee2:	01a4      	lsls	r4, r4, #6
    dee4:	f044 0401 	orr.w	r4, r4, #1
    dee8:	4601      	mov	r1, r0
    deea:	4622      	mov	r2, r4
    deec:	4843      	ldr	r0, [pc, #268]	; (dffc <bt_smp_distribute_keys+0x13c>)
    deee:	f011 ffd3 	bl	1fe98 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    def2:	2008      	movs	r0, #8
}
    def4:	b009      	add	sp, #36	; 0x24
    def6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    defa:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
    defe:	2105      	movs	r1, #5
    df00:	4638      	mov	r0, r7
    df02:	f015 fae2 	bl	234ca <atomic_test_bit>
    df06:	4680      	mov	r8, r0
    df08:	b9d8      	cbnz	r0, df42 <bt_smp_distribute_keys+0x82>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    df0a:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    df0e:	f013 0001 	ands.w	r0, r3, #1
    df12:	d0ef      	beq.n	def4 <bt_smp_distribute_keys+0x34>
	struct bt_keys *keys = conn->le.keys;
    df14:	6823      	ldr	r3, [r4, #0]
		bt_rand((void *)&rand, sizeof(rand));
    df16:	211a      	movs	r1, #26
    df18:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    df1a:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
		bt_rand((void *)&rand, sizeof(rand));
    df1e:	f004 fd79 	bl	12a14 <bt_rand>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    df22:	2106      	movs	r1, #6
    df24:	4620      	mov	r0, r4
    df26:	f015 fb31 	bl	2358c <smp_create_pdu.isra.0>
		if (!buf) {
    df2a:	4606      	mov	r6, r0
    df2c:	b958      	cbnz	r0, df46 <bt_smp_distribute_keys+0x86>
    df2e:	4932      	ldr	r1, [pc, #200]	; (dff8 <bt_smp_distribute_keys+0x138>)
    df30:	4b30      	ldr	r3, [pc, #192]	; (dff4 <bt_smp_distribute_keys+0x134>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    df32:	4833      	ldr	r0, [pc, #204]	; (e000 <bt_smp_distribute_keys+0x140>)
    df34:	1ac9      	subs	r1, r1, r3
    df36:	08c9      	lsrs	r1, r1, #3
    df38:	0189      	lsls	r1, r1, #6
    df3a:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Master Ident buffer");
    df3e:	f011 ff9e 	bl	1fe7e <log_0>
	return 0;
    df42:	2000      	movs	r0, #0
    df44:	e7d6      	b.n	def4 <bt_smp_distribute_keys+0x34>
		info = net_buf_add(buf, sizeof(*info));
    df46:	2110      	movs	r1, #16
    df48:	3008      	adds	r0, #8
    df4a:	f016 f875 	bl	24038 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    df4e:	7b2a      	ldrb	r2, [r5, #12]
    df50:	a901      	add	r1, sp, #4
		info = net_buf_add(buf, sizeof(*info));
    df52:	4681      	mov	r9, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
    df54:	f013 fc47 	bl	217e6 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    df58:	7b28      	ldrb	r0, [r5, #12]
    df5a:	280f      	cmp	r0, #15
    df5c:	d805      	bhi.n	df6a <bt_smp_distribute_keys+0xaa>
			(void)memset(info->ltk + keys->enc_size, 0,
    df5e:	f1c0 0210 	rsb	r2, r0, #16
    df62:	4641      	mov	r1, r8
    df64:	4448      	add	r0, r9
    df66:	f013 fc69 	bl	2183c <memset>
		smp_send(smp, buf, NULL, NULL);
    df6a:	4631      	mov	r1, r6
    df6c:	2200      	movs	r2, #0
    df6e:	4620      	mov	r0, r4
    df70:	f7ff fedc 	bl	dd2c <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    df74:	2107      	movs	r1, #7
    df76:	4620      	mov	r0, r4
    df78:	f015 fb08 	bl	2358c <smp_create_pdu.isra.0>
		if (!buf) {
    df7c:	4606      	mov	r6, r0
    df7e:	b940      	cbnz	r0, df92 <bt_smp_distribute_keys+0xd2>
    df80:	491d      	ldr	r1, [pc, #116]	; (dff8 <bt_smp_distribute_keys+0x138>)
    df82:	4b1c      	ldr	r3, [pc, #112]	; (dff4 <bt_smp_distribute_keys+0x134>)
			BT_ERR("Unable to allocate Master Ident buffer");
    df84:	481f      	ldr	r0, [pc, #124]	; (e004 <bt_smp_distribute_keys+0x144>)
    df86:	1ac9      	subs	r1, r1, r3
    df88:	08c9      	lsrs	r1, r1, #3
    df8a:	0189      	lsls	r1, r1, #6
    df8c:	f041 0101 	orr.w	r1, r1, #1
    df90:	e7d5      	b.n	df3e <bt_smp_distribute_keys+0x7e>
		ident = net_buf_add(buf, sizeof(*ident));
    df92:	210a      	movs	r1, #10
    df94:	3008      	adds	r0, #8
    df96:	f016 f84f 	bl	24038 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    df9a:	2208      	movs	r2, #8
		ident = net_buf_add(buf, sizeof(*ident));
    df9c:	4680      	mov	r8, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    df9e:	a905      	add	r1, sp, #20
    dfa0:	3002      	adds	r0, #2
    dfa2:	f013 fc20 	bl	217e6 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    dfa6:	2202      	movs	r2, #2
    dfa8:	a907      	add	r1, sp, #28
    dfaa:	4640      	mov	r0, r8
    dfac:	f013 fc1b 	bl	217e6 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    dfb0:	4631      	mov	r1, r6
    dfb2:	4620      	mov	r0, r4
    dfb4:	4a14      	ldr	r2, [pc, #80]	; (e008 <bt_smp_distribute_keys+0x148>)
    dfb6:	f7ff feb9 	bl	dd2c <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    dfba:	210c      	movs	r1, #12
    dfbc:	4638      	mov	r0, r7
    dfbe:	f015 fa84 	bl	234ca <atomic_test_bit>
    dfc2:	2800      	cmp	r0, #0
    dfc4:	d0bd      	beq.n	df42 <bt_smp_distribute_keys+0x82>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    dfc6:	4628      	mov	r0, r5
    dfc8:	2101      	movs	r1, #1
    dfca:	f015 ffc6 	bl	23f5a <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    dfce:	a901      	add	r1, sp, #4
    dfd0:	2210      	movs	r2, #16
    dfd2:	f105 004a 	add.w	r0, r5, #74	; 0x4a
    dfd6:	f013 fc06 	bl	217e6 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    dfda:	a905      	add	r1, sp, #20
    dfdc:	2208      	movs	r2, #8
    dfde:	f105 0040 	add.w	r0, r5, #64	; 0x40
    dfe2:	f013 fc00 	bl	217e6 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    dfe6:	2202      	movs	r2, #2
    dfe8:	a907      	add	r1, sp, #28
    dfea:	f105 0048 	add.w	r0, r5, #72	; 0x48
    dfee:	f013 fbfa 	bl	217e6 <memcpy>
    dff2:	e7a6      	b.n	df42 <bt_smp_distribute_keys+0x82>
    dff4:	00024fd8 	.word	0x00024fd8
    dff8:	000250e8 	.word	0x000250e8
    dffc:	00028683 	.word	0x00028683
    e000:	00028698 	.word	0x00028698
    e004:	000286bf 	.word	0x000286bf
    e008:	000239cd 	.word	0x000239cd

0000e00c <display_passkey>:
{
    e00c:	b570      	push	{r4, r5, r6, lr}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    e00e:	2104      	movs	r1, #4
{
    e010:	4604      	mov	r4, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    e012:	f500 70c8 	add.w	r0, r0, #400	; 0x190
    e016:	f004 fcfd 	bl	12a14 <bt_rand>
    e01a:	4605      	mov	r5, r0
    e01c:	b9e0      	cbnz	r0, e058 <display_passkey+0x4c>
	if (bt_auth && bt_auth->passkey_display) {
    e01e:	4e0f      	ldr	r6, [pc, #60]	; (e05c <display_passkey+0x50>)
		smp->passkey %= 1000000;
    e020:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    e024:	4a0e      	ldr	r2, [pc, #56]	; (e060 <display_passkey+0x54>)
	smp->passkey_round = 0U;
    e026:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
	if (bt_auth && bt_auth->passkey_display) {
    e02a:	6830      	ldr	r0, [r6, #0]
		smp->passkey %= 1000000;
    e02c:	fbb1 f3f2 	udiv	r3, r1, r2
    e030:	fb02 1313 	mls	r3, r2, r3, r1
    e034:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
	if (bt_auth && bt_auth->passkey_display) {
    e038:	b168      	cbz	r0, e056 <display_passkey+0x4a>
    e03a:	6800      	ldr	r0, [r0, #0]
    e03c:	b158      	cbz	r0, e056 <display_passkey+0x4a>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    e03e:	210a      	movs	r1, #10
    e040:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    e044:	f015 fa94 	bl	23570 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    e048:	6833      	ldr	r3, [r6, #0]
    e04a:	6820      	ldr	r0, [r4, #0]
    e04c:	681b      	ldr	r3, [r3, #0]
    e04e:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    e052:	4798      	blx	r3
	return 0;
    e054:	4628      	mov	r0, r5
}
    e056:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    e058:	2008      	movs	r0, #8
    e05a:	e7fc      	b.n	e056 <display_passkey+0x4a>
    e05c:	20001384 	.word	0x20001384
    e060:	000f4240 	.word	0x000f4240

0000e064 <smp_init>:
{
    e064:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    e066:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
{
    e06a:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    e06c:	22f0      	movs	r2, #240	; 0xf0
    e06e:	2100      	movs	r1, #0
    e070:	4628      	mov	r0, r5
    e072:	f013 fbe3 	bl	2183c <memset>
	if (bt_rand(smp->prnd, 16)) {
    e076:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    e07a:	2110      	movs	r1, #16
    e07c:	f004 fcca 	bl	12a14 <bt_rand>
    e080:	4604      	mov	r4, r0
    e082:	b948      	cbnz	r0, e098 <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    e084:	2105      	movs	r1, #5
    e086:	4628      	mov	r0, r5
    e088:	f015 fa72 	bl	23570 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    e08c:	f7fb fd64 	bl	9b58 <bt_pub_key_get>
    e090:	4b02      	ldr	r3, [pc, #8]	; (e09c <smp_init+0x38>)
    e092:	6018      	str	r0, [r3, #0]
}
    e094:	4620      	mov	r0, r4
    e096:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    e098:	2408      	movs	r4, #8
    e09a:	e7fb      	b.n	e094 <smp_init+0x30>
    e09c:	20001440 	.word	0x20001440

0000e0a0 <smp_send_pairing_req>:
{
    e0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e0a4:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    e0a6:	f7ff fd69 	bl	db7c <smp_chan_get>
	if (!smp) {
    e0aa:	4604      	mov	r4, r0
    e0ac:	2800      	cmp	r0, #0
    e0ae:	d06f      	beq.n	e190 <smp_send_pairing_req+0xf0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    e0b0:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
    e0b4:	2104      	movs	r1, #4
    e0b6:	4640      	mov	r0, r8
    e0b8:	f015 fa07 	bl	234ca <atomic_test_bit>
    e0bc:	2800      	cmp	r0, #0
    e0be:	d16a      	bne.n	e196 <smp_send_pairing_req+0xf6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e0c0:	2103      	movs	r1, #3
    e0c2:	4640      	mov	r0, r8
    e0c4:	f015 fa01 	bl	234ca <atomic_test_bit>
    e0c8:	b120      	cbz	r0, e0d4 <smp_send_pairing_req+0x34>
		return -EBUSY;
    e0ca:	f06f 050f 	mvn.w	r5, #15
}
    e0ce:	4628      	mov	r0, r5
    e0d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    e0d4:	2101      	movs	r1, #1
    e0d6:	4640      	mov	r0, r8
    e0d8:	f015 f9f7 	bl	234ca <atomic_test_bit>
    e0dc:	2800      	cmp	r0, #0
    e0de:	d1f4      	bne.n	e0ca <smp_send_pairing_req+0x2a>
	if (!sec_level_reachable(conn)) {
    e0e0:	7aa8      	ldrb	r0, [r5, #10]
    e0e2:	f7ff fd1b 	bl	db1c <sec_level_reachable.isra.0>
    e0e6:	2800      	cmp	r0, #0
    e0e8:	d058      	beq.n	e19c <smp_send_pairing_req+0xfc>
	if (!conn->le.keys) {
    e0ea:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    e0ee:	b13b      	cbz	r3, e100 <smp_send_pairing_req+0x60>
	if (smp_init(smp)) {
    e0f0:	4620      	mov	r0, r4
    e0f2:	f7ff ffb7 	bl	e064 <smp_init>
    e0f6:	4605      	mov	r5, r0
    e0f8:	b170      	cbz	r0, e118 <smp_send_pairing_req+0x78>
		return -ENOBUFS;
    e0fa:	f06f 0536 	mvn.w	r5, #54	; 0x36
    e0fe:	e7e6      	b.n	e0ce <smp_send_pairing_req+0x2e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e100:	7a28      	ldrb	r0, [r5, #8]
    e102:	f105 0188 	add.w	r1, r5, #136	; 0x88
    e106:	f001 f979 	bl	f3fc <bt_keys_get_addr>
    e10a:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    e10e:	2800      	cmp	r0, #0
    e110:	d1ee      	bne.n	e0f0 <smp_send_pairing_req+0x50>
			return -ENOMEM;
    e112:	f06f 050b 	mvn.w	r5, #11
    e116:	e7da      	b.n	e0ce <smp_send_pairing_req+0x2e>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    e118:	2101      	movs	r1, #1
    e11a:	4620      	mov	r0, r4
    e11c:	f015 fa36 	bl	2358c <smp_create_pdu.isra.0>
	if (!req_buf) {
    e120:	4607      	mov	r7, r0
    e122:	2800      	cmp	r0, #0
    e124:	d0e9      	beq.n	e0fa <smp_send_pairing_req+0x5a>
	req = net_buf_add(req_buf, sizeof(*req));
    e126:	2106      	movs	r1, #6
    e128:	3008      	adds	r0, #8
    e12a:	f015 ff85 	bl	24038 <net_buf_simple_add>
    e12e:	4606      	mov	r6, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    e130:	2009      	movs	r0, #9
    e132:	f7ff fcd5 	bl	dae0 <get_auth.isra.0>
    e136:	70b0      	strb	r0, [r6, #2]
	req->io_capability = get_io_capa();
    e138:	f7ff fc78 	bl	da2c <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    e13c:	4b19      	ldr	r3, [pc, #100]	; (e1a4 <smp_send_pairing_req+0x104>)
	req->io_capability = get_io_capa();
    e13e:	7030      	strb	r0, [r6, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    e140:	781b      	ldrb	r3, [r3, #0]
    e142:	7073      	strb	r3, [r6, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    e144:	2310      	movs	r3, #16
    e146:	70f3      	strb	r3, [r6, #3]
	req->resp_key_dist = RECV_KEYS;
    e148:	f04f 0903 	mov.w	r9, #3
	req->init_key_dist = SEND_KEYS;
    e14c:	2301      	movs	r3, #1
	smp->local_dist = SEND_KEYS;
    e14e:	f240 3201 	movw	r2, #769	; 0x301
	req->init_key_dist = SEND_KEYS;
    e152:	7133      	strb	r3, [r6, #4]
	req->resp_key_dist = RECV_KEYS;
    e154:	f886 9005 	strb.w	r9, [r6, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
    e158:	4631      	mov	r1, r6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    e15a:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	smp->local_dist = SEND_KEYS;
    e15e:	f8a4 21a0 	strh.w	r2, [r4, #416]	; 0x1a0
	memcpy(smp->preq + 1, req, sizeof(*req));
    e162:	f104 00c2 	add.w	r0, r4, #194	; 0xc2
    e166:	2206      	movs	r2, #6
    e168:	f013 fb3d 	bl	217e6 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    e16c:	462a      	mov	r2, r5
    e16e:	4639      	mov	r1, r7
    e170:	4620      	mov	r0, r4
    e172:	f7ff fddb 	bl	dd2c <smp_send.isra.0>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    e176:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e17a:	2102      	movs	r1, #2
    e17c:	f015 f9f8 	bl	23570 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    e180:	210b      	movs	r1, #11
    e182:	f015 f9f5 	bl	23570 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    e186:	4649      	mov	r1, r9
    e188:	4640      	mov	r0, r8
    e18a:	f015 f9f1 	bl	23570 <atomic_set_bit>
	return 0;
    e18e:	e79e      	b.n	e0ce <smp_send_pairing_req+0x2e>
		return -ENOTCONN;
    e190:	f06f 0538 	mvn.w	r5, #56	; 0x38
    e194:	e79b      	b.n	e0ce <smp_send_pairing_req+0x2e>
		return -EIO;
    e196:	f06f 0504 	mvn.w	r5, #4
    e19a:	e798      	b.n	e0ce <smp_send_pairing_req+0x2e>
		return -EINVAL;
    e19c:	f06f 0515 	mvn.w	r5, #21
    e1a0:	e795      	b.n	e0ce <smp_send_pairing_req+0x2e>
    e1a2:	bf00      	nop
    e1a4:	20003090 	.word	0x20003090

0000e1a8 <smp_security_request>:
{
    e1a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    e1aa:	4606      	mov	r6, r0
	struct bt_smp_security_request *req = (void *)buf->data;
    e1ac:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    e1ae:	f856 4bbc 	ldr.w	r4, [r6], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e1b2:	2103      	movs	r1, #3
    e1b4:	4630      	mov	r0, r6
    e1b6:	f015 f988 	bl	234ca <atomic_test_bit>
    e1ba:	b108      	cbz	r0, e1c0 <smp_security_request+0x18>
	return 0;
    e1bc:	2000      	movs	r0, #0
    e1be:	e064      	b.n	e28a <smp_security_request+0xe2>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    e1c0:	2101      	movs	r1, #1
    e1c2:	4630      	mov	r0, r6
    e1c4:	f015 f981 	bl	234ca <atomic_test_bit>
    e1c8:	2800      	cmp	r0, #0
    e1ca:	d1f7      	bne.n	e1bc <smp_security_request+0x14>
	if (sc_supported) {
    e1cc:	781d      	ldrb	r5, [r3, #0]
    e1ce:	4b32      	ldr	r3, [pc, #200]	; (e298 <smp_security_request+0xf0>)
    e1d0:	781b      	ldrb	r3, [r3, #0]
    e1d2:	b17b      	cbz	r3, e1f4 <smp_security_request+0x4c>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    e1d4:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
    e1d8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    e1dc:	b16b      	cbz	r3, e1fa <smp_security_request+0x52>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    e1de:	89db      	ldrh	r3, [r3, #14]
    e1e0:	f003 0324 	and.w	r3, r3, #36	; 0x24
    e1e4:	b9d3      	cbnz	r3, e21c <smp_security_request+0x74>
	if (smp_send_pairing_req(conn) < 0) {
    e1e6:	4620      	mov	r0, r4
    e1e8:	f7ff ff5a 	bl	e0a0 <smp_send_pairing_req>
    e1ec:	2800      	cmp	r0, #0
    e1ee:	db4b      	blt.n	e288 <smp_security_request+0xe0>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    e1f0:	210e      	movs	r1, #14
    e1f2:	e04d      	b.n	e290 <smp_security_request+0xe8>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    e1f4:	f005 0507 	and.w	r5, r5, #7
    e1f8:	e7ee      	b.n	e1d8 <smp_security_request+0x30>
					     &conn->le.dst);
    e1fa:	f104 0788 	add.w	r7, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
    e1fe:	7a21      	ldrb	r1, [r4, #8]
    e200:	463a      	mov	r2, r7
    e202:	2020      	movs	r0, #32
    e204:	f001 f930 	bl	f468 <bt_keys_find>
    e208:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
    e20c:	b930      	cbnz	r0, e21c <smp_security_request+0x74>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
    e20e:	7a21      	ldrb	r1, [r4, #8]
    e210:	463a      	mov	r2, r7
    e212:	2004      	movs	r0, #4
    e214:	f001 f928 	bl	f468 <bt_keys_find>
    e218:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    e21c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    e220:	2900      	cmp	r1, #0
    e222:	d0e0      	beq.n	e1e6 <smp_security_request+0x3e>
	if ((auth & BT_SMP_AUTH_MITM) &&
    e224:	076f      	lsls	r7, r5, #29
    e226:	d518      	bpl.n	e25a <smp_security_request+0xb2>
    e228:	7b4b      	ldrb	r3, [r1, #13]
    e22a:	07d8      	lsls	r0, r3, #31
    e22c:	d415      	bmi.n	e25a <smp_security_request+0xb2>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    e22e:	f7ff fbfd 	bl	da2c <get_io_capa>
    e232:	4a1a      	ldr	r2, [pc, #104]	; (e29c <smp_security_request+0xf4>)
    e234:	4b1a      	ldr	r3, [pc, #104]	; (e2a0 <smp_security_request+0xf8>)
    e236:	1ad2      	subs	r2, r2, r3
    e238:	08d2      	lsrs	r2, r2, #3
    e23a:	2803      	cmp	r0, #3
    e23c:	ea4f 1282 	mov.w	r2, r2, lsl #6
    e240:	d004      	beq.n	e24c <smp_security_request+0xa4>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    e242:	4818      	ldr	r0, [pc, #96]	; (e2a4 <smp_security_request+0xfc>)
    e244:	f042 0203 	orr.w	r2, r2, #3
    e248:	4629      	mov	r1, r5
    e24a:	e003      	b.n	e254 <smp_security_request+0xac>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
    e24c:	4816      	ldr	r0, [pc, #88]	; (e2a8 <smp_security_request+0x100>)
    e24e:	f042 0202 	orr.w	r2, r2, #2
    e252:	4629      	mov	r1, r5
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    e254:	f011 fe20 	bl	1fe98 <log_1>
		goto pair;
    e258:	e7c5      	b.n	e1e6 <smp_security_request+0x3e>
	if ((auth & BT_SMP_AUTH_SC) &&
    e25a:	072a      	lsls	r2, r5, #28
    e25c:	d508      	bpl.n	e270 <smp_security_request+0xc8>
    e25e:	89cb      	ldrh	r3, [r1, #14]
    e260:	069b      	lsls	r3, r3, #26
    e262:	d405      	bmi.n	e270 <smp_security_request+0xc8>
    e264:	4a0d      	ldr	r2, [pc, #52]	; (e29c <smp_security_request+0xf4>)
    e266:	4b0e      	ldr	r3, [pc, #56]	; (e2a0 <smp_security_request+0xf8>)
    e268:	1ad2      	subs	r2, r2, r3
    e26a:	08d2      	lsrs	r2, r2, #3
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    e26c:	0192      	lsls	r2, r2, #6
    e26e:	e7e8      	b.n	e242 <smp_security_request+0x9a>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    e270:	7b0b      	ldrb	r3, [r1, #12]
    e272:	9300      	str	r3, [sp, #0]
    e274:	f101 0218 	add.w	r2, r1, #24
    e278:	f101 031a 	add.w	r3, r1, #26
    e27c:	4620      	mov	r0, r4
    e27e:	3110      	adds	r1, #16
    e280:	f013 fe30 	bl	21ee4 <bt_conn_le_start_encryption>
    e284:	2800      	cmp	r0, #0
    e286:	da02      	bge.n	e28e <smp_security_request+0xe6>
		return BT_SMP_ERR_UNSPECIFIED;
    e288:	2008      	movs	r0, #8
}
    e28a:	b003      	add	sp, #12
    e28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    e28e:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    e290:	4630      	mov	r0, r6
    e292:	f015 f96d 	bl	23570 <atomic_set_bit>
    e296:	e791      	b.n	e1bc <smp_security_request+0x14>
    e298:	20003091 	.word	0x20003091
    e29c:	000250e8 	.word	0x000250e8
    e2a0:	00024fd8 	.word	0x00024fd8
    e2a4:	000286e6 	.word	0x000286e6
    e2a8:	0002870d 	.word	0x0002870d

0000e2ac <smp_ident_info>:
{
    e2ac:	b570      	push	{r4, r5, r6, lr}
    e2ae:	460b      	mov	r3, r1
    e2b0:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e2b2:	210c      	movs	r1, #12
    e2b4:	30bc      	adds	r0, #188	; 0xbc
    e2b6:	f015 f908 	bl	234ca <atomic_test_bit>
    e2ba:	b308      	cbz	r0, e300 <smp_ident_info+0x54>
		struct bt_smp_ident_info *req = (void *)buf->data;
    e2bc:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e2be:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    e2c0:	f103 0588 	add.w	r5, r3, #136	; 0x88
    e2c4:	7a19      	ldrb	r1, [r3, #8]
    e2c6:	462a      	mov	r2, r5
    e2c8:	2002      	movs	r0, #2
    e2ca:	f015 fe36 	bl	23f3a <bt_keys_get_type>
		if (!keys) {
    e2ce:	b990      	cbnz	r0, e2f6 <smp_ident_info+0x4a>
    e2d0:	4a0f      	ldr	r2, [pc, #60]	; (e310 <smp_ident_info+0x64>)
    e2d2:	4c10      	ldr	r4, [pc, #64]	; (e314 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    e2d4:	4628      	mov	r0, r5
    e2d6:	1aa4      	subs	r4, r4, r2
    e2d8:	f7f8 ff1e 	bl	7118 <bt_addr_le_str_real>
    e2dc:	f7f6 ffe4 	bl	52a8 <log_strdup>
    e2e0:	08e4      	lsrs	r4, r4, #3
    e2e2:	01a4      	lsls	r4, r4, #6
    e2e4:	f044 0401 	orr.w	r4, r4, #1
    e2e8:	4601      	mov	r1, r0
    e2ea:	4622      	mov	r2, r4
    e2ec:	480a      	ldr	r0, [pc, #40]	; (e318 <smp_ident_info+0x6c>)
    e2ee:	f011 fdd3 	bl	1fe98 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e2f2:	2008      	movs	r0, #8
}
    e2f4:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    e2f6:	2210      	movs	r2, #16
    e2f8:	4631      	mov	r1, r6
    e2fa:	302a      	adds	r0, #42	; 0x2a
    e2fc:	f013 fa73 	bl	217e6 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    e300:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e304:	2109      	movs	r1, #9
    e306:	f015 f933 	bl	23570 <atomic_set_bit>
	return 0;
    e30a:	2000      	movs	r0, #0
    e30c:	e7f2      	b.n	e2f4 <smp_ident_info+0x48>
    e30e:	bf00      	nop
    e310:	00024fd8 	.word	0x00024fd8
    e314:	000250e8 	.word	0x000250e8
    e318:	0002873c 	.word	0x0002873c

0000e31c <smp_encrypt_info>:
{
    e31c:	b570      	push	{r4, r5, r6, lr}
    e31e:	460b      	mov	r3, r1
    e320:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e322:	210c      	movs	r1, #12
    e324:	30bc      	adds	r0, #188	; 0xbc
    e326:	f015 f8d0 	bl	234ca <atomic_test_bit>
    e32a:	b308      	cbz	r0, e370 <smp_encrypt_info+0x54>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    e32c:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e32e:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    e330:	f103 0588 	add.w	r5, r3, #136	; 0x88
    e334:	7a19      	ldrb	r1, [r3, #8]
    e336:	462a      	mov	r2, r5
    e338:	2004      	movs	r0, #4
    e33a:	f015 fdfe 	bl	23f3a <bt_keys_get_type>
		if (!keys) {
    e33e:	b990      	cbnz	r0, e366 <smp_encrypt_info+0x4a>
    e340:	4a0f      	ldr	r2, [pc, #60]	; (e380 <smp_encrypt_info+0x64>)
    e342:	4c10      	ldr	r4, [pc, #64]	; (e384 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    e344:	4628      	mov	r0, r5
    e346:	1aa4      	subs	r4, r4, r2
    e348:	f7f8 fee6 	bl	7118 <bt_addr_le_str_real>
    e34c:	f7f6 ffac 	bl	52a8 <log_strdup>
    e350:	08e4      	lsrs	r4, r4, #3
    e352:	01a4      	lsls	r4, r4, #6
    e354:	f044 0401 	orr.w	r4, r4, #1
    e358:	4601      	mov	r1, r0
    e35a:	4622      	mov	r2, r4
    e35c:	480a      	ldr	r0, [pc, #40]	; (e388 <smp_encrypt_info+0x6c>)
    e35e:	f011 fd9b 	bl	1fe98 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e362:	2008      	movs	r0, #8
}
    e364:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    e366:	2210      	movs	r2, #16
    e368:	4631      	mov	r1, r6
    e36a:	301a      	adds	r0, #26
    e36c:	f013 fa3b 	bl	217e6 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    e370:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e374:	2107      	movs	r1, #7
    e376:	f015 f8fb 	bl	23570 <atomic_set_bit>
	return 0;
    e37a:	2000      	movs	r0, #0
    e37c:	e7f2      	b.n	e364 <smp_encrypt_info+0x48>
    e37e:	bf00      	nop
    e380:	00024fd8 	.word	0x00024fd8
    e384:	000250e8 	.word	0x000250e8
    e388:	0002873c 	.word	0x0002873c

0000e38c <legacy_request_tk>:
{
    e38c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    e38e:	6804      	ldr	r4, [r0, #0]
{
    e390:	4605      	mov	r5, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    e392:	f104 0188 	add.w	r1, r4, #136	; 0x88
    e396:	7a20      	ldrb	r0, [r4, #8]
    e398:	f001 f8b6 	bl	f508 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    e39c:	f895 10c0 	ldrb.w	r1, [r5, #192]	; 0xc0
    e3a0:	b178      	cbz	r0, e3c2 <legacy_request_tk+0x36>
    e3a2:	7b43      	ldrb	r3, [r0, #13]
    e3a4:	07db      	lsls	r3, r3, #31
    e3a6:	d50c      	bpl.n	e3c2 <legacy_request_tk+0x36>
    e3a8:	b959      	cbnz	r1, e3c2 <legacy_request_tk+0x36>
    e3aa:	4937      	ldr	r1, [pc, #220]	; (e488 <legacy_request_tk+0xfc>)
    e3ac:	4b37      	ldr	r3, [pc, #220]	; (e48c <legacy_request_tk+0x100>)
		BT_ERR("JustWorks failed, authenticated keys present");
    e3ae:	4838      	ldr	r0, [pc, #224]	; (e490 <legacy_request_tk+0x104>)
    e3b0:	1ac9      	subs	r1, r1, r3
    e3b2:	08c9      	lsrs	r1, r1, #3
    e3b4:	0189      	lsls	r1, r1, #6
    e3b6:	f041 0101 	orr.w	r1, r1, #1
    e3ba:	f011 fd60 	bl	1fe7e <log_0>
				return BT_SMP_ERR_UNSPECIFIED;
    e3be:	2008      	movs	r0, #8
    e3c0:	e01d      	b.n	e3fe <legacy_request_tk+0x72>
	switch (smp->method) {
    e3c2:	4608      	mov	r0, r1
    e3c4:	2906      	cmp	r1, #6
    e3c6:	d852      	bhi.n	e46e <legacy_request_tk+0xe2>
    e3c8:	e8df f001 	tbb	[pc, r1]
    e3cc:	511b4619 	.word	0x511b4619
    e3d0:	5151      	.short	0x5151
    e3d2:	04          	.byte	0x04
    e3d3:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    e3d4:	4e2f      	ldr	r6, [pc, #188]	; (e494 <legacy_request_tk+0x108>)
    e3d6:	6833      	ldr	r3, [r6, #0]
    e3d8:	2b00      	cmp	r3, #0
    e3da:	d053      	beq.n	e484 <legacy_request_tk+0xf8>
    e3dc:	68db      	ldr	r3, [r3, #12]
    e3de:	2b00      	cmp	r3, #0
    e3e0:	d050      	beq.n	e484 <legacy_request_tk+0xf8>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e3e2:	2109      	movs	r1, #9
    e3e4:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
			struct bt_conn_oob_info info = {
    e3e8:	2400      	movs	r4, #0
    e3ea:	f8ad 4004 	strh.w	r4, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e3ee:	f015 f8bf 	bl	23570 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    e3f2:	6833      	ldr	r3, [r6, #0]
    e3f4:	6828      	ldr	r0, [r5, #0]
    e3f6:	68db      	ldr	r3, [r3, #12]
    e3f8:	a901      	add	r1, sp, #4
    e3fa:	4798      	blx	r3
	return 0;
    e3fc:	2000      	movs	r0, #0
}
    e3fe:	b002      	add	sp, #8
    e400:	bd70      	pop	{r4, r5, r6, pc}
			if (bt_rand(&passkey, sizeof(passkey))) {
    e402:	2104      	movs	r1, #4
    e404:	eb0d 0001 	add.w	r0, sp, r1
    e408:	f004 fb04 	bl	12a14 <bt_rand>
    e40c:	2800      	cmp	r0, #0
    e40e:	d1d6      	bne.n	e3be <legacy_request_tk+0x32>
			passkey %= 1000000;
    e410:	9901      	ldr	r1, [sp, #4]
    e412:	4a21      	ldr	r2, [pc, #132]	; (e498 <legacy_request_tk+0x10c>)
		if (bt_auth && bt_auth->passkey_display) {
    e414:	4e1f      	ldr	r6, [pc, #124]	; (e494 <legacy_request_tk+0x108>)
			passkey %= 1000000;
    e416:	fbb1 f3f2 	udiv	r3, r1, r2
    e41a:	fb02 1313 	mls	r3, r2, r3, r1
    e41e:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    e420:	6833      	ldr	r3, [r6, #0]
    e422:	b15b      	cbz	r3, e43c <legacy_request_tk+0xb0>
    e424:	681b      	ldr	r3, [r3, #0]
    e426:	b14b      	cbz	r3, e43c <legacy_request_tk+0xb0>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    e428:	210a      	movs	r1, #10
    e42a:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    e42e:	f015 f89f 	bl	23570 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    e432:	6833      	ldr	r3, [r6, #0]
    e434:	9901      	ldr	r1, [sp, #4]
    e436:	681b      	ldr	r3, [r3, #0]
    e438:	4620      	mov	r0, r4
    e43a:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    e43c:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    e43e:	f885 30ff 	strb.w	r3, [r5, #255]	; 0xff
	dst[1] = val >> 8;
    e442:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    e446:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e448:	f885 3101 	strb.w	r3, [r5, #257]	; 0x101
	dst[1] = val >> 8;
    e44c:	0a1b      	lsrs	r3, r3, #8
    e44e:	f885 2100 	strb.w	r2, [r5, #256]	; 0x100
    e452:	f885 3102 	strb.w	r3, [r5, #258]	; 0x102
    e456:	e7d1      	b.n	e3fc <legacy_request_tk+0x70>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e458:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    e45c:	2109      	movs	r1, #9
    e45e:	f015 f887 	bl	23570 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    e462:	4b0c      	ldr	r3, [pc, #48]	; (e494 <legacy_request_tk+0x108>)
    e464:	681b      	ldr	r3, [r3, #0]
    e466:	4620      	mov	r0, r4
    e468:	685b      	ldr	r3, [r3, #4]
    e46a:	4798      	blx	r3
    e46c:	e7c6      	b.n	e3fc <legacy_request_tk+0x70>
    e46e:	4b07      	ldr	r3, [pc, #28]	; (e48c <legacy_request_tk+0x100>)
    e470:	4a05      	ldr	r2, [pc, #20]	; (e488 <legacy_request_tk+0xfc>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    e472:	480a      	ldr	r0, [pc, #40]	; (e49c <legacy_request_tk+0x110>)
    e474:	1ad2      	subs	r2, r2, r3
    e476:	08d2      	lsrs	r2, r2, #3
    e478:	0192      	lsls	r2, r2, #6
    e47a:	f042 0201 	orr.w	r2, r2, #1
    e47e:	f011 fd0b 	bl	1fe98 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    e482:	e79c      	b.n	e3be <legacy_request_tk+0x32>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    e484:	2002      	movs	r0, #2
    e486:	e7ba      	b.n	e3fe <legacy_request_tk+0x72>
    e488:	000250e8 	.word	0x000250e8
    e48c:	00024fd8 	.word	0x00024fd8
    e490:	00028756 	.word	0x00028756
    e494:	20001384 	.word	0x20001384
    e498:	000f4240 	.word	0x000f4240
    e49c:	00028783 	.word	0x00028783

0000e4a0 <smp_pairing_req>:
{
    e4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    e4a4:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    e4a6:	78fb      	ldrb	r3, [r7, #3]
    e4a8:	3b07      	subs	r3, #7
    e4aa:	2b09      	cmp	r3, #9
{
    e4ac:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    e4ae:	d903      	bls.n	e4b8 <smp_pairing_req+0x18>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    e4b0:	2506      	movs	r5, #6
}
    e4b2:	4628      	mov	r0, r5
    e4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    e4b8:	f8d0 8000 	ldr.w	r8, [r0]
	if (!conn->le.keys) {
    e4bc:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    e4c0:	b163      	cbz	r3, e4dc <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    e4c2:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
    e4c6:	210e      	movs	r1, #14
    e4c8:	4630      	mov	r0, r6
    e4ca:	f014 fffe 	bl	234ca <atomic_test_bit>
    e4ce:	b988      	cbnz	r0, e4f4 <smp_pairing_req+0x54>
		int ret = smp_init(smp);
    e4d0:	4620      	mov	r0, r4
    e4d2:	f7ff fdc7 	bl	e064 <smp_init>
		if (ret) {
    e4d6:	b168      	cbz	r0, e4f4 <smp_pairing_req+0x54>
			return ret;
    e4d8:	b2c5      	uxtb	r5, r0
    e4da:	e7ea      	b.n	e4b2 <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e4dc:	f898 0008 	ldrb.w	r0, [r8, #8]
    e4e0:	f108 0188 	add.w	r1, r8, #136	; 0x88
    e4e4:	f000 ff8a 	bl	f3fc <bt_keys_get_addr>
    e4e8:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
		if (!conn->le.keys) {
    e4ec:	2800      	cmp	r0, #0
    e4ee:	d1e8      	bne.n	e4c2 <smp_pairing_req+0x22>
			return BT_SMP_ERR_UNSPECIFIED;
    e4f0:	2508      	movs	r5, #8
    e4f2:	e7de      	b.n	e4b2 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    e4f4:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    e4f6:	2206      	movs	r2, #6
    e4f8:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    e4fa:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	memcpy(smp->preq + 1, req, sizeof(*req));
    e4fe:	f104 00c2 	add.w	r0, r4, #194	; 0xc2
    e502:	f013 f970 	bl	217e6 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    e506:	2302      	movs	r3, #2
    e508:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	rsp->auth_req = get_auth(conn, req->auth_req);
    e50c:	78b8      	ldrb	r0, [r7, #2]
    e50e:	f7ff fae7 	bl	dae0 <get_auth.isra.0>
    e512:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
    e516:	4605      	mov	r5, r0
	rsp->io_capability = get_io_capa();
    e518:	f7ff fa88 	bl	da2c <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    e51c:	4b54      	ldr	r3, [pc, #336]	; (e670 <smp_pairing_req+0x1d0>)
	rsp->io_capability = get_io_capa();
    e51e:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    e522:	781b      	ldrb	r3, [r3, #0]
    e524:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    e528:	2310      	movs	r3, #16
    e52a:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    e52e:	793b      	ldrb	r3, [r7, #4]
    e530:	f003 0303 	and.w	r3, r3, #3
    e534:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    e538:	797b      	ldrb	r3, [r7, #5]
    e53a:	f003 0301 	and.w	r3, r3, #1
    e53e:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    e542:	072b      	lsls	r3, r5, #28
    e544:	d50f      	bpl.n	e566 <smp_pairing_req+0xc6>
    e546:	78bb      	ldrb	r3, [r7, #2]
    e548:	071d      	lsls	r5, r3, #28
    e54a:	d50c      	bpl.n	e566 <smp_pairing_req+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    e54c:	2105      	movs	r1, #5
    e54e:	4630      	mov	r0, r6
    e550:	f015 f80e 	bl	23570 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    e554:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    e558:	f003 0302 	and.w	r3, r3, #2
    e55c:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		rsp->resp_key_dist &= SEND_KEYS_SC;
    e560:	2300      	movs	r3, #0
    e562:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    e566:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    e56a:	0698      	lsls	r0, r3, #26
    e56c:	d506      	bpl.n	e57c <smp_pairing_req+0xdc>
    e56e:	78bb      	ldrb	r3, [r7, #2]
    e570:	0699      	lsls	r1, r3, #26
    e572:	d503      	bpl.n	e57c <smp_pairing_req+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    e574:	2113      	movs	r1, #19
    e576:	4630      	mov	r0, r6
    e578:	f014 fffa 	bl	23570 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    e57c:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    e580:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
	smp->remote_dist = rsp->init_key_dist;
    e584:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    e588:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    e58c:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    e590:	07da      	lsls	r2, r3, #31
    e592:	d506      	bpl.n	e5a2 <smp_pairing_req+0x102>
    e594:	78bb      	ldrb	r3, [r7, #2]
    e596:	07db      	lsls	r3, r3, #31
    e598:	d503      	bpl.n	e5a2 <smp_pairing_req+0x102>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    e59a:	210c      	movs	r1, #12
    e59c:	4630      	mov	r0, r6
    e59e:	f014 ffe7 	bl	23570 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    e5a2:	2103      	movs	r1, #3
    e5a4:	4630      	mov	r0, r6
    e5a6:	f014 ffe3 	bl	23570 <atomic_set_bit>
	smp->method = get_pair_method(smp, req->io_capability);
    e5aa:	7839      	ldrb	r1, [r7, #0]
    e5ac:	4620      	mov	r0, r4
    e5ae:	f7ff fbd5 	bl	dd5c <get_pair_method>
    e5b2:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	if (!update_keys_check(smp)) {
    e5b6:	4620      	mov	r0, r4
    e5b8:	f014 ff90 	bl	234dc <update_keys_check>
    e5bc:	b908      	cbnz	r0, e5c2 <smp_pairing_req+0x122>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    e5be:	2503      	movs	r5, #3
    e5c0:	e777      	b.n	e4b2 <smp_pairing_req+0x12>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e5c2:	2105      	movs	r1, #5
    e5c4:	4630      	mov	r0, r6
    e5c6:	f014 ff80 	bl	234ca <atomic_test_bit>
    e5ca:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    e5ce:	461d      	mov	r5, r3
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e5d0:	bb20      	cbnz	r0, e61c <smp_pairing_req+0x17c>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    e5d2:	b993      	cbnz	r3, e5fa <smp_pairing_req+0x15a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    e5d4:	210e      	movs	r1, #14
    e5d6:	4630      	mov	r0, r6
    e5d8:	f014 ff77 	bl	234ca <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    e5dc:	b968      	cbnz	r0, e5fa <smp_pairing_req+0x15a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    e5de:	4f25      	ldr	r7, [pc, #148]	; (e674 <smp_pairing_req+0x1d4>)
    e5e0:	683b      	ldr	r3, [r7, #0]
    e5e2:	b153      	cbz	r3, e5fa <smp_pairing_req+0x15a>
	    bt_auth && bt_auth->pairing_confirm) {
    e5e4:	695b      	ldr	r3, [r3, #20]
    e5e6:	b143      	cbz	r3, e5fa <smp_pairing_req+0x15a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e5e8:	4630      	mov	r0, r6
    e5ea:	2109      	movs	r1, #9
    e5ec:	f014 ffc0 	bl	23570 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    e5f0:	683b      	ldr	r3, [r7, #0]
    e5f2:	6820      	ldr	r0, [r4, #0]
    e5f4:	695b      	ldr	r3, [r3, #20]
    e5f6:	4798      	blx	r3
		return 0;
    e5f8:	e75b      	b.n	e4b2 <smp_pairing_req+0x12>
	ret = send_pairing_rsp(smp);
    e5fa:	4620      	mov	r0, r4
    e5fc:	f015 f818 	bl	23630 <send_pairing_rsp>
	if (ret) {
    e600:	4605      	mov	r5, r0
    e602:	2800      	cmp	r0, #0
    e604:	f47f af55 	bne.w	e4b2 <smp_pairing_req+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    e608:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e60c:	2103      	movs	r1, #3
    e60e:	f014 ffaf 	bl	23570 <atomic_set_bit>
	return legacy_request_tk(smp);
    e612:	4620      	mov	r0, r4
}
    e614:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return legacy_request_tk(smp);
    e618:	f7ff beb8 	b.w	e38c <legacy_request_tk>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    e61c:	f898 200a 	ldrb.w	r2, [r8, #10]
    e620:	2a04      	cmp	r2, #4
    e622:	d115      	bne.n	e650 <smp_pairing_req+0x1b0>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    e624:	2b00      	cmp	r3, #0
    e626:	d0ca      	beq.n	e5be <smp_pairing_req+0x11e>
	return MIN(req->max_key_size, rsp->max_key_size);
    e628:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
    e62c:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
	     conn->required_sec_level == BT_SECURITY_L4) &&
    e630:	4293      	cmp	r3, r2
    e632:	bf28      	it	cs
    e634:	4613      	movcs	r3, r2
    e636:	2b10      	cmp	r3, #16
    e638:	f47f af3a 	bne.w	e4b0 <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    e63c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e640:	210c      	movs	r1, #12
    e642:	f014 ff95 	bl	23570 <atomic_set_bit>
	return send_pairing_rsp(smp);
    e646:	4620      	mov	r0, r4
}
    e648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
    e64c:	f014 bff0 	b.w	23630 <send_pairing_rsp>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    e650:	2b00      	cmp	r3, #0
    e652:	d1f3      	bne.n	e63c <smp_pairing_req+0x19c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    e654:	210e      	movs	r1, #14
    e656:	4630      	mov	r0, r6
    e658:	f014 ff37 	bl	234ca <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    e65c:	2800      	cmp	r0, #0
    e65e:	d1ed      	bne.n	e63c <smp_pairing_req+0x19c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    e660:	4f04      	ldr	r7, [pc, #16]	; (e674 <smp_pairing_req+0x1d4>)
    e662:	683b      	ldr	r3, [r7, #0]
    e664:	2b00      	cmp	r3, #0
    e666:	d0e9      	beq.n	e63c <smp_pairing_req+0x19c>
	    bt_auth && bt_auth->pairing_confirm) {
    e668:	695b      	ldr	r3, [r3, #20]
    e66a:	2b00      	cmp	r3, #0
    e66c:	d0e6      	beq.n	e63c <smp_pairing_req+0x19c>
    e66e:	e7bb      	b.n	e5e8 <smp_pairing_req+0x148>
    e670:	20003090 	.word	0x20003090
    e674:	20001384 	.word	0x20001384

0000e678 <bt_smp_connected>:
{
    e678:	b510      	push	{r4, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    e67a:	2230      	movs	r2, #48	; 0x30
    e67c:	4604      	mov	r4, r0
    e67e:	2100      	movs	r1, #0
    e680:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
    e684:	f013 f8da 	bl	2183c <memset>
    e688:	4b03      	ldr	r3, [pc, #12]	; (e698 <bt_smp_connected+0x20>)
    e68a:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
	smp_reset(smp);
    e68e:	4620      	mov	r0, r4
}
    e690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    e694:	f015 b94d 	b.w	23932 <smp_reset>
    e698:	0000e8bd 	.word	0x0000e8bd

0000e69c <smp_pairing_complete>:
{
    e69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e6a0:	f8df 8094 	ldr.w	r8, [pc, #148]	; e738 <smp_pairing_complete+0x9c>
    e6a4:	4604      	mov	r4, r0
    e6a6:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
	if (!status) {
    e6aa:	460d      	mov	r5, r1
    e6ac:	b981      	cbnz	r1, e6d0 <smp_pairing_complete+0x34>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    e6ae:	210c      	movs	r1, #12
    e6b0:	4638      	mov	r0, r7
    e6b2:	f014 ff0a 	bl	234ca <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
    e6b6:	f8d8 3000 	ldr.w	r3, [r8]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    e6ba:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
    e6bc:	b11b      	cbz	r3, e6c6 <smp_pairing_complete+0x2a>
    e6be:	699b      	ldr	r3, [r3, #24]
    e6c0:	b10b      	cbz	r3, e6c6 <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    e6c2:	6820      	ldr	r0, [r4, #0]
    e6c4:	4798      	blx	r3
	smp_reset(smp);
    e6c6:	4620      	mov	r0, r4
}
    e6c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	smp_reset(smp);
    e6cc:	f015 b931 	b.w	23932 <smp_reset>
	switch (smp_err) {
    e6d0:	1e4b      	subs	r3, r1, #1
    e6d2:	b2db      	uxtb	r3, r3
    e6d4:	2b0d      	cmp	r3, #13
    e6d6:	bf9c      	itt	ls
    e6d8:	4a16      	ldrls	r2, [pc, #88]	; (e734 <smp_pairing_complete+0x98>)
    e6da:	5cd6      	ldrbls	r6, [r2, r3]
		if (smp->chan.chan.conn->le.keys &&
    e6dc:	6803      	ldr	r3, [r0, #0]
    e6de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	if (!status) {
    e6e2:	bf88      	it	hi
    e6e4:	2608      	movhi	r6, #8
		if (smp->chan.chan.conn->le.keys &&
    e6e6:	b153      	cbz	r3, e6fe <smp_pairing_complete+0x62>
    e6e8:	7b1b      	ldrb	r3, [r3, #12]
    e6ea:	b9db      	cbnz	r3, e724 <smp_pairing_complete+0x88>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
    e6ec:	6823      	ldr	r3, [r4, #0]
    e6ee:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
    e6f2:	f015 fc36 	bl	23f62 <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
    e6f6:	6823      	ldr	r3, [r4, #0]
    e6f8:	2200      	movs	r2, #0
    e6fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    e6fe:	2102      	movs	r1, #2
    e700:	4638      	mov	r0, r7
    e702:	f014 fee2 	bl	234ca <atomic_test_bit>
    e706:	b920      	cbnz	r0, e712 <smp_pairing_complete+0x76>
			bt_conn_security_changed(smp->chan.chan.conn, status,
    e708:	6820      	ldr	r0, [r4, #0]
    e70a:	4632      	mov	r2, r6
    e70c:	4629      	mov	r1, r5
    e70e:	f7fb fb99 	bl	9e44 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    e712:	f8d8 3000 	ldr.w	r3, [r8]
    e716:	2b00      	cmp	r3, #0
    e718:	d0d5      	beq.n	e6c6 <smp_pairing_complete+0x2a>
    e71a:	69db      	ldr	r3, [r3, #28]
    e71c:	2b00      	cmp	r3, #0
    e71e:	d0d2      	beq.n	e6c6 <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    e720:	4631      	mov	r1, r6
    e722:	e7ce      	b.n	e6c2 <smp_pairing_complete+0x26>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    e724:	2102      	movs	r1, #2
    e726:	4638      	mov	r0, r7
    e728:	f014 fecf 	bl	234ca <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
    e72c:	2800      	cmp	r0, #0
    e72e:	d1dd      	bne.n	e6ec <smp_pairing_complete+0x50>
    e730:	e7e5      	b.n	e6fe <smp_pairing_complete+0x62>
    e732:	bf00      	nop
    e734:	000288a8 	.word	0x000288a8
    e738:	20001384 	.word	0x20001384

0000e73c <bt_smp_dhkey_ready>:
{
    e73c:	b538      	push	{r3, r4, r5, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    e73e:	4c1d      	ldr	r4, [pc, #116]	; (e7b4 <bt_smp_dhkey_ready+0x78>)
{
    e740:	4605      	mov	r5, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    e742:	2107      	movs	r1, #7
    e744:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    e748:	f014 fefa 	bl	23540 <atomic_test_and_clear_bit>
    e74c:	b370      	cbz	r0, e7ac <bt_smp_dhkey_ready+0x70>
	if (!dhkey) {
    e74e:	b92d      	cbnz	r5, e75c <bt_smp_dhkey_ready+0x20>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    e750:	210b      	movs	r1, #11
			smp_error(smp, err);
    e752:	4620      	mov	r0, r4
}
    e754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			smp_error(smp, err);
    e758:	f015 b91a 	b.w	23990 <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    e75c:	4629      	mov	r1, r5
    e75e:	2220      	movs	r2, #32
    e760:	f204 104f 	addw	r0, r4, #335	; 0x14f
    e764:	f013 f83f 	bl	217e6 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    e768:	2109      	movs	r1, #9
    e76a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    e76e:	f014 feac 	bl	234ca <atomic_test_bit>
    e772:	b128      	cbz	r0, e780 <bt_smp_dhkey_ready+0x44>
}
    e774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    e778:	480f      	ldr	r0, [pc, #60]	; (e7b8 <bt_smp_dhkey_ready+0x7c>)
    e77a:	2108      	movs	r1, #8
    e77c:	f014 bef8 	b.w	23570 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    e780:	210f      	movs	r1, #15
    e782:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    e786:	f014 fea0 	bl	234ca <atomic_test_bit>
    e78a:	2800      	cmp	r0, #0
    e78c:	d1f2      	bne.n	e774 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    e78e:	2108      	movs	r1, #8
    e790:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    e794:	f014 fe99 	bl	234ca <atomic_test_bit>
    e798:	b140      	cbz	r0, e7ac <bt_smp_dhkey_ready+0x70>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    e79a:	6823      	ldr	r3, [r4, #0]
    e79c:	78db      	ldrb	r3, [r3, #3]
			err = compute_and_send_master_dhcheck(smp);
    e79e:	4620      	mov	r0, r4
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    e7a0:	b92b      	cbnz	r3, e7ae <bt_smp_dhkey_ready+0x72>
			err = compute_and_send_master_dhcheck(smp);
    e7a2:	f014 ff5e 	bl	23662 <compute_and_send_master_dhcheck>
		if (err) {
    e7a6:	4601      	mov	r1, r0
    e7a8:	2800      	cmp	r0, #0
    e7aa:	d1d2      	bne.n	e752 <bt_smp_dhkey_ready+0x16>
}
    e7ac:	bd38      	pop	{r3, r4, r5, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    e7ae:	f014 ffad 	bl	2370c <compute_and_check_and_send_slave_dhcheck>
    e7b2:	e7f8      	b.n	e7a6 <bt_smp_dhkey_ready+0x6a>
    e7b4:	20000ca8 	.word	0x20000ca8
    e7b8:	20000d64 	.word	0x20000d64

0000e7bc <bt_smp_recv>:
{
    e7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    e7be:	898b      	ldrh	r3, [r1, #12]
{
    e7c0:	4604      	mov	r4, r0
    e7c2:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    e7c4:	b95b      	cbnz	r3, e7de <bt_smp_recv+0x22>
    e7c6:	4935      	ldr	r1, [pc, #212]	; (e89c <bt_smp_recv+0xe0>)
    e7c8:	4b35      	ldr	r3, [pc, #212]	; (e8a0 <bt_smp_recv+0xe4>)
		BT_ERR("Too small SMP PDU received");
    e7ca:	4836      	ldr	r0, [pc, #216]	; (e8a4 <bt_smp_recv+0xe8>)
    e7cc:	1ac9      	subs	r1, r1, r3
    e7ce:	08c9      	lsrs	r1, r1, #3
    e7d0:	0189      	lsls	r1, r1, #6
    e7d2:	f041 0101 	orr.w	r1, r1, #1
    e7d6:	f011 fb52 	bl	1fe7e <log_0>
}
    e7da:	2000      	movs	r0, #0
    e7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    e7de:	2101      	movs	r1, #1
    e7e0:	f105 0008 	add.w	r0, r5, #8
    e7e4:	f015 fc59 	bl	2409a <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    e7e8:	2104      	movs	r1, #4
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    e7ea:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    e7ec:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    e7f0:	f014 fe6b 	bl	234ca <atomic_test_bit>
    e7f4:	7831      	ldrb	r1, [r6, #0]
    e7f6:	b150      	cbz	r0, e80e <bt_smp_recv+0x52>
    e7f8:	4b29      	ldr	r3, [pc, #164]	; (e8a0 <bt_smp_recv+0xe4>)
    e7fa:	4a28      	ldr	r2, [pc, #160]	; (e89c <bt_smp_recv+0xe0>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    e7fc:	482a      	ldr	r0, [pc, #168]	; (e8a8 <bt_smp_recv+0xec>)
    e7fe:	1ad2      	subs	r2, r2, r3
    e800:	08d2      	lsrs	r2, r2, #3
    e802:	0192      	lsls	r2, r2, #6
    e804:	f042 0202 	orr.w	r2, r2, #2
    e808:	f011 fb46 	bl	1fe98 <log_1>
		return 0;
    e80c:	e7e5      	b.n	e7da <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    e80e:	290d      	cmp	r1, #13
    e810:	d803      	bhi.n	e81a <bt_smp_recv+0x5e>
    e812:	4f26      	ldr	r7, [pc, #152]	; (e8ac <bt_smp_recv+0xf0>)
    e814:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    e818:	b973      	cbnz	r3, e838 <bt_smp_recv+0x7c>
    e81a:	4b21      	ldr	r3, [pc, #132]	; (e8a0 <bt_smp_recv+0xe4>)
    e81c:	4a1f      	ldr	r2, [pc, #124]	; (e89c <bt_smp_recv+0xe0>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    e81e:	4824      	ldr	r0, [pc, #144]	; (e8b0 <bt_smp_recv+0xf4>)
    e820:	1ad2      	subs	r2, r2, r3
    e822:	08d2      	lsrs	r2, r2, #3
    e824:	0192      	lsls	r2, r2, #6
    e826:	f042 0202 	orr.w	r2, r2, #2
    e82a:	f011 fb35 	bl	1fe98 <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    e82e:	2107      	movs	r1, #7
		smp_error(smp, err);
    e830:	4620      	mov	r0, r4
    e832:	f015 f8ad 	bl	23990 <smp_error>
    e836:	e7d0      	b.n	e7da <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    e838:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e83c:	f014 fe80 	bl	23540 <atomic_test_and_clear_bit>
    e840:	7831      	ldrb	r1, [r6, #0]
    e842:	b970      	cbnz	r0, e862 <bt_smp_recv+0xa6>
    e844:	4b16      	ldr	r3, [pc, #88]	; (e8a0 <bt_smp_recv+0xe4>)
    e846:	4a15      	ldr	r2, [pc, #84]	; (e89c <bt_smp_recv+0xe0>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    e848:	481a      	ldr	r0, [pc, #104]	; (e8b4 <bt_smp_recv+0xf8>)
    e84a:	1ad2      	subs	r2, r2, r3
    e84c:	08d2      	lsrs	r2, r2, #3
    e84e:	0192      	lsls	r2, r2, #6
    e850:	f042 0202 	orr.w	r2, r2, #2
    e854:	f011 fb20 	bl	1fe98 <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    e858:	7833      	ldrb	r3, [r6, #0]
    e85a:	2b05      	cmp	r3, #5
    e85c:	d0bd      	beq.n	e7da <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    e85e:	2108      	movs	r1, #8
    e860:	e7e6      	b.n	e830 <bt_smp_recv+0x74>
	if (buf->len != handlers[hdr->code].expect_len) {
    e862:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    e866:	89a8      	ldrh	r0, [r5, #12]
    e868:	791b      	ldrb	r3, [r3, #4]
    e86a:	4283      	cmp	r3, r0
    e86c:	d00d      	beq.n	e88a <bt_smp_recv+0xce>
    e86e:	4a0c      	ldr	r2, [pc, #48]	; (e8a0 <bt_smp_recv+0xe4>)
    e870:	4b0a      	ldr	r3, [pc, #40]	; (e89c <bt_smp_recv+0xe0>)
    e872:	1a9b      	subs	r3, r3, r2
    e874:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    e876:	019b      	lsls	r3, r3, #6
    e878:	460a      	mov	r2, r1
    e87a:	f043 0301 	orr.w	r3, r3, #1
    e87e:	4601      	mov	r1, r0
    e880:	480d      	ldr	r0, [pc, #52]	; (e8b8 <bt_smp_recv+0xfc>)
    e882:	f011 fb1d 	bl	1fec0 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    e886:	210a      	movs	r1, #10
    e888:	e7d2      	b.n	e830 <bt_smp_recv+0x74>
	err = handlers[hdr->code].func(smp, buf);
    e88a:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    e88e:	4620      	mov	r0, r4
    e890:	4629      	mov	r1, r5
    e892:	4798      	blx	r3
	if (err) {
    e894:	4601      	mov	r1, r0
    e896:	2800      	cmp	r0, #0
    e898:	d09f      	beq.n	e7da <bt_smp_recv+0x1e>
    e89a:	e7c9      	b.n	e830 <bt_smp_recv+0x74>
    e89c:	000250e8 	.word	0x000250e8
    e8a0:	00024fd8 	.word	0x00024fd8
    e8a4:	0002879f 	.word	0x0002879f
    e8a8:	000287ba 	.word	0x000287ba
    e8ac:	000258b4 	.word	0x000258b4
    e8b0:	000287eb 	.word	0x000287eb
    e8b4:	00028805 	.word	0x00028805
    e8b8:	000283f4 	.word	0x000283f4

0000e8bc <smp_timeout>:
    e8bc:	4b0b      	ldr	r3, [pc, #44]	; (e8ec <smp_timeout+0x30>)
    e8be:	490c      	ldr	r1, [pc, #48]	; (e8f0 <smp_timeout+0x34>)
{
    e8c0:	b510      	push	{r4, lr}
    e8c2:	1ac9      	subs	r1, r1, r3
    e8c4:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
    e8c6:	0189      	lsls	r1, r1, #6
{
    e8c8:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    e8ca:	f041 0101 	orr.w	r1, r1, #1
    e8ce:	4809      	ldr	r0, [pc, #36]	; (e8f4 <smp_timeout+0x38>)
    e8d0:	f011 fad5 	bl	1fe7e <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    e8d4:	f5a4 70d4 	sub.w	r0, r4, #424	; 0x1a8
    e8d8:	2108      	movs	r1, #8
    e8da:	f7ff fedf 	bl	e69c <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    e8de:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
    e8e2:	2104      	movs	r1, #4
}
    e8e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    e8e8:	f014 be42 	b.w	23570 <atomic_set_bit>
    e8ec:	00024fd8 	.word	0x00024fd8
    e8f0:	000250e8 	.word	0x000250e8
    e8f4:	00028820 	.word	0x00028820

0000e8f8 <smp_pairing_failed>:
{
    e8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e8fa:	4a15      	ldr	r2, [pc, #84]	; (e950 <smp_pairing_failed+0x58>)
    e8fc:	4b15      	ldr	r3, [pc, #84]	; (e954 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    e8fe:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    e900:	4605      	mov	r5, r0
    e902:	1ad2      	subs	r2, r2, r3
    e904:	08d2      	lsrs	r2, r2, #3
    e906:	f855 7bbc 	ldr.w	r7, [r5], #188
	BT_ERR("reason 0x%x", req->reason);
    e90a:	7831      	ldrb	r1, [r6, #0]
    e90c:	0192      	lsls	r2, r2, #6
{
    e90e:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    e910:	f042 0201 	orr.w	r2, r2, #1
    e914:	4810      	ldr	r0, [pc, #64]	; (e958 <smp_pairing_failed+0x60>)
    e916:	f011 fabf 	bl	1fe98 <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    e91a:	2109      	movs	r1, #9
    e91c:	4628      	mov	r0, r5
    e91e:	f014 fe0f 	bl	23540 <atomic_test_and_clear_bit>
    e922:	b140      	cbz	r0, e936 <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
    e924:	4b0d      	ldr	r3, [pc, #52]	; (e95c <smp_pairing_failed+0x64>)
    e926:	681b      	ldr	r3, [r3, #0]
    e928:	b963      	cbnz	r3, e944 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
    e92a:	4620      	mov	r0, r4
    e92c:	7831      	ldrb	r1, [r6, #0]
    e92e:	f7ff feb5 	bl	e69c <smp_pairing_complete>
}
    e932:	2000      	movs	r0, #0
    e934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    e936:	210a      	movs	r1, #10
    e938:	4628      	mov	r0, r5
    e93a:	f014 fe01 	bl	23540 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    e93e:	2800      	cmp	r0, #0
    e940:	d1f0      	bne.n	e924 <smp_pairing_failed+0x2c>
    e942:	e7f2      	b.n	e92a <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    e944:	691b      	ldr	r3, [r3, #16]
    e946:	2b00      	cmp	r3, #0
    e948:	d0ef      	beq.n	e92a <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
    e94a:	4638      	mov	r0, r7
    e94c:	4798      	blx	r3
    e94e:	e7ec      	b.n	e92a <smp_pairing_failed+0x32>
    e950:	000250e8 	.word	0x000250e8
    e954:	00024fd8 	.word	0x00024fd8
    e958:	0002882c 	.word	0x0002882c
    e95c:	20001384 	.word	0x20001384

0000e960 <smp_master_ident>:
{
    e960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e964:	460b      	mov	r3, r1
    e966:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e968:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
    e96a:	f850 6bbc 	ldr.w	r6, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e96e:	f014 fdac 	bl	234ca <atomic_test_bit>
    e972:	b380      	cbz	r0, e9d6 <smp_master_ident+0x76>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    e974:	f106 0788 	add.w	r7, r6, #136	; 0x88
    e978:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    e97a:	f8d3 8008 	ldr.w	r8, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    e97e:	463a      	mov	r2, r7
    e980:	2004      	movs	r0, #4
    e982:	f015 fada 	bl	23f3a <bt_keys_get_type>
		if (!keys) {
    e986:	4605      	mov	r5, r0
    e988:	b998      	cbnz	r0, e9b2 <smp_master_ident+0x52>
    e98a:	4a25      	ldr	r2, [pc, #148]	; (ea20 <smp_master_ident+0xc0>)
    e98c:	4c25      	ldr	r4, [pc, #148]	; (ea24 <smp_master_ident+0xc4>)
			BT_ERR("Unable to get keys for %s",
    e98e:	4638      	mov	r0, r7
    e990:	1aa4      	subs	r4, r4, r2
    e992:	f7f8 fbc1 	bl	7118 <bt_addr_le_str_real>
    e996:	f7f6 fc87 	bl	52a8 <log_strdup>
    e99a:	08e4      	lsrs	r4, r4, #3
    e99c:	01a4      	lsls	r4, r4, #6
    e99e:	f044 0401 	orr.w	r4, r4, #1
    e9a2:	4601      	mov	r1, r0
    e9a4:	4622      	mov	r2, r4
    e9a6:	4820      	ldr	r0, [pc, #128]	; (ea28 <smp_master_ident+0xc8>)
    e9a8:	f011 fa76 	bl	1fe98 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e9ac:	2008      	movs	r0, #8
}
    e9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    e9b2:	2202      	movs	r2, #2
    e9b4:	4641      	mov	r1, r8
    e9b6:	3018      	adds	r0, #24
    e9b8:	f012 ff15 	bl	217e6 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    e9bc:	2208      	movs	r2, #8
    e9be:	f108 0102 	add.w	r1, r8, #2
    e9c2:	f105 0010 	add.w	r0, r5, #16
    e9c6:	f012 ff0e 	bl	217e6 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    e9ca:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    e9ce:	f023 0301 	bic.w	r3, r3, #1
    e9d2:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    e9d6:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    e9da:	079a      	lsls	r2, r3, #30
    e9dc:	d50b      	bpl.n	e9f6 <smp_master_ident+0x96>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    e9de:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    e9e0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e9e4:	f014 fdc4 	bl	23570 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    e9e8:	78f3      	ldrb	r3, [r6, #3]
    e9ea:	b143      	cbz	r3, e9fe <smp_master_ident+0x9e>
	if (!smp->local_dist && !smp->remote_dist) {
    e9ec:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
    e9f0:	b17d      	cbz	r5, ea12 <smp_master_ident+0xb2>
	return 0;
    e9f2:	2000      	movs	r0, #0
    e9f4:	e7db      	b.n	e9ae <smp_master_ident+0x4e>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    e9f6:	075b      	lsls	r3, r3, #29
    e9f8:	d5f6      	bpl.n	e9e8 <smp_master_ident+0x88>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    e9fa:	210a      	movs	r1, #10
    e9fc:	e7f0      	b.n	e9e0 <smp_master_ident+0x80>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    e9fe:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    ea02:	2b00      	cmp	r3, #0
    ea04:	d1f2      	bne.n	e9ec <smp_master_ident+0x8c>
		err = bt_smp_distribute_keys(smp);
    ea06:	4620      	mov	r0, r4
    ea08:	f7ff fa5a 	bl	dec0 <bt_smp_distribute_keys>
		if (err) {
    ea0c:	2800      	cmp	r0, #0
    ea0e:	d0ed      	beq.n	e9ec <smp_master_ident+0x8c>
    ea10:	e7cd      	b.n	e9ae <smp_master_ident+0x4e>
		smp_pairing_complete(smp, 0);
    ea12:	4620      	mov	r0, r4
    ea14:	4629      	mov	r1, r5
    ea16:	f7ff fe41 	bl	e69c <smp_pairing_complete>
	return 0;
    ea1a:	4628      	mov	r0, r5
    ea1c:	e7c7      	b.n	e9ae <smp_master_ident+0x4e>
    ea1e:	bf00      	nop
    ea20:	00024fd8 	.word	0x00024fd8
    ea24:	000250e8 	.word	0x000250e8
    ea28:	0002873c 	.word	0x0002873c

0000ea2c <smp_pairing_rsp>:
{
    ea2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    ea2e:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    ea30:	78eb      	ldrb	r3, [r5, #3]
    ea32:	3b07      	subs	r3, #7
    ea34:	2b09      	cmp	r3, #9
{
    ea36:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    ea38:	d902      	bls.n	ea40 <smp_pairing_rsp+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    ea3a:	2506      	movs	r5, #6
}
    ea3c:	4628      	mov	r0, r5
    ea3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	smp->local_dist &= rsp->init_key_dist;
    ea40:	792a      	ldrb	r2, [r5, #4]
    ea42:	f890 31a0 	ldrb.w	r3, [r0, #416]	; 0x1a0
	struct bt_conn *conn = smp->chan.chan.conn;
    ea46:	6807      	ldr	r7, [r0, #0]
	smp->local_dist &= rsp->init_key_dist;
    ea48:	4013      	ands	r3, r2
    ea4a:	f880 31a0 	strb.w	r3, [r0, #416]	; 0x1a0
	smp->remote_dist &= rsp->resp_key_dist;
    ea4e:	796a      	ldrb	r2, [r5, #5]
    ea50:	f890 31a1 	ldrb.w	r3, [r0, #417]	; 0x1a1
    ea54:	4013      	ands	r3, r2
    ea56:	f880 31a1 	strb.w	r3, [r0, #417]	; 0x1a1
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    ea5a:	2302      	movs	r3, #2
    ea5c:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    ea60:	2206      	movs	r2, #6
    ea62:	4629      	mov	r1, r5
    ea64:	30c9      	adds	r0, #201	; 0xc9
    ea66:	f012 febe 	bl	217e6 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    ea6a:	78ab      	ldrb	r3, [r5, #2]
    ea6c:	071b      	lsls	r3, r3, #28
    ea6e:	d508      	bpl.n	ea82 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x22>
    ea70:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    ea74:	071e      	lsls	r6, r3, #28
    ea76:	d504      	bpl.n	ea82 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x22>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    ea78:	2105      	movs	r1, #5
    ea7a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    ea7e:	f014 fd77 	bl	23570 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    ea82:	78ab      	ldrb	r3, [r5, #2]
    ea84:	0698      	lsls	r0, r3, #26
    ea86:	d508      	bpl.n	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
    ea88:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    ea8c:	0699      	lsls	r1, r3, #26
    ea8e:	d504      	bpl.n	ea9a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    ea90:	2113      	movs	r1, #19
    ea92:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    ea96:	f014 fd6b 	bl	23570 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    ea9a:	78ab      	ldrb	r3, [r5, #2]
    ea9c:	07da      	lsls	r2, r3, #31
    ea9e:	d508      	bpl.n	eab2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52>
    eaa0:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
    eaa4:	07db      	lsls	r3, r3, #31
    eaa6:	d504      	bpl.n	eab2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    eaa8:	210c      	movs	r1, #12
    eaaa:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    eaae:	f014 fd5f 	bl	23570 <atomic_set_bit>
	smp->method = get_pair_method(smp, rsp->io_capability);
    eab2:	7829      	ldrb	r1, [r5, #0]
    eab4:	4620      	mov	r0, r4
    eab6:	f7ff f951 	bl	dd5c <get_pair_method>
    eaba:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	if (!update_keys_check(smp)) {
    eabe:	4620      	mov	r0, r4
    eac0:	f014 fd0c 	bl	234dc <update_keys_check>
    eac4:	b908      	cbnz	r0, eaca <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6a>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    eac6:	2503      	movs	r5, #3
    eac8:	e7b8      	b.n	ea3c <smp_pairing_rsp+0x10>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    eaca:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
    eace:	2105      	movs	r1, #5
    ead0:	4630      	mov	r0, r6
    ead2:	f014 fcfa 	bl	234ca <atomic_test_bit>
    ead6:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    eada:	461d      	mov	r5, r3
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    eadc:	bb68      	cbnz	r0, eb3a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xda>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    eade:	b993      	cbnz	r3, eb06 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa6>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    eae0:	210e      	movs	r1, #14
    eae2:	4630      	mov	r0, r6
    eae4:	f014 fcf1 	bl	234ca <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    eae8:	b168      	cbz	r0, eb06 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa6>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    eaea:	4f2f      	ldr	r7, [pc, #188]	; (eba8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x148>)
    eaec:	683b      	ldr	r3, [r7, #0]
    eaee:	b153      	cbz	r3, eb06 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa6>
	    bt_auth && bt_auth->pairing_confirm) {
    eaf0:	695b      	ldr	r3, [r3, #20]
    eaf2:	b143      	cbz	r3, eb06 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa6>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    eaf4:	4630      	mov	r0, r6
    eaf6:	2109      	movs	r1, #9
    eaf8:	f014 fd3a 	bl	23570 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    eafc:	683b      	ldr	r3, [r7, #0]
    eafe:	6820      	ldr	r0, [r4, #0]
    eb00:	695b      	ldr	r3, [r3, #20]
    eb02:	4798      	blx	r3
		return 0;
    eb04:	e79a      	b.n	ea3c <smp_pairing_rsp+0x10>
	ret = legacy_request_tk(smp);
    eb06:	4620      	mov	r0, r4
    eb08:	f7ff fc40 	bl	e38c <legacy_request_tk>
	if (ret) {
    eb0c:	4605      	mov	r5, r0
    eb0e:	2800      	cmp	r0, #0
    eb10:	d194      	bne.n	ea3c <smp_pairing_rsp+0x10>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    eb12:	2109      	movs	r1, #9
    eb14:	4630      	mov	r0, r6
    eb16:	f014 fcd8 	bl	234ca <atomic_test_bit>
    eb1a:	b948      	cbnz	r0, eb30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    eb1c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    eb20:	2103      	movs	r1, #3
    eb22:	f014 fd25 	bl	23570 <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
    eb26:	4620      	mov	r0, r4
}
    eb28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return legacy_send_pairing_confirm(smp);
    eb2c:	f015 b816 	b.w	23b5c <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    eb30:	4629      	mov	r1, r5
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    eb32:	4630      	mov	r0, r6
    eb34:	f014 fd1c 	bl	23570 <atomic_set_bit>
		return 0;
    eb38:	e780      	b.n	ea3c <smp_pairing_rsp+0x10>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    eb3a:	7aba      	ldrb	r2, [r7, #10]
    eb3c:	2a04      	cmp	r2, #4
    eb3e:	d10b      	bne.n	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    eb40:	2b00      	cmp	r3, #0
    eb42:	d0c0      	beq.n	eac6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x66>
	return MIN(req->max_key_size, rsp->max_key_size);
    eb44:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
    eb48:	f894 10c5 	ldrb.w	r1, [r4, #197]	; 0xc5
	     conn->required_sec_level == BT_SECURITY_L4) &&
    eb4c:	428a      	cmp	r2, r1
    eb4e:	bf28      	it	cs
    eb50:	460a      	movcs	r2, r1
    eb52:	2a10      	cmp	r2, #16
    eb54:	f47f af71 	bne.w	ea3a <smp_pairing_rsp+0xe>
	smp->local_dist &= SEND_KEYS_SC;
    eb58:	2200      	movs	r2, #0
    eb5a:	f884 21a0 	strb.w	r2, [r4, #416]	; 0x1a0
	smp->remote_dist &= RECV_KEYS_SC;
    eb5e:	f894 21a1 	ldrb.w	r2, [r4, #417]	; 0x1a1
    eb62:	f002 0202 	and.w	r2, r2, #2
    eb66:	f884 21a1 	strb.w	r2, [r4, #417]	; 0x1a1
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    eb6a:	b953      	cbnz	r3, eb82 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x122>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    eb6c:	210e      	movs	r1, #14
    eb6e:	4630      	mov	r0, r6
    eb70:	f014 fcab 	bl	234ca <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    eb74:	b128      	cbz	r0, eb82 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x122>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    eb76:	4f0c      	ldr	r7, [pc, #48]	; (eba8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x148>)
    eb78:	683b      	ldr	r3, [r7, #0]
    eb7a:	b113      	cbz	r3, eb82 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x122>
	    bt_auth && bt_auth->pairing_confirm) {
    eb7c:	695b      	ldr	r3, [r3, #20]
    eb7e:	2b00      	cmp	r3, #0
    eb80:	d1b8      	bne.n	eaf4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x94>
	if (!sc_public_key) {
    eb82:	4b0a      	ldr	r3, [pc, #40]	; (ebac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14c>)
    eb84:	681d      	ldr	r5, [r3, #0]
    eb86:	b90d      	cbnz	r5, eb8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12c>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    eb88:	2106      	movs	r1, #6
    eb8a:	e7d2      	b.n	eb32 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd2>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    eb8c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    eb90:	210c      	movs	r1, #12
    eb92:	f014 fced 	bl	23570 <atomic_set_bit>
	atomic_clear_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    eb96:	210b      	movs	r1, #11
    eb98:	f014 fb8c 	bl	232b4 <atomic_clear_bit>
	return sc_send_public_key(smp);
    eb9c:	4620      	mov	r0, r4
}
    eb9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return sc_send_public_key(smp);
    eba2:	f7ff b92b 	b.w	ddfc <sc_send_public_key>
    eba6:	bf00      	nop
    eba8:	20001384 	.word	0x20001384
    ebac:	20001440 	.word	0x20001440

0000ebb0 <smp_public_key_slave.part.0>:
static uint8_t smp_public_key_slave(struct bt_smp *smp)
    ebb0:	b538      	push	{r3, r4, r5, lr}
    ebb2:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
    ebb6:	4605      	mov	r5, r0
    ebb8:	2b05      	cmp	r3, #5
    ebba:	d835      	bhi.n	ec28 <smp_public_key_slave.part.0+0x78>
    ebbc:	e8df f003 	tbb	[pc, r3]
    ebc0:	030c1603 	.word	0x030c1603
    ebc4:	3234      	.short	0x3234
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    ebc6:	30b8      	adds	r0, #184	; 0xb8
    ebc8:	2104      	movs	r1, #4
    ebca:	f014 fcd1 	bl	23570 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    ebce:	4628      	mov	r0, r5
    ebd0:	f7ff f936 	bl	de40 <smp_send_pairing_confirm>
		if (err) {
    ebd4:	b1c0      	cbz	r0, ec08 <smp_public_key_slave.part.0+0x58>
}
    ebd6:	bd38      	pop	{r3, r4, r5, pc}
		err = display_passkey(smp);
    ebd8:	f7ff fa18 	bl	e00c <display_passkey>
		if (err) {
    ebdc:	2800      	cmp	r0, #0
    ebde:	d1fa      	bne.n	ebd6 <smp_public_key_slave.part.0+0x26>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ebe0:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    ebe2:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
    ebe6:	f014 fcc3 	bl	23570 <atomic_set_bit>
		break;
    ebea:	e00d      	b.n	ec08 <smp_public_key_slave.part.0+0x58>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ebec:	2103      	movs	r1, #3
    ebee:	30b8      	adds	r0, #184	; 0xb8
    ebf0:	f014 fcbe 	bl	23570 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ebf4:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    ebf8:	2109      	movs	r1, #9
    ebfa:	f014 fcb9 	bl	23570 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    ebfe:	4b0b      	ldr	r3, [pc, #44]	; (ec2c <smp_public_key_slave.part.0+0x7c>)
    ec00:	6828      	ldr	r0, [r5, #0]
    ec02:	681b      	ldr	r3, [r3, #0]
    ec04:	685b      	ldr	r3, [r3, #4]
    ec06:	4798      	blx	r3
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    ec08:	4909      	ldr	r1, [pc, #36]	; (ec30 <smp_public_key_slave.part.0+0x80>)
    ec0a:	f205 100f 	addw	r0, r5, #271	; 0x10f
    ec0e:	f7fa ffb1 	bl	9b74 <bt_dh_key_gen>
    ec12:	4604      	mov	r4, r0
    ec14:	b940      	cbnz	r0, ec28 <smp_public_key_slave.part.0+0x78>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    ec16:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    ec1a:	2107      	movs	r1, #7
    ec1c:	f014 fca8 	bl	23570 <atomic_set_bit>
	return 0;
    ec20:	4620      	mov	r0, r4
    ec22:	e7d8      	b.n	ebd6 <smp_public_key_slave.part.0+0x26>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    ec24:	2104      	movs	r1, #4
    ec26:	e7dc      	b.n	ebe2 <smp_public_key_slave.part.0+0x32>
		return BT_SMP_ERR_UNSPECIFIED;
    ec28:	2008      	movs	r0, #8
    ec2a:	e7d4      	b.n	ebd6 <smp_public_key_slave.part.0+0x26>
    ec2c:	20001384 	.word	0x20001384
    ec30:	0000e73d 	.word	0x0000e73d

0000ec34 <smp_public_key>:
{
    ec34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    ec36:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    ec38:	f200 140f 	addw	r4, r0, #271	; 0x10f
{
    ec3c:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
    ec3e:	2220      	movs	r2, #32
    ec40:	4631      	mov	r1, r6
    ec42:	4620      	mov	r0, r4
    ec44:	f012 fdcf 	bl	217e6 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    ec48:	2220      	movs	r2, #32
    ec4a:	18b1      	adds	r1, r6, r2
    ec4c:	f205 102f 	addw	r0, r5, #303	; 0x12f
    ec50:	f012 fdc9 	bl	217e6 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    ec54:	494e      	ldr	r1, [pc, #312]	; (ed90 <smp_public_key+0x15c>)
    ec56:	2240      	movs	r2, #64	; 0x40
    ec58:	4620      	mov	r0, r4
    ec5a:	f012 fdb4 	bl	217c6 <memcmp>
    ec5e:	b148      	cbz	r0, ec74 <smp_public_key+0x40>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    ec60:	682b      	ldr	r3, [r5, #0]
    ec62:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ec64:	b373      	cbz	r3, ecc4 <smp_public_key+0x90>
	if (!sc_public_key) {
    ec66:	4b4b      	ldr	r3, [pc, #300]	; (ed94 <smp_public_key+0x160>)
    ec68:	681c      	ldr	r4, [r3, #0]
    ec6a:	2c00      	cmp	r4, #0
    ec6c:	f040 8084 	bne.w	ed78 <smp_public_key+0x144>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    ec70:	2106      	movs	r1, #6
    ec72:	e03c      	b.n	ecee <smp_public_key+0xba>
    ec74:	4b48      	ldr	r3, [pc, #288]	; (ed98 <smp_public_key+0x164>)
    ec76:	4949      	ldr	r1, [pc, #292]	; (ed9c <smp_public_key+0x168>)
		BT_INFO("Remote is using Debug Public key");
    ec78:	4849      	ldr	r0, [pc, #292]	; (eda0 <smp_public_key+0x16c>)
    ec7a:	1ac9      	subs	r1, r1, r3
    ec7c:	08c9      	lsrs	r1, r1, #3
    ec7e:	0189      	lsls	r1, r1, #6
    ec80:	f041 0103 	orr.w	r1, r1, #3
    ec84:	f011 f8fb 	bl	1fe7e <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    ec88:	210d      	movs	r1, #13
    ec8a:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    ec8e:	f014 fc6f 	bl	23570 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    ec92:	682e      	ldr	r6, [r5, #0]
	if (!conn->le.keys) {
    ec94:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    ec98:	b933      	cbnz	r3, eca8 <smp_public_key+0x74>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    ec9a:	7a30      	ldrb	r0, [r6, #8]
    ec9c:	f106 0188 	add.w	r1, r6, #136	; 0x88
    eca0:	f000 fbac 	bl	f3fc <bt_keys_get_addr>
    eca4:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
	if (!conn->le.keys ||
    eca8:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    ecac:	2b00      	cmp	r3, #0
    ecae:	d0d7      	beq.n	ec60 <smp_public_key+0x2c>
    ecb0:	89da      	ldrh	r2, [r3, #14]
    ecb2:	f002 0224 	and.w	r2, r2, #36	; 0x24
    ecb6:	2a00      	cmp	r2, #0
    ecb8:	d0d2      	beq.n	ec60 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    ecba:	7b5b      	ldrb	r3, [r3, #13]
    ecbc:	079b      	lsls	r3, r3, #30
    ecbe:	d5cf      	bpl.n	ec60 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    ecc0:	2003      	movs	r0, #3
    ecc2:	e028      	b.n	ed16 <smp_public_key+0xe2>
		switch (smp->method) {
    ecc4:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
    ecc8:	2b05      	cmp	r3, #5
    ecca:	d838      	bhi.n	ed3e <smp_public_key+0x10a>
    eccc:	e8df f003 	tbb	[pc, r3]
    ecd0:	03152503 	.word	0x03152503
    ecd4:	3037      	.short	0x3037
			atomic_set_bit(&smp->allowed_cmds,
    ecd6:	2103      	movs	r1, #3
    ecd8:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
    ecdc:	f014 fc48 	bl	23570 <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    ece0:	4620      	mov	r0, r4
    ece2:	4930      	ldr	r1, [pc, #192]	; (eda4 <smp_public_key+0x170>)
    ece4:	f7fa ff46 	bl	9b74 <bt_dh_key_gen>
    ece8:	4604      	mov	r4, r0
    ecea:	bb40      	cbnz	r0, ed3e <smp_public_key+0x10a>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    ecec:	2107      	movs	r1, #7
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    ecee:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    ecf2:	f014 fc3d 	bl	23570 <atomic_set_bit>
		return 0;
    ecf6:	4620      	mov	r0, r4
    ecf8:	e00d      	b.n	ed16 <smp_public_key+0xe2>
			err = display_passkey(smp);
    ecfa:	4628      	mov	r0, r5
    ecfc:	f7ff f986 	bl	e00c <display_passkey>
			if (err) {
    ed00:	b948      	cbnz	r0, ed16 <smp_public_key+0xe2>
			atomic_set_bit(&smp->allowed_cmds,
    ed02:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
    ed06:	2103      	movs	r1, #3
    ed08:	f014 fc32 	bl	23570 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
    ed0c:	4628      	mov	r0, r5
    ed0e:	f7ff f897 	bl	de40 <smp_send_pairing_confirm>
			if (err) {
    ed12:	2800      	cmp	r0, #0
    ed14:	d0e4      	beq.n	ece0 <smp_public_key+0xac>
}
    ed16:	b003      	add	sp, #12
    ed18:	bdf0      	pop	{r4, r5, r6, r7, pc}
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ed1a:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    ed1e:	2109      	movs	r1, #9
    ed20:	f014 fc26 	bl	23570 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
    ed24:	4b20      	ldr	r3, [pc, #128]	; (eda8 <smp_public_key+0x174>)
    ed26:	6828      	ldr	r0, [r5, #0]
    ed28:	681b      	ldr	r3, [r3, #0]
    ed2a:	685b      	ldr	r3, [r3, #4]
    ed2c:	4798      	blx	r3
			break;
    ed2e:	e7d7      	b.n	ece0 <smp_public_key+0xac>
			if (bt_rand(smp->prnd, 16)) {
    ed30:	2110      	movs	r1, #16
    ed32:	f105 00df 	add.w	r0, r5, #223	; 0xdf
    ed36:	f003 fe6d 	bl	12a14 <bt_rand>
    ed3a:	4606      	mov	r6, r0
    ed3c:	b108      	cbz	r0, ed42 <smp_public_key+0x10e>
		switch (smp->method) {
    ed3e:	2008      	movs	r0, #8
    ed40:	e7e9      	b.n	ed16 <smp_public_key+0xe2>
			if (bt_auth && bt_auth->oob_data_request) {
    ed42:	4f19      	ldr	r7, [pc, #100]	; (eda8 <smp_public_key+0x174>)
    ed44:	683b      	ldr	r3, [r7, #0]
    ed46:	b303      	cbz	r3, ed8a <smp_public_key+0x156>
    ed48:	68db      	ldr	r3, [r3, #12]
    ed4a:	b1f3      	cbz	r3, ed8a <smp_public_key+0x156>
				struct bt_conn_oob_info info = {
    ed4c:	4b17      	ldr	r3, [pc, #92]	; (edac <smp_public_key+0x178>)
				le_sc_oob_config_set(smp, &info);
    ed4e:	f10d 0105 	add.w	r1, sp, #5
				struct bt_conn_oob_info info = {
    ed52:	881b      	ldrh	r3, [r3, #0]
    ed54:	f8ad 3004 	strh.w	r3, [sp, #4]
				le_sc_oob_config_set(smp, &info);
    ed58:	4628      	mov	r0, r5
    ed5a:	f014 faf0 	bl	2333e <le_sc_oob_config_set.isra.0>
				atomic_set_bit(smp->flags,
    ed5e:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
				smp->oobd_remote = NULL;
    ed62:	e9c5 6666 	strd	r6, r6, [r5, #408]	; 0x198
				atomic_set_bit(smp->flags,
    ed66:	210b      	movs	r1, #11
    ed68:	f014 fc02 	bl	23570 <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
    ed6c:	683b      	ldr	r3, [r7, #0]
    ed6e:	6828      	ldr	r0, [r5, #0]
    ed70:	68db      	ldr	r3, [r3, #12]
    ed72:	a901      	add	r1, sp, #4
    ed74:	4798      	blx	r3
			break;
    ed76:	e7b3      	b.n	ece0 <smp_public_key+0xac>
	err = sc_send_public_key(smp);
    ed78:	4628      	mov	r0, r5
    ed7a:	f7ff f83f 	bl	ddfc <sc_send_public_key>
	if (err) {
    ed7e:	2800      	cmp	r0, #0
    ed80:	d1c9      	bne.n	ed16 <smp_public_key+0xe2>
    ed82:	4628      	mov	r0, r5
    ed84:	f7ff ff14 	bl	ebb0 <smp_public_key_slave.part.0>
    ed88:	e7c5      	b.n	ed16 <smp_public_key+0xe2>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
    ed8a:	2002      	movs	r0, #2
    ed8c:	e7c3      	b.n	ed16 <smp_public_key+0xe2>
    ed8e:	bf00      	nop
    ed90:	000288f8 	.word	0x000288f8
    ed94:	20001440 	.word	0x20001440
    ed98:	00024fd8 	.word	0x00024fd8
    ed9c:	000250e8 	.word	0x000250e8
    eda0:	00028838 	.word	0x00028838
    eda4:	0000e73d 	.word	0x0000e73d
    eda8:	20001384 	.word	0x20001384
    edac:	00025239 	.word	0x00025239

0000edb0 <smp_ident_addr_info>:
{
    edb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    edb4:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    edb6:	6804      	ldr	r4, [r0, #0]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    edb8:	7833      	ldrb	r3, [r6, #0]
{
    edba:	4605      	mov	r5, r0
    edbc:	b31b      	cbz	r3, ee06 <smp_ident_addr_info+0x56>
	if (!bt_addr_le_is_identity(&req->addr)) {
    edbe:	79b3      	ldrb	r3, [r6, #6]
    edc0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    edc4:	2bc0      	cmp	r3, #192	; 0xc0
    edc6:	d01e      	beq.n	ee06 <smp_ident_addr_info+0x56>
    edc8:	4b4a      	ldr	r3, [pc, #296]	; (eef4 <smp_ident_addr_info+0x144>)
    edca:	4d4b      	ldr	r5, [pc, #300]	; (eef8 <smp_ident_addr_info+0x148>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    edcc:	4630      	mov	r0, r6
    edce:	1aed      	subs	r5, r5, r3
    edd0:	f7f8 f9a2 	bl	7118 <bt_addr_le_str_real>
    edd4:	f7f6 fa68 	bl	52a8 <log_strdup>
    edd8:	08ed      	lsrs	r5, r5, #3
    edda:	01ad      	lsls	r5, r5, #6
    eddc:	f045 0501 	orr.w	r5, r5, #1
    ede0:	4601      	mov	r1, r0
    ede2:	462a      	mov	r2, r5
    ede4:	4845      	ldr	r0, [pc, #276]	; (eefc <smp_ident_addr_info+0x14c>)
    ede6:	f011 f857 	bl	1fe98 <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    edea:	f104 0088 	add.w	r0, r4, #136	; 0x88
    edee:	f7f8 f993 	bl	7118 <bt_addr_le_str_real>
    edf2:	f7f6 fa59 	bl	52a8 <log_strdup>
    edf6:	462a      	mov	r2, r5
    edf8:	4601      	mov	r1, r0
    edfa:	4841      	ldr	r0, [pc, #260]	; (ef00 <smp_ident_addr_info+0x150>)
    edfc:	f011 f84c 	bl	1fe98 <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
    ee00:	200a      	movs	r0, #10
}
    ee02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ee06:	210c      	movs	r1, #12
    ee08:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    ee0c:	f014 fb5d 	bl	234ca <atomic_test_bit>
    ee10:	2800      	cmp	r0, #0
    ee12:	d048      	beq.n	eea6 <smp_ident_addr_info+0xf6>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    ee14:	f104 0788 	add.w	r7, r4, #136	; 0x88
    ee18:	7a21      	ldrb	r1, [r4, #8]
    ee1a:	463a      	mov	r2, r7
    ee1c:	2002      	movs	r0, #2
    ee1e:	f015 f88c 	bl	23f3a <bt_keys_get_type>
		if (!keys) {
    ee22:	4680      	mov	r8, r0
    ee24:	b990      	cbnz	r0, ee4c <smp_ident_addr_info+0x9c>
    ee26:	4a33      	ldr	r2, [pc, #204]	; (eef4 <smp_ident_addr_info+0x144>)
    ee28:	4c33      	ldr	r4, [pc, #204]	; (eef8 <smp_ident_addr_info+0x148>)
			BT_ERR("Unable to get keys for %s",
    ee2a:	4638      	mov	r0, r7
    ee2c:	1aa4      	subs	r4, r4, r2
    ee2e:	f7f8 f973 	bl	7118 <bt_addr_le_str_real>
    ee32:	f7f6 fa39 	bl	52a8 <log_strdup>
    ee36:	08e4      	lsrs	r4, r4, #3
    ee38:	01a4      	lsls	r4, r4, #6
    ee3a:	f044 0401 	orr.w	r4, r4, #1
    ee3e:	4601      	mov	r1, r0
    ee40:	4622      	mov	r2, r4
    ee42:	4830      	ldr	r0, [pc, #192]	; (ef04 <smp_ident_addr_info+0x154>)
    ee44:	f011 f828 	bl	1fe98 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    ee48:	2008      	movs	r0, #8
    ee4a:	e7da      	b.n	ee02 <smp_ident_addr_info+0x52>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    ee4c:	78e3      	ldrb	r3, [r4, #3]
    ee4e:	2b00      	cmp	r3, #0
    ee50:	d13d      	bne.n	eece <smp_ident_addr_info+0x11e>
			dst = &conn->le.resp_addr;
    ee52:	f104 0196 	add.w	r1, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
    ee56:	780b      	ldrb	r3, [r1, #0]
    ee58:	2b01      	cmp	r3, #1
    ee5a:	d121      	bne.n	eea0 <smp_ident_addr_info+0xf0>
		if (bt_addr_le_is_rpa(dst)) {
    ee5c:	798b      	ldrb	r3, [r1, #6]
    ee5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ee62:	2b40      	cmp	r3, #64	; 0x40
    ee64:	d11c      	bne.n	eea0 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    ee66:	2206      	movs	r2, #6
    ee68:	3101      	adds	r1, #1
    ee6a:	f108 003a 	add.w	r0, r8, #58	; 0x3a
    ee6e:	f012 fcba 	bl	217e6 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    ee72:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    ee76:	b19b      	cbz	r3, eea0 <smp_ident_addr_info+0xf0>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    ee78:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    ee7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ee80:	2bc0      	cmp	r3, #192	; 0xc0
    ee82:	d00d      	beq.n	eea0 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    ee84:	2207      	movs	r2, #7
    ee86:	4631      	mov	r1, r6
    ee88:	f108 0001 	add.w	r0, r8, #1
    ee8c:	f012 fcab 	bl	217e6 <memcpy>
    ee90:	2207      	movs	r2, #7
    ee92:	4631      	mov	r1, r6
    ee94:	4638      	mov	r0, r7
    ee96:	f012 fca6 	bl	217e6 <memcpy>
				bt_conn_identity_resolved(conn);
    ee9a:	4620      	mov	r0, r4
    ee9c:	f7fa ffb8 	bl	9e10 <bt_conn_identity_resolved>
		bt_id_add(keys);
    eea0:	4640      	mov	r0, r8
    eea2:	f7f9 fd4b 	bl	893c <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    eea6:	f895 31a1 	ldrb.w	r3, [r5, #417]	; 0x1a1
    eeaa:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    eeae:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    eeb0:	f885 21a1 	strb.w	r2, [r5, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    eeb4:	d504      	bpl.n	eec0 <smp_ident_addr_info+0x110>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    eeb6:	210a      	movs	r1, #10
    eeb8:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
    eebc:	f014 fb58 	bl	23570 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    eec0:	78e3      	ldrb	r3, [r4, #3]
    eec2:	b13b      	cbz	r3, eed4 <smp_ident_addr_info+0x124>
	if (!smp->local_dist && !smp->remote_dist) {
    eec4:	f8b5 41a0 	ldrh.w	r4, [r5, #416]	; 0x1a0
    eec8:	b174      	cbz	r4, eee8 <smp_ident_addr_info+0x138>
	return 0;
    eeca:	2000      	movs	r0, #0
    eecc:	e799      	b.n	ee02 <smp_ident_addr_info+0x52>
			dst = &conn->le.init_addr;
    eece:	f104 018f 	add.w	r1, r4, #143	; 0x8f
    eed2:	e7c0      	b.n	ee56 <smp_ident_addr_info+0xa6>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    eed4:	f895 31a1 	ldrb.w	r3, [r5, #417]	; 0x1a1
    eed8:	2b00      	cmp	r3, #0
    eeda:	d1f3      	bne.n	eec4 <smp_ident_addr_info+0x114>
		err = bt_smp_distribute_keys(smp);
    eedc:	4628      	mov	r0, r5
    eede:	f7fe ffef 	bl	dec0 <bt_smp_distribute_keys>
		if (err) {
    eee2:	2800      	cmp	r0, #0
    eee4:	d0ee      	beq.n	eec4 <smp_ident_addr_info+0x114>
    eee6:	e78c      	b.n	ee02 <smp_ident_addr_info+0x52>
		smp_pairing_complete(smp, 0);
    eee8:	4628      	mov	r0, r5
    eeea:	4621      	mov	r1, r4
    eeec:	f7ff fbd6 	bl	e69c <smp_pairing_complete>
	return 0;
    eef0:	4620      	mov	r0, r4
    eef2:	e786      	b.n	ee02 <smp_ident_addr_info+0x52>
    eef4:	00024fd8 	.word	0x00024fd8
    eef8:	000250e8 	.word	0x000250e8
    eefc:	00028859 	.word	0x00028859
    ef00:	00028690 	.word	0x00028690
    ef04:	0002873c 	.word	0x0002873c

0000ef08 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    ef08:	4b21      	ldr	r3, [pc, #132]	; (ef90 <bt_smp_pkey_ready+0x88>)
{
    ef0a:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    ef0c:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    ef0e:	b958      	cbnz	r0, ef28 <bt_smp_pkey_ready+0x20>
    ef10:	4920      	ldr	r1, [pc, #128]	; (ef94 <bt_smp_pkey_ready+0x8c>)
    ef12:	4b21      	ldr	r3, [pc, #132]	; (ef98 <bt_smp_pkey_ready+0x90>)
		BT_WARN("Public key not available");
    ef14:	4821      	ldr	r0, [pc, #132]	; (ef9c <bt_smp_pkey_ready+0x94>)
    ef16:	1ac9      	subs	r1, r1, r3
    ef18:	08c9      	lsrs	r1, r1, #3
    ef1a:	0189      	lsls	r1, r1, #6
}
    ef1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
    ef20:	f041 0102 	orr.w	r1, r1, #2
    ef24:	f010 bfab 	b.w	1fe7e <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ef28:	4c1d      	ldr	r4, [pc, #116]	; (efa0 <bt_smp_pkey_ready+0x98>)
	z_impl_k_sem_give(sem);
    ef2a:	481e      	ldr	r0, [pc, #120]	; (efa4 <bt_smp_pkey_ready+0x9c>)
    ef2c:	f00f ff2e 	bl	1ed8c <z_impl_k_sem_give>
    ef30:	f3bf 8f5b 	dmb	ish
    ef34:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    ef38:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    ef3c:	065b      	lsls	r3, r3, #25
    ef3e:	d517      	bpl.n	ef70 <bt_smp_pkey_ready+0x68>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    ef40:	6823      	ldr	r3, [r4, #0]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ef42:	78db      	ldrb	r3, [r3, #3]
			err = sc_send_public_key(smp);
    ef44:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ef46:	b9a3      	cbnz	r3, ef72 <bt_smp_pkey_ready+0x6a>
			err = sc_send_public_key(smp);
    ef48:	f7fe ff58 	bl	ddfc <sc_send_public_key>
			if (err) {
    ef4c:	4601      	mov	r1, r0
    ef4e:	b110      	cbz	r0, ef56 <bt_smp_pkey_ready+0x4e>
				smp_error(smp, err);
    ef50:	4620      	mov	r0, r4
    ef52:	f014 fd1d 	bl	23990 <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ef56:	f3bf 8f5b 	dmb	ish
    ef5a:	4b13      	ldr	r3, [pc, #76]	; (efa8 <bt_smp_pkey_ready+0xa0>)
    ef5c:	e853 2f00 	ldrex	r2, [r3]
    ef60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    ef64:	e843 2100 	strex	r1, r2, [r3]
    ef68:	2900      	cmp	r1, #0
    ef6a:	d1f7      	bne.n	ef5c <bt_smp_pkey_ready+0x54>
    ef6c:	f3bf 8f5b 	dmb	ish
}
    ef70:	bd10      	pop	{r4, pc}
	err = sc_send_public_key(smp);
    ef72:	f7fe ff43 	bl	ddfc <sc_send_public_key>
	if (err) {
    ef76:	4601      	mov	r1, r0
    ef78:	b928      	cbnz	r0, ef86 <bt_smp_pkey_ready+0x7e>
    ef7a:	4620      	mov	r0, r4
    ef7c:	f7ff fe18 	bl	ebb0 <smp_public_key_slave.part.0>
		if (err) {
    ef80:	4601      	mov	r1, r0
    ef82:	2800      	cmp	r0, #0
    ef84:	d0f4      	beq.n	ef70 <bt_smp_pkey_ready+0x68>
}
    ef86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    ef8a:	4805      	ldr	r0, [pc, #20]	; (efa0 <bt_smp_pkey_ready+0x98>)
    ef8c:	f014 bd00 	b.w	23990 <smp_error>
    ef90:	20001440 	.word	0x20001440
    ef94:	000250e8 	.word	0x000250e8
    ef98:	00024fd8 	.word	0x00024fd8
    ef9c:	0002886d 	.word	0x0002886d
    efa0:	20000ca8 	.word	0x20000ca8
    efa4:	20000784 	.word	0x20000784
    efa8:	20000d60 	.word	0x20000d60

0000efac <smp_pairing_random>:
{
    efac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    efb0:	4606      	mov	r6, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    efb2:	f100 08ef 	add.w	r8, r0, #239	; 0xef
    efb6:	6889      	ldr	r1, [r1, #8]
{
    efb8:	b08d      	sub	sp, #52	; 0x34
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    efba:	2210      	movs	r2, #16
    efbc:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    efbe:	f106 07bc 	add.w	r7, r6, #188	; 0xbc
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    efc2:	f012 fc10 	bl	217e6 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    efc6:	2105      	movs	r1, #5
    efc8:	4638      	mov	r0, r7
    efca:	f014 fa7e 	bl	234ca <atomic_test_bit>
    efce:	f8d6 9000 	ldr.w	r9, [r6]
    efd2:	2800      	cmp	r0, #0
    efd4:	d17e      	bne.n	f0d4 <smp_pairing_random+0x128>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    efd6:	f109 0396 	add.w	r3, r9, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    efda:	f106 0aff 	add.w	sl, r6, #255	; 0xff
    efde:	ad08      	add	r5, sp, #32
    efe0:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    efe2:	f109 038f 	add.w	r3, r9, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    efe6:	9300      	str	r3, [sp, #0]
    efe8:	9502      	str	r5, [sp, #8]
    efea:	f106 03c8 	add.w	r3, r6, #200	; 0xc8
    efee:	f106 02c1 	add.w	r2, r6, #193	; 0xc1
    eff2:	4641      	mov	r1, r8
    eff4:	4650      	mov	r0, sl
    eff6:	f014 fd56 	bl	23aa6 <smp_c1>
	if (err) {
    effa:	b108      	cbz	r0, f000 <smp_pairing_random+0x54>
				return BT_SMP_ERR_UNSPECIFIED;
    effc:	2408      	movs	r4, #8
    effe:	e065      	b.n	f0cc <smp_pairing_random+0x120>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    f000:	2210      	movs	r2, #16
    f002:	4629      	mov	r1, r5
    f004:	f106 00cf 	add.w	r0, r6, #207	; 0xcf
    f008:	f012 fbdd 	bl	217c6 <memcmp>
    f00c:	2800      	cmp	r0, #0
    f00e:	d15c      	bne.n	f0ca <smp_pairing_random+0x11e>
	    conn->role == BT_HCI_ROLE_MASTER) {
    f010:	f899 4003 	ldrb.w	r4, [r9, #3]
    f014:	f106 0bdf 	add.w	fp, r6, #223	; 0xdf
	memcpy(out, r2, 8);
    f018:	2208      	movs	r2, #8
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f01a:	2c00      	cmp	r4, #0
    f01c:	d138      	bne.n	f090 <smp_pairing_random+0xe4>
	memcpy(out, r2, 8);
    f01e:	4659      	mov	r1, fp
    f020:	4628      	mov	r0, r5
    f022:	f012 fbe0 	bl	217e6 <memcpy>
	memcpy(out + 8, r1, 8);
    f026:	2208      	movs	r2, #8
    f028:	4641      	mov	r1, r8
    f02a:	a80a      	add	r0, sp, #40	; 0x28
    f02c:	f012 fbdb 	bl	217e6 <memcpy>
	return bt_encrypt_le(k, out, out);
    f030:	462a      	mov	r2, r5
    f032:	4629      	mov	r1, r5
    f034:	4650      	mov	r0, sl
    f036:	f003 fcef 	bl	12a18 <bt_encrypt_le>
		if (err) {
    f03a:	2800      	cmp	r0, #0
    f03c:	d1de      	bne.n	effc <smp_pairing_random+0x50>
		(void)memset(ediv, 0, sizeof(ediv));
    f03e:	2202      	movs	r2, #2
    f040:	4621      	mov	r1, r4
    f042:	a805      	add	r0, sp, #20
    f044:	f012 fbfa 	bl	2183c <memset>
		(void)memset(rand, 0, sizeof(rand));
    f048:	2208      	movs	r2, #8
    f04a:	4621      	mov	r1, r4
    f04c:	a806      	add	r0, sp, #24
    f04e:	f012 fbf5 	bl	2183c <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
    f052:	f896 20cc 	ldrb.w	r2, [r6, #204]	; 0xcc
    f056:	f896 30c5 	ldrb.w	r3, [r6, #197]	; 0xc5
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
    f05a:	429a      	cmp	r2, r3
    f05c:	bf94      	ite	ls
    f05e:	9200      	strls	r2, [sp, #0]
    f060:	9300      	strhi	r3, [sp, #0]
    f062:	a906      	add	r1, sp, #24
    f064:	462b      	mov	r3, r5
    f066:	aa05      	add	r2, sp, #20
    f068:	4648      	mov	r0, r9
    f06a:	f012 ff3b 	bl	21ee4 <bt_conn_le_start_encryption>
    f06e:	b150      	cbz	r0, f086 <smp_pairing_random+0xda>
    f070:	4b89      	ldr	r3, [pc, #548]	; (f298 <smp_pairing_random+0x2ec>)
    f072:	498a      	ldr	r1, [pc, #552]	; (f29c <smp_pairing_random+0x2f0>)
			BT_ERR("Failed to start encryption");
    f074:	488a      	ldr	r0, [pc, #552]	; (f2a0 <smp_pairing_random+0x2f4>)
    f076:	1ac9      	subs	r1, r1, r3
    f078:	08c9      	lsrs	r1, r1, #3
    f07a:	0189      	lsls	r1, r1, #6
    f07c:	f041 0101 	orr.w	r1, r1, #1
    f080:	f010 fefd 	bl	1fe7e <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
    f084:	e7ba      	b.n	effc <smp_pairing_random+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    f086:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f088:	4638      	mov	r0, r7
    f08a:	f014 fa71 	bl	23570 <atomic_set_bit>
			return 0;
    f08e:	e01d      	b.n	f0cc <smp_pairing_random+0x120>
	memcpy(out, r2, 8);
    f090:	4641      	mov	r1, r8
    f092:	4628      	mov	r0, r5
    f094:	f012 fba7 	bl	217e6 <memcpy>
	memcpy(out + 8, r1, 8);
    f098:	2208      	movs	r2, #8
    f09a:	4659      	mov	r1, fp
    f09c:	a80a      	add	r0, sp, #40	; 0x28
    f09e:	f012 fba2 	bl	217e6 <memcpy>
	return bt_encrypt_le(k, out, out);
    f0a2:	462a      	mov	r2, r5
    f0a4:	4629      	mov	r1, r5
    f0a6:	4650      	mov	r0, sl
    f0a8:	f003 fcb6 	bl	12a18 <bt_encrypt_le>
		if (err) {
    f0ac:	2800      	cmp	r0, #0
    f0ae:	d1a5      	bne.n	effc <smp_pairing_random+0x50>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    f0b0:	4629      	mov	r1, r5
    f0b2:	2210      	movs	r2, #16
    f0b4:	4650      	mov	r0, sl
    f0b6:	f012 fb96 	bl	217e6 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    f0ba:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f0bc:	4638      	mov	r0, r7
    f0be:	f014 fa57 	bl	23570 <atomic_set_bit>
	return smp_send_pairing_random(smp);
    f0c2:	4630      	mov	r0, r6
    f0c4:	f014 fa9b 	bl	235fe <smp_send_pairing_random>
    f0c8:	e056      	b.n	f178 <smp_pairing_random+0x1cc>
		return BT_SMP_ERR_CONFIRM_FAILED;
    f0ca:	2404      	movs	r4, #4
}
    f0cc:	4620      	mov	r0, r4
    f0ce:	b00d      	add	sp, #52	; 0x34
    f0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    f0d4:	f899 3003 	ldrb.w	r3, [r9, #3]
    f0d8:	2b00      	cmp	r3, #0
    f0da:	d15a      	bne.n	f192 <smp_pairing_random+0x1e6>
		err = sc_smp_check_confirm(smp);
    f0dc:	4630      	mov	r0, r6
    f0de:	f7fe fdef 	bl	dcc0 <sc_smp_check_confirm>
		if (err) {
    f0e2:	4604      	mov	r4, r0
    f0e4:	2800      	cmp	r0, #0
    f0e6:	d1f1      	bne.n	f0cc <smp_pairing_random+0x120>
		switch (smp->method) {
    f0e8:	f896 30c0 	ldrb.w	r3, [r6, #192]	; 0xc0
    f0ec:	2b05      	cmp	r3, #5
    f0ee:	d885      	bhi.n	effc <smp_pairing_random+0x50>
    f0f0:	a201      	add	r2, pc, #4	; (adr r2, f0f8 <smp_pairing_random+0x14c>)
    f0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f0f6:	bf00      	nop
    f0f8:	0000f17d 	.word	0x0000f17d
    f0fc:	0000f149 	.word	0x0000f149
    f100:	0000f149 	.word	0x0000f149
    f104:	0000f111 	.word	0x0000f111
    f108:	0000effd 	.word	0x0000effd
    f10c:	0000f17d 	.word	0x0000f17d
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    f110:	ab08      	add	r3, sp, #32
    f112:	4864      	ldr	r0, [pc, #400]	; (f2a4 <smp_pairing_random+0x2f8>)
    f114:	9300      	str	r3, [sp, #0]
    f116:	6800      	ldr	r0, [r0, #0]
    f118:	4643      	mov	r3, r8
    f11a:	f106 02df 	add.w	r2, r6, #223	; 0xdf
    f11e:	f206 110f 	addw	r1, r6, #271	; 0x10f
    f122:	f7fe fca9 	bl	da78 <smp_g2>
    f126:	2800      	cmp	r0, #0
    f128:	f47f af68 	bne.w	effc <smp_pairing_random+0x50>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f12c:	2109      	movs	r1, #9
    f12e:	4638      	mov	r0, r7
    f130:	f014 fa1e 	bl	23570 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f134:	2108      	movs	r1, #8
    f136:	f014 fa1b 	bl	23570 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    f13a:	4b5b      	ldr	r3, [pc, #364]	; (f2a8 <smp_pairing_random+0x2fc>)
    f13c:	9908      	ldr	r1, [sp, #32]
    f13e:	681b      	ldr	r3, [r3, #0]
    f140:	689b      	ldr	r3, [r3, #8]
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    f142:	6830      	ldr	r0, [r6, #0]
    f144:	4798      	blx	r3
			return 0;
    f146:	e7c1      	b.n	f0cc <smp_pairing_random+0x120>
			smp->passkey_round++;
    f148:	f896 3194 	ldrb.w	r3, [r6, #404]	; 0x194
    f14c:	3301      	adds	r3, #1
    f14e:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
    f150:	2b14      	cmp	r3, #20
			smp->passkey_round++;
    f152:	f886 3194 	strb.w	r3, [r6, #404]	; 0x194
			if (smp->passkey_round == 20U) {
    f156:	d011      	beq.n	f17c <smp_pairing_random+0x1d0>
			if (bt_rand(smp->prnd, 16)) {
    f158:	2110      	movs	r1, #16
    f15a:	f106 00df 	add.w	r0, r6, #223	; 0xdf
    f15e:	f003 fc59 	bl	12a14 <bt_rand>
    f162:	2800      	cmp	r0, #0
    f164:	f47f af4a 	bne.w	effc <smp_pairing_random+0x50>
			atomic_set_bit(&smp->allowed_cmds,
    f168:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    f16c:	2103      	movs	r1, #3
    f16e:	f014 f9ff 	bl	23570 <atomic_set_bit>
			return smp_send_pairing_confirm(smp);
    f172:	4630      	mov	r0, r6
    f174:	f7fe fe64 	bl	de40 <smp_send_pairing_confirm>
    f178:	4604      	mov	r4, r0
    f17a:	e7a7      	b.n	f0cc <smp_pairing_random+0x120>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    f17c:	2107      	movs	r1, #7
    f17e:	4638      	mov	r0, r7
    f180:	f014 f9a3 	bl	234ca <atomic_test_bit>
    f184:	b108      	cbz	r0, f18a <smp_pairing_random+0x1de>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f186:	2108      	movs	r1, #8
    f188:	e77e      	b.n	f088 <smp_pairing_random+0xdc>
		return compute_and_send_master_dhcheck(smp);
    f18a:	4630      	mov	r0, r6
    f18c:	f014 fa69 	bl	23662 <compute_and_send_master_dhcheck>
    f190:	e7f2      	b.n	f178 <smp_pairing_random+0x1cc>
	switch (smp->method) {
    f192:	f896 30c0 	ldrb.w	r3, [r6, #192]	; 0xc0
    f196:	2b05      	cmp	r3, #5
    f198:	f63f af30 	bhi.w	effc <smp_pairing_random+0x50>
    f19c:	a201      	add	r2, pc, #4	; (adr r2, f1a4 <smp_pairing_random+0x1f8>)
    f19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f1a2:	bf00      	nop
    f1a4:	0000f1ed 	.word	0x0000f1ed
    f1a8:	0000f1fb 	.word	0x0000f1fb
    f1ac:	0000f1fb 	.word	0x0000f1fb
    f1b0:	0000f1bd 	.word	0x0000f1bd
    f1b4:	0000effd 	.word	0x0000effd
    f1b8:	0000f251 	.word	0x0000f251
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    f1bc:	ab08      	add	r3, sp, #32
    f1be:	4939      	ldr	r1, [pc, #228]	; (f2a4 <smp_pairing_random+0x2f8>)
    f1c0:	9300      	str	r3, [sp, #0]
    f1c2:	6809      	ldr	r1, [r1, #0]
    f1c4:	f106 03df 	add.w	r3, r6, #223	; 0xdf
    f1c8:	4642      	mov	r2, r8
    f1ca:	f206 100f 	addw	r0, r6, #271	; 0x10f
    f1ce:	f7fe fc53 	bl	da78 <smp_g2>
    f1d2:	2800      	cmp	r0, #0
    f1d4:	f47f af12 	bne.w	effc <smp_pairing_random+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f1d8:	2109      	movs	r1, #9
    f1da:	4638      	mov	r0, r7
    f1dc:	f014 f9c8 	bl	23570 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    f1e0:	4b31      	ldr	r3, [pc, #196]	; (f2a8 <smp_pairing_random+0x2fc>)
    f1e2:	9908      	ldr	r1, [sp, #32]
    f1e4:	681b      	ldr	r3, [r3, #0]
    f1e6:	6830      	ldr	r0, [r6, #0]
    f1e8:	689b      	ldr	r3, [r3, #8]
    f1ea:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    f1ec:	210d      	movs	r1, #13
    f1ee:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    f1f2:	f014 f9bd 	bl	23570 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f1f6:	210f      	movs	r1, #15
    f1f8:	e760      	b.n	f0bc <smp_pairing_random+0x110>
		err = sc_smp_check_confirm(smp);
    f1fa:	4630      	mov	r0, r6
    f1fc:	f7fe fd60 	bl	dcc0 <sc_smp_check_confirm>
		if (err) {
    f200:	4604      	mov	r4, r0
    f202:	2800      	cmp	r0, #0
    f204:	f47f af62 	bne.w	f0cc <smp_pairing_random+0x120>
		atomic_set_bit(&smp->allowed_cmds,
    f208:	f106 05b8 	add.w	r5, r6, #184	; 0xb8
    f20c:	2103      	movs	r1, #3
    f20e:	4628      	mov	r0, r5
    f210:	f014 f9ae 	bl	23570 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    f214:	4630      	mov	r0, r6
    f216:	f014 f9f2 	bl	235fe <smp_send_pairing_random>
		if (err) {
    f21a:	4604      	mov	r4, r0
    f21c:	2800      	cmp	r0, #0
    f21e:	f47f af55 	bne.w	f0cc <smp_pairing_random+0x120>
		smp->passkey_round++;
    f222:	f896 3194 	ldrb.w	r3, [r6, #404]	; 0x194
    f226:	3301      	adds	r3, #1
    f228:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    f22a:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    f22c:	f886 3194 	strb.w	r3, [r6, #404]	; 0x194
		if (smp->passkey_round == 20U) {
    f230:	d105      	bne.n	f23e <smp_pairing_random+0x292>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    f232:	210d      	movs	r1, #13
    f234:	4628      	mov	r0, r5
    f236:	f014 f99b 	bl	23570 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f23a:	210f      	movs	r1, #15
    f23c:	e724      	b.n	f088 <smp_pairing_random+0xdc>
		if (bt_rand(smp->prnd, 16)) {
    f23e:	2110      	movs	r1, #16
    f240:	f106 00df 	add.w	r0, r6, #223	; 0xdf
    f244:	f003 fbe6 	bl	12a14 <bt_rand>
    f248:	2800      	cmp	r0, #0
    f24a:	f43f af3f 	beq.w	f0cc <smp_pairing_random+0x120>
    f24e:	e6d5      	b.n	effc <smp_pairing_random+0x50>
		if (bt_rand(smp->prnd, 16)) {
    f250:	2110      	movs	r1, #16
    f252:	f106 00df 	add.w	r0, r6, #223	; 0xdf
    f256:	f003 fbdd 	bl	12a14 <bt_rand>
    f25a:	4604      	mov	r4, r0
    f25c:	2800      	cmp	r0, #0
    f25e:	f47f aecd 	bne.w	effc <smp_pairing_random+0x50>
		if (bt_auth && bt_auth->oob_data_request) {
    f262:	4d11      	ldr	r5, [pc, #68]	; (f2a8 <smp_pairing_random+0x2fc>)
    f264:	682b      	ldr	r3, [r5, #0]
    f266:	b1a3      	cbz	r3, f292 <smp_pairing_random+0x2e6>
    f268:	68db      	ldr	r3, [r3, #12]
    f26a:	b193      	cbz	r3, f292 <smp_pairing_random+0x2e6>
			struct bt_conn_oob_info info = {
    f26c:	4b0f      	ldr	r3, [pc, #60]	; (f2ac <smp_pairing_random+0x300>)
			le_sc_oob_config_set(smp, &info);
    f26e:	f10d 0121 	add.w	r1, sp, #33	; 0x21
			struct bt_conn_oob_info info = {
    f272:	881b      	ldrh	r3, [r3, #0]
    f274:	f8ad 3020 	strh.w	r3, [sp, #32]
			le_sc_oob_config_set(smp, &info);
    f278:	4630      	mov	r0, r6
    f27a:	f014 f860 	bl	2333e <le_sc_oob_config_set.isra.0>
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    f27e:	210b      	movs	r1, #11
			smp->oobd_remote = NULL;
    f280:	e9c6 4466 	strd	r4, r4, [r6, #408]	; 0x198
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    f284:	4638      	mov	r0, r7
    f286:	f014 f973 	bl	23570 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    f28a:	682b      	ldr	r3, [r5, #0]
    f28c:	a908      	add	r1, sp, #32
    f28e:	68db      	ldr	r3, [r3, #12]
    f290:	e757      	b.n	f142 <smp_pairing_random+0x196>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    f292:	2402      	movs	r4, #2
    f294:	e71a      	b.n	f0cc <smp_pairing_random+0x120>
    f296:	bf00      	nop
    f298:	00024fd8 	.word	0x00024fd8
    f29c:	000250e8 	.word	0x000250e8
    f2a0:	00028886 	.word	0x00028886
    f2a4:	20001440 	.word	0x20001440
    f2a8:	20001384 	.word	0x20001384
    f2ac:	00025239 	.word	0x00025239

0000f2b0 <bt_smp_update_keys>:
{
    f2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f2b2:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    f2b4:	f7fe fc62 	bl	db7c <smp_chan_get>
	if (!smp) {
    f2b8:	4605      	mov	r5, r0
    f2ba:	2800      	cmp	r0, #0
    f2bc:	f000 8081 	beq.w	f3c2 <bt_smp_update_keys+0x112>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    f2c0:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
    f2c4:	2103      	movs	r1, #3
    f2c6:	4630      	mov	r0, r6
    f2c8:	f014 f8ff 	bl	234ca <atomic_test_bit>
    f2cc:	2800      	cmp	r0, #0
    f2ce:	d078      	beq.n	f3c2 <bt_smp_update_keys+0x112>
	if (conn->le.keys) {
    f2d0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f2d4:	b108      	cbz	r0, f2da <bt_smp_update_keys+0x2a>
		bt_keys_clear(conn->le.keys);
    f2d6:	f014 fe44 	bl	23f62 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f2da:	f104 0788 	add.w	r7, r4, #136	; 0x88
    f2de:	7a20      	ldrb	r0, [r4, #8]
    f2e0:	4639      	mov	r1, r7
    f2e2:	f000 f88b 	bl	f3fc <bt_keys_get_addr>
    f2e6:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    f2ea:	b9b0      	cbnz	r0, f31a <bt_smp_update_keys+0x6a>
    f2ec:	4a35      	ldr	r2, [pc, #212]	; (f3c4 <bt_smp_update_keys+0x114>)
    f2ee:	4c36      	ldr	r4, [pc, #216]	; (f3c8 <bt_smp_update_keys+0x118>)
		BT_ERR("Unable to get keys for %s",
    f2f0:	4638      	mov	r0, r7
    f2f2:	1aa4      	subs	r4, r4, r2
    f2f4:	f7f7 ff10 	bl	7118 <bt_addr_le_str_real>
    f2f8:	f7f5 ffd6 	bl	52a8 <log_strdup>
    f2fc:	08e4      	lsrs	r4, r4, #3
    f2fe:	01a4      	lsls	r4, r4, #6
    f300:	f044 0401 	orr.w	r4, r4, #1
    f304:	4601      	mov	r1, r0
    f306:	4622      	mov	r2, r4
    f308:	4830      	ldr	r0, [pc, #192]	; (f3cc <bt_smp_update_keys+0x11c>)
    f30a:	f010 fdc5 	bl	1fe98 <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    f30e:	4628      	mov	r0, r5
    f310:	2108      	movs	r1, #8
}
    f312:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    f316:	f014 bb3b 	b.w	23990 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    f31a:	210d      	movs	r1, #13
    f31c:	4630      	mov	r0, r6
    f31e:	f014 f8d4 	bl	234ca <atomic_test_bit>
    f322:	b128      	cbz	r0, f330 <bt_smp_update_keys+0x80>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    f324:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    f328:	7b53      	ldrb	r3, [r2, #13]
    f32a:	f043 0302 	orr.w	r3, r3, #2
    f32e:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
    f330:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    f334:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    f338:	2a03      	cmp	r2, #3
    f33a:	7b4b      	ldrb	r3, [r1, #13]
    f33c:	d838      	bhi.n	f3b0 <bt_smp_update_keys+0x100>
    f33e:	b3d2      	cbz	r2, f3b6 <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    f340:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    f344:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
    f346:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    f34a:	f895 20c5 	ldrb.w	r2, [r5, #197]	; 0xc5
    f34e:	4293      	cmp	r3, r2
    f350:	bf28      	it	cs
    f352:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    f354:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f356:	4630      	mov	r0, r6
    f358:	2105      	movs	r1, #5
    f35a:	f014 f8b6 	bl	234ca <atomic_test_bit>
    f35e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
    f362:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f364:	b350      	cbz	r0, f3bc <bt_smp_update_keys+0x10c>
		conn->le.keys->flags |= BT_KEYS_SC;
    f366:	f042 0210 	orr.w	r2, r2, #16
    f36a:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f36c:	210c      	movs	r1, #12
    f36e:	4630      	mov	r0, r6
    f370:	f014 f8ab 	bl	234ca <atomic_test_bit>
    f374:	b328      	cbz	r0, f3c2 <bt_smp_update_keys+0x112>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    f376:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f37a:	2120      	movs	r1, #32
    f37c:	f014 fded 	bl	23f5a <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
    f380:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f384:	f105 01ff 	add.w	r1, r5, #255	; 0xff
    f388:	2210      	movs	r2, #16
    f38a:	301a      	adds	r0, #26
    f38c:	f012 fa2b 	bl	217e6 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
    f390:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f394:	2208      	movs	r2, #8
    f396:	2100      	movs	r1, #0
    f398:	3010      	adds	r0, #16
    f39a:	f012 fa4f 	bl	2183c <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
    f39e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f3a2:	2202      	movs	r2, #2
}
    f3a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
    f3a8:	2100      	movs	r1, #0
    f3aa:	3018      	adds	r0, #24
    f3ac:	f012 ba46 	b.w	2183c <memset>
	switch (smp->method) {
    f3b0:	3a05      	subs	r2, #5
    f3b2:	2a01      	cmp	r2, #1
    f3b4:	d9c4      	bls.n	f340 <bt_smp_update_keys+0x90>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    f3b6:	f023 0301 	bic.w	r3, r3, #1
    f3ba:	e7c3      	b.n	f344 <bt_smp_update_keys+0x94>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    f3bc:	f022 0210 	bic.w	r2, r2, #16
    f3c0:	735a      	strb	r2, [r3, #13]
}
    f3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f3c4:	00024fd8 	.word	0x00024fd8
    f3c8:	000250e8 	.word	0x000250e8
    f3cc:	0002873c 	.word	0x0002873c

0000f3d0 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    f3d0:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    f3d2:	4b07      	ldr	r3, [pc, #28]	; (f3f0 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    f3d4:	4807      	ldr	r0, [pc, #28]	; (f3f4 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    f3d6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
    f3da:	f003 0306 	and.w	r3, r3, #6
    f3de:	1f9a      	subs	r2, r3, #6
    f3e0:	4253      	negs	r3, r2
    f3e2:	4153      	adcs	r3, r2
    f3e4:	4a04      	ldr	r2, [pc, #16]	; (f3f8 <bt_smp_init+0x28>)
    f3e6:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    f3e8:	f7fa fb66 	bl	9ab8 <bt_pub_key_gen>
	}

	return smp_self_test();
}
    f3ec:	2000      	movs	r0, #0
    f3ee:	bd08      	pop	{r3, pc}
    f3f0:	20000000 	.word	0x20000000
    f3f4:	20000238 	.word	0x20000238
    f3f8:	20003091 	.word	0x20003091

0000f3fc <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
    f3fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    f3fe:	4c11      	ldr	r4, [pc, #68]	; (f444 <bt_keys_get_addr+0x48>)
    f400:	7823      	ldrb	r3, [r4, #0]
    f402:	4283      	cmp	r3, r0
{
    f404:	4605      	mov	r5, r0
    f406:	460e      	mov	r6, r1
    f408:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    f40a:	d00b      	beq.n	f424 <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    f40c:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    f40e:	480e      	ldr	r0, [pc, #56]	; (f448 <bt_keys_get_addr+0x4c>)
    f410:	9400      	str	r4, [sp, #0]
    f412:	2207      	movs	r2, #7
    f414:	4669      	mov	r1, sp
    f416:	f8cd 4003 	str.w	r4, [sp, #3]
    f41a:	f012 f9d4 	bl	217c6 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    f41e:	b140      	cbz	r0, f432 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    f420:	4620      	mov	r0, r4
    f422:	e00d      	b.n	f440 <bt_keys_get_addr+0x44>
    f424:	2207      	movs	r2, #7
    f426:	1c60      	adds	r0, r4, #1
    f428:	f012 f9cd 	bl	217c6 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    f42c:	2800      	cmp	r0, #0
    f42e:	d1ed      	bne.n	f40c <bt_keys_get_addr+0x10>
    f430:	e7f6      	b.n	f420 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
    f432:	4805      	ldr	r0, [pc, #20]	; (f448 <bt_keys_get_addr+0x4c>)
		keys->id = id;
    f434:	703d      	strb	r5, [r7, #0]
    f436:	2207      	movs	r2, #7
    f438:	4631      	mov	r1, r6
    f43a:	f012 f9d4 	bl	217e6 <memcpy>
		return keys;
    f43e:	4801      	ldr	r0, [pc, #4]	; (f444 <bt_keys_get_addr+0x48>)
}
    f440:	b003      	add	sp, #12
    f442:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f444:	20001444 	.word	0x20001444
    f448:	20001445 	.word	0x20001445

0000f44c <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    f44c:	460b      	mov	r3, r1
    f44e:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    f450:	4a04      	ldr	r2, [pc, #16]	; (f464 <bt_keys_foreach+0x18>)
{
    f452:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    f454:	89d4      	ldrh	r4, [r2, #14]
    f456:	4204      	tst	r4, r0
    f458:	d002      	beq.n	f460 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
    f45a:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    f45c:	4610      	mov	r0, r2
    f45e:	4718      	bx	r3
}
    f460:	bc10      	pop	{r4}
    f462:	4770      	bx	lr
    f464:	20001444 	.word	0x20001444

0000f468 <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
    f468:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    f46a:	4c09      	ldr	r4, [pc, #36]	; (f490 <bt_keys_find+0x28>)
{
    f46c:	460b      	mov	r3, r1
    f46e:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    f470:	89e2      	ldrh	r2, [r4, #14]
    f472:	4202      	tst	r2, r0
    f474:	d007      	beq.n	f486 <bt_keys_find+0x1e>
    f476:	7822      	ldrb	r2, [r4, #0]
    f478:	429a      	cmp	r2, r3
    f47a:	d104      	bne.n	f486 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    f47c:	2207      	movs	r2, #7
    f47e:	1c60      	adds	r0, r4, #1
    f480:	f012 f9a1 	bl	217c6 <memcmp>
    f484:	b108      	cbz	r0, f48a <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    f486:	2000      	movs	r0, #0
}
    f488:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    f48a:	4620      	mov	r0, r4
    f48c:	e7fc      	b.n	f488 <bt_keys_find+0x20>
    f48e:	bf00      	nop
    f490:	20001444 	.word	0x20001444

0000f494 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
    f494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    f496:	780b      	ldrb	r3, [r1, #0]
    f498:	2b01      	cmp	r3, #1
    f49a:	4607      	mov	r7, r0
    f49c:	460c      	mov	r4, r1
    f49e:	d001      	beq.n	f4a4 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
    f4a0:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
    f4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    f4a4:	798b      	ldrb	r3, [r1, #6]
    f4a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f4aa:	2b40      	cmp	r3, #64	; 0x40
    f4ac:	d1f8      	bne.n	f4a0 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    f4ae:	4d13      	ldr	r5, [pc, #76]	; (f4fc <bt_keys_find_irk+0x68>)
    f4b0:	89eb      	ldrh	r3, [r5, #14]
    f4b2:	f013 0f02 	tst.w	r3, #2
    f4b6:	462e      	mov	r6, r5
    f4b8:	d0f2      	beq.n	f4a0 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    f4ba:	7833      	ldrb	r3, [r6, #0]
    f4bc:	42bb      	cmp	r3, r7
    f4be:	d10b      	bne.n	f4d8 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
    f4c0:	2206      	movs	r2, #6
    f4c2:	f106 013a 	add.w	r1, r6, #58	; 0x3a
    f4c6:	1c60      	adds	r0, r4, #1
    f4c8:	f012 f97d 	bl	217c6 <memcmp>
    f4cc:	b908      	cbnz	r0, f4d2 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
    f4ce:	4628      	mov	r0, r5
    f4d0:	e7e7      	b.n	f4a2 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    f4d2:	89f3      	ldrh	r3, [r6, #14]
    f4d4:	079b      	lsls	r3, r3, #30
    f4d6:	d5e3      	bpl.n	f4a0 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    f4d8:	7833      	ldrb	r3, [r6, #0]
    f4da:	42bb      	cmp	r3, r7
    f4dc:	d1e0      	bne.n	f4a0 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    f4de:	3401      	adds	r4, #1
    f4e0:	4807      	ldr	r0, [pc, #28]	; (f500 <bt_keys_find_irk+0x6c>)
    f4e2:	4621      	mov	r1, r4
    f4e4:	f012 f9ef 	bl	218c6 <bt_rpa_irk_matches>
    f4e8:	2800      	cmp	r0, #0
    f4ea:	d0d9      	beq.n	f4a0 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    f4ec:	4805      	ldr	r0, [pc, #20]	; (f504 <bt_keys_find_irk+0x70>)
    f4ee:	2206      	movs	r2, #6
    f4f0:	4621      	mov	r1, r4
    f4f2:	f012 f978 	bl	217e6 <memcpy>
			return &key_pool[i];
    f4f6:	4801      	ldr	r0, [pc, #4]	; (f4fc <bt_keys_find_irk+0x68>)
}
    f4f8:	e7d3      	b.n	f4a2 <bt_keys_find_irk+0xe>
    f4fa:	bf00      	nop
    f4fc:	20001444 	.word	0x20001444
    f500:	2000146e 	.word	0x2000146e
    f504:	2000147e 	.word	0x2000147e

0000f508 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
    f508:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
    f50a:	4c06      	ldr	r4, [pc, #24]	; (f524 <bt_keys_find_addr+0x1c>)
    f50c:	7823      	ldrb	r3, [r4, #0]
    f50e:	4283      	cmp	r3, r0
    f510:	d104      	bne.n	f51c <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    f512:	2207      	movs	r2, #7
    f514:	1c60      	adds	r0, r4, #1
    f516:	f012 f956 	bl	217c6 <memcmp>
    f51a:	b108      	cbz	r0, f520 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    f51c:	2000      	movs	r0, #0
}
    f51e:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    f520:	4620      	mov	r0, r4
    f522:	e7fc      	b.n	f51e <bt_keys_find_addr+0x16>
    f524:	20001444 	.word	0x20001444

0000f528 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    f528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f52c:	4614      	mov	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    f52e:	1dc2      	adds	r2, r0, #7
    f530:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    f534:	1e67      	subs	r7, r4, #1
    f536:	b2bf      	uxth	r7, r7
	*mem_head = mem_pool;
    f538:	6018      	str	r0, [r3, #0]
{
    f53a:	b082      	sub	sp, #8
    f53c:	4605      	mov	r5, r0
    f53e:	460e      	mov	r6, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    f540:	fb01 0007 	mla	r0, r1, r7, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    f544:	8014      	strh	r4, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    f546:	2100      	movs	r1, #0
    f548:	2204      	movs	r2, #4
    f54a:	f012 f977 	bl	2183c <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    f54e:	b1b7      	cbz	r7, f57e <mem_init+0x56>
    f550:	3c02      	subs	r4, #2
    f552:	b2a4      	uxth	r4, r4
    f554:	fb04 6306 	mla	r3, r4, r6, r6
    f558:	fb04 f706 	mul.w	r7, r4, r6
    f55c:	441d      	add	r5, r3
    f55e:	1aff      	subs	r7, r7, r3
    f560:	f64f 78ff 	movw	r8, #65535	; 0xffff
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    f564:	2204      	movs	r2, #4
	while (mem_count--) {
    f566:	3c01      	subs	r4, #1
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    f568:	19e8      	adds	r0, r5, r7
    f56a:	eb0d 0102 	add.w	r1, sp, r2
	while (mem_count--) {
    f56e:	b2a4      	uxth	r4, r4
		next = (uint32_t)((uint8_t *) mem_pool +
    f570:	9501      	str	r5, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    f572:	f012 f938 	bl	217e6 <memcpy>
	while (mem_count--) {
    f576:	4544      	cmp	r4, r8
    f578:	eba5 0506 	sub.w	r5, r5, r6
    f57c:	d1f2      	bne.n	f564 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    f57e:	b002      	add	sp, #8
    f580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f584 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    f584:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    f586:	6805      	ldr	r5, [r0, #0]
{
    f588:	b082      	sub	sp, #8
	if (*mem_head) {
    f58a:	b195      	cbz	r5, f5b2 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    f58c:	1deb      	adds	r3, r5, #7
    f58e:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    f592:	2204      	movs	r2, #4
    f594:	4604      	mov	r4, r0
    f596:	4629      	mov	r1, r5
    f598:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    f59c:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    f59e:	f012 f922 	bl	217e6 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    f5a2:	9b01      	ldr	r3, [sp, #4]
    f5a4:	b123      	cbz	r3, f5b0 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    f5a6:	1dda      	adds	r2, r3, #7
    f5a8:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    f5ac:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    f5ae:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    f5b0:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    f5b2:	4628      	mov	r0, r5
    f5b4:	b002      	add	sp, #8
    f5b6:	bd70      	pop	{r4, r5, r6, pc}

0000f5b8 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    f5b8:	680b      	ldr	r3, [r1, #0]
{
    f5ba:	b570      	push	{r4, r5, r6, lr}
    f5bc:	460c      	mov	r4, r1
    f5be:	4605      	mov	r5, r0
	if (*mem_head) {
    f5c0:	b183      	cbz	r3, f5e4 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    f5c2:	3307      	adds	r3, #7
    f5c4:	f023 0303 	bic.w	r3, r3, #3
    f5c8:	881e      	ldrh	r6, [r3, #0]
    f5ca:	3601      	adds	r6, #1
    f5cc:	b2b6      	uxth	r6, r6
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    f5ce:	2204      	movs	r2, #4
    f5d0:	4621      	mov	r1, r4
    f5d2:	4628      	mov	r0, r5
    f5d4:	f012 f907 	bl	217e6 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    f5d8:	1deb      	adds	r3, r5, #7
    f5da:	f023 0303 	bic.w	r3, r3, #3
    f5de:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    f5e0:	6025      	str	r5, [r4, #0]
}
    f5e2:	bd70      	pop	{r4, r5, r6, pc}
    f5e4:	2601      	movs	r6, #1
    f5e6:	e7f2      	b.n	f5ce <mem_release+0x16>

0000f5e8 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    f5e8:	fb02 0001 	mla	r0, r2, r1, r0
    f5ec:	4770      	bx	lr
    f5ee:	bf00      	nop

0000f5f0 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    f5f0:	1a40      	subs	r0, r0, r1
    f5f2:	b280      	uxth	r0, r0
}
    f5f4:	fbb0 f0f2 	udiv	r0, r0, r2
    f5f8:	4770      	bx	lr
    f5fa:	bf00      	nop

0000f5fc <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    f5fc:	1e53      	subs	r3, r2, #1
	src += len;
    f5fe:	4411      	add	r1, r2
	while (len--) {
    f600:	b29b      	uxth	r3, r3
    f602:	b142      	cbz	r2, f616 <mem_rcopy+0x1a>
    f604:	43db      	mvns	r3, r3
    f606:	18ca      	adds	r2, r1, r3
    f608:	3801      	subs	r0, #1
		*dst++ = *--src;
    f60a:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    f60e:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    f612:	4291      	cmp	r1, r2
    f614:	d1f9      	bne.n	f60a <mem_rcopy+0xe>
	}
}
    f616:	4770      	bx	lr

0000f618 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    f618:	4401      	add	r1, r0
    f61a:	e002      	b.n	f622 <mem_nz+0xa>
		if (*src++) {
    f61c:	f810 3b01 	ldrb.w	r3, [r0], #1
    f620:	b91b      	cbnz	r3, f62a <mem_nz+0x12>
	while (len--) {
    f622:	4288      	cmp	r0, r1
    f624:	d1fa      	bne.n	f61c <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    f626:	2000      	movs	r0, #0
    f628:	4770      	bx	lr
			return 1;
    f62a:	2001      	movs	r0, #1
}
    f62c:	4770      	bx	lr
    f62e:	bf00      	nop

0000f630 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    f630:	6010      	str	r0, [r2, #0]
    f632:	6008      	str	r0, [r1, #0]

	return link;
}
    f634:	4770      	bx	lr
    f636:	bf00      	nop

0000f638 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    f638:	680a      	ldr	r2, [r1, #0]
{
    f63a:	4603      	mov	r3, r0
	if (*head != *tail) {
    f63c:	6800      	ldr	r0, [r0, #0]
    f63e:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    f640:	bf05      	ittet	eq
    f642:	2200      	moveq	r2, #0
    f644:	600a      	streq	r2, [r1, #0]
		return NULL;
    f646:	2000      	movne	r0, #0
	*head = *tail = NULL;
    f648:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    f64a:	4770      	bx	lr

0000f64c <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    f64c:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    f64e:	6814      	ldr	r4, [r2, #0]
    f650:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    f652:	6814      	ldr	r4, [r2, #0]
    f654:	6061      	str	r1, [r4, #4]
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;

	return link;
}
    f656:	bc10      	pop	{r4}
	*tail = link;
    f658:	6010      	str	r0, [r2, #0]
}
    f65a:	4770      	bx	lr

0000f65c <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    f65c:	4288      	cmp	r0, r1
    f65e:	d003      	beq.n	f668 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    f660:	b11a      	cbz	r2, f66a <memq_peek+0xe>
		*mem = head->mem;
    f662:	6843      	ldr	r3, [r0, #4]
    f664:	6013      	str	r3, [r2, #0]
    f666:	4770      	bx	lr
		return NULL;
    f668:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    f66a:	4770      	bx	lr

0000f66c <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    f66c:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    f66e:	4283      	cmp	r3, r0
    f670:	d009      	beq.n	f686 <memq_dequeue+0x1a>
	if (mem) {
    f672:	b12a      	cbz	r2, f680 <memq_dequeue+0x14>
		*mem = head->mem;
    f674:	6858      	ldr	r0, [r3, #4]
    f676:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    f678:	681a      	ldr	r2, [r3, #0]
    f67a:	600a      	str	r2, [r1, #0]

	return old_head;
}
    f67c:	4618      	mov	r0, r3
    f67e:	4770      	bx	lr
	if (old_head == NULL) {
    f680:	2b00      	cmp	r3, #0
    f682:	d1f9      	bne.n	f678 <memq_dequeue+0xc>
    f684:	e7fa      	b.n	f67c <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    f686:	2300      	movs	r3, #0
    f688:	e7f8      	b.n	f67c <memq_dequeue+0x10>
    f68a:	bf00      	nop

0000f68c <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    f68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f690:	f8df 8034 	ldr.w	r8, [pc, #52]	; f6c8 <mayfly_init+0x3c>
    f694:	4e0b      	ldr	r6, [pc, #44]	; (f6c4 <mayfly_init+0x38>)
    f696:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    f698:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    f69c:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    f69e:	1d22      	adds	r2, r4, #4
    f6a0:	4621      	mov	r1, r4
    f6a2:	4628      	mov	r0, r5
    f6a4:	3c0c      	subs	r4, #12
    f6a6:	f7ff ffc3 	bl	f630 <memq_init>
		while (caller_id--) {
    f6aa:	42b4      	cmp	r4, r6
    f6ac:	f1a5 0508 	sub.w	r5, r5, #8
    f6b0:	d1f5      	bne.n	f69e <mayfly_init+0x12>
	while (callee_id--) {
    f6b2:	3f04      	subs	r7, #4
    f6b4:	1d3b      	adds	r3, r7, #4
    f6b6:	f1a8 0820 	sub.w	r8, r8, #32
    f6ba:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    f6be:	d1eb      	bne.n	f698 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    f6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f6c4:	200015a8 	.word	0x200015a8
    f6c8:	20001518 	.word	0x20001518

0000f6cc <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    f6cc:	b430      	push	{r4, r5}
    f6ce:	4603      	mov	r3, r0
    f6d0:	460c      	mov	r4, r1
	if (enable) {
    f6d2:	b19a      	cbz	r2, f6fc <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    f6d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    f6d8:	0108      	lsls	r0, r1, #4
    f6da:	4d14      	ldr	r5, [pc, #80]	; (f72c <mayfly_enable+0x60>)
    f6dc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    f6e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    f6e4:	4429      	add	r1, r5
    f6e6:	7a48      	ldrb	r0, [r1, #9]
    f6e8:	7a0d      	ldrb	r5, [r1, #8]
    f6ea:	42a8      	cmp	r0, r5
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    f6ec:	bf04      	itt	eq
    f6ee:	3001      	addeq	r0, #1
    f6f0:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    f6f2:	4621      	mov	r1, r4
    f6f4:	4618      	mov	r0, r3

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    f6f6:	bc30      	pop	{r4, r5}
		mayfly_enable_cb(caller_id, callee_id, enable);
    f6f8:	f00d ba6e 	b.w	1cbd8 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    f6fc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    f700:	4d0a      	ldr	r5, [pc, #40]	; (f72c <mayfly_enable+0x60>)
    f702:	0112      	lsls	r2, r2, #4
    f704:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    f708:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    f70c:	442b      	add	r3, r5
    f70e:	7a9d      	ldrb	r5, [r3, #10]
    f710:	7ada      	ldrb	r2, [r3, #11]
    f712:	42aa      	cmp	r2, r5
    f714:	d001      	beq.n	f71a <mayfly_enable+0x4e>
}
    f716:	bc30      	pop	{r4, r5}
    f718:	4770      	bx	lr
			mfp[callee_id] = 1U;
    f71a:	4d05      	ldr	r5, [pc, #20]	; (f730 <mayfly_enable+0x64>)
			mft[callee_id][caller_id].disable_req++;
    f71c:	3201      	adds	r2, #1
    f71e:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    f720:	2301      	movs	r3, #1
    f722:	546b      	strb	r3, [r5, r1]
}
    f724:	bc30      	pop	{r4, r5}
			mayfly_pend(caller_id, callee_id);
    f726:	f00d bab5 	b.w	1cc94 <mayfly_pend>
    f72a:	bf00      	nop
    f72c:	20001524 	.word	0x20001524
    f730:	20001520 	.word	0x20001520

0000f734 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    f734:	b570      	push	{r4, r5, r6, lr}
    f736:	461c      	mov	r4, r3
    f738:	4606      	mov	r6, r0
    f73a:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    f73c:	b322      	cbz	r2, f788 <mayfly_enqueue+0x54>
    f73e:	7863      	ldrb	r3, [r4, #1]

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    f740:	7822      	ldrb	r2, [r4, #0]
    f742:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    f744:	f012 0203 	ands.w	r2, r2, #3
    f748:	d005      	beq.n	f756 <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
    f74a:	2a01      	cmp	r2, #1
    f74c:	d040      	beq.n	f7d0 <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
    f74e:	3301      	adds	r3, #1
    f750:	b2db      	uxtb	r3, r3
    f752:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    f754:	e00f      	b.n	f776 <mayfly_enqueue+0x42>
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    f756:	2230      	movs	r2, #48	; 0x30
    f758:	2104      	movs	r1, #4
    f75a:	fb12 1105 	smlabb	r1, r2, r5, r1
    f75e:	220c      	movs	r2, #12
    f760:	fb12 1206 	smlabb	r2, r2, r6, r1
	m->_req = ack + 1;
    f764:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    f766:	491b      	ldr	r1, [pc, #108]	; (f7d4 <mayfly_enqueue+0xa0>)
    f768:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
    f76a:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    f76c:	440a      	add	r2, r1
	m->_req = ack + 1;
    f76e:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    f770:	4621      	mov	r1, r4
    f772:	f7ff ff6b 	bl	f64c <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    f776:	4b18      	ldr	r3, [pc, #96]	; (f7d8 <mayfly_enqueue+0xa4>)

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    f778:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    f77a:	2201      	movs	r2, #1
	mayfly_pend(caller_id, callee_id);
    f77c:	4629      	mov	r1, r5
	mfp[callee_id] = 1U;
    f77e:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    f780:	f00d fa88 	bl	1cc94 <mayfly_pend>

	return 0;
    f784:	2000      	movs	r0, #0
}
    f786:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    f788:	f00d fa66 	bl	1cc58 <mayfly_prio_is_equal>
    f78c:	2800      	cmp	r0, #0
    f78e:	d0d6      	beq.n	f73e <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    f790:	4629      	mov	r1, r5
    f792:	4630      	mov	r0, r6
    f794:	f00d fa40 	bl	1cc18 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    f798:	2800      	cmp	r0, #0
    f79a:	d0d0      	beq.n	f73e <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    f79c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    f7a0:	0111      	lsls	r1, r2, #4
    f7a2:	480c      	ldr	r0, [pc, #48]	; (f7d4 <mayfly_enqueue+0xa0>)
    f7a4:	7863      	ldrb	r3, [r4, #1]
    f7a6:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    f7aa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    f7ae:	4402      	add	r2, r0
		!mayfly_is_enabled(caller_id, callee_id) ||
    f7b0:	7a91      	ldrb	r1, [r2, #10]
    f7b2:	7ad2      	ldrb	r2, [r2, #11]
    f7b4:	4291      	cmp	r1, r2
    f7b6:	d1c3      	bne.n	f740 <mayfly_enqueue+0xc>
	state = (m->_req - ack) & 0x03;
    f7b8:	7822      	ldrb	r2, [r4, #0]
    f7ba:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    f7bc:	0792      	lsls	r2, r2, #30
    f7be:	d002      	beq.n	f7c6 <mayfly_enqueue+0x92>
		m->_req = ack + 2;
    f7c0:	3302      	adds	r3, #2
    f7c2:	b2db      	uxtb	r3, r3
    f7c4:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    f7c6:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    f7ca:	4798      	blx	r3
		return 0;
    f7cc:	2000      	movs	r0, #0
}
    f7ce:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    f7d0:	4610      	mov	r0, r2
}
    f7d2:	bd70      	pop	{r4, r5, r6, pc}
    f7d4:	20001524 	.word	0x20001524
    f7d8:	20001520 	.word	0x20001520

0000f7dc <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    f7dc:	494e      	ldr	r1, [pc, #312]	; (f918 <mayfly_run+0x13c>)
    f7de:	5c0b      	ldrb	r3, [r1, r0]
    f7e0:	2b00      	cmp	r3, #0
    f7e2:	f000 8098 	beq.w	f916 <mayfly_run+0x13a>
{
    f7e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    f7ea:	4b4c      	ldr	r3, [pc, #304]	; (f91c <mayfly_run+0x140>)
    f7ec:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
{
    f7f0:	b087      	sub	sp, #28
		return;
	}
	mfp[callee_id] = 0U;
    f7f2:	2200      	movs	r2, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    f7f4:	fb0b 3b00 	mla	fp, fp, r0, r3
	mfp[callee_id] = 0U;
    f7f8:	540a      	strb	r2, [r1, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    f7fa:	eb00 0740 	add.w	r7, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    f7fe:	f10b 0104 	add.w	r1, fp, #4
	uint8_t enable = 0U;
    f802:	9203      	str	r2, [sp, #12]
    f804:	eb03 1707 	add.w	r7, r3, r7, lsl #4
	uint8_t disable = 0U;
    f808:	9201      	str	r2, [sp, #4]
	while (caller_id--) {
    f80a:	f04f 0903 	mov.w	r9, #3
    f80e:	4688      	mov	r8, r1
    f810:	9002      	str	r0, [sp, #8]
		memq_link_t *link;
		struct mayfly *m = 0;
    f812:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    f814:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    f818:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    f81a:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    f81c:	f7ff ff1e 	bl	f65c <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    f820:	f107 0624 	add.w	r6, r7, #36	; 0x24
    f824:	4683      	mov	fp, r0
    f826:	2800      	cmp	r0, #0
    f828:	d034      	beq.n	f894 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    f82a:	9c05      	ldr	r4, [sp, #20]
    f82c:	7825      	ldrb	r5, [r4, #0]
    f82e:	7863      	ldrb	r3, [r4, #1]
    f830:	1aed      	subs	r5, r5, r3
    f832:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    f836:	2d01      	cmp	r5, #1
    f838:	d106      	bne.n	f848 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    f83a:	3b01      	subs	r3, #1
    f83c:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    f83e:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    f842:	4798      	blx	r3
    f844:	9c05      	ldr	r4, [sp, #20]
    f846:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    f848:	f894 c000 	ldrb.w	ip, [r4]
    f84c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
    f84e:	ebac 0303 	sub.w	r3, ip, r3
    f852:	f003 0303 	and.w	r3, r3, #3
    f856:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    f858:	f04f 0200 	mov.w	r2, #0
    f85c:	4631      	mov	r1, r6
	req = m->_req;
    f85e:	fa5f fa8c 	uxtb.w	sl, ip
	if (((req - m->_ack) & 0x03) != 1U) {
    f862:	d00d      	beq.n	f880 <mayfly_run+0xa4>
		memq_dequeue(mft[callee_id][caller_id].tail,
    f864:	f7ff ff02 	bl	f66c <memq_dequeue>
		ack = m->_ack;
    f868:	7862      	ldrb	r2, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    f86a:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    f86c:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    f870:	1a9b      	subs	r3, r3, r2
    f872:	f003 0303 	and.w	r3, r3, #3
    f876:	2b01      	cmp	r3, #1
		m->_ack = req;
    f878:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    f87c:	d044      	beq.n	f908 <mayfly_run+0x12c>
    f87e:	6ab8      	ldr	r0, [r7, #40]	; 0x28

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    f880:	4601      	mov	r1, r0
    f882:	aa05      	add	r2, sp, #20
    f884:	6a78      	ldr	r0, [r7, #36]	; 0x24
    f886:	f7ff fee9 	bl	f65c <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    f88a:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    f88c:	4683      	mov	fp, r0
			if (state == 1U) {
    f88e:	d029      	beq.n	f8e4 <mayfly_run+0x108>
		while (link) {
    f890:	2800      	cmp	r0, #0
    f892:	d1ca      	bne.n	f82a <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    f894:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    f898:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    f89c:	429a      	cmp	r2, r3
    f89e:	d003      	beq.n	f8a8 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    f8a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    f8a4:	2301      	movs	r3, #1
    f8a6:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    f8a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    f8ac:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    f8b0:	429a      	cmp	r2, r3
    f8b2:	d003      	beq.n	f8bc <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    f8b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    f8b8:	2301      	movs	r3, #1
    f8ba:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    f8bc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    f8c0:	fa5f f989 	uxtb.w	r9, r9
    f8c4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    f8c8:	f1a7 070c 	sub.w	r7, r7, #12
    f8cc:	d1a1      	bne.n	f812 <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    f8ce:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    f8d2:	b1b3      	cbz	r3, f902 <mayfly_run+0x126>
    f8d4:	9b03      	ldr	r3, [sp, #12]
    f8d6:	b9a3      	cbnz	r3, f902 <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
    f8d8:	461a      	mov	r2, r3
    f8da:	4651      	mov	r1, sl
    f8dc:	4650      	mov	r0, sl
    f8de:	f00d f97b 	bl	1cbd8 <mayfly_enable_cb>
    f8e2:	e00e      	b.n	f902 <mayfly_run+0x126>
				if (caller_id || link) {
    f8e4:	f1b9 0f00 	cmp.w	r9, #0
    f8e8:	d101      	bne.n	f8ee <mayfly_run+0x112>
    f8ea:	2800      	cmp	r0, #0
    f8ec:	d0d2      	beq.n	f894 <mayfly_run+0xb8>
    f8ee:	f8dd a008 	ldr.w	sl, [sp, #8]
					mfp[callee_id] = 1U;
    f8f2:	4a09      	ldr	r2, [pc, #36]	; (f918 <mayfly_run+0x13c>)
    f8f4:	2301      	movs	r3, #1
					mayfly_pend(callee_id, callee_id);
    f8f6:	4651      	mov	r1, sl
    f8f8:	4650      	mov	r0, sl
					mfp[callee_id] = 1U;
    f8fa:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    f8fe:	f00d f9c9 	bl	1cc94 <mayfly_pend>
	}
}
    f902:	b007      	add	sp, #28
    f904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
    f908:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    f90a:	4621      	mov	r1, r4
    f90c:	4658      	mov	r0, fp
    f90e:	4642      	mov	r2, r8
    f910:	f7ff fe9c 	bl	f64c <memq_enqueue>
    f914:	e7b3      	b.n	f87e <mayfly_run+0xa2>
    f916:	4770      	bx	lr
    f918:	20001520 	.word	0x20001520
    f91c:	20001524 	.word	0x20001524

0000f920 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    f920:	b1a1      	cbz	r1, f94c <util_ones_count_get+0x2c>
    f922:	1e4b      	subs	r3, r1, #1
    f924:	b2db      	uxtb	r3, r3
{
    f926:	b410      	push	{r4}
    f928:	1e41      	subs	r1, r0, #1
    f92a:	18c4      	adds	r4, r0, r3
	uint8_t one_count = 0U;
    f92c:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    f92e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    f932:	b13b      	cbz	r3, f944 <util_ones_count_get+0x24>
			bite &= (bite - 1);
    f934:	b25b      	sxtb	r3, r3
    f936:	1e5a      	subs	r2, r3, #1
    f938:	4013      	ands	r3, r2
			one_count++;
    f93a:	3001      	adds	r0, #1
		while (bite) {
    f93c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    f940:	b2c0      	uxtb	r0, r0
		while (bite) {
    f942:	d1f7      	bne.n	f934 <util_ones_count_get+0x14>
	while (octets_len--) {
    f944:	42a1      	cmp	r1, r4
    f946:	d1f2      	bne.n	f92e <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
    f948:	bc10      	pop	{r4}
    f94a:	4770      	bx	lr
	uint8_t one_count = 0U;
    f94c:	4608      	mov	r0, r1
}
    f94e:	4770      	bx	lr

0000f950 <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
    f950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
    f954:	4dad      	ldr	r5, [pc, #692]	; (fc0c <util_aa_le32+0x2bc>)
{
    f956:	b083      	sub	sp, #12
    f958:	4604      	mov	r4, r0
    f95a:	2703      	movs	r7, #3
	consecutive_cnt = 1U;
    f95c:	2601      	movs	r6, #1
	lll_csrand_get(dst, sizeof(uint32_t));
    f95e:	2104      	movs	r1, #4
    f960:	4620      	mov	r0, r4
    f962:	f00a fa55 	bl	19e10 <lll_csrand_get>
	return ((uint16_t)src[1] << 8) | src[0];
    f966:	7863      	ldrb	r3, [r4, #1]
    f968:	78e2      	ldrb	r2, [r4, #3]
    f96a:	f894 c002 	ldrb.w	ip, [r4, #2]
    f96e:	7820      	ldrb	r0, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    f970:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
    f974:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	transitions = 0U;
    f978:	f04f 0800 	mov.w	r8, #0
    f97c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
	ones_count_lsb8 = 0U;
    f980:	46c3      	mov	fp, r8
	consecutive_bit = (aa >> bit_idx) & 0x01;
    f982:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
	transitions_lsb16 = 0U;
    f986:	46c1      	mov	r9, r8
	consecutive_bit = (aa >> bit_idx) & 0x01;
    f988:	231e      	movs	r3, #30
	consecutive_cnt = 1U;
    f98a:	f04f 0a01 	mov.w	sl, #1
    f98e:	e01a      	b.n	f9c6 <util_aa_le32+0x76>
			transitions++;
    f990:	f108 0101 	add.w	r1, r8, #1
			if (bit_idx < 15) {
    f994:	2b0e      	cmp	r3, #14
			transitions++;
    f996:	b2c9      	uxtb	r1, r1
			if (bit_idx < 15) {
    f998:	fa5f fc83 	uxtb.w	ip, r3
    f99c:	f240 808a 	bls.w	fab4 <util_aa_le32+0x164>
		if ((consecutive_cnt > 6) ||
    f9a0:	b3ca      	cbz	r2, fa16 <util_aa_le32+0xc6>
    f9a2:	4694      	mov	ip, r2
    f9a4:	46ce      	mov	lr, r9
		    ((consecutive_cnt < 6) &&
    f9a6:	2b1c      	cmp	r3, #28
    f9a8:	f240 811d 	bls.w	fbe6 <util_aa_le32+0x296>
		     (((bit_idx < 29) && (transitions < 1)) ||
    f9ac:	2b1b      	cmp	r3, #27
    f9ae:	f240 80f0 	bls.w	fb92 <util_aa_le32+0x242>
		if ((transitions > 24) ||
    f9b2:	2919      	cmp	r1, #25
    f9b4:	d039      	beq.n	fa2a <util_aa_le32+0xda>
					   (ones_count_lsb8 < 3)))) ||
    f9b6:	4688      	mov	r8, r1
    f9b8:	4692      	mov	sl, r2
		    (transitions_lsb16 > 11) ||
    f9ba:	f1be 0f0c 	cmp.w	lr, #12
					   (ones_count_lsb8 < 3)))) ||
    f9be:	46f1      	mov	r9, lr
		    (transitions_lsb16 > 11) ||
    f9c0:	d033      	beq.n	fa2a <util_aa_le32+0xda>
	while (bit_idx--) {
    f9c2:	3b01      	subs	r3, #1
    f9c4:	d339      	bcc.n	fa3a <util_aa_le32+0xea>
		bit = (aa >> bit_idx) & 0x01;
    f9c6:	fa20 f203 	lsr.w	r2, r0, r3
    f9ca:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
    f9ce:	4562      	cmp	r2, ip
    f9d0:	d1de      	bne.n	f990 <util_aa_le32+0x40>
			consecutive_cnt++;
    f9d2:	f10a 0201 	add.w	r2, sl, #1
		if ((bit_idx < 8) && consecutive_bit) {
    f9d6:	2b07      	cmp	r3, #7
			consecutive_cnt++;
    f9d8:	b2d2      	uxtb	r2, r2
		if ((bit_idx < 8) && consecutive_bit) {
    f9da:	f240 80c4 	bls.w	fb66 <util_aa_le32+0x216>
		if ((consecutive_cnt > 6) ||
    f9de:	2a06      	cmp	r2, #6
    f9e0:	d977      	bls.n	fad2 <util_aa_le32+0x182>
			if (consecutive_bit) {
    f9e2:	fa06 f203 	lsl.w	r2, r6, r3
    f9e6:	f1bc 0f00 	cmp.w	ip, #0
    f9ea:	d051      	beq.n	fa90 <util_aa_le32+0x140>
				aa &= ~BIT(bit_idx);
    f9ec:	ea20 0002 	bic.w	r0, r0, r2
    f9f0:	46ce      	mov	lr, r9
				consecutive_bit = 0U;
    f9f2:	f04f 0c00 	mov.w	ip, #0
				transitions++;
    f9f6:	f108 0101 	add.w	r1, r8, #1
			if (bit_idx < 15) {
    f9fa:	2b0e      	cmp	r3, #14
				transitions++;
    f9fc:	b2c9      	uxtb	r1, r1
				consecutive_cnt = 1U;
    f9fe:	bf88      	it	hi
    fa00:	2201      	movhi	r2, #1
			if (bit_idx < 15) {
    fa02:	d8d6      	bhi.n	f9b2 <util_aa_le32+0x62>
				if (transitions_lsb16 !=
    fa04:	45f1      	cmp	r9, lr
    fa06:	f000 80a1 	beq.w	fb4c <util_aa_le32+0x1fc>
		if ((transitions > 24) ||
    fa0a:	2919      	cmp	r1, #25
    fa0c:	d00d      	beq.n	fa2a <util_aa_le32+0xda>
    fa0e:	4688      	mov	r8, r1
				consecutive_cnt = 1U;
    fa10:	f04f 0a01 	mov.w	sl, #1
    fa14:	e7d5      	b.n	f9c2 <util_aa_le32+0x72>
		if ((consecutive_cnt > 6) ||
    fa16:	46ce      	mov	lr, r9
			consecutive_cnt = 1U;
    fa18:	2201      	movs	r2, #1
		    (!consecutive_bit && (((bit_idx < 6) &&
    fa1a:	2b05      	cmp	r3, #5
    fa1c:	d975      	bls.n	fb0a <util_aa_le32+0x1ba>
					   (ones_count_lsb8 < 3)))) ||
    fa1e:	2a06      	cmp	r2, #6
    fa20:	d154      	bne.n	facc <util_aa_le32+0x17c>
		if ((transitions > 24) ||
    fa22:	2919      	cmp	r1, #25
					   (ones_count_lsb8 < 3)))) ||
    fa24:	f04f 0c00 	mov.w	ip, #0
		if ((transitions > 24) ||
    fa28:	d1c5      	bne.n	f9b6 <util_aa_le32+0x66>
			if (consecutive_bit) {
    fa2a:	3301      	adds	r3, #1
    fa2c:	fa06 f303 	lsl.w	r3, r6, r3
    fa30:	f1bc 0f00 	cmp.w	ip, #0
    fa34:	d053      	beq.n	fade <util_aa_le32+0x18e>
				aa &= ~(BIT(bit_idx + 1) - 1);
    fa36:	425b      	negs	r3, r3
    fa38:	4018      	ands	r0, r3
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
    fa3a:	ea80 0305 	eor.w	r3, r0, r5
    fa3e:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
    fa40:	f10d 0c04 	add.w	ip, sp, #4
    fa44:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
    fa48:	2200      	movs	r2, #0
		bite = *octets;
    fa4a:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
    fa4e:	b13b      	cbz	r3, fa60 <util_aa_le32+0x110>
			bite &= (bite - 1);
    fa50:	b25b      	sxtb	r3, r3
    fa52:	1e59      	subs	r1, r3, #1
    fa54:	400b      	ands	r3, r1
			one_count++;
    fa56:	3201      	adds	r2, #1
		while (bite) {
    fa58:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    fa5c:	b2d2      	uxtb	r2, r2
		while (bite) {
    fa5e:	d1f7      	bne.n	fa50 <util_aa_le32+0x100>
	while (octets_len--) {
    fa60:	45f4      	cmp	ip, lr
    fa62:	d1f2      	bne.n	fa4a <util_aa_le32+0xfa>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
    fa64:	2a01      	cmp	r2, #1
    fa66:	d909      	bls.n	fa7c <util_aa_le32+0x12c>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
    fa68:	b283      	uxth	r3, r0
    fa6a:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
    fa6e:	ea4f 4210 	mov.w	r2, r0, lsr #16
    fa72:	d137      	bne.n	fae4 <util_aa_le32+0x194>
	    !((aa & 0xFF) ^ (aa >> 24))) {
    fa74:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
    fa76:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
    fa7a:	d133      	bne.n	fae4 <util_aa_le32+0x194>
	if (!retry) {
    fa7c:	3f01      	subs	r7, #1
    fa7e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    fa82:	f47f af6c 	bne.w	f95e <util_aa_le32+0xe>
		return -EFAULT;
    fa86:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
    fa8a:	b003      	add	sp, #12
    fa8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				aa |= BIT(bit_idx);
    fa90:	4310      	orrs	r0, r2
    fa92:	4641      	mov	r1, r8
    fa94:	46ce      	mov	lr, r9
				consecutive_bit = 1U;
    fa96:	f04f 0c01 	mov.w	ip, #1
			if (transitions != transitions_prev) {
    fa9a:	4588      	cmp	r8, r1
    fa9c:	d0ab      	beq.n	f9f6 <util_aa_le32+0xa6>
			if (bit_idx < 15) {
    fa9e:	2b0e      	cmp	r3, #14
    faa0:	d88b      	bhi.n	f9ba <util_aa_le32+0x6a>
				if (transitions_lsb16 !=
    faa2:	45ce      	cmp	lr, r9
    faa4:	d18d      	bne.n	f9c2 <util_aa_le32+0x72>
    faa6:	4641      	mov	r1, r8
					transitions_lsb16++;
    faa8:	f10e 0e01 	add.w	lr, lr, #1
    faac:	fa5f fe8e 	uxtb.w	lr, lr
    fab0:	4652      	mov	r2, sl
    fab2:	e77e      	b.n	f9b2 <util_aa_le32+0x62>
				transitions_lsb16++;
    fab4:	f109 0e01 	add.w	lr, r9, #1
		if ((bit_idx < 8) && consecutive_bit) {
    fab8:	f1bc 0f07 	cmp.w	ip, #7
				transitions_lsb16++;
    fabc:	fa5f fe8e 	uxtb.w	lr, lr
		if ((bit_idx < 8) && consecutive_bit) {
    fac0:	f240 8094 	bls.w	fbec <util_aa_le32+0x29c>
		if ((consecutive_cnt > 6) ||
    fac4:	2a00      	cmp	r2, #0
    fac6:	f040 809a 	bne.w	fbfe <util_aa_le32+0x2ae>
			consecutive_cnt = 1U;
    faca:	2201      	movs	r2, #1
    facc:	f04f 0c00 	mov.w	ip, #0
    fad0:	e769      	b.n	f9a6 <util_aa_le32+0x56>
		if ((consecutive_cnt > 6) ||
    fad2:	f1bc 0f00 	cmp.w	ip, #0
    fad6:	d110      	bne.n	fafa <util_aa_le32+0x1aa>
    fad8:	4641      	mov	r1, r8
    fada:	46ce      	mov	lr, r9
    fadc:	e79f      	b.n	fa1e <util_aa_le32+0xce>
				aa |= (BIT(bit_idx + 1) - 1);
    fade:	3b01      	subs	r3, #1
    fae0:	4318      	orrs	r0, r3
    fae2:	e7aa      	b.n	fa3a <util_aa_le32+0xea>
	dst[1] = val >> 8;
    fae4:	f3c0 2107 	ubfx	r1, r0, #8, #8
    fae8:	0a13      	lsrs	r3, r2, #8
	dst[0] = val;
    faea:	7020      	strb	r0, [r4, #0]
	return 0;
    faec:	2000      	movs	r0, #0
	dst[1] = val >> 8;
    faee:	7061      	strb	r1, [r4, #1]
	dst[0] = val;
    faf0:	70a2      	strb	r2, [r4, #2]
	dst[1] = val >> 8;
    faf2:	70e3      	strb	r3, [r4, #3]
}
    faf4:	b003      	add	sp, #12
    faf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					   (ones_count_lsb8 < 3)))) ||
    fafa:	2a06      	cmp	r2, #6
    fafc:	d102      	bne.n	fb04 <util_aa_le32+0x1b4>
    fafe:	4641      	mov	r1, r8
    fb00:	46ce      	mov	lr, r9
    fb02:	e758      	b.n	f9b6 <util_aa_le32+0x66>
    fb04:	4641      	mov	r1, r8
    fb06:	46ce      	mov	lr, r9
    fb08:	e74d      	b.n	f9a6 <util_aa_le32+0x56>
		    (!consecutive_bit && (((bit_idx < 6) &&
    fb0a:	f1bb 0f00 	cmp.w	fp, #0
    fb0e:	d00c      	beq.n	fb2a <util_aa_le32+0x1da>
					   (ones_count_lsb8 < 1)) ||
    fb10:	f1bc 0f04 	cmp.w	ip, #4
    fb14:	d883      	bhi.n	fa1e <util_aa_le32+0xce>
					  ((bit_idx < 5) &&
    fb16:	f1bb 0f01 	cmp.w	fp, #1
    fb1a:	d906      	bls.n	fb2a <util_aa_le32+0x1da>
					   (ones_count_lsb8 < 2)) ||
    fb1c:	f1bc 0f03 	cmp.w	ip, #3
    fb20:	f63f af7d 	bhi.w	fa1e <util_aa_le32+0xce>
					  ((bit_idx < 4) &&
    fb24:	f1bb 0f02 	cmp.w	fp, #2
    fb28:	d809      	bhi.n	fb3e <util_aa_le32+0x1ee>
				aa |= BIT(bit_idx);
    fb2a:	fa06 f203 	lsl.w	r2, r6, r3
    fb2e:	4310      	orrs	r0, r2
					ones_count_lsb8++;
    fb30:	f10b 0b01 	add.w	fp, fp, #1
    fb34:	fa5f fb8b 	uxtb.w	fp, fp
				consecutive_bit = 1U;
    fb38:	f04f 0c01 	mov.w	ip, #1
    fb3c:	e7ad      	b.n	fa9a <util_aa_le32+0x14a>
					   (ones_count_lsb8 < 3)))) ||
    fb3e:	2a06      	cmp	r2, #6
    fb40:	f43f af6f 	beq.w	fa22 <util_aa_le32+0xd2>
		     (((bit_idx < 29) && (transitions < 1)) ||
    fb44:	b129      	cbz	r1, fb52 <util_aa_le32+0x202>
    fb46:	f04f 0c00 	mov.w	ip, #0
    fb4a:	e72f      	b.n	f9ac <util_aa_le32+0x5c>
				consecutive_cnt = 1U;
    fb4c:	f04f 0a01 	mov.w	sl, #1
    fb50:	e7aa      	b.n	faa8 <util_aa_le32+0x158>
			if (consecutive_bit) {
    fb52:	fa06 f203 	lsl.w	r2, r6, r3
				if (bit_idx < 8) {
    fb56:	2b07      	cmp	r3, #7
				aa |= BIT(bit_idx);
    fb58:	ea40 0002 	orr.w	r0, r0, r2
				consecutive_bit = 1U;
    fb5c:	bf88      	it	hi
    fb5e:	f04f 0c01 	movhi.w	ip, #1
				if (bit_idx < 8) {
    fb62:	d89a      	bhi.n	fa9a <util_aa_le32+0x14a>
    fb64:	e7e4      	b.n	fb30 <util_aa_le32+0x1e0>
		if ((bit_idx < 8) && consecutive_bit) {
    fb66:	f1bc 0f00 	cmp.w	ip, #0
    fb6a:	d02a      	beq.n	fbc2 <util_aa_le32+0x272>
			ones_count_lsb8++;
    fb6c:	f10b 0b01 	add.w	fp, fp, #1
		if ((consecutive_cnt > 6) ||
    fb70:	2a06      	cmp	r2, #6
			ones_count_lsb8++;
    fb72:	fa5f fb8b 	uxtb.w	fp, fp
		if ((consecutive_cnt > 6) ||
    fb76:	d91d      	bls.n	fbb4 <util_aa_le32+0x264>
				aa &= ~BIT(bit_idx);
    fb78:	fa06 f203 	lsl.w	r2, r6, r3
    fb7c:	ea20 0002 	bic.w	r0, r0, r2
    fb80:	4641      	mov	r1, r8
    fb82:	46ce      	mov	lr, r9
					ones_count_lsb8--;
    fb84:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    fb88:	fa5f fb8b 	uxtb.w	fp, fp
				consecutive_bit = 0U;
    fb8c:	f04f 0c00 	mov.w	ip, #0
    fb90:	e783      	b.n	fa9a <util_aa_le32+0x14a>
		      ((bit_idx < 28) && (transitions < 2))))) {
    fb92:	2901      	cmp	r1, #1
    fb94:	f63f af0d 	bhi.w	f9b2 <util_aa_le32+0x62>
			if (consecutive_bit) {
    fb98:	fa06 f203 	lsl.w	r2, r6, r3
    fb9c:	f1bc 0f00 	cmp.w	ip, #0
    fba0:	d0d9      	beq.n	fb56 <util_aa_le32+0x206>
				if (bit_idx < 8) {
    fba2:	2b07      	cmp	r3, #7
				aa &= ~BIT(bit_idx);
    fba4:	ea20 0002 	bic.w	r0, r0, r2
				consecutive_bit = 0U;
    fba8:	bf88      	it	hi
    fbaa:	f04f 0c00 	movhi.w	ip, #0
				if (bit_idx < 8) {
    fbae:	f63f af74 	bhi.w	fa9a <util_aa_le32+0x14a>
    fbb2:	e7e7      	b.n	fb84 <util_aa_le32+0x234>
					   (ones_count_lsb8 < 3)))) ||
    fbb4:	d0a3      	beq.n	fafe <util_aa_le32+0x1ae>
		     (((bit_idx < 29) && (transitions < 1)) ||
    fbb6:	f1b8 0f00 	cmp.w	r8, #0
    fbba:	d00a      	beq.n	fbd2 <util_aa_le32+0x282>
    fbbc:	4641      	mov	r1, r8
    fbbe:	46ce      	mov	lr, r9
    fbc0:	e6f4      	b.n	f9ac <util_aa_le32+0x5c>
		if ((consecutive_cnt > 6) ||
    fbc2:	2a06      	cmp	r2, #6
    fbc4:	d90a      	bls.n	fbdc <util_aa_le32+0x28c>
				aa |= BIT(bit_idx);
    fbc6:	fa06 f203 	lsl.w	r2, r6, r3
    fbca:	4310      	orrs	r0, r2
    fbcc:	4641      	mov	r1, r8
    fbce:	46ce      	mov	lr, r9
    fbd0:	e7ae      	b.n	fb30 <util_aa_le32+0x1e0>
			if (consecutive_bit) {
    fbd2:	fa06 f203 	lsl.w	r2, r6, r3
		     (((bit_idx < 29) && (transitions < 1)) ||
    fbd6:	4641      	mov	r1, r8
    fbd8:	46ce      	mov	lr, r9
    fbda:	e7e2      	b.n	fba2 <util_aa_le32+0x252>
		if ((consecutive_cnt > 6) ||
    fbdc:	4641      	mov	r1, r8
    fbde:	46ce      	mov	lr, r9
    fbe0:	fa5f fc83 	uxtb.w	ip, r3
    fbe4:	e719      	b.n	fa1a <util_aa_le32+0xca>
		     (((bit_idx < 29) && (transitions < 1)) ||
    fbe6:	2900      	cmp	r1, #0
    fbe8:	d0d6      	beq.n	fb98 <util_aa_le32+0x248>
    fbea:	e6df      	b.n	f9ac <util_aa_le32+0x5c>
		if ((bit_idx < 8) && consecutive_bit) {
    fbec:	2a00      	cmp	r2, #0
    fbee:	f43f af13 	beq.w	fa18 <util_aa_le32+0xc8>
			ones_count_lsb8++;
    fbf2:	f10b 0b01 	add.w	fp, fp, #1
    fbf6:	fa5f fb8b 	uxtb.w	fp, fp
    fbfa:	4694      	mov	ip, r2
    fbfc:	e6d6      	b.n	f9ac <util_aa_le32+0x5c>
		      ((bit_idx < 28) && (transitions < 2))))) {
    fbfe:	2901      	cmp	r1, #1
    fc00:	d001      	beq.n	fc06 <util_aa_le32+0x2b6>
    fc02:	4694      	mov	ip, r2
    fc04:	e6d5      	b.n	f9b2 <util_aa_le32+0x62>
			if (consecutive_bit) {
    fc06:	fa01 f203 	lsl.w	r2, r1, r3
    fc0a:	e7ca      	b.n	fba2 <util_aa_le32+0x252>
    fc0c:	8e89bed6 	.word	0x8e89bed6

0000fc10 <ticker_worker>:
 *
 * @param param Pointer to ticker instance
 *
 */
void ticker_worker(void *param)
{
    fc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1U;
	if (instance->job_guard) {
    fc14:	7f82      	ldrb	r2, [r0, #30]
{
    fc16:	b08d      	sub	sp, #52	; 0x34
	instance->worker_trigger = 1U;
    fc18:	2301      	movs	r3, #1
	if (instance->job_guard) {
    fc1a:	9204      	str	r2, [sp, #16]
	instance->worker_trigger = 1U;
    fc1c:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    fc1e:	2a00      	cmp	r2, #0
    fc20:	d15b      	bne.n	fcda <ticker_worker+0xca>
		return;
	}

	/* If no tickers queued (active), do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    fc22:	7f43      	ldrb	r3, [r0, #29]
    fc24:	2bff      	cmp	r3, #255	; 0xff
    fc26:	4681      	mov	r9, r0
    fc28:	d056      	beq.n	fcd8 <ticker_worker+0xc8>
		instance->worker_trigger = 0U;
		return;
	}

	/* Get ticks elapsed since last job execution */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    fc2a:	f00c f9fd 	bl	1c028 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fc2e:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    fc32:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    fc36:	f899 601d 	ldrb.w	r6, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fc3a:	1a80      	subs	r0, r0, r2
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    fc3c:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fc3e:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    fc42:	f000 813b 	beq.w	febc <ticker_worker+0x2ac>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    fc46:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    fc4a:	455b      	cmp	r3, fp
    fc4c:	bf94      	ite	ls
    fc4e:	2300      	movls	r3, #0
    fc50:	2301      	movhi	r3, #1
    fc52:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
    fc54:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
    fc56:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_expired = 0U;
    fc5a:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
    fc5e:	d046      	beq.n	fcee <ticker_worker+0xde>
			must_expire_skip = 1U;
    fc60:	f8cd 9008 	str.w	r9, [sp, #8]
		ticker = &node[ticker_id_head];
    fc64:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    fc68:	eb07 1406 	add.w	r4, r7, r6, lsl #4
    fc6c:	0136      	lsls	r6, r6, #4
		ticks_to_expire = ticker->ticks_to_expire;
    fc6e:	68a2      	ldr	r2, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    fc70:	455a      	cmp	r2, fp
    fc72:	d83a      	bhi.n	fcea <ticker_worker+0xda>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    fc74:	f894 a002 	ldrb.w	sl, [r4, #2]
    fc78:	7863      	ldrb	r3, [r4, #1]
		ticker_id_head = ticker->next;
    fc7a:	5dbe      	ldrb	r6, [r7, r6]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    fc7c:	eba3 030a 	sub.w	r3, r3, sl
    fc80:	b2db      	uxtb	r3, r3
    fc82:	2b01      	cmp	r3, #1
		ticks_elapsed -= ticks_to_expire;
    fc84:	ebab 0b02 	sub.w	fp, fp, r2
		ticks_expired += ticks_to_expire;
    fc88:	4490      	add	r8, r2
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    fc8a:	d12c      	bne.n	fce6 <ticker_worker+0xd6>
		if (ticker->ticks_slot != 0U &&
    fc8c:	69a0      	ldr	r0, [r4, #24]
    fc8e:	2800      	cmp	r0, #0
    fc90:	d056      	beq.n	fd40 <ticker_worker+0x130>
    fc92:	9b01      	ldr	r3, [sp, #4]
    fc94:	2b00      	cmp	r3, #0
    fc96:	f000 808d 	beq.w	fdb4 <ticker_worker+0x1a4>
    fc9a:	8be3      	ldrh	r3, [r4, #30]
    fc9c:	9303      	str	r3, [sp, #12]
			struct ticker_ext *ext_data = ticker->ext_data;
    fc9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    fca0:	b13b      	cbz	r3, fcb2 <ticker_worker+0xa2>
    fca2:	681a      	ldr	r2, [r3, #0]
    fca4:	b11a      	cbz	r2, fcae <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
    fca6:	7a1a      	ldrb	r2, [r3, #8]
    fca8:	2a00      	cmp	r2, #0
    fcaa:	f000 80f4 	beq.w	fe96 <ticker_worker+0x286>
				ext_data->reschedule_state =
    fcae:	2200      	movs	r2, #0
    fcb0:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
    fcb2:	9a03      	ldr	r2, [sp, #12]
			if ((ticker->must_expire == 0U) ||
    fcb4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    fcb8:	3201      	adds	r2, #1
    fcba:	b292      	uxth	r2, r2
    fcbc:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    fcbe:	b179      	cbz	r1, fce0 <ticker_worker+0xd0>
    fcc0:	8ba1      	ldrh	r1, [r4, #28]
    fcc2:	4291      	cmp	r1, r2
    fcc4:	d20c      	bcs.n	fce0 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    fcc6:	2b00      	cmp	r3, #0
    fcc8:	f000 80fb 	beq.w	fec2 <ticker_worker+0x2b2>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    fccc:	7a1a      	ldrb	r2, [r3, #8]
    fcce:	2a01      	cmp	r2, #1
    fcd0:	d006      	beq.n	fce0 <ticker_worker+0xd0>
			must_expire_skip = 1U;
    fcd2:	f04f 0c01 	mov.w	ip, #1
    fcd6:	e037      	b.n	fd48 <ticker_worker+0x138>
		instance->worker_trigger = 0U;
    fcd8:	77c2      	strb	r2, [r0, #31]
}
    fcda:	b00d      	add	sp, #52	; 0x34
    fcdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
    fce0:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    fce4:	70a3      	strb	r3, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    fce6:	2eff      	cmp	r6, #255	; 0xff
    fce8:	d1bc      	bne.n	fc64 <ticker_worker+0x54>
    fcea:	f8dd 9008 	ldr.w	r9, [sp, #8]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    fcee:	f899 300b 	ldrb.w	r3, [r9, #11]
    fcf2:	f899 200a 	ldrb.w	r2, [r9, #10]
    fcf6:	429a      	cmp	r2, r3
    fcf8:	d10a      	bne.n	fd10 <ticker_worker+0x100>
	uint8_t idx = *ticks_elapsed_index + 1;
    fcfa:	3201      	adds	r2, #1
    fcfc:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    fcfe:	2a02      	cmp	r2, #2
    fd00:	bf1c      	itt	ne
    fd02:	4613      	movne	r3, r2
    fd04:	9304      	strne	r3, [sp, #16]
	*ticks_elapsed_index = idx;
    fd06:	9a04      	ldr	r2, [sp, #16]
    fd08:	f889 200b 	strb.w	r2, [r9, #11]
    fd0c:	bf08      	it	eq
    fd0e:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    fd10:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    fd14:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    fd18:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
    fd1c:	2200      	movs	r2, #0
    fd1e:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    fd22:	464b      	mov	r3, r9
    fd24:	2201      	movs	r2, #1
    fd26:	2104      	movs	r1, #4
    fd28:	2003      	movs	r0, #3
    fd2a:	46a4      	mov	ip, r4
}
    fd2c:	b00d      	add	sp, #52	; 0x34
    fd2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    fd32:	4760      	bx	ip
    fd34:	e9dd b809 	ldrd	fp, r8, [sp, #36]	; 0x24
    fd38:	f8dd a020 	ldr.w	sl, [sp, #32]
    fd3c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    fd3e:	464c      	mov	r4, r9
		if (ticker->ext_data) {
    fd40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fd42:	b1db      	cbz	r3, fd7c <ticker_worker+0x16c>
    fd44:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
    fd48:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
    fd4a:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
    fd4c:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
    fd4e:	605a      	str	r2, [r3, #4]
		ticker->ack--;
    fd50:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    fd54:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    fd56:	2d00      	cmp	r5, #0
    fd58:	d0c5      	beq.n	fce6 <ticker_worker+0xd6>
					   ticks_expired -
    fd5a:	9b02      	ldr	r3, [sp, #8]
    fd5c:	6962      	ldr	r2, [r4, #20]
    fd5e:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    fd60:	6a61      	ldr	r1, [r4, #36]	; 0x24
    fd62:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    fd64:	eba8 0202 	sub.w	r2, r8, r2
    fd68:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    fd6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    fd6e:	f1bc 0f00 	cmp.w	ip, #0
    fd72:	d013      	beq.n	fd9c <ticker_worker+0x18c>
    fd74:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fd78:	47a8      	blx	r5
			if (must_expire_skip == 0U) {
    fd7a:	e7b4      	b.n	fce6 <ticker_worker+0xd6>
		if (ticker->timeout_func) {
    fd7c:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    fd7e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    fd82:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    fd84:	2d00      	cmp	r5, #0
    fd86:	d0ae      	beq.n	fce6 <ticker_worker+0xd6>
					   ticks_expired -
    fd88:	9b02      	ldr	r3, [sp, #8]
    fd8a:	6962      	ldr	r2, [r4, #20]
    fd8c:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    fd8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    fd90:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    fd92:	eba8 0202 	sub.w	r2, r8, r2
    fd96:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    fd98:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    fd9c:	8be2      	ldrh	r2, [r4, #30]
    fd9e:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    fda0:	69a2      	ldr	r2, [r4, #24]
				ticker->lazy_current = 0U;
    fda2:	2300      	movs	r3, #0
					slot_reserved = 1U;
    fda4:	429a      	cmp	r2, r3
    fda6:	9a01      	ldr	r2, [sp, #4]
				ticker->lazy_current = 0U;
    fda8:	83e3      	strh	r3, [r4, #30]
					slot_reserved = 1U;
    fdaa:	bf18      	it	ne
    fdac:	2201      	movne	r2, #1
    fdae:	9201      	str	r2, [sp, #4]
				ticker->force = 0U;
    fdb0:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
    fdb2:	e798      	b.n	fce6 <ticker_worker+0xd6>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    fdb4:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    fdb8:	9305      	str	r3, [sp, #20]
    fdba:	3380      	adds	r3, #128	; 0x80
    fdbc:	d0c0      	beq.n	fd40 <ticker_worker+0x130>
    fdbe:	2eff      	cmp	r6, #255	; 0xff
    fdc0:	d0be      	beq.n	fd40 <ticker_worker+0x130>
		int32_t lazy_current = ticker->lazy_current;
    fdc2:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    fdc4:	8ba2      	ldrh	r2, [r4, #28]
		int32_t lazy_current = ticker->lazy_current;
    fdc6:	9303      	str	r3, [sp, #12]
		if (lazy_current >= ticker->lazy_periodic) {
    fdc8:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
    fdca:	bf28      	it	cs
    fdcc:	1a9b      	subcs	r3, r3, r2
				(lazy_current - ticker->priority);
    fdce:	9905      	ldr	r1, [sp, #20]
		uint32_t current_age = ticker->ticks_periodic +
    fdd0:	6862      	ldr	r2, [r4, #4]
		uint32_t acc_ticks_to_expire = 0U;
    fdd2:	f8cd a020 	str.w	sl, [sp, #32]
				(lazy_current - ticker->priority);
    fdd6:	1a59      	subs	r1, r3, r1
		uint32_t current_age = ticker->ticks_periodic +
    fdd8:	fb03 2302 	mla	r3, r3, r2, r2
    fddc:	9306      	str	r3, [sp, #24]
		uint32_t acc_ticks_to_expire = 0U;
    fdde:	e9cd b809 	strd	fp, r8, [sp, #36]	; 0x24
				(lazy_current - ticker->priority);
    fde2:	9107      	str	r1, [sp, #28]
		uint32_t current_age = ticker->ticks_periodic +
    fde4:	4633      	mov	r3, r6
		uint32_t acc_ticks_to_expire = 0U;
    fde6:	2500      	movs	r5, #0
    fde8:	46a1      	mov	r9, r4
    fdea:	960b      	str	r6, [sp, #44]	; 0x2c
    fdec:	9200      	str	r2, [sp, #0]
    fdee:	e02c      	b.n	fe4a <ticker_worker+0x23a>
				(ticker->ticks_periodic == 0U) ||
    fdf0:	9c00      	ldr	r4, [sp, #0]
					  0U :
    fdf2:	ebaa 0808 	sub.w	r8, sl, r8
				(ticker->ticks_periodic == 0U) ||
    fdf6:	2c00      	cmp	r4, #0
    fdf8:	d048      	beq.n	fe8c <ticker_worker+0x27c>
    fdfa:	9c06      	ldr	r4, [sp, #24]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    fdfc:	fb0a 880c 	mla	r8, sl, ip, r8
				(ticker->ticks_periodic == 0U) ||
    fe00:	4544      	cmp	r4, r8
    fe02:	bf8c      	ite	hi
    fe04:	f04f 0801 	movhi.w	r8, #1
    fe08:	f04f 0800 	movls.w	r8, #0
					(ticker->ticks_periodic != 0U) &&
    fe0c:	bf34      	ite	cc
    fe0e:	f04f 0a01 	movcc.w	sl, #1
    fe12:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
    fe16:	42b1      	cmp	r1, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
    fe18:	f892 b003 	ldrb.w	fp, [r2, #3]
    fe1c:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
    fe20:	d30f      	bcc.n	fe42 <ticker_worker+0x232>
    fe22:	4593      	cmp	fp, r2
    fe24:	d843      	bhi.n	feae <ticker_worker+0x29e>
			    (next_force ||
    fe26:	f11e 0f80 	cmn.w	lr, #128	; 0x80
    fe2a:	d040      	beq.n	feae <ticker_worker+0x29e>
			     next_is_critical ||
    fe2c:	9a07      	ldr	r2, [sp, #28]
				(lazy_next - ticker_next->priority) >
    fe2e:	ebac 0c0e 	sub.w	ip, ip, lr
			     next_is_critical ||
    fe32:	4594      	cmp	ip, r2
    fe34:	dd02      	ble.n	fe3c <ticker_worker+0x22c>
			     (next_has_priority && !current_is_older) ||
    fe36:	f1b8 0f00 	cmp.w	r8, #0
    fe3a:	d038      	beq.n	feae <ticker_worker+0x29e>
    fe3c:	9a05      	ldr	r2, [sp, #20]
    fe3e:	4572      	cmp	r2, lr
    fe40:	d032      	beq.n	fea8 <ticker_worker+0x298>
			id_head = ticker_next->next;
    fe42:	5cfb      	ldrb	r3, [r7, r3]
		while (id_head != TICKER_NULL) {
    fe44:	2bff      	cmp	r3, #255	; 0xff
    fe46:	f43f af75 	beq.w	fd34 <ticker_worker+0x124>
			struct ticker_node *ticker_next = &nodes[id_head];
    fe4a:	b21b      	sxth	r3, r3
    fe4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    fe50:	eb07 1203 	add.w	r2, r7, r3, lsl #4
    fe54:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    fe56:	f8d2 8008 	ldr.w	r8, [r2, #8]
    fe5a:	4445      	add	r5, r8
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    fe5c:	42a8      	cmp	r0, r5
    fe5e:	f4ff af69 	bcc.w	fd34 <ticker_worker+0x124>
			if (ticker_next->ticks_slot == 0U) {
    fe62:	6991      	ldr	r1, [r2, #24]
    fe64:	2900      	cmp	r1, #0
    fe66:	d0ec      	beq.n	fe42 <ticker_worker+0x232>
			int32_t lazy_next = ticker_next->lazy_current;
    fe68:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    fe6a:	8b96      	ldrh	r6, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    fe6c:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
    fe70:	f992 e02d 	ldrsb.w	lr, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    fe74:	42b1      	cmp	r1, r6
			int32_t lazy_next = ticker_next->lazy_current;
    fe76:	468c      	mov	ip, r1
				lazy_next -= ticker_next->lazy_periodic;
    fe78:	bf28      	it	cs
    fe7a:	eba1 0c06 	subcs.w	ip, r1, r6
					  0U :
    fe7e:	f1ba 0f00 	cmp.w	sl, #0
    fe82:	d1b5      	bne.n	fdf0 <ticker_worker+0x1e0>
				(ticker->ticks_periodic == 0U) ||
    fe84:	9c00      	ldr	r4, [sp, #0]
					  0U :
    fe86:	46d0      	mov	r8, sl
				(ticker->ticks_periodic == 0U) ||
    fe88:	2c00      	cmp	r4, #0
    fe8a:	d1b6      	bne.n	fdfa <ticker_worker+0x1ea>
					(ticker->ticks_periodic != 0U) &&
    fe8c:	f8dd a000 	ldr.w	sl, [sp]
				(ticker->ticks_periodic == 0U) ||
    fe90:	f04f 0801 	mov.w	r8, #1
    fe94:	e7bf      	b.n	fe16 <ticker_worker+0x206>
			    TICKER_RESCHEDULE_STATE_NONE &&
    fe96:	8ba2      	ldrh	r2, [r4, #28]
    fe98:	9903      	ldr	r1, [sp, #12]
    fe9a:	428a      	cmp	r2, r1
    fe9c:	f63f af07 	bhi.w	fcae <ticker_worker+0x9e>
				ext_data->reschedule_state =
    fea0:	f04f 0201 	mov.w	r2, #1
    fea4:	721a      	strb	r2, [r3, #8]
    fea6:	e704      	b.n	fcb2 <ticker_worker+0xa2>
			     (equal_priority && next_is_older))) {
    fea8:	f1ba 0f00 	cmp.w	sl, #0
    feac:	d0c9      	beq.n	fe42 <ticker_worker+0x232>
    feae:	e9dd b809 	ldrd	fp, r8, [sp, #36]	; 0x24
    feb2:	f8dd a020 	ldr.w	sl, [sp, #32]
    feb6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    feb8:	464c      	mov	r4, r9
    feba:	e6f0      	b.n	fc9e <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
    febc:	9b04      	ldr	r3, [sp, #16]
    febe:	9301      	str	r3, [sp, #4]
    fec0:	e6c8      	b.n	fc54 <ticker_worker+0x44>
		if (ticker->timeout_func) {
    fec2:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    fec4:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    fec8:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    feca:	2d00      	cmp	r5, #0
    fecc:	f43f af0b 	beq.w	fce6 <ticker_worker+0xd6>
					   ticks_expired -
    fed0:	9b02      	ldr	r3, [sp, #8]
    fed2:	6960      	ldr	r0, [r4, #20]
    fed4:	695a      	ldr	r2, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    fed6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    fed8:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    feda:	eba8 0000 	sub.w	r0, r8, r0
    fede:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    fee0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    fee4:	e746      	b.n	fd74 <ticker_worker+0x164>
    fee6:	bf00      	nop

0000fee8 <ticker_job>:
	if (instance->worker_trigger) {
    fee8:	7fc2      	ldrb	r2, [r0, #31]
    feea:	2a00      	cmp	r2, #0
    feec:	f040 8619 	bne.w	10b22 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb23>
{
    fef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    fef4:	7a83      	ldrb	r3, [r0, #10]
    fef6:	7ac1      	ldrb	r1, [r0, #11]
{
    fef8:	b08f      	sub	sp, #60	; 0x3c
    fefa:	4683      	mov	fp, r0
	ticks_previous = instance->ticks_current;
    fefc:	6940      	ldr	r0, [r0, #20]
    fefe:	9005      	str	r0, [sp, #20]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    ff00:	4299      	cmp	r1, r3
	instance->job_guard = 1U;
    ff02:	f04f 0001 	mov.w	r0, #1
    ff06:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    ff0a:	f000 8096 	beq.w	1003a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3b>
	uint8_t idx = *ticks_elapsed_index + 1;
    ff0e:	4403      	add	r3, r0
    ff10:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    ff12:	2b02      	cmp	r3, #2
		idx = 0U;
    ff14:	bf08      	it	eq
    ff16:	4613      	moveq	r3, r2
		ticks_elapsed =
    ff18:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
    ff1c:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    ff20:	68d3      	ldr	r3, [r2, #12]
		instance->ticks_current += ticks_elapsed;
    ff22:	9a05      	ldr	r2, [sp, #20]
		ticks_elapsed =
    ff24:	9302      	str	r3, [sp, #8]
		instance->ticks_current += ticks_elapsed;
    ff26:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    ff28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ff2c:	f8cb 3014 	str.w	r3, [fp, #20]
		flag_elapsed = 1U;
    ff30:	2301      	movs	r3, #1
    ff32:	930d      	str	r3, [sp, #52]	; 0x34
	count_user = instance->count_user;
    ff34:	f89b 3009 	ldrb.w	r3, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    ff38:	f89b 201d 	ldrb.w	r2, [fp, #29]
    ff3c:	9206      	str	r2, [sp, #24]
	node = &instance->nodes[0];
    ff3e:	f8db 2000 	ldr.w	r2, [fp]
	users = &instance->users[0];
    ff42:	f8db 1004 	ldr.w	r1, [fp, #4]
	count_user = instance->count_user;
    ff46:	9307      	str	r3, [sp, #28]
	node = &instance->nodes[0];
    ff48:	9204      	str	r2, [sp, #16]
	while (count_user--) {
    ff4a:	461a      	mov	r2, r3
    ff4c:	3b01      	subs	r3, #1
	users = &instance->users[0];
    ff4e:	910c      	str	r1, [sp, #48]	; 0x30
	while (count_user--) {
    ff50:	b2db      	uxtb	r3, r3
    ff52:	2a00      	cmp	r2, #0
    ff54:	f000 8321 	beq.w	1059a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x59b>
    ff58:	eb01 06c3 	add.w	r6, r1, r3, lsl #3
	pending = 0U;
    ff5c:	2300      	movs	r3, #0
    ff5e:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    ff60:	23ff      	movs	r3, #255	; 0xff
    ff62:	9301      	str	r3, [sp, #4]
    ff64:	4637      	mov	r7, r6
    ff66:	46d9      	mov	r9, fp
		user_ops = &user->user_op[0];
    ff68:	687b      	ldr	r3, [r7, #4]
    ff6a:	9307      	str	r3, [sp, #28]
		while (user->middle != user->last) {
    ff6c:	f897 c003 	ldrb.w	ip, [r7, #3]
    ff70:	78bb      	ldrb	r3, [r7, #2]
    ff72:	46ba      	mov	sl, r7
    ff74:	9907      	ldr	r1, [sp, #28]
					ticks_used = 0;
    ff76:	4698      	mov	r8, r3
			user_op = &user_ops[user->middle];
    ff78:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    ff7c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			middle = user->middle + 1;
    ff80:	1c58      	adds	r0, r3, #1
		while (user->middle != user->last) {
    ff82:	4563      	cmp	r3, ip
			user_op = &user_ops[user->middle];
    ff84:	eb01 0582 	add.w	r5, r1, r2, lsl #2
			middle = user->middle + 1;
    ff88:	b2c3      	uxtb	r3, r0
		while (user->middle != user->last) {
    ff8a:	f000 8182 	beq.w	10292 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x293>
			if (middle == user->count_user_op) {
    ff8e:	f89a 0000 	ldrb.w	r0, [sl]
				middle = 0U;
    ff92:	4298      	cmp	r0, r3
    ff94:	bf08      	it	eq
    ff96:	2300      	moveq	r3, #0
			user->middle = middle;
    ff98:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    ff9c:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
    ffa0:	2a04      	cmp	r2, #4
    ffa2:	f240 8174 	bls.w	1028e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x28f>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    ffa6:	2a07      	cmp	r2, #7
    ffa8:	f200 8086 	bhi.w	100b8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb9>
			ticker = &node[user_op->id];
    ffac:	7869      	ldrb	r1, [r5, #1]
    ffae:	9c04      	ldr	r4, [sp, #16]
    ffb0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    ffb4:	eb04 1400 	add.w	r4, r4, r0, lsl #4
    ffb8:	0100      	lsls	r0, r0, #4
			state = (ticker->req - ticker->ack) & 0xff;
    ffba:	78a7      	ldrb	r7, [r4, #2]
			ticker = &node[user_op->id];
    ffbc:	900a      	str	r0, [sp, #40]	; 0x28
			state = (ticker->req - ticker->ack) & 0xff;
    ffbe:	7860      	ldrb	r0, [r4, #1]
    ffc0:	1bc0      	subs	r0, r0, r7
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    ffc2:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    ffc6:	d077      	beq.n	100b8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb9>
			    (state == 0U) ||
    ffc8:	2a05      	cmp	r2, #5
    ffca:	d065      	beq.n	10098 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x99>
			if (state == 1U) {
    ffcc:	2801      	cmp	r0, #1
    ffce:	d137      	bne.n	10040 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x41>
	previous = instance->ticker_id_head;
    ffd0:	f899 c01d 	ldrb.w	ip, [r9, #29]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    ffd4:	f8d9 6000 	ldr.w	r6, [r9]
	while (current != TICKER_NULL) {
    ffd8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    ffdc:	d017      	beq.n	1000e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf>
		ticker_current = &node[current];
    ffde:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		if (current == id) {
    ffe2:	4561      	cmp	r1, ip
		ticker_current = &node[current];
    ffe4:	eb06 1000 	add.w	r0, r6, r0, lsl #4
		if (current == id) {
    ffe8:	f000 8090 	beq.w	1010c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10d>
	total = 0U;
    ffec:	2300      	movs	r3, #0
    ffee:	e001      	b.n	fff4 <ticker_job+0x10c>
		if (current == id) {
    fff0:	4561      	cmp	r1, ip
    fff2:	d070      	beq.n	100d6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd7>
		total += ticker_current->ticks_to_expire;
    fff4:	46e6      	mov	lr, ip
		current = ticker_current->next;
    fff6:	f890 c000 	ldrb.w	ip, [r0]
		total += ticker_current->ticks_to_expire;
    fffa:	f8d0 8008 	ldr.w	r8, [r0, #8]
	while (current != TICKER_NULL) {
    fffe:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
		ticker_current = &node[current];
   10002:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		total += ticker_current->ticks_to_expire;
   10006:	4443      	add	r3, r8
		ticker_current = &node[current];
   10008:	eb06 1000 	add.w	r0, r6, r0, lsl #4
	while (current != TICKER_NULL) {
   1000c:	d1f0      	bne.n	fff0 <ticker_job+0x108>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   1000e:	2600      	movs	r6, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10010:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10012:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10014:	f000 8126 	beq.w	10264 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x265>
		ticker->req = ticker->ack;
   10018:	7067      	strb	r7, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   1001a:	f899 301c 	ldrb.w	r3, [r9, #28]
   1001e:	428b      	cmp	r3, r1
   10020:	d022      	beq.n	10068 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x69>
	if (user_op->fp_op_func) {
   10022:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10024:	2000      	movs	r0, #0
   10026:	7028      	strb	r0, [r5, #0]
	user_op->status = status;
   10028:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   1002a:	b10b      	cbz	r3, 10030 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x31>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1002c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1002e:	4798      	blx	r3
   10030:	f89a c003 	ldrb.w	ip, [sl, #3]
   10034:	f89a 3002 	ldrb.w	r3, [sl, #2]
   10038:	e79c      	b.n	ff74 <ticker_job+0x8c>
		flag_elapsed = 0U;
   1003a:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
   1003c:	9202      	str	r2, [sp, #8]
   1003e:	e779      	b.n	ff34 <ticker_job+0x4c>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   10040:	2104      	movs	r1, #4
   10042:	464b      	mov	r3, r9
   10044:	2201      	movs	r2, #1
   10046:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
   1004a:	4608      	mov	r0, r1
   1004c:	47a0      	blx	r4
	while (count_user--) {
   1004e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
				user->middle = prev;
   10050:	f88a 8002 	strb.w	r8, [sl, #2]
   10054:	4657      	mov	r7, sl
				pending = 1U;
   10056:	2301      	movs	r3, #1
	while (count_user--) {
   10058:	42ba      	cmp	r2, r7
				pending = 1U;
   1005a:	9308      	str	r3, [sp, #32]
   1005c:	f1a7 0308 	sub.w	r3, r7, #8
	while (count_user--) {
   10060:	f000 811e 	beq.w	102a0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2a1>
   10064:	461f      	mov	r7, r3
   10066:	e77f      	b.n	ff68 <ticker_job+0x80>
			instance->ticker_id_slot_previous = TICKER_NULL;
   10068:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   1006a:	2a07      	cmp	r2, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
   1006c:	f889 301c 	strb.w	r3, [r9, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   10070:	f040 81dd 	bne.w	1042e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x42f>
				ticks_at_stop =
   10074:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
   10076:	f8d9 3014 	ldr.w	r3, [r9, #20]
			if (!((ticks_at_stop - ticks_current) &
   1007a:	1ac2      	subs	r2, r0, r3
   1007c:	0214      	lsls	r4, r2, #8
   1007e:	f100 81cd 	bmi.w	1041c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x41d>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10082:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   10086:	9a02      	ldr	r2, [sp, #8]
   10088:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   1008a:	f8d9 2018 	ldr.w	r2, [r9, #24]
   1008e:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   10090:	bf88      	it	hi
   10092:	f8c9 3018 	strhi.w	r3, [r9, #24]
   10096:	e7c4      	b.n	10022 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x23>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   10098:	686e      	ldr	r6, [r5, #4]
   1009a:	2e00      	cmp	r6, #0
   1009c:	d196      	bne.n	ffcc <ticker_job+0xe4>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   1009e:	68ae      	ldr	r6, [r5, #8]
   100a0:	2e00      	cmp	r6, #0
   100a2:	d193      	bne.n	ffcc <ticker_job+0xe4>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   100a4:	68ee      	ldr	r6, [r5, #12]
   100a6:	2e00      	cmp	r6, #0
   100a8:	d190      	bne.n	ffcc <ticker_job+0xe4>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   100aa:	692e      	ldr	r6, [r5, #16]
   100ac:	2e00      	cmp	r6, #0
   100ae:	d18d      	bne.n	ffcc <ticker_job+0xe4>
			     (user_op->params.update.lazy == 0U) &&
   100b0:	696e      	ldr	r6, [r5, #20]
   100b2:	f036 467f 	bics.w	r6, r6, #4278190080	; 0xff000000
   100b6:	d189      	bne.n	ffcc <ticker_job+0xe4>
	if (user_op->fp_op_func) {
   100b8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   100ba:	2100      	movs	r1, #0
	user_op->status = status;
   100bc:	2001      	movs	r0, #1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   100be:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
   100c0:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   100c2:	2a00      	cmp	r2, #0
   100c4:	f43f af56 	beq.w	ff74 <ticker_job+0x8c>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   100c8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   100ca:	4790      	blx	r2
   100cc:	f89a c003 	ldrb.w	ip, [sl, #3]
   100d0:	f89a 3002 	ldrb.w	r3, [sl, #2]
   100d4:	e74e      	b.n	ff74 <ticker_job+0x8c>
	if (previous == current) {
   100d6:	eb0e 074e 	add.w	r7, lr, lr, lsl #1
   100da:	4571      	cmp	r1, lr
   100dc:	eb06 1707 	add.w	r7, r6, r7, lsl #4
   100e0:	d016      	beq.n	10110 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x111>
	node[previous].next = ticker_current->next;
   100e2:	7801      	ldrb	r1, [r0, #0]
	timeout = ticker_current->ticks_to_expire;
   100e4:	f8d0 c008 	ldr.w	ip, [r0, #8]
	node[previous].next = ticker_current->next;
   100e8:	7039      	strb	r1, [r7, #0]
	if (ticker_current->next != TICKER_NULL) {
   100ea:	29ff      	cmp	r1, #255	; 0xff
   100ec:	d006      	beq.n	100fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xfd>
		node[ticker_current->next].ticks_to_expire += timeout;
   100ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   100f2:	eb06 1101 	add.w	r1, r6, r1, lsl #4
   100f6:	6888      	ldr	r0, [r1, #8]
   100f8:	4460      	add	r0, ip
   100fa:	6088      	str	r0, [r1, #8]
	return (total + timeout);
   100fc:	eb0c 0603 	add.w	r6, ip, r3
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10100:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10102:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10104:	d009      	beq.n	1011a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11b>
   10106:	78a7      	ldrb	r7, [r4, #2]
   10108:	7869      	ldrb	r1, [r5, #1]
   1010a:	e785      	b.n	10018 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x19>
		if (current == id) {
   1010c:	4607      	mov	r7, r0
	total = 0U;
   1010e:	2300      	movs	r3, #0
		instance->ticker_id_head = ticker_current->next;
   10110:	7802      	ldrb	r2, [r0, #0]
   10112:	f889 201d 	strb.w	r2, [r9, #29]
   10116:	782a      	ldrb	r2, [r5, #0]
   10118:	e7e3      	b.n	100e2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe3>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   1011a:	f8d9 7014 	ldr.w	r7, [r9, #20]
   1011e:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
   10120:	f00b ff82 	bl	1c028 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10124:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10126:	eba0 0c07 	sub.w	ip, r0, r7
   1012a:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1012e:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_elapsed) {
   10130:	429e      	cmp	r6, r3
	ticks_now = cntr_cnt_get();
   10132:	4680      	mov	r8, r0
	if (ticks_to_expire > ticks_elapsed) {
   10134:	f240 80a2 	bls.w	1027c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x27d>
		ticks_to_expire -= ticks_elapsed;
   10138:	6962      	ldr	r2, [r4, #20]
   1013a:	1af3      	subs	r3, r6, r3
	if ((ticker->ticks_periodic != 0U) &&
   1013c:	6866      	ldr	r6, [r4, #4]
   1013e:	2e00      	cmp	r6, #0
   10140:	d053      	beq.n	101ea <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1eb>
	    (user_op->params.update.lazy != 0U)) {
   10142:	8aa8      	ldrh	r0, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
   10144:	2800      	cmp	r0, #0
   10146:	d050      	beq.n	101ea <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1eb>
		user_op->params.update.lazy--;
   10148:	3801      	subs	r0, #1
   1014a:	b280      	uxth	r0, r0
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1014c:	429e      	cmp	r6, r3
   1014e:	8be1      	ldrh	r1, [r4, #30]
		user_op->params.update.lazy--;
   10150:	82a8      	strh	r0, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10152:	d225      	bcs.n	101a0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1a1>
   10154:	f106 0b01 	add.w	fp, r6, #1
   10158:	920b      	str	r2, [sp, #44]	; 0x2c
   1015a:	e011      	b.n	10180 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x181>
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   1015c:	f100 70e8 	add.w	r0, r0, #30408704	; 0x1d00000
   10160:	f500 30d4 	add.w	r0, r0, #108544	; 0x1a800
   10164:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
   10168:	46de      	mov	lr, fp
	ticker->remainder_current -= ticker->remainder_periodic;
   1016a:	9a09      	ldr	r2, [sp, #36]	; 0x24
			ticker->lazy_current--;
   1016c:	3901      	subs	r1, #1
			ticks_to_expire -= ticker->ticks_periodic +
   1016e:	eba3 030e 	sub.w	r3, r3, lr
			ticker->lazy_current--;
   10172:	b289      	uxth	r1, r1
	ticker->remainder_current -= ticker->remainder_periodic;
   10174:	1a80      	subs	r0, r0, r2
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10176:	429e      	cmp	r6, r3
			ticker->lazy_current--;
   10178:	83e1      	strh	r1, [r4, #30]
	ticker->remainder_current -= ticker->remainder_periodic;
   1017a:	6260      	str	r0, [r4, #36]	; 0x24
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1017c:	d20e      	bcs.n	1019c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x19d>
   1017e:	8aa8      	ldrh	r0, [r5, #20]
   10180:	4281      	cmp	r1, r0
   10182:	f240 81b2 	bls.w	104ea <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4eb>
					   ticker_remainder_dec(ticker);
   10186:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
	if ((ticker->remainder_current >= BIT(31)) ||
   1018a:	f8df e2d0 	ldr.w	lr, [pc, #720]	; 1045c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x45d>
					   ticker_remainder_dec(ticker);
   1018e:	9209      	str	r2, [sp, #36]	; 0x24
	if ((ticker->remainder_current >= BIT(31)) ||
   10190:	4ab1      	ldr	r2, [pc, #708]	; (10458 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x459>)
   10192:	4486      	add	lr, r0
   10194:	4596      	cmp	lr, r2
   10196:	d8e1      	bhi.n	1015c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x15d>
   10198:	46b6      	mov	lr, r6
   1019a:	e7e6      	b.n	1016a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x16b>
   1019c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1019e:	8aa8      	ldrh	r0, [r5, #20]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   101a0:	4288      	cmp	r0, r1
   101a2:	d921      	bls.n	101e8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1e9>
					   ticker_remainder_inc(ticker);
   101a4:	6a20      	ldr	r0, [r4, #32]
   101a6:	9009      	str	r0, [sp, #36]	; 0x24
   101a8:	f106 0e01 	add.w	lr, r6, #1
   101ac:	920b      	str	r2, [sp, #44]	; 0x2c
   101ae:	e007      	b.n	101c0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1c1>
	ticker->remainder_current += ticker->remainder_periodic;
   101b0:	6260      	str	r0, [r4, #36]	; 0x24
   101b2:	46b3      	mov	fp, r6
		while (ticker->lazy_current < user_op->params.update.lazy) {
   101b4:	8aa8      	ldrh	r0, [r5, #20]
			ticker->lazy_current++;
   101b6:	3101      	adds	r1, #1
   101b8:	b289      	uxth	r1, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
   101ba:	4281      	cmp	r1, r0
			ticks_to_expire += ticker->ticks_periodic +
   101bc:	445b      	add	r3, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
   101be:	d211      	bcs.n	101e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1e5>
	ticker->remainder_current += ticker->remainder_periodic;
   101c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   101c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
   101c4:	f8df b294 	ldr.w	fp, [pc, #660]	; 1045c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x45d>
	ticker->remainder_current += ticker->remainder_periodic;
   101c8:	4410      	add	r0, r2
	if ((ticker->remainder_current < BIT(31)) &&
   101ca:	4aa3      	ldr	r2, [pc, #652]	; (10458 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x459>)
   101cc:	4483      	add	fp, r0
   101ce:	4593      	cmp	fp, r2
   101d0:	d8ee      	bhi.n	101b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b1>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   101d2:	f1a0 70e8 	sub.w	r0, r0, #30408704	; 0x1d00000
   101d6:	f5a0 30d4 	sub.w	r0, r0, #108544	; 0x1a800
   101da:	f5a0 70a5 	sub.w	r0, r0, #330	; 0x14a
   101de:	6260      	str	r0, [r4, #36]	; 0x24
		return 1;
   101e0:	46f3      	mov	fp, lr
   101e2:	e7e7      	b.n	101b4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b5>
   101e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   101e6:	83e1      	strh	r1, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   101e8:	83a0      	strh	r0, [r4, #28]
				user_op->params.update.ticks_drift_minus;
   101ea:	e9d5 0e01 	ldrd	r0, lr, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
   101ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
   101f0:	4403      	add	r3, r0
	ticker->ticks_to_expire_minus +=
   101f2:	4472      	add	r2, lr
	ticker->ticks_to_expire = ticks_to_expire +
   101f4:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
   101f6:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   101f8:	b136      	cbz	r6, 10208 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x209>
   101fa:	6831      	ldr	r1, [r6, #0]
   101fc:	b121      	cbz	r1, 10208 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x209>
			user_op->params.update.ticks_drift_plus -
   101fe:	eba0 000e 	sub.w	r0, r0, lr
		ext_data->ticks_drift =
   10202:	6070      	str	r0, [r6, #4]
   10204:	68a3      	ldr	r3, [r4, #8]
   10206:	6962      	ldr	r2, [r4, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10208:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
   1020c:	d121      	bne.n	10252 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x253>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1020e:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   10210:	4293      	cmp	r3, r2
   10212:	d91b      	bls.n	1024c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x24d>
		ticks_to_expire -= ticks_to_expire_minus;
   10214:	1a9b      	subs	r3, r3, r2
		ticks_to_expire_minus = 0U;
   10216:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
   10218:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1021a:	6162      	str	r2, [r4, #20]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   1021c:	68e9      	ldr	r1, [r5, #12]
   1021e:	69a3      	ldr	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   10220:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   10222:	440b      	add	r3, r1
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   10224:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   10226:	bf88      	it	hi
   10228:	1a9b      	subhi	r3, r3, r2
	if (user_op->params.update.force != 0U) {
   1022a:	7daa      	ldrb	r2, [r5, #22]
		ticker->ticks_slot = 0U;
   1022c:	bf98      	it	ls
   1022e:	2300      	movls	r3, #0
   10230:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   10232:	b102      	cbz	r2, 10236 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x237>
		ticker->force = user_op->params.update.force;
   10234:	70e2      	strb	r2, [r4, #3]
	ticker->next = *insert_head;
   10236:	9b04      	ldr	r3, [sp, #16]
   10238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1023a:	4619      	mov	r1, r3
   1023c:	9b01      	ldr	r3, [sp, #4]
   1023e:	548b      	strb	r3, [r1, r2]
		ticker->req++;
   10240:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   10242:	786a      	ldrb	r2, [r5, #1]
   10244:	9201      	str	r2, [sp, #4]
		ticker->req++;
   10246:	3301      	adds	r3, #1
   10248:	7063      	strb	r3, [r4, #1]
   1024a:	e6ea      	b.n	10022 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x23>
   1024c:	1ad2      	subs	r2, r2, r3
		ticks_to_expire = 0U;
   1024e:	2300      	movs	r3, #0
   10250:	e7e2      	b.n	10218 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x219>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10252:	9903      	ldr	r1, [sp, #12]
   10254:	eba1 0708 	sub.w	r7, r1, r8
   10258:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1025c:	429f      	cmp	r7, r3
   1025e:	d213      	bcs.n	10288 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x289>
			ticks_to_expire -= delta_current_start;
   10260:	1bdb      	subs	r3, r3, r7
   10262:	e7d5      	b.n	10210 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x211>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   10264:	f8d9 7014 	ldr.w	r7, [r9, #20]
   10268:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
   1026a:	f00b fedd 	bl	1c028 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1026e:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10270:	eba0 0c07 	sub.w	ip, r0, r7
   10274:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
   10278:	4680      	mov	r8, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1027a:	443b      	add	r3, r7
		ticker->ticks_to_expire_minus += ticks_elapsed -
   1027c:	6961      	ldr	r1, [r4, #20]
   1027e:	440b      	add	r3, r1
   10280:	1b9a      	subs	r2, r3, r6
   10282:	6162      	str	r2, [r4, #20]
		ticks_to_expire = 0U;
   10284:	2300      	movs	r3, #0
   10286:	e759      	b.n	1013c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x13d>
			ticks_to_expire_minus +=
   10288:	443a      	add	r2, r7
   1028a:	1ad2      	subs	r2, r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   1028c:	e7df      	b.n	1024e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x24f>
   1028e:	4698      	mov	r8, r3
   10290:	e672      	b.n	ff78 <ticker_job+0x90>
	while (count_user--) {
   10292:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10294:	4657      	mov	r7, sl
   10296:	42ba      	cmp	r2, r7
   10298:	f1a7 0308 	sub.w	r3, r7, #8
   1029c:	f47f aee2 	bne.w	10064 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x65>
   102a0:	f899 701d 	ldrb.w	r7, [r9, #29]
   102a4:	9b06      	ldr	r3, [sp, #24]
   102a6:	1bdb      	subs	r3, r3, r7
   102a8:	bf18      	it	ne
   102aa:	2301      	movne	r3, #1
   102ac:	9307      	str	r3, [sp, #28]
	if (flag_elapsed) {
   102ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   102b0:	46cb      	mov	fp, r9
   102b2:	2b00      	cmp	r3, #0
   102b4:	f040 8179 	bne.w	105aa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5ab>
	count_user = instance->count_user;
   102b8:	f899 2009 	ldrb.w	r2, [r9, #9]
	node = &instance->nodes[0];
   102bc:	f8d9 3000 	ldr.w	r3, [r9]
	users = &instance->users[0];
   102c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
	node = &instance->nodes[0];
   102c4:	9304      	str	r3, [sp, #16]
	while (count_user--) {
   102c6:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
   102c8:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
   102ca:	b2db      	uxtb	r3, r3
   102cc:	2a00      	cmp	r2, #0
   102ce:	f000 8110 	beq.w	104f2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4f3>
   102d2:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   102d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   102d8:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   102da:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
   102de:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
   102e2:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
   102e4:	9b01      	ldr	r3, [sp, #4]
   102e6:	2bff      	cmp	r3, #255	; 0xff
   102e8:	d05e      	beq.n	103a8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3a9>
				ticker = &node[id_insert];
   102ea:	f8dd a004 	ldr.w	sl, [sp, #4]
   102ee:	9b04      	ldr	r3, [sp, #16]
   102f0:	fa0f f48a 	sxth.w	r4, sl
   102f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   102f8:	ea4f 1c04 	mov.w	ip, r4, lsl #4
   102fc:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
   10300:	f813 300c 	ldrb.w	r3, [r3, ip]
   10304:	9301      	str	r3, [sp, #4]
				user_op = NULL;
   10306:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   10308:	22ff      	movs	r2, #255	; 0xff
   1030a:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
   1030c:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
   10310:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
   10314:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10318:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
   1031a:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
   1031c:	bf18      	it	ne
   1031e:	9202      	strne	r2, [sp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10320:	d111      	bne.n	10346 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x347>
   10322:	e093      	b.n	1044c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x44d>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   10324:	ebb1 010c 	subs.w	r1, r1, ip
   10328:	d106      	bne.n	10338 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x339>
   1032a:	f8be e01e 	ldrh.w	lr, [lr, #30]
   1032e:	f8b0 901e 	ldrh.w	r9, [r0, #30]
   10332:	45f1      	cmp	r9, lr
   10334:	f200 80d6 	bhi.w	104e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4e5>
		current = ticker_current->next;
   10338:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1033c:	9302      	str	r3, [sp, #8]
   1033e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   10342:	d077      	beq.n	10434 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x435>
   10344:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
   10346:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   1034a:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
   1034e:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
   10352:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10356:	458c      	cmp	ip, r1
   10358:	d9e4      	bls.n	10324 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x325>
   1035a:	9a02      	ldr	r2, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
   1035c:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
   1035e:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
   10360:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
   10362:	d16c      	bne.n	1043e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x43f>
		instance->ticker_id_head = id;
   10364:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   10368:	2bff      	cmp	r3, #255	; 0xff
   1036a:	d006      	beq.n	1037a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x37b>
		node[current].ticks_to_expire -= ticks_to_expire;
   1036c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10370:	eb07 1703 	add.w	r7, r7, r3, lsl #4
   10374:	68bb      	ldr	r3, [r7, #8]
   10376:	1a59      	subs	r1, r3, r1
   10378:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
   1037a:	78a3      	ldrb	r3, [r4, #2]
   1037c:	3301      	adds	r3, #1
   1037e:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   10380:	2d00      	cmp	r5, #0
   10382:	d0af      	beq.n	102e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2e5>
	if (user_op->fp_op_func) {
   10384:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10386:	9a03      	ldr	r2, [sp, #12]
   10388:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   1038a:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   1038c:	b113      	cbz	r3, 10394 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x395>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1038e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10390:	2000      	movs	r0, #0
   10392:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
   10394:	6863      	ldr	r3, [r4, #4]
   10396:	2b00      	cmp	r3, #0
   10398:	d1a4      	bne.n	102e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2e5>
					ticker->op_context =
   1039a:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
   1039e:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   103a2:	9b01      	ldr	r3, [sp, #4]
   103a4:	2bff      	cmp	r3, #255	; 0xff
   103a6:	d1a0      	bne.n	102ea <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2eb>
   103a8:	f898 3002 	ldrb.w	r3, [r8, #2]
   103ac:	42b3      	cmp	r3, r6
   103ae:	d02e      	beq.n	1040e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x40f>
   103b0:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
   103b2:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
   103b6:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   103ba:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
   103be:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   103c0:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
   103c4:	b2f6      	uxtb	r6, r6
					first = 0U;
   103c6:	42b0      	cmp	r0, r6
   103c8:	bf08      	it	eq
   103ca:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   103cc:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
   103ce:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   103d2:	d11a      	bne.n	1040a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x40b>
				id_insert = user_op->id;
   103d4:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   103d8:	9b04      	ldr	r3, [sp, #16]
   103da:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
   103de:	eb03 140c 	add.w	r4, r3, ip, lsl #4
   103e2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
   103e6:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   103e8:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
   103ea:	1ac9      	subs	r1, r1, r3
   103ec:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   103f0:	d036      	beq.n	10460 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x461>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   103f2:	9b03      	ldr	r3, [sp, #12]
   103f4:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
   103f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
   103fa:	2201      	movs	r2, #1
   103fc:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
   103fe:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
   10400:	b10b      	cbz	r3, 10406 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x407>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10402:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10404:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   10406:	f898 3002 	ldrb.w	r3, [r8, #2]
   1040a:	42b3      	cmp	r3, r6
   1040c:	d1d1      	bne.n	103b2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3b3>
	while (count_user--) {
   1040e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10410:	4542      	cmp	r2, r8
   10412:	f1a8 0308 	sub.w	r3, r8, #8
   10416:	d06a      	beq.n	104ee <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4ef>
   10418:	4698      	mov	r8, r3
   1041a:	e75e      	b.n	102da <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2db>
				if (ticks_elapsed > ticks_used) {
   1041c:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1041e:	1a1b      	subs	r3, r3, r0
   10420:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   10424:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
   10426:	bf8c      	ite	hi
   10428:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
   1042a:	2300      	movls	r3, #0
   1042c:	e62d      	b.n	1008a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8b>
				ticks_at_stop = cntr_cnt_get();
   1042e:	f00b fdfb 	bl	1c028 <cntr_cnt_get>
   10432:	e620      	b.n	10076 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x77>
	ticker_new->next = current;
   10434:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   10436:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
   10438:	f880 c000 	strb.w	ip, [r0]
   1043c:	4663      	mov	r3, ip
		node[previous].next = id;
   1043e:	b212      	sxth	r2, r2
   10440:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10444:	0112      	lsls	r2, r2, #4
   10446:	f807 a002 	strb.w	sl, [r7, r2]
   1044a:	e78d      	b.n	10368 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x369>
	ticker_new->next = current;
   1044c:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
   10450:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   10454:	e791      	b.n	1037a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x37b>
   10456:	bf00      	nop
   10458:	7f172b59 	.word	0x7f172b59
   1045c:	ff172b5a 	.word	0xff172b5a
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   10460:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   10462:	f8db e014 	ldr.w	lr, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   10466:	6a68      	ldr	r0, [r5, #36]	; 0x24
   10468:	f64f 79ff 	movw	r9, #65535	; 0xffff
   1046c:	454f      	cmp	r7, r9
   1046e:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   10472:	d02e      	beq.n	104d2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4d3>
   10474:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   10478:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   1047a:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1047c:	6223      	str	r3, [r4, #32]
	ticker->timeout_func = start->fp_timeout_func;
   1047e:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10482:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
   10484:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
   10486:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   10488:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1048a:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
   1048e:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10492:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
   10494:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10496:	d40c      	bmi.n	104b2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4b3>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10498:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1049c:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   1049e:	b18b      	cbz	r3, 104c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4c5>
	ticker->ticks_to_expire = ticks_to_expire;
   104a0:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
   104a2:	9b03      	ldr	r3, [sp, #12]
   104a4:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   104a6:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
   104a8:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   104ac:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
   104ae:	70e3      	strb	r3, [r4, #3]
}
   104b0:	e72a      	b.n	10308 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x309>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   104b2:	ebae 0200 	sub.w	r2, lr, r0
   104b6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   104ba:	4293      	cmp	r3, r2
   104bc:	d905      	bls.n	104ca <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4cb>
			ticks_to_expire -= delta_current_start;
   104be:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   104c0:	2b00      	cmp	r3, #0
   104c2:	d1ed      	bne.n	104a0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4a1>
		ticks_to_expire_minus -= ticks_to_expire;
   104c4:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   104c6:	2300      	movs	r3, #0
   104c8:	e7ea      	b.n	104a0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4a1>
			    (delta_current_start - ticks_to_expire);
   104ca:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
   104cc:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   104ce:	2300      	movs	r3, #0
   104d0:	e7e6      	b.n	104a0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4a1>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   104d2:	f04f 0701 	mov.w	r7, #1
   104d6:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   104da:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   104dc:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   104de:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   104e0:	460f      	mov	r7, r1
   104e2:	e7cc      	b.n	1047e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x47f>
   104e4:	9a02      	ldr	r2, [sp, #8]
   104e6:	4661      	mov	r1, ip
   104e8:	e738      	b.n	1035c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35d>
   104ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   104ec:	e658      	b.n	101a0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1a1>
   104ee:	f89b 701d 	ldrb.w	r7, [fp, #29]
	if (instance->ticker_id_head != ticker_id_old_head) {
   104f2:	9b06      	ldr	r3, [sp, #24]
   104f4:	42bb      	cmp	r3, r7
   104f6:	f000 8323 	beq.w	10b40 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb41>
	if (!pending) {
   104fa:	9b08      	ldr	r3, [sp, #32]
   104fc:	2b00      	cmp	r3, #0
   104fe:	f000 8345 	beq.w	10b8c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb8d>
	instance->job_guard = 0U;
   10502:	2300      	movs	r3, #0
   10504:	f89b 701d 	ldrb.w	r7, [fp, #29]
   10508:	f88b 301e 	strb.w	r3, [fp, #30]
	if (instance->ticker_id_head == TICKER_NULL) {
   1050c:	2fff      	cmp	r7, #255	; 0xff
   1050e:	f000 83cb 	beq.w	10ca8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xca9>
	if (ticker_id_old_head == TICKER_NULL) {
   10512:	9b06      	ldr	r3, [sp, #24]
   10514:	2bff      	cmp	r3, #255	; 0xff
   10516:	f000 83e5 	beq.w	10ce4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xce5>
	ticks_to_expire = ticker->ticks_to_expire;
   1051a:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   1051e:	f8df 9308 	ldr.w	r9, [pc, #776]	; 10828 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x829>
   10522:	f8df 8308 	ldr.w	r8, [pc, #776]	; 1082c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x82d>
   10526:	4ebf      	ldr	r6, [pc, #764]	; (10824 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x825>)
	ticker = &instance->nodes[instance->ticker_id_head];
   10528:	eb07 0747 	add.w	r7, r7, r7, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   1052c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
	i = 10U;
   10530:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   10532:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
   10534:	f00b fd78 	bl	1c028 <cntr_cnt_get>
		cc = instance->ticks_current;
   10538:	f8db 3014 	ldr.w	r3, [fp, #20]
		instance->trigger_set_cb(cc);
   1053c:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10540:	1ac4      	subs	r4, r0, r3
   10542:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   10546:	3403      	adds	r4, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   10548:	42bc      	cmp	r4, r7
   1054a:	bf2c      	ite	cs
   1054c:	191b      	addcs	r3, r3, r4
   1054e:	19db      	addcc	r3, r3, r7
		cc &= HAL_TICKER_CNTR_MASK;
   10550:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
   10554:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   10556:	4620      	mov	r0, r4
   10558:	4790      	blx	r2
		ctr_post = cntr_cnt_get();
   1055a:	f00b fd65 	bl	1c028 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1055e:	eba0 000a 	sub.w	r0, r0, sl
   10562:	eba4 040a 	sub.w	r4, r4, sl
   10566:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1056a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   1056e:	3003      	adds	r0, #3
		  ticker_ticks_diff_get(cc, ctr));
   10570:	42a0      	cmp	r0, r4
		i--;
   10572:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   10576:	f240 82ee 	bls.w	10b56 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb57>
		LL_ASSERT(i);
   1057a:	2d00      	cmp	r5, #0
   1057c:	d1da      	bne.n	10534 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x535>
   1057e:	f640 03a6 	movw	r3, #2214	; 0x8a6
   10582:	464a      	mov	r2, r9
   10584:	4641      	mov	r1, r8
   10586:	4630      	mov	r0, r6
   10588:	f00f f8b5 	bl	1f6f6 <printk>
   1058c:	4040      	eors	r0, r0
   1058e:	f380 8811 	msr	BASEPRI, r0
   10592:	f04f 0003 	mov.w	r0, #3
   10596:	df02      	svc	2
   10598:	e7cc      	b.n	10534 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x535>
	if (flag_elapsed) {
   1059a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1059c:	2b00      	cmp	r3, #0
   1059e:	f000 82e8 	beq.w	10b72 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb73>
	pending = 0U;
   105a2:	9b07      	ldr	r3, [sp, #28]
   105a4:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   105a6:	23ff      	movs	r3, #255	; 0xff
   105a8:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
   105aa:	f00b fd3d 	bl	1c028 <cntr_cnt_get>
	node = &instance->nodes[0];
   105ae:	f8db 3000 	ldr.w	r3, [fp]
	while (instance->ticker_id_head != TICKER_NULL) {
   105b2:	f89b 501d 	ldrb.w	r5, [fp, #29]
	node = &instance->nodes[0];
   105b6:	9303      	str	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   105b8:	9b05      	ldr	r3, [sp, #20]
	while (instance->ticker_id_head != TICKER_NULL) {
   105ba:	2dff      	cmp	r5, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   105bc:	eba0 0003 	sub.w	r0, r0, r3
   105c0:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   105c4:	d04d      	beq.n	10662 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x663>
   105c6:	f8dd a008 	ldr.w	sl, [sp, #8]
	ticks_expired = 0U;
   105ca:	f04f 0900 	mov.w	r9, #0
		ticker = &node[id_expired];
   105ce:	9b03      	ldr	r3, [sp, #12]
   105d0:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   105d4:	eb03 1404 	add.w	r4, r3, r4, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   105d8:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   105da:	4553      	cmp	r3, sl
   105dc:	f200 82cf 	bhi.w	10b7e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb7f>
		if (instance->ticks_slot_previous > ticks_to_expire) {
   105e0:	f8db 2018 	ldr.w	r2, [fp, #24]
		skip_collision = (ticker->lazy_current != 0U);
   105e4:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   105e8:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   105ea:	ebaa 0a03 	sub.w	sl, sl, r3
		ticks_expired += ticks_to_expire;
   105ee:	4499      	add	r9, r3
		ticks_latency -= ticks_to_expire;
   105f0:	eba8 0803 	sub.w	r8, r8, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   105f4:	bf25      	ittet	cs
   105f6:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   105fa:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   105fe:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   10600:	2300      	movcs	r3, #0
   10602:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   10606:	7861      	ldrb	r1, [r4, #1]
   10608:	78a0      	ldrb	r0, [r4, #2]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1060a:	69a7      	ldr	r7, [r4, #24]
   1060c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1060e:	6866      	ldr	r6, [r4, #4]
   10610:	f894 c000 	ldrb.w	ip, [r4]
   10614:	9704      	str	r7, [sp, #16]
		state = (ticker->req - ticker->ack) & 0xff;
   10616:	1a0b      	subs	r3, r1, r0
   10618:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1061a:	b117      	cbz	r7, 10622 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x623>
   1061c:	2b02      	cmp	r3, #2
   1061e:	f000 8144 	beq.w	108aa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8ab>
		ticker->ticks_to_expire = 0U;
   10622:	2700      	movs	r7, #0
   10624:	60a7      	str	r7, [r4, #8]
		instance->ticker_id_head = ticker->next;
   10626:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   1062a:	2e00      	cmp	r6, #0
   1062c:	f040 8100 	bne.w	10830 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x831>
   10630:	b11a      	cbz	r2, 1063a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x63b>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   10632:	7a12      	ldrb	r2, [r2, #8]
   10634:	2a01      	cmp	r2, #1
   10636:	f000 80d5 	beq.w	107e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7e5>
			if (state && ((state == 1U) || skip_collision) &&
   1063a:	b153      	cbz	r3, 10652 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x653>
   1063c:	2b01      	cmp	r3, #1
   1063e:	d002      	beq.n	10646 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x647>
   10640:	f1be 0f00 	cmp.w	lr, #0
   10644:	d005      	beq.n	10652 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x653>
			    ticker->fp_op_func) {
   10646:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   10648:	b11b      	cbz	r3, 10652 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x653>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   1064a:	2001      	movs	r0, #1
   1064c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1064e:	4798      	blx	r3
   10650:	78a0      	ldrb	r0, [r4, #2]
			ticker->req = ticker->ack;
   10652:	7060      	strb	r0, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   10654:	f89b 501d 	ldrb.w	r5, [fp, #29]
   10658:	2dff      	cmp	r5, #255	; 0xff
   1065a:	d1b8      	bne.n	105ce <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5cf>
   1065c:	f8db 3000 	ldr.w	r3, [fp]
   10660:	9303      	str	r3, [sp, #12]
			flag_compare_update = 1U;
   10662:	e9dd 4006 	ldrd	r4, r0, [sp, #24]
	count_user = instance->count_user;
   10666:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
   1066a:	f8db 1004 	ldr.w	r1, [fp, #4]
   1066e:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
   10670:	1e53      	subs	r3, r2, #1
			flag_compare_update = 1U;
   10672:	42ac      	cmp	r4, r5
   10674:	bf18      	it	ne
   10676:	2001      	movne	r0, #1
   10678:	9007      	str	r0, [sp, #28]
	while (count_user--) {
   1067a:	b2db      	uxtb	r3, r3
   1067c:	2a00      	cmp	r2, #0
   1067e:	f000 8181 	beq.w	10984 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x985>
   10682:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
		user_ops = (void *)&user->user_op[0];
   10686:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
   1068a:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
   1068e:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
   10690:	9b01      	ldr	r3, [sp, #4]
   10692:	2bff      	cmp	r3, #255	; 0xff
   10694:	d062      	beq.n	1075c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x75d>
				ticker = &node[id_insert];
   10696:	f8dd a004 	ldr.w	sl, [sp, #4]
   1069a:	9b03      	ldr	r3, [sp, #12]
   1069c:	fa0f f48a 	sxth.w	r4, sl
   106a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   106a4:	ea4f 1c04 	mov.w	ip, r4, lsl #4
   106a8:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
   106ac:	f813 300c 	ldrb.w	r3, [r3, ip]
   106b0:	9301      	str	r3, [sp, #4]
				user_op = NULL;
   106b2:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   106b4:	22ff      	movs	r2, #255	; 0xff
   106b6:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
   106b8:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
   106bc:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
   106c0:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   106c4:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
   106c6:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
   106c8:	bf18      	it	ne
   106ca:	9204      	strne	r2, [sp, #16]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   106cc:	d112      	bne.n	106f4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6f5>
   106ce:	e151      	b.n	10974 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x975>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   106d0:	ebb1 010c 	subs.w	r1, r1, ip
   106d4:	d106      	bne.n	106e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6e5>
   106d6:	f8be e01e 	ldrh.w	lr, [lr, #30]
   106da:	f8b0 901e 	ldrh.w	r9, [r0, #30]
   106de:	45f1      	cmp	r9, lr
   106e0:	f200 8103 	bhi.w	108ea <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8eb>
		current = ticker_current->next;
   106e4:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   106e8:	9304      	str	r3, [sp, #16]
   106ea:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   106ee:	f000 80f0 	beq.w	108d2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8d3>
   106f2:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
   106f4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   106f8:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
   106fc:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
   10700:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10704:	458c      	cmp	ip, r1
   10706:	d9e3      	bls.n	106d0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6d1>
   10708:	9a04      	ldr	r2, [sp, #16]
	ticker_new->ticks_to_expire = ticks_to_expire;
   1070a:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
   1070c:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
   1070e:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
   10710:	f040 80e4 	bne.w	108dc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8dd>
		instance->ticker_id_head = id;
   10714:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   10718:	2bff      	cmp	r3, #255	; 0xff
   1071a:	d006      	beq.n	1072a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x72b>
		node[current].ticks_to_expire -= ticks_to_expire;
   1071c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10720:	eb07 1703 	add.w	r7, r7, r3, lsl #4
   10724:	68bb      	ldr	r3, [r7, #8]
   10726:	1a59      	subs	r1, r3, r1
   10728:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
   1072a:	78a3      	ldrb	r3, [r4, #2]
   1072c:	3301      	adds	r3, #1
   1072e:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   10730:	2d00      	cmp	r5, #0
   10732:	d0ad      	beq.n	10690 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x691>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10734:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   10738:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1073a:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   1073c:	2200      	movs	r2, #0
   1073e:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   10740:	b113      	cbz	r3, 10748 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x749>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10742:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10744:	4610      	mov	r0, r2
   10746:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
   10748:	6863      	ldr	r3, [r4, #4]
   1074a:	2b00      	cmp	r3, #0
   1074c:	d1a0      	bne.n	10690 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x691>
					ticker->op_context =
   1074e:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
   10752:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   10756:	9b01      	ldr	r3, [sp, #4]
   10758:	2bff      	cmp	r3, #255	; 0xff
   1075a:	d19c      	bne.n	10696 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x697>
   1075c:	f898 3002 	ldrb.w	r3, [r8, #2]
   10760:	42b3      	cmp	r3, r6
   10762:	d030      	beq.n	107c6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7c7>
   10764:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
   10766:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
   1076a:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   1076e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
   10772:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10774:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
   10778:	b2f6      	uxtb	r6, r6
					first = 0U;
   1077a:	42b0      	cmp	r0, r6
   1077c:	bf08      	it	eq
   1077e:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10780:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
   10782:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10786:	d11c      	bne.n	107c2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7c3>
				id_insert = user_op->id;
   10788:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   1078c:	9b03      	ldr	r3, [sp, #12]
   1078e:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
   10792:	eb03 140c 	add.w	r4, r3, ip, lsl #4
   10796:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
   1079a:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   1079c:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
   1079e:	1ac9      	subs	r1, r1, r3
   107a0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   107a4:	f000 80a4 	beq.w	108f0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8f1>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   107a8:	f04f 0300 	mov.w	r3, #0
   107ac:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
   107b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
   107b2:	2201      	movs	r2, #1
   107b4:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
   107b6:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
   107b8:	b10b      	cbz	r3, 107be <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7bf>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   107ba:	6b29      	ldr	r1, [r5, #48]	; 0x30
   107bc:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   107be:	f898 3002 	ldrb.w	r3, [r8, #2]
   107c2:	42b3      	cmp	r3, r6
   107c4:	d1cf      	bne.n	10766 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x767>
	while (count_user--) {
   107c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   107c8:	4542      	cmp	r2, r8
   107ca:	f1a8 0308 	sub.w	r3, r8, #8
   107ce:	f000 80d6 	beq.w	1097e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x97f>
   107d2:	4698      	mov	r8, r3
   107d4:	e757      	b.n	10686 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x687>
		ticker->ticks_to_expire = 0U;
   107d6:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   107da:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   107de:	2e00      	cmp	r6, #0
   107e0:	f43f af27 	beq.w	10632 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x633>
				ticker->req = ticker->ack;
   107e4:	4653      	mov	r3, sl
			ticks_to_expire_prep(ticker, instance->ticks_current,
   107e6:	9e05      	ldr	r6, [sp, #20]
   107e8:	f8db 2014 	ldr.w	r2, [fp, #20]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   107ec:	6961      	ldr	r1, [r4, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   107ee:	eb06 0709 	add.w	r7, r6, r9
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   107f2:	1abe      	subs	r6, r7, r2
   107f4:	f416 0f00 	tst.w	r6, #8388608	; 0x800000
   107f8:	d14c      	bne.n	10894 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x895>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   107fa:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   107fe:	4433      	add	r3, r6
	if (ticks_to_expire > ticks_to_expire_minus) {
   10800:	4299      	cmp	r1, r3
   10802:	d24f      	bcs.n	108a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8a5>
		ticks_to_expire -= ticks_to_expire_minus;
   10804:	1a5b      	subs	r3, r3, r1
		ticks_to_expire_minus = 0U;
   10806:	2100      	movs	r1, #0
			ticker->next = *insert_head;
   10808:	9a01      	ldr	r2, [sp, #4]
   1080a:	7022      	strb	r2, [r4, #0]
			ticker->req++;
   1080c:	3001      	adds	r0, #1
   1080e:	7060      	strb	r0, [r4, #1]
	ticker->ticks_to_expire = ticks_to_expire;
   10810:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   10812:	6161      	str	r1, [r4, #20]
			ticker->req++;
   10814:	9501      	str	r5, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
   10816:	f89b 501d 	ldrb.w	r5, [fp, #29]
   1081a:	2dff      	cmp	r5, #255	; 0xff
   1081c:	f47f aed7 	bne.w	105ce <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5cf>
   10820:	e71c      	b.n	1065c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x65d>
   10822:	bf00      	nop
   10824:	00025984 	.word	0x00025984
   10828:	00025944 	.word	0x00025944
   1082c:	00025a48 	.word	0x00025a48
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   10830:	b112      	cbz	r2, 10838 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x839>
   10832:	7a13      	ldrb	r3, [r2, #8]
   10834:	2b01      	cmp	r3, #1
   10836:	d0d5      	beq.n	107e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7e5>
				if (!ticker->lazy_current) {
   10838:	f1be 0f00 	cmp.w	lr, #0
   1083c:	d146      	bne.n	108cc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8cd>
					lazy_periodic = ticker->lazy_periodic;
   1083e:	8ba7      	ldrh	r7, [r4, #28]
   10840:	9704      	str	r7, [sp, #16]
   10842:	4608      	mov	r0, r1
				while (count--) {
   10844:	1c71      	adds	r1, r6, #1
   10846:	e9d4 c208 	ldrd	ip, r2, [r4, #32]
   1084a:	e9cd 1009 	strd	r1, r0, [sp, #36]	; 0x24
				ticks_to_expire = 0U;
   1084e:	2300      	movs	r3, #0
   10850:	e004      	b.n	1085c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x85d>
   10852:	4631      	mov	r1, r6
				while (count--) {
   10854:	3f01      	subs	r7, #1
					ticks_to_expire +=
   10856:	440b      	add	r3, r1
				while (count--) {
   10858:	1c79      	adds	r1, r7, #1
   1085a:	d010      	beq.n	1087e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x87f>
	if ((ticker->remainder_current < BIT(31)) &&
   1085c:	49b6      	ldr	r1, [pc, #728]	; (10b38 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb39>)
   1085e:	48b7      	ldr	r0, [pc, #732]	; (10b3c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb3d>)
	ticker->remainder_current += ticker->remainder_periodic;
   10860:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
   10862:	1851      	adds	r1, r2, r1
   10864:	4281      	cmp	r1, r0
   10866:	d8f4      	bhi.n	10852 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x853>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10868:	9909      	ldr	r1, [sp, #36]	; 0x24
   1086a:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
				while (count--) {
   1086e:	3f01      	subs	r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10870:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
					ticks_to_expire +=
   10874:	440b      	add	r3, r1
				while (count--) {
   10876:	1c79      	adds	r1, r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10878:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
				while (count--) {
   1087c:	d1ee      	bne.n	1085c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x85d>
				if (!ticker->must_expire) {
   1087e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   10882:	980a      	ldr	r0, [sp, #40]	; 0x28
   10884:	6262      	str	r2, [r4, #36]	; 0x24
   10886:	2900      	cmp	r1, #0
   10888:	f000 8126 	beq.w	10ad8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xad9>
				ticker->lazy_current += (lazy_periodic + lazy);
   1088c:	9a04      	ldr	r2, [sp, #16]
   1088e:	4472      	add	r2, lr
   10890:	83e2      	strh	r2, [r4, #30]
   10892:	e7a8      	b.n	107e6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7e7>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10894:	1bd2      	subs	r2, r2, r7
   10896:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1089a:	4293      	cmp	r3, r2
   1089c:	d913      	bls.n	108c6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8c7>
			ticks_to_expire -= delta_current_start;
   1089e:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   108a0:	4299      	cmp	r1, r3
   108a2:	d3af      	bcc.n	10804 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x805>
   108a4:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   108a6:	2300      	movs	r3, #0
   108a8:	e7ae      	b.n	10808 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x809>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   108aa:	f1be 0f00 	cmp.w	lr, #0
   108ae:	f47f aeb8 	bne.w	10622 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x623>
   108b2:	b112      	cbz	r2, 108ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8bb>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   108b4:	7a17      	ldrb	r7, [r2, #8]
   108b6:	2f01      	cmp	r7, #1
   108b8:	d08d      	beq.n	107d6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7d7>
			instance->ticks_slot_previous = ticker->ticks_slot;
   108ba:	9f04      	ldr	r7, [sp, #16]
			instance->ticker_id_slot_previous = id_expired;
   108bc:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   108c0:	f8cb 7018 	str.w	r7, [fp, #24]
   108c4:	e6ad      	b.n	10622 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x623>
			ticks_to_expire_minus +=
   108c6:	4411      	add	r1, r2
   108c8:	1ac9      	subs	r1, r1, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   108ca:	e7ec      	b.n	108a6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8a7>
   108cc:	2700      	movs	r7, #0
					lazy_periodic = 0U;
   108ce:	9704      	str	r7, [sp, #16]
   108d0:	e7b8      	b.n	10844 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x845>
	ticker_new->next = current;
   108d2:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   108d4:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
   108d6:	f880 c000 	strb.w	ip, [r0]
   108da:	4663      	mov	r3, ip
		node[previous].next = id;
   108dc:	b212      	sxth	r2, r2
   108de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   108e2:	0112      	lsls	r2, r2, #4
   108e4:	f807 a002 	strb.w	sl, [r7, r2]
   108e8:	e716      	b.n	10718 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x719>
   108ea:	9a04      	ldr	r2, [sp, #16]
   108ec:	4661      	mov	r1, ip
   108ee:	e70c      	b.n	1070a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x70b>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   108f0:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   108f2:	f8db e014 	ldr.w	lr, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   108f6:	6a68      	ldr	r0, [r5, #36]	; 0x24
   108f8:	f64f 79ff 	movw	r9, #65535	; 0xffff
   108fc:	454f      	cmp	r7, r9
   108fe:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   10902:	d02e      	beq.n	10962 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x963>
   10904:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   10908:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   1090a:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1090c:	6223      	str	r3, [r4, #32]
	ticker->timeout_func = start->fp_timeout_func;
   1090e:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10912:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
   10914:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
   10916:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   10918:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1091a:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
   1091e:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10922:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
   10924:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10926:	d40c      	bmi.n	10942 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x943>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10928:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1092c:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   1092e:	b18b      	cbz	r3, 10954 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x955>
	ticker->ticks_to_expire = ticks_to_expire;
   10930:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
   10932:	2300      	movs	r3, #0
   10934:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   10936:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
   10938:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1093c:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
   1093e:	70e3      	strb	r3, [r4, #3]
}
   10940:	e6b8      	b.n	106b4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6b5>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10942:	ebae 0200 	sub.w	r2, lr, r0
   10946:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1094a:	4293      	cmp	r3, r2
   1094c:	d905      	bls.n	1095a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x95b>
			ticks_to_expire -= delta_current_start;
   1094e:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   10950:	2b00      	cmp	r3, #0
   10952:	d1ed      	bne.n	10930 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x931>
		ticks_to_expire_minus -= ticks_to_expire;
   10954:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   10956:	2300      	movs	r3, #0
   10958:	e7ea      	b.n	10930 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x931>
			    (delta_current_start - ticks_to_expire);
   1095a:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
   1095c:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   1095e:	2300      	movs	r3, #0
   10960:	e7e6      	b.n	10930 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x931>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   10962:	f04f 0701 	mov.w	r7, #1
   10966:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   1096a:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   1096c:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1096e:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   10970:	460f      	mov	r7, r1
   10972:	e7cc      	b.n	1090e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x90f>
	ticker_new->next = current;
   10974:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
   10978:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   1097c:	e6d5      	b.n	1072a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x72b>
   1097e:	f8db 3000 	ldr.w	r3, [fp]
   10982:	9303      	str	r3, [sp, #12]
	while (rescheduling) {
   10984:	f89b 701d 	ldrb.w	r7, [fp, #29]
   10988:	9e03      	ldr	r6, [sp, #12]
	uint8_t  rescheduled = 0U;
   1098a:	2300      	movs	r3, #0
   1098c:	46ba      	mov	sl, r7
		while (ticker_id_head != TICKER_NULL) {
   1098e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   10992:	d010      	beq.n	109b6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9b7>
   10994:	46d1      	mov	r9, sl
			ticker = &nodes[ticker_id_head];
   10996:	fa0f f289 	sxth.w	r2, r9
   1099a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1099e:	eb06 1202 	add.w	r2, r6, r2, lsl #4
			ext_data = ticker->ext_data;
   109a2:	6a97      	ldr	r7, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   109a4:	b117      	cbz	r7, 109ac <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9ad>
   109a6:	7a39      	ldrb	r1, [r7, #8]
   109a8:	2901      	cmp	r1, #1
   109aa:	d014      	beq.n	109d6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9d7>
			ticker_id_head = ticker->next;
   109ac:	f892 9000 	ldrb.w	r9, [r2]
		while (ticker_id_head != TICKER_NULL) {
   109b0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   109b4:	d1ef      	bne.n	10996 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x997>
	return rescheduled;
   109b6:	4657      	mov	r7, sl
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   109b8:	2b00      	cmp	r3, #0
   109ba:	f43f ad9a 	beq.w	104f2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4f3>
	if (instance->ticker_id_head != ticker_id_old_head) {
   109be:	9a06      	ldr	r2, [sp, #24]
   109c0:	42ba      	cmp	r2, r7
   109c2:	f47f ad9a 	bne.w	104fa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4fb>
	if (!pending) {
   109c6:	9a08      	ldr	r2, [sp, #32]
   109c8:	2a00      	cmp	r2, #0
   109ca:	f000 817b 	beq.w	10cc4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xcc5>
	instance->job_guard = 0U;
   109ce:	2300      	movs	r3, #0
   109d0:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   109d4:	e59a      	b.n	1050c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x50d>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   109d6:	f89b 301c 	ldrb.w	r3, [fp, #28]
   109da:	2bff      	cmp	r3, #255	; 0xff
   109dc:	d071      	beq.n	10ac2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xac3>
			instance->ticks_slot_previous > ticks_elapsed) {
   109de:	f8db 0018 	ldr.w	r0, [fp, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   109e2:	9b02      	ldr	r3, [sp, #8]
   109e4:	4283      	cmp	r3, r0
   109e6:	d26c      	bcs.n	10ac2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xac3>
			window_start_ticks = instance->ticks_slot_previous -
   109e8:	1ac0      	subs	r0, r0, r3
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   109ea:	e9d7 4300 	ldrd	r4, r3, [r7]
   109ee:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
   109f0:	f892 c000 	ldrb.w	ip, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   109f4:	d26d      	bcs.n	10ad2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xad3>
		while (ticker_id_iter != TICKER_NULL &&
   109f6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   109fa:	eba4 0403 	sub.w	r4, r4, r3
		while (ticker_id_iter != TICKER_NULL &&
   109fe:	d068      	beq.n	10ad2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xad3>
		       ticks_start_offset + ticker->ticks_slot <=
   10a00:	6995      	ldr	r5, [r2, #24]
		while (ticker_id_iter != TICKER_NULL &&
   10a02:	42ac      	cmp	r4, r5
   10a04:	f04f 0300 	mov.w	r3, #0
   10a08:	d333      	bcc.n	10a72 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa73>
   10a0a:	469e      	mov	lr, r3
   10a0c:	9501      	str	r5, [sp, #4]
   10a0e:	4661      	mov	r1, ip
   10a10:	9203      	str	r2, [sp, #12]
   10a12:	e01d      	b.n	10a50 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa51>
			if (node->ticks_to_expire >
   10a14:	f8d1 8008 	ldr.w	r8, [r1, #8]
					MIN(ticks_slot_window,
   10a18:	f1a8 0304 	sub.w	r3, r8, #4
			if (node->ticks_to_expire >
   10a1c:	f1b8 0f04 	cmp.w	r8, #4
					MIN(ticks_slot_window,
   10a20:	4473      	add	r3, lr
			if (node->ticks_to_expire >
   10a22:	d909      	bls.n	10a38 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa39>
				window_end_ticks =
   10a24:	42a3      	cmp	r3, r4
			if (window_end_ticks > ticks_start_offset +
   10a26:	9a01      	ldr	r2, [sp, #4]
				window_end_ticks =
   10a28:	bf28      	it	cs
   10a2a:	4623      	movcs	r3, r4
			if (window_end_ticks > ticks_start_offset +
   10a2c:	4293      	cmp	r3, r2
   10a2e:	d903      	bls.n	10a38 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa39>
			if (ticks_to_expire != 0U &&
   10a30:	1b5b      	subs	r3, r3, r5
   10a32:	d001      	beq.n	10a38 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa39>
   10a34:	4298      	cmp	r0, r3
   10a36:	d91b      	bls.n	10a70 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa71>
			window_start_ticks  = node->ticks_to_expire +
   10a38:	6988      	ldr	r0, [r1, #24]
			ticker_id_iter = node->next;
   10a3a:	7809      	ldrb	r1, [r1, #0]
			ticks_start_offset += node->ticks_to_expire;
   10a3c:	44c6      	add	lr, r8
			window_start_ticks  = node->ticks_to_expire +
   10a3e:	4440      	add	r0, r8
			ticks_to_expire     = ticks_slot_window -
   10a40:	1b63      	subs	r3, r4, r5
		       ticks_start_offset + ticker->ticks_slot <=
   10a42:	eb0e 0205 	add.w	r2, lr, r5
		while (ticker_id_iter != TICKER_NULL &&
   10a46:	29ff      	cmp	r1, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   10a48:	9201      	str	r2, [sp, #4]
		while (ticker_id_iter != TICKER_NULL &&
   10a4a:	d011      	beq.n	10a70 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa71>
   10a4c:	4294      	cmp	r4, r2
   10a4e:	d30f      	bcc.n	10a70 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa71>
			node = &nodes[ticker_id_iter];
   10a50:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   10a54:	eb06 1101 	add.w	r1, r6, r1, lsl #4
			if (node->ext_data &&
   10a58:	f8d1 8028 	ldr.w	r8, [r1, #40]	; 0x28
   10a5c:	f1b8 0f00 	cmp.w	r8, #0
   10a60:	d0d8      	beq.n	10a14 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa15>
   10a62:	f898 8008 	ldrb.w	r8, [r8, #8]
   10a66:	f1b8 0f01 	cmp.w	r8, #1
   10a6a:	d1d3      	bne.n	10a14 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa15>
				ticker_id_iter = node->next;
   10a6c:	7809      	ldrb	r1, [r1, #0]
				continue;
   10a6e:	e7e8      	b.n	10a42 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa43>
   10a70:	9a03      	ldr	r2, [sp, #12]
		ticker->ticks_to_expire = ticks_to_expire;
   10a72:	6093      	str	r3, [r2, #8]
   10a74:	4664      	mov	r4, ip
   10a76:	f04f 0eff 	mov.w	lr, #255	; 0xff
   10a7a:	e000      	b.n	10a7e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa7f>
   10a7c:	4604      	mov	r4, r0
			node = &nodes[ticker_id_iter];
   10a7e:	b221      	sxth	r1, r4
   10a80:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   10a84:	eb06 1800 	add.w	r8, r6, r0, lsl #4
   10a88:	0100      	lsls	r0, r0, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   10a8a:	f8d8 5008 	ldr.w	r5, [r8, #8]
   10a8e:	429d      	cmp	r5, r3
   10a90:	d248      	bcs.n	10b24 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb25>
				ticker->ticks_to_expire -=
   10a92:	1b5b      	subs	r3, r3, r5
   10a94:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
   10a96:	5c30      	ldrb	r0, [r6, r0]
		while (ticker_id_iter != TICKER_NULL) {
   10a98:	28ff      	cmp	r0, #255	; 0xff
   10a9a:	46a6      	mov	lr, r4
   10a9c:	d1ee      	bne.n	10a7c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa7d>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   10a9e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   10aa2:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   10aa4:	f88b c01d 	strb.w	ip, [fp, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   10aa8:	5c73      	ldrb	r3, [r6, r1]
   10aaa:	7013      	strb	r3, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   10aac:	f806 9001 	strb.w	r9, [r6, r1]
   10ab0:	46e2      	mov	sl, ip
		ticker->lazy_current--;
   10ab2:	8bd3      	ldrh	r3, [r2, #30]
   10ab4:	3b01      	subs	r3, #1
   10ab6:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
   10ab8:	f04f 0202 	mov.w	r2, #2
		rescheduled  = 1U;
   10abc:	2301      	movs	r3, #1
		ext_data->reschedule_state =
   10abe:	723a      	strb	r2, [r7, #8]
		rescheduled  = 1U;
   10ac0:	e765      	b.n	1098e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x98f>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   10ac2:	e9d7 4300 	ldrd	r4, r3, [r7]
   10ac6:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
   10ac8:	f892 c000 	ldrb.w	ip, [r2]
		window_start_ticks = 0U;
   10acc:	f04f 0000 	mov.w	r0, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   10ad0:	d391      	bcc.n	109f6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9f7>
		ticker->ticks_to_expire = ticks_to_expire;
   10ad2:	2300      	movs	r3, #0
   10ad4:	6093      	str	r3, [r2, #8]
		while (ticker_id_iter != TICKER_NULL) {
   10ad6:	e7ec      	b.n	10ab2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xab3>
					while (ticks_to_expire <
   10ad8:	4598      	cmp	r8, r3
   10ada:	f67f aed7 	bls.w	1088c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x88d>
   10ade:	1c77      	adds	r7, r6, #1
   10ae0:	9709      	str	r7, [sp, #36]	; 0x24
   10ae2:	e005      	b.n	10af0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xaf1>
   10ae4:	4637      	mov	r7, r6
						ticks_to_expire +=
   10ae6:	443b      	add	r3, r7
						lazy++;
   10ae8:	3101      	adds	r1, #1
					while (ticks_to_expire <
   10aea:	4598      	cmp	r8, r3
						lazy++;
   10aec:	b289      	uxth	r1, r1
					while (ticks_to_expire <
   10aee:	d911      	bls.n	10b14 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb15>
	if ((ticker->remainder_current < BIT(31)) &&
   10af0:	4f11      	ldr	r7, [pc, #68]	; (10b38 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb39>)
   10af2:	4812      	ldr	r0, [pc, #72]	; (10b3c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb3d>)
	ticker->remainder_current += ticker->remainder_periodic;
   10af4:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
   10af6:	19d7      	adds	r7, r2, r7
   10af8:	4287      	cmp	r7, r0
   10afa:	d8f3      	bhi.n	10ae4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xae5>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10afc:	9f09      	ldr	r7, [sp, #36]	; 0x24
   10afe:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
						ticks_to_expire +=
   10b02:	443b      	add	r3, r7
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10b04:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
						lazy++;
   10b08:	3101      	adds	r1, #1
					while (ticks_to_expire <
   10b0a:	4598      	cmp	r8, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10b0c:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
						lazy++;
   10b10:	b289      	uxth	r1, r1
					while (ticks_to_expire <
   10b12:	d8ed      	bhi.n	10af0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xaf1>
   10b14:	9e04      	ldr	r6, [sp, #16]
   10b16:	980a      	ldr	r0, [sp, #40]	; 0x28
   10b18:	6262      	str	r2, [r4, #36]	; 0x24
   10b1a:	440e      	add	r6, r1
   10b1c:	b2b1      	uxth	r1, r6
   10b1e:	9104      	str	r1, [sp, #16]
   10b20:	e6b4      	b.n	1088c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x88d>
   10b22:	4770      	bx	lr
				node->ticks_to_expire -=
   10b24:	1aeb      	subs	r3, r5, r3
		if (ticker_id_prev != TICKER_NULL) {
   10b26:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
   10b2a:	f8c8 3008 	str.w	r3, [r8, #8]
		if (ticker_id_prev != TICKER_NULL) {
   10b2e:	d0c0      	beq.n	10ab2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xab3>
   10b30:	fa0f f18e 	sxth.w	r1, lr
   10b34:	e7b3      	b.n	10a9e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa9f>
   10b36:	bf00      	nop
   10b38:	ff172b5a 	.word	0xff172b5a
   10b3c:	7f172b59 	.word	0x7f172b59
	if (!pending) {
   10b40:	9b08      	ldr	r3, [sp, #32]
   10b42:	2b00      	cmp	r3, #0
   10b44:	f000 80a6 	beq.w	10c94 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc95>
	instance->job_guard = 0U;
   10b48:	2300      	movs	r3, #0
   10b4a:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   10b4e:	9b07      	ldr	r3, [sp, #28]
   10b50:	2b00      	cmp	r3, #0
   10b52:	f040 80c4 	bne.w	10cde <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xcdf>
   10b56:	f89b 201f 	ldrb.w	r2, [fp, #31]
	if (instance->worker_trigger) {
   10b5a:	b16a      	cbz	r2, 10b78 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb79>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   10b5c:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   10b60:	465b      	mov	r3, fp
   10b62:	2201      	movs	r2, #1
   10b64:	2103      	movs	r1, #3
   10b66:	2004      	movs	r0, #4
   10b68:	46a4      	mov	ip, r4
}
   10b6a:	b00f      	add	sp, #60	; 0x3c
   10b6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   10b70:	4760      	bx	ip
	instance->job_guard = 0U;
   10b72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10b74:	f88b 301e 	strb.w	r3, [fp, #30]
}
   10b78:	b00f      	add	sp, #60	; 0x3c
   10b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticker->ticks_to_expire -= ticks_elapsed;
   10b7e:	eba3 030a 	sub.w	r3, r3, sl
   10b82:	60a3      	str	r3, [r4, #8]
			break;
   10b84:	f8db 3000 	ldr.w	r3, [fp]
   10b88:	9303      	str	r3, [sp, #12]
   10b8a:	e56a      	b.n	10662 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x663>
	count_user = instance->count_user;
   10b8c:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   10b90:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   10b94:	1e5c      	subs	r4, r3, #1
   10b96:	b2e4      	uxtb	r4, r4
   10b98:	2b00      	cmp	r3, #0
   10b9a:	f43f acb2 	beq.w	10502 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x503>
		flag_compare_update = 1U;
   10b9e:	2301      	movs	r3, #1
   10ba0:	9307      	str	r3, [sp, #28]
   10ba2:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   10ba6:	f04f 0900 	mov.w	r9, #0
		while (user->first != user->last) {
   10baa:	7863      	ldrb	r3, [r4, #1]
   10bac:	78e1      	ldrb	r1, [r4, #3]
		user_op = &user->user_op[0];
   10bae:	6865      	ldr	r5, [r4, #4]
		while (user->first != user->last) {
   10bb0:	4299      	cmp	r1, r3
   10bb2:	d10c      	bne.n	10bce <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbcf>
   10bb4:	e060      	b.n	10c78 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc79>
	switch (uop->op) {
   10bb6:	2b01      	cmp	r3, #1
   10bb8:	d05a      	beq.n	10c70 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc71>
			first = user->first + 1;
   10bba:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
   10bbc:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
   10bbe:	3301      	adds	r3, #1
   10bc0:	b2db      	uxtb	r3, r3
				first = 0U;
   10bc2:	429a      	cmp	r2, r3
   10bc4:	bf08      	it	eq
   10bc6:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   10bc8:	4299      	cmp	r1, r3
			user->first = first;
   10bca:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   10bcc:	d054      	beq.n	10c78 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc79>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   10bce:	b21b      	sxth	r3, r3
   10bd0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   10bd4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   10bd8:	eb05 0283 	add.w	r2, r5, r3, lsl #2
	switch (uop->op) {
   10bdc:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
   10be0:	2b02      	cmp	r3, #2
   10be2:	d01b      	beq.n	10c1c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc1d>
   10be4:	2b03      	cmp	r3, #3
   10be6:	d1e6      	bne.n	10bb6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbb7>
		if (uop->id < instance->count_node) {
   10be8:	7853      	ldrb	r3, [r2, #1]
   10bea:	f89b 1008 	ldrb.w	r1, [fp, #8]
   10bee:	4299      	cmp	r1, r3
   10bf0:	d911      	bls.n	10c16 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc17>
			node[uop->id].priority =
   10bf2:	f8db 1000 	ldr.w	r1, [fp]
   10bf6:	7910      	ldrb	r0, [r2, #4]
   10bf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10bfc:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   10c00:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   10c04:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   10c08:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	if (fp_op_func) {
   10c0a:	b113      	cbz	r3, 10c12 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc13>
		fp_op_func(uop->status, uop->op_context);
   10c0c:	6b11      	ldr	r1, [r2, #48]	; 0x30
   10c0e:	6a90      	ldr	r0, [r2, #40]	; 0x28
   10c10:	4798      	blx	r3
   10c12:	78e1      	ldrb	r1, [r4, #3]
   10c14:	e7d1      	b.n	10bba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbbb>
			uop->status = TICKER_STATUS_FAILURE;
   10c16:	2301      	movs	r3, #1
   10c18:	6293      	str	r3, [r2, #40]	; 0x28
   10c1a:	e7f5      	b.n	10c08 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc09>
		ticker_by_next_slot_get(instance,
   10c1c:	e9d2 7001 	ldrd	r7, r0, [r2, #4]
	_ticker_id_head = *ticker_id_head;
   10c20:	f897 e000 	ldrb.w	lr, [r7]
		ticker_by_next_slot_get(instance,
   10c24:	f8d2 c00c 	ldr.w	ip, [r2, #12]
	node = instance->nodes;
   10c28:	f8db 1000 	ldr.w	r1, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
   10c2c:	f8db 8014 	ldr.w	r8, [fp, #20]
   10c30:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   10c34:	d002      	beq.n	10c3c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc3d>
   10c36:	6803      	ldr	r3, [r0, #0]
   10c38:	4543      	cmp	r3, r8
   10c3a:	d024      	beq.n	10c86 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc87>
		_ticker_id_head = instance->ticker_id_head;
   10c3c:	f89b 301d 	ldrb.w	r3, [fp, #29]
		*ticks_current = instance->ticks_current;
   10c40:	f8c0 8000 	str.w	r8, [r0]
		_ticks_to_expire = 0U;
   10c44:	f04f 0e00 	mov.w	lr, #0
   10c48:	e00d      	b.n	10c66 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc67>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
   10c4a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   10c4e:	eb01 1800 	add.w	r8, r1, r0, lsl #4
   10c52:	0100      	lsls	r0, r0, #4
   10c54:	f8d8 a008 	ldr.w	sl, [r8, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
   10c58:	f8d8 8018 	ldr.w	r8, [r8, #24]
   10c5c:	44d6      	add	lr, sl
   10c5e:	f1b8 0f00 	cmp.w	r8, #0
   10c62:	d102      	bne.n	10c6a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc6b>
		_ticker_id_head = ticker->next;
   10c64:	5c0b      	ldrb	r3, [r1, r0]
	while ((_ticker_id_head != TICKER_NULL) &&
   10c66:	2bff      	cmp	r3, #255	; 0xff
   10c68:	d1ef      	bne.n	10c4a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc4b>
	*ticker_id_head = _ticker_id_head;
   10c6a:	703b      	strb	r3, [r7, #0]
	*ticks_to_expire = _ticks_to_expire;
   10c6c:	f8cc e000 	str.w	lr, [ip]
		fp_op_func = uop->fp_op_func;
   10c70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   10c72:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		break;
   10c76:	e7c8      	b.n	10c0a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc0b>
	while (count_user--) {
   10c78:	42a6      	cmp	r6, r4
   10c7a:	f1a4 0308 	sub.w	r3, r4, #8
   10c7e:	f43f af63 	beq.w	10b48 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb49>
   10c82:	461c      	mov	r4, r3
   10c84:	e791      	b.n	10baa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbab>
		ticker = &node[_ticker_id_head];
   10c86:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   10c8a:	011b      	lsls	r3, r3, #4
	_ticks_to_expire = *ticks_to_expire;
   10c8c:	f8dc e000 	ldr.w	lr, [ip]
		_ticker_id_head = ticker->next;
   10c90:	5ccb      	ldrb	r3, [r1, r3]
	while ((_ticker_id_head != TICKER_NULL) &&
   10c92:	e7e8      	b.n	10c66 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc67>
	count_user = instance->count_user;
   10c94:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   10c98:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   10c9c:	1e5c      	subs	r4, r3, #1
   10c9e:	b2e4      	uxtb	r4, r4
   10ca0:	2b00      	cmp	r3, #0
   10ca2:	f47f af7e 	bne.w	10ba2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xba3>
   10ca6:	e74f      	b.n	10b48 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb49>
		if (cntr_stop() == 0) {
   10ca8:	f00b f998 	bl	1bfdc <cntr_stop>
   10cac:	2800      	cmp	r0, #0
   10cae:	f47f af52 	bne.w	10b56 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb57>
			instance->ticks_slot_previous = 0U;
   10cb2:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   10cb6:	f00b f9b7 	bl	1c028 <cntr_cnt_get>
   10cba:	f89b 201f 	ldrb.w	r2, [fp, #31]
   10cbe:	f8cb 0014 	str.w	r0, [fp, #20]
   10cc2:	e74a      	b.n	10b5a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb5b>
	count_user = instance->count_user;
   10cc4:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
   10cc8:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   10ccc:	1e54      	subs	r4, r2, #1
   10cce:	b2e4      	uxtb	r4, r4
   10cd0:	2a00      	cmp	r2, #0
   10cd2:	f47f af65 	bne.w	10ba0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xba1>
	instance->job_guard = 0U;
   10cd6:	9b08      	ldr	r3, [sp, #32]
   10cd8:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   10cdc:	e416      	b.n	1050c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x50d>
   10cde:	f89b 701d 	ldrb.w	r7, [fp, #29]
   10ce2:	e413      	b.n	1050c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x50d>
		ticks_current = cntr_cnt_get();
   10ce4:	f00b f9a0 	bl	1c028 <cntr_cnt_get>
   10ce8:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   10cea:	f00b f967 	bl	1bfbc <cntr_start>
   10cee:	f89b 701d 	ldrb.w	r7, [fp, #29]
   10cf2:	2800      	cmp	r0, #0
   10cf4:	f47f ac11 	bne.w	1051a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x51b>
			instance->ticks_current = ticks_current;
   10cf8:	f8cb 4014 	str.w	r4, [fp, #20]
   10cfc:	e40d      	b.n	1051a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x51b>
   10cfe:	bf00      	nop

00010d00 <ticker_init>:
{
   10d00:	b4f0      	push	{r4, r5, r6, r7}
   10d02:	9f04      	ldr	r7, [sp, #16]
   10d04:	f89d 4014 	ldrb.w	r4, [sp, #20]
   10d08:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   10d0a:	2800      	cmp	r0, #0
   10d0c:	d13e      	bne.n	10d8c <ticker_init+0x8c>
	instance->count_node = count_node;
   10d0e:	f8df c084 	ldr.w	ip, [pc, #132]	; 10d94 <ticker_init+0x94>
	while (count_node--) {
   10d12:	1e4d      	subs	r5, r1, #1
	instance->count_node = count_node;
   10d14:	f88c 1008 	strb.w	r1, [ip, #8]
	instance->nodes = node;
   10d18:	f8cc 2000 	str.w	r2, [ip]
	while (count_node--) {
   10d1c:	b2ed      	uxtb	r5, r5
   10d1e:	b149      	cbz	r1, 10d34 <ticker_init+0x34>
   10d20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   10d24:	eb02 1105 	add.w	r1, r2, r5, lsl #4
   10d28:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   10d2a:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   10d2e:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   10d32:	d1f9      	bne.n	10d28 <ticker_init+0x28>
	while (count_user--) {
   10d34:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   10d36:	f88c 3009 	strb.w	r3, [ip, #9]
	instance->users = user;
   10d3a:	f8cc 7004 	str.w	r7, [ip, #4]
	while (count_user--) {
   10d3e:	b2d2      	uxtb	r2, r2
   10d40:	b17b      	cbz	r3, 10d62 <ticker_init+0x62>
   10d42:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
		users[count_user].user_op = user_op_;
   10d46:	6056      	str	r6, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   10d48:	4611      	mov	r1, r2
   10d4a:	f812 3908 	ldrb.w	r3, [r2], #-8
   10d4e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
   10d52:	1ae4      	subs	r4, r4, r3
	while (count_user--) {
   10d54:	428f      	cmp	r7, r1
		user_op_ += users[count_user].count_user_op;
   10d56:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		count_op -= users[count_user].count_user_op;
   10d5a:	b2e4      	uxtb	r4, r4
		user_op_ += users[count_user].count_user_op;
   10d5c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	while (count_user--) {
   10d60:	d1f1      	bne.n	10d46 <ticker_init+0x46>
	if (count_op) {
   10d62:	b99c      	cbnz	r4, 10d8c <ticker_init+0x8c>
	instance->caller_id_get_cb = caller_id_get_cb;
   10d64:	9a07      	ldr	r2, [sp, #28]
   10d66:	f8cc 2020 	str.w	r2, [ip, #32]
	instance->sched_cb = sched_cb;
   10d6a:	9a08      	ldr	r2, [sp, #32]
   10d6c:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   10d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   10d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
	instance->ticks_elapsed_first = 0U;
   10d76:	f8ac 400a 	strh.w	r4, [ip, #10]
	return TICKER_STATUS_SUCCESS;
   10d7a:	4620      	mov	r0, r4
	instance->ticks_slot_previous = 0U;
   10d7c:	e9cc 4405 	strd	r4, r4, [ip, #20]
}
   10d80:	bcf0      	pop	{r4, r5, r6, r7}
	instance->trigger_set_cb = trigger_set_cb;
   10d82:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
   10d86:	f8ac 301c 	strh.w	r3, [ip, #28]
}
   10d8a:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   10d8c:	2001      	movs	r0, #1
}
   10d8e:	bcf0      	pop	{r4, r5, r6, r7}
   10d90:	4770      	bx	lr
   10d92:	bf00      	nop
   10d94:	200015e4 	.word	0x200015e4

00010d98 <ticker_trigger>:
	if (instance->sched_cb) {
   10d98:	4b0a      	ldr	r3, [pc, #40]	; (10dc4 <ticker_trigger+0x2c>)
   10d9a:	222c      	movs	r2, #44	; 0x2c
   10d9c:	fb02 3200 	mla	r2, r2, r0, r3
{
   10da0:	b410      	push	{r4}
	if (instance->sched_cb) {
   10da2:	6a54      	ldr	r4, [r2, #36]	; 0x24
   10da4:	b15c      	cbz	r4, 10dbe <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   10da6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   10daa:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   10dae:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   10db2:	46a4      	mov	ip, r4
   10db4:	2201      	movs	r2, #1
}
   10db6:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   10db8:	2103      	movs	r1, #3
   10dba:	2002      	movs	r0, #2
   10dbc:	4760      	bx	ip
}
   10dbe:	bc10      	pop	{r4}
   10dc0:	4770      	bx	lr
   10dc2:	bf00      	nop
   10dc4:	200015e4 	.word	0x200015e4

00010dc8 <ticker_start_ext>:
{
   10dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   10dcc:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 10e70 <ticker_start_ext+0xa8>
{
   10dd0:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
   10dd4:	272c      	movs	r7, #44	; 0x2c
   10dd6:	fb07 8700 	mla	r7, r7, r0, r8
{
   10dda:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   10ddc:	687d      	ldr	r5, [r7, #4]
   10dde:	eb05 0cc1 	add.w	ip, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   10de2:	f815 9031 	ldrb.w	r9, [r5, r1, lsl #3]
	last = user->last + 1;
   10de6:	f89c 6003 	ldrb.w	r6, [ip, #3]
	struct ticker_instance *instance = &_instance[instance_index];
   10dea:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   10dee:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   10df2:	1c75      	adds	r5, r6, #1
{
   10df4:	4608      	mov	r0, r1
	last = user->last + 1;
   10df6:	b2ed      	uxtb	r5, r5
	if (last == user->first) {
   10df8:	f89c 1001 	ldrb.w	r1, [ip, #1]
		last = 0U;
   10dfc:	45a9      	cmp	r9, r5
   10dfe:	bf98      	it	ls
   10e00:	2500      	movls	r5, #0
	if (last == user->first) {
   10e02:	42a9      	cmp	r1, r5
	struct ticker_instance *instance = &_instance[instance_index];
   10e04:	eb08 0884 	add.w	r8, r8, r4, lsl #2
	if (last == user->first) {
   10e08:	d02f      	beq.n	10e6a <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   10e0a:	f8dc 1004 	ldr.w	r1, [ip, #4]
   10e0e:	eb06 0446 	add.w	r4, r6, r6, lsl #1
   10e12:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   10e16:	eb01 0486 	add.w	r4, r1, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   10e1a:	f04f 0904 	mov.w	r9, #4
   10e1e:	f801 9026 	strb.w	r9, [r1, r6, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   10e22:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   10e24:	9b08      	ldr	r3, [sp, #32]
   10e26:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   10e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10e2a:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   10e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10e2e:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   10e30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10e32:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   10e34:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e36:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   10e38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10e3a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   10e3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10e3e:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   10e40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10e42:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   10e44:	2102      	movs	r1, #2
	user_op->op_context = op_context;
   10e46:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
   10e48:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
   10e4a:	f8a4 e014 	strh.w	lr, [r4, #20]
	user_op->op_context = op_context;
   10e4e:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   10e50:	62a1      	str	r1, [r4, #40]	; 0x28
	user->last = last;
   10e52:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   10e56:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   10e5a:	4798      	blx	r3
   10e5c:	4643      	mov	r3, r8
   10e5e:	4649      	mov	r1, r9
   10e60:	2200      	movs	r2, #0
   10e62:	47a8      	blx	r5
	return user_op->status;
   10e64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   10e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   10e6a:	2001      	movs	r0, #1
}
   10e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10e70:	200015e4 	.word	0x200015e4

00010e74 <ticker_start>:
{
   10e74:	b530      	push	{r4, r5, lr}
   10e76:	b08b      	sub	sp, #44	; 0x2c
   10e78:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10e7c:	9500      	str	r5, [sp, #0]
{
   10e7e:	9d10      	ldr	r5, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10e80:	9401      	str	r4, [sp, #4]
   10e82:	9502      	str	r5, [sp, #8]
{
   10e84:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
   10e88:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10e8a:	9403      	str	r4, [sp, #12]
   10e8c:	9504      	str	r5, [sp, #16]
{
   10e8e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   10e90:	9d14      	ldr	r5, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10e92:	9405      	str	r4, [sp, #20]
   10e94:	9506      	str	r5, [sp, #24]
{
   10e96:	9c15      	ldr	r4, [sp, #84]	; 0x54
   10e98:	9d16      	ldr	r5, [sp, #88]	; 0x58
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10e9a:	9407      	str	r4, [sp, #28]
   10e9c:	2400      	movs	r4, #0
   10e9e:	e9cd 5408 	strd	r5, r4, [sp, #32]
   10ea2:	f7ff ff91 	bl	10dc8 <ticker_start_ext>
}
   10ea6:	b00b      	add	sp, #44	; 0x2c
   10ea8:	bd30      	pop	{r4, r5, pc}
   10eaa:	bf00      	nop

00010eac <ticker_update>:
	struct ticker_instance *instance = &_instance[instance_index];
   10eac:	f8df c098 	ldr.w	ip, [pc, #152]	; 10f48 <ticker_update+0x9c>
{
   10eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->users[user_id];
   10eb4:	272c      	movs	r7, #44	; 0x2c
   10eb6:	fb07 c700 	mla	r7, r7, r0, ip
{
   10eba:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   10ebc:	687d      	ldr	r5, [r7, #4]
{
   10ebe:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   10ec2:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
   10ec6:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   10ec8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   10ecc:	f815 a030 	ldrb.w	sl, [r5, r0, lsl #3]
	last = user->last + 1;
   10ed0:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
   10ed2:	f891 9001 	ldrb.w	r9, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   10ed6:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   10eda:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   10ede:	1c75      	adds	r5, r6, #1
   10ee0:	b2ed      	uxtb	r5, r5
		last = 0U;
   10ee2:	45aa      	cmp	sl, r5
   10ee4:	bf98      	it	ls
   10ee6:	2500      	movls	r5, #0
	if (last == user->first) {
   10ee8:	45a9      	cmp	r9, r5
	struct ticker_instance *instance = &_instance[instance_index];
   10eea:	eb0c 0a84 	add.w	sl, ip, r4, lsl #2
	if (last == user->first) {
   10eee:	d028      	beq.n	10f42 <ticker_update+0x96>
	user_op = &user->user_op[user->last];
   10ef0:	f8d1 c004 	ldr.w	ip, [r1, #4]
   10ef4:	eb06 0446 	add.w	r4, r6, r6, lsl #1
   10ef8:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   10efc:	eb0c 0486 	add.w	r4, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   10f00:	f04f 0905 	mov.w	r9, #5
   10f04:	f80c 9026 	strb.w	r9, [ip, r6, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   10f08:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   10f0a:	9b08      	ldr	r3, [sp, #32]
   10f0c:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   10f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f10:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   10f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10f14:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   10f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10f18:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   10f1a:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   10f1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
   10f1e:	7062      	strb	r2, [r4, #1]
	user_op->params.update.force = force;
   10f20:	f884 e016 	strb.w	lr, [r4, #22]
	user_op->op_context = op_context;
   10f24:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->params.update.lazy = lazy;
   10f26:	f8a4 8014 	strh.w	r8, [r4, #20]
	user_op->status = TICKER_STATUS_BUSY;
   10f2a:	62a6      	str	r6, [r4, #40]	; 0x28
	user->last = last;
   10f2c:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   10f2e:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   10f32:	4798      	blx	r3
   10f34:	4653      	mov	r3, sl
   10f36:	2200      	movs	r2, #0
   10f38:	2104      	movs	r1, #4
   10f3a:	47a8      	blx	r5
	return user_op->status;
   10f3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   10f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
   10f42:	2001      	movs	r0, #1
}
   10f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10f48:	200015e4 	.word	0x200015e4

00010f4c <ticker_stop>:
	struct ticker_instance *instance = &_instance[instance_index];
   10f4c:	f8df c084 	ldr.w	ip, [pc, #132]	; 10fd4 <ticker_stop+0x88>
{
   10f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	user = &instance->users[user_id];
   10f54:	272c      	movs	r7, #44	; 0x2c
   10f56:	fb07 c700 	mla	r7, r7, r0, ip
{
   10f5a:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   10f5c:	687d      	ldr	r5, [r7, #4]
{
   10f5e:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   10f60:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   10f64:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
   10f68:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
   10f6a:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   10f6e:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   10f72:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   10f76:	1c75      	adds	r5, r6, #1
   10f78:	b2ed      	uxtb	r5, r5
		last = 0U;
   10f7a:	45a8      	cmp	r8, r5
   10f7c:	bf98      	it	ls
   10f7e:	2500      	movls	r5, #0
	if (last == user->first) {
   10f80:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
   10f82:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	if (last == user->first) {
   10f86:	d021      	beq.n	10fcc <ticker_stop+0x80>
	user_op = &user->user_op[user->last];
   10f88:	f8d1 c004 	ldr.w	ip, [r1, #4]
   10f8c:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
   10f90:	eb06 068e 	add.w	r6, r6, lr, lsl #2
   10f94:	eb0c 0886 	add.w	r8, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   10f98:	f04f 0e06 	mov.w	lr, #6
   10f9c:	f80c e026 	strb.w	lr, [ip, r6, lsl #2]
	user_op->fp_op_func = fp_op_func;
   10fa0:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   10fa4:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   10fa6:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
   10fa8:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->op_context = op_context;
   10fac:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   10fb0:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
	user->last = last;
   10fb4:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   10fb6:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   10fba:	4798      	blx	r3
   10fbc:	4623      	mov	r3, r4
   10fbe:	2200      	movs	r2, #0
   10fc0:	2104      	movs	r1, #4
   10fc2:	47a8      	blx	r5
	return user_op->status;
   10fc4:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
   10fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10fcc:	2001      	movs	r0, #1
}
   10fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10fd2:	bf00      	nop
   10fd4:	200015e4 	.word	0x200015e4

00010fd8 <ticker_next_slot_get>:
{
   10fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   10fdc:	4f20      	ldr	r7, [pc, #128]	; (11060 <ticker_next_slot_get+0x88>)
	user = &instance->users[user_id];
   10fde:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   10fe2:	fb0c 7c00 	mla	ip, ip, r0, r7
{
   10fe6:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   10fe8:	f8dc 5004 	ldr.w	r5, [ip, #4]
{
   10fec:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   10fee:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   10ff2:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
   10ff6:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
   10ff8:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   10ffc:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   11000:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   11004:	1c75      	adds	r5, r6, #1
   11006:	b2ed      	uxtb	r5, r5
		last = 0U;
   11008:	45a8      	cmp	r8, r5
   1100a:	bf98      	it	ls
   1100c:	2500      	movls	r5, #0
	if (last == user->first) {
   1100e:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
   11010:	eb07 0484 	add.w	r4, r7, r4, lsl #2
	if (last == user->first) {
   11014:	d020      	beq.n	11058 <ticker_next_slot_get+0x80>
	user_op = &user->user_op[user->last];
   11016:	f8d1 e004 	ldr.w	lr, [r1, #4]
   1101a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
   1101e:	eb06 0687 	add.w	r6, r6, r7, lsl #2
   11022:	eb0e 0786 	add.w	r7, lr, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   11026:	f64f 7802 	movw	r8, #65282	; 0xff02
   1102a:	f82e 8026 	strh.w	r8, [lr, r6, lsl #2]
	user_op->params.slot_get.ticks_current = ticks_current;
   1102e:	e9c7 2301 	strd	r2, r3, [r7, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   11032:	9b06      	ldr	r3, [sp, #24]
   11034:	60fb      	str	r3, [r7, #12]
	user_op->fp_op_func = fp_op_func;
   11036:	9b07      	ldr	r3, [sp, #28]
   11038:	62fb      	str	r3, [r7, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   1103a:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   1103c:	9b08      	ldr	r3, [sp, #32]
   1103e:	633b      	str	r3, [r7, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   11040:	62be      	str	r6, [r7, #40]	; 0x28
	user->last = last;
   11042:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11044:	e9dc 3508 	ldrd	r3, r5, [ip, #32]
   11048:	4798      	blx	r3
   1104a:	4623      	mov	r3, r4
   1104c:	2200      	movs	r2, #0
   1104e:	2104      	movs	r1, #4
   11050:	47a8      	blx	r5
	return user_op->status;
   11052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
}
   11054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   11058:	2001      	movs	r0, #1
}
   1105a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1105e:	bf00      	nop
   11060:	200015e4 	.word	0x200015e4

00011064 <ticker_job_sched>:
{
   11064:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11066:	4d0a      	ldr	r5, [pc, #40]	; (11090 <ticker_job_sched+0x2c>)
   11068:	222c      	movs	r2, #44	; 0x2c
   1106a:	fb02 5200 	mla	r2, r2, r0, r5
   1106e:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
   11072:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11074:	4608      	mov	r0, r1
   11076:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
   11078:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1107c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11080:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   11084:	46b4      	mov	ip, r6
   11086:	2200      	movs	r2, #0
}
   11088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1108c:	2104      	movs	r1, #4
   1108e:	4760      	bx	ip
   11090:	200015e4 	.word	0x200015e4

00011094 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   11094:	f00a bfc8 	b.w	1c028 <cntr_cnt_get>

00011098 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11098:	1a40      	subs	r0, r0, r1
}
   1109a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1109e:	4770      	bx	lr

000110a0 <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
   110a0:	2801      	cmp	r0, #1
   110a2:	d813      	bhi.n	110cc <ll_addr_get+0x2c>
{
   110a4:	b508      	push	{r3, lr}
		return NULL;
	}

	if (addr_type) {
   110a6:	b948      	cbnz	r0, 110bc <ll_addr_get+0x1c>
		}

		return rnd_addr;
	}

	if (bdaddr) {
   110a8:	b131      	cbz	r1, 110b8 <ll_addr_get+0x18>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   110aa:	4608      	mov	r0, r1
   110ac:	2206      	movs	r2, #6
   110ae:	4909      	ldr	r1, [pc, #36]	; (110d4 <ll_addr_get+0x34>)
   110b0:	f010 fb99 	bl	217e6 <memcpy>
	}

	return pub_addr;
   110b4:	4807      	ldr	r0, [pc, #28]	; (110d4 <ll_addr_get+0x34>)
}
   110b6:	bd08      	pop	{r3, pc}
	return pub_addr;
   110b8:	4806      	ldr	r0, [pc, #24]	; (110d4 <ll_addr_get+0x34>)
}
   110ba:	bd08      	pop	{r3, pc}
		if (bdaddr) {
   110bc:	b141      	cbz	r1, 110d0 <ll_addr_get+0x30>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   110be:	4608      	mov	r0, r1
   110c0:	2206      	movs	r2, #6
   110c2:	4905      	ldr	r1, [pc, #20]	; (110d8 <ll_addr_get+0x38>)
   110c4:	f010 fb8f 	bl	217e6 <memcpy>
		return rnd_addr;
   110c8:	4803      	ldr	r0, [pc, #12]	; (110d8 <ll_addr_get+0x38>)
}
   110ca:	bd08      	pop	{r3, pc}
		return NULL;
   110cc:	2000      	movs	r0, #0
}
   110ce:	4770      	bx	lr
		return rnd_addr;
   110d0:	4801      	ldr	r0, [pc, #4]	; (110d8 <ll_addr_get+0x38>)
}
   110d2:	bd08      	pop	{r3, pc}
   110d4:	20001610 	.word	0x20001610
   110d8:	20001618 	.word	0x20001618

000110dc <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   110dc:	b570      	push	{r4, r5, r6, lr}
   110de:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   110e0:	2000      	movs	r0, #0
{
   110e2:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
   110e4:	f003 fb62 	bl	147ac <ull_adv_is_enabled>
   110e8:	b988      	cbnz	r0, 1110e <ll_addr_set+0x32>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   110ea:	f003 fd33 	bl	14b54 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   110ee:	f010 0606 	ands.w	r6, r0, #6
   110f2:	d10c      	bne.n	1110e <ll_addr_set+0x32>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   110f4:	4629      	mov	r1, r5
   110f6:	2206      	movs	r2, #6
	if (addr_type) {
   110f8:	b124      	cbz	r4, 11104 <ll_addr_set+0x28>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   110fa:	4806      	ldr	r0, [pc, #24]	; (11114 <ll_addr_set+0x38>)
   110fc:	f010 fb73 	bl	217e6 <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   11100:	4630      	mov	r0, r6
}
   11102:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   11104:	4804      	ldr	r0, [pc, #16]	; (11118 <ll_addr_set+0x3c>)
   11106:	f010 fb6e 	bl	217e6 <memcpy>
	return 0;
   1110a:	4620      	mov	r0, r4
}
   1110c:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1110e:	200c      	movs	r0, #12
}
   11110:	bd70      	pop	{r4, r5, r6, pc}
   11112:	bf00      	nop
   11114:	20001618 	.word	0x20001618
   11118:	20001610 	.word	0x20001610

0001111c <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   1111c:	2802      	cmp	r0, #2
   1111e:	d001      	beq.n	11124 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   11120:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   11122:	4770      	bx	lr
{
   11124:	b538      	push	{r3, r4, r5, lr}
   11126:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   11128:	4608      	mov	r0, r1
   1112a:	461d      	mov	r5, r3
   1112c:	f004 f912 	bl	15354 <ll_connected_get>
			if (!conn) {
   11130:	b110      	cbz	r0, 11138 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   11132:	2000      	movs	r0, #0
   11134:	7028      	strb	r0, [r5, #0]
}
   11136:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11138:	4620      	mov	r0, r4
}
   1113a:	bd38      	pop	{r3, r4, r5, pc}

0001113c <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   1113c:	2300      	movs	r3, #0
   1113e:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   11140:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   11142:	4770      	bx	lr

00011144 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   11144:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   11146:	4802      	ldr	r0, [pc, #8]	; (11150 <hci_driver_init+0xc>)
   11148:	f7f8 f83e 	bl	91c8 <bt_hci_driver_register>

	return 0;
}
   1114c:	2000      	movs	r0, #0
   1114e:	bd08      	pop	{r3, pc}
   11150:	00025a74 	.word	0x00025a74

00011154 <recv_thread>:
{
   11154:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   11156:	4d37      	ldr	r5, [pc, #220]	; (11234 <recv_thread+0xe0>)
		LL_ASSERT(0);
   11158:	4f37      	ldr	r7, [pc, #220]	; (11238 <recv_thread+0xe4>)
   1115a:	4e38      	ldr	r6, [pc, #224]	; (1123c <recv_thread+0xe8>)
{
   1115c:	b083      	sub	sp, #12
   1115e:	e015      	b.n	1118c <recv_thread+0x38>
	switch (class) {
   11160:	2b00      	cmp	r3, #0
   11162:	d13c      	bne.n	111de <recv_thread+0x8a>
		LL_ASSERT(0);
   11164:	4836      	ldr	r0, [pc, #216]	; (11240 <recv_thread+0xec>)
   11166:	23cf      	movs	r3, #207	; 0xcf
   11168:	463a      	mov	r2, r7
   1116a:	4631      	mov	r1, r6
   1116c:	f00e fac3 	bl	1f6f6 <printk>
   11170:	4040      	eors	r0, r0
   11172:	f380 8811 	msr	BASEPRI, r0
   11176:	f04f 0003 	mov.w	r0, #3
   1117a:	df02      	svc	2
	node_rx->hdr.next = NULL;
   1117c:	9b01      	ldr	r3, [sp, #4]
   1117e:	2200      	movs	r2, #0
   11180:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11182:	a801      	add	r0, sp, #4
   11184:	f002 fbae 	bl	138e4 <ll_rx_mem_release>
	z_impl_k_yield();
   11188:	f00d fd90 	bl	1ecac <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
   1118c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11194:	4628      	mov	r0, r5
   11196:	f00d fa3b 	bl	1e610 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   1119a:	2800      	cmp	r0, #0
   1119c:	d0f4      	beq.n	11188 <recv_thread+0x34>
	uint8_t class = node_rx->hdr.user_meta;
   1119e:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   111a0:	9001      	str	r0, [sp, #4]
	switch (class) {
   111a2:	2b04      	cmp	r3, #4
   111a4:	d9dc      	bls.n	11160 <recv_thread+0xc>
   111a6:	2b05      	cmp	r3, #5
   111a8:	d1dc      	bne.n	11164 <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   111aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   111ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   111b2:	2003      	movs	r0, #3
   111b4:	f7f6 fa14 	bl	75e0 <bt_buf_get_rx>
   111b8:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   111ba:	4601      	mov	r1, r0
   111bc:	9801      	ldr	r0, [sp, #4]
   111be:	f000 ff7f 	bl	120c0 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   111c2:	9b01      	ldr	r3, [sp, #4]
   111c4:	2200      	movs	r2, #0
   111c6:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   111c8:	a801      	add	r0, sp, #4
   111ca:	f002 fb8b 	bl	138e4 <ll_rx_mem_release>
		if (buf) {
   111ce:	2c00      	cmp	r4, #0
   111d0:	d0da      	beq.n	11188 <recv_thread+0x34>
			if (buf->len) {
   111d2:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   111d4:	4620      	mov	r0, r4
			if (buf->len) {
   111d6:	b1db      	cbz	r3, 11210 <recv_thread+0xbc>
				bt_recv(buf);
   111d8:	f7f7 ff34 	bl	9044 <bt_recv>
   111dc:	e7d4      	b.n	11188 <recv_thread+0x34>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   111de:	2b02      	cmp	r3, #2
   111e0:	d019      	beq.n	11216 <recv_thread+0xc2>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   111e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   111e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   111ea:	2001      	movs	r0, #1
   111ec:	f7f6 f9f8 	bl	75e0 <bt_buf_get_rx>
   111f0:	4604      	mov	r4, r0
		if (buf) {
   111f2:	9801      	ldr	r0, [sp, #4]
   111f4:	b1cc      	cbz	r4, 1122a <recv_thread+0xd6>
			hci_evt_encode(node_rx, buf);
   111f6:	4621      	mov	r1, r4
   111f8:	f000 ff9c 	bl	12134 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   111fc:	9b01      	ldr	r3, [sp, #4]
   111fe:	2200      	movs	r2, #0
   11200:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11202:	a801      	add	r0, sp, #4
   11204:	f002 fb6e 	bl	138e4 <ll_rx_mem_release>
			if (buf->len) {
   11208:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   1120a:	4620      	mov	r0, r4
			if (buf->len) {
   1120c:	2b00      	cmp	r3, #0
   1120e:	d1e3      	bne.n	111d8 <recv_thread+0x84>
				net_buf_unref(buf);
   11210:	f00b ff84 	bl	1d11c <net_buf_unref>
   11214:	e7b8      	b.n	11188 <recv_thread+0x34>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   11216:	2200      	movs	r2, #0
   11218:	2300      	movs	r3, #0
   1121a:	2101      	movs	r1, #1
   1121c:	2000      	movs	r0, #0
   1121e:	f7f6 fa15 	bl	764c <bt_buf_get_evt>
   11222:	4604      	mov	r4, r0
		if (buf) {
   11224:	9801      	ldr	r0, [sp, #4]
   11226:	2c00      	cmp	r4, #0
   11228:	d1e5      	bne.n	111f6 <recv_thread+0xa2>
	node_rx->hdr.next = NULL;
   1122a:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   1122c:	a801      	add	r0, sp, #4
   1122e:	f002 fb59 	bl	138e4 <ll_rx_mem_release>
		if (buf) {
   11232:	e7a9      	b.n	11188 <recv_thread+0x34>
   11234:	200007cc 	.word	0x200007cc
   11238:	000259b4 	.word	0x000259b4
   1123c:	000259f4 	.word	0x000259f4
   11240:	00025984 	.word	0x00025984

00011244 <prio_recv_thread>:
{
   11244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   11248:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 11300 <prio_recv_thread+0xbc>
				k_fifo_put(&recv_fifo, node_rx);
   1124c:	4f2b      	ldr	r7, [pc, #172]	; (112fc <prio_recv_thread+0xb8>)
{
   1124e:	b082      	sub	sp, #8
   11250:	e00c      	b.n	1126c <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11252:	f7f6 f9fb 	bl	764c <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   11256:	4622      	mov	r2, r4
   11258:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   1125c:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   1125e:	f001 fb85 	bl	1296c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   11262:	4620      	mov	r0, r4
   11264:	f7f7 ff92 	bl	918c <bt_recv_prio>
	z_impl_k_yield();
   11268:	f00d fd20 	bl	1ecac <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   1126c:	f10d 0102 	add.w	r1, sp, #2
   11270:	a801      	add	r0, sp, #4
   11272:	f002 f991 	bl	13598 <ll_rx_get>
   11276:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1127c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11280:	2100      	movs	r1, #0
   11282:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11284:	2c00      	cmp	r4, #0
   11286:	d1e4      	bne.n	11252 <prio_recv_thread+0xe>
		if (node_rx) {
   11288:	9b01      	ldr	r3, [sp, #4]
   1128a:	b193      	cbz	r3, 112b2 <prio_recv_thread+0x6e>
			ll_rx_dequeue();
   1128c:	f002 fa5e 	bl	1374c <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11290:	9e01      	ldr	r6, [sp, #4]
   11292:	4630      	mov	r0, r6
   11294:	f001 fb82 	bl	1299c <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   11298:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   1129a:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   1129c:	796b      	ldrb	r3, [r5, #5]
   1129e:	2b03      	cmp	r3, #3
   112a0:	d102      	bne.n	112a8 <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   112a2:	792b      	ldrb	r3, [r5, #4]
   112a4:	2b12      	cmp	r3, #18
   112a6:	d00c      	beq.n	112c2 <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
   112a8:	4629      	mov	r1, r5
   112aa:	4638      	mov	r0, r7
   112ac:	f013 f982 	bl	245b4 <k_queue_append>
			continue;
   112b0:	e7dc      	b.n	1126c <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
   112b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   112b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   112ba:	4640      	mov	r0, r8
   112bc:	f00d fd8c 	bl	1edd8 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   112c0:	e7d4      	b.n	1126c <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   112c2:	4621      	mov	r1, r4
   112c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   112c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   112cc:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   112ce:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   112d0:	f7f6 f9bc 	bl	764c <bt_buf_get_evt>
   112d4:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   112d6:	4622      	mov	r2, r4
   112d8:	f105 001c 	add.w	r0, r5, #28
   112dc:	4631      	mov	r1, r6
   112de:	f000 fed7 	bl	12090 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   112e2:	4630      	mov	r0, r6
   112e4:	f000 fee4 	bl	120b0 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   112e8:	4620      	mov	r0, r4
			if (buf) {
   112ea:	b124      	cbz	r4, 112f6 <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
   112ec:	f7f7 ff4e 	bl	918c <bt_recv_prio>
					net_buf_unref(buf);
   112f0:	4620      	mov	r0, r4
   112f2:	f00b ff13 	bl	1d11c <net_buf_unref>
   112f6:	9d01      	ldr	r5, [sp, #4]
   112f8:	e7d6      	b.n	112a8 <prio_recv_thread+0x64>
   112fa:	bf00      	nop
   112fc:	200007cc 	.word	0x200007cc
   11300:	2000079c 	.word	0x2000079c

00011304 <hci_driver_send>:
{
   11304:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   11306:	8983      	ldrh	r3, [r0, #12]
{
   11308:	b083      	sub	sp, #12
	if (!buf->len) {
   1130a:	2b00      	cmp	r3, #0
   1130c:	d03a      	beq.n	11384 <hci_driver_send+0x80>
	return ((struct bt_buf_data *)net_buf_user_data(buf))->type;
   1130e:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   11310:	4604      	mov	r4, r0
   11312:	b31b      	cbz	r3, 1135c <hci_driver_send+0x58>
   11314:	2b02      	cmp	r3, #2
   11316:	d00f      	beq.n	11338 <hci_driver_send+0x34>
   11318:	4921      	ldr	r1, [pc, #132]	; (113a0 <hci_driver_send+0x9c>)
   1131a:	4a22      	ldr	r2, [pc, #136]	; (113a4 <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
   1131c:	4822      	ldr	r0, [pc, #136]	; (113a8 <hci_driver_send+0xa4>)
   1131e:	1a52      	subs	r2, r2, r1
   11320:	08d2      	lsrs	r2, r2, #3
   11322:	0192      	lsls	r2, r2, #6
   11324:	4619      	mov	r1, r3
   11326:	f042 0201 	orr.w	r2, r2, #1
   1132a:	f00e fdb5 	bl	1fe98 <log_1>
		return -EINVAL;
   1132e:	f06f 0515 	mvn.w	r5, #21
}
   11332:	4628      	mov	r0, r5
   11334:	b003      	add	sp, #12
   11336:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   11338:	a901      	add	r1, sp, #4
   1133a:	f000 fe11 	bl	11f60 <hci_acl_handle>
	if (evt) {
   1133e:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   11340:	4605      	mov	r5, r0
	if (evt) {
   11342:	b113      	cbz	r3, 1134a <hci_driver_send+0x46>
		bt_recv_prio(evt);
   11344:	4618      	mov	r0, r3
   11346:	f7f7 ff21 	bl	918c <bt_recv_prio>
	if (!err) {
   1134a:	2d00      	cmp	r5, #0
   1134c:	d1f1      	bne.n	11332 <hci_driver_send+0x2e>
		net_buf_unref(buf);
   1134e:	4620      	mov	r0, r4
   11350:	f00b fee4 	bl	1d11c <net_buf_unref>
   11354:	2500      	movs	r5, #0
}
   11356:	4628      	mov	r0, r5
   11358:	b003      	add	sp, #12
   1135a:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   1135c:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   1135e:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   11360:	f000 f9b4 	bl	116cc <hci_cmd_handle>
	if (evt) {
   11364:	2800      	cmp	r0, #0
   11366:	d0f2      	beq.n	1134e <hci_driver_send+0x4a>
		bt_recv_prio(evt);
   11368:	f7f7 ff10 	bl	918c <bt_recv_prio>
		if (node_rx) {
   1136c:	9d01      	ldr	r5, [sp, #4]
   1136e:	2d00      	cmp	r5, #0
   11370:	d0ed      	beq.n	1134e <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11372:	4628      	mov	r0, r5
   11374:	f001 fb12 	bl	1299c <hci_get_class>
   11378:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   1137a:	9901      	ldr	r1, [sp, #4]
   1137c:	480b      	ldr	r0, [pc, #44]	; (113ac <hci_driver_send+0xa8>)
   1137e:	f013 f919 	bl	245b4 <k_queue_append>
	if (!err) {
   11382:	e7e4      	b.n	1134e <hci_driver_send+0x4a>
   11384:	4b06      	ldr	r3, [pc, #24]	; (113a0 <hci_driver_send+0x9c>)
   11386:	4907      	ldr	r1, [pc, #28]	; (113a4 <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
   11388:	4809      	ldr	r0, [pc, #36]	; (113b0 <hci_driver_send+0xac>)
   1138a:	1ac9      	subs	r1, r1, r3
   1138c:	08c9      	lsrs	r1, r1, #3
   1138e:	0189      	lsls	r1, r1, #6
   11390:	f041 0101 	orr.w	r1, r1, #1
   11394:	f00e fd73 	bl	1fe7e <log_0>
		return -EINVAL;
   11398:	f06f 0515 	mvn.w	r5, #21
   1139c:	e7c9      	b.n	11332 <hci_driver_send+0x2e>
   1139e:	bf00      	nop
   113a0:	00024fd8 	.word	0x00024fd8
   113a4:	00025020 	.word	0x00025020
   113a8:	00025a0c 	.word	0x00025a0c
   113ac:	200007cc 	.word	0x200007cc
   113b0:	000259f8 	.word	0x000259f8

000113b4 <hci_driver_open>:
{
   113b4:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   113b6:	4822      	ldr	r0, [pc, #136]	; (11440 <hci_driver_open+0x8c>)
{
   113b8:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   113ba:	f001 fdc3 	bl	12f44 <ll_init>
	if (err) {
   113be:	4604      	mov	r4, r0
   113c0:	2800      	cmp	r0, #0
   113c2:	d12e      	bne.n	11422 <hci_driver_open+0x6e>
	hci_init(NULL);
   113c4:	f001 fb00 	bl	129c8 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   113c8:	2600      	movs	r6, #0
   113ca:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   113cc:	f06f 0309 	mvn.w	r3, #9
   113d0:	9303      	str	r3, [sp, #12]
   113d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   113d6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   113da:	4b1a      	ldr	r3, [pc, #104]	; (11444 <hci_driver_open+0x90>)
   113dc:	491a      	ldr	r1, [pc, #104]	; (11448 <hci_driver_open+0x94>)
   113de:	9404      	str	r4, [sp, #16]
   113e0:	9400      	str	r4, [sp, #0]
   113e2:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   113e6:	4819      	ldr	r0, [pc, #100]	; (1144c <hci_driver_open+0x98>)
   113e8:	f00d fd6a 	bl	1eec0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   113ec:	4918      	ldr	r1, [pc, #96]	; (11450 <hci_driver_open+0x9c>)
   113ee:	4817      	ldr	r0, [pc, #92]	; (1144c <hci_driver_open+0x98>)
   113f0:	f013 fa46 	bl	24880 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   113f4:	f06f 0307 	mvn.w	r3, #7
   113f8:	9303      	str	r3, [sp, #12]
   113fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
   113fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
   11402:	4b14      	ldr	r3, [pc, #80]	; (11454 <hci_driver_open+0xa0>)
   11404:	4914      	ldr	r1, [pc, #80]	; (11458 <hci_driver_open+0xa4>)
   11406:	9404      	str	r4, [sp, #16]
   11408:	9400      	str	r4, [sp, #0]
   1140a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1140e:	4813      	ldr	r0, [pc, #76]	; (1145c <hci_driver_open+0xa8>)
   11410:	f00d fd56 	bl	1eec0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   11414:	4912      	ldr	r1, [pc, #72]	; (11460 <hci_driver_open+0xac>)
   11416:	4811      	ldr	r0, [pc, #68]	; (1145c <hci_driver_open+0xa8>)
   11418:	f013 fa32 	bl	24880 <z_impl_k_thread_name_set>
}
   1141c:	4620      	mov	r0, r4
   1141e:	b008      	add	sp, #32
   11420:	bdd0      	pop	{r4, r6, r7, pc}
   11422:	4b10      	ldr	r3, [pc, #64]	; (11464 <hci_driver_open+0xb0>)
   11424:	4a10      	ldr	r2, [pc, #64]	; (11468 <hci_driver_open+0xb4>)
		BT_ERR("LL initialization failed: %d", err);
   11426:	4811      	ldr	r0, [pc, #68]	; (1146c <hci_driver_open+0xb8>)
   11428:	1ad2      	subs	r2, r2, r3
   1142a:	08d2      	lsrs	r2, r2, #3
   1142c:	0192      	lsls	r2, r2, #6
   1142e:	f042 0201 	orr.w	r2, r2, #1
   11432:	4621      	mov	r1, r4
   11434:	f00e fd30 	bl	1fe98 <log_1>
}
   11438:	4620      	mov	r0, r4
   1143a:	b008      	add	sp, #32
   1143c:	bdd0      	pop	{r4, r6, r7, pc}
   1143e:	bf00      	nop
   11440:	2000079c 	.word	0x2000079c
   11444:	00011245 	.word	0x00011245
   11448:	20003c60 	.word	0x20003c60
   1144c:	20000e80 	.word	0x20000e80
   11450:	00025a40 	.word	0x00025a40
   11454:	00011155 	.word	0x00011155
   11458:	20003e40 	.word	0x20003e40
   1145c:	20000f08 	.word	0x20000f08
   11460:	00025a4c 	.word	0x00025a4c
   11464:	00024fd8 	.word	0x00024fd8
   11468:	00025020 	.word	0x00025020
   1146c:	00025a20 	.word	0x00025a20

00011470 <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
   11470:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   11472:	4b07      	ldr	r3, [pc, #28]	; (11490 <cmd_complete_status+0x20>)
{
   11474:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   11476:	2101      	movs	r1, #1
   11478:	8818      	ldrh	r0, [r3, #0]
   1147a:	f010 fcbd 	bl	21df8 <bt_hci_cmd_complete_create>
	ccst = net_buf_add(buf, sizeof(*ccst));
   1147e:	2101      	movs	r1, #1
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   11480:	4604      	mov	r4, r0
	ccst = net_buf_add(buf, sizeof(*ccst));
   11482:	3008      	adds	r0, #8
   11484:	f012 fdd8 	bl	24038 <net_buf_simple_add>
   11488:	4603      	mov	r3, r0
	ccst->status = status;

	return buf;
}
   1148a:	4620      	mov	r0, r4
	ccst->status = status;
   1148c:	701d      	strb	r5, [r3, #0]
}
   1148e:	bd38      	pop	{r3, r4, r5, pc}
   11490:	20002b0a 	.word	0x20002b0a

00011494 <meta_evt>:

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
   11494:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   11496:	f100 0408 	add.w	r4, r0, #8
{
   1149a:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   1149c:	4620      	mov	r0, r4
   1149e:	2102      	movs	r1, #2
{
   114a0:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   114a2:	f012 fdc9 	bl	24038 <net_buf_simple_add>
	struct bt_hci_evt_le_meta_event *me;

	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   114a6:	1c6b      	adds	r3, r5, #1
	hdr->evt = evt;
   114a8:	223e      	movs	r2, #62	; 0x3e
   114aa:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   114ac:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   114ae:	2101      	movs	r1, #1
   114b0:	4620      	mov	r0, r4
   114b2:	f012 fdc1 	bl	24038 <net_buf_simple_add>
	me->subevent = subevt;
   114b6:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
   114b8:	4629      	mov	r1, r5
   114ba:	4620      	mov	r0, r4
}
   114bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
   114c0:	f012 bdba 	b.w	24038 <net_buf_simple_add>

000114c4 <encrypt_change.part.0>:
	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
}

static void encrypt_change(uint8_t err, uint16_t handle,
   114c4:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   114c6:	f102 0508 	add.w	r5, r2, #8
static void encrypt_change(uint8_t err, uint16_t handle,
   114ca:	4604      	mov	r4, r0
   114cc:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   114ce:	4628      	mov	r0, r5
   114d0:	2102      	movs	r1, #2
   114d2:	f012 fdb1 	bl	24038 <net_buf_simple_add>
   114d6:	4603      	mov	r3, r0
	hdr->evt = evt;
   114d8:	2208      	movs	r2, #8
	hdr->len = len;
   114da:	2104      	movs	r1, #4
	hdr->evt = evt;
   114dc:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   114de:	7059      	strb	r1, [r3, #1]
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
		return;
	}

	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));
   114e0:	4628      	mov	r0, r5
   114e2:	f012 fda9 	bl	24038 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
   114e6:	fab4 f384 	clz	r3, r4
   114ea:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   114ec:	7004      	strb	r4, [r0, #0]
	ep->encrypt = !err ? 1 : 0;
   114ee:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
   114f0:	f8a0 6001 	strh.w	r6, [r0, #1]
}
   114f4:	bd70      	pop	{r4, r5, r6, pc}
   114f6:	bf00      	nop

000114f8 <le_remote_feat_complete>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   114f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   114fc:	4c17      	ldr	r4, [pc, #92]	; (1155c <le_remote_feat_complete+0x64>)
   114fe:	6866      	ldr	r6, [r4, #4]
   11500:	f04f 0900 	mov.w	r9, #0
   11504:	464c      	mov	r4, r9
   11506:	f006 5500 	and.w	r5, r6, #536870912	; 0x20000000
{
   1150a:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1150c:	ea54 0205 	orrs.w	r2, r4, r5
   11510:	d009      	beq.n	11526 <le_remote_feat_complete+0x2e>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   11512:	4a13      	ldr	r2, [pc, #76]	; (11560 <le_remote_feat_complete+0x68>)
   11514:	6812      	ldr	r2, [r2, #0]
   11516:	4606      	mov	r6, r0
   11518:	4688      	mov	r8, r1
   1151a:	f002 0008 	and.w	r0, r2, #8
   1151e:	4649      	mov	r1, r9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11520:	ea50 0201 	orrs.w	r2, r0, r1
   11524:	d101      	bne.n	1152a <le_remote_feat_complete+0x32>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   11526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   1152a:	4618      	mov	r0, r3
   1152c:	220b      	movs	r2, #11
   1152e:	2104      	movs	r1, #4
   11530:	f7ff ffb0 	bl	11494 <meta_evt>
	sep->status = status;
   11534:	7006      	strb	r6, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   11536:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
   1153a:	b93e      	cbnz	r6, 1154c <le_remote_feat_complete+0x54>
		memcpy(&sep->features[0],
   1153c:	f108 0104 	add.w	r1, r8, #4
   11540:	3003      	adds	r0, #3
}
   11542:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(&sep->features[0],
   11546:	2208      	movs	r2, #8
   11548:	f010 b94d 	b.w	217e6 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   1154c:	4649      	mov	r1, r9
   1154e:	3003      	adds	r0, #3
}
   11550:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   11554:	2208      	movs	r2, #8
   11556:	f010 b971 	b.w	2183c <memset>
   1155a:	bf00      	nop
   1155c:	20000120 	.word	0x20000120
   11560:	20000128 	.word	0x20000128

00011564 <hci_disconn_complete_encode.part.0>:
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
   11564:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   11566:	f102 0408 	add.w	r4, r2, #8
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
   1156a:	4605      	mov	r5, r0
   1156c:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   1156e:	4620      	mov	r0, r4
   11570:	2102      	movs	r1, #2
   11572:	f012 fd61 	bl	24038 <net_buf_simple_add>
   11576:	4603      	mov	r3, r0
	hdr->evt = evt;
   11578:	2205      	movs	r2, #5
	hdr->len = len;
   1157a:	2104      	movs	r1, #4
	hdr->evt = evt;
   1157c:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   1157e:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   11580:	4620      	mov	r0, r4
   11582:	f012 fd59 	bl	24038 <net_buf_simple_add>
	ep->status = 0x00;
   11586:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
   11588:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->status = 0x00;
   1158c:	7003      	strb	r3, [r0, #0]
	ep->reason = *((uint8_t *)pdu_data);
   1158e:	782b      	ldrb	r3, [r5, #0]
   11590:	70c3      	strb	r3, [r0, #3]
}
   11592:	bd70      	pop	{r4, r5, r6, pc}

00011594 <hci_cmd_complete>:
{
   11594:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11596:	4b06      	ldr	r3, [pc, #24]	; (115b0 <hci_cmd_complete+0x1c>)
{
   11598:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1159a:	8818      	ldrh	r0, [r3, #0]
{
   1159c:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1159e:	f010 fc2b 	bl	21df8 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   115a2:	4621      	mov	r1, r4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   115a4:	6028      	str	r0, [r5, #0]
}
   115a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
   115aa:	3008      	adds	r0, #8
   115ac:	f012 bd44 	b.w	24038 <net_buf_simple_add>
   115b0:	20002b0a 	.word	0x20002b0a

000115b4 <hci_vendor_cmd_handle_common>:
{
   115b4:	b570      	push	{r4, r5, r6, lr}
   115b6:	1e43      	subs	r3, r0, #1
   115b8:	b086      	sub	sp, #24
   115ba:	4614      	mov	r4, r2
   115bc:	2b09      	cmp	r3, #9
   115be:	d806      	bhi.n	115ce <hci_vendor_cmd_handle_common+0x1a>
   115c0:	e8df f003 	tbb	[pc, r3]
   115c4:	05382109 	.word	0x05382109
   115c8:	51054605 	.word	0x51054605
   115cc:	7465      	.short	0x7465
	return 0;
   115ce:	f06f 0015 	mvn.w	r0, #21
}
   115d2:	b006      	add	sp, #24
   115d4:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   115d6:	4620      	mov	r0, r4
   115d8:	210d      	movs	r1, #13
   115da:	f7ff ffdb 	bl	11594 <hci_cmd_complete>
   115de:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   115e0:	2202      	movs	r2, #2
	rp->status = 0x00;
   115e2:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   115e4:	2404      	movs	r4, #4
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   115e6:	2163      	movs	r1, #99	; 0x63
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   115e8:	71dc      	strb	r4, [r3, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   115ea:	7259      	strb	r1, [r3, #9]
	rp->status = 0x00;
   115ec:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   115ee:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   115f0:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   115f2:	7158      	strb	r0, [r3, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   115f4:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   115f6:	7298      	strb	r0, [r3, #10]
   115f8:	72d8      	strb	r0, [r3, #11]
   115fa:	7318      	strb	r0, [r3, #12]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   115fc:	705a      	strb	r2, [r3, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   115fe:	70da      	strb	r2, [r3, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   11600:	719a      	strb	r2, [r3, #6]
}
   11602:	b006      	add	sp, #24
   11604:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11606:	4620      	mov	r0, r4
   11608:	2141      	movs	r1, #65	; 0x41
   1160a:	f7ff ffc3 	bl	11594 <hci_cmd_complete>
	rp->status = 0x00;
   1160e:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11610:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   11612:	4621      	mov	r1, r4
	rp->status = 0x00;
   11614:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   11618:	2240      	movs	r2, #64	; 0x40
   1161a:	f010 f90f 	bl	2183c <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   1161e:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   11620:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   11622:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   11626:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   1162a:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   1162c:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   1162e:	70ab      	strb	r3, [r5, #2]
}
   11630:	b006      	add	sp, #24
   11632:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11634:	4620      	mov	r0, r4
   11636:	2109      	movs	r1, #9
   11638:	f7ff ffac 	bl	11594 <hci_cmd_complete>
	rp->status = 0x00;
   1163c:	2400      	movs	r4, #0
   1163e:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   11642:	4621      	mov	r1, r4
   11644:	2208      	movs	r2, #8
   11646:	f010 f8f9 	bl	2183c <memset>
	return 0;
   1164a:	4620      	mov	r0, r4
}
   1164c:	b006      	add	sp, #24
   1164e:	bd70      	pop	{r4, r5, r6, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   11650:	6889      	ldr	r1, [r1, #8]
   11652:	2000      	movs	r0, #0
   11654:	f7ff fd42 	bl	110dc <ll_addr_set>
	*evt = cmd_complete_status(0x00);
   11658:	2000      	movs	r0, #0
   1165a:	f7ff ff09 	bl	11470 <cmd_complete_status>
   1165e:	6020      	str	r0, [r4, #0]
   11660:	2000      	movs	r0, #0
}
   11662:	b006      	add	sp, #24
   11664:	bd70      	pop	{r4, r5, r6, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   11666:	4e18      	ldr	r6, [pc, #96]	; (116c8 <hci_vendor_cmd_handle_common+0x114>)
   11668:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1166a:	ad01      	add	r5, sp, #4
   1166c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1166e:	6833      	ldr	r3, [r6, #0]
   11670:	802b      	strh	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   11672:	4620      	mov	r0, r4
   11674:	2113      	movs	r1, #19
   11676:	f7ff ff8d 	bl	11594 <hci_cmd_complete>
	rp->status = 0x00;
   1167a:	2400      	movs	r4, #0
   1167c:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   11680:	2212      	movs	r2, #18
   11682:	a901      	add	r1, sp, #4
   11684:	f010 f8af 	bl	217e6 <memcpy>
	return 0;
   11688:	4620      	mov	r0, r4
}
   1168a:	b006      	add	sp, #24
   1168c:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   1168e:	4620      	mov	r0, r4
   11690:	2118      	movs	r1, #24
   11692:	f7ff ff7f 	bl	11594 <hci_cmd_complete>
	rp->status = 0x00;
   11696:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   11698:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   1169a:	2101      	movs	r1, #1
	rp->status = 0x00;
   1169c:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   116a0:	f00b fbc6 	bl	1ce30 <hci_vendor_read_static_addr>
   116a4:	7068      	strb	r0, [r5, #1]
	return 0;
   116a6:	4620      	mov	r0, r4
}
   116a8:	b006      	add	sp, #24
   116aa:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   116ac:	4620      	mov	r0, r4
   116ae:	2121      	movs	r1, #33	; 0x21
   116b0:	f7ff ff70 	bl	11594 <hci_cmd_complete>
	rp->status = 0x00;
   116b4:	4601      	mov	r1, r0
   116b6:	2400      	movs	r4, #0
   116b8:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   116bc:	3001      	adds	r0, #1
   116be:	f00b fc29 	bl	1cf14 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   116c2:	4620      	mov	r0, r4
}
   116c4:	b006      	add	sp, #24
   116c6:	bd70      	pop	{r4, r5, r6, pc}
   116c8:	00025a88 	.word	0x00025a88

000116cc <hci_cmd_handle>:
{
   116cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   116ce:	8983      	ldrh	r3, [r0, #12]
{
   116d0:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
   116d2:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   116d4:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   116d6:	9509      	str	r5, [sp, #36]	; 0x24
	if (cmd->len < sizeof(*chdr)) {
   116d8:	f240 80bb 	bls.w	11852 <hci_cmd_handle+0x186>
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
   116dc:	4604      	mov	r4, r0
   116de:	460e      	mov	r6, r1
   116e0:	3008      	adds	r0, #8
   116e2:	2103      	movs	r1, #3
   116e4:	f012 fcd9 	bl	2409a <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   116e8:	89a2      	ldrh	r2, [r4, #12]
   116ea:	7883      	ldrb	r3, [r0, #2]
   116ec:	429a      	cmp	r2, r3
   116ee:	f0c0 80d7 	bcc.w	118a0 <hci_cmd_handle+0x1d4>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   116f2:	8805      	ldrh	r5, [r0, #0]
   116f4:	4fa4      	ldr	r7, [pc, #656]	; (11988 <hci_cmd_handle+0x2bc>)
	switch (BT_OGF(_opcode)) {
   116f6:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
	_opcode = sys_le16_to_cpu(chdr->opcode);
   116fa:	b2a8      	uxth	r0, r5
   116fc:	803d      	strh	r5, [r7, #0]
	ocf = BT_OCF(_opcode);
   116fe:	f3c5 0309 	ubfx	r3, r5, #0, #10
	switch (BT_OGF(_opcode)) {
   11702:	ea4f 2295 	mov.w	r2, r5, lsr #10
   11706:	d26b      	bcs.n	117e0 <hci_cmd_handle+0x114>
   11708:	2a00      	cmp	r2, #0
   1170a:	d073      	beq.n	117f4 <hci_cmd_handle+0x128>
   1170c:	3a01      	subs	r2, #1
   1170e:	2a07      	cmp	r2, #7
   11710:	d870      	bhi.n	117f4 <hci_cmd_handle+0x128>
   11712:	e8df f002 	tbb	[pc, r2]
   11716:	6f90      	.short	0x6f90
   11718:	6f6f5774 	.word	0x6f6f5774
   1171c:	046f      	.short	0x046f
	switch (ocf) {
   1171e:	3b01      	subs	r3, #1
   11720:	2b4d      	cmp	r3, #77	; 0x4d
   11722:	d867      	bhi.n	117f4 <hci_cmd_handle+0x128>
   11724:	e8df f013 	tbh	[pc, r3, lsl #1]
   11728:	01860193 	.word	0x01860193
   1172c:	006601bd 	.word	0x006601bd
   11730:	01a601b6 	.word	0x01a601b6
   11734:	03b6019d 	.word	0x03b6019d
   11738:	03a703ae 	.word	0x03a703ae
   1173c:	01fb020e 	.word	0x01fb020e
   11740:	01dc01e2 	.word	0x01dc01e2
   11744:	03a201d0 	.word	0x03a201d0
   11748:	0396039c 	.word	0x0396039c
   1174c:	024d0253 	.word	0x024d0253
   11750:	0234023d 	.word	0x0234023d
   11754:	02af02bb 	.word	0x02af02bb
   11758:	029b02a1 	.word	0x029b02a1
   1175c:	02800293 	.word	0x02800293
   11760:	00660066 	.word	0x00660066
   11764:	02710066 	.word	0x02710066
   11768:	03be0265 	.word	0x03be0265
   1176c:	01670170 	.word	0x01670170
   11770:	00660066 	.word	0x00660066
   11774:	0158015e 	.word	0x0158015e
   11778:	03500153 	.word	0x03500153
   1177c:	032e033f 	.word	0x032e033f
   11780:	031f0327 	.word	0x031f0327
   11784:	02cf02fe 	.word	0x02cf02fe
   11788:	0369021c 	.word	0x0369021c
   1178c:	00660066 	.word	0x00660066
   11790:	00660066 	.word	0x00660066
   11794:	00660066 	.word	0x00660066
   11798:	00660066 	.word	0x00660066
   1179c:	00660066 	.word	0x00660066
   117a0:	00660066 	.word	0x00660066
   117a4:	00660066 	.word	0x00660066
   117a8:	00660066 	.word	0x00660066
   117ac:	00660066 	.word	0x00660066
   117b0:	00660066 	.word	0x00660066
   117b4:	00660066 	.word	0x00660066
   117b8:	00660066 	.word	0x00660066
   117bc:	0066035c 	.word	0x0066035c
   117c0:	022d0066 	.word	0x022d0066
	switch (ocf) {
   117c4:	3b01      	subs	r3, #1
   117c6:	2b08      	cmp	r3, #8
   117c8:	d814      	bhi.n	117f4 <hci_cmd_handle+0x128>
   117ca:	e8df f013 	tbh	[pc, r3, lsl #1]
   117ce:	00e9      	.short	0x00e9
   117d0:	00790088 	.word	0x00790088
   117d4:	00130013 	.word	0x00130013
   117d8:	00130013 	.word	0x00130013
   117dc:	006d0013 	.word	0x006d0013
	switch (BT_OGF(_opcode)) {
   117e0:	2a3f      	cmp	r2, #63	; 0x3f
   117e2:	d107      	bne.n	117f4 <hci_cmd_handle+0x128>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   117e4:	4621      	mov	r1, r4
   117e6:	4618      	mov	r0, r3
   117e8:	aa09      	add	r2, sp, #36	; 0x24
   117ea:	f7ff fee3 	bl	115b4 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   117ee:	3016      	adds	r0, #22
   117f0:	d154      	bne.n	1189c <hci_cmd_handle+0x1d0>
   117f2:	8838      	ldrh	r0, [r7, #0]
	return bt_hci_cmd_status_create(_opcode, status);
   117f4:	2101      	movs	r1, #1
   117f6:	f010 fb11 	bl	21e1c <bt_hci_cmd_status_create>
}
   117fa:	b00f      	add	sp, #60	; 0x3c
   117fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   117fe:	2b63      	cmp	r3, #99	; 0x63
   11800:	f000 8394 	beq.w	11f2c <hci_cmd_handle+0x860>
   11804:	d837      	bhi.n	11876 <hci_cmd_handle+0x1aa>
   11806:	2b03      	cmp	r3, #3
   11808:	f000 8372 	beq.w	11ef0 <hci_cmd_handle+0x824>
   1180c:	2b2d      	cmp	r3, #45	; 0x2d
   1180e:	d12d      	bne.n	1186c <hci_cmd_handle+0x1a0>
		read_tx_power_level(cmd, evt);
   11810:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11812:	2104      	movs	r1, #4
   11814:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
   11816:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   11818:	789e      	ldrb	r6, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1181a:	f7ff febb 	bl	11594 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   1181e:	b2a9      	uxth	r1, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11820:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   11822:	1cc3      	adds	r3, r0, #3
   11824:	4632      	mov	r2, r6
   11826:	2002      	movs	r0, #2
   11828:	f7ff fc78 	bl	1111c <ll_tx_pwr_lvl_get>
	rp->status = status;
   1182c:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
   1182e:	9809      	ldr	r0, [sp, #36]	; 0x24
   11830:	f8a4 5001 	strh.w	r5, [r4, #1]
}
   11834:	e7e1      	b.n	117fa <hci_cmd_handle+0x12e>
	switch (ocf) {
   11836:	2b06      	cmp	r3, #6
   11838:	f000 833c 	beq.w	11eb4 <hci_cmd_handle+0x7e8>
   1183c:	2b1d      	cmp	r3, #29
   1183e:	d1d9      	bne.n	117f4 <hci_cmd_handle+0x128>
	handle = sys_le16_to_cpu(cmd->handle);
   11840:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   11842:	8818      	ldrh	r0, [r3, #0]
   11844:	f003 feea 	bl	1561c <ll_version_ind_send>
   11848:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1184a:	8838      	ldrh	r0, [r7, #0]
   1184c:	f010 fae6 	bl	21e1c <bt_hci_cmd_status_create>
}
   11850:	e7d3      	b.n	117fa <hci_cmd_handle+0x12e>
   11852:	494e      	ldr	r1, [pc, #312]	; (1198c <hci_cmd_handle+0x2c0>)
   11854:	4b4e      	ldr	r3, [pc, #312]	; (11990 <hci_cmd_handle+0x2c4>)
		BT_ERR("No HCI Command header");
   11856:	484f      	ldr	r0, [pc, #316]	; (11994 <hci_cmd_handle+0x2c8>)
   11858:	1ac9      	subs	r1, r1, r3
   1185a:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
   1185c:	0189      	lsls	r1, r1, #6
   1185e:	f041 0101 	orr.w	r1, r1, #1
   11862:	f00e fb0c 	bl	1fe7e <log_0>
		return NULL;
   11866:	4628      	mov	r0, r5
}
   11868:	b00f      	add	sp, #60	; 0x3c
   1186a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   1186c:	2b01      	cmp	r3, #1
   1186e:	d1c1      	bne.n	117f4 <hci_cmd_handle+0x128>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   11870:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   11872:	4b49      	ldr	r3, [pc, #292]	; (11998 <hci_cmd_handle+0x2cc>)
   11874:	e0ed      	b.n	11a52 <hci_cmd_handle+0x386>
	switch (ocf) {
   11876:	2b7b      	cmp	r3, #123	; 0x7b
   11878:	f000 8326 	beq.w	11ec8 <hci_cmd_handle+0x7fc>
   1187c:	2b7c      	cmp	r3, #124	; 0x7c
   1187e:	d1b9      	bne.n	117f4 <hci_cmd_handle+0x128>
		write_auth_payload_timeout(cmd, evt);
   11880:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   11882:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   11884:	8859      	ldrh	r1, [r3, #2]
   11886:	4628      	mov	r0, r5
   11888:	f004 f800 	bl	1588c <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   1188c:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1188e:	2103      	movs	r1, #3
   11890:	a809      	add	r0, sp, #36	; 0x24
   11892:	f7ff fe7f 	bl	11594 <hci_cmd_complete>
	rp->status = status;
   11896:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   11898:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   1189c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1189e:	e7ac      	b.n	117fa <hci_cmd_handle+0x12e>
   118a0:	493a      	ldr	r1, [pc, #232]	; (1198c <hci_cmd_handle+0x2c0>)
   118a2:	4b3b      	ldr	r3, [pc, #236]	; (11990 <hci_cmd_handle+0x2c4>)
		BT_ERR("Invalid HCI CMD packet length");
   118a4:	483d      	ldr	r0, [pc, #244]	; (1199c <hci_cmd_handle+0x2d0>)
   118a6:	e7d7      	b.n	11858 <hci_cmd_handle+0x18c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   118a8:	2107      	movs	r1, #7
   118aa:	a809      	add	r0, sp, #36	; 0x24
   118ac:	f7ff fe72 	bl	11594 <hci_cmd_complete>
	rp->status = 0x00;
   118b0:	4601      	mov	r1, r0
   118b2:	2000      	movs	r0, #0
   118b4:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   118b8:	f7ff fbf2 	bl	110a0 <ll_addr_get>
   118bc:	9809      	ldr	r0, [sp, #36]	; 0x24
}
   118be:	e79c      	b.n	117fa <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   118c0:	2109      	movs	r1, #9
   118c2:	a809      	add	r0, sp, #36	; 0x24
   118c4:	f7ff fe66 	bl	11594 <hci_cmd_complete>
	rp->status = 0x00;
   118c8:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   118ca:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   118cc:	2208      	movs	r2, #8
	rp->status = 0x00;
   118ce:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   118d2:	f00f ffb3 	bl	2183c <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   118d6:	2360      	movs	r3, #96	; 0x60
   118d8:	9809      	ldr	r0, [sp, #36]	; 0x24
   118da:	7163      	strb	r3, [r4, #5]
}
   118dc:	e78d      	b.n	117fa <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   118de:	2141      	movs	r1, #65	; 0x41
   118e0:	a809      	add	r0, sp, #36	; 0x24
   118e2:	f7ff fe57 	bl	11594 <hci_cmd_complete>
	rp->status = 0x00;
   118e6:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   118e8:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   118ea:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   118ec:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   118f0:	f00f ffa4 	bl	2183c <memset>
	rp->commands[10] |= BIT(2);
   118f4:	7ae5      	ldrb	r5, [r4, #11]
	rp->commands[0] |= BIT(5);
   118f6:	7867      	ldrb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   118f8:	79a6      	ldrb	r6, [r4, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
   118fa:	7be0      	ldrb	r0, [r4, #15]
	rp->commands[15] |= BIT(1);
   118fc:	7c21      	ldrb	r1, [r4, #16]
	rp->commands[22] |= BIT(2);
   118fe:	7de2      	ldrb	r2, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   11900:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[10] |= BIT(2);
   11902:	f045 0504 	orr.w	r5, r5, #4
	rp->commands[0] |= BIT(5);
   11906:	f047 0720 	orr.w	r7, r7, #32
	rp->commands[5] |= BIT(6) | BIT(7);
   1190a:	f066 063f 	orn	r6, r6, #63	; 0x3f
	rp->commands[14] |= BIT(3) | BIT(5);
   1190e:	f040 0028 	orr.w	r0, r0, #40	; 0x28
	rp->commands[15] |= BIT(1);
   11912:	f041 0102 	orr.w	r1, r1, #2
	rp->commands[22] |= BIT(2);
   11916:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1191a:	f063 0308 	orn	r3, r3, #8
	rp->commands[10] |= BIT(2);
   1191e:	72e5      	strb	r5, [r4, #11]
	rp->commands[33] |= BIT(4) | BIT(5);
   11920:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   11924:	7067      	strb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   11926:	71a6      	strb	r6, [r4, #6]
	rp->commands[28] |= BIT(3);
   11928:	7f67      	ldrb	r7, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   1192a:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
	rp->commands[14] |= BIT(3) | BIT(5);
   1192e:	73e0      	strb	r0, [r4, #15]
	rp->commands[15] |= BIT(1);
   11930:	7421      	strb	r1, [r4, #16]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   11932:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
   11936:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[22] |= BIT(2);
   1193a:	75e2      	strb	r2, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1193c:	76a3      	strb	r3, [r4, #26]
	rp->commands[39] |= BIT(2);
   1193e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   11942:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[33] |= BIT(6) | BIT(7);
   11946:	f065 050f 	orn	r5, r5, #15
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1194a:	f060 0006 	orn	r0, r0, #6
	rp->commands[28] |= BIT(1) | BIT(2);
   1194e:	f047 070f 	orr.w	r7, r7, #15
	rp->commands[32] |= BIT(4) | BIT(5);
   11952:	f046 0630 	orr.w	r6, r6, #48	; 0x30
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   11956:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[39] |= BIT(2);
   1195a:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   1195e:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[33] |= BIT(6) | BIT(7);
   11962:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
	rp->commands[26] |= BIT(4) | BIT(5);
   11966:	25ff      	movs	r5, #255	; 0xff
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   11968:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
	rp->commands[28] |= BIT(1) | BIT(2);
   1196c:	7767      	strb	r7, [r4, #29]
   1196e:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
   11970:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   11974:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   11978:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   1197c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	rp->commands[26] |= BIT(4) | BIT(5);
   11980:	76e5      	strb	r5, [r4, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   11982:	7725      	strb	r5, [r4, #28]
}
   11984:	e739      	b.n	117fa <hci_cmd_handle+0x12e>
   11986:	bf00      	nop
   11988:	20002b0a 	.word	0x20002b0a
   1198c:	00025018 	.word	0x00025018
   11990:	00024fd8 	.word	0x00024fd8
   11994:	00025a9c 	.word	0x00025a9c
   11998:	20000120 	.word	0x20000120
   1199c:	00025ab4 	.word	0x00025ab4
	rp = hci_cmd_complete(evt, sizeof(*rp));
   119a0:	2109      	movs	r1, #9
   119a2:	a809      	add	r0, sp, #36	; 0x24
   119a4:	f7ff fdf6 	bl	11594 <hci_cmd_complete>
   119a8:	4603      	mov	r3, r0
	rp->status = 0x00;
   119aa:	2200      	movs	r2, #0
	rp->hci_version = LL_VERSION_NUMBER;
   119ac:	200b      	movs	r0, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   119ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   119b2:	f06f 050e 	mvn.w	r5, #14
   119b6:	2405      	movs	r4, #5
	rp->status = 0x00;
   119b8:	701a      	strb	r2, [r3, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   119ba:	7058      	strb	r0, [r3, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   119bc:	7118      	strb	r0, [r3, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   119be:	715d      	strb	r5, [r3, #5]
   119c0:	9809      	ldr	r0, [sp, #36]	; 0x24
   119c2:	719c      	strb	r4, [r3, #6]
	rp->hci_revision = sys_cpu_to_le16(0);
   119c4:	709a      	strb	r2, [r3, #2]
   119c6:	70da      	strb	r2, [r3, #3]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   119c8:	71d9      	strb	r1, [r3, #7]
   119ca:	7219      	strb	r1, [r3, #8]
	if (err == -EINVAL) {
   119cc:	e715      	b.n	117fa <hci_cmd_handle+0x12e>
	status = ll_rl_clear();
   119ce:	f007 f963 	bl	18c98 <ll_rl_clear>
	*evt = cmd_complete_status(status);
   119d2:	f7ff fd4d 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   119d6:	e710      	b.n	117fa <hci_cmd_handle+0x12e>
	status = ll_rl_remove(&cmd->peer_id_addr);
   119d8:	68a0      	ldr	r0, [r4, #8]
   119da:	f007 fcb3 	bl	19344 <ll_rl_remove>
	*evt = cmd_complete_status(status);
   119de:	f7ff fd47 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   119e2:	e70a      	b.n	117fa <hci_cmd_handle+0x12e>
		le_add_dev_to_rl(cmd, evt);
   119e4:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   119e6:	f100 0217 	add.w	r2, r0, #23
   119ea:	1dc1      	adds	r1, r0, #7
   119ec:	f007 fbec 	bl	191c8 <ll_rl_add>
	*evt = cmd_complete_status(status);
   119f0:	f7ff fd3e 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   119f4:	e701      	b.n	117fa <hci_cmd_handle+0x12e>
		le_write_default_data_len(cmd, evt);
   119f6:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   119f8:	8859      	ldrh	r1, [r3, #2]
   119fa:	8818      	ldrh	r0, [r3, #0]
   119fc:	f003 fe94 	bl	15728 <ll_length_default_set>
	*evt = cmd_complete_status(status);
   11a00:	b2c0      	uxtb	r0, r0
   11a02:	f7ff fd35 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   11a06:	e6f8      	b.n	117fa <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11a08:	2105      	movs	r1, #5
   11a0a:	a809      	add	r0, sp, #36	; 0x24
   11a0c:	f7ff fdc2 	bl	11594 <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   11a10:	a90a      	add	r1, sp, #40	; 0x28
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11a12:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   11a14:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   11a18:	f003 fe7a 	bl	15710 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   11a1c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   11a20:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   11a24:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   11a26:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   11a2a:	7022      	strb	r2, [r4, #0]
   11a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   11a2e:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   11a32:	e6e2      	b.n	117fa <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11a34:	2104      	movs	r1, #4
   11a36:	a809      	add	r0, sp, #36	; 0x24
   11a38:	f7ff fdac 	bl	11594 <hci_cmd_complete>
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   11a3c:	2203      	movs	r2, #3
	rp->status = 0x00;
   11a3e:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   11a40:	70c2      	strb	r2, [r0, #3]
	rp->status = 0x00;
   11a42:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   11a44:	221b      	movs	r2, #27
   11a46:	7042      	strb	r2, [r0, #1]
   11a48:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   11a4a:	9809      	ldr	r0, [sp, #36]	; 0x24
   11a4c:	e6d5      	b.n	117fa <hci_cmd_handle+0x12e>
   11a4e:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   11a50:	4bb1      	ldr	r3, [pc, #708]	; (11d18 <hci_cmd_handle+0x64c>)
   11a52:	6811      	ldr	r1, [r2, #0]
   11a54:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   11a56:	605a      	str	r2, [r3, #4]
   11a58:	6019      	str	r1, [r3, #0]
	*evt = cmd_complete_status(0x00);
   11a5a:	2000      	movs	r0, #0
   11a5c:	f7ff fd08 	bl	11470 <cmd_complete_status>
}
   11a60:	e6cb      	b.n	117fa <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11a62:	2102      	movs	r1, #2
   11a64:	a809      	add	r0, sp, #36	; 0x24
   11a66:	f7ff fd95 	bl	11594 <hci_cmd_complete>
	rp->status = 0x00;
   11a6a:	2300      	movs	r3, #0
   11a6c:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   11a6e:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   11a70:	9809      	ldr	r0, [sp, #36]	; 0x24
   11a72:	e6c2      	b.n	117fa <hci_cmd_handle+0x12e>
		le_set_adv_param(cmd, evt);
   11a74:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   11a76:	7ba5      	ldrb	r5, [r4, #14]
   11a78:	79a3      	ldrb	r3, [r4, #6]
   11a7a:	7962      	ldrb	r2, [r4, #5]
   11a7c:	7921      	ldrb	r1, [r4, #4]
   11a7e:	8820      	ldrh	r0, [r4, #0]
   11a80:	9502      	str	r5, [sp, #8]
   11a82:	7b65      	ldrb	r5, [r4, #13]
   11a84:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   11a86:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   11a88:	9400      	str	r4, [sp, #0]
   11a8a:	f002 fcfd 	bl	14488 <ll_adv_params_set>
	*evt = cmd_complete_status(status);
   11a8e:	f7ff fcef 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   11a92:	e6b2      	b.n	117fa <hci_cmd_handle+0x12e>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   11a94:	68a1      	ldr	r1, [r4, #8]
   11a96:	2001      	movs	r0, #1
   11a98:	f7ff fb20 	bl	110dc <ll_addr_set>
	*evt = cmd_complete_status(status);
   11a9c:	f7ff fce8 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   11aa0:	e6ab      	b.n	117fa <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11aa2:	2109      	movs	r1, #9
   11aa4:	a809      	add	r0, sp, #36	; 0x24
   11aa6:	f7ff fd75 	bl	11594 <hci_cmd_complete>
	rp->status = 0x00;
   11aaa:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11aac:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   11aae:	2208      	movs	r2, #8
	rp->status = 0x00;
   11ab0:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   11ab4:	f00f fec2 	bl	2183c <memset>
	dst[0] = val;
   11ab8:	21ff      	movs	r1, #255	; 0xff
	dst[1] = val >> 8;
   11aba:	2249      	movs	r2, #73	; 0x49
	dst[2] = val >> 16;
   11abc:	2301      	movs	r3, #1
	dst[0] = val;
   11abe:	7061      	strb	r1, [r4, #1]
	dst[1] = val >> 8;
   11ac0:	70a2      	strb	r2, [r4, #2]
	dst[2] = val >> 16;
   11ac2:	70e3      	strb	r3, [r4, #3]
	if (err == -EINVAL) {
   11ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
   11ac6:	e698      	b.n	117fa <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11ac8:	2102      	movs	r1, #2
   11aca:	a809      	add	r0, sp, #36	; 0x24
   11acc:	f7ff fd62 	bl	11594 <hci_cmd_complete>
	rp->status = 0x00;
   11ad0:	2300      	movs	r3, #0
   11ad2:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11ad4:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   11ad6:	f007 f82f 	bl	18b38 <ll_wl_size_get>
   11ada:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   11adc:	9809      	ldr	r0, [sp, #36]	; 0x24
   11ade:	e68c      	b.n	117fa <hci_cmd_handle+0x12e>
	status = ll_connect_disable(node_rx);
   11ae0:	4630      	mov	r0, r6
   11ae2:	f006 fd77 	bl	185d4 <ll_connect_disable>
	*evt = cmd_complete_status(status);
   11ae6:	f7ff fcc3 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   11aea:	e686      	b.n	117fa <hci_cmd_handle+0x12e>
		le_create_connection(cmd, evt);
   11aec:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
   11aee:	f8b4 5013 	ldrh.w	r5, [r4, #19]
   11af2:	8861      	ldrh	r1, [r4, #2]
   11af4:	7963      	ldrb	r3, [r4, #5]
   11af6:	7922      	ldrb	r2, [r4, #4]
   11af8:	8820      	ldrh	r0, [r4, #0]
   11afa:	9504      	str	r5, [sp, #16]
   11afc:	f8b4 5011 	ldrh.w	r5, [r4, #17]
   11b00:	9503      	str	r5, [sp, #12]
   11b02:	f8b4 500f 	ldrh.w	r5, [r4, #15]
   11b06:	9502      	str	r5, [sp, #8]
   11b08:	7b25      	ldrb	r5, [r4, #12]
   11b0a:	9501      	str	r5, [sp, #4]
				      &cmd->peer_addr.a.val[0],
   11b0c:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
   11b0e:	9400      	str	r4, [sp, #0]
   11b10:	f006 fb5e 	bl	181d0 <ll_create_connection>
   11b14:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   11b16:	8838      	ldrh	r0, [r7, #0]
   11b18:	f010 f980 	bl	21e1c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   11b1c:	e66d      	b.n	117fa <hci_cmd_handle+0x12e>
		le_set_scan_enable(cmd, evt);
   11b1e:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
   11b20:	7818      	ldrb	r0, [r3, #0]
   11b22:	2800      	cmp	r0, #0
   11b24:	f000 8205 	beq.w	11f32 <hci_cmd_handle+0x866>
   11b28:	785b      	ldrb	r3, [r3, #1]
   11b2a:	2b00      	cmp	r3, #0
   11b2c:	f000 8201 	beq.w	11f32 <hci_cmd_handle+0x866>
		dup_count = 0;
   11b30:	497a      	ldr	r1, [pc, #488]	; (11d1c <hci_cmd_handle+0x650>)
		dup_curr = 0U;
   11b32:	4a7b      	ldr	r2, [pc, #492]	; (11d20 <hci_cmd_handle+0x654>)
		dup_count = 0;
   11b34:	2300      	movs	r3, #0
   11b36:	600b      	str	r3, [r1, #0]
		dup_curr = 0U;
   11b38:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
   11b3a:	f002 ff8b 	bl	14a54 <ll_scan_enable>
	*evt = cmd_complete_status(status);
   11b3e:	f7ff fc97 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   11b42:	e65a      	b.n	117fa <hci_cmd_handle+0x12e>
		le_set_scan_param(cmd, evt);
   11b44:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   11b46:	7963      	ldrb	r3, [r4, #5]
   11b48:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   11b4c:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   11b50:	7820      	ldrb	r0, [r4, #0]
   11b52:	79a4      	ldrb	r4, [r4, #6]
   11b54:	9400      	str	r4, [sp, #0]
   11b56:	f7ef fa07 	bl	f68 <ll_scan_params_set>
	*evt = cmd_complete_status(status);
   11b5a:	f7ff fc89 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   11b5e:	e64c      	b.n	117fa <hci_cmd_handle+0x12e>
		le_set_default_phy(cmd, evt);
   11b60:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   11b62:	781a      	ldrb	r2, [r3, #0]
   11b64:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   11b66:	bf4a      	itet	mi
   11b68:	2007      	movmi	r0, #7
   11b6a:	7858      	ldrbpl	r0, [r3, #1]
   11b6c:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   11b6e:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   11b70:	bf4a      	itet	mi
   11b72:	2107      	movmi	r1, #7
   11b74:	7899      	ldrbpl	r1, [r3, #2]
   11b76:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   11b78:	f003 fe08 	bl	1578c <ll_phy_default_set>
	*evt = cmd_complete_status(status);
   11b7c:	f7ff fc78 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   11b80:	e63b      	b.n	117fa <hci_cmd_handle+0x12e>
		le_set_privacy_mode(cmd, evt);
   11b82:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   11b84:	79c1      	ldrb	r1, [r0, #7]
   11b86:	f007 fcc1 	bl	1950c <ll_priv_mode_set>
	*evt = cmd_complete_status(status);
   11b8a:	f7ff fc71 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   11b8e:	e634      	b.n	117fa <hci_cmd_handle+0x12e>
	handle = sys_le16_to_cpu(cmd->handle);
   11b90:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   11b92:	8818      	ldrh	r0, [r3, #0]
   11b94:	f003 fd1c 	bl	155d0 <ll_feature_req_send>
   11b98:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   11b9a:	8838      	ldrh	r0, [r7, #0]
   11b9c:	f010 f93e 	bl	21e1c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   11ba0:	e62b      	b.n	117fa <hci_cmd_handle+0x12e>
	handle = sys_le16_to_cpu(cmd->handle);
   11ba2:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11ba4:	2108      	movs	r1, #8
   11ba6:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
   11ba8:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11baa:	f7ff fcf3 	bl	11594 <hci_cmd_complete>
   11bae:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   11bb0:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   11bb2:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
   11bb4:	f003 fcc8 	bl	15548 <ll_chm_get>
	rp->status = status;
   11bb8:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   11bba:	9809      	ldr	r0, [sp, #36]	; 0x24
   11bbc:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   11bc0:	e61b      	b.n	117fa <hci_cmd_handle+0x12e>
	status = ll_chm_update(&cmd->ch_map[0]);
   11bc2:	68a0      	ldr	r0, [r4, #8]
   11bc4:	f006 fd4c 	bl	18660 <ll_chm_update>
	*evt = cmd_complete_status(status);
   11bc8:	f7ff fc52 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   11bcc:	e615      	b.n	117fa <hci_cmd_handle+0x12e>
		le_conn_update(cmd, evt);
   11bce:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   11bd0:	8911      	ldrh	r1, [r2, #8]
   11bd2:	8853      	ldrh	r3, [r2, #2]
   11bd4:	8810      	ldrh	r0, [r2, #0]
   11bd6:	9102      	str	r1, [sp, #8]
   11bd8:	88d1      	ldrh	r1, [r2, #6]
   11bda:	9101      	str	r1, [sp, #4]
   11bdc:	8892      	ldrh	r2, [r2, #4]
   11bde:	9200      	str	r2, [sp, #0]
   11be0:	2200      	movs	r2, #0
   11be2:	4611      	mov	r1, r2
   11be4:	f003 fc1e 	bl	15424 <ll_conn_update>
   11be8:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   11bea:	8838      	ldrh	r0, [r7, #0]
   11bec:	f010 f916 	bl	21e1c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   11bf0:	e603      	b.n	117fa <hci_cmd_handle+0x12e>
		le_conn_param_req_neg_reply(cmd, evt);
   11bf2:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   11bf4:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   11bf6:	789a      	ldrb	r2, [r3, #2]
   11bf8:	2300      	movs	r3, #0
   11bfa:	e9cd 3301 	strd	r3, r3, [sp, #4]
   11bfe:	4628      	mov	r0, r5
   11c00:	9300      	str	r3, [sp, #0]
   11c02:	2102      	movs	r1, #2
   11c04:	f003 fc0e 	bl	15424 <ll_conn_update>
   11c08:	e640      	b.n	1188c <hci_cmd_handle+0x1c0>
		le_conn_param_req_reply(cmd, evt);
   11c0a:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   11c0c:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   11c0e:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   11c10:	8853      	ldrh	r3, [r2, #2]
   11c12:	9102      	str	r1, [sp, #8]
   11c14:	88d1      	ldrh	r1, [r2, #6]
   11c16:	9101      	str	r1, [sp, #4]
   11c18:	8892      	ldrh	r2, [r2, #4]
   11c1a:	9200      	str	r2, [sp, #0]
   11c1c:	4628      	mov	r0, r5
   11c1e:	2200      	movs	r2, #0
   11c20:	2102      	movs	r1, #2
   11c22:	f003 fbff 	bl	15424 <ll_conn_update>
   11c26:	e631      	b.n	1188c <hci_cmd_handle+0x1c0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11c28:	2109      	movs	r1, #9
   11c2a:	a809      	add	r0, sp, #36	; 0x24
   11c2c:	f7ff fcb2 	bl	11594 <hci_cmd_complete>
	dst[0] = val;
   11c30:	23ff      	movs	r3, #255	; 0xff
	rp->status = 0x00;
   11c32:	2200      	movs	r2, #0
   11c34:	213f      	movs	r1, #63	; 0x3f
   11c36:	70c1      	strb	r1, [r0, #3]
   11c38:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   11c3a:	2103      	movs	r1, #3
	dst[0] = val;
   11c3c:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
   11c3e:	7083      	strb	r3, [r0, #2]
   11c40:	7181      	strb	r1, [r0, #6]
	dst[0] = val;
   11c42:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
   11c44:	7202      	strb	r2, [r0, #8]
   11c46:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
   11c48:	7143      	strb	r3, [r0, #5]
	if (err == -EINVAL) {
   11c4a:	9809      	ldr	r0, [sp, #36]	; 0x24
   11c4c:	e5d5      	b.n	117fa <hci_cmd_handle+0x12e>
	handle = sys_le16_to_cpu(cmd->handle);
   11c4e:	68a3      	ldr	r3, [r4, #8]
   11c50:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   11c52:	2200      	movs	r2, #0
   11c54:	4628      	mov	r0, r5
   11c56:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   11c58:	f006 f9f2 	bl	18040 <ll_start_enc_req_send>
   11c5c:	e616      	b.n	1188c <hci_cmd_handle+0x1c0>
	handle = sys_le16_to_cpu(cmd->handle);
   11c5e:	68a2      	ldr	r2, [r4, #8]
   11c60:	f832 5b02 	ldrh.w	r5, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   11c64:	2100      	movs	r1, #0
   11c66:	4628      	mov	r0, r5
   11c68:	e7f6      	b.n	11c58 <hci_cmd_handle+0x58c>
		le_start_encryption(cmd, evt);
   11c6a:	68a2      	ldr	r2, [r4, #8]
				 (uint8_t *)&cmd->rand,
   11c6c:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
   11c6e:	f102 030c 	add.w	r3, r2, #12
   11c72:	f831 0b02 	ldrh.w	r0, [r1], #2
   11c76:	320a      	adds	r2, #10
   11c78:	f006 fd1c 	bl	186b4 <ll_enc_req_send>
   11c7c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   11c7e:	8838      	ldrh	r0, [r7, #0]
   11c80:	f010 f8cc 	bl	21e1c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   11c84:	e5b9      	b.n	117fa <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11c86:	2109      	movs	r1, #9
   11c88:	a809      	add	r0, sp, #36	; 0x24
   11c8a:	f7ff fc83 	bl	11594 <hci_cmd_complete>
	rp->status = 0x00;
   11c8e:	2300      	movs	r3, #0
   11c90:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   11c94:	2108      	movs	r1, #8
   11c96:	f008 f8bb 	bl	19e10 <lll_csrand_get>
	if (err == -EINVAL) {
   11c9a:	9809      	ldr	r0, [sp, #36]	; 0x24
   11c9c:	e5ad      	b.n	117fa <hci_cmd_handle+0x12e>
		le_encrypt(cmd, evt);
   11c9e:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   11ca0:	aa0a      	add	r2, sp, #40	; 0x28
   11ca2:	f100 0110 	add.w	r1, r0, #16
   11ca6:	2300      	movs	r3, #0
   11ca8:	f00a f9f6 	bl	1c098 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11cac:	2111      	movs	r1, #17
   11cae:	a809      	add	r0, sp, #36	; 0x24
   11cb0:	f7ff fc70 	bl	11594 <hci_cmd_complete>
	rp->status = 0x00;
   11cb4:	2300      	movs	r3, #0
   11cb6:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   11cba:	a90a      	add	r1, sp, #40	; 0x28
   11cbc:	2210      	movs	r2, #16
   11cbe:	f00f fd92 	bl	217e6 <memcpy>
	if (err == -EINVAL) {
   11cc2:	9809      	ldr	r0, [sp, #36]	; 0x24
   11cc4:	e599      	b.n	117fa <hci_cmd_handle+0x12e>
	handle = sys_le16_to_cpu(cmd->handle);
   11cc6:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11cc8:	2105      	movs	r1, #5
   11cca:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
   11ccc:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11cce:	f7ff fc61 	bl	11594 <hci_cmd_complete>
   11cd2:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   11cd4:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   11cd6:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   11cd8:	1ce1      	adds	r1, r4, #3
   11cda:	f003 fd39 	bl	15750 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
   11cde:	78e2      	ldrb	r2, [r4, #3]
   11ce0:	7923      	ldrb	r3, [r4, #4]
	rp->status = status;
   11ce2:	7020      	strb	r0, [r4, #0]
   11ce4:	2a00      	cmp	r2, #0
   11ce6:	fa92 f2a2 	rbit	r2, r2
   11cea:	fab2 f282 	clz	r2, r2
   11cee:	bf08      	it	eq
   11cf0:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   11cf4:	2b00      	cmp	r3, #0
   11cf6:	fa93 f3a3 	rbit	r3, r3
   11cfa:	fab3 f383 	clz	r3, r3
   11cfe:	f102 0201 	add.w	r2, r2, #1
   11d02:	bf08      	it	eq
   11d04:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   11d08:	70e2      	strb	r2, [r4, #3]
   11d0a:	3301      	adds	r3, #1
   11d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
   11d0e:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   11d12:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
   11d14:	e571      	b.n	117fa <hci_cmd_handle+0x12e>
   11d16:	bf00      	nop
   11d18:	20000128 	.word	0x20000128
   11d1c:	20001624 	.word	0x20001624
   11d20:	20001628 	.word	0x20001628
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11d24:	2109      	movs	r1, #9
   11d26:	a809      	add	r0, sp, #36	; 0x24
   11d28:	f7ff fc34 	bl	11594 <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   11d2c:	ab0a      	add	r3, sp, #40	; 0x28
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11d2e:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   11d30:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   11d34:	f10d 001e 	add.w	r0, sp, #30
   11d38:	a908      	add	r1, sp, #32
   11d3a:	f003 fcff 	bl	1573c <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   11d3e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   11d42:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   11d46:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   11d4a:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   11d4e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   11d52:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   11d56:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   11d58:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   11d5c:	7022      	strb	r2, [r4, #0]
   11d5e:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   11d60:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   11d64:	e549      	b.n	117fa <hci_cmd_handle+0x12e>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   11d66:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   11d68:	8818      	ldrh	r0, [r3, #0]
   11d6a:	f006 fff7 	bl	18d5c <ll_rl_timeout_set>
	*evt = cmd_complete_status(0x00);
   11d6e:	2000      	movs	r0, #0
   11d70:	f7ff fb7e 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   11d74:	e541      	b.n	117fa <hci_cmd_handle+0x12e>
	status = ll_rl_enable(cmd->enable);
   11d76:	68a3      	ldr	r3, [r4, #8]
   11d78:	7818      	ldrb	r0, [r3, #0]
   11d7a:	f006 ffd3 	bl	18d24 <ll_rl_enable>
	*evt = cmd_complete_status(status);
   11d7e:	f7ff fb77 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   11d82:	e53a      	b.n	117fa <hci_cmd_handle+0x12e>
	memcpy(dst, src, sizeof(*dst));
   11d84:	68a1      	ldr	r1, [r4, #8]
   11d86:	2207      	movs	r2, #7
   11d88:	a80a      	add	r0, sp, #40	; 0x28
   11d8a:	f00f fd2c 	bl	217e6 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11d8e:	2107      	movs	r1, #7
   11d90:	a809      	add	r0, sp, #36	; 0x24
   11d92:	f7ff fbff 	bl	11594 <hci_cmd_complete>
   11d96:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   11d98:	1c61      	adds	r1, r4, #1
   11d9a:	a80a      	add	r0, sp, #40	; 0x28
   11d9c:	f007 fb9a 	bl	194d4 <ll_rl_lrpa_get>
   11da0:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   11da2:	9809      	ldr	r0, [sp, #36]	; 0x24
   11da4:	e529      	b.n	117fa <hci_cmd_handle+0x12e>
   11da6:	68a1      	ldr	r1, [r4, #8]
   11da8:	2207      	movs	r2, #7
   11daa:	a80a      	add	r0, sp, #40	; 0x28
   11dac:	f00f fd1b 	bl	217e6 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11db0:	2107      	movs	r1, #7
   11db2:	a809      	add	r0, sp, #36	; 0x24
   11db4:	f7ff fbee 	bl	11594 <hci_cmd_complete>
   11db8:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   11dba:	1c61      	adds	r1, r4, #1
   11dbc:	a80a      	add	r0, sp, #40	; 0x28
   11dbe:	f007 fb67 	bl	19490 <ll_rl_crpa_get>
   11dc2:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   11dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
   11dc6:	e518      	b.n	117fa <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11dc8:	2102      	movs	r1, #2
   11dca:	a809      	add	r0, sp, #36	; 0x24
   11dcc:	f7ff fbe2 	bl	11594 <hci_cmd_complete>
   11dd0:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   11dd2:	f006 ff5f 	bl	18c94 <ll_rl_size_get>
	rp->status = 0x00;
   11dd6:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   11dd8:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   11dda:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
   11ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
   11dde:	e50c      	b.n	117fa <hci_cmd_handle+0x12e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11de0:	2103      	movs	r1, #3
   11de2:	a809      	add	r0, sp, #36	; 0x24
   11de4:	f7ff fbd6 	bl	11594 <hci_cmd_complete>
	rp->status = 0x00;
   11de8:	4601      	mov	r1, r0
   11dea:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   11dec:	3001      	adds	r0, #1
	rp->status = 0x00;
   11dee:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   11df2:	f7ff f9a3 	bl	1113c <ll_tx_pwr_get>
	if (err == -EINVAL) {
   11df6:	9809      	ldr	r0, [sp, #36]	; 0x24
   11df8:	e4ff      	b.n	117fa <hci_cmd_handle+0x12e>
		le_set_phy(cmd, evt);
   11dfa:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   11dfc:	7895      	ldrb	r5, [r2, #2]
   11dfe:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   11e00:	8816      	ldrh	r6, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   11e02:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   11e06:	07eb      	lsls	r3, r5, #31
		cmd->tx_phys |= mask_phys;
   11e08:	bf48      	it	mi
   11e0a:	f041 0107 	orrmi.w	r1, r1, #7
   11e0e:	7913      	ldrb	r3, [r2, #4]
   11e10:	bf48      	it	mi
   11e12:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   11e14:	07ad      	lsls	r5, r5, #30
		cmd->rx_phys |= mask_phys;
   11e16:	bf44      	itt	mi
   11e18:	f043 0307 	orrmi.w	r3, r3, #7
   11e1c:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   11e1e:	ea41 0203 	orr.w	r2, r1, r3
   11e22:	f032 0207 	bics.w	r2, r2, #7
   11e26:	f040 808d 	bne.w	11f44 <hci_cmd_handle+0x878>
	if (!(cmd->tx_phys & 0x07) ||
   11e2a:	074d      	lsls	r5, r1, #29
   11e2c:	f000 8086 	beq.w	11f3c <hci_cmd_handle+0x870>
   11e30:	075a      	lsls	r2, r3, #29
   11e32:	f000 8083 	beq.w	11f3c <hci_cmd_handle+0x870>
	if (phy_opts & 0x03) {
   11e36:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   11e3a:	bf1c      	itt	ne
   11e3c:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   11e40:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   11e44:	4630      	mov	r0, r6
   11e46:	f003 fcab 	bl	157a0 <ll_phy_req_send>
   11e4a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   11e4c:	8838      	ldrh	r0, [r7, #0]
   11e4e:	f00f ffe5 	bl	21e1c <bt_hci_cmd_status_create>
   11e52:	e4d2      	b.n	117fa <hci_cmd_handle+0x12e>
	status = ll_wl_remove(&cmd->addr);
   11e54:	68a0      	ldr	r0, [r4, #8]
   11e56:	f006 fe9f 	bl	18b98 <ll_wl_remove>
	*evt = cmd_complete_status(status);
   11e5a:	f7ff fb09 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   11e5e:	e4cc      	b.n	117fa <hci_cmd_handle+0x12e>
	status = ll_wl_add(&cmd->addr);
   11e60:	68a0      	ldr	r0, [r4, #8]
   11e62:	f007 f94f 	bl	19104 <ll_wl_add>
	*evt = cmd_complete_status(status);
   11e66:	f7ff fb03 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   11e6a:	e4c6      	b.n	117fa <hci_cmd_handle+0x12e>
	status = ll_wl_clear();
   11e6c:	f006 fe66 	bl	18b3c <ll_wl_clear>
	*evt = cmd_complete_status(status);
   11e70:	f7ff fafe 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   11e74:	e4c1      	b.n	117fa <hci_cmd_handle+0x12e>
	status = ll_adv_enable(cmd->enable);
   11e76:	68a3      	ldr	r3, [r4, #8]
   11e78:	7818      	ldrb	r0, [r3, #0]
   11e7a:	f7ee fd95 	bl	9a8 <ll_adv_enable>
	*evt = cmd_complete_status(status);
   11e7e:	f7ff faf7 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   11e82:	e4ba      	b.n	117fa <hci_cmd_handle+0x12e>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   11e84:	68a1      	ldr	r1, [r4, #8]
   11e86:	f811 0b01 	ldrb.w	r0, [r1], #1
   11e8a:	f002 fd21 	bl	148d0 <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
   11e8e:	f7ff faef 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   11e92:	e4b2      	b.n	117fa <hci_cmd_handle+0x12e>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   11e94:	68a1      	ldr	r1, [r4, #8]
   11e96:	f811 0b01 	ldrb.w	r0, [r1], #1
   11e9a:	f002 fce5 	bl	14868 <ll_adv_data_set>
	*evt = cmd_complete_status(status);
   11e9e:	f7ff fae7 	bl	11470 <cmd_complete_status>
	if (err == -EINVAL) {
   11ea2:	e4aa      	b.n	117fa <hci_cmd_handle+0x12e>
		le_set_data_len(cmd, evt);
   11ea4:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   11ea6:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   11ea8:	889a      	ldrh	r2, [r3, #4]
   11eaa:	8859      	ldrh	r1, [r3, #2]
   11eac:	4628      	mov	r0, r5
   11eae:	f003 fbdb 	bl	15668 <ll_length_req_send>
   11eb2:	e4eb      	b.n	1188c <hci_cmd_handle+0x1c0>
		disconnect(cmd, evt);
   11eb4:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   11eb6:	7899      	ldrb	r1, [r3, #2]
   11eb8:	8818      	ldrh	r0, [r3, #0]
   11eba:	f003 fb65 	bl	15588 <ll_terminate_ind_send>
   11ebe:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   11ec0:	8838      	ldrh	r0, [r7, #0]
   11ec2:	f00f ffab 	bl	21e1c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   11ec6:	e498      	b.n	117fa <hci_cmd_handle+0x12e>
	handle = sys_le16_to_cpu(cmd->handle);
   11ec8:	68a3      	ldr	r3, [r4, #8]
   11eca:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   11ecc:	a90a      	add	r1, sp, #40	; 0x28
   11ece:	4628      	mov	r0, r5
   11ed0:	f003 fcb8 	bl	15844 <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11ed4:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   11ed6:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   11ed8:	a809      	add	r0, sp, #36	; 0x24
   11eda:	f7ff fb5b 	bl	11594 <hci_cmd_complete>
	rp->status = status;
   11ede:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   11ee0:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   11ee4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   11ee8:	f8a0 3003 	strh.w	r3, [r0, #3]
   11eec:	9809      	ldr	r0, [sp, #36]	; 0x24
}
   11eee:	e484      	b.n	117fa <hci_cmd_handle+0x12e>
	dup_count = -1;
   11ef0:	4816      	ldr	r0, [pc, #88]	; (11f4c <hci_cmd_handle+0x880>)
	event_mask = DEFAULT_EVENT_MASK;
   11ef2:	4917      	ldr	r1, [pc, #92]	; (11f50 <hci_cmd_handle+0x884>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   11ef4:	4a17      	ldr	r2, [pc, #92]	; (11f54 <hci_cmd_handle+0x888>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   11ef6:	4b18      	ldr	r3, [pc, #96]	; (11f58 <hci_cmd_handle+0x88c>)
	dup_count = -1;
   11ef8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11efc:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
   11efe:	f641 75ff 	movw	r5, #8191	; 0x1fff
   11f02:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11f06:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   11f0a:	201f      	movs	r0, #31
   11f0c:	2100      	movs	r1, #0
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   11f0e:	2400      	movs	r4, #0
   11f10:	2500      	movs	r5, #0
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   11f12:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   11f16:	e9c2 4500 	strd	r4, r5, [r2]
		ll_reset();
   11f1a:	f001 f985 	bl	13228 <ll_reset>
		*evt = cmd_complete_status(0x00);
   11f1e:	2000      	movs	r0, #0
   11f20:	f7ff faa6 	bl	11470 <cmd_complete_status>
	conn_count = 0U;
   11f24:	4b0d      	ldr	r3, [pc, #52]	; (11f5c <hci_cmd_handle+0x890>)
   11f26:	2200      	movs	r2, #0
   11f28:	601a      	str	r2, [r3, #0]
}
   11f2a:	e466      	b.n	117fa <hci_cmd_handle+0x12e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   11f2c:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   11f2e:	4b09      	ldr	r3, [pc, #36]	; (11f54 <hci_cmd_handle+0x888>)
   11f30:	e58f      	b.n	11a52 <hci_cmd_handle+0x386>
		dup_count = -1;
   11f32:	4b06      	ldr	r3, [pc, #24]	; (11f4c <hci_cmd_handle+0x880>)
   11f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11f38:	601a      	str	r2, [r3, #0]
   11f3a:	e5fe      	b.n	11b3a <hci_cmd_handle+0x46e>
	return bt_hci_cmd_status_create(_opcode, status);
   11f3c:	2112      	movs	r1, #18
   11f3e:	f00f ff6d 	bl	21e1c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   11f42:	e45a      	b.n	117fa <hci_cmd_handle+0x12e>
	return bt_hci_cmd_status_create(_opcode, status);
   11f44:	2111      	movs	r1, #17
   11f46:	f00f ff69 	bl	21e1c <bt_hci_cmd_status_create>
		return;
   11f4a:	e456      	b.n	117fa <hci_cmd_handle+0x12e>
   11f4c:	20001624 	.word	0x20001624
   11f50:	20000120 	.word	0x20000120
   11f54:	20000f90 	.word	0x20000f90
   11f58:	20000128 	.word	0x20000128
   11f5c:	20001620 	.word	0x20001620

00011f60 <hci_acl_handle>:
	if (buf->len < sizeof(*acl)) {
   11f60:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   11f62:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   11f64:	2b03      	cmp	r3, #3
{
   11f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*evt = NULL;
   11f6a:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   11f6c:	d942      	bls.n	11ff4 <hci_acl_handle+0x94>
	acl = net_buf_pull_mem(buf, sizeof(*acl));
   11f6e:	4605      	mov	r5, r0
   11f70:	460e      	mov	r6, r1
   11f72:	3008      	adds	r0, #8
   11f74:	2104      	movs	r1, #4
   11f76:	f012 f890 	bl	2409a <net_buf_simple_pull_mem>
	if (buf->len < len) {
   11f7a:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   11f7c:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   11f7e:	f8b0 8000 	ldrh.w	r8, [r0]
	if (buf->len < len) {
   11f82:	42bb      	cmp	r3, r7
   11f84:	d343      	bcc.n	1200e <hci_acl_handle+0xae>
	node_tx = ll_tx_mem_acquire();
   11f86:	f003 f9f7 	bl	15378 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   11f8a:	ea4f 3318 	mov.w	r3, r8, lsr #12
	if (!node_tx) {
   11f8e:	4604      	mov	r4, r0
   11f90:	2800      	cmp	r0, #0
   11f92:	d040      	beq.n	12016 <hci_acl_handle+0xb6>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   11f94:	089a      	lsrs	r2, r3, #2
   11f96:	d102      	bne.n	11f9e <hci_acl_handle+0x3e>
	switch (bt_acl_flags_pb(flags)) {
   11f98:	b333      	cbz	r3, 11fe8 <hci_acl_handle+0x88>
   11f9a:	2b01      	cmp	r3, #1
   11f9c:	d003      	beq.n	11fa6 <hci_acl_handle+0x46>
		return -EINVAL;
   11f9e:	f06f 0015 	mvn.w	r0, #21
}
   11fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11fa6:	7902      	ldrb	r2, [r0, #4]
   11fa8:	f363 0201 	bfi	r2, r3, #0, #2
   11fac:	7102      	strb	r2, [r0, #4]
	pdu_data->len = len;
   11fae:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   11fb0:	68a9      	ldr	r1, [r5, #8]
   11fb2:	463a      	mov	r2, r7
   11fb4:	1de0      	adds	r0, r4, #7
   11fb6:	f00f fc16 	bl	217e6 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   11fba:	4621      	mov	r1, r4
   11fbc:	f3c8 000b 	ubfx	r0, r8, #0, #12
   11fc0:	f003 f9e6 	bl	15390 <ll_tx_mem_enqueue>
   11fc4:	2800      	cmp	r0, #0
   11fc6:	d0ec      	beq.n	11fa2 <hci_acl_handle+0x42>
   11fc8:	4b2a      	ldr	r3, [pc, #168]	; (12074 <hci_acl_handle+0x114>)
   11fca:	492b      	ldr	r1, [pc, #172]	; (12078 <hci_acl_handle+0x118>)
		BT_ERR("Invalid Tx Enqueue");
   11fcc:	482b      	ldr	r0, [pc, #172]	; (1207c <hci_acl_handle+0x11c>)
   11fce:	1ac9      	subs	r1, r1, r3
   11fd0:	08c9      	lsrs	r1, r1, #3
   11fd2:	0189      	lsls	r1, r1, #6
   11fd4:	f041 0101 	orr.w	r1, r1, #1
   11fd8:	f00d ff51 	bl	1fe7e <log_0>
		ll_tx_mem_release(node_tx);
   11fdc:	4620      	mov	r0, r4
   11fde:	f003 f9d1 	bl	15384 <ll_tx_mem_release>
		return -EINVAL;
   11fe2:	f06f 0015 	mvn.w	r0, #21
   11fe6:	e7dc      	b.n	11fa2 <hci_acl_handle+0x42>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   11fe8:	7903      	ldrb	r3, [r0, #4]
   11fea:	2202      	movs	r2, #2
   11fec:	f362 0301 	bfi	r3, r2, #0, #2
   11ff0:	7103      	strb	r3, [r0, #4]
		break;
   11ff2:	e7dc      	b.n	11fae <hci_acl_handle+0x4e>
   11ff4:	4920      	ldr	r1, [pc, #128]	; (12078 <hci_acl_handle+0x118>)
   11ff6:	4b1f      	ldr	r3, [pc, #124]	; (12074 <hci_acl_handle+0x114>)
		BT_ERR("No HCI ACL header");
   11ff8:	4821      	ldr	r0, [pc, #132]	; (12080 <hci_acl_handle+0x120>)
   11ffa:	1ac9      	subs	r1, r1, r3
   11ffc:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
   11ffe:	0189      	lsls	r1, r1, #6
   12000:	f041 0101 	orr.w	r1, r1, #1
   12004:	f00d ff3b 	bl	1fe7e <log_0>
		return -EINVAL;
   12008:	f06f 0015 	mvn.w	r0, #21
   1200c:	e7c9      	b.n	11fa2 <hci_acl_handle+0x42>
   1200e:	491a      	ldr	r1, [pc, #104]	; (12078 <hci_acl_handle+0x118>)
   12010:	4b18      	ldr	r3, [pc, #96]	; (12074 <hci_acl_handle+0x114>)
		BT_ERR("Invalid HCI ACL packet length");
   12012:	481c      	ldr	r0, [pc, #112]	; (12084 <hci_acl_handle+0x124>)
   12014:	e7f1      	b.n	11ffa <hci_acl_handle+0x9a>
   12016:	4b17      	ldr	r3, [pc, #92]	; (12074 <hci_acl_handle+0x114>)
   12018:	4917      	ldr	r1, [pc, #92]	; (12078 <hci_acl_handle+0x118>)
		BT_ERR("Tx Buffer Overflow");
   1201a:	481b      	ldr	r0, [pc, #108]	; (12088 <hci_acl_handle+0x128>)
   1201c:	1ac9      	subs	r1, r1, r3
   1201e:	08c9      	lsrs	r1, r1, #3
   12020:	0189      	lsls	r1, r1, #6
   12022:	f041 0101 	orr.w	r1, r1, #1
   12026:	f00d ff2a 	bl	1fe7e <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   1202a:	4b18      	ldr	r3, [pc, #96]	; (1208c <hci_acl_handle+0x12c>)
   1202c:	6819      	ldr	r1, [r3, #0]
   1202e:	4623      	mov	r3, r4
   12030:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   12034:	4313      	orrs	r3, r2
   12036:	d102      	bne.n	1203e <hci_acl_handle+0xde>
		return -ENOBUFS;
   12038:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1203c:	e7b1      	b.n	11fa2 <hci_acl_handle+0x42>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1203e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12046:	2001      	movs	r0, #1
   12048:	f7f5 faca 	bl	75e0 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1204c:	2102      	movs	r1, #2
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1204e:	6030      	str	r0, [r6, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
   12050:	3008      	adds	r0, #8
   12052:	f011 fff1 	bl	24038 <net_buf_simple_add>
	hdr->len = len;
   12056:	2401      	movs	r4, #1
	hdr->evt = evt;
   12058:	221a      	movs	r2, #26
   1205a:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   1205c:	7044      	strb	r4, [r0, #1]
	ep = net_buf_add(*buf, sizeof(*ep));
   1205e:	6830      	ldr	r0, [r6, #0]
   12060:	4621      	mov	r1, r4
   12062:	3008      	adds	r0, #8
   12064:	f011 ffe8 	bl	24038 <net_buf_simple_add>
   12068:	4603      	mov	r3, r0
		return -ENOBUFS;
   1206a:	f06f 0036 	mvn.w	r0, #54	; 0x36
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   1206e:	701c      	strb	r4, [r3, #0]
   12070:	e797      	b.n	11fa2 <hci_acl_handle+0x42>
   12072:	bf00      	nop
   12074:	00024fd8 	.word	0x00024fd8
   12078:	00025018 	.word	0x00025018
   1207c:	00025b1c 	.word	0x00025b1c
   12080:	00025ad4 	.word	0x00025ad4
   12084:	00025ae8 	.word	0x00025ae8
   12088:	00025b08 	.word	0x00025b08
   1208c:	20000120 	.word	0x20000120

00012090 <hci_disconn_complete_encode>:
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   12090:	4b06      	ldr	r3, [pc, #24]	; (120ac <hci_disconn_complete_encode+0x1c>)
   12092:	681b      	ldr	r3, [r3, #0]
{
   12094:	b430      	push	{r4, r5}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   12096:	f003 0410 	and.w	r4, r3, #16
   1209a:	2500      	movs	r5, #0
   1209c:	ea54 0305 	orrs.w	r3, r4, r5
   120a0:	d101      	bne.n	120a6 <hci_disconn_complete_encode+0x16>
}
   120a2:	bc30      	pop	{r4, r5}
   120a4:	4770      	bx	lr
   120a6:	bc30      	pop	{r4, r5}
   120a8:	f7ff ba5c 	b.w	11564 <hci_disconn_complete_encode.part.0>
   120ac:	20000120 	.word	0x20000120

000120b0 <hci_disconn_complete_process>:
	conn_count--;
   120b0:	4a02      	ldr	r2, [pc, #8]	; (120bc <hci_disconn_complete_process+0xc>)
   120b2:	6813      	ldr	r3, [r2, #0]
   120b4:	3b01      	subs	r3, #1
   120b6:	6013      	str	r3, [r2, #0]
}
   120b8:	4770      	bx	lr
   120ba:	bf00      	nop
   120bc:	20001620 	.word	0x20001620

000120c0 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   120c0:	7f03      	ldrb	r3, [r0, #28]
   120c2:	f003 0303 	and.w	r3, r3, #3
   120c6:	3b01      	subs	r3, #1
   120c8:	2b01      	cmp	r3, #1
{
   120ca:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   120cc:	d90d      	bls.n	120ea <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   120ce:	4a16      	ldr	r2, [pc, #88]	; (12128 <hci_acl_encode+0x68>)
   120d0:	4916      	ldr	r1, [pc, #88]	; (1212c <hci_acl_encode+0x6c>)
   120d2:	4817      	ldr	r0, [pc, #92]	; (12130 <hci_acl_encode+0x70>)
   120d4:	f241 63e9 	movw	r3, #5865	; 0x16e9
   120d8:	f00d fb0d 	bl	1f6f6 <printk>
   120dc:	4040      	eors	r0, r0
   120de:	f380 8811 	msr	BASEPRI, r0
   120e2:	f04f 0003 	mov.w	r0, #3
   120e6:	df02      	svc	2
		break;
	}
}
   120e8:	bd70      	pop	{r4, r5, r6, pc}
   120ea:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   120ec:	f101 0508 	add.w	r5, r1, #8
   120f0:	4628      	mov	r0, r5
   120f2:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   120f4:	88e6      	ldrh	r6, [r4, #6]
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   120f6:	f011 ff9f 	bl	24038 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   120fa:	7f23      	ldrb	r3, [r4, #28]
   120fc:	f003 0303 	and.w	r3, r3, #3
   12100:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   12102:	bf0c      	ite	eq
   12104:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   12108:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   1210c:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   1210e:	7f61      	ldrb	r1, [r4, #29]
   12110:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
   12112:	4628      	mov	r0, r5
   12114:	f011 ff90 	bl	24038 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   12118:	7f62      	ldrb	r2, [r4, #29]
   1211a:	f104 011f 	add.w	r1, r4, #31
}
   1211e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   12122:	f00f bb60 	b.w	217e6 <memcpy>
   12126:	bf00      	nop
   12128:	00025b30 	.word	0x00025b30
   1212c:	000259f4 	.word	0x000259f4
   12130:	00025984 	.word	0x00025984

00012134 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   12134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12138:	7905      	ldrb	r5, [r0, #4]
   1213a:	88c7      	ldrh	r7, [r0, #6]
   1213c:	2d02      	cmp	r5, #2
{
   1213e:	4604      	mov	r4, r0
   12140:	b08b      	sub	sp, #44	; 0x2c
   12142:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   12144:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12148:	d018      	beq.n	1217c <hci_evt_encode+0x48>
	switch (node_rx->hdr.type) {
   1214a:	3d04      	subs	r5, #4
   1214c:	2d13      	cmp	r5, #19
   1214e:	d868      	bhi.n	12222 <hci_evt_encode+0xee>
   12150:	e8df f015 	tbh	[pc, r5, lsl #1]
   12154:	00670077 	.word	0x00670077
   12158:	00670067 	.word	0x00670067
   1215c:	00670067 	.word	0x00670067
   12160:	00670067 	.word	0x00670067
   12164:	00670067 	.word	0x00670067
   12168:	00670067 	.word	0x00670067
   1216c:	011c0067 	.word	0x011c0067
   12170:	01730166 	.word	0x01730166
   12174:	01ce0197 	.word	0x01ce0197
   12178:	002e01e5 	.word	0x002e01e5
	switch (pdu_data->llctrl.opcode) {
   1217c:	7fe3      	ldrb	r3, [r4, #31]
   1217e:	3b03      	subs	r3, #3
   12180:	2b12      	cmp	r3, #18
   12182:	f200 81e6 	bhi.w	12552 <hci_evt_encode+0x41e>
   12186:	e8df f013 	tbh	[pc, r3, lsl #1]
   1218a:	025b      	.short	0x025b
   1218c:	01e401e4 	.word	0x01e401e4
   12190:	028f0281 	.word	0x028f0281
   12194:	022701e4 	.word	0x022701e4
   12198:	01e401e4 	.word	0x01e401e4
   1219c:	022e01e4 	.word	0x022e01e4
   121a0:	023d01e4 	.word	0x023d01e4
   121a4:	01e401e4 	.word	0x01e401e4
   121a8:	01e401e4 	.word	0x01e401e4
   121ac:	01e701e7 	.word	0x01e701e7
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   121b0:	4bc1      	ldr	r3, [pc, #772]	; (124b8 <hci_evt_encode+0x384>)
   121b2:	6858      	ldr	r0, [r3, #4]
   121b4:	2100      	movs	r1, #0
   121b6:	460a      	mov	r2, r1
   121b8:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   121bc:	4313      	orrs	r3, r2
   121be:	d007      	beq.n	121d0 <hci_evt_encode+0x9c>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   121c0:	4bbe      	ldr	r3, [pc, #760]	; (124bc <hci_evt_encode+0x388>)
   121c2:	6818      	ldr	r0, [r3, #0]
   121c4:	460b      	mov	r3, r1
   121c6:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   121ca:	4313      	orrs	r3, r2
   121cc:	f040 81e4 	bne.w	12598 <hci_evt_encode+0x464>
   121d0:	7f61      	ldrb	r1, [r4, #29]
   121d2:	48bb      	ldr	r0, [pc, #748]	; (124c0 <hci_evt_encode+0x38c>)
   121d4:	4bbb      	ldr	r3, [pc, #748]	; (124c4 <hci_evt_encode+0x390>)
   121d6:	7fa2      	ldrb	r2, [r4, #30]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   121d8:	7f25      	ldrb	r5, [r4, #28]
   121da:	9706      	str	r7, [sp, #24]
   121dc:	2900      	cmp	r1, #0
   121de:	eba3 0300 	sub.w	r3, r3, r0
   121e2:	fa91 f1a1 	rbit	r1, r1
   121e6:	fab1 f181 	clz	r1, r1
   121ea:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   121ee:	bf08      	it	eq
   121f0:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   121f4:	2a00      	cmp	r2, #0
   121f6:	fa92 f2a2 	rbit	r2, r2
   121fa:	fab2 f282 	clz	r2, r2
   121fe:	f101 0001 	add.w	r0, r1, #1
   12202:	bf08      	it	eq
   12204:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   12208:	019b      	lsls	r3, r3, #6
   1220a:	1c54      	adds	r4, r2, #1
   1220c:	9008      	str	r0, [sp, #32]
   1220e:	f043 0302 	orr.w	r3, r3, #2
   12212:	48ad      	ldr	r0, [pc, #692]	; (124c8 <hci_evt_encode+0x394>)
   12214:	9409      	str	r4, [sp, #36]	; 0x24
   12216:	2204      	movs	r2, #4
   12218:	a906      	add	r1, sp, #24
   1221a:	9507      	str	r5, [sp, #28]
   1221c:	f00d fe85 	bl	1ff2a <log_n>
		return;
   12220:	e00c      	b.n	1223c <hci_evt_encode+0x108>
		LL_ASSERT(0);
   12222:	f241 53f4 	movw	r3, #5620	; 0x15f4
		LL_ASSERT(0);
   12226:	4aa9      	ldr	r2, [pc, #676]	; (124cc <hci_evt_encode+0x398>)
   12228:	49a9      	ldr	r1, [pc, #676]	; (124d0 <hci_evt_encode+0x39c>)
   1222a:	48aa      	ldr	r0, [pc, #680]	; (124d4 <hci_evt_encode+0x3a0>)
   1222c:	f00d fa63 	bl	1f6f6 <printk>
   12230:	4040      	eors	r0, r0
   12232:	f380 8811 	msr	BASEPRI, r0
   12236:	f04f 0003 	mov.w	r0, #3
   1223a:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   1223c:	b00b      	add	sp, #44	; 0x2c
   1223e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   12242:	4aa5      	ldr	r2, [pc, #660]	; (124d8 <hci_evt_encode+0x3a4>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   12244:	7e23      	ldrb	r3, [r4, #24]
	if (adv->tx_addr) {
   12246:	7f25      	ldrb	r5, [r4, #28]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
   12248:	f894 901a 	ldrb.w	r9, [r4, #26]
	direct = node_rx->hdr.rx_ftr.direct;
   1224c:	f894 a01b 	ldrb.w	sl, [r4, #27]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   12250:	e892 0003 	ldmia.w	r2, {r0, r1}
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   12254:	425b      	negs	r3, r3
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   12256:	0c0a      	lsrs	r2, r1, #16
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   12258:	b25b      	sxtb	r3, r3
	if (adv->tx_addr) {
   1225a:	066f      	lsls	r7, r5, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   1225c:	9006      	str	r0, [sp, #24]
   1225e:	f8ad 101c 	strh.w	r1, [sp, #28]
   12262:	f88d 201e 	strb.w	r2, [sp, #30]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   12266:	9305      	str	r3, [sp, #20]
	if (adv->tx_addr) {
   12268:	f100 8237 	bmi.w	126da <hci_evt_encode+0x5a6>
	if (direct) {
   1226c:	4b92      	ldr	r3, [pc, #584]	; (124b8 <hci_evt_encode+0x384>)
   1226e:	6858      	ldr	r0, [r3, #4]
   12270:	2100      	movs	r1, #0
   12272:	460a      	mov	r2, r1
   12274:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12278:	f1ba 0f00 	cmp.w	sl, #0
   1227c:	f040 825c 	bne.w	12738 <hci_evt_encode+0x604>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12280:	4313      	orrs	r3, r2
   12282:	d0db      	beq.n	1223c <hci_evt_encode+0x108>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   12284:	4b8d      	ldr	r3, [pc, #564]	; (124bc <hci_evt_encode+0x388>)
   12286:	6819      	ldr	r1, [r3, #0]
   12288:	4653      	mov	r3, sl
   1228a:	f001 0202 	and.w	r2, r1, #2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1228e:	4313      	orrs	r3, r2
   12290:	d0d4      	beq.n	1223c <hci_evt_encode+0x108>
	if (dup_count >= 0) {
   12292:	f8df 8258 	ldr.w	r8, [pc, #600]	; 124ec <hci_evt_encode+0x3b8>
   12296:	f8d8 2000 	ldr.w	r2, [r8]
   1229a:	2a00      	cmp	r2, #0
   1229c:	db3f      	blt.n	1231e <hci_evt_encode+0x1ea>
		for (i = 0; i < dup_count; i++) {
   1229e:	f104 0b1e 	add.w	fp, r4, #30
   122a2:	d016      	beq.n	122d2 <hci_evt_encode+0x19e>
   122a4:	4d8d      	ldr	r5, [pc, #564]	; (124dc <hci_evt_encode+0x3a8>)
   122a6:	4657      	mov	r7, sl
			if (!memcmp(&adv->adv_ind.addr[0],
   122a8:	2206      	movs	r2, #6
   122aa:	4629      	mov	r1, r5
   122ac:	4658      	mov	r0, fp
   122ae:	f00f fa8a 	bl	217c6 <memcmp>
   122b2:	b938      	cbnz	r0, 122c4 <hci_evt_encode+0x190>
			    adv->tx_addr == dup_filter[i].addr.type) {
   122b4:	7f22      	ldrb	r2, [r4, #28]
   122b6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   122ba:	f3c2 1080 	ubfx	r0, r2, #6, #1
				    sizeof(bt_addr_t)) &&
   122be:	4288      	cmp	r0, r1
   122c0:	f000 8313 	beq.w	128ea <hci_evt_encode+0x7b6>
		for (i = 0; i < dup_count; i++) {
   122c4:	f8d8 2000 	ldr.w	r2, [r8]
   122c8:	3701      	adds	r7, #1
   122ca:	4297      	cmp	r7, r2
   122cc:	f105 0508 	add.w	r5, r5, #8
   122d0:	dbea      	blt.n	122a8 <hci_evt_encode+0x174>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   122d2:	4d83      	ldr	r5, [pc, #524]	; (124e0 <hci_evt_encode+0x3ac>)
   122d4:	4f83      	ldr	r7, [pc, #524]	; (124e4 <hci_evt_encode+0x3b0>)
   122d6:	682a      	ldr	r2, [r5, #0]
   122d8:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   122dc:	4659      	mov	r1, fp
   122de:	1c90      	adds	r0, r2, #2
   122e0:	2206      	movs	r2, #6
   122e2:	f00f fa80 	bl	217e6 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   122e6:	682a      	ldr	r2, [r5, #0]
   122e8:	7f21      	ldrb	r1, [r4, #28]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   122ea:	f8d8 3000 	ldr.w	r3, [r8]
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   122ee:	eb07 00c2 	add.w	r0, r7, r2, lsl #3
   122f2:	f3c1 1180 	ubfx	r1, r1, #6, #1
   122f6:	7041      	strb	r1, [r0, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
   122f8:	7f20      	ldrb	r0, [r4, #28]
   122fa:	2101      	movs	r1, #1
   122fc:	f000 000f 	and.w	r0, r0, #15
   12300:	4081      	lsls	r1, r0
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12302:	2b0f      	cmp	r3, #15
		dup_filter[dup_curr].mask = BIT(adv->type);
   12304:	f807 1032 	strb.w	r1, [r7, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12308:	f300 82ec 	bgt.w	128e4 <hci_evt_encode+0x7b0>
			dup_count++;
   1230c:	1c59      	adds	r1, r3, #1
			dup_curr = dup_count;
   1230e:	460a      	mov	r2, r1
			dup_count++;
   12310:	f8c8 1000 	str.w	r1, [r8]
			dup_curr = dup_count;
   12314:	6029      	str	r1, [r5, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12316:	2a10      	cmp	r2, #16
			dup_curr = 0U;
   12318:	bf04      	itt	eq
   1231a:	2300      	moveq	r3, #0
   1231c:	602b      	streq	r3, [r5, #0]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   1231e:	7f23      	ldrb	r3, [r4, #28]
   12320:	f003 030f 	and.w	r3, r3, #15
   12324:	2b01      	cmp	r3, #1
   12326:	f000 82da 	beq.w	128de <hci_evt_encode+0x7aa>
		data_len = (adv->len - BDADDR_SIZE);
   1232a:	7f63      	ldrb	r3, [r4, #29]
   1232c:	f1a3 0a06 	sub.w	sl, r3, #6
   12330:	fa5f fa8a 	uxtb.w	sl, sl
   12334:	3305      	adds	r3, #5
   12336:	b2da      	uxtb	r2, r3
   12338:	4657      	mov	r7, sl
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   1233a:	2102      	movs	r1, #2
   1233c:	4630      	mov	r0, r6
   1233e:	f7ff f8a9 	bl	11494 <meta_evt>
	sep->num_reports = 1U;
   12342:	2301      	movs	r3, #1
   12344:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   12346:	7f23      	ldrb	r3, [r4, #28]
   12348:	aa0a      	add	r2, sp, #40	; 0x28
   1234a:	f003 030f 	and.w	r3, r3, #15
   1234e:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   12350:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
   12352:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   12356:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
   12358:	f006 fc9c 	bl	18c94 <ll_rl_size_get>
   1235c:	4581      	cmp	r9, r0
   1235e:	f080 82b3 	bcs.w	128c8 <hci_evt_encode+0x794>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   12362:	4648      	mov	r0, r9
   12364:	1cea      	adds	r2, r5, #3
   12366:	1ca9      	adds	r1, r5, #2
   12368:	f006 fc50 	bl	18c0c <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
   1236c:	78ab      	ldrb	r3, [r5, #2]
   1236e:	3302      	adds	r3, #2
   12370:	70ab      	strb	r3, [r5, #2]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   12372:	f105 060a 	add.w	r6, r5, #10
	adv_info->length = data_len;
   12376:	f885 a009 	strb.w	sl, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   1237a:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1237e:	4630      	mov	r0, r6
   12380:	463a      	mov	r2, r7
   12382:	f00f fa30 	bl	217e6 <memcpy>
	*prssi = rssi;
   12386:	9b05      	ldr	r3, [sp, #20]
   12388:	55f3      	strb	r3, [r6, r7]
   1238a:	e757      	b.n	1223c <hci_evt_encode+0x108>
	uint8_t status = cc->status;
   1238c:	7f25      	ldrb	r5, [r4, #28]
	if (!status) {
   1238e:	2d00      	cmp	r5, #0
   12390:	f000 819a 	beq.w	126c8 <hci_evt_encode+0x594>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12394:	4b48      	ldr	r3, [pc, #288]	; (124b8 <hci_evt_encode+0x384>)
   12396:	6859      	ldr	r1, [r3, #4]
   12398:	f04f 0800 	mov.w	r8, #0
   1239c:	4642      	mov	r2, r8
   1239e:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   123a2:	4313      	orrs	r3, r2
   123a4:	f43f af4a 	beq.w	1223c <hci_evt_encode+0x108>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   123a8:	4b44      	ldr	r3, [pc, #272]	; (124bc <hci_evt_encode+0x388>)
   123aa:	f8d3 c000 	ldr.w	ip, [r3]
   123ae:	f240 2101 	movw	r1, #513	; 0x201
   123b2:	ea0c 0201 	and.w	r2, ip, r1
   123b6:	4643      	mov	r3, r8
   123b8:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   123ba:	f40c 7000 	and.w	r0, ip, #512	; 0x200
   123be:	4641      	mov	r1, r8
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   123c0:	f43f af3c 	beq.w	1223c <hci_evt_encode+0x108>
	if (!status) {
   123c4:	2d00      	cmp	r5, #0
   123c6:	f040 819a 	bne.w	126fe <hci_evt_encode+0x5ca>
		conn_count++;
   123ca:	4a47      	ldr	r2, [pc, #284]	; (124e8 <hci_evt_encode+0x3b4>)
   123cc:	6813      	ldr	r3, [r2, #0]
   123ce:	3301      	adds	r3, #1
   123d0:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   123d2:	ea50 0301 	orrs.w	r3, r0, r1
   123d6:	f104 081f 	add.w	r8, r4, #31
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   123da:	4630      	mov	r0, r6
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   123dc:	f040 823c 	bne.w	12858 <hci_evt_encode+0x724>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   123e0:	2212      	movs	r2, #18
   123e2:	2101      	movs	r1, #1
   123e4:	f7ff f856 	bl	11494 <meta_evt>
	lecc->status = 0x00;
   123e8:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   123ea:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
   123ee:	7f63      	ldrb	r3, [r4, #29]
   123f0:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   123f2:	7fa3      	ldrb	r3, [r4, #30]
   123f4:	f003 0301 	and.w	r3, r3, #1
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   123f8:	4606      	mov	r6, r0
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   123fa:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   123fc:	4641      	mov	r1, r8
   123fe:	2206      	movs	r2, #6
   12400:	3005      	adds	r0, #5
   12402:	f00f f9f0 	bl	217e6 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   12406:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   12408:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   1240a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1240c:	f8a6 200d 	strh.w	r2, [r6, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   12410:	f8a6 100b 	strh.w	r1, [r6, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   12414:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = cc->sca;
   12418:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1241c:	7473      	strb	r3, [r6, #17]
   1241e:	e70d      	b.n	1223c <hci_evt_encode+0x108>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   12420:	4b25      	ldr	r3, [pc, #148]	; (124b8 <hci_evt_encode+0x384>)
   12422:	6819      	ldr	r1, [r3, #0]
   12424:	2300      	movs	r3, #0
   12426:	f001 0210 	and.w	r2, r1, #16
   1242a:	4313      	orrs	r3, r2
   1242c:	f43f af06 	beq.w	1223c <hci_evt_encode+0x108>
   12430:	4632      	mov	r2, r6
   12432:	4639      	mov	r1, r7
   12434:	f7ff f896 	bl	11564 <hci_disconn_complete_encode.part.0>
   12438:	e700      	b.n	1223c <hci_evt_encode+0x108>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1243a:	4b1f      	ldr	r3, [pc, #124]	; (124b8 <hci_evt_encode+0x384>)
   1243c:	6858      	ldr	r0, [r3, #4]
   1243e:	2100      	movs	r1, #0
   12440:	460a      	mov	r2, r1
   12442:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12446:	4313      	orrs	r3, r2
   12448:	f43f aef8 	beq.w	1223c <hci_evt_encode+0x108>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   1244c:	4b1b      	ldr	r3, [pc, #108]	; (124bc <hci_evt_encode+0x388>)
   1244e:	6818      	ldr	r0, [r3, #0]
   12450:	460b      	mov	r3, r1
   12452:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12456:	4313      	orrs	r3, r2
   12458:	f43f aef0 	beq.w	1223c <hci_evt_encode+0x108>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   1245c:	2209      	movs	r2, #9
   1245e:	2103      	movs	r1, #3
   12460:	4630      	mov	r0, r6
   12462:	f7ff f817 	bl	11494 <meta_evt>
	sep->status = cu->status;
   12466:	7f23      	ldrb	r3, [r4, #28]
   12468:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   1246a:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   1246c:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   1246e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   12470:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
   12474:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   12478:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   1247c:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   12480:	e6dc      	b.n	1223c <hci_evt_encode+0x108>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   12482:	4b0d      	ldr	r3, [pc, #52]	; (124b8 <hci_evt_encode+0x384>)
   12484:	6859      	ldr	r1, [r3, #4]
   12486:	2400      	movs	r4, #0
   12488:	4622      	mov	r2, r4
   1248a:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
   1248e:	4313      	orrs	r3, r2
   12490:	f43f aed4 	beq.w	1223c <hci_evt_encode+0x108>
	hdr = net_buf_add(buf, sizeof(*hdr));
   12494:	3608      	adds	r6, #8
   12496:	2102      	movs	r1, #2
   12498:	4630      	mov	r0, r6
   1249a:	f011 fdcd 	bl	24038 <net_buf_simple_add>
   1249e:	4603      	mov	r3, r0
	hdr->evt = evt;
   124a0:	2230      	movs	r2, #48	; 0x30
	hdr->len = len;
   124a2:	2103      	movs	r1, #3
	ep = net_buf_add(buf, sizeof(*ep));
   124a4:	4630      	mov	r0, r6
	hdr->evt = evt;
   124a6:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   124a8:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   124aa:	f011 fdc5 	bl	24038 <net_buf_simple_add>
	ep->status = 0x00;
   124ae:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   124b0:	f8a0 7001 	strh.w	r7, [r0, #1]
   124b4:	e6c2      	b.n	1223c <hci_evt_encode+0x108>
   124b6:	bf00      	nop
   124b8:	20000120 	.word	0x20000120
   124bc:	20000128 	.word	0x20000128
   124c0:	00024fd8 	.word	0x00024fd8
   124c4:	00025018 	.word	0x00025018
   124c8:	00025b94 	.word	0x00025b94
   124cc:	00025b30 	.word	0x00025b30
   124d0:	000259f4 	.word	0x000259f4
   124d4:	00025984 	.word	0x00025984
   124d8:	000251cc 	.word	0x000251cc
   124dc:	2000162e 	.word	0x2000162e
   124e0:	20001628 	.word	0x20001628
   124e4:	2000162c 	.word	0x2000162c
   124e8:	20001620 	.word	0x20001620
   124ec:	20001624 	.word	0x20001624
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   124f0:	4b8b      	ldr	r3, [pc, #556]	; (12720 <hci_evt_encode+0x5ec>)
   124f2:	6819      	ldr	r1, [r3, #0]
   124f4:	2300      	movs	r3, #0
   124f6:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
   124fa:	4313      	orrs	r3, r2
   124fc:	f43f ae9e 	beq.w	1223c <hci_evt_encode+0x108>
	hdr = net_buf_add(buf, sizeof(*hdr));
   12500:	3608      	adds	r6, #8
   12502:	2102      	movs	r1, #2
   12504:	4630      	mov	r0, r6
   12506:	f011 fd97 	bl	24038 <net_buf_simple_add>
   1250a:	4603      	mov	r3, r0
	hdr->evt = evt;
   1250c:	2257      	movs	r2, #87	; 0x57
	hdr->len = len;
   1250e:	2102      	movs	r1, #2
	ep = net_buf_add(buf, sizeof(*ep));
   12510:	4630      	mov	r0, r6
	hdr->evt = evt;
   12512:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   12514:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   12516:	f011 fd8f 	bl	24038 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   1251a:	8007      	strh	r7, [r0, #0]
   1251c:	e68e      	b.n	1223c <hci_evt_encode+0x108>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1251e:	4b81      	ldr	r3, [pc, #516]	; (12724 <hci_evt_encode+0x5f0>)
   12520:	6858      	ldr	r0, [r3, #4]
   12522:	2100      	movs	r1, #0
   12524:	460a      	mov	r2, r1
   12526:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   1252a:	4313      	orrs	r3, r2
   1252c:	f43f ae86 	beq.w	1223c <hci_evt_encode+0x108>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   12530:	4b7d      	ldr	r3, [pc, #500]	; (12728 <hci_evt_encode+0x5f4>)
   12532:	6818      	ldr	r0, [r3, #0]
   12534:	460b      	mov	r3, r1
   12536:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1253a:	4313      	orrs	r3, r2
   1253c:	f43f ae7e 	beq.w	1223c <hci_evt_encode+0x108>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
   12540:	4630      	mov	r0, r6
   12542:	2203      	movs	r2, #3
   12544:	2114      	movs	r1, #20
   12546:	f7fe ffa5 	bl	11494 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   1254a:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   1254c:	7f23      	ldrb	r3, [r4, #28]
   1254e:	7083      	strb	r3, [r0, #2]
   12550:	e674      	b.n	1223c <hci_evt_encode+0x108>
		LL_ASSERT(0);
   12552:	f241 63bd 	movw	r3, #5821	; 0x16bd
   12556:	e666      	b.n	12226 <hci_evt_encode+0xf2>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12558:	4b72      	ldr	r3, [pc, #456]	; (12724 <hci_evt_encode+0x5f0>)
   1255a:	6858      	ldr	r0, [r3, #4]
   1255c:	2100      	movs	r1, #0
   1255e:	460a      	mov	r2, r1
   12560:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12564:	4313      	orrs	r3, r2
   12566:	f43f ae69 	beq.w	1223c <hci_evt_encode+0x108>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   1256a:	4b6f      	ldr	r3, [pc, #444]	; (12728 <hci_evt_encode+0x5f4>)
   1256c:	6818      	ldr	r0, [r3, #0]
   1256e:	460b      	mov	r3, r1
   12570:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12574:	4313      	orrs	r3, r2
   12576:	f43f ae61 	beq.w	1223c <hci_evt_encode+0x108>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
   1257a:	4630      	mov	r0, r6
   1257c:	220a      	movs	r2, #10
   1257e:	2107      	movs	r1, #7
   12580:	f7fe ff88 	bl	11494 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   12584:	8007      	strh	r7, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   12586:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   12588:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   1258a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1258c:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   1258e:	8c23      	ldrh	r3, [r4, #32]
   12590:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   12592:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   12594:	8103      	strh	r3, [r0, #8]
   12596:	e651      	b.n	1223c <hci_evt_encode+0x108>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
   12598:	2205      	movs	r2, #5
   1259a:	4630      	mov	r0, r6
   1259c:	210c      	movs	r1, #12
   1259e:	f7fe ff79 	bl	11494 <meta_evt>
	sep->status = pu->status;
   125a2:	7f23      	ldrb	r3, [r4, #28]
   125a4:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   125a6:	f8a0 7001 	strh.w	r7, [r0, #1]
   125aa:	7f62      	ldrb	r2, [r4, #29]
   125ac:	2a00      	cmp	r2, #0
   125ae:	fa92 f3a2 	rbit	r3, r2
   125b2:	fab3 f383 	clz	r3, r3
   125b6:	bf08      	it	eq
   125b8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   125bc:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   125be:	70c3      	strb	r3, [r0, #3]
   125c0:	7fa2      	ldrb	r2, [r4, #30]
   125c2:	fa92 f3a2 	rbit	r3, r2
   125c6:	2a00      	cmp	r2, #0
   125c8:	fab3 f383 	clz	r3, r3
   125cc:	bf08      	it	eq
   125ce:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   125d2:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   125d4:	7103      	strb	r3, [r0, #4]
   125d6:	e631      	b.n	1223c <hci_evt_encode+0x108>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   125d8:	460b      	mov	r3, r1
   125da:	463a      	mov	r2, r7
   125dc:	4601      	mov	r1, r0
   125de:	2000      	movs	r0, #0
   125e0:	f7fe ff8a 	bl	114f8 <le_remote_feat_complete>
		break;
   125e4:	e62a      	b.n	1223c <hci_evt_encode+0x108>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   125e6:	4b4f      	ldr	r3, [pc, #316]	; (12724 <hci_evt_encode+0x5f0>)
   125e8:	6819      	ldr	r1, [r3, #0]
   125ea:	2300      	movs	r3, #0
   125ec:	f001 0280 	and.w	r2, r1, #128	; 0x80
   125f0:	4313      	orrs	r3, r2
   125f2:	f43f ae23 	beq.w	1223c <hci_evt_encode+0x108>
   125f6:	f894 0020 	ldrb.w	r0, [r4, #32]
   125fa:	4632      	mov	r2, r6
   125fc:	4639      	mov	r1, r7
   125fe:	f7fe ff61 	bl	114c4 <encrypt_change.part.0>
   12602:	e61b      	b.n	1223c <hci_evt_encode+0x108>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12604:	4b47      	ldr	r3, [pc, #284]	; (12724 <hci_evt_encode+0x5f0>)
   12606:	6858      	ldr	r0, [r3, #4]
   12608:	2100      	movs	r1, #0
   1260a:	460a      	mov	r2, r1
   1260c:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   12610:	4313      	orrs	r3, r2
   12612:	d06a      	beq.n	126ea <hci_evt_encode+0x5b6>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   12614:	4b44      	ldr	r3, [pc, #272]	; (12728 <hci_evt_encode+0x5f4>)
   12616:	6818      	ldr	r0, [r3, #0]
   12618:	460b      	mov	r3, r1
   1261a:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1261e:	4313      	orrs	r3, r2
   12620:	d063      	beq.n	126ea <hci_evt_encode+0x5b6>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   12622:	4630      	mov	r0, r6
   12624:	220a      	movs	r2, #10
   12626:	2106      	movs	r1, #6
   12628:	f7fe ff34 	bl	11494 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   1262c:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   1262e:	8c23      	ldrh	r3, [r4, #32]
   12630:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   12632:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   12634:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   12636:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   12638:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   1263a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1263c:	8103      	strh	r3, [r0, #8]
   1263e:	e5fd      	b.n	1223c <hci_evt_encode+0x108>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12640:	4b38      	ldr	r3, [pc, #224]	; (12724 <hci_evt_encode+0x5f0>)
   12642:	6858      	ldr	r0, [r3, #4]
   12644:	2100      	movs	r1, #0
   12646:	460a      	mov	r2, r1
   12648:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   1264c:	4313      	orrs	r3, r2
   1264e:	f43f adf5 	beq.w	1223c <hci_evt_encode+0x108>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   12652:	4b35      	ldr	r3, [pc, #212]	; (12728 <hci_evt_encode+0x5f4>)
   12654:	6818      	ldr	r0, [r3, #0]
   12656:	460b      	mov	r3, r1
   12658:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1265c:	4313      	orrs	r3, r2
   1265e:	f43f aded 	beq.w	1223c <hci_evt_encode+0x108>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   12662:	4630      	mov	r0, r6
   12664:	220c      	movs	r2, #12
   12666:	2105      	movs	r1, #5
   12668:	f7fe ff14 	bl	11494 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   1266c:	f104 0120 	add.w	r1, r4, #32
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   12670:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   12672:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   12674:	f820 7b02 	strh.w	r7, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   12678:	f00f f8b5 	bl	217e6 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   1267c:	f105 000a 	add.w	r0, r5, #10
   12680:	f104 0128 	add.w	r1, r4, #40	; 0x28
   12684:	2202      	movs	r2, #2
   12686:	f00f f8ae 	bl	217e6 <memcpy>
   1268a:	e5d7      	b.n	1223c <hci_evt_encode+0x108>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   1268c:	4b25      	ldr	r3, [pc, #148]	; (12724 <hci_evt_encode+0x5f0>)
   1268e:	6819      	ldr	r1, [r3, #0]
   12690:	2000      	movs	r0, #0
   12692:	f001 0280 	and.w	r2, r1, #128	; 0x80
   12696:	4603      	mov	r3, r0
   12698:	4313      	orrs	r3, r2
   1269a:	f43f adcf 	beq.w	1223c <hci_evt_encode+0x108>
   1269e:	4632      	mov	r2, r6
   126a0:	4639      	mov	r1, r7
   126a2:	f7fe ff0f 	bl	114c4 <encrypt_change.part.0>
   126a6:	e5c9      	b.n	1223c <hci_evt_encode+0x108>
		le_unknown_rsp(pdu_data, handle, buf);
   126a8:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   126ac:	290e      	cmp	r1, #14
   126ae:	f000 80cc 	beq.w	1284a <hci_evt_encode+0x716>
   126b2:	4b1e      	ldr	r3, [pc, #120]	; (1272c <hci_evt_encode+0x5f8>)
   126b4:	4a1e      	ldr	r2, [pc, #120]	; (12730 <hci_evt_encode+0x5fc>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   126b6:	481f      	ldr	r0, [pc, #124]	; (12734 <hci_evt_encode+0x600>)
   126b8:	1ad2      	subs	r2, r2, r3
   126ba:	08d2      	lsrs	r2, r2, #3
   126bc:	0192      	lsls	r2, r2, #6
   126be:	f042 0202 	orr.w	r2, r2, #2
   126c2:	f00d fbe9 	bl	1fe98 <log_1>
   126c6:	e5b9      	b.n	1223c <hci_evt_encode+0x108>
		ll_rl_crpa_set(cc->peer_addr_type,
   126c8:	7fa0      	ldrb	r0, [r4, #30]
   126ca:	f104 0325 	add.w	r3, r4, #37	; 0x25
   126ce:	22ff      	movs	r2, #255	; 0xff
   126d0:	f104 011f 	add.w	r1, r4, #31
   126d4:	f006 feb8 	bl	19448 <ll_rl_crpa_set>
   126d8:	e65c      	b.n	12394 <hci_evt_encode+0x260>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   126da:	2100      	movs	r1, #0
   126dc:	4608      	mov	r0, r1
   126de:	f104 031e 	add.w	r3, r4, #30
   126e2:	464a      	mov	r2, r9
   126e4:	f006 feb0 	bl	19448 <ll_rl_crpa_set>
   126e8:	e5c0      	b.n	1226c <hci_evt_encode+0x138>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   126ea:	2300      	movs	r3, #0
   126ec:	e9cd 3301 	strd	r3, r3, [sp, #4]
   126f0:	4638      	mov	r0, r7
   126f2:	9300      	str	r3, [sp, #0]
   126f4:	221a      	movs	r2, #26
   126f6:	2102      	movs	r1, #2
   126f8:	f002 fe94 	bl	15424 <ll_conn_update>
		return;
   126fc:	e59e      	b.n	1223c <hci_evt_encode+0x108>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   126fe:	ea50 0301 	orrs.w	r3, r0, r1
   12702:	f040 80d5 	bne.w	128b0 <hci_evt_encode+0x77c>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   12706:	2212      	movs	r2, #18
   12708:	2101      	movs	r1, #1
   1270a:	4630      	mov	r0, r6
   1270c:	f7fe fec2 	bl	11494 <meta_evt>
   12710:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   12712:	4641      	mov	r1, r8
   12714:	2212      	movs	r2, #18
   12716:	f00f f891 	bl	2183c <memset>
		lecc->status = status;
   1271a:	7025      	strb	r5, [r4, #0]
		return;
   1271c:	e58e      	b.n	1223c <hci_evt_encode+0x108>
   1271e:	bf00      	nop
   12720:	20000f90 	.word	0x20000f90
   12724:	20000120 	.word	0x20000120
   12728:	20000128 	.word	0x20000128
   1272c:	00024fd8 	.word	0x00024fd8
   12730:	00025018 	.word	0x00025018
   12734:	00025bc0 	.word	0x00025bc0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12738:	4313      	orrs	r3, r2
   1273a:	f43f ad7f 	beq.w	1223c <hci_evt_encode+0x108>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   1273e:	4b83      	ldr	r3, [pc, #524]	; (1294c <hci_evt_encode+0x818>)
   12740:	6818      	ldr	r0, [r3, #0]
   12742:	460b      	mov	r3, r1
   12744:	f400 6280 	and.w	r2, r0, #1024	; 0x400
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12748:	4313      	orrs	r3, r2
   1274a:	f43f ad77 	beq.w	1223c <hci_evt_encode+0x108>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   1274e:	7f23      	ldrb	r3, [r4, #28]
   12750:	f003 030f 	and.w	r3, r3, #15
   12754:	2b01      	cmp	r3, #1
   12756:	d00c      	beq.n	12772 <hci_evt_encode+0x63e>
   12758:	4a7d      	ldr	r2, [pc, #500]	; (12950 <hci_evt_encode+0x81c>)
   1275a:	497e      	ldr	r1, [pc, #504]	; (12954 <hci_evt_encode+0x820>)
   1275c:	487e      	ldr	r0, [pc, #504]	; (12958 <hci_evt_encode+0x824>)
   1275e:	f241 0309 	movw	r3, #4105	; 0x1009
   12762:	f00c ffc8 	bl	1f6f6 <printk>
   12766:	4040      	eors	r0, r0
   12768:	f380 8811 	msr	BASEPRI, r0
   1276c:	f04f 0003 	mov.w	r0, #3
   12770:	df02      	svc	2
	if (dup_count >= 0) {
   12772:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 12968 <hci_evt_encode+0x834>
   12776:	f8d8 2000 	ldr.w	r2, [r8]
   1277a:	2a00      	cmp	r2, #0
   1277c:	db42      	blt.n	12804 <hci_evt_encode+0x6d0>
		for (i = 0; i < dup_count; i++) {
   1277e:	f104 0a1e 	add.w	sl, r4, #30
   12782:	d016      	beq.n	127b2 <hci_evt_encode+0x67e>
   12784:	4d75      	ldr	r5, [pc, #468]	; (1295c <hci_evt_encode+0x828>)
   12786:	2700      	movs	r7, #0
			if (!memcmp(&adv->adv_ind.addr[0],
   12788:	2206      	movs	r2, #6
   1278a:	4629      	mov	r1, r5
   1278c:	4650      	mov	r0, sl
   1278e:	f00f f81a 	bl	217c6 <memcmp>
   12792:	b938      	cbnz	r0, 127a4 <hci_evt_encode+0x670>
			    adv->tx_addr == dup_filter[i].addr.type) {
   12794:	7f22      	ldrb	r2, [r4, #28]
   12796:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1279a:	f3c2 1080 	ubfx	r0, r2, #6, #1
				    sizeof(bt_addr_t)) &&
   1279e:	4288      	cmp	r0, r1
   127a0:	f000 80c2 	beq.w	12928 <hci_evt_encode+0x7f4>
		for (i = 0; i < dup_count; i++) {
   127a4:	f8d8 2000 	ldr.w	r2, [r8]
   127a8:	3701      	adds	r7, #1
   127aa:	4297      	cmp	r7, r2
   127ac:	f105 0508 	add.w	r5, r5, #8
   127b0:	dbea      	blt.n	12788 <hci_evt_encode+0x654>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   127b2:	4d6b      	ldr	r5, [pc, #428]	; (12960 <hci_evt_encode+0x82c>)
   127b4:	4f6b      	ldr	r7, [pc, #428]	; (12964 <hci_evt_encode+0x830>)
   127b6:	682a      	ldr	r2, [r5, #0]
   127b8:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   127bc:	4651      	mov	r1, sl
   127be:	1c90      	adds	r0, r2, #2
   127c0:	2206      	movs	r2, #6
   127c2:	f00f f810 	bl	217e6 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   127c6:	682a      	ldr	r2, [r5, #0]
   127c8:	7f20      	ldrb	r0, [r4, #28]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   127ca:	f8d8 1000 	ldr.w	r1, [r8]
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   127ce:	eb07 0cc2 	add.w	ip, r7, r2, lsl #3
   127d2:	f3c0 1080 	ubfx	r0, r0, #6, #1
   127d6:	f88c 0001 	strb.w	r0, [ip, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
   127da:	f894 c01c 	ldrb.w	ip, [r4, #28]
   127de:	2001      	movs	r0, #1
   127e0:	f00c 0c0f 	and.w	ip, ip, #15
   127e4:	fa00 f00c 	lsl.w	r0, r0, ip
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   127e8:	290f      	cmp	r1, #15
		dup_filter[dup_curr].mask = BIT(adv->type);
   127ea:	f807 0032 	strb.w	r0, [r7, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   127ee:	f300 8098 	bgt.w	12922 <hci_evt_encode+0x7ee>
			dup_count++;
   127f2:	3101      	adds	r1, #1
			dup_curr = dup_count;
   127f4:	460a      	mov	r2, r1
			dup_count++;
   127f6:	f8c8 1000 	str.w	r1, [r8]
			dup_curr = dup_count;
   127fa:	6029      	str	r1, [r5, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   127fc:	2a10      	cmp	r2, #16
			dup_curr = 0U;
   127fe:	bf04      	itt	eq
   12800:	2300      	moveq	r3, #0
   12802:	602b      	streq	r3, [r5, #0]
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   12804:	2211      	movs	r2, #17
   12806:	210b      	movs	r1, #11
   12808:	4630      	mov	r0, r6
   1280a:	f7fe fe43 	bl	11494 <meta_evt>
	drp->num_reports = 1U;
   1280e:	2301      	movs	r3, #1
   12810:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   12812:	7043      	strb	r3, [r0, #1]
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   12814:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
   12816:	f006 fa3d 	bl	18c94 <ll_rl_size_get>
   1281a:	4581      	cmp	r9, r0
   1281c:	d276      	bcs.n	1290c <hci_evt_encode+0x7d8>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   1281e:	4648      	mov	r0, r9
   12820:	1cea      	adds	r2, r5, #3
   12822:	1ca9      	adds	r1, r5, #2
   12824:	f006 f9f2 	bl	18c0c <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
   12828:	78ab      	ldrb	r3, [r5, #2]
   1282a:	3302      	adds	r3, #2
   1282c:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = adv->rx_addr;
   1282e:	7f23      	ldrb	r3, [r4, #28]
   12830:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   12834:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   12836:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1283a:	2206      	movs	r2, #6
   1283c:	f105 000a 	add.w	r0, r5, #10
   12840:	f00e ffd1 	bl	217e6 <memcpy>
	dir_info->rssi = rssi;
   12844:	9b05      	ldr	r3, [sp, #20]
   12846:	742b      	strb	r3, [r5, #16]
   12848:	e4f8      	b.n	1223c <hci_evt_encode+0x108>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1284a:	4633      	mov	r3, r6
   1284c:	463a      	mov	r2, r7
   1284e:	2100      	movs	r1, #0
   12850:	201a      	movs	r0, #26
   12852:	f7fe fe51 	bl	114f8 <le_remote_feat_complete>
		break;
   12856:	e4f1      	b.n	1223c <hci_evt_encode+0x108>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   12858:	221e      	movs	r2, #30
   1285a:	210a      	movs	r1, #10
   1285c:	f7fe fe1a 	bl	11494 <meta_evt>
		leecc->status = 0x00;
   12860:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   12862:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = cc->role;
   12866:	7f63      	ldrb	r3, [r4, #29]
   12868:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   1286a:	7fa3      	ldrb	r3, [r4, #30]
   1286c:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   1286e:	4606      	mov	r6, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   12870:	4641      	mov	r1, r8
   12872:	2206      	movs	r2, #6
   12874:	3005      	adds	r0, #5
   12876:	f00e ffb6 	bl	217e6 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   1287a:	2206      	movs	r2, #6
   1287c:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   12880:	f106 000b 	add.w	r0, r6, #11
   12884:	f00e ffaf 	bl	217e6 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   12888:	2206      	movs	r2, #6
   1288a:	f104 0125 	add.w	r1, r4, #37	; 0x25
   1288e:	f106 0011 	add.w	r0, r6, #17
   12892:	f00e ffa8 	bl	217e6 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   12896:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   12898:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   1289a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1289c:	f8a6 2019 	strh.w	r2, [r6, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   128a0:	f8a6 1017 	strh.w	r1, [r6, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   128a4:	f8a6 301b 	strh.w	r3, [r6, #27]
		leecc->clock_accuracy = cc->sca;
   128a8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   128ac:	7773      	strb	r3, [r6, #29]
		return;
   128ae:	e4c5      	b.n	1223c <hci_evt_encode+0x108>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   128b0:	221e      	movs	r2, #30
   128b2:	210a      	movs	r1, #10
   128b4:	4630      	mov	r0, r6
   128b6:	f7fe fded 	bl	11494 <meta_evt>
   128ba:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   128bc:	4641      	mov	r1, r8
   128be:	221e      	movs	r2, #30
   128c0:	f00e ffbc 	bl	2183c <memset>
			leecc->status = status;
   128c4:	7025      	strb	r5, [r4, #0]
			return;
   128c6:	e4b9      	b.n	1223c <hci_evt_encode+0x108>
		adv_info->addr.type = adv->tx_addr;
   128c8:	7f23      	ldrb	r3, [r4, #28]
   128ca:	f3c3 1380 	ubfx	r3, r3, #6, #1
   128ce:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   128d0:	2206      	movs	r2, #6
   128d2:	f104 011e 	add.w	r1, r4, #30
   128d6:	1ce8      	adds	r0, r5, #3
   128d8:	f00e ff85 	bl	217e6 <memcpy>
   128dc:	e549      	b.n	12372 <hci_evt_encode+0x23e>
   128de:	2700      	movs	r7, #0
   128e0:	220b      	movs	r2, #11
   128e2:	e52a      	b.n	1233a <hci_evt_encode+0x206>
			dup_curr++;
   128e4:	3201      	adds	r2, #1
   128e6:	602a      	str	r2, [r5, #0]
   128e8:	e515      	b.n	12316 <hci_evt_encode+0x1e2>
				if (dup_filter[i].mask & BIT(adv->type)) {
   128ea:	491e      	ldr	r1, [pc, #120]	; (12964 <hci_evt_encode+0x830>)
   128ec:	f811 3037 	ldrb.w	r3, [r1, r7, lsl #3]
   128f0:	f002 020f 	and.w	r2, r2, #15
   128f4:	fa23 f002 	lsr.w	r0, r3, r2
   128f8:	07c0      	lsls	r0, r0, #31
   128fa:	f53f ac9f 	bmi.w	1223c <hci_evt_encode+0x108>
				dup_filter[i].mask |= BIT(adv->type);
   128fe:	2001      	movs	r0, #1
   12900:	fa00 f202 	lsl.w	r2, r0, r2
   12904:	4313      	orrs	r3, r2
   12906:	f801 3037 	strb.w	r3, [r1, r7, lsl #3]
				return false;
   1290a:	e508      	b.n	1231e <hci_evt_encode+0x1ea>
		dir_info->addr.type = adv->tx_addr;
   1290c:	7f23      	ldrb	r3, [r4, #28]
   1290e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12912:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   12914:	2206      	movs	r2, #6
   12916:	f104 011e 	add.w	r1, r4, #30
   1291a:	1ce8      	adds	r0, r5, #3
   1291c:	f00e ff63 	bl	217e6 <memcpy>
   12920:	e785      	b.n	1282e <hci_evt_encode+0x6fa>
			dup_curr++;
   12922:	3201      	adds	r2, #1
   12924:	602a      	str	r2, [r5, #0]
   12926:	e769      	b.n	127fc <hci_evt_encode+0x6c8>
				if (dup_filter[i].mask & BIT(adv->type)) {
   12928:	480e      	ldr	r0, [pc, #56]	; (12964 <hci_evt_encode+0x830>)
   1292a:	f810 3037 	ldrb.w	r3, [r0, r7, lsl #3]
   1292e:	f002 020f 	and.w	r2, r2, #15
   12932:	fa23 f102 	lsr.w	r1, r3, r2
   12936:	07cd      	lsls	r5, r1, #31
   12938:	f53f ac80 	bmi.w	1223c <hci_evt_encode+0x108>
				dup_filter[i].mask |= BIT(adv->type);
   1293c:	2101      	movs	r1, #1
   1293e:	fa01 f202 	lsl.w	r2, r1, r2
   12942:	4313      	orrs	r3, r2
   12944:	f800 3037 	strb.w	r3, [r0, r7, lsl #3]
				return false;
   12948:	e75c      	b.n	12804 <hci_evt_encode+0x6d0>
   1294a:	bf00      	nop
   1294c:	20000128 	.word	0x20000128
   12950:	00025b30 	.word	0x00025b30
   12954:	00025b6c 	.word	0x00025b6c
   12958:	00025984 	.word	0x00025984
   1295c:	2000162e 	.word	0x2000162e
   12960:	20001628 	.word	0x20001628
   12964:	2000162c 	.word	0x2000162c
   12968:	20001624 	.word	0x20001624

0001296c <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   1296c:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   1296e:	f100 0408 	add.w	r4, r0, #8
{
   12972:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   12974:	4620      	mov	r0, r4
   12976:	2102      	movs	r1, #2
{
   12978:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   1297a:	f011 fb5d 	bl	24038 <net_buf_simple_add>
   1297e:	4603      	mov	r3, r0
	hdr->evt = evt;
   12980:	2213      	movs	r2, #19
	hdr->len = len;
   12982:	2105      	movs	r1, #5
	hdr->evt = evt;
   12984:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   12986:	7059      	strb	r1, [r3, #1]
	num_handles = 1U;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
   12988:	4620      	mov	r0, r4
   1298a:	f011 fb55 	bl	24038 <net_buf_simple_add>
	ep->num_handles = num_handles;
   1298e:	2301      	movs	r3, #1
   12990:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   12992:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   12996:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   1299a:	bd70      	pop	{r4, r5, r6, pc}

0001299c <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1299c:	7903      	ldrb	r3, [r0, #4]
   1299e:	2b02      	cmp	r3, #2
   129a0:	d008      	beq.n	129b4 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
   129a2:	3b04      	subs	r3, #4
   129a4:	b2db      	uxtb	r3, r3
   129a6:	2b13      	cmp	r3, #19
   129a8:	d901      	bls.n	129ae <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   129aa:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   129ac:	4770      	bx	lr
   129ae:	4a05      	ldr	r2, [pc, #20]	; (129c4 <hci_get_class+0x28>)
   129b0:	5cd0      	ldrb	r0, [r2, r3]
   129b2:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   129b4:	7f03      	ldrb	r3, [r0, #28]
   129b6:	f003 0303 	and.w	r3, r3, #3
   129ba:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   129bc:	bf0c      	ite	eq
   129be:	2004      	moveq	r0, #4
   129c0:	2005      	movne	r0, #5
   129c2:	4770      	bx	lr
   129c4:	00025bdc 	.word	0x00025bdc

000129c8 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   129c8:	480d      	ldr	r0, [pc, #52]	; (12a00 <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   129ca:	4a0e      	ldr	r2, [pc, #56]	; (12a04 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   129cc:	4b0e      	ldr	r3, [pc, #56]	; (12a08 <hci_init+0x40>)
	dup_count = -1;
   129ce:	490f      	ldr	r1, [pc, #60]	; (12a0c <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
   129d0:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   129d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   129d6:	f641 75ff 	movw	r5, #8191	; 0x1fff
   129da:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   129de:	2400      	movs	r4, #0
   129e0:	2500      	movs	r5, #0
   129e2:	e9c2 4500 	strd	r4, r5, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   129e6:	241f      	movs	r4, #31
   129e8:	2500      	movs	r5, #0
   129ea:	e9c3 4500 	strd	r4, r5, [r3]
	conn_count = 0U;
   129ee:	4b08      	ldr	r3, [pc, #32]	; (12a10 <hci_init+0x48>)
	dup_count = -1;
   129f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	conn_count = 0U;
   129f4:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   129f6:	bc30      	pop	{r4, r5}
	dup_count = -1;
   129f8:	6008      	str	r0, [r1, #0]
	conn_count = 0U;
   129fa:	601a      	str	r2, [r3, #0]
}
   129fc:	4770      	bx	lr
   129fe:	bf00      	nop
   12a00:	20000120 	.word	0x20000120
   12a04:	20000f90 	.word	0x20000f90
   12a08:	20000128 	.word	0x20000128
   12a0c:	20001624 	.word	0x20001624
   12a10:	20001620 	.word	0x20001620

00012a14 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   12a14:	f007 b9fc 	b.w	19e10 <lll_csrand_get>

00012a18 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   12a18:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   12a1a:	2300      	movs	r3, #0
   12a1c:	f009 fb3c 	bl	1c098 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   12a20:	2000      	movs	r0, #0
   12a22:	bd08      	pop	{r3, pc}

00012a24 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   12a24:	b510      	push	{r4, lr}
   12a26:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   12a28:	f007 fa14 	bl	19e54 <lll_reset>
	LL_ASSERT(!err);
   12a2c:	b970      	cbnz	r0, 12a4c <perform_lll_reset+0x28>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   12a2e:	f007 fd29 	bl	1a484 <lll_adv_reset>
	LL_ASSERT(!err);
   12a32:	b9e0      	cbnz	r0, 12a6e <perform_lll_reset+0x4a>
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   12a34:	f008 fc34 	bl	1b2a0 <lll_scan_reset>
	LL_ASSERT(!err);
   12a38:	bb50      	cbnz	r0, 12a90 <perform_lll_reset+0x6c>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   12a3a:	f008 fcd1 	bl	1b3e0 <lll_conn_reset>
	LL_ASSERT(!err);
   12a3e:	2800      	cmp	r0, #0
   12a40:	d137      	bne.n	12ab2 <perform_lll_reset+0x8e>
	z_impl_k_sem_give(sem);
   12a42:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   12a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12a48:	f00c b9a0 	b.w	1ed8c <z_impl_k_sem_give>
	LL_ASSERT(!err);
   12a4c:	4a22      	ldr	r2, [pc, #136]	; (12ad8 <perform_lll_reset+0xb4>)
   12a4e:	4923      	ldr	r1, [pc, #140]	; (12adc <perform_lll_reset+0xb8>)
   12a50:	4823      	ldr	r0, [pc, #140]	; (12ae0 <perform_lll_reset+0xbc>)
   12a52:	f240 6337 	movw	r3, #1591	; 0x637
   12a56:	f00c fe4e 	bl	1f6f6 <printk>
   12a5a:	4040      	eors	r0, r0
   12a5c:	f380 8811 	msr	BASEPRI, r0
   12a60:	f04f 0003 	mov.w	r0, #3
   12a64:	df02      	svc	2
	err = lll_adv_reset();
   12a66:	f007 fd0d 	bl	1a484 <lll_adv_reset>
	LL_ASSERT(!err);
   12a6a:	2800      	cmp	r0, #0
   12a6c:	d0e2      	beq.n	12a34 <perform_lll_reset+0x10>
   12a6e:	4a1a      	ldr	r2, [pc, #104]	; (12ad8 <perform_lll_reset+0xb4>)
   12a70:	491a      	ldr	r1, [pc, #104]	; (12adc <perform_lll_reset+0xb8>)
   12a72:	481b      	ldr	r0, [pc, #108]	; (12ae0 <perform_lll_reset+0xbc>)
   12a74:	f240 633c 	movw	r3, #1596	; 0x63c
   12a78:	f00c fe3d 	bl	1f6f6 <printk>
   12a7c:	4040      	eors	r0, r0
   12a7e:	f380 8811 	msr	BASEPRI, r0
   12a82:	f04f 0003 	mov.w	r0, #3
   12a86:	df02      	svc	2
	err = lll_scan_reset();
   12a88:	f008 fc0a 	bl	1b2a0 <lll_scan_reset>
	LL_ASSERT(!err);
   12a8c:	2800      	cmp	r0, #0
   12a8e:	d0d4      	beq.n	12a3a <perform_lll_reset+0x16>
   12a90:	4a11      	ldr	r2, [pc, #68]	; (12ad8 <perform_lll_reset+0xb4>)
   12a92:	4912      	ldr	r1, [pc, #72]	; (12adc <perform_lll_reset+0xb8>)
   12a94:	4812      	ldr	r0, [pc, #72]	; (12ae0 <perform_lll_reset+0xbc>)
   12a96:	f240 6342 	movw	r3, #1602	; 0x642
   12a9a:	f00c fe2c 	bl	1f6f6 <printk>
   12a9e:	4040      	eors	r0, r0
   12aa0:	f380 8811 	msr	BASEPRI, r0
   12aa4:	f04f 0003 	mov.w	r0, #3
   12aa8:	df02      	svc	2
	err = lll_conn_reset();
   12aaa:	f008 fc99 	bl	1b3e0 <lll_conn_reset>
	LL_ASSERT(!err);
   12aae:	2800      	cmp	r0, #0
   12ab0:	d0c7      	beq.n	12a42 <perform_lll_reset+0x1e>
   12ab2:	4a09      	ldr	r2, [pc, #36]	; (12ad8 <perform_lll_reset+0xb4>)
   12ab4:	4909      	ldr	r1, [pc, #36]	; (12adc <perform_lll_reset+0xb8>)
   12ab6:	480a      	ldr	r0, [pc, #40]	; (12ae0 <perform_lll_reset+0xbc>)
   12ab8:	f44f 63c9 	mov.w	r3, #1608	; 0x648
   12abc:	f00c fe1b 	bl	1f6f6 <printk>
   12ac0:	4040      	eors	r0, r0
   12ac2:	f380 8811 	msr	BASEPRI, r0
   12ac6:	f04f 0003 	mov.w	r0, #3
   12aca:	df02      	svc	2
   12acc:	4620      	mov	r0, r4
}
   12ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12ad2:	f00c b95b 	b.w	1ed8c <z_impl_k_sem_give>
   12ad6:	bf00      	nop
   12ad8:	00025c00 	.word	0x00025c00
   12adc:	00025c3c 	.word	0x00025c3c
   12ae0:	00025984 	.word	0x00025984

00012ae4 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   12ae4:	6008      	str	r0, [r1, #0]
   12ae6:	4801      	ldr	r0, [pc, #4]	; (12aec <ull_ticker_status_give+0x8>)
   12ae8:	f00c b950 	b.w	1ed8c <z_impl_k_sem_give>
   12aec:	20001ad8 	.word	0x20001ad8

00012af0 <disabled_cb>:
   12af0:	f00c b94c 	b.w	1ed8c <z_impl_k_sem_give>

00012af4 <tx_cmplt_get>:
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */
}

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   12af4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   12af8:	4f2f      	ldr	r7, [pc, #188]	; (12bb8 <tx_cmplt_get+0xc4>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   12afa:	780b      	ldrb	r3, [r1, #0]
   12afc:	783c      	ldrb	r4, [r7, #0]
{
   12afe:	460d      	mov	r5, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   12b00:	7879      	ldrb	r1, [r7, #1]
   12b02:	4299      	cmp	r1, r3
   12b04:	bf9c      	itt	ls
   12b06:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   12b08:	702b      	strbls	r3, [r5, #0]
	}

	if (*idx == last) {
   12b0a:	429a      	cmp	r2, r3
{
   12b0c:	4683      	mov	fp, r0
   12b0e:	4692      	mov	sl, r2
   12b10:	d045      	beq.n	12b9e <tx_cmplt_get+0xaa>
		return NULL;
	}

	i = *idx + 1;
   12b12:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   12b14:	4e29      	ldr	r6, [pc, #164]	; (12bbc <tx_cmplt_get+0xc8>)
	i = *idx + 1;
   12b16:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   12b18:	fb13 f304 	smulbb	r3, r3, r4
		i = 0U;
   12b1c:	4291      	cmp	r1, r2
   12b1e:	bf08      	it	eq
   12b20:	2200      	moveq	r2, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
   12b22:	18f1      	adds	r1, r6, r3

	*idx = i;
   12b24:	702a      	strb	r2, [r5, #0]
   12b26:	d03a      	beq.n	12b9e <tx_cmplt_get+0xaa>
		return 0;
	}

	*handle = tx->handle;
   12b28:	5af3      	ldrh	r3, [r6, r3]
   12b2a:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   12b2c:	f04f 0800 	mov.w	r8, #0
   12b30:	f04f 0901 	mov.w	r9, #1
   12b34:	e022      	b.n	12b7c <tx_cmplt_get+0x88>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   12b36:	b37b      	cbz	r3, 12b98 <tx_cmplt_get+0xa4>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   12b38:	7903      	ldrb	r3, [r0, #4]
   12b3a:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   12b3e:	3b01      	subs	r3, #1
   12b40:	2b01      	cmp	r3, #1
   12b42:	d931      	bls.n	12ba8 <tx_cmplt_get+0xb4>
   12b44:	2302      	movs	r3, #2
   12b46:	604b      	str	r3, [r1, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   12b48:	f002 fc1c 	bl	15384 <ll_tx_mem_release>
	if (*idx >= count) {
   12b4c:	782b      	ldrb	r3, [r5, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   12b4e:	7879      	ldrb	r1, [r7, #1]
   12b50:	7838      	ldrb	r0, [r7, #0]
   12b52:	4299      	cmp	r1, r3
   12b54:	bf9c      	itt	ls
   12b56:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   12b58:	702b      	strbls	r3, [r5, #0]
	if (*idx == last) {
   12b5a:	459a      	cmp	sl, r3
   12b5c:	d021      	beq.n	12ba2 <tx_cmplt_get+0xae>
	i = *idx + 1;
   12b5e:	1c5c      	adds	r4, r3, #1
   12b60:	b2e4      	uxtb	r4, r4
	p = (void *)(fifo + (*idx) * size);
   12b62:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   12b66:	42a1      	cmp	r1, r4
   12b68:	bf08      	it	eq
   12b6a:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   12b6c:	18f1      	adds	r1, r6, r3
	*idx = i;
   12b6e:	702c      	strb	r4, [r5, #0]
   12b70:	d017      	beq.n	12ba2 <tx_cmplt_get+0xae>
   12b72:	5af0      	ldrh	r0, [r6, r3]
   12b74:	f8bb 3000 	ldrh.w	r3, [fp]
   12b78:	4298      	cmp	r0, r3
   12b7a:	d112      	bne.n	12ba2 <tx_cmplt_get+0xae>
		node_tx = tx->node;
   12b7c:	6848      	ldr	r0, [r1, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   12b7e:	2801      	cmp	r0, #1
   12b80:	f020 0303 	bic.w	r3, r0, #3
   12b84:	d8d7      	bhi.n	12b36 <tx_cmplt_get+0x42>
			cmplt++;
   12b86:	f108 0801 	add.w	r8, r8, #1
   12b8a:	fa5f f888 	uxtb.w	r8, r8
   12b8e:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
   12b92:	2b00      	cmp	r3, #0
   12b94:	d0da      	beq.n	12b4c <tx_cmplt_get+0x58>
   12b96:	e7d7      	b.n	12b48 <tx_cmplt_get+0x54>
   12b98:	2302      	movs	r3, #2
   12b9a:	604b      	str	r3, [r1, #4]
   12b9c:	e7d6      	b.n	12b4c <tx_cmplt_get+0x58>
		return 0;
   12b9e:	f04f 0800 	mov.w	r8, #0

	return cmplt;
}
   12ba2:	4640      	mov	r0, r8
   12ba4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   12ba8:	f108 0801 	add.w	r8, r8, #1
   12bac:	fa5f f888 	uxtb.w	r8, r8
   12bb0:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
   12bb4:	e7c8      	b.n	12b48 <tx_cmplt_get+0x54>
   12bb6:	bf00      	nop
   12bb8:	200003a4 	.word	0x200003a4
   12bbc:	200003a8 	.word	0x200003a8

00012bc0 <rx_demux>:
{
   12bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bc4:	4cad      	ldr	r4, [pc, #692]	; (12e7c <rx_demux+0x2bc>)
	k_sem_give(sem_recv);
   12bc6:	4eae      	ldr	r6, [pc, #696]	; (12e80 <rx_demux+0x2c0>)
			static memq_link_t link;
			static struct mayfly mfy = {0, 0, &link, NULL,
						    lll_resume};
			uint32_t ret;

			mfy.param = next;
   12bc8:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 12ea8 <rx_demux+0x2e8>
{
   12bcc:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   12bce:	e9d4 0100 	ldrd	r0, r1, [r4]
   12bd2:	aa03      	add	r2, sp, #12
   12bd4:	f7fc fd42 	bl	f65c <memq_peek>
		if (link) {
   12bd8:	4607      	mov	r7, r0
   12bda:	2800      	cmp	r0, #0
   12bdc:	d036      	beq.n	12c4c <rx_demux+0x8c>
			LL_ASSERT(rx);
   12bde:	9b03      	ldr	r3, [sp, #12]
   12be0:	2b00      	cmp	r3, #0
   12be2:	f000 8124 	beq.w	12e2e <rx_demux+0x26e>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   12be6:	7818      	ldrb	r0, [r3, #0]
   12be8:	aa04      	add	r2, sp, #16
   12bea:	a902      	add	r1, sp, #8
   12bec:	f004 fee8 	bl	179c0 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   12bf0:	4605      	mov	r5, r0
   12bf2:	2800      	cmp	r0, #0
   12bf4:	d056      	beq.n	12ca4 <rx_demux+0xe4>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   12bf6:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
   12bfa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   12bfe:	f891 9000 	ldrb.w	r9, [r1]
   12c02:	9205      	str	r2, [sp, #20]
   12c04:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   12c08:	f10d 0814 	add.w	r8, sp, #20
   12c0c:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   12c10:	f004 feec 	bl	179ec <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   12c14:	4629      	mov	r1, r5
   12c16:	9a05      	ldr	r2, [sp, #20]
   12c18:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   12c1c:	f004 ff2e 	bl	17a7c <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   12c20:	4628      	mov	r0, r5
   12c22:	f004 fea7 	bl	17974 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   12c26:	4642      	mov	r2, r8
   12c28:	4639      	mov	r1, r7
   12c2a:	4648      	mov	r0, r9
   12c2c:	f004 fec8 	bl	179c0 <ull_conn_ack_by_last_peek>
	} while (link);
   12c30:	4605      	mov	r5, r0
   12c32:	2800      	cmp	r0, #0
   12c34:	d1ec      	bne.n	12c10 <rx_demux+0x50>
	k_sem_give(sem_recv);
   12c36:	6830      	ldr	r0, [r6, #0]
   12c38:	f00c f8a8 	bl	1ed8c <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   12c3c:	e9d4 0100 	ldrd	r0, r1, [r4]
   12c40:	aa03      	add	r2, sp, #12
   12c42:	f7fc fd0b 	bl	f65c <memq_peek>
		if (link) {
   12c46:	4607      	mov	r7, r0
   12c48:	2800      	cmp	r0, #0
   12c4a:	d1c8      	bne.n	12bde <rx_demux+0x1e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   12c4c:	aa04      	add	r2, sp, #16
   12c4e:	a902      	add	r1, sp, #8
   12c50:	f10d 0007 	add.w	r0, sp, #7
   12c54:	f004 fe9a 	bl	1798c <ull_conn_ack_peek>
			if (link) {
   12c58:	4605      	mov	r5, r0
   12c5a:	2800      	cmp	r0, #0
   12c5c:	d063      	beq.n	12d26 <rx_demux+0x166>
				rx_demux_conn_tx_ack(ack_last, handle,
   12c5e:	9a04      	ldr	r2, [sp, #16]
   12c60:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   12c64:	f89d 9007 	ldrb.w	r9, [sp, #7]
   12c68:	9205      	str	r2, [sp, #20]
   12c6a:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   12c6e:	f10d 0814 	add.w	r8, sp, #20
   12c72:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   12c76:	f004 feb9 	bl	179ec <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   12c7a:	4629      	mov	r1, r5
   12c7c:	9a05      	ldr	r2, [sp, #20]
   12c7e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   12c82:	f004 fefb 	bl	17a7c <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   12c86:	4628      	mov	r0, r5
   12c88:	f004 fe74 	bl	17974 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   12c8c:	4642      	mov	r2, r8
   12c8e:	4639      	mov	r1, r7
   12c90:	4648      	mov	r0, r9
   12c92:	f004 fe95 	bl	179c0 <ull_conn_ack_by_last_peek>
	} while (link);
   12c96:	4605      	mov	r5, r0
   12c98:	2800      	cmp	r0, #0
   12c9a:	d1ec      	bne.n	12c76 <rx_demux+0xb6>
	k_sem_give(sem_recv);
   12c9c:	6830      	ldr	r0, [r6, #0]
   12c9e:	f00c f875 	bl	1ed8c <z_impl_k_sem_give>
			if (nack) {
   12ca2:	e7cb      	b.n	12c3c <rx_demux+0x7c>
				nack = rx_demux_rx(link, rx);
   12ca4:	9b03      	ldr	r3, [sp, #12]
   12ca6:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   12ca8:	791b      	ldrb	r3, [r3, #4]
   12caa:	3b01      	subs	r3, #1
   12cac:	2b11      	cmp	r3, #17
   12cae:	d80a      	bhi.n	12cc6 <rx_demux+0x106>
   12cb0:	e8df f003 	tbb	[pc, r3]
   12cb4:	1709323c 	.word	0x1709323c
   12cb8:	09090909 	.word	0x09090909
   12cbc:	09090909 	.word	0x09090909
   12cc0:	09090909 	.word	0x09090909
   12cc4:	1728      	.short	0x1728
		LL_ASSERT(0);
   12cc6:	4a6f      	ldr	r2, [pc, #444]	; (12e84 <rx_demux+0x2c4>)
   12cc8:	496f      	ldr	r1, [pc, #444]	; (12e88 <rx_demux+0x2c8>)
   12cca:	4870      	ldr	r0, [pc, #448]	; (12e8c <rx_demux+0x2cc>)
   12ccc:	f240 73d5 	movw	r3, #2005	; 0x7d5
   12cd0:	f00c fd11 	bl	1f6f6 <printk>
   12cd4:	4040      	eors	r0, r0
   12cd6:	f380 8811 	msr	BASEPRI, r0
   12cda:	f04f 0003 	mov.w	r0, #3
   12cde:	df02      	svc	2
			if (nack) {
   12ce0:	e775      	b.n	12bce <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   12ce2:	4966      	ldr	r1, [pc, #408]	; (12e7c <rx_demux+0x2bc>)
   12ce4:	6860      	ldr	r0, [r4, #4]
   12ce6:	2200      	movs	r2, #0
   12ce8:	f7fc fcc0 	bl	f66c <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12cec:	4b68      	ldr	r3, [pc, #416]	; (12e90 <rx_demux+0x2d0>)
		ll_rx_put(link, rx);
   12cee:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12cf0:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   12cf2:	4a68      	ldr	r2, [pc, #416]	; (12e94 <rx_demux+0x2d4>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12cf4:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   12cf6:	4638      	mov	r0, r7
   12cf8:	f7fc fca8 	bl	f64c <memq_enqueue>
	k_sem_give(sem_recv);
   12cfc:	6830      	ldr	r0, [r6, #0]
   12cfe:	f00c f845 	bl	1ed8c <z_impl_k_sem_give>
			if (nack) {
   12d02:	e79b      	b.n	12c3c <rx_demux+0x7c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   12d04:	495d      	ldr	r1, [pc, #372]	; (12e7c <rx_demux+0x2bc>)
   12d06:	6860      	ldr	r0, [r4, #4]
   12d08:	2200      	movs	r2, #0
   12d0a:	f7fc fcaf 	bl	f66c <memq_dequeue>
		ull_conn_setup(link, rx);
   12d0e:	9905      	ldr	r1, [sp, #20]
   12d10:	4638      	mov	r0, r7
   12d12:	f002 fe31 	bl	15978 <ull_conn_setup>
			if (nack) {
   12d16:	e75a      	b.n	12bce <rx_demux+0xe>
		nack = ull_conn_rx(link, (void *)&rx);
   12d18:	a905      	add	r1, sp, #20
   12d1a:	4638      	mov	r0, r7
   12d1c:	f002 fe3c 	bl	15998 <ull_conn_rx>
		if (nack) {
   12d20:	2800      	cmp	r0, #0
   12d22:	f000 80ce 	beq.w	12ec2 <rx_demux+0x302>
}
   12d26:	b007      	add	sp, #28
   12d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   12d2c:	4953      	ldr	r1, [pc, #332]	; (12e7c <rx_demux+0x2bc>)
   12d2e:	6860      	ldr	r0, [r4, #4]
   12d30:	2200      	movs	r2, #0
   12d32:	f7fc fc9b 	bl	f66c <memq_dequeue>
		rx_demux_event_done(link, rx);
   12d36:	9d05      	ldr	r5, [sp, #20]
	switch (done->extra.type) {
   12d38:	f895 3020 	ldrb.w	r3, [r5, #32]
	ull_hdr = done->param;
   12d3c:	f8d5 901c 	ldr.w	r9, [r5, #28]
	switch (done->extra.type) {
   12d40:	b17b      	cbz	r3, 12d62 <rx_demux+0x1a2>
   12d42:	2b01      	cmp	r3, #1
   12d44:	f000 80b9 	beq.w	12eba <rx_demux+0x2fa>
		LL_ASSERT(0);
   12d48:	4a4e      	ldr	r2, [pc, #312]	; (12e84 <rx_demux+0x2c4>)
   12d4a:	494f      	ldr	r1, [pc, #316]	; (12e88 <rx_demux+0x2c8>)
   12d4c:	484f      	ldr	r0, [pc, #316]	; (12e8c <rx_demux+0x2cc>)
   12d4e:	f640 0315 	movw	r3, #2069	; 0x815
   12d52:	f00c fcd0 	bl	1f6f6 <printk>
   12d56:	4040      	eors	r0, r0
   12d58:	f380 8811 	msr	BASEPRI, r0
   12d5c:	f04f 0003 	mov.w	r0, #3
   12d60:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   12d62:	4a4d      	ldr	r2, [pc, #308]	; (12e98 <rx_demux+0x2d8>)
   12d64:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   12d66:	f892 c001 	ldrb.w	ip, [r2, #1]
   12d6a:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   12d6c:	1c4b      	adds	r3, r1, #1
   12d6e:	b2db      	uxtb	r3, r3
		last = 0U;
   12d70:	459c      	cmp	ip, r3
   12d72:	bf08      	it	eq
   12d74:	2300      	moveq	r3, #0
	if (last == first) {
   12d76:	4298      	cmp	r0, r3
	done->extra.type = 0U;
   12d78:	f04f 0c00 	mov.w	ip, #0
   12d7c:	f885 c020 	strb.w	ip, [r5, #32]
   12d80:	f000 80b3 	beq.w	12eea <rx_demux+0x32a>
	done->hdr.link = link;
   12d84:	602f      	str	r7, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12d86:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12d88:	fb00 2101 	mla	r1, r0, r1, r2
   12d8c:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
   12d8e:	70d3      	strb	r3, [r2, #3]
	return MFIFO_DEQUEUE_GET(prep);
   12d90:	4d42      	ldr	r5, [pc, #264]	; (12e9c <rx_demux+0x2dc>)
   12d92:	78ab      	ldrb	r3, [r5, #2]
	if (first == last) {
   12d94:	78ea      	ldrb	r2, [r5, #3]
   12d96:	f895 c000 	ldrb.w	ip, [r5]
   12d9a:	429a      	cmp	r2, r3
   12d9c:	d02a      	beq.n	12df4 <rx_demux+0x234>
	return (void *)(fifo + first * size);
   12d9e:	f105 0a04 	add.w	sl, r5, #4
   12da2:	fb03 ac0c 	mla	ip, r3, ip, sl
	while (next) {
   12da6:	f1bc 0f00 	cmp.w	ip, #0
   12daa:	d023      	beq.n	12df4 <rx_demux+0x234>
		uint8_t is_aborted = next->is_aborted;
   12dac:	f89c 3020 	ldrb.w	r3, [ip, #32]
		if (!is_aborted) {
   12db0:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   12db2:	f3c3 0740 	ubfx	r7, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   12db6:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
   12dba:	d547      	bpl.n	12e4c <rx_demux+0x28c>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   12dbc:	78ea      	ldrb	r2, [r5, #3]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   12dbe:	78ab      	ldrb	r3, [r5, #2]
   12dc0:	f895 c000 	ldrb.w	ip, [r5]
   12dc4:	7869      	ldrb	r1, [r5, #1]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   12dc6:	429a      	cmp	r2, r3
   12dc8:	d014      	beq.n	12df4 <rx_demux+0x234>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   12dca:	3301      	adds	r3, #1
   12dcc:	b2db      	uxtb	r3, r3
	if (_first == count) {
   12dce:	4299      	cmp	r1, r3
   12dd0:	d06c      	beq.n	12eac <rx_demux+0x2ec>
	if (first == last) {
   12dd2:	429a      	cmp	r2, r3
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
   12dd4:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   12dd6:	d00d      	beq.n	12df4 <rx_demux+0x234>
	return (void *)(fifo + first * size);
   12dd8:	fb03 ac0c 	mla	ip, r3, ip, sl

		next = ull_prepare_dequeue_get();

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   12ddc:	f1bc 0f00 	cmp.w	ip, #0
   12de0:	d008      	beq.n	12df4 <rx_demux+0x234>
   12de2:	2f00      	cmp	r7, #0
   12de4:	d1e2      	bne.n	12dac <rx_demux+0x1ec>
   12de6:	f1b8 0f00 	cmp.w	r8, #0
   12dea:	d003      	beq.n	12df4 <rx_demux+0x234>
   12dec:	f89c 3020 	ldrb.w	r3, [ip, #32]
   12df0:	07db      	lsls	r3, r3, #31
   12df2:	d5db      	bpl.n	12dac <rx_demux+0x1ec>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   12df4:	f1b9 0f00 	cmp.w	r9, #0
   12df8:	f43f aee9 	beq.w	12bce <rx_demux+0xe>
	return hdr->ref;
   12dfc:	f899 3000 	ldrb.w	r3, [r9]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
   12e00:	2b00      	cmp	r3, #0
   12e02:	f000 8080 	beq.w	12f06 <rx_demux+0x346>
	return hdr->ref--;
   12e06:	f899 3000 	ldrb.w	r3, [r9]
   12e0a:	3b01      	subs	r3, #1
   12e0c:	b2db      	uxtb	r3, r3
   12e0e:	f889 3000 	strb.w	r3, [r9]
	return hdr->ref;
   12e12:	f899 3000 	ldrb.w	r3, [r9]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   12e16:	2b00      	cmp	r3, #0
   12e18:	f47f aed9 	bne.w	12bce <rx_demux+0xe>
   12e1c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   12e20:	2b00      	cmp	r3, #0
   12e22:	f43f aed4 	beq.w	12bce <rx_demux+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   12e26:	f8d9 0008 	ldr.w	r0, [r9, #8]
   12e2a:	4798      	blx	r3
			if (nack) {
   12e2c:	e6cf      	b.n	12bce <rx_demux+0xe>
			LL_ASSERT(rx);
   12e2e:	4a15      	ldr	r2, [pc, #84]	; (12e84 <rx_demux+0x2c4>)
   12e30:	491b      	ldr	r1, [pc, #108]	; (12ea0 <rx_demux+0x2e0>)
   12e32:	4816      	ldr	r0, [pc, #88]	; (12e8c <rx_demux+0x2cc>)
   12e34:	f240 63e2 	movw	r3, #1762	; 0x6e2
   12e38:	f00c fc5d 	bl	1f6f6 <printk>
   12e3c:	4040      	eors	r0, r0
   12e3e:	f380 8811 	msr	BASEPRI, r0
   12e42:	f04f 0003 	mov.w	r0, #3
   12e46:	df02      	svc	2
   12e48:	9b03      	ldr	r3, [sp, #12]
   12e4a:	e6cc      	b.n	12be6 <rx_demux+0x26>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12e4c:	465b      	mov	r3, fp
   12e4e:	463a      	mov	r2, r7
   12e50:	4639      	mov	r1, r7
   12e52:	2001      	movs	r0, #1
			mfy.param = next;
   12e54:	f8cb c008 	str.w	ip, [fp, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12e58:	f7fc fc6c 	bl	f734 <mayfly_enqueue>
			LL_ASSERT(!ret);
   12e5c:	2800      	cmp	r0, #0
   12e5e:	d0ad      	beq.n	12dbc <rx_demux+0x1fc>
   12e60:	4a08      	ldr	r2, [pc, #32]	; (12e84 <rx_demux+0x2c4>)
   12e62:	4910      	ldr	r1, [pc, #64]	; (12ea4 <rx_demux+0x2e4>)
   12e64:	4809      	ldr	r0, [pc, #36]	; (12e8c <rx_demux+0x2cc>)
   12e66:	f640 032d 	movw	r3, #2093	; 0x82d
   12e6a:	f00c fc44 	bl	1f6f6 <printk>
   12e6e:	4040      	eors	r0, r0
   12e70:	f380 8811 	msr	BASEPRI, r0
   12e74:	f04f 0003 	mov.w	r0, #3
   12e78:	df02      	svc	2
   12e7a:	e79f      	b.n	12dbc <rx_demux+0x1fc>
   12e7c:	20001acc 	.word	0x20001acc
   12e80:	20001ad4 	.word	0x20001ad4
   12e84:	00025c00 	.word	0x00025c00
   12e88:	000259f4 	.word	0x000259f4
   12e8c:	00025984 	.word	0x00025984
   12e90:	200003a4 	.word	0x200003a4
   12e94:	20001ac8 	.word	0x20001ac8
   12e98:	20000240 	.word	0x20000240
   12e9c:	20000280 	.word	0x20000280
   12ea0:	00025c44 	.word	0x00025c44
   12ea4:	00025c48 	.word	0x00025c48
   12ea8:	200003f8 	.word	0x200003f8
	*first = _first; /* Write back read-index */
   12eac:	2300      	movs	r3, #0
   12eae:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   12eb0:	2a00      	cmp	r2, #0
   12eb2:	d09f      	beq.n	12df4 <rx_demux+0x234>
	return (void *)(fifo + first * size);
   12eb4:	f8df c088 	ldr.w	ip, [pc, #136]	; 12f40 <rx_demux+0x380>
   12eb8:	e793      	b.n	12de2 <rx_demux+0x222>
		ull_conn_done(done);
   12eba:	4628      	mov	r0, r5
   12ebc:	f004 fab0 	bl	17420 <ull_conn_done>
		break;
   12ec0:	e74f      	b.n	12d62 <rx_demux+0x1a2>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   12ec2:	4918      	ldr	r1, [pc, #96]	; (12f24 <rx_demux+0x364>)
   12ec4:	4602      	mov	r2, r0
   12ec6:	6860      	ldr	r0, [r4, #4]
   12ec8:	f7fc fbd0 	bl	f66c <memq_dequeue>
		if (rx) {
   12ecc:	9905      	ldr	r1, [sp, #20]
   12ece:	2900      	cmp	r1, #0
   12ed0:	f43f ae7d 	beq.w	12bce <rx_demux+0xe>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12ed4:	4b14      	ldr	r3, [pc, #80]	; (12f28 <rx_demux+0x368>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   12ed6:	4a15      	ldr	r2, [pc, #84]	; (12f2c <rx_demux+0x36c>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12ed8:	78db      	ldrb	r3, [r3, #3]
   12eda:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   12edc:	4638      	mov	r0, r7
   12ede:	f7fc fbb5 	bl	f64c <memq_enqueue>
	k_sem_give(sem_recv);
   12ee2:	6830      	ldr	r0, [r6, #0]
   12ee4:	f00b ff52 	bl	1ed8c <z_impl_k_sem_give>
			if (nack) {
   12ee8:	e671      	b.n	12bce <rx_demux+0xe>
	LL_ASSERT(release == done);
   12eea:	4a11      	ldr	r2, [pc, #68]	; (12f30 <rx_demux+0x370>)
   12eec:	4911      	ldr	r1, [pc, #68]	; (12f34 <rx_demux+0x374>)
   12eee:	4812      	ldr	r0, [pc, #72]	; (12f38 <rx_demux+0x378>)
   12ef0:	f640 031c 	movw	r3, #2076	; 0x81c
   12ef4:	f00c fbff 	bl	1f6f6 <printk>
   12ef8:	4040      	eors	r0, r0
   12efa:	f380 8811 	msr	BASEPRI, r0
   12efe:	f04f 0003 	mov.w	r0, #3
   12f02:	df02      	svc	2
   12f04:	e744      	b.n	12d90 <rx_demux+0x1d0>
	LL_ASSERT(ull_ref_get(ull_hdr));
   12f06:	4a0a      	ldr	r2, [pc, #40]	; (12f30 <rx_demux+0x370>)
   12f08:	490c      	ldr	r1, [pc, #48]	; (12f3c <rx_demux+0x37c>)
   12f0a:	480b      	ldr	r0, [pc, #44]	; (12f38 <rx_demux+0x378>)
   12f0c:	f640 033f 	movw	r3, #2111	; 0x83f
   12f10:	f00c fbf1 	bl	1f6f6 <printk>
   12f14:	4040      	eors	r0, r0
   12f16:	f380 8811 	msr	BASEPRI, r0
   12f1a:	f04f 0003 	mov.w	r0, #3
   12f1e:	df02      	svc	2
   12f20:	e771      	b.n	12e06 <rx_demux+0x246>
   12f22:	bf00      	nop
   12f24:	20001acc 	.word	0x20001acc
   12f28:	200003a4 	.word	0x200003a4
   12f2c:	20001ac8 	.word	0x20001ac8
   12f30:	00025c00 	.word	0x00025c00
   12f34:	00025c68 	.word	0x00025c68
   12f38:	00025984 	.word	0x00025984
   12f3c:	00025c50 	.word	0x00025c50
   12f40:	20000284 	.word	0x20000284

00012f44 <ll_init>:
{
   12f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sem_recv = sem_rx;
   12f48:	4ba1      	ldr	r3, [pc, #644]	; (131d0 <ll_init+0x28c>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   12f4a:	4da2      	ldr	r5, [pc, #648]	; (131d4 <ll_init+0x290>)
	sem_recv = sem_rx;
   12f4c:	6018      	str	r0, [r3, #0]
{
   12f4e:	b086      	sub	sp, #24
	cntr_init();
   12f50:	f009 f826 	bl	1bfa0 <cntr_init>
	mayfly_init();
   12f54:	f7fc fb9a 	bl	f68c <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   12f58:	489f      	ldr	r0, [pc, #636]	; (131d8 <ll_init+0x294>)
   12f5a:	9005      	str	r0, [sp, #20]
   12f5c:	489f      	ldr	r0, [pc, #636]	; (131dc <ll_init+0x298>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   12f5e:	4ca0      	ldr	r4, [pc, #640]	; (131e0 <ll_init+0x29c>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   12f60:	4aa0      	ldr	r2, [pc, #640]	; (131e4 <ll_init+0x2a0>)
   12f62:	9204      	str	r2, [sp, #16]
   12f64:	e9cd 0502 	strd	r0, r5, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   12f68:	2103      	movs	r1, #3
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   12f6a:	220b      	movs	r2, #11
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   12f6c:	2502      	movs	r5, #2
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   12f6e:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   12f70:	9201      	str	r2, [sp, #4]
   12f72:	9400      	str	r4, [sp, #0]
   12f74:	4a9c      	ldr	r2, [pc, #624]	; (131e8 <ll_init+0x2a4>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   12f76:	7021      	strb	r1, [r4, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   12f78:	7223      	strb	r3, [r4, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   12f7a:	2106      	movs	r1, #6
   12f7c:	2000      	movs	r0, #0
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   12f7e:	7425      	strb	r5, [r4, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   12f80:	7625      	strb	r5, [r4, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   12f82:	f7fd febd 	bl	10d00 <ticker_init>
	LL_ASSERT(!err);
   12f86:	2800      	cmp	r0, #0
   12f88:	f040 80f2 	bne.w	13170 <ll_init+0x22c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   12f8c:	2201      	movs	r2, #1
   12f8e:	2100      	movs	r1, #0
   12f90:	4896      	ldr	r0, [pc, #600]	; (131ec <ll_init+0x2a8>)
   12f92:	f011 fc5b 	bl	2484c <z_impl_k_sem_init>
	err = lll_init();
   12f96:	f006 ff09 	bl	19dac <lll_init>
	if (err) {
   12f9a:	4604      	mov	r4, r0
   12f9c:	b118      	cbz	r0, 12fa6 <ll_init+0x62>
}
   12f9e:	4620      	mov	r0, r4
   12fa0:	b006      	add	sp, #24
   12fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   12fa6:	4b92      	ldr	r3, [pc, #584]	; (131f0 <ll_init+0x2ac>)
		link = mem_acquire(&mem_link_done.free);
   12fa8:	f8df 824c 	ldr.w	r8, [pc, #588]	; 131f8 <ll_init+0x2b4>
   12fac:	4d91      	ldr	r5, [pc, #580]	; (131f4 <ll_init+0x2b0>)
		rx = mem_acquire(&mem_done.free);
   12fae:	4f90      	ldr	r7, [pc, #576]	; (131f0 <ll_init+0x2ac>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   12fb0:	1d18      	adds	r0, r3, #4
   12fb2:	2203      	movs	r2, #3
   12fb4:	2134      	movs	r1, #52	; 0x34
   12fb6:	f7fc fab7 	bl	f528 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   12fba:	4643      	mov	r3, r8
   12fbc:	2203      	movs	r2, #3
   12fbe:	1d18      	adds	r0, r3, #4
   12fc0:	2108      	movs	r1, #8
   12fc2:	f7fc fab1 	bl	f528 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   12fc6:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   12fc8:	786a      	ldrb	r2, [r5, #1]
   12fca:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   12fcc:	3401      	adds	r4, #1
   12fce:	b2e4      	uxtb	r4, r4
		last = 0U;
   12fd0:	42a2      	cmp	r2, r4
   12fd2:	bf08      	it	eq
   12fd4:	2400      	moveq	r4, #0
	if (last == first) {
   12fd6:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   12fd8:	4640      	mov	r0, r8
   12fda:	d013      	beq.n	13004 <ll_init+0xc0>
   12fdc:	f7fc fad2 	bl	f584 <mem_acquire>
   12fe0:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
   12fe2:	4638      	mov	r0, r7
		if (!link) {
   12fe4:	b176      	cbz	r6, 13004 <ll_init+0xc0>
		rx = mem_acquire(&mem_done.free);
   12fe6:	f7fc facd 	bl	f584 <mem_acquire>
		if (!rx) {
   12fea:	b138      	cbz	r0, 12ffc <ll_init+0xb8>
		rx->link = link;
   12fec:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12fee:	78ea      	ldrb	r2, [r5, #3]
   12ff0:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12ff2:	fb02 5303 	mla	r3, r2, r3, r5
   12ff6:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   12ff8:	70ec      	strb	r4, [r5, #3]
}
   12ffa:	e7e5      	b.n	12fc8 <ll_init+0x84>
			mem_release(link, &mem_link_done.free);
   12ffc:	497e      	ldr	r1, [pc, #504]	; (131f8 <ll_init+0x2b4>)
   12ffe:	4630      	mov	r0, r6
   13000:	f7fc fada 	bl	f5b8 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   13004:	4b7d      	ldr	r3, [pc, #500]	; (131fc <ll_init+0x2b8>)
   13006:	220a      	movs	r2, #10
   13008:	1d18      	adds	r0, r3, #4
   1300a:	2148      	movs	r1, #72	; 0x48
   1300c:	f7fc fa8c 	bl	f528 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   13010:	4b7b      	ldr	r3, [pc, #492]	; (13200 <ll_init+0x2bc>)
   13012:	220b      	movs	r2, #11
   13014:	1d18      	adds	r0, r3, #4
   13016:	2108      	movs	r1, #8
   13018:	f7fc fa86 	bl	f528 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   1301c:	4878      	ldr	r0, [pc, #480]	; (13200 <ll_init+0x2bc>)
   1301e:	f7fc fab1 	bl	f584 <mem_acquire>
	LL_ASSERT(link);
   13022:	4604      	mov	r4, r0
   13024:	2800      	cmp	r0, #0
   13026:	f000 80bf 	beq.w	131a8 <ll_init+0x264>
	MEMQ_INIT(ull_rx, link);
   1302a:	4a76      	ldr	r2, [pc, #472]	; (13204 <ll_init+0x2c0>)
   1302c:	4620      	mov	r0, r4
   1302e:	1f11      	subs	r1, r2, #4
   13030:	f7fc fafe 	bl	f630 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   13034:	4872      	ldr	r0, [pc, #456]	; (13200 <ll_init+0x2bc>)
   13036:	f7fc faa5 	bl	f584 <mem_acquire>
	LL_ASSERT(link);
   1303a:	4604      	mov	r4, r0
   1303c:	2800      	cmp	r0, #0
   1303e:	f000 80a5 	beq.w	1318c <ll_init+0x248>
	MEMQ_INIT(ll_rx, link);
   13042:	4a71      	ldr	r2, [pc, #452]	; (13208 <ll_init+0x2c4>)
	mem_link_rx.quota_pdu = RX_CNT;
   13044:	4d71      	ldr	r5, [pc, #452]	; (1320c <ll_init+0x2c8>)
   13046:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 13224 <ll_init+0x2e0>
		rx = mem_acquire(&mem_pdu_rx.free);
   1304a:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 131fc <ll_init+0x2b8>
	MEMQ_INIT(ll_rx, link);
   1304e:	4620      	mov	r0, r4
   13050:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   13052:	462e      	mov	r6, r5
	MEMQ_INIT(ll_rx, link);
   13054:	f7fc faec 	bl	f630 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   13058:	2307      	movs	r3, #7
   1305a:	f806 3b04 	strb.w	r3, [r6], #4
	while (mem_link_rx.quota_pdu &&
   1305e:	f899 4003 	ldrb.w	r4, [r9, #3]
		link->mem = NULL;
   13062:	2700      	movs	r7, #0
	if (last == count) {
   13064:	f899 2001 	ldrb.w	r2, [r9, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13068:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
   1306c:	3401      	adds	r4, #1
   1306e:	b2e4      	uxtb	r4, r4
		last = 0U;
   13070:	42a2      	cmp	r2, r4
   13072:	bf08      	it	eq
   13074:	2400      	moveq	r4, #0
	if (last == first) {
   13076:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   13078:	4630      	mov	r0, r6
   1307a:	d049      	beq.n	13110 <ll_init+0x1cc>
   1307c:	f7fc fa82 	bl	f584 <mem_acquire>
   13080:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13082:	4640      	mov	r0, r8
		if (!link) {
   13084:	f1ba 0f00 	cmp.w	sl, #0
   13088:	d042      	beq.n	13110 <ll_init+0x1cc>
		rx = mem_acquire(&mem_pdu_rx.free);
   1308a:	f7fc fa7b 	bl	f584 <mem_acquire>
		if (!rx) {
   1308e:	2800      	cmp	r0, #0
   13090:	d03a      	beq.n	13108 <ll_init+0x1c4>
		link->mem = NULL;
   13092:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
   13096:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1309a:	f899 1003 	ldrb.w	r1, [r9, #3]
   1309e:	f899 2000 	ldrb.w	r2, [r9]
	mem_link_rx.quota_pdu += delta;
   130a2:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   130a4:	fb01 9202 	mla	r2, r1, r2, r9
   130a8:	3b01      	subs	r3, #1
   130aa:	b2db      	uxtb	r3, r3
   130ac:	6050      	str	r0, [r2, #4]
   130ae:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   130b0:	f889 4003 	strb.w	r4, [r9, #3]
	while (mem_link_rx.quota_pdu &&
   130b4:	2b00      	cmp	r3, #0
   130b6:	d1d5      	bne.n	13064 <ll_init+0x120>
	err = lll_adv_init();
   130b8:	f007 f9cc 	bl	1a454 <lll_adv_init>
	if (err) {
   130bc:	4604      	mov	r4, r0
   130be:	2800      	cmp	r0, #0
   130c0:	f47f af6d 	bne.w	12f9e <ll_init+0x5a>
	err = ull_adv_init();
   130c4:	f001 fa80 	bl	145c8 <ull_adv_init>
	if (err) {
   130c8:	4604      	mov	r4, r0
   130ca:	2800      	cmp	r0, #0
   130cc:	f47f af67 	bne.w	12f9e <ll_init+0x5a>
	err = lll_scan_init();
   130d0:	f008 f8e4 	bl	1b29c <lll_scan_init>
	if (err) {
   130d4:	4604      	mov	r4, r0
   130d6:	2800      	cmp	r0, #0
   130d8:	f47f af61 	bne.w	12f9e <ll_init+0x5a>
	err = ull_scan_init();
   130dc:	f001 fc76 	bl	149cc <ull_scan_init>
	if (err) {
   130e0:	4604      	mov	r4, r0
   130e2:	2800      	cmp	r0, #0
   130e4:	f47f af5b 	bne.w	12f9e <ll_init+0x5a>
	err = lll_conn_init();
   130e8:	f008 f970 	bl	1b3cc <lll_conn_init>
	if (err) {
   130ec:	4604      	mov	r4, r0
   130ee:	2800      	cmp	r0, #0
   130f0:	f47f af55 	bne.w	12f9e <ll_init+0x5a>
	err = ull_conn_init();
   130f4:	f002 fbec 	bl	158d0 <ull_conn_init>
	if (err) {
   130f8:	4604      	mov	r4, r0
   130fa:	2800      	cmp	r0, #0
   130fc:	f47f af4f 	bne.w	12f9e <ll_init+0x5a>
		ull_filter_reset(true);
   13100:	2001      	movs	r0, #1
   13102:	f006 fa39 	bl	19578 <ull_filter_reset>
	return  0;
   13106:	e74a      	b.n	12f9e <ll_init+0x5a>
			mem_release(link, &mem_link_rx.free);
   13108:	493d      	ldr	r1, [pc, #244]	; (13200 <ll_init+0x2bc>)
   1310a:	4650      	mov	r0, sl
   1310c:	f7fc fa54 	bl	f5b8 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   13110:	782b      	ldrb	r3, [r5, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13112:	1e5f      	subs	r7, r3, #1
   13114:	b2ff      	uxtb	r7, r7
   13116:	2b00      	cmp	r3, #0
   13118:	d0ce      	beq.n	130b8 <ll_init+0x174>
   1311a:	4e3d      	ldr	r6, [pc, #244]	; (13210 <ll_init+0x2cc>)
		link = mem_acquire(&mem_link_rx.free);
   1311c:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 13200 <ll_init+0x2bc>
   13120:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   13122:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 131fc <ll_init+0x2b8>
	if (last == count) {
   13126:	7872      	ldrb	r2, [r6, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13128:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   1312a:	3401      	adds	r4, #1
   1312c:	b2e4      	uxtb	r4, r4
		last = 0U;
   1312e:	42a2      	cmp	r2, r4
   13130:	bf08      	it	eq
   13132:	2400      	moveq	r4, #0
	if (last == first) {
   13134:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   13136:	4648      	mov	r0, r9
   13138:	d0be      	beq.n	130b8 <ll_init+0x174>
   1313a:	f7fc fa23 	bl	f584 <mem_acquire>
   1313e:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13140:	4640      	mov	r0, r8
		if (!link) {
   13142:	f1ba 0f00 	cmp.w	sl, #0
   13146:	d0b7      	beq.n	130b8 <ll_init+0x174>
		rx = mem_acquire(&mem_pdu_rx.free);
   13148:	f7fc fa1c 	bl	f584 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1314c:	3f01      	subs	r7, #1
   1314e:	b2ff      	uxtb	r7, r7
		if (!rx) {
   13150:	2800      	cmp	r0, #0
   13152:	d037      	beq.n	131c4 <ll_init+0x280>
		rx->link = link;
   13154:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13158:	78f1      	ldrb	r1, [r6, #3]
   1315a:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
   1315c:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1315e:	fb01 6202 	mla	r2, r1, r2, r6
   13162:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13164:	2fff      	cmp	r7, #255	; 0xff
   13166:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   13168:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   1316a:	70f4      	strb	r4, [r6, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1316c:	d1db      	bne.n	13126 <ll_init+0x1e2>
   1316e:	e7a3      	b.n	130b8 <ll_init+0x174>
	LL_ASSERT(!err);
   13170:	4a28      	ldr	r2, [pc, #160]	; (13214 <ll_init+0x2d0>)
   13172:	4929      	ldr	r1, [pc, #164]	; (13218 <ll_init+0x2d4>)
   13174:	4829      	ldr	r0, [pc, #164]	; (1321c <ll_init+0x2d8>)
   13176:	f240 1353 	movw	r3, #339	; 0x153
   1317a:	f00c fabc 	bl	1f6f6 <printk>
   1317e:	4040      	eors	r0, r0
   13180:	f380 8811 	msr	BASEPRI, r0
   13184:	f04f 0003 	mov.w	r0, #3
   13188:	df02      	svc	2
   1318a:	e6ff      	b.n	12f8c <ll_init+0x48>
	LL_ASSERT(link);
   1318c:	4a21      	ldr	r2, [pc, #132]	; (13214 <ll_init+0x2d0>)
   1318e:	4924      	ldr	r1, [pc, #144]	; (13220 <ll_init+0x2dc>)
   13190:	4822      	ldr	r0, [pc, #136]	; (1321c <ll_init+0x2d8>)
   13192:	f240 6325 	movw	r3, #1573	; 0x625
   13196:	f00c faae 	bl	1f6f6 <printk>
   1319a:	4040      	eors	r0, r0
   1319c:	f380 8811 	msr	BASEPRI, r0
   131a0:	f04f 0003 	mov.w	r0, #3
   131a4:	df02      	svc	2
   131a6:	e74c      	b.n	13042 <ll_init+0xfe>
	LL_ASSERT(link);
   131a8:	4a1a      	ldr	r2, [pc, #104]	; (13214 <ll_init+0x2d0>)
   131aa:	491d      	ldr	r1, [pc, #116]	; (13220 <ll_init+0x2dc>)
   131ac:	481b      	ldr	r0, [pc, #108]	; (1321c <ll_init+0x2d8>)
   131ae:	f240 631e 	movw	r3, #1566	; 0x61e
   131b2:	f00c faa0 	bl	1f6f6 <printk>
   131b6:	4040      	eors	r0, r0
   131b8:	f380 8811 	msr	BASEPRI, r0
   131bc:	f04f 0003 	mov.w	r0, #3
   131c0:	df02      	svc	2
   131c2:	e732      	b.n	1302a <ll_init+0xe6>
			mem_release(link, &mem_link_rx.free);
   131c4:	490e      	ldr	r1, [pc, #56]	; (13200 <ll_init+0x2bc>)
   131c6:	4650      	mov	r0, sl
   131c8:	f7fc f9f6 	bl	f5b8 <mem_release>
			break;
   131cc:	e774      	b.n	130b8 <ll_init+0x174>
   131ce:	bf00      	nop
   131d0:	20001ad4 	.word	0x20001ad4
   131d4:	0001cce5 	.word	0x0001cce5
   131d8:	0001ce29 	.word	0x0001ce29
   131dc:	20001c10 	.word	0x20001c10
   131e0:	20001e4c 	.word	0x20001e4c
   131e4:	0001cd49 	.word	0x0001cd49
   131e8:	20001af0 	.word	0x20001af0
   131ec:	20001ad8 	.word	0x20001ad8
   131f0:	200016d4 	.word	0x200016d4
   131f4:	20000240 	.word	0x20000240
   131f8:	20001774 	.word	0x20001774
   131fc:	200017f0 	.word	0x200017f0
   13200:	20001794 	.word	0x20001794
   13204:	20001ad0 	.word	0x20001ad0
   13208:	20001ac8 	.word	0x20001ac8
   1320c:	20001790 	.word	0x20001790
   13210:	20000268 	.word	0x20000268
   13214:	00025c00 	.word	0x00025c00
   13218:	00025c3c 	.word	0x00025c3c
   1321c:	00025984 	.word	0x00025984
   13220:	00025f3c 	.word	0x00025f3c
   13224:	20000254 	.word	0x20000254

00013228 <ll_reset>:
{
   13228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1322c:	b087      	sub	sp, #28
	err = ull_adv_reset();
   1322e:	f001 f9d9 	bl	145e4 <ull_adv_reset>
	LL_ASSERT(!err);
   13232:	2800      	cmp	r0, #0
   13234:	f040 80f5 	bne.w	13422 <ll_reset+0x1fa>
	err = ull_scan_reset();
   13238:	f001 fc50 	bl	14adc <ull_scan_reset>
	LL_ASSERT(!err);
   1323c:	2800      	cmp	r0, #0
   1323e:	f040 8102 	bne.w	13446 <ll_reset+0x21e>
		err = ll_connect_disable(&rx);
   13242:	4668      	mov	r0, sp
   13244:	f005 f9c6 	bl	185d4 <ll_connect_disable>
		if (!err) {
   13248:	2800      	cmp	r0, #0
   1324a:	f000 810f 	beq.w	1346c <ll_reset+0x244>
	err = ull_conn_reset();
   1324e:	f002 fb41 	bl	158d4 <ull_conn_reset>
	LL_ASSERT(!err);
   13252:	2800      	cmp	r0, #0
   13254:	f040 811c 	bne.w	13490 <ll_reset+0x268>
	MFIFO_INIT(tx_ack);
   13258:	4bb3      	ldr	r3, [pc, #716]	; (13528 <ll_reset+0x300>)
	MFIFO_INIT(done);
   1325a:	4eb4      	ldr	r6, [pc, #720]	; (1352c <ll_reset+0x304>)
	MFIFO_INIT(pdu_rx_free);
   1325c:	4fb4      	ldr	r7, [pc, #720]	; (13530 <ll_reset+0x308>)
	MFIFO_INIT(ll_pdu_rx_free);
   1325e:	4db5      	ldr	r5, [pc, #724]	; (13534 <ll_reset+0x30c>)
	MFIFO_INIT(tx_ack);
   13260:	2400      	movs	r4, #0
   13262:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   13264:	4620      	mov	r0, r4
   13266:	f006 f987 	bl	19578 <ull_filter_reset>
	MFIFO_INIT(prep);
   1326a:	4bb3      	ldr	r3, [pc, #716]	; (13538 <ll_reset+0x310>)
	MFIFO_INIT(done);
   1326c:	8074      	strh	r4, [r6, #2]
	MFIFO_INIT(prep);
   1326e:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   13270:	807c      	strh	r4, [r7, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   13272:	806c      	strh	r4, [r5, #2]
   13274:	2201      	movs	r2, #1
   13276:	4621      	mov	r1, r4
   13278:	4668      	mov	r0, sp
   1327a:	f011 fae7 	bl	2484c <z_impl_k_sem_init>
		mfy.param = &sem;
   1327e:	4baf      	ldr	r3, [pc, #700]	; (1353c <ll_reset+0x314>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   13280:	4622      	mov	r2, r4
   13282:	4621      	mov	r1, r4
   13284:	2003      	movs	r0, #3
		mfy.param = &sem;
   13286:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   1328a:	f7fc fa53 	bl	f734 <mayfly_enqueue>
		LL_ASSERT(!retval);
   1328e:	2800      	cmp	r0, #0
   13290:	f040 811a 	bne.w	134c8 <ll_reset+0x2a0>
	return z_impl_k_sem_take(sem, timeout);
   13294:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1329c:	4668      	mov	r0, sp
   1329e:	f00b fd9b 	bl	1edd8 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   132a2:	f001 fa45 	bl	14730 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   132a6:	2800      	cmp	r0, #0
   132a8:	f040 8100 	bne.w	134ac <ll_reset+0x284>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   132ac:	4ba4      	ldr	r3, [pc, #656]	; (13540 <ll_reset+0x318>)
		link = mem_acquire(&mem_link_done.free);
   132ae:	f8df 9294 	ldr.w	r9, [pc, #660]	; 13544 <ll_reset+0x31c>
		rx = mem_acquire(&mem_done.free);
   132b2:	f8df 828c 	ldr.w	r8, [pc, #652]	; 13540 <ll_reset+0x318>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   132b6:	1d18      	adds	r0, r3, #4
   132b8:	2203      	movs	r2, #3
   132ba:	2134      	movs	r1, #52	; 0x34
   132bc:	f7fc f934 	bl	f528 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   132c0:	464b      	mov	r3, r9
   132c2:	2203      	movs	r2, #3
   132c4:	1d18      	adds	r0, r3, #4
   132c6:	2108      	movs	r1, #8
   132c8:	f7fc f92e 	bl	f528 <mem_init>
static inline void done_alloc(void)
   132cc:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   132ce:	7872      	ldrb	r2, [r6, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   132d0:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   132d2:	3401      	adds	r4, #1
   132d4:	b2e4      	uxtb	r4, r4
		last = 0U;
   132d6:	42a2      	cmp	r2, r4
   132d8:	bf08      	it	eq
   132da:	2400      	moveq	r4, #0
	if (last == first) {
   132dc:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   132de:	4648      	mov	r0, r9
   132e0:	d016      	beq.n	13310 <ll_reset+0xe8>
   132e2:	f7fc f94f 	bl	f584 <mem_acquire>
   132e6:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_done.free);
   132e8:	4640      	mov	r0, r8
		if (!link) {
   132ea:	f1ba 0f00 	cmp.w	sl, #0
   132ee:	d00f      	beq.n	13310 <ll_reset+0xe8>
		rx = mem_acquire(&mem_done.free);
   132f0:	f7fc f948 	bl	f584 <mem_acquire>
		if (!rx) {
   132f4:	b140      	cbz	r0, 13308 <ll_reset+0xe0>
		rx->link = link;
   132f6:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   132fa:	78f2      	ldrb	r2, [r6, #3]
   132fc:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   132fe:	fb02 6303 	mla	r3, r2, r3, r6
   13302:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   13304:	70f4      	strb	r4, [r6, #3]
}
   13306:	e7e2      	b.n	132ce <ll_reset+0xa6>
			mem_release(link, &mem_link_done.free);
   13308:	498e      	ldr	r1, [pc, #568]	; (13544 <ll_reset+0x31c>)
   1330a:	4650      	mov	r0, sl
   1330c:	f7fc f954 	bl	f5b8 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   13310:	4b8d      	ldr	r3, [pc, #564]	; (13548 <ll_reset+0x320>)
   13312:	220a      	movs	r2, #10
   13314:	1d18      	adds	r0, r3, #4
   13316:	2148      	movs	r1, #72	; 0x48
   13318:	f7fc f906 	bl	f528 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   1331c:	4b8b      	ldr	r3, [pc, #556]	; (1354c <ll_reset+0x324>)
   1331e:	220b      	movs	r2, #11
   13320:	1d18      	adds	r0, r3, #4
   13322:	2108      	movs	r1, #8
   13324:	f7fc f900 	bl	f528 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   13328:	4888      	ldr	r0, [pc, #544]	; (1354c <ll_reset+0x324>)
   1332a:	f7fc f92b 	bl	f584 <mem_acquire>
	LL_ASSERT(link);
   1332e:	4604      	mov	r4, r0
   13330:	2800      	cmp	r0, #0
   13332:	f000 80e5 	beq.w	13500 <ll_reset+0x2d8>
	MEMQ_INIT(ull_rx, link);
   13336:	4a86      	ldr	r2, [pc, #536]	; (13550 <ll_reset+0x328>)
   13338:	4620      	mov	r0, r4
   1333a:	1f11      	subs	r1, r2, #4
   1333c:	f7fc f978 	bl	f630 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   13340:	4882      	ldr	r0, [pc, #520]	; (1354c <ll_reset+0x324>)
   13342:	f7fc f91f 	bl	f584 <mem_acquire>
	LL_ASSERT(link);
   13346:	4604      	mov	r4, r0
   13348:	2800      	cmp	r0, #0
   1334a:	f000 80cb 	beq.w	134e4 <ll_reset+0x2bc>
	MEMQ_INIT(ll_rx, link);
   1334e:	4a81      	ldr	r2, [pc, #516]	; (13554 <ll_reset+0x32c>)
	mem_link_rx.quota_pdu = RX_CNT;
   13350:	4e81      	ldr	r6, [pc, #516]	; (13558 <ll_reset+0x330>)
		rx = mem_acquire(&mem_pdu_rx.free);
   13352:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 13548 <ll_reset+0x320>
	MEMQ_INIT(ll_rx, link);
   13356:	4620      	mov	r0, r4
   13358:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   1335a:	46b0      	mov	r8, r6
	MEMQ_INIT(ll_rx, link);
   1335c:	f7fc f968 	bl	f630 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   13360:	2307      	movs	r3, #7
   13362:	f808 3b04 	strb.w	r3, [r8], #4
	while (mem_link_rx.quota_pdu &&
   13366:	78ec      	ldrb	r4, [r5, #3]
		link->mem = NULL;
   13368:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   1336c:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1336e:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   13370:	3401      	adds	r4, #1
   13372:	b2e4      	uxtb	r4, r4
		last = 0U;
   13374:	42a2      	cmp	r2, r4
   13376:	bf08      	it	eq
   13378:	2400      	moveq	r4, #0
	if (last == first) {
   1337a:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   1337c:	4640      	mov	r0, r8
   1337e:	d020      	beq.n	133c2 <ll_reset+0x19a>
   13380:	f7fc f900 	bl	f584 <mem_acquire>
   13384:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13386:	4650      	mov	r0, sl
		if (!link) {
   13388:	f1bb 0f00 	cmp.w	fp, #0
   1338c:	d019      	beq.n	133c2 <ll_reset+0x19a>
		rx = mem_acquire(&mem_pdu_rx.free);
   1338e:	f7fc f8f9 	bl	f584 <mem_acquire>
		if (!rx) {
   13392:	b190      	cbz	r0, 133ba <ll_reset+0x192>
		link->mem = NULL;
   13394:	f8cb 9004 	str.w	r9, [fp, #4]
		rx->link = link;
   13398:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1339c:	78e9      	ldrb	r1, [r5, #3]
   1339e:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
   133a0:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   133a2:	fb01 5202 	mla	r2, r1, r2, r5
   133a6:	3b01      	subs	r3, #1
   133a8:	b2db      	uxtb	r3, r3
   133aa:	6050      	str	r0, [r2, #4]
   133ac:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   133ae:	70ec      	strb	r4, [r5, #3]
	while (mem_link_rx.quota_pdu &&
   133b0:	2b00      	cmp	r3, #0
   133b2:	d1db      	bne.n	1336c <ll_reset+0x144>
}
   133b4:	b007      	add	sp, #28
   133b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   133ba:	4964      	ldr	r1, [pc, #400]	; (1354c <ll_reset+0x324>)
   133bc:	4658      	mov	r0, fp
   133be:	f7fc f8fb 	bl	f5b8 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   133c2:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   133c4:	1e5d      	subs	r5, r3, #1
   133c6:	b2ed      	uxtb	r5, r5
   133c8:	2b00      	cmp	r3, #0
   133ca:	d0f3      	beq.n	133b4 <ll_reset+0x18c>
   133cc:	78fc      	ldrb	r4, [r7, #3]
		link = mem_acquire(&mem_link_rx.free);
   133ce:	f8df 917c 	ldr.w	r9, [pc, #380]	; 1354c <ll_reset+0x324>
		rx = mem_acquire(&mem_pdu_rx.free);
   133d2:	f8df 8174 	ldr.w	r8, [pc, #372]	; 13548 <ll_reset+0x320>
	if (last == count) {
   133d6:	787a      	ldrb	r2, [r7, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   133d8:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   133da:	3401      	adds	r4, #1
   133dc:	b2e4      	uxtb	r4, r4
		last = 0U;
   133de:	42a2      	cmp	r2, r4
   133e0:	bf08      	it	eq
   133e2:	2400      	moveq	r4, #0
	if (last == first) {
   133e4:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   133e6:	4648      	mov	r0, r9
   133e8:	d0e4      	beq.n	133b4 <ll_reset+0x18c>
   133ea:	f7fc f8cb 	bl	f584 <mem_acquire>
   133ee:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   133f0:	4640      	mov	r0, r8
		if (!link) {
   133f2:	f1ba 0f00 	cmp.w	sl, #0
   133f6:	d0dd      	beq.n	133b4 <ll_reset+0x18c>
		rx = mem_acquire(&mem_pdu_rx.free);
   133f8:	f7fc f8c4 	bl	f584 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   133fc:	3d01      	subs	r5, #1
   133fe:	b2ed      	uxtb	r5, r5
		if (!rx) {
   13400:	2800      	cmp	r0, #0
   13402:	f000 808b 	beq.w	1351c <ll_reset+0x2f4>
		rx->link = link;
   13406:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1340a:	78f9      	ldrb	r1, [r7, #3]
   1340c:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   1340e:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13410:	fb01 7202 	mla	r2, r1, r2, r7
   13414:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13416:	2dff      	cmp	r5, #255	; 0xff
   13418:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   1341a:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   1341c:	70fc      	strb	r4, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1341e:	d1da      	bne.n	133d6 <ll_reset+0x1ae>
   13420:	e7c8      	b.n	133b4 <ll_reset+0x18c>
	LL_ASSERT(!err);
   13422:	4a4e      	ldr	r2, [pc, #312]	; (1355c <ll_reset+0x334>)
   13424:	494e      	ldr	r1, [pc, #312]	; (13560 <ll_reset+0x338>)
   13426:	484f      	ldr	r0, [pc, #316]	; (13564 <ll_reset+0x33c>)
   13428:	f44f 73e5 	mov.w	r3, #458	; 0x1ca
   1342c:	f00c f963 	bl	1f6f6 <printk>
   13430:	4040      	eors	r0, r0
   13432:	f380 8811 	msr	BASEPRI, r0
   13436:	f04f 0003 	mov.w	r0, #3
   1343a:	df02      	svc	2
	err = ull_scan_reset();
   1343c:	f001 fb4e 	bl	14adc <ull_scan_reset>
	LL_ASSERT(!err);
   13440:	2800      	cmp	r0, #0
   13442:	f43f aefe 	beq.w	13242 <ll_reset+0x1a>
   13446:	4a45      	ldr	r2, [pc, #276]	; (1355c <ll_reset+0x334>)
   13448:	4945      	ldr	r1, [pc, #276]	; (13560 <ll_reset+0x338>)
   1344a:	4846      	ldr	r0, [pc, #280]	; (13564 <ll_reset+0x33c>)
   1344c:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   13450:	f00c f951 	bl	1f6f6 <printk>
   13454:	4040      	eors	r0, r0
   13456:	f380 8811 	msr	BASEPRI, r0
   1345a:	f04f 0003 	mov.w	r0, #3
   1345e:	df02      	svc	2
		err = ll_connect_disable(&rx);
   13460:	4668      	mov	r0, sp
   13462:	f005 f8b7 	bl	185d4 <ll_connect_disable>
		if (!err) {
   13466:	2800      	cmp	r0, #0
   13468:	f47f aef1 	bne.w	1324e <ll_reset+0x26>
			scan = ull_scan_is_enabled_get(0);
   1346c:	f001 fb58 	bl	14b20 <ull_scan_is_enabled_get>
			LL_ASSERT(scan);
   13470:	4604      	mov	r4, r0
   13472:	2800      	cmp	r0, #0
   13474:	d07c      	beq.n	13570 <ll_reset+0x348>
			scan->is_enabled = 0U;
   13476:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
			scan->lll.conn = NULL;
   1347a:	2200      	movs	r2, #0
			scan->is_enabled = 0U;
   1347c:	f36f 0300 	bfc	r3, #0, #1
   13480:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
			scan->lll.conn = NULL;
   13484:	6262      	str	r2, [r4, #36]	; 0x24
	err = ull_conn_reset();
   13486:	f002 fa25 	bl	158d4 <ull_conn_reset>
	LL_ASSERT(!err);
   1348a:	2800      	cmp	r0, #0
   1348c:	f43f aee4 	beq.w	13258 <ll_reset+0x30>
   13490:	4a32      	ldr	r2, [pc, #200]	; (1355c <ll_reset+0x334>)
   13492:	4933      	ldr	r1, [pc, #204]	; (13560 <ll_reset+0x338>)
   13494:	4833      	ldr	r0, [pc, #204]	; (13564 <ll_reset+0x33c>)
   13496:	f44f 7300 	mov.w	r3, #512	; 0x200
   1349a:	f00c f92c 	bl	1f6f6 <printk>
   1349e:	4040      	eors	r0, r0
   134a0:	f380 8811 	msr	BASEPRI, r0
   134a4:	f04f 0003 	mov.w	r0, #3
   134a8:	df02      	svc	2
   134aa:	e6d5      	b.n	13258 <ll_reset+0x30>
	LL_ASSERT(!err);
   134ac:	4a2b      	ldr	r2, [pc, #172]	; (1355c <ll_reset+0x334>)
   134ae:	492c      	ldr	r1, [pc, #176]	; (13560 <ll_reset+0x338>)
   134b0:	482c      	ldr	r0, [pc, #176]	; (13564 <ll_reset+0x33c>)
   134b2:	f240 233f 	movw	r3, #575	; 0x23f
   134b6:	f00c f91e 	bl	1f6f6 <printk>
   134ba:	4040      	eors	r0, r0
   134bc:	f380 8811 	msr	BASEPRI, r0
   134c0:	f04f 0003 	mov.w	r0, #3
   134c4:	df02      	svc	2
   134c6:	e6f1      	b.n	132ac <ll_reset+0x84>
		LL_ASSERT(!retval);
   134c8:	4a24      	ldr	r2, [pc, #144]	; (1355c <ll_reset+0x334>)
   134ca:	4927      	ldr	r1, [pc, #156]	; (13568 <ll_reset+0x340>)
   134cc:	4825      	ldr	r0, [pc, #148]	; (13564 <ll_reset+0x33c>)
   134ce:	f240 2332 	movw	r3, #562	; 0x232
   134d2:	f00c f910 	bl	1f6f6 <printk>
   134d6:	4040      	eors	r0, r0
   134d8:	f380 8811 	msr	BASEPRI, r0
   134dc:	f04f 0003 	mov.w	r0, #3
   134e0:	df02      	svc	2
   134e2:	e6d7      	b.n	13294 <ll_reset+0x6c>
	LL_ASSERT(link);
   134e4:	4a1d      	ldr	r2, [pc, #116]	; (1355c <ll_reset+0x334>)
   134e6:	4921      	ldr	r1, [pc, #132]	; (1356c <ll_reset+0x344>)
   134e8:	481e      	ldr	r0, [pc, #120]	; (13564 <ll_reset+0x33c>)
   134ea:	f240 6325 	movw	r3, #1573	; 0x625
   134ee:	f00c f902 	bl	1f6f6 <printk>
   134f2:	4040      	eors	r0, r0
   134f4:	f380 8811 	msr	BASEPRI, r0
   134f8:	f04f 0003 	mov.w	r0, #3
   134fc:	df02      	svc	2
   134fe:	e726      	b.n	1334e <ll_reset+0x126>
	LL_ASSERT(link);
   13500:	4a16      	ldr	r2, [pc, #88]	; (1355c <ll_reset+0x334>)
   13502:	491a      	ldr	r1, [pc, #104]	; (1356c <ll_reset+0x344>)
   13504:	4817      	ldr	r0, [pc, #92]	; (13564 <ll_reset+0x33c>)
   13506:	f240 631e 	movw	r3, #1566	; 0x61e
   1350a:	f00c f8f4 	bl	1f6f6 <printk>
   1350e:	4040      	eors	r0, r0
   13510:	f380 8811 	msr	BASEPRI, r0
   13514:	f04f 0003 	mov.w	r0, #3
   13518:	df02      	svc	2
   1351a:	e70c      	b.n	13336 <ll_reset+0x10e>
			mem_release(link, &mem_link_rx.free);
   1351c:	490b      	ldr	r1, [pc, #44]	; (1354c <ll_reset+0x324>)
   1351e:	4650      	mov	r0, sl
   13520:	f7fc f84a 	bl	f5b8 <mem_release>
			break;
   13524:	e746      	b.n	133b4 <ll_reset+0x18c>
   13526:	bf00      	nop
   13528:	200003a4 	.word	0x200003a4
   1352c:	20000240 	.word	0x20000240
   13530:	20000268 	.word	0x20000268
   13534:	20000254 	.word	0x20000254
   13538:	20000280 	.word	0x20000280
   1353c:	200003c8 	.word	0x200003c8
   13540:	200016d4 	.word	0x200016d4
   13544:	20001774 	.word	0x20001774
   13548:	200017f0 	.word	0x200017f0
   1354c:	20001794 	.word	0x20001794
   13550:	20001ad0 	.word	0x20001ad0
   13554:	20001ac8 	.word	0x20001ac8
   13558:	20001790 	.word	0x20001790
   1355c:	00025c00 	.word	0x00025c00
   13560:	00025c3c 	.word	0x00025c3c
   13564:	00025984 	.word	0x00025984
   13568:	00025c78 	.word	0x00025c78
   1356c:	00025f3c 	.word	0x00025f3c
			LL_ASSERT(scan);
   13570:	4a06      	ldr	r2, [pc, #24]	; (1358c <ll_reset+0x364>)
   13572:	4907      	ldr	r1, [pc, #28]	; (13590 <ll_reset+0x368>)
   13574:	4807      	ldr	r0, [pc, #28]	; (13594 <ll_reset+0x36c>)
   13576:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   1357a:	f00c f8bc 	bl	1f6f6 <printk>
   1357e:	4040      	eors	r0, r0
   13580:	f380 8811 	msr	BASEPRI, r0
   13584:	f04f 0003 	mov.w	r0, #3
   13588:	df02      	svc	2
   1358a:	e774      	b.n	13476 <ll_reset+0x24e>
   1358c:	00025c00 	.word	0x00025c00
   13590:	00026674 	.word	0x00026674
   13594:	00025984 	.word	0x00025984

00013598 <ll_rx_get>:
{
   13598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1359c:	b085      	sub	sp, #20
   1359e:	e9cd 0100 	strd	r0, r1, [sp]
   135a2:	4c5f      	ldr	r4, [pc, #380]	; (13720 <ll_rx_get+0x188>)
				mem_release(link, &mem_link_rx.free);
   135a4:	4d5f      	ldr	r5, [pc, #380]	; (13724 <ll_rx_get+0x18c>)
   135a6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 1372c <ll_rx_get+0x194>
	*node_rx = NULL;
   135aa:	9a00      	ldr	r2, [sp, #0]
   135ac:	2300      	movs	r3, #0
   135ae:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   135b0:	e9d9 0100 	ldrd	r0, r1, [r9]
   135b4:	aa03      	add	r2, sp, #12
   135b6:	f7fc f851 	bl	f65c <memq_peek>
	if (link) {
   135ba:	4607      	mov	r7, r0
   135bc:	2800      	cmp	r0, #0
   135be:	f000 80a4 	beq.w	1370a <ll_rx_get+0x172>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   135c2:	9b03      	ldr	r3, [sp, #12]
   135c4:	4958      	ldr	r1, [pc, #352]	; (13728 <ll_rx_get+0x190>)
   135c6:	781a      	ldrb	r2, [r3, #0]
   135c8:	9801      	ldr	r0, [sp, #4]
   135ca:	f7ff fa93 	bl	12af4 <tx_cmplt_get>
		if (!cmplt) {
   135ce:	4603      	mov	r3, r0
   135d0:	2800      	cmp	r0, #0
   135d2:	f040 8091 	bne.w	136f8 <ll_rx_get+0x160>
			f = mfifo_tx_ack.f;
   135d6:	78a2      	ldrb	r2, [r4, #2]
   135d8:	f88d 2009 	strb.w	r2, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   135dc:	78e2      	ldrb	r2, [r4, #3]
   135de:	f10d 0109 	add.w	r1, sp, #9
   135e2:	f10d 000a 	add.w	r0, sp, #10
   135e6:	461e      	mov	r6, r3
   135e8:	f7ff fa84 	bl	12af4 <tx_cmplt_get>
   135ec:	ea46 0200 	orr.w	r2, r6, r0
			} while ((cmplt_prev != 0U) ||
   135f0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
   135f4:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
   135f6:	d1f1      	bne.n	135dc <ll_rx_get+0x44>
			if (rx->type == NODE_RX_TYPE_DC_PDU_RELEASE) {
   135f8:	9b03      	ldr	r3, [sp, #12]
   135fa:	7919      	ldrb	r1, [r3, #4]
   135fc:	2903      	cmp	r1, #3
   135fe:	d178      	bne.n	136f2 <ll_rx_get+0x15a>
				(void)memq_dequeue(memq_ll_rx.tail,
   13600:	494a      	ldr	r1, [pc, #296]	; (1372c <ll_rx_get+0x194>)
   13602:	f8d9 0004 	ldr.w	r0, [r9, #4]
   13606:	f7fc f831 	bl	f66c <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   1360a:	4949      	ldr	r1, [pc, #292]	; (13730 <ll_rx_get+0x198>)
   1360c:	4638      	mov	r0, r7
   1360e:	f7fb ffd3 	bl	f5b8 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   13612:	782b      	ldrb	r3, [r5, #0]
   13614:	2b06      	cmp	r3, #6
   13616:	d85d      	bhi.n	136d4 <ll_rx_get+0x13c>
	mem_link_rx.quota_pdu += delta;
   13618:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   1361a:	4946      	ldr	r1, [pc, #280]	; (13734 <ll_rx_get+0x19c>)
   1361c:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   1361e:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   13620:	f7fb ffca 	bl	f5b8 <mem_release>
	while (mem_link_rx.quota_pdu &&
   13624:	782b      	ldrb	r3, [r5, #0]
   13626:	2b00      	cmp	r3, #0
   13628:	d0bf      	beq.n	135aa <ll_rx_get+0x12>
   1362a:	4f43      	ldr	r7, [pc, #268]	; (13738 <ll_rx_get+0x1a0>)
		link = mem_acquire(&mem_link_rx.free);
   1362c:	f8df 8100 	ldr.w	r8, [pc, #256]	; 13730 <ll_rx_get+0x198>
   13630:	78fe      	ldrb	r6, [r7, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   13632:	f8df a100 	ldr.w	sl, [pc, #256]	; 13734 <ll_rx_get+0x19c>
	if (last == count) {
   13636:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13638:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   1363a:	3601      	adds	r6, #1
   1363c:	b2f6      	uxtb	r6, r6
		last = 0U;
   1363e:	42b2      	cmp	r2, r6
   13640:	bf08      	it	eq
   13642:	2600      	moveq	r6, #0
	if (last == first) {
   13644:	429e      	cmp	r6, r3
		link = mem_acquire(&mem_link_rx.free);
   13646:	4640      	mov	r0, r8
   13648:	d01f      	beq.n	1368a <ll_rx_get+0xf2>
   1364a:	f7fb ff9b 	bl	f584 <mem_acquire>
   1364e:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13650:	4650      	mov	r0, sl
		if (!link) {
   13652:	f1bb 0f00 	cmp.w	fp, #0
   13656:	d018      	beq.n	1368a <ll_rx_get+0xf2>
		rx = mem_acquire(&mem_pdu_rx.free);
   13658:	f7fb ff94 	bl	f584 <mem_acquire>
		if (!rx) {
   1365c:	b188      	cbz	r0, 13682 <ll_rx_get+0xea>
		link->mem = NULL;
   1365e:	2300      	movs	r3, #0
   13660:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   13664:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13668:	78f9      	ldrb	r1, [r7, #3]
   1366a:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   1366c:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1366e:	fb01 7202 	mla	r2, r1, r2, r7
   13672:	3b01      	subs	r3, #1
   13674:	b2db      	uxtb	r3, r3
   13676:	6050      	str	r0, [r2, #4]
   13678:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   1367a:	70fe      	strb	r6, [r7, #3]
	while (mem_link_rx.quota_pdu &&
   1367c:	2b00      	cmp	r3, #0
   1367e:	d1da      	bne.n	13636 <ll_rx_get+0x9e>
   13680:	e793      	b.n	135aa <ll_rx_get+0x12>
			mem_release(link, &mem_link_rx.free);
   13682:	492b      	ldr	r1, [pc, #172]	; (13730 <ll_rx_get+0x198>)
   13684:	4658      	mov	r0, fp
   13686:	f7fb ff97 	bl	f5b8 <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1368a:	782b      	ldrb	r3, [r5, #0]
   1368c:	2b00      	cmp	r3, #0
   1368e:	d08c      	beq.n	135aa <ll_rx_get+0x12>
   13690:	4f2a      	ldr	r7, [pc, #168]	; (1373c <ll_rx_get+0x1a4>)
	last = last + 1;
   13692:	78fe      	ldrb	r6, [r7, #3]
	if (last == count) {
   13694:	787a      	ldrb	r2, [r7, #1]
   13696:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   13698:	3601      	adds	r6, #1
   1369a:	b2f6      	uxtb	r6, r6
		last = 0U;
   1369c:	42b2      	cmp	r2, r6
   1369e:	bf08      	it	eq
   136a0:	2600      	moveq	r6, #0
	if (last == first) {
   136a2:	429e      	cmp	r6, r3
   136a4:	d081      	beq.n	135aa <ll_rx_get+0x12>
		link = mem_acquire(&mem_link_rx.free);
   136a6:	4822      	ldr	r0, [pc, #136]	; (13730 <ll_rx_get+0x198>)
   136a8:	f7fb ff6c 	bl	f584 <mem_acquire>
		if (!link) {
   136ac:	4680      	mov	r8, r0
   136ae:	2800      	cmp	r0, #0
   136b0:	f43f af7b 	beq.w	135aa <ll_rx_get+0x12>
		rx = mem_acquire(&mem_pdu_rx.free);
   136b4:	481f      	ldr	r0, [pc, #124]	; (13734 <ll_rx_get+0x19c>)
   136b6:	f7fb ff65 	bl	f584 <mem_acquire>
		if (!rx) {
   136ba:	b308      	cbz	r0, 13700 <ll_rx_get+0x168>
		rx->link = link;
   136bc:	f8c0 8000 	str.w	r8, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   136c0:	78f9      	ldrb	r1, [r7, #3]
   136c2:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   136c4:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   136c6:	fb01 7202 	mla	r2, r1, r2, r7
   136ca:	3b01      	subs	r3, #1
   136cc:	6050      	str	r0, [r2, #4]
   136ce:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   136d0:	70fe      	strb	r6, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   136d2:	e76a      	b.n	135aa <ll_rx_get+0x12>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   136d4:	4a1a      	ldr	r2, [pc, #104]	; (13740 <ll_rx_get+0x1a8>)
   136d6:	491b      	ldr	r1, [pc, #108]	; (13744 <ll_rx_get+0x1ac>)
   136d8:	481b      	ldr	r0, [pc, #108]	; (13748 <ll_rx_get+0x1b0>)
   136da:	f240 4367 	movw	r3, #1127	; 0x467
   136de:	f00c f80a 	bl	1f6f6 <printk>
   136e2:	4040      	eors	r0, r0
   136e4:	f380 8811 	msr	BASEPRI, r0
   136e8:	f04f 0003 	mov.w	r0, #3
   136ec:	df02      	svc	2
   136ee:	782b      	ldrb	r3, [r5, #0]
   136f0:	e792      	b.n	13618 <ll_rx_get+0x80>
			*node_rx = rx;
   136f2:	9900      	ldr	r1, [sp, #0]
   136f4:	600b      	str	r3, [r1, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   136f6:	4613      	mov	r3, r2
}
   136f8:	4618      	mov	r0, r3
   136fa:	b005      	add	sp, #20
   136fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   13700:	490b      	ldr	r1, [pc, #44]	; (13730 <ll_rx_get+0x198>)
   13702:	4640      	mov	r0, r8
   13704:	f7fb ff58 	bl	f5b8 <mem_release>
			break;
   13708:	e74f      	b.n	135aa <ll_rx_get+0x12>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   1370a:	78e2      	ldrb	r2, [r4, #3]
   1370c:	4906      	ldr	r1, [pc, #24]	; (13728 <ll_rx_get+0x190>)
   1370e:	9801      	ldr	r0, [sp, #4]
   13710:	f7ff f9f0 	bl	12af4 <tx_cmplt_get>
   13714:	4603      	mov	r3, r0
}
   13716:	4618      	mov	r0, r3
   13718:	b005      	add	sp, #20
   1371a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1371e:	bf00      	nop
   13720:	200003a4 	.word	0x200003a4
   13724:	20001790 	.word	0x20001790
   13728:	200003a6 	.word	0x200003a6
   1372c:	20001ac4 	.word	0x20001ac4
   13730:	20001794 	.word	0x20001794
   13734:	200017f0 	.word	0x200017f0
   13738:	20000254 	.word	0x20000254
   1373c:	20000268 	.word	0x20000268
   13740:	00025c00 	.word	0x00025c00
   13744:	00025c80 	.word	0x00025c80
   13748:	00025984 	.word	0x00025984

0001374c <ll_rx_dequeue>:
{
   1374c:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1374e:	495b      	ldr	r1, [pc, #364]	; (138bc <ll_rx_dequeue+0x170>)
{
   13750:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   13752:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   13754:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   13756:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   13758:	aa01      	add	r2, sp, #4
   1375a:	f7fb ff87 	bl	f66c <memq_dequeue>
	LL_ASSERT(link);
   1375e:	4604      	mov	r4, r0
   13760:	2800      	cmp	r0, #0
   13762:	d051      	beq.n	13808 <ll_rx_dequeue+0xbc>
	mem_release(link, &mem_link_rx.free);
   13764:	4956      	ldr	r1, [pc, #344]	; (138c0 <ll_rx_dequeue+0x174>)
   13766:	4620      	mov	r0, r4
   13768:	f7fb ff26 	bl	f5b8 <mem_release>
	switch (rx->type) {
   1376c:	9a01      	ldr	r2, [sp, #4]
   1376e:	7913      	ldrb	r3, [r2, #4]
   13770:	2b17      	cmp	r3, #23
   13772:	d811      	bhi.n	13798 <ll_rx_dequeue+0x4c>
   13774:	e8df f003 	tbb	[pc, r3]
   13778:	100c100c 	.word	0x100c100c
   1377c:	1010100c 	.word	0x1010100c
   13780:	10101010 	.word	0x10101010
   13784:	10101010 	.word	0x10101010
   13788:	0c0c1f10 	.word	0x0c0c1f10
   1378c:	0c0c0c0c 	.word	0x0c0c0c0c
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   13790:	2b00      	cmp	r3, #0
   13792:	d047      	beq.n	13824 <ll_rx_dequeue+0xd8>
}
   13794:	b002      	add	sp, #8
   13796:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
   13798:	4a4a      	ldr	r2, [pc, #296]	; (138c4 <ll_rx_dequeue+0x178>)
   1379a:	494b      	ldr	r1, [pc, #300]	; (138c8 <ll_rx_dequeue+0x17c>)
   1379c:	484b      	ldr	r0, [pc, #300]	; (138cc <ll_rx_dequeue+0x180>)
   1379e:	f240 3377 	movw	r3, #887	; 0x377
   137a2:	f00b ffa8 	bl	1f6f6 <printk>
   137a6:	4040      	eors	r0, r0
   137a8:	f380 8811 	msr	BASEPRI, r0
   137ac:	f04f 0003 	mov.w	r0, #3
   137b0:	df02      	svc	2
}
   137b2:	b002      	add	sp, #8
   137b4:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   137b6:	7f13      	ldrb	r3, [r2, #28]
   137b8:	6895      	ldr	r5, [r2, #8]
   137ba:	2b3c      	cmp	r3, #60	; 0x3c
   137bc:	682c      	ldr	r4, [r5, #0]
   137be:	d040      	beq.n	13842 <ll_rx_dequeue+0xf6>
   137c0:	7f53      	ldrb	r3, [r2, #29]
   137c2:	b1d3      	cbz	r3, 137fa <ll_rx_dequeue+0xae>
				if (adv->node_rx_cc_free) {
   137c4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   137c6:	b120      	cbz	r0, 137d2 <ll_rx_dequeue+0x86>
					adv->node_rx_cc_free = NULL;
   137c8:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   137ca:	4941      	ldr	r1, [pc, #260]	; (138d0 <ll_rx_dequeue+0x184>)
					adv->node_rx_cc_free = NULL;
   137cc:	64a3      	str	r3, [r4, #72]	; 0x48
					mem_release(rx_free, &mem_pdu_rx.free);
   137ce:	f7fb fef3 	bl	f5b8 <mem_release>
			adv->is_enabled = 0U;
   137d2:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   137d6:	f36f 0300 	bfc	r3, #0, #1
   137da:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
			      (ull_scan_is_enabled(0) << 1)) |
   137de:	2000      	movs	r0, #0
   137e0:	f001 f9b8 	bl	14b54 <ull_scan_is_enabled>
   137e4:	4604      	mov	r4, r0
			      ull_adv_is_enabled(0));
   137e6:	2000      	movs	r0, #0
   137e8:	f000 ffe0 	bl	147ac <ull_adv_is_enabled>
			if (!bm) {
   137ec:	ea50 0044 	orrs.w	r0, r0, r4, lsl #1
   137f0:	d1d0      	bne.n	13794 <ll_rx_dequeue+0x48>
				ull_filter_adv_scan_state_cb(0);
   137f2:	f005 fabd 	bl	18d70 <ull_filter_adv_scan_state_cb>
}
   137f6:	b002      	add	sp, #8
   137f8:	bd70      	pop	{r4, r5, r6, pc}
			scan->is_enabled = 0U;
   137fa:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
   137fe:	f363 0200 	bfi	r2, r3, #0, #1
   13802:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   13806:	e7ea      	b.n	137de <ll_rx_dequeue+0x92>
	LL_ASSERT(link);
   13808:	4a2e      	ldr	r2, [pc, #184]	; (138c4 <ll_rx_dequeue+0x178>)
   1380a:	4932      	ldr	r1, [pc, #200]	; (138d4 <ll_rx_dequeue+0x188>)
   1380c:	482f      	ldr	r0, [pc, #188]	; (138cc <ll_rx_dequeue+0x180>)
   1380e:	f240 2396 	movw	r3, #662	; 0x296
   13812:	f00b ff70 	bl	1f6f6 <printk>
   13816:	4040      	eors	r0, r0
   13818:	f380 8811 	msr	BASEPRI, r0
   1381c:	f04f 0003 	mov.w	r0, #3
   13820:	df02      	svc	2
   13822:	e79f      	b.n	13764 <ll_rx_dequeue+0x18>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   13824:	4a27      	ldr	r2, [pc, #156]	; (138c4 <ll_rx_dequeue+0x178>)
   13826:	492c      	ldr	r1, [pc, #176]	; (138d8 <ll_rx_dequeue+0x18c>)
   13828:	4828      	ldr	r0, [pc, #160]	; (138cc <ll_rx_dequeue+0x180>)
   1382a:	f240 3373 	movw	r3, #883	; 0x373
   1382e:	f00b ff62 	bl	1f6f6 <printk>
   13832:	4040      	eors	r0, r0
   13834:	f380 8811 	msr	BASEPRI, r0
   13838:	f04f 0003 	mov.w	r0, #3
   1383c:	df02      	svc	2
}
   1383e:	b002      	add	sp, #8
   13840:	bd70      	pop	{r4, r5, r6, pc}
				conn_lll = lll->conn;
   13842:	68ae      	ldr	r6, [r5, #8]
				LL_ASSERT(conn_lll);
   13844:	b1ee      	cbz	r6, 13882 <ll_rx_dequeue+0x136>
				LL_ASSERT(!conn_lll->link_tx_free);
   13846:	6df3      	ldr	r3, [r6, #92]	; 0x5c
				lll->conn = NULL;
   13848:	2200      	movs	r2, #0
   1384a:	60aa      	str	r2, [r5, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
   1384c:	b163      	cbz	r3, 13868 <ll_rx_dequeue+0x11c>
   1384e:	4a1d      	ldr	r2, [pc, #116]	; (138c4 <ll_rx_dequeue+0x178>)
   13850:	4922      	ldr	r1, [pc, #136]	; (138dc <ll_rx_dequeue+0x190>)
   13852:	481e      	ldr	r0, [pc, #120]	; (138cc <ll_rx_dequeue+0x180>)
   13854:	f44f 7340 	mov.w	r3, #768	; 0x300
   13858:	f00b ff4d 	bl	1f6f6 <printk>
   1385c:	4040      	eors	r0, r0
   1385e:	f380 8811 	msr	BASEPRI, r0
   13862:	f04f 0003 	mov.w	r0, #3
   13866:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   13868:	f106 0150 	add.w	r1, r6, #80	; 0x50
   1386c:	f106 004c 	add.w	r0, r6, #76	; 0x4c
   13870:	f7fb fee2 	bl	f638 <memq_deinit>
				LL_ASSERT(link);
   13874:	4605      	mov	r5, r0
   13876:	b190      	cbz	r0, 1389e <ll_rx_dequeue+0x152>
				ll_conn_release(conn);
   13878:	6830      	ldr	r0, [r6, #0]
				conn_lll->link_tx_free = link;
   1387a:	65f5      	str	r5, [r6, #92]	; 0x5c
				ll_conn_release(conn);
   1387c:	f001 fd54 	bl	15328 <ll_conn_release>
   13880:	e7a7      	b.n	137d2 <ll_rx_dequeue+0x86>
				LL_ASSERT(conn_lll);
   13882:	4a10      	ldr	r2, [pc, #64]	; (138c4 <ll_rx_dequeue+0x178>)
   13884:	4916      	ldr	r1, [pc, #88]	; (138e0 <ll_rx_dequeue+0x194>)
   13886:	4811      	ldr	r0, [pc, #68]	; (138cc <ll_rx_dequeue+0x180>)
   13888:	f240 23fd 	movw	r3, #765	; 0x2fd
   1388c:	f00b ff33 	bl	1f6f6 <printk>
   13890:	4040      	eors	r0, r0
   13892:	f380 8811 	msr	BASEPRI, r0
   13896:	f04f 0003 	mov.w	r0, #3
   1389a:	df02      	svc	2
   1389c:	e7d3      	b.n	13846 <ll_rx_dequeue+0xfa>
				LL_ASSERT(link);
   1389e:	4a09      	ldr	r2, [pc, #36]	; (138c4 <ll_rx_dequeue+0x178>)
   138a0:	490c      	ldr	r1, [pc, #48]	; (138d4 <ll_rx_dequeue+0x188>)
   138a2:	480a      	ldr	r0, [pc, #40]	; (138cc <ll_rx_dequeue+0x180>)
   138a4:	f240 3303 	movw	r3, #771	; 0x303
   138a8:	f00b ff25 	bl	1f6f6 <printk>
   138ac:	4040      	eors	r0, r0
   138ae:	f380 8811 	msr	BASEPRI, r0
   138b2:	f04f 0003 	mov.w	r0, #3
   138b6:	df02      	svc	2
   138b8:	e7de      	b.n	13878 <ll_rx_dequeue+0x12c>
   138ba:	bf00      	nop
   138bc:	20001ac4 	.word	0x20001ac4
   138c0:	20001794 	.word	0x20001794
   138c4:	00025c00 	.word	0x00025c00
   138c8:	000259f4 	.word	0x000259f4
   138cc:	00025984 	.word	0x00025984
   138d0:	200017f0 	.word	0x200017f0
   138d4:	00025f3c 	.word	0x00025f3c
   138d8:	00025cd8 	.word	0x00025cd8
   138dc:	00025cc0 	.word	0x00025cc0
   138e0:	00025cb4 	.word	0x00025cb4

000138e4 <ll_rx_mem_release>:
{
   138e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
   138e8:	6804      	ldr	r4, [r0, #0]
	while (rx) {
   138ea:	4da8      	ldr	r5, [pc, #672]	; (13b8c <ll_rx_mem_release+0x2a8>)
{
   138ec:	b083      	sub	sp, #12
   138ee:	4683      	mov	fp, r0
	while (rx) {
   138f0:	2c00      	cmp	r4, #0
   138f2:	d048      	beq.n	13986 <ll_rx_mem_release+0xa2>
			LL_ASSERT(0);
   138f4:	4fa6      	ldr	r7, [pc, #664]	; (13b90 <ll_rx_mem_release+0x2ac>)
   138f6:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 13bc0 <ll_rx_mem_release+0x2dc>
   138fa:	4ea6      	ldr	r6, [pc, #664]	; (13b94 <ll_rx_mem_release+0x2b0>)
		rx = rx->next;
   138fc:	46a0      	mov	r8, r4
   138fe:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   13900:	f898 3004 	ldrb.w	r3, [r8, #4]
   13904:	2b17      	cmp	r3, #23
   13906:	d871      	bhi.n	139ec <ll_rx_mem_release+0x108>
   13908:	e8df f003 	tbb	[pc, r3]
   1390c:	70247024 	.word	0x70247024
   13910:	70707024 	.word	0x70707024
   13914:	70707070 	.word	0x70707070
   13918:	70707070 	.word	0x70707070
   1391c:	24810c70 	.word	0x24810c70
   13920:	24242424 	.word	0x24242424
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   13924:	f898 301c 	ldrb.w	r3, [r8, #28]
   13928:	2b3c      	cmp	r3, #60	; 0x3c
   1392a:	f000 8119 	beq.w	13b60 <ll_rx_mem_release+0x27c>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
   1392e:	2b02      	cmp	r3, #2
   13930:	f000 80d8 	beq.w	13ae4 <ll_rx_mem_release+0x200>
				LL_ASSERT(!cc->status);
   13934:	b1e3      	cbz	r3, 13970 <ll_rx_mem_release+0x8c>
   13936:	4998      	ldr	r1, [pc, #608]	; (13b98 <ll_rx_mem_release+0x2b4>)
   13938:	f240 33e1 	movw	r3, #993	; 0x3e1
   1393c:	463a      	mov	r2, r7
   1393e:	4630      	mov	r0, r6
   13940:	f00b fed9 	bl	1f6f6 <printk>
   13944:	4040      	eors	r0, r0
   13946:	f380 8811 	msr	BASEPRI, r0
   1394a:	f04f 0003 	mov.w	r0, #3
   1394e:	df02      	svc	2
   13950:	f898 3004 	ldrb.w	r3, [r8, #4]
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   13954:	b963      	cbnz	r3, 13970 <ll_rx_mem_release+0x8c>
   13956:	4991      	ldr	r1, [pc, #580]	; (13b9c <ll_rx_mem_release+0x2b8>)
   13958:	f240 4327 	movw	r3, #1063	; 0x427
   1395c:	463a      	mov	r2, r7
   1395e:	4630      	mov	r0, r6
   13960:	f00b fec9 	bl	1f6f6 <printk>
   13964:	4040      	eors	r0, r0
   13966:	f380 8811 	msr	BASEPRI, r0
   1396a:	f04f 0003 	mov.w	r0, #3
   1396e:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   13970:	782b      	ldrb	r3, [r5, #0]
   13972:	2b06      	cmp	r3, #6
   13974:	d872      	bhi.n	13a5c <ll_rx_mem_release+0x178>
	mem_link_rx.quota_pdu += delta;
   13976:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   13978:	4989      	ldr	r1, [pc, #548]	; (13ba0 <ll_rx_mem_release+0x2bc>)
	mem_link_rx.quota_pdu += delta;
   1397a:	702b      	strb	r3, [r5, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
   1397c:	4640      	mov	r0, r8
   1397e:	f7fb fe1b 	bl	f5b8 <mem_release>
	while (rx) {
   13982:	2c00      	cmp	r4, #0
   13984:	d1ba      	bne.n	138fc <ll_rx_mem_release+0x18>
	*node_rx = rx;
   13986:	2700      	movs	r7, #0
   13988:	f8cb 7000 	str.w	r7, [fp]
	while (mem_link_rx.quota_pdu &&
   1398c:	782b      	ldrb	r3, [r5, #0]
   1398e:	b353      	cbz	r3, 139e6 <ll_rx_mem_release+0x102>
   13990:	4e84      	ldr	r6, [pc, #528]	; (13ba4 <ll_rx_mem_release+0x2c0>)
		link = mem_acquire(&mem_link_rx.free);
   13992:	f8df 821c 	ldr.w	r8, [pc, #540]	; 13bb0 <ll_rx_mem_release+0x2cc>
   13996:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   13998:	f8df 9204 	ldr.w	r9, [pc, #516]	; 13ba0 <ll_rx_mem_release+0x2bc>
	if (last == count) {
   1399c:	7872      	ldrb	r2, [r6, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1399e:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   139a0:	3401      	adds	r4, #1
   139a2:	b2e4      	uxtb	r4, r4
		last = 0U;
   139a4:	42a2      	cmp	r2, r4
   139a6:	bf08      	it	eq
   139a8:	2400      	moveq	r4, #0
	if (last == first) {
   139aa:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   139ac:	4640      	mov	r0, r8
   139ae:	d068      	beq.n	13a82 <ll_rx_mem_release+0x19e>
   139b0:	f7fb fde8 	bl	f584 <mem_acquire>
   139b4:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   139b6:	4648      	mov	r0, r9
		if (!link) {
   139b8:	f1ba 0f00 	cmp.w	sl, #0
   139bc:	d061      	beq.n	13a82 <ll_rx_mem_release+0x19e>
		rx = mem_acquire(&mem_pdu_rx.free);
   139be:	f7fb fde1 	bl	f584 <mem_acquire>
		if (!rx) {
   139c2:	2800      	cmp	r0, #0
   139c4:	d059      	beq.n	13a7a <ll_rx_mem_release+0x196>
		link->mem = NULL;
   139c6:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
   139ca:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   139ce:	78f1      	ldrb	r1, [r6, #3]
   139d0:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
   139d2:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   139d4:	fb01 6202 	mla	r2, r1, r2, r6
   139d8:	3b01      	subs	r3, #1
   139da:	b2db      	uxtb	r3, r3
   139dc:	6050      	str	r0, [r2, #4]
   139de:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   139e0:	70f4      	strb	r4, [r6, #3]
	while (mem_link_rx.quota_pdu &&
   139e2:	2b00      	cmp	r3, #0
   139e4:	d1da      	bne.n	1399c <ll_rx_mem_release+0xb8>
}
   139e6:	b003      	add	sp, #12
   139e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(0);
   139ec:	f240 435b 	movw	r3, #1115	; 0x45b
   139f0:	463a      	mov	r2, r7
   139f2:	4649      	mov	r1, r9
   139f4:	4630      	mov	r0, r6
   139f6:	f00b fe7e 	bl	1f6f6 <printk>
   139fa:	4040      	eors	r0, r0
   139fc:	f380 8811 	msr	BASEPRI, r0
   13a00:	f04f 0003 	mov.w	r0, #3
   13a04:	df02      	svc	2
	while (rx) {
   13a06:	2c00      	cmp	r4, #0
   13a08:	f47f af78 	bne.w	138fc <ll_rx_mem_release+0x18>
   13a0c:	e7bb      	b.n	13986 <ll_rx_mem_release+0xa2>
			conn = ll_conn_get(rx_free->handle);
   13a0e:	f8b8 0006 	ldrh.w	r0, [r8, #6]
   13a12:	f001 fc97 	bl	15344 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   13a16:	6f83      	ldr	r3, [r0, #120]	; 0x78
			conn = ll_conn_get(rx_free->handle);
   13a18:	4680      	mov	r8, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   13a1a:	b163      	cbz	r3, 13a36 <ll_rx_mem_release+0x152>
   13a1c:	4962      	ldr	r1, [pc, #392]	; (13ba8 <ll_rx_mem_release+0x2c4>)
   13a1e:	f240 434e 	movw	r3, #1102	; 0x44e
   13a22:	463a      	mov	r2, r7
   13a24:	4630      	mov	r0, r6
   13a26:	f00b fe66 	bl	1f6f6 <printk>
   13a2a:	4040      	eors	r0, r0
   13a2c:	f380 8811 	msr	BASEPRI, r0
   13a30:	f04f 0003 	mov.w	r0, #3
   13a34:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   13a36:	f108 016c 	add.w	r1, r8, #108	; 0x6c
   13a3a:	f108 0068 	add.w	r0, r8, #104	; 0x68
   13a3e:	f7fb fdfb 	bl	f638 <memq_deinit>
			LL_ASSERT(link);
   13a42:	4682      	mov	sl, r0
   13a44:	2800      	cmp	r0, #0
   13a46:	f000 8093 	beq.w	13b70 <ll_rx_mem_release+0x28c>
			conn->lll.link_tx_free = link;
   13a4a:	f8c8 a078 	str.w	sl, [r8, #120]	; 0x78
			ll_conn_release(conn);
   13a4e:	4640      	mov	r0, r8
   13a50:	f001 fc6a 	bl	15328 <ll_conn_release>
	while (rx) {
   13a54:	2c00      	cmp	r4, #0
   13a56:	f47f af51 	bne.w	138fc <ll_rx_mem_release+0x18>
   13a5a:	e794      	b.n	13986 <ll_rx_mem_release+0xa2>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   13a5c:	4953      	ldr	r1, [pc, #332]	; (13bac <ll_rx_mem_release+0x2c8>)
   13a5e:	f240 4367 	movw	r3, #1127	; 0x467
   13a62:	463a      	mov	r2, r7
   13a64:	4630      	mov	r0, r6
   13a66:	f00b fe46 	bl	1f6f6 <printk>
   13a6a:	4040      	eors	r0, r0
   13a6c:	f380 8811 	msr	BASEPRI, r0
   13a70:	f04f 0003 	mov.w	r0, #3
   13a74:	df02      	svc	2
   13a76:	782b      	ldrb	r3, [r5, #0]
   13a78:	e77d      	b.n	13976 <ll_rx_mem_release+0x92>
			mem_release(link, &mem_link_rx.free);
   13a7a:	494d      	ldr	r1, [pc, #308]	; (13bb0 <ll_rx_mem_release+0x2cc>)
   13a7c:	4650      	mov	r0, sl
   13a7e:	f7fb fd9b 	bl	f5b8 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   13a82:	782b      	ldrb	r3, [r5, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13a84:	1e5f      	subs	r7, r3, #1
   13a86:	b2ff      	uxtb	r7, r7
   13a88:	2b00      	cmp	r3, #0
   13a8a:	d0ac      	beq.n	139e6 <ll_rx_mem_release+0x102>
   13a8c:	4e49      	ldr	r6, [pc, #292]	; (13bb4 <ll_rx_mem_release+0x2d0>)
		link = mem_acquire(&mem_link_rx.free);
   13a8e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 13bb0 <ll_rx_mem_release+0x2cc>
   13a92:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   13a94:	f8df 9108 	ldr.w	r9, [pc, #264]	; 13ba0 <ll_rx_mem_release+0x2bc>
	if (last == count) {
   13a98:	7872      	ldrb	r2, [r6, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13a9a:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   13a9c:	3401      	adds	r4, #1
   13a9e:	b2e4      	uxtb	r4, r4
		last = 0U;
   13aa0:	42a2      	cmp	r2, r4
   13aa2:	bf08      	it	eq
   13aa4:	2400      	moveq	r4, #0
	if (last == first) {
   13aa6:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   13aa8:	4640      	mov	r0, r8
   13aaa:	d09c      	beq.n	139e6 <ll_rx_mem_release+0x102>
   13aac:	f7fb fd6a 	bl	f584 <mem_acquire>
   13ab0:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13ab2:	4648      	mov	r0, r9
		if (!link) {
   13ab4:	f1ba 0f00 	cmp.w	sl, #0
   13ab8:	d095      	beq.n	139e6 <ll_rx_mem_release+0x102>
		rx = mem_acquire(&mem_pdu_rx.free);
   13aba:	f7fb fd63 	bl	f584 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13abe:	3f01      	subs	r7, #1
   13ac0:	b2ff      	uxtb	r7, r7
		if (!rx) {
   13ac2:	2800      	cmp	r0, #0
   13ac4:	f000 809a 	beq.w	13bfc <ll_rx_mem_release+0x318>
		rx->link = link;
   13ac8:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13acc:	78f1      	ldrb	r1, [r6, #3]
   13ace:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
   13ad0:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13ad2:	fb01 6202 	mla	r2, r1, r2, r6
   13ad6:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13ad8:	2fff      	cmp	r7, #255	; 0xff
   13ada:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   13adc:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   13ade:	70f4      	strb	r4, [r6, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13ae0:	d1da      	bne.n	13a98 <ll_rx_mem_release+0x1b4>
   13ae2:	e780      	b.n	139e6 <ll_rx_mem_release+0x102>
				struct ll_scan_set *scan =
   13ae4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   13ae8:	f8d3 a000 	ldr.w	sl, [r3]
				conn_lll = scan->lll.conn;
   13aec:	f8da 8024 	ldr.w	r8, [sl, #36]	; 0x24
				LL_ASSERT(conn_lll);
   13af0:	f1b8 0f00 	cmp.w	r8, #0
   13af4:	d074      	beq.n	13be0 <ll_rx_mem_release+0x2fc>
				LL_ASSERT(!conn_lll->link_tx_free);
   13af6:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
				scan->lll.conn = NULL;
   13afa:	2200      	movs	r2, #0
   13afc:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
				LL_ASSERT(!conn_lll->link_tx_free);
   13b00:	b163      	cbz	r3, 13b1c <ll_rx_mem_release+0x238>
   13b02:	492d      	ldr	r1, [pc, #180]	; (13bb8 <ll_rx_mem_release+0x2d4>)
   13b04:	f240 33ca 	movw	r3, #970	; 0x3ca
   13b08:	463a      	mov	r2, r7
   13b0a:	4630      	mov	r0, r6
   13b0c:	f00b fdf3 	bl	1f6f6 <printk>
   13b10:	4040      	eors	r0, r0
   13b12:	f380 8811 	msr	BASEPRI, r0
   13b16:	f04f 0003 	mov.w	r0, #3
   13b1a:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   13b1c:	f108 0150 	add.w	r1, r8, #80	; 0x50
   13b20:	f108 004c 	add.w	r0, r8, #76	; 0x4c
   13b24:	f7fb fd88 	bl	f638 <memq_deinit>
				LL_ASSERT(link);
   13b28:	9001      	str	r0, [sp, #4]
   13b2a:	2800      	cmp	r0, #0
   13b2c:	d04a      	beq.n	13bc4 <ll_rx_mem_release+0x2e0>
				conn_lll->link_tx_free = link;
   13b2e:	9b01      	ldr	r3, [sp, #4]
				ll_conn_release(conn);
   13b30:	f8d8 0000 	ldr.w	r0, [r8]
				conn_lll->link_tx_free = link;
   13b34:	f8c8 305c 	str.w	r3, [r8, #92]	; 0x5c
				ll_conn_release(conn);
   13b38:	f001 fbf6 	bl	15328 <ll_conn_release>
				scan->is_enabled = 0U;
   13b3c:	f89a 3048 	ldrb.w	r3, [sl, #72]	; 0x48
   13b40:	f36f 0300 	bfc	r3, #0, #1
   13b44:	f88a 3048 	strb.w	r3, [sl, #72]	; 0x48
				if (!ull_adv_is_enabled_get(0))
   13b48:	2000      	movs	r0, #0
   13b4a:	f000 fe21 	bl	14790 <ull_adv_is_enabled_get>
   13b4e:	2800      	cmp	r0, #0
   13b50:	f47f af17 	bne.w	13982 <ll_rx_mem_release+0x9e>
					ull_filter_adv_scan_state_cb(0);
   13b54:	f005 f90c 	bl	18d70 <ull_filter_adv_scan_state_cb>
	while (rx) {
   13b58:	2c00      	cmp	r4, #0
   13b5a:	f47f aecf 	bne.w	138fc <ll_rx_mem_release+0x18>
   13b5e:	e712      	b.n	13986 <ll_rx_mem_release+0xa2>
				mem_release(rx_free, &mem_pdu_rx.free);
   13b60:	490f      	ldr	r1, [pc, #60]	; (13ba0 <ll_rx_mem_release+0x2bc>)
   13b62:	4640      	mov	r0, r8
   13b64:	f7fb fd28 	bl	f5b8 <mem_release>
	while (rx) {
   13b68:	2c00      	cmp	r4, #0
   13b6a:	f47f aec7 	bne.w	138fc <ll_rx_mem_release+0x18>
   13b6e:	e70a      	b.n	13986 <ll_rx_mem_release+0xa2>
			LL_ASSERT(link);
   13b70:	4912      	ldr	r1, [pc, #72]	; (13bbc <ll_rx_mem_release+0x2d8>)
   13b72:	f240 4351 	movw	r3, #1105	; 0x451
   13b76:	463a      	mov	r2, r7
   13b78:	4630      	mov	r0, r6
   13b7a:	f00b fdbc 	bl	1f6f6 <printk>
   13b7e:	4040      	eors	r0, r0
   13b80:	f380 8811 	msr	BASEPRI, r0
   13b84:	f04f 0003 	mov.w	r0, #3
   13b88:	df02      	svc	2
   13b8a:	e75e      	b.n	13a4a <ll_rx_mem_release+0x166>
   13b8c:	20001790 	.word	0x20001790
   13b90:	00025c00 	.word	0x00025c00
   13b94:	00025984 	.word	0x00025984
   13b98:	00025cf8 	.word	0x00025cf8
   13b9c:	00025d04 	.word	0x00025d04
   13ba0:	200017f0 	.word	0x200017f0
   13ba4:	20000254 	.word	0x20000254
   13ba8:	00025d28 	.word	0x00025d28
   13bac:	00025c80 	.word	0x00025c80
   13bb0:	20001794 	.word	0x20001794
   13bb4:	20000268 	.word	0x20000268
   13bb8:	00025cc0 	.word	0x00025cc0
   13bbc:	00025f3c 	.word	0x00025f3c
   13bc0:	000259f4 	.word	0x000259f4
				LL_ASSERT(link);
   13bc4:	4911      	ldr	r1, [pc, #68]	; (13c0c <ll_rx_mem_release+0x328>)
   13bc6:	f240 33cd 	movw	r3, #973	; 0x3cd
   13bca:	463a      	mov	r2, r7
   13bcc:	4630      	mov	r0, r6
   13bce:	f00b fd92 	bl	1f6f6 <printk>
   13bd2:	4040      	eors	r0, r0
   13bd4:	f380 8811 	msr	BASEPRI, r0
   13bd8:	f04f 0003 	mov.w	r0, #3
   13bdc:	df02      	svc	2
   13bde:	e7a6      	b.n	13b2e <ll_rx_mem_release+0x24a>
				LL_ASSERT(conn_lll);
   13be0:	490b      	ldr	r1, [pc, #44]	; (13c10 <ll_rx_mem_release+0x32c>)
   13be2:	f240 33c7 	movw	r3, #967	; 0x3c7
   13be6:	463a      	mov	r2, r7
   13be8:	4630      	mov	r0, r6
   13bea:	f00b fd84 	bl	1f6f6 <printk>
   13bee:	4040      	eors	r0, r0
   13bf0:	f380 8811 	msr	BASEPRI, r0
   13bf4:	f04f 0003 	mov.w	r0, #3
   13bf8:	df02      	svc	2
   13bfa:	e77c      	b.n	13af6 <ll_rx_mem_release+0x212>
			mem_release(link, &mem_link_rx.free);
   13bfc:	4905      	ldr	r1, [pc, #20]	; (13c14 <ll_rx_mem_release+0x330>)
   13bfe:	4650      	mov	r0, sl
}
   13c00:	b003      	add	sp, #12
   13c02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   13c06:	f7fb bcd7 	b.w	f5b8 <mem_release>
   13c0a:	bf00      	nop
   13c0c:	00025f3c 	.word	0x00025f3c
   13c10:	00025cb4 	.word	0x00025cb4
   13c14:	20001794 	.word	0x20001794

00013c18 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   13c18:	4801      	ldr	r0, [pc, #4]	; (13c20 <ll_rx_link_alloc+0x8>)
   13c1a:	f7fb bcb3 	b.w	f584 <mem_acquire>
   13c1e:	bf00      	nop
   13c20:	20001794 	.word	0x20001794

00013c24 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   13c24:	4901      	ldr	r1, [pc, #4]	; (13c2c <ll_rx_link_release+0x8>)
   13c26:	f7fb bcc7 	b.w	f5b8 <mem_release>
   13c2a:	bf00      	nop
   13c2c:	20001794 	.word	0x20001794

00013c30 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   13c30:	4801      	ldr	r0, [pc, #4]	; (13c38 <ll_rx_alloc+0x8>)
   13c32:	f7fb bca7 	b.w	f584 <mem_acquire>
   13c36:	bf00      	nop
   13c38:	200017f0 	.word	0x200017f0

00013c3c <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   13c3c:	4901      	ldr	r1, [pc, #4]	; (13c44 <ll_rx_release+0x8>)
   13c3e:	f7fb bcbb 	b.w	f5b8 <mem_release>
   13c42:	bf00      	nop
   13c44:	200017f0 	.word	0x200017f0

00013c48 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13c48:	4b02      	ldr	r3, [pc, #8]	; (13c54 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13c4a:	4a03      	ldr	r2, [pc, #12]	; (13c58 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13c4c:	78db      	ldrb	r3, [r3, #3]
   13c4e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13c50:	f7fb bcfc 	b.w	f64c <memq_enqueue>
   13c54:	200003a4 	.word	0x200003a4
   13c58:	20001ac8 	.word	0x20001ac8

00013c5c <ll_rx_sched>:
	k_sem_give(sem_recv);
   13c5c:	4b01      	ldr	r3, [pc, #4]	; (13c64 <ll_rx_sched+0x8>)
   13c5e:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   13c60:	f00b b894 	b.w	1ed8c <z_impl_k_sem_give>
   13c64:	20001ad4 	.word	0x20001ad4

00013c68 <ll_pdu_rx_alloc_peek>:
{
   13c68:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   13c6a:	4b0d      	ldr	r3, [pc, #52]	; (13ca0 <ll_pdu_rx_alloc_peek+0x38>)
   13c6c:	789a      	ldrb	r2, [r3, #2]
   13c6e:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   13c70:	42a2      	cmp	r2, r4
   13c72:	d809      	bhi.n	13c88 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   13c74:	1aa1      	subs	r1, r4, r2
   13c76:	b2c9      	uxtb	r1, r1
   13c78:	4288      	cmp	r0, r1
   13c7a:	d802      	bhi.n	13c82 <ll_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   13c7c:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   13c7e:	7819      	ldrb	r1, [r3, #0]
   13c80:	d109      	bne.n	13c96 <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
   13c82:	2000      	movs	r0, #0
}
   13c84:	bc10      	pop	{r4}
   13c86:	4770      	bx	lr
		return count - first + last;
   13c88:	7859      	ldrb	r1, [r3, #1]
   13c8a:	1a89      	subs	r1, r1, r2
   13c8c:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   13c8e:	b2c9      	uxtb	r1, r1
   13c90:	4288      	cmp	r0, r1
   13c92:	d8f6      	bhi.n	13c82 <ll_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   13c94:	7819      	ldrb	r1, [r3, #0]
}
   13c96:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   13c98:	fb02 3301 	mla	r3, r2, r1, r3
   13c9c:	6858      	ldr	r0, [r3, #4]
   13c9e:	4770      	bx	lr
   13ca0:	20000254 	.word	0x20000254

00013ca4 <ll_pdu_rx_alloc>:
{
   13ca4:	b410      	push	{r4}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   13ca6:	4b0a      	ldr	r3, [pc, #40]	; (13cd0 <ll_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   13ca8:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   13caa:	78da      	ldrb	r2, [r3, #3]
   13cac:	7818      	ldrb	r0, [r3, #0]
   13cae:	785c      	ldrb	r4, [r3, #1]
   13cb0:	428a      	cmp	r2, r1
   13cb2:	d00a      	beq.n	13cca <ll_pdu_rx_alloc+0x26>
	_first += 1U;
   13cb4:	1c4a      	adds	r2, r1, #1
   13cb6:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   13cb8:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   13cbc:	4294      	cmp	r4, r2
   13cbe:	bf08      	it	eq
   13cc0:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   13cc2:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   13cc4:	709a      	strb	r2, [r3, #2]
}
   13cc6:	bc10      	pop	{r4}
   13cc8:	4770      	bx	lr
		return NULL;
   13cca:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   13ccc:	e7fb      	b.n	13cc6 <ll_pdu_rx_alloc+0x22>
   13cce:	bf00      	nop
   13cd0:	20000254 	.word	0x20000254

00013cd4 <ll_tx_ack_put>:
{
   13cd4:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   13cd6:	4a13      	ldr	r2, [pc, #76]	; (13d24 <ll_tx_ack_put+0x50>)
   13cd8:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   13cda:	7855      	ldrb	r5, [r2, #1]
   13cdc:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   13cde:	1c73      	adds	r3, r6, #1
   13ce0:	b2db      	uxtb	r3, r3
		last = 0U;
   13ce2:	429d      	cmp	r5, r3
   13ce4:	bf08      	it	eq
   13ce6:	2300      	moveq	r3, #0
	if (last == first) {
   13ce8:	429c      	cmp	r4, r3
   13cea:	d00a      	beq.n	13d02 <ll_tx_ack_put+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   13cec:	4615      	mov	r5, r2
   13cee:	f815 4b04 	ldrb.w	r4, [r5], #4
   13cf2:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   13cf6:	192e      	adds	r6, r5, r4
   13cf8:	d003      	beq.n	13d02 <ll_tx_ack_put+0x2e>
	tx->handle = handle;
   13cfa:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   13cfc:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
   13cfe:	6071      	str	r1, [r6, #4]
}
   13d00:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(tx);
   13d02:	4a09      	ldr	r2, [pc, #36]	; (13d28 <ll_tx_ack_put+0x54>)
   13d04:	4909      	ldr	r1, [pc, #36]	; (13d2c <ll_tx_ack_put+0x58>)
   13d06:	480a      	ldr	r0, [pc, #40]	; (13d30 <ll_tx_ack_put+0x5c>)
   13d08:	f240 43af 	movw	r3, #1199	; 0x4af
   13d0c:	f00b fcf3 	bl	1f6f6 <printk>
   13d10:	4040      	eors	r0, r0
   13d12:	f380 8811 	msr	BASEPRI, r0
   13d16:	f04f 0003 	mov.w	r0, #3
   13d1a:	df02      	svc	2
	tx->handle = handle;
   13d1c:	2300      	movs	r3, #0
   13d1e:	801b      	strh	r3, [r3, #0]
   13d20:	deff      	udf	#255	; 0xff
   13d22:	bf00      	nop
   13d24:	200003a4 	.word	0x200003a4
   13d28:	00025c00 	.word	0x00025c00
   13d2c:	00025f30 	.word	0x00025f30
   13d30:	00025984 	.word	0x00025984

00013d34 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13d34:	f030 0302 	bics.w	r3, r0, #2
{
   13d38:	b510      	push	{r4, lr}
   13d3a:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13d3c:	d002      	beq.n	13d44 <ull_ticker_status_take+0x10>
   13d3e:	680b      	ldr	r3, [r1, #0]
   13d40:	2b02      	cmp	r3, #2
   13d42:	d008      	beq.n	13d56 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   13d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13d4c:	4809      	ldr	r0, [pc, #36]	; (13d74 <ull_ticker_status_take+0x40>)
   13d4e:	f00b f843 	bl	1edd8 <z_impl_k_sem_take>
	return *ret_cb;
   13d52:	6820      	ldr	r0, [r4, #0]
}
   13d54:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13d56:	4a08      	ldr	r2, [pc, #32]	; (13d78 <ull_ticker_status_take+0x44>)
   13d58:	4908      	ldr	r1, [pc, #32]	; (13d7c <ull_ticker_status_take+0x48>)
   13d5a:	4809      	ldr	r0, [pc, #36]	; (13d80 <ull_ticker_status_take+0x4c>)
   13d5c:	f240 43e3 	movw	r3, #1251	; 0x4e3
   13d60:	f00b fcc9 	bl	1f6f6 <printk>
   13d64:	4040      	eors	r0, r0
   13d66:	f380 8811 	msr	BASEPRI, r0
   13d6a:	f04f 0003 	mov.w	r0, #3
   13d6e:	df02      	svc	2
   13d70:	e7e8      	b.n	13d44 <ull_ticker_status_take+0x10>
   13d72:	bf00      	nop
   13d74:	20001ad8 	.word	0x20001ad8
   13d78:	00025c00 	.word	0x00025c00
   13d7c:	00025d40 	.word	0x00025d40
   13d80:	00025984 	.word	0x00025984

00013d84 <ull_disable_mark>:
	if (!*m) {
   13d84:	4a04      	ldr	r2, [pc, #16]	; (13d98 <ull_disable_mark+0x14>)
   13d86:	6813      	ldr	r3, [r2, #0]
   13d88:	b10b      	cbz	r3, 13d8e <ull_disable_mark+0xa>
}
   13d8a:	4618      	mov	r0, r3
   13d8c:	4770      	bx	lr
		*m = param;
   13d8e:	4603      	mov	r3, r0
   13d90:	6010      	str	r0, [r2, #0]
}
   13d92:	4618      	mov	r0, r3
   13d94:	4770      	bx	lr
   13d96:	bf00      	nop
   13d98:	200016cc 	.word	0x200016cc

00013d9c <ull_disable_unmark>:
	if (*m && *m == param) {
   13d9c:	4a04      	ldr	r2, [pc, #16]	; (13db0 <ull_disable_unmark+0x14>)
   13d9e:	6813      	ldr	r3, [r2, #0]
   13da0:	b123      	cbz	r3, 13dac <ull_disable_unmark+0x10>
   13da2:	4298      	cmp	r0, r3
		*m = NULL;
   13da4:	bf06      	itte	eq
   13da6:	2100      	moveq	r1, #0
   13da8:	6011      	streq	r1, [r2, #0]
	return NULL;
   13daa:	2300      	movne	r3, #0
}
   13dac:	4618      	mov	r0, r3
   13dae:	4770      	bx	lr
   13db0:	200016cc 	.word	0x200016cc

00013db4 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   13db4:	4b01      	ldr	r3, [pc, #4]	; (13dbc <ull_disable_mark_get+0x8>)
}
   13db6:	6818      	ldr	r0, [r3, #0]
   13db8:	4770      	bx	lr
   13dba:	bf00      	nop
   13dbc:	200016cc 	.word	0x200016cc

00013dc0 <ull_update_mark>:
	if (!*m) {
   13dc0:	4a04      	ldr	r2, [pc, #16]	; (13dd4 <ull_update_mark+0x14>)
   13dc2:	6813      	ldr	r3, [r2, #0]
   13dc4:	b10b      	cbz	r3, 13dca <ull_update_mark+0xa>
}
   13dc6:	4618      	mov	r0, r3
   13dc8:	4770      	bx	lr
		*m = param;
   13dca:	4603      	mov	r3, r0
   13dcc:	6010      	str	r0, [r2, #0]
}
   13dce:	4618      	mov	r0, r3
   13dd0:	4770      	bx	lr
   13dd2:	bf00      	nop
   13dd4:	200016d0 	.word	0x200016d0

00013dd8 <ull_update_unmark>:
	if (*m && *m == param) {
   13dd8:	4a04      	ldr	r2, [pc, #16]	; (13dec <ull_update_unmark+0x14>)
   13dda:	6813      	ldr	r3, [r2, #0]
   13ddc:	b123      	cbz	r3, 13de8 <ull_update_unmark+0x10>
   13dde:	4298      	cmp	r0, r3
		*m = NULL;
   13de0:	bf06      	itte	eq
   13de2:	2100      	moveq	r1, #0
   13de4:	6011      	streq	r1, [r2, #0]
	return NULL;
   13de6:	2300      	movne	r3, #0
}
   13de8:	4618      	mov	r0, r3
   13dea:	4770      	bx	lr
   13dec:	200016d0 	.word	0x200016d0

00013df0 <ull_update_mark_get>:
	return mark_get(mark_update);
   13df0:	4b01      	ldr	r3, [pc, #4]	; (13df8 <ull_update_mark_get+0x8>)
}
   13df2:	6818      	ldr	r0, [r3, #0]
   13df4:	4770      	bx	lr
   13df6:	bf00      	nop
   13df8:	200016d0 	.word	0x200016d0

00013dfc <ull_disable>:
{
   13dfc:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   13dfe:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
   13e00:	f115 0f10 	cmn.w	r5, #16
{
   13e04:	b087      	sub	sp, #28
	if (!hdr) {
   13e06:	d00b      	beq.n	13e20 <ull_disable+0x24>
	compiler_barrier();
   13e08:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   13e0a:	2201      	movs	r2, #1
   13e0c:	4668      	mov	r0, sp
   13e0e:	2100      	movs	r1, #0
   13e10:	f010 fd1c 	bl	2484c <z_impl_k_sem_init>
   13e14:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
   13e16:	4a13      	ldr	r2, [pc, #76]	; (13e64 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   13e18:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   13e1c:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   13e1e:	b913      	cbnz	r3, 13e26 <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
   13e20:	2000      	movs	r0, #0
}
   13e22:	b007      	add	sp, #28
   13e24:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
   13e26:	4b10      	ldr	r3, [pc, #64]	; (13e68 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   13e28:	2200      	movs	r2, #0
   13e2a:	4611      	mov	r1, r2
   13e2c:	2003      	movs	r0, #3
	mfy.param = lll;
   13e2e:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   13e30:	f7fb fc80 	bl	f734 <mayfly_enqueue>
	LL_ASSERT(!ret);
   13e34:	b940      	cbnz	r0, 13e48 <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   13e36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13e3e:	4668      	mov	r0, sp
   13e40:	f00a ffca 	bl	1edd8 <z_impl_k_sem_take>
}
   13e44:	b007      	add	sp, #28
   13e46:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   13e48:	4a08      	ldr	r2, [pc, #32]	; (13e6c <ull_disable+0x70>)
   13e4a:	4909      	ldr	r1, [pc, #36]	; (13e70 <ull_disable+0x74>)
   13e4c:	4809      	ldr	r0, [pc, #36]	; (13e74 <ull_disable+0x78>)
   13e4e:	f240 5355 	movw	r3, #1365	; 0x555
   13e52:	f00b fc50 	bl	1f6f6 <printk>
   13e56:	4040      	eors	r0, r0
   13e58:	f380 8811 	msr	BASEPRI, r0
   13e5c:	f04f 0003 	mov.w	r0, #3
   13e60:	df02      	svc	2
   13e62:	e7e8      	b.n	13e36 <ull_disable+0x3a>
   13e64:	00012af1 	.word	0x00012af1
   13e68:	200003d8 	.word	0x200003d8
   13e6c:	00025c00 	.word	0x00025c00
   13e70:	00025c48 	.word	0x00025c48
   13e74:	00025984 	.word	0x00025984

00013e78 <ull_ticker_stop_with_mark>:
{
   13e78:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   13e7a:	4d1d      	ldr	r5, [pc, #116]	; (13ef0 <ull_ticker_stop_with_mark+0x78>)
   13e7c:	682b      	ldr	r3, [r5, #0]
{
   13e7e:	b085      	sub	sp, #20
   13e80:	460c      	mov	r4, r1
   13e82:	4616      	mov	r6, r2
	if (!*m) {
   13e84:	b323      	cbz	r3, 13ed0 <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
   13e86:	4299      	cmp	r1, r3
   13e88:	d112      	bne.n	13eb0 <ull_ticker_stop_with_mark+0x38>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   13e8a:	af03      	add	r7, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   13e8c:	2102      	movs	r1, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   13e8e:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   13e90:	9103      	str	r1, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   13e92:	4b18      	ldr	r3, [pc, #96]	; (13ef4 <ull_ticker_stop_with_mark+0x7c>)
   13e94:	9700      	str	r7, [sp, #0]
   13e96:	2103      	movs	r1, #3
   13e98:	2000      	movs	r0, #0
   13e9a:	f7fd f857 	bl	10f4c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   13e9e:	4639      	mov	r1, r7
   13ea0:	f7ff ff48 	bl	13d34 <ull_ticker_status_take>
	if (ret) {
   13ea4:	b140      	cbz	r0, 13eb8 <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
   13ea6:	682b      	ldr	r3, [r5, #0]
   13ea8:	b10b      	cbz	r3, 13eae <ull_ticker_stop_with_mark+0x36>
   13eaa:	429c      	cmp	r4, r3
   13eac:	d012      	beq.n	13ed4 <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
   13eae:	b1cc      	cbz	r4, 13ee4 <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
   13eb0:	f06f 0021 	mvn.w	r0, #33	; 0x21
}
   13eb4:	b005      	add	sp, #20
   13eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
   13eb8:	4630      	mov	r0, r6
   13eba:	f7ff ff9f 	bl	13dfc <ull_disable>
	if (ret) {
   13ebe:	b9a0      	cbnz	r0, 13eea <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
   13ec0:	682b      	ldr	r3, [r5, #0]
   13ec2:	b10b      	cbz	r3, 13ec8 <ull_ticker_stop_with_mark+0x50>
   13ec4:	429c      	cmp	r4, r3
   13ec6:	d00b      	beq.n	13ee0 <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
   13ec8:	2c00      	cmp	r4, #0
   13eca:	d1f1      	bne.n	13eb0 <ull_ticker_stop_with_mark+0x38>
}
   13ecc:	b005      	add	sp, #20
   13ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   13ed0:	6029      	str	r1, [r5, #0]
	if (mark != param) {
   13ed2:	e7da      	b.n	13e8a <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   13ed4:	2300      	movs	r3, #0
		return -EALREADY;
   13ed6:	f06f 0044 	mvn.w	r0, #68	; 0x44
		*m = NULL;
   13eda:	602b      	str	r3, [r5, #0]
}
   13edc:	b005      	add	sp, #20
   13ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   13ee0:	6028      	str	r0, [r5, #0]
	if (mark != param) {
   13ee2:	e7e7      	b.n	13eb4 <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
   13ee4:	f06f 0044 	mvn.w	r0, #68	; 0x44
   13ee8:	e7e4      	b.n	13eb4 <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
   13eea:	f06f 000f 	mvn.w	r0, #15
   13eee:	e7e1      	b.n	13eb4 <ull_ticker_stop_with_mark+0x3c>
   13ef0:	200016cc 	.word	0x200016cc
   13ef4:	00012ae5 	.word	0x00012ae5

00013ef8 <ull_pdu_rx_alloc_peek>:
{
   13ef8:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   13efa:	4b0d      	ldr	r3, [pc, #52]	; (13f30 <ull_pdu_rx_alloc_peek+0x38>)
   13efc:	789a      	ldrb	r2, [r3, #2]
   13efe:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   13f00:	42a2      	cmp	r2, r4
   13f02:	d809      	bhi.n	13f18 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   13f04:	1aa1      	subs	r1, r4, r2
   13f06:	b2c9      	uxtb	r1, r1
   13f08:	4288      	cmp	r0, r1
   13f0a:	d802      	bhi.n	13f12 <ull_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   13f0c:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   13f0e:	7819      	ldrb	r1, [r3, #0]
   13f10:	d109      	bne.n	13f26 <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
   13f12:	2000      	movs	r0, #0
}
   13f14:	bc10      	pop	{r4}
   13f16:	4770      	bx	lr
		return count - first + last;
   13f18:	7859      	ldrb	r1, [r3, #1]
   13f1a:	1a89      	subs	r1, r1, r2
   13f1c:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   13f1e:	b2c9      	uxtb	r1, r1
   13f20:	4288      	cmp	r0, r1
   13f22:	d8f6      	bhi.n	13f12 <ull_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   13f24:	7819      	ldrb	r1, [r3, #0]
}
   13f26:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   13f28:	fb02 3301 	mla	r3, r2, r1, r3
   13f2c:	6858      	ldr	r0, [r3, #4]
   13f2e:	4770      	bx	lr
   13f30:	20000268 	.word	0x20000268

00013f34 <ull_pdu_rx_alloc>:
{
   13f34:	b410      	push	{r4}
	return MFIFO_DEQUEUE(pdu_rx_free);
   13f36:	4b0a      	ldr	r3, [pc, #40]	; (13f60 <ull_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   13f38:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   13f3a:	78da      	ldrb	r2, [r3, #3]
   13f3c:	7818      	ldrb	r0, [r3, #0]
   13f3e:	785c      	ldrb	r4, [r3, #1]
   13f40:	428a      	cmp	r2, r1
   13f42:	d00a      	beq.n	13f5a <ull_pdu_rx_alloc+0x26>
	_first += 1U;
   13f44:	1c4a      	adds	r2, r1, #1
   13f46:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   13f48:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   13f4c:	4294      	cmp	r4, r2
   13f4e:	bf08      	it	eq
   13f50:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   13f52:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   13f54:	709a      	strb	r2, [r3, #2]
}
   13f56:	bc10      	pop	{r4}
   13f58:	4770      	bx	lr
		return NULL;
   13f5a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   13f5c:	e7fb      	b.n	13f56 <ull_pdu_rx_alloc+0x22>
   13f5e:	bf00      	nop
   13f60:	20000268 	.word	0x20000268

00013f64 <ull_rx_put>:
{
   13f64:	b538      	push	{r3, r4, r5, lr}
   13f66:	460c      	mov	r4, r1
   13f68:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   13f6a:	f003 fd09 	bl	17980 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   13f6e:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   13f70:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   13f72:	4a03      	ldr	r2, [pc, #12]	; (13f80 <ull_rx_put+0x1c>)
   13f74:	4628      	mov	r0, r5
}
   13f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   13f7a:	f7fb bb67 	b.w	f64c <memq_enqueue>
   13f7e:	bf00      	nop
   13f80:	20001ad0 	.word	0x20001ad0

00013f84 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   13f84:	2201      	movs	r2, #1
   13f86:	4b02      	ldr	r3, [pc, #8]	; (13f90 <ull_rx_sched+0xc>)
   13f88:	4611      	mov	r1, r2
   13f8a:	2000      	movs	r0, #0
   13f8c:	f7fb bbd2 	b.w	f734 <mayfly_enqueue>
   13f90:	200003e8 	.word	0x200003e8

00013f94 <ull_prepare_enqueue>:
{
   13f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   13f98:	4e19      	ldr	r6, [pc, #100]	; (14000 <ull_prepare_enqueue+0x6c>)
{
   13f9a:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   13f9e:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   13fa0:	7877      	ldrb	r7, [r6, #1]
   13fa2:	f896 c002 	ldrb.w	ip, [r6, #2]
	last = last + 1;
   13fa6:	1c65      	adds	r5, r4, #1
   13fa8:	b2ed      	uxtb	r5, r5
		last = 0U;
   13faa:	42af      	cmp	r7, r5
   13fac:	bf08      	it	eq
   13fae:	2500      	moveq	r5, #0
	if (last == first) {
   13fb0:	45ac      	cmp	ip, r5
   13fb2:	d021      	beq.n	13ff8 <ull_prepare_enqueue+0x64>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   13fb4:	4699      	mov	r9, r3
   13fb6:	4633      	mov	r3, r6
   13fb8:	460f      	mov	r7, r1
   13fba:	4611      	mov	r1, r2
   13fbc:	f813 2b04 	ldrb.w	r2, [r3], #4
   13fc0:	fb02 3404 	mla	r4, r2, r4, r3
	if (!e) {
   13fc4:	b1c4      	cbz	r4, 13ff8 <ull_prepare_enqueue+0x64>
   13fc6:	4680      	mov	r8, r0
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   13fc8:	2210      	movs	r2, #16
   13fca:	4620      	mov	r0, r4
   13fcc:	f00d fc0b 	bl	217e6 <memcpy>
	e->is_resume = is_resume;
   13fd0:	f894 2020 	ldrb.w	r2, [r4, #32]
	e->prepare_cb = prepare_cb;
   13fd4:	f8c4 9010 	str.w	r9, [r4, #16]
	e->is_resume = is_resume;
   13fd8:	f00a 0a01 	and.w	sl, sl, #1
   13fdc:	f022 0303 	bic.w	r3, r2, #3
   13fe0:	ea43 030a 	orr.w	r3, r3, sl
	e->prio = prio;
   13fe4:	9a08      	ldr	r2, [sp, #32]
   13fe6:	61e2      	str	r2, [r4, #28]
	e->abort_cb = abort_cb;
   13fe8:	e9c4 8705 	strd	r8, r7, [r4, #20]
	*last = idx; /* Commit: Update write index */
   13fec:	70f5      	strb	r5, [r6, #3]
	e->is_resume = is_resume;
   13fee:	f884 3020 	strb.w	r3, [r4, #32]
	return 0;
   13ff2:	2000      	movs	r0, #0
}
   13ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
   13ff8:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   13ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14000:	20000280 	.word	0x20000280

00014004 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   14004:	4b05      	ldr	r3, [pc, #20]	; (1401c <ull_prepare_dequeue_get+0x18>)
   14006:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   14008:	78d9      	ldrb	r1, [r3, #3]
   1400a:	7818      	ldrb	r0, [r3, #0]
   1400c:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   1400e:	bf1a      	itte	ne
   14010:	3304      	addne	r3, #4
   14012:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   14016:	2000      	moveq	r0, #0
}
   14018:	4770      	bx	lr
   1401a:	bf00      	nop
   1401c:	20000280 	.word	0x20000280

00014020 <ull_prepare_dequeue_iter>:
{
   14020:	b430      	push	{r4, r5}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   14022:	4b0c      	ldr	r3, [pc, #48]	; (14054 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
   14024:	7802      	ldrb	r2, [r0, #0]
   14026:	785c      	ldrb	r4, [r3, #1]
   14028:	78dd      	ldrb	r5, [r3, #3]
   1402a:	7819      	ldrb	r1, [r3, #0]
   1402c:	4294      	cmp	r4, r2
   1402e:	bf9c      	itt	ls
   14030:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   14032:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   14034:	4295      	cmp	r5, r2
   14036:	d00a      	beq.n	1404e <ull_prepare_dequeue_iter+0x2e>
	i = *idx + 1;
   14038:	1c53      	adds	r3, r2, #1
	p = (void *)(fifo + (*idx) * size);
   1403a:	4d07      	ldr	r5, [pc, #28]	; (14058 <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
   1403c:	b2db      	uxtb	r3, r3
		i = 0U;
   1403e:	429c      	cmp	r4, r3
   14040:	bf08      	it	eq
   14042:	2300      	moveq	r3, #0
	*idx = i;
   14044:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   14046:	fb02 5001 	mla	r0, r2, r1, r5
}
   1404a:	bc30      	pop	{r4, r5}
   1404c:	4770      	bx	lr
		return NULL;
   1404e:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   14050:	e7fb      	b.n	1404a <ull_prepare_dequeue_iter+0x2a>
   14052:	bf00      	nop
   14054:	20000280 	.word	0x20000280
   14058:	20000284 	.word	0x20000284

0001405c <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   1405c:	4b06      	ldr	r3, [pc, #24]	; (14078 <ull_event_done_extra_get+0x1c>)
   1405e:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   14060:	78d8      	ldrb	r0, [r3, #3]
   14062:	781a      	ldrb	r2, [r3, #0]
   14064:	4288      	cmp	r0, r1
   14066:	d005      	beq.n	14074 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   14068:	fb01 3302 	mla	r3, r1, r2, r3
   1406c:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   1406e:	b110      	cbz	r0, 14076 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   14070:	3020      	adds	r0, #32
   14072:	4770      	bx	lr
		return NULL;
   14074:	2000      	movs	r0, #0
}
   14076:	4770      	bx	lr
   14078:	20000240 	.word	0x20000240

0001407c <ull_event_done>:
{
   1407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	evdone = MFIFO_DEQUEUE(done);
   1407e:	4a14      	ldr	r2, [pc, #80]	; (140d0 <ull_event_done+0x54>)
	uint8_t _first = *first; /* Copy read-index */
   14080:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   14082:	78d4      	ldrb	r4, [r2, #3]
   14084:	7811      	ldrb	r1, [r2, #0]
   14086:	7855      	ldrb	r5, [r2, #1]
   14088:	429c      	cmp	r4, r3
   1408a:	d01f      	beq.n	140cc <ull_event_done+0x50>
	mem = *((void **)(fifo + _first * size));
   1408c:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   14090:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   14092:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   14094:	b2db      	uxtb	r3, r3
		_first = 0U;
   14096:	429d      	cmp	r5, r3
   14098:	bf08      	it	eq
   1409a:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1409c:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   1409e:	b19c      	cbz	r4, 140c8 <ull_event_done+0x4c>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   140a0:	2501      	movs	r5, #1
	evdone->hdr.link = NULL;
   140a2:	2600      	movs	r6, #0
	link = evdone->hdr.link;
   140a4:	6827      	ldr	r7, [r4, #0]
	evdone->param = param;
   140a6:	61e0      	str	r0, [r4, #28]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   140a8:	7125      	strb	r5, [r4, #4]
	evdone->hdr.link = NULL;
   140aa:	6026      	str	r6, [r4, #0]
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   140ac:	f003 fc68 	bl	17980 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   140b0:	4a08      	ldr	r2, [pc, #32]	; (140d4 <ull_event_done+0x58>)
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   140b2:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   140b4:	4621      	mov	r1, r4
   140b6:	4638      	mov	r0, r7
   140b8:	f7fb fac8 	bl	f64c <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   140bc:	4b06      	ldr	r3, [pc, #24]	; (140d8 <ull_event_done+0x5c>)
   140be:	4630      	mov	r0, r6
   140c0:	462a      	mov	r2, r5
   140c2:	4629      	mov	r1, r5
   140c4:	f7fb fb36 	bl	f734 <mayfly_enqueue>
}
   140c8:	4620      	mov	r0, r4
   140ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   140cc:	2400      	movs	r4, #0
   140ce:	e7fb      	b.n	140c8 <ull_event_done+0x4c>
   140d0:	20000240 	.word	0x20000240
   140d4:	20001ad0 	.word	0x20001ad0
   140d8:	200003e8 	.word	0x200003e8

000140dc <disabled_cb>:
{
   140dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   140de:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   140e0:	6c6f      	ldr	r7, [r5, #68]	; 0x44
{
   140e2:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   140e4:	b1d7      	cbz	r7, 1411c <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   140e6:	6cac      	ldr	r4, [r5, #72]	; 0x48
	adv->link_cc_free = NULL;
   140e8:	2300      	movs	r3, #0
   140ea:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
   140ec:	b34c      	cbz	r4, 14142 <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   140ee:	2100      	movs	r1, #0
	rx->hdr.handle = 0xffff;
   140f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   140f4:	2211      	movs	r2, #17
	adv->node_rx_cc_free = NULL;
   140f6:	64a9      	str	r1, [r5, #72]	; 0x48
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   140f8:	f104 001c 	add.w	r0, r4, #28
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   140fc:	7122      	strb	r2, [r4, #4]
	rx->hdr.handle = 0xffff;
   140fe:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   14100:	221e      	movs	r2, #30
   14102:	f00d fb9b 	bl	2183c <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   14106:	233c      	movs	r3, #60	; 0x3c
	rx->hdr.rx_ftr.param = param;
   14108:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   1410a:	4638      	mov	r0, r7
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   1410c:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
   1410e:	4621      	mov	r1, r4
   14110:	f7ff fd9a 	bl	13c48 <ll_rx_put>
}
   14114:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   14118:	f7ff bda0 	b.w	13c5c <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   1411c:	4a10      	ldr	r2, [pc, #64]	; (14160 <disabled_cb+0x84>)
   1411e:	4911      	ldr	r1, [pc, #68]	; (14164 <disabled_cb+0x88>)
   14120:	4811      	ldr	r0, [pc, #68]	; (14168 <disabled_cb+0x8c>)
   14122:	f240 63fa 	movw	r3, #1786	; 0x6fa
   14126:	f00b fae6 	bl	1f6f6 <printk>
   1412a:	4040      	eors	r0, r0
   1412c:	f380 8811 	msr	BASEPRI, r0
   14130:	f04f 0003 	mov.w	r0, #3
   14134:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   14136:	6cac      	ldr	r4, [r5, #72]	; 0x48
   14138:	6c6f      	ldr	r7, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
   1413a:	2300      	movs	r3, #0
   1413c:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
   1413e:	2c00      	cmp	r4, #0
   14140:	d1d5      	bne.n	140ee <disabled_cb+0x12>
   14142:	4a07      	ldr	r2, [pc, #28]	; (14160 <disabled_cb+0x84>)
   14144:	4909      	ldr	r1, [pc, #36]	; (1416c <disabled_cb+0x90>)
   14146:	4808      	ldr	r0, [pc, #32]	; (14168 <disabled_cb+0x8c>)
   14148:	f240 63fe 	movw	r3, #1790	; 0x6fe
   1414c:	f00b fad3 	bl	1f6f6 <printk>
   14150:	4040      	eors	r0, r0
   14152:	f380 8811 	msr	BASEPRI, r0
   14156:	f04f 0003 	mov.w	r0, #3
   1415a:	df02      	svc	2
   1415c:	6cac      	ldr	r4, [r5, #72]	; 0x48
   1415e:	e7c6      	b.n	140ee <disabled_cb+0x12>
   14160:	00025d6c 	.word	0x00025d6c
   14164:	00025dac 	.word	0x00025dac
   14168:	00025984 	.word	0x00025984
   1416c:	00025dc0 	.word	0x00025dc0

00014170 <ticker_cb>:
{
   14170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14174:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   14176:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1417a:	4295      	cmp	r5, r2
{
   1417c:	b08a      	sub	sp, #40	; 0x28
   1417e:	461c      	mov	r4, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   14180:	d018      	beq.n	141b4 <ticker_cb+0x44>
	return ++hdr->ref;
   14182:	7c1b      	ldrb	r3, [r3, #16]
   14184:	3301      	adds	r3, #1
   14186:	b2db      	uxtb	r3, r3
   14188:	4680      	mov	r8, r0
   1418a:	460f      	mov	r7, r1
   1418c:	7423      	strb	r3, [r4, #16]
		LL_ASSERT(ref);
   1418e:	2b00      	cmp	r3, #0
   14190:	d061      	beq.n	14256 <ticker_cb+0xe6>
		p.ticks_at_expire = ticks_at_expire;
   14192:	4e38      	ldr	r6, [pc, #224]	; (14274 <ticker_cb+0x104>)
		mfy.param = &p;
   14194:	4b38      	ldr	r3, [pc, #224]	; (14278 <ticker_cb+0x108>)
		p.ticks_at_expire = ticks_at_expire;
   14196:	f8c6 8000 	str.w	r8, [r6]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1419a:	2200      	movs	r2, #0
	lll = &adv->lll;
   1419c:	f104 0c1c 	add.w	ip, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   141a0:	4611      	mov	r1, r2
   141a2:	2001      	movs	r0, #1
		mfy.param = &p;
   141a4:	609e      	str	r6, [r3, #8]
		p.remainder = remainder;
   141a6:	6077      	str	r7, [r6, #4]
		p.lazy = lazy;
   141a8:	8135      	strh	r5, [r6, #8]
		p.param = lll;
   141aa:	f8c6 c00c 	str.w	ip, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   141ae:	f7fb fac1 	bl	f734 <mayfly_enqueue>
		LL_ASSERT(!ret);
   141b2:	b938      	cbnz	r0, 141c4 <ticker_cb+0x54>
	if (!lll->is_hdcd)
   141b4:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   141b8:	f015 0501 	ands.w	r5, r5, #1
   141bc:	d014      	beq.n	141e8 <ticker_cb+0x78>
}
   141be:	b00a      	add	sp, #40	; 0x28
   141c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   141c4:	4a2d      	ldr	r2, [pc, #180]	; (1427c <ticker_cb+0x10c>)
   141c6:	492e      	ldr	r1, [pc, #184]	; (14280 <ticker_cb+0x110>)
   141c8:	482e      	ldr	r0, [pc, #184]	; (14284 <ticker_cb+0x114>)
   141ca:	f240 637a 	movw	r3, #1658	; 0x67a
   141ce:	f00b fa92 	bl	1f6f6 <printk>
   141d2:	4040      	eors	r0, r0
   141d4:	f380 8811 	msr	BASEPRI, r0
   141d8:	f04f 0003 	mov.w	r0, #3
   141dc:	df02      	svc	2
	if (!lll->is_hdcd)
   141de:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   141e2:	f015 0501 	ands.w	r5, r5, #1
   141e6:	d1ea      	bne.n	141be <ticker_cb+0x4e>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   141e8:	2104      	movs	r1, #4
   141ea:	a809      	add	r0, sp, #36	; 0x24
   141ec:	f005 fe30 	bl	19e50 <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   141f0:	9809      	ldr	r0, [sp, #36]	; 0x24
   141f2:	4925      	ldr	r1, [pc, #148]	; (14288 <ticker_cb+0x118>)
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   141f4:	4a25      	ldr	r2, [pc, #148]	; (1428c <ticker_cb+0x11c>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   141f6:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   141f8:	fba1 3100 	umull	r3, r1, r1, r0
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   141fc:	1aa2      	subs	r2, r4, r2
   141fe:	4c24      	ldr	r4, [pc, #144]	; (14290 <ticker_cb+0x120>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14200:	9504      	str	r5, [sp, #16]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   14202:	1a43      	subs	r3, r0, r1
   14204:	eb01 0353 	add.w	r3, r1, r3, lsr #1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14208:	fba4 4202 	umull	r4, r2, r4, r2
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1420c:	f240 1147 	movw	r1, #327	; 0x147
   14210:	0a1b      	lsrs	r3, r3, #8
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14212:	0992      	lsrs	r2, r2, #6
		random_delay %= ULL_ADV_RANDOM_DELAY;
   14214:	fb01 0313 	mls	r3, r1, r3, r0
				    (TICKER_ID_ADV_BASE +
   14218:	3202      	adds	r2, #2
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1421a:	491e      	ldr	r1, [pc, #120]	; (14294 <ticker_cb+0x124>)
   1421c:	9105      	str	r1, [sp, #20]
		random_delay += 1;
   1421e:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14220:	e9cd 5502 	strd	r5, r5, [sp, #8]
   14224:	e9cd 5500 	strd	r5, r5, [sp]
   14228:	4628      	mov	r0, r5
   1422a:	b2d2      	uxtb	r2, r2
   1422c:	2101      	movs	r1, #1
		random_delay += 1;
   1422e:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14230:	f7fc fe3c 	bl	10eac <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14234:	f030 0302 	bics.w	r3, r0, #2
   14238:	d0c1      	beq.n	141be <ticker_cb+0x4e>
   1423a:	4a10      	ldr	r2, [pc, #64]	; (1427c <ticker_cb+0x10c>)
   1423c:	4916      	ldr	r1, [pc, #88]	; (14298 <ticker_cb+0x128>)
   1423e:	4811      	ldr	r0, [pc, #68]	; (14284 <ticker_cb+0x114>)
   14240:	f44f 63d2 	mov.w	r3, #1680	; 0x690
   14244:	f00b fa57 	bl	1f6f6 <printk>
   14248:	4040      	eors	r0, r0
   1424a:	f380 8811 	msr	BASEPRI, r0
   1424e:	f04f 0003 	mov.w	r0, #3
   14252:	df02      	svc	2
}
   14254:	e7b3      	b.n	141be <ticker_cb+0x4e>
		LL_ASSERT(ref);
   14256:	4a09      	ldr	r2, [pc, #36]	; (1427c <ticker_cb+0x10c>)
   14258:	4910      	ldr	r1, [pc, #64]	; (1429c <ticker_cb+0x12c>)
   1425a:	480a      	ldr	r0, [pc, #40]	; (14284 <ticker_cb+0x114>)
   1425c:	f240 636e 	movw	r3, #1646	; 0x66e
   14260:	f00b fa49 	bl	1f6f6 <printk>
   14264:	4040      	eors	r0, r0
   14266:	f380 8811 	msr	BASEPRI, r0
   1426a:	f04f 0003 	mov.w	r0, #3
   1426e:	df02      	svc	2
   14270:	e78f      	b.n	14192 <ticker_cb+0x22>
   14272:	bf00      	nop
   14274:	20001ee0 	.word	0x20001ee0
   14278:	20000408 	.word	0x20000408
   1427c:	00025d6c 	.word	0x00025d6c
   14280:	00025c48 	.word	0x00025c48
   14284:	00025984 	.word	0x00025984
   14288:	90d4f121 	.word	0x90d4f121
   1428c:	20001e7c 	.word	0x20001e7c
   14290:	ba2e8ba3 	.word	0xba2e8ba3
   14294:	00014345 	.word	0x00014345
   14298:	00025ddc 	.word	0x00025ddc
   1429c:	00025dd8 	.word	0x00025dd8

000142a0 <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   142a0:	2800      	cmp	r0, #0
   142a2:	d132      	bne.n	1430a <ticker_op_stop_cb+0x6a>
{
   142a4:	b538      	push	{r3, r4, r5, lr}
   142a6:	460c      	mov	r4, r1
	mfy.param = &adv->lll;
   142a8:	4d1f      	ldr	r5, [pc, #124]	; (14328 <ticker_op_stop_cb+0x88>)
	return hdr->ref;
   142aa:	7c09      	ldrb	r1, [r1, #16]
   142ac:	f104 031c 	add.w	r3, r4, #28
   142b0:	60ab      	str	r3, [r5, #8]
	if (ull_ref_get(hdr)) {
   142b2:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   142b6:	b1e1      	cbz	r1, 142f2 <ticker_op_stop_cb+0x52>
		LL_ASSERT(!hdr->disabled_cb);
   142b8:	6962      	ldr	r2, [r4, #20]
   142ba:	b16a      	cbz	r2, 142d8 <ticker_op_stop_cb+0x38>
   142bc:	4a1b      	ldr	r2, [pc, #108]	; (1432c <ticker_op_stop_cb+0x8c>)
   142be:	491c      	ldr	r1, [pc, #112]	; (14330 <ticker_op_stop_cb+0x90>)
   142c0:	481c      	ldr	r0, [pc, #112]	; (14334 <ticker_op_stop_cb+0x94>)
   142c2:	f240 63e1 	movw	r3, #1761	; 0x6e1
   142c6:	f00b fa16 	bl	1f6f6 <printk>
   142ca:	4040      	eors	r0, r0
   142cc:	f380 8811 	msr	BASEPRI, r0
   142d0:	f04f 0003 	mov.w	r0, #3
   142d4:	df02      	svc	2
   142d6:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   142d8:	4917      	ldr	r1, [pc, #92]	; (14338 <ticker_op_stop_cb+0x98>)
		mfy.fp = lll_disable;
   142da:	4818      	ldr	r0, [pc, #96]	; (1433c <ticker_op_stop_cb+0x9c>)
		hdr->disabled_param = mfy.param;
   142dc:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   142de:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   142e0:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
   142e2:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   142e4:	4b10      	ldr	r3, [pc, #64]	; (14328 <ticker_op_stop_cb+0x88>)
   142e6:	4611      	mov	r1, r2
   142e8:	2002      	movs	r0, #2
   142ea:	f7fb fa23 	bl	f734 <mayfly_enqueue>
		LL_ASSERT(!ret);
   142ee:	b968      	cbnz	r0, 1430c <ticker_op_stop_cb+0x6c>
}
   142f0:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
   142f2:	4b11      	ldr	r3, [pc, #68]	; (14338 <ticker_op_stop_cb+0x98>)
   142f4:	60eb      	str	r3, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   142f6:	2101      	movs	r1, #1
   142f8:	462b      	mov	r3, r5
   142fa:	2002      	movs	r0, #2
   142fc:	f7fb fa1a 	bl	f734 <mayfly_enqueue>
		LL_ASSERT(!ret);
   14300:	2800      	cmp	r0, #0
   14302:	d0f5      	beq.n	142f0 <ticker_op_stop_cb+0x50>
   14304:	f240 63ed 	movw	r3, #1773	; 0x6ed
   14308:	e002      	b.n	14310 <ticker_op_stop_cb+0x70>
   1430a:	4770      	bx	lr
		LL_ASSERT(!ret);
   1430c:	f44f 63dd 	mov.w	r3, #1768	; 0x6e8
		LL_ASSERT(!ret);
   14310:	4a06      	ldr	r2, [pc, #24]	; (1432c <ticker_op_stop_cb+0x8c>)
   14312:	490b      	ldr	r1, [pc, #44]	; (14340 <ticker_op_stop_cb+0xa0>)
   14314:	4807      	ldr	r0, [pc, #28]	; (14334 <ticker_op_stop_cb+0x94>)
   14316:	f00b f9ee 	bl	1f6f6 <printk>
   1431a:	4040      	eors	r0, r0
   1431c:	f380 8811 	msr	BASEPRI, r0
   14320:	f04f 0003 	mov.w	r0, #3
   14324:	df02      	svc	2
}
   14326:	bd38      	pop	{r3, r4, r5, pc}
   14328:	20000418 	.word	0x20000418
   1432c:	00025d6c 	.word	0x00025d6c
   14330:	00025df8 	.word	0x00025df8
   14334:	00025984 	.word	0x00025984
   14338:	000140dd 	.word	0x000140dd
   1433c:	00019ebd 	.word	0x00019ebd
   14340:	00025c48 	.word	0x00025c48

00014344 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14344:	b900      	cbnz	r0, 14348 <ticker_op_update_cb+0x4>
   14346:	4770      	bx	lr
{
   14348:	b510      	push	{r4, lr}
   1434a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1434c:	f7ff fd32 	bl	13db4 <ull_disable_mark_get>
   14350:	4284      	cmp	r4, r0
   14352:	d00c      	beq.n	1436e <ticker_op_update_cb+0x2a>
   14354:	4a06      	ldr	r2, [pc, #24]	; (14370 <ticker_op_update_cb+0x2c>)
   14356:	4907      	ldr	r1, [pc, #28]	; (14374 <ticker_op_update_cb+0x30>)
   14358:	4807      	ldr	r0, [pc, #28]	; (14378 <ticker_op_update_cb+0x34>)
   1435a:	f240 63b1 	movw	r3, #1713	; 0x6b1
   1435e:	f00b f9ca 	bl	1f6f6 <printk>
   14362:	4040      	eors	r0, r0
   14364:	f380 8811 	msr	BASEPRI, r0
   14368:	f04f 0003 	mov.w	r0, #3
   1436c:	df02      	svc	2
}
   1436e:	bd10      	pop	{r4, pc}
   14370:	00025d6c 	.word	0x00025d6c
   14374:	00025e0c 	.word	0x00025e0c
   14378:	00025984 	.word	0x00025984

0001437c <ticker_stop_cb>:
{
   1437c:	b530      	push	{r4, r5, lr}
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1437e:	491a      	ldr	r1, [pc, #104]	; (143e8 <ticker_stop_cb+0x6c>)
   14380:	4a1a      	ldr	r2, [pc, #104]	; (143ec <ticker_stop_cb+0x70>)
   14382:	1a59      	subs	r1, r3, r1
{
   14384:	461c      	mov	r4, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14386:	fba2 3101 	umull	r3, r1, r2, r1
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1438a:	f411 5f7f 	tst.w	r1, #16320	; 0x3fc0
{
   1438e:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14390:	ea4f 1591 	mov.w	r5, r1, lsr #6
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   14394:	d119      	bne.n	143ca <ticker_stop_cb+0x4e>
			  TICKER_ID_ADV_BASE + handle,
   14396:	1caa      	adds	r2, r5, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   14398:	4b15      	ldr	r3, [pc, #84]	; (143f0 <ticker_stop_cb+0x74>)
   1439a:	9400      	str	r4, [sp, #0]
   1439c:	b2d2      	uxtb	r2, r2
   1439e:	2101      	movs	r1, #1
   143a0:	2000      	movs	r0, #0
   143a2:	f7fc fdd3 	bl	10f4c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   143a6:	f030 0302 	bics.w	r3, r0, #2
   143aa:	d00c      	beq.n	143c6 <ticker_stop_cb+0x4a>
   143ac:	4a11      	ldr	r2, [pc, #68]	; (143f4 <ticker_stop_cb+0x78>)
   143ae:	4912      	ldr	r1, [pc, #72]	; (143f8 <ticker_stop_cb+0x7c>)
   143b0:	4812      	ldr	r0, [pc, #72]	; (143fc <ticker_stop_cb+0x80>)
   143b2:	f240 63c3 	movw	r3, #1731	; 0x6c3
   143b6:	f00b f99e 	bl	1f6f6 <printk>
   143ba:	4040      	eors	r0, r0
   143bc:	f380 8811 	msr	BASEPRI, r0
   143c0:	f04f 0003 	mov.w	r0, #3
   143c4:	df02      	svc	2
}
   143c6:	b003      	add	sp, #12
   143c8:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   143ca:	4a0a      	ldr	r2, [pc, #40]	; (143f4 <ticker_stop_cb+0x78>)
   143cc:	490c      	ldr	r1, [pc, #48]	; (14400 <ticker_stop_cb+0x84>)
   143ce:	480b      	ldr	r0, [pc, #44]	; (143fc <ticker_stop_cb+0x80>)
   143d0:	f240 63be 	movw	r3, #1726	; 0x6be
   143d4:	f00b f98f 	bl	1f6f6 <printk>
   143d8:	4040      	eors	r0, r0
   143da:	f380 8811 	msr	BASEPRI, r0
   143de:	f04f 0003 	mov.w	r0, #3
   143e2:	df02      	svc	2
   143e4:	e7d7      	b.n	14396 <ticker_stop_cb+0x1a>
   143e6:	bf00      	nop
   143e8:	20001e7c 	.word	0x20001e7c
   143ec:	ba2e8ba3 	.word	0xba2e8ba3
   143f0:	000142a1 	.word	0x000142a1
   143f4:	00025d6c 	.word	0x00025d6c
   143f8:	00025ddc 	.word	0x00025ddc
   143fc:	00025984 	.word	0x00025984
   14400:	00025e3c 	.word	0x00025e3c

00014404 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   14404:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   14406:	4c1b      	ldr	r4, [pc, #108]	; (14474 <conn_release.constprop.0+0x70>)
   14408:	6a65      	ldr	r5, [r4, #36]	; 0x24
	LL_ASSERT(!lll->link_tx_free);
   1440a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1440c:	b163      	cbz	r3, 14428 <conn_release.constprop.0+0x24>
   1440e:	4a1a      	ldr	r2, [pc, #104]	; (14478 <conn_release.constprop.0+0x74>)
   14410:	491a      	ldr	r1, [pc, #104]	; (1447c <conn_release.constprop.0+0x78>)
   14412:	481b      	ldr	r0, [pc, #108]	; (14480 <conn_release.constprop.0+0x7c>)
   14414:	f44f 63e5 	mov.w	r3, #1832	; 0x728
   14418:	f00b f96d 	bl	1f6f6 <printk>
   1441c:	4040      	eors	r0, r0
   1441e:	f380 8811 	msr	BASEPRI, r0
   14422:	f04f 0003 	mov.w	r0, #3
   14426:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   14428:	f105 0150 	add.w	r1, r5, #80	; 0x50
   1442c:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   14430:	f7fb f902 	bl	f638 <memq_deinit>
	LL_ASSERT(link);
   14434:	4606      	mov	r6, r0
   14436:	b170      	cbz	r0, 14456 <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   14438:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   1443a:	65ee      	str	r6, [r5, #92]	; 0x5c
	ll_conn_release(lll->hdr.parent);
   1443c:	f000 ff74 	bl	15328 <ll_conn_release>
	adv->lll.conn = NULL;
   14440:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   14442:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	adv->lll.conn = NULL;
   14444:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
   14446:	f7ff fbf9 	bl	13c3c <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   1444a:	6c60      	ldr	r0, [r4, #68]	; 0x44
	adv->node_rx_cc_free = NULL;
   1444c:	64a5      	str	r5, [r4, #72]	; 0x48
	ll_rx_link_release(adv->link_cc_free);
   1444e:	f7ff fbe9 	bl	13c24 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   14452:	6465      	str	r5, [r4, #68]	; 0x44
}
   14454:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   14456:	4a08      	ldr	r2, [pc, #32]	; (14478 <conn_release.constprop.0+0x74>)
   14458:	490a      	ldr	r1, [pc, #40]	; (14484 <conn_release.constprop.0+0x80>)
   1445a:	4809      	ldr	r0, [pc, #36]	; (14480 <conn_release.constprop.0+0x7c>)
   1445c:	f240 732a 	movw	r3, #1834	; 0x72a
   14460:	f00b f949 	bl	1f6f6 <printk>
   14464:	4040      	eors	r0, r0
   14466:	f380 8811 	msr	BASEPRI, r0
   1446a:	f04f 0003 	mov.w	r0, #3
   1446e:	df02      	svc	2
   14470:	e7e2      	b.n	14438 <conn_release.constprop.0+0x34>
   14472:	bf00      	nop
   14474:	20001e7c 	.word	0x20001e7c
   14478:	00025d6c 	.word	0x00025d6c
   1447c:	00025e48 	.word	0x00025e48
   14480:	00025984 	.word	0x00025984
   14484:	00025f3c 	.word	0x00025f3c

00014488 <ll_adv_params_set>:
{
   14488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1448c:	4d4b      	ldr	r5, [pc, #300]	; (145bc <ll_adv_params_set+0x134>)
	if (!adv || adv->is_enabled) {
   1448e:	4c4c      	ldr	r4, [pc, #304]	; (145c0 <ll_adv_params_set+0x138>)
{
   14490:	4684      	mov	ip, r0
	if (!adv || adv->is_enabled) {
   14492:	f894 704e 	ldrb.w	r7, [r4, #78]	; 0x4e
{
   14496:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14498:	e895 0003 	ldmia.w	r5, {r0, r1}
{
   1449c:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
   1449e:	f017 0701 	ands.w	r7, r7, #1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   144a2:	9000      	str	r0, [sp, #0]
{
   144a4:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
   144a8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   144ac:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   144b0:	d170      	bne.n	14594 <ll_adv_params_set+0x10c>
	if (adv_type != 0x01) {
   144b2:	4699      	mov	r9, r3
   144b4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   144b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu->type = pdu_adv_type[adv_type];
   144bc:	a902      	add	r1, sp, #8
   144be:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   144c2:	4471      	add	r1, lr
	adv->lll.chan_map = chan_map;
   144c4:	f006 0607 	and.w	r6, r6, #7
   144c8:	0076      	lsls	r6, r6, #1
   144ca:	f000 0003 	and.w	r0, r0, #3
	pdu->type = pdu_adv_type[adv_type];
   144ce:	f811 3c08 	ldrb.w	r3, [r1, #-8]
   144d2:	f898 1000 	ldrb.w	r1, [r8]
   144d6:	4615      	mov	r5, r2
	adv->lll.chan_map = chan_map;
   144d8:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
   144dc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   144de:	4e39      	ldr	r6, [pc, #228]	; (145c4 <ll_adv_params_set+0x13c>)
		adv->interval = 0;
   144e0:	f1be 0f01 	cmp.w	lr, #1
	pdu->type = pdu_adv_type[adv_type];
   144e4:	f021 011f 	bic.w	r1, r1, #31
		adv->interval = 0;
   144e8:	bf08      	it	eq
   144ea:	f04f 0c00 	moveq.w	ip, #0
	adv->lll.chan_map = chan_map;
   144ee:	4016      	ands	r6, r2
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   144f0:	f013 0f0e 	tst.w	r3, #14
	adv->own_addr_type = own_addr_type;
   144f4:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
   144f8:	f8a4 c04c 	strh.w	ip, [r4, #76]	; 0x4c
	pdu->type = pdu_adv_type[adv_type];
   144fc:	f003 030f 	and.w	r3, r3, #15
   14500:	ea43 0301 	orr.w	r3, r3, r1
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   14504:	bf0c      	ite	eq
   14506:	2101      	moveq	r1, #1
   14508:	2100      	movne	r1, #0
   1450a:	f361 1345 	bfi	r3, r1, #5, #1
	adv->own_addr_type = own_addr_type;
   1450e:	f365 0242 	bfi	r2, r5, #1, #2
	adv->lll.chan_map = chan_map;
   14512:	4330      	orrs	r0, r6
   14514:	8520      	strh	r0, [r4, #40]	; 0x28
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   14516:	f888 3000 	strb.w	r3, [r8]
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1451a:	0753      	lsls	r3, r2, #29
   1451c:	b2d1      	uxtb	r1, r2
	adv->own_addr_type = own_addr_type;
   1451e:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   14522:	d50a      	bpl.n	1453a <ll_adv_params_set+0xb2>
		adv->id_addr_type = direct_addr_type;
   14524:	460b      	mov	r3, r1
   14526:	f369 03c3 	bfi	r3, r9, #3, #1
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   1452a:	990a      	ldr	r1, [sp, #40]	; 0x28
		adv->id_addr_type = direct_addr_type;
   1452c:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   14530:	2206      	movs	r2, #6
   14532:	f104 004f 	add.w	r0, r4, #79	; 0x4f
   14536:	f00d f956 	bl	217e6 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1453a:	f898 2000 	ldrb.w	r2, [r8]
   1453e:	f002 030f 	and.w	r3, r2, #15
   14542:	2b01      	cmp	r3, #1
   14544:	f005 0101 	and.w	r1, r5, #1
   14548:	d029      	beq.n	1459e <ll_adv_params_set+0x116>
	} else if (pdu->len == 0) {
   1454a:	f898 3001 	ldrb.w	r3, [r8, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   1454e:	f361 1286 	bfi	r2, r1, #6, #1
	} else if (pdu->len == 0) {
   14552:	b1bb      	cbz	r3, 14584 <ll_adv_params_set+0xfc>
		pdu->rx_addr = 0;
   14554:	f36f 12c7 	bfc	r2, #7, #1
   14558:	f888 2000 	strb.w	r2, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1455c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   14560:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   14564:	01ad      	lsls	r5, r5, #6
   14566:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14568:	f005 0540 	and.w	r5, r5, #64	; 0x40
		if (pdu->len == 0) {
   1456c:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1456e:	f045 0504 	orr.w	r5, r5, #4
   14572:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   14574:	b912      	cbnz	r2, 1457c <ll_adv_params_set+0xf4>
			pdu->len = BDADDR_SIZE;
   14576:	2106      	movs	r1, #6
	return 0;
   14578:	4617      	mov	r7, r2
			pdu->len = BDADDR_SIZE;
   1457a:	7059      	strb	r1, [r3, #1]
}
   1457c:	4638      	mov	r0, r7
   1457e:	b003      	add	sp, #12
   14580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->rx_addr = 0;
   14584:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu->len = BDADDR_SIZE;
   14588:	2306      	movs	r3, #6
		pdu->rx_addr = 0;
   1458a:	f888 2000 	strb.w	r2, [r8]
		pdu->len = BDADDR_SIZE;
   1458e:	f888 3001 	strb.w	r3, [r8, #1]
   14592:	e7e3      	b.n	1455c <ll_adv_params_set+0xd4>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14594:	270c      	movs	r7, #12
}
   14596:	4638      	mov	r0, r7
   14598:	b003      	add	sp, #12
   1459a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   1459e:	f361 1286 	bfi	r2, r1, #6, #1
		pdu->rx_addr = direct_addr_type;
   145a2:	4640      	mov	r0, r8
   145a4:	f369 12c7 	bfi	r2, r9, #7, #1
   145a8:	f800 2b08 	strb.w	r2, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   145ac:	990a      	ldr	r1, [sp, #40]	; 0x28
   145ae:	2206      	movs	r2, #6
   145b0:	f00d f919 	bl	217e6 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   145b4:	230c      	movs	r3, #12
   145b6:	f888 3001 	strb.w	r3, [r8, #1]
   145ba:	e7cf      	b.n	1455c <ll_adv_params_set+0xd4>
   145bc:	000251d4 	.word	0x000251d4
   145c0:	20001e7c 	.word	0x20001e7c
   145c4:	fffffcf1 	.word	0xfffffcf1

000145c8 <ull_adv_init>:
{
   145c8:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   145ca:	4c05      	ldr	r4, [pc, #20]	; (145e0 <ull_adv_init+0x18>)
   145cc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   145d0:	f005 ff5a 	bl	1a488 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   145d4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   145d8:	f005 ff56 	bl	1a488 <lll_adv_data_init>
}
   145dc:	2000      	movs	r0, #0
   145de:	bd10      	pop	{r4, pc}
   145e0:	20001e7c 	.word	0x20001e7c

000145e4 <ull_adv_reset>:
{
   145e4:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
   145e6:	4c4b      	ldr	r4, [pc, #300]	; (14714 <ull_adv_reset+0x130>)
   145e8:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   145ec:	07da      	lsls	r2, r3, #31
{
   145ee:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
   145f0:	d549      	bpl.n	14686 <ull_adv_reset+0xa2>
	mark = ull_disable_mark(adv);
   145f2:	4620      	mov	r0, r4
   145f4:	f7ff fbc6 	bl	13d84 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   145f8:	4284      	cmp	r4, r0
   145fa:	d00c      	beq.n	14616 <ull_adv_reset+0x32>
   145fc:	4a46      	ldr	r2, [pc, #280]	; (14718 <ull_adv_reset+0x134>)
   145fe:	4947      	ldr	r1, [pc, #284]	; (1471c <ull_adv_reset+0x138>)
   14600:	4847      	ldr	r0, [pc, #284]	; (14720 <ull_adv_reset+0x13c>)
   14602:	f240 737d 	movw	r3, #1917	; 0x77d
   14606:	f00b f876 	bl	1f6f6 <printk>
   1460a:	4040      	eors	r0, r0
   1460c:	f380 8811 	msr	BASEPRI, r0
   14610:	f04f 0003 	mov.w	r0, #3
   14614:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   14616:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1461a:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1461c:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   1461e:	d435      	bmi.n	1468c <ull_adv_reset+0xa8>
	ret_cb = TICKER_STATUS_BUSY;
   14620:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14622:	2103      	movs	r1, #3
   14624:	4b3f      	ldr	r3, [pc, #252]	; (14724 <ull_adv_reset+0x140>)
   14626:	9500      	str	r5, [sp, #0]
   14628:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   1462a:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1462c:	f7fc fc8e 	bl	10f4c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   14630:	4629      	mov	r1, r5
   14632:	f7ff fb7f 	bl	13d34 <ull_ticker_status_take>
	if (ret) {
   14636:	2800      	cmp	r0, #0
   14638:	d151      	bne.n	146de <ull_adv_reset+0xfa>
	ret = ull_disable(&adv->lll);
   1463a:	483b      	ldr	r0, [pc, #236]	; (14728 <ull_adv_reset+0x144>)
   1463c:	f7ff fbde 	bl	13dfc <ull_disable>
	LL_ASSERT(!ret);
   14640:	2800      	cmp	r0, #0
   14642:	d139      	bne.n	146b8 <ull_adv_reset+0xd4>
	mark = ull_disable_unmark(adv);
   14644:	4833      	ldr	r0, [pc, #204]	; (14714 <ull_adv_reset+0x130>)
   14646:	f7ff fba9 	bl	13d9c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   1464a:	4284      	cmp	r4, r0
   1464c:	d00c      	beq.n	14668 <ull_adv_reset+0x84>
   1464e:	4a32      	ldr	r2, [pc, #200]	; (14718 <ull_adv_reset+0x134>)
   14650:	4932      	ldr	r1, [pc, #200]	; (1471c <ull_adv_reset+0x138>)
   14652:	4833      	ldr	r0, [pc, #204]	; (14720 <ull_adv_reset+0x13c>)
   14654:	f240 739f 	movw	r3, #1951	; 0x79f
   14658:	f00b f84d 	bl	1f6f6 <printk>
   1465c:	4040      	eors	r0, r0
   1465e:	f380 8811 	msr	BASEPRI, r0
   14662:	f04f 0003 	mov.w	r0, #3
   14666:	df02      	svc	2
	if (adv->lll.conn) {
   14668:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1466a:	b10b      	cbz	r3, 14670 <ull_adv_reset+0x8c>
		conn_release(adv);
   1466c:	f7ff feca 	bl	14404 <conn_release.constprop.0>
	adv->is_enabled = 0U;
   14670:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   14674:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
   14676:	f36f 0300 	bfc	r3, #0, #1
   1467a:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   1467e:	f000 fa4f 	bl	14b20 <ull_scan_is_enabled_get>
   14682:	2800      	cmp	r0, #0
   14684:	d040      	beq.n	14708 <ull_adv_reset+0x124>
}
   14686:	2000      	movs	r0, #0
   14688:	b005      	add	sp, #20
   1468a:	bd30      	pop	{r4, r5, pc}
		ret_cb = TICKER_STATUS_BUSY;
   1468c:	2202      	movs	r2, #2
   1468e:	9203      	str	r2, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   14690:	2103      	movs	r1, #3
   14692:	4b24      	ldr	r3, [pc, #144]	; (14724 <ull_adv_reset+0x140>)
   14694:	9500      	str	r5, [sp, #0]
   14696:	2201      	movs	r2, #1
   14698:	2000      	movs	r0, #0
   1469a:	f7fc fc57 	bl	10f4c <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   1469e:	4629      	mov	r1, r5
   146a0:	f7ff fb48 	bl	13d34 <ull_ticker_status_take>
		if (ret) {
   146a4:	2800      	cmp	r0, #0
   146a6:	d0bb      	beq.n	14620 <ull_adv_reset+0x3c>
			mark = ull_disable_unmark(adv);
   146a8:	481a      	ldr	r0, [pc, #104]	; (14714 <ull_adv_reset+0x130>)
   146aa:	f7ff fb77 	bl	13d9c <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   146ae:	4284      	cmp	r4, r0
   146b0:	d0e9      	beq.n	14686 <ull_adv_reset+0xa2>
   146b2:	f44f 63f1 	mov.w	r3, #1928	; 0x788
   146b6:	e019      	b.n	146ec <ull_adv_reset+0x108>
	LL_ASSERT(!ret);
   146b8:	4a17      	ldr	r2, [pc, #92]	; (14718 <ull_adv_reset+0x134>)
   146ba:	491c      	ldr	r1, [pc, #112]	; (1472c <ull_adv_reset+0x148>)
   146bc:	4818      	ldr	r0, [pc, #96]	; (14720 <ull_adv_reset+0x13c>)
   146be:	f240 739c 	movw	r3, #1948	; 0x79c
   146c2:	f00b f818 	bl	1f6f6 <printk>
   146c6:	4040      	eors	r0, r0
   146c8:	f380 8811 	msr	BASEPRI, r0
   146cc:	f04f 0003 	mov.w	r0, #3
   146d0:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   146d2:	4810      	ldr	r0, [pc, #64]	; (14714 <ull_adv_reset+0x130>)
   146d4:	f7ff fb62 	bl	13d9c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   146d8:	4284      	cmp	r4, r0
   146da:	d1b8      	bne.n	1464e <ull_adv_reset+0x6a>
   146dc:	e7c4      	b.n	14668 <ull_adv_reset+0x84>
		mark = ull_disable_unmark(adv);
   146de:	480d      	ldr	r0, [pc, #52]	; (14714 <ull_adv_reset+0x130>)
   146e0:	f7ff fb5c 	bl	13d9c <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   146e4:	4284      	cmp	r4, r0
   146e6:	d0ce      	beq.n	14686 <ull_adv_reset+0xa2>
   146e8:	f240 7396 	movw	r3, #1942	; 0x796
   146ec:	4a0a      	ldr	r2, [pc, #40]	; (14718 <ull_adv_reset+0x134>)
   146ee:	490b      	ldr	r1, [pc, #44]	; (1471c <ull_adv_reset+0x138>)
   146f0:	480b      	ldr	r0, [pc, #44]	; (14720 <ull_adv_reset+0x13c>)
   146f2:	f00b f800 	bl	1f6f6 <printk>
   146f6:	4040      	eors	r0, r0
   146f8:	f380 8811 	msr	BASEPRI, r0
   146fc:	f04f 0003 	mov.w	r0, #3
   14700:	df02      	svc	2
}
   14702:	2000      	movs	r0, #0
   14704:	b005      	add	sp, #20
   14706:	bd30      	pop	{r4, r5, pc}
		ull_filter_adv_scan_state_cb(0);
   14708:	f004 fb32 	bl	18d70 <ull_filter_adv_scan_state_cb>
}
   1470c:	2000      	movs	r0, #0
   1470e:	b005      	add	sp, #20
   14710:	bd30      	pop	{r4, r5, pc}
   14712:	bf00      	nop
   14714:	20001e7c 	.word	0x20001e7c
   14718:	00025d6c 	.word	0x00025d6c
   1471c:	00025e5c 	.word	0x00025e5c
   14720:	00025984 	.word	0x00025984
   14724:	00012ae5 	.word	0x00012ae5
   14728:	20001e98 	.word	0x20001e98
   1472c:	00025c48 	.word	0x00025c48

00014730 <ull_adv_reset_finalize>:
{
   14730:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
   14732:	4c09      	ldr	r4, [pc, #36]	; (14758 <ull_adv_reset_finalize+0x28>)
   14734:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   14738:	4628      	mov	r0, r5
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
   1473a:	3438      	adds	r4, #56	; 0x38
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
   1473c:	f005 feb2 	bl	1a4a4 <lll_adv_data_reset>
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
   14740:	4620      	mov	r0, r4
   14742:	f005 feaf 	bl	1a4a4 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   14746:	4628      	mov	r0, r5
   14748:	f005 fe9e 	bl	1a488 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   1474c:	4620      	mov	r0, r4
   1474e:	f005 fe9b 	bl	1a488 <lll_adv_data_init>
}
   14752:	2000      	movs	r0, #0
   14754:	bd38      	pop	{r3, r4, r5, pc}
   14756:	bf00      	nop
   14758:	20001e7c 	.word	0x20001e7c

0001475c <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1475c:	4a03      	ldr	r2, [pc, #12]	; (1476c <ull_adv_handle_get+0x10>)
   1475e:	4b04      	ldr	r3, [pc, #16]	; (14770 <ull_adv_handle_get+0x14>)
   14760:	1a80      	subs	r0, r0, r2
   14762:	fba3 3000 	umull	r3, r0, r3, r0
}
   14766:	f3c0 108f 	ubfx	r0, r0, #6, #16
   1476a:	4770      	bx	lr
   1476c:	20001e7c 	.word	0x20001e7c
   14770:	ba2e8ba3 	.word	0xba2e8ba3

00014774 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14774:	4a04      	ldr	r2, [pc, #16]	; (14788 <ull_adv_lll_handle_get+0x14>)
   14776:	6800      	ldr	r0, [r0, #0]
   14778:	4b04      	ldr	r3, [pc, #16]	; (1478c <ull_adv_lll_handle_get+0x18>)
   1477a:	1a80      	subs	r0, r0, r2
   1477c:	fba3 3000 	umull	r3, r0, r3, r0
}
   14780:	f3c0 108f 	ubfx	r0, r0, #6, #16
   14784:	4770      	bx	lr
   14786:	bf00      	nop
   14788:	20001e7c 	.word	0x20001e7c
   1478c:	ba2e8ba3 	.word	0xba2e8ba3

00014790 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   14790:	b938      	cbnz	r0, 147a2 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   14792:	4805      	ldr	r0, [pc, #20]	; (147a8 <ull_adv_is_enabled_get+0x18>)
   14794:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	return &ll_adv[handle];
   14798:	f013 0f01 	tst.w	r3, #1
   1479c:	bf08      	it	eq
   1479e:	2000      	moveq	r0, #0
   147a0:	4770      	bx	lr
		return NULL;
   147a2:	2000      	movs	r0, #0
}
   147a4:	4770      	bx	lr
   147a6:	bf00      	nop
   147a8:	20001e7c 	.word	0x20001e7c

000147ac <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   147ac:	b928      	cbnz	r0, 147ba <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   147ae:	4b04      	ldr	r3, [pc, #16]	; (147c0 <ull_adv_is_enabled+0x14>)
   147b0:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
   147b4:	f000 0001 	and.w	r0, r0, #1
   147b8:	4770      	bx	lr
   147ba:	2000      	movs	r0, #0
}
   147bc:	4770      	bx	lr
   147be:	bf00      	nop
   147c0:	20001e7c 	.word	0x20001e7c

000147c4 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   147c4:	b950      	cbnz	r0, 147dc <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   147c6:	4b06      	ldr	r3, [pc, #24]	; (147e0 <ull_adv_filter_pol_get+0x1c>)
   147c8:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
   147cc:	f010 0001 	ands.w	r0, r0, #1
   147d0:	d005      	beq.n	147de <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   147d2:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   147d6:	f000 0003 	and.w	r0, r0, #3
   147da:	4770      	bx	lr
		return 0;
   147dc:	2000      	movs	r0, #0
}
   147de:	4770      	bx	lr
   147e0:	20001e7c 	.word	0x20001e7c

000147e4 <ull_adv_data_set>:
{
   147e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   147e6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   147ea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   147ee:	b083      	sub	sp, #12
   147f0:	6b1f      	ldr	r7, [r3, #48]	; 0x30
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   147f2:	783b      	ldrb	r3, [r7, #0]
   147f4:	f003 030f 	and.w	r3, r3, #15
   147f8:	2b01      	cmp	r3, #1
   147fa:	d032      	beq.n	14862 <ull_adv_data_set+0x7e>
	if (len > PDU_AC_DATA_SIZE_MAX) {
   147fc:	291f      	cmp	r1, #31
   147fe:	460d      	mov	r5, r1
   14800:	d82c      	bhi.n	1485c <ull_adv_data_set+0x78>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   14802:	4604      	mov	r4, r0
   14804:	f10d 0107 	add.w	r1, sp, #7
   14808:	302c      	adds	r0, #44	; 0x2c
   1480a:	4616      	mov	r6, r2
   1480c:	f005 fe50 	bl	1a4b0 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   14810:	4639      	mov	r1, r7
   14812:	4607      	mov	r7, r0
   14814:	f811 2b02 	ldrb.w	r2, [r1], #2
   14818:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   1481c:	f3c2 0303 	ubfx	r3, r2, #0, #4
   14820:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   14824:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   14828:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   1482c:	f002 0280 	and.w	r2, r2, #128	; 0x80
   14830:	4638      	mov	r0, r7
   14832:	4313      	orrs	r3, r2
   14834:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   14838:	2206      	movs	r2, #6
   1483a:	f00c ffd4 	bl	217e6 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   1483e:	462a      	mov	r2, r5
   14840:	4631      	mov	r1, r6
   14842:	f107 0008 	add.w	r0, r7, #8
   14846:	f00c ffce 	bl	217e6 <memcpy>
	pdu->last = idx;
   1484a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	pdu->len = BDADDR_SIZE + len;
   1484e:	3506      	adds	r5, #6
	return 0;
   14850:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE + len;
   14852:	707d      	strb	r5, [r7, #1]
   14854:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
   14858:	b003      	add	sp, #12
   1485a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   1485c:	2012      	movs	r0, #18
}
   1485e:	b003      	add	sp, #12
   14860:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   14862:	2000      	movs	r0, #0
}
   14864:	b003      	add	sp, #12
   14866:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014868 <ll_adv_data_set>:
{
   14868:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   1486a:	4601      	mov	r1, r0
   1486c:	4801      	ldr	r0, [pc, #4]	; (14874 <ll_adv_data_set+0xc>)
   1486e:	f7ff bfb9 	b.w	147e4 <ull_adv_data_set>
   14872:	bf00      	nop
   14874:	20001e7c 	.word	0x20001e7c

00014878 <ull_scan_rsp_set>:
{
   14878:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1487a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   1487e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   14882:	b083      	sub	sp, #12
   14884:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   14886:	460e      	mov	r6, r1
   14888:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   1488a:	f10d 0107 	add.w	r1, sp, #7
   1488e:	3038      	adds	r0, #56	; 0x38
   14890:	4617      	mov	r7, r2
   14892:	f005 fe0d 	bl	1a4b0 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   14896:	4629      	mov	r1, r5
	pdu->len = BDADDR_SIZE + len;
   14898:	1db2      	adds	r2, r6, #6
	pdu->tx_addr = prev->tx_addr;
   1489a:	f811 3b02 	ldrb.w	r3, [r1], #2
	pdu->len = BDADDR_SIZE + len;
   1489e:	7042      	strb	r2, [r0, #1]
	pdu->tx_addr = prev->tx_addr;
   148a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   148a4:	019b      	lsls	r3, r3, #6
   148a6:	f043 0304 	orr.w	r3, r3, #4
   148aa:	7003      	strb	r3, [r0, #0]
   148ac:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   148ae:	2206      	movs	r2, #6
   148b0:	3002      	adds	r0, #2
   148b2:	f00c ff98 	bl	217e6 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   148b6:	4632      	mov	r2, r6
   148b8:	4639      	mov	r1, r7
   148ba:	f105 0008 	add.w	r0, r5, #8
   148be:	f00c ff92 	bl	217e6 <memcpy>
	pdu->last = idx;
   148c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   148c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
   148ca:	2000      	movs	r0, #0
   148cc:	b003      	add	sp, #12
   148ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000148d0 <ll_adv_scan_rsp_set>:
{
   148d0:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   148d2:	4601      	mov	r1, r0
   148d4:	4801      	ldr	r0, [pc, #4]	; (148dc <ll_adv_scan_rsp_set+0xc>)
   148d6:	f7ff bfcf 	b.w	14878 <ull_scan_rsp_set>
   148da:	bf00      	nop
   148dc:	20001e7c 	.word	0x20001e7c

000148e0 <ull_adv_pdu_update_addrs>:
{
   148e0:	b570      	push	{r4, r5, r6, lr}
   148e2:	460c      	mov	r4, r1
   148e4:	4605      	mov	r5, r0
}

static const uint8_t *adva_update(struct ll_adv_set *adv, struct pdu_adv *pdu)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	const uint8_t *tx_addr = ull_filter_adva_get(adv);
   148e6:	f004 fb8b 	bl	19000 <ull_filter_adva_get>
#else
	const uint8_t *tx_addr = NULL;
#endif
	uint8_t *adv_addr;

	if (tx_addr) {
   148ea:	4601      	mov	r1, r0
   148ec:	b300      	cbz	r0, 14930 <ull_adv_pdu_update_addrs+0x50>
		pdu->tx_addr = 1;
   148ee:	7823      	ldrb	r3, [r4, #0]
   148f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   148f4:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   148f6:	1ca6      	adds	r6, r4, #2
	} else {
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
	}

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   148f8:	4630      	mov	r0, r6
   148fa:	2206      	movs	r2, #6
   148fc:	f00c ff73 	bl	217e6 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   14900:	7823      	ldrb	r3, [r4, #0]
   14902:	f003 030f 	and.w	r3, r3, #15
   14906:	2b01      	cmp	r3, #1
   14908:	d001      	beq.n	1490e <ull_adv_pdu_update_addrs+0x2e>
}
   1490a:	4630      	mov	r0, r6
   1490c:	bd70      	pop	{r4, r5, r6, pc}
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	const uint8_t *rx_addr = NULL;
	uint8_t *tgt_addr;

	rx_addr = ull_filter_tgta_get(adv);
   1490e:	4628      	mov	r0, r5
   14910:	f004 fba4 	bl	1905c <ull_filter_tgta_get>
	if (rx_addr) {
   14914:	4601      	mov	r1, r0
   14916:	2800      	cmp	r0, #0
   14918:	d0f7      	beq.n	1490a <ull_adv_pdu_update_addrs+0x2a>
		pdu->rx_addr = 1;
   1491a:	7823      	ldrb	r3, [r4, #0]
   1491c:	4620      	mov	r0, r4
   1491e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14922:	f800 3b08 	strb.w	r3, [r0], #8

		/* TargetA always follows AdvA in all PDUs */
		tgt_addr = adv_pdu_adva_get(pdu) + BDADDR_SIZE;
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   14926:	2206      	movs	r2, #6
   14928:	f00c ff5d 	bl	217e6 <memcpy>
}
   1492c:	4630      	mov	r0, r6
   1492e:	bd70      	pop	{r4, r5, r6, pc}
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
   14930:	7820      	ldrb	r0, [r4, #0]
   14932:	f3c0 1080 	ubfx	r0, r0, #6, #1
   14936:	f7fc fbb3 	bl	110a0 <ll_addr_get>
   1493a:	4601      	mov	r1, r0
   1493c:	e7db      	b.n	148f6 <ull_adv_pdu_update_addrs+0x16>
   1493e:	bf00      	nop

00014940 <ticker_cb>:
	return 0;
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t remainder,
		      uint16_t lazy, void *param)
{
   14940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ++hdr->ref;
   14944:	7c1d      	ldrb	r5, [r3, #16]
   14946:	3501      	adds	r5, #1
   14948:	b2ed      	uxtb	r5, r5
   1494a:	4680      	mov	r8, r0
   1494c:	460f      	mov	r7, r1
   1494e:	4616      	mov	r6, r2
   14950:	741d      	strb	r5, [r3, #16]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   14952:	f103 041c 	add.w	r4, r3, #28
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   14956:	b17d      	cbz	r5, 14978 <ticker_cb+0x38>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   14958:	4d16      	ldr	r5, [pc, #88]	; (149b4 <ticker_cb+0x74>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	mfy.param = &p;
   1495a:	4b17      	ldr	r3, [pc, #92]	; (149b8 <ticker_cb+0x78>)
	p.ticks_at_expire = ticks_at_expire;
   1495c:	f8c5 8000 	str.w	r8, [r5]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   14960:	2200      	movs	r2, #0
   14962:	4611      	mov	r1, r2
   14964:	2001      	movs	r0, #1
	mfy.param = &p;
   14966:	609d      	str	r5, [r3, #8]
	p.remainder = remainder;
   14968:	606f      	str	r7, [r5, #4]
	p.lazy = lazy;
   1496a:	812e      	strh	r6, [r5, #8]
	p.param = lll;
   1496c:	60ec      	str	r4, [r5, #12]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1496e:	f7fa fee1 	bl	f734 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   14972:	b978      	cbnz	r0, 14994 <ticker_cb+0x54>

	DEBUG_RADIO_PREPARE_O(1);
}
   14974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(ref);
   14978:	4a10      	ldr	r2, [pc, #64]	; (149bc <ticker_cb+0x7c>)
   1497a:	4911      	ldr	r1, [pc, #68]	; (149c0 <ticker_cb+0x80>)
   1497c:	4811      	ldr	r0, [pc, #68]	; (149c4 <ticker_cb+0x84>)
   1497e:	f240 23c5 	movw	r3, #709	; 0x2c5
   14982:	f00a feb8 	bl	1f6f6 <printk>
   14986:	4040      	eors	r0, r0
   14988:	f380 8811 	msr	BASEPRI, r0
   1498c:	f04f 0003 	mov.w	r0, #3
   14990:	df02      	svc	2
   14992:	e7e1      	b.n	14958 <ticker_cb+0x18>
	LL_ASSERT(!ret);
   14994:	4a09      	ldr	r2, [pc, #36]	; (149bc <ticker_cb+0x7c>)
   14996:	490c      	ldr	r1, [pc, #48]	; (149c8 <ticker_cb+0x88>)
   14998:	480a      	ldr	r0, [pc, #40]	; (149c4 <ticker_cb+0x84>)
   1499a:	f240 23d1 	movw	r3, #721	; 0x2d1
   1499e:	f00a feaa 	bl	1f6f6 <printk>
   149a2:	4040      	eors	r0, r0
   149a4:	f380 8811 	msr	BASEPRI, r0
   149a8:	f04f 0003 	mov.w	r0, #3
   149ac:	df02      	svc	2
}
   149ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   149b2:	bf00      	nop
   149b4:	20001f44 	.word	0x20001f44
   149b8:	20000428 	.word	0x20000428
   149bc:	00025e78 	.word	0x00025e78
   149c0:	00025dd8 	.word	0x00025dd8
   149c4:	00025984 	.word	0x00025984
   149c8:	00025c48 	.word	0x00025c48

000149cc <ull_scan_init>:
}
   149cc:	2000      	movs	r0, #0
   149ce:	4770      	bx	lr

000149d0 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   149d0:	3004      	adds	r0, #4
{
   149d2:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   149d4:	b2c0      	uxtb	r0, r0
   149d6:	f101 021c 	add.w	r2, r1, #28
   149da:	f7ff fa4d 	bl	13e78 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   149de:	b110      	cbz	r0, 149e6 <ull_scan_disable+0x16>
   149e0:	3045      	adds	r0, #69	; 0x45
   149e2:	d101      	bne.n	149e8 <ull_scan_disable+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   149e4:	200c      	movs	r0, #12
}
   149e6:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
   149e8:	4a07      	ldr	r2, [pc, #28]	; (14a08 <ull_scan_disable+0x38>)
   149ea:	4908      	ldr	r1, [pc, #32]	; (14a0c <ull_scan_disable+0x3c>)
   149ec:	4808      	ldr	r0, [pc, #32]	; (14a10 <ull_scan_disable+0x40>)
   149ee:	f240 13c7 	movw	r3, #455	; 0x1c7
   149f2:	f00a fe80 	bl	1f6f6 <printk>
   149f6:	4040      	eors	r0, r0
   149f8:	f380 8811 	msr	BASEPRI, r0
   149fc:	f04f 0003 	mov.w	r0, #3
   14a00:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   14a02:	200c      	movs	r0, #12
}
   14a04:	bd08      	pop	{r3, pc}
   14a06:	bf00      	nop
   14a08:	00025e78 	.word	0x00025e78
   14a0c:	00025eb8 	.word	0x00025eb8
   14a10:	00025984 	.word	0x00025984

00014a14 <disable.constprop.0>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static uint8_t disable(uint8_t handle)
   14a14:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
   14a16:	4c0e      	ldr	r4, [pc, #56]	; (14a50 <disable.constprop.0+0x3c>)
   14a18:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   14a1c:	07db      	lsls	r3, r3, #31
   14a1e:	d501      	bpl.n	14a24 <disable.constprop.0+0x10>
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
   14a20:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14a22:	b110      	cbz	r0, 14a2a <disable.constprop.0+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14a24:	250c      	movs	r5, #12
		ull_filter_adv_scan_state_cb(0);
	}
#endif

	return 0;
}
   14a26:	4628      	mov	r0, r5
   14a28:	bd38      	pop	{r3, r4, r5, pc}
	ret = ull_scan_disable(handle, scan);
   14a2a:	4621      	mov	r1, r4
   14a2c:	f7ff ffd0 	bl	149d0 <ull_scan_disable>
	if (ret) {
   14a30:	4605      	mov	r5, r0
   14a32:	2800      	cmp	r0, #0
   14a34:	d1f7      	bne.n	14a26 <disable.constprop.0+0x12>
	scan->is_enabled = 0U;
   14a36:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   14a3a:	f360 0300 	bfi	r3, r0, #0, #1
   14a3e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ull_adv_is_enabled_get(0))
   14a42:	f7ff fea5 	bl	14790 <ull_adv_is_enabled_get>
   14a46:	2800      	cmp	r0, #0
   14a48:	d1ed      	bne.n	14a26 <disable.constprop.0+0x12>
		ull_filter_adv_scan_state_cb(0);
   14a4a:	f004 f991 	bl	18d70 <ull_filter_adv_scan_state_cb>
   14a4e:	e7ea      	b.n	14a26 <disable.constprop.0+0x12>
   14a50:	20001ef8 	.word	0x20001ef8

00014a54 <ll_scan_enable>:
	if (!enable) {
   14a54:	b380      	cbz	r0, 14ab8 <ll_scan_enable+0x64>
{
   14a56:	b538      	push	{r3, r4, r5, lr}
	if (!scan || scan->is_enabled) {
   14a58:	4c1f      	ldr	r4, [pc, #124]	; (14ad8 <ll_scan_enable+0x84>)
   14a5a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   14a5e:	f013 0101 	ands.w	r1, r3, #1
   14a62:	d135      	bne.n	14ad0 <ll_scan_enable+0x7c>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   14a64:	f3c3 0541 	ubfx	r5, r3, #1, #2
   14a68:	079b      	lsls	r3, r3, #30
   14a6a:	d50a      	bpl.n	14a82 <ll_scan_enable+0x2e>
		if (!mem_nz(ll_addr_get(1, NULL), BDADDR_SIZE)) {
   14a6c:	2001      	movs	r0, #1
   14a6e:	f7fc fb17 	bl	110a0 <ll_addr_get>
   14a72:	2106      	movs	r1, #6
   14a74:	f7fa fdd0 	bl	f618 <mem_nz>
   14a78:	b360      	cbz	r0, 14ad4 <ll_scan_enable+0x80>
   14a7a:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
   14a7e:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
   14a82:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   14a86:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   14a8a:	f004 f9a5 	bl	18dd8 <ull_filter_scan_update>
	lll->rpa_gen = 0;
   14a8e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   14a92:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
   14a96:	f36f 0300 	bfc	r3, #0, #1
	lll->rl_idx = FILTER_IDX_NONE;
   14a9a:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
   14a9c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   14aa0:	09d3      	lsrs	r3, r2, #7
	lll->rl_idx = FILTER_IDX_NONE;
   14aa2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
   14aa6:	d002      	beq.n	14aae <ll_scan_enable+0x5a>
   14aa8:	3d02      	subs	r5, #2
   14aaa:	2d01      	cmp	r5, #1
   14aac:	d906      	bls.n	14abc <ll_scan_enable+0x68>
}
   14aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
   14ab2:	4809      	ldr	r0, [pc, #36]	; (14ad8 <ll_scan_enable+0x84>)
   14ab4:	f7ec bab8 	b.w	1028 <ull_scan_enable>
		err = disable(SCAN_HANDLE_1M);
   14ab8:	f7ff bfac 	b.w	14a14 <disable.constprop.0>
		ull_filter_rpa_update(false);
   14abc:	2000      	movs	r0, #0
   14abe:	f004 f9af 	bl	18e20 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   14ac2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   14ac6:	f043 0301 	orr.w	r3, r3, #1
   14aca:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   14ace:	e7ee      	b.n	14aae <ll_scan_enable+0x5a>
			return BT_HCI_ERR_CMD_DISALLOWED;
   14ad0:	200c      	movs	r0, #12
}
   14ad2:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_INVALID_PARAM;
   14ad4:	2012      	movs	r0, #18
}
   14ad6:	bd38      	pop	{r3, r4, r5, pc}
   14ad8:	20001ef8 	.word	0x20001ef8

00014adc <ull_scan_reset>:
{
   14adc:	b508      	push	{r3, lr}
		(void)disable(handle);
   14ade:	f7ff ff99 	bl	14a14 <disable.constprop.0>
}
   14ae2:	2000      	movs	r0, #0
   14ae4:	bd08      	pop	{r3, pc}
   14ae6:	bf00      	nop

00014ae8 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   14ae8:	4a04      	ldr	r2, [pc, #16]	; (14afc <ull_scan_handle_get+0x14>)
   14aea:	4b05      	ldr	r3, [pc, #20]	; (14b00 <ull_scan_handle_get+0x18>)
   14aec:	1a80      	subs	r0, r0, r2
   14aee:	0880      	lsrs	r0, r0, #2
   14af0:	fba3 3000 	umull	r3, r0, r3, r0
}
   14af4:	f3c0 0047 	ubfx	r0, r0, #1, #8
   14af8:	4770      	bx	lr
   14afa:	bf00      	nop
   14afc:	20001ef8 	.word	0x20001ef8
   14b00:	1af286bd 	.word	0x1af286bd

00014b04 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   14b04:	4a04      	ldr	r2, [pc, #16]	; (14b18 <ull_scan_lll_handle_get+0x14>)
   14b06:	6800      	ldr	r0, [r0, #0]
   14b08:	4b04      	ldr	r3, [pc, #16]	; (14b1c <ull_scan_lll_handle_get+0x18>)
   14b0a:	1a80      	subs	r0, r0, r2
   14b0c:	0880      	lsrs	r0, r0, #2
   14b0e:	fba3 3000 	umull	r3, r0, r3, r0
}
   14b12:	f3c0 0047 	ubfx	r0, r0, #1, #8
   14b16:	4770      	bx	lr
   14b18:	20001ef8 	.word	0x20001ef8
   14b1c:	1af286bd 	.word	0x1af286bd

00014b20 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   14b20:	b938      	cbnz	r0, 14b32 <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   14b22:	4805      	ldr	r0, [pc, #20]	; (14b38 <ull_scan_is_enabled_get+0x18>)
   14b24:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
	return &ll_scan[handle];
   14b28:	f013 0f01 	tst.w	r3, #1
   14b2c:	bf08      	it	eq
   14b2e:	2000      	moveq	r0, #0
   14b30:	4770      	bx	lr
		return NULL;
   14b32:	2000      	movs	r0, #0
}
   14b34:	4770      	bx	lr
   14b36:	bf00      	nop
   14b38:	20001ef8 	.word	0x20001ef8

00014b3c <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   14b3c:	4a04      	ldr	r2, [pc, #16]	; (14b50 <ull_scan_is_disabled_get+0x14>)
   14b3e:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
   14b42:	f003 0301 	and.w	r3, r3, #1
   14b46:	4303      	orrs	r3, r0
}
   14b48:	bf0c      	ite	eq
   14b4a:	4610      	moveq	r0, r2
   14b4c:	2000      	movne	r0, #0
   14b4e:	4770      	bx	lr
   14b50:	20001ef8 	.word	0x20001ef8

00014b54 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
   14b54:	b988      	cbnz	r0, 14b7a <ull_scan_is_enabled+0x26>
	if (!scan || !scan->is_enabled) {
   14b56:	4a0a      	ldr	r2, [pc, #40]	; (14b80 <ull_scan_is_enabled+0x2c>)
   14b58:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
   14b5c:	f013 0001 	ands.w	r0, r3, #1
   14b60:	d00c      	beq.n	14b7c <ull_scan_is_enabled+0x28>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   14b62:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? BIT(2) : 0) |
   14b66:	6a52      	ldr	r2, [r2, #36]	; 0x24
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   14b68:	f003 0301 	and.w	r3, r3, #1
   14b6c:	09c0      	lsrs	r0, r0, #7
   14b6e:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? BIT(2) : 0) |
   14b72:	b11a      	cbz	r2, 14b7c <ull_scan_is_enabled+0x28>
   14b74:	f040 0004 	orr.w	r0, r0, #4
   14b78:	4770      	bx	lr
		return 0;
   14b7a:	2000      	movs	r0, #0
}
   14b7c:	4770      	bx	lr
   14b7e:	bf00      	nop
   14b80:	20001ef8 	.word	0x20001ef8

00014b84 <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   14b84:	b950      	cbnz	r0, 14b9c <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
   14b86:	4b06      	ldr	r3, [pc, #24]	; (14ba0 <ull_scan_filter_pol_get+0x1c>)
   14b88:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
   14b8c:	f010 0001 	ands.w	r0, r0, #1
   14b90:	d005      	beq.n	14b9e <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
   14b92:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
   14b96:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   14b9a:	4770      	bx	lr
		return 0;
   14b9c:	2000      	movs	r0, #0
}
   14b9e:	4770      	bx	lr
   14ba0:	20001ef8 	.word	0x20001ef8

00014ba4 <tx_ull_dequeue>:
{
   14ba4:	b410      	push	{r4}
   14ba6:	e9d0 246c 	ldrd	r2, r4, [r0, #432]	; 0x1b0
   14baa:	4603      	mov	r3, r0
   14bac:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   14bae:	b164      	cbz	r4, 14bca <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   14bb0:	4294      	cmp	r4, r2
   14bb2:	d027      	beq.n	14c04 <tx_ull_dequeue+0x60>
		if (conn->tx_head == conn->tx_data) {
   14bb4:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
   14bb8:	4291      	cmp	r1, r2
   14bba:	d018      	beq.n	14bee <tx_ull_dequeue+0x4a>
		conn->tx_head = conn->tx_head->next;
   14bbc:	6812      	ldr	r2, [r2, #0]
   14bbe:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		tx->next = NULL;
   14bc2:	2300      	movs	r3, #0
}
   14bc4:	bc10      	pop	{r4}
		tx->next = NULL;
   14bc6:	6003      	str	r3, [r0, #0]
}
   14bc8:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   14bca:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
   14bce:	4291      	cmp	r1, r2
   14bd0:	d023      	beq.n	14c1a <tx_ull_dequeue+0x76>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14bd2:	7911      	ldrb	r1, [r2, #4]
   14bd4:	f001 0103 	and.w	r1, r1, #3
   14bd8:	2903      	cmp	r1, #3
   14bda:	d00d      	beq.n	14bf8 <tx_ull_dequeue+0x54>
		conn->tx_head = conn->tx_head->next;
   14bdc:	6812      	ldr	r2, [r2, #0]
   14bde:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
			conn->tx_ctrl = NULL;
   14be2:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   14be4:	e9c3 226d 	strd	r2, r2, [r3, #436]	; 0x1b4
}
   14be8:	bc10      	pop	{r4}
		tx->next = tx;
   14bea:	6000      	str	r0, [r0, #0]
}
   14bec:	4770      	bx	lr
   14bee:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
   14bf0:	6809      	ldr	r1, [r1, #0]
   14bf2:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
   14bf6:	e7e1      	b.n	14bbc <tx_ull_dequeue+0x18>
		    ((pdu_data_tx->llctrl.opcode !=
   14bf8:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14bfa:	2903      	cmp	r1, #3
   14bfc:	d0de      	beq.n	14bbc <tx_ull_dequeue+0x18>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14bfe:	290a      	cmp	r1, #10
   14c00:	d1ec      	bne.n	14bdc <tx_ull_dequeue+0x38>
   14c02:	e7db      	b.n	14bbc <tx_ull_dequeue+0x18>
   14c04:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
		conn->tx_head = conn->tx_head->next;
   14c08:	6812      	ldr	r2, [r2, #0]
   14c0a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   14c0e:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   14c10:	bf18      	it	ne
   14c12:	f8c3 21b4 	strne.w	r2, [r3, #436]	; 0x1b4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   14c16:	d1e7      	bne.n	14be8 <tx_ull_dequeue+0x44>
   14c18:	e7e3      	b.n	14be2 <tx_ull_dequeue+0x3e>
	if (conn->tx_head == conn->tx_ctrl) {
   14c1a:	2a00      	cmp	r2, #0
   14c1c:	d1e8      	bne.n	14bf0 <tx_ull_dequeue+0x4c>
   14c1e:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
   14c22:	4614      	mov	r4, r2
   14c24:	e7f0      	b.n	14c08 <tx_ull_dequeue+0x64>
   14c26:	bf00      	nop

00014c28 <calc_eff_time>:
	uint16_t time = PKT_US(max_octets, phy);
   14c28:	074b      	lsls	r3, r1, #29
   14c2a:	d50c      	bpl.n	14c46 <calc_eff_time+0x1e>
   14c2c:	0181      	lsls	r1, r0, #6
	eff_time = MIN(eff_time, default_time);
   14c2e:	f501 7074 	add.w	r0, r1, #976	; 0x3d0
   14c32:	4290      	cmp	r0, r2
   14c34:	bf28      	it	cs
   14c36:	4610      	movcs	r0, r2
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14c38:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   14c3c:	4288      	cmp	r0, r1
   14c3e:	bf38      	it	cc
   14c40:	4608      	movcc	r0, r1
}
   14c42:	b280      	uxth	r0, r0
   14c44:	4770      	bx	lr
{
   14c46:	b410      	push	{r4}
	uint16_t time = PKT_US(max_octets, phy);
   14c48:	f100 040d 	add.w	r4, r0, #13
   14c4c:	f001 0003 	and.w	r0, r1, #3
   14c50:	4404      	add	r4, r0
   14c52:	f3c1 0140 	ubfx	r1, r1, #1, #1
   14c56:	00e4      	lsls	r4, r4, #3
   14c58:	40cc      	lsrs	r4, r1
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, time);
   14c5a:	b2a3      	uxth	r3, r4
   14c5c:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14c60:	f100 0028 	add.w	r0, r0, #40	; 0x28
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, time);
   14c64:	bf38      	it	cc
   14c66:	f44f 73a4 	movcc.w	r3, #328	; 0x148
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14c6a:	00c4      	lsls	r4, r0, #3
	eff_time = MIN(eff_time, default_time);
   14c6c:	429a      	cmp	r2, r3
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14c6e:	fa24 f101 	lsr.w	r1, r4, r1
	eff_time = MIN(eff_time, default_time);
   14c72:	bf28      	it	cs
   14c74:	461a      	movcs	r2, r3
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14c76:	428a      	cmp	r2, r1
	eff_time = MIN(eff_time, default_time);
   14c78:	4610      	mov	r0, r2
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   14c7a:	bf38      	it	cc
   14c7c:	4608      	movcc	r0, r1
}
   14c7e:	b280      	uxth	r0, r0
   14c80:	bc10      	pop	{r4}
   14c82:	4770      	bx	lr

00014c84 <init_reset>:
{
   14c84:	b538      	push	{r3, r4, r5, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   14c86:	4813      	ldr	r0, [pc, #76]	; (14cd4 <init_reset+0x50>)
   14c88:	4b13      	ldr	r3, [pc, #76]	; (14cd8 <init_reset+0x54>)
   14c8a:	2201      	movs	r2, #1
   14c8c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   14c90:	f7fa fc4a 	bl	f528 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   14c94:	4b11      	ldr	r3, [pc, #68]	; (14cdc <init_reset+0x58>)
   14c96:	2203      	movs	r2, #3
   14c98:	1d18      	adds	r0, r3, #4
   14c9a:	2124      	movs	r1, #36	; 0x24
   14c9c:	f7fa fc44 	bl	f528 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   14ca0:	4b0f      	ldr	r3, [pc, #60]	; (14ce0 <init_reset+0x5c>)
   14ca2:	2204      	movs	r2, #4
   14ca4:	1898      	adds	r0, r3, r2
   14ca6:	2120      	movs	r1, #32
   14ca8:	f7fa fc3e 	bl	f528 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   14cac:	4b0d      	ldr	r3, [pc, #52]	; (14ce4 <init_reset+0x60>)
   14cae:	2207      	movs	r2, #7
   14cb0:	1d18      	adds	r0, r3, #4
   14cb2:	2108      	movs	r1, #8
   14cb4:	f7fa fc38 	bl	f528 <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   14cb8:	4b0b      	ldr	r3, [pc, #44]	; (14ce8 <init_reset+0x64>)
	default_phy_tx |= BIT(2);
   14cba:	490c      	ldr	r1, [pc, #48]	; (14cec <init_reset+0x68>)
	default_phy_rx |= BIT(2);
   14cbc:	4a0c      	ldr	r2, [pc, #48]	; (14cf0 <init_reset+0x6c>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   14cbe:	480d      	ldr	r0, [pc, #52]	; (14cf4 <init_reset+0x70>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   14cc0:	251b      	movs	r5, #27
   14cc2:	801d      	strh	r5, [r3, #0]
	default_phy_tx |= BIT(2);
   14cc4:	2307      	movs	r3, #7
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   14cc6:	f44f 74a4 	mov.w	r4, #328	; 0x148
	default_phy_tx |= BIT(2);
   14cca:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= BIT(2);
   14ccc:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   14cce:	8004      	strh	r4, [r0, #0]
}
   14cd0:	2000      	movs	r0, #0
   14cd2:	bd38      	pop	{r3, r4, r5, pc}
   14cd4:	20001f58 	.word	0x20001f58
   14cd8:	20001f54 	.word	0x20001f54
   14cdc:	20002134 	.word	0x20002134
   14ce0:	200021a4 	.word	0x200021a4
   14ce4:	20002228 	.word	0x20002228
   14ce8:	20002b0c 	.word	0x20002b0c
   14cec:	20003093 	.word	0x20003093
   14cf0:	20003092 	.word	0x20003092
   14cf4:	20002b0e 	.word	0x20002b0e

00014cf8 <ctrl_tx_pause_enqueue>:
{
   14cf8:	b538      	push	{r3, r4, r5, lr}
	    conn->tx_head &&
   14cfa:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
{
   14cfe:	4604      	mov	r4, r0
   14d00:	460d      	mov	r5, r1
	if (
   14d02:	b11b      	cbz	r3, 14d0c <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   14d04:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
	    conn->tx_head &&
   14d08:	0788      	lsls	r0, r1, #30
   14d0a:	d50d      	bpl.n	14d28 <ctrl_tx_pause_enqueue+0x30>
		if (!conn->tx_ctrl) {
   14d0c:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   14d10:	b301      	cbz	r1, 14d54 <ctrl_tx_pause_enqueue+0x5c>
			LL_ASSERT(!pause);
   14d12:	bb4a      	cbnz	r2, 14d68 <ctrl_tx_pause_enqueue+0x70>
	tx->next = conn->tx_ctrl_last->next;
   14d14:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   14d18:	681a      	ldr	r2, [r3, #0]
   14d1a:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   14d1c:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   14d1e:	682b      	ldr	r3, [r5, #0]
   14d20:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
   14d24:	b19b      	cbz	r3, 14d4e <ctrl_tx_pause_enqueue+0x56>
}
   14d26:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   14d28:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
   14d2c:	07c9      	lsls	r1, r1, #31
   14d2e:	d4ed      	bmi.n	14d0c <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   14d30:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   14d34:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   14d36:	bf04      	itt	eq
   14d38:	6819      	ldreq	r1, [r3, #0]
   14d3a:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   14d3e:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   14d42:	b1f9      	cbz	r1, 14d84 <ctrl_tx_pause_enqueue+0x8c>
			LL_ASSERT(!pause);
   14d44:	2a00      	cmp	r2, #0
   14d46:	d0e5      	beq.n	14d14 <ctrl_tx_pause_enqueue+0x1c>
   14d48:	f240 7392 	movw	r3, #1938	; 0x792
   14d4c:	e00e      	b.n	14d6c <ctrl_tx_pause_enqueue+0x74>
		conn->tx_data_last = tx;
   14d4e:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
   14d52:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   14d54:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   14d56:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
			if (!pause) {
   14d5a:	2a00      	cmp	r2, #0
   14d5c:	d1e2      	bne.n	14d24 <ctrl_tx_pause_enqueue+0x2c>
				conn->tx_ctrl_last = tx;
   14d5e:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
	if (!tx->next) {
   14d62:	2b00      	cmp	r3, #0
   14d64:	d1df      	bne.n	14d26 <ctrl_tx_pause_enqueue+0x2e>
   14d66:	e7f2      	b.n	14d4e <ctrl_tx_pause_enqueue+0x56>
			LL_ASSERT(!pause);
   14d68:	f240 73a4 	movw	r3, #1956	; 0x7a4
   14d6c:	4a0a      	ldr	r2, [pc, #40]	; (14d98 <ctrl_tx_pause_enqueue+0xa0>)
   14d6e:	490b      	ldr	r1, [pc, #44]	; (14d9c <ctrl_tx_pause_enqueue+0xa4>)
   14d70:	480b      	ldr	r0, [pc, #44]	; (14da0 <ctrl_tx_pause_enqueue+0xa8>)
   14d72:	f00a fcc0 	bl	1f6f6 <printk>
   14d76:	4040      	eors	r0, r0
   14d78:	f380 8811 	msr	BASEPRI, r0
   14d7c:	f04f 0003 	mov.w	r0, #3
   14d80:	df02      	svc	2
   14d82:	e7c7      	b.n	14d14 <ctrl_tx_pause_enqueue+0x1c>
			tx->next = conn->tx_head->next;
   14d84:	6819      	ldr	r1, [r3, #0]
   14d86:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   14d88:	601d      	str	r5, [r3, #0]
			if (!pause) {
   14d8a:	b90a      	cbnz	r2, 14d90 <ctrl_tx_pause_enqueue+0x98>
				conn->tx_ctrl_last = tx;
   14d8c:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
   14d90:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   14d92:	2b00      	cmp	r3, #0
   14d94:	d1c7      	bne.n	14d26 <ctrl_tx_pause_enqueue+0x2e>
   14d96:	e7da      	b.n	14d4e <ctrl_tx_pause_enqueue+0x56>
   14d98:	00025ee4 	.word	0x00025ee4
   14d9c:	00025f24 	.word	0x00025f24
   14da0:	00025984 	.word	0x00025984

00014da4 <tx_lll_flush>:
{
   14da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   14da8:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   14dac:	4935      	ldr	r1, [pc, #212]	; (14e84 <tx_lll_flush+0xe0>)
{
   14dae:	b083      	sub	sp, #12
   14db0:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   14db2:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   14db6:	4640      	mov	r0, r8
   14db8:	f7fa fc1a 	bl	f5f0 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14dbc:	f105 064c 	add.w	r6, r5, #76	; 0x4c
	lll_conn_flush(handle, lll);
   14dc0:	4629      	mov	r1, r5
   14dc2:	f006 fb0f 	bl	1b3e4 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14dc6:	6d28      	ldr	r0, [r5, #80]	; 0x50
   14dc8:	4631      	mov	r1, r6
   14dca:	aa01      	add	r2, sp, #4
   14dcc:	f7fa fc4e 	bl	f66c <memq_dequeue>
	while (link) {
   14dd0:	b340      	cbz	r0, 14e24 <tx_lll_flush+0x80>
   14dd2:	4c2d      	ldr	r4, [pc, #180]	; (14e88 <tx_lll_flush+0xe4>)
		lll_tx->handle = 0xFFFF;
   14dd4:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14dd8:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   14ddc:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   14dde:	f894 c001 	ldrb.w	ip, [r4, #1]
   14de2:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   14de4:	1c4b      	adds	r3, r1, #1
   14de6:	b2db      	uxtb	r3, r3
		last = 0U;
   14de8:	459c      	cmp	ip, r3
   14dea:	bf08      	it	eq
   14dec:	2300      	moveq	r3, #0
	if (last == first) {
   14dee:	429a      	cmp	r2, r3
   14df0:	d038      	beq.n	14e64 <tx_lll_flush+0xc0>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14df2:	7822      	ldrb	r2, [r4, #0]
   14df4:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   14df8:	eb19 0e02 	adds.w	lr, r9, r2
   14dfc:	d032      	beq.n	14e64 <tx_lll_flush+0xc0>
		lll_tx->node = tx;
   14dfe:	f8dd c004 	ldr.w	ip, [sp, #4]
		lll_tx->handle = 0xFFFF;
   14e02:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   14e06:	f8dc 1000 	ldr.w	r1, [ip]
		lll_tx->node = tx;
   14e0a:	f8ce c004 	str.w	ip, [lr, #4]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14e0e:	aa01      	add	r2, sp, #4
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   14e10:	6001      	str	r1, [r0, #0]
		tx->next = link;
   14e12:	f8cc 0000 	str.w	r0, [ip]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14e16:	4631      	mov	r1, r6
   14e18:	6d28      	ldr	r0, [r5, #80]	; 0x50
	*last = idx; /* Commit: Update write index */
   14e1a:	70e3      	strb	r3, [r4, #3]
   14e1c:	f7fa fc26 	bl	f66c <memq_dequeue>
	while (link) {
   14e20:	2800      	cmp	r0, #0
   14e22:	d1db      	bne.n	14ddc <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   14e24:	f8d8 0130 	ldr.w	r0, [r8, #304]	; 0x130
	rx = (void *)&conn->llcp_terminate.node_rx;
   14e28:	f508 7498 	add.w	r4, r8, #304	; 0x130
	LL_ASSERT(rx->hdr.link);
   14e2c:	b150      	cbz	r0, 14e44 <tx_lll_flush+0xa0>
	rx->hdr.link = NULL;
   14e2e:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   14e30:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   14e32:	f8c8 3130 	str.w	r3, [r8, #304]	; 0x130
	ull_rx_put(link, rx);
   14e36:	f7ff f895 	bl	13f64 <ull_rx_put>
	ull_rx_sched();
   14e3a:	f7ff f8a3 	bl	13f84 <ull_rx_sched>
}
   14e3e:	b003      	add	sp, #12
   14e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   14e44:	4a11      	ldr	r2, [pc, #68]	; (14e8c <tx_lll_flush+0xe8>)
   14e46:	4912      	ldr	r1, [pc, #72]	; (14e90 <tx_lll_flush+0xec>)
   14e48:	4812      	ldr	r0, [pc, #72]	; (14e94 <tx_lll_flush+0xf0>)
   14e4a:	f240 7337 	movw	r3, #1847	; 0x737
   14e4e:	f00a fc52 	bl	1f6f6 <printk>
   14e52:	4040      	eors	r0, r0
   14e54:	f380 8811 	msr	BASEPRI, r0
   14e58:	f04f 0003 	mov.w	r0, #3
   14e5c:	df02      	svc	2
   14e5e:	f8d8 0130 	ldr.w	r0, [r8, #304]	; 0x130
   14e62:	e7e4      	b.n	14e2e <tx_lll_flush+0x8a>
		LL_ASSERT(lll_tx);
   14e64:	4a09      	ldr	r2, [pc, #36]	; (14e8c <tx_lll_flush+0xe8>)
   14e66:	490c      	ldr	r1, [pc, #48]	; (14e98 <tx_lll_flush+0xf4>)
   14e68:	480a      	ldr	r0, [pc, #40]	; (14e94 <tx_lll_flush+0xf0>)
   14e6a:	f240 7323 	movw	r3, #1827	; 0x723
   14e6e:	f00a fc42 	bl	1f6f6 <printk>
   14e72:	4040      	eors	r0, r0
   14e74:	f380 8811 	msr	BASEPRI, r0
   14e78:	f04f 0003 	mov.w	r0, #3
   14e7c:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   14e7e:	2300      	movs	r3, #0
   14e80:	801b      	strh	r3, [r3, #0]
   14e82:	deff      	udf	#255	; 0xff
   14e84:	20001f58 	.word	0x20001f58
   14e88:	20000438 	.word	0x20000438
   14e8c:	00025ee4 	.word	0x00025ee4
   14e90:	00025f34 	.word	0x00025f34
   14e94:	00025984 	.word	0x00025984
   14e98:	00025f2c 	.word	0x00025f2c

00014e9c <ticker_op_stop_cb>:
{
   14e9c:	b510      	push	{r4, lr}
   14e9e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14ea0:	b9b0      	cbnz	r0, 14ed0 <ticker_op_stop_cb+0x34>
	mfy.param = param;
   14ea2:	4b12      	ldr	r3, [pc, #72]	; (14eec <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   14ea4:	2200      	movs	r2, #0
   14ea6:	4611      	mov	r1, r2
   14ea8:	2002      	movs	r0, #2
	mfy.param = param;
   14eaa:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   14eac:	f7fa fc42 	bl	f734 <mayfly_enqueue>
	LL_ASSERT(!retval);
   14eb0:	b900      	cbnz	r0, 14eb4 <ticker_op_stop_cb+0x18>
}
   14eb2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   14eb4:	4a0e      	ldr	r2, [pc, #56]	; (14ef0 <ticker_op_stop_cb+0x54>)
   14eb6:	490f      	ldr	r1, [pc, #60]	; (14ef4 <ticker_op_stop_cb+0x58>)
   14eb8:	480f      	ldr	r0, [pc, #60]	; (14ef8 <ticker_op_stop_cb+0x5c>)
   14eba:	f44f 63d2 	mov.w	r3, #1680	; 0x690
   14ebe:	f00a fc1a 	bl	1f6f6 <printk>
   14ec2:	4040      	eors	r0, r0
   14ec4:	f380 8811 	msr	BASEPRI, r0
   14ec8:	f04f 0003 	mov.w	r0, #3
   14ecc:	df02      	svc	2
}
   14ece:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14ed0:	4a07      	ldr	r2, [pc, #28]	; (14ef0 <ticker_op_stop_cb+0x54>)
   14ed2:	490a      	ldr	r1, [pc, #40]	; (14efc <ticker_op_stop_cb+0x60>)
   14ed4:	4808      	ldr	r0, [pc, #32]	; (14ef8 <ticker_op_stop_cb+0x5c>)
   14ed6:	f240 6389 	movw	r3, #1673	; 0x689
   14eda:	f00a fc0c 	bl	1f6f6 <printk>
   14ede:	4040      	eors	r0, r0
   14ee0:	f380 8811 	msr	BASEPRI, r0
   14ee4:	f04f 0003 	mov.w	r0, #3
   14ee8:	df02      	svc	2
   14eea:	e7da      	b.n	14ea2 <ticker_op_stop_cb+0x6>
   14eec:	200004b0 	.word	0x200004b0
   14ef0:	00025ee4 	.word	0x00025ee4
   14ef4:	00025c78 	.word	0x00025c78
   14ef8:	00025984 	.word	0x00025984
   14efc:	00025f44 	.word	0x00025f44

00014f00 <ticker_start_conn_op_cb>:
{
   14f00:	b510      	push	{r4, lr}
   14f02:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14f04:	b990      	cbnz	r0, 14f2c <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   14f06:	4620      	mov	r0, r4
   14f08:	f7fe ff66 	bl	13dd8 <ull_update_unmark>
	LL_ASSERT(p == param);
   14f0c:	4284      	cmp	r4, r0
   14f0e:	d00c      	beq.n	14f2a <ticker_start_conn_op_cb+0x2a>
   14f10:	4a0d      	ldr	r2, [pc, #52]	; (14f48 <ticker_start_conn_op_cb+0x48>)
   14f12:	490e      	ldr	r1, [pc, #56]	; (14f4c <ticker_start_conn_op_cb+0x4c>)
   14f14:	480e      	ldr	r0, [pc, #56]	; (14f50 <ticker_start_conn_op_cb+0x50>)
   14f16:	f44f 63d0 	mov.w	r3, #1664	; 0x680
   14f1a:	f00a fbec 	bl	1f6f6 <printk>
   14f1e:	4040      	eors	r0, r0
   14f20:	f380 8811 	msr	BASEPRI, r0
   14f24:	f04f 0003 	mov.w	r0, #3
   14f28:	df02      	svc	2
}
   14f2a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14f2c:	4a06      	ldr	r2, [pc, #24]	; (14f48 <ticker_start_conn_op_cb+0x48>)
   14f2e:	4909      	ldr	r1, [pc, #36]	; (14f54 <ticker_start_conn_op_cb+0x54>)
   14f30:	4807      	ldr	r0, [pc, #28]	; (14f50 <ticker_start_conn_op_cb+0x50>)
   14f32:	f240 637d 	movw	r3, #1661	; 0x67d
   14f36:	f00a fbde 	bl	1f6f6 <printk>
   14f3a:	4040      	eors	r0, r0
   14f3c:	f380 8811 	msr	BASEPRI, r0
   14f40:	f04f 0003 	mov.w	r0, #3
   14f44:	df02      	svc	2
   14f46:	e7de      	b.n	14f06 <ticker_start_conn_op_cb+0x6>
   14f48:	00025ee4 	.word	0x00025ee4
   14f4c:	00025f50 	.word	0x00025f50
   14f50:	00025984 	.word	0x00025984
   14f54:	00025f44 	.word	0x00025f44

00014f58 <ticker_stop_conn_op_cb>:
{
   14f58:	b510      	push	{r4, lr}
   14f5a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14f5c:	b990      	cbnz	r0, 14f84 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   14f5e:	4620      	mov	r0, r4
   14f60:	f7fe ff2e 	bl	13dc0 <ull_update_mark>
	LL_ASSERT(p == param);
   14f64:	4284      	cmp	r4, r0
   14f66:	d00c      	beq.n	14f82 <ticker_stop_conn_op_cb+0x2a>
   14f68:	4a0d      	ldr	r2, [pc, #52]	; (14fa0 <ticker_stop_conn_op_cb+0x48>)
   14f6a:	490e      	ldr	r1, [pc, #56]	; (14fa4 <ticker_stop_conn_op_cb+0x4c>)
   14f6c:	480e      	ldr	r0, [pc, #56]	; (14fa8 <ticker_stop_conn_op_cb+0x50>)
   14f6e:	f240 6376 	movw	r3, #1654	; 0x676
   14f72:	f00a fbc0 	bl	1f6f6 <printk>
   14f76:	4040      	eors	r0, r0
   14f78:	f380 8811 	msr	BASEPRI, r0
   14f7c:	f04f 0003 	mov.w	r0, #3
   14f80:	df02      	svc	2
}
   14f82:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14f84:	4a06      	ldr	r2, [pc, #24]	; (14fa0 <ticker_stop_conn_op_cb+0x48>)
   14f86:	4909      	ldr	r1, [pc, #36]	; (14fac <ticker_stop_conn_op_cb+0x54>)
   14f88:	4807      	ldr	r0, [pc, #28]	; (14fa8 <ticker_stop_conn_op_cb+0x50>)
   14f8a:	f240 6373 	movw	r3, #1651	; 0x673
   14f8e:	f00a fbb2 	bl	1f6f6 <printk>
   14f92:	4040      	eors	r0, r0
   14f94:	f380 8811 	msr	BASEPRI, r0
   14f98:	f04f 0003 	mov.w	r0, #3
   14f9c:	df02      	svc	2
   14f9e:	e7de      	b.n	14f5e <ticker_stop_conn_op_cb+0x6>
   14fa0:	00025ee4 	.word	0x00025ee4
   14fa4:	00025f50 	.word	0x00025f50
   14fa8:	00025984 	.word	0x00025984
   14fac:	00025f44 	.word	0x00025f44

00014fb0 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14fb0:	b900      	cbnz	r0, 14fb4 <ticker_update_conn_op_cb+0x4>
   14fb2:	4770      	bx	lr
{
   14fb4:	b510      	push	{r4, lr}
   14fb6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14fb8:	f7fe ff1a 	bl	13df0 <ull_update_mark_get>
   14fbc:	4284      	cmp	r4, r0
   14fbe:	d010      	beq.n	14fe2 <ticker_update_conn_op_cb+0x32>
   14fc0:	f7fe fef8 	bl	13db4 <ull_disable_mark_get>
   14fc4:	4284      	cmp	r4, r0
   14fc6:	d00c      	beq.n	14fe2 <ticker_update_conn_op_cb+0x32>
   14fc8:	4a06      	ldr	r2, [pc, #24]	; (14fe4 <ticker_update_conn_op_cb+0x34>)
   14fca:	4907      	ldr	r1, [pc, #28]	; (14fe8 <ticker_update_conn_op_cb+0x38>)
   14fcc:	4807      	ldr	r0, [pc, #28]	; (14fec <ticker_update_conn_op_cb+0x3c>)
   14fce:	f240 636a 	movw	r3, #1642	; 0x66a
   14fd2:	f00a fb90 	bl	1f6f6 <printk>
   14fd6:	4040      	eors	r0, r0
   14fd8:	f380 8811 	msr	BASEPRI, r0
   14fdc:	f04f 0003 	mov.w	r0, #3
   14fe0:	df02      	svc	2
}
   14fe2:	bd10      	pop	{r4, pc}
   14fe4:	00025ee4 	.word	0x00025ee4
   14fe8:	00025f5c 	.word	0x00025f5c
   14fec:	00025984 	.word	0x00025984

00014ff0 <reject_ext_ind_send.isra.0>:

	return 0;
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   14ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ff4:	4605      	mov	r5, r0
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14ff6:	4826      	ldr	r0, [pc, #152]	; (15090 <reject_ext_ind_send.isra.0+0xa0>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   14ff8:	460e      	mov	r6, r1
   14ffa:	4690      	mov	r8, r2
   14ffc:	461f      	mov	r7, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14ffe:	f7fa fac1 	bl	f584 <mem_acquire>
	if (!tx) {
   15002:	2800      	cmp	r0, #0
   15004:	d041      	beq.n	1508a <reject_ext_ind_send.isra.0+0x9a>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   15006:	2303      	movs	r3, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15008:	7904      	ldrb	r4, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1500a:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   1500c:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   15010:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15014:	4323      	orrs	r3, r4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   15016:	2111      	movs	r1, #17
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   15018:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1501a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1501c:	71c1      	strb	r1, [r0, #7]
	if (
   1501e:	b11a      	cbz	r2, 15028 <reject_ext_ind_send.isra.0+0x38>
	    !conn->llcp_enc.pause_tx &&
   15020:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
	    conn->tx_head &&
   15024:	0799      	lsls	r1, r3, #30
   15026:	d510      	bpl.n	1504a <reject_ext_ind_send.isra.0+0x5a>
		if (!conn->tx_ctrl) {
   15028:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   1502c:	b33b      	cbz	r3, 1507e <reject_ext_ind_send.isra.0+0x8e>
	tx->next = conn->tx_ctrl_last->next;
   1502e:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
   15032:	681a      	ldr	r2, [r3, #0]
   15034:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   15036:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   15038:	6802      	ldr	r2, [r0, #0]
   1503a:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
	if (!tx->next) {
   1503e:	b1da      	cbz	r2, 15078 <reject_ext_ind_send.isra.0+0x88>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15040:	2303      	movs	r3, #3
   15042:	7033      	strb	r3, [r6, #0]

	return 0;
   15044:	2000      	movs	r0, #0
}
   15046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    !conn->llcp_phy.pause_tx &&
   1504a:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
   1504e:	07db      	lsls	r3, r3, #31
   15050:	d4ea      	bmi.n	15028 <reject_ext_ind_send.isra.0+0x38>
		if (conn->tx_head == conn->tx_data) {
   15052:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   15056:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   15058:	bf04      	itt	eq
   1505a:	6813      	ldreq	r3, [r2, #0]
   1505c:	f8c5 31bc 	streq.w	r3, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   15060:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   15064:	2b00      	cmp	r3, #0
   15066:	d1e2      	bne.n	1502e <reject_ext_ind_send.isra.0+0x3e>
			tx->next = conn->tx_head->next;
   15068:	6813      	ldr	r3, [r2, #0]
   1506a:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   1506c:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   1506e:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   15070:	e9c5 006d 	strd	r0, r0, [r5, #436]	; 0x1b4
	if (!tx->next) {
   15074:	2a00      	cmp	r2, #0
   15076:	d1e3      	bne.n	15040 <reject_ext_ind_send.isra.0+0x50>
		conn->tx_data_last = tx;
   15078:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
   1507c:	e7e0      	b.n	15040 <reject_ext_ind_send.isra.0+0x50>
			tx->next = conn->tx_head;
   1507e:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   15080:	e9c5 006c 	strd	r0, r0, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   15084:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
   15088:	e7d9      	b.n	1503e <reject_ext_ind_send.isra.0+0x4e>
		return -ENOBUFS;
   1508a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1508e:	e7da      	b.n	15046 <reject_ext_ind_send.isra.0+0x56>
   15090:	200021a4 	.word	0x200021a4

00015094 <start_enc_rsp_send>:
{
   15094:	b570      	push	{r4, r5, r6, lr}
   15096:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   15098:	b179      	cbz	r1, 150ba <start_enc_rsp_send+0x26>
	conn->lll.enc_tx = 1;
   1509a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1509e:	780b      	ldrb	r3, [r1, #0]
	conn->lll.enc_tx = 1;
   150a0:	f042 0210 	orr.w	r2, r2, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   150a4:	2601      	movs	r6, #1
	conn->lll.enc_tx = 1;
   150a6:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   150aa:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   150ae:	2506      	movs	r5, #6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   150b0:	704e      	strb	r6, [r1, #1]
	return 0;
   150b2:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   150b4:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   150b6:	70cd      	strb	r5, [r1, #3]
}
   150b8:	bd70      	pop	{r4, r5, r6, pc}
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   150ba:	4826      	ldr	r0, [pc, #152]	; (15154 <start_enc_rsp_send+0xc0>)
   150bc:	f7fa fa62 	bl	f584 <mem_acquire>
		if (!tx) {
   150c0:	2800      	cmp	r0, #0
   150c2:	d043      	beq.n	1514c <start_enc_rsp_send+0xb8>
	conn->lll.enc_tx = 1;
   150c4:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   150c8:	7902      	ldrb	r2, [r0, #4]
	conn->lll.enc_tx = 1;
   150ca:	f043 0310 	orr.w	r3, r3, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   150ce:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
   150d0:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   150d4:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   150d6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   150da:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   150de:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   150e0:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   150e2:	71c1      	strb	r1, [r0, #7]
	if (
   150e4:	b1e3      	cbz	r3, 15120 <start_enc_rsp_send+0x8c>
	    !conn->llcp_enc.pause_tx &&
   150e6:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
   150ea:	0791      	lsls	r1, r2, #30
   150ec:	d418      	bmi.n	15120 <start_enc_rsp_send+0x8c>
	    !conn->llcp_phy.pause_tx &&
   150ee:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
   150f2:	07d2      	lsls	r2, r2, #31
   150f4:	d414      	bmi.n	15120 <start_enc_rsp_send+0x8c>
		if (conn->tx_head == conn->tx_data) {
   150f6:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
   150fa:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   150fc:	bf04      	itt	eq
   150fe:	681a      	ldreq	r2, [r3, #0]
   15100:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   15104:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   15108:	b1ca      	cbz	r2, 1513e <start_enc_rsp_send+0xaa>
	tx->next = conn->tx_ctrl_last->next;
   1510a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   1510e:	681a      	ldr	r2, [r3, #0]
   15110:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   15112:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   15114:	6803      	ldr	r3, [r0, #0]
   15116:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
   1511a:	b163      	cbz	r3, 15136 <start_enc_rsp_send+0xa2>
	return 0;
   1511c:	2000      	movs	r0, #0
}
   1511e:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   15120:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   15124:	2a00      	cmp	r2, #0
   15126:	d1f0      	bne.n	1510a <start_enc_rsp_send+0x76>
			tx->next = conn->tx_head;
   15128:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1512a:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   1512e:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
   15132:	2b00      	cmp	r3, #0
   15134:	d1f2      	bne.n	1511c <start_enc_rsp_send+0x88>
		conn->tx_data_last = tx;
   15136:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
	return 0;
   1513a:	4618      	mov	r0, r3
}
   1513c:	bd70      	pop	{r4, r5, r6, pc}
			tx->next = conn->tx_head->next;
   1513e:	681a      	ldr	r2, [r3, #0]
   15140:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   15142:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   15144:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   15146:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
   1514a:	e7e6      	b.n	1511a <start_enc_rsp_send+0x86>
			return -ENOBUFS;
   1514c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   15150:	bd70      	pop	{r4, r5, r6, pc}
   15152:	bf00      	nop
   15154:	200021a4 	.word	0x200021a4

00015158 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   15158:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
   1515c:	f8d0 21b4 	ldr.w	r2, [r0, #436]	; 0x1b4
   15160:	079b      	lsls	r3, r3, #30
{
   15162:	b570      	push	{r4, r5, r6, lr}
   15164:	4604      	mov	r4, r0
   15166:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   15168:	d509      	bpl.n	1517e <ctrl_tx_sec_enqueue+0x26>
		if (!conn->tx_ctrl) {
   1516a:	2a00      	cmp	r2, #0
   1516c:	d03d      	beq.n	151ea <ctrl_tx_sec_enqueue+0x92>
			tx->next = conn->tx_ctrl_last->next;
   1516e:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
   15172:	681a      	ldr	r2, [r3, #0]
   15174:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   15176:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   15178:	682b      	ldr	r3, [r5, #0]
   1517a:	b333      	cbz	r3, 151ca <ctrl_tx_sec_enqueue+0x72>
}
   1517c:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->tx_head) {
   1517e:	f8d0 11b0 	ldr.w	r1, [r0, #432]	; 0x1b0
   15182:	b1e1      	cbz	r1, 151be <ctrl_tx_sec_enqueue+0x66>
			if ((conn->llcp_req != conn->llcp_ack) &&
   15184:	f890 31ab 	ldrb.w	r3, [r0, #427]	; 0x1ab
   15188:	f890 60e8 	ldrb.w	r6, [r0, #232]	; 0xe8
   1518c:	f890 00e9 	ldrb.w	r0, [r0, #233]	; 0xe9
   15190:	4286      	cmp	r6, r0
   15192:	f003 0301 	and.w	r3, r3, #1
   15196:	d003      	beq.n	151a0 <ctrl_tx_sec_enqueue+0x48>
   15198:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   1519c:	2803      	cmp	r0, #3
   1519e:	d02c      	beq.n	151fa <ctrl_tx_sec_enqueue+0xa2>
	    !conn->llcp_phy.pause_tx &&
   151a0:	b9b3      	cbnz	r3, 151d0 <ctrl_tx_sec_enqueue+0x78>
		if (conn->tx_head == conn->tx_data) {
   151a2:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   151a6:	4299      	cmp	r1, r3
   151a8:	d045      	beq.n	15236 <ctrl_tx_sec_enqueue+0xde>
		if (!conn->tx_ctrl) {
   151aa:	b99a      	cbnz	r2, 151d4 <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head->next;
   151ac:	680b      	ldr	r3, [r1, #0]
   151ae:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   151b0:	600d      	str	r5, [r1, #0]
				conn->tx_ctrl = tx;
   151b2:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   151b4:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
		if (!tx->next) {
   151b8:	2b00      	cmp	r3, #0
   151ba:	d1df      	bne.n	1517c <ctrl_tx_sec_enqueue+0x24>
   151bc:	e005      	b.n	151ca <ctrl_tx_sec_enqueue+0x72>
		if (!conn->tx_ctrl) {
   151be:	b94a      	cbnz	r2, 151d4 <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head;
   151c0:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   151c2:	e9c0 556c 	strd	r5, r5, [r0, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   151c6:	f8c0 51b8 	str.w	r5, [r0, #440]	; 0x1b8
			conn->tx_data_last = tx;
   151ca:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
   151ce:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   151d0:	2a00      	cmp	r2, #0
   151d2:	d036      	beq.n	15242 <ctrl_tx_sec_enqueue+0xea>
	tx->next = conn->tx_ctrl_last->next;
   151d4:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   151d8:	681a      	ldr	r2, [r3, #0]
   151da:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   151dc:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   151de:	682b      	ldr	r3, [r5, #0]
   151e0:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
		if (!tx->next) {
   151e4:	2b00      	cmp	r3, #0
   151e6:	d1c9      	bne.n	1517c <ctrl_tx_sec_enqueue+0x24>
   151e8:	e7ef      	b.n	151ca <ctrl_tx_sec_enqueue+0x72>
			tx->next = conn->tx_head;
   151ea:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   151ee:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   151f0:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		if (!tx->next) {
   151f4:	2b00      	cmp	r3, #0
   151f6:	d1c1      	bne.n	1517c <ctrl_tx_sec_enqueue+0x24>
   151f8:	e7e7      	b.n	151ca <ctrl_tx_sec_enqueue+0x72>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   151fa:	7908      	ldrb	r0, [r1, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   151fc:	f000 0003 	and.w	r0, r0, #3
   15200:	2803      	cmp	r0, #3
   15202:	d1cd      	bne.n	151a0 <ctrl_tx_sec_enqueue+0x48>
			    ((pdu_data_tx->llctrl.opcode ==
   15204:	79c8      	ldrb	r0, [r1, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   15206:	2803      	cmp	r0, #3
   15208:	d001      	beq.n	1520e <ctrl_tx_sec_enqueue+0xb6>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   1520a:	280a      	cmp	r0, #10
   1520c:	d1c8      	bne.n	151a0 <ctrl_tx_sec_enqueue+0x48>
	    !conn->llcp_phy.pause_tx &&
   1520e:	b9f3      	cbnz	r3, 1524e <ctrl_tx_sec_enqueue+0xf6>
		if (conn->tx_head == conn->tx_data) {
   15210:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   15214:	428b      	cmp	r3, r1
   15216:	d022      	beq.n	1525e <ctrl_tx_sec_enqueue+0x106>
		if (!conn->tx_ctrl) {
   15218:	b332      	cbz	r2, 15268 <ctrl_tx_sec_enqueue+0x110>
			LL_ASSERT(!pause);
   1521a:	f240 7392 	movw	r3, #1938	; 0x792
			LL_ASSERT(!pause);
   1521e:	4a14      	ldr	r2, [pc, #80]	; (15270 <ctrl_tx_sec_enqueue+0x118>)
   15220:	4914      	ldr	r1, [pc, #80]	; (15274 <ctrl_tx_sec_enqueue+0x11c>)
   15222:	4815      	ldr	r0, [pc, #84]	; (15278 <ctrl_tx_sec_enqueue+0x120>)
   15224:	f00a fa67 	bl	1f6f6 <printk>
   15228:	4040      	eors	r0, r0
   1522a:	f380 8811 	msr	BASEPRI, r0
   1522e:	f04f 0003 	mov.w	r0, #3
   15232:	df02      	svc	2
   15234:	e7ce      	b.n	151d4 <ctrl_tx_sec_enqueue+0x7c>
			conn->tx_data = conn->tx_data->next;
   15236:	680b      	ldr	r3, [r1, #0]
   15238:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   1523c:	2a00      	cmp	r2, #0
   1523e:	d1c9      	bne.n	151d4 <ctrl_tx_sec_enqueue+0x7c>
   15240:	e7b4      	b.n	151ac <ctrl_tx_sec_enqueue+0x54>
			tx->next = conn->tx_head;
   15242:	6029      	str	r1, [r5, #0]
				conn->tx_ctrl = tx;
   15244:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   15248:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
}
   1524c:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   1524e:	b112      	cbz	r2, 15256 <ctrl_tx_sec_enqueue+0xfe>
			LL_ASSERT(!pause);
   15250:	f240 73a4 	movw	r3, #1956	; 0x7a4
   15254:	e7e3      	b.n	1521e <ctrl_tx_sec_enqueue+0xc6>
			tx->next = conn->tx_head;
   15256:	6029      	str	r1, [r5, #0]
			conn->tx_head = tx;
   15258:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
}
   1525c:	bd70      	pop	{r4, r5, r6, pc}
			conn->tx_data = conn->tx_data->next;
   1525e:	680b      	ldr	r3, [r1, #0]
   15260:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   15264:	2a00      	cmp	r2, #0
   15266:	d1d8      	bne.n	1521a <ctrl_tx_sec_enqueue+0xc2>
			tx->next = conn->tx_head->next;
   15268:	680b      	ldr	r3, [r1, #0]
   1526a:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   1526c:	600d      	str	r5, [r1, #0]
			if (!pause) {
   1526e:	e783      	b.n	15178 <ctrl_tx_sec_enqueue+0x20>
   15270:	00025ee4 	.word	0x00025ee4
   15274:	00025f24 	.word	0x00025f24
   15278:	00025984 	.word	0x00025984

0001527c <feature_rsp_send.isra.0>:
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1527e:	4606      	mov	r6, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15280:	4824      	ldr	r0, [pc, #144]	; (15314 <feature_rsp_send.isra.0+0x98>)
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   15282:	460d      	mov	r5, r1
   15284:	4617      	mov	r7, r2
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15286:	f7fa f97d 	bl	f584 <mem_acquire>
	if (!tx) {
   1528a:	2800      	cmp	r0, #0
   1528c:	d03e      	beq.n	1530c <feature_rsp_send.isra.0+0x90>
	       (features[1] << 8) | (features[2] << 16);
   1528e:	79bb      	ldrb	r3, [r7, #6]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   15290:	7939      	ldrb	r1, [r7, #4]
	       (features[1] << 8) | (features[2] << 16);
   15292:	4a21      	ldr	r2, [pc, #132]	; (15318 <feature_rsp_send.isra.0+0x9c>)
   15294:	4604      	mov	r4, r0
   15296:	7978      	ldrb	r0, [r7, #5]
   15298:	041b      	lsls	r3, r3, #16
   1529a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1529e:	430b      	orrs	r3, r1
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   152a0:	f8d6 111c 	ldr.w	r1, [r6, #284]	; 0x11c
	conn->common.fex_valid = 1U;
   152a4:	f896 00dc 	ldrb.w	r0, [r6, #220]	; 0xdc
	       (features[1] << 8) | (features[2] << 16);
   152a8:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   152aa:	400b      	ands	r3, r1
   152ac:	f3c3 0310 	ubfx	r3, r3, #0, #17
   152b0:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
   152b4:	79bb      	ldrb	r3, [r7, #6]
   152b6:	f897 c005 	ldrb.w	ip, [r7, #5]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   152ba:	7939      	ldrb	r1, [r7, #4]
	       (features[1] << 8) | (features[2] << 16);
   152bc:	041b      	lsls	r3, r3, #16
   152be:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   152c2:	430b      	orrs	r3, r1
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   152c4:	7921      	ldrb	r1, [r4, #4]
	       (features[1] << 8) | (features[2] << 16);
   152c6:	4313      	orrs	r3, r2
	feat &= LL_FEAT_BIT_MASK;
   152c8:	f3c3 0310 	ubfx	r3, r3, #0, #17
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   152cc:	2709      	movs	r7, #9
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   152ce:	2208      	movs	r2, #8
	conn->common.fex_valid = 1U;
   152d0:	f040 0001 	orr.w	r0, r0, #1
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   152d4:	f041 0103 	orr.w	r1, r1, #3
	conn->llcp_feature.features_peer =
   152d8:	f8c6 3120 	str.w	r3, [r6, #288]	; 0x120
	conn->common.fex_valid = 1U;
   152dc:	f886 00dc 	strb.w	r0, [r6, #220]	; 0xdc
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   152e0:	7121      	strb	r1, [r4, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   152e2:	18a0      	adds	r0, r4, r2
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   152e4:	7167      	strb	r7, [r4, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   152e6:	71e7      	strb	r7, [r4, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   152e8:	2100      	movs	r1, #0
   152ea:	f00c faa7 	bl	2183c <memset>
	feat_result &= 0xFF;
   152ee:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
	dst[0] = val;
   152f2:	7223      	strb	r3, [r4, #8]
	dst[1] = val >> 8;
   152f4:	2249      	movs	r2, #73	; 0x49
	dst[2] = val >> 16;
   152f6:	2301      	movs	r3, #1
	ctrl_tx_sec_enqueue(conn, tx);
   152f8:	4630      	mov	r0, r6
   152fa:	72a3      	strb	r3, [r4, #10]
	dst[1] = val >> 8;
   152fc:	7262      	strb	r2, [r4, #9]
   152fe:	4621      	mov	r1, r4
   15300:	f7ff ff2a 	bl	15158 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15304:	2303      	movs	r3, #3
   15306:	702b      	strb	r3, [r5, #0]
	return 0;
   15308:	2000      	movs	r0, #0
}
   1530a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1530c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   15310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15312:	bf00      	nop
   15314:	200021a4 	.word	0x200021a4
   15318:	fffe30d0 	.word	0xfffe30d0

0001531c <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   1531c:	4801      	ldr	r0, [pc, #4]	; (15324 <ll_conn_acquire+0x8>)
   1531e:	f7fa b931 	b.w	f584 <mem_acquire>
   15322:	bf00      	nop
   15324:	20001f54 	.word	0x20001f54

00015328 <ll_conn_release>:
	mem_release(conn, &conn_free);
   15328:	4901      	ldr	r1, [pc, #4]	; (15330 <ll_conn_release+0x8>)
   1532a:	f7fa b945 	b.w	f5b8 <mem_release>
   1532e:	bf00      	nop
   15330:	20001f54 	.word	0x20001f54

00015334 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   15334:	4902      	ldr	r1, [pc, #8]	; (15340 <ll_conn_handle_get+0xc>)
   15336:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   1533a:	f7fa b959 	b.w	f5f0 <mem_index_get>
   1533e:	bf00      	nop
   15340:	20001f58 	.word	0x20001f58

00015344 <ll_conn_get>:
{
   15344:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15346:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1534a:	4801      	ldr	r0, [pc, #4]	; (15350 <ll_conn_get+0xc>)
   1534c:	f7fa b94c 	b.w	f5e8 <mem_get>
   15350:	20001f58 	.word	0x20001f58

00015354 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15354:	b958      	cbnz	r0, 1536e <ll_connected_get+0x1a>
{
   15356:	b508      	push	{r3, lr}
   15358:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1535a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1535e:	4805      	ldr	r0, [pc, #20]	; (15374 <ll_connected_get+0x20>)
   15360:	f7fa f942 	bl	f5e8 <mem_get>
	if (conn->lll.handle != handle) {
   15364:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15366:	b903      	cbnz	r3, 1536a <ll_connected_get+0x16>
}
   15368:	bd08      	pop	{r3, pc}
		return NULL;
   1536a:	2000      	movs	r0, #0
}
   1536c:	bd08      	pop	{r3, pc}
		return NULL;
   1536e:	2000      	movs	r0, #0
}
   15370:	4770      	bx	lr
   15372:	bf00      	nop
   15374:	20001f58 	.word	0x20001f58

00015378 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   15378:	4801      	ldr	r0, [pc, #4]	; (15380 <ll_tx_mem_acquire+0x8>)
   1537a:	f7fa b903 	b.w	f584 <mem_acquire>
   1537e:	bf00      	nop
   15380:	20002134 	.word	0x20002134

00015384 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   15384:	4901      	ldr	r1, [pc, #4]	; (1538c <ll_tx_mem_release+0x8>)
   15386:	f7fa b917 	b.w	f5b8 <mem_release>
   1538a:	bf00      	nop
   1538c:	20002134 	.word	0x20002134

00015390 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15390:	2800      	cmp	r0, #0
   15392:	d13d      	bne.n	15410 <ll_tx_mem_enqueue+0x80>
{
   15394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15396:	4602      	mov	r2, r0
   15398:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1539a:	481f      	ldr	r0, [pc, #124]	; (15418 <ll_tx_mem_enqueue+0x88>)
   1539c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   153a0:	f7fa f922 	bl	f5e8 <mem_get>
	if (conn->lll.handle != handle) {
   153a4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   153a6:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   153a8:	b9e2      	cbnz	r2, 153e4 <ll_tx_mem_enqueue+0x54>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   153aa:	491c      	ldr	r1, [pc, #112]	; (1541c <ll_tx_mem_enqueue+0x8c>)
   153ac:	78cf      	ldrb	r7, [r1, #3]
	if (last == count) {
   153ae:	784e      	ldrb	r6, [r1, #1]
   153b0:	7888      	ldrb	r0, [r1, #2]
	last = last + 1;
   153b2:	1c7b      	adds	r3, r7, #1
   153b4:	b2db      	uxtb	r3, r3
		last = 0U;
   153b6:	429e      	cmp	r6, r3
   153b8:	bf08      	it	eq
   153ba:	2300      	moveq	r3, #0
	if (last == first) {
   153bc:	4298      	cmp	r0, r3
   153be:	d014      	beq.n	153ea <ll_tx_mem_enqueue+0x5a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   153c0:	460e      	mov	r6, r1
   153c2:	f816 0b04 	ldrb.w	r0, [r6], #4
   153c6:	fb10 f007 	smulbb	r0, r0, r7
	if (!lll_tx) {
   153ca:	1837      	adds	r7, r6, r0
   153cc:	d00d      	beq.n	153ea <ll_tx_mem_enqueue+0x5a>
	lll_tx->handle = handle;
   153ce:	5232      	strh	r2, [r6, r0]
	lll_tx->node = tx;
   153d0:	607d      	str	r5, [r7, #4]
	return hdr->ref;
   153d2:	7c20      	ldrb	r0, [r4, #16]
	*last = idx; /* Commit: Update write index */
   153d4:	70cb      	strb	r3, [r1, #3]
	if (ull_ref_get(&conn->ull)) {
   153d6:	b958      	cbnz	r0, 153f0 <ll_tx_mem_enqueue+0x60>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   153d8:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   153dc:	2b00      	cmp	r3, #0
   153de:	db11      	blt.n	15404 <ll_tx_mem_enqueue+0x74>
	return 0;
   153e0:	2000      	movs	r0, #0
}
   153e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   153e4:	f06f 0015 	mvn.w	r0, #21
}
   153e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   153ea:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   153ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mfy.param = conn;
   153f0:	4b0b      	ldr	r3, [pc, #44]	; (15420 <ll_tx_mem_enqueue+0x90>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   153f2:	2101      	movs	r1, #1
   153f4:	2003      	movs	r0, #3
		mfy.param = conn;
   153f6:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   153f8:	f7fa f99c 	bl	f734 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   153fc:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15400:	2b00      	cmp	r3, #0
   15402:	daed      	bge.n	153e0 <ll_tx_mem_enqueue+0x50>
		ull_slave_latency_cancel(conn, handle);
   15404:	4620      	mov	r0, r4
   15406:	2100      	movs	r1, #0
   15408:	f002 fde2 	bl	17fd0 <ull_slave_latency_cancel>
	return 0;
   1540c:	2000      	movs	r0, #0
}
   1540e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   15410:	f06f 0015 	mvn.w	r0, #21
}
   15414:	4770      	bx	lr
   15416:	bf00      	nop
   15418:	20001f58 	.word	0x20001f58
   1541c:	2000047c 	.word	0x2000047c
   15420:	200004a0 	.word	0x200004a0

00015424 <ll_conn_update>:
{
   15424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15428:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1542c:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   15430:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   15434:	2800      	cmp	r0, #0
   15436:	d154      	bne.n	154e2 <ll_conn_update+0xbe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15438:	460c      	mov	r4, r1
   1543a:	4616      	mov	r6, r2
   1543c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   15440:	4602      	mov	r2, r0
   15442:	4840      	ldr	r0, [pc, #256]	; (15544 <ll_conn_update+0x120>)
   15444:	461d      	mov	r5, r3
   15446:	f7fa f8cf 	bl	f5e8 <mem_get>
	if (conn->lll.handle != handle) {
   1544a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1544c:	2b00      	cmp	r3, #0
   1544e:	d148      	bne.n	154e2 <ll_conn_update+0xbe>
	if (!cmd) {
   15450:	b1e4      	cbz	r4, 1548c <ll_conn_update+0x68>
		cmd--;
   15452:	3c01      	subs	r4, #1
		if (cmd) {
   15454:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   15458:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   1545c:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
   15460:	d04e      	beq.n	15500 <ll_conn_update+0xdc>
			if ((conn->llcp_conn_param.req ==
   15462:	428a      	cmp	r2, r1
   15464:	d03a      	beq.n	154dc <ll_conn_update+0xb8>
			    (conn->llcp_conn_param.state !=
   15466:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
			     conn->llcp_conn_param.ack) ||
   1546a:	f002 0107 	and.w	r1, r2, #7
   1546e:	2903      	cmp	r1, #3
   15470:	d134      	bne.n	154dc <ll_conn_update+0xb8>
			conn->llcp_conn_param.state = cmd;
   15472:	f004 0407 	and.w	r4, r4, #7
   15476:	f044 0408 	orr.w	r4, r4, #8
   1547a:	f022 020f 	bic.w	r2, r2, #15
   1547e:	4314      	orrs	r4, r2
   15480:	f880 4172 	strb.w	r4, [r0, #370]	; 0x172
			conn->llcp_conn_param.status = status;
   15484:	f880 6173 	strb.w	r6, [r0, #371]	; 0x173
	return 0;
   15488:	4618      	mov	r0, r3
   1548a:	e028      	b.n	154de <ll_conn_update+0xba>
		if (!conn->llcp_conn_param.disabled &&
   1548c:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   15490:	06d9      	lsls	r1, r3, #27
   15492:	d529      	bpl.n	154e8 <ll_conn_update+0xc4>
		} else if (conn->lll.role) {
   15494:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   15498:	2b00      	cmp	r3, #0
   1549a:	db4c      	blt.n	15536 <ll_conn_update+0x112>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   1549c:	f890 2104 	ldrb.w	r2, [r0, #260]	; 0x104
   154a0:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
   154a4:	4293      	cmp	r3, r2
   154a6:	d119      	bne.n	154dc <ll_conn_update+0xb8>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   154a8:	f890 2106 	ldrb.w	r2, [r0, #262]	; 0x106
		conn->llcp_cu.interval = interval_max;
   154ac:	f8a0 9108 	strh.w	r9, [r0, #264]	; 0x108
		conn->llcp_cu.req++;
   154b0:	3301      	adds	r3, #1
		conn->llcp_cu.win_size = 1U;
   154b2:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   154b4:	f022 0207 	bic.w	r2, r2, #7
		conn->llcp_cu.req++;
   154b8:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   154bc:	f042 0205 	orr.w	r2, r2, #5
		conn->llcp_cu.win_offset_us = 0U;
   154c0:	2300      	movs	r3, #0
		conn->llcp_cu.win_size = 1U;
   154c2:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
		conn->llcp_cu.latency = latency;
   154c6:	f8a0 810a 	strh.w	r8, [r0, #266]	; 0x10a
		conn->llcp_cu.timeout = timeout;
   154ca:	f8a0 710c 	strh.w	r7, [r0, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   154ce:	f880 2106 	strb.w	r2, [r0, #262]	; 0x106
		conn->llcp_cu.win_offset_us = 0U;
   154d2:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
	return 0;
   154d6:	4618      	mov	r0, r3
}
   154d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   154dc:	200c      	movs	r0, #12
}
   154de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   154e2:	2002      	movs	r0, #2
}
   154e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		    (!conn->common.fex_valid ||
   154e8:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
		if (!conn->llcp_conn_param.disabled &&
   154ec:	07da      	lsls	r2, r3, #31
   154ee:	d503      	bpl.n	154f8 <ll_conn_update+0xd4>
		     (conn->llcp_feature.features_conn &
   154f0:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
		    (!conn->common.fex_valid ||
   154f4:	079b      	lsls	r3, r3, #30
   154f6:	d5cd      	bpl.n	15494 <ll_conn_update+0x70>
   154f8:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   154fc:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
			if (conn->llcp_conn_param.req !=
   15500:	428a      	cmp	r2, r1
   15502:	d1eb      	bne.n	154dc <ll_conn_update+0xb8>
			conn->llcp_conn_param.state = cmd;
   15504:	f8b0 3172 	ldrh.w	r3, [r0, #370]	; 0x172
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15508:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
			conn->llcp_conn_param.interval_min = interval_min;
   1550c:	f8a0 5174 	strh.w	r5, [r0, #372]	; 0x174
			conn->llcp_conn_param.state = cmd;
   15510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
			conn->llcp_conn_param.req++;
   15514:	3201      	adds	r2, #1
			conn->llcp_conn_param.state = cmd;
   15516:	f043 0308 	orr.w	r3, r3, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1551a:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   1551c:	f8a0 9176 	strh.w	r9, [r0, #374]	; 0x176
			conn->llcp_conn_param.req++;
   15520:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
			conn->llcp_conn_param.latency = latency;
   15524:	f8a0 8178 	strh.w	r8, [r0, #376]	; 0x178
			conn->llcp_conn_param.timeout = timeout;
   15528:	f8a0 717a 	strh.w	r7, [r0, #378]	; 0x17a
			conn->llcp_conn_param.state = cmd;
   1552c:	f8a0 3172 	strh.w	r3, [r0, #370]	; 0x172
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15530:	db03      	blt.n	1553a <ll_conn_update+0x116>
	return 0;
   15532:	2000      	movs	r0, #0
   15534:	e7d3      	b.n	154de <ll_conn_update+0xba>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   15536:	201a      	movs	r0, #26
   15538:	e7d1      	b.n	154de <ll_conn_update+0xba>
				ull_slave_latency_cancel(conn, handle);
   1553a:	2100      	movs	r1, #0
   1553c:	f002 fd48 	bl	17fd0 <ull_slave_latency_cancel>
	return 0;
   15540:	2000      	movs	r0, #0
   15542:	e7cc      	b.n	154de <ll_conn_update+0xba>
   15544:	20001f58 	.word	0x20001f58

00015548 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15548:	b9d0      	cbnz	r0, 15580 <ll_chm_get+0x38>
{
   1554a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1554c:	4602      	mov	r2, r0
   1554e:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15550:	480c      	ldr	r0, [pc, #48]	; (15584 <ll_chm_get+0x3c>)
   15552:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   15556:	f7fa f847 	bl	f5e8 <mem_get>
	if (conn->lll.handle != handle) {
   1555a:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1555c:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   1555e:	b96e      	cbnz	r6, 1557c <ll_chm_get+0x34>
   15560:	f100 0738 	add.w	r7, r0, #56	; 0x38
		conn->chm_updated = 0U;
   15564:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
		memcpy(chm, conn->lll.data_chan_map,
   15568:	2205      	movs	r2, #5
   1556a:	4639      	mov	r1, r7
   1556c:	4628      	mov	r0, r5
   1556e:	f00c f93a 	bl	217e6 <memcpy>
	} while (conn->chm_updated);
   15572:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
   15576:	2800      	cmp	r0, #0
   15578:	d1f4      	bne.n	15564 <ll_chm_get+0x1c>
}
   1557a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1557c:	2002      	movs	r0, #2
}
   1557e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15580:	2002      	movs	r0, #2
}
   15582:	4770      	bx	lr
   15584:	20001f58 	.word	0x20001f58

00015588 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15588:	b9e8      	cbnz	r0, 155c6 <ll_terminate_ind_send+0x3e>
{
   1558a:	b538      	push	{r3, r4, r5, lr}
   1558c:	4602      	mov	r2, r0
   1558e:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15590:	480e      	ldr	r0, [pc, #56]	; (155cc <ll_terminate_ind_send+0x44>)
   15592:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   15596:	f7fa f827 	bl	f5e8 <mem_get>
	if (conn->lll.handle != handle) {
   1559a:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   1559c:	b964      	cbnz	r4, 155b8 <ll_terminate_ind_send+0x30>
	conn->llcp_terminate.req++;
   1559e:	f890 212c 	ldrb.w	r2, [r0, #300]	; 0x12c
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   155a2:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_terminate.reason_own = reason;
   155a6:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
	conn->llcp_terminate.req++;
   155aa:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   155ac:	2900      	cmp	r1, #0
	conn->llcp_terminate.req++;
   155ae:	f880 212c 	strb.w	r2, [r0, #300]	; 0x12c
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   155b2:	db03      	blt.n	155bc <ll_terminate_ind_send+0x34>
	return 0;
   155b4:	4620      	mov	r0, r4
}
   155b6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   155b8:	2002      	movs	r0, #2
}
   155ba:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   155bc:	4621      	mov	r1, r4
   155be:	f002 fd07 	bl	17fd0 <ull_slave_latency_cancel>
	return 0;
   155c2:	4620      	mov	r0, r4
}
   155c4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   155c6:	2002      	movs	r0, #2
}
   155c8:	4770      	bx	lr
   155ca:	bf00      	nop
   155cc:	20001f58 	.word	0x20001f58

000155d0 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   155d0:	b9d8      	cbnz	r0, 1560a <ll_feature_req_send+0x3a>
{
   155d2:	b510      	push	{r4, lr}
   155d4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   155d6:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   155da:	480f      	ldr	r0, [pc, #60]	; (15618 <ll_feature_req_send+0x48>)
   155dc:	f7fa f804 	bl	f5e8 <mem_get>
	if (conn->lll.handle != handle) {
   155e0:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   155e2:	b984      	cbnz	r4, 15606 <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   155e4:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
   155e8:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
   155ec:	428a      	cmp	r2, r1
   155ee:	d108      	bne.n	15602 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   155f0:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_feature.req++;
   155f4:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   155f6:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   155f8:	f880 2118 	strb.w	r2, [r0, #280]	; 0x118
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   155fc:	db07      	blt.n	1560e <ll_feature_req_send+0x3e>
	return 0;
   155fe:	4620      	mov	r0, r4
}
   15600:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15602:	200c      	movs	r0, #12
}
   15604:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15606:	2002      	movs	r0, #2
}
   15608:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1560a:	2002      	movs	r0, #2
}
   1560c:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   1560e:	4621      	mov	r1, r4
   15610:	f002 fcde 	bl	17fd0 <ull_slave_latency_cancel>
	return 0;
   15614:	4620      	mov	r0, r4
}
   15616:	bd10      	pop	{r4, pc}
   15618:	20001f58 	.word	0x20001f58

0001561c <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1561c:	b9d8      	cbnz	r0, 15656 <ll_version_ind_send+0x3a>
{
   1561e:	b510      	push	{r4, lr}
   15620:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15622:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   15626:	480f      	ldr	r0, [pc, #60]	; (15664 <ll_version_ind_send+0x48>)
   15628:	f7f9 ffde 	bl	f5e8 <mem_get>
	if (conn->lll.handle != handle) {
   1562c:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   1562e:	b984      	cbnz	r4, 15652 <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   15630:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
   15634:	f890 2125 	ldrb.w	r2, [r0, #293]	; 0x125
   15638:	428a      	cmp	r2, r1
   1563a:	d108      	bne.n	1564e <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1563c:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_version.req++;
   15640:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15642:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   15644:	f880 2124 	strb.w	r2, [r0, #292]	; 0x124
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15648:	db07      	blt.n	1565a <ll_version_ind_send+0x3e>
	return 0;
   1564a:	4620      	mov	r0, r4
}
   1564c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1564e:	200c      	movs	r0, #12
}
   15650:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15652:	2002      	movs	r0, #2
}
   15654:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15656:	2002      	movs	r0, #2
}
   15658:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   1565a:	4621      	mov	r1, r4
   1565c:	f002 fcb8 	bl	17fd0 <ull_slave_latency_cancel>
	return 0;
   15660:	4620      	mov	r0, r4
}
   15662:	bd10      	pop	{r4, pc}
   15664:	20001f58 	.word	0x20001f58

00015668 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15668:	2800      	cmp	r0, #0
   1566a:	d147      	bne.n	156fc <ll_length_req_send+0x94>
{
   1566c:	b538      	push	{r3, r4, r5, lr}
   1566e:	460d      	mov	r5, r1
   15670:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15672:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   15676:	4602      	mov	r2, r0
   15678:	4824      	ldr	r0, [pc, #144]	; (1570c <ll_length_req_send+0xa4>)
   1567a:	f7f9 ffb5 	bl	f5e8 <mem_get>
	if (conn->lll.handle != handle) {
   1567e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15680:	bb1b      	cbnz	r3, 156ca <ll_length_req_send+0x62>
	if (conn->llcp_length.disabled ||
   15682:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   15686:	071a      	lsls	r2, r3, #28
   15688:	d421      	bmi.n	156ce <ll_length_req_send+0x66>
	    (conn->common.fex_valid &&
   1568a:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
	if (conn->llcp_length.disabled ||
   1568e:	07d1      	lsls	r1, r2, #31
   15690:	d503      	bpl.n	1569a <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_DLE)))) {
   15692:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
	    (conn->common.fex_valid &&
   15696:	0692      	lsls	r2, r2, #26
   15698:	d519      	bpl.n	156ce <ll_length_req_send+0x66>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   1569a:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
   1569e:	f890 2199 	ldrb.w	r2, [r0, #409]	; 0x199
   156a2:	428a      	cmp	r2, r1
   156a4:	d017      	beq.n	156d6 <ll_length_req_send+0x6e>
		switch (conn->llcp_length.state) {
   156a6:	f003 0307 	and.w	r3, r3, #7
   156aa:	2b03      	cmp	r3, #3
   156ac:	d004      	beq.n	156b8 <ll_length_req_send+0x50>
   156ae:	3303      	adds	r3, #3
   156b0:	f003 0307 	and.w	r3, r3, #7
   156b4:	2b01      	cmp	r3, #1
   156b6:	d80c      	bhi.n	156d2 <ll_length_req_send+0x6a>
			if (!conn->llcp_length.cache.tx_octets) {
   156b8:	f8b0 31a4 	ldrh.w	r3, [r0, #420]	; 0x1a4
   156bc:	b94b      	cbnz	r3, 156d2 <ll_length_req_send+0x6a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   156be:	f8a0 51a4 	strh.w	r5, [r0, #420]	; 0x1a4
				conn->llcp_length.cache.tx_time = tx_time;
   156c2:	f8a0 41a6 	strh.w	r4, [r0, #422]	; 0x1a6
				return 0;
   156c6:	4618      	mov	r0, r3
}
   156c8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   156ca:	2002      	movs	r0, #2
}
   156cc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   156ce:	201a      	movs	r0, #26
}
   156d0:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   156d2:	200c      	movs	r0, #12
}
   156d4:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   156d6:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   156da:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_length.tx_octets = tx_octets;
   156de:	f8a0 519e 	strh.w	r5, [r0, #414]	; 0x19e
	conn->llcp_length.req++;
   156e2:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   156e4:	f36f 0302 	bfc	r3, #0, #3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   156e8:	2900      	cmp	r1, #0
	conn->llcp_length.req++;
   156ea:	f880 2198 	strb.w	r2, [r0, #408]	; 0x198
	conn->llcp_length.tx_time = tx_time;
   156ee:	f8a0 41a2 	strh.w	r4, [r0, #418]	; 0x1a2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   156f2:	f880 319a 	strb.w	r3, [r0, #410]	; 0x19a
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   156f6:	db03      	blt.n	15700 <ll_length_req_send+0x98>
	return 0;
   156f8:	2000      	movs	r0, #0
}
   156fa:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   156fc:	2002      	movs	r0, #2
}
   156fe:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   15700:	2100      	movs	r1, #0
   15702:	f002 fc65 	bl	17fd0 <ull_slave_latency_cancel>
	return 0;
   15706:	2000      	movs	r0, #0
}
   15708:	bd38      	pop	{r3, r4, r5, pc}
   1570a:	bf00      	nop
   1570c:	20001f58 	.word	0x20001f58

00015710 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   15710:	4a03      	ldr	r2, [pc, #12]	; (15720 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   15712:	4b04      	ldr	r3, [pc, #16]	; (15724 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   15714:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   15716:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   15718:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   1571a:	800b      	strh	r3, [r1, #0]
}
   1571c:	4770      	bx	lr
   1571e:	bf00      	nop
   15720:	20002b0c 	.word	0x20002b0c
   15724:	20002b0e 	.word	0x20002b0e

00015728 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   15728:	4a02      	ldr	r2, [pc, #8]	; (15734 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   1572a:	4b03      	ldr	r3, [pc, #12]	; (15738 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   1572c:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   1572e:	8019      	strh	r1, [r3, #0]
}
   15730:	2000      	movs	r0, #0
   15732:	4770      	bx	lr
   15734:	20002b0c 	.word	0x20002b0c
   15738:	20002b0e 	.word	0x20002b0e

0001573c <ll_length_max_get>:
{
   1573c:	b430      	push	{r4, r5}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   1573e:	251b      	movs	r5, #27
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   15740:	f44f 6429 	mov.w	r4, #2704	; 0xa90
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   15744:	8005      	strh	r5, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   15746:	8015      	strh	r5, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   15748:	800c      	strh	r4, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   1574a:	801c      	strh	r4, [r3, #0]
}
   1574c:	bc30      	pop	{r4, r5}
   1574e:	4770      	bx	lr

00015750 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15750:	b9c0      	cbnz	r0, 15784 <ll_phy_get+0x34>
{
   15752:	b538      	push	{r3, r4, r5, lr}
   15754:	460d      	mov	r5, r1
   15756:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15758:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1575c:	4602      	mov	r2, r0
   1575e:	480a      	ldr	r0, [pc, #40]	; (15788 <ll_phy_get+0x38>)
   15760:	f7f9 ff42 	bl	f5e8 <mem_get>
   15764:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   15766:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   15768:	b950      	cbnz	r0, 15780 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   1576a:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   1576e:	f3c2 0202 	ubfx	r2, r2, #0, #3
   15772:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   15774:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
   15778:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1577c:	7023      	strb	r3, [r4, #0]
}
   1577e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15780:	2002      	movs	r0, #2
}
   15782:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15784:	2002      	movs	r0, #2
}
   15786:	4770      	bx	lr
   15788:	20001f58 	.word	0x20001f58

0001578c <ll_phy_default_set>:
	default_phy_tx = tx;
   1578c:	4a02      	ldr	r2, [pc, #8]	; (15798 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   1578e:	4b03      	ldr	r3, [pc, #12]	; (1579c <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   15790:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   15792:	7019      	strb	r1, [r3, #0]
}
   15794:	2000      	movs	r0, #0
   15796:	4770      	bx	lr
   15798:	20003093 	.word	0x20003093
   1579c:	20003092 	.word	0x20003092

000157a0 <ll_phy_req_send>:
{
   157a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   157a2:	2800      	cmp	r0, #0
   157a4:	d146      	bne.n	15834 <ll_phy_req_send+0x94>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   157a6:	460c      	mov	r4, r1
   157a8:	4615      	mov	r5, r2
   157aa:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   157ae:	4602      	mov	r2, r0
   157b0:	4823      	ldr	r0, [pc, #140]	; (15840 <ll_phy_req_send+0xa0>)
   157b2:	461e      	mov	r6, r3
   157b4:	f7f9 ff18 	bl	f5e8 <mem_get>
	if (conn->lll.handle != handle) {
   157b8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   157ba:	bbdb      	cbnz	r3, 15834 <ll_phy_req_send+0x94>
	if (conn->llcp_phy.disabled ||
   157bc:	f890 71ab 	ldrb.w	r7, [r0, #427]	; 0x1ab
   157c0:	f017 0708 	ands.w	r7, r7, #8
   157c4:	d139      	bne.n	1583a <ll_phy_req_send+0x9a>
	    (conn->common.fex_valid &&
   157c6:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
	if (conn->llcp_phy.disabled ||
   157ca:	07db      	lsls	r3, r3, #31
   157cc:	d504      	bpl.n	157d8 <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_PHY_2M)) &&
   157ce:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   157d2:	f413 6f10 	tst.w	r3, #2304	; 0x900
   157d6:	d030      	beq.n	1583a <ll_phy_req_send+0x9a>
	if ((conn->llcp_req != conn->llcp_ack) ||
   157d8:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   157dc:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   157e0:	429a      	cmp	r2, r3
   157e2:	d124      	bne.n	1582e <ll_phy_req_send+0x8e>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   157e4:	f890 31a8 	ldrb.w	r3, [r0, #424]	; 0x1a8
	if ((conn->llcp_req != conn->llcp_ack) ||
   157e8:	f890 21a9 	ldrb.w	r2, [r0, #425]	; 0x1a9
   157ec:	429a      	cmp	r2, r3
   157ee:	d11e      	bne.n	1582e <ll_phy_req_send+0x8e>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   157f0:	f004 0407 	and.w	r4, r4, #7
   157f4:	00a4      	lsls	r4, r4, #2
   157f6:	f8b0 11aa 	ldrh.w	r1, [r0, #426]	; 0x1aa
   157fa:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   157fe:	f006 0307 	and.w	r3, r6, #7
   15802:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   15806:	f005 0501 	and.w	r5, r5, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1580a:	f990 403d 	ldrsb.w	r4, [r0, #61]	; 0x3d
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1580e:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
   15812:	f401 4179 	and.w	r1, r1, #63744	; 0xf900
	conn->llcp_phy.req++;
   15816:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   15818:	430b      	orrs	r3, r1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1581a:	2c00      	cmp	r4, #0
	conn->llcp_phy.req++;
   1581c:	f880 21a8 	strb.w	r2, [r0, #424]	; 0x1a8
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   15820:	f8a0 31aa 	strh.w	r3, [r0, #426]	; 0x1aa
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15824:	da04      	bge.n	15830 <ll_phy_req_send+0x90>
		ull_slave_latency_cancel(conn, handle);
   15826:	2100      	movs	r1, #0
   15828:	f002 fbd2 	bl	17fd0 <ull_slave_latency_cancel>
   1582c:	e000      	b.n	15830 <ll_phy_req_send+0x90>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1582e:	270c      	movs	r7, #12
}
   15830:	4638      	mov	r0, r7
   15832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15834:	2702      	movs	r7, #2
}
   15836:	4638      	mov	r0, r7
   15838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1583a:	271a      	movs	r7, #26
}
   1583c:	4638      	mov	r0, r7
   1583e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15840:	20001f58 	.word	0x20001f58

00015844 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15844:	b9d8      	cbnz	r0, 1587e <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15846:	4602      	mov	r2, r0
{
   15848:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1584a:	480e      	ldr	r0, [pc, #56]	; (15884 <ll_apto_get+0x40>)
   1584c:	460c      	mov	r4, r1
   1584e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   15852:	f7f9 fec9 	bl	f5e8 <mem_get>
   15856:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   15858:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   1585a:	b970      	cbnz	r0, 1587a <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   1585c:	f8b2 10d2 	ldrh.w	r1, [r2, #210]	; 0xd2
   15860:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
   15862:	4a09      	ldr	r2, [pc, #36]	; (15888 <ll_apto_get+0x44>)
   15864:	fb03 f301 	mul.w	r3, r3, r1
   15868:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   1586c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   15870:	fba2 2303 	umull	r2, r3, r2, r3
   15874:	099b      	lsrs	r3, r3, #6
   15876:	8023      	strh	r3, [r4, #0]
}
   15878:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1587a:	2002      	movs	r0, #2
}
   1587c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1587e:	2002      	movs	r0, #2
}
   15880:	4770      	bx	lr
   15882:	bf00      	nop
   15884:	20001f58 	.word	0x20001f58
   15888:	10624dd3 	.word	0x10624dd3

0001588c <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1588c:	b9d8      	cbnz	r0, 158c6 <ll_apto_set+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1588e:	4602      	mov	r2, r0
{
   15890:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15892:	480e      	ldr	r0, [pc, #56]	; (158cc <ll_apto_set+0x40>)
   15894:	460d      	mov	r5, r1
   15896:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1589a:	f7f9 fea5 	bl	f5e8 <mem_get>
   1589e:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   158a0:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   158a2:	b970      	cbnz	r0, 158c2 <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   158a4:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
   158a6:	f240 44e2 	movw	r4, #1250	; 0x4e2
   158aa:	fb04 f403 	mul.w	r4, r4, r3
   158ae:	f242 7310 	movw	r3, #10000	; 0x2710
   158b2:	fb03 4305 	mla	r3, r3, r5, r4
   158b6:	3b01      	subs	r3, #1
   158b8:	fbb3 f3f4 	udiv	r3, r3, r4
   158bc:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
}
   158c0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   158c2:	2002      	movs	r0, #2
}
   158c4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   158c6:	2002      	movs	r0, #2
}
   158c8:	4770      	bx	lr
   158ca:	bf00      	nop
   158cc:	20001f58 	.word	0x20001f58

000158d0 <ull_conn_init>:
	err = init_reset();
   158d0:	f7ff b9d8 	b.w	14c84 <init_reset>

000158d4 <ull_conn_reset>:
{
   158d4:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   158d6:	2200      	movs	r2, #0
   158d8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   158dc:	4813      	ldr	r0, [pc, #76]	; (1592c <ull_conn_reset+0x58>)
   158de:	f7f9 fe83 	bl	f5e8 <mem_get>
   158e2:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   158e4:	f100 021c 	add.w	r2, r0, #28
   158e8:	4601      	mov	r1, r0
   158ea:	2005      	movs	r0, #5
   158ec:	f7fe fac4 	bl	13e78 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   158f0:	b108      	cbz	r0, 158f6 <ull_conn_reset+0x22>
   158f2:	3045      	adds	r0, #69	; 0x45
   158f4:	d10b      	bne.n	1590e <ull_conn_reset+0x3a>
	MFIFO_INIT(conn_tx);
   158f6:	480e      	ldr	r0, [pc, #56]	; (15930 <ull_conn_reset+0x5c>)
	MFIFO_INIT(conn_ack);
   158f8:	490e      	ldr	r1, [pc, #56]	; (15934 <ull_conn_reset+0x60>)
	conn_upd_curr = NULL;
   158fa:	4a0f      	ldr	r2, [pc, #60]	; (15938 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   158fc:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   158fe:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   15900:	804b      	strh	r3, [r1, #2]
	conn->lll.link_tx_free = NULL;
   15902:	67a3      	str	r3, [r4, #120]	; 0x78
}
   15904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   15908:	6013      	str	r3, [r2, #0]
	err = init_reset();
   1590a:	f7ff b9bb 	b.w	14c84 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1590e:	4a0b      	ldr	r2, [pc, #44]	; (1593c <ull_conn_reset+0x68>)
   15910:	490b      	ldr	r1, [pc, #44]	; (15940 <ull_conn_reset+0x6c>)
   15912:	480c      	ldr	r0, [pc, #48]	; (15944 <ull_conn_reset+0x70>)
   15914:	f240 639c 	movw	r3, #1692	; 0x69c
   15918:	f009 feed 	bl	1f6f6 <printk>
   1591c:	4040      	eors	r0, r0
   1591e:	f380 8811 	msr	BASEPRI, r0
   15922:	f04f 0003 	mov.w	r0, #3
   15926:	df02      	svc	2
   15928:	e7e5      	b.n	158f6 <ull_conn_reset+0x22>
   1592a:	bf00      	nop
   1592c:	20001f58 	.word	0x20001f58
   15930:	2000047c 	.word	0x2000047c
   15934:	20000438 	.word	0x20000438
   15938:	20002120 	.word	0x20002120
   1593c:	00025ee4 	.word	0x00025ee4
   15940:	00025eb8 	.word	0x00025eb8
   15944:	00025984 	.word	0x00025984

00015948 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   15948:	4b01      	ldr	r3, [pc, #4]	; (15950 <ull_conn_default_tx_octets_get+0x8>)
}
   1594a:	8818      	ldrh	r0, [r3, #0]
   1594c:	4770      	bx	lr
   1594e:	bf00      	nop
   15950:	20002b0c 	.word	0x20002b0c

00015954 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   15954:	4b01      	ldr	r3, [pc, #4]	; (1595c <ull_conn_default_tx_time_get+0x8>)
}
   15956:	8818      	ldrh	r0, [r3, #0]
   15958:	4770      	bx	lr
   1595a:	bf00      	nop
   1595c:	20002b0e 	.word	0x20002b0e

00015960 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   15960:	4b01      	ldr	r3, [pc, #4]	; (15968 <ull_conn_default_phy_tx_get+0x8>)
}
   15962:	7818      	ldrb	r0, [r3, #0]
   15964:	4770      	bx	lr
   15966:	bf00      	nop
   15968:	20003093 	.word	0x20003093

0001596c <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   1596c:	4b01      	ldr	r3, [pc, #4]	; (15974 <ull_conn_default_phy_rx_get+0x8>)
}
   1596e:	7818      	ldrb	r0, [r3, #0]
   15970:	4770      	bx	lr
   15972:	bf00      	nop
   15974:	20003092 	.word	0x20003092

00015978 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   15978:	688b      	ldr	r3, [r1, #8]
   1597a:	689b      	ldr	r3, [r3, #8]
{
   1597c:	b410      	push	{r4}
	switch (lll->role) {
   1597e:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   15982:	09e4      	lsrs	r4, r4, #7
	ftr = &(rx->rx_ftr);
   15984:	f101 0208 	add.w	r2, r1, #8
	switch (lll->role) {
   15988:	d002      	beq.n	15990 <ull_conn_setup+0x18>
}
   1598a:	bc10      	pop	{r4}
		ull_slave_setup(link, rx, ftr, lll);
   1598c:	f7ed ba70 	b.w	2e70 <ull_slave_setup>
}
   15990:	bc10      	pop	{r4}
		ull_master_setup(link, rx, ftr, lll);
   15992:	f7ed bc69 	b.w	3268 <ull_master_setup>
   15996:	bf00      	nop

00015998 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   15998:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   1599a:	88da      	ldrh	r2, [r3, #6]
   1599c:	2a00      	cmp	r2, #0
   1599e:	d15e      	bne.n	15a5e <ull_conn_rx+0xc6>
{
   159a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159a4:	460d      	mov	r5, r1
   159a6:	b085      	sub	sp, #20
   159a8:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   159aa:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   159ae:	48b2      	ldr	r0, [pc, #712]	; (15c78 <ull_conn_rx+0x2e0>)
   159b0:	f7f9 fe1a 	bl	f5e8 <mem_get>
	if (conn->lll.handle != handle) {
   159b4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   159b6:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   159b8:	2b00      	cmp	r3, #0
   159ba:	f040 8091 	bne.w	15ae0 <ull_conn_rx+0x148>
	pdu_rx = (void *)(*rx)->pdu;
   159be:	6828      	ldr	r0, [r5, #0]
   159c0:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
	switch (pdu_rx->ll_id) {
   159c4:	7f02      	ldrb	r2, [r0, #28]
   159c6:	f002 0203 	and.w	r2, r2, #3
   159ca:	2a03      	cmp	r2, #3
	pdu_rx = (void *)(*rx)->pdu;
   159cc:	4606      	mov	r6, r0
	switch (pdu_rx->ll_id) {
   159ce:	f001 0c01 	and.w	ip, r1, #1
   159d2:	d12b      	bne.n	15a2c <ull_conn_rx+0x94>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   159d4:	f890 a01f 	ldrb.w	sl, [r0, #31]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   159d8:	f1bc 0f00 	cmp.w	ip, #0
   159dc:	f000 8087 	beq.w	15aee <ull_conn_rx+0x156>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   159e0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   159e4:	2b00      	cmp	r3, #0
   159e6:	f001 0204 	and.w	r2, r1, #4
   159ea:	f2c0 8637 	blt.w	1665c <ull_conn_rx+0xcc4>
	return (!conn->lll.role &&
   159ee:	2a00      	cmp	r2, #0
   159f0:	f040 80e4 	bne.w	15bbc <ull_conn_rx+0x224>
		((!conn->llcp_enc.refresh &&
   159f4:	f1ba 0f02 	cmp.w	sl, #2
   159f8:	f000 832f 	beq.w	1605a <ull_conn_rx+0x6c2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   159fc:	f1ba 0f05 	cmp.w	sl, #5
   15a00:	f000 8568 	beq.w	164d4 <ull_conn_rx+0xb3c>
   15a04:	f1ba 0f06 	cmp.w	sl, #6
   15a08:	f000 86a5 	beq.w	16756 <ull_conn_rx+0xdbe>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15a0c:	f1ba 0f0d 	cmp.w	sl, #13
   15a10:	f000 84c7 	beq.w	163a2 <ull_conn_rx+0xa0a>
   15a14:	f1ba 0f11 	cmp.w	sl, #17
   15a18:	f000 8379 	beq.w	1610e <ull_conn_rx+0x776>
		conn->llcp_terminate.reason_peer =
   15a1c:	233d      	movs	r3, #61	; 0x3d
   15a1e:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15a22:	682b      	ldr	r3, [r5, #0]
   15a24:	2203      	movs	r2, #3
   15a26:	711a      	strb	r2, [r3, #4]

		return 0;
   15a28:	2000      	movs	r0, #0
   15a2a:	e00a      	b.n	15a42 <ull_conn_rx+0xaa>
	switch (pdu_rx->ll_id) {
   15a2c:	b962      	cbnz	r2, 15a48 <ull_conn_rx+0xb0>
		if (conn->llcp_enc.pause_rx) {
   15a2e:	f1bc 0f00 	cmp.w	ip, #0
   15a32:	d003      	beq.n	15a3c <ull_conn_rx+0xa4>
			conn->llcp_terminate.reason_peer =
   15a34:	233d      	movs	r3, #61	; 0x3d
   15a36:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
   15a3a:	6828      	ldr	r0, [r5, #0]
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15a3c:	2303      	movs	r3, #3
   15a3e:	7103      	strb	r3, [r0, #4]
	return 0;
   15a40:	2000      	movs	r0, #0
}
   15a42:	b005      	add	sp, #20
   15a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   15a48:	f1bc 0f00 	cmp.w	ip, #0
   15a4c:	d0f8      	beq.n	15a40 <ull_conn_rx+0xa8>
			conn->llcp_terminate.reason_peer =
   15a4e:	223d      	movs	r2, #61	; 0x3d
   15a50:	f884 212f 	strb.w	r2, [r4, #303]	; 0x12f
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15a54:	682a      	ldr	r2, [r5, #0]
   15a56:	2103      	movs	r1, #3
	return 0;
   15a58:	4618      	mov	r0, r3
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15a5a:	7111      	strb	r1, [r2, #4]
   15a5c:	e7f1      	b.n	15a42 <ull_conn_rx+0xaa>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15a5e:	2203      	movs	r2, #3
   15a60:	711a      	strb	r2, [r3, #4]
		return 0;
   15a62:	2000      	movs	r0, #0
}
   15a64:	4770      	bx	lr
			} else {
				struct pdu_data_llctrl *c = &pdu_rx->llctrl;
				struct pdu_data_llctrl_phy_req *p =
					&c->phy_req;

				conn->llcp_phy.state =
   15a66:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
					LLCP_PHY_STATE_UPD;

				if (conn->llcp_phy.ack ==
   15a6a:	428b      	cmp	r3, r1
				conn->llcp_phy.state =
   15a6c:	f042 0203 	orr.w	r2, r2, #3
   15a70:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
				if (conn->llcp_phy.ack ==
   15a74:	d10f      	bne.n	15a96 <ull_conn_rx+0xfe>
				    conn->llcp_phy.req) {
					conn->llcp_phy.ack--;

					conn->llcp_phy.cmd = 0U;

					conn->llcp_phy.tx =
   15a76:	f8b4 21aa 	ldrh.w	r2, [r4, #426]	; 0x1aa
   15a7a:	4980      	ldr	r1, [pc, #512]	; (15c7c <ull_conn_rx+0x2e4>)
						conn->phy_pref_tx;
					conn->llcp_phy.rx =
						conn->phy_pref_rx;
   15a7c:	f894 01ac 	ldrb.w	r0, [r4, #428]	; 0x1ac
					conn->llcp_phy.tx =
   15a80:	4011      	ands	r1, r2
   15a82:	f240 42fc 	movw	r2, #1276	; 0x4fc
   15a86:	ea02 0280 	and.w	r2, r2, r0, lsl #2
					conn->llcp_phy.ack--;
   15a8a:	3b01      	subs	r3, #1
					conn->llcp_phy.tx =
   15a8c:	430a      	orrs	r2, r1
					conn->llcp_phy.ack--;
   15a8e:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
					conn->llcp_phy.tx =
   15a92:	f8a4 21aa 	strh.w	r2, [r4, #426]	; 0x1aa
				}

				conn->llcp_phy.tx &= p->rx_phys;
				conn->llcp_phy.rx &= p->tx_phys;
   15a96:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
				conn->llcp_phy.tx &= p->rx_phys;
   15a9a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
				conn->llcp_phy.rx &= p->tx_phys;
   15a9e:	f896 1020 	ldrb.w	r1, [r6, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   15aa2:	f3c2 0082 	ubfx	r0, r2, #2, #3
   15aa6:	4003      	ands	r3, r0
				conn->llcp_phy.rx &= p->tx_phys;
   15aa8:	ea01 1152 	and.w	r1, r1, r2, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   15aac:	009b      	lsls	r3, r3, #2
   15aae:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   15ab2:	f002 0203 	and.w	r2, r2, #3
   15ab6:	4313      	orrs	r3, r2

				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   15ab8:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   15abc:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   15ac0:	d002      	beq.n	15ac8 <ull_conn_rx+0x130>
   15ac2:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   15ac6:	d105      	bne.n	15ad4 <ull_conn_rx+0x13c>
					conn->llcp_phy.tx = 0;
   15ac8:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
   15acc:	f003 0303 	and.w	r3, r3, #3
   15ad0:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
					conn->llcp_phy.rx = 0;
				}

				/* pause data packet tx */
				conn->llcp_phy.pause_tx = 1U;
   15ad4:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   15ad8:	f043 0301 	orr.w	r3, r3, #1
   15adc:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab

				/* Mark for buffer for release */
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15ae0:	682b      	ldr	r3, [r5, #0]
   15ae2:	2203      	movs	r2, #3
	int nack = 0;
   15ae4:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15ae6:	711a      	strb	r2, [r3, #4]
}
   15ae8:	b005      	add	sp, #20
   15aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pdu_rx = (void *)(*rx)->pdu;
   15aee:	f100 021c 	add.w	r2, r0, #28
	switch (opcode) {
   15af2:	f1ba 0f19 	cmp.w	sl, #25
   15af6:	d81f      	bhi.n	15b38 <ull_conn_rx+0x1a0>
   15af8:	e8df f01a 	tbh	[pc, sl, lsl #1]
   15afc:	02bb00c4 	.word	0x02bb00c4
   15b00:	049c02af 	.word	0x049c02af
   15b04:	04e704e0 	.word	0x04e704e0
   15b08:	027b0506 	.word	0x027b0506
   15b0c:	0236026b 	.word	0x0236026b
   15b10:	052001e8 	.word	0x052001e8
   15b14:	04530423 	.word	0x04530423
   15b18:	03cf03e4 	.word	0x03cf03e4
   15b1c:	0309033e 	.word	0x0309033e
   15b20:	03ea02f0 	.word	0x03ea02f0
   15b24:	00880088 	.word	0x00880088
   15b28:	01ab03f6 	.word	0x01ab03f6
   15b2c:	01330168 	.word	0x01330168
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   15b30:	7f43      	ldrb	r3, [r0, #29]
   15b32:	2b01      	cmp	r3, #1
   15b34:	f000 850b 	beq.w	1654e <ull_conn_rx+0xbb6>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15b38:	4851      	ldr	r0, [pc, #324]	; (15c80 <ull_conn_rx+0x2e8>)
   15b3a:	f7f9 fd23 	bl	f584 <mem_acquire>
	if (!tx) {
   15b3e:	2800      	cmp	r0, #0
   15b40:	f000 86da 	beq.w	168f8 <ull_conn_rx+0xf60>
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   15b44:	2302      	movs	r3, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   15b46:	7902      	ldrb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   15b48:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   15b4a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu->llctrl.unknown_rsp.type = type;
   15b4e:	f880 a008 	strb.w	sl, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   15b52:	f042 0203 	orr.w	r2, r2, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   15b56:	2107      	movs	r1, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   15b58:	7102      	strb	r2, [r0, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   15b5a:	71c1      	strb	r1, [r0, #7]
	if (
   15b5c:	b303      	cbz	r3, 15ba0 <ull_conn_rx+0x208>
	    !conn->llcp_enc.pause_tx &&
   15b5e:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
   15b62:	0791      	lsls	r1, r2, #30
   15b64:	d41c      	bmi.n	15ba0 <ull_conn_rx+0x208>
	    !conn->llcp_phy.pause_tx &&
   15b66:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
   15b6a:	07d2      	lsls	r2, r2, #31
   15b6c:	d418      	bmi.n	15ba0 <ull_conn_rx+0x208>
		if (conn->tx_head == conn->tx_data) {
   15b6e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
   15b72:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   15b74:	bf04      	itt	eq
   15b76:	681a      	ldreq	r2, [r3, #0]
   15b78:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   15b7c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   15b80:	b99a      	cbnz	r2, 15baa <ull_conn_rx+0x212>
			tx->next = conn->tx_head->next;
   15b82:	681a      	ldr	r2, [r3, #0]
   15b84:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   15b86:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   15b88:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   15b8a:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
	if (!tx->next) {
   15b8e:	2b00      	cmp	r3, #0
   15b90:	f000 858e 	beq.w	166b0 <ull_conn_rx+0xd18>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15b94:	2303      	movs	r3, #3
	return 0;
   15b96:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15b98:	7133      	strb	r3, [r6, #4]
}
   15b9a:	b005      	add	sp, #20
   15b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!conn->tx_ctrl) {
   15ba0:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   15ba4:	2a00      	cmp	r2, #0
   15ba6:	f000 8587 	beq.w	166b8 <ull_conn_rx+0xd20>
	tx->next = conn->tx_ctrl_last->next;
   15baa:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   15bae:	681a      	ldr	r2, [r3, #0]
   15bb0:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   15bb2:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   15bb4:	6803      	ldr	r3, [r0, #0]
   15bb6:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
}
   15bba:	e7e8      	b.n	15b8e <ull_conn_rx+0x1f6>
		 (conn->llcp_enc.refresh &&
   15bbc:	f1ba 0f02 	cmp.w	sl, #2
   15bc0:	f000 824b 	beq.w	1605a <ull_conn_rx+0x6c2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   15bc4:	f1ba 0f0b 	cmp.w	sl, #11
   15bc8:	f000 857d 	beq.w	166c6 <ull_conn_rx+0xd2e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   15bcc:	f1ba 0f04 	cmp.w	sl, #4
   15bd0:	f47f af14 	bne.w	159fc <ull_conn_rx+0x64>
		if (conn->lll.role ||
   15bd4:	7f73      	ldrb	r3, [r6, #29]
   15bd6:	2b0d      	cmp	r3, #13
   15bd8:	d1ae      	bne.n	15b38 <ull_conn_rx+0x1a0>
		memcpy(&conn->llcp.encryption.skd[8],
   15bda:	2208      	movs	r2, #8
   15bdc:	f106 0120 	add.w	r1, r6, #32
   15be0:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
   15be4:	f00b fdff 	bl	217e6 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   15be8:	f106 0128 	add.w	r1, r6, #40	; 0x28
   15bec:	2204      	movs	r2, #4
   15bee:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   15bf2:	f00b fdf8 	bl	217e6 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   15bf6:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15bfa:	682a      	ldr	r2, [r5, #0]
		conn->llcp_enc.pause_rx = 1U;
   15bfc:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15c00:	2103      	movs	r1, #3
		conn->llcp_enc.pause_rx = 1U;
   15c02:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	int nack = 0;
   15c06:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15c08:	7111      	strb	r1, [r2, #4]
		break;
   15c0a:	e71a      	b.n	15a42 <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   15c0c:	7f43      	ldrb	r3, [r0, #29]
   15c0e:	2b09      	cmp	r3, #9
   15c10:	d192      	bne.n	15b38 <ull_conn_rx+0x1a0>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   15c12:	f1ba 0f14 	cmp.w	sl, #20
   15c16:	f000 85b0 	beq.w	1677a <ull_conn_rx+0xde2>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   15c1a:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
	if (/* Local idle, and Peer request then complete the Peer procedure
   15c1e:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
	eff_rx_octets = conn->lll.max_rx_octets;
   15c22:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
   15c26:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   15c28:	428a      	cmp	r2, r1
	eff_tx_octets = conn->lll.max_tx_octets;
   15c2a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   15c2e:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   15c32:	f8b4 9060 	ldrh.w	r9, [r4, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   15c36:	9100      	str	r1, [sp, #0]
	eff_tx_octets = conn->lll.max_tx_octets;
   15c38:	9302      	str	r3, [sp, #8]
	if (/* Local idle, and Peer request then complete the Peer procedure
   15c3a:	f001 8229 	beq.w	17090 <ull_conn_rx+0x16f8>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   15c3e:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
	struct node_tx *tx = NULL;
   15c42:	2100      	movs	r1, #0
	       tx) ||
   15c44:	f002 0207 	and.w	r2, r2, #7
   15c48:	2a02      	cmp	r2, #2
   15c4a:	f000 85af 	beq.w	167ac <ull_conn_rx+0xe14>
   15c4e:	f896 a01f 	ldrb.w	sl, [r6, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   15c52:	f1ba 0f15 	cmp.w	sl, #21
   15c56:	f43f aef3 	beq.w	15a40 <ull_conn_rx+0xa8>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   15c5a:	4608      	mov	r0, r1
   15c5c:	4908      	ldr	r1, [pc, #32]	; (15c80 <ull_conn_rx+0x2e8>)
   15c5e:	f7f9 fcab 	bl	f5b8 <mem_release>
			if (conn->llcp_length.state ==
   15c62:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
   15c66:	f003 0307 	and.w	r3, r3, #7
   15c6a:	2b04      	cmp	r3, #4
   15c6c:	f47f aee8 	bne.w	15a40 <ull_conn_rx+0xa8>
				return -EBUSY;
   15c70:	f06f 000f 	mvn.w	r0, #15
   15c74:	e6e5      	b.n	15a42 <ull_conn_rx+0xaa>
   15c76:	bf00      	nop
   15c78:	20001f58 	.word	0x20001f58
   15c7c:	fffffb03 	.word	0xfffffb03
   15c80:	200021a4 	.word	0x200021a4
		if (!conn->lll.role ||
   15c84:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15c88:	2b00      	cmp	r3, #0
   15c8a:	f6bf af55 	bge.w	15b38 <ull_conn_rx+0x1a0>
   15c8e:	7f43      	ldrb	r3, [r0, #29]
   15c90:	2b0c      	cmp	r3, #12
   15c92:	f47f af51 	bne.w	15b38 <ull_conn_rx+0x1a0>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   15c96:	f8b0 0029 	ldrh.w	r0, [r0, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   15c9a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   15c9c:	1ac3      	subs	r3, r0, r3
   15c9e:	041b      	lsls	r3, r3, #16
   15ca0:	f101 808a 	bmi.w	16db8 <ull_conn_rx+0x1420>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   15ca4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15ca8:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   15cac:	1a9b      	subs	r3, r3, r2
   15cae:	f003 0303 	and.w	r3, r3, #3
   15cb2:	2b02      	cmp	r3, #2
   15cb4:	f001 80b3 	beq.w	16e1e <ull_conn_rx+0x1486>
	if (!conn_upd_curr) {
   15cb8:	4be1      	ldr	r3, [pc, #900]	; (16040 <ull_conn_rx+0x6a8>)
   15cba:	681a      	ldr	r2, [r3, #0]
   15cbc:	2a00      	cmp	r2, #0
   15cbe:	f001 80fe 	beq.w	16ebe <ull_conn_rx+0x1526>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   15cc2:	f896 3020 	ldrb.w	r3, [r6, #32]
   15cc6:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   15cca:	f8b6 1021 	ldrh.w	r1, [r6, #33]	; 0x21
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   15cce:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   15cd2:	f240 42e2 	movw	r2, #1250	; 0x4e2
   15cd6:	fb02 f201 	mul.w	r2, r2, r1
	conn->llcp_cu.win_offset_us =
   15cda:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   15cde:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
   15ce2:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   15ce6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.interval =
   15cea:	f8a4 2108 	strh.w	r2, [r4, #264]	; 0x108
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   15cee:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
   15cf2:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
   15cf6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.latency =
   15cfa:	f8a4 210a 	strh.w	r2, [r4, #266]	; 0x10a
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   15cfe:	f896 1027 	ldrb.w	r1, [r6, #39]	; 0x27
	conn->llcp_cu.ack--;
   15d02:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   15d06:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   15d0a:	f8a4 00ec 	strh.w	r0, [r4, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   15d0e:	f023 0307 	bic.w	r3, r3, #7
	link->mem = conn->llcp_rx;
   15d12:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   15d16:	f043 0304 	orr.w	r3, r3, #4
	conn->llcp_cu.ack--;
   15d1a:	3a01      	subs	r2, #1
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   15d1c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	conn->llcp_cu.ack--;
   15d20:	f884 2105 	strb.w	r2, [r4, #261]	; 0x105
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   15d24:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
	conn->llcp_cu.timeout =
   15d28:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
	link->mem = conn->llcp_rx;
   15d2c:	6078      	str	r0, [r7, #4]
	(*rx)->hdr.link = link;
   15d2e:	682b      	ldr	r3, [r5, #0]
   15d30:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   15d32:	682b      	ldr	r3, [r5, #0]
   15d34:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	*rx = NULL;
   15d38:	2300      	movs	r3, #0
   15d3a:	602b      	str	r3, [r5, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   15d3c:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
   15d40:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
   15d44:	4293      	cmp	r3, r2
   15d46:	d007      	beq.n	15d58 <ull_conn_rx+0x3c0>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   15d48:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   15d4c:	f003 0307 	and.w	r3, r3, #7
   15d50:	2b04      	cmp	r3, #4
   15d52:	d101      	bne.n	15d58 <ull_conn_rx+0x3c0>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15d54:	f884 2171 	strb.w	r2, [r4, #369]	; 0x171
		conn->procedure_expire = 0U;
   15d58:	2300      	movs	r3, #0
   15d5a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   15d5e:	4618      	mov	r0, r3
		break;
   15d60:	e66f      	b.n	15a42 <ull_conn_rx+0xaa>
	break;
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   15d62:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15d66:	2b00      	cmp	r3, #0
   15d68:	f6ff aee6 	blt.w	15b38 <ull_conn_rx+0x1a0>
   15d6c:	7f47      	ldrb	r7, [r0, #29]
   15d6e:	2f03      	cmp	r7, #3
   15d70:	f47f aee2 	bne.w	15b38 <ull_conn_rx+0x1a0>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   15d74:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
					 conn->lll.phy_rx))) {
   15d78:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
			if (!(p->phys & (conn->lll.phy_tx |
   15d7c:	f890 2020 	ldrb.w	r2, [r0, #32]
   15d80:	430b      	orrs	r3, r1
   15d82:	f003 0307 	and.w	r3, r3, #7
   15d86:	4213      	tst	r3, r2
   15d88:	f43f ae5a 	beq.w	15a40 <ull_conn_rx+0xa8>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   15d8c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15d90:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   15d94:	1a9b      	subs	r3, r3, r2
   15d96:	f003 0303 	and.w	r3, r3, #3
   15d9a:	2b02      	cmp	r3, #2
   15d9c:	f43f ae50 	beq.w	15a40 <ull_conn_rx+0xa8>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   15da0:	f104 00ed 	add.w	r0, r4, #237	; 0xed
   15da4:	f002 fd44 	bl	18830 <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   15da8:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.chan_map.initiate = 1U;
   15dac:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			conn->llcp_ack -= 2U;
   15db0:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   15db2:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   15db4:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp_type = LLCP_CHAN_MAP;
   15db8:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15dbc:	682a      	ldr	r2, [r5, #0]
			conn->llcp.chan_map.initiate = 1U;
   15dbe:	f043 0301 	orr.w	r3, r3, #1
   15dc2:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	int nack = 0;
   15dc6:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15dc8:	7117      	strb	r7, [r2, #4]

		break;
   15dca:	e63a      	b.n	15a42 <ull_conn_rx+0xaa>
		if (!conn->lll.role ||
   15dcc:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15dd0:	2b00      	cmp	r3, #0
   15dd2:	f6bf aeb1 	bge.w	15b38 <ull_conn_rx+0x1a0>
   15dd6:	7f43      	ldrb	r3, [r0, #29]
   15dd8:	2b05      	cmp	r3, #5
   15dda:	f47f aead 	bne.w	15b38 <ull_conn_rx+0x1a0>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   15dde:	f890 1020 	ldrb.w	r1, [r0, #32]
   15de2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   15de6:	ea41 0003 	orr.w	r0, r1, r3
   15dea:	f010 0007 	ands.w	r0, r0, #7
   15dee:	f040 8720 	bne.w	16c32 <ull_conn_rx+0x129a>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   15df2:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   15df6:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   15dfa:	428b      	cmp	r3, r1
   15dfc:	f43f aeca 	beq.w	15b94 <ull_conn_rx+0x1fc>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   15e00:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   15e04:	f003 0303 	and.w	r3, r3, #3
   15e08:	2b02      	cmp	r3, #2
   15e0a:	f47f aec3 	bne.w	15b94 <ull_conn_rx+0x1fc>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   15e0e:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   15e12:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
   15e16:	f884 11a9 	strb.w	r1, [r4, #425]	; 0x1a9
		conn->llcp_phy.pause_tx = 0U;
   15e1a:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   15e1e:	4611      	mov	r1, r2
   15e20:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   15e24:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		if (!conn->llcp_phy.cmd) {
   15e28:	f013 0304 	ands.w	r3, r3, #4
		conn->procedure_expire = 0U;
   15e2c:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   15e30:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
   15e34:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   15e38:	f43f ae0c 	beq.w	15a54 <ull_conn_rx+0xbc>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15e3c:	682b      	ldr	r3, [r5, #0]
   15e3e:	2117      	movs	r1, #23
   15e40:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
   15e42:	7730      	strb	r0, [r6, #28]
		p->tx = conn->lll.phy_tx;
   15e44:	7772      	strb	r2, [r6, #29]
		p->rx = conn->lll.phy_rx;
   15e46:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   15e4a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15e4e:	77b3      	strb	r3, [r6, #30]
		if (err) {
   15e50:	e5f7      	b.n	15a42 <ull_conn_rx+0xaa>
		if (conn->lll.role ||
   15e52:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15e56:	2b00      	cmp	r3, #0
   15e58:	f6ff ae6e 	blt.w	15b38 <ull_conn_rx+0x1a0>
   15e5c:	7f43      	ldrb	r3, [r0, #29]
   15e5e:	2b03      	cmp	r3, #3
   15e60:	f47f ae6a 	bne.w	15b38 <ull_conn_rx+0x1a0>
		if (!conn->lll.role &&
   15e64:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
   15e68:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   15e6c:	429a      	cmp	r2, r3
   15e6e:	f43f ae91 	beq.w	15b94 <ull_conn_rx+0x1fc>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   15e72:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   15e76:	f001 0303 	and.w	r3, r1, #3
   15e7a:	2b02      	cmp	r3, #2
   15e7c:	f47f ae8a 	bne.w	15b94 <ull_conn_rx+0x1fc>
			conn->llcp_phy.tx &= p->rx_phys;
   15e80:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
			conn->llcp_phy.rx &= p->tx_phys;
   15e84:	f890 2020 	ldrb.w	r2, [r0, #32]
			conn->llcp_phy.tx &= p->rx_phys;
   15e88:	f3c1 0082 	ubfx	r0, r1, #2, #3
   15e8c:	4003      	ands	r3, r0
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   15e8e:	009b      	lsls	r3, r3, #2
   15e90:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   15e94:	ea02 1251 	and.w	r2, r2, r1, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   15e98:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   15e9c:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   15ea0:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   15ea4:	d002      	beq.n	15eac <ull_conn_rx+0x514>
   15ea6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   15eaa:	d105      	bne.n	15eb8 <ull_conn_rx+0x520>
				conn->llcp_phy.tx = 0;
   15eac:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
   15eb0:	f003 0303 	and.w	r3, r3, #3
   15eb4:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
			conn->llcp_phy.pause_tx = 1U;
   15eb8:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
			conn->procedure_expire = 0U;
   15ebc:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   15ebe:	f043 0301 	orr.w	r3, r3, #1
   15ec2:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
			conn->procedure_expire = 0U;
   15ec6:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15eca:	e663      	b.n	15b94 <ull_conn_rx+0x1fc>
		if (!conn->lll.role ||
   15ecc:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15ed0:	2b00      	cmp	r3, #0
   15ed2:	f6bf ae31 	bge.w	15b38 <ull_conn_rx+0x1a0>
   15ed6:	7f45      	ldrb	r5, [r0, #29]
   15ed8:	2d01      	cmp	r5, #1
   15eda:	f47f ae2d 	bne.w	15b38 <ull_conn_rx+0x1a0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15ede:	4859      	ldr	r0, [pc, #356]	; (16044 <ull_conn_rx+0x6ac>)
   15ee0:	f7f9 fb50 	bl	f584 <mem_acquire>
		if (!tx) {
   15ee4:	4603      	mov	r3, r0
   15ee6:	2800      	cmp	r0, #0
   15ee8:	f000 8506 	beq.w	168f8 <ull_conn_rx+0xf60>
	conn->llcp_enc.pause_rx = 1U;
   15eec:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
   15ef0:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   15ef4:	f022 0205 	bic.w	r2, r2, #5
	conn->lll.enc_rx = 0;
   15ef8:	f36f 01c3 	bfc	r1, #3, #1
   15efc:	f884 107e 	strb.w	r1, [r4, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   15f00:	f042 0205 	orr.w	r2, r2, #5
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15f04:	7901      	ldrb	r1, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   15f06:	f884 2152 	strb.w	r2, [r4, #338]	; 0x152
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   15f0a:	7145      	strb	r5, [r0, #5]
	    conn->tx_head &&
   15f0c:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15f10:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   15f14:	200b      	movs	r0, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15f16:	7119      	strb	r1, [r3, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   15f18:	71d8      	strb	r0, [r3, #7]
	if (
   15f1a:	2a00      	cmp	r2, #0
   15f1c:	f000 8421 	beq.w	16762 <ull_conn_rx+0xdca>
	    !conn->llcp_enc.pause_tx &&
   15f20:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
	    conn->tx_head &&
   15f24:	0788      	lsls	r0, r1, #30
   15f26:	f100 841c 	bmi.w	16762 <ull_conn_rx+0xdca>
	    !conn->llcp_phy.pause_tx &&
   15f2a:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
   15f2e:	07c9      	lsls	r1, r1, #31
   15f30:	f100 8417 	bmi.w	16762 <ull_conn_rx+0xdca>
		if (conn->tx_head == conn->tx_data) {
   15f34:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   15f38:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   15f3a:	bf04      	itt	eq
   15f3c:	6811      	ldreq	r1, [r2, #0]
   15f3e:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   15f42:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   15f46:	2900      	cmp	r1, #0
   15f48:	f001 80e2 	beq.w	17110 <ull_conn_rx+0x1778>
	tx->next = conn->tx_ctrl_last->next;
   15f4c:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
   15f50:	6811      	ldr	r1, [r2, #0]
   15f52:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   15f54:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
   15f56:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
	if (!tx->next) {
   15f5a:	681a      	ldr	r2, [r3, #0]
   15f5c:	2a00      	cmp	r2, #0
   15f5e:	f47f ae19 	bne.w	15b94 <ull_conn_rx+0x1fc>
		conn->tx_data_last = tx;
   15f62:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
   15f66:	e615      	b.n	15b94 <ull_conn_rx+0x1fc>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   15f68:	7f43      	ldrb	r3, [r0, #29]
   15f6a:	2b09      	cmp	r3, #9
   15f6c:	f47f ade4 	bne.w	15b38 <ull_conn_rx+0x1a0>
	       (features[1] << 8) | (features[2] << 16);
   15f70:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   15f74:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   15f78:	f896 2020 	ldrb.w	r2, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   15f7c:	4932      	ldr	r1, [pc, #200]	; (16048 <ull_conn_rx+0x6b0>)
   15f7e:	041b      	lsls	r3, r3, #16
   15f80:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   15f84:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   15f86:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
	conn->common.fex_valid = 1U;
   15f8a:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
	       (features[1] << 8) | (features[2] << 16);
   15f8e:	430b      	orrs	r3, r1
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   15f90:	4003      	ands	r3, r0
   15f92:	f3c3 0310 	ubfx	r3, r3, #0, #17
   15f96:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
   15f9a:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   15f9e:	f896 5021 	ldrb.w	r5, [r6, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   15fa2:	f896 0020 	ldrb.w	r0, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   15fa6:	041b      	lsls	r3, r3, #16
   15fa8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   15fac:	4303      	orrs	r3, r0
   15fae:	430b      	orrs	r3, r1
	feat &= LL_FEAT_BIT_MASK;
   15fb0:	f3c3 0310 	ubfx	r3, r3, #0, #17
	conn->llcp_feature.ack = conn->llcp_feature.req;
   15fb4:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
	conn->llcp_feature.features_peer =
   15fb8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	conn->common.fex_valid = 1U;
   15fbc:	f042 0201 	orr.w	r2, r2, #1
	conn->procedure_expire = 0U;
   15fc0:	2300      	movs	r3, #0
	conn->common.fex_valid = 1U;
   15fc2:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
	conn->llcp_feature.ack = conn->llcp_feature.req;
   15fc6:	f884 1119 	strb.w	r1, [r4, #281]	; 0x119
	conn->procedure_expire = 0U;
   15fca:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   15fce:	4618      	mov	r0, r3
}
   15fd0:	e537      	b.n	15a42 <ull_conn_rx+0xaa>
		if (!conn->lll.role ||
   15fd2:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15fd6:	2b00      	cmp	r3, #0
   15fd8:	f6bf adae 	bge.w	15b38 <ull_conn_rx+0x1a0>
		if (conn->lll.role ||
   15fdc:	7f73      	ldrb	r3, [r6, #29]
   15fde:	2b09      	cmp	r3, #9
   15fe0:	f47f adaa 	bne.w	15b38 <ull_conn_rx+0x1a0>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   15fe4:	1d31      	adds	r1, r6, #4
   15fe6:	4620      	mov	r0, r4
}
   15fe8:	b005      	add	sp, #20
   15fea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   15fee:	f7ff b945 	b.w	1527c <feature_rsp_send.isra.0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   15ff2:	7f73      	ldrb	r3, [r6, #29]
   15ff4:	2b02      	cmp	r3, #2
   15ff6:	f47f ad9f 	bne.w	15b38 <ull_conn_rx+0x1a0>
		} else if ((conn->llcp_conn_param.ack !=
   15ffa:	f894 1171 	ldrb.w	r1, [r4, #369]	; 0x171
   15ffe:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   16002:	f896 2020 	ldrb.w	r2, [r6, #32]
   16006:	4299      	cmp	r1, r3
   16008:	d002      	beq.n	16010 <ull_conn_rx+0x678>
			    conn->llcp_conn_param.req) &&
   1600a:	2a0f      	cmp	r2, #15
   1600c:	f000 8510 	beq.w	16a30 <ull_conn_rx+0x1098>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   16010:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
   16014:	f894 1199 	ldrb.w	r1, [r4, #409]	; 0x199
   16018:	4299      	cmp	r1, r3
   1601a:	d002      	beq.n	16022 <ull_conn_rx+0x68a>
   1601c:	2a14      	cmp	r2, #20
   1601e:	f000 86b7 	beq.w	16d90 <ull_conn_rx+0x13f8>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   16022:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   16026:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   1602a:	428b      	cmp	r3, r1
   1602c:	d002      	beq.n	16034 <ull_conn_rx+0x69c>
   1602e:	2a16      	cmp	r2, #22
   16030:	f000 86f9 	beq.w	16e26 <ull_conn_rx+0x148e>
			switch (llctrl->unknown_rsp.type) {
   16034:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16036:	bf04      	itt	eq
   16038:	2303      	moveq	r3, #3
   1603a:	7133      	strbeq	r3, [r6, #4]
				break;
   1603c:	e68c      	b.n	15d58 <ull_conn_rx+0x3c0>
   1603e:	bf00      	nop
   16040:	20002120 	.word	0x20002120
   16044:	200021a4 	.word	0x200021a4
   16048:	fffe30d0 	.word	0xfffe30d0
		((!conn->llcp_enc.refresh &&
   1604c:	f1ba 0f07 	cmp.w	sl, #7
   16050:	d0cf      	beq.n	15ff2 <ull_conn_rx+0x65a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   16052:	f1ba 0f02 	cmp.w	sl, #2
   16056:	f040 8310 	bne.w	1667a <ull_conn_rx+0xce2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   1605a:	7f73      	ldrb	r3, [r6, #29]
   1605c:	2b02      	cmp	r3, #2
   1605e:	f47f ad6b 	bne.w	15b38 <ull_conn_rx+0x1a0>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   16062:	f896 3020 	ldrb.w	r3, [r6, #32]
   16066:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1606a:	2303      	movs	r3, #3
   1606c:	7133      	strb	r3, [r6, #4]
	int nack = 0;
   1606e:	2000      	movs	r0, #0
}
   16070:	e4e7      	b.n	15a42 <ull_conn_rx+0xaa>
		if (!conn->lll.role ||
   16072:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   16076:	2b00      	cmp	r3, #0
   16078:	f6bf ad5e 	bge.w	15b38 <ull_conn_rx+0x1a0>
   1607c:	7f43      	ldrb	r3, [r0, #29]
   1607e:	2b08      	cmp	r3, #8
   16080:	f47f ad5a 	bne.w	15b38 <ull_conn_rx+0x1a0>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   16084:	f8b0 5025 	ldrh.w	r5, [r0, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   16088:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   1608a:	1aeb      	subs	r3, r5, r3
   1608c:	041f      	lsls	r7, r3, #16
   1608e:	f100 8693 	bmi.w	16db8 <ull_conn_rx+0x1420>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   16092:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   16096:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   1609a:	1a9b      	subs	r3, r3, r2
   1609c:	f003 0303 	and.w	r3, r3, #3
   160a0:	2b02      	cmp	r3, #2
   160a2:	f000 86bc 	beq.w	16e1e <ull_conn_rx+0x1486>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   160a6:	f100 0120 	add.w	r1, r0, #32
   160aa:	2205      	movs	r2, #5
   160ac:	f104 00ed 	add.w	r0, r4, #237	; 0xed
   160b0:	f00b fb99 	bl	217e6 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   160b4:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn->llcp_ack -= 2U;
   160b8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	conn->llcp.chan_map.instant = instant;
   160bc:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
	conn->llcp_type = LLCP_CHAN_MAP;
   160c0:	2002      	movs	r0, #2
	conn->llcp.chan_map.initiate = 0U;
   160c2:	f36f 0200 	bfc	r2, #0, #1
	conn->llcp_ack -= 2U;
   160c6:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   160c8:	2103      	movs	r1, #3
	conn->llcp_type = LLCP_CHAN_MAP;
   160ca:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
	conn->llcp.chan_map.initiate = 0U;
   160ce:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
	conn->llcp_ack -= 2U;
   160d2:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	int nack = 0;
   160d6:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   160d8:	7131      	strb	r1, [r6, #4]
		if (err) {
   160da:	e4b2      	b.n	15a42 <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
   160dc:	7f45      	ldrb	r5, [r0, #29]
   160de:	2d01      	cmp	r5, #1
   160e0:	f47f ad2a 	bne.w	15b38 <ull_conn_rx+0x1a0>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   160e4:	48d1      	ldr	r0, [pc, #836]	; (1642c <ull_conn_rx+0xa94>)
   160e6:	f7f9 fa4d 	bl	f584 <mem_acquire>
	if (!tx) {
   160ea:	4601      	mov	r1, r0
   160ec:	2800      	cmp	r0, #0
   160ee:	f000 8403 	beq.w	168f8 <ull_conn_rx+0xf60>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   160f2:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   160f4:	7145      	strb	r5, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   160f6:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   160fa:	2213      	movs	r2, #19
	ctrl_tx_sec_enqueue(conn, tx);
   160fc:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   160fe:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   16100:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   16102:	f7ff f829 	bl	15158 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16106:	2303      	movs	r3, #3
   16108:	7133      	strb	r3, [r6, #4]
	return 0;
   1610a:	2000      	movs	r0, #0
   1610c:	e499      	b.n	15a42 <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   1610e:	7f73      	ldrb	r3, [r6, #29]
   16110:	2b03      	cmp	r3, #3
   16112:	f47f ad11 	bne.w	15b38 <ull_conn_rx+0x1a0>
	switch (rej_ext_ind->reject_opcode) {
   16116:	f896 3020 	ldrb.w	r3, [r6, #32]
   1611a:	3b03      	subs	r3, #3
   1611c:	2b13      	cmp	r3, #19
   1611e:	f63f ad39 	bhi.w	15b94 <ull_conn_rx+0x1fc>
   16122:	a201      	add	r2, pc, #4	; (adr r2, 16128 <ull_conn_rx+0x790>)
   16124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16128:	00016603 	.word	0x00016603
   1612c:	00015b95 	.word	0x00015b95
   16130:	00015b95 	.word	0x00015b95
   16134:	00015b95 	.word	0x00015b95
   16138:	00015b95 	.word	0x00015b95
   1613c:	00015b95 	.word	0x00015b95
   16140:	00015b95 	.word	0x00015b95
   16144:	00015b95 	.word	0x00015b95
   16148:	00015b95 	.word	0x00015b95
   1614c:	00015b95 	.word	0x00015b95
   16150:	00015b95 	.word	0x00015b95
   16154:	00015b95 	.word	0x00015b95
   16158:	0001659d 	.word	0x0001659d
   1615c:	00015b95 	.word	0x00015b95
   16160:	00015b95 	.word	0x00015b95
   16164:	00015b95 	.word	0x00015b95
   16168:	00015b95 	.word	0x00015b95
   1616c:	0001655f 	.word	0x0001655f
   16170:	00015b95 	.word	0x00015b95
   16174:	00016643 	.word	0x00016643
		if (conn->lll.role ||
   16178:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1617c:	2b00      	cmp	r3, #0
   1617e:	f6ff acdb 	blt.w	15b38 <ull_conn_rx+0x1a0>
   16182:	7f43      	ldrb	r3, [r0, #29]
   16184:	2b18      	cmp	r3, #24
   16186:	f47f acd7 	bne.w	15b38 <ull_conn_rx+0x1a0>
		if (!conn->lll.role &&
   1618a:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
   1618e:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
   16192:	429a      	cmp	r2, r3
   16194:	f43f acfe 	beq.w	15b94 <ull_conn_rx+0x1fc>
		    (conn->llcp_conn_param.state ==
   16198:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		     conn->llcp_conn_param.ack) &&
   1619c:	f003 0307 	and.w	r3, r3, #7
   161a0:	2b04      	cmp	r3, #4
   161a2:	f47f acf7 	bne.w	15b94 <ull_conn_rx+0x1fc>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   161a6:	8c07      	ldrh	r7, [r0, #32]
			if ((interval_min < 6) ||
   161a8:	2f05      	cmp	r7, #5
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   161aa:	b2ba      	uxth	r2, r7
			if ((interval_min < 6) ||
   161ac:	f240 8631 	bls.w	16e12 <ull_conn_rx+0x147a>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   161b0:	8c40      	ldrh	r0, [r0, #34]	; 0x22
			if ((interval_min < 6) ||
   161b2:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   161b6:	b283      	uxth	r3, r0
			if ((interval_min < 6) ||
   161b8:	f200 862b 	bhi.w	16e12 <ull_conn_rx+0x147a>
			    (interval_max > 3200) ||
   161bc:	429a      	cmp	r2, r3
   161be:	f200 8628 	bhi.w	16e12 <ull_conn_rx+0x147a>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   161c2:	8cb1      	ldrh	r1, [r6, #36]	; 0x24
			    (interval_min > interval_max) ||
   161c4:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   161c8:	fa1f fc81 	uxth.w	ip, r1
			    (interval_min > interval_max) ||
   161cc:	f080 8621 	bcs.w	16e12 <ull_conn_rx+0x147a>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   161d0:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
			    (latency > 499) ||
   161d2:	f1a2 0e0a 	sub.w	lr, r2, #10
   161d6:	fa1f fe8e 	uxth.w	lr, lr
   161da:	f640 4976 	movw	r9, #3190	; 0xc76
   161de:	45ce      	cmp	lr, r9
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   161e0:	fa1f f882 	uxth.w	r8, r2
			    (latency > 499) ||
   161e4:	f200 8615 	bhi.w	16e12 <ull_conn_rx+0x147a>
			     ((latency + 1) * interval_max)) ||
   161e8:	fb0c 3c03 	mla	ip, ip, r3, r3
			    (timeout < 10) || (timeout > 3200) ||
   161ec:	ebbc 0f88 	cmp.w	ip, r8, lsl #2
   161f0:	f080 860f 	bcs.w	16e12 <ull_conn_rx+0x147a>
			     ((latency + 1) * interval_max)) ||
   161f4:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
   161f8:	4573      	cmp	r3, lr
   161fa:	f0c0 860a 	bcc.w	16e12 <ull_conn_rx+0x147a>
			conn->procedure_expire = 0U;
   161fe:	2300      	movs	r3, #0
			conn->llcp_conn_param.timeout =	timeout;
   16200:	f8a4 217a 	strh.w	r2, [r4, #378]	; 0x17a
			conn->llcp_conn_param.preferred_periodicity =
   16204:	f884 e17c 	strb.w	lr, [r4, #380]	; 0x17c
			conn->llcp_conn_param.interval_min = interval_min;
   16208:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
   1620c:	f8a4 0176 	strh.w	r0, [r4, #374]	; 0x176
			conn->llcp_conn_param.latency =	latency;
   16210:	f8a4 1178 	strh.w	r1, [r4, #376]	; 0x178
			conn->procedure_expire = 0U;
   16214:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   16218:	f896 102a 	ldrb.w	r1, [r6, #42]	; 0x2a
   1621c:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   16220:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   16224:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   16228:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
   1622c:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
   16230:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
   16234:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   16238:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
   1623c:	f896 102e 	ldrb.w	r1, [r6, #46]	; 0x2e
   16240:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
   16244:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   16248:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
   1624c:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
   16250:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   16254:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   16258:	f8a4 3184 	strh.w	r3, [r4, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
   1625c:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
   16260:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
   16264:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   16268:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
   1626c:	f896 1034 	ldrb.w	r1, [r6, #52]	; 0x34
   16270:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
   16274:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   16278:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
   1627c:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
   16280:	f896 0036 	ldrb.w	r0, [r6, #54]	; 0x36
   16284:	682e      	ldr	r6, [r5, #0]
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   16286:	2101      	movs	r1, #1
				sys_le16_to_cpu(cpr->offset5);
   16288:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1628c:	f361 0202 	bfi	r2, r1, #0, #3
			conn->llcp_conn_param.offset5 =
   16290:	f8a4 318a 	strh.w	r3, [r4, #394]	; 0x18a
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   16294:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16298:	e47c      	b.n	15b94 <ull_conn_rx+0x1fc>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   1629a:	7f43      	ldrb	r3, [r0, #29]
   1629c:	2b18      	cmp	r3, #24
   1629e:	f47f ac4b 	bne.w	15b38 <ull_conn_rx+0x1a0>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   162a2:	4f63      	ldr	r7, [pc, #396]	; (16430 <ull_conn_rx+0xa98>)
   162a4:	683b      	ldr	r3, [r7, #0]
   162a6:	2b00      	cmp	r3, #0
   162a8:	f000 8228 	beq.w	166fc <ull_conn_rx+0xd64>
   162ac:	429c      	cmp	r4, r3
   162ae:	f000 8225 	beq.w	166fc <ull_conn_rx+0xd64>
			nack = reject_ext_ind_send(conn, *rx,
   162b2:	1d01      	adds	r1, r0, #4
   162b4:	2320      	movs	r3, #32
   162b6:	4620      	mov	r0, r4
   162b8:	220f      	movs	r2, #15
}
   162ba:	b005      	add	sp, #20
   162bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   162c0:	f7fe be96 	b.w	14ff0 <reject_ext_ind_send.isra.0>
		if (conn->lll.role ||
   162c4:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   162c8:	2b00      	cmp	r3, #0
   162ca:	f6bf ae87 	bge.w	15fdc <ull_conn_rx+0x644>
   162ce:	e433      	b.n	15b38 <ull_conn_rx+0x1a0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
   162d0:	7f43      	ldrb	r3, [r0, #29]
   162d2:	2b01      	cmp	r3, #1
   162d4:	f47f ac30 	bne.w	15b38 <ull_conn_rx+0x1a0>
		conn->procedure_expire = 0U;
   162d8:	2300      	movs	r3, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   162da:	2203      	movs	r2, #3
		conn->procedure_expire = 0U;
   162dc:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   162e0:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   162e2:	7132      	strb	r2, [r6, #4]
		break;
   162e4:	f7ff bbad 	b.w	15a42 <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
   162e8:	7f43      	ldrb	r3, [r0, #29]
   162ea:	2b03      	cmp	r3, #3
   162ec:	f47f ac24 	bne.w	15b38 <ull_conn_rx+0x1a0>
		if (!conn->lll.role) {
   162f0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   162f4:	2b00      	cmp	r3, #0
   162f6:	f2c0 8303 	blt.w	16900 <ull_conn_rx+0xf68>
			if ((conn->llcp_phy.ack !=
   162fa:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
			     conn->llcp_phy.req) &&
   162fe:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
			if ((conn->llcp_phy.ack !=
   16302:	428b      	cmp	r3, r1
   16304:	d007      	beq.n	16316 <ull_conn_rx+0x97e>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   16306:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
   1630a:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   1630e:	3a01      	subs	r2, #1
   16310:	2a02      	cmp	r2, #2
   16312:	f240 8579 	bls.w	16e08 <ull_conn_rx+0x1470>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   16316:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   1631a:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   1631e:	1a12      	subs	r2, r2, r0
   16320:	f002 0203 	and.w	r2, r2, #3
   16324:	2a02      	cmp	r2, #2
   16326:	f000 847d 	beq.w	16c24 <ull_conn_rx+0x128c>
				     LLCP_ENCRYPTION)) ||
   1632a:	f894 0170 	ldrb.w	r0, [r4, #368]	; 0x170
   1632e:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   16332:	4290      	cmp	r0, r2
   16334:	f43f ab97 	beq.w	15a66 <ull_conn_rx+0xce>
				nack = reject_ext_ind_send(conn, *rx,
   16338:	1d31      	adds	r1, r6, #4
   1633a:	4620      	mov	r0, r4
   1633c:	232a      	movs	r3, #42	; 0x2a
   1633e:	2216      	movs	r2, #22
   16340:	e7bb      	b.n	162ba <ull_conn_rx+0x922>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   16342:	7f45      	ldrb	r5, [r0, #29]
   16344:	2d06      	cmp	r5, #6
   16346:	f47f abf7 	bne.w	15b38 <ull_conn_rx+0x1a0>
	if (!conn->llcp_version.tx) {
   1634a:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
   1634e:	07df      	lsls	r7, r3, #31
   16350:	f140 83ba 	bpl.w	16ac8 <ull_conn_rx+0x1130>
	} else if (!conn->llcp_version.rx) {
   16354:	f013 0302 	ands.w	r3, r3, #2
   16358:	f47f ac1c 	bne.w	15b94 <ull_conn_rx+0x1fc>
		conn->llcp_version.ack = conn->llcp_version.req;
   1635c:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
		conn->procedure_expire = 0U;
   16360:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		conn->llcp_version.ack = conn->llcp_version.req;
   16364:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
	conn->llcp_version.version_number = v->version_number;
   16368:	f896 3020 	ldrb.w	r3, [r6, #32]
   1636c:	f884 3127 	strb.w	r3, [r4, #295]	; 0x127
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   16370:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
   16374:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   16378:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1637c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16380:	f8a4 2128 	strh.w	r2, [r4, #296]	; 0x128
		sys_le16_to_cpu(v->sub_version_number);
   16384:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   16388:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   1638c:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   16390:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   16394:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
	conn->llcp_version.rx = 1U;
   16398:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
	return 0;
   1639c:	2000      	movs	r0, #0
   1639e:	f7ff bb50 	b.w	15a42 <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
   163a2:	7f73      	ldrb	r3, [r6, #29]
   163a4:	2b02      	cmp	r3, #2
   163a6:	f47f abc7 	bne.w	15b38 <ull_conn_rx+0x1a0>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   163aa:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   163ae:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   163b2:	429a      	cmp	r2, r3
   163b4:	d004      	beq.n	163c0 <ull_conn_rx+0xa28>
   163b6:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   163ba:	2a03      	cmp	r2, #3
   163bc:	f000 8516 	beq.w	16dec <ull_conn_rx+0x1454>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   163c0:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
   163c4:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   163c8:	4283      	cmp	r3, r0
   163ca:	f000 84ab 	beq.w	16d24 <ull_conn_rx+0x138c>
		rej_ext_ind->error_code = rej_ind->error_code;
   163ce:	f896 2020 	ldrb.w	r2, [r6, #32]
   163d2:	f886 2021 	strb.w	r2, [r6, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   163d6:	2a23      	cmp	r2, #35	; 0x23
   163d8:	d012      	beq.n	16400 <ull_conn_rx+0xa68>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   163da:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   163de:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
   163e2:	f884 01a9 	strb.w	r0, [r4, #425]	; 0x1a9
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   163e6:	f3c3 0002 	ubfx	r0, r3, #0, #3
   163ea:	f360 1306 	bfi	r3, r0, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   163ee:	f36f 0100 	bfc	r1, #0, #1
		conn->procedure_expire = 0U;
   163f2:	2000      	movs	r0, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   163f4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   163f8:	f884 11ab 	strb.w	r1, [r4, #427]	; 0x1ab
		conn->procedure_expire = 0U;
   163fc:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
	if (!conn->llcp_phy.cmd) {
   16400:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   16404:	0759      	lsls	r1, r3, #29
   16406:	f57f abc5 	bpl.w	15b94 <ull_conn_rx+0x1fc>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1640a:	2317      	movs	r3, #23
	p->status = rej_ext_ind->error_code;
   1640c:	7732      	strb	r2, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1640e:	7133      	strb	r3, [r6, #4]
	p->tx = conn->lll.phy_tx;
   16410:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   16414:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16418:	7773      	strb	r3, [r6, #29]
	p->rx = conn->lll.phy_rx;
   1641a:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   1641e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16422:	77b3      	strb	r3, [r6, #30]
	int nack = 0;
   16424:	2000      	movs	r0, #0
   16426:	f7ff bb0c 	b.w	15a42 <ull_conn_rx+0xaa>
   1642a:	bf00      	nop
   1642c:	200021a4 	.word	0x200021a4
   16430:	20002120 	.word	0x20002120
		if (!conn->lll.role ||
   16434:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   16438:	2b00      	cmp	r3, #0
   1643a:	f6bf ab7d 	bge.w	15b38 <ull_conn_rx+0x1a0>
   1643e:	7f73      	ldrb	r3, [r6, #29]
   16440:	2b17      	cmp	r3, #23
   16442:	f47f ab79 	bne.w	15b38 <ull_conn_rx+0x1a0>
		memcpy(&conn->llcp_enc.rand[0],
   16446:	2208      	movs	r2, #8
   16448:	f106 0120 	add.w	r1, r6, #32
   1644c:	f204 1055 	addw	r0, r4, #341	; 0x155
   16450:	f00b f9c9 	bl	217e6 <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   16454:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   16458:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   1645c:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
   16460:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   16464:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16468:	6829      	ldr	r1, [r5, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1646a:	2201      	movs	r2, #1
   1646c:	f362 0301 	bfi	r3, r2, #0, #2
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16470:	2203      	movs	r2, #3
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   16472:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16476:	710a      	strb	r2, [r1, #4]
		conn->llcp_ack -= 2U;
   16478:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
		conn->llcp_type = LLCP_ENCRYPTION;
   1647c:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		conn->llcp_ack -= 2U;
   16480:	3b02      	subs	r3, #2
   16482:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&conn->llcp.encryption.skd[0],
   16486:	2208      	movs	r2, #8
   16488:	f106 012a 	add.w	r1, r6, #42	; 0x2a
   1648c:	f104 00ee 	add.w	r0, r4, #238	; 0xee
   16490:	f00b f9a9 	bl	217e6 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   16494:	2204      	movs	r2, #4
   16496:	f106 0132 	add.w	r1, r6, #50	; 0x32
   1649a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1649e:	f00b f9a2 	bl	217e6 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   164a2:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   164a6:	f8b4 20ca 	ldrh.w	r2, [r4, #202]	; 0xca
   164aa:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		conn->llcp_enc.pause_rx = 1U;
   164ae:	f043 0301 	orr.w	r3, r3, #1
   164b2:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	int nack = 0;
   164b6:	2000      	movs	r0, #0
		break;
   164b8:	f7ff bac3 	b.w	15a42 <ull_conn_rx+0xaa>
		if (conn->lll.role ||
   164bc:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   164c0:	2b00      	cmp	r3, #0
   164c2:	f6bf ab87 	bge.w	15bd4 <ull_conn_rx+0x23c>
   164c6:	f7ff bb37 	b.w	15b38 <ull_conn_rx+0x1a0>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   164ca:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   164ce:	2b00      	cmp	r3, #0
   164d0:	f6ff ab32 	blt.w	15b38 <ull_conn_rx+0x1a0>
   164d4:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   164d8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   164dc:	429a      	cmp	r2, r3
   164de:	f43f ab2b 	beq.w	15b38 <ull_conn_rx+0x1a0>
   164e2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   164e6:	2b03      	cmp	r3, #3
   164e8:	f47f ab26 	bne.w	15b38 <ull_conn_rx+0x1a0>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   164ec:	7f72      	ldrb	r2, [r6, #29]
   164ee:	2a01      	cmp	r2, #1
   164f0:	f47f ab22 	bne.w	15b38 <ull_conn_rx+0x1a0>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   164f4:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   164f8:	f36f 0201 	bfc	r2, #0, #2
   164fc:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
	int nack = 0;
   16500:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16502:	7133      	strb	r3, [r6, #4]
		break;
   16504:	f7ff ba9d 	b.w	15a42 <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   16508:	7f43      	ldrb	r3, [r0, #29]
   1650a:	2b01      	cmp	r3, #1
   1650c:	f47f ab14 	bne.w	15b38 <ull_conn_rx+0x1a0>
		if (conn->lll.role) {
   16510:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   16514:	2b00      	cmp	r3, #0
   16516:	f2c0 80b8 	blt.w	1668a <ull_conn_rx+0xcf2>
			conn->llcp_enc.pause_rx = 0U;
   1651a:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
   1651e:	f021 0103 	bic.w	r1, r1, #3
   16522:	f884 1152 	strb.w	r1, [r4, #338]	; 0x152
		if (conn->llcp_enc.refresh) {
   16526:	074e      	lsls	r6, r1, #29
   16528:	f57f ac16 	bpl.w	15d58 <ull_conn_rx+0x3c0>
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1652c:	682b      	ldr	r3, [r5, #0]
			conn->llcp_enc.refresh = 0U;
   1652e:	f36f 0182 	bfc	r1, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   16532:	2214      	movs	r2, #20
			conn->llcp_enc.refresh = 0U;
   16534:	f884 1152 	strb.w	r1, [r4, #338]	; 0x152
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   16538:	711a      	strb	r2, [r3, #4]
		conn->procedure_expire = 0U;
   1653a:	e40d      	b.n	15d58 <ull_conn_rx+0x3c0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   1653c:	7f43      	ldrb	r3, [r0, #29]
   1653e:	2b01      	cmp	r3, #1
   16540:	f47f aafa 	bne.w	15b38 <ull_conn_rx+0x1a0>
	} else if (!conn->lll.role) {
   16544:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   16548:	2b00      	cmp	r3, #0
   1654a:	f280 80c0 	bge.w	166ce <ull_conn_rx+0xd36>
		conn->lll.enc_tx = 0;
   1654e:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   16552:	f36f 1304 	bfc	r3, #4, #1
   16556:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		goto pause_enc_rsp_send_exit;
   1655a:	f7ff bb1b 	b.w	15b94 <ull_conn_rx+0x1fc>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   1655e:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
   16562:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
   16566:	4293      	cmp	r3, r2
   16568:	f43f ab14 	beq.w	15b94 <ull_conn_rx+0x1fc>
	conn->procedure_expire = 0U;
   1656c:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1656e:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   16570:	f884 2199 	strb.w	r2, [r4, #409]	; 0x199
	conn->procedure_expire = 0U;
   16574:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16578:	7771      	strb	r1, [r6, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   1657a:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1657e:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   16582:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   16586:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   1658a:	8432      	strh	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1658c:	2215      	movs	r2, #21
	int nack = 0;
   1658e:	4618      	mov	r0, r3
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   16590:	84b7      	strh	r7, [r6, #36]	; 0x24
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   16592:	8475      	strh	r5, [r6, #34]	; 0x22
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   16594:	84f1      	strh	r1, [r6, #38]	; 0x26
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16596:	77f2      	strb	r2, [r6, #31]
	if (err) {
   16598:	f7ff ba53 	b.w	15a42 <ull_conn_rx+0xaa>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1659c:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   165a0:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   165a4:	429a      	cmp	r2, r3
   165a6:	f43f aaf5 	beq.w	15b94 <ull_conn_rx+0x1fc>
	if (!lll->role && (rej_ext_ind->error_code ==
   165aa:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
   165ae:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   165b2:	2900      	cmp	r1, #0
   165b4:	f2c0 859b 	blt.w	170ee <ull_conn_rx+0x1756>
   165b8:	2a1a      	cmp	r2, #26
   165ba:	f000 85d7 	beq.w	1716c <ull_conn_rx+0x17d4>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   165be:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
   165c2:	f002 0107 	and.w	r1, r2, #7
   165c6:	2904      	cmp	r1, #4
   165c8:	f000 8574 	beq.w	170b4 <ull_conn_rx+0x171c>
	if (!conn->llcp_conn_param.cmd) {
   165cc:	0713      	lsls	r3, r2, #28
   165ce:	f57f aae1 	bpl.w	15b94 <ull_conn_rx+0x1fc>
	cu->status = rej_ext_ind->error_code;
   165d2:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   165d6:	7733      	strb	r3, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   165d8:	2213      	movs	r2, #19
   165da:	7132      	strb	r2, [r6, #4]
	cu->interval = lll->interval;
   165dc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
	cu->timeout = conn->supervision_reload *
   165de:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	cu->latency = lll->latency;
   165e2:	8e21      	ldrh	r1, [r4, #48]	; 0x30
	cu->interval = lll->interval;
   165e4:	83f3      	strh	r3, [r6, #30]
	cu->timeout = conn->supervision_reload *
   165e6:	fb03 f202 	mul.w	r2, r3, r2
		      lll->interval * 125U / 1000;
   165ea:	237d      	movs	r3, #125	; 0x7d
   165ec:	fb03 f302 	mul.w	r3, r3, r2
	cu->latency = lll->latency;
   165f0:	8431      	strh	r1, [r6, #32]
		      lll->interval * 125U / 1000;
   165f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	int nack = 0;
   165f6:	2000      	movs	r0, #0
		      lll->interval * 125U / 1000;
   165f8:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   165fc:	8473      	strh	r3, [r6, #34]	; 0x22
	if (err) {
   165fe:	f7ff ba20 	b.w	15a42 <ull_conn_rx+0xaa>
		if ((conn->llcp_ack != conn->llcp_req) &&
   16602:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   16606:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   1660a:	429a      	cmp	r2, r3
   1660c:	f43f aac2 	beq.w	15b94 <ull_conn_rx+0x1fc>
   16610:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   16614:	2a03      	cmp	r2, #3
   16616:	f47f aabd 	bne.w	15b94 <ull_conn_rx+0x1fc>
	conn->llcp_enc.pause_rx = 0U;
   1661a:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	conn->llcp_ack = conn->llcp_req;
   1661e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	conn->llcp_enc.pause_rx = 0U;
   16622:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   16626:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   16628:	f884 2152 	strb.w	r2, [r4, #338]	; 0x152
	conn->procedure_expire = 0U;
   1662c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   16630:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   16634:	f886 2020 	strb.w	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   16638:	220d      	movs	r2, #13
	int nack = 0;
   1663a:	4618      	mov	r0, r3
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   1663c:	77f2      	strb	r2, [r6, #31]
	if (err) {
   1663e:	f7ff ba00 	b.w	15a42 <ull_conn_rx+0xaa>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   16642:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
   16646:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   1664a:	4283      	cmp	r3, r0
   1664c:	f43f aaa2 	beq.w	15b94 <ull_conn_rx+0x1fc>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   16650:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   16654:	2a23      	cmp	r2, #35	; 0x23
   16656:	f47f aec0 	bne.w	163da <ull_conn_rx+0xa42>
   1665a:	e6d1      	b.n	16400 <ull_conn_rx+0xa68>
	       (conn->lll.role &&
   1665c:	2a00      	cmp	r2, #0
   1665e:	f43f acf5 	beq.w	1604c <ull_conn_rx+0x6b4>
		 (conn->llcp_enc.refresh &&
   16662:	f1ba 0f02 	cmp.w	sl, #2
   16666:	f43f acf8 	beq.w	1605a <ull_conn_rx+0x6c2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1666a:	f1ba 0f0b 	cmp.w	sl, #11
   1666e:	f43f aa5f 	beq.w	15b30 <ull_conn_rx+0x198>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   16672:	f1ba 0f03 	cmp.w	sl, #3
   16676:	f43f aee2 	beq.w	1643e <ull_conn_rx+0xaa6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1667a:	f1ba 0f06 	cmp.w	sl, #6
   1667e:	f47f a9c5 	bne.w	15a0c <ull_conn_rx+0x74>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   16682:	7f73      	ldrb	r3, [r6, #29]
   16684:	2b01      	cmp	r3, #1
   16686:	f47f aa57 	bne.w	15b38 <ull_conn_rx+0x1a0>
			if ((conn->llcp_req != conn->llcp_ack) &&
   1668a:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   1668e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   16692:	4293      	cmp	r3, r2
   16694:	f000 8456 	beq.w	16f44 <ull_conn_rx+0x15ac>
   16698:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   1669c:	2b03      	cmp	r3, #3
   1669e:	f47f aa4b 	bne.w	15b38 <ull_conn_rx+0x1a0>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   166a2:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   166a6:	f36f 0301 	bfc	r3, #0, #2
   166aa:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
			if (conn->llcp_req == conn->llcp_ack) {
   166ae:	e73a      	b.n	16526 <ull_conn_rx+0xb8e>
		conn->tx_data_last = tx;
   166b0:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
   166b4:	f7ff ba6e 	b.w	15b94 <ull_conn_rx+0x1fc>
			tx->next = conn->tx_head;
   166b8:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   166ba:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   166be:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
   166c2:	f7ff ba64 	b.w	15b8e <ull_conn_rx+0x1f6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   166c6:	7f43      	ldrb	r3, [r0, #29]
   166c8:	2b01      	cmp	r3, #1
   166ca:	f47f aa35 	bne.w	15b38 <ull_conn_rx+0x1a0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   166ce:	48d4      	ldr	r0, [pc, #848]	; (16a20 <ull_conn_rx+0x1088>)
   166d0:	f7f8 ff58 	bl	f584 <mem_acquire>
		if (!tx) {
   166d4:	4603      	mov	r3, r0
   166d6:	2800      	cmp	r0, #0
   166d8:	f000 810e 	beq.w	168f8 <ull_conn_rx+0xf60>
	conn->llcp_enc.pause_rx = 1U;
   166dc:	f894 0152 	ldrb.w	r0, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
   166e0:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   166e4:	7919      	ldrb	r1, [r3, #4]
	conn->llcp_enc.pause_rx = 1U;
   166e6:	f040 0001 	orr.w	r0, r0, #1
   166ea:	f884 0152 	strb.w	r0, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
   166ee:	f022 0218 	bic.w	r2, r2, #24
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   166f2:	2001      	movs	r0, #1
	conn->lll.enc_rx = 0;
   166f4:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   166f8:	7158      	strb	r0, [r3, #5]
   166fa:	e407      	b.n	15f0c <ull_conn_rx+0x574>
		if (!conn->lll.role) {
   166fc:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   16700:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   16704:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
   16708:	9000      	str	r0, [sp, #0]
   1670a:	f1bc 0f00 	cmp.w	ip, #0
   1670e:	f2c0 816d 	blt.w	169ec <ull_conn_rx+0x1054>
			if ((conn->llcp_conn_param.req !=
   16712:	4282      	cmp	r2, r0
   16714:	d009      	beq.n	1672a <ull_conn_rx+0xd92>
			    ((conn->llcp_conn_param.state ==
   16716:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
					conn->llcp_conn_param.ack) &&
   1671a:	f012 0207 	ands.w	r2, r2, #7
   1671e:	f000 8353 	beq.w	16dc8 <ull_conn_rx+0x1430>
			      LLCP_CPR_STATE_REQ) ||
   16722:	3a04      	subs	r2, #4
   16724:	2a01      	cmp	r2, #1
   16726:	f240 834f 	bls.w	16dc8 <ull_conn_rx+0x1430>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   1672a:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   1672e:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   16732:	1a12      	subs	r2, r2, r0
   16734:	f002 0203 	and.w	r2, r2, #3
   16738:	2a02      	cmp	r2, #2
   1673a:	f000 84a2 	beq.w	17082 <ull_conn_rx+0x16ea>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   1673e:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
   16742:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
   16746:	4290      	cmp	r0, r2
   16748:	f000 840d 	beq.w	16f66 <ull_conn_rx+0x15ce>
				nack = reject_ext_ind_send(conn, *rx,
   1674c:	1d31      	adds	r1, r6, #4
   1674e:	4620      	mov	r0, r4
   16750:	232a      	movs	r3, #42	; 0x2a
   16752:	220f      	movs	r2, #15
   16754:	e5b1      	b.n	162ba <ull_conn_rx+0x922>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   16756:	7f73      	ldrb	r3, [r6, #29]
   16758:	2b01      	cmp	r3, #1
   1675a:	f43f aede 	beq.w	1651a <ull_conn_rx+0xb82>
   1675e:	f7ff b9eb 	b.w	15b38 <ull_conn_rx+0x1a0>
		if (!conn->tx_ctrl) {
   16762:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   16766:	2900      	cmp	r1, #0
   16768:	f47f abf0 	bne.w	15f4c <ull_conn_rx+0x5b4>
			tx->next = conn->tx_head;
   1676c:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   1676e:	e9c4 336c 	strd	r3, r3, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   16772:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
   16776:	f7ff bbf0 	b.w	15f5a <ull_conn_rx+0x5c2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1677a:	48a9      	ldr	r0, [pc, #676]	; (16a20 <ull_conn_rx+0x1088>)
   1677c:	f7f8 ff02 	bl	f584 <mem_acquire>
		if (!tx) {
   16780:	4601      	mov	r1, r0
   16782:	2800      	cmp	r0, #0
   16784:	f000 80b8 	beq.w	168f8 <ull_conn_rx+0xf60>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   16788:	f894 0198 	ldrb.w	r0, [r4, #408]	; 0x198
   1678c:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
	eff_rx_octets = conn->lll.max_rx_octets;
   16790:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
   16794:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   16796:	4290      	cmp	r0, r2
	eff_tx_octets = conn->lll.max_tx_octets;
   16798:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   1679c:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   167a0:	f8b4 9060 	ldrh.w	r9, [r4, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   167a4:	9000      	str	r0, [sp, #0]
	eff_tx_octets = conn->lll.max_tx_octets;
   167a6:	9302      	str	r3, [sp, #8]
	if (/* Local idle, and Peer request then complete the Peer procedure
   167a8:	f040 854e 	bne.w	17248 <ull_conn_rx+0x18b0>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   167ac:	8c32      	ldrh	r2, [r6, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   167ae:	2a1a      	cmp	r2, #26
   167b0:	f240 8300 	bls.w	16db4 <ull_conn_rx+0x141c>
			eff_tx_octets = MIN(max_rx_octets,
   167b4:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
   167b8:	4282      	cmp	r2, r0
   167ba:	bf28      	it	cs
   167bc:	4602      	movcs	r2, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   167be:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
	if (!conn->common.fex_valid ||
   167c2:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
			eff_rx_octets = MIN(max_tx_octets,
   167c6:	9b01      	ldr	r3, [sp, #4]
   167c8:	f1bc 0f1b 	cmp.w	ip, #27
   167cc:	bf34      	ite	cc
   167ce:	469e      	movcc	lr, r3
   167d0:	f04f 0e1b 	movcs.w	lr, #27
	if (!conn->common.fex_valid ||
   167d4:	07c0      	lsls	r0, r0, #31
   167d6:	f140 82e9 	bpl.w	16dac <ull_conn_rx+0x1414>
	feature_coded_phy = (conn->llcp_feature.features_conn &
   167da:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
	if (!conn->common.fex_valid ||
   167de:	0503      	lsls	r3, r0, #20
   167e0:	f140 83a7 	bpl.w	16f32 <ull_conn_rx+0x159a>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
   167e4:	f8b4 00d8 	ldrh.w	r0, [r4, #216]	; 0xd8
   167e8:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
   167ec:	bf28      	it	cs
   167ee:	f44f 6029 	movcs.w	r0, #2704	; 0xa90
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
   167f2:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   167f6:	bf38      	it	cc
   167f8:	f44f 70a4 	movcc.w	r0, #328	; 0x148
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
   167fc:	f44f 6c29 	mov.w	ip, #2704	; 0xa90
		lr_rx_time = sys_le16_to_cpu(lr->max_rx_time);
   16800:	f8b6 b022 	ldrh.w	fp, [r6, #34]	; 0x22
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   16804:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
   16806:	9303      	str	r3, [sp, #12]
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   16808:	f5bb 7fa4 	cmp.w	fp, #328	; 0x148
   1680c:	f0c0 82cc 	bcc.w	16da8 <ull_conn_rx+0x1410>
			eff_tx_time = MAX(eff_tx_time,
   16810:	f894 a064 	ldrb.w	sl, [r4, #100]	; 0x64
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   16814:	4583      	cmp	fp, r0
   16816:	bf28      	it	cs
   16818:	4683      	movcs	fp, r0
			eff_tx_time = MAX(eff_tx_time,
   1681a:	f01a 0f04 	tst.w	sl, #4
   1681e:	f00a 0007 	and.w	r0, sl, #7
   16822:	f040 8383 	bne.w	16f2c <ull_conn_rx+0x1594>
   16826:	f100 0a28 	add.w	sl, r0, #40	; 0x28
   1682a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   1682e:	1040      	asrs	r0, r0, #1
   16830:	fa2a f000 	lsr.w	r0, sl, r0
   16834:	4558      	cmp	r0, fp
   16836:	bf38      	it	cc
   16838:	4658      	movcc	r0, fp
   1683a:	b280      	uxth	r0, r0
		if (lr_tx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   1683c:	9b03      	ldr	r3, [sp, #12]
   1683e:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   16842:	f0c0 82af 	bcc.w	16da4 <ull_conn_rx+0x140c>
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   16846:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
			eff_rx_time = MAX(eff_rx_time,
   1684a:	f894 a065 	ldrb.w	sl, [r4, #101]	; 0x65
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   1684e:	bf38      	it	cc
   16850:	f44f 7ca4 	movcc.w	ip, #328	; 0x148
   16854:	4563      	cmp	r3, ip
   16856:	bf28      	it	cs
   16858:	4663      	movcs	r3, ip
			eff_rx_time = MAX(eff_rx_time,
   1685a:	f01a 0f04 	tst.w	sl, #4
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   1685e:	469b      	mov	fp, r3
			eff_rx_time = MAX(eff_rx_time,
   16860:	f00a 0c07 	and.w	ip, sl, #7
   16864:	f040 837c 	bne.w	16f60 <ull_conn_rx+0x15c8>
   16868:	f10c 0a28 	add.w	sl, ip, #40	; 0x28
   1686c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   16870:	ea4f 0c6c 	mov.w	ip, ip, asr #1
   16874:	fa2a fc0c 	lsr.w	ip, sl, ip
   16878:	45dc      	cmp	ip, fp
   1687a:	bf38      	it	cc
   1687c:	46dc      	movcc	ip, fp
   1687e:	fa1f fc8c 	uxth.w	ip, ip
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   16882:	9b01      	ldr	r3, [sp, #4]
   16884:	459e      	cmp	lr, r3
   16886:	f000 82f1 	beq.w	16e6c <ull_conn_rx+0x14d4>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   1688a:	9b00      	ldr	r3, [sp, #0]
			conn->llcp_length.rx_octets = eff_rx_octets;
   1688c:	f8a4 e19c 	strh.w	lr, [r4, #412]	; 0x19c
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   16890:	3b01      	subs	r3, #1
   16892:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
			conn->llcp_length.tx_octets = eff_tx_octets;
   16896:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.state =
   1689a:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
			conn->llcp_length.rx_time = eff_rx_time;
   1689e:	f8a4 c1a0 	strh.w	ip, [r4, #416]	; 0x1a0
			conn->llcp_length.tx_time = eff_tx_time;
   168a2:	f8a4 01a2 	strh.w	r0, [r4, #418]	; 0x1a2
			if (tx) {
   168a6:	2900      	cmp	r1, #0
   168a8:	f000 83fa 	beq.w	170a0 <ull_conn_rx+0x1708>
				conn->llcp_length.state =
   168ac:	2605      	movs	r6, #5
   168ae:	f366 0302 	bfi	r3, r6, #0, #3
   168b2:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
			link->mem = conn->llcp_rx;
   168b6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   168ba:	607b      	str	r3, [r7, #4]
			(*rx)->hdr.link = link;
   168bc:	682b      	ldr	r3, [r5, #0]
   168be:	601f      	str	r7, [r3, #0]
			conn->llcp_rx = *rx;
   168c0:	682b      	ldr	r3, [r5, #0]
   168c2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			*rx = NULL;
   168c6:	2300      	movs	r3, #0
   168c8:	602b      	str	r3, [r5, #0]
	if (tx) {
   168ca:	2900      	cmp	r1, #0
   168cc:	f43f a8b8 	beq.w	15a40 <ull_conn_rx+0xa8>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   168d0:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   168d2:	818a      	strh	r2, [r1, #12]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   168d4:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   168d8:	2215      	movs	r2, #21
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   168da:	2509      	movs	r5, #9
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   168dc:	81c8      	strh	r0, [r1, #14]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   168de:	f8a1 e008 	strh.w	lr, [r1, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   168e2:	4620      	mov	r0, r4
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   168e4:	f8a1 c00a 	strh.w	ip, [r1, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   168e8:	710b      	strb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   168ea:	714d      	strb	r5, [r1, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   168ec:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   168ee:	f7fe fc33 	bl	15158 <ctrl_tx_sec_enqueue>
	return 0;
   168f2:	2000      	movs	r0, #0
}
   168f4:	f7ff b8a5 	b.w	15a42 <ull_conn_rx+0xaa>
			return -ENOBUFS;
   168f8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   168fc:	f7ff b8a1 	b.w	15a42 <ull_conn_rx+0xaa>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16900:	4847      	ldr	r0, [pc, #284]	; (16a20 <ull_conn_rx+0x1088>)
   16902:	f7f8 fe3f 	bl	f584 <mem_acquire>
	if (!tx) {
   16906:	4602      	mov	r2, r0
   16908:	2800      	cmp	r0, #0
   1690a:	d0f5      	beq.n	168f8 <ull_conn_rx+0xf60>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1690c:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
   16910:	f894 e1a9 	ldrb.w	lr, [r4, #425]	; 0x1a9
   16914:	f894 71a8 	ldrb.w	r7, [r4, #424]	; 0x1a8
   16918:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1691c:	2002      	movs	r0, #2
   1691e:	f360 0101 	bfi	r1, r0, #0, #2
	if (conn->llcp_phy.ack ==
   16922:	4577      	cmp	r7, lr
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   16924:	f884 11aa 	strb.w	r1, [r4, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
   16928:	f3c3 0502 	ubfx	r5, r3, #0, #3
   1692c:	f003 0c07 	and.w	ip, r3, #7
   16930:	f3c3 00c2 	ubfx	r0, r3, #3, #3
   16934:	d113      	bne.n	1695e <ull_conn_rx+0xfc6>
		conn->llcp_phy.tx =
   16936:	b2c9      	uxtb	r1, r1
   16938:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.cmd = 0U;
   1693c:	f894 c1ab 	ldrb.w	ip, [r4, #427]	; 0x1ab
		conn->procedure_expire =
   16940:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   16944:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		conn->llcp_phy.ack--;
   16948:	3f01      	subs	r7, #1
		conn->llcp_phy.rx =
   1694a:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   1694e:	f36f 0c82 	bfc	ip, #2, #1
		conn->llcp_phy.ack--;
   16952:	f884 71a9 	strb.w	r7, [r4, #425]	; 0x1a9
		conn->llcp_phy.rx =
   16956:	f884 11aa 	strb.w	r1, [r4, #426]	; 0x1aa
		conn->llcp_phy.cmd = 0U;
   1695a:	f884 c1ab 	strb.w	ip, [r4, #427]	; 0x1ab
	conn->llcp_phy.rx &= p->tx_phys;
   1695e:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
	conn->llcp_phy.tx &= p->rx_phys;
   16962:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   16966:	f896 7020 	ldrb.w	r7, [r6, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   1696a:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   1696e:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   16972:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   16976:	009b      	lsls	r3, r3, #2
   16978:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   1697c:	f001 0103 	and.w	r1, r1, #3
   16980:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   16982:	2703      	movs	r7, #3
	conn->llcp_phy.tx &= p->rx_phys;
   16984:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16988:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   1698a:	7157      	strb	r7, [r2, #5]
	    conn->tx_head &&
   1698c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   16990:	7215      	strb	r5, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16992:	4339      	orrs	r1, r7
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   16994:	2517      	movs	r5, #23
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   16996:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16998:	7111      	strb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   1699a:	71d5      	strb	r5, [r2, #7]
	if (
   1699c:	2b00      	cmp	r3, #0
   1699e:	f000 81b6 	beq.w	16d0e <ull_conn_rx+0x1376>
	    !conn->llcp_enc.pause_tx &&
   169a2:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
	    conn->tx_head &&
   169a6:	0788      	lsls	r0, r1, #30
   169a8:	f100 81b1 	bmi.w	16d0e <ull_conn_rx+0x1376>
	    !conn->llcp_phy.pause_tx &&
   169ac:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
   169b0:	07c9      	lsls	r1, r1, #31
   169b2:	f100 81ac 	bmi.w	16d0e <ull_conn_rx+0x1376>
		if (conn->tx_head == conn->tx_data) {
   169b6:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   169ba:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   169bc:	bf04      	itt	eq
   169be:	6819      	ldreq	r1, [r3, #0]
   169c0:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   169c4:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   169c8:	2900      	cmp	r1, #0
   169ca:	f000 83c9 	beq.w	17160 <ull_conn_rx+0x17c8>
	tx->next = conn->tx_ctrl_last->next;
   169ce:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   169d2:	6819      	ldr	r1, [r3, #0]
   169d4:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   169d6:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   169d8:	f8c4 21b8 	str.w	r2, [r4, #440]	; 0x1b8
	if (!tx->next) {
   169dc:	6813      	ldr	r3, [r2, #0]
   169de:	2b00      	cmp	r3, #0
   169e0:	f47f a8d8 	bne.w	15b94 <ull_conn_rx+0x1fc>
		conn->tx_data_last = tx;
   169e4:	f8c4 21c0 	str.w	r2, [r4, #448]	; 0x1c0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   169e8:	f7ff b8d4 	b.w	15b94 <ull_conn_rx+0x1fc>
		} else if ((conn->llcp_conn_param.req ==
   169ec:	9900      	ldr	r1, [sp, #0]
   169ee:	428a      	cmp	r2, r1
   169f0:	f000 808f 	beq.w	16b12 <ull_conn_rx+0x117a>
			    conn->llcp_conn_param.ack) ||
   169f4:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
   169f8:	0790      	lsls	r0, r2, #30
   169fa:	f000 808a 	beq.w	16b12 <ull_conn_rx+0x117a>
			LL_ASSERT(0);
   169fe:	4a09      	ldr	r2, [pc, #36]	; (16a24 <ull_conn_rx+0x108c>)
   16a00:	4909      	ldr	r1, [pc, #36]	; (16a28 <ull_conn_rx+0x1090>)
   16a02:	480a      	ldr	r0, [pc, #40]	; (16a2c <ull_conn_rx+0x1094>)
   16a04:	f241 63d7 	movw	r3, #5847	; 0x16d7
   16a08:	f008 fe75 	bl	1f6f6 <printk>
   16a0c:	4040      	eors	r0, r0
   16a0e:	f380 8811 	msr	BASEPRI, r0
   16a12:	f04f 0003 	mov.w	r0, #3
   16a16:	df02      	svc	2
	int nack = 0;
   16a18:	2000      	movs	r0, #0
   16a1a:	f7ff b812 	b.w	15a42 <ull_conn_rx+0xaa>
   16a1e:	bf00      	nop
   16a20:	200021a4 	.word	0x200021a4
   16a24:	00025ee4 	.word	0x00025ee4
   16a28:	000259f4 	.word	0x000259f4
   16a2c:	00025984 	.word	0x00025984
			conn->llcp_conn_param.disabled = 1U;
   16a30:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
			if (!conn->lll.role) {
   16a34:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
			conn->llcp_conn_param.disabled = 1U;
   16a38:	f042 0210 	orr.w	r2, r2, #16
			if (!conn->lll.role) {
   16a3c:	2900      	cmp	r1, #0
			conn->llcp_conn_param.disabled = 1U;
   16a3e:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
			if (!conn->lll.role) {
   16a42:	f2c0 823f 	blt.w	16ec4 <ull_conn_rx+0x152c>
				LL_ASSERT(conn->llcp_cu.req ==
   16a46:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   16a4a:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
   16a4e:	4293      	cmp	r3, r2
   16a50:	d00e      	beq.n	16a70 <ull_conn_rx+0x10d8>
   16a52:	4ae0      	ldr	r2, [pc, #896]	; (16dd4 <ull_conn_rx+0x143c>)
   16a54:	49e0      	ldr	r1, [pc, #896]	; (16dd8 <ull_conn_rx+0x1440>)
   16a56:	48e1      	ldr	r0, [pc, #900]	; (16ddc <ull_conn_rx+0x1444>)
   16a58:	f241 735b 	movw	r3, #5979	; 0x175b
   16a5c:	f008 fe4b 	bl	1f6f6 <printk>
   16a60:	4040      	eors	r0, r0
   16a62:	f380 8811 	msr	BASEPRI, r0
   16a66:	f04f 0003 	mov.w	r0, #3
   16a6a:	df02      	svc	2
   16a6c:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
				conn->llcp_conn_param.state =
   16a70:	f894 0172 	ldrb.w	r0, [r4, #370]	; 0x172
				conn->llcp_cu.interval =
   16a74:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
   16a78:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
				conn->llcp_conn_param.state =
   16a7c:	2305      	movs	r3, #5
   16a7e:	f363 0002 	bfi	r0, r3, #0, #3
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16a82:	f894 1106 	ldrb.w	r1, [r4, #262]	; 0x106
				conn->llcp_cu.latency =
   16a86:	f8b4 6178 	ldrh.w	r6, [r4, #376]	; 0x178
				conn->llcp_cu.ack--;
   16a8a:	1e53      	subs	r3, r2, #1
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   16a8c:	f3c0 02c0 	ubfx	r2, r0, #3, #1
				conn->llcp_cu.ack--;
   16a90:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16a94:	0092      	lsls	r2, r2, #2
				conn->llcp_cu.win_size = 1U;
   16a96:	2301      	movs	r3, #1
   16a98:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16a9c:	431a      	orrs	r2, r3
   16a9e:	f021 0307 	bic.w	r3, r1, #7
   16aa2:	431a      	orrs	r2, r3
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16aa4:	6829      	ldr	r1, [r5, #0]
				conn->llcp_cu.timeout =
   16aa6:	f8b4 517a 	ldrh.w	r5, [r4, #378]	; 0x17a
				conn->llcp_conn_param.state =
   16aaa:	f884 0172 	strb.w	r0, [r4, #370]	; 0x172
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16aae:	f884 2106 	strb.w	r2, [r4, #262]	; 0x106
				conn->llcp_cu.win_offset_us = 0U;
   16ab2:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16ab4:	2203      	movs	r2, #3
				conn->llcp_cu.win_offset_us = 0U;
   16ab6:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
				conn->llcp_cu.latency =
   16aba:	f8a4 610a 	strh.w	r6, [r4, #266]	; 0x10a
				conn->llcp_cu.timeout =
   16abe:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16ac2:	710a      	strb	r2, [r1, #4]
				break;
   16ac4:	f7fe bfbd 	b.w	15a42 <ull_conn_rx+0xaa>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16ac8:	48c5      	ldr	r0, [pc, #788]	; (16de0 <ull_conn_rx+0x1448>)
   16aca:	f7f8 fd5b 	bl	f584 <mem_acquire>
		if (!tx) {
   16ace:	4601      	mov	r1, r0
   16ad0:	2800      	cmp	r0, #0
   16ad2:	f43f af11 	beq.w	168f8 <ull_conn_rx+0xf60>
		conn->llcp_version.tx = 1U;
   16ad6:	f894 2126 	ldrb.w	r2, [r4, #294]	; 0x126
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16ada:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_version.tx = 1U;
   16adc:	f042 0201 	orr.w	r2, r2, #1
   16ae0:	f884 2126 	strb.w	r2, [r4, #294]	; 0x126
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16ae4:	f043 0303 	orr.w	r3, r3, #3
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   16ae8:	220c      	movs	r2, #12
		pdu_tx->len =
   16aea:	7145      	strb	r5, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16aec:	7103      	strb	r3, [r0, #4]
		v->version_number = LL_VERSION_NUMBER;
   16aee:	250b      	movs	r5, #11
		v->sub_version_number =
   16af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   16af4:	f06f 000e 	mvn.w	r0, #14
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   16af8:	71ca      	strb	r2, [r1, #7]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   16afa:	2205      	movs	r2, #5
   16afc:	7248      	strb	r0, [r1, #9]
		v->sub_version_number =
   16afe:	72cb      	strb	r3, [r1, #11]
   16b00:	730b      	strb	r3, [r1, #12]
		v->version_number = LL_VERSION_NUMBER;
   16b02:	720d      	strb	r5, [r1, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   16b04:	728a      	strb	r2, [r1, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   16b06:	4620      	mov	r0, r4
   16b08:	f7fe fb26 	bl	15158 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16b0c:	2303      	movs	r3, #3
   16b0e:	7133      	strb	r3, [r6, #4]
   16b10:	e42a      	b.n	16368 <ull_conn_rx+0x9d0>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   16b12:	f8b6 8020 	ldrh.w	r8, [r6, #32]
			if ((interval_min < 6) ||
   16b16:	f1b8 0f05 	cmp.w	r8, #5
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   16b1a:	fa1f f288 	uxth.w	r2, r8
			if ((interval_min < 6) ||
   16b1e:	d97b      	bls.n	16c18 <ull_conn_rx+0x1280>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   16b20:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
			if ((interval_min < 6) ||
   16b24:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   16b28:	fa1f f18e 	uxth.w	r1, lr
			if ((interval_min < 6) ||
   16b2c:	d874      	bhi.n	16c18 <ull_conn_rx+0x1280>
			    (interval_max > 3200) ||
   16b2e:	428a      	cmp	r2, r1
   16b30:	d872      	bhi.n	16c18 <ull_conn_rx+0x1280>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   16b32:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
			    (interval_min > interval_max) ||
   16b36:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   16b3a:	fa1f fa8c 	uxth.w	sl, ip
			    (interval_min > interval_max) ||
   16b3e:	d26b      	bcs.n	16c18 <ull_conn_rx+0x1280>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   16b40:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
			    (latency > 499) ||
   16b42:	f1a0 090a 	sub.w	r9, r0, #10
   16b46:	fa1f f989 	uxth.w	r9, r9
   16b4a:	f640 4b76 	movw	fp, #3190	; 0xc76
   16b4e:	45d9      	cmp	r9, fp
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   16b50:	b282      	uxth	r2, r0
			    (latency > 499) ||
   16b52:	d861      	bhi.n	16c18 <ull_conn_rx+0x1280>
			     ((latency + 1) * interval_max)) ||
   16b54:	fb0a 1901 	mla	r9, sl, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   16b58:	ebb9 0f82 	cmp.w	r9, r2, lsl #2
   16b5c:	d25c      	bcs.n	16c18 <ull_conn_rx+0x1280>
			     ((latency + 1) * interval_max)) ||
   16b5e:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
   16b62:	4559      	cmp	r1, fp
   16b64:	d358      	bcc.n	16c18 <ull_conn_rx+0x1280>
			conn->llcp_conn_param.latency =	latency;
   16b66:	f8a4 c178 	strh.w	ip, [r4, #376]	; 0x178
			conn->llcp_conn_param.interval_min = interval_min;
   16b6a:	f8a4 8174 	strh.w	r8, [r4, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
   16b6e:	f8a4 e176 	strh.w	lr, [r4, #374]	; 0x176
			conn->llcp_conn_param.timeout =	timeout;
   16b72:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			conn->llcp_conn_param.preferred_periodicity =
   16b76:	f884 b17c 	strb.w	fp, [r4, #380]	; 0x17c
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   16b7a:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   16b7e:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
			     lll->interval) ||
   16b82:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   16b86:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   16b8a:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
   16b8e:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   16b92:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   16b96:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   16b9a:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
   16b9e:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   16ba2:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   16ba6:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   16baa:	f8a4 0182 	strh.w	r0, [r4, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
   16bae:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   16bb2:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   16bb6:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   16bba:	f8a4 0184 	strh.w	r0, [r4, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
   16bbe:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   16bc2:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   16bc6:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   16bca:	f8a4 0186 	strh.w	r0, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
   16bce:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   16bd2:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   16bd6:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   16bda:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
   16bde:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   16be2:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
			if ((conn->llcp_conn_param.interval_max !=
   16be6:	4561      	cmp	r1, ip
				sys_le16_to_cpu(cpr->offset5);
   16be8:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
			conn->llcp_conn_param.offset5 =
   16bec:	f8a4 018a 	strh.w	r0, [r4, #394]	; 0x18a
			if ((conn->llcp_conn_param.interval_max !=
   16bf0:	f000 8332 	beq.w	17258 <ull_conn_rx+0x18c0>
				conn->llcp_conn_param.state =
   16bf4:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
   16bf8:	2103      	movs	r1, #3
   16bfa:	f361 0202 	bfi	r2, r1, #0, #3
   16bfe:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
			conn->llcp_conn_param.ack--;
   16c02:	9a00      	ldr	r2, [sp, #0]
   16c04:	3a01      	subs	r2, #1
   16c06:	f884 2171 	strb.w	r2, [r4, #369]	; 0x171
			if (!conn_upd_curr) {
   16c0a:	2b00      	cmp	r3, #0
   16c0c:	f47e af18 	bne.w	15a40 <ull_conn_rx+0xa8>
				conn_upd_curr = conn;
   16c10:	603c      	str	r4, [r7, #0]
	int nack = 0;
   16c12:	4618      	mov	r0, r3
   16c14:	f7fe bf15 	b.w	15a42 <ull_conn_rx+0xaa>
				nack = reject_ext_ind_send(conn, *rx,
   16c18:	1d31      	adds	r1, r6, #4
   16c1a:	4620      	mov	r0, r4
   16c1c:	231e      	movs	r3, #30
   16c1e:	220f      	movs	r2, #15
   16c20:	f7ff bb4b 	b.w	162ba <ull_conn_rx+0x922>
				      0x03) == 0x02) &&
   16c24:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   16c28:	2a03      	cmp	r2, #3
   16c2a:	f47f ab85 	bne.w	16338 <ull_conn_rx+0x9a0>
   16c2e:	f7ff bb7c 	b.w	1632a <ull_conn_rx+0x992>
	instant = sys_le16_to_cpu(ind->instant);
   16c32:	8c70      	ldrh	r0, [r6, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   16c34:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   16c36:	1a82      	subs	r2, r0, r2
   16c38:	0412      	lsls	r2, r2, #16
   16c3a:	f100 80bd 	bmi.w	16db8 <ull_conn_rx+0x1420>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   16c3e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   16c42:	f894 c0e9 	ldrb.w	ip, [r4, #233]	; 0xe9
   16c46:	eba2 020c 	sub.w	r2, r2, ip
   16c4a:	f002 0203 	and.w	r2, r2, #3
   16c4e:	2a02      	cmp	r2, #2
   16c50:	f000 80e5 	beq.w	16e1e <ull_conn_rx+0x1486>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   16c54:	f894 c1a8 	ldrb.w	ip, [r4, #424]	; 0x1a8
   16c58:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
   16c5c:	4562      	cmp	r2, ip
   16c5e:	d019      	beq.n	16c94 <ull_conn_rx+0x12fc>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   16c60:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   16c64:	f002 0203 	and.w	r2, r2, #3
   16c68:	2a02      	cmp	r2, #2
   16c6a:	d113      	bne.n	16c94 <ull_conn_rx+0x12fc>
		conn->llcp_phy.pause_tx = 0U;
   16c6c:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16c70:	f894 60ec 	ldrb.w	r6, [r4, #236]	; 0xec
		conn->llcp_phy.ack = conn->llcp_phy.req;
   16c74:	f884 c1a9 	strb.w	ip, [r4, #425]	; 0x1a9
		conn->llcp_phy.pause_tx = 0U;
   16c78:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16c7c:	f3c2 0c80 	ubfx	ip, r2, #2, #1
   16c80:	f36c 0641 	bfi	r6, ip, #1, #1
		conn->procedure_expire = 0U;
   16c84:	f04f 0c00 	mov.w	ip, #0
		conn->llcp_phy.pause_tx = 0U;
   16c88:	f884 21ab 	strb.w	r2, [r4, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16c8c:	f884 60ec 	strb.w	r6, [r4, #236]	; 0xec
		conn->procedure_expire = 0U;
   16c90:	f8a4 c0cc 	strh.w	ip, [r4, #204]	; 0xcc
	conn->llcp.phy_upd_ind.initiate = 0U;
   16c94:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn->llcp.phy_upd_ind.instant = instant;
   16c98:	f8a4 00ee 	strh.w	r0, [r4, #238]	; 0xee
	conn->llcp.phy_upd_ind.initiate = 0U;
   16c9c:	009b      	lsls	r3, r3, #2
   16c9e:	f003 031c 	and.w	r3, r3, #28
   16ca2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   16ca6:	f002 0202 	and.w	r2, r2, #2
   16caa:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   16cac:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
	conn->llcp.phy_upd_ind.initiate = 0U;
   16cb0:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	link->mem = conn->llcp_rx;
   16cb4:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   16cb6:	682b      	ldr	r3, [r5, #0]
   16cb8:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   16cba:	682b      	ldr	r3, [r5, #0]
   16cbc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	*rx = NULL;
   16cc0:	2300      	movs	r3, #0
   16cc2:	602b      	str	r3, [r5, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   16cc4:	f7fc ffee 	bl	13ca4 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   16cc8:	4605      	mov	r5, r0
   16cca:	2800      	cmp	r0, #0
   16ccc:	f000 822a 	beq.w	17124 <ull_conn_rx+0x178c>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   16cd0:	682b      	ldr	r3, [r5, #0]
   16cd2:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   16cd6:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   16cd8:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   16cdc:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
	conn->llcp_rx = rx_dle;
   16ce0:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
	conn->llcp_ack -= 2U;
   16ce4:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_PHY_UPD;
   16ce6:	2106      	movs	r1, #6
	if (conn->llcp.phy_upd_ind.tx) {
   16ce8:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_ack -= 2U;
   16cec:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	conn->llcp_type = LLCP_PHY_UPD;
   16cf0:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
	if (conn->llcp.phy_upd_ind.tx) {
   16cf4:	f43e aea4 	beq.w	15a40 <ull_conn_rx+0xa8>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   16cf8:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
   16cfc:	f3c3 0382 	ubfx	r3, r3, #2, #3
   16d00:	f363 1206 	bfi	r2, r3, #4, #3
   16d04:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
	int nack = 0;
   16d08:	2000      	movs	r0, #0
   16d0a:	f7fe be9a 	b.w	15a42 <ull_conn_rx+0xaa>
		if (!conn->tx_ctrl) {
   16d0e:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   16d12:	2900      	cmp	r1, #0
   16d14:	f47f ae5b 	bne.w	169ce <ull_conn_rx+0x1036>
			tx->next = conn->tx_head;
   16d18:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   16d1a:	e9c4 226c 	strd	r2, r2, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   16d1e:	f8c4 21b8 	str.w	r2, [r4, #440]	; 0x1b8
   16d22:	e65b      	b.n	169dc <ull_conn_rx+0x1044>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   16d24:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   16d28:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   16d2c:	429a      	cmp	r2, r3
   16d2e:	f43f ac16 	beq.w	1655e <ull_conn_rx+0xbc6>
		rej_ext_ind->error_code = rej_ind->error_code;
   16d32:	f896 3020 	ldrb.w	r3, [r6, #32]
   16d36:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   16d3a:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   16d3e:	2a00      	cmp	r2, #0
   16d40:	f2c0 81de 	blt.w	17100 <ull_conn_rx+0x1768>
   16d44:	2b1a      	cmp	r3, #26
   16d46:	f000 8211 	beq.w	1716c <ull_conn_rx+0x17d4>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   16d4a:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
   16d4e:	f002 0307 	and.w	r3, r2, #7
   16d52:	2b04      	cmp	r3, #4
   16d54:	f47f ac3a 	bne.w	165cc <ull_conn_rx+0xc34>
		LL_ASSERT(conn_upd_curr == conn);
   16d58:	4f22      	ldr	r7, [pc, #136]	; (16de4 <ull_conn_rx+0x144c>)
   16d5a:	683b      	ldr	r3, [r7, #0]
   16d5c:	429c      	cmp	r4, r3
   16d5e:	d00e      	beq.n	16d7e <ull_conn_rx+0x13e6>
   16d60:	4a1c      	ldr	r2, [pc, #112]	; (16dd4 <ull_conn_rx+0x143c>)
   16d62:	4921      	ldr	r1, [pc, #132]	; (16de8 <ull_conn_rx+0x1450>)
   16d64:	481d      	ldr	r0, [pc, #116]	; (16ddc <ull_conn_rx+0x1444>)
   16d66:	f241 03e4 	movw	r3, #4324	; 0x10e4
   16d6a:	f008 fcc4 	bl	1f6f6 <printk>
   16d6e:	4040      	eors	r0, r0
   16d70:	f380 8811 	msr	BASEPRI, r0
   16d74:	f04f 0003 	mov.w	r0, #3
   16d78:	df02      	svc	2
   16d7a:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   16d7e:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   16d82:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
   16d86:	2300      	movs	r3, #0
   16d88:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   16d8a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   16d8e:	e41d      	b.n	165cc <ull_conn_rx+0xc34>
			conn->llcp_length.disabled = 1U;
   16d90:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
			conn->llcp_length.ack = conn->llcp_length.req;
   16d94:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
			conn->llcp_length.disabled = 1U;
   16d98:	f042 0308 	orr.w	r3, r2, #8
   16d9c:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
			conn->llcp_length.ack = conn->llcp_length.req;
   16da0:	f7fe bfda 	b.w	15d58 <ull_conn_rx+0x3c0>
   16da4:	46c4      	mov	ip, r8
   16da6:	e56c      	b.n	16882 <ull_conn_rx+0xeea>
   16da8:	4648      	mov	r0, r9
   16daa:	e547      	b.n	1683c <ull_conn_rx+0xea4>
		tx_time = CLAMP(conn->default_tx_time,
   16dac:	f44f 70a4 	mov.w	r0, #328	; 0x148
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M);
   16db0:	4684      	mov	ip, r0
   16db2:	e525      	b.n	16800 <ull_conn_rx+0xe68>
   16db4:	9a02      	ldr	r2, [sp, #8]
   16db6:	e502      	b.n	167be <ull_conn_rx+0xe26>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16db8:	2303      	movs	r3, #3
   16dba:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   16dbc:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_peer = err;
   16dbe:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
	int nack = 0;
   16dc2:	2000      	movs	r0, #0
   16dc4:	f7fe be3d 	b.w	15a42 <ull_conn_rx+0xaa>
				nack = reject_ext_ind_send(conn, *rx,
   16dc8:	1d31      	adds	r1, r6, #4
   16dca:	4620      	mov	r0, r4
   16dcc:	2323      	movs	r3, #35	; 0x23
   16dce:	220f      	movs	r2, #15
   16dd0:	f7ff ba73 	b.w	162ba <ull_conn_rx+0x922>
   16dd4:	00025ee4 	.word	0x00025ee4
   16dd8:	00025fb0 	.word	0x00025fb0
   16ddc:	00025984 	.word	0x00025984
   16de0:	200021a4 	.word	0x200021a4
   16de4:	20002120 	.word	0x20002120
   16de8:	00025fd8 	.word	0x00025fd8
	conn->llcp_enc.pause_rx = 0U;
   16dec:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	conn->llcp_ack = conn->llcp_req;
   16df0:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	conn->llcp_enc.pause_rx = 0U;
   16df4:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   16df8:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   16dfa:	f884 2152 	strb.w	r2, [r4, #338]	; 0x152
	conn->procedure_expire = 0U;
   16dfe:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   16e02:	4618      	mov	r0, r3
   16e04:	f7fe be1d 	b.w	15a42 <ull_conn_rx+0xaa>
				nack = reject_ext_ind_send(conn, *rx,
   16e08:	1d01      	adds	r1, r0, #4
   16e0a:	2323      	movs	r3, #35	; 0x23
   16e0c:	4620      	mov	r0, r4
   16e0e:	f7ff ba96 	b.w	1633e <ull_conn_rx+0x9a6>
				nack = reject_ext_ind_send(conn, *rx,
   16e12:	1d31      	adds	r1, r6, #4
   16e14:	4620      	mov	r0, r4
   16e16:	231e      	movs	r3, #30
   16e18:	2210      	movs	r2, #16
   16e1a:	f7ff ba4e 	b.w	162ba <ull_conn_rx+0x922>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16e1e:	2303      	movs	r3, #3
   16e20:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   16e22:	232a      	movs	r3, #42	; 0x2a
   16e24:	e7cb      	b.n	16dbe <ull_conn_rx+0x1426>
			conn->llcp_phy.pause_tx = 0U;
   16e26:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
   16e2a:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
			conn->llcp_phy.ack = conn->llcp_phy.req;
   16e2e:	f884 11a9 	strb.w	r1, [r4, #425]	; 0x1a9
			conn->llcp_phy.pause_tx = 0U;
   16e32:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   16e36:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   16e38:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   16e3c:	f362 1106 	bfi	r1, r2, #4, #3
			if (conn->llcp_phy.cmd) {
   16e40:	075f      	lsls	r7, r3, #29
			conn->llcp_phy.pause_tx = 0U;
   16e42:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
   16e46:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
   16e4a:	f3c2 0202 	ubfx	r2, r2, #0, #3
			if (conn->llcp_phy.cmd) {
   16e4e:	f140 8122 	bpl.w	17096 <ull_conn_rx+0x16fe>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16e52:	6829      	ldr	r1, [r5, #0]
				p->status = 0U;
   16e54:	2300      	movs	r3, #0
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16e56:	2017      	movs	r0, #23
   16e58:	7108      	strb	r0, [r1, #4]
				p->tx = lll->phy_tx;
   16e5a:	7772      	strb	r2, [r6, #29]
				p->status = 0U;
   16e5c:	7733      	strb	r3, [r6, #28]
				p->rx = lll->phy_rx;
   16e5e:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   16e62:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16e66:	77b3      	strb	r3, [r6, #30]
   16e68:	f7fe bf76 	b.w	15d58 <ull_conn_rx+0x3c0>
			conn->llcp_length.ack = conn->llcp_length.req;
   16e6c:	9b00      	ldr	r3, [sp, #0]
   16e6e:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   16e72:	9b02      	ldr	r3, [sp, #8]
			conn->procedure_expire = 0U;
   16e74:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   16e76:	429a      	cmp	r2, r3
			conn->procedure_expire = 0U;
   16e78:	f8a4 70cc 	strh.w	r7, [r4, #204]	; 0xcc
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   16e7c:	f000 8165 	beq.w	1714a <ull_conn_rx+0x17b2>
			conn->lll.max_rx_time = eff_rx_time;
   16e80:	f8a4 c062 	strh.w	ip, [r4, #98]	; 0x62
			if (tx) {
   16e84:	2900      	cmp	r1, #0
   16e86:	f000 815b 	beq.w	17140 <ull_conn_rx+0x17a8>
				conn->llcp_length.state =
   16e8a:	f894 519a 	ldrb.w	r5, [r4, #410]	; 0x19a
					(conn->llcp_length.req - 1);
   16e8e:	9b00      	ldr	r3, [sp, #0]
				conn->llcp_length.rx_octets = eff_rx_octets;
   16e90:	f8a4 e19c 	strh.w	lr, [r4, #412]	; 0x19c
				conn->llcp_length.state =
   16e94:	2703      	movs	r7, #3
					(conn->llcp_length.req - 1);
   16e96:	3b01      	subs	r3, #1
				conn->llcp_length.state =
   16e98:	f367 0502 	bfi	r5, r7, #0, #3
				conn->llcp_length.ack =
   16e9c:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
				conn->llcp_length.tx_octets = eff_tx_octets;
   16ea0:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.rx_time = eff_rx_time;
   16ea4:	f8a4 c1a0 	strh.w	ip, [r4, #416]	; 0x1a0
				conn->llcp_length.tx_time = eff_tx_time;
   16ea8:	f8a4 01a2 	strh.w	r0, [r4, #418]	; 0x1a2
				conn->llcp_length.state =
   16eac:	f884 519a 	strb.w	r5, [r4, #410]	; 0x19a
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   16eb0:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   16eb4:	84b2      	strh	r2, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   16eb6:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   16eba:	84f0      	strh	r0, [r6, #38]	; 0x26
   16ebc:	e505      	b.n	168ca <ull_conn_rx+0xf32>
		conn_upd_curr = conn;
   16ebe:	601c      	str	r4, [r3, #0]
   16ec0:	f7fe beff 	b.w	15cc2 <ull_conn_rx+0x32a>
			LL_ASSERT(conn_upd_curr == conn);
   16ec4:	4fda      	ldr	r7, [pc, #872]	; (17230 <ull_conn_rx+0x1898>)
   16ec6:	683a      	ldr	r2, [r7, #0]
   16ec8:	4294      	cmp	r4, r2
   16eca:	d00e      	beq.n	16eea <ull_conn_rx+0x1552>
   16ecc:	4ad9      	ldr	r2, [pc, #868]	; (17234 <ull_conn_rx+0x189c>)
   16ece:	49da      	ldr	r1, [pc, #872]	; (17238 <ull_conn_rx+0x18a0>)
   16ed0:	48da      	ldr	r0, [pc, #872]	; (1723c <ull_conn_rx+0x18a4>)
   16ed2:	f241 7373 	movw	r3, #6003	; 0x1773
   16ed6:	f008 fc0e 	bl	1f6f6 <printk>
   16eda:	4040      	eors	r0, r0
   16edc:	f380 8811 	msr	BASEPRI, r0
   16ee0:	f04f 0003 	mov.w	r0, #3
   16ee4:	df02      	svc	2
   16ee6:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
			if (!conn->llcp_conn_param.cmd) {
   16eea:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   16eee:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
   16ef2:	2300      	movs	r3, #0
   16ef4:	603b      	str	r3, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
   16ef6:	f012 0308 	ands.w	r3, r2, #8
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   16efa:	682a      	ldr	r2, [r5, #0]
			if (!conn->llcp_conn_param.cmd) {
   16efc:	f43e adab 	beq.w	15a56 <ull_conn_rx+0xbe>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   16f00:	2113      	movs	r1, #19
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   16f02:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   16f04:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   16f06:	7733      	strb	r3, [r6, #28]
			cu->interval = lll->interval;
   16f08:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			cu->timeout = conn->supervision_reload *
   16f0a:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
			cu->latency = lll->latency;
   16f0e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
			cu->interval = lll->interval;
   16f10:	83f3      	strh	r3, [r6, #30]
			cu->timeout = conn->supervision_reload *
   16f12:	fb03 f202 	mul.w	r2, r3, r2
				      lll->interval * 125U / 1000;
   16f16:	237d      	movs	r3, #125	; 0x7d
   16f18:	fb03 f302 	mul.w	r3, r3, r2
			cu->latency = lll->latency;
   16f1c:	8431      	strh	r1, [r6, #32]
				      lll->interval * 125U / 1000;
   16f1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16f22:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   16f26:	8473      	strh	r3, [r6, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   16f28:	f7fe bf16 	b.w	15d58 <ull_conn_rx+0x3c0>
			eff_tx_time = MAX(eff_tx_time,
   16f2c:	f44f 6029 	mov.w	r0, #2704	; 0xa90
   16f30:	e480      	b.n	16834 <ull_conn_rx+0xe9c>
	    (!feature_coded_phy && !feature_phy_2m)) {
   16f32:	f410 7f80 	tst.w	r0, #256	; 0x100
		tx_time = CLAMP(conn->default_tx_time,
   16f36:	f44f 70a4 	mov.w	r0, #328	; 0x148
	    (!feature_coded_phy && !feature_phy_2m)) {
   16f3a:	f000 80f0 	beq.w	1711e <ull_conn_rx+0x1786>
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_2M),
   16f3e:	f04f 0ca8 	mov.w	ip, #168	; 0xa8
   16f42:	e45d      	b.n	16800 <ull_conn_rx+0xe68>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16f44:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
				conn->llcp_ack -= 2U;
   16f48:	3b02      	subs	r3, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16f4a:	f36f 0201 	bfc	r2, #0, #2
				conn->llcp_type = LLCP_ENCRYPTION;
   16f4e:	2003      	movs	r0, #3
				conn->llcp_ack -= 2U;
   16f50:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16f54:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
				conn->llcp_type = LLCP_ENCRYPTION;
   16f58:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
				conn->llcp_ack -= 2U;
   16f5c:	f7ff bae3 	b.w	16526 <ull_conn_rx+0xb8e>
			eff_rx_time = MAX(eff_rx_time,
   16f60:	f44f 6c29 	mov.w	ip, #2704	; 0xa90
   16f64:	e488      	b.n	16878 <ull_conn_rx+0xee0>
				uint16_t interval_min =
   16f66:	f8b6 8020 	ldrh.w	r8, [r6, #32]
				if ((interval_min < 6) ||
   16f6a:	f1b8 0f05 	cmp.w	r8, #5
				uint16_t interval_min =
   16f6e:	fa1f f088 	uxth.w	r0, r8
				if ((interval_min < 6) ||
   16f72:	f67f ae51 	bls.w	16c18 <ull_conn_rx+0x1280>
				uint16_t interval_max =
   16f76:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
				if ((interval_min < 6) ||
   16f7a:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
				uint16_t interval_max =
   16f7e:	fa1f f28e 	uxth.w	r2, lr
				if ((interval_min < 6) ||
   16f82:	f63f ae49 	bhi.w	16c18 <ull_conn_rx+0x1280>
				    (interval_max > 3200) ||
   16f86:	4290      	cmp	r0, r2
   16f88:	f63f ae46 	bhi.w	16c18 <ull_conn_rx+0x1280>
				uint16_t latency =
   16f8c:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
   16f90:	fa1f f08c 	uxth.w	r0, ip
				    (interval_min > interval_max) ||
   16f94:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
				uint16_t latency =
   16f98:	e9cd 0001 	strd	r0, r0, [sp, #4]
				    (interval_min > interval_max) ||
   16f9c:	f4bf ae3c 	bcs.w	16c18 <ull_conn_rx+0x1280>
				uint16_t timeout =
   16fa0:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
   16fa2:	f8ad 000c 	strh.w	r0, [sp, #12]
				    (latency > 499) ||
   16fa6:	f1a0 090a 	sub.w	r9, r0, #10
   16faa:	fa1f f989 	uxth.w	r9, r9
   16fae:	f640 4a76 	movw	sl, #3190	; 0xc76
   16fb2:	45d1      	cmp	r9, sl
				uint16_t timeout =
   16fb4:	fa1f fb80 	uxth.w	fp, r0
				    (latency > 499) ||
   16fb8:	f63f ae2e 	bhi.w	16c18 <ull_conn_rx+0x1280>
				     ((latency + 1) * interval_max)) ||
   16fbc:	9801      	ldr	r0, [sp, #4]
   16fbe:	fb00 2902 	mla	r9, r0, r2, r2
				    (timeout > 3200) ||
   16fc2:	ebb9 0f8b 	cmp.w	r9, fp, lsl #2
   16fc6:	f4bf ae27 	bcs.w	16c18 <ull_conn_rx+0x1280>
				     ((latency + 1) * interval_max)) ||
   16fca:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
   16fce:	4552      	cmp	r2, sl
   16fd0:	f4ff ae22 	bcc.w	16c18 <ull_conn_rx+0x1280>
				conn->llcp_conn_param.timeout =	timeout;
   16fd4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
				conn->llcp_conn_param.latency =	latency;
   16fd8:	f8a4 c178 	strh.w	ip, [r4, #376]	; 0x178
				conn->llcp_conn_param.interval_min =
   16fdc:	f8a4 8174 	strh.w	r8, [r4, #372]	; 0x174
				conn->llcp_conn_param.interval_max =
   16fe0:	f8a4 e176 	strh.w	lr, [r4, #374]	; 0x176
				conn->llcp_conn_param.timeout =	timeout;
   16fe4:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
				conn->llcp_conn_param.preferred_periodicity =
   16fe8:	f884 a17c 	strb.w	sl, [r4, #380]	; 0x17c
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   16fec:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   16ff0:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
				     lll->interval) ||
   16ff4:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   16ff8:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   16ffc:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
					sys_le16_to_cpu(cpr->offset0);
   17000:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   17004:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   17008:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   1700c:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
					sys_le16_to_cpu(cpr->offset1);
   17010:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   17014:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   17018:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   1701c:	f8a4 0182 	strh.w	r0, [r4, #386]	; 0x182
					sys_le16_to_cpu(cpr->offset2);
   17020:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   17024:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   17028:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   1702c:	f8a4 0184 	strh.w	r0, [r4, #388]	; 0x184
					sys_le16_to_cpu(cpr->offset3);
   17030:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   17034:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   17038:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   1703c:	f8a4 0186 	strh.w	r0, [r4, #390]	; 0x186
					sys_le16_to_cpu(cpr->offset4);
   17040:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   17044:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   17048:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   1704c:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
					sys_le16_to_cpu(cpr->offset5);
   17050:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   17054:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
				if ((conn->llcp_conn_param.interval_max !=
   17058:	4562      	cmp	r2, ip
					sys_le16_to_cpu(cpr->offset5);
   1705a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
				conn->llcp_conn_param.offset5 =
   1705e:	f8a4 018a 	strh.w	r0, [r4, #394]	; 0x18a
				if ((conn->llcp_conn_param.interval_max !=
   17062:	f000 80c2 	beq.w	171ea <ull_conn_rx+0x1852>
					if (conn->llcp_enc.pause_tx) {
   17066:	078e      	lsls	r6, r1, #30
						conn->llcp_conn_param.state =
   17068:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
					if (conn->llcp_enc.pause_tx) {
   1706c:	f57f adc4 	bpl.w	16bf8 <ull_conn_rx+0x1260>
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17070:	6829      	ldr	r1, [r5, #0]
						conn->llcp_conn_param.state =
   17072:	2002      	movs	r0, #2
   17074:	f360 0202 	bfi	r2, r0, #0, #3
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17078:	2003      	movs	r0, #3
						conn->llcp_conn_param.state =
   1707a:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1707e:	7108      	strb	r0, [r1, #4]
   17080:	e5bf      	b.n	16c02 <ull_conn_rx+0x126a>
				      0x03) == 0x02) &&
   17082:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   17086:	2a03      	cmp	r2, #3
   17088:	f47f ab60 	bne.w	1674c <ull_conn_rx+0xdb4>
   1708c:	f7ff bb57 	b.w	1673e <ull_conn_rx+0xda6>
	struct node_tx *tx = NULL;
   17090:	2100      	movs	r1, #0
   17092:	f7fe bdde 	b.w	15c52 <ull_conn_rx+0x2ba>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17096:	682b      	ldr	r3, [r5, #0]
   17098:	2203      	movs	r2, #3
   1709a:	711a      	strb	r2, [r3, #4]
   1709c:	f7fe be5c 	b.w	15d58 <ull_conn_rx+0x3c0>
				conn->llcp_length.state =
   170a0:	2604      	movs	r6, #4
   170a2:	f366 0302 	bfi	r3, r6, #0, #3
				conn->lll.max_tx_octets = eff_tx_octets;
   170a6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   170aa:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
				conn->llcp_length.state =
   170ae:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
   170b2:	e400      	b.n	168b6 <ull_conn_rx+0xf1e>
		LL_ASSERT(conn_upd_curr == conn);
   170b4:	4f5e      	ldr	r7, [pc, #376]	; (17230 <ull_conn_rx+0x1898>)
   170b6:	6839      	ldr	r1, [r7, #0]
   170b8:	428c      	cmp	r4, r1
   170ba:	d010      	beq.n	170de <ull_conn_rx+0x1746>
   170bc:	4a5d      	ldr	r2, [pc, #372]	; (17234 <ull_conn_rx+0x189c>)
   170be:	495e      	ldr	r1, [pc, #376]	; (17238 <ull_conn_rx+0x18a0>)
   170c0:	485e      	ldr	r0, [pc, #376]	; (1723c <ull_conn_rx+0x18a4>)
   170c2:	f241 03e4 	movw	r3, #4324	; 0x10e4
   170c6:	f008 fb16 	bl	1f6f6 <printk>
   170ca:	4040      	eors	r0, r0
   170cc:	f380 8811 	msr	BASEPRI, r0
   170d0:	f04f 0003 	mov.w	r0, #3
   170d4:	df02      	svc	2
   170d6:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   170da:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   170de:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
   170e2:	2300      	movs	r3, #0
   170e4:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   170e6:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   170ea:	f7ff ba6f 	b.w	165cc <ull_conn_rx+0xc34>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   170ee:	2a23      	cmp	r2, #35	; 0x23
   170f0:	f43f aa65 	beq.w	165be <ull_conn_rx+0xc26>
			conn->slave.ticks_to_offset =
   170f4:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
   170f8:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
   170fc:	f7ff ba5f 	b.w	165be <ull_conn_rx+0xc26>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   17100:	2b23      	cmp	r3, #35	; 0x23
   17102:	f43f ae22 	beq.w	16d4a <ull_conn_rx+0x13b2>
			conn->slave.ticks_to_offset =
   17106:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   1710a:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
   1710e:	e61c      	b.n	16d4a <ull_conn_rx+0x13b2>
			tx->next = conn->tx_head->next;
   17110:	6811      	ldr	r1, [r2, #0]
   17112:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   17114:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
   17116:	e9c4 336d 	strd	r3, r3, [r4, #436]	; 0x1b4
   1711a:	f7fe bf1e 	b.w	15f5a <ull_conn_rx+0x5c2>
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M);
   1711e:	4684      	mov	ip, r0
   17120:	f7ff bb6e 	b.w	16800 <ull_conn_rx+0xe68>
	LL_ASSERT(rx_dle);
   17124:	4a43      	ldr	r2, [pc, #268]	; (17234 <ull_conn_rx+0x189c>)
   17126:	4946      	ldr	r1, [pc, #280]	; (17240 <ull_conn_rx+0x18a8>)
   17128:	4844      	ldr	r0, [pc, #272]	; (1723c <ull_conn_rx+0x18a4>)
   1712a:	f241 339c 	movw	r3, #5020	; 0x139c
   1712e:	f008 fae2 	bl	1f6f6 <printk>
   17132:	4040      	eors	r0, r0
   17134:	f380 8811 	msr	BASEPRI, r0
   17138:	f04f 0003 	mov.w	r0, #3
   1713c:	df02      	svc	2
   1713e:	e5c7      	b.n	16cd0 <ull_conn_rx+0x1338>
				conn->lll.max_tx_octets = eff_tx_octets;
   17140:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   17144:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
   17148:	e6b2      	b.n	16eb0 <ull_conn_rx+0x1518>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1714a:	4548      	cmp	r0, r9
   1714c:	f47f ae98 	bne.w	16e80 <ull_conn_rx+0x14e8>
			    eff_rx_time == conn->lll.max_rx_time &&
   17150:	45c4      	cmp	ip, r8
   17152:	f47f ae95 	bne.w	16e80 <ull_conn_rx+0x14e8>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17156:	682b      	ldr	r3, [r5, #0]
   17158:	2503      	movs	r5, #3
   1715a:	711d      	strb	r5, [r3, #4]
				goto send_length_resp;
   1715c:	f7ff bbb5 	b.w	168ca <ull_conn_rx+0xf32>
			tx->next = conn->tx_head->next;
   17160:	6819      	ldr	r1, [r3, #0]
   17162:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   17164:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   17166:	e9c4 226d 	strd	r2, r2, [r4, #436]	; 0x1b4
   1716a:	e437      	b.n	169dc <ull_conn_rx+0x1044>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   1716c:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   17170:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
   17174:	4293      	cmp	r3, r2
   17176:	d00e      	beq.n	17196 <ull_conn_rx+0x17fe>
   17178:	4a2e      	ldr	r2, [pc, #184]	; (17234 <ull_conn_rx+0x189c>)
   1717a:	4932      	ldr	r1, [pc, #200]	; (17244 <ull_conn_rx+0x18ac>)
   1717c:	482f      	ldr	r0, [pc, #188]	; (1723c <ull_conn_rx+0x18a4>)
   1717e:	f241 03c9 	movw	r3, #4297	; 0x10c9
   17182:	f008 fab8 	bl	1f6f6 <printk>
   17186:	4040      	eors	r0, r0
   17188:	f380 8811 	msr	BASEPRI, r0
   1718c:	f04f 0003 	mov.w	r0, #3
   17190:	df02      	svc	2
   17192:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   17196:	f894 1172 	ldrb.w	r1, [r4, #370]	; 0x172
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1719a:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
   1719e:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   171a2:	2305      	movs	r3, #5
   171a4:	f363 0102 	bfi	r1, r3, #0, #3
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   171a8:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   171ac:	f884 1172 	strb.w	r1, [r4, #370]	; 0x172
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   171b0:	f3c1 03c0 	ubfx	r3, r1, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   171b4:	009b      	lsls	r3, r3, #2
   171b6:	f020 0007 	bic.w	r0, r0, #7
   171ba:	f043 0301 	orr.w	r3, r3, #1
   171be:	4303      	orrs	r3, r0
		conn->llcp_cu.ack--;
   171c0:	3a01      	subs	r2, #1
		conn->llcp_cu.win_size = 1U;
   171c2:	2501      	movs	r5, #1
		conn->llcp_cu.ack--;
   171c4:	f884 2105 	strb.w	r2, [r4, #261]	; 0x105
		conn->llcp_cu.win_offset_us = 0U;
   171c8:	2000      	movs	r0, #0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   171ca:	f8b4 2178 	ldrh.w	r2, [r4, #376]	; 0x178
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   171ce:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   171d2:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
		conn->llcp_cu.win_size = 1U;
   171d6:	f884 5114 	strb.w	r5, [r4, #276]	; 0x114
		conn->llcp_cu.win_offset_us = 0U;
   171da:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   171de:	f8a4 210a 	strh.w	r2, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   171e2:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
	if (err) {
   171e6:	f7fe bcd5 	b.w	15b94 <ull_conn_rx+0x1fc>
				     lll->interval) ||
   171ea:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   171ec:	9802      	ldr	r0, [sp, #8]
   171ee:	4282      	cmp	r2, r0
   171f0:	f47f af39 	bne.w	17066 <ull_conn_rx+0x16ce>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   171f4:	f240 42e2 	movw	r2, #1250	; 0x4e2
   171f8:	fb02 f00c 	mul.w	r0, r2, ip
   171fc:	f242 7210 	movw	r2, #10000	; 0x2710
				     lll->latency) ||
   17200:	f8b4 60c6 	ldrh.w	r6, [r4, #198]	; 0xc6
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   17204:	fb02 020b 	mla	r2, r2, fp, r0
   17208:	3a01      	subs	r2, #1
   1720a:	fbb2 f2f0 	udiv	r2, r2, r0
				     lll->latency) ||
   1720e:	b292      	uxth	r2, r2
   17210:	4296      	cmp	r6, r2
   17212:	f47f af28 	bne.w	17066 <ull_conn_rx+0x16ce>
				conn->llcp_conn_param.state =
   17216:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
   1721a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   1721e:	f042 0201 	orr.w	r2, r2, #1
   17222:	f8a4 2172 	strh.w	r2, [r4, #370]	; 0x172
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17226:	682a      	ldr	r2, [r5, #0]
   17228:	2103      	movs	r1, #3
   1722a:	7111      	strb	r1, [r2, #4]
   1722c:	e4e9      	b.n	16c02 <ull_conn_rx+0x126a>
   1722e:	bf00      	nop
   17230:	20002120 	.word	0x20002120
   17234:	00025ee4 	.word	0x00025ee4
   17238:	00025fd8 	.word	0x00025fd8
   1723c:	00025984 	.word	0x00025984
   17240:	00025ff0 	.word	0x00025ff0
   17244:	00025fb0 	.word	0x00025fb0
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   17248:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   1724c:	f012 0f06 	tst.w	r2, #6
   17250:	f43f aaac 	beq.w	167ac <ull_conn_rx+0xe14>
   17254:	f7fe bcf6 	b.w	15c44 <ull_conn_rx+0x2ac>
			     lll->interval) ||
   17258:	8e20      	ldrh	r0, [r4, #48]	; 0x30
   1725a:	4550      	cmp	r0, sl
   1725c:	f47f acca 	bne.w	16bf4 <ull_conn_rx+0x125c>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   17260:	f240 40e2 	movw	r0, #1250	; 0x4e2
   17264:	fb00 f101 	mul.w	r1, r0, r1
   17268:	f242 7010 	movw	r0, #10000	; 0x2710
   1726c:	fb00 1202 	mla	r2, r0, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   17270:	f8b4 00c6 	ldrh.w	r0, [r4, #198]	; 0xc6
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   17274:	3a01      	subs	r2, #1
   17276:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   1727a:	b292      	uxth	r2, r2
   1727c:	4290      	cmp	r0, r2
   1727e:	f47f acb9 	bne.w	16bf4 <ull_conn_rx+0x125c>
   17282:	e7c8      	b.n	17216 <ull_conn_rx+0x187e>

00017284 <ull_conn_tx_demux>:
{
   17284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17288:	4f24      	ldr	r7, [pc, #144]	; (1731c <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1728a:	4e25      	ldr	r6, [pc, #148]	; (17320 <ull_conn_tx_demux+0x9c>)
   1728c:	78fa      	ldrb	r2, [r7, #3]
{
   1728e:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   17290:	1d3d      	adds	r5, r7, #4
   17292:	e021      	b.n	172d8 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17294:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   17298:	4630      	mov	r0, r6
   1729a:	f7f8 f9a5 	bl	f5e8 <mem_get>
	if (conn->lll.handle != handle) {
   1729e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   172a0:	bb32      	cbnz	r2, 172f0 <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   172a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   172a6:	f8d0 11bc 	ldr.w	r1, [r0, #444]	; 0x1bc
			tx->next = NULL;
   172aa:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   172ac:	b369      	cbz	r1, 1730a <ull_conn_tx_demux+0x86>
			if (conn->tx_data_last) {
   172ae:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
   172b2:	b102      	cbz	r2, 172b6 <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   172b4:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   172b6:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
		MFIFO_DEQUEUE(conn_tx);
   172ba:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   172bc:	78bb      	ldrb	r3, [r7, #2]
   172be:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   172c0:	429a      	cmp	r2, r3
   172c2:	d005      	beq.n	172d0 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   172c4:	3301      	adds	r3, #1
   172c6:	b2db      	uxtb	r3, r3
		_first = 0U;
   172c8:	4299      	cmp	r1, r3
   172ca:	bf08      	it	eq
   172cc:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   172ce:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   172d0:	3c01      	subs	r4, #1
   172d2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   172d6:	d016      	beq.n	17306 <ull_conn_tx_demux+0x82>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   172d8:	78bb      	ldrb	r3, [r7, #2]
   172da:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   172dc:	4293      	cmp	r3, r2
   172de:	d012      	beq.n	17306 <ull_conn_tx_demux+0x82>
	return (void *)(fifo + first * size);
   172e0:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   172e4:	eb15 0803 	adds.w	r8, r5, r3
   172e8:	d00d      	beq.n	17306 <ull_conn_tx_demux+0x82>
	if (handle >= CONFIG_BT_MAX_CONN) {
   172ea:	5aea      	ldrh	r2, [r5, r3]
   172ec:	2a00      	cmp	r2, #0
   172ee:	d0d1      	beq.n	17294 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   172f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   172f4:	790b      	ldrb	r3, [r1, #4]
   172f6:	f36f 0301 	bfc	r3, #0, #2
   172fa:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   172fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   17300:	f7fc fce8 	bl	13cd4 <ll_tx_ack_put>
   17304:	e7d9      	b.n	172ba <ull_conn_tx_demux+0x36>
}
   17306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (!conn->tx_head) {
   1730a:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
				conn->tx_data = tx;
   1730e:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
				if (!conn->tx_head) {
   17312:	2a00      	cmp	r2, #0
   17314:	d1cb      	bne.n	172ae <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   17316:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
			if (conn->tx_data_last) {
   1731a:	e7cc      	b.n	172b6 <ull_conn_tx_demux+0x32>
   1731c:	2000047c 	.word	0x2000047c
   17320:	20001f58 	.word	0x20001f58

00017324 <conn_cleanup>:
{
   17324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = conn->llcp_rx;
   17328:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	rx->hdr.handle = conn->lll.handle;
   1732c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	*((uint8_t *)rx->pdu) = reason;
   1732e:	f880 114c 	strb.w	r1, [r0, #332]	; 0x14c
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   17332:	2312      	movs	r3, #18
{
   17334:	b083      	sub	sp, #12
   17336:	4606      	mov	r6, r0
	rx->hdr.handle = conn->lll.handle;
   17338:	f8a0 2136 	strh.w	r2, [r0, #310]	; 0x136
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1733c:	f880 3134 	strb.w	r3, [r0, #308]	; 0x134
	struct lll_conn *lll = &conn->lll;
   17340:	f100 0b1c 	add.w	fp, r0, #28
	while (rx) {
   17344:	b144      	cbz	r4, 17358 <conn_cleanup+0x34>
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   17346:	2503      	movs	r5, #3
		rx = hdr->link->mem;
   17348:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   1734a:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   1734c:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1734e:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   17350:	f7fc fc7a 	bl	13c48 <ll_rx_put>
	while (rx) {
   17354:	2c00      	cmp	r4, #0
   17356:	d1f7      	bne.n	17348 <conn_cleanup+0x24>
	while (conn->tx_head) {
   17358:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   1735c:	b381      	cbz	r1, 173c0 <conn_cleanup+0x9c>
		link = mem_acquire(&mem_link_tx.free);
   1735e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 17418 <conn_cleanup+0xf4>
		LL_ASSERT(link);
   17362:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 17410 <conn_cleanup+0xec>
   17366:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1741c <conn_cleanup+0xf8>
   1736a:	f106 076c 	add.w	r7, r6, #108	; 0x6c
   1736e:	e007      	b.n	17380 <conn_cleanup+0x5c>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   17370:	4629      	mov	r1, r5
   17372:	4620      	mov	r0, r4
   17374:	463a      	mov	r2, r7
   17376:	f7f8 f969 	bl	f64c <memq_enqueue>
	while (conn->tx_head) {
   1737a:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   1737e:	b1f9      	cbz	r1, 173c0 <conn_cleanup+0x9c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   17380:	4630      	mov	r0, r6
   17382:	f7fd fc0f 	bl	14ba4 <tx_ull_dequeue>
   17386:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   17388:	4640      	mov	r0, r8
   1738a:	f7f8 f8fb 	bl	f584 <mem_acquire>
		LL_ASSERT(link);
   1738e:	4604      	mov	r4, r0
   17390:	2800      	cmp	r0, #0
   17392:	d1ed      	bne.n	17370 <conn_cleanup+0x4c>
   17394:	481c      	ldr	r0, [pc, #112]	; (17408 <conn_cleanup+0xe4>)
   17396:	f240 730b 	movw	r3, #1803	; 0x70b
   1739a:	4652      	mov	r2, sl
   1739c:	4649      	mov	r1, r9
   1739e:	f008 f9aa 	bl	1f6f6 <printk>
   173a2:	4040      	eors	r0, r0
   173a4:	f380 8811 	msr	BASEPRI, r0
   173a8:	f04f 0003 	mov.w	r0, #3
   173ac:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   173ae:	4629      	mov	r1, r5
   173b0:	4620      	mov	r0, r4
   173b2:	463a      	mov	r2, r7
   173b4:	f7f8 f94a 	bl	f64c <memq_enqueue>
	while (conn->tx_head) {
   173b8:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   173bc:	2900      	cmp	r1, #0
   173be:	d1df      	bne.n	17380 <conn_cleanup+0x5c>
				    TICKER_ID_CONN_BASE + lll->handle,
   173c0:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   173c4:	4b11      	ldr	r3, [pc, #68]	; (1740c <conn_cleanup+0xe8>)
   173c6:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
   173ca:	3205      	adds	r2, #5
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   173cc:	b2d2      	uxtb	r2, r2
   173ce:	2101      	movs	r1, #1
   173d0:	2000      	movs	r0, #0
   173d2:	f7f9 fdbb 	bl	10f4c <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   173d6:	f030 0302 	bics.w	r3, r0, #2
   173da:	d00c      	beq.n	173f6 <conn_cleanup+0xd2>
   173dc:	4a0c      	ldr	r2, [pc, #48]	; (17410 <conn_cleanup+0xec>)
   173de:	490d      	ldr	r1, [pc, #52]	; (17414 <conn_cleanup+0xf0>)
   173e0:	4809      	ldr	r0, [pc, #36]	; (17408 <conn_cleanup+0xe4>)
   173e2:	f240 63ca 	movw	r3, #1738	; 0x6ca
   173e6:	f008 f986 	bl	1f6f6 <printk>
   173ea:	4040      	eors	r0, r0
   173ec:	f380 8811 	msr	BASEPRI, r0
   173f0:	f04f 0003 	mov.w	r0, #3
   173f4:	df02      	svc	2
	lll->handle = 0xFFFF;
   173f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   173fa:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   173fc:	85b3      	strh	r3, [r6, #44]	; 0x2c
}
   173fe:	b003      	add	sp, #12
   17400:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   17404:	f7ff bf3e 	b.w	17284 <ull_conn_tx_demux>
   17408:	00025984 	.word	0x00025984
   1740c:	00014e9d 	.word	0x00014e9d
   17410:	00025ee4 	.word	0x00025ee4
   17414:	0002600c 	.word	0x0002600c
   17418:	20002228 	.word	0x20002228
   1741c:	00025f3c 	.word	0x00025f3c

00017420 <ull_conn_done>:
{
   17420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   17424:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   17426:	8baa      	ldrh	r2, [r5, #28]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   17428:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
   1742a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1742e:	429a      	cmp	r2, r3
{
   17430:	b08a      	sub	sp, #40	; 0x28
	if (unlikely(lll->handle == 0xFFFF)) {
   17432:	f000 8090 	beq.w	17556 <ull_conn_done+0x136>
	switch (done->extra.mic_state) {
   17436:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1743a:	2b01      	cmp	r3, #1
   1743c:	4606      	mov	r6, r0
   1743e:	f000 80fc 	beq.w	1763a <ull_conn_done+0x21a>
   17442:	2b02      	cmp	r3, #2
   17444:	f000 80ab 	beq.w	1759e <ull_conn_done+0x17e>
   17448:	2b00      	cmp	r3, #0
   1744a:	f000 80dc 	beq.w	17606 <ull_conn_done+0x1e6>
	reason_peer = conn->llcp_terminate.reason_peer;
   1744e:	f894 112f 	ldrb.w	r1, [r4, #303]	; 0x12f
	if (reason_peer && (
   17452:	2900      	cmp	r1, #0
   17454:	f040 8082 	bne.w	1755c <ull_conn_done+0x13c>
	latency_event = lll->latency_event;
   17458:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
   1745c:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	ticks_drift_plus = 0U;
   1745e:	9109      	str	r1, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   17460:	f108 0701 	add.w	r7, r8, #1
	ticks_drift_minus = 0U;
   17464:	9108      	str	r1, [sp, #32]
	elapsed_event = latency_event + 1;
   17466:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   17468:	2b00      	cmp	r3, #0
   1746a:	f000 80a1 	beq.w	175b0 <ull_conn_done+0x190>
		} else if (lll->role) {
   1746e:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   17472:	2b00      	cmp	r3, #0
   17474:	f2c0 8110 	blt.w	17698 <ull_conn_done+0x278>
	if (done->extra.crc_valid) {
   17478:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		conn->connect_expire = 0U;
   1747c:	2200      	movs	r2, #0
   1747e:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
	if (done->extra.crc_valid) {
   17482:	2b00      	cmp	r3, #0
   17484:	f000 80df 	beq.w	17646 <ull_conn_done+0x226>
		conn->supervision_expire = 0U;
   17488:	2600      	movs	r6, #0
   1748a:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
	if (conn->procedure_expire != 0U) {
   1748e:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   17492:	b12b      	cbz	r3, 174a0 <ull_conn_done+0x80>
		if (conn->procedure_expire > elapsed_event) {
   17494:	42bb      	cmp	r3, r7
   17496:	f240 812e 	bls.w	176f6 <ull_conn_done+0x2d6>
			conn->procedure_expire -= elapsed_event;
   1749a:	1bdb      	subs	r3, r3, r7
   1749c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (conn->apto_expire != 0U) {
   174a0:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   174a4:	b12b      	cbz	r3, 174b2 <ull_conn_done+0x92>
		if (conn->apto_expire > elapsed_event) {
   174a6:	42bb      	cmp	r3, r7
   174a8:	f240 8102 	bls.w	176b0 <ull_conn_done+0x290>
			conn->apto_expire -= elapsed_event;
   174ac:	1bdb      	subs	r3, r3, r7
   174ae:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
	if (conn->appto_expire != 0U) {
   174b2:	f8b4 20d0 	ldrh.w	r2, [r4, #208]	; 0xd0
   174b6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   174ba:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   174be:	b15a      	cbz	r2, 174d8 <ull_conn_done+0xb8>
		if (conn->appto_expire > elapsed_event) {
   174c0:	42ba      	cmp	r2, r7
   174c2:	f200 80cd 	bhi.w	17660 <ull_conn_done+0x240>
			if ((conn->procedure_expire == 0U) &&
   174c6:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
			conn->appto_expire = 0U;
   174ca:	2000      	movs	r0, #0
   174cc:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
			if ((conn->procedure_expire == 0U) &&
   174d0:	b912      	cbnz	r2, 174d8 <ull_conn_done+0xb8>
   174d2:	4299      	cmp	r1, r3
   174d4:	f000 8123 	beq.w	1771e <ull_conn_done+0x2fe>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   174d8:	1a5b      	subs	r3, r3, r1
   174da:	f003 0303 	and.w	r3, r3, #3
   174de:	2b02      	cmp	r3, #2
   174e0:	f000 80c7 	beq.w	17672 <ull_conn_done+0x252>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   174e4:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
   174e8:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
   174ec:	429a      	cmp	r2, r3
   174ee:	f000 80f5 	beq.w	176dc <ull_conn_done+0x2bc>
		lll->latency_event = 0U;
   174f2:	2200      	movs	r2, #0
   174f4:	84aa      	strh	r2, [r5, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   174f6:	e9dd 4308 	ldrd	r4, r3, [sp, #32]
   174fa:	b916      	cbnz	r6, 17502 <ull_conn_done+0xe2>
   174fc:	4542      	cmp	r2, r8
   174fe:	f000 80c5 	beq.w	1768c <ull_conn_done+0x26c>
		lazy = lll->latency_event + 1U;
   17502:	3201      	adds	r2, #1
   17504:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   17506:	b913      	cbnz	r3, 1750e <ull_conn_done+0xee>
   17508:	2c00      	cmp	r4, #0
   1750a:	f000 80a5 	beq.w	17658 <ull_conn_done+0x238>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1750e:	7f2a      	ldrb	r2, [r5, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   17510:	4f93      	ldr	r7, [pc, #588]	; (17760 <ull_conn_done+0x340>)
		struct ll_conn *conn = lll->hdr.parent;
   17512:	68ed      	ldr	r5, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   17514:	9506      	str	r5, [sp, #24]
   17516:	2000      	movs	r0, #0
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   17518:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1751a:	9103      	str	r1, [sp, #12]
   1751c:	e9cd 0001 	strd	r0, r0, [sp, #4]
   17520:	b2d2      	uxtb	r2, r2
   17522:	9604      	str	r6, [sp, #16]
   17524:	9400      	str	r4, [sp, #0]
   17526:	9705      	str	r7, [sp, #20]
   17528:	2101      	movs	r1, #1
   1752a:	f7f9 fcbf 	bl	10eac <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1752e:	f030 0302 	bics.w	r3, r0, #2
   17532:	d010      	beq.n	17556 <ull_conn_done+0x136>
   17534:	f7fc fc3e 	bl	13db4 <ull_disable_mark_get>
   17538:	4285      	cmp	r5, r0
   1753a:	d00c      	beq.n	17556 <ull_conn_done+0x136>
   1753c:	4a89      	ldr	r2, [pc, #548]	; (17764 <ull_conn_done+0x344>)
   1753e:	498a      	ldr	r1, [pc, #552]	; (17768 <ull_conn_done+0x348>)
   17540:	488a      	ldr	r0, [pc, #552]	; (1776c <ull_conn_done+0x34c>)
   17542:	f240 531e 	movw	r3, #1310	; 0x51e
   17546:	f008 f8d6 	bl	1f6f6 <printk>
   1754a:	4040      	eors	r0, r0
   1754c:	f380 8811 	msr	BASEPRI, r0
   17550:	f04f 0003 	mov.w	r0, #3
   17554:	df02      	svc	2
}
   17556:	b00a      	add	sp, #40	; 0x28
   17558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (reason_peer && (
   1755c:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   17560:	2b00      	cmp	r3, #0
   17562:	db1f      	blt.n	175a4 <ull_conn_done+0x184>
			    lll->role ||
   17564:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   17568:	f013 0202 	ands.w	r2, r3, #2
   1756c:	d11a      	bne.n	175a4 <ull_conn_done+0x184>
			    conn->master.terminate_ack ||
   1756e:	293d      	cmp	r1, #61	; 0x3d
   17570:	d018      	beq.n	175a4 <ull_conn_done+0x184>
	latency_event = lll->latency_event;
   17572:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
   17576:	8cb1      	ldrh	r1, [r6, #36]	; 0x24
	ticks_drift_plus = 0U;
   17578:	9209      	str	r2, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   1757a:	f108 0701 	add.w	r7, r8, #1
	ticks_drift_minus = 0U;
   1757e:	9208      	str	r2, [sp, #32]
	elapsed_event = latency_event + 1;
   17580:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   17582:	b1a9      	cbz	r1, 175b0 <ull_conn_done+0x190>
			conn->master.terminate_ack = 1;
   17584:	f043 0302 	orr.w	r3, r3, #2
   17588:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	if (done->extra.crc_valid) {
   1758c:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		conn->connect_expire = 0U;
   17590:	2200      	movs	r2, #0
   17592:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
	if (done->extra.crc_valid) {
   17596:	2b00      	cmp	r3, #0
   17598:	f47f af76 	bne.w	17488 <ull_conn_done+0x68>
   1759c:	e053      	b.n	17646 <ull_conn_done+0x226>
		conn->llcp_terminate.reason_peer =
   1759e:	213d      	movs	r1, #61	; 0x3d
   175a0:	f884 112f 	strb.w	r1, [r4, #303]	; 0x12f
		conn_cleanup(conn, reason_peer);
   175a4:	4620      	mov	r0, r4
   175a6:	f7ff febd 	bl	17324 <conn_cleanup>
}
   175aa:	b00a      	add	sp, #40	; 0x28
   175ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (done->extra.crc_valid) {
   175b0:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
   175b4:	2b00      	cmp	r3, #0
   175b6:	f47f af67 	bne.w	17488 <ull_conn_done+0x68>
	else if (conn->connect_expire) {
   175ba:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   175be:	2b00      	cmp	r3, #0
   175c0:	d041      	beq.n	17646 <ull_conn_done+0x226>
		if (conn->connect_expire > elapsed_event) {
   175c2:	42bb      	cmp	r3, r7
   175c4:	f240 80b2 	bls.w	1772c <ull_conn_done+0x30c>
			conn->connect_expire -= elapsed_event;
   175c8:	1bdb      	subs	r3, r3, r7
   175ca:	f8b4 60c8 	ldrh.w	r6, [r4, #200]	; 0xc8
   175ce:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->supervision_expire) {
   175d2:	2e00      	cmp	r6, #0
   175d4:	f43f af5b 	beq.w	1748e <ull_conn_done+0x6e>
		if (conn->supervision_expire > elapsed_event) {
   175d8:	42b7      	cmp	r7, r6
   175da:	f080 8087 	bcs.w	176ec <ull_conn_done+0x2cc>
			conn->supervision_expire -= elapsed_event;
   175de:	1bf6      	subs	r6, r6, r7
   175e0:	b2b3      	uxth	r3, r6
			if (conn->supervision_expire <= 6U) {
   175e2:	2b06      	cmp	r3, #6
			lll->latency_event = 0U;
   175e4:	f04f 0600 	mov.w	r6, #0
			conn->supervision_expire -= elapsed_event;
   175e8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			lll->latency_event = 0U;
   175ec:	84ae      	strh	r6, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   175ee:	d908      	bls.n	17602 <ull_conn_done+0x1e2>
			else if (lll->role) {
   175f0:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   175f4:	42b3      	cmp	r3, r6
   175f6:	f6bf af4a 	bge.w	1748e <ull_conn_done+0x6e>
				if (latency_event) {
   175fa:	f1b8 0f00 	cmp.w	r8, #0
   175fe:	f000 8083 	beq.w	17708 <ull_conn_done+0x2e8>
					force = 1U;
   17602:	2601      	movs	r6, #1
   17604:	e743      	b.n	1748e <ull_conn_done+0x6e>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   17606:	f895 306e 	ldrb.w	r3, [r5, #110]	; 0x6e
   1760a:	0719      	lsls	r1, r3, #28
   1760c:	d538      	bpl.n	17680 <ull_conn_done+0x260>
					    (lll->latency + 6)) ?
   1760e:	8c2b      	ldrh	r3, [r5, #32]
			appto_reload_new = (conn->apto_reload >
   17610:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
					    (lll->latency + 6)) ?
   17614:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   17616:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   17618:	bfc4      	itt	gt
   1761a:	1ad3      	subgt	r3, r2, r3
   1761c:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   1761e:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
			appto_reload_new = (conn->apto_reload >
   17622:	bfcc      	ite	gt
   17624:	b29b      	uxthgt	r3, r3
   17626:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   17628:	4299      	cmp	r1, r3
   1762a:	d059      	beq.n	176e0 <ull_conn_done+0x2c0>
				conn->appto_reload = appto_reload_new;
   1762c:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				conn->appto_expire = conn->appto_reload;
   17630:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				conn->apto_expire = conn->apto_reload;
   17634:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
   17638:	e709      	b.n	1744e <ull_conn_done+0x2e>
		conn->appto_expire = conn->apto_expire = 0U;
   1763a:	2300      	movs	r3, #0
   1763c:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   17640:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		break;
   17644:	e703      	b.n	1744e <ull_conn_done+0x2e>
		if (!conn->supervision_expire) {
   17646:	f8b4 60c8 	ldrh.w	r6, [r4, #200]	; 0xc8
   1764a:	2e00      	cmp	r6, #0
   1764c:	d1c4      	bne.n	175d8 <ull_conn_done+0x1b8>
			conn->supervision_expire = conn->supervision_reload;
   1764e:	f8b4 60c6 	ldrh.w	r6, [r4, #198]	; 0xc6
   17652:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
   17656:	e7bc      	b.n	175d2 <ull_conn_done+0x1b2>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   17658:	2900      	cmp	r1, #0
   1765a:	d03a      	beq.n	176d2 <ull_conn_done+0x2b2>
   1765c:	4623      	mov	r3, r4
   1765e:	e756      	b.n	1750e <ull_conn_done+0xee>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   17660:	1a5b      	subs	r3, r3, r1
   17662:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   17666:	1bd7      	subs	r7, r2, r7
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   17668:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   1766a:	f8a4 70d0 	strh.w	r7, [r4, #208]	; 0xd0
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1766e:	f47f af39 	bne.w	174e4 <ull_conn_done+0xc4>
   17672:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   17676:	3b01      	subs	r3, #1
   17678:	2b01      	cmp	r3, #1
   1767a:	f63f af33 	bhi.w	174e4 <ull_conn_done+0xc4>
   1767e:	e738      	b.n	174f2 <ull_conn_done+0xd2>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   17680:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   17684:	07da      	lsls	r2, r3, #31
   17686:	f57f aee2 	bpl.w	1744e <ull_conn_done+0x2e>
   1768a:	e7c0      	b.n	1760e <ull_conn_done+0x1ee>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1768c:	b913      	cbnz	r3, 17694 <ull_conn_done+0x274>
   1768e:	2c00      	cmp	r4, #0
   17690:	f43f af61 	beq.w	17556 <ull_conn_done+0x136>
	lazy = 0U;
   17694:	4631      	mov	r1, r6
   17696:	e73a      	b.n	1750e <ull_conn_done+0xee>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   17698:	aa08      	add	r2, sp, #32
   1769a:	a909      	add	r1, sp, #36	; 0x24
   1769c:	4630      	mov	r0, r6
   1769e:	f7e9 f93b 	bl	918 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   176a2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   176a6:	2b00      	cmp	r3, #0
   176a8:	d045      	beq.n	17736 <ull_conn_done+0x316>
				lll->latency_event = 0;
   176aa:	2300      	movs	r3, #0
   176ac:	84ab      	strh	r3, [r5, #36]	; 0x24
   176ae:	e6e3      	b.n	17478 <ull_conn_done+0x58>
			rx = ll_pdu_rx_alloc();
   176b0:	f7fc faf8 	bl	13ca4 <ll_pdu_rx_alloc>
			if (rx) {
   176b4:	4601      	mov	r1, r0
   176b6:	b318      	cbz	r0, 17700 <ull_conn_done+0x2e0>
				conn->apto_expire = 0U;
   176b8:	2300      	movs	r3, #0
				rx->handle = lll->handle;
   176ba:	8baa      	ldrh	r2, [r5, #28]
				conn->apto_expire = 0U;
   176bc:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
				rx->type = NODE_RX_TYPE_APTO;
   176c0:	2315      	movs	r3, #21
				rx->handle = lll->handle;
   176c2:	80c2      	strh	r2, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   176c4:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   176c6:	6800      	ldr	r0, [r0, #0]
   176c8:	f7fc fabe 	bl	13c48 <ll_rx_put>
				ll_rx_sched();
   176cc:	f7fc fac6 	bl	13c5c <ll_rx_sched>
   176d0:	e6ef      	b.n	174b2 <ull_conn_done+0x92>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   176d2:	2e00      	cmp	r6, #0
   176d4:	f43f af3f 	beq.w	17556 <ull_conn_done+0x136>
   176d8:	4623      	mov	r3, r4
   176da:	e718      	b.n	1750e <ull_conn_done+0xee>
   176dc:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   176de:	e70a      	b.n	174f6 <ull_conn_done+0xd6>
			if (conn->apto_expire == 0U) {
   176e0:	f8b4 10d4 	ldrh.w	r1, [r4, #212]	; 0xd4
   176e4:	2900      	cmp	r1, #0
   176e6:	f47f aeb2 	bne.w	1744e <ull_conn_done+0x2e>
   176ea:	e7a1      	b.n	17630 <ull_conn_done+0x210>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   176ec:	4620      	mov	r0, r4
   176ee:	2108      	movs	r1, #8
   176f0:	f7ff fe18 	bl	17324 <conn_cleanup>
			return;
   176f4:	e72f      	b.n	17556 <ull_conn_done+0x136>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   176f6:	4620      	mov	r0, r4
   176f8:	2122      	movs	r1, #34	; 0x22
   176fa:	f7ff fe13 	bl	17324 <conn_cleanup>
			return;
   176fe:	e72a      	b.n	17556 <ull_conn_done+0x136>
				conn->apto_expire = 1U;
   17700:	2301      	movs	r3, #1
   17702:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   17706:	e6d4      	b.n	174b2 <ull_conn_done+0x92>
					force = conn->slave.force & 0x01;
   17708:	f8d4 60e0 	ldr.w	r6, [r4, #224]	; 0xe0
					conn->slave.force >>= 1U;
   1770c:	0873      	lsrs	r3, r6, #1
					if (force) {
   1770e:	f016 0601 	ands.w	r6, r6, #1
						conn->slave.force |= BIT(31);
   17712:	bf18      	it	ne
   17714:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
   17718:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   1771c:	e6b7      	b.n	1748e <ull_conn_done+0x6e>
				conn->llcp_ack -= 2U;
   1771e:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
   17720:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   17722:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
				conn->llcp_type = LLCP_PING;
   17726:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1772a:	e6db      	b.n	174e4 <ull_conn_done+0xc4>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   1772c:	4620      	mov	r0, r4
   1772e:	213e      	movs	r1, #62	; 0x3e
   17730:	f7ff fdf8 	bl	17324 <conn_cleanup>
			return;
   17734:	e70f      	b.n	17556 <ull_conn_done+0x136>
				ull_conn_tx_demux(UINT8_MAX);
   17736:	20ff      	movs	r0, #255	; 0xff
   17738:	f7ff fda4 	bl	17284 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   1773c:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
   17740:	2a00      	cmp	r2, #0
   17742:	d1b2      	bne.n	176aa <ull_conn_done+0x28a>
   17744:	e9d5 0116 	ldrd	r0, r1, [r5, #88]	; 0x58
   17748:	f7f7 ff88 	bl	f65c <memq_peek>
   1774c:	2800      	cmp	r0, #0
   1774e:	d1ac      	bne.n	176aa <ull_conn_done+0x28a>
			} else if (lll->slave.latency_enabled) {
   17750:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   17754:	07db      	lsls	r3, r3, #31
   17756:	f57f ae8f 	bpl.w	17478 <ull_conn_done+0x58>
				lll->latency_event = lll->latency;
   1775a:	8c2b      	ldrh	r3, [r5, #32]
   1775c:	84ab      	strh	r3, [r5, #36]	; 0x24
   1775e:	e68b      	b.n	17478 <ull_conn_done+0x58>
   17760:	00014fb1 	.word	0x00014fb1
   17764:	00025ee4 	.word	0x00025ee4
   17768:	0002603c 	.word	0x0002603c
   1776c:	00025984 	.word	0x00025984

00017770 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   17770:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   17774:	2b00      	cmp	r3, #0
   17776:	f000 80e7 	beq.w	17948 <ull_conn_tx_lll_enqueue+0x1d8>
   1777a:	3901      	subs	r1, #1
{
   1777c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   17780:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 17950 <ull_conn_tx_lll_enqueue+0x1e0>
		LL_ASSERT(link);
   17784:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 17954 <ull_conn_tx_lll_enqueue+0x1e4>
   17788:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 17958 <ull_conn_tx_lll_enqueue+0x1e8>
   1778c:	4604      	mov	r4, r0
   1778e:	b2cd      	uxtb	r5, r1
   17790:	e012      	b.n	177b8 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   17792:	4640      	mov	r0, r8
   17794:	f7f7 fef6 	bl	f584 <mem_acquire>
		LL_ASSERT(link);
   17798:	4607      	mov	r7, r0
   1779a:	2800      	cmp	r0, #0
   1779c:	d066      	beq.n	1786c <ull_conn_tx_lll_enqueue+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1779e:	4631      	mov	r1, r6
   177a0:	4638      	mov	r0, r7
   177a2:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   177a6:	f7f7 ff51 	bl	f64c <memq_enqueue>
	while (conn->tx_head &&
   177aa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   177ae:	3d01      	subs	r5, #1
   177b0:	b2ed      	uxtb	r5, r5
   177b2:	2b00      	cmp	r3, #0
   177b4:	f000 8089 	beq.w	178ca <ull_conn_tx_lll_enqueue+0x15a>
		 !conn->llcp_phy.pause_tx &&
   177b8:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
	while (conn->tx_head &&
   177bc:	07d1      	lsls	r1, r2, #31
   177be:	d403      	bmi.n	177c8 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   177c0:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
		 !conn->llcp_phy.pause_tx &&
   177c4:	0792      	lsls	r2, r2, #30
   177c6:	d566      	bpl.n	17896 <ull_conn_tx_lll_enqueue+0x126>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   177c8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   177cc:	4293      	cmp	r3, r2
   177ce:	d17c      	bne.n	178ca <ull_conn_tx_lll_enqueue+0x15a>
   177d0:	2dff      	cmp	r5, #255	; 0xff
   177d2:	d07a      	beq.n	178ca <ull_conn_tx_lll_enqueue+0x15a>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   177d4:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
   177d8:	4620      	mov	r0, r4
   177da:	f7fd f9e3 	bl	14ba4 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   177de:	7903      	ldrb	r3, [r0, #4]
   177e0:	f003 0303 	and.w	r3, r3, #3
   177e4:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   177e6:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   177e8:	d1d3      	bne.n	17792 <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   177ea:	79c3      	ldrb	r3, [r0, #7]
   177ec:	3b03      	subs	r3, #3
   177ee:	2b14      	cmp	r3, #20
   177f0:	d8cf      	bhi.n	17792 <ull_conn_tx_lll_enqueue+0x22>
   177f2:	a201      	add	r2, pc, #4	; (adr r2, 177f8 <ull_conn_tx_lll_enqueue+0x88>)
   177f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   177f8:	00017855 	.word	0x00017855
   177fc:	00017855 	.word	0x00017855
   17800:	00017793 	.word	0x00017793
   17804:	00017793 	.word	0x00017793
   17808:	00017793 	.word	0x00017793
   1780c:	00017793 	.word	0x00017793
   17810:	00017793 	.word	0x00017793
   17814:	00017855 	.word	0x00017855
   17818:	0001784d 	.word	0x0001784d
   1781c:	00017793 	.word	0x00017793
   17820:	00017793 	.word	0x00017793
   17824:	00017793 	.word	0x00017793
   17828:	00017793 	.word	0x00017793
   1782c:	00017793 	.word	0x00017793
   17830:	00017793 	.word	0x00017793
   17834:	00017793 	.word	0x00017793
   17838:	00017793 	.word	0x00017793
   1783c:	00017793 	.word	0x00017793
   17840:	00017793 	.word	0x00017793
   17844:	00017889 	.word	0x00017889
   17848:	00017889 	.word	0x00017889
		if (!conn->lll.role) {
   1784c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   17850:	2b00      	cmp	r3, #0
   17852:	da9e      	bge.n	17792 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   17854:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   17858:	f043 0302 	orr.w	r3, r3, #2
   1785c:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		link = mem_acquire(&mem_link_tx.free);
   17860:	4640      	mov	r0, r8
   17862:	f7f7 fe8f 	bl	f584 <mem_acquire>
		LL_ASSERT(link);
   17866:	4607      	mov	r7, r0
   17868:	2800      	cmp	r0, #0
   1786a:	d198      	bne.n	1779e <ull_conn_tx_lll_enqueue+0x2e>
   1786c:	4837      	ldr	r0, [pc, #220]	; (1794c <ull_conn_tx_lll_enqueue+0x1dc>)
   1786e:	f240 5372 	movw	r3, #1394	; 0x572
   17872:	4652      	mov	r2, sl
   17874:	4649      	mov	r1, r9
   17876:	f007 ff3e 	bl	1f6f6 <printk>
   1787a:	4040      	eors	r0, r0
   1787c:	f380 8811 	msr	BASEPRI, r0
   17880:	f04f 0003 	mov.w	r0, #3
   17884:	df02      	svc	2
   17886:	e78a      	b.n	1779e <ull_conn_tx_lll_enqueue+0x2e>
		conn->llcp_phy.pause_tx = 1U;
   17888:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   1788c:	f043 0301 	orr.w	r3, r3, #1
   17890:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		break;
   17894:	e77d      	b.n	17792 <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   17896:	791a      	ldrb	r2, [r3, #4]
   17898:	f002 0203 	and.w	r2, r2, #3
   1789c:	2a03      	cmp	r2, #3
   1789e:	d197      	bne.n	177d0 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   178a0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   178a2:	2a03      	cmp	r2, #3
   178a4:	d001      	beq.n	178aa <ull_conn_tx_lll_enqueue+0x13a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   178a6:	2a0a      	cmp	r2, #10
   178a8:	d192      	bne.n	177d0 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   178aa:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   178ae:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   178b2:	428a      	cmp	r2, r1
   178b4:	d00b      	beq.n	178ce <ull_conn_tx_lll_enqueue+0x15e>
   178b6:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   178ba:	2a03      	cmp	r2, #3
   178bc:	d088      	beq.n	177d0 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   178be:	681a      	ldr	r2, [r3, #0]
   178c0:	b11a      	cbz	r2, 178ca <ull_conn_tx_lll_enqueue+0x15a>
   178c2:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   178c6:	428a      	cmp	r2, r1
   178c8:	d02d      	beq.n	17926 <ull_conn_tx_lll_enqueue+0x1b6>
}
   178ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		    ((conn->llcp_req == conn->llcp_ack) &&
   178ce:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
   178d2:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
   178d6:	4288      	cmp	r0, r1
   178d8:	d1f1      	bne.n	178be <ull_conn_tx_lll_enqueue+0x14e>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   178da:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
   178de:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
   178e2:	4288      	cmp	r0, r1
   178e4:	d1eb      	bne.n	178be <ull_conn_tx_lll_enqueue+0x14e>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   178e6:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   178ea:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   178ee:	4288      	cmp	r0, r1
   178f0:	d1e5      	bne.n	178be <ull_conn_tx_lll_enqueue+0x14e>
		       conn->llcp_conn_param.req) ||
   178f2:	f894 0199 	ldrb.w	r0, [r4, #409]	; 0x199
   178f6:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
   178fa:	4288      	cmp	r0, r1
   178fc:	d1df      	bne.n	178be <ull_conn_tx_lll_enqueue+0x14e>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   178fe:	f894 01a9 	ldrb.w	r0, [r4, #425]	; 0x1a9
   17902:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   17906:	4288      	cmp	r0, r1
   17908:	d1d9      	bne.n	178be <ull_conn_tx_lll_enqueue+0x14e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1790a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1790e:	2101      	movs	r1, #1
   17910:	f361 0301 	bfi	r3, r1, #0, #2
			conn->llcp_ack -= 2U;
   17914:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
   17916:	2103      	movs	r1, #3
			conn->llcp_ack -= 2U;
   17918:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1791c:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
			conn->llcp_type = LLCP_ENCRYPTION;
   17920:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   17924:	e754      	b.n	177d0 <ull_conn_tx_lll_enqueue+0x60>
				tx->next = conn->tx_ctrl_last->next;
   17926:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
				if (!conn->tx_data_last) {
   1792a:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
				conn->tx_head = tx->next;
   1792e:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
				tx->next = conn->tx_ctrl_last->next;
   17932:	680a      	ldr	r2, [r1, #0]
   17934:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   17936:	600b      	str	r3, [r1, #0]
				conn->tx_data = tx;
   17938:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
				if (!conn->tx_data_last) {
   1793c:	2800      	cmp	r0, #0
   1793e:	f47f af47 	bne.w	177d0 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   17942:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
   17946:	e743      	b.n	177d0 <ull_conn_tx_lll_enqueue+0x60>
   17948:	4770      	bx	lr
   1794a:	bf00      	nop
   1794c:	00025984 	.word	0x00025984
   17950:	20002228 	.word	0x20002228
   17954:	00025ee4 	.word	0x00025ee4
   17958:	00025f3c 	.word	0x00025f3c

0001795c <tx_demux>:
{
   1795c:	b510      	push	{r4, lr}
   1795e:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   17960:	2001      	movs	r0, #1
   17962:	f7ff fc8f 	bl	17284 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   17966:	4620      	mov	r0, r4
   17968:	2101      	movs	r1, #1
}
   1796a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   1796e:	f7ff beff 	b.w	17770 <ull_conn_tx_lll_enqueue>
   17972:	bf00      	nop

00017974 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   17974:	4901      	ldr	r1, [pc, #4]	; (1797c <ull_conn_link_tx_release+0x8>)
   17976:	f7f7 be1f 	b.w	f5b8 <mem_release>
   1797a:	bf00      	nop
   1797c:	20002228 	.word	0x20002228

00017980 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   17980:	4b01      	ldr	r3, [pc, #4]	; (17988 <ull_conn_ack_last_idx_get+0x8>)
}
   17982:	78d8      	ldrb	r0, [r3, #3]
   17984:	4770      	bx	lr
   17986:	bf00      	nop
   17988:	20000438 	.word	0x20000438

0001798c <ull_conn_ack_peek>:
{
   1798c:	b4f0      	push	{r4, r5, r6, r7}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1798e:	4b0b      	ldr	r3, [pc, #44]	; (179bc <ull_conn_ack_peek+0x30>)
   17990:	789c      	ldrb	r4, [r3, #2]
   17992:	78de      	ldrb	r6, [r3, #3]
   17994:	781f      	ldrb	r7, [r3, #0]
	if (first == last) {
   17996:	42b4      	cmp	r4, r6
   17998:	d00d      	beq.n	179b6 <ull_conn_ack_peek+0x2a>
	return (void *)(fifo + first * size);
   1799a:	3304      	adds	r3, #4
   1799c:	fb14 f407 	smulbb	r4, r4, r7
	if (!lll_tx) {
   179a0:	4605      	mov	r5, r0
   179a2:	1918      	adds	r0, r3, r4
   179a4:	d005      	beq.n	179b2 <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   179a6:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   179a8:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   179aa:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   179ac:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   179ae:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   179b0:	6818      	ldr	r0, [r3, #0]
}
   179b2:	bcf0      	pop	{r4, r5, r6, r7}
   179b4:	4770      	bx	lr
		return NULL;
   179b6:	2000      	movs	r0, #0
   179b8:	e7fb      	b.n	179b2 <ull_conn_ack_peek+0x26>
   179ba:	bf00      	nop
   179bc:	20000438 	.word	0x20000438

000179c0 <ull_conn_ack_by_last_peek>:
{
   179c0:	b430      	push	{r4, r5}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   179c2:	4b09      	ldr	r3, [pc, #36]	; (179e8 <ull_conn_ack_by_last_peek+0x28>)
   179c4:	789c      	ldrb	r4, [r3, #2]
   179c6:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   179c8:	4284      	cmp	r4, r0
   179ca:	d00b      	beq.n	179e4 <ull_conn_ack_by_last_peek+0x24>
	return (void *)(fifo + first * size);
   179cc:	3304      	adds	r3, #4
   179ce:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   179d2:	1918      	adds	r0, r3, r4
   179d4:	d004      	beq.n	179e0 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   179d6:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   179d8:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   179da:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   179dc:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   179de:	6818      	ldr	r0, [r3, #0]
}
   179e0:	bc30      	pop	{r4, r5}
   179e2:	4770      	bx	lr
		return NULL;
   179e4:	2000      	movs	r0, #0
   179e6:	e7fb      	b.n	179e0 <ull_conn_ack_by_last_peek+0x20>
   179e8:	20000438 	.word	0x20000438

000179ec <ull_conn_ack_dequeue>:
{
   179ec:	b410      	push	{r4}
	return MFIFO_DEQUEUE(conn_ack);
   179ee:	4b0a      	ldr	r3, [pc, #40]	; (17a18 <ull_conn_ack_dequeue+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   179f0:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   179f2:	78da      	ldrb	r2, [r3, #3]
   179f4:	7818      	ldrb	r0, [r3, #0]
   179f6:	785c      	ldrb	r4, [r3, #1]
   179f8:	428a      	cmp	r2, r1
   179fa:	d00a      	beq.n	17a12 <ull_conn_ack_dequeue+0x26>
	_first += 1U;
   179fc:	1c4a      	adds	r2, r1, #1
   179fe:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   17a00:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   17a04:	4294      	cmp	r4, r2
   17a06:	bf08      	it	eq
   17a08:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   17a0a:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   17a0c:	709a      	strb	r2, [r3, #2]
}
   17a0e:	bc10      	pop	{r4}
   17a10:	4770      	bx	lr
		return NULL;
   17a12:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   17a14:	e7fb      	b.n	17a0e <ull_conn_ack_dequeue+0x22>
   17a16:	bf00      	nop
   17a18:	20000438 	.word	0x20000438

00017a1c <ull_conn_lll_ack_enqueue>:
{
   17a1c:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   17a1e:	4a13      	ldr	r2, [pc, #76]	; (17a6c <ull_conn_lll_ack_enqueue+0x50>)
   17a20:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   17a22:	7855      	ldrb	r5, [r2, #1]
   17a24:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   17a26:	1c73      	adds	r3, r6, #1
   17a28:	b2db      	uxtb	r3, r3
		last = 0U;
   17a2a:	429d      	cmp	r5, r3
   17a2c:	bf08      	it	eq
   17a2e:	2300      	moveq	r3, #0
	if (last == first) {
   17a30:	429c      	cmp	r4, r3
   17a32:	d00a      	beq.n	17a4a <ull_conn_lll_ack_enqueue+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   17a34:	4615      	mov	r5, r2
   17a36:	f815 4b04 	ldrb.w	r4, [r5], #4
   17a3a:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   17a3e:	192e      	adds	r6, r5, r4
   17a40:	d003      	beq.n	17a4a <ull_conn_lll_ack_enqueue+0x2e>
	lll_tx->handle = handle;
   17a42:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   17a44:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   17a46:	6071      	str	r1, [r6, #4]
}
   17a48:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(lll_tx);
   17a4a:	4a09      	ldr	r2, [pc, #36]	; (17a70 <ull_conn_lll_ack_enqueue+0x54>)
   17a4c:	4909      	ldr	r1, [pc, #36]	; (17a74 <ull_conn_lll_ack_enqueue+0x58>)
   17a4e:	480a      	ldr	r0, [pc, #40]	; (17a78 <ull_conn_lll_ack_enqueue+0x5c>)
   17a50:	f44f 63b6 	mov.w	r3, #1456	; 0x5b0
   17a54:	f007 fe4f 	bl	1f6f6 <printk>
   17a58:	4040      	eors	r0, r0
   17a5a:	f380 8811 	msr	BASEPRI, r0
   17a5e:	f04f 0003 	mov.w	r0, #3
   17a62:	df02      	svc	2
	lll_tx->handle = handle;
   17a64:	2300      	movs	r3, #0
   17a66:	801b      	strh	r3, [r3, #0]
   17a68:	deff      	udf	#255	; 0xff
   17a6a:	bf00      	nop
   17a6c:	20000438 	.word	0x20000438
   17a70:	00025ee4 	.word	0x00025ee4
   17a74:	00025f2c 	.word	0x00025f2c
   17a78:	00025984 	.word	0x00025984

00017a7c <ull_conn_tx_ack>:
{
   17a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   17a7e:	7953      	ldrb	r3, [r2, #5]
{
   17a80:	b083      	sub	sp, #12
   17a82:	4614      	mov	r4, r2
   17a84:	4605      	mov	r5, r0
   17a86:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   17a88:	b37b      	cbz	r3, 17aea <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   17a8a:	7923      	ldrb	r3, [r4, #4]
   17a8c:	f003 0203 	and.w	r2, r3, #3
   17a90:	2a03      	cmp	r2, #3
   17a92:	d00d      	beq.n	17ab0 <ull_conn_tx_ack+0x34>
	} else if (handle == 0xFFFF) {
   17a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17a98:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   17a9a:	bf04      	itt	eq
   17a9c:	f36f 0301 	bfceq	r3, #0, #2
   17aa0:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   17aa2:	4621      	mov	r1, r4
   17aa4:	4628      	mov	r0, r5
}
   17aa6:	b003      	add	sp, #12
   17aa8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   17aac:	f7fc b912 	b.w	13cd4 <ll_tx_ack_put>
		if (handle != 0xFFFF) {
   17ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17ab4:	429d      	cmp	r5, r3
   17ab6:	d126      	bne.n	17b06 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   17ab8:	6830      	ldr	r0, [r6, #0]
   17aba:	4284      	cmp	r4, r0
   17abc:	d04b      	beq.n	17b56 <ull_conn_tx_ack+0xda>
			LL_ASSERT(!link->next);
   17abe:	2800      	cmp	r0, #0
   17ac0:	d0ef      	beq.n	17aa2 <ull_conn_tx_ack+0x26>
   17ac2:	4ac0      	ldr	r2, [pc, #768]	; (17dc4 <ull_conn_tx_ack+0x348>)
   17ac4:	49c0      	ldr	r1, [pc, #768]	; (17dc8 <ull_conn_tx_ack+0x34c>)
   17ac6:	48c1      	ldr	r0, [pc, #772]	; (17dcc <ull_conn_tx_ack+0x350>)
   17ac8:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
   17acc:	f007 fe13 	bl	1f6f6 <printk>
   17ad0:	4040      	eors	r0, r0
   17ad2:	f380 8811 	msr	BASEPRI, r0
   17ad6:	f04f 0003 	mov.w	r0, #3
   17ada:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   17adc:	4621      	mov	r1, r4
   17ade:	4628      	mov	r0, r5
}
   17ae0:	b003      	add	sp, #12
   17ae2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   17ae6:	f7fc b8f5 	b.w	13cd4 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   17aea:	4ab6      	ldr	r2, [pc, #728]	; (17dc4 <ull_conn_tx_ack+0x348>)
   17aec:	49b8      	ldr	r1, [pc, #736]	; (17dd0 <ull_conn_tx_ack+0x354>)
   17aee:	48b7      	ldr	r0, [pc, #732]	; (17dcc <ull_conn_tx_ack+0x350>)
   17af0:	f240 53bd 	movw	r3, #1469	; 0x5bd
   17af4:	f007 fdff 	bl	1f6f6 <printk>
   17af8:	4040      	eors	r0, r0
   17afa:	f380 8811 	msr	BASEPRI, r0
   17afe:	f04f 0003 	mov.w	r0, #3
   17b02:	df02      	svc	2
   17b04:	e7c1      	b.n	17a8a <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17b06:	48b3      	ldr	r0, [pc, #716]	; (17dd4 <ull_conn_tx_ack+0x358>)
   17b08:	462a      	mov	r2, r5
   17b0a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   17b0e:	f7f7 fd6b 	bl	f5e8 <mem_get>
   17b12:	79e3      	ldrb	r3, [r4, #7]
   17b14:	3b02      	subs	r3, #2
   17b16:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   17b18:	2b16      	cmp	r3, #22
   17b1a:	d818      	bhi.n	17b4e <ull_conn_tx_ack+0xd2>
   17b1c:	e8df f013 	tbh	[pc, r3, lsl #1]
   17b20:	00f70113 	.word	0x00f70113
   17b24:	00170048 	.word	0x00170048
   17b28:	00170017 	.word	0x00170017
   17b2c:	00170017 	.word	0x00170017
   17b30:	005d00e6 	.word	0x005d00e6
   17b34:	00530017 	.word	0x00530017
   17b38:	00170017 	.word	0x00170017
   17b3c:	004f0017 	.word	0x004f0017
   17b40:	00170017 	.word	0x00170017
   17b44:	00a400cd 	.word	0x00a400cd
   17b48:	00280021 	.word	0x00280021
   17b4c:	00d5      	.short	0x00d5
		if (link->next == (void *)tx) {
   17b4e:	6830      	ldr	r0, [r6, #0]
   17b50:	42a0      	cmp	r0, r4
   17b52:	d1b4      	bne.n	17abe <ull_conn_tx_ack+0x42>
   17b54:	4620      	mov	r0, r4
			mem_release(tx, &mem_conn_tx_ctrl.free);
   17b56:	49a0      	ldr	r1, [pc, #640]	; (17dd8 <ull_conn_tx_ack+0x35c>)
}
   17b58:	b003      	add	sp, #12
   17b5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   17b5e:	f7f7 bd2b 	b.w	f5b8 <mem_release>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   17b62:	f890 31aa 	ldrb.w	r3, [r0, #426]	; 0x1aa
   17b66:	2202      	movs	r2, #2
   17b68:	f362 0301 	bfi	r3, r2, #0, #2
   17b6c:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
		if (conn->lll.role) {
   17b70:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
   17b74:	2b00      	cmp	r3, #0
   17b76:	da14      	bge.n	17ba2 <ull_conn_tx_ack+0x126>
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   17b78:	4998      	ldr	r1, [pc, #608]	; (17ddc <ull_conn_tx_ack+0x360>)
			phys = conn->llcp_phy.tx | lll->phy_tx;
   17b7a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
   17b7e:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   17b82:	c903      	ldmia	r1, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   17b84:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   17b88:	f10d 0c08 	add.w	ip, sp, #8
   17b8c:	e90c 0003 	stmdb	ip, {r0, r1}
			lll->phy_tx_time = phy_tx_time[phys];
   17b90:	f003 0307 	and.w	r3, r3, #7
   17b94:	4463      	add	r3, ip
   17b96:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   17b9a:	f363 1206 	bfi	r2, r3, #4, #3
   17b9e:	f887 2064 	strb.w	r2, [r7, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   17ba2:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
   17ba6:	f36f 0300 	bfc	r3, #0, #1
   17baa:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
		break;
   17bae:	e783      	b.n	17ab8 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   17bb0:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
   17bb4:	f043 0302 	orr.w	r3, r3, #2
   17bb8:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
   17bbc:	e77c      	b.n	17ab8 <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   17bbe:	7a23      	ldrb	r3, [r4, #8]
   17bc0:	2b03      	cmp	r3, #3
   17bc2:	f47f af79 	bne.w	17ab8 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   17bc6:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
		conn->procedure_expire = 0U;
   17bca:	2200      	movs	r2, #0
		conn->llcp_enc.pause_rx = 0U;
   17bcc:	f023 0303 	bic.w	r3, r3, #3
   17bd0:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
		conn->procedure_expire = 0U;
   17bd4:	f8a7 20cc 	strh.w	r2, [r7, #204]	; 0xcc
		break;
   17bd8:	e76e      	b.n	17ab8 <ull_conn_tx_ack+0x3c>
		if (!conn->lll.role) {
   17bda:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   17bde:	2b00      	cmp	r3, #0
   17be0:	dbe6      	blt.n	17bb0 <ull_conn_tx_ack+0x134>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17be2:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   17be4:	2203      	movs	r2, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17be6:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   17bea:	2117      	movs	r1, #23
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   17bec:	71e2      	strb	r2, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   17bee:	2208      	movs	r2, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17bf0:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   17bf2:	7161      	strb	r1, [r4, #5]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   17bf4:	f200 1155 	addw	r1, r0, #341	; 0x155
   17bf8:	18a0      	adds	r0, r4, r2
   17bfa:	f009 fdf4 	bl	217e6 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   17bfe:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
   17c02:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   17c04:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
   17c08:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   17c0a:	210c      	movs	r1, #12
   17c0c:	f104 0012 	add.w	r0, r4, #18
   17c10:	f002 f90a 	bl	19e28 <lll_csrand_isr_get>
	    conn->tx_head &&
   17c14:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
	if (
   17c18:	2b00      	cmp	r3, #0
   17c1a:	f000 80ad 	beq.w	17d78 <ull_conn_tx_ack+0x2fc>
	    !conn->llcp_enc.pause_tx &&
   17c1e:	f897 2152 	ldrb.w	r2, [r7, #338]	; 0x152
	    conn->tx_head &&
   17c22:	0791      	lsls	r1, r2, #30
   17c24:	f100 80a8 	bmi.w	17d78 <ull_conn_tx_ack+0x2fc>
	    !conn->llcp_phy.pause_tx &&
   17c28:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
   17c2c:	07d2      	lsls	r2, r2, #31
   17c2e:	f100 80a3 	bmi.w	17d78 <ull_conn_tx_ack+0x2fc>
		if (conn->tx_head == conn->tx_data) {
   17c32:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
   17c36:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17c38:	bf04      	itt	eq
   17c3a:	681a      	ldreq	r2, [r3, #0]
   17c3c:	f8c7 21bc 	streq.w	r2, [r7, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   17c40:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
   17c44:	2a00      	cmp	r2, #0
   17c46:	f000 80b6 	beq.w	17db6 <ull_conn_tx_ack+0x33a>
	tx->next = conn->tx_ctrl_last->next;
   17c4a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
   17c4e:	681a      	ldr	r2, [r3, #0]
   17c50:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   17c52:	601c      	str	r4, [r3, #0]
	conn->tx_ctrl_last = tx;
   17c54:	6823      	ldr	r3, [r4, #0]
   17c56:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
	if (!tx->next) {
   17c5a:	6832      	ldr	r2, [r6, #0]
   17c5c:	2b00      	cmp	r3, #0
   17c5e:	d079      	beq.n	17d54 <ull_conn_tx_ack+0x2d8>
		if (link->next == (void *)tx) {
   17c60:	2a00      	cmp	r2, #0
   17c62:	d07a      	beq.n	17d5a <ull_conn_tx_ack+0x2de>
}
   17c64:	b003      	add	sp, #12
   17c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   17c68:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
   17c6c:	f890 3199 	ldrb.w	r3, [r0, #409]	; 0x199
   17c70:	428b      	cmp	r3, r1
   17c72:	f43f af21 	beq.w	17ab8 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   17c76:	f890 219a 	ldrb.w	r2, [r0, #410]	; 0x19a
   17c7a:	f002 0307 	and.w	r3, r2, #7
   17c7e:	2b03      	cmp	r3, #3
   17c80:	d005      	beq.n	17c8e <ull_conn_tx_ack+0x212>
   17c82:	3303      	adds	r3, #3
   17c84:	f003 0307 	and.w	r3, r3, #7
   17c88:	2b01      	cmp	r3, #1
   17c8a:	f63f af60 	bhi.w	17b4e <ull_conn_tx_ack+0xd2>
				conn->lll.max_tx_octets =
   17c8e:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
   17c92:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				if (conn->llcp_length.state ==
   17c96:	f002 0307 	and.w	r3, r2, #7
				conn->lll.max_tx_time =
   17c9a:	f8b7 01a2 	ldrh.w	r0, [r7, #418]	; 0x1a2
   17c9e:	f8a7 0060 	strh.w	r0, [r7, #96]	; 0x60
				if (conn->llcp_length.state ==
   17ca2:	2b05      	cmp	r3, #5
   17ca4:	f000 8081 	beq.w	17daa <ull_conn_tx_ack+0x32e>
				if (!conn->llcp_length.cache.tx_octets) {
   17ca8:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
   17cac:	2b00      	cmp	r3, #0
   17cae:	d16e      	bne.n	17d8e <ull_conn_tx_ack+0x312>
					conn->llcp_length.ack =
   17cb0:	f887 1199 	strb.w	r1, [r7, #409]	; 0x199
					conn->procedure_expire = 0U;
   17cb4:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
					break;
   17cb8:	e6fe      	b.n	17ab8 <ull_conn_tx_ack+0x3c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   17cba:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   17cbe:	2202      	movs	r2, #2
   17cc0:	f362 0302 	bfi	r3, r2, #0, #3
   17cc4:	f880 319a 	strb.w	r3, [r0, #410]	; 0x19a
		break;
   17cc8:	e6f6      	b.n	17ab8 <ull_conn_tx_ack+0x3c>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   17cca:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   17cce:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   17cd2:	f890 21ab 	ldrb.w	r2, [r0, #427]	; 0x1ab
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   17cd6:	f3c3 0382 	ubfx	r3, r3, #2, #3
   17cda:	f363 1106 	bfi	r1, r3, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   17cde:	f36f 0200 	bfc	r2, #0, #1
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   17ce2:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   17ce6:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
		break;
   17cea:	e6e5      	b.n	17ab8 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_tx = 1U;
   17cec:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   17cf0:	f8b0 20ca 	ldrh.w	r2, [r0, #202]	; 0xca
   17cf4:	f8a0 20cc 	strh.w	r2, [r0, #204]	; 0xcc
		conn->llcp_enc.pause_tx = 1U;
   17cf8:	f023 0306 	bic.w	r3, r3, #6
		conn->llcp_enc.ack = conn->llcp_enc.req;
   17cfc:	f890 2150 	ldrb.w	r2, [r0, #336]	; 0x150
   17d00:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
		conn->llcp_enc.pause_tx = 1U;
   17d04:	f043 0306 	orr.w	r3, r3, #6
   17d08:	f880 3152 	strb.w	r3, [r0, #338]	; 0x152
		break;
   17d0c:	e6d4      	b.n	17ab8 <ull_conn_tx_ack+0x3c>
		memcpy(&conn->llcp.encryption.skd[0],
   17d0e:	2208      	movs	r2, #8
   17d10:	f104 0112 	add.w	r1, r4, #18
   17d14:	30ee      	adds	r0, #238	; 0xee
   17d16:	f009 fd66 	bl	217e6 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   17d1a:	2204      	movs	r2, #4
   17d1c:	f104 011a 	add.w	r1, r4, #26
   17d20:	f107 0098 	add.w	r0, r7, #152	; 0x98
   17d24:	f009 fd5f 	bl	217e6 <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   17d28:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   17d2c:	f8b7 10ca 	ldrh.w	r1, [r7, #202]	; 0xca
		conn->llcp_enc.ack = conn->llcp_enc.req;
   17d30:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
		conn->procedure_expire = conn->procedure_reload;
   17d34:	f8a7 10cc 	strh.w	r1, [r7, #204]	; 0xcc
		conn->llcp_enc.pause_tx = 1U;
   17d38:	f043 0302 	orr.w	r3, r3, #2
   17d3c:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
		conn->llcp_enc.ack = conn->llcp_enc.req;
   17d40:	f887 2151 	strb.w	r2, [r7, #337]	; 0x151
		break;
   17d44:	e6b8      	b.n	17ab8 <ull_conn_tx_ack+0x3c>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   17d46:	7a21      	ldrb	r1, [r4, #8]
   17d48:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   17d4a:	bf08      	it	eq
   17d4c:	2116      	moveq	r1, #22
   17d4e:	f7ff fae9 	bl	17324 <conn_cleanup>
	break;
   17d52:	e6b1      	b.n	17ab8 <ull_conn_tx_ack+0x3c>
		conn->tx_data_last = tx;
   17d54:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
   17d58:	e782      	b.n	17c60 <ull_conn_tx_ack+0x1e4>
			LL_ASSERT(link->next);
   17d5a:	4a1a      	ldr	r2, [pc, #104]	; (17dc4 <ull_conn_tx_ack+0x348>)
   17d5c:	4920      	ldr	r1, [pc, #128]	; (17de0 <ull_conn_tx_ack+0x364>)
   17d5e:	481b      	ldr	r0, [pc, #108]	; (17dcc <ull_conn_tx_ack+0x350>)
   17d60:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
   17d64:	f007 fcc7 	bl	1f6f6 <printk>
   17d68:	4040      	eors	r0, r0
   17d6a:	f380 8811 	msr	BASEPRI, r0
   17d6e:	f04f 0003 	mov.w	r0, #3
   17d72:	df02      	svc	2
   17d74:	2000      	movs	r0, #0
   17d76:	e6ee      	b.n	17b56 <ull_conn_tx_ack+0xda>
		if (!conn->tx_ctrl) {
   17d78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
   17d7c:	2a00      	cmp	r2, #0
   17d7e:	f47f af64 	bne.w	17c4a <ull_conn_tx_ack+0x1ce>
			tx->next = conn->tx_head;
   17d82:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   17d84:	e9c7 446c 	strd	r4, r4, [r7, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   17d88:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
   17d8c:	e765      	b.n	17c5a <ull_conn_tx_ack+0x1de>
				conn->llcp_length.cache.tx_octets = 0;
   17d8e:	2100      	movs	r1, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17d90:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_length.tx_octets =
   17d94:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
				conn->llcp_length.tx_time =
   17d98:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17d9c:	f887 219a 	strb.w	r2, [r7, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
   17da0:	f8a7 11a4 	strh.w	r1, [r7, #420]	; 0x1a4
				conn->llcp_length.tx_time =
   17da4:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
				break;
   17da8:	e686      	b.n	17ab8 <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   17daa:	2304      	movs	r3, #4
   17dac:	f363 0202 	bfi	r2, r3, #0, #3
   17db0:	f887 219a 	strb.w	r2, [r7, #410]	; 0x19a
					break;
   17db4:	e680      	b.n	17ab8 <ull_conn_tx_ack+0x3c>
			tx->next = conn->tx_head->next;
   17db6:	681a      	ldr	r2, [r3, #0]
   17db8:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   17dba:	601c      	str	r4, [r3, #0]
				conn->tx_ctrl = tx;
   17dbc:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   17dbe:	e9c7 446d 	strd	r4, r4, [r7, #436]	; 0x1b4
   17dc2:	e74a      	b.n	17c5a <ull_conn_tx_ack+0x1de>
   17dc4:	00025ee4 	.word	0x00025ee4
   17dc8:	000260a4 	.word	0x000260a4
   17dcc:	00025984 	.word	0x00025984
   17dd0:	00026098 	.word	0x00026098
   17dd4:	20001f58 	.word	0x20001f58
   17dd8:	200021a4 	.word	0x200021a4
   17ddc:	000260bc 	.word	0x000260bc
   17de0:	000260b0 	.word	0x000260b0

00017de4 <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   17de4:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   17de8:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   17dec:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   17dee:	bf03      	ittte	eq
   17df0:	3301      	addeq	r3, #1
   17df2:	f880 30e8 	strbeq.w	r3, [r0, #232]	; 0xe8
	return 0;
   17df6:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   17df8:	200c      	movne	r0, #12
}
   17dfa:	4770      	bx	lr

00017dfc <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   17dfc:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
   17e00:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   17e04:	f3c1 1202 	ubfx	r2, r1, #4, #3
   17e08:	2a02      	cmp	r2, #2
   17e0a:	d010      	beq.n	17e2e <ull_conn_lll_max_tx_octets_get+0x32>
   17e0c:	2a04      	cmp	r2, #4
   17e0e:	d012      	beq.n	17e36 <ull_conn_lll_max_tx_octets_get+0x3a>
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   17e10:	08db      	lsrs	r3, r3, #3
   17e12:	3b0a      	subs	r3, #10
   17e14:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   17e16:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
	return max_tx_octets;
   17e1a:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
	if (lll->enc_tx) {
   17e1e:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   17e20:	bf44      	itt	mi
   17e22:	3b04      	submi	r3, #4
   17e24:	b29b      	uxthmi	r3, r3
}
   17e26:	4298      	cmp	r0, r3
   17e28:	bf28      	it	cs
   17e2a:	4618      	movcs	r0, r3
   17e2c:	4770      	bx	lr
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   17e2e:	089b      	lsrs	r3, r3, #2
   17e30:	3b0b      	subs	r3, #11
   17e32:	b29b      	uxth	r3, r3
		break;
   17e34:	e7ef      	b.n	17e16 <ull_conn_lll_max_tx_octets_get+0x1a>
		if (lll->phy_flags & 0x01) {
   17e36:	0709      	lsls	r1, r1, #28
			max_tx_octets = ((lll->max_tx_time - 592) >>
   17e38:	bf4b      	itete	mi
   17e3a:	f5a3 7314 	submi.w	r3, r3, #592	; 0x250
			max_tx_octets = ((lll->max_tx_time - 430) >>
   17e3e:	f5a3 73d7 	subpl.w	r3, r3, #430	; 0x1ae
			max_tx_octets = ((lll->max_tx_time - 592) >>
   17e42:	119b      	asrmi	r3, r3, #6
			max_tx_octets = ((lll->max_tx_time - 430) >>
   17e44:	111b      	asrpl	r3, r3, #4
					  4) - 2;
   17e46:	3b02      	subs	r3, #2
			max_tx_octets = ((lll->max_tx_time - 430) >>
   17e48:	b29b      	uxth	r3, r3
   17e4a:	e7e4      	b.n	17e16 <ull_conn_lll_max_tx_octets_get+0x1a>

00017e4c <ull_conn_upd_curr_reset>:
	conn_upd_curr = NULL;
   17e4c:	4b01      	ldr	r3, [pc, #4]	; (17e54 <ull_conn_upd_curr_reset+0x8>)
   17e4e:	2200      	movs	r2, #0
   17e50:	601a      	str	r2, [r3, #0]
}
   17e52:	4770      	bx	lr
   17e54:	20002120 	.word	0x20002120

00017e58 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   17e58:	b510      	push	{r4, lr}
   17e5a:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   17e5c:	b930      	cbnz	r0, 17e6c <ticker_update_latency_cancel_op_cb+0x14>

	conn->slave.latency_cancel = 0U;
   17e5e:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   17e62:	f36f 0341 	bfc	r3, #1, #1
   17e66:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   17e6a:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   17e6c:	4a09      	ldr	r2, [pc, #36]	; (17e94 <ticker_update_latency_cancel_op_cb+0x3c>)
   17e6e:	490a      	ldr	r1, [pc, #40]	; (17e98 <ticker_update_latency_cancel_op_cb+0x40>)
   17e70:	480a      	ldr	r0, [pc, #40]	; (17e9c <ticker_update_latency_cancel_op_cb+0x44>)
   17e72:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
   17e76:	f007 fc3e 	bl	1f6f6 <printk>
   17e7a:	4040      	eors	r0, r0
   17e7c:	f380 8811 	msr	BASEPRI, r0
   17e80:	f04f 0003 	mov.w	r0, #3
   17e84:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   17e86:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   17e8a:	f36f 0341 	bfc	r3, #1, #1
   17e8e:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   17e92:	bd10      	pop	{r4, pc}
   17e94:	000260dc 	.word	0x000260dc
   17e98:	00026120 	.word	0x00026120
   17e9c:	00025984 	.word	0x00025984

00017ea0 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17ea0:	b900      	cbnz	r0, 17ea4 <ticker_op_cb+0x4>
   17ea2:	4770      	bx	lr
{
   17ea4:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   17ea6:	4a07      	ldr	r2, [pc, #28]	; (17ec4 <ticker_op_cb+0x24>)
   17ea8:	4907      	ldr	r1, [pc, #28]	; (17ec8 <ticker_op_cb+0x28>)
   17eaa:	4808      	ldr	r0, [pc, #32]	; (17ecc <ticker_op_cb+0x2c>)
   17eac:	f44f 73ef 	mov.w	r3, #478	; 0x1de
   17eb0:	f007 fc21 	bl	1f6f6 <printk>
   17eb4:	4040      	eors	r0, r0
   17eb6:	f380 8811 	msr	BASEPRI, r0
   17eba:	f04f 0003 	mov.w	r0, #3
   17ebe:	df02      	svc	2
}
   17ec0:	bd08      	pop	{r3, pc}
   17ec2:	bf00      	nop
   17ec4:	000260dc 	.word	0x000260dc
   17ec8:	00025f44 	.word	0x00025f44
   17ecc:	00025984 	.word	0x00025984

00017ed0 <ticker_op_stop_adv_cb.part.0>:
static void ticker_op_stop_adv_cb(uint32_t status, void *param)
   17ed0:	b508      	push	{r3, lr}
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   17ed2:	4a07      	ldr	r2, [pc, #28]	; (17ef0 <ticker_op_stop_adv_cb.part.0+0x20>)
   17ed4:	4907      	ldr	r1, [pc, #28]	; (17ef4 <ticker_op_stop_adv_cb.part.0+0x24>)
   17ed6:	4808      	ldr	r0, [pc, #32]	; (17ef8 <ticker_op_stop_adv_cb.part.0+0x28>)
   17ed8:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
   17edc:	f007 fc0b 	bl	1f6f6 <printk>
   17ee0:	4040      	eors	r0, r0
   17ee2:	f380 8811 	msr	BASEPRI, r0
   17ee6:	f04f 0003 	mov.w	r0, #3
   17eea:	df02      	svc	2
}
   17eec:	bd08      	pop	{r3, pc}
   17eee:	bf00      	nop
   17ef0:	000260dc 	.word	0x000260dc
   17ef4:	00026134 	.word	0x00026134
   17ef8:	00025984 	.word	0x00025984

00017efc <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   17efc:	2801      	cmp	r0, #1
   17efe:	d000      	beq.n	17f02 <ticker_op_stop_adv_cb+0x6>
   17f00:	4770      	bx	lr
{
   17f02:	b510      	push	{r4, lr}
   17f04:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   17f06:	f7fb ff55 	bl	13db4 <ull_disable_mark_get>
   17f0a:	4284      	cmp	r4, r0
   17f0c:	d003      	beq.n	17f16 <ticker_op_stop_adv_cb+0x1a>
}
   17f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17f12:	f7ff bfdd 	b.w	17ed0 <ticker_op_stop_adv_cb.part.0>
   17f16:	bd10      	pop	{r4, pc}

00017f18 <ull_slave_ticker_cb>:
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   17f18:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	; 0x2c
{
   17f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f1e:	461c      	mov	r4, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   17f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17f24:	459c      	cmp	ip, r3
   17f26:	d02a      	beq.n	17f7e <ull_slave_ticker_cb+0x66>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   17f28:	4605      	mov	r5, r0
   17f2a:	460f      	mov	r7, r1
   17f2c:	4601      	mov	r1, r0
   17f2e:	4620      	mov	r0, r4
   17f30:	4616      	mov	r6, r2
   17f32:	f7e9 f93d 	bl	11b0 <ull_conn_llcp>
		if (ret) {
   17f36:	bb10      	cbnz	r0, 17f7e <ull_slave_ticker_cb+0x66>
	return ++hdr->ref;
   17f38:	7c23      	ldrb	r3, [r4, #16]
   17f3a:	3301      	adds	r3, #1
   17f3c:	b2db      	uxtb	r3, r3
   17f3e:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   17f40:	b363      	cbz	r3, 17f9c <ull_slave_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   17f42:	f8df c088 	ldr.w	ip, [pc, #136]	; 17fcc <ull_slave_ticker_cb+0xb4>
	mfy.param = &p;
   17f46:	4b1c      	ldr	r3, [pc, #112]	; (17fb8 <ull_slave_ticker_cb+0xa0>)
	p.ticks_at_expire = ticks_at_expire;
   17f48:	f8cc 5000 	str.w	r5, [ip]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17f4c:	2200      	movs	r2, #0
	p.param = &conn->lll;
   17f4e:	f104 0e1c 	add.w	lr, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17f52:	4611      	mov	r1, r2
   17f54:	2001      	movs	r0, #1
	mfy.param = &p;
   17f56:	f8c3 c008 	str.w	ip, [r3, #8]
	p.remainder = remainder;
   17f5a:	f8cc 7004 	str.w	r7, [ip, #4]
	p.lazy = lazy;
   17f5e:	f8ac 6008 	strh.w	r6, [ip, #8]
	p.param = &conn->lll;
   17f62:	f8cc e00c 	str.w	lr, [ip, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17f66:	f7f7 fbe5 	bl	f734 <mayfly_enqueue>
	LL_ASSERT(!err);
   17f6a:	b948      	cbnz	r0, 17f80 <ull_slave_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   17f6c:	20ff      	movs	r0, #255	; 0xff
   17f6e:	f7ff f989 	bl	17284 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   17f72:	4620      	mov	r0, r4
   17f74:	21ff      	movs	r1, #255	; 0xff
}
   17f76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   17f7a:	f7ff bbf9 	b.w	17770 <ull_conn_tx_lll_enqueue>
}
   17f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(!err);
   17f80:	4a0e      	ldr	r2, [pc, #56]	; (17fbc <ull_slave_ticker_cb+0xa4>)
   17f82:	490f      	ldr	r1, [pc, #60]	; (17fc0 <ull_slave_ticker_cb+0xa8>)
   17f84:	480f      	ldr	r0, [pc, #60]	; (17fc4 <ull_slave_ticker_cb+0xac>)
   17f86:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   17f8a:	f007 fbb4 	bl	1f6f6 <printk>
   17f8e:	4040      	eors	r0, r0
   17f90:	f380 8811 	msr	BASEPRI, r0
   17f94:	f04f 0003 	mov.w	r0, #3
   17f98:	df02      	svc	2
   17f9a:	e7e7      	b.n	17f6c <ull_slave_ticker_cb+0x54>
	LL_ASSERT(ref);
   17f9c:	4a07      	ldr	r2, [pc, #28]	; (17fbc <ull_slave_ticker_cb+0xa4>)
   17f9e:	490a      	ldr	r1, [pc, #40]	; (17fc8 <ull_slave_ticker_cb+0xb0>)
   17fa0:	4808      	ldr	r0, [pc, #32]	; (17fc4 <ull_slave_ticker_cb+0xac>)
   17fa2:	f44f 73c7 	mov.w	r3, #398	; 0x18e
   17fa6:	f007 fba6 	bl	1f6f6 <printk>
   17faa:	4040      	eors	r0, r0
   17fac:	f380 8811 	msr	BASEPRI, r0
   17fb0:	f04f 0003 	mov.w	r0, #3
   17fb4:	df02      	svc	2
   17fb6:	e7c4      	b.n	17f42 <ull_slave_ticker_cb+0x2a>
   17fb8:	200004e0 	.word	0x200004e0
   17fbc:	000260dc 	.word	0x000260dc
   17fc0:	00025c3c 	.word	0x00025c3c
   17fc4:	00025984 	.word	0x00025984
   17fc8:	00025dd8 	.word	0x00025dd8
   17fcc:	2000227c 	.word	0x2000227c

00017fd0 <ull_slave_latency_cancel>:
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   17fd0:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   17fd2:	b123      	cbz	r3, 17fde <ull_slave_latency_cancel+0xe>
   17fd4:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   17fd8:	f012 0302 	ands.w	r3, r2, #2
   17fdc:	d000      	beq.n	17fe0 <ull_slave_latency_cancel+0x10>
   17fde:	4770      	bx	lr
{
   17fe0:	b530      	push	{r4, r5, lr}
   17fe2:	b089      	sub	sp, #36	; 0x24
		conn->slave.latency_cancel = 1U;
   17fe4:	f042 0202 	orr.w	r2, r2, #2
				      (TICKER_ID_CONN_BASE + handle),
   17fe8:	3105      	adds	r1, #5
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   17fea:	4d11      	ldr	r5, [pc, #68]	; (18030 <ull_slave_latency_cancel+0x60>)
		conn->slave.latency_cancel = 1U;
   17fec:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   17ff0:	2401      	movs	r4, #1
   17ff2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   17ff6:	b2ca      	uxtb	r2, r1
   17ff8:	9006      	str	r0, [sp, #24]
   17ffa:	9304      	str	r3, [sp, #16]
   17ffc:	9300      	str	r3, [sp, #0]
   17ffe:	4618      	mov	r0, r3
   18000:	9505      	str	r5, [sp, #20]
   18002:	9403      	str	r4, [sp, #12]
   18004:	2103      	movs	r1, #3
   18006:	f7f8 ff51 	bl	10eac <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1800a:	f030 0302 	bics.w	r3, r0, #2
   1800e:	d00c      	beq.n	1802a <ull_slave_latency_cancel+0x5a>
   18010:	4a08      	ldr	r2, [pc, #32]	; (18034 <ull_slave_latency_cancel+0x64>)
   18012:	4909      	ldr	r1, [pc, #36]	; (18038 <ull_slave_latency_cancel+0x68>)
   18014:	4809      	ldr	r0, [pc, #36]	; (1803c <ull_slave_latency_cancel+0x6c>)
   18016:	f44f 73b0 	mov.w	r3, #352	; 0x160
   1801a:	f007 fb6c 	bl	1f6f6 <printk>
   1801e:	4040      	eors	r0, r0
   18020:	f380 8811 	msr	BASEPRI, r0
   18024:	f04f 0003 	mov.w	r0, #3
   18028:	df02      	svc	2
}
   1802a:	b009      	add	sp, #36	; 0x24
   1802c:	bd30      	pop	{r4, r5, pc}
   1802e:	bf00      	nop
   18030:	00017e59 	.word	0x00017e59
   18034:	000260dc 	.word	0x000260dc
   18038:	0002600c 	.word	0x0002600c
   1803c:	00025984 	.word	0x00025984

00018040 <ll_start_enc_req_send>:
{
   18040:	b570      	push	{r4, r5, r6, lr}
   18042:	460e      	mov	r6, r1
   18044:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   18046:	f7fd f985 	bl	15354 <ll_connected_get>
	if (!conn) {
   1804a:	2800      	cmp	r0, #0
   1804c:	d040      	beq.n	180d0 <ll_start_enc_req_send+0x90>
	if (error_code) {
   1804e:	4604      	mov	r4, r0
   18050:	b95e      	cbnz	r6, 1806a <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   18052:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   18056:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   1805a:	429a      	cmp	r2, r3
   1805c:	d003      	beq.n	18066 <ll_start_enc_req_send+0x26>
   1805e:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   18062:	2b03      	cmp	r3, #3
   18064:	d026      	beq.n	180b4 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   18066:	200c      	movs	r0, #12
}
   18068:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   1806a:	f890 0152 	ldrb.w	r0, [r0, #338]	; 0x152
   1806e:	f010 0004 	ands.w	r0, r0, #4
   18072:	d112      	bne.n	1809a <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   18074:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   18078:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1807c:	429a      	cmp	r2, r3
   1807e:	d0f2      	beq.n	18066 <ll_start_enc_req_send+0x26>
   18080:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   18084:	2b03      	cmp	r3, #3
   18086:	d1ee      	bne.n	18066 <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   18088:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			conn->llcp.encryption.error_code = error_code;
   1808c:	f884 60ed 	strb.w	r6, [r4, #237]	; 0xed
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   18090:	f360 0301 	bfi	r3, r0, #0, #2
   18094:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
}
   18098:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   1809a:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
			if (conn->llcp_terminate.ack !=
   1809e:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
   180a2:	4293      	cmp	r3, r2
   180a4:	d1df      	bne.n	18066 <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   180a6:	3301      	adds	r3, #1
   180a8:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
			conn->llcp_terminate.reason_own = error_code;
   180ac:	f884 612e 	strb.w	r6, [r4, #302]	; 0x12e
	return 0;
   180b0:	2000      	movs	r0, #0
}
   180b2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   180b4:	4629      	mov	r1, r5
   180b6:	2210      	movs	r2, #16
   180b8:	f200 105d 	addw	r0, r0, #349	; 0x15d
   180bc:	f009 fb93 	bl	217e6 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   180c0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   180c4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
	return 0;
   180c8:	4630      	mov	r0, r6
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   180ca:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
}
   180ce:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   180d0:	2002      	movs	r0, #2
}
   180d2:	bd70      	pop	{r4, r5, r6, pc}

000180d4 <ticker_op_stop_scan_cb>:
}

static void ticker_op_stop_scan_cb(uint32_t status, void *params)
{
	/* TODO: */
}
   180d4:	4770      	bx	lr
   180d6:	bf00      	nop

000180d8 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *params)
{
	ARG_UNUSED(params);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   180d8:	b900      	cbnz	r0, 180dc <ticker_op_cb+0x4>
   180da:	4770      	bx	lr
{
   180dc:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   180de:	4a07      	ldr	r2, [pc, #28]	; (180fc <ticker_op_cb+0x24>)
   180e0:	4907      	ldr	r1, [pc, #28]	; (18100 <ticker_op_cb+0x28>)
   180e2:	4808      	ldr	r0, [pc, #32]	; (18104 <ticker_op_cb+0x2c>)
   180e4:	f240 332b 	movw	r3, #811	; 0x32b
   180e8:	f007 fb05 	bl	1f6f6 <printk>
   180ec:	4040      	eors	r0, r0
   180ee:	f380 8811 	msr	BASEPRI, r0
   180f2:	f04f 0003 	mov.w	r0, #3
   180f6:	df02      	svc	2
}
   180f8:	bd08      	pop	{r3, pc}
   180fa:	bf00      	nop
   180fc:	00026178 	.word	0x00026178
   18100:	00025f44 	.word	0x00025f44
   18104:	00025984 	.word	0x00025984

00018108 <ull_master_ticker_cb>:
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   18108:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	; 0x2c
{
   1810c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1810e:	461c      	mov	r4, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   18110:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18114:	459c      	cmp	ip, r3
   18116:	d031      	beq.n	1817c <ull_master_ticker_cb+0x74>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   18118:	4605      	mov	r5, r0
   1811a:	460f      	mov	r7, r1
   1811c:	4601      	mov	r1, r0
   1811e:	4620      	mov	r0, r4
   18120:	4616      	mov	r6, r2
   18122:	f7e9 f845 	bl	11b0 <ull_conn_llcp>
		if (ret) {
   18126:	bb48      	cbnz	r0, 1817c <ull_master_ticker_cb+0x74>
   18128:	7c23      	ldrb	r3, [r4, #16]
   1812a:	3301      	adds	r3, #1
   1812c:	b2db      	uxtb	r3, r3
   1812e:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   18130:	b39b      	cbz	r3, 1819a <ull_master_ticker_cb+0x92>
	ull_conn_tx_demux(2);
   18132:	2002      	movs	r0, #2
   18134:	f7ff f8a6 	bl	17284 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 2);
   18138:	2102      	movs	r1, #2
   1813a:	4620      	mov	r0, r4
   1813c:	f7ff fb18 	bl	17770 <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   18140:	f8df c088 	ldr.w	ip, [pc, #136]	; 181cc <ull_master_ticker_cb+0xc4>
	mfy.param = &p;
   18144:	4b1c      	ldr	r3, [pc, #112]	; (181b8 <ull_master_ticker_cb+0xb0>)
	p.ticks_at_expire = ticks_at_expire;
   18146:	f8cc 5000 	str.w	r5, [ip]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1814a:	2200      	movs	r2, #0
	p.param = &conn->lll;
   1814c:	f104 0e1c 	add.w	lr, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   18150:	4611      	mov	r1, r2
   18152:	2001      	movs	r0, #1
	mfy.param = &p;
   18154:	f8c3 c008 	str.w	ip, [r3, #8]
	p.remainder = remainder;
   18158:	f8cc 7004 	str.w	r7, [ip, #4]
	p.lazy = lazy;
   1815c:	f8ac 6008 	strh.w	r6, [ip, #8]
	p.param = &conn->lll;
   18160:	f8cc e00c 	str.w	lr, [ip, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   18164:	f7f7 fae6 	bl	f734 <mayfly_enqueue>
	LL_ASSERT(!err);
   18168:	b948      	cbnz	r0, 1817e <ull_master_ticker_cb+0x76>
	ull_conn_tx_demux(UINT8_MAX);
   1816a:	20ff      	movs	r0, #255	; 0xff
   1816c:	f7ff f88a 	bl	17284 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   18170:	4620      	mov	r0, r4
   18172:	21ff      	movs	r1, #255	; 0xff
}
   18174:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   18178:	f7ff bafa 	b.w	17770 <ull_conn_tx_lll_enqueue>
}
   1817c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(!err);
   1817e:	4a0f      	ldr	r2, [pc, #60]	; (181bc <ull_master_ticker_cb+0xb4>)
   18180:	490f      	ldr	r1, [pc, #60]	; (181c0 <ull_master_ticker_cb+0xb8>)
   18182:	4810      	ldr	r0, [pc, #64]	; (181c4 <ull_master_ticker_cb+0xbc>)
   18184:	f240 3317 	movw	r3, #791	; 0x317
   18188:	f007 fab5 	bl	1f6f6 <printk>
   1818c:	4040      	eors	r0, r0
   1818e:	f380 8811 	msr	BASEPRI, r0
   18192:	f04f 0003 	mov.w	r0, #3
   18196:	df02      	svc	2
   18198:	e7e7      	b.n	1816a <ull_master_ticker_cb+0x62>
	LL_ASSERT(ref);
   1819a:	4a08      	ldr	r2, [pc, #32]	; (181bc <ull_master_ticker_cb+0xb4>)
   1819c:	490a      	ldr	r1, [pc, #40]	; (181c8 <ull_master_ticker_cb+0xc0>)
   1819e:	4809      	ldr	r0, [pc, #36]	; (181c4 <ull_master_ticker_cb+0xbc>)
   181a0:	f240 3305 	movw	r3, #773	; 0x305
   181a4:	f007 faa7 	bl	1f6f6 <printk>
   181a8:	4040      	eors	r0, r0
   181aa:	f380 8811 	msr	BASEPRI, r0
   181ae:	f04f 0003 	mov.w	r0, #3
   181b2:	df02      	svc	2
   181b4:	e7bd      	b.n	18132 <ull_master_ticker_cb+0x2a>
   181b6:	bf00      	nop
   181b8:	200004f0 	.word	0x200004f0
   181bc:	00026178 	.word	0x00026178
   181c0:	00025c3c 	.word	0x00025c3c
   181c4:	00025984 	.word	0x00025984
   181c8:	00025dd8 	.word	0x00025dd8
   181cc:	20002294 	.word	0x20002294

000181d0 <ll_create_connection>:
{
   181d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181d4:	b089      	sub	sp, #36	; 0x24
   181d6:	4680      	mov	r8, r0
   181d8:	9303      	str	r3, [sp, #12]
   181da:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   181de:	9302      	str	r3, [sp, #8]
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   181e0:	2000      	movs	r0, #0
{
   181e2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
   181e6:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
   181ea:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
   181ee:	9304      	str	r3, [sp, #16]
   181f0:	4689      	mov	r9, r1
   181f2:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   181f4:	f7fc fca2 	bl	14b3c <ull_scan_is_disabled_get>
	if (!scan) {
   181f8:	2800      	cmp	r0, #0
   181fa:	f000 819a 	beq.w	18532 <ll_create_connection+0x362>
	if (lll->conn) {
   181fe:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
   18202:	4605      	mov	r5, r0
   18204:	f1bb 0f00 	cmp.w	fp, #0
   18208:	d02e      	beq.n	18268 <ll_create_connection+0x98>
	ull_filter_scan_update(filter_policy);
   1820a:	4630      	mov	r0, r6
   1820c:	f000 fde4 	bl	18dd8 <ull_filter_scan_update>
	lll->rpa_gen = 0;
   18210:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
   18214:	22ff      	movs	r2, #255	; 0xff
	lll->rpa_gen = 0;
   18216:	f36f 0300 	bfc	r3, #0, #1
   1821a:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
   1821e:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   18222:	b1ae      	cbz	r6, 18250 <ll_create_connection+0x80>
	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   18224:	f1aa 0302 	sub.w	r3, sl, #2
   18228:	2b01      	cmp	r3, #1
   1822a:	f240 814c 	bls.w	184c6 <ll_create_connection+0x2f6>
	scan->own_addr_type = own_addr_type;
   1822e:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   18232:	f36a 0342 	bfi	r3, sl, #1, #2
   18236:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	err = lll_clock_wait();
   1823a:	f001 fff3 	bl	1a224 <lll_clock_wait>
	if (err) {
   1823e:	2800      	cmp	r0, #0
   18240:	f040 814d 	bne.w	184de <ll_create_connection+0x30e>
	return ull_scan_enable(scan);
   18244:	4628      	mov	r0, r5
   18246:	f7e8 feef 	bl	1028 <ull_scan_enable>
}
   1824a:	b009      	add	sp, #36	; 0x24
   1824c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   18250:	f001 fbc6 	bl	199e0 <ull_filter_lll_rl_enabled>
   18254:	2800      	cmp	r0, #0
   18256:	d0e5      	beq.n	18224 <ll_create_connection+0x54>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
   18258:	9803      	ldr	r0, [sp, #12]
   1825a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1825c:	4632      	mov	r2, r6
   1825e:	f000 ff15 	bl	1908c <ull_filter_rl_find>
   18262:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
   18266:	e7dd      	b.n	18224 <ll_create_connection+0x54>
	link = ll_rx_link_alloc();
   18268:	f7fb fcd6 	bl	13c18 <ll_rx_link_alloc>
	if (!link) {
   1826c:	9005      	str	r0, [sp, #20]
   1826e:	2800      	cmp	r0, #0
   18270:	f000 8174 	beq.w	1855c <ll_create_connection+0x38c>
	conn = ll_conn_acquire();
   18274:	f7fd f852 	bl	1531c <ll_conn_acquire>
	if (!conn) {
   18278:	4604      	mov	r4, r0
   1827a:	2800      	cmp	r0, #0
   1827c:	f000 8170 	beq.w	18560 <ll_create_connection+0x390>
	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
   18280:	4642      	mov	r2, r8
   18282:	464b      	mov	r3, r9
   18284:	4659      	mov	r1, fp
   18286:	f105 001c 	add.w	r0, r5, #28
   1828a:	9600      	str	r6, [sp, #0]
   1828c:	f7e8 fea4 	bl	fd8 <ull_scan_params_set>
	lll->adv_addr_type = peer_addr_type;
   18290:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   18294:	9a03      	ldr	r2, [sp, #12]
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   18296:	9912      	ldr	r1, [sp, #72]	; 0x48
	lll->adv_addr_type = peer_addr_type;
   18298:	f362 1345 	bfi	r3, r2, #5, #1
   1829c:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   182a0:	2206      	movs	r2, #6
   182a2:	f105 003b 	add.w	r0, r5, #59	; 0x3b
   182a6:	f009 fa9e 	bl	217e6 <memcpy>
	lll->conn_timeout = timeout;
   182aa:	862f      	strh	r7, [r5, #48]	; 0x30
	lll->conn_ticks_slot = 0; /* TODO: */
   182ac:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
	err = util_aa_le32(conn_lll->access_addr);
   182b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   182b4:	f7f7 fb4c 	bl	f950 <util_aa_le32>
	conn_lll = &conn->lll;
   182b8:	f104 081c 	add.w	r8, r4, #28
	LL_ASSERT(!err);
   182bc:	2800      	cmp	r0, #0
   182be:	f040 813c 	bne.w	1853a <ll_create_connection+0x36a>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
   182c2:	2103      	movs	r1, #3
   182c4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   182c8:	f001 fda2 	bl	19e10 <lll_csrand_get>
	conn_lll->interval = interval;
   182cc:	9b02      	ldr	r3, [sp, #8]
	if (!conn_lll->link_tx_free) {
   182ce:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	conn_lll->latency = latency;
   182d0:	9a04      	ldr	r2, [sp, #16]
	conn_lll->interval = interval;
   182d2:	85e3      	strh	r3, [r4, #46]	; 0x2e
	conn_lll->handle = 0xFFFF;
   182d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
   182d8:	8622      	strh	r2, [r4, #48]	; 0x30
	conn_lll->handle = 0xFFFF;
   182da:	85a3      	strh	r3, [r4, #44]	; 0x2c
	if (!conn_lll->link_tx_free) {
   182dc:	2800      	cmp	r0, #0
   182de:	f000 8139 	beq.w	18554 <ll_create_connection+0x384>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   182e2:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   182e6:	f104 0168 	add.w	r1, r4, #104	; 0x68
   182ea:	f7f7 f9a1 	bl	f630 <memq_init>
	conn_lll->phy_tx = BIT(0);
   182ee:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
   182f2:	49ac      	ldr	r1, [pc, #688]	; (185a4 <ll_create_connection+0x3d4>)
	conn_lll->sn = 0;
   182f4:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
	conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   182f8:	48ab      	ldr	r0, [pc, #684]	; (185a8 <ll_create_connection+0x3d8>)
   182fa:	6620      	str	r0, [r4, #96]	; 0x60
	conn_lll->phy_tx = BIT(0);
   182fc:	400b      	ands	r3, r1
   182fe:	f443 7388 	orr.w	r3, r3, #272	; 0x110
	conn_lll->link_tx_free = NULL;
   18302:	f04f 0900 	mov.w	r9, #0
	conn_lll->sn = 0;
   18306:	f022 0207 	bic.w	r2, r2, #7
	conn_lll->phy_tx = BIT(0);
   1830a:	f043 0301 	orr.w	r3, r3, #1
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   1830e:	f04f 111b 	mov.w	r1, #1769499	; 0x1b001b
	conn_lll->sn = 0;
   18312:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
	conn_lll->phy_tx = BIT(0);
   18316:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   1831a:	65e1      	str	r1, [r4, #92]	; 0x5c
	conn_lll->link_tx_free = NULL;
   1831c:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
	conn_lll->packet_tx_head_len = 0;
   18320:	f8a4 907c 	strh.w	r9, [r4, #124]	; 0x7c
	conn_lll->latency_prepare = 0;
   18324:	f8a4 9032 	strh.w	r9, [r4, #50]	; 0x32
	conn_lll->latency_event = 0;
   18328:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
   1832c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   18330:	f000 fa7e 	bl	18830 <ull_chan_map_get>
   18334:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   18338:	f360 0305 	bfi	r3, r0, #0, #6
   1833c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	lll_csrand_get(&hop, sizeof(uint8_t));
   18340:	2101      	movs	r1, #1
   18342:	f10d 001f 	add.w	r0, sp, #31
   18346:	f001 fd63 	bl	19e10 <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
   1834a:	f89d e01f 	ldrb.w	lr, [sp, #31]
   1834e:	4b97      	ldr	r3, [pc, #604]	; (185ac <ll_create_connection+0x3dc>)
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   18350:	8e20      	ldrh	r0, [r4, #48]	; 0x30
	conn_lll->data_chan_sel = 0;
   18352:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
	conn_lll->data_chan_use = 0;
   18356:	f884 903f 	strb.w	r9, [r4, #63]	; 0x3f
	conn_lll->data_chan_hop = 5 + (hop % 12);
   1835a:	fba3 230e 	umull	r2, r3, r3, lr
   1835e:	08db      	lsrs	r3, r3, #3
   18360:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   18364:	ebae 0e83 	sub.w	lr, lr, r3, lsl #2
	conn_interval_us = (uint32_t)interval * 1250U;
   18368:	9b02      	ldr	r3, [sp, #8]
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   1836a:	4a91      	ldr	r2, [pc, #580]	; (185b0 <ll_create_connection+0x3e0>)
	conn->supervision_expire = 0U;
   1836c:	f8a4 90c8 	strh.w	r9, [r4, #200]	; 0xc8
	conn_interval_us = (uint32_t)interval * 1250U;
   18370:	f240 41e2 	movw	r1, #1250	; 0x4e2
   18374:	fb01 f103 	mul.w	r1, r1, r3
	conn_lll->data_chan_hop = 5 + (hop % 12);
   18378:	f10e 0e05 	add.w	lr, lr, #5
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   1837c:	1e4b      	subs	r3, r1, #1
	conn_lll->data_chan_hop = 5 + (hop % 12);
   1837e:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   18382:	f242 7e10 	movw	lr, #10000	; 0x2710
   18386:	fb0e 3307 	mla	r3, lr, r7, r3
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   1838a:	f8df e244 	ldr.w	lr, [pc, #580]	; 185d0 <ll_create_connection+0x400>
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   1838e:	fbb3 f3f1 	udiv	r3, r3, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   18392:	440a      	add	r2, r1
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   18394:	448e      	add	lr, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   18396:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   1839a:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   1839e:	fbbe f1f1 	udiv	r1, lr, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   183a2:	b293      	uxth	r3, r2
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   183a4:	f100 0e06 	add.w	lr, r0, #6
	conn_lll->data_chan_sel = 0;
   183a8:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   183ac:	f8a4 10ca 	strh.w	r1, [r4, #202]	; 0xca
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   183b0:	4573      	cmp	r3, lr
	conn->connect_expire = 6U;
   183b2:	f04f 0106 	mov.w	r1, #6
	conn->procedure_expire = 0U;
   183b6:	f8a4 90cc 	strh.w	r9, [r4, #204]	; 0xcc
	conn->apto_expire = 0U;
   183ba:	f8a4 90d4 	strh.w	r9, [r4, #212]	; 0xd4
	conn->appto_expire = 0U;
   183be:	f8a4 90d0 	strh.w	r9, [r4, #208]	; 0xd0
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   183c2:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
	conn_lll->data_chan_sel = 0;
   183c6:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
	conn->connect_expire = 6U;
   183ca:	f8a4 10c4 	strh.w	r1, [r4, #196]	; 0xc4
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   183ce:	dd02      	ble.n	183d6 <ll_create_connection+0x206>
			     (conn->apto_reload - (conn_lll->latency + 6)) :
   183d0:	1a18      	subs	r0, r3, r0
   183d2:	3806      	subs	r0, #6
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   183d4:	b283      	uxth	r3, r0
	conn->llcp_terminate.node_rx.hdr.link = link;
   183d6:	9805      	ldr	r0, [sp, #20]
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   183d8:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   183dc:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	conn->common.fex_valid = 0U;
   183e0:	f894 e0dc 	ldrb.w	lr, [r4, #220]	; 0xdc
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   183e4:	f894 1126 	ldrb.w	r1, [r4, #294]	; 0x126
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   183e8:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
	conn->llcp_conn_param.disabled = 0U;
   183ec:	f894 c172 	ldrb.w	ip, [r4, #370]	; 0x172
	conn->llcp_terminate.node_rx.hdr.link = link;
   183f0:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
	conn->llcp_length.disabled = 0U;
   183f4:	f894 019a 	ldrb.w	r0, [r4, #410]	; 0x19a
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   183f8:	f04f 0900 	mov.w	r9, #0
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   183fc:	f023 0307 	bic.w	r3, r3, #7
	conn->common.fex_valid = 0U;
   18400:	f02e 0e03 	bic.w	lr, lr, #3
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   18404:	f021 0103 	bic.w	r1, r1, #3
	conn->llcp_conn_param.disabled = 0U;
   18408:	f369 1c04 	bfi	ip, r9, #4, #1
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   1840c:	f022 0218 	bic.w	r2, r2, #24
	conn->llcp_length.disabled = 0U;
   18410:	f369 00c3 	bfi	r0, r9, #3, #1
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   18414:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	conn->llcp_feature.features_conn = LL_FEAT;
   18418:	4b66      	ldr	r3, [pc, #408]	; (185b4 <ll_create_connection+0x3e4>)
	conn->common.fex_valid = 0U;
   1841a:	f884 e0dc 	strb.w	lr, [r4, #220]	; 0xdc
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   1841e:	f884 1126 	strb.w	r1, [r4, #294]	; 0x126
	conn->llcp_conn_param.disabled = 0U;
   18422:	f884 c172 	strb.w	ip, [r4, #370]	; 0x172
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   18426:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
	conn->llcp_feature.features_conn = LL_FEAT;
   1842a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   1842e:	f8a4 90e8 	strh.w	r9, [r4, #232]	; 0xe8
   18432:	f884 90ea 	strb.w	r9, [r4, #234]	; 0xea
	conn->llcp_rx = NULL;
   18436:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   1843a:	f8a4 9104 	strh.w	r9, [r4, #260]	; 0x104
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   1843e:	f8a4 9118 	strh.w	r9, [r4, #280]	; 0x118
	conn->llcp_feature.features_peer = 0;
   18442:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
	conn->llcp_version.req = conn->llcp_version.ack = 0;
   18446:	f8a4 9124 	strh.w	r9, [r4, #292]	; 0x124
	conn->llcp_terminate.reason_peer = 0U;
   1844a:	f884 912f 	strb.w	r9, [r4, #303]	; 0x12f
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   1844e:	f8a4 9150 	strh.w	r9, [r4, #336]	; 0x150
	conn->llcp_conn_param.req = 0U;
   18452:	f8a4 9170 	strh.w	r9, [r4, #368]	; 0x170
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
   18456:	f8a4 9198 	strh.w	r9, [r4, #408]	; 0x198
	conn->llcp_length.cache.tx_octets = 0U;
   1845a:	f8a4 91a4 	strh.w	r9, [r4, #420]	; 0x1a4
	conn->llcp_length.disabled = 0U;
   1845e:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
   18462:	f7fd fa71 	bl	15948 <ull_conn_default_tx_octets_get>
   18466:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
	conn->default_tx_time = ull_conn_default_tx_time_get();
   1846a:	f7fd fa73 	bl	15954 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   1846e:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   18472:	4b51      	ldr	r3, [pc, #324]	; (185b8 <ll_create_connection+0x3e8>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
   18474:	f8a4 00d8 	strh.w	r0, [r4, #216]	; 0xd8
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   18478:	4013      	ands	r3, r2
   1847a:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   1847e:	f7fd fa6f 	bl	15960 <ull_conn_default_phy_tx_get>
   18482:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   18486:	f360 0302 	bfi	r3, r0, #0, #3
   1848a:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   1848e:	f7fd fa6d 	bl	1596c <ull_conn_default_phy_rx_get>
   18492:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
	conn->tx_data = conn->tx_data_last = 0;
   18496:	f8c4 91c0 	str.w	r9, [r4, #448]	; 0x1c0
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   1849a:	f360 03c5 	bfi	r3, r0, #3, #3
   1849e:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   184a2:	e9c4 996e 	strd	r9, r9, [r4, #440]	; 0x1b8
   184a6:	e9c4 996c 	strd	r9, r9, [r4, #432]	; 0x1b0
	lll->conn = conn_lll;
   184aa:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
	hdr->is_stop = 0U;
   184ae:	f894 3020 	ldrb.w	r3, [r4, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   184b2:	f8c4 9018 	str.w	r9, [r4, #24]
   184b6:	f369 0300 	bfi	r3, r9, #0, #1
   184ba:	f8c4 9014 	str.w	r9, [r4, #20]
	hdr->parent = parent;
   184be:	61e4      	str	r4, [r4, #28]
	hdr->is_stop = 0U;
   184c0:	f884 3020 	strb.w	r3, [r4, #32]
}
   184c4:	e6a1      	b.n	1820a <ll_create_connection+0x3a>
		ull_filter_rpa_update(false);
   184c6:	2000      	movs	r0, #0
   184c8:	f000 fcaa 	bl	18e20 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   184cc:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   184d0:	f043 0301 	orr.w	r3, r3, #1
		own_addr_type &= 0x1;
   184d4:	f00a 0a01 	and.w	sl, sl, #1
		lll->rpa_gen = 1;
   184d8:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
   184dc:	e6a7      	b.n	1822e <ll_create_connection+0x5e>

static inline void conn_release(struct ll_scan_set *scan)
{
	struct lll_conn *lll = scan->lll.conn;
   184de:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	struct node_rx_pdu *cc;
	struct ll_conn *conn;
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
   184e0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   184e2:	b163      	cbz	r3, 184fe <ll_create_connection+0x32e>
   184e4:	4a35      	ldr	r2, [pc, #212]	; (185bc <ll_create_connection+0x3ec>)
   184e6:	4936      	ldr	r1, [pc, #216]	; (185c0 <ll_create_connection+0x3f0>)
   184e8:	4836      	ldr	r0, [pc, #216]	; (185c4 <ll_create_connection+0x3f4>)
   184ea:	f240 3335 	movw	r3, #821	; 0x335
   184ee:	f007 f902 	bl	1f6f6 <printk>
   184f2:	4040      	eors	r0, r0
   184f4:	f380 8811 	msr	BASEPRI, r0
   184f8:	f04f 0003 	mov.w	r0, #3
   184fc:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   184fe:	f104 0150 	add.w	r1, r4, #80	; 0x50
   18502:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   18506:	f7f7 f897 	bl	f638 <memq_deinit>
	LL_ASSERT(link);
   1850a:	4606      	mov	r6, r0
   1850c:	2800      	cmp	r0, #0
   1850e:	d03a      	beq.n	18586 <ll_create_connection+0x3b6>
	lll->link_tx_free = link;

	conn = (void *)HDR_LLL2EVT(lll);
   18510:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
   18512:	65e6      	str	r6, [r4, #92]	; 0x5c

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
   18514:	f8d7 4130 	ldr.w	r4, [r7, #304]	; 0x130
	LL_ASSERT(link);
   18518:	b33c      	cbz	r4, 1856a <ll_create_connection+0x39a>

	ll_rx_link_release(link);
   1851a:	4620      	mov	r0, r4
   1851c:	f7fb fb82 	bl	13c24 <ll_rx_link_release>

	ll_conn_release(conn);
   18520:	4638      	mov	r0, r7
   18522:	f7fc ff01 	bl	15328 <ll_conn_release>
	scan->lll.conn = NULL;
   18526:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
   18528:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
   1852a:	626b      	str	r3, [r5, #36]	; 0x24
}
   1852c:	b009      	add	sp, #36	; 0x24
   1852e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18532:	200c      	movs	r0, #12
}
   18534:	b009      	add	sp, #36	; 0x24
   18536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
   1853a:	4a20      	ldr	r2, [pc, #128]	; (185bc <ll_create_connection+0x3ec>)
   1853c:	4922      	ldr	r1, [pc, #136]	; (185c8 <ll_create_connection+0x3f8>)
   1853e:	4821      	ldr	r0, [pc, #132]	; (185c4 <ll_create_connection+0x3f4>)
   18540:	2397      	movs	r3, #151	; 0x97
   18542:	f007 f8d8 	bl	1f6f6 <printk>
   18546:	4040      	eors	r0, r0
   18548:	f380 8811 	msr	BASEPRI, r0
   1854c:	f04f 0003 	mov.w	r0, #3
   18550:	df02      	svc	2
   18552:	e6b6      	b.n	182c2 <ll_create_connection+0xf2>
		conn_lll->link_tx_free = &conn_lll->link_tx;
   18554:	f104 0070 	add.w	r0, r4, #112	; 0x70
   18558:	67a0      	str	r0, [r4, #120]	; 0x78
   1855a:	e6c2      	b.n	182e2 <ll_create_connection+0x112>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1855c:	2007      	movs	r0, #7
   1855e:	e674      	b.n	1824a <ll_create_connection+0x7a>
		ll_rx_link_release(link);
   18560:	9805      	ldr	r0, [sp, #20]
   18562:	f7fb fb5f 	bl	13c24 <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18566:	2007      	movs	r0, #7
   18568:	e66f      	b.n	1824a <ll_create_connection+0x7a>
	LL_ASSERT(link);
   1856a:	4a14      	ldr	r2, [pc, #80]	; (185bc <ll_create_connection+0x3ec>)
   1856c:	4917      	ldr	r1, [pc, #92]	; (185cc <ll_create_connection+0x3fc>)
   1856e:	4815      	ldr	r0, [pc, #84]	; (185c4 <ll_create_connection+0x3f4>)
   18570:	f240 333e 	movw	r3, #830	; 0x33e
   18574:	f007 f8bf 	bl	1f6f6 <printk>
   18578:	4040      	eors	r0, r0
   1857a:	f380 8811 	msr	BASEPRI, r0
   1857e:	f04f 0003 	mov.w	r0, #3
   18582:	df02      	svc	2
   18584:	e7c9      	b.n	1851a <ll_create_connection+0x34a>
	LL_ASSERT(link);
   18586:	4a0d      	ldr	r2, [pc, #52]	; (185bc <ll_create_connection+0x3ec>)
   18588:	4910      	ldr	r1, [pc, #64]	; (185cc <ll_create_connection+0x3fc>)
   1858a:	480e      	ldr	r0, [pc, #56]	; (185c4 <ll_create_connection+0x3f4>)
   1858c:	f240 3337 	movw	r3, #823	; 0x337
   18590:	f007 f8b1 	bl	1f6f6 <printk>
   18594:	4040      	eors	r0, r0
   18596:	f380 8811 	msr	BASEPRI, r0
   1859a:	f04f 0003 	mov.w	r0, #3
   1859e:	df02      	svc	2
   185a0:	e7b6      	b.n	18510 <ll_create_connection+0x340>
   185a2:	bf00      	nop
   185a4:	fffff880 	.word	0xfffff880
   185a8:	01480148 	.word	0x01480148
   185ac:	aaaaaaab 	.word	0xaaaaaaab
   185b0:	01c9c37f 	.word	0x01c9c37f
   185b4:	000149ff 	.word	0x000149ff
   185b8:	f6ff0000 	.word	0xf6ff0000
   185bc:	00026178 	.word	0x00026178
   185c0:	00025e48 	.word	0x00025e48
   185c4:	00025984 	.word	0x00025984
   185c8:	00025c3c 	.word	0x00025c3c
   185cc:	00025f3c 	.word	0x00025f3c
   185d0:	026259ff 	.word	0x026259ff

000185d4 <ll_connect_disable>:
{
   185d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   185d8:	4607      	mov	r7, r0
	scan = ull_scan_is_enabled_get(0);
   185da:	2000      	movs	r0, #0
   185dc:	f7fc faa0 	bl	14b20 <ull_scan_is_enabled_get>
	if (!scan) {
   185e0:	b328      	cbz	r0, 1862e <ll_connect_disable+0x5a>
	conn_lll = scan->lll.conn;
   185e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
	if (!conn_lll) {
   185e4:	4604      	mov	r4, r0
   185e6:	b316      	cbz	r6, 1862e <ll_connect_disable+0x5a>
	status = ull_scan_disable(0, scan);
   185e8:	4601      	mov	r1, r0
   185ea:	2000      	movs	r0, #0
   185ec:	f7fc f9f0 	bl	149d0 <ull_scan_disable>
	if (!status) {
   185f0:	4605      	mov	r5, r0
   185f2:	b9c8      	cbnz	r0, 18628 <ll_connect_disable+0x54>
		struct ll_conn *conn = (void *)HDR_LLL2EVT(conn_lll);
   185f4:	6836      	ldr	r6, [r6, #0]
		link = node_rx->hdr.link;
   185f6:	f8d6 8130 	ldr.w	r8, [r6, #304]	; 0x130
		node_rx = (void *)&conn->llcp_terminate.node_rx;
   185fa:	f506 7998 	add.w	r9, r6, #304	; 0x130
		LL_ASSERT(link);
   185fe:	f1b8 0f00 	cmp.w	r8, #0
   18602:	d018      	beq.n	18636 <ll_connect_disable+0x62>
		ll_rx_link_release(link);
   18604:	4640      	mov	r0, r8
   18606:	f7fb fb0d 	bl	13c24 <ll_rx_link_release>
		node_rx->hdr.rx_ftr.param = &scan->lll;
   1860a:	341c      	adds	r4, #28
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1860c:	2111      	movs	r1, #17
		node_rx->hdr.handle = 0xffff;
   1860e:	f64f 72ff 	movw	r2, #65535	; 0xffff
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   18612:	2302      	movs	r3, #2
		node_rx->hdr.rx_ftr.param = &scan->lll;
   18614:	f8c6 4138 	str.w	r4, [r6, #312]	; 0x138
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   18618:	f886 1134 	strb.w	r1, [r6, #308]	; 0x134
		node_rx->hdr.handle = 0xffff;
   1861c:	f8a6 2136 	strh.w	r2, [r6, #310]	; 0x136
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   18620:	f886 314c 	strb.w	r3, [r6, #332]	; 0x14c
		*rx = node_rx;
   18624:	f8c7 9000 	str.w	r9, [r7]
}
   18628:	4628      	mov	r0, r5
   1862a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1862e:	250c      	movs	r5, #12
}
   18630:	4628      	mov	r0, r5
   18632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   18636:	4a07      	ldr	r2, [pc, #28]	; (18654 <ll_connect_disable+0x80>)
   18638:	4907      	ldr	r1, [pc, #28]	; (18658 <ll_connect_disable+0x84>)
   1863a:	4808      	ldr	r0, [pc, #32]	; (1865c <ll_connect_disable+0x88>)
   1863c:	f44f 73c8 	mov.w	r3, #400	; 0x190
   18640:	f007 f859 	bl	1f6f6 <printk>
   18644:	4040      	eors	r0, r0
   18646:	f380 8811 	msr	BASEPRI, r0
   1864a:	f04f 0003 	mov.w	r0, #3
   1864e:	df02      	svc	2
   18650:	e7d8      	b.n	18604 <ll_connect_disable+0x30>
   18652:	bf00      	nop
   18654:	00026178 	.word	0x00026178
   18658:	00025f3c 	.word	0x00025f3c
   1865c:	00025984 	.word	0x00025984

00018660 <ll_chm_update>:
{
   18660:	b570      	push	{r4, r5, r6, lr}
   18662:	4606      	mov	r6, r0
	ull_chan_map_set(chm);
   18664:	f000 f8f0 	bl	18848 <ull_chan_map_set>
		conn = ll_connected_get(handle);
   18668:	2000      	movs	r0, #0
   1866a:	f7fc fe73 	bl	15354 <ll_connected_get>
		if (!conn || conn->lll.role) {
   1866e:	4604      	mov	r4, r0
   18670:	b1e8      	cbz	r0, 186ae <ll_chm_update+0x4e>
   18672:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   18676:	2b00      	cmp	r3, #0
   18678:	db19      	blt.n	186ae <ll_chm_update+0x4e>
		ret = ull_conn_llcp_req(conn);
   1867a:	f7ff fbb3 	bl	17de4 <ull_conn_llcp_req>
		if (ret) {
   1867e:	4605      	mov	r5, r0
   18680:	b998      	cbnz	r0, 186aa <ll_chm_update+0x4a>
		memcpy(conn->llcp.chan_map.chm, chm,
   18682:	4631      	mov	r1, r6
   18684:	2205      	movs	r2, #5
   18686:	f104 00ed 	add.w	r0, r4, #237	; 0xed
   1868a:	f009 f8ac 	bl	217e6 <memcpy>
		conn->llcp.chan_map.initiate = 1U;
   1868e:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
		conn->llcp_req++;
   18692:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		conn->llcp.chan_map.initiate = 1U;
   18696:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_req++;
   1869a:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   1869c:	2102      	movs	r1, #2
		conn->llcp.chan_map.initiate = 1U;
   1869e:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
		conn->llcp_req++;
   186a2:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_CHAN_MAP;
   186a6:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
}
   186aa:	4628      	mov	r0, r5
   186ac:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   186ae:	2500      	movs	r5, #0
}
   186b0:	4628      	mov	r0, r5
   186b2:	bd70      	pop	{r4, r5, r6, pc}

000186b4 <ll_enc_req_send>:
{
   186b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   186b8:	4688      	mov	r8, r1
   186ba:	4616      	mov	r6, r2
   186bc:	4699      	mov	r9, r3
   186be:	4607      	mov	r7, r0
	conn = ll_connected_get(handle);
   186c0:	f7fc fe48 	bl	15354 <ll_connected_get>
	if (!conn) {
   186c4:	2800      	cmp	r0, #0
   186c6:	d063      	beq.n	18790 <ll_enc_req_send+0xdc>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   186c8:	f890 2150 	ldrb.w	r2, [r0, #336]	; 0x150
   186cc:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   186d0:	429a      	cmp	r2, r3
   186d2:	4604      	mov	r4, r0
   186d4:	d13d      	bne.n	18752 <ll_enc_req_send+0x9e>
   186d6:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   186da:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   186de:	429a      	cmp	r2, r3
   186e0:	d003      	beq.n	186ea <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   186e2:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   186e6:	2b03      	cmp	r3, #3
   186e8:	d033      	beq.n	18752 <ll_enc_req_send+0x9e>
	tx = ll_tx_mem_acquire();
   186ea:	f7fc fe45 	bl	15378 <ll_tx_mem_acquire>
	if (tx) {
   186ee:	4605      	mov	r5, r0
   186f0:	b378      	cbz	r0, 18752 <ll_enc_req_send+0x9e>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
   186f2:	4649      	mov	r1, r9
   186f4:	2210      	movs	r2, #16
   186f6:	f204 105d 	addw	r0, r4, #349	; 0x15d
   186fa:	f009 f874 	bl	217e6 <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   186fe:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   18702:	f013 0318 	ands.w	r3, r3, #24
   18706:	d027      	beq.n	18758 <ll_enc_req_send+0xa4>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   18708:	2b18      	cmp	r3, #24
   1870a:	d11f      	bne.n	1874c <ll_enc_req_send+0x98>
			memcpy(&conn->llcp_enc.rand[0], rand,
   1870c:	4641      	mov	r1, r8
   1870e:	2208      	movs	r2, #8
   18710:	f204 1055 	addw	r0, r4, #341	; 0x155
   18714:	f009 f867 	bl	217e6 <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
   18718:	7833      	ldrb	r3, [r6, #0]
   1871a:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
			conn->llcp_enc.ediv[1] = ediv[1];
   1871e:	7873      	ldrb	r3, [r6, #1]
   18720:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18724:	792b      	ldrb	r3, [r5, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   18726:	2101      	movs	r1, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18728:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->llctrl.opcode =
   1872c:	220a      	movs	r2, #10
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1872e:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   18730:	7169      	strb	r1, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   18732:	71ea      	strb	r2, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
   18734:	4638      	mov	r0, r7
   18736:	4629      	mov	r1, r5
   18738:	f7fc fe2a 	bl	15390 <ll_tx_mem_enqueue>
   1873c:	b930      	cbnz	r0, 1874c <ll_enc_req_send+0x98>
		conn->llcp_enc.req++;
   1873e:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
   18742:	3301      	adds	r3, #1
   18744:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
}
   18748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   1874c:	4628      	mov	r0, r5
   1874e:	f7fc fe19 	bl	15384 <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
   18752:	200c      	movs	r0, #12
}
   18754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18758:	792b      	ldrb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
   1875a:	2203      	movs	r2, #3
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1875c:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->llctrl.opcode =
   18760:	71ea      	strb	r2, [r5, #7]
			pdu_data_tx->len =
   18762:	2017      	movs	r0, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   18764:	2208      	movs	r2, #8
   18766:	4641      	mov	r1, r8
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18768:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
   1876a:	7168      	strb	r0, [r5, #5]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   1876c:	18a8      	adds	r0, r5, r2
   1876e:	f009 f83a 	bl	217e6 <memcpy>
			enc_req->ediv[0] = ediv[0];
   18772:	7833      	ldrb	r3, [r6, #0]
   18774:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
   18776:	7873      	ldrb	r3, [r6, #1]
   18778:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   1877a:	2108      	movs	r1, #8
   1877c:	f105 0012 	add.w	r0, r5, #18
   18780:	f001 fb46 	bl	19e10 <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   18784:	2104      	movs	r1, #4
   18786:	f105 001a 	add.w	r0, r5, #26
   1878a:	f001 fb41 	bl	19e10 <lll_csrand_get>
   1878e:	e7d1      	b.n	18734 <ll_enc_req_send+0x80>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18790:	2002      	movs	r0, #2
}
   18792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18796:	bf00      	nop

00018798 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	*((uint32_t volatile *)param) = status;
   18798:	6008      	str	r0, [r1, #0]
}
   1879a:	4770      	bx	lr

0001879c <ull_sched_mfy_after_mstr_offset_get>:
	struct lll_scan *lll = p->param;
   1879c:	68c3      	ldr	r3, [r0, #12]
	after_mstr_offset_get(lll->conn->interval,
   1879e:	6802      	ldr	r2, [r0, #0]
	struct evt_hdr *conn_evt = HDR_LLL2EVT(lll->conn);
   187a0:	6899      	ldr	r1, [r3, #8]
{
   187a2:	b410      	push	{r4}
			      (ticks_slot_overhead + conn_evt->ticks_slot),
   187a4:	680c      	ldr	r4, [r1, #0]
	after_mstr_offset_get(lll->conn->interval,
   187a6:	8a48      	ldrh	r0, [r1, #18]
   187a8:	68e1      	ldr	r1, [r4, #12]
}
   187aa:	bc10      	pop	{r4}
	after_mstr_offset_get(lll->conn->interval,
   187ac:	3310      	adds	r3, #16
   187ae:	f7eb b8cf 	b.w	3950 <after_mstr_offset_get>
   187b2:	bf00      	nop

000187b4 <ull_sched_mfy_win_offset_use>:
{
   187b4:	b510      	push	{r4, lr}
   187b6:	4604      	mov	r4, r0
	after_mstr_offset_get(conn->lll.interval,
   187b8:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
   187bc:	68c1      	ldr	r1, [r0, #12]
   187be:	f500 7388 	add.w	r3, r0, #272	; 0x110
   187c2:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
   187c4:	f7eb f8c4 	bl	3950 <after_mstr_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / 1250;
   187c8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   187cc:	4905      	ldr	r1, [pc, #20]	; (187e4 <ull_sched_mfy_win_offset_use+0x30>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
   187ce:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
	win_offset = conn->llcp_cu.win_offset_us / 1250;
   187d2:	fba1 1303 	umull	r1, r3, r1, r3
   187d6:	0a9b      	lsrs	r3, r3, #10
   187d8:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   187dc:	7013      	strb	r3, [r2, #0]
	dst[1] = val >> 8;
   187de:	7051      	strb	r1, [r2, #1]
}
   187e0:	bd10      	pop	{r4, pc}
   187e2:	bf00      	nop
   187e4:	d1b71759 	.word	0xd1b71759

000187e8 <ull_sched_mfy_free_win_offset_calc>:
{
   187e8:	b500      	push	{lr}
	if (conn->lll.role) {
   187ea:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   187ee:	2b00      	cmp	r3, #0
{
   187f0:	b085      	sub	sp, #20
		conn->llcp_conn_param.ticks_to_offset_next =
   187f2:	bfbc      	itt	lt
   187f4:	f8d0 30e4 	ldrlt.w	r3, [r0, #228]	; 0xe4
   187f8:	f8c0 3194 	strlt.w	r3, [r0, #404]	; 0x194
	uint32_t ticks_to_offset_default = 0U;
   187fc:	f04f 0200 	mov.w	r2, #0
	win_offset_calc(conn, 0, ticks_to_offset_next,
   18800:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
	uint32_t ticks_to_offset_default = 0U;
   18804:	9203      	str	r2, [sp, #12]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   18806:	9301      	str	r3, [sp, #4]
	uint8_t offset_max = 6U;
   18808:	f04f 0206 	mov.w	r2, #6
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1880c:	f10d 030b 	add.w	r3, sp, #11
	uint8_t offset_max = 6U;
   18810:	f88d 200b 	strb.w	r2, [sp, #11]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   18814:	9300      	str	r3, [sp, #0]
		ticks_to_offset_next =
   18816:	bfb8      	it	lt
   18818:	f500 72ca 	addlt.w	r2, r0, #404	; 0x194
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1881c:	f8b0 3176 	ldrh.w	r3, [r0, #374]	; 0x176
	ticks_to_offset_next = &ticks_to_offset_default;
   18820:	bfa8      	it	ge
   18822:	aa03      	addge	r2, sp, #12
	win_offset_calc(conn, 0, ticks_to_offset_next,
   18824:	2100      	movs	r1, #0
   18826:	f7ea fe67 	bl	34f8 <win_offset_calc>
}
   1882a:	b005      	add	sp, #20
   1882c:	f85d fb04 	ldr.w	pc, [sp], #4

00018830 <ull_chan_map_get>:

	return 0;
}

uint8_t ull_chan_map_get(uint8_t *const chan_map)
{
   18830:	b508      	push	{r3, lr}
	memcpy(chan_map, map, sizeof(map));
   18832:	4903      	ldr	r1, [pc, #12]	; (18840 <ull_chan_map_get+0x10>)
   18834:	2205      	movs	r2, #5
   18836:	f008 ffd6 	bl	217e6 <memcpy>

	return count;
   1883a:	4b02      	ldr	r3, [pc, #8]	; (18844 <ull_chan_map_get+0x14>)
}
   1883c:	7818      	ldrb	r0, [r3, #0]
   1883e:	bd08      	pop	{r3, pc}
   18840:	20000500 	.word	0x20000500
   18844:	20000662 	.word	0x20000662

00018848 <ull_chan_map_set>:

void ull_chan_map_set(uint8_t const *const chan_map)
{
   18848:	b510      	push	{r4, lr}
	memcpy(map, chan_map, sizeof(map));
   1884a:	4c06      	ldr	r4, [pc, #24]	; (18864 <ull_chan_map_set+0x1c>)
{
   1884c:	4601      	mov	r1, r0
	memcpy(map, chan_map, sizeof(map));
   1884e:	2205      	movs	r2, #5
   18850:	4620      	mov	r0, r4
   18852:	f008 ffc8 	bl	217e6 <memcpy>
	count = util_ones_count_get(map, sizeof(map));
   18856:	4620      	mov	r0, r4
   18858:	2105      	movs	r1, #5
   1885a:	f7f7 f861 	bl	f920 <util_ones_count_get>
   1885e:	4b02      	ldr	r3, [pc, #8]	; (18868 <ull_chan_map_set+0x20>)
   18860:	7018      	strb	r0, [r3, #0]
}
   18862:	bd10      	pop	{r4, pc}
   18864:	20000500 	.word	0x20000500
   18868:	20000662 	.word	0x20000662

0001886c <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   1886c:	b470      	push	{r4, r5, r6}
   1886e:	4605      	mov	r5, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   18870:	7800      	ldrb	r0, [r0, #0]
   18872:	4c1b      	ldr	r4, [pc, #108]	; (188e0 <lll_chan_sel_1+0x74>)
   18874:	fb02 1101 	mla	r1, r2, r1, r1
   18878:	180a      	adds	r2, r1, r0
   1887a:	fb84 0102 	smull	r0, r1, r4, r2
   1887e:	4411      	add	r1, r2
   18880:	1149      	asrs	r1, r1, #5
   18882:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   18886:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1888a:	1a51      	subs	r1, r2, r1
   1888c:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1888e:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   18890:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   18892:	5c9c      	ldrb	r4, [r3, r2]
{
   18894:	f89d 500c 	ldrb.w	r5, [sp, #12]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   18898:	f001 0107 	and.w	r1, r1, #7
   1889c:	410c      	asrs	r4, r1
   1889e:	f014 0401 	ands.w	r4, r4, #1
   188a2:	d11b      	bne.n	188dc <lll_chan_sel_1+0x70>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   188a4:	fbb0 f2f5 	udiv	r2, r0, r5
   188a8:	fb05 0212 	mls	r2, r5, r2, r0
   188ac:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   188ae:	1e5d      	subs	r5, r3, #1
   188b0:	1d1e      	adds	r6, r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   188b2:	f104 0108 	add.w	r1, r4, #8
   188b6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   188ba:	4620      	mov	r0, r4
   188bc:	b2cc      	uxtb	r4, r1
			if (bite & 0x01) {
   188be:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   188c2:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   188c6:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   188ca:	d002      	beq.n	188d2 <lll_chan_sel_1+0x66>
				if (chan_index == 0U) {
   188cc:	b132      	cbz	r2, 188dc <lll_chan_sel_1+0x70>
				chan_index--;
   188ce:	3a01      	subs	r2, #1
   188d0:	b2d2      	uxtb	r2, r2
			chan_next++;
   188d2:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   188d4:	4284      	cmp	r4, r0
   188d6:	d1f2      	bne.n	188be <lll_chan_sel_1+0x52>
	while (byte_count--) {
   188d8:	42b5      	cmp	r5, r6
   188da:	d1ea      	bne.n	188b2 <lll_chan_sel_1+0x46>
}
   188dc:	bc70      	pop	{r4, r5, r6}
   188de:	4770      	bx	lr
   188e0:	dd67c8a7 	.word	0xdd67c8a7

000188e4 <lll_chan_sel_2>:
{
   188e4:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   188e6:	4f2f      	ldr	r7, [pc, #188]	; (189a4 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   188e8:	4e2f      	ldr	r6, [pc, #188]	; (189a8 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   188ea:	ea80 0501 	eor.w	r5, r0, r1
   188ee:	2403      	movs	r4, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   188f0:	0a28      	lsrs	r0, r5, #8
   188f2:	b2ed      	uxtb	r5, r5
   188f4:	eb00 2080 	add.w	r0, r0, r0, lsl #10
   188f8:	eb05 2585 	add.w	r5, r5, r5, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   188fc:	ea06 1e40 	and.w	lr, r6, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   18900:	ea07 0c40 	and.w	ip, r7, r0, lsl #1
   18904:	ea07 0045 	and.w	r0, r7, r5, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   18908:	ea06 1545 	and.w	r5, r6, r5, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1890c:	ea4c 0c0e 	orr.w	ip, ip, lr
   18910:	4328      	orrs	r0, r5
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   18912:	eb00 2500 	add.w	r5, r0, r0, lsl #8
   18916:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
   1891a:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   1891e:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
   18922:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   18926:	f3c0 4007 	ubfx	r0, r0, #16, #8
   1892a:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1892e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   18932:	3c01      	subs	r4, #1
   18934:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
   18936:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1893a:	b285      	uxth	r5, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   1893c:	d1d8      	bne.n	188f0 <lll_chan_sel_2+0xc>
	chan_next = prn_e % 37;
   1893e:	481b      	ldr	r0, [pc, #108]	; (189ac <lll_chan_sel_2+0xc8>)
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   18940:	4069      	eors	r1, r5
	chan_next = prn_e % 37;
   18942:	fba0 5001 	umull	r5, r0, r0, r1
   18946:	1a0d      	subs	r5, r1, r0
   18948:	eb00 0055 	add.w	r0, r0, r5, lsr #1
   1894c:	0940      	lsrs	r0, r0, #5
   1894e:	eb00 05c0 	add.w	r5, r0, r0, lsl #3
   18952:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   18956:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   18958:	f3c0 05c4 	ubfx	r5, r0, #3, #5
   1895c:	f000 0607 	and.w	r6, r0, #7
   18960:	5d55      	ldrb	r5, [r2, r5]
   18962:	4135      	asrs	r5, r6
   18964:	07ed      	lsls	r5, r5, #31
	chan_next = prn_e % 37;
   18966:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   18968:	d41a      	bmi.n	189a0 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   1896a:	fb01 f303 	mul.w	r3, r1, r3
   1896e:	1e56      	subs	r6, r2, #1
   18970:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   18974:	3204      	adds	r2, #4
		bite = *chan_map;
   18976:	f104 0508 	add.w	r5, r4, #8
   1897a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   1897e:	4620      	mov	r0, r4
   18980:	b2ec      	uxtb	r4, r5
			if (bite & 0x01) {
   18982:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   18986:	f100 0501 	add.w	r5, r0, #1
			bite >>= 1;
   1898a:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   1898e:	d002      	beq.n	18996 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   18990:	b133      	cbz	r3, 189a0 <lll_chan_sel_2+0xbc>
				chan_index--;
   18992:	3b01      	subs	r3, #1
   18994:	b2db      	uxtb	r3, r3
			chan_next++;
   18996:	b2e8      	uxtb	r0, r5
		while (bit_count--) {
   18998:	42a0      	cmp	r0, r4
   1899a:	d1f2      	bne.n	18982 <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   1899c:	42b2      	cmp	r2, r6
   1899e:	d1ea      	bne.n	18976 <lll_chan_sel_2+0x92>
}
   189a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   189a2:	bf00      	nop
   189a4:	00022110 	.word	0x00022110
   189a8:	00088440 	.word	0x00088440
   189ac:	bacf914d 	.word	0xbacf914d

000189b0 <wl_find>:
		wl[i].taken = 0U;
	}
}

static uint8_t wl_find(uint8_t addr_type, uint8_t *addr, uint8_t *free)
{
   189b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   189b4:	4688      	mov	r8, r1
	int i;

	if (free) {
   189b6:	4615      	mov	r5, r2
   189b8:	b10a      	cbz	r2, 189be <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   189ba:	23ff      	movs	r3, #255	; 0xff
   189bc:	7013      	strb	r3, [r2, #0]
   189be:	4e17      	ldr	r6, [pc, #92]	; (18a1c <wl_find+0x6c>)
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   189c0:	f000 0701 	and.w	r7, r0, #1
   189c4:	f106 0902 	add.w	r9, r6, #2
{
   189c8:	2400      	movs	r4, #0
   189ca:	e004      	b.n	189d6 <wl_find+0x26>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   189cc:	42ba      	cmp	r2, r7
   189ce:	d014      	beq.n	189fa <wl_find+0x4a>
	for (i = 0; i < WL_SIZE; i++) {
   189d0:	3401      	adds	r4, #1
   189d2:	2c08      	cmp	r4, #8
   189d4:	d00e      	beq.n	189f4 <wl_find+0x44>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   189d6:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   189da:	07d9      	lsls	r1, r3, #31
   189dc:	f3c3 0240 	ubfx	r2, r3, #1, #1
   189e0:	d4f4      	bmi.n	189cc <wl_find+0x1c>
			return i;
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   189e2:	2d00      	cmp	r5, #0
   189e4:	d0f4      	beq.n	189d0 <wl_find+0x20>
   189e6:	782b      	ldrb	r3, [r5, #0]
   189e8:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   189ea:	bf08      	it	eq
   189ec:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   189ee:	3401      	adds	r4, #1
   189f0:	2c08      	cmp	r4, #8
   189f2:	d1f0      	bne.n	189d6 <wl_find+0x26>
		}
	}

	return FILTER_IDX_NONE;
   189f4:	20ff      	movs	r0, #255	; 0xff
}
   189f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   189fa:	2206      	movs	r2, #6
   189fc:	4641      	mov	r1, r8
   189fe:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
   18a02:	f008 fee0 	bl	217c6 <memcmp>
   18a06:	b130      	cbz	r0, 18a16 <wl_find+0x66>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   18a08:	2d00      	cmp	r5, #0
   18a0a:	d0e1      	beq.n	189d0 <wl_find+0x20>
   18a0c:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   18a10:	07db      	lsls	r3, r3, #31
   18a12:	d4dd      	bmi.n	189d0 <wl_find+0x20>
   18a14:	e7e7      	b.n	189e6 <wl_find+0x36>
			return i;
   18a16:	b2e0      	uxtb	r0, r4
   18a18:	e7ed      	b.n	189f6 <wl_find+0x46>
   18a1a:	bf00      	nop
   18a1c:	200024d4 	.word	0x200024d4

00018a20 <wl_update>:

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}

static void wl_update(void)
{
   18a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a24:	4f21      	ldr	r7, [pc, #132]	; (18aac <wl_update+0x8c>)
   18a26:	4d22      	ldr	r5, [pc, #136]	; (18ab0 <wl_update+0x90>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   18a28:	f8df 9088 	ldr.w	r9, [pc, #136]	; 18ab4 <wl_update+0x94>
   18a2c:	f8df a088 	ldr.w	sl, [pc, #136]	; 18ab8 <wl_update+0x98>
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   18a30:	f1a7 0802 	sub.w	r8, r7, #2
   18a34:	f1a5 0b02 	sub.w	fp, r5, #2
{
   18a38:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   18a3a:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   18a3e:	2601      	movs	r6, #1
		if (!wl[i].taken) {
   18a40:	f013 0f01 	tst.w	r3, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18a44:	4638      	mov	r0, r7
	filter->enable_bitmask |= BIT(index);
   18a46:	fa06 f604 	lsl.w	r6, r6, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18a4a:	4629      	mov	r1, r5
   18a4c:	f107 0706 	add.w	r7, r7, #6
   18a50:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
   18a54:	d022      	beq.n	18a9c <wl_update+0x7c>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   18a56:	f899 3000 	ldrb.w	r3, [r9]
   18a5a:	b163      	cbz	r3, 18a76 <wl_update+0x56>
		j = wl[i].rl_idx;
   18a5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   18a60:	2b07      	cmp	r3, #7
   18a62:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   18a66:	d806      	bhi.n	18a76 <wl_update+0x56>
   18a68:	f81a 303c 	ldrb.w	r3, [sl, ip, lsl #3]
   18a6c:	f013 0f04 	tst.w	r3, #4
   18a70:	d001      	beq.n	18a76 <wl_update+0x56>
   18a72:	06db      	lsls	r3, r3, #27
   18a74:	d512      	bpl.n	18a9c <wl_update+0x7c>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   18a76:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18a7a:	f898 e001 	ldrb.w	lr, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   18a7e:	f898 c000 	ldrb.w	ip, [r8]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   18a82:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18a86:	40a3      	lsls	r3, r4
   18a88:	ea4e 0303 	orr.w	r3, lr, r3
	filter->enable_bitmask |= BIT(index);
   18a8c:	ea4c 0606 	orr.w	r6, ip, r6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18a90:	f888 3001 	strb.w	r3, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   18a94:	f888 6000 	strb.w	r6, [r8]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18a98:	f008 fea5 	bl	217e6 <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
   18a9c:	3401      	adds	r4, #1
   18a9e:	2c08      	cmp	r4, #8
   18aa0:	f105 0508 	add.w	r5, r5, #8
   18aa4:	d1c9      	bne.n	18a3a <wl_update+0x1a>
}
   18aa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18aaa:	bf00      	nop
   18aac:	20002516 	.word	0x20002516
   18ab0:	200024d6 	.word	0x200024d6
   18ab4:	20003095 	.word	0x20003095
   18ab8:	2000235c 	.word	0x2000235c

00018abc <rl_update>:
{
   18abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ac0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 18b24 <rl_update+0x68>
	filter->enable_bitmask |= BIT(index);
   18ac4:	4d16      	ldr	r5, [pc, #88]	; (18b20 <rl_update+0x64>)
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18ac6:	f108 0701 	add.w	r7, r8, #1
   18aca:	1cae      	adds	r6, r5, #2
{
   18acc:	2400      	movs	r4, #0
   18ace:	e002      	b.n	18ad6 <rl_update+0x1a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18ad0:	3401      	adds	r4, #1
   18ad2:	2c08      	cmp	r4, #8
   18ad4:	d021      	beq.n	18b1a <rl_update+0x5e>
		if (rl[i].taken) {
   18ad6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   18ada:	00d9      	lsls	r1, r3, #3
   18adc:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   18ae0:	07da      	lsls	r2, r3, #31
   18ae2:	d5f5      	bpl.n	18ad0 <rl_update+0x14>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18ae4:	786a      	ldrb	r2, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   18ae6:	f895 c000 	ldrb.w	ip, [r5]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   18aea:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   18aee:	f04f 0e01 	mov.w	lr, #1
   18af2:	fa0e fe04 	lsl.w	lr, lr, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18af6:	40a3      	lsls	r3, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18af8:	eb04 0044 	add.w	r0, r4, r4, lsl #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18afc:	4313      	orrs	r3, r2
	filter->enable_bitmask |= BIT(index);
   18afe:	ea4c 0c0e 	orr.w	ip, ip, lr
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18b02:	4439      	add	r1, r7
   18b04:	eb06 0040 	add.w	r0, r6, r0, lsl #1
   18b08:	2206      	movs	r2, #6
   18b0a:	3401      	adds	r4, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18b0c:	706b      	strb	r3, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   18b0e:	f885 c000 	strb.w	ip, [r5]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18b12:	f008 fe68 	bl	217e6 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18b16:	2c08      	cmp	r4, #8
   18b18:	d1dd      	bne.n	18ad6 <rl_update+0x1a>
}
   18b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18b1e:	bf00      	nop
   18b20:	2000249c 	.word	0x2000249c
   18b24:	2000235c 	.word	0x2000235c

00018b28 <rl_access_check.part.0>:
static int rl_access_check(bool check_ar)
   18b28:	b508      	push	{r3, lr}
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   18b2a:	2000      	movs	r0, #0
   18b2c:	f7fc f812 	bl	14b54 <ull_scan_is_enabled>
}
   18b30:	fab0 f080 	clz	r0, r0
   18b34:	0940      	lsrs	r0, r0, #5
   18b36:	bd08      	pop	{r3, pc}

00018b38 <ll_wl_size_get>:
}
   18b38:	2008      	movs	r0, #8
   18b3a:	4770      	bx	lr

00018b3c <ll_wl_clear>:
{
   18b3c:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   18b3e:	2000      	movs	r0, #0
   18b40:	f7fb fe40 	bl	147c4 <ull_adv_filter_pol_get>
   18b44:	bb00      	cbnz	r0, 18b88 <ll_wl_clear+0x4c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   18b46:	f7fc f81d 	bl	14b84 <ull_scan_filter_pol_get>
   18b4a:	f010 0001 	ands.w	r0, r0, #1
   18b4e:	d11b      	bne.n	18b88 <ll_wl_clear+0x4c>
   18b50:	4a0e      	ldr	r2, [pc, #56]	; (18b8c <ll_wl_clear+0x50>)
			rl[j].wl = 0U;
   18b52:	4c0f      	ldr	r4, [pc, #60]	; (18b90 <ll_wl_clear+0x54>)
		uint8_t j = wl[i].rl_idx;
   18b54:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   18b58:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   18b5a:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   18b5c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   18b60:	d805      	bhi.n	18b6e <ll_wl_clear+0x32>
			rl[j].wl = 0U;
   18b62:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   18b66:	f36f 1345 	bfc	r3, #5, #1
   18b6a:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   18b6e:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   18b72:	f36f 0300 	bfc	r3, #0, #1
   18b76:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   18b7a:	3001      	adds	r0, #1
   18b7c:	2808      	cmp	r0, #8
   18b7e:	d1e9      	bne.n	18b54 <ll_wl_clear+0x18>
	wl_anon = 0U;
   18b80:	4b04      	ldr	r3, [pc, #16]	; (18b94 <ll_wl_clear+0x58>)
   18b82:	2000      	movs	r0, #0
   18b84:	7018      	strb	r0, [r3, #0]
}
   18b86:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18b88:	200c      	movs	r0, #12
}
   18b8a:	bd10      	pop	{r4, pc}
   18b8c:	200024d4 	.word	0x200024d4
   18b90:	2000235c 	.word	0x2000235c
   18b94:	20003096 	.word	0x20003096

00018b98 <ll_wl_remove>:
{
   18b98:	b538      	push	{r3, r4, r5, lr}
   18b9a:	4604      	mov	r4, r0
	if (ull_adv_filter_pol_get(0)) {
   18b9c:	2000      	movs	r0, #0
   18b9e:	f7fb fe11 	bl	147c4 <ull_adv_filter_pol_get>
   18ba2:	b978      	cbnz	r0, 18bc4 <ll_wl_remove+0x2c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   18ba4:	f7fb ffee 	bl	14b84 <ull_scan_filter_pol_get>
   18ba8:	f010 0501 	ands.w	r5, r0, #1
   18bac:	d10a      	bne.n	18bc4 <ll_wl_remove+0x2c>
	if (addr->type == ADDR_TYPE_ANON) {
   18bae:	7820      	ldrb	r0, [r4, #0]
   18bb0:	28ff      	cmp	r0, #255	; 0xff
   18bb2:	d009      	beq.n	18bc8 <ll_wl_remove+0x30>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   18bb4:	1c61      	adds	r1, r4, #1
   18bb6:	462a      	mov	r2, r5
   18bb8:	f7ff fefa 	bl	189b0 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   18bbc:	2807      	cmp	r0, #7
   18bbe:	d907      	bls.n	18bd0 <ll_wl_remove+0x38>
   18bc0:	2002      	movs	r0, #2
}
   18bc2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18bc4:	200c      	movs	r0, #12
}
   18bc6:	bd38      	pop	{r3, r4, r5, pc}
		wl_anon = 0U;
   18bc8:	4b0d      	ldr	r3, [pc, #52]	; (18c00 <ll_wl_remove+0x68>)
   18bca:	701d      	strb	r5, [r3, #0]
		return 0;
   18bcc:	4628      	mov	r0, r5
}
   18bce:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t j = wl[i].rl_idx;
   18bd0:	4a0c      	ldr	r2, [pc, #48]	; (18c04 <ll_wl_remove+0x6c>)
   18bd2:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   18bd6:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   18bd8:	2b07      	cmp	r3, #7
   18bda:	d808      	bhi.n	18bee <ll_wl_remove+0x56>
			rl[j].wl = 0U;
   18bdc:	490a      	ldr	r1, [pc, #40]	; (18c08 <ll_wl_remove+0x70>)
   18bde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   18be2:	f811 4033 	ldrb.w	r4, [r1, r3, lsl #3]
   18be6:	f365 1445 	bfi	r4, r5, #5, #1
   18bea:	f801 4033 	strb.w	r4, [r1, r3, lsl #3]
		wl[i].taken = 0U;
   18bee:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   18bf2:	f36f 0300 	bfc	r3, #0, #1
   18bf6:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
		return 0;
   18bfa:	2000      	movs	r0, #0
}
   18bfc:	bd38      	pop	{r3, r4, r5, pc}
   18bfe:	bf00      	nop
   18c00:	20003096 	.word	0x20003096
   18c04:	200024d4 	.word	0x200024d4
   18c08:	2000235c 	.word	0x2000235c

00018c0c <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   18c0c:	2807      	cmp	r0, #7
{
   18c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c12:	4604      	mov	r4, r0
   18c14:	460d      	mov	r5, r1
   18c16:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   18c18:	d817      	bhi.n	18c4a <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   18c1a:	4e19      	ldr	r6, [pc, #100]	; (18c80 <ll_rl_id_addr_get+0x74>)
   18c1c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   18c20:	00a7      	lsls	r7, r4, #2
   18c22:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   18c26:	07db      	lsls	r3, r3, #31
   18c28:	d51c      	bpl.n	18c64 <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   18c2a:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   18c2c:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   18c2e:	f816 3037 	ldrb.w	r3, [r6, r7, lsl #3]
   18c32:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   18c36:	fb01 6104 	mla	r1, r1, r4, r6
	*id_addr_type = rl[rl_idx].id_addr_type;
   18c3a:	702b      	strb	r3, [r5, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   18c3c:	4640      	mov	r0, r8
   18c3e:	3101      	adds	r1, #1
}
   18c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   18c44:	2206      	movs	r2, #6
   18c46:	f008 bdce 	b.w	217e6 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   18c4a:	4a0e      	ldr	r2, [pc, #56]	; (18c84 <ll_rl_id_addr_get+0x78>)
   18c4c:	490e      	ldr	r1, [pc, #56]	; (18c88 <ll_rl_id_addr_get+0x7c>)
   18c4e:	480f      	ldr	r0, [pc, #60]	; (18c8c <ll_rl_id_addr_get+0x80>)
   18c50:	23e9      	movs	r3, #233	; 0xe9
   18c52:	f006 fd50 	bl	1f6f6 <printk>
   18c56:	4040      	eors	r0, r0
   18c58:	f380 8811 	msr	BASEPRI, r0
   18c5c:	f04f 0003 	mov.w	r0, #3
   18c60:	df02      	svc	2
   18c62:	e7da      	b.n	18c1a <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   18c64:	4a07      	ldr	r2, [pc, #28]	; (18c84 <ll_rl_id_addr_get+0x78>)
   18c66:	490a      	ldr	r1, [pc, #40]	; (18c90 <ll_rl_id_addr_get+0x84>)
   18c68:	4808      	ldr	r0, [pc, #32]	; (18c8c <ll_rl_id_addr_get+0x80>)
   18c6a:	23ea      	movs	r3, #234	; 0xea
   18c6c:	f006 fd43 	bl	1f6f6 <printk>
   18c70:	4040      	eors	r0, r0
   18c72:	f380 8811 	msr	BASEPRI, r0
   18c76:	f04f 0003 	mov.w	r0, #3
   18c7a:	df02      	svc	2
   18c7c:	e7d5      	b.n	18c2a <ll_rl_id_addr_get+0x1e>
   18c7e:	bf00      	nop
   18c80:	2000235c 	.word	0x2000235c
   18c84:	00026248 	.word	0x00026248
   18c88:	0002628c 	.word	0x0002628c
   18c8c:	00025984 	.word	0x00025984
   18c90:	00026298 	.word	0x00026298

00018c94 <ll_rl_size_get>:
   18c94:	2008      	movs	r0, #8
   18c96:	4770      	bx	lr

00018c98 <ll_rl_clear>:
{
   18c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   18c9a:	2000      	movs	r0, #0
   18c9c:	f7fb fd86 	bl	147ac <ull_adv_is_enabled>
		? 0 : 1;
   18ca0:	b108      	cbz	r0, 18ca6 <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18ca2:	200c      	movs	r0, #12
}
   18ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18ca6:	4604      	mov	r4, r0
   18ca8:	f7ff ff3e 	bl	18b28 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
   18cac:	2800      	cmp	r0, #0
   18cae:	d0f8      	beq.n	18ca2 <ll_rl_clear+0xa>
		rl[i].taken = 0U;
   18cb0:	4b1a      	ldr	r3, [pc, #104]	; (18d1c <ll_rl_clear+0x84>)
	peer_irk_count = 0U;
   18cb2:	491b      	ldr	r1, [pc, #108]	; (18d20 <ll_rl_clear+0x88>)
		rl[i].taken = 0U;
   18cb4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   18cb8:	f893 c000 	ldrb.w	ip, [r3]
   18cbc:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
   18cc0:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
   18cc4:	f893 50a0 	ldrb.w	r5, [r3, #160]	; 0xa0
   18cc8:	f893 00c8 	ldrb.w	r0, [r3, #200]	; 0xc8
	peer_irk_count = 0U;
   18ccc:	700c      	strb	r4, [r1, #0]
		rl[i].taken = 0U;
   18cce:	f364 0200 	bfi	r2, r4, #0, #1
   18cd2:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   18cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   18cda:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   18cde:	f364 0000 	bfi	r0, r4, #0, #1
   18ce2:	f364 0c00 	bfi	ip, r4, #0, #1
   18ce6:	f364 0700 	bfi	r7, r4, #0, #1
   18cea:	f364 0600 	bfi	r6, r4, #0, #1
   18cee:	f364 0500 	bfi	r5, r4, #0, #1
   18cf2:	f364 0100 	bfi	r1, r4, #0, #1
   18cf6:	f364 0200 	bfi	r2, r4, #0, #1
   18cfa:	f883 00c8 	strb.w	r0, [r3, #200]	; 0xc8
   18cfe:	f883 c000 	strb.w	ip, [r3]
   18d02:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
   18d06:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
   18d0a:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
   18d0e:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   18d12:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	return 0;
   18d16:	4620      	mov	r0, r4
}
   18d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18d1a:	bf00      	nop
   18d1c:	2000235c 	.word	0x2000235c
   18d20:	20003094 	.word	0x20003094

00018d24 <ll_rl_enable>:
{
   18d24:	b538      	push	{r3, r4, r5, lr}
   18d26:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   18d28:	2000      	movs	r0, #0
   18d2a:	f7fb fd3f 	bl	147ac <ull_adv_is_enabled>
		? 0 : 1;
   18d2e:	b108      	cbz	r0, 18d34 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18d30:	200c      	movs	r0, #12
}
   18d32:	bd38      	pop	{r3, r4, r5, pc}
   18d34:	4604      	mov	r4, r0
   18d36:	f7ff fef7 	bl	18b28 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
   18d3a:	2800      	cmp	r0, #0
   18d3c:	d0f8      	beq.n	18d30 <ll_rl_enable+0xc>
	switch (enable) {
   18d3e:	b13d      	cbz	r5, 18d50 <ll_rl_enable+0x2c>
   18d40:	2d01      	cmp	r5, #1
   18d42:	d001      	beq.n	18d48 <ll_rl_enable+0x24>
   18d44:	2012      	movs	r0, #18
}
   18d46:	bd38      	pop	{r3, r4, r5, pc}
		rl_enable = 1U;
   18d48:	4b03      	ldr	r3, [pc, #12]	; (18d58 <ll_rl_enable+0x34>)
   18d4a:	701d      	strb	r5, [r3, #0]
	return 0;
   18d4c:	4620      	mov	r0, r4
}
   18d4e:	bd38      	pop	{r3, r4, r5, pc}
		rl_enable = 0U;
   18d50:	4b01      	ldr	r3, [pc, #4]	; (18d58 <ll_rl_enable+0x34>)
   18d52:	701d      	strb	r5, [r3, #0]
	return 0;
   18d54:	4628      	mov	r0, r5
}
   18d56:	bd38      	pop	{r3, r4, r5, pc}
   18d58:	20003095 	.word	0x20003095

00018d5c <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   18d5c:	4a03      	ldr	r2, [pc, #12]	; (18d6c <ll_rl_timeout_set+0x10>)
   18d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18d62:	fb03 f300 	mul.w	r3, r3, r0
   18d66:	6013      	str	r3, [r2, #0]
}
   18d68:	4770      	bx	lr
   18d6a:	bf00      	nop
   18d6c:	200024d0 	.word	0x200024d0

00018d70 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   18d70:	b130      	cbz	r0, 18d80 <ull_filter_adv_scan_state_cb+0x10>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   18d72:	4b05      	ldr	r3, [pc, #20]	; (18d88 <ull_filter_adv_scan_state_cb+0x18>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   18d74:	4905      	ldr	r1, [pc, #20]	; (18d8c <ull_filter_adv_scan_state_cb+0x1c>)
   18d76:	681a      	ldr	r2, [r3, #0]
   18d78:	4805      	ldr	r0, [pc, #20]	; (18d90 <ull_filter_adv_scan_state_cb+0x20>)
   18d7a:	2300      	movs	r3, #0
   18d7c:	f006 b94e 	b.w	1f01c <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
   18d80:	4802      	ldr	r0, [pc, #8]	; (18d8c <ull_filter_adv_scan_state_cb+0x1c>)
   18d82:	f00b bde5 	b.w	24950 <k_delayed_work_cancel>
   18d86:	bf00      	nop
   18d88:	200024d0 	.word	0x200024d0
   18d8c:	20000fa0 	.word	0x20000fa0
   18d90:	200010e0 	.word	0x200010e0

00018d94 <ull_filter_adv_update>:
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   18d94:	4a0d      	ldr	r2, [pc, #52]	; (18dcc <ull_filter_adv_update+0x38>)
{
   18d96:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   18d98:	2300      	movs	r3, #0
   18d9a:	8013      	strh	r3, [r2, #0]
	if (adv_fp &&
   18d9c:	b970      	cbnz	r0, 18dbc <ull_filter_adv_update+0x28>
	if (rl_enable &&
   18d9e:	4b0c      	ldr	r3, [pc, #48]	; (18dd0 <ull_filter_adv_update+0x3c>)
	filter->enable_bitmask = 0;
   18da0:	4a0c      	ldr	r2, [pc, #48]	; (18dd4 <ull_filter_adv_update+0x40>)
	if (rl_enable &&
   18da2:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   18da4:	2000      	movs	r0, #0
   18da6:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   18da8:	b903      	cbnz	r3, 18dac <ull_filter_adv_update+0x18>
}
   18daa:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_OBSERVER) || !ull_scan_is_enabled(0))) {
   18dac:	f7fb fed2 	bl	14b54 <ull_scan_is_enabled>
	if (rl_enable &&
   18db0:	2800      	cmp	r0, #0
   18db2:	d1fa      	bne.n	18daa <ull_filter_adv_update+0x16>
}
   18db4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   18db8:	f7ff be80 	b.w	18abc <rl_update>
	     !(ull_scan_filter_pol_get(0) & 0x1))) {
   18dbc:	4618      	mov	r0, r3
   18dbe:	f7fb fee1 	bl	14b84 <ull_scan_filter_pol_get>
	if (adv_fp &&
   18dc2:	07c3      	lsls	r3, r0, #31
   18dc4:	d4eb      	bmi.n	18d9e <ull_filter_adv_update+0xa>
		wl_update();
   18dc6:	f7ff fe2b 	bl	18a20 <wl_update>
   18dca:	e7e8      	b.n	18d9e <ull_filter_adv_update+0xa>
   18dcc:	20002514 	.word	0x20002514
   18dd0:	20003095 	.word	0x20003095
   18dd4:	2000249c 	.word	0x2000249c

00018dd8 <ull_filter_scan_update>:
	filter->enable_bitmask = 0;
   18dd8:	4a0e      	ldr	r2, [pc, #56]	; (18e14 <ull_filter_scan_update+0x3c>)
{
   18dda:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   18ddc:	2300      	movs	r3, #0
   18dde:	8013      	strh	r3, [r2, #0]
	if ((scan_fp & 0x1) &&
   18de0:	07c2      	lsls	r2, r0, #31
   18de2:	d40e      	bmi.n	18e02 <ull_filter_scan_update+0x2a>
	if (rl_enable &&
   18de4:	4b0c      	ldr	r3, [pc, #48]	; (18e18 <ull_filter_scan_update+0x40>)
	filter->enable_bitmask = 0;
   18de6:	4a0d      	ldr	r2, [pc, #52]	; (18e1c <ull_filter_scan_update+0x44>)
	if (rl_enable &&
   18de8:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   18dea:	2000      	movs	r0, #0
   18dec:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   18dee:	b903      	cbnz	r3, 18df2 <ull_filter_scan_update+0x1a>
}
   18df0:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_BROADCASTER) || !ull_adv_is_enabled(0))) {
   18df2:	f7fb fcdb 	bl	147ac <ull_adv_is_enabled>
	if (rl_enable &&
   18df6:	2800      	cmp	r0, #0
   18df8:	d1fa      	bne.n	18df0 <ull_filter_scan_update+0x18>
}
   18dfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   18dfe:	f7ff be5d 	b.w	18abc <rl_update>
	     !ull_adv_filter_pol_get(0))) {
   18e02:	4618      	mov	r0, r3
   18e04:	f7fb fcde 	bl	147c4 <ull_adv_filter_pol_get>
	if ((scan_fp & 0x1) &&
   18e08:	2800      	cmp	r0, #0
   18e0a:	d1eb      	bne.n	18de4 <ull_filter_scan_update+0xc>
		wl_update();
   18e0c:	f7ff fe08 	bl	18a20 <wl_update>
   18e10:	e7e8      	b.n	18de4 <ull_filter_scan_update+0xc>
   18e12:	bf00      	nop
   18e14:	20002514 	.word	0x20002514
   18e18:	20003095 	.word	0x20003095
   18e1c:	2000249c 	.word	0x2000249c

00018e20 <ull_filter_rpa_update>:
{
   18e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e24:	4681      	mov	r9, r0
   18e26:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   18e28:	f00b fdeb 	bl	24a02 <z_impl_k_uptime_ticks>
   18e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
	bool all = timeout || (rpa_last_ms == -1) ||
   18e30:	f1b9 0f00 	cmp.w	r9, #0
   18e34:	d117      	bne.n	18e66 <ull_filter_rpa_update+0x46>
   18e36:	4b60      	ldr	r3, [pc, #384]	; (18fb8 <ull_filter_rpa_update+0x198>)
   18e38:	e9d3 2300 	ldrd	r2, r3, [r3]
   18e3c:	1c5c      	adds	r4, r3, #1
   18e3e:	bf08      	it	eq
   18e40:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   18e44:	d00f      	beq.n	18e66 <ull_filter_rpa_update+0x46>
   18e46:	460e      	mov	r6, r1
		   (now - rpa_last_ms >= rpa_timeout_ms);
   18e48:	495c      	ldr	r1, [pc, #368]	; (18fbc <ull_filter_rpa_update+0x19c>)
   18e4a:	6809      	ldr	r1, [r1, #0]
   18e4c:	1a84      	subs	r4, r0, r2
   18e4e:	eb66 0503 	sbc.w	r5, r6, r3
   18e52:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   18e54:	428c      	cmp	r4, r1
   18e56:	eb75 0303 	sbcs.w	r3, r5, r3
   18e5a:	bfac      	ite	ge
   18e5c:	f04f 0801 	movge.w	r8, #1
   18e60:	f04f 0800 	movlt.w	r8, #0
   18e64:	e001      	b.n	18e6a <ull_filter_rpa_update+0x4a>
   18e66:	f04f 0801 	mov.w	r8, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18e6a:	4e55      	ldr	r6, [pc, #340]	; (18fc0 <ull_filter_rpa_update+0x1a0>)
				LL_ASSERT(!err);
   18e6c:	f8df b160 	ldr.w	fp, [pc, #352]	; 18fd0 <ull_filter_rpa_update+0x1b0>
   18e70:	f8df a160 	ldr.w	sl, [pc, #352]	; 18fd4 <ull_filter_rpa_update+0x1b4>
   18e74:	f1a6 0724 	sub.w	r7, r6, #36	; 0x24
	bool all = timeout || (rpa_last_ms == -1) ||
   18e78:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   18e7a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   18e7e:	00a5      	lsls	r5, r4, #2
   18e80:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   18e84:	07da      	lsls	r2, r3, #31
   18e86:	d515      	bpl.n	18eb4 <ull_filter_rpa_update+0x94>
   18e88:	f1b8 0f00 	cmp.w	r8, #0
   18e8c:	d101      	bne.n	18e92 <ull_filter_rpa_update+0x72>
   18e8e:	0798      	lsls	r0, r3, #30
   18e90:	d410      	bmi.n	18eb4 <ull_filter_rpa_update+0x94>
			if (rl[i].pirk) {
   18e92:	192b      	adds	r3, r5, r4
   18e94:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   18e98:	0759      	lsls	r1, r3, #29
   18e9a:	d434      	bmi.n	18f06 <ull_filter_rpa_update+0xe6>
			if (rl[i].lirk) {
   18e9c:	192b      	adds	r3, r5, r4
   18e9e:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   18ea2:	071a      	lsls	r2, r3, #28
   18ea4:	d419      	bmi.n	18eda <ull_filter_rpa_update+0xba>
			rl[i].rpas_ready = 1U;
   18ea6:	4425      	add	r5, r4
   18ea8:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   18eac:	f043 0302 	orr.w	r3, r3, #2
   18eb0:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18eb4:	3401      	adds	r4, #1
   18eb6:	2c08      	cmp	r4, #8
   18eb8:	f106 0628 	add.w	r6, r6, #40	; 0x28
   18ebc:	d1dd      	bne.n	18e7a <ull_filter_rpa_update+0x5a>
	if (all) {
   18ebe:	f1b8 0f00 	cmp.w	r8, #0
   18ec2:	d004      	beq.n	18ece <ull_filter_rpa_update+0xae>
		rpa_last_ms = now;
   18ec4:	4b3c      	ldr	r3, [pc, #240]	; (18fb8 <ull_filter_rpa_update+0x198>)
   18ec6:	9a02      	ldr	r2, [sp, #8]
   18ec8:	601a      	str	r2, [r3, #0]
   18eca:	9a03      	ldr	r2, [sp, #12]
   18ecc:	605a      	str	r2, [r3, #4]
	if (timeout) {
   18ece:	f1b9 0f00 	cmp.w	r9, #0
   18ed2:	d13c      	bne.n	18f4e <ull_filter_rpa_update+0x12e>
}
   18ed4:	b009      	add	sp, #36	; 0x24
   18ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   18eda:	a904      	add	r1, sp, #16
   18edc:	f1a6 001d 	sub.w	r0, r6, #29
   18ee0:	f008 fd04 	bl	218ec <bt_rpa_create>
				LL_ASSERT(!err);
   18ee4:	2800      	cmp	r0, #0
   18ee6:	d158      	bne.n	18f9a <ull_filter_rpa_update+0x17a>
				rl[i].local_rpa = &rpa;
   18ee8:	4a36      	ldr	r2, [pc, #216]	; (18fc4 <ull_filter_rpa_update+0x1a4>)
   18eea:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18eee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	memcpy(dst, src, sizeof(*dst));
   18ef2:	a904      	add	r1, sp, #16
   18ef4:	4618      	mov	r0, r3
   18ef6:	2206      	movs	r2, #6
   18ef8:	6031      	str	r1, [r6, #0]
   18efa:	9301      	str	r3, [sp, #4]
   18efc:	f008 fc73 	bl	217e6 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   18f00:	9b01      	ldr	r3, [sp, #4]
   18f02:	6033      	str	r3, [r6, #0]
   18f04:	e7cf      	b.n	18ea6 <ull_filter_rpa_update+0x86>
	psrc += length - 1;
   18f06:	f816 3c0d 	ldrb.w	r3, [r6, #-13]
   18f0a:	4a2f      	ldr	r2, [pc, #188]	; (18fc8 <ull_filter_rpa_update+0x1a8>)
   18f0c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   18f10:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   18f12:	f10d 030f 	add.w	r3, sp, #15
   18f16:	f10d 001f 	add.w	r0, sp, #31
		*pdst++ = *psrc--;
   18f1a:	f812 1901 	ldrb.w	r1, [r2], #-1
   18f1e:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   18f22:	4283      	cmp	r3, r0
   18f24:	d1f9      	bne.n	18f1a <ull_filter_rpa_update+0xfa>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   18f26:	1fb1      	subs	r1, r6, #6
   18f28:	a804      	add	r0, sp, #16
   18f2a:	f008 fcdf 	bl	218ec <bt_rpa_create>
				LL_ASSERT(!err);
   18f2e:	2800      	cmp	r0, #0
   18f30:	d0b4      	beq.n	18e9c <ull_filter_rpa_update+0x7c>
   18f32:	4826      	ldr	r0, [pc, #152]	; (18fcc <ull_filter_rpa_update+0x1ac>)
   18f34:	f240 2316 	movw	r3, #534	; 0x216
   18f38:	465a      	mov	r2, fp
   18f3a:	4651      	mov	r1, sl
   18f3c:	f006 fbdb 	bl	1f6f6 <printk>
   18f40:	4040      	eors	r0, r0
   18f42:	f380 8811 	msr	BASEPRI, r0
   18f46:	f04f 0003 	mov.w	r0, #3
   18f4a:	df02      	svc	2
   18f4c:	e7a6      	b.n	18e9c <ull_filter_rpa_update+0x7c>
		adv = ull_adv_is_enabled_get(0);
   18f4e:	2000      	movs	r0, #0
   18f50:	f7fb fc1e 	bl	14790 <ull_adv_is_enabled_get>
		if (adv) {
   18f54:	4604      	mov	r4, r0
   18f56:	2800      	cmp	r0, #0
   18f58:	d0bc      	beq.n	18ed4 <ull_filter_rpa_update+0xb4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   18f5a:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   18f5e:	075b      	lsls	r3, r3, #29
   18f60:	d5b8      	bpl.n	18ed4 <ull_filter_rpa_update+0xb4>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   18f62:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   18f66:	2b07      	cmp	r3, #7
   18f68:	d8b4      	bhi.n	18ed4 <ull_filter_rpa_update+0xb4>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   18f6a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   18f6e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   18f72:	a904      	add	r1, sp, #16
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   18f74:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   18f76:	302c      	adds	r0, #44	; 0x2c
   18f78:	f001 fa9a 	bl	1a4b0 <lll_adv_pdu_alloc>
	memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   18f7c:	786a      	ldrb	r2, [r5, #1]
   18f7e:	4629      	mov	r1, r5
   18f80:	3202      	adds	r2, #2
   18f82:	4605      	mov	r5, r0
   18f84:	f008 fc2f 	bl	217e6 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   18f88:	4629      	mov	r1, r5
   18f8a:	4620      	mov	r0, r4
   18f8c:	f7fb fca8 	bl	148e0 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   18f90:	f89d 3010 	ldrb.w	r3, [sp, #16]
   18f94:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   18f98:	e79c      	b.n	18ed4 <ull_filter_rpa_update+0xb4>
				LL_ASSERT(!err);
   18f9a:	480c      	ldr	r0, [pc, #48]	; (18fcc <ull_filter_rpa_update+0x1ac>)
   18f9c:	f240 2323 	movw	r3, #547	; 0x223
   18fa0:	465a      	mov	r2, fp
   18fa2:	4651      	mov	r1, sl
   18fa4:	f006 fba7 	bl	1f6f6 <printk>
   18fa8:	4040      	eors	r0, r0
   18faa:	f380 8811 	msr	BASEPRI, r0
   18fae:	f04f 0003 	mov.w	r0, #3
   18fb2:	df02      	svc	2
   18fb4:	e798      	b.n	18ee8 <ull_filter_rpa_update+0xc8>
   18fb6:	bf00      	nop
   18fb8:	20000f98 	.word	0x20000f98
   18fbc:	200024d0 	.word	0x200024d0
   18fc0:	20002380 	.word	0x20002380
   18fc4:	200022a4 	.word	0x200022a4
   18fc8:	200022dc 	.word	0x200022dc
   18fcc:	00025984 	.word	0x00025984
   18fd0:	00026248 	.word	0x00026248
   18fd4:	00025c3c 	.word	0x00025c3c

00018fd8 <rpa_timeout>:
{
   18fd8:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   18fda:	2001      	movs	r0, #1
   18fdc:	f7ff ff20 	bl	18e20 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   18fe0:	4b04      	ldr	r3, [pc, #16]	; (18ff4 <rpa_timeout+0x1c>)
   18fe2:	4905      	ldr	r1, [pc, #20]	; (18ff8 <rpa_timeout+0x20>)
   18fe4:	681a      	ldr	r2, [r3, #0]
   18fe6:	4805      	ldr	r0, [pc, #20]	; (18ffc <rpa_timeout+0x24>)
}
   18fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18fec:	2300      	movs	r3, #0
   18fee:	f006 b815 	b.w	1f01c <k_delayed_work_submit_to_queue>
   18ff2:	bf00      	nop
   18ff4:	200024d0 	.word	0x200024d0
   18ff8:	20000fa0 	.word	0x20000fa0
   18ffc:	200010e0 	.word	0x200010e0

00019000 <ull_filter_adva_get>:
{
   19000:	b570      	push	{r4, r5, r6, lr}
	uint8_t idx = adv->lll.rl_idx;
   19002:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   19006:	2c07      	cmp	r4, #7
   19008:	d810      	bhi.n	1902c <ull_filter_adva_get+0x2c>
   1900a:	4d10      	ldr	r5, [pc, #64]	; (1904c <ull_filter_adva_get+0x4c>)
   1900c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19010:	00a6      	lsls	r6, r4, #2
   19012:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   19016:	071a      	lsls	r2, r3, #28
   19018:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1901c:	d505      	bpl.n	1902a <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[idx].rpas_ready);
   1901e:	079b      	lsls	r3, r3, #30
   19020:	d506      	bpl.n	19030 <ull_filter_adva_get+0x30>
		return rl[idx].local_rpa->val;
   19022:	4434      	add	r4, r6
   19024:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   19028:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   1902a:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1902c:	2000      	movs	r0, #0
}
   1902e:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rl[idx].rpas_ready);
   19030:	4a07      	ldr	r2, [pc, #28]	; (19050 <ull_filter_adva_get+0x50>)
   19032:	4908      	ldr	r1, [pc, #32]	; (19054 <ull_filter_adva_get+0x54>)
   19034:	4808      	ldr	r0, [pc, #32]	; (19058 <ull_filter_adva_get+0x58>)
   19036:	f240 2349 	movw	r3, #585	; 0x249
   1903a:	f006 fb5c 	bl	1f6f6 <printk>
   1903e:	4040      	eors	r0, r0
   19040:	f380 8811 	msr	BASEPRI, r0
   19044:	f04f 0003 	mov.w	r0, #3
   19048:	df02      	svc	2
   1904a:	e7ea      	b.n	19022 <ull_filter_adva_get+0x22>
   1904c:	2000235c 	.word	0x2000235c
   19050:	00026248 	.word	0x00026248
   19054:	000262ac 	.word	0x000262ac
   19058:	00025984 	.word	0x00025984

0001905c <ull_filter_tgta_get>:
	uint8_t idx = adv->lll.rl_idx;
   1905c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   19060:	2b07      	cmp	r3, #7
   19062:	d80e      	bhi.n	19082 <ull_filter_tgta_get+0x26>
   19064:	4908      	ldr	r1, [pc, #32]	; (19088 <ull_filter_tgta_get+0x2c>)
   19066:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1906a:	f811 2032 	ldrb.w	r2, [r1, r2, lsl #3]
   1906e:	f3c2 0080 	ubfx	r0, r2, #2, #1
   19072:	0752      	lsls	r2, r2, #29
   19074:	d506      	bpl.n	19084 <ull_filter_tgta_get+0x28>
		return rl[idx].peer_rpa.val;
   19076:	2028      	movs	r0, #40	; 0x28
   19078:	fb00 1303 	mla	r3, r0, r3, r1
   1907c:	f103 001e 	add.w	r0, r3, #30
   19080:	4770      	bx	lr
	return NULL;
   19082:	2000      	movs	r0, #0
}
   19084:	4770      	bx	lr
   19086:	bf00      	nop
   19088:	2000235c 	.word	0x2000235c

0001908c <ull_filter_rl_find>:
{
   1908c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19090:	468b      	mov	fp, r1
	if (free) {
   19092:	4616      	mov	r6, r2
   19094:	b10a      	cbz	r2, 1909a <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   19096:	23ff      	movs	r3, #255	; 0xff
   19098:	7013      	strb	r3, [r2, #0]
   1909a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 19100 <ull_filter_rl_find+0x74>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1909e:	f000 0901 	and.w	r9, r0, #1
   190a2:	f108 0a01 	add.w	sl, r8, #1
{
   190a6:	2400      	movs	r4, #0
   190a8:	e004      	b.n	190b4 <ull_filter_rl_find+0x28>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   190aa:	454a      	cmp	r2, r9
   190ac:	d019      	beq.n	190e2 <ull_filter_rl_find+0x56>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   190ae:	3401      	adds	r4, #1
   190b0:	2c08      	cmp	r4, #8
   190b2:	d012      	beq.n	190da <ull_filter_rl_find+0x4e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   190b4:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   190b8:	00e8      	lsls	r0, r5, #3
   190ba:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   190be:	07d9      	lsls	r1, r3, #31
   190c0:	f3c3 1280 	ubfx	r2, r3, #6, #1
   190c4:	b2e7      	uxtb	r7, r4
   190c6:	d4f0      	bmi.n	190aa <ull_filter_rl_find+0x1e>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   190c8:	2e00      	cmp	r6, #0
   190ca:	d0f0      	beq.n	190ae <ull_filter_rl_find+0x22>
   190cc:	7833      	ldrb	r3, [r6, #0]
   190ce:	3401      	adds	r4, #1
   190d0:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   190d2:	bf08      	it	eq
   190d4:	7037      	strbeq	r7, [r6, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   190d6:	2c08      	cmp	r4, #8
   190d8:	d1ec      	bne.n	190b4 <ull_filter_rl_find+0x28>
	return FILTER_IDX_NONE;
   190da:	27ff      	movs	r7, #255	; 0xff
}
   190dc:	4638      	mov	r0, r7
   190de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   190e2:	4450      	add	r0, sl
   190e4:	2206      	movs	r2, #6
   190e6:	4659      	mov	r1, fp
   190e8:	f008 fb6d 	bl	217c6 <memcmp>
   190ec:	2800      	cmp	r0, #0
   190ee:	d0f5      	beq.n	190dc <ull_filter_rl_find+0x50>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   190f0:	2e00      	cmp	r6, #0
   190f2:	d0dc      	beq.n	190ae <ull_filter_rl_find+0x22>
   190f4:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   190f8:	07db      	lsls	r3, r3, #31
   190fa:	d4d8      	bmi.n	190ae <ull_filter_rl_find+0x22>
   190fc:	e7e6      	b.n	190cc <ull_filter_rl_find+0x40>
   190fe:	bf00      	nop
   19100:	2000235c 	.word	0x2000235c

00019104 <ll_wl_add>:
{
   19104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19108:	4605      	mov	r5, r0
   1910a:	b082      	sub	sp, #8
	if (ull_adv_filter_pol_get(0)) {
   1910c:	2000      	movs	r0, #0
   1910e:	f7fb fb59 	bl	147c4 <ull_adv_filter_pol_get>
   19112:	2800      	cmp	r0, #0
   19114:	d140      	bne.n	19198 <ll_wl_add+0x94>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   19116:	f7fb fd35 	bl	14b84 <ull_scan_filter_pol_get>
   1911a:	f010 0401 	ands.w	r4, r0, #1
   1911e:	d13b      	bne.n	19198 <ll_wl_add+0x94>
	if (addr->type == ADDR_TYPE_ANON) {
   19120:	7828      	ldrb	r0, [r5, #0]
   19122:	28ff      	cmp	r0, #255	; 0xff
   19124:	d03c      	beq.n	191a0 <ll_wl_add+0x9c>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   19126:	f105 0801 	add.w	r8, r5, #1
   1912a:	4641      	mov	r1, r8
   1912c:	f10d 0207 	add.w	r2, sp, #7
   19130:	f7ff fc3e 	bl	189b0 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   19134:	2807      	cmp	r0, #7
   19136:	d92b      	bls.n	19190 <ll_wl_add+0x8c>
	} else if (j >= ARRAY_SIZE(wl)) {
   19138:	f89d 6007 	ldrb.w	r6, [sp, #7]
   1913c:	2e07      	cmp	r6, #7
   1913e:	d836      	bhi.n	191ae <ll_wl_add+0xaa>
	wl[i].id_addr_type = id_addr->type & 0x1;
   19140:	4f1e      	ldr	r7, [pc, #120]	; (191bc <ll_wl_add+0xb8>)
   19142:	782a      	ldrb	r2, [r5, #0]
   19144:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   19148:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   1914c:	f362 0341 	bfi	r3, r2, #1, #1
   19150:	4641      	mov	r1, r8
   19152:	2206      	movs	r2, #6
   19154:	3002      	adds	r0, #2
   19156:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
   1915a:	f008 fb44 	bl	217e6 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1915e:	7828      	ldrb	r0, [r5, #0]
   19160:	4622      	mov	r2, r4
   19162:	4641      	mov	r1, r8
   19164:	f7ff ff92 	bl	1908c <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   19168:	2807      	cmp	r0, #7
   1916a:	d822      	bhi.n	191b2 <ll_wl_add+0xae>
		rl[j].wl = 1U;
   1916c:	4914      	ldr	r1, [pc, #80]	; (191c0 <ll_wl_add+0xbc>)
   1916e:	eb00 0480 	add.w	r4, r0, r0, lsl #2
		wl[i].rl_idx = j;
   19172:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
		rl[j].wl = 1U;
   19176:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
		wl[i].rl_idx = j;
   1917a:	7050      	strb	r0, [r2, #1]
		rl[j].wl = 1U;
   1917c:	f043 0320 	orr.w	r3, r3, #32
   19180:	f801 3034 	strb.w	r3, [r1, r4, lsl #3]
	wl[i].taken = 1U;
   19184:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   19188:	f043 0301 	orr.w	r3, r3, #1
   1918c:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	return 0;
   19190:	2000      	movs	r0, #0
}
   19192:	b002      	add	sp, #8
   19194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19198:	200c      	movs	r0, #12
}
   1919a:	b002      	add	sp, #8
   1919c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 1U;
   191a0:	4b08      	ldr	r3, [pc, #32]	; (191c4 <ll_wl_add+0xc0>)
   191a2:	2201      	movs	r2, #1
		return 0;
   191a4:	4620      	mov	r0, r4
		wl_anon = 1U;
   191a6:	701a      	strb	r2, [r3, #0]
}
   191a8:	b002      	add	sp, #8
   191aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   191ae:	2007      	movs	r0, #7
	return wl_add(addr);
   191b0:	e7f3      	b.n	1919a <ll_wl_add+0x96>
		wl[i].rl_idx = FILTER_IDX_NONE;
   191b2:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   191b6:	22ff      	movs	r2, #255	; 0xff
   191b8:	705a      	strb	r2, [r3, #1]
   191ba:	e7e3      	b.n	19184 <ll_wl_add+0x80>
   191bc:	200024d4 	.word	0x200024d4
   191c0:	2000235c 	.word	0x2000235c
   191c4:	20003096 	.word	0x20003096

000191c8 <ll_rl_add>:
{
   191c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191cc:	4606      	mov	r6, r0
   191ce:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   191d0:	2000      	movs	r0, #0
{
   191d2:	460d      	mov	r5, r1
   191d4:	4614      	mov	r4, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   191d6:	f7fb fae9 	bl	147ac <ull_adv_is_enabled>
		? 0 : 1;
   191da:	b118      	cbz	r0, 191e4 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   191dc:	200c      	movs	r0, #12
}
   191de:	b005      	add	sp, #20
   191e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191e4:	f7ff fca0 	bl	18b28 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
   191e8:	2800      	cmp	r0, #0
   191ea:	d0f7      	beq.n	191dc <ll_rl_add+0x14>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   191ec:	46b1      	mov	r9, r6
   191ee:	f10d 020f 	add.w	r2, sp, #15
   191f2:	f819 0b01 	ldrb.w	r0, [r9], #1
   191f6:	4649      	mov	r1, r9
   191f8:	f7ff ff48 	bl	1908c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   191fc:	2807      	cmp	r0, #7
   191fe:	f240 8086 	bls.w	1930e <ll_rl_add+0x146>
	} else if (j >= ARRAY_SIZE(rl)) {
   19202:	f89d 800f 	ldrb.w	r8, [sp, #15]
   19206:	f1b8 0f07 	cmp.w	r8, #7
   1920a:	d879      	bhi.n	19300 <ll_rl_add+0x138>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1920c:	eb08 0388 	add.w	r3, r8, r8, lsl #2
   19210:	4f47      	ldr	r7, [pc, #284]	; (19330 <ll_rl_add+0x168>)
   19212:	00db      	lsls	r3, r3, #3
   19214:	1c58      	adds	r0, r3, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   19216:	eb08 0a88 	add.w	sl, r8, r8, lsl #2
   1921a:	2206      	movs	r2, #6
   1921c:	4649      	mov	r1, r9
   1921e:	4438      	add	r0, r7
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   19220:	9301      	str	r3, [sp, #4]
   19222:	f008 fae0 	bl	217e6 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   19226:	7831      	ldrb	r1, [r6, #0]
   19228:	f817 203a 	ldrb.w	r2, [r7, sl, lsl #3]
   1922c:	ea4f 0bca 	mov.w	fp, sl, lsl #3
   19230:	f361 1286 	bfi	r2, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   19234:	4628      	mov	r0, r5
   19236:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   19238:	f807 200b 	strb.w	r2, [r7, fp]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1923c:	f7f6 f9ec 	bl	f618 <mem_nz>
   19240:	f817 200b 	ldrb.w	r2, [r7, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   19244:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   19246:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1924a:	4620      	mov	r0, r4
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1924c:	f807 200b 	strb.w	r2, [r7, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   19250:	f7f6 f9e2 	bl	f618 <mem_nz>
   19254:	f817 200b 	ldrb.w	r2, [r7, fp]
	if (rl[i].pirk) {
   19258:	9b01      	ldr	r3, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1925a:	f000 0001 	and.w	r0, r0, #1
   1925e:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   19262:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   19266:	f807 200b 	strb.w	r2, [r7, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   1926a:	eb07 0aca 	add.w	sl, r7, sl, lsl #3
   1926e:	ea4f 0b88 	mov.w	fp, r8, lsl #2
	if (rl[i].pirk) {
   19272:	d01a      	beq.n	192aa <ll_rl_add+0xe2>
		rl[i].pirk_idx = peer_irk_count;
   19274:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 1933c <ll_rl_add+0x174>
		peer_irk_rl_ids[peer_irk_count] = i;
   19278:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 19340 <ll_rl_add+0x178>
		rl[i].pirk_idx = peer_irk_count;
   1927c:	f89e 1000 	ldrb.w	r1, [lr]
   19280:	4a2c      	ldr	r2, [pc, #176]	; (19334 <ll_rl_add+0x16c>)
		peer_irk_rl_ids[peer_irk_count] = i;
   19282:	f80c 8001 	strb.w	r8, [ip, r1]
		rl[i].pirk_idx = peer_irk_count;
   19286:	f88a 1017 	strb.w	r1, [sl, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   1928a:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   1928e:	3101      	adds	r1, #1
   19290:	f88e 1000 	strb.w	r1, [lr]
	psrc += length - 1;
   19294:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   19298:	f105 020f 	add.w	r2, r5, #15
	for (; length > 0; length--) {
   1929c:	1e69      	subs	r1, r5, #1
		*pdst++ = *psrc--;
   1929e:	f812 5901 	ldrb.w	r5, [r2], #-1
   192a2:	f80c 5f01 	strb.w	r5, [ip, #1]!
	for (; length > 0; length--) {
   192a6:	428a      	cmp	r2, r1
   192a8:	d1f9      	bne.n	1929e <ll_rl_add+0xd6>
	if (rl[i].lirk) {
   192aa:	bb90      	cbnz	r0, 19312 <ll_rl_add+0x14a>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   192ac:	f103 0018 	add.w	r0, r3, #24
   192b0:	2206      	movs	r2, #6
   192b2:	2100      	movs	r1, #0
   192b4:	4438      	add	r0, r7
   192b6:	f008 fac1 	bl	2183c <memset>
	rl[i].dev = 0U;
   192ba:	eb0b 0308 	add.w	r3, fp, r8
   192be:	00dc      	lsls	r4, r3, #3
	rl[i].rpas_ready = 0U;
   192c0:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   192c4:	f023 0312 	bic.w	r3, r3, #18
   192c8:	553b      	strb	r3, [r7, r4]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   192ca:	4649      	mov	r1, r9
   192cc:	7830      	ldrb	r0, [r6, #0]
   192ce:	2200      	movs	r2, #0
   192d0:	f7ff fb6e 	bl	189b0 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   192d4:	2807      	cmp	r0, #7
   192d6:	d815      	bhi.n	19304 <ll_rl_add+0x13c>
		rl[i].wl = 1U;
   192d8:	5d3b      	ldrb	r3, [r7, r4]
		wl[j].rl_idx = i;
   192da:	4a17      	ldr	r2, [pc, #92]	; (19338 <ll_rl_add+0x170>)
		rl[i].wl = 1U;
   192dc:	f043 0320 	orr.w	r3, r3, #32
		wl[j].rl_idx = i;
   192e0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		rl[i].wl = 1U;
   192e4:	553b      	strb	r3, [r7, r4]
		wl[j].rl_idx = i;
   192e6:	f880 8001 	strb.w	r8, [r0, #1]
	rl[i].taken = 1U;
   192ea:	44d8      	add	r8, fp
	return 0;
   192ec:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   192ee:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   192f2:	f043 0301 	orr.w	r3, r3, #1
   192f6:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
}
   192fa:	b005      	add	sp, #20
   192fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   19300:	2007      	movs	r0, #7
   19302:	e76c      	b.n	191de <ll_rl_add+0x16>
		rl[i].wl = 0U;
   19304:	5d3b      	ldrb	r3, [r7, r4]
   19306:	f36f 1345 	bfc	r3, #5, #1
   1930a:	553b      	strb	r3, [r7, r4]
   1930c:	e7ed      	b.n	192ea <ll_rl_add+0x122>
		return BT_HCI_ERR_INVALID_PARAM;
   1930e:	2012      	movs	r0, #18
   19310:	e765      	b.n	191de <ll_rl_add+0x16>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   19312:	1dd8      	adds	r0, r3, #7
   19314:	4621      	mov	r1, r4
   19316:	2210      	movs	r2, #16
   19318:	4438      	add	r0, r7
   1931a:	9301      	str	r3, [sp, #4]
   1931c:	f008 fa63 	bl	217e6 <memcpy>
		rl[i].local_rpa = NULL;
   19320:	eb0b 0208 	add.w	r2, fp, r8
   19324:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   19328:	2100      	movs	r1, #0
   1932a:	9b01      	ldr	r3, [sp, #4]
   1932c:	6251      	str	r1, [r2, #36]	; 0x24
   1932e:	e7bd      	b.n	192ac <ll_rl_add+0xe4>
   19330:	2000235c 	.word	0x2000235c
   19334:	200022dc 	.word	0x200022dc
   19338:	200024d4 	.word	0x200024d4
   1933c:	20003094 	.word	0x20003094
   19340:	200022d4 	.word	0x200022d4

00019344 <ll_rl_remove>:
{
   19344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19348:	4605      	mov	r5, r0
   1934a:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1934c:	2000      	movs	r0, #0
   1934e:	f7fb fa2d 	bl	147ac <ull_adv_is_enabled>
		? 0 : 1;
   19352:	b118      	cbz	r0, 1935c <ll_rl_remove+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19354:	200c      	movs	r0, #12
}
   19356:	b003      	add	sp, #12
   19358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1935c:	4604      	mov	r4, r0
   1935e:	f7ff fbe3 	bl	18b28 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
   19362:	2800      	cmp	r0, #0
   19364:	d0f6      	beq.n	19354 <ll_rl_remove+0x10>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19366:	462f      	mov	r7, r5
   19368:	4622      	mov	r2, r4
   1936a:	f817 0b01 	ldrb.w	r0, [r7], #1
   1936e:	4639      	mov	r1, r7
   19370:	f7ff fe8c 	bl	1908c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   19374:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19376:	4606      	mov	r6, r0
	if (i < ARRAY_SIZE(rl)) {
   19378:	d903      	bls.n	19382 <ll_rl_remove+0x3e>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1937a:	2002      	movs	r0, #2
}
   1937c:	b003      	add	sp, #12
   1937e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rl[i].pirk) {
   19382:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 19440 <ll_rl_remove+0xfc>
   19386:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1938a:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   1938e:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   19392:	075b      	lsls	r3, r3, #29
   19394:	ea4f 0980 	mov.w	r9, r0, lsl #2
   19398:	d52e      	bpl.n	193f8 <ll_rl_remove+0xb4>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1939a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 19444 <ll_rl_remove+0x100>
   1939e:	f89a 2000 	ldrb.w	r2, [sl]
   193a2:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
   193a4:	f012 0bff 	ands.w	fp, r2, #255	; 0xff
   193a8:	d023      	beq.n	193f2 <ll_rl_remove+0xae>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   193aa:	7dcb      	ldrb	r3, [r1, #23]
			if (pj && pi != pj) {
   193ac:	455b      	cmp	r3, fp
   193ae:	d021      	beq.n	193f4 <ll_rl_remove+0xb0>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   193b0:	4820      	ldr	r0, [pc, #128]	; (19434 <ll_rl_remove+0xf0>)
   193b2:	9301      	str	r3, [sp, #4]
   193b4:	eb00 110b 	add.w	r1, r0, fp, lsl #4
   193b8:	2210      	movs	r2, #16
   193ba:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   193be:	f008 fa12 	bl	217e6 <memcpy>
   193c2:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   193c4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   193c8:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   193cc:	f818 2032 	ldrb.w	r2, [r8, r2, lsl #3]
   193d0:	f012 0f01 	tst.w	r2, #1
   193d4:	b2e0      	uxtb	r0, r4
   193d6:	f104 0401 	add.w	r4, r4, #1
   193da:	d004      	beq.n	193e6 <ll_rl_remove+0xa2>
   193dc:	0752      	lsls	r2, r2, #29
   193de:	d502      	bpl.n	193e6 <ll_rl_remove+0xa2>
   193e0:	7dca      	ldrb	r2, [r1, #23]
   193e2:	455a      	cmp	r2, fp
   193e4:	d01f      	beq.n	19426 <ll_rl_remove+0xe2>
				for (k = 0U;
   193e6:	2c08      	cmp	r4, #8
   193e8:	d1ec      	bne.n	193c4 <ll_rl_remove+0x80>
   193ea:	f89a 2000 	ldrb.w	r2, [sl]
   193ee:	3a01      	subs	r2, #1
   193f0:	e000      	b.n	193f4 <ll_rl_remove+0xb0>
   193f2:	465a      	mov	r2, fp
			peer_irk_count--;
   193f4:	f88a 2000 	strb.w	r2, [sl]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   193f8:	7828      	ldrb	r0, [r5, #0]
   193fa:	4639      	mov	r1, r7
   193fc:	2200      	movs	r2, #0
   193fe:	f7ff fad7 	bl	189b0 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   19402:	2807      	cmp	r0, #7
   19404:	d804      	bhi.n	19410 <ll_rl_remove+0xcc>
			wl[j].rl_idx = FILTER_IDX_NONE;
   19406:	4b0c      	ldr	r3, [pc, #48]	; (19438 <ll_rl_remove+0xf4>)
   19408:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1940c:	23ff      	movs	r3, #255	; 0xff
   1940e:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0U;
   19410:	444e      	add	r6, r9
		return 0;
   19412:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   19414:	f818 3036 	ldrb.w	r3, [r8, r6, lsl #3]
   19418:	f36f 0300 	bfc	r3, #0, #1
   1941c:	f808 3036 	strb.w	r3, [r8, r6, lsl #3]
}
   19420:	b003      	add	sp, #12
   19422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						peer_irk_rl_ids[pi] = k;
   19426:	4c05      	ldr	r4, [pc, #20]	; (1943c <ll_rl_remove+0xf8>)
   19428:	f89a 2000 	ldrb.w	r2, [sl]
   1942c:	54e0      	strb	r0, [r4, r3]
						rl[k].pirk_idx = pi;
   1942e:	75cb      	strb	r3, [r1, #23]
						break;
   19430:	3a01      	subs	r2, #1
   19432:	e7df      	b.n	193f4 <ll_rl_remove+0xb0>
   19434:	200022dc 	.word	0x200022dc
   19438:	200024d4 	.word	0x200024d4
   1943c:	200022d4 	.word	0x200022d4
   19440:	2000235c 	.word	0x2000235c
   19444:	20003094 	.word	0x20003094

00019448 <ll_rl_crpa_set>:
{
   19448:	b538      	push	{r3, r4, r5, lr}
   1944a:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   1944c:	795b      	ldrb	r3, [r3, #5]
   1944e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19452:	2b40      	cmp	r3, #64	; 0x40
   19454:	d000      	beq.n	19458 <ll_rl_crpa_set+0x10>
}
   19456:	bd38      	pop	{r3, r4, r5, pc}
		if (id_addr) {
   19458:	b119      	cbz	r1, 19462 <ll_rl_crpa_set+0x1a>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   1945a:	2200      	movs	r2, #0
   1945c:	f7ff fe16 	bl	1908c <ull_filter_rl_find>
   19460:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   19462:	2a07      	cmp	r2, #7
   19464:	d8f7      	bhi.n	19456 <ll_rl_crpa_set+0xe>
   19466:	4b09      	ldr	r3, [pc, #36]	; (1948c <ll_rl_crpa_set+0x44>)
   19468:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1946c:	f813 1031 	ldrb.w	r1, [r3, r1, lsl #3]
   19470:	07c9      	lsls	r1, r1, #31
   19472:	d5f0      	bpl.n	19456 <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   19474:	2118      	movs	r1, #24
   19476:	2028      	movs	r0, #40	; 0x28
   19478:	fb10 1002 	smlabb	r0, r0, r2, r1
   1947c:	4418      	add	r0, r3
   1947e:	4621      	mov	r1, r4
   19480:	2206      	movs	r2, #6
}
   19482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   19486:	f008 b9ae 	b.w	217e6 <memcpy>
   1948a:	bf00      	nop
   1948c:	2000235c 	.word	0x2000235c

00019490 <ll_rl_crpa_get>:
{
   19490:	b538      	push	{r3, r4, r5, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19492:	4603      	mov	r3, r0
{
   19494:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19496:	f813 0b01 	ldrb.w	r0, [r3], #1
   1949a:	2200      	movs	r2, #0
   1949c:	4619      	mov	r1, r3
   1949e:	f7ff fdf5 	bl	1908c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   194a2:	2807      	cmp	r0, #7
   194a4:	d901      	bls.n	194aa <ll_rl_crpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   194a6:	2002      	movs	r0, #2
}
   194a8:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   194aa:	4c09      	ldr	r4, [pc, #36]	; (194d0 <ll_rl_crpa_get+0x40>)
   194ac:	2328      	movs	r3, #40	; 0x28
   194ae:	2218      	movs	r2, #24
   194b0:	fb13 2000 	smlabb	r0, r3, r0, r2
   194b4:	4404      	add	r4, r0
   194b6:	4620      	mov	r0, r4
   194b8:	2106      	movs	r1, #6
   194ba:	f7f6 f8ad 	bl	f618 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   194be:	2800      	cmp	r0, #0
   194c0:	d0f1      	beq.n	194a6 <ll_rl_crpa_get+0x16>
   194c2:	4621      	mov	r1, r4
   194c4:	4628      	mov	r0, r5
   194c6:	2206      	movs	r2, #6
   194c8:	f008 f98d 	bl	217e6 <memcpy>
		return 0;
   194cc:	2000      	movs	r0, #0
}
   194ce:	bd38      	pop	{r3, r4, r5, pc}
   194d0:	2000235c 	.word	0x2000235c

000194d4 <ll_rl_lrpa_get>:
{
   194d4:	b510      	push	{r4, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   194d6:	4603      	mov	r3, r0
{
   194d8:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   194da:	f813 0b01 	ldrb.w	r0, [r3], #1
   194de:	2200      	movs	r2, #0
   194e0:	4619      	mov	r1, r3
   194e2:	f7ff fdd3 	bl	1908c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   194e6:	2807      	cmp	r0, #7
   194e8:	d901      	bls.n	194ee <ll_rl_lrpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   194ea:	2002      	movs	r0, #2
}
   194ec:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   194ee:	4b06      	ldr	r3, [pc, #24]	; (19508 <ll_rl_lrpa_get+0x34>)
   194f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   194f4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   194f8:	2206      	movs	r2, #6
   194fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
   194fc:	4620      	mov	r0, r4
   194fe:	f008 f972 	bl	217e6 <memcpy>
		return 0;
   19502:	2000      	movs	r0, #0
}
   19504:	bd10      	pop	{r4, pc}
   19506:	bf00      	nop
   19508:	2000235c 	.word	0x2000235c

0001950c <ll_priv_mode_set>:
{
   1950c:	b570      	push	{r4, r5, r6, lr}
   1950e:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19510:	2000      	movs	r0, #0
{
   19512:	460e      	mov	r6, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19514:	f7fb f94a 	bl	147ac <ull_adv_is_enabled>
		? 0 : 1;
   19518:	b108      	cbz	r0, 1951e <ll_priv_mode_set+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1951a:	200c      	movs	r0, #12
}
   1951c:	bd70      	pop	{r4, r5, r6, pc}
   1951e:	4604      	mov	r4, r0
   19520:	f7ff fb02 	bl	18b28 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
   19524:	2800      	cmp	r0, #0
   19526:	d0f8      	beq.n	1951a <ll_priv_mode_set+0xe>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19528:	4629      	mov	r1, r5
   1952a:	4622      	mov	r2, r4
   1952c:	f811 0b01 	ldrb.w	r0, [r1], #1
   19530:	f7ff fdac 	bl	1908c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   19534:	2807      	cmp	r0, #7
   19536:	d81a      	bhi.n	1956e <ll_priv_mode_set+0x62>
		switch (mode) {
   19538:	b176      	cbz	r6, 19558 <ll_priv_mode_set+0x4c>
   1953a:	2e01      	cmp	r6, #1
   1953c:	d10a      	bne.n	19554 <ll_priv_mode_set+0x48>
			rl[i].dev = 1U;
   1953e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   19542:	490c      	ldr	r1, [pc, #48]	; (19574 <ll_priv_mode_set+0x68>)
   19544:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   19548:	f042 0210 	orr.w	r2, r2, #16
   1954c:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	return 0;
   19550:	4620      	mov	r0, r4
}
   19552:	bd70      	pop	{r4, r5, r6, pc}
		switch (mode) {
   19554:	2012      	movs	r0, #18
}
   19556:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   19558:	4b06      	ldr	r3, [pc, #24]	; (19574 <ll_priv_mode_set+0x68>)
   1955a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1955e:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   19562:	f366 1204 	bfi	r2, r6, #4, #1
   19566:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return 0;
   1956a:	4630      	mov	r0, r6
}
   1956c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1956e:	2002      	movs	r0, #2
}
   19570:	bd70      	pop	{r4, r5, r6, pc}
   19572:	bf00      	nop
   19574:	2000235c 	.word	0x2000235c

00019578 <ull_filter_reset>:
	wl_anon = 0U;
   19578:	4a33      	ldr	r2, [pc, #204]	; (19648 <ull_filter_reset+0xd0>)
   1957a:	4934      	ldr	r1, [pc, #208]	; (1964c <ull_filter_reset+0xd4>)
{
   1957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	wl_anon = 0U;
   1957e:	2300      	movs	r3, #0
   19580:	4c33      	ldr	r4, [pc, #204]	; (19650 <ull_filter_reset+0xd8>)
   19582:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   19584:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   19588:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1958a:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   1958c:	eb02 0582 	add.w	r5, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   19590:	d805      	bhi.n	1959e <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   19592:	f814 2035 	ldrb.w	r2, [r4, r5, lsl #3]
   19596:	f36f 1245 	bfc	r2, #5, #1
   1959a:	f804 2035 	strb.w	r2, [r4, r5, lsl #3]
		wl[i].taken = 0U;
   1959e:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   195a2:	f36f 0200 	bfc	r2, #0, #1
   195a6:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   195aa:	3301      	adds	r3, #1
   195ac:	2b08      	cmp	r3, #8
   195ae:	d1e9      	bne.n	19584 <ull_filter_reset+0xc>
		rl[i].taken = 0U;
   195b0:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   195b4:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
   195b8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   195bc:	7827      	ldrb	r7, [r4, #0]
   195be:	f894 60a0 	ldrb.w	r6, [r4, #160]	; 0xa0
	rl_enable = 0U;
   195c2:	2100      	movs	r1, #0
		rl[i].taken = 0U;
   195c4:	f361 0500 	bfi	r5, r1, #0, #1
   195c8:	f361 0200 	bfi	r2, r1, #0, #1
   195cc:	f361 0300 	bfi	r3, r1, #0, #1
   195d0:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
   195d4:	f894 50c8 	ldrb.w	r5, [r4, #200]	; 0xc8
   195d8:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
   195dc:	f361 0700 	bfi	r7, r1, #0, #1
   195e0:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   195e4:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   195e8:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   195ec:	7027      	strb	r7, [r4, #0]
   195ee:	f361 0500 	bfi	r5, r1, #0, #1
	rl_enable = 0U;
   195f2:	4f18      	ldr	r7, [pc, #96]	; (19654 <ull_filter_reset+0xdc>)
		rl[i].taken = 0U;
   195f4:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
   195f8:	f361 0200 	bfi	r2, r1, #0, #1
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   195fc:	4d16      	ldr	r5, [pc, #88]	; (19658 <ull_filter_reset+0xe0>)
	rl_enable = 0U;
   195fe:	7039      	strb	r1, [r7, #0]
		rl[i].taken = 0U;
   19600:	f361 0300 	bfi	r3, r1, #0, #1
   19604:	f884 20f0 	strb.w	r2, [r4, #240]	; 0xf0
   19608:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	peer_irk_count = 0U;
   1960c:	4f13      	ldr	r7, [pc, #76]	; (1965c <ull_filter_reset+0xe4>)
	rpa_last_ms = -1;
   1960e:	4a14      	ldr	r2, [pc, #80]	; (19660 <ull_filter_reset+0xe8>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   19610:	4b14      	ldr	r3, [pc, #80]	; (19664 <ull_filter_reset+0xec>)
   19612:	602b      	str	r3, [r5, #0]
		rl[i].taken = 0U;
   19614:	f361 0600 	bfi	r6, r1, #0, #1
   19618:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
	rpa_last_ms = -1;
   1961c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19620:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19624:	e9c2 4500 	strd	r4, r5, [r2]
	peer_irk_count = 0U;
   19628:	7039      	strb	r1, [r7, #0]
	if (init) {
   1962a:	b138      	cbz	r0, 1963c <ull_filter_reset+0xc4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1962c:	4b0e      	ldr	r3, [pc, #56]	; (19668 <ull_filter_reset+0xf0>)
   1962e:	2230      	movs	r2, #48	; 0x30
   19630:	4618      	mov	r0, r3
   19632:	f008 f903 	bl	2183c <memset>
   19636:	4a0d      	ldr	r2, [pc, #52]	; (1966c <ull_filter_reset+0xf4>)
   19638:	6042      	str	r2, [r0, #4]
}
   1963a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1963c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		k_delayed_work_cancel(&rpa_work);
   19640:	4809      	ldr	r0, [pc, #36]	; (19668 <ull_filter_reset+0xf0>)
   19642:	f00b b985 	b.w	24950 <k_delayed_work_cancel>
   19646:	bf00      	nop
   19648:	20003096 	.word	0x20003096
   1964c:	200024d4 	.word	0x200024d4
   19650:	2000235c 	.word	0x2000235c
   19654:	20003095 	.word	0x20003095
   19658:	200024d0 	.word	0x200024d0
   1965c:	20003094 	.word	0x20003094
   19660:	20000f98 	.word	0x20000f98
   19664:	000dbba0 	.word	0x000dbba0
   19668:	20000fa0 	.word	0x20000fa0
   1966c:	00018fd9 	.word	0x00018fd9

00019670 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   19670:	2807      	cmp	r0, #7
   19672:	d807      	bhi.n	19684 <ull_filter_lll_lrpa_used+0x14>
   19674:	4b04      	ldr	r3, [pc, #16]	; (19688 <ull_filter_lll_lrpa_used+0x18>)
   19676:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1967a:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   1967e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   19682:	4770      	bx	lr
   19684:	2000      	movs	r0, #0
}
   19686:	4770      	bx	lr
   19688:	2000235c 	.word	0x2000235c

0001968c <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1968c:	2807      	cmp	r0, #7
   1968e:	d80d      	bhi.n	196ac <ull_filter_lll_lrpa_get+0x20>
   19690:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19694:	4906      	ldr	r1, [pc, #24]	; (196b0 <ull_filter_lll_lrpa_get+0x24>)
   19696:	f811 3030 	ldrb.w	r3, [r1, r0, lsl #3]
   1969a:	071a      	lsls	r2, r3, #28
   1969c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
   196a0:	d504      	bpl.n	196ac <ull_filter_lll_lrpa_get+0x20>
   196a2:	079b      	lsls	r3, r3, #30
   196a4:	d502      	bpl.n	196ac <ull_filter_lll_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   196a6:	4408      	add	r0, r1
   196a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
   196aa:	4770      	bx	lr
		return NULL;
   196ac:	2000      	movs	r0, #0
   196ae:	4770      	bx	lr
   196b0:	2000235c 	.word	0x2000235c

000196b4 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   196b4:	4b02      	ldr	r3, [pc, #8]	; (196c0 <ull_filter_lll_irks_get+0xc>)
   196b6:	781b      	ldrb	r3, [r3, #0]
   196b8:	7003      	strb	r3, [r0, #0]
}
   196ba:	4802      	ldr	r0, [pc, #8]	; (196c4 <ull_filter_lll_irks_get+0x10>)
   196bc:	4770      	bx	lr
   196be:	bf00      	nop
   196c0:	20003094 	.word	0x20003094
   196c4:	200022dc 	.word	0x200022dc

000196c8 <ull_filter_lll_rl_idx>:
{
   196c8:	b538      	push	{r3, r4, r5, lr}
   196ca:	460c      	mov	r4, r1
	if (whitelist) {
   196cc:	b150      	cbz	r0, 196e4 <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   196ce:	2907      	cmp	r1, #7
   196d0:	d822      	bhi.n	19718 <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(wl[devmatch_id].taken);
   196d2:	4d2a      	ldr	r5, [pc, #168]	; (1977c <ull_filter_lll_rl_idx+0xb4>)
   196d4:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   196d8:	07da      	lsls	r2, r3, #31
   196da:	d52f      	bpl.n	1973c <ull_filter_lll_rl_idx+0x74>
		i = wl[devmatch_id].rl_idx;
   196dc:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   196e0:	7860      	ldrb	r0, [r4, #1]
}
   196e2:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   196e4:	2907      	cmp	r1, #7
   196e6:	d83a      	bhi.n	1975e <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
   196e8:	4b25      	ldr	r3, [pc, #148]	; (19780 <ull_filter_lll_rl_idx+0xb8>)
   196ea:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   196ee:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   196f2:	07db      	lsls	r3, r3, #31
   196f4:	d501      	bpl.n	196fa <ull_filter_lll_rl_idx+0x32>
   196f6:	4620      	mov	r0, r4
}
   196f8:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
   196fa:	4a22      	ldr	r2, [pc, #136]	; (19784 <ull_filter_lll_rl_idx+0xbc>)
   196fc:	4922      	ldr	r1, [pc, #136]	; (19788 <ull_filter_lll_rl_idx+0xc0>)
   196fe:	4823      	ldr	r0, [pc, #140]	; (1978c <ull_filter_lll_rl_idx+0xc4>)
   19700:	f240 23af 	movw	r3, #687	; 0x2af
   19704:	f005 fff7 	bl	1f6f6 <printk>
   19708:	4040      	eors	r0, r0
   1970a:	f380 8811 	msr	BASEPRI, r0
   1970e:	f04f 0003 	mov.w	r0, #3
   19712:	df02      	svc	2
   19714:	4620      	mov	r0, r4
}
   19716:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   19718:	4a1a      	ldr	r2, [pc, #104]	; (19784 <ull_filter_lll_rl_idx+0xbc>)
   1971a:	491d      	ldr	r1, [pc, #116]	; (19790 <ull_filter_lll_rl_idx+0xc8>)
   1971c:	481b      	ldr	r0, [pc, #108]	; (1978c <ull_filter_lll_rl_idx+0xc4>)
   1971e:	f240 23a9 	movw	r3, #681	; 0x2a9
   19722:	f005 ffe8 	bl	1f6f6 <printk>
   19726:	4040      	eors	r0, r0
   19728:	f380 8811 	msr	BASEPRI, r0
   1972c:	f04f 0003 	mov.w	r0, #3
   19730:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   19732:	4d12      	ldr	r5, [pc, #72]	; (1977c <ull_filter_lll_rl_idx+0xb4>)
   19734:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   19738:	07da      	lsls	r2, r3, #31
   1973a:	d4cf      	bmi.n	196dc <ull_filter_lll_rl_idx+0x14>
   1973c:	4a11      	ldr	r2, [pc, #68]	; (19784 <ull_filter_lll_rl_idx+0xbc>)
   1973e:	4915      	ldr	r1, [pc, #84]	; (19794 <ull_filter_lll_rl_idx+0xcc>)
   19740:	4812      	ldr	r0, [pc, #72]	; (1978c <ull_filter_lll_rl_idx+0xc4>)
   19742:	f240 23aa 	movw	r3, #682	; 0x2aa
   19746:	f005 ffd6 	bl	1f6f6 <printk>
   1974a:	4040      	eors	r0, r0
   1974c:	f380 8811 	msr	BASEPRI, r0
   19750:	f04f 0003 	mov.w	r0, #3
   19754:	df02      	svc	2
		i = wl[devmatch_id].rl_idx;
   19756:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1975a:	7860      	ldrb	r0, [r4, #1]
   1975c:	e7c1      	b.n	196e2 <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1975e:	4a09      	ldr	r2, [pc, #36]	; (19784 <ull_filter_lll_rl_idx+0xbc>)
   19760:	490d      	ldr	r1, [pc, #52]	; (19798 <ull_filter_lll_rl_idx+0xd0>)
   19762:	480a      	ldr	r0, [pc, #40]	; (1978c <ull_filter_lll_rl_idx+0xc4>)
   19764:	f240 23ad 	movw	r3, #685	; 0x2ad
   19768:	f005 ffc5 	bl	1f6f6 <printk>
   1976c:	4040      	eors	r0, r0
   1976e:	f380 8811 	msr	BASEPRI, r0
   19772:	f04f 0003 	mov.w	r0, #3
   19776:	df02      	svc	2
   19778:	e7b6      	b.n	196e8 <ull_filter_lll_rl_idx+0x20>
   1977a:	bf00      	nop
   1977c:	200024d4 	.word	0x200024d4
   19780:	2000235c 	.word	0x2000235c
   19784:	00026248 	.word	0x00026248
   19788:	00026420 	.word	0x00026420
   1978c:	00025984 	.word	0x00025984
   19790:	000262c0 	.word	0x000262c0
   19794:	00026364 	.word	0x00026364
   19798:	0002637c 	.word	0x0002637c

0001979c <ull_filter_lll_rl_irk_idx>:
{
   1979c:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1979e:	4b20      	ldr	r3, [pc, #128]	; (19820 <ull_filter_lll_rl_irk_idx+0x84>)
   197a0:	781b      	ldrb	r3, [r3, #0]
   197a2:	4283      	cmp	r3, r0
{
   197a4:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   197a6:	d90c      	bls.n	197c2 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   197a8:	4b1e      	ldr	r3, [pc, #120]	; (19824 <ull_filter_lll_rl_irk_idx+0x88>)
   197aa:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   197ac:	2c07      	cmp	r4, #7
   197ae:	d819      	bhi.n	197e4 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   197b0:	4b1d      	ldr	r3, [pc, #116]	; (19828 <ull_filter_lll_rl_irk_idx+0x8c>)
   197b2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   197b6:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   197ba:	07db      	lsls	r3, r3, #31
   197bc:	d520      	bpl.n	19800 <ull_filter_lll_rl_irk_idx+0x64>
}
   197be:	4620      	mov	r0, r4
   197c0:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   197c2:	4a1a      	ldr	r2, [pc, #104]	; (1982c <ull_filter_lll_rl_irk_idx+0x90>)
   197c4:	491a      	ldr	r1, [pc, #104]	; (19830 <ull_filter_lll_rl_irk_idx+0x94>)
   197c6:	481b      	ldr	r0, [pc, #108]	; (19834 <ull_filter_lll_rl_irk_idx+0x98>)
   197c8:	f240 23b9 	movw	r3, #697	; 0x2b9
   197cc:	f005 ff93 	bl	1f6f6 <printk>
   197d0:	4040      	eors	r0, r0
   197d2:	f380 8811 	msr	BASEPRI, r0
   197d6:	f04f 0003 	mov.w	r0, #3
   197da:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   197dc:	4b11      	ldr	r3, [pc, #68]	; (19824 <ull_filter_lll_rl_irk_idx+0x88>)
   197de:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   197e0:	2c07      	cmp	r4, #7
   197e2:	d9e5      	bls.n	197b0 <ull_filter_lll_rl_irk_idx+0x14>
   197e4:	4a11      	ldr	r2, [pc, #68]	; (1982c <ull_filter_lll_rl_irk_idx+0x90>)
   197e6:	4914      	ldr	r1, [pc, #80]	; (19838 <ull_filter_lll_rl_irk_idx+0x9c>)
   197e8:	4812      	ldr	r0, [pc, #72]	; (19834 <ull_filter_lll_rl_irk_idx+0x98>)
   197ea:	f240 23bb 	movw	r3, #699	; 0x2bb
   197ee:	f005 ff82 	bl	1f6f6 <printk>
   197f2:	4040      	eors	r0, r0
   197f4:	f380 8811 	msr	BASEPRI, r0
   197f8:	f04f 0003 	mov.w	r0, #3
   197fc:	df02      	svc	2
   197fe:	e7d7      	b.n	197b0 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   19800:	4a0a      	ldr	r2, [pc, #40]	; (1982c <ull_filter_lll_rl_irk_idx+0x90>)
   19802:	490e      	ldr	r1, [pc, #56]	; (1983c <ull_filter_lll_rl_irk_idx+0xa0>)
   19804:	480b      	ldr	r0, [pc, #44]	; (19834 <ull_filter_lll_rl_irk_idx+0x98>)
   19806:	f44f 732f 	mov.w	r3, #700	; 0x2bc
   1980a:	f005 ff74 	bl	1f6f6 <printk>
   1980e:	4040      	eors	r0, r0
   19810:	f380 8811 	msr	BASEPRI, r0
   19814:	f04f 0003 	mov.w	r0, #3
   19818:	df02      	svc	2
}
   1981a:	4620      	mov	r0, r4
   1981c:	bd10      	pop	{r4, pc}
   1981e:	bf00      	nop
   19820:	20003094 	.word	0x20003094
   19824:	200022d4 	.word	0x200022d4
   19828:	2000235c 	.word	0x2000235c
   1982c:	00026248 	.word	0x00026248
   19830:	0002642c 	.word	0x0002642c
   19834:	00025984 	.word	0x00025984
   19838:	0002644c 	.word	0x0002644c
   1983c:	00026420 	.word	0x00026420

00019840 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   19840:	2807      	cmp	r0, #7
   19842:	d823      	bhi.n	1988c <ull_filter_lll_irk_whitelisted+0x4c>
{
   19844:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   19846:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1984a:	4e11      	ldr	r6, [pc, #68]	; (19890 <ull_filter_lll_irk_whitelisted+0x50>)
   1984c:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   19850:	07db      	lsls	r3, r3, #31
   19852:	4604      	mov	r4, r0
   19854:	ea4f 0580 	mov.w	r5, r0, lsl #2
   19858:	d505      	bpl.n	19866 <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   1985a:	442c      	add	r4, r5
   1985c:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   19860:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   19864:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   19866:	4a0b      	ldr	r2, [pc, #44]	; (19894 <ull_filter_lll_irk_whitelisted+0x54>)
   19868:	490b      	ldr	r1, [pc, #44]	; (19898 <ull_filter_lll_irk_whitelisted+0x58>)
   1986a:	480c      	ldr	r0, [pc, #48]	; (1989c <ull_filter_lll_irk_whitelisted+0x5c>)
   1986c:	f240 23c7 	movw	r3, #711	; 0x2c7
   19870:	f005 ff41 	bl	1f6f6 <printk>
   19874:	4040      	eors	r0, r0
   19876:	f380 8811 	msr	BASEPRI, r0
   1987a:	f04f 0003 	mov.w	r0, #3
   1987e:	df02      	svc	2
	return rl[rl_idx].wl;
   19880:	442c      	add	r4, r5
   19882:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   19886:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1988a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1988c:	2000      	movs	r0, #0
}
   1988e:	4770      	bx	lr
   19890:	2000235c 	.word	0x2000235c
   19894:	00026248 	.word	0x00026248
   19898:	00026298 	.word	0x00026298
   1989c:	00025984 	.word	0x00025984

000198a0 <ull_filter_lll_get>:
		return &wl_filter;
   198a0:	4a03      	ldr	r2, [pc, #12]	; (198b0 <ull_filter_lll_get+0x10>)
   198a2:	4b04      	ldr	r3, [pc, #16]	; (198b4 <ull_filter_lll_get+0x14>)
}
   198a4:	2800      	cmp	r0, #0
   198a6:	bf0c      	ite	eq
   198a8:	4610      	moveq	r0, r2
   198aa:	4618      	movne	r0, r3
   198ac:	4770      	bx	lr
   198ae:	bf00      	nop
   198b0:	2000249c 	.word	0x2000249c
   198b4:	20002514 	.word	0x20002514

000198b8 <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   198b8:	4b14      	ldr	r3, [pc, #80]	; (1990c <ull_filter_lll_rl_idx_allowed+0x54>)
   198ba:	781b      	ldrb	r3, [r3, #0]
   198bc:	b19b      	cbz	r3, 198e6 <ull_filter_lll_rl_idx_allowed+0x2e>
   198be:	2907      	cmp	r1, #7
{
   198c0:	b570      	push	{r4, r5, r6, lr}
   198c2:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   198c4:	d80d      	bhi.n	198e2 <ull_filter_lll_rl_idx_allowed+0x2a>
   198c6:	b960      	cbnz	r0, 198e2 <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   198c8:	4e11      	ldr	r6, [pc, #68]	; (19910 <ull_filter_lll_rl_idx_allowed+0x58>)
   198ca:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   198ce:	008d      	lsls	r5, r1, #2
   198d0:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   198d4:	07da      	lsls	r2, r3, #31
   198d6:	d50b      	bpl.n	198f0 <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   198d8:	442c      	add	r4, r5
   198da:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   198de:	0743      	lsls	r3, r0, #29
   198e0:	d403      	bmi.n	198ea <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   198e2:	2001      	movs	r0, #1
}
   198e4:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   198e6:	2001      	movs	r0, #1
}
   198e8:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   198ea:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   198ee:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   198f0:	4a08      	ldr	r2, [pc, #32]	; (19914 <ull_filter_lll_rl_idx_allowed+0x5c>)
   198f2:	4909      	ldr	r1, [pc, #36]	; (19918 <ull_filter_lll_rl_idx_allowed+0x60>)
   198f4:	4809      	ldr	r0, [pc, #36]	; (1991c <ull_filter_lll_rl_idx_allowed+0x64>)
   198f6:	f240 23ef 	movw	r3, #751	; 0x2ef
   198fa:	f005 fefc 	bl	1f6f6 <printk>
   198fe:	4040      	eors	r0, r0
   19900:	f380 8811 	msr	BASEPRI, r0
   19904:	f04f 0003 	mov.w	r0, #3
   19908:	df02      	svc	2
   1990a:	e7e5      	b.n	198d8 <ull_filter_lll_rl_idx_allowed+0x20>
   1990c:	20003095 	.word	0x20003095
   19910:	2000235c 	.word	0x2000235c
   19914:	00026248 	.word	0x00026248
   19918:	00026298 	.word	0x00026298
   1991c:	00025984 	.word	0x00025984

00019920 <ull_filter_lll_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   19920:	4b1c      	ldr	r3, [pc, #112]	; (19994 <ull_filter_lll_rl_addr_allowed+0x74>)
   19922:	781b      	ldrb	r3, [r3, #0]
   19924:	b1fb      	cbz	r3, 19966 <ull_filter_lll_rl_addr_allowed+0x46>
   19926:	7813      	ldrb	r3, [r2, #0]
   19928:	2bff      	cmp	r3, #255	; 0xff
   1992a:	d11c      	bne.n	19966 <ull_filter_lll_rl_addr_allowed+0x46>
{
   1992c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19930:	4d19      	ldr	r5, [pc, #100]	; (19998 <ull_filter_lll_rl_addr_allowed+0x78>)
   19932:	4606      	mov	r6, r0
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   19934:	2300      	movs	r3, #0
   19936:	1faf      	subs	r7, r5, #6
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   19938:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   1993c:	fa5f fe83 	uxtb.w	lr, r3
   19940:	f817 4034 	ldrb.w	r4, [r7, r4, lsl #3]
   19944:	f014 0001 	ands.w	r0, r4, #1
   19948:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   1994c:	d003      	beq.n	19956 <ull_filter_lll_rl_addr_allowed+0x36>
   1994e:	f3c4 1480 	ubfx	r4, r4, #6, #1
   19952:	42b4      	cmp	r4, r6
   19954:	d009      	beq.n	1996a <ull_filter_lll_rl_addr_allowed+0x4a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19956:	3301      	adds	r3, #1
   19958:	2b08      	cmp	r3, #8
   1995a:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1995e:	d1eb      	bne.n	19938 <ull_filter_lll_rl_addr_allowed+0x18>
		return true;
   19960:	2001      	movs	r0, #1
}
   19962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
   19966:	2001      	movs	r0, #1
}
   19968:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1996a:	1fac      	subs	r4, r5, #6
   1996c:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
				if (addr[j] != id_addr[j]) {
   19970:	f814 af01 	ldrb.w	sl, [r4, #1]!
   19974:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   19978:	45ca      	cmp	sl, r9
   1997a:	d1ec      	bne.n	19956 <ull_filter_lll_rl_addr_allowed+0x36>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1997c:	42ac      	cmp	r4, r5
   1997e:	d1f7      	bne.n	19970 <ull_filter_lll_rl_addr_allowed+0x50>
				return !rl[i].pirk || rl[i].dev;
   19980:	4463      	add	r3, ip
				*rl_idx = i;
   19982:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   19986:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1998a:	075a      	lsls	r2, r3, #29
   1998c:	d5e9      	bpl.n	19962 <ull_filter_lll_rl_addr_allowed+0x42>
   1998e:	f3c3 1000 	ubfx	r0, r3, #4, #1
   19992:	e7e6      	b.n	19962 <ull_filter_lll_rl_addr_allowed+0x42>
   19994:	20003095 	.word	0x20003095
   19998:	20002362 	.word	0x20002362

0001999c <ull_filter_lll_rl_addr_resolve>:
{
   1999c:	b430      	push	{r4, r5}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1999e:	4b0e      	ldr	r3, [pc, #56]	; (199d8 <ull_filter_lll_rl_addr_resolve+0x3c>)
   199a0:	781c      	ldrb	r4, [r3, #0]
   199a2:	b174      	cbz	r4, 199c2 <ull_filter_lll_rl_addr_resolve+0x26>
   199a4:	2a07      	cmp	r2, #7
   199a6:	d80c      	bhi.n	199c2 <ull_filter_lll_rl_addr_resolve+0x26>
   199a8:	4c0c      	ldr	r4, [pc, #48]	; (199dc <ull_filter_lll_rl_addr_resolve+0x40>)
   199aa:	eb02 0582 	add.w	r5, r2, r2, lsl #2
   199ae:	f814 5035 	ldrb.w	r5, [r4, r5, lsl #3]
   199b2:	072b      	lsls	r3, r5, #28
   199b4:	d505      	bpl.n	199c2 <ull_filter_lll_rl_addr_resolve+0x26>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   199b6:	b120      	cbz	r0, 199c2 <ull_filter_lll_rl_addr_resolve+0x26>
   199b8:	794b      	ldrb	r3, [r1, #5]
   199ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   199be:	2b40      	cmp	r3, #64	; 0x40
   199c0:	d002      	beq.n	199c8 <ull_filter_lll_rl_addr_resolve+0x2c>
}
   199c2:	2000      	movs	r0, #0
   199c4:	bc30      	pop	{r4, r5}
   199c6:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   199c8:	2028      	movs	r0, #40	; 0x28
   199ca:	fb00 4002 	mla	r0, r0, r2, r4
   199ce:	3007      	adds	r0, #7
}
   199d0:	bc30      	pop	{r4, r5}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   199d2:	f007 bf78 	b.w	218c6 <bt_rpa_irk_matches>
   199d6:	bf00      	nop
   199d8:	20003095 	.word	0x20003095
   199dc:	2000235c 	.word	0x2000235c

000199e0 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   199e0:	4b02      	ldr	r3, [pc, #8]	; (199ec <ull_filter_lll_rl_enabled+0xc>)
   199e2:	7818      	ldrb	r0, [r3, #0]
}
   199e4:	3800      	subs	r0, #0
   199e6:	bf18      	it	ne
   199e8:	2001      	movne	r0, #1
   199ea:	4770      	bx	lr
   199ec:	20003095 	.word	0x20003095

000199f0 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   199f0:	4668      	mov	r0, sp
   199f2:	f020 0107 	bic.w	r1, r0, #7
   199f6:	468d      	mov	sp, r1
   199f8:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	isr_radio();
   199fa:	f002 fc9f 	bl	1c33c <isr_radio>

	ISR_DIRECT_PM();
   199fe:	f7ec fef3 	bl	67e8 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   19a02:	f7ed fa2b 	bl	6e5c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   19a06:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   19a0a:	4685      	mov	sp, r0
   19a0c:	4770      	bx	lr
   19a0e:	bf00      	nop

00019a10 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   19a10:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   19a12:	4b09      	ldr	r3, [pc, #36]	; (19a38 <rtc0_nrf5_isr+0x28>)
   19a14:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   19a18:	b93a      	cbnz	r2, 19a2a <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   19a1a:	2001      	movs	r0, #1
   19a1c:	f7f5 fede 	bl	f7dc <mayfly_run>
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
#endif

	DEBUG_TICKER_ISR(0);
}
   19a20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   19a24:	2002      	movs	r0, #2
   19a26:	f7f5 bed9 	b.w	f7dc <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   19a2a:	2000      	movs	r0, #0
   19a2c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   19a30:	f7f7 f9b2 	bl	10d98 <ticker_trigger>
   19a34:	e7f1      	b.n	19a1a <rtc0_nrf5_isr+0xa>
   19a36:	bf00      	nop
   19a38:	4000b000 	.word	0x4000b000

00019a3c <swi_lll_nrf5_isr>:

static void swi_lll_nrf5_isr(const void *arg)
{
	DEBUG_RADIO_ISR(1);

	mayfly_run(TICKER_USER_ID_LLL);
   19a3c:	2000      	movs	r0, #0
   19a3e:	f7f5 becd 	b.w	f7dc <mayfly_run>
   19a42:	bf00      	nop

00019a44 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   19a44:	f002 bdb6 	b.w	1c5b4 <radio_status_reset>

00019a48 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   19a48:	2801      	cmp	r0, #1
   19a4a:	d800      	bhi.n	19a4e <ticker_stop_op_cb+0x6>
   19a4c:	4770      	bx	lr
{
   19a4e:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   19a50:	4a06      	ldr	r2, [pc, #24]	; (19a6c <ticker_stop_op_cb+0x24>)
   19a52:	4907      	ldr	r1, [pc, #28]	; (19a70 <ticker_stop_op_cb+0x28>)
   19a54:	4807      	ldr	r0, [pc, #28]	; (19a74 <ticker_stop_op_cb+0x2c>)
   19a56:	f240 238a 	movw	r3, #650	; 0x28a
   19a5a:	f005 fe4c 	bl	1f6f6 <printk>
   19a5e:	4040      	eors	r0, r0
   19a60:	f380 8811 	msr	BASEPRI, r0
   19a64:	f04f 0003 	mov.w	r0, #3
   19a68:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   19a6a:	bd08      	pop	{r3, pc}
   19a6c:	00026468 	.word	0x00026468
   19a70:	000264b0 	.word	0x000264b0
   19a74:	00025984 	.word	0x00025984

00019a78 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   19a78:	2801      	cmp	r0, #1
   19a7a:	d800      	bhi.n	19a7e <ticker_start_op_cb+0x6>
   19a7c:	4770      	bx	lr
{
   19a7e:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   19a80:	4a06      	ldr	r2, [pc, #24]	; (19a9c <ticker_start_op_cb+0x24>)
   19a82:	4907      	ldr	r1, [pc, #28]	; (19aa0 <ticker_start_op_cb+0x28>)
   19a84:	4807      	ldr	r0, [pc, #28]	; (19aa4 <ticker_start_op_cb+0x2c>)
   19a86:	f240 2395 	movw	r3, #661	; 0x295
   19a8a:	f005 fe34 	bl	1f6f6 <printk>
   19a8e:	4040      	eors	r0, r0
   19a90:	f380 8811 	msr	BASEPRI, r0
   19a94:	f04f 0003 	mov.w	r0, #3
   19a98:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   19a9a:	bd08      	pop	{r3, pc}
   19a9c:	00026468 	.word	0x00026468
   19aa0:	000264b0 	.word	0x000264b0
   19aa4:	00025984 	.word	0x00025984

00019aa8 <preempt_ticker_start.isra.0>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   19aa8:	b530      	push	{r4, r5, lr}
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   19aaa:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   19aac:	b08b      	sub	sp, #44	; 0x2c
	evt = HDR_LLL2EVT(prepare_param->param);
   19aae:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   19ab0:	4c15      	ldr	r4, [pc, #84]	; (19b08 <preempt_ticker_start.isra.0+0x60>)
   19ab2:	4916      	ldr	r1, [pc, #88]	; (19b0c <preempt_ticker_start.isra.0+0x64>)
   19ab4:	9208      	str	r2, [sp, #32]
   19ab6:	e9cd 2203 	strd	r2, r2, [sp, #12]
   19aba:	e9cd 2201 	strd	r2, r2, [sp, #4]
   19abe:	9206      	str	r2, [sp, #24]
   19ac0:	9407      	str	r4, [sp, #28]
   19ac2:	9105      	str	r1, [sp, #20]
	preempt_to = MAX(evt->ticks_active_to_start,
   19ac4:	e9d3 5400 	ldrd	r5, r4, [r3]
   19ac8:	6899      	ldr	r1, [r3, #8]
   19aca:	42a5      	cmp	r5, r4
   19acc:	bf2c      	ite	cs
   19ace:	ebc1 0105 	rsbcs	r1, r1, r5
   19ad2:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   19ad6:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   19ad8:	9100      	str	r1, [sp, #0]
   19ada:	4610      	mov	r0, r2
   19adc:	4611      	mov	r1, r2
   19ade:	f7f7 f9c9 	bl	10e74 <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   19ae2:	2802      	cmp	r0, #2
   19ae4:	d801      	bhi.n	19aea <preempt_ticker_start.isra.0+0x42>
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   19ae6:	b00b      	add	sp, #44	; 0x2c
   19ae8:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   19aea:	4a09      	ldr	r2, [pc, #36]	; (19b10 <preempt_ticker_start.isra.0+0x68>)
   19aec:	4909      	ldr	r1, [pc, #36]	; (19b14 <preempt_ticker_start.isra.0+0x6c>)
   19aee:	480a      	ldr	r0, [pc, #40]	; (19b18 <preempt_ticker_start.isra.0+0x70>)
   19af0:	f240 23b3 	movw	r3, #691	; 0x2b3
   19af4:	f005 fdff 	bl	1f6f6 <printk>
   19af8:	4040      	eors	r0, r0
   19afa:	f380 8811 	msr	BASEPRI, r0
   19afe:	f04f 0003 	mov.w	r0, #3
   19b02:	df02      	svc	2
}
   19b04:	b00b      	add	sp, #44	; 0x2c
   19b06:	bd30      	pop	{r4, r5, pc}
   19b08:	00019a79 	.word	0x00019a79
   19b0c:	00019d6d 	.word	0x00019d6d
   19b10:	00026468 	.word	0x00026468
   19b14:	000264d0 	.word	0x000264d0
   19b18:	00025984 	.word	0x00025984

00019b1c <prepare>:
{
   19b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19b20:	b085      	sub	sp, #20
   19b22:	4604      	mov	r4, r0
	idx = UINT8_MAX;
   19b24:	f04f 0cff 	mov.w	ip, #255	; 0xff
	p = ull_prepare_dequeue_iter(&idx);
   19b28:	f10d 000f 	add.w	r0, sp, #15
{
   19b2c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   19b30:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	idx = UINT8_MAX;
   19b34:	f88d c00f 	strb.w	ip, [sp, #15]
{
   19b38:	460d      	mov	r5, r1
   19b3a:	4616      	mov	r6, r2
   19b3c:	461f      	mov	r7, r3
	p = ull_prepare_dequeue_iter(&idx);
   19b3e:	f7fa fa6f 	bl	14020 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   19b42:	b918      	cbnz	r0, 19b4c <prepare+0x30>
   19b44:	e01e      	b.n	19b84 <prepare+0x68>
		p = ull_prepare_dequeue_iter(&idx);
   19b46:	f7fa fa6b 	bl	14020 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   19b4a:	b1d8      	cbz	r0, 19b84 <prepare+0x68>
   19b4c:	f890 3020 	ldrb.w	r3, [r0, #32]
   19b50:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   19b52:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   19b56:	d1f6      	bne.n	19b46 <prepare+0x2a>
	if (event.curr.abort_cb || (p && is_resume)) {
   19b58:	4b2d      	ldr	r3, [pc, #180]	; (19c10 <prepare+0xf4>)
   19b5a:	689a      	ldr	r2, [r3, #8]
   19b5c:	b9aa      	cbnz	r2, 19b8a <prepare+0x6e>
   19b5e:	f1b9 0f00 	cmp.w	r9, #0
   19b62:	d036      	beq.n	19bd2 <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   19b64:	2201      	movs	r2, #1
   19b66:	9201      	str	r2, [sp, #4]
   19b68:	9700      	str	r7, [sp, #0]
   19b6a:	4633      	mov	r3, r6
   19b6c:	4629      	mov	r1, r5
   19b6e:	4620      	mov	r0, r4
   19b70:	4642      	mov	r2, r8
   19b72:	f7fa fa0f 	bl	13f94 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   19b76:	b9d8      	cbnz	r0, 19bb0 <prepare+0x94>
		return -EINPROGRESS;
   19b78:	f06f 0443 	mvn.w	r4, #67	; 0x43
}
   19b7c:	4620      	mov	r0, r4
   19b7e:	b005      	add	sp, #20
   19b80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (event.curr.abort_cb || (p && is_resume)) {
   19b84:	4b22      	ldr	r3, [pc, #136]	; (19c10 <prepare+0xf4>)
   19b86:	689a      	ldr	r2, [r3, #8]
   19b88:	b31a      	cbz	r2, 19bd2 <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   19b8a:	e9cd 7900 	strd	r7, r9, [sp]
   19b8e:	4633      	mov	r3, r6
   19b90:	4629      	mov	r1, r5
   19b92:	4620      	mov	r0, r4
   19b94:	4642      	mov	r2, r8
   19b96:	f7fa f9fd 	bl	13f94 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   19b9a:	b948      	cbnz	r0, 19bb0 <prepare+0x94>
		if (is_resume) {
   19b9c:	f1b9 0f00 	cmp.w	r9, #0
   19ba0:	d1ea      	bne.n	19b78 <prepare+0x5c>
		preempt_ticker_start(prepare_param);
   19ba2:	f8d8 100c 	ldr.w	r1, [r8, #12]
   19ba6:	f8d8 0000 	ldr.w	r0, [r8]
   19baa:	f7ff ff7d 	bl	19aa8 <preempt_ticker_start.isra.0>
   19bae:	e7e3      	b.n	19b78 <prepare+0x5c>
		LL_ASSERT(!err);
   19bb0:	4a18      	ldr	r2, [pc, #96]	; (19c14 <prepare+0xf8>)
   19bb2:	4919      	ldr	r1, [pc, #100]	; (19c18 <prepare+0xfc>)
   19bb4:	4819      	ldr	r0, [pc, #100]	; (19c1c <prepare+0x100>)
   19bb6:	f240 232f 	movw	r3, #559	; 0x22f
   19bba:	f005 fd9c 	bl	1f6f6 <printk>
   19bbe:	4040      	eors	r0, r0
   19bc0:	f380 8811 	msr	BASEPRI, r0
   19bc4:	f04f 0003 	mov.w	r0, #3
   19bc8:	df02      	svc	2
		if (is_resume) {
   19bca:	f1b9 0f00 	cmp.w	r9, #0
   19bce:	d1d3      	bne.n	19b78 <prepare+0x5c>
   19bd0:	e7e7      	b.n	19ba2 <prepare+0x86>
	event.curr.param = prepare_param->param;
   19bd2:	f8d8 200c 	ldr.w	r2, [r8, #12]
   19bd6:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   19bd8:	e9c3 4501 	strd	r4, r5, [r3, #4]
	err = prepare_cb(prepare_param);
   19bdc:	4640      	mov	r0, r8
   19bde:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   19be0:	2200      	movs	r2, #0
   19be2:	4b0f      	ldr	r3, [pc, #60]	; (19c20 <prepare+0x104>)
   19be4:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   19be6:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   19be8:	4611      	mov	r1, r2
   19bea:	4610      	mov	r0, r2
   19bec:	f7f7 f9ae 	bl	10f4c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   19bf0:	2802      	cmp	r0, #2
   19bf2:	d9c3      	bls.n	19b7c <prepare+0x60>
   19bf4:	4a07      	ldr	r2, [pc, #28]	; (19c14 <prepare+0xf8>)
   19bf6:	490b      	ldr	r1, [pc, #44]	; (19c24 <prepare+0x108>)
   19bf8:	4808      	ldr	r0, [pc, #32]	; (19c1c <prepare+0x100>)
   19bfa:	f240 2369 	movw	r3, #617	; 0x269
   19bfe:	f005 fd7a 	bl	1f6f6 <printk>
   19c02:	4040      	eors	r0, r0
   19c04:	f380 8811 	msr	BASEPRI, r0
   19c08:	f04f 0003 	mov.w	r0, #3
   19c0c:	df02      	svc	2
   19c0e:	e7b5      	b.n	19b7c <prepare+0x60>
   19c10:	2000254c 	.word	0x2000254c
   19c14:	00026468 	.word	0x00026468
   19c18:	00025c3c 	.word	0x00025c3c
   19c1c:	00025984 	.word	0x00025984
   19c20:	00019a49 	.word	0x00019a49
   19c24:	000264d0 	.word	0x000264d0

00019c28 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   19c28:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	int resume_prio;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   19c2a:	4e4b      	ldr	r6, [pc, #300]	; (19d58 <preempt+0x130>)
   19c2c:	68b3      	ldr	r3, [r6, #8]
{
   19c2e:	b08b      	sub	sp, #44	; 0x2c
	if (!event.curr.abort_cb || !event.curr.param) {
   19c30:	b1b3      	cbz	r3, 19c60 <preempt+0x38>
   19c32:	6833      	ldr	r3, [r6, #0]
   19c34:	b1a3      	cbz	r3, 19c60 <preempt+0x38>
		return;
	}

	idx = UINT8_MAX;
   19c36:	23ff      	movs	r3, #255	; 0xff
	next = ull_prepare_dequeue_iter(&idx);
   19c38:	f10d 000e 	add.w	r0, sp, #14
	idx = UINT8_MAX;
   19c3c:	f88d 300e 	strb.w	r3, [sp, #14]
	next = ull_prepare_dequeue_iter(&idx);
   19c40:	f7fa f9ee 	bl	14020 <ull_prepare_dequeue_iter>
	if (!next) {
   19c44:	4604      	mov	r4, r0
   19c46:	b158      	cbz	r0, 19c60 <preempt+0x38>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   19c48:	f894 3020 	ldrb.w	r3, [r4, #32]
   19c4c:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   19c50:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
   19c54:	d006      	beq.n	19c64 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   19c56:	f7fa f9e3 	bl	14020 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   19c5a:	4604      	mov	r4, r0
   19c5c:	2800      	cmp	r0, #0
   19c5e:	d1f3      	bne.n	19c48 <preempt+0x20>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   19c60:	b00b      	add	sp, #44	; 0x2c
   19c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   19c64:	ab05      	add	r3, sp, #20
   19c66:	e9d6 2700 	ldrd	r2, r7, [r6]
   19c6a:	69e1      	ldr	r1, [r4, #28]
   19c6c:	68e0      	ldr	r0, [r4, #12]
   19c6e:	9300      	str	r3, [sp, #0]
   19c70:	ab04      	add	r3, sp, #16
   19c72:	47b8      	blx	r7
	if (!ret) {
   19c74:	4607      	mov	r7, r0
   19c76:	2800      	cmp	r0, #0
   19c78:	d062      	beq.n	19d40 <preempt+0x118>
	event.curr.abort_cb(NULL, event.curr.param);
   19c7a:	68b3      	ldr	r3, [r6, #8]
   19c7c:	6831      	ldr	r1, [r6, #0]
   19c7e:	4628      	mov	r0, r5
   19c80:	4798      	blx	r3
	if (ret == -EAGAIN) {
   19c82:	f117 0f0b 	cmn.w	r7, #11
   19c86:	d01a      	beq.n	19cbe <preempt+0x96>
		LL_ASSERT(ret == -ECANCELED);
   19c88:	3748      	adds	r7, #72	; 0x48
   19c8a:	d011      	beq.n	19cb0 <preempt+0x88>
   19c8c:	4a33      	ldr	r2, [pc, #204]	; (19d5c <preempt+0x134>)
   19c8e:	4934      	ldr	r1, [pc, #208]	; (19d60 <preempt+0x138>)
   19c90:	4834      	ldr	r0, [pc, #208]	; (19d64 <preempt+0x13c>)
   19c92:	f240 23ff 	movw	r3, #767	; 0x2ff
   19c96:	f005 fd2e 	bl	1f6f6 <printk>
   19c9a:	4040      	eors	r0, r0
   19c9c:	f380 8811 	msr	BASEPRI, r0
   19ca0:	f04f 0003 	mov.w	r0, #3
   19ca4:	df02      	svc	2
   19ca6:	e003      	b.n	19cb0 <preempt+0x88>
	} while (next->is_aborted || next->is_resume);
   19ca8:	f890 3020 	ldrb.w	r3, [r0, #32]
   19cac:	079b      	lsls	r3, r3, #30
   19cae:	d041      	beq.n	19d34 <preempt+0x10c>
		next = ull_prepare_dequeue_iter(&idx);
   19cb0:	f10d 000e 	add.w	r0, sp, #14
   19cb4:	f7fa f9b4 	bl	14020 <ull_prepare_dequeue_iter>
		if (!next) {
   19cb8:	2800      	cmp	r0, #0
   19cba:	d1f5      	bne.n	19ca8 <preempt+0x80>
   19cbc:	e7d0      	b.n	19c60 <preempt+0x38>
		iter_idx = UINT8_MAX;
   19cbe:	23ff      	movs	r3, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   19cc0:	f10d 000f 	add.w	r0, sp, #15
		iter_idx = UINT8_MAX;
   19cc4:	f88d 300f 	strb.w	r3, [sp, #15]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   19cc8:	f7fa f9aa 	bl	14020 <ull_prepare_dequeue_iter>
		while (iter) {
   19ccc:	bb48      	cbnz	r0, 19d22 <preempt+0xfa>
	prepare_param.param = event.curr.param;
   19cce:	6832      	ldr	r2, [r6, #0]
		ret = resume_enqueue(resume_cb, resume_prio);
   19cd0:	9b05      	ldr	r3, [sp, #20]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   19cd2:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   19cd4:	9209      	str	r2, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   19cd6:	2301      	movs	r3, #1
	event.curr.param = NULL;
   19cd8:	2200      	movs	r2, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   19cda:	9301      	str	r3, [sp, #4]
	event.curr.param = NULL;
   19cdc:	6032      	str	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   19cde:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   19ce2:	9b04      	ldr	r3, [sp, #16]
   19ce4:	aa06      	add	r2, sp, #24
   19ce6:	f7fa f955 	bl	13f94 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   19cea:	2800      	cmp	r0, #0
   19cec:	d0e0      	beq.n	19cb0 <preempt+0x88>
   19cee:	4a1b      	ldr	r2, [pc, #108]	; (19d5c <preempt+0x134>)
   19cf0:	491d      	ldr	r1, [pc, #116]	; (19d68 <preempt+0x140>)
   19cf2:	481c      	ldr	r0, [pc, #112]	; (19d64 <preempt+0x13c>)
   19cf4:	f240 23fd 	movw	r3, #765	; 0x2fd
   19cf8:	f005 fcfd 	bl	1f6f6 <printk>
   19cfc:	4040      	eors	r0, r0
   19cfe:	f380 8811 	msr	BASEPRI, r0
   19d02:	f04f 0003 	mov.w	r0, #3
   19d06:	df02      	svc	2
   19d08:	e7d2      	b.n	19cb0 <preempt+0x88>
				iter->is_aborted = 1;
   19d0a:	f043 0302 	orr.w	r3, r3, #2
   19d0e:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   19d12:	6983      	ldr	r3, [r0, #24]
   19d14:	4798      	blx	r3
			iter = ull_prepare_dequeue_iter(&iter_idx);
   19d16:	f10d 000f 	add.w	r0, sp, #15
   19d1a:	f7fa f981 	bl	14020 <ull_prepare_dequeue_iter>
		while (iter) {
   19d1e:	2800      	cmp	r0, #0
   19d20:	d0d5      	beq.n	19cce <preempt+0xa6>
			if (!iter->is_aborted &&
   19d22:	f890 3020 	ldrb.w	r3, [r0, #32]
   19d26:	079a      	lsls	r2, r3, #30
   19d28:	d4f5      	bmi.n	19d16 <preempt+0xee>
			    event.curr.param == iter->prepare_param.param) {
   19d2a:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   19d2c:	6831      	ldr	r1, [r6, #0]
   19d2e:	4291      	cmp	r1, r2
   19d30:	d1f1      	bne.n	19d16 <preempt+0xee>
   19d32:	e7ea      	b.n	19d0a <preempt+0xe2>
	preempt_ticker_start(&next->prepare_param);
   19d34:	68c1      	ldr	r1, [r0, #12]
   19d36:	6800      	ldr	r0, [r0, #0]
   19d38:	f7ff feb6 	bl	19aa8 <preempt_ticker_start.isra.0>
}
   19d3c:	b00b      	add	sp, #44	; 0x2c
   19d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   19d40:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   19d44:	69a2      	ldr	r2, [r4, #24]
   19d46:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   19d48:	f043 0302 	orr.w	r3, r3, #2
   19d4c:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   19d50:	4620      	mov	r0, r4
   19d52:	4790      	blx	r2
		goto preempt_next;
   19d54:	e7ac      	b.n	19cb0 <preempt+0x88>
   19d56:	bf00      	nop
   19d58:	2000254c 	.word	0x2000254c
   19d5c:	00026468 	.word	0x00026468
   19d60:	000264f8 	.word	0x000264f8
   19d64:	00025984 	.word	0x00025984
   19d68:	00025c48 	.word	0x00025c48

00019d6c <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   19d6c:	2200      	movs	r2, #0
{
   19d6e:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   19d70:	4611      	mov	r1, r2
   19d72:	4b0a      	ldr	r3, [pc, #40]	; (19d9c <preempt_ticker_cb+0x30>)
   19d74:	2001      	movs	r0, #1
   19d76:	f7f5 fcdd 	bl	f734 <mayfly_enqueue>
	LL_ASSERT(!ret);
   19d7a:	b900      	cbnz	r0, 19d7e <preempt_ticker_cb+0x12>
}
   19d7c:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   19d7e:	4a08      	ldr	r2, [pc, #32]	; (19da0 <preempt_ticker_cb+0x34>)
   19d80:	4908      	ldr	r1, [pc, #32]	; (19da4 <preempt_ticker_cb+0x38>)
   19d82:	4809      	ldr	r0, [pc, #36]	; (19da8 <preempt_ticker_cb+0x3c>)
   19d84:	f240 23c1 	movw	r3, #705	; 0x2c1
   19d88:	f005 fcb5 	bl	1f6f6 <printk>
   19d8c:	4040      	eors	r0, r0
   19d8e:	f380 8811 	msr	BASEPRI, r0
   19d92:	f04f 0003 	mov.w	r0, #3
   19d96:	df02      	svc	2
}
   19d98:	bd08      	pop	{r3, pc}
   19d9a:	bf00      	nop
   19d9c:	20000508 	.word	0x20000508
   19da0:	00026468 	.word	0x00026468
   19da4:	00025c48 	.word	0x00025c48
   19da8:	00025984 	.word	0x00025984

00019dac <lll_init>:
{
   19dac:	b510      	push	{r4, lr}
   19dae:	4815      	ldr	r0, [pc, #84]	; (19e04 <lll_init+0x58>)
   19db0:	f004 f95a 	bl	1e068 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   19db4:	4b14      	ldr	r3, [pc, #80]	; (19e08 <lll_init+0x5c>)
   19db6:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   19db8:	b300      	cbz	r0, 19dfc <lll_init+0x50>
	event.curr.abort_cb = NULL;
   19dba:	4b14      	ldr	r3, [pc, #80]	; (19e0c <lll_init+0x60>)
   19dbc:	2400      	movs	r4, #0
   19dbe:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   19dc0:	f000 fa20 	bl	1a204 <lll_clock_init>
	if (err < 0) {
   19dc4:	2800      	cmp	r0, #0
   19dc6:	db18      	blt.n	19dfa <lll_init+0x4e>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   19dc8:	4622      	mov	r2, r4
   19dca:	4621      	mov	r1, r4
   19dcc:	2001      	movs	r0, #1
   19dce:	f7ec fcf3 	bl	67b8 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   19dd2:	4622      	mov	r2, r4
   19dd4:	4621      	mov	r1, r4
   19dd6:	200b      	movs	r0, #11
   19dd8:	f7ec fcee 	bl	67b8 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   19ddc:	4622      	mov	r2, r4
   19dde:	4621      	mov	r1, r4
   19de0:	2018      	movs	r0, #24
   19de2:	f7ec fce9 	bl	67b8 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   19de6:	2001      	movs	r0, #1
   19de8:	f7ec fcb4 	bl	6754 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   19dec:	200b      	movs	r0, #11
   19dee:	f7ec fcb1 	bl	6754 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   19df2:	2018      	movs	r0, #24
   19df4:	f7ec fcae 	bl	6754 <arch_irq_enable>
	return 0;
   19df8:	4620      	mov	r0, r4
}
   19dfa:	bd10      	pop	{r4, pc}
		return -ENODEV;
   19dfc:	f06f 0012 	mvn.w	r0, #18
}
   19e00:	bd10      	pop	{r4, pc}
   19e02:	bf00      	nop
   19e04:	00026504 	.word	0x00026504
   19e08:	20002548 	.word	0x20002548
   19e0c:	2000254c 	.word	0x2000254c

00019e10 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   19e10:	4a04      	ldr	r2, [pc, #16]	; (19e24 <lll_csrand_get+0x14>)
{
   19e12:	b410      	push	{r4}
   19e14:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   19e16:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   19e18:	6884      	ldr	r4, [r0, #8]
   19e1a:	b28a      	uxth	r2, r1
   19e1c:	4619      	mov	r1, r3
   19e1e:	6823      	ldr	r3, [r4, #0]
}
   19e20:	bc10      	pop	{r4}
   19e22:	4718      	bx	r3
   19e24:	20002548 	.word	0x20002548

00019e28 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   19e28:	4b08      	ldr	r3, [pc, #32]	; (19e4c <lll_csrand_isr_get+0x24>)
   19e2a:	681b      	ldr	r3, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   19e2c:	689a      	ldr	r2, [r3, #8]
{
   19e2e:	b410      	push	{r4}
   19e30:	6854      	ldr	r4, [r2, #4]
   19e32:	b134      	cbz	r4, 19e42 <lll_csrand_isr_get+0x1a>
   19e34:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   19e36:	46a4      	mov	ip, r4
   19e38:	4601      	mov	r1, r0
}
   19e3a:	bc10      	pop	{r4}
   19e3c:	4618      	mov	r0, r3
   19e3e:	2300      	movs	r3, #0
   19e40:	4760      	bx	ip
   19e42:	f06f 0022 	mvn.w	r0, #34	; 0x22
   19e46:	bc10      	pop	{r4}
   19e48:	4770      	bx	lr
   19e4a:	bf00      	nop
   19e4c:	20002548 	.word	0x20002548

00019e50 <lll_rand_isr_get>:
   19e50:	f7ff bfea 	b.w	19e28 <lll_csrand_isr_get>

00019e54 <lll_reset>:
}
   19e54:	2000      	movs	r0, #0
   19e56:	4770      	bx	lr

00019e58 <lll_prepare>:
{
   19e58:	b510      	push	{r4, lr}
   19e5a:	b082      	sub	sp, #8
   19e5c:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   19e5e:	9400      	str	r4, [sp, #0]
   19e60:	2400      	movs	r4, #0
   19e62:	9401      	str	r4, [sp, #4]
   19e64:	f7ff fe5a 	bl	19b1c <prepare>
}
   19e68:	b002      	add	sp, #8
   19e6a:	bd10      	pop	{r4, pc}

00019e6c <lll_resume>:
{
   19e6c:	b510      	push	{r4, lr}
   19e6e:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   19e70:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume);
   19e72:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   19e76:	69c3      	ldr	r3, [r0, #28]
   19e78:	6902      	ldr	r2, [r0, #16]
   19e7a:	f004 0401 	and.w	r4, r4, #1
   19e7e:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   19e82:	9401      	str	r4, [sp, #4]
   19e84:	f7ff fe4a 	bl	19b1c <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   19e88:	b108      	cbz	r0, 19e8e <lll_resume+0x22>
   19e8a:	3044      	adds	r0, #68	; 0x44
   19e8c:	d101      	bne.n	19e92 <lll_resume+0x26>
}
   19e8e:	b002      	add	sp, #8
   19e90:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   19e92:	4a07      	ldr	r2, [pc, #28]	; (19eb0 <lll_resume+0x44>)
   19e94:	4907      	ldr	r1, [pc, #28]	; (19eb4 <lll_resume+0x48>)
   19e96:	4808      	ldr	r0, [pc, #32]	; (19eb8 <lll_resume+0x4c>)
   19e98:	23e5      	movs	r3, #229	; 0xe5
   19e9a:	f005 fc2c 	bl	1f6f6 <printk>
   19e9e:	4040      	eors	r0, r0
   19ea0:	f380 8811 	msr	BASEPRI, r0
   19ea4:	f04f 0003 	mov.w	r0, #3
   19ea8:	df02      	svc	2
}
   19eaa:	b002      	add	sp, #8
   19eac:	bd10      	pop	{r4, pc}
   19eae:	bf00      	nop
   19eb0:	00026468 	.word	0x00026468
   19eb4:	00026508 	.word	0x00026508
   19eb8:	00025984 	.word	0x00025984

00019ebc <lll_disable>:
{
   19ebc:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   19ebe:	4604      	mov	r4, r0
{
   19ec0:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   19ec2:	2800      	cmp	r0, #0
   19ec4:	d035      	beq.n	19f32 <lll_disable+0x76>
   19ec6:	4b26      	ldr	r3, [pc, #152]	; (19f60 <lll_disable+0xa4>)
   19ec8:	681a      	ldr	r2, [r3, #0]
   19eca:	4282      	cmp	r2, r0
   19ecc:	d02b      	beq.n	19f26 <lll_disable+0x6a>
		idx = UINT8_MAX;
   19ece:	23ff      	movs	r3, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   19ed0:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   19ed4:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   19ed8:	f7fa f8a2 	bl	14020 <ull_prepare_dequeue_iter>
		while (next) {
   19edc:	4603      	mov	r3, r0
   19ede:	b940      	cbnz	r0, 19ef2 <lll_disable+0x36>
   19ee0:	e01f      	b.n	19f22 <lll_disable+0x66>
			    (!param || (param == next->prepare_param.param))) {
   19ee2:	4294      	cmp	r4, r2
   19ee4:	d00e      	beq.n	19f04 <lll_disable+0x48>
			next = ull_prepare_dequeue_iter(&idx);
   19ee6:	f10d 0007 	add.w	r0, sp, #7
   19eea:	f7fa f899 	bl	14020 <ull_prepare_dequeue_iter>
		while (next) {
   19eee:	4603      	mov	r3, r0
   19ef0:	b1b8      	cbz	r0, 19f22 <lll_disable+0x66>
			if (!next->is_aborted &&
   19ef2:	f893 2020 	ldrb.w	r2, [r3, #32]
   19ef6:	0792      	lsls	r2, r2, #30
   19ef8:	d4f5      	bmi.n	19ee6 <lll_disable+0x2a>
				next->is_aborted = 1;
   19efa:	68da      	ldr	r2, [r3, #12]
				next->abort_cb(&next->prepare_param,
   19efc:	4618      	mov	r0, r3
   19efe:	4611      	mov	r1, r2
			if (!next->is_aborted &&
   19f00:	2c00      	cmp	r4, #0
   19f02:	d1ee      	bne.n	19ee2 <lll_disable+0x26>
				next->is_aborted = 1;
   19f04:	f893 2020 	ldrb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   19f08:	699d      	ldr	r5, [r3, #24]
				next->is_aborted = 1;
   19f0a:	f042 0202 	orr.w	r2, r2, #2
   19f0e:	f883 2020 	strb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   19f12:	47a8      	blx	r5
			next = ull_prepare_dequeue_iter(&idx);
   19f14:	f10d 0007 	add.w	r0, sp, #7
   19f18:	f7fa f882 	bl	14020 <ull_prepare_dequeue_iter>
		while (next) {
   19f1c:	4603      	mov	r3, r0
   19f1e:	2800      	cmp	r0, #0
   19f20:	d1e7      	bne.n	19ef2 <lll_disable+0x36>
}
   19f22:	b003      	add	sp, #12
   19f24:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   19f26:	689b      	ldr	r3, [r3, #8]
   19f28:	b16b      	cbz	r3, 19f46 <lll_disable+0x8a>
   19f2a:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   19f2c:	2000      	movs	r0, #0
   19f2e:	4798      	blx	r3
   19f30:	e7cd      	b.n	19ece <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   19f32:	4a0b      	ldr	r2, [pc, #44]	; (19f60 <lll_disable+0xa4>)
   19f34:	6893      	ldr	r3, [r2, #8]
   19f36:	2b00      	cmp	r3, #0
   19f38:	d0c9      	beq.n	19ece <lll_disable+0x12>
   19f3a:	6811      	ldr	r1, [r2, #0]
   19f3c:	2900      	cmp	r1, #0
   19f3e:	d0c6      	beq.n	19ece <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   19f40:	2000      	movs	r0, #0
   19f42:	4798      	blx	r3
   19f44:	e7c3      	b.n	19ece <lll_disable+0x12>
			LL_ASSERT(!param);
   19f46:	4a07      	ldr	r2, [pc, #28]	; (19f64 <lll_disable+0xa8>)
   19f48:	4907      	ldr	r1, [pc, #28]	; (19f68 <lll_disable+0xac>)
   19f4a:	4808      	ldr	r0, [pc, #32]	; (19f6c <lll_disable+0xb0>)
   19f4c:	23ef      	movs	r3, #239	; 0xef
   19f4e:	f005 fbd2 	bl	1f6f6 <printk>
   19f52:	4040      	eors	r0, r0
   19f54:	f380 8811 	msr	BASEPRI, r0
   19f58:	f04f 0003 	mov.w	r0, #3
   19f5c:	df02      	svc	2
   19f5e:	e7b6      	b.n	19ece <lll_disable+0x12>
   19f60:	2000254c 	.word	0x2000254c
   19f64:	00026468 	.word	0x00026468
   19f68:	0002651c 	.word	0x0002651c
   19f6c:	00025984 	.word	0x00025984

00019f70 <lll_prepare_done>:
}
   19f70:	2000      	movs	r0, #0
   19f72:	4770      	bx	lr

00019f74 <lll_done>:
{
   19f74:	b510      	push	{r4, lr}
   19f76:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   19f78:	f7fa f844 	bl	14004 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   19f7c:	b13c      	cbz	r4, 19f8e <lll_done+0x1a>
   19f7e:	b320      	cbz	r0, 19fca <lll_done+0x56>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   19f80:	6820      	ldr	r0, [r4, #0]
   19f82:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   19f84:	f7fa f87a 	bl	1407c <ull_event_done>
	LL_ASSERT(evdone);
   19f88:	b180      	cbz	r0, 19fac <lll_done+0x38>
}
   19f8a:	2000      	movs	r0, #0
   19f8c:	bd10      	pop	{r4, pc}
		LL_ASSERT(event.curr.abort_cb);
   19f8e:	4c1d      	ldr	r4, [pc, #116]	; (1a004 <lll_done+0x90>)
   19f90:	68a3      	ldr	r3, [r4, #8]
   19f92:	b343      	cbz	r3, 19fe6 <lll_done+0x72>
		param = event.curr.param;
   19f94:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   19f96:	2300      	movs	r3, #0
   19f98:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   19f9a:	6023      	str	r3, [r4, #0]
		if (param) {
   19f9c:	2800      	cmp	r0, #0
   19f9e:	d0f1      	beq.n	19f84 <lll_done+0x10>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   19fa0:	6800      	ldr	r0, [r0, #0]
   19fa2:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   19fa4:	f7fa f86a 	bl	1407c <ull_event_done>
	LL_ASSERT(evdone);
   19fa8:	2800      	cmp	r0, #0
   19faa:	d1ee      	bne.n	19f8a <lll_done+0x16>
   19fac:	4a16      	ldr	r2, [pc, #88]	; (1a008 <lll_done+0x94>)
   19fae:	4917      	ldr	r1, [pc, #92]	; (1a00c <lll_done+0x98>)
   19fb0:	4817      	ldr	r0, [pc, #92]	; (1a010 <lll_done+0x9c>)
   19fb2:	f44f 73a0 	mov.w	r3, #320	; 0x140
   19fb6:	f005 fb9e 	bl	1f6f6 <printk>
   19fba:	4040      	eors	r0, r0
   19fbc:	f380 8811 	msr	BASEPRI, r0
   19fc0:	f04f 0003 	mov.w	r0, #3
   19fc4:	df02      	svc	2
}
   19fc6:	2000      	movs	r0, #0
   19fc8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
   19fca:	4a0f      	ldr	r2, [pc, #60]	; (1a008 <lll_done+0x94>)
   19fcc:	4911      	ldr	r1, [pc, #68]	; (1a014 <lll_done+0xa0>)
   19fce:	4810      	ldr	r0, [pc, #64]	; (1a010 <lll_done+0x9c>)
   19fd0:	f44f 7391 	mov.w	r3, #290	; 0x122
   19fd4:	f005 fb8f 	bl	1f6f6 <printk>
   19fd8:	4040      	eors	r0, r0
   19fda:	f380 8811 	msr	BASEPRI, r0
   19fde:	f04f 0003 	mov.w	r0, #3
   19fe2:	df02      	svc	2
   19fe4:	e7cc      	b.n	19f80 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   19fe6:	4a08      	ldr	r2, [pc, #32]	; (1a008 <lll_done+0x94>)
   19fe8:	490b      	ldr	r1, [pc, #44]	; (1a018 <lll_done+0xa4>)
   19fea:	4809      	ldr	r0, [pc, #36]	; (1a010 <lll_done+0x9c>)
   19fec:	f44f 7394 	mov.w	r3, #296	; 0x128
   19ff0:	f005 fb81 	bl	1f6f6 <printk>
   19ff4:	4040      	eors	r0, r0
   19ff6:	f380 8811 	msr	BASEPRI, r0
   19ffa:	f04f 0003 	mov.w	r0, #3
   19ffe:	df02      	svc	2
   1a000:	e7c8      	b.n	19f94 <lll_done+0x20>
   1a002:	bf00      	nop
   1a004:	2000254c 	.word	0x2000254c
   1a008:	00026468 	.word	0x00026468
   1a00c:	00026548 	.word	0x00026548
   1a010:	00025984 	.word	0x00025984
   1a014:	00026524 	.word	0x00026524
   1a018:	00026534 	.word	0x00026534

0001a01c <lll_is_done>:
	return !event.curr.abort_cb;
   1a01c:	4b02      	ldr	r3, [pc, #8]	; (1a028 <lll_is_done+0xc>)
   1a01e:	6898      	ldr	r0, [r3, #8]
}
   1a020:	fab0 f080 	clz	r0, r0
   1a024:	0940      	lsrs	r0, r0, #5
   1a026:	4770      	bx	lr
   1a028:	2000254c 	.word	0x2000254c

0001a02c <lll_is_abort_cb>:
}
   1a02c:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1a030:	4770      	bx	lr
   1a032:	bf00      	nop

0001a034 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   1a034:	e9d0 2300 	ldrd	r2, r3, [r0]
   1a038:	2a00      	cmp	r2, #0
   1a03a:	db04      	blt.n	1a046 <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   1a03c:	429a      	cmp	r2, r3
   1a03e:	bf38      	it	cc
   1a040:	461a      	movcc	r2, r3
   1a042:	4610      	mov	r0, r2
}
   1a044:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   1a046:	6880      	ldr	r0, [r0, #8]
   1a048:	4298      	cmp	r0, r3
   1a04a:	bf38      	it	cc
   1a04c:	4618      	movcc	r0, r3
   1a04e:	4770      	bx	lr

0001a050 <lll_preempt_calc>:
{
   1a050:	b510      	push	{r4, lr}
   1a052:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1a054:	f7f7 f81e 	bl	11094 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   1a058:	4621      	mov	r1, r4
   1a05a:	f7f7 f81d 	bl	11098 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1a05e:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   1a060:	0203      	lsls	r3, r0, #8
   1a062:	d404      	bmi.n	1a06e <lll_preempt_calc+0x1e>
   1a064:	2809      	cmp	r0, #9
   1a066:	bf94      	ite	ls
   1a068:	2000      	movls	r0, #0
   1a06a:	2001      	movhi	r0, #1
}
   1a06c:	bd10      	pop	{r4, pc}
	return 0;
   1a06e:	2000      	movs	r0, #0
}
   1a070:	bd10      	pop	{r4, pc}
   1a072:	bf00      	nop

0001a074 <lll_chan_set>:
	switch (chan) {
   1a074:	2826      	cmp	r0, #38	; 0x26
{
   1a076:	b510      	push	{r4, lr}
   1a078:	4604      	mov	r4, r0
	switch (chan) {
   1a07a:	d01c      	beq.n	1a0b6 <lll_chan_set+0x42>
   1a07c:	2827      	cmp	r0, #39	; 0x27
   1a07e:	d012      	beq.n	1a0a6 <lll_chan_set+0x32>
   1a080:	2825      	cmp	r0, #37	; 0x25
   1a082:	d008      	beq.n	1a096 <lll_chan_set+0x22>
		if (chan < 11) {
   1a084:	280a      	cmp	r0, #10
   1a086:	d91e      	bls.n	1a0c6 <lll_chan_set+0x52>
		} else if (chan < 40) {
   1a088:	2827      	cmp	r0, #39	; 0x27
   1a08a:	d821      	bhi.n	1a0d0 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1a08c:	3003      	adds	r0, #3
   1a08e:	0040      	lsls	r0, r0, #1
   1a090:	f002 f9dc 	bl	1c44c <radio_freq_chan_set>
   1a094:	e002      	b.n	1a09c <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1a096:	2002      	movs	r0, #2
   1a098:	f002 f9d8 	bl	1c44c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1a09c:	4620      	mov	r0, r4
}
   1a09e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1a0a2:	f002 b9d9 	b.w	1c458 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1a0a6:	2050      	movs	r0, #80	; 0x50
   1a0a8:	f002 f9d0 	bl	1c44c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1a0ac:	4620      	mov	r0, r4
}
   1a0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1a0b2:	f002 b9d1 	b.w	1c458 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1a0b6:	201a      	movs	r0, #26
   1a0b8:	f002 f9c8 	bl	1c44c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1a0bc:	4620      	mov	r0, r4
}
   1a0be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1a0c2:	f002 b9c9 	b.w	1c458 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1a0c6:	3002      	adds	r0, #2
   1a0c8:	0040      	lsls	r0, r0, #1
   1a0ca:	f002 f9bf 	bl	1c44c <radio_freq_chan_set>
   1a0ce:	e7e5      	b.n	1a09c <lll_chan_set+0x28>
			LL_ASSERT(0);
   1a0d0:	4a06      	ldr	r2, [pc, #24]	; (1a0ec <lll_chan_set+0x78>)
   1a0d2:	4907      	ldr	r1, [pc, #28]	; (1a0f0 <lll_chan_set+0x7c>)
   1a0d4:	4807      	ldr	r0, [pc, #28]	; (1a0f4 <lll_chan_set+0x80>)
   1a0d6:	f240 13a3 	movw	r3, #419	; 0x1a3
   1a0da:	f005 fb0c 	bl	1f6f6 <printk>
   1a0de:	4040      	eors	r0, r0
   1a0e0:	f380 8811 	msr	BASEPRI, r0
   1a0e4:	f04f 0003 	mov.w	r0, #3
   1a0e8:	df02      	svc	2
   1a0ea:	e7d7      	b.n	1a09c <lll_chan_set+0x28>
   1a0ec:	00026468 	.word	0x00026468
   1a0f0:	000259f4 	.word	0x000259f4
   1a0f4:	00025984 	.word	0x00025984

0001a0f8 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   1a0f8:	f002 ba1c 	b.w	1c534 <radio_tx_ready_delay_get>

0001a0fc <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   1a0fc:	f002 ba26 	b.w	1c54c <radio_rx_ready_delay_get>

0001a100 <lll_isr_tx_status_reset>:
{
   1a100:	b508      	push	{r3, lr}
	radio_status_reset();
   1a102:	f002 fa57 	bl	1c5b4 <radio_status_reset>
}
   1a106:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1a10a:	f002 bb23 	b.w	1c754 <radio_tmr_status_reset>
   1a10e:	bf00      	nop

0001a110 <lll_isr_rx_status_reset>:
{
   1a110:	b508      	push	{r3, lr}
	radio_status_reset();
   1a112:	f002 fa4f 	bl	1c5b4 <radio_status_reset>
	radio_tmr_status_reset();
   1a116:	f002 fb1d 	bl	1c754 <radio_tmr_status_reset>
}
   1a11a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1a11e:	f002 bac9 	b.w	1c6b4 <radio_rssi_status_reset>
   1a122:	bf00      	nop

0001a124 <lll_isr_status_reset>:
{
   1a124:	b508      	push	{r3, lr}
	radio_status_reset();
   1a126:	f002 fa45 	bl	1c5b4 <radio_status_reset>
	radio_tmr_status_reset();
   1a12a:	f002 fb13 	bl	1c754 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1a12e:	f002 faf9 	bl	1c724 <radio_filter_status_reset>
	radio_ar_status_reset();
   1a132:	f002 fd27 	bl	1cb84 <radio_ar_status_reset>
}
   1a136:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1a13a:	f002 babb 	b.w	1c6b4 <radio_rssi_status_reset>
   1a13e:	bf00      	nop

0001a140 <lll_isr_cleanup>:
{
   1a140:	b508      	push	{r3, lr}
   1a142:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1a144:	4815      	ldr	r0, [pc, #84]	; (1a19c <lll_isr_cleanup+0x5c>)
   1a146:	f002 f909 	bl	1c35c <radio_isr_set>
	if (!radio_is_idle()) {
   1a14a:	f002 fa53 	bl	1c5f4 <radio_is_idle>
   1a14e:	b150      	cbz	r0, 1a166 <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   1a150:	f002 fbc8 	bl	1c8e4 <radio_tmr_stop>
	err = lll_hfclock_off();
   1a154:	f000 f888 	bl	1a268 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1a158:	2800      	cmp	r0, #0
   1a15a:	db0c      	blt.n	1a176 <lll_isr_cleanup+0x36>
}
   1a15c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1a160:	2000      	movs	r0, #0
   1a162:	f7ff bf07 	b.w	19f74 <lll_done>
		radio_disable();
   1a166:	f002 fa0d 	bl	1c584 <radio_disable>
	radio_tmr_stop();
   1a16a:	f002 fbbb 	bl	1c8e4 <radio_tmr_stop>
	err = lll_hfclock_off();
   1a16e:	f000 f87b 	bl	1a268 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1a172:	2800      	cmp	r0, #0
   1a174:	daf2      	bge.n	1a15c <lll_isr_cleanup+0x1c>
   1a176:	4a0a      	ldr	r2, [pc, #40]	; (1a1a0 <lll_isr_cleanup+0x60>)
   1a178:	490a      	ldr	r1, [pc, #40]	; (1a1a4 <lll_isr_cleanup+0x64>)
   1a17a:	480b      	ldr	r0, [pc, #44]	; (1a1a8 <lll_isr_cleanup+0x68>)
   1a17c:	f240 2306 	movw	r3, #518	; 0x206
   1a180:	f005 fab9 	bl	1f6f6 <printk>
   1a184:	4040      	eors	r0, r0
   1a186:	f380 8811 	msr	BASEPRI, r0
   1a18a:	f04f 0003 	mov.w	r0, #3
   1a18e:	df02      	svc	2
	lll_done(NULL);
   1a190:	2000      	movs	r0, #0
}
   1a192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1a196:	f7ff beed 	b.w	19f74 <lll_done>
   1a19a:	bf00      	nop
   1a19c:	00019a45 	.word	0x00019a45
   1a1a0:	00026468 	.word	0x00026468
   1a1a4:	00026550 	.word	0x00026550
   1a1a8:	00025984 	.word	0x00025984

0001a1ac <lll_isr_abort>:
{
   1a1ac:	b510      	push	{r4, lr}
   1a1ae:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1a1b0:	f7ff ffb8 	bl	1a124 <lll_isr_status_reset>
	lll_isr_cleanup(param);
   1a1b4:	4620      	mov	r0, r4
}
   1a1b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1a1ba:	f7ff bfc1 	b.w	1a140 <lll_isr_cleanup>
   1a1be:	bf00      	nop

0001a1c0 <clock_ready>:
	z_impl_k_sem_give(sem);
   1a1c0:	f101 0010 	add.w	r0, r1, #16
   1a1c4:	f004 bde2 	b.w	1ed8c <z_impl_k_sem_give>

0001a1c8 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1a1c8:	b570      	push	{r4, r5, r6, lr}
   1a1ca:	4604      	mov	r4, r0
   1a1cc:	b08a      	sub	sp, #40	; 0x28
   1a1ce:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a1d0:	2201      	movs	r2, #1
   1a1d2:	2100      	movs	r1, #0
   1a1d4:	a804      	add	r0, sp, #16
   1a1d6:	f00a fb39 	bl	2484c <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1a1da:	4b09      	ldr	r3, [pc, #36]	; (1a200 <blocking_on+0x38>)
   1a1dc:	9301      	str	r3, [sp, #4]
   1a1de:	2600      	movs	r6, #0
   1a1e0:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1a1e2:	4620      	mov	r0, r4
   1a1e4:	4669      	mov	r1, sp
   1a1e6:	9302      	str	r3, [sp, #8]
   1a1e8:	9603      	str	r6, [sp, #12]
   1a1ea:	f005 fb00 	bl	1f7ee <onoff_request>
	if (err < 0) {
   1a1ee:	2800      	cmp	r0, #0
   1a1f0:	db04      	blt.n	1a1fc <blocking_on+0x34>
	return z_impl_k_sem_take(sem, timeout);
   1a1f2:	462a      	mov	r2, r5
   1a1f4:	4633      	mov	r3, r6
   1a1f6:	a804      	add	r0, sp, #16
   1a1f8:	f004 fdee 	bl	1edd8 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1a1fc:	b00a      	add	sp, #40	; 0x28
   1a1fe:	bd70      	pop	{r4, r5, r6, pc}
   1a200:	0001a1c1 	.word	0x0001a1c1

0001a204 <lll_clock_init>:

int lll_clock_init(void)
{
   1a204:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1a206:	2001      	movs	r0, #1
   1a208:	f7eb fe72 	bl	5ef0 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1a20c:	4904      	ldr	r1, [pc, #16]	; (1a220 <lll_clock_init+0x1c>)
   1a20e:	2401      	movs	r4, #1
   1a210:	2300      	movs	r3, #0
   1a212:	608c      	str	r4, [r1, #8]
   1a214:	60cb      	str	r3, [r1, #12]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1a216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a21a:	604b      	str	r3, [r1, #4]
	return onoff_request(mgr, &lf_cli);
   1a21c:	f005 bae7 	b.w	1f7ee <onoff_request>
   1a220:	20002564 	.word	0x20002564

0001a224 <lll_clock_wait>:

int lll_clock_wait(void)
{
   1a224:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1a226:	2001      	movs	r0, #1
   1a228:	f7eb fe62 	bl	5ef0 <z_nrf_clock_control_get_onoff>

	return blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
}
   1a22c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1a230:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   1a234:	f7ff bfc8 	b.w	1a1c8 <blocking_on>

0001a238 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1a238:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1a23a:	4b0a      	ldr	r3, [pc, #40]	; (1a264 <lll_hfclock_on+0x2c>)
   1a23c:	f3bf 8f5b 	dmb	ish
   1a240:	e853 2f00 	ldrex	r2, [r3]
   1a244:	1c51      	adds	r1, r2, #1
   1a246:	e843 1000 	strex	r0, r1, [r3]
   1a24a:	2800      	cmp	r0, #0
   1a24c:	d1f8      	bne.n	1a240 <lll_hfclock_on+0x8>
   1a24e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1a252:	2a00      	cmp	r2, #0
   1a254:	dd01      	ble.n	1a25a <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1a256:	2000      	movs	r0, #0
   1a258:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1a25a:	f7eb fe51 	bl	5f00 <z_nrf_clock_bt_ctlr_hf_request>
}
   1a25e:	2000      	movs	r0, #0
   1a260:	bd08      	pop	{r3, pc}
   1a262:	bf00      	nop
   1a264:	20002560 	.word	0x20002560

0001a268 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1a268:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1a26a:	4b0d      	ldr	r3, [pc, #52]	; (1a2a0 <lll_hfclock_off+0x38>)
   1a26c:	681a      	ldr	r2, [r3, #0]
   1a26e:	2a00      	cmp	r2, #0
   1a270:	dd12      	ble.n	1a298 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1a272:	f3bf 8f5b 	dmb	ish
   1a276:	e853 2f00 	ldrex	r2, [r3]
   1a27a:	1e51      	subs	r1, r2, #1
   1a27c:	e843 1000 	strex	r0, r1, [r3]
   1a280:	2800      	cmp	r0, #0
   1a282:	d1f8      	bne.n	1a276 <lll_hfclock_off+0xe>
   1a284:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1a288:	2a01      	cmp	r2, #1
   1a28a:	dd01      	ble.n	1a290 <lll_hfclock_off+0x28>
		return 0;
   1a28c:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1a28e:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   1a290:	f7eb fe4c 	bl	5f2c <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1a294:	2000      	movs	r0, #0
}
   1a296:	bd08      	pop	{r3, pc}
		return -EALREADY;
   1a298:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   1a29c:	bd08      	pop	{r3, pc}
   1a29e:	bf00      	nop
   1a2a0:	20002560 	.word	0x20002560

0001a2a4 <lll_clock_sca_local_get>:

uint8_t lll_clock_sca_local_get(void)
{
	return CLOCK_CONTROL_NRF_K32SRC_ACCURACY;
}
   1a2a4:	2007      	movs	r0, #7
   1a2a6:	4770      	bx	lr

0001a2a8 <lll_clock_ppm_local_get>:

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   1a2a8:	2014      	movs	r0, #20
   1a2aa:	4770      	bx	lr

0001a2ac <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   1a2ac:	4b01      	ldr	r3, [pc, #4]	; (1a2b4 <lll_clock_ppm_get+0x8>)
}
   1a2ae:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1a2b2:	4770      	bx	lr
   1a2b4:	0002657c 	.word	0x0002657c

0001a2b8 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   1a2b8:	b510      	push	{r4, lr}
   1a2ba:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   1a2bc:	f7ff ff32 	bl	1a124 <lll_isr_status_reset>

	radio_filter_disable();
   1a2c0:	f002 fa26 	bl	1c710 <radio_filter_disable>

	lll_isr_cleanup(param);
   1a2c4:	4620      	mov	r0, r4
}
   1a2c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1a2ca:	f7ff bf39 	b.w	1a140 <lll_isr_cleanup>
   1a2ce:	bf00      	nop

0001a2d0 <isr_tx>:
{
   1a2d0:	b530      	push	{r4, r5, lr}
   1a2d2:	b083      	sub	sp, #12
   1a2d4:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1a2d6:	f7ff ff13 	bl	1a100 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1a2da:	2096      	movs	r0, #150	; 0x96
   1a2dc:	f002 fa4a 	bl	1c774 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   1a2e0:	2300      	movs	r3, #0
   1a2e2:	461a      	mov	r2, r3
   1a2e4:	4619      	mov	r1, r3
   1a2e6:	4618      	mov	r0, r3
   1a2e8:	f002 f9ba 	bl	1c660 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   1a2ec:	f002 f9a6 	bl	1c63c <radio_pkt_scratch_get>
   1a2f0:	f002 f914 	bl	1c51c <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1a2f4:	f002 f96a 	bl	1c5cc <radio_is_ready>
   1a2f8:	b9d8      	cbnz	r0, 1a332 <isr_tx+0x62>
	radio_isr_set(isr_rx, param);
   1a2fa:	481e      	ldr	r0, [pc, #120]	; (1a374 <isr_tx+0xa4>)
   1a2fc:	4621      	mov	r1, r4
   1a2fe:	f002 f82d 	bl	1c35c <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1a302:	f7ff fb6d 	bl	199e0 <ull_filter_lll_rl_enabled>
   1a306:	bb48      	cbnz	r0, 1a35c <isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1a308:	f002 fb48 	bl	1c99c <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1a30c:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1a30e:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1a310:	4608      	mov	r0, r1
   1a312:	f002 f91d 	bl	1c550 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1a316:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1a318:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1a31a:	4608      	mov	r0, r1
   1a31c:	f002 f914 	bl	1c548 <radio_tx_chain_delay_get>
   1a320:	442c      	add	r4, r5
   1a322:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1a324:	1a20      	subs	r0, r4, r0
   1a326:	f002 faf1 	bl	1c90c <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
   1a32a:	f002 fb29 	bl	1c980 <radio_tmr_end_capture>
}
   1a32e:	b003      	add	sp, #12
   1a330:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!radio_is_ready());
   1a332:	4a11      	ldr	r2, [pc, #68]	; (1a378 <isr_tx+0xa8>)
   1a334:	4911      	ldr	r1, [pc, #68]	; (1a37c <isr_tx+0xac>)
   1a336:	4812      	ldr	r0, [pc, #72]	; (1a380 <isr_tx+0xb0>)
   1a338:	f240 235d 	movw	r3, #605	; 0x25d
   1a33c:	f005 f9db 	bl	1f6f6 <printk>
   1a340:	4040      	eors	r0, r0
   1a342:	f380 8811 	msr	BASEPRI, r0
   1a346:	f04f 0003 	mov.w	r0, #3
   1a34a:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   1a34c:	4809      	ldr	r0, [pc, #36]	; (1a374 <isr_tx+0xa4>)
   1a34e:	4621      	mov	r1, r4
   1a350:	f002 f804 	bl	1c35c <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1a354:	f7ff fb44 	bl	199e0 <ull_filter_lll_rl_enabled>
   1a358:	2800      	cmp	r0, #0
   1a35a:	d0d5      	beq.n	1a308 <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1a35c:	f10d 0007 	add.w	r0, sp, #7
   1a360:	f7ff f9a8 	bl	196b4 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1a364:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1a366:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1a368:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1a36c:	f002 fbca 	bl	1cb04 <radio_ar_configure>
   1a370:	e7ca      	b.n	1a308 <isr_tx+0x38>
   1a372:	bf00      	nop
   1a374:	0001a9dd 	.word	0x0001a9dd
   1a378:	0002658c 	.word	0x0002658c
   1a37c:	000265d8 	.word	0x000265d8
   1a380:	00025984 	.word	0x00025984

0001a384 <is_abort_cb>:
	if (next != curr) {
   1a384:	4282      	cmp	r2, r0
{
   1a386:	b508      	push	{r3, lr}
	if (next != curr) {
   1a388:	d011      	beq.n	1a3ae <is_abort_cb+0x2a>
		} else if (lll->is_hdcd) {
   1a38a:	7b12      	ldrb	r2, [r2, #12]
   1a38c:	07d2      	lsls	r2, r2, #31
   1a38e:	d402      	bmi.n	1a396 <is_abort_cb+0x12>
			return -ECANCELED;
   1a390:	f06f 0047 	mvn.w	r0, #71	; 0x47
}
   1a394:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   1a396:	4a14      	ldr	r2, [pc, #80]	; (1a3e8 <is_abort_cb+0x64>)
   1a398:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1a39a:	9a02      	ldr	r2, [sp, #8]
   1a39c:	2300      	movs	r3, #0
   1a39e:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   1a3a0:	f7ff ff4a 	bl	1a238 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1a3a4:	2800      	cmp	r0, #0
   1a3a6:	db0f      	blt.n	1a3c8 <is_abort_cb+0x44>
   1a3a8:	f06f 000a 	mvn.w	r0, #10
}
   1a3ac:	bd08      	pop	{r3, pc}
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1a3ae:	7c13      	ldrb	r3, [r2, #16]
   1a3b0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1a3b4:	6953      	ldr	r3, [r2, #20]
   1a3b6:	781b      	ldrb	r3, [r3, #0]
   1a3b8:	f003 030f 	and.w	r3, r3, #15
   1a3bc:	2b01      	cmp	r3, #1
		return 0;
   1a3be:	bf14      	ite	ne
   1a3c0:	f06f 0047 	mvnne.w	r0, #71	; 0x47
   1a3c4:	2000      	moveq	r0, #0
}
   1a3c6:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   1a3c8:	4a08      	ldr	r2, [pc, #32]	; (1a3ec <is_abort_cb+0x68>)
   1a3ca:	4909      	ldr	r1, [pc, #36]	; (1a3f0 <is_abort_cb+0x6c>)
   1a3cc:	4809      	ldr	r0, [pc, #36]	; (1a3f4 <is_abort_cb+0x70>)
   1a3ce:	f240 231b 	movw	r3, #539	; 0x21b
   1a3d2:	f005 f990 	bl	1f6f6 <printk>
   1a3d6:	4040      	eors	r0, r0
   1a3d8:	f380 8811 	msr	BASEPRI, r0
   1a3dc:	f04f 0003 	mov.w	r0, #3
   1a3e0:	df02      	svc	2
   1a3e2:	f06f 000a 	mvn.w	r0, #10
}
   1a3e6:	bd08      	pop	{r3, pc}
   1a3e8:	0001a885 	.word	0x0001a885
   1a3ec:	0002658c 	.word	0x0002658c
   1a3f0:	00026550 	.word	0x00026550
   1a3f4:	00025984 	.word	0x00025984

0001a3f8 <abort_cb>:
{
   1a3f8:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1a3fa:	b1d8      	cbz	r0, 1a434 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1a3fc:	460c      	mov	r4, r1
   1a3fe:	f7ff ff33 	bl	1a268 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1a402:	2800      	cmp	r0, #0
   1a404:	db04      	blt.n	1a410 <abort_cb+0x18>
	lll_done(param);
   1a406:	4620      	mov	r0, r4
}
   1a408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1a40c:	f7ff bdb2 	b.w	19f74 <lll_done>
	LL_ASSERT(err >= 0);
   1a410:	4a0c      	ldr	r2, [pc, #48]	; (1a444 <abort_cb+0x4c>)
   1a412:	490d      	ldr	r1, [pc, #52]	; (1a448 <abort_cb+0x50>)
   1a414:	480d      	ldr	r0, [pc, #52]	; (1a44c <abort_cb+0x54>)
   1a416:	f240 2341 	movw	r3, #577	; 0x241
   1a41a:	f005 f96c 	bl	1f6f6 <printk>
   1a41e:	4040      	eors	r0, r0
   1a420:	f380 8811 	msr	BASEPRI, r0
   1a424:	f04f 0003 	mov.w	r0, #3
   1a428:	df02      	svc	2
	lll_done(param);
   1a42a:	4620      	mov	r0, r4
}
   1a42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1a430:	f7ff bda0 	b.w	19f74 <lll_done>
		radio_isr_set(isr_abort, param);
   1a434:	4806      	ldr	r0, [pc, #24]	; (1a450 <abort_cb+0x58>)
   1a436:	f001 ff91 	bl	1c35c <radio_isr_set>
}
   1a43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1a43e:	f002 b8a1 	b.w	1c584 <radio_disable>
   1a442:	bf00      	nop
   1a444:	0002658c 	.word	0x0002658c
   1a448:	00026550 	.word	0x00026550
   1a44c:	00025984 	.word	0x00025984
   1a450:	0001a2b9 	.word	0x0001a2b9

0001a454 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1a454:	4b08      	ldr	r3, [pc, #32]	; (1a478 <lll_adv_init+0x24>)
{
   1a456:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1a458:	1d18      	adds	r0, r3, #4
   1a45a:	2205      	movs	r2, #5
   1a45c:	2128      	movs	r1, #40	; 0x28
   1a45e:	f7f5 f863 	bl	f528 <mem_init>
	MFIFO_INIT(pdu_free);
   1a462:	4b06      	ldr	r3, [pc, #24]	; (1a47c <lll_adv_init+0x28>)
   1a464:	2400      	movs	r4, #0
   1a466:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a468:	2203      	movs	r2, #3
   1a46a:	4621      	mov	r1, r4
   1a46c:	4804      	ldr	r0, [pc, #16]	; (1a480 <lll_adv_init+0x2c>)
   1a46e:	f00a f9ed 	bl	2484c <z_impl_k_sem_init>
}
   1a472:	4620      	mov	r0, r4
   1a474:	bd10      	pop	{r4, pc}
   1a476:	bf00      	nop
   1a478:	20002574 	.word	0x20002574
   1a47c:	20000518 	.word	0x20000518
   1a480:	20002640 	.word	0x20002640

0001a484 <lll_adv_reset>:
   1a484:	f7ff bfe6 	b.w	1a454 <lll_adv_init>

0001a488 <lll_adv_data_init>:
{
   1a488:	b510      	push	{r4, lr}
   1a48a:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   1a48c:	4804      	ldr	r0, [pc, #16]	; (1a4a0 <lll_adv_data_init+0x18>)
   1a48e:	f7f5 f879 	bl	f584 <mem_acquire>
	if (!p) {
   1a492:	b110      	cbz	r0, 1a49a <lll_adv_data_init+0x12>
	pdu->pdu[0] = (void *)p;
   1a494:	6060      	str	r0, [r4, #4]
	return 0;
   1a496:	2000      	movs	r0, #0
}
   1a498:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1a49a:	f06f 000b 	mvn.w	r0, #11
}
   1a49e:	bd10      	pop	{r4, pc}
   1a4a0:	20002574 	.word	0x20002574

0001a4a4 <lll_adv_data_reset>:
{
   1a4a4:	4603      	mov	r3, r0
	pdu->first = 0U;
   1a4a6:	2000      	movs	r0, #0
   1a4a8:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   1a4aa:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   1a4ac:	6098      	str	r0, [r3, #8]
}
   1a4ae:	4770      	bx	lr

0001a4b0 <lll_adv_pdu_alloc>:
{
   1a4b0:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   1a4b2:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   1a4b4:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   1a4b6:	429a      	cmp	r2, r3
   1a4b8:	d006      	beq.n	1a4c8 <lll_adv_pdu_alloc+0x18>
		pdu->last = first;
   1a4ba:	b2d4      	uxtb	r4, r2
   1a4bc:	7044      	strb	r4, [r0, #1]
  __ASM volatile ("dsb 0xF":::"memory");
   1a4be:	f3bf 8f4f 	dsb	sy
		first_latest = pdu->first;
   1a4c2:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   1a4c4:	4294      	cmp	r4, r2
   1a4c6:	d003      	beq.n	1a4d0 <lll_adv_pdu_alloc+0x20>
		last++;
   1a4c8:	3301      	adds	r3, #1
   1a4ca:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1a4cc:	2b02      	cmp	r3, #2
   1a4ce:	d007      	beq.n	1a4e0 <lll_adv_pdu_alloc+0x30>
	*idx = last;
   1a4d0:	461c      	mov	r4, r3
   1a4d2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1a4d6:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1a4d8:	6865      	ldr	r5, [r4, #4]
	if (p) {
   1a4da:	b14d      	cbz	r5, 1a4f0 <lll_adv_pdu_alloc+0x40>
}
   1a4dc:	4628      	mov	r0, r5
   1a4de:	bd70      	pop	{r4, r5, r6, pc}
{
   1a4e0:	2400      	movs	r4, #0
			last = 0U;
   1a4e2:	4623      	mov	r3, r4
	*idx = last;
   1a4e4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1a4e8:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1a4ea:	6865      	ldr	r5, [r4, #4]
	if (p) {
   1a4ec:	2d00      	cmp	r5, #0
   1a4ee:	d1f5      	bne.n	1a4dc <lll_adv_pdu_alloc+0x2c>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   1a4f0:	4e33      	ldr	r6, [pc, #204]	; (1a5c0 <lll_adv_pdu_alloc+0x110>)
   1a4f2:	78b2      	ldrb	r2, [r6, #2]
	if (first == last) {
   1a4f4:	78f1      	ldrb	r1, [r6, #3]
   1a4f6:	7833      	ldrb	r3, [r6, #0]
   1a4f8:	4291      	cmp	r1, r2
   1a4fa:	d003      	beq.n	1a504 <lll_adv_pdu_alloc+0x54>
	return *((void **)(fifo + first * size));
   1a4fc:	fb02 6303 	mla	r3, r2, r3, r6
   1a500:	685d      	ldr	r5, [r3, #4]
	if (p) {
   1a502:	b93d      	cbnz	r5, 1a514 <lll_adv_pdu_alloc+0x64>
	p = mem_acquire(&mem_pdu.free);
   1a504:	482f      	ldr	r0, [pc, #188]	; (1a5c4 <lll_adv_pdu_alloc+0x114>)
   1a506:	f7f5 f83d 	bl	f584 <mem_acquire>
	if (p) {
   1a50a:	4605      	mov	r5, r0
   1a50c:	b1a8      	cbz	r0, 1a53a <lll_adv_pdu_alloc+0x8a>
	pdu->pdu[last] = (void *)p;
   1a50e:	6065      	str	r5, [r4, #4]
}
   1a510:	4628      	mov	r0, r5
   1a512:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
   1a514:	482c      	ldr	r0, [pc, #176]	; (1a5c8 <lll_adv_pdu_alloc+0x118>)
   1a516:	2200      	movs	r2, #0
   1a518:	2300      	movs	r3, #0
   1a51a:	f004 fc5d 	bl	1edd8 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1a51e:	2800      	cmp	r0, #0
   1a520:	d133      	bne.n	1a58a <lll_adv_pdu_alloc+0xda>
	uint8_t _first = *first; /* Copy read-index */
   1a522:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   1a524:	78f2      	ldrb	r2, [r6, #3]
		MFIFO_DEQUEUE(pdu_free);
   1a526:	7871      	ldrb	r1, [r6, #1]
   1a528:	429a      	cmp	r2, r3
   1a52a:	d0f0      	beq.n	1a50e <lll_adv_pdu_alloc+0x5e>
	_first += 1U;
   1a52c:	3301      	adds	r3, #1
   1a52e:	b2db      	uxtb	r3, r3
		_first = 0U;
   1a530:	4299      	cmp	r1, r3
   1a532:	bf08      	it	eq
   1a534:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1a536:	70b3      	strb	r3, [r6, #2]

	return mem;
   1a538:	e7e9      	b.n	1a50e <lll_adv_pdu_alloc+0x5e>
   1a53a:	4823      	ldr	r0, [pc, #140]	; (1a5c8 <lll_adv_pdu_alloc+0x118>)
   1a53c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a544:	f004 fc48 	bl	1edd8 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   1a548:	2800      	cmp	r0, #0
   1a54a:	d12b      	bne.n	1a5a4 <lll_adv_pdu_alloc+0xf4>
	uint8_t _first = *first; /* Copy read-index */
   1a54c:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   1a54e:	78f1      	ldrb	r1, [r6, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   1a550:	7832      	ldrb	r2, [r6, #0]
   1a552:	7870      	ldrb	r0, [r6, #1]
   1a554:	4299      	cmp	r1, r3
   1a556:	d00a      	beq.n	1a56e <lll_adv_pdu_alloc+0xbe>
	mem = *((void **)(fifo + _first * size));
   1a558:	fb03 6202 	mla	r2, r3, r2, r6
	_first += 1U;
   1a55c:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1a55e:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   1a560:	b2db      	uxtb	r3, r3
		_first = 0U;
   1a562:	4298      	cmp	r0, r3
   1a564:	bf08      	it	eq
   1a566:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1a568:	70b3      	strb	r3, [r6, #2]
	LL_ASSERT(p);
   1a56a:	2d00      	cmp	r5, #0
   1a56c:	d1cf      	bne.n	1a50e <lll_adv_pdu_alloc+0x5e>
   1a56e:	4a17      	ldr	r2, [pc, #92]	; (1a5cc <lll_adv_pdu_alloc+0x11c>)
   1a570:	4917      	ldr	r1, [pc, #92]	; (1a5d0 <lll_adv_pdu_alloc+0x120>)
   1a572:	4818      	ldr	r0, [pc, #96]	; (1a5d4 <lll_adv_pdu_alloc+0x124>)
   1a574:	23fa      	movs	r3, #250	; 0xfa
   1a576:	f005 f8be 	bl	1f6f6 <printk>
   1a57a:	4040      	eors	r0, r0
   1a57c:	f380 8811 	msr	BASEPRI, r0
   1a580:	f04f 0003 	mov.w	r0, #3
   1a584:	df02      	svc	2
   1a586:	2500      	movs	r5, #0
   1a588:	e7c1      	b.n	1a50e <lll_adv_pdu_alloc+0x5e>
		LL_ASSERT(!err);
   1a58a:	4a10      	ldr	r2, [pc, #64]	; (1a5cc <lll_adv_pdu_alloc+0x11c>)
   1a58c:	4912      	ldr	r1, [pc, #72]	; (1a5d8 <lll_adv_pdu_alloc+0x128>)
   1a58e:	4811      	ldr	r0, [pc, #68]	; (1a5d4 <lll_adv_pdu_alloc+0x124>)
   1a590:	23e7      	movs	r3, #231	; 0xe7
   1a592:	f005 f8b0 	bl	1f6f6 <printk>
   1a596:	4040      	eors	r0, r0
   1a598:	f380 8811 	msr	BASEPRI, r0
   1a59c:	f04f 0003 	mov.w	r0, #3
   1a5a0:	df02      	svc	2
   1a5a2:	e7be      	b.n	1a522 <lll_adv_pdu_alloc+0x72>
	LL_ASSERT(!err);
   1a5a4:	4a09      	ldr	r2, [pc, #36]	; (1a5cc <lll_adv_pdu_alloc+0x11c>)
   1a5a6:	490c      	ldr	r1, [pc, #48]	; (1a5d8 <lll_adv_pdu_alloc+0x128>)
   1a5a8:	480a      	ldr	r0, [pc, #40]	; (1a5d4 <lll_adv_pdu_alloc+0x124>)
   1a5aa:	23f7      	movs	r3, #247	; 0xf7
   1a5ac:	f005 f8a3 	bl	1f6f6 <printk>
   1a5b0:	4040      	eors	r0, r0
   1a5b2:	f380 8811 	msr	BASEPRI, r0
   1a5b6:	f04f 0003 	mov.w	r0, #3
   1a5ba:	df02      	svc	2
   1a5bc:	e7c6      	b.n	1a54c <lll_adv_pdu_alloc+0x9c>
   1a5be:	bf00      	nop
   1a5c0:	20000518 	.word	0x20000518
   1a5c4:	20002574 	.word	0x20002574
   1a5c8:	20002640 	.word	0x20002640
   1a5cc:	0002658c 	.word	0x0002658c
   1a5d0:	000265ec 	.word	0x000265ec
   1a5d4:	00025984 	.word	0x00025984
   1a5d8:	00025c3c 	.word	0x00025c3c

0001a5dc <lll_adv_pdu_latest_get>:
{
   1a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a5de:	4604      	mov	r4, r0
	first = pdu->first;
   1a5e0:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   1a5e2:	7840      	ldrb	r0, [r0, #1]
   1a5e4:	4298      	cmp	r0, r3
   1a5e6:	d029      	beq.n	1a63c <lll_adv_pdu_latest_get+0x60>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   1a5e8:	4d1d      	ldr	r5, [pc, #116]	; (1a660 <lll_adv_pdu_latest_get+0x84>)
   1a5ea:	b2da      	uxtb	r2, r3
	last = last + 1;
   1a5ec:	78eb      	ldrb	r3, [r5, #3]
	if (last == count) {
   1a5ee:	786e      	ldrb	r6, [r5, #1]
   1a5f0:	78a8      	ldrb	r0, [r5, #2]
	last = last + 1;
   1a5f2:	3301      	adds	r3, #1
   1a5f4:	b2db      	uxtb	r3, r3
		last = 0U;
   1a5f6:	429e      	cmp	r6, r3
   1a5f8:	bf08      	it	eq
   1a5fa:	2300      	moveq	r3, #0
	if (last == first) {
   1a5fc:	4298      	cmp	r0, r3
   1a5fe:	d01f      	beq.n	1a640 <lll_adv_pdu_latest_get+0x64>
		first += 1U;
   1a600:	1c50      	adds	r0, r2, #1
   1a602:	b2c0      	uxtb	r0, r0
		if (first == DOUBLE_BUFFER_SIZE) {
   1a604:	2802      	cmp	r0, #2
   1a606:	bf04      	itt	eq
   1a608:	2600      	moveq	r6, #0
			first = 0U;
   1a60a:	4630      	moveq	r0, r6
		*is_modified = 1U;
   1a60c:	f04f 0701 	mov.w	r7, #1
		pdu->first = first;
   1a610:	7020      	strb	r0, [r4, #0]
		*is_modified = 1U;
   1a612:	700f      	strb	r7, [r1, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1a614:	7829      	ldrb	r1, [r5, #0]
   1a616:	bf18      	it	ne
   1a618:	4606      	movne	r6, r0
   1a61a:	78e8      	ldrb	r0, [r5, #3]
   1a61c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1a620:	fb00 5101 	mla	r1, r0, r1, r5
		pdu->pdu[pdu_idx] = NULL;
   1a624:	2700      	movs	r7, #0
		p = pdu->pdu[pdu_idx];
   1a626:	6850      	ldr	r0, [r2, #4]
		pdu->pdu[pdu_idx] = NULL;
   1a628:	6057      	str	r7, [r2, #4]
   1a62a:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1a62c:	70eb      	strb	r3, [r5, #3]
	z_impl_k_sem_give(sem);
   1a62e:	480d      	ldr	r0, [pc, #52]	; (1a664 <lll_adv_pdu_latest_get+0x88>)
   1a630:	f004 fbac 	bl	1ed8c <z_impl_k_sem_give>
	return (void *)pdu->pdu[first];
   1a634:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   1a638:	6860      	ldr	r0, [r4, #4]
}
   1a63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a63c:	4606      	mov	r6, r0
   1a63e:	e7f9      	b.n	1a634 <lll_adv_pdu_latest_get+0x58>
			LL_ASSERT(false);
   1a640:	4a09      	ldr	r2, [pc, #36]	; (1a668 <lll_adv_pdu_latest_get+0x8c>)
   1a642:	490a      	ldr	r1, [pc, #40]	; (1a66c <lll_adv_pdu_latest_get+0x90>)
   1a644:	480a      	ldr	r0, [pc, #40]	; (1a670 <lll_adv_pdu_latest_get+0x94>)
   1a646:	f240 130d 	movw	r3, #269	; 0x10d
   1a64a:	f005 f854 	bl	1f6f6 <printk>
   1a64e:	4040      	eors	r0, r0
   1a650:	f380 8811 	msr	BASEPRI, r0
   1a654:	f04f 0003 	mov.w	r0, #3
   1a658:	df02      	svc	2
   1a65a:	2000      	movs	r0, #0
}
   1a65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a65e:	bf00      	nop
   1a660:	20000518 	.word	0x20000518
   1a664:	20002640 	.word	0x20002640
   1a668:	0002658c 	.word	0x0002658c
   1a66c:	000259f4 	.word	0x000259f4
   1a670:	00025984 	.word	0x00025984

0001a674 <chan_prepare>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1a674:	7b03      	ldrb	r3, [r0, #12]
{
   1a676:	b530      	push	{r4, r5, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   1a678:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1a67c:	2b00      	cmp	r3, #0
{
   1a67e:	4604      	mov	r4, r0
   1a680:	fa93 f0a3 	rbit	r0, r3
   1a684:	fab0 f080 	clz	r0, r0
   1a688:	bf08      	it	eq
   1a68a:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   1a68e:	1c45      	adds	r5, r0, #1
{
   1a690:	b083      	sub	sp, #12
	LL_ASSERT(chan);
   1a692:	d03f      	beq.n	1a714 <chan_prepare+0xa0>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1a694:	7b22      	ldrb	r2, [r4, #12]
   1a696:	1e59      	subs	r1, r3, #1
   1a698:	400b      	ands	r3, r1
   1a69a:	f363 1206 	bfi	r2, r3, #4, #3

	lll_chan_set(36 + chan);
   1a69e:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1a6a2:	7322      	strb	r2, [r4, #12]
	lll_chan_set(36 + chan);
   1a6a4:	f7ff fce6 	bl	1a074 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   1a6a8:	2300      	movs	r3, #0
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   1a6aa:	f10d 0107 	add.w	r1, sp, #7
   1a6ae:	f104 0010 	add.w	r0, r4, #16
   1a6b2:	f88d 3007 	strb.w	r3, [sp, #7]
   1a6b6:	f7ff ff91 	bl	1a5dc <lll_adv_pdu_latest_get>
   1a6ba:	4605      	mov	r5, r0
	pdu = lll_adv_data_latest_get(lll, &upd);

	radio_pkt_tx_set(pdu);
   1a6bc:	f001 ff34 	bl	1c528 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1a6c0:	782b      	ldrb	r3, [r5, #0]
   1a6c2:	f003 030f 	and.w	r3, r3, #15
   1a6c6:	2b02      	cmp	r3, #2
   1a6c8:	d01b      	beq.n	1a702 <chan_prepare+0x8e>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   1a6ca:	f10d 0107 	add.w	r1, sp, #7
   1a6ce:	f104 001c 	add.w	r0, r4, #28
   1a6d2:	f7ff ff83 	bl	1a5dc <lll_adv_pdu_latest_get>
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   1a6d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1a6da:	b963      	cbnz	r3, 1a6f6 <chan_prepare+0x82>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1a6dc:	4621      	mov	r1, r4
   1a6de:	4816      	ldr	r0, [pc, #88]	; (1a738 <chan_prepare+0xc4>)
   1a6e0:	f001 fe3c 	bl	1c35c <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1a6e4:	2096      	movs	r0, #150	; 0x96
   1a6e6:	f002 f845 	bl	1c774 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1a6ea:	2000      	movs	r0, #0
   1a6ec:	f001 ffaa 	bl	1c644 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   1a6f0:	4628      	mov	r0, r5
   1a6f2:	b003      	add	sp, #12
   1a6f4:	bd30      	pop	{r4, r5, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   1a6f6:	2206      	movs	r2, #6
   1a6f8:	1ca9      	adds	r1, r5, #2
   1a6fa:	3002      	adds	r0, #2
   1a6fc:	f007 f873 	bl	217e6 <memcpy>
   1a700:	e7ec      	b.n	1a6dc <chan_prepare+0x68>
		radio_isr_set(isr_done, lll);
   1a702:	480e      	ldr	r0, [pc, #56]	; (1a73c <chan_prepare+0xc8>)
   1a704:	4621      	mov	r1, r4
   1a706:	f001 fe29 	bl	1c35c <radio_isr_set>
		radio_switch_complete_and_disable();
   1a70a:	f001 ffb5 	bl	1c678 <radio_switch_complete_and_disable>
}
   1a70e:	4628      	mov	r0, r5
   1a710:	b003      	add	sp, #12
   1a712:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(chan);
   1a714:	4a0a      	ldr	r2, [pc, #40]	; (1a740 <chan_prepare+0xcc>)
   1a716:	490b      	ldr	r1, [pc, #44]	; (1a744 <chan_prepare+0xd0>)
   1a718:	480b      	ldr	r0, [pc, #44]	; (1a748 <chan_prepare+0xd4>)
   1a71a:	f240 3356 	movw	r3, #854	; 0x356
   1a71e:	f004 ffea 	bl	1f6f6 <printk>
   1a722:	4040      	eors	r0, r0
   1a724:	f380 8811 	msr	BASEPRI, r0
   1a728:	f04f 0003 	mov.w	r0, #3
   1a72c:	df02      	svc	2
   1a72e:	7b23      	ldrb	r3, [r4, #12]
   1a730:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1a734:	e7ae      	b.n	1a694 <chan_prepare+0x20>
   1a736:	bf00      	nop
   1a738:	0001a2d1 	.word	0x0001a2d1
   1a73c:	0001a8ad 	.word	0x0001a8ad
   1a740:	0002658c 	.word	0x0002658c
   1a744:	00026240 	.word	0x00026240
   1a748:	00025984 	.word	0x00025984

0001a74c <prepare_cb>:
{
   1a74c:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   1a74e:	68c4      	ldr	r4, [r0, #12]

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   1a750:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   1a752:	f015 0501 	ands.w	r5, r5, #1
{
   1a756:	b083      	sub	sp, #12
	if (unlikely(lll_is_stop(lll))) {
   1a758:	d16e      	bne.n	1a838 <prepare_cb+0xec>
	radio_reset();
   1a75a:	4606      	mov	r6, r0
   1a75c:	f001 fe1e 	bl	1c39c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1a760:	4628      	mov	r0, r5
   1a762:	f001 fe6d 	bl	1c440 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1a766:	4629      	mov	r1, r5
   1a768:	4628      	mov	r0, r5
   1a76a:	f001 fe3d 	bl	1c3e8 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   1a76e:	462a      	mov	r2, r5
   1a770:	2125      	movs	r1, #37	; 0x25
   1a772:	2008      	movs	r0, #8
   1a774:	f001 fe9c 	bl	1c4b0 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1a778:	4b3b      	ldr	r3, [pc, #236]	; (1a868 <prepare_cb+0x11c>)
   1a77a:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   1a77c:	a801      	add	r0, sp, #4
   1a77e:	f001 fe7d 	bl	1c47c <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1a782:	493a      	ldr	r1, [pc, #232]	; (1a86c <prepare_cb+0x120>)
   1a784:	f240 605b 	movw	r0, #1627	; 0x65b
   1a788:	f001 ff3e 	bl	1c608 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1a78c:	7b23      	ldrb	r3, [r4, #12]
   1a78e:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1a792:	f362 1306 	bfi	r3, r2, #4, #3
   1a796:	7323      	strb	r3, [r4, #12]
	pdu = chan_prepare(lll);
   1a798:	4620      	mov	r0, r4
   1a79a:	f7ff ff6b 	bl	1a674 <chan_prepare>
	if (ull_filter_lll_rl_enabled()) {
   1a79e:	f7ff f91f 	bl	199e0 <ull_filter_lll_rl_enabled>
   1a7a2:	bb50      	cbnz	r0, 1a7fa <prepare_cb+0xae>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1a7a4:	7b63      	ldrb	r3, [r4, #13]
   1a7a6:	079b      	lsls	r3, r3, #30
   1a7a8:	d134      	bne.n	1a814 <prepare_cb+0xc8>
	evt = HDR_LLL2EVT(lll);
   1a7aa:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1a7ac:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1a7ae:	4638      	mov	r0, r7
   1a7b0:	f7ff fc40 	bl	1a034 <lll_evt_offset_get>
   1a7b4:	4405      	add	r5, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1a7b6:	6872      	ldr	r2, [r6, #4]
   1a7b8:	f105 0109 	add.w	r1, r5, #9
   1a7bc:	2001      	movs	r0, #1
   1a7be:	f001 ffe5 	bl	1c78c <radio_tmr_start>
	radio_tmr_end_capture();
   1a7c2:	f002 f8dd 	bl	1c980 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1a7c6:	4620      	mov	r0, r4
   1a7c8:	f7f9 ffd4 	bl	14774 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   1a7cc:	1c81      	adds	r1, r0, #2
   1a7ce:	462a      	mov	r2, r5
   1a7d0:	b2c9      	uxtb	r1, r1
   1a7d2:	4638      	mov	r0, r7
   1a7d4:	f7ff fc3c 	bl	1a050 <lll_preempt_calc>
   1a7d8:	b930      	cbnz	r0, 1a7e8 <prepare_cb+0x9c>
		ret = lll_prepare_done(lll);
   1a7da:	4620      	mov	r0, r4
   1a7dc:	f7ff fbc8 	bl	19f70 <lll_prepare_done>
		LL_ASSERT(!ret);
   1a7e0:	b9d0      	cbnz	r0, 1a818 <prepare_cb+0xcc>
}
   1a7e2:	2000      	movs	r0, #0
   1a7e4:	b003      	add	sp, #12
   1a7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   1a7e8:	4821      	ldr	r0, [pc, #132]	; (1a870 <prepare_cb+0x124>)
   1a7ea:	4621      	mov	r1, r4
   1a7ec:	f001 fdb6 	bl	1c35c <radio_isr_set>
		radio_disable();
   1a7f0:	f001 fec8 	bl	1c584 <radio_disable>
}
   1a7f4:	2000      	movs	r0, #0
   1a7f6:	b003      	add	sp, #12
   1a7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy));
   1a7fa:	7b60      	ldrb	r0, [r4, #13]
   1a7fc:	f010 0003 	ands.w	r0, r0, #3
   1a800:	bf18      	it	ne
   1a802:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
   1a804:	f7ff f84c 	bl	198a0 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1a808:	7841      	ldrb	r1, [r0, #1]
   1a80a:	1c82      	adds	r2, r0, #2
   1a80c:	7800      	ldrb	r0, [r0, #0]
   1a80e:	f001 ff63 	bl	1c6d8 <radio_filter_configure>
   1a812:	e7ca      	b.n	1a7aa <prepare_cb+0x5e>
		struct lll_filter *wl = ull_filter_lll_get(true);
   1a814:	2001      	movs	r0, #1
   1a816:	e7f5      	b.n	1a804 <prepare_cb+0xb8>
		LL_ASSERT(!ret);
   1a818:	4a16      	ldr	r2, [pc, #88]	; (1a874 <prepare_cb+0x128>)
   1a81a:	4917      	ldr	r1, [pc, #92]	; (1a878 <prepare_cb+0x12c>)
   1a81c:	4817      	ldr	r0, [pc, #92]	; (1a87c <prepare_cb+0x130>)
   1a81e:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
   1a822:	f004 ff68 	bl	1f6f6 <printk>
   1a826:	4040      	eors	r0, r0
   1a828:	f380 8811 	msr	BASEPRI, r0
   1a82c:	f04f 0003 	mov.w	r0, #3
   1a830:	df02      	svc	2
}
   1a832:	2000      	movs	r0, #0
   1a834:	b003      	add	sp, #12
   1a836:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = lll_hfclock_off();
   1a838:	f7ff fd16 	bl	1a268 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1a83c:	2800      	cmp	r0, #0
   1a83e:	db05      	blt.n	1a84c <prepare_cb+0x100>
		lll_done(NULL);
   1a840:	2000      	movs	r0, #0
   1a842:	f7ff fb97 	bl	19f74 <lll_done>
}
   1a846:	2000      	movs	r0, #0
   1a848:	b003      	add	sp, #12
   1a84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(err >= 0);
   1a84c:	4a09      	ldr	r2, [pc, #36]	; (1a874 <prepare_cb+0x128>)
   1a84e:	490c      	ldr	r1, [pc, #48]	; (1a880 <prepare_cb+0x134>)
   1a850:	480a      	ldr	r0, [pc, #40]	; (1a87c <prepare_cb+0x130>)
   1a852:	f240 1391 	movw	r3, #401	; 0x191
   1a856:	f004 ff4e 	bl	1f6f6 <printk>
   1a85a:	4040      	eors	r0, r0
   1a85c:	f380 8811 	msr	BASEPRI, r0
   1a860:	f04f 0003 	mov.w	r0, #3
   1a864:	df02      	svc	2
   1a866:	e7eb      	b.n	1a840 <prepare_cb+0xf4>
   1a868:	8e89bed6 	.word	0x8e89bed6
   1a86c:	00555555 	.word	0x00555555
   1a870:	0001a2b9 	.word	0x0001a2b9
   1a874:	0002658c 	.word	0x0002658c
   1a878:	00025c48 	.word	0x00025c48
   1a87c:	00025984 	.word	0x00025984
   1a880:	00026550 	.word	0x00026550

0001a884 <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   1a884:	68c3      	ldr	r3, [r0, #12]
{
   1a886:	b570      	push	{r4, r5, r6, lr}
	evt = HDR_LLL2EVT(p->param);
   1a888:	681e      	ldr	r6, [r3, #0]
{
   1a88a:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1a88c:	f7f6 fc02 	bl	11094 <ticker_ticks_now_get>
   1a890:	4605      	mov	r5, r0
   1a892:	4630      	mov	r0, r6
   1a894:	f7ff fbce 	bl	1a034 <lll_evt_offset_get>
	p->remainder = 0;
   1a898:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1a89a:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1a89c:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1a8a0:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1a8a2:	4620      	mov	r0, r4
}
   1a8a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1a8a8:	f7ff bf50 	b.w	1a74c <prepare_cb>

0001a8ac <isr_done>:
{
   1a8ac:	b510      	push	{r4, lr}
   1a8ae:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1a8b0:	f7ff fc38 	bl	1a124 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   1a8b4:	7b23      	ldrb	r3, [r4, #12]
   1a8b6:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1a8ba:	2a01      	cmp	r2, #1
   1a8bc:	d105      	bne.n	1a8ca <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1a8be:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1a8c2:	f362 1306 	bfi	r3, r2, #4, #3
   1a8c6:	7323      	strb	r3, [r4, #12]
   1a8c8:	b2db      	uxtb	r3, r3
	if (lll->chan_map_curr) {
   1a8ca:	f013 0f70 	tst.w	r3, #112	; 0x70
   1a8ce:	d106      	bne.n	1a8de <isr_done+0x32>
	radio_filter_disable();
   1a8d0:	f001 ff1e 	bl	1c710 <radio_filter_disable>
	lll_isr_cleanup(param);
   1a8d4:	4620      	mov	r0, r4
}
   1a8d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1a8da:	f7ff bc31 	b.w	1a140 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   1a8de:	4620      	mov	r0, r4
   1a8e0:	f7ff fec8 	bl	1a674 <chan_prepare>
		radio_tx_enable();
   1a8e4:	f001 fe48 	bl	1c578 <radio_tx_enable>
}
   1a8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1a8ec:	f002 b848 	b.w	1c980 <radio_tmr_end_capture>

0001a8f0 <lll_adv_prepare>:
{
   1a8f0:	b510      	push	{r4, lr}
   1a8f2:	b082      	sub	sp, #8
   1a8f4:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1a8f6:	f7ff fc9f 	bl	1a238 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1a8fa:	2800      	cmp	r0, #0
   1a8fc:	db1a      	blt.n	1a934 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1a8fe:	4a14      	ldr	r2, [pc, #80]	; (1a950 <lll_adv_prepare+0x60>)
   1a900:	4914      	ldr	r1, [pc, #80]	; (1a954 <lll_adv_prepare+0x64>)
   1a902:	4815      	ldr	r0, [pc, #84]	; (1a958 <lll_adv_prepare+0x68>)
   1a904:	9400      	str	r4, [sp, #0]
   1a906:	2300      	movs	r3, #0
   1a908:	f7ff faa6 	bl	19e58 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a90c:	b108      	cbz	r0, 1a912 <lll_adv_prepare+0x22>
   1a90e:	3044      	adds	r0, #68	; 0x44
   1a910:	d101      	bne.n	1a916 <lll_adv_prepare+0x26>
}
   1a912:	b002      	add	sp, #8
   1a914:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1a916:	4a11      	ldr	r2, [pc, #68]	; (1a95c <lll_adv_prepare+0x6c>)
   1a918:	4911      	ldr	r1, [pc, #68]	; (1a960 <lll_adv_prepare+0x70>)
   1a91a:	4812      	ldr	r0, [pc, #72]	; (1a964 <lll_adv_prepare+0x74>)
   1a91c:	f240 132d 	movw	r3, #301	; 0x12d
   1a920:	f004 fee9 	bl	1f6f6 <printk>
   1a924:	4040      	eors	r0, r0
   1a926:	f380 8811 	msr	BASEPRI, r0
   1a92a:	f04f 0003 	mov.w	r0, #3
   1a92e:	df02      	svc	2
}
   1a930:	b002      	add	sp, #8
   1a932:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1a934:	4a09      	ldr	r2, [pc, #36]	; (1a95c <lll_adv_prepare+0x6c>)
   1a936:	490c      	ldr	r1, [pc, #48]	; (1a968 <lll_adv_prepare+0x78>)
   1a938:	480a      	ldr	r0, [pc, #40]	; (1a964 <lll_adv_prepare+0x74>)
   1a93a:	f44f 7395 	mov.w	r3, #298	; 0x12a
   1a93e:	f004 feda 	bl	1f6f6 <printk>
   1a942:	4040      	eors	r0, r0
   1a944:	f380 8811 	msr	BASEPRI, r0
   1a948:	f04f 0003 	mov.w	r0, #3
   1a94c:	df02      	svc	2
   1a94e:	e7d6      	b.n	1a8fe <lll_adv_prepare+0xe>
   1a950:	0001a74d 	.word	0x0001a74d
   1a954:	0001a3f9 	.word	0x0001a3f9
   1a958:	0001a385 	.word	0x0001a385
   1a95c:	0002658c 	.word	0x0002658c
   1a960:	000265f0 	.word	0x000265f0
   1a964:	00025984 	.word	0x00025984
   1a968:	00026550 	.word	0x00026550

0001a96c <lll_adv_scan_req_check>:
{
   1a96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   1a970:	7b45      	ldrb	r5, [r0, #13]
{
   1a972:	f89d 8020 	ldrb.w	r8, [sp, #32]
   1a976:	4617      	mov	r7, r2
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1a978:	07ea      	lsls	r2, r5, #31
{
   1a97a:	4689      	mov	r9, r1
   1a97c:	461e      	mov	r6, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1a97e:	d50a      	bpl.n	1a996 <lll_adv_scan_req_check+0x2a>
		(((lll->filter_policy & 0x01) != 0) &&
   1a980:	f1b8 0f00 	cmp.w	r8, #0
   1a984:	d017      	beq.n	1a9b6 <lll_adv_scan_req_check+0x4a>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1a986:	f899 3000 	ldrb.w	r3, [r9]
   1a98a:	ebb7 1fd3 	cmp.w	r7, r3, lsr #7
   1a98e:	d019      	beq.n	1a9c4 <lll_adv_scan_req_check+0x58>
{
   1a990:	2000      	movs	r0, #0
}
   1a992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a996:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   1a998:	f811 0b02 	ldrb.w	r0, [r1], #2
   1a99c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a99e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a9a2:	f7fe ffbd 	bl	19920 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   1a9a6:	2800      	cmp	r0, #0
   1a9a8:	d1ed      	bne.n	1a986 <lll_adv_scan_req_check+0x1a>
		(((lll->filter_policy & 0x01) != 0) &&
   1a9aa:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   1a9ac:	07db      	lsls	r3, r3, #31
   1a9ae:	d5ef      	bpl.n	1a990 <lll_adv_scan_req_check+0x24>
		(((lll->filter_policy & 0x01) != 0) &&
   1a9b0:	f1b8 0f00 	cmp.w	r8, #0
   1a9b4:	d1e7      	bne.n	1a986 <lll_adv_scan_req_check+0x1a>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1a9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a9b8:	7818      	ldrb	r0, [r3, #0]
   1a9ba:	f7fe ff41 	bl	19840 <ull_filter_lll_irk_whitelisted>
   1a9be:	2800      	cmp	r0, #0
   1a9c0:	d1e1      	bne.n	1a986 <lll_adv_scan_req_check+0x1a>
   1a9c2:	e7e5      	b.n	1a990 <lll_adv_scan_req_check+0x24>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1a9c4:	f109 0108 	add.w	r1, r9, #8
   1a9c8:	4630      	mov	r0, r6
   1a9ca:	2206      	movs	r2, #6
   1a9cc:	f006 fefb 	bl	217c6 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   1a9d0:	fab0 f080 	clz	r0, r0
   1a9d4:	0940      	lsrs	r0, r0, #5
}
   1a9d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a9da:	bf00      	nop

0001a9dc <isr_rx>:
{
   1a9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a9e0:	b084      	sub	sp, #16
   1a9e2:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1a9e4:	f001 fdfc 	bl	1c5e0 <radio_is_done>
	if (trx_done) {
   1a9e8:	f010 0fff 	tst.w	r0, #255	; 0xff
   1a9ec:	d10a      	bne.n	1aa04 <isr_rx+0x28>
	lll_isr_status_reset();
   1a9ee:	f7ff fb99 	bl	1a124 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   1a9f2:	48b2      	ldr	r0, [pc, #712]	; (1acbc <isr_rx+0x2e0>)
   1a9f4:	4621      	mov	r1, r4
   1a9f6:	f001 fcb1 	bl	1c35c <radio_isr_set>
	radio_disable();
   1a9fa:	f001 fdc3 	bl	1c584 <radio_disable>
}
   1a9fe:	b004      	add	sp, #16
   1aa00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = radio_crc_is_valid();
   1aa04:	f001 fe0c 	bl	1c620 <radio_crc_is_valid>
   1aa08:	4606      	mov	r6, r0
		devmatch_ok = radio_filter_has_match();
   1aa0a:	f001 fe93 	bl	1c734 <radio_filter_has_match>
   1aa0e:	4680      	mov	r8, r0
		devmatch_id = radio_filter_match_get();
   1aa10:	f001 fe9a 	bl	1c748 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1aa14:	f002 f8cc 	bl	1cbb0 <radio_ar_has_match>
   1aa18:	4607      	mov	r7, r0
		irkmatch_id = radio_ar_match_get();
   1aa1a:	f002 f8ad 	bl	1cb78 <radio_ar_match_get>
   1aa1e:	4681      	mov	r9, r0
		rssi_ready = radio_rssi_is_ready();
   1aa20:	f001 fe50 	bl	1c6c4 <radio_rssi_is_ready>
	lll_isr_status_reset();
   1aa24:	f7ff fb7e 	bl	1a124 <lll_isr_status_reset>
	if (crc_ok) {
   1aa28:	f016 0fff 	tst.w	r6, #255	; 0xff
   1aa2c:	d0e1      	beq.n	1a9f2 <isr_rx+0x16>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1aa2e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   1aa32:	d17f      	bne.n	1ab34 <isr_rx+0x158>
   1aa34:	20ff      	movs	r0, #255	; 0xff
   1aa36:	f88d 000f 	strb.w	r0, [sp, #15]
	pdu_rx = (void *)radio_pkt_scratch_get();
   1aa3a:	f001 fdff 	bl	1c63c <radio_pkt_scratch_get>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1aa3e:	7c23      	ldrb	r3, [r4, #16]
   1aa40:	4606      	mov	r6, r0
   1aa42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1aa46:	7800      	ldrb	r0, [r0, #0]
   1aa48:	695d      	ldr	r5, [r3, #20]
   1aa4a:	f000 020f 	and.w	r2, r0, #15
   1aa4e:	2a03      	cmp	r2, #3
		devmatch_ok = radio_filter_has_match();
   1aa50:	fa5f f888 	uxtb.w	r8, r8
	addr = pdu_adv->adv_ind.addr;
   1aa54:	f105 0902 	add.w	r9, r5, #2
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1aa58:	d07f      	beq.n	1ab5a <isr_rx+0x17e>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1aa5a:	2a05      	cmp	r2, #5
   1aa5c:	d1c9      	bne.n	1a9f2 <isr_rx+0x16>
   1aa5e:	7873      	ldrb	r3, [r6, #1]
   1aa60:	2b22      	cmp	r3, #34	; 0x22
   1aa62:	d1c6      	bne.n	1a9f2 <isr_rx+0x16>
static inline bool isr_rx_ci_check(struct lll_adv *lll, struct pdu_adv *adv,
				   struct pdu_adv *ci, uint8_t devmatch_ok,
				   uint8_t *rl_idx)
{
	/* LL 4.3.2: filter policy shall be ignored for directed adv */
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1aa64:	782a      	ldrb	r2, [r5, #0]
   1aa66:	f002 020f 	and.w	r2, r2, #15
   1aa6a:	2a01      	cmp	r2, #1
   1aa6c:	f000 80b7 	beq.w	1abde <isr_rx+0x202>
		       isr_rx_ci_adva_check(adv, ci) &&
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	return ((((lll->filter_policy & 0x02) == 0) &&
   1aa70:	7b63      	ldrb	r3, [r4, #13]
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
						ci->connect_ind.init_addr,
						rl_idx)) ||
		(((lll->filter_policy & 0x02) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1aa72:	0799      	lsls	r1, r3, #30
   1aa74:	d563      	bpl.n	1ab3e <isr_rx+0x162>
		(((lll->filter_policy & 0x02) != 0) &&
   1aa76:	f1b8 0f00 	cmp.w	r8, #0
   1aa7a:	f000 80a8 	beq.w	1abce <isr_rx+0x1f2>
}

static inline bool isr_rx_ci_adva_check(struct pdu_adv *adv,
					struct pdu_adv *ci)
{
	return (adv->tx_addr == ci->rx_addr) &&
   1aa7e:	782b      	ldrb	r3, [r5, #0]
   1aa80:	7831      	ldrb	r1, [r6, #0]
   1aa82:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1aa86:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   1aa8a:	d1b2      	bne.n	1a9f2 <isr_rx+0x16>
   1aa8c:	f003 030f 	and.w	r3, r3, #15
   1aa90:	2b01      	cmp	r3, #1
   1aa92:	f106 0508 	add.w	r5, r6, #8
   1aa96:	f000 80cf 	beq.w	1ac38 <isr_rx+0x25c>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
			 BDADDR_SIZE)) ||
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   1aa9a:	4629      	mov	r1, r5
   1aa9c:	4648      	mov	r0, r9
   1aa9e:	2206      	movs	r2, #6
   1aaa0:	f006 fe91 	bl	217c6 <memcmp>
			 BDADDR_SIZE)) ||
   1aaa4:	fab0 f080 	clz	r0, r0
   1aaa8:	0940      	lsrs	r0, r0, #5
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1aaaa:	2800      	cmp	r0, #0
   1aaac:	d0a1      	beq.n	1a9f2 <isr_rx+0x16>
				   &rl_idx) &&
   1aaae:	68a3      	ldr	r3, [r4, #8]
   1aab0:	2b00      	cmp	r3, #0
   1aab2:	d09e      	beq.n	1a9f2 <isr_rx+0x16>
			rx = ull_pdu_rx_alloc_peek(4);
   1aab4:	2004      	movs	r0, #4
   1aab6:	f7f9 fa1f 	bl	13ef8 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   1aaba:	2800      	cmp	r0, #0
   1aabc:	d099      	beq.n	1a9f2 <isr_rx+0x16>
		radio_isr_set(isr_abort, lll);
   1aabe:	4880      	ldr	r0, [pc, #512]	; (1acc0 <isr_rx+0x2e4>)
   1aac0:	4621      	mov	r1, r4
   1aac2:	f001 fc4b 	bl	1c35c <radio_isr_set>
		radio_disable();
   1aac6:	f001 fd5d 	bl	1c584 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   1aaca:	f001 fd7f 	bl	1c5cc <radio_is_ready>
   1aace:	2800      	cmp	r0, #0
   1aad0:	d16f      	bne.n	1abb2 <isr_rx+0x1d6>
	int ret = !!hdr->is_stop;
   1aad2:	7923      	ldrb	r3, [r4, #4]
	hdr->is_stop = 1U;
   1aad4:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
   1aad8:	07db      	lsls	r3, r3, #31
   1aada:	7122      	strb	r2, [r4, #4]
   1aadc:	d45b      	bmi.n	1ab96 <isr_rx+0x1ba>
		rx = ull_pdu_rx_alloc();
   1aade:	f7f9 fa29 	bl	13f34 <ull_pdu_rx_alloc>
		rx->hdr.handle = 0xffff;
   1aae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx = ull_pdu_rx_alloc();
   1aae6:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1aae8:	2211      	movs	r2, #17
		rx->hdr.handle = 0xffff;
   1aaea:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   1aaec:	4631      	mov	r1, r6
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1aaee:	7102      	strb	r2, [r0, #4]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   1aaf0:	2224      	movs	r2, #36	; 0x24
   1aaf2:	301c      	adds	r0, #28
   1aaf4:	f006 fe77 	bl	217e6 <memcpy>
		ftr->param = lll;
   1aaf8:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   1aafa:	f001 feed 	bl	1c8d8 <radio_tmr_start_get>
   1aafe:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   1ab00:	f001 ff46 	bl	1c990 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   1ab04:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   1ab06:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   1ab08:	4608      	mov	r0, r1
   1ab0a:	f001 fd1d 	bl	1c548 <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1ab0e:	1a24      	subs	r4, r4, r0
   1ab10:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1ab12:	2f00      	cmp	r7, #0
   1ab14:	d03d      	beq.n	1ab92 <isr_rx+0x1b6>
   1ab16:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1ab1a:	76ab      	strb	r3, [r5, #26]
			ftr->extra = ull_pdu_rx_alloc();
   1ab1c:	f7f9 fa0a 	bl	13f34 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   1ab20:	4629      	mov	r1, r5
			ftr->extra = ull_pdu_rx_alloc();
   1ab22:	60e8      	str	r0, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   1ab24:	6828      	ldr	r0, [r5, #0]
   1ab26:	f7f9 fa1d 	bl	13f64 <ull_rx_put>
		ull_rx_sched();
   1ab2a:	f7f9 fa2b 	bl	13f84 <ull_rx_sched>
}
   1ab2e:	b004      	add	sp, #16
   1ab30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1ab34:	fa5f f089 	uxtb.w	r0, r9
   1ab38:	f7fe fe30 	bl	1979c <ull_filter_lll_rl_irk_idx>
   1ab3c:	e77b      	b.n	1aa36 <isr_rx+0x5a>
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1ab3e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1ab42:	f10d 020f 	add.w	r2, sp, #15
   1ab46:	1cb1      	adds	r1, r6, #2
   1ab48:	f7fe feea 	bl	19920 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   1ab4c:	2800      	cmp	r0, #0
   1ab4e:	d196      	bne.n	1aa7e <isr_rx+0xa2>
		(((lll->filter_policy & 0x02) != 0) &&
   1ab50:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   1ab52:	079a      	lsls	r2, r3, #30
   1ab54:	f57f af4d 	bpl.w	1a9f2 <isr_rx+0x16>
   1ab58:	e78d      	b.n	1aa76 <isr_rx+0x9a>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1ab5a:	7873      	ldrb	r3, [r6, #1]
   1ab5c:	2b0c      	cmp	r3, #12
   1ab5e:	f47f af48 	bne.w	1a9f2 <isr_rx+0x16>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   1ab62:	782a      	ldrb	r2, [r5, #0]
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1ab64:	f002 030f 	and.w	r3, r2, #15
   1ab68:	2b01      	cmp	r3, #1
   1ab6a:	f43f af42 	beq.w	1a9f2 <isr_rx+0x16>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1ab6e:	f10d 030f 	add.w	r3, sp, #15
   1ab72:	9301      	str	r3, [sp, #4]
   1ab74:	f8cd 8000 	str.w	r8, [sp]
   1ab78:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1ab7c:	464b      	mov	r3, r9
   1ab7e:	4631      	mov	r1, r6
   1ab80:	4620      	mov	r0, r4
   1ab82:	f7ff fef3 	bl	1a96c <lll_adv_scan_req_check>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   1ab86:	2800      	cmp	r0, #0
   1ab88:	d15f      	bne.n	1ac4a <isr_rx+0x26e>
   1ab8a:	7830      	ldrb	r0, [r6, #0]
   1ab8c:	f000 020f 	and.w	r2, r0, #15
   1ab90:	e763      	b.n	1aa5a <isr_rx+0x7e>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1ab92:	23ff      	movs	r3, #255	; 0xff
   1ab94:	e7c1      	b.n	1ab1a <isr_rx+0x13e>
		LL_ASSERT(!ret);
   1ab96:	4a4b      	ldr	r2, [pc, #300]	; (1acc4 <isr_rx+0x2e8>)
   1ab98:	494b      	ldr	r1, [pc, #300]	; (1acc8 <isr_rx+0x2ec>)
   1ab9a:	484c      	ldr	r0, [pc, #304]	; (1accc <isr_rx+0x2f0>)
   1ab9c:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1aba0:	f004 fda9 	bl	1f6f6 <printk>
   1aba4:	4040      	eors	r0, r0
   1aba6:	f380 8811 	msr	BASEPRI, r0
   1abaa:	f04f 0003 	mov.w	r0, #3
   1abae:	df02      	svc	2
   1abb0:	e795      	b.n	1aade <isr_rx+0x102>
		LL_ASSERT(!radio_is_ready());
   1abb2:	4a44      	ldr	r2, [pc, #272]	; (1acc4 <isr_rx+0x2e8>)
   1abb4:	4946      	ldr	r1, [pc, #280]	; (1acd0 <isr_rx+0x2f4>)
   1abb6:	4845      	ldr	r0, [pc, #276]	; (1accc <isr_rx+0x2f0>)
   1abb8:	f44f 7378 	mov.w	r3, #992	; 0x3e0
   1abbc:	f004 fd9b 	bl	1f6f6 <printk>
   1abc0:	4040      	eors	r0, r0
   1abc2:	f380 8811 	msr	BASEPRI, r0
   1abc6:	f04f 0003 	mov.w	r0, #3
   1abca:	df02      	svc	2
   1abcc:	e781      	b.n	1aad2 <isr_rx+0xf6>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1abce:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1abd2:	f7fe fe35 	bl	19840 <ull_filter_lll_irk_whitelisted>
   1abd6:	2800      	cmp	r0, #0
   1abd8:	f47f af51 	bne.w	1aa7e <isr_rx+0xa2>
   1abdc:	e709      	b.n	1a9f2 <isr_rx+0x16>
						      ci->connect_ind.init_addr,
   1abde:	f106 0802 	add.w	r8, r6, #2
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1abe2:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1abe6:	4641      	mov	r1, r8
   1abe8:	f10d 020f 	add.w	r2, sp, #15
   1abec:	f7fe fe98 	bl	19920 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(adv, ci) &&
   1abf0:	2800      	cmp	r0, #0
   1abf2:	f43f aefe 	beq.w	1a9f2 <isr_rx+0x16>
	return (adv->tx_addr == ci->rx_addr) &&
   1abf6:	782b      	ldrb	r3, [r5, #0]
   1abf8:	7831      	ldrb	r1, [r6, #0]
   1abfa:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1abfe:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   1ac02:	f47f aef6 	bne.w	1a9f2 <isr_rx+0x16>
   1ac06:	f003 030f 	and.w	r3, r3, #15
   1ac0a:	2b01      	cmp	r3, #1
   1ac0c:	f106 0a08 	add.w	sl, r6, #8
   1ac10:	d04c      	beq.n	1acac <isr_rx+0x2d0>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   1ac12:	4651      	mov	r1, sl
   1ac14:	4648      	mov	r0, r9
   1ac16:	2206      	movs	r2, #6
   1ac18:	f006 fdd5 	bl	217c6 <memcmp>
			 BDADDR_SIZE)) ||
   1ac1c:	2800      	cmp	r0, #0
   1ac1e:	f47f aee8 	bne.w	1a9f2 <isr_rx+0x16>
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
   1ac22:	f89d 000f 	ldrb.w	r0, [sp, #15]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   1ac26:	28ff      	cmp	r0, #255	; 0xff
   1ac28:	d02e      	beq.n	1ac88 <isr_rx+0x2ac>
   1ac2a:	7ba3      	ldrb	r3, [r4, #14]
   1ac2c:	2bff      	cmp	r3, #255	; 0xff
   1ac2e:	d02b      	beq.n	1ac88 <isr_rx+0x2ac>
		return rl_idx == lll->rl_idx;
   1ac30:	1ac5      	subs	r5, r0, r3
   1ac32:	4268      	negs	r0, r5
   1ac34:	4168      	adcs	r0, r5
   1ac36:	e738      	b.n	1aaaa <isr_rx+0xce>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   1ac38:	2206      	movs	r2, #6
   1ac3a:	4629      	mov	r1, r5
   1ac3c:	4648      	mov	r0, r9
   1ac3e:	f006 fdc2 	bl	217c6 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1ac42:	2800      	cmp	r0, #0
   1ac44:	f43f af33 	beq.w	1aaae <isr_rx+0xd2>
   1ac48:	e727      	b.n	1aa9a <isr_rx+0xbe>
		radio_isr_set(isr_done, lll);
   1ac4a:	4621      	mov	r1, r4
   1ac4c:	481b      	ldr	r0, [pc, #108]	; (1acbc <isr_rx+0x2e0>)
   1ac4e:	f001 fb85 	bl	1c35c <radio_isr_set>
		radio_switch_complete_and_disable();
   1ac52:	f001 fd11 	bl	1c678 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1ac56:	7f23      	ldrb	r3, [r4, #28]
   1ac58:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1ac5c:	6a20      	ldr	r0, [r4, #32]
   1ac5e:	f001 fc63 	bl	1c528 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1ac62:	f001 fcb3 	bl	1c5cc <radio_is_ready>
   1ac66:	2800      	cmp	r0, #0
   1ac68:	f43f aec9 	beq.w	1a9fe <isr_rx+0x22>
   1ac6c:	4a15      	ldr	r2, [pc, #84]	; (1acc4 <isr_rx+0x2e8>)
   1ac6e:	4918      	ldr	r1, [pc, #96]	; (1acd0 <isr_rx+0x2f4>)
   1ac70:	4816      	ldr	r0, [pc, #88]	; (1accc <isr_rx+0x2f0>)
   1ac72:	f240 33a3 	movw	r3, #931	; 0x3a3
   1ac76:	f004 fd3e 	bl	1f6f6 <printk>
   1ac7a:	4040      	eors	r0, r0
   1ac7c:	f380 8811 	msr	BASEPRI, r0
   1ac80:	f04f 0003 	mov.w	r0, #3
   1ac84:	df02      	svc	2
		if (!err) {
   1ac86:	e6ba      	b.n	1a9fe <isr_rx+0x22>
	return (adv->rx_addr == ci->tx_addr) &&
   1ac88:	7833      	ldrb	r3, [r6, #0]
   1ac8a:	782a      	ldrb	r2, [r5, #0]
   1ac8c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1ac90:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1ac94:	f47f aead 	bne.w	1a9f2 <isr_rx+0x16>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   1ac98:	4641      	mov	r1, r8
   1ac9a:	f105 0008 	add.w	r0, r5, #8
   1ac9e:	2206      	movs	r2, #6
   1aca0:	f006 fd91 	bl	217c6 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   1aca4:	fab0 f080 	clz	r0, r0
   1aca8:	0940      	lsrs	r0, r0, #5
		       isr_rx_ci_adva_check(adv, ci) &&
   1acaa:	e6fe      	b.n	1aaaa <isr_rx+0xce>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   1acac:	2206      	movs	r2, #6
   1acae:	4651      	mov	r1, sl
   1acb0:	4648      	mov	r0, r9
   1acb2:	f006 fd88 	bl	217c6 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1acb6:	2800      	cmp	r0, #0
   1acb8:	d0b3      	beq.n	1ac22 <isr_rx+0x246>
   1acba:	e7aa      	b.n	1ac12 <isr_rx+0x236>
   1acbc:	0001a8ad 	.word	0x0001a8ad
   1acc0:	0001a2b9 	.word	0x0001a2b9
   1acc4:	0002658c 	.word	0x0002658c
   1acc8:	00025c48 	.word	0x00025c48
   1accc:	00025984 	.word	0x00025984
   1acd0:	000265d8 	.word	0x000265d8

0001acd4 <ticker_stop_cb>:
{
   1acd4:	b508      	push	{r3, lr}
	radio_isr_set(isr_done_cleanup, param);
   1acd6:	4619      	mov	r1, r3
   1acd8:	4803      	ldr	r0, [pc, #12]	; (1ace8 <ticker_stop_cb+0x14>)
   1acda:	f001 fb3f 	bl	1c35c <radio_isr_set>
}
   1acde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_disable();
   1ace2:	f001 bc4f 	b.w	1c584 <radio_disable>
   1ace6:	bf00      	nop
   1ace8:	0001af41 	.word	0x0001af41

0001acec <prepare_cb>:
{
   1acec:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   1acee:	68c4      	ldr	r4, [r0, #12]
   1acf0:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   1acf2:	f015 0501 	ands.w	r5, r5, #1
{
   1acf6:	b08d      	sub	sp, #52	; 0x34
	if (unlikely(lll_is_stop(lll))) {
   1acf8:	f040 80ef 	bne.w	1aeda <prepare_cb+0x1ee>
	lll->state = 0U;
   1acfc:	7da3      	ldrb	r3, [r4, #22]
   1acfe:	f365 0300 	bfi	r3, r5, #0, #1
   1ad02:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   1ad04:	4606      	mov	r6, r0
   1ad06:	f001 fb49 	bl	1c39c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1ad0a:	4628      	mov	r0, r5
   1ad0c:	f001 fb98 	bl	1c440 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1ad10:	4629      	mov	r1, r5
   1ad12:	4628      	mov	r0, r5
   1ad14:	f001 fb68 	bl	1c3e8 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   1ad18:	462a      	mov	r2, r5
   1ad1a:	2125      	movs	r1, #37	; 0x25
   1ad1c:	2008      	movs	r0, #8
   1ad1e:	f001 fbc7 	bl	1c4b0 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1ad22:	2001      	movs	r0, #1
   1ad24:	f7f9 f8e8 	bl	13ef8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1ad28:	4605      	mov	r5, r0
   1ad2a:	2800      	cmp	r0, #0
   1ad2c:	f000 80c8 	beq.w	1aec0 <prepare_cb+0x1d4>
	radio_pkt_rx_set(node_rx->pdu);
   1ad30:	f105 001c 	add.w	r0, r5, #28
   1ad34:	f001 fbf2 	bl	1c51c <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1ad38:	4b73      	ldr	r3, [pc, #460]	; (1af08 <prepare_cb+0x21c>)
   1ad3a:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   1ad3c:	a80b      	add	r0, sp, #44	; 0x2c
   1ad3e:	f001 fb9d 	bl	1c47c <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1ad42:	4972      	ldr	r1, [pc, #456]	; (1af0c <prepare_cb+0x220>)
   1ad44:	f240 605b 	movw	r0, #1627	; 0x65b
   1ad48:	f001 fc5e 	bl	1c608 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   1ad4c:	7da0      	ldrb	r0, [r4, #22]
   1ad4e:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1ad52:	3025      	adds	r0, #37	; 0x25
   1ad54:	f7ff f98e 	bl	1a074 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   1ad58:	4621      	mov	r1, r4
   1ad5a:	486d      	ldr	r0, [pc, #436]	; (1af10 <prepare_cb+0x224>)
   1ad5c:	f001 fafe 	bl	1c35c <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1ad60:	2096      	movs	r0, #150	; 0x96
   1ad62:	f001 fd07 	bl	1c774 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1ad66:	2300      	movs	r3, #0
   1ad68:	461a      	mov	r2, r3
   1ad6a:	4619      	mov	r1, r3
   1ad6c:	4618      	mov	r0, r3
   1ad6e:	f001 fc77 	bl	1c660 <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   1ad72:	f7fe fe35 	bl	199e0 <ull_filter_lll_rl_enabled>
   1ad76:	2800      	cmp	r0, #0
   1ad78:	d13d      	bne.n	1adf6 <prepare_cb+0x10a>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1ad7a:	7da3      	ldrb	r3, [r4, #22]
   1ad7c:	f013 0f18 	tst.w	r3, #24
   1ad80:	f040 8082 	bne.w	1ae88 <prepare_cb+0x19c>
	evt = HDR_LLL2EVT(lll);
   1ad84:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1ad86:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1ad88:	4638      	mov	r0, r7
   1ad8a:	f7ff f953 	bl	1a034 <lll_evt_offset_get>
   1ad8e:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1ad90:	6872      	ldr	r2, [r6, #4]
   1ad92:	f105 0109 	add.w	r1, r5, #9
   1ad96:	2000      	movs	r0, #0
   1ad98:	f001 fcf8 	bl	1c78c <radio_tmr_start>
	radio_tmr_end_capture();
   1ad9c:	f001 fdf0 	bl	1c980 <radio_tmr_end_capture>
	radio_rssi_measure();
   1ada0:	f001 fc78 	bl	1c694 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   1ada4:	4620      	mov	r0, r4
   1ada6:	f7f9 fead 	bl	14b04 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_SCAN_BASE +
   1adaa:	1d01      	adds	r1, r0, #4
   1adac:	b2c9      	uxtb	r1, r1
   1adae:	4638      	mov	r0, r7
   1adb0:	462a      	mov	r2, r5
   1adb2:	f7ff f94d 	bl	1a050 <lll_preempt_calc>
   1adb6:	4601      	mov	r1, r0
   1adb8:	b9a0      	cbnz	r0, 1ade4 <prepare_cb+0xf8>
		if (lll->ticks_window) {
   1adba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1adbc:	bb93      	cbnz	r3, 1ae24 <prepare_cb+0x138>
		if (lll->conn) {
   1adbe:	68a3      	ldr	r3, [r4, #8]
   1adc0:	b143      	cbz	r3, 1add4 <prepare_cb+0xe8>
			mfy_after_mstr_offset_get.param = p;
   1adc2:	4b54      	ldr	r3, [pc, #336]	; (1af14 <prepare_cb+0x228>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   1adc4:	2201      	movs	r2, #1
   1adc6:	2102      	movs	r1, #2
   1adc8:	2000      	movs	r0, #0
			mfy_after_mstr_offset_get.param = p;
   1adca:	609e      	str	r6, [r3, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   1adcc:	f7f4 fcb2 	bl	f734 <mayfly_enqueue>
			LL_ASSERT(!retval);
   1add0:	2800      	cmp	r0, #0
   1add2:	d162      	bne.n	1ae9a <prepare_cb+0x1ae>
		ret = lll_prepare_done(lll);
   1add4:	4620      	mov	r0, r4
   1add6:	f7ff f8cb 	bl	19f70 <lll_prepare_done>
		LL_ASSERT(!ret);
   1adda:	2800      	cmp	r0, #0
   1addc:	d144      	bne.n	1ae68 <prepare_cb+0x17c>
}
   1adde:	2000      	movs	r0, #0
   1ade0:	b00d      	add	sp, #52	; 0x34
   1ade2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   1ade4:	484c      	ldr	r0, [pc, #304]	; (1af18 <prepare_cb+0x22c>)
   1ade6:	4621      	mov	r1, r4
   1ade8:	f001 fab8 	bl	1c35c <radio_isr_set>
		radio_disable();
   1adec:	f001 fbca 	bl	1c584 <radio_disable>
}
   1adf0:	2000      	movs	r0, #0
   1adf2:	b00d      	add	sp, #52	; 0x34
   1adf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy & 0x1));
   1adf6:	7da0      	ldrb	r0, [r4, #22]
   1adf8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1adfc:	f7fe fd50 	bl	198a0 <ull_filter_lll_get>
   1ae00:	4605      	mov	r5, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1ae02:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   1ae06:	f7fe fc55 	bl	196b4 <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   1ae0a:	7869      	ldrb	r1, [r5, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1ae0c:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
   1ae0e:	1caa      	adds	r2, r5, #2
   1ae10:	7828      	ldrb	r0, [r5, #0]
   1ae12:	f001 fc61 	bl	1c6d8 <radio_filter_configure>
		radio_ar_configure(count, irks, 0);
   1ae16:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   1ae1a:	4639      	mov	r1, r7
   1ae1c:	2200      	movs	r2, #0
   1ae1e:	f001 fe71 	bl	1cb04 <radio_ar_configure>
   1ae22:	e7af      	b.n	1ad84 <prepare_cb+0x98>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1ae24:	f44f 7286 	mov.w	r2, #268	; 0x10c
   1ae28:	9300      	str	r3, [sp, #0]
   1ae2a:	9208      	str	r2, [sp, #32]
   1ae2c:	4b3b      	ldr	r3, [pc, #236]	; (1af1c <prepare_cb+0x230>)
   1ae2e:	4a3c      	ldr	r2, [pc, #240]	; (1af20 <prepare_cb+0x234>)
   1ae30:	9307      	str	r3, [sp, #28]
   1ae32:	9205      	str	r2, [sp, #20]
   1ae34:	462b      	mov	r3, r5
   1ae36:	e9cd 0003 	strd	r0, r0, [sp, #12]
   1ae3a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1ae3e:	9406      	str	r4, [sp, #24]
   1ae40:	2203      	movs	r2, #3
   1ae42:	f7f6 f817 	bl	10e74 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1ae46:	f030 0302 	bics.w	r3, r0, #2
   1ae4a:	d0b8      	beq.n	1adbe <prepare_cb+0xd2>
   1ae4c:	4a35      	ldr	r2, [pc, #212]	; (1af24 <prepare_cb+0x238>)
   1ae4e:	4936      	ldr	r1, [pc, #216]	; (1af28 <prepare_cb+0x23c>)
   1ae50:	4836      	ldr	r0, [pc, #216]	; (1af2c <prepare_cb+0x240>)
   1ae52:	f240 130d 	movw	r3, #269	; 0x10d
   1ae56:	f004 fc4e 	bl	1f6f6 <printk>
   1ae5a:	4040      	eors	r0, r0
   1ae5c:	f380 8811 	msr	BASEPRI, r0
   1ae60:	f04f 0003 	mov.w	r0, #3
   1ae64:	df02      	svc	2
   1ae66:	e7aa      	b.n	1adbe <prepare_cb+0xd2>
		LL_ASSERT(!ret);
   1ae68:	4a2e      	ldr	r2, [pc, #184]	; (1af24 <prepare_cb+0x238>)
   1ae6a:	4931      	ldr	r1, [pc, #196]	; (1af30 <prepare_cb+0x244>)
   1ae6c:	482f      	ldr	r0, [pc, #188]	; (1af2c <prepare_cb+0x240>)
   1ae6e:	f44f 7393 	mov.w	r3, #294	; 0x126
   1ae72:	f004 fc40 	bl	1f6f6 <printk>
   1ae76:	4040      	eors	r0, r0
   1ae78:	f380 8811 	msr	BASEPRI, r0
   1ae7c:	f04f 0003 	mov.w	r0, #3
   1ae80:	df02      	svc	2
}
   1ae82:	2000      	movs	r0, #0
   1ae84:	b00d      	add	sp, #52	; 0x34
   1ae86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *wl = ull_filter_lll_get(true);
   1ae88:	2001      	movs	r0, #1
   1ae8a:	f7fe fd09 	bl	198a0 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1ae8e:	7841      	ldrb	r1, [r0, #1]
   1ae90:	1c82      	adds	r2, r0, #2
   1ae92:	7800      	ldrb	r0, [r0, #0]
   1ae94:	f001 fc20 	bl	1c6d8 <radio_filter_configure>
   1ae98:	e774      	b.n	1ad84 <prepare_cb+0x98>
			LL_ASSERT(!retval);
   1ae9a:	4a22      	ldr	r2, [pc, #136]	; (1af24 <prepare_cb+0x238>)
   1ae9c:	4925      	ldr	r1, [pc, #148]	; (1af34 <prepare_cb+0x248>)
   1ae9e:	4823      	ldr	r0, [pc, #140]	; (1af2c <prepare_cb+0x240>)
   1aea0:	f240 1321 	movw	r3, #289	; 0x121
   1aea4:	f004 fc27 	bl	1f6f6 <printk>
   1aea8:	4040      	eors	r0, r0
   1aeaa:	f380 8811 	msr	BASEPRI, r0
   1aeae:	f04f 0003 	mov.w	r0, #3
   1aeb2:	df02      	svc	2
		ret = lll_prepare_done(lll);
   1aeb4:	4620      	mov	r0, r4
   1aeb6:	f7ff f85b 	bl	19f70 <lll_prepare_done>
		LL_ASSERT(!ret);
   1aeba:	2800      	cmp	r0, #0
   1aebc:	d08f      	beq.n	1adde <prepare_cb+0xf2>
   1aebe:	e7d3      	b.n	1ae68 <prepare_cb+0x17c>
	LL_ASSERT(node_rx);
   1aec0:	4a18      	ldr	r2, [pc, #96]	; (1af24 <prepare_cb+0x238>)
   1aec2:	491d      	ldr	r1, [pc, #116]	; (1af38 <prepare_cb+0x24c>)
   1aec4:	4819      	ldr	r0, [pc, #100]	; (1af2c <prepare_cb+0x240>)
   1aec6:	23ac      	movs	r3, #172	; 0xac
   1aec8:	f004 fc15 	bl	1f6f6 <printk>
   1aecc:	4040      	eors	r0, r0
   1aece:	f380 8811 	msr	BASEPRI, r0
   1aed2:	f04f 0003 	mov.w	r0, #3
   1aed6:	df02      	svc	2
   1aed8:	e72a      	b.n	1ad30 <prepare_cb+0x44>
		err = lll_hfclock_off();
   1aeda:	f7ff f9c5 	bl	1a268 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1aede:	2800      	cmp	r0, #0
   1aee0:	db05      	blt.n	1aeee <prepare_cb+0x202>
		lll_done(NULL);
   1aee2:	2000      	movs	r0, #0
   1aee4:	f7ff f846 	bl	19f74 <lll_done>
}
   1aee8:	2000      	movs	r0, #0
   1aeea:	b00d      	add	sp, #52	; 0x34
   1aeec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(err >= 0);
   1aeee:	4a0d      	ldr	r2, [pc, #52]	; (1af24 <prepare_cb+0x238>)
   1aef0:	4912      	ldr	r1, [pc, #72]	; (1af3c <prepare_cb+0x250>)
   1aef2:	480e      	ldr	r0, [pc, #56]	; (1af2c <prepare_cb+0x240>)
   1aef4:	238d      	movs	r3, #141	; 0x8d
   1aef6:	f004 fbfe 	bl	1f6f6 <printk>
   1aefa:	4040      	eors	r0, r0
   1aefc:	f380 8811 	msr	BASEPRI, r0
   1af00:	f04f 0003 	mov.w	r0, #3
   1af04:	df02      	svc	2
   1af06:	e7ec      	b.n	1aee2 <prepare_cb+0x1f6>
   1af08:	8e89bed6 	.word	0x8e89bed6
   1af0c:	00555555 	.word	0x00555555
   1af10:	00003bb9 	.word	0x00003bb9
   1af14:	2000052c 	.word	0x2000052c
   1af18:	0001b255 	.word	0x0001b255
   1af1c:	0001b11d 	.word	0x0001b11d
   1af20:	0001acd5 	.word	0x0001acd5
   1af24:	00026614 	.word	0x00026614
   1af28:	00025ddc 	.word	0x00025ddc
   1af2c:	00025984 	.word	0x00025984
   1af30:	00025c48 	.word	0x00025c48
   1af34:	00025c78 	.word	0x00025c78
   1af38:	00026660 	.word	0x00026660
   1af3c:	00026550 	.word	0x00026550

0001af40 <isr_done_cleanup>:
{
   1af40:	b538      	push	{r3, r4, r5, lr}
   1af42:	4604      	mov	r4, r0
	if (lll_is_done(param)) {
   1af44:	f7ff f86a 	bl	1a01c <lll_is_done>
   1af48:	b100      	cbz	r0, 1af4c <isr_done_cleanup+0xc>
}
   1af4a:	bd38      	pop	{r3, r4, r5, pc}
	radio_filter_disable();
   1af4c:	4605      	mov	r5, r0
   1af4e:	f001 fbdf 	bl	1c710 <radio_filter_disable>
	if (++lll->chan == 3U) {
   1af52:	7da2      	ldrb	r2, [r4, #22]
   1af54:	f3c2 0341 	ubfx	r3, r2, #1, #2
   1af58:	3301      	adds	r3, #1
   1af5a:	f003 0303 	and.w	r3, r3, #3
   1af5e:	2b03      	cmp	r3, #3
   1af60:	bf14      	ite	ne
   1af62:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   1af66:	f365 0242 	bfieq	r2, r5, #1, #2
   1af6a:	75a2      	strb	r2, [r4, #22]
	lll_isr_cleanup(param);
   1af6c:	4620      	mov	r0, r4
}
   1af6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   1af72:	f7ff b8e5 	b.w	1a140 <lll_isr_cleanup>
   1af76:	bf00      	nop

0001af78 <isr_common_done>:
{
   1af78:	b530      	push	{r4, r5, lr}
   1af7a:	4604      	mov	r4, r0
   1af7c:	b083      	sub	sp, #12
	lll_isr_status_reset();
   1af7e:	f7ff f8d1 	bl	1a124 <lll_isr_status_reset>
	lll->state = 0U;
   1af82:	7da3      	ldrb	r3, [r4, #22]
   1af84:	f36f 0300 	bfc	r3, #0, #1
   1af88:	75a3      	strb	r3, [r4, #22]
	radio_tmr_tifs_set(EVENT_IFS_US);
   1af8a:	2096      	movs	r0, #150	; 0x96
   1af8c:	f001 fbf2 	bl	1c774 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1af90:	2300      	movs	r3, #0
   1af92:	4618      	mov	r0, r3
   1af94:	461a      	mov	r2, r3
   1af96:	4619      	mov	r1, r3
   1af98:	f001 fb62 	bl	1c660 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1af9c:	2001      	movs	r0, #1
   1af9e:	f7f8 ffab 	bl	13ef8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1afa2:	4605      	mov	r5, r0
   1afa4:	b1c8      	cbz	r0, 1afda <isr_common_done+0x62>
	radio_pkt_rx_set(node_rx->pdu);
   1afa6:	f105 001c 	add.w	r0, r5, #28
   1afaa:	f001 fab7 	bl	1c51c <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   1afae:	f7fe fd17 	bl	199e0 <ull_filter_lll_rl_enabled>
   1afb2:	b938      	cbnz	r0, 1afc4 <isr_common_done+0x4c>
	radio_rssi_measure();
   1afb4:	f001 fb6e 	bl	1c694 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1afb8:	480f      	ldr	r0, [pc, #60]	; (1aff8 <isr_common_done+0x80>)
   1afba:	4621      	mov	r1, r4
   1afbc:	f001 f9ce 	bl	1c35c <radio_isr_set>
}
   1afc0:	b003      	add	sp, #12
   1afc2:	bd30      	pop	{r4, r5, pc}
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1afc4:	f10d 0007 	add.w	r0, sp, #7
   1afc8:	f7fe fb74 	bl	196b4 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1afcc:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1afce:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1afd0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1afd4:	f001 fd96 	bl	1cb04 <radio_ar_configure>
   1afd8:	e7ec      	b.n	1afb4 <isr_common_done+0x3c>
	LL_ASSERT(node_rx);
   1afda:	4a08      	ldr	r2, [pc, #32]	; (1affc <isr_common_done+0x84>)
   1afdc:	4908      	ldr	r1, [pc, #32]	; (1b000 <isr_common_done+0x88>)
   1afde:	4809      	ldr	r0, [pc, #36]	; (1b004 <isr_common_done+0x8c>)
   1afe0:	f44f 730b 	mov.w	r3, #556	; 0x22c
   1afe4:	f004 fb87 	bl	1f6f6 <printk>
   1afe8:	4040      	eors	r0, r0
   1afea:	f380 8811 	msr	BASEPRI, r0
   1afee:	f04f 0003 	mov.w	r0, #3
   1aff2:	df02      	svc	2
   1aff4:	e7d7      	b.n	1afa6 <isr_common_done+0x2e>
   1aff6:	bf00      	nop
   1aff8:	00003bb9 	.word	0x00003bb9
   1affc:	00026614 	.word	0x00026614
   1b000:	00026660 	.word	0x00026660
   1b004:	00025984 	.word	0x00025984

0001b008 <isr_done>:
{
   1b008:	b508      	push	{r3, lr}
	isr_common_done(param);
   1b00a:	f7ff ffb5 	bl	1af78 <isr_common_done>
	radio_rx_enable();
   1b00e:	f001 faad 	bl	1c56c <radio_rx_enable>
}
   1b012:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   1b016:	f001 bcb3 	b.w	1c980 <radio_tmr_end_capture>
   1b01a:	bf00      	nop

0001b01c <isr_tx>:
{
   1b01c:	b570      	push	{r4, r5, r6, lr}
   1b01e:	b082      	sub	sp, #8
   1b020:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1b022:	f7ff f86d 	bl	1a100 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1b026:	2096      	movs	r0, #150	; 0x96
   1b028:	f001 fba4 	bl	1c774 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1b02c:	2300      	movs	r3, #0
   1b02e:	4618      	mov	r0, r3
   1b030:	461a      	mov	r2, r3
   1b032:	4619      	mov	r1, r3
   1b034:	f001 fb14 	bl	1c660 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b038:	2001      	movs	r0, #1
   1b03a:	f7f8 ff5d 	bl	13ef8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b03e:	4604      	mov	r4, r0
   1b040:	2800      	cmp	r0, #0
   1b042:	d03e      	beq.n	1b0c2 <isr_tx+0xa6>
	radio_pkt_rx_set(node_rx->pdu);
   1b044:	f104 001c 	add.w	r0, r4, #28
   1b048:	f001 fa68 	bl	1c51c <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1b04c:	f001 fabe 	bl	1c5cc <radio_is_ready>
   1b050:	b9d8      	cbnz	r0, 1b08a <isr_tx+0x6e>
	if (ull_filter_lll_rl_enabled()) {
   1b052:	f7fe fcc5 	bl	199e0 <ull_filter_lll_rl_enabled>
   1b056:	bb48      	cbnz	r0, 1b0ac <isr_tx+0x90>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1b058:	f001 fca0 	bl	1c99c <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1b05c:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1b05e:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1b060:	4608      	mov	r0, r1
   1b062:	f001 fa75 	bl	1c550 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1b066:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1b068:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1b06a:	4608      	mov	r0, r1
   1b06c:	f001 fa6c 	bl	1c548 <radio_tx_chain_delay_get>
   1b070:	4434      	add	r4, r6
   1b072:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1b074:	1a20      	subs	r0, r4, r0
   1b076:	f001 fc49 	bl	1c90c <radio_tmr_hcto_configure>
	radio_rssi_measure();
   1b07a:	f001 fb0b 	bl	1c694 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1b07e:	4818      	ldr	r0, [pc, #96]	; (1b0e0 <isr_tx+0xc4>)
   1b080:	4629      	mov	r1, r5
   1b082:	f001 f96b 	bl	1c35c <radio_isr_set>
}
   1b086:	b002      	add	sp, #8
   1b088:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!radio_is_ready());
   1b08a:	4a16      	ldr	r2, [pc, #88]	; (1b0e4 <isr_tx+0xc8>)
   1b08c:	4916      	ldr	r1, [pc, #88]	; (1b0e8 <isr_tx+0xcc>)
   1b08e:	4817      	ldr	r0, [pc, #92]	; (1b0ec <isr_tx+0xd0>)
   1b090:	f240 13f5 	movw	r3, #501	; 0x1f5
   1b094:	f004 fb2f 	bl	1f6f6 <printk>
   1b098:	4040      	eors	r0, r0
   1b09a:	f380 8811 	msr	BASEPRI, r0
   1b09e:	f04f 0003 	mov.w	r0, #3
   1b0a2:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   1b0a4:	f7fe fc9c 	bl	199e0 <ull_filter_lll_rl_enabled>
   1b0a8:	2800      	cmp	r0, #0
   1b0aa:	d0d5      	beq.n	1b058 <isr_tx+0x3c>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1b0ac:	f10d 0007 	add.w	r0, sp, #7
   1b0b0:	f7fe fb00 	bl	196b4 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1b0b4:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1b0b6:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1b0b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1b0bc:	f001 fd22 	bl	1cb04 <radio_ar_configure>
   1b0c0:	e7ca      	b.n	1b058 <isr_tx+0x3c>
	LL_ASSERT(node_rx);
   1b0c2:	4a08      	ldr	r2, [pc, #32]	; (1b0e4 <isr_tx+0xc8>)
   1b0c4:	490a      	ldr	r1, [pc, #40]	; (1b0f0 <isr_tx+0xd4>)
   1b0c6:	4809      	ldr	r0, [pc, #36]	; (1b0ec <isr_tx+0xd0>)
   1b0c8:	f240 13f1 	movw	r3, #497	; 0x1f1
   1b0cc:	f004 fb13 	bl	1f6f6 <printk>
   1b0d0:	4040      	eors	r0, r0
   1b0d2:	f380 8811 	msr	BASEPRI, r0
   1b0d6:	f04f 0003 	mov.w	r0, #3
   1b0da:	df02      	svc	2
   1b0dc:	e7b2      	b.n	1b044 <isr_tx+0x28>
   1b0de:	bf00      	nop
   1b0e0:	00003bb9 	.word	0x00003bb9
   1b0e4:	00026614 	.word	0x00026614
   1b0e8:	000265d8 	.word	0x000265d8
   1b0ec:	00025984 	.word	0x00025984
   1b0f0:	00026660 	.word	0x00026660

0001b0f4 <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   1b0f4:	68c3      	ldr	r3, [r0, #12]
{
   1b0f6:	b570      	push	{r4, r5, r6, lr}
	evt = HDR_LLL2EVT(p->param);
   1b0f8:	681e      	ldr	r6, [r3, #0]
{
   1b0fa:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1b0fc:	f7f5 ffca 	bl	11094 <ticker_ticks_now_get>
   1b100:	4605      	mov	r5, r0
   1b102:	4630      	mov	r0, r6
   1b104:	f7fe ff96 	bl	1a034 <lll_evt_offset_get>
	p->remainder = 0;
   1b108:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1b10a:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1b10c:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1b110:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1b112:	4620      	mov	r0, r4
}
   1b114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1b118:	f7ff bde8 	b.w	1acec <prepare_cb>

0001b11c <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1b11c:	b900      	cbnz	r0, 1b120 <ticker_op_start_cb+0x4>
   1b11e:	4770      	bx	lr
{
   1b120:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1b122:	4a07      	ldr	r2, [pc, #28]	; (1b140 <ticker_op_start_cb+0x24>)
   1b124:	4907      	ldr	r1, [pc, #28]	; (1b144 <ticker_op_start_cb+0x28>)
   1b126:	4808      	ldr	r0, [pc, #32]	; (1b148 <ticker_op_start_cb+0x2c>)
   1b128:	f44f 73c5 	mov.w	r3, #394	; 0x18a
   1b12c:	f004 fae3 	bl	1f6f6 <printk>
   1b130:	4040      	eors	r0, r0
   1b132:	f380 8811 	msr	BASEPRI, r0
   1b136:	f04f 0003 	mov.w	r0, #3
   1b13a:	df02      	svc	2
}
   1b13c:	bd08      	pop	{r3, pc}
   1b13e:	bf00      	nop
   1b140:	00026614 	.word	0x00026614
   1b144:	00025f44 	.word	0x00025f44
   1b148:	00025984 	.word	0x00025984

0001b14c <abort_cb>:
{
   1b14c:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1b14e:	b1d8      	cbz	r0, 1b188 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1b150:	460c      	mov	r4, r1
   1b152:	f7ff f889 	bl	1a268 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b156:	2800      	cmp	r0, #0
   1b158:	db04      	blt.n	1b164 <abort_cb+0x18>
	lll_done(param);
   1b15a:	4620      	mov	r0, r4
}
   1b15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b160:	f7fe bf08 	b.w	19f74 <lll_done>
	LL_ASSERT(err >= 0);
   1b164:	4a0c      	ldr	r2, [pc, #48]	; (1b198 <abort_cb+0x4c>)
   1b166:	490d      	ldr	r1, [pc, #52]	; (1b19c <abort_cb+0x50>)
   1b168:	480d      	ldr	r0, [pc, #52]	; (1b1a0 <abort_cb+0x54>)
   1b16a:	f44f 73bd 	mov.w	r3, #378	; 0x17a
   1b16e:	f004 fac2 	bl	1f6f6 <printk>
   1b172:	4040      	eors	r0, r0
   1b174:	f380 8811 	msr	BASEPRI, r0
   1b178:	f04f 0003 	mov.w	r0, #3
   1b17c:	df02      	svc	2
	lll_done(param);
   1b17e:	4620      	mov	r0, r4
}
   1b180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b184:	f7fe bef6 	b.w	19f74 <lll_done>
			radio_isr_set(isr_abort, param);
   1b188:	4806      	ldr	r0, [pc, #24]	; (1b1a4 <abort_cb+0x58>)
   1b18a:	f001 f8e7 	bl	1c35c <radio_isr_set>
}
   1b18e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   1b192:	f001 b9f7 	b.w	1c584 <radio_disable>
   1b196:	bf00      	nop
   1b198:	00026614 	.word	0x00026614
   1b19c:	00026550 	.word	0x00026550
   1b1a0:	00025984 	.word	0x00025984
   1b1a4:	0001b255 	.word	0x0001b255

0001b1a8 <is_abort_cb>:
	if (next != curr) {
   1b1a8:	4282      	cmp	r2, r0
{
   1b1aa:	b508      	push	{r3, lr}
	if (next != curr) {
   1b1ac:	d107      	bne.n	1b1be <is_abort_cb+0x16>
		radio_isr_set(isr_window, lll);
   1b1ae:	4812      	ldr	r0, [pc, #72]	; (1b1f8 <is_abort_cb+0x50>)
   1b1b0:	4611      	mov	r1, r2
   1b1b2:	f001 f8d3 	bl	1c35c <radio_isr_set>
	radio_disable();
   1b1b6:	f001 f9e5 	bl	1c584 <radio_disable>
	return 0;
   1b1ba:	2000      	movs	r0, #0
}
   1b1bc:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   1b1be:	4a0f      	ldr	r2, [pc, #60]	; (1b1fc <is_abort_cb+0x54>)
   1b1c0:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1b1c2:	9a02      	ldr	r2, [sp, #8]
   1b1c4:	2300      	movs	r3, #0
   1b1c6:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   1b1c8:	f7ff f836 	bl	1a238 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1b1cc:	2800      	cmp	r0, #0
   1b1ce:	db02      	blt.n	1b1d6 <is_abort_cb+0x2e>
   1b1d0:	f06f 000a 	mvn.w	r0, #10
}
   1b1d4:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   1b1d6:	4a0a      	ldr	r2, [pc, #40]	; (1b200 <is_abort_cb+0x58>)
   1b1d8:	490a      	ldr	r1, [pc, #40]	; (1b204 <is_abort_cb+0x5c>)
   1b1da:	480b      	ldr	r0, [pc, #44]	; (1b208 <is_abort_cb+0x60>)
   1b1dc:	f240 134d 	movw	r3, #333	; 0x14d
   1b1e0:	f004 fa89 	bl	1f6f6 <printk>
   1b1e4:	4040      	eors	r0, r0
   1b1e6:	f380 8811 	msr	BASEPRI, r0
   1b1ea:	f04f 0003 	mov.w	r0, #3
   1b1ee:	df02      	svc	2
   1b1f0:	f06f 000a 	mvn.w	r0, #10
}
   1b1f4:	bd08      	pop	{r3, pc}
   1b1f6:	bf00      	nop
   1b1f8:	00003b19 	.word	0x00003b19
   1b1fc:	0001b0f5 	.word	0x0001b0f5
   1b200:	00026614 	.word	0x00026614
   1b204:	00026550 	.word	0x00026550
   1b208:	00025984 	.word	0x00025984

0001b20c <isr_rx_scan_report.isra.0>:
			&srsp->scan_rsp.addr[0], BDADDR_SIZE) == 0));
}

static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   1b20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b20e:	4607      	mov	r7, r0
				uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;

	node_rx = ull_pdu_rx_alloc_peek(3);
   1b210:	2003      	movs	r0, #3
static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   1b212:	460e      	mov	r6, r1
   1b214:	4615      	mov	r5, r2
	node_rx = ull_pdu_rx_alloc_peek(3);
   1b216:	f7f8 fe6f 	bl	13ef8 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   1b21a:	b1c0      	cbz	r0, 1b24e <isr_rx_scan_report.isra.0+0x42>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   1b21c:	4604      	mov	r4, r0
   1b21e:	f7f8 fe89 	bl	13f34 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   1b222:	f64f 72ff 	movw	r2, #65535	; 0xffff
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1b226:	2304      	movs	r3, #4
	node_rx->hdr.handle = 0xffff;
   1b228:	80e2      	strh	r2, [r4, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1b22a:	7123      	strb	r3, [r4, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   1b22c:	b95f      	cbnz	r7, 1b246 <isr_rx_scan_report.isra.0+0x3a>
   1b22e:	207f      	movs	r0, #127	; 0x7f
   1b230:	7620      	strb	r0, [r4, #24]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   1b232:	4621      	mov	r1, r4
   1b234:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.rl_idx = rl_idx;
   1b236:	76a6      	strb	r6, [r4, #26]
	node_rx->hdr.rx_ftr.direct = dir_report;
   1b238:	76e5      	strb	r5, [r4, #27]
	ull_rx_put(node_rx->hdr.link, node_rx);
   1b23a:	f7f8 fe93 	bl	13f64 <ull_rx_put>
	ull_rx_sched();
   1b23e:	f7f8 fea1 	bl	13f84 <ull_rx_sched>

	return 0;
   1b242:	2000      	movs	r0, #0
}
   1b244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   1b246:	f001 fa2f 	bl	1c6a8 <radio_rssi_get>
   1b24a:	b2c0      	uxtb	r0, r0
   1b24c:	e7f0      	b.n	1b230 <isr_rx_scan_report.isra.0+0x24>
		return -ENOBUFS;
   1b24e:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1b252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b254 <isr_abort>:
{
   1b254:	b530      	push	{r4, r5, lr}
   1b256:	b083      	sub	sp, #12
   1b258:	4604      	mov	r4, r0
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1b25a:	2500      	movs	r5, #0
	lll_isr_status_reset();
   1b25c:	f7fe ff62 	bl	1a124 <lll_isr_status_reset>
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1b260:	462b      	mov	r3, r5
   1b262:	4629      	mov	r1, r5
   1b264:	2203      	movs	r2, #3
   1b266:	9500      	str	r5, [sp, #0]
   1b268:	4628      	mov	r0, r5
   1b26a:	f7f5 fe6f 	bl	10f4c <ticker_stop>
	radio_disable();
   1b26e:	f001 f989 	bl	1c584 <radio_disable>
	radio_filter_disable();
   1b272:	f001 fa4d 	bl	1c710 <radio_filter_disable>
	if (++lll->chan == 3U) {
   1b276:	7da0      	ldrb	r0, [r4, #22]
   1b278:	f3c0 0241 	ubfx	r2, r0, #1, #2
   1b27c:	3201      	adds	r2, #1
   1b27e:	f002 0203 	and.w	r2, r2, #3
   1b282:	2a03      	cmp	r2, #3
   1b284:	bf14      	ite	ne
   1b286:	f362 0042 	bfine	r0, r2, #1, #2
		lll->chan = 0U;
   1b28a:	f365 0042 	bfieq	r0, r5, #1, #2
   1b28e:	75a0      	strb	r0, [r4, #22]
	lll_isr_cleanup(param);
   1b290:	4620      	mov	r0, r4
}
   1b292:	b003      	add	sp, #12
   1b294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	lll_isr_cleanup(param);
   1b298:	f7fe bf52 	b.w	1a140 <lll_isr_cleanup>

0001b29c <lll_scan_init>:
}
   1b29c:	2000      	movs	r0, #0
   1b29e:	4770      	bx	lr

0001b2a0 <lll_scan_reset>:
   1b2a0:	2000      	movs	r0, #0
   1b2a2:	4770      	bx	lr

0001b2a4 <lll_scan_prepare>:
{
   1b2a4:	b510      	push	{r4, lr}
   1b2a6:	b082      	sub	sp, #8
   1b2a8:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1b2aa:	f7fe ffc5 	bl	1a238 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1b2ae:	2800      	cmp	r0, #0
   1b2b0:	db19      	blt.n	1b2e6 <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1b2b2:	4a13      	ldr	r2, [pc, #76]	; (1b300 <lll_scan_prepare+0x5c>)
   1b2b4:	4913      	ldr	r1, [pc, #76]	; (1b304 <lll_scan_prepare+0x60>)
   1b2b6:	4814      	ldr	r0, [pc, #80]	; (1b308 <lll_scan_prepare+0x64>)
   1b2b8:	9400      	str	r4, [sp, #0]
   1b2ba:	2300      	movs	r3, #0
   1b2bc:	f7fe fdcc 	bl	19e58 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1b2c0:	b108      	cbz	r0, 1b2c6 <lll_scan_prepare+0x22>
   1b2c2:	3044      	adds	r0, #68	; 0x44
   1b2c4:	d101      	bne.n	1b2ca <lll_scan_prepare+0x26>
}
   1b2c6:	b002      	add	sp, #8
   1b2c8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1b2ca:	4a10      	ldr	r2, [pc, #64]	; (1b30c <lll_scan_prepare+0x68>)
   1b2cc:	4910      	ldr	r1, [pc, #64]	; (1b310 <lll_scan_prepare+0x6c>)
   1b2ce:	4811      	ldr	r0, [pc, #68]	; (1b314 <lll_scan_prepare+0x70>)
   1b2d0:	2370      	movs	r3, #112	; 0x70
   1b2d2:	f004 fa10 	bl	1f6f6 <printk>
   1b2d6:	4040      	eors	r0, r0
   1b2d8:	f380 8811 	msr	BASEPRI, r0
   1b2dc:	f04f 0003 	mov.w	r0, #3
   1b2e0:	df02      	svc	2
}
   1b2e2:	b002      	add	sp, #8
   1b2e4:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1b2e6:	4a09      	ldr	r2, [pc, #36]	; (1b30c <lll_scan_prepare+0x68>)
   1b2e8:	490b      	ldr	r1, [pc, #44]	; (1b318 <lll_scan_prepare+0x74>)
   1b2ea:	480a      	ldr	r0, [pc, #40]	; (1b314 <lll_scan_prepare+0x70>)
   1b2ec:	236d      	movs	r3, #109	; 0x6d
   1b2ee:	f004 fa02 	bl	1f6f6 <printk>
   1b2f2:	4040      	eors	r0, r0
   1b2f4:	f380 8811 	msr	BASEPRI, r0
   1b2f8:	f04f 0003 	mov.w	r0, #3
   1b2fc:	df02      	svc	2
   1b2fe:	e7d8      	b.n	1b2b2 <lll_scan_prepare+0xe>
   1b300:	0001aced 	.word	0x0001aced
   1b304:	0001b14d 	.word	0x0001b14d
   1b308:	0001b1a9 	.word	0x0001b1a9
   1b30c:	00026614 	.word	0x00026614
   1b310:	000265f0 	.word	0x000265f0
   1b314:	00025984 	.word	0x00025984
   1b318:	00026550 	.word	0x00026550

0001b31c <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1b31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b31e:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1b320:	f7fe ff00 	bl	1a124 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1b324:	f7f8 fe9a 	bl	1405c <ull_event_done_extra_get>
	LL_ASSERT(e);
   1b328:	4604      	mov	r4, r0
   1b32a:	2800      	cmp	r0, #0
   1b32c:	d033      	beq.n	1b396 <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   1b32e:	4b21      	ldr	r3, [pc, #132]	; (1b3b4 <isr_done+0x98>)
	e->crc_valid = crc_valid;
   1b330:	4921      	ldr	r1, [pc, #132]	; (1b3b8 <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1b332:	4a22      	ldr	r2, [pc, #136]	; (1b3bc <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   1b334:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   1b336:	7808      	ldrb	r0, [r1, #0]
	e->mic_state = mic_state;
   1b338:	7811      	ldrb	r1, [r2, #0]
	e->trx_cnt = trx_cnt;
   1b33a:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1b33c:	2201      	movs	r2, #1
	e->crc_valid = crc_valid;
   1b33e:	71a0      	strb	r0, [r4, #6]
	e->mic_state = mic_state;
   1b340:	71e1      	strb	r1, [r4, #7]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1b342:	7022      	strb	r2, [r4, #0]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1b344:	b11b      	cbz	r3, 1b34e <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   1b346:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   1b34a:	2b00      	cmp	r3, #0
   1b34c:	db04      	blt.n	1b358 <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1b34e:	4628      	mov	r0, r5
}
   1b350:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1b354:	f7fe bef4 	b.w	1a140 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   1b358:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   1b35c:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1b360:	2b02      	cmp	r3, #2
   1b362:	d016      	beq.n	1b392 <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1b364:	2b04      	cmp	r3, #4
   1b366:	bf14      	ite	ne
   1b368:	2728      	movne	r7, #40	; 0x28
   1b36a:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1b36e:	f001 fafb 	bl	1c968 <radio_tmr_aa_restore>
   1b372:	4606      	mov	r6, r0
   1b374:	f001 fafe 	bl	1c974 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   1b378:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1b37a:	1a36      	subs	r6, r6, r0
			lll->slave.window_widening_event_us = 0;
   1b37c:	2300      	movs	r3, #0
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   1b37e:	e9c4 2703 	strd	r2, r7, [r4, #12]
			e->drift.start_to_address_actual_us =
   1b382:	60a6      	str	r6, [r4, #8]
	lll_isr_cleanup(param);
   1b384:	4628      	mov	r0, r5
			lll->slave.window_widening_event_us = 0;
   1b386:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   1b388:	63eb      	str	r3, [r5, #60]	; 0x3c
}
   1b38a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1b38e:	f7fe bed7 	b.w	1a140 <lll_isr_cleanup>
	switch (phy) {
   1b392:	2718      	movs	r7, #24
   1b394:	e7eb      	b.n	1b36e <isr_done+0x52>
	LL_ASSERT(e);
   1b396:	4a0a      	ldr	r2, [pc, #40]	; (1b3c0 <isr_done+0xa4>)
   1b398:	490a      	ldr	r1, [pc, #40]	; (1b3c4 <isr_done+0xa8>)
   1b39a:	480b      	ldr	r0, [pc, #44]	; (1b3c8 <isr_done+0xac>)
   1b39c:	f240 236d 	movw	r3, #621	; 0x26d
   1b3a0:	f004 f9a9 	bl	1f6f6 <printk>
   1b3a4:	4040      	eors	r0, r0
   1b3a6:	f380 8811 	msr	BASEPRI, r0
   1b3aa:	f04f 0003 	mov.w	r0, #3
   1b3ae:	df02      	svc	2
   1b3b0:	e7bd      	b.n	1b32e <isr_done+0x12>
   1b3b2:	bf00      	nop
   1b3b4:	20002b10 	.word	0x20002b10
   1b3b8:	20003098 	.word	0x20003098
   1b3bc:	20003099 	.word	0x20003099
   1b3c0:	0002667c 	.word	0x0002667c
   1b3c4:	00025dbc 	.word	0x00025dbc
   1b3c8:	00025984 	.word	0x00025984

0001b3cc <lll_conn_init>:
{
   1b3cc:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   1b3ce:	f001 f931 	bl	1c634 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1b3d2:	7803      	ldrb	r3, [r0, #0]
   1b3d4:	2201      	movs	r2, #1
   1b3d6:	f362 0301 	bfi	r3, r2, #0, #2
   1b3da:	7003      	strb	r3, [r0, #0]
}
   1b3dc:	2000      	movs	r0, #0
   1b3de:	bd08      	pop	{r3, pc}

0001b3e0 <lll_conn_reset>:
}
   1b3e0:	2000      	movs	r0, #0
   1b3e2:	4770      	bx	lr

0001b3e4 <lll_conn_flush>:
}
   1b3e4:	4770      	bx	lr
   1b3e6:	bf00      	nop

0001b3e8 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   1b3e8:	4805      	ldr	r0, [pc, #20]	; (1b400 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   1b3ea:	4906      	ldr	r1, [pc, #24]	; (1b404 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1b3ec:	4a06      	ldr	r2, [pc, #24]	; (1b408 <lll_conn_prepare_reset+0x20>)
{
   1b3ee:	b410      	push	{r4}
	trx_cnt = 0U;
   1b3f0:	2300      	movs	r3, #0
   1b3f2:	4c06      	ldr	r4, [pc, #24]	; (1b40c <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   1b3f4:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   1b3f6:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   1b3f8:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1b3fa:	8023      	strh	r3, [r4, #0]
}
   1b3fc:	bc10      	pop	{r4}
   1b3fe:	4770      	bx	lr
   1b400:	20003098 	.word	0x20003098
   1b404:	20003097 	.word	0x20003097
   1b408:	20003099 	.word	0x20003099
   1b40c:	20002b10 	.word	0x20002b10

0001b410 <lll_conn_abort_cb>:
{
   1b410:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1b412:	b1d0      	cbz	r0, 1b44a <lll_conn_abort_cb+0x3a>
	err = lll_hfclock_off();
   1b414:	460c      	mov	r4, r1
   1b416:	f7fe ff27 	bl	1a268 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b41a:	2800      	cmp	r0, #0
   1b41c:	db04      	blt.n	1b428 <lll_conn_abort_cb+0x18>
	lll_done(param);
   1b41e:	4620      	mov	r0, r4
}
   1b420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b424:	f7fe bda6 	b.w	19f74 <lll_done>
	LL_ASSERT(err >= 0);
   1b428:	4a0b      	ldr	r2, [pc, #44]	; (1b458 <lll_conn_abort_cb+0x48>)
   1b42a:	490c      	ldr	r1, [pc, #48]	; (1b45c <lll_conn_abort_cb+0x4c>)
   1b42c:	480c      	ldr	r0, [pc, #48]	; (1b460 <lll_conn_abort_cb+0x50>)
   1b42e:	239b      	movs	r3, #155	; 0x9b
   1b430:	f004 f961 	bl	1f6f6 <printk>
   1b434:	4040      	eors	r0, r0
   1b436:	f380 8811 	msr	BASEPRI, r0
   1b43a:	f04f 0003 	mov.w	r0, #3
   1b43e:	df02      	svc	2
	lll_done(param);
   1b440:	4620      	mov	r0, r4
}
   1b442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b446:	f7fe bd95 	b.w	19f74 <lll_done>
		radio_isr_set(isr_done, param);
   1b44a:	4806      	ldr	r0, [pc, #24]	; (1b464 <lll_conn_abort_cb+0x54>)
   1b44c:	f000 ff86 	bl	1c35c <radio_isr_set>
}
   1b450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1b454:	f001 b896 	b.w	1c584 <radio_disable>
   1b458:	0002667c 	.word	0x0002667c
   1b45c:	00026550 	.word	0x00026550
   1b460:	00025984 	.word	0x00025984
   1b464:	0001b31d 	.word	0x0001b31d

0001b468 <lll_conn_rx_pkt_set>:
{
   1b468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b46a:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b46c:	2001      	movs	r0, #1
   1b46e:	f7f8 fd43 	bl	13ef8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b472:	4604      	mov	r4, r0
   1b474:	b350      	cbz	r0, 1b4cc <lll_conn_rx_pkt_set+0x64>
	phy = lll->phy_rx;
   1b476:	f895 6049 	ldrb.w	r6, [r5, #73]	; 0x49
	max_rx_octets = lll->max_rx_octets;
   1b47a:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
	phy = lll->phy_rx;
   1b47e:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   1b482:	4630      	mov	r0, r6
   1b484:	2100      	movs	r1, #0
   1b486:	f000 ffaf 	bl	1c3e8 <radio_phy_set>
	} else if (lll->enc_rx) {
   1b48a:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   1b48e:	0072      	lsls	r2, r6, #1
   1b490:	071b      	lsls	r3, r3, #28
   1b492:	f104 041c 	add.w	r4, r4, #28
   1b496:	f042 0201 	orr.w	r2, r2, #1
   1b49a:	d50e      	bpl.n	1b4ba <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1b49c:	1d39      	adds	r1, r7, #4
   1b49e:	b2c9      	uxtb	r1, r1
   1b4a0:	2008      	movs	r0, #8
   1b4a2:	f001 f805 	bl	1c4b0 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1b4a6:	4622      	mov	r2, r4
   1b4a8:	4631      	mov	r1, r6
   1b4aa:	f105 0063 	add.w	r0, r5, #99	; 0x63
   1b4ae:	f001 fa7b 	bl	1c9a8 <radio_ccm_rx_pkt_set>
}
   1b4b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1b4b6:	f001 b831 	b.w	1c51c <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1b4ba:	b2f9      	uxtb	r1, r7
   1b4bc:	2008      	movs	r0, #8
   1b4be:	f000 fff7 	bl	1c4b0 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1b4c2:	4620      	mov	r0, r4
}
   1b4c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1b4c8:	f001 b828 	b.w	1c51c <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1b4cc:	4a06      	ldr	r2, [pc, #24]	; (1b4e8 <lll_conn_rx_pkt_set+0x80>)
   1b4ce:	4907      	ldr	r1, [pc, #28]	; (1b4ec <lll_conn_rx_pkt_set+0x84>)
   1b4d0:	4807      	ldr	r0, [pc, #28]	; (1b4f0 <lll_conn_rx_pkt_set+0x88>)
   1b4d2:	f240 13d5 	movw	r3, #469	; 0x1d5
   1b4d6:	f004 f90e 	bl	1f6f6 <printk>
   1b4da:	4040      	eors	r0, r0
   1b4dc:	f380 8811 	msr	BASEPRI, r0
   1b4e0:	f04f 0003 	mov.w	r0, #3
   1b4e4:	df02      	svc	2
   1b4e6:	e7c6      	b.n	1b476 <lll_conn_rx_pkt_set+0xe>
   1b4e8:	0002667c 	.word	0x0002667c
   1b4ec:	00026660 	.word	0x00026660
   1b4f0:	00025984 	.word	0x00025984

0001b4f4 <lll_conn_isr_tx>:
{
   1b4f4:	b538      	push	{r3, r4, r5, lr}
   1b4f6:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1b4f8:	f7fe fe02 	bl	1a100 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1b4fc:	2096      	movs	r0, #150	; 0x96
   1b4fe:	f001 f939 	bl	1c774 <radio_tmr_tifs_set>
				     lll->phy_flags);
   1b502:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   1b506:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1b50a:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1b50e:	f000 0007 	and.w	r0, r0, #7
   1b512:	f002 0207 	and.w	r2, r2, #7
   1b516:	2100      	movs	r1, #0
   1b518:	f001 f8a2 	bl	1c660 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1b51c:	4620      	mov	r0, r4
   1b51e:	f7ff ffa3 	bl	1b468 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1b522:	f001 f853 	bl	1c5cc <radio_is_ready>
   1b526:	bb58      	cbnz	r0, 1b580 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1b528:	f001 fa38 	bl	1c99c <radio_tmr_tifs_base_get>
   1b52c:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1b52e:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1b532:	2101      	movs	r1, #1
   1b534:	f000 0007 	and.w	r0, r0, #7
   1b538:	f001 f80a 	bl	1c550 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1b53c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   1b540:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1b544:	4405      	add	r5, r0
   1b546:	2b02      	cmp	r3, #2
   1b548:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1b54c:	d016      	beq.n	1b57c <lll_conn_isr_tx+0x88>
		return 376;
   1b54e:	2b04      	cmp	r3, #4
   1b550:	bf14      	ite	ne
   1b552:	2328      	movne	r3, #40	; 0x28
   1b554:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1b558:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   1b55c:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1b560:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   1b564:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1b566:	f000 ffef 	bl	1c548 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1b56a:	1a28      	subs	r0, r5, r0
   1b56c:	f001 f9ce 	bl	1c90c <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1b570:	4621      	mov	r1, r4
   1b572:	480a      	ldr	r0, [pc, #40]	; (1b59c <lll_conn_isr_tx+0xa8>)
}
   1b574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1b578:	f000 bef0 	b.w	1c35c <radio_isr_set>
	switch (phy) {
   1b57c:	2318      	movs	r3, #24
   1b57e:	e7eb      	b.n	1b558 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   1b580:	4a07      	ldr	r2, [pc, #28]	; (1b5a0 <lll_conn_isr_tx+0xac>)
   1b582:	4908      	ldr	r1, [pc, #32]	; (1b5a4 <lll_conn_isr_tx+0xb0>)
   1b584:	4808      	ldr	r0, [pc, #32]	; (1b5a8 <lll_conn_isr_tx+0xb4>)
   1b586:	f240 13a1 	movw	r3, #417	; 0x1a1
   1b58a:	f004 f8b4 	bl	1f6f6 <printk>
   1b58e:	4040      	eors	r0, r0
   1b590:	f380 8811 	msr	BASEPRI, r0
   1b594:	f04f 0003 	mov.w	r0, #3
   1b598:	df02      	svc	2
   1b59a:	e7c5      	b.n	1b528 <lll_conn_isr_tx+0x34>
   1b59c:	0001b6e5 	.word	0x0001b6e5
   1b5a0:	0002667c 	.word	0x0002667c
   1b5a4:	000265d8 	.word	0x000265d8
   1b5a8:	00025984 	.word	0x00025984

0001b5ac <lll_conn_tx_pkt_set>:
{
   1b5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b5ae:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   1b5b0:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	max_tx_octets = lll->max_tx_octets;
   1b5b4:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
	phy = lll->phy_tx;
   1b5b8:	f001 0407 	and.w	r4, r1, #7
{
   1b5bc:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   1b5be:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1b5c2:	4620      	mov	r0, r4
   1b5c4:	f000 ff10 	bl	1c3e8 <radio_phy_set>
	} else if (lll->enc_tx) {
   1b5c8:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   1b5cc:	0062      	lsls	r2, r4, #1
   1b5ce:	06db      	lsls	r3, r3, #27
   1b5d0:	f042 0201 	orr.w	r2, r2, #1
   1b5d4:	b2f1      	uxtb	r1, r6
   1b5d6:	d50d      	bpl.n	1b5f4 <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   1b5d8:	3104      	adds	r1, #4
   1b5da:	b2c9      	uxtb	r1, r1
   1b5dc:	2008      	movs	r0, #8
   1b5de:	f000 ff67 	bl	1c4b0 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1b5e2:	4639      	mov	r1, r7
   1b5e4:	f105 0084 	add.w	r0, r5, #132	; 0x84
   1b5e8:	f001 fa36 	bl	1ca58 <radio_ccm_tx_pkt_set>
}
   1b5ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1b5f0:	f000 bf9a 	b.w	1c528 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1b5f4:	2008      	movs	r0, #8
   1b5f6:	f000 ff5b 	bl	1c4b0 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1b5fa:	4638      	mov	r0, r7
}
   1b5fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1b600:	f000 bf92 	b.w	1c528 <radio_pkt_tx_set>

0001b604 <lll_conn_pdu_tx_prep>:
{
   1b604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b608:	4604      	mov	r4, r0
   1b60a:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1b60c:	aa01      	add	r2, sp, #4
   1b60e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
   1b610:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1b612:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1b614:	f7f4 f822 	bl	f65c <memq_peek>
	if (lll->empty || !link) {
   1b618:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1b61c:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1b61e:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   1b620:	d432      	bmi.n	1b688 <lll_conn_pdu_tx_prep+0x84>
   1b622:	2800      	cmp	r0, #0
   1b624:	d04e      	beq.n	1b6c4 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1b626:	9a01      	ldr	r2, [sp, #4]
   1b628:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
		if (!lll->packet_tx_head_len) {
   1b62c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1b630:	f102 0804 	add.w	r8, r2, #4
   1b634:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   1b638:	b913      	cbnz	r3, 1b640 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   1b63a:	786b      	ldrb	r3, [r5, #1]
   1b63c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (lll->packet_tx_head_offset) {
   1b640:	b137      	cbz	r7, 1b650 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1b642:	f818 2007 	ldrb.w	r2, [r8, r7]
   1b646:	2101      	movs	r1, #1
   1b648:	f361 0201 	bfi	r2, r1, #0, #2
   1b64c:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1b650:	1bdb      	subs	r3, r3, r7
   1b652:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1b654:	4620      	mov	r0, r4
   1b656:	f7fc fbd1 	bl	17dfc <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1b65a:	786b      	ldrb	r3, [r5, #1]
   1b65c:	4283      	cmp	r3, r0
   1b65e:	d924      	bls.n	1b6aa <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   1b660:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1b662:	f818 3007 	ldrb.w	r3, [r8, r7]
   1b666:	f043 0310 	orr.w	r3, r3, #16
   1b66a:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   1b66e:	f818 3007 	ldrb.w	r3, [r8, r7]
		p->resv = 0U;
   1b672:	2200      	movs	r2, #0
		p->rfu = 0U;
   1b674:	f36f 1347 	bfc	r3, #5, #3
   1b678:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   1b67c:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   1b67e:	f8c9 5000 	str.w	r5, [r9]
}
   1b682:	b003      	add	sp, #12
   1b684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   1b688:	f043 0304 	orr.w	r3, r3, #4
   1b68c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   1b690:	f000 ffd0 	bl	1c634 <radio_pkt_empty_get>
   1b694:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   1b696:	b1e6      	cbz	r6, 1b6d2 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   1b698:	7803      	ldrb	r3, [r0, #0]
   1b69a:	f043 0310 	orr.w	r3, r3, #16
   1b69e:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   1b6a0:	f8c9 5000 	str.w	r5, [r9]
}
   1b6a4:	b003      	add	sp, #12
   1b6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   1b6aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1b6ac:	6832      	ldr	r2, [r6, #0]
   1b6ae:	429a      	cmp	r2, r3
			p->md = 1U;
   1b6b0:	f818 3007 	ldrb.w	r3, [r8, r7]
   1b6b4:	bf14      	ite	ne
   1b6b6:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   1b6ba:	f36f 1304 	bfceq	r3, #4, #1
   1b6be:	f808 3007 	strb.w	r3, [r8, r7]
   1b6c2:	e7d4      	b.n	1b66e <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   1b6c4:	f043 0304 	orr.w	r3, r3, #4
   1b6c8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   1b6cc:	f000 ffb2 	bl	1c634 <radio_pkt_empty_get>
   1b6d0:	4605      	mov	r5, r0
			p->md = 0U;
   1b6d2:	782b      	ldrb	r3, [r5, #0]
   1b6d4:	f36f 1304 	bfc	r3, #4, #1
   1b6d8:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1b6da:	f8c9 5000 	str.w	r5, [r9]
}
   1b6de:	b003      	add	sp, #12
   1b6e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001b6e4 <lll_conn_isr_rx>:
{
   1b6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b6e8:	b082      	sub	sp, #8
   1b6ea:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1b6ec:	f000 ff78 	bl	1c5e0 <radio_is_done>
	if (trx_done) {
   1b6f0:	f010 0fff 	tst.w	r0, #255	; 0xff
   1b6f4:	d10a      	bne.n	1b70c <lll_conn_isr_rx+0x28>
	lll_isr_rx_status_reset();
   1b6f6:	f7fe fd0b 	bl	1a110 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1b6fa:	48bb      	ldr	r0, [pc, #748]	; (1b9e8 <lll_conn_isr_rx+0x304>)
   1b6fc:	4621      	mov	r1, r4
   1b6fe:	f000 fe2d 	bl	1c35c <radio_isr_set>
		radio_disable();
   1b702:	f000 ff3f 	bl	1c584 <radio_disable>
}
   1b706:	b002      	add	sp, #8
   1b708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = radio_crc_is_valid();
   1b70c:	f000 ff88 	bl	1c620 <radio_crc_is_valid>
   1b710:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1b712:	f000 ffd7 	bl	1c6c4 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1b716:	f7fe fcfb 	bl	1a110 <lll_isr_rx_status_reset>
	trx_cnt++;
   1b71a:	4ab4      	ldr	r2, [pc, #720]	; (1b9ec <lll_conn_isr_rx+0x308>)
   1b71c:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b71e:	2001      	movs	r0, #1
	trx_cnt++;
   1b720:	4403      	add	r3, r0
   1b722:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b724:	f7f8 fbe8 	bl	13ef8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b728:	4606      	mov	r6, r0
   1b72a:	2800      	cmp	r0, #0
   1b72c:	f000 80d0 	beq.w	1b8d0 <lll_conn_isr_rx+0x1ec>
	if (crc_ok) {
   1b730:	b9ed      	cbnz	r5, 1b76e <lll_conn_isr_rx+0x8a>
		if (crc_expire == 0U) {
   1b732:	4aaf      	ldr	r2, [pc, #700]	; (1b9f0 <lll_conn_isr_rx+0x30c>)
   1b734:	7817      	ldrb	r7, [r2, #0]
   1b736:	2f00      	cmp	r7, #0
   1b738:	d06b      	beq.n	1b812 <lll_conn_isr_rx+0x12e>
	is_empty_pdu_tx_retry = lll->empty;
   1b73a:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1b73e:	3f01      	subs	r7, #1
   1b740:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b742:	a901      	add	r1, sp, #4
   1b744:	4620      	mov	r0, r4
		crc_expire--;
   1b746:	7017      	strb	r7, [r2, #0]
	is_empty_pdu_tx_retry = lll->empty;
   1b748:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b74c:	f7ff ff5a 	bl	1b604 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1b750:	2f00      	cmp	r7, #0
   1b752:	f040 8134 	bne.w	1b9be <lll_conn_isr_rx+0x2da>
		radio_isr_set(isr_done, param);
   1b756:	48a4      	ldr	r0, [pc, #656]	; (1b9e8 <lll_conn_isr_rx+0x304>)
   1b758:	4621      	mov	r1, r4
   1b75a:	f000 fdff 	bl	1c35c <radio_isr_set>
		} else if (!lll->role) {
   1b75e:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   1b762:	2b00      	cmp	r3, #0
   1b764:	f280 80a6 	bge.w	1b8b4 <lll_conn_isr_rx+0x1d0>
			radio_switch_complete_and_disable();
   1b768:	f000 ff86 	bl	1c678 <radio_switch_complete_and_disable>
   1b76c:	e066      	b.n	1b83c <lll_conn_isr_rx+0x158>
	if (pdu_data_rx->nesn != lll->sn) {
   1b76e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1b772:	7f32      	ldrb	r2, [r6, #28]
   1b774:	f003 0101 	and.w	r1, r3, #1
   1b778:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1b77c:	4288      	cmp	r0, r1
   1b77e:	f000 80b7 	beq.w	1b8f0 <lll_conn_isr_rx+0x20c>
		if (lll->role) {
   1b782:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
		lll->sn++;
   1b786:	f081 0101 	eor.w	r1, r1, #1
   1b78a:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   1b78e:	2a00      	cmp	r2, #0
		lll->sn++;
   1b790:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (lll->role) {
   1b794:	da05      	bge.n	1b7a2 <lll_conn_isr_rx+0xbe>
			lll->slave.latency_enabled = 1;
   1b796:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1b79a:	f043 0301 	orr.w	r3, r3, #1
   1b79e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		if (!lll->empty) {
   1b7a2:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1b7a6:	f013 0804 	ands.w	r8, r3, #4
   1b7aa:	f040 80e6 	bne.w	1b97a <lll_conn_isr_rx+0x296>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1b7ae:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   1b7b2:	aa01      	add	r2, sp, #4
   1b7b4:	f7f3 ff52 	bl	f65c <memq_peek>
		if (link) {
   1b7b8:	4682      	mov	sl, r0
   1b7ba:	2800      	cmp	r0, #0
   1b7bc:	f000 80f4 	beq.w	1b9a8 <lll_conn_isr_rx+0x2c4>
			pdu_data_tx = (void *)(tx->pdu +
   1b7c0:	9f01      	ldr	r7, [sp, #4]
					       lll->packet_tx_head_offset);
   1b7c2:	f894 9061 	ldrb.w	r9, [r4, #97]	; 0x61
			pdu_data_tx = (void *)(tx->pdu +
   1b7c6:	3704      	adds	r7, #4
   1b7c8:	eb07 0309 	add.w	r3, r7, r9
			pdu_data_tx_len = pdu_data_tx->len;
   1b7cc:	785a      	ldrb	r2, [r3, #1]
			if (pdu_data_tx_len != 0U) {
   1b7ce:	b152      	cbz	r2, 1b7e6 <lll_conn_isr_rx+0x102>
				if (lll->enc_tx) {
   1b7d0:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1b7d4:	06d9      	lsls	r1, r3, #27
   1b7d6:	d506      	bpl.n	1b7e6 <lll_conn_isr_rx+0x102>
					lll->ccm_tx.counter++;
   1b7d8:	e9d4 3125 	ldrd	r3, r1, [r4, #148]	; 0x94
   1b7dc:	3301      	adds	r3, #1
   1b7de:	f141 0100 	adc.w	r1, r1, #0
   1b7e2:	e9c4 3125 	strd	r3, r1, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   1b7e6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1b7ea:	444a      	add	r2, r9
   1b7ec:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1b7ee:	429a      	cmp	r2, r3
   1b7f0:	f0c0 80e1 	bcc.w	1b9b6 <lll_conn_isr_rx+0x2d2>
			} else if (offset == lll->packet_tx_head_len) {
   1b7f4:	f000 812a 	beq.w	1ba4c <lll_conn_isr_rx+0x368>
	tx_release = NULL;
   1b7f8:	2500      	movs	r5, #0
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1b7fa:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   1b7fe:	2b00      	cmp	r3, #0
   1b800:	f2c0 8117 	blt.w	1ba32 <lll_conn_isr_rx+0x34e>
			    !pdu_data_rx->md) {
   1b804:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1b806:	06d3      	lsls	r3, r2, #27
   1b808:	f140 8117 	bpl.w	1ba3a <lll_conn_isr_rx+0x356>
   1b80c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1b810:	e071      	b.n	1b8f6 <lll_conn_isr_rx+0x212>
		crc_expire--;
   1b812:	2301      	movs	r3, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b814:	a901      	add	r1, sp, #4
   1b816:	4620      	mov	r0, r4
		crc_expire--;
   1b818:	7013      	strb	r3, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b81a:	f7ff fef3 	bl	1b604 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1b81e:	2096      	movs	r0, #150	; 0x96
   1b820:	f000 ffa8 	bl	1c774 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   1b824:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1b828:	f000 0007 	and.w	r0, r0, #7
   1b82c:	f000 ff0a 	bl	1c644 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1b830:	4870      	ldr	r0, [pc, #448]	; (1b9f4 <lll_conn_isr_rx+0x310>)
   1b832:	4621      	mov	r1, r4
   1b834:	f000 fd92 	bl	1c35c <radio_isr_set>
		radio_tmr_end_capture();
   1b838:	f001 f8a2 	bl	1c980 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1b83c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   1b840:	9901      	ldr	r1, [sp, #4]
	pdu_data_tx->nesn = lll->nesn;
   1b842:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1b846:	7808      	ldrb	r0, [r1, #0]
	pdu_data_tx->sn = lll->sn;
   1b848:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1b84c:	009b      	lsls	r3, r3, #2
   1b84e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1b852:	f020 020c 	bic.w	r2, r0, #12
   1b856:	4313      	orrs	r3, r2
   1b858:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1b85a:	4620      	mov	r0, r4
   1b85c:	f7ff fea6 	bl	1b5ac <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1b860:	f000 feb4 	bl	1c5cc <radio_is_ready>
   1b864:	2800      	cmp	r0, #0
   1b866:	d16b      	bne.n	1b940 <lll_conn_isr_rx+0x25c>
	if (!radio_tmr_aa_restore()) {
   1b868:	f001 f87e 	bl	1c968 <radio_tmr_aa_restore>
   1b86c:	b170      	cbz	r0, 1b88c <lll_conn_isr_rx+0x1a8>
	if (tx_release) {
   1b86e:	b19d      	cbz	r5, 1b898 <lll_conn_isr_rx+0x1b4>
		LL_ASSERT(lll->handle != 0xFFFF);
   1b870:	8a20      	ldrh	r0, [r4, #16]
   1b872:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b876:	4298      	cmp	r0, r3
   1b878:	d070      	beq.n	1b95c <lll_conn_isr_rx+0x278>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1b87a:	4629      	mov	r1, r5
   1b87c:	f7fc f8ce 	bl	17a1c <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1b880:	b96f      	cbnz	r7, 1b89e <lll_conn_isr_rx+0x1ba>
		ull_rx_sched();
   1b882:	f7f8 fb7f 	bl	13f84 <ull_rx_sched>
}
   1b886:	b002      	add	sp, #8
   1b888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   1b88c:	f001 f860 	bl	1c950 <radio_tmr_aa_get>
   1b890:	f001 f864 	bl	1c95c <radio_tmr_aa_save>
	if (tx_release) {
   1b894:	2d00      	cmp	r5, #0
   1b896:	d1eb      	bne.n	1b870 <lll_conn_isr_rx+0x18c>
	if (is_rx_enqueue) {
   1b898:	2f00      	cmp	r7, #0
   1b89a:	f43f af34 	beq.w	1b706 <lll_conn_isr_rx+0x22>
		ull_pdu_rx_alloc();
   1b89e:	f7f8 fb49 	bl	13f34 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1b8a2:	2302      	movs	r3, #2
   1b8a4:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1b8a6:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1b8a8:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   1b8aa:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1b8ac:	4631      	mov	r1, r6
   1b8ae:	f7f8 fb59 	bl	13f64 <ull_rx_put>
	if (is_ull_rx) {
   1b8b2:	e7e6      	b.n	1b882 <lll_conn_isr_rx+0x19e>
			radio_disable();
   1b8b4:	f000 fe66 	bl	1c584 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   1b8b8:	f000 fe88 	bl	1c5cc <radio_is_ready>
   1b8bc:	2800      	cmp	r0, #0
   1b8be:	f040 80a7 	bne.w	1ba10 <lll_conn_isr_rx+0x32c>
			lll->empty = is_empty_pdu_tx_retry;
   1b8c2:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1b8c6:	f369 0382 	bfi	r3, r9, #2, #1
   1b8ca:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
			goto lll_conn_isr_rx_exit;
   1b8ce:	e7cb      	b.n	1b868 <lll_conn_isr_rx+0x184>
	LL_ASSERT(node_rx);
   1b8d0:	4a49      	ldr	r2, [pc, #292]	; (1b9f8 <lll_conn_isr_rx+0x314>)
   1b8d2:	494a      	ldr	r1, [pc, #296]	; (1b9fc <lll_conn_isr_rx+0x318>)
   1b8d4:	484a      	ldr	r0, [pc, #296]	; (1ba00 <lll_conn_isr_rx+0x31c>)
   1b8d6:	23d0      	movs	r3, #208	; 0xd0
   1b8d8:	f003 ff0d 	bl	1f6f6 <printk>
   1b8dc:	4040      	eors	r0, r0
   1b8de:	f380 8811 	msr	BASEPRI, r0
   1b8e2:	f04f 0003 	mov.w	r0, #3
   1b8e6:	df02      	svc	2
	if (crc_ok) {
   1b8e8:	2d00      	cmp	r5, #0
   1b8ea:	f43f af22 	beq.w	1b732 <lll_conn_isr_rx+0x4e>
   1b8ee:	e73e      	b.n	1b76e <lll_conn_isr_rx+0x8a>
	is_done = 0U;
   1b8f0:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   1b8f4:	4645      	mov	r5, r8
	if ((pdu_data_rx->sn == lll->nesn) &&
   1b8f6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1b8fa:	f3c3 0140 	ubfx	r1, r3, #1, #1
   1b8fe:	428a      	cmp	r2, r1
   1b900:	d05f      	beq.n	1b9c2 <lll_conn_isr_rx+0x2de>
	is_rx_enqueue = 0U;
   1b902:	2700      	movs	r7, #0
		crc_expire = 0U;
   1b904:	493a      	ldr	r1, [pc, #232]	; (1b9f0 <lll_conn_isr_rx+0x30c>)
		crc_valid = 1U;
   1b906:	4a3f      	ldr	r2, [pc, #252]	; (1ba04 <lll_conn_isr_rx+0x320>)
		crc_expire = 0U;
   1b908:	2000      	movs	r0, #0
   1b90a:	7008      	strb	r0, [r1, #0]
	is_empty_pdu_tx_retry = lll->empty;
   1b90c:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b910:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1b912:	2301      	movs	r3, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b914:	4620      	mov	r0, r4
		crc_valid = 1U;
   1b916:	7013      	strb	r3, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b918:	f7ff fe74 	bl	1b604 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1b91c:	f1b8 0f00 	cmp.w	r8, #0
   1b920:	f47f af19 	bne.w	1b756 <lll_conn_isr_rx+0x72>
   1b924:	7f33      	ldrb	r3, [r6, #28]
   1b926:	06d9      	lsls	r1, r3, #27
   1b928:	f53f af79 	bmi.w	1b81e <lll_conn_isr_rx+0x13a>
			      (pdu_data_tx->md == 0) &&
   1b92c:	9b01      	ldr	r3, [sp, #4]
   1b92e:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1b930:	06d2      	lsls	r2, r2, #27
   1b932:	f53f af74 	bmi.w	1b81e <lll_conn_isr_rx+0x13a>
			      (pdu_data_tx->md == 0) &&
   1b936:	785b      	ldrb	r3, [r3, #1]
   1b938:	2b00      	cmp	r3, #0
   1b93a:	f43f af0c 	beq.w	1b756 <lll_conn_isr_rx+0x72>
   1b93e:	e76e      	b.n	1b81e <lll_conn_isr_rx+0x13a>
	LL_ASSERT(!radio_is_ready());
   1b940:	4a2d      	ldr	r2, [pc, #180]	; (1b9f8 <lll_conn_isr_rx+0x314>)
   1b942:	4931      	ldr	r1, [pc, #196]	; (1ba08 <lll_conn_isr_rx+0x324>)
   1b944:	482e      	ldr	r0, [pc, #184]	; (1ba00 <lll_conn_isr_rx+0x31c>)
   1b946:	f44f 739e 	mov.w	r3, #316	; 0x13c
   1b94a:	f003 fed4 	bl	1f6f6 <printk>
   1b94e:	4040      	eors	r0, r0
   1b950:	f380 8811 	msr	BASEPRI, r0
   1b954:	f04f 0003 	mov.w	r0, #3
   1b958:	df02      	svc	2
   1b95a:	e785      	b.n	1b868 <lll_conn_isr_rx+0x184>
		LL_ASSERT(lll->handle != 0xFFFF);
   1b95c:	4a26      	ldr	r2, [pc, #152]	; (1b9f8 <lll_conn_isr_rx+0x314>)
   1b95e:	492b      	ldr	r1, [pc, #172]	; (1ba0c <lll_conn_isr_rx+0x328>)
   1b960:	4827      	ldr	r0, [pc, #156]	; (1ba00 <lll_conn_isr_rx+0x31c>)
   1b962:	f240 134b 	movw	r3, #331	; 0x14b
   1b966:	f003 fec6 	bl	1f6f6 <printk>
   1b96a:	4040      	eors	r0, r0
   1b96c:	f380 8811 	msr	BASEPRI, r0
   1b970:	f04f 0003 	mov.w	r0, #3
   1b974:	df02      	svc	2
   1b976:	8a20      	ldrh	r0, [r4, #16]
   1b978:	e77f      	b.n	1b87a <lll_conn_isr_rx+0x196>
			lll->empty = 0;
   1b97a:	f36f 0382 	bfc	r3, #2, #1
   1b97e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1b982:	f000 fe57 	bl	1c634 <radio_pkt_empty_get>
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1b986:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   1b98a:	2b00      	cmp	r3, #0
   1b98c:	db0c      	blt.n	1b9a8 <lll_conn_isr_rx+0x2c4>
			    !pdu_data_rx->md) {
   1b98e:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1b990:	f012 0510 	ands.w	r5, r2, #16
   1b994:	d109      	bne.n	1b9aa <lll_conn_isr_rx+0x2c6>
				*is_done = !pdu_data_tx->md;
   1b996:	f890 8000 	ldrb.w	r8, [r0]
   1b99a:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1b99e:	f088 0810 	eor.w	r8, r8, #16
   1b9a2:	f3c8 1800 	ubfx	r8, r8, #4, #1
   1b9a6:	e7a6      	b.n	1b8f6 <lll_conn_isr_rx+0x212>
   1b9a8:	7f32      	ldrb	r2, [r6, #28]
   1b9aa:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
	is_done = 0U;
   1b9ae:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   1b9b2:	4645      	mov	r5, r8
   1b9b4:	e79f      	b.n	1b8f6 <lll_conn_isr_rx+0x212>
				lll->packet_tx_head_offset = offset;
   1b9b6:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	tx_release = NULL;
   1b9ba:	2500      	movs	r5, #0
   1b9bc:	e71d      	b.n	1b7fa <lll_conn_isr_rx+0x116>
	is_rx_enqueue = 0U;
   1b9be:	462f      	mov	r7, r5
   1b9c0:	e72d      	b.n	1b81e <lll_conn_isr_rx+0x13a>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1b9c2:	2003      	movs	r0, #3
   1b9c4:	f7f8 fa98 	bl	13ef8 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1b9c8:	b380      	cbz	r0, 1ba2c <lll_conn_isr_rx+0x348>
		lll->nesn++;
   1b9ca:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1b9ce:	f083 0302 	eor.w	r3, r3, #2
   1b9d2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (pdu_data_rx->len != 0) {
   1b9d6:	7f73      	ldrb	r3, [r6, #29]
   1b9d8:	b343      	cbz	r3, 1ba2c <lll_conn_isr_rx+0x348>
			if (lll->enc_rx) {
   1b9da:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1b9de:	0718      	lsls	r0, r3, #28
   1b9e0:	d443      	bmi.n	1ba6a <lll_conn_isr_rx+0x386>
			*is_rx_enqueue = 1U;
   1b9e2:	2701      	movs	r7, #1
   1b9e4:	e78e      	b.n	1b904 <lll_conn_isr_rx+0x220>
   1b9e6:	bf00      	nop
   1b9e8:	0001b31d 	.word	0x0001b31d
   1b9ec:	20002b10 	.word	0x20002b10
   1b9f0:	20003097 	.word	0x20003097
   1b9f4:	0001b4f5 	.word	0x0001b4f5
   1b9f8:	0002667c 	.word	0x0002667c
   1b9fc:	00026660 	.word	0x00026660
   1ba00:	00025984 	.word	0x00025984
   1ba04:	20003098 	.word	0x20003098
   1ba08:	000265d8 	.word	0x000265d8
   1ba0c:	000266d0 	.word	0x000266d0
			LL_ASSERT(!radio_is_ready());
   1ba10:	4a3d      	ldr	r2, [pc, #244]	; (1bb08 <lll_conn_isr_rx+0x424>)
   1ba12:	493e      	ldr	r1, [pc, #248]	; (1bb0c <lll_conn_isr_rx+0x428>)
   1ba14:	483e      	ldr	r0, [pc, #248]	; (1bb10 <lll_conn_isr_rx+0x42c>)
   1ba16:	f44f 7381 	mov.w	r3, #258	; 0x102
   1ba1a:	f003 fe6c 	bl	1f6f6 <printk>
   1ba1e:	4040      	eors	r0, r0
   1ba20:	f380 8811 	msr	BASEPRI, r0
   1ba24:	f04f 0003 	mov.w	r0, #3
   1ba28:	df02      	svc	2
   1ba2a:	e74a      	b.n	1b8c2 <lll_conn_isr_rx+0x1de>
   1ba2c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1ba30:	e767      	b.n	1b902 <lll_conn_isr_rx+0x21e>
   1ba32:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1ba36:	7f32      	ldrb	r2, [r6, #28]
   1ba38:	e75d      	b.n	1b8f6 <lll_conn_isr_rx+0x212>
				*is_done = !pdu_data_tx->md;
   1ba3a:	f817 8009 	ldrb.w	r8, [r7, r9]
   1ba3e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1ba42:	f088 0810 	eor.w	r8, r8, #16
   1ba46:	f3c8 1800 	ubfx	r8, r8, #4, #1
   1ba4a:	e754      	b.n	1b8f6 <lll_conn_isr_rx+0x212>
				lll->packet_tx_head_len = 0;
   1ba4c:	2200      	movs	r2, #0
				memq_dequeue(lll->memq_tx.tail,
   1ba4e:	6d20      	ldr	r0, [r4, #80]	; 0x50
				lll->packet_tx_head_len = 0;
   1ba50:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				memq_dequeue(lll->memq_tx.tail,
   1ba54:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1ba58:	f7f3 fe08 	bl	f66c <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1ba5c:	9d01      	ldr	r5, [sp, #4]
   1ba5e:	682b      	ldr	r3, [r5, #0]
   1ba60:	f8ca 3000 	str.w	r3, [sl]
				tx->next = link;
   1ba64:	f8c5 a000 	str.w	sl, [r5]
				*tx_release = tx;
   1ba68:	e6c7      	b.n	1b7fa <lll_conn_isr_rx+0x116>
				done = radio_ccm_is_done();
   1ba6a:	f001 f81f 	bl	1caac <radio_ccm_is_done>
				LL_ASSERT(done);
   1ba6e:	2800      	cmp	r0, #0
   1ba70:	d03b      	beq.n	1baea <lll_conn_isr_rx+0x406>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1ba72:	f001 f83d 	bl	1caf0 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1ba76:	bb30      	cbnz	r0, 1bac6 <lll_conn_isr_rx+0x3e2>
				    lll->ccm_rx.counter == 0 &&
   1ba78:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   1ba7c:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
				if (mic_failure &&
   1ba80:	4313      	orrs	r3, r2
   1ba82:	d104      	bne.n	1ba8e <lll_conn_isr_rx+0x3aa>
				    (pdu_data_rx->ll_id ==
   1ba84:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   1ba86:	f003 0303 	and.w	r3, r3, #3
   1ba8a:	2b03      	cmp	r3, #3
   1ba8c:	d004      	beq.n	1ba98 <lll_conn_isr_rx+0x3b4>
					mic_state = LLL_CONN_MIC_FAIL;
   1ba8e:	4b21      	ldr	r3, [pc, #132]	; (1bb14 <lll_conn_isr_rx+0x430>)
   1ba90:	2202      	movs	r2, #2
   1ba92:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   1ba94:	2700      	movs	r7, #0
   1ba96:	e6e7      	b.n	1b868 <lll_conn_isr_rx+0x184>
						radio_pkt_scratch_get();
   1ba98:	f000 fdd0 	bl	1c63c <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1ba9c:	7842      	ldrb	r2, [r0, #1]
   1ba9e:	2a1b      	cmp	r2, #27
						radio_pkt_scratch_get();
   1baa0:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1baa2:	d8f4      	bhi.n	1ba8e <lll_conn_isr_rx+0x3aa>
						memcpy(pdu_data_rx,
   1baa4:	3203      	adds	r2, #3
   1baa6:	f106 001c 	add.w	r0, r6, #28
   1baaa:	f005 fe9c 	bl	217e6 <memcpy>
						lll->ccm_rx.counter--;
   1baae:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   1bab2:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   1bab6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   1baba:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   1babe:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   1bac2:	f8c4 2077 	str.w	r2, [r4, #119]	; 0x77
				lll->ccm_rx.counter++;
   1bac6:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   1baca:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
				mic_state = LLL_CONN_MIC_PASS;
   1bace:	4911      	ldr	r1, [pc, #68]	; (1bb14 <lll_conn_isr_rx+0x430>)
				lll->ccm_rx.counter++;
   1bad0:	3301      	adds	r3, #1
						lll->ccm_rx.counter--;
   1bad2:	f104 0073 	add.w	r0, r4, #115	; 0x73
				lll->ccm_rx.counter++;
   1bad6:	f142 0200 	adc.w	r2, r2, #0
   1bada:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   1bade:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   1bae0:	6042      	str	r2, [r0, #4]
				mic_state = LLL_CONN_MIC_PASS;
   1bae2:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1bae6:	700f      	strb	r7, [r1, #0]
		if (err) {
   1bae8:	e70c      	b.n	1b904 <lll_conn_isr_rx+0x220>
				LL_ASSERT(done);
   1baea:	4a07      	ldr	r2, [pc, #28]	; (1bb08 <lll_conn_isr_rx+0x424>)
   1baec:	490a      	ldr	r1, [pc, #40]	; (1bb18 <lll_conn_isr_rx+0x434>)
   1baee:	4808      	ldr	r0, [pc, #32]	; (1bb10 <lll_conn_isr_rx+0x42c>)
   1baf0:	f240 330f 	movw	r3, #783	; 0x30f
   1baf4:	f003 fdff 	bl	1f6f6 <printk>
   1baf8:	4040      	eors	r0, r0
   1bafa:	f380 8811 	msr	BASEPRI, r0
   1bafe:	f04f 0003 	mov.w	r0, #3
   1bb02:	df02      	svc	2
   1bb04:	e7b5      	b.n	1ba72 <lll_conn_isr_rx+0x38e>
   1bb06:	bf00      	nop
   1bb08:	0002667c 	.word	0x0002667c
   1bb0c:	000265d8 	.word	0x000265d8
   1bb10:	00025984 	.word	0x00025984
   1bb14:	20003099 	.word	0x20003099
   1bb18:	000266c8 	.word	0x000266c8

0001bb1c <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1bb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   1bb20:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1bb22:	8a22      	ldrh	r2, [r4, #16]
   1bb24:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bb28:	429a      	cmp	r2, r3
{
   1bb2a:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   1bb2c:	f000 80c3 	beq.w	1bcb6 <prepare_cb+0x19a>
		DEBUG_RADIO_CLOSE_S(0);
		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1bb30:	4605      	mov	r5, r0
   1bb32:	f7ff fc59 	bl	1b3e8 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1bb36:	8ae1      	ldrh	r1, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1bb38:	8b66      	ldrh	r6, [r4, #26]
	lll->event_counter = lll->event_counter + lll->latency_prepare;

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1bb3a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   1bb3e:	1e48      	subs	r0, r1, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1bb40:	4431      	add	r1, r6
	lll->latency_prepare = 0;
   1bb42:	2200      	movs	r2, #0
	lll->latency_event = lll->latency_prepare - 1;
   1bb44:	b280      	uxth	r0, r0
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1bb46:	8361      	strh	r1, [r4, #26]
	if (lll->data_chan_sel) {
   1bb48:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   1bb4a:	82e2      	strh	r2, [r4, #22]
	lll->latency_event = lll->latency_prepare - 1;
   1bb4c:	8320      	strh	r0, [r4, #24]
	if (lll->data_chan_sel) {
   1bb4e:	f104 021c 	add.w	r2, r4, #28
   1bb52:	f100 808f 	bmi.w	1bc74 <prepare_cb+0x158>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1bb56:	f003 063f 	and.w	r6, r3, #63	; 0x3f
   1bb5a:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1bb5e:	9600      	str	r6, [sp, #0]
   1bb60:	4613      	mov	r3, r2
   1bb62:	4602      	mov	r2, r0
   1bb64:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1bb68:	f7fc fe80 	bl	1886c <lll_chan_sel_1>
   1bb6c:	4607      	mov	r7, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   1bb6e:	e9d4 610c 	ldrd	r6, r1, [r4, #48]	; 0x30
		lll->slave.window_widening_prepare_us;
	lll->slave.window_widening_prepare_us = 0;
	if (lll->slave.window_widening_event_us >
	    lll->slave.window_widening_max_us) {
   1bb72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   1bb74:	e9d4 030e 	ldrd	r0, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_event_us +=
   1bb78:	4431      	add	r1, r6
		lll->slave.window_widening_event_us =
   1bb7a:	428a      	cmp	r2, r1
   1bb7c:	bf28      	it	cs
   1bb7e:	460a      	movcs	r2, r1
	lll->slave.window_size_event_us +=
   1bb80:	4403      	add	r3, r0
	lll->slave.window_widening_prepare_us = 0;
   1bb82:	2600      	movs	r6, #0
		lll->slave.window_widening_event_us =
   1bb84:	6362      	str	r2, [r4, #52]	; 0x34
	lll->slave.window_size_event_us +=
   1bb86:	63e3      	str	r3, [r4, #60]	; 0x3c
	lll->slave.window_widening_prepare_us = 0;
   1bb88:	6326      	str	r6, [r4, #48]	; 0x30
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   1bb8a:	63a6      	str	r6, [r4, #56]	; 0x38

	/* Start setting up Radio h/w */
	radio_reset();
   1bb8c:	f000 fc06 	bl	1c39c <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1bb90:	4630      	mov	r0, r6
   1bb92:	f000 fc55 	bl	1c440 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   1bb96:	4620      	mov	r0, r4
   1bb98:	f7ff fc66 	bl	1b468 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   1bb9c:	f104 0008 	add.w	r0, r4, #8
   1bba0:	f000 fc6c 	bl	1c47c <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   1bba4:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1bba6:	7ba2      	ldrb	r2, [r4, #14]
			     ((uint32_t)lll->crc_init[0])));
   1bba8:	7b21      	ldrb	r1, [r4, #12]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1bbaa:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1bbac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1bbb0:	4319      	orrs	r1, r3
   1bbb2:	f240 605b 	movw	r0, #1627	; 0x65b
   1bbb6:	f000 fd27 	bl	1c608 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   1bbba:	4638      	mov	r0, r7
   1bbbc:	f7fe fa5a 	bl	1a074 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   1bbc0:	4621      	mov	r1, r4
   1bbc2:	4849      	ldr	r0, [pc, #292]	; (1bce8 <prepare_cb+0x1cc>)
   1bbc4:	f000 fbca 	bl	1c35c <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1bbc8:	2096      	movs	r0, #150	; 0x96
   1bbca:	f000 fdd3 	bl	1c774 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   1bbce:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   1bbd2:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1bbd6:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1bbda:	4631      	mov	r1, r6
   1bbdc:	f002 0207 	and.w	r2, r2, #7
   1bbe0:	f000 0007 	and.w	r0, r0, #7
   1bbe4:	f000 fd3c 	bl	1c660 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   1bbe8:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1bbec:	682f      	ldr	r7, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1bbee:	4640      	mov	r0, r8
   1bbf0:	f7fe fa20 	bl	1a034 <lll_evt_offset_get>
   1bbf4:	4407      	add	r7, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1bbf6:	686a      	ldr	r2, [r5, #4]
   1bbf8:	f107 0109 	add.w	r1, r7, #9
   1bbfc:	4630      	mov	r0, r6
   1bbfe:	f000 fdc5 	bl	1c78c <radio_tmr_start>
   1bc02:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   1bc04:	f000 fe90 	bl	1c928 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1bc08:	4630      	mov	r0, r6
   1bc0a:	f000 fea7 	bl	1c95c <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1bc0e:	6b62      	ldr	r2, [r4, #52]	; 0x34
	hcto = remainder_us +
   1bc10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1bc12:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1bc16:	3230      	adds	r2, #48	; 0x30
	hcto = remainder_us +
   1bc18:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1bc1c:	f000 0007 	and.w	r0, r0, #7
   1bc20:	2101      	movs	r1, #1
	hcto = remainder_us +
   1bc22:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1bc24:	f000 fc92 	bl	1c54c <radio_rx_ready_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1bc28:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
   1bc2c:	f002 0207 	and.w	r2, r2, #7
   1bc30:	2a02      	cmp	r2, #2
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1bc32:	4405      	add	r5, r0
   1bc34:	d03d      	beq.n	1bcb2 <prepare_cb+0x196>
		return 40;
   1bc36:	2a04      	cmp	r2, #4
   1bc38:	bf0c      	ite	eq
   1bc3a:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   1bc3e:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1bc40:	4610      	mov	r0, r2
   1bc42:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   1bc44:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1bc46:	f000 fc83 	bl	1c550 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   1bc4a:	4428      	add	r0, r5
   1bc4c:	f000 fe5e 	bl	1c90c <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1bc50:	7c21      	ldrb	r1, [r4, #16]
   1bc52:	3105      	adds	r1, #5
   1bc54:	463a      	mov	r2, r7
   1bc56:	4640      	mov	r0, r8
   1bc58:	b2c9      	uxtb	r1, r1
   1bc5a:	f7fe f9f9 	bl	1a050 <lll_preempt_calc>
   1bc5e:	b190      	cbz	r0, 1bc86 <prepare_cb+0x16a>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1bc60:	4822      	ldr	r0, [pc, #136]	; (1bcec <prepare_cb+0x1d0>)
   1bc62:	4621      	mov	r1, r4
   1bc64:	f000 fb7a 	bl	1c35c <radio_isr_set>
		radio_disable();
   1bc68:	f000 fc8c 	bl	1c584 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1bc6c:	2000      	movs	r0, #0
   1bc6e:	b002      	add	sp, #8
   1bc70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	event_counter = lll->event_counter + lll->latency_event;
   1bc74:	4430      	add	r0, r6
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1bc76:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   1bc78:	b280      	uxth	r0, r0
   1bc7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1bc7e:	f7fc fe31 	bl	188e4 <lll_chan_sel_2>
   1bc82:	4607      	mov	r7, r0
   1bc84:	e773      	b.n	1bb6e <prepare_cb+0x52>
		ret = lll_prepare_done(lll);
   1bc86:	4620      	mov	r0, r4
   1bc88:	f7fe f972 	bl	19f70 <lll_prepare_done>
		LL_ASSERT(!ret);
   1bc8c:	2800      	cmp	r0, #0
   1bc8e:	d0ed      	beq.n	1bc6c <prepare_cb+0x150>
   1bc90:	4a17      	ldr	r2, [pc, #92]	; (1bcf0 <prepare_cb+0x1d4>)
   1bc92:	4918      	ldr	r1, [pc, #96]	; (1bcf4 <prepare_cb+0x1d8>)
   1bc94:	4818      	ldr	r0, [pc, #96]	; (1bcf8 <prepare_cb+0x1dc>)
   1bc96:	f240 1313 	movw	r3, #275	; 0x113
   1bc9a:	f003 fd2c 	bl	1f6f6 <printk>
   1bc9e:	4040      	eors	r0, r0
   1bca0:	f380 8811 	msr	BASEPRI, r0
   1bca4:	f04f 0003 	mov.w	r0, #3
   1bca8:	df02      	svc	2
}
   1bcaa:	2000      	movs	r0, #0
   1bcac:	b002      	add	sp, #8
   1bcae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   1bcb2:	2318      	movs	r3, #24
   1bcb4:	e7c4      	b.n	1bc40 <prepare_cb+0x124>
		err = lll_hfclock_off();
   1bcb6:	f7fe fad7 	bl	1a268 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1bcba:	2800      	cmp	r0, #0
   1bcbc:	db06      	blt.n	1bccc <prepare_cb+0x1b0>
		lll_done(NULL);
   1bcbe:	2000      	movs	r0, #0
   1bcc0:	f7fe f958 	bl	19f74 <lll_done>
}
   1bcc4:	2000      	movs	r0, #0
   1bcc6:	b002      	add	sp, #8
   1bcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(err >= 0);
   1bccc:	4a08      	ldr	r2, [pc, #32]	; (1bcf0 <prepare_cb+0x1d4>)
   1bcce:	490b      	ldr	r1, [pc, #44]	; (1bcfc <prepare_cb+0x1e0>)
   1bcd0:	4809      	ldr	r0, [pc, #36]	; (1bcf8 <prepare_cb+0x1dc>)
   1bcd2:	237d      	movs	r3, #125	; 0x7d
   1bcd4:	f003 fd0f 	bl	1f6f6 <printk>
   1bcd8:	4040      	eors	r0, r0
   1bcda:	f380 8811 	msr	BASEPRI, r0
   1bcde:	f04f 0003 	mov.w	r0, #3
   1bce2:	df02      	svc	2
   1bce4:	e7eb      	b.n	1bcbe <prepare_cb+0x1a2>
   1bce6:	bf00      	nop
   1bce8:	0001b6e5 	.word	0x0001b6e5
   1bcec:	0001a1ad 	.word	0x0001a1ad
   1bcf0:	000266fc 	.word	0x000266fc
   1bcf4:	00025c48 	.word	0x00025c48
   1bcf8:	00025984 	.word	0x00025984
   1bcfc:	00026550 	.word	0x00026550

0001bd00 <lll_slave_prepare>:
{
   1bd00:	b570      	push	{r4, r5, r6, lr}
   1bd02:	b082      	sub	sp, #8
   1bd04:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1bd06:	f7fe fa97 	bl	1a238 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1bd0a:	2800      	cmp	r0, #0
   1bd0c:	db29      	blt.n	1bd62 <lll_slave_prepare+0x62>
	lll = p->param;
   1bd0e:	68e1      	ldr	r1, [r4, #12]
	elapsed = p->lazy + 1;
   1bd10:	8923      	ldrh	r3, [r4, #8]
	    lll->slave.window_widening_periodic_us * elapsed;
   1bd12:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->slave.window_widening_prepare_us +=
   1bd14:	6b0d      	ldr	r5, [r1, #48]	; 0x30
	lll->latency_prepare += elapsed;
   1bd16:	8ace      	ldrh	r6, [r1, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1bd18:	4a18      	ldr	r2, [pc, #96]	; (1bd7c <lll_slave_prepare+0x7c>)
	elapsed = p->lazy + 1;
   1bd1a:	3301      	adds	r3, #1
   1bd1c:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   1bd1e:	fb00 5503 	mla	r5, r0, r3, r5
	    lll->slave.window_widening_max_us) {
   1bd22:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
		lll->slave.window_widening_prepare_us =
   1bd24:	42a8      	cmp	r0, r5
   1bd26:	bf28      	it	cs
   1bd28:	4628      	movcs	r0, r5
	lll->latency_prepare += elapsed;
   1bd2a:	4433      	add	r3, r6
		lll->slave.window_widening_prepare_us =
   1bd2c:	6308      	str	r0, [r1, #48]	; 0x30
	lll->latency_prepare += elapsed;
   1bd2e:	82cb      	strh	r3, [r1, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1bd30:	4813      	ldr	r0, [pc, #76]	; (1bd80 <lll_slave_prepare+0x80>)
   1bd32:	4914      	ldr	r1, [pc, #80]	; (1bd84 <lll_slave_prepare+0x84>)
   1bd34:	9400      	str	r4, [sp, #0]
   1bd36:	2300      	movs	r3, #0
   1bd38:	f7fe f88e 	bl	19e58 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1bd3c:	b108      	cbz	r0, 1bd42 <lll_slave_prepare+0x42>
   1bd3e:	3044      	adds	r0, #68	; 0x44
   1bd40:	d101      	bne.n	1bd46 <lll_slave_prepare+0x46>
}
   1bd42:	b002      	add	sp, #8
   1bd44:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1bd46:	4a10      	ldr	r2, [pc, #64]	; (1bd88 <lll_slave_prepare+0x88>)
   1bd48:	4910      	ldr	r1, [pc, #64]	; (1bd8c <lll_slave_prepare+0x8c>)
   1bd4a:	4811      	ldr	r0, [pc, #68]	; (1bd90 <lll_slave_prepare+0x90>)
   1bd4c:	235f      	movs	r3, #95	; 0x5f
   1bd4e:	f003 fcd2 	bl	1f6f6 <printk>
   1bd52:	4040      	eors	r0, r0
   1bd54:	f380 8811 	msr	BASEPRI, r0
   1bd58:	f04f 0003 	mov.w	r0, #3
   1bd5c:	df02      	svc	2
}
   1bd5e:	b002      	add	sp, #8
   1bd60:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(err >= 0);
   1bd62:	4a09      	ldr	r2, [pc, #36]	; (1bd88 <lll_slave_prepare+0x88>)
   1bd64:	490b      	ldr	r1, [pc, #44]	; (1bd94 <lll_slave_prepare+0x94>)
   1bd66:	480a      	ldr	r0, [pc, #40]	; (1bd90 <lll_slave_prepare+0x90>)
   1bd68:	2348      	movs	r3, #72	; 0x48
   1bd6a:	f003 fcc4 	bl	1f6f6 <printk>
   1bd6e:	4040      	eors	r0, r0
   1bd70:	f380 8811 	msr	BASEPRI, r0
   1bd74:	f04f 0003 	mov.w	r0, #3
   1bd78:	df02      	svc	2
   1bd7a:	e7c8      	b.n	1bd0e <lll_slave_prepare+0xe>
   1bd7c:	0001bb1d 	.word	0x0001bb1d
   1bd80:	0001a02d 	.word	0x0001a02d
   1bd84:	0001b411 	.word	0x0001b411
   1bd88:	000266fc 	.word	0x000266fc
   1bd8c:	000265f0 	.word	0x000265f0
   1bd90:	00025984 	.word	0x00025984
   1bd94:	00026550 	.word	0x00026550

0001bd98 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1bd98:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct evt_hdr *evt;
	uint32_t remainder;

	DEBUG_RADIO_START_M(1);

	lll = p->param;
   1bd9a:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1bd9c:	8a22      	ldrh	r2, [r4, #16]
   1bd9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bda2:	429a      	cmp	r2, r3
{
   1bda4:	b085      	sub	sp, #20
	if (unlikely(lll->handle == 0xFFFF)) {
   1bda6:	f000 8095 	beq.w	1bed4 <prepare_cb+0x13c>
		DEBUG_RADIO_CLOSE_M(0);
		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1bdaa:	4605      	mov	r5, r0
   1bdac:	f7ff fb1c 	bl	1b3e8 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1bdb0:	8ae1      	ldrh	r1, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1bdb2:	8b66      	ldrh	r6, [r4, #26]
	lll->event_counter = lll->event_counter + lll->latency_prepare;

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1bdb4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   1bdb8:	1e48      	subs	r0, r1, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1bdba:	4431      	add	r1, r6
	lll->latency_prepare = 0;
   1bdbc:	2200      	movs	r2, #0
	lll->latency_event = lll->latency_prepare - 1;
   1bdbe:	b280      	uxth	r0, r0
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1bdc0:	8361      	strh	r1, [r4, #26]
	if (lll->data_chan_sel) {
   1bdc2:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   1bdc4:	82e2      	strh	r2, [r4, #22]
	lll->latency_event = lll->latency_prepare - 1;
   1bdc6:	8320      	strh	r0, [r4, #24]
	if (lll->data_chan_sel) {
   1bdc8:	f104 021c 	add.w	r2, r4, #28
   1bdcc:	d465      	bmi.n	1be9a <prepare_cb+0x102>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1bdce:	f003 063f 	and.w	r6, r3, #63	; 0x3f
   1bdd2:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1bdd6:	9600      	str	r6, [sp, #0]
   1bdd8:	4613      	mov	r3, r2
   1bdda:	4602      	mov	r2, r0
   1bddc:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1bde0:	f7fc fd44 	bl	1886c <lll_chan_sel_1>
   1bde4:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1bde6:	a903      	add	r1, sp, #12
   1bde8:	4620      	mov	r0, r4
   1bdea:	f7ff fc0b 	bl	1b604 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   1bdee:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   1bdf2:	9803      	ldr	r0, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   1bdf4:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1bdf8:	7801      	ldrb	r1, [r0, #0]
	pdu_data_tx->sn = lll->sn;
   1bdfa:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1bdfe:	009b      	lsls	r3, r3, #2
   1be00:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1be04:	f021 020c 	bic.w	r2, r1, #12
   1be08:	4313      	orrs	r3, r2
   1be0a:	7003      	strb	r3, [r0, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   1be0c:	f000 fac6 	bl	1c39c <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1be10:	2000      	movs	r0, #0
   1be12:	f000 fb15 	bl	1c440 <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   1be16:	f104 0008 	add.w	r0, r4, #8
   1be1a:	f000 fb2f 	bl	1c47c <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   1be1e:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1be20:	7ba2      	ldrb	r2, [r4, #14]
			     ((uint32_t)lll->crc_init[0])));
   1be22:	7b21      	ldrb	r1, [r4, #12]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1be24:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1be26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1be2a:	4319      	orrs	r1, r3
   1be2c:	f240 605b 	movw	r0, #1627	; 0x65b
   1be30:	f000 fbea 	bl	1c608 <radio_crc_configure>
	lll_chan_set(data_chan_use);
   1be34:	4630      	mov	r0, r6
   1be36:	f7fe f91d 	bl	1a074 <lll_chan_set>

	/* setup the radio tx packet buffer */
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1be3a:	9903      	ldr	r1, [sp, #12]
   1be3c:	4620      	mov	r0, r4
   1be3e:	f7ff fbb5 	bl	1b5ac <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   1be42:	4621      	mov	r1, r4
   1be44:	482f      	ldr	r0, [pc, #188]	; (1bf04 <prepare_cb+0x16c>)
   1be46:	f000 fa89 	bl	1c35c <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1be4a:	2096      	movs	r0, #150	; 0x96
   1be4c:	f000 fc92 	bl	1c774 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   1be50:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1be54:	f000 0007 	and.w	r0, r0, #7
   1be58:	f000 fbf4 	bl	1c644 <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   1be5c:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1be5e:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1be60:	4638      	mov	r0, r7
   1be62:	f7fe f8e7 	bl	1a034 <lll_evt_offset_get>
   1be66:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   1be68:	686a      	ldr	r2, [r5, #4]
   1be6a:	f106 0109 	add.w	r1, r6, #9
   1be6e:	2001      	movs	r0, #1
   1be70:	f000 fc8c 	bl	1c78c <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   1be74:	f000 fd84 	bl	1c980 <radio_tmr_end_capture>
#endif /* !CONFIG_BT_CTLR_GPIO_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1be78:	7c21      	ldrb	r1, [r4, #16]
   1be7a:	3105      	adds	r1, #5
   1be7c:	4632      	mov	r2, r6
   1be7e:	4638      	mov	r0, r7
   1be80:	b2c9      	uxtb	r1, r1
   1be82:	f7fe f8e5 	bl	1a050 <lll_preempt_calc>
   1be86:	b188      	cbz	r0, 1beac <prepare_cb+0x114>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1be88:	481f      	ldr	r0, [pc, #124]	; (1bf08 <prepare_cb+0x170>)
   1be8a:	4621      	mov	r1, r4
   1be8c:	f000 fa66 	bl	1c35c <radio_isr_set>
		radio_disable();
   1be90:	f000 fb78 	bl	1c584 <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   1be94:	2000      	movs	r0, #0
   1be96:	b005      	add	sp, #20
   1be98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	event_counter = lll->event_counter + lll->latency_event;
   1be9a:	4430      	add	r0, r6
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1be9c:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   1be9e:	b280      	uxth	r0, r0
   1bea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1bea4:	f7fc fd1e 	bl	188e4 <lll_chan_sel_2>
   1bea8:	4606      	mov	r6, r0
   1beaa:	e79c      	b.n	1bde6 <prepare_cb+0x4e>
		ret = lll_prepare_done(lll);
   1beac:	4620      	mov	r0, r4
   1beae:	f7fe f85f 	bl	19f70 <lll_prepare_done>
		LL_ASSERT(!ret);
   1beb2:	2800      	cmp	r0, #0
   1beb4:	d0ee      	beq.n	1be94 <prepare_cb+0xfc>
   1beb6:	4a15      	ldr	r2, [pc, #84]	; (1bf0c <prepare_cb+0x174>)
   1beb8:	4915      	ldr	r1, [pc, #84]	; (1bf10 <prepare_cb+0x178>)
   1beba:	4816      	ldr	r0, [pc, #88]	; (1bf14 <prepare_cb+0x17c>)
   1bebc:	23e8      	movs	r3, #232	; 0xe8
   1bebe:	f003 fc1a 	bl	1f6f6 <printk>
   1bec2:	4040      	eors	r0, r0
   1bec4:	f380 8811 	msr	BASEPRI, r0
   1bec8:	f04f 0003 	mov.w	r0, #3
   1becc:	df02      	svc	2
}
   1bece:	2000      	movs	r0, #0
   1bed0:	b005      	add	sp, #20
   1bed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = lll_hfclock_off();
   1bed4:	f7fe f9c8 	bl	1a268 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1bed8:	2800      	cmp	r0, #0
   1beda:	db05      	blt.n	1bee8 <prepare_cb+0x150>
		lll_done(NULL);
   1bedc:	2000      	movs	r0, #0
   1bede:	f7fe f849 	bl	19f74 <lll_done>
}
   1bee2:	2000      	movs	r0, #0
   1bee4:	b005      	add	sp, #20
   1bee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(err >= 0);
   1bee8:	4a08      	ldr	r2, [pc, #32]	; (1bf0c <prepare_cb+0x174>)
   1beea:	490b      	ldr	r1, [pc, #44]	; (1bf18 <prepare_cb+0x180>)
   1beec:	4809      	ldr	r0, [pc, #36]	; (1bf14 <prepare_cb+0x17c>)
   1beee:	2374      	movs	r3, #116	; 0x74
   1bef0:	f003 fc01 	bl	1f6f6 <printk>
   1bef4:	4040      	eors	r0, r0
   1bef6:	f380 8811 	msr	BASEPRI, r0
   1befa:	f04f 0003 	mov.w	r0, #3
   1befe:	df02      	svc	2
   1bf00:	e7ec      	b.n	1bedc <prepare_cb+0x144>
   1bf02:	bf00      	nop
   1bf04:	0001b4f5 	.word	0x0001b4f5
   1bf08:	0001a1ad 	.word	0x0001a1ad
   1bf0c:	0002675c 	.word	0x0002675c
   1bf10:	00025c48 	.word	0x00025c48
   1bf14:	00025984 	.word	0x00025984
   1bf18:	00026550 	.word	0x00026550

0001bf1c <lll_master_prepare>:
{
   1bf1c:	b530      	push	{r4, r5, lr}
   1bf1e:	b083      	sub	sp, #12
   1bf20:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1bf22:	f7fe f989 	bl	1a238 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1bf26:	2800      	cmp	r0, #0
   1bf28:	db1f      	blt.n	1bf6a <lll_master_prepare+0x4e>
	lll = p->param;
   1bf2a:	68e0      	ldr	r0, [r4, #12]
	elapsed = p->lazy + 1;
   1bf2c:	8923      	ldrh	r3, [r4, #8]
	lll->latency_prepare += elapsed;
   1bf2e:	8ac5      	ldrh	r5, [r0, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1bf30:	4a14      	ldr	r2, [pc, #80]	; (1bf84 <lll_master_prepare+0x68>)
   1bf32:	4915      	ldr	r1, [pc, #84]	; (1bf88 <lll_master_prepare+0x6c>)
	elapsed = p->lazy + 1;
   1bf34:	3301      	adds	r3, #1
	lll->latency_prepare += elapsed;
   1bf36:	442b      	add	r3, r5
   1bf38:	82c3      	strh	r3, [r0, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1bf3a:	4814      	ldr	r0, [pc, #80]	; (1bf8c <lll_master_prepare+0x70>)
   1bf3c:	9400      	str	r4, [sp, #0]
   1bf3e:	2300      	movs	r3, #0
   1bf40:	f7fd ff8a 	bl	19e58 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1bf44:	b108      	cbz	r0, 1bf4a <lll_master_prepare+0x2e>
   1bf46:	3044      	adds	r0, #68	; 0x44
   1bf48:	d101      	bne.n	1bf4e <lll_master_prepare+0x32>
}
   1bf4a:	b003      	add	sp, #12
   1bf4c:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1bf4e:	4a10      	ldr	r2, [pc, #64]	; (1bf90 <lll_master_prepare+0x74>)
   1bf50:	4910      	ldr	r1, [pc, #64]	; (1bf94 <lll_master_prepare+0x78>)
   1bf52:	4811      	ldr	r0, [pc, #68]	; (1bf98 <lll_master_prepare+0x7c>)
   1bf54:	2356      	movs	r3, #86	; 0x56
   1bf56:	f003 fbce 	bl	1f6f6 <printk>
   1bf5a:	4040      	eors	r0, r0
   1bf5c:	f380 8811 	msr	BASEPRI, r0
   1bf60:	f04f 0003 	mov.w	r0, #3
   1bf64:	df02      	svc	2
}
   1bf66:	b003      	add	sp, #12
   1bf68:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(err >= 0);
   1bf6a:	4a09      	ldr	r2, [pc, #36]	; (1bf90 <lll_master_prepare+0x74>)
   1bf6c:	490b      	ldr	r1, [pc, #44]	; (1bf9c <lll_master_prepare+0x80>)
   1bf6e:	480a      	ldr	r0, [pc, #40]	; (1bf98 <lll_master_prepare+0x7c>)
   1bf70:	2348      	movs	r3, #72	; 0x48
   1bf72:	f003 fbc0 	bl	1f6f6 <printk>
   1bf76:	4040      	eors	r0, r0
   1bf78:	f380 8811 	msr	BASEPRI, r0
   1bf7c:	f04f 0003 	mov.w	r0, #3
   1bf80:	df02      	svc	2
   1bf82:	e7d2      	b.n	1bf2a <lll_master_prepare+0xe>
   1bf84:	0001bd99 	.word	0x0001bd99
   1bf88:	0001b411 	.word	0x0001b411
   1bf8c:	0001a02d 	.word	0x0001a02d
   1bf90:	0002675c 	.word	0x0002675c
   1bf94:	000265f0 	.word	0x000265f0
   1bf98:	00025984 	.word	0x00025984
   1bf9c:	00026550 	.word	0x00026550

0001bfa0 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1bfa0:	4b05      	ldr	r3, [pc, #20]	; (1bfb8 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1bfa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1bfa6:	2100      	movs	r1, #0
   1bfa8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1bfac:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1bfb0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1bfb4:	4770      	bx	lr
   1bfb6:	bf00      	nop
   1bfb8:	4000b000 	.word	0x4000b000

0001bfbc <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1bfbc:	4b05      	ldr	r3, [pc, #20]	; (1bfd4 <cntr_start+0x18>)
   1bfbe:	7818      	ldrb	r0, [r3, #0]
   1bfc0:	1c42      	adds	r2, r0, #1
   1bfc2:	701a      	strb	r2, [r3, #0]
   1bfc4:	b918      	cbnz	r0, 1bfce <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1bfc6:	4b04      	ldr	r3, [pc, #16]	; (1bfd8 <cntr_start+0x1c>)
   1bfc8:	2201      	movs	r2, #1
   1bfca:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1bfcc:	4770      	bx	lr
		return 1;
   1bfce:	2001      	movs	r0, #1
}
   1bfd0:	4770      	bx	lr
   1bfd2:	bf00      	nop
   1bfd4:	2000309a 	.word	0x2000309a
   1bfd8:	4000b000 	.word	0x4000b000

0001bfdc <cntr_stop>:

uint32_t cntr_stop(void)
{
   1bfdc:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1bfde:	4c0d      	ldr	r4, [pc, #52]	; (1c014 <cntr_stop+0x38>)
   1bfe0:	7820      	ldrb	r0, [r4, #0]
   1bfe2:	b148      	cbz	r0, 1bff8 <cntr_stop+0x1c>

	if (--_refcount) {
   1bfe4:	3801      	subs	r0, #1
   1bfe6:	b2c0      	uxtb	r0, r0
   1bfe8:	7020      	strb	r0, [r4, #0]
   1bfea:	b918      	cbnz	r0, 1bff4 <cntr_stop+0x18>
   1bfec:	4b0a      	ldr	r3, [pc, #40]	; (1c018 <cntr_stop+0x3c>)
   1bfee:	2201      	movs	r2, #1
   1bff0:	601a      	str	r2, [r3, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1bff2:	bd10      	pop	{r4, pc}
		return 1;
   1bff4:	2001      	movs	r0, #1
}
   1bff6:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1bff8:	4a08      	ldr	r2, [pc, #32]	; (1c01c <cntr_stop+0x40>)
   1bffa:	4909      	ldr	r1, [pc, #36]	; (1c020 <cntr_stop+0x44>)
   1bffc:	4809      	ldr	r0, [pc, #36]	; (1c024 <cntr_stop+0x48>)
   1bffe:	232e      	movs	r3, #46	; 0x2e
   1c000:	f003 fb79 	bl	1f6f6 <printk>
   1c004:	4040      	eors	r0, r0
   1c006:	f380 8811 	msr	BASEPRI, r0
   1c00a:	f04f 0003 	mov.w	r0, #3
   1c00e:	df02      	svc	2
   1c010:	7820      	ldrb	r0, [r4, #0]
   1c012:	e7e7      	b.n	1bfe4 <cntr_stop+0x8>
   1c014:	2000309a 	.word	0x2000309a
   1c018:	4000b004 	.word	0x4000b004
   1c01c:	000267c0 	.word	0x000267c0
   1c020:	0002680c 	.word	0x0002680c
   1c024:	00025984 	.word	0x00025984

0001c028 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1c028:	4b01      	ldr	r3, [pc, #4]	; (1c030 <cntr_cnt_get+0x8>)
   1c02a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1c02e:	4770      	bx	lr
   1c030:	4000b000 	.word	0x4000b000

0001c034 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1c034:	4b02      	ldr	r3, [pc, #8]	; (1c040 <cntr_cmp_set+0xc>)
   1c036:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1c03a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1c03e:	4770      	bx	lr
   1c040:	4000b000 	.word	0x4000b000

0001c044 <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1c044:	b4f0      	push	{r4, r5, r6, r7}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1c046:	4b12      	ldr	r3, [pc, #72]	; (1c090 <do_ecb+0x4c>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c048:	4d12      	ldr	r5, [pc, #72]	; (1c094 <do_ecb+0x50>)
   1c04a:	2601      	movs	r6, #1
   1c04c:	4634      	mov	r4, r6
		NRF_ECB->EVENTS_ENDECB = 0;
   1c04e:	2100      	movs	r1, #0
   1c050:	602c      	str	r4, [r5, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1c052:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1c056:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1c05a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   1c05e:	601c      	str	r4, [r3, #0]
}
   1c060:	e005      	b.n	1c06e <do_ecb+0x2a>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1c062:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1c066:	b932      	cbnz	r2, 1c076 <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1c068:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1c06c:	b11a      	cbz	r2, 1c076 <do_ecb+0x32>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1c06e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1c072:	2a00      	cmp	r2, #0
   1c074:	d0f5      	beq.n	1c062 <do_ecb+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c076:	602e      	str	r6, [r5, #0]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1c078:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1c07c:	2a00      	cmp	r2, #0
   1c07e:	d1e7      	bne.n	1c050 <do_ecb+0xc>
   1c080:	f8d3 7504 	ldr.w	r7, [r3, #1284]	; 0x504
   1c084:	2f00      	cmp	r7, #0
   1c086:	d0e3      	beq.n	1c050 <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
}
   1c088:	bcf0      	pop	{r4, r5, r6, r7}
	NRF_ECB->ECBDATAPTR = 0;
   1c08a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1c08e:	4770      	bx	lr
   1c090:	4000e000 	.word	0x4000e000
   1c094:	4000e004 	.word	0x4000e004

0001c098 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1c098:	b570      	push	{r4, r5, r6, lr}
   1c09a:	b08c      	sub	sp, #48	; 0x30
   1c09c:	460e      	mov	r6, r1
   1c09e:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1c0a0:	4601      	mov	r1, r0
   1c0a2:	2210      	movs	r2, #16
   1c0a4:	4668      	mov	r0, sp
{
   1c0a6:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1c0a8:	f7f3 faa8 	bl	f5fc <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1c0ac:	2210      	movs	r2, #16
   1c0ae:	eb0d 0002 	add.w	r0, sp, r2
   1c0b2:	4631      	mov	r1, r6
   1c0b4:	f7f3 faa2 	bl	f5fc <mem_rcopy>

	do_ecb(&ecb);
   1c0b8:	4668      	mov	r0, sp
   1c0ba:	f7ff ffc3 	bl	1c044 <do_ecb>

	if (cipher_text_le) {
   1c0be:	b125      	cbz	r5, 1c0ca <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1c0c0:	4628      	mov	r0, r5
   1c0c2:	2210      	movs	r2, #16
   1c0c4:	a908      	add	r1, sp, #32
   1c0c6:	f7f3 fa99 	bl	f5fc <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1c0ca:	b124      	cbz	r4, 1c0d6 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1c0cc:	4620      	mov	r0, r4
   1c0ce:	2210      	movs	r2, #16
   1c0d0:	a908      	add	r1, sp, #32
   1c0d2:	f005 fb88 	bl	217e6 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1c0d6:	b00c      	add	sp, #48	; 0x30
   1c0d8:	bd70      	pop	{r4, r5, r6, pc}
   1c0da:	bf00      	nop

0001c0dc <sw_switch.isra.0>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   1c0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1c0e0:	f8df 824c 	ldr.w	r8, [pc, #588]	; 1c330 <sw_switch.isra.0+0x254>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c0e4:	f8df a23c 	ldr.w	sl, [pc, #572]	; 1c324 <sw_switch.isra.0+0x248>
   1c0e8:	f998 7000 	ldrsb.w	r7, [r8]
   1c0ec:	4b88      	ldr	r3, [pc, #544]	; (1c310 <sw_switch.isra.0+0x234>)
   1c0ee:	f898 6000 	ldrb.w	r6, [r8]
   1c0f2:	f8ca 3560 	str.w	r3, [sl, #1376]	; 0x560
   1c0f6:	f107 030b 	add.w	r3, r7, #11
   1c0fa:	b2db      	uxtb	r3, r3
   1c0fc:	00db      	lsls	r3, r3, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1c0fe:	4c85      	ldr	r4, [pc, #532]	; (1c314 <sw_switch.isra.0+0x238>)
   1c100:	f8df e230 	ldr.w	lr, [pc, #560]	; 1c334 <sw_switch.isra.0+0x258>
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1c104:	ea4f 09c6 	mov.w	r9, r6, lsl #3
   1c108:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c10c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1c110:	f109 4c80 	add.w	ip, r9, #1073741824	; 0x40000000
   1c114:	f50c 3cf8 	add.w	ip, ip, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1c118:	eb04 0b86 	add.w	fp, r4, r6, lsl #2
   1c11c:	f107 0508 	add.w	r5, r7, #8
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c120:	f107 0410 	add.w	r4, r7, #16
   1c124:	f8ca c564 	str.w	ip, [sl, #1380]	; 0x564

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c128:	44ce      	add	lr, r9
   1c12a:	f8c3 b510 	str.w	fp, [r3, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   1c12e:	b2e4      	uxtb	r4, r4
   1c130:	b2ed      	uxtb	r5, r5
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1c132:	fa0f fc86 	sxth.w	ip, r6
   1c136:	b1e8      	cbz	r0, 1c174 <sw_switch.isra.0+0x98>
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1c138:	2a02      	cmp	r2, #2
   1c13a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
   1c13e:	d04d      	beq.n	1c1dc <sw_switch.isra.0+0x100>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
   1c140:	f24a 593c 	movw	r9, #42300	; 0xa53c
   1c144:	f649 70c4 	movw	r0, #40900	; 0x9fc4
   1c148:	2a04      	cmp	r2, #4
   1c14a:	bf18      	it	ne
   1c14c:	4681      	movne	r9, r0
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1c14e:	2902      	cmp	r1, #2
   1c150:	f000 80b1 	beq.w	1c2b6 <sw_switch.isra.0+0x1da>
   1c154:	2904      	cmp	r1, #4
   1c156:	f040 80a4 	bne.w	1c2a2 <sw_switch.isra.0+0x1c6>
   1c15a:	486f      	ldr	r0, [pc, #444]	; (1c318 <sw_switch.isra.0+0x23c>)
   1c15c:	f509 49eb 	add.w	r9, r9, #30080	; 0x7580
   1c160:	f109 0914 	add.w	r9, r9, #20
   1c164:	fba0 0909 	umull	r0, r9, r0, r9
   1c168:	ea4f 1999 	mov.w	r9, r9, lsr #6

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c16c:	486b      	ldr	r0, [pc, #428]	; (1c31c <sw_switch.isra.0+0x240>)
   1c16e:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
		uint8_t ppi_dis =
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
			    sw_tifs_toggle);

		if (phy_curr & BIT(2)) {
   1c172:	e040      	b.n	1c1f6 <sw_switch.isra.0+0x11a>
   1c174:	00e4      	lsls	r4, r4, #3
   1c176:	00ed      	lsls	r5, r5, #3
   1c178:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1c17c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   1c180:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1c184:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
   1c188:	4a65      	ldr	r2, [pc, #404]	; (1c320 <sw_switch.isra.0+0x244>)
   1c18a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	} else {
		/* RX */
		delay = HAL_RADIO_NS2US_CEIL(
   1c18e:	f04f 0928 	mov.w	r9, #40	; 0x28
static inline void hal_radio_sw_switch_coded_config_clear(uint8_t ppi_en,
	uint8_t ppi_dis, uint8_t cc_reg, uint8_t group_index)
{
	/* Invalidate PPI used when RXing on LE Coded PHY. */
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(
		ppi_en) = 0;
   1c192:	f8c4 0510 	str.w	r0, [r4, #1296]	; 0x510
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(
		ppi_en) = 0;
   1c196:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514

	/* Wire the Group task disable to the default EVENTS_COMPARE. */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		ppi_dis) =
   1c19a:	f8c5 b510 	str.w	fp, [r5, #1296]	; 0x510
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(cc_reg);
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		ppi_dis) =
   1c19e:	f8c5 e514 	str.w	lr, [r5, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   1c1a2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   1c1a6:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   1c1aa:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   1c1ae:	3601      	adds	r6, #1
		SW_SWITCH_TIMER->CC[cc]) {
   1c1b0:	f8dc 3540 	ldr.w	r3, [ip, #1344]	; 0x540
	if (delay <
   1c1b4:	454b      	cmp	r3, r9
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1c1b6:	bf8a      	itet	hi
   1c1b8:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1c1bc:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1c1be:	eba3 0309 	subhi.w	r3, r3, r9
   1c1c2:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
    p_reg->CHENSET = mask;
   1c1c6:	4b57      	ldr	r3, [pc, #348]	; (1c324 <sw_switch.isra.0+0x248>)
	sw_tifs_toggle &= 1;
   1c1c8:	f006 0601 	and.w	r6, r6, #1
   1c1cc:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1c1d0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1c1d4:	f888 6000 	strb.w	r6, [r8]
}
   1c1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1dc:	2902      	cmp	r1, #2
   1c1de:	f000 8090 	beq.w	1c302 <sw_switch.isra.0+0x226>
   1c1e2:	2904      	cmp	r1, #4
   1c1e4:	f000 808a 	beq.w	1c2fc <sw_switch.isra.0+0x220>
   1c1e8:	f04f 0931 	mov.w	r9, #49	; 0x31
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c1ec:	484b      	ldr	r0, [pc, #300]	; (1c31c <sw_switch.isra.0+0x240>)
   1c1ee:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
		if (phy_curr & BIT(2)) {
   1c1f2:	074b      	lsls	r3, r1, #29
   1c1f4:	d56b      	bpl.n	1c2ce <sw_switch.isra.0+0x1f2>
	switch (phy) {
   1c1f6:	2a02      	cmp	r2, #2
   1c1f8:	d07d      	beq.n	1c2f6 <sw_switch.isra.0+0x21a>
   1c1fa:	f24a 10b8 	movw	r0, #41400	; 0xa1b8
   1c1fe:	f24a 7330 	movw	r3, #42800	; 0xa730
   1c202:	2a04      	cmp	r2, #4
   1c204:	bf14      	ite	ne
   1c206:	4602      	movne	r2, r0
   1c208:	461a      	moveq	r2, r3
			    SW_SWITCH_TIMER_S2_EVTS_COMP(sw_tifs_toggle);
   1c20a:	3702      	adds	r7, #2
   1c20c:	b2ff      	uxtb	r7, r7
   1c20e:	00b8      	lsls	r0, r7, #2
				SW_SWITCH_TIMER->CC[cc];
   1c210:	f8df b124 	ldr.w	fp, [pc, #292]	; 1c338 <sw_switch.isra.0+0x25c>
   1c214:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1c218:	f506 73a8 	add.w	r3, r6, #336	; 0x150
   1c21c:	f500 4010 	add.w	r0, r0, #36864	; 0x9000
   1c220:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
			SW_SWITCH_TIMER->CC[cc_s2] =
   1c224:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
#if defined(CONFIG_BT_CTLR_PHY_CODED)
	case BIT(2):
		if (flags & 0x01) {
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S8_NS;
		} else {
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_NS;
   1c228:	f246 0b18 	movw	fp, #24600	; 0x6018
   1c22c:	f242 43b8 	movw	r3, #9400	; 0x24b8
   1c230:	2904      	cmp	r1, #4
   1c232:	bf14      	ite	ne
   1c234:	4619      	movne	r1, r3
   1c236:	4659      	moveq	r1, fp
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1c238:	440a      	add	r2, r1
   1c23a:	4937      	ldr	r1, [pc, #220]	; (1c318 <sw_switch.isra.0+0x23c>)
			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   1c23c:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1c240:	fba1 1202 	umull	r1, r2, r1, r2
			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   1c244:	ebb3 1f92 	cmp.w	r3, r2, lsr #6
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   1c248:	bf88      	it	hi
   1c24a:	f8d0 3540 	ldrhi.w	r3, [r0, #1344]	; 0x540
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1c24e:	ea4f 1192 	mov.w	r1, r2, lsr #6
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   1c252:	bf8c      	ite	hi
   1c254:	1a5b      	subhi	r3, r3, r1
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   1c256:	2301      	movls	r3, #1
   1c258:	00e4      	lsls	r4, r4, #3
   1c25a:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
   1c25e:	00ed      	lsls	r5, r5, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
   1c260:	4b2c      	ldr	r3, [pc, #176]	; (1c314 <sw_switch.isra.0+0x238>)
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   1c262:	4931      	ldr	r1, [pc, #196]	; (1c328 <sw_switch.isra.0+0x24c>)
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   1c264:	4a2f      	ldr	r2, [pc, #188]	; (1c324 <sw_switch.isra.0+0x248>)
   1c266:	4831      	ldr	r0, [pc, #196]	; (1c32c <sw_switch.isra.0+0x250>)
   1c268:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1c26c:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1c270:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
   1c274:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   1c278:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   1c27c:	4b27      	ldr	r3, [pc, #156]	; (1c31c <sw_switch.isra.0+0x240>)
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   1c27e:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   1c282:	4451      	add	r1, sl
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   1c284:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1c288:	f44f 2380 	mov.w	r3, #262144	; 0x40000
	    ppi_dis)	=
   1c28c:	f8c5 7510 	str.w	r7, [r5, #1296]	; 0x510
	    ppi_dis) =
   1c290:	f8c5 e514 	str.w	lr, [r5, #1300]	; 0x514
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   1c294:	f8c2 05a0 	str.w	r0, [r2, #1440]	; 0x5a0
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
   1c298:	f8c2 15a4 	str.w	r1, [r2, #1444]	; 0x5a4
   1c29c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1c2a0:	e77f      	b.n	1c1a2 <sw_switch.isra.0+0xc6>
   1c2a2:	481d      	ldr	r0, [pc, #116]	; (1c318 <sw_switch.isra.0+0x23c>)
   1c2a4:	f509 591a 	add.w	r9, r9, #9856	; 0x2680
   1c2a8:	f109 092c 	add.w	r9, r9, #44	; 0x2c
   1c2ac:	fba0 0909 	umull	r0, r9, r0, r9
   1c2b0:	ea4f 1999 	mov.w	r9, r9, lsr #6
   1c2b4:	e79a      	b.n	1c1ec <sw_switch.isra.0+0x110>
		delay = HAL_RADIO_NS2US_ROUND(
   1c2b6:	4a18      	ldr	r2, [pc, #96]	; (1c318 <sw_switch.isra.0+0x23c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c2b8:	4918      	ldr	r1, [pc, #96]	; (1c31c <sw_switch.isra.0+0x240>)
   1c2ba:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   1c2be:	f509 59ab 	add.w	r9, r9, #5472	; 0x1560
   1c2c2:	f109 091c 	add.w	r9, r9, #28
   1c2c6:	fba2 3909 	umull	r3, r9, r2, r9
   1c2ca:	ea4f 1999 	mov.w	r9, r9, lsr #6
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(
   1c2ce:	00e4      	lsls	r4, r4, #3
   1c2d0:	00ed      	lsls	r5, r5, #3
   1c2d2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1c2d6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   1c2da:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1c2de:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
		ppi_en) = 0;
   1c2e2:	2300      	movs	r3, #0
   1c2e4:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
		ppi_en) = 0;
   1c2e8:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
		ppi_dis) =
   1c2ec:	f8c5 b510 	str.w	fp, [r5, #1296]	; 0x510
		ppi_dis) =
   1c2f0:	f8c5 e514 	str.w	lr, [r5, #1300]	; 0x514
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
			group_index);
}
   1c2f4:	e755      	b.n	1c1a2 <sw_switch.isra.0+0xc6>
	switch (phy) {
   1c2f6:	f649 6234 	movw	r2, #40500	; 0x9e34
   1c2fa:	e786      	b.n	1c20a <sw_switch.isra.0+0x12e>
	switch (phy) {
   1c2fc:	f04f 0946 	mov.w	r9, #70	; 0x46
   1c300:	e734      	b.n	1c16c <sw_switch.isra.0+0x90>
   1c302:	4a06      	ldr	r2, [pc, #24]	; (1c31c <sw_switch.isra.0+0x240>)
   1c304:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
   1c308:	f04f 092d 	mov.w	r9, #45	; 0x2d
   1c30c:	e7df      	b.n	1c2ce <sw_switch.isra.0+0x1f2>
   1c30e:	bf00      	nop
   1c310:	4000110c 	.word	0x4000110c
   1c314:	40009140 	.word	0x40009140
   1c318:	10624dd3 	.word	0x10624dd3
   1c31c:	40001000 	.word	0x40001000
   1c320:	40001004 	.word	0x40001004
   1c324:	4001f000 	.word	0x4001f000
   1c328:	40009040 	.word	0x40009040
   1c32c:	40001150 	.word	0x40001150
   1c330:	2000309b 	.word	0x2000309b
   1c334:	4001f004 	.word	0x4001f004
   1c338:	40009000 	.word	0x40009000

0001c33c <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1c33c:	4b04      	ldr	r3, [pc, #16]	; (1c350 <isr_radio+0x14>)
   1c33e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1c342:	b123      	cbz	r3, 1c34e <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1c344:	4a03      	ldr	r2, [pc, #12]	; (1c354 <isr_radio+0x18>)
   1c346:	4b04      	ldr	r3, [pc, #16]	; (1c358 <isr_radio+0x1c>)
   1c348:	6810      	ldr	r0, [r2, #0]
   1c34a:	681b      	ldr	r3, [r3, #0]
   1c34c:	4718      	bx	r3
}
   1c34e:	4770      	bx	lr
   1c350:	40001000 	.word	0x40001000
   1c354:	2000287c 	.word	0x2000287c
   1c358:	20002878 	.word	0x20002878

0001c35c <radio_isr_set>:
{
   1c35c:	b538      	push	{r3, r4, r5, lr}
   1c35e:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1c360:	2001      	movs	r0, #1
{
   1c362:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1c364:	f7ea fa06 	bl	6774 <arch_irq_disable>
	isr_cb_param = param;
   1c368:	4a08      	ldr	r2, [pc, #32]	; (1c38c <radio_isr_set+0x30>)
	isr_cb = cb;
   1c36a:	4809      	ldr	r0, [pc, #36]	; (1c390 <radio_isr_set+0x34>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c36c:	4b09      	ldr	r3, [pc, #36]	; (1c394 <radio_isr_set+0x38>)
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1c36e:	490a      	ldr	r1, [pc, #40]	; (1c398 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1c370:	6015      	str	r5, [r2, #0]
   1c372:	2510      	movs	r5, #16
   1c374:	2202      	movs	r2, #2
	isr_cb = cb;
   1c376:	6004      	str	r4, [r0, #0]
   1c378:	f8c1 5304 	str.w	r5, [r1, #772]	; 0x304
	irq_enable(RADIO_IRQn);
   1c37c:	2001      	movs	r0, #1
   1c37e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1c382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1c386:	f7ea b9e5 	b.w	6754 <arch_irq_enable>
   1c38a:	bf00      	nop
   1c38c:	2000287c 	.word	0x2000287c
   1c390:	20002878 	.word	0x20002878
   1c394:	e000e100 	.word	0xe000e100
   1c398:	40001000 	.word	0x40001000

0001c39c <radio_reset>:
{
   1c39c:	b538      	push	{r3, r4, r5, lr}
	irq_disable(RADIO_IRQn);
   1c39e:	2001      	movs	r0, #1
   1c3a0:	f7ea f9e8 	bl	6774 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1c3a4:	4b0b      	ldr	r3, [pc, #44]	; (1c3d4 <radio_reset+0x38>)
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1c3a6:	490c      	ldr	r1, [pc, #48]	; (1c3d8 <radio_reset+0x3c>)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(1));
#else
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1c3a8:	4a0c      	ldr	r2, [pc, #48]	; (1c3dc <radio_reset+0x40>)
   1c3aa:	4c0d      	ldr	r4, [pc, #52]	; (1c3e0 <radio_reset+0x44>)
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1c3ac:	480d      	ldr	r0, [pc, #52]	; (1c3e4 <radio_reset+0x48>)
   1c3ae:	2500      	movs	r5, #0
   1c3b0:	f8c3 5ffc 	str.w	r5, [r3, #4092]	; 0xffc
   1c3b4:	2501      	movs	r5, #1
   1c3b6:	f8c3 5ffc 	str.w	r5, [r3, #4092]	; 0xffc
   1c3ba:	680b      	ldr	r3, [r1, #0]
					 0xfffffffe) | 0x01000000;
   1c3bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1c3c0:	f023 0301 	bic.w	r3, r3, #1
   1c3c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1c3c8:	600b      	str	r3, [r1, #0]
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1c3ca:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1c3ce:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
}
   1c3d2:	bd38      	pop	{r3, r4, r5, pc}
   1c3d4:	40001000 	.word	0x40001000
   1c3d8:	40001774 	.word	0x40001774
   1c3dc:	4001f000 	.word	0x4001f000
   1c3e0:	00010900 	.word	0x00010900
   1c3e4:	00021200 	.word	0x00021200

0001c3e8 <radio_phy_set>:
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1c3e8:	4a13      	ldr	r2, [pc, #76]	; (1c438 <radio_phy_set+0x50>)
	switch (phy) {
   1c3ea:	2802      	cmp	r0, #2
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1c3ec:	6813      	ldr	r3, [r2, #0]
	switch (phy) {
   1c3ee:	d00f      	beq.n	1c410 <radio_phy_set+0x28>
   1c3f0:	2804      	cmp	r0, #4
   1c3f2:	d012      	beq.n	1c41a <radio_phy_set+0x32>
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1c3f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1c3f8:	6013      	str	r3, [r2, #0]
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   1c3fa:	2103      	movs	r1, #3
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1c3fc:	4b0f      	ldr	r3, [pc, #60]	; (1c43c <radio_phy_set+0x54>)
   1c3fe:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1c402:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1c406:	f042 0201 	orr.w	r2, r2, #1
   1c40a:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1c40e:	4770      	bx	lr
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1c410:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1c414:	6013      	str	r3, [r2, #0]
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1c416:	2104      	movs	r1, #4
		break;
   1c418:	e7f0      	b.n	1c3fc <radio_phy_set+0x14>
		*(volatile uint32_t *)0x4000173c |= 0x80000000;
   1c41a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c41e:	6013      	str	r3, [r2, #0]
				((*(volatile uint32_t *)0x4000173c) & 0xFFFFFF00) |
   1c420:	6813      	ldr	r3, [r2, #0]
   1c422:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
		if (flags & 0x01) {
   1c426:	f001 0101 	and.w	r1, r1, #1
				((*(volatile uint32_t *)0x4000173c) & 0xFFFFFF00) |
   1c42a:	f043 035c 	orr.w	r3, r3, #92	; 0x5c
		if (flags & 0x01) {
   1c42e:	f1c1 0106 	rsb	r1, r1, #6
		*(volatile uint32_t *)0x4000173c =
   1c432:	6013      	str	r3, [r2, #0]
		break;
   1c434:	e7e2      	b.n	1c3fc <radio_phy_set+0x14>
   1c436:	bf00      	nop
   1c438:	4000173c 	.word	0x4000173c
   1c43c:	40001000 	.word	0x40001000

0001c440 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1c440:	4b01      	ldr	r3, [pc, #4]	; (1c448 <radio_tx_power_set+0x8>)
   1c442:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1c446:	4770      	bx	lr
   1c448:	40001000 	.word	0x40001000

0001c44c <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1c44c:	4b01      	ldr	r3, [pc, #4]	; (1c454 <radio_freq_chan_set+0x8>)
   1c44e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1c452:	4770      	bx	lr
   1c454:	40001000 	.word	0x40001000

0001c458 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1c458:	4b07      	ldr	r3, [pc, #28]	; (1c478 <radio_whiten_iv_set+0x20>)
   1c45a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1c45e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1c462:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1c466:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1c46a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1c46e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1c472:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1c476:	4770      	bx	lr
   1c478:	40001000 	.word	0x40001000

0001c47c <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1c47c:	4a0b      	ldr	r2, [pc, #44]	; (1c4ac <radio_aa_set+0x30>)
   1c47e:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1c480:	2301      	movs	r3, #1
{
   1c482:	b410      	push	{r4}
	NRF_RADIO->TXADDRESS =
   1c484:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1c488:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1c48c:	78c3      	ldrb	r3, [r0, #3]
   1c48e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1c492:	7843      	ldrb	r3, [r0, #1]
   1c494:	7884      	ldrb	r4, [r0, #2]
   1c496:	7801      	ldrb	r1, [r0, #0]
   1c498:	041b      	lsls	r3, r3, #16
   1c49a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   1c49e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   1c4a2:	bc10      	pop	{r4}
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1c4a4:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1c4a8:	4770      	bx	lr
   1c4aa:	bf00      	nop
   1c4ac:	40001000 	.word	0x40001000

0001c4b0 <radio_pkt_configure>:
	phy = (flags >> 1) & 0x07; /* phy */
   1c4b0:	f3c2 0342 	ubfx	r3, r2, #1, #3
	switch (phy) {
   1c4b4:	2b02      	cmp	r3, #2
{
   1c4b6:	b410      	push	{r4}
	uint8_t dc = flags & 0x01; /* Adv or Data channel */
   1c4b8:	f002 0201 	and.w	r2, r2, #1
	switch (phy) {
   1c4bc:	d024      	beq.n	1c508 <radio_pkt_configure+0x58>
		extra |= (3UL << RADIO_PCNF0_TERMLEN_Pos) &
   1c4be:	2b04      	cmp	r3, #4
   1c4c0:	bf14      	ite	ne
   1c4c2:	2400      	movne	r4, #0
   1c4c4:	f04f 44c7 	moveq.w	r4, #1669332992	; 0x63800000
	if (dc) {
   1c4c8:	b10a      	cbz	r2, 1c4ce <radio_pkt_configure+0x1e>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1c4ca:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1c4ce:	f1c0 0308 	rsb	r3, r0, #8
   1c4d2:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1c4d4:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1c4d8:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1c4da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1c4de:	4a0d      	ldr	r2, [pc, #52]	; (1c514 <radio_pkt_configure+0x64>)
}
   1c4e0:	bc10      	pop	{r4}
			    RADIO_PCNF0_S1LEN_Msk) |
   1c4e2:	4303      	orrs	r3, r0
   1c4e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1c4e8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1c4ec:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1c4f0:	4809      	ldr	r0, [pc, #36]	; (1c518 <radio_pkt_configure+0x68>)
   1c4f2:	4018      	ands	r0, r3
   1c4f4:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1c4f8:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1c4fc:	4319      	orrs	r1, r3
   1c4fe:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1c502:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1c506:	4770      	bx	lr
	switch (phy) {
   1c508:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	if (dc) {
   1c50c:	2a00      	cmp	r2, #0
   1c50e:	d0de      	beq.n	1c4ce <radio_pkt_configure+0x1e>
   1c510:	e7db      	b.n	1c4ca <radio_pkt_configure+0x1a>
   1c512:	bf00      	nop
   1c514:	40001000 	.word	0x40001000
   1c518:	fef80000 	.word	0xfef80000

0001c51c <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1c51c:	4b01      	ldr	r3, [pc, #4]	; (1c524 <radio_pkt_rx_set+0x8>)
   1c51e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1c522:	4770      	bx	lr
   1c524:	40001000 	.word	0x40001000

0001c528 <radio_pkt_tx_set>:
   1c528:	4b01      	ldr	r3, [pc, #4]	; (1c530 <radio_pkt_tx_set+0x8>)
   1c52a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1c52e:	4770      	bx	lr
   1c530:	40001000 	.word	0x40001000

0001c534 <radio_tx_ready_delay_get>:
	switch (phy) {
   1c534:	2802      	cmp	r0, #2
   1c536:	d004      	beq.n	1c542 <radio_tx_ready_delay_get+0xe>
   1c538:	2804      	cmp	r0, #4
			return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_S8_US;
   1c53a:	bf14      	ite	ne
   1c53c:	2029      	movne	r0, #41	; 0x29
   1c53e:	202a      	moveq	r0, #42	; 0x2a
   1c540:	4770      	bx	lr
	switch (phy) {
   1c542:	2028      	movs	r0, #40	; 0x28
}
   1c544:	4770      	bx	lr
   1c546:	bf00      	nop

0001c548 <radio_tx_chain_delay_get>:
}
   1c548:	2001      	movs	r0, #1
   1c54a:	4770      	bx	lr

0001c54c <radio_rx_ready_delay_get>:
}
   1c54c:	2029      	movs	r0, #41	; 0x29
   1c54e:	4770      	bx	lr

0001c550 <radio_rx_chain_delay_get>:
	switch (phy) {
   1c550:	2802      	cmp	r0, #2
   1c552:	d009      	beq.n	1c568 <radio_rx_chain_delay_get+0x18>
   1c554:	2804      	cmp	r0, #4
   1c556:	d105      	bne.n	1c564 <radio_rx_chain_delay_get+0x14>
		if (flags & 0x01) {
   1c558:	f011 0f01 	tst.w	r1, #1
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_US;
   1c55c:	bf14      	ite	ne
   1c55e:	201e      	movne	r0, #30
   1c560:	2019      	moveq	r0, #25
   1c562:	4770      	bx	lr
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   1c564:	200a      	movs	r0, #10
}
   1c566:	4770      	bx	lr
	switch (phy) {
   1c568:	2005      	movs	r0, #5
   1c56a:	4770      	bx	lr

0001c56c <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c56c:	4b01      	ldr	r3, [pc, #4]	; (1c574 <radio_rx_enable+0x8>)
   1c56e:	2201      	movs	r2, #1
   1c570:	601a      	str	r2, [r3, #0]
}
   1c572:	4770      	bx	lr
   1c574:	40001004 	.word	0x40001004

0001c578 <radio_tx_enable>:
   1c578:	4b01      	ldr	r3, [pc, #4]	; (1c580 <radio_tx_enable+0x8>)
   1c57a:	2201      	movs	r2, #1
   1c57c:	601a      	str	r2, [r3, #0]
}
   1c57e:	4770      	bx	lr
   1c580:	40001000 	.word	0x40001000

0001c584 <radio_disable>:
{
   1c584:	b430      	push	{r4, r5}
    p_reg->CHENCLR = mask;
   1c586:	4a08      	ldr	r2, [pc, #32]	; (1c5a8 <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   1c588:	4808      	ldr	r0, [pc, #32]	; (1c5ac <radio_disable+0x28>)
   1c58a:	4909      	ldr	r1, [pc, #36]	; (1c5b0 <radio_disable+0x2c>)
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1c58c:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1c58e:	f44f 6590 	mov.w	r5, #1152	; 0x480
   1c592:	2400      	movs	r4, #0
   1c594:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1c598:	6053      	str	r3, [r2, #4]
   1c59a:	60d3      	str	r3, [r2, #12]
   1c59c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   1c5a0:	bc30      	pop	{r4, r5}
   1c5a2:	600b      	str	r3, [r1, #0]
   1c5a4:	4770      	bx	lr
   1c5a6:	bf00      	nop
   1c5a8:	4001f000 	.word	0x4001f000
   1c5ac:	40001000 	.word	0x40001000
   1c5b0:	40001010 	.word	0x40001010

0001c5b4 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1c5b4:	4b04      	ldr	r3, [pc, #16]	; (1c5c8 <radio_status_reset+0x14>)
   1c5b6:	2200      	movs	r2, #0
   1c5b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1c5bc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1c5c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1c5c4:	4770      	bx	lr
   1c5c6:	bf00      	nop
   1c5c8:	40001000 	.word	0x40001000

0001c5cc <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1c5cc:	4b03      	ldr	r3, [pc, #12]	; (1c5dc <radio_is_ready+0x10>)
   1c5ce:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1c5d2:	3800      	subs	r0, #0
   1c5d4:	bf18      	it	ne
   1c5d6:	2001      	movne	r0, #1
   1c5d8:	4770      	bx	lr
   1c5da:	bf00      	nop
   1c5dc:	40001000 	.word	0x40001000

0001c5e0 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1c5e0:	4b03      	ldr	r3, [pc, #12]	; (1c5f0 <radio_is_done+0x10>)
   1c5e2:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1c5e6:	3800      	subs	r0, #0
   1c5e8:	bf18      	it	ne
   1c5ea:	2001      	movne	r0, #1
   1c5ec:	4770      	bx	lr
   1c5ee:	bf00      	nop
   1c5f0:	40001000 	.word	0x40001000

0001c5f4 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1c5f4:	4b03      	ldr	r3, [pc, #12]	; (1c604 <radio_is_idle+0x10>)
   1c5f6:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1c5fa:	fab0 f080 	clz	r0, r0
   1c5fe:	0940      	lsrs	r0, r0, #5
   1c600:	4770      	bx	lr
   1c602:	bf00      	nop
   1c604:	40001000 	.word	0x40001000

0001c608 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1c608:	4b04      	ldr	r3, [pc, #16]	; (1c61c <radio_crc_configure+0x14>)
   1c60a:	f240 1203 	movw	r2, #259	; 0x103
   1c60e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1c612:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1c616:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1c61a:	4770      	bx	lr
   1c61c:	40001000 	.word	0x40001000

0001c620 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1c620:	4b03      	ldr	r3, [pc, #12]	; (1c630 <radio_crc_is_valid+0x10>)
   1c622:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1c626:	3800      	subs	r0, #0
   1c628:	bf18      	it	ne
   1c62a:	2001      	movne	r0, #1
   1c62c:	4770      	bx	lr
   1c62e:	bf00      	nop
   1c630:	40001000 	.word	0x40001000

0001c634 <radio_pkt_empty_get>:
}
   1c634:	4800      	ldr	r0, [pc, #0]	; (1c638 <radio_pkt_empty_get+0x4>)
   1c636:	4770      	bx	lr
   1c638:	20002770 	.word	0x20002770

0001c63c <radio_pkt_scratch_get>:
}
   1c63c:	4800      	ldr	r0, [pc, #0]	; (1c640 <radio_pkt_scratch_get+0x4>)
   1c63e:	4770      	bx	lr
   1c640:	20002774 	.word	0x20002774

0001c644 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1c644:	4b05      	ldr	r3, [pc, #20]	; (1c65c <radio_switch_complete_and_rx+0x18>)
{
   1c646:	b410      	push	{r4}
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1c648:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1c64a:	2403      	movs	r4, #3
{
   1c64c:	4602      	mov	r2, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1c64e:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1c652:	4608      	mov	r0, r1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1c654:	bc10      	pop	{r4}
	sw_switch(0, 0, 0, phy_rx, 0);
   1c656:	f7ff bd41 	b.w	1c0dc <sw_switch.isra.0>
   1c65a:	bf00      	nop
   1c65c:	40001000 	.word	0x40001000

0001c660 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1c660:	4b04      	ldr	r3, [pc, #16]	; (1c674 <radio_switch_complete_and_tx+0x14>)
{
   1c662:	b410      	push	{r4}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1c664:	2403      	movs	r4, #3
{
   1c666:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1c668:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1c66c:	2001      	movs	r0, #1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1c66e:	bc10      	pop	{r4}
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1c670:	f7ff bd34 	b.w	1c0dc <sw_switch.isra.0>
   1c674:	40001000 	.word	0x40001000

0001c678 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1c678:	4904      	ldr	r1, [pc, #16]	; (1c68c <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1c67a:	4b05      	ldr	r3, [pc, #20]	; (1c690 <radio_switch_complete_and_disable+0x18>)
   1c67c:	2003      	movs	r0, #3
   1c67e:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1c682:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1c686:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1c68a:	4770      	bx	lr
   1c68c:	40001000 	.word	0x40001000
   1c690:	4001f000 	.word	0x4001f000

0001c694 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1c694:	4a03      	ldr	r2, [pc, #12]	; (1c6a4 <radio_rssi_measure+0x10>)
   1c696:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1c69a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1c69e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1c6a2:	4770      	bx	lr
   1c6a4:	40001000 	.word	0x40001000

0001c6a8 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1c6a8:	4b01      	ldr	r3, [pc, #4]	; (1c6b0 <radio_rssi_get+0x8>)
   1c6aa:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1c6ae:	4770      	bx	lr
   1c6b0:	40001000 	.word	0x40001000

0001c6b4 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1c6b4:	4b02      	ldr	r3, [pc, #8]	; (1c6c0 <radio_rssi_status_reset+0xc>)
   1c6b6:	2200      	movs	r2, #0
   1c6b8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1c6bc:	4770      	bx	lr
   1c6be:	bf00      	nop
   1c6c0:	40001000 	.word	0x40001000

0001c6c4 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1c6c4:	4b03      	ldr	r3, [pc, #12]	; (1c6d4 <radio_rssi_is_ready+0x10>)
   1c6c6:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1c6ca:	3800      	subs	r0, #0
   1c6cc:	bf18      	it	ne
   1c6ce:	2001      	movne	r0, #1
   1c6d0:	4770      	bx	lr
   1c6d2:	bf00      	nop
   1c6d4:	40001000 	.word	0x40001000

0001c6d8 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1c6d8:	b430      	push	{r4, r5}
   1c6da:	2400      	movs	r4, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1c6dc:	00a3      	lsls	r3, r4, #2
   1c6de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c6e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1c6e6:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1c6e8:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1c6ec:	3401      	adds	r4, #1
   1c6ee:	8895      	ldrh	r5, [r2, #4]
   1c6f0:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1c6f4:	2c08      	cmp	r4, #8
		bdaddr += 6;
   1c6f6:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1c6fa:	d1ef      	bne.n	1c6dc <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1c6fc:	4b03      	ldr	r3, [pc, #12]	; (1c70c <radio_filter_configure+0x34>)
   1c6fe:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
}
   1c702:	bc30      	pop	{r4, r5}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1c704:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1c708:	4770      	bx	lr
   1c70a:	bf00      	nop
   1c70c:	40001000 	.word	0x40001000

0001c710 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1c710:	4a03      	ldr	r2, [pc, #12]	; (1c720 <radio_filter_disable+0x10>)
   1c712:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1c716:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1c71a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1c71e:	4770      	bx	lr
   1c720:	40001000 	.word	0x40001000

0001c724 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1c724:	4b02      	ldr	r3, [pc, #8]	; (1c730 <radio_filter_status_reset+0xc>)
   1c726:	2200      	movs	r2, #0
   1c728:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1c72c:	4770      	bx	lr
   1c72e:	bf00      	nop
   1c730:	40001000 	.word	0x40001000

0001c734 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1c734:	4b03      	ldr	r3, [pc, #12]	; (1c744 <radio_filter_has_match+0x10>)
   1c736:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1c73a:	3800      	subs	r0, #0
   1c73c:	bf18      	it	ne
   1c73e:	2001      	movne	r0, #1
   1c740:	4770      	bx	lr
   1c742:	bf00      	nop
   1c744:	40001000 	.word	0x40001000

0001c748 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1c748:	4b01      	ldr	r3, [pc, #4]	; (1c750 <radio_filter_match_get+0x8>)
   1c74a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1c74e:	4770      	bx	lr
   1c750:	40001000 	.word	0x40001000

0001c754 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1c754:	4904      	ldr	r1, [pc, #16]	; (1c768 <radio_tmr_status_reset+0x14>)
   1c756:	4b05      	ldr	r3, [pc, #20]	; (1c76c <radio_tmr_status_reset+0x18>)
   1c758:	4a05      	ldr	r2, [pc, #20]	; (1c770 <radio_tmr_status_reset+0x1c>)
   1c75a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1c75e:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1c762:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1c766:	4770      	bx	lr
   1c768:	4000b000 	.word	0x4000b000
   1c76c:	4001f000 	.word	0x4001f000
   1c770:	0e742060 	.word	0x0e742060

0001c774 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1c774:	4b03      	ldr	r3, [pc, #12]	; (1c784 <radio_tmr_tifs_set+0x10>)
   1c776:	4a04      	ldr	r2, [pc, #16]	; (1c788 <radio_tmr_tifs_set+0x14>)
   1c778:	781b      	ldrb	r3, [r3, #0]
   1c77a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1c77e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1c782:	4770      	bx	lr
   1c784:	2000309b 	.word	0x2000309b
   1c788:	40009000 	.word	0x40009000

0001c78c <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1c78c:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1c78e:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1c792:	4d2a      	ldr	r5, [pc, #168]	; (1c83c <radio_tmr_start+0xb0>)
   1c794:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1c798:	42ab      	cmp	r3, r5
{
   1c79a:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1c79c:	d906      	bls.n	1c7ac <radio_tmr_start+0x20>
		ticks_start--;
		remainder += 30517578UL;
   1c79e:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1c7a2:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   1c7a6:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
		ticks_start--;
   1c7aa:	3901      	subs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c7ac:	4d24      	ldr	r5, [pc, #144]	; (1c840 <radio_tmr_start+0xb4>)
	}
	remainder /= 1000000UL;

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1c7ae:	4b25      	ldr	r3, [pc, #148]	; (1c844 <radio_tmr_start+0xb8>)
	remainder /= 1000000UL;
   1c7b0:	4825      	ldr	r0, [pc, #148]	; (1c848 <radio_tmr_start+0xbc>)
   1c7b2:	2601      	movs	r6, #1
   1c7b4:	602e      	str	r6, [r5, #0]
	EVENT_TIMER->MODE = 0;
   1c7b6:	2600      	movs	r6, #0
   1c7b8:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->CC[ch] = cc_val;
   1c7bc:	4d23      	ldr	r5, [pc, #140]	; (1c84c <radio_tmr_start+0xc0>)
	remainder /= 1000000UL;
   1c7be:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1c7c2:	2604      	movs	r6, #4
   1c7c4:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   1c7c8:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1c7ca:	2602      	movs	r6, #2
   1c7cc:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c7d0:	4a1f      	ldr	r2, [pc, #124]	; (1c850 <radio_tmr_start+0xc4>)
    p_reg->CC[cc_channel] = cc_value;
   1c7d2:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1c7d6:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1c7da:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1c7de:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
   1c7e2:	491c      	ldr	r1, [pc, #112]	; (1c854 <radio_tmr_start+0xc8>)
   1c7e4:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538
    p_reg->CHENSET = mask;
   1c7e8:	2120      	movs	r1, #32
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c7ea:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   1c7ee:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1c7f2:	b1e4      	cbz	r4, 1c82e <radio_tmr_start+0xa2>
    p_reg->CHENCLR = mask;
   1c7f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1c7f8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1c7fc:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1c800:	4a13      	ldr	r2, [pc, #76]	; (1c850 <radio_tmr_start+0xc4>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1c802:	4b15      	ldr	r3, [pc, #84]	; (1c858 <radio_tmr_start+0xcc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c804:	4915      	ldr	r1, [pc, #84]	; (1c85c <radio_tmr_start+0xd0>)
   1c806:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   1c80a:	2500      	movs	r5, #0
   1c80c:	2401      	movs	r4, #1
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c80e:	4e14      	ldr	r6, [pc, #80]	; (1c860 <radio_tmr_start+0xd4>)
   1c810:	600c      	str	r4, [r1, #0]
	SW_SWITCH_TIMER->PRESCALER = 4;
   1c812:	2704      	movs	r7, #4
	SW_SWITCH_TIMER->MODE = 0;
   1c814:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1c818:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1c81c:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
   1c820:	601c      	str	r4, [r3, #0]
   1c822:	f8c2 6548 	str.w	r6, [r2, #1352]	; 0x548
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1c826:	bcf0      	pop	{r4, r5, r6, r7}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c828:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
   1c82c:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1c82e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1c832:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1c836:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   1c83a:	e7e1      	b.n	1c800 <radio_tmr_start+0x74>
   1c83c:	7ff0bdbf 	.word	0x7ff0bdbf
   1c840:	4000800c 	.word	0x4000800c
   1c844:	40008000 	.word	0x40008000
   1c848:	431bde83 	.word	0x431bde83
   1c84c:	4000b000 	.word	0x4000b000
   1c850:	4001f000 	.word	0x4001f000
   1c854:	4000b148 	.word	0x4000b148
   1c858:	40009000 	.word	0x40009000
   1c85c:	4000900c 	.word	0x4000900c
   1c860:	4000110c 	.word	0x4000110c

0001c864 <radio_tmr_start_tick>:

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   1c864:	b4f0      	push	{r4, r5, r6, r7}
    p_reg->CC[cc_channel] = cc_value;
   1c866:	4c16      	ldr	r4, [pc, #88]	; (1c8c0 <radio_tmr_start_tick+0x5c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c868:	4f16      	ldr	r7, [pc, #88]	; (1c8c4 <radio_tmr_start_tick+0x60>)
   1c86a:	4e17      	ldr	r6, [pc, #92]	; (1c8c8 <radio_tmr_start_tick+0x64>)
    p_reg->CC[ch] = cc_val;
   1c86c:	4d17      	ldr	r5, [pc, #92]	; (1c8cc <radio_tmr_start_tick+0x68>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c86e:	4b18      	ldr	r3, [pc, #96]	; (1c8d0 <radio_tmr_start_tick+0x6c>)
   1c870:	2201      	movs	r2, #1
   1c872:	603a      	str	r2, [r7, #0]
   1c874:	6032      	str	r2, [r6, #0]
    p_reg->CC[cc_channel] = cc_value;
   1c876:	f8c4 2540 	str.w	r2, [r4, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   1c87a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    p_reg->CC[ch] = cc_val;
   1c87e:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1c882:	f8c5 2344 	str.w	r2, [r5, #836]	; 0x344
   1c886:	4913      	ldr	r1, [pc, #76]	; (1c8d4 <radio_tmr_start_tick+0x70>)
   1c888:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    p_reg->CHENSET = mask;
   1c88c:	2220      	movs	r2, #32
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c88e:	f8c3 453c 	str.w	r4, [r3, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   1c892:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1c896:	b158      	cbz	r0, 1c8b0 <radio_tmr_start_tick+0x4c>
    p_reg->CHENCLR = mask;
   1c898:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1c89c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1c8a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1c8a4:	4a0a      	ldr	r2, [pc, #40]	; (1c8d0 <radio_tmr_start_tick+0x6c>)
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   1c8a6:	2001      	movs	r0, #1
   1c8a8:	bcf0      	pop	{r4, r5, r6, r7}
   1c8aa:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   1c8ae:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1c8b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1c8b4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1c8b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1c8bc:	e7f2      	b.n	1c8a4 <radio_tmr_start_tick+0x40>
   1c8be:	bf00      	nop
   1c8c0:	40008000 	.word	0x40008000
   1c8c4:	40008004 	.word	0x40008004
   1c8c8:	4000800c 	.word	0x4000800c
   1c8cc:	4000b000 	.word	0x4000b000
   1c8d0:	4001f000 	.word	0x4001f000
   1c8d4:	4000b148 	.word	0x4000b148

0001c8d8 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1c8d8:	4b01      	ldr	r3, [pc, #4]	; (1c8e0 <radio_tmr_start_get+0x8>)
   1c8da:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1c8de:	4770      	bx	lr
   1c8e0:	4000b000 	.word	0x4000b000

0001c8e4 <radio_tmr_stop>:

void radio_tmr_stop(void)
{
   1c8e4:	b410      	push	{r4}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c8e6:	4805      	ldr	r0, [pc, #20]	; (1c8fc <radio_tmr_stop+0x18>)
   1c8e8:	4c05      	ldr	r4, [pc, #20]	; (1c900 <radio_tmr_stop+0x1c>)
   1c8ea:	4906      	ldr	r1, [pc, #24]	; (1c904 <radio_tmr_stop+0x20>)
   1c8ec:	4a06      	ldr	r2, [pc, #24]	; (1c908 <radio_tmr_stop+0x24>)
   1c8ee:	2301      	movs	r3, #1
   1c8f0:	6023      	str	r3, [r4, #0]
   1c8f2:	6003      	str	r3, [r0, #0]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1c8f4:	bc10      	pop	{r4}
   1c8f6:	600b      	str	r3, [r1, #0]
   1c8f8:	6013      	str	r3, [r2, #0]
   1c8fa:	4770      	bx	lr
   1c8fc:	40008010 	.word	0x40008010
   1c900:	40008004 	.word	0x40008004
   1c904:	40009004 	.word	0x40009004
   1c908:	40009010 	.word	0x40009010

0001c90c <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1c90c:	4904      	ldr	r1, [pc, #16]	; (1c920 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   1c90e:	4b05      	ldr	r3, [pc, #20]	; (1c924 <radio_tmr_hcto_configure+0x18>)
   1c910:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1c914:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1c918:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1c91c:	4770      	bx	lr
   1c91e:	bf00      	nop
   1c920:	40008000 	.word	0x40008000
   1c924:	4001f000 	.word	0x4001f000

0001c928 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c928:	4b05      	ldr	r3, [pc, #20]	; (1c940 <radio_tmr_aa_capture+0x18>)
   1c92a:	4806      	ldr	r0, [pc, #24]	; (1c944 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c92c:	4906      	ldr	r1, [pc, #24]	; (1c948 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   1c92e:	4a07      	ldr	r2, [pc, #28]	; (1c94c <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c930:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c934:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1c938:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1c93c:	4770      	bx	lr
   1c93e:	bf00      	nop
   1c940:	4001f000 	.word	0x4001f000
   1c944:	40001100 	.word	0x40001100
   1c948:	40008040 	.word	0x40008040
   1c94c:	04000040 	.word	0x04000040

0001c950 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1c950:	4b01      	ldr	r3, [pc, #4]	; (1c958 <radio_tmr_aa_get+0x8>)
   1c952:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1c956:	4770      	bx	lr
   1c958:	40008000 	.word	0x40008000

0001c95c <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1c95c:	4b01      	ldr	r3, [pc, #4]	; (1c964 <radio_tmr_aa_save+0x8>)
   1c95e:	6018      	str	r0, [r3, #0]
}
   1c960:	4770      	bx	lr
   1c962:	bf00      	nop
   1c964:	20002880 	.word	0x20002880

0001c968 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1c968:	4b01      	ldr	r3, [pc, #4]	; (1c970 <radio_tmr_aa_restore+0x8>)
}
   1c96a:	6818      	ldr	r0, [r3, #0]
   1c96c:	4770      	bx	lr
   1c96e:	bf00      	nop
   1c970:	20002880 	.word	0x20002880

0001c974 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1c974:	4b01      	ldr	r3, [pc, #4]	; (1c97c <radio_tmr_ready_get+0x8>)
   1c976:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1c97a:	4770      	bx	lr
   1c97c:	40008000 	.word	0x40008000

0001c980 <radio_tmr_end_capture>:
   1c980:	4b02      	ldr	r3, [pc, #8]	; (1c98c <radio_tmr_end_capture+0xc>)
   1c982:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1c986:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1c98a:	4770      	bx	lr
   1c98c:	4001f000 	.word	0x4001f000

0001c990 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1c990:	4b01      	ldr	r3, [pc, #4]	; (1c998 <radio_tmr_end_get+0x8>)
   1c992:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1c996:	4770      	bx	lr
   1c998:	40008000 	.word	0x40008000

0001c99c <radio_tmr_tifs_base_get>:
   1c99c:	4b01      	ldr	r3, [pc, #4]	; (1c9a4 <radio_tmr_tifs_base_get+0x8>)
   1c99e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1c9a2:	4770      	bx	lr
   1c9a4:	40008000 	.word	0x40008000

0001c9a8 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   1c9a8:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c9aa:	4b21      	ldr	r3, [pc, #132]	; (1ca30 <radio_ccm_rx_pkt_set+0x88>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1c9ac:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c9ae:	2500      	movs	r5, #0
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   1c9b0:	42a1      	cmp	r1, r4
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c9b2:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
{
   1c9b6:	4606      	mov	r6, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1c9b8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	switch (phy) {
   1c9bc:	d035      	beq.n	1ca2a <radio_ccm_rx_pkt_set+0x82>
   1c9be:	2904      	cmp	r1, #4
   1c9c0:	d131      	bne.n	1ca26 <radio_ccm_rx_pkt_set+0x7e>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c9c2:	491c      	ldr	r1, [pc, #112]	; (1ca34 <radio_ccm_rx_pkt_set+0x8c>)
   1c9c4:	4c1c      	ldr	r4, [pc, #112]	; (1ca38 <radio_ccm_rx_pkt_set+0x90>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c9c6:	481d      	ldr	r0, [pc, #116]	; (1ca3c <radio_ccm_rx_pkt_set+0x94>)
	case BIT(2):
		mode |= (CCM_MODE_DATARATE_125Kbps <<
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;

		NRF_CCM->RATEOVERRIDE =
   1c9c8:	2503      	movs	r5, #3
   1c9ca:	f8c3 551c 	str.w	r5, [r3, #1308]	; 0x51c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c9ce:	f8c1 4578 	str.w	r4, [r1, #1400]	; 0x578
    p_reg->CHENSET = mask;
   1c9d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		mode |= (CCM_MODE_DATARATE_125Kbps <<
   1c9d6:	4c1a      	ldr	r4, [pc, #104]	; (1ca40 <radio_ccm_rx_pkt_set+0x98>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c9d8:	f8c1 057c 	str.w	r0, [r1, #1404]	; 0x57c
    p_reg->CHENSET = mask;
   1c9dc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1c9e0:	4918      	ldr	r1, [pc, #96]	; (1ca44 <radio_ccm_rx_pkt_set+0x9c>)
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   1c9e2:	4b13      	ldr	r3, [pc, #76]	; (1ca30 <radio_ccm_rx_pkt_set+0x88>)
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1c9e4:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1c9e8:	4817      	ldr	r0, [pc, #92]	; (1ca48 <radio_ccm_rx_pkt_set+0xa0>)
   1c9ea:	4d12      	ldr	r5, [pc, #72]	; (1ca34 <radio_ccm_rx_pkt_set+0x8c>)
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1c9ec:	4f17      	ldr	r7, [pc, #92]	; (1ca4c <radio_ccm_rx_pkt_set+0xa4>)
   1c9ee:	b2c9      	uxtb	r1, r1
	NRF_CCM->MAXPACKETSIZE = max_len;
   1c9f0:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
	NRF_CCM->MODE = mode;
   1c9f4:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->SHORTS = 0;
   1c9f8:	2100      	movs	r1, #0
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1c9fa:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   1c9fe:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1ca02:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1ca06:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ca0a:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1ca0c:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   1ca10:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1ca14:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1ca18:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1ca1c:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1ca20:	bcf0      	pop	{r4, r5, r6, r7}
   1ca22:	601a      	str	r2, [r3, #0]
   1ca24:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1ca26:	4c0a      	ldr	r4, [pc, #40]	; (1ca50 <radio_ccm_rx_pkt_set+0xa8>)
   1ca28:	e7da      	b.n	1c9e0 <radio_ccm_rx_pkt_set+0x38>
	switch (phy) {
   1ca2a:	4c0a      	ldr	r4, [pc, #40]	; (1ca54 <radio_ccm_rx_pkt_set+0xac>)
   1ca2c:	e7d8      	b.n	1c9e0 <radio_ccm_rx_pkt_set+0x38>
   1ca2e:	bf00      	nop
   1ca30:	4000f000 	.word	0x4000f000
   1ca34:	4001f000 	.word	0x4001f000
   1ca38:	40001150 	.word	0x40001150
   1ca3c:	4000f00c 	.word	0x4000f00c
   1ca40:	01020001 	.word	0x01020001
   1ca44:	40001000 	.word	0x40001000
   1ca48:	20002774 	.word	0x20002774
   1ca4c:	20002664 	.word	0x20002664
   1ca50:	01000001 	.word	0x01000001
   1ca54:	01010001 	.word	0x01010001

0001ca58 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   1ca58:	b470      	push	{r4, r5, r6}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ca5a:	4b10      	ldr	r3, [pc, #64]	; (1ca9c <radio_ccm_tx_pkt_set+0x44>)
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1ca5c:	4d10      	ldr	r5, [pc, #64]	; (1caa0 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->MODE = mode;
   1ca5e:	4e11      	ldr	r6, [pc, #68]	; (1caa4 <radio_ccm_tx_pkt_set+0x4c>)
{
   1ca60:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ca62:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1ca64:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ca66:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1ca6a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   1ca6e:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1ca72:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1ca76:	4e0c      	ldr	r6, [pc, #48]	; (1caa8 <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1ca78:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1ca7c:	2401      	movs	r4, #1
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1ca7e:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1ca82:	4628      	mov	r0, r5
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1ca84:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1ca88:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1ca8c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1ca90:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1ca94:	601c      	str	r4, [r3, #0]
}
   1ca96:	bc70      	pop	{r4, r5, r6}
   1ca98:	4770      	bx	lr
   1ca9a:	bf00      	nop
   1ca9c:	4000f000 	.word	0x4000f000
   1caa0:	20002774 	.word	0x20002774
   1caa4:	01010000 	.word	0x01010000
   1caa8:	20002664 	.word	0x20002664

0001caac <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1caac:	4a0e      	ldr	r2, [pc, #56]	; (1cae8 <radio_ccm_is_done+0x3c>)
   1caae:	2302      	movs	r3, #2
   1cab0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1cab4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1cab8:	b933      	cbnz	r3, 1cac8 <radio_ccm_is_done+0x1c>
		__WFE();
   1caba:	bf20      	wfe
		__SEV();
   1cabc:	bf40      	sev
		__WFE();
   1cabe:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1cac0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1cac4:	2b00      	cmp	r3, #0
   1cac6:	d0f8      	beq.n	1caba <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1cac8:	4b07      	ldr	r3, [pc, #28]	; (1cae8 <radio_ccm_is_done+0x3c>)
   1caca:	4a08      	ldr	r2, [pc, #32]	; (1caec <radio_ccm_is_done+0x40>)
   1cacc:	2002      	movs	r0, #2
   1cace:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1cad2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1cad6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1cada:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1cade:	fab0 f080 	clz	r0, r0
   1cae2:	0940      	lsrs	r0, r0, #5
   1cae4:	4770      	bx	lr
   1cae6:	bf00      	nop
   1cae8:	4000f000 	.word	0x4000f000
   1caec:	e000e100 	.word	0xe000e100

0001caf0 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1caf0:	4b03      	ldr	r3, [pc, #12]	; (1cb00 <radio_ccm_mic_is_valid+0x10>)
   1caf2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1caf6:	3800      	subs	r0, #0
   1caf8:	bf18      	it	ne
   1cafa:	2001      	movne	r0, #1
   1cafc:	4770      	bx	lr
   1cafe:	bf00      	nop
   1cb00:	4000f000 	.word	0x4000f000

0001cb04 <radio_ar_configure>:

static uint8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(uint32_t nirk, void *irk, uint8_t flags)
{
   1cb04:	b4f0      	push	{r4, r5, r6, r7}
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > BIT(0))))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1cb06:	4c18      	ldr	r4, [pc, #96]	; (1cb68 <radio_ar_configure+0x64>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == BIT(2))) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1cb08:	4b18      	ldr	r3, [pc, #96]	; (1cb6c <radio_ar_configure+0x68>)
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1cb0a:	f8d4 5504 	ldr.w	r5, [r4, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1cb0e:	4e18      	ldr	r6, [pc, #96]	; (1cb70 <radio_ar_configure+0x6c>)
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == BIT(2))) {
   1cb10:	0892      	lsrs	r2, r2, #2
   1cb12:	2a04      	cmp	r2, #4
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1cb14:	f04f 0203 	mov.w	r2, #3
   1cb18:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1cb1c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff

	NRF_AAR->EVENTS_END = 0;
   1cb20:	f04f 0200 	mov.w	r2, #0
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == BIT(2))) {
   1cb24:	bf14      	ite	ne
   1cb26:	2740      	movne	r7, #64	; 0x40
   1cb28:	2745      	moveq	r7, #69	; 0x45
	NRF_AAR->NIRK = nirk;
   1cb2a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1cb2e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = addrptr;
   1cb32:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1cb36:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1cb3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1cb3e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1cb42:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    p_reg->BCC = radio_bcc;
   1cb46:	f8c4 7560 	str.w	r7, [r4, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1cb4a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   1cb4e:	4909      	ldr	r1, [pc, #36]	; (1cb74 <radio_ar_configure+0x70>)
   1cb50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1cb54:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1cb58:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1cb5c:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1cb60:	bcf0      	pop	{r4, r5, r6, r7}
   1cb62:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   1cb66:	4770      	bx	lr
   1cb68:	40001000 	.word	0x40001000
   1cb6c:	4000f000 	.word	0x4000f000
   1cb70:	20002660 	.word	0x20002660
   1cb74:	4001f000 	.word	0x4001f000

0001cb78 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1cb78:	4b01      	ldr	r3, [pc, #4]	; (1cb80 <radio_ar_match_get+0x8>)
   1cb7a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1cb7e:	4770      	bx	lr
   1cb80:	4000f000 	.word	0x4000f000

0001cb84 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   1cb84:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1cb86:	4807      	ldr	r0, [pc, #28]	; (1cba4 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1cb88:	4c07      	ldr	r4, [pc, #28]	; (1cba8 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   1cb8a:	4a08      	ldr	r2, [pc, #32]	; (1cbac <radio_ar_status_reset+0x28>)
   1cb8c:	2300      	movs	r3, #0
   1cb8e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1cb92:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1cb96:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1cb9a:	bc10      	pop	{r4}
   1cb9c:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   1cba0:	4770      	bx	lr
   1cba2:	bf00      	nop
   1cba4:	4000f000 	.word	0x4000f000
   1cba8:	40001000 	.word	0x40001000
   1cbac:	4001f000 	.word	0x4001f000

0001cbb0 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1cbb0:	4b08      	ldr	r3, [pc, #32]	; (1cbd4 <radio_ar_has_match+0x24>)
   1cbb2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1cbb6:	b160      	cbz	r0, 1cbd2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1cbb8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1cbbc:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1cbc0:	b138      	cbz	r0, 1cbd2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1cbc2:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1cbc6:	b120      	cbz	r0, 1cbd2 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1cbc8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1cbcc:	fab0 f080 	clz	r0, r0
   1cbd0:	0940      	lsrs	r0, r0, #5
}
   1cbd2:	4770      	bx	lr
   1cbd4:	40001000 	.word	0x40001000

0001cbd8 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1cbd8:	2902      	cmp	r1, #2
{
   1cbda:	b510      	push	{r4, lr}
   1cbdc:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1cbde:	d00b      	beq.n	1cbf8 <mayfly_enable_cb+0x20>
   1cbe0:	4a0a      	ldr	r2, [pc, #40]	; (1cc0c <mayfly_enable_cb+0x34>)
   1cbe2:	490b      	ldr	r1, [pc, #44]	; (1cc10 <mayfly_enable_cb+0x38>)
   1cbe4:	480b      	ldr	r0, [pc, #44]	; (1cc14 <mayfly_enable_cb+0x3c>)
   1cbe6:	231f      	movs	r3, #31
   1cbe8:	f002 fd85 	bl	1f6f6 <printk>
   1cbec:	4040      	eors	r0, r0
   1cbee:	f380 8811 	msr	BASEPRI, r0
   1cbf2:	f04f 0003 	mov.w	r0, #3
   1cbf6:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1cbf8:	200b      	movs	r0, #11
	if (enable) {
   1cbfa:	b11c      	cbz	r4, 1cc04 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1cbfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1cc00:	f7e9 bda8 	b.w	6754 <arch_irq_enable>
}
   1cc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1cc08:	f7e9 bdb4 	b.w	6774 <arch_irq_disable>
   1cc0c:	00026840 	.word	0x00026840
   1cc10:	00026890 	.word	0x00026890
   1cc14:	00025984 	.word	0x00025984

0001cc18 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1cc18:	b129      	cbz	r1, 1cc26 <mayfly_is_enabled+0xe>
   1cc1a:	3901      	subs	r1, #1
   1cc1c:	2901      	cmp	r1, #1
   1cc1e:	d805      	bhi.n	1cc2c <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1cc20:	200b      	movs	r0, #11
   1cc22:	f7e9 bdbb 	b.w	679c <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1cc26:	2018      	movs	r0, #24
   1cc28:	f7e9 bdb8 	b.w	679c <arch_irq_is_enabled>
{
   1cc2c:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1cc2e:	4a07      	ldr	r2, [pc, #28]	; (1cc4c <mayfly_is_enabled+0x34>)
   1cc30:	4907      	ldr	r1, [pc, #28]	; (1cc50 <mayfly_is_enabled+0x38>)
   1cc32:	4808      	ldr	r0, [pc, #32]	; (1cc54 <mayfly_is_enabled+0x3c>)
   1cc34:	2337      	movs	r3, #55	; 0x37
   1cc36:	f002 fd5e 	bl	1f6f6 <printk>
   1cc3a:	4040      	eors	r0, r0
   1cc3c:	f380 8811 	msr	BASEPRI, r0
   1cc40:	f04f 0003 	mov.w	r0, #3
   1cc44:	df02      	svc	2
		break;
	}

	return 0;
}
   1cc46:	2000      	movs	r0, #0
   1cc48:	bd08      	pop	{r3, pc}
   1cc4a:	bf00      	nop
   1cc4c:	00026840 	.word	0x00026840
   1cc50:	000259f4 	.word	0x000259f4
   1cc54:	00025984 	.word	0x00025984

0001cc58 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1cc58:	4288      	cmp	r0, r1
   1cc5a:	d013      	beq.n	1cc84 <mayfly_prio_is_equal+0x2c>
	return (caller_id == callee_id) ||
   1cc5c:	b928      	cbnz	r0, 1cc6a <mayfly_prio_is_equal+0x12>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   1cc5e:	1e48      	subs	r0, r1, #1
   1cc60:	2801      	cmp	r0, #1
   1cc62:	bf8c      	ite	hi
   1cc64:	2000      	movhi	r0, #0
   1cc66:	2001      	movls	r0, #1
   1cc68:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1cc6a:	2801      	cmp	r0, #1
   1cc6c:	d106      	bne.n	1cc7c <mayfly_prio_is_equal+0x24>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1cc6e:	b159      	cbz	r1, 1cc88 <mayfly_prio_is_equal+0x30>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1cc70:	f1a1 0002 	sub.w	r0, r1, #2
   1cc74:	fab0 f080 	clz	r0, r0
   1cc78:	0940      	lsrs	r0, r0, #5
   1cc7a:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1cc7c:	2802      	cmp	r0, #2
   1cc7e:	d004      	beq.n	1cc8a <mayfly_prio_is_equal+0x32>
   1cc80:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1cc82:	4770      	bx	lr
   1cc84:	2001      	movs	r0, #1
   1cc86:	4770      	bx	lr
#endif
	       0;
}
   1cc88:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1cc8a:	2901      	cmp	r1, #1
   1cc8c:	bf8c      	ite	hi
   1cc8e:	2000      	movhi	r0, #0
   1cc90:	2001      	movls	r0, #1
   1cc92:	4770      	bx	lr

0001cc94 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1cc94:	2901      	cmp	r1, #1
{
   1cc96:	b508      	push	{r3, lr}
	switch (callee_id) {
   1cc98:	d00f      	beq.n	1ccba <mayfly_pend+0x26>
   1cc9a:	2902      	cmp	r1, #2
   1cc9c:	d00d      	beq.n	1ccba <mayfly_pend+0x26>
   1cc9e:	b191      	cbz	r1, 1ccc6 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1cca0:	4a0c      	ldr	r2, [pc, #48]	; (1ccd4 <mayfly_pend+0x40>)
   1cca2:	490d      	ldr	r1, [pc, #52]	; (1ccd8 <mayfly_pend+0x44>)
   1cca4:	480d      	ldr	r0, [pc, #52]	; (1ccdc <mayfly_pend+0x48>)
   1cca6:	2368      	movs	r3, #104	; 0x68
   1cca8:	f002 fd25 	bl	1f6f6 <printk>
   1ccac:	4040      	eors	r0, r0
   1ccae:	f380 8811 	msr	BASEPRI, r0
   1ccb2:	f04f 0003 	mov.w	r0, #3
   1ccb6:	df02      	svc	2
		break;
	}
}
   1ccb8:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ccba:	4b09      	ldr	r3, [pc, #36]	; (1cce0 <mayfly_pend+0x4c>)
   1ccbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1ccc0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ccc4:	bd08      	pop	{r3, pc}
   1ccc6:	4b06      	ldr	r3, [pc, #24]	; (1cce0 <mayfly_pend+0x4c>)
   1ccc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1cccc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ccd0:	bd08      	pop	{r3, pc}
   1ccd2:	bf00      	nop
   1ccd4:	00026840 	.word	0x00026840
   1ccd8:	000259f4 	.word	0x000259f4
   1ccdc:	00025984 	.word	0x00025984
   1cce0:	e000e100 	.word	0xe000e100

0001cce4 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1cce4:	2803      	cmp	r0, #3
{
   1cce6:	b510      	push	{r4, lr}
   1cce8:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1ccea:	d804      	bhi.n	1ccf6 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1ccec:	4b11      	ldr	r3, [pc, #68]	; (1cd34 <hal_ticker_instance0_caller_id_get+0x50>)
   1ccee:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1ccf0:	b18c      	cbz	r4, 1cd16 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1ccf2:	4620      	mov	r0, r4
   1ccf4:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1ccf6:	4a10      	ldr	r2, [pc, #64]	; (1cd38 <hal_ticker_instance0_caller_id_get+0x54>)
   1ccf8:	4910      	ldr	r1, [pc, #64]	; (1cd3c <hal_ticker_instance0_caller_id_get+0x58>)
   1ccfa:	4811      	ldr	r0, [pc, #68]	; (1cd40 <hal_ticker_instance0_caller_id_get+0x5c>)
   1ccfc:	232b      	movs	r3, #43	; 0x2b
   1ccfe:	f002 fcfa 	bl	1f6f6 <printk>
   1cd02:	4040      	eors	r0, r0
   1cd04:	f380 8811 	msr	BASEPRI, r0
   1cd08:	f04f 0003 	mov.w	r0, #3
   1cd0c:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1cd0e:	4b09      	ldr	r3, [pc, #36]	; (1cd34 <hal_ticker_instance0_caller_id_get+0x50>)
   1cd10:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1cd12:	2c00      	cmp	r4, #0
   1cd14:	d1ed      	bne.n	1ccf2 <hal_ticker_instance0_caller_id_get+0xe>
   1cd16:	4a08      	ldr	r2, [pc, #32]	; (1cd38 <hal_ticker_instance0_caller_id_get+0x54>)
   1cd18:	490a      	ldr	r1, [pc, #40]	; (1cd44 <hal_ticker_instance0_caller_id_get+0x60>)
   1cd1a:	4809      	ldr	r0, [pc, #36]	; (1cd40 <hal_ticker_instance0_caller_id_get+0x5c>)
   1cd1c:	232e      	movs	r3, #46	; 0x2e
   1cd1e:	f002 fcea 	bl	1f6f6 <printk>
   1cd22:	4040      	eors	r0, r0
   1cd24:	f380 8811 	msr	BASEPRI, r0
   1cd28:	f04f 0003 	mov.w	r0, #3
   1cd2c:	df02      	svc	2
}
   1cd2e:	4620      	mov	r0, r4
   1cd30:	bd10      	pop	{r4, pc}
   1cd32:	bf00      	nop
   1cd34:	00026948 	.word	0x00026948
   1cd38:	000268b4 	.word	0x000268b4
   1cd3c:	00026904 	.word	0x00026904
   1cd40:	00025984 	.word	0x00025984
   1cd44:	00026924 	.word	0x00026924

0001cd48 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1cd48:	3801      	subs	r0, #1
{
   1cd4a:	b510      	push	{r4, lr}
   1cd4c:	461c      	mov	r4, r3
   1cd4e:	2804      	cmp	r0, #4
   1cd50:	d855      	bhi.n	1cdfe <hal_ticker_instance0_sched+0xb6>
   1cd52:	e8df f000 	tbb	[pc, r0]
   1cd56:	1a12      	.short	0x1a12
   1cd58:	1e16      	.short	0x1e16
   1cd5a:	03          	.byte	0x03
   1cd5b:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1cd5c:	2904      	cmp	r1, #4
   1cd5e:	d01e      	beq.n	1cd9e <hal_ticker_instance0_sched+0x56>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1cd60:	23ba      	movs	r3, #186	; 0xba
			break;
		}
		break;

	default:
		LL_ASSERT(0);
   1cd62:	4a28      	ldr	r2, [pc, #160]	; (1ce04 <hal_ticker_instance0_sched+0xbc>)
   1cd64:	4928      	ldr	r1, [pc, #160]	; (1ce08 <hal_ticker_instance0_sched+0xc0>)
   1cd66:	4829      	ldr	r0, [pc, #164]	; (1ce0c <hal_ticker_instance0_sched+0xc4>)
   1cd68:	f002 fcc5 	bl	1f6f6 <printk>
   1cd6c:	4040      	eors	r0, r0
   1cd6e:	f380 8811 	msr	BASEPRI, r0
   1cd72:	f04f 0003 	mov.w	r0, #3
   1cd76:	df02      	svc	2
		break;
	}
}
   1cd78:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1cd7a:	2904      	cmp	r1, #4
   1cd7c:	d01f      	beq.n	1cdbe <hal_ticker_instance0_sched+0x76>
			LL_ASSERT(0);
   1cd7e:	234e      	movs	r3, #78	; 0x4e
   1cd80:	e7ef      	b.n	1cd62 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1cd82:	2904      	cmp	r1, #4
   1cd84:	d013      	beq.n	1cdae <hal_ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   1cd86:	237c      	movs	r3, #124	; 0x7c
   1cd88:	e7eb      	b.n	1cd62 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1cd8a:	2903      	cmp	r1, #3
   1cd8c:	d01f      	beq.n	1cdce <hal_ticker_instance0_sched+0x86>
			LL_ASSERT(0);
   1cd8e:	2365      	movs	r3, #101	; 0x65
   1cd90:	e7e7      	b.n	1cd62 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1cd92:	2903      	cmp	r1, #3
   1cd94:	d02b      	beq.n	1cdee <hal_ticker_instance0_sched+0xa6>
   1cd96:	2904      	cmp	r1, #4
   1cd98:	d021      	beq.n	1cdde <hal_ticker_instance0_sched+0x96>
			LL_ASSERT(0);
   1cd9a:	23a2      	movs	r3, #162	; 0xa2
   1cd9c:	e7e1      	b.n	1cd62 <hal_ticker_instance0_sched+0x1a>
			m.param = instance;
   1cd9e:	4b1c      	ldr	r3, [pc, #112]	; (1ce10 <hal_ticker_instance0_sched+0xc8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1cda0:	2102      	movs	r1, #2
			m.param = instance;
   1cda2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1cda4:	2003      	movs	r0, #3
}
   1cda6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1cdaa:	f7f2 bcc3 	b.w	f734 <mayfly_enqueue>
			m.param = instance;
   1cdae:	4b19      	ldr	r3, [pc, #100]	; (1ce14 <hal_ticker_instance0_sched+0xcc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1cdb0:	2102      	movs	r1, #2
			m.param = instance;
   1cdb2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1cdb4:	2001      	movs	r0, #1
}
   1cdb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1cdba:	f7f2 bcbb 	b.w	f734 <mayfly_enqueue>
			m.param = instance;
   1cdbe:	4b16      	ldr	r3, [pc, #88]	; (1ce18 <hal_ticker_instance0_sched+0xd0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1cdc0:	2102      	movs	r1, #2
			m.param = instance;
   1cdc2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1cdc4:	2000      	movs	r0, #0
}
   1cdc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1cdca:	f7f2 bcb3 	b.w	f734 <mayfly_enqueue>
			m.param = instance;
   1cdce:	4b13      	ldr	r3, [pc, #76]	; (1ce1c <hal_ticker_instance0_sched+0xd4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1cdd0:	2101      	movs	r1, #1
			m.param = instance;
   1cdd2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1cdd4:	4608      	mov	r0, r1
}
   1cdd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1cdda:	f7f2 bcab 	b.w	f734 <mayfly_enqueue>
			m.param = instance;
   1cdde:	4b10      	ldr	r3, [pc, #64]	; (1ce20 <hal_ticker_instance0_sched+0xd8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1cde0:	2102      	movs	r1, #2
			m.param = instance;
   1cde2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1cde4:	4608      	mov	r0, r1
}
   1cde6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1cdea:	f7f2 bca3 	b.w	f734 <mayfly_enqueue>
			m.param = instance;
   1cdee:	4b0d      	ldr	r3, [pc, #52]	; (1ce24 <hal_ticker_instance0_sched+0xdc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1cdf0:	2101      	movs	r1, #1
			m.param = instance;
   1cdf2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1cdf4:	2002      	movs	r0, #2
}
   1cdf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1cdfa:	f7f2 bc9b 	b.w	f734 <mayfly_enqueue>
		LL_ASSERT(0);
   1cdfe:	23c0      	movs	r3, #192	; 0xc0
   1ce00:	e7af      	b.n	1cd62 <hal_ticker_instance0_sched+0x1a>
   1ce02:	bf00      	nop
   1ce04:	000268b4 	.word	0x000268b4
   1ce08:	000259f4 	.word	0x000259f4
   1ce0c:	00025984 	.word	0x00025984
   1ce10:	2000058c 	.word	0x2000058c
   1ce14:	2000055c 	.word	0x2000055c
   1ce18:	2000053c 	.word	0x2000053c
   1ce1c:	2000054c 	.word	0x2000054c
   1ce20:	2000057c 	.word	0x2000057c
   1ce24:	2000056c 	.word	0x2000056c

0001ce28 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1ce28:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1ce2a:	2000      	movs	r0, #0
   1ce2c:	f7ff b902 	b.w	1c034 <cntr_cmp_set>

0001ce30 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1ce30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ce34:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1ce38:	3201      	adds	r2, #1
   1ce3a:	d008      	beq.n	1ce4e <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1ce3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ce40:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1ce44:	f013 0301 	ands.w	r3, r3, #1
   1ce48:	d10f      	bne.n	1ce6a <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   1ce4a:	2000      	movs	r0, #0
   1ce4c:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1ce4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1ce52:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ce56:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1ce58:	4293      	cmp	r3, r2
   1ce5a:	d0f6      	beq.n	1ce4a <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1ce5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ce60:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1ce64:	f013 0301 	ands.w	r3, r3, #1
   1ce68:	d0ef      	beq.n	1ce4a <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1ce6a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	sys_put_le16(val >> 16, &dst[2]);
   1ce6e:	0c19      	lsrs	r1, r3, #16
{
   1ce70:	b510      	push	{r4, lr}
	dst[0] = val;
   1ce72:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1ce74:	0a0c      	lsrs	r4, r1, #8
   1ce76:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1ce7a:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1ce7c:	70c4      	strb	r4, [r0, #3]
   1ce7e:	7043      	strb	r3, [r0, #1]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1ce80:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1ce84:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1ce86:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1ce8a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1ce8e:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1ce90:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1ce94:	3301      	adds	r3, #1
   1ce96:	d035      	beq.n	1cf04 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1ce98:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1ce9c:	3301      	adds	r3, #1
   1ce9e:	d031      	beq.n	1cf04 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1cea0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1cea4:	3301      	adds	r3, #1
   1cea6:	d02d      	beq.n	1cf04 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1cea8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1ceac:	3301      	adds	r3, #1
   1ceae:	d029      	beq.n	1cf04 <hci_vendor_read_static_addr+0xd4>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1ceb0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1ceb4:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1ceb6:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1ceb8:	0a0c      	lsrs	r4, r1, #8
   1ceba:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1cebe:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1cec0:	7244      	strb	r4, [r0, #9]
   1cec2:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1cec4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1cec8:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   1ceca:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1cecc:	0a0c      	lsrs	r4, r1, #8
   1cece:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1ced2:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1ced4:	7344      	strb	r4, [r0, #13]
   1ced6:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1ced8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1cedc:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   1cede:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1cee0:	0a0c      	lsrs	r4, r1, #8
   1cee2:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1cee6:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1cee8:	7444      	strb	r4, [r0, #17]
   1ceea:	73c3      	strb	r3, [r0, #15]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1ceec:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   1cef0:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   1cef2:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1cef4:	0a11      	lsrs	r1, r2, #8
   1cef6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1cefa:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1cefc:	7541      	strb	r1, [r0, #21]
   1cefe:	74c3      	strb	r3, [r0, #19]
		return 1;
   1cf00:	2001      	movs	r0, #1
}
   1cf02:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1cf04:	2210      	movs	r2, #16
   1cf06:	2100      	movs	r1, #0
   1cf08:	3006      	adds	r0, #6
   1cf0a:	f004 fc97 	bl	2183c <memset>
		return 1;
   1cf0e:	2001      	movs	r0, #1
}
   1cf10:	bd10      	pop	{r4, pc}
   1cf12:	bf00      	nop

0001cf14 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   1cf14:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1cf16:	2210      	movs	r2, #16
{
   1cf18:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1cf1a:	2100      	movs	r1, #0
   1cf1c:	f004 fc8e 	bl	2183c <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1cf20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1cf24:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1cf28:	3201      	adds	r2, #1
   1cf2a:	d034      	beq.n	1cf96 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1cf2c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1cf30:	3201      	adds	r2, #1
   1cf32:	d030      	beq.n	1cf96 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1cf34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1cf38:	3201      	adds	r2, #1
   1cf3a:	d02c      	beq.n	1cf96 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1cf3c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1cf40:	3201      	adds	r2, #1
   1cf42:	d028      	beq.n	1cf96 <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1cf44:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   1cf48:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1cf4a:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1cf4c:	0a08      	lsrs	r0, r1, #8
   1cf4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1cf52:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   1cf54:	70e0      	strb	r0, [r4, #3]
   1cf56:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1cf58:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   1cf5c:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1cf5e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1cf60:	0a08      	lsrs	r0, r1, #8
   1cf62:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1cf66:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   1cf68:	71e0      	strb	r0, [r4, #7]
   1cf6a:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1cf6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   1cf70:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1cf72:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1cf74:	0a08      	lsrs	r0, r1, #8
   1cf76:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1cf7a:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   1cf7c:	7262      	strb	r2, [r4, #9]
   1cf7e:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1cf80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   1cf84:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   1cf86:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1cf88:	0a11      	lsrs	r1, r2, #8
   1cf8a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1cf8e:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   1cf90:	73e1      	strb	r1, [r4, #15]
   1cf92:	7363      	strb	r3, [r4, #13]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1cf94:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   1cf96:	4620      	mov	r0, r4
   1cf98:	2210      	movs	r2, #16
}
   1cf9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1cf9e:	2100      	movs	r1, #0
   1cfa0:	f004 bc4c 	b.w	2183c <memset>

0001cfa4 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1cfa4:	4b02      	ldr	r3, [pc, #8]	; (1cfb0 <net_buf_pool_get+0xc>)
   1cfa6:	2228      	movs	r2, #40	; 0x28
   1cfa8:	fb02 3000 	mla	r0, r2, r0, r3
   1cfac:	4770      	bx	lr
   1cfae:	bf00      	nop
   1cfb0:	200007e4 	.word	0x200007e4

0001cfb4 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cfb4:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1cfb6:	4a05      	ldr	r2, [pc, #20]	; (1cfcc <net_buf_id+0x18>)
   1cfb8:	2128      	movs	r1, #40	; 0x28
   1cfba:	fb01 2303 	mla	r3, r1, r3, r2
   1cfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cfc0:	1ac0      	subs	r0, r0, r3
}
   1cfc2:	4b03      	ldr	r3, [pc, #12]	; (1cfd0 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1cfc4:	10c0      	asrs	r0, r0, #3
}
   1cfc6:	4358      	muls	r0, r3
   1cfc8:	4770      	bx	lr
   1cfca:	bf00      	nop
   1cfcc:	200007e4 	.word	0x200007e4
   1cfd0:	aaaaaaab 	.word	0xaaaaaaab

0001cfd4 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1cfd4:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1cfd6:	4a0a      	ldr	r2, [pc, #40]	; (1d000 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cfd8:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1cfda:	2428      	movs	r4, #40	; 0x28
   1cfdc:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1cfe0:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1cfe2:	6a1b      	ldr	r3, [r3, #32]
   1cfe4:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1cfe6:	6823      	ldr	r3, [r4, #0]
   1cfe8:	429a      	cmp	r2, r3
   1cfea:	bf94      	ite	ls
   1cfec:	600a      	strls	r2, [r1, #0]
   1cfee:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1cff0:	f7ff ffe0 	bl	1cfb4 <net_buf_id>
   1cff4:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1cff8:	fb02 3000 	mla	r0, r2, r0, r3
   1cffc:	bd10      	pop	{r4, pc}
   1cffe:	bf00      	nop
   1d000:	200007e4 	.word	0x200007e4

0001d004 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1d004:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1d008:	4605      	mov	r5, r0
   1d00a:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1d00c:	4610      	mov	r0, r2
   1d00e:	4619      	mov	r1, r3
{
   1d010:	4616      	mov	r6, r2
   1d012:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1d014:	f007 fcf7 	bl	24a06 <z_timeout_end_calc>
   1d018:	4680      	mov	r8, r0
   1d01a:	4689      	mov	r9, r1
	__asm__ volatile(
   1d01c:	f04f 0320 	mov.w	r3, #32
   1d020:	f3ef 8a11 	mrs	sl, BASEPRI
   1d024:	f383 8811 	msr	BASEPRI, r3
   1d028:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1d02c:	8b6b      	ldrh	r3, [r5, #26]
   1d02e:	2b00      	cmp	r3, #0
   1d030:	d054      	beq.n	1d0dc <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1d032:	8b2a      	ldrh	r2, [r5, #24]
   1d034:	429a      	cmp	r2, r3
   1d036:	d93d      	bls.n	1d0b4 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   1d038:	2200      	movs	r2, #0
   1d03a:	2300      	movs	r3, #0
   1d03c:	4628      	mov	r0, r5
   1d03e:	f001 fae7 	bl	1e610 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1d042:	4604      	mov	r4, r0
   1d044:	2800      	cmp	r0, #0
   1d046:	d035      	beq.n	1d0b4 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   1d048:	f38a 8811 	msr	BASEPRI, sl
   1d04c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1d050:	9b01      	ldr	r3, [sp, #4]
   1d052:	2b00      	cmp	r3, #0
   1d054:	d052      	beq.n	1d0fc <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1d056:	ea56 0307 	orrs.w	r3, r6, r7
   1d05a:	d010      	beq.n	1d07e <net_buf_alloc_len+0x7a>
   1d05c:	1c7b      	adds	r3, r7, #1
   1d05e:	bf08      	it	eq
   1d060:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1d064:	d00b      	beq.n	1d07e <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1d066:	f002 f983 	bl	1f370 <z_tick_get>
   1d06a:	ebb8 0600 	subs.w	r6, r8, r0
   1d06e:	eb69 0701 	sbc.w	r7, r9, r1
   1d072:	2e00      	cmp	r6, #0
   1d074:	f177 0300 	sbcs.w	r3, r7, #0
   1d078:	bfbc      	itt	lt
   1d07a:	2600      	movlt	r6, #0
   1d07c:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d07e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1d080:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1d114 <net_buf_alloc_len+0x110>
   1d084:	2228      	movs	r2, #40	; 0x28
   1d086:	fb02 8303 	mla	r3, r2, r3, r8
   1d08a:	a901      	add	r1, sp, #4
   1d08c:	6a1b      	ldr	r3, [r3, #32]
   1d08e:	681b      	ldr	r3, [r3, #0]
   1d090:	4632      	mov	r2, r6
   1d092:	681d      	ldr	r5, [r3, #0]
   1d094:	4620      	mov	r0, r4
   1d096:	463b      	mov	r3, r7
   1d098:	47a8      	blx	r5
   1d09a:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1d09c:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1d09e:	bb70      	cbnz	r0, 1d0fe <net_buf_alloc_len+0xfa>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   1d0a0:	79a0      	ldrb	r0, [r4, #6]
   1d0a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1d0a6:	4621      	mov	r1, r4
   1d0a8:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1d0ac:	f007 fa8d 	bl	245ca <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1d0b0:	462c      	mov	r4, r5
}
   1d0b2:	e01f      	b.n	1d0f4 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   1d0b4:	8b68      	ldrh	r0, [r5, #26]
   1d0b6:	1e43      	subs	r3, r0, #1
   1d0b8:	836b      	strh	r3, [r5, #26]
   1d0ba:	f38a 8811 	msr	BASEPRI, sl
   1d0be:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1d0c2:	8b2c      	ldrh	r4, [r5, #24]
   1d0c4:	1a24      	subs	r4, r4, r0
   1d0c6:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1d0c8:	2318      	movs	r3, #24
   1d0ca:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1d0ce:	4811      	ldr	r0, [pc, #68]	; (1d114 <net_buf_alloc_len+0x110>)
   1d0d0:	4b11      	ldr	r3, [pc, #68]	; (1d118 <net_buf_alloc_len+0x114>)
   1d0d2:	1a2d      	subs	r5, r5, r0
   1d0d4:	10ed      	asrs	r5, r5, #3
   1d0d6:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1d0d8:	71a5      	strb	r5, [r4, #6]
		goto success;
   1d0da:	e7b9      	b.n	1d050 <net_buf_alloc_len+0x4c>
   1d0dc:	f38a 8811 	msr	BASEPRI, sl
   1d0e0:	f3bf 8f6f 	isb	sy
   1d0e4:	4632      	mov	r2, r6
   1d0e6:	463b      	mov	r3, r7
   1d0e8:	4628      	mov	r0, r5
   1d0ea:	f001 fa91 	bl	1e610 <z_impl_k_queue_get>
	if (!buf) {
   1d0ee:	4604      	mov	r4, r0
   1d0f0:	2800      	cmp	r0, #0
   1d0f2:	d1ad      	bne.n	1d050 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1d0f4:	4620      	mov	r0, r4
   1d0f6:	b002      	add	sp, #8
   1d0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   1d0fc:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1d0fe:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1d100:	2201      	movs	r2, #1
	buf->frags = NULL;
   1d102:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1d104:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1d106:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1d108:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1d10a:	6923      	ldr	r3, [r4, #16]
   1d10c:	81e2      	strh	r2, [r4, #14]
   1d10e:	60a3      	str	r3, [r4, #8]
	return buf;
   1d110:	e7f0      	b.n	1d0f4 <net_buf_alloc_len+0xf0>
   1d112:	bf00      	nop
   1d114:	200007e4 	.word	0x200007e4
   1d118:	cccccccd 	.word	0xcccccccd

0001d11c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1d11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d120:	4d17      	ldr	r5, [pc, #92]	; (1d180 <net_buf_unref+0x64>)
   1d122:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1d124:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1d126:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1d128:	b90c      	cbnz	r4, 1d12e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1d12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1d12e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1d130:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1d134:	3b01      	subs	r3, #1
   1d136:	b2db      	uxtb	r3, r3
   1d138:	7123      	strb	r3, [r4, #4]
   1d13a:	2b00      	cmp	r3, #0
   1d13c:	d1f5      	bne.n	1d12a <net_buf_unref+0xe>
		if (buf->__buf) {
   1d13e:	6921      	ldr	r1, [r4, #16]
   1d140:	b159      	cbz	r1, 1d15a <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1d142:	7963      	ldrb	r3, [r4, #5]
   1d144:	079b      	lsls	r3, r3, #30
   1d146:	d407      	bmi.n	1d158 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   1d148:	79a3      	ldrb	r3, [r4, #6]
   1d14a:	fb07 5303 	mla	r3, r7, r3, r5
   1d14e:	4620      	mov	r0, r4
   1d150:	6a1b      	ldr	r3, [r3, #32]
   1d152:	681b      	ldr	r3, [r3, #0]
   1d154:	689b      	ldr	r3, [r3, #8]
   1d156:	4798      	blx	r3
			buf->__buf = NULL;
   1d158:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1d15a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1d15c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1d15e:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1d162:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1d164:	69db      	ldr	r3, [r3, #28]
   1d166:	b11b      	cbz	r3, 1d170 <net_buf_unref+0x54>
			pool->destroy(buf);
   1d168:	4620      	mov	r0, r4
   1d16a:	4798      	blx	r3
{
   1d16c:	4644      	mov	r4, r8
   1d16e:	e7db      	b.n	1d128 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1d170:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1d174:	4621      	mov	r1, r4
   1d176:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1d17a:	f007 fa26 	bl	245ca <k_queue_prepend>
}
   1d17e:	e7f5      	b.n	1d16c <net_buf_unref+0x50>
   1d180:	200007e4 	.word	0x200007e4

0001d184 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d184:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1d186:	4b09      	ldr	r3, [pc, #36]	; (1d1ac <gpio_nrfx_init+0x28>)
   1d188:	781a      	ldrb	r2, [r3, #0]
   1d18a:	b96a      	cbnz	r2, 1d1a8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1d18c:	2101      	movs	r1, #1
   1d18e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d190:	2006      	movs	r0, #6
   1d192:	2105      	movs	r1, #5
   1d194:	f7e9 fb10 	bl	67b8 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1d198:	2006      	movs	r0, #6
   1d19a:	f7e9 fadb 	bl	6754 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1d19e:	4b04      	ldr	r3, [pc, #16]	; (1d1b0 <gpio_nrfx_init+0x2c>)
   1d1a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1d1a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1d1a8:	2000      	movs	r0, #0
   1d1aa:	bd08      	pop	{r3, pc}
   1d1ac:	2000309c 	.word	0x2000309c
   1d1b0:	40006000 	.word	0x40006000

0001d1b4 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d1b4:	4b2b      	ldr	r3, [pc, #172]	; (1d264 <gpio_nrfx_config+0xb0>)
{
   1d1b6:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d1b8:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d1ba:	482b      	ldr	r0, [pc, #172]	; (1d268 <gpio_nrfx_config+0xb4>)
   1d1bc:	4013      	ands	r3, r2
   1d1be:	4283      	cmp	r3, r0
   1d1c0:	d041      	beq.n	1d246 <gpio_nrfx_config+0x92>
   1d1c2:	d80d      	bhi.n	1d1e0 <gpio_nrfx_config+0x2c>
   1d1c4:	2b06      	cmp	r3, #6
   1d1c6:	d015      	beq.n	1d1f4 <gpio_nrfx_config+0x40>
   1d1c8:	d805      	bhi.n	1d1d6 <gpio_nrfx_config+0x22>
   1d1ca:	b19b      	cbz	r3, 1d1f4 <gpio_nrfx_config+0x40>
   1d1cc:	2b02      	cmp	r3, #2
   1d1ce:	d03c      	beq.n	1d24a <gpio_nrfx_config+0x96>
   1d1d0:	f06f 0015 	mvn.w	r0, #21
   1d1d4:	e036      	b.n	1d244 <gpio_nrfx_config+0x90>
   1d1d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d1da:	d1f9      	bne.n	1d1d0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1d1dc:	2301      	movs	r3, #1
   1d1de:	e009      	b.n	1d1f4 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d1e0:	4822      	ldr	r0, [pc, #136]	; (1d26c <gpio_nrfx_config+0xb8>)
   1d1e2:	4283      	cmp	r3, r0
   1d1e4:	d033      	beq.n	1d24e <gpio_nrfx_config+0x9a>
   1d1e6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1d1ea:	d032      	beq.n	1d252 <gpio_nrfx_config+0x9e>
   1d1ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1d1f0:	d1ee      	bne.n	1d1d0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1d1f2:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1d1f4:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1d1f6:	bf54      	ite	pl
   1d1f8:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1d1fc:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1d1fe:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1d202:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1d204:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1d208:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1d20c:	d507      	bpl.n	1d21e <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1d20e:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d212:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1d214:	d01f      	beq.n	1d256 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1d216:	2201      	movs	r2, #1
   1d218:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1d21a:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1d21e:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   1d220:	4c13      	ldr	r4, [pc, #76]	; (1d270 <gpio_nrfx_config+0xbc>)
   1d222:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1d224:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1d228:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   1d22c:	bf18      	it	ne
   1d22e:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1d232:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d236:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1d23a:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d23e:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   1d242:	2000      	movs	r0, #0
}
   1d244:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1d246:	2307      	movs	r3, #7
   1d248:	e7d4      	b.n	1d1f4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1d24a:	2304      	movs	r3, #4
   1d24c:	e7d2      	b.n	1d1f4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1d24e:	2305      	movs	r3, #5
   1d250:	e7d0      	b.n	1d1f4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1d252:	2303      	movs	r3, #3
   1d254:	e7ce      	b.n	1d1f4 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1d256:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1d258:	bf42      	ittt	mi
   1d25a:	2201      	movmi	r2, #1
   1d25c:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1d25e:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   1d262:	e7dc      	b.n	1d21e <gpio_nrfx_config+0x6a>
   1d264:	00f00006 	.word	0x00f00006
   1d268:	00100006 	.word	0x00100006
   1d26c:	00400002 	.word	0x00400002
   1d270:	50000300 	.word	0x50000300

0001d274 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1d274:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1d278:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1d27a:	4b08      	ldr	r3, [pc, #32]	; (1d29c <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d27c:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   1d27e:	bf18      	it	ne
   1d280:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1d284:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1d288:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   1d28c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1d290:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1d294:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   1d298:	4770      	bx	lr
   1d29a:	bf00      	nop
   1d29c:	50000300 	.word	0x50000300

0001d2a0 <gpio_nrfx_pin_interrupt_configure>:
{
   1d2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d2a2:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d2a4:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   1d2a6:	68c7      	ldr	r7, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d2a8:	7a08      	ldrb	r0, [r1, #8]
   1d2aa:	f005 061f 	and.w	r6, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1d2ae:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1d2b2:	ea46 1640 	orr.w	r6, r6, r0, lsl #5
   1d2b6:	d110      	bne.n	1d2da <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
   1d2b8:	0970      	lsrs	r0, r6, #5
        case 1: return NRF_P1;
   1d2ba:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
   1d2bc:	f006 011f 	and.w	r1, r6, #31
        case 1: return NRF_P1;
   1d2c0:	486b      	ldr	r0, [pc, #428]	; (1d470 <gpio_nrfx_pin_interrupt_configure+0x1d0>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d2c2:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
   1d2c6:	bf18      	it	ne
   1d2c8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d2cc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1d2d0:	07cc      	lsls	r4, r1, #31
   1d2d2:	d507      	bpl.n	1d2e4 <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
   1d2d4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1d2d8:	e0bd      	b.n	1d456 <gpio_nrfx_pin_interrupt_configure+0x1b6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1d2da:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1d2de:	68f9      	ldr	r1, [r7, #12]
   1d2e0:	f000 80aa 	beq.w	1d438 <gpio_nrfx_pin_interrupt_configure+0x198>
   1d2e4:	68f8      	ldr	r0, [r7, #12]
   1d2e6:	2101      	movs	r1, #1
   1d2e8:	40a9      	lsls	r1, r5
   1d2ea:	4301      	orrs	r1, r0
   1d2ec:	6978      	ldr	r0, [r7, #20]
   1d2ee:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1d2f0:	2101      	movs	r1, #1
   1d2f2:	40a9      	lsls	r1, r5
   1d2f4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1d2f8:	69ba      	ldr	r2, [r7, #24]
   1d2fa:	bf0c      	ite	eq
   1d2fc:	4308      	orreq	r0, r1
   1d2fe:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1d300:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1d304:	bf0c      	ite	eq
   1d306:	430a      	orreq	r2, r1
   1d308:	438a      	bicne	r2, r1
   1d30a:	61ba      	str	r2, [r7, #24]
   1d30c:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1d30e:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1d310:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1d314:	bf0c      	ite	eq
   1d316:	4311      	orreq	r1, r2
   1d318:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1d31c:	4a55      	ldr	r2, [pc, #340]	; (1d474 <gpio_nrfx_pin_interrupt_configure+0x1d4>)
   1d31e:	6139      	str	r1, [r7, #16]
   1d320:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d324:	2300      	movs	r3, #0
   1d326:	b2c9      	uxtb	r1, r1
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d328:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   1d32c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   1d330:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1d334:	4286      	cmp	r6, r0
   1d336:	f040 8084 	bne.w	1d442 <gpio_nrfx_pin_interrupt_configure+0x1a2>
		    && (intenset & BIT(i))) {
   1d33a:	fa21 f003 	lsr.w	r0, r1, r3
   1d33e:	07c0      	lsls	r0, r0, #31
   1d340:	d57f      	bpl.n	1d442 <gpio_nrfx_pin_interrupt_configure+0x1a2>
			(void)atomic_and(mask, ~BIT(i));
   1d342:	2101      	movs	r1, #1
   1d344:	4099      	lsls	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d346:	484c      	ldr	r0, [pc, #304]	; (1d478 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
   1d348:	f3bf 8f5b 	dmb	ish
   1d34c:	43cc      	mvns	r4, r1
   1d34e:	e850 cf00 	ldrex	ip, [r0]
   1d352:	ea0c 0c04 	and.w	ip, ip, r4
   1d356:	e840 ce00 	strex	lr, ip, [r0]
   1d35a:	f1be 0f00 	cmp.w	lr, #0
   1d35e:	d1f6      	bne.n	1d34e <gpio_nrfx_pin_interrupt_configure+0xae>
   1d360:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1d364:	009b      	lsls	r3, r3, #2
   1d366:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d36a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1d36e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1d372:	f020 0001 	bic.w	r0, r0, #1
   1d376:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   1d37a:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1d37e:	2100      	movs	r1, #0
   1d380:	4630      	mov	r0, r6
   1d382:	f7ff ff77 	bl	1d274 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1d386:	68fb      	ldr	r3, [r7, #12]
   1d388:	40eb      	lsrs	r3, r5
   1d38a:	f013 0301 	ands.w	r3, r3, #1
   1d38e:	d051      	beq.n	1d434 <gpio_nrfx_pin_interrupt_configure+0x194>
		if (data->trig_edge & BIT(pin)) {
   1d390:	697b      	ldr	r3, [r7, #20]
   1d392:	40eb      	lsrs	r3, r5
   1d394:	f013 0401 	ands.w	r4, r3, #1
   1d398:	d05e      	beq.n	1d458 <gpio_nrfx_pin_interrupt_configure+0x1b8>
			if (data->double_edge & BIT(pin)) {
   1d39a:	69bb      	ldr	r3, [r7, #24]
   1d39c:	40eb      	lsrs	r3, r5
   1d39e:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1d3a0:	bf5f      	itttt	pl
   1d3a2:	6939      	ldrpl	r1, [r7, #16]
   1d3a4:	fa21 f505 	lsrpl.w	r5, r1, r5
   1d3a8:	f005 0501 	andpl.w	r5, r5, #1
   1d3ac:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d3b0:	4931      	ldr	r1, [pc, #196]	; (1d478 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
   1d3b2:	bf54      	ite	pl
   1d3b4:	b2ed      	uxtbpl	r5, r5
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1d3b6:	2503      	movmi	r5, #3
   1d3b8:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   1d3ba:	2701      	movs	r7, #1
   1d3bc:	fa07 f402 	lsl.w	r4, r7, r2
   1d3c0:	f3bf 8f5b 	dmb	ish
   1d3c4:	e851 0f00 	ldrex	r0, [r1]
   1d3c8:	ea40 0304 	orr.w	r3, r0, r4
   1d3cc:	e841 3c00 	strex	ip, r3, [r1]
   1d3d0:	f1bc 0f00 	cmp.w	ip, #0
   1d3d4:	d1f6      	bne.n	1d3c4 <gpio_nrfx_pin_interrupt_configure+0x124>
   1d3d6:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
   1d3da:	40d0      	lsrs	r0, r2
   1d3dc:	f010 0301 	ands.w	r3, r0, #1
   1d3e0:	d134      	bne.n	1d44c <gpio_nrfx_pin_interrupt_configure+0x1ac>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1d3e2:	0091      	lsls	r1, r2, #2
   1d3e4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1d3e8:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
			nrf_gpiote_event_t evt =
   1d3ec:	3240      	adds	r2, #64	; 0x40
   1d3ee:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   1d3f2:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   1d3f6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1d3fa:	0092      	lsls	r2, r2, #2
   1d3fc:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d400:	0236      	lsls	r6, r6, #8
    return ((uint32_t)p_reg + event);
   1d402:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d404:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   1d408:	f406 567c 	and.w	r6, r6, #16128	; 0x3f00
    return ((uint32_t)p_reg + event);
   1d40c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1d410:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d414:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
   1d418:	4306      	orrs	r6, r0
   1d41a:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d41e:	6013      	str	r3, [r2, #0]
   1d420:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1d422:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   1d426:	f042 0201 	orr.w	r2, r2, #1
   1d42a:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1d42e:	4a11      	ldr	r2, [pc, #68]	; (1d474 <gpio_nrfx_pin_interrupt_configure+0x1d4>)
   1d430:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
	int res = 0;
   1d434:	4618      	mov	r0, r3
   1d436:	e00e      	b.n	1d456 <gpio_nrfx_pin_interrupt_configure+0x1b6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1d438:	2001      	movs	r0, #1
   1d43a:	40a8      	lsls	r0, r5
   1d43c:	ea21 0100 	bic.w	r1, r1, r0
   1d440:	e754      	b.n	1d2ec <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d442:	3301      	adds	r3, #1
   1d444:	2b08      	cmp	r3, #8
   1d446:	f47f af6f 	bne.w	1d328 <gpio_nrfx_pin_interrupt_configure+0x88>
   1d44a:	e798      	b.n	1d37e <gpio_nrfx_pin_interrupt_configure+0xde>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   1d44c:	3201      	adds	r2, #1
   1d44e:	2a08      	cmp	r2, #8
   1d450:	d1b4      	bne.n	1d3bc <gpio_nrfx_pin_interrupt_configure+0x11c>
	return -ENODEV;
   1d452:	f06f 0012 	mvn.w	r0, #18
}
   1d456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d458:	6939      	ldr	r1, [r7, #16]
   1d45a:	40e9      	lsrs	r1, r5
   1d45c:	f001 0101 	and.w	r1, r1, #1
   1d460:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1d464:	4630      	mov	r0, r6
   1d466:	b2c9      	uxtb	r1, r1
   1d468:	f7ff ff04 	bl	1d274 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1d46c:	4620      	mov	r0, r4
   1d46e:	e7f2      	b.n	1d456 <gpio_nrfx_pin_interrupt_configure+0x1b6>
   1d470:	50000300 	.word	0x50000300
   1d474:	40006000 	.word	0x40006000
   1d478:	200028ec 	.word	0x200028ec

0001d47c <gpiote_event_handler>:
{
   1d47c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1d47e:	2600      	movs	r6, #0
   1d480:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d484:	4d26      	ldr	r5, [pc, #152]	; (1d520 <gpiote_event_handler+0xa4>)
   1d486:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
   1d488:	b14c      	cbz	r4, 1d49e <gpiote_event_handler+0x22>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   1d48a:	4826      	ldr	r0, [pc, #152]	; (1d524 <gpiote_event_handler+0xa8>)
   1d48c:	f006 febd 	bl	2420a <check_level_trigger_pins>
		fired_triggers[0] =
   1d490:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   1d492:	4825      	ldr	r0, [pc, #148]	; (1d528 <gpiote_event_handler+0xac>)
   1d494:	f006 feb9 	bl	2420a <check_level_trigger_pins>
		fired_triggers[1] =
   1d498:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d49a:	602e      	str	r6, [r5, #0]
   1d49c:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   1d49e:	4d23      	ldr	r5, [pc, #140]	; (1d52c <gpiote_event_handler+0xb0>)
{
   1d4a0:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1d4a2:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d4a4:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1d4a6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1d4aa:	fa06 f102 	lsl.w	r1, r6, r2
   1d4ae:	4219      	tst	r1, r3
   1d4b0:	d01b      	beq.n	1d4ea <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d4b2:	0091      	lsls	r1, r2, #2
   1d4b4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1d4b8:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   1d4bc:	680b      	ldr	r3, [r1, #0]
   1d4be:	b1a3      	cbz	r3, 1d4ea <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d4c0:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1d4c4:	af02      	add	r7, sp, #8
   1d4c6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d4ca:	f8c1 c000 	str.w	ip, [r1]
   1d4ce:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1d4d2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1d4d6:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1d4da:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1d4de:	fa06 f303 	lsl.w	r3, r6, r3
   1d4e2:	433b      	orrs	r3, r7
   1d4e4:	f840 3c08 	str.w	r3, [r0, #-8]
   1d4e8:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d4ea:	3201      	adds	r2, #1
   1d4ec:	2a08      	cmp	r2, #8
   1d4ee:	d1da      	bne.n	1d4a6 <gpiote_event_handler+0x2a>
	if (fired_triggers[0]) {
   1d4f0:	9a00      	ldr	r2, [sp, #0]
   1d4f2:	b11a      	cbz	r2, 1d4fc <gpiote_event_handler+0x80>
	gpio_fire_callbacks(list, port, pins);
   1d4f4:	490b      	ldr	r1, [pc, #44]	; (1d524 <gpiote_event_handler+0xa8>)
   1d4f6:	480e      	ldr	r0, [pc, #56]	; (1d530 <gpiote_event_handler+0xb4>)
   1d4f8:	f006 fe1d 	bl	24136 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   1d4fc:	9a01      	ldr	r2, [sp, #4]
   1d4fe:	b11a      	cbz	r2, 1d508 <gpiote_event_handler+0x8c>
	gpio_fire_callbacks(list, port, pins);
   1d500:	4909      	ldr	r1, [pc, #36]	; (1d528 <gpiote_event_handler+0xac>)
   1d502:	480c      	ldr	r0, [pc, #48]	; (1d534 <gpiote_event_handler+0xb8>)
   1d504:	f006 fe17 	bl	24136 <gpio_fire_callbacks>
	if (port_event) {
   1d508:	b144      	cbz	r4, 1d51c <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1d50a:	4806      	ldr	r0, [pc, #24]	; (1d524 <gpiote_event_handler+0xa8>)
   1d50c:	f006 fea6 	bl	2425c <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1d510:	4805      	ldr	r0, [pc, #20]	; (1d528 <gpiote_event_handler+0xac>)
}
   1d512:	b003      	add	sp, #12
   1d514:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1d518:	f006 bea0 	b.w	2425c <cfg_level_pins>
}
   1d51c:	b003      	add	sp, #12
   1d51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d520:	4000617c 	.word	0x4000617c
   1d524:	200006b4 	.word	0x200006b4
   1d528:	200006c4 	.word	0x200006c4
   1d52c:	40006000 	.word	0x40006000
   1d530:	200028b8 	.word	0x200028b8
   1d534:	200028d4 	.word	0x200028d4

0001d538 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1d538:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1d53a:	794b      	ldrb	r3, [r1, #5]
   1d53c:	2b01      	cmp	r3, #1
   1d53e:	d029      	beq.n	1d594 <uarte_nrfx_configure+0x5c>
   1d540:	2b03      	cmp	r3, #3
   1d542:	d124      	bne.n	1d58e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1d544:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1d546:	798b      	ldrb	r3, [r1, #6]
   1d548:	2b03      	cmp	r3, #3
   1d54a:	d120      	bne.n	1d58e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1d54c:	79cc      	ldrb	r4, [r1, #7]
   1d54e:	b124      	cbz	r4, 1d55a <uarte_nrfx_configure+0x22>
   1d550:	2c01      	cmp	r4, #1
   1d552:	d11c      	bne.n	1d58e <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1d554:	6843      	ldr	r3, [r0, #4]
   1d556:	791b      	ldrb	r3, [r3, #4]
   1d558:	b1cb      	cbz	r3, 1d58e <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1d55a:	790a      	ldrb	r2, [r1, #4]
   1d55c:	b112      	cbz	r2, 1d564 <uarte_nrfx_configure+0x2c>
   1d55e:	2a02      	cmp	r2, #2
   1d560:	d115      	bne.n	1d58e <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1d562:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1d564:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1d566:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1d568:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1d56c:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1d56e:	d065      	beq.n	1d63c <uarte_nrfx_configure+0x104>
   1d570:	d82d      	bhi.n	1d5ce <uarte_nrfx_configure+0x96>
   1d572:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1d576:	d064      	beq.n	1d642 <uarte_nrfx_configure+0x10a>
   1d578:	d816      	bhi.n	1d5a8 <uarte_nrfx_configure+0x70>
   1d57a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1d57e:	d062      	beq.n	1d646 <uarte_nrfx_configure+0x10e>
   1d580:	d80a      	bhi.n	1d598 <uarte_nrfx_configure+0x60>
   1d582:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1d586:	d061      	beq.n	1d64c <uarte_nrfx_configure+0x114>
   1d588:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1d58c:	d061      	beq.n	1d652 <uarte_nrfx_configure+0x11a>
   1d58e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1d592:	e052      	b.n	1d63a <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   1d594:	2600      	movs	r6, #0
   1d596:	e7d6      	b.n	1d546 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1d598:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1d59c:	d05c      	beq.n	1d658 <uarte_nrfx_configure+0x120>
   1d59e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1d5a2:	d1f4      	bne.n	1d58e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1d5a4:	4b37      	ldr	r3, [pc, #220]	; (1d684 <uarte_nrfx_configure+0x14c>)
   1d5a6:	e03c      	b.n	1d622 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1d5a8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1d5ac:	d057      	beq.n	1d65e <uarte_nrfx_configure+0x126>
   1d5ae:	d807      	bhi.n	1d5c0 <uarte_nrfx_configure+0x88>
   1d5b0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1d5b4:	d055      	beq.n	1d662 <uarte_nrfx_configure+0x12a>
   1d5b6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1d5ba:	d1e8      	bne.n	1d58e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1d5bc:	4b32      	ldr	r3, [pc, #200]	; (1d688 <uarte_nrfx_configure+0x150>)
   1d5be:	e030      	b.n	1d622 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1d5c0:	f647 2712 	movw	r7, #31250	; 0x7a12
   1d5c4:	42bb      	cmp	r3, r7
   1d5c6:	d1e2      	bne.n	1d58e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1d5c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1d5cc:	e029      	b.n	1d622 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1d5ce:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1d5d2:	d048      	beq.n	1d666 <uarte_nrfx_configure+0x12e>
   1d5d4:	d813      	bhi.n	1d5fe <uarte_nrfx_configure+0xc6>
   1d5d6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1d5da:	d047      	beq.n	1d66c <uarte_nrfx_configure+0x134>
   1d5dc:	d809      	bhi.n	1d5f2 <uarte_nrfx_configure+0xba>
   1d5de:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1d5e2:	42bb      	cmp	r3, r7
   1d5e4:	d044      	beq.n	1d670 <uarte_nrfx_configure+0x138>
   1d5e6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1d5ea:	d1d0      	bne.n	1d58e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1d5ec:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1d5f0:	e017      	b.n	1d622 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1d5f2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1d5f6:	d1ca      	bne.n	1d58e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1d5f8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1d5fc:	e011      	b.n	1d622 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1d5fe:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1d602:	d038      	beq.n	1d676 <uarte_nrfx_configure+0x13e>
   1d604:	d808      	bhi.n	1d618 <uarte_nrfx_configure+0xe0>
   1d606:	4f21      	ldr	r7, [pc, #132]	; (1d68c <uarte_nrfx_configure+0x154>)
   1d608:	42bb      	cmp	r3, r7
   1d60a:	d037      	beq.n	1d67c <uarte_nrfx_configure+0x144>
   1d60c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1d610:	d1bd      	bne.n	1d58e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1d612:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1d616:	e004      	b.n	1d622 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1d618:	4f1d      	ldr	r7, [pc, #116]	; (1d690 <uarte_nrfx_configure+0x158>)
   1d61a:	42bb      	cmp	r3, r7
   1d61c:	d1b7      	bne.n	1d58e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1d61e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1d622:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1d626:	68c3      	ldr	r3, [r0, #12]
   1d628:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1d62a:	4334      	orrs	r4, r6
   1d62c:	4322      	orrs	r2, r4
   1d62e:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1d630:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1d634:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1d638:	2000      	movs	r0, #0
}
   1d63a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1d63c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1d640:	e7ef      	b.n	1d622 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1d642:	4b14      	ldr	r3, [pc, #80]	; (1d694 <uarte_nrfx_configure+0x15c>)
   1d644:	e7ed      	b.n	1d622 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1d646:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1d64a:	e7ea      	b.n	1d622 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   1d64c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1d650:	e7e7      	b.n	1d622 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1d652:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1d656:	e7e4      	b.n	1d622 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1d658:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1d65c:	e7e1      	b.n	1d622 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1d65e:	4b0e      	ldr	r3, [pc, #56]	; (1d698 <uarte_nrfx_configure+0x160>)
   1d660:	e7df      	b.n	1d622 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1d662:	4b0e      	ldr	r3, [pc, #56]	; (1d69c <uarte_nrfx_configure+0x164>)
   1d664:	e7dd      	b.n	1d622 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1d666:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1d66a:	e7da      	b.n	1d622 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1d66c:	4b0c      	ldr	r3, [pc, #48]	; (1d6a0 <uarte_nrfx_configure+0x168>)
   1d66e:	e7d8      	b.n	1d622 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1d670:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1d674:	e7d5      	b.n	1d622 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1d676:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1d67a:	e7d2      	b.n	1d622 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1d67c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1d680:	e7cf      	b.n	1d622 <uarte_nrfx_configure+0xea>
   1d682:	bf00      	nop
   1d684:	0013b000 	.word	0x0013b000
   1d688:	004ea000 	.word	0x004ea000
   1d68c:	0003d090 	.word	0x0003d090
   1d690:	000f4240 	.word	0x000f4240
   1d694:	00275000 	.word	0x00275000
   1d698:	0075c000 	.word	0x0075c000
   1d69c:	003af000 	.word	0x003af000
   1d6a0:	013a9000 	.word	0x013a9000

0001d6a4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1d6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1d6a8:	68c7      	ldr	r7, [r0, #12]
{
   1d6aa:	4606      	mov	r6, r0
   1d6ac:	4688      	mov	r8, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d6ae:	f007 f8dd 	bl	2486c <k_is_in_isr>
   1d6b2:	b9b8      	cbnz	r0, 1d6e4 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   1d6b4:	4b28      	ldr	r3, [pc, #160]	; (1d758 <uarte_nrfx_poll_out+0xb4>)
   1d6b6:	781b      	ldrb	r3, [r3, #0]
   1d6b8:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   1d6bc:	6872      	ldr	r2, [r6, #4]
   1d6be:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   1d6c0:	b193      	cbz	r3, 1d6e8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1d6c2:	f04f 0320 	mov.w	r3, #32
   1d6c6:	f3ef 8411 	mrs	r4, BASEPRI
   1d6ca:	f383 8811 	msr	BASEPRI, r3
   1d6ce:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1d6d2:	4630      	mov	r0, r6
   1d6d4:	f006 fe17 	bl	24306 <is_tx_ready>
   1d6d8:	bb38      	cbnz	r0, 1d72a <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   1d6da:	f384 8811 	msr	BASEPRI, r4
   1d6de:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1d6e2:	e7ee      	b.n	1d6c2 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d6e4:	2301      	movs	r3, #1
   1d6e6:	e7e9      	b.n	1d6bc <uarte_nrfx_poll_out+0x18>
   1d6e8:	2464      	movs	r4, #100	; 0x64
	} else {
		do {
			/* wait arbitrary time before back off. */
			bool res;

			NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1d6ea:	4630      	mov	r0, r6
   1d6ec:	f006 fe0b 	bl	24306 <is_tx_ready>
   1d6f0:	b970      	cbnz	r0, 1d710 <uarte_nrfx_poll_out+0x6c>
   1d6f2:	2001      	movs	r0, #1
   1d6f4:	f006 fe2a 	bl	2434c <nrfx_busy_wait>
   1d6f8:	3c01      	subs	r4, #1
   1d6fa:	d1f6      	bne.n	1d6ea <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   1d6fc:	2100      	movs	r1, #0
   1d6fe:	2001      	movs	r0, #1
   1d700:	f001 fb22 	bl	1ed48 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d704:	e7f0      	b.n	1d6e8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1d706:	f384 8811 	msr	BASEPRI, r4
   1d70a:	f3bf 8f6f 	isb	sy
}
   1d70e:	e7f5      	b.n	1d6fc <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   1d710:	f04f 0320 	mov.w	r3, #32
   1d714:	f3ef 8411 	mrs	r4, BASEPRI
   1d718:	f383 8811 	msr	BASEPRI, r3
   1d71c:	f3bf 8f6f 	isb	sy

			if (res) {
				key = irq_lock();
				if (is_tx_ready(dev)) {
   1d720:	4630      	mov	r0, r6
   1d722:	f006 fdf0 	bl	24306 <is_tx_ready>
   1d726:	2800      	cmp	r0, #0
   1d728:	d0ed      	beq.n	1d706 <uarte_nrfx_poll_out+0x62>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   1d72a:	f807 8f0c 	strb.w	r8, [r7, #12]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1d72e:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d730:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d732:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d736:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d73a:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   1d73e:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   1d742:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   1d746:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d74a:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   1d74c:	f384 8811 	msr	BASEPRI, r4
   1d750:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   1d754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d758:	2000309d 	.word	0x2000309d

0001d75c <nrf_gpio_cfg_output>:
    *p_pin = pin_number & 0x1F;
   1d75c:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1d760:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d762:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   1d764:	4b04      	ldr	r3, [pc, #16]	; (1d778 <nrf_gpio_cfg_output+0x1c>)
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d766:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   1d76a:	bf18      	it	ne
   1d76c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d770:	2103      	movs	r1, #3
   1d772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1d776:	4770      	bx	lr
   1d778:	50000300 	.word	0x50000300

0001d77c <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
   1d77c:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1d780:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d782:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   1d784:	4b04      	ldr	r3, [pc, #16]	; (1d798 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1d786:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   1d78a:	bf18      	it	ne
   1d78c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1d790:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   1d792:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   1d796:	4770      	bx	lr
   1d798:	50000300 	.word	0x50000300

0001d79c <uarte_instance_init.isra.0>:
	return config->uarte_regs;
   1d79c:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1d79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1d7a2:	681c      	ldr	r4, [r3, #0]
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1d7a4:	68c7      	ldr	r7, [r0, #12]
static int uarte_instance_init(const struct device *dev,
   1d7a6:	460d      	mov	r5, r1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d7a8:	f04f 0800 	mov.w	r8, #0
   1d7ac:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
   1d7b0:	4606      	mov	r6, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1d7b2:	6038      	str	r0, [r7, #0]
        nrf_gpio_pin_set(pin_number);
   1d7b4:	6808      	ldr	r0, [r1, #0]
   1d7b6:	f7ff ffe1 	bl	1d77c <nrf_gpio_pin_set>

	nrf_gpio_pin_write(config->pseltxd, 1);
	nrf_gpio_cfg_output(config->pseltxd);
   1d7ba:	6828      	ldr	r0, [r5, #0]
   1d7bc:	f7ff ffce 	bl	1d75c <nrf_gpio_cfg_output>

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1d7c0:	686a      	ldr	r2, [r5, #4]
   1d7c2:	1c51      	adds	r1, r2, #1
   1d7c4:	d00b      	beq.n	1d7de <uarte_instance_init.isra.0+0x42>
    return pin_number >> 5;
   1d7c6:	0951      	lsrs	r1, r2, #5
        case 1: return NRF_P1;
   1d7c8:	2901      	cmp	r1, #1
    *p_pin = pin_number & 0x1F;
   1d7ca:	f002 031f 	and.w	r3, r2, #31
        case 1: return NRF_P1;
   1d7ce:	4941      	ldr	r1, [pc, #260]	; (1d8d4 <uarte_instance_init.isra.0+0x138>)
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d7d0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   1d7d4:	bf18      	it	ne
   1d7d6:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d7da:	f841 8023 	str.w	r8, [r1, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   1d7de:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   1d7e0:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1d7e4:	68ab      	ldr	r3, [r5, #8]
    p_reg->PSEL.RXD = pselrxd;
   1d7e6:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   1d7ea:	1c5a      	adds	r2, r3, #1
   1d7ec:	d00c      	beq.n	1d808 <uarte_instance_init.isra.0+0x6c>
    *p_pin = pin_number & 0x1F;
   1d7ee:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1d7f2:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1d7f4:	2b01      	cmp	r3, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d7f6:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   1d7fa:	4b36      	ldr	r3, [pc, #216]	; (1d8d4 <uarte_instance_init.isra.0+0x138>)
   1d7fc:	bf18      	it	ne
   1d7fe:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d802:	2100      	movs	r1, #0
   1d804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1d808:	68e8      	ldr	r0, [r5, #12]
   1d80a:	1c43      	adds	r3, r0, #1
   1d80c:	d004      	beq.n	1d818 <uarte_instance_init.isra.0+0x7c>
        nrf_gpio_pin_set(pin_number);
   1d80e:	f7ff ffb5 	bl	1d77c <nrf_gpio_pin_set>
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
   1d812:	68e8      	ldr	r0, [r5, #12]
   1d814:	f7ff ffa2 	bl	1d75c <nrf_gpio_cfg_output>
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   1d818:	e9d5 3202 	ldrd	r3, r2, [r5, #8]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1d81c:	68f1      	ldr	r1, [r6, #12]
    p_reg->PSEL.RTS = pselrts;
   1d81e:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   1d822:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   1d824:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1d828:	4630      	mov	r0, r6
   1d82a:	f7ff fe85 	bl	1d538 <uarte_nrfx_configure>
	if (err) {
   1d82e:	4680      	mov	r8, r0
   1d830:	b9a8      	cbnz	r0, 1d85e <uarte_instance_init.isra.0+0xc2>

#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
   1d832:	6873      	ldr	r3, [r6, #4]
   1d834:	799b      	ldrb	r3, [r3, #6]
   1d836:	b343      	cbz	r3, 1d88a <uarte_instance_init.isra.0+0xee>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1d838:	f107 000e 	add.w	r0, r7, #14
   1d83c:	f000 fb9c 	bl	1df78 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1d840:	4b25      	ldr	r3, [pc, #148]	; (1d8d8 <uarte_instance_init.isra.0+0x13c>)
   1d842:	4298      	cmp	r0, r3
   1d844:	d00e      	beq.n	1d864 <uarte_instance_init.isra.0+0xc8>
   1d846:	4b25      	ldr	r3, [pc, #148]	; (1d8dc <uarte_instance_init.isra.0+0x140>)
   1d848:	4925      	ldr	r1, [pc, #148]	; (1d8e0 <uarte_instance_init.isra.0+0x144>)
		LOG_ERR("Failed to allocate PPI Channel");
   1d84a:	4826      	ldr	r0, [pc, #152]	; (1d8e4 <uarte_instance_init.isra.0+0x148>)
   1d84c:	1ac9      	subs	r1, r1, r3
   1d84e:	08c9      	lsrs	r1, r1, #3
   1d850:	0189      	lsls	r1, r1, #6
   1d852:	f041 0101 	orr.w	r1, r1, #1
   1d856:	f002 fb12 	bl	1fe7e <log_0>
		return -EIO;
   1d85a:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1d85e:	4640      	mov	r0, r8
   1d860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1d864:	7bb8      	ldrb	r0, [r7, #14]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1d866:	00c3      	lsls	r3, r0, #3
   1d868:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d86c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1d870:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1d874:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d878:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d87c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1d880:	4a19      	ldr	r2, [pc, #100]	; (1d8e8 <uarte_instance_init.isra.0+0x14c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1d882:	2301      	movs	r3, #1
   1d884:	4083      	lsls	r3, r0
   1d886:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d88a:	2308      	movs	r3, #8
   1d88c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1d890:	686b      	ldr	r3, [r5, #4]
   1d892:	3301      	adds	r3, #1
   1d894:	d00c      	beq.n	1d8b0 <uarte_instance_init.isra.0+0x114>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d896:	2300      	movs	r3, #0
   1d898:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1d89c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1d8a0:	f107 030d 	add.w	r3, r7, #13

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d8a4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d8a8:	2301      	movs	r3, #1
   1d8aa:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d8ae:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   1d8b0:	6873      	ldr	r3, [r6, #4]
   1d8b2:	799b      	ldrb	r3, [r3, #6]
   1d8b4:	b91b      	cbnz	r3, 1d8be <uarte_instance_init.isra.0+0x122>
    p_reg->INTENSET = mask;
   1d8b6:	f44f 7380 	mov.w	r3, #256	; 0x100
   1d8ba:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   1d8be:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1d8c0:	370c      	adds	r7, #12
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d8c2:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d8c6:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d8ca:	2301      	movs	r3, #1
   1d8cc:	60a3      	str	r3, [r4, #8]
   1d8ce:	60e3      	str	r3, [r4, #12]
	return 0;
   1d8d0:	e7c5      	b.n	1d85e <uarte_instance_init.isra.0+0xc2>
   1d8d2:	bf00      	nop
   1d8d4:	50000300 	.word	0x50000300
   1d8d8:	0bad0000 	.word	0x0bad0000
   1d8dc:	00024fd8 	.word	0x00024fd8
   1d8e0:	00025128 	.word	0x00025128
   1d8e4:	00028956 	.word	0x00028956
   1d8e8:	4001f000 	.word	0x4001f000

0001d8ec <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1d8ec:	b530      	push	{r4, r5, lr}
   1d8ee:	4b0a      	ldr	r3, [pc, #40]	; (1d918 <uarte_0_init+0x2c>)
   1d8f0:	4605      	mov	r5, r0
   1d8f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1d8f4:	b085      	sub	sp, #20
   1d8f6:	466c      	mov	r4, sp
   1d8f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1d8fc:	2200      	movs	r2, #0
   1d8fe:	2101      	movs	r1, #1
   1d900:	2002      	movs	r0, #2
   1d902:	f7e8 ff59 	bl	67b8 <z_arm_irq_priority_set>
   1d906:	2002      	movs	r0, #2
   1d908:	f7e8 ff24 	bl	6754 <arch_irq_enable>
   1d90c:	4621      	mov	r1, r4
   1d90e:	4628      	mov	r0, r5
   1d910:	f7ff ff44 	bl	1d79c <uarte_instance_init.isra.0>
   1d914:	b005      	add	sp, #20
   1d916:	bd30      	pop	{r4, r5, pc}
   1d918:	000251dc 	.word	0x000251dc

0001d91c <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1d91c:	b530      	push	{r4, r5, lr}
   1d91e:	4b0a      	ldr	r3, [pc, #40]	; (1d948 <uarte_1_init+0x2c>)
   1d920:	4605      	mov	r5, r0
   1d922:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1d924:	b085      	sub	sp, #20
   1d926:	466c      	mov	r4, sp
   1d928:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1d92c:	2200      	movs	r2, #0
   1d92e:	2101      	movs	r1, #1
   1d930:	2028      	movs	r0, #40	; 0x28
   1d932:	f7e8 ff41 	bl	67b8 <z_arm_irq_priority_set>
   1d936:	2028      	movs	r0, #40	; 0x28
   1d938:	f7e8 ff0c 	bl	6754 <arch_irq_enable>
   1d93c:	4621      	mov	r1, r4
   1d93e:	4628      	mov	r0, r5
   1d940:	f7ff ff2c 	bl	1d79c <uarte_instance_init.isra.0>
   1d944:	b005      	add	sp, #20
   1d946:	bd30      	pop	{r4, r5, pc}
   1d948:	000251ec 	.word	0x000251ec

0001d94c <random_byte_get>:
	__asm__ volatile(
   1d94c:	f04f 0320 	mov.w	r3, #32
   1d950:	f3ef 8211 	mrs	r2, BASEPRI
   1d954:	f383 8811 	msr	BASEPRI, r3
   1d958:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1d95c:	4b08      	ldr	r3, [pc, #32]	; (1d980 <random_byte_get+0x34>)
   1d95e:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1d960:	b159      	cbz	r1, 1d97a <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1d962:	4908      	ldr	r1, [pc, #32]	; (1d984 <random_byte_get+0x38>)
   1d964:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1d968:	2100      	movs	r1, #0
   1d96a:	6019      	str	r1, [r3, #0]
   1d96c:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1d96e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1d970:	f382 8811 	msr	BASEPRI, r2
   1d974:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1d978:	4770      	bx	lr
	int retval = -EAGAIN;
   1d97a:	f06f 000a 	mvn.w	r0, #10
   1d97e:	e7f7      	b.n	1d970 <random_byte_get+0x24>
   1d980:	4000d100 	.word	0x4000d100
   1d984:	4000d000 	.word	0x4000d000

0001d988 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1d988:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d98a:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1d98c:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1d98e:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1d990:	f04f 0520 	mov.w	r5, #32
   1d994:	f3ef 8011 	mrs	r0, BASEPRI
   1d998:	f385 8811 	msr	BASEPRI, r5
   1d99c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1d9a0:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1d9a2:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1d9a6:	1ba4      	subs	r4, r4, r6
   1d9a8:	403c      	ands	r4, r7
	if (available < len) {
   1d9aa:	42a2      	cmp	r2, r4
		len = available;
   1d9ac:	bf88      	it	hi
   1d9ae:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1d9b0:	eb06 0c02 	add.w	ip, r6, r2
   1d9b4:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1d9b8:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1d9ba:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1d9be:	f380 8811 	msr	BASEPRI, r0
   1d9c2:	f3bf 8f6f 	isb	sy
   1d9c6:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1d9c8:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1d9ca:	4282      	cmp	r2, r0
   1d9cc:	d119      	bne.n	1da02 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1d9ce:	4576      	cmp	r6, lr
   1d9d0:	d10d      	bne.n	1d9ee <rng_pool_get+0x66>
	__asm__ volatile(
   1d9d2:	f04f 0520 	mov.w	r5, #32
   1d9d6:	f3ef 8211 	mrs	r2, BASEPRI
   1d9da:	f385 8811 	msr	BASEPRI, r5
   1d9de:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1d9e2:	781d      	ldrb	r5, [r3, #0]
   1d9e4:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1d9e6:	f382 8811 	msr	BASEPRI, r2
   1d9ea:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1d9ee:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1d9f0:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1d9f2:	b288      	uxth	r0, r1
	available = available - len;
   1d9f4:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1d9f6:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1d9f8:	bf22      	ittt	cs
   1d9fa:	4b06      	ldrcs	r3, [pc, #24]	; (1da14 <rng_pool_get+0x8c>)
   1d9fc:	2201      	movcs	r2, #1
   1d9fe:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1da00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1da02:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1da06:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1da08:	f89c c005 	ldrb.w	ip, [ip, #5]
   1da0c:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1da10:	403d      	ands	r5, r7
   1da12:	e7da      	b.n	1d9ca <rng_pool_get+0x42>
   1da14:	4000d000 	.word	0x4000d000

0001da18 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1da18:	43db      	mvns	r3, r3
{
   1da1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1da1e:	f013 0501 	ands.w	r5, r3, #1
{
   1da22:	460e      	mov	r6, r1
   1da24:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1da26:	d004      	beq.n	1da32 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1da28:	4821      	ldr	r0, [pc, #132]	; (1dab0 <entropy_nrf5_get_entropy_isr+0x98>)
   1da2a:	f7ff ffad 	bl	1d988 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1da2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1da32:	2a00      	cmp	r2, #0
   1da34:	d033      	beq.n	1da9e <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1da36:	f04f 0320 	mov.w	r3, #32
   1da3a:	f3ef 8811 	mrs	r8, BASEPRI
   1da3e:	f383 8811 	msr	BASEPRI, r3
   1da42:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1da46:	200d      	movs	r0, #13
   1da48:	f7e8 fea8 	bl	679c <arch_irq_is_enabled>
   1da4c:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1da4e:	200d      	movs	r0, #13
   1da50:	f7e8 fe90 	bl	6774 <arch_irq_disable>
	__asm__ volatile(
   1da54:	f388 8811 	msr	BASEPRI, r8
   1da58:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1da5c:	4a15      	ldr	r2, [pc, #84]	; (1dab4 <entropy_nrf5_get_entropy_isr+0x9c>)
   1da5e:	6015      	str	r5, [r2, #0]
   1da60:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1da62:	4b15      	ldr	r3, [pc, #84]	; (1dab8 <entropy_nrf5_get_entropy_isr+0xa0>)
   1da64:	2101      	movs	r1, #1
   1da66:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1da68:	4914      	ldr	r1, [pc, #80]	; (1dabc <entropy_nrf5_get_entropy_isr+0xa4>)
   1da6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1da6e:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1da72:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1da74:	4691      	mov	r9, r2
   1da76:	468a      	mov	sl, r1
   1da78:	4698      	mov	r8, r3
   1da7a:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1da7e:	b183      	cbz	r3, 1daa2 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1da80:	f7ff ff64 	bl	1d94c <random_byte_get>
			if (byte < 0) {
   1da84:	1e03      	subs	r3, r0, #0
   1da86:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1da8a:	dbf6      	blt.n	1da7a <entropy_nrf5_get_entropy_isr+0x62>
   1da8c:	3d01      	subs	r5, #1
   1da8e:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1da90:	5573      	strb	r3, [r6, r5]
		} while (len);
   1da92:	2d00      	cmp	r5, #0
   1da94:	d1f1      	bne.n	1da7a <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1da96:	b117      	cbz	r7, 1da9e <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1da98:	200d      	movs	r0, #13
   1da9a:	f7e8 fe5b 	bl	6754 <arch_irq_enable>
	return cnt;
   1da9e:	4620      	mov	r0, r4
   1daa0:	e7c5      	b.n	1da2e <entropy_nrf5_get_entropy_isr+0x16>
   1daa2:	f3bf 8f4f 	dsb	sy
				__WFE();
   1daa6:	bf20      	wfe
				__SEV();
   1daa8:	bf40      	sev
				__WFE();
   1daaa:	bf20      	wfe
   1daac:	e7e5      	b.n	1da7a <entropy_nrf5_get_entropy_isr+0x62>
   1daae:	bf00      	nop
   1dab0:	20002920 	.word	0x20002920
   1dab4:	4000d100 	.word	0x4000d100
   1dab8:	4000d000 	.word	0x4000d000
   1dabc:	e000e100 	.word	0xe000e100

0001dac0 <entropy_nrf5_get_entropy>:
{
   1dac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1dac4:	4f13      	ldr	r7, [pc, #76]	; (1db14 <entropy_nrf5_get_entropy+0x54>)
   1dac6:	460d      	mov	r5, r1
   1dac8:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1daca:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1dace:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1dad2:	b914      	cbnz	r4, 1dada <entropy_nrf5_get_entropy+0x1a>
}
   1dad4:	4620      	mov	r0, r4
   1dad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1dada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dae2:	4638      	mov	r0, r7
   1dae4:	f001 f978 	bl	1edd8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1dae8:	4622      	mov	r2, r4
   1daea:	4629      	mov	r1, r5
   1daec:	4640      	mov	r0, r8
   1daee:	f7ff ff4b 	bl	1d988 <rng_pool_get>
   1daf2:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1daf4:	4638      	mov	r0, r7
   1daf6:	f001 f949 	bl	1ed8c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1dafa:	b93e      	cbnz	r6, 1db0c <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1dafc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1db00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1db04:	4648      	mov	r0, r9
   1db06:	f001 f967 	bl	1edd8 <z_impl_k_sem_take>
			continue;
   1db0a:	e7e2      	b.n	1dad2 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1db0c:	1ba4      	subs	r4, r4, r6
   1db0e:	b2a4      	uxth	r4, r4
		buf += bytes;
   1db10:	4435      	add	r5, r6
   1db12:	e7de      	b.n	1dad2 <entropy_nrf5_get_entropy+0x12>
   1db14:	200028f0 	.word	0x200028f0

0001db18 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *device)
{
   1db18:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1db1a:	4c19      	ldr	r4, [pc, #100]	; (1db80 <entropy_nrf5_init+0x68>)
   1db1c:	2201      	movs	r2, #1
   1db1e:	4611      	mov	r1, r2
   1db20:	4620      	mov	r0, r4
   1db22:	f006 fe93 	bl	2484c <z_impl_k_sem_init>
   1db26:	2201      	movs	r2, #1
   1db28:	2100      	movs	r1, #0
   1db2a:	f104 0018 	add.w	r0, r4, #24
   1db2e:	f006 fe8d 	bl	2484c <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1db32:	f240 4307 	movw	r3, #1031	; 0x407
   1db36:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1db3a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1db3e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1db40:	230c      	movs	r3, #12
   1db42:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1db46:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1db48:	4b0e      	ldr	r3, [pc, #56]	; (1db84 <entropy_nrf5_init+0x6c>)
   1db4a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1db4e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1db52:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1db56:	f042 0201 	orr.w	r2, r2, #1
   1db5a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1db5e:	4a0a      	ldr	r2, [pc, #40]	; (1db88 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   1db60:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1db62:	6015      	str	r5, [r2, #0]
   1db64:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1db66:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1db6a:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1db6c:	6019      	str	r1, [r3, #0]
   1db6e:	200d      	movs	r0, #13
   1db70:	f7e8 fe22 	bl	67b8 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1db74:	200d      	movs	r0, #13
   1db76:	f7e8 fded 	bl	6754 <arch_irq_enable>

	return 0;
}
   1db7a:	4628      	mov	r0, r5
   1db7c:	bd38      	pop	{r3, r4, r5, pc}
   1db7e:	bf00      	nop
   1db80:	200028f0 	.word	0x200028f0
   1db84:	4000d000 	.word	0x4000d000
   1db88:	4000d100 	.word	0x4000d100

0001db8c <isr>:
{
   1db8c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1db8e:	f7ff fedd 	bl	1d94c <random_byte_get>
	if (byte < 0) {
   1db92:	2800      	cmp	r0, #0
   1db94:	db20      	blt.n	1dbd8 <isr+0x4c>
	uint8_t last  = rngp->last;
   1db96:	4b17      	ldr	r3, [pc, #92]	; (1dbf4 <isr+0x68>)
   1db98:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1db9c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1dba0:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1dba4:	1a51      	subs	r1, r2, r1
   1dba6:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1dbaa:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1dbac:	d10d      	bne.n	1dbca <isr+0x3e>
	uint8_t last  = rngp->last;
   1dbae:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1dbb2:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1dbb6:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1dbba:	1a51      	subs	r1, r2, r1
   1dbbc:	ea34 0101 	bics.w	r1, r4, r1
   1dbc0:	d10b      	bne.n	1dbda <isr+0x4e>
   1dbc2:	4b0d      	ldr	r3, [pc, #52]	; (1dbf8 <isr+0x6c>)
   1dbc4:	2201      	movs	r2, #1
   1dbc6:	601a      	str	r2, [r3, #0]
}
   1dbc8:	e00e      	b.n	1dbe8 <isr+0x5c>
	rngp->buffer[last] = byte;
   1dbca:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1dbcc:	3201      	adds	r2, #1
   1dbce:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1dbd0:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1dbd4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1dbd8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1dbda:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1dbdc:	3201      	adds	r2, #1
   1dbde:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1dbe0:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1dbe4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1dbe8:	4804      	ldr	r0, [pc, #16]	; (1dbfc <isr+0x70>)
}
   1dbea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1dbee:	f001 b8cd 	b.w	1ed8c <z_impl_k_sem_give>
   1dbf2:	bf00      	nop
   1dbf4:	200028f0 	.word	0x200028f0
   1dbf8:	4000d004 	.word	0x4000d004
   1dbfc:	20002908 	.word	0x20002908

0001dc00 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1dc00:	4b06      	ldr	r3, [pc, #24]	; (1dc1c <nrf52_errata_136+0x1c>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1dc02:	681b      	ldr	r3, [r3, #0]
   1dc04:	2b08      	cmp	r3, #8
   1dc06:	d106      	bne.n	1dc16 <nrf52_errata_136+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1dc08:	4b05      	ldr	r3, [pc, #20]	; (1dc20 <nrf52_errata_136+0x20>)
   1dc0a:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1dc0c:	2b05      	cmp	r3, #5
   1dc0e:	d802      	bhi.n	1dc16 <nrf52_errata_136+0x16>
   1dc10:	4a04      	ldr	r2, [pc, #16]	; (1dc24 <nrf52_errata_136+0x24>)
   1dc12:	5cd0      	ldrb	r0, [r2, r3]
   1dc14:	4770      	bx	lr
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1dc16:	2000      	movs	r0, #0
    #endif
}
   1dc18:	4770      	bx	lr
   1dc1a:	bf00      	nop
   1dc1c:	10000130 	.word	0x10000130
   1dc20:	10000134 	.word	0x10000134
   1dc24:	00028990 	.word	0x00028990

0001dc28 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1dc28:	4b06      	ldr	r3, [pc, #24]	; (1dc44 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1dc2a:	681b      	ldr	r3, [r3, #0]
   1dc2c:	2b08      	cmp	r3, #8
   1dc2e:	d106      	bne.n	1dc3e <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1dc30:	4b05      	ldr	r3, [pc, #20]	; (1dc48 <nrf52_errata_103+0x20>)
   1dc32:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1dc34:	2b05      	cmp	r3, #5
   1dc36:	d802      	bhi.n	1dc3e <nrf52_errata_103+0x16>
   1dc38:	4a04      	ldr	r2, [pc, #16]	; (1dc4c <nrf52_errata_103+0x24>)
   1dc3a:	5cd0      	ldrb	r0, [r2, r3]
   1dc3c:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1dc3e:	2000      	movs	r0, #0
    #endif
}
   1dc40:	4770      	bx	lr
   1dc42:	bf00      	nop
   1dc44:	10000130 	.word	0x10000130
   1dc48:	10000134 	.word	0x10000134
   1dc4c:	00028996 	.word	0x00028996

0001dc50 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1dc50:	4a02      	ldr	r2, [pc, #8]	; (1dc5c <nvmc_wait+0xc>)
   1dc52:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1dc56:	2b00      	cmp	r3, #0
   1dc58:	d0fb      	beq.n	1dc52 <nvmc_wait+0x2>
}
   1dc5a:	4770      	bx	lr
   1dc5c:	4001e000 	.word	0x4001e000

0001dc60 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1dc60:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1dc62:	f7ff ffcd 	bl	1dc00 <nrf52_errata_136>
   1dc66:	b140      	cbz	r0, 1dc7a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1dc68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dc6c:	2200      	movs	r2, #0
   1dc6e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1dc72:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1dc76:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1dc7a:	f7ff ffc1 	bl	1dc00 <nrf52_errata_136>
   1dc7e:	2800      	cmp	r0, #0
   1dc80:	d046      	beq.n	1dd10 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1dc82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1dc86:	4b52      	ldr	r3, [pc, #328]	; (1ddd0 <SystemInit+0x170>)
   1dc88:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1dc8c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1dc90:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1dc94:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1dc98:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1dc9c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1dca0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1dca4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1dca8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1dcac:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1dcb0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1dcb4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1dcb8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1dcbc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1dcc0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1dcc4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1dcc8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1dccc:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1dcd0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1dcd4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1dcd8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1dcdc:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1dce0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1dce4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1dce8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1dcec:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1dcf0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1dcf4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1dcf8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1dcfc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1dd00:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1dd04:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1dd08:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1dd0c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1dd10:	f7ff ff8a 	bl	1dc28 <nrf52_errata_103>
   1dd14:	b110      	cbz	r0, 1dd1c <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1dd16:	4b2f      	ldr	r3, [pc, #188]	; (1ddd4 <SystemInit+0x174>)
   1dd18:	4a2f      	ldr	r2, [pc, #188]	; (1ddd8 <SystemInit+0x178>)
   1dd1a:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1dd1c:	f7ff ff84 	bl	1dc28 <nrf52_errata_103>
   1dd20:	b118      	cbz	r0, 1dd2a <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1dd22:	4b2e      	ldr	r3, [pc, #184]	; (1dddc <SystemInit+0x17c>)
   1dd24:	22fb      	movs	r2, #251	; 0xfb
   1dd26:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1dd2a:	f7ff ff7d 	bl	1dc28 <nrf52_errata_103>
   1dd2e:	b148      	cbz	r0, 1dd44 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1dd30:	492b      	ldr	r1, [pc, #172]	; (1dde0 <SystemInit+0x180>)
   1dd32:	4b2c      	ldr	r3, [pc, #176]	; (1dde4 <SystemInit+0x184>)
   1dd34:	680a      	ldr	r2, [r1, #0]
   1dd36:	681b      	ldr	r3, [r3, #0]
   1dd38:	f022 020f 	bic.w	r2, r2, #15
   1dd3c:	f003 030f 	and.w	r3, r3, #15
   1dd40:	4313      	orrs	r3, r2
   1dd42:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1dd44:	f7ff ff70 	bl	1dc28 <nrf52_errata_103>
   1dd48:	b118      	cbz	r0, 1dd52 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1dd4a:	4b27      	ldr	r3, [pc, #156]	; (1dde8 <SystemInit+0x188>)
   1dd4c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1dd50:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1dd52:	f7ff ff55 	bl	1dc00 <nrf52_errata_136>
   1dd56:	b148      	cbz	r0, 1dd6c <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1dd58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dd5c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1dd60:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1dd62:	bf44      	itt	mi
   1dd64:	f06f 0201 	mvnmi.w	r2, #1
   1dd68:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1dd6c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1dd70:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1dd74:	2a00      	cmp	r2, #0
   1dd76:	db03      	blt.n	1dd80 <SystemInit+0x120>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1dd78:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1dd7c:	2b00      	cmp	r3, #0
   1dd7e:	da22      	bge.n	1ddc6 <SystemInit+0x166>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1dd80:	491a      	ldr	r1, [pc, #104]	; (1ddec <SystemInit+0x18c>)
   1dd82:	2301      	movs	r3, #1
   1dd84:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1dd88:	f7ff ff62 	bl	1dc50 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1dd8c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   1dd90:	2412      	movs	r4, #18
   1dd92:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1dd96:	f7ff ff5b 	bl	1dc50 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1dd9a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1dd9e:	f7ff ff57 	bl	1dc50 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1dda2:	2300      	movs	r3, #0
   1dda4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1dda8:	f7ff ff52 	bl	1dc50 <nvmc_wait>
   1ddac:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1ddb0:	490f      	ldr	r1, [pc, #60]	; (1ddf0 <SystemInit+0x190>)
   1ddb2:	4b10      	ldr	r3, [pc, #64]	; (1ddf4 <SystemInit+0x194>)
   1ddb4:	68ca      	ldr	r2, [r1, #12]
   1ddb6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1ddba:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1ddbc:	60cb      	str	r3, [r1, #12]
   1ddbe:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1ddc2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1ddc4:	e7fd      	b.n	1ddc2 <SystemInit+0x162>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1ddc6:	4b0c      	ldr	r3, [pc, #48]	; (1ddf8 <SystemInit+0x198>)
   1ddc8:	4a0c      	ldr	r2, [pc, #48]	; (1ddfc <SystemInit+0x19c>)
   1ddca:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1ddcc:	bd10      	pop	{r4, pc}
   1ddce:	bf00      	nop
   1ddd0:	4000c000 	.word	0x4000c000
   1ddd4:	4000568c 	.word	0x4000568c
   1ddd8:	00038148 	.word	0x00038148
   1dddc:	4000f000 	.word	0x4000f000
   1dde0:	40000ee4 	.word	0x40000ee4
   1dde4:	10000258 	.word	0x10000258
   1dde8:	40029640 	.word	0x40029640
   1ddec:	4001e000 	.word	0x4001e000
   1ddf0:	e000ed00 	.word	0xe000ed00
   1ddf4:	05fa0004 	.word	0x05fa0004
   1ddf8:	200005bc 	.word	0x200005bc
   1ddfc:	03d09000 	.word	0x03d09000

0001de00 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1de00:	4b04      	ldr	r3, [pc, #16]	; (1de14 <nrfx_clock_init+0x14>)
   1de02:	791a      	ldrb	r2, [r3, #4]
   1de04:	b922      	cbnz	r2, 1de10 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1de06:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1de08:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1de0a:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1de0c:	4802      	ldr	r0, [pc, #8]	; (1de18 <nrfx_clock_init+0x18>)
   1de0e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1de10:	4802      	ldr	r0, [pc, #8]	; (1de1c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1de12:	4770      	bx	lr
   1de14:	20002944 	.word	0x20002944
   1de18:	0bad0000 	.word	0x0bad0000
   1de1c:	0bad000c 	.word	0x0bad000c

0001de20 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1de20:	b110      	cbz	r0, 1de28 <nrfx_clock_start+0x8>
   1de22:	2801      	cmp	r0, #1
   1de24:	d020      	beq.n	1de68 <nrfx_clock_start+0x48>
   1de26:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1de28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1de2c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1de30:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1de34:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   1de38:	4619      	mov	r1, r3
   1de3a:	d011      	beq.n	1de60 <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1de3c:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1de40:	2a01      	cmp	r2, #1
   1de42:	d10d      	bne.n	1de60 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1de44:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1de48:	4b0c      	ldr	r3, [pc, #48]	; (1de7c <nrfx_clock_start+0x5c>)
   1de4a:	2200      	movs	r2, #0
   1de4c:	601a      	str	r2, [r3, #0]
   1de4e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1de50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1de54:	2202      	movs	r2, #2
   1de56:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1de5a:	2201      	movs	r2, #1
   1de5c:	609a      	str	r2, [r3, #8]
}
   1de5e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   1de60:	2300      	movs	r3, #0
   1de62:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   1de66:	e7ef      	b.n	1de48 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1de68:	4b05      	ldr	r3, [pc, #20]	; (1de80 <nrfx_clock_start+0x60>)
   1de6a:	2200      	movs	r2, #0
   1de6c:	601a      	str	r2, [r3, #0]
   1de6e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1de70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1de74:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1de78:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1de7a:	4770      	bx	lr
   1de7c:	40000104 	.word	0x40000104
   1de80:	40000100 	.word	0x40000100

0001de84 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1de84:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1de86:	b110      	cbz	r0, 1de8e <nrfx_clock_stop+0xa>
   1de88:	2801      	cmp	r0, #1
   1de8a:	d018      	beq.n	1debe <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1de8c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1de8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1de92:	2202      	movs	r2, #2
   1de94:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1de98:	4a18      	ldr	r2, [pc, #96]	; (1defc <nrfx_clock_stop+0x78>)
   1de9a:	6010      	str	r0, [r2, #0]
   1de9c:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1de9e:	4a18      	ldr	r2, [pc, #96]	; (1df00 <nrfx_clock_stop+0x7c>)
   1dea0:	2101      	movs	r1, #1
   1dea2:	6011      	str	r1, [r2, #0]
   1dea4:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1dea8:	461c      	mov	r4, r3
   1deaa:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1deae:	03db      	lsls	r3, r3, #15
   1deb0:	d5ec      	bpl.n	1de8c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1deb2:	2001      	movs	r0, #1
   1deb4:	f006 fa4a 	bl	2434c <nrfx_busy_wait>
   1deb8:	3d01      	subs	r5, #1
   1deba:	d1f6      	bne.n	1deaa <nrfx_clock_stop+0x26>
   1debc:	e7e6      	b.n	1de8c <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1debe:	4b11      	ldr	r3, [pc, #68]	; (1df04 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
   1dec0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dec4:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   1dec6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1deca:	601a      	str	r2, [r3, #0]
   1decc:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dece:	4b0e      	ldr	r3, [pc, #56]	; (1df08 <nrfx_clock_stop+0x84>)
   1ded0:	f242 7510 	movw	r5, #10000	; 0x2710
   1ded4:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1ded6:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1deda:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   1dede:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1dee0:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1dee4:	d505      	bpl.n	1def2 <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1dee6:	b123      	cbz	r3, 1def2 <nrfx_clock_stop+0x6e>
   1dee8:	2001      	movs	r0, #1
   1deea:	f006 fa2f 	bl	2434c <nrfx_busy_wait>
   1deee:	3d01      	subs	r5, #1
   1def0:	d1f1      	bne.n	1ded6 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
   1def2:	4b06      	ldr	r3, [pc, #24]	; (1df0c <nrfx_clock_stop+0x88>)
   1def4:	2200      	movs	r2, #0
   1def6:	715a      	strb	r2, [r3, #5]
   1def8:	e7c8      	b.n	1de8c <nrfx_clock_stop+0x8>
   1defa:	bf00      	nop
   1defc:	40000104 	.word	0x40000104
   1df00:	4000000c 	.word	0x4000000c
   1df04:	40000100 	.word	0x40000100
   1df08:	40000004 	.word	0x40000004
   1df0c:	20002944 	.word	0x20002944

0001df10 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1df10:	4b16      	ldr	r3, [pc, #88]	; (1df6c <nrfx_power_clock_irq_handler+0x5c>)
   1df12:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1df14:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1df16:	b16a      	cbz	r2, 1df34 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1df18:	2200      	movs	r2, #0
   1df1a:	601a      	str	r2, [r3, #0]
   1df1c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1df1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1df22:	2201      	movs	r2, #1
   1df24:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1df28:	4b11      	ldr	r3, [pc, #68]	; (1df70 <nrfx_power_clock_irq_handler+0x60>)
   1df2a:	7958      	ldrb	r0, [r3, #5]
   1df2c:	b910      	cbnz	r0, 1df34 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
   1df2e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1df30:	681b      	ldr	r3, [r3, #0]
   1df32:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1df34:	4b0f      	ldr	r3, [pc, #60]	; (1df74 <nrfx_power_clock_irq_handler+0x64>)
   1df36:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1df38:	b172      	cbz	r2, 1df58 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1df3a:	2200      	movs	r2, #0
   1df3c:	601a      	str	r2, [r3, #0]
   1df3e:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1df40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1df44:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1df48:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1df4c:	0792      	lsls	r2, r2, #30
   1df4e:	d104      	bne.n	1df5a <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1df50:	2201      	movs	r2, #1
   1df52:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1df56:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1df58:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1df5a:	2202      	movs	r2, #2
   1df5c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1df60:	4b03      	ldr	r3, [pc, #12]	; (1df70 <nrfx_power_clock_irq_handler+0x60>)
}
   1df62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1df66:	681b      	ldr	r3, [r3, #0]
   1df68:	2001      	movs	r0, #1
   1df6a:	4718      	bx	r3
   1df6c:	40000100 	.word	0x40000100
   1df70:	20002944 	.word	0x20002944
   1df74:	40000104 	.word	0x40000104

0001df78 <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1df78:	4b18      	ldr	r3, [pc, #96]	; (1dfdc <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   1df7a:	f8df c06c 	ldr.w	ip, [pc, #108]	; 1dfe8 <nrfx_ppi_channel_alloc+0x70>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1df7e:	681b      	ldr	r3, [r3, #0]
{
   1df80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1df84:	43db      	mvns	r3, r3
{
   1df86:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1df88:	4f15      	ldr	r7, [pc, #84]	; (1dfe0 <nrfx_ppi_channel_alloc+0x68>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1df8a:	4816      	ldr	r0, [pc, #88]	; (1dfe4 <nrfx_ppi_channel_alloc+0x6c>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1df8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1df90:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   1df92:	f04f 0e01 	mov.w	lr, #1
   1df96:	b2e6      	uxtb	r6, r4
   1df98:	b90b      	cbnz	r3, 1df9e <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1df9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1df9e:	f04f 0220 	mov.w	r2, #32
   1dfa2:	f3ef 8811 	mrs	r8, BASEPRI
   1dfa6:	f382 8811 	msr	BASEPRI, r2
   1dfaa:	f3bf 8f6f 	isb	sy
   1dfae:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1dfb2:	4213      	tst	r3, r2
   1dfb4:	d006      	beq.n	1dfc4 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1dfb6:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1dfb8:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   1dfba:	bf01      	itttt	eq
   1dfbc:	4311      	orreq	r1, r2
   1dfbe:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   1dfc0:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   1dfc2:	4660      	moveq	r0, ip
	__asm__ volatile(
   1dfc4:	f388 8811 	msr	BASEPRI, r8
   1dfc8:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   1dfcc:	4560      	cmp	r0, ip
   1dfce:	f104 0401 	add.w	r4, r4, #1
   1dfd2:	d0e2      	beq.n	1df9a <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   1dfd4:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1dfd8:	e7dd      	b.n	1df96 <nrfx_ppi_channel_alloc+0x1e>
   1dfda:	bf00      	nop
   1dfdc:	0002683c 	.word	0x0002683c
   1dfe0:	2000294c 	.word	0x2000294c
   1dfe4:	0bad0002 	.word	0x0bad0002
   1dfe8:	0bad0000 	.word	0x0bad0000

0001dfec <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1dfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1dfee:	4b10      	ldr	r3, [pc, #64]	; (1e030 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1dff0:	4f10      	ldr	r7, [pc, #64]	; (1e034 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1dff2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1dff6:	3001      	adds	r0, #1
   1dff8:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1dffc:	42ae      	cmp	r6, r5
   1dffe:	d800      	bhi.n	1e002 <z_sys_init_run_level+0x16>
		}
	}
}
   1e000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1e002:	e9d5 3400 	ldrd	r3, r4, [r5]
   1e006:	4620      	mov	r0, r4
   1e008:	4798      	blx	r3
   1e00a:	b170      	cbz	r0, 1e02a <z_sys_init_run_level+0x3e>
   1e00c:	b16c      	cbz	r4, 1e02a <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   1e00e:	1be4      	subs	r4, r4, r7
   1e010:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1e012:	0961      	lsrs	r1, r4, #5
   1e014:	4a08      	ldr	r2, [pc, #32]	; (1e038 <z_sys_init_run_level+0x4c>)
   1e016:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1e01a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1e01e:	2301      	movs	r3, #1
   1e020:	fa03 f404 	lsl.w	r4, r3, r4
   1e024:	4304      	orrs	r4, r0
   1e026:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1e02a:	3508      	adds	r5, #8
   1e02c:	e7e6      	b.n	1dffc <z_sys_init_run_level+0x10>
   1e02e:	bf00      	nop
   1e030:	000269c0 	.word	0x000269c0
   1e034:	20000664 	.word	0x20000664
   1e038:	200006d4 	.word	0x200006d4

0001e03c <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1e03c:	4b08      	ldr	r3, [pc, #32]	; (1e060 <z_device_ready+0x24>)
   1e03e:	1ac0      	subs	r0, r0, r3
   1e040:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1e042:	4b08      	ldr	r3, [pc, #32]	; (1e064 <z_device_ready+0x28>)
   1e044:	0942      	lsrs	r2, r0, #5
   1e046:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1e04a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1e04e:	2301      	movs	r3, #1
   1e050:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1e054:	4210      	tst	r0, r2
}
   1e056:	bf0c      	ite	eq
   1e058:	4618      	moveq	r0, r3
   1e05a:	2000      	movne	r0, #0
   1e05c:	4770      	bx	lr
   1e05e:	bf00      	nop
   1e060:	20000664 	.word	0x20000664
   1e064:	200006d4 	.word	0x200006d4

0001e068 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   1e068:	4911      	ldr	r1, [pc, #68]	; (1e0b0 <z_impl_device_get_binding+0x48>)
{
   1e06a:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1e06c:	4c11      	ldr	r4, [pc, #68]	; (1e0b4 <z_impl_device_get_binding+0x4c>)
{
   1e06e:	4605      	mov	r5, r0
   1e070:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   1e072:	428c      	cmp	r4, r1
   1e074:	d104      	bne.n	1e080 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   1e076:	4c0f      	ldr	r4, [pc, #60]	; (1e0b4 <z_impl_device_get_binding+0x4c>)
   1e078:	42b4      	cmp	r4, r6
   1e07a:	d10a      	bne.n	1e092 <z_impl_device_get_binding+0x2a>
	return NULL;
   1e07c:	2400      	movs	r4, #0
   1e07e:	e014      	b.n	1e0aa <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   1e080:	4620      	mov	r0, r4
   1e082:	f7ff ffdb 	bl	1e03c <z_device_ready>
   1e086:	b110      	cbz	r0, 1e08e <z_impl_device_get_binding+0x26>
   1e088:	6823      	ldr	r3, [r4, #0]
   1e08a:	42ab      	cmp	r3, r5
   1e08c:	d00d      	beq.n	1e0aa <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   1e08e:	3410      	adds	r4, #16
   1e090:	e7ef      	b.n	1e072 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1e092:	4620      	mov	r0, r4
   1e094:	f7ff ffd2 	bl	1e03c <z_device_ready>
   1e098:	b908      	cbnz	r0, 1e09e <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   1e09a:	3410      	adds	r4, #16
   1e09c:	e7ec      	b.n	1e078 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1e09e:	6821      	ldr	r1, [r4, #0]
   1e0a0:	4628      	mov	r0, r5
   1e0a2:	f003 fb84 	bl	217ae <strcmp>
   1e0a6:	2800      	cmp	r0, #0
   1e0a8:	d1f7      	bne.n	1e09a <z_impl_device_get_binding+0x32>
}
   1e0aa:	4620      	mov	r0, r4
   1e0ac:	bd70      	pop	{r4, r5, r6, pc}
   1e0ae:	bf00      	nop
   1e0b0:	200006d4 	.word	0x200006d4
   1e0b4:	20000664 	.word	0x20000664

0001e0b8 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1e0b8:	b510      	push	{r4, lr}
   1e0ba:	4604      	mov	r4, r0
	z_impl_log_panic();
   1e0bc:	f7e7 fa76 	bl	55ac <z_impl_log_panic>
   1e0c0:	4b06      	ldr	r3, [pc, #24]	; (1e0dc <k_sys_fatal_error_handler+0x24>)
   1e0c2:	4907      	ldr	r1, [pc, #28]	; (1e0e0 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1e0c4:	4807      	ldr	r0, [pc, #28]	; (1e0e4 <k_sys_fatal_error_handler+0x2c>)
   1e0c6:	1ac9      	subs	r1, r1, r3
   1e0c8:	08c9      	lsrs	r1, r1, #3
   1e0ca:	0189      	lsls	r1, r1, #6
   1e0cc:	f041 0101 	orr.w	r1, r1, #1
   1e0d0:	f001 fed5 	bl	1fe7e <log_0>
	arch_system_halt(reason);
   1e0d4:	4620      	mov	r0, r4
   1e0d6:	f006 f945 	bl	24364 <arch_system_halt>
   1e0da:	bf00      	nop
   1e0dc:	00024fd8 	.word	0x00024fd8
   1e0e0:	00025110 	.word	0x00025110
   1e0e4:	0002899c 	.word	0x0002899c

0001e0e8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1e0e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e0ec:	4606      	mov	r6, r0
   1e0ee:	460f      	mov	r7, r1
	__asm__ volatile(
   1e0f0:	f04f 0320 	mov.w	r3, #32
   1e0f4:	f3ef 8811 	mrs	r8, BASEPRI
   1e0f8:	f383 8811 	msr	BASEPRI, r3
   1e0fc:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1e100:	f000 fe3e 	bl	1ed80 <z_impl_k_current_get>
   1e104:	4c1f      	ldr	r4, [pc, #124]	; (1e184 <z_fatal_error+0x9c>)
   1e106:	4b20      	ldr	r3, [pc, #128]	; (1e188 <z_fatal_error+0xa0>)
   1e108:	1ae4      	subs	r4, r4, r3
   1e10a:	2e04      	cmp	r6, #4
   1e10c:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1e110:	bf96      	itet	ls
   1e112:	4a1e      	ldrls	r2, [pc, #120]	; (1e18c <z_fatal_error+0xa4>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1e114:	4a1e      	ldrhi	r2, [pc, #120]	; (1e190 <z_fatal_error+0xa8>)
   1e116:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1e11a:	01a4      	lsls	r4, r4, #6
   1e11c:	f044 0301 	orr.w	r3, r4, #1
   1e120:	4605      	mov	r5, r0
   1e122:	f8ad 3000 	strh.w	r3, [sp]
   1e126:	481b      	ldr	r0, [pc, #108]	; (1e194 <z_fatal_error+0xac>)
   1e128:	2300      	movs	r3, #0
   1e12a:	4631      	mov	r1, r6
   1e12c:	f001 fee1 	bl	1fef2 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1e130:	b147      	cbz	r7, 1e144 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1e132:	69fb      	ldr	r3, [r7, #28]
   1e134:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1e138:	b123      	cbz	r3, 1e144 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1e13a:	4817      	ldr	r0, [pc, #92]	; (1e198 <z_fatal_error+0xb0>)
   1e13c:	f044 0101 	orr.w	r1, r4, #1
   1e140:	f001 fe9d 	bl	1fe7e <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1e144:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   1e148:	b12d      	cbz	r5, 1e156 <z_fatal_error+0x6e>
   1e14a:	4628      	mov	r0, r5
   1e14c:	f006 fb9b 	bl	24886 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1e150:	b108      	cbz	r0, 1e156 <z_fatal_error+0x6e>
   1e152:	7803      	ldrb	r3, [r0, #0]
   1e154:	b903      	cbnz	r3, 1e158 <z_fatal_error+0x70>
		thread_name = "unknown";
   1e156:	4811      	ldr	r0, [pc, #68]	; (1e19c <z_fatal_error+0xb4>)
	LOG_ERR("Current thread: %p (%s)", thread,
   1e158:	f7e7 f8a6 	bl	52a8 <log_strdup>
   1e15c:	4623      	mov	r3, r4
   1e15e:	4602      	mov	r2, r0
   1e160:	4629      	mov	r1, r5
   1e162:	480f      	ldr	r0, [pc, #60]	; (1e1a0 <z_fatal_error+0xb8>)
   1e164:	f001 feac 	bl	1fec0 <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1e168:	4639      	mov	r1, r7
   1e16a:	4630      	mov	r0, r6
   1e16c:	f7ff ffa4 	bl	1e0b8 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1e170:	f388 8811 	msr	BASEPRI, r8
   1e174:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1e178:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1e17a:	b002      	add	sp, #8
   1e17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e180:	f7e8 be86 	b.w	6e90 <z_impl_k_thread_abort>
   1e184:	00025110 	.word	0x00025110
   1e188:	00024fd8 	.word	0x00024fd8
   1e18c:	000269d8 	.word	0x000269d8
   1e190:	000289ab 	.word	0x000289ab
   1e194:	000289b9 	.word	0x000289b9
   1e198:	000289e1 	.word	0x000289e1
   1e19c:	00027599 	.word	0x00027599
   1e1a0:	00028a02 	.word	0x00028a02

0001e1a4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1e1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_kernel.idle = ticks;
   1e1a6:	4e1c      	ldr	r6, [pc, #112]	; (1e218 <idle+0x74>)
{
   1e1a8:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   1e1aa:	2700      	movs	r7, #0
	__asm__ volatile(
   1e1ac:	f04f 0220 	mov.w	r2, #32
   1e1b0:	f3ef 8311 	mrs	r3, BASEPRI
   1e1b4:	f382 8811 	msr	BASEPRI, r2
   1e1b8:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   1e1bc:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   1e1be:	b188      	cbz	r0, 1e1e4 <idle+0x40>
			cpu->pending_abort = NULL;
   1e1c0:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   1e1c2:	f383 8811 	msr	BASEPRI, r3
   1e1c6:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
   1e1ca:	f000 fc0f 	bl	1e9ec <z_thread_single_abort>
	__asm__ volatile(
   1e1ce:	f04f 0320 	mov.w	r3, #32
   1e1d2:	f3ef 8011 	mrs	r0, BASEPRI
   1e1d6:	f383 8811 	msr	BASEPRI, r3
   1e1da:	f3bf 8f6f 	isb	sy
   1e1de:	f006 fa63 	bl	246a8 <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
   1e1e2:	e7e3      	b.n	1e1ac <idle+0x8>
	__asm__ volatile(
   1e1e4:	f383 8811 	msr	BASEPRI, r3
   1e1e8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1e1ec:	f04f 0220 	mov.w	r2, #32
   1e1f0:	f3ef 8311 	mrs	r3, BASEPRI
   1e1f4:	f382 8811 	msr	BASEPRI, r2
   1e1f8:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1e1fc:	f006 fbd3 	bl	249a6 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1e200:	2101      	movs	r1, #1
   1e202:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
   1e204:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1e206:	bfd8      	it	le
   1e208:	4608      	movle	r0, r1
   1e20a:	f006 fbdc 	bl	249c6 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1e20e:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   1e210:	f7e8 fb4e 	bl	68b0 <arch_cpu_idle>
}
   1e214:	e7ca      	b.n	1e1ac <idle+0x8>
   1e216:	bf00      	nop
   1e218:	20002950 	.word	0x20002950

0001e21c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1e21c:	4802      	ldr	r0, [pc, #8]	; (1e228 <z_bss_zero+0xc>)
   1e21e:	4a03      	ldr	r2, [pc, #12]	; (1e22c <z_bss_zero+0x10>)
   1e220:	2100      	movs	r1, #0
   1e222:	1a12      	subs	r2, r2, r0
   1e224:	f003 bb0a 	b.w	2183c <memset>
   1e228:	200008d8 	.word	0x200008d8
   1e22c:	200030a0 	.word	0x200030a0

0001e230 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1e230:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   1e232:	4b0a      	ldr	r3, [pc, #40]	; (1e25c <bg_thread_main+0x2c>)
   1e234:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1e236:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1e238:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1e23a:	f7ff fed7 	bl	1dfec <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1e23e:	f000 ff2d 	bl	1f09c <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1e242:	2003      	movs	r0, #3
   1e244:	f7ff fed2 	bl	1dfec <z_sys_init_run_level>

	z_init_static_threads();
   1e248:	f000 fe66 	bl	1ef18 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1e24c:	f7e6 f9c8 	bl	45e0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1e250:	4a03      	ldr	r2, [pc, #12]	; (1e260 <bg_thread_main+0x30>)
   1e252:	7b13      	ldrb	r3, [r2, #12]
   1e254:	f023 0301 	bic.w	r3, r3, #1
   1e258:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1e25a:	bd08      	pop	{r3, pc}
   1e25c:	2000309d 	.word	0x2000309d
   1e260:	20001058 	.word	0x20001058

0001e264 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1e264:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1e268:	b0a9      	sub	sp, #164	; 0xa4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1e26a:	f7e6 ff75 	bl	5158 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1e26e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1e364 <z_cstart+0x100>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1e272:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1e276:	4d33      	ldr	r5, [pc, #204]	; (1e344 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
   1e278:	4e33      	ldr	r6, [pc, #204]	; (1e348 <z_cstart+0xe4>)
   1e27a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e27c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1e368 <z_cstart+0x104>
	z_setup_new_thread(thread, stack,
   1e280:	4f32      	ldr	r7, [pc, #200]	; (1e34c <z_cstart+0xe8>)
   1e282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e286:	2400      	movs	r4, #0
   1e288:	616b      	str	r3, [r5, #20]
   1e28a:	23e0      	movs	r3, #224	; 0xe0
   1e28c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1e290:	77ec      	strb	r4, [r5, #31]
   1e292:	762c      	strb	r4, [r5, #24]
   1e294:	766c      	strb	r4, [r5, #25]
   1e296:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1e298:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1e29a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1e29e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1e2a0:	f7e8 fdd4 	bl	6e4c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1e2a4:	f7e8 fafe 	bl	68a4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1e2a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e2ac:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1e2ae:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1e2b0:	4d27      	ldr	r5, [pc, #156]	; (1e350 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1e2b2:	f240 1301 	movw	r3, #257	; 0x101
   1e2b6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1e2ba:	ab06      	add	r3, sp, #24
   1e2bc:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1e2be:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1e2c0:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   1e2c4:	f7ff fe92 	bl	1dfec <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1e2c8:	2001      	movs	r0, #1
   1e2ca:	f7ff fe8f 	bl	1dfec <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e2ce:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1e2d2:	f000 fcdf 	bl	1ec94 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e2d6:	4b1f      	ldr	r3, [pc, #124]	; (1e354 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   1e2d8:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1e2da:	491f      	ldr	r1, [pc, #124]	; (1e358 <z_cstart+0xf4>)
   1e2dc:	9305      	str	r3, [sp, #20]
   1e2de:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e2e2:	4653      	mov	r3, sl
   1e2e4:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1e2e8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1e2ec:	9400      	str	r4, [sp, #0]
   1e2ee:	4630      	mov	r0, r6
   1e2f0:	f000 fdb4 	bl	1ee5c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1e2f4:	7b73      	ldrb	r3, [r6, #13]
   1e2f6:	4680      	mov	r8, r0
   1e2f8:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1e2fc:	4630      	mov	r0, r6
   1e2fe:	7373      	strb	r3, [r6, #13]
   1e300:	f006 fa14 	bl	2472c <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1e304:	230f      	movs	r3, #15
   1e306:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1e30a:	4914      	ldr	r1, [pc, #80]	; (1e35c <z_cstart+0xf8>)
   1e30c:	4b14      	ldr	r3, [pc, #80]	; (1e360 <z_cstart+0xfc>)
   1e30e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1e312:	e9cd b404 	strd	fp, r4, [sp, #16]
   1e316:	e9cd 5400 	strd	r5, r4, [sp]
   1e31a:	4638      	mov	r0, r7
   1e31c:	f000 fd9e 	bl	1ee5c <z_setup_new_thread>
   1e320:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1e322:	60ef      	str	r7, [r5, #12]
   1e324:	f023 0304 	bic.w	r3, r3, #4
   1e328:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1e32a:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
   1e32e:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
   1e332:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   1e334:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1e338:	4652      	mov	r2, sl
   1e33a:	4641      	mov	r1, r8
   1e33c:	4630      	mov	r0, r6
   1e33e:	f7e8 fa97 	bl	6870 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1e342:	bf00      	nop
   1e344:	e000ed00 	.word	0xe000ed00
   1e348:	20001058 	.word	0x20001058
   1e34c:	20000fd0 	.word	0x20000fd0
   1e350:	20002950 	.word	0x20002950
   1e354:	00028a64 	.word	0x00028a64
   1e358:	20004260 	.word	0x20004260
   1e35c:	20004680 	.word	0x20004680
   1e360:	0001e1a5 	.word	0x0001e1a5
   1e364:	20005000 	.word	0x20005000
   1e368:	0001e231 	.word	0x0001e231

0001e36c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1e36c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1e36e:	4c06      	ldr	r4, [pc, #24]	; (1e388 <statics_init+0x1c>)
   1e370:	4d06      	ldr	r5, [pc, #24]	; (1e38c <statics_init+0x20>)
   1e372:	42ac      	cmp	r4, r5
   1e374:	d301      	bcc.n	1e37a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1e376:	2000      	movs	r0, #0
   1e378:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1e37a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1e37e:	4620      	mov	r0, r4
   1e380:	f005 fffb 	bl	2437a <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1e384:	3414      	adds	r4, #20
   1e386:	e7f4      	b.n	1e372 <statics_init+0x6>
   1e388:	2000072c 	.word	0x2000072c
   1e38c:	20000740 	.word	0x20000740

0001e390 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1e390:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1e392:	4b0e      	ldr	r3, [pc, #56]	; (1e3cc <init_mem_slab_module+0x3c>)
   1e394:	4c0e      	ldr	r4, [pc, #56]	; (1e3d0 <init_mem_slab_module+0x40>)
   1e396:	42a3      	cmp	r3, r4
   1e398:	d301      	bcc.n	1e39e <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1e39a:	2000      	movs	r0, #0
	return rc;
}
   1e39c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1e39e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1e3a2:	ea41 0200 	orr.w	r2, r1, r0
   1e3a6:	f012 0203 	ands.w	r2, r2, #3
   1e3aa:	d10b      	bne.n	1e3c4 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1e3ac:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1e3ae:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e3b0:	42aa      	cmp	r2, r5
   1e3b2:	d101      	bne.n	1e3b8 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1e3b4:	331c      	adds	r3, #28
   1e3b6:	e7ee      	b.n	1e396 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1e3b8:	695e      	ldr	r6, [r3, #20]
   1e3ba:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1e3bc:	3201      	adds	r2, #1
		slab->free_list = p;
   1e3be:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1e3c0:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1e3c2:	e7f5      	b.n	1e3b0 <init_mem_slab_module+0x20>
		return -EINVAL;
   1e3c4:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1e3c8:	e7e8      	b.n	1e39c <init_mem_slab_module+0xc>
   1e3ca:	bf00      	nop
   1e3cc:	200006d8 	.word	0x200006d8
   1e3d0:	2000072c 	.word	0x2000072c

0001e3d4 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1e3d4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1e3d6:	460c      	mov	r4, r1
   1e3d8:	4616      	mov	r6, r2
   1e3da:	461f      	mov	r7, r3
   1e3dc:	f04f 0320 	mov.w	r3, #32
   1e3e0:	f3ef 8111 	mrs	r1, BASEPRI
   1e3e4:	f383 8811 	msr	BASEPRI, r3
   1e3e8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1e3ec:	6943      	ldr	r3, [r0, #20]
   1e3ee:	b15b      	cbz	r3, 1e408 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1e3f0:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1e3f2:	681b      	ldr	r3, [r3, #0]
   1e3f4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1e3f6:	6983      	ldr	r3, [r0, #24]
   1e3f8:	3301      	adds	r3, #1
   1e3fa:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1e3fc:	2000      	movs	r0, #0
	__asm__ volatile(
   1e3fe:	f381 8811 	msr	BASEPRI, r1
   1e402:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1e406:	e011      	b.n	1e42c <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e408:	ea56 0207 	orrs.w	r2, r6, r7
   1e40c:	d103      	bne.n	1e416 <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1e40e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1e410:	f06f 000b 	mvn.w	r0, #11
   1e414:	e7f3      	b.n	1e3fe <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1e416:	4602      	mov	r2, r0
   1e418:	e9cd 6700 	strd	r6, r7, [sp]
   1e41c:	4804      	ldr	r0, [pc, #16]	; (1e430 <k_mem_slab_alloc+0x5c>)
   1e41e:	f000 fba7 	bl	1eb70 <z_pend_curr>
		if (result == 0) {
   1e422:	b918      	cbnz	r0, 1e42c <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1e424:	4b03      	ldr	r3, [pc, #12]	; (1e434 <k_mem_slab_alloc+0x60>)
   1e426:	689b      	ldr	r3, [r3, #8]
   1e428:	695b      	ldr	r3, [r3, #20]
   1e42a:	6023      	str	r3, [r4, #0]
}
   1e42c:	b002      	add	sp, #8
   1e42e:	bdd0      	pop	{r4, r6, r7, pc}
   1e430:	2000309e 	.word	0x2000309e
   1e434:	20002950 	.word	0x20002950

0001e438 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1e438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e43a:	4604      	mov	r4, r0
   1e43c:	460d      	mov	r5, r1
	__asm__ volatile(
   1e43e:	f04f 0320 	mov.w	r3, #32
   1e442:	f3ef 8611 	mrs	r6, BASEPRI
   1e446:	f383 8811 	msr	BASEPRI, r3
   1e44a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   1e44e:	6947      	ldr	r7, [r0, #20]
   1e450:	b977      	cbnz	r7, 1e470 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1e452:	f006 f9c6 	bl	247e2 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1e456:	b158      	cbz	r0, 1e470 <k_mem_slab_free+0x38>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1e458:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1e45a:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1e45c:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
			z_ready_thread(pending_thread);
   1e460:	f006 f964 	bl	2472c <z_ready_thread>
			z_reschedule(&lock, key);
   1e464:	4631      	mov	r1, r6
   1e466:	4809      	ldr	r0, [pc, #36]	; (1e48c <k_mem_slab_free+0x54>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   1e468:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   1e46c:	f000 b938 	b.w	1e6e0 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1e470:	682b      	ldr	r3, [r5, #0]
   1e472:	6962      	ldr	r2, [r4, #20]
   1e474:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1e476:	682b      	ldr	r3, [r5, #0]
   1e478:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1e47a:	69a3      	ldr	r3, [r4, #24]
   1e47c:	3b01      	subs	r3, #1
   1e47e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1e480:	f386 8811 	msr	BASEPRI, r6
   1e484:	f3bf 8f6f 	isb	sy
}
   1e488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e48a:	bf00      	nop
   1e48c:	2000309e 	.word	0x2000309e

0001e490 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1e490:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e494:	4604      	mov	r4, r0
   1e496:	4616      	mov	r6, r2
   1e498:	461f      	mov	r7, r3
	__asm__ volatile(
   1e49a:	f04f 0320 	mov.w	r3, #32
   1e49e:	f3ef 8811 	mrs	r8, BASEPRI
   1e4a2:	f383 8811 	msr	BASEPRI, r3
   1e4a6:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1e4aa:	68c3      	ldr	r3, [r0, #12]
   1e4ac:	4a32      	ldr	r2, [pc, #200]	; (1e578 <z_impl_k_mutex_lock+0xe8>)
   1e4ae:	b16b      	cbz	r3, 1e4cc <z_impl_k_mutex_lock+0x3c>
   1e4b0:	6880      	ldr	r0, [r0, #8]
   1e4b2:	6891      	ldr	r1, [r2, #8]
   1e4b4:	4288      	cmp	r0, r1
   1e4b6:	d019      	beq.n	1e4ec <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1e4b8:	ea56 0307 	orrs.w	r3, r6, r7
   1e4bc:	d118      	bne.n	1e4f0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1e4be:	f388 8811 	msr	BASEPRI, r8
   1e4c2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1e4c6:	f06f 000f 	mvn.w	r0, #15
   1e4ca:	e00c      	b.n	1e4e6 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1e4cc:	6891      	ldr	r1, [r2, #8]
   1e4ce:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1e4d2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1e4d4:	3301      	adds	r3, #1
   1e4d6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1e4d8:	6893      	ldr	r3, [r2, #8]
   1e4da:	60a3      	str	r3, [r4, #8]
   1e4dc:	f388 8811 	msr	BASEPRI, r8
   1e4e0:	f3bf 8f6f 	isb	sy
		return 0;
   1e4e4:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1e4e6:	b002      	add	sp, #8
   1e4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1e4ec:	6921      	ldr	r1, [r4, #16]
   1e4ee:	e7f0      	b.n	1e4d2 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1e4f0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1e4f4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1e4f8:	4299      	cmp	r1, r3
   1e4fa:	bfa8      	it	ge
   1e4fc:	4619      	movge	r1, r3
   1e4fe:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1e502:	428b      	cmp	r3, r1
   1e504:	dd2c      	ble.n	1e560 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1e506:	f000 fb81 	bl	1ec0c <z_set_prio>
   1e50a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1e50c:	e9cd 6700 	strd	r6, r7, [sp]
   1e510:	481a      	ldr	r0, [pc, #104]	; (1e57c <z_impl_k_mutex_lock+0xec>)
   1e512:	4622      	mov	r2, r4
   1e514:	4641      	mov	r1, r8
   1e516:	f000 fb2b 	bl	1eb70 <z_pend_curr>
	if (got_mutex == 0) {
   1e51a:	2800      	cmp	r0, #0
   1e51c:	d0e3      	beq.n	1e4e6 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1e51e:	f04f 0320 	mov.w	r3, #32
   1e522:	f3ef 8611 	mrs	r6, BASEPRI
   1e526:	f383 8811 	msr	BASEPRI, r3
   1e52a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1e52e:	6823      	ldr	r3, [r4, #0]
   1e530:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e532:	42a3      	cmp	r3, r4
   1e534:	d007      	beq.n	1e546 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1e536:	b133      	cbz	r3, 1e546 <z_impl_k_mutex_lock+0xb6>
   1e538:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1e53c:	4299      	cmp	r1, r3
   1e53e:	bfa8      	it	ge
   1e540:	4619      	movge	r1, r3
   1e542:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1e546:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1e548:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1e54c:	4299      	cmp	r1, r3
   1e54e:	d109      	bne.n	1e564 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1e550:	b16d      	cbz	r5, 1e56e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1e552:	480a      	ldr	r0, [pc, #40]	; (1e57c <z_impl_k_mutex_lock+0xec>)
   1e554:	4631      	mov	r1, r6
   1e556:	f000 f8c3 	bl	1e6e0 <z_reschedule>
	return -EAGAIN;
   1e55a:	f06f 000a 	mvn.w	r0, #10
   1e55e:	e7c2      	b.n	1e4e6 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1e560:	2500      	movs	r5, #0
   1e562:	e7d3      	b.n	1e50c <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1e564:	f000 fb52 	bl	1ec0c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1e568:	2800      	cmp	r0, #0
   1e56a:	d1f2      	bne.n	1e552 <z_impl_k_mutex_lock+0xc2>
   1e56c:	e7f0      	b.n	1e550 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1e56e:	f386 8811 	msr	BASEPRI, r6
   1e572:	f3bf 8f6f 	isb	sy
   1e576:	e7f0      	b.n	1e55a <z_impl_k_mutex_lock+0xca>
   1e578:	20002950 	.word	0x20002950
   1e57c:	2000309e 	.word	0x2000309e

0001e580 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1e580:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1e582:	6883      	ldr	r3, [r0, #8]
{
   1e584:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1e586:	2b00      	cmp	r3, #0
   1e588:	d037      	beq.n	1e5fa <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1e58a:	4a1f      	ldr	r2, [pc, #124]	; (1e608 <z_impl_k_mutex_unlock+0x88>)
   1e58c:	6892      	ldr	r2, [r2, #8]
   1e58e:	4293      	cmp	r3, r2
   1e590:	d136      	bne.n	1e600 <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1e592:	7bda      	ldrb	r2, [r3, #15]
   1e594:	3a01      	subs	r2, #1
   1e596:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1e598:	68c3      	ldr	r3, [r0, #12]
   1e59a:	2b01      	cmp	r3, #1
   1e59c:	d005      	beq.n	1e5aa <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1e59e:	3b01      	subs	r3, #1
   1e5a0:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1e5a2:	f000 f901 	bl	1e7a8 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1e5a6:	2000      	movs	r0, #0
}
   1e5a8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1e5aa:	f04f 0320 	mov.w	r3, #32
   1e5ae:	f3ef 8511 	mrs	r5, BASEPRI
   1e5b2:	f383 8811 	msr	BASEPRI, r3
   1e5b6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1e5ba:	6901      	ldr	r1, [r0, #16]
   1e5bc:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1e5be:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1e5c2:	4299      	cmp	r1, r3
   1e5c4:	d001      	beq.n	1e5ca <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1e5c6:	f000 fb21 	bl	1ec0c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1e5ca:	4620      	mov	r0, r4
   1e5cc:	f006 f909 	bl	247e2 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1e5d0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1e5d2:	b160      	cbz	r0, 1e5ee <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   1e5d4:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1e5d8:	6122      	str	r2, [r4, #16]
   1e5da:	2200      	movs	r2, #0
   1e5dc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
   1e5e0:	f006 f8a4 	bl	2472c <z_ready_thread>
		z_reschedule(&lock, key);
   1e5e4:	4809      	ldr	r0, [pc, #36]	; (1e60c <z_impl_k_mutex_unlock+0x8c>)
   1e5e6:	4629      	mov	r1, r5
   1e5e8:	f000 f87a 	bl	1e6e0 <z_reschedule>
   1e5ec:	e7d9      	b.n	1e5a2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1e5ee:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1e5f0:	f385 8811 	msr	BASEPRI, r5
   1e5f4:	f3bf 8f6f 	isb	sy
   1e5f8:	e7d3      	b.n	1e5a2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1e5fa:	f06f 0015 	mvn.w	r0, #21
   1e5fe:	e7d3      	b.n	1e5a8 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1e600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e604:	e7d0      	b.n	1e5a8 <z_impl_k_mutex_unlock+0x28>
   1e606:	bf00      	nop
   1e608:	20002950 	.word	0x20002950
   1e60c:	2000309e 	.word	0x2000309e

0001e610 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1e610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e612:	4616      	mov	r6, r2
   1e614:	461f      	mov	r7, r3
	__asm__ volatile(
   1e616:	f04f 0320 	mov.w	r3, #32
   1e61a:	f3ef 8511 	mrs	r5, BASEPRI
   1e61e:	f383 8811 	msr	BASEPRI, r3
   1e622:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1e626:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1e628:	b19c      	cbz	r4, 1e652 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e62a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e62c:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e62e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1e632:	4294      	cmp	r4, r2
	list->head = node;
   1e634:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1e636:	bf08      	it	eq
   1e638:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1e63a:	2101      	movs	r1, #1
   1e63c:	4620      	mov	r0, r4
   1e63e:	f005 ffa1 	bl	24584 <z_queue_node_peek>
   1e642:	4604      	mov	r4, r0
	__asm__ volatile(
   1e644:	f385 8811 	msr	BASEPRI, r5
   1e648:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1e64c:	4620      	mov	r0, r4
   1e64e:	b003      	add	sp, #12
   1e650:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e652:	ea56 0307 	orrs.w	r3, r6, r7
   1e656:	d0f5      	beq.n	1e644 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1e658:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1e65c:	e9cd 6700 	strd	r6, r7, [sp]
   1e660:	4629      	mov	r1, r5
   1e662:	4610      	mov	r0, r2
   1e664:	f000 fa84 	bl	1eb70 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1e668:	2800      	cmp	r0, #0
   1e66a:	d1ef      	bne.n	1e64c <z_impl_k_queue_get+0x3c>
   1e66c:	4b01      	ldr	r3, [pc, #4]	; (1e674 <z_impl_k_queue_get+0x64>)
   1e66e:	689b      	ldr	r3, [r3, #8]
   1e670:	695c      	ldr	r4, [r3, #20]
   1e672:	e7eb      	b.n	1e64c <z_impl_k_queue_get+0x3c>
   1e674:	20002950 	.word	0x20002950

0001e678 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1e678:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1e67a:	4c08      	ldr	r4, [pc, #32]	; (1e69c <z_reset_time_slice+0x24>)
   1e67c:	6823      	ldr	r3, [r4, #0]
   1e67e:	b15b      	cbz	r3, 1e698 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1e680:	f7e7 fdc6 	bl	6210 <z_clock_elapsed>
   1e684:	4603      	mov	r3, r0
   1e686:	6820      	ldr	r0, [r4, #0]
   1e688:	4a05      	ldr	r2, [pc, #20]	; (1e6a0 <z_reset_time_slice+0x28>)
   1e68a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1e68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1e690:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1e692:	2100      	movs	r1, #0
   1e694:	f006 b997 	b.w	249c6 <z_set_timeout_expiry>
}
   1e698:	bd10      	pop	{r4, pc}
   1e69a:	bf00      	nop
   1e69c:	2000298c 	.word	0x2000298c
   1e6a0:	20002950 	.word	0x20002950

0001e6a4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1e6a4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e6a6:	f04f 0320 	mov.w	r3, #32
   1e6aa:	f3ef 8411 	mrs	r4, BASEPRI
   1e6ae:	f383 8811 	msr	BASEPRI, r3
   1e6b2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1e6b6:	4b07      	ldr	r3, [pc, #28]	; (1e6d4 <k_sched_time_slice_set+0x30>)
   1e6b8:	2200      	movs	r2, #0
   1e6ba:	615a      	str	r2, [r3, #20]
		slice_time = k_ms_to_ticks_ceil32(slice);
   1e6bc:	4b06      	ldr	r3, [pc, #24]	; (1e6d8 <k_sched_time_slice_set+0x34>)
   1e6be:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1e6c0:	4b06      	ldr	r3, [pc, #24]	; (1e6dc <k_sched_time_slice_set+0x38>)
   1e6c2:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
   1e6c4:	f7ff ffd8 	bl	1e678 <z_reset_time_slice>
	__asm__ volatile(
   1e6c8:	f384 8811 	msr	BASEPRI, r4
   1e6cc:	f3bf 8f6f 	isb	sy
	}
}
   1e6d0:	bd10      	pop	{r4, pc}
   1e6d2:	bf00      	nop
   1e6d4:	20002950 	.word	0x20002950
   1e6d8:	2000298c 	.word	0x2000298c
   1e6dc:	20002988 	.word	0x20002988

0001e6e0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e6e0:	b949      	cbnz	r1, 1e6f6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e6e2:	f3ef 8005 	mrs	r0, IPSR
   1e6e6:	b930      	cbnz	r0, 1e6f6 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   1e6e8:	4b05      	ldr	r3, [pc, #20]	; (1e700 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1e6ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1e6ec:	689b      	ldr	r3, [r3, #8]
   1e6ee:	429a      	cmp	r2, r3
   1e6f0:	d001      	beq.n	1e6f6 <z_reschedule+0x16>
	ret = arch_swap(key);
   1e6f2:	f7e7 bfd9 	b.w	66a8 <arch_swap>
   1e6f6:	f381 8811 	msr	BASEPRI, r1
   1e6fa:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1e6fe:	4770      	bx	lr
   1e700:	20002950 	.word	0x20002950

0001e704 <k_sched_lock>:
	__asm__ volatile(
   1e704:	f04f 0320 	mov.w	r3, #32
   1e708:	f3ef 8111 	mrs	r1, BASEPRI
   1e70c:	f383 8811 	msr	BASEPRI, r3
   1e710:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1e714:	4b04      	ldr	r3, [pc, #16]	; (1e728 <k_sched_lock+0x24>)
   1e716:	689a      	ldr	r2, [r3, #8]
   1e718:	7bd3      	ldrb	r3, [r2, #15]
   1e71a:	3b01      	subs	r3, #1
   1e71c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1e71e:	f381 8811 	msr	BASEPRI, r1
   1e722:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1e726:	4770      	bx	lr
   1e728:	20002950 	.word	0x20002950

0001e72c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1e72c:	4b09      	ldr	r3, [pc, #36]	; (1e754 <z_priq_dumb_remove+0x28>)
   1e72e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1e732:	4282      	cmp	r2, r0
   1e734:	d105      	bne.n	1e742 <z_priq_dumb_remove+0x16>
   1e736:	689b      	ldr	r3, [r3, #8]
   1e738:	428b      	cmp	r3, r1
   1e73a:	d102      	bne.n	1e742 <z_priq_dumb_remove+0x16>
   1e73c:	7b4b      	ldrb	r3, [r1, #13]
   1e73e:	06db      	lsls	r3, r3, #27
   1e740:	d106      	bne.n	1e750 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1e742:	e9d1 3200 	ldrd	r3, r2, [r1]
   1e746:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1e748:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e74a:	2300      	movs	r3, #0
	node->prev = NULL;
   1e74c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1e750:	4770      	bx	lr
   1e752:	bf00      	nop
   1e754:	20002950 	.word	0x20002950

0001e758 <update_cache>:
{
   1e758:	b538      	push	{r3, r4, r5, lr}
   1e75a:	4c12      	ldr	r4, [pc, #72]	; (1e7a4 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
   1e75c:	6923      	ldr	r3, [r4, #16]
   1e75e:	68a2      	ldr	r2, [r4, #8]
{
   1e760:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   1e762:	b10b      	cbz	r3, 1e768 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   1e764:	68e5      	ldr	r5, [r4, #12]
   1e766:	e00c      	b.n	1e782 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1e768:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1e76c:	f005 ffd4 	bl	24718 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1e770:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1e772:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1e774:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1e776:	bf44      	itt	mi
   1e778:	f043 0308 	orrmi.w	r3, r3, #8
   1e77c:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1e77e:	2d00      	cmp	r5, #0
   1e780:	d0f0      	beq.n	1e764 <update_cache+0xc>
	if (preempt_ok != 0) {
   1e782:	b949      	cbnz	r1, 1e798 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   1e784:	7b53      	ldrb	r3, [r2, #13]
   1e786:	06db      	lsls	r3, r3, #27
   1e788:	d106      	bne.n	1e798 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1e78a:	69ab      	ldr	r3, [r5, #24]
   1e78c:	b923      	cbnz	r3, 1e798 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   1e78e:	89d3      	ldrh	r3, [r2, #14]
   1e790:	2b7f      	cmp	r3, #127	; 0x7f
   1e792:	d901      	bls.n	1e798 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   1e794:	62a2      	str	r2, [r4, #40]	; 0x28
}
   1e796:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1e798:	4295      	cmp	r5, r2
   1e79a:	d001      	beq.n	1e7a0 <update_cache+0x48>
			z_reset_time_slice();
   1e79c:	f7ff ff6c 	bl	1e678 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1e7a0:	62a5      	str	r5, [r4, #40]	; 0x28
}
   1e7a2:	e7f8      	b.n	1e796 <update_cache+0x3e>
   1e7a4:	20002950 	.word	0x20002950

0001e7a8 <k_sched_unlock>:
{
   1e7a8:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e7aa:	f04f 0320 	mov.w	r3, #32
   1e7ae:	f3ef 8411 	mrs	r4, BASEPRI
   1e7b2:	f383 8811 	msr	BASEPRI, r3
   1e7b6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1e7ba:	4b08      	ldr	r3, [pc, #32]	; (1e7dc <k_sched_unlock+0x34>)
   1e7bc:	689a      	ldr	r2, [r3, #8]
   1e7be:	7bd3      	ldrb	r3, [r2, #15]
   1e7c0:	3301      	adds	r3, #1
   1e7c2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1e7c4:	2000      	movs	r0, #0
   1e7c6:	f7ff ffc7 	bl	1e758 <update_cache>
	__asm__ volatile(
   1e7ca:	f384 8811 	msr	BASEPRI, r4
   1e7ce:	f3bf 8f6f 	isb	sy
}
   1e7d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1e7d6:	f005 bf73 	b.w	246c0 <z_reschedule_unlocked>
   1e7da:	bf00      	nop
   1e7dc:	20002950 	.word	0x20002950

0001e7e0 <ready_thread>:
{
   1e7e0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1e7e2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1e7e6:	7b43      	ldrb	r3, [r0, #13]
   1e7e8:	2a00      	cmp	r2, #0
   1e7ea:	db2c      	blt.n	1e846 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1e7ec:	06db      	lsls	r3, r3, #27
   1e7ee:	d12a      	bne.n	1e846 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1e7f0:	6983      	ldr	r3, [r0, #24]
   1e7f2:	bb43      	cbnz	r3, 1e846 <ready_thread+0x66>
	return list->head == list;
   1e7f4:	4a15      	ldr	r2, [pc, #84]	; (1e84c <ready_thread+0x6c>)
   1e7f6:	4611      	mov	r1, r2
   1e7f8:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e7fc:	428c      	cmp	r4, r1
   1e7fe:	bf18      	it	ne
   1e800:	4623      	movne	r3, r4
   1e802:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e804:	6b14      	ldr	r4, [r2, #48]	; 0x30
   1e806:	bf38      	it	cc
   1e808:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e80a:	b1b3      	cbz	r3, 1e83a <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   1e80c:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1e810:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1e814:	42ae      	cmp	r6, r5
   1e816:	db03      	blt.n	1e820 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   1e818:	42a3      	cmp	r3, r4
   1e81a:	d00e      	beq.n	1e83a <ready_thread+0x5a>
   1e81c:	681b      	ldr	r3, [r3, #0]
   1e81e:	e7f4      	b.n	1e80a <ready_thread+0x2a>
	node->prev = successor->prev;
   1e820:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1e822:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1e826:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1e828:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1e82a:	7b43      	ldrb	r3, [r0, #13]
   1e82c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1e830:	7343      	strb	r3, [r0, #13]
}
   1e832:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1e834:	2000      	movs	r0, #0
   1e836:	f7ff bf8f 	b.w	1e758 <update_cache>
	node->prev = list->tail;
   1e83a:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1e83e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1e840:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1e842:	6310      	str	r0, [r2, #48]	; 0x30
}
   1e844:	e7f1      	b.n	1e82a <ready_thread+0x4a>
}
   1e846:	bc70      	pop	{r4, r5, r6}
   1e848:	4770      	bx	lr
   1e84a:	bf00      	nop
   1e84c:	20002950 	.word	0x20002950

0001e850 <z_sched_start>:
{
   1e850:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e852:	f04f 0220 	mov.w	r2, #32
   1e856:	f3ef 8411 	mrs	r4, BASEPRI
   1e85a:	f382 8811 	msr	BASEPRI, r2
   1e85e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1e862:	7b42      	ldrb	r2, [r0, #13]
   1e864:	0751      	lsls	r1, r2, #29
   1e866:	d404      	bmi.n	1e872 <z_sched_start+0x22>
	__asm__ volatile(
   1e868:	f384 8811 	msr	BASEPRI, r4
   1e86c:	f3bf 8f6f 	isb	sy
}
   1e870:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1e872:	f022 0204 	bic.w	r2, r2, #4
   1e876:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1e878:	f7ff ffb2 	bl	1e7e0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1e87c:	4621      	mov	r1, r4
   1e87e:	4802      	ldr	r0, [pc, #8]	; (1e888 <z_sched_start+0x38>)
}
   1e880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1e884:	f7ff bf2c 	b.w	1e6e0 <z_reschedule>
   1e888:	2000309e 	.word	0x2000309e

0001e88c <move_thread_to_end_of_prio_q>:
{
   1e88c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1e88e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1e892:	2b00      	cmp	r3, #0
{
   1e894:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1e896:	da02      	bge.n	1e89e <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1e898:	4817      	ldr	r0, [pc, #92]	; (1e8f8 <move_thread_to_end_of_prio_q+0x6c>)
   1e89a:	f7ff ff47 	bl	1e72c <z_priq_dumb_remove>
	return list->head == list;
   1e89e:	4a17      	ldr	r2, [pc, #92]	; (1e8fc <move_thread_to_end_of_prio_q+0x70>)
   1e8a0:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e8a2:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return list->head == list;
   1e8a4:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e8a8:	4283      	cmp	r3, r0
   1e8aa:	bf08      	it	eq
   1e8ac:	2300      	moveq	r3, #0
   1e8ae:	2b00      	cmp	r3, #0
   1e8b0:	bf38      	it	cc
   1e8b2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e8b4:	b1d3      	cbz	r3, 1e8ec <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   1e8b6:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1e8ba:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1e8be:	42ae      	cmp	r6, r5
   1e8c0:	db03      	blt.n	1e8ca <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1e8c2:	42a3      	cmp	r3, r4
   1e8c4:	d012      	beq.n	1e8ec <move_thread_to_end_of_prio_q+0x60>
   1e8c6:	681b      	ldr	r3, [r3, #0]
   1e8c8:	e7f4      	b.n	1e8b4 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   1e8ca:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1e8cc:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1e8d0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1e8d2:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1e8d4:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   1e8d6:	6890      	ldr	r0, [r2, #8]
   1e8d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1e8dc:	734b      	strb	r3, [r1, #13]
   1e8de:	1a43      	subs	r3, r0, r1
   1e8e0:	4258      	negs	r0, r3
}
   1e8e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1e8e6:	4158      	adcs	r0, r3
   1e8e8:	f7ff bf36 	b.w	1e758 <update_cache>
	node->prev = list->tail;
   1e8ec:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   1e8f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1e8f2:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1e8f4:	6311      	str	r1, [r2, #48]	; 0x30
}
   1e8f6:	e7ed      	b.n	1e8d4 <move_thread_to_end_of_prio_q+0x48>
   1e8f8:	2000297c 	.word	0x2000297c
   1e8fc:	20002950 	.word	0x20002950

0001e900 <z_time_slice>:
{
   1e900:	b570      	push	{r4, r5, r6, lr}
   1e902:	4601      	mov	r1, r0
	__asm__ volatile(
   1e904:	f04f 0320 	mov.w	r3, #32
   1e908:	f3ef 8411 	mrs	r4, BASEPRI
   1e90c:	f383 8811 	msr	BASEPRI, r3
   1e910:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1e914:	4b16      	ldr	r3, [pc, #88]	; (1e970 <z_time_slice+0x70>)
   1e916:	4a17      	ldr	r2, [pc, #92]	; (1e974 <z_time_slice+0x74>)
   1e918:	6898      	ldr	r0, [r3, #8]
   1e91a:	6815      	ldr	r5, [r2, #0]
   1e91c:	42a8      	cmp	r0, r5
   1e91e:	461d      	mov	r5, r3
   1e920:	d106      	bne.n	1e930 <z_time_slice+0x30>
			z_reset_time_slice();
   1e922:	f7ff fea9 	bl	1e678 <z_reset_time_slice>
	__asm__ volatile(
   1e926:	f384 8811 	msr	BASEPRI, r4
   1e92a:	f3bf 8f6f 	isb	sy
}
   1e92e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1e930:	2600      	movs	r6, #0
   1e932:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1e934:	4a10      	ldr	r2, [pc, #64]	; (1e978 <z_time_slice+0x78>)
   1e936:	6812      	ldr	r2, [r2, #0]
   1e938:	b1ba      	cbz	r2, 1e96a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1e93a:	89c2      	ldrh	r2, [r0, #14]
   1e93c:	2a7f      	cmp	r2, #127	; 0x7f
   1e93e:	d814      	bhi.n	1e96a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1e940:	7b42      	ldrb	r2, [r0, #13]
   1e942:	06d2      	lsls	r2, r2, #27
   1e944:	d111      	bne.n	1e96a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1e946:	4a0d      	ldr	r2, [pc, #52]	; (1e97c <z_time_slice+0x7c>)
   1e948:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1e94c:	6812      	ldr	r2, [r2, #0]
   1e94e:	4296      	cmp	r6, r2
   1e950:	db0b      	blt.n	1e96a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1e952:	4a0b      	ldr	r2, [pc, #44]	; (1e980 <z_time_slice+0x80>)
   1e954:	4290      	cmp	r0, r2
   1e956:	d008      	beq.n	1e96a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1e958:	695a      	ldr	r2, [r3, #20]
   1e95a:	428a      	cmp	r2, r1
   1e95c:	dc02      	bgt.n	1e964 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1e95e:	f7ff ff95 	bl	1e88c <move_thread_to_end_of_prio_q>
   1e962:	e7de      	b.n	1e922 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1e964:	1a52      	subs	r2, r2, r1
   1e966:	615a      	str	r2, [r3, #20]
   1e968:	e7dd      	b.n	1e926 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1e96a:	2300      	movs	r3, #0
   1e96c:	616b      	str	r3, [r5, #20]
   1e96e:	e7da      	b.n	1e926 <z_time_slice+0x26>
   1e970:	20002950 	.word	0x20002950
   1e974:	20002984 	.word	0x20002984
   1e978:	2000298c 	.word	0x2000298c
   1e97c:	20002988 	.word	0x20002988
   1e980:	20000fd0 	.word	0x20000fd0

0001e984 <z_impl_k_thread_suspend>:
{
   1e984:	b570      	push	{r4, r5, r6, lr}
   1e986:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1e988:	3018      	adds	r0, #24
   1e98a:	f005 fff6 	bl	2497a <z_abort_timeout>
	__asm__ volatile(
   1e98e:	f04f 0320 	mov.w	r3, #32
   1e992:	f3ef 8611 	mrs	r6, BASEPRI
   1e996:	f383 8811 	msr	BASEPRI, r3
   1e99a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1e99e:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1e9a2:	2b00      	cmp	r3, #0
   1e9a4:	da07      	bge.n	1e9b6 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1e9a6:	480f      	ldr	r0, [pc, #60]	; (1e9e4 <z_impl_k_thread_suspend+0x60>)
   1e9a8:	4621      	mov	r1, r4
   1e9aa:	f7ff febf 	bl	1e72c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1e9ae:	7b63      	ldrb	r3, [r4, #13]
   1e9b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e9b4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1e9b6:	4d0c      	ldr	r5, [pc, #48]	; (1e9e8 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1e9b8:	7b63      	ldrb	r3, [r4, #13]
   1e9ba:	68a8      	ldr	r0, [r5, #8]
   1e9bc:	f043 0310 	orr.w	r3, r3, #16
   1e9c0:	7363      	strb	r3, [r4, #13]
   1e9c2:	1b03      	subs	r3, r0, r4
   1e9c4:	4258      	negs	r0, r3
   1e9c6:	4158      	adcs	r0, r3
   1e9c8:	f7ff fec6 	bl	1e758 <update_cache>
	__asm__ volatile(
   1e9cc:	f386 8811 	msr	BASEPRI, r6
   1e9d0:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1e9d4:	68ab      	ldr	r3, [r5, #8]
   1e9d6:	42a3      	cmp	r3, r4
   1e9d8:	d103      	bne.n	1e9e2 <z_impl_k_thread_suspend+0x5e>
}
   1e9da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1e9de:	f005 be6f 	b.w	246c0 <z_reschedule_unlocked>
}
   1e9e2:	bd70      	pop	{r4, r5, r6, pc}
   1e9e4:	2000297c 	.word	0x2000297c
   1e9e8:	20002950 	.word	0x20002950

0001e9ec <z_thread_single_abort>:
{
   1e9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e9f0:	4604      	mov	r4, r0
	__asm__ volatile(
   1e9f2:	f04f 0320 	mov.w	r3, #32
   1e9f6:	f3ef 8211 	mrs	r2, BASEPRI
   1e9fa:	f383 8811 	msr	BASEPRI, r3
   1e9fe:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   1ea02:	7b43      	ldrb	r3, [r0, #13]
   1ea04:	f013 0f28 	tst.w	r3, #40	; 0x28
   1ea08:	d005      	beq.n	1ea16 <z_thread_single_abort+0x2a>
	__asm__ volatile(
   1ea0a:	f382 8811 	msr	BASEPRI, r2
   1ea0e:	f3bf 8f6f 	isb	sy
}
   1ea12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1ea16:	f043 0320 	orr.w	r3, r3, #32
   1ea1a:	7343      	strb	r3, [r0, #13]
   1ea1c:	f382 8811 	msr	BASEPRI, r2
   1ea20:	f3bf 8f6f 	isb	sy
   1ea24:	3018      	adds	r0, #24
   1ea26:	f005 ffa8 	bl	2497a <z_abort_timeout>
	__asm__ volatile(
   1ea2a:	f04f 0320 	mov.w	r3, #32
   1ea2e:	f3ef 8611 	mrs	r6, BASEPRI
   1ea32:	f383 8811 	msr	BASEPRI, r3
   1ea36:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ea3a:	7b63      	ldrb	r3, [r4, #13]
   1ea3c:	06d8      	lsls	r0, r3, #27
   1ea3e:	d116      	bne.n	1ea6e <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   1ea40:	69a2      	ldr	r2, [r4, #24]
   1ea42:	b9a2      	cbnz	r2, 1ea6e <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   1ea44:	0619      	lsls	r1, r3, #24
   1ea46:	d507      	bpl.n	1ea58 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   1ea48:	4826      	ldr	r0, [pc, #152]	; (1eae4 <z_thread_single_abort+0xf8>)
   1ea4a:	4621      	mov	r1, r4
   1ea4c:	f7ff fe6e 	bl	1e72c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1ea50:	7b63      	ldrb	r3, [r4, #13]
   1ea52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ea56:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1ea58:	4b23      	ldr	r3, [pc, #140]	; (1eae8 <z_thread_single_abort+0xfc>)
   1ea5a:	6898      	ldr	r0, [r3, #8]
   1ea5c:	1b02      	subs	r2, r0, r4
   1ea5e:	4250      	negs	r0, r2
   1ea60:	4150      	adcs	r0, r2
   1ea62:	f7ff fe79 	bl	1e758 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1ea66:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   1ea6a:	2700      	movs	r7, #0
   1ea6c:	e01e      	b.n	1eaac <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   1ea6e:	079b      	lsls	r3, r3, #30
   1ea70:	d5f9      	bpl.n	1ea66 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1ea72:	68a0      	ldr	r0, [r4, #8]
   1ea74:	4621      	mov	r1, r4
   1ea76:	f7ff fe59 	bl	1e72c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ea7a:	7b63      	ldrb	r3, [r4, #13]
   1ea7c:	f023 0302 	bic.w	r3, r3, #2
   1ea80:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1ea82:	2300      	movs	r3, #0
   1ea84:	60a3      	str	r3, [r4, #8]
   1ea86:	e7ee      	b.n	1ea66 <z_thread_single_abort+0x7a>
   1ea88:	f105 0018 	add.w	r0, r5, #24
   1ea8c:	f005 ff75 	bl	2497a <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1ea90:	68a8      	ldr	r0, [r5, #8]
   1ea92:	4629      	mov	r1, r5
   1ea94:	f7ff fe4a 	bl	1e72c <z_priq_dumb_remove>
   1ea98:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1ea9a:	60af      	str	r7, [r5, #8]
   1ea9c:	f023 0302 	bic.w	r3, r3, #2
   1eaa0:	736b      	strb	r3, [r5, #13]
   1eaa2:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   1eaa6:	4628      	mov	r0, r5
   1eaa8:	f7ff fe9a 	bl	1e7e0 <ready_thread>
	return list->head == list;
   1eaac:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1eaae:	4545      	cmp	r5, r8
   1eab0:	d001      	beq.n	1eab6 <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1eab2:	2d00      	cmp	r5, #0
   1eab4:	d1e8      	bne.n	1ea88 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   1eab6:	4b0c      	ldr	r3, [pc, #48]	; (1eae8 <z_thread_single_abort+0xfc>)
   1eab8:	689a      	ldr	r2, [r3, #8]
   1eaba:	4b0c      	ldr	r3, [pc, #48]	; (1eaec <z_thread_single_abort+0x100>)
   1eabc:	429a      	cmp	r2, r3
   1eabe:	d102      	bne.n	1eac6 <z_thread_single_abort+0xda>
			update_cache(1);
   1eac0:	2001      	movs	r0, #1
   1eac2:	f7ff fe49 	bl	1e758 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   1eac6:	7b63      	ldrb	r3, [r4, #13]
   1eac8:	f043 0308 	orr.w	r3, r3, #8
   1eacc:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1eace:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   1ead0:	f386 8811 	msr	BASEPRI, r6
   1ead4:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1ead8:	2b00      	cmp	r3, #0
   1eada:	d09a      	beq.n	1ea12 <z_thread_single_abort+0x26>
		fn_abort(thread);
   1eadc:	4620      	mov	r0, r4
}
   1eade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   1eae2:	4718      	bx	r3
   1eae4:	2000297c 	.word	0x2000297c
   1eae8:	20002950 	.word	0x20002950
   1eaec:	20000fd0 	.word	0x20000fd0

0001eaf0 <unready_thread>:
{
   1eaf0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1eaf2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1eaf6:	2b00      	cmp	r3, #0
{
   1eaf8:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1eafa:	da06      	bge.n	1eb0a <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1eafc:	4807      	ldr	r0, [pc, #28]	; (1eb1c <unready_thread+0x2c>)
   1eafe:	f7ff fe15 	bl	1e72c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1eb02:	7b4b      	ldrb	r3, [r1, #13]
   1eb04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1eb08:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1eb0a:	4b05      	ldr	r3, [pc, #20]	; (1eb20 <unready_thread+0x30>)
   1eb0c:	6898      	ldr	r0, [r3, #8]
   1eb0e:	1a43      	subs	r3, r0, r1
   1eb10:	4258      	negs	r0, r3
   1eb12:	4158      	adcs	r0, r3
}
   1eb14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1eb18:	f7ff be1e 	b.w	1e758 <update_cache>
   1eb1c:	2000297c 	.word	0x2000297c
   1eb20:	20002950 	.word	0x20002950

0001eb24 <pend>:
{
   1eb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb28:	4606      	mov	r6, r0
   1eb2a:	4614      	mov	r4, r2
   1eb2c:	461d      	mov	r5, r3
	__asm__ volatile(
   1eb2e:	f04f 0320 	mov.w	r3, #32
   1eb32:	f3ef 8711 	mrs	r7, BASEPRI
   1eb36:	f383 8811 	msr	BASEPRI, r3
   1eb3a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1eb3e:	f005 fe25 	bl	2478c <add_to_waitq_locked>
	__asm__ volatile(
   1eb42:	f387 8811 	msr	BASEPRI, r7
   1eb46:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1eb4a:	1c6b      	adds	r3, r5, #1
   1eb4c:	bf08      	it	eq
   1eb4e:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1eb52:	d008      	beq.n	1eb66 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1eb54:	4622      	mov	r2, r4
   1eb56:	462b      	mov	r3, r5
   1eb58:	f106 0018 	add.w	r0, r6, #24
   1eb5c:	4903      	ldr	r1, [pc, #12]	; (1eb6c <pend+0x48>)
}
   1eb5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1eb62:	f000 bb11 	b.w	1f188 <z_add_timeout>
   1eb66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eb6a:	bf00      	nop
   1eb6c:	0002474d 	.word	0x0002474d

0001eb70 <z_pend_curr>:
{
   1eb70:	b510      	push	{r4, lr}
	pending_current = _current;
   1eb72:	4b07      	ldr	r3, [pc, #28]	; (1eb90 <z_pend_curr+0x20>)
   1eb74:	6898      	ldr	r0, [r3, #8]
   1eb76:	4b07      	ldr	r3, [pc, #28]	; (1eb94 <z_pend_curr+0x24>)
{
   1eb78:	460c      	mov	r4, r1
	pending_current = _current;
   1eb7a:	6018      	str	r0, [r3, #0]
{
   1eb7c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1eb7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1eb82:	f7ff ffcf 	bl	1eb24 <pend>
   1eb86:	4620      	mov	r0, r4
}
   1eb88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1eb8c:	f7e7 bd8c 	b.w	66a8 <arch_swap>
   1eb90:	20002950 	.word	0x20002950
   1eb94:	20002984 	.word	0x20002984

0001eb98 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   1eb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb9c:	4605      	mov	r5, r0
   1eb9e:	460f      	mov	r7, r1
#else
	ticks += _TICK_ALIGN;
	timeout = Z_TIMEOUT_TICKS(ticks);
#endif

	expected_wakeup_ticks = ticks + z_tick_get_32();
   1eba0:	f005 ff2b 	bl	249fa <z_tick_get_32>
   1eba4:	4604      	mov	r4, r0
	__asm__ volatile(
   1eba6:	f04f 0320 	mov.w	r3, #32
   1ebaa:	f3ef 8811 	mrs	r8, BASEPRI
   1ebae:	f383 8811 	msr	BASEPRI, r3
   1ebb2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1ebb6:	4e12      	ldr	r6, [pc, #72]	; (1ec00 <z_tick_sleep.part.0+0x68>)
   1ebb8:	4b12      	ldr	r3, [pc, #72]	; (1ec04 <z_tick_sleep.part.0+0x6c>)
   1ebba:	68b0      	ldr	r0, [r6, #8]
   1ebbc:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1ebbe:	f7ff ff97 	bl	1eaf0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1ebc2:	68b0      	ldr	r0, [r6, #8]
   1ebc4:	4910      	ldr	r1, [pc, #64]	; (1ec08 <z_tick_sleep.part.0+0x70>)
   1ebc6:	462a      	mov	r2, r5
   1ebc8:	463b      	mov	r3, r7
   1ebca:	3018      	adds	r0, #24
   1ebcc:	f000 fadc 	bl	1f188 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1ebd0:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1ebd2:	7b53      	ldrb	r3, [r2, #13]
   1ebd4:	f043 0310 	orr.w	r3, r3, #16
   1ebd8:	7353      	strb	r3, [r2, #13]
   1ebda:	4640      	mov	r0, r8
   1ebdc:	f7e7 fd64 	bl	66a8 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1ebe0:	f005 ff0b 	bl	249fa <z_tick_get_32>
	expected_wakeup_ticks = ticks + z_tick_get_32();
   1ebe4:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1ebe6:	1a24      	subs	r4, r4, r0
   1ebe8:	f04f 0500 	mov.w	r5, #0
   1ebec:	f165 0500 	sbc.w	r5, r5, #0
   1ebf0:	2c00      	cmp	r4, #0
   1ebf2:	f175 0300 	sbcs.w	r3, r5, #0
   1ebf6:	bfb8      	it	lt
   1ebf8:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   1ebfa:	4620      	mov	r0, r4
   1ebfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ec00:	20002950 	.word	0x20002950
   1ec04:	20002984 	.word	0x20002984
   1ec08:	0002474d 	.word	0x0002474d

0001ec0c <z_set_prio>:
{
   1ec0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec10:	4604      	mov	r4, r0
   1ec12:	f04f 0320 	mov.w	r3, #32
   1ec16:	f3ef 8811 	mrs	r8, BASEPRI
   1ec1a:	f383 8811 	msr	BASEPRI, r3
   1ec1e:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ec22:	7b43      	ldrb	r3, [r0, #13]
   1ec24:	06db      	lsls	r3, r3, #27
   1ec26:	b24e      	sxtb	r6, r1
   1ec28:	d12e      	bne.n	1ec88 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   1ec2a:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1ec2c:	bb65      	cbnz	r5, 1ec88 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1ec2e:	4f18      	ldr	r7, [pc, #96]	; (1ec90 <z_set_prio+0x84>)
   1ec30:	4621      	mov	r1, r4
   1ec32:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1ec36:	f7ff fd79 	bl	1e72c <z_priq_dumb_remove>
	return list->head == list;
   1ec3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ec3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
				thread->base.prio = prio;
   1ec3e:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ec40:	4283      	cmp	r3, r0
   1ec42:	bf18      	it	ne
   1ec44:	461d      	movne	r5, r3
   1ec46:	2d00      	cmp	r5, #0
   1ec48:	bf38      	it	cc
   1ec4a:	2500      	movcc	r5, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ec4c:	b1b5      	cbz	r5, 1ec7c <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1ec4e:	f995 100e 	ldrsb.w	r1, [r5, #14]
   1ec52:	42b1      	cmp	r1, r6
   1ec54:	dc03      	bgt.n	1ec5e <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   1ec56:	42aa      	cmp	r2, r5
   1ec58:	d010      	beq.n	1ec7c <z_set_prio+0x70>
   1ec5a:	682d      	ldr	r5, [r5, #0]
   1ec5c:	e7f6      	b.n	1ec4c <z_set_prio+0x40>
	node->prev = successor->prev;
   1ec5e:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   1ec60:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   1ec64:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1ec66:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1ec68:	2001      	movs	r0, #1
   1ec6a:	f7ff fd75 	bl	1e758 <update_cache>
   1ec6e:	2001      	movs	r0, #1
	__asm__ volatile(
   1ec70:	f388 8811 	msr	BASEPRI, r8
   1ec74:	f3bf 8f6f 	isb	sy
}
   1ec78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   1ec7c:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   1ec80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ec82:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ec84:	633c      	str	r4, [r7, #48]	; 0x30
}
   1ec86:	e7ef      	b.n	1ec68 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1ec88:	73a6      	strb	r6, [r4, #14]
   1ec8a:	2000      	movs	r0, #0
   1ec8c:	e7f0      	b.n	1ec70 <z_set_prio+0x64>
   1ec8e:	bf00      	nop
   1ec90:	20002950 	.word	0x20002950

0001ec94 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1ec94:	4b04      	ldr	r3, [pc, #16]	; (1eca8 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1ec96:	2100      	movs	r1, #0
   1ec98:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1ec9c:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1eca0:	4608      	mov	r0, r1
   1eca2:	f7ff bcff 	b.w	1e6a4 <k_sched_time_slice_set>
   1eca6:	bf00      	nop
   1eca8:	20002950 	.word	0x20002950

0001ecac <z_impl_k_yield>:
{
   1ecac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1ecae:	4c24      	ldr	r4, [pc, #144]	; (1ed40 <z_impl_k_yield+0x94>)
   1ecb0:	4b24      	ldr	r3, [pc, #144]	; (1ed44 <z_impl_k_yield+0x98>)
   1ecb2:	68a2      	ldr	r2, [r4, #8]
   1ecb4:	429a      	cmp	r2, r3
   1ecb6:	d030      	beq.n	1ed1a <z_impl_k_yield+0x6e>
	__asm__ volatile(
   1ecb8:	f04f 0320 	mov.w	r3, #32
   1ecbc:	f3ef 8511 	mrs	r5, BASEPRI
   1ecc0:	f383 8811 	msr	BASEPRI, r3
   1ecc4:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1ecc8:	68a1      	ldr	r1, [r4, #8]
   1ecca:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1ecce:	f7ff fd2d 	bl	1e72c <z_priq_dumb_remove>
	return list->head == list;
   1ecd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1ecd4:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ecd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ecd8:	4283      	cmp	r3, r0
   1ecda:	bf08      	it	eq
   1ecdc:	2300      	moveq	r3, #0
   1ecde:	2b00      	cmp	r3, #0
   1ece0:	bf38      	it	cc
   1ece2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ece4:	b32b      	cbz	r3, 1ed32 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   1ece6:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1ecea:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1ecee:	42b7      	cmp	r7, r6
   1ecf0:	db03      	blt.n	1ecfa <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1ecf2:	428b      	cmp	r3, r1
   1ecf4:	d01d      	beq.n	1ed32 <z_impl_k_yield+0x86>
   1ecf6:	681b      	ldr	r3, [r3, #0]
   1ecf8:	e7f4      	b.n	1ece4 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1ecfa:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1ecfc:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1ed00:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1ed02:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   1ed04:	7b53      	ldrb	r3, [r2, #13]
   1ed06:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ed0a:	7353      	strb	r3, [r2, #13]
			update_cache(1);
   1ed0c:	2001      	movs	r0, #1
   1ed0e:	f7ff fd23 	bl	1e758 <update_cache>
	__asm__ volatile(
   1ed12:	f385 8811 	msr	BASEPRI, r5
   1ed16:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1ed1a:	f04f 0320 	mov.w	r3, #32
   1ed1e:	f3ef 8011 	mrs	r0, BASEPRI
   1ed22:	f383 8811 	msr	BASEPRI, r3
   1ed26:	f3bf 8f6f 	isb	sy
}
   1ed2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1ed2e:	f7e7 bcbb 	b.w	66a8 <arch_swap>
	node->prev = list->tail;
   1ed32:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   1ed36:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ed38:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1ed3a:	6322      	str	r2, [r4, #48]	; 0x30
}
   1ed3c:	e7e2      	b.n	1ed04 <z_impl_k_yield+0x58>
   1ed3e:	bf00      	nop
   1ed40:	20002950 	.word	0x20002950
   1ed44:	20000fd0 	.word	0x20000fd0

0001ed48 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ed48:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1ed4c:	bf08      	it	eq
   1ed4e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1ed52:	b508      	push	{r3, lr}
   1ed54:	4602      	mov	r2, r0
   1ed56:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ed58:	d106      	bne.n	1ed68 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   1ed5a:	4b08      	ldr	r3, [pc, #32]	; (1ed7c <z_impl_k_sleep+0x34>)
   1ed5c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1ed5e:	f7ff fe11 	bl	1e984 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1ed62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1ed66:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   1ed68:	4313      	orrs	r3, r2
   1ed6a:	d103      	bne.n	1ed74 <z_impl_k_sleep+0x2c>
	z_impl_k_yield();
   1ed6c:	f7ff ff9e 	bl	1ecac <z_impl_k_yield>
		return 0;
   1ed70:	2000      	movs	r0, #0
}
   1ed72:	e7f8      	b.n	1ed66 <z_impl_k_sleep+0x1e>
}
   1ed74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1ed78:	f7ff bf0e 	b.w	1eb98 <z_tick_sleep.part.0>
   1ed7c:	20002950 	.word	0x20002950

0001ed80 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1ed80:	4b01      	ldr	r3, [pc, #4]	; (1ed88 <z_impl_k_current_get+0x8>)
   1ed82:	6898      	ldr	r0, [r3, #8]
   1ed84:	4770      	bx	lr
   1ed86:	bf00      	nop
   1ed88:	20002950 	.word	0x20002950

0001ed8c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1ed8c:	b538      	push	{r3, r4, r5, lr}
   1ed8e:	4604      	mov	r4, r0
   1ed90:	f04f 0320 	mov.w	r3, #32
   1ed94:	f3ef 8511 	mrs	r5, BASEPRI
   1ed98:	f383 8811 	msr	BASEPRI, r3
   1ed9c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1eda0:	f005 fd1f 	bl	247e2 <z_unpend_first_thread>

	if (thread != NULL) {
   1eda4:	b150      	cbz	r0, 1edbc <z_impl_k_sem_give+0x30>
   1eda6:	2200      	movs	r2, #0
   1eda8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1edac:	f005 fcbe 	bl	2472c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1edb0:	4629      	mov	r1, r5
   1edb2:	4808      	ldr	r0, [pc, #32]	; (1edd4 <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1edb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1edb8:	f7ff bc92 	b.w	1e6e0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1edbc:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1edc0:	429a      	cmp	r2, r3
   1edc2:	bf18      	it	ne
   1edc4:	3301      	addne	r3, #1
   1edc6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1edc8:	2102      	movs	r1, #2
   1edca:	f104 0010 	add.w	r0, r4, #16
   1edce:	f005 ffb5 	bl	24d3c <z_handle_obj_poll_events>
}
   1edd2:	e7ed      	b.n	1edb0 <z_impl_k_sem_give+0x24>
   1edd4:	2000309e 	.word	0x2000309e

0001edd8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1edd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1edda:	4614      	mov	r4, r2
   1eddc:	461d      	mov	r5, r3
   1edde:	f04f 0320 	mov.w	r3, #32
   1ede2:	f3ef 8111 	mrs	r1, BASEPRI
   1ede6:	f383 8811 	msr	BASEPRI, r3
   1edea:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1edee:	6883      	ldr	r3, [r0, #8]
   1edf0:	b143      	cbz	r3, 1ee04 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1edf2:	3b01      	subs	r3, #1
   1edf4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1edf6:	f381 8811 	msr	BASEPRI, r1
   1edfa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1edfe:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1ee00:	b003      	add	sp, #12
   1ee02:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ee04:	ea54 0305 	orrs.w	r3, r4, r5
   1ee08:	d106      	bne.n	1ee18 <z_impl_k_sem_take+0x40>
   1ee0a:	f381 8811 	msr	BASEPRI, r1
   1ee0e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1ee12:	f06f 000f 	mvn.w	r0, #15
   1ee16:	e7f3      	b.n	1ee00 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1ee18:	4602      	mov	r2, r0
   1ee1a:	e9cd 4500 	strd	r4, r5, [sp]
   1ee1e:	4802      	ldr	r0, [pc, #8]	; (1ee28 <z_impl_k_sem_take+0x50>)
   1ee20:	f7ff fea6 	bl	1eb70 <z_pend_curr>
	return ret;
   1ee24:	e7ec      	b.n	1ee00 <z_impl_k_sem_take+0x28>
   1ee26:	bf00      	nop
   1ee28:	2000309e 	.word	0x2000309e

0001ee2c <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1ee2c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1ee2e:	4c08      	ldr	r4, [pc, #32]	; (1ee50 <k_sys_work_q_init+0x24>)
   1ee30:	4908      	ldr	r1, [pc, #32]	; (1ee54 <k_sys_work_q_init+0x28>)
   1ee32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ee36:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1ee3a:	4620      	mov	r0, r4
   1ee3c:	f000 f8c8 	bl	1efd0 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1ee40:	4905      	ldr	r1, [pc, #20]	; (1ee58 <k_sys_work_q_init+0x2c>)
   1ee42:	f104 0018 	add.w	r0, r4, #24
   1ee46:	f005 fd1b 	bl	24880 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1ee4a:	2000      	movs	r0, #0
   1ee4c:	bd10      	pop	{r4, pc}
   1ee4e:	bf00      	nop
   1ee50:	200010e0 	.word	0x200010e0
   1ee54:	20005000 	.word	0x20005000
   1ee58:	00028a6c 	.word	0x00028a6c

0001ee5c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1ee5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   1ee60:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   1ee64:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1ee68:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1ee6a:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1ee6c:	2504      	movs	r5, #4
   1ee6e:	7345      	strb	r5, [r0, #13]
{
   1ee70:	460f      	mov	r7, r1

	thread_base->prio = priority;
   1ee72:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1ee74:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ee76:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
   1ee78:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ee7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   1ee7c:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ee7e:	f026 0607 	bic.w	r6, r6, #7

#define K_KERNEL_STACK_SIZEOF(sym) (sizeof(sym) - K_KERNEL_STACK_RESERVED)

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1ee82:	3720      	adds	r7, #32
	node->prev = NULL;
   1ee84:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1ee88:	e9c0 761b 	strd	r7, r6, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
   1ee8c:	6745      	str	r5, [r0, #116]	; 0x74
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1ee8e:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ee92:	9202      	str	r2, [sp, #8]
   1ee94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ee96:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1ee98:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ee9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ee9c:	9200      	str	r2, [sp, #0]
   1ee9e:	4642      	mov	r2, r8
{
   1eea0:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1eea2:	f7e7 fcaf 	bl	6804 <arch_new_thread>
	if (!_current) {
   1eea6:	4b05      	ldr	r3, [pc, #20]	; (1eebc <z_setup_new_thread+0x60>)
   1eea8:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   1eeaa:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   1eeae:	b103      	cbz	r3, 1eeb2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1eeb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	return stack_ptr;
   1eeb2:	67a3      	str	r3, [r4, #120]	; 0x78
}
   1eeb4:	4640      	mov	r0, r8
   1eeb6:	b004      	add	sp, #16
   1eeb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eebc:	20002950 	.word	0x20002950

0001eec0 <z_impl_k_thread_create>:
{
   1eec0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eec2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1eec4:	2500      	movs	r5, #0
   1eec6:	9505      	str	r5, [sp, #20]
   1eec8:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1eeca:	9504      	str	r5, [sp, #16]
   1eecc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1eece:	9503      	str	r5, [sp, #12]
   1eed0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1eed2:	9502      	str	r5, [sp, #8]
{
   1eed4:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1eed8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1eeda:	9501      	str	r5, [sp, #4]
   1eedc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1eede:	9500      	str	r5, [sp, #0]
{
   1eee0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1eee2:	f7ff ffbb 	bl	1ee5c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1eee6:	1c7b      	adds	r3, r7, #1
   1eee8:	bf08      	it	eq
   1eeea:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1eeee:	d005      	beq.n	1eefc <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1eef0:	ea56 0307 	orrs.w	r3, r6, r7
   1eef4:	d105      	bne.n	1ef02 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1eef6:	4620      	mov	r0, r4
   1eef8:	f7ff fcaa 	bl	1e850 <z_sched_start>
}
   1eefc:	4620      	mov	r0, r4
   1eefe:	b007      	add	sp, #28
   1ef00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1ef02:	4904      	ldr	r1, [pc, #16]	; (1ef14 <z_impl_k_thread_create+0x54>)
   1ef04:	4632      	mov	r2, r6
   1ef06:	463b      	mov	r3, r7
   1ef08:	f104 0018 	add.w	r0, r4, #24
   1ef0c:	f000 f93c 	bl	1f188 <z_add_timeout>
   1ef10:	e7f4      	b.n	1eefc <z_impl_k_thread_create+0x3c>
   1ef12:	bf00      	nop
   1ef14:	0002474d 	.word	0x0002474d

0001ef18 <z_init_static_threads>:
{
   1ef18:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1ef1a:	4e20      	ldr	r6, [pc, #128]	; (1ef9c <z_init_static_threads+0x84>)
   1ef1c:	4d20      	ldr	r5, [pc, #128]	; (1efa0 <z_init_static_threads+0x88>)
{
   1ef1e:	b087      	sub	sp, #28
   1ef20:	4637      	mov	r7, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1ef22:	42b5      	cmp	r5, r6
   1ef24:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1ef28:	d30a      	bcc.n	1ef40 <z_init_static_threads+0x28>
	k_sched_lock();
   1ef2a:	f7ff fbeb 	bl	1e704 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ef2e:	4c1c      	ldr	r4, [pc, #112]	; (1efa0 <z_init_static_threads+0x88>)
   1ef30:	4d1c      	ldr	r5, [pc, #112]	; (1efa4 <z_init_static_threads+0x8c>)
   1ef32:	42bc      	cmp	r4, r7
   1ef34:	d321      	bcc.n	1ef7a <z_init_static_threads+0x62>
}
   1ef36:	b007      	add	sp, #28
   1ef38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   1ef3c:	f7ff bc34 	b.w	1e7a8 <k_sched_unlock>
		z_setup_new_thread(
   1ef40:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1ef44:	9305      	str	r3, [sp, #20]
   1ef46:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1ef4a:	9304      	str	r3, [sp, #16]
   1ef4c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1ef50:	9303      	str	r3, [sp, #12]
   1ef52:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1ef56:	9302      	str	r3, [sp, #8]
   1ef58:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1ef5c:	9301      	str	r3, [sp, #4]
   1ef5e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1ef62:	9300      	str	r3, [sp, #0]
   1ef64:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1ef68:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1ef6c:	f7ff ff76 	bl	1ee5c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1ef70:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1ef74:	65dd      	str	r5, [r3, #92]	; 0x5c
   1ef76:	4625      	mov	r5, r4
   1ef78:	e7d3      	b.n	1ef22 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1ef7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1ef7c:	1c53      	adds	r3, r2, #1
   1ef7e:	d004      	beq.n	1ef8a <z_init_static_threads+0x72>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ef80:	2a00      	cmp	r2, #0
			schedule_new_thread(thread_data->init_thread,
   1ef82:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ef84:	dc03      	bgt.n	1ef8e <z_init_static_threads+0x76>
	z_sched_start(thread);
   1ef86:	f7ff fc63 	bl	1e850 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ef8a:	3430      	adds	r4, #48	; 0x30
   1ef8c:	e7d1      	b.n	1ef32 <z_init_static_threads+0x1a>
   1ef8e:	17d3      	asrs	r3, r2, #31
   1ef90:	4629      	mov	r1, r5
   1ef92:	3018      	adds	r0, #24
   1ef94:	f000 f8f8 	bl	1f188 <z_add_timeout>
   1ef98:	e7f7      	b.n	1ef8a <z_init_static_threads+0x72>
   1ef9a:	bf00      	nop
   1ef9c:	200006d8 	.word	0x200006d8
   1efa0:	200006d8 	.word	0x200006d8
   1efa4:	0002474d 	.word	0x0002474d

0001efa8 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   1efa8:	b508      	push	{r3, lr}
	__asm__ volatile(
   1efaa:	f04f 0320 	mov.w	r3, #32
   1efae:	f3ef 8411 	mrs	r4, BASEPRI
   1efb2:	f383 8811 	msr	BASEPRI, r3
   1efb6:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   1efba:	4b04      	ldr	r3, [pc, #16]	; (1efcc <z_self_abort+0x24>)
   1efbc:	6898      	ldr	r0, [r3, #8]
   1efbe:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   1efc0:	f7ff fce0 	bl	1e984 <z_impl_k_thread_suspend>
   1efc4:	4620      	mov	r0, r4
   1efc6:	f7e7 fb6f 	bl	66a8 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
   1efca:	bf00      	nop
   1efcc:	20002950 	.word	0x20002950

0001efd0 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1efd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1efd4:	4604      	mov	r4, r0
   1efd6:	b088      	sub	sp, #32
   1efd8:	460d      	mov	r5, r1
   1efda:	4616      	mov	r6, r2
   1efdc:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1efde:	f005 fadd 	bl	2459c <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1efe2:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1efe6:	2200      	movs	r2, #0
   1efe8:	2300      	movs	r3, #0
   1efea:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1efee:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1eff2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1eff6:	4b07      	ldr	r3, [pc, #28]	; (1f014 <k_work_q_start+0x44>)
   1eff8:	9400      	str	r4, [sp, #0]
   1effa:	4632      	mov	r2, r6
   1effc:	4629      	mov	r1, r5
   1effe:	4640      	mov	r0, r8
   1f000:	f7ff ff5e 	bl	1eec0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1f004:	4904      	ldr	r1, [pc, #16]	; (1f018 <k_work_q_start+0x48>)
   1f006:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1f008:	b008      	add	sp, #32
   1f00a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f00e:	f005 bc37 	b.w	24880 <z_impl_k_thread_name_set>
   1f012:	bf00      	nop
   1f014:	0001f895 	.word	0x0001f895
   1f018:	00028a75 	.word	0x00028a75

0001f01c <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1f01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f020:	4606      	mov	r6, r0
   1f022:	460d      	mov	r5, r1
   1f024:	4690      	mov	r8, r2
   1f026:	4699      	mov	r9, r3
   1f028:	f04f 0320 	mov.w	r3, #32
   1f02c:	f3ef 8711 	mrs	r7, BASEPRI
   1f030:	f383 8811 	msr	BASEPRI, r3
   1f034:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1f038:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1f03a:	b17b      	cbz	r3, 1f05c <k_delayed_work_submit_to_queue+0x40>
   1f03c:	4283      	cmp	r3, r0
   1f03e:	d128      	bne.n	1f092 <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1f040:	4628      	mov	r0, r5
   1f042:	f005 fc3f 	bl	248c4 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   1f046:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1f04a:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1f04c:	d008      	beq.n	1f060 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1f04e:	2800      	cmp	r0, #0
   1f050:	da07      	bge.n	1f062 <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1f052:	f387 8811 	msr	BASEPRI, r7
   1f056:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1f05a:	e00f      	b.n	1f07c <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   1f05c:	2800      	cmp	r0, #0
   1f05e:	d0ef      	beq.n	1f040 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1f060:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f062:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   1f066:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f068:	d10b      	bne.n	1f082 <k_delayed_work_submit_to_queue+0x66>
   1f06a:	f387 8811 	msr	BASEPRI, r7
   1f06e:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1f072:	4629      	mov	r1, r5
   1f074:	4630      	mov	r0, r6
   1f076:	f005 fc08 	bl	2488a <k_work_submit_to_queue>
		return 0;
   1f07a:	2400      	movs	r4, #0
}
   1f07c:	4620      	mov	r0, r4
   1f07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1f082:	4905      	ldr	r1, [pc, #20]	; (1f098 <k_delayed_work_submit_to_queue+0x7c>)
   1f084:	4642      	mov	r2, r8
   1f086:	464b      	mov	r3, r9
   1f088:	f105 0010 	add.w	r0, r5, #16
   1f08c:	f000 f87c 	bl	1f188 <z_add_timeout>
   1f090:	e7df      	b.n	1f052 <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1f092:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1f096:	e7dc      	b.n	1f052 <k_delayed_work_submit_to_queue+0x36>
   1f098:	000248bb 	.word	0x000248bb

0001f09c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1f09c:	4a02      	ldr	r2, [pc, #8]	; (1f0a8 <boot_banner+0xc>)
   1f09e:	4903      	ldr	r1, [pc, #12]	; (1f0ac <boot_banner+0x10>)
   1f0a0:	4803      	ldr	r0, [pc, #12]	; (1f0b0 <boot_banner+0x14>)
   1f0a2:	f000 bb28 	b.w	1f6f6 <printk>
   1f0a6:	bf00      	nop
   1f0a8:	00026ddc 	.word	0x00026ddc
   1f0ac:	00028a7f 	.word	0x00028a7f
   1f0b0:	00028aa0 	.word	0x00028aa0

0001f0b4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1f0b4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1f0b6:	4806      	ldr	r0, [pc, #24]	; (1f0d0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1f0b8:	4a06      	ldr	r2, [pc, #24]	; (1f0d4 <z_data_copy+0x20>)
   1f0ba:	4907      	ldr	r1, [pc, #28]	; (1f0d8 <z_data_copy+0x24>)
   1f0bc:	1a12      	subs	r2, r2, r0
   1f0be:	f002 fb92 	bl	217e6 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1f0c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1f0c6:	4a05      	ldr	r2, [pc, #20]	; (1f0dc <z_data_copy+0x28>)
   1f0c8:	4905      	ldr	r1, [pc, #20]	; (1f0e0 <z_data_copy+0x2c>)
   1f0ca:	4806      	ldr	r0, [pc, #24]	; (1f0e4 <z_data_copy+0x30>)
   1f0cc:	f002 bb8b 	b.w	217e6 <memcpy>
   1f0d0:	20000000 	.word	0x20000000
   1f0d4:	200008d4 	.word	0x200008d4
   1f0d8:	00028ac8 	.word	0x00028ac8
   1f0dc:	00000000 	.word	0x00000000
   1f0e0:	00028ac8 	.word	0x00028ac8
   1f0e4:	20000000 	.word	0x20000000

0001f0e8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   1f0e8:	4b03      	ldr	r3, [pc, #12]	; (1f0f8 <elapsed+0x10>)
   1f0ea:	681b      	ldr	r3, [r3, #0]
   1f0ec:	b90b      	cbnz	r3, 1f0f2 <elapsed+0xa>
   1f0ee:	f7e7 b88f 	b.w	6210 <z_clock_elapsed>
}
   1f0f2:	2000      	movs	r0, #0
   1f0f4:	4770      	bx	lr
   1f0f6:	bf00      	nop
   1f0f8:	20002990 	.word	0x20002990

0001f0fc <remove_timeout>:
{
   1f0fc:	b530      	push	{r4, r5, lr}
   1f0fe:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1f100:	b168      	cbz	r0, 1f11e <remove_timeout+0x22>
   1f102:	4a0a      	ldr	r2, [pc, #40]	; (1f12c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1f104:	6852      	ldr	r2, [r2, #4]
   1f106:	4290      	cmp	r0, r2
   1f108:	d009      	beq.n	1f11e <remove_timeout+0x22>
	if (next(t) != NULL) {
   1f10a:	b143      	cbz	r3, 1f11e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1f10c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1f110:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1f114:	1912      	adds	r2, r2, r4
   1f116:	eb45 0101 	adc.w	r1, r5, r1
   1f11a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1f11e:	6842      	ldr	r2, [r0, #4]
   1f120:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1f122:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f124:	2300      	movs	r3, #0
	node->prev = NULL;
   1f126:	e9c0 3300 	strd	r3, r3, [r0]
}
   1f12a:	bd30      	pop	{r4, r5, pc}
   1f12c:	200005c0 	.word	0x200005c0

0001f130 <next_timeout>:

static int32_t next_timeout(void)
{
   1f130:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1f132:	4b13      	ldr	r3, [pc, #76]	; (1f180 <next_timeout+0x50>)
   1f134:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f136:	429c      	cmp	r4, r3
   1f138:	bf08      	it	eq
   1f13a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1f13c:	f7ff ffd4 	bl	1f0e8 <elapsed>
   1f140:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1f142:	b1bc      	cbz	r4, 1f174 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1f144:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1f148:	1b40      	subs	r0, r0, r5
   1f14a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1f14e:	2801      	cmp	r0, #1
   1f150:	f171 0300 	sbcs.w	r3, r1, #0
   1f154:	db11      	blt.n	1f17a <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1f156:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1f15a:	2300      	movs	r3, #0
   1f15c:	4282      	cmp	r2, r0
   1f15e:	eb73 0401 	sbcs.w	r4, r3, r1
   1f162:	da00      	bge.n	1f166 <next_timeout+0x36>
   1f164:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1f166:	4b07      	ldr	r3, [pc, #28]	; (1f184 <next_timeout+0x54>)
   1f168:	695b      	ldr	r3, [r3, #20]
   1f16a:	b113      	cbz	r3, 1f172 <next_timeout+0x42>
   1f16c:	4298      	cmp	r0, r3
   1f16e:	bfa8      	it	ge
   1f170:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1f172:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1f174:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1f178:	e7f5      	b.n	1f166 <next_timeout+0x36>
   1f17a:	2000      	movs	r0, #0
   1f17c:	e7f3      	b.n	1f166 <next_timeout+0x36>
   1f17e:	bf00      	nop
   1f180:	200005c0 	.word	0x200005c0
   1f184:	20002950 	.word	0x20002950

0001f188 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1f188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f18c:	9101      	str	r1, [sp, #4]
   1f18e:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f190:	1c4b      	adds	r3, r1, #1
   1f192:	bf08      	it	eq
   1f194:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1f198:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f19a:	d06c      	beq.n	1f276 <z_add_timeout+0xee>
#endif

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
   1f19c:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1f19e:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
   1f1a2:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1f1a6:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1f1aa:	ebb3 0804 	subs.w	r8, r3, r4
   1f1ae:	eb6b 0905 	sbc.w	r9, fp, r5
   1f1b2:	f1b8 0f00 	cmp.w	r8, #0
   1f1b6:	f179 0300 	sbcs.w	r3, r9, #0
   1f1ba:	db0f      	blt.n	1f1dc <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1f1bc:	f7ff ff94 	bl	1f0e8 <elapsed>
   1f1c0:	4a33      	ldr	r2, [pc, #204]	; (1f290 <z_add_timeout+0x108>)
   1f1c2:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1f1c6:	f06f 0301 	mvn.w	r3, #1
   1f1ca:	1a5b      	subs	r3, r3, r1
   1f1cc:	eb6b 020c 	sbc.w	r2, fp, ip
   1f1d0:	1b1e      	subs	r6, r3, r4
   1f1d2:	eb62 0705 	sbc.w	r7, r2, r5
   1f1d6:	1a34      	subs	r4, r6, r0
   1f1d8:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1f1dc:	9b01      	ldr	r3, [sp, #4]
   1f1de:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   1f1e2:	f04f 0320 	mov.w	r3, #32
   1f1e6:	f3ef 8611 	mrs	r6, BASEPRI
   1f1ea:	f383 8811 	msr	BASEPRI, r3
   1f1ee:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1f1f2:	f7ff ff79 	bl	1f0e8 <elapsed>
	ticks = MAX(1, ticks);
   1f1f6:	2c01      	cmp	r4, #1
   1f1f8:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
   1f1fc:	4b25      	ldr	r3, [pc, #148]	; (1f294 <z_add_timeout+0x10c>)
   1f1fe:	bfb8      	it	lt
   1f200:	2401      	movlt	r4, #1
   1f202:	681a      	ldr	r2, [r3, #0]
   1f204:	bfb8      	it	lt
   1f206:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
   1f208:	1824      	adds	r4, r4, r0
   1f20a:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f20e:	429a      	cmp	r2, r3
   1f210:	e9ca 4504 	strd	r4, r5, [sl, #16]
   1f214:	d001      	beq.n	1f21a <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1f216:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1f218:	b952      	cbnz	r2, 1f230 <z_add_timeout+0xa8>
	node->prev = list->tail;
   1f21a:	685a      	ldr	r2, [r3, #4]
   1f21c:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   1f220:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1f222:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   1f226:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1f22a:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1f22e:	e014      	b.n	1f25a <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
   1f230:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   1f234:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1f238:	4544      	cmp	r4, r8
   1f23a:	eb75 0109 	sbcs.w	r1, r5, r9
   1f23e:	da1d      	bge.n	1f27c <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
   1f240:	ebb8 0004 	subs.w	r0, r8, r4
   1f244:	eb69 0105 	sbc.w	r1, r9, r5
   1f248:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   1f24c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1f24e:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   1f252:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1f256:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   1f25a:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f25c:	429a      	cmp	r2, r3
   1f25e:	d006      	beq.n	1f26e <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1f260:	4592      	cmp	sl, r2
   1f262:	d104      	bne.n	1f26e <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
   1f264:	f7ff ff64 	bl	1f130 <next_timeout>
   1f268:	2100      	movs	r1, #0
   1f26a:	f7e6 ff9b 	bl	61a4 <z_clock_set_timeout>
	__asm__ volatile(
   1f26e:	f386 8811 	msr	BASEPRI, r6
   1f272:	f3bf 8f6f 	isb	sy
		}
	}
}
   1f276:	b003      	add	sp, #12
   1f278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1f27c:	ebb4 0008 	subs.w	r0, r4, r8
   1f280:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   1f284:	42ba      	cmp	r2, r7
   1f286:	e9ca 0104 	strd	r0, r1, [sl, #16]
   1f28a:	d0c6      	beq.n	1f21a <z_add_timeout+0x92>
   1f28c:	6812      	ldr	r2, [r2, #0]
   1f28e:	e7c3      	b.n	1f218 <z_add_timeout+0x90>
   1f290:	20001180 	.word	0x20001180
   1f294:	200005c0 	.word	0x200005c0

0001f298 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   1f298:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f29c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1f29e:	f7ff fb2f 	bl	1e900 <z_time_slice>
	__asm__ volatile(
   1f2a2:	f04f 0320 	mov.w	r3, #32
   1f2a6:	f3ef 8411 	mrs	r4, BASEPRI
   1f2aa:	f383 8811 	msr	BASEPRI, r3
   1f2ae:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1f2b2:	4d2c      	ldr	r5, [pc, #176]	; (1f364 <z_clock_announce+0xcc>)
   1f2b4:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1f368 <z_clock_announce+0xd0>
	return list->head == list;
   1f2b8:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1f36c <z_clock_announce+0xd4>
   1f2bc:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1f2be:	4651      	mov	r1, sl
   1f2c0:	f8d5 c000 	ldr.w	ip, [r5]
   1f2c4:	f8db 0000 	ldr.w	r0, [fp]
   1f2c8:	4662      	mov	r2, ip
   1f2ca:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f2cc:	4558      	cmp	r0, fp
   1f2ce:	e9da 8900 	ldrd	r8, r9, [sl]
   1f2d2:	e9cd 2300 	strd	r2, r3, [sp]
   1f2d6:	d00d      	beq.n	1f2f4 <z_clock_announce+0x5c>
   1f2d8:	b160      	cbz	r0, 1f2f4 <z_clock_announce+0x5c>
   1f2da:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1f2de:	45b4      	cmp	ip, r6
   1f2e0:	41bb      	sbcs	r3, r7
   1f2e2:	da1e      	bge.n	1f322 <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1f2e4:	9b00      	ldr	r3, [sp, #0]
   1f2e6:	ebb6 0c03 	subs.w	ip, r6, r3
   1f2ea:	9b01      	ldr	r3, [sp, #4]
   1f2ec:	eb67 0603 	sbc.w	r6, r7, r3
   1f2f0:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1f2f4:	9b00      	ldr	r3, [sp, #0]
   1f2f6:	eb13 0208 	adds.w	r2, r3, r8
   1f2fa:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1f2fc:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1f300:	eb43 0309 	adc.w	r3, r3, r9
   1f304:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1f308:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   1f30a:	f7ff ff11 	bl	1f130 <next_timeout>
   1f30e:	4631      	mov	r1, r6
   1f310:	f7e6 ff48 	bl	61a4 <z_clock_set_timeout>
	__asm__ volatile(
   1f314:	f384 8811 	msr	BASEPRI, r4
   1f318:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1f31c:	b003      	add	sp, #12
   1f31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1f322:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1f326:	f04f 0200 	mov.w	r2, #0
   1f32a:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1f32e:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1f332:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1f336:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1f33a:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1f33e:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1f340:	f7ff fedc 	bl	1f0fc <remove_timeout>
   1f344:	f384 8811 	msr	BASEPRI, r4
   1f348:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1f34c:	6883      	ldr	r3, [r0, #8]
   1f34e:	4798      	blx	r3
	__asm__ volatile(
   1f350:	f04f 0320 	mov.w	r3, #32
   1f354:	f3ef 8411 	mrs	r4, BASEPRI
   1f358:	f383 8811 	msr	BASEPRI, r3
   1f35c:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1f360:	4901      	ldr	r1, [pc, #4]	; (1f368 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1f362:	e7ad      	b.n	1f2c0 <z_clock_announce+0x28>
   1f364:	20002990 	.word	0x20002990
   1f368:	20001180 	.word	0x20001180
   1f36c:	200005c0 	.word	0x200005c0

0001f370 <z_tick_get>:

int64_t z_tick_get(void)
{
   1f370:	b510      	push	{r4, lr}
   1f372:	f04f 0320 	mov.w	r3, #32
   1f376:	f3ef 8411 	mrs	r4, BASEPRI
   1f37a:	f383 8811 	msr	BASEPRI, r3
   1f37e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1f382:	f7e6 ff45 	bl	6210 <z_clock_elapsed>
   1f386:	4b06      	ldr	r3, [pc, #24]	; (1f3a0 <z_tick_get+0x30>)
   1f388:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f38c:	1812      	adds	r2, r2, r0
   1f38e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1f392:	f384 8811 	msr	BASEPRI, r4
   1f396:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1f39a:	4610      	mov	r0, r2
   1f39c:	4619      	mov	r1, r3
   1f39e:	bd10      	pop	{r4, pc}
   1f3a0:	20001180 	.word	0x20001180

0001f3a4 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1f3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1f3a6:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1f3aa:	1c56      	adds	r6, r2, #1
   1f3ac:	f143 0700 	adc.w	r7, r3, #0
   1f3b0:	2f00      	cmp	r7, #0
   1f3b2:	bf08      	it	eq
   1f3b4:	2e02      	cmpeq	r6, #2
{
   1f3b6:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1f3b8:	d302      	bcc.n	1f3c0 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1f3ba:	490c      	ldr	r1, [pc, #48]	; (1f3ec <z_timer_expiration_handler+0x48>)
   1f3bc:	f7ff fee4 	bl	1f188 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1f3c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f3c2:	3301      	adds	r3, #1
   1f3c4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1f3c6:	6a23      	ldr	r3, [r4, #32]
   1f3c8:	b10b      	cbz	r3, 1f3ce <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1f3ca:	4620      	mov	r0, r4
   1f3cc:	4798      	blx	r3
	return list->head == list;
   1f3ce:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f3d2:	42a5      	cmp	r5, r4
   1f3d4:	d009      	beq.n	1f3ea <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1f3d6:	b145      	cbz	r5, 1f3ea <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1f3d8:	4628      	mov	r0, r5
   1f3da:	f005 f955 	bl	24688 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   1f3de:	4628      	mov	r0, r5
   1f3e0:	f005 f9a4 	bl	2472c <z_ready_thread>
   1f3e4:	2300      	movs	r3, #0
   1f3e6:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
   1f3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f3ec:	0001f3a5 	.word	0x0001f3a5

0001f3f0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1f3f0:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1f3f4:	4619      	mov	r1, r3
   1f3f6:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1f3f8:	1c4c      	adds	r4, r1, #1
{
   1f3fa:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1f3fc:	bf08      	it	eq
   1f3fe:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1f402:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1f406:	4680      	mov	r8, r0
   1f408:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1f40a:	d047      	beq.n	1f49c <z_impl_k_timer_start+0xac>
   1f40c:	4614      	mov	r4, r2
   1f40e:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   1f410:	ea54 0305 	orrs.w	r3, r4, r5
   1f414:	d016      	beq.n	1f444 <z_impl_k_timer_start+0x54>
   1f416:	f06f 0301 	mvn.w	r3, #1
   1f41a:	ebb3 0a02 	subs.w	sl, r3, r2
   1f41e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f422:	eb63 0b05 	sbc.w	fp, r3, r5
   1f426:	f1ba 0f00 	cmp.w	sl, #0
   1f42a:	f17b 0300 	sbcs.w	r3, fp, #0
   1f42e:	da09      	bge.n	1f444 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   1f430:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   1f434:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   1f438:	2c01      	cmp	r4, #1
   1f43a:	f175 0300 	sbcs.w	r3, r5, #0
   1f43e:	bfbc      	itt	lt
   1f440:	2401      	movlt	r4, #1
   1f442:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1f444:	f06f 0301 	mvn.w	r3, #1
   1f448:	1a1b      	subs	r3, r3, r0
   1f44a:	9300      	str	r3, [sp, #0]
   1f44c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f450:	eb63 0301 	sbc.w	r3, r3, r1
   1f454:	9301      	str	r3, [sp, #4]
   1f456:	e9dd 2300 	ldrd	r2, r3, [sp]
   1f45a:	2a00      	cmp	r2, #0
   1f45c:	f173 0300 	sbcs.w	r3, r3, #0
   1f460:	da0c      	bge.n	1f47c <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1f462:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   1f466:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   1f46a:	f1b8 0f00 	cmp.w	r8, #0
   1f46e:	f179 0300 	sbcs.w	r3, r9, #0
   1f472:	bfbc      	itt	lt
   1f474:	f04f 0800 	movlt.w	r8, #0
   1f478:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   1f47c:	4630      	mov	r0, r6
   1f47e:	f005 fa7c 	bl	2497a <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1f482:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1f484:	4907      	ldr	r1, [pc, #28]	; (1f4a4 <z_impl_k_timer_start+0xb4>)
	timer->status = 0U;
   1f486:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1f488:	4642      	mov	r2, r8
   1f48a:	464b      	mov	r3, r9
   1f48c:	4630      	mov	r0, r6
	timer->period = period;
   1f48e:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1f492:	b002      	add	sp, #8
   1f494:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1f498:	f7ff be76 	b.w	1f188 <z_add_timeout>
}
   1f49c:	b002      	add	sp, #8
   1f49e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1f4a2:	bf00      	nop
   1f4a4:	0001f3a5 	.word	0x0001f3a5

0001f4a8 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1f4a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1f4ac:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1f4ae:	4b2a      	ldr	r3, [pc, #168]	; (1f558 <z_impl_k_poll+0xb0>)
   1f4b0:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1f4b2:	2301      	movs	r3, #1
   1f4b4:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
   1f4b8:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   1f4bc:	ea52 0307 	orrs.w	r3, r2, r7
{
   1f4c0:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1f4c2:	bf0c      	ite	eq
   1f4c4:	2301      	moveq	r3, #1
   1f4c6:	2300      	movne	r3, #0
   1f4c8:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
   1f4cc:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1f4ce:	f005 fbc5 	bl	24c5c <register_events>
   1f4d2:	4681      	mov	r9, r0
	__asm__ volatile(
   1f4d4:	f04f 0320 	mov.w	r3, #32
   1f4d8:	f3ef 8a11 	mrs	sl, BASEPRI
   1f4dc:	f383 8811 	msr	BASEPRI, r3
   1f4e0:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1f4e4:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
   1f4e8:	b964      	cbnz	r4, 1f504 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1f4ea:	4601      	mov	r1, r0
   1f4ec:	4652      	mov	r2, sl
   1f4ee:	4640      	mov	r0, r8
   1f4f0:	f005 fae0 	bl	24ab4 <clear_event_registrations>
	__asm__ volatile(
   1f4f4:	f38a 8811 	msr	BASEPRI, sl
   1f4f8:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1f4fc:	4620      	mov	r0, r4
   1f4fe:	b004      	add	sp, #16
   1f500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1f504:	2300      	movs	r3, #0
   1f506:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f50a:	ea56 0307 	orrs.w	r3, r6, r7
   1f50e:	d106      	bne.n	1f51e <z_impl_k_poll+0x76>
   1f510:	f38a 8811 	msr	BASEPRI, sl
   1f514:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1f518:	f06f 040a 	mvn.w	r4, #10
   1f51c:	e7ee      	b.n	1f4fc <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1f51e:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1f520:	e9cd 6700 	strd	r6, r7, [sp]
   1f524:	4651      	mov	r1, sl
   1f526:	480d      	ldr	r0, [pc, #52]	; (1f55c <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1f528:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1f52c:	f7ff fb20 	bl	1eb70 <z_pend_curr>
   1f530:	4604      	mov	r4, r0
	__asm__ volatile(
   1f532:	f04f 0320 	mov.w	r3, #32
   1f536:	f3ef 8511 	mrs	r5, BASEPRI
   1f53a:	f383 8811 	msr	BASEPRI, r3
   1f53e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1f542:	462a      	mov	r2, r5
   1f544:	4649      	mov	r1, r9
   1f546:	4640      	mov	r0, r8
   1f548:	f005 fab4 	bl	24ab4 <clear_event_registrations>
	__asm__ volatile(
   1f54c:	f385 8811 	msr	BASEPRI, r5
   1f550:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1f554:	e7d2      	b.n	1f4fc <z_impl_k_poll+0x54>
   1f556:	bf00      	nop
   1f558:	20002950 	.word	0x20002950
   1f55c:	2000309e 	.word	0x2000309e

0001f560 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1f560:	b538      	push	{r3, r4, r5, lr}
   1f562:	4603      	mov	r3, r0
	__asm__ volatile(
   1f564:	f04f 0220 	mov.w	r2, #32
   1f568:	f3ef 8511 	mrs	r5, BASEPRI
   1f56c:	f382 8811 	msr	BASEPRI, r2
   1f570:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1f574:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   1f576:	2101      	movs	r1, #1
   1f578:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1f57a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1f57c:	4283      	cmp	r3, r0
   1f57e:	d106      	bne.n	1f58e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1f580:	f385 8811 	msr	BASEPRI, r5
   1f584:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1f588:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1f58a:	4620      	mov	r0, r4
   1f58c:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1f58e:	e9d0 3200 	ldrd	r3, r2, [r0]
   1f592:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1f594:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f596:	2300      	movs	r3, #0
	node->prev = NULL;
   1f598:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1f59c:	f005 facd 	bl	24b3a <signal_poll_event>
	z_reschedule(&lock, key);
   1f5a0:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1f5a2:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1f5a4:	4801      	ldr	r0, [pc, #4]	; (1f5ac <z_impl_k_poll_signal_raise+0x4c>)
   1f5a6:	f7ff f89b 	bl	1e6e0 <z_reschedule>
	return rc;
   1f5aa:	e7ee      	b.n	1f58a <z_impl_k_poll_signal_raise+0x2a>
   1f5ac:	2000309e 	.word	0x2000309e

0001f5b0 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   1f5b0:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   1f5b2:	4801      	ldr	r0, [pc, #4]	; (1f5b8 <k_malloc+0x8>)
   1f5b4:	f005 bbd0 	b.w	24d58 <k_mem_pool_malloc>
   1f5b8:	200005c8 	.word	0x200005c8

0001f5bc <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   1f5bc:	b510      	push	{r4, lr}
   1f5be:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1f5c0:	f005 f954 	bl	2486c <k_is_in_isr>
   1f5c4:	b948      	cbnz	r0, 1f5da <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1f5c6:	4b06      	ldr	r3, [pc, #24]	; (1f5e0 <z_thread_malloc+0x24>)
   1f5c8:	689b      	ldr	r3, [r3, #8]
   1f5ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	}

	if (pool) {
   1f5cc:	b13b      	cbz	r3, 1f5de <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   1f5ce:	4621      	mov	r1, r4
   1f5d0:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1f5d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   1f5d6:	f005 bbbf 	b.w	24d58 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   1f5da:	4b02      	ldr	r3, [pc, #8]	; (1f5e4 <z_thread_malloc+0x28>)
   1f5dc:	e7f7      	b.n	1f5ce <z_thread_malloc+0x12>
}
   1f5de:	bd10      	pop	{r4, pc}
   1f5e0:	20002950 	.word	0x20002950
   1f5e4:	200005c8 	.word	0x200005c8

0001f5e8 <read_value>:
						 , void *buf, uint16_t len, uint16_t offset) {
   1f5e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data, sizeof(value));
   1f5ea:	2406      	movs	r4, #6
   1f5ec:	9402      	str	r4, [sp, #8]
   1f5ee:	68cc      	ldr	r4, [r1, #12]
   1f5f0:	9401      	str	r4, [sp, #4]
   1f5f2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   1f5f6:	9400      	str	r4, [sp, #0]
   1f5f8:	f003 fc84 	bl	22f04 <bt_gatt_attr_read>
}
   1f5fc:	b004      	add	sp, #16
   1f5fe:	bd10      	pop	{r4, pc}

0001f600 <new_remote_device>:
                                       , uint8_t* characteristic) {
   1f600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f602:	4607      	mov	r7, r0
    struct remote_device* device = (struct remote_device*) k_malloc(sizeof(struct remote_device));
   1f604:	2038      	movs	r0, #56	; 0x38
                                       , uint8_t* characteristic) {
   1f606:	460e      	mov	r6, r1
   1f608:	4615      	mov	r5, r2
    struct remote_device* device = (struct remote_device*) k_malloc(sizeof(struct remote_device));
   1f60a:	f7ff ffd1 	bl	1f5b0 <k_malloc>
   1f60e:	4604      	mov	r4, r0
    device->uuid           = (struct bt_uuid*) k_malloc(sizeof(struct bt_uuid_16));
   1f610:	2004      	movs	r0, #4
   1f612:	f7ff ffcd 	bl	1f5b0 <k_malloc>
   1f616:	6020      	str	r0, [r4, #0]
    device->service        = (struct bt_uuid*) k_malloc(sizeof(struct bt_uuid_16));
   1f618:	2004      	movs	r0, #4
   1f61a:	f7ff ffc9 	bl	1f5b0 <k_malloc>
   1f61e:	6060      	str	r0, [r4, #4]
    device->characteristic = (struct bt_uuid*) k_malloc(sizeof(struct bt_uuid_16));
   1f620:	2004      	movs	r0, #4
   1f622:	f7ff ffc5 	bl	1f5b0 <k_malloc>
    bt_uuid_create(device->uuid          , uuid,           2);
   1f626:	4639      	mov	r1, r7
    device->characteristic = (struct bt_uuid*) k_malloc(sizeof(struct bt_uuid_16));
   1f628:	60a0      	str	r0, [r4, #8]
    bt_uuid_create(device->uuid          , uuid,           2);
   1f62a:	2202      	movs	r2, #2
   1f62c:	6820      	ldr	r0, [r4, #0]
   1f62e:	f002 f9d3 	bl	219d8 <bt_uuid_create>
    bt_uuid_create(device->service       , service,        2);
   1f632:	4631      	mov	r1, r6
   1f634:	6860      	ldr	r0, [r4, #4]
   1f636:	2202      	movs	r2, #2
   1f638:	f002 f9ce 	bl	219d8 <bt_uuid_create>
    bt_uuid_create(device->characteristic, characteristic, 2);
   1f63c:	68a0      	ldr	r0, [r4, #8]
   1f63e:	2202      	movs	r2, #2
   1f640:	4629      	mov	r1, r5
   1f642:	f002 f9c9 	bl	219d8 <bt_uuid_create>
    device->handle.offset = 0U;
   1f646:	2300      	movs	r3, #0
   1f648:	8263      	strh	r3, [r4, #18]
}
   1f64a:	4620      	mov	r0, r4
   1f64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f64e <set_handle>:
    device->handle.handle = handle;
   1f64e:	8208      	strh	r0, [r1, #16]
}
   1f650:	4770      	bx	lr

0001f652 <set_message_payload>:
    device->handle.data   = data;
   1f652:	6150      	str	r0, [r2, #20]
    device->handle.length = len;
   1f654:	8311      	strh	r1, [r2, #24]
}
   1f656:	4770      	bx	lr

0001f658 <set_addr>:
void set_addr(bt_addr_le_t addr, struct remote_device* device) {
   1f658:	b082      	sub	sp, #8
   1f65a:	466b      	mov	r3, sp
   1f65c:	e883 0003 	stmia.w	r3, {r0, r1}
    device->address = addr;
   1f660:	e893 0003 	ldmia.w	r3, {r0, r1}
   1f664:	8411      	strh	r1, [r2, #32]
   1f666:	0c09      	lsrs	r1, r1, #16
   1f668:	61d0      	str	r0, [r2, #28]
   1f66a:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
}
   1f66e:	b002      	add	sp, #8
   1f670:	4770      	bx	lr

0001f672 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1f672:	4603      	mov	r3, r0
   1f674:	b140      	cbz	r0, 1f688 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f676:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f678:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1f67c:	2a02      	cmp	r2, #2
   1f67e:	d006      	beq.n	1f68e <sys_notify_validate+0x1c>
   1f680:	2a03      	cmp	r2, #3
   1f682:	d004      	beq.n	1f68e <sys_notify_validate+0x1c>
   1f684:	2a01      	cmp	r2, #1
   1f686:	d005      	beq.n	1f694 <sys_notify_validate+0x22>
		return -EINVAL;
   1f688:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1f68c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1f68e:	681a      	ldr	r2, [r3, #0]
   1f690:	2a00      	cmp	r2, #0
   1f692:	d0f9      	beq.n	1f688 <sys_notify_validate+0x16>
		notify->result = 0;
   1f694:	2000      	movs	r0, #0
   1f696:	6098      	str	r0, [r3, #8]
   1f698:	4770      	bx	lr

0001f69a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f69a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f69c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1f6a0:	2a02      	cmp	r2, #2
{
   1f6a2:	b510      	push	{r4, lr}
   1f6a4:	4603      	mov	r3, r0
	notify->result = res;
   1f6a6:	6081      	str	r1, [r0, #8]
	switch (method) {
   1f6a8:	d00a      	beq.n	1f6c0 <sys_notify_finalize+0x26>
   1f6aa:	2a03      	cmp	r2, #3
   1f6ac:	d10b      	bne.n	1f6c6 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1f6ae:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1f6b0:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1f6b2:	2200      	movs	r2, #0
   1f6b4:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1f6b6:	b108      	cbz	r0, 1f6bc <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   1f6b8:	f7ff ff52 	bl	1f560 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1f6bc:	4620      	mov	r0, r4
   1f6be:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1f6c0:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   1f6c2:	2400      	movs	r4, #0
		break;
   1f6c4:	e7f5      	b.n	1f6b2 <sys_notify_finalize+0x18>
	switch (method) {
   1f6c6:	2400      	movs	r4, #0
   1f6c8:	4620      	mov	r0, r4
   1f6ca:	e7f2      	b.n	1f6b2 <sys_notify_finalize+0x18>

0001f6cc <arch_printk_char_out>:
}
   1f6cc:	2000      	movs	r0, #0
   1f6ce:	4770      	bx	lr

0001f6d0 <str_out>:
{
   1f6d0:	b530      	push	{r4, r5, lr}
   1f6d2:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1f6d4:	680c      	ldr	r4, [r1, #0]
   1f6d6:	1c55      	adds	r5, r2, #1
   1f6d8:	b114      	cbz	r4, 1f6e0 <str_out+0x10>
   1f6da:	684b      	ldr	r3, [r1, #4]
   1f6dc:	4293      	cmp	r3, r2
   1f6de:	dc01      	bgt.n	1f6e4 <str_out+0x14>
		ctx->count++;
   1f6e0:	608d      	str	r5, [r1, #8]
}
   1f6e2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1f6e4:	3b01      	subs	r3, #1
   1f6e6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1f6e8:	bf08      	it	eq
   1f6ea:	2200      	moveq	r2, #0
   1f6ec:	608d      	str	r5, [r1, #8]
   1f6ee:	bf0c      	ite	eq
   1f6f0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1f6f2:	54a0      	strbne	r0, [r4, r2]
   1f6f4:	e7f5      	b.n	1f6e2 <str_out+0x12>

0001f6f6 <printk>:
{
   1f6f6:	b40f      	push	{r0, r1, r2, r3}
   1f6f8:	b507      	push	{r0, r1, r2, lr}
   1f6fa:	a904      	add	r1, sp, #16
   1f6fc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1f700:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1f702:	f7e5 f88b 	bl	481c <vprintk>
}
   1f706:	b003      	add	sp, #12
   1f708:	f85d eb04 	ldr.w	lr, [sp], #4
   1f70c:	b004      	add	sp, #16
   1f70e:	4770      	bx	lr

0001f710 <snprintk>:
{
   1f710:	b40c      	push	{r2, r3}
   1f712:	b507      	push	{r0, r1, r2, lr}
   1f714:	ab04      	add	r3, sp, #16
   1f716:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1f71a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1f71c:	f7e5 f88c 	bl	4838 <vsnprintk>
}
   1f720:	b003      	add	sp, #12
   1f722:	f85d eb04 	ldr.w	lr, [sp], #4
   1f726:	b002      	add	sp, #8
   1f728:	4770      	bx	lr

0001f72a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f72a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1f72c:	f013 0307 	ands.w	r3, r3, #7
   1f730:	d105      	bne.n	1f73e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1f732:	6803      	ldr	r3, [r0, #0]
   1f734:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1f736:	bf0c      	ite	eq
   1f738:	2000      	moveq	r0, #0
   1f73a:	2003      	movne	r0, #3
   1f73c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1f73e:	2b02      	cmp	r3, #2
   1f740:	d105      	bne.n	1f74e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1f742:	8b43      	ldrh	r3, [r0, #26]
   1f744:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1f746:	bf14      	ite	ne
   1f748:	2000      	movne	r0, #0
   1f74a:	2004      	moveq	r0, #4
   1f74c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1f74e:	2b01      	cmp	r3, #1
   1f750:	d105      	bne.n	1f75e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1f752:	6803      	ldr	r3, [r0, #0]
   1f754:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1f756:	bf0c      	ite	eq
   1f758:	2000      	moveq	r0, #0
   1f75a:	2005      	movne	r0, #5
   1f75c:	4770      	bx	lr
	int evt = EVT_NOP;
   1f75e:	2000      	movs	r0, #0
}
   1f760:	4770      	bx	lr

0001f762 <notify_one>:
{
   1f762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f766:	460d      	mov	r5, r1
   1f768:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1f76a:	4619      	mov	r1, r3
   1f76c:	1d28      	adds	r0, r5, #4
{
   1f76e:	4690      	mov	r8, r2
   1f770:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1f772:	f7ff ff92 	bl	1f69a <sys_notify_finalize>
	if (cb) {
   1f776:	4604      	mov	r4, r0
   1f778:	b138      	cbz	r0, 1f78a <notify_one+0x28>
		cb(mgr, cli, state, res);
   1f77a:	4633      	mov	r3, r6
   1f77c:	4642      	mov	r2, r8
   1f77e:	4629      	mov	r1, r5
   1f780:	4638      	mov	r0, r7
   1f782:	46a4      	mov	ip, r4
}
   1f784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1f788:	4760      	bx	ip
}
   1f78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f78e <transition_complete>:
{
   1f78e:	b410      	push	{r4}
	__asm__ volatile(
   1f790:	f04f 0420 	mov.w	r4, #32
   1f794:	f3ef 8211 	mrs	r2, BASEPRI
   1f798:	f384 8811 	msr	BASEPRI, r4
   1f79c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1f7a0:	6141      	str	r1, [r0, #20]
}
   1f7a2:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1f7a4:	2101      	movs	r1, #1
   1f7a6:	f7e5 b85b 	b.w	4860 <process_event>

0001f7aa <validate_args>:
{
   1f7aa:	b510      	push	{r4, lr}
   1f7ac:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1f7ae:	b140      	cbz	r0, 1f7c2 <validate_args+0x18>
   1f7b0:	b139      	cbz	r1, 1f7c2 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1f7b2:	1d08      	adds	r0, r1, #4
   1f7b4:	f7ff ff5d 	bl	1f672 <sys_notify_validate>
	if ((rv == 0)
   1f7b8:	b928      	cbnz	r0, 1f7c6 <validate_args+0x1c>
	    && ((cli->notify.flags
   1f7ba:	68a3      	ldr	r3, [r4, #8]
   1f7bc:	f033 0303 	bics.w	r3, r3, #3
   1f7c0:	d001      	beq.n	1f7c6 <validate_args+0x1c>
		rv = -EINVAL;
   1f7c2:	f06f 0015 	mvn.w	r0, #21
}
   1f7c6:	bd10      	pop	{r4, pc}

0001f7c8 <onoff_manager_init>:
{
   1f7c8:	b538      	push	{r3, r4, r5, lr}
   1f7ca:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1f7cc:	4605      	mov	r5, r0
   1f7ce:	b158      	cbz	r0, 1f7e8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1f7d0:	b151      	cbz	r1, 1f7e8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1f7d2:	680b      	ldr	r3, [r1, #0]
   1f7d4:	b143      	cbz	r3, 1f7e8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1f7d6:	684b      	ldr	r3, [r1, #4]
   1f7d8:	b133      	cbz	r3, 1f7e8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1f7da:	221c      	movs	r2, #28
   1f7dc:	2100      	movs	r1, #0
   1f7de:	f002 f82d 	bl	2183c <memset>
   1f7e2:	612c      	str	r4, [r5, #16]
	return 0;
   1f7e4:	2000      	movs	r0, #0
}
   1f7e6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1f7e8:	f06f 0015 	mvn.w	r0, #21
   1f7ec:	e7fb      	b.n	1f7e6 <onoff_manager_init+0x1e>

0001f7ee <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1f7ee:	b570      	push	{r4, r5, r6, lr}
   1f7f0:	4604      	mov	r4, r0
   1f7f2:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1f7f4:	f7ff ffd9 	bl	1f7aa <validate_args>

	if (rv < 0) {
   1f7f8:	1e05      	subs	r5, r0, #0
   1f7fa:	db31      	blt.n	1f860 <onoff_request+0x72>
   1f7fc:	f04f 0320 	mov.w	r3, #32
   1f800:	f3ef 8111 	mrs	r1, BASEPRI
   1f804:	f383 8811 	msr	BASEPRI, r3
   1f808:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f80c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f80e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f810:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1f814:	42ab      	cmp	r3, r5
   1f816:	f000 0207 	and.w	r2, r0, #7
   1f81a:	d02e      	beq.n	1f87a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1f81c:	2a02      	cmp	r2, #2
   1f81e:	d10e      	bne.n	1f83e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1f820:	3301      	adds	r3, #1
   1f822:	8363      	strh	r3, [r4, #26]
	rv = state;
   1f824:	4615      	mov	r5, r2
		notify = true;
   1f826:	2301      	movs	r3, #1
	__asm__ volatile(
   1f828:	f381 8811 	msr	BASEPRI, r1
   1f82c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1f830:	b1b3      	cbz	r3, 1f860 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1f832:	2300      	movs	r3, #0
   1f834:	4631      	mov	r1, r6
   1f836:	4620      	mov	r0, r4
   1f838:	f7ff ff93 	bl	1f762 <notify_one>
   1f83c:	e010      	b.n	1f860 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1f83e:	0783      	lsls	r3, r0, #30
   1f840:	d001      	beq.n	1f846 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1f842:	2a06      	cmp	r2, #6
   1f844:	d10e      	bne.n	1f864 <onoff_request+0x76>
	parent->next = child;
   1f846:	2300      	movs	r3, #0
   1f848:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1f84a:	6863      	ldr	r3, [r4, #4]
   1f84c:	b993      	cbnz	r3, 1f874 <onoff_request+0x86>
	list->head = node;
   1f84e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1f852:	4615      	mov	r5, r2
   1f854:	b962      	cbnz	r2, 1f870 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1f856:	460a      	mov	r2, r1
   1f858:	4620      	mov	r0, r4
   1f85a:	2102      	movs	r1, #2
   1f85c:	f7e5 f800 	bl	4860 <process_event>
		}
	}

	return rv;
}
   1f860:	4628      	mov	r0, r5
   1f862:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1f864:	2a05      	cmp	r2, #5
   1f866:	bf0c      	ite	eq
   1f868:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   1f86c:	f06f 0504 	mvnne.w	r5, #4
   1f870:	2300      	movs	r3, #0
   1f872:	e7d9      	b.n	1f828 <onoff_request+0x3a>
	parent->next = child;
   1f874:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1f876:	6066      	str	r6, [r4, #4]
}
   1f878:	e7eb      	b.n	1f852 <onoff_request+0x64>
		rv = -EAGAIN;
   1f87a:	f06f 050a 	mvn.w	r5, #10
   1f87e:	e7f7      	b.n	1f870 <onoff_request+0x82>

0001f880 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1f880:	4604      	mov	r4, r0
   1f882:	b508      	push	{r3, lr}
   1f884:	4608      	mov	r0, r1
   1f886:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1f888:	461a      	mov	r2, r3
   1f88a:	47a0      	blx	r4
	return z_impl_k_current_get();
   1f88c:	f7ff fa78 	bl	1ed80 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1f890:	f7e7 fafe 	bl	6e90 <z_impl_k_thread_abort>

0001f894 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1f894:	b510      	push	{r4, lr}
   1f896:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1f898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f89c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f8a0:	4620      	mov	r0, r4
   1f8a2:	f7fe feb5 	bl	1e610 <z_impl_k_queue_get>
   1f8a6:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1f8a8:	2800      	cmp	r0, #0
   1f8aa:	d0f5      	beq.n	1f898 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f8ac:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   1f8ae:	6842      	ldr	r2, [r0, #4]
   1f8b0:	f3bf 8f5b 	dmb	ish
   1f8b4:	e853 1f00 	ldrex	r1, [r3]
   1f8b8:	f021 0c01 	bic.w	ip, r1, #1
   1f8bc:	e843 ce00 	strex	lr, ip, [r3]
   1f8c0:	f1be 0f00 	cmp.w	lr, #0
   1f8c4:	d1f6      	bne.n	1f8b4 <z_work_q_main+0x20>
   1f8c6:	f3bf 8f5b 	dmb	ish
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1f8ca:	07cb      	lsls	r3, r1, #31
   1f8cc:	d500      	bpl.n	1f8d0 <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1f8ce:	4790      	blx	r2
	z_impl_k_yield();
   1f8d0:	f7ff f9ec 	bl	1ecac <z_impl_k_yield>
   1f8d4:	e7e0      	b.n	1f898 <z_work_q_main+0x4>

0001f8d6 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1f8d6:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1f8d8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1f8dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1f8e0:	bf2c      	ite	cs
   1f8e2:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1f8e6:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1f8ea:	4770      	bx	lr

0001f8ec <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1f8ec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1f8f0:	6880      	ldr	r0, [r0, #8]
   1f8f2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1f8f6:	bf2c      	ite	cs
   1f8f8:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1f8fc:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1f900:	4770      	bx	lr

0001f902 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1f902:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1f904:	2201      	movs	r2, #1
   1f906:	f7ff ffe6 	bl	1f8d6 <chunk_field>
}
   1f90a:	0840      	lsrs	r0, r0, #1
   1f90c:	bd08      	pop	{r3, pc}

0001f90e <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1f90e:	6883      	ldr	r3, [r0, #8]
   1f910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1f914:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1f918:	d308      	bcc.n	1f92c <set_chunk_used+0x1e>
		if (used) {
   1f91a:	684b      	ldr	r3, [r1, #4]
   1f91c:	b11a      	cbz	r2, 1f926 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f91e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1f922:	604b      	str	r3, [r1, #4]
   1f924:	4770      	bx	lr
   1f926:	f023 0301 	bic.w	r3, r3, #1
   1f92a:	e7fa      	b.n	1f922 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1f92c:	884b      	ldrh	r3, [r1, #2]
   1f92e:	b11a      	cbz	r2, 1f938 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f930:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1f934:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1f936:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1f938:	f023 0301 	bic.w	r3, r3, #1
   1f93c:	e7fa      	b.n	1f934 <set_chunk_used+0x26>

0001f93e <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1f93e:	0053      	lsls	r3, r2, #1
   1f940:	2201      	movs	r2, #1
   1f942:	f7ff bfd3 	b.w	1f8ec <chunk_set>

0001f946 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1f946:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1f948:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1f94a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1f94e:	bf2c      	ite	cs
   1f950:	2002      	movcs	r0, #2
   1f952:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1f954:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1f956:	fab0 f080 	clz	r0, r0
}
   1f95a:	f1c0 001f 	rsb	r0, r0, #31
   1f95e:	4770      	bx	lr

0001f960 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1f960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f964:	4616      	mov	r6, r2
   1f966:	4604      	mov	r4, r0
   1f968:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1f96a:	f7ff ffca 	bl	1f902 <chunk_size>
   1f96e:	4631      	mov	r1, r6
   1f970:	4605      	mov	r5, r0
   1f972:	4620      	mov	r0, r4
   1f974:	f7ff ffc5 	bl	1f902 <chunk_size>
   1f978:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   1f97a:	462a      	mov	r2, r5
   1f97c:	4639      	mov	r1, r7
   1f97e:	4620      	mov	r0, r4
   1f980:	f7ff ffdd 	bl	1f93e <set_chunk_size>
	return c + chunk_size(h, c);
   1f984:	4631      	mov	r1, r6
   1f986:	4620      	mov	r0, r4
   1f988:	f7ff ffbb 	bl	1f902 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1f98c:	462b      	mov	r3, r5
   1f98e:	1831      	adds	r1, r6, r0
   1f990:	2200      	movs	r2, #0
   1f992:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1f994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f998:	f7ff bfa8 	b.w	1f8ec <chunk_set>

0001f99c <split_chunks>:
{
   1f99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f9a0:	4614      	mov	r4, r2
   1f9a2:	4605      	mov	r5, r0
   1f9a4:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   1f9a6:	f7ff ffac 	bl	1f902 <chunk_size>
	size_t lsz = rc - lc;
   1f9aa:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1f9ae:	1b37      	subs	r7, r6, r4
   1f9b0:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1f9b2:	4642      	mov	r2, r8
   1f9b4:	4631      	mov	r1, r6
   1f9b6:	4628      	mov	r0, r5
   1f9b8:	f7ff ffc1 	bl	1f93e <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1f9bc:	463a      	mov	r2, r7
   1f9be:	4621      	mov	r1, r4
   1f9c0:	4628      	mov	r0, r5
   1f9c2:	f7ff ffbc 	bl	1f93e <set_chunk_size>
   1f9c6:	4643      	mov	r3, r8
   1f9c8:	2200      	movs	r2, #0
   1f9ca:	4621      	mov	r1, r4
   1f9cc:	4628      	mov	r0, r5
   1f9ce:	f7ff ff8d 	bl	1f8ec <chunk_set>
	return c + chunk_size(h, c);
   1f9d2:	4621      	mov	r1, r4
   1f9d4:	4628      	mov	r0, r5
   1f9d6:	f7ff ff94 	bl	1f902 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1f9da:	463b      	mov	r3, r7
   1f9dc:	1821      	adds	r1, r4, r0
   1f9de:	2200      	movs	r2, #0
   1f9e0:	4628      	mov	r0, r5
}
   1f9e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f9e6:	f7ff bf81 	b.w	1f8ec <chunk_set>

0001f9ea <free_list_remove_bidx>:
{
   1f9ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f9ee:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1f9f0:	2203      	movs	r2, #3
   1f9f2:	460e      	mov	r6, r1
   1f9f4:	4604      	mov	r4, r0
   1f9f6:	f7ff ff6e 	bl	1f8d6 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1f9fa:	4286      	cmp	r6, r0
   1f9fc:	4605      	mov	r5, r0
   1f9fe:	f107 0804 	add.w	r8, r7, #4
   1fa02:	d10b      	bne.n	1fa1c <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1fa04:	2301      	movs	r3, #1
   1fa06:	fa03 f707 	lsl.w	r7, r3, r7
   1fa0a:	68e3      	ldr	r3, [r4, #12]
   1fa0c:	ea23 0307 	bic.w	r3, r3, r7
   1fa10:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1fa12:	2300      	movs	r3, #0
   1fa14:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1fa18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1fa1c:	4631      	mov	r1, r6
   1fa1e:	2202      	movs	r2, #2
   1fa20:	4620      	mov	r0, r4
   1fa22:	f7ff ff58 	bl	1f8d6 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1fa26:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1fa28:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1fa2a:	4601      	mov	r1, r0
		b->next = second;
   1fa2c:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1fa30:	4620      	mov	r0, r4
   1fa32:	2203      	movs	r2, #3
   1fa34:	f7ff ff5a 	bl	1f8ec <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1fa38:	4633      	mov	r3, r6
   1fa3a:	4629      	mov	r1, r5
   1fa3c:	4620      	mov	r0, r4
   1fa3e:	2202      	movs	r2, #2
}
   1fa40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1fa44:	f7ff bf52 	b.w	1f8ec <chunk_set>

0001fa48 <free_list_remove>:
{
   1fa48:	b538      	push	{r3, r4, r5, lr}
   1fa4a:	4604      	mov	r4, r0
   1fa4c:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1fa4e:	f7ff ff58 	bl	1f902 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1fa52:	68a3      	ldr	r3, [r4, #8]
   1fa54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1fa58:	4601      	mov	r1, r0
   1fa5a:	d301      	bcc.n	1fa60 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1fa5c:	2801      	cmp	r0, #1
   1fa5e:	d009      	beq.n	1fa74 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1fa60:	4620      	mov	r0, r4
   1fa62:	f7ff ff70 	bl	1f946 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1fa66:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1fa68:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1fa6a:	4620      	mov	r0, r4
}
   1fa6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1fa70:	f7ff bfbb 	b.w	1f9ea <free_list_remove_bidx>
}
   1fa74:	bd38      	pop	{r3, r4, r5, pc}

0001fa76 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   1fa76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fa7a:	4604      	mov	r4, r0
   1fa7c:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1fa7e:	f7ff ff62 	bl	1f946 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   1fa82:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   1fa84:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1fa86:	4620      	mov	r0, r4
   1fa88:	f7ff ff5d 	bl	1f946 <bucket_idx>
   1fa8c:	42a8      	cmp	r0, r5
   1fa8e:	da03      	bge.n	1fa98 <alloc_chunk+0x22>
		return 0;
   1fa90:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1fa92:	4630      	mov	r0, r6
   1fa94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   1fa98:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   1fa9c:	f8da 9010 	ldr.w	r9, [sl, #16]
   1faa0:	f1b9 0f00 	cmp.w	r9, #0
   1faa4:	d019      	beq.n	1fada <alloc_chunk+0x64>
   1faa6:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1faa8:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1faac:	4620      	mov	r0, r4
   1faae:	4631      	mov	r1, r6
   1fab0:	f7ff ff27 	bl	1f902 <chunk_size>
   1fab4:	4540      	cmp	r0, r8
   1fab6:	d305      	bcc.n	1fac4 <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   1fab8:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1faba:	4631      	mov	r1, r6
   1fabc:	4620      	mov	r0, r4
   1fabe:	f7ff ff94 	bl	1f9ea <free_list_remove_bidx>
		return c;
   1fac2:	e7e6      	b.n	1fa92 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   1fac4:	2203      	movs	r2, #3
   1fac6:	4631      	mov	r1, r6
   1fac8:	4620      	mov	r0, r4
   1faca:	f7ff ff04 	bl	1f8d6 <chunk_field>
		} while (--i && b->next != first);
   1face:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1fad0:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1fad4:	d001      	beq.n	1fada <alloc_chunk+0x64>
   1fad6:	4581      	cmp	r9, r0
   1fad8:	d1e6      	bne.n	1faa8 <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1fada:	68e3      	ldr	r3, [r4, #12]
   1fadc:	3501      	adds	r5, #1
   1fade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fae2:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1fae4:	401a      	ands	r2, r3
   1fae6:	d0d3      	beq.n	1fa90 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1fae8:	fa92 f2a2 	rbit	r2, r2
   1faec:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1faf0:	1d13      	adds	r3, r2, #4
   1faf2:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1faf6:	e7e0      	b.n	1faba <alloc_chunk+0x44>

0001faf8 <free_list_add>:
{
   1faf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fafc:	4604      	mov	r4, r0
   1fafe:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1fb00:	f7ff feff 	bl	1f902 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1fb04:	68a3      	ldr	r3, [r4, #8]
   1fb06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1fb0a:	4601      	mov	r1, r0
   1fb0c:	d301      	bcc.n	1fb12 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1fb0e:	2801      	cmp	r0, #1
   1fb10:	d035      	beq.n	1fb7e <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1fb12:	4620      	mov	r0, r4
   1fb14:	f7ff ff17 	bl	1f946 <bucket_idx>
	if (b->next == 0U) {
   1fb18:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1fb1c:	6916      	ldr	r6, [r2, #16]
   1fb1e:	b99e      	cbnz	r6, 1fb48 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1fb20:	2301      	movs	r3, #1
   1fb22:	fa03 f000 	lsl.w	r0, r3, r0
   1fb26:	68e3      	ldr	r3, [r4, #12]
   1fb28:	4303      	orrs	r3, r0
   1fb2a:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1fb2c:	4629      	mov	r1, r5
		b->next = c;
   1fb2e:	6115      	str	r5, [r2, #16]
   1fb30:	462b      	mov	r3, r5
   1fb32:	2202      	movs	r2, #2
   1fb34:	4620      	mov	r0, r4
   1fb36:	f7ff fed9 	bl	1f8ec <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1fb3a:	2203      	movs	r2, #3
   1fb3c:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1fb3e:	4620      	mov	r0, r4
}
   1fb40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1fb44:	f7ff bed2 	b.w	1f8ec <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1fb48:	2202      	movs	r2, #2
   1fb4a:	4631      	mov	r1, r6
   1fb4c:	4620      	mov	r0, r4
   1fb4e:	f7ff fec2 	bl	1f8d6 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1fb52:	2202      	movs	r2, #2
   1fb54:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1fb56:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1fb58:	4629      	mov	r1, r5
   1fb5a:	4620      	mov	r0, r4
   1fb5c:	f7ff fec6 	bl	1f8ec <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1fb60:	4633      	mov	r3, r6
   1fb62:	2203      	movs	r2, #3
   1fb64:	4629      	mov	r1, r5
   1fb66:	4620      	mov	r0, r4
   1fb68:	f7ff fec0 	bl	1f8ec <chunk_set>
   1fb6c:	2203      	movs	r2, #3
   1fb6e:	4639      	mov	r1, r7
   1fb70:	462b      	mov	r3, r5
   1fb72:	4620      	mov	r0, r4
   1fb74:	f7ff feba 	bl	1f8ec <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1fb78:	2202      	movs	r2, #2
   1fb7a:	4631      	mov	r1, r6
   1fb7c:	e7df      	b.n	1fb3e <free_list_add+0x46>
   1fb7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fb82 <sys_heap_free>:
{
   1fb82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   1fb84:	2900      	cmp	r1, #0
   1fb86:	d04e      	beq.n	1fc26 <sys_heap_free+0xa4>
	struct z_heap *h = heap->heap;
   1fb88:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1fb8a:	68ab      	ldr	r3, [r5, #8]
   1fb8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1fb90:	bf2c      	ite	cs
   1fb92:	2408      	movcs	r4, #8
   1fb94:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fb96:	1b0c      	subs	r4, r1, r4
   1fb98:	1b64      	subs	r4, r4, r5
   1fb9a:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1fb9c:	2200      	movs	r2, #0
   1fb9e:	4621      	mov	r1, r4
   1fba0:	4628      	mov	r0, r5
   1fba2:	f7ff feb4 	bl	1f90e <set_chunk_used>
	return c + chunk_size(h, c);
   1fba6:	4621      	mov	r1, r4
   1fba8:	f7ff feab 	bl	1f902 <chunk_size>
   1fbac:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1fbae:	2201      	movs	r2, #1
   1fbb0:	4631      	mov	r1, r6
   1fbb2:	4628      	mov	r0, r5
   1fbb4:	f7ff fe8f 	bl	1f8d6 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1fbb8:	07c3      	lsls	r3, r0, #31
   1fbba:	d40c      	bmi.n	1fbd6 <sys_heap_free+0x54>
		free_list_remove(h, right_chunk(h, c));
   1fbbc:	4631      	mov	r1, r6
   1fbbe:	4628      	mov	r0, r5
   1fbc0:	f7ff ff42 	bl	1fa48 <free_list_remove>
	return c + chunk_size(h, c);
   1fbc4:	4621      	mov	r1, r4
   1fbc6:	4628      	mov	r0, r5
   1fbc8:	f7ff fe9b 	bl	1f902 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1fbcc:	4621      	mov	r1, r4
   1fbce:	1822      	adds	r2, r4, r0
   1fbd0:	4628      	mov	r0, r5
   1fbd2:	f7ff fec5 	bl	1f960 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1fbd6:	2200      	movs	r2, #0
   1fbd8:	4621      	mov	r1, r4
   1fbda:	4628      	mov	r0, r5
   1fbdc:	f7ff fe7b 	bl	1f8d6 <chunk_field>
   1fbe0:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1fbe2:	2201      	movs	r2, #1
   1fbe4:	4639      	mov	r1, r7
   1fbe6:	4628      	mov	r0, r5
   1fbe8:	f7ff fe75 	bl	1f8d6 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1fbec:	f010 0601 	ands.w	r6, r0, #1
   1fbf0:	d113      	bne.n	1fc1a <sys_heap_free+0x98>
		free_list_remove(h, left_chunk(h, c));
   1fbf2:	4639      	mov	r1, r7
   1fbf4:	4628      	mov	r0, r5
   1fbf6:	f7ff ff27 	bl	1fa48 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1fbfa:	4621      	mov	r1, r4
   1fbfc:	4632      	mov	r2, r6
   1fbfe:	4628      	mov	r0, r5
   1fc00:	f7ff fe69 	bl	1f8d6 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1fc04:	4622      	mov	r2, r4
   1fc06:	1a21      	subs	r1, r4, r0
   1fc08:	4628      	mov	r0, r5
   1fc0a:	f7ff fea9 	bl	1f960 <merge_chunks>
   1fc0e:	4621      	mov	r1, r4
   1fc10:	4632      	mov	r2, r6
   1fc12:	4628      	mov	r0, r5
   1fc14:	f7ff fe5f 	bl	1f8d6 <chunk_field>
   1fc18:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1fc1a:	4621      	mov	r1, r4
   1fc1c:	4628      	mov	r0, r5
}
   1fc1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1fc22:	f7ff bf69 	b.w	1faf8 <free_list_add>
}
   1fc26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fc28 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1fc28:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0U) {
   1fc2a:	b909      	cbnz	r1, 1fc30 <sys_heap_alloc+0x8>
		return NULL;
   1fc2c:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1fc2e:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   1fc30:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1fc32:	68ab      	ldr	r3, [r5, #8]
   1fc34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1fc38:	bf2c      	ite	cs
   1fc3a:	2208      	movcs	r2, #8
   1fc3c:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fc3e:	1dcc      	adds	r4, r1, #7
   1fc40:	4414      	add	r4, r2
   1fc42:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1fc44:	4621      	mov	r1, r4
   1fc46:	4628      	mov	r0, r5
   1fc48:	f7ff ff15 	bl	1fa76 <alloc_chunk>
	if (c == 0U) {
   1fc4c:	4606      	mov	r6, r0
   1fc4e:	2800      	cmp	r0, #0
   1fc50:	d0ec      	beq.n	1fc2c <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   1fc52:	4601      	mov	r1, r0
   1fc54:	4628      	mov	r0, r5
   1fc56:	f7ff fe54 	bl	1f902 <chunk_size>
   1fc5a:	42a0      	cmp	r0, r4
   1fc5c:	d909      	bls.n	1fc72 <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   1fc5e:	4434      	add	r4, r6
   1fc60:	4631      	mov	r1, r6
   1fc62:	4628      	mov	r0, r5
   1fc64:	4622      	mov	r2, r4
   1fc66:	f7ff fe99 	bl	1f99c <split_chunks>
		free_list_add(h, c + chunk_sz);
   1fc6a:	4621      	mov	r1, r4
   1fc6c:	4628      	mov	r0, r5
   1fc6e:	f7ff ff43 	bl	1faf8 <free_list_add>
	set_chunk_used(h, c, true);
   1fc72:	4628      	mov	r0, r5
   1fc74:	2201      	movs	r2, #1
   1fc76:	4631      	mov	r1, r6
   1fc78:	f7ff fe49 	bl	1f90e <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1fc7c:	68ab      	ldr	r3, [r5, #8]
   1fc7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1fc82:	bf2c      	ite	cs
   1fc84:	2008      	movcs	r0, #8
   1fc86:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1fc88:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1fc8c:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1fc8e:	e7ce      	b.n	1fc2e <sys_heap_alloc+0x6>

0001fc90 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1fc90:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1fc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fc96:	bf2c      	ite	cs
   1fc98:	2508      	movcs	r5, #8
   1fc9a:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1fc9c:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1fc9e:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1fca0:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1fca2:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1fca6:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   1fcaa:	2200      	movs	r2, #0
   1fcac:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1fcae:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
   1fcb0:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1fcb2:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
   1fcb4:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   1fcb8:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1fcba:	4629      	mov	r1, r5
	h->len = buf_sz;
   1fcbc:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1fcbe:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1fcc0:	4620      	mov	r0, r4
   1fcc2:	f7ff fe40 	bl	1f946 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1fcc6:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fcc8:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1fcca:	1c41      	adds	r1, r0, #1
   1fccc:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1fcce:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1fcd2:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1fcd4:	428b      	cmp	r3, r1
   1fcd6:	db29      	blt.n	1fd2c <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1fcd8:	4632      	mov	r2, r6
   1fcda:	4620      	mov	r0, r4
   1fcdc:	2100      	movs	r1, #0
   1fcde:	f7ff fe2e 	bl	1f93e <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1fce2:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1fce4:	4620      	mov	r0, r4
   1fce6:	2201      	movs	r2, #1
   1fce8:	2100      	movs	r1, #0
   1fcea:	f7ff fe10 	bl	1f90e <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1fcee:	463a      	mov	r2, r7
   1fcf0:	4631      	mov	r1, r6
   1fcf2:	f7ff fe24 	bl	1f93e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1fcf6:	4633      	mov	r3, r6
   1fcf8:	4631      	mov	r1, r6
   1fcfa:	4620      	mov	r0, r4
   1fcfc:	2200      	movs	r2, #0
   1fcfe:	f7ff fdf5 	bl	1f8ec <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   1fd02:	4629      	mov	r1, r5
   1fd04:	4620      	mov	r0, r4
   1fd06:	2200      	movs	r2, #0
   1fd08:	f7ff fe19 	bl	1f93e <set_chunk_size>
   1fd0c:	463b      	mov	r3, r7
   1fd0e:	4629      	mov	r1, r5
   1fd10:	4620      	mov	r0, r4
   1fd12:	2200      	movs	r2, #0
   1fd14:	f7ff fdea 	bl	1f8ec <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   1fd18:	4629      	mov	r1, r5
   1fd1a:	4620      	mov	r0, r4
   1fd1c:	2201      	movs	r2, #1
   1fd1e:	f7ff fdf6 	bl	1f90e <set_chunk_used>

	free_list_add(h, chunk0_size);
   1fd22:	4631      	mov	r1, r6
}
   1fd24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1fd28:	f7ff bee6 	b.w	1faf8 <free_list_add>
		h->buckets[i].next = 0;
   1fd2c:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1fd30:	3301      	adds	r3, #1
   1fd32:	e7cf      	b.n	1fcd4 <sys_heap_init+0x44>

0001fd34 <encode_uint>:
{
   1fd34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd38:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1fd3a:	78d3      	ldrb	r3, [r2, #3]
{
   1fd3c:	4614      	mov	r4, r2
	switch (specifier) {
   1fd3e:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1fd40:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   1fd44:	4606      	mov	r6, r0
   1fd46:	460f      	mov	r7, r1
   1fd48:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1fd4a:	d02d      	beq.n	1fda8 <encode_uint+0x74>
   1fd4c:	d828      	bhi.n	1fda0 <encode_uint+0x6c>
		return 16;
   1fd4e:	2b58      	cmp	r3, #88	; 0x58
   1fd50:	bf14      	ite	ne
   1fd52:	250a      	movne	r5, #10
   1fd54:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   1fd56:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1fd5a:	46aa      	mov	sl, r5
   1fd5c:	f04f 0b00 	mov.w	fp, #0
   1fd60:	4652      	mov	r2, sl
   1fd62:	465b      	mov	r3, fp
   1fd64:	4630      	mov	r0, r6
   1fd66:	4639      	mov	r1, r7
   1fd68:	f7e0 f9ca 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fd6c:	2a09      	cmp	r2, #9
   1fd6e:	b2d3      	uxtb	r3, r2
   1fd70:	d81f      	bhi.n	1fdb2 <encode_uint+0x7e>
   1fd72:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1fd74:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fd76:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1fd78:	bf08      	it	eq
   1fd7a:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fd7c:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1fd80:	d301      	bcc.n	1fd86 <encode_uint+0x52>
   1fd82:	45c8      	cmp	r8, r9
   1fd84:	d812      	bhi.n	1fdac <encode_uint+0x78>
	if (conv->flag_hash) {
   1fd86:	7823      	ldrb	r3, [r4, #0]
   1fd88:	069b      	lsls	r3, r3, #26
   1fd8a:	d505      	bpl.n	1fd98 <encode_uint+0x64>
		if (radix == 8) {
   1fd8c:	2d08      	cmp	r5, #8
   1fd8e:	d116      	bne.n	1fdbe <encode_uint+0x8a>
			conv->altform_0 = true;
   1fd90:	78a3      	ldrb	r3, [r4, #2]
   1fd92:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1fd96:	70a3      	strb	r3, [r4, #2]
}
   1fd98:	4640      	mov	r0, r8
   1fd9a:	b003      	add	sp, #12
   1fd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1fda0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1fda4:	2b70      	cmp	r3, #112	; 0x70
   1fda6:	e7d3      	b.n	1fd50 <encode_uint+0x1c>
	switch (specifier) {
   1fda8:	2508      	movs	r5, #8
   1fdaa:	e7d4      	b.n	1fd56 <encode_uint+0x22>
		value /= radix;
   1fdac:	4606      	mov	r6, r0
   1fdae:	460f      	mov	r7, r1
   1fdb0:	e7d6      	b.n	1fd60 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1fdb2:	9a01      	ldr	r2, [sp, #4]
   1fdb4:	2a19      	cmp	r2, #25
   1fdb6:	bf94      	ite	ls
   1fdb8:	3337      	addls	r3, #55	; 0x37
   1fdba:	3357      	addhi	r3, #87	; 0x57
   1fdbc:	e7da      	b.n	1fd74 <encode_uint+0x40>
		} else if (radix == 16) {
   1fdbe:	2d10      	cmp	r5, #16
   1fdc0:	d1ea      	bne.n	1fd98 <encode_uint+0x64>
			conv->altform_0c = true;
   1fdc2:	78a3      	ldrb	r3, [r4, #2]
   1fdc4:	f043 0310 	orr.w	r3, r3, #16
   1fdc8:	e7e5      	b.n	1fd96 <encode_uint+0x62>

0001fdca <outs>:
{
   1fdca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fdce:	4607      	mov	r7, r0
   1fdd0:	4688      	mov	r8, r1
   1fdd2:	4615      	mov	r5, r2
   1fdd4:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1fdd6:	4614      	mov	r4, r2
   1fdd8:	42b4      	cmp	r4, r6
   1fdda:	eba4 0005 	sub.w	r0, r4, r5
   1fdde:	d302      	bcc.n	1fde6 <outs+0x1c>
   1fde0:	b93e      	cbnz	r6, 1fdf2 <outs+0x28>
   1fde2:	7823      	ldrb	r3, [r4, #0]
   1fde4:	b12b      	cbz	r3, 1fdf2 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1fde6:	f814 0b01 	ldrb.w	r0, [r4], #1
   1fdea:	4641      	mov	r1, r8
   1fdec:	47b8      	blx	r7
		if (rc < 0) {
   1fdee:	2800      	cmp	r0, #0
   1fdf0:	daf2      	bge.n	1fdd8 <outs+0xe>
}
   1fdf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fdf6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1fdf6:	4770      	bx	lr

0001fdf8 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1fdf8:	2300      	movs	r3, #0
	list->head = NULL;
   1fdfa:	e9c0 3300 	strd	r3, r3, [r0]
}
   1fdfe:	4770      	bx	lr

0001fe00 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1fe00:	6803      	ldr	r3, [r0, #0]
   1fe02:	b923      	cbnz	r3, 1fe0e <log_list_add_tail+0xe>
		list->head = msg;
   1fe04:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1fe06:	2300      	movs	r3, #0
	list->tail = msg;
   1fe08:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1fe0a:	600b      	str	r3, [r1, #0]
}
   1fe0c:	4770      	bx	lr
		list->tail->next = msg;
   1fe0e:	6843      	ldr	r3, [r0, #4]
   1fe10:	6019      	str	r1, [r3, #0]
   1fe12:	e7f8      	b.n	1fe06 <log_list_add_tail+0x6>

0001fe14 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1fe14:	6800      	ldr	r0, [r0, #0]
   1fe16:	4770      	bx	lr

0001fe18 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1fe18:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1fe1a:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1fe1c:	b108      	cbz	r0, 1fe22 <log_list_head_get+0xa>
		list->head = list->head->next;
   1fe1e:	6802      	ldr	r2, [r0, #0]
   1fe20:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1fe22:	4770      	bx	lr

0001fe24 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1fe24:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1fe26:	f7e5 fc21 	bl	566c <log_msg_chunk_alloc>

	if (msg != NULL) {
   1fe2a:	b118      	cbz	r0, 1fe34 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1fe2c:	2301      	movs	r3, #1
   1fe2e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1fe30:	2300      	movs	r3, #0
   1fe32:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1fe34:	bd08      	pop	{r3, pc}

0001fe36 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1fe36:	f7e6 ba05 	b.w	6244 <z_timer_cycle_get_32>

0001fe3a <dummy_timestamp>:
   1fe3a:	2000      	movs	r0, #0
   1fe3c:	4770      	bx	lr

0001fe3e <z_log_get_s_mask>:
{
   1fe3e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fe40:	4605      	mov	r5, r0
	uint32_t mask = 0;
   1fe42:	2000      	movs	r0, #0
	uint32_t arg = 0;
   1fe44:	4603      	mov	r3, r0
	bool arm = false;
   1fe46:	4602      	mov	r2, r0
				mask |= BIT(arg);
   1fe48:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1fe4a:	f815 4b01 	ldrb.w	r4, [r5], #1
   1fe4e:	b10c      	cbz	r4, 1fe54 <z_log_get_s_mask+0x16>
   1fe50:	428b      	cmp	r3, r1
   1fe52:	d300      	bcc.n	1fe56 <z_log_get_s_mask+0x18>
}
   1fe54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1fe56:	2c25      	cmp	r4, #37	; 0x25
   1fe58:	d102      	bne.n	1fe60 <z_log_get_s_mask+0x22>
			arm = !arm;
   1fe5a:	f082 0201 	eor.w	r2, r2, #1
   1fe5e:	e7f4      	b.n	1fe4a <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1fe60:	2a00      	cmp	r2, #0
   1fe62:	d0f2      	beq.n	1fe4a <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1fe64:	f044 0620 	orr.w	r6, r4, #32
   1fe68:	3e61      	subs	r6, #97	; 0x61
   1fe6a:	2e19      	cmp	r6, #25
   1fe6c:	d8ed      	bhi.n	1fe4a <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1fe6e:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1fe70:	bf04      	itt	eq
   1fe72:	fa07 f203 	lsleq.w	r2, r7, r3
   1fe76:	4310      	orreq	r0, r2
			arg++;
   1fe78:	3301      	adds	r3, #1
			arm = false;
   1fe7a:	2200      	movs	r2, #0
   1fe7c:	e7e5      	b.n	1fe4a <z_log_get_s_mask+0xc>

0001fe7e <log_0>:
{
   1fe7e:	b538      	push	{r3, r4, r5, lr}
   1fe80:	4605      	mov	r5, r0
   1fe82:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1fe84:	f7ff ffce 	bl	1fe24 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1fe88:	b128      	cbz	r0, 1fe96 <log_0+0x18>
		msg->str = str;
   1fe8a:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1fe8c:	4621      	mov	r1, r4
}
   1fe8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1fe92:	f7e5 bb05 	b.w	54a0 <msg_finalize>
}
   1fe96:	bd38      	pop	{r3, r4, r5, pc}

0001fe98 <log_1>:
{
   1fe98:	b570      	push	{r4, r5, r6, lr}
   1fe9a:	4606      	mov	r6, r0
   1fe9c:	460d      	mov	r5, r1
   1fe9e:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1fea0:	f7ff ffc0 	bl	1fe24 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1fea4:	b158      	cbz	r0, 1febe <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1fea6:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1fea8:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1feaa:	2101      	movs	r1, #1
   1feac:	f361 1207 	bfi	r2, r1, #4, #4
   1feb0:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1feb2:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1feb4:	4621      	mov	r1, r4
}
   1feb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1feba:	f7e5 baf1 	b.w	54a0 <msg_finalize>
}
   1febe:	bd70      	pop	{r4, r5, r6, pc}

0001fec0 <log_2>:
{
   1fec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fec4:	4680      	mov	r8, r0
   1fec6:	460f      	mov	r7, r1
   1fec8:	4616      	mov	r6, r2
   1feca:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1fecc:	f7ff ffaa 	bl	1fe24 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1fed0:	b168      	cbz	r0, 1feee <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1fed2:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1fed4:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1fed8:	2202      	movs	r2, #2
   1feda:	f362 1307 	bfi	r3, r2, #4, #4
   1fede:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1fee0:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1fee4:	4629      	mov	r1, r5
}
   1fee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1feea:	f7e5 bad9 	b.w	54a0 <msg_finalize>
}
   1feee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fef2 <log_3>:
{
   1fef2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fef6:	4680      	mov	r8, r0
   1fef8:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1fefc:	460f      	mov	r7, r1
   1fefe:	4616      	mov	r6, r2
   1ff00:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1ff02:	f7ff ff8f 	bl	1fe24 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1ff06:	b170      	cbz	r0, 1ff26 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1ff08:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1ff0a:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1ff0e:	2203      	movs	r2, #3
   1ff10:	f362 1307 	bfi	r3, r2, #4, #4
   1ff14:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1ff16:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1ff1a:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1ff1c:	4649      	mov	r1, r9
}
   1ff1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1ff22:	f7e5 babd 	b.w	54a0 <msg_finalize>
}
   1ff26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001ff2a <log_n>:
{
   1ff2a:	b510      	push	{r4, lr}
   1ff2c:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1ff2e:	f000 f8a1 	bl	20074 <log_msg_create_n>
		if (msg == NULL) {
   1ff32:	b120      	cbz	r0, 1ff3e <log_n+0x14>
		msg_finalize(msg, src_level);
   1ff34:	4621      	mov	r1, r4
}
   1ff36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1ff3a:	f7e5 bab1 	b.w	54a0 <msg_finalize>
}
   1ff3e:	bd10      	pop	{r4, pc}

0001ff40 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1ff40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ff44:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1ff46:	8903      	ldrh	r3, [r0, #8]
{
   1ff48:	f89d 8020 	ldrb.w	r8, [sp, #32]
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1ff4c:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
{
   1ff50:	460e      	mov	r6, r1
   1ff52:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1ff54:	ea4f 0293 	mov.w	r2, r3, lsr #2
	if (offset >= available_len) {
   1ff58:	d303      	bcc.n	1ff62 <log_msg_hexdump_data_op+0x22>
		*length = 0;
   1ff5a:	2300      	movs	r3, #0
   1ff5c:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1ff5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1ff62:	680b      	ldr	r3, [r1, #0]
   1ff64:	4423      	add	r3, r4
   1ff66:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1ff68:	bf84      	itt	hi
   1ff6a:	1b13      	subhi	r3, r2, r4
   1ff6c:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1ff6e:	2a0c      	cmp	r2, #12
	req_len = *length;
   1ff70:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1ff74:	d92b      	bls.n	1ffce <log_msg_hexdump_data_op+0x8e>
	if (offset < chunk_len) {
   1ff76:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1ff78:	6947      	ldr	r7, [r0, #20]
	if (offset < chunk_len) {
   1ff7a:	d82e      	bhi.n	1ffda <log_msg_hexdump_data_op+0x9a>
		head_data = msg->payload.ext.data.bytes;
   1ff7c:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1ff7e:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1ff80:	454a      	cmp	r2, r9
   1ff82:	bf28      	it	cs
   1ff84:	464a      	movcs	r2, r9
   1ff86:	4615      	mov	r5, r2
		if (put_op) {
   1ff88:	4420      	add	r0, r4
   1ff8a:	f1b8 0f00 	cmp.w	r8, #0
   1ff8e:	d021      	beq.n	1ffd4 <log_msg_hexdump_data_op+0x94>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1ff90:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1ff92:	f001 fc28 	bl	217e6 <memcpy>
		req_len -= cpy_len;
   1ff96:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1ff9a:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1ff9c:	f1b9 0f00 	cmp.w	r9, #0
   1ffa0:	d0dd      	beq.n	1ff5e <log_msg_hexdump_data_op+0x1e>
   1ffa2:	2f00      	cmp	r7, #0
   1ffa4:	d0db      	beq.n	1ff5e <log_msg_hexdump_data_op+0x1e>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1ffa6:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1ffaa:	454d      	cmp	r5, r9
   1ffac:	bf28      	it	cs
   1ffae:	464d      	movcs	r5, r9
		if (put_op) {
   1ffb0:	1d20      	adds	r0, r4, #4
   1ffb2:	4438      	add	r0, r7
			(void)memcpy(&cont->payload.bytes[offset],
   1ffb4:	462a      	mov	r2, r5
		if (put_op) {
   1ffb6:	f1b8 0f00 	cmp.w	r8, #0
   1ffba:	d014      	beq.n	1ffe6 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   1ffbc:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1ffbe:	f001 fc12 	bl	217e6 <memcpy>
		req_len -= cpy_len;
   1ffc2:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1ffc6:	683f      	ldr	r7, [r7, #0]
		data += cpy_len;
   1ffc8:	442e      	add	r6, r5
		offset = 0;
   1ffca:	2400      	movs	r4, #0
   1ffcc:	e7e6      	b.n	1ff9c <log_msg_hexdump_data_op+0x5c>
		head_data = msg->payload.single.bytes;
   1ffce:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1ffd0:	2700      	movs	r7, #0
   1ffd2:	e7d5      	b.n	1ff80 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1ffd4:	4601      	mov	r1, r0
   1ffd6:	4630      	mov	r0, r6
   1ffd8:	e7db      	b.n	1ff92 <log_msg_hexdump_data_op+0x52>
		offset -= chunk_len;
   1ffda:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1ffdc:	2c1b      	cmp	r4, #27
   1ffde:	d9dd      	bls.n	1ff9c <log_msg_hexdump_data_op+0x5c>
			cont = cont->next;
   1ffe0:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
   1ffe2:	3c1c      	subs	r4, #28
   1ffe4:	e7fa      	b.n	1ffdc <log_msg_hexdump_data_op+0x9c>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1ffe6:	4601      	mov	r1, r0
   1ffe8:	4630      	mov	r0, r6
   1ffea:	e7e8      	b.n	1ffbe <log_msg_hexdump_data_op+0x7e>

0001ffec <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ffec:	3004      	adds	r0, #4
   1ffee:	f3bf 8f5b 	dmb	ish
   1fff2:	e850 3f00 	ldrex	r3, [r0]
   1fff6:	3301      	adds	r3, #1
   1fff8:	e840 3200 	strex	r2, r3, [r0]
   1fffc:	2a00      	cmp	r2, #0
   1fffe:	d1f8      	bne.n	1fff2 <log_msg_get+0x6>
   20000:	f3bf 8f5b 	dmb	ish
}
   20004:	4770      	bx	lr

00020006 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   20006:	7a40      	ldrb	r0, [r0, #9]
}
   20008:	0900      	lsrs	r0, r0, #4
   2000a:	4770      	bx	lr

0002000c <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   2000c:	7a43      	ldrb	r3, [r0, #9]
   2000e:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   20012:	ea4f 1213 	mov.w	r2, r3, lsr #4
   20016:	d216      	bcs.n	20046 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   20018:	2a03      	cmp	r2, #3
   2001a:	d803      	bhi.n	20024 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   2001c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   20020:	6948      	ldr	r0, [r1, #20]
   20022:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   20024:	2901      	cmp	r1, #1
   20026:	d803      	bhi.n	20030 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   20028:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2002c:	6988      	ldr	r0, [r1, #24]
   2002e:	4770      	bx	lr
	cont = msg->payload.ext.next;
   20030:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   20032:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   20034:	2906      	cmp	r1, #6
   20036:	d803      	bhi.n	20040 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   20038:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2003c:	6848      	ldr	r0, [r1, #4]
   2003e:	4770      	bx	lr
		cont = cont->next;
   20040:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   20042:	3907      	subs	r1, #7
		cont = cont->next;
   20044:	e7f6      	b.n	20034 <log_msg_arg_get+0x28>
		return 0;
   20046:	2000      	movs	r0, #0
}
   20048:	4770      	bx	lr

0002004a <log_msg_put>:
{
   2004a:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2004c:	1d02      	adds	r2, r0, #4
   2004e:	f3bf 8f5b 	dmb	ish
   20052:	e852 1f00 	ldrex	r1, [r2]
   20056:	3901      	subs	r1, #1
   20058:	e842 1c00 	strex	ip, r1, [r2]
   2005c:	f1bc 0f00 	cmp.w	ip, #0
   20060:	d1f7      	bne.n	20052 <log_msg_put+0x8>
   20062:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   20066:	685b      	ldr	r3, [r3, #4]
   20068:	b90b      	cbnz	r3, 2006e <log_msg_put+0x24>
		msg_free(msg);
   2006a:	f7e5 bb13 	b.w	5694 <msg_free>
}
   2006e:	4770      	bx	lr

00020070 <log_msg_str_get>:
}
   20070:	6900      	ldr	r0, [r0, #16]
   20072:	4770      	bx	lr

00020074 <log_msg_create_n>:
{
   20074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20078:	4681      	mov	r9, r0
   2007a:	4688      	mov	r8, r1
   2007c:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   2007e:	f7e5 faf5 	bl	566c <log_msg_chunk_alloc>
	if (msg != NULL) {
   20082:	4604      	mov	r4, r0
   20084:	b330      	cbz	r0, 200d4 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   20086:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   20088:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   2008a:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   2008c:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   2008e:	8107      	strh	r7, [r0, #8]
   20090:	d909      	bls.n	200a6 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   20092:	2202      	movs	r2, #2
   20094:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   20096:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   2009a:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   2009e:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   200a0:	f1ba 0f00 	cmp.w	sl, #0
   200a4:	dc0e      	bgt.n	200c4 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   200a6:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   200a8:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   200ac:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   200b0:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   200b2:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   200b4:	d818      	bhi.n	200e8 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   200b6:	00aa      	lsls	r2, r5, #2
   200b8:	4641      	mov	r1, r8
   200ba:	f104 0014 	add.w	r0, r4, #20
   200be:	f001 fb92 	bl	217e6 <memcpy>
	while (nargs != 0U) {
   200c2:	e007      	b.n	200d4 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   200c4:	f7e5 fad2 	bl	566c <log_msg_chunk_alloc>
		if (cont == NULL) {
   200c8:	4606      	mov	r6, r0
   200ca:	b930      	cbnz	r0, 200da <log_msg_create_n+0x66>
			msg_free(msg);
   200cc:	4620      	mov	r0, r4
   200ce:	f7e5 fae1 	bl	5694 <msg_free>
			return NULL;
   200d2:	4634      	mov	r4, r6
}
   200d4:	4620      	mov	r0, r4
   200d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   200da:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   200de:	f1aa 0a07 	sub.w	sl, sl, #7
   200e2:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   200e4:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   200e6:	e7db      	b.n	200a0 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   200e8:	4641      	mov	r1, r8
   200ea:	2208      	movs	r2, #8
   200ec:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   200f0:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   200f2:	f001 fb78 	bl	217e6 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   200f6:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   200f8:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   200fc:	2d07      	cmp	r5, #7
   200fe:	462e      	mov	r6, r5
   20100:	bf28      	it	cs
   20102:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   20104:	ea4f 0986 	mov.w	r9, r6, lsl #2
   20108:	4641      	mov	r1, r8
   2010a:	1d38      	adds	r0, r7, #4
   2010c:	464a      	mov	r2, r9
   2010e:	f001 fb6a 	bl	217e6 <memcpy>
	while (nargs != 0U) {
   20112:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   20114:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   20116:	44c8      	add	r8, r9
	while (nargs != 0U) {
   20118:	d1f0      	bne.n	200fc <log_msg_create_n+0x88>
   2011a:	e7db      	b.n	200d4 <log_msg_create_n+0x60>

0002011c <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   2011c:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   2011e:	2400      	movs	r4, #0
   20120:	9400      	str	r4, [sp, #0]
   20122:	f7ff ff0d 	bl	1ff40 <log_msg_hexdump_data_op>
}
   20126:	b002      	add	sp, #8
   20128:	bd10      	pop	{r4, pc}

0002012a <buffer_write>:
{
   2012a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2012c:	4606      	mov	r6, r0
   2012e:	460d      	mov	r5, r1
   20130:	4614      	mov	r4, r2
   20132:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   20134:	4621      	mov	r1, r4
   20136:	4628      	mov	r0, r5
   20138:	463a      	mov	r2, r7
   2013a:	47b0      	blx	r6
	} while (len != 0);
   2013c:	1a24      	subs	r4, r4, r0
		buf += processed;
   2013e:	4405      	add	r5, r0
	} while (len != 0);
   20140:	d1f8      	bne.n	20134 <buffer_write+0xa>
}
   20142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020144 <std_print>:
{
   20144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20148:	b08e      	sub	sp, #56	; 0x38
   2014a:	af0e      	add	r7, sp, #56	; 0x38
   2014c:	4680      	mov	r8, r0
   2014e:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   20150:	f7ff ff8e 	bl	20070 <log_msg_str_get>
   20154:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   20156:	4640      	mov	r0, r8
   20158:	f7ff ff55 	bl	20006 <log_msg_nargs_get>
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   2015c:	0083      	lsls	r3, r0, #2
   2015e:	3307      	adds	r3, #7
   20160:	f023 0307 	bic.w	r3, r3, #7
   20164:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   20168:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   2016a:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   2016c:	f04f 0900 	mov.w	r9, #0
   20170:	45d1      	cmp	r9, sl
   20172:	d116      	bne.n	201a2 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   20174:	4640      	mov	r0, r8
   20176:	f7ff ff46 	bl	20006 <log_msg_nargs_get>
   2017a:	280f      	cmp	r0, #15
   2017c:	d81e      	bhi.n	201bc <std_print+0x78>
   2017e:	e8df f010 	tbh	[pc, r0, lsl #1]
   20182:	0019      	.short	0x0019
   20184:	00260020 	.word	0x00260020
   20188:	0036002d 	.word	0x0036002d
   2018c:	004e0041 	.word	0x004e0041
   20190:	006e005d 	.word	0x006e005d
   20194:	00960081 	.word	0x00960081
   20198:	00c600ad 	.word	0x00c600ad
   2019c:	00fe00e1 	.word	0x00fe00e1
   201a0:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   201a2:	4649      	mov	r1, r9
   201a4:	4640      	mov	r0, r8
   201a6:	f7ff ff31 	bl	2000c <log_msg_arg_get>
   201aa:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   201ae:	f109 0901 	add.w	r9, r9, #1
   201b2:	e7dd      	b.n	20170 <std_print+0x2c>
		print_formatted(log_output, str);
   201b4:	4631      	mov	r1, r6
   201b6:	4628      	mov	r0, r5
   201b8:	f7e5 faaa 	bl	5710 <print_formatted>
}
   201bc:	46bd      	mov	sp, r7
   201be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   201c2:	6822      	ldr	r2, [r4, #0]
   201c4:	4631      	mov	r1, r6
   201c6:	4628      	mov	r0, r5
   201c8:	f7e5 faa2 	bl	5710 <print_formatted>
		break;
   201cc:	e7f6      	b.n	201bc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   201ce:	e9d4 2300 	ldrd	r2, r3, [r4]
   201d2:	4631      	mov	r1, r6
   201d4:	4628      	mov	r0, r5
   201d6:	f7e5 fa9b 	bl	5710 <print_formatted>
		break;
   201da:	e7ef      	b.n	201bc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   201dc:	68a3      	ldr	r3, [r4, #8]
   201de:	9300      	str	r3, [sp, #0]
   201e0:	e9d4 2300 	ldrd	r2, r3, [r4]
   201e4:	4631      	mov	r1, r6
   201e6:	4628      	mov	r0, r5
   201e8:	f7e5 fa92 	bl	5710 <print_formatted>
		break;
   201ec:	e7e6      	b.n	201bc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   201ee:	68e3      	ldr	r3, [r4, #12]
   201f0:	9301      	str	r3, [sp, #4]
   201f2:	68a3      	ldr	r3, [r4, #8]
   201f4:	9300      	str	r3, [sp, #0]
   201f6:	e9d4 2300 	ldrd	r2, r3, [r4]
   201fa:	4631      	mov	r1, r6
   201fc:	4628      	mov	r0, r5
   201fe:	f7e5 fa87 	bl	5710 <print_formatted>
		break;
   20202:	e7db      	b.n	201bc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   20204:	6923      	ldr	r3, [r4, #16]
   20206:	9302      	str	r3, [sp, #8]
   20208:	68e3      	ldr	r3, [r4, #12]
   2020a:	9301      	str	r3, [sp, #4]
   2020c:	68a3      	ldr	r3, [r4, #8]
   2020e:	9300      	str	r3, [sp, #0]
   20210:	e9d4 2300 	ldrd	r2, r3, [r4]
   20214:	4631      	mov	r1, r6
   20216:	4628      	mov	r0, r5
   20218:	f7e5 fa7a 	bl	5710 <print_formatted>
		break;
   2021c:	e7ce      	b.n	201bc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2021e:	6963      	ldr	r3, [r4, #20]
   20220:	9303      	str	r3, [sp, #12]
   20222:	6923      	ldr	r3, [r4, #16]
   20224:	9302      	str	r3, [sp, #8]
   20226:	68e3      	ldr	r3, [r4, #12]
   20228:	9301      	str	r3, [sp, #4]
   2022a:	68a3      	ldr	r3, [r4, #8]
   2022c:	9300      	str	r3, [sp, #0]
   2022e:	e9d4 2300 	ldrd	r2, r3, [r4]
   20232:	4631      	mov	r1, r6
   20234:	4628      	mov	r0, r5
   20236:	f7e5 fa6b 	bl	5710 <print_formatted>
		break;
   2023a:	e7bf      	b.n	201bc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2023c:	69a3      	ldr	r3, [r4, #24]
   2023e:	9304      	str	r3, [sp, #16]
   20240:	6963      	ldr	r3, [r4, #20]
   20242:	9303      	str	r3, [sp, #12]
   20244:	6923      	ldr	r3, [r4, #16]
   20246:	9302      	str	r3, [sp, #8]
   20248:	68e3      	ldr	r3, [r4, #12]
   2024a:	9301      	str	r3, [sp, #4]
   2024c:	68a3      	ldr	r3, [r4, #8]
   2024e:	9300      	str	r3, [sp, #0]
   20250:	e9d4 2300 	ldrd	r2, r3, [r4]
   20254:	4631      	mov	r1, r6
   20256:	4628      	mov	r0, r5
   20258:	f7e5 fa5a 	bl	5710 <print_formatted>
		break;
   2025c:	e7ae      	b.n	201bc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2025e:	69e3      	ldr	r3, [r4, #28]
   20260:	9305      	str	r3, [sp, #20]
   20262:	69a3      	ldr	r3, [r4, #24]
   20264:	9304      	str	r3, [sp, #16]
   20266:	6963      	ldr	r3, [r4, #20]
   20268:	9303      	str	r3, [sp, #12]
   2026a:	6923      	ldr	r3, [r4, #16]
   2026c:	9302      	str	r3, [sp, #8]
   2026e:	68e3      	ldr	r3, [r4, #12]
   20270:	9301      	str	r3, [sp, #4]
   20272:	68a3      	ldr	r3, [r4, #8]
   20274:	9300      	str	r3, [sp, #0]
   20276:	e9d4 2300 	ldrd	r2, r3, [r4]
   2027a:	4631      	mov	r1, r6
   2027c:	4628      	mov	r0, r5
   2027e:	f7e5 fa47 	bl	5710 <print_formatted>
		break;
   20282:	e79b      	b.n	201bc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   20284:	6a23      	ldr	r3, [r4, #32]
   20286:	9306      	str	r3, [sp, #24]
   20288:	69e3      	ldr	r3, [r4, #28]
   2028a:	9305      	str	r3, [sp, #20]
   2028c:	69a3      	ldr	r3, [r4, #24]
   2028e:	9304      	str	r3, [sp, #16]
   20290:	6963      	ldr	r3, [r4, #20]
   20292:	9303      	str	r3, [sp, #12]
   20294:	6923      	ldr	r3, [r4, #16]
   20296:	9302      	str	r3, [sp, #8]
   20298:	68e3      	ldr	r3, [r4, #12]
   2029a:	9301      	str	r3, [sp, #4]
   2029c:	68a3      	ldr	r3, [r4, #8]
   2029e:	9300      	str	r3, [sp, #0]
   202a0:	e9d4 2300 	ldrd	r2, r3, [r4]
   202a4:	4631      	mov	r1, r6
   202a6:	4628      	mov	r0, r5
   202a8:	f7e5 fa32 	bl	5710 <print_formatted>
		break;
   202ac:	e786      	b.n	201bc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   202ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   202b0:	9307      	str	r3, [sp, #28]
   202b2:	6a23      	ldr	r3, [r4, #32]
   202b4:	9306      	str	r3, [sp, #24]
   202b6:	69e3      	ldr	r3, [r4, #28]
   202b8:	9305      	str	r3, [sp, #20]
   202ba:	69a3      	ldr	r3, [r4, #24]
   202bc:	9304      	str	r3, [sp, #16]
   202be:	6963      	ldr	r3, [r4, #20]
   202c0:	9303      	str	r3, [sp, #12]
   202c2:	6923      	ldr	r3, [r4, #16]
   202c4:	9302      	str	r3, [sp, #8]
   202c6:	68e3      	ldr	r3, [r4, #12]
   202c8:	9301      	str	r3, [sp, #4]
   202ca:	68a3      	ldr	r3, [r4, #8]
   202cc:	9300      	str	r3, [sp, #0]
   202ce:	e9d4 2300 	ldrd	r2, r3, [r4]
   202d2:	4631      	mov	r1, r6
   202d4:	4628      	mov	r0, r5
   202d6:	f7e5 fa1b 	bl	5710 <print_formatted>
		break;
   202da:	e76f      	b.n	201bc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   202dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   202de:	9308      	str	r3, [sp, #32]
   202e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   202e2:	9307      	str	r3, [sp, #28]
   202e4:	6a23      	ldr	r3, [r4, #32]
   202e6:	9306      	str	r3, [sp, #24]
   202e8:	69e3      	ldr	r3, [r4, #28]
   202ea:	9305      	str	r3, [sp, #20]
   202ec:	69a3      	ldr	r3, [r4, #24]
   202ee:	9304      	str	r3, [sp, #16]
   202f0:	6963      	ldr	r3, [r4, #20]
   202f2:	9303      	str	r3, [sp, #12]
   202f4:	6923      	ldr	r3, [r4, #16]
   202f6:	9302      	str	r3, [sp, #8]
   202f8:	68e3      	ldr	r3, [r4, #12]
   202fa:	9301      	str	r3, [sp, #4]
   202fc:	68a3      	ldr	r3, [r4, #8]
   202fe:	9300      	str	r3, [sp, #0]
   20300:	e9d4 2300 	ldrd	r2, r3, [r4]
   20304:	4631      	mov	r1, r6
   20306:	4628      	mov	r0, r5
   20308:	f7e5 fa02 	bl	5710 <print_formatted>
		break;
   2030c:	e756      	b.n	201bc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2030e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20310:	9309      	str	r3, [sp, #36]	; 0x24
   20312:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20314:	9308      	str	r3, [sp, #32]
   20316:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20318:	9307      	str	r3, [sp, #28]
   2031a:	6a23      	ldr	r3, [r4, #32]
   2031c:	9306      	str	r3, [sp, #24]
   2031e:	69e3      	ldr	r3, [r4, #28]
   20320:	9305      	str	r3, [sp, #20]
   20322:	69a3      	ldr	r3, [r4, #24]
   20324:	9304      	str	r3, [sp, #16]
   20326:	6963      	ldr	r3, [r4, #20]
   20328:	9303      	str	r3, [sp, #12]
   2032a:	6923      	ldr	r3, [r4, #16]
   2032c:	9302      	str	r3, [sp, #8]
   2032e:	68e3      	ldr	r3, [r4, #12]
   20330:	9301      	str	r3, [sp, #4]
   20332:	68a3      	ldr	r3, [r4, #8]
   20334:	9300      	str	r3, [sp, #0]
   20336:	e9d4 2300 	ldrd	r2, r3, [r4]
   2033a:	4631      	mov	r1, r6
   2033c:	4628      	mov	r0, r5
   2033e:	f7e5 f9e7 	bl	5710 <print_formatted>
		break;
   20342:	e73b      	b.n	201bc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   20344:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20346:	930a      	str	r3, [sp, #40]	; 0x28
   20348:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2034a:	9309      	str	r3, [sp, #36]	; 0x24
   2034c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2034e:	9308      	str	r3, [sp, #32]
   20350:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20352:	9307      	str	r3, [sp, #28]
   20354:	6a23      	ldr	r3, [r4, #32]
   20356:	9306      	str	r3, [sp, #24]
   20358:	69e3      	ldr	r3, [r4, #28]
   2035a:	9305      	str	r3, [sp, #20]
   2035c:	69a3      	ldr	r3, [r4, #24]
   2035e:	9304      	str	r3, [sp, #16]
   20360:	6963      	ldr	r3, [r4, #20]
   20362:	9303      	str	r3, [sp, #12]
   20364:	6923      	ldr	r3, [r4, #16]
   20366:	9302      	str	r3, [sp, #8]
   20368:	68e3      	ldr	r3, [r4, #12]
   2036a:	9301      	str	r3, [sp, #4]
   2036c:	68a3      	ldr	r3, [r4, #8]
   2036e:	9300      	str	r3, [sp, #0]
   20370:	e9d4 2300 	ldrd	r2, r3, [r4]
   20374:	4631      	mov	r1, r6
   20376:	4628      	mov	r0, r5
   20378:	f7e5 f9ca 	bl	5710 <print_formatted>
		break;
   2037c:	e71e      	b.n	201bc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2037e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   20380:	930b      	str	r3, [sp, #44]	; 0x2c
   20382:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20384:	930a      	str	r3, [sp, #40]	; 0x28
   20386:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20388:	9309      	str	r3, [sp, #36]	; 0x24
   2038a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2038c:	9308      	str	r3, [sp, #32]
   2038e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20390:	9307      	str	r3, [sp, #28]
   20392:	6a23      	ldr	r3, [r4, #32]
   20394:	9306      	str	r3, [sp, #24]
   20396:	69e3      	ldr	r3, [r4, #28]
   20398:	9305      	str	r3, [sp, #20]
   2039a:	69a3      	ldr	r3, [r4, #24]
   2039c:	9304      	str	r3, [sp, #16]
   2039e:	6963      	ldr	r3, [r4, #20]
   203a0:	9303      	str	r3, [sp, #12]
   203a2:	6923      	ldr	r3, [r4, #16]
   203a4:	9302      	str	r3, [sp, #8]
   203a6:	68e3      	ldr	r3, [r4, #12]
   203a8:	9301      	str	r3, [sp, #4]
   203aa:	68a3      	ldr	r3, [r4, #8]
   203ac:	9300      	str	r3, [sp, #0]
   203ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   203b2:	4631      	mov	r1, r6
   203b4:	4628      	mov	r0, r5
   203b6:	f7e5 f9ab 	bl	5710 <print_formatted>
		break;
   203ba:	e6ff      	b.n	201bc <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   203bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   203be:	930c      	str	r3, [sp, #48]	; 0x30
   203c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   203c2:	930b      	str	r3, [sp, #44]	; 0x2c
   203c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   203c6:	930a      	str	r3, [sp, #40]	; 0x28
   203c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   203ca:	9309      	str	r3, [sp, #36]	; 0x24
   203cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   203ce:	9308      	str	r3, [sp, #32]
   203d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   203d2:	9307      	str	r3, [sp, #28]
   203d4:	6a23      	ldr	r3, [r4, #32]
   203d6:	9306      	str	r3, [sp, #24]
   203d8:	69e3      	ldr	r3, [r4, #28]
   203da:	9305      	str	r3, [sp, #20]
   203dc:	69a3      	ldr	r3, [r4, #24]
   203de:	9304      	str	r3, [sp, #16]
   203e0:	6963      	ldr	r3, [r4, #20]
   203e2:	9303      	str	r3, [sp, #12]
   203e4:	6923      	ldr	r3, [r4, #16]
   203e6:	9302      	str	r3, [sp, #8]
   203e8:	68e3      	ldr	r3, [r4, #12]
   203ea:	9301      	str	r3, [sp, #4]
   203ec:	68a3      	ldr	r3, [r4, #8]
   203ee:	9300      	str	r3, [sp, #0]
   203f0:	e9d4 2300 	ldrd	r2, r3, [r4]
   203f4:	4631      	mov	r1, r6
   203f6:	4628      	mov	r0, r5
   203f8:	f7e5 f98a 	bl	5710 <print_formatted>
}
   203fc:	e6de      	b.n	201bc <std_print+0x78>

000203fe <log_output_flush>:
		     log_output->control_block->offset,
   203fe:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   20400:	6881      	ldr	r1, [r0, #8]
{
   20402:	b510      	push	{r4, lr}
   20404:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   20406:	e9d2 2300 	ldrd	r2, r3, [r2]
   2040a:	6800      	ldr	r0, [r0, #0]
   2040c:	f7ff fe8d 	bl	2012a <buffer_write>
	log_output->control_block->offset = 0;
   20410:	6863      	ldr	r3, [r4, #4]
   20412:	2200      	movs	r2, #0
   20414:	601a      	str	r2, [r3, #0]
}
   20416:	bd10      	pop	{r4, pc}

00020418 <out_func>:
{
   20418:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   2041a:	684b      	ldr	r3, [r1, #4]
   2041c:	681a      	ldr	r2, [r3, #0]
   2041e:	68cb      	ldr	r3, [r1, #12]
   20420:	429a      	cmp	r2, r3
{
   20422:	4605      	mov	r5, r0
   20424:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   20426:	d102      	bne.n	2042e <out_func+0x16>
		log_output_flush(out_ctx);
   20428:	4608      	mov	r0, r1
   2042a:	f7ff ffe8 	bl	203fe <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2042e:	6863      	ldr	r3, [r4, #4]
   20430:	f3bf 8f5b 	dmb	ish
   20434:	e853 2f00 	ldrex	r2, [r3]
   20438:	1c51      	adds	r1, r2, #1
   2043a:	e843 1000 	strex	r0, r1, [r3]
   2043e:	2800      	cmp	r0, #0
   20440:	d1f8      	bne.n	20434 <out_func+0x1c>
   20442:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   20446:	68a3      	ldr	r3, [r4, #8]
   20448:	549d      	strb	r5, [r3, r2]
}
   2044a:	2000      	movs	r0, #0
   2044c:	bd38      	pop	{r3, r4, r5, pc}

0002044e <read_str>:
{
   2044e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   20452:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   20456:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   20458:	4640      	mov	r0, r8
{
   2045a:	461f      	mov	r7, r3
   2045c:	460c      	mov	r4, r1
   2045e:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   20460:	f001 f99e 	bl	217a0 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   20464:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   20468:	9300      	str	r3, [sp, #0]
   2046a:	b280      	uxth	r0, r0
   2046c:	e9cd 8001 	strd	r8, r0, [sp, #4]
   20470:	463b      	mov	r3, r7
   20472:	4632      	mov	r2, r6
   20474:	4621      	mov	r1, r4
   20476:	4628      	mov	r0, r5
   20478:	f002 fd44 	bl	22f04 <bt_gatt_attr_read>
}
   2047c:	b004      	add	sp, #16
   2047e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020482 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   20482:	68c2      	ldr	r2, [r0, #12]
   20484:	b2cb      	uxtb	r3, r1
   20486:	210c      	movs	r1, #12
   20488:	fb03 2101 	mla	r1, r3, r1, r2
   2048c:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   2048e:	f000 0007 	and.w	r0, r0, #7
   20492:	4770      	bx	lr

00020494 <set_off_state>:
	__asm__ volatile(
   20494:	f04f 0320 	mov.w	r3, #32
   20498:	f3ef 8211 	mrs	r2, BASEPRI
   2049c:	f383 8811 	msr	BASEPRI, r3
   204a0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   204a4:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   204a6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   204aa:	d001      	beq.n	204b0 <set_off_state+0x1c>
   204ac:	428b      	cmp	r3, r1
   204ae:	d107      	bne.n	204c0 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   204b0:	2301      	movs	r3, #1
   204b2:	6003      	str	r3, [r0, #0]
	int err = 0;
   204b4:	2000      	movs	r0, #0
	__asm__ volatile(
   204b6:	f382 8811 	msr	BASEPRI, r2
   204ba:	f3bf 8f6f 	isb	sy
}
   204be:	4770      	bx	lr
		err = -EPERM;
   204c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   204c4:	e7f7      	b.n	204b6 <set_off_state+0x22>

000204c6 <set_starting_state>:
{
   204c6:	b510      	push	{r4, lr}
	__asm__ volatile(
   204c8:	f04f 0320 	mov.w	r3, #32
   204cc:	f3ef 8211 	mrs	r2, BASEPRI
   204d0:	f383 8811 	msr	BASEPRI, r3
   204d4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   204d8:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   204da:	f003 0407 	and.w	r4, r3, #7
   204de:	2c01      	cmp	r4, #1
   204e0:	d106      	bne.n	204f0 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   204e2:	6001      	str	r1, [r0, #0]
	int err = 0;
   204e4:	2000      	movs	r0, #0
	__asm__ volatile(
   204e6:	f382 8811 	msr	BASEPRI, r2
   204ea:	f3bf 8f6f 	isb	sy
}
   204ee:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   204f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   204f4:	428b      	cmp	r3, r1
		err = -EALREADY;
   204f6:	bf14      	ite	ne
   204f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   204fc:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   20500:	e7f1      	b.n	204e6 <set_starting_state+0x20>

00020502 <set_on_state>:
	__asm__ volatile(
   20502:	f04f 0320 	mov.w	r3, #32
   20506:	f3ef 8211 	mrs	r2, BASEPRI
   2050a:	f383 8811 	msr	BASEPRI, r3
   2050e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   20512:	6803      	ldr	r3, [r0, #0]
   20514:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   20518:	f043 0302 	orr.w	r3, r3, #2
   2051c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2051e:	f382 8811 	msr	BASEPRI, r2
   20522:	f3bf 8f6f 	isb	sy
}
   20526:	4770      	bx	lr

00020528 <onoff_started_callback>:
	return &data->mgr[type];
   20528:	68c0      	ldr	r0, [r0, #12]
{
   2052a:	b410      	push	{r4}
	return &data->mgr[type];
   2052c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2052e:	241c      	movs	r4, #28
   20530:	fb03 0004 	mla	r0, r3, r4, r0
   20534:	2100      	movs	r1, #0
}
   20536:	bc10      	pop	{r4}
	notify(mgr, 0);
   20538:	4710      	bx	r2

0002053a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2053a:	2000      	movs	r0, #0
   2053c:	f7fd bc70 	b.w	1de20 <nrfx_clock_start>

00020540 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   20540:	2000      	movs	r0, #0
   20542:	f7fd bc9f 	b.w	1de84 <nrfx_clock_stop>

00020546 <blocking_start_callback>:
{
   20546:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   20548:	f7fe bc20 	b.w	1ed8c <z_impl_k_sem_give>

0002054c <api_stop>:
{
   2054c:	b538      	push	{r3, r4, r5, lr}
   2054e:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   20550:	240c      	movs	r4, #12
   20552:	434c      	muls	r4, r1
{
   20554:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   20556:	68c0      	ldr	r0, [r0, #12]
   20558:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2055c:	2180      	movs	r1, #128	; 0x80
   2055e:	4418      	add	r0, r3
   20560:	f7ff ff98 	bl	20494 <set_off_state>
	if (err < 0) {
   20564:	2800      	cmp	r0, #0
   20566:	db04      	blt.n	20572 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   20568:	6869      	ldr	r1, [r5, #4]
   2056a:	440c      	add	r4, r1
   2056c:	6863      	ldr	r3, [r4, #4]
   2056e:	4798      	blx	r3
	return 0;
   20570:	2000      	movs	r0, #0
}
   20572:	bd38      	pop	{r3, r4, r5, pc}

00020574 <api_start>:
{
   20574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20578:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   2057a:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2057c:	68c5      	ldr	r5, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
   2057e:	434c      	muls	r4, r1
{
   20580:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   20582:	f104 0040 	add.w	r0, r4, #64	; 0x40
   20586:	2180      	movs	r1, #128	; 0x80
   20588:	4428      	add	r0, r5
{
   2058a:	4690      	mov	r8, r2
   2058c:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   2058e:	f7ff ff9a 	bl	204c6 <set_starting_state>
	if (err < 0) {
   20592:	2800      	cmp	r0, #0
   20594:	db06      	blt.n	205a4 <api_start+0x30>
	subdata->cb = cb;
   20596:	4425      	add	r5, r4
	subdata->user_data = user_data;
   20598:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2059c:	6873      	ldr	r3, [r6, #4]
   2059e:	591b      	ldr	r3, [r3, r4]
   205a0:	4798      	blx	r3
	return 0;
   205a2:	2000      	movs	r0, #0
}
   205a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000205a8 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   205a8:	4770      	bx	lr

000205aa <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   205aa:	4770      	bx	lr

000205ac <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   205ac:	f7e5 be64 	b.w	6278 <_DoInit>

000205b0 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   205b0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   205b2:	f7ff fffb 	bl	205ac <SEGGER_RTT_Init>

	return 0;
}
   205b6:	2000      	movs	r0, #0
   205b8:	bd08      	pop	{r3, pc}

000205ba <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   205ba:	b538      	push	{r3, r4, r5, lr}
   205bc:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   205be:	42ab      	cmp	r3, r5
{
   205c0:	4611      	mov	r1, r2
   205c2:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   205c4:	d804      	bhi.n	205d0 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   205c6:	461a      	mov	r2, r3
   205c8:	f001 f90d 	bl	217e6 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   205cc:	4620      	mov	r0, r4
   205ce:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   205d0:	2400      	movs	r4, #0
   205d2:	e7fb      	b.n	205cc <_copy+0x12>

000205d4 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   205d4:	f001 b932 	b.w	2183c <memset>

000205d8 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   205d8:	09c3      	lsrs	r3, r0, #7
   205da:	005a      	lsls	r2, r3, #1
   205dc:	4413      	add	r3, r2
   205de:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   205e2:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   205e6:	b2c0      	uxtb	r0, r0
   205e8:	4770      	bx	lr

000205ea <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   205ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   205ee:	4606      	mov	r6, r0
   205f0:	b0a9      	sub	sp, #164	; 0xa4
   205f2:	4688      	mov	r8, r1
   205f4:	4614      	mov	r4, r2
   205f6:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   205f8:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   205fc:	f7e5 fec2 	bl	6384 <uECC_get_rng>
		if (!rng_function ||
   20600:	4603      	mov	r3, r0
   20602:	2800      	cmp	r0, #0
   20604:	d03e      	beq.n	20684 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   20606:	2140      	movs	r1, #64	; 0x40
   20608:	a808      	add	r0, sp, #32
   2060a:	4798      	blx	r3
		if (!rng_function ||
   2060c:	b3d0      	cbz	r0, 20684 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   2060e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   20612:	f112 031f 	adds.w	r3, r2, #31
   20616:	bf48      	it	mi
   20618:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   2061c:	466d      	mov	r5, sp
   2061e:	464a      	mov	r2, r9
   20620:	a908      	add	r1, sp, #32
   20622:	4628      	mov	r0, r5
   20624:	f343 1347 	sbfx	r3, r3, #5, #8
   20628:	f000 fa03 	bl	20a32 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   2062c:	4622      	mov	r2, r4
   2062e:	4629      	mov	r1, r5
   20630:	a818      	add	r0, sp, #96	; 0x60
   20632:	f000 fe19 	bl	21268 <EccPoint_compute_public_key>
   20636:	b318      	cbz	r0, 20680 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   20638:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   2063c:	1dd9      	adds	r1, r3, #7
   2063e:	bf48      	it	mi
   20640:	f103 010e 	addmi.w	r1, r3, #14
   20644:	462a      	mov	r2, r5
   20646:	4640      	mov	r0, r8
   20648:	10c9      	asrs	r1, r1, #3
   2064a:	f000 fe35 	bl	212b8 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   2064e:	f994 1001 	ldrsb.w	r1, [r4, #1]
   20652:	aa18      	add	r2, sp, #96	; 0x60
   20654:	4630      	mov	r0, r6
   20656:	f000 fe2f 	bl	212b8 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2065a:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   2065e:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   20662:	ab18      	add	r3, sp, #96	; 0x60
   20664:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   20668:	1870      	adds	r0, r6, r1
   2066a:	f000 fe25 	bl	212b8 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   2066e:	2220      	movs	r2, #32
   20670:	2100      	movs	r1, #0
   20672:	4628      	mov	r0, r5
   20674:	f001 f8e2 	bl	2183c <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   20678:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   2067a:	b029      	add	sp, #164	; 0xa4
   2067c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   20680:	3f01      	subs	r7, #1
   20682:	d1bb      	bne.n	205fc <uECC_make_key+0x12>
        		return 0;
   20684:	2000      	movs	r0, #0
   20686:	e7f8      	b.n	2067a <uECC_make_key+0x90>

00020688 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   20688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2068c:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   2068e:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   20692:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   20696:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   2069a:	b0a4      	sub	sp, #144	; 0x90
   2069c:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   2069e:	1dda      	adds	r2, r3, #7
   206a0:	bf48      	it	mi
   206a2:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   206a6:	ad04      	add	r5, sp, #16
{
   206a8:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   206aa:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   206ac:	4628      	mov	r0, r5
   206ae:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   206b0:	9502      	str	r5, [sp, #8]
   206b2:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   206b4:	f000 fe14 	bl	212e0 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   206b8:	463a      	mov	r2, r7
   206ba:	4649      	mov	r1, r9
   206bc:	a814      	add	r0, sp, #80	; 0x50
   206be:	f000 fe0f 	bl	212e0 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   206c2:	ab14      	add	r3, sp, #80	; 0x50
   206c4:	eb09 0107 	add.w	r1, r9, r7
   206c8:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   206cc:	463a      	mov	r2, r7
   206ce:	f000 fe07 	bl	212e0 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   206d2:	4623      	mov	r3, r4
   206d4:	4632      	mov	r2, r6
   206d6:	4629      	mov	r1, r5
   206d8:	4628      	mov	r0, r5
   206da:	f000 fd99 	bl	21210 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   206de:	fab0 f080 	clz	r0, r0
   206e2:	9401      	str	r4, [sp, #4]
   206e4:	ab24      	add	r3, sp, #144	; 0x90
   206e6:	0940      	lsrs	r0, r0, #5
   206e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   206ec:	8863      	ldrh	r3, [r4, #2]
   206ee:	3301      	adds	r3, #1
   206f0:	b21b      	sxth	r3, r3
   206f2:	9300      	str	r3, [sp, #0]
   206f4:	a914      	add	r1, sp, #80	; 0x50
   206f6:	2300      	movs	r3, #0
   206f8:	f850 2c88 	ldr.w	r2, [r0, #-136]
   206fc:	4608      	mov	r0, r1
   206fe:	f000 fcb8 	bl	21072 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   20702:	aa14      	add	r2, sp, #80	; 0x50
   20704:	4639      	mov	r1, r7
   20706:	4640      	mov	r0, r8
   20708:	f000 fdd6 	bl	212b8 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   2070c:	4621      	mov	r1, r4
   2070e:	a814      	add	r0, sp, #80	; 0x50
   20710:	f000 fc24 	bl	20f5c <EccPoint_isZero>
   20714:	af02      	add	r7, sp, #8
   20716:	4604      	mov	r4, r0
   20718:	2208      	movs	r2, #8
   2071a:	2100      	movs	r1, #0
   2071c:	4638      	mov	r0, r7
   2071e:	f001 f88d 	bl	2183c <memset>
   20722:	2220      	movs	r2, #32
   20724:	2100      	movs	r1, #0
   20726:	4630      	mov	r0, r6
   20728:	f001 f888 	bl	2183c <memset>
   2072c:	2220      	movs	r2, #32
   2072e:	2100      	movs	r1, #0
   20730:	4628      	mov	r0, r5
   20732:	f001 f883 	bl	2183c <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   20736:	fab4 f084 	clz	r0, r4
   2073a:	0940      	lsrs	r0, r0, #5
   2073c:	b024      	add	sp, #144	; 0x90
   2073e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00020742 <uECC_vli_add>:
{
   20742:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   20744:	2400      	movs	r4, #0
{
   20746:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   20748:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2074a:	b265      	sxtb	r5, r4
   2074c:	42ab      	cmp	r3, r5
   2074e:	dc00      	bgt.n	20752 <uECC_vli_add+0x10>
}
   20750:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   20752:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   20756:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   2075a:	443d      	add	r5, r7
   2075c:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   2075e:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   20760:	bf8c      	ite	hi
   20762:	2701      	movhi	r7, #1
   20764:	2700      	movls	r7, #0
		result[i] = sum;
   20766:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2076a:	bf18      	it	ne
   2076c:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   2076e:	3401      	adds	r4, #1
   20770:	e7eb      	b.n	2074a <uECC_vli_add+0x8>

00020772 <uECC_vli_rshift1>:
	vli += num_words;
   20772:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   20776:	2300      	movs	r3, #0
	while (vli-- > end) {
   20778:	4288      	cmp	r0, r1
   2077a:	d300      	bcc.n	2077e <uECC_vli_rshift1+0xc>
}
   2077c:	4770      	bx	lr
		uECC_word_t temp = *vli;
   2077e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   20782:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   20786:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   20788:	07d3      	lsls	r3, r2, #31
   2078a:	e7f5      	b.n	20778 <uECC_vli_rshift1+0x6>

0002078c <vli_modInv_update>:
	if (!EVEN(uv)) {
   2078c:	6803      	ldr	r3, [r0, #0]
{
   2078e:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   20790:	f013 0601 	ands.w	r6, r3, #1
{
   20794:	4605      	mov	r5, r0
   20796:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   20798:	d005      	beq.n	207a6 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   2079a:	4613      	mov	r3, r2
   2079c:	460a      	mov	r2, r1
   2079e:	4601      	mov	r1, r0
   207a0:	f7ff ffcf 	bl	20742 <uECC_vli_add>
   207a4:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   207a6:	4621      	mov	r1, r4
   207a8:	4628      	mov	r0, r5
   207aa:	f7ff ffe2 	bl	20772 <uECC_vli_rshift1>
	if (carry) {
   207ae:	b146      	cbz	r6, 207c2 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   207b0:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   207b4:	3a01      	subs	r2, #1
   207b6:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   207ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   207be:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   207c2:	bd70      	pop	{r4, r5, r6, pc}

000207c4 <uECC_vli_mult>:
{
   207c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   207c8:	2500      	movs	r5, #0
{
   207ca:	b087      	sub	sp, #28
   207cc:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   207d0:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   207d2:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   207d4:	fa4f f885 	sxtb.w	r8, r5
   207d8:	4543      	cmp	r3, r8
   207da:	dc16      	bgt.n	2080a <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   207dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   207e0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   207e4:	9502      	str	r5, [sp, #8]
   207e6:	f04f 0a00 	mov.w	sl, #0
   207ea:	9e02      	ldr	r6, [sp, #8]
   207ec:	fa53 fe8a 	uxtab	lr, r3, sl
   207f0:	fa4f fe8e 	sxtb.w	lr, lr
   207f4:	45b6      	cmp	lr, r6
   207f6:	fa5f f58a 	uxtb.w	r5, sl
   207fa:	db2d      	blt.n	20858 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   207fc:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   20800:	f840 2c04 	str.w	r2, [r0, #-4]
}
   20804:	b007      	add	sp, #28
   20806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2080a:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   2080c:	f04f 0c00 	mov.w	ip, #0
   20810:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   20814:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   20816:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   2081a:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   2081c:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   20820:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   20824:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   20828:	fba7 ab06 	umull	sl, fp, r7, r6
   2082c:	eb1a 0601 	adds.w	r6, sl, r1
   20830:	f10c 0c01 	add.w	ip, ip, #1
   20834:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   20838:	fa4f fa8c 	sxtb.w	sl, ip
   2083c:	bf2c      	ite	cs
   2083e:	2201      	movcs	r2, #1
   20840:	2200      	movcc	r2, #0
   20842:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   20844:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   20846:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   20848:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   2084a:	dde4      	ble.n	20816 <uECC_vli_mult+0x52>
		result[k] = r0;
   2084c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   20850:	463a      	mov	r2, r7
   20852:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   20854:	4674      	mov	r4, lr
   20856:	e7bd      	b.n	207d4 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   20858:	3501      	adds	r5, #1
   2085a:	9900      	ldr	r1, [sp, #0]
   2085c:	9e01      	ldr	r6, [sp, #4]
   2085e:	fa4f fc85 	sxtb.w	ip, r5
   20862:	ebae 0b0c 	sub.w	fp, lr, ip
   20866:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   2086a:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   2086e:	4621      	mov	r1, r4
   20870:	2400      	movs	r4, #0
   20872:	459c      	cmp	ip, r3
   20874:	db05      	blt.n	20882 <uECC_vli_mult+0xbe>
		result[k] = r0;
   20876:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   2087a:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   2087e:	460a      	mov	r2, r1
   20880:	e7b3      	b.n	207ea <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   20882:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   20886:	f855 7b04 	ldr.w	r7, [r5], #4
   2088a:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   2088e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   20892:	fba7 6706 	umull	r6, r7, r7, r6
   20896:	eb16 0801 	adds.w	r8, r6, r1
   2089a:	eb57 0902 	adcs.w	r9, r7, r2
   2089e:	bf2c      	ite	cs
   208a0:	2201      	movcs	r2, #1
   208a2:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   208a4:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   208a8:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   208aa:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   208ac:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   208ae:	fa4f fc8c 	sxtb.w	ip, ip
   208b2:	e7de      	b.n	20872 <uECC_vli_mult+0xae>

000208b4 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   208b4:	2300      	movs	r3, #0
{
   208b6:	b510      	push	{r4, lr}
		 vli[i] = 0;
   208b8:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   208ba:	b25a      	sxtb	r2, r3
   208bc:	4291      	cmp	r1, r2
   208be:	dc00      	bgt.n	208c2 <uECC_vli_clear+0xe>
}
   208c0:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   208c2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   208c6:	3301      	adds	r3, #1
   208c8:	e7f7      	b.n	208ba <uECC_vli_clear+0x6>

000208ca <uECC_vli_isZero>:
{
   208ca:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   208cc:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   208ce:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   208d0:	b25c      	sxtb	r4, r3
   208d2:	42a1      	cmp	r1, r4
   208d4:	dc03      	bgt.n	208de <uECC_vli_isZero+0x14>
}
   208d6:	fab2 f082 	clz	r0, r2
   208da:	0940      	lsrs	r0, r0, #5
   208dc:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   208de:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   208e2:	3301      	adds	r3, #1
   208e4:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   208e6:	e7f3      	b.n	208d0 <uECC_vli_isZero+0x6>

000208e8 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   208e8:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   208ea:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   208ec:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   208f0:	f001 011f 	and.w	r1, r1, #31
   208f4:	fa03 f101 	lsl.w	r1, r3, r1
}
   208f8:	4008      	ands	r0, r1
   208fa:	4770      	bx	lr

000208fc <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   208fc:	3901      	subs	r1, #1
   208fe:	b24b      	sxtb	r3, r1
{
   20900:	4602      	mov	r2, r0
   20902:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   20906:	2b00      	cmp	r3, #0
   20908:	da03      	bge.n	20912 <uECC_vli_numBits+0x16>
	return (i + 1);
   2090a:	3301      	adds	r3, #1
   2090c:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   2090e:	b938      	cbnz	r0, 20920 <uECC_vli_numBits+0x24>
   20910:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   20912:	f851 0904 	ldr.w	r0, [r1], #-4
   20916:	2800      	cmp	r0, #0
   20918:	d1f7      	bne.n	2090a <uECC_vli_numBits+0xe>
   2091a:	3b01      	subs	r3, #1
   2091c:	b25b      	sxtb	r3, r3
   2091e:	e7f2      	b.n	20906 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   20920:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   20924:	3b01      	subs	r3, #1
   20926:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   2092a:	2300      	movs	r3, #0
   2092c:	b922      	cbnz	r2, 20938 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   2092e:	3801      	subs	r0, #1
   20930:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   20934:	b200      	sxth	r0, r0
}
   20936:	4770      	bx	lr
		digit >>= 1;
   20938:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   2093a:	3301      	adds	r3, #1
   2093c:	e7f6      	b.n	2092c <uECC_vli_numBits+0x30>

0002093e <uECC_vli_set>:
{
   2093e:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   20940:	2300      	movs	r3, #0
   20942:	b25c      	sxtb	r4, r3
   20944:	42a2      	cmp	r2, r4
   20946:	dc00      	bgt.n	2094a <uECC_vli_set+0xc>
}
   20948:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   2094a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   2094e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   20952:	3301      	adds	r3, #1
   20954:	e7f5      	b.n	20942 <uECC_vli_set+0x4>

00020956 <uECC_vli_cmp_unsafe>:
{
   20956:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   20958:	3a01      	subs	r2, #1
   2095a:	b253      	sxtb	r3, r2
   2095c:	009a      	lsls	r2, r3, #2
   2095e:	2b00      	cmp	r3, #0
   20960:	da01      	bge.n	20966 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   20962:	2000      	movs	r0, #0
}
   20964:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   20966:	5885      	ldr	r5, [r0, r2]
   20968:	588c      	ldr	r4, [r1, r2]
   2096a:	42a5      	cmp	r5, r4
   2096c:	d805      	bhi.n	2097a <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   2096e:	f1a2 0204 	sub.w	r2, r2, #4
   20972:	d304      	bcc.n	2097e <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   20974:	3b01      	subs	r3, #1
   20976:	b25b      	sxtb	r3, r3
   20978:	e7f1      	b.n	2095e <uECC_vli_cmp_unsafe+0x8>
			return 1;
   2097a:	2001      	movs	r0, #1
   2097c:	e7f2      	b.n	20964 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   2097e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20982:	e7ef      	b.n	20964 <uECC_vli_cmp_unsafe+0xe>

00020984 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   20984:	3a01      	subs	r2, #1
   20986:	b253      	sxtb	r3, r2
{
   20988:	b570      	push	{r4, r5, r6, lr}
   2098a:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   2098c:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   2098e:	2b00      	cmp	r3, #0
   20990:	da03      	bge.n	2099a <uECC_vli_equal+0x16>
}
   20992:	1e20      	subs	r0, r4, #0
   20994:	bf18      	it	ne
   20996:	2001      	movne	r0, #1
   20998:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   2099a:	5885      	ldr	r5, [r0, r2]
   2099c:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   2099e:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   209a0:	4075      	eors	r5, r6
   209a2:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   209a4:	b25b      	sxtb	r3, r3
   209a6:	3a04      	subs	r2, #4
   209a8:	e7f1      	b.n	2098e <uECC_vli_equal+0xa>

000209aa <uECC_vli_sub>:
{
   209aa:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   209ac:	2400      	movs	r4, #0
{
   209ae:	4606      	mov	r6, r0
   209b0:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   209b2:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   209b4:	b265      	sxtb	r5, r4
   209b6:	45ac      	cmp	ip, r5
   209b8:	dc00      	bgt.n	209bc <uECC_vli_sub+0x12>
}
   209ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   209bc:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   209c0:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   209c4:	1a3d      	subs	r5, r7, r0
   209c6:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   209c8:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   209ca:	bf34      	ite	cc
   209cc:	2701      	movcc	r7, #1
   209ce:	2700      	movcs	r7, #0
		result[i] = diff;
   209d0:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   209d4:	bf18      	it	ne
   209d6:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   209d8:	3401      	adds	r4, #1
   209da:	e7eb      	b.n	209b4 <uECC_vli_sub+0xa>

000209dc <uECC_vli_modAdd>:
{
   209dc:	b570      	push	{r4, r5, r6, lr}
   209de:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   209e2:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   209e4:	4633      	mov	r3, r6
{
   209e6:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   209e8:	f7ff feab 	bl	20742 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   209ec:	b930      	cbnz	r0, 209fc <uECC_vli_modAdd+0x20>
   209ee:	4632      	mov	r2, r6
   209f0:	4621      	mov	r1, r4
   209f2:	4628      	mov	r0, r5
   209f4:	f7ff ffaf 	bl	20956 <uECC_vli_cmp_unsafe>
   209f8:	2801      	cmp	r0, #1
   209fa:	d007      	beq.n	20a0c <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   209fc:	4633      	mov	r3, r6
   209fe:	462a      	mov	r2, r5
   20a00:	4621      	mov	r1, r4
   20a02:	4620      	mov	r0, r4
}
   20a04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   20a08:	f7ff bfcf 	b.w	209aa <uECC_vli_sub>
}
   20a0c:	bd70      	pop	{r4, r5, r6, pc}

00020a0e <uECC_vli_modSub>:
{
   20a0e:	b570      	push	{r4, r5, r6, lr}
   20a10:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   20a14:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   20a16:	4633      	mov	r3, r6
{
   20a18:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   20a1a:	f7ff ffc6 	bl	209aa <uECC_vli_sub>
	if (l_borrow) {
   20a1e:	b138      	cbz	r0, 20a30 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   20a20:	4633      	mov	r3, r6
   20a22:	462a      	mov	r2, r5
   20a24:	4621      	mov	r1, r4
   20a26:	4620      	mov	r0, r4
}
   20a28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   20a2c:	f7ff be89 	b.w	20742 <uECC_vli_add>
}
   20a30:	bd70      	pop	{r4, r5, r6, pc}

00020a32 <uECC_vli_mmod>:
{
   20a32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a36:	b0a5      	sub	sp, #148	; 0x94
   20a38:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   20a3a:	ab14      	add	r3, sp, #80	; 0x50
   20a3c:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   20a40:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   20a42:	4629      	mov	r1, r5
   20a44:	4610      	mov	r0, r2
{
   20a46:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   20a48:	f7ff ff58 	bl	208fc <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   20a4c:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   20a50:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   20a52:	2c00      	cmp	r4, #0
   20a54:	4621      	mov	r1, r4
   20a56:	bfb8      	it	lt
   20a58:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   20a5c:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   20a5e:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   20a62:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   20a66:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   20a68:	f004 071f 	and.w	r7, r4, #31
   20a6c:	bf58      	it	pl
   20a6e:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   20a70:	f7ff ff20 	bl	208b4 <uECC_vli_clear>
	if (bit_shift > 0) {
   20a74:	2f00      	cmp	r7, #0
   20a76:	b208      	sxth	r0, r1
   20a78:	dd2b      	ble.n	20ad2 <uECC_vli_mmod+0xa0>
   20a7a:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   20a7c:	2200      	movs	r2, #0
   20a7e:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   20a82:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   20a86:	4613      	mov	r3, r2
   20a88:	429d      	cmp	r5, r3
   20a8a:	d817      	bhi.n	20abc <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   20a8c:	006b      	lsls	r3, r5, #1
   20a8e:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   20a90:	ab04      	add	r3, sp, #16
   20a92:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   20a96:	1e6f      	subs	r7, r5, #1
   20a98:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   20a9a:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   20a9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   20aa0:	2c00      	cmp	r4, #0
   20aa2:	da54      	bge.n	20b4e <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   20aa4:	ab24      	add	r3, sp, #144	; 0x90
   20aa6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   20aaa:	462a      	mov	r2, r5
   20aac:	f856 1c88 	ldr.w	r1, [r6, #-136]
   20ab0:	4640      	mov	r0, r8
   20ab2:	f7ff ff44 	bl	2093e <uECC_vli_set>
}
   20ab6:	b025      	add	sp, #148	; 0x94
   20ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   20abc:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   20ac0:	fa0c f007 	lsl.w	r0, ip, r7
   20ac4:	4302      	orrs	r2, r0
   20ac6:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   20aca:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   20acc:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   20ad0:	e7da      	b.n	20a88 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   20ad2:	ab04      	add	r3, sp, #16
   20ad4:	462a      	mov	r2, r5
   20ad6:	4631      	mov	r1, r6
   20ad8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   20adc:	f7ff ff2f 	bl	2093e <uECC_vli_set>
   20ae0:	e7d4      	b.n	20a8c <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   20ae2:	fa0f fe82 	sxth.w	lr, r2
   20ae6:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   20aea:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   20aee:	ab24      	add	r3, sp, #144	; 0x90
   20af0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   20af4:	3001      	adds	r0, #1
   20af6:	f852 3c80 	ldr.w	r3, [r2, #-128]
   20afa:	440b      	add	r3, r1
   20afc:	ebbb 0303 	subs.w	r3, fp, r3
   20b00:	bf34      	ite	cc
   20b02:	2201      	movcc	r2, #1
   20b04:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   20b06:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   20b08:	bf18      	it	ne
   20b0a:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   20b0c:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   20b10:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   20b14:	9b01      	ldr	r3, [sp, #4]
   20b16:	b242      	sxtb	r2, r0
   20b18:	429a      	cmp	r2, r3
   20b1a:	dbe2      	blt.n	20ae2 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   20b1c:	1a73      	subs	r3, r6, r1
   20b1e:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   20b20:	4629      	mov	r1, r5
   20b22:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   20b24:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   20b26:	f7ff fe24 	bl	20772 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   20b2a:	ab24      	add	r3, sp, #144	; 0x90
   20b2c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   20b30:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   20b32:	f853 2c80 	ldr.w	r2, [r3, #-128]
   20b36:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   20b3a:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   20b3c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   20b40:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   20b42:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   20b46:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   20b48:	f7ff fe13 	bl	20772 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   20b4c:	e7a8      	b.n	20aa0 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   20b4e:	ab24      	add	r3, sp, #144	; 0x90
   20b50:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   20b52:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   20b56:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   20b58:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   20b5c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   20b60:	e7d8      	b.n	20b14 <uECC_vli_mmod+0xe2>

00020b62 <uECC_vli_modMult_fast>:
{
   20b62:	b530      	push	{r4, r5, lr}
   20b64:	461c      	mov	r4, r3
   20b66:	b091      	sub	sp, #68	; 0x44
   20b68:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   20b6a:	f993 3000 	ldrsb.w	r3, [r3]
   20b6e:	4668      	mov	r0, sp
   20b70:	f7ff fe28 	bl	207c4 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   20b74:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   20b78:	4669      	mov	r1, sp
   20b7a:	4628      	mov	r0, r5
   20b7c:	4798      	blx	r3
}
   20b7e:	b011      	add	sp, #68	; 0x44
   20b80:	bd30      	pop	{r4, r5, pc}

00020b82 <uECC_vli_modSquare_fast>:
{
   20b82:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   20b84:	460a      	mov	r2, r1
   20b86:	f7ff bfec 	b.w	20b62 <uECC_vli_modMult_fast>

00020b8a <double_jacobian_default>:
{
   20b8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   20b8e:	f993 6000 	ldrsb.w	r6, [r3]
{
   20b92:	b092      	sub	sp, #72	; 0x48
   20b94:	4604      	mov	r4, r0
   20b96:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   20b98:	4610      	mov	r0, r2
   20b9a:	4631      	mov	r1, r6
{
   20b9c:	4615      	mov	r5, r2
   20b9e:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   20ba0:	f7ff fe93 	bl	208ca <uECC_vli_isZero>
   20ba4:	2800      	cmp	r0, #0
   20ba6:	f040 8091 	bne.w	20ccc <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   20baa:	463a      	mov	r2, r7
   20bac:	4649      	mov	r1, r9
   20bae:	a802      	add	r0, sp, #8
   20bb0:	f7ff ffe7 	bl	20b82 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   20bb4:	463b      	mov	r3, r7
   20bb6:	aa02      	add	r2, sp, #8
   20bb8:	4621      	mov	r1, r4
   20bba:	a80a      	add	r0, sp, #40	; 0x28
   20bbc:	f7ff ffd1 	bl	20b62 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   20bc0:	a902      	add	r1, sp, #8
   20bc2:	4608      	mov	r0, r1
   20bc4:	463a      	mov	r2, r7
   20bc6:	f7ff ffdc 	bl	20b82 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   20bca:	463b      	mov	r3, r7
   20bcc:	462a      	mov	r2, r5
   20bce:	4649      	mov	r1, r9
   20bd0:	4648      	mov	r0, r9
   20bd2:	f7ff ffc6 	bl	20b62 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   20bd6:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   20bda:	463a      	mov	r2, r7
   20bdc:	4629      	mov	r1, r5
   20bde:	4628      	mov	r0, r5
   20be0:	f7ff ffcf 	bl	20b82 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   20be4:	4643      	mov	r3, r8
   20be6:	462a      	mov	r2, r5
   20be8:	4621      	mov	r1, r4
   20bea:	4620      	mov	r0, r4
   20bec:	9600      	str	r6, [sp, #0]
   20bee:	f7ff fef5 	bl	209dc <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   20bf2:	4643      	mov	r3, r8
   20bf4:	462a      	mov	r2, r5
   20bf6:	4629      	mov	r1, r5
   20bf8:	4628      	mov	r0, r5
   20bfa:	9600      	str	r6, [sp, #0]
   20bfc:	f7ff feee 	bl	209dc <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   20c00:	4643      	mov	r3, r8
   20c02:	462a      	mov	r2, r5
   20c04:	4621      	mov	r1, r4
   20c06:	4628      	mov	r0, r5
   20c08:	9600      	str	r6, [sp, #0]
   20c0a:	f7ff ff00 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   20c0e:	463b      	mov	r3, r7
   20c10:	462a      	mov	r2, r5
   20c12:	4621      	mov	r1, r4
   20c14:	4620      	mov	r0, r4
   20c16:	f7ff ffa4 	bl	20b62 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   20c1a:	4643      	mov	r3, r8
   20c1c:	4622      	mov	r2, r4
   20c1e:	4621      	mov	r1, r4
   20c20:	4628      	mov	r0, r5
   20c22:	9600      	str	r6, [sp, #0]
   20c24:	f7ff feda 	bl	209dc <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   20c28:	4643      	mov	r3, r8
   20c2a:	9600      	str	r6, [sp, #0]
   20c2c:	462a      	mov	r2, r5
   20c2e:	4621      	mov	r1, r4
   20c30:	4620      	mov	r0, r4
   20c32:	f7ff fed3 	bl	209dc <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   20c36:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   20c38:	07db      	lsls	r3, r3, #31
   20c3a:	d54a      	bpl.n	20cd2 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   20c3c:	4633      	mov	r3, r6
   20c3e:	4642      	mov	r2, r8
   20c40:	4621      	mov	r1, r4
   20c42:	4620      	mov	r0, r4
   20c44:	f7ff fd7d 	bl	20742 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   20c48:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   20c4a:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   20c4c:	4620      	mov	r0, r4
   20c4e:	f7ff fd90 	bl	20772 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   20c52:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   20c56:	3b01      	subs	r3, #1
   20c58:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   20c5c:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   20c60:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   20c64:	463a      	mov	r2, r7
   20c66:	4621      	mov	r1, r4
   20c68:	4628      	mov	r0, r5
   20c6a:	f7ff ff8a 	bl	20b82 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   20c6e:	4643      	mov	r3, r8
   20c70:	aa0a      	add	r2, sp, #40	; 0x28
   20c72:	4629      	mov	r1, r5
   20c74:	4628      	mov	r0, r5
   20c76:	9600      	str	r6, [sp, #0]
   20c78:	f7ff fec9 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   20c7c:	4643      	mov	r3, r8
   20c7e:	aa0a      	add	r2, sp, #40	; 0x28
   20c80:	4629      	mov	r1, r5
   20c82:	4628      	mov	r0, r5
   20c84:	9600      	str	r6, [sp, #0]
   20c86:	f7ff fec2 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   20c8a:	a90a      	add	r1, sp, #40	; 0x28
   20c8c:	4608      	mov	r0, r1
   20c8e:	4643      	mov	r3, r8
   20c90:	462a      	mov	r2, r5
   20c92:	9600      	str	r6, [sp, #0]
   20c94:	f7ff febb 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   20c98:	463b      	mov	r3, r7
   20c9a:	aa0a      	add	r2, sp, #40	; 0x28
   20c9c:	4621      	mov	r1, r4
   20c9e:	4620      	mov	r0, r4
   20ca0:	f7ff ff5f 	bl	20b62 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   20ca4:	aa02      	add	r2, sp, #8
   20ca6:	4643      	mov	r3, r8
   20ca8:	4610      	mov	r0, r2
   20caa:	4621      	mov	r1, r4
   20cac:	9600      	str	r6, [sp, #0]
   20cae:	f7ff feae 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   20cb2:	4632      	mov	r2, r6
   20cb4:	4629      	mov	r1, r5
   20cb6:	4620      	mov	r0, r4
   20cb8:	f7ff fe41 	bl	2093e <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   20cbc:	4649      	mov	r1, r9
   20cbe:	4628      	mov	r0, r5
   20cc0:	f7ff fe3d 	bl	2093e <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   20cc4:	a902      	add	r1, sp, #8
   20cc6:	4648      	mov	r0, r9
   20cc8:	f7ff fe39 	bl	2093e <uECC_vli_set>
}
   20ccc:	b012      	add	sp, #72	; 0x48
   20cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   20cd2:	4631      	mov	r1, r6
   20cd4:	4620      	mov	r0, r4
   20cd6:	f7ff fd4c 	bl	20772 <uECC_vli_rshift1>
   20cda:	e7c3      	b.n	20c64 <double_jacobian_default+0xda>

00020cdc <x_side_default>:
{
   20cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ce0:	4615      	mov	r5, r2
   20ce2:	b08a      	sub	sp, #40	; 0x28
   20ce4:	4604      	mov	r4, r0
   20ce6:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   20ce8:	221c      	movs	r2, #28
   20cea:	2100      	movs	r1, #0
   20cec:	a803      	add	r0, sp, #12
   20cee:	f000 fda5 	bl	2183c <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   20cf2:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   20cf4:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   20cf8:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   20cfa:	462a      	mov	r2, r5
   20cfc:	4631      	mov	r1, r6
   20cfe:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   20d00:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   20d02:	f7ff ff3e 	bl	20b82 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   20d06:	463b      	mov	r3, r7
   20d08:	aa02      	add	r2, sp, #8
   20d0a:	4621      	mov	r1, r4
   20d0c:	4620      	mov	r0, r4
   20d0e:	f8cd 8000 	str.w	r8, [sp]
   20d12:	f7ff fe7c 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   20d16:	462b      	mov	r3, r5
   20d18:	4632      	mov	r2, r6
   20d1a:	4621      	mov	r1, r4
   20d1c:	4620      	mov	r0, r4
   20d1e:	f7ff ff20 	bl	20b62 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   20d22:	f8cd 8000 	str.w	r8, [sp]
   20d26:	463b      	mov	r3, r7
   20d28:	f105 0284 	add.w	r2, r5, #132	; 0x84
   20d2c:	4621      	mov	r1, r4
   20d2e:	4620      	mov	r0, r4
   20d30:	f7ff fe54 	bl	209dc <uECC_vli_modAdd>
}
   20d34:	b00a      	add	sp, #40	; 0x28
   20d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020d3a <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   20d3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20d3e:	b09a      	sub	sp, #104	; 0x68
   20d40:	4616      	mov	r6, r2
   20d42:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   20d46:	4644      	mov	r4, r8
{
   20d48:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   20d4a:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   20d4e:	9500      	str	r5, [sp, #0]
{
   20d50:	4607      	mov	r7, r0
   20d52:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   20d54:	4623      	mov	r3, r4
   20d56:	4602      	mov	r2, r0
   20d58:	4631      	mov	r1, r6
   20d5a:	a802      	add	r0, sp, #8
   20d5c:	f7ff fe57 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   20d60:	a902      	add	r1, sp, #8
   20d62:	4642      	mov	r2, r8
   20d64:	4608      	mov	r0, r1
   20d66:	f7ff ff0c 	bl	20b82 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   20d6a:	4643      	mov	r3, r8
   20d6c:	aa02      	add	r2, sp, #8
   20d6e:	4639      	mov	r1, r7
   20d70:	4638      	mov	r0, r7
   20d72:	f7ff fef6 	bl	20b62 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   20d76:	4643      	mov	r3, r8
   20d78:	aa02      	add	r2, sp, #8
   20d7a:	4631      	mov	r1, r6
   20d7c:	4630      	mov	r0, r6
   20d7e:	f7ff fef0 	bl	20b62 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   20d82:	4623      	mov	r3, r4
   20d84:	4652      	mov	r2, sl
   20d86:	4649      	mov	r1, r9
   20d88:	a802      	add	r0, sp, #8
   20d8a:	9500      	str	r5, [sp, #0]
   20d8c:	f7ff fe26 	bl	209dc <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   20d90:	4623      	mov	r3, r4
   20d92:	4652      	mov	r2, sl
   20d94:	4649      	mov	r1, r9
   20d96:	4648      	mov	r0, r9
   20d98:	9500      	str	r5, [sp, #0]
   20d9a:	f7ff fe38 	bl	20a0e <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   20d9e:	4623      	mov	r3, r4
   20da0:	463a      	mov	r2, r7
   20da2:	4631      	mov	r1, r6
   20da4:	a80a      	add	r0, sp, #40	; 0x28
   20da6:	9500      	str	r5, [sp, #0]
   20da8:	f7ff fe31 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   20dac:	4643      	mov	r3, r8
   20dae:	aa0a      	add	r2, sp, #40	; 0x28
   20db0:	4651      	mov	r1, sl
   20db2:	4650      	mov	r0, sl
   20db4:	f7ff fed5 	bl	20b62 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   20db8:	4623      	mov	r3, r4
   20dba:	4632      	mov	r2, r6
   20dbc:	4639      	mov	r1, r7
   20dbe:	a80a      	add	r0, sp, #40	; 0x28
   20dc0:	9500      	str	r5, [sp, #0]
   20dc2:	f7ff fe0b 	bl	209dc <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   20dc6:	4642      	mov	r2, r8
   20dc8:	4649      	mov	r1, r9
   20dca:	4630      	mov	r0, r6
   20dcc:	f7ff fed9 	bl	20b82 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   20dd0:	4623      	mov	r3, r4
   20dd2:	aa0a      	add	r2, sp, #40	; 0x28
   20dd4:	4631      	mov	r1, r6
   20dd6:	4630      	mov	r0, r6
   20dd8:	9500      	str	r5, [sp, #0]
   20dda:	f7ff fe18 	bl	20a0e <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   20dde:	4623      	mov	r3, r4
   20de0:	4632      	mov	r2, r6
   20de2:	4639      	mov	r1, r7
   20de4:	a812      	add	r0, sp, #72	; 0x48
   20de6:	9500      	str	r5, [sp, #0]
   20de8:	f7ff fe11 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   20dec:	4643      	mov	r3, r8
   20dee:	aa12      	add	r2, sp, #72	; 0x48
   20df0:	4649      	mov	r1, r9
   20df2:	4648      	mov	r0, r9
   20df4:	f7ff feb5 	bl	20b62 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   20df8:	4623      	mov	r3, r4
   20dfa:	4652      	mov	r2, sl
   20dfc:	4649      	mov	r1, r9
   20dfe:	4648      	mov	r0, r9
   20e00:	9500      	str	r5, [sp, #0]
   20e02:	f7ff fe04 	bl	20a0e <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   20e06:	4642      	mov	r2, r8
   20e08:	a902      	add	r1, sp, #8
   20e0a:	a812      	add	r0, sp, #72	; 0x48
   20e0c:	f7ff feb9 	bl	20b82 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   20e10:	a912      	add	r1, sp, #72	; 0x48
   20e12:	4623      	mov	r3, r4
   20e14:	aa0a      	add	r2, sp, #40	; 0x28
   20e16:	4608      	mov	r0, r1
   20e18:	9500      	str	r5, [sp, #0]
   20e1a:	f7ff fdf8 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   20e1e:	4623      	mov	r3, r4
   20e20:	463a      	mov	r2, r7
   20e22:	a912      	add	r1, sp, #72	; 0x48
   20e24:	a80a      	add	r0, sp, #40	; 0x28
   20e26:	9500      	str	r5, [sp, #0]
   20e28:	f7ff fdf1 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   20e2c:	a90a      	add	r1, sp, #40	; 0x28
   20e2e:	4643      	mov	r3, r8
   20e30:	aa02      	add	r2, sp, #8
   20e32:	4608      	mov	r0, r1
   20e34:	f7ff fe95 	bl	20b62 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   20e38:	4623      	mov	r3, r4
   20e3a:	4652      	mov	r2, sl
   20e3c:	a90a      	add	r1, sp, #40	; 0x28
   20e3e:	4650      	mov	r0, sl
   20e40:	9500      	str	r5, [sp, #0]
   20e42:	f7ff fde4 	bl	20a0e <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   20e46:	462a      	mov	r2, r5
   20e48:	a912      	add	r1, sp, #72	; 0x48
   20e4a:	4638      	mov	r0, r7
   20e4c:	f7ff fd77 	bl	2093e <uECC_vli_set>
}
   20e50:	b01a      	add	sp, #104	; 0x68
   20e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00020e56 <uECC_vli_modInv>:
{
   20e56:	b5f0      	push	{r4, r5, r6, r7, lr}
   20e58:	460f      	mov	r7, r1
   20e5a:	b0a1      	sub	sp, #132	; 0x84
   20e5c:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   20e5e:	4619      	mov	r1, r3
   20e60:	4638      	mov	r0, r7
{
   20e62:	4615      	mov	r5, r2
   20e64:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   20e66:	f7ff fd30 	bl	208ca <uECC_vli_isZero>
   20e6a:	b120      	cbz	r0, 20e76 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   20e6c:	4630      	mov	r0, r6
   20e6e:	f7ff fd21 	bl	208b4 <uECC_vli_clear>
}
   20e72:	b021      	add	sp, #132	; 0x84
   20e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   20e76:	4622      	mov	r2, r4
   20e78:	4639      	mov	r1, r7
   20e7a:	4668      	mov	r0, sp
   20e7c:	f7ff fd5f 	bl	2093e <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   20e80:	4629      	mov	r1, r5
   20e82:	a808      	add	r0, sp, #32
   20e84:	f7ff fd5b 	bl	2093e <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   20e88:	a810      	add	r0, sp, #64	; 0x40
   20e8a:	4621      	mov	r1, r4
   20e8c:	f7ff fd12 	bl	208b4 <uECC_vli_clear>
	u[0] = 1;
   20e90:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   20e92:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   20e94:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   20e96:	f7ff fd0d 	bl	208b4 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   20e9a:	4622      	mov	r2, r4
   20e9c:	a908      	add	r1, sp, #32
   20e9e:	4668      	mov	r0, sp
   20ea0:	f7ff fd59 	bl	20956 <uECC_vli_cmp_unsafe>
   20ea4:	b928      	cbnz	r0, 20eb2 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   20ea6:	4622      	mov	r2, r4
   20ea8:	a910      	add	r1, sp, #64	; 0x40
   20eaa:	4630      	mov	r0, r6
   20eac:	f7ff fd47 	bl	2093e <uECC_vli_set>
   20eb0:	e7df      	b.n	20e72 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   20eb2:	9b00      	ldr	r3, [sp, #0]
   20eb4:	07da      	lsls	r2, r3, #31
   20eb6:	d409      	bmi.n	20ecc <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   20eb8:	4621      	mov	r1, r4
   20eba:	4668      	mov	r0, sp
   20ebc:	f7ff fc59 	bl	20772 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   20ec0:	4622      	mov	r2, r4
   20ec2:	4629      	mov	r1, r5
   20ec4:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   20ec6:	f7ff fc61 	bl	2078c <vli_modInv_update>
   20eca:	e7e6      	b.n	20e9a <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   20ecc:	9b08      	ldr	r3, [sp, #32]
   20ece:	07db      	lsls	r3, r3, #31
   20ed0:	d407      	bmi.n	20ee2 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   20ed2:	4621      	mov	r1, r4
   20ed4:	a808      	add	r0, sp, #32
   20ed6:	f7ff fc4c 	bl	20772 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   20eda:	4622      	mov	r2, r4
   20edc:	4629      	mov	r1, r5
   20ede:	a818      	add	r0, sp, #96	; 0x60
   20ee0:	e7f1      	b.n	20ec6 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   20ee2:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   20ee4:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   20ee6:	dd1c      	ble.n	20f22 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   20ee8:	aa08      	add	r2, sp, #32
   20eea:	4669      	mov	r1, sp
   20eec:	4668      	mov	r0, sp
   20eee:	f7ff fd5c 	bl	209aa <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   20ef2:	4621      	mov	r1, r4
   20ef4:	4668      	mov	r0, sp
   20ef6:	f7ff fc3c 	bl	20772 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   20efa:	4622      	mov	r2, r4
   20efc:	a918      	add	r1, sp, #96	; 0x60
   20efe:	a810      	add	r0, sp, #64	; 0x40
   20f00:	f7ff fd29 	bl	20956 <uECC_vli_cmp_unsafe>
   20f04:	2800      	cmp	r0, #0
   20f06:	da05      	bge.n	20f14 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   20f08:	a910      	add	r1, sp, #64	; 0x40
   20f0a:	4623      	mov	r3, r4
   20f0c:	462a      	mov	r2, r5
   20f0e:	4608      	mov	r0, r1
   20f10:	f7ff fc17 	bl	20742 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   20f14:	a910      	add	r1, sp, #64	; 0x40
   20f16:	4623      	mov	r3, r4
   20f18:	aa18      	add	r2, sp, #96	; 0x60
   20f1a:	4608      	mov	r0, r1
   20f1c:	f7ff fd45 	bl	209aa <uECC_vli_sub>
   20f20:	e7ce      	b.n	20ec0 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   20f22:	a908      	add	r1, sp, #32
   20f24:	466a      	mov	r2, sp
   20f26:	4608      	mov	r0, r1
   20f28:	f7ff fd3f 	bl	209aa <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   20f2c:	4621      	mov	r1, r4
   20f2e:	a808      	add	r0, sp, #32
   20f30:	f7ff fc1f 	bl	20772 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   20f34:	4622      	mov	r2, r4
   20f36:	a910      	add	r1, sp, #64	; 0x40
   20f38:	a818      	add	r0, sp, #96	; 0x60
   20f3a:	f7ff fd0c 	bl	20956 <uECC_vli_cmp_unsafe>
   20f3e:	2800      	cmp	r0, #0
   20f40:	da05      	bge.n	20f4e <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   20f42:	a918      	add	r1, sp, #96	; 0x60
   20f44:	4623      	mov	r3, r4
   20f46:	462a      	mov	r2, r5
   20f48:	4608      	mov	r0, r1
   20f4a:	f7ff fbfa 	bl	20742 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   20f4e:	a918      	add	r1, sp, #96	; 0x60
   20f50:	4623      	mov	r3, r4
   20f52:	aa10      	add	r2, sp, #64	; 0x40
   20f54:	4608      	mov	r0, r1
   20f56:	f7ff fd28 	bl	209aa <uECC_vli_sub>
   20f5a:	e7be      	b.n	20eda <uECC_vli_modInv+0x84>

00020f5c <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   20f5c:	7809      	ldrb	r1, [r1, #0]
   20f5e:	0049      	lsls	r1, r1, #1
   20f60:	b249      	sxtb	r1, r1
   20f62:	f7ff bcb2 	b.w	208ca <uECC_vli_isZero>

00020f66 <apply_z>:
{
   20f66:	b5f0      	push	{r4, r5, r6, r7, lr}
   20f68:	4615      	mov	r5, r2
   20f6a:	b089      	sub	sp, #36	; 0x24
   20f6c:	461c      	mov	r4, r3
   20f6e:	4607      	mov	r7, r0
   20f70:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   20f72:	461a      	mov	r2, r3
   20f74:	4629      	mov	r1, r5
   20f76:	4668      	mov	r0, sp
   20f78:	f7ff fe03 	bl	20b82 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   20f7c:	4623      	mov	r3, r4
   20f7e:	466a      	mov	r2, sp
   20f80:	4639      	mov	r1, r7
   20f82:	4638      	mov	r0, r7
   20f84:	f7ff fded 	bl	20b62 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   20f88:	4623      	mov	r3, r4
   20f8a:	462a      	mov	r2, r5
   20f8c:	4669      	mov	r1, sp
   20f8e:	4668      	mov	r0, sp
   20f90:	f7ff fde7 	bl	20b62 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   20f94:	4623      	mov	r3, r4
   20f96:	466a      	mov	r2, sp
   20f98:	4631      	mov	r1, r6
   20f9a:	4630      	mov	r0, r6
   20f9c:	f7ff fde1 	bl	20b62 <uECC_vli_modMult_fast>
}
   20fa0:	b009      	add	sp, #36	; 0x24
   20fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020fa4 <XYcZ_add>:
{
   20fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20fa8:	b08a      	sub	sp, #40	; 0x28
   20faa:	4614      	mov	r4, r2
   20fac:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   20fb0:	4655      	mov	r5, sl
{
   20fb2:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   20fb4:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   20fb8:	9600      	str	r6, [sp, #0]
{
   20fba:	4680      	mov	r8, r0
   20fbc:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   20fbe:	462b      	mov	r3, r5
   20fc0:	4602      	mov	r2, r0
   20fc2:	4621      	mov	r1, r4
   20fc4:	a802      	add	r0, sp, #8
   20fc6:	f7ff fd22 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   20fca:	a902      	add	r1, sp, #8
   20fcc:	4652      	mov	r2, sl
   20fce:	4608      	mov	r0, r1
   20fd0:	f7ff fdd7 	bl	20b82 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   20fd4:	4653      	mov	r3, sl
   20fd6:	aa02      	add	r2, sp, #8
   20fd8:	4641      	mov	r1, r8
   20fda:	4640      	mov	r0, r8
   20fdc:	f7ff fdc1 	bl	20b62 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   20fe0:	4653      	mov	r3, sl
   20fe2:	aa02      	add	r2, sp, #8
   20fe4:	4621      	mov	r1, r4
   20fe6:	4620      	mov	r0, r4
   20fe8:	f7ff fdbb 	bl	20b62 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   20fec:	462b      	mov	r3, r5
   20fee:	464a      	mov	r2, r9
   20ff0:	4639      	mov	r1, r7
   20ff2:	4638      	mov	r0, r7
   20ff4:	9600      	str	r6, [sp, #0]
   20ff6:	f7ff fd0a 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   20ffa:	4652      	mov	r2, sl
   20ffc:	4639      	mov	r1, r7
   20ffe:	a802      	add	r0, sp, #8
   21000:	f7ff fdbf 	bl	20b82 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   21004:	a902      	add	r1, sp, #8
   21006:	462b      	mov	r3, r5
   21008:	4642      	mov	r2, r8
   2100a:	4608      	mov	r0, r1
   2100c:	9600      	str	r6, [sp, #0]
   2100e:	f7ff fcfe 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   21012:	a902      	add	r1, sp, #8
   21014:	462b      	mov	r3, r5
   21016:	4622      	mov	r2, r4
   21018:	4608      	mov	r0, r1
   2101a:	9600      	str	r6, [sp, #0]
   2101c:	f7ff fcf7 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   21020:	462b      	mov	r3, r5
   21022:	4642      	mov	r2, r8
   21024:	4621      	mov	r1, r4
   21026:	4620      	mov	r0, r4
   21028:	9600      	str	r6, [sp, #0]
   2102a:	f7ff fcf0 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   2102e:	4653      	mov	r3, sl
   21030:	4622      	mov	r2, r4
   21032:	4649      	mov	r1, r9
   21034:	4648      	mov	r0, r9
   21036:	f7ff fd94 	bl	20b62 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   2103a:	462b      	mov	r3, r5
   2103c:	aa02      	add	r2, sp, #8
   2103e:	4641      	mov	r1, r8
   21040:	4620      	mov	r0, r4
   21042:	9600      	str	r6, [sp, #0]
   21044:	f7ff fce3 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   21048:	4653      	mov	r3, sl
   2104a:	4622      	mov	r2, r4
   2104c:	4639      	mov	r1, r7
   2104e:	4638      	mov	r0, r7
   21050:	f7ff fd87 	bl	20b62 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   21054:	462b      	mov	r3, r5
   21056:	464a      	mov	r2, r9
   21058:	4639      	mov	r1, r7
   2105a:	4638      	mov	r0, r7
   2105c:	9600      	str	r6, [sp, #0]
   2105e:	f7ff fcd6 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   21062:	4632      	mov	r2, r6
   21064:	a902      	add	r1, sp, #8
   21066:	4620      	mov	r0, r4
   21068:	f7ff fc69 	bl	2093e <uECC_vli_set>
}
   2106c:	b00a      	add	sp, #40	; 0x28
   2106e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00021072 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   21072:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21076:	b0b1      	sub	sp, #196	; 0xc4
   21078:	e9cd 0103 	strd	r0, r1, [sp, #12]
   2107c:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   2107e:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   21082:	a818      	add	r0, sp, #96	; 0x60
{
   21084:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   21086:	463a      	mov	r2, r7
{
   21088:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   2108a:	f7ff fc58 	bl	2093e <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   2108e:	00bb      	lsls	r3, r7, #2
   21090:	9305      	str	r3, [sp, #20]
   21092:	9b04      	ldr	r3, [sp, #16]
   21094:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   21098:	4619      	mov	r1, r3
   2109a:	a828      	add	r0, sp, #160	; 0xa0
   2109c:	9302      	str	r3, [sp, #8]
   2109e:	f7ff fc4e 	bl	2093e <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   210a2:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   210a6:	2e00      	cmp	r6, #0
   210a8:	f000 8088 	beq.w	211bc <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   210ac:	462a      	mov	r2, r5
   210ae:	4631      	mov	r1, r6
   210b0:	a808      	add	r0, sp, #32
   210b2:	f7ff fc44 	bl	2093e <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   210b6:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   210ba:	462a      	mov	r2, r5
   210bc:	a918      	add	r1, sp, #96	; 0x60
   210be:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   210c0:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   210c4:	f7ff fc3b 	bl	2093e <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   210c8:	a928      	add	r1, sp, #160	; 0xa0
   210ca:	4648      	mov	r0, r9
   210cc:	f7ff fc37 	bl	2093e <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   210d0:	4623      	mov	r3, r4
   210d2:	aa08      	add	r2, sp, #32
   210d4:	a928      	add	r1, sp, #160	; 0xa0
   210d6:	a818      	add	r0, sp, #96	; 0x60
   210d8:	f7ff ff45 	bl	20f66 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   210dc:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   210e0:	4623      	mov	r3, r4
   210e2:	aa08      	add	r2, sp, #32
   210e4:	a928      	add	r1, sp, #160	; 0xa0
   210e6:	a818      	add	r0, sp, #96	; 0x60
   210e8:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   210ea:	4623      	mov	r3, r4
   210ec:	aa08      	add	r2, sp, #32
   210ee:	4649      	mov	r1, r9
   210f0:	4640      	mov	r0, r8
   210f2:	f7ff ff38 	bl	20f66 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   210f6:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   210fa:	3d02      	subs	r5, #2
   210fc:	b22d      	sxth	r5, r5
   210fe:	2d00      	cmp	r5, #0
   21100:	dc63      	bgt.n	211ca <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   21102:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   21106:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   21108:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2110c:	ab10      	add	r3, sp, #64	; 0x40
   2110e:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   21112:	43ed      	mvns	r5, r5
   21114:	ab20      	add	r3, sp, #128	; 0x80
   21116:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   2111a:	f005 0501 	and.w	r5, r5, #1
   2111e:	ab10      	add	r3, sp, #64	; 0x40
   21120:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   21124:	ab20      	add	r3, sp, #128	; 0x80
   21126:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2112a:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2112e:	462b      	mov	r3, r5
   21130:	464a      	mov	r2, r9
   21132:	4631      	mov	r1, r6
   21134:	4640      	mov	r0, r8
   21136:	f7ff fe00 	bl	20d3a <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2113a:	4653      	mov	r3, sl
   2113c:	aa10      	add	r2, sp, #64	; 0x40
   2113e:	a918      	add	r1, sp, #96	; 0x60
   21140:	a808      	add	r0, sp, #32
   21142:	9700      	str	r7, [sp, #0]
   21144:	f7ff fc63 	bl	20a0e <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   21148:	a908      	add	r1, sp, #32
   2114a:	4623      	mov	r3, r4
   2114c:	4632      	mov	r2, r6
   2114e:	4608      	mov	r0, r1
   21150:	f7ff fd07 	bl	20b62 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   21154:	a908      	add	r1, sp, #32
   21156:	9a04      	ldr	r2, [sp, #16]
   21158:	4623      	mov	r3, r4
   2115a:	4608      	mov	r0, r1
   2115c:	f7ff fd01 	bl	20b62 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   21160:	a908      	add	r1, sp, #32
   21162:	463b      	mov	r3, r7
   21164:	4652      	mov	r2, sl
   21166:	4608      	mov	r0, r1
   21168:	f7ff fe75 	bl	20e56 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   2116c:	a908      	add	r1, sp, #32
   2116e:	9a02      	ldr	r2, [sp, #8]
   21170:	4623      	mov	r3, r4
   21172:	4608      	mov	r0, r1
   21174:	f7ff fcf5 	bl	20b62 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   21178:	a908      	add	r1, sp, #32
   2117a:	4623      	mov	r3, r4
   2117c:	4642      	mov	r2, r8
   2117e:	4608      	mov	r0, r1
   21180:	f7ff fcef 	bl	20b62 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   21184:	9400      	str	r4, [sp, #0]
   21186:	4633      	mov	r3, r6
   21188:	4642      	mov	r2, r8
   2118a:	4629      	mov	r1, r5
   2118c:	4648      	mov	r0, r9
   2118e:	f7ff ff09 	bl	20fa4 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   21192:	4623      	mov	r3, r4
   21194:	aa08      	add	r2, sp, #32
   21196:	a920      	add	r1, sp, #128	; 0x80
   21198:	a810      	add	r0, sp, #64	; 0x40
   2119a:	f7ff fee4 	bl	20f66 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   2119e:	9803      	ldr	r0, [sp, #12]
   211a0:	463a      	mov	r2, r7
   211a2:	a910      	add	r1, sp, #64	; 0x40
   211a4:	f7ff fbcb 	bl	2093e <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   211a8:	9b03      	ldr	r3, [sp, #12]
   211aa:	9c05      	ldr	r4, [sp, #20]
   211ac:	4423      	add	r3, r4
   211ae:	a920      	add	r1, sp, #128	; 0x80
   211b0:	4618      	mov	r0, r3
   211b2:	f7ff fbc4 	bl	2093e <uECC_vli_set>
}
   211b6:	b031      	add	sp, #196	; 0xc4
   211b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   211bc:	4629      	mov	r1, r5
   211be:	a808      	add	r0, sp, #32
   211c0:	f7ff fb78 	bl	208b4 <uECC_vli_clear>
		z[0] = 1;
   211c4:	2301      	movs	r3, #1
   211c6:	9308      	str	r3, [sp, #32]
   211c8:	e775      	b.n	210b6 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   211ca:	4629      	mov	r1, r5
   211cc:	4650      	mov	r0, sl
   211ce:	f7ff fb8b 	bl	208e8 <uECC_vli_testBit>
   211d2:	fab0 f680 	clz	r6, r0
   211d6:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   211d8:	f1c6 0101 	rsb	r1, r6, #1
   211dc:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   211e0:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   211e4:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   211e8:	4633      	mov	r3, r6
   211ea:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   211ee:	465a      	mov	r2, fp
   211f0:	9400      	str	r4, [sp, #0]
   211f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   211f6:	f7ff fda0 	bl	20d3a <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   211fa:	9907      	ldr	r1, [sp, #28]
   211fc:	9806      	ldr	r0, [sp, #24]
   211fe:	9400      	str	r4, [sp, #0]
   21200:	460b      	mov	r3, r1
   21202:	4602      	mov	r2, r0
   21204:	4631      	mov	r1, r6
   21206:	4658      	mov	r0, fp
   21208:	f7ff fecc 	bl	20fa4 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   2120c:	3d01      	subs	r5, #1
   2120e:	e775      	b.n	210fc <EccPoint_mult+0x8a>

00021210 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   21210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   21214:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   21218:	f119 081f 	adds.w	r8, r9, #31
{
   2121c:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2121e:	bf48      	it	mi
   21220:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   21224:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   21226:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2122a:	3524      	adds	r5, #36	; 0x24
   2122c:	4601      	mov	r1, r0
{
   2122e:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   21230:	4643      	mov	r3, r8
   21232:	462a      	mov	r2, r5
   21234:	4630      	mov	r0, r6
   21236:	f7ff fa84 	bl	20742 <uECC_vli_add>
   2123a:	4604      	mov	r4, r0
   2123c:	b990      	cbnz	r0, 21264 <regularize_k+0x54>
   2123e:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   21242:	da06      	bge.n	21252 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   21244:	4649      	mov	r1, r9
   21246:	4630      	mov	r0, r6
   21248:	f7ff fb4e 	bl	208e8 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   2124c:	1e04      	subs	r4, r0, #0
   2124e:	bf18      	it	ne
   21250:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   21252:	4643      	mov	r3, r8
   21254:	462a      	mov	r2, r5
   21256:	4631      	mov	r1, r6
   21258:	4638      	mov	r0, r7
   2125a:	f7ff fa72 	bl	20742 <uECC_vli_add>

	return carry;
}
   2125e:	4620      	mov	r0, r4
   21260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   21264:	2401      	movs	r4, #1
   21266:	e7f4      	b.n	21252 <regularize_k+0x42>

00021268 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   21268:	b530      	push	{r4, r5, lr}
   2126a:	4614      	mov	r4, r2
   2126c:	b095      	sub	sp, #84	; 0x54
   2126e:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   21270:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   21272:	4623      	mov	r3, r4
{
   21274:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   21276:	a904      	add	r1, sp, #16
   21278:	9102      	str	r1, [sp, #8]
   2127a:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2127c:	f7ff ffc8 	bl	21210 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   21280:	fab0 f380 	clz	r3, r0
   21284:	095b      	lsrs	r3, r3, #5
   21286:	aa14      	add	r2, sp, #80	; 0x50
   21288:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2128c:	8863      	ldrh	r3, [r4, #2]
   2128e:	9401      	str	r4, [sp, #4]
   21290:	3301      	adds	r3, #1
   21292:	b21b      	sxth	r3, r3
   21294:	9300      	str	r3, [sp, #0]
   21296:	f852 2c48 	ldr.w	r2, [r2, #-72]
   2129a:	2300      	movs	r3, #0
   2129c:	f104 0144 	add.w	r1, r4, #68	; 0x44
   212a0:	4628      	mov	r0, r5
   212a2:	f7ff fee6 	bl	21072 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   212a6:	4621      	mov	r1, r4
   212a8:	4628      	mov	r0, r5
   212aa:	f7ff fe57 	bl	20f5c <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   212ae:	fab0 f080 	clz	r0, r0
   212b2:	0940      	lsrs	r0, r0, #5
   212b4:	b015      	add	sp, #84	; 0x54
   212b6:	bd30      	pop	{r4, r5, pc}

000212b8 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   212b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   212ba:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   212bc:	1e4f      	subs	r7, r1, #1
   212be:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   212c0:	428c      	cmp	r4, r1
   212c2:	f105 0501 	add.w	r5, r5, #1
   212c6:	db00      	blt.n	212ca <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   212c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   212ca:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   212cc:	f023 0603 	bic.w	r6, r3, #3
   212d0:	f003 0303 	and.w	r3, r3, #3
   212d4:	5996      	ldr	r6, [r2, r6]
   212d6:	00db      	lsls	r3, r3, #3
   212d8:	fa26 f303 	lsr.w	r3, r6, r3
   212dc:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   212de:	e7ee      	b.n	212be <uECC_vli_nativeToBytes+0x6>

000212e0 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   212e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   212e2:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   212e4:	1cd1      	adds	r1, r2, #3
   212e6:	bf48      	it	mi
   212e8:	1d91      	addmi	r1, r2, #6
   212ea:	f341 0187 	sbfx	r1, r1, #2, #8
{
   212ee:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   212f0:	f7ff fae0 	bl	208b4 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   212f4:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   212f6:	1e67      	subs	r7, r4, #1
   212f8:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   212fa:	42a2      	cmp	r2, r4
   212fc:	f105 0501 	add.w	r5, r5, #1
   21300:	db00      	blt.n	21304 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   21302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   21304:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   21306:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   2130a:	5cb2      	ldrb	r2, [r6, r2]
   2130c:	f003 0303 	and.w	r3, r3, #3
   21310:	00db      	lsls	r3, r3, #3
   21312:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   21316:	5842      	ldr	r2, [r0, r1]
   21318:	431a      	orrs	r2, r3
   2131a:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   2131c:	e7ec      	b.n	212f8 <uECC_vli_bytesToNative+0x18>

0002131e <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   2131e:	b5f0      	push	{r4, r5, r6, r7, lr}
   21320:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   21322:	f991 6000 	ldrsb.w	r6, [r1]
{
   21326:	4605      	mov	r5, r0
   21328:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   2132a:	f7ff fe17 	bl	20f5c <EccPoint_isZero>
   2132e:	bb28      	cbnz	r0, 2137c <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   21330:	1d27      	adds	r7, r4, #4
   21332:	4632      	mov	r2, r6
   21334:	4629      	mov	r1, r5
   21336:	4638      	mov	r0, r7
   21338:	f7ff fb0d 	bl	20956 <uECC_vli_cmp_unsafe>
   2133c:	2801      	cmp	r0, #1
   2133e:	d120      	bne.n	21382 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   21340:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   21344:	4632      	mov	r2, r6
   21346:	4638      	mov	r0, r7
   21348:	f7ff fb05 	bl	20956 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2134c:	2801      	cmp	r0, #1
   2134e:	d118      	bne.n	21382 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   21350:	4622      	mov	r2, r4
   21352:	4668      	mov	r0, sp
   21354:	f7ff fc15 	bl	20b82 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   21358:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   2135c:	4622      	mov	r2, r4
   2135e:	4629      	mov	r1, r5
   21360:	a808      	add	r0, sp, #32
   21362:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   21364:	4632      	mov	r2, r6
   21366:	a908      	add	r1, sp, #32
   21368:	4668      	mov	r0, sp
   2136a:	f7ff fb0b 	bl	20984 <uECC_vli_equal>
   2136e:	2800      	cmp	r0, #0
		return -3;
   21370:	bf0c      	ite	eq
   21372:	2000      	moveq	r0, #0
   21374:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   21378:	b011      	add	sp, #68	; 0x44
   2137a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   2137c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21380:	e7fa      	b.n	21378 <uECC_valid_point+0x5a>
		return -2;
   21382:	f06f 0001 	mvn.w	r0, #1
   21386:	e7f7      	b.n	21378 <uECC_valid_point+0x5a>

00021388 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   21388:	b570      	push	{r4, r5, r6, lr}
   2138a:	460c      	mov	r4, r1
   2138c:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   2138e:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   21390:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   21394:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   21396:	4601      	mov	r1, r0
   21398:	4668      	mov	r0, sp
   2139a:	f7ff ffa1 	bl	212e0 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   2139e:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   213a2:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   213a6:	18a9      	adds	r1, r5, r2
   213a8:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   213ac:	f7ff ff98 	bl	212e0 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   213b0:	2210      	movs	r2, #16
   213b2:	4631      	mov	r1, r6
   213b4:	4668      	mov	r0, sp
   213b6:	f7ff face 	bl	20956 <uECC_vli_cmp_unsafe>
   213ba:	b128      	cbz	r0, 213c8 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   213bc:	4621      	mov	r1, r4
   213be:	4668      	mov	r0, sp
   213c0:	f7ff ffad 	bl	2131e <uECC_valid_point>
}
   213c4:	b010      	add	sp, #64	; 0x40
   213c6:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   213c8:	f06f 0003 	mvn.w	r0, #3
   213cc:	e7fa      	b.n	213c4 <uECC_valid_public_key+0x3c>

000213ce <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   213ce:	78cb      	ldrb	r3, [r1, #3]
   213d0:	7802      	ldrb	r2, [r0, #0]
   213d2:	4053      	eors	r3, r2
   213d4:	7003      	strb	r3, [r0, #0]
   213d6:	884b      	ldrh	r3, [r1, #2]
   213d8:	7842      	ldrb	r2, [r0, #1]
   213da:	4053      	eors	r3, r2
   213dc:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   213de:	680a      	ldr	r2, [r1, #0]
   213e0:	7883      	ldrb	r3, [r0, #2]
   213e2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   213e6:	7083      	strb	r3, [r0, #2]
   213e8:	680a      	ldr	r2, [r1, #0]
   213ea:	78c3      	ldrb	r3, [r0, #3]
   213ec:	4053      	eors	r3, r2
   213ee:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   213f0:	79cb      	ldrb	r3, [r1, #7]
   213f2:	7902      	ldrb	r2, [r0, #4]
   213f4:	4053      	eors	r3, r2
   213f6:	7103      	strb	r3, [r0, #4]
   213f8:	88cb      	ldrh	r3, [r1, #6]
   213fa:	7942      	ldrb	r2, [r0, #5]
   213fc:	4053      	eors	r3, r2
   213fe:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   21400:	684a      	ldr	r2, [r1, #4]
   21402:	7983      	ldrb	r3, [r0, #6]
   21404:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   21408:	7183      	strb	r3, [r0, #6]
   2140a:	684a      	ldr	r2, [r1, #4]
   2140c:	79c3      	ldrb	r3, [r0, #7]
   2140e:	4053      	eors	r3, r2
   21410:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   21412:	7acb      	ldrb	r3, [r1, #11]
   21414:	7a02      	ldrb	r2, [r0, #8]
   21416:	4053      	eors	r3, r2
   21418:	7203      	strb	r3, [r0, #8]
   2141a:	7a42      	ldrb	r2, [r0, #9]
   2141c:	894b      	ldrh	r3, [r1, #10]
   2141e:	4053      	eors	r3, r2
   21420:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   21422:	688a      	ldr	r2, [r1, #8]
   21424:	7a83      	ldrb	r3, [r0, #10]
   21426:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2142a:	7283      	strb	r3, [r0, #10]
   2142c:	688a      	ldr	r2, [r1, #8]
   2142e:	7ac3      	ldrb	r3, [r0, #11]
   21430:	4053      	eors	r3, r2
   21432:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   21434:	7bcb      	ldrb	r3, [r1, #15]
   21436:	7b02      	ldrb	r2, [r0, #12]
   21438:	4053      	eors	r3, r2
   2143a:	7303      	strb	r3, [r0, #12]
   2143c:	89cb      	ldrh	r3, [r1, #14]
   2143e:	7b42      	ldrb	r2, [r0, #13]
   21440:	4053      	eors	r3, r2
   21442:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   21444:	68ca      	ldr	r2, [r1, #12]
   21446:	7b83      	ldrb	r3, [r0, #14]
   21448:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2144c:	7383      	strb	r3, [r0, #14]
   2144e:	68ca      	ldr	r2, [r1, #12]
   21450:	7bc3      	ldrb	r3, [r0, #15]
   21452:	4053      	eors	r3, r2
   21454:	73c3      	strb	r3, [r0, #15]
}
   21456:	4770      	bx	lr

00021458 <shift_rows>:
{
   21458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2145a:	7802      	ldrb	r2, [r0, #0]
   2145c:	f88d 2000 	strb.w	r2, [sp]
   21460:	7942      	ldrb	r2, [r0, #5]
   21462:	f88d 2001 	strb.w	r2, [sp, #1]
   21466:	7a82      	ldrb	r2, [r0, #10]
   21468:	f88d 2002 	strb.w	r2, [sp, #2]
   2146c:	7bc2      	ldrb	r2, [r0, #15]
   2146e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   21472:	7902      	ldrb	r2, [r0, #4]
   21474:	f88d 2004 	strb.w	r2, [sp, #4]
   21478:	7a42      	ldrb	r2, [r0, #9]
   2147a:	f88d 2005 	strb.w	r2, [sp, #5]
   2147e:	7b82      	ldrb	r2, [r0, #14]
   21480:	f88d 2006 	strb.w	r2, [sp, #6]
   21484:	78c2      	ldrb	r2, [r0, #3]
   21486:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2148a:	7a02      	ldrb	r2, [r0, #8]
   2148c:	f88d 2008 	strb.w	r2, [sp, #8]
   21490:	7b42      	ldrb	r2, [r0, #13]
   21492:	f88d 2009 	strb.w	r2, [sp, #9]
   21496:	7882      	ldrb	r2, [r0, #2]
   21498:	f88d 200a 	strb.w	r2, [sp, #10]
   2149c:	79c2      	ldrb	r2, [r0, #7]
   2149e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   214a2:	7b02      	ldrb	r2, [r0, #12]
   214a4:	f88d 200c 	strb.w	r2, [sp, #12]
   214a8:	7842      	ldrb	r2, [r0, #1]
   214aa:	7ac3      	ldrb	r3, [r0, #11]
   214ac:	f88d 200d 	strb.w	r2, [sp, #13]
   214b0:	7982      	ldrb	r2, [r0, #6]
   214b2:	f88d 200e 	strb.w	r2, [sp, #14]
   214b6:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   214ba:	2310      	movs	r3, #16
   214bc:	466a      	mov	r2, sp
   214be:	4619      	mov	r1, r3
   214c0:	f7ff f87b 	bl	205ba <_copy>
}
   214c4:	b005      	add	sp, #20
   214c6:	f85d fb04 	ldr.w	pc, [sp], #4

000214ca <mult_row_column>:
{
   214ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   214cc:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   214ce:	7808      	ldrb	r0, [r1, #0]
{
   214d0:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   214d2:	f7ff f881 	bl	205d8 <_double_byte>
   214d6:	4605      	mov	r5, r0
   214d8:	7860      	ldrb	r0, [r4, #1]
   214da:	f7ff f87d 	bl	205d8 <_double_byte>
   214de:	78a2      	ldrb	r2, [r4, #2]
   214e0:	7863      	ldrb	r3, [r4, #1]
   214e2:	4053      	eors	r3, r2
   214e4:	78e2      	ldrb	r2, [r4, #3]
   214e6:	4053      	eors	r3, r2
   214e8:	405d      	eors	r5, r3
   214ea:	4045      	eors	r5, r0
   214ec:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   214ee:	7860      	ldrb	r0, [r4, #1]
   214f0:	7827      	ldrb	r7, [r4, #0]
   214f2:	f7ff f871 	bl	205d8 <_double_byte>
   214f6:	4605      	mov	r5, r0
   214f8:	78a0      	ldrb	r0, [r4, #2]
   214fa:	f7ff f86d 	bl	205d8 <_double_byte>
   214fe:	78a3      	ldrb	r3, [r4, #2]
   21500:	405f      	eors	r7, r3
   21502:	78e3      	ldrb	r3, [r4, #3]
   21504:	405f      	eors	r7, r3
   21506:	407d      	eors	r5, r7
   21508:	4045      	eors	r5, r0
   2150a:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2150c:	78a0      	ldrb	r0, [r4, #2]
   2150e:	7865      	ldrb	r5, [r4, #1]
   21510:	7827      	ldrb	r7, [r4, #0]
   21512:	f7ff f861 	bl	205d8 <_double_byte>
   21516:	406f      	eors	r7, r5
   21518:	4605      	mov	r5, r0
   2151a:	78e0      	ldrb	r0, [r4, #3]
   2151c:	f7ff f85c 	bl	205d8 <_double_byte>
   21520:	78e3      	ldrb	r3, [r4, #3]
   21522:	405f      	eors	r7, r3
   21524:	407d      	eors	r5, r7
   21526:	4045      	eors	r5, r0
   21528:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2152a:	7820      	ldrb	r0, [r4, #0]
   2152c:	f7ff f854 	bl	205d8 <_double_byte>
   21530:	7863      	ldrb	r3, [r4, #1]
   21532:	7825      	ldrb	r5, [r4, #0]
   21534:	405d      	eors	r5, r3
   21536:	78a3      	ldrb	r3, [r4, #2]
   21538:	405d      	eors	r5, r3
   2153a:	4045      	eors	r5, r0
   2153c:	78e0      	ldrb	r0, [r4, #3]
   2153e:	f7ff f84b 	bl	205d8 <_double_byte>
   21542:	b2ed      	uxtb	r5, r5
   21544:	4045      	eors	r5, r0
   21546:	70f5      	strb	r5, [r6, #3]
}
   21548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002154a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2154a:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2154c:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2154e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   21550:	f912 3b10 	ldrsb.w	r3, [r2], #16
   21554:	2b00      	cmp	r3, #0
   21556:	bfb4      	ite	lt
   21558:	2387      	movlt	r3, #135	; 0x87
   2155a:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2155c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   21560:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   21564:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   21566:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2156a:	d002      	beq.n	21572 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2156c:	7813      	ldrb	r3, [r2, #0]
   2156e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   21570:	e7f4      	b.n	2155c <gf_double+0x12>
	}
}
   21572:	bd10      	pop	{r4, pc}

00021574 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   21574:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   21576:	b120      	cbz	r0, 21582 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   21578:	2258      	movs	r2, #88	; 0x58
   2157a:	2100      	movs	r1, #0
   2157c:	f7ff f82a 	bl	205d4 <_set>
   21580:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   21582:	bd08      	pop	{r3, pc}

00021584 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   21584:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   21586:	4604      	mov	r4, r0
   21588:	b188      	cbz	r0, 215ae <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2158a:	2210      	movs	r2, #16
   2158c:	2100      	movs	r1, #0
   2158e:	f7ff f821 	bl	205d4 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   21592:	2210      	movs	r2, #16
   21594:	f104 0030 	add.w	r0, r4, #48	; 0x30
   21598:	2100      	movs	r1, #0
   2159a:	f7ff f81b 	bl	205d4 <_set>
	s->leftover_offset = 0;
   2159e:	2300      	movs	r3, #0
   215a0:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   215a2:	2200      	movs	r2, #0
   215a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   215a8:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   215ac:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   215ae:	bd10      	pop	{r4, pc}

000215b0 <tc_cmac_setup>:
{
   215b0:	b570      	push	{r4, r5, r6, lr}
   215b2:	460d      	mov	r5, r1
   215b4:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   215b6:	4604      	mov	r4, r0
   215b8:	b310      	cbz	r0, 21600 <tc_cmac_setup+0x50>
   215ba:	b311      	cbz	r1, 21602 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   215bc:	2258      	movs	r2, #88	; 0x58
   215be:	2100      	movs	r1, #0
   215c0:	f7ff f808 	bl	205d4 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   215c4:	4629      	mov	r1, r5
	s->sched = sched;
   215c6:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   215c8:	4630      	mov	r0, r6
   215ca:	f7e4 ffb1 	bl	6530 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   215ce:	2210      	movs	r2, #16
   215d0:	2100      	movs	r1, #0
   215d2:	4620      	mov	r0, r4
   215d4:	f7fe fffe 	bl	205d4 <_set>
	gf_double (s->K1, s->iv);
   215d8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   215dc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   215de:	4621      	mov	r1, r4
   215e0:	4620      	mov	r0, r4
   215e2:	f7e4 fff7 	bl	65d4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   215e6:	4621      	mov	r1, r4
   215e8:	4628      	mov	r0, r5
   215ea:	f7ff ffae 	bl	2154a <gf_double>
	gf_double (s->K2, s->K1);
   215ee:	4629      	mov	r1, r5
   215f0:	f104 0020 	add.w	r0, r4, #32
   215f4:	f7ff ffa9 	bl	2154a <gf_double>
	tc_cmac_init(s);
   215f8:	4620      	mov	r0, r4
   215fa:	f7ff ffc3 	bl	21584 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   215fe:	2001      	movs	r0, #1
}
   21600:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   21602:	4608      	mov	r0, r1
   21604:	e7fc      	b.n	21600 <tc_cmac_setup+0x50>

00021606 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   21606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2160a:	460d      	mov	r5, r1
   2160c:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2160e:	4604      	mov	r4, r0
   21610:	2800      	cmp	r0, #0
   21612:	d062      	beq.n	216da <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   21614:	b912      	cbnz	r2, 2161c <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   21616:	2001      	movs	r0, #1
}
   21618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   2161c:	2900      	cmp	r1, #0
   2161e:	d05c      	beq.n	216da <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   21620:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   21624:	ea50 0301 	orrs.w	r3, r0, r1
   21628:	d057      	beq.n	216da <tc_cmac_update+0xd4>
	s->countdown--;
   2162a:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   2162e:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   21632:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   21636:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2163a:	f1b8 0f00 	cmp.w	r8, #0
   2163e:	d02a      	beq.n	21696 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   21640:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   21644:	f108 0030 	add.w	r0, r8, #48	; 0x30
   21648:	42be      	cmp	r6, r7
   2164a:	4420      	add	r0, r4
   2164c:	d208      	bcs.n	21660 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2164e:	462a      	mov	r2, r5
   21650:	4633      	mov	r3, r6
   21652:	4631      	mov	r1, r6
   21654:	f7fe ffb1 	bl	205ba <_copy>
			s->leftover_offset += data_length;
   21658:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2165a:	4432      	add	r2, r6
   2165c:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2165e:	e7da      	b.n	21616 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   21660:	463b      	mov	r3, r7
   21662:	462a      	mov	r2, r5
   21664:	4639      	mov	r1, r7
   21666:	f7fe ffa8 	bl	205ba <_copy>
		data_length -= remaining_space;
   2166a:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   2166c:	2300      	movs	r3, #0
   2166e:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   21670:	4446      	add	r6, r8
		data += remaining_space;
   21672:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21674:	1e63      	subs	r3, r4, #1
   21676:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2167a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2167e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21682:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   21684:	ea82 0200 	eor.w	r2, r2, r0
   21688:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2168a:	d1f6      	bne.n	2167a <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2168c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2168e:	4621      	mov	r1, r4
   21690:	4620      	mov	r0, r4
   21692:	f7e4 ff9f 	bl	65d4 <tc_aes_encrypt>
   21696:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2169a:	2e10      	cmp	r6, #16
   2169c:	d80a      	bhi.n	216b4 <tc_cmac_update+0xae>
	if (data_length > 0) {
   2169e:	2e00      	cmp	r6, #0
   216a0:	d0b9      	beq.n	21616 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   216a2:	4633      	mov	r3, r6
   216a4:	462a      	mov	r2, r5
   216a6:	4631      	mov	r1, r6
   216a8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   216ac:	f7fe ff85 	bl	205ba <_copy>
		s->leftover_offset = data_length;
   216b0:	6466      	str	r6, [r4, #68]	; 0x44
   216b2:	e7b0      	b.n	21616 <tc_cmac_update+0x10>
   216b4:	1e63      	subs	r3, r4, #1
   216b6:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   216b8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   216bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   216c0:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   216c2:	ea82 0200 	eor.w	r2, r2, r0
   216c6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   216c8:	d1f6      	bne.n	216b8 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   216ca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   216cc:	4621      	mov	r1, r4
   216ce:	4620      	mov	r0, r4
   216d0:	f7e4 ff80 	bl	65d4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   216d4:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   216d6:	3e10      	subs	r6, #16
   216d8:	e7df      	b.n	2169a <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   216da:	2000      	movs	r0, #0
   216dc:	e79c      	b.n	21618 <tc_cmac_update+0x12>

000216de <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   216de:	b570      	push	{r4, r5, r6, lr}
   216e0:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   216e2:	4605      	mov	r5, r0
   216e4:	b1e8      	cbz	r0, 21722 <tc_cmac_final+0x44>
   216e6:	b369      	cbz	r1, 21744 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   216e8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   216ea:	2a10      	cmp	r2, #16
   216ec:	d11a      	bne.n	21724 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   216ee:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   216f0:	1e63      	subs	r3, r4, #1
   216f2:	3901      	subs	r1, #1
   216f4:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   216f8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   216fc:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   21700:	4072      	eors	r2, r6
   21702:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21706:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   21708:	ea82 0206 	eor.w	r2, r2, r6
   2170c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2170e:	d1f3      	bne.n	216f8 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   21710:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   21712:	4621      	mov	r1, r4
   21714:	4628      	mov	r0, r5
   21716:	f7e4 ff5d 	bl	65d4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2171a:	4620      	mov	r0, r4
   2171c:	f7ff ff2a 	bl	21574 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   21720:	2001      	movs	r0, #1
}
   21722:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   21724:	f102 0030 	add.w	r0, r2, #48	; 0x30
   21728:	2100      	movs	r1, #0
   2172a:	f1c2 0210 	rsb	r2, r2, #16
   2172e:	4420      	add	r0, r4
   21730:	f7fe ff50 	bl	205d4 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   21734:	6c63      	ldr	r3, [r4, #68]	; 0x44
   21736:	4423      	add	r3, r4
   21738:	2280      	movs	r2, #128	; 0x80
   2173a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2173e:	f104 0120 	add.w	r1, r4, #32
   21742:	e7d5      	b.n	216f0 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   21744:	4608      	mov	r0, r1
   21746:	e7ec      	b.n	21722 <tc_cmac_final+0x44>

00021748 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   21748:	2100      	movs	r1, #0
   2174a:	2001      	movs	r0, #1
   2174c:	f7e5 b8c8 	b.w	68e0 <z_arm_fatal_error>

00021750 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   21750:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   21752:	6800      	ldr	r0, [r0, #0]
   21754:	f7e5 b8c4 	b.w	68e0 <z_arm_fatal_error>

00021758 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   21758:	b508      	push	{r3, lr}
	handler();
   2175a:	f7e5 f8f9 	bl	6950 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2175e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   21762:	f7e5 bb7b 	b.w	6e5c <z_arm_exc_exit>

00021766 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   21766:	3901      	subs	r1, #1
   21768:	4603      	mov	r3, r0
   2176a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2176e:	b90a      	cbnz	r2, 21774 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   21770:	701a      	strb	r2, [r3, #0]

	return dest;
}
   21772:	4770      	bx	lr
		*d = *s;
   21774:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   21778:	e7f7      	b.n	2176a <strcpy+0x4>

0002177a <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   2177a:	b570      	push	{r4, r5, r6, lr}
   2177c:	3901      	subs	r1, #1
   2177e:	4605      	mov	r5, r0
   21780:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   21782:	b142      	cbz	r2, 21796 <strncpy+0x1c>
   21784:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   21788:	1e56      	subs	r6, r2, #1
   2178a:	b92b      	cbnz	r3, 21798 <strncpy+0x1e>
   2178c:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   2178e:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   21792:	42a2      	cmp	r2, r4
   21794:	d1fb      	bne.n	2178e <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   21796:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   21798:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   2179c:	4632      	mov	r2, r6
   2179e:	e7ef      	b.n	21780 <strncpy+0x6>

000217a0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   217a0:	4603      	mov	r3, r0
	size_t n = 0;
   217a2:	2000      	movs	r0, #0

	while (*s != '\0') {
   217a4:	5c1a      	ldrb	r2, [r3, r0]
   217a6:	b902      	cbnz	r2, 217aa <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   217a8:	4770      	bx	lr
		n++;
   217aa:	3001      	adds	r0, #1
   217ac:	e7fa      	b.n	217a4 <strlen+0x4>

000217ae <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   217ae:	1e43      	subs	r3, r0, #1
   217b0:	3901      	subs	r1, #1
   217b2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   217b6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   217ba:	4282      	cmp	r2, r0
   217bc:	d101      	bne.n	217c2 <strcmp+0x14>
   217be:	2a00      	cmp	r2, #0
   217c0:	d1f7      	bne.n	217b2 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   217c2:	1a10      	subs	r0, r2, r0
   217c4:	4770      	bx	lr

000217c6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   217c6:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   217c8:	b15a      	cbz	r2, 217e2 <memcmp+0x1c>
   217ca:	3901      	subs	r1, #1
   217cc:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   217ce:	f810 2b01 	ldrb.w	r2, [r0], #1
   217d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   217d6:	42a0      	cmp	r0, r4
   217d8:	d001      	beq.n	217de <memcmp+0x18>
   217da:	429a      	cmp	r2, r3
   217dc:	d0f7      	beq.n	217ce <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   217de:	1ad0      	subs	r0, r2, r3
}
   217e0:	bd10      	pop	{r4, pc}
		return 0;
   217e2:	4610      	mov	r0, r2
   217e4:	e7fc      	b.n	217e0 <memcmp+0x1a>

000217e6 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   217e6:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   217e8:	ea81 0400 	eor.w	r4, r1, r0
   217ec:	07a5      	lsls	r5, r4, #30
   217ee:	4603      	mov	r3, r0
   217f0:	d00b      	beq.n	2180a <memcpy+0x24>
   217f2:	3b01      	subs	r3, #1
   217f4:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   217f6:	4291      	cmp	r1, r2
   217f8:	d11b      	bne.n	21832 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   217fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   217fc:	2a00      	cmp	r2, #0
   217fe:	d0fc      	beq.n	217fa <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   21800:	f811 4b01 	ldrb.w	r4, [r1], #1
   21804:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   21808:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   2180a:	079c      	lsls	r4, r3, #30
   2180c:	d1f6      	bne.n	217fc <memcpy+0x16>
   2180e:	f022 0403 	bic.w	r4, r2, #3
   21812:	1f1d      	subs	r5, r3, #4
   21814:	0896      	lsrs	r6, r2, #2
   21816:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   21818:	42b9      	cmp	r1, r7
   2181a:	d105      	bne.n	21828 <memcpy+0x42>
   2181c:	f06f 0503 	mvn.w	r5, #3
   21820:	fb05 2206 	mla	r2, r5, r6, r2
   21824:	4423      	add	r3, r4
   21826:	e7e4      	b.n	217f2 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   21828:	f851 cb04 	ldr.w	ip, [r1], #4
   2182c:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   21830:	e7f2      	b.n	21818 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   21832:	f811 4b01 	ldrb.w	r4, [r1], #1
   21836:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2183a:	e7dc      	b.n	217f6 <memcpy+0x10>

0002183c <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   2183c:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2183e:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   21840:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   21842:	079c      	lsls	r4, r3, #30
   21844:	d111      	bne.n	2186a <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   21846:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   2184a:	f022 0603 	bic.w	r6, r2, #3
   2184e:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   21852:	441e      	add	r6, r3
   21854:	0894      	lsrs	r4, r2, #2
   21856:	42b3      	cmp	r3, r6
   21858:	d10d      	bne.n	21876 <memset+0x3a>
   2185a:	f06f 0503 	mvn.w	r5, #3
   2185e:	fb05 2204 	mla	r2, r5, r4, r2
   21862:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   21864:	4293      	cmp	r3, r2
   21866:	d109      	bne.n	2187c <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   21868:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   2186a:	2a00      	cmp	r2, #0
   2186c:	d0fc      	beq.n	21868 <memset+0x2c>
		*(d_byte++) = c_byte;
   2186e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   21872:	3a01      	subs	r2, #1
   21874:	e7e5      	b.n	21842 <memset+0x6>
		*(d_word++) = c_word;
   21876:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   2187a:	e7ec      	b.n	21856 <memset+0x1a>
		*(d_byte++) = c_byte;
   2187c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   21880:	e7f0      	b.n	21864 <memset+0x28>

00021882 <_stdout_hook_default>:
}
   21882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21886:	4770      	bx	lr

00021888 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   21888:	f7fc b9ea 	b.w	1dc60 <SystemInit>

0002188c <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   2188c:	b530      	push	{r4, r5, lr}
   2188e:	b085      	sub	sp, #20
   21890:	4604      	mov	r4, r0
   21892:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   21894:	4668      	mov	r0, sp
   21896:	2203      	movs	r2, #3
   21898:	f7ff ffa5 	bl	217e6 <memcpy>
	(void)memset(res + 3, 0, 13);
   2189c:	220d      	movs	r2, #13
   2189e:	2100      	movs	r1, #0
   218a0:	f10d 0003 	add.w	r0, sp, #3
   218a4:	f7ff ffca 	bl	2183c <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   218a8:	4620      	mov	r0, r4
   218aa:	466a      	mov	r2, sp
   218ac:	4669      	mov	r1, sp
   218ae:	f7f1 f8b3 	bl	12a18 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   218b2:	4604      	mov	r4, r0
   218b4:	b920      	cbnz	r0, 218c0 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   218b6:	2203      	movs	r2, #3
   218b8:	4669      	mov	r1, sp
   218ba:	4628      	mov	r0, r5
   218bc:	f7ff ff93 	bl	217e6 <memcpy>

	return 0;
}
   218c0:	4620      	mov	r0, r4
   218c2:	b005      	add	sp, #20
   218c4:	bd30      	pop	{r4, r5, pc}

000218c6 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   218c6:	b513      	push	{r0, r1, r4, lr}
   218c8:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   218ca:	aa01      	add	r2, sp, #4
   218cc:	3103      	adds	r1, #3
   218ce:	f7ff ffdd 	bl	2188c <ah>
	if (err) {
   218d2:	b948      	cbnz	r0, 218e8 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   218d4:	2203      	movs	r2, #3
   218d6:	a901      	add	r1, sp, #4
   218d8:	4620      	mov	r0, r4
   218da:	f7ff ff74 	bl	217c6 <memcmp>
   218de:	fab0 f080 	clz	r0, r0
   218e2:	0940      	lsrs	r0, r0, #5
}
   218e4:	b002      	add	sp, #8
   218e6:	bd10      	pop	{r4, pc}
		return false;
   218e8:	2000      	movs	r0, #0
   218ea:	e7fb      	b.n	218e4 <bt_rpa_irk_matches+0x1e>

000218ec <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   218ec:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   218ee:	1cce      	adds	r6, r1, #3
{
   218f0:	4605      	mov	r5, r0
   218f2:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   218f4:	4630      	mov	r0, r6
   218f6:	2103      	movs	r1, #3
   218f8:	f7f1 f88c 	bl	12a14 <bt_rand>
	if (err) {
   218fc:	b960      	cbnz	r0, 21918 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   218fe:	7963      	ldrb	r3, [r4, #5]
   21900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   21904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21908:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   2190a:	4622      	mov	r2, r4
   2190c:	4631      	mov	r1, r6
   2190e:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   21910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   21914:	f7ff bfba 	b.w	2188c <ah>
}
   21918:	bd70      	pop	{r4, r5, r6, pc}

0002191a <send_cmd_status>:
{
   2191a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2191e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   21922:	4606      	mov	r6, r0
   21924:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   21926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2192a:	2100      	movs	r1, #0
   2192c:	200f      	movs	r0, #15
   2192e:	f7e5 fe8d 	bl	764c <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   21932:	2701      	movs	r7, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   21934:	f100 0808 	add.w	r8, r0, #8
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   21938:	4604      	mov	r4, r0
   2193a:	7507      	strb	r7, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   2193c:	2102      	movs	r1, #2
   2193e:	4640      	mov	r0, r8
   21940:	f002 fb7a 	bl	24038 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   21944:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   21946:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   21948:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   2194a:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   2194c:	4640      	mov	r0, r8
   2194e:	f002 fb73 	bl	24038 <net_buf_simple_add>
	evt->ncmd = 1U;
   21952:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   21954:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   21956:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   21958:	4620      	mov	r0, r4
}
   2195a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   2195e:	f7e7 bc15 	b.w	918c <bt_recv_prio>

00021962 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   21962:	f101 0320 	add.w	r3, r1, #32
   21966:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   21968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2196c:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   21970:	428b      	cmp	r3, r1
   21972:	d1f9      	bne.n	21968 <sys_memcpy_swap.constprop.0+0x6>
}
   21974:	4770      	bx	lr

00021976 <default_CSPRNG>:
{
   21976:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   21978:	f7f1 f84c 	bl	12a14 <bt_rand>
}
   2197c:	fab0 f080 	clz	r0, r0
   21980:	0940      	lsrs	r0, r0, #5
   21982:	bd08      	pop	{r3, pc}

00021984 <bt_uuid_cmp>:
{
   21984:	b510      	push	{r4, lr}
   21986:	460c      	mov	r4, r1
	if (u1->type != u2->type) {
   21988:	7801      	ldrb	r1, [r0, #0]
   2198a:	7822      	ldrb	r2, [r4, #0]
   2198c:	428a      	cmp	r2, r1
{
   2198e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   21990:	d00e      	beq.n	219b0 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   21992:	4669      	mov	r1, sp
   21994:	f7e5 fd8c 	bl	74b0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   21998:	a905      	add	r1, sp, #20
   2199a:	4620      	mov	r0, r4
   2199c:	f7e5 fd88 	bl	74b0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   219a0:	2210      	movs	r2, #16
   219a2:	f10d 0115 	add.w	r1, sp, #21
   219a6:	f10d 0001 	add.w	r0, sp, #1
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   219aa:	f7ff ff0c 	bl	217c6 <memcmp>
   219ae:	e007      	b.n	219c0 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   219b0:	2a01      	cmp	r2, #1
   219b2:	d007      	beq.n	219c4 <bt_uuid_cmp+0x40>
   219b4:	2a02      	cmp	r2, #2
   219b6:	d008      	beq.n	219ca <bt_uuid_cmp+0x46>
   219b8:	b95a      	cbnz	r2, 219d2 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   219ba:	8840      	ldrh	r0, [r0, #2]
   219bc:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   219be:	1ac0      	subs	r0, r0, r3
}
   219c0:	b00a      	add	sp, #40	; 0x28
   219c2:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   219c4:	6840      	ldr	r0, [r0, #4]
   219c6:	6863      	ldr	r3, [r4, #4]
   219c8:	e7f9      	b.n	219be <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   219ca:	2210      	movs	r2, #16
   219cc:	1c61      	adds	r1, r4, #1
   219ce:	3001      	adds	r0, #1
   219d0:	e7eb      	b.n	219aa <bt_uuid_cmp+0x26>
	switch (u1->type) {
   219d2:	f06f 0015 	mvn.w	r0, #21
   219d6:	e7f3      	b.n	219c0 <bt_uuid_cmp+0x3c>

000219d8 <bt_uuid_create>:
	switch (data_len) {
   219d8:	2a04      	cmp	r2, #4
{
   219da:	b538      	push	{r3, r4, r5, lr}
   219dc:	460c      	mov	r4, r1
	switch (data_len) {
   219de:	d00d      	beq.n	219fc <bt_uuid_create+0x24>
   219e0:	2a10      	cmp	r2, #16
   219e2:	d019      	beq.n	21a18 <bt_uuid_create+0x40>
   219e4:	2a02      	cmp	r2, #2
   219e6:	f04f 0300 	mov.w	r3, #0
   219ea:	d11b      	bne.n	21a24 <bt_uuid_create+0x4c>
		uuid->type = BT_UUID_TYPE_16;
   219ec:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   219ee:	784a      	ldrb	r2, [r1, #1]
   219f0:	780b      	ldrb	r3, [r1, #0]
   219f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   219f6:	8043      	strh	r3, [r0, #2]
	return true;
   219f8:	2001      	movs	r0, #1
}
   219fa:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   219fc:	2301      	movs	r3, #1
   219fe:	7003      	strb	r3, [r0, #0]
   21a00:	78a2      	ldrb	r2, [r4, #2]
   21a02:	78c9      	ldrb	r1, [r1, #3]
   21a04:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   21a06:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   21a0a:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   21a0c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   21a10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   21a14:	6042      	str	r2, [r0, #4]
		break;
   21a16:	e7ef      	b.n	219f8 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   21a18:	2302      	movs	r3, #2
   21a1a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   21a1e:	f7ff fee2 	bl	217e6 <memcpy>
		break;
   21a22:	e7e9      	b.n	219f8 <bt_uuid_create+0x20>
	switch (data_len) {
   21a24:	4618      	mov	r0, r3
   21a26:	e7e8      	b.n	219fa <bt_uuid_create+0x22>

00021a28 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   21a28:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   21a2a:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   21a2c:	2106      	movs	r1, #6
{
   21a2e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   21a30:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   21a34:	f7f0 ffee 	bl	12a14 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   21a38:	b918      	cbnz	r0, 21a42 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   21a3a:	79a3      	ldrb	r3, [r4, #6]
   21a3c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   21a40:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   21a42:	bd10      	pop	{r4, pc}

00021a44 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   21a44:	280f      	cmp	r0, #15
   21a46:	d806      	bhi.n	21a56 <bt_hci_evt_get_flags+0x12>
   21a48:	280d      	cmp	r0, #13
   21a4a:	d80b      	bhi.n	21a64 <bt_hci_evt_get_flags+0x20>
   21a4c:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   21a4e:	bf14      	ite	ne
   21a50:	2002      	movne	r0, #2
   21a52:	2003      	moveq	r0, #3
   21a54:	4770      	bx	lr
	switch (evt) {
   21a56:	2813      	cmp	r0, #19
   21a58:	d004      	beq.n	21a64 <bt_hci_evt_get_flags+0x20>
   21a5a:	281a      	cmp	r0, #26
   21a5c:	bf14      	ite	ne
   21a5e:	2002      	movne	r0, #2
   21a60:	2001      	moveq	r0, #1
   21a62:	4770      	bx	lr
   21a64:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   21a66:	4770      	bx	lr

00021a68 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21a68:	f3bf 8f5b 	dmb	ish
   21a6c:	6800      	ldr	r0, [r0, #0]
   21a6e:	f3bf 8f5b 	dmb	ish
}
   21a72:	4770      	bx	lr

00021a74 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   21a74:	2207      	movs	r2, #7
   21a76:	f7ff beb6 	b.w	217e6 <memcpy>

00021a7a <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   21a7a:	2207      	movs	r2, #7
   21a7c:	f7ff bea3 	b.w	217c6 <memcmp>

00021a80 <atomic_and>:
{
   21a80:	4603      	mov	r3, r0
}
   21a82:	f3bf 8f5b 	dmb	ish
   21a86:	e853 0f00 	ldrex	r0, [r3]
   21a8a:	ea00 0201 	and.w	r2, r0, r1
   21a8e:	e843 2c00 	strex	ip, r2, [r3]
   21a92:	f1bc 0f00 	cmp.w	ip, #0
   21a96:	d1f6      	bne.n	21a86 <atomic_and+0x6>
   21a98:	f3bf 8f5b 	dmb	ish
   21a9c:	4770      	bx	lr

00021a9e <atomic_or>:
{
   21a9e:	4603      	mov	r3, r0
}
   21aa0:	f3bf 8f5b 	dmb	ish
   21aa4:	e853 0f00 	ldrex	r0, [r3]
   21aa8:	ea40 0201 	orr.w	r2, r0, r1
   21aac:	e843 2c00 	strex	ip, r2, [r3]
   21ab0:	f1bc 0f00 	cmp.w	ip, #0
   21ab4:	d1f6      	bne.n	21aa4 <atomic_or+0x6>
   21ab6:	f3bf 8f5b 	dmb	ish
   21aba:	4770      	bx	lr

00021abc <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   21abc:	460b      	mov	r3, r1
   21abe:	b410      	push	{r4}
   21ac0:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   21ac2:	f001 041f 	and.w	r4, r1, #31
   21ac6:	2101      	movs	r1, #1
   21ac8:	40a1      	lsls	r1, r4

	if (val) {
   21aca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   21ace:	b112      	cbz	r2, 21ad6 <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   21ad0:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   21ad2:	f7ff bfe4 	b.w	21a9e <atomic_or>
}
   21ad6:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21ad8:	43c9      	mvns	r1, r1
   21ada:	f7ff bfd1 	b.w	21a80 <atomic_and>

00021ade <atomic_test_and_set_bit>:
{
   21ade:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   21ae0:	2301      	movs	r3, #1
   21ae2:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   21ae6:	f7ff ffda 	bl	21a9e <atomic_or>
	return (old & mask) != 0;
   21aea:	4201      	tst	r1, r0
}
   21aec:	bf14      	ite	ne
   21aee:	2001      	movne	r0, #1
   21af0:	2000      	moveq	r0, #0
   21af2:	bd08      	pop	{r3, pc}

00021af4 <sys_put_le64>:
	dst[1] = val >> 8;
   21af4:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   21af8:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   21afa:	0e00      	lsrs	r0, r0, #24
   21afc:	7053      	strb	r3, [r2, #1]
   21afe:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   21b00:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   21b02:	f3c1 2007 	ubfx	r0, r1, #8, #8
   21b06:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   21b08:	7093      	strb	r3, [r2, #2]
   21b0a:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   21b0c:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   21b0e:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   21b10:	71d1      	strb	r1, [r2, #7]
}
   21b12:	4770      	bx	lr

00021b14 <le_adv_set_private_addr.isra.0>:
static int le_set_private_addr(uint8_t id)
   21b14:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   21b16:	2106      	movs	r1, #6
   21b18:	4668      	mov	r0, sp
   21b1a:	f7f0 ff7b 	bl	12a14 <bt_rand>
	if (err) {
   21b1e:	b940      	cbnz	r0, 21b32 <le_adv_set_private_addr.isra.0+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   21b20:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   21b24:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   21b26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   21b2a:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   21b2e:	f7e6 fc81 	bl	8434 <set_random_address>
}
   21b32:	b003      	add	sp, #12
   21b34:	f85d fb04 	ldr.w	pc, [sp], #4

00021b38 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   21b38:	f100 0310 	add.w	r3, r0, #16
{
   21b3c:	b510      	push	{r4, lr}
   21b3e:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   21b40:	4618      	mov	r0, r3
   21b42:	f7ff ff91 	bl	21a68 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   21b46:	0642      	lsls	r2, r0, #25
   21b48:	d50a      	bpl.n	21b60 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   21b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   21b4e:	4618      	mov	r0, r3
   21b50:	f7ff ffa5 	bl	21a9e <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   21b54:	4620      	mov	r0, r4
   21b56:	2100      	movs	r1, #0
}
   21b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   21b5c:	f7e6 bcaa 	b.w	84b4 <set_le_adv_enable_legacy>
}
   21b60:	bd10      	pop	{r4, pc}

00021b62 <adv_unpause_enabled>:
{
   21b62:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   21b64:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   21b68:	4604      	mov	r4, r0
   21b6a:	3010      	adds	r0, #16
   21b6c:	f7ff ff88 	bl	21a80 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   21b70:	0483      	lsls	r3, r0, #18
   21b72:	d505      	bpl.n	21b80 <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   21b74:	4620      	mov	r0, r4
   21b76:	2101      	movs	r1, #1
}
   21b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   21b7c:	f7e6 bc9a 	b.w	84b4 <set_le_adv_enable_legacy>
}
   21b80:	bd10      	pop	{r4, pc}

00021b82 <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   21b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21b84:	4607      	mov	r7, r0
   21b86:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   21b88:	f242 0027 	movw	r0, #8231	; 0x2027
   21b8c:	2127      	movs	r1, #39	; 0x27
   21b8e:	f7e6 fa53 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
   21b92:	4604      	mov	r4, r0
   21b94:	b1d0      	cbz	r0, 21bcc <hci_id_add.isra.0+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
   21b96:	2127      	movs	r1, #39	; 0x27
   21b98:	3008      	adds	r0, #8
   21b9a:	f002 fa4d 	bl	24038 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   21b9e:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
   21ba0:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   21ba2:	f7ff ff67 	bl	21a74 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   21ba6:	4631      	mov	r1, r6
   21ba8:	2210      	movs	r2, #16
   21baa:	1de8      	adds	r0, r5, #7
   21bac:	f7ff fe1b 	bl	217e6 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   21bb0:	2210      	movs	r2, #16
   21bb2:	2100      	movs	r1, #0
   21bb4:	f105 0017 	add.w	r0, r5, #23
   21bb8:	f7ff fe40 	bl	2183c <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   21bbc:	4621      	mov	r1, r4
   21bbe:	2200      	movs	r2, #0
}
   21bc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   21bc4:	f242 0027 	movw	r0, #8231	; 0x2027
   21bc8:	f7e6 bb92 	b.w	82f0 <bt_hci_cmd_send_sync>
}
   21bcc:	f06f 0036 	mvn.w	r0, #54	; 0x36
   21bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021bd2 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   21bd2:	7a03      	ldrb	r3, [r0, #8]
   21bd4:	075b      	lsls	r3, r3, #29
   21bd6:	d504      	bpl.n	21be2 <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   21bd8:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   21bdc:	3001      	adds	r0, #1
   21bde:	f7ff bfd0 	b.w	21b82 <hci_id_add.isra.0>
}
   21be2:	4770      	bx	lr

00021be4 <addr_res_enable>:
{
   21be4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   21be6:	2101      	movs	r1, #1
{
   21be8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   21bea:	f242 002d 	movw	r0, #8237	; 0x202d
   21bee:	f7e6 fa23 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
   21bf2:	4604      	mov	r4, r0
   21bf4:	b158      	cbz	r0, 21c0e <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
   21bf6:	4629      	mov	r1, r5
   21bf8:	3008      	adds	r0, #8
   21bfa:	f002 fa2c 	bl	24056 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   21bfe:	4621      	mov	r1, r4
   21c00:	2200      	movs	r2, #0
}
   21c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   21c06:	f242 002d 	movw	r0, #8237	; 0x202d
   21c0a:	f7e6 bb71 	b.w	82f0 <bt_hci_cmd_send_sync>
}
   21c0e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   21c12:	bd38      	pop	{r3, r4, r5, pc}

00021c14 <set_le_scan_enable>:
	return set_le_scan_enable_legacy(enable);
   21c14:	f7e6 bc7c 	b.w	8510 <set_le_scan_enable_legacy>

00021c18 <bt_lookup_id_addr>:
{
   21c18:	b510      	push	{r4, lr}
   21c1a:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   21c1c:	f7ed fc3a 	bl	f494 <bt_keys_find_irk>
		if (keys) {
   21c20:	b100      	cbz	r0, 21c24 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   21c22:	1c44      	adds	r4, r0, #1
}
   21c24:	4620      	mov	r0, r4
   21c26:	bd10      	pop	{r4, pc}

00021c28 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   21c28:	f7e6 bd1c 	b.w	8664 <bt_le_create_conn_legacy>

00021c2c <bt_hci_disconnect>:
{
   21c2c:	b570      	push	{r4, r5, r6, lr}
   21c2e:	4606      	mov	r6, r0
   21c30:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   21c32:	f240 4006 	movw	r0, #1030	; 0x406
   21c36:	2103      	movs	r1, #3
   21c38:	f7e6 f9fe 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
   21c3c:	4604      	mov	r4, r0
   21c3e:	b160      	cbz	r0, 21c5a <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   21c40:	2103      	movs	r1, #3
   21c42:	3008      	adds	r0, #8
   21c44:	f002 f9f8 	bl	24038 <net_buf_simple_add>
	disconn->reason = reason;
   21c48:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   21c4a:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   21c4c:	4621      	mov	r1, r4
   21c4e:	f240 4006 	movw	r0, #1030	; 0x406
}
   21c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   21c56:	f7e6 ba27 	b.w	80a8 <bt_hci_cmd_send>
}
   21c5a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   21c5e:	bd70      	pop	{r4, r5, r6, pc}

00021c60 <bt_le_set_data_len>:
{
   21c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21c62:	4607      	mov	r7, r0
   21c64:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   21c66:	f242 0022 	movw	r0, #8226	; 0x2022
   21c6a:	2106      	movs	r1, #6
{
   21c6c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   21c6e:	f7e6 f9e3 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
   21c72:	4604      	mov	r4, r0
   21c74:	b170      	cbz	r0, 21c94 <bt_le_set_data_len+0x34>
	cp = net_buf_add(buf, sizeof(*cp));
   21c76:	2106      	movs	r1, #6
   21c78:	3008      	adds	r0, #8
   21c7a:	f002 f9dd 	bl	24038 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   21c7e:	883b      	ldrh	r3, [r7, #0]
   21c80:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   21c82:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   21c84:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   21c86:	4621      	mov	r1, r4
   21c88:	f242 0022 	movw	r0, #8226	; 0x2022
}
   21c8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   21c90:	f7e6 ba0a 	b.w	80a8 <bt_hci_cmd_send>
}
   21c94:	f06f 0036 	mvn.w	r0, #54	; 0x36
   21c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021c9a <bt_le_set_phy>:
{
   21c9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21c9e:	4680      	mov	r8, r0
   21ca0:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   21ca2:	f242 0032 	movw	r0, #8242	; 0x2032
   21ca6:	2107      	movs	r1, #7
{
   21ca8:	f89d 9020 	ldrb.w	r9, [sp, #32]
   21cac:	4616      	mov	r6, r2
   21cae:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   21cb0:	f7e6 f9c2 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
   21cb4:	4604      	mov	r4, r0
   21cb6:	b190      	cbz	r0, 21cde <bt_le_set_phy+0x44>
	cp = net_buf_add(buf, sizeof(*cp));
   21cb8:	2107      	movs	r1, #7
   21cba:	3008      	adds	r0, #8
   21cbc:	f002 f9bc 	bl	24038 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   21cc0:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   21cc4:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   21cc6:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   21cc8:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   21cca:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   21ccc:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   21cd0:	4621      	mov	r1, r4
   21cd2:	f242 0032 	movw	r0, #8242	; 0x2032
}
   21cd6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   21cda:	f7e6 b9e5 	b.w	80a8 <bt_hci_cmd_send>
}
   21cde:	f06f 0036 	mvn.w	r0, #54	; 0x36
   21ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00021ce6 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   21ce6:	8802      	ldrh	r2, [r0, #0]
   21ce8:	8843      	ldrh	r3, [r0, #2]
   21cea:	429a      	cmp	r2, r3
{
   21cec:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   21cee:	d818      	bhi.n	21d22 <bt_le_conn_params_valid+0x3c>
   21cf0:	2a05      	cmp	r2, #5
   21cf2:	d916      	bls.n	21d22 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   21cf4:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   21cf8:	d813      	bhi.n	21d22 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   21cfa:	8884      	ldrh	r4, [r0, #4]
   21cfc:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   21d00:	d20f      	bcs.n	21d22 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   21d02:	88c1      	ldrh	r1, [r0, #6]
   21d04:	f1a1 020a 	sub.w	r2, r1, #10
   21d08:	b292      	uxth	r2, r2
   21d0a:	f640 4076 	movw	r0, #3190	; 0xc76
   21d0e:	4282      	cmp	r2, r0
   21d10:	d807      	bhi.n	21d22 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   21d12:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   21d16:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   21d1a:	bf34      	ite	cc
   21d1c:	2001      	movcc	r0, #1
   21d1e:	2000      	movcs	r0, #0
}
   21d20:	bd10      	pop	{r4, pc}
		return false;
   21d22:	2000      	movs	r0, #0
   21d24:	e7fc      	b.n	21d20 <bt_le_conn_params_valid+0x3a>

00021d26 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   21d26:	7a03      	ldrb	r3, [r0, #8]
   21d28:	07d9      	lsls	r1, r3, #31
   21d2a:	d504      	bpl.n	21d36 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   21d2c:	f023 0301 	bic.w	r3, r3, #1
   21d30:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   21d32:	f7e6 be03 	b.w	893c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   21d36:	0799      	lsls	r1, r3, #30
   21d38:	d504      	bpl.n	21d44 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   21d3a:	f023 0302 	bic.w	r3, r3, #2
   21d3e:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   21d40:	f7e6 beda 	b.w	8af8 <bt_id_del>
}
   21d44:	4770      	bx	lr

00021d46 <bt_send>:
		return bt_hci_ecc_send(buf);
   21d46:	f7e5 bb07 	b.w	7358 <bt_hci_ecc_send>

00021d4a <bt_addr_le_is_bonded>:
{
   21d4a:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   21d4c:	f7ed fbdc 	bl	f508 <bt_keys_find_addr>
		return keys && keys->keys;
   21d50:	b118      	cbz	r0, 21d5a <bt_addr_le_is_bonded+0x10>
   21d52:	89c0      	ldrh	r0, [r0, #14]
   21d54:	3800      	subs	r0, #0
   21d56:	bf18      	it	ne
   21d58:	2001      	movne	r0, #1
}
   21d5a:	bd08      	pop	{r3, pc}

00021d5c <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   21d5c:	6880      	ldr	r0, [r0, #8]
   21d5e:	f7e7 bcfb 	b.w	9758 <enh_conn_complete>

00021d62 <le_legacy_conn_complete>:
{
   21d62:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   21d64:	6881      	ldr	r1, [r0, #8]
{
   21d66:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   21d68:	780b      	ldrb	r3, [r1, #0]
   21d6a:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   21d6e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   21d72:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   21d76:	78cb      	ldrb	r3, [r1, #3]
   21d78:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   21d7c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   21d80:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   21d84:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   21d88:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   21d8c:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   21d90:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   21d94:	7c4b      	ldrb	r3, [r1, #17]
   21d96:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   21d9a:	a803      	add	r0, sp, #12
   21d9c:	3104      	adds	r1, #4
   21d9e:	f7ff fe69 	bl	21a74 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   21da2:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   21da4:	4669      	mov	r1, sp
   21da6:	2206      	movs	r2, #6
   21da8:	f10d 0013 	add.w	r0, sp, #19
   21dac:	9400      	str	r4, [sp, #0]
   21dae:	f8ad 4004 	strh.w	r4, [sp, #4]
   21db2:	f7ff fd18 	bl	217e6 <memcpy>
   21db6:	2206      	movs	r2, #6
   21db8:	4669      	mov	r1, sp
   21dba:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   21dbe:	9400      	str	r4, [sp, #0]
   21dc0:	f8ad 4004 	strh.w	r4, [sp, #4]
   21dc4:	f7ff fd0f 	bl	217e6 <memcpy>
	enh_conn_complete(&enh);
   21dc8:	a802      	add	r0, sp, #8
   21dca:	f7e7 fcc5 	bl	9758 <enh_conn_complete>
}
   21dce:	b00a      	add	sp, #40	; 0x28
   21dd0:	bd10      	pop	{r4, pc}

00021dd2 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   21dd2:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   21dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   21dd8:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   21dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21dde:	2100      	movs	r1, #0
{
   21de0:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   21de2:	f7e5 fc33 	bl	764c <bt_buf_get_evt>

	hdr = net_buf_add(buf, sizeof(*hdr));
   21de6:	2102      	movs	r1, #2
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   21de8:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   21dea:	3008      	adds	r0, #8
   21dec:	f002 f924 	bl	24038 <net_buf_simple_add>
	hdr->evt = evt;
   21df0:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   21df2:	7045      	strb	r5, [r0, #1]

	return buf;
}
   21df4:	4620      	mov	r0, r4
   21df6:	bd70      	pop	{r4, r5, r6, pc}

00021df8 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   21df8:	3103      	adds	r1, #3
{
   21dfa:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   21dfc:	b2c9      	uxtb	r1, r1
{
   21dfe:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   21e00:	200e      	movs	r0, #14
   21e02:	f7ff ffe6 	bl	21dd2 <bt_hci_evt_create>

	cc = net_buf_add(buf, sizeof(*cc));
   21e06:	2103      	movs	r1, #3
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   21e08:	4604      	mov	r4, r0
	cc = net_buf_add(buf, sizeof(*cc));
   21e0a:	3008      	adds	r0, #8
   21e0c:	f002 f914 	bl	24038 <net_buf_simple_add>
	cc->ncmd = 1U;
   21e10:	2301      	movs	r3, #1
   21e12:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   21e14:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   21e18:	4620      	mov	r0, r4
   21e1a:	bd38      	pop	{r3, r4, r5, pc}

00021e1c <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   21e1c:	b570      	push	{r4, r5, r6, lr}
   21e1e:	4605      	mov	r5, r0
   21e20:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   21e22:	200f      	movs	r0, #15
   21e24:	2104      	movs	r1, #4
   21e26:	f7ff ffd4 	bl	21dd2 <bt_hci_evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
   21e2a:	2104      	movs	r1, #4
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   21e2c:	4604      	mov	r4, r0
	cs = net_buf_add(buf, sizeof(*cs));
   21e2e:	3008      	adds	r0, #8
   21e30:	f002 f902 	bl	24038 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1U;
   21e34:	2201      	movs	r2, #1
	cs->status = status;
   21e36:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   21e38:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   21e3a:	8045      	strh	r5, [r0, #2]

	return buf;
}
   21e3c:	4620      	mov	r0, r4
   21e3e:	bd70      	pop	{r4, r5, r6, pc}

00021e40 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21e40:	f3bf 8f5b 	dmb	ish
   21e44:	6800      	ldr	r0, [r0, #0]
   21e46:	f3bf 8f5b 	dmb	ish
}
   21e4a:	4770      	bx	lr

00021e4c <tx_notify>:
{
   21e4c:	b570      	push	{r4, r5, r6, lr}
   21e4e:	4604      	mov	r4, r0
	__asm__ volatile(
   21e50:	f04f 0220 	mov.w	r2, #32
   21e54:	f3ef 8311 	mrs	r3, BASEPRI
   21e58:	f382 8811 	msr	BASEPRI, r2
   21e5c:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   21e60:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   21e62:	b920      	cbnz	r0, 21e6e <tx_notify+0x22>
	__asm__ volatile(
   21e64:	f383 8811 	msr	BASEPRI, r3
   21e68:	f3bf 8f6f 	isb	sy
}
   21e6c:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21e6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   21e70:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   21e72:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21e74:	4288      	cmp	r0, r1
	list->tail = node;
   21e76:	bf08      	it	eq
   21e78:	6262      	streq	r2, [r4, #36]	; 0x24
   21e7a:	f383 8811 	msr	BASEPRI, r3
   21e7e:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   21e82:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   21e86:	f7e7 feaf 	bl	9be8 <tx_free>
		cb(conn, user_data);
   21e8a:	4631      	mov	r1, r6
   21e8c:	4620      	mov	r0, r4
   21e8e:	47a8      	blx	r5
	while (1) {
   21e90:	e7de      	b.n	21e50 <tx_notify+0x4>

00021e92 <tx_complete_work>:
	tx_notify(conn);
   21e92:	3828      	subs	r0, #40	; 0x28
   21e94:	f7ff bfda 	b.w	21e4c <tx_notify>

00021e98 <bt_conn_new>:
{
   21e98:	b538      	push	{r3, r4, r5, lr}
   21e9a:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   21e9c:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   21e9e:	2501      	movs	r5, #1
   21ea0:	428b      	cmp	r3, r1
   21ea2:	d102      	bne.n	21eaa <bt_conn_new+0x12>
		return NULL;
   21ea4:	2400      	movs	r4, #0
}
   21ea6:	4620      	mov	r0, r4
   21ea8:	bd38      	pop	{r3, r4, r5, pc}
   21eaa:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   21eae:	f3bf 8f5b 	dmb	ish
   21eb2:	e852 0f00 	ldrex	r0, [r2]
   21eb6:	2800      	cmp	r0, #0
   21eb8:	d104      	bne.n	21ec4 <bt_conn_new+0x2c>
   21eba:	e842 5c00 	strex	ip, r5, [r2]
   21ebe:	f1bc 0f00 	cmp.w	ip, #0
   21ec2:	d1f6      	bne.n	21eb2 <bt_conn_new+0x1a>
   21ec4:	f3bf 8f5b 	dmb	ish
   21ec8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   21ecc:	d002      	beq.n	21ed4 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   21ece:	3301      	adds	r3, #1
   21ed0:	4604      	mov	r4, r0
   21ed2:	e7e5      	b.n	21ea0 <bt_conn_new+0x8>
	if (!conn) {
   21ed4:	2c00      	cmp	r4, #0
   21ed6:	d0e6      	beq.n	21ea6 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   21ed8:	22b8      	movs	r2, #184	; 0xb8
   21eda:	2100      	movs	r1, #0
   21edc:	4620      	mov	r0, r4
   21ede:	f7ff fcad 	bl	2183c <memset>
	return conn;
   21ee2:	e7e0      	b.n	21ea6 <bt_conn_new+0xe>

00021ee4 <bt_conn_le_start_encryption>:
{
   21ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21ee8:	4682      	mov	sl, r0
   21eea:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   21eec:	f242 0019 	movw	r0, #8217	; 0x2019
   21ef0:	211c      	movs	r1, #28
{
   21ef2:	9e08      	ldr	r6, [sp, #32]
   21ef4:	4690      	mov	r8, r2
   21ef6:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   21ef8:	f7e6 f89e 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
   21efc:	4605      	mov	r5, r0
   21efe:	b340      	cbz	r0, 21f52 <bt_conn_le_start_encryption+0x6e>
	cp = net_buf_add(buf, sizeof(*cp));
   21f00:	211c      	movs	r1, #28
   21f02:	3008      	adds	r0, #8
   21f04:	f002 f898 	bl	24038 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   21f08:	f8ba 3000 	ldrh.w	r3, [sl]
	cp = net_buf_add(buf, sizeof(*cp));
   21f0c:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   21f0e:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   21f10:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   21f14:	4649      	mov	r1, r9
   21f16:	f7ff fc66 	bl	217e6 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   21f1a:	2202      	movs	r2, #2
   21f1c:	4641      	mov	r1, r8
   21f1e:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   21f22:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   21f24:	f7ff fc5f 	bl	217e6 <memcpy>
	memcpy(cp->ltk, ltk, len);
   21f28:	4632      	mov	r2, r6
   21f2a:	4639      	mov	r1, r7
   21f2c:	4620      	mov	r0, r4
   21f2e:	f7ff fc5a 	bl	217e6 <memcpy>
	if (len < sizeof(cp->ltk)) {
   21f32:	2e0f      	cmp	r6, #15
   21f34:	d805      	bhi.n	21f42 <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   21f36:	f1c6 0210 	rsb	r2, r6, #16
   21f3a:	2100      	movs	r1, #0
   21f3c:	19a0      	adds	r0, r4, r6
   21f3e:	f7ff fc7d 	bl	2183c <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   21f42:	4629      	mov	r1, r5
   21f44:	2200      	movs	r2, #0
}
   21f46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   21f4a:	f242 0019 	movw	r0, #8217	; 0x2019
   21f4e:	f7e6 b9cf 	b.w	82f0 <bt_hci_cmd_send_sync>
}
   21f52:	f06f 0036 	mvn.w	r0, #54	; 0x36
   21f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00021f5a <bt_conn_set_security>:
{
   21f5a:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   21f5c:	7b43      	ldrb	r3, [r0, #13]
   21f5e:	2b07      	cmp	r3, #7
{
   21f60:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   21f62:	d128      	bne.n	21fb6 <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   21f64:	7a43      	ldrb	r3, [r0, #9]
   21f66:	428b      	cmp	r3, r1
   21f68:	d228      	bcs.n	21fbc <bt_conn_set_security+0x62>
   21f6a:	7a83      	ldrb	r3, [r0, #10]
   21f6c:	428b      	cmp	r3, r1
   21f6e:	d225      	bcs.n	21fbc <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21f70:	f3bf 8f5b 	dmb	ish
	if (val) {
   21f74:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   21f76:	f100 0304 	add.w	r3, r0, #4
   21f7a:	d513      	bpl.n	21fa4 <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21f7c:	e853 2f00 	ldrex	r2, [r3]
   21f80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   21f84:	e843 2000 	strex	r0, r2, [r3]
   21f88:	2800      	cmp	r0, #0
   21f8a:	d1f7      	bne.n	21f7c <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21f8c:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   21f90:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   21f94:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   21f96:	4620      	mov	r0, r4
   21f98:	f001 ff20 	bl	23ddc <bt_smp_start_security>
	if (err) {
   21f9c:	b108      	cbz	r0, 21fa2 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   21f9e:	7a63      	ldrb	r3, [r4, #9]
   21fa0:	72a3      	strb	r3, [r4, #10]
}
   21fa2:	bd10      	pop	{r4, pc}
   21fa4:	e853 2f00 	ldrex	r2, [r3]
   21fa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   21fac:	e843 2000 	strex	r0, r2, [r3]
   21fb0:	2800      	cmp	r0, #0
   21fb2:	d0eb      	beq.n	21f8c <bt_conn_set_security+0x32>
   21fb4:	e7f6      	b.n	21fa4 <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   21fb6:	f06f 0038 	mvn.w	r0, #56	; 0x38
   21fba:	e7f2      	b.n	21fa2 <bt_conn_set_security+0x48>
		return 0;
   21fbc:	2000      	movs	r0, #0
   21fbe:	e7f0      	b.n	21fa2 <bt_conn_set_security+0x48>

00021fc0 <bt_conn_get_security>:
}
   21fc0:	7a40      	ldrb	r0, [r0, #9]
   21fc2:	4770      	bx	lr

00021fc4 <bt_conn_reset_rx_state>:
{
   21fc4:	b510      	push	{r4, lr}
   21fc6:	4604      	mov	r4, r0
	if (!conn->rx) {
   21fc8:	6900      	ldr	r0, [r0, #16]
   21fca:	b118      	cbz	r0, 21fd4 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   21fcc:	f7fb f8a6 	bl	1d11c <net_buf_unref>
	conn->rx = NULL;
   21fd0:	2300      	movs	r3, #0
   21fd2:	6123      	str	r3, [r4, #16]
}
   21fd4:	bd10      	pop	{r4, pc}

00021fd6 <bt_conn_is_peer_addr_le>:
{
   21fd6:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   21fd8:	7a03      	ldrb	r3, [r0, #8]
   21fda:	428b      	cmp	r3, r1
{
   21fdc:	4604      	mov	r4, r0
   21fde:	4615      	mov	r5, r2
	if (id != conn->id) {
   21fe0:	d115      	bne.n	2200e <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   21fe2:	f100 0188 	add.w	r1, r0, #136	; 0x88
   21fe6:	2207      	movs	r2, #7
   21fe8:	4628      	mov	r0, r5
   21fea:	f7ff fbec 	bl	217c6 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   21fee:	b180      	cbz	r0, 22012 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   21ff0:	78e3      	ldrb	r3, [r4, #3]
   21ff2:	2207      	movs	r2, #7
   21ff4:	b943      	cbnz	r3, 22008 <bt_conn_is_peer_addr_le+0x32>
   21ff6:	f104 0196 	add.w	r1, r4, #150	; 0x96
   21ffa:	4628      	mov	r0, r5
   21ffc:	f7ff fbe3 	bl	217c6 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   22000:	fab0 f080 	clz	r0, r0
   22004:	0940      	lsrs	r0, r0, #5
}
   22006:	bd38      	pop	{r3, r4, r5, pc}
   22008:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2200c:	e7f5      	b.n	21ffa <bt_conn_is_peer_addr_le+0x24>
		return false;
   2200e:	2000      	movs	r0, #0
   22010:	e7f9      	b.n	22006 <bt_conn_is_peer_addr_le+0x30>
		return true;
   22012:	2001      	movs	r0, #1
   22014:	e7f7      	b.n	22006 <bt_conn_is_peer_addr_le+0x30>

00022016 <bt_conn_ref>:
{
   22016:	b510      	push	{r4, lr}
   22018:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   2201a:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   2201e:	4610      	mov	r0, r2
   22020:	f7ff ff0e 	bl	21e40 <atomic_get>
		if (!old) {
   22024:	b180      	cbz	r0, 22048 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   22026:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2202a:	1c41      	adds	r1, r0, #1
   2202c:	e852 4f00 	ldrex	r4, [r2]
   22030:	4284      	cmp	r4, r0
   22032:	d104      	bne.n	2203e <bt_conn_ref+0x28>
   22034:	e842 1c00 	strex	ip, r1, [r2]
   22038:	f1bc 0f00 	cmp.w	ip, #0
   2203c:	d1f6      	bne.n	2202c <bt_conn_ref+0x16>
   2203e:	f3bf 8f5b 	dmb	ish
   22042:	d1ec      	bne.n	2201e <bt_conn_ref+0x8>
}
   22044:	4618      	mov	r0, r3
   22046:	bd10      	pop	{r4, pc}
			return NULL;
   22048:	4603      	mov	r3, r0
   2204a:	e7fb      	b.n	22044 <bt_conn_ref+0x2e>

0002204c <bt_conn_unref>:
{
   2204c:	b508      	push	{r3, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   2204e:	30b8      	adds	r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   22050:	f3bf 8f5b 	dmb	ish
   22054:	e850 3f00 	ldrex	r3, [r0]
   22058:	3b01      	subs	r3, #1
   2205a:	e840 3200 	strex	r2, r3, [r0]
   2205e:	2a00      	cmp	r2, #0
   22060:	d1f8      	bne.n	22054 <bt_conn_unref+0x8>
   22062:	f3bf 8f5b 	dmb	ish
	    atomic_get(&conn->ref) == 0) {
   22066:	f7ff feeb 	bl	21e40 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2206a:	b918      	cbnz	r0, 22074 <bt_conn_unref+0x28>
}
   2206c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   22070:	f7e7 bb3c 	b.w	96ec <bt_le_adv_resume>
}
   22074:	bd08      	pop	{r3, pc}

00022076 <conn_lookup_handle>:
{
   22076:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2207a:	4607      	mov	r7, r0
   2207c:	460e      	mov	r6, r1
   2207e:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   22080:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   22082:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   22086:	42b4      	cmp	r4, r6
   22088:	d103      	bne.n	22092 <conn_lookup_handle+0x1c>
	return NULL;
   2208a:	2300      	movs	r3, #0
}
   2208c:	4618      	mov	r0, r3
   2208e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   22092:	fb09 7004 	mla	r0, r9, r4, r7
   22096:	f7ff ffbe 	bl	22016 <bt_conn_ref>
   2209a:	4603      	mov	r3, r0
		if (!conn) {
   2209c:	b158      	cbz	r0, 220b6 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2209e:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   220a0:	2d01      	cmp	r5, #1
   220a2:	d002      	beq.n	220aa <conn_lookup_handle+0x34>
   220a4:	3d07      	subs	r5, #7
   220a6:	2d01      	cmp	r5, #1
   220a8:	d803      	bhi.n	220b2 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   220aa:	881a      	ldrh	r2, [r3, #0]
   220ac:	4542      	cmp	r2, r8
   220ae:	d0ed      	beq.n	2208c <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   220b0:	4618      	mov	r0, r3
   220b2:	f7ff ffcb 	bl	2204c <bt_conn_unref>
	for (i = 0; i < size; i++) {
   220b6:	3401      	adds	r4, #1
   220b8:	e7e5      	b.n	22086 <conn_lookup_handle+0x10>

000220ba <bt_conn_get_dst>:
}
   220ba:	3088      	adds	r0, #136	; 0x88
   220bc:	4770      	bx	lr

000220be <bt_conn_le_conn_update>:
{
   220be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   220c0:	4607      	mov	r7, r0
   220c2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   220c4:	f242 0013 	movw	r0, #8211	; 0x2013
   220c8:	210e      	movs	r1, #14
   220ca:	f7e5 ffb5 	bl	8038 <bt_hci_cmd_create>
	if (!buf) {
   220ce:	4606      	mov	r6, r0
   220d0:	b1d0      	cbz	r0, 22108 <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   220d2:	210e      	movs	r1, #14
   220d4:	3008      	adds	r0, #8
   220d6:	f001 ffaf 	bl	24038 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   220da:	220e      	movs	r2, #14
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   220dc:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   220de:	2100      	movs	r1, #0
   220e0:	f7ff fbac 	bl	2183c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   220e4:	883b      	ldrh	r3, [r7, #0]
   220e6:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   220e8:	882b      	ldrh	r3, [r5, #0]
   220ea:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   220ec:	886b      	ldrh	r3, [r5, #2]
   220ee:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   220f0:	88ab      	ldrh	r3, [r5, #4]
   220f2:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   220f4:	88eb      	ldrh	r3, [r5, #6]
   220f6:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   220f8:	4631      	mov	r1, r6
   220fa:	2200      	movs	r2, #0
}
   220fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   22100:	f242 0013 	movw	r0, #8211	; 0x2013
   22104:	f7e6 b8f4 	b.w	82f0 <bt_hci_cmd_send_sync>
}
   22108:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2210c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002210e <l2cap_connected>:
}
   2210e:	4770      	bx	lr

00022110 <l2cap_disconnected>:
   22110:	4770      	bx	lr

00022112 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22112:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   22114:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22116:	b17b      	cbz	r3, 22138 <bt_l2cap_chan_remove+0x26>
   22118:	3b08      	subs	r3, #8
   2211a:	2200      	movs	r2, #0
   2211c:	b163      	cbz	r3, 22138 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   2211e:	428b      	cmp	r3, r1
   22120:	f103 0408 	add.w	r4, r3, #8
   22124:	d10f      	bne.n	22146 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   22126:	688b      	ldr	r3, [r1, #8]
   22128:	b93a      	cbnz	r2, 2213a <bt_l2cap_chan_remove+0x28>
   2212a:	6d02      	ldr	r2, [r0, #80]	; 0x50
	list->head = node;
   2212c:	64c3      	str	r3, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   2212e:	4294      	cmp	r4, r2
   22130:	d100      	bne.n	22134 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   22132:	6503      	str	r3, [r0, #80]	; 0x50
	parent->next = child;
   22134:	2300      	movs	r3, #0
   22136:	608b      	str	r3, [r1, #8]
}
   22138:	bd10      	pop	{r4, pc}
   2213a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2213c:	6d03      	ldr	r3, [r0, #80]	; 0x50
   2213e:	429c      	cmp	r4, r3
	list->tail = node;
   22140:	bf08      	it	eq
   22142:	6502      	streq	r2, [r0, #80]	; 0x50
}
   22144:	e7f6      	b.n	22134 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22146:	2c00      	cmp	r4, #0
   22148:	d0f6      	beq.n	22138 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2214a:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2214c:	2b00      	cmp	r3, #0
   2214e:	d0f3      	beq.n	22138 <bt_l2cap_chan_remove+0x26>
   22150:	3b08      	subs	r3, #8
   22152:	4622      	mov	r2, r4
   22154:	e7e2      	b.n	2211c <bt_l2cap_chan_remove+0xa>

00022156 <bt_l2cap_chan_del>:
{
   22156:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   22158:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2215c:	4604      	mov	r4, r0
	if (!chan->conn) {
   2215e:	b123      	cbz	r3, 2216a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   22160:	686b      	ldr	r3, [r5, #4]
   22162:	b103      	cbz	r3, 22166 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   22164:	4798      	blx	r3
	chan->conn = NULL;
   22166:	2300      	movs	r3, #0
   22168:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2216a:	68e3      	ldr	r3, [r4, #12]
   2216c:	b10b      	cbz	r3, 22172 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2216e:	4620      	mov	r0, r4
   22170:	4798      	blx	r3
	if (ops->released) {
   22172:	69eb      	ldr	r3, [r5, #28]
   22174:	b11b      	cbz	r3, 2217e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   22176:	4620      	mov	r0, r4
}
   22178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2217c:	4718      	bx	r3
}
   2217e:	bd70      	pop	{r4, r5, r6, pc}

00022180 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   22180:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   22182:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   22184:	b18b      	cbz	r3, 221aa <bt_l2cap_disconnected+0x2a>
   22186:	f1b3 0008 	subs.w	r0, r3, #8
   2218a:	d00e      	beq.n	221aa <bt_l2cap_disconnected+0x2a>
   2218c:	681c      	ldr	r4, [r3, #0]
   2218e:	b104      	cbz	r4, 22192 <bt_l2cap_disconnected+0x12>
   22190:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   22192:	f7ff ffe0 	bl	22156 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   22196:	b144      	cbz	r4, 221aa <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22198:	f114 0308 	adds.w	r3, r4, #8
   2219c:	d002      	beq.n	221a4 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2219e:	68a3      	ldr	r3, [r4, #8]
   221a0:	b103      	cbz	r3, 221a4 <bt_l2cap_disconnected+0x24>
   221a2:	3b08      	subs	r3, #8
{
   221a4:	4620      	mov	r0, r4
   221a6:	461c      	mov	r4, r3
   221a8:	e7f3      	b.n	22192 <bt_l2cap_disconnected+0x12>
}
   221aa:	bd10      	pop	{r4, pc}

000221ac <bt_l2cap_security_changed>:
{
   221ac:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   221ae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   221b0:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   221b2:	b1a3      	cbz	r3, 221de <bt_l2cap_security_changed+0x32>
   221b4:	f1b3 0008 	subs.w	r0, r3, #8
   221b8:	d011      	beq.n	221de <bt_l2cap_security_changed+0x32>
   221ba:	681c      	ldr	r4, [r3, #0]
   221bc:	b104      	cbz	r4, 221c0 <bt_l2cap_security_changed+0x14>
   221be:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   221c0:	6843      	ldr	r3, [r0, #4]
   221c2:	689b      	ldr	r3, [r3, #8]
   221c4:	b10b      	cbz	r3, 221ca <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   221c6:	4629      	mov	r1, r5
   221c8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   221ca:	b144      	cbz	r4, 221de <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   221cc:	f114 0308 	adds.w	r3, r4, #8
   221d0:	d002      	beq.n	221d8 <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   221d2:	68a3      	ldr	r3, [r4, #8]
   221d4:	b103      	cbz	r3, 221d8 <bt_l2cap_security_changed+0x2c>
   221d6:	3b08      	subs	r3, #8
{
   221d8:	4620      	mov	r0, r4
   221da:	461c      	mov	r4, r3
   221dc:	e7f0      	b.n	221c0 <bt_l2cap_security_changed+0x14>
}
   221de:	bd38      	pop	{r3, r4, r5, pc}

000221e0 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   221e0:	3104      	adds	r1, #4
   221e2:	f7e8 bb3b 	b.w	a85c <bt_conn_create_pdu_timeout>

000221e6 <bt_l2cap_send_cb>:
{
   221e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   221ea:	4614      	mov	r4, r2
   221ec:	4605      	mov	r5, r0
   221ee:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   221f0:	f102 0008 	add.w	r0, r2, #8
   221f4:	2104      	movs	r1, #4
{
   221f6:	461e      	mov	r6, r3
   221f8:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   221fc:	f001 ff3d 	bl	2407a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   22200:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   22202:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   22204:	3a04      	subs	r2, #4
   22206:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   22208:	4643      	mov	r3, r8
   2220a:	4632      	mov	r2, r6
   2220c:	4621      	mov	r1, r4
   2220e:	4628      	mov	r0, r5
}
   22210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   22214:	f7e7 bee0 	b.w	9fd8 <bt_conn_send_cb>

00022218 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   22218:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2221a:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2221c:	2202      	movs	r2, #2
   2221e:	2001      	movs	r0, #1
   22220:	f7e8 fc46 	bl	aab0 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   22224:	4604      	mov	r4, r0
   22226:	b160      	cbz	r0, 22242 <l2cap_send_reject.constprop.0+0x2a>
	rej = net_buf_add(buf, sizeof(*rej));
   22228:	2102      	movs	r1, #2
   2222a:	3008      	adds	r0, #8
   2222c:	f001 ff04 	bl	24038 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   22230:	2300      	movs	r3, #0
   22232:	7003      	strb	r3, [r0, #0]
   22234:	7043      	strb	r3, [r0, #1]
   22236:	4622      	mov	r2, r4
   22238:	9300      	str	r3, [sp, #0]
   2223a:	2105      	movs	r1, #5
   2223c:	4628      	mov	r0, r5
   2223e:	f7ff ffd2 	bl	221e6 <bt_l2cap_send_cb>
}
   22242:	b003      	add	sp, #12
   22244:	bd30      	pop	{r4, r5, pc}

00022246 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22246:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   22248:	b160      	cbz	r0, 22264 <bt_l2cap_le_lookup_tx_cid+0x1e>
   2224a:	3808      	subs	r0, #8
   2224c:	b900      	cbnz	r0, 22250 <bt_l2cap_le_lookup_tx_cid+0xa>
   2224e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   22250:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   22254:	428b      	cmp	r3, r1
   22256:	d005      	beq.n	22264 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22258:	f110 0308 	adds.w	r3, r0, #8
   2225c:	d001      	beq.n	22262 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2225e:	6880      	ldr	r0, [r0, #8]
   22260:	e7f2      	b.n	22248 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   22262:	4618      	mov	r0, r3
}
   22264:	4770      	bx	lr

00022266 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22266:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   22268:	b160      	cbz	r0, 22284 <bt_l2cap_le_lookup_rx_cid+0x1e>
   2226a:	3808      	subs	r0, #8
   2226c:	b900      	cbnz	r0, 22270 <bt_l2cap_le_lookup_rx_cid+0xa>
   2226e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   22270:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   22274:	428b      	cmp	r3, r1
   22276:	d005      	beq.n	22284 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22278:	f110 0308 	adds.w	r3, r0, #8
   2227c:	d001      	beq.n	22282 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2227e:	6880      	ldr	r0, [r0, #8]
   22280:	e7f2      	b.n	22268 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   22282:	4618      	mov	r0, r3
}
   22284:	4770      	bx	lr

00022286 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   22286:	4770      	bx	lr

00022288 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   22288:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   2228a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2228c:	b128      	cbz	r0, 2229a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2228e:	6859      	ldr	r1, [r3, #4]
   22290:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   22292:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22294:	4288      	cmp	r0, r1
	list->tail = node;
   22296:	bf08      	it	eq
   22298:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2229a:	4770      	bx	lr

0002229c <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2229c:	4603      	mov	r3, r0
   2229e:	6800      	ldr	r0, [r0, #0]
   222a0:	2200      	movs	r2, #0
   222a2:	b900      	cbnz	r0, 222a6 <sys_slist_find_and_remove+0xa>
   222a4:	4770      	bx	lr
   222a6:	4288      	cmp	r0, r1
   222a8:	d110      	bne.n	222cc <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   222aa:	6808      	ldr	r0, [r1, #0]
   222ac:	b942      	cbnz	r2, 222c0 <sys_slist_find_and_remove+0x24>
   222ae:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   222b0:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   222b2:	4291      	cmp	r1, r2
   222b4:	d100      	bne.n	222b8 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   222b6:	6058      	str	r0, [r3, #4]
	parent->next = child;
   222b8:	2300      	movs	r3, #0
   222ba:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   222bc:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   222be:	4770      	bx	lr
	parent->next = child;
   222c0:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   222c2:	6858      	ldr	r0, [r3, #4]
   222c4:	4281      	cmp	r1, r0
	list->tail = node;
   222c6:	bf08      	it	eq
   222c8:	605a      	streq	r2, [r3, #4]
}
   222ca:	e7f5      	b.n	222b8 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   222cc:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   222ce:	6800      	ldr	r0, [r0, #0]
   222d0:	e7e7      	b.n	222a2 <sys_slist_find_and_remove+0x6>

000222d2 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   222d2:	4603      	mov	r3, r0
	size_t bytes = 0;
   222d4:	2000      	movs	r0, #0

	while (buf) {
   222d6:	b903      	cbnz	r3, 222da <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   222d8:	4770      	bx	lr
		bytes += buf->len;
   222da:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   222dc:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   222de:	4410      	add	r0, r2
		buf = buf->frags;
   222e0:	e7f9      	b.n	222d6 <net_buf_frags_len+0x4>

000222e2 <att_sent>:
	if (chan->ops->sent) {
   222e2:	684b      	ldr	r3, [r1, #4]
   222e4:	695b      	ldr	r3, [r3, #20]
{
   222e6:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   222e8:	b103      	cbz	r3, 222ec <att_sent+0xa>
		chan->ops->sent(chan);
   222ea:	4718      	bx	r3
}
   222ec:	4770      	bx	lr

000222ee <attr_read_type_cb>:
{
   222ee:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   222f0:	68d4      	ldr	r4, [r2, #12]
   222f2:	7823      	ldrb	r3, [r4, #0]
   222f4:	3102      	adds	r1, #2
   222f6:	b913      	cbnz	r3, 222fe <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   222f8:	7021      	strb	r1, [r4, #0]
	return true;
   222fa:	2001      	movs	r0, #1
   222fc:	e006      	b.n	2230c <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   222fe:	428b      	cmp	r3, r1
   22300:	d0fb      	beq.n	222fa <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   22302:	8983      	ldrh	r3, [r0, #12]
   22304:	3b02      	subs	r3, #2
   22306:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   22308:	2000      	movs	r0, #0
   2230a:	6110      	str	r0, [r2, #16]
}
   2230c:	bd10      	pop	{r4, pc}

0002230e <att_prepare_write_req>:
}
   2230e:	2006      	movs	r0, #6
   22310:	4770      	bx	lr

00022312 <att_op_get_type>:
	switch (op) {
   22312:	281e      	cmp	r0, #30
   22314:	d816      	bhi.n	22344 <att_op_get_type+0x32>
   22316:	b308      	cbz	r0, 2235c <att_op_get_type+0x4a>
   22318:	1e43      	subs	r3, r0, #1
   2231a:	2b1d      	cmp	r3, #29
   2231c:	d81e      	bhi.n	2235c <att_op_get_type+0x4a>
   2231e:	e8df f003 	tbb	[pc, r3]
   22322:	2317      	.short	0x2317
   22324:	23172317 	.word	0x23172317
   22328:	23172317 	.word	0x23172317
   2232c:	23172317 	.word	0x23172317
   22330:	23172317 	.word	0x23172317
   22334:	231d1d17 	.word	0x231d1d17
   22338:	1d172317 	.word	0x1d172317
   2233c:	0f1b1d19 	.word	0x0f1b1d19
   22340:	2004      	movs	r0, #4
   22342:	4770      	bx	lr
   22344:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   22348:	2b52      	cmp	r3, #82	; 0x52
   2234a:	d107      	bne.n	2235c <att_op_get_type+0x4a>
		return ATT_COMMAND;
   2234c:	2000      	movs	r0, #0
}
   2234e:	4770      	bx	lr
		return ATT_RESPONSE;
   22350:	2002      	movs	r0, #2
   22352:	4770      	bx	lr
		return ATT_NOTIFICATION;
   22354:	2003      	movs	r0, #3
   22356:	4770      	bx	lr
		return ATT_INDICATION;
   22358:	2005      	movs	r0, #5
   2235a:	4770      	bx	lr
		return ATT_COMMAND;
   2235c:	f010 0f40 	tst.w	r0, #64	; 0x40
   22360:	bf0c      	ite	eq
   22362:	2006      	moveq	r0, #6
   22364:	2000      	movne	r0, #0
   22366:	4770      	bx	lr
		return ATT_REQUEST;
   22368:	2001      	movs	r0, #1
   2236a:	4770      	bx	lr

0002236c <att_notify_mult>:
{
   2236c:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   2236e:	6803      	ldr	r3, [r0, #0]
   22370:	898a      	ldrh	r2, [r1, #12]
   22372:	6818      	ldr	r0, [r3, #0]
   22374:	6889      	ldr	r1, [r1, #8]
   22376:	f7eb fa1b 	bl	d7b0 <bt_gatt_mult_notification>
}
   2237a:	2000      	movs	r0, #0
   2237c:	bd08      	pop	{r3, pc}

0002237e <att_notify>:
{
   2237e:	b538      	push	{r3, r4, r5, lr}
   22380:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   22382:	f101 0008 	add.w	r0, r1, #8
{
   22386:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
   22388:	f001 fe97 	bl	240ba <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2238c:	682d      	ldr	r5, [r5, #0]
   2238e:	89a3      	ldrh	r3, [r4, #12]
   22390:	68a2      	ldr	r2, [r4, #8]
	handle = net_buf_pull_le16(buf);
   22392:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   22394:	6828      	ldr	r0, [r5, #0]
   22396:	f000 ff24 	bl	231e2 <bt_gatt_notification>
}
   2239a:	2000      	movs	r0, #0
   2239c:	bd38      	pop	{r3, r4, r5, pc}

0002239e <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2239e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   223a0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   223a4:	2300      	movs	r3, #0
   223a6:	9300      	str	r3, [sp, #0]
   223a8:	461a      	mov	r2, r3
   223aa:	f7ea faab 	bl	c904 <bt_gatt_foreach_attr_type>
				  user_data);
}
   223ae:	b005      	add	sp, #20
   223b0:	f85d fb04 	ldr.w	pc, [sp], #4

000223b4 <att_chan_read>:
{
   223b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223b8:	4680      	mov	r8, r0
   223ba:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   223bc:	4610      	mov	r0, r2
{
   223be:	4699      	mov	r9, r3
   223c0:	468b      	mov	fp, r1
   223c2:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   223c4:	f7ff ff85 	bl	222d2 <net_buf_frags_len>
   223c8:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   223cc:	4283      	cmp	r3, r0
   223ce:	d97a      	bls.n	224c6 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   223d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   223d4:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   223d6:	4630      	mov	r0, r6
   223d8:	f001 fe0c 	bl	23ff4 <net_buf_frag_last>
	size_t len, total = 0;
   223dc:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   223e0:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   223e2:	4630      	mov	r0, r6
   223e4:	f7ff ff75 	bl	222d2 <net_buf_frags_len>
   223e8:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   223ec:	f105 0708 	add.w	r7, r5, #8
   223f0:	1a24      	subs	r4, r4, r0
   223f2:	4638      	mov	r0, r7
   223f4:	f001 fe6d 	bl	240d2 <net_buf_simple_tailroom>
   223f8:	4284      	cmp	r4, r0
   223fa:	d211      	bcs.n	22420 <att_chan_read+0x6c>
   223fc:	4630      	mov	r0, r6
   223fe:	f7ff ff68 	bl	222d2 <net_buf_frags_len>
   22402:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   22406:	1a24      	subs	r4, r4, r0
		if (!len) {
   22408:	bb34      	cbnz	r4, 22458 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2240a:	79b0      	ldrb	r0, [r6, #6]
   2240c:	f7fa fdca 	bl	1cfa4 <net_buf_pool_get>
   22410:	2200      	movs	r2, #0
   22412:	2300      	movs	r3, #0
   22414:	f001 fdb4 	bl	23f80 <net_buf_alloc_fixed>
			if (!frag) {
   22418:	4605      	mov	r5, r0
   2241a:	b930      	cbnz	r0, 2242a <att_chan_read+0x76>
	return total;
   2241c:	4657      	mov	r7, sl
   2241e:	e02c      	b.n	2247a <att_chan_read+0xc6>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   22420:	4638      	mov	r0, r7
   22422:	f001 fe56 	bl	240d2 <net_buf_simple_tailroom>
   22426:	4604      	mov	r4, r0
   22428:	e7ee      	b.n	22408 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2242a:	4601      	mov	r1, r0
   2242c:	4630      	mov	r0, r6
   2242e:	f001 fdf2 	bl	24016 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   22432:	4630      	mov	r0, r6
   22434:	f7ff ff4d 	bl	222d2 <net_buf_frags_len>
   22438:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   2243c:	f105 0708 	add.w	r7, r5, #8
   22440:	1a24      	subs	r4, r4, r0
   22442:	4638      	mov	r0, r7
   22444:	f001 fe45 	bl	240d2 <net_buf_simple_tailroom>
   22448:	4284      	cmp	r4, r0
   2244a:	d21a      	bcs.n	22482 <att_chan_read+0xce>
   2244c:	4630      	mov	r0, r6
   2244e:	f7ff ff40 	bl	222d2 <net_buf_frags_len>
   22452:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   22456:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   22458:	68a9      	ldr	r1, [r5, #8]
   2245a:	89aa      	ldrh	r2, [r5, #12]
   2245c:	f8db 7004 	ldr.w	r7, [fp, #4]
   22460:	9803      	ldr	r0, [sp, #12]
   22462:	f8cd 9000 	str.w	r9, [sp]
   22466:	440a      	add	r2, r1
   22468:	b2a3      	uxth	r3, r4
   2246a:	4659      	mov	r1, fp
   2246c:	47b8      	blx	r7
		if (read < 0) {
   2246e:	1e07      	subs	r7, r0, #0
   22470:	da0c      	bge.n	2248c <att_chan_read+0xd8>
				return total;
   22472:	f1ba 0f00 	cmp.w	sl, #0
   22476:	bf18      	it	ne
   22478:	4657      	movne	r7, sl
}
   2247a:	4638      	mov	r0, r7
   2247c:	b005      	add	sp, #20
   2247e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   22482:	4638      	mov	r0, r7
   22484:	f001 fe25 	bl	240d2 <net_buf_simple_tailroom>
   22488:	4604      	mov	r4, r0
   2248a:	e7e5      	b.n	22458 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2248c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2248e:	b993      	cbnz	r3, 224b6 <att_chan_read+0x102>
		net_buf_add(frag, read);
   22490:	4639      	mov	r1, r7
   22492:	f105 0008 	add.w	r0, r5, #8
   22496:	f001 fdcf 	bl	24038 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2249a:	4630      	mov	r0, r6
   2249c:	f7ff ff19 	bl	222d2 <net_buf_frags_len>
   224a0:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   224a4:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   224a6:	4283      	cmp	r3, r0
		total += read;
   224a8:	44ba      	add	sl, r7
		offset += read;
   224aa:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   224ae:	d9b5      	bls.n	2241c <att_chan_read+0x68>
   224b0:	42a7      	cmp	r7, r4
   224b2:	d096      	beq.n	223e2 <att_chan_read+0x2e>
   224b4:	e7b2      	b.n	2241c <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   224b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   224b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   224ba:	4639      	mov	r1, r7
   224bc:	4628      	mov	r0, r5
   224be:	4798      	blx	r3
   224c0:	2800      	cmp	r0, #0
   224c2:	d1e5      	bne.n	22490 <att_chan_read+0xdc>
   224c4:	e7aa      	b.n	2241c <att_chan_read+0x68>
		return 0;
   224c6:	2700      	movs	r7, #0
   224c8:	e7d7      	b.n	2247a <att_chan_read+0xc6>

000224ca <find_info_cb>:
{
   224ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   224cc:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   224ce:	6817      	ldr	r7, [r2, #0]
{
   224d0:	4605      	mov	r5, r0
   224d2:	460e      	mov	r6, r1
   224d4:	4614      	mov	r4, r2
	if (!data->rsp) {
   224d6:	b963      	cbnz	r3, 224f2 <find_info_cb+0x28>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   224d8:	6850      	ldr	r0, [r2, #4]
   224da:	2101      	movs	r1, #1
   224dc:	3008      	adds	r0, #8
   224de:	f001 fdab 	bl	24038 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   224e2:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   224e4:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   224e6:	781b      	ldrb	r3, [r3, #0]
   224e8:	2b00      	cmp	r3, #0
   224ea:	bf0c      	ite	eq
   224ec:	2301      	moveq	r3, #1
   224ee:	2302      	movne	r3, #2
   224f0:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   224f2:	68a3      	ldr	r3, [r4, #8]
   224f4:	781b      	ldrb	r3, [r3, #0]
   224f6:	2b01      	cmp	r3, #1
   224f8:	d003      	beq.n	22502 <find_info_cb+0x38>
   224fa:	2b02      	cmp	r3, #2
   224fc:	d019      	beq.n	22532 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   224fe:	2000      	movs	r0, #0
   22500:	e016      	b.n	22530 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   22502:	682b      	ldr	r3, [r5, #0]
   22504:	781b      	ldrb	r3, [r3, #0]
   22506:	2b00      	cmp	r3, #0
   22508:	d1f9      	bne.n	224fe <find_info_cb+0x34>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2250a:	6860      	ldr	r0, [r4, #4]
   2250c:	2104      	movs	r1, #4
   2250e:	3008      	adds	r0, #8
   22510:	f001 fd92 	bl	24038 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   22514:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   22516:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   22518:	885b      	ldrh	r3, [r3, #2]
   2251a:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2251c:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2251e:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   22520:	899b      	ldrh	r3, [r3, #12]
   22522:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   22526:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   22528:	2804      	cmp	r0, #4
   2252a:	bf94      	ite	ls
   2252c:	2000      	movls	r0, #0
   2252e:	2001      	movhi	r0, #1
}
   22530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   22532:	682b      	ldr	r3, [r5, #0]
   22534:	781b      	ldrb	r3, [r3, #0]
   22536:	2b02      	cmp	r3, #2
   22538:	d1e1      	bne.n	224fe <find_info_cb+0x34>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2253a:	6860      	ldr	r0, [r4, #4]
   2253c:	2112      	movs	r1, #18
   2253e:	3008      	adds	r0, #8
   22540:	f001 fd7a 	bl	24038 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   22544:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   22546:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   22548:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   2254a:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2254e:	3101      	adds	r1, #1
   22550:	f7ff f949 	bl	217e6 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   22554:	6863      	ldr	r3, [r4, #4]
   22556:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   2255a:	899b      	ldrh	r3, [r3, #12]
   2255c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2255e:	2812      	cmp	r0, #18
   22560:	e7e3      	b.n	2252a <find_info_cb+0x60>

00022562 <attr_read_group_cb>:
	if (!data->rsp->len) {
   22562:	68d0      	ldr	r0, [r2, #12]
   22564:	7803      	ldrb	r3, [r0, #0]
   22566:	3104      	adds	r1, #4
   22568:	b913      	cbnz	r3, 22570 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2256a:	7001      	strb	r1, [r0, #0]
	return true;
   2256c:	2001      	movs	r0, #1
}
   2256e:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   22570:	428b      	cmp	r3, r1
   22572:	d0fb      	beq.n	2256c <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   22574:	6891      	ldr	r1, [r2, #8]
   22576:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   22578:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2257a:	3b04      	subs	r3, #4
   2257c:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2257e:	6110      	str	r0, [r2, #16]
		return false;
   22580:	4770      	bx	lr

00022582 <att_exec_write_req>:
   22582:	2006      	movs	r0, #6
   22584:	4770      	bx	lr

00022586 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22586:	30c0      	adds	r0, #192	; 0xc0
   22588:	f3bf 8f5b 	dmb	ish
   2258c:	e850 3f00 	ldrex	r3, [r0]
   22590:	f023 0301 	bic.w	r3, r3, #1
   22594:	e840 3200 	strex	r2, r3, [r0]
   22598:	2a00      	cmp	r2, #0
   2259a:	d1f7      	bne.n	2258c <chan_rsp_sent+0x6>
   2259c:	f3bf 8f5b 	dmb	ish
}
   225a0:	4770      	bx	lr

000225a2 <chan_cfm_sent>:
   225a2:	30c0      	adds	r0, #192	; 0xc0
   225a4:	f3bf 8f5b 	dmb	ish
   225a8:	e850 3f00 	ldrex	r3, [r0]
   225ac:	f023 0302 	bic.w	r3, r3, #2
   225b0:	e840 3200 	strex	r2, r3, [r0]
   225b4:	2a00      	cmp	r2, #0
   225b6:	d1f7      	bne.n	225a8 <chan_cfm_sent+0x6>
   225b8:	f3bf 8f5b 	dmb	ish
}
   225bc:	4770      	bx	lr

000225be <write_cb>:
{
   225be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   225c0:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   225c2:	4601      	mov	r1, r0
{
   225c4:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   225c6:	222a      	movs	r2, #42	; 0x2a
   225c8:	6820      	ldr	r0, [r4, #0]
   225ca:	f000 fd0d 	bl	22fe8 <bt_gatt_check_perm>
   225ce:	4605      	mov	r5, r0
   225d0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   225d2:	bb00      	cbnz	r0, 22616 <write_cb+0x58>
	if (!data->req) {
   225d4:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   225d6:	68b7      	ldr	r7, [r6, #8]
   225d8:	68e2      	ldr	r2, [r4, #12]
   225da:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   225dc:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   225de:	bf14      	ite	ne
   225e0:	2300      	movne	r3, #0
   225e2:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   225e4:	9301      	str	r3, [sp, #4]
   225e6:	8a63      	ldrh	r3, [r4, #18]
   225e8:	9300      	str	r3, [sp, #0]
   225ea:	4631      	mov	r1, r6
   225ec:	8a23      	ldrh	r3, [r4, #16]
   225ee:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   225f0:	1e03      	subs	r3, r0, #0
   225f2:	db05      	blt.n	22600 <write_cb+0x42>
   225f4:	8a22      	ldrh	r2, [r4, #16]
   225f6:	4293      	cmp	r3, r2
   225f8:	d10b      	bne.n	22612 <write_cb+0x54>
	data->err = 0U;
   225fa:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   225fc:	2501      	movs	r5, #1
   225fe:	e005      	b.n	2260c <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   22600:	f113 0fff 	cmn.w	r3, #255	; 0xff
   22604:	d305      	bcc.n	22612 <write_cb+0x54>
		return -err;
   22606:	425b      	negs	r3, r3
   22608:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2260a:	7523      	strb	r3, [r4, #20]
}
   2260c:	4628      	mov	r0, r5
   2260e:	b003      	add	sp, #12
   22610:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   22612:	230e      	movs	r3, #14
   22614:	e7f9      	b.n	2260a <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   22616:	2500      	movs	r5, #0
   22618:	e7f8      	b.n	2260c <write_cb+0x4e>

0002261a <read_cb>:
{
   2261a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2261e:	f8d2 8000 	ldr.w	r8, [r2]
{
   22622:	4606      	mov	r6, r0
	data->err = 0x00;
   22624:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   22626:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   2262a:	7317      	strb	r7, [r2, #12]
{
   2262c:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2262e:	4631      	mov	r1, r6
   22630:	2215      	movs	r2, #21
   22632:	f000 fcd9 	bl	22fe8 <bt_gatt_check_perm>
   22636:	4604      	mov	r4, r0
   22638:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2263a:	b9a0      	cbnz	r0, 22666 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2263c:	e9cd 0000 	strd	r0, r0, [sp]
   22640:	88ab      	ldrh	r3, [r5, #4]
   22642:	68aa      	ldr	r2, [r5, #8]
   22644:	4631      	mov	r1, r6
   22646:	4640      	mov	r0, r8
   22648:	f7ff feb4 	bl	223b4 <att_chan_read>
	if (ret < 0) {
   2264c:	1e03      	subs	r3, r0, #0
   2264e:	da0c      	bge.n	2266a <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   22650:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   22654:	bf26      	itte	cs
   22656:	425b      	negcs	r3, r3
   22658:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2265a:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2265c:	732b      	strb	r3, [r5, #12]
}
   2265e:	4620      	mov	r0, r4
   22660:	b002      	add	sp, #8
   22662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   22666:	463c      	mov	r4, r7
   22668:	e7f9      	b.n	2265e <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   2266a:	2401      	movs	r4, #1
   2266c:	e7f7      	b.n	2265e <read_cb+0x44>

0002266e <chan_req_send>:
{
   2266e:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   22670:	690e      	ldr	r6, [r1, #16]
{
   22672:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   22674:	4630      	mov	r0, r6
{
   22676:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   22678:	f7ff fe2b 	bl	222d2 <net_buf_frags_len>
   2267c:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   22680:	4283      	cmp	r3, r0
   22682:	d317      	bcc.n	226b4 <chan_req_send+0x46>
	chan->req = req;
   22684:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	state->offset = net_buf_simple_headroom(buf);
   22688:	f106 0008 	add.w	r0, r6, #8
   2268c:	f001 fd1d 	bl	240ca <net_buf_simple_headroom>
	state->len = buf->len;
   22690:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   22692:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   22694:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   22696:	6920      	ldr	r0, [r4, #16]
   22698:	f001 fca8 	bl	23fec <net_buf_ref>
   2269c:	2200      	movs	r2, #0
   2269e:	4601      	mov	r1, r0
   226a0:	4628      	mov	r0, r5
   226a2:	f7e8 fe2b 	bl	b2fc <chan_send>
	if (err) {
   226a6:	4605      	mov	r5, r0
   226a8:	b110      	cbz	r0, 226b0 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   226aa:	6920      	ldr	r0, [r4, #16]
   226ac:	f7fa fd36 	bl	1d11c <net_buf_unref>
}
   226b0:	4628      	mov	r0, r5
   226b2:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   226b4:	f06f 0523 	mvn.w	r5, #35	; 0x23
   226b8:	e7fa      	b.n	226b0 <chan_req_send+0x42>

000226ba <bt_att_chan_req_send>:
{
   226ba:	b570      	push	{r4, r5, r6, lr}
   226bc:	4604      	mov	r4, r0
   226be:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   226c0:	f500 7688 	add.w	r6, r0, #272	; 0x110
	return z_impl_k_sem_take(sem, timeout);
   226c4:	2200      	movs	r2, #0
   226c6:	2300      	movs	r3, #0
   226c8:	4630      	mov	r0, r6
   226ca:	f7fc fb85 	bl	1edd8 <z_impl_k_sem_take>
   226ce:	2800      	cmp	r0, #0
   226d0:	db0a      	blt.n	226e8 <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   226d2:	4620      	mov	r0, r4
   226d4:	4629      	mov	r1, r5
   226d6:	f7ff ffca 	bl	2266e <chan_req_send>
	if (err < 0) {
   226da:	1e04      	subs	r4, r0, #0
   226dc:	da02      	bge.n	226e4 <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   226de:	4630      	mov	r0, r6
   226e0:	f7fc fb54 	bl	1ed8c <z_impl_k_sem_give>
}
   226e4:	4620      	mov	r0, r4
   226e6:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   226e8:	f06f 040a 	mvn.w	r4, #10
   226ec:	e7fa      	b.n	226e4 <bt_att_chan_req_send+0x2a>

000226ee <bt_att_status>:
{
   226ee:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   226f0:	f3bf 8f5b 	dmb	ish
   226f4:	680b      	ldr	r3, [r1, #0]
   226f6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   226fa:	07db      	lsls	r3, r3, #31
{
   226fc:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   226fe:	d518      	bpl.n	22732 <bt_att_status+0x44>
	if (chan->req) {
   22700:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   22704:	b9ab      	cbnz	r3, 22732 <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   22706:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2270a:	3004      	adds	r0, #4
   2270c:	f7ff fdbc 	bl	22288 <sys_slist_get>
	if (!node) {
   22710:	4604      	mov	r4, r0
   22712:	b170      	cbz	r0, 22732 <bt_att_status+0x44>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   22714:	4601      	mov	r1, r0
   22716:	f1a5 0008 	sub.w	r0, r5, #8
   2271a:	f7ff ffce 	bl	226ba <bt_att_chan_req_send>
   2271e:	2800      	cmp	r0, #0
   22720:	da07      	bge.n	22732 <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   22722:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   22726:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   22728:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2272a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2272c:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2272e:	b902      	cbnz	r2, 22732 <bt_att_status+0x44>
	list->tail = node;
   22730:	609c      	str	r4, [r3, #8]
}
   22732:	bd38      	pop	{r3, r4, r5, pc}

00022734 <bt_att_chan_send>:
{
   22734:	b570      	push	{r4, r5, r6, lr}
   22736:	4604      	mov	r4, r0
   22738:	460e      	mov	r6, r1
	if (!cb) {
   2273a:	4615      	mov	r5, r2
   2273c:	b132      	cbz	r2, 2274c <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   2273e:	462a      	mov	r2, r5
   22740:	4631      	mov	r1, r6
   22742:	4620      	mov	r0, r4
}
   22744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   22748:	f7e8 bdd8 	b.w	b2fc <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   2274c:	2200      	movs	r2, #0
   2274e:	2300      	movs	r3, #0
   22750:	f500 7088 	add.w	r0, r0, #272	; 0x110
   22754:	f7fc fb40 	bl	1edd8 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   22758:	2800      	cmp	r0, #0
   2275a:	daf0      	bge.n	2273e <bt_att_chan_send+0xa>
}
   2275c:	f06f 000a 	mvn.w	r0, #10
   22760:	bd70      	pop	{r4, r5, r6, pc}

00022762 <bt_att_chan_send_rsp>:
{
   22762:	b538      	push	{r3, r4, r5, lr}
   22764:	4604      	mov	r4, r0
   22766:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   22768:	f7ff ffe4 	bl	22734 <bt_att_chan_send>
	if (err) {
   2276c:	b130      	cbz	r0, 2277c <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2276e:	4629      	mov	r1, r5
   22770:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
   22774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   22778:	f001 bc2b 	b.w	23fd2 <net_buf_put>
}
   2277c:	bd38      	pop	{r3, r4, r5, pc}

0002277e <process_queue>:
{
   2277e:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   22780:	2200      	movs	r2, #0
{
   22782:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   22784:	2300      	movs	r3, #0
   22786:	4608      	mov	r0, r1
{
   22788:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2278a:	f001 fbfe 	bl	23f8a <net_buf_get>
	if (buf) {
   2278e:	4605      	mov	r5, r0
   22790:	b160      	cbz	r0, 227ac <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   22792:	4601      	mov	r1, r0
   22794:	2200      	movs	r2, #0
   22796:	4620      	mov	r0, r4
   22798:	f7e8 fdb0 	bl	b2fc <chan_send>
		if (err) {
   2279c:	4604      	mov	r4, r0
   2279e:	b118      	cbz	r0, 227a8 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   227a0:	4629      	mov	r1, r5
   227a2:	4630      	mov	r0, r6
   227a4:	f001 ff11 	bl	245ca <k_queue_prepend>
}
   227a8:	4620      	mov	r0, r4
   227aa:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   227ac:	f06f 0401 	mvn.w	r4, #1
   227b0:	e7fa      	b.n	227a8 <process_queue+0x2a>

000227b2 <bt_att_sent>:
{
   227b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   227b4:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
	struct bt_att *att = chan->att;
   227b8:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   227bc:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   227be:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   227c2:	b10b      	cbz	r3, 227c8 <bt_att_sent+0x16>
		chan->sent(chan);
   227c4:	4638      	mov	r0, r7
   227c6:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   227c8:	f3bf 8f5b 	dmb	ish
   227cc:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   227d0:	e853 2f00 	ldrex	r2, [r3]
   227d4:	f022 0210 	bic.w	r2, r2, #16
   227d8:	e843 2100 	strex	r1, r2, [r3]
   227dc:	2900      	cmp	r1, #0
   227de:	d1f7      	bne.n	227d0 <bt_att_sent+0x1e>
   227e0:	f3bf 8f5b 	dmb	ish
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   227e4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   227e8:	b98b      	cbnz	r3, 2280e <bt_att_sent+0x5c>
   227ea:	686b      	ldr	r3, [r5, #4]
   227ec:	b17b      	cbz	r3, 2280e <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   227ee:	1d28      	adds	r0, r5, #4
   227f0:	f7ff fd4a 	bl	22288 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   227f4:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   227f6:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   227f8:	4638      	mov	r0, r7
   227fa:	f7ff ff38 	bl	2266e <chan_req_send>
   227fe:	2800      	cmp	r0, #0
   22800:	da17      	bge.n	22832 <bt_att_sent+0x80>
Z_GENLIST_PREPEND(slist, snode)
   22802:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   22804:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   22806:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   22808:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   2280a:	b903      	cbnz	r3, 2280e <bt_att_sent+0x5c>
	list->tail = node;
   2280c:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   2280e:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   22812:	4638      	mov	r0, r7
   22814:	f7ff ffb3 	bl	2277e <process_queue>
	if (!err) {
   22818:	b158      	cbz	r0, 22832 <bt_att_sent+0x80>
	err = process_queue(chan, &att->tx_queue);
   2281a:	f105 010c 	add.w	r1, r5, #12
   2281e:	4638      	mov	r0, r7
   22820:	f7ff ffad 	bl	2277e <process_queue>
	if (!err) {
   22824:	b128      	cbz	r0, 22832 <bt_att_sent+0x80>
	z_impl_k_sem_give(sem);
   22826:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   2282a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2282e:	f7fc baad 	b.w	1ed8c <z_impl_k_sem_give>
   22832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022834 <att_read_blob_req>:
{
   22834:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   22836:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   22838:	8813      	ldrh	r3, [r2, #0]
   2283a:	8852      	ldrh	r2, [r2, #2]
   2283c:	9200      	str	r2, [sp, #0]
   2283e:	210c      	movs	r1, #12
   22840:	220d      	movs	r2, #13
   22842:	f7e9 f89f 	bl	b984 <att_read_rsp>
}
   22846:	b003      	add	sp, #12
   22848:	f85d fb04 	ldr.w	pc, [sp], #4

0002284c <att_read_req>:
{
   2284c:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2284e:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   22850:	2200      	movs	r2, #0
   22852:	881b      	ldrh	r3, [r3, #0]
   22854:	9200      	str	r2, [sp, #0]
   22856:	210a      	movs	r1, #10
   22858:	220b      	movs	r2, #11
   2285a:	f7e9 f893 	bl	b984 <att_read_rsp>
}
   2285e:	b003      	add	sp, #12
   22860:	f85d fb04 	ldr.w	pc, [sp], #4

00022864 <bt_att_init>:
	bt_gatt_init();
   22864:	f7e9 bfd8 	b.w	c818 <bt_gatt_init>

00022868 <bt_att_get_mtu>:
{
   22868:	b508      	push	{r3, lr}
	att = att_get(conn);
   2286a:	f7e8 fc5d 	bl	b128 <att_get>
	if (!att) {
   2286e:	b1d8      	cbz	r0, 228a8 <bt_att_get_mtu+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22870:	6a40      	ldr	r0, [r0, #36]	; 0x24
   22872:	b1c8      	cbz	r0, 228a8 <bt_att_get_mtu+0x40>
   22874:	f5b0 7196 	subs.w	r1, r0, #300	; 0x12c
   22878:	d015      	beq.n	228a6 <bt_att_get_mtu+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2287a:	6803      	ldr	r3, [r0, #0]
   2287c:	b10b      	cbz	r3, 22882 <bt_att_get_mtu+0x1a>
   2287e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   22882:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   22884:	f8b1 205e 	ldrh.w	r2, [r1, #94]	; 0x5e
   22888:	4290      	cmp	r0, r2
   2288a:	bf38      	it	cc
   2288c:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2288e:	b15b      	cbz	r3, 228a8 <bt_att_get_mtu+0x40>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22890:	f513 7296 	adds.w	r2, r3, #300	; 0x12c
   22894:	d004      	beq.n	228a0 <bt_att_get_mtu+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22896:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
   2289a:	b10a      	cbz	r2, 228a0 <bt_att_get_mtu+0x38>
   2289c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
{
   228a0:	4619      	mov	r1, r3
   228a2:	4613      	mov	r3, r2
   228a4:	e7ee      	b.n	22884 <bt_att_get_mtu+0x1c>
		return 0;
   228a6:	4608      	mov	r0, r1
}
   228a8:	bd08      	pop	{r3, pc}

000228aa <att_req_destroy>:
{
   228aa:	b510      	push	{r4, lr}
   228ac:	4604      	mov	r4, r0
	if (req->buf) {
   228ae:	6900      	ldr	r0, [r0, #16]
   228b0:	b108      	cbz	r0, 228b6 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   228b2:	f7fa fc33 	bl	1d11c <net_buf_unref>
	if (req->destroy) {
   228b6:	68a3      	ldr	r3, [r4, #8]
   228b8:	b10b      	cbz	r3, 228be <att_req_destroy+0x14>
		req->destroy(req);
   228ba:	4620      	mov	r0, r4
   228bc:	4798      	blx	r3
	bt_att_req_free(req);
   228be:	4620      	mov	r0, r4
}
   228c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   228c4:	f7e9 ba02 	b.w	bccc <bt_att_req_free>

000228c8 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   228c8:	898a      	ldrh	r2, [r1, #12]
   228ca:	6889      	ldr	r1, [r1, #8]
   228cc:	2300      	movs	r3, #0
   228ce:	f7e9 ba09 	b.w	bce4 <att_handle_rsp>

000228d2 <att_handle_find_type_rsp>:
   228d2:	f7ff bff9 	b.w	228c8 <att_handle_find_info_rsp>

000228d6 <att_handle_read_type_rsp>:
   228d6:	f7ff bff7 	b.w	228c8 <att_handle_find_info_rsp>

000228da <att_handle_read_rsp>:
   228da:	f7ff bff5 	b.w	228c8 <att_handle_find_info_rsp>

000228de <att_handle_read_blob_rsp>:
   228de:	f7ff bff3 	b.w	228c8 <att_handle_find_info_rsp>

000228e2 <att_handle_read_mult_rsp>:
   228e2:	f7ff bff1 	b.w	228c8 <att_handle_find_info_rsp>

000228e6 <att_handle_read_group_rsp>:
   228e6:	f7ff bfef 	b.w	228c8 <att_handle_find_info_rsp>

000228ea <att_handle_write_rsp>:
   228ea:	f7ff bfed 	b.w	228c8 <att_handle_find_info_rsp>

000228ee <att_handle_prepare_write_rsp>:
   228ee:	f7ff bfeb 	b.w	228c8 <att_handle_find_info_rsp>

000228f2 <att_handle_exec_write_rsp>:
   228f2:	f7ff bfe9 	b.w	228c8 <att_handle_find_info_rsp>

000228f6 <att_confirm>:
   228f6:	f7ff bfe7 	b.w	228c8 <att_handle_find_info_rsp>

000228fa <att_mtu_rsp>:
{
   228fa:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   228fc:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   228fe:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   22900:	2b16      	cmp	r3, #22
{
   22902:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   22904:	d805      	bhi.n	22912 <att_mtu_rsp+0x18>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   22906:	2200      	movs	r2, #0
   22908:	2304      	movs	r3, #4
   2290a:	4611      	mov	r1, r2
}
   2290c:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2290e:	f7e9 b9e9 	b.w	bce4 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   22912:	2b41      	cmp	r3, #65	; 0x41
   22914:	bf28      	it	cs
   22916:	2341      	movcs	r3, #65	; 0x41
   22918:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2291c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	return att_handle_rsp(chan, rsp, buf->len, 0);
   22920:	8992      	ldrh	r2, [r2, #12]
   22922:	2300      	movs	r3, #0
   22924:	e7f2      	b.n	2290c <att_mtu_rsp+0x12>

00022926 <att_chan_detach>:
{
   22926:	b538      	push	{r3, r4, r5, lr}
   22928:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   2292a:	6800      	ldr	r0, [r0, #0]
   2292c:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   22930:	3024      	adds	r0, #36	; 0x24
   22932:	f7ff fcb3 	bl	2229c <sys_slist_find_and_remove>
		k_sem_give(&chan->tx_sem);
   22936:	f504 7588 	add.w	r5, r4, #272	; 0x110
   2293a:	4628      	mov	r0, r5
   2293c:	f7fc fa26 	bl	1ed8c <z_impl_k_sem_give>
   22940:	4628      	mov	r0, r5
   22942:	f7fc fa23 	bl	1ed8c <z_impl_k_sem_give>
   22946:	4628      	mov	r0, r5
   22948:	f7fc fa20 	bl	1ed8c <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2294c:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   22950:	2200      	movs	r2, #0
   22952:	2300      	movs	r3, #0
   22954:	4628      	mov	r0, r5
   22956:	f001 fb18 	bl	23f8a <net_buf_get>
   2295a:	4602      	mov	r2, r0
   2295c:	b950      	cbnz	r0, 22974 <att_chan_detach+0x4e>
	if (chan->req) {
   2295e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   22962:	b123      	cbz	r3, 2296e <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   22964:	4601      	mov	r1, r0
   22966:	230e      	movs	r3, #14
   22968:	4620      	mov	r0, r4
   2296a:	f7e9 f9bb 	bl	bce4 <att_handle_rsp>
	chan->att = NULL;
   2296e:	2300      	movs	r3, #0
   22970:	6023      	str	r3, [r4, #0]
}
   22972:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   22974:	f7fa fbd2 	bl	1d11c <net_buf_unref>
   22978:	e7ea      	b.n	22950 <att_chan_detach+0x2a>

0002297a <bt_att_disconnected>:
{
   2297a:	b538      	push	{r3, r4, r5, lr}
   2297c:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   2297e:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   22982:	f7ff ffd0 	bl	22926 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   22986:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   22988:	b93b      	cbnz	r3, 2299a <bt_att_disconnected+0x20>
	att_reset(att);
   2298a:	4628      	mov	r0, r5
   2298c:	f7e9 fa98 	bl	bec0 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   22990:	6820      	ldr	r0, [r4, #0]
}
   22992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   22996:	f7ea bfdd 	b.w	d954 <bt_gatt_disconnected>
}
   2299a:	bd38      	pop	{r3, r4, r5, pc}

0002299c <bt_att_send>:
{
   2299c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   229a0:	4605      	mov	r5, r0
   229a2:	460e      	mov	r6, r1
   229a4:	4614      	mov	r4, r2
   229a6:	4698      	mov	r8, r3
	att = att_get(conn);
   229a8:	f7e8 fbbe 	bl	b128 <att_get>
	if (!att) {
   229ac:	4607      	mov	r7, r0
   229ae:	b938      	cbnz	r0, 229c0 <bt_att_send+0x24>
		net_buf_unref(buf);
   229b0:	4630      	mov	r0, r6
   229b2:	f7fa fbb3 	bl	1d11c <net_buf_unref>
		return -ENOTCONN;
   229b6:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   229ba:	b002      	add	sp, #8
   229bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   229c0:	b144      	cbz	r4, 229d4 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   229c2:	f8cd 8000 	str.w	r8, [sp]
   229c6:	4623      	mov	r3, r4
   229c8:	4632      	mov	r2, r6
   229ca:	2104      	movs	r1, #4
   229cc:	4628      	mov	r0, r5
   229ce:	f7ff fc0a 	bl	221e6 <bt_l2cap_send_cb>
   229d2:	e7f2      	b.n	229ba <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   229d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
   229d6:	b184      	cbz	r4, 229fa <bt_att_send+0x5e>
   229d8:	f5b4 7596 	subs.w	r5, r4, #300	; 0x12c
   229dc:	d00f      	beq.n	229fe <bt_att_send+0x62>
   229de:	6824      	ldr	r4, [r4, #0]
   229e0:	b10c      	cbz	r4, 229e6 <bt_att_send+0x4a>
   229e2:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   229e6:	2000      	movs	r0, #0
   229e8:	b95d      	cbnz	r5, 22a02 <bt_att_send+0x66>
	if (ret < 0) {
   229ea:	b188      	cbz	r0, 22a10 <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   229ec:	f107 000c 	add.w	r0, r7, #12
   229f0:	4631      	mov	r1, r6
   229f2:	f001 faee 	bl	23fd2 <net_buf_put>
	return 0;
   229f6:	4628      	mov	r0, r5
   229f8:	e7df      	b.n	229ba <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   229fa:	4625      	mov	r5, r4
   229fc:	e7f3      	b.n	229e6 <bt_att_send+0x4a>
   229fe:	462c      	mov	r4, r5
   22a00:	e7f1      	b.n	229e6 <bt_att_send+0x4a>
		ret = bt_att_chan_send(chan, buf, NULL);
   22a02:	2200      	movs	r2, #0
   22a04:	4631      	mov	r1, r6
   22a06:	4628      	mov	r0, r5
   22a08:	f7ff fe94 	bl	22734 <bt_att_chan_send>
		if (ret >= 0) {
   22a0c:	2800      	cmp	r0, #0
   22a0e:	db01      	blt.n	22a14 <bt_att_send+0x78>
	return 0;
   22a10:	2000      	movs	r0, #0
   22a12:	e7d2      	b.n	229ba <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22a14:	b154      	cbz	r4, 22a2c <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22a16:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
   22a1a:	d004      	beq.n	22a26 <bt_att_send+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22a1c:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   22a20:	b10b      	cbz	r3, 22a26 <bt_att_send+0x8a>
   22a22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   22a26:	4625      	mov	r5, r4
   22a28:	461c      	mov	r4, r3
   22a2a:	e7dd      	b.n	229e8 <bt_att_send+0x4c>
   22a2c:	4623      	mov	r3, r4
   22a2e:	e7fa      	b.n	22a26 <bt_att_send+0x8a>

00022a30 <bt_att_req_send>:
{
   22a30:	b570      	push	{r4, r5, r6, lr}
   22a32:	460c      	mov	r4, r1
	att = att_get(conn);
   22a34:	f7e8 fb78 	bl	b128 <att_get>
	if (!att) {
   22a38:	4605      	mov	r5, r0
   22a3a:	b930      	cbnz	r0, 22a4a <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   22a3c:	6920      	ldr	r0, [r4, #16]
   22a3e:	f7fa fb6d 	bl	1d11c <net_buf_unref>
		req->buf = NULL;
   22a42:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   22a44:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   22a48:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22a4a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   22a4c:	b153      	cbz	r3, 22a64 <bt_att_req_send+0x34>
   22a4e:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   22a52:	d007      	beq.n	22a64 <bt_att_req_send+0x34>
   22a54:	681e      	ldr	r6, [r3, #0]
   22a56:	b10e      	cbz	r6, 22a5c <bt_att_req_send+0x2c>
   22a58:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   22a5c:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   22a60:	b143      	cbz	r3, 22a74 <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22a62:	b96e      	cbnz	r6, 22a80 <bt_att_req_send+0x50>
	parent->next = child;
   22a64:	2000      	movs	r0, #0
   22a66:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   22a68:	68ab      	ldr	r3, [r5, #8]
   22a6a:	b9a3      	cbnz	r3, 22a96 <bt_att_req_send+0x66>
	list->head = node;
   22a6c:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
   22a70:	4618      	mov	r0, r3
}
   22a72:	e7e9      	b.n	22a48 <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   22a74:	4621      	mov	r1, r4
   22a76:	f7ff fe20 	bl	226ba <bt_att_chan_req_send>
			if (ret >= 0) {
   22a7a:	2800      	cmp	r0, #0
   22a7c:	dbf1      	blt.n	22a62 <bt_att_req_send+0x32>
   22a7e:	e7e3      	b.n	22a48 <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22a80:	f516 7396 	adds.w	r3, r6, #300	; 0x12c
   22a84:	d004      	beq.n	22a90 <bt_att_req_send+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22a86:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22a8a:	b10b      	cbz	r3, 22a90 <bt_att_req_send+0x60>
   22a8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   22a90:	4630      	mov	r0, r6
   22a92:	461e      	mov	r6, r3
   22a94:	e7e2      	b.n	22a5c <bt_att_req_send+0x2c>
	parent->next = child;
   22a96:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22a98:	60ac      	str	r4, [r5, #8]
}
   22a9a:	e7d5      	b.n	22a48 <bt_att_req_send+0x18>

00022a9c <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   22a9c:	6813      	ldr	r3, [r2, #0]
   22a9e:	b939      	cbnz	r1, 22ab0 <sys_slist_remove+0x14>
   22aa0:	6841      	ldr	r1, [r0, #4]
	list->head = node;
   22aa2:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   22aa4:	428a      	cmp	r2, r1
   22aa6:	d100      	bne.n	22aaa <sys_slist_remove+0xe>
	list->tail = node;
   22aa8:	6043      	str	r3, [r0, #4]
	parent->next = child;
   22aaa:	2300      	movs	r3, #0
   22aac:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   22aae:	4770      	bx	lr
	parent->next = child;
   22ab0:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   22ab2:	6843      	ldr	r3, [r0, #4]
   22ab4:	429a      	cmp	r2, r3
	list->tail = node;
   22ab6:	bf08      	it	eq
   22ab8:	6041      	streq	r1, [r0, #4]
}
   22aba:	e7f6      	b.n	22aaa <sys_slist_remove+0xe>

00022abc <found_attr>:
	*found = attr;
   22abc:	6010      	str	r0, [r2, #0]
}
   22abe:	2000      	movs	r0, #0
   22ac0:	4770      	bx	lr

00022ac2 <gatt_ccc_changed>:
{
   22ac2:	460b      	mov	r3, r1
   22ac4:	8909      	ldrh	r1, [r1, #8]
   22ac6:	8a5a      	ldrh	r2, [r3, #18]
   22ac8:	4291      	cmp	r1, r2
   22aca:	bf38      	it	cc
   22acc:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   22ace:	8a9a      	ldrh	r2, [r3, #20]
   22ad0:	428a      	cmp	r2, r1
   22ad2:	d003      	beq.n	22adc <gatt_ccc_changed+0x1a>
		ccc->value = value;
   22ad4:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   22ad6:	699b      	ldr	r3, [r3, #24]
   22ad8:	b103      	cbz	r3, 22adc <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   22ada:	4718      	bx	r3
}
   22adc:	4770      	bx	lr

00022ade <gatt_indicate_rsp>:
{
   22ade:	b510      	push	{r4, lr}
   22ae0:	9c02      	ldr	r4, [sp, #8]
	params->_ref--;
   22ae2:	7da3      	ldrb	r3, [r4, #22]
   22ae4:	3b01      	subs	r3, #1
{
   22ae6:	460a      	mov	r2, r1
	params->_ref--;
   22ae8:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   22aea:	4621      	mov	r1, r4
   22aec:	68a3      	ldr	r3, [r4, #8]
   22aee:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   22af0:	68e3      	ldr	r3, [r4, #12]
   22af2:	b12b      	cbz	r3, 22b00 <gatt_indicate_rsp+0x22>
   22af4:	7da2      	ldrb	r2, [r4, #22]
   22af6:	b91a      	cbnz	r2, 22b00 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   22af8:	4620      	mov	r0, r4
}
   22afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   22afe:	4718      	bx	r3
}
   22b00:	bd10      	pop	{r4, pc}

00022b02 <match_uuid>:
	data->attr = attr;
   22b02:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   22b04:	8091      	strh	r1, [r2, #4]
}
   22b06:	2000      	movs	r0, #0
   22b08:	4770      	bx	lr

00022b0a <gatt_write_rsp>:
{
   22b0a:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   22b0c:	6813      	ldr	r3, [r2, #0]
   22b0e:	4718      	bx	r3

00022b10 <gen_hash_m>:
{
   22b10:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   22b12:	6807      	ldr	r7, [r0, #0]
   22b14:	783d      	ldrb	r5, [r7, #0]
{
   22b16:	b089      	sub	sp, #36	; 0x24
   22b18:	4606      	mov	r6, r0
   22b1a:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   22b1c:	b10d      	cbz	r5, 22b22 <gen_hash_m+0x12>
	switch (u16->val) {
   22b1e:	2501      	movs	r5, #1
   22b20:	e014      	b.n	22b4c <gen_hash_m+0x3c>
   22b22:	887b      	ldrh	r3, [r7, #2]
   22b24:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   22b28:	d004      	beq.n	22b34 <gen_hash_m+0x24>
   22b2a:	d812      	bhi.n	22b52 <gen_hash_m+0x42>
   22b2c:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   22b30:	2b03      	cmp	r3, #3
   22b32:	d8f4      	bhi.n	22b1e <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   22b34:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22b38:	2202      	movs	r2, #2
   22b3a:	f10d 010e 	add.w	r1, sp, #14
   22b3e:	4620      	mov	r0, r4
   22b40:	f7fe fd61 	bl	21606 <tc_cmac_update>
   22b44:	b9e0      	cbnz	r0, 22b80 <gen_hash_m+0x70>
			state->err = -EINVAL;
   22b46:	f06f 0315 	mvn.w	r3, #21
   22b4a:	65a3      	str	r3, [r4, #88]	; 0x58
}
   22b4c:	4628      	mov	r0, r5
   22b4e:	b009      	add	sp, #36	; 0x24
   22b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   22b52:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   22b56:	33ff      	adds	r3, #255	; 0xff
   22b58:	b29b      	uxth	r3, r3
   22b5a:	2b04      	cmp	r3, #4
   22b5c:	d8df      	bhi.n	22b1e <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   22b5e:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22b62:	2202      	movs	r2, #2
   22b64:	f10d 010e 	add.w	r1, sp, #14
   22b68:	4620      	mov	r0, r4
   22b6a:	f7fe fd4c 	bl	21606 <tc_cmac_update>
   22b6e:	2800      	cmp	r0, #0
   22b70:	d0e9      	beq.n	22b46 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   22b72:	887b      	ldrh	r3, [r7, #2]
   22b74:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22b78:	2202      	movs	r2, #2
   22b7a:	f10d 010e 	add.w	r1, sp, #14
   22b7e:	e017      	b.n	22bb0 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   22b80:	887b      	ldrh	r3, [r7, #2]
   22b82:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22b86:	2202      	movs	r2, #2
   22b88:	f10d 010e 	add.w	r1, sp, #14
   22b8c:	4620      	mov	r0, r4
   22b8e:	f7fe fd3a 	bl	21606 <tc_cmac_update>
   22b92:	2800      	cmp	r0, #0
   22b94:	d0d7      	beq.n	22b46 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   22b96:	2000      	movs	r0, #0
   22b98:	2310      	movs	r3, #16
   22b9a:	eb0d 0203 	add.w	r2, sp, r3
   22b9e:	6877      	ldr	r7, [r6, #4]
   22ba0:	9000      	str	r0, [sp, #0]
   22ba2:	4631      	mov	r1, r6
   22ba4:	47b8      	blx	r7
		if (len < 0) {
   22ba6:	1e02      	subs	r2, r0, #0
   22ba8:	da01      	bge.n	22bae <gen_hash_m+0x9e>
			state->err = len;
   22baa:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22bac:	e7ce      	b.n	22b4c <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   22bae:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22bb0:	4620      	mov	r0, r4
   22bb2:	f7fe fd28 	bl	21606 <tc_cmac_update>
   22bb6:	2800      	cmp	r0, #0
   22bb8:	d1b1      	bne.n	22b1e <gen_hash_m+0xe>
   22bba:	e7c4      	b.n	22b46 <gen_hash_m+0x36>

00022bbc <bt_addr_le_cmp>:
   22bbc:	2207      	movs	r2, #7
   22bbe:	f7fe be02 	b.w	217c6 <memcmp>

00022bc2 <find_ccc_cfg>:
{
   22bc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22bc4:	1c4a      	adds	r2, r1, #1
   22bc6:	460c      	mov	r4, r1
		if (conn) {
   22bc8:	4605      	mov	r5, r0
   22bca:	b948      	cbnz	r0, 22be0 <find_ccc_cfg+0x1e>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   22bcc:	9000      	str	r0, [sp, #0]
   22bce:	4669      	mov	r1, sp
   22bd0:	f8cd 0003 	str.w	r0, [sp, #3]
   22bd4:	4610      	mov	r0, r2
   22bd6:	f7ff fff1 	bl	22bbc <bt_addr_le_cmp>
   22bda:	b930      	cbnz	r0, 22bea <find_ccc_cfg+0x28>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   22bdc:	4626      	mov	r6, r4
   22bde:	e00e      	b.n	22bfe <find_ccc_cfg+0x3c>
   22be0:	7809      	ldrb	r1, [r1, #0]
   22be2:	f7ff f9f8 	bl	21fd6 <bt_conn_is_peer_addr_le>
   22be6:	2800      	cmp	r0, #0
   22be8:	d1f8      	bne.n	22bdc <find_ccc_cfg+0x1a>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   22bea:	f104 060a 	add.w	r6, r4, #10
		if (conn) {
   22bee:	f104 020b 	add.w	r2, r4, #11
   22bf2:	b13d      	cbz	r5, 22c04 <find_ccc_cfg+0x42>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   22bf4:	7aa1      	ldrb	r1, [r4, #10]
   22bf6:	4628      	mov	r0, r5
   22bf8:	f7ff f9ed 	bl	21fd6 <bt_conn_is_peer_addr_le>
   22bfc:	b158      	cbz	r0, 22c16 <find_ccc_cfg+0x54>
}
   22bfe:	4630      	mov	r0, r6
   22c00:	b002      	add	sp, #8
   22c02:	bd70      	pop	{r4, r5, r6, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   22c04:	4669      	mov	r1, sp
   22c06:	4610      	mov	r0, r2
   22c08:	9500      	str	r5, [sp, #0]
   22c0a:	f8cd 5003 	str.w	r5, [sp, #3]
   22c0e:	f7ff ffd5 	bl	22bbc <bt_addr_le_cmp>
   22c12:	2800      	cmp	r0, #0
   22c14:	d0f3      	beq.n	22bfe <find_ccc_cfg+0x3c>
	return NULL;
   22c16:	2600      	movs	r6, #0
   22c18:	e7f1      	b.n	22bfe <find_ccc_cfg+0x3c>

00022c1a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   22c1a:	2207      	movs	r2, #7
   22c1c:	f7fe bde3 	b.w	217e6 <memcpy>

00022c20 <clear_ccc_cfg>:
{
   22c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   22c22:	2500      	movs	r5, #0
{
   22c24:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   22c26:	4669      	mov	r1, sp
   22c28:	3001      	adds	r0, #1
   22c2a:	9500      	str	r5, [sp, #0]
   22c2c:	f8cd 5003 	str.w	r5, [sp, #3]
   22c30:	f7ff fff3 	bl	22c1a <bt_addr_le_copy>
	cfg->id = 0U;
   22c34:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   22c36:	8125      	strh	r5, [r4, #8]
}
   22c38:	b003      	add	sp, #12
   22c3a:	bd30      	pop	{r4, r5, pc}

00022c3c <gatt_sub_remove.part.0>:
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   22c3c:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   22c3e:	2300      	movs	r3, #0
   22c40:	4669      	mov	r1, sp
   22c42:	3001      	adds	r0, #1
   22c44:	9300      	str	r3, [sp, #0]
   22c46:	f8cd 3003 	str.w	r3, [sp, #3]
   22c4a:	f7ff ffe6 	bl	22c1a <bt_addr_le_copy>
}
   22c4e:	b003      	add	sp, #12
   22c50:	f85d fb04 	ldr.w	pc, [sp], #4

00022c54 <gatt_sub_remove>:
{
   22c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c56:	460d      	mov	r5, r1
   22c58:	4606      	mov	r6, r0
   22c5a:	4611      	mov	r1, r2
	if (params) {
   22c5c:	461c      	mov	r4, r3
   22c5e:	b15b      	cbz	r3, 22c78 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   22c60:	f103 0214 	add.w	r2, r3, #20
   22c64:	f105 0008 	add.w	r0, r5, #8
   22c68:	f7ff ff18 	bl	22a9c <sys_slist_remove>
		params->notify(conn, params, NULL, 0);
   22c6c:	2300      	movs	r3, #0
   22c6e:	6827      	ldr	r7, [r4, #0]
   22c70:	461a      	mov	r2, r3
   22c72:	4621      	mov	r1, r4
   22c74:	4630      	mov	r0, r6
   22c76:	47b8      	blx	r7
	if (sys_slist_is_empty(&sub->list)) {
   22c78:	68ab      	ldr	r3, [r5, #8]
   22c7a:	b923      	cbnz	r3, 22c86 <gatt_sub_remove+0x32>
   22c7c:	4628      	mov	r0, r5
}
   22c7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22c82:	f7ff bfdb 	b.w	22c3c <gatt_sub_remove.part.0>
   22c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022c88 <clear_cf_cfg>:
{
   22c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22c8a:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   22c8c:	2500      	movs	r5, #0
   22c8e:	4669      	mov	r1, sp
   22c90:	3001      	adds	r0, #1
   22c92:	9500      	str	r5, [sp, #0]
   22c94:	f8cd 5003 	str.w	r5, [sp, #3]
   22c98:	f7ff ffbf 	bl	22c1a <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   22c9c:	f104 0008 	add.w	r0, r4, #8
   22ca0:	2201      	movs	r2, #1
   22ca2:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22ca4:	340c      	adds	r4, #12
   22ca6:	f7fe fdc9 	bl	2183c <memset>
   22caa:	f3bf 8f5b 	dmb	ish
   22cae:	e854 3f00 	ldrex	r3, [r4]
   22cb2:	e844 5200 	strex	r2, r5, [r4]
   22cb6:	2a00      	cmp	r2, #0
   22cb8:	d1f9      	bne.n	22cae <clear_cf_cfg+0x26>
   22cba:	f3bf 8f5b 	dmb	ish
}
   22cbe:	b003      	add	sp, #12
   22cc0:	bd30      	pop	{r4, r5, pc}

00022cc2 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   22cc2:	2301      	movs	r3, #1
   22cc4:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22cc6:	f3bf 8f5b 	dmb	ish
   22cca:	e850 2f00 	ldrex	r2, [r0]
   22cce:	431a      	orrs	r2, r3
   22cd0:	e840 2100 	strex	r1, r2, [r0]
   22cd4:	2900      	cmp	r1, #0
   22cd6:	d1f8      	bne.n	22cca <atomic_set_bit+0x8>
   22cd8:	f3bf 8f5b 	dmb	ish
}
   22cdc:	4770      	bx	lr

00022cde <sc_restore_rsp>:
{
   22cde:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   22ce0:	f7e9 f974 	bl	bfcc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   22ce4:	b140      	cbz	r0, 22cf8 <sc_restore_rsp+0x1a>
   22ce6:	7a03      	ldrb	r3, [r0, #8]
   22ce8:	07db      	lsls	r3, r3, #31
   22cea:	d505      	bpl.n	22cf8 <sc_restore_rsp+0x1a>
}
   22cec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   22cf0:	2100      	movs	r1, #0
   22cf2:	300c      	adds	r0, #12
   22cf4:	f7ff bfe5 	b.w	22cc2 <atomic_set_bit>
}
   22cf8:	bd08      	pop	{r3, pc}

00022cfa <read_appearance>:
{
   22cfa:	b513      	push	{r0, r1, r4, lr}
   22cfc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   22d00:	4610      	mov	r0, r2
	if (offset > value_len) {
   22d02:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   22d04:	f04f 0200 	mov.w	r2, #0
   22d08:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   22d0c:	d80d      	bhi.n	22d2a <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   22d0e:	f1c1 0402 	rsb	r4, r1, #2
   22d12:	429c      	cmp	r4, r3
   22d14:	bfa8      	it	ge
   22d16:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   22d18:	f10d 0306 	add.w	r3, sp, #6
   22d1c:	4622      	mov	r2, r4
   22d1e:	4419      	add	r1, r3
   22d20:	f7fe fd61 	bl	217e6 <memcpy>
}
   22d24:	4620      	mov	r0, r4
   22d26:	b002      	add	sp, #8
   22d28:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22d2a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   22d2e:	e7f9      	b.n	22d24 <read_appearance+0x2a>

00022d30 <read_name>:
{
   22d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22d34:	4698      	mov	r8, r3
   22d36:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   22d3a:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   22d3c:	f7e6 fac8 	bl	92d0 <bt_get_name>
   22d40:	4607      	mov	r7, r0
				 strlen(name));
   22d42:	f7fe fd2d 	bl	217a0 <strlen>
	if (offset > value_len) {
   22d46:	b283      	uxth	r3, r0
   22d48:	42b3      	cmp	r3, r6
   22d4a:	d30c      	bcc.n	22d66 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   22d4c:	1b9c      	subs	r4, r3, r6
   22d4e:	4544      	cmp	r4, r8
   22d50:	bfa8      	it	ge
   22d52:	4644      	movge	r4, r8
   22d54:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   22d56:	4622      	mov	r2, r4
   22d58:	19b9      	adds	r1, r7, r6
   22d5a:	4628      	mov	r0, r5
   22d5c:	f7fe fd43 	bl	217e6 <memcpy>
}
   22d60:	4620      	mov	r0, r4
   22d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22d66:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   22d6a:	e7f9      	b.n	22d60 <read_name+0x30>

00022d6c <gatt_write_ccc_rsp>:
{
   22d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22d70:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22d72:	f3bf 8f5b 	dmb	ish
   22d76:	4606      	mov	r6, r0
   22d78:	460d      	mov	r5, r1
   22d7a:	f104 0310 	add.w	r3, r4, #16
   22d7e:	e853 2f00 	ldrex	r2, [r3]
   22d82:	f022 0204 	bic.w	r2, r2, #4
   22d86:	e843 2100 	strex	r1, r2, [r3]
   22d8a:	2900      	cmp	r1, #0
   22d8c:	d1f7      	bne.n	22d7e <gatt_write_ccc_rsp+0x12>
   22d8e:	f3bf 8f5b 	dmb	ish
	if (err) {
   22d92:	b1dd      	cbz	r5, 22dcc <gatt_write_ccc_rsp+0x60>
		sub = gatt_sub_find(conn);
   22d94:	f7e9 f968 	bl	c068 <gatt_sub_find>
		if (!sub) {
   22d98:	4601      	mov	r1, r0
   22d9a:	b300      	cbz	r0, 22dde <gatt_write_ccc_rsp+0x72>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   22d9c:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   22d9e:	b143      	cbz	r3, 22db2 <gatt_write_ccc_rsp+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22da0:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   22da2:	f104 0014 	add.w	r0, r4, #20
   22da6:	4283      	cmp	r3, r0
   22da8:	d10b      	bne.n	22dc2 <gatt_write_ccc_rsp+0x56>
				gatt_sub_remove(conn, sub, tmp, params);
   22daa:	4623      	mov	r3, r4
   22dac:	4630      	mov	r0, r6
   22dae:	f7ff ff51 	bl	22c54 <gatt_sub_remove>
	if (params->write) {
   22db2:	6863      	ldr	r3, [r4, #4]
   22db4:	b19b      	cbz	r3, 22dde <gatt_write_ccc_rsp+0x72>
		params->write(conn, err, NULL);
   22db6:	4629      	mov	r1, r5
   22db8:	4630      	mov	r0, r6
   22dba:	2200      	movs	r2, #0
}
   22dbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   22dc0:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   22dc2:	2a00      	cmp	r2, #0
   22dc4:	d0f5      	beq.n	22db2 <gatt_write_ccc_rsp+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22dc6:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   22dc8:	6812      	ldr	r2, [r2, #0]
   22dca:	e7ec      	b.n	22da6 <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   22dcc:	89a3      	ldrh	r3, [r4, #12]
   22dce:	2b00      	cmp	r3, #0
   22dd0:	d1ef      	bne.n	22db2 <gatt_write_ccc_rsp+0x46>
		params->notify(conn, params, NULL, 0);
   22dd2:	6827      	ldr	r7, [r4, #0]
   22dd4:	462b      	mov	r3, r5
   22dd6:	462a      	mov	r2, r5
   22dd8:	4621      	mov	r1, r4
   22dda:	47b8      	blx	r7
   22ddc:	e7e9      	b.n	22db2 <gatt_write_ccc_rsp+0x46>
}
   22dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022de2 <cf_read>:
{
   22de2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22de4:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   22de6:	2300      	movs	r3, #0
{
   22de8:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   22dec:	f88d 3004 	strb.w	r3, [sp, #4]
{
   22df0:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   22df2:	f7e9 f8eb 	bl	bfcc <find_cf_cfg>
	if (cfg) {
   22df6:	b128      	cbz	r0, 22e04 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   22df8:	f100 0108 	add.w	r1, r0, #8
   22dfc:	2201      	movs	r2, #1
   22dfe:	a801      	add	r0, sp, #4
   22e00:	f7fe fcf1 	bl	217e6 <memcpy>
	if (offset > value_len) {
   22e04:	2e01      	cmp	r6, #1
   22e06:	d80d      	bhi.n	22e24 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   22e08:	f1c6 0401 	rsb	r4, r6, #1
   22e0c:	42bc      	cmp	r4, r7
   22e0e:	bfa8      	it	ge
   22e10:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   22e12:	ab01      	add	r3, sp, #4
   22e14:	4622      	mov	r2, r4
   22e16:	1999      	adds	r1, r3, r6
   22e18:	4628      	mov	r0, r5
   22e1a:	f7fe fce4 	bl	217e6 <memcpy>
}
   22e1e:	4620      	mov	r0, r4
   22e20:	b003      	add	sp, #12
   22e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22e24:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   22e28:	e7f9      	b.n	22e1e <cf_read+0x3c>

00022e2a <bt_gatt_attr_read_ccc>:
{
   22e2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   22e2c:	68c9      	ldr	r1, [r1, #12]
{
   22e2e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   22e32:	4615      	mov	r5, r2
   22e34:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   22e36:	f7ff fec4 	bl	22bc2 <find_ccc_cfg>
	if (cfg) {
   22e3a:	b100      	cbz	r0, 22e3e <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   22e3c:	8900      	ldrh	r0, [r0, #8]
   22e3e:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   22e42:	2e02      	cmp	r6, #2
   22e44:	d80e      	bhi.n	22e64 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   22e46:	f1c6 0402 	rsb	r4, r6, #2
   22e4a:	42bc      	cmp	r4, r7
   22e4c:	bfa8      	it	ge
   22e4e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   22e50:	f10d 0306 	add.w	r3, sp, #6
   22e54:	4622      	mov	r2, r4
   22e56:	1999      	adds	r1, r3, r6
   22e58:	4628      	mov	r0, r5
   22e5a:	f7fe fcc4 	bl	217e6 <memcpy>
}
   22e5e:	4620      	mov	r0, r4
   22e60:	b003      	add	sp, #12
   22e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22e64:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   22e68:	e7f9      	b.n	22e5e <bt_gatt_attr_read_ccc+0x34>

00022e6a <bt_gatt_attr_read_service>:
{
   22e6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   22e6c:	68c9      	ldr	r1, [r1, #12]
{
   22e6e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   22e72:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   22e74:	780b      	ldrb	r3, [r1, #0]
{
   22e76:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   22e78:	b993      	cbnz	r3, 22ea0 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   22e7a:	884b      	ldrh	r3, [r1, #2]
   22e7c:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   22e80:	2d02      	cmp	r5, #2
   22e82:	d819      	bhi.n	22eb8 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   22e84:	f1c5 0202 	rsb	r2, r5, #2
   22e88:	4294      	cmp	r4, r2
   22e8a:	bfa8      	it	ge
   22e8c:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   22e8e:	f10d 0306 	add.w	r3, sp, #6
   22e92:	4622      	mov	r2, r4
   22e94:	1959      	adds	r1, r3, r5
   22e96:	f7fe fca6 	bl	217e6 <memcpy>
}
   22e9a:	4620      	mov	r0, r4
   22e9c:	b003      	add	sp, #12
   22e9e:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   22ea0:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   22ea2:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   22ea6:	d807      	bhi.n	22eb8 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   22ea8:	f1c5 0210 	rsb	r2, r5, #16
   22eac:	4294      	cmp	r4, r2
   22eae:	bfa8      	it	ge
   22eb0:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   22eb2:	4622      	mov	r2, r4
   22eb4:	4429      	add	r1, r5
   22eb6:	e7ee      	b.n	22e96 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22eb8:	f06f 0406 	mvn.w	r4, #6
   22ebc:	e7ed      	b.n	22e9a <bt_gatt_attr_read_service+0x30>

00022ebe <sc_clear>:
{
   22ebe:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   22ec0:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   22ec4:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   22ec6:	4631      	mov	r1, r6
   22ec8:	7a00      	ldrb	r0, [r0, #8]
   22eca:	f7fe ff3e 	bl	21d4a <bt_addr_le_is_bonded>
   22ece:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   22ed0:	4631      	mov	r1, r6
   22ed2:	f7e9 f8a9 	bl	c028 <find_sc_cfg>
	if (!cfg) {
   22ed6:	b128      	cbz	r0, 22ee4 <sc_clear+0x26>
}
   22ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   22edc:	220c      	movs	r2, #12
   22ede:	2100      	movs	r1, #0
   22ee0:	f7fe bcac 	b.w	2183c <memset>
}
   22ee4:	bd70      	pop	{r4, r5, r6, pc}

00022ee6 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   22ee6:	2a02      	cmp	r2, #2
{
   22ee8:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   22eea:	d108      	bne.n	22efe <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   22eec:	2300      	movs	r3, #0
   22eee:	f100 0188 	add.w	r1, r0, #136	; 0x88
   22ef2:	461a      	mov	r2, r3
   22ef4:	7a00      	ldrb	r0, [r0, #8]
   22ef6:	f7e9 f947 	bl	c188 <sc_save>
}
   22efa:	2002      	movs	r0, #2
   22efc:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   22efe:	f7ff ffde 	bl	22ebe <sc_clear>
   22f02:	e7fa      	b.n	22efa <sc_ccc_cfg_write+0x14>

00022f04 <bt_gatt_attr_read>:
{
   22f04:	b538      	push	{r3, r4, r5, lr}
   22f06:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   22f0a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   22f0e:	42a9      	cmp	r1, r5
{
   22f10:	4610      	mov	r0, r2
	if (offset > value_len) {
   22f12:	d80b      	bhi.n	22f2c <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   22f14:	1a6d      	subs	r5, r5, r1
   22f16:	429d      	cmp	r5, r3
   22f18:	bfa8      	it	ge
   22f1a:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   22f1c:	9b05      	ldr	r3, [sp, #20]
   22f1e:	b2ad      	uxth	r5, r5
   22f20:	462a      	mov	r2, r5
   22f22:	4419      	add	r1, r3
   22f24:	f7fe fc5f 	bl	217e6 <memcpy>
}
   22f28:	4628      	mov	r0, r5
   22f2a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22f2c:	f06f 0506 	mvn.w	r5, #6
   22f30:	e7fa      	b.n	22f28 <bt_gatt_attr_read+0x24>

00022f32 <bt_gatt_attr_value_handle>:
{
   22f32:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   22f34:	4604      	mov	r4, r0
   22f36:	b910      	cbnz	r0, 22f3e <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   22f38:	2000      	movs	r0, #0
}
   22f3a:	b002      	add	sp, #8
   22f3c:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   22f3e:	2300      	movs	r3, #0
   22f40:	f88d 3004 	strb.w	r3, [sp, #4]
   22f44:	6800      	ldr	r0, [r0, #0]
   22f46:	f642 0303 	movw	r3, #10243	; 0x2803
   22f4a:	a901      	add	r1, sp, #4
   22f4c:	f8ad 3006 	strh.w	r3, [sp, #6]
   22f50:	f7fe fd18 	bl	21984 <bt_uuid_cmp>
   22f54:	2800      	cmp	r0, #0
   22f56:	d1ef      	bne.n	22f38 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   22f58:	68e3      	ldr	r3, [r4, #12]
   22f5a:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   22f5c:	2800      	cmp	r0, #0
   22f5e:	d1ec      	bne.n	22f3a <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   22f60:	4620      	mov	r0, r4
   22f62:	f7e9 fc9f 	bl	c8a4 <bt_gatt_attr_get_handle>
   22f66:	3001      	adds	r0, #1
   22f68:	b280      	uxth	r0, r0
	return handle;
   22f6a:	e7e6      	b.n	22f3a <bt_gatt_attr_value_handle+0x8>

00022f6c <bt_gatt_attr_read_chrc>:
{
   22f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   22f6e:	68cf      	ldr	r7, [r1, #12]
{
   22f70:	b087      	sub	sp, #28
   22f72:	4608      	mov	r0, r1
   22f74:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   22f76:	79bb      	ldrb	r3, [r7, #6]
   22f78:	f88d 3004 	strb.w	r3, [sp, #4]
{
   22f7c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   22f80:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   22f82:	f7ff ffd6 	bl	22f32 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   22f86:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   22f88:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   22f8c:	780b      	ldrb	r3, [r1, #0]
   22f8e:	b99b      	cbnz	r3, 22fb8 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   22f90:	884b      	ldrh	r3, [r1, #2]
   22f92:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   22f96:	2105      	movs	r1, #5
	if (offset > value_len) {
   22f98:	42b1      	cmp	r1, r6
   22f9a:	d315      	bcc.n	22fc8 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   22f9c:	1b89      	subs	r1, r1, r6
   22f9e:	42a1      	cmp	r1, r4
   22fa0:	bfa8      	it	ge
   22fa2:	4621      	movge	r1, r4
   22fa4:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   22fa6:	ab01      	add	r3, sp, #4
   22fa8:	4622      	mov	r2, r4
   22faa:	1999      	adds	r1, r3, r6
   22fac:	4628      	mov	r0, r5
   22fae:	f7fe fc1a 	bl	217e6 <memcpy>
}
   22fb2:	4620      	mov	r0, r4
   22fb4:	b007      	add	sp, #28
   22fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   22fb8:	3101      	adds	r1, #1
   22fba:	2210      	movs	r2, #16
   22fbc:	f10d 0007 	add.w	r0, sp, #7
   22fc0:	f7fe fc11 	bl	217e6 <memcpy>
		value_len += 16U;
   22fc4:	2113      	movs	r1, #19
   22fc6:	e7e7      	b.n	22f98 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22fc8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   22fcc:	e7f1      	b.n	22fb2 <bt_gatt_attr_read_chrc+0x46>

00022fce <bt_gatt_foreach_attr>:
{
   22fce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   22fd0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   22fd4:	2300      	movs	r3, #0
   22fd6:	9300      	str	r3, [sp, #0]
   22fd8:	461a      	mov	r2, r3
   22fda:	f7e9 fc93 	bl	c904 <bt_gatt_foreach_attr_type>
}
   22fde:	b005      	add	sp, #20
   22fe0:	f85d fb04 	ldr.w	pc, [sp], #4

00022fe4 <db_hash_process>:
	db_hash_gen(true);
   22fe4:	f7e9 bd3a 	b.w	ca5c <db_hash_gen.isra.0>

00022fe8 <bt_gatt_check_perm>:
{
   22fe8:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   22fea:	07d4      	lsls	r4, r2, #31
{
   22fec:	4605      	mov	r5, r0
   22fee:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   22ff0:	d504      	bpl.n	22ffc <bt_gatt_check_perm+0x14>
   22ff2:	f010 0f15 	tst.w	r0, #21
   22ff6:	d01e      	beq.n	23036 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   22ff8:	684b      	ldr	r3, [r1, #4]
   22ffa:	b1e3      	cbz	r3, 23036 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   22ffc:	0793      	lsls	r3, r2, #30
   22ffe:	d504      	bpl.n	2300a <bt_gatt_check_perm+0x22>
   23000:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   23004:	d019      	beq.n	2303a <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   23006:	688b      	ldr	r3, [r1, #8]
   23008:	b1bb      	cbz	r3, 2303a <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   2300a:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2300e:	f014 0f30 	tst.w	r4, #48	; 0x30
   23012:	d103      	bne.n	2301c <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   23014:	f014 000c 	ands.w	r0, r4, #12
   23018:	d107      	bne.n	2302a <bt_gatt_check_perm+0x42>
}
   2301a:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2301c:	4628      	mov	r0, r5
   2301e:	f7fe ffcf 	bl	21fc0 <bt_conn_get_security>
   23022:	2802      	cmp	r0, #2
   23024:	d8f6      	bhi.n	23014 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   23026:	2005      	movs	r0, #5
   23028:	e7f7      	b.n	2301a <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   2302a:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2302c:	2b00      	cmp	r3, #0
   2302e:	bf14      	ite	ne
   23030:	2000      	movne	r0, #0
   23032:	200f      	moveq	r0, #15
   23034:	e7f1      	b.n	2301a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   23036:	2002      	movs	r0, #2
   23038:	e7ef      	b.n	2301a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2303a:	2003      	movs	r0, #3
   2303c:	e7ed      	b.n	2301a <bt_gatt_check_perm+0x32>

0002303e <gatt_discover_next>:
{
   2303e:	b570      	push	{r4, r5, r6, lr}
   23040:	4605      	mov	r5, r0
   23042:	4614      	mov	r4, r2
	if (!last_handle)
   23044:	b929      	cbnz	r1, 23052 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   23046:	4621      	mov	r1, r4
   23048:	4628      	mov	r0, r5
   2304a:	f7e9 ff75 	bl	cf38 <bt_gatt_discover>
   2304e:	b928      	cbnz	r0, 2305c <gatt_discover_next+0x1e>
}
   23050:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   23052:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23056:	4291      	cmp	r1, r2
   23058:	d107      	bne.n	2306a <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   2305a:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   2305c:	6863      	ldr	r3, [r4, #4]
   2305e:	4622      	mov	r2, r4
   23060:	4628      	mov	r0, r5
   23062:	2100      	movs	r1, #0
}
   23064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   23068:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   2306a:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   2306c:	1c4b      	adds	r3, r1, #1
   2306e:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   23070:	429a      	cmp	r2, r3
		params->start_handle++;
   23072:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   23074:	d2e7      	bcs.n	23046 <gatt_discover_next+0x8>
   23076:	e7f1      	b.n	2305c <gatt_discover_next+0x1e>

00023078 <gatt_find_type_rsp>:
{
   23078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2307c:	b088      	sub	sp, #32
   2307e:	4607      	mov	r7, r0
   23080:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   23084:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   23086:	b911      	cbnz	r1, 2308e <gatt_find_type_rsp+0x16>
   23088:	f013 0803 	ands.w	r8, r3, #3
   2308c:	d008      	beq.n	230a0 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   2308e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   23092:	464a      	mov	r2, r9
   23094:	2100      	movs	r1, #0
   23096:	4638      	mov	r0, r7
   23098:	4798      	blx	r3
}
   2309a:	b008      	add	sp, #32
   2309c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0U; i < count; i++) {
   230a0:	f3c3 0387 	ubfx	r3, r3, #2, #8
   230a4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   230a8:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   230aa:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   230ae:	42ac      	cmp	r4, r5
   230b0:	d105      	bne.n	230be <gatt_find_type_rsp+0x46>
	gatt_discover_next(conn, end_handle, params);
   230b2:	464a      	mov	r2, r9
   230b4:	4641      	mov	r1, r8
   230b6:	4638      	mov	r0, r7
   230b8:	f7ff ffc1 	bl	2303e <gatt_discover_next>
	return;
   230bc:	e7ed      	b.n	2309a <gatt_find_type_rsp+0x22>
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   230be:	8863      	ldrh	r3, [r4, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   230c0:	f899 1010 	ldrb.w	r1, [r9, #16]
		value.end_handle = end_handle;
   230c4:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   230c8:	2900      	cmp	r1, #0
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   230ca:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   230ce:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   230d2:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   230d4:	9301      	str	r3, [sp, #4]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   230d6:	bf0c      	ite	eq
   230d8:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   230dc:	4651      	movne	r1, sl
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   230de:	ab01      	add	r3, sp, #4
   230e0:	f8ad 1002 	strh.w	r1, [sp, #2]
   230e4:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   230e6:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   230ea:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   230ee:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   230f2:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   230f6:	f8cd d00c 	str.w	sp, [sp, #12]
   230fa:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   230fe:	464a      	mov	r2, r9
   23100:	a903      	add	r1, sp, #12
   23102:	4638      	mov	r0, r7
   23104:	4798      	blx	r3
   23106:	3404      	adds	r4, #4
   23108:	2800      	cmp	r0, #0
   2310a:	d1d0      	bne.n	230ae <gatt_find_type_rsp+0x36>
   2310c:	e7c5      	b.n	2309a <gatt_find_type_rsp+0x22>

0002310e <bt_gatt_unsubscribe>:
{
   2310e:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   23112:	7b43      	ldrb	r3, [r0, #13]
   23114:	2b07      	cmp	r3, #7
{
   23116:	4680      	mov	r8, r0
   23118:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2311a:	d15f      	bne.n	231dc <bt_gatt_unsubscribe+0xce>
	sub = gatt_sub_find(conn);
   2311c:	f7e8 ffa4 	bl	c068 <gatt_sub_find>
	if (!sub) {
   23120:	b920      	cbnz	r0, 2312c <bt_gatt_unsubscribe+0x1e>
		return -EINVAL;
   23122:	f06f 0015 	mvn.w	r0, #21
}
   23126:	b001      	add	sp, #4
   23128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   2312c:	6884      	ldr	r4, [r0, #8]
   2312e:	b1d4      	cbz	r4, 23166 <bt_gatt_unsubscribe+0x58>
   23130:	f1b4 0514 	subs.w	r5, r4, #20
   23134:	d019      	beq.n	2316a <bt_gatt_unsubscribe+0x5c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23136:	6824      	ldr	r4, [r4, #0]
   23138:	b104      	cbz	r4, 2313c <bt_gatt_unsubscribe+0x2e>
   2313a:	3c14      	subs	r4, #20
   2313c:	f04f 0a00 	mov.w	sl, #0
   23140:	46d3      	mov	fp, sl
   23142:	46d1      	mov	r9, sl
			sys_slist_remove(&sub->list, prev, &tmp->node);
   23144:	f100 0708 	add.w	r7, r0, #8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   23148:	b98d      	cbnz	r5, 2316e <bt_gatt_unsubscribe+0x60>
	if (!found) {
   2314a:	f1bb 0f00 	cmp.w	fp, #0
   2314e:	d0e8      	beq.n	23122 <bt_gatt_unsubscribe+0x14>
	if (has_subscription) {
   23150:	f1b9 0f00 	cmp.w	r9, #0
   23154:	d037      	beq.n	231c6 <bt_gatt_unsubscribe+0xb8>
		params->notify(conn, params, NULL, 0);
   23156:	6834      	ldr	r4, [r6, #0]
   23158:	462b      	mov	r3, r5
   2315a:	462a      	mov	r2, r5
   2315c:	4631      	mov	r1, r6
   2315e:	4640      	mov	r0, r8
   23160:	47a0      	blx	r4
		return 0;
   23162:	4628      	mov	r0, r5
   23164:	e7df      	b.n	23126 <bt_gatt_unsubscribe+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   23166:	4625      	mov	r5, r4
   23168:	e7e8      	b.n	2313c <bt_gatt_unsubscribe+0x2e>
   2316a:	462c      	mov	r4, r5
   2316c:	e7e6      	b.n	2313c <bt_gatt_unsubscribe+0x2e>
		if (params == tmp) {
   2316e:	42b5      	cmp	r5, r6
   23170:	f105 0214 	add.w	r2, r5, #20
   23174:	d11a      	bne.n	231ac <bt_gatt_unsubscribe+0x9e>
			sys_slist_remove(&sub->list, prev, &tmp->node);
   23176:	4651      	mov	r1, sl
   23178:	4638      	mov	r0, r7
   2317a:	f7ff fc8f 	bl	22a9c <sys_slist_remove>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2317e:	f3bf 8f5b 	dmb	ish
   23182:	6933      	ldr	r3, [r6, #16]
   23184:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   23188:	f3c3 0b80 	ubfx	fp, r3, #2, #1
			if (atomic_test_bit(params->flags,
   2318c:	075b      	lsls	r3, r3, #29
   2318e:	d515      	bpl.n	231bc <bt_gatt_unsubscribe+0xae>
	bt_att_req_cancel(conn, params);
   23190:	4631      	mov	r1, r6
   23192:	4640      	mov	r0, r8
   23194:	f7e8 feea 	bl	bf6c <bt_att_req_cancel>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   23198:	b19c      	cbz	r4, 231c2 <bt_gatt_unsubscribe+0xb4>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2319a:	f114 0314 	adds.w	r3, r4, #20
   2319e:	d002      	beq.n	231a6 <bt_gatt_unsubscribe+0x98>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   231a0:	6963      	ldr	r3, [r4, #20]
   231a2:	b103      	cbz	r3, 231a6 <bt_gatt_unsubscribe+0x98>
   231a4:	3b14      	subs	r3, #20
   231a6:	4625      	mov	r5, r4
   231a8:	461c      	mov	r4, r3
   231aa:	e7cd      	b.n	23148 <bt_gatt_unsubscribe+0x3a>
		if (tmp->value_handle == params->value_handle) {
   231ac:	8929      	ldrh	r1, [r5, #8]
   231ae:	8933      	ldrh	r3, [r6, #8]
			prev = &tmp->node;
   231b0:	4692      	mov	sl, r2
   231b2:	4299      	cmp	r1, r3
   231b4:	bf08      	it	eq
   231b6:	f04f 0901 	moveq.w	r9, #1
   231ba:	e7ed      	b.n	23198 <bt_gatt_unsubscribe+0x8a>
			found = true;
   231bc:	f04f 0b01 	mov.w	fp, #1
   231c0:	e7ea      	b.n	23198 <bt_gatt_unsubscribe+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   231c2:	4623      	mov	r3, r4
   231c4:	e7ef      	b.n	231a6 <bt_gatt_unsubscribe+0x98>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   231c6:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   231c8:	f8a6 900c 	strh.w	r9, [r6, #12]
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   231cc:	4633      	mov	r3, r6
   231ce:	464a      	mov	r2, r9
   231d0:	4640      	mov	r0, r8
}
   231d2:	b001      	add	sp, #4
   231d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   231d8:	f7e9 b956 	b.w	c488 <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   231dc:	f06f 0038 	mvn.w	r0, #56	; 0x38
   231e0:	e7a1      	b.n	23126 <bt_gatt_unsubscribe+0x18>

000231e2 <bt_gatt_notification>:
{
   231e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   231e6:	4607      	mov	r7, r0
   231e8:	4688      	mov	r8, r1
   231ea:	4691      	mov	r9, r2
   231ec:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   231ee:	f7e8 ff3b 	bl	c068 <gatt_sub_find>
	if (!sub) {
   231f2:	b1f8      	cbz	r0, 23234 <bt_gatt_notification+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   231f4:	6883      	ldr	r3, [r0, #8]
   231f6:	b1eb      	cbz	r3, 23234 <bt_gatt_notification+0x52>
   231f8:	f1b3 0614 	subs.w	r6, r3, #20
   231fc:	d01a      	beq.n	23234 <bt_gatt_notification+0x52>
   231fe:	681c      	ldr	r4, [r3, #0]
   23200:	b104      	cbz	r4, 23204 <bt_gatt_notification+0x22>
   23202:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   23204:	8933      	ldrh	r3, [r6, #8]
   23206:	4543      	cmp	r3, r8
   23208:	d10a      	bne.n	23220 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   2320a:	6835      	ldr	r5, [r6, #0]
   2320c:	4653      	mov	r3, sl
   2320e:	464a      	mov	r2, r9
   23210:	4631      	mov	r1, r6
   23212:	4638      	mov	r0, r7
   23214:	47a8      	blx	r5
   23216:	b918      	cbnz	r0, 23220 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   23218:	4631      	mov	r1, r6
   2321a:	4638      	mov	r0, r7
   2321c:	f7ff ff77 	bl	2310e <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   23220:	b144      	cbz	r4, 23234 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23222:	f114 0514 	adds.w	r5, r4, #20
   23226:	d002      	beq.n	2322e <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23228:	6965      	ldr	r5, [r4, #20]
   2322a:	b105      	cbz	r5, 2322e <bt_gatt_notification+0x4c>
   2322c:	3d14      	subs	r5, #20
{
   2322e:	4626      	mov	r6, r4
   23230:	462c      	mov	r4, r5
   23232:	e7e7      	b.n	23204 <bt_gatt_notification+0x22>
}
   23234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023238 <bt_gatt_change_aware>:
{
   23238:	b510      	push	{r4, lr}
   2323a:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2323c:	f7e8 fec6 	bl	bfcc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   23240:	4603      	mov	r3, r0
   23242:	b910      	cbnz	r0, 2324a <bt_gatt_change_aware+0x12>
		return true;
   23244:	2401      	movs	r4, #1
}
   23246:	4620      	mov	r0, r4
   23248:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2324a:	7a02      	ldrb	r2, [r0, #8]
   2324c:	07d2      	lsls	r2, r2, #31
   2324e:	d5f9      	bpl.n	23244 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23250:	f3bf 8f5b 	dmb	ish
   23254:	68d9      	ldr	r1, [r3, #12]
   23256:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2325a:	f011 0101 	ands.w	r1, r1, #1
   2325e:	f100 000c 	add.w	r0, r0, #12
   23262:	d1ef      	bne.n	23244 <bt_gatt_change_aware+0xc>
	if (!req) {
   23264:	2c00      	cmp	r4, #0
   23266:	d0ee      	beq.n	23246 <bt_gatt_change_aware+0xe>
   23268:	f3bf 8f5b 	dmb	ish
   2326c:	68db      	ldr	r3, [r3, #12]
   2326e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   23272:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   23276:	079b      	lsls	r3, r3, #30
   23278:	d50e      	bpl.n	23298 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2327a:	f3bf 8f5b 	dmb	ish
   2327e:	e850 3f00 	ldrex	r3, [r0]
   23282:	f023 0302 	bic.w	r3, r3, #2
   23286:	e840 3200 	strex	r2, r3, [r0]
   2328a:	2a00      	cmp	r2, #0
   2328c:	d1f7      	bne.n	2327e <bt_gatt_change_aware+0x46>
   2328e:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   23292:	f7ff fd16 	bl	22cc2 <atomic_set_bit>
	return false;
   23296:	e7d6      	b.n	23246 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   23298:	2101      	movs	r1, #1
   2329a:	e7fa      	b.n	23292 <bt_gatt_change_aware+0x5a>

0002329c <sys_memcpy_swap>:
	psrc += length - 1;
   2329c:	1e53      	subs	r3, r2, #1
   2329e:	4419      	add	r1, r3
	for (; length > 0; length--) {
   232a0:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   232a2:	f811 3901 	ldrb.w	r3, [r1], #-1
   232a6:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   232aa:	4290      	cmp	r0, r2
   232ac:	d1f9      	bne.n	232a2 <sys_memcpy_swap+0x6>
}
   232ae:	4770      	bx	lr

000232b0 <smp_signing_info>:
}
   232b0:	2007      	movs	r0, #7
   232b2:	4770      	bx	lr

000232b4 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   232b4:	2301      	movs	r3, #1
   232b6:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   232b8:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   232ba:	f3bf 8f5b 	dmb	ish
   232be:	e850 2f00 	ldrex	r2, [r0]
   232c2:	401a      	ands	r2, r3
   232c4:	e840 2100 	strex	r1, r2, [r0]
   232c8:	2900      	cmp	r1, #0
   232ca:	d1f8      	bne.n	232be <atomic_clear_bit+0xa>
   232cc:	f3bf 8f5b 	dmb	ish
}
   232d0:	4770      	bx	lr

000232d2 <bt_smp_aes_cmac>:
{
   232d2:	b570      	push	{r4, r5, r6, lr}
   232d4:	b0c2      	sub	sp, #264	; 0x108
   232d6:	460d      	mov	r5, r1
   232d8:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   232da:	4601      	mov	r1, r0
   232dc:	aa16      	add	r2, sp, #88	; 0x58
   232de:	4668      	mov	r0, sp
{
   232e0:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   232e2:	f7fe f965 	bl	215b0 <tc_cmac_setup>
   232e6:	b150      	cbz	r0, 232fe <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   232e8:	4632      	mov	r2, r6
   232ea:	4629      	mov	r1, r5
   232ec:	4668      	mov	r0, sp
   232ee:	f7fe f98a 	bl	21606 <tc_cmac_update>
   232f2:	b120      	cbz	r0, 232fe <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   232f4:	4669      	mov	r1, sp
   232f6:	4620      	mov	r0, r4
   232f8:	f7fe f9f1 	bl	216de <tc_cmac_final>
   232fc:	b918      	cbnz	r0, 23306 <bt_smp_aes_cmac+0x34>
		return -EIO;
   232fe:	f06f 0004 	mvn.w	r0, #4
}
   23302:	b042      	add	sp, #264	; 0x108
   23304:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   23306:	2000      	movs	r0, #0
   23308:	e7fb      	b.n	23302 <bt_smp_aes_cmac+0x30>

0002330a <bt_smp_disconnected>:
{
   2330a:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   2330c:	6803      	ldr	r3, [r0, #0]
   2330e:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
{
   23312:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   23314:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   23318:	f001 fb1a 	bl	24950 <k_delayed_work_cancel>
	if (keys) {
   2331c:	b13d      	cbz	r5, 2332e <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2331e:	89eb      	ldrh	r3, [r5, #14]
   23320:	b113      	cbz	r3, 23328 <bt_smp_disconnected+0x1e>
   23322:	7b6b      	ldrb	r3, [r5, #13]
   23324:	079b      	lsls	r3, r3, #30
   23326:	d502      	bpl.n	2332e <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   23328:	4628      	mov	r0, r5
   2332a:	f000 fe1a 	bl	23f62 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2332e:	4620      	mov	r0, r4
   23330:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
}
   23334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   23338:	2100      	movs	r1, #0
   2333a:	f7fe ba7f 	b.w	2183c <memset>

0002333e <le_sc_oob_config_set.isra.0>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2333e:	f890 20c3 	ldrb.w	r2, [r0, #195]	; 0xc3
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   23342:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   23346:	6800      	ldr	r0, [r0, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   23348:	78c0      	ldrb	r0, [r0, #3]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2334a:	f002 0201 	and.w	r2, r2, #1
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2334e:	f003 0301 	and.w	r3, r3, #1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   23352:	b930      	cbnz	r0, 23362 <le_sc_oob_config_set.isra.0+0x24>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   23354:	b95a      	cbnz	r2, 2336e <le_sc_oob_config_set.isra.0+0x30>
		if (rsp_oob_present) {
   23356:	2b00      	cmp	r3, #0
				     BT_CONN_OOB_BOTH_PEERS :
   23358:	bf0c      	ite	eq
   2335a:	2303      	moveq	r3, #3
   2335c:	2300      	movne	r3, #0
	info->lesc.oob_config = oob_config;
   2335e:	700b      	strb	r3, [r1, #0]
}
   23360:	4770      	bx	lr
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   23362:	b94a      	cbnz	r2, 23378 <le_sc_oob_config_set.isra.0+0x3a>
		if (rsp_oob_present) {
   23364:	2b00      	cmp	r3, #0
				     BT_CONN_OOB_BOTH_PEERS :
   23366:	bf0c      	ite	eq
   23368:	2303      	moveq	r3, #3
   2336a:	2301      	movne	r3, #1
   2336c:	e7f7      	b.n	2335e <le_sc_oob_config_set.isra.0+0x20>
		if (rsp_oob_present) {
   2336e:	2b00      	cmp	r3, #0
				     BT_CONN_OOB_BOTH_PEERS :
   23370:	bf0c      	ite	eq
   23372:	2301      	moveq	r3, #1
   23374:	2302      	movne	r3, #2
   23376:	e7f2      	b.n	2335e <le_sc_oob_config_set.isra.0+0x20>
   23378:	005b      	lsls	r3, r3, #1
   2337a:	e7f0      	b.n	2335e <le_sc_oob_config_set.isra.0+0x20>

0002337c <smp_keys_check.part.0>:
static bool smp_keys_check(struct bt_conn *conn)
   2337c:	b538      	push	{r3, r4, r5, lr}
	if (!conn->le.keys) {
   2337e:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
static bool smp_keys_check(struct bt_conn *conn)
   23382:	4604      	mov	r4, r0
	if (!conn->le.keys) {
   23384:	b983      	cbnz	r3, 233a8 <smp_keys_check.part.0+0x2c>
						     conn->id, &conn->le.dst);
   23386:	f100 0588 	add.w	r5, r0, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   2338a:	7a01      	ldrb	r1, [r0, #8]
   2338c:	462a      	mov	r2, r5
   2338e:	2020      	movs	r0, #32
   23390:	f7ec f86a 	bl	f468 <bt_keys_find>
   23394:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   23398:	b930      	cbnz	r0, 233a8 <smp_keys_check.part.0+0x2c>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   2339a:	7a21      	ldrb	r1, [r4, #8]
   2339c:	462a      	mov	r2, r5
   2339e:	2004      	movs	r0, #4
   233a0:	f7ec f862 	bl	f468 <bt_keys_find>
   233a4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   233a8:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   233ac:	b152      	cbz	r2, 233c4 <smp_keys_check.part.0+0x48>
   233ae:	89d3      	ldrh	r3, [r2, #14]
   233b0:	f013 0024 	ands.w	r0, r3, #36	; 0x24
   233b4:	d005      	beq.n	233c2 <smp_keys_check.part.0+0x46>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   233b6:	7aa3      	ldrb	r3, [r4, #10]
   233b8:	2b02      	cmp	r3, #2
   233ba:	d905      	bls.n	233c8 <smp_keys_check.part.0+0x4c>
   233bc:	7b50      	ldrb	r0, [r2, #13]
   233be:	f000 0001 	and.w	r0, r0, #1
}
   233c2:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   233c4:	4610      	mov	r0, r2
   233c6:	e7fc      	b.n	233c2 <smp_keys_check.part.0+0x46>
	return true;
   233c8:	2001      	movs	r0, #1
   233ca:	e7fa      	b.n	233c2 <smp_keys_check.part.0+0x46>

000233cc <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   233cc:	b510      	push	{r4, lr}
   233ce:	1e43      	subs	r3, r0, #1
   233d0:	f100 0210 	add.w	r2, r0, #16
   233d4:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   233d6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   233da:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   233de:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   233e0:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   233e2:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   233e4:	d1f7      	bne.n	233d6 <sys_mem_swap.constprop.0+0xa>
	}
}
   233e6:	bd10      	pop	{r4, pc}

000233e8 <smp_f6>:
{
   233e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   233ea:	b097      	sub	sp, #92	; 0x5c
   233ec:	4605      	mov	r5, r0
   233ee:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   233f0:	a805      	add	r0, sp, #20
   233f2:	2210      	movs	r2, #16
{
   233f4:	461c      	mov	r4, r3
   233f6:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   233f8:	f7ff ff50 	bl	2329c <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   233fc:	2210      	movs	r2, #16
   233fe:	4631      	mov	r1, r6
   23400:	a809      	add	r0, sp, #36	; 0x24
   23402:	f7ff ff4b 	bl	2329c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   23406:	4621      	mov	r1, r4
   23408:	2210      	movs	r2, #16
   2340a:	a80d      	add	r0, sp, #52	; 0x34
   2340c:	f7ff ff46 	bl	2329c <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   23410:	991c      	ldr	r1, [sp, #112]	; 0x70
   23412:	2203      	movs	r2, #3
   23414:	a811      	add	r0, sp, #68	; 0x44
   23416:	f7ff ff41 	bl	2329c <sys_memcpy_swap>
	m[51] = a1->type;
   2341a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   2341c:	f814 3b01 	ldrb.w	r3, [r4], #1
   23420:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   23424:	4621      	mov	r1, r4
   23426:	2206      	movs	r2, #6
   23428:	a812      	add	r0, sp, #72	; 0x48
   2342a:	f7fe f9dc 	bl	217e6 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2342e:	4621      	mov	r1, r4
   23430:	2206      	movs	r2, #6
   23432:	a812      	add	r0, sp, #72	; 0x48
   23434:	f7ff ff32 	bl	2329c <sys_memcpy_swap>
	m[58] = a2->type;
   23438:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   2343a:	f814 3b01 	ldrb.w	r3, [r4], #1
   2343e:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   23442:	4621      	mov	r1, r4
   23444:	2206      	movs	r2, #6
   23446:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2344a:	f7fe f9cc 	bl	217e6 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2344e:	4621      	mov	r1, r4
   23450:	2206      	movs	r2, #6
   23452:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   23456:	f7ff ff21 	bl	2329c <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2345a:	2210      	movs	r2, #16
   2345c:	4629      	mov	r1, r5
   2345e:	a801      	add	r0, sp, #4
   23460:	f7ff ff1c 	bl	2329c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   23464:	463b      	mov	r3, r7
   23466:	2241      	movs	r2, #65	; 0x41
   23468:	a905      	add	r1, sp, #20
   2346a:	a801      	add	r0, sp, #4
   2346c:	f7ff ff31 	bl	232d2 <bt_smp_aes_cmac>
	if (err) {
   23470:	4604      	mov	r4, r0
   23472:	b910      	cbnz	r0, 2347a <smp_f6+0x92>
	sys_mem_swap(check, 16);
   23474:	4638      	mov	r0, r7
   23476:	f7ff ffa9 	bl	233cc <sys_mem_swap.constprop.0>
}
   2347a:	4620      	mov	r0, r4
   2347c:	b017      	add	sp, #92	; 0x5c
   2347e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023480 <smp_f4>:
{
   23480:	b5f0      	push	{r4, r5, r6, r7, lr}
   23482:	b097      	sub	sp, #92	; 0x5c
   23484:	4614      	mov	r4, r2
   23486:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   23488:	2220      	movs	r2, #32
   2348a:	4601      	mov	r1, r0
   2348c:	a805      	add	r0, sp, #20
{
   2348e:	461d      	mov	r5, r3
   23490:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   23492:	f7ff ff03 	bl	2329c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   23496:	2220      	movs	r2, #32
   23498:	4631      	mov	r1, r6
   2349a:	a80d      	add	r0, sp, #52	; 0x34
   2349c:	f7ff fefe 	bl	2329c <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   234a0:	4621      	mov	r1, r4
   234a2:	2210      	movs	r2, #16
   234a4:	a801      	add	r0, sp, #4
	m[64] = z;
   234a6:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   234aa:	f7ff fef7 	bl	2329c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   234ae:	463b      	mov	r3, r7
   234b0:	2241      	movs	r2, #65	; 0x41
   234b2:	a905      	add	r1, sp, #20
   234b4:	a801      	add	r0, sp, #4
   234b6:	f7ff ff0c 	bl	232d2 <bt_smp_aes_cmac>
	if (err) {
   234ba:	4604      	mov	r4, r0
   234bc:	b910      	cbnz	r0, 234c4 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   234be:	4638      	mov	r0, r7
   234c0:	f7ff ff84 	bl	233cc <sys_mem_swap.constprop.0>
}
   234c4:	4620      	mov	r0, r4
   234c6:	b017      	add	sp, #92	; 0x5c
   234c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000234ca <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   234ca:	f3bf 8f5b 	dmb	ish
   234ce:	6800      	ldr	r0, [r0, #0]
   234d0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   234d4:	4108      	asrs	r0, r1
}
   234d6:	f000 0001 	and.w	r0, r0, #1
   234da:	4770      	bx	lr

000234dc <update_keys_check>:
{
   234dc:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   234de:	6805      	ldr	r5, [r0, #0]
	if (!conn->le.keys) {
   234e0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
{
   234e4:	4604      	mov	r4, r0
	if (!conn->le.keys) {
   234e6:	b933      	cbnz	r3, 234f6 <update_keys_check+0x1a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   234e8:	7a28      	ldrb	r0, [r5, #8]
   234ea:	f105 0188 	add.w	r1, r5, #136	; 0x88
   234ee:	f7eb ff85 	bl	f3fc <bt_keys_get_addr>
   234f2:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   234f6:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
   234fa:	b1fa      	cbz	r2, 2353c <update_keys_check+0x60>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   234fc:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
   234fe:	f011 0f24 	tst.w	r1, #36	; 0x24
   23502:	d01b      	beq.n	2353c <update_keys_check+0x60>
	return MIN(req->max_key_size, rsp->max_key_size);
   23504:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   23508:	f894 00c5 	ldrb.w	r0, [r4, #197]	; 0xc5
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
   2350c:	7b12      	ldrb	r2, [r2, #12]
   2350e:	4283      	cmp	r3, r0
   23510:	bf28      	it	cs
   23512:	4603      	movcs	r3, r0
   23514:	429a      	cmp	r2, r3
   23516:	d901      	bls.n	2351c <update_keys_check+0x40>
		return false;
   23518:	2000      	movs	r0, #0
}
   2351a:	bd38      	pop	{r3, r4, r5, pc}
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   2351c:	068b      	lsls	r3, r1, #26
   2351e:	d405      	bmi.n	2352c <update_keys_check+0x50>
	if ((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   23520:	f894 00c0 	ldrb.w	r0, [r4, #192]	; 0xc0
   23524:	3800      	subs	r0, #0
   23526:	bf18      	it	ne
   23528:	2001      	movne	r0, #1
   2352a:	e7f6      	b.n	2351a <update_keys_check+0x3e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2352c:	2105      	movs	r1, #5
   2352e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   23532:	f7ff ffca 	bl	234ca <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
   23536:	2800      	cmp	r0, #0
   23538:	d1f2      	bne.n	23520 <update_keys_check+0x44>
   2353a:	e7ed      	b.n	23518 <update_keys_check+0x3c>
		return true;
   2353c:	2001      	movs	r0, #1
   2353e:	e7ec      	b.n	2351a <update_keys_check+0x3e>

00023540 <atomic_test_and_clear_bit>:
{
   23540:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   23542:	2301      	movs	r3, #1
   23544:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   23548:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2354a:	f3bf 8f5b 	dmb	ish
   2354e:	e850 3f00 	ldrex	r3, [r0]
   23552:	ea03 0c02 	and.w	ip, r3, r2
   23556:	e840 ce00 	strex	lr, ip, [r0]
   2355a:	f1be 0f00 	cmp.w	lr, #0
   2355e:	d1f6      	bne.n	2354e <atomic_test_and_clear_bit+0xe>
   23560:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   23564:	420b      	tst	r3, r1
}
   23566:	bf14      	ite	ne
   23568:	2001      	movne	r0, #1
   2356a:	2000      	moveq	r0, #0
   2356c:	f85d fb04 	ldr.w	pc, [sp], #4

00023570 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   23570:	2301      	movs	r3, #1
   23572:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23574:	f3bf 8f5b 	dmb	ish
   23578:	e850 2f00 	ldrex	r2, [r0]
   2357c:	431a      	orrs	r2, r3
   2357e:	e840 2100 	strex	r1, r2, [r0]
   23582:	2900      	cmp	r1, #0
   23584:	d1f8      	bne.n	23578 <atomic_set_bit+0x8>
   23586:	f3bf 8f5b 	dmb	ish
}
   2358a:	4770      	bx	lr

0002358c <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2358c:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2358e:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   23592:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   23594:	4628      	mov	r0, r5
   23596:	2104      	movs	r1, #4
   23598:	f7ff ff97 	bl	234ca <atomic_test_bit>
   2359c:	b168      	cbz	r0, 235ba <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   2359e:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   235a0:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   235a2:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   235a4:	4608      	mov	r0, r1
   235a6:	f7fe fe1b 	bl	221e0 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   235aa:	4604      	mov	r4, r0
   235ac:	b940      	cbnz	r0, 235c0 <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   235ae:	2104      	movs	r1, #4
   235b0:	4628      	mov	r0, r5
   235b2:	f7ff ffdd 	bl	23570 <atomic_set_bit>
}
   235b6:	4620      	mov	r0, r4
   235b8:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   235ba:	f247 5230 	movw	r2, #30000	; 0x7530
   235be:	e7ef      	b.n	235a0 <smp_create_pdu.isra.0+0x14>
	hdr = net_buf_add(buf, sizeof(*hdr));
   235c0:	2101      	movs	r1, #1
   235c2:	3008      	adds	r0, #8
   235c4:	f000 fd38 	bl	24038 <net_buf_simple_add>
	hdr->code = op;
   235c8:	7006      	strb	r6, [r0, #0]
	return buf;
   235ca:	e7f4      	b.n	235b6 <smp_create_pdu.isra.0+0x2a>

000235cc <sc_smp_send_dhkey_check>:
{
   235cc:	b570      	push	{r4, r5, r6, lr}
   235ce:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   235d0:	210d      	movs	r1, #13
{
   235d2:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   235d4:	f7ff ffda 	bl	2358c <smp_create_pdu.isra.0>
	if (!buf) {
   235d8:	4604      	mov	r4, r0
   235da:	b170      	cbz	r0, 235fa <sc_smp_send_dhkey_check+0x2e>
	req = net_buf_add(buf, sizeof(*req));
   235dc:	2110      	movs	r1, #16
   235de:	3008      	adds	r0, #8
   235e0:	f000 fd2a 	bl	24038 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   235e4:	2210      	movs	r2, #16
   235e6:	4631      	mov	r1, r6
   235e8:	f7fe f8fd 	bl	217e6 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   235ec:	4628      	mov	r0, r5
   235ee:	2200      	movs	r2, #0
   235f0:	4621      	mov	r1, r4
   235f2:	f7ea fb9b 	bl	dd2c <smp_send.isra.0>
	return 0;
   235f6:	2000      	movs	r0, #0
}
   235f8:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   235fa:	2008      	movs	r0, #8
   235fc:	e7fc      	b.n	235f8 <sc_smp_send_dhkey_check+0x2c>

000235fe <smp_send_pairing_random>:
{
   235fe:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   23600:	2104      	movs	r1, #4
{
   23602:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   23604:	f7ff ffc2 	bl	2358c <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   23608:	4604      	mov	r4, r0
   2360a:	b178      	cbz	r0, 2362c <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
   2360c:	2110      	movs	r1, #16
   2360e:	3008      	adds	r0, #8
   23610:	f000 fd12 	bl	24038 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   23614:	2210      	movs	r2, #16
   23616:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   2361a:	f7fe f8e4 	bl	217e6 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2361e:	4628      	mov	r0, r5
   23620:	2200      	movs	r2, #0
   23622:	4621      	mov	r1, r4
   23624:	f7ea fb82 	bl	dd2c <smp_send.isra.0>
	return 0;
   23628:	2000      	movs	r0, #0
}
   2362a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2362c:	2008      	movs	r0, #8
   2362e:	e7fc      	b.n	2362a <smp_send_pairing_random+0x2c>

00023630 <send_pairing_rsp>:
{
   23630:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   23632:	2102      	movs	r1, #2
{
   23634:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   23636:	f7ff ffa9 	bl	2358c <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   2363a:	4604      	mov	r4, r0
   2363c:	b178      	cbz	r0, 2365e <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
   2363e:	2106      	movs	r1, #6
   23640:	3008      	adds	r0, #8
   23642:	f000 fcf9 	bl	24038 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   23646:	2206      	movs	r2, #6
   23648:	f105 01c9 	add.w	r1, r5, #201	; 0xc9
   2364c:	f7fe f8cb 	bl	217e6 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   23650:	4628      	mov	r0, r5
   23652:	2200      	movs	r2, #0
   23654:	4621      	mov	r1, r4
   23656:	f7ea fb69 	bl	dd2c <smp_send.isra.0>
	return 0;
   2365a:	2000      	movs	r0, #0
}
   2365c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2365e:	2008      	movs	r0, #8
   23660:	e7fc      	b.n	2365c <send_pairing_rsp+0x2c>

00023662 <compute_and_send_master_dhcheck>:
{
   23662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23666:	4604      	mov	r4, r0
   23668:	b08c      	sub	sp, #48	; 0x30
	(void)memset(r, 0, sizeof(r));
   2366a:	2210      	movs	r2, #16
   2366c:	2100      	movs	r1, #0
   2366e:	a808      	add	r0, sp, #32
   23670:	f7fe f8e4 	bl	2183c <memset>
	switch (smp->method) {
   23674:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   23678:	2b05      	cmp	r3, #5
   2367a:	d820      	bhi.n	236be <compute_and_send_master_dhcheck+0x5c>
   2367c:	e8df f003 	tbb	[pc, r3]
   23680:	09030309 	.word	0x09030309
   23684:	211f      	.short	0x211f
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   23686:	2204      	movs	r2, #4
   23688:	f504 71c8 	add.w	r1, r4, #400	; 0x190
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   2368c:	a808      	add	r0, sp, #32
   2368e:	f7fe f8aa 	bl	217e6 <memcpy>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   23692:	4625      	mov	r5, r4
		   smp->tk)) {
   23694:	f104 02ff 	add.w	r2, r4, #255	; 0xff
		   &smp->chan.chan.conn->le.init_addr,
   23698:	f855 3bef 	ldr.w	r3, [r5], #239
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   2369c:	f204 177f 	addw	r7, r4, #383	; 0x17f
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   236a0:	e9cd 7201 	strd	r7, r2, [sp, #4]
   236a4:	f104 08df 	add.w	r8, r4, #223	; 0xdf
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   236a8:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   236ac:	9200      	str	r2, [sp, #0]
   236ae:	338f      	adds	r3, #143	; 0x8f
   236b0:	462a      	mov	r2, r5
   236b2:	4641      	mov	r1, r8
   236b4:	f204 104f 	addw	r0, r4, #335	; 0x14f
   236b8:	f7ea fa9a 	bl	dbf0 <smp_f5>
   236bc:	b138      	cbz	r0, 236ce <compute_and_send_master_dhcheck+0x6c>
	switch (smp->method) {
   236be:	2008      	movs	r0, #8
   236c0:	e021      	b.n	23706 <compute_and_send_master_dhcheck+0xa4>
		if (smp->oobd_remote) {
   236c2:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
   236c6:	2900      	cmp	r1, #0
   236c8:	d0e3      	beq.n	23692 <compute_and_send_master_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   236ca:	2210      	movs	r2, #16
   236cc:	e7de      	b.n	2368c <compute_and_send_master_dhcheck+0x2a>
		   &smp->chan.chan.conn->le.init_addr,
   236ce:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   236d0:	ae04      	add	r6, sp, #16
		   &smp->chan.chan.conn->le.init_addr,
   236d2:	f852 3bc2 	ldr.w	r3, [r2], #194
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   236d6:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
   236d8:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   236dc:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   236de:	e9cd 2300 	strd	r2, r3, [sp]
   236e2:	9102      	str	r1, [sp, #8]
   236e4:	ab08      	add	r3, sp, #32
   236e6:	462a      	mov	r2, r5
   236e8:	4641      	mov	r1, r8
   236ea:	4638      	mov	r0, r7
   236ec:	f7ff fe7c 	bl	233e8 <smp_f6>
   236f0:	2800      	cmp	r0, #0
   236f2:	d1e4      	bne.n	236be <compute_and_send_master_dhcheck+0x5c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   236f4:	210d      	movs	r1, #13
   236f6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   236fa:	f7ff ff39 	bl	23570 <atomic_set_bit>
	return sc_smp_send_dhkey_check(smp, e);
   236fe:	4631      	mov	r1, r6
   23700:	4620      	mov	r0, r4
   23702:	f7ff ff63 	bl	235cc <sc_smp_send_dhkey_check>
}
   23706:	b00c      	add	sp, #48	; 0x30
   23708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002370c <compute_and_check_and_send_slave_dhcheck>:
{
   2370c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23710:	4604      	mov	r4, r0
   23712:	b091      	sub	sp, #68	; 0x44
	(void)memset(r, 0, sizeof(r));
   23714:	2210      	movs	r2, #16
   23716:	2100      	movs	r1, #0
   23718:	a80c      	add	r0, sp, #48	; 0x30
   2371a:	f7fe f88f 	bl	2183c <memset>
	switch (smp->method) {
   2371e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   23722:	2b05      	cmp	r3, #5
   23724:	d820      	bhi.n	23768 <compute_and_check_and_send_slave_dhcheck+0x5c>
   23726:	e8df f003 	tbb	[pc, r3]
   2372a:	0309      	.short	0x0309
   2372c:	211f0903 	.word	0x211f0903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   23730:	2204      	movs	r2, #4
   23732:	f504 71c8 	add.w	r1, r4, #400	; 0x190
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   23736:	a80c      	add	r0, sp, #48	; 0x30
   23738:	f7fe f855 	bl	217e6 <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   2373c:	4625      	mov	r5, r4
		   smp->tk)) {
   2373e:	f104 02ff 	add.w	r2, r4, #255	; 0xff
		   &smp->chan.chan.conn->le.init_addr,
   23742:	f855 3bdf 	ldr.w	r3, [r5], #223
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   23746:	f204 167f 	addw	r6, r4, #383	; 0x17f
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   2374a:	e9cd 6201 	strd	r6, r2, [sp, #4]
   2374e:	f104 07ef 	add.w	r7, r4, #239	; 0xef
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   23752:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   23756:	9200      	str	r2, [sp, #0]
   23758:	338f      	adds	r3, #143	; 0x8f
   2375a:	462a      	mov	r2, r5
   2375c:	4639      	mov	r1, r7
   2375e:	f204 104f 	addw	r0, r4, #335	; 0x14f
   23762:	f7ea fa45 	bl	dbf0 <smp_f5>
   23766:	b138      	cbz	r0, 23778 <compute_and_check_and_send_slave_dhcheck+0x6c>
	switch (smp->method) {
   23768:	2508      	movs	r5, #8
   2376a:	e04c      	b.n	23806 <compute_and_check_and_send_slave_dhcheck+0xfa>
		if (smp->oobd_remote) {
   2376c:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
   23770:	2900      	cmp	r1, #0
   23772:	d0e3      	beq.n	2373c <compute_and_check_and_send_slave_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   23774:	2210      	movs	r2, #16
   23776:	e7de      	b.n	23736 <compute_and_check_and_send_slave_dhcheck+0x2a>
		   &smp->chan.chan.conn->le.resp_addr,
   23778:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   2377a:	f10d 0820 	add.w	r8, sp, #32
		   &smp->chan.chan.conn->le.resp_addr,
   2377e:	f852 3bc9 	ldr.w	r3, [r2], #201
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   23782:	f8cd 800c 	str.w	r8, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   23786:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   2378a:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   2378c:	e9cd 2300 	strd	r2, r3, [sp]
   23790:	9102      	str	r1, [sp, #8]
   23792:	ab0c      	add	r3, sp, #48	; 0x30
   23794:	463a      	mov	r2, r7
   23796:	4629      	mov	r1, r5
   23798:	4630      	mov	r0, r6
   2379a:	f7ff fe25 	bl	233e8 <smp_f6>
   2379e:	2800      	cmp	r0, #0
   237a0:	d1e2      	bne.n	23768 <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (smp->method == LE_SC_OOB) {
   237a2:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   237a6:	2b05      	cmp	r3, #5
   237a8:	d106      	bne.n	237b8 <compute_and_check_and_send_slave_dhcheck+0xac>
		if (smp->oobd_local) {
   237aa:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
			memcpy(r, smp->oobd_local->r, sizeof(r));
   237ae:	2210      	movs	r2, #16
   237b0:	a80c      	add	r0, sp, #48	; 0x30
		if (smp->oobd_local) {
   237b2:	b361      	cbz	r1, 2380e <compute_and_check_and_send_slave_dhcheck+0x102>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   237b4:	f7fe f817 	bl	217e6 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   237b8:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   237ba:	f10d 0910 	add.w	r9, sp, #16
		   &smp->chan.chan.conn->le.init_addr,
   237be:	f852 3bc2 	ldr.w	r3, [r2], #194
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   237c2:	f8cd 900c 	str.w	r9, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   237c6:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   237ca:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   237cc:	e9cd 2300 	strd	r2, r3, [sp]
   237d0:	9102      	str	r1, [sp, #8]
   237d2:	ab0c      	add	r3, sp, #48	; 0x30
   237d4:	462a      	mov	r2, r5
   237d6:	4639      	mov	r1, r7
   237d8:	4630      	mov	r0, r6
   237da:	f7ff fe05 	bl	233e8 <smp_f6>
   237de:	2800      	cmp	r0, #0
   237e0:	d1c2      	bne.n	23768 <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (memcmp(smp->e, re, 16)) {
   237e2:	2210      	movs	r2, #16
   237e4:	4649      	mov	r1, r9
   237e6:	f204 106f 	addw	r0, r4, #367	; 0x16f
   237ea:	f7fd ffec 	bl	217c6 <memcmp>
   237ee:	b988      	cbnz	r0, 23814 <compute_and_check_and_send_slave_dhcheck+0x108>
	err = sc_smp_send_dhkey_check(smp, e);
   237f0:	4641      	mov	r1, r8
   237f2:	4620      	mov	r0, r4
   237f4:	f7ff feea 	bl	235cc <sc_smp_send_dhkey_check>
	if (err) {
   237f8:	4605      	mov	r5, r0
   237fa:	b920      	cbnz	r0, 23806 <compute_and_check_and_send_slave_dhcheck+0xfa>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   237fc:	2101      	movs	r1, #1
   237fe:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   23802:	f7ff feb5 	bl	23570 <atomic_set_bit>
}
   23806:	4628      	mov	r0, r5
   23808:	b011      	add	sp, #68	; 0x44
   2380a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
   2380e:	f7fe f815 	bl	2183c <memset>
   23812:	e7d1      	b.n	237b8 <compute_and_check_and_send_slave_dhcheck+0xac>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   23814:	250b      	movs	r5, #11
   23816:	e7f6      	b.n	23806 <compute_and_check_and_send_slave_dhcheck+0xfa>

00023818 <smp_dhkey_check>:
{
   23818:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   2381a:	6803      	ldr	r3, [r0, #0]
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2381c:	688f      	ldr	r7, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   2381e:	78dc      	ldrb	r4, [r3, #3]
{
   23820:	b091      	sub	sp, #68	; 0x44
   23822:	4606      	mov	r6, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   23824:	2c00      	cmp	r4, #0
   23826:	d15d      	bne.n	238e4 <smp_dhkey_check+0xcc>
		(void)memset(r, 0, sizeof(r));
   23828:	2210      	movs	r2, #16
   2382a:	4621      	mov	r1, r4
   2382c:	a80c      	add	r0, sp, #48	; 0x30
   2382e:	f7fe f805 	bl	2183c <memset>
		switch (smp->method) {
   23832:	f896 30c0 	ldrb.w	r3, [r6, #192]	; 0xc0
   23836:	2b05      	cmp	r3, #5
   23838:	d81f      	bhi.n	2387a <smp_dhkey_check+0x62>
   2383a:	e8df f003 	tbb	[pc, r3]
   2383e:	0309      	.short	0x0309
   23840:	221e0903 	.word	0x221e0903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   23844:	2204      	movs	r2, #4
   23846:	f506 71c8 	add.w	r1, r6, #400	; 0x190
				memcpy(r, smp->oobd_local->r, sizeof(r));
   2384a:	a80c      	add	r0, sp, #48	; 0x30
   2384c:	f7fd ffcb 	bl	217e6 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   23850:	4632      	mov	r2, r6
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   23852:	ad08      	add	r5, sp, #32
			   &smp->chan.chan.conn->le.resp_addr,
   23854:	f852 3bdf 	ldr.w	r3, [r2], #223
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   23858:	9503      	str	r5, [sp, #12]
			   &smp->chan.chan.conn->le.init_addr, e)) {
   2385a:	f103 018f 	add.w	r1, r3, #143	; 0x8f
			   &smp->chan.chan.conn->le.resp_addr,
   2385e:	3396      	adds	r3, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   23860:	9301      	str	r3, [sp, #4]
   23862:	f106 03c9 	add.w	r3, r6, #201	; 0xc9
   23866:	9102      	str	r1, [sp, #8]
   23868:	9300      	str	r3, [sp, #0]
   2386a:	f106 01ef 	add.w	r1, r6, #239	; 0xef
   2386e:	ab0c      	add	r3, sp, #48	; 0x30
   23870:	f206 107f 	addw	r0, r6, #383	; 0x17f
   23874:	f7ff fdb8 	bl	233e8 <smp_f6>
   23878:	b148      	cbz	r0, 2388e <smp_dhkey_check+0x76>
		switch (smp->method) {
   2387a:	2408      	movs	r4, #8
}
   2387c:	4620      	mov	r0, r4
   2387e:	b011      	add	sp, #68	; 0x44
   23880:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (smp->oobd_local) {
   23882:	f8d6 1198 	ldr.w	r1, [r6, #408]	; 0x198
   23886:	2900      	cmp	r1, #0
   23888:	d0e2      	beq.n	23850 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   2388a:	2210      	movs	r2, #16
   2388c:	e7dd      	b.n	2384a <smp_dhkey_check+0x32>
		if (memcmp(e, req->e, 16)) {
   2388e:	4628      	mov	r0, r5
   23890:	2210      	movs	r2, #16
   23892:	4639      	mov	r1, r7
   23894:	f7fd ff97 	bl	217c6 <memcmp>
   23898:	4605      	mov	r5, r0
   2389a:	bb08      	cbnz	r0, 238e0 <smp_dhkey_check+0xc8>
	return MIN(req->max_key_size, rsp->max_key_size);
   2389c:	f896 30c5 	ldrb.w	r3, [r6, #197]	; 0xc5
   238a0:	f896 70cc 	ldrb.w	r7, [r6, #204]	; 0xcc
		(void)memset(ediv, 0, sizeof(ediv));
   238a4:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   238a6:	429f      	cmp	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   238a8:	f04f 0202 	mov.w	r2, #2
   238ac:	a805      	add	r0, sp, #20
	return MIN(req->max_key_size, rsp->max_key_size);
   238ae:	bf28      	it	cs
   238b0:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   238b2:	f7fd ffc3 	bl	2183c <memset>
		(void)memset(rand, 0, sizeof(rand));
   238b6:	2208      	movs	r2, #8
   238b8:	4629      	mov	r1, r5
   238ba:	a806      	add	r0, sp, #24
   238bc:	f7fd ffbe 	bl	2183c <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   238c0:	6830      	ldr	r0, [r6, #0]
   238c2:	9700      	str	r7, [sp, #0]
   238c4:	f106 03ff 	add.w	r3, r6, #255	; 0xff
   238c8:	aa05      	add	r2, sp, #20
   238ca:	a906      	add	r1, sp, #24
   238cc:	f7fe fb0a 	bl	21ee4 <bt_conn_le_start_encryption>
   238d0:	2800      	cmp	r0, #0
   238d2:	dbd2      	blt.n	2387a <smp_dhkey_check+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   238d4:	2101      	movs	r1, #1
   238d6:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   238da:	f7ff fe49 	bl	23570 <atomic_set_bit>
			return 0;
   238de:	e7cd      	b.n	2387c <smp_dhkey_check+0x64>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   238e0:	240b      	movs	r4, #11
   238e2:	e7cb      	b.n	2387c <smp_dhkey_check+0x64>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   238e4:	2c01      	cmp	r4, #1
   238e6:	d115      	bne.n	23914 <smp_dhkey_check+0xfc>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   238e8:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
   238ec:	210f      	movs	r1, #15
   238ee:	4628      	mov	r0, r5
   238f0:	f7ff fce0 	bl	232b4 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   238f4:	2210      	movs	r2, #16
   238f6:	4639      	mov	r1, r7
   238f8:	f206 106f 	addw	r0, r6, #367	; 0x16f
   238fc:	f7fd ff73 	bl	217e6 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   23900:	2107      	movs	r1, #7
   23902:	4628      	mov	r0, r5
   23904:	f7ff fde1 	bl	234ca <atomic_test_bit>
   23908:	4604      	mov	r4, r0
   2390a:	b128      	cbz	r0, 23918 <smp_dhkey_check+0x100>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2390c:	2108      	movs	r1, #8
   2390e:	4628      	mov	r0, r5
   23910:	f7ff fe2e 	bl	23570 <atomic_set_bit>
	return 0;
   23914:	2400      	movs	r4, #0
   23916:	e7b1      	b.n	2387c <smp_dhkey_check+0x64>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   23918:	2109      	movs	r1, #9
   2391a:	4628      	mov	r0, r5
   2391c:	f7ff fdd5 	bl	234ca <atomic_test_bit>
   23920:	b110      	cbz	r0, 23928 <smp_dhkey_check+0x110>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   23922:	2108      	movs	r1, #8
   23924:	4628      	mov	r0, r5
   23926:	e7d8      	b.n	238da <smp_dhkey_check+0xc2>
		return compute_and_check_and_send_slave_dhcheck(smp);
   23928:	4630      	mov	r0, r6
   2392a:	f7ff feef 	bl	2370c <compute_and_check_and_send_slave_dhcheck>
   2392e:	4604      	mov	r4, r0
   23930:	e7a4      	b.n	2387c <smp_dhkey_check+0x64>

00023932 <smp_reset>:
{
   23932:	b538      	push	{r3, r4, r5, lr}
   23934:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   23936:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   23938:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   2393c:	f001 f808 	bl	24950 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   23940:	2300      	movs	r3, #0
   23942:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	atomic_set(&smp->allowed_cmds, 0);
   23946:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2394a:	f3bf 8f5b 	dmb	ish
   2394e:	e850 2f00 	ldrex	r2, [r0]
   23952:	e840 3100 	strex	r1, r3, [r0]
   23956:	2900      	cmp	r1, #0
   23958:	d1f9      	bne.n	2394e <smp_reset+0x1c>
   2395a:	f3bf 8f5b 	dmb	ish
   2395e:	f3bf 8f5b 	dmb	ish
   23962:	34bc      	adds	r4, #188	; 0xbc
   23964:	e854 2f00 	ldrex	r2, [r4]
   23968:	e844 3100 	strex	r1, r3, [r4]
   2396c:	2900      	cmp	r1, #0
   2396e:	d1f9      	bne.n	23964 <smp_reset+0x32>
   23970:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
   23974:	7a6b      	ldrb	r3, [r5, #9]
   23976:	7aaa      	ldrb	r2, [r5, #10]
   23978:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   2397a:	bf18      	it	ne
   2397c:	72ab      	strbne	r3, [r5, #10]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2397e:	78eb      	ldrb	r3, [r5, #3]
   23980:	b923      	cbnz	r3, 2398c <smp_reset+0x5a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   23982:	210b      	movs	r1, #11
}
   23984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   23988:	f7ff bdf2 	b.w	23570 <atomic_set_bit>
   2398c:	2101      	movs	r1, #1
   2398e:	e7f9      	b.n	23984 <smp_reset+0x52>

00023990 <smp_error>:
{
   23990:	b573      	push	{r0, r1, r4, r5, r6, lr}
   23992:	4606      	mov	r6, r0
   23994:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   23996:	f7ea fe81 	bl	e69c <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2399a:	2105      	movs	r1, #5
   2399c:	4630      	mov	r0, r6
   2399e:	f7ff fdf5 	bl	2358c <smp_create_pdu.isra.0>
	if (!buf) {
   239a2:	4605      	mov	r5, r0
   239a4:	b178      	cbz	r0, 239c6 <smp_error+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
   239a6:	2101      	movs	r1, #1
   239a8:	3008      	adds	r0, #8
   239aa:	f000 fb45 	bl	24038 <net_buf_simple_add>
	rsp->reason = reason;
   239ae:	7004      	strb	r4, [r0, #0]
   239b0:	2400      	movs	r4, #0
   239b2:	6830      	ldr	r0, [r6, #0]
   239b4:	9400      	str	r4, [sp, #0]
   239b6:	4623      	mov	r3, r4
   239b8:	462a      	mov	r2, r5
   239ba:	2106      	movs	r1, #6
   239bc:	f7fe fc13 	bl	221e6 <bt_l2cap_send_cb>
	return 0;
   239c0:	4620      	mov	r0, r4
}
   239c2:	b002      	add	sp, #8
   239c4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   239c6:	f06f 0036 	mvn.w	r0, #54	; 0x36
   239ca:	e7fa      	b.n	239c2 <smp_error+0x32>

000239cc <smp_ident_sent>:
{
   239cc:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   239ce:	7883      	ldrb	r3, [r0, #2]
   239d0:	2b01      	cmp	r3, #1
   239d2:	d10f      	bne.n	239f4 <smp_ident_sent+0x28>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   239d4:	2106      	movs	r1, #6
   239d6:	f7fe fc36 	bl	22246 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   239da:	f890 21a0 	ldrb.w	r2, [r0, #416]	; 0x1a0
   239de:	f022 0201 	bic.w	r2, r2, #1
   239e2:	f880 21a0 	strb.w	r2, [r0, #416]	; 0x1a0
		if (!smp->local_dist && !smp->remote_dist) {
   239e6:	f8b0 11a0 	ldrh.w	r1, [r0, #416]	; 0x1a0
   239ea:	b919      	cbnz	r1, 239f4 <smp_ident_sent+0x28>
}
   239ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   239f0:	f7ea be54 	b.w	e69c <smp_pairing_complete>
}
   239f4:	bd08      	pop	{r3, pc}

000239f6 <bt_smp_encrypt_change>:
{
   239f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->conn;
   239f8:	4605      	mov	r5, r0
{
   239fa:	460e      	mov	r6, r1
	struct bt_conn *conn = chan->conn;
   239fc:	f855 7bbc 	ldr.w	r7, [r5], #188
{
   23a00:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   23a02:	2101      	movs	r1, #1
   23a04:	4628      	mov	r0, r5
   23a06:	f7ff fc55 	bl	232b4 <atomic_clear_bit>
	if (hci_status) {
   23a0a:	2e00      	cmp	r6, #0
   23a0c:	d14a      	bne.n	23aa4 <bt_smp_encrypt_change+0xae>
	if (!conn->encrypt) {
   23a0e:	7afb      	ldrb	r3, [r7, #11]
   23a10:	2b00      	cmp	r3, #0
   23a12:	d047      	beq.n	23aa4 <bt_smp_encrypt_change+0xae>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   23a14:	2103      	movs	r1, #3
   23a16:	f7ff fd58 	bl	234ca <atomic_test_bit>
   23a1a:	b920      	cbnz	r0, 23a26 <bt_smp_encrypt_change+0x30>
		smp_reset(smp);
   23a1c:	4620      	mov	r0, r4
}
   23a1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_reset(smp);
   23a22:	f7ff bf86 	b.w	23932 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   23a26:	2105      	movs	r1, #5
   23a28:	4628      	mov	r0, r5
   23a2a:	f7ff fd4e 	bl	234ca <atomic_test_bit>
   23a2e:	b198      	cbz	r0, 23a58 <bt_smp_encrypt_change+0x62>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   23a30:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
   23a34:	071e      	lsls	r6, r3, #28
   23a36:	d507      	bpl.n	23a48 <bt_smp_encrypt_change+0x52>
   23a38:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   23a3c:	0718      	lsls	r0, r3, #28
   23a3e:	d503      	bpl.n	23a48 <bt_smp_encrypt_change+0x52>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   23a40:	2110      	movs	r1, #16
   23a42:	4628      	mov	r0, r5
   23a44:	f7ff fd94 	bl	23570 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   23a48:	f8b4 31a0 	ldrh.w	r3, [r4, #416]	; 0x1a0
   23a4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   23a50:	f023 0308 	bic.w	r3, r3, #8
   23a54:	f8a4 31a0 	strh.w	r3, [r4, #416]	; 0x1a0
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   23a58:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   23a5c:	07d9      	lsls	r1, r3, #31
   23a5e:	d519      	bpl.n	23a94 <bt_smp_encrypt_change+0x9e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   23a60:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   23a62:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   23a66:	f7ff fd83 	bl	23570 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   23a6a:	2102      	movs	r1, #2
   23a6c:	4628      	mov	r0, r5
   23a6e:	f7ff fd7f 	bl	23570 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   23a72:	78fb      	ldrb	r3, [r7, #3]
   23a74:	b913      	cbnz	r3, 23a7c <bt_smp_encrypt_change+0x86>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
   23a76:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   23a7a:	b99b      	cbnz	r3, 23aa4 <bt_smp_encrypt_change+0xae>
	if (bt_smp_distribute_keys(smp)) {
   23a7c:	4620      	mov	r0, r4
   23a7e:	f7ea fa1f 	bl	dec0 <bt_smp_distribute_keys>
   23a82:	b978      	cbnz	r0, 23aa4 <bt_smp_encrypt_change+0xae>
	if (!smp->local_dist && !smp->remote_dist) {
   23a84:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
   23a88:	b961      	cbnz	r1, 23aa4 <bt_smp_encrypt_change+0xae>
		smp_pairing_complete(smp, 0);
   23a8a:	4620      	mov	r0, r4
}
   23a8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_pairing_complete(smp, 0);
   23a90:	f7ea be04 	b.w	e69c <smp_pairing_complete>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   23a94:	079a      	lsls	r2, r3, #30
   23a96:	d501      	bpl.n	23a9c <bt_smp_encrypt_change+0xa6>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   23a98:	2108      	movs	r1, #8
   23a9a:	e7e2      	b.n	23a62 <bt_smp_encrypt_change+0x6c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   23a9c:	075b      	lsls	r3, r3, #29
   23a9e:	d5e4      	bpl.n	23a6a <bt_smp_encrypt_change+0x74>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   23aa0:	210a      	movs	r1, #10
   23aa2:	e7de      	b.n	23a62 <bt_smp_encrypt_change+0x6c>
}
   23aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023aa6 <smp_c1>:
{
   23aa6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23aaa:	b089      	sub	sp, #36	; 0x24
   23aac:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   23ab0:	4699      	mov	r9, r3
	p1[0] = ia->type;
   23ab2:	783b      	ldrb	r3, [r7, #0]
{
   23ab4:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   23ab6:	f88d 3000 	strb.w	r3, [sp]
{
   23aba:	460c      	mov	r4, r1
	p1[1] = ra->type;
   23abc:	f898 3000 	ldrb.w	r3, [r8]
   23ac0:	f88d 3001 	strb.w	r3, [sp, #1]
{
   23ac4:	4611      	mov	r1, r2
   23ac6:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   23ac8:	2207      	movs	r2, #7
   23aca:	f10d 0002 	add.w	r0, sp, #2
   23ace:	f7fd fe8a 	bl	217e6 <memcpy>
	memcpy(p1 + 9, pres, 7);
   23ad2:	2207      	movs	r2, #7
   23ad4:	4649      	mov	r1, r9
   23ad6:	f10d 0009 	add.w	r0, sp, #9
   23ada:	f7fd fe84 	bl	217e6 <memcpy>
	while (len--) {
   23ade:	f104 0010 	add.w	r0, r4, #16
   23ae2:	4629      	mov	r1, r5
   23ae4:	466a      	mov	r2, sp
   23ae6:	4284      	cmp	r4, r0
   23ae8:	d127      	bne.n	23b3a <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   23aea:	462a      	mov	r2, r5
   23aec:	4629      	mov	r1, r5
   23aee:	4630      	mov	r0, r6
   23af0:	f7ee ff92 	bl	12a18 <bt_encrypt_le>
	if (err) {
   23af4:	4604      	mov	r4, r0
   23af6:	b9e0      	cbnz	r0, 23b32 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   23af8:	2206      	movs	r2, #6
   23afa:	f108 0101 	add.w	r1, r8, #1
   23afe:	a804      	add	r0, sp, #16
   23b00:	f7fd fe71 	bl	217e6 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   23b04:	2206      	movs	r2, #6
   23b06:	1c79      	adds	r1, r7, #1
   23b08:	f10d 0016 	add.w	r0, sp, #22
   23b0c:	f7fd fe6b 	bl	217e6 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   23b10:	2204      	movs	r2, #4
   23b12:	4621      	mov	r1, r4
   23b14:	a807      	add	r0, sp, #28
   23b16:	f7fd fe91 	bl	2183c <memset>
	while (len--) {
   23b1a:	f105 0010 	add.w	r0, r5, #16
   23b1e:	462a      	mov	r2, r5
   23b20:	ab04      	add	r3, sp, #16
   23b22:	4282      	cmp	r2, r0
   23b24:	d112      	bne.n	23b4c <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   23b26:	462a      	mov	r2, r5
   23b28:	4629      	mov	r1, r5
   23b2a:	4630      	mov	r0, r6
   23b2c:	f7ee ff74 	bl	12a18 <bt_encrypt_le>
   23b30:	4604      	mov	r4, r0
}
   23b32:	4620      	mov	r0, r4
   23b34:	b009      	add	sp, #36	; 0x24
   23b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   23b3a:	f814 3b01 	ldrb.w	r3, [r4], #1
   23b3e:	f812 cb01 	ldrb.w	ip, [r2], #1
   23b42:	ea83 030c 	eor.w	r3, r3, ip
   23b46:	f801 3b01 	strb.w	r3, [r1], #1
   23b4a:	e7cc      	b.n	23ae6 <smp_c1+0x40>
   23b4c:	f812 1b01 	ldrb.w	r1, [r2], #1
   23b50:	f813 4b01 	ldrb.w	r4, [r3], #1
   23b54:	4061      	eors	r1, r4
   23b56:	f802 1c01 	strb.w	r1, [r2, #-1]
   23b5a:	e7e2      	b.n	23b22 <smp_c1+0x7c>

00023b5c <legacy_send_pairing_confirm>:
{
   23b5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   23b5e:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   23b60:	6804      	ldr	r4, [r0, #0]
{
   23b62:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   23b64:	f7ff fd12 	bl	2358c <smp_create_pdu.isra.0>
	if (!buf) {
   23b68:	4606      	mov	r6, r0
   23b6a:	b1c0      	cbz	r0, 23b9e <legacy_send_pairing_confirm+0x42>
	req = net_buf_add(buf, sizeof(*req));
   23b6c:	2110      	movs	r1, #16
   23b6e:	3008      	adds	r0, #8
   23b70:	f000 fa62 	bl	24038 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   23b74:	f104 0396 	add.w	r3, r4, #150	; 0x96
   23b78:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   23b7a:	9002      	str	r0, [sp, #8]
   23b7c:	9301      	str	r3, [sp, #4]
   23b7e:	9400      	str	r4, [sp, #0]
   23b80:	f105 03c8 	add.w	r3, r5, #200	; 0xc8
   23b84:	f105 02c1 	add.w	r2, r5, #193	; 0xc1
   23b88:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   23b8c:	f105 00ff 	add.w	r0, r5, #255	; 0xff
   23b90:	f7ff ff89 	bl	23aa6 <smp_c1>
   23b94:	4604      	mov	r4, r0
   23b96:	b120      	cbz	r0, 23ba2 <legacy_send_pairing_confirm+0x46>
		net_buf_unref(buf);
   23b98:	4630      	mov	r0, r6
   23b9a:	f7f9 fabf 	bl	1d11c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   23b9e:	2008      	movs	r0, #8
   23ba0:	e00a      	b.n	23bb8 <legacy_send_pairing_confirm+0x5c>
	smp_send(smp, buf, NULL, NULL);
   23ba2:	4602      	mov	r2, r0
   23ba4:	4631      	mov	r1, r6
   23ba6:	4628      	mov	r0, r5
   23ba8:	f7ea f8c0 	bl	dd2c <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   23bac:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   23bb0:	4621      	mov	r1, r4
   23bb2:	f7ff fb7f 	bl	232b4 <atomic_clear_bit>
	return 0;
   23bb6:	4620      	mov	r0, r4
}
   23bb8:	b004      	add	sp, #16
   23bba:	bd70      	pop	{r4, r5, r6, pc}

00023bbc <legacy_pairing_confirm>:
{
   23bbc:	b510      	push	{r4, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   23bbe:	6803      	ldr	r3, [r0, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   23bc0:	78db      	ldrb	r3, [r3, #3]
{
   23bc2:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   23bc4:	b94b      	cbnz	r3, 23bda <legacy_pairing_confirm+0x1e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   23bc6:	2103      	movs	r1, #3
			atomic_set_bit(&smp->allowed_cmds,
   23bc8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   23bcc:	f7ff fcd0 	bl	23570 <atomic_set_bit>
			return legacy_send_pairing_confirm(smp);
   23bd0:	4620      	mov	r0, r4
}
   23bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return legacy_send_pairing_confirm(smp);
   23bd6:	f7ff bfc1 	b.w	23b5c <legacy_send_pairing_confirm>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   23bda:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
   23bde:	2109      	movs	r1, #9
   23be0:	4618      	mov	r0, r3
   23be2:	f7ff fc72 	bl	234ca <atomic_test_bit>
   23be6:	b908      	cbnz	r0, 23bec <legacy_pairing_confirm+0x30>
			atomic_set_bit(&smp->allowed_cmds,
   23be8:	2104      	movs	r1, #4
   23bea:	e7ed      	b.n	23bc8 <legacy_pairing_confirm+0xc>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   23bec:	4618      	mov	r0, r3
   23bee:	2100      	movs	r1, #0
   23bf0:	f7ff fcbe 	bl	23570 <atomic_set_bit>
}
   23bf4:	2000      	movs	r0, #0
   23bf6:	bd10      	pop	{r4, pc}

00023bf8 <smp_pairing_confirm>:
{
   23bf8:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   23bfa:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   23bfc:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
{
   23c00:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   23c02:	210a      	movs	r1, #10
   23c04:	4628      	mov	r0, r5
   23c06:	f7ff fb55 	bl	232b4 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   23c0a:	2210      	movs	r2, #16
   23c0c:	4631      	mov	r1, r6
   23c0e:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
   23c12:	f7fd fde8 	bl	217e6 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   23c16:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   23c18:	78db      	ldrb	r3, [r3, #3]
   23c1a:	b94b      	cbnz	r3, 23c30 <smp_pairing_confirm+0x38>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   23c1c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   23c20:	2104      	movs	r1, #4
   23c22:	f7ff fca5 	bl	23570 <atomic_set_bit>
		return smp_send_pairing_random(smp);
   23c26:	4620      	mov	r0, r4
}
   23c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_random(smp);
   23c2c:	f7ff bce7 	b.w	235fe <smp_send_pairing_random>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   23c30:	2105      	movs	r1, #5
   23c32:	4628      	mov	r0, r5
   23c34:	f7ff fc49 	bl	234ca <atomic_test_bit>
   23c38:	b920      	cbnz	r0, 23c44 <smp_pairing_confirm+0x4c>
		return legacy_pairing_confirm(smp);
   23c3a:	4620      	mov	r0, r4
}
   23c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   23c40:	f7ff bfbc 	b.w	23bbc <legacy_pairing_confirm>
	switch (smp->method) {
   23c44:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   23c48:	2b01      	cmp	r3, #1
   23c4a:	d00b      	beq.n	23c64 <smp_pairing_confirm+0x6c>
   23c4c:	2b02      	cmp	r3, #2
   23c4e:	d115      	bne.n	23c7c <smp_pairing_confirm+0x84>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   23c50:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   23c54:	2104      	movs	r1, #4
   23c56:	f7ff fc8b 	bl	23570 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   23c5a:	4620      	mov	r0, r4
}
   23c5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   23c60:	f7ea b8ee 	b.w	de40 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   23c64:	2109      	movs	r1, #9
   23c66:	4628      	mov	r0, r5
   23c68:	f7ff fc2f 	bl	234ca <atomic_test_bit>
   23c6c:	2800      	cmp	r0, #0
   23c6e:	d0ef      	beq.n	23c50 <smp_pairing_confirm+0x58>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   23c70:	4628      	mov	r0, r5
   23c72:	2100      	movs	r1, #0
   23c74:	f7ff fc7c 	bl	23570 <atomic_set_bit>
			return 0;
   23c78:	2000      	movs	r0, #0
}
   23c7a:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   23c7c:	2008      	movs	r0, #8
   23c7e:	e7fc      	b.n	23c7a <smp_pairing_confirm+0x82>

00023c80 <bt_smp_request_ltk>:
{
   23c80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23c84:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   23c86:	e9cd 2300 	strd	r2, r3, [sp]
   23c8a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   23c8c:	f7e9 ff76 	bl	db7c <smp_chan_get>
	if (!smp) {
   23c90:	4605      	mov	r5, r0
   23c92:	2800      	cmp	r0, #0
   23c94:	f000 809d 	beq.w	23dd2 <bt_smp_request_ltk+0x152>
	if (ediv == 0U && rand == 0U &&
   23c98:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   23c9c:	f1b9 0f00 	cmp.w	r9, #0
   23ca0:	d12d      	bne.n	23cfe <bt_smp_request_ltk+0x7e>
   23ca2:	e9dd 2300 	ldrd	r2, r3, [sp]
   23ca6:	4313      	orrs	r3, r2
   23ca8:	d129      	bne.n	23cfe <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   23caa:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
   23cae:	2103      	movs	r1, #3
   23cb0:	4640      	mov	r0, r8
   23cb2:	f7ff fc0a 	bl	234ca <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   23cb6:	b310      	cbz	r0, 23cfe <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   23cb8:	2101      	movs	r1, #1
   23cba:	4640      	mov	r0, r8
   23cbc:	f7ff fc05 	bl	234ca <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   23cc0:	4606      	mov	r6, r0
   23cc2:	b1e0      	cbz	r0, 23cfe <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   23cc4:	f895 40cc 	ldrb.w	r4, [r5, #204]	; 0xcc
   23cc8:	f895 30c5 	ldrb.w	r3, [r5, #197]	; 0xc5
   23ccc:	429c      	cmp	r4, r3
   23cce:	bf28      	it	cs
   23cd0:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   23cd2:	4622      	mov	r2, r4
   23cd4:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   23cd8:	4638      	mov	r0, r7
   23cda:	f7fd fd84 	bl	217e6 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   23cde:	2c0f      	cmp	r4, #15
   23ce0:	d805      	bhi.n	23cee <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   23ce2:	f1c4 0210 	rsb	r2, r4, #16
   23ce6:	4649      	mov	r1, r9
   23ce8:	1938      	adds	r0, r7, r4
   23cea:	f7fd fda7 	bl	2183c <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   23cee:	2101      	movs	r1, #1
   23cf0:	4640      	mov	r0, r8
   23cf2:	f7ff fc3d 	bl	23570 <atomic_set_bit>
}
   23cf6:	4630      	mov	r0, r6
   23cf8:	b003      	add	sp, #12
   23cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   23cfe:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   23d02:	b983      	cbnz	r3, 23d26 <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   23d04:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   23d08:	7a21      	ldrb	r1, [r4, #8]
   23d0a:	4632      	mov	r2, r6
   23d0c:	2020      	movs	r0, #32
   23d0e:	f7eb fbab 	bl	f468 <bt_keys_find>
   23d12:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   23d16:	b930      	cbnz	r0, 23d26 <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   23d18:	7a21      	ldrb	r1, [r4, #8]
   23d1a:	4632      	mov	r2, r6
   23d1c:	2001      	movs	r0, #1
   23d1e:	f7eb fba3 	bl	f468 <bt_keys_find>
   23d22:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   23d26:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   23d2a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   23d2e:	b9ce      	cbnz	r6, 23d64 <bt_smp_request_ltk+0xe4>
   23d30:	e9dd 2300 	ldrd	r2, r3, [sp]
   23d34:	4313      	orrs	r3, r2
   23d36:	d115      	bne.n	23d64 <bt_smp_request_ltk+0xe4>
   23d38:	2800      	cmp	r0, #0
   23d3a:	d03c      	beq.n	23db6 <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   23d3c:	89c3      	ldrh	r3, [r0, #14]
   23d3e:	069a      	lsls	r2, r3, #26
   23d40:	d511      	bpl.n	23d66 <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   23d42:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   23d44:	f100 011a 	add.w	r1, r0, #26
   23d48:	4622      	mov	r2, r4
   23d4a:	4638      	mov	r0, r7
   23d4c:	f7fd fd4b 	bl	217e6 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   23d50:	2c0f      	cmp	r4, #15
   23d52:	d805      	bhi.n	23d60 <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   23d54:	f1c4 0210 	rsb	r2, r4, #16
   23d58:	4631      	mov	r1, r6
   23d5a:	1938      	adds	r0, r7, r4
   23d5c:	f7fd fd6e 	bl	2183c <memset>
		return true;
   23d60:	2601      	movs	r6, #1
   23d62:	e7c8      	b.n	23cf6 <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   23d64:	b338      	cbz	r0, 23db6 <bt_smp_request_ltk+0x136>
   23d66:	89c3      	ldrh	r3, [r0, #14]
   23d68:	07db      	lsls	r3, r3, #31
   23d6a:	d524      	bpl.n	23db6 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   23d6c:	2208      	movs	r2, #8
   23d6e:	4669      	mov	r1, sp
   23d70:	3040      	adds	r0, #64	; 0x40
   23d72:	f7fd fd28 	bl	217c6 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   23d76:	b9f0      	cbnz	r0, 23db6 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   23d78:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   23d7c:	2202      	movs	r2, #2
   23d7e:	a90a      	add	r1, sp, #40	; 0x28
   23d80:	3048      	adds	r0, #72	; 0x48
   23d82:	f7fd fd20 	bl	217c6 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   23d86:	4606      	mov	r6, r0
   23d88:	b9a8      	cbnz	r0, 23db6 <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   23d8a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   23d8e:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   23d90:	4638      	mov	r0, r7
   23d92:	4622      	mov	r2, r4
   23d94:	314a      	adds	r1, #74	; 0x4a
   23d96:	f7fd fd26 	bl	217e6 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   23d9a:	2c0f      	cmp	r4, #15
   23d9c:	d805      	bhi.n	23daa <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   23d9e:	f1c4 0210 	rsb	r2, r4, #16
   23da2:	4631      	mov	r1, r6
   23da4:	1938      	adds	r0, r7, r4
   23da6:	f7fd fd49 	bl	2183c <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   23daa:	2101      	movs	r1, #1
   23dac:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   23db0:	f7ff fbde 	bl	23570 <atomic_set_bit>
		return true;
   23db4:	e7d4      	b.n	23d60 <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   23db6:	210e      	movs	r1, #14
   23db8:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   23dbc:	f7ff fb85 	bl	234ca <atomic_test_bit>
   23dc0:	b120      	cbz	r0, 23dcc <bt_smp_request_ltk+0x14c>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   23dc2:	2202      	movs	r2, #2
   23dc4:	2106      	movs	r1, #6
   23dc6:	4620      	mov	r0, r4
   23dc8:	f7e6 f83c 	bl	9e44 <bt_conn_security_changed>
	smp_reset(smp);
   23dcc:	4628      	mov	r0, r5
   23dce:	f7ff fdb0 	bl	23932 <smp_reset>
	return false;
   23dd2:	2600      	movs	r6, #0
   23dd4:	e78f      	b.n	23cf6 <bt_smp_request_ltk+0x76>

00023dd6 <bt_smp_sign>:
   23dd6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   23dda:	4770      	bx	lr

00023ddc <bt_smp_start_security>:
{
   23ddc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   23de0:	78c4      	ldrb	r4, [r0, #3]
{
   23de2:	4605      	mov	r5, r0
	switch (conn->role) {
   23de4:	b124      	cbz	r4, 23df0 <bt_smp_start_security+0x14>
   23de6:	2c01      	cmp	r4, #1
   23de8:	d045      	beq.n	23e76 <bt_smp_start_security+0x9a>
		return -EINVAL;
   23dea:	f06f 0415 	mvn.w	r4, #21
   23dee:	e005      	b.n	23dfc <bt_smp_start_security+0x20>
		smp = smp_chan_get(conn);
   23df0:	f7e9 fec4 	bl	db7c <smp_chan_get>
		if (!smp) {
   23df4:	4606      	mov	r6, r0
   23df6:	b928      	cbnz	r0, 23e04 <bt_smp_start_security+0x28>
			return -ENOTCONN;
   23df8:	f06f 0438 	mvn.w	r4, #56	; 0x38
}
   23dfc:	4620      	mov	r0, r4
   23dfe:	b003      	add	sp, #12
   23e00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   23e04:	210b      	movs	r1, #11
   23e06:	1d28      	adds	r0, r5, #4
   23e08:	f7ff fb5f 	bl	234ca <atomic_test_bit>
   23e0c:	b128      	cbz	r0, 23e1a <bt_smp_start_security+0x3e>
			return smp_send_pairing_req(conn);
   23e0e:	4628      	mov	r0, r5
}
   23e10:	b003      	add	sp, #12
   23e12:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return smp_send_pairing_req(conn);
   23e16:	f7ea b943 	b.w	e0a0 <smp_send_pairing_req>
   23e1a:	4628      	mov	r0, r5
   23e1c:	f7ff faae 	bl	2337c <smp_keys_check.part.0>
		if (!smp_keys_check(conn)) {
   23e20:	2800      	cmp	r0, #0
   23e22:	d0f4      	beq.n	23e0e <bt_smp_start_security+0x32>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   23e24:	f106 07bc 	add.w	r7, r6, #188	; 0xbc
   23e28:	2103      	movs	r1, #3
   23e2a:	4638      	mov	r0, r7
   23e2c:	f7ff fb4d 	bl	234ca <atomic_test_bit>
   23e30:	b110      	cbz	r0, 23e38 <bt_smp_start_security+0x5c>
			return -EBUSY;
   23e32:	f06f 040f 	mvn.w	r4, #15
   23e36:	e7e1      	b.n	23dfc <bt_smp_start_security+0x20>
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   23e38:	2101      	movs	r1, #1
   23e3a:	4638      	mov	r0, r7
   23e3c:	f7ff fb45 	bl	234ca <atomic_test_bit>
   23e40:	2800      	cmp	r0, #0
   23e42:	d1f6      	bne.n	23e32 <bt_smp_start_security+0x56>
						  conn->le.keys->ltk.rand,
   23e44:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
		err = bt_conn_le_start_encryption(conn,
   23e48:	7b0b      	ldrb	r3, [r1, #12]
   23e4a:	9300      	str	r3, [sp, #0]
   23e4c:	f101 0218 	add.w	r2, r1, #24
   23e50:	f101 031a 	add.w	r3, r1, #26
   23e54:	4628      	mov	r0, r5
   23e56:	3110      	adds	r1, #16
   23e58:	f7fe f844 	bl	21ee4 <bt_conn_le_start_encryption>
		if (err) {
   23e5c:	4604      	mov	r4, r0
   23e5e:	2800      	cmp	r0, #0
   23e60:	d1cc      	bne.n	23dfc <bt_smp_start_security+0x20>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   23e62:	210b      	movs	r1, #11
   23e64:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
   23e68:	f7ff fb82 	bl	23570 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   23e6c:	2101      	movs	r1, #1
   23e6e:	4638      	mov	r0, r7
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   23e70:	f7ff fb7e 	bl	23570 <atomic_set_bit>
	return 0;
   23e74:	e7c2      	b.n	23dfc <bt_smp_start_security+0x20>
	smp = smp_chan_get(conn);
   23e76:	f7e9 fe81 	bl	db7c <smp_chan_get>
	if (!smp) {
   23e7a:	4606      	mov	r6, r0
   23e7c:	2800      	cmp	r0, #0
   23e7e:	d0bb      	beq.n	23df8 <bt_smp_start_security+0x1c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   23e80:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
   23e84:	2104      	movs	r1, #4
   23e86:	4640      	mov	r0, r8
   23e88:	f7ff fb1f 	bl	234ca <atomic_test_bit>
   23e8c:	2800      	cmp	r0, #0
   23e8e:	d151      	bne.n	23f34 <bt_smp_start_security+0x158>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   23e90:	2103      	movs	r1, #3
   23e92:	4640      	mov	r0, r8
   23e94:	f7ff fb19 	bl	234ca <atomic_test_bit>
   23e98:	2800      	cmp	r0, #0
   23e9a:	d1ca      	bne.n	23e32 <bt_smp_start_security+0x56>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   23e9c:	4621      	mov	r1, r4
   23e9e:	4640      	mov	r0, r8
   23ea0:	f7ff fb13 	bl	234ca <atomic_test_bit>
   23ea4:	2800      	cmp	r0, #0
   23ea6:	d1c4      	bne.n	23e32 <bt_smp_start_security+0x56>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   23ea8:	7aa8      	ldrb	r0, [r5, #10]
   23eaa:	f7e9 fe37 	bl	db1c <sec_level_reachable.isra.0>
   23eae:	b168      	cbz	r0, 23ecc <bt_smp_start_security+0xf0>
	if (!conn->le.keys) {
   23eb0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   23eb4:	b9b3      	cbnz	r3, 23ee4 <bt_smp_start_security+0x108>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   23eb6:	7a28      	ldrb	r0, [r5, #8]
   23eb8:	f105 0188 	add.w	r1, r5, #136	; 0x88
   23ebc:	f7eb fa9e 	bl	f3fc <bt_keys_get_addr>
   23ec0:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   23ec4:	b970      	cbnz	r0, 23ee4 <bt_smp_start_security+0x108>
			return -ENOMEM;
   23ec6:	f06f 040b 	mvn.w	r4, #11
   23eca:	e797      	b.n	23dfc <bt_smp_start_security+0x20>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   23ecc:	210b      	movs	r1, #11
   23ece:	1d28      	adds	r0, r5, #4
   23ed0:	f7ff fafb 	bl	234ca <atomic_test_bit>
   23ed4:	2800      	cmp	r0, #0
   23ed6:	d188      	bne.n	23dea <bt_smp_start_security+0xe>
   23ed8:	4628      	mov	r0, r5
   23eda:	f7ff fa4f 	bl	2337c <smp_keys_check.part.0>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   23ede:	2800      	cmp	r0, #0
   23ee0:	d1e6      	bne.n	23eb0 <bt_smp_start_security+0xd4>
   23ee2:	e782      	b.n	23dea <bt_smp_start_security+0xe>
	if (smp_init(smp) != 0) {
   23ee4:	4630      	mov	r0, r6
   23ee6:	f7ea f8bd 	bl	e064 <smp_init>
   23eea:	4604      	mov	r4, r0
   23eec:	b110      	cbz	r0, 23ef4 <bt_smp_start_security+0x118>
		return -ENOBUFS;
   23eee:	f06f 0436 	mvn.w	r4, #54	; 0x36
   23ef2:	e783      	b.n	23dfc <bt_smp_start_security+0x20>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   23ef4:	210b      	movs	r1, #11
   23ef6:	4630      	mov	r0, r6
   23ef8:	f7ff fb48 	bl	2358c <smp_create_pdu.isra.0>
	if (!req_buf) {
   23efc:	4607      	mov	r7, r0
   23efe:	2800      	cmp	r0, #0
   23f00:	d0f5      	beq.n	23eee <bt_smp_start_security+0x112>
	req = net_buf_add(req_buf, sizeof(*req));
   23f02:	2101      	movs	r1, #1
   23f04:	3008      	adds	r0, #8
   23f06:	f000 f897 	bl	24038 <net_buf_simple_add>
   23f0a:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   23f0c:	2009      	movs	r0, #9
   23f0e:	f7e9 fde7 	bl	dae0 <get_auth.isra.0>
   23f12:	4623      	mov	r3, r4
   23f14:	f889 0000 	strb.w	r0, [r9]
   23f18:	463a      	mov	r2, r7
   23f1a:	2106      	movs	r1, #6
   23f1c:	9400      	str	r4, [sp, #0]
   23f1e:	4628      	mov	r0, r5
   23f20:	f7fe f961 	bl	221e6 <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   23f24:	210e      	movs	r1, #14
   23f26:	4640      	mov	r0, r8
   23f28:	f7ff fb22 	bl	23570 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   23f2c:	2101      	movs	r1, #1
   23f2e:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
   23f32:	e79d      	b.n	23e70 <bt_smp_start_security+0x94>
		return -EIO;
   23f34:	f06f 0404 	mvn.w	r4, #4
   23f38:	e760      	b.n	23dfc <bt_smp_start_security+0x20>

00023f3a <bt_keys_get_type>:
{
   23f3a:	b570      	push	{r4, r5, r6, lr}
   23f3c:	4604      	mov	r4, r0
   23f3e:	460d      	mov	r5, r1
   23f40:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   23f42:	f7eb fa91 	bl	f468 <bt_keys_find>
	if (keys) {
   23f46:	b938      	cbnz	r0, 23f58 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   23f48:	4631      	mov	r1, r6
   23f4a:	4628      	mov	r0, r5
   23f4c:	f7eb fa56 	bl	f3fc <bt_keys_get_addr>
	if (!keys) {
   23f50:	b110      	cbz	r0, 23f58 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   23f52:	89c3      	ldrh	r3, [r0, #14]
   23f54:	431c      	orrs	r4, r3
   23f56:	81c4      	strh	r4, [r0, #14]
}
   23f58:	bd70      	pop	{r4, r5, r6, pc}

00023f5a <bt_keys_add_type>:
	keys->keys |= type;
   23f5a:	89c3      	ldrh	r3, [r0, #14]
   23f5c:	4319      	orrs	r1, r3
   23f5e:	81c1      	strh	r1, [r0, #14]
}
   23f60:	4770      	bx	lr

00023f62 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   23f62:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   23f64:	7a03      	ldrb	r3, [r0, #8]
   23f66:	075b      	lsls	r3, r3, #29
{
   23f68:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   23f6a:	d501      	bpl.n	23f70 <bt_keys_clear+0xe>
		bt_id_del(keys);
   23f6c:	f7e4 fdc4 	bl	8af8 <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   23f70:	4620      	mov	r0, r4
   23f72:	225c      	movs	r2, #92	; 0x5c
}
   23f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   23f78:	2100      	movs	r1, #0
   23f7a:	f7fd bc5f 	b.w	2183c <memset>

00023f7e <fixed_data_unref>:
}
   23f7e:	4770      	bx	lr

00023f80 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   23f80:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   23f82:	6849      	ldr	r1, [r1, #4]
   23f84:	6809      	ldr	r1, [r1, #0]
   23f86:	f7f9 b83d 	b.w	1d004 <net_buf_alloc_len>

00023f8a <net_buf_get>:
{
   23f8a:	b570      	push	{r4, r5, r6, lr}
   23f8c:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   23f8e:	f7fa fb3f 	bl	1e610 <z_impl_k_queue_get>
	if (!buf) {
   23f92:	4605      	mov	r5, r0
   23f94:	b128      	cbz	r0, 23fa2 <net_buf_get+0x18>
   23f96:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   23f98:	7963      	ldrb	r3, [r4, #5]
   23f9a:	f013 0301 	ands.w	r3, r3, #1
   23f9e:	d102      	bne.n	23fa6 <net_buf_get+0x1c>
	frag->frags = NULL;
   23fa0:	6023      	str	r3, [r4, #0]
}
   23fa2:	4628      	mov	r0, r5
   23fa4:	bd70      	pop	{r4, r5, r6, pc}
   23fa6:	2300      	movs	r3, #0
   23fa8:	2200      	movs	r2, #0
   23faa:	4630      	mov	r0, r6
   23fac:	f7fa fb30 	bl	1e610 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   23fb0:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   23fb2:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   23fb4:	f023 0301 	bic.w	r3, r3, #1
   23fb8:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   23fba:	4604      	mov	r4, r0
   23fbc:	e7ec      	b.n	23f98 <net_buf_get+0xe>

00023fbe <net_buf_simple_init_with_data>:
	buf->size  = size;
   23fbe:	b292      	uxth	r2, r2
	buf->__buf = data;
   23fc0:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   23fc2:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   23fc4:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   23fc6:	8082      	strh	r2, [r0, #4]
}
   23fc8:	4770      	bx	lr

00023fca <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   23fca:	6883      	ldr	r3, [r0, #8]
   23fcc:	440b      	add	r3, r1
   23fce:	6003      	str	r3, [r0, #0]
}
   23fd0:	4770      	bx	lr

00023fd2 <net_buf_put>:
{
   23fd2:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   23fd4:	460a      	mov	r2, r1
   23fd6:	6814      	ldr	r4, [r2, #0]
   23fd8:	b914      	cbnz	r4, 23fe0 <net_buf_put+0xe>
}
   23fda:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   23fdc:	f000 baff 	b.w	245de <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   23fe0:	7953      	ldrb	r3, [r2, #5]
   23fe2:	f043 0301 	orr.w	r3, r3, #1
   23fe6:	7153      	strb	r3, [r2, #5]
   23fe8:	4622      	mov	r2, r4
   23fea:	e7f4      	b.n	23fd6 <net_buf_put+0x4>

00023fec <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   23fec:	7902      	ldrb	r2, [r0, #4]
   23fee:	3201      	adds	r2, #1
   23ff0:	7102      	strb	r2, [r0, #4]
	return buf;
}
   23ff2:	4770      	bx	lr

00023ff4 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   23ff4:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   23ff6:	4618      	mov	r0, r3
   23ff8:	681b      	ldr	r3, [r3, #0]
   23ffa:	2b00      	cmp	r3, #0
   23ffc:	d1fb      	bne.n	23ff6 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   23ffe:	4770      	bx	lr

00024000 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   24000:	6802      	ldr	r2, [r0, #0]
{
   24002:	b510      	push	{r4, lr}
	if (parent->frags) {
   24004:	b12a      	cbz	r2, 24012 <net_buf_frag_insert+0x12>
   24006:	460b      	mov	r3, r1
	while (buf->frags) {
   24008:	461c      	mov	r4, r3
   2400a:	681b      	ldr	r3, [r3, #0]
   2400c:	2b00      	cmp	r3, #0
   2400e:	d1fb      	bne.n	24008 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   24010:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   24012:	6001      	str	r1, [r0, #0]
}
   24014:	bd10      	pop	{r4, pc}

00024016 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   24016:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   24018:	4604      	mov	r4, r0
   2401a:	b920      	cbnz	r0, 24026 <net_buf_frag_add+0x10>
	buf->ref++;
   2401c:	790b      	ldrb	r3, [r1, #4]
   2401e:	3301      	adds	r3, #1
   24020:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   24022:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   24024:	bd10      	pop	{r4, pc}
   24026:	4603      	mov	r3, r0
	while (buf->frags) {
   24028:	4618      	mov	r0, r3
   2402a:	681b      	ldr	r3, [r3, #0]
   2402c:	2b00      	cmp	r3, #0
   2402e:	d1fb      	bne.n	24028 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   24030:	f7ff ffe6 	bl	24000 <net_buf_frag_insert>
   24034:	4620      	mov	r0, r4
   24036:	e7f5      	b.n	24024 <net_buf_frag_add+0xe>

00024038 <net_buf_simple_add>:
	return buf->data + buf->len;
   24038:	8883      	ldrh	r3, [r0, #4]
   2403a:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2403c:	4419      	add	r1, r3
   2403e:	8081      	strh	r1, [r0, #4]
	return tail;
}
   24040:	18d0      	adds	r0, r2, r3
   24042:	4770      	bx	lr

00024044 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   24044:	b430      	push	{r4, r5}
   24046:	8884      	ldrh	r4, [r0, #4]
   24048:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2404a:	18a3      	adds	r3, r4, r2
   2404c:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2404e:	1928      	adds	r0, r5, r4
}
   24050:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   24052:	f7fd bbc8 	b.w	217e6 <memcpy>

00024056 <net_buf_simple_add_u8>:
   24056:	8883      	ldrh	r3, [r0, #4]
   24058:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2405a:	b510      	push	{r4, lr}
	buf->len += len;
   2405c:	1c5c      	adds	r4, r3, #1
   2405e:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   24060:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   24062:	18d0      	adds	r0, r2, r3
   24064:	bd10      	pop	{r4, pc}

00024066 <net_buf_simple_add_le16>:
   24066:	8883      	ldrh	r3, [r0, #4]
   24068:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   2406a:	b530      	push	{r4, r5, lr}
   2406c:	18d4      	adds	r4, r2, r3
	buf->len += len;
   2406e:	1c9d      	adds	r5, r3, #2
   24070:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   24072:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   24074:	0a09      	lsrs	r1, r1, #8
   24076:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   24078:	bd30      	pop	{r4, r5, pc}

0002407a <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2407a:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2407c:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2407e:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   24080:	1a40      	subs	r0, r0, r1
	buf->len += len;
   24082:	4411      	add	r1, r2
	buf->data -= len;
   24084:	6018      	str	r0, [r3, #0]
	buf->len += len;
   24086:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   24088:	4770      	bx	lr

0002408a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2408a:	8882      	ldrh	r2, [r0, #4]
   2408c:	1a52      	subs	r2, r2, r1
{
   2408e:	4603      	mov	r3, r0
	buf->len -= len;
   24090:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   24092:	6800      	ldr	r0, [r0, #0]
   24094:	4408      	add	r0, r1
   24096:	6018      	str	r0, [r3, #0]
}
   24098:	4770      	bx	lr

0002409a <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2409a:	4603      	mov	r3, r0
	void *data = buf->data;
   2409c:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2409e:	889a      	ldrh	r2, [r3, #4]
   240a0:	1a52      	subs	r2, r2, r1
	buf->data += len;
   240a2:	4401      	add	r1, r0
	buf->len -= len;
   240a4:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   240a6:	6019      	str	r1, [r3, #0]

	return data;
}
   240a8:	4770      	bx	lr

000240aa <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   240aa:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   240ac:	6803      	ldr	r3, [r0, #0]
   240ae:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   240b0:	2101      	movs	r1, #1
   240b2:	f7ff ffea 	bl	2408a <net_buf_simple_pull>

	return val;
}
   240b6:	4620      	mov	r0, r4
   240b8:	bd10      	pop	{r4, pc}

000240ba <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   240ba:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   240bc:	6803      	ldr	r3, [r0, #0]
   240be:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   240c0:	2102      	movs	r1, #2
   240c2:	f7ff ffe2 	bl	2408a <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   240c6:	4620      	mov	r0, r4
   240c8:	bd10      	pop	{r4, pc}

000240ca <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   240ca:	6802      	ldr	r2, [r0, #0]
   240cc:	6880      	ldr	r0, [r0, #8]
}
   240ce:	1a10      	subs	r0, r2, r0
   240d0:	4770      	bx	lr

000240d2 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   240d2:	8883      	ldrh	r3, [r0, #4]
   240d4:	88c2      	ldrh	r2, [r0, #6]
   240d6:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   240d8:	6803      	ldr	r3, [r0, #0]
   240da:	6880      	ldr	r0, [r0, #8]
   240dc:	1a18      	subs	r0, r3, r0
}
   240de:	1a10      	subs	r0, r2, r0
   240e0:	4770      	bx	lr

000240e2 <net_buf_append_bytes>:
{
   240e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   240e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   240e8:	4681      	mov	r9, r0
   240ea:	460f      	mov	r7, r1
   240ec:	4690      	mov	r8, r2
	while (buf->frags) {
   240ee:	4606      	mov	r6, r0
   240f0:	4631      	mov	r1, r6
   240f2:	6836      	ldr	r6, [r6, #0]
   240f4:	2e00      	cmp	r6, #0
   240f6:	d1fb      	bne.n	240f0 <net_buf_append_bytes+0xe>
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   240f8:	f101 0a08 	add.w	sl, r1, #8
   240fc:	4650      	mov	r0, sl
   240fe:	f7ff ffe8 	bl	240d2 <net_buf_simple_tailroom>
   24102:	42b8      	cmp	r0, r7
   24104:	bf94      	ite	ls
   24106:	b284      	uxthls	r4, r0
   24108:	b2bc      	uxthhi	r4, r7
		net_buf_add_mem(frag, value8, count);
   2410a:	4641      	mov	r1, r8
   2410c:	4622      	mov	r2, r4
   2410e:	4650      	mov	r0, sl
   24110:	f7ff ff98 	bl	24044 <net_buf_simple_add_mem>
		if (len == 0) {
   24114:	1b3f      	subs	r7, r7, r4
		added_len += count;
   24116:	4426      	add	r6, r4
		value8 += count;
   24118:	44a0      	add	r8, r4
		if (len == 0) {
   2411a:	d009      	beq.n	24130 <net_buf_append_bytes+0x4e>
		frag = allocate_cb(timeout, user_data);
   2411c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   24120:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   24122:	47a8      	blx	r5
		if (!frag) {
   24124:	4601      	mov	r1, r0
   24126:	b118      	cbz	r0, 24130 <net_buf_append_bytes+0x4e>
		net_buf_frag_add(buf, frag);
   24128:	4648      	mov	r0, r9
   2412a:	f7ff ff74 	bl	24016 <net_buf_frag_add>
	do {
   2412e:	e7e3      	b.n	240f8 <net_buf_append_bytes+0x16>
}
   24130:	4630      	mov	r0, r6
   24132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00024136 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   24136:	b570      	push	{r4, r5, r6, lr}
   24138:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2413a:	6801      	ldr	r1, [r0, #0]
{
   2413c:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2413e:	b189      	cbz	r1, 24164 <gpio_fire_callbacks+0x2e>
	return node->next;
   24140:	680c      	ldr	r4, [r1, #0]
   24142:	2c00      	cmp	r4, #0
   24144:	bf38      	it	cc
   24146:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   24148:	688a      	ldr	r2, [r1, #8]
   2414a:	402a      	ands	r2, r5
   2414c:	d002      	beq.n	24154 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2414e:	684b      	ldr	r3, [r1, #4]
   24150:	4630      	mov	r0, r6
   24152:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   24154:	b134      	cbz	r4, 24164 <gpio_fire_callbacks+0x2e>
   24156:	6823      	ldr	r3, [r4, #0]
   24158:	2b00      	cmp	r3, #0
   2415a:	bf38      	it	cc
   2415c:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2415e:	4621      	mov	r1, r4
   24160:	461c      	mov	r4, r3
   24162:	e7f1      	b.n	24148 <gpio_fire_callbacks+0x12>
		}
	}
}
   24164:	bd70      	pop	{r4, r5, r6, pc}

00024166 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24166:	6843      	ldr	r3, [r0, #4]
   24168:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2416a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2416e:	600b      	str	r3, [r1, #0]
}
   24170:	2000      	movs	r0, #0
   24172:	4770      	bx	lr

00024174 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24174:	6843      	ldr	r3, [r0, #4]
   24176:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   24178:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2417c:	4042      	eors	r2, r0
   2417e:	400a      	ands	r2, r1
   24180:	4042      	eors	r2, r0
    p_reg->OUT = value;
   24182:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   24186:	2000      	movs	r0, #0
   24188:	4770      	bx	lr

0002418a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2418a:	6843      	ldr	r3, [r0, #4]
   2418c:	685b      	ldr	r3, [r3, #4]
}
   2418e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   24190:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   24194:	4770      	bx	lr

00024196 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24196:	6843      	ldr	r3, [r0, #4]
   24198:	685b      	ldr	r3, [r3, #4]
}
   2419a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2419c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   241a0:	4770      	bx	lr

000241a2 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   241a2:	6843      	ldr	r3, [r0, #4]
   241a4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   241a6:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   241aa:	404b      	eors	r3, r1
    p_reg->OUT = value;
   241ac:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   241b0:	2000      	movs	r0, #0
   241b2:	4770      	bx	lr

000241b4 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   241b4:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   241b6:	6858      	ldr	r0, [r3, #4]
{
   241b8:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   241ba:	b158      	cbz	r0, 241d4 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   241bc:	2400      	movs	r4, #0
   241be:	4281      	cmp	r1, r0
   241c0:	d113      	bne.n	241ea <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   241c2:	6808      	ldr	r0, [r1, #0]
   241c4:	b95c      	cbnz	r4, 241de <gpio_nrfx_manage_callback+0x2a>
   241c6:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   241c8:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   241ca:	42a1      	cmp	r1, r4
   241cc:	d100      	bne.n	241d0 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   241ce:	6098      	str	r0, [r3, #8]
	parent->next = child;
   241d0:	2000      	movs	r0, #0
   241d2:	6008      	str	r0, [r1, #0]
	if (set) {
   241d4:	b972      	cbnz	r2, 241f4 <gpio_nrfx_manage_callback+0x40>
	return 0;
   241d6:	2000      	movs	r0, #0
}
   241d8:	bd30      	pop	{r4, r5, pc}
   241da:	4628      	mov	r0, r5
   241dc:	e7ef      	b.n	241be <gpio_nrfx_manage_callback+0xa>
   241de:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   241e0:	6898      	ldr	r0, [r3, #8]
   241e2:	4281      	cmp	r1, r0
	list->tail = node;
   241e4:	bf08      	it	eq
   241e6:	609c      	streq	r4, [r3, #8]
}
   241e8:	e7f2      	b.n	241d0 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   241ea:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   241ec:	4604      	mov	r4, r0
   241ee:	2d00      	cmp	r5, #0
   241f0:	d1f3      	bne.n	241da <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   241f2:	b13a      	cbz	r2, 24204 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   241f4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   241f6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   241f8:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   241fa:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   241fc:	2800      	cmp	r0, #0
   241fe:	d1ea      	bne.n	241d6 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   24200:	6099      	str	r1, [r3, #8]
}
   24202:	e7e9      	b.n	241d8 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   24204:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   24208:	e7e6      	b.n	241d8 <gpio_nrfx_manage_callback+0x24>

0002420a <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
   2420a:	68c3      	ldr	r3, [r0, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   2420c:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
{
   24210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t out = data->pin_int_en;
   24214:	68dc      	ldr	r4, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   24216:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   2421a:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   2421c:	430a      	orrs	r2, r1
   2421e:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   24222:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return p_reg->IN;
   24226:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   2422a:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   2422c:	ea24 0505 	bic.w	r5, r4, r5
	uint32_t bit = 1U << pin;
   24230:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   24232:	2700      	movs	r7, #0
	while (level_pins) {
   24234:	b914      	cbnz	r4, 2423c <check_level_trigger_pins+0x32>
}
   24236:	4628      	mov	r0, r5
   24238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   2423c:	4234      	tst	r4, r6
   2423e:	d00a      	beq.n	24256 <check_level_trigger_pins+0x4c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   24240:	f898 3008 	ldrb.w	r3, [r8, #8]
   24244:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   24248:	2100      	movs	r1, #0
   2424a:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   2424e:	f7f9 f811 	bl	1d274 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   24252:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   24256:	3701      	adds	r7, #1
		bit <<= 1;
   24258:	0076      	lsls	r6, r6, #1
   2425a:	e7eb      	b.n	24234 <check_level_trigger_pins+0x2a>

0002425c <cfg_level_pins>:
{
   2425c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   24260:	68c7      	ldr	r7, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   24262:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   24266:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   24268:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   2426c:	4313      	orrs	r3, r2
   2426e:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   24272:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   24274:	2500      	movs	r5, #0
	while (level_pins) {
   24276:	b90c      	cbnz	r4, 2427c <cfg_level_pins+0x20>
}
   24278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   2427c:	4226      	tst	r6, r4
   2427e:	d010      	beq.n	242a2 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   24280:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   24282:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   24286:	40e9      	lsrs	r1, r5
   24288:	f001 0101 	and.w	r1, r1, #1
   2428c:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   24290:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   24294:	b2c9      	uxtb	r1, r1
   24296:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   2429a:	f7f8 ffeb 	bl	1d274 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2429e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   242a2:	3501      	adds	r5, #1
		bit <<= 1;
   242a4:	0076      	lsls	r6, r6, #1
   242a6:	e7e6      	b.n	24276 <cfg_level_pins+0x1a>

000242a8 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   242a8:	6843      	ldr	r3, [r0, #4]
   242aa:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   242ac:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   242b0:	05d2      	lsls	r2, r2, #23
   242b2:	d518      	bpl.n	242e6 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   242b4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   242b8:	b1aa      	cbz	r2, 242e6 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   242ba:	f04f 0120 	mov.w	r1, #32
   242be:	f3ef 8211 	mrs	r2, BASEPRI
   242c2:	f381 8811 	msr	BASEPRI, r1
   242c6:	f3bf 8f6f 	isb	sy
   242ca:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   242ce:	b131      	cbz	r1, 242de <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   242d0:	2100      	movs	r1, #0
   242d2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   242d6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   242da:	2101      	movs	r1, #1
   242dc:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   242de:	f382 8811 	msr	BASEPRI, r2
   242e2:	f3bf 8f6f 	isb	sy
}
   242e6:	4770      	bx	lr

000242e8 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   242e8:	68c2      	ldr	r2, [r0, #12]
{
   242ea:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   242ec:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   242f0:	e883 0003 	stmia.w	r3, {r0, r1}
}
   242f4:	2000      	movs	r0, #0
   242f6:	4770      	bx	lr

000242f8 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   242f8:	6843      	ldr	r3, [r0, #4]
   242fa:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   242fc:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   24300:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   24304:	4770      	bx	lr

00024306 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   24306:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   24308:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2430a:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2430e:	b938      	cbnz	r0, 24320 <is_tx_ready+0x1a>
   24310:	7992      	ldrb	r2, [r2, #6]
   24312:	b932      	cbnz	r2, 24322 <is_tx_ready+0x1c>
   24314:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   24318:	3800      	subs	r0, #0
   2431a:	bf18      	it	ne
   2431c:	2001      	movne	r0, #1
   2431e:	4770      	bx	lr
   24320:	2001      	movs	r0, #1
}
   24322:	4770      	bx	lr

00024324 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   24324:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   24326:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   24328:	681b      	ldr	r3, [r3, #0]
   2432a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2432e:	b148      	cbz	r0, 24344 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   24330:	7b52      	ldrb	r2, [r2, #13]
   24332:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24334:	2000      	movs	r0, #0
   24336:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2433a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2433e:	2201      	movs	r2, #1
   24340:	601a      	str	r2, [r3, #0]
	return 0;
   24342:	4770      	bx	lr
		return -1;
   24344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   24348:	4770      	bx	lr

0002434a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2434a:	4700      	bx	r0

0002434c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2434c:	f000 ba94 	b.w	24878 <z_impl_k_busy_wait>

00024350 <nrfx_clock_enable>:
{
   24350:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   24352:	2000      	movs	r0, #0
   24354:	f7e2 fa22 	bl	679c <arch_irq_is_enabled>
   24358:	b918      	cbnz	r0, 24362 <nrfx_clock_enable+0x12>
}
   2435a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2435e:	f7e2 b9f9 	b.w	6754 <arch_irq_enable>
   24362:	bd08      	pop	{r3, pc}

00024364 <arch_system_halt>:
	__asm__ volatile(
   24364:	f04f 0220 	mov.w	r2, #32
   24368:	f3ef 8311 	mrs	r3, BASEPRI
   2436c:	f382 8811 	msr	BASEPRI, r2
   24370:	f3bf 8f6f 	isb	sy
	for (;;) {
   24374:	e7fe      	b.n	24374 <arch_system_halt+0x10>

00024376 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   24376:	f7fc b918 	b.w	205aa <z_clock_idle_exit>

0002437a <k_heap_init>:
{
   2437a:	b410      	push	{r4}
   2437c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   24380:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   24384:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   24386:	f7fb bc83 	b.w	1fc90 <sys_heap_init>

0002438a <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   2438a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2438e:	4604      	mov	r4, r0
   24390:	b085      	sub	sp, #20
   24392:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   24394:	4610      	mov	r0, r2
   24396:	4619      	mov	r1, r3
   24398:	f000 fb35 	bl	24a06 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2439c:	f104 0a14 	add.w	sl, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   243a0:	4605      	mov	r5, r0
   243a2:	460f      	mov	r7, r1
   243a4:	f04f 0220 	mov.w	r2, #32
   243a8:	f3ef 8311 	mrs	r3, BASEPRI
   243ac:	f382 8811 	msr	BASEPRI, r2
   243b0:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   243b4:	f104 0b0c 	add.w	fp, r4, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   243b8:	4631      	mov	r1, r6
   243ba:	4620      	mov	r0, r4
   243bc:	9303      	str	r3, [sp, #12]
   243be:	f7fb fc33 	bl	1fc28 <sys_heap_alloc>
   243c2:	9002      	str	r0, [sp, #8]
		now = z_tick_get();
   243c4:	f7fa ffd4 	bl	1f370 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   243c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   243cc:	b13a      	cbz	r2, 243de <k_heap_alloc+0x54>
	__asm__ volatile(
   243ce:	f383 8811 	msr	BASEPRI, r3
   243d2:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   243d6:	4610      	mov	r0, r2
   243d8:	b005      	add	sp, #20
   243da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   243de:	ebb5 0800 	subs.w	r8, r5, r0
   243e2:	eb67 0901 	sbc.w	r9, r7, r1
   243e6:	f1b8 0f01 	cmp.w	r8, #1
   243ea:	f179 0100 	sbcs.w	r1, r9, #0
   243ee:	dbee      	blt.n	243ce <k_heap_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   243f0:	e9cd 8900 	strd	r8, r9, [sp]
   243f4:	465a      	mov	r2, fp
   243f6:	4619      	mov	r1, r3
   243f8:	4650      	mov	r0, sl
   243fa:	f7fa fbb9 	bl	1eb70 <z_pend_curr>
	__asm__ volatile(
   243fe:	f04f 0220 	mov.w	r2, #32
   24402:	f3ef 8311 	mrs	r3, BASEPRI
   24406:	f382 8811 	msr	BASEPRI, r2
   2440a:	f3bf 8f6f 	isb	sy
   2440e:	e7d3      	b.n	243b8 <k_heap_alloc+0x2e>

00024410 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   24410:	b538      	push	{r3, r4, r5, lr}
   24412:	4604      	mov	r4, r0
   24414:	f04f 0320 	mov.w	r3, #32
   24418:	f3ef 8511 	mrs	r5, BASEPRI
   2441c:	f383 8811 	msr	BASEPRI, r3
   24420:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   24424:	f7fb fbad 	bl	1fb82 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   24428:	f104 000c 	add.w	r0, r4, #12
   2442c:	f000 f9fe 	bl	2482c <z_unpend_all>
   24430:	b130      	cbz	r0, 24440 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   24432:	4629      	mov	r1, r5
   24434:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   24438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2443c:	f7fa b950 	b.w	1e6e0 <z_reschedule>
	__asm__ volatile(
   24440:	f385 8811 	msr	BASEPRI, r5
   24444:	f3bf 8f6f 	isb	sy
}
   24448:	bd38      	pop	{r3, r4, r5, pc}

0002444a <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   2444a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2444c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
	block->id.heap = p->heap;
   24450:	6800      	ldr	r0, [r0, #0]
   24452:	6048      	str	r0, [r1, #4]
{
   24454:	4614      	mov	r4, r2
   24456:	460d      	mov	r5, r1
	block->data = k_heap_alloc(p->heap, size, timeout);
   24458:	4632      	mov	r2, r6
   2445a:	463b      	mov	r3, r7
   2445c:	4621      	mov	r1, r4
   2445e:	f7ff ff94 	bl	2438a <k_heap_alloc>
   24462:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   24464:	b144      	cbz	r4, 24478 <k_mem_pool_alloc+0x2e>
   24466:	b938      	cbnz	r0, 24478 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   24468:	ea56 0307 	orrs.w	r3, r6, r7
   2446c:	bf0c      	ite	eq
   2446e:	f06f 000b 	mvneq.w	r0, #11
   24472:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   24476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   24478:	2000      	movs	r0, #0
   2447a:	e7fc      	b.n	24476 <k_mem_pool_alloc+0x2c>

0002447c <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   2447c:	e9d0 1000 	ldrd	r1, r0, [r0]
   24480:	f7ff bfc6 	b.w	24410 <k_heap_free>

00024484 <k_mem_slab_init>:
{
   24484:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   24486:	2400      	movs	r4, #0
   24488:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2448a:	ea41 0402 	orr.w	r4, r1, r2
   2448e:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   24492:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   24496:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   24498:	d10c      	bne.n	244b4 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2449a:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2449c:	42a3      	cmp	r3, r4
   2449e:	d103      	bne.n	244a8 <k_mem_slab_init+0x24>
   244a0:	e9c0 0000 	strd	r0, r0, [r0]
}
   244a4:	2000      	movs	r0, #0
}
   244a6:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   244a8:	6945      	ldr	r5, [r0, #20]
   244aa:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   244ac:	3401      	adds	r4, #1
		slab->free_list = p;
   244ae:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   244b0:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   244b2:	e7f3      	b.n	2449c <k_mem_slab_init+0x18>
		return -EINVAL;
   244b4:	f06f 0015 	mvn.w	r0, #21
	return rc;
   244b8:	e7f5      	b.n	244a6 <k_mem_slab_init+0x22>

000244ba <queue_insert>:
{
   244ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   244be:	4699      	mov	r9, r3
   244c0:	4604      	mov	r4, r0
   244c2:	f89d 3020 	ldrb.w	r3, [sp, #32]
   244c6:	460d      	mov	r5, r1
   244c8:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   244ca:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   244ce:	f04f 0220 	mov.w	r2, #32
   244d2:	f3ef 8711 	mrs	r7, BASEPRI
   244d6:	f382 8811 	msr	BASEPRI, r2
   244da:	f3bf 8f6f 	isb	sy
	if (is_append) {
   244de:	b103      	cbz	r3, 244e2 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   244e0:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   244e2:	4630      	mov	r0, r6
   244e4:	f000 f97d 	bl	247e2 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   244e8:	b160      	cbz	r0, 24504 <queue_insert+0x4a>
   244ea:	2400      	movs	r4, #0
   244ec:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
   244f0:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   244f4:	f000 f91a 	bl	2472c <z_ready_thread>
	z_reschedule(&queue->lock, key);
   244f8:	4630      	mov	r0, r6
   244fa:	4639      	mov	r1, r7
   244fc:	f7fa f8f0 	bl	1e6e0 <z_reschedule>
	return 0;
   24500:	2000      	movs	r0, #0
   24502:	e00c      	b.n	2451e <queue_insert+0x64>
	if (alloc) {
   24504:	f1b9 0f00 	cmp.w	r9, #0
   24508:	d01b      	beq.n	24542 <queue_insert+0x88>
		anode = z_thread_malloc(sizeof(*anode));
   2450a:	2008      	movs	r0, #8
   2450c:	f7fb f856 	bl	1f5bc <z_thread_malloc>
		if (anode == NULL) {
   24510:	b938      	cbnz	r0, 24522 <queue_insert+0x68>
	__asm__ volatile(
   24512:	f387 8811 	msr	BASEPRI, r7
   24516:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2451a:	f06f 000b 	mvn.w	r0, #11
}
   2451e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   24522:	2301      	movs	r3, #1
		anode->data = data;
   24524:	f8c0 8004 	str.w	r8, [r0, #4]
   24528:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2452a:	6803      	ldr	r3, [r0, #0]
   2452c:	f003 0203 	and.w	r2, r3, #3
   24530:	b95d      	cbnz	r5, 2454a <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   24532:	6823      	ldr	r3, [r4, #0]
   24534:	4313      	orrs	r3, r2
   24536:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   24538:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2453a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2453c:	b973      	cbnz	r3, 2455c <queue_insert+0xa2>
	list->tail = node;
   2453e:	6060      	str	r0, [r4, #4]
}
   24540:	e00c      	b.n	2455c <queue_insert+0xa2>
	node->next_and_flags = flags;
   24542:	f8c8 9000 	str.w	r9, [r8]
}
   24546:	4640      	mov	r0, r8
   24548:	e7ef      	b.n	2452a <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2454a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2454c:	f033 0303 	bics.w	r3, r3, #3
   24550:	d110      	bne.n	24574 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   24552:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   24554:	6862      	ldr	r2, [r4, #4]
   24556:	b93a      	cbnz	r2, 24568 <queue_insert+0xae>
	list->head = node;
   24558:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2455c:	2104      	movs	r1, #4
   2455e:	f104 0010 	add.w	r0, r4, #16
   24562:	f000 fbeb 	bl	24d3c <z_handle_obj_poll_events>
   24566:	e7c7      	b.n	244f8 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24568:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2456a:	f003 0303 	and.w	r3, r3, #3
   2456e:	4303      	orrs	r3, r0
   24570:	6013      	str	r3, [r2, #0]
   24572:	e7e4      	b.n	2453e <queue_insert+0x84>
   24574:	4313      	orrs	r3, r2
   24576:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24578:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2457a:	f003 0303 	and.w	r3, r3, #3
   2457e:	4303      	orrs	r3, r0
   24580:	602b      	str	r3, [r5, #0]
}
   24582:	e7eb      	b.n	2455c <queue_insert+0xa2>

00024584 <z_queue_node_peek>:
{
   24584:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   24586:	4604      	mov	r4, r0
   24588:	b130      	cbz	r0, 24598 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2458a:	6802      	ldr	r2, [r0, #0]
   2458c:	0793      	lsls	r3, r2, #30
   2458e:	d003      	beq.n	24598 <z_queue_node_peek+0x14>
		ret = anode->data;
   24590:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   24592:	b109      	cbz	r1, 24598 <z_queue_node_peek+0x14>
			k_free(anode);
   24594:	f000 fbf8 	bl	24d88 <k_free>
}
   24598:	4620      	mov	r0, r4
   2459a:	bd10      	pop	{r4, pc}

0002459c <z_impl_k_queue_init>:
	list->head = NULL;
   2459c:	2300      	movs	r3, #0
	list->tail = NULL;
   2459e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   245a2:	f100 0308 	add.w	r3, r0, #8
   245a6:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   245aa:	f100 0310 	add.w	r3, r0, #16
   245ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   245b2:	4770      	bx	lr

000245b4 <k_queue_append>:
{
   245b4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   245b6:	2301      	movs	r3, #1
   245b8:	9300      	str	r3, [sp, #0]
   245ba:	2300      	movs	r3, #0
{
   245bc:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   245be:	4619      	mov	r1, r3
   245c0:	f7ff ff7b 	bl	244ba <queue_insert>
}
   245c4:	b003      	add	sp, #12
   245c6:	f85d fb04 	ldr.w	pc, [sp], #4

000245ca <k_queue_prepend>:
{
   245ca:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   245cc:	2300      	movs	r3, #0
{
   245ce:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   245d0:	9300      	str	r3, [sp, #0]
   245d2:	4619      	mov	r1, r3
   245d4:	f7ff ff71 	bl	244ba <queue_insert>
}
   245d8:	b003      	add	sp, #12
   245da:	f85d fb04 	ldr.w	pc, [sp], #4

000245de <k_queue_append_list>:
{
   245de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   245e2:	4605      	mov	r5, r0
   245e4:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   245e6:	460c      	mov	r4, r1
   245e8:	b391      	cbz	r1, 24650 <k_queue_append_list+0x72>
   245ea:	b38a      	cbz	r2, 24650 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   245ec:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   245f0:	f04f 0320 	mov.w	r3, #32
   245f4:	f3ef 8811 	mrs	r8, BASEPRI
   245f8:	f383 8811 	msr	BASEPRI, r3
   245fc:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   24600:	4638      	mov	r0, r7
   24602:	f000 f8ee 	bl	247e2 <z_unpend_first_thread>
   24606:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2460a:	b920      	cbnz	r0, 24616 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2460c:	686b      	ldr	r3, [r5, #4]
   2460e:	b9cb      	cbnz	r3, 24644 <k_queue_append_list+0x66>
	list->head = node;
   24610:	602c      	str	r4, [r5, #0]
	list->tail = node;
   24612:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   24614:	e00a      	b.n	2462c <k_queue_append_list+0x4e>
   24616:	6144      	str	r4, [r0, #20]
   24618:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
	z_ready_thread(thread);
   2461c:	f000 f886 	bl	2472c <z_ready_thread>
		head = *(void **)head;
   24620:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   24622:	4638      	mov	r0, r7
   24624:	f000 f8dd 	bl	247e2 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   24628:	2c00      	cmp	r4, #0
   2462a:	d1ee      	bne.n	2460a <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2462c:	2104      	movs	r1, #4
   2462e:	f105 0010 	add.w	r0, r5, #16
   24632:	f000 fb83 	bl	24d3c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   24636:	4638      	mov	r0, r7
   24638:	4641      	mov	r1, r8
   2463a:	f7fa f851 	bl	1e6e0 <z_reschedule>
	return 0;
   2463e:	2000      	movs	r0, #0
}
   24640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24644:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24646:	f001 0103 	and.w	r1, r1, #3
   2464a:	430c      	orrs	r4, r1
   2464c:	601c      	str	r4, [r3, #0]
}
   2464e:	e7e0      	b.n	24612 <k_queue_append_list+0x34>
		return -EINVAL;
   24650:	f06f 0015 	mvn.w	r0, #21
   24654:	e7f4      	b.n	24640 <k_queue_append_list+0x62>

00024656 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   24656:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2465a:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   2465e:	4298      	cmp	r0, r3
   24660:	bfac      	ite	ge
   24662:	2000      	movge	r0, #0
   24664:	2001      	movlt	r0, #1
   24666:	4770      	bx	lr

00024668 <z_find_first_thread_to_unpend>:
{
   24668:	b510      	push	{r4, lr}
   2466a:	f04f 0320 	mov.w	r3, #32
   2466e:	f3ef 8411 	mrs	r4, BASEPRI
   24672:	f383 8811 	msr	BASEPRI, r3
   24676:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   2467a:	f000 f84d 	bl	24718 <z_priq_dumb_best>
	__asm__ volatile(
   2467e:	f384 8811 	msr	BASEPRI, r4
   24682:	f3bf 8f6f 	isb	sy
}
   24686:	bd10      	pop	{r4, pc}

00024688 <z_unpend_thread_no_timeout>:
{
   24688:	b510      	push	{r4, lr}
	__asm__ volatile(
   2468a:	f04f 0320 	mov.w	r3, #32
   2468e:	f3ef 8411 	mrs	r4, BASEPRI
   24692:	f383 8811 	msr	BASEPRI, r3
   24696:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2469a:	f000 f81b 	bl	246d4 <unpend_thread_no_timeout>
	__asm__ volatile(
   2469e:	f384 8811 	msr	BASEPRI, r4
   246a2:	f3bf 8f6f 	isb	sy
}
   246a6:	bd10      	pop	{r4, pc}

000246a8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   246a8:	4603      	mov	r3, r0
   246aa:	b920      	cbnz	r0, 246b6 <z_reschedule_irqlock+0xe>
   246ac:	f3ef 8205 	mrs	r2, IPSR
   246b0:	b90a      	cbnz	r2, 246b6 <z_reschedule_irqlock+0xe>
   246b2:	f7e1 bff9 	b.w	66a8 <arch_swap>
   246b6:	f383 8811 	msr	BASEPRI, r3
   246ba:	f3bf 8f6f 	isb	sy
}
   246be:	4770      	bx	lr

000246c0 <z_reschedule_unlocked>:
	__asm__ volatile(
   246c0:	f04f 0320 	mov.w	r3, #32
   246c4:	f3ef 8011 	mrs	r0, BASEPRI
   246c8:	f383 8811 	msr	BASEPRI, r3
   246cc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   246d0:	f7ff bfea 	b.w	246a8 <z_reschedule_irqlock>

000246d4 <unpend_thread_no_timeout>:
{
   246d4:	4601      	mov	r1, r0
   246d6:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   246d8:	6880      	ldr	r0, [r0, #8]
   246da:	f7fa f827 	bl	1e72c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   246de:	7b4b      	ldrb	r3, [r1, #13]
   246e0:	f023 0302 	bic.w	r3, r3, #2
   246e4:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   246e6:	2300      	movs	r3, #0
   246e8:	608b      	str	r3, [r1, #8]
}
   246ea:	bd08      	pop	{r3, pc}

000246ec <z_unpend_thread>:
{
   246ec:	b538      	push	{r3, r4, r5, lr}
   246ee:	4604      	mov	r4, r0
   246f0:	f04f 0320 	mov.w	r3, #32
   246f4:	f3ef 8511 	mrs	r5, BASEPRI
   246f8:	f383 8811 	msr	BASEPRI, r3
   246fc:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   24700:	f7ff ffe8 	bl	246d4 <unpend_thread_no_timeout>
	__asm__ volatile(
   24704:	f385 8811 	msr	BASEPRI, r5
   24708:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   2470c:	f104 0018 	add.w	r0, r4, #24
}
   24710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24714:	f000 b931 	b.w	2497a <z_abort_timeout>

00024718 <z_priq_dumb_best>:
{
   24718:	4603      	mov	r3, r0
	return list->head == list;
   2471a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2471c:	4283      	cmp	r3, r0
   2471e:	d003      	beq.n	24728 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   24720:	2800      	cmp	r0, #0
   24722:	bf38      	it	cc
   24724:	2000      	movcc	r0, #0
   24726:	4770      	bx	lr
	struct k_thread *thread = NULL;
   24728:	2000      	movs	r0, #0
}
   2472a:	4770      	bx	lr

0002472c <z_ready_thread>:
{
   2472c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2472e:	f04f 0320 	mov.w	r3, #32
   24732:	f3ef 8411 	mrs	r4, BASEPRI
   24736:	f383 8811 	msr	BASEPRI, r3
   2473a:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   2473e:	f7fa f84f 	bl	1e7e0 <ready_thread>
	__asm__ volatile(
   24742:	f384 8811 	msr	BASEPRI, r4
   24746:	f3bf 8f6f 	isb	sy
}
   2474a:	bd10      	pop	{r4, pc}

0002474c <z_thread_timeout>:
{
   2474c:	b570      	push	{r4, r5, r6, lr}
   2474e:	4604      	mov	r4, r0
	__asm__ volatile(
   24750:	f04f 0320 	mov.w	r3, #32
   24754:	f3ef 8611 	mrs	r6, BASEPRI
   24758:	f383 8811 	msr	BASEPRI, r3
   2475c:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   24760:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   24764:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   24768:	b113      	cbz	r3, 24770 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   2476a:	4628      	mov	r0, r5
   2476c:	f7ff ffb2 	bl	246d4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   24770:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   24774:	f023 0314 	bic.w	r3, r3, #20
   24778:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   2477c:	4628      	mov	r0, r5
   2477e:	f7fa f82f 	bl	1e7e0 <ready_thread>
	__asm__ volatile(
   24782:	f386 8811 	msr	BASEPRI, r6
   24786:	f3bf 8f6f 	isb	sy
}
   2478a:	bd70      	pop	{r4, r5, r6, pc}

0002478c <add_to_waitq_locked>:
{
   2478c:	b538      	push	{r3, r4, r5, lr}
   2478e:	4604      	mov	r4, r0
   24790:	460d      	mov	r5, r1
	unready_thread(thread);
   24792:	f7fa f9ad 	bl	1eaf0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   24796:	7b63      	ldrb	r3, [r4, #13]
   24798:	f043 0302 	orr.w	r3, r3, #2
   2479c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2479e:	b1c5      	cbz	r5, 247d2 <add_to_waitq_locked+0x46>
	return list->head == list;
   247a0:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   247a2:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   247a4:	429d      	cmp	r5, r3
   247a6:	bf08      	it	eq
   247a8:	2300      	moveq	r3, #0
   247aa:	2b00      	cmp	r3, #0
   247ac:	bf38      	it	cc
   247ae:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   247b0:	b183      	cbz	r3, 247d4 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   247b2:	f994 100e 	ldrsb.w	r1, [r4, #14]
   247b6:	f993 200e 	ldrsb.w	r2, [r3, #14]
   247ba:	4291      	cmp	r1, r2
   247bc:	db04      	blt.n	247c8 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   247be:	686a      	ldr	r2, [r5, #4]
   247c0:	429a      	cmp	r2, r3
   247c2:	d007      	beq.n	247d4 <add_to_waitq_locked+0x48>
   247c4:	681b      	ldr	r3, [r3, #0]
   247c6:	e7f3      	b.n	247b0 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   247c8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   247ca:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   247ce:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   247d0:	605c      	str	r4, [r3, #4]
}
   247d2:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   247d4:	686b      	ldr	r3, [r5, #4]
   247d6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   247d8:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   247da:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   247dc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   247de:	606c      	str	r4, [r5, #4]
   247e0:	e7f7      	b.n	247d2 <add_to_waitq_locked+0x46>

000247e2 <z_unpend_first_thread>:
{
   247e2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   247e4:	f04f 0320 	mov.w	r3, #32
   247e8:	f3ef 8211 	mrs	r2, BASEPRI
   247ec:	f383 8811 	msr	BASEPRI, r3
   247f0:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   247f4:	f7ff ff90 	bl	24718 <z_priq_dumb_best>
   247f8:	4604      	mov	r4, r0
	__asm__ volatile(
   247fa:	f382 8811 	msr	BASEPRI, r2
   247fe:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   24802:	b188      	cbz	r0, 24828 <z_unpend_first_thread+0x46>
	__asm__ volatile(
   24804:	f04f 0320 	mov.w	r3, #32
   24808:	f3ef 8511 	mrs	r5, BASEPRI
   2480c:	f383 8811 	msr	BASEPRI, r3
   24810:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   24814:	f7ff ff5e 	bl	246d4 <unpend_thread_no_timeout>
	__asm__ volatile(
   24818:	f385 8811 	msr	BASEPRI, r5
   2481c:	f3bf 8f6f 	isb	sy
   24820:	f104 0018 	add.w	r0, r4, #24
   24824:	f000 f8a9 	bl	2497a <z_abort_timeout>
}
   24828:	4620      	mov	r0, r4
   2482a:	bd38      	pop	{r3, r4, r5, pc}

0002482c <z_unpend_all>:
{
   2482c:	b538      	push	{r3, r4, r5, lr}
   2482e:	4605      	mov	r5, r0
	int need_sched = 0;
   24830:	2000      	movs	r0, #0
	return list->head == list;
   24832:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24834:	42a5      	cmp	r5, r4
   24836:	d000      	beq.n	2483a <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   24838:	b904      	cbnz	r4, 2483c <z_unpend_all+0x10>
}
   2483a:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2483c:	4620      	mov	r0, r4
   2483e:	f7ff ff55 	bl	246ec <z_unpend_thread>
		z_ready_thread(thread);
   24842:	4620      	mov	r0, r4
   24844:	f7ff ff72 	bl	2472c <z_ready_thread>
		need_sched = 1;
   24848:	2001      	movs	r0, #1
   2484a:	e7f2      	b.n	24832 <z_unpend_all+0x6>

0002484c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   2484c:	b15a      	cbz	r2, 24866 <z_impl_k_sem_init+0x1a>
   2484e:	428a      	cmp	r2, r1
   24850:	d309      	bcc.n	24866 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   24852:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   24856:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2485a:	e9c0 0000 	strd	r0, r0, [r0]
   2485e:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   24862:	2000      	movs	r0, #0
   24864:	4770      	bx	lr
		return -EINVAL;
   24866:	f06f 0015 	mvn.w	r0, #21
}
   2486a:	4770      	bx	lr

0002486c <k_is_in_isr>:
   2486c:	f3ef 8005 	mrs	r0, IPSR
}
   24870:	3800      	subs	r0, #0
   24872:	bf18      	it	ne
   24874:	2001      	movne	r0, #1
   24876:	4770      	bx	lr

00024878 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   24878:	b108      	cbz	r0, 2487e <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   2487a:	f7e2 bc21 	b.w	70c0 <arch_busy_wait>
}
   2487e:	4770      	bx	lr

00024880 <z_impl_k_thread_name_set>:
}
   24880:	f06f 0046 	mvn.w	r0, #70	; 0x46
   24884:	4770      	bx	lr

00024886 <k_thread_name_get>:
}
   24886:	2000      	movs	r0, #0
   24888:	4770      	bx	lr

0002488a <k_work_submit_to_queue>:
{
   2488a:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2488c:	f101 0308 	add.w	r3, r1, #8
   24890:	f3bf 8f5b 	dmb	ish
   24894:	e853 2f00 	ldrex	r2, [r3]
   24898:	f042 0c01 	orr.w	ip, r2, #1
   2489c:	e843 ce00 	strex	lr, ip, [r3]
   248a0:	f1be 0f00 	cmp.w	lr, #0
   248a4:	d1f6      	bne.n	24894 <k_work_submit_to_queue+0xa>
   248a6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   248aa:	07d3      	lsls	r3, r2, #31
   248ac:	d403      	bmi.n	248b6 <k_work_submit_to_queue+0x2c>
}
   248ae:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   248b2:	f7ff be7f 	b.w	245b4 <k_queue_append>
}
   248b6:	f85d fb04 	ldr.w	pc, [sp], #4

000248ba <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   248ba:	f1a0 0110 	sub.w	r1, r0, #16
   248be:	6980      	ldr	r0, [r0, #24]
   248c0:	f7ff bfe3 	b.w	2488a <k_work_submit_to_queue>

000248c4 <work_cancel>:
{
   248c4:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   248c6:	f3bf 8f5b 	dmb	ish
   248ca:	6883      	ldr	r3, [r0, #8]
   248cc:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   248d0:	07db      	lsls	r3, r3, #31
{
   248d2:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   248d4:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   248d8:	d532      	bpl.n	24940 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   248da:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   248dc:	6813      	ldr	r3, [r2, #0]
   248de:	2100      	movs	r1, #0
   248e0:	b913      	cbnz	r3, 248e8 <work_cancel+0x24>
			return -EINVAL;
   248e2:	f06f 0015 	mvn.w	r0, #21
}
   248e6:	bd70      	pop	{r4, r5, r6, pc}
   248e8:	429c      	cmp	r4, r3
   248ea:	d124      	bne.n	24936 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   248ec:	6823      	ldr	r3, [r4, #0]
   248ee:	6856      	ldr	r6, [r2, #4]
   248f0:	f023 0003 	bic.w	r0, r3, #3
   248f4:	b9b1      	cbnz	r1, 24924 <work_cancel+0x60>
   248f6:	42b4      	cmp	r4, r6
	list->head = node;
   248f8:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   248fa:	d100      	bne.n	248fe <work_cancel+0x3a>
	list->tail = node;
   248fc:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   248fe:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24900:	f003 0303 	and.w	r3, r3, #3
   24904:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   24906:	2000      	movs	r0, #0
   24908:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2490a:	f3bf 8f5b 	dmb	ish
   2490e:	e855 3f00 	ldrex	r3, [r5]
   24912:	f023 0301 	bic.w	r3, r3, #1
   24916:	e845 3200 	strex	r2, r3, [r5]
   2491a:	2a00      	cmp	r2, #0
   2491c:	d1f7      	bne.n	2490e <work_cancel+0x4a>
   2491e:	f3bf 8f5b 	dmb	ish
   24922:	e7e0      	b.n	248e6 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24924:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24926:	f003 0303 	and.w	r3, r3, #3
   2492a:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   2492c:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2492e:	600b      	str	r3, [r1, #0]
	list->tail = node;
   24930:	bf08      	it	eq
   24932:	6051      	streq	r1, [r2, #4]
}
   24934:	e7e3      	b.n	248fe <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24936:	6818      	ldr	r0, [r3, #0]
   24938:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2493a:	f020 0303 	bic.w	r3, r0, #3
   2493e:	e7cf      	b.n	248e0 <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   24940:	3010      	adds	r0, #16
   24942:	f000 f81a 	bl	2497a <z_abort_timeout>
		if (err) {
   24946:	2800      	cmp	r0, #0
   24948:	d0dd      	beq.n	24906 <work_cancel+0x42>
			return -EALREADY;
   2494a:	f06f 0044 	mvn.w	r0, #68	; 0x44
   2494e:	e7ca      	b.n	248e6 <work_cancel+0x22>

00024950 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   24950:	b510      	push	{r4, lr}
	__asm__ volatile(
   24952:	f04f 0220 	mov.w	r2, #32
   24956:	f3ef 8411 	mrs	r4, BASEPRI
   2495a:	f382 8811 	msr	BASEPRI, r2
   2495e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   24962:	6a83      	ldr	r3, [r0, #40]	; 0x28
   24964:	b133      	cbz	r3, 24974 <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   24966:	f7ff ffad 	bl	248c4 <work_cancel>
	__asm__ volatile(
   2496a:	f384 8811 	msr	BASEPRI, r4
   2496e:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   24972:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   24974:	f06f 0015 	mvn.w	r0, #21
   24978:	e7f7      	b.n	2496a <k_delayed_work_cancel+0x1a>

0002497a <z_abort_timeout>:
{
   2497a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2497c:	f04f 0220 	mov.w	r2, #32
   24980:	f3ef 8411 	mrs	r4, BASEPRI
   24984:	f382 8811 	msr	BASEPRI, r2
   24988:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2498c:	6803      	ldr	r3, [r0, #0]
   2498e:	b13b      	cbz	r3, 249a0 <z_abort_timeout+0x26>
			remove_timeout(to);
   24990:	f7fa fbb4 	bl	1f0fc <remove_timeout>
			ret = 0;
   24994:	2000      	movs	r0, #0
	__asm__ volatile(
   24996:	f384 8811 	msr	BASEPRI, r4
   2499a:	f3bf 8f6f 	isb	sy
}
   2499e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   249a0:	f06f 0015 	mvn.w	r0, #21
   249a4:	e7f7      	b.n	24996 <z_abort_timeout+0x1c>

000249a6 <z_get_next_timeout_expiry>:
{
   249a6:	b510      	push	{r4, lr}
	__asm__ volatile(
   249a8:	f04f 0320 	mov.w	r3, #32
   249ac:	f3ef 8411 	mrs	r4, BASEPRI
   249b0:	f383 8811 	msr	BASEPRI, r3
   249b4:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   249b8:	f7fa fbba 	bl	1f130 <next_timeout>
	__asm__ volatile(
   249bc:	f384 8811 	msr	BASEPRI, r4
   249c0:	f3bf 8f6f 	isb	sy
}
   249c4:	bd10      	pop	{r4, pc}

000249c6 <z_set_timeout_expiry>:
{
   249c6:	b570      	push	{r4, r5, r6, lr}
   249c8:	4604      	mov	r4, r0
   249ca:	460d      	mov	r5, r1
	__asm__ volatile(
   249cc:	f04f 0320 	mov.w	r3, #32
   249d0:	f3ef 8611 	mrs	r6, BASEPRI
   249d4:	f383 8811 	msr	BASEPRI, r3
   249d8:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   249dc:	f7fa fba8 	bl	1f130 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   249e0:	2801      	cmp	r0, #1
   249e2:	dd05      	ble.n	249f0 <z_set_timeout_expiry+0x2a>
   249e4:	42a0      	cmp	r0, r4
   249e6:	dd03      	ble.n	249f0 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   249e8:	4629      	mov	r1, r5
   249ea:	4620      	mov	r0, r4
   249ec:	f7e1 fbda 	bl	61a4 <z_clock_set_timeout>
	__asm__ volatile(
   249f0:	f386 8811 	msr	BASEPRI, r6
   249f4:	f3bf 8f6f 	isb	sy
}
   249f8:	bd70      	pop	{r4, r5, r6, pc}

000249fa <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   249fa:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   249fc:	f7fa fcb8 	bl	1f370 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   24a00:	bd08      	pop	{r3, pc}

00024a02 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   24a02:	f7fa bcb5 	b.w	1f370 <z_tick_get>

00024a06 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   24a06:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24a08:	1c4b      	adds	r3, r1, #1
   24a0a:	bf08      	it	eq
   24a0c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   24a10:	4604      	mov	r4, r0
   24a12:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24a14:	d013      	beq.n	24a3e <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24a16:	ea54 0105 	orrs.w	r1, r4, r5
   24a1a:	d103      	bne.n	24a24 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   24a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   24a20:	f7fa bca6 	b.w	1f370 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   24a24:	f06f 0101 	mvn.w	r1, #1
   24a28:	1a0a      	subs	r2, r1, r0
   24a2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   24a2e:	eb61 0305 	sbc.w	r3, r1, r5
   24a32:	2a00      	cmp	r2, #0
   24a34:	f173 0100 	sbcs.w	r1, r3, #0
   24a38:	db02      	blt.n	24a40 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   24a3a:	4610      	mov	r0, r2
   24a3c:	4619      	mov	r1, r3
}
   24a3e:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   24a40:	f7fa fc96 	bl	1f370 <z_tick_get>
   24a44:	2c01      	cmp	r4, #1
   24a46:	f175 0300 	sbcs.w	r3, r5, #0
   24a4a:	bfbc      	itt	lt
   24a4c:	2401      	movlt	r4, #1
   24a4e:	2500      	movlt	r5, #0
   24a50:	1820      	adds	r0, r4, r0
   24a52:	eb45 0101 	adc.w	r1, r5, r1
   24a56:	e7f2      	b.n	24a3e <z_timeout_end_calc+0x38>

00024a58 <k_timer_init>:
	timer->status = 0U;
   24a58:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   24a5a:	e9c0 1208 	strd	r1, r2, [r0, #32]
   24a5e:	f100 0218 	add.w	r2, r0, #24
   24a62:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   24a66:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   24a6a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   24a6c:	6343      	str	r3, [r0, #52]	; 0x34
}
   24a6e:	4770      	bx	lr

00024a70 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   24a70:	b510      	push	{r4, lr}
   24a72:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   24a74:	f7ff ff81 	bl	2497a <z_abort_timeout>

	if (inactive) {
   24a78:	b9d8      	cbnz	r0, 24ab2 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   24a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24a7c:	b10b      	cbz	r3, 24a82 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   24a7e:	4620      	mov	r0, r4
   24a80:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   24a82:	f104 0018 	add.w	r0, r4, #24
   24a86:	2100      	movs	r1, #0
   24a88:	f7ff fdee 	bl	24668 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   24a8c:	4604      	mov	r4, r0
   24a8e:	b180      	cbz	r0, 24ab2 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   24a90:	f7ff fdfa 	bl	24688 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   24a94:	4620      	mov	r0, r4
   24a96:	f7ff fe49 	bl	2472c <z_ready_thread>
	__asm__ volatile(
   24a9a:	f04f 0320 	mov.w	r3, #32
   24a9e:	f3ef 8011 	mrs	r0, BASEPRI
   24aa2:	f383 8811 	msr	BASEPRI, r3
   24aa6:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   24aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   24aae:	f7ff bdfb 	b.w	246a8 <z_reschedule_irqlock>
   24ab2:	bd10      	pop	{r4, pc}

00024ab4 <clear_event_registrations>:
	while (num_events--) {
   24ab4:	2314      	movs	r3, #20
{
   24ab6:	b530      	push	{r4, r5, lr}
   24ab8:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   24abc:	2400      	movs	r4, #0
	while (num_events--) {
   24abe:	4281      	cmp	r1, r0
   24ac0:	d100      	bne.n	24ac4 <clear_event_registrations+0x10>
}
   24ac2:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   24ac4:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   24ac8:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   24acc:	f003 030f 	and.w	r3, r3, #15
   24ad0:	2b02      	cmp	r3, #2
   24ad2:	d80a      	bhi.n	24aea <clear_event_registrations+0x36>
   24ad4:	b15b      	cbz	r3, 24aee <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   24ad6:	f851 3c14 	ldr.w	r3, [r1, #-20]
   24ada:	b143      	cbz	r3, 24aee <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   24adc:	f851 5c10 	ldr.w	r5, [r1, #-16]
   24ae0:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   24ae2:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   24ae4:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   24ae8:	e001      	b.n	24aee <clear_event_registrations+0x3a>
	switch (event->type) {
   24aea:	2b04      	cmp	r3, #4
   24aec:	d0f3      	beq.n	24ad6 <clear_event_registrations+0x22>
	__asm__ volatile(
   24aee:	f382 8811 	msr	BASEPRI, r2
   24af2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   24af6:	f04f 0320 	mov.w	r3, #32
   24afa:	f3ef 8211 	mrs	r2, BASEPRI
   24afe:	f383 8811 	msr	BASEPRI, r3
   24b02:	f3bf 8f6f 	isb	sy
   24b06:	3914      	subs	r1, #20
   24b08:	e7d9      	b.n	24abe <clear_event_registrations+0xa>

00024b0a <k_work_submit_to_queue>:
{
   24b0a:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24b0c:	f101 0308 	add.w	r3, r1, #8
   24b10:	f3bf 8f5b 	dmb	ish
   24b14:	e853 2f00 	ldrex	r2, [r3]
   24b18:	f042 0c01 	orr.w	ip, r2, #1
   24b1c:	e843 ce00 	strex	lr, ip, [r3]
   24b20:	f1be 0f00 	cmp.w	lr, #0
   24b24:	d1f6      	bne.n	24b14 <k_work_submit_to_queue+0xa>
   24b26:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   24b2a:	07d3      	lsls	r3, r2, #31
   24b2c:	d403      	bmi.n	24b36 <k_work_submit_to_queue+0x2c>
}
   24b2e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   24b32:	f7ff bd3f 	b.w	245b4 <k_queue_append>
}
   24b36:	f85d fb04 	ldr.w	pc, [sp], #4

00024b3a <signal_poll_event>:
{
   24b3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   24b3e:	6884      	ldr	r4, [r0, #8]
{
   24b40:	4605      	mov	r5, r0
   24b42:	460e      	mov	r6, r1
	if (poller) {
   24b44:	b144      	cbz	r4, 24b58 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   24b46:	7863      	ldrb	r3, [r4, #1]
   24b48:	2b01      	cmp	r3, #1
   24b4a:	d138      	bne.n	24bbe <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   24b4c:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   24b50:	f013 0302 	ands.w	r3, r3, #2
   24b54:	d10a      	bne.n	24b6c <signal_poll_event+0x32>
		poller->is_polling = false;
   24b56:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   24b58:	68eb      	ldr	r3, [r5, #12]
   24b5a:	f3c3 3104 	ubfx	r1, r3, #12, #5
   24b5e:	430e      	orrs	r6, r1
	event->poller = NULL;
   24b60:	2000      	movs	r0, #0
	event->state |= state;
   24b62:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   24b66:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   24b68:	60eb      	str	r3, [r5, #12]
	return retcode;
   24b6a:	e00d      	b.n	24b88 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   24b6c:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   24b70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   24b74:	f06f 0001 	mvn.w	r0, #1
   24b78:	428b      	cmp	r3, r1
   24b7a:	bf08      	it	eq
   24b7c:	4282      	cmpeq	r2, r0
   24b7e:	d105      	bne.n	24b8c <signal_poll_event+0x52>
		poller->is_polling = false;
   24b80:	2300      	movs	r3, #0
   24b82:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   24b84:	f06f 000a 	mvn.w	r0, #10
}
   24b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   24b8c:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
   24b90:	4640      	mov	r0, r8
   24b92:	f7ff fdab 	bl	246ec <z_unpend_thread>
	arch_thread_return_value_set(thread,
   24b96:	2e08      	cmp	r6, #8
   24b98:	bf0c      	ite	eq
   24b9a:	f06f 0303 	mvneq.w	r3, #3
   24b9e:	2300      	movne	r3, #0
   24ba0:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24ba2:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   24ba6:	06db      	lsls	r3, r3, #27
   24ba8:	d102      	bne.n	24bb0 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   24baa:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   24bae:	b10f      	cbz	r7, 24bb4 <signal_poll_event+0x7a>
		poller->is_polling = false;
   24bb0:	2300      	movs	r3, #0
   24bb2:	e7d0      	b.n	24b56 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   24bb4:	4640      	mov	r0, r8
   24bb6:	f7ff fdb9 	bl	2472c <z_ready_thread>
		poller->is_polling = false;
   24bba:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   24bbc:	e7cc      	b.n	24b58 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   24bbe:	2b02      	cmp	r3, #2
   24bc0:	d1f6      	bne.n	24bb0 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   24bc2:	7823      	ldrb	r3, [r4, #0]
   24bc4:	2b00      	cmp	r3, #0
   24bc6:	d0c7      	beq.n	24b58 <signal_poll_event+0x1e>
   24bc8:	f854 7c04 	ldr.w	r7, [r4, #-4]
   24bcc:	2f00      	cmp	r7, #0
   24bce:	d0f4      	beq.n	24bba <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   24bd0:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   24bd4:	f1a4 0910 	sub.w	r9, r4, #16
   24bd8:	f104 0010 	add.w	r0, r4, #16
   24bdc:	f7ff fecd 	bl	2497a <z_abort_timeout>
		twork->poll_result = 0;
   24be0:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   24be4:	4649      	mov	r1, r9
   24be6:	4638      	mov	r0, r7
   24be8:	f7ff ff8f 	bl	24b0a <k_work_submit_to_queue>
		poller->is_polling = false;
   24bec:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   24bf0:	e7b2      	b.n	24b58 <signal_poll_event+0x1e>

00024bf2 <add_event>:
{
   24bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24bf4:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   24bf6:	e9d0 2300 	ldrd	r2, r3, [r0]
   24bfa:	4290      	cmp	r0, r2
   24bfc:	4604      	mov	r4, r0
   24bfe:	460d      	mov	r5, r1
   24c00:	d106      	bne.n	24c10 <add_event+0x1e>
	node->prev = list->tail;
   24c02:	6863      	ldr	r3, [r4, #4]
   24c04:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   24c06:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   24c08:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   24c0a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   24c0c:	6065      	str	r5, [r4, #4]
}
   24c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   24c10:	2b00      	cmp	r3, #0
   24c12:	d0f6      	beq.n	24c02 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   24c14:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   24c16:	b100      	cbz	r0, 24c1a <add_event+0x28>
   24c18:	3864      	subs	r0, #100	; 0x64
   24c1a:	b107      	cbz	r7, 24c1e <add_event+0x2c>
   24c1c:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   24c1e:	4639      	mov	r1, r7
   24c20:	f7ff fd19 	bl	24656 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   24c24:	2800      	cmp	r0, #0
   24c26:	d1ec      	bne.n	24c02 <add_event+0x10>
	return list->head == list;
   24c28:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24c2a:	42b4      	cmp	r4, r6
   24c2c:	d0e9      	beq.n	24c02 <add_event+0x10>
   24c2e:	2e00      	cmp	r6, #0
   24c30:	bf38      	it	cc
   24c32:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   24c34:	2e00      	cmp	r6, #0
   24c36:	d0e4      	beq.n	24c02 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   24c38:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   24c3a:	b101      	cbz	r1, 24c3e <add_event+0x4c>
   24c3c:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   24c3e:	4638      	mov	r0, r7
   24c40:	f7ff fd09 	bl	24656 <z_is_t1_higher_prio_than_t2>
   24c44:	b128      	cbz	r0, 24c52 <add_event+0x60>
	node->prev = successor->prev;
   24c46:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   24c48:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   24c4c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   24c4e:	6075      	str	r5, [r6, #4]
			return;
   24c50:	e7dd      	b.n	24c0e <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   24c52:	6863      	ldr	r3, [r4, #4]
   24c54:	42b3      	cmp	r3, r6
   24c56:	d0d4      	beq.n	24c02 <add_event+0x10>
   24c58:	6836      	ldr	r6, [r6, #0]
   24c5a:	e7eb      	b.n	24c34 <add_event+0x42>

00024c5c <register_events>:
{
   24c5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   24c60:	f04f 0a00 	mov.w	sl, #0
{
   24c64:	460e      	mov	r6, r1
   24c66:	4614      	mov	r4, r2
   24c68:	461f      	mov	r7, r3
   24c6a:	4683      	mov	fp, r0
	int events_registered = 0;
   24c6c:	4655      	mov	r5, sl
	event->poller = NULL;
   24c6e:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   24c70:	45b2      	cmp	sl, r6
   24c72:	db02      	blt.n	24c7a <register_events+0x1e>
}
   24c74:	4628      	mov	r0, r5
   24c76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24c7a:	f04f 0320 	mov.w	r3, #32
   24c7e:	f3ef 8911 	mrs	r9, BASEPRI
   24c82:	f383 8811 	msr	BASEPRI, r3
   24c86:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   24c8a:	f89b 200d 	ldrb.w	r2, [fp, #13]
   24c8e:	f002 020f 	and.w	r2, r2, #15
   24c92:	2a02      	cmp	r2, #2
   24c94:	d006      	beq.n	24ca4 <register_events+0x48>
   24c96:	2a04      	cmp	r2, #4
   24c98:	d008      	beq.n	24cac <register_events+0x50>
   24c9a:	2a01      	cmp	r2, #1
   24c9c:	d120      	bne.n	24ce0 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   24c9e:	f8db 3010 	ldr.w	r3, [fp, #16]
   24ca2:	e001      	b.n	24ca8 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   24ca4:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   24ca8:	689b      	ldr	r3, [r3, #8]
   24caa:	e002      	b.n	24cb2 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   24cac:	f8db 3010 	ldr.w	r3, [fp, #16]
   24cb0:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   24cb2:	b1ab      	cbz	r3, 24ce0 <register_events+0x84>
	event->state |= state;
   24cb4:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   24cb8:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   24cbc:	f3c3 3104 	ubfx	r1, r3, #12, #5
   24cc0:	430a      	orrs	r2, r1
   24cc2:	f362 3310 	bfi	r3, r2, #12, #5
   24cc6:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   24cca:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   24cce:	f389 8811 	msr	BASEPRI, r9
   24cd2:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   24cd6:	f10a 0a01 	add.w	sl, sl, #1
   24cda:	f10b 0b14 	add.w	fp, fp, #20
   24cde:	e7c7      	b.n	24c70 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   24ce0:	2f00      	cmp	r7, #0
   24ce2:	d1f4      	bne.n	24cce <register_events+0x72>
   24ce4:	7823      	ldrb	r3, [r4, #0]
   24ce6:	2b00      	cmp	r3, #0
   24ce8:	d0f1      	beq.n	24cce <register_events+0x72>
	switch (event->type) {
   24cea:	f89b 300d 	ldrb.w	r3, [fp, #13]
   24cee:	f003 030f 	and.w	r3, r3, #15
   24cf2:	2b02      	cmp	r3, #2
   24cf4:	d008      	beq.n	24d08 <register_events+0xac>
   24cf6:	2b04      	cmp	r3, #4
   24cf8:	d006      	beq.n	24d08 <register_events+0xac>
   24cfa:	2b01      	cmp	r3, #1
   24cfc:	d10b      	bne.n	24d16 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   24cfe:	f8db 0010 	ldr.w	r0, [fp, #16]
   24d02:	4622      	mov	r2, r4
   24d04:	4659      	mov	r1, fp
   24d06:	e004      	b.n	24d12 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   24d08:	f8db 0010 	ldr.w	r0, [fp, #16]
   24d0c:	4622      	mov	r2, r4
   24d0e:	4659      	mov	r1, fp
   24d10:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   24d12:	f7ff ff6e 	bl	24bf2 <add_event>
	event->poller = poller;
   24d16:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   24d1a:	3501      	adds	r5, #1
   24d1c:	e7d7      	b.n	24cce <register_events+0x72>

00024d1e <k_poll_event_init>:
{
   24d1e:	b510      	push	{r4, lr}
	event->type = type;
   24d20:	0452      	lsls	r2, r2, #17
   24d22:	0209      	lsls	r1, r1, #8
   24d24:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   24d28:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   24d2c:	430a      	orrs	r2, r1
   24d2e:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   24d30:	2400      	movs	r4, #0
	event->type = type;
   24d32:	430a      	orrs	r2, r1
	event->obj = obj;
   24d34:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   24d38:	6084      	str	r4, [r0, #8]
}
   24d3a:	bd10      	pop	{r4, pc}

00024d3c <z_handle_obj_poll_events>:
{
   24d3c:	4603      	mov	r3, r0
	return list->head == list;
   24d3e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   24d40:	4283      	cmp	r3, r0
   24d42:	d008      	beq.n	24d56 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   24d44:	e9d0 3200 	ldrd	r3, r2, [r0]
   24d48:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   24d4a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24d4c:	2300      	movs	r3, #0
	node->prev = NULL;
   24d4e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   24d52:	f7ff bef2 	b.w	24b3a <signal_poll_event>
}
   24d56:	4770      	bx	lr

00024d58 <k_mem_pool_malloc>:
{
   24d58:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   24d5a:	2408      	movs	r4, #8
   24d5c:	190a      	adds	r2, r1, r4
   24d5e:	d208      	bcs.n	24d72 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   24d60:	2600      	movs	r6, #0
   24d62:	2700      	movs	r7, #0
   24d64:	e9cd 6700 	strd	r6, r7, [sp]
   24d68:	eb0d 0104 	add.w	r1, sp, r4
   24d6c:	f7ff fb6d 	bl	2444a <k_mem_pool_alloc>
   24d70:	b110      	cbz	r0, 24d78 <k_mem_pool_malloc+0x20>
		return NULL;
   24d72:	2000      	movs	r0, #0
}
   24d74:	b004      	add	sp, #16
   24d76:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   24d78:	9802      	ldr	r0, [sp, #8]
   24d7a:	4622      	mov	r2, r4
   24d7c:	a902      	add	r1, sp, #8
   24d7e:	f7fc fd32 	bl	217e6 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   24d82:	9802      	ldr	r0, [sp, #8]
   24d84:	3008      	adds	r0, #8
   24d86:	e7f5      	b.n	24d74 <k_mem_pool_malloc+0x1c>

00024d88 <k_free>:
	if (ptr != NULL) {
   24d88:	b110      	cbz	r0, 24d90 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   24d8a:	3808      	subs	r0, #8
   24d8c:	f7ff bb76 	b.w	2447c <k_mem_pool_free_id>
}
   24d90:	4770      	bx	lr

00024d92 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   24d92:	4770      	bx	lr
