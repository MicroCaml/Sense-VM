data List a where
  Nil  : List a
  Cons : a -> List a -> List a

map : (a -> b) -> List a -> List b
map _ Nil = Nil
map f (Cons x xs) = Cons (f x) (map f xs)

test : List (List Int) -> Int -> List (List Int)
test xs n = map (\x -> map (\y -> y + n) x) xs