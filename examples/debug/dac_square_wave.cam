data List a where
  Nil  : List a
  Cons : a -> List a -> List a

head : List a -> a
head (Cons x xs) = x

tail : List a -> List a
tail Nil = Nil
tail (Cons x xs) = xs

not : Int -> Int
not 1 = 0
not 0 = 1

msec : Int -> Int
msec t = t * 84000

usec : Int -> Int
usec t = t * 84

after : Int -> Event a -> a
after t ev = syncT t 0 ev

afterUrgent : Int -> Event a -> a
afterUrgent t ev = syncT t 1 ev


twinkle : List Int
twinkle = Cons  1915 (Cons 1915 (Cons 1275 (Cons 1275 (Cons 1136
          (Cons 1136 (Cons 1275 (Cons 1432 (Cons 1432 (Cons 1519
          (Cons 1519 (Cons 1700 (Cons 1700 (Cons 1915 Nil)))))))))))))

dacC : Channel Int
dacC = channel ()

noteC : Channel Int
noteC = channel ()

noteDuration : Int
noteDuration = msec 1000

playerP : List Int -> Int -> () -> ()
playerP melody n void =
  if (n == 14)
  then let _ = after noteDuration (send noteC (usec (head twinkle))) in
       playerP twinkle 2 void
  else let _ = after noteDuration (send noteC (usec (head melody))) in
       playerP (tail melody) (n + 1) void


tuneP : Int -> Int -> () -> ()
tuneP timePeriod vol void =
  let newtp =
      after timePeriod (choose (recv noteC)
                               (wrap (send dacC (vol * 4095))
                                     (\x -> timePeriod))) in
  tuneP newtp (not vol) void

main =
  let _ = spawnExternal dacC 0 in
  let _ = spawn (tuneP (usec (head twinkle)) 1) in
  let _ = spawn (playerP (tail twinkle) 2) in
  ()
