
build/TEST.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000301 	.word	0x08000301
 8000008:	08000303 	.word	0x08000303
 800000c:	08000303 	.word	0x08000303
 8000010:	08000303 	.word	0x08000303
 8000014:	08000303 	.word	0x08000303
 8000018:	08000303 	.word	0x08000303
 800001c:	08000303 	.word	0x08000303
 8000020:	08000303 	.word	0x08000303
 8000024:	08000303 	.word	0x08000303
 8000028:	08000303 	.word	0x08000303
 800002c:	08006d51 	.word	0x08006d51
 8000030:	08000303 	.word	0x08000303
 8000034:	08000303 	.word	0x08000303
 8000038:	08000303 	.word	0x08000303
 800003c:	08000303 	.word	0x08000303
 8000040:	08000303 	.word	0x08000303
 8000044:	08000303 	.word	0x08000303
 8000048:	08000303 	.word	0x08000303
 800004c:	08000303 	.word	0x08000303
 8000050:	08000303 	.word	0x08000303
 8000054:	08000303 	.word	0x08000303
 8000058:	08003ea1 	.word	0x08003ea1
 800005c:	08003e51 	.word	0x08003e51
 8000060:	08003e01 	.word	0x08003e01
 8000064:	08003db1 	.word	0x08003db1
 8000068:	08003d61 	.word	0x08003d61
 800006c:	08003c11 	.word	0x08003c11
 8000070:	08003bc1 	.word	0x08003bc1
 8000074:	08003b71 	.word	0x08003b71
 8000078:	08003b21 	.word	0x08003b21
 800007c:	08003ae1 	.word	0x08003ae1
 8000080:	08003a91 	.word	0x08003a91
 8000084:	08003a41 	.word	0x08003a41
 8000088:	08000303 	.word	0x08000303
 800008c:	08000303 	.word	0x08000303
 8000090:	08000303 	.word	0x08000303
 8000094:	08000303 	.word	0x08000303
 8000098:	08000303 	.word	0x08000303
 800009c:	08003ce1 	.word	0x08003ce1
 80000a0:	08000303 	.word	0x08000303
 80000a4:	08000303 	.word	0x08000303
 80000a8:	08000303 	.word	0x08000303
 80000ac:	08000303 	.word	0x08000303
 80000b0:	08007b61 	.word	0x08007b61
 80000b4:	08000303 	.word	0x08000303
 80000b8:	08000303 	.word	0x08000303
 80000bc:	08000303 	.word	0x08000303
 80000c0:	08000303 	.word	0x08000303
 80000c4:	08000303 	.word	0x08000303
 80000c8:	08000303 	.word	0x08000303
 80000cc:	08000303 	.word	0x08000303
 80000d0:	08000303 	.word	0x08000303
 80000d4:	08000303 	.word	0x08000303
 80000d8:	08000303 	.word	0x08000303
 80000dc:	08000303 	.word	0x08000303
 80000e0:	08003c51 	.word	0x08003c51
 80000e4:	08000303 	.word	0x08000303
 80000e8:	08000303 	.word	0x08000303
 80000ec:	08000303 	.word	0x08000303
 80000f0:	08000303 	.word	0x08000303
 80000f4:	08000303 	.word	0x08000303
 80000f8:	08000303 	.word	0x08000303
 80000fc:	080039f1 	.word	0x080039f1
 8000100:	08000303 	.word	0x08000303
 8000104:	08000303 	.word	0x08000303
 8000108:	08005671 	.word	0x08005671
 800010c:	08000303 	.word	0x08000303
 8000110:	08000303 	.word	0x08000303
 8000114:	08000303 	.word	0x08000303
 8000118:	08000303 	.word	0x08000303
 800011c:	08000303 	.word	0x08000303
 8000120:	080039b1 	.word	0x080039b1
 8000124:	08003961 	.word	0x08003961
 8000128:	08003911 	.word	0x08003911
 800012c:	080038c1 	.word	0x080038c1
 8000130:	08003881 	.word	0x08003881
 8000134:	08000303 	.word	0x08000303
 8000138:	08000303 	.word	0x08000303
 800013c:	08000303 	.word	0x08000303
 8000140:	08000303 	.word	0x08000303
 8000144:	08000303 	.word	0x08000303
 8000148:	08000303 	.word	0x08000303
 800014c:	08007de1 	.word	0x08007de1
 8000150:	08003831 	.word	0x08003831
 8000154:	080037e1 	.word	0x080037e1
 8000158:	08003791 	.word	0x08003791
 800015c:	08000303 	.word	0x08000303
 8000160:	08000303 	.word	0x08000303
 8000164:	08000303 	.word	0x08000303
 8000168:	08000303 	.word	0x08000303
 800016c:	08000303 	.word	0x08000303
 8000170:	08000303 	.word	0x08000303
 8000174:	08007db1 	.word	0x08007db1
 8000178:	08000303 	.word	0x08000303
 800017c:	08000303 	.word	0x08000303
 8000180:	08000303 	.word	0x08000303
 8000184:	08000303 	.word	0x08000303
 8000188:	08000303 	.word	0x08000303
 800018c:	08000303 	.word	0x08000303
 8000190:	08000303 	.word	0x08000303
 8000194:	08000303 	.word	0x08000303
 8000198:	08000303 	.word	0x08000303
 800019c:	08000303 	.word	0x08000303
 80001a0:	08000303 	.word	0x08000303
 80001a4:	08000303 	.word	0x08000303
 80001a8:	08000303 	.word	0x08000303
 80001ac:	08000303 	.word	0x08000303
 80001b0:	08000303 	.word	0x08000303
 80001b4:	08000303 	.word	0x08000303
 80001b8:	08000303 	.word	0x08000303
 80001bc:	08000303 	.word	0x08000303
 80001c0:	08000303 	.word	0x08000303
 80001c4:	08000303 	.word	0x08000303
 80001c8:	08000303 	.word	0x08000303
 80001cc:	08000303 	.word	0x08000303
 80001d0:	08000303 	.word	0x08000303
 80001d4:	08000303 	.word	0x08000303
 80001d8:	08000303 	.word	0x08000303
 80001dc:	08000303 	.word	0x08000303

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4838      	ldr	r0, [pc, #224]	; (80002c4 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4837      	ldr	r0, [pc, #220]	; (80002c8 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4837      	ldr	r0, [pc, #220]	; (80002cc <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]
#endif

#if CRT0_INIT_FPU == TRUE
                /* FPU FPCCR initialization.*/
                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 80001fa:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_FPCCR_INIT >> 16
 80001fe:	f2cc 0000 	movt	r0, #49152	; 0xc000
                movw    r1, #SCB_FPCCR & 0xFFFF
 8000202:	f64e 7134 	movw	r1, #61236	; 0xef34
                movt    r1, #SCB_FPCCR >> 16
 8000206:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800020a:	6008      	str	r0, [r1, #0]
                dsb
 800020c:	f3bf 8f4f 	dsb	sy
                isb
 8000210:	f3bf 8f6f 	isb	sy

                /* CPACR initialization.*/
                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 8000214:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_CPACR_INIT >> 16
 8000218:	f2c0 00f0 	movt	r0, #240	; 0xf0
                movw    r1, #SCB_CPACR & 0xFFFF
 800021c:	f64e 5188 	movw	r1, #60808	; 0xed88
                movt    r1, #SCB_CPACR >> 16
 8000220:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000224:	6008      	str	r0, [r1, #0]
                dsb
 8000226:	f3bf 8f4f 	dsb	sy
                isb
 800022a:	f3bf 8f6f 	isb	sy

                /* FPU FPSCR initially cleared.*/
                mov     r0, #0
 800022e:	f04f 0000 	mov.w	r0, #0
                vmsr    FPSCR, r0
 8000232:	eee1 0a10 	vmsr	fpscr, r0

                /* FPU FPDSCR initially cleared.*/
                movw    r1, #SCB_FPDSCR & 0xFFFF
 8000236:	f64e 713c 	movw	r1, #61244	; 0xef3c
                movt    r1, #SCB_FPDSCR >> 16
 800023a:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800023e:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 8000240:	2006      	movs	r0, #6
#else
                movs    r0, #CRT0_CONTROL_INIT
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 8000242:	f380 8814 	msr	CONTROL, r0
                isb
 8000246:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 800024a:	f001 fe89 	bl	8001f60 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 800024e:	f007 fb17 	bl	8007880 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000252:	481f      	ldr	r0, [pc, #124]	; (80002d0 <endfiniloop+0x10>)
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000254:	491f      	ldr	r1, [pc, #124]	; (80002d4 <endfiniloop+0x14>)
                ldr     r2, =__main_stack_end__
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <endfiniloop+0x4>)

08000258 <msloop>:
msloop:
                cmp     r1, r2
 8000258:	4291      	cmp	r1, r2
                itt     lo
 800025a:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800025c:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 8000260:	e7fa      	bcc.n	8000258 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000262:	491d      	ldr	r1, [pc, #116]	; (80002d8 <endfiniloop+0x18>)
                ldr     r2, =__process_stack_end__
 8000264:	4a18      	ldr	r2, [pc, #96]	; (80002c8 <endfiniloop+0x8>)

08000266 <psloop>:
psloop:
                cmp     r1, r2
 8000266:	4291      	cmp	r1, r2
                itt     lo
 8000268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800026e:	e7fa      	bcc.n	8000266 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 8000270:	491a      	ldr	r1, [pc, #104]	; (80002dc <endfiniloop+0x1c>)
                ldr     r2, =__data_base__
 8000272:	4a1b      	ldr	r2, [pc, #108]	; (80002e0 <endfiniloop+0x20>)
                ldr     r3, =__data_end__
 8000274:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <endfiniloop+0x24>)

08000276 <dloop>:
dloop:
                cmp     r2, r3
 8000276:	429a      	cmp	r2, r3
                ittt    lo
 8000278:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 800027a:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800027e:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 8000282:	e7f8      	bcc.n	8000276 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000284:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000286:	4918      	ldr	r1, [pc, #96]	; (80002e8 <endfiniloop+0x28>)
                ldr     r2, =__bss_end__
 8000288:	4a18      	ldr	r2, [pc, #96]	; (80002ec <endfiniloop+0x2c>)

0800028a <bloop>:
bloop:
                cmp     r1, r2
 800028a:	4291      	cmp	r1, r2
                itt     lo
 800028c:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800028e:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 8000292:	e7fa      	bcc.n	800028a <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000294:	f001 fe2c 	bl	8001ef0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000298:	f001 fe5a 	bl	8001f50 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 800029c:	4c14      	ldr	r4, [pc, #80]	; (80002f0 <endfiniloop+0x30>)
                ldr     r5, =__init_array_end__
 800029e:	4d15      	ldr	r5, [pc, #84]	; (80002f4 <endfiniloop+0x34>)

080002a0 <initloop>:
initloop:
                cmp     r4, r5
 80002a0:	42ac      	cmp	r4, r5
                bge     endinitloop
 80002a2:	da03      	bge.n	80002ac <endinitloop>
                ldr     r1, [r4], #4
 80002a4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002a8:	4788      	blx	r1
                b       initloop
 80002aa:	e7f9      	b.n	80002a0 <initloop>

080002ac <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80002ac:	f002 f858 	bl	8002360 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80002b0:	4c11      	ldr	r4, [pc, #68]	; (80002f8 <endfiniloop+0x38>)
                ldr     r5, =__fini_array_end__
 80002b2:	4d12      	ldr	r5, [pc, #72]	; (80002fc <endfiniloop+0x3c>)

080002b4 <finiloop>:
finiloop:
                cmp     r4, r5
 80002b4:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80002b6:	da03      	bge.n	80002c0 <endfiniloop>
                ldr     r1, [r4], #4
 80002b8:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002bc:	4788      	blx	r1
                b       finiloop
 80002be:	e7f9      	b.n	80002b4 <finiloop>

080002c0 <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80002c0:	f001 be3e 	b.w	8001f40 <__default_exit>
                /* Interrupts are globally masked initially.*/
                cpsid   i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80002c4:	20000400 	.word	0x20000400
                msr     MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80002c8:	20000800 	.word	0x20000800
                msr     PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80002cc:	08000000 	.word	0x08000000

                /* Early initialization.*/
                bl      __early_init

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 80002d0:	55555555 	.word	0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 80002d4:	20000000 	.word	0x20000000
                blo     msloop

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 80002d8:	20000400 	.word	0x20000400
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 80002dc:	0800d2c8 	.word	0x0800d2c8
                ldr     r2, =__data_base__
 80002e0:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 80002e4:	20001174 	.word	0x20001174

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
                ldr     r1, =__bss_base__
 80002e8:	20001178 	.word	0x20001178
                ldr     r2, =__bss_end__
 80002ec:	2000bb4c 	.word	0x2000bb4c
                /* Late initialization..*/
                bl      __late_init

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 80002f0:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002f4:	080001e0 	.word	0x080001e0
                /* Main program invocation, r0 contains the returned value.*/
                bl      main

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80002f8:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002fc:	080001e0 	.word	0x080001e0

08000300 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000300:	e76e      	b.n	80001e0 <_crt0_entry>

08000302 <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 8000302:	f000 f800 	bl	8000306 <_unhandled_exception>

08000306 <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 8000306:	e7fe      	b.n	8000306 <_unhandled_exception>

08000308 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                /* Saving FPU context.*/
                vpush   {s16-s31}
 800030c:	ed2d 8a10 	vpush	{s16-s31}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000310:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000314:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 8000316:	469d      	mov	sp, r3
#endif
#endif

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
 8000318:	ecbd 8a10 	vpop	{s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800031c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000320 <_port_thread_start>:
_port_thread_start:
#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
                bl      _port_set_region
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 8000320:	f007 fa8e 	bl	8007840 <_dbg_check_unlock>
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000324:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000326:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 800032a:	4628      	mov	r0, r5
                blx     r4
 800032c:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800032e:	2000      	movs	r0, #0
                bl      chThdExit
 8000330:	f006 fe5e 	bl	8006ff0 <chThdExit>

08000334 <_zombies>:
_zombies:       b       _zombies
 8000334:	e7fe      	b.n	8000334 <_zombies>

08000336 <_port_switch_from_isr>:
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
 8000336:	f007 fa93 	bl	8007860 <_dbg_check_lock>
#endif
                bl      chSchDoReschedule
 800033a:	f006 fd89 	bl	8006e50 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 800033e:	f007 fa7f 	bl	8007840 <_dbg_check_unlock>

08000342 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000342:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000344:	e7fe      	b.n	8000344 <_port_exit_from_isr+0x2>
	...

08000348 <memcpy>:
 8000348:	4684      	mov	ip, r0
 800034a:	ea41 0300 	orr.w	r3, r1, r0
 800034e:	f013 0303 	ands.w	r3, r3, #3
 8000352:	d16d      	bne.n	8000430 <memcpy+0xe8>
 8000354:	3a40      	subs	r2, #64	; 0x40
 8000356:	d341      	bcc.n	80003dc <memcpy+0x94>
 8000358:	f851 3b04 	ldr.w	r3, [r1], #4
 800035c:	f840 3b04 	str.w	r3, [r0], #4
 8000360:	f851 3b04 	ldr.w	r3, [r1], #4
 8000364:	f840 3b04 	str.w	r3, [r0], #4
 8000368:	f851 3b04 	ldr.w	r3, [r1], #4
 800036c:	f840 3b04 	str.w	r3, [r0], #4
 8000370:	f851 3b04 	ldr.w	r3, [r1], #4
 8000374:	f840 3b04 	str.w	r3, [r0], #4
 8000378:	f851 3b04 	ldr.w	r3, [r1], #4
 800037c:	f840 3b04 	str.w	r3, [r0], #4
 8000380:	f851 3b04 	ldr.w	r3, [r1], #4
 8000384:	f840 3b04 	str.w	r3, [r0], #4
 8000388:	f851 3b04 	ldr.w	r3, [r1], #4
 800038c:	f840 3b04 	str.w	r3, [r0], #4
 8000390:	f851 3b04 	ldr.w	r3, [r1], #4
 8000394:	f840 3b04 	str.w	r3, [r0], #4
 8000398:	f851 3b04 	ldr.w	r3, [r1], #4
 800039c:	f840 3b04 	str.w	r3, [r0], #4
 80003a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a4:	f840 3b04 	str.w	r3, [r0], #4
 80003a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003ac:	f840 3b04 	str.w	r3, [r0], #4
 80003b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b4:	f840 3b04 	str.w	r3, [r0], #4
 80003b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003bc:	f840 3b04 	str.w	r3, [r0], #4
 80003c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c4:	f840 3b04 	str.w	r3, [r0], #4
 80003c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003cc:	f840 3b04 	str.w	r3, [r0], #4
 80003d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d4:	f840 3b04 	str.w	r3, [r0], #4
 80003d8:	3a40      	subs	r2, #64	; 0x40
 80003da:	d2bd      	bcs.n	8000358 <memcpy+0x10>
 80003dc:	3230      	adds	r2, #48	; 0x30
 80003de:	d311      	bcc.n	8000404 <memcpy+0xbc>
 80003e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e4:	f840 3b04 	str.w	r3, [r0], #4
 80003e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003ec:	f840 3b04 	str.w	r3, [r0], #4
 80003f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f4:	f840 3b04 	str.w	r3, [r0], #4
 80003f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003fc:	f840 3b04 	str.w	r3, [r0], #4
 8000400:	3a10      	subs	r2, #16
 8000402:	d2ed      	bcs.n	80003e0 <memcpy+0x98>
 8000404:	320c      	adds	r2, #12
 8000406:	d305      	bcc.n	8000414 <memcpy+0xcc>
 8000408:	f851 3b04 	ldr.w	r3, [r1], #4
 800040c:	f840 3b04 	str.w	r3, [r0], #4
 8000410:	3a04      	subs	r2, #4
 8000412:	d2f9      	bcs.n	8000408 <memcpy+0xc0>
 8000414:	3204      	adds	r2, #4
 8000416:	d008      	beq.n	800042a <memcpy+0xe2>
 8000418:	07d2      	lsls	r2, r2, #31
 800041a:	bf1c      	itt	ne
 800041c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000420:	f800 3b01 	strbne.w	r3, [r0], #1
 8000424:	d301      	bcc.n	800042a <memcpy+0xe2>
 8000426:	880b      	ldrh	r3, [r1, #0]
 8000428:	8003      	strh	r3, [r0, #0]
 800042a:	4660      	mov	r0, ip
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	2a08      	cmp	r2, #8
 8000432:	d313      	bcc.n	800045c <memcpy+0x114>
 8000434:	078b      	lsls	r3, r1, #30
 8000436:	d08d      	beq.n	8000354 <memcpy+0xc>
 8000438:	f010 0303 	ands.w	r3, r0, #3
 800043c:	d08a      	beq.n	8000354 <memcpy+0xc>
 800043e:	f1c3 0304 	rsb	r3, r3, #4
 8000442:	1ad2      	subs	r2, r2, r3
 8000444:	07db      	lsls	r3, r3, #31
 8000446:	bf1c      	itt	ne
 8000448:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800044c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000450:	d380      	bcc.n	8000354 <memcpy+0xc>
 8000452:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000456:	f820 3b02 	strh.w	r3, [r0], #2
 800045a:	e77b      	b.n	8000354 <memcpy+0xc>
 800045c:	3a04      	subs	r2, #4
 800045e:	d3d9      	bcc.n	8000414 <memcpy+0xcc>
 8000460:	3a01      	subs	r2, #1
 8000462:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000466:	f800 3b01 	strb.w	r3, [r0], #1
 800046a:	d2f9      	bcs.n	8000460 <memcpy+0x118>
 800046c:	780b      	ldrb	r3, [r1, #0]
 800046e:	7003      	strb	r3, [r0, #0]
 8000470:	784b      	ldrb	r3, [r1, #1]
 8000472:	7043      	strb	r3, [r0, #1]
 8000474:	788b      	ldrb	r3, [r1, #2]
 8000476:	7083      	strb	r3, [r0, #2]
 8000478:	4660      	mov	r0, ip
 800047a:	4770      	bx	lr

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	; 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80005ba:	f1a4 0401 	sub.w	r4, r4, #1
 80005be:	d1e9      	bne.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f092 0f00 	teq	r2, #0
 8000766:	bf14      	ite	ne
 8000768:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800076c:	4770      	bxeq	lr
 800076e:	b530      	push	{r4, r5, lr}
 8000770:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000774:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000778:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800077c:	e720      	b.n	80005c0 <__adddf3+0x138>
 800077e:	bf00      	nop

08000780 <__aeabi_ul2d>:
 8000780:	ea50 0201 	orrs.w	r2, r0, r1
 8000784:	bf08      	it	eq
 8000786:	4770      	bxeq	lr
 8000788:	b530      	push	{r4, r5, lr}
 800078a:	f04f 0500 	mov.w	r5, #0
 800078e:	e00a      	b.n	80007a6 <__aeabi_l2d+0x16>

08000790 <__aeabi_l2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800079e:	d502      	bpl.n	80007a6 <__aeabi_l2d+0x16>
 80007a0:	4240      	negs	r0, r0
 80007a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007b2:	f43f aedc 	beq.w	800056e <__adddf3+0xe6>
 80007b6:	f04f 0203 	mov.w	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ce:	f1c2 0320 	rsb	r3, r2, #32
 80007d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007d6:	fa20 f002 	lsr.w	r0, r0, r2
 80007da:	fa01 fe03 	lsl.w	lr, r1, r3
 80007de:	ea40 000e 	orr.w	r0, r0, lr
 80007e2:	fa21 f102 	lsr.w	r1, r1, r2
 80007e6:	4414      	add	r4, r2
 80007e8:	e6c1      	b.n	800056e <__adddf3+0xe6>
 80007ea:	bf00      	nop

080007ec <__aeabi_dmul>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8de 	bleq	80009c8 <__aeabi_dmul+0x1dc>
 800080c:	442c      	add	r4, r5
 800080e:	ea81 0603 	eor.w	r6, r1, r3
 8000812:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000816:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800081a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800081e:	bf18      	it	ne
 8000820:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000824:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000828:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800082c:	d038      	beq.n	80008a0 <__aeabi_dmul+0xb4>
 800082e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000832:	f04f 0500 	mov.w	r5, #0
 8000836:	fbe1 e502 	umlal	lr, r5, r1, r2
 800083a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800083e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000842:	f04f 0600 	mov.w	r6, #0
 8000846:	fbe1 5603 	umlal	r5, r6, r1, r3
 800084a:	f09c 0f00 	teq	ip, #0
 800084e:	bf18      	it	ne
 8000850:	f04e 0e01 	orrne.w	lr, lr, #1
 8000854:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000858:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800085c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000860:	d204      	bcs.n	800086c <__aeabi_dmul+0x80>
 8000862:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000866:	416d      	adcs	r5, r5
 8000868:	eb46 0606 	adc.w	r6, r6, r6
 800086c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000870:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000874:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000878:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800087c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000880:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000884:	bf88      	it	hi
 8000886:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800088a:	d81e      	bhi.n	80008ca <__aeabi_dmul+0xde>
 800088c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000890:	bf08      	it	eq
 8000892:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80008a4:	ea46 0101 	orr.w	r1, r6, r1
 80008a8:	ea40 0002 	orr.w	r0, r0, r2
 80008ac:	ea81 0103 	eor.w	r1, r1, r3
 80008b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80008b4:	bfc2      	ittt	gt
 80008b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008be:	bd70      	popgt	{r4, r5, r6, pc}
 80008c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c4:	f04f 0e00 	mov.w	lr, #0
 80008c8:	3c01      	subs	r4, #1
 80008ca:	f300 80ab 	bgt.w	8000a24 <__aeabi_dmul+0x238>
 80008ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80008d2:	bfde      	ittt	le
 80008d4:	2000      	movle	r0, #0
 80008d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80008da:	bd70      	pople	{r4, r5, r6, pc}
 80008dc:	f1c4 0400 	rsb	r4, r4, #0
 80008e0:	3c20      	subs	r4, #32
 80008e2:	da35      	bge.n	8000950 <__aeabi_dmul+0x164>
 80008e4:	340c      	adds	r4, #12
 80008e6:	dc1b      	bgt.n	8000920 <__aeabi_dmul+0x134>
 80008e8:	f104 0414 	add.w	r4, r4, #20
 80008ec:	f1c4 0520 	rsb	r5, r4, #32
 80008f0:	fa00 f305 	lsl.w	r3, r0, r5
 80008f4:	fa20 f004 	lsr.w	r0, r0, r4
 80008f8:	fa01 f205 	lsl.w	r2, r1, r5
 80008fc:	ea40 0002 	orr.w	r0, r0, r2
 8000900:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000904:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000908:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800090c:	fa21 f604 	lsr.w	r6, r1, r4
 8000910:	eb42 0106 	adc.w	r1, r2, r6
 8000914:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000918:	bf08      	it	eq
 800091a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f1c4 040c 	rsb	r4, r4, #12
 8000924:	f1c4 0520 	rsb	r5, r4, #32
 8000928:	fa00 f304 	lsl.w	r3, r0, r4
 800092c:	fa20 f005 	lsr.w	r0, r0, r5
 8000930:	fa01 f204 	lsl.w	r2, r1, r4
 8000934:	ea40 0002 	orr.w	r0, r0, r2
 8000938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800093c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000940:	f141 0100 	adc.w	r1, r1, #0
 8000944:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000948:	bf08      	it	eq
 800094a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f1c4 0520 	rsb	r5, r4, #32
 8000954:	fa00 f205 	lsl.w	r2, r0, r5
 8000958:	ea4e 0e02 	orr.w	lr, lr, r2
 800095c:	fa20 f304 	lsr.w	r3, r0, r4
 8000960:	fa01 f205 	lsl.w	r2, r1, r5
 8000964:	ea43 0302 	orr.w	r3, r3, r2
 8000968:	fa21 f004 	lsr.w	r0, r1, r4
 800096c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000970:	fa21 f204 	lsr.w	r2, r1, r4
 8000974:	ea20 0002 	bic.w	r0, r0, r2
 8000978:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800097c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000980:	bf08      	it	eq
 8000982:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f094 0f00 	teq	r4, #0
 800098c:	d10f      	bne.n	80009ae <__aeabi_dmul+0x1c2>
 800098e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000992:	0040      	lsls	r0, r0, #1
 8000994:	eb41 0101 	adc.w	r1, r1, r1
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf08      	it	eq
 800099e:	3c01      	subeq	r4, #1
 80009a0:	d0f7      	beq.n	8000992 <__aeabi_dmul+0x1a6>
 80009a2:	ea41 0106 	orr.w	r1, r1, r6
 80009a6:	f095 0f00 	teq	r5, #0
 80009aa:	bf18      	it	ne
 80009ac:	4770      	bxne	lr
 80009ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80009b2:	0052      	lsls	r2, r2, #1
 80009b4:	eb43 0303 	adc.w	r3, r3, r3
 80009b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80009bc:	bf08      	it	eq
 80009be:	3d01      	subeq	r5, #1
 80009c0:	d0f7      	beq.n	80009b2 <__aeabi_dmul+0x1c6>
 80009c2:	ea43 0306 	orr.w	r3, r3, r6
 80009c6:	4770      	bx	lr
 80009c8:	ea94 0f0c 	teq	r4, ip
 80009cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d0:	bf18      	it	ne
 80009d2:	ea95 0f0c 	teqne	r5, ip
 80009d6:	d00c      	beq.n	80009f2 <__aeabi_dmul+0x206>
 80009d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009dc:	bf18      	it	ne
 80009de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009e2:	d1d1      	bne.n	8000988 <__aeabi_dmul+0x19c>
 80009e4:	ea81 0103 	eor.w	r1, r1, r3
 80009e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	bd70      	pop	{r4, r5, r6, pc}
 80009f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f6:	bf06      	itte	eq
 80009f8:	4610      	moveq	r0, r2
 80009fa:	4619      	moveq	r1, r3
 80009fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a00:	d019      	beq.n	8000a36 <__aeabi_dmul+0x24a>
 8000a02:	ea94 0f0c 	teq	r4, ip
 8000a06:	d102      	bne.n	8000a0e <__aeabi_dmul+0x222>
 8000a08:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a0c:	d113      	bne.n	8000a36 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	d105      	bne.n	8000a20 <__aeabi_dmul+0x234>
 8000a14:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a18:	bf1c      	itt	ne
 8000a1a:	4610      	movne	r0, r2
 8000a1c:	4619      	movne	r1, r3
 8000a1e:	d10a      	bne.n	8000a36 <__aeabi_dmul+0x24a>
 8000a20:	ea81 0103 	eor.w	r1, r1, r3
 8000a24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a28:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a30:	f04f 0000 	mov.w	r0, #0
 8000a34:	bd70      	pop	{r4, r5, r6, pc}
 8000a36:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a3a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}

08000a40 <__aeabi_ddiv>:
 8000a40:	b570      	push	{r4, r5, r6, lr}
 8000a42:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a4e:	bf1d      	ittte	ne
 8000a50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000a54:	ea94 0f0c 	teqne	r4, ip
 8000a58:	ea95 0f0c 	teqne	r5, ip
 8000a5c:	f000 f8a7 	bleq	8000bae <__aeabi_ddiv+0x16e>
 8000a60:	eba4 0405 	sub.w	r4, r4, r5
 8000a64:	ea81 0e03 	eor.w	lr, r1, r3
 8000a68:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000a70:	f000 8088 	beq.w	8000b84 <__aeabi_ddiv+0x144>
 8000a74:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000a78:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000a7c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000a80:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000a84:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000a88:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000a8c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000a90:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000a94:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000a98:	429d      	cmp	r5, r3
 8000a9a:	bf08      	it	eq
 8000a9c:	4296      	cmpeq	r6, r2
 8000a9e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000aa2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000aa6:	d202      	bcs.n	8000aae <__aeabi_ddiv+0x6e>
 8000aa8:	085b      	lsrs	r3, r3, #1
 8000aaa:	ea4f 0232 	mov.w	r2, r2, rrx
 8000aae:	1ab6      	subs	r6, r6, r2
 8000ab0:	eb65 0503 	sbc.w	r5, r5, r3
 8000ab4:	085b      	lsrs	r3, r3, #1
 8000ab6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000aba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000abe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000ac2:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ac6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000aca:	bf22      	ittt	cs
 8000acc:	1ab6      	subcs	r6, r6, r2
 8000ace:	4675      	movcs	r5, lr
 8000ad0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ad4:	085b      	lsrs	r3, r3, #1
 8000ad6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000ada:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ade:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ae2:	bf22      	ittt	cs
 8000ae4:	1ab6      	subcs	r6, r6, r2
 8000ae6:	4675      	movcs	r5, lr
 8000ae8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000aec:	085b      	lsrs	r3, r3, #1
 8000aee:	ea4f 0232 	mov.w	r2, r2, rrx
 8000af2:	ebb6 0e02 	subs.w	lr, r6, r2
 8000af6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000afa:	bf22      	ittt	cs
 8000afc:	1ab6      	subcs	r6, r6, r2
 8000afe:	4675      	movcs	r5, lr
 8000b00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b04:	085b      	lsrs	r3, r3, #1
 8000b06:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b0a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b12:	bf22      	ittt	cs
 8000b14:	1ab6      	subcs	r6, r6, r2
 8000b16:	4675      	movcs	r5, lr
 8000b18:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b1c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b20:	d018      	beq.n	8000b54 <__aeabi_ddiv+0x114>
 8000b22:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b26:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b2a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b2e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b32:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000b36:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000b3a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000b3e:	d1c0      	bne.n	8000ac2 <__aeabi_ddiv+0x82>
 8000b40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b44:	d10b      	bne.n	8000b5e <__aeabi_ddiv+0x11e>
 8000b46:	ea41 0100 	orr.w	r1, r1, r0
 8000b4a:	f04f 0000 	mov.w	r0, #0
 8000b4e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000b52:	e7b6      	b.n	8000ac2 <__aeabi_ddiv+0x82>
 8000b54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b58:	bf04      	itt	eq
 8000b5a:	4301      	orreq	r1, r0
 8000b5c:	2000      	moveq	r0, #0
 8000b5e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000b62:	bf88      	it	hi
 8000b64:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000b68:	f63f aeaf 	bhi.w	80008ca <__aeabi_dmul+0xde>
 8000b6c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000b70:	bf04      	itt	eq
 8000b72:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000b76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000b7a:	f150 0000 	adcs.w	r0, r0, #0
 8000b7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b82:	bd70      	pop	{r4, r5, r6, pc}
 8000b84:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000b88:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000b8c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000b90:	bfc2      	ittt	gt
 8000b92:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000b96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b9a:	bd70      	popgt	{r4, r5, r6, pc}
 8000b9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba0:	f04f 0e00 	mov.w	lr, #0
 8000ba4:	3c01      	subs	r4, #1
 8000ba6:	e690      	b.n	80008ca <__aeabi_dmul+0xde>
 8000ba8:	ea45 0e06 	orr.w	lr, r5, r6
 8000bac:	e68d      	b.n	80008ca <__aeabi_dmul+0xde>
 8000bae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000bb2:	ea94 0f0c 	teq	r4, ip
 8000bb6:	bf08      	it	eq
 8000bb8:	ea95 0f0c 	teqeq	r5, ip
 8000bbc:	f43f af3b 	beq.w	8000a36 <__aeabi_dmul+0x24a>
 8000bc0:	ea94 0f0c 	teq	r4, ip
 8000bc4:	d10a      	bne.n	8000bdc <__aeabi_ddiv+0x19c>
 8000bc6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000bca:	f47f af34 	bne.w	8000a36 <__aeabi_dmul+0x24a>
 8000bce:	ea95 0f0c 	teq	r5, ip
 8000bd2:	f47f af25 	bne.w	8000a20 <__aeabi_dmul+0x234>
 8000bd6:	4610      	mov	r0, r2
 8000bd8:	4619      	mov	r1, r3
 8000bda:	e72c      	b.n	8000a36 <__aeabi_dmul+0x24a>
 8000bdc:	ea95 0f0c 	teq	r5, ip
 8000be0:	d106      	bne.n	8000bf0 <__aeabi_ddiv+0x1b0>
 8000be2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000be6:	f43f aefd 	beq.w	80009e4 <__aeabi_dmul+0x1f8>
 8000bea:	4610      	mov	r0, r2
 8000bec:	4619      	mov	r1, r3
 8000bee:	e722      	b.n	8000a36 <__aeabi_dmul+0x24a>
 8000bf0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000bf4:	bf18      	it	ne
 8000bf6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000bfa:	f47f aec5 	bne.w	8000988 <__aeabi_dmul+0x19c>
 8000bfe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c02:	f47f af0d 	bne.w	8000a20 <__aeabi_dmul+0x234>
 8000c06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c0a:	f47f aeeb 	bne.w	80009e4 <__aeabi_dmul+0x1f8>
 8000c0e:	e712      	b.n	8000a36 <__aeabi_dmul+0x24a>

08000c10 <__gedf2>:
 8000c10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000c14:	e006      	b.n	8000c24 <__cmpdf2+0x4>
 8000c16:	bf00      	nop

08000c18 <__ledf2>:
 8000c18:	f04f 0c01 	mov.w	ip, #1
 8000c1c:	e002      	b.n	8000c24 <__cmpdf2+0x4>
 8000c1e:	bf00      	nop

08000c20 <__cmpdf2>:
 8000c20:	f04f 0c01 	mov.w	ip, #1
 8000c24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c34:	bf18      	it	ne
 8000c36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000c3a:	d01b      	beq.n	8000c74 <__cmpdf2+0x54>
 8000c3c:	b001      	add	sp, #4
 8000c3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000c42:	bf0c      	ite	eq
 8000c44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000c48:	ea91 0f03 	teqne	r1, r3
 8000c4c:	bf02      	ittt	eq
 8000c4e:	ea90 0f02 	teqeq	r0, r2
 8000c52:	2000      	moveq	r0, #0
 8000c54:	4770      	bxeq	lr
 8000c56:	f110 0f00 	cmn.w	r0, #0
 8000c5a:	ea91 0f03 	teq	r1, r3
 8000c5e:	bf58      	it	pl
 8000c60:	4299      	cmppl	r1, r3
 8000c62:	bf08      	it	eq
 8000c64:	4290      	cmpeq	r0, r2
 8000c66:	bf2c      	ite	cs
 8000c68:	17d8      	asrcs	r0, r3, #31
 8000c6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000c6e:	f040 0001 	orr.w	r0, r0, #1
 8000c72:	4770      	bx	lr
 8000c74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c7c:	d102      	bne.n	8000c84 <__cmpdf2+0x64>
 8000c7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c82:	d107      	bne.n	8000c94 <__cmpdf2+0x74>
 8000c84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c8c:	d1d6      	bne.n	8000c3c <__cmpdf2+0x1c>
 8000c8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c92:	d0d3      	beq.n	8000c3c <__cmpdf2+0x1c>
 8000c94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_cdrcmple>:
 8000c9c:	4684      	mov	ip, r0
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	4662      	mov	r2, ip
 8000ca2:	468c      	mov	ip, r1
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4663      	mov	r3, ip
 8000ca8:	e000      	b.n	8000cac <__aeabi_cdcmpeq>
 8000caa:	bf00      	nop

08000cac <__aeabi_cdcmpeq>:
 8000cac:	b501      	push	{r0, lr}
 8000cae:	f7ff ffb7 	bl	8000c20 <__cmpdf2>
 8000cb2:	2800      	cmp	r0, #0
 8000cb4:	bf48      	it	mi
 8000cb6:	f110 0f00 	cmnmi.w	r0, #0
 8000cba:	bd01      	pop	{r0, pc}

08000cbc <__aeabi_dcmpeq>:
 8000cbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc0:	f7ff fff4 	bl	8000cac <__aeabi_cdcmpeq>
 8000cc4:	bf0c      	ite	eq
 8000cc6:	2001      	moveq	r0, #1
 8000cc8:	2000      	movne	r0, #0
 8000cca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cce:	bf00      	nop

08000cd0 <__aeabi_dcmplt>:
 8000cd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd4:	f7ff ffea 	bl	8000cac <__aeabi_cdcmpeq>
 8000cd8:	bf34      	ite	cc
 8000cda:	2001      	movcc	r0, #1
 8000cdc:	2000      	movcs	r0, #0
 8000cde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_dcmple>:
 8000ce4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ce8:	f7ff ffe0 	bl	8000cac <__aeabi_cdcmpeq>
 8000cec:	bf94      	ite	ls
 8000cee:	2001      	movls	r0, #1
 8000cf0:	2000      	movhi	r0, #0
 8000cf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_dcmpge>:
 8000cf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cfc:	f7ff ffce 	bl	8000c9c <__aeabi_cdrcmple>
 8000d00:	bf94      	ite	ls
 8000d02:	2001      	movls	r0, #1
 8000d04:	2000      	movhi	r0, #0
 8000d06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d0a:	bf00      	nop

08000d0c <__aeabi_dcmpgt>:
 8000d0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d10:	f7ff ffc4 	bl	8000c9c <__aeabi_cdrcmple>
 8000d14:	bf34      	ite	cc
 8000d16:	2001      	movcc	r0, #1
 8000d18:	2000      	movcs	r0, #0
 8000d1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d1e:	bf00      	nop

08000d20 <__aeabi_d2iz>:
 8000d20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000d28:	d215      	bcs.n	8000d56 <__aeabi_d2iz+0x36>
 8000d2a:	d511      	bpl.n	8000d50 <__aeabi_d2iz+0x30>
 8000d2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000d30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000d34:	d912      	bls.n	8000d5c <__aeabi_d2iz+0x3c>
 8000d36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000d42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d46:	fa23 f002 	lsr.w	r0, r3, r2
 8000d4a:	bf18      	it	ne
 8000d4c:	4240      	negne	r0, r0
 8000d4e:	4770      	bx	lr
 8000d50:	f04f 0000 	mov.w	r0, #0
 8000d54:	4770      	bx	lr
 8000d56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d5a:	d105      	bne.n	8000d68 <__aeabi_d2iz+0x48>
 8000d5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000d60:	bf08      	it	eq
 8000d62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d66:	4770      	bx	lr
 8000d68:	f04f 0000 	mov.w	r0, #0
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <__aeabi_uldivmod>:
 8000d70:	b953      	cbnz	r3, 8000d88 <__aeabi_uldivmod+0x18>
 8000d72:	b94a      	cbnz	r2, 8000d88 <__aeabi_uldivmod+0x18>
 8000d74:	2900      	cmp	r1, #0
 8000d76:	bf08      	it	eq
 8000d78:	2800      	cmpeq	r0, #0
 8000d7a:	bf1c      	itt	ne
 8000d7c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d80:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d84:	f000 b83c 	b.w	8000e00 <__aeabi_idiv0>
 8000d88:	b082      	sub	sp, #8
 8000d8a:	46ec      	mov	ip, sp
 8000d8c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d90:	f000 f81e 	bl	8000dd0 <__gnu_uldivmod_helper>
 8000d94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d98:	b002      	add	sp, #8
 8000d9a:	bc0c      	pop	{r2, r3}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <__gnu_ldivmod_helper>:
 8000da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000da4:	9c06      	ldr	r4, [sp, #24]
 8000da6:	4615      	mov	r5, r2
 8000da8:	4606      	mov	r6, r0
 8000daa:	460f      	mov	r7, r1
 8000dac:	4698      	mov	r8, r3
 8000dae:	f000 f829 	bl	8000e04 <__divdi3>
 8000db2:	fb05 f301 	mul.w	r3, r5, r1
 8000db6:	fb00 3808 	mla	r8, r0, r8, r3
 8000dba:	fba5 2300 	umull	r2, r3, r5, r0
 8000dbe:	1ab2      	subs	r2, r6, r2
 8000dc0:	4443      	add	r3, r8
 8000dc2:	eb67 0303 	sbc.w	r3, r7, r3
 8000dc6:	e9c4 2300 	strd	r2, r3, [r4]
 8000dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dce:	bf00      	nop

08000dd0 <__gnu_uldivmod_helper>:
 8000dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dd4:	9c06      	ldr	r4, [sp, #24]
 8000dd6:	4690      	mov	r8, r2
 8000dd8:	4606      	mov	r6, r0
 8000dda:	460f      	mov	r7, r1
 8000ddc:	461d      	mov	r5, r3
 8000dde:	f000 f95f 	bl	80010a0 <__udivdi3>
 8000de2:	fb00 f505 	mul.w	r5, r0, r5
 8000de6:	fba0 2308 	umull	r2, r3, r0, r8
 8000dea:	fb08 5501 	mla	r5, r8, r1, r5
 8000dee:	1ab2      	subs	r2, r6, r2
 8000df0:	442b      	add	r3, r5
 8000df2:	eb67 0303 	sbc.w	r3, r7, r3
 8000df6:	e9c4 2300 	strd	r2, r3, [r4]
 8000dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dfe:	bf00      	nop

08000e00 <__aeabi_idiv0>:
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <__divdi3>:
 8000e04:	2900      	cmp	r1, #0
 8000e06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e0a:	f2c0 80a6 	blt.w	8000f5a <__divdi3+0x156>
 8000e0e:	2600      	movs	r6, #0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f2c0 809c 	blt.w	8000f4e <__divdi3+0x14a>
 8000e16:	4688      	mov	r8, r1
 8000e18:	4694      	mov	ip, r2
 8000e1a:	469e      	mov	lr, r3
 8000e1c:	4615      	mov	r5, r2
 8000e1e:	4604      	mov	r4, r0
 8000e20:	460f      	mov	r7, r1
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d13d      	bne.n	8000ea2 <__divdi3+0x9e>
 8000e26:	428a      	cmp	r2, r1
 8000e28:	d959      	bls.n	8000ede <__divdi3+0xda>
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	b13b      	cbz	r3, 8000e40 <__divdi3+0x3c>
 8000e30:	f1c3 0220 	rsb	r2, r3, #32
 8000e34:	409f      	lsls	r7, r3
 8000e36:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3a:	409d      	lsls	r5, r3
 8000e3c:	4317      	orrs	r7, r2
 8000e3e:	409c      	lsls	r4, r3
 8000e40:	0c29      	lsrs	r1, r5, #16
 8000e42:	0c22      	lsrs	r2, r4, #16
 8000e44:	fbb7 fef1 	udiv	lr, r7, r1
 8000e48:	b2a8      	uxth	r0, r5
 8000e4a:	fb01 771e 	mls	r7, r1, lr, r7
 8000e4e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8000e52:	fb00 f30e 	mul.w	r3, r0, lr
 8000e56:	42bb      	cmp	r3, r7
 8000e58:	d90a      	bls.n	8000e70 <__divdi3+0x6c>
 8000e5a:	197f      	adds	r7, r7, r5
 8000e5c:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
 8000e60:	f080 8105 	bcs.w	800106e <__divdi3+0x26a>
 8000e64:	42bb      	cmp	r3, r7
 8000e66:	f240 8102 	bls.w	800106e <__divdi3+0x26a>
 8000e6a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6e:	442f      	add	r7, r5
 8000e70:	1aff      	subs	r7, r7, r3
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb7 f3f1 	udiv	r3, r7, r1
 8000e78:	fb01 7713 	mls	r7, r1, r3, r7
 8000e7c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000e80:	fb00 f003 	mul.w	r0, r0, r3
 8000e84:	42b8      	cmp	r0, r7
 8000e86:	d908      	bls.n	8000e9a <__divdi3+0x96>
 8000e88:	197f      	adds	r7, r7, r5
 8000e8a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8000e8e:	f080 80f0 	bcs.w	8001072 <__divdi3+0x26e>
 8000e92:	42b8      	cmp	r0, r7
 8000e94:	f240 80ed 	bls.w	8001072 <__divdi3+0x26e>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	e003      	b.n	8000eaa <__divdi3+0xa6>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d90f      	bls.n	8000ec6 <__divdi3+0xc2>
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	1c34      	adds	r4, r6, #0
 8000eac:	bf18      	it	ne
 8000eae:	2401      	movne	r4, #1
 8000eb0:	4260      	negs	r0, r4
 8000eb2:	f04f 0500 	mov.w	r5, #0
 8000eb6:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8000eba:	4058      	eors	r0, r3
 8000ebc:	4051      	eors	r1, r2
 8000ebe:	1900      	adds	r0, r0, r4
 8000ec0:	4169      	adcs	r1, r5
 8000ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ec6:	fab3 f283 	clz	r2, r3
 8000eca:	2a00      	cmp	r2, #0
 8000ecc:	f040 8086 	bne.w	8000fdc <__divdi3+0x1d8>
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	d302      	bcc.n	8000eda <__divdi3+0xd6>
 8000ed4:	4584      	cmp	ip, r0
 8000ed6:	f200 80db 	bhi.w	8001090 <__divdi3+0x28c>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e7e5      	b.n	8000eaa <__divdi3+0xa6>
 8000ede:	b912      	cbnz	r2, 8000ee6 <__divdi3+0xe2>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	fbb3 f5f2 	udiv	r5, r3, r2
 8000ee6:	fab5 f085 	clz	r0, r5
 8000eea:	2800      	cmp	r0, #0
 8000eec:	d13b      	bne.n	8000f66 <__divdi3+0x162>
 8000eee:	1b78      	subs	r0, r7, r5
 8000ef0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ef4:	fa1f fc85 	uxth.w	ip, r5
 8000ef8:	2201      	movs	r2, #1
 8000efa:	fbb0 f8fe 	udiv	r8, r0, lr
 8000efe:	0c21      	lsrs	r1, r4, #16
 8000f00:	fb0e 0718 	mls	r7, lr, r8, r0
 8000f04:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8000f08:	fb0c f308 	mul.w	r3, ip, r8
 8000f0c:	42bb      	cmp	r3, r7
 8000f0e:	d907      	bls.n	8000f20 <__divdi3+0x11c>
 8000f10:	197f      	adds	r7, r7, r5
 8000f12:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8000f16:	d202      	bcs.n	8000f1e <__divdi3+0x11a>
 8000f18:	42bb      	cmp	r3, r7
 8000f1a:	f200 80bd 	bhi.w	8001098 <__divdi3+0x294>
 8000f1e:	4688      	mov	r8, r1
 8000f20:	1aff      	subs	r7, r7, r3
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb7 f3fe 	udiv	r3, r7, lr
 8000f28:	fb0e 7713 	mls	r7, lr, r3, r7
 8000f2c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000f30:	fb0c fc03 	mul.w	ip, ip, r3
 8000f34:	45bc      	cmp	ip, r7
 8000f36:	d907      	bls.n	8000f48 <__divdi3+0x144>
 8000f38:	197f      	adds	r7, r7, r5
 8000f3a:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8000f3e:	d202      	bcs.n	8000f46 <__divdi3+0x142>
 8000f40:	45bc      	cmp	ip, r7
 8000f42:	f200 80a7 	bhi.w	8001094 <__divdi3+0x290>
 8000f46:	460b      	mov	r3, r1
 8000f48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f4c:	e7ad      	b.n	8000eaa <__divdi3+0xa6>
 8000f4e:	4252      	negs	r2, r2
 8000f50:	ea6f 0606 	mvn.w	r6, r6
 8000f54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f58:	e75d      	b.n	8000e16 <__divdi3+0x12>
 8000f5a:	4240      	negs	r0, r0
 8000f5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f60:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000f64:	e754      	b.n	8000e10 <__divdi3+0xc>
 8000f66:	f1c0 0220 	rsb	r2, r0, #32
 8000f6a:	fa24 f102 	lsr.w	r1, r4, r2
 8000f6e:	fa07 f300 	lsl.w	r3, r7, r0
 8000f72:	4085      	lsls	r5, r0
 8000f74:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f78:	40d7      	lsrs	r7, r2
 8000f7a:	4319      	orrs	r1, r3
 8000f7c:	fbb7 f2fe 	udiv	r2, r7, lr
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	fb0e 7712 	mls	r7, lr, r2, r7
 8000f86:	fa1f fc85 	uxth.w	ip, r5
 8000f8a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8000f8e:	fb0c f702 	mul.w	r7, ip, r2
 8000f92:	429f      	cmp	r7, r3
 8000f94:	fa04 f400 	lsl.w	r4, r4, r0
 8000f98:	d907      	bls.n	8000faa <__divdi3+0x1a6>
 8000f9a:	195b      	adds	r3, r3, r5
 8000f9c:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8000fa0:	d274      	bcs.n	800108c <__divdi3+0x288>
 8000fa2:	429f      	cmp	r7, r3
 8000fa4:	d972      	bls.n	800108c <__divdi3+0x288>
 8000fa6:	3a02      	subs	r2, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	1bdf      	subs	r7, r3, r7
 8000fac:	b289      	uxth	r1, r1
 8000fae:	fbb7 f8fe 	udiv	r8, r7, lr
 8000fb2:	fb0e 7318 	mls	r3, lr, r8, r7
 8000fb6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000fba:	fb0c f708 	mul.w	r7, ip, r8
 8000fbe:	429f      	cmp	r7, r3
 8000fc0:	d908      	bls.n	8000fd4 <__divdi3+0x1d0>
 8000fc2:	195b      	adds	r3, r3, r5
 8000fc4:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8000fc8:	d25c      	bcs.n	8001084 <__divdi3+0x280>
 8000fca:	429f      	cmp	r7, r3
 8000fcc:	d95a      	bls.n	8001084 <__divdi3+0x280>
 8000fce:	f1a8 0802 	sub.w	r8, r8, #2
 8000fd2:	442b      	add	r3, r5
 8000fd4:	1bd8      	subs	r0, r3, r7
 8000fd6:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8000fda:	e78e      	b.n	8000efa <__divdi3+0xf6>
 8000fdc:	f1c2 0320 	rsb	r3, r2, #32
 8000fe0:	fa2c f103 	lsr.w	r1, ip, r3
 8000fe4:	fa0e fe02 	lsl.w	lr, lr, r2
 8000fe8:	fa20 f703 	lsr.w	r7, r0, r3
 8000fec:	ea41 0e0e 	orr.w	lr, r1, lr
 8000ff0:	fa08 f002 	lsl.w	r0, r8, r2
 8000ff4:	fa28 f103 	lsr.w	r1, r8, r3
 8000ff8:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8000ffc:	4338      	orrs	r0, r7
 8000ffe:	fbb1 f8f5 	udiv	r8, r1, r5
 8001002:	0c03      	lsrs	r3, r0, #16
 8001004:	fb05 1118 	mls	r1, r5, r8, r1
 8001008:	fa1f f78e 	uxth.w	r7, lr
 800100c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001010:	fb07 f308 	mul.w	r3, r7, r8
 8001014:	428b      	cmp	r3, r1
 8001016:	fa0c fc02 	lsl.w	ip, ip, r2
 800101a:	d909      	bls.n	8001030 <__divdi3+0x22c>
 800101c:	eb11 010e 	adds.w	r1, r1, lr
 8001020:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 8001024:	d230      	bcs.n	8001088 <__divdi3+0x284>
 8001026:	428b      	cmp	r3, r1
 8001028:	d92e      	bls.n	8001088 <__divdi3+0x284>
 800102a:	f1a8 0802 	sub.w	r8, r8, #2
 800102e:	4471      	add	r1, lr
 8001030:	1ac9      	subs	r1, r1, r3
 8001032:	b280      	uxth	r0, r0
 8001034:	fbb1 f3f5 	udiv	r3, r1, r5
 8001038:	fb05 1113 	mls	r1, r5, r3, r1
 800103c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001040:	fb07 f703 	mul.w	r7, r7, r3
 8001044:	428f      	cmp	r7, r1
 8001046:	d908      	bls.n	800105a <__divdi3+0x256>
 8001048:	eb11 010e 	adds.w	r1, r1, lr
 800104c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8001050:	d216      	bcs.n	8001080 <__divdi3+0x27c>
 8001052:	428f      	cmp	r7, r1
 8001054:	d914      	bls.n	8001080 <__divdi3+0x27c>
 8001056:	3b02      	subs	r3, #2
 8001058:	4471      	add	r1, lr
 800105a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800105e:	1bc9      	subs	r1, r1, r7
 8001060:	fba3 890c 	umull	r8, r9, r3, ip
 8001064:	4549      	cmp	r1, r9
 8001066:	d309      	bcc.n	800107c <__divdi3+0x278>
 8001068:	d005      	beq.n	8001076 <__divdi3+0x272>
 800106a:	2200      	movs	r2, #0
 800106c:	e71d      	b.n	8000eaa <__divdi3+0xa6>
 800106e:	4696      	mov	lr, r2
 8001070:	e6fe      	b.n	8000e70 <__divdi3+0x6c>
 8001072:	4613      	mov	r3, r2
 8001074:	e711      	b.n	8000e9a <__divdi3+0x96>
 8001076:	4094      	lsls	r4, r2
 8001078:	4544      	cmp	r4, r8
 800107a:	d2f6      	bcs.n	800106a <__divdi3+0x266>
 800107c:	3b01      	subs	r3, #1
 800107e:	e7f4      	b.n	800106a <__divdi3+0x266>
 8001080:	4603      	mov	r3, r0
 8001082:	e7ea      	b.n	800105a <__divdi3+0x256>
 8001084:	4688      	mov	r8, r1
 8001086:	e7a5      	b.n	8000fd4 <__divdi3+0x1d0>
 8001088:	46c8      	mov	r8, r9
 800108a:	e7d1      	b.n	8001030 <__divdi3+0x22c>
 800108c:	4602      	mov	r2, r0
 800108e:	e78c      	b.n	8000faa <__divdi3+0x1a6>
 8001090:	4613      	mov	r3, r2
 8001092:	e70a      	b.n	8000eaa <__divdi3+0xa6>
 8001094:	3b02      	subs	r3, #2
 8001096:	e757      	b.n	8000f48 <__divdi3+0x144>
 8001098:	f1a8 0802 	sub.w	r8, r8, #2
 800109c:	442f      	add	r7, r5
 800109e:	e73f      	b.n	8000f20 <__divdi3+0x11c>

080010a0 <__udivdi3>:
 80010a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d144      	bne.n	8001132 <__udivdi3+0x92>
 80010a8:	428a      	cmp	r2, r1
 80010aa:	4615      	mov	r5, r2
 80010ac:	4604      	mov	r4, r0
 80010ae:	d94f      	bls.n	8001150 <__udivdi3+0xb0>
 80010b0:	fab2 f782 	clz	r7, r2
 80010b4:	460e      	mov	r6, r1
 80010b6:	b14f      	cbz	r7, 80010cc <__udivdi3+0x2c>
 80010b8:	f1c7 0320 	rsb	r3, r7, #32
 80010bc:	40b9      	lsls	r1, r7
 80010be:	fa20 f603 	lsr.w	r6, r0, r3
 80010c2:	fa02 f507 	lsl.w	r5, r2, r7
 80010c6:	430e      	orrs	r6, r1
 80010c8:	fa00 f407 	lsl.w	r4, r0, r7
 80010cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010d0:	0c23      	lsrs	r3, r4, #16
 80010d2:	fbb6 f0fe 	udiv	r0, r6, lr
 80010d6:	b2af      	uxth	r7, r5
 80010d8:	fb0e 6110 	mls	r1, lr, r0, r6
 80010dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010e0:	fb07 f100 	mul.w	r1, r7, r0
 80010e4:	4299      	cmp	r1, r3
 80010e6:	d909      	bls.n	80010fc <__udivdi3+0x5c>
 80010e8:	195b      	adds	r3, r3, r5
 80010ea:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80010ee:	f080 80ec 	bcs.w	80012ca <__udivdi3+0x22a>
 80010f2:	4299      	cmp	r1, r3
 80010f4:	f240 80e9 	bls.w	80012ca <__udivdi3+0x22a>
 80010f8:	3802      	subs	r0, #2
 80010fa:	442b      	add	r3, r5
 80010fc:	1a5a      	subs	r2, r3, r1
 80010fe:	b2a4      	uxth	r4, r4
 8001100:	fbb2 f3fe 	udiv	r3, r2, lr
 8001104:	fb0e 2213 	mls	r2, lr, r3, r2
 8001108:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800110c:	fb07 f703 	mul.w	r7, r7, r3
 8001110:	4297      	cmp	r7, r2
 8001112:	d908      	bls.n	8001126 <__udivdi3+0x86>
 8001114:	1952      	adds	r2, r2, r5
 8001116:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800111a:	f080 80d8 	bcs.w	80012ce <__udivdi3+0x22e>
 800111e:	4297      	cmp	r7, r2
 8001120:	f240 80d5 	bls.w	80012ce <__udivdi3+0x22e>
 8001124:	3b02      	subs	r3, #2
 8001126:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800112a:	2600      	movs	r6, #0
 800112c:	4631      	mov	r1, r6
 800112e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001132:	428b      	cmp	r3, r1
 8001134:	d847      	bhi.n	80011c6 <__udivdi3+0x126>
 8001136:	fab3 f683 	clz	r6, r3
 800113a:	2e00      	cmp	r6, #0
 800113c:	d148      	bne.n	80011d0 <__udivdi3+0x130>
 800113e:	428b      	cmp	r3, r1
 8001140:	d302      	bcc.n	8001148 <__udivdi3+0xa8>
 8001142:	4282      	cmp	r2, r0
 8001144:	f200 80cd 	bhi.w	80012e2 <__udivdi3+0x242>
 8001148:	2001      	movs	r0, #1
 800114a:	4631      	mov	r1, r6
 800114c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001150:	b912      	cbnz	r2, 8001158 <__udivdi3+0xb8>
 8001152:	2501      	movs	r5, #1
 8001154:	fbb5 f5f2 	udiv	r5, r5, r2
 8001158:	fab5 f885 	clz	r8, r5
 800115c:	f1b8 0f00 	cmp.w	r8, #0
 8001160:	d177      	bne.n	8001252 <__udivdi3+0x1b2>
 8001162:	1b4a      	subs	r2, r1, r5
 8001164:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001168:	b2af      	uxth	r7, r5
 800116a:	2601      	movs	r6, #1
 800116c:	fbb2 f0fe 	udiv	r0, r2, lr
 8001170:	0c23      	lsrs	r3, r4, #16
 8001172:	fb0e 2110 	mls	r1, lr, r0, r2
 8001176:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800117a:	fb07 f300 	mul.w	r3, r7, r0
 800117e:	428b      	cmp	r3, r1
 8001180:	d907      	bls.n	8001192 <__udivdi3+0xf2>
 8001182:	1949      	adds	r1, r1, r5
 8001184:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001188:	d202      	bcs.n	8001190 <__udivdi3+0xf0>
 800118a:	428b      	cmp	r3, r1
 800118c:	f200 80ba 	bhi.w	8001304 <__udivdi3+0x264>
 8001190:	4610      	mov	r0, r2
 8001192:	1ac9      	subs	r1, r1, r3
 8001194:	b2a4      	uxth	r4, r4
 8001196:	fbb1 f3fe 	udiv	r3, r1, lr
 800119a:	fb0e 1113 	mls	r1, lr, r3, r1
 800119e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80011a2:	fb07 f703 	mul.w	r7, r7, r3
 80011a6:	42a7      	cmp	r7, r4
 80011a8:	d908      	bls.n	80011bc <__udivdi3+0x11c>
 80011aa:	1964      	adds	r4, r4, r5
 80011ac:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80011b0:	f080 808f 	bcs.w	80012d2 <__udivdi3+0x232>
 80011b4:	42a7      	cmp	r7, r4
 80011b6:	f240 808c 	bls.w	80012d2 <__udivdi3+0x232>
 80011ba:	3b02      	subs	r3, #2
 80011bc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80011c0:	4631      	mov	r1, r6
 80011c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011c6:	2600      	movs	r6, #0
 80011c8:	4630      	mov	r0, r6
 80011ca:	4631      	mov	r1, r6
 80011cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011d0:	f1c6 0420 	rsb	r4, r6, #32
 80011d4:	fa22 f504 	lsr.w	r5, r2, r4
 80011d8:	40b3      	lsls	r3, r6
 80011da:	432b      	orrs	r3, r5
 80011dc:	fa20 fc04 	lsr.w	ip, r0, r4
 80011e0:	fa01 f706 	lsl.w	r7, r1, r6
 80011e4:	fa21 f504 	lsr.w	r5, r1, r4
 80011e8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80011ec:	ea4c 0707 	orr.w	r7, ip, r7
 80011f0:	fbb5 f8fe 	udiv	r8, r5, lr
 80011f4:	0c39      	lsrs	r1, r7, #16
 80011f6:	fb0e 5518 	mls	r5, lr, r8, r5
 80011fa:	fa1f fc83 	uxth.w	ip, r3
 80011fe:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8001202:	fb0c f108 	mul.w	r1, ip, r8
 8001206:	42a9      	cmp	r1, r5
 8001208:	fa02 f206 	lsl.w	r2, r2, r6
 800120c:	d904      	bls.n	8001218 <__udivdi3+0x178>
 800120e:	18ed      	adds	r5, r5, r3
 8001210:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8001214:	d367      	bcc.n	80012e6 <__udivdi3+0x246>
 8001216:	46a0      	mov	r8, r4
 8001218:	1a6d      	subs	r5, r5, r1
 800121a:	b2bf      	uxth	r7, r7
 800121c:	fbb5 f4fe 	udiv	r4, r5, lr
 8001220:	fb0e 5514 	mls	r5, lr, r4, r5
 8001224:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8001228:	fb0c fc04 	mul.w	ip, ip, r4
 800122c:	458c      	cmp	ip, r1
 800122e:	d904      	bls.n	800123a <__udivdi3+0x19a>
 8001230:	18c9      	adds	r1, r1, r3
 8001232:	f104 35ff 	add.w	r5, r4, #4294967295	; 0xffffffff
 8001236:	d35c      	bcc.n	80012f2 <__udivdi3+0x252>
 8001238:	462c      	mov	r4, r5
 800123a:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800123e:	ebcc 0101 	rsb	r1, ip, r1
 8001242:	fba4 2302 	umull	r2, r3, r4, r2
 8001246:	4299      	cmp	r1, r3
 8001248:	d348      	bcc.n	80012dc <__udivdi3+0x23c>
 800124a:	d044      	beq.n	80012d6 <__udivdi3+0x236>
 800124c:	4620      	mov	r0, r4
 800124e:	2600      	movs	r6, #0
 8001250:	e76c      	b.n	800112c <__udivdi3+0x8c>
 8001252:	f1c8 0420 	rsb	r4, r8, #32
 8001256:	fa01 f308 	lsl.w	r3, r1, r8
 800125a:	fa05 f508 	lsl.w	r5, r5, r8
 800125e:	fa20 f704 	lsr.w	r7, r0, r4
 8001262:	40e1      	lsrs	r1, r4
 8001264:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001268:	431f      	orrs	r7, r3
 800126a:	fbb1 f6fe 	udiv	r6, r1, lr
 800126e:	0c3a      	lsrs	r2, r7, #16
 8001270:	fb0e 1116 	mls	r1, lr, r6, r1
 8001274:	fa1f fc85 	uxth.w	ip, r5
 8001278:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 800127c:	fb0c f206 	mul.w	r2, ip, r6
 8001280:	429a      	cmp	r2, r3
 8001282:	fa00 f408 	lsl.w	r4, r0, r8
 8001286:	d907      	bls.n	8001298 <__udivdi3+0x1f8>
 8001288:	195b      	adds	r3, r3, r5
 800128a:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 800128e:	d237      	bcs.n	8001300 <__udivdi3+0x260>
 8001290:	429a      	cmp	r2, r3
 8001292:	d935      	bls.n	8001300 <__udivdi3+0x260>
 8001294:	3e02      	subs	r6, #2
 8001296:	442b      	add	r3, r5
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	b2bf      	uxth	r7, r7
 800129c:	fbb3 f0fe 	udiv	r0, r3, lr
 80012a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80012a4:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80012a8:	fb0c f100 	mul.w	r1, ip, r0
 80012ac:	4299      	cmp	r1, r3
 80012ae:	d907      	bls.n	80012c0 <__udivdi3+0x220>
 80012b0:	195b      	adds	r3, r3, r5
 80012b2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80012b6:	d221      	bcs.n	80012fc <__udivdi3+0x25c>
 80012b8:	4299      	cmp	r1, r3
 80012ba:	d91f      	bls.n	80012fc <__udivdi3+0x25c>
 80012bc:	3802      	subs	r0, #2
 80012be:	442b      	add	r3, r5
 80012c0:	1a5a      	subs	r2, r3, r1
 80012c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80012c6:	4667      	mov	r7, ip
 80012c8:	e750      	b.n	800116c <__udivdi3+0xcc>
 80012ca:	4610      	mov	r0, r2
 80012cc:	e716      	b.n	80010fc <__udivdi3+0x5c>
 80012ce:	460b      	mov	r3, r1
 80012d0:	e729      	b.n	8001126 <__udivdi3+0x86>
 80012d2:	4613      	mov	r3, r2
 80012d4:	e772      	b.n	80011bc <__udivdi3+0x11c>
 80012d6:	40b0      	lsls	r0, r6
 80012d8:	4290      	cmp	r0, r2
 80012da:	d2b7      	bcs.n	800124c <__udivdi3+0x1ac>
 80012dc:	1e60      	subs	r0, r4, #1
 80012de:	2600      	movs	r6, #0
 80012e0:	e724      	b.n	800112c <__udivdi3+0x8c>
 80012e2:	4630      	mov	r0, r6
 80012e4:	e722      	b.n	800112c <__udivdi3+0x8c>
 80012e6:	42a9      	cmp	r1, r5
 80012e8:	d995      	bls.n	8001216 <__udivdi3+0x176>
 80012ea:	f1a8 0802 	sub.w	r8, r8, #2
 80012ee:	441d      	add	r5, r3
 80012f0:	e792      	b.n	8001218 <__udivdi3+0x178>
 80012f2:	458c      	cmp	ip, r1
 80012f4:	d9a0      	bls.n	8001238 <__udivdi3+0x198>
 80012f6:	3c02      	subs	r4, #2
 80012f8:	4419      	add	r1, r3
 80012fa:	e79e      	b.n	800123a <__udivdi3+0x19a>
 80012fc:	4610      	mov	r0, r2
 80012fe:	e7df      	b.n	80012c0 <__udivdi3+0x220>
 8001300:	460e      	mov	r6, r1
 8001302:	e7c9      	b.n	8001298 <__udivdi3+0x1f8>
 8001304:	3802      	subs	r0, #2
 8001306:	4429      	add	r1, r5
 8001308:	e743      	b.n	8001192 <__udivdi3+0xf2>
 800130a:	bf00      	nop
 800130c:	0000      	movs	r0, r0
	...

08001310 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
	...

08001320 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8001320:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001324:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001328:	2b20      	cmp	r3, #32
 800132a:	d001      	beq.n	8001330 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 800132c:	2000      	movs	r0, #0
    }
  }
  return false;
}
 800132e:	4770      	bx	lr
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 8001330:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001334:	2b21      	cmp	r3, #33	; 0x21
 8001336:	d003      	beq.n	8001340 <sduRequestsHook+0x20>
 8001338:	2b22      	cmp	r3, #34	; 0x22
 800133a:	d009      	beq.n	8001350 <sduRequestsHook+0x30>
 800133c:	2b20      	cmp	r3, #32
 800133e:	d1f5      	bne.n	800132c <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return true;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <sduRequestsHook+0x3c>)
 8001342:	6503      	str	r3, [r0, #80]	; 0x50
 8001344:	2207      	movs	r2, #7
 8001346:	2300      	movs	r3, #0
 8001348:	6542      	str	r2, [r0, #84]	; 0x54
 800134a:	6583      	str	r3, [r0, #88]	; 0x58
      return true;
 800134c:	2001      	movs	r0, #1
 800134e:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001350:	2300      	movs	r3, #0
 8001352:	6503      	str	r3, [r0, #80]	; 0x50
 8001354:	6543      	str	r3, [r0, #84]	; 0x54
 8001356:	6583      	str	r3, [r0, #88]	; 0x58
      return true;
 8001358:	2001      	movs	r0, #1
 800135a:	4770      	bx	lr
 800135c:	20000800 	.word	0x20000800

08001360 <_ctl.lto_priv.89>:
                     sysinterval_t timeout) {

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
}

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8001360:	b508      	push	{r3, lr}
  SerialUSBDriver *sdup = (SerialUSBDriver *)ip;

  osalDbgCheck(sdup != NULL);
 8001362:	b118      	cbz	r0, 800136c <_ctl.lto_priv.89+0xc>

  switch (operation) {
 8001364:	b111      	cbz	r1, 800136c <_ctl.lto_priv.89+0xc>
 8001366:	2901      	cmp	r1, #1
 8001368:	d103      	bne.n	8001372 <_ctl.lto_priv.89+0x12>
  case CHN_CTL_NOP:
    osalDbgCheck(arg == NULL);
 800136a:	b112      	cbz	r2, 8001372 <_ctl.lto_priv.89+0x12>
    break;
  case CHN_CTL_INVALID:
    osalDbgAssert(false, "invalid CTL operation");
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <_ctl.lto_priv.89+0x18>)
 800136e:	f006 f98f 	bl	8007690 <chSysHalt>
#else
    break;
#endif
  }
  return MSG_OK;
}
 8001372:	2000      	movs	r0, #0
 8001374:	bd08      	pop	{r3, pc}
 8001376:	bf00      	nop
 8001378:	0800c5e4 	.word	0x0800c5e4
 800137c:	00000000 	.word	0x00000000

08001380 <usbStartReceiveI>:
 *                      the packet size because the excess is discarded.
 *
 * @iclass
 */
void usbStartReceiveI(USBDriver *usbp, usbep_t ep,
                      uint8_t *buf, size_t n) {
 8001380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001384:	4605      	mov	r5, r0
 8001386:	460e      	mov	r6, r1
 8001388:	4690      	mov	r8, r2
 800138a:	4699      	mov	r9, r3
  USBOutEndpointState *osp;

  osalDbgCheckClassI();
 800138c:	f006 f9b0 	bl	80076f0 <chDbgCheckClassI>
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 8001390:	b1cd      	cbz	r5, 80013c6 <usbStartReceiveI+0x46>
 8001392:	2e05      	cmp	r6, #5
 8001394:	d817      	bhi.n	80013c6 <usbStartReceiveI+0x46>
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");
 8001396:	2401      	movs	r4, #1
 8001398:	40b4      	lsls	r4, r6
 800139a:	8968      	ldrh	r0, [r5, #10]
 800139c:	b2a4      	uxth	r4, r4
 800139e:	ea14 0700 	ands.w	r7, r4, r0
 80013a2:	d110      	bne.n	80013c6 <usbStartReceiveI+0x46>
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 80013a4:	eb05 0386 	add.w	r3, r5, r6, lsl #2
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80013a8:	4304      	orrs	r4, r0

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 80013aa:	68db      	ldr	r3, [r3, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80013ac:	816c      	strh	r4, [r5, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 80013ae:	6999      	ldr	r1, [r3, #24]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 80013b0:	4628      	mov	r0, r5

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
 80013b2:	f8c1 8008 	str.w	r8, [r1, #8]
  osp->rxsize = n;
 80013b6:	f8c1 9000 	str.w	r9, [r1]
  osp->rxcnt  = 0;
 80013ba:	604f      	str	r7, [r1, #4]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 80013bc:	4631      	mov	r1, r6
}
 80013be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 80013c2:	f006 bcad 	b.w	8007d20 <usb_lld_start_out>
void usbStartReceiveI(USBDriver *usbp, usbep_t ep,
                      uint8_t *buf, size_t n) {
  USBOutEndpointState *osp;

  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 80013c6:	4801      	ldr	r0, [pc, #4]	; (80013cc <usbStartReceiveI+0x4c>)
 80013c8:	f006 f962 	bl	8007690 <chSysHalt>
 80013cc:	0800c604 	.word	0x0800c604

080013d0 <obqPostFullBufferS>:
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @sclass
 */
void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 80013d0:	b570      	push	{r4, r5, r6, lr}
 80013d2:	460d      	mov	r5, r1
 80013d4:	4604      	mov	r4, r0

  osalDbgCheckClassS();
 80013d6:	f006 f97b 	bl	80076d0 <chDbgCheckClassS>
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 80013da:	b1d5      	cbz	r5, 8001412 <obqPostFullBufferS+0x42>
 80013dc:	69e3      	ldr	r3, [r4, #28]
 80013de:	3b04      	subs	r3, #4
 80013e0:	429d      	cmp	r5, r3
 80013e2:	d816      	bhi.n	8001412 <obqPostFullBufferS+0x42>
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 80013e4:	68e3      	ldr	r3, [r4, #12]
 80013e6:	b1a3      	cbz	r3, 8001412 <obqPostFullBufferS+0x42>

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 80013e8:	6921      	ldr	r1, [r4, #16]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
  if (obqp->bwrptr >= obqp->btop) {
 80013ea:	69a0      	ldr	r0, [r4, #24]
  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 80013ec:	600d      	str	r5, [r1, #0]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 80013ee:	69e3      	ldr	r3, [r4, #28]

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 80013f0:	68e2      	ldr	r2, [r4, #12]
  obqp->bwrptr += obqp->bsize;
 80013f2:	440b      	add	r3, r1
  if (obqp->bwrptr >= obqp->btop) {
 80013f4:	4283      	cmp	r3, r0
  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 80013f6:	6123      	str	r3, [r4, #16]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
 80013f8:	bf24      	itt	cs
 80013fa:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 80013fc:	6123      	strcs	r3, [r4, #16]

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 80013fe:	3a01      	subs	r2, #1

  /* No "current" buffer.*/
  obqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 8001400:	6b23      	ldr	r3, [r4, #48]	; 0x30

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8001402:	60e2      	str	r2, [r4, #12]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 8001404:	2200      	movs	r2, #0
 8001406:	62a2      	str	r2, [r4, #40]	; 0x28

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 8001408:	b133      	cbz	r3, 8001418 <obqPostFullBufferS+0x48>
    obqp->notify(obqp);
 800140a:	4620      	mov	r0, r4
  }
}
 800140c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* No "current" buffer.*/
  obqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
    obqp->notify(obqp);
 8001410:	4718      	bx	r3
 * @sclass
 */
void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {

  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 8001412:	4802      	ldr	r0, [pc, #8]	; (800141c <obqPostFullBufferS+0x4c>)
 8001414:	f006 f93c 	bl	8007690 <chSysHalt>
 8001418:	bd70      	pop	{r4, r5, r6, pc}
 800141a:	bf00      	nop
 800141c:	0800c570 	.word	0x0800c570

08001420 <ibqReleaseEmptyBufferS>:
   *
   * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
   *
   * @sclass
   */
  void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 8001420:	b510      	push	{r4, lr}
 8001422:	4604      	mov	r4, r0

  osalDbgCheckClassS();
 8001424:	f006 f954 	bl	80076d0 <chDbgCheckClassS>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 8001428:	68e3      	ldr	r3, [r4, #12]
 800142a:	b19b      	cbz	r3, 8001454 <ibqReleaseEmptyBufferS+0x34>

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
  if (ibqp->brdptr >= ibqp->btop) {
 800142c:	f104 0014 	add.w	r0, r4, #20
 8001430:	c80b      	ldmia	r0, {r0, r1, r3}
  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
 8001432:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 8001434:	428b      	cmp	r3, r1

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 8001436:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 8001438:	6163      	str	r3, [r4, #20]
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
 800143a:	bf24      	itt	cs
 800143c:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 800143e:	6163      	strcs	r3, [r4, #20]

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 8001440:	3a01      	subs	r2, #1

  /* No "current" buffer.*/
  ibqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 8001442:	6b23      	ldr	r3, [r4, #48]	; 0x30

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 8001444:	60e2      	str	r2, [r4, #12]
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
  }

  /* No "current" buffer.*/
  ibqp->ptr = NULL;
 8001446:	2200      	movs	r2, #0
 8001448:	62a2      	str	r2, [r4, #40]	; 0x28

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 800144a:	b133      	cbz	r3, 800145a <ibqReleaseEmptyBufferS+0x3a>
    ibqp->notify(ibqp);
 800144c:	4620      	mov	r0, r4
  }
}
 800144e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* No "current" buffer.*/
  ibqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
    ibqp->notify(ibqp);
 8001452:	4718      	bx	r3
   * @sclass
   */
  void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 8001454:	4801      	ldr	r0, [pc, #4]	; (800145c <ibqReleaseEmptyBufferS+0x3c>)
 8001456:	f006 f91b 	bl	8007690 <chSysHalt>
 800145a:	bd10      	pop	{r4, pc}
 800145c:	0800c5a8 	.word	0x0800c5a8

08001460 <obqGetEmptyBufferTimeoutS>:
 *                      suspended state.
 *
 * @sclass
 */
msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
                                sysinterval_t timeout) {
 8001460:	b538      	push	{r3, r4, r5, lr}
 8001462:	4604      	mov	r4, r0
 8001464:	460d      	mov	r5, r1

  osalDbgCheckClassS();
 8001466:	f006 f933 	bl	80076d0 <chDbgCheckClassS>
 800146a:	e007      	b.n	800147c <obqGetEmptyBufferTimeoutS+0x1c>

  while (obqIsFullI(obqp)) {
    if (obqp->suspended) {
 800146c:	7a23      	ldrb	r3, [r4, #8]
 800146e:	b993      	cbnz	r3, 8001496 <obqGetEmptyBufferTimeoutS+0x36>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 8001470:	4620      	mov	r0, r4
 8001472:	4629      	mov	r1, r5
 8001474:	f005 fcac 	bl	8006dd0 <chThdEnqueueTimeoutS>
      return MSG_RESET;
    }
    msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
    if (msg < MSG_OK) {
 8001478:	2800      	cmp	r0, #0
 800147a:	db0e      	blt.n	800149a <obqGetEmptyBufferTimeoutS+0x3a>
msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
                                sysinterval_t timeout) {

  osalDbgCheckClassS();

  while (obqIsFullI(obqp)) {
 800147c:	68e3      	ldr	r3, [r4, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f4      	beq.n	800146c <obqGetEmptyBufferTimeoutS+0xc>
    if (msg < MSG_OK) {
      return msg;
    }
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");
 8001482:	68e3      	ldr	r3, [r4, #12]
 8001484:	b153      	cbz	r3, 800149c <obqGetEmptyBufferTimeoutS+0x3c>

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001486:	6922      	ldr	r2, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001488:	69e3      	ldr	r3, [r4, #28]
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 800148a:	1d11      	adds	r1, r2, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 800148c:	4413      	add	r3, r2
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 800148e:	62a1      	str	r1, [r4, #40]	; 0x28
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001490:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001492:	2000      	movs	r0, #0
 8001494:	bd38      	pop	{r3, r4, r5, pc}

  osalDbgCheckClassS();

  while (obqIsFullI(obqp)) {
    if (obqp->suspended) {
      return MSG_RESET;
 8001496:	f06f 0001 	mvn.w	r0, #1
  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
  obqp->top = obqp->bwrptr + obqp->bsize;

  return MSG_OK;
}
 800149a:	bd38      	pop	{r3, r4, r5, pc}
    if (msg < MSG_OK) {
      return msg;
    }
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");
 800149c:	4801      	ldr	r0, [pc, #4]	; (80014a4 <obqGetEmptyBufferTimeoutS+0x44>)
 800149e:	f006 f8f7 	bl	8007690 <chSysHalt>
 80014a2:	bf00      	nop
 80014a4:	0800c64c 	.word	0x0800c64c
	...

080014b0 <ibqGetFullBufferTimeoutS>:
   *                      suspended state.
   *
   * @sclass
   */
  msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
                                 sysinterval_t timeout) {
 80014b0:	b538      	push	{r3, r4, r5, lr}
 80014b2:	4604      	mov	r4, r0
 80014b4:	460d      	mov	r5, r1

  osalDbgCheckClassS();
 80014b6:	f006 f90b 	bl	80076d0 <chDbgCheckClassS>
 80014ba:	e007      	b.n	80014cc <ibqGetFullBufferTimeoutS+0x1c>

  while (ibqIsEmptyI(ibqp)) {
    if (ibqp->suspended) {
 80014bc:	7a23      	ldrb	r3, [r4, #8]
 80014be:	b993      	cbnz	r3, 80014e6 <ibqGetFullBufferTimeoutS+0x36>
 80014c0:	4620      	mov	r0, r4
 80014c2:	4629      	mov	r1, r5
 80014c4:	f005 fc84 	bl	8006dd0 <chThdEnqueueTimeoutS>
      return MSG_RESET;
    }
    msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
    if (msg < MSG_OK) {
 80014c8:	2800      	cmp	r0, #0
 80014ca:	db0e      	blt.n	80014ea <ibqGetFullBufferTimeoutS+0x3a>
  msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
                                 sysinterval_t timeout) {

  osalDbgCheckClassS();

  while (ibqIsEmptyI(ibqp)) {
 80014cc:	68e3      	ldr	r3, [r4, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f4      	beq.n	80014bc <ibqGetFullBufferTimeoutS+0xc>
    if (msg < MSG_OK) {
       return msg;
    }
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 80014d2:	68e3      	ldr	r3, [r4, #12]
 80014d4:	b153      	cbz	r3, 80014ec <ibqGetFullBufferTimeoutS+0x3c>

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80014d6:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80014d8:	681a      	ldr	r2, [r3, #0]
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80014da:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80014dc:	441a      	add	r2, r3
 80014de:	62e2      	str	r2, [r4, #44]	; 0x2c
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80014e0:	62a3      	str	r3, [r4, #40]	; 0x28
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80014e2:	2000      	movs	r0, #0
 80014e4:	bd38      	pop	{r3, r4, r5, pc}

  osalDbgCheckClassS();

  while (ibqIsEmptyI(ibqp)) {
    if (ibqp->suspended) {
      return MSG_RESET;
 80014e6:	f06f 0001 	mvn.w	r0, #1
  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);

  return MSG_OK;
}
 80014ea:	bd38      	pop	{r3, r4, r5, pc}
    if (msg < MSG_OK) {
       return msg;
    }
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 80014ec:	4801      	ldr	r0, [pc, #4]	; (80014f4 <ibqGetFullBufferTimeoutS+0x44>)
 80014ee:	f006 f8cf 	bl	8007690 <chSysHalt>
 80014f2:	bf00      	nop
 80014f4:	0800c618 	.word	0x0800c618
	...

08001500 <usbStartTransmitI>:
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
                       const uint8_t *buf, size_t n) {
 8001500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001504:	4605      	mov	r5, r0
 8001506:	460e      	mov	r6, r1
 8001508:	4690      	mov	r8, r2
 800150a:	4699      	mov	r9, r3
  USBInEndpointState *isp;

  osalDbgCheckClassI();
 800150c:	f006 f8f0 	bl	80076f0 <chDbgCheckClassI>
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 8001510:	b1cd      	cbz	r5, 8001546 <usbStartTransmitI+0x46>
 8001512:	2e05      	cmp	r6, #5
 8001514:	d817      	bhi.n	8001546 <usbStartTransmitI+0x46>
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");
 8001516:	2401      	movs	r4, #1
 8001518:	40b4      	lsls	r4, r6
 800151a:	8928      	ldrh	r0, [r5, #8]
 800151c:	b2a4      	uxth	r4, r4
 800151e:	ea14 0700 	ands.w	r7, r4, r0
 8001522:	d110      	bne.n	8001546 <usbStartTransmitI+0x46>
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8001524:	eb05 0386 	add.w	r3, r5, r6, lsl #2
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001528:	4304      	orrs	r4, r0

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800152a:	68db      	ldr	r3, [r3, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800152c:	812c      	strh	r4, [r5, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800152e:	6959      	ldr	r1, [r3, #20]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8001530:	4628      	mov	r0, r5

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
 8001532:	f8c1 8008 	str.w	r8, [r1, #8]
  isp->txsize = n;
 8001536:	f8c1 9000 	str.w	r9, [r1]
  isp->txcnt  = 0;
 800153a:	604f      	str	r7, [r1, #4]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 800153c:	4631      	mov	r1, r6
}
 800153e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8001542:	f006 bb95 	b.w	8007c70 <usb_lld_start_in>
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
                       const uint8_t *buf, size_t n) {
  USBInEndpointState *isp;

  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 8001546:	4801      	ldr	r0, [pc, #4]	; (800154c <usbStartTransmitI+0x4c>)
 8001548:	f006 f8a2 	bl	8007690 <chSysHalt>
 800154c:	0800c70c 	.word	0x0800c70c

08001550 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8001550:	b538      	push	{r3, r4, r5, lr}

  (void)ep;
  switch (usbp->ep0state) {
 8001552:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8001556:	4604      	mov	r4, r0

  (void)ep;
  switch (usbp->ep0state) {
 8001558:	2b15      	cmp	r3, #21
 800155a:	d80c      	bhi.n	8001576 <_usb_ep0out+0x26>
 800155c:	e8df f003 	tbb	[pc, r3]
 8001560:	0b0b0b0b 	.word	0x0b0b0b0b
 8001564:	0b190b0b 	.word	0x0b190b0b
 8001568:	0b0b0b0b 	.word	0x0b0b0b0b
 800156c:	0b0b0b0b 	.word	0x0b0b0b0b
 8001570:	0b0b0b0b 	.word	0x0b0b0b0b
 8001574:	2f0e      	.short	0x2f0e
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
 8001576:	481c      	ldr	r0, [pc, #112]	; (80015e8 <_usb_ep0out+0x98>)
 8001578:	f006 f88a 	bl	8007690 <chSysHalt>
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 800157c:	68c3      	ldr	r3, [r0, #12]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	bb83      	cbnz	r3, 80015e6 <_usb_ep0out+0x96>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 8001584:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001586:	b103      	cbz	r3, 800158a <_usb_ep0out+0x3a>
      usbp->ep0endcb(usbp);
 8001588:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 800158a:	2300      	movs	r3, #0
 800158c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8001590:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8001592:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001594:	6841      	ldr	r1, [r0, #4]
 8001596:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800159a:	680d      	ldr	r5, [r1, #0]
 800159c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80015a0:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 80015a4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80015a8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80015ac:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80015b0:	b10d      	cbz	r5, 80015b6 <_usb_ep0out+0x66>
 80015b2:	2106      	movs	r1, #6
 80015b4:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 80015b6:	2306      	movs	r3, #6
 80015b8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80015bc:	bd38      	pop	{r3, r4, r5, pc}

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_OUT_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 80015be:	230b      	movs	r3, #11
 80015c0:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80015c4:	2320      	movs	r3, #32
 80015c6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80015ca:	f006 f8e9 	bl	80077a0 <_dbg_check_lock_from_isr>
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    osalSysLockFromISR();
    usbStartTransmitI(usbp, 0, NULL, 0);
 80015ce:	2100      	movs	r1, #0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4620      	mov	r0, r4
 80015d4:	460a      	mov	r2, r1
 80015d6:	f7ff ff93 	bl	8001500 <usbStartTransmitI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80015da:	f006 f8c9 	bl	8007770 <_dbg_check_unlock_from_isr>
 80015de:	2300      	movs	r3, #0
 80015e0:	f383 8811 	msr	BASEPRI, r3
 80015e4:	bd38      	pop	{r3, r4, r5, pc}
 80015e6:	bd38      	pop	{r3, r4, r5, pc}
 80015e8:	0800c6e8 	.word	0x0800c6e8
 80015ec:	00000000 	.word	0x00000000

080015f0 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80015f0:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 80015f2:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80015f6:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 80015f8:	2b15      	cmp	r3, #21
 80015fa:	d80c      	bhi.n	8001616 <_usb_ep0in+0x26>
 80015fc:	e8df f003 	tbb	[pc, r3]
 8001600:	0b0b0b0b 	.word	0x0b0b0b0b
 8001604:	0b390b0b 	.word	0x0b390b0b
 8001608:	321e0e0b 	.word	0x321e0e0b
 800160c:	0b0b0b0b 	.word	0x0b0b0b0b
 8001610:	0b0b0b0b 	.word	0x0b0b0b0b
 8001614:	0b0b      	.short	0x0b0b
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
 8001616:	482b      	ldr	r0, [pc, #172]	; (80016c4 <_usb_ep0in+0xd4>)
 8001618:	f006 f83a 	bl	8007690 <chSysHalt>

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 800161c:	f890 1063 	ldrb.w	r1, [r0, #99]	; 0x63
 8001620:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
  case USB_EP0_IN_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8001624:	6d42      	ldr	r2, [r0, #84]	; 0x54
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_IN_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
 8001626:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800162a:	4293      	cmp	r3, r2
 800162c:	d906      	bls.n	800163c <_usb_ep0in+0x4c>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800162e:	68c3      	ldr	r3, [r0, #12]
 8001630:	8a1d      	ldrh	r5, [r3, #16]
 8001632:	fbb2 f3f5 	udiv	r3, r2, r5
 8001636:	fb05 2513 	mls	r5, r5, r3, r2
  case USB_EP0_IN_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800163a:	b385      	cbz	r5, 800169e <_usb_ep0in+0xae>
      return;
    }
    /* Falls through.*/
  case USB_EP0_IN_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 800163c:	2314      	movs	r3, #20
 800163e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8001642:	2320      	movs	r3, #32
 8001644:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8001648:	f006 f8aa 	bl	80077a0 <_dbg_check_lock_from_isr>
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    osalSysLockFromISR();
    usbStartReceiveI(usbp, 0, NULL, 0);
 800164c:	2100      	movs	r1, #0
 800164e:	460b      	mov	r3, r1
 8001650:	4620      	mov	r0, r4
 8001652:	460a      	mov	r2, r1
 8001654:	f7ff fe94 	bl	8001380 <usbStartReceiveI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001658:	f006 f88a 	bl	8007770 <_dbg_check_unlock_from_isr>
 800165c:	2300      	movs	r3, #0
 800165e:	f383 8811 	msr	BASEPRI, r3
 8001662:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_IN_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 8001664:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001666:	b103      	cbz	r3, 800166a <_usb_ep0in+0x7a>
      usbp->ep0endcb(usbp);
 8001668:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 800166a:	2300      	movs	r3, #0
 800166c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8001670:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8001672:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001674:	6841      	ldr	r1, [r0, #4]
 8001676:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800167a:	680d      	ldr	r5, [r1, #0]
 800167c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001680:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8001684:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001688:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800168c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8001690:	b10d      	cbz	r5, 8001696 <_usb_ep0in+0xa6>
 8001692:	2106      	movs	r1, #6
 8001694:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8001696:	2306      	movs	r3, #6
 8001698:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 800169c:	bd38      	pop	{r3, r4, r5, pc}
 800169e:	2320      	movs	r3, #32
 80016a0:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80016a4:	f006 f87c 	bl	80077a0 <_dbg_check_lock_from_isr>
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0, NULL, 0);
 80016a8:	4620      	mov	r0, r4
 80016aa:	4629      	mov	r1, r5
 80016ac:	462a      	mov	r2, r5
 80016ae:	462b      	mov	r3, r5
 80016b0:	f7ff ff26 	bl	8001500 <usbStartTransmitI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80016b4:	f006 f85c 	bl	8007770 <_dbg_check_unlock_from_isr>
 80016b8:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 80016bc:	230a      	movs	r3, #10
 80016be:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80016c2:	bd38      	pop	{r3, r4, r5, pc}
 80016c4:	0800c6f4 	.word	0x0800c6f4
	...

080016d0 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80016d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t max;

  /* Is the EP0 state machine in the correct state for handling setup
     packets?*/
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 80016d2:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80016d6:	4604      	mov	r4, r0
  size_t max;

  /* Is the EP0 state machine in the correct state for handling setup
     packets?*/
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 80016d8:	b113      	cbz	r3, 80016e0 <_usb_ep0setup+0x10>
    /* This is unexpected could require handling with a warning event.*/
    /* CHTODO: handling here.*/

    /* Resetting the EP0 state machine and going ahead.*/
    usbp->ep0state = USB_EP0_STP_WAITING;
 80016da:	2300      	movs	r3, #0
 80016dc:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 *
 * @notapi
 */
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {

  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 80016e0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80016e4:	6862      	ldr	r2, [r4, #4]
 80016e6:	68cb      	ldr	r3, [r1, #12]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	6819      	ldr	r1, [r3, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	6623      	str	r3, [r4, #96]	; 0x60
 80016f0:	65e1      	str	r1, [r4, #92]	; 0x5c
 80016f2:	6893      	ldr	r3, [r2, #8]
 80016f4:	b33b      	cbz	r3, 8001746 <_usb_ep0setup+0x76>
      !(usbp->config->requests_hook_cb(usbp))) {
 80016f6:	4620      	mov	r0, r4
 80016f8:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80016fa:	b320      	cbz	r0, 8001746 <_usb_ep0setup+0x76>
 80016fc:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80016fe:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8001702:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
 8001706:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 800170a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 800170e:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 8001710:	bf3c      	itt	cc
 8001712:	6562      	strcc	r2, [r4, #84]	; 0x54
 8001714:	4615      	movcc	r5, r2
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001716:	061b      	lsls	r3, r3, #24
 8001718:	f100 8085 	bmi.w	8001826 <_usb_ep0setup+0x156>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 800171c:	2d00      	cmp	r5, #0
 800171e:	d16e      	bne.n	80017fe <_usb_ep0setup+0x12e>
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8001720:	230b      	movs	r3, #11
 8001722:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8001726:	2320      	movs	r3, #32
 8001728:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 800172c:	f006 f838 	bl	80077a0 <_dbg_check_lock_from_isr>
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0, NULL, 0);
 8001730:	4620      	mov	r0, r4
 8001732:	4629      	mov	r1, r5
 8001734:	462a      	mov	r2, r5
 8001736:	462b      	mov	r3, r5
 8001738:	f7ff fee2 	bl	8001500 <usbStartTransmitI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800173c:	f006 f818 	bl	8007770 <_dbg_check_unlock_from_isr>
 8001740:	f385 8811 	msr	BASEPRI, r5
 8001744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8001746:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800174a:	f013 0660 	ands.w	r6, r3, #96	; 0x60
 800174e:	d016      	beq.n	800177e <_usb_ep0setup+0xae>
 8001750:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8001752:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
      usb_lld_stall_out(usbp, 0);
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001756:	6861      	ldr	r1, [r4, #4]
 8001758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800175c:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8001760:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8001764:	680d      	ldr	r5, [r1, #0]
 8001766:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800176a:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 800176e:	b115      	cbz	r5, 8001776 <_usb_ep0setup+0xa6>
 8001770:	4620      	mov	r0, r4
 8001772:	2106      	movs	r1, #6
 8001774:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8001776:	2306      	movs	r3, #6
 8001778:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 800177c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
 800177e:	f894 505d 	ldrb.w	r5, [r4, #93]	; 0x5d
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001782:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8001786:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800178a:	f240 3202 	movw	r2, #770	; 0x302
 800178e:	4295      	cmp	r5, r2
 8001790:	f000 80ed 	beq.w	800196e <_usb_ep0setup+0x29e>
 8001794:	d81d      	bhi.n	80017d2 <_usb_ep0setup+0x102>
 8001796:	2d02      	cmp	r5, #2
 8001798:	f000 80d3 	beq.w	8001942 <_usb_ep0setup+0x272>
 800179c:	f240 80be 	bls.w	800191c <_usb_ep0setup+0x24c>
 80017a0:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
 80017a4:	f000 80fb 	beq.w	800199e <_usb_ep0setup+0x2ce>
 80017a8:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 80017ac:	d075      	beq.n	800189a <_usb_ep0setup+0x1ca>
 80017ae:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80017b2:	d1cd      	bne.n	8001750 <_usb_ep0setup+0x80>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80017b4:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80017b8:	2a01      	cmp	r2, #1
 80017ba:	d1c9      	bne.n	8001750 <_usb_ep0setup+0x80>
      usbp->status &= ~2U;
 80017bc:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80017c0:	6526      	str	r6, [r4, #80]	; 0x50
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 80017c2:	f022 0202 	bic.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80017c6:	6566      	str	r6, [r4, #84]	; 0x54
 80017c8:	65a6      	str	r6, [r4, #88]	; 0x58
 80017ca:	4635      	mov	r5, r6
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 80017cc:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
 80017d0:	e797      	b.n	8001702 <_usb_ep0setup+0x32>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80017d2:	f240 6201 	movw	r2, #1537	; 0x601
 80017d6:	4295      	cmp	r5, r2
 80017d8:	d94d      	bls.n	8001876 <_usb_ep0setup+0x1a6>
 80017da:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
 80017de:	d06c      	beq.n	80018ba <_usb_ep0setup+0x1ea>
 80017e0:	f640 4202 	movw	r2, #3074	; 0xc02
 80017e4:	4295      	cmp	r5, r2
 80017e6:	f000 80a5 	beq.w	8001934 <_usb_ep0setup+0x264>
 80017ea:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80017ee:	d1af      	bne.n	8001750 <_usb_ep0setup+0x80>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 80017f0:	f104 0267 	add.w	r2, r4, #103	; 0x67
 80017f4:	2501      	movs	r5, #1
 80017f6:	65a6      	str	r6, [r4, #88]	; 0x58
 80017f8:	6522      	str	r2, [r4, #80]	; 0x50
 80017fa:	6565      	str	r5, [r4, #84]	; 0x54
 80017fc:	e781      	b.n	8001702 <_usb_ep0setup+0x32>
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_OUT_RX;
 80017fe:	2315      	movs	r3, #21
 8001800:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8001804:	2320      	movs	r3, #32
 8001806:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 800180a:	f005 ffc9 	bl	80077a0 <_dbg_check_lock_from_isr>
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 800180e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001810:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001812:	4620      	mov	r0, r4
 8001814:	2100      	movs	r1, #0
 8001816:	f7ff fdb3 	bl	8001380 <usbStartReceiveI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800181a:	f005 ffa9 	bl	8007770 <_dbg_check_unlock_from_isr>
 800181e:	2300      	movs	r3, #0
 8001820:	f383 8811 	msr	BASEPRI, r3
 8001824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 8001826:	b19d      	cbz	r5, 8001850 <_usb_ep0setup+0x180>
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_IN_TX;
 8001828:	2309      	movs	r3, #9
 800182a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 800182e:	2320      	movs	r3, #32
 8001830:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8001834:	f005 ffb4 	bl	80077a0 <_dbg_check_lock_from_isr>
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8001838:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800183a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800183c:	4620      	mov	r0, r4
 800183e:	2100      	movs	r1, #0
 8001840:	f7ff fe5e 	bl	8001500 <usbStartTransmitI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001844:	f005 ff94 	bl	8007770 <_dbg_check_unlock_from_isr>
 8001848:	2300      	movs	r3, #0
 800184a:	f383 8811 	msr	BASEPRI, r3
 800184e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8001850:	2314      	movs	r3, #20
 8001852:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8001856:	2320      	movs	r3, #32
 8001858:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 800185c:	f005 ffa0 	bl	80077a0 <_dbg_check_lock_from_isr>
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0, NULL, 0);
 8001860:	4620      	mov	r0, r4
 8001862:	4629      	mov	r1, r5
 8001864:	462a      	mov	r2, r5
 8001866:	462b      	mov	r3, r5
 8001868:	f7ff fd8a 	bl	8001380 <usbStartReceiveI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800186c:	f005 ff80 	bl	8007770 <_dbg_check_unlock_from_isr>
 8001870:	f385 8811 	msr	BASEPRI, r5
 8001874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001876:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 800187a:	d236      	bcs.n	80018ea <_usb_ep0setup+0x21a>
 800187c:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 8001880:	f47f af66 	bne.w	8001750 <_usb_ep0setup+0x80>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 8001884:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8001888:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800188c:	f000 80a5 	beq.w	80019da <_usb_ep0setup+0x30a>
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001890:	2500      	movs	r5, #0
 8001892:	6525      	str	r5, [r4, #80]	; 0x50
 8001894:	6565      	str	r5, [r4, #84]	; 0x54
 8001896:	65a5      	str	r5, [r4, #88]	; 0x58
 8001898:	e733      	b.n	8001702 <_usb_ep0setup+0x32>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800189a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 800189e:	2a01      	cmp	r2, #1
 80018a0:	f47f af56 	bne.w	8001750 <_usb_ep0setup+0x80>
      usbp->status |= 2U;
 80018a4:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80018a8:	6526      	str	r6, [r4, #80]	; 0x50
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 80018aa:	f042 0202 	orr.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80018ae:	6566      	str	r6, [r4, #84]	; 0x54
 80018b0:	65a6      	str	r6, [r4, #88]	; 0x58
 80018b2:	4635      	mov	r5, r6
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 80018b4:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
 80018b8:	e723      	b.n	8001702 <_usb_ep0setup+0x32>
    if (usbp->configuration != usbp->setup[2])
#endif
    {
      /* If the USB device is already active then we have to perform the clear
         procedure on the current configuration.*/
      if (usbp->state == USB_ACTIVE) {
 80018ba:	7823      	ldrb	r3, [r4, #0]
 80018bc:	2b04      	cmp	r3, #4
 80018be:	f000 80a4 	beq.w	8001a0a <_usb_ep0setup+0x33a>
        osalSysUnlockFromISR ();
        usbp->configuration = 0U;
        usbp->state = USB_SELECTED;
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
      }
      if (usbp->setup[2] != 0U) {
 80018c2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 80018c6:	b14b      	cbz	r3, 80018dc <_usb_ep0setup+0x20c>
        /* New configuration.*/
        usbp->configuration = usbp->setup[2];
        usbp->state = USB_ACTIVE;
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80018c8:	6862      	ldr	r2, [r4, #4]
        usbp->state = USB_SELECTED;
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
      }
      if (usbp->setup[2] != 0U) {
        /* New configuration.*/
        usbp->configuration = usbp->setup[2];
 80018ca:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
        usbp->state = USB_ACTIVE;
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80018ce:	6813      	ldr	r3, [r2, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
      }
      if (usbp->setup[2] != 0U) {
        /* New configuration.*/
        usbp->configuration = usbp->setup[2];
        usbp->state = USB_ACTIVE;
 80018d0:	2204      	movs	r2, #4
 80018d2:	7022      	strb	r2, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80018d4:	b113      	cbz	r3, 80018dc <_usb_ep0setup+0x20c>
 80018d6:	4620      	mov	r0, r4
 80018d8:	2102      	movs	r1, #2
 80018da:	4798      	blx	r3
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 80018dc:	2500      	movs	r5, #0
 80018de:	6525      	str	r5, [r4, #80]	; 0x50
 80018e0:	6565      	str	r5, [r4, #84]	; 0x54
 80018e2:	65a5      	str	r5, [r4, #88]	; 0x58
 80018e4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80018e8:	e70b      	b.n	8001702 <_usb_ep0setup+0x32>
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 80018ea:	6862      	ldr	r2, [r4, #4]

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 80018ec:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
 80018f0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 80018f4:	6855      	ldr	r5, [r2, #4]
 80018f6:	f894 105f 	ldrb.w	r1, [r4, #95]	; 0x5f
 80018fa:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80018fe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001902:	4620      	mov	r0, r4
 8001904:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 8001906:	2800      	cmp	r0, #0
 8001908:	f43f af22 	beq.w	8001750 <_usb_ep0setup+0x80>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 800190c:	6843      	ldr	r3, [r0, #4]
 800190e:	6805      	ldr	r5, [r0, #0]
 8001910:	6565      	str	r5, [r4, #84]	; 0x54
 8001912:	6523      	str	r3, [r4, #80]	; 0x50
 8001914:	65a6      	str	r6, [r4, #88]	; 0x58
 8001916:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800191a:	e6f2      	b.n	8001702 <_usb_ep0setup+0x32>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800191c:	b93d      	cbnz	r5, 800192e <_usb_ep0setup+0x25e>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 800191e:	2202      	movs	r2, #2
 8001920:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8001924:	65a5      	str	r5, [r4, #88]	; 0x58
 8001926:	6521      	str	r1, [r4, #80]	; 0x50
 8001928:	6562      	str	r2, [r4, #84]	; 0x54
 800192a:	4615      	mov	r5, r2
 800192c:	e6e9      	b.n	8001702 <_usb_ep0setup+0x32>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800192e:	2d01      	cmp	r5, #1
 8001930:	f47f af0e 	bne.w	8001750 <_usb_ep0setup+0x80>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8001934:	4a69      	ldr	r2, [pc, #420]	; (8001adc <_usb_ep0setup+0x40c>)
 8001936:	6522      	str	r2, [r4, #80]	; 0x50
 8001938:	2502      	movs	r5, #2
 800193a:	2200      	movs	r2, #0
 800193c:	6565      	str	r5, [r4, #84]	; 0x54
 800193e:	65a2      	str	r2, [r4, #88]	; 0x58
 8001940:	e6df      	b.n	8001702 <_usb_ep0setup+0x32>
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8001942:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->ie[ep].DIEPCTL;
 8001946:	f002 010f 	and.w	r1, r2, #15
 800194a:	0617      	lsls	r7, r2, #24
 800194c:	bf4c      	ite	mi
 800194e:	3148      	addmi	r1, #72	; 0x48
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->oe[ep].DOEPCTL;
 8001950:	3158      	addpl	r1, #88	; 0x58
 8001952:	0149      	lsls	r1, r1, #5
 8001954:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001956:	5851      	ldr	r1, [r2, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 8001958:	0408      	lsls	r0, r1, #16
 800195a:	f57f aefa 	bpl.w	8001752 <_usb_ep0setup+0x82>
    return EP_STATUS_DISABLED;
  if (ctl & DOEPCTL_STALL)
 800195e:	f411 1100 	ands.w	r1, r1, #2097152	; 0x200000
 8001962:	d135      	bne.n	80019d0 <_usb_ep0setup+0x300>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8001964:	4a5e      	ldr	r2, [pc, #376]	; (8001ae0 <_usb_ep0setup+0x410>)
 8001966:	6565      	str	r5, [r4, #84]	; 0x54
 8001968:	65a1      	str	r1, [r4, #88]	; 0x58
 800196a:	6522      	str	r2, [r4, #80]	; 0x50
 800196c:	e6c9      	b.n	8001702 <_usb_ep0setup+0x32>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800196e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8001972:	2a00      	cmp	r2, #0
 8001974:	f47f aeec 	bne.w	8001750 <_usb_ep0setup+0x80>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8001978:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
 800197c:	f012 010f 	ands.w	r1, r2, #15
 8001980:	d086      	beq.n	8001890 <_usb_ep0setup+0x1c0>
 8001982:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8001984:	0612      	lsls	r2, r2, #24
 8001986:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800198a:	d454      	bmi.n	8001a36 <_usb_ep0setup+0x366>
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 800198c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001990:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001994:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8001998:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800199c:	e778      	b.n	8001890 <_usb_ep0setup+0x1c0>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800199e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80019a2:	2a00      	cmp	r2, #0
 80019a4:	f47f aed4 	bne.w	8001750 <_usb_ep0setup+0x80>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80019a8:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
 80019ac:	f012 010f 	ands.w	r1, r2, #15
 80019b0:	f43f af6e 	beq.w	8001890 <_usb_ep0setup+0x1c0>
 80019b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80019b6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80019ba:	0611      	lsls	r1, r2, #24
 80019bc:	d432      	bmi.n	8001a24 <_usb_ep0setup+0x354>
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 80019be:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80019c2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80019c6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80019ca:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80019ce:	e75f      	b.n	8001890 <_usb_ep0setup+0x1c0>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 80019d0:	4a44      	ldr	r2, [pc, #272]	; (8001ae4 <_usb_ep0setup+0x414>)
 80019d2:	6565      	str	r5, [r4, #84]	; 0x54
 80019d4:	65a6      	str	r6, [r4, #88]	; 0x58
 80019d6:	6522      	str	r2, [r4, #80]	; 0x50
 80019d8:	e693      	b.n	8001702 <_usb_ep0setup+0x32>
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 80019da:	f894 105e 	ldrb.w	r1, [r4, #94]	; 0x5e
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 80019de:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80019e0:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66

  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 80019e4:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80019e8:	6860      	ldr	r0, [r4, #4]
 80019ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019ee:	6805      	ldr	r5, [r0, #0]
 80019f0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80019f4:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 80019f8:	b115      	cbz	r5, 8001a00 <_usb_ep0setup+0x330>
 80019fa:	4620      	mov	r0, r4
 80019fc:	2101      	movs	r1, #1
 80019fe:	47a8      	blx	r5
  usbp->state = USB_SELECTED;
 8001a00:	2203      	movs	r2, #3
 8001a02:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8001a06:	7022      	strb	r2, [r4, #0]
 8001a08:	e742      	b.n	8001890 <_usb_ep0setup+0x1c0>
 8001a0a:	2320      	movs	r3, #32
 8001a0c:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8001a10:	f005 fec6 	bl	80077a0 <_dbg_check_lock_from_isr>
 * @iclass
 */
void usbDisableEndpointsI(USBDriver *usbp) {
  unsigned i;

  osalDbgCheckClassI();
 8001a14:	f005 fe6c 	bl	80076f0 <chDbgCheckClassI>
  osalDbgCheck(usbp != NULL);
  osalDbgAssert(usbp->state == USB_ACTIVE, "invalid state");
 8001a18:	7823      	ldrb	r3, [r4, #0]
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d014      	beq.n	8001a48 <_usb_ep0setup+0x378>
 8001a1e:	4832      	ldr	r0, [pc, #200]	; (8001ae8 <_usb_ep0setup+0x418>)
 8001a20:	f005 fe36 	bl	8007690 <chSysHalt>
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8001a24:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001a28:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001a2c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8001a30:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8001a34:	e72c      	b.n	8001890 <_usb_ep0setup+0x1c0>
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8001a36:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001a3a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001a3e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8001a42:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8001a46:	e723      	b.n	8001890 <_usb_ep0setup+0x1c0>
 8001a48:	6f21      	ldr	r1, [r4, #112]	; 0x70

  usbp->transmitting &= 1U;
 8001a4a:	8922      	ldrh	r2, [r4, #8]
  usbp->receiving    &= 1U;
 8001a4c:	8963      	ldrh	r3, [r4, #10]
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8001a4e:	6808      	ldr	r0, [r1, #0]
 8001a50:	6760      	str	r0, [r4, #116]	; 0x74

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);
  osalDbgAssert(usbp->state == USB_ACTIVE, "invalid state");

  usbp->transmitting &= 1U;
 8001a52:	f002 0201 	and.w	r2, r2, #1
  usbp->receiving    &= 1U;
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	688f      	ldr	r7, [r1, #8]
 8001a5c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      if (usbp->epc[i]->out_state != NULL) {
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
    }
#endif
    usbp->epc[i] = NULL;
 8001a5e:	6126      	str	r6, [r4, #16]
 8001a60:	6166      	str	r6, [r4, #20]
 8001a62:	61a6      	str	r6, [r4, #24]
 8001a64:	61e6      	str	r6, [r4, #28]
 8001a66:	6226      	str	r6, [r4, #32]

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);
  osalDbgAssert(usbp->state == USB_ACTIVE, "invalid state");

  usbp->transmitting &= 1U;
 8001a68:	8122      	strh	r2, [r4, #8]
  usbp->receiving    &= 1U;
 8001a6a:	8163      	strh	r3, [r4, #10]

    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
    }

    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a70:	e00b      	b.n	8001a8a <_usb_ep0setup+0x3ba>

    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
    }

    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 8001a72:	f8d2 5b00 	ldr.w	r5, [r2, #2816]	; 0xb00
 8001a76:	2d00      	cmp	r5, #0
 8001a78:	db14      	blt.n	8001aa4 <_usb_ep0setup+0x3d4>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
    }

    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8001a7a:	440b      	add	r3, r1

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001a7c:	3601      	adds	r6, #1
 8001a7e:	42be      	cmp	r6, r7

    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
    }

    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8001a80:	f8c3 0908 	str.w	r0, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8001a84:	f8c3 0b08 	str.w	r0, [r3, #2824]	; 0xb08

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001a88:	d813      	bhi.n	8001ab2 <_usb_ep0setup+0x3e2>
 8001a8a:	0173      	lsls	r3, r6, #5
 8001a8c:	18ca      	adds	r2, r1, r3

    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8001a8e:	f8d2 5900 	ldr.w	r5, [r2, #2304]	; 0x900
 8001a92:	2d00      	cmp	r5, #0
 8001a94:	daed      	bge.n	8001a72 <_usb_ep0setup+0x3a2>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 8001a96:	f8d2 5900 	ldr.w	r5, [r2, #2304]	; 0x900
 8001a9a:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
 8001a9e:	f8c2 5900 	str.w	r5, [r2, #2304]	; 0x900
 8001aa2:	e7e6      	b.n	8001a72 <_usb_ep0setup+0x3a2>
    }

    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 8001aa4:	f8d2 5b00 	ldr.w	r5, [r2, #2816]	; 0xb00
 8001aa8:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
 8001aac:	f8c2 5b00 	str.w	r5, [r2, #2816]	; 0xb00
 8001ab0:	e7e3      	b.n	8001a7a <_usb_ep0setup+0x3aa>
    }

    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  }
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8001ab2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001ab6:	f8c1 381c 	str.w	r3, [r1, #2076]	; 0x81c
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001aba:	f005 fe59 	bl	8007770 <_dbg_check_unlock_from_isr>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f383 8811 	msr	BASEPRI, r3
        osalSysLockFromISR ();
        usbDisableEndpointsI(usbp);
        osalSysUnlockFromISR ();
        usbp->configuration = 0U;
        usbp->state = USB_SELECTED;
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8001ac4:	6862      	ldr	r2, [r4, #4]
      if (usbp->state == USB_ACTIVE) {
        /* Current configuration cleared.*/
        osalSysLockFromISR ();
        usbDisableEndpointsI(usbp);
        osalSysUnlockFromISR ();
        usbp->configuration = 0U;
 8001ac6:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
        usbp->state = USB_SELECTED;
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8001aca:	6813      	ldr	r3, [r2, #0]
        /* Current configuration cleared.*/
        osalSysLockFromISR ();
        usbDisableEndpointsI(usbp);
        osalSysUnlockFromISR ();
        usbp->configuration = 0U;
        usbp->state = USB_SELECTED;
 8001acc:	2103      	movs	r1, #3
 8001ace:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f43f aef6 	beq.w	80018c2 <_usb_ep0setup+0x1f2>
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	4798      	blx	r3
 8001ada:	e6f2      	b.n	80018c2 <_usb_ep0setup+0x1f2>
 8001adc:	0800c590 	.word	0x0800c590
 8001ae0:	0800c5ec 	.word	0x0800c5ec
 8001ae4:	0800c594 	.word	0x0800c594
 8001ae8:	0800c720 	.word	0x0800c720
 8001aec:	00000000 	.word	0x00000000

08001af0 <usbInitEndpointI>:
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 8001af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001af4:	4604      	mov	r4, r0
 8001af6:	460e      	mov	r6, r1
 8001af8:	4615      	mov	r5, r2

  osalDbgCheckClassI();
 8001afa:	f005 fdf9 	bl	80076f0 <chDbgCheckClassI>
  osalDbgCheck((usbp != NULL) && (epcp != NULL));
 8001afe:	b11c      	cbz	r4, 8001b08 <usbInitEndpointI+0x18>
 8001b00:	b115      	cbz	r5, 8001b08 <usbInitEndpointI+0x18>
  osalDbgAssert(usbp->state == USB_ACTIVE,
 8001b02:	7823      	ldrb	r3, [r4, #0]
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d002      	beq.n	8001b0e <usbInitEndpointI+0x1e>
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {

  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (epcp != NULL));
 8001b08:	485d      	ldr	r0, [pc, #372]	; (8001c80 <usbInitEndpointI+0x190>)
 8001b0a:	f005 fdc1 	bl	8007690 <chSysHalt>
 8001b0e:	fa0f f886 	sxth.w	r8, r6
 8001b12:	eb04 0788 	add.w	r7, r4, r8, lsl #2
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");
 8001b16:	68f9      	ldr	r1, [r7, #12]
 8001b18:	2900      	cmp	r1, #0
 8001b1a:	d1f5      	bne.n	8001b08 <usbInitEndpointI+0x18>

  /* Logically enabling the endpoint in the USBDriver structure.*/
  usbp->epc[ep] = epcp;
 8001b1c:	60fd      	str	r5, [r7, #12]

  /* Clearing the state structures, custom fields as well.*/
  if (epcp->in_state != NULL) {
 8001b1e:	6968      	ldr	r0, [r5, #20]
 8001b20:	b110      	cbz	r0, 8001b28 <usbInitEndpointI+0x38>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8001b22:	2210      	movs	r2, #16
 8001b24:	f006 ffd4 	bl	8008ad0 <memset>
  }
  if (epcp->out_state != NULL) {
 8001b28:	69a8      	ldr	r0, [r5, #24]
 8001b2a:	b118      	cbz	r0, 8001b34 <usbInitEndpointI+0x44>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	2210      	movs	r2, #16
 8001b30:	f006 ffce 	bl	8008ad0 <memset>
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl, fsize;
  stm32_otg_t *otgp = usbp->otg;

  /* IN and OUT common parameters.*/
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8001b34:	68fb      	ldr	r3, [r7, #12]
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl, fsize;
  stm32_otg_t *otgp = usbp->otg;
 8001b36:	6ee5      	ldr	r5, [r4, #108]	; 0x6c

  /* IN and OUT common parameters.*/
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	f002 0203 	and.w	r2, r2, #3
 8001b3e:	2a02      	cmp	r2, #2
 8001b40:	d05d      	beq.n	8001bfe <usbInitEndpointI+0x10e>
 8001b42:	2a03      	cmp	r2, #3
 8001b44:	d05e      	beq.n	8001c04 <usbInitEndpointI+0x114>
  case USB_EP_MODE_TYPE_CTRL:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL;
 8001b46:	484f      	ldr	r0, [pc, #316]	; (8001c84 <usbInitEndpointI+0x194>)
 8001b48:	494f      	ldr	r1, [pc, #316]	; (8001c88 <usbInitEndpointI+0x198>)
 8001b4a:	2a01      	cmp	r2, #1
 8001b4c:	bf0c      	ite	eq
 8001b4e:	4681      	moveq	r9, r0
 8001b50:	4689      	movne	r9, r1
  default:
    return;
  }

  /* OUT endpoint activation or deactivation.*/
  otgp->oe[ep].DOEPTSIZ = 0;
 8001b52:	0172      	lsls	r2, r6, #5
  if (usbp->epc[ep]->out_state != NULL) {
 8001b54:	6999      	ldr	r1, [r3, #24]
  default:
    return;
  }

  /* OUT endpoint activation or deactivation.*/
  otgp->oe[ep].DOEPTSIZ = 0;
 8001b56:	18a8      	adds	r0, r5, r2
 8001b58:	f04f 0e00 	mov.w	lr, #0
 8001b5c:	f8c0 eb10 	str.w	lr, [r0, #2832]	; 0xb10
  if (usbp->epc[ep]->out_state != NULL) {
 8001b60:	2900      	cmp	r1, #0
 8001b62:	d055      	beq.n	8001c10 <usbInitEndpointI+0x120>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 8001b64:	8a58      	ldrh	r0, [r3, #18]
 8001b66:	f106 0158 	add.w	r1, r6, #88	; 0x58
 8001b6a:	0149      	lsls	r1, r1, #5
 8001b6c:	ea49 0000 	orr.w	r0, r9, r0
 8001b70:	5068      	str	r0, [r5, r1]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 8001b72:	f106 0e10 	add.w	lr, r6, #16
 8001b76:	f8d5 081c 	ldr.w	r0, [r5, #2076]	; 0x81c
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	fa01 f10e 	lsl.w	r1, r1, lr
 8001b80:	4301      	orrs	r1, r0
 8001b82:	f8c5 181c 	str.w	r1, [r5, #2076]	; 0x81c
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  }

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
 8001b86:	442a      	add	r2, r5
  if (usbp->epc[ep]->in_state != NULL) {
 8001b88:	6959      	ldr	r1, [r3, #20]
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  }

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f8c2 0910 	str.w	r0, [r2, #2320]	; 0x910
  if (usbp->epc[ep]->in_state != NULL) {
 8001b90:	2900      	cmp	r1, #0
 8001b92:	d051      	beq.n	8001c38 <usbInitEndpointI+0x148>
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
 8001b94:	8b9a      	ldrh	r2, [r3, #28]

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8001b96:	8a19      	ldrh	r1, [r3, #16]
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8001b98:	f8d4 e074 	ldr.w	lr, [r4, #116]	; 0x74
  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
 8001b9c:	2a01      	cmp	r2, #1

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8001b9e:	ea4f 0391 	mov.w	r3, r1, lsr #2
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
 8001ba2:	bf88      	it	hi
 8001ba4:	4353      	mulhi	r3, r2
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 8001ba6:	eb03 010e 	add.w	r1, r3, lr
 8001baa:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8001bac:	6761      	str	r1, [r4, #116]	; 0x74
  osalDbgAssert(usbp->pmnext <= usbp->otgparams->otg_ram_size,
 8001bae:	6852      	ldr	r2, [r2, #4]
 8001bb0:	4291      	cmp	r1, r2
 8001bb2:	d82a      	bhi.n	8001c0a <usbInitEndpointI+0x11a>
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8001bb4:	f106 003f 	add.w	r0, r6, #63	; 0x3f
 8001bb8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001bba:	eb05 0080 	add.w	r0, r5, r0, lsl #2
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8001bbe:	01b1      	lsls	r1, r6, #6
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8001bc0:	ea4e 4303 	orr.w	r3, lr, r3, lsl #16
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8001bc4:	f041 0120 	orr.w	r1, r1, #32
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8001bc8:	6043      	str	r3, [r0, #4]
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8001bca:	6111      	str	r1, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8001bcc:	6913      	ldr	r3, [r2, #16]
 8001bce:	0699      	lsls	r1, r3, #26
 8001bd0:	d4fc      	bmi.n	8001bcc <usbInitEndpointI+0xdc>
 * @xclass
 */
#if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {

  chSysPolledDelayX(cycles);
 8001bd2:	2012      	movs	r0, #18
 8001bd4:	f005 fd4c 	bl	8007670 <chSysPolledDelayX>
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
                           DIEPCTL_TXFNUM(ep) |
 8001bda:	8a1a      	ldrh	r2, [r3, #16]
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 8001bdc:	f106 0348 	add.w	r3, r6, #72	; 0x48
 8001be0:	015b      	lsls	r3, r3, #5
 8001be2:	ea42 5286 	orr.w	r2, r2, r6, lsl #22
                           DIEPCTL_TXFNUM(ep) |
 8001be6:	ea42 0209 	orr.w	r2, r2, r9
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 8001bea:	50ea      	str	r2, [r5, r3]
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 8001bec:	2301      	movs	r3, #1
 8001bee:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 8001bf2:	40b3      	lsls	r3, r6
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
 8001bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    break;
  case USB_EP_MODE_TYPE_ISOC:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_ISO;
    break;
  case USB_EP_MODE_TYPE_BULK:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_BULK;
 8001bfe:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8001c94 <usbInitEndpointI+0x1a4>
 8001c02:	e7a6      	b.n	8001b52 <usbInitEndpointI+0x62>
    break;
  case USB_EP_MODE_TYPE_INTR:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_INTR;
 8001c04:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8001c98 <usbInitEndpointI+0x1a8>
 8001c08:	e7a3      	b.n	8001b52 <usbInitEndpointI+0x62>
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
  osalDbgAssert(usbp->pmnext <= usbp->otgparams->otg_ram_size,
 8001c0a:	4820      	ldr	r0, [pc, #128]	; (8001c8c <usbInitEndpointI+0x19c>)
 8001c0c:	f005 fd40 	bl	8007690 <chSysHalt>
 8001c10:	eb05 1148 	add.w	r1, r5, r8, lsl #5
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  }
  else {
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8001c14:	f106 0e10 	add.w	lr, r6, #16
  if (usbp->epc[ep]->out_state != NULL) {
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  }
  else {
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 8001c18:	f8d1 0b00 	ldr.w	r0, [r1, #2816]	; 0xb00
 8001c1c:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8001c20:	f8c1 0b00 	str.w	r0, [r1, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8001c24:	f8d5 081c 	ldr.w	r0, [r5, #2076]	; 0x81c
 8001c28:	2101      	movs	r1, #1
 8001c2a:	fa01 f10e 	lsl.w	r1, r1, lr
 8001c2e:	ea20 0101 	bic.w	r1, r0, r1
 8001c32:	f8c5 181c 	str.w	r1, [r5, #2076]	; 0x81c
 8001c36:	e7a6      	b.n	8001b86 <usbInitEndpointI+0x96>
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8001c38:	f106 033f 	add.w	r3, r6, #63	; 0x3f
 8001c3c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001c3e:	4814      	ldr	r0, [pc, #80]	; (8001c90 <usbInitEndpointI+0x1a0>)
 8001c40:	eb05 0383 	add.w	r3, r5, r3, lsl #2
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8001c44:	01b1      	lsls	r1, r6, #6
 8001c46:	f041 0120 	orr.w	r1, r1, #32
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8001c4a:	6058      	str	r0, [r3, #4]
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8001c4c:	6111      	str	r1, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8001c4e:	6913      	ldr	r3, [r2, #16]
 8001c50:	069b      	lsls	r3, r3, #26
 8001c52:	d4fc      	bmi.n	8001c4e <usbInitEndpointI+0x15e>
 8001c54:	eb05 1848 	add.w	r8, r5, r8, lsl #5
 8001c58:	2012      	movs	r0, #18
 8001c5a:	f005 fd09 	bl	8007670 <chSysPolledDelayX>
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
    otg_txfifo_flush(usbp, ep);
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 8001c5e:	f8d8 2900 	ldr.w	r2, [r8, #2304]	; 0x900
 8001c62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c66:	f8c8 2900 	str.w	r2, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 8001c6a:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 8001c6e:	2301      	movs	r3, #1
 8001c70:	40b3      	lsls	r3, r6
 8001c72:	ea22 0303 	bic.w	r3, r2, r3
 8001c76:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
 8001c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c7e:	bf00      	nop
 8001c80:	0800c5d0 	.word	0x0800c5d0
 8001c84:	10048000 	.word	0x10048000
 8001c88:	10008000 	.word	0x10008000
 8001c8c:	0800cbc4 	.word	0x0800cbc4
 8001c90:	02000400 	.word	0x02000400
 8001c94:	10088000 	.word	0x10088000
 8001c98:	100c8000 	.word	0x100c8000
 8001c9c:	00000000 	.word	0x00000000

08001ca0 <sdu_start_receive.lto_priv.99>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static bool sdu_start_receive(SerialUSBDriver *sdup) {
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *buf;

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001ca2:	f8d0 648c 	ldr.w	r6, [r0, #1164]	; 0x48c
 8001ca6:	6837      	ldr	r7, [r6, #0]
 8001ca8:	783b      	ldrb	r3, [r7, #0]
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d001      	beq.n	8001cb2 <sdu_start_receive.lto_priv.99+0x12>
      (sdup->state != SDU_READY)) {
    return true;
 8001cae:	2001      	movs	r0, #1
 8001cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static bool sdu_start_receive(SerialUSBDriver *sdup) {
  uint8_t *buf;

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001cb2:	7a03      	ldrb	r3, [r0, #8]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d1fa      	bne.n	8001cae <sdu_start_receive.lto_priv.99+0xe>
      (sdup->state != SDU_READY)) {
    return true;
  }

  /* Checking if there is already a transaction ongoing on the endpoint.*/
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001cb8:	7932      	ldrb	r2, [r6, #4]
 8001cba:	897b      	ldrh	r3, [r7, #10]
 8001cbc:	2501      	movs	r5, #1
 8001cbe:	fa05 f202 	lsl.w	r2, r5, r2
 8001cc2:	421a      	tst	r2, r3
 8001cc4:	d1f3      	bne.n	8001cae <sdu_start_receive.lto_priv.99+0xe>
 8001cc6:	4604      	mov	r4, r0
 *
 * @iclass
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();
 8001cc8:	f005 fd12 	bl	80076f0 <chDbgCheckClassI>

  if (ibqIsFullI(ibqp)) {
 8001ccc:	69e2      	ldr	r2, [r4, #28]
 8001cce:	6a23      	ldr	r3, [r4, #32]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d009      	beq.n	8001ce8 <sdu_start_receive.lto_priv.99+0x48>
    return true;
  }

  /* Checking if there is a buffer ready for incoming data.*/
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
  if (buf == NULL) {
 8001cd4:	3204      	adds	r2, #4
 8001cd6:	d0ea      	beq.n	8001cae <sdu_start_receive.lto_priv.99+0xe>
    return true;
  }

  /* Buffer found, starting a new transaction.*/
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8001cd8:	4638      	mov	r0, r7
 8001cda:	7971      	ldrb	r1, [r6, #5]
 8001cdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ce0:	f7ff fb4e 	bl	8001380 <usbStartReceiveI>
                   buf, SERIAL_USB_BUFFERS_SIZE);

  return false;
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ce8:	69a3      	ldr	r3, [r4, #24]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1df      	bne.n	8001cae <sdu_start_receive.lto_priv.99+0xe>
 8001cee:	e7f1      	b.n	8001cd4 <sdu_start_receive.lto_priv.99+0x34>

08001cf0 <sduDataReceived>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        OUT endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
  size_t size;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001cf0:	310d      	adds	r1, #13
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        OUT endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8001cf2:	b538      	push	{r3, r4, r5, lr}
  size_t size;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001cf4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]

  if (sdup == NULL) {
 8001cf8:	b1bc      	cbz	r4, 8001d2a <sduDataReceived+0x3a>
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8001d00:	f005 fd4e 	bl	80077a0 <_dbg_check_lock_from_isr>
  }

  osalSysLockFromISR();

  /* Checking for zero-size transactions.*/
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8001d04:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001d08:	6813      	ldr	r3, [r2, #0]
 8001d0a:	7952      	ldrb	r2, [r2, #5]
 8001d0c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	685d      	ldr	r5, [r3, #4]
                                       sdup->config->bulk_out);
  if (size > (size_t)0) {
 8001d16:	b94d      	cbnz	r5, 8001d2c <sduDataReceived+0x3c>
  }

  /* The endpoint cannot be busy, we are in the context of the callback,
     so a packet is in the buffer for sure. Trying to get a free buffer
     for the next transaction.*/
  (void) sdu_start_receive(sdup);
 8001d18:	4620      	mov	r0, r4
 8001d1a:	f7ff ffc1 	bl	8001ca0 <sdu_start_receive.lto_priv.99>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001d1e:	f005 fd27 	bl	8007770 <_dbg_check_unlock_from_isr>
 8001d22:	2300      	movs	r3, #0
 8001d24:	f383 8811 	msr	BASEPRI, r3
 8001d28:	bd38      	pop	{r3, r4, r5, pc}
 8001d2a:	bd38      	pop	{r3, r4, r5, pc}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001d2c:	1d20      	adds	r0, r4, #4
 8001d2e:	2104      	movs	r1, #4
 8001d30:	f005 f90e 	bl	8006f50 <chEvtBroadcastFlagsI>
 *
 * @iclass
 */
void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {

  osalDbgCheckClassI();
 8001d34:	f005 fcdc 	bl	80076f0 <chDbgCheckClassI>

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 8001d38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	429d      	cmp	r5, r3
 8001d3e:	d817      	bhi.n	8001d70 <sduDataReceived+0x80>
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 8001d40:	69e2      	ldr	r2, [r4, #28]
 8001d42:	6a23      	ldr	r3, [r4, #32]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d010      	beq.n	8001d6a <sduDataReceived+0x7a>

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 8001d48:	6015      	str	r5, [r2, #0]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
 8001d4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 8001d4c:	69a1      	ldr	r1, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
 8001d4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
 8001d50:	4413      	add	r3, r2

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 8001d52:	3101      	adds	r1, #1
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
 8001d54:	4283      	cmp	r3, r0

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 8001d56:	61a1      	str	r1, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 8001d58:	61e3      	str	r3, [r4, #28]
  if (ibqp->bwrptr >= ibqp->btop) {
 8001d5a:	d301      	bcc.n	8001d60 <sduDataReceived+0x70>
    ibqp->bwrptr = ibqp->buffers;
 8001d5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d5e:	61e3      	str	r3, [r4, #28]
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
 8001d60:	f104 000c 	add.w	r0, r4, #12
 8001d64:	f006 f8a4 	bl	8007eb0 <chThdDequeueNextI.constprop.54>
 8001d68:	e7d6      	b.n	8001d18 <sduDataReceived+0x28>
void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {

  osalDbgCheckClassI();

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 8001d6a:	69a3      	ldr	r3, [r4, #24]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0eb      	beq.n	8001d48 <sduDataReceived+0x58>
 */
void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {

  osalDbgCheckClassI();

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 8001d70:	4801      	ldr	r0, [pc, #4]	; (8001d78 <sduDataReceived+0x88>)
 8001d72:	f005 fc8d 	bl	8007690 <chSysHalt>
 8001d76:	bf00      	nop
 8001d78:	0800c5f0 	.word	0x0800c5f0
 8001d7c:	00000000 	.word	0x00000000

08001d80 <ibnotify.lto_priv.75>:
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void ibnotify(io_buffers_queue_t *bqp) {
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
  (void) sdu_start_receive(sdup);
 8001d80:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001d82:	f7ff bf8d 	b.w	8001ca0 <sdu_start_receive.lto_priv.99>
 8001d86:	bf00      	nop
	...

08001d90 <obqGetFullBufferI>:
 * @retval NULL         if the queue is empty.
 *
 * @iclass
 */
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {
 8001d90:	b538      	push	{r3, r4, r5, lr}
 8001d92:	4604      	mov	r4, r0
 8001d94:	460d      	mov	r5, r1

  osalDbgCheckClassI();
 8001d96:	f005 fcab 	bl	80076f0 <chDbgCheckClassI>

  if (obqIsEmptyI(obqp)) {
 8001d9a:	6963      	ldr	r3, [r4, #20]
 8001d9c:	6922      	ldr	r2, [r4, #16]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d004      	beq.n	8001dac <obqGetFullBufferI+0x1c>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 8001da2:	4618      	mov	r0, r3
 8001da4:	f850 3b04 	ldr.w	r3, [r0], #4
 8001da8:	602b      	str	r3, [r5, #0]

  return obqp->brdptr + sizeof (size_t);
}
 8001daa:	bd38      	pop	{r3, r4, r5, pc}
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 8001dac:	68e2      	ldr	r2, [r4, #12]
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d0f7      	beq.n	8001da2 <obqGetFullBufferI+0x12>
    return NULL;
 8001db2:	2000      	movs	r0, #0
 8001db4:	bd38      	pop	{r3, r4, r5, pc}
 8001db6:	bf00      	nop
	...

08001dc0 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        IN endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *buf;
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001dc2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        IN endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001dc6:	b083      	sub	sp, #12
  uint8_t *buf;
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001dc8:	6a1c      	ldr	r4, [r3, #32]

  if (sdup == NULL) {
 8001dca:	b30c      	cbz	r4, 8001e10 <sduDataTransmitted+0x50>
 8001dcc:	460e      	mov	r6, r1
 8001dce:	4605      	mov	r5, r0
 8001dd0:	2320      	movs	r3, #32
 8001dd2:	f383 8811 	msr	BASEPRI, r3
 8001dd6:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8001dda:	f005 fce1 	bl	80077a0 <_dbg_check_lock_from_isr>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001dde:	1d20      	adds	r0, r4, #4
 8001de0:	2108      	movs	r1, #8
 8001de2:	f005 f8b5 	bl	8006f50 <chEvtBroadcastFlagsI>

  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	b993      	cbnz	r3, 8001e14 <sduDataTransmitted+0x54>
 8001dee:	3444      	adds	r4, #68	; 0x44
    obqReleaseEmptyBufferI(&sdup->obqueue);
  }

  /* Checking if there is a buffer ready for transmission.*/
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001df0:	4620      	mov	r0, r4
 8001df2:	a901      	add	r1, sp, #4
 8001df4:	f7ff ffcc 	bl	8001d90 <obqGetFullBufferI>

  if (buf != NULL) {
 8001df8:	4602      	mov	r2, r0
 8001dfa:	b338      	cbz	r0, 8001e4c <sduDataTransmitted+0x8c>
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    usbStartTransmitI(usbp, ep, buf, n);
 8001dfc:	4628      	mov	r0, r5
 8001dfe:	4631      	mov	r1, r6
 8001e00:	9b01      	ldr	r3, [sp, #4]
 8001e02:	f7ff fb7d 	bl	8001500 <usbStartTransmitI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001e06:	f005 fcb3 	bl	8007770 <_dbg_check_unlock_from_isr>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f383 8811 	msr	BASEPRI, r3
  else {
    /* Nothing to transmit.*/
  }

  osalSysUnlockFromISR();
}
 8001e10:	b003      	add	sp, #12
 8001e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *
 * @iclass
 */
void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {

  osalDbgCheckClassI();
 8001e14:	f005 fc6c 	bl	80076f0 <chDbgCheckClassI>
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 8001e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e1c:	4283      	cmp	r3, r0
 8001e1e:	d025      	beq.n	8001e6c <sduDataTransmitted+0xac>

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
  obqp->brdptr += obqp->bsize;
 8001e20:	6e23      	ldr	r3, [r4, #96]	; 0x60

  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 8001e22:	6d22      	ldr	r2, [r4, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
  if (obqp->brdptr >= obqp->btop) {
 8001e24:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
  obqp->brdptr += obqp->bsize;
 8001e26:	4403      	add	r3, r0

  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 8001e28:	3201      	adds	r2, #1
  obqp->brdptr += obqp->bsize;
  if (obqp->brdptr >= obqp->btop) {
 8001e2a:	428b      	cmp	r3, r1

  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 8001e2c:	6522      	str	r2, [r4, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 8001e2e:	65a3      	str	r3, [r4, #88]	; 0x58
  if (obqp->brdptr >= obqp->btop) {
 8001e30:	d301      	bcc.n	8001e36 <sduDataTransmitted+0x76>
    obqp->brdptr = obqp->buffers;
 8001e32:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001e34:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
 8001e36:	3444      	adds	r4, #68	; 0x44
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
 8001e38:	4620      	mov	r0, r4
 8001e3a:	f006 f839 	bl	8007eb0 <chThdDequeueNextI.constprop.54>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
    obqReleaseEmptyBufferI(&sdup->obqueue);
  }

  /* Checking if there is a buffer ready for transmission.*/
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001e3e:	4620      	mov	r0, r4
 8001e40:	a901      	add	r1, sp, #4
 8001e42:	f7ff ffa5 	bl	8001d90 <obqGetFullBufferI>

  if (buf != NULL) {
 8001e46:	4602      	mov	r2, r0
 8001e48:	2800      	cmp	r0, #0
 8001e4a:	d1d7      	bne.n	8001dfc <sduDataTransmitted+0x3c>
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    usbStartTransmitI(usbp, ep, buf, n);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	695a      	ldr	r2, [r3, #20]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	2a00      	cmp	r2, #0
 8001e54:	d0d7      	beq.n	8001e06 <sduDataTransmitted+0x46>
           ((usbp->epc[ep]->in_state->txsize &
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8001e56:	8a1b      	ldrh	r3, [r3, #16]
 8001e58:	3b01      	subs	r3, #1
  if (buf != NULL) {
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    usbStartTransmitI(usbp, ep, buf, n);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d1d3      	bne.n	8001e06 <sduDataTransmitted+0x46>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
    /* Transmit zero sized packet in case the last one has maximum allowed
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8001e5e:	4631      	mov	r1, r6
 8001e60:	4628      	mov	r0, r5
 8001e62:	f105 025c 	add.w	r2, r5, #92	; 0x5c
 8001e66:	f7ff fb4b 	bl	8001500 <usbStartTransmitI>
 8001e6a:	e7cc      	b.n	8001e06 <sduDataTransmitted+0x46>
 * @iclass
 */
void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {

  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 8001e6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0d6      	beq.n	8001e20 <sduDataTransmitted+0x60>
 8001e72:	4801      	ldr	r0, [pc, #4]	; (8001e78 <sduDataTransmitted+0xb8>)
 8001e74:	f005 fc0c 	bl	8007690 <chSysHalt>
 8001e78:	0800c634 	.word	0x0800c634
 8001e7c:	00000000 	.word	0x00000000

08001e80 <obnotify.lto_priv.76>:
/**
 * @brief   Notification of filled buffer inserted into the output buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void obnotify(io_buffers_queue_t *bqp) {
 8001e80:	b510      	push	{r4, lr}
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8001e82:	6b44      	ldr	r4, [r0, #52]	; 0x34

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001e84:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001e88:	6813      	ldr	r3, [r2, #0]
 8001e8a:	7819      	ldrb	r1, [r3, #0]
 8001e8c:	2904      	cmp	r1, #4
/**
 * @brief   Notification of filled buffer inserted into the output buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void obnotify(io_buffers_queue_t *bqp) {
 8001e8e:	b082      	sub	sp, #8
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001e90:	d001      	beq.n	8001e96 <obnotify.lto_priv.76+0x16>
       callback is invoked when one has been inserted.*/
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
    osalDbgAssert(buf != NULL, "buffer not found");
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
  }
}
 8001e92:	b002      	add	sp, #8
 8001e94:	bd10      	pop	{r4, pc}
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001e96:	7a21      	ldrb	r1, [r4, #8]
 8001e98:	2902      	cmp	r1, #2
 8001e9a:	d1fa      	bne.n	8001e92 <obnotify.lto_priv.76+0x12>
      (sdup->state != SDU_READY)) {
    return;
  }

  /* Checking if there is already a transaction ongoing on the endpoint.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001e9c:	7911      	ldrb	r1, [r2, #4]
 8001e9e:	891a      	ldrh	r2, [r3, #8]
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	408b      	lsls	r3, r1
 8001ea4:	4213      	tst	r3, r2
 8001ea6:	d1f4      	bne.n	8001e92 <obnotify.lto_priv.76+0x12>
    /* Getting a full buffer, a buffer is available for sure because this
       callback is invoked when one has been inserted.*/
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001ea8:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8001eac:	a901      	add	r1, sp, #4
 8001eae:	f7ff ff6f 	bl	8001d90 <obqGetFullBufferI>
    osalDbgAssert(buf != NULL, "buffer not found");
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	b138      	cbz	r0, 8001ec6 <obnotify.lto_priv.76+0x46>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8001eb6:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
 8001eba:	9b01      	ldr	r3, [sp, #4]
 8001ebc:	6808      	ldr	r0, [r1, #0]
 8001ebe:	7909      	ldrb	r1, [r1, #4]
 8001ec0:	f7ff fb1e 	bl	8001500 <usbStartTransmitI>
 8001ec4:	e7e5      	b.n	8001e92 <obnotify.lto_priv.76+0x12>
  /* Checking if there is already a transaction ongoing on the endpoint.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
    /* Getting a full buffer, a buffer is available for sure because this
       callback is invoked when one has been inserted.*/
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
    osalDbgAssert(buf != NULL, "buffer not found");
 8001ec6:	4801      	ldr	r0, [pc, #4]	; (8001ecc <obnotify.lto_priv.76+0x4c>)
 8001ec8:	f005 fbe2 	bl	8007690 <chSysHalt>
 8001ecc:	0800c584 	.word	0x0800c584

08001ed0 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8001ed0:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8001ed2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ed6:	68da      	ldr	r2, [r3, #12]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8001ed8:	0792      	lsls	r2, r2, #30
 8001eda:	d501      	bpl.n	8001ee0 <stSetAlarm+0x10>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001edc:	6358      	str	r0, [r3, #52]	; 0x34
 8001ede:	bd08      	pop	{r3, pc}
 8001ee0:	4801      	ldr	r0, [pc, #4]	; (8001ee8 <stSetAlarm+0x18>)
 8001ee2:	f005 fbd5 	bl	8007690 <chSysHalt>
 8001ee6:	bf00      	nop
 8001ee8:	0800c738 	.word	0x0800c738
 8001eec:	00000000 	.word	0x00000000

08001ef0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001ef0:	b4f0      	push	{r4, r5, r6, r7}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8001ef2:	4e11      	ldr	r6, [pc, #68]	; (8001f38 <__init_ram_areas+0x48>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	f106 0780 	add.w	r7, r6, #128	; 0x80
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 8001efa:	e896 001a 	ldmia.w	r6, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001efe:	42a3      	cmp	r3, r4
 8001f00:	d20d      	bcs.n	8001f1e <__init_ram_areas+0x2e>
 8001f02:	3904      	subs	r1, #4
 8001f04:	461a      	mov	r2, r3
      *p = *tp;
 8001f06:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8001f0a:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001f0e:	42a2      	cmp	r2, r4
 8001f10:	d3f9      	bcc.n	8001f06 <__init_ram_areas+0x16>
 8001f12:	43da      	mvns	r2, r3
 8001f14:	4414      	add	r4, r2
 8001f16:	f024 0403 	bic.w	r4, r4, #3
 8001f1a:	3404      	adds	r4, #4
 8001f1c:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001f1e:	68f2      	ldr	r2, [r6, #12]
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d203      	bcs.n	8001f2c <__init_ram_areas+0x3c>
      *p = 0;
 8001f24:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d3fb      	bcc.n	8001f24 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 8001f2c:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8001f2e:	42be      	cmp	r6, r7
 8001f30:	d3e3      	bcc.n	8001efa <__init_ram_areas+0xa>
#endif
}
 8001f32:	bcf0      	pop	{r4, r5, r6, r7}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	0800c668 	.word	0x0800c668
 8001f3c:	00000000 	.word	0x00000000

08001f40 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001f40:	e7fe      	b.n	8001f40 <__default_exit>
 8001f42:	bf00      	nop
	...

08001f50 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
	...

08001f60 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
	...

08001f70 <obqWriteTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, sysinterval_t timeout) {
 8001f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f74:	b083      	sub	sp, #12
  size_t w = 0;

  osalDbgCheck(n > 0U);
 8001f76:	4616      	mov	r6, r2
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, sysinterval_t timeout) {
 8001f78:	9301      	str	r3, [sp, #4]
  size_t w = 0;

  osalDbgCheck(n > 0U);
 8001f7a:	2a00      	cmp	r2, #0
 8001f7c:	d072      	beq.n	8002064 <obqWriteTimeout+0xf4>
 8001f7e:	4682      	mov	sl, r0
 8001f80:	468b      	mov	fp, r1
 8001f82:	2720      	movs	r7, #32
 8001f84:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8001f88:	f005 fc6a 	bl	8007860 <_dbg_check_lock>
 8001f8c:	4d40      	ldr	r5, [pc, #256]	; (8002090 <obqWriteTimeout+0x120>)

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 8001f8e:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 8001f92:	9600      	str	r6, [sp, #0]
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, sysinterval_t timeout) {
  size_t w = 0;
 8001f94:	2400      	movs	r4, #0

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8001f96:	46a8      	mov	r8, r5
 8001f98:	46a1      	mov	r9, r4

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 8001f9a:	2800      	cmp	r0, #0
 8001f9c:	d057      	beq.n	800204e <obqWriteTimeout+0xde>
        return w;
      }
    }

    /* Size of the space available in the current buffer.*/
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8001f9e:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
    if (size > (n - w)) {
 8001fa2:	9b00      	ldr	r3, [sp, #0]
        return w;
      }
    }

    /* Size of the space available in the current buffer.*/
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8001fa4:	1a12      	subs	r2, r2, r0
    if (size > (n - w)) {
 8001fa6:	1b1e      	subs	r6, r3, r4
 8001fa8:	4296      	cmp	r6, r2
 8001faa:	bf28      	it	cs
 8001fac:	4616      	movcs	r6, r2
      size = n - w;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8001fae:	2e40      	cmp	r6, #64	; 0x40
 8001fb0:	d926      	bls.n	8002000 <obqWriteTimeout+0x90>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 8001fb2:	f10b 0240 	add.w	r2, fp, #64	; 0x40
 8001fb6:	f8db 6000 	ldr.w	r6, [fp]
 8001fba:	f8db 1004 	ldr.w	r1, [fp, #4]
 8001fbe:	f8db 3008 	ldr.w	r3, [fp, #8]
 8001fc2:	f8db e00c 	ldr.w	lr, [fp, #12]
 8001fc6:	f8c0 e00c 	str.w	lr, [r0, #12]
 8001fca:	f10b 0b10 	add.w	fp, fp, #16
 8001fce:	4593      	cmp	fp, r2
 8001fd0:	6006      	str	r6, [r0, #0]
 8001fd2:	6041      	str	r1, [r0, #4]
 8001fd4:	6083      	str	r3, [r0, #8]
 8001fd6:	f100 0010 	add.w	r0, r0, #16
 8001fda:	d1ec      	bne.n	8001fb6 <obqWriteTimeout+0x46>
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8001fdc:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
      obqp->ptr += size;
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 8001fe0:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
       this impacts throughput however.*/
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8001fe4:	3240      	adds	r2, #64	; 0x40
      obqp->ptr += size;
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 8001fe6:	4291      	cmp	r1, r2
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
 8001fe8:	f104 0440 	add.w	r4, r4, #64	; 0x40
       this impacts throughput however.*/
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8001fec:	f8ca 2028 	str.w	r2, [sl, #40]	; 0x28
      obqp->ptr += size;
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 8001ff0:	d815      	bhi.n	800201e <obqWriteTimeout+0xae>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8001ff2:	f8da 101c 	ldr.w	r1, [sl, #28]
 8001ff6:	4650      	mov	r0, sl
 8001ff8:	3904      	subs	r1, #4
 8001ffa:	f7ff f9e9 	bl	80013d0 <obqPostFullBufferS>
 8001ffe:	e00e      	b.n	800201e <obqWriteTimeout+0xae>
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
    }
    else {
      memcpy(obqp->ptr, bp, size);
 8002000:	4659      	mov	r1, fp
 8002002:	4632      	mov	r2, r6
 8002004:	f7fe f9a0 	bl	8000348 <memcpy>
      bp        += size;
      obqp->ptr += size;
 8002008:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 800200c:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
    }
    else {
      memcpy(obqp->ptr, bp, size);
      bp        += size;
      obqp->ptr += size;
 8002010:	4432      	add	r2, r6
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 8002012:	4291      	cmp	r1, r2
    }
    else {
      memcpy(obqp->ptr, bp, size);
      bp        += size;
      obqp->ptr += size;
      w         += size;
 8002014:	4434      	add	r4, r6
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
    }
    else {
      memcpy(obqp->ptr, bp, size);
      bp        += size;
 8002016:	44b3      	add	fp, r6
      obqp->ptr += size;
 8002018:	f8ca 2028 	str.w	r2, [sl, #40]	; 0x28
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 800201c:	d9e9      	bls.n	8001ff2 <obqWriteTimeout+0x82>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800201e:	f005 fc0f 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002022:	682a      	ldr	r2, [r5, #0]
 8002024:	42aa      	cmp	r2, r5
 8002026:	d005      	beq.n	8002034 <obqWriteTimeout+0xc4>
 8002028:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800202c:	6892      	ldr	r2, [r2, #8]
 800202e:	6889      	ldr	r1, [r1, #8]
 8002030:	4291      	cmp	r1, r2
 8002032:	d314      	bcc.n	800205e <obqWriteTimeout+0xee>
 8002034:	f389 8811 	msr	BASEPRI, r9
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (w >= n) {
 8002038:	9b00      	ldr	r3, [sp, #0]
 800203a:	429c      	cmp	r4, r3
 800203c:	d223      	bcs.n	8002086 <obqWriteTimeout+0x116>
 800203e:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002042:	f005 fc0d 	bl	8007860 <_dbg_check_lock>

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 8002046:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 800204a:	2800      	cmp	r0, #0
 800204c:	d1a7      	bne.n	8001f9e <obqWriteTimeout+0x2e>
      msg_t msg;

      /* Getting an empty buffer using the specified timeout.*/
      msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 800204e:	4650      	mov	r0, sl
 8002050:	9901      	ldr	r1, [sp, #4]
 8002052:	f7ff fa05 	bl	8001460 <obqGetEmptyBufferTimeoutS>

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 8002056:	b940      	cbnz	r0, 800206a <obqWriteTimeout+0xfa>
 8002058:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 800205c:	e79f      	b.n	8001f9e <obqWriteTimeout+0x2e>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800205e:	480d      	ldr	r0, [pc, #52]	; (8002094 <obqWriteTimeout+0x124>)
 8002060:	f005 fb16 	bl	8007690 <chSysHalt>
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, sysinterval_t timeout) {
  size_t w = 0;

  osalDbgCheck(n > 0U);
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <obqWriteTimeout+0x128>)
 8002066:	f005 fb13 	bl	8007690 <chSysHalt>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800206a:	f005 fbe9 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800206e:	682b      	ldr	r3, [r5, #0]
 8002070:	4a07      	ldr	r2, [pc, #28]	; (8002090 <obqWriteTimeout+0x120>)
 8002072:	42ab      	cmp	r3, r5
 8002074:	d004      	beq.n	8002080 <obqWriteTimeout+0x110>
 8002076:	6992      	ldr	r2, [r2, #24]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	6892      	ldr	r2, [r2, #8]
 800207c:	429a      	cmp	r2, r3
 800207e:	d3ee      	bcc.n	800205e <obqWriteTimeout+0xee>
 8002080:	2300      	movs	r3, #0
 8002082:	f383 8811 	msr	BASEPRI, r3
    if (w >= n) {
      return w;
    }
    osalSysLock();
  }
}
 8002086:	4620      	mov	r0, r4
 8002088:	b003      	add	sp, #12
 800208a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800208e:	bf00      	nop
 8002090:	2000b288 	.word	0x2000b288
 8002094:	0800c700 	.word	0x0800c700
 8002098:	0800c598 	.word	0x0800c598
 800209c:	00000000 	.word	0x00000000

080020a0 <_writet.lto_priv.87>:
}

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 80020a0:	3044      	adds	r0, #68	; 0x44
 80020a2:	f7ff bf65 	b.w	8001f70 <obqWriteTimeout>
 80020a6:	bf00      	nop
	...

080020b0 <_write.lto_priv.81>:
 * Interface implementation.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 80020b0:	3044      	adds	r0, #68	; 0x44
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020b6:	f7ff bf5b 	b.w	8001f70 <obqWriteTimeout>
 80020ba:	bf00      	nop
 80020bc:	0000      	movs	r0, r0
	...

080020c0 <obqPutTimeout>:
 *                      suspended state.
 *
 * @api
 */
msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
                    sysinterval_t timeout) {
 80020c0:	b570      	push	{r4, r5, r6, lr}
 80020c2:	2320      	movs	r3, #32
 80020c4:	b082      	sub	sp, #8
 80020c6:	4604      	mov	r4, r0
 80020c8:	460d      	mov	r5, r1
 80020ca:	4616      	mov	r6, r2
 80020cc:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 80020d0:	f005 fbc6 	bl	8007860 <_dbg_check_lock>
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
 80020d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020d6:	b1fb      	cbz	r3, 8002118 <obqPutTimeout+0x58>
      return msg;
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
 80020d8:	701d      	strb	r5, [r3, #0]
  obqp->ptr++;
 80020da:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 80020dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
  obqp->ptr++;
 80020de:	3301      	adds	r3, #1

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 80020e0:	4293      	cmp	r3, r2
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
  obqp->ptr++;
 80020e2:	62a3      	str	r3, [r4, #40]	; 0x28

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 80020e4:	d212      	bcs.n	800210c <obqPutTimeout+0x4c>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80020e6:	f005 fbab 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80020ea:	4b17      	ldr	r3, [pc, #92]	; (8002148 <obqPutTimeout+0x88>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d004      	beq.n	80020fc <obqPutTimeout+0x3c>
 80020f2:	6999      	ldr	r1, [r3, #24]
 80020f4:	6893      	ldr	r3, [r2, #8]
 80020f6:	688a      	ldr	r2, [r1, #8]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d304      	bcc.n	8002106 <obqPutTimeout+0x46>
 80020fc:	2000      	movs	r0, #0
 80020fe:	f380 8811 	msr	BASEPRI, r0
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
  }

  osalSysUnlock();
  return MSG_OK;
}
 8002102:	b002      	add	sp, #8
 8002104:	bd70      	pop	{r4, r5, r6, pc}
 8002106:	4811      	ldr	r0, [pc, #68]	; (800214c <obqPutTimeout+0x8c>)
 8002108:	f005 fac2 	bl	8007690 <chSysHalt>
  obqp->ptr++;

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800210c:	69e1      	ldr	r1, [r4, #28]
 800210e:	4620      	mov	r0, r4
 8002110:	3904      	subs	r1, #4
 8002112:	f7ff f95d 	bl	80013d0 <obqPostFullBufferS>
 8002116:	e7e6      	b.n	80020e6 <obqPutTimeout+0x26>

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8002118:	4631      	mov	r1, r6
 800211a:	4620      	mov	r0, r4
 800211c:	f7ff f9a0 	bl	8001460 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 8002120:	b908      	cbnz	r0, 8002126 <obqPutTimeout+0x66>
 8002122:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002124:	e7d8      	b.n	80020d8 <obqPutTimeout+0x18>
 8002126:	9001      	str	r0, [sp, #4]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002128:	f005 fb8a 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <obqPutTimeout+0x88>)
 800212e:	9801      	ldr	r0, [sp, #4]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d004      	beq.n	8002140 <obqPutTimeout+0x80>
 8002136:	6999      	ldr	r1, [r3, #24]
 8002138:	6893      	ldr	r3, [r2, #8]
 800213a:	688a      	ldr	r2, [r1, #8]
 800213c:	429a      	cmp	r2, r3
 800213e:	d3e2      	bcc.n	8002106 <obqPutTimeout+0x46>
 8002140:	2300      	movs	r3, #0
 8002142:	f383 8811 	msr	BASEPRI, r3
 8002146:	e7dc      	b.n	8002102 <obqPutTimeout+0x42>
 8002148:	2000b288 	.word	0x2000b288
 800214c:	0800c700 	.word	0x0800c700

08002150 <_putt.lto_priv.85>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
}

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {

  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 8002150:	3044      	adds	r0, #68	; 0x44
 8002152:	f7ff bfb5 	b.w	80020c0 <obqPutTimeout>
 8002156:	bf00      	nop
	...

08002160 <_put.lto_priv.83>:
                        n, TIME_INFINITE);
}

static msg_t _put(void *ip, uint8_t b) {

  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8002160:	3044      	adds	r0, #68	; 0x44
 8002162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002166:	f7ff bfab 	b.w	80020c0 <obqPutTimeout>
 800216a:	bf00      	nop
 800216c:	0000      	movs	r0, r0
	...

08002170 <ibqReadTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8002170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002174:	b083      	sub	sp, #12
  size_t r = 0;

  osalDbgCheck(n > 0U);
 8002176:	4690      	mov	r8, r2
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8002178:	9301      	str	r3, [sp, #4]
  size_t r = 0;

  osalDbgCheck(n > 0U);
 800217a:	2a00      	cmp	r2, #0
 800217c:	d06b      	beq.n	8002256 <ibqReadTimeout+0xe6>
 800217e:	4604      	mov	r4, r0
 8002180:	460e      	mov	r6, r1
 8002182:	f04f 0920 	mov.w	r9, #32
 8002186:	f389 8811 	msr	BASEPRI, r9
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800218a:	f005 fb69 	bl	8007860 <_dbg_check_lock>
 800218e:	4f3c      	ldr	r7, [pc, #240]	; (8002280 <ibqReadTimeout+0x110>)

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 8002190:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002192:	f8cd 9000 	str.w	r9, [sp]
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
  size_t r = 0;
 8002196:	2500      	movs	r5, #0

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002198:	46b9      	mov	r9, r7
 800219a:	46aa      	mov	sl, r5

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 800219c:	2900      	cmp	r1, #0
 800219e:	d050      	beq.n	8002242 <ibqReadTimeout+0xd2>
        return r;
      }
    }

    /* Size of the data chunk present in the current buffer.*/
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 80021a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (size > (n - r)) {
 80021a2:	ebc5 0b08 	rsb	fp, r5, r8
        return r;
      }
    }

    /* Size of the data chunk present in the current buffer.*/
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 80021a6:	1a5b      	subs	r3, r3, r1
 80021a8:	459b      	cmp	fp, r3
 80021aa:	bf28      	it	cs
 80021ac:	469b      	movcs	fp, r3
      size = n - r;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 80021ae:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 80021b2:	d923      	bls.n	80021fc <ibqReadTimeout+0x8c>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 80021b4:	f101 0240 	add.w	r2, r1, #64	; 0x40
 80021b8:	4633      	mov	r3, r6
 80021ba:	f8d1 c000 	ldr.w	ip, [r1]
 80021be:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80021c2:	6888      	ldr	r0, [r1, #8]
 80021c4:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 80021c8:	f8c3 b00c 	str.w	fp, [r3, #12]
 80021cc:	3110      	adds	r1, #16
 80021ce:	4291      	cmp	r1, r2
 80021d0:	f8c3 c000 	str.w	ip, [r3]
 80021d4:	f8c3 e004 	str.w	lr, [r3, #4]
 80021d8:	6098      	str	r0, [r3, #8]
 80021da:	f103 0310 	add.w	r3, r3, #16
 80021de:	d1ec      	bne.n	80021ba <ibqReadTimeout+0x4a>
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80021e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      ibqp->ptr += size;
      r         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 80021e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
       this impacts throughput however.*/
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80021e4:	3340      	adds	r3, #64	; 0x40
      ibqp->ptr += size;
      r         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 80021e6:	429a      	cmp	r2, r3
    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 80021e8:	f106 0640 	add.w	r6, r6, #64	; 0x40
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
 80021ec:	f105 0540 	add.w	r5, r5, #64	; 0x40
       this impacts throughput however.*/
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80021f0:	62a3      	str	r3, [r4, #40]	; 0x28
      ibqp->ptr += size;
      r         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 80021f2:	d80f      	bhi.n	8002214 <ibqReadTimeout+0xa4>
      ibqReleaseEmptyBufferS(ibqp);
 80021f4:	4620      	mov	r0, r4
 80021f6:	f7ff f913 	bl	8001420 <ibqReleaseEmptyBufferS>
 80021fa:	e00b      	b.n	8002214 <ibqReadTimeout+0xa4>
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
    }
    else {
      memcpy(bp, ibqp->ptr, size);
 80021fc:	4630      	mov	r0, r6
 80021fe:	465a      	mov	r2, fp
 8002200:	f7fe f8a2 	bl	8000348 <memcpy>
      bp        += size;
      ibqp->ptr += size;
 8002204:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      r         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 8002206:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
    }
    else {
      memcpy(bp, ibqp->ptr, size);
      bp        += size;
      ibqp->ptr += size;
 8002208:	445b      	add	r3, fp
      r         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 800220a:	429a      	cmp	r2, r3
    }
    else {
      memcpy(bp, ibqp->ptr, size);
      bp        += size;
      ibqp->ptr += size;
      r         += size;
 800220c:	445d      	add	r5, fp
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
    }
    else {
      memcpy(bp, ibqp->ptr, size);
      bp        += size;
 800220e:	445e      	add	r6, fp
      ibqp->ptr += size;
 8002210:	62a3      	str	r3, [r4, #40]	; 0x28
      r         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 8002212:	d9ef      	bls.n	80021f4 <ibqReadTimeout+0x84>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002214:	f005 fb14 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	42bb      	cmp	r3, r7
 800221c:	d005      	beq.n	800222a <ibqReadTimeout+0xba>
 800221e:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	6892      	ldr	r2, [r2, #8]
 8002226:	429a      	cmp	r2, r3
 8002228:	d312      	bcc.n	8002250 <ibqReadTimeout+0xe0>
 800222a:	f38a 8811 	msr	BASEPRI, sl
      ibqReleaseEmptyBufferS(ibqp);
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (r >= n) {
 800222e:	4545      	cmp	r5, r8
 8002230:	d222      	bcs.n	8002278 <ibqReadTimeout+0x108>
 8002232:	9b00      	ldr	r3, [sp, #0]
 8002234:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002238:	f005 fb12 	bl	8007860 <_dbg_check_lock>

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 800223c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800223e:	2900      	cmp	r1, #0
 8002240:	d1ae      	bne.n	80021a0 <ibqReadTimeout+0x30>
      msg_t msg;

      /* Getting a data buffer using the specified timeout.*/
      msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8002242:	4620      	mov	r0, r4
 8002244:	9901      	ldr	r1, [sp, #4]
 8002246:	f7ff f933 	bl	80014b0 <ibqGetFullBufferTimeoutS>

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 800224a:	b938      	cbnz	r0, 800225c <ibqReadTimeout+0xec>
 800224c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800224e:	e7a7      	b.n	80021a0 <ibqReadTimeout+0x30>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002250:	480c      	ldr	r0, [pc, #48]	; (8002284 <ibqReadTimeout+0x114>)
 8002252:	f005 fa1d 	bl	8007690 <chSysHalt>
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
  size_t r = 0;

  osalDbgCheck(n > 0U);
 8002256:	480c      	ldr	r0, [pc, #48]	; (8002288 <ibqReadTimeout+0x118>)
 8002258:	f005 fa1a 	bl	8007690 <chSysHalt>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800225c:	f005 faf0 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	4a07      	ldr	r2, [pc, #28]	; (8002280 <ibqReadTimeout+0x110>)
 8002264:	42bb      	cmp	r3, r7
 8002266:	d004      	beq.n	8002272 <ibqReadTimeout+0x102>
 8002268:	6992      	ldr	r2, [r2, #24]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	6892      	ldr	r2, [r2, #8]
 800226e:	429a      	cmp	r2, r3
 8002270:	d3ee      	bcc.n	8002250 <ibqReadTimeout+0xe0>
 8002272:	2300      	movs	r3, #0
 8002274:	f383 8811 	msr	BASEPRI, r3
    if (r >= n) {
      return r;
    }
    osalSysLock();
  }
}
 8002278:	4628      	mov	r0, r5
 800227a:	b003      	add	sp, #12
 800227c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002280:	2000b288 	.word	0x2000b288
 8002284:	0800c700 	.word	0x0800c700
 8002288:	0800c5c0 	.word	0x0800c5c0
 800228c:	00000000 	.word	0x00000000

08002290 <_readt.lto_priv.88>:
}

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 8002290:	300c      	adds	r0, #12
 8002292:	f7ff bf6d 	b.w	8002170 <ibqReadTimeout>
 8002296:	bf00      	nop
	...

080022a0 <_read.lto_priv.82>:
                         n, TIME_INFINITE);
}

static size_t _read(void *ip, uint8_t *bp, size_t n) {

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 80022a0:	300c      	adds	r0, #12
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022a6:	f7ff bf63 	b.w	8002170 <ibqReadTimeout>
 80022aa:	bf00      	nop
 80022ac:	0000      	movs	r0, r0
	...

080022b0 <ibqGetTimeout>:
 * @retval MSG_RESET    if the queue has been reset or has been put in
 *                      suspended state.
 *
 * @api
 */
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 80022b0:	b530      	push	{r4, r5, lr}
 80022b2:	2320      	movs	r3, #32
 80022b4:	b083      	sub	sp, #12
 80022b6:	4604      	mov	r4, r0
 80022b8:	460d      	mov	r5, r1
 80022ba:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 80022be:	f005 facf 	bl	8007860 <_dbg_check_lock>
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (ibqp->ptr == NULL) {
 80022c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022c4:	b1eb      	cbz	r3, 8002302 <ibqGetTimeout+0x52>
      return msg;
    }
  }

  /* Next byte from the buffer.*/
  msg = (msg_t)*ibqp->ptr;
 80022c6:	f813 5b01 	ldrb.w	r5, [r3], #1
  ibqp->ptr++;

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
 80022ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    }
  }

  /* Next byte from the buffer.*/
  msg = (msg_t)*ibqp->ptr;
  ibqp->ptr++;
 80022cc:	62a3      	str	r3, [r4, #40]	; 0x28

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d213      	bcs.n	80022fa <ibqGetTimeout+0x4a>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80022d2:	f005 fab5 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80022d6:	4b17      	ldr	r3, [pc, #92]	; (8002334 <ibqGetTimeout+0x84>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d004      	beq.n	80022e8 <ibqGetTimeout+0x38>
 80022de:	6999      	ldr	r1, [r3, #24]
 80022e0:	6893      	ldr	r3, [r2, #8]
 80022e2:	688a      	ldr	r2, [r1, #8]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d305      	bcc.n	80022f4 <ibqGetTimeout+0x44>
 80022e8:	2300      	movs	r3, #0
 80022ea:	f383 8811 	msr	BASEPRI, r3
    ibqReleaseEmptyBufferS(ibqp);
  }

  osalSysUnlock();
  return msg;
 80022ee:	4628      	mov	r0, r5
}
 80022f0:	b003      	add	sp, #12
 80022f2:	bd30      	pop	{r4, r5, pc}
 80022f4:	4810      	ldr	r0, [pc, #64]	; (8002338 <ibqGetTimeout+0x88>)
 80022f6:	f005 f9cb 	bl	8007690 <chSysHalt>
  ibqp->ptr++;

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
    ibqReleaseEmptyBufferS(ibqp);
 80022fa:	4620      	mov	r0, r4
 80022fc:	f7ff f890 	bl	8001420 <ibqReleaseEmptyBufferS>
 8002300:	e7e7      	b.n	80022d2 <ibqGetTimeout+0x22>

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (ibqp->ptr == NULL) {
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8002302:	4629      	mov	r1, r5
 8002304:	4620      	mov	r0, r4
 8002306:	f7ff f8d3 	bl	80014b0 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 800230a:	b908      	cbnz	r0, 8002310 <ibqGetTimeout+0x60>
 800230c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800230e:	e7da      	b.n	80022c6 <ibqGetTimeout+0x16>
 8002310:	9001      	str	r0, [sp, #4]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002312:	f005 fa95 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <ibqGetTimeout+0x84>)
 8002318:	9801      	ldr	r0, [sp, #4]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d004      	beq.n	800232a <ibqGetTimeout+0x7a>
 8002320:	6999      	ldr	r1, [r3, #24]
 8002322:	6893      	ldr	r3, [r2, #8]
 8002324:	688a      	ldr	r2, [r1, #8]
 8002326:	429a      	cmp	r2, r3
 8002328:	d3e4      	bcc.n	80022f4 <ibqGetTimeout+0x44>
 800232a:	2300      	movs	r3, #0
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	e7de      	b.n	80022f0 <ibqGetTimeout+0x40>
 8002332:	bf00      	nop
 8002334:	2000b288 	.word	0x2000b288
 8002338:	0800c700 	.word	0x0800c700
 800233c:	00000000 	.word	0x00000000

08002340 <_gett.lto_priv.86>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
}

static msg_t _gett(void *ip, sysinterval_t timeout) {

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 8002340:	300c      	adds	r0, #12
 8002342:	f7ff bfb5 	b.w	80022b0 <ibqGetTimeout>
 8002346:	bf00      	nop
	...

08002350 <_get.lto_priv.84>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
}

static msg_t _get(void *ip) {

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 8002350:	300c      	adds	r0, #12
 8002352:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002356:	f7ff bfab 	b.w	80022b0 <ibqGetTimeout>
 800235a:	bf00      	nop
 800235c:	0000      	movs	r0, r0
	...

08002360 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8002360:	4bbe      	ldr	r3, [pc, #760]	; (800265c <main+0x2fc>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002362:	48bf      	ldr	r0, [pc, #764]	; (8002660 <main+0x300>)

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 800236a:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
  vsnprintf(buf, 2048, str, args);

  chprintf((BaseSequentialStream *)&SDU1,"%s", buf);
}

int main(void) {
 800236e:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002372:	611a      	str	r2, [r3, #16]
 8002374:	691a      	ldr	r2, [r3, #16]
 8002376:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800237a:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 800237c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8002380:	691a      	ldr	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8002382:	695a      	ldr	r2, [r3, #20]
 8002384:	615c      	str	r4, [r3, #20]
 8002386:	2100      	movs	r1, #0
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	6159      	str	r1, [r3, #20]
 800238c:	695a      	ldr	r2, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800238e:	6a1a      	ldr	r2, [r3, #32]
 8002390:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 8002394:	621a      	str	r2, [r3, #32]
 8002396:	6a1a      	ldr	r2, [r3, #32]
 8002398:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800239c:	621a      	str	r2, [r3, #32]
 800239e:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 80023a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a2:	625c      	str	r4, [r3, #36]	; 0x24
 80023a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a6:	6259      	str	r1, [r3, #36]	; 0x24
 80023a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 80023aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40
 80023b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023b8:	661a      	str	r2, [r3, #96]	; 0x60
 80023ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80023bc:	6802      	ldr	r2, [r0, #0]
 80023be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023c2:	6002      	str	r2, [r0, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80023c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023c6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80023ca:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80023ce:	b087      	sub	sp, #28
 80023d0:	d003      	beq.n	80023da <main+0x7a>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 80023d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023d6:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80023d8:	6719      	str	r1, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 80023da:	4da1      	ldr	r5, [pc, #644]	; (8002660 <main+0x300>)
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma.allocated_mask = 0U;
 80023dc:	49a1      	ldr	r1, [pc, #644]	; (8002664 <main+0x304>)
 80023de:	686a      	ldr	r2, [r5, #4]
 80023e0:	4ca1      	ldr	r4, [pc, #644]	; (8002668 <main+0x308>)
 80023e2:	2000      	movs	r0, #0
 80023e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023e8:	606a      	str	r2, [r5, #4]
 80023ea:	4603      	mov	r3, r0
 80023ec:	460a      	mov	r2, r1
 80023ee:	6008      	str	r0, [r1, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 80023f0:	4601      	mov	r1, r0
 80023f2:	58e0      	ldr	r0, [r4, r3]
 80023f4:	330c      	adds	r3, #12
 */
void dmaInit(void) {
  unsigned i;

  dma.allocated_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80023f6:	2bc0      	cmp	r3, #192	; 0xc0
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 80023f8:	6001      	str	r1, [r0, #0]
 80023fa:	f102 0208 	add.w	r2, r2, #8
    dma.streams[i].func = NULL;
 80023fe:	f842 1c04 	str.w	r1, [r2, #-4]
 */
void dmaInit(void) {
  unsigned i;

  dma.allocated_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002402:	d1f6      	bne.n	80023f2 <main+0x92>

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002404:	4999      	ldr	r1, [pc, #612]	; (800266c <main+0x30c>)
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
    dma.streams[i].func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8002406:	4a9a      	ldr	r2, [pc, #616]	; (8002670 <main+0x310>)
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8002408:	f8df a290 	ldr.w	sl, [pc, #656]	; 800269c <main+0x33c>
 800240c:	4b99      	ldr	r3, [pc, #612]	; (8002674 <main+0x314>)
 800240e:	2460      	movs	r4, #96	; 0x60
  dma.allocated_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
    dma.streams[i].func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8002410:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002414:	f44f 7580 	mov.w	r5, #256	; 0x100
 8002418:	f04f 0880 	mov.w	r8, #128	; 0x80
 800241c:	f04f 0940 	mov.w	r9, #64	; 0x40
 8002420:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8002424:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 8002428:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
 800242c:	6096      	str	r6, [r2, #8]
 800242e:	eb03 0008 	add.w	r0, r3, r8
  DMA1->HIFCR = 0xFFFFFFFFU;
 8002432:	60d6      	str	r6, [r2, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8002434:	f8ca 6008 	str.w	r6, [sl, #8]

#if PAL_USE_CALLBACKS || PAL_USE_WAIT || defined(__DOXYGEN__)
  unsigned i;

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
 8002438:	2200      	movs	r2, #0
  DMA2->HIFCR = 0xFFFFFFFFU;
 800243a:	f8ca 600c 	str.w	r6, [sl, #12]

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800243e:	f881 4306 	strb.w	r4, [r1, #774]	; 0x306
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002442:	f8c1 9180 	str.w	r9, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002446:	f8c1 9000 	str.w	r9, [r1]

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800244a:	f881 4307 	strb.w	r4, [r1, #775]	; 0x307
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800244e:	f8c1 8180 	str.w	r8, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002452:	f8c1 8000 	str.w	r8, [r1]

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002456:	f881 4308 	strb.w	r4, [r1, #776]	; 0x308
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800245a:	f8c1 5180 	str.w	r5, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800245e:	600d      	str	r5, [r1, #0]

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002460:	f881 4309 	strb.w	r4, [r1, #777]	; 0x309
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002464:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002468:	f8c1 c000 	str.w	ip, [r1]

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800246c:	f881 430a 	strb.w	r4, [r1, #778]	; 0x30a
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002470:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002474:	f8c1 e000 	str.w	lr, [r1]

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002478:	f881 4317 	strb.w	r4, [r1, #791]	; 0x317
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800247c:	f8c1 7180 	str.w	r7, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002480:	600f      	str	r7, [r1, #0]

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002482:	f881 4328 	strb.w	r4, [r1, #808]	; 0x328
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002486:	f8c1 5184 	str.w	r5, [r1, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800248a:	604d      	str	r5, [r1, #4]
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	3308      	adds	r3, #8
void _pal_lld_init(void) {

#if PAL_USE_CALLBACKS || PAL_USE_WAIT || defined(__DOXYGEN__)
  unsigned i;

  for (i = 0; i < 16; i++) {
 8002492:	4283      	cmp	r3, r0
    _pal_init_event(i);
 8002494:	f04f 0100 	mov.w	r1, #0
void _pal_lld_init(void) {

#if PAL_USE_CALLBACKS || PAL_USE_WAIT || defined(__DOXYGEN__)
  unsigned i;

  for (i = 0; i < 16; i++) {
 8002498:	d1f8      	bne.n	800248c <main+0x12c>
 *
 * @init
 */
void dacObjectInit(DACDriver *dacp) {

  dacp->state = DAC_STOP;
 800249a:	f8df 8204 	ldr.w	r8, [pc, #516]	; 80026a0 <main+0x340>
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 800249e:	4d76      	ldr	r5, [pc, #472]	; (8002678 <main+0x318>)
 */
void dac_lld_init(void) {

#if STM32_DAC_USE_DAC1_CH1
  dacObjectInit(&DACD1);
  DACD1.params  = &dac1_ch1_params;
 80024a0:	4876      	ldr	r0, [pc, #472]	; (800267c <main+0x31c>)
  dacp->config = NULL;
 80024a2:	f8c8 1010 	str.w	r1, [r8, #16]
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
 80024a6:	f108 0218 	add.w	r2, r8, #24
 *
 * @init
 */
void dacObjectInit(DACDriver *dacp) {

  dacp->state = DAC_STOP;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f8c8 2018 	str.w	r2, [r8, #24]
  qp->prev = qp;
 80024b0:	f8c8 201c 	str.w	r2, [r8, #28]
 80024b4:	f888 3000 	strb.w	r3, [r8]
 80024b8:	702b      	strb	r3, [r5, #0]
  dacp->config = NULL;
#if DAC_USE_WAIT
  dacp->thread = NULL;
 80024ba:	f8c8 1014 	str.w	r1, [r8, #20]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
 80024be:	f8c8 1020 	str.w	r1, [r8, #32]
  DACD1.dma = NULL;
 80024c2:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
 */
void dac_lld_init(void) {

#if STM32_DAC_USE_DAC1_CH1
  dacObjectInit(&DACD1);
  DACD1.params  = &dac1_ch1_params;
 80024c6:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
  usbp->config       = NULL;
 80024ca:	6069      	str	r1, [r5, #4]
 80024cc:	f105 0320 	add.w	r3, r5, #32
 80024d0:	f105 0234 	add.w	r2, r5, #52	; 0x34
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80024d4:	f843 1f04 	str.w	r1, [r3, #4]!
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 80024d8:	4293      	cmp	r3, r2
    usbp->in_params[i]  = NULL;
 80024da:	f04f 0000 	mov.w	r0, #0
    usbp->out_params[i] = NULL;
 80024de:	6159      	str	r1, [r3, #20]
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 80024e0:	d1f8      	bne.n	80024d4 <main+0x174>
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 80024e2:	4a67      	ldr	r2, [pc, #412]	; (8002680 <main+0x320>)

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;
 80024e4:	4b67      	ldr	r3, [pc, #412]	; (8002684 <main+0x324>)
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
  }
  usbp->transmitting = 0;
 80024e6:	8128      	strh	r0, [r5, #8]
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 80024e8:	2101      	movs	r1, #1
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.otg       = OTG_FS;
 80024ea:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
 80024ee:	7011      	strb	r1, [r2, #0]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
  }
  usbp->transmitting = 0;
  usbp->receiving    = 0;
 80024f0:	8168      	strh	r0, [r5, #10]
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
 80024f2:	6050      	str	r0, [r2, #4]
 80024f4:	f102 0120 	add.w	r1, r2, #32
 80024f8:	f102 0434 	add.w	r4, r2, #52	; 0x34
 80024fc:	66ee      	str	r6, [r5, #108]	; 0x6c
  USBD1.otgparams = &fsparams;
 80024fe:	672b      	str	r3, [r5, #112]	; 0x70
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8002500:	f841 0f04 	str.w	r0, [r1, #4]!
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002504:	42a1      	cmp	r1, r4
    usbp->in_params[i]  = NULL;
 8002506:	f04f 0300 	mov.w	r3, #0
    usbp->out_params[i] = NULL;
 800250a:	6148      	str	r0, [r1, #20]
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 800250c:	d1f8      	bne.n	8002500 <main+0x1a0>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800250e:	4953      	ldr	r1, [pc, #332]	; (800265c <main+0x2fc>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002510:	4f5d      	ldr	r7, [pc, #372]	; (8002688 <main+0x328>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8002512:	6c0e      	ldr	r6, [r1, #64]	; 0x40
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
  }
  usbp->transmitting = 0;
 8002514:	8113      	strh	r3, [r2, #8]
 8002516:	f046 0601 	orr.w	r6, r6, #1
 800251a:	640e      	str	r6, [r1, #64]	; 0x40
 800251c:	6e0e      	ldr	r6, [r1, #96]	; 0x60
  usbp->receiving    = 0;
 800251e:	8153      	strh	r3, [r2, #10]
 8002520:	f046 0601 	orr.w	r6, r6, #1
 8002524:	660e      	str	r6, [r1, #96]	; 0x60
 8002526:	6e09      	ldr	r1, [r1, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002528:	68be      	ldr	r6, [r7, #8]
 *
 * @notapi
 */
static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {

  pqp->next = pqp;
 800252a:	4c58      	ldr	r4, [pc, #352]	; (800268c <main+0x32c>)

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800252c:	484f      	ldr	r0, [pc, #316]	; (800266c <main+0x30c>)
  pqp->prev = pqp;
 800252e:	6064      	str	r4, [r4, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002530:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002534:	f046 0e01 	orr.w	lr, r6, #1

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8002538:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800253c:	f242 06cf 	movw	r6, #8399	; 0x20cf
 * @note    Internal use only.
 */
void _trace_init(void) {
  unsigned i;

  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 8002540:	f64f 7bf0 	movw	fp, #65520	; 0xfff0

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002544:	f8c7 e008 	str.w	lr, [r7, #8]

#endif

#if STM32_USB_USE_OTG2
  usbObjectInit(&USBD2);
  USBD2.otg       = OTG_HS;
 8002548:	f8df a158 	ldr.w	sl, [pc, #344]	; 80026a4 <main+0x344>

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800254c:	628e      	str	r6, [r1, #40]	; 0x28
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800254e:	f04f 0e01 	mov.w	lr, #1
  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8002552:	f8c1 c02c 	str.w	ip, [r1, #44]	; 0x2c
 8002556:	2780      	movs	r7, #128	; 0x80
 */
void _vt_init(void) {

  ch.vtlist.dlist.next = &ch.vtlist.dlist;
  ch.vtlist.dlist.prev = &ch.vtlist.dlist;
  ch.vtlist.dlist.delta = (sysinterval_t)-1;
 8002558:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800255c:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
  STM32_ST_TIM->CCMR1  = 0;
 8002560:	618b      	str	r3, [r1, #24]
  USBD2.otgparams = &hsparams;
 8002562:	f8df 9144 	ldr.w	r9, [pc, #324]	; 80026a8 <main+0x348>
  pqp->prio = (tprio_t)0;
 8002566:	60a3      	str	r3, [r4, #8]
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 8002568:	f104 0c40 	add.w	ip, r4, #64	; 0x40
  STM32_ST_TIM->CCR[0] = 0;
 800256c:	634b      	str	r3, [r1, #52]	; 0x34
 */
void _scheduler_init(void) {

  ch_pqueue_init(&ch.rlist.pqueue);
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
 800256e:	6124      	str	r4, [r4, #16]
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 8002570:	60cb      	str	r3, [r1, #12]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8002572:	6164      	str	r4, [r4, #20]
  STM32_ST_TIM->CR2    = 0;
 8002574:	604b      	str	r3, [r1, #4]
 * @note    Internal use only.
 */
void _trace_init(void) {
  unsigned i;

  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 8002576:	f8a4 b038 	strh.w	fp, [r4, #56]	; 0x38
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.dlist.next = &ch.vtlist.dlist;
 800257a:	f104 0b1c 	add.w	fp, r4, #28
  ch.vtlist.dlist.prev = &ch.vtlist.dlist;
  ch.vtlist.dlist.delta = (sysinterval_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 800257e:	62a3      	str	r3, [r4, #40]	; 0x28
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8002580:	f8c1 e014 	str.w	lr, [r1, #20]
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
 8002584:	8767      	strh	r7, [r4, #58]	; 0x3a
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8002586:	f8c1 e000 	str.w	lr, [r1]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.dlist.next = &ch.vtlist.dlist;
 800258a:	f8c4 b01c 	str.w	fp, [r4, #28]

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800258e:	f880 731c 	strb.w	r7, [r0, #796]	; 0x31c
  ch.vtlist.dlist.prev = &ch.vtlist.dlist;
 8002592:	f8c4 b020 	str.w	fp, [r4, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002596:	f8c0 6180 	str.w	r6, [r0, #384]	; 0x180

#endif

#if STM32_USB_USE_OTG2
  usbObjectInit(&USBD2);
  USBD2.otg       = OTG_HS;
 800259a:	f8c2 a06c 	str.w	sl, [r2, #108]	; 0x6c
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800259e:	6006      	str	r6, [r0, #0]
  USBD2.otgparams = &hsparams;
 80025a0:	f8c2 9070 	str.w	r9, [r2, #112]	; 0x70
 *
 * @notapi
 */
static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {

  pqp->next = pqp;
 80025a4:	6024      	str	r4, [r4, #0]
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 80025a6:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 80025aa:	3301      	adds	r3, #1
 80025ac:	eb04 1203 	add.w	r2, r4, r3, lsl #4
  unsigned i;

  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 80025b0:	2b80      	cmp	r3, #128	; 0x80
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 80025b2:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 80025b6:	4835      	ldr	r0, [pc, #212]	; (800268c <main+0x32c>)
 80025b8:	f36f 0102 	bfc	r1, #0, #3
 80025bc:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
  unsigned i;

  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 80025c0:	d1f3      	bne.n	80025aa <main+0x24a>
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
 80025c2:	4b33      	ldr	r3, [pc, #204]	; (8002690 <main+0x330>)
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 80025c4:	4933      	ldr	r1, [pc, #204]	; (8002694 <main+0x334>)
 80025c6:	4a34      	ldr	r2, [pc, #208]	; (8002698 <main+0x338>)
 80025c8:	600a      	str	r2, [r1, #0]

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80025ca:	2600      	movs	r6, #0
 80025cc:	2700      	movs	r7, #0
 80025ce:	f101 0b0c 	add.w	fp, r1, #12
 80025d2:	e9cd 6704 	strd	r6, r7, [sp, #16]
  } while ((c != (char)0) && (i > 0U));
}

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 80025d6:	f103 0210 	add.w	r2, r3, #16
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 80025da:	2614      	movs	r6, #20
 80025dc:	f103 0724 	add.w	r7, r3, #36	; 0x24
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.basemem = __heap_base__;
 80025e0:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 80026ac <main+0x34c>
 80025e4:	f8c1 b00c 	str.w	fp, [r1, #12]
  qp->prev = qp;
 80025e8:	f8c1 b010 	str.w	fp, [r1, #16]
 80025ec:	611a      	str	r2, [r3, #16]
 80025ee:	f103 0b28 	add.w	fp, r3, #40	; 0x28
 80025f2:	221c      	movs	r2, #28
 80025f4:	619e      	str	r6, [r3, #24]
 80025f6:	625f      	str	r7, [r3, #36]	; 0x24
 80025f8:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 80025fc:	f103 0740 	add.w	r7, r3, #64	; 0x40
  mp->align = align;
  mp->provider = provider;
 8002600:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 80026b0 <main+0x350>
 8002604:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80026b4 <main+0x354>
  ch_memcore.topmem  = __heap_end__;
 8002608:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80026b8 <main+0x358>
 800260c:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
 8002612:	f103 0b44 	add.w	fp, r3, #68	; 0x44
  H_NEXT(&default_heap.header) = NULL;
 8002616:	2200      	movs	r2, #0
 8002618:	63de      	str	r6, [r3, #60]	; 0x3c
 800261a:	641f      	str	r7, [r3, #64]	; 0x40
  mp->align = align;
 800261c:	2604      	movs	r6, #4
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800261e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
 8002622:	601b      	str	r3, [r3, #0]
  qp->prev = qp;
 8002624:	605b      	str	r3, [r3, #4]
 8002626:	f8c3 b044 	str.w	fp, [r3, #68]	; 0x44
 800262a:	604a      	str	r2, [r1, #4]
  H_PAGES(&default_heap.header) = 0;
 800262c:	608a      	str	r2, [r1, #8]
 800262e:	614a      	str	r2, [r1, #20]
 8002630:	609a      	str	r2, [r3, #8]
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 8002632:	615a      	str	r2, [r3, #20]
 8002634:	62da      	str	r2, [r3, #44]	; 0x2c
  _vt_init();
  _trace_init();
  _oslib_init();

#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  ch.dbg.isr_cnt  = (cnt_t)0;
 8002636:	6302      	str	r2, [r0, #48]	; 0x30
  ch.dbg.lock_cnt = (cnt_t)0;
 8002638:	6342      	str	r2, [r0, #52]	; 0x34
  unsigned i;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 800263a:	f8c0 2884 	str.w	r2, [r0, #2180]	; 0x884
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 800263e:	9201      	str	r2, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 8002640:	9202      	str	r2, [sp, #8]
  tmp->n          = (ucnt_t)0;
 8002642:	9203      	str	r2, [sp, #12]
  mp->object_size = size;
  mp->align = align;
 8002644:	61de      	str	r6, [r3, #28]
 8002646:	635e      	str	r6, [r3, #52]	; 0x34
  mp->provider = provider;
 8002648:	f8c3 c020 	str.w	ip, [r3, #32]
 800264c:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.basemem = __heap_base__;
 8002650:	f8ce a000 	str.w	sl, [lr]
  ch_memcore.topmem  = __heap_end__;
 8002654:	f8ce 9004 	str.w	r9, [lr, #4]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8002658:	9700      	str	r7, [sp, #0]
 800265a:	e02f      	b.n	80026bc <main+0x35c>
 800265c:	40023800 	.word	0x40023800
 8002660:	40007000 	.word	0x40007000
 8002664:	2000a0d4 	.word	0x2000a0d4
 8002668:	0800c81c 	.word	0x0800c81c
 800266c:	e000e100 	.word	0xe000e100
 8002670:	40026000 	.word	0x40026000
 8002674:	20009cf0 	.word	0x20009cf0
 8002678:	20009fc4 	.word	0x20009fc4
 800267c:	0800c8dc 	.word	0x0800c8dc
 8002680:	2000a03c 	.word	0x2000a03c
 8002684:	0800c7d0 	.word	0x0800c7d0
 8002688:	e0042000 	.word	0xe0042000
 800268c:	2000b288 	.word	0x2000b288
 8002690:	20009f18 	.word	0x20009f18
 8002694:	2000a15c 	.word	0x2000a15c
 8002698:	080070b1 	.word	0x080070b1
 800269c:	40026400 	.word	0x40026400
 80026a0:	2000a580 	.word	0x2000a580
 80026a4:	40040000 	.word	0x40040000
 80026a8:	0800ca34 	.word	0x0800ca34
 80026ac:	2000bb10 	.word	0x2000bb10
 80026b0:	08006b01 	.word	0x08006b01
 80026b4:	2000bb50 	.word	0x2000bb50
 80026b8:	20020000 	.word	0x20020000
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  i = TM_CALIBRATION_LOOP;
  do {
    chTMStartMeasurementX(&tm);
 80026bc:	4668      	mov	r0, sp
 80026be:	f004 fb7f 	bl	8006dc0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 80026c2:	4668      	mov	r0, sp
 80026c4:	f004 fb54 	bl	8006d70 <chTMStopMeasurementX>
    i--;
  } while (i > 0U);
 80026c8:	3e01      	subs	r6, #1
 80026ca:	d1f7      	bne.n	80026bc <main+0x35c>
  ch.tm.offset = tm.best;
 80026cc:	4b9f      	ldr	r3, [pc, #636]	; (800294c <main+0x5ec>)
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
  tp->name            = name;
  REG_INSERT(tp);
 80026ce:	f8d4 c014 	ldr.w	ip, [r4, #20]
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
  tp->name            = name;
 80026d2:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8002990 <main+0x630>
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  {
    /* Setting up the base address of the static main thread stack, the
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
 80026d6:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 8002994 <main+0x634>
 80026da:	9800      	ldr	r0, [sp, #0]
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->hdr.pqueue.prio = prio;
  tp->state           = CH_STATE_WTSTART;
  tp->flags           = CH_FLAG_MODE_STATIC;
 80026dc:	f884 6861 	strb.w	r6, [r4, #2145]	; 0x861
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
  tp->name            = name;
  REG_INSERT(tp);
 80026e0:	f503 6204 	add.w	r2, r3, #2112	; 0x840
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->hdr.pqueue.prio = prio;
 80026e4:	2780      	movs	r7, #128	; 0x80
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
 80026e6:	f04f 0e01 	mov.w	lr, #1
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
 80026ea:	f603 016c 	addw	r1, r3, #2156	; 0x86c
 *
 * @notapi
 */
static inline void ch_list_init(ch_list_t *lp) {

  lp->next = lp;
 80026ee:	f603 0a68 	addw	sl, r3, #2152	; 0x868
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->hdr.pqueue.prio = prio;
 80026f2:	f8c4 7848 	str.w	r7, [r4, #2120]	; 0x848
  tp->flags           = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks           = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio        = prio;
 80026f6:	f8c4 787c 	str.w	r7, [r4, #2172]	; 0x87c
  tp->mtxlist         = NULL;
 80026fa:	f8c4 6878 	str.w	r6, [r4, #2168]	; 0x878
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending        = (eventmask_t)0;
 80026fe:	f8c4 6874 	str.w	r6, [r4, #2164]	; 0x874
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
  tp->name            = name;
  REG_INSERT(tp);
 8002702:	f8c4 4850 	str.w	r4, [r4, #2128]	; 0x850
 8002706:	f8c4 c854 	str.w	ip, [r4, #2132]	; 0x854
 800270a:	f8c4 0884 	str.w	r0, [r4, #2180]	; 0x884
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
 800270e:	f884 e862 	strb.w	lr, [r4, #2146]	; 0x862
  tp->name            = name;
 8002712:	f8c4 b858 	str.w	fp, [r4, #2136]	; 0x858
 8002716:	2720      	movs	r7, #32
  REG_INSERT(tp);
 8002718:	f8cc 2010 	str.w	r2, [ip, #16]
 800271c:	6162      	str	r2, [r4, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 800271e:	61a2      	str	r2, [r4, #24]
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 8002720:	f884 e860 	strb.w	lr, [r4, #2144]	; 0x860
 8002724:	f8c4 a868 	str.w	sl, [r4, #2152]	; 0x868
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
 8002728:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
  qp->prev = qp;
 800272c:	f8c4 1870 	str.w	r1, [r4, #2160]	; 0x870
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  {
    /* Setting up the base address of the static main thread stack, the
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
 8002730:	f8c4 985c 	str.w	r9, [r4, #2140]	; 0x85c
 8002734:	f387 8811 	msr	BASEPRI, r7
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002738:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273a:	4a85      	ldr	r2, [pc, #532]	; (8002950 <main+0x5f0>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800273c:	4985      	ldr	r1, [pc, #532]	; (8002954 <main+0x5f4>)
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273e:	f8d2 a00c 	ldr.w	sl, [r2, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002742:	f8df 9254 	ldr.w	r9, [pc, #596]	; 8002998 <main+0x638>
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002746:	4884      	ldr	r0, [pc, #528]	; (8002958 <main+0x5f8>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002748:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
 800274c:	ea0a 0c0c 	and.w	ip, sl, ip
  reg_value  =  (reg_value                                   |
 8002750:	ea4c 0101 	orr.w	r1, ip, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8002754:	60d1      	str	r1, [r2, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002756:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800275a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800275e:	f8c9 100c 	str.w	r1, [r9, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002762:	6801      	ldr	r1, [r0, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002764:	f04f 0c10 	mov.w	ip, #16
 8002768:	ea41 010e 	orr.w	r1, r1, lr
 800276c:	6001      	str	r1, [r0, #0]
 800276e:	f882 c01f 	strb.w	ip, [r2, #31]
 8002772:	f882 7022 	strb.w	r7, [r2, #34]	; 0x22
 *
 * @notapi
 */
void _dbg_check_enable(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8002776:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002778:	b90a      	cbnz	r2, 800277e <main+0x41e>
 800277a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277c:	b113      	cbz	r3, 8002784 <main+0x424>
    chSysHalt("SV#3");
 800277e:	4877      	ldr	r0, [pc, #476]	; (800295c <main+0x5fc>)
 8002780:	f004 ff86 	bl	8007690 <chSysHalt>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002784:	f386 8811 	msr	BASEPRI, r6
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002788:	b662      	cpsie	i
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
  thread_t *tp;

#if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
    ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 800278a:	4875      	ldr	r0, [pc, #468]	; (8002960 <main+0x600>)
 800278c:	f004 fcb8 	bl	8007100 <chRegFindThreadByWorkingArea>
 8002790:	b110      	cbz	r0, 8002798 <main+0x438>
 8002792:	4874      	ldr	r0, [pc, #464]	; (8002964 <main+0x604>)
 8002794:	f004 ff7c 	bl	8007690 <chSysHalt>
 8002798:	4a71      	ldr	r2, [pc, #452]	; (8002960 <main+0x600>)
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
    *startp++ = v;
 800279a:	2355      	movs	r3, #85	; 0x55
 800279c:	5593      	strb	r3, [r2, r6]
 800279e:	3601      	adds	r6, #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 80027a0:	f5b6 7fb0 	cmp.w	r6, #352	; 0x160
    *startp++ = v;
 80027a4:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8002960 <main+0x600>
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 80027a8:	d1f8      	bne.n	800279c <main+0x43c>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80027aa:	2320      	movs	r3, #32
 80027ac:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 80027b0:	f005 f856 	bl	8007860 <_dbg_check_lock>
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
  thread_t *tp;

  chDbgCheckClassI();
 80027b4:	f004 ff9c 	bl	80076f0 <chDbgCheckClassI>
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80027b8:	2300      	movs	r3, #0
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
  tp->name            = name;
  REG_INSERT(tp);
 80027ba:	6966      	ldr	r6, [r4, #20]
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80027bc:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 800299c <main+0x63c>
 80027c0:	f8c9 30f8 	str.w	r3, [r9, #248]	; 0xf8
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->hdr.pqueue.prio = prio;
 80027c4:	2101      	movs	r1, #1
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
  tp->name            = name;
  REG_INSERT(tp);
 80027c6:	f509 728c 	add.w	r2, r9, #280	; 0x118
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->hdr.pqueue.prio = prio;
  tp->state           = CH_STATE_WTSTART;
 80027ca:	f04f 0e02 	mov.w	lr, #2
  tp->flags           = CH_FLAG_MODE_STATIC;
 80027ce:	f889 3139 	strb.w	r3, [r9, #313]	; 0x139
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks           = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio        = prio;
  tp->mtxlist         = NULL;
 80027d2:	f8c9 3150 	str.w	r3, [r9, #336]	; 0x150
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending        = (eventmask_t)0;
 80027d6:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->hdr.pqueue.prio = prio;
 80027da:	f8c9 1120 	str.w	r1, [r9, #288]	; 0x120
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
 80027de:	f509 73a2 	add.w	r3, r9, #324	; 0x144
  tp->flags           = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks           = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio        = prio;
 80027e2:	f8c9 1154 	str.w	r1, [r9, #340]	; 0x154
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
 80027e6:	f889 113a 	strb.w	r1, [r9, #314]	; 0x13a
  tp->name            = name;
 80027ea:	485f      	ldr	r0, [pc, #380]	; (8002968 <main+0x608>)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80027ec:	4f5f      	ldr	r7, [pc, #380]	; (800296c <main+0x60c>)
 80027ee:	f8c9 c0f4 	str.w	ip, [r9, #244]	; 0xf4
 *
 * @notapi
 */
static inline void ch_list_init(ch_list_t *lp) {

  lp->next = lp;
 80027f2:	f509 71a0 	add.w	r1, r9, #320	; 0x140
 80027f6:	f109 0ab4 	add.w	sl, r9, #180	; 0xb4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->hdr.pqueue.prio = prio;
  tp->state           = CH_STATE_WTSTART;
 80027fa:	f889 e138 	strb.w	lr, [r9, #312]	; 0x138
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
  tp->name            = name;
 80027fe:	f8c9 0130 	str.w	r0, [r9, #304]	; 0x130
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8002802:	f8c9 9134 	str.w	r9, [r9, #308]	; 0x134
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
  chSchWakeupS(tp, MSG_OK);
 8002806:	4610      	mov	r0, r2
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
  tp->name            = name;
  REG_INSERT(tp);
 8002808:	f8c9 4128 	str.w	r4, [r9, #296]	; 0x128
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800280c:	f8c9 a124 	str.w	sl, [r9, #292]	; 0x124
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
  tp->name            = name;
  REG_INSERT(tp);
 8002810:	f8c9 612c 	str.w	r6, [r9, #300]	; 0x12c
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002814:	f8c9 7114 	str.w	r7, [r9, #276]	; 0x114
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
  tp->name            = name;
  REG_INSERT(tp);
 8002818:	6132      	str	r2, [r6, #16]
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
 800281a:	f8c9 3144 	str.w	r3, [r9, #324]	; 0x144
  qp->prev = qp;
 800281e:	f8c9 3148 	str.w	r3, [r9, #328]	; 0x148
 *
 * @notapi
 */
static inline void ch_list_init(ch_list_t *lp) {

  lp->next = lp;
 8002822:	f8c9 1140 	str.w	r1, [r9, #320]	; 0x140
 8002826:	6162      	str	r2, [r4, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
  chSchWakeupS(tp, MSG_OK);
 8002828:	f005 fd5a 	bl	80082e0 <chSchWakeupS.constprop.33>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800282c:	f005 f808 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002830:	6823      	ldr	r3, [r4, #0]
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
  tp->name            = name;
  REG_INSERT(tp);
 8002832:	4a46      	ldr	r2, [pc, #280]	; (800294c <main+0x5ec>)
 8002834:	42a3      	cmp	r3, r4
 8002836:	d004      	beq.n	8002842 <main+0x4e2>
 8002838:	6992      	ldr	r2, [r2, #24]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	6892      	ldr	r2, [r2, #8]
 800283e:	429a      	cmp	r2, r3
 8002840:	d351      	bcc.n	80028e6 <main+0x586>
 8002842:	2200      	movs	r2, #0
 8002844:	f382 8811 	msr	BASEPRI, r2
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
 8002848:	4e49      	ldr	r6, [pc, #292]	; (8002970 <main+0x610>)
 800284a:	4b4a      	ldr	r3, [pc, #296]	; (8002974 <main+0x614>)
  ibqp->bsize     = size + sizeof (size_t);
  ibqp->bn        = n;
  ibqp->buffers   = bp;
  ibqp->ptr       = NULL;
  ibqp->top       = NULL;
  ibqp->notify    = infy;
 800284c:	f8df e150 	ldr.w	lr, [pc, #336]	; 80029a0 <main+0x640>

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->suspended = suspended;
  ibqp->bcounter  = 0;
 8002850:	61b2      	str	r2, [r6, #24]
 8002852:	4630      	mov	r0, r6
  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->suspended = suspended;
  obqp->bcounter  = n;
  obqp->brdptr    = bp;
  obqp->bwrptr    = bp;
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8002854:	f206 498c 	addw	r9, r6, #1164	; 0x48c
 8002858:	f840 3b04 	str.w	r3, [r0], #4
  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->suspended = suspended;
  ibqp->bcounter  = 0;
  ibqp->brdptr    = bp;
 800285c:	f106 017c 	add.w	r1, r6, #124	; 0x7c
  ibqp->bwrptr    = bp;
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8002860:	f506 7321 	add.w	r3, r6, #644	; 0x284
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
 8002864:	f106 0a0c 	add.w	sl, r6, #12
 8002868:	f106 0c44 	add.w	ip, r6, #68	; 0x44
  obqp->bsize     = size + sizeof (size_t);
  obqp->bn        = n;
  obqp->buffers   = bp;
  obqp->ptr       = NULL;
  obqp->top       = NULL;
  obqp->notify    = onfy;
 800286c:	f8df b134 	ldr.w	fp, [pc, #308]	; 80029a4 <main+0x644>
  ibqp->bwrptr    = bp;
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
  ibqp->bsize     = size + sizeof (size_t);
  ibqp->bn        = n;
  ibqp->buffers   = bp;
  ibqp->ptr       = NULL;
 8002870:	6372      	str	r2, [r6, #52]	; 0x34
  ibqp->top       = NULL;
 8002872:	63b2      	str	r2, [r6, #56]	; 0x38
  obqp->bwrptr    = bp;
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
  obqp->bsize     = size + sizeof (size_t);
  obqp->bn        = n;
  obqp->buffers   = bp;
  obqp->ptr       = NULL;
 8002874:	66f2      	str	r2, [r6, #108]	; 0x6c
  obqp->top       = NULL;
 8002876:	6732      	str	r2, [r6, #112]	; 0x70
  ibqp->bsize     = size + sizeof (size_t);
  ibqp->bn        = n;
  ibqp->buffers   = bp;
  ibqp->ptr       = NULL;
  ibqp->top       = NULL;
  ibqp->notify    = infy;
 8002878:	f8c6 e03c 	str.w	lr, [r6, #60]	; 0x3c
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 800287c:	2201      	movs	r2, #1
  ibqp->suspended = suspended;
  ibqp->bcounter  = 0;
  ibqp->brdptr    = bp;
  ibqp->bwrptr    = bp;
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
  ibqp->bsize     = size + sizeof (size_t);
 800287e:	f44f 7e82 	mov.w	lr, #260	; 0x104
  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->suspended = suspended;
  obqp->bcounter  = n;
  obqp->brdptr    = bp;
  obqp->bwrptr    = bp;
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8002882:	f8c6 905c 	str.w	r9, [r6, #92]	; 0x5c
  ibqp->bcounter  = 0;
  ibqp->brdptr    = bp;
  ibqp->bwrptr    = bp;
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
  ibqp->bsize     = size + sizeof (size_t);
  ibqp->bn        = n;
 8002886:	f04f 0902 	mov.w	r9, #2
  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->suspended = suspended;
  ibqp->bcounter  = 0;
  ibqp->brdptr    = bp;
  ibqp->bwrptr    = bp;
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800288a:	6273      	str	r3, [r6, #36]	; 0x24
  osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->suspended = suspended;
  obqp->bcounter  = n;
  obqp->brdptr    = bp;
 800288c:	65b3      	str	r3, [r6, #88]	; 0x58
  obqp->bwrptr    = bp;
 800288e:	6573      	str	r3, [r6, #84]	; 0x54
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
  obqp->bsize     = size + sizeof (size_t);
  obqp->bn        = n;
  obqp->buffers   = bp;
 8002890:	66b3      	str	r3, [r6, #104]	; 0x68
  ibqp->bn        = n;
  ibqp->buffers   = bp;
  ibqp->ptr       = NULL;
  ibqp->top       = NULL;
  ibqp->notify    = infy;
  ibqp->link      = link;
 8002892:	6436      	str	r6, [r6, #64]	; 0x40
  obqp->bn        = n;
  obqp->buffers   = bp;
  obqp->ptr       = NULL;
  obqp->top       = NULL;
  obqp->notify    = onfy;
  obqp->link      = link;
 8002894:	67b6      	str	r6, [r6, #120]	; 0x78
  obqp->bsize     = size + sizeof (size_t);
  obqp->bn        = n;
  obqp->buffers   = bp;
  obqp->ptr       = NULL;
  obqp->top       = NULL;
  obqp->notify    = onfy;
 8002896:	f8c6 b074 	str.w	fp, [r6, #116]	; 0x74
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 800289a:	6070      	str	r0, [r6, #4]
 800289c:	f8c6 a00c 	str.w	sl, [r6, #12]
  qp->prev = qp;
 80028a0:	f8c6 a010 	str.w	sl, [r6, #16]
  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->suspended = suspended;
  ibqp->bcounter  = 0;
  ibqp->brdptr    = bp;
 80028a4:	6231      	str	r1, [r6, #32]
  ibqp->bwrptr    = bp;
 80028a6:	61f1      	str	r1, [r6, #28]
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
  ibqp->bsize     = size + sizeof (size_t);
  ibqp->bn        = n;
  ibqp->buffers   = bp;
 80028a8:	6331      	str	r1, [r6, #48]	; 0x30
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
 80028aa:	f8c6 c044 	str.w	ip, [r6, #68]	; 0x44
  qp->prev = qp;
 80028ae:	f8c6 c048 	str.w	ip, [r6, #72]	; 0x48
 80028b2:	7232      	strb	r2, [r6, #8]
                   size_t size, size_t n, bqnotify_t infy, void *link) {

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->suspended = suspended;
 80028b4:	7532      	strb	r2, [r6, #20]
                   size_t size, size_t n, bqnotify_t onfy, void *link) {

  osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->suspended = suspended;
 80028b6:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
  ibqp->suspended = suspended;
  ibqp->bcounter  = 0;
  ibqp->brdptr    = bp;
  ibqp->bwrptr    = bp;
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
  ibqp->bsize     = size + sizeof (size_t);
 80028ba:	f8c6 e028 	str.w	lr, [r6, #40]	; 0x28
  obqp->suspended = suspended;
  obqp->bcounter  = n;
  obqp->brdptr    = bp;
  obqp->bwrptr    = bp;
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
  obqp->bsize     = size + sizeof (size_t);
 80028be:	f8c6 e060 	str.w	lr, [r6, #96]	; 0x60
  ibqp->bcounter  = 0;
  ibqp->brdptr    = bp;
  ibqp->bwrptr    = bp;
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
  ibqp->bsize     = size + sizeof (size_t);
  ibqp->bn        = n;
 80028c2:	f8c6 902c 	str.w	r9, [r6, #44]	; 0x2c

  osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->suspended = suspended;
  obqp->bcounter  = n;
 80028c6:	f8c6 9050 	str.w	r9, [r6, #80]	; 0x50
  obqp->brdptr    = bp;
  obqp->bwrptr    = bp;
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
  obqp->bsize     = size + sizeof (size_t);
  obqp->bn        = n;
 80028ca:	f8c6 9064 	str.w	r9, [r6, #100]	; 0x64
 80028ce:	2320      	movs	r3, #32
 80028d0:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 80028d4:	f004 ffc4 	bl	8007860 <_dbg_check_lock>
  USBDriver *usbp = config->usbp;

  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
 80028d8:	7a33      	ldrb	r3, [r6, #8]
 80028da:	3b01      	subs	r3, #1
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d905      	bls.n	80028ec <main+0x58c>
 80028e0:	4825      	ldr	r0, [pc, #148]	; (8002978 <main+0x618>)
 80028e2:	f004 fed5 	bl	8007690 <chSysHalt>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80028e6:	4825      	ldr	r0, [pc, #148]	; (800297c <main+0x61c>)
 80028e8:	f004 fed2 	bl	8007690 <chSysHalt>
  usbp->in_params[config->bulk_in - 1U]   = sdup;
  usbp->out_params[config->bulk_out - 1U] = sdup;
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
  }
  sdup->config = config;
 80028ec:	4b24      	ldr	r3, [pc, #144]	; (8002980 <main+0x620>)
 80028ee:	f8c6 348c 	str.w	r3, [r6, #1164]	; 0x48c
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 80028f2:	626e      	str	r6, [r5, #36]	; 0x24
  usbp->out_params[config->bulk_out - 1U] = sdup;
 80028f4:	63ae      	str	r6, [r5, #56]	; 0x38
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
 80028f6:	62ae      	str	r6, [r5, #40]	; 0x28
  }
  sdup->config = config;
  sdup->state = SDU_READY;
 80028f8:	f886 9008 	strb.w	r9, [r6, #8]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80028fc:	f004 ffa0 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	4a12      	ldr	r2, [pc, #72]	; (800294c <main+0x5ec>)
 8002904:	42a3      	cmp	r3, r4
 8002906:	d004      	beq.n	8002912 <main+0x5b2>
 8002908:	6992      	ldr	r2, [r2, #24]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	6892      	ldr	r2, [r2, #8]
 800290e:	429a      	cmp	r2, r3
 8002910:	d319      	bcc.n	8002946 <main+0x5e6>
 8002912:	f04f 0900 	mov.w	r9, #0
 8002916:	f389 8811 	msr	BASEPRI, r9
  chSysInit();

  sduObjectInit(&SDU1);
  sduStart(&SDU1, &serusbcfg);

  usbDisconnectBus(serusbcfg.usbp);
 800291a:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 800291c:	4e19      	ldr	r6, [pc, #100]	; (8002984 <main+0x624>)
 800291e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002920:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002924:	6393      	str	r3, [r2, #56]	; 0x38
  chThdSleepMilliseconds(1500);
 8002926:	f643 2098 	movw	r0, #15000	; 0x3a98
 800292a:	f004 fdf1 	bl	8007510 <chThdSleep>
 800292e:	2320      	movs	r3, #32
 8002930:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002934:	f004 ff94 	bl	8007860 <_dbg_check_lock>
  unsigned i;

  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
 8002938:	782b      	ldrb	r3, [r5, #0]
 800293a:	1e5a      	subs	r2, r3, #1
 800293c:	2a01      	cmp	r2, #1
 800293e:	d933      	bls.n	80029a8 <main+0x648>
 8002940:	4811      	ldr	r0, [pc, #68]	; (8002988 <main+0x628>)
 8002942:	f004 fea5 	bl	8007690 <chSysHalt>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002946:	4811      	ldr	r0, [pc, #68]	; (800298c <main+0x62c>)
 8002948:	f004 fea2 	bl	8007690 <chSysHalt>
 800294c:	2000b288 	.word	0x2000b288
 8002950:	e000ed00 	.word	0xe000ed00
 8002954:	05fa0300 	.word	0x05fa0300
 8002958:	e0001000 	.word	0xe0001000
 800295c:	0800ca40 	.word	0x0800ca40
 8002960:	20009d98 	.word	0x20009d98
 8002964:	0800c768 	.word	0x0800c768
 8002968:	0800ca48 	.word	0x0800ca48
 800296c:	08000321 	.word	0x08000321
 8002970:	2000adf8 	.word	0x2000adf8
 8002974:	0800c780 	.word	0x0800c780
 8002978:	0800c7b4 	.word	0x0800c7b4
 800297c:	0800c75c 	.word	0x0800c75c
 8002980:	0800c7dc 	.word	0x0800c7dc
 8002984:	20009fc4 	.word	0x20009fc4
 8002988:	0800c774 	.word	0x0800c774
 800298c:	0800c750 	.word	0x0800c750
 8002990:	0800c7f0 	.word	0x0800c7f0
 8002994:	20000400 	.word	0x20000400
 8002998:	e000edf0 	.word	0xe000edf0
 800299c:	080075a1 	.word	0x080075a1
 80029a0:	08001d81 	.word	0x08001d81
 80029a4:	08001e81 	.word	0x08001e81
                "invalid state");
  usbp->config = config;
 80029a8:	4ac1      	ldr	r2, [pc, #772]	; (8002cb0 <main+0x950>)
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 80029aa:	f8c6 900c 	str.w	r9, [r6, #12]
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  if (usbp->state == USB_STOP) {
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	f8c6 9010 	str.w	r9, [r6, #16]
 80029b4:	f8c6 9014 	str.w	r9, [r6, #20]
 80029b8:	f8c6 9018 	str.w	r9, [r6, #24]
 80029bc:	f8c6 901c 	str.w	r9, [r6, #28]
 80029c0:	f8c6 9020 	str.w	r9, [r6, #32]
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 80029c4:	6072      	str	r2, [r6, #4]
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 80029c6:	6ef6      	ldr	r6, [r6, #108]	; 0x6c

  if (usbp->state == USB_STOP) {
 80029c8:	f000 81de 	beq.w	8002d88 <main+0xa28>
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
  }
  usb_lld_start(usbp);
  usbp->state = USB_READY;
 80029cc:	2302      	movs	r3, #2
 80029ce:	702b      	strb	r3, [r5, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80029d0:	f004 ff36 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	4ab7      	ldr	r2, [pc, #732]	; (8002cb4 <main+0x954>)
 80029d8:	42a3      	cmp	r3, r4
 80029da:	d005      	beq.n	80029e8 <main+0x688>
 80029dc:	6992      	ldr	r2, [r2, #24]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	6892      	ldr	r2, [r2, #8]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	f0c0 8250 	bcc.w	8002e88 <main+0xb28>
 80029e8:	2300      	movs	r3, #0
 80029ea:	f383 8811 	msr	BASEPRI, r3
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 80029ee:	6eea      	ldr	r2, [r5, #108]	; 0x6c

  int res = 0;
  bool r = false;

#if (VMC_NUM_CONTAINERS >= 1)
  msg_pools[0] = &msg_pool1;
 80029f0:	f8df a314 	ldr.w	sl, [pc, #788]	; 8002d08 <main+0x9a8>
 80029f4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80029f6:	4db0      	ldr	r5, [pc, #704]	; (8002cb8 <main+0x958>)
 80029f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80029fc:	6393      	str	r3, [r2, #56]	; 0x38
  chThdSleepMilliseconds(500);
 80029fe:	f241 3088 	movw	r0, #5000	; 0x1388
 8002a02:	f004 fd85 	bl	8007510 <chThdSleep>

  chThdSleepMilliseconds(2000);
 8002a06:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002a0a:	f004 fd81 	bl	8007510 <chThdSleep>

  chprintf((BaseSequentialStream *)&SDU1,"Starting up!\r\n");
 8002a0e:	49ab      	ldr	r1, [pc, #684]	; (8002cbc <main+0x95c>)
 8002a10:	48ab      	ldr	r0, [pc, #684]	; (8002cc0 <main+0x960>)
 8002a12:	f005 fa8d 	bl	8007f30 <chprintf.constprop.34>

  chThdSleepMilliseconds(500);
 8002a16:	f241 3088 	movw	r0, #5000	; 0x1388
 8002a1a:	f004 fd79 	bl	8007510 <chThdSleep>
/* Debug print facility */

void (*dbg_print_fun)(const char *str, va_list args) = NULL;

void chibios_register_dbg_print(void (*f)(const char *str, va_list args)) {
  dbg_print_fun = f;
 8002a1e:	4aa9      	ldr	r2, [pc, #676]	; (8002cc4 <main+0x964>)

  int res = 0;
  bool r = false;

#if (VMC_NUM_CONTAINERS >= 1)
  msg_pools[0] = &msg_pool1;
 8002a20:	4ba9      	ldr	r3, [pc, #676]	; (8002cc8 <main+0x968>)
/* Debug print facility */

void (*dbg_print_fun)(const char *str, va_list args) = NULL;

void chibios_register_dbg_print(void (*f)(const char *str, va_list args)) {
  dbg_print_fun = f;
 8002a22:	49aa      	ldr	r1, [pc, #680]	; (8002ccc <main+0x96c>)
 8002a24:	6011      	str	r1, [r2, #0]

  int res = 0;
  bool r = false;

#if (VMC_NUM_CONTAINERS >= 1)
  msg_pools[0] = &msg_pool1;
 8002a26:	f8c3 a000 	str.w	sl, [r3]
 8002a2a:	2640      	movs	r6, #64	; 0x40
 *
 * @api
 */
static inline void chPoolAdd(memory_pool_t *mp, void *objp) {

  chPoolFree(mp, objp);
 8002a2c:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 8002d08 <main+0x9a8>
 8002a30:	4629      	mov	r1, r5
 8002a32:	4648      	mov	r0, r9
 8002a34:	f004 fb0c 	bl	8007050 <chPoolFree>
  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8002a38:	f8da 3004 	ldr.w	r3, [sl, #4]
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8002a3c:	3e01      	subs	r6, #1
    chPoolAdd(mp, p);
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8002a3e:	441d      	add	r5, r3
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0U));

  while (n != 0U) {
 8002a40:	d1f4      	bne.n	8002a2c <main+0x6cc>
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
 8002a42:	48a3      	ldr	r0, [pc, #652]	; (8002cd0 <main+0x970>)
 8002a44:	4ba3      	ldr	r3, [pc, #652]	; (8002cd4 <main+0x974>)
     chMBObjectInit(&mb[i], b[i], MAX_MESSAGES);

     chibios_interop[i].mb = &mb[i];
     chibios_interop[i].msg_pool = msg_pools[i];
     chibios_interop[i].send_message = send_message;
     vm_containers[i].backend_custom = (void*)&chibios_interop[i];
 8002a46:	4da4      	ldr	r5, [pc, #656]	; (8002cd8 <main+0x978>)
  // it doesn't need to be as it is a uint8_t type.

  unsigned int value_flags_start = sizeof(heap_cell_t) * n_cells;
  unsigned int flags_start = value_flags_start + (sizeof(heap_flags_t) * n_cells);

  heap->cells = (heap_cell_t *)mem;
 8002a48:	4aa4      	ldr	r2, [pc, #656]	; (8002cdc <main+0x97c>)
#endif

  for (int i = 0; i < VMC_NUM_CONTAINERS; i ++) {
     chMBObjectInit(&mb[i], b[i], MAX_MESSAGES);

     chibios_interop[i].mb = &mb[i];
 8002a4a:	49a5      	ldr	r1, [pc, #660]	; (8002ce0 <main+0x980>)
     chibios_interop[i].msg_pool = msg_pools[i];
     chibios_interop[i].send_message = send_message;
 8002a4c:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 8002d0c <main+0x9ac>
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
  mbp->cnt    = (size_t)0;
 8002a50:	611e      	str	r6, [r3, #16]
     vm_containers[i].backend_custom = (void*)&chibios_interop[i];
 8002a52:	f241 4e44 	movw	lr, #5188	; 0x1444
  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
 8002a56:	f500 7b80 	add.w	fp, r0, #256	; 0x100
  heap->value_flags = (heap_flags_t*)(mem + value_flags_start);
  heap->flags = (uint8_t *)(mem + flags_start);
  heap->bptr = (uintptr_t)mem;

  for (unsigned int i = 0; i < n_cells; i ++) {
 8002a5a:	46b2      	mov	sl, r6
 8002a5c:	f845 100e 	str.w	r1, [r5, lr]
  mbp->cnt    = (size_t)0;
  mbp->reset  = false;
 8002a60:	751e      	strb	r6, [r3, #20]
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
 8002a62:	f103 0e18 	add.w	lr, r3, #24
 8002a66:	f103 0620 	add.w	r6, r3, #32
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
 8002a6a:	6018      	str	r0, [r3, #0]
  mbp->rdptr  = buf;
 8002a6c:	60d8      	str	r0, [r3, #12]
  mbp->wrptr  = buf;
 8002a6e:	6098      	str	r0, [r3, #8]
  mbp->top    = &buf[n];
 8002a70:	f8c3 b004 	str.w	fp, [r3, #4]

  unsigned int value_flags_start = sizeof(heap_cell_t) * n_cells;
  unsigned int flags_start = value_flags_start + (sizeof(heap_flags_t) * n_cells);

  heap->cells = (heap_cell_t *)mem;
  heap->value_flags = (heap_flags_t*)(mem + value_flags_start);
 8002a74:	f502 609d 	add.w	r0, r2, #1256	; 0x4e8
  heap->flags = (uint8_t *)(mem + flags_start);
 8002a78:	f202 7b5c 	addw	fp, r2, #1884	; 0x75c
 8002a7c:	621e      	str	r6, [r3, #32]
  qp->prev = qp;
 8002a7e:	625e      	str	r6, [r3, #36]	; 0x24

  unsigned int value_flags_start = sizeof(heap_cell_t) * n_cells;
  unsigned int flags_start = value_flags_start + (sizeof(heap_flags_t) * n_cells);

  heap->cells = (heap_cell_t *)mem;
  heap->value_flags = (heap_flags_t*)(mem + value_flags_start);
 8002a80:	6168      	str	r0, [r5, #20]
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
 8002a82:	f8c3 e018 	str.w	lr, [r3, #24]
  qp->prev = qp;
 8002a86:	f8c3 e01c 	str.w	lr, [r3, #28]
#endif

  for (int i = 0; i < VMC_NUM_CONTAINERS; i ++) {
     chMBObjectInit(&mb[i], b[i], MAX_MESSAGES);

     chibios_interop[i].mb = &mb[i];
 8002a8a:	604b      	str	r3, [r1, #4]
     chibios_interop[i].msg_pool = msg_pools[i];
 8002a8c:	f8c1 9000 	str.w	r9, [r1]
     chibios_interop[i].send_message = send_message;
 8002a90:	f8c1 c008 	str.w	ip, [r1, #8]
  // it doesn't need to be as it is a uint8_t type.

  unsigned int value_flags_start = sizeof(heap_cell_t) * n_cells;
  unsigned int flags_start = value_flags_start + (sizeof(heap_flags_t) * n_cells);

  heap->cells = (heap_cell_t *)mem;
 8002a94:	602a      	str	r2, [r5, #0]
  heap->value_flags = (heap_flags_t*)(mem + value_flags_start);
  heap->flags = (uint8_t *)(mem + flags_start);
  heap->bptr = (uintptr_t)mem;
 8002a96:	606a      	str	r2, [r5, #4]
  unsigned int value_flags_start = sizeof(heap_cell_t) * n_cells;
  unsigned int flags_start = value_flags_start + (sizeof(heap_flags_t) * n_cells);

  heap->cells = (heap_cell_t *)mem;
  heap->value_flags = (heap_flags_t*)(mem + value_flags_start);
  heap->flags = (uint8_t *)(mem + flags_start);
 8002a98:	f8c5 b018 	str.w	fp, [r5, #24]
  heap->bptr = (uintptr_t)mem;

  for (unsigned int i = 0; i < n_cells; i ++) {
    heap->cells[i].snd = i + 1;
    heap->flags[i] = 0;
 8002a9c:	4656      	mov	r6, sl
    heap->value_flags[i].snd = VALUE_PTR_BIT;
 8002a9e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  heap->value_flags = (heap_flags_t*)(mem + value_flags_start);
  heap->flags = (uint8_t *)(mem + flags_start);
  heap->bptr = (uintptr_t)mem;

  for (unsigned int i = 0; i < n_cells; i ++) {
    heap->cells[i].snd = i + 1;
 8002aa2:	682a      	ldr	r2, [r5, #0]
    heap->flags[i] = 0;
 8002aa4:	f8d5 e018 	ldr.w	lr, [r5, #24]
  heap->value_flags = (heap_flags_t*)(mem + value_flags_start);
  heap->flags = (uint8_t *)(mem + flags_start);
  heap->bptr = (uintptr_t)mem;

  for (unsigned int i = 0; i < n_cells; i ++) {
    heap->cells[i].snd = i + 1;
 8002aa8:	4b8b      	ldr	r3, [pc, #556]	; (8002cd8 <main+0x978>)
 8002aaa:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 8002aae:	f10a 0101 	add.w	r1, sl, #1
 8002ab2:	6051      	str	r1, [r2, #4]
    heap->flags[i] = 0;
 8002ab4:	f80e 600a 	strb.w	r6, [lr, sl]
    heap->value_flags[i].snd = VALUE_PTR_BIT;
 8002ab8:	696a      	ldr	r2, [r5, #20]
 8002aba:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8002abe:	468a      	mov	sl, r1
  heap->cells = (heap_cell_t *)mem;
  heap->value_flags = (heap_flags_t*)(mem + value_flags_start);
  heap->flags = (uint8_t *)(mem + flags_start);
  heap->bptr = (uintptr_t)mem;

  for (unsigned int i = 0; i < n_cells; i ++) {
 8002ac0:	f1ba 0f9d 	cmp.w	sl, #157	; 0x9d
    heap->cells[i].snd = i + 1;
    heap->flags[i] = 0;
    heap->value_flags[i].snd = VALUE_PTR_BIT;
 8002ac4:	8050      	strh	r0, [r2, #2]
  heap->flags = (uint8_t *)(mem + flags_start);
  heap->bptr = (uintptr_t)mem;

  for (unsigned int i = 0; i < n_cells; i ++) {
    heap->cells[i].snd = i + 1;
    heap->flags[i] = 0;
 8002ac6:	f04f 0100 	mov.w	r1, #0
  heap->cells = (heap_cell_t *)mem;
  heap->value_flags = (heap_flags_t*)(mem + value_flags_start);
  heap->flags = (uint8_t *)(mem + flags_start);
  heap->bptr = (uintptr_t)mem;

  for (unsigned int i = 0; i < n_cells; i ++) {
 8002aca:	d1ea      	bne.n	8002aa2 <main+0x742>
    heap->cells[i].snd = i + 1;
    heap->flags[i] = 0;
    heap->value_flags[i].snd = VALUE_PTR_BIT;
  }

  heap->cells[n_cells-1].snd = HEAP_NULL;
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	4e85      	ldr	r6, [pc, #532]	; (8002ce4 <main+0x984>)
  #if VMC_NUM_CONTAINERS >= 1
  rl = heap_init(&vm_containers[VMC_CONTAINER_1].heap, vmc_container_1_heap, VMC_CONTAINER_1_HEAP_SIZE_BYTES);

  if (!rl) return -2;

  vm_containers[VMC_CONTAINER_1].stack_memory   = vmc_container_1_stack;
 8002ad0:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8002d10 <main+0x9b0>
  vm_containers[VMC_CONTAINER_1].code_memory    = vmc_container_1_code;
 8002ad4:	f8df c23c 	ldr.w	ip, [pc, #572]	; 8002d14 <main+0x9b4>
  vm_containers[VMC_CONTAINER_1].arrays_memory  = vmc_container_1_arrays;
 8002ad8:	f8df e23c 	ldr.w	lr, [pc, #572]	; 8002d18 <main+0x9b8>
  heap->sweep_pos  = 0;
  heap->size_bytes = size_bytes;
  heap->size_cells = n_cells;
 8002adc:	f8c3 a00c 	str.w	sl, [r3, #12]
    heap->cells[i].snd = i + 1;
    heap->flags[i] = 0;
    heap->value_flags[i].snd = VALUE_PTR_BIT;
  }

  heap->cells[n_cells-1].snd = HEAP_NULL;
 8002ae0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
  heap->sweep_pos  = 0;
  heap->size_bytes = size_bytes;
 8002ae4:	f44f 6a00 	mov.w	sl, #2048	; 0x800
    heap->cells[i].snd = i + 1;
    heap->flags[i] = 0;
    heap->value_flags[i].snd = VALUE_PTR_BIT;
  }

  heap->cells[n_cells-1].snd = HEAP_NULL;
 8002ae8:	f8c0 b4e4 	str.w	fp, [r0, #1252]	; 0x4e4
  vm_containers[VMC_CONTAINER_1].current_running_context_id = 0;

  vm_containers[VMC_CONTAINER_1].code_size = sizeof(vmc_container_1_code);
 8002aec:	f240 1b3b 	movw	fp, #315	; 0x13b
  heap->sweep_pos  = 0;
  heap->size_bytes = size_bytes;
 8002af0:	f8c3 a008 	str.w	sl, [r3, #8]
  #if VMC_NUM_CONTAINERS >= 1
  rl = heap_init(&vm_containers[VMC_CONTAINER_1].heap, vmc_container_1_heap, VMC_CONTAINER_1_HEAP_SIZE_BYTES);

  if (!rl) return -2;

  vm_containers[VMC_CONTAINER_1].stack_memory   = vmc_container_1_stack;
 8002af4:	f8c3 901c 	str.w	r9, [r3, #28]
  vm_containers[VMC_CONTAINER_1].code_memory    = vmc_container_1_code;
 8002af8:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
    heap->flags[i] = 0;
    heap->value_flags[i].snd = VALUE_PTR_BIT;
  }

  heap->cells[n_cells-1].snd = HEAP_NULL;
  heap->sweep_pos  = 0;
 8002afc:	6119      	str	r1, [r3, #16]
  return 1; /* Maybe have some error codes in relation to this fun */
}

static bool init_all_chans(Channel_t *c, uint8_t *mem){

  int mem_offset = 0;
 8002afe:	460a      	mov	r2, r1
  if (!rl) return -2;

  vm_containers[VMC_CONTAINER_1].stack_memory   = vmc_container_1_stack;
  vm_containers[VMC_CONTAINER_1].code_memory    = vmc_container_1_code;
  vm_containers[VMC_CONTAINER_1].arrays_memory  = vmc_container_1_arrays;
  vm_containers[VMC_CONTAINER_1].current_running_context_id = 0;
 8002b00:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
 8002b04:	4630      	mov	r0, r6

  if (!rl) return -2;

  vm_containers[VMC_CONTAINER_1].stack_memory   = vmc_container_1_stack;
  vm_containers[VMC_CONTAINER_1].code_memory    = vmc_container_1_code;
  vm_containers[VMC_CONTAINER_1].arrays_memory  = vmc_container_1_arrays;
 8002b06:	f8c3 e020 	str.w	lr, [r3, #32]
  vm_containers[VMC_CONTAINER_1].current_running_context_id = 0;

  vm_containers[VMC_CONTAINER_1].code_size = sizeof(vmc_container_1_code);
 8002b0a:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28

#include<channel.h>


int channel_init(Channel_t *c, chan_send_queue_t sq, chan_recv_queue_t rq){
  c->sendq = sq;
 8002b0e:	f04f 0903 	mov.w	r9, #3
 8002b12:	f04f 0c02 	mov.w	ip, #2
  c->recvq = rq;
  c->in_use = false;
  c->sync_driver_no = DRIVER_NULL;
 8002b16:	f04f 0aff 	mov.w	sl, #255	; 0xff

#include<chan_send_queue.h>

int chan_send_q_init(chan_send_queue_t *q, uint8_t *mem, unsigned int size_bytes){

  if (!mem || !q || size_bytes < sizeof(send_data_t)) return 0;
 8002b1a:	eb16 0b02 	adds.w	fp, r6, r2
 8002b1e:	f000 81bc 	beq.w	8002e9a <main+0xb3a>
 8002b22:	f102 0e3c 	add.w	lr, r2, #60	; 0x3c

#include<chan_recv_queue.h>

int chan_recv_q_init(chan_recv_queue_t *q, uint8_t *mem, unsigned int size_bytes){

  if (!mem || !q || size_bytes < sizeof(recv_data_t)) return 0;
 8002b26:	eb10 0e0e 	adds.w	lr, r0, lr
 8002b2a:	f000 81b6 	beq.w	8002e9a <main+0xb3a>
 8002b2e:	3260      	adds	r2, #96	; 0x60
  int mem_offset = 0;

  size_t sd_size = sizeof(send_data_t);
  size_t rd_size = sizeof(recv_data_t);

  for(int i = 0; i < MAX_CHANNELS; i++){
 8002b30:	f5b2 5f16 	cmp.w	r2, #9600	; 0x2580

#include<channel.h>


int channel_init(Channel_t *c, chan_send_queue_t sq, chan_recv_queue_t rq){
  c->sendq = sq;
 8002b34:	f8c3 b0f4 	str.w	fp, [r3, #244]	; 0xf4
 8002b38:	f8c3 90f8 	str.w	r9, [r3, #248]	; 0xf8
 8002b3c:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
 8002b40:	f8c3 c100 	str.w	ip, [r3, #256]	; 0x100
 8002b44:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
  c->recvq = rq;
 8002b48:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
 8002b4c:	f8c3 910c 	str.w	r9, [r3, #268]	; 0x10c
 8002b50:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
 8002b54:	f8c3 c114 	str.w	ip, [r3, #276]	; 0x114
 8002b58:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
  c->in_use = false;
 8002b5c:	f883 111c 	strb.w	r1, [r3, #284]	; 0x11c
  c->sync_driver_no = DRIVER_NULL;
 8002b60:	f883 a11d 	strb.w	sl, [r3, #285]	; 0x11d
 8002b64:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002b68:	d1d7      	bne.n	8002b1a <main+0x7ba>
 8002b6a:	4a5f      	ldr	r2, [pc, #380]	; (8002ce8 <main+0x988>)
 8002b6c:	69ee      	ldr	r6, [r5, #28]
 8002b6e:	f102 09c0 	add.w	r9, r2, #192	; 0xc0
  // Maybe make sure that the s->data becomes 4 bytes aligned?
  s->data = (UINT*)mem;

  s->flags = (value_flags_t*)(mem + sizeof(UINT) * num_elt);

  s->sp = 0;
 8002b72:	f04f 0c00 	mov.w	ip, #0
  s->size = num_elt;
 8002b76:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
    int offset = i * CONTEXT_STACK_SPACE;

    int st_status = stack_init(&ctx[i].stack
                               , &mem[offset]
                               , CONTEXT_STACK_SPACE);
    ctx[i].deadline = TIME_MAX;
 8002b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

#include <stack.h>

int stack_init(cam_stack_t *s, uint8_t *mem, unsigned int size_bytes) {

  if (!mem || !s || size_bytes < 256) return 0;
 8002b82:	2e00      	cmp	r6, #0
 8002b84:	f000 8183 	beq.w	8002e8e <main+0xb2e>
 8002b88:	f106 03a8 	add.w	r3, r6, #168	; 0xa8

  unsigned int num_elt = size_bytes / (sizeof(UINT) + sizeof(value_flags_t));

  // Maybe make sure that the s->data becomes 4 bytes aligned?
  s->data = (UINT*)mem;
 8002b8c:	6116      	str	r6, [r2, #16]

  s->flags = (value_flags_t*)(mem + sizeof(UINT) * num_elt);
 8002b8e:	60d3      	str	r3, [r2, #12]

  s->sp = 0;
 8002b90:	f8c2 c014 	str.w	ip, [r2, #20]
  s->size = num_elt;
 8002b94:	f8c2 e018 	str.w	lr, [r2, #24]
 8002b98:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
 8002b9c:	3230      	adds	r2, #48	; 0x30

  if (VMC_MAX_CONTEXTS * CONTEXT_STACK_SPACE > memory_size) {
    return false; /* Not enough space for that many stacks */
  }

  for(int i = 0; i < VMC_MAX_CONTEXTS; i++){
 8002b9e:	454a      	cmp	r2, r9
 8002ba0:	f506 7680 	add.w	r6, r6, #256	; 0x100
  // Maybe make sure that the s->data becomes 4 bytes aligned?
  s->data = (UINT*)mem;

  s->flags = (value_flags_t*)(mem + sizeof(UINT) * num_elt);

  s->sp = 0;
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	d1eb      	bne.n	8002b82 <main+0x822>
  }



  /* Initialize system time */
  if (!sys_time_init((void *)vm_containers[VMC_CONTAINER_1].backend_custom)) {
 8002baa:	f241 4244 	movw	r2, #5188	; 0x1444
            , unsigned int size_bytes
            , Comparator_t c){

  if (!mem || !pq || size_bytes < sizeof(pq_data_t)) return -1;
  unsigned int num_elt = size_bytes / sizeof(pq_data_t);
  pq->capacity = num_elt;
 8002bae:	f241 2628 	movw	r6, #4648	; 0x1228
 8002bb2:	58a9      	ldr	r1, [r5, r2]
  pq->size = 0;
  pq->data = (pq_data_t*)mem;
  pq->cmp  = c;
 8002bb4:	4a4d      	ldr	r2, [pc, #308]	; (8002cec <main+0x98c>)

  if (!mem || !pq || size_bytes < sizeof(pq_data_t)) return -1;
  unsigned int num_elt = size_bytes / sizeof(pq_data_t);
  pq->capacity = num_elt;
  pq->size = 0;
  pq->data = (pq_data_t*)mem;
 8002bb6:	f8df a164 	ldr.w	sl, [pc, #356]	; 8002d1c <main+0x9bc>
  pq->cmp  = c;
 8002bba:	7013      	strb	r3, [r2, #0]
            , unsigned int size_bytes
            , Comparator_t c){

  if (!mem || !pq || size_bytes < sizeof(pq_data_t)) return -1;
  unsigned int num_elt = size_bytes / sizeof(pq_data_t);
  pq->capacity = num_elt;
 8002bbc:	f241 2e38 	movw	lr, #4664	; 0x1238
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	51aa      	str	r2, [r5, r6]
 8002bc4:	f845 200e 	str.w	r2, [r5, lr]
  pq->size = 0;
 8002bc8:	f241 2b2c 	movw	fp, #4652	; 0x122c
  pq->data = (pq_data_t*)mem;
 8002bcc:	f241 2924 	movw	r9, #4644	; 0x1224
  pq->cmp  = c;
 8002bd0:	f241 2c30 	movw	ip, #4656	; 0x1230
            , Comparator_t c){

  if (!mem || !pq || size_bytes < sizeof(pq_data_t)) return -1;
  unsigned int num_elt = size_bytes / sizeof(pq_data_t);
  pq->capacity = num_elt;
  pq->size = 0;
 8002bd4:	f241 263c 	movw	r6, #4668	; 0x123c
  pq->data = (pq_data_t*)mem;
 8002bd8:	f241 2234 	movw	r2, #4660	; 0x1234
 8002bdc:	4844      	ldr	r0, [pc, #272]	; (8002cf0 <main+0x990>)
            , Comparator_t c){

  if (!mem || !pq || size_bytes < sizeof(pq_data_t)) return -1;
  unsigned int num_elt = size_bytes / sizeof(pq_data_t);
  pq->capacity = num_elt;
  pq->size = 0;
 8002bde:	f845 300b 	str.w	r3, [r5, fp]
  pq->data = (pq_data_t*)mem;
  pq->cmp  = c;
 8002be2:	f04f 0e01 	mov.w	lr, #1

  if (!mem || !pq || size_bytes < sizeof(pq_data_t)) return -1;
  unsigned int num_elt = size_bytes / sizeof(pq_data_t);
  pq->capacity = num_elt;
  pq->size = 0;
  pq->data = (pq_data_t*)mem;
 8002be6:	f845 a009 	str.w	sl, [r5, r9]
  pq->cmp  = c;
 8002bea:	f805 e00c 	strb.w	lr, [r5, ip]
            , Comparator_t c){

  if (!mem || !pq || size_bytes < sizeof(pq_data_t)) return -1;
  unsigned int num_elt = size_bytes / sizeof(pq_data_t);
  pq->capacity = num_elt;
  pq->size = 0;
 8002bee:	51ab      	str	r3, [r5, r6]
  pq->data = (pq_data_t*)mem;
 8002bf0:	50a8      	str	r0, [r5, r2]
static uint32_t counter_freq;


bool sys_time_init(void *os_interop) {

  if (!os_interop) return false;
 8002bf2:	2900      	cmp	r1, #0
 8002bf4:	f000 8151 	beq.w	8002e9a <main+0xb3a>

  interop = (chibios_interop_t*)os_interop;
 8002bf8:	483e      	ldr	r0, [pc, #248]	; (8002cf4 <main+0x994>)

  counter_high_word = 0xFFFFFFFF;
 8002bfa:	f8df c124 	ldr.w	ip, [pc, #292]	; 8002d20 <main+0x9c0>
  counter_freq = 0; /* TODO: Figure out how to compute this.
 8002bfe:	4e3e      	ldr	r6, [pc, #248]	; (8002cf8 <main+0x998>)

  alarm.active = false;
  alarm.alarm_time = 0;


  COMB_EXPAND(rccEnableTIM, SYS_TIMER)(true);
 8002c00:	4a3e      	ldr	r2, [pc, #248]	; (8002cfc <main+0x99c>)

bool sys_time_init(void *os_interop) {

  if (!os_interop) return false;

  interop = (chibios_interop_t*)os_interop;
 8002c02:	6001      	str	r1, [r0, #0]

  counter_high_word = 0xFFFFFFFF;
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c08:	f8cc 0000 	str.w	r0, [ip]
  counter_freq = 0; /* TODO: Figure out how to compute this.
 8002c0c:	6033      	str	r3, [r6, #0]

  alarm.active = false;
  alarm.alarm_time = 0;


  COMB_EXPAND(rccEnableTIM, SYS_TIMER)(true);
 8002c0e:	f8d2 c040 	ldr.w	ip, [r2, #64]	; 0x40
  counter_high_word = 0xFFFFFFFF;
  counter_freq = 0; /* TODO: Figure out how to compute this.
  		       I think it is 84Mhz / (tim->PSC+1)
  		     */

  alarm.active = false;
 8002c12:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8002d24 <main+0x9c4>

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002c16:	493a      	ldr	r1, [pc, #232]	; (8002d00 <main+0x9a0>)
 8002c18:	f889 3000 	strb.w	r3, [r9]
  alarm.alarm_time = 0;


  COMB_EXPAND(rccEnableTIM, SYS_TIMER)(true);
 8002c1c:	f04c 0c08 	orr.w	ip, ip, #8
 8002c20:	f8c2 c040 	str.w	ip, [r2, #64]	; 0x40
 8002c24:	f8d2 c060 	ldr.w	ip, [r2, #96]	; 0x60

  nvicEnableVector(COMB_EXPAND(STM32_TIM,COMB_EXPAND(SYS_TIMER,_NUMBER)) ,
  		   COMB_EXPAND(STM32_GPT_TIM, COMB_EXPAND(SYS_TIMER, _IRQ_PRIORITY))); /* use GPT level prio */


  tim->PSC = 0; //0xFFFF;     // counter rate is input_clock / (0xFFFF+1)
 8002c28:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8002d28 <main+0x9c8>

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8002c2c:	4e35      	ldr	r6, [pc, #212]	; (8002d04 <main+0x9a4>)

  alarm.active = false;
  alarm.alarm_time = 0;


  COMB_EXPAND(rccEnableTIM, SYS_TIMER)(true);
 8002c2e:	f04c 0c08 	orr.w	ip, ip, #8
 8002c32:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
 8002c36:	f8d2 c060 	ldr.w	ip, [r2, #96]	; 0x60
  COMB_EXPAND(rccResetTIM, SYS_TIMER)();
 8002c3a:	f8d2 c020 	ldr.w	ip, [r2, #32]
 8002c3e:	f04c 0c08 	orr.w	ip, ip, #8
 8002c42:	f8c2 c020 	str.w	ip, [r2, #32]
 8002c46:	f8d2 c020 	ldr.w	ip, [r2, #32]
 8002c4a:	f02c 0c08 	bic.w	ip, ip, #8
 8002c4e:	f8c2 c020 	str.w	ip, [r2, #32]
 8002c52:	f04f 0c70 	mov.w	ip, #112	; 0x70
 8002c56:	6a12      	ldr	r2, [r2, #32]
 8002c58:	f881 c332 	strb.w	ip, [r1, #818]	; 0x332
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002c5c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002c60:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002c64:	604a      	str	r2, [r1, #4]

  nvicEnableVector(COMB_EXPAND(STM32_TIM,COMB_EXPAND(SYS_TIMER,_NUMBER)) ,
  		   COMB_EXPAND(STM32_GPT_TIM, COMB_EXPAND(SYS_TIMER, _IRQ_PRIORITY))); /* use GPT level prio */


  tim->PSC = 0; //0xFFFF;     // counter rate is input_clock / (0xFFFF+1)
 8002c66:	f8da 2000 	ldr.w	r2, [sl]
 8002c6a:	6293      	str	r3, [r2, #40]	; 0x28
  tim->ARR = 0xFFFFFFFF; // Value when counter should flip to zero.
 8002c6c:	62d0      	str	r0, [r2, #44]	; 0x2c

  tim->CCR[0] = 0xFFFFFFFF; /* init compare values */
 8002c6e:	6350      	str	r0, [r2, #52]	; 0x34
  tim->CCR[1] = 0xFFFFFFFF;
 8002c70:	6390      	str	r0, [r2, #56]	; 0x38
  tim->CCR[2] = 0xFFFFFFFF;
 8002c72:	63d0      	str	r0, [r2, #60]	; 0x3c
  tim->CCR[3] = 0xFFFFFFFF;
 8002c74:	6410      	str	r0, [r2, #64]	; 0x40

  tim->CCER |= 0x1; /* activate compare on ccr channel 1 */
 8002c76:	f8d2 c020 	ldr.w	ip, [r2, #32]
  counter_freq = 0; /* TODO: Figure out how to compute this.
  		       I think it is 84Mhz / (tim->PSC+1)
  		     */

  alarm.active = false;
  alarm.alarm_time = 0;
 8002c7a:	2000      	movs	r0, #0
  tim->CCR[0] = 0xFFFFFFFF; /* init compare values */
  tim->CCR[1] = 0xFFFFFFFF;
  tim->CCR[2] = 0xFFFFFFFF;
  tim->CCR[3] = 0xFFFFFFFF;

  tim->CCER |= 0x1; /* activate compare on ccr channel 1 */
 8002c7c:	ea4c 0c0e 	orr.w	ip, ip, lr
  counter_freq = 0; /* TODO: Figure out how to compute this.
  		       I think it is 84Mhz / (tim->PSC+1)
  		     */

  alarm.active = false;
  alarm.alarm_time = 0;
 8002c80:	2100      	movs	r1, #0
  tim->CCR[0] = 0xFFFFFFFF; /* init compare values */
  tim->CCR[1] = 0xFFFFFFFF;
  tim->CCR[2] = 0xFFFFFFFF;
  tim->CCR[3] = 0xFFFFFFFF;

  tim->CCER |= 0x1; /* activate compare on ccr channel 1 */
 8002c82:	f8c2 c020 	str.w	ip, [r2, #32]
  counter_freq = 0; /* TODO: Figure out how to compute this.
  		       I think it is 84Mhz / (tim->PSC+1)
  		     */

  alarm.active = false;
  alarm.alarm_time = 0;
 8002c86:	e9c9 0102 	strd	r0, r1, [r9, #8]

  tim->CCER |= 0x1; /* activate compare on ccr channel 1 */

  /* TODO: make sure we get "greater than or equal to" comparison on the CCR */

  tim->CNT = 0;
 8002c8a:	6253      	str	r3, [r2, #36]	; 0x24
  tim->EGR = 0x1; // Update event (Makes all the configurations stick)
 8002c8c:	f8c2 e014 	str.w	lr, [r2, #20]

  tim->CR1 = 0x1; // enable
 8002c90:	f8c2 e000 	str.w	lr, [r2]
  tim->DIER |= 0x1; /* activate interrupt on "update event" (for example overflow) */
 8002c94:	68d1      	ldr	r1, [r2, #12]
 8002c96:	2003      	movs	r0, #3
 8002c98:	ea41 0c0e 	orr.w	ip, r1, lr
 8002c9c:	f8c2 c00c 	str.w	ip, [r2, #12]
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 8002ca0:	4671      	mov	r1, lr
      m2 = 3 << (bit * 2);
 8002ca2:	4681      	mov	r9, r0
 8002ca4:	f04f 0e10 	mov.w	lr, #16
      m4 = 15 << ((bit & 7) * 4);
 8002ca8:	f04f 0c0f 	mov.w	ip, #15
 8002cac:	e03e      	b.n	8002d2c <main+0x9cc>
 8002cae:	bf00      	nop
 8002cb0:	0800c7c0 	.word	0x0800c7c0
 8002cb4:	2000b288 	.word	0x2000b288
 8002cb8:	20001fc8 	.word	0x20001fc8
 8002cbc:	0800ca50 	.word	0x0800ca50
 8002cc0:	2000adf8 	.word	0x2000adf8
 8002cc4:	20009f60 	.word	0x20009f60
 8002cc8:	2000a57c 	.word	0x2000a57c
 8002ccc:	08005341 	.word	0x08005341
 8002cd0:	20001978 	.word	0x20001978
 8002cd4:	20009d70 	.word	0x20009d70
 8002cd8:	20004bb0 	.word	0x20004bb0
 8002cdc:	20001178 	.word	0x20001178
 8002ce0:	20009f0c 	.word	0x20009f0c
 8002ce4:	200025c8 	.word	0x200025c8
 8002ce8:	20004be0 	.word	0x20004be0
 8002cec:	20005df0 	.word	0x20005df0
 8002cf0:	20009f64 	.word	0x20009f64
 8002cf4:	2000a578 	.word	0x2000a578
 8002cf8:	2000a158 	.word	0x2000a158
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	e000e100 	.word	0xe000e100
 8002d04:	40020000 	.word	0x40020000
 8002d08:	20000808 	.word	0x20000808
 8002d0c:	08005381 	.word	0x08005381
 8002d10:	2000a178 	.word	0x2000a178
 8002d14:	0800c8f8 	.word	0x0800c8f8
 8002d18:	200025c8 	.word	0x200025c8
 8002d1c:	20004b48 	.word	0x20004b48
 8002d20:	2000a0b4 	.word	0x2000a0b4
 8002d24:	20009ef8 	.word	0x20009ef8
 8002d28:	20000818 	.word	0x20000818
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8002d2c:	2b04      	cmp	r3, #4
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
 8002d2e:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
    if (!mask)
 8002d32:	f000 812a 	beq.w	8002f8a <main+0xc2a>
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 8002d36:	f01e 0f01 	tst.w	lr, #1
    if (!mask)
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8002d3a:	ea4f 0080 	mov.w	r0, r0, lsl #2
    bit++;
 8002d3e:	f103 0301 	add.w	r3, r3, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 8002d42:	d0f3      	beq.n	8002d2c <main+0x9cc>

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8002d44:	6872      	ldr	r2, [r6, #4]
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 8002d46:	fa01 fa03 	lsl.w	sl, r1, r3
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8002d4a:	ea22 020a 	bic.w	r2, r2, sl
 8002d4e:	6072      	str	r2, [r6, #4]
 8002d50:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8002d54:	68b2      	ldr	r2, [r6, #8]
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 8002d56:	fa09 fa0a 	lsl.w	sl, r9, sl
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8002d5a:	ea6f 0a0a 	mvn.w	sl, sl
 8002d5e:	ea0a 0202 	and.w	r2, sl, r2
 8002d62:	60b2      	str	r2, [r6, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8002d64:	68f2      	ldr	r2, [r6, #12]
 8002d66:	ea0a 0202 	and.w	r2, sl, r2
 8002d6a:	60f2      	str	r2, [r6, #12]
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8002d6c:	6832      	ldr	r2, [r6, #0]
 8002d6e:	ea0a 0202 	and.w	r2, sl, r2
 8002d72:	4302      	orrs	r2, r0
 8002d74:	6032      	str	r2, [r6, #0]
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8002d76:	6a32      	ldr	r2, [r6, #32]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8002d78:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8002d7c:	fa0c fa0a 	lsl.w	sl, ip, sl
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8002d80:	ea22 020a 	bic.w	r2, r2, sl
 8002d84:	6232      	str	r2, [r6, #32]
 8002d86:	e7d1      	b.n	8002d2c <main+0x9cc>
    /* Clock activation.*/

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(true);
 8002d88:	4bbd      	ldr	r3, [pc, #756]	; (8003080 <main+0xd20>)

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002d8a:	4abe      	ldr	r2, [pc, #760]	; (8003084 <main+0xd24>)
 8002d8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);

      /* - Forced device mode.
         - USB turn-around time = TRDT_VALUE_FS.
         - Full Speed 1.1 PHY.*/
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8002d8e:	f8df e344 	ldr.w	lr, [pc, #836]	; 80030d4 <main+0xd74>
                      GUSBCFG_PHYSEL;

      /* 48MHz 1.1 PHY.*/
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 8002d92:	48bd      	ldr	r0, [pc, #756]	; (8003088 <main+0xd28>)
    /* Clock activation.*/

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(true);
 8002d94:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002d98:	6359      	str	r1, [r3, #52]	; 0x34
 8002d9a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d9c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002da0:	6559      	str	r1, [r3, #84]	; 0x54
 8002da2:	6d59      	ldr	r1, [r3, #84]	; 0x54
      rccResetOTG_FS();
 8002da4:	6959      	ldr	r1, [r3, #20]
 8002da6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002daa:	6159      	str	r1, [r3, #20]
 8002dac:	6959      	ldr	r1, [r3, #20]
 8002dae:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002db2:	6159      	str	r1, [r3, #20]
 8002db4:	f04f 0be0 	mov.w	fp, #224	; 0xe0
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002db8:	2108      	movs	r1, #8

    /* PHY enabled.*/
    otgp->PCGCCTL = 0;

    /* VBUS sensing and transceiver enabled.*/
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8002dba:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
    if (&USBD2 == usbp) {
      otgp->GCCFG = 0;
    }
#endif
#else
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8002dbe:	f44f 2c50 	mov.w	ip, #851968	; 0xd0000

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(true);
      rccResetOTG_FS();
 8002dc2:	695b      	ldr	r3, [r3, #20]

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002dc4:	f882 b343 	strb.w	fp, [r2, #835]	; 0x343
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002dc8:	f8c2 1188 	str.w	r1, [r2, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002dcc:	6091      	str	r1, [r2, #8]
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);

      /* - Forced device mode.
         - USB turn-around time = TRDT_VALUE_FS.
         - Full Speed 1.1 PHY.*/
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8002dce:	f8c6 e00c 	str.w	lr, [r6, #12]
                      GUSBCFG_PHYSEL;

      /* 48MHz 1.1 PHY.*/
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 8002dd2:	f8c6 0800 	str.w	r0, [r6, #2048]	; 0x800
#endif
    }
#endif

    /* PHY enabled.*/
    otgp->PCGCCTL = 0;
 8002dd6:	f8c6 9e00 	str.w	r9, [r6, #3584]	; 0xe00

    /* VBUS sensing and transceiver enabled.*/
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8002dda:	f8c6 a000 	str.w	sl, [r6]
    if (&USBD2 == usbp) {
      otgp->GCCFG = 0;
    }
#endif
#else
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8002dde:	f8c6 c038 	str.w	ip, [r6, #56]	; 0x38

static void otg_core_reset(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  /* Wait AHB idle condition.*/
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8002de2:	6933      	ldr	r3, [r6, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	dafc      	bge.n	8002de2 <main+0xa82>
    ;

  /* Core reset and delay of at least 3 PHY cycles.*/
  otgp->GRSTCTL = GRSTCTL_CSRST;
 8002de8:	2301      	movs	r3, #1
 8002dea:	6133      	str	r3, [r6, #16]
 * @xclass
 */
#if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {

  chSysPolledDelayX(cycles);
 8002dec:	200c      	movs	r0, #12
 8002dee:	f004 fc3f 	bl	8007670 <chSysPolledDelayX>
  osalSysPolledDelayX(12);
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 8002df2:	6933      	ldr	r3, [r6, #16]
 8002df4:	07db      	lsls	r3, r3, #31
 8002df6:	d4fc      	bmi.n	8002df2 <main+0xa92>
 8002df8:	2012      	movs	r0, #18
 8002dfa:	f004 fc39 	bl	8007670 <chSysPolledDelayX>
    ;

  osalSysPolledDelayX(18);

  /* Wait AHB idle condition again.*/
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8002dfe:	6933      	ldr	r3, [r6, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	dafc      	bge.n	8002dfe <main+0xa9e>

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8002e04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002e06:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8002e08:	f8d3 9008 	ldr.w	r9, [r3, #8]

    /* Soft core reset.*/
    otg_core_reset(usbp);

    /* Interrupts on TXFIFOs half empty.*/
    otgp->GAHBCFG = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60b3      	str	r3, [r6, #8]

    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
    }

    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8002e10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8002e14:	0159      	lsls	r1, r3, #5
 8002e16:	1842      	adds	r2, r0, r1
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {

    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8002e18:	f8d2 e900 	ldr.w	lr, [r2, #2304]	; 0x900
 8002e1c:	f1be 0f00 	cmp.w	lr, #0
 8002e20:	da05      	bge.n	8002e2e <main+0xace>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 8002e22:	f8d2 e900 	ldr.w	lr, [r2, #2304]	; 0x900
 8002e26:	f04e 4e80 	orr.w	lr, lr, #1073741824	; 0x40000000
 8002e2a:	f8c2 e900 	str.w	lr, [r2, #2304]	; 0x900
    }

    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 8002e2e:	f8d2 eb00 	ldr.w	lr, [r2, #2816]	; 0xb00
 8002e32:	f1be 0f00 	cmp.w	lr, #0
 8002e36:	da05      	bge.n	8002e44 <main+0xae4>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 8002e38:	f8d2 eb00 	ldr.w	lr, [r2, #2816]	; 0xb00
 8002e3c:	f04e 4e80 	orr.w	lr, lr, #1073741824	; 0x40000000
 8002e40:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
    }

    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8002e44:	1842      	adds	r2, r0, r1

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8002e46:	3301      	adds	r3, #1
 8002e48:	454b      	cmp	r3, r9

    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
    }

    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8002e4a:	f8c2 c908 	str.w	ip, [r2, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8002e4e:	f8c2 cb08 	str.w	ip, [r2, #2824]	; 0xb08

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8002e52:	d9df      	bls.n	8002e14 <main+0xab4>
    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
 8002e54:	686b      	ldr	r3, [r5, #4]
 8002e56:	68da      	ldr	r2, [r3, #12]
    }

    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  }
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8002e58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    /* Endpoints re-initialization.*/
    otg_disable_ep(usbp);

    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
 8002e5c:	2300      	movs	r3, #0
    }

    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  }
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8002e5e:	f8c0 181c 	str.w	r1, [r0, #2076]	; 0x81c
    /* Endpoints re-initialization.*/
    otg_disable_ep(usbp);

    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
 8002e62:	f8c6 3810 	str.w	r3, [r6, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
 8002e66:	f8c6 3814 	str.w	r3, [r6, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 8002e6a:	f8c6 381c 	str.w	r3, [r6, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 8002e6e:	2a00      	cmp	r2, #0
 8002e70:	f000 8088 	beq.w	8002f84 <main+0xc24>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
                       GINTMSK_ESUSPM | GINTMSK_SRQM | GINTMSK_WKUM |
                       GINTMSK_IISOIXFRM | GINTMSK_IISOOXFRM;
    else
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8002e74:	4b85      	ldr	r3, [pc, #532]	; (800308c <main+0xd2c>)
 8002e76:	61b3      	str	r3, [r6, #24]
                       GINTMSK_ESUSPM | GINTMSK_SRQM | GINTMSK_WKUM |
                       GINTMSK_IISOIXFRM | GINTMSK_IISOOXFRM |
                       GINTMSK_SOFM;

    /* Clears all pending IRQs, if any. */
    otgp->GINTSTS  = 0xFFFFFFFF;
 8002e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e7c:	6173      	str	r3, [r6, #20]

    /* Global interrupts enable.*/
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 8002e7e:	68b3      	ldr	r3, [r6, #8]
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	60b3      	str	r3, [r6, #8]
 8002e86:	e5a1      	b.n	80029cc <main+0x66c>
 8002e88:	4881      	ldr	r0, [pc, #516]	; (8003090 <main+0xd30>)
 8002e8a:	f004 fc01 	bl	8007690 <chSysHalt>
    int offset = i * CONTEXT_STACK_SPACE;

    int st_status = stack_init(&ctx[i].stack
                               , &mem[offset]
                               , CONTEXT_STACK_SPACE);
    ctx[i].deadline = TIME_MAX;
 8002e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e96:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28

  chibios_register_dbg_print(print_it);

  if (!chibios_sensevm_init()) {
     chprintf((BaseSequentialStream *)&SDU1, "SenseVM init failed!\r\n");
 8002e9a:	487e      	ldr	r0, [pc, #504]	; (8003094 <main+0xd34>)
 8002e9c:	497e      	ldr	r1, [pc, #504]	; (8003098 <main+0xd38>)
 8002e9e:	f005 f847 	bl	8007f30 <chprintf.constprop.34>

  bool r = true;

  for (int i = 0; i < VMC_NUM_CONTAINERS; i++) {

    thread_data[i].container = &vm_containers[i];
 8002ea2:	f8df 8234 	ldr.w	r8, [pc, #564]	; 80030d8 <main+0xd78>
    thread_data[i].container_name = container_names[i];
 8002ea6:	4b7d      	ldr	r3, [pc, #500]	; (800309c <main+0xd3c>)
             MEM_IS_ALIGNED(size, PORT_STACK_ALIGN) &&
             (prio <= HIGHPRIO) && (pf != NULL));

#if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
    ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
  chDbgAssert(chRegFindThreadByWorkingArea(wsp) == NULL,
 8002ea8:	487d      	ldr	r0, [pc, #500]	; (80030a0 <main+0xd40>)

  bool r = true;

  for (int i = 0; i < VMC_NUM_CONTAINERS; i++) {

    thread_data[i].container = &vm_containers[i];
 8002eaa:	f8c8 5000 	str.w	r5, [r8]
    thread_data[i].container_name = container_names[i];
 8002eae:	f8c8 3004 	str.w	r3, [r8, #4]
 8002eb2:	f004 f925 	bl	8007100 <chRegFindThreadByWorkingArea>
 8002eb6:	b110      	cbz	r0, 8002ebe <main+0xb5e>
 8002eb8:	487a      	ldr	r0, [pc, #488]	; (80030a4 <main+0xd44>)
 8002eba:	f004 fbe9 	bl	8007690 <chSysHalt>
 8002ebe:	4b78      	ldr	r3, [pc, #480]	; (80030a0 <main+0xd40>)
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
    *startp++ = v;
 8002ec0:	2155      	movs	r1, #85	; 0x55
 8002ec2:	f503 62aa 	add.w	r2, r3, #1360	; 0x550
 8002ec6:	f803 1b01 	strb.w	r1, [r3], #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	4d74      	ldr	r5, [pc, #464]	; (80030a0 <main+0xd40>)
 8002ece:	d3fa      	bcc.n	8002ec6 <main+0xb66>
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002ed6:	f004 fcc3 	bl	8007860 <_dbg_check_lock>
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
  tp->name            = name;
  REG_INSERT(tp);
 8002eda:	6962      	ldr	r2, [r4, #20]
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
  tp->name            = name;
 8002edc:	4872      	ldr	r0, [pc, #456]	; (80030a8 <main+0xd48>)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002ede:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 80030dc <main+0xd7c>
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
  tp->name            = name;
  REG_INSERT(tp);
 8002ee2:	f8c5 251c 	str.w	r2, [r5, #1308]	; 0x51c
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->hdr.pqueue.prio = prio;
  tp->state           = CH_STATE_WTSTART;
  tp->flags           = CH_FLAG_MODE_STATIC;
 8002ee6:	2300      	movs	r3, #0
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->hdr.pqueue.prio = prio;
 8002ee8:	216c      	movs	r1, #108	; 0x6c
  tp->state           = CH_STATE_WTSTART;
 8002eea:	f04f 0c02 	mov.w	ip, #2
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
 8002eee:	f04f 0e01 	mov.w	lr, #1
  tp->name            = name;
  REG_INSERT(tp);
 8002ef2:	f505 66a1 	add.w	r6, r5, #1288	; 0x508
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->hdr.pqueue.prio = prio;
 8002ef6:	f8c5 1510 	str.w	r1, [r5, #1296]	; 0x510
  tp->flags           = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks           = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio        = prio;
 8002efa:	f8c5 1544 	str.w	r1, [r5, #1348]	; 0x544
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->hdr.pqueue.prio = prio;
  tp->state           = CH_STATE_WTSTART;
  tp->flags           = CH_FLAG_MODE_STATIC;
 8002efe:	f885 3529 	strb.w	r3, [r5, #1321]	; 0x529
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks           = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio        = prio;
  tp->mtxlist         = NULL;
 8002f02:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending        = (eventmask_t)0;
 8002f06:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
 *
 * @notapi
 */
static inline void ch_list_init(ch_list_t *lp) {

  lp->next = lp;
 8002f0a:	f505 61a6 	add.w	r1, r5, #1328	; 0x530
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
 8002f0e:	f205 5334 	addw	r3, r5, #1332	; 0x534
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002f12:	f205 4aa4 	addw	sl, r5, #1188	; 0x4a4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->hdr.pqueue.prio = prio;
  tp->state           = CH_STATE_WTSTART;
 8002f16:	f885 c528 	strb.w	ip, [r5, #1320]	; 0x528
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
 8002f1a:	f885 e52a 	strb.w	lr, [r5, #1322]	; 0x52a
  tp->name            = name;
 8002f1e:	f8c5 0520 	str.w	r0, [r5, #1312]	; 0x520
  tp = (thread_t *)((uint8_t *)wsp + size -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 8002f22:	f8c5 5524 	str.w	r5, [r5, #1316]	; 0x524
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002f26:	f8c5 84e8 	str.w	r8, [r5, #1256]	; 0x4e8
 8002f2a:	f8c5 7504 	str.w	r7, [r5, #1284]	; 0x504
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
  tp->name            = name;
  REG_INSERT(tp);
 8002f2e:	f8c5 4518 	str.w	r4, [r5, #1304]	; 0x518
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002f32:	f8c5 a514 	str.w	sl, [r5, #1300]	; 0x514
 8002f36:	f8c5 94e4 	str.w	r9, [r5, #1252]	; 0x4e4

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 8002f3a:	4630      	mov	r0, r6
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
  tp->name            = name;
  REG_INSERT(tp);
 8002f3c:	6116      	str	r6, [r2, #16]
 8002f3e:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
  qp->prev = qp;
 8002f42:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
 *
 * @notapi
 */
static inline void ch_list_init(ch_list_t *lp) {

  lp->next = lp;
 8002f46:	f8c5 1530 	str.w	r1, [r5, #1328]	; 0x530
 8002f4a:	6166      	str	r6, [r4, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 8002f4c:	f005 f9c8 	bl	80082e0 <chSchWakeupS.constprop.33>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002f50:	f004 fc76 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002f54:	6823      	ldr	r3, [r4, #0]
  tp->time            = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs            = (trefs_t)1;
  tp->name            = name;
  REG_INSERT(tp);
 8002f56:	4a55      	ldr	r2, [pc, #340]	; (80030ac <main+0xd4c>)
 8002f58:	42a3      	cmp	r3, r4
 8002f5a:	d005      	beq.n	8002f68 <main+0xc08>
 8002f5c:	6992      	ldr	r2, [r2, #24]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	6892      	ldr	r2, [r2, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	f4ff acbf 	bcc.w	80028e6 <main+0x586>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f383 8811 	msr	BASEPRI, r3

    threads[i] = chThdCreateStatic(thread_wa[i],
 8002f6e:	4b50      	ldr	r3, [pc, #320]	; (80030b0 <main+0xd50>)
  }

  if (!chibios_start_container_threads()) {
     chprintf((BaseSequentialStream *)&SDU1, "SenseVM failed to start container threads!\r\n");
  } else {
    chprintf((BaseSequentialStream *)&SDU1, "SenseVM container threads started!\r\n");
 8002f70:	4848      	ldr	r0, [pc, #288]	; (8003094 <main+0xd34>)
 8002f72:	4950      	ldr	r1, [pc, #320]	; (80030b4 <main+0xd54>)
 8002f74:	601e      	str	r6, [r3, #0]
 8002f76:	f004 ffdb 	bl	8007f30 <chprintf.constprop.34>

  // Why is this needed ??
  // Why can we not just let the main thread die here ?
  
  while (true) {
    chThdSleepMilliseconds(1000);
 8002f7a:	f242 7010 	movw	r0, #10000	; 0x2710
 8002f7e:	f004 fac7 	bl	8007510 <chThdSleep>
 8002f82:	e7fa      	b.n	8002f7a <main+0xc1a>
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8002f84:	4b4c      	ldr	r3, [pc, #304]	; (80030b8 <main+0xd58>)
 8002f86:	61b3      	str	r3, [r6, #24]
 8002f88:	e776      	b.n	8002e78 <main+0xb18>
  LL_PWM_DRIVER_GROUP_START(ll_pwm_driver_group0);
  #endif

  #if VMC_CONTAINER_1_USE_DAC_0
  {
    LL_DAC_DRIVER_INIT(ll_dac, 0, drv_num);
 8002f8a:	4e4c      	ldr	r6, [pc, #304]	; (80030bc <main+0xd5c>)
 8002f8c:	f8df 9150 	ldr.w	r9, [pc, #336]	; 80030e0 <main+0xd80>
 8002f90:	f8c6 8010 	str.w	r8, [r6, #16]
 8002f94:	2300      	movs	r3, #0
 8002f96:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002f9a:	75b3      	strb	r3, [r6, #22]
 8002f9c:	61b3      	str	r3, [r6, #24]
 8002f9e:	60b3      	str	r3, [r6, #8]
 8002fa0:	82b2      	strh	r2, [r6, #20]
 8002fa2:	2320      	movs	r3, #32
 8002fa4:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002fa8:	f004 fc5a 	bl	8007860 <_dbg_check_lock>

  osalDbgCheck(dacp != NULL);

  osalSysLock();

  osalDbgAssert((dacp->state == DAC_STOP) || (dacp->state == DAC_READY),
 8002fac:	f898 3000 	ldrb.w	r3, [r8]
 8002fb0:	1e5a      	subs	r2, r3, #1
 8002fb2:	2a01      	cmp	r2, #1
 8002fb4:	d902      	bls.n	8002fbc <main+0xc5c>
 8002fb6:	4842      	ldr	r0, [pc, #264]	; (80030c0 <main+0xd60>)
 8002fb8:	f004 fb6a 	bl	8007690 <chSysHalt>
                "invalid state");

  dacp->config = config;
 8002fbc:	f106 0214 	add.w	r2, r6, #20
 */
void dac_lld_start(DACDriver *dacp) {

  /* If the driver is in DAC_STOP state then a full initialization is
     required.*/
  if (dacp->state == DAC_STOP) {
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	f8c9 2010 	str.w	r2, [r9, #16]
 8002fc6:	d11e      	bne.n	8003006 <main+0xca6>
    dacchannel_t channel = 0;

    /* Enabling the clock source.*/
#if STM32_DAC_USE_DAC1_CH1
    if (&DACD1 == dacp) {
      rccEnableDAC1(true);
 8002fc8:	4b2d      	ldr	r3, [pc, #180]	; (8003080 <main+0xd20>)
       zero.*/
#if STM32_DAC_DUAL_MODE == FALSE
    {
      uint32_t cr;

      cr = dacp->params->dac->CR;
 8002fca:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
    dacchannel_t channel = 0;

    /* Enabling the clock source.*/
#if STM32_DAC_USE_DAC1_CH1
    if (&DACD1 == dacp) {
      rccEnableDAC1(true);
 8002fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
       zero.*/
#if STM32_DAC_DUAL_MODE == FALSE
    {
      uint32_t cr;

      cr = dacp->params->dac->CR;
 8002fd0:	f8d0 e000 	ldr.w	lr, [r0]
      cr &= dacp->params->regmask;
      cr |= (DAC_CR_EN1 | dacp->config->cr) << dacp->params->regshift;
      dacp->params->dac->CR = cr;
      dac_lld_put_channel(dacp, channel, dacp->config->init);
 8002fd4:	8ab1      	ldrh	r1, [r6, #20]
    dacchannel_t channel = 0;

    /* Enabling the clock source.*/
#if STM32_DAC_USE_DAC1_CH1
    if (&DACD1 == dacp) {
      rccEnableDAC1(true);
 8002fd6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40
 8002fdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fde:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002fe2:	661a      	str	r2, [r3, #96]	; 0x60
    {
      uint32_t cr;

      cr = dacp->params->dac->CR;
      cr &= dacp->params->regmask;
      cr |= (DAC_CR_EN1 | dacp->config->cr) << dacp->params->regshift;
 8002fe4:	69b2      	ldr	r2, [r6, #24]
    dacchannel_t channel = 0;

    /* Enabling the clock source.*/
#if STM32_DAC_USE_DAC1_CH1
    if (&DACD1 == dacp) {
      rccEnableDAC1(true);
 8002fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
#if STM32_DAC_DUAL_MODE == FALSE
    {
      uint32_t cr;

      cr = dacp->params->dac->CR;
      cr &= dacp->params->regmask;
 8002fe8:	68c3      	ldr	r3, [r0, #12]
       zero.*/
#if STM32_DAC_DUAL_MODE == FALSE
    {
      uint32_t cr;

      cr = dacp->params->dac->CR;
 8002fea:	f8de c000 	ldr.w	ip, [lr]
      cr &= dacp->params->regmask;
      cr |= (DAC_CR_EN1 | dacp->config->cr) << dacp->params->regshift;
 8002fee:	6880      	ldr	r0, [r0, #8]
 8002ff0:	f042 0201 	orr.w	r2, r2, #1
 8002ff4:	4082      	lsls	r2, r0
#if STM32_DAC_DUAL_MODE == FALSE
    {
      uint32_t cr;

      cr = dacp->params->dac->CR;
      cr &= dacp->params->regmask;
 8002ff6:	ea0c 0303 	and.w	r3, ip, r3
      cr |= (DAC_CR_EN1 | dacp->config->cr) << dacp->params->regshift;
 8002ffa:	4313      	orrs	r3, r2
      dacp->params->dac->CR = cr;
      dac_lld_put_channel(dacp, channel, dacp->config->init);
 8002ffc:	4648      	mov	r0, r9
      uint32_t cr;

      cr = dacp->params->dac->CR;
      cr &= dacp->params->regmask;
      cr |= (DAC_CR_EN1 | dacp->config->cr) << dacp->params->regshift;
      dacp->params->dac->CR = cr;
 8002ffe:	f8ce 3000 	str.w	r3, [lr]
      dac_lld_put_channel(dacp, channel, dacp->config->init);
 8003002:	f004 ff6d 	bl	8007ee0 <dac_lld_put_channel.constprop.50>
  dac_lld_start(dacp);
  dacp->state = DAC_READY;
 8003006:	2302      	movs	r3, #2
 8003008:	f888 3000 	strb.w	r3, [r8]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800300c:	f004 fc18 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	4a26      	ldr	r2, [pc, #152]	; (80030ac <main+0xd4c>)
 8003014:	42a3      	cmp	r3, r4
 8003016:	d004      	beq.n	8003022 <main+0xcc2>
 8003018:	6992      	ldr	r2, [r2, #24]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	6892      	ldr	r2, [r2, #8]
 800301e:	429a      	cmp	r2, r3
 8003020:	d32a      	bcc.n	8003078 <main+0xd18>
 8003022:	2300      	movs	r3, #0
 8003024:	f383 8811 	msr	BASEPRI, r3

    ll_driver_t lld;
    if (ll_dac_init(&lld, &ll_dac)) {
       vm_containers[VMC_CONTAINER_1].drivers[drv_num] = lld;
 8003028:	f241 2c44 	movw	ip, #4676	; 0x1244
 800302c:	f241 2348 	movw	r3, #4680	; 0x1248
 8003030:	f241 214c 	movw	r1, #4684	; 0x124c
 8003034:	f241 2850 	movw	r8, #4688	; 0x1250
 8003038:	f241 2e54 	movw	lr, #4692	; 0x1254
 800303c:	f241 2258 	movw	r2, #4696	; 0x1258
 8003040:	f241 2b5c 	movw	fp, #4700	; 0x125c
 8003044:	2001      	movs	r0, #1
 8003046:	f845 600c 	str.w	r6, [r5, ip]
 800304a:	54e8      	strb	r0, [r5, r3]
 800304c:	f8df a094 	ldr.w	sl, [pc, #148]	; 80030e4 <main+0xd84>
 8003050:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80030e8 <main+0xd88>
 8003054:	f8df c094 	ldr.w	ip, [pc, #148]	; 80030ec <main+0xd8c>
 8003058:	4e1a      	ldr	r6, [pc, #104]	; (80030c4 <main+0xd64>)
 800305a:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <main+0xd68>)
 800305c:	f845 a001 	str.w	sl, [r5, r1]
 8003060:	f845 9008 	str.w	r9, [r5, r8]
  chibios_register_dbg_print(print_it);

  if (!chibios_sensevm_init()) {
     chprintf((BaseSequentialStream *)&SDU1, "SenseVM init failed!\r\n");
  } else {
    chprintf((BaseSequentialStream *)&SDU1, "SenseVM initialized!\r\n");
 8003064:	4919      	ldr	r1, [pc, #100]	; (80030cc <main+0xd6c>)
 8003066:	f845 c00e 	str.w	ip, [r5, lr]
 800306a:	50ae      	str	r6, [r5, r2]
 800306c:	f845 300b 	str.w	r3, [r5, fp]
 8003070:	4808      	ldr	r0, [pc, #32]	; (8003094 <main+0xd34>)
 8003072:	f004 ff5d 	bl	8007f30 <chprintf.constprop.34>
 8003076:	e714      	b.n	8002ea2 <main+0xb42>
 8003078:	4815      	ldr	r0, [pc, #84]	; (80030d0 <main+0xd70>)
 800307a:	f004 fb09 	bl	8007690 <chSysHalt>
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	e000e100 	.word	0xe000e100
 8003088:	02200003 	.word	0x02200003
 800308c:	c0303c08 	.word	0xc0303c08
 8003090:	0800c744 	.word	0x0800c744
 8003094:	2000adf8 	.word	0x2000adf8
 8003098:	0800ca78 	.word	0x0800ca78
 800309c:	0800ca90 	.word	0x0800ca90
 80030a0:	20001a78 	.word	0x20001a78
 80030a4:	0800c808 	.word	0x0800c808
 80030a8:	0800ca94 	.word	0x0800ca94
 80030ac:	2000b288 	.word	0x2000b288
 80030b0:	20009f08 	.word	0x20009f08
 80030b4:	0800ca9c 	.word	0x0800ca9c
 80030b8:	c0303c00 	.word	0xc0303c00
 80030bc:	2000a0b8 	.word	0x2000a0b8
 80030c0:	0800c7e4 	.word	0x0800c7e4
 80030c4:	08005321 	.word	0x08005321
 80030c8:	08005311 	.word	0x08005311
 80030cc:	0800ca60 	.word	0x0800ca60
 80030d0:	0800c7a8 	.word	0x0800c7a8
 80030d4:	40001440 	.word	0x40001440
 80030d8:	20004ba8 	.word	0x20004ba8
 80030dc:	080059e1 	.word	0x080059e1
 80030e0:	2000a580 	.word	0x2000a580
 80030e4:	080052e1 	.word	0x080052e1
 80030e8:	08005641 	.word	0x08005641
 80030ec:	08005331 	.word	0x08005331

080030f0 <otg_txfifo_handler>:
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80030f0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
 80030f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
 80030fe:	6956      	ldr	r6, [r2, #20]
 8003100:	e896 0028 	ldmia.w	r6, {r3, r5}
 8003104:	429d      	cmp	r5, r3
 8003106:	d235      	bcs.n	8003174 <otg_txfifo_handler+0x84>
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003108:	eb08 1e41 	add.w	lr, r8, r1, lsl #5
      return true;
    }

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
    if (n > usbp->epc[ep]->in_maxsize)
 800310c:	f8b2 c010 	ldrh.w	ip, [r2, #16]
#endif
      return true;
    }

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003110:	1b5d      	subs	r5, r3, r5
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003112:	f8de 3918 	ldr.w	r3, [lr, #2328]	; 0x918
 8003116:	4565      	cmp	r5, ip
 8003118:	bf28      	it	cs
 800311a:	4665      	movcs	r5, ip
 800311c:	b29b      	uxth	r3, r3
 800311e:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 8003122:	d832      	bhi.n	800318a <otg_txfifo_handler+0x9a>
      return false;

#if STM32_USB_OTGFIFO_FILL_BASEPRI
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8003124:	68b7      	ldr	r7, [r6, #8]
 */
static void otg_fifo_write_from_buffer(volatile uint32_t *fifop,
                                       const uint8_t *buf,
                                       size_t n) {

  osalDbgAssert(n > 0, "is zero");
 8003126:	b315      	cbz	r5, 800316e <otg_txfifo_handler+0x7e>
      return false;

#if STM32_USB_OTGFIFO_FILL_BASEPRI
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8003128:	1c4c      	adds	r4, r1, #1
 800312a:	eb08 3404 	add.w	r4, r8, r4, lsl #12
                                       size_t n) {

  osalDbgAssert(n > 0, "is zero");

  while (true) {
    *fifop = *((uint32_t *)buf);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6023      	str	r3, [r4, #0]
    if (n <= 4) {
 8003132:	2d04      	cmp	r5, #4
 8003134:	d907      	bls.n	8003146 <otg_txfifo_handler+0x56>
 8003136:	462b      	mov	r3, r5
 8003138:	463a      	mov	r2, r7
      break;
    }
    n -= 4;
 800313a:	3b04      	subs	r3, #4
                                       size_t n) {

  osalDbgAssert(n > 0, "is zero");

  while (true) {
    *fifop = *((uint32_t *)buf);
 800313c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8003140:	6020      	str	r0, [r4, #0]
    if (n <= 4) {
 8003142:	2b04      	cmp	r3, #4
 8003144:	d8f9      	bhi.n	800313a <otg_txfifo_handler+0x4a>
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8003146:	e896 000c 	ldmia.w	r6, {r2, r3}
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
                               usbp->epc[ep]->in_state->txbuf,
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
 800314a:	442f      	add	r7, r5
    usbp->epc[ep]->in_state->txcnt += n;
 800314c:	441d      	add	r5, r3
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 800314e:	42aa      	cmp	r2, r5
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
                               usbp->epc[ep]->in_state->txbuf,
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
 8003150:	60b7      	str	r7, [r6, #8]
    usbp->epc[ep]->in_state->txcnt += n;
 8003152:	6075      	str	r5, [r6, #4]
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8003154:	d90e      	bls.n	8003174 <otg_txfifo_handler+0x84>
#endif
      return true;
    }

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8003156:	1b55      	subs	r5, r2, r5
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8003158:	f8de 3918 	ldr.w	r3, [lr, #2328]	; 0x918
 800315c:	4565      	cmp	r5, ip
 800315e:	bf28      	it	cs
 8003160:	4665      	movcs	r5, ip
 8003162:	b29b      	uxth	r3, r3
 8003164:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 8003168:	d80f      	bhi.n	800318a <otg_txfifo_handler+0x9a>
 */
static void otg_fifo_write_from_buffer(volatile uint32_t *fifop,
                                       const uint8_t *buf,
                                       size_t n) {

  osalDbgAssert(n > 0, "is zero");
 800316a:	2d00      	cmp	r5, #0
 800316c:	d1df      	bne.n	800312e <otg_txfifo_handler+0x3e>
 800316e:	4808      	ldr	r0, [pc, #32]	; (8003190 <otg_txfifo_handler+0xa0>)
 8003170:	f004 fa8e 	bl	8007690 <chSysHalt>
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
#if 1
      usbp->otg->DIEPEMPMSK &= ~DIEPEMPMSK_INEPTXFEM(ep);
 8003174:	f8d8 3834 	ldr.w	r3, [r8, #2100]	; 0x834
 8003178:	2001      	movs	r0, #1
 800317a:	fa00 f201 	lsl.w	r2, r0, r1
 800317e:	ea23 0302 	bic.w	r3, r3, r2
 8003182:	f8c8 3834 	str.w	r3, [r8, #2100]	; 0x834
 8003186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
      return false;
 800318a:	2000      	movs	r0, #0
    usbp->epc[ep]->in_state->txcnt += n;
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
  }
}
 800318c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003190:	0800cac4 	.word	0x0800cac4
	...

080031a0 <otg_epout_handler>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 80031a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 80031a4:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
  uint32_t epint = otgp->oe[ep].DOEPINT;
 80031a6:	eb07 1341 	add.w	r3, r7, r1, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 80031aa:	4606      	mov	r6, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->oe[ep].DOEPINT;
 80031ac:	f8d3 4b08 	ldr.w	r4, [r3, #2824]	; 0xb08

  /* Resets all EP IRQ sources.*/
  otgp->oe[ep].DOEPINT = epint;
 80031b0:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 80031b4:	0722      	lsls	r2, r4, #28
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 80031b6:	460d      	mov	r5, r1
  uint32_t epint = otgp->oe[ep].DOEPINT;

  /* Resets all EP IRQ sources.*/
  otgp->oe[ep].DOEPINT = epint;

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 80031b8:	d503      	bpl.n	80031c2 <otg_epout_handler+0x22>
 80031ba:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80031be:	071b      	lsls	r3, r3, #28
 80031c0:	d425      	bmi.n	800320e <otg_epout_handler+0x6e>
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);
  }

  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 80031c2:	07e2      	lsls	r2, r4, #31
 80031c4:	d521      	bpl.n	800320a <otg_epout_handler+0x6a>
 80031c6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80031ca:	07db      	lsls	r3, r3, #31
 80031cc:	d51d      	bpl.n	800320a <otg_epout_handler+0x6a>
    USBOutEndpointState *osp;

    /* OUT state structure pointer for this endpoint.*/
    osp = usbp->epc[ep]->out_state;
 80031ce:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 80031d2:	68d9      	ldr	r1, [r3, #12]
 80031d4:	698b      	ldr	r3, [r1, #24]

    /* EP0 requires special handling.*/
    if (ep == 0) {
 80031d6:	b955      	cbnz	r5, 80031ee <otg_epout_handler+0x4e>
#endif

      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 80031d8:	8a4a      	ldrh	r2, [r1, #18]
 80031da:	685c      	ldr	r4, [r3, #4]
 80031dc:	fbb4 f0f2 	udiv	r0, r4, r2
 80031e0:	fb02 4210 	mls	r2, r2, r0, r4
 80031e4:	b91a      	cbnz	r2, 80031ee <otg_epout_handler+0x4e>
          (osp->rxsize < osp->totsize)) {
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
#endif

      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 80031ea:	4290      	cmp	r0, r2
 80031ec:	d315      	bcc.n	800321a <otg_epout_handler+0x7a>
        return;
      }
    }

    /* End on OUT transfer.*/
    _usb_isr_invoke_out_cb(usbp, ep);
 80031ee:	8972      	ldrh	r2, [r6, #10]
 80031f0:	68cc      	ldr	r4, [r1, #12]
 80031f2:	2301      	movs	r3, #1
 80031f4:	40ab      	lsls	r3, r5
 80031f6:	ea22 0303 	bic.w	r3, r2, r3
 80031fa:	8173      	strh	r3, [r6, #10]
 80031fc:	b12c      	cbz	r4, 800320a <otg_epout_handler+0x6a>
 80031fe:	4630      	mov	r0, r6
 8003200:	4629      	mov	r1, r5
 8003202:	4623      	mov	r3, r4
  }
}
 8003204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return;
      }
    }

    /* End on OUT transfer.*/
    _usb_isr_invoke_out_cb(usbp, ep);
 8003208:	4718      	bx	r3
 800320a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  otgp->oe[ep].DOEPINT = epint;

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);
 800320e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4798      	blx	r3
 8003218:	e7d3      	b.n	80031c2 <otg_epout_handler+0x22>
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
          (osp->rxsize < osp->totsize)) {
        osp->rxsize = osp->totsize - osp->rxsize;
 800321a:	1a12      	subs	r2, r2, r0
        osp->rxcnt  = 0;
 800321c:	e883 0024 	stmia.w	r3, {r2, r5}
 8003220:	2320      	movs	r3, #32
 8003222:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8003226:	f004 fabb 	bl	80077a0 <_dbg_check_lock_from_isr>
        osalSysLockFromISR();
        usb_lld_start_out(usbp, ep);
 800322a:	4630      	mov	r0, r6
 800322c:	4629      	mov	r1, r5
 800322e:	f004 fd77 	bl	8007d20 <usb_lld_start_out>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8003232:	f004 fa9d 	bl	8007770 <_dbg_check_unlock_from_isr>
 8003236:	f385 8811 	msr	BASEPRI, r5
 800323a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800323e:	bf00      	nop

08003240 <otg_epin_handler>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8003240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8003244:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8003246:	eb06 1341 	add.w	r3, r6, r1, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800324a:	4607      	mov	r7, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800324c:	f8d3 4908 	ldr.w	r4, [r3, #2312]	; 0x908

  otgp->ie[ep].DIEPINT = epint;
 8003250:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908

  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8003254:	07e3      	lsls	r3, r4, #31
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8003256:	460d      	mov	r5, r1
  otgp->ie[ep].DIEPINT = epint;

  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8003258:	d503      	bpl.n	8003262 <otg_epin_handler+0x22>
 800325a:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
 800325e:	07da      	lsls	r2, r3, #31
 8003260:	d409      	bmi.n	8003276 <otg_epin_handler+0x36>
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 8003262:	0623      	lsls	r3, r4, #24
 8003264:	d505      	bpl.n	8003272 <otg_epin_handler+0x32>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8003266:	f8d6 2834 	ldr.w	r2, [r6, #2100]	; 0x834
 800326a:	2301      	movs	r3, #1
 800326c:	40ab      	lsls	r3, r5
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 800326e:	4213      	tst	r3, r2
 8003270:	d119      	bne.n	80032a6 <otg_epin_handler+0x66>
 8003272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
    /* Transmit transfer complete.*/
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003276:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800327a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800327e:	f8de 3014 	ldr.w	r3, [lr, #20]

    if (isp->txsize < isp->totsize) {
 8003282:	f8d3 c000 	ldr.w	ip, [r3]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	4594      	cmp	ip, r2
 800328a:	d312      	bcc.n	80032b2 <otg_epin_handler+0x72>
      usb_lld_start_in(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
 800328c:	8902      	ldrh	r2, [r0, #8]
 800328e:	f8de c008 	ldr.w	ip, [lr, #8]
 8003292:	2301      	movs	r3, #1
 8003294:	408b      	lsls	r3, r1
 8003296:	ea22 0303 	bic.w	r3, r2, r3
 800329a:	8103      	strh	r3, [r0, #8]
 800329c:	f1bc 0f00 	cmp.w	ip, #0
 80032a0:	d0df      	beq.n	8003262 <otg_epin_handler+0x22>
 80032a2:	47e0      	blx	ip
 80032a4:	e7dd      	b.n	8003262 <otg_epin_handler+0x22>
    }
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* TX FIFO empty or emptying.*/
    otg_txfifo_handler(usbp, ep);
 80032a6:	4638      	mov	r0, r7
 80032a8:	4629      	mov	r1, r5
  }
}
 80032aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    }
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* TX FIFO empty or emptying.*/
    otg_txfifo_handler(usbp, ep);
 80032ae:	f7ff bf1f 	b.w	80030f0 <otg_txfifo_handler>

    if (isp->txsize < isp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 80032b2:	ebcc 0202 	rsb	r2, ip, r2
      isp->txcnt  = 0;
 80032b6:	f04f 0800 	mov.w	r8, #0
 80032ba:	e883 0104 	stmia.w	r3, {r2, r8}
 80032be:	2320      	movs	r3, #32
 80032c0:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80032c4:	f004 fa6c 	bl	80077a0 <_dbg_check_lock_from_isr>
      osalSysLockFromISR();
      usb_lld_start_in(usbp, ep);
 80032c8:	4638      	mov	r0, r7
 80032ca:	4629      	mov	r1, r5
 80032cc:	f004 fcd0 	bl	8007c70 <usb_lld_start_in>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80032d0:	f004 fa4e 	bl	8007770 <_dbg_check_unlock_from_isr>
 80032d4:	f388 8811 	msr	BASEPRI, r8
 80032d8:	e7c3      	b.n	8003262 <otg_epin_handler+0x22>
 80032da:	bf00      	nop
 80032dc:	0000      	movs	r0, r0
	...

080032e0 <usb_lld_serve_interrupt.lto_priv.113>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void usb_lld_serve_interrupt(USBDriver *usbp) {
 80032e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  stm32_otg_t *otgp = usbp->otg;
 80032e4:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
 80032e6:	6973      	ldr	r3, [r6, #20]
  sts &= otgp->GINTMSK;
 80032e8:	69b7      	ldr	r7, [r6, #24]
 80032ea:	401f      	ands	r7, r3
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 80032ec:	f417 5880 	ands.w	r8, r7, #4096	; 0x1000
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void usb_lld_serve_interrupt(USBDriver *usbp) {
 80032f0:	4605      	mov	r5, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;
 80032f2:	6177      	str	r7, [r6, #20]

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 80032f4:	f040 814b 	bne.w	800358e <usb_lld_serve_interrupt.lto_priv.113+0x2ae>
    /* Preventing execution of more handlers, the core has been reset.*/
    return;
  }

  /* Wake-up handling.*/
  if (sts & GINTSTS_WKUPINT) {
 80032f8:	2f00      	cmp	r7, #0
 80032fa:	f2c0 812c 	blt.w	8003556 <usb_lld_serve_interrupt.lto_priv.113+0x276>

    _usb_wakeup(usbp);
  }

  /* Suspend handling.*/
  if (sts & GINTSTS_USBSUSP) {
 80032fe:	053b      	lsls	r3, r7, #20
 8003300:	d53f      	bpl.n	8003382 <usb_lld_serve_interrupt.lto_priv.113+0xa2>
 8003302:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003304:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8003306:	f8d3 c008 	ldr.w	ip, [r3, #8]

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800330a:	2100      	movs	r1, #0

    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
    }

    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800330c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003310:	e00c      	b.n	800332c <usb_lld_serve_interrupt.lto_priv.113+0x4c>

    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
    }

    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 8003312:	f8d2 eb00 	ldr.w	lr, [r2, #2816]	; 0xb00
 8003316:	f1be 0f00 	cmp.w	lr, #0
 800331a:	db19      	blt.n	8003350 <usb_lld_serve_interrupt.lto_priv.113+0x70>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
    }

    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800331c:	4403      	add	r3, r0

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800331e:	3101      	adds	r1, #1
 8003320:	458c      	cmp	ip, r1

    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
    }

    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003322:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003326:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800332a:	d318      	bcc.n	800335e <usb_lld_serve_interrupt.lto_priv.113+0x7e>
 800332c:	014b      	lsls	r3, r1, #5
 800332e:	18c2      	adds	r2, r0, r3

    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8003330:	f8d2 e900 	ldr.w	lr, [r2, #2304]	; 0x900
 8003334:	f1be 0f00 	cmp.w	lr, #0
 8003338:	daeb      	bge.n	8003312 <usb_lld_serve_interrupt.lto_priv.113+0x32>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 800333a:	f8d2 e900 	ldr.w	lr, [r2, #2304]	; 0x900
 800333e:	f04e 4e80 	orr.w	lr, lr, #1073741824	; 0x40000000
 8003342:	f8c2 e900 	str.w	lr, [r2, #2304]	; 0x900
    }

    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 8003346:	f8d2 eb00 	ldr.w	lr, [r2, #2816]	; 0xb00
 800334a:	f1be 0f00 	cmp.w	lr, #0
 800334e:	dae5      	bge.n	800331c <usb_lld_serve_interrupt.lto_priv.113+0x3c>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 8003350:	f8d2 eb00 	ldr.w	lr, [r2, #2816]	; 0xb00
 8003354:	f04e 4e80 	orr.w	lr, lr, #1073741824	; 0x40000000
 8003358:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
 800335c:	e7de      	b.n	800331c <usb_lld_serve_interrupt.lto_priv.113+0x3c>
  /* State transition.*/
  usbp->saved_state = usbp->state;
  usbp->state       = USB_SUSPENDED;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800335e:	686b      	ldr	r3, [r5, #4]
 */
void _usb_suspend(USBDriver *usbp) {
  /* No state change, suspend always returns to previous state. */

  /* State transition.*/
  usbp->saved_state = usbp->state;
 8003360:	7829      	ldrb	r1, [r5, #0]
  usbp->state       = USB_SUSPENDED;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8003362:	681b      	ldr	r3, [r3, #0]
    }

    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  }
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8003364:	f04f 1401 	mov.w	r4, #65537	; 0x10001
void _usb_suspend(USBDriver *usbp) {
  /* No state change, suspend always returns to previous state. */

  /* State transition.*/
  usbp->saved_state = usbp->state;
  usbp->state       = USB_SUSPENDED;
 8003368:	2205      	movs	r2, #5
 800336a:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
 */
void _usb_suspend(USBDriver *usbp) {
  /* No state change, suspend always returns to previous state. */

  /* State transition.*/
  usbp->saved_state = usbp->state;
 800336e:	f885 1068 	strb.w	r1, [r5, #104]	; 0x68
  usbp->state       = USB_SUSPENDED;
 8003372:	702a      	strb	r2, [r5, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8003374:	b113      	cbz	r3, 800337c <usb_lld_serve_interrupt.lto_priv.113+0x9c>
 8003376:	4628      	mov	r0, r5
 8003378:	2104      	movs	r1, #4
 800337a:	4798      	blx	r3

  /* Terminating all pending transactions.*/
  usbp->transmitting  = 0;
 800337c:	2300      	movs	r3, #0
 800337e:	812b      	strh	r3, [r5, #8]
  usbp->receiving     = 0;
 8003380:	816b      	strh	r3, [r5, #10]
    /* Default suspend action.*/
    _usb_suspend(usbp);
  }

  /* Enumeration done.*/
  if (sts & GINTSTS_ENUMDNE) {
 8003382:	04bc      	lsls	r4, r7, #18
 8003384:	d50c      	bpl.n	80033a0 <usb_lld_serve_interrupt.lto_priv.113+0xc0>
    /* Full or High speed timing selection.*/
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 8003386:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 800338a:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 800338e:	68f3      	ldr	r3, [r6, #12]
 8003390:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8003394:	bf0c      	ite	eq
 8003396:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
                      GUSBCFG_TRDT(TRDT_VALUE_HS);
    }
    else {
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 800339a:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
 800339e:	60f3      	str	r3, [r6, #12]
                      GUSBCFG_TRDT(TRDT_VALUE_FS);
    }
  }

  /* SOF interrupt handling.*/
  if (sts & GINTSTS_SOF) {
 80033a0:	0738      	lsls	r0, r7, #28
 80033a2:	d432      	bmi.n	800340a <usb_lld_serve_interrupt.lto_priv.113+0x12a>
    _usb_isr_invoke_sof_cb(usbp);
  }

  /* Isochronous IN failed handling */
  if (sts & GINTSTS_IISOIXFR) {
 80033a4:	02fa      	lsls	r2, r7, #11
 80033a6:	d438      	bmi.n	800341a <usb_lld_serve_interrupt.lto_priv.113+0x13a>
    otg_isoc_in_failed_handler(usbp);
  }

  /* Isochronous OUT failed handling */
  if (sts & GINTSTS_IISOOXFR) {
 80033a8:	02bb      	lsls	r3, r7, #10
 80033aa:	f100 80a8 	bmi.w	80034fe <usb_lld_serve_interrupt.lto_priv.113+0x21e>
    otg_isoc_out_failed_handler(usbp);
  }

  /* Performing the whole FIFO emptying in the ISR, it is advised to keep
     this IRQ at a very low priority level.*/
  if ((sts & GINTSTS_RXFLVL) != 0U) {
 80033ae:	06fb      	lsls	r3, r7, #27
 80033b0:	d479      	bmi.n	80034a6 <usb_lld_serve_interrupt.lto_priv.113+0x1c6>
    otg_rxfifo_handler(usbp);
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
 80033b2:	f8d6 4818 	ldr.w	r4, [r6, #2072]	; 0x818
  if (sts & GINTSTS_OEPINT) {
 80033b6:	033e      	lsls	r6, r7, #12
 80033b8:	d511      	bpl.n	80033de <usb_lld_serve_interrupt.lto_priv.113+0xfe>
    if (src & (1 << 16))
 80033ba:	03e0      	lsls	r0, r4, #15
 80033bc:	f100 81b5 	bmi.w	800372a <usb_lld_serve_interrupt.lto_priv.113+0x44a>
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
 80033c0:	03a1      	lsls	r1, r4, #14
 80033c2:	f100 81b9 	bmi.w	8003738 <usb_lld_serve_interrupt.lto_priv.113+0x458>
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
 80033c6:	0362      	lsls	r2, r4, #13
 80033c8:	f100 81bd 	bmi.w	8003746 <usb_lld_serve_interrupt.lto_priv.113+0x466>
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
 80033cc:	0323      	lsls	r3, r4, #12
 80033ce:	f100 81c1 	bmi.w	8003754 <usb_lld_serve_interrupt.lto_priv.113+0x474>
      otg_epout_handler(usbp, 3);
#if USB_MAX_ENDPOINTS >= 4
    if (src & (1 << 20))
 80033d2:	02e6      	lsls	r6, r4, #11
 80033d4:	f100 81c5 	bmi.w	8003762 <usb_lld_serve_interrupt.lto_priv.113+0x482>
      otg_epout_handler(usbp, 4);
#endif
#if USB_MAX_ENDPOINTS >= 5
    if (src & (1 << 21))
 80033d8:	02a0      	lsls	r0, r4, #10
 80033da:	f100 815b 	bmi.w	8003694 <usb_lld_serve_interrupt.lto_priv.113+0x3b4>
#if USB_MAX_ENDPOINTS >= 8
    if (src & (1 << 24))
      otg_epout_handler(usbp, 8);
#endif
  }
  if (sts & GINTSTS_IEPINT) {
 80033de:	0379      	lsls	r1, r7, #13
 80033e0:	d511      	bpl.n	8003406 <usb_lld_serve_interrupt.lto_priv.113+0x126>
    if (src & (1 << 0))
 80033e2:	07e2      	lsls	r2, r4, #31
 80033e4:	f100 819c 	bmi.w	8003720 <usb_lld_serve_interrupt.lto_priv.113+0x440>
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
 80033e8:	07a3      	lsls	r3, r4, #30
 80033ea:	f100 8194 	bmi.w	8003716 <usb_lld_serve_interrupt.lto_priv.113+0x436>
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
 80033ee:	0767      	lsls	r7, r4, #29
 80033f0:	f100 817e 	bmi.w	80036f0 <usb_lld_serve_interrupt.lto_priv.113+0x410>
      otg_epin_handler(usbp, 2);
    if (src & (1 << 3))
 80033f4:	0726      	lsls	r6, r4, #28
 80033f6:	f100 8182 	bmi.w	80036fe <usb_lld_serve_interrupt.lto_priv.113+0x41e>
      otg_epin_handler(usbp, 3);
#if USB_MAX_ENDPOINTS >= 4
    if (src & (1 << 4))
 80033fa:	06e0      	lsls	r0, r4, #27
 80033fc:	f100 8186 	bmi.w	800370c <usb_lld_serve_interrupt.lto_priv.113+0x42c>
      otg_epin_handler(usbp, 4);
#endif
#if USB_MAX_ENDPOINTS >= 5
    if (src & (1 << 5))
 8003400:	06a1      	lsls	r1, r4, #26
 8003402:	f100 8141 	bmi.w	8003688 <usb_lld_serve_interrupt.lto_priv.113+0x3a8>
 8003406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }

  /* SOF interrupt handling.*/
  if (sts & GINTSTS_SOF) {
    _usb_isr_invoke_sof_cb(usbp);
 800340a:	686b      	ldr	r3, [r5, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0c8      	beq.n	80033a4 <usb_lld_serve_interrupt.lto_priv.113+0xc4>
 8003412:	4628      	mov	r0, r5
 8003414:	4798      	blx	r3
  }

  /* Isochronous IN failed handling */
  if (sts & GINTSTS_IISOIXFR) {
 8003416:	02fa      	lsls	r2, r7, #11
 8003418:	d5c6      	bpl.n	80033a8 <usb_lld_serve_interrupt.lto_priv.113+0xc8>
 *
 * @notapi
 */
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 800341a:	f8d5 a06c 	ldr.w	sl, [r5, #108]	; 0x6c
 800341e:	2400      	movs	r4, #0

      /* Flush FIFO */
      otg_txfifo_flush(usbp, ep);

      /* Prepare data for next frame */
      _usb_isr_invoke_in_cb(usbp, ep);
 8003420:	f04f 0901 	mov.w	r9, #1
 8003424:	e006      	b.n	8003434 <usb_lld_serve_interrupt.lto_priv.113+0x154>
 */
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8003426:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003428:	3401      	adds	r4, #1
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	b2e4      	uxtb	r4, r4
 800342e:	429c      	cmp	r4, r3
 8003430:	46a0      	mov	r8, r4
 8003432:	d8b9      	bhi.n	80033a8 <usb_lld_serve_interrupt.lto_priv.113+0xc8>
 8003434:	eb0a 1244 	add.w	r2, sl, r4, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8003438:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800343c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003440:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003444:	d1ef      	bne.n	8003426 <usb_lld_serve_interrupt.lto_priv.113+0x146>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 8003446:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 800344a:	2b00      	cmp	r3, #0
 800344c:	daeb      	bge.n	8003426 <usb_lld_serve_interrupt.lto_priv.113+0x146>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
      /* Endpoint enabled -> ISOC IN transfer failed */
      /* Disable endpoint */
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 800344e:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8003452:	f043 4390 	orr.w	r3, r3, #1207959552	; 0x48000000
 8003456:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 800345a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800345e:	2b00      	cmp	r3, #0
 8003460:	dbfb      	blt.n	800345a <usb_lld_serve_interrupt.lto_priv.113+0x17a>
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003462:	ea4f 1888 	mov.w	r8, r8, lsl #6
 8003466:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8003468:	f048 0320 	orr.w	r3, r8, #32
 800346c:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800346e:	6913      	ldr	r3, [r2, #16]
 8003470:	0699      	lsls	r1, r3, #26
 8003472:	d4fc      	bmi.n	800346e <usb_lld_serve_interrupt.lto_priv.113+0x18e>
 8003474:	2012      	movs	r0, #18
 8003476:	f004 f8fb 	bl	8007670 <chSysPolledDelayX>

      /* Flush FIFO */
      otg_txfifo_flush(usbp, ep);

      /* Prepare data for next frame */
      _usb_isr_invoke_in_cb(usbp, ep);
 800347a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800347e:	892a      	ldrh	r2, [r5, #8]
 8003480:	68d9      	ldr	r1, [r3, #12]
 8003482:	fa09 f304 	lsl.w	r3, r9, r4
 8003486:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800348a:	ea22 0303 	bic.w	r3, r2, r3
 800348e:	812b      	strh	r3, [r5, #8]
 8003490:	f1bc 0f00 	cmp.w	ip, #0
 8003494:	d002      	beq.n	800349c <usb_lld_serve_interrupt.lto_priv.113+0x1bc>
 8003496:	4628      	mov	r0, r5
 8003498:	4621      	mov	r1, r4
 800349a:	47e0      	blx	ip

      /* TX FIFO empty or emptying.*/
      otg_txfifo_handler(usbp, ep);
 800349c:	4628      	mov	r0, r5
 800349e:	4621      	mov	r1, r4
 80034a0:	f7ff fe26 	bl	80030f0 <otg_txfifo_handler>
 80034a4:	e7bf      	b.n	8003426 <usb_lld_serve_interrupt.lto_priv.113+0x146>
 */
static void otg_rxfifo_handler(USBDriver *usbp) {
  uint32_t sts, cnt, ep;

  /* Popping the event word out of the RX FIFO.*/
  sts = usbp->otg->GRXSTSP;
 80034a6:	f8d5 e06c 	ldr.w	lr, [r5, #108]	; 0x6c
 80034aa:	f8de 3020 	ldr.w	r3, [lr, #32]

  /* Event details.*/
  cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
  ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;

  switch (sts & GRXSTSP_PKTSTS_MASK) {
 80034ae:	f403 11f0 	and.w	r1, r3, #1966080	; 0x1e0000
 80034b2:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000

  /* Popping the event word out of the RX FIFO.*/
  sts = usbp->otg->GRXSTSP;

  /* Event details.*/
  cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 80034b6:	f3c3 120a 	ubfx	r2, r3, #4, #11
  ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 80034ba:	f003 030f 	and.w	r3, r3, #15

  switch (sts & GRXSTSP_PKTSTS_MASK) {
 80034be:	f000 80f1 	beq.w	80036a4 <usb_lld_serve_interrupt.lto_priv.113+0x3c4>
 80034c2:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 80034c6:	f47f af74 	bne.w	80033b2 <usb_lld_serve_interrupt.lto_priv.113+0xd2>
  case GRXSTSP_SETUP_DATA:
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 80034ca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	6a18      	ldr	r0, [r3, #32]
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 80034d2:	2a00      	cmp	r2, #0
 80034d4:	f43f af6d 	beq.w	80033b2 <usb_lld_serve_interrupt.lto_priv.113+0xd2>
 80034d8:	2100      	movs	r1, #0
    if ((i & 3) == 0) {
      w = *fifop;
 80034da:	f50e 5e80 	add.w	lr, lr, #4096	; 0x1000
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 80034de:	460b      	mov	r3, r1
 80034e0:	e003      	b.n	80034ea <usb_lld_serve_interrupt.lto_priv.113+0x20a>
    }
    if (i < max) {
      *buf++ = (uint8_t)w;
      w >>= 8;
    }
    i++;
 80034e2:	3301      	adds	r3, #1
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 80034e4:	4293      	cmp	r3, r2
 80034e6:	f43f af64 	beq.w	80033b2 <usb_lld_serve_interrupt.lto_priv.113+0xd2>
    if ((i & 3) == 0) {
 80034ea:	079c      	lsls	r4, r3, #30
      w = *fifop;
 80034ec:	bf08      	it	eq
 80034ee:	f8de 1000 	ldreq.w	r1, [lr]
    }
    if (i < max) {
 80034f2:	2b07      	cmp	r3, #7
 80034f4:	d8f5      	bhi.n	80034e2 <usb_lld_serve_interrupt.lto_priv.113+0x202>
      *buf++ = (uint8_t)w;
 80034f6:	7001      	strb	r1, [r0, #0]
      w >>= 8;
 80034f8:	0a09      	lsrs	r1, r1, #8
  while (i < n) {
    if ((i & 3) == 0) {
      w = *fifop;
    }
    if (i < max) {
      *buf++ = (uint8_t)w;
 80034fa:	3001      	adds	r0, #1
 80034fc:	e7f1      	b.n	80034e2 <usb_lld_serve_interrupt.lto_priv.113+0x202>
 *
 * @notapi
 */
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 80034fe:	f8d5 806c 	ldr.w	r8, [r5, #108]	; 0x6c
 *
 * @notapi
 */
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 8003502:	2400      	movs	r4, #0
      /* CHTODO:: Core stucks here */
      /*otgp->oe[ep].DOEPCTL |= (DOEPCTL_EPDIS | DOEPCTL_SNAK);
      while (otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA)
        ;*/
      /* Prepare transfer for next frame.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 8003504:	f04f 0901 	mov.w	r9, #1
 8003508:	e006      	b.n	8003518 <usb_lld_serve_interrupt.lto_priv.113+0x238>
 */
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800350a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800350c:	3401      	adds	r4, #1
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	b2e4      	uxtb	r4, r4
 8003512:	429c      	cmp	r4, r3
 8003514:	f63f af4b 	bhi.w	80033ae <usb_lld_serve_interrupt.lto_priv.113+0xce>
 8003518:	eb08 1244 	add.w	r2, r8, r4, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 800351c:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8003520:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003524:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003528:	d1ef      	bne.n	800350a <usb_lld_serve_interrupt.lto_priv.113+0x22a>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 800352a:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 800352e:	2b00      	cmp	r3, #0
 8003530:	daeb      	bge.n	800350a <usb_lld_serve_interrupt.lto_priv.113+0x22a>
      /* CHTODO:: Core stucks here */
      /*otgp->oe[ep].DOEPCTL |= (DOEPCTL_EPDIS | DOEPCTL_SNAK);
      while (otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA)
        ;*/
      /* Prepare transfer for next frame.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 8003532:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003536:	896a      	ldrh	r2, [r5, #10]
 8003538:	68d9      	ldr	r1, [r3, #12]
 800353a:	fa09 f304 	lsl.w	r3, r9, r4
 800353e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8003542:	ea22 0303 	bic.w	r3, r2, r3
 8003546:	816b      	strh	r3, [r5, #10]
 8003548:	f1bc 0f00 	cmp.w	ip, #0
 800354c:	d0dd      	beq.n	800350a <usb_lld_serve_interrupt.lto_priv.113+0x22a>
 800354e:	4628      	mov	r0, r5
 8003550:	4621      	mov	r1, r4
 8003552:	47e0      	blx	ip
 8003554:	e7d9      	b.n	800350a <usb_lld_serve_interrupt.lto_priv.113+0x22a>

  /* Wake-up handling.*/
  if (sts & GINTSTS_WKUPINT) {
    /* If clocks are gated off, turn them back on (may be the case if
       coming out of suspend mode).*/
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 8003556:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
 800355a:	079a      	lsls	r2, r3, #30
 800355c:	d005      	beq.n	800356a <usb_lld_serve_interrupt.lto_priv.113+0x28a>
      /* Set to zero to un-gate the USB core clocks.*/
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 800355e:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
 8003562:	f023 0303 	bic.w	r3, r3, #3
 8003566:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00

  /* State transition, returning to the previous state.*/
  usbp->state = usbp->saved_state;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 800356a:	686a      	ldr	r2, [r5, #4]
    }

    /* Clear the Remote Wake-up Signaling.*/
    otgp->DCTL &= ~DCTL_RWUSIG;
 800356c:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8003570:	6812      	ldr	r2, [r2, #0]
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {

  /* State transition, returning to the previous state.*/
  usbp->state = usbp->saved_state;
 8003572:	f895 1068 	ldrb.w	r1, [r5, #104]	; 0x68
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
 800357e:	7029      	strb	r1, [r5, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8003580:	2a00      	cmp	r2, #0
 8003582:	f43f aebc 	beq.w	80032fe <usb_lld_serve_interrupt.lto_priv.113+0x1e>
 8003586:	4628      	mov	r0, r5
 8003588:	2105      	movs	r1, #5
 800358a:	4790      	blx	r2
 800358c:	e6b7      	b.n	80032fe <usb_lld_serve_interrupt.lto_priv.113+0x1e>

  /* State transition.*/
  usbp->state         = USB_READY;

  /* Resetting internal state.*/
  usbp->status        = 0;
 800358e:	2300      	movs	r3, #0
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 8003590:	2102      	movs	r1, #2
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003592:	2220      	movs	r2, #32
 8003594:	7001      	strb	r1, [r0, #0]

  /* Resetting internal state.*/
  usbp->status        = 0;
 8003596:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
  usbp->address       = 0;
 800359a:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
  usbp->configuration = 0;
 800359e:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
  usbp->transmitting  = 0;
 80035a2:	8103      	strh	r3, [r0, #8]
  usbp->receiving     = 0;
 80035a4:	8143      	strh	r3, [r0, #10]
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
      osalSysUnlockFromISR();
    }
#endif
    usbp->epc[i] = NULL;
 80035a6:	60c3      	str	r3, [r0, #12]
 80035a8:	6103      	str	r3, [r0, #16]
 80035aa:	6143      	str	r3, [r0, #20]
 80035ac:	6183      	str	r3, [r0, #24]
 80035ae:	61c3      	str	r3, [r0, #28]
 80035b0:	6203      	str	r3, [r0, #32]
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_STP_WAITING;
 80035b2:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 80035b6:	6132      	str	r2, [r6, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 80035b8:	6933      	ldr	r3, [r6, #16]
 80035ba:	f013 0420 	ands.w	r4, r3, #32
 80035be:	d1fb      	bne.n	80035b8 <usb_lld_serve_interrupt.lto_priv.113+0x2d8>
 80035c0:	2012      	movs	r0, #18
 80035c2:	f004 f855 	bl	8007670 <chSysPolledDelayX>
 80035c6:	f8d5 e070 	ldr.w	lr, [r5, #112]	; 0x70

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
 80035ca:	f8c6 4834 	str.w	r4, [r6, #2100]	; 0x834
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80035ce:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80035d2:	f8de 7008 	ldr.w	r7, [lr, #8]
 80035d6:	f8c6 281c 	str.w	r2, [r6, #2076]	; 0x81c

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80035da:	4623      	mov	r3, r4
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80035dc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80035e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035e4:	eb06 1243 	add.w	r2, r6, r3, lsl #5
  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80035e8:	3301      	adds	r3, #1
 80035ea:	42bb      	cmp	r3, r7
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80035ec:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80035f0:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80035f4:	f8c2 1908 	str.w	r1, [r2, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80035f8:	f8c2 1b08 	str.w	r1, [r2, #2824]	; 0xb08
  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80035fc:	d9f2      	bls.n	80035e4 <usb_lld_serve_interrupt.lto_priv.113+0x304>
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 80035fe:	f8de 3000 	ldr.w	r3, [lr]
 8003602:	676b      	str	r3, [r5, #116]	; 0x74

  /* Resets the FIFO memory allocator.*/
  otg_ram_reset(usbp);

  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8003604:	f8de 2000 	ldr.w	r2, [lr]
 8003608:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800360a:	6272      	str	r2, [r6, #36]	; 0x24
}

static void otg_rxfifo_flush(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 800360c:	2210      	movs	r2, #16
 800360e:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 8003610:	6919      	ldr	r1, [r3, #16]
 8003612:	f011 0410 	ands.w	r4, r1, #16
 8003616:	d1fb      	bne.n	8003610 <usb_lld_serve_interrupt.lto_priv.113+0x330>
 8003618:	2012      	movs	r0, #18
 800361a:	f004 f829 	bl	8007670 <chSysPolledDelayX>
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800361e:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
 8003622:	6f28      	ldr	r0, [r5, #112]	; 0x70
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8003624:	4a54      	ldr	r2, [pc, #336]	; (8003778 <usb_lld_serve_interrupt.lto_priv.113+0x498>)
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 8003626:	f8df e158 	ldr.w	lr, [pc, #344]	; 8003780 <usb_lld_serve_interrupt.lto_priv.113+0x4a0>
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800362a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800362e:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8003632:	69b3      	ldr	r3, [r6, #24]
 8003634:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8003638:	2109      	movs	r1, #9

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800363a:	f043 0310 	orr.w	r3, r3, #16
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 800363e:	f04f 47c0 	mov.w	r7, #1610612736	; 0x60000000

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8003642:	61b3      	str	r3, [r6, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8003644:	f8c6 1810 	str.w	r1, [r6, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 8003648:	f8c6 1814 	str.w	r1, [r6, #2068]	; 0x814

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 800364c:	f8c5 e00c 	str.w	lr, [r5, #12]
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 8003650:	f8c6 7b10 	str.w	r7, [r6, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8003654:	f8c6 2b00 	str.w	r2, [r6, #2816]	; 0xb00
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
 8003658:	f8c6 4910 	str.w	r4, [r6, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 800365c:	f8c6 2900 	str.w	r2, [r6, #2304]	; 0x900
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8003660:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  usbp->pmnext += size;
 8003662:	f103 0210 	add.w	r2, r3, #16
 8003666:	676a      	str	r2, [r5, #116]	; 0x74
  osalDbgAssert(usbp->pmnext <= usbp->otgparams->otg_ram_size,
 8003668:	6841      	ldr	r1, [r0, #4]
 800366a:	428a      	cmp	r2, r1
 800366c:	d87e      	bhi.n	800376c <usb_lld_serve_interrupt.lto_priv.113+0x48c>

  /* Low level reset.*/
  usb_lld_reset(usbp);

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800366e:	686a      	ldr	r2, [r5, #4]
 8003670:	6812      	ldr	r2, [r2, #0]
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8003672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003676:	62b3      	str	r3, [r6, #40]	; 0x28
 8003678:	2a00      	cmp	r2, #0
 800367a:	f43f aec4 	beq.w	8003406 <usb_lld_serve_interrupt.lto_priv.113+0x126>
 800367e:	4628      	mov	r0, r5
 8003680:	4621      	mov	r1, r4
#if USB_MAX_ENDPOINTS >= 8
    if (src & (1 << 8))
      otg_epin_handler(usbp, 8);
#endif
  }
}
 8003682:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003686:	4710      	bx	r2
    if (src & (1 << 4))
      otg_epin_handler(usbp, 4);
#endif
#if USB_MAX_ENDPOINTS >= 5
    if (src & (1 << 5))
      otg_epin_handler(usbp, 5);
 8003688:	4628      	mov	r0, r5
 800368a:	2105      	movs	r1, #5
#if USB_MAX_ENDPOINTS >= 8
    if (src & (1 << 8))
      otg_epin_handler(usbp, 8);
#endif
  }
}
 800368c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (src & (1 << 4))
      otg_epin_handler(usbp, 4);
#endif
#if USB_MAX_ENDPOINTS >= 5
    if (src & (1 << 5))
      otg_epin_handler(usbp, 5);
 8003690:	f7ff bdd6 	b.w	8003240 <otg_epin_handler>
    if (src & (1 << 20))
      otg_epout_handler(usbp, 4);
#endif
#if USB_MAX_ENDPOINTS >= 5
    if (src & (1 << 21))
      otg_epout_handler(usbp, 5);
 8003694:	2105      	movs	r1, #5
 8003696:	4628      	mov	r0, r5
 8003698:	f7ff fd82 	bl	80031a0 <otg_epout_handler>
#if USB_MAX_ENDPOINTS >= 8
    if (src & (1 << 24))
      otg_epout_handler(usbp, 8);
#endif
  }
  if (sts & GINTSTS_IEPINT) {
 800369c:	0379      	lsls	r1, r7, #13
 800369e:	f57f aeb2 	bpl.w	8003406 <usb_lld_serve_interrupt.lto_priv.113+0x126>
 80036a2:	e69e      	b.n	80033e2 <usb_lld_serve_interrupt.lto_priv.113+0x102>
 80036a4:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    break;
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_OUT_DATA:
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                            usbp->epc[ep]->out_state->rxbuf,
 80036a8:	68e3      	ldr	r3, [r4, #12]
 80036aa:	6999      	ldr	r1, [r3, #24]
                            cnt, 8);
    break;
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_OUT_DATA:
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 80036ac:	e891 0108 	ldmia.w	r1, {r3, r8}
 80036b0:	6888      	ldr	r0, [r1, #8]
 80036b2:	ebc8 0c03 	rsb	ip, r8, r3
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 80036b6:	2a00      	cmp	r2, #0
 80036b8:	d05b      	beq.n	8003772 <usb_lld_serve_interrupt.lto_priv.113+0x492>
 80036ba:	2100      	movs	r1, #0
    if ((i & 3) == 0) {
      w = *fifop;
 80036bc:	f50e 5e80 	add.w	lr, lr, #4096	; 0x1000
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 80036c0:	460b      	mov	r3, r1
    if ((i & 3) == 0) {
 80036c2:	f013 0f03 	tst.w	r3, #3
      w = *fifop;
 80036c6:	bf08      	it	eq
 80036c8:	f8de 1000 	ldreq.w	r1, [lr]
    }
    if (i < max) {
 80036cc:	459c      	cmp	ip, r3
 80036ce:	d902      	bls.n	80036d6 <usb_lld_serve_interrupt.lto_priv.113+0x3f6>
      *buf++ = (uint8_t)w;
 80036d0:	7001      	strb	r1, [r0, #0]
      w >>= 8;
 80036d2:	0a09      	lsrs	r1, r1, #8
  while (i < n) {
    if ((i & 3) == 0) {
      w = *fifop;
    }
    if (i < max) {
      *buf++ = (uint8_t)w;
 80036d4:	3001      	adds	r0, #1
      w >>= 8;
    }
    i++;
 80036d6:	3301      	adds	r3, #1
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 80036d8:	4293      	cmp	r3, r2
 80036da:	d1f2      	bne.n	80036c2 <usb_lld_serve_interrupt.lto_priv.113+0x3e2>
 80036dc:	68e3      	ldr	r3, [r4, #12]
 80036de:	6999      	ldr	r1, [r3, #24]
 80036e0:	688b      	ldr	r3, [r1, #8]
 80036e2:	f8d1 8004 	ldr.w	r8, [r1, #4]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                            usbp->epc[ep]->out_state->rxbuf,
                            cnt,
                            usbp->epc[ep]->out_state->rxsize -
                            usbp->epc[ep]->out_state->rxcnt);
    usbp->epc[ep]->out_state->rxbuf += cnt;
 80036e6:	4413      	add	r3, r2
    usbp->epc[ep]->out_state->rxcnt += cnt;
 80036e8:	4442      	add	r2, r8
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                            usbp->epc[ep]->out_state->rxbuf,
                            cnt,
                            usbp->epc[ep]->out_state->rxsize -
                            usbp->epc[ep]->out_state->rxcnt);
    usbp->epc[ep]->out_state->rxbuf += cnt;
 80036ea:	608b      	str	r3, [r1, #8]
    usbp->epc[ep]->out_state->rxcnt += cnt;
 80036ec:	604a      	str	r2, [r1, #4]
 80036ee:	e660      	b.n	80033b2 <usb_lld_serve_interrupt.lto_priv.113+0xd2>
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
      otg_epin_handler(usbp, 2);
 80036f0:	4628      	mov	r0, r5
 80036f2:	2102      	movs	r1, #2
 80036f4:	f7ff fda4 	bl	8003240 <otg_epin_handler>
    if (src & (1 << 3))
 80036f8:	0726      	lsls	r6, r4, #28
 80036fa:	f57f ae7e 	bpl.w	80033fa <usb_lld_serve_interrupt.lto_priv.113+0x11a>
      otg_epin_handler(usbp, 3);
 80036fe:	4628      	mov	r0, r5
 8003700:	2103      	movs	r1, #3
 8003702:	f7ff fd9d 	bl	8003240 <otg_epin_handler>
#if USB_MAX_ENDPOINTS >= 4
    if (src & (1 << 4))
 8003706:	06e0      	lsls	r0, r4, #27
 8003708:	f57f ae7a 	bpl.w	8003400 <usb_lld_serve_interrupt.lto_priv.113+0x120>
      otg_epin_handler(usbp, 4);
 800370c:	4628      	mov	r0, r5
 800370e:	2104      	movs	r1, #4
 8003710:	f7ff fd96 	bl	8003240 <otg_epin_handler>
 8003714:	e674      	b.n	8003400 <usb_lld_serve_interrupt.lto_priv.113+0x120>
  }
  if (sts & GINTSTS_IEPINT) {
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
      otg_epin_handler(usbp, 1);
 8003716:	4628      	mov	r0, r5
 8003718:	2101      	movs	r1, #1
 800371a:	f7ff fd91 	bl	8003240 <otg_epin_handler>
 800371e:	e666      	b.n	80033ee <usb_lld_serve_interrupt.lto_priv.113+0x10e>
      otg_epout_handler(usbp, 8);
#endif
  }
  if (sts & GINTSTS_IEPINT) {
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
 8003720:	4628      	mov	r0, r5
 8003722:	2100      	movs	r1, #0
 8003724:	f7ff fd8c 	bl	8003240 <otg_epin_handler>
 8003728:	e65e      	b.n	80033e8 <usb_lld_serve_interrupt.lto_priv.113+0x108>

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_OEPINT) {
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
 800372a:	2100      	movs	r1, #0
 800372c:	4628      	mov	r0, r5
 800372e:	f7ff fd37 	bl	80031a0 <otg_epout_handler>
    if (src & (1 << 17))
 8003732:	03a1      	lsls	r1, r4, #14
 8003734:	f57f ae47 	bpl.w	80033c6 <usb_lld_serve_interrupt.lto_priv.113+0xe6>
      otg_epout_handler(usbp, 1);
 8003738:	4628      	mov	r0, r5
 800373a:	2101      	movs	r1, #1
 800373c:	f7ff fd30 	bl	80031a0 <otg_epout_handler>
    if (src & (1 << 18))
 8003740:	0362      	lsls	r2, r4, #13
 8003742:	f57f ae43 	bpl.w	80033cc <usb_lld_serve_interrupt.lto_priv.113+0xec>
      otg_epout_handler(usbp, 2);
 8003746:	4628      	mov	r0, r5
 8003748:	2102      	movs	r1, #2
 800374a:	f7ff fd29 	bl	80031a0 <otg_epout_handler>
    if (src & (1 << 19))
 800374e:	0323      	lsls	r3, r4, #12
 8003750:	f57f ae3f 	bpl.w	80033d2 <usb_lld_serve_interrupt.lto_priv.113+0xf2>
      otg_epout_handler(usbp, 3);
 8003754:	4628      	mov	r0, r5
 8003756:	2103      	movs	r1, #3
 8003758:	f7ff fd22 	bl	80031a0 <otg_epout_handler>
#if USB_MAX_ENDPOINTS >= 4
    if (src & (1 << 20))
 800375c:	02e6      	lsls	r6, r4, #11
 800375e:	f57f ae3b 	bpl.w	80033d8 <usb_lld_serve_interrupt.lto_priv.113+0xf8>
      otg_epout_handler(usbp, 4);
 8003762:	4628      	mov	r0, r5
 8003764:	2104      	movs	r1, #4
 8003766:	f7ff fd1b 	bl	80031a0 <otg_epout_handler>
 800376a:	e635      	b.n	80033d8 <usb_lld_serve_interrupt.lto_priv.113+0xf8>
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
  osalDbgAssert(usbp->pmnext <= usbp->otgparams->otg_ram_size,
 800376c:	4803      	ldr	r0, [pc, #12]	; (800377c <usb_lld_serve_interrupt.lto_priv.113+0x49c>)
 800376e:	f003 ff8f 	bl	8007690 <chSysHalt>
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 8003772:	4603      	mov	r3, r0
 8003774:	e7b7      	b.n	80036e6 <usb_lld_serve_interrupt.lto_priv.113+0x406>
 8003776:	bf00      	nop
 8003778:	10008040 	.word	0x10008040
 800377c:	0800cbc4 	.word	0x0800cbc4
 8003780:	0800cb58 	.word	0x0800cb58
	...

08003790 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8003790:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8003792:	480d      	ldr	r0, [pc, #52]	; (80037c8 <Vector158+0x38>)
 8003794:	f003 ff2c 	bl	80075f0 <_trace_isr_enter>
 8003798:	f003 ffd2 	bl	8007740 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <Vector158+0x3c>)
  DMA2->HIFCR = flags << 22U;
  if (dma.streams[15].func)
 800379e:	480c      	ldr	r0, [pc, #48]	; (80037d0 <Vector158+0x40>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80037a0:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22U;
  if (dma.streams[15].func)
 80037a2:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80037a4:	0d89      	lsrs	r1, r1, #22
 80037a6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 80037aa:	058c      	lsls	r4, r1, #22
 80037ac:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 80037ae:	b112      	cbz	r2, 80037b6 <Vector158+0x26>
    dma.streams[15].func(dma.streams[15].param, flags);
 80037b0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80037b4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80037b6:	f003 ffab 	bl	8007710 <_dbg_check_leave_isr>
 80037ba:	4803      	ldr	r0, [pc, #12]	; (80037c8 <Vector158+0x38>)
 80037bc:	f003 fef8 	bl	80075b0 <_trace_isr_leave>
}
 80037c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22U;
  if (dma.streams[15].func)
    dma.streams[15].func(dma.streams[15].param, flags);

  OSAL_IRQ_EPILOGUE();
 80037c4:	f003 ba94 	b.w	8006cf0 <_port_irq_epilogue>
 80037c8:	0800cb4c 	.word	0x0800cb4c
 80037cc:	40026400 	.word	0x40026400
 80037d0:	2000a0d4 	.word	0x2000a0d4
	...

080037e0 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 80037e0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80037e2:	480d      	ldr	r0, [pc, #52]	; (8003818 <Vector154+0x38>)
 80037e4:	f003 ff04 	bl	80075f0 <_trace_isr_enter>
 80037e8:	f003 ffaa 	bl	8007740 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <Vector154+0x3c>)
  DMA2->HIFCR = flags << 16U;
  if (dma.streams[14].func)
 80037ee:	480c      	ldr	r0, [pc, #48]	; (8003820 <Vector154+0x40>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80037f0:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16U;
  if (dma.streams[14].func)
 80037f2:	6f42      	ldr	r2, [r0, #116]	; 0x74
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80037f4:	0c09      	lsrs	r1, r1, #16
 80037f6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 80037fa:	040c      	lsls	r4, r1, #16
 80037fc:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 80037fe:	b10a      	cbz	r2, 8003804 <Vector154+0x24>
    dma.streams[14].func(dma.streams[14].param, flags);
 8003800:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8003802:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8003804:	f003 ff84 	bl	8007710 <_dbg_check_leave_isr>
 8003808:	4803      	ldr	r0, [pc, #12]	; (8003818 <Vector154+0x38>)
 800380a:	f003 fed1 	bl	80075b0 <_trace_isr_leave>
}
 800380e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16U;
  if (dma.streams[14].func)
    dma.streams[14].func(dma.streams[14].param, flags);

  OSAL_IRQ_EPILOGUE();
 8003812:	f003 ba6d 	b.w	8006cf0 <_port_irq_epilogue>
 8003816:	bf00      	nop
 8003818:	0800cb40 	.word	0x0800cb40
 800381c:	40026400 	.word	0x40026400
 8003820:	2000a0d4 	.word	0x2000a0d4
	...

08003830 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8003830:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8003832:	480d      	ldr	r0, [pc, #52]	; (8003868 <Vector150+0x38>)
 8003834:	f003 fedc 	bl	80075f0 <_trace_isr_enter>
 8003838:	f003 ff82 	bl	8007740 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <Vector150+0x3c>)
  DMA2->HIFCR = flags << 6U;
  if (dma.streams[13].func)
 800383e:	480c      	ldr	r0, [pc, #48]	; (8003870 <Vector150+0x40>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003840:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6U;
  if (dma.streams[13].func)
 8003842:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003844:	0989      	lsrs	r1, r1, #6
 8003846:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 800384a:	018c      	lsls	r4, r1, #6
 800384c:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 800384e:	b10a      	cbz	r2, 8003854 <Vector150+0x24>
    dma.streams[13].func(dma.streams[13].param, flags);
 8003850:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8003852:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8003854:	f003 ff5c 	bl	8007710 <_dbg_check_leave_isr>
 8003858:	4803      	ldr	r0, [pc, #12]	; (8003868 <Vector150+0x38>)
 800385a:	f003 fea9 	bl	80075b0 <_trace_isr_leave>
}
 800385e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6U;
  if (dma.streams[13].func)
    dma.streams[13].func(dma.streams[13].param, flags);

  OSAL_IRQ_EPILOGUE();
 8003862:	f003 ba45 	b.w	8006cf0 <_port_irq_epilogue>
 8003866:	bf00      	nop
 8003868:	0800cb34 	.word	0x0800cb34
 800386c:	40026400 	.word	0x40026400
 8003870:	2000a0d4 	.word	0x2000a0d4
	...

08003880 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8003880:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8003882:	480c      	ldr	r0, [pc, #48]	; (80038b4 <Vector130+0x34>)
 8003884:	f003 feb4 	bl	80075f0 <_trace_isr_enter>
 8003888:	f003 ff5a 	bl	8007740 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <Vector130+0x38>)
  DMA2->HIFCR = flags << 0U;
  if (dma.streams[12].func)
 800388e:	480b      	ldr	r0, [pc, #44]	; (80038bc <Vector130+0x3c>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003890:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0U;
  if (dma.streams[12].func)
 8003892:	6e42      	ldr	r2, [r0, #100]	; 0x64
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003894:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8003898:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 800389a:	b10a      	cbz	r2, 80038a0 <Vector130+0x20>
    dma.streams[12].func(dma.streams[12].param, flags);
 800389c:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800389e:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80038a0:	f003 ff36 	bl	8007710 <_dbg_check_leave_isr>
 80038a4:	4803      	ldr	r0, [pc, #12]	; (80038b4 <Vector130+0x34>)
 80038a6:	f003 fe83 	bl	80075b0 <_trace_isr_leave>
}
 80038aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0U;
  if (dma.streams[12].func)
    dma.streams[12].func(dma.streams[12].param, flags);

  OSAL_IRQ_EPILOGUE();
 80038ae:	f003 ba1f 	b.w	8006cf0 <_port_irq_epilogue>
 80038b2:	bf00      	nop
 80038b4:	0800cb28 	.word	0x0800cb28
 80038b8:	40026400 	.word	0x40026400
 80038bc:	2000a0d4 	.word	0x2000a0d4

080038c0 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 80038c0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80038c2:	480d      	ldr	r0, [pc, #52]	; (80038f8 <Vector12C+0x38>)
 80038c4:	f003 fe94 	bl	80075f0 <_trace_isr_enter>
 80038c8:	f003 ff3a 	bl	8007740 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <Vector12C+0x3c>)
  DMA2->LIFCR = flags << 22U;
  if (dma.streams[11].func)
 80038ce:	480c      	ldr	r0, [pc, #48]	; (8003900 <Vector12C+0x40>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80038d0:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22U;
  if (dma.streams[11].func)
 80038d2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80038d4:	0d89      	lsrs	r1, r1, #22
 80038d6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 80038da:	058c      	lsls	r4, r1, #22
 80038dc:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 80038de:	b10a      	cbz	r2, 80038e4 <Vector12C+0x24>
    dma.streams[11].func(dma.streams[11].param, flags);
 80038e0:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80038e2:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80038e4:	f003 ff14 	bl	8007710 <_dbg_check_leave_isr>
 80038e8:	4803      	ldr	r0, [pc, #12]	; (80038f8 <Vector12C+0x38>)
 80038ea:	f003 fe61 	bl	80075b0 <_trace_isr_leave>
}
 80038ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22U;
  if (dma.streams[11].func)
    dma.streams[11].func(dma.streams[11].param, flags);

  OSAL_IRQ_EPILOGUE();
 80038f2:	f003 b9fd 	b.w	8006cf0 <_port_irq_epilogue>
 80038f6:	bf00      	nop
 80038f8:	0800cb1c 	.word	0x0800cb1c
 80038fc:	40026400 	.word	0x40026400
 8003900:	2000a0d4 	.word	0x2000a0d4
	...

08003910 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8003910:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8003912:	480d      	ldr	r0, [pc, #52]	; (8003948 <Vector128+0x38>)
 8003914:	f003 fe6c 	bl	80075f0 <_trace_isr_enter>
 8003918:	f003 ff12 	bl	8007740 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <Vector128+0x3c>)
  DMA2->LIFCR = flags << 16U;
  if (dma.streams[10].func)
 800391e:	480c      	ldr	r0, [pc, #48]	; (8003950 <Vector128+0x40>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003920:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16U;
  if (dma.streams[10].func)
 8003922:	6d42      	ldr	r2, [r0, #84]	; 0x54
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003924:	0c09      	lsrs	r1, r1, #16
 8003926:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 800392a:	040c      	lsls	r4, r1, #16
 800392c:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 800392e:	b10a      	cbz	r2, 8003934 <Vector128+0x24>
    dma.streams[10].func(dma.streams[10].param, flags);
 8003930:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003932:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8003934:	f003 feec 	bl	8007710 <_dbg_check_leave_isr>
 8003938:	4803      	ldr	r0, [pc, #12]	; (8003948 <Vector128+0x38>)
 800393a:	f003 fe39 	bl	80075b0 <_trace_isr_leave>
}
 800393e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16U;
  if (dma.streams[10].func)
    dma.streams[10].func(dma.streams[10].param, flags);

  OSAL_IRQ_EPILOGUE();
 8003942:	f003 b9d5 	b.w	8006cf0 <_port_irq_epilogue>
 8003946:	bf00      	nop
 8003948:	0800cb10 	.word	0x0800cb10
 800394c:	40026400 	.word	0x40026400
 8003950:	2000a0d4 	.word	0x2000a0d4
	...

08003960 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8003960:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8003962:	480d      	ldr	r0, [pc, #52]	; (8003998 <Vector124+0x38>)
 8003964:	f003 fe44 	bl	80075f0 <_trace_isr_enter>
 8003968:	f003 feea 	bl	8007740 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <Vector124+0x3c>)
  DMA2->LIFCR = flags << 6U;
  if (dma.streams[9].func)
 800396e:	480c      	ldr	r0, [pc, #48]	; (80039a0 <Vector124+0x40>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003970:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6U;
  if (dma.streams[9].func)
 8003972:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003974:	0989      	lsrs	r1, r1, #6
 8003976:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 800397a:	018c      	lsls	r4, r1, #6
 800397c:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 800397e:	b10a      	cbz	r2, 8003984 <Vector124+0x24>
    dma.streams[9].func(dma.streams[9].param, flags);
 8003980:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8003982:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8003984:	f003 fec4 	bl	8007710 <_dbg_check_leave_isr>
 8003988:	4803      	ldr	r0, [pc, #12]	; (8003998 <Vector124+0x38>)
 800398a:	f003 fe11 	bl	80075b0 <_trace_isr_leave>
}
 800398e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6U;
  if (dma.streams[9].func)
    dma.streams[9].func(dma.streams[9].param, flags);

  OSAL_IRQ_EPILOGUE();
 8003992:	f003 b9ad 	b.w	8006cf0 <_port_irq_epilogue>
 8003996:	bf00      	nop
 8003998:	0800cb04 	.word	0x0800cb04
 800399c:	40026400 	.word	0x40026400
 80039a0:	2000a0d4 	.word	0x2000a0d4
	...

080039b0 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 80039b0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80039b2:	480c      	ldr	r0, [pc, #48]	; (80039e4 <Vector120+0x34>)
 80039b4:	f003 fe1c 	bl	80075f0 <_trace_isr_enter>
 80039b8:	f003 fec2 	bl	8007740 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <Vector120+0x38>)
  DMA2->LIFCR = flags << 0U;
  if (dma.streams[8].func)
 80039be:	480b      	ldr	r0, [pc, #44]	; (80039ec <Vector120+0x3c>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80039c0:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0U;
  if (dma.streams[8].func)
 80039c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80039c4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 80039c8:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 80039ca:	b10a      	cbz	r2, 80039d0 <Vector120+0x20>
    dma.streams[8].func(dma.streams[8].param, flags);
 80039cc:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80039ce:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80039d0:	f003 fe9e 	bl	8007710 <_dbg_check_leave_isr>
 80039d4:	4803      	ldr	r0, [pc, #12]	; (80039e4 <Vector120+0x34>)
 80039d6:	f003 fdeb 	bl	80075b0 <_trace_isr_leave>
}
 80039da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0U;
  if (dma.streams[8].func)
    dma.streams[8].func(dma.streams[8].param, flags);

  OSAL_IRQ_EPILOGUE();
 80039de:	f003 b987 	b.w	8006cf0 <_port_irq_epilogue>
 80039e2:	bf00      	nop
 80039e4:	0800caf8 	.word	0x0800caf8
 80039e8:	40026400 	.word	0x40026400
 80039ec:	2000a0d4 	.word	0x2000a0d4

080039f0 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80039f0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80039f2:	480d      	ldr	r0, [pc, #52]	; (8003a28 <VectorFC+0x38>)
 80039f4:	f003 fdfc 	bl	80075f0 <_trace_isr_enter>
 80039f8:	f003 fea2 	bl	8007740 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <VectorFC+0x3c>)
  DMA1->HIFCR = flags << 22U;
  if (dma.streams[7].func)
 80039fe:	480c      	ldr	r0, [pc, #48]	; (8003a30 <VectorFC+0x40>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003a00:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22U;
  if (dma.streams[7].func)
 8003a02:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003a04:	0d89      	lsrs	r1, r1, #22
 8003a06:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 8003a0a:	058c      	lsls	r4, r1, #22
 8003a0c:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 8003a0e:	b10a      	cbz	r2, 8003a14 <VectorFC+0x24>
    dma.streams[7].func(dma.streams[7].param, flags);
 8003a10:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003a12:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8003a14:	f003 fe7c 	bl	8007710 <_dbg_check_leave_isr>
 8003a18:	4803      	ldr	r0, [pc, #12]	; (8003a28 <VectorFC+0x38>)
 8003a1a:	f003 fdc9 	bl	80075b0 <_trace_isr_leave>
}
 8003a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22U;
  if (dma.streams[7].func)
    dma.streams[7].func(dma.streams[7].param, flags);

  OSAL_IRQ_EPILOGUE();
 8003a22:	f003 b965 	b.w	8006cf0 <_port_irq_epilogue>
 8003a26:	bf00      	nop
 8003a28:	0800caec 	.word	0x0800caec
 8003a2c:	40026000 	.word	0x40026000
 8003a30:	2000a0d4 	.word	0x2000a0d4
	...

08003a40 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8003a40:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8003a42:	480d      	ldr	r0, [pc, #52]	; (8003a78 <Vector84+0x38>)
 8003a44:	f003 fdd4 	bl	80075f0 <_trace_isr_enter>
 8003a48:	f003 fe7a 	bl	8007740 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <Vector84+0x3c>)
  DMA1->HIFCR = flags << 16U;
  if (dma.streams[6].func)
 8003a4e:	480c      	ldr	r0, [pc, #48]	; (8003a80 <Vector84+0x40>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003a50:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16U;
  if (dma.streams[6].func)
 8003a52:	6b42      	ldr	r2, [r0, #52]	; 0x34
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003a54:	0c09      	lsrs	r1, r1, #16
 8003a56:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 8003a5a:	040c      	lsls	r4, r1, #16
 8003a5c:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 8003a5e:	b10a      	cbz	r2, 8003a64 <Vector84+0x24>
    dma.streams[6].func(dma.streams[6].param, flags);
 8003a60:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003a62:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8003a64:	f003 fe54 	bl	8007710 <_dbg_check_leave_isr>
 8003a68:	4803      	ldr	r0, [pc, #12]	; (8003a78 <Vector84+0x38>)
 8003a6a:	f003 fda1 	bl	80075b0 <_trace_isr_leave>
}
 8003a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16U;
  if (dma.streams[6].func)
    dma.streams[6].func(dma.streams[6].param, flags);

  OSAL_IRQ_EPILOGUE();
 8003a72:	f003 b93d 	b.w	8006cf0 <_port_irq_epilogue>
 8003a76:	bf00      	nop
 8003a78:	0800cae0 	.word	0x0800cae0
 8003a7c:	40026000 	.word	0x40026000
 8003a80:	2000a0d4 	.word	0x2000a0d4
	...

08003a90 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8003a90:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8003a92:	480d      	ldr	r0, [pc, #52]	; (8003ac8 <Vector80+0x38>)
 8003a94:	f003 fdac 	bl	80075f0 <_trace_isr_enter>
 8003a98:	f003 fe52 	bl	8007740 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <Vector80+0x3c>)
  DMA1->HIFCR = flags << 6U;
  if (dma.streams[5].func)
 8003a9e:	480c      	ldr	r0, [pc, #48]	; (8003ad0 <Vector80+0x40>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003aa0:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6U;
  if (dma.streams[5].func)
 8003aa2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003aa4:	0989      	lsrs	r1, r1, #6
 8003aa6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 8003aaa:	018c      	lsls	r4, r1, #6
 8003aac:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 8003aae:	b10a      	cbz	r2, 8003ab4 <Vector80+0x24>
    dma.streams[5].func(dma.streams[5].param, flags);
 8003ab0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003ab2:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8003ab4:	f003 fe2c 	bl	8007710 <_dbg_check_leave_isr>
 8003ab8:	4803      	ldr	r0, [pc, #12]	; (8003ac8 <Vector80+0x38>)
 8003aba:	f003 fd79 	bl	80075b0 <_trace_isr_leave>
}
 8003abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6U;
  if (dma.streams[5].func)
    dma.streams[5].func(dma.streams[5].param, flags);

  OSAL_IRQ_EPILOGUE();
 8003ac2:	f003 b915 	b.w	8006cf0 <_port_irq_epilogue>
 8003ac6:	bf00      	nop
 8003ac8:	0800cc10 	.word	0x0800cc10
 8003acc:	40026000 	.word	0x40026000
 8003ad0:	2000a0d4 	.word	0x2000a0d4
	...

08003ae0 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8003ae0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8003ae2:	480c      	ldr	r0, [pc, #48]	; (8003b14 <Vector7C+0x34>)
 8003ae4:	f003 fd84 	bl	80075f0 <_trace_isr_enter>
 8003ae8:	f003 fe2a 	bl	8007740 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003aec:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <Vector7C+0x38>)
  DMA1->HIFCR = flags << 0U;
  if (dma.streams[4].func)
 8003aee:	480b      	ldr	r0, [pc, #44]	; (8003b1c <Vector7C+0x3c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003af0:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0U;
  if (dma.streams[4].func)
 8003af2:	6a42      	ldr	r2, [r0, #36]	; 0x24
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003af4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 8003af8:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 8003afa:	b10a      	cbz	r2, 8003b00 <Vector7C+0x20>
    dma.streams[4].func(dma.streams[4].param, flags);
 8003afc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003afe:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8003b00:	f003 fe06 	bl	8007710 <_dbg_check_leave_isr>
 8003b04:	4803      	ldr	r0, [pc, #12]	; (8003b14 <Vector7C+0x34>)
 8003b06:	f003 fd53 	bl	80075b0 <_trace_isr_leave>
}
 8003b0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0U;
  if (dma.streams[4].func)
    dma.streams[4].func(dma.streams[4].param, flags);

  OSAL_IRQ_EPILOGUE();
 8003b0e:	f003 b8ef 	b.w	8006cf0 <_port_irq_epilogue>
 8003b12:	bf00      	nop
 8003b14:	0800cc04 	.word	0x0800cc04
 8003b18:	40026000 	.word	0x40026000
 8003b1c:	2000a0d4 	.word	0x2000a0d4

08003b20 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8003b20:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8003b22:	480d      	ldr	r0, [pc, #52]	; (8003b58 <Vector78+0x38>)
 8003b24:	f003 fd64 	bl	80075f0 <_trace_isr_enter>
 8003b28:	f003 fe0a 	bl	8007740 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <Vector78+0x3c>)
  DMA1->LIFCR = flags << 22U;
  if (dma.streams[3].func)
 8003b2e:	480c      	ldr	r0, [pc, #48]	; (8003b60 <Vector78+0x40>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003b30:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22U;
  if (dma.streams[3].func)
 8003b32:	69c2      	ldr	r2, [r0, #28]
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003b34:	0d89      	lsrs	r1, r1, #22
 8003b36:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 8003b3a:	058c      	lsls	r4, r1, #22
 8003b3c:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 8003b3e:	b10a      	cbz	r2, 8003b44 <Vector78+0x24>
    dma.streams[3].func(dma.streams[3].param, flags);
 8003b40:	6a00      	ldr	r0, [r0, #32]
 8003b42:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8003b44:	f003 fde4 	bl	8007710 <_dbg_check_leave_isr>
 8003b48:	4803      	ldr	r0, [pc, #12]	; (8003b58 <Vector78+0x38>)
 8003b4a:	f003 fd31 	bl	80075b0 <_trace_isr_leave>
}
 8003b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22U;
  if (dma.streams[3].func)
    dma.streams[3].func(dma.streams[3].param, flags);

  OSAL_IRQ_EPILOGUE();
 8003b52:	f003 b8cd 	b.w	8006cf0 <_port_irq_epilogue>
 8003b56:	bf00      	nop
 8003b58:	0800cbe0 	.word	0x0800cbe0
 8003b5c:	40026000 	.word	0x40026000
 8003b60:	2000a0d4 	.word	0x2000a0d4
	...

08003b70 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8003b70:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8003b72:	480d      	ldr	r0, [pc, #52]	; (8003ba8 <Vector74+0x38>)
 8003b74:	f003 fd3c 	bl	80075f0 <_trace_isr_enter>
 8003b78:	f003 fde2 	bl	8007740 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <Vector74+0x3c>)
  DMA1->LIFCR = flags << 16U;
  if (dma.streams[2].func)
 8003b7e:	480c      	ldr	r0, [pc, #48]	; (8003bb0 <Vector74+0x40>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003b80:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16U;
  if (dma.streams[2].func)
 8003b82:	6942      	ldr	r2, [r0, #20]
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003b84:	0c09      	lsrs	r1, r1, #16
 8003b86:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 8003b8a:	040c      	lsls	r4, r1, #16
 8003b8c:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 8003b8e:	b10a      	cbz	r2, 8003b94 <Vector74+0x24>
    dma.streams[2].func(dma.streams[2].param, flags);
 8003b90:	6980      	ldr	r0, [r0, #24]
 8003b92:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8003b94:	f003 fdbc 	bl	8007710 <_dbg_check_leave_isr>
 8003b98:	4803      	ldr	r0, [pc, #12]	; (8003ba8 <Vector74+0x38>)
 8003b9a:	f003 fd09 	bl	80075b0 <_trace_isr_leave>
}
 8003b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16U;
  if (dma.streams[2].func)
    dma.streams[2].func(dma.streams[2].param, flags);

  OSAL_IRQ_EPILOGUE();
 8003ba2:	f003 b8a5 	b.w	8006cf0 <_port_irq_epilogue>
 8003ba6:	bf00      	nop
 8003ba8:	0800cbd4 	.word	0x0800cbd4
 8003bac:	40026000 	.word	0x40026000
 8003bb0:	2000a0d4 	.word	0x2000a0d4
	...

08003bc0 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8003bc0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8003bc2:	480d      	ldr	r0, [pc, #52]	; (8003bf8 <Vector70+0x38>)
 8003bc4:	f003 fd14 	bl	80075f0 <_trace_isr_enter>
 8003bc8:	f003 fdba 	bl	8007740 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <Vector70+0x3c>)
  DMA1->LIFCR = flags << 6U;
  if (dma.streams[1].func)
 8003bce:	480c      	ldr	r0, [pc, #48]	; (8003c00 <Vector70+0x40>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003bd0:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6U;
  if (dma.streams[1].func)
 8003bd2:	68c2      	ldr	r2, [r0, #12]
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003bd4:	0989      	lsrs	r1, r1, #6
 8003bd6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 8003bda:	018c      	lsls	r4, r1, #6
 8003bdc:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 8003bde:	b10a      	cbz	r2, 8003be4 <Vector70+0x24>
    dma.streams[1].func(dma.streams[1].param, flags);
 8003be0:	6900      	ldr	r0, [r0, #16]
 8003be2:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8003be4:	f003 fd94 	bl	8007710 <_dbg_check_leave_isr>
 8003be8:	4803      	ldr	r0, [pc, #12]	; (8003bf8 <Vector70+0x38>)
 8003bea:	f003 fce1 	bl	80075b0 <_trace_isr_leave>
}
 8003bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6U;
  if (dma.streams[1].func)
    dma.streams[1].func(dma.streams[1].param, flags);

  OSAL_IRQ_EPILOGUE();
 8003bf2:	f003 b87d 	b.w	8006cf0 <_port_irq_epilogue>
 8003bf6:	bf00      	nop
 8003bf8:	0800cba0 	.word	0x0800cba0
 8003bfc:	40026000 	.word	0x40026000
 8003c00:	2000a0d4 	.word	0x2000a0d4
	...

08003c10 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8003c10:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8003c12:	480c      	ldr	r0, [pc, #48]	; (8003c44 <Vector6C+0x34>)
 8003c14:	f003 fcec 	bl	80075f0 <_trace_isr_enter>
 8003c18:	f003 fd92 	bl	8007740 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003c1c:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <Vector6C+0x38>)
  DMA1->LIFCR = flags << 0U;
  if (dma.streams[0].func)
 8003c1e:	480b      	ldr	r0, [pc, #44]	; (8003c4c <Vector6C+0x3c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003c20:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 0U;
  if (dma.streams[0].func)
 8003c22:	6842      	ldr	r2, [r0, #4]
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003c24:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8003c28:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8003c2a:	b10a      	cbz	r2, 8003c30 <Vector6C+0x20>
    dma.streams[0].func(dma.streams[0].param, flags);
 8003c2c:	6880      	ldr	r0, [r0, #8]
 8003c2e:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8003c30:	f003 fd6e 	bl	8007710 <_dbg_check_leave_isr>
 8003c34:	4803      	ldr	r0, [pc, #12]	; (8003c44 <Vector6C+0x34>)
 8003c36:	f003 fcbb 	bl	80075b0 <_trace_isr_leave>
}
 8003c3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0U;
  if (dma.streams[0].func)
    dma.streams[0].func(dma.streams[0].param, flags);

  OSAL_IRQ_EPILOGUE();
 8003c3e:	f003 b857 	b.w	8006cf0 <_port_irq_epilogue>
 8003c42:	bf00      	nop
 8003c44:	0800cb94 	.word	0x0800cb94
 8003c48:	40026000 	.word	0x40026000
 8003c4c:	2000a0d4 	.word	0x2000a0d4

08003c50 <VectorE0>:
/**
 * @brief   EXTI[10]...EXTI[15] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE0) {
 8003c50:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();
 8003c52:	481f      	ldr	r0, [pc, #124]	; (8003cd0 <VectorE0+0x80>)
 8003c54:	f003 fccc 	bl	80075f0 <_trace_isr_enter>
 8003c58:	f003 fd72 	bl	8007740 <_dbg_check_enter_isr>

  pr = EXTI->PR;
 8003c5c:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <VectorE0+0x84>)
 8003c5e:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8003c60:	681c      	ldr	r4, [r3, #0]
 8003c62:	4014      	ands	r4, r2
 8003c64:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 8003c68:	615a      	str	r2, [r3, #20]

  exti_serve_irq(pr, 10);
 8003c6a:	0562      	lsls	r2, r4, #21
 8003c6c:	d504      	bpl.n	8003c78 <VectorE0+0x28>
 8003c6e:	4a1a      	ldr	r2, [pc, #104]	; (8003cd8 <VectorE0+0x88>)
 8003c70:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003c72:	b10b      	cbz	r3, 8003c78 <VectorE0+0x28>
 8003c74:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8003c76:	4798      	blx	r3
  exti_serve_irq(pr, 11);
 8003c78:	0523      	lsls	r3, r4, #20
 8003c7a:	d504      	bpl.n	8003c86 <VectorE0+0x36>
 8003c7c:	4a16      	ldr	r2, [pc, #88]	; (8003cd8 <VectorE0+0x88>)
 8003c7e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003c80:	b10b      	cbz	r3, 8003c86 <VectorE0+0x36>
 8003c82:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8003c84:	4798      	blx	r3
  exti_serve_irq(pr, 12);
 8003c86:	04e0      	lsls	r0, r4, #19
 8003c88:	d504      	bpl.n	8003c94 <VectorE0+0x44>
 8003c8a:	4a13      	ldr	r2, [pc, #76]	; (8003cd8 <VectorE0+0x88>)
 8003c8c:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8003c8e:	b10b      	cbz	r3, 8003c94 <VectorE0+0x44>
 8003c90:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8003c92:	4798      	blx	r3
  exti_serve_irq(pr, 13);
 8003c94:	04a1      	lsls	r1, r4, #18
 8003c96:	d504      	bpl.n	8003ca2 <VectorE0+0x52>
 8003c98:	4a0f      	ldr	r2, [pc, #60]	; (8003cd8 <VectorE0+0x88>)
 8003c9a:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8003c9c:	b10b      	cbz	r3, 8003ca2 <VectorE0+0x52>
 8003c9e:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8003ca0:	4798      	blx	r3
  exti_serve_irq(pr, 14);
 8003ca2:	0462      	lsls	r2, r4, #17
 8003ca4:	d504      	bpl.n	8003cb0 <VectorE0+0x60>
 8003ca6:	4a0c      	ldr	r2, [pc, #48]	; (8003cd8 <VectorE0+0x88>)
 8003ca8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003caa:	b10b      	cbz	r3, 8003cb0 <VectorE0+0x60>
 8003cac:	6f50      	ldr	r0, [r2, #116]	; 0x74
 8003cae:	4798      	blx	r3
  exti_serve_irq(pr, 15);
 8003cb0:	0423      	lsls	r3, r4, #16
 8003cb2:	d504      	bpl.n	8003cbe <VectorE0+0x6e>
 8003cb4:	4a08      	ldr	r2, [pc, #32]	; (8003cd8 <VectorE0+0x88>)
 8003cb6:	6f93      	ldr	r3, [r2, #120]	; 0x78
 8003cb8:	b10b      	cbz	r3, 8003cbe <VectorE0+0x6e>
 8003cba:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 8003cbc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003cbe:	f003 fd27 	bl	8007710 <_dbg_check_leave_isr>
 8003cc2:	4803      	ldr	r0, [pc, #12]	; (8003cd0 <VectorE0+0x80>)
 8003cc4:	f003 fc74 	bl	80075b0 <_trace_isr_leave>
}
 8003cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  exti_serve_irq(pr, 12);
  exti_serve_irq(pr, 13);
  exti_serve_irq(pr, 14);
  exti_serve_irq(pr, 15);

  OSAL_IRQ_EPILOGUE();
 8003ccc:	f003 b810 	b.w	8006cf0 <_port_irq_epilogue>
 8003cd0:	0800cc1c 	.word	0x0800cc1c
 8003cd4:	40013c00 	.word	0x40013c00
 8003cd8:	20009cf0 	.word	0x20009cf0
 8003cdc:	00000000 	.word	0x00000000

08003ce0 <Vector9C>:
/**
 * @brief   EXTI[5]...EXTI[9] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector9C) {
 8003ce0:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();
 8003ce2:	481c      	ldr	r0, [pc, #112]	; (8003d54 <Vector9C+0x74>)
 8003ce4:	f003 fc84 	bl	80075f0 <_trace_isr_enter>
 8003ce8:	f003 fd2a 	bl	8007740 <_dbg_check_enter_isr>

  pr = EXTI->PR;
 8003cec:	4a1a      	ldr	r2, [pc, #104]	; (8003d58 <Vector9C+0x78>)
 8003cee:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 8003cf0:	6814      	ldr	r4, [r2, #0]
 8003cf2:	401c      	ands	r4, r3
 8003cf4:	f404 7378 	and.w	r3, r4, #992	; 0x3e0
                     (1U << 9));
  EXTI->PR = pr;
 8003cf8:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 5);
 8003cfa:	06a3      	lsls	r3, r4, #26
 8003cfc:	d504      	bpl.n	8003d08 <Vector9C+0x28>
 8003cfe:	4a17      	ldr	r2, [pc, #92]	; (8003d5c <Vector9C+0x7c>)
 8003d00:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003d02:	b10b      	cbz	r3, 8003d08 <Vector9C+0x28>
 8003d04:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8003d06:	4798      	blx	r3
  exti_serve_irq(pr, 6);
 8003d08:	0660      	lsls	r0, r4, #25
 8003d0a:	d504      	bpl.n	8003d16 <Vector9C+0x36>
 8003d0c:	4a13      	ldr	r2, [pc, #76]	; (8003d5c <Vector9C+0x7c>)
 8003d0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003d10:	b10b      	cbz	r3, 8003d16 <Vector9C+0x36>
 8003d12:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8003d14:	4798      	blx	r3
  exti_serve_irq(pr, 7);
 8003d16:	0621      	lsls	r1, r4, #24
 8003d18:	d504      	bpl.n	8003d24 <Vector9C+0x44>
 8003d1a:	4a10      	ldr	r2, [pc, #64]	; (8003d5c <Vector9C+0x7c>)
 8003d1c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003d1e:	b10b      	cbz	r3, 8003d24 <Vector9C+0x44>
 8003d20:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8003d22:	4798      	blx	r3
  exti_serve_irq(pr, 8);
 8003d24:	05e2      	lsls	r2, r4, #23
 8003d26:	d504      	bpl.n	8003d32 <Vector9C+0x52>
 8003d28:	4a0c      	ldr	r2, [pc, #48]	; (8003d5c <Vector9C+0x7c>)
 8003d2a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003d2c:	b10b      	cbz	r3, 8003d32 <Vector9C+0x52>
 8003d2e:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8003d30:	4798      	blx	r3
  exti_serve_irq(pr, 9);
 8003d32:	05a3      	lsls	r3, r4, #22
 8003d34:	d504      	bpl.n	8003d40 <Vector9C+0x60>
 8003d36:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <Vector9C+0x7c>)
 8003d38:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8003d3a:	b10b      	cbz	r3, 8003d40 <Vector9C+0x60>
 8003d3c:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8003d3e:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003d40:	f003 fce6 	bl	8007710 <_dbg_check_leave_isr>
 8003d44:	4803      	ldr	r0, [pc, #12]	; (8003d54 <Vector9C+0x74>)
 8003d46:	f003 fc33 	bl	80075b0 <_trace_isr_leave>
}
 8003d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  exti_serve_irq(pr, 6);
  exti_serve_irq(pr, 7);
  exti_serve_irq(pr, 8);
  exti_serve_irq(pr, 9);

  OSAL_IRQ_EPILOGUE();
 8003d4e:	f002 bfcf 	b.w	8006cf0 <_port_irq_epilogue>
 8003d52:	bf00      	nop
 8003d54:	0800cbf8 	.word	0x0800cbf8
 8003d58:	40013c00 	.word	0x40013c00
 8003d5c:	20009cf0 	.word	0x20009cf0

08003d60 <Vector68>:
/**
 * @brief   EXTI[4] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector68) {
 8003d60:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();
 8003d62:	480d      	ldr	r0, [pc, #52]	; (8003d98 <Vector68+0x38>)
 8003d64:	f003 fc44 	bl	80075f0 <_trace_isr_enter>
 8003d68:	f003 fcea 	bl	8007740 <_dbg_check_enter_isr>

  pr = EXTI->PR;
 8003d6c:	4a0b      	ldr	r2, [pc, #44]	; (8003d9c <Vector68+0x3c>)
 8003d6e:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 8003d70:	6813      	ldr	r3, [r2, #0]
 8003d72:	400b      	ands	r3, r1
 8003d74:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 8003d78:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 4);
 8003d7a:	b123      	cbz	r3, 8003d86 <Vector68+0x26>
 8003d7c:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <Vector68+0x40>)
 8003d7e:	6a13      	ldr	r3, [r2, #32]
 8003d80:	b10b      	cbz	r3, 8003d86 <Vector68+0x26>
 8003d82:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8003d84:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003d86:	f003 fcc3 	bl	8007710 <_dbg_check_leave_isr>
 8003d8a:	4803      	ldr	r0, [pc, #12]	; (8003d98 <Vector68+0x38>)
 8003d8c:	f003 fc10 	bl	80075b0 <_trace_isr_leave>
}
 8003d90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 4);
  EXTI->PR = pr;

  exti_serve_irq(pr, 4);

  OSAL_IRQ_EPILOGUE();
 8003d94:	f002 bfac 	b.w	8006cf0 <_port_irq_epilogue>
 8003d98:	0800cbec 	.word	0x0800cbec
 8003d9c:	40013c00 	.word	0x40013c00
 8003da0:	20009cf0 	.word	0x20009cf0
	...

08003db0 <Vector64>:
/**
 * @brief   EXTI[3] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector64) {
 8003db0:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();
 8003db2:	480d      	ldr	r0, [pc, #52]	; (8003de8 <Vector64+0x38>)
 8003db4:	f003 fc1c 	bl	80075f0 <_trace_isr_enter>
 8003db8:	f003 fcc2 	bl	8007740 <_dbg_check_enter_isr>

  pr = EXTI->PR;
 8003dbc:	4a0b      	ldr	r2, [pc, #44]	; (8003dec <Vector64+0x3c>)
 8003dbe:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 8003dc0:	6813      	ldr	r3, [r2, #0]
 8003dc2:	400b      	ands	r3, r1
 8003dc4:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 8003dc8:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 3);
 8003dca:	b123      	cbz	r3, 8003dd6 <Vector64+0x26>
 8003dcc:	4a08      	ldr	r2, [pc, #32]	; (8003df0 <Vector64+0x40>)
 8003dce:	6993      	ldr	r3, [r2, #24]
 8003dd0:	b10b      	cbz	r3, 8003dd6 <Vector64+0x26>
 8003dd2:	69d0      	ldr	r0, [r2, #28]
 8003dd4:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003dd6:	f003 fc9b 	bl	8007710 <_dbg_check_leave_isr>
 8003dda:	4803      	ldr	r0, [pc, #12]	; (8003de8 <Vector64+0x38>)
 8003ddc:	f003 fbe8 	bl	80075b0 <_trace_isr_leave>
}
 8003de0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 3);
  EXTI->PR = pr;

  exti_serve_irq(pr, 3);

  OSAL_IRQ_EPILOGUE();
 8003de4:	f002 bf84 	b.w	8006cf0 <_port_irq_epilogue>
 8003de8:	0800cbb8 	.word	0x0800cbb8
 8003dec:	40013c00 	.word	0x40013c00
 8003df0:	20009cf0 	.word	0x20009cf0
	...

08003e00 <Vector60>:
/**
 * @brief   EXTI[2] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector60) {
 8003e00:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();
 8003e02:	480d      	ldr	r0, [pc, #52]	; (8003e38 <Vector60+0x38>)
 8003e04:	f003 fbf4 	bl	80075f0 <_trace_isr_enter>
 8003e08:	f003 fc9a 	bl	8007740 <_dbg_check_enter_isr>

  pr = EXTI->PR;
 8003e0c:	4a0b      	ldr	r2, [pc, #44]	; (8003e3c <Vector60+0x3c>)
 8003e0e:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 8003e10:	6813      	ldr	r3, [r2, #0]
 8003e12:	400b      	ands	r3, r1
 8003e14:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 8003e18:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 2);
 8003e1a:	b123      	cbz	r3, 8003e26 <Vector60+0x26>
 8003e1c:	4a08      	ldr	r2, [pc, #32]	; (8003e40 <Vector60+0x40>)
 8003e1e:	6913      	ldr	r3, [r2, #16]
 8003e20:	b10b      	cbz	r3, 8003e26 <Vector60+0x26>
 8003e22:	6950      	ldr	r0, [r2, #20]
 8003e24:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003e26:	f003 fc73 	bl	8007710 <_dbg_check_leave_isr>
 8003e2a:	4803      	ldr	r0, [pc, #12]	; (8003e38 <Vector60+0x38>)
 8003e2c:	f003 fbc0 	bl	80075b0 <_trace_isr_leave>
}
 8003e30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 2);
  EXTI->PR = pr;

  exti_serve_irq(pr, 2);

  OSAL_IRQ_EPILOGUE();
 8003e34:	f002 bf5c 	b.w	8006cf0 <_port_irq_epilogue>
 8003e38:	0800cbac 	.word	0x0800cbac
 8003e3c:	40013c00 	.word	0x40013c00
 8003e40:	20009cf0 	.word	0x20009cf0
	...

08003e50 <Vector5C>:
/**
 * @brief   EXTI[1] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector5C) {
 8003e50:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();
 8003e52:	480d      	ldr	r0, [pc, #52]	; (8003e88 <Vector5C+0x38>)
 8003e54:	f003 fbcc 	bl	80075f0 <_trace_isr_enter>
 8003e58:	f003 fc72 	bl	8007740 <_dbg_check_enter_isr>

  pr = EXTI->PR;
 8003e5c:	4a0b      	ldr	r2, [pc, #44]	; (8003e8c <Vector5C+0x3c>)
 8003e5e:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 8003e60:	6813      	ldr	r3, [r2, #0]
 8003e62:	400b      	ands	r3, r1
 8003e64:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 8003e68:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 1);
 8003e6a:	b123      	cbz	r3, 8003e76 <Vector5C+0x26>
 8003e6c:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <Vector5C+0x40>)
 8003e6e:	6893      	ldr	r3, [r2, #8]
 8003e70:	b10b      	cbz	r3, 8003e76 <Vector5C+0x26>
 8003e72:	68d0      	ldr	r0, [r2, #12]
 8003e74:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003e76:	f003 fc4b 	bl	8007710 <_dbg_check_leave_isr>
 8003e7a:	4803      	ldr	r0, [pc, #12]	; (8003e88 <Vector5C+0x38>)
 8003e7c:	f003 fb98 	bl	80075b0 <_trace_isr_leave>
}
 8003e80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 1);
  EXTI->PR = pr;

  exti_serve_irq(pr, 1);

  OSAL_IRQ_EPILOGUE();
 8003e84:	f002 bf34 	b.w	8006cf0 <_port_irq_epilogue>
 8003e88:	0800cb88 	.word	0x0800cb88
 8003e8c:	40013c00 	.word	0x40013c00
 8003e90:	20009cf0 	.word	0x20009cf0
	...

08003ea0 <Vector58>:
/**
 * @brief   EXTI[0] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector58) {
 8003ea0:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();
 8003ea2:	480d      	ldr	r0, [pc, #52]	; (8003ed8 <Vector58+0x38>)
 8003ea4:	f003 fba4 	bl	80075f0 <_trace_isr_enter>
 8003ea8:	f003 fc4a 	bl	8007740 <_dbg_check_enter_isr>

  pr = EXTI->PR;
 8003eac:	4a0b      	ldr	r2, [pc, #44]	; (8003edc <Vector58+0x3c>)
 8003eae:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 8003eb0:	6813      	ldr	r3, [r2, #0]
 8003eb2:	400b      	ands	r3, r1
 8003eb4:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 8003eb8:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 0);
 8003eba:	b123      	cbz	r3, 8003ec6 <Vector58+0x26>
 8003ebc:	4a08      	ldr	r2, [pc, #32]	; (8003ee0 <Vector58+0x40>)
 8003ebe:	6813      	ldr	r3, [r2, #0]
 8003ec0:	b10b      	cbz	r3, 8003ec6 <Vector58+0x26>
 8003ec2:	6850      	ldr	r0, [r2, #4]
 8003ec4:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003ec6:	f003 fc23 	bl	8007710 <_dbg_check_leave_isr>
 8003eca:	4803      	ldr	r0, [pc, #12]	; (8003ed8 <Vector58+0x38>)
 8003ecc:	f003 fb70 	bl	80075b0 <_trace_isr_leave>
}
 8003ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 0);
  EXTI->PR = pr;

  exti_serve_irq(pr, 0);

  OSAL_IRQ_EPILOGUE();
 8003ed4:	f002 bf0c 	b.w	8006cf0 <_port_irq_epilogue>
 8003ed8:	0800cb7c 	.word	0x0800cb7c
 8003edc:	40013c00 	.word	0x40013c00
 8003ee0:	20009cf0 	.word	0x20009cf0
	...

08003ef0 <eval_gotoifalse>:
    *pc_idx = (*pc_idx) + 3;
  }

}
void eval_gotoifalse(vmc_t *vmc, INT *pc_idx){
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8003ef0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003efa:	eb00 1303 	add.w	r3, r0, r3, lsl #4

  if ((e.value & 1) == 0){ // NOT SET; FALSE
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	07db      	lsls	r3, r3, #31
 8003f02:	d503      	bpl.n	8003f0c <eval_gotoifalse+0x1c>
    eval_goto(vmc, pc_idx);
  } else { // TRUE
    *pc_idx = (*pc_idx) + 3;
 8003f04:	680b      	ldr	r3, [r1, #0]
 8003f06:	3303      	adds	r3, #3
 8003f08:	600b      	str	r3, [r1, #0]
 8003f0a:	4770      	bx	lr

uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
    (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes
 8003f0c:	6a42      	ldr	r2, [r0, #36]	; 0x24
    eval_callrts  // 0x37 : 55
  };


uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
 8003f0e:	680b      	ldr	r3, [r1, #0]
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
    (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes
 8003f10:	4413      	add	r3, r2
 8003f12:	785a      	ldrb	r2, [r3, #1]


uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
 8003f14:	789b      	ldrb	r3, [r3, #2]
}

void eval_goto(vmc_t *vmc, INT *pc_idx) {
  uint16_t label = get_label(vmc, pc_idx);
  // GOTO doesn't store jump address on stack
  *pc_idx = (INT)label;
 8003f16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003f1a:	600b      	str	r3, [r1, #0]
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop

08003f20 <eval_dec>:
  (*pc_idx)++;

}

void eval_dec(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8003f20:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003f24:	3301      	adds	r3, #1
 8003f26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003f2a:	011b      	lsls	r3, r3, #4
  vmc->contexts[vmc->current_running_context_id].env = v;
  (*pc_idx)++;

}

void eval_dec(vmc_t *vmc, INT *pc_idx) {
 8003f2c:	b430      	push	{r4, r5}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8003f2e:	18c4      	adds	r4, r0, r3
  UINT i = e.value;
  INT j = i - 1; // XXX: casting might cause issues for uint when outside int range
                 // dec should work with signed ints
  cam_value_t v = { .value = (UINT)j, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 8003f30:	2500      	movs	r5, #0
}

void eval_dec(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  UINT i = e.value;
  INT j = i - 1; // XXX: casting might cause issues for uint when outside int range
 8003f32:	6862      	ldr	r2, [r4, #4]
                 // dec should work with signed ints
  cam_value_t v = { .value = (UINT)j, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 8003f34:	52c5      	strh	r5, [r0, r3]
}

void eval_dec(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  UINT i = e.value;
  INT j = i - 1; // XXX: casting might cause issues for uint when outside int range
 8003f36:	1e53      	subs	r3, r2, #1
                 // dec should work with signed ints
  cam_value_t v = { .value = (UINT)j, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 8003f38:	6063      	str	r3, [r4, #4]
  (*pc_idx)++;
 8003f3a:	680b      	ldr	r3, [r1, #0]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	600b      	str	r3, [r1, #0]

}
 8003f40:	bc30      	pop	{r4, r5}
 8003f42:	4770      	bx	lr
	...

08003f50 <eval_not>:
  (*pc_idx)++;

}

void eval_not(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8003f50:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003f54:	3301      	adds	r3, #1
 8003f56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003f5a:	011b      	lsls	r3, r3, #4
  vmc->contexts[vmc->current_running_context_id].env = v;
  (*pc_idx)++;

}

void eval_not(vmc_t *vmc, INT *pc_idx) {
 8003f5c:	b430      	push	{r4, r5}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8003f5e:	18c4      	adds	r4, r0, r3
  UINT i = e.value;
  UINT j = i ^ 1;
  cam_value_t v = { .value = j, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 8003f60:	2500      	movs	r5, #0
}

void eval_not(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  UINT i = e.value;
  UINT j = i ^ 1;
 8003f62:	6862      	ldr	r2, [r4, #4]
  cam_value_t v = { .value = j, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 8003f64:	52c5      	strh	r5, [r0, r3]
}

void eval_not(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  UINT i = e.value;
  UINT j = i ^ 1;
 8003f66:	f082 0301 	eor.w	r3, r2, #1
  cam_value_t v = { .value = j, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 8003f6a:	6063      	str	r3, [r4, #4]
  (*pc_idx)++;
 8003f6c:	680b      	ldr	r3, [r1, #0]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	600b      	str	r3, [r1, #0]

}
 8003f72:	bc30      	pop	{r4, r5}
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
	...

08003f80 <eval_neg>:
  vmc->contexts[vmc->current_running_context_id].env = v;
  (*pc_idx)++;
}

void eval_neg(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8003f80:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003f84:	3301      	adds	r3, #1
 8003f86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003f8a:	011b      	lsls	r3, r3, #4
  cam_value_t v = { .value = (UINT)abs_i, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
  (*pc_idx)++;
}

void eval_neg(vmc_t *vmc, INT *pc_idx) {
 8003f8c:	b430      	push	{r4, r5}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8003f8e:	18c4      	adds	r4, r0, r3
  UINT i = e.value;
  INT j = -i; // XXX: might cause underflow for large uints
  cam_value_t v = { .value = (UINT)j, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 8003f90:	2500      	movs	r5, #0
}

void eval_neg(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  UINT i = e.value;
  INT j = -i; // XXX: might cause underflow for large uints
 8003f92:	6862      	ldr	r2, [r4, #4]
  cam_value_t v = { .value = (UINT)j, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 8003f94:	52c5      	strh	r5, [r0, r3]
}

void eval_neg(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  UINT i = e.value;
  INT j = -i; // XXX: might cause underflow for large uints
 8003f96:	4253      	negs	r3, r2
  cam_value_t v = { .value = (UINT)j, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 8003f98:	6063      	str	r3, [r4, #4]
  (*pc_idx)++;
 8003f9a:	680b      	ldr	r3, [r1, #0]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	600b      	str	r3, [r1, #0]

}
 8003fa0:	bc30      	pop	{r4, r5}
 8003fa2:	4770      	bx	lr
	...

08003fb0 <eval_abs>:
  //goto label
  *pc_idx = (INT)label_to_jump;
}

void eval_abs(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8003fb0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003fba:	011b      	lsls	r3, r3, #4

  //goto label
  *pc_idx = (INT)label_to_jump;
}

void eval_abs(vmc_t *vmc, INT *pc_idx) {
 8003fbc:	b430      	push	{r4, r5}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8003fbe:	18c4      	adds	r4, r0, r3
  INT signed_i = (INT)e.value;
  INT abs_i = abs(signed_i);
  cam_value_t v = { .value = (UINT)abs_i, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 8003fc0:	2500      	movs	r5, #0
}

void eval_abs(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  INT signed_i = (INT)e.value;
  INT abs_i = abs(signed_i);
 8003fc2:	6862      	ldr	r2, [r4, #4]
  cam_value_t v = { .value = (UINT)abs_i, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 8003fc4:	52c5      	strh	r5, [r0, r3]
}

void eval_abs(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  INT signed_i = (INT)e.value;
  INT abs_i = abs(signed_i);
 8003fc6:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8003fca:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
  cam_value_t v = { .value = (UINT)abs_i, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 8003fce:	6063      	str	r3, [r4, #4]
  (*pc_idx)++;
 8003fd0:	680b      	ldr	r3, [r1, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	600b      	str	r3, [r1, #0]
}
 8003fd6:	bc30      	pop	{r4, r5}
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	0000      	movs	r0, r0
	...

08003fe0 <eval_goto>:

uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
    (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes
 8003fe0:	6a42      	ldr	r2, [r0, #36]	; 0x24
    eval_callrts  // 0x37 : 55
  };


uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
 8003fe2:	680b      	ldr	r3, [r1, #0]
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
    (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes
 8003fe4:	4413      	add	r3, r2
 8003fe6:	785a      	ldrb	r2, [r3, #1]


uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
 8003fe8:	789b      	ldrb	r3, [r3, #2]
}

void eval_goto(vmc_t *vmc, INT *pc_idx) {
  uint16_t label = get_label(vmc, pc_idx);
  // GOTO doesn't store jump address on stack
  *pc_idx = (INT)label;
 8003fea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003fee:	600b      	str	r3, [r1, #0]
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
	...

08004000 <eval_skip>:
  }
}

void eval_skip(vmc_t *vmc, INT *pc_idx) {
  (void)vmc;
  (*pc_idx)++;
 8004000:	680b      	ldr	r3, [r1, #0]
 8004002:	3301      	adds	r3, #1
 8004004:	600b      	str	r3, [r1, #0]
 8004006:	4770      	bx	lr
	...

08004010 <eval_clear>:
  vmc->contexts[vmc->current_running_context_id].env = v;
  *pc_idx = (*pc_idx) + 2;
}

void eval_clear(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
 8004010:	680b      	ldr	r3, [r1, #0]
 8004012:	3301      	adds	r3, #1
 8004014:	600b      	str	r3, [r1, #0]
  cam_value_t empty_tuple = { .value = 0, .flags = 0 };
  vmc->contexts[vmc->current_running_context_id].env = empty_tuple;
 8004016:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800401a:	3301      	adds	r3, #1
 800401c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	18c1      	adds	r1, r0, r3
 8004024:	2200      	movs	r2, #0
 8004026:	52c2      	strh	r2, [r0, r3]
 8004028:	604a      	str	r2, [r1, #4]
 800402a:	4770      	bx	lr
 800402c:	0000      	movs	r0, r0
	...

08004030 <eval_loadb>:

void eval_loadb(vmc_t *vmc, INT *pc_idx) {
  INT bool_idx = (*pc_idx) + 1;
  uint8_t bool_val = vmc->code_memory[bool_idx];
  cam_value_t v = { .value = (UINT)bool_val, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 8004030:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
  *pc_idx = (*pc_idx) + 3;
}

void eval_loadb(vmc_t *vmc, INT *pc_idx) {
  INT bool_idx = (*pc_idx) + 1;
  uint8_t bool_val = vmc->code_memory[bool_idx];
 8004034:	680a      	ldr	r2, [r1, #0]
  cam_value_t v = { .value = (UINT)i, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
  *pc_idx = (*pc_idx) + 3;
}

void eval_loadb(vmc_t *vmc, INT *pc_idx) {
 8004036:	b430      	push	{r4, r5}
  INT bool_idx = (*pc_idx) + 1;
  uint8_t bool_val = vmc->code_memory[bool_idx];
  cam_value_t v = { .value = (UINT)bool_val, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 8004038:	3301      	adds	r3, #1
  *pc_idx = (*pc_idx) + 3;
}

void eval_loadb(vmc_t *vmc, INT *pc_idx) {
  INT bool_idx = (*pc_idx) + 1;
  uint8_t bool_val = vmc->code_memory[bool_idx];
 800403a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  cam_value_t v = { .value = (UINT)bool_val, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 800403c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004040:	011b      	lsls	r3, r3, #4
  *pc_idx = (*pc_idx) + 3;
}

void eval_loadb(vmc_t *vmc, INT *pc_idx) {
  INT bool_idx = (*pc_idx) + 1;
  uint8_t bool_val = vmc->code_memory[bool_idx];
 8004042:	4422      	add	r2, r4
  cam_value_t v = { .value = (UINT)bool_val, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 8004044:	2500      	movs	r5, #0
 8004046:	18c4      	adds	r4, r0, r3
}

void eval_loadb(vmc_t *vmc, INT *pc_idx) {
  INT bool_idx = (*pc_idx) + 1;
  uint8_t bool_val = vmc->code_memory[bool_idx];
  cam_value_t v = { .value = (UINT)bool_val, .flags = 0};
 8004048:	7852      	ldrb	r2, [r2, #1]
  vmc->contexts[vmc->current_running_context_id].env = v;
 800404a:	52c5      	strh	r5, [r0, r3]
 800404c:	6062      	str	r2, [r4, #4]
  *pc_idx = (*pc_idx) + 2;
 800404e:	680b      	ldr	r3, [r1, #0]
 8004050:	3302      	adds	r3, #2
 8004052:	600b      	str	r3, [r1, #0]
}
 8004054:	bc30      	pop	{r4, r5}
 8004056:	4770      	bx	lr
	...

08004060 <eval_loadi>:
  }
  vmc->contexts[vmc->current_running_context_id].env = hold_reg;
  (*pc_idx)++;
}

void eval_loadi(vmc_t *vmc, INT *pc_idx) {
 8004060:	b4f0      	push	{r4, r5, r6, r7}
  INT int_idx1 = (*pc_idx) + 1;
 8004062:	680a      	ldr	r2, [r1, #0]
  INT int_idx2 = (*pc_idx) + 2;
  uint16_t int_idx =
    (vmc->code_memory[int_idx1] << 8) | vmc->code_memory[int_idx2]; // merge 2 bytes
 8004064:	6a46      	ldr	r6, [r0, #36]	; 0x24
  uint8_t byte1 = vmc->code_memory[i_idx + 1];
  uint8_t byte2 = vmc->code_memory[i_idx + 2];
  uint8_t byte3 = vmc->code_memory[i_idx + 3];
  INT i = (byte0 << 24) | (byte1 << 16) | (byte2 << 8) | byte3;
  cam_value_t v = { .value = (UINT)i, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 8004066:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c

void eval_loadi(vmc_t *vmc, INT *pc_idx) {
  INT int_idx1 = (*pc_idx) + 1;
  INT int_idx2 = (*pc_idx) + 2;
  uint16_t int_idx =
    (vmc->code_memory[int_idx1] << 8) | vmc->code_memory[int_idx2]; // merge 2 bytes
 800406a:	4432      	add	r2, r6
  uint8_t byte1 = vmc->code_memory[i_idx + 1];
  uint8_t byte2 = vmc->code_memory[i_idx + 2];
  uint8_t byte3 = vmc->code_memory[i_idx + 3];
  INT i = (byte0 << 24) | (byte1 << 16) | (byte2 << 8) | byte3;
  cam_value_t v = { .value = (UINT)i, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 800406c:	3401      	adds	r4, #1

void eval_loadi(vmc_t *vmc, INT *pc_idx) {
  INT int_idx1 = (*pc_idx) + 1;
  INT int_idx2 = (*pc_idx) + 2;
  uint16_t int_idx =
    (vmc->code_memory[int_idx1] << 8) | vmc->code_memory[int_idx2]; // merge 2 bytes
 800406e:	7855      	ldrb	r5, [r2, #1]
}

void eval_loadi(vmc_t *vmc, INT *pc_idx) {
  INT int_idx1 = (*pc_idx) + 1;
  INT int_idx2 = (*pc_idx) + 2;
  uint16_t int_idx =
 8004070:	7893      	ldrb	r3, [r2, #2]
    (vmc->code_memory[int_idx1] << 8) | vmc->code_memory[int_idx2]; // merge 2 bytes
  INT int_pool_offset = 7; //TODO: Should we verify the int pool size here?
  INT i_idx = int_pool_offset + 4 * int_idx; // each int 4 bytes wide
 8004072:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	3307      	adds	r3, #7
  uint8_t byte0 = vmc->code_memory[i_idx];
  uint8_t byte1 = vmc->code_memory[i_idx + 1];
  uint8_t byte2 = vmc->code_memory[i_idx + 2];
  uint8_t byte3 = vmc->code_memory[i_idx + 3];
 800407a:	18f5      	adds	r5, r6, r3
  INT i = (byte0 << 24) | (byte1 << 16) | (byte2 << 8) | byte3;
 800407c:	5cf7      	ldrb	r7, [r6, r3]
 800407e:	78ea      	ldrb	r2, [r5, #3]
 8004080:	786b      	ldrb	r3, [r5, #1]
 8004082:	78ae      	ldrb	r6, [r5, #2]
  cam_value_t v = { .value = (UINT)i, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 8004084:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004088:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
 800408c:	0124      	lsls	r4, r4, #4
 800408e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8004092:	2500      	movs	r5, #0
 8004094:	1902      	adds	r2, r0, r4
 8004096:	5305      	strh	r5, [r0, r4]
  INT i_idx = int_pool_offset + 4 * int_idx; // each int 4 bytes wide
  uint8_t byte0 = vmc->code_memory[i_idx];
  uint8_t byte1 = vmc->code_memory[i_idx + 1];
  uint8_t byte2 = vmc->code_memory[i_idx + 2];
  uint8_t byte3 = vmc->code_memory[i_idx + 3];
  INT i = (byte0 << 24) | (byte1 << 16) | (byte2 << 8) | byte3;
 8004098:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  cam_value_t v = { .value = (UINT)i, .flags = 0};
  vmc->contexts[vmc->current_running_context_id].env = v;
 800409c:	6053      	str	r3, [r2, #4]
  *pc_idx = (*pc_idx) + 3;
 800409e:	680b      	ldr	r3, [r1, #0]
 80040a0:	3303      	adds	r3, #3
 80040a2:	600b      	str	r3, [r1, #0]
}
 80040a4:	bcf0      	pop	{r4, r5, r6, r7}
 80040a6:	4770      	bx	lr
	...

080040b0 <eval_switchi>:
}
//#include "ch.h"
//#include "hal.h"
//#include "usbcfg.h"
//#include "chprintf.h"
void eval_switchi(vmc_t *vmc, INT *pc_idx){
 80040b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  //chprintf((BaseSequentialStream *)&SDU1,"entered switchi\r\n");
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80040b4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80040b8:	3301      	adds	r3, #1
 80040ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80040be:	eb00 1303 	add.w	r3, r0, r3, lsl #4
}
//#include "ch.h"
//#include "hal.h"
//#include "usbcfg.h"
//#include "chprintf.h"
void eval_switchi(vmc_t *vmc, INT *pc_idx){
 80040c2:	b084      	sub	sp, #16

  //chprintf((BaseSequentialStream *)&SDU1,"entered switchi\r\n");
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;

  heap_index tag_val_pair = e.value;
 80040c4:	685f      	ldr	r7, [r3, #4]
}
//#include "ch.h"
//#include "hal.h"
//#include "usbcfg.h"
//#include "chprintf.h"
void eval_switchi(vmc_t *vmc, INT *pc_idx){
 80040c6:	4605      	mov	r5, r0
 80040c8:	460e      	mov	r6, r1

  //chprintf((BaseSequentialStream *)&SDU1,"entered switchi\r\n");
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;

  heap_index tag_val_pair = e.value;
  cam_value_t tag_heap = heap_fst(&vmc->heap, tag_val_pair);
 80040ca:	463a      	mov	r2, r7
 80040cc:	4601      	mov	r1, r0
  cam_value_t val      = heap_snd(&vmc->heap, tag_val_pair);
 80040ce:	ac02      	add	r4, sp, #8

  //chprintf((BaseSequentialStream *)&SDU1,"entered switchi\r\n");
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;

  heap_index tag_val_pair = e.value;
  cam_value_t tag_heap = heap_fst(&vmc->heap, tag_val_pair);
 80040d0:	4668      	mov	r0, sp
 80040d2:	f004 fbe5 	bl	80088a0 <heap_fst>
  cam_value_t val      = heap_snd(&vmc->heap, tag_val_pair);
 80040d6:	463a      	mov	r2, r7
 80040d8:	4629      	mov	r1, r5
 80040da:	4620      	mov	r0, r4
 80040dc:	f004 fbd0 	bl	8008880 <heap_snd>

  //chprintf((BaseSequentialStream *)&SDU1,"tag: %d, val: %d\r\n",tag_heap.value, val.value);
  
  INT switch_size_idx = (*pc_idx) + 1;
 80040e0:	6832      	ldr	r2, [r6, #0]
  uint8_t switch_size = vmc->code_memory[switch_size_idx];
 80040e2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80040e4:	1883      	adds	r3, r0, r2
 80040e6:	7859      	ldrb	r1, [r3, #1]

  int label_to_jump = -1;
  
  //for(uint8_t i = (switch_size_idx + 1); i <= (switch_size_idx + (switch_size * 4)); i+=4){
  for (uint8_t i = 0; i < switch_size; i ++) {
 80040e8:	b351      	cbz	r1, 8004140 <eval_switchi+0x90>
 80040ea:	3901      	subs	r1, #1
 80040ec:	b2c9      	uxtb	r1, r1
 80040ee:	3204      	adds	r2, #4
 80040f0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80040f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80040f8:	4410      	add	r0, r2
      (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes

    //chprintf((BaseSequentialStream *)&SDU1,"looking at -> tag: %d, label: %d\r\n",tag, label);
    

    if(tag_heap.value == (UINT)tag ||
 80040fa:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80040fe:	e003      	b.n	8004108 <eval_switchi+0x58>
 8004100:	4542      	cmp	r2, r8
 8004102:	d00c      	beq.n	800411e <eval_switchi+0x6e>
  uint8_t switch_size = vmc->code_memory[switch_size_idx];

  int label_to_jump = -1;
  
  //for(uint8_t i = (switch_size_idx + 1); i <= (switch_size_idx + (switch_size * 4)); i+=4){
  for (uint8_t i = 0; i < switch_size; i ++) {
 8004104:	4283      	cmp	r3, r0
 8004106:	d01b      	beq.n	8004140 <eval_switchi+0x90>
    
    INT tag_idx1 = switch_size_idx + 1 + (i * 4);
    INT tag_idx2 = switch_size_idx + 1 + (i * 4) + 1;
    uint16_t tag =
      (vmc->code_memory[tag_idx1] << 8) | vmc->code_memory[tag_idx2]; // merge 2 bytes
 8004108:	7899      	ldrb	r1, [r3, #2]
  //for(uint8_t i = (switch_size_idx + 1); i <= (switch_size_idx + (switch_size * 4)); i+=4){
  for (uint8_t i = 0; i < switch_size; i ++) {
    
    INT tag_idx1 = switch_size_idx + 1 + (i * 4);
    INT tag_idx2 = switch_size_idx + 1 + (i * 4) + 1;
    uint16_t tag =
 800410a:	78da      	ldrb	r2, [r3, #3]
      (vmc->code_memory[tag_idx1] << 8) | vmc->code_memory[tag_idx2]; // merge 2 bytes

    INT lab_idx1 = switch_size_idx + 1 + (i * 4) + 2;
    INT lab_idx2 = switch_size_idx + 1 + (i * 4) + 3;
    uint16_t label =
      (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes
 800410c:	f893 c004 	ldrb.w	ip, [r3, #4]
 8004110:	795f      	ldrb	r7, [r3, #5]
  //for(uint8_t i = (switch_size_idx + 1); i <= (switch_size_idx + (switch_size * 4)); i+=4){
  for (uint8_t i = 0; i < switch_size; i ++) {
    
    INT tag_idx1 = switch_size_idx + 1 + (i * 4);
    INT tag_idx2 = switch_size_idx + 1 + (i * 4) + 1;
    uint16_t tag =
 8004112:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes

    //chprintf((BaseSequentialStream *)&SDU1,"looking at -> tag: %d, label: %d\r\n",tag, label);
    

    if(tag_heap.value == (UINT)tag ||
 8004116:	4572      	cmp	r2, lr
 8004118:	f103 0304 	add.w	r3, r3, #4
 800411c:	d1f0      	bne.n	8004100 <eval_switchi+0x50>
    DEBUG_PRINT(("Tag %u not found while switching", tag_heap.value));
    *pc_idx = -1;
    return;
  }

  vmc->contexts[vmc->current_running_context_id].env = val;
 800411e:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8004122:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004126:	3301      	adds	r3, #1
 8004128:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    

    if(tag_heap.value == (UINT)tag ||
       (UINT)tag == 65535){ //wildcard check; wildcard tag = max(uint16_t) = 65535
      //chprintf((BaseSequentialStream *)&SDU1,"tag found jumping to label: %d\r\n",label);
      label_to_jump = label;
 800412c:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
    DEBUG_PRINT(("Tag %u not found while switching", tag_heap.value));
    *pc_idx = -1;
    return;
  }

  vmc->contexts[vmc->current_running_context_id].env = val;
 8004130:	eb05 1503 	add.w	r5, r5, r3, lsl #4
 8004134:	e885 0003 	stmia.w	r5, {r0, r1}
    

    if(tag_heap.value == (UINT)tag ||
       (UINT)tag == 65535){ //wildcard check; wildcard tag = max(uint16_t) = 65535
      //chprintf((BaseSequentialStream *)&SDU1,"tag found jumping to label: %d\r\n",label);
      label_to_jump = label;
 8004138:	6037      	str	r7, [r6, #0]


  //goto label
  *pc_idx = (INT)label_to_jump;

}
 800413a:	b004      	add	sp, #16
 800413c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  //chprintf((BaseSequentialStream *)&SDU1,"switchi: %u\r\n", label_to_jump);
  
  if(label_to_jump == -1){
    DEBUG_PRINT(("Tag %u not found while switching", tag_heap.value));
    *pc_idx = -1;
 8004140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004144:	6033      	str	r3, [r6, #0]


  //goto label
  *pc_idx = (INT)label_to_jump;

}
 8004146:	b004      	add	sp, #16
 8004148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800414c:	0000      	movs	r0, r0
	...

08004150 <eval_comb>:
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
    heap_set(&vmc->heap, hi, e, hold_reg);
  }

}
void eval_comb(vmc_t *vmc, INT *pc_idx){
 8004150:	b5f0      	push	{r4, r5, r6, r7, lr}

uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
    (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes
 8004152:	6a42      	ldr	r2, [r0, #36]	; 0x24
    eval_callrts  // 0x37 : 55
  };


uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
 8004154:	680b      	ldr	r3, [r1, #0]
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
    (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes
 8004156:	4413      	add	r3, r2
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
    heap_set(&vmc->heap, hi, e, hold_reg);
  }

}
void eval_comb(vmc_t *vmc, INT *pc_idx){
 8004158:	b087      	sub	sp, #28

uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
    (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes
 800415a:	785a      	ldrb	r2, [r3, #1]


uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
 800415c:	789b      	ldrb	r3, [r3, #2]

}
void eval_comb(vmc_t *vmc, INT *pc_idx){

  uint16_t label = get_label(vmc, pc_idx);
  cam_value_t cam_label =
 800415e:	2600      	movs	r6, #0


uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
 8004160:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
}
void eval_comb(vmc_t *vmc, INT *pc_idx){

  uint16_t label = get_label(vmc, pc_idx);
  cam_value_t cam_label =
    { .value = (UINT)label, .flags = 0 };
 8004164:	9303      	str	r3, [sp, #12]
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
    heap_set(&vmc->heap, hi, e, hold_reg);
  }

}
void eval_comb(vmc_t *vmc, INT *pc_idx){
 8004166:	460d      	mov	r5, r1
 8004168:	4604      	mov	r4, r0

  uint16_t label = get_label(vmc, pc_idx);
  cam_value_t cam_label =
 800416a:	f8ad 6008 	strh.w	r6, [sp, #8]
    { .value = (UINT)label, .flags = 0 };
  heap_index hi = vmc_heap_alloc_withGC(vmc);
 800416e:	f001 fc27 	bl	80059c0 <vmc_heap_alloc_withGC>
  if(hi == HEAP_NULL){
 8004172:	1c43      	adds	r3, r0, #1
void eval_comb(vmc_t *vmc, INT *pc_idx){

  uint16_t label = get_label(vmc, pc_idx);
  cam_value_t cam_label =
    { .value = (UINT)label, .flags = 0 };
  heap_index hi = vmc_heap_alloc_withGC(vmc);
 8004174:	4602      	mov	r2, r0
  if(hi == HEAP_NULL){
 8004176:	d020      	beq.n	80041ba <eval_comb+0x6a>
    *pc_idx = -1;
    return;
  } else {
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 8004178:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c


    // This value is used to demarcate a heap cell as
    // storing a combinator value rather than a closure
    cam_value_t dummy_val = { .value = 4294967295 };
 800417c:	9604      	str	r6, [sp, #16]
 800417e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004182:	9105      	str	r1, [sp, #20]
    *pc_idx = -1;
    return;
  } else {
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 8004184:	3301      	adds	r3, #1
    // This value is used to demarcate a heap cell as
    // storing a combinator value rather than a closure
    cam_value_t dummy_val = { .value = 4294967295 };


    heap_set(&vmc->heap, hi, cam_label, dummy_val);
 8004186:	a906      	add	r1, sp, #24
 8004188:	e911 0003 	ldmdb	r1, {r0, r1}
    *pc_idx = -1;
    return;
  } else {
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 800418c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
 8004196:	f824 e003 	strh.w	lr, [r4, r3]
    // This value is used to demarcate a heap cell as
    // storing a combinator value rather than a closure
    cam_value_t dummy_val = { .value = 4294967295 };


    heap_set(&vmc->heap, hi, cam_label, dummy_val);
 800419a:	e88d 0003 	stmia.w	sp, {r0, r1}
    *pc_idx = -1;
    return;
  } else {
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 800419e:	18e7      	adds	r7, r4, r3
    // This value is used to demarcate a heap cell as
    // storing a combinator value rather than a closure
    cam_value_t dummy_val = { .value = 4294967295 };


    heap_set(&vmc->heap, hi, cam_label, dummy_val);
 80041a0:	ae02      	add	r6, sp, #8
    *pc_idx = -1;
    return;
  } else {
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 80041a2:	607a      	str	r2, [r7, #4]
    // This value is used to demarcate a heap cell as
    // storing a combinator value rather than a closure
    cam_value_t dummy_val = { .value = 4294967295 };


    heap_set(&vmc->heap, hi, cam_label, dummy_val);
 80041a4:	4611      	mov	r1, r2
 80041a6:	4620      	mov	r0, r4
 80041a8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80041ac:	f004 fb48 	bl	8008840 <heap_set>

    *pc_idx = (*pc_idx) + 3;
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	3303      	adds	r3, #3
 80041b4:	602b      	str	r3, [r5, #0]
  }

}
 80041b6:	b007      	add	sp, #28
 80041b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_value_t cam_label =
    { .value = (UINT)label, .flags = 0 };
  heap_index hi = vmc_heap_alloc_withGC(vmc);
  if(hi == HEAP_NULL){
    DEBUG_PRINT(("Heap allocation has failed"));
    *pc_idx = -1;
 80041ba:	6028      	str	r0, [r5, #0]
    heap_set(&vmc->heap, hi, cam_label, dummy_val);

    *pc_idx = (*pc_idx) + 3;
  }

}
 80041bc:	b007      	add	sp, #28
 80041be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041c0 <eval_pack>:
    heap_set(&vmc->heap, hi, e, cam_label);
    *pc_idx = (*pc_idx) + 3;
  }
}

void eval_pack(vmc_t *vmc, INT *pc_idx) {
 80041c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80041c2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes
  return label;
}

uint16_t get_tag(vmc_t *vmc, INT *pc_idx){
  INT tag_idx1 = (*pc_idx) + 1;
 80041c6:	680a      	ldr	r2, [r1, #0]
    heap_set(&vmc->heap, hi, e, cam_label);
    *pc_idx = (*pc_idx) + 3;
  }
}

void eval_pack(vmc_t *vmc, INT *pc_idx) {
 80041c8:	460d      	mov	r5, r1
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80041ca:	3301      	adds	r3, #1

uint16_t get_tag(vmc_t *vmc, INT *pc_idx){
  INT tag_idx1 = (*pc_idx) + 1;
  INT tag_idx2 = (*pc_idx) + 2;
  uint16_t tag =
    (vmc->code_memory[tag_idx1] << 8) | vmc->code_memory[tag_idx2]; // merge 2 bytes
 80041cc:	6a41      	ldr	r1, [r0, #36]	; 0x24
    *pc_idx = (*pc_idx) + 3;
  }
}

void eval_pack(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80041ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1

uint16_t get_tag(vmc_t *vmc, INT *pc_idx){
  INT tag_idx1 = (*pc_idx) + 1;
  INT tag_idx2 = (*pc_idx) + 2;
  uint16_t tag =
    (vmc->code_memory[tag_idx1] << 8) | vmc->code_memory[tag_idx2]; // merge 2 bytes
 80041d2:	440a      	add	r2, r1
    *pc_idx = (*pc_idx) + 3;
  }
}

void eval_pack(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80041d4:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    heap_set(&vmc->heap, hi, e, cam_label);
    *pc_idx = (*pc_idx) + 3;
  }
}

void eval_pack(vmc_t *vmc, INT *pc_idx) {
 80041d8:	4604      	mov	r4, r0
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80041da:	e893 0003 	ldmia.w	r3, {r0, r1}
    heap_set(&vmc->heap, hi, e, cam_label);
    *pc_idx = (*pc_idx) + 3;
  }
}

void eval_pack(vmc_t *vmc, INT *pc_idx) {
 80041de:	b087      	sub	sp, #28

uint16_t get_tag(vmc_t *vmc, INT *pc_idx){
  INT tag_idx1 = (*pc_idx) + 1;
  INT tag_idx2 = (*pc_idx) + 2;
  uint16_t tag =
    (vmc->code_memory[tag_idx1] << 8) | vmc->code_memory[tag_idx2]; // merge 2 bytes
 80041e0:	7857      	ldrb	r7, [r2, #1]
}

uint16_t get_tag(vmc_t *vmc, INT *pc_idx){
  INT tag_idx1 = (*pc_idx) + 1;
  INT tag_idx2 = (*pc_idx) + 2;
  uint16_t tag =
 80041e2:	7893      	ldrb	r3, [r2, #2]
    *pc_idx = (*pc_idx) + 3;
  }
}

void eval_pack(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80041e4:	ae02      	add	r6, sp, #8
}

uint16_t get_tag(vmc_t *vmc, INT *pc_idx){
  INT tag_idx1 = (*pc_idx) + 1;
  INT tag_idx2 = (*pc_idx) + 2;
  uint16_t tag =
 80041e6:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
}

void eval_pack(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  uint16_t tag = get_tag(vmc, pc_idx);
  cam_value_t cam_tag =
 80041ea:	2200      	movs	r2, #0
    *pc_idx = (*pc_idx) + 3;
  }
}

void eval_pack(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80041ec:	e886 0003 	stmia.w	r6, {r0, r1}
  uint16_t tag = get_tag(vmc, pc_idx);
  cam_value_t cam_tag =
    { .value = (UINT)tag, .flags = 0 };
  heap_index hi = vmc_heap_alloc_withGC(vmc);
 80041f0:	4620      	mov	r0, r4

void eval_pack(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  uint16_t tag = get_tag(vmc, pc_idx);
  cam_value_t cam_tag =
    { .value = (UINT)tag, .flags = 0 };
 80041f2:	9305      	str	r3, [sp, #20]
}

void eval_pack(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  uint16_t tag = get_tag(vmc, pc_idx);
  cam_value_t cam_tag =
 80041f4:	f8ad 2010 	strh.w	r2, [sp, #16]
    { .value = (UINT)tag, .flags = 0 };
  heap_index hi = vmc_heap_alloc_withGC(vmc);
 80041f8:	f001 fbe2 	bl	80059c0 <vmc_heap_alloc_withGC>
  if(hi == HEAP_NULL){
 80041fc:	1c43      	adds	r3, r0, #1
void eval_pack(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  uint16_t tag = get_tag(vmc, pc_idx);
  cam_value_t cam_tag =
    { .value = (UINT)tag, .flags = 0 };
  heap_index hi = vmc_heap_alloc_withGC(vmc);
 80041fe:	4602      	mov	r2, r0
  if(hi == HEAP_NULL){
 8004200:	d01a      	beq.n	8004238 <eval_pack+0x78>
    *pc_idx = -1;
    return;
  } else {
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 8004202:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8004206:	3301      	adds	r3, #1
    heap_set(&vmc->heap, hi, cam_tag, e);
 8004208:	e896 0003 	ldmia.w	r6, {r0, r1}
    *pc_idx = -1;
    return;
  } else {
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 800420c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	f44f 4700 	mov.w	r7, #32768	; 0x8000
 8004216:	52e7      	strh	r7, [r4, r3]
    heap_set(&vmc->heap, hi, cam_tag, e);
 8004218:	e88d 0003 	stmia.w	sp, {r0, r1}
    *pc_idx = -1;
    return;
  } else {
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 800421c:	18e6      	adds	r6, r4, r3
    heap_set(&vmc->heap, hi, cam_tag, e);
 800421e:	ab06      	add	r3, sp, #24
    *pc_idx = -1;
    return;
  } else {
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 8004220:	6072      	str	r2, [r6, #4]
    heap_set(&vmc->heap, hi, cam_tag, e);
 8004222:	4611      	mov	r1, r2
 8004224:	4620      	mov	r0, r4
 8004226:	e913 000c 	ldmdb	r3, {r2, r3}
 800422a:	f004 fb09 	bl	8008840 <heap_set>
    *pc_idx = (*pc_idx) + 3;
 800422e:	682b      	ldr	r3, [r5, #0]
 8004230:	3303      	adds	r3, #3
 8004232:	602b      	str	r3, [r5, #0]
  }
}
 8004234:	b007      	add	sp, #28
 8004236:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_value_t cam_tag =
    { .value = (UINT)tag, .flags = 0 };
  heap_index hi = vmc_heap_alloc_withGC(vmc);
  if(hi == HEAP_NULL){
    DEBUG_PRINT(("Heap allocation has failed"));
    *pc_idx = -1;
 8004238:	6028      	str	r0, [r5, #0]
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
    heap_set(&vmc->heap, hi, cam_tag, e);
    *pc_idx = (*pc_idx) + 3;
  }
}
 800423a:	b007      	add	sp, #28
 800423c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800423e:	bf00      	nop

08004240 <eval_cur>:
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
    heap_set(&vmc->heap, hi, hold_reg, e);
  }
}

void eval_cur(vmc_t *vmc, INT *pc_idx) {
 8004240:	b5f0      	push	{r4, r5, r6, r7, lr}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004242:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    eval_callrts  // 0x37 : 55
  };


uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
 8004246:	680a      	ldr	r2, [r1, #0]
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
    heap_set(&vmc->heap, hi, hold_reg, e);
  }
}

void eval_cur(vmc_t *vmc, INT *pc_idx) {
 8004248:	460d      	mov	r5, r1
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800424a:	3301      	adds	r3, #1

uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
    (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes
 800424c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    heap_set(&vmc->heap, hi, hold_reg, e);
  }
}

void eval_cur(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800424e:	eb03 0343 	add.w	r3, r3, r3, lsl #1

uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
    (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes
 8004252:	440a      	add	r2, r1
    heap_set(&vmc->heap, hi, hold_reg, e);
  }
}

void eval_cur(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004254:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
    heap_set(&vmc->heap, hi, hold_reg, e);
  }
}

void eval_cur(vmc_t *vmc, INT *pc_idx) {
 8004258:	4604      	mov	r4, r0
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800425a:	e893 0003 	ldmia.w	r3, {r0, r1}
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
    heap_set(&vmc->heap, hi, hold_reg, e);
  }
}

void eval_cur(vmc_t *vmc, INT *pc_idx) {
 800425e:	b087      	sub	sp, #28

uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
    (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes
 8004260:	7857      	ldrb	r7, [r2, #1]


uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
 8004262:	7893      	ldrb	r3, [r2, #2]
    heap_set(&vmc->heap, hi, hold_reg, e);
  }
}

void eval_cur(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004264:	ae02      	add	r6, sp, #8


uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
 8004266:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
}

void eval_cur(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  uint16_t label = get_label(vmc, pc_idx);
  cam_value_t cam_label =
 800426a:	2200      	movs	r2, #0
    heap_set(&vmc->heap, hi, hold_reg, e);
  }
}

void eval_cur(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800426c:	e886 0003 	stmia.w	r6, {r0, r1}
  uint16_t label = get_label(vmc, pc_idx);
  cam_value_t cam_label =
    { .value = (UINT)label, .flags = 0 };
  heap_index hi = vmc_heap_alloc_withGC(vmc);
 8004270:	4620      	mov	r0, r4

void eval_cur(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  uint16_t label = get_label(vmc, pc_idx);
  cam_value_t cam_label =
    { .value = (UINT)label, .flags = 0 };
 8004272:	9305      	str	r3, [sp, #20]
}

void eval_cur(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  uint16_t label = get_label(vmc, pc_idx);
  cam_value_t cam_label =
 8004274:	f8ad 2010 	strh.w	r2, [sp, #16]
    { .value = (UINT)label, .flags = 0 };
  heap_index hi = vmc_heap_alloc_withGC(vmc);
 8004278:	f001 fba2 	bl	80059c0 <vmc_heap_alloc_withGC>
  if(hi == HEAP_NULL){
 800427c:	1c43      	adds	r3, r0, #1
void eval_cur(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  uint16_t label = get_label(vmc, pc_idx);
  cam_value_t cam_label =
    { .value = (UINT)label, .flags = 0 };
  heap_index hi = vmc_heap_alloc_withGC(vmc);
 800427e:	4602      	mov	r2, r0
  if(hi == HEAP_NULL){
 8004280:	d01b      	beq.n	80042ba <eval_cur+0x7a>
    *pc_idx = -1;
    return;
  } else {
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 8004282:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    heap_set(&vmc->heap, hi, e, cam_label);
 8004286:	a906      	add	r1, sp, #24
    *pc_idx = -1;
    return;
  } else {
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 8004288:	3301      	adds	r3, #1
    heap_set(&vmc->heap, hi, e, cam_label);
 800428a:	e911 0003 	ldmdb	r1, {r0, r1}
    *pc_idx = -1;
    return;
  } else {
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 800428e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
 8004298:	f824 e003 	strh.w	lr, [r4, r3]
    heap_set(&vmc->heap, hi, e, cam_label);
 800429c:	e88d 0003 	stmia.w	sp, {r0, r1}
    *pc_idx = -1;
    return;
  } else {
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 80042a0:	18e7      	adds	r7, r4, r3
    heap_set(&vmc->heap, hi, e, cam_label);
 80042a2:	4611      	mov	r1, r2
    *pc_idx = -1;
    return;
  } else {
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 80042a4:	607a      	str	r2, [r7, #4]
    heap_set(&vmc->heap, hi, e, cam_label);
 80042a6:	4620      	mov	r0, r4
 80042a8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80042ac:	f004 fac8 	bl	8008840 <heap_set>
    *pc_idx = (*pc_idx) + 3;
 80042b0:	682b      	ldr	r3, [r5, #0]
 80042b2:	3303      	adds	r3, #3
 80042b4:	602b      	str	r3, [r5, #0]
  }
}
 80042b6:	b007      	add	sp, #28
 80042b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_value_t cam_label =
    { .value = (UINT)label, .flags = 0 };
  heap_index hi = vmc_heap_alloc_withGC(vmc);
  if(hi == HEAP_NULL){
    DEBUG_PRINT(("Heap allocation has failed"));
    *pc_idx = -1;
 80042ba:	6028      	str	r0, [r5, #0]
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
    heap_set(&vmc->heap, hi, e, cam_label);
    *pc_idx = (*pc_idx) + 3;
  }
}
 80042bc:	b007      	add	sp, #28
 80042be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042c0 <eval_snoc>:
  }
  vmc->contexts[vmc->current_running_context_id].env = r;

  (*pc_idx)++;
}
void eval_snoc(vmc_t *vmc, INT *pc_idx){
 80042c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 80042c2:	680b      	ldr	r3, [r1, #0]
 80042c4:	3301      	adds	r3, #1
 80042c6:	600b      	str	r3, [r1, #0]
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80042c8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80042d2:	eb00 1202 	add.w	r2, r0, r2, lsl #4
  }
  vmc->contexts[vmc->current_running_context_id].env = r;

  (*pc_idx)++;
}
void eval_snoc(vmc_t *vmc, INT *pc_idx){
 80042d6:	4604      	mov	r4, r0
 80042d8:	460d      	mov	r5, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80042da:	e892 0003 	ldmia.w	r2, {r0, r1}
  }
  vmc->contexts[vmc->current_running_context_id].env = r;

  (*pc_idx)++;
}
void eval_snoc(vmc_t *vmc, INT *pc_idx){
 80042de:	b087      	sub	sp, #28
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg;
  int i =
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80042e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80042e4:	eb04 1303 	add.w	r3, r4, r3, lsl #4

  (*pc_idx)++;
}
void eval_snoc(vmc_t *vmc, INT *pc_idx){
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80042e8:	ae02      	add	r6, sp, #8
  cam_register_t hold_reg;
  int i =
 80042ea:	af04      	add	r7, sp, #16

  (*pc_idx)++;
}
void eval_snoc(vmc_t *vmc, INT *pc_idx){
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80042ec:	e886 0003 	stmia.w	r6, {r0, r1}
  cam_register_t hold_reg;
  int i =
 80042f0:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80042f4:	4639      	mov	r1, r7
 80042f6:	f004 f9a3 	bl	8008640 <stack_pop>
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
 80042fa:	b920      	cbnz	r0, 8004306 <eval_snoc+0x46>
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 80042fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004300:	602b      	str	r3, [r5, #0]
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
    heap_set(&vmc->heap, hi, e, hold_reg);
  }

}
 8004302:	b007      	add	sp, #28
 8004304:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  heap_index hi = vmc_heap_alloc_withGC(vmc);
 8004306:	4620      	mov	r0, r4
 8004308:	f001 fb5a 	bl	80059c0 <vmc_heap_alloc_withGC>
  if(hi == HEAP_NULL){
 800430c:	1c43      	adds	r3, r0, #1
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  heap_index hi = vmc_heap_alloc_withGC(vmc);
 800430e:	4602      	mov	r2, r0
  if(hi == HEAP_NULL){
 8004310:	d0f4      	beq.n	80042fc <eval_snoc+0x3c>
  } else {
    // Assuming we have space for atleast one tuple
    // Do we check this as well?
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 8004312:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8004316:	3301      	adds	r3, #1
    heap_set(&vmc->heap, hi, e, hold_reg);
 8004318:	e897 0003 	ldmia.w	r7, {r0, r1}
  } else {
    // Assuming we have space for atleast one tuple
    // Do we check this as well?
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 800431c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	f44f 4700 	mov.w	r7, #32768	; 0x8000
 8004326:	52e7      	strh	r7, [r4, r3]
    heap_set(&vmc->heap, hi, e, hold_reg);
 8004328:	e88d 0003 	stmia.w	sp, {r0, r1}
  } else {
    // Assuming we have space for atleast one tuple
    // Do we check this as well?
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 800432c:	18e5      	adds	r5, r4, r3
    heap_set(&vmc->heap, hi, e, hold_reg);
 800432e:	4611      	mov	r1, r2
  } else {
    // Assuming we have space for atleast one tuple
    // Do we check this as well?
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 8004330:	606a      	str	r2, [r5, #4]
    heap_set(&vmc->heap, hi, e, hold_reg);
 8004332:	4620      	mov	r0, r4
 8004334:	e896 000c 	ldmia.w	r6, {r2, r3}
 8004338:	f004 fa82 	bl	8008840 <heap_set>
  }

}
 800433c:	b007      	add	sp, #28
 800433e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004340 <eval_pop>:

  (*pc_idx)++;

}

void eval_pop (vmc_t *vmc, INT *pc_idx){
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	4604      	mov	r4, r0
  cam_register_t r;
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &r);
 8004344:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004348:	eb00 0040 	add.w	r0, r0, r0, lsl #1

  (*pc_idx)++;

}

void eval_pop (vmc_t *vmc, INT *pc_idx){
 800434c:	b082      	sub	sp, #8
  cam_register_t r;
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &r);
 800434e:	eb04 1000 	add.w	r0, r4, r0, lsl #4

  (*pc_idx)++;

}

void eval_pop (vmc_t *vmc, INT *pc_idx){
 8004352:	460e      	mov	r6, r1
  cam_register_t r;
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &r);
 8004354:	303c      	adds	r0, #60	; 0x3c
 8004356:	4669      	mov	r1, sp
 8004358:	f004 f972 	bl	8008640 <stack_pop>
  if(i == 0){
 800435c:	b178      	cbz	r0, 800437e <eval_pop+0x3e>
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  vmc->contexts[vmc->current_running_context_id].env = r;
 800435e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8004362:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8004366:	3301      	adds	r3, #1
 8004368:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800436c:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 8004370:	e884 0003 	stmia.w	r4, {r0, r1}

  (*pc_idx)++;
 8004374:	6833      	ldr	r3, [r6, #0]
 8004376:	3301      	adds	r3, #1
 8004378:	6033      	str	r3, [r6, #0]
}
 800437a:	b002      	add	sp, #8
 800437c:	bd70      	pop	{r4, r5, r6, pc}
void eval_pop (vmc_t *vmc, INT *pc_idx){
  cam_register_t r;
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &r);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 800437e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004382:	6033      	str	r3, [r6, #0]
    return;
  }
  vmc->contexts[vmc->current_running_context_id].env = r;

  (*pc_idx)++;
}
 8004384:	b002      	add	sp, #8
 8004386:	bd70      	pop	{r4, r5, r6, pc}
	...

08004390 <eval_eq_bool>:
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;

}

void eval_eq_bool(vmc_t *vmc, INT *pc_idx) {
 8004390:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004392:	680b      	ldr	r3, [r1, #0]
 8004394:	3301      	adds	r3, #1
 8004396:	600b      	str	r3, [r1, #0]
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;

}

void eval_eq_bool(vmc_t *vmc, INT *pc_idx) {
 8004398:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env; // bool represented using uint
 800439a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800439e:	1c43      	adds	r3, r0, #1
 80043a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80043a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;

}

void eval_eq_bool(vmc_t *vmc, INT *pc_idx) {
 80043a8:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env; // bool represented using uint
 80043aa:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80043ae:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_eq_bool(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env; // bool represented using uint
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
 80043b2:	2500      	movs	r5, #0
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;

}

void eval_eq_bool(vmc_t *vmc, INT *pc_idx) {
 80043b4:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env; // bool represented using uint
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80043b6:	303c      	adds	r0, #60	; 0x3c
 80043b8:	4669      	mov	r1, sp

}

void eval_eq_bool(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env; // bool represented using uint
 80043ba:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
 80043bc:	f8ad 5000 	strh.w	r5, [sp]
 80043c0:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80043c2:	f004 f93d 	bl	8008640 <stack_pop>
  if(i == 0){
 80043c6:	b178      	cbz	r0, 80043e8 <eval_eq_bool+0x58>
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value == e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80043c8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value == e.value };
 80043cc:	9a01      	ldr	r2, [sp, #4]
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80043ce:	3301      	adds	r3, #1
 80043d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	18e1      	adds	r1, r4, r3
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value == e.value };
 80043d8:	1bd7      	subs	r7, r2, r7
 80043da:	fab7 f787 	clz	r7, r7
 80043de:	097f      	lsrs	r7, r7, #5
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80043e0:	52e5      	strh	r5, [r4, r3]
 80043e2:	604f      	str	r7, [r1, #4]
}
 80043e4:	b003      	add	sp, #12
 80043e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env; // bool represented using uint
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 80043e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043ec:	6033      	str	r3, [r6, #0]
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value == e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 80043ee:	b003      	add	sp, #12
 80043f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043f2:	bf00      	nop
	...

08004400 <eval_eqf>:
  temp3 = temp1 == temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_eqf(vmc_t *vmc, INT *pc_idx) {
 8004400:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004402:	680b      	ldr	r3, [r1, #0]
 8004404:	3301      	adds	r3, #1
 8004406:	600b      	str	r3, [r1, #0]
  temp3 = temp1 == temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_eqf(vmc_t *vmc, INT *pc_idx) {
 8004408:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800440a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800440e:	1c43      	adds	r3, r0, #1
 8004410:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004414:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  temp3 = temp1 == temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_eqf(vmc_t *vmc, INT *pc_idx) {
 8004418:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800441a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 800441e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_eqf(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004422:	2500      	movs	r5, #0
  temp3 = temp1 == temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_eqf(vmc_t *vmc, INT *pc_idx) {
 8004424:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004426:	303c      	adds	r0, #60	; 0x3c
 8004428:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_eqf(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800442a:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 800442c:	f8ad 5000 	strh.w	r5, [sp]
 8004430:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004432:	f004 f905 	bl	8008640 <stack_pop>
  if(i == 0){
 8004436:	b1b8      	cbz	r0, 8004468 <eval_eqf+0x68>
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 == temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004438:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  float temp2;
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 == temp2;
 800443c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004440:	ee07 7a90 	vmov	s15, r7
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004444:	3301      	adds	r3, #1
 8004446:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800444a:	011b      	lsls	r3, r3, #4
  float temp2;
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 == temp2;
 800444c:	eef4 7a47 	vcmp.f32	s15, s14
 8004450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004454:	eb04 0203 	add.w	r2, r4, r3
  float temp2;
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 == temp2;
 8004458:	bf0c      	ite	eq
 800445a:	f04f 517e 	moveq.w	r1, #1065353216	; 0x3f800000
 800445e:	2100      	movne	r1, #0
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004460:	52e5      	strh	r5, [r4, r3]
 8004462:	6051      	str	r1, [r2, #4]

}
 8004464:	b003      	add	sp, #12
 8004466:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8004468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800446c:	6033      	str	r3, [r6, #0]
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 == temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;

}
 800446e:	b003      	add	sp, #12
 8004470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004472:	bf00      	nop
	...

08004480 <eval_eq_signedi>:
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value == e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_eq_signedi(vmc_t *vmc, INT *pc_idx) {
 8004480:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004482:	680b      	ldr	r3, [r1, #0]
 8004484:	3301      	adds	r3, #1
 8004486:	600b      	str	r3, [r1, #0]
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value == e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_eq_signedi(vmc_t *vmc, INT *pc_idx) {
 8004488:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800448a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800448e:	1c43      	adds	r3, r0, #1
 8004490:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004494:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value == e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_eq_signedi(vmc_t *vmc, INT *pc_idx) {
 8004498:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800449a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 800449e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_eq_signedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 80044a2:	2500      	movs	r5, #0
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value == e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_eq_signedi(vmc_t *vmc, INT *pc_idx) {
 80044a4:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80044a6:	303c      	adds	r0, #60	; 0x3c
 80044a8:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_eq_signedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80044aa:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 80044ac:	f8ad 5000 	strh.w	r5, [sp]
 80044b0:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80044b2:	f004 f8c5 	bl	8008640 <stack_pop>
  if(i == 0){
 80044b6:	b178      	cbz	r0, 80044d8 <eval_eq_signedi+0x58>
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 == temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80044b8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 == temp2;
 80044bc:	9a01      	ldr	r2, [sp, #4]
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80044be:	3301      	adds	r3, #1
 80044c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	18e1      	adds	r1, r4, r3
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 == temp2;
 80044c8:	1bd7      	subs	r7, r2, r7
 80044ca:	fab7 f787 	clz	r7, r7
 80044ce:	097f      	lsrs	r7, r7, #5
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80044d0:	52e5      	strh	r5, [r4, r3]
 80044d2:	604f      	str	r7, [r1, #4]
}
 80044d4:	b003      	add	sp, #12
 80044d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 80044d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044dc:	6033      	str	r3, [r6, #0]
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 == temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 80044de:	b003      	add	sp, #12
 80044e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044e2:	bf00      	nop
	...

080044f0 <eval_eq_unsignedi>:
}


// Equality on base types

void eval_eq_unsignedi(vmc_t *vmc, INT *pc_idx) {
 80044f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 80044f2:	680b      	ldr	r3, [r1, #0]
 80044f4:	3301      	adds	r3, #1
 80044f6:	600b      	str	r3, [r1, #0]
}


// Equality on base types

void eval_eq_unsignedi(vmc_t *vmc, INT *pc_idx) {
 80044f8:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80044fa:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80044fe:	1c43      	adds	r3, r0, #1
 8004500:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004504:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}


// Equality on base types

void eval_eq_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004508:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800450a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 800450e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
// Equality on base types

void eval_eq_unsignedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004512:	2500      	movs	r5, #0
}


// Equality on base types

void eval_eq_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004514:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004516:	303c      	adds	r0, #60	; 0x3c
 8004518:	4669      	mov	r1, sp

// Equality on base types

void eval_eq_unsignedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800451a:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 800451c:	f8ad 5000 	strh.w	r5, [sp]
 8004520:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004522:	f004 f88d 	bl	8008640 <stack_pop>
  if(i == 0){
 8004526:	b178      	cbz	r0, 8004548 <eval_eq_unsignedi+0x58>
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value == e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004528:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value == e.value };
 800452c:	9a01      	ldr	r2, [sp, #4]
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 800452e:	3301      	adds	r3, #1
 8004530:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	18e1      	adds	r1, r4, r3
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value == e.value };
 8004538:	1bd7      	subs	r7, r2, r7
 800453a:	fab7 f787 	clz	r7, r7
 800453e:	097f      	lsrs	r7, r7, #5
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004540:	52e5      	strh	r5, [r4, r3]
 8004542:	604f      	str	r7, [r1, #4]
}
 8004544:	b003      	add	sp, #12
 8004546:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8004548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800454c:	6033      	str	r3, [r6, #0]
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value == e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 800454e:	b003      	add	sp, #12
 8004550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004552:	bf00      	nop
	...

08004560 <eval_lef>:
  temp3 = temp1 >= temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_lef(vmc_t *vmc, INT *pc_idx) {
 8004560:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004562:	680b      	ldr	r3, [r1, #0]
 8004564:	3301      	adds	r3, #1
 8004566:	600b      	str	r3, [r1, #0]
  temp3 = temp1 >= temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_lef(vmc_t *vmc, INT *pc_idx) {
 8004568:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800456a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800456e:	1c43      	adds	r3, r0, #1
 8004570:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004574:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  temp3 = temp1 >= temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_lef(vmc_t *vmc, INT *pc_idx) {
 8004578:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800457a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 800457e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_lef(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004582:	2500      	movs	r5, #0
  temp3 = temp1 >= temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_lef(vmc_t *vmc, INT *pc_idx) {
 8004584:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004586:	303c      	adds	r0, #60	; 0x3c
 8004588:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_lef(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800458a:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 800458c:	f8ad 5000 	strh.w	r5, [sp]
 8004590:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004592:	f004 f855 	bl	8008640 <stack_pop>
  if(i == 0){
 8004596:	b1b8      	cbz	r0, 80045c8 <eval_lef+0x68>
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 <= temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004598:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  float temp2;
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 <= temp2;
 800459c:	ed9d 7a01 	vldr	s14, [sp, #4]
 80045a0:	ee07 7a90 	vmov	s15, r7
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80045a4:	3301      	adds	r3, #1
 80045a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80045aa:	011b      	lsls	r3, r3, #4
  float temp2;
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 <= temp2;
 80045ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80045b4:	eb04 0203 	add.w	r2, r4, r3
  float temp2;
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 <= temp2;
 80045b8:	bfac      	ite	ge
 80045ba:	f04f 517e 	movge.w	r1, #1065353216	; 0x3f800000
 80045be:	2100      	movlt	r1, #0
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80045c0:	52e5      	strh	r5, [r4, r3]
 80045c2:	6051      	str	r1, [r2, #4]
}
 80045c4:	b003      	add	sp, #12
 80045c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 80045c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045cc:	6033      	str	r3, [r6, #0]
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 <= temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 80045ce:	b003      	add	sp, #12
 80045d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d2:	bf00      	nop
	...

080045e0 <eval_gef>:
  temp3 = temp1 < temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_gef(vmc_t *vmc, INT *pc_idx) {
 80045e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 80045e2:	680b      	ldr	r3, [r1, #0]
 80045e4:	3301      	adds	r3, #1
 80045e6:	600b      	str	r3, [r1, #0]
  temp3 = temp1 < temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_gef(vmc_t *vmc, INT *pc_idx) {
 80045e8:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80045ea:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80045ee:	1c43      	adds	r3, r0, #1
 80045f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80045f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  temp3 = temp1 < temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_gef(vmc_t *vmc, INT *pc_idx) {
 80045f8:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80045fa:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80045fe:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_gef(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004602:	2500      	movs	r5, #0
  temp3 = temp1 < temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_gef(vmc_t *vmc, INT *pc_idx) {
 8004604:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004606:	303c      	adds	r0, #60	; 0x3c
 8004608:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_gef(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800460a:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 800460c:	f8ad 5000 	strh.w	r5, [sp]
 8004610:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004612:	f004 f815 	bl	8008640 <stack_pop>
  if(i == 0){
 8004616:	b1b8      	cbz	r0, 8004648 <eval_gef+0x68>
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 >= temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004618:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  float temp2;
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 >= temp2;
 800461c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004620:	ee07 7a90 	vmov	s15, r7
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004624:	3301      	adds	r3, #1
 8004626:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800462a:	011b      	lsls	r3, r3, #4
  float temp2;
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 >= temp2;
 800462c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004634:	eb04 0203 	add.w	r2, r4, r3
  float temp2;
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 >= temp2;
 8004638:	bf94      	ite	ls
 800463a:	f04f 517e 	movls.w	r1, #1065353216	; 0x3f800000
 800463e:	2100      	movhi	r1, #0
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004640:	52e5      	strh	r5, [r4, r3]
 8004642:	6051      	str	r1, [r2, #4]
}
 8004644:	b003      	add	sp, #12
 8004646:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8004648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800464c:	6033      	str	r3, [r6, #0]
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 >= temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 800464e:	b003      	add	sp, #12
 8004650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004652:	bf00      	nop
	...

08004660 <eval_ltf>:
  temp3 = temp1 > temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_ltf(vmc_t *vmc, INT *pc_idx) {
 8004660:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004662:	680b      	ldr	r3, [r1, #0]
 8004664:	3301      	adds	r3, #1
 8004666:	600b      	str	r3, [r1, #0]
  temp3 = temp1 > temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_ltf(vmc_t *vmc, INT *pc_idx) {
 8004668:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800466a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800466e:	1c43      	adds	r3, r0, #1
 8004670:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004674:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  temp3 = temp1 > temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_ltf(vmc_t *vmc, INT *pc_idx) {
 8004678:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800467a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 800467e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_ltf(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004682:	2500      	movs	r5, #0
  temp3 = temp1 > temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_ltf(vmc_t *vmc, INT *pc_idx) {
 8004684:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004686:	303c      	adds	r0, #60	; 0x3c
 8004688:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_ltf(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800468a:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 800468c:	f8ad 5000 	strh.w	r5, [sp]
 8004690:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004692:	f003 ffd5 	bl	8008640 <stack_pop>
  if(i == 0){
 8004696:	b1b8      	cbz	r0, 80046c8 <eval_ltf+0x68>
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 < temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004698:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  float temp2;
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 < temp2;
 800469c:	ed9d 7a01 	vldr	s14, [sp, #4]
 80046a0:	ee07 7a90 	vmov	s15, r7
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80046a4:	3301      	adds	r3, #1
 80046a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80046aa:	011b      	lsls	r3, r3, #4
  float temp2;
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 < temp2;
 80046ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80046b4:	eb04 0203 	add.w	r2, r4, r3
  float temp2;
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 < temp2;
 80046b8:	bfcc      	ite	gt
 80046ba:	f04f 517e 	movgt.w	r1, #1065353216	; 0x3f800000
 80046be:	2100      	movle	r1, #0
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80046c0:	52e5      	strh	r5, [r4, r3]
 80046c2:	6051      	str	r1, [r2, #4]
}
 80046c4:	b003      	add	sp, #12
 80046c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 80046c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046cc:	6033      	str	r3, [r6, #0]
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 < temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 80046ce:	b003      	add	sp, #12
 80046d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046d2:	bf00      	nop
	...

080046e0 <eval_gtf>:
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;

}

void eval_gtf(vmc_t *vmc, INT *pc_idx) {
 80046e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 80046e2:	680b      	ldr	r3, [r1, #0]
 80046e4:	3301      	adds	r3, #1
 80046e6:	600b      	str	r3, [r1, #0]
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;

}

void eval_gtf(vmc_t *vmc, INT *pc_idx) {
 80046e8:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80046ea:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80046ee:	1c43      	adds	r3, r0, #1
 80046f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80046f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;

}

void eval_gtf(vmc_t *vmc, INT *pc_idx) {
 80046f8:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80046fa:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80046fe:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_gtf(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004702:	2500      	movs	r5, #0
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;

}

void eval_gtf(vmc_t *vmc, INT *pc_idx) {
 8004704:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004706:	303c      	adds	r0, #60	; 0x3c
 8004708:	4669      	mov	r1, sp

}

void eval_gtf(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800470a:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 800470c:	f8ad 5000 	strh.w	r5, [sp]
 8004710:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004712:	f003 ff95 	bl	8008640 <stack_pop>
  if(i == 0){
 8004716:	b1b8      	cbz	r0, 8004748 <eval_gtf+0x68>
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 > temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004718:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  float temp2;
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 > temp2;
 800471c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004720:	ee07 7a90 	vmov	s15, r7
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004724:	3301      	adds	r3, #1
 8004726:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800472a:	011b      	lsls	r3, r3, #4
  float temp2;
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 > temp2;
 800472c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004734:	eb04 0203 	add.w	r2, r4, r3
  float temp2;
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 > temp2;
 8004738:	bf4c      	ite	mi
 800473a:	f04f 517e 	movmi.w	r1, #1065353216	; 0x3f800000
 800473e:	2100      	movpl	r1, #0
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004740:	52e5      	strh	r5, [r4, r3]
 8004742:	6051      	str	r1, [r2, #4]
}
 8004744:	b003      	add	sp, #12
 8004746:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8004748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800474c:	6033      	str	r3, [r6, #0]
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 > temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 800474e:	b003      	add	sp, #12
 8004750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004752:	bf00      	nop
	...

08004760 <eval_le_signedi>:
  temp3 = temp1 >= temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_le_signedi(vmc_t *vmc, INT *pc_idx) {
 8004760:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004762:	680b      	ldr	r3, [r1, #0]
 8004764:	3301      	adds	r3, #1
 8004766:	600b      	str	r3, [r1, #0]
  temp3 = temp1 >= temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_le_signedi(vmc_t *vmc, INT *pc_idx) {
 8004768:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800476a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800476e:	1c43      	adds	r3, r0, #1
 8004770:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004774:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  temp3 = temp1 >= temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_le_signedi(vmc_t *vmc, INT *pc_idx) {
 8004778:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800477a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 800477e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_le_signedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004782:	2500      	movs	r5, #0
  temp3 = temp1 >= temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_le_signedi(vmc_t *vmc, INT *pc_idx) {
 8004784:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004786:	303c      	adds	r0, #60	; 0x3c
 8004788:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_le_signedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800478a:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 800478c:	f8ad 5000 	strh.w	r5, [sp]
 8004790:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004792:	f003 ff55 	bl	8008640 <stack_pop>
  if(i == 0){
 8004796:	b180      	cbz	r0, 80047ba <eval_le_signedi+0x5a>
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 <= temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004798:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 <= temp2;
 800479c:	9a01      	ldr	r2, [sp, #4]
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 800479e:	3301      	adds	r3, #1
 80047a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80047a4:	011b      	lsls	r3, r3, #4
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 <= temp2;
 80047a6:	42ba      	cmp	r2, r7
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80047a8:	eb04 0103 	add.w	r1, r4, r3
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 <= temp2;
 80047ac:	bfcc      	ite	gt
 80047ae:	2700      	movgt	r7, #0
 80047b0:	2701      	movle	r7, #1
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80047b2:	52e5      	strh	r5, [r4, r3]
 80047b4:	604f      	str	r7, [r1, #4]

}
 80047b6:	b003      	add	sp, #12
 80047b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 80047ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047be:	6033      	str	r3, [r6, #0]
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 <= temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;

}
 80047c0:	b003      	add	sp, #12
 80047c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080047d0 <eval_ge_signedi>:
  temp3 = temp1 < temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_ge_signedi(vmc_t *vmc, INT *pc_idx) {
 80047d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 80047d2:	680b      	ldr	r3, [r1, #0]
 80047d4:	3301      	adds	r3, #1
 80047d6:	600b      	str	r3, [r1, #0]
  temp3 = temp1 < temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_ge_signedi(vmc_t *vmc, INT *pc_idx) {
 80047d8:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80047da:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80047de:	1c43      	adds	r3, r0, #1
 80047e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80047e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  temp3 = temp1 < temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_ge_signedi(vmc_t *vmc, INT *pc_idx) {
 80047e8:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80047ea:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80047ee:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_ge_signedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 80047f2:	2500      	movs	r5, #0
  temp3 = temp1 < temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_ge_signedi(vmc_t *vmc, INT *pc_idx) {
 80047f4:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80047f6:	303c      	adds	r0, #60	; 0x3c
 80047f8:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_ge_signedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80047fa:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 80047fc:	f8ad 5000 	strh.w	r5, [sp]
 8004800:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004802:	f003 ff1d 	bl	8008640 <stack_pop>
  if(i == 0){
 8004806:	b180      	cbz	r0, 800482a <eval_ge_signedi+0x5a>
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 >= temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004808:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 >= temp2;
 800480c:	9a01      	ldr	r2, [sp, #4]
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 800480e:	3301      	adds	r3, #1
 8004810:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004814:	011b      	lsls	r3, r3, #4
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 >= temp2;
 8004816:	42ba      	cmp	r2, r7
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004818:	eb04 0103 	add.w	r1, r4, r3
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 >= temp2;
 800481c:	bfb4      	ite	lt
 800481e:	2700      	movlt	r7, #0
 8004820:	2701      	movge	r7, #1
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004822:	52e5      	strh	r5, [r4, r3]
 8004824:	604f      	str	r7, [r1, #4]
}
 8004826:	b003      	add	sp, #12
 8004828:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 800482a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800482e:	6033      	str	r3, [r6, #0]
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 >= temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 8004830:	b003      	add	sp, #12
 8004832:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004840 <eval_lt_signedi>:
  temp3 = temp1 > temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_lt_signedi(vmc_t *vmc, INT *pc_idx) {
 8004840:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004842:	680b      	ldr	r3, [r1, #0]
 8004844:	3301      	adds	r3, #1
 8004846:	600b      	str	r3, [r1, #0]
  temp3 = temp1 > temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_lt_signedi(vmc_t *vmc, INT *pc_idx) {
 8004848:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800484a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800484e:	1c43      	adds	r3, r0, #1
 8004850:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004854:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  temp3 = temp1 > temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_lt_signedi(vmc_t *vmc, INT *pc_idx) {
 8004858:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800485a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 800485e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_lt_signedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004862:	2500      	movs	r5, #0
  temp3 = temp1 > temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_lt_signedi(vmc_t *vmc, INT *pc_idx) {
 8004864:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004866:	303c      	adds	r0, #60	; 0x3c
 8004868:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_lt_signedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800486a:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 800486c:	f8ad 5000 	strh.w	r5, [sp]
 8004870:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004872:	f003 fee5 	bl	8008640 <stack_pop>
  if(i == 0){
 8004876:	b180      	cbz	r0, 800489a <eval_lt_signedi+0x5a>
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 < temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004878:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 < temp2;
 800487c:	9a01      	ldr	r2, [sp, #4]
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 800487e:	3301      	adds	r3, #1
 8004880:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004884:	011b      	lsls	r3, r3, #4
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 < temp2;
 8004886:	42ba      	cmp	r2, r7
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004888:	eb04 0103 	add.w	r1, r4, r3
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 < temp2;
 800488c:	bfac      	ite	ge
 800488e:	2700      	movge	r7, #0
 8004890:	2701      	movlt	r7, #1
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004892:	52e5      	strh	r5, [r4, r3]
 8004894:	604f      	str	r7, [r1, #4]
}
 8004896:	b003      	add	sp, #12
 8004898:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 800489a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800489e:	6033      	str	r3, [r6, #0]
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 < temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 80048a0:	b003      	add	sp, #12
 80048a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080048b0 <eval_gt_signedi>:
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value <= e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_gt_signedi(vmc_t *vmc, INT *pc_idx) {
 80048b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 80048b2:	680b      	ldr	r3, [r1, #0]
 80048b4:	3301      	adds	r3, #1
 80048b6:	600b      	str	r3, [r1, #0]
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value <= e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_gt_signedi(vmc_t *vmc, INT *pc_idx) {
 80048b8:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80048ba:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80048be:	1c43      	adds	r3, r0, #1
 80048c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80048c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value <= e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_gt_signedi(vmc_t *vmc, INT *pc_idx) {
 80048c8:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80048ca:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80048ce:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_gt_signedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 80048d2:	2500      	movs	r5, #0
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value <= e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_gt_signedi(vmc_t *vmc, INT *pc_idx) {
 80048d4:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80048d6:	303c      	adds	r0, #60	; 0x3c
 80048d8:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_gt_signedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80048da:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 80048dc:	f8ad 5000 	strh.w	r5, [sp]
 80048e0:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80048e2:	f003 fead 	bl	8008640 <stack_pop>
  if(i == 0){
 80048e6:	b180      	cbz	r0, 800490a <eval_gt_signedi+0x5a>
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 > temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80048e8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 > temp2;
 80048ec:	9a01      	ldr	r2, [sp, #4]
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80048ee:	3301      	adds	r3, #1
 80048f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80048f4:	011b      	lsls	r3, r3, #4
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 > temp2;
 80048f6:	42ba      	cmp	r2, r7
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80048f8:	eb04 0103 	add.w	r1, r4, r3
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 > temp2;
 80048fc:	bfd4      	ite	le
 80048fe:	2700      	movle	r7, #0
 8004900:	2701      	movgt	r7, #1
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004902:	52e5      	strh	r5, [r4, r3]
 8004904:	604f      	str	r7, [r1, #4]
}
 8004906:	b003      	add	sp, #12
 8004908:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 800490a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800490e:	6033      	str	r3, [r6, #0]
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 > temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 8004910:	b003      	add	sp, #12
 8004912:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004920 <eval_le_unsignedi>:
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value >= e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_le_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004920:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004922:	680b      	ldr	r3, [r1, #0]
 8004924:	3301      	adds	r3, #1
 8004926:	600b      	str	r3, [r1, #0]
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value >= e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_le_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004928:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800492a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800492e:	1c43      	adds	r3, r0, #1
 8004930:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004934:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value >= e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_le_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004938:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800493a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 800493e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_le_unsignedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
 8004942:	2500      	movs	r5, #0
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value >= e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_le_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004944:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004946:	303c      	adds	r0, #60	; 0x3c
 8004948:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_le_unsignedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800494a:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
 800494c:	f8ad 5000 	strh.w	r5, [sp]
 8004950:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004952:	f003 fe75 	bl	8008640 <stack_pop>
  if(i == 0){
 8004956:	b180      	cbz	r0, 800497a <eval_le_unsignedi+0x5a>
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value <= e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004958:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value <= e.value };
 800495c:	9a01      	ldr	r2, [sp, #4]
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 800495e:	3301      	adds	r3, #1
 8004960:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004964:	011b      	lsls	r3, r3, #4
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value <= e.value };
 8004966:	42ba      	cmp	r2, r7
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004968:	eb04 0103 	add.w	r1, r4, r3
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value <= e.value };
 800496c:	bf8c      	ite	hi
 800496e:	2700      	movhi	r7, #0
 8004970:	2701      	movls	r7, #1
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004972:	52e5      	strh	r5, [r4, r3]
 8004974:	604f      	str	r7, [r1, #4]
}
 8004976:	b003      	add	sp, #12
 8004978:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 800497a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800497e:	6033      	str	r3, [r6, #0]
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value <= e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 8004980:	b003      	add	sp, #12
 8004982:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004990 <eval_ge_unsignedi>:
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value < e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_ge_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004990:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004992:	680b      	ldr	r3, [r1, #0]
 8004994:	3301      	adds	r3, #1
 8004996:	600b      	str	r3, [r1, #0]
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value < e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_ge_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004998:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800499a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800499e:	1c43      	adds	r3, r0, #1
 80049a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80049a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value < e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_ge_unsignedi(vmc_t *vmc, INT *pc_idx) {
 80049a8:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80049aa:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80049ae:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_ge_unsignedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
 80049b2:	2500      	movs	r5, #0
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value < e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_ge_unsignedi(vmc_t *vmc, INT *pc_idx) {
 80049b4:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80049b6:	303c      	adds	r0, #60	; 0x3c
 80049b8:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_ge_unsignedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80049ba:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
 80049bc:	f8ad 5000 	strh.w	r5, [sp]
 80049c0:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80049c2:	f003 fe3d 	bl	8008640 <stack_pop>
  if(i == 0){
 80049c6:	b180      	cbz	r0, 80049ea <eval_ge_unsignedi+0x5a>
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value >= e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80049c8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value >= e.value };
 80049cc:	9a01      	ldr	r2, [sp, #4]
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80049ce:	3301      	adds	r3, #1
 80049d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80049d4:	011b      	lsls	r3, r3, #4
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value >= e.value };
 80049d6:	42ba      	cmp	r2, r7
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80049d8:	eb04 0103 	add.w	r1, r4, r3
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value >= e.value };
 80049dc:	bf34      	ite	cc
 80049de:	2700      	movcc	r7, #0
 80049e0:	2701      	movcs	r7, #1
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 80049e2:	52e5      	strh	r5, [r4, r3]
 80049e4:	604f      	str	r7, [r1, #4]
}
 80049e6:	b003      	add	sp, #12
 80049e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 80049ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049ee:	6033      	str	r3, [r6, #0]
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value >= e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 80049f0:	b003      	add	sp, #12
 80049f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004a00 <eval_lt_unsignedi>:
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value > e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_lt_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004a00:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004a02:	680b      	ldr	r3, [r1, #0]
 8004a04:	3301      	adds	r3, #1
 8004a06:	600b      	str	r3, [r1, #0]
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value > e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_lt_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004a08:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004a0a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004a0e:	1c43      	adds	r3, r0, #1
 8004a10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004a14:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value > e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_lt_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004a18:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004a1a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004a1e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_lt_unsignedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
 8004a22:	2500      	movs	r5, #0
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value > e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_lt_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004a24:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004a26:	303c      	adds	r0, #60	; 0x3c
 8004a28:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_lt_unsignedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004a2a:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
 8004a2c:	f8ad 5000 	strh.w	r5, [sp]
 8004a30:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004a32:	f003 fe05 	bl	8008640 <stack_pop>
  if(i == 0){
 8004a36:	b180      	cbz	r0, 8004a5a <eval_lt_unsignedi+0x5a>
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value < e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004a38:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value < e.value };
 8004a3c:	9a01      	ldr	r2, [sp, #4]
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004a3e:	3301      	adds	r3, #1
 8004a40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004a44:	011b      	lsls	r3, r3, #4
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value < e.value };
 8004a46:	42ba      	cmp	r2, r7
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004a48:	eb04 0103 	add.w	r1, r4, r3
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value < e.value };
 8004a4c:	bf2c      	ite	cs
 8004a4e:	2700      	movcs	r7, #0
 8004a50:	2701      	movcc	r7, #1
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004a52:	52e5      	strh	r5, [r4, r3]
 8004a54:	604f      	str	r7, [r1, #4]
}
 8004a56:	b003      	add	sp, #12
 8004a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8004a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a5e:	6033      	str	r3, [r6, #0]
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value < e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 8004a60:	b003      	add	sp, #12
 8004a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004a70 <eval_gt_unsignedi>:
  temp3 = temp1 - temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_gt_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004a70:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004a72:	680b      	ldr	r3, [r1, #0]
 8004a74:	3301      	adds	r3, #1
 8004a76:	600b      	str	r3, [r1, #0]
  temp3 = temp1 - temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_gt_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004a78:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004a7a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004a7e:	1c43      	adds	r3, r0, #1
 8004a80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004a84:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  temp3 = temp1 - temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_gt_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004a88:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004a8a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004a8e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_gt_unsignedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
 8004a92:	2500      	movs	r5, #0
  temp3 = temp1 - temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_gt_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004a94:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004a96:	303c      	adds	r0, #60	; 0x3c
 8004a98:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_gt_unsignedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004a9a:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
 8004a9c:	f8ad 5000 	strh.w	r5, [sp]
 8004aa0:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004aa2:	f003 fdcd 	bl	8008640 <stack_pop>
  if(i == 0){
 8004aa6:	b180      	cbz	r0, 8004aca <eval_gt_unsignedi+0x5a>
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value > e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004aa8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value > e.value };
 8004aac:	9a01      	ldr	r2, [sp, #4]
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004aae:	3301      	adds	r3, #1
 8004ab0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004ab4:	011b      	lsls	r3, r3, #4
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value > e.value };
 8004ab6:	42ba      	cmp	r2, r7
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004ab8:	eb04 0103 	add.w	r1, r4, r3
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value > e.value };
 8004abc:	bf94      	ite	ls
 8004abe:	2700      	movls	r7, #0
 8004ac0:	2701      	movhi	r7, #1
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004ac2:	52e5      	strh	r5, [r4, r3]
 8004ac4:	604f      	str	r7, [r1, #4]
}
 8004ac6:	b003      	add	sp, #12
 8004ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 };
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8004aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ace:	6033      	str	r3, [r6, #0]
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value > e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 8004ad0:	b003      	add	sp, #12
 8004ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004ae0 <eval_minf>:
  temp3 = temp1 * temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_minf(vmc_t *vmc, INT *pc_idx) {
 8004ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004ae2:	680b      	ldr	r3, [r1, #0]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	600b      	str	r3, [r1, #0]
  temp3 = temp1 * temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_minf(vmc_t *vmc, INT *pc_idx) {
 8004ae8:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004aea:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004aee:	1c43      	adds	r3, r0, #1
 8004af0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004af4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  temp3 = temp1 * temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_minf(vmc_t *vmc, INT *pc_idx) {
 8004af8:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004afa:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004afe:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_minf(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004b02:	2500      	movs	r5, #0
  temp3 = temp1 * temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_minf(vmc_t *vmc, INT *pc_idx) {
 8004b04:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004b06:	303c      	adds	r0, #60	; 0x3c
 8004b08:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_minf(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004b0a:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004b0c:	f8ad 5000 	strh.w	r5, [sp]
 8004b10:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004b12:	f003 fd95 	bl	8008640 <stack_pop>
  if(i == 0){
 8004b16:	b188      	cbz	r0, 8004b3c <eval_minf+0x5c>
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 - temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004b18:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 - temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
 8004b1c:	eddd 7a01 	vldr	s15, [sp, #4]
 8004b20:	ee07 7a10 	vmov	s14, r7
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004b24:	3301      	adds	r3, #1
 8004b26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004b2a:	011b      	lsls	r3, r3, #4
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 - temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
 8004b2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004b30:	18e1      	adds	r1, r4, r3
 8004b32:	52e5      	strh	r5, [r4, r3]
 8004b34:	edc1 7a01 	vstr	s15, [r1, #4]
}
 8004b38:	b003      	add	sp, #12
 8004b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8004b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b40:	6033      	str	r3, [r6, #0]
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 - temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 8004b42:	b003      	add	sp, #12
 8004b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b46:	bf00      	nop
	...

08004b50 <eval_mulf>:
  temp3 = temp1 + temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_mulf(vmc_t *vmc, INT *pc_idx) {
 8004b50:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004b52:	680b      	ldr	r3, [r1, #0]
 8004b54:	3301      	adds	r3, #1
 8004b56:	600b      	str	r3, [r1, #0]
  temp3 = temp1 + temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_mulf(vmc_t *vmc, INT *pc_idx) {
 8004b58:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004b5a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004b5e:	1c43      	adds	r3, r0, #1
 8004b60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004b64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  temp3 = temp1 + temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_mulf(vmc_t *vmc, INT *pc_idx) {
 8004b68:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004b6a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004b6e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_mulf(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004b72:	2500      	movs	r5, #0
  temp3 = temp1 + temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_mulf(vmc_t *vmc, INT *pc_idx) {
 8004b74:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004b76:	303c      	adds	r0, #60	; 0x3c
 8004b78:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_mulf(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004b7a:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004b7c:	f8ad 5000 	strh.w	r5, [sp]
 8004b80:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004b82:	f003 fd5d 	bl	8008640 <stack_pop>
  if(i == 0){
 8004b86:	b188      	cbz	r0, 8004bac <eval_mulf+0x5c>
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 * temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004b88:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 * temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
 8004b8c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004b90:	ee07 7a90 	vmov	s15, r7
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004b94:	3301      	adds	r3, #1
 8004b96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004b9a:	011b      	lsls	r3, r3, #4
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 * temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
 8004b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004ba0:	18e2      	adds	r2, r4, r3
 8004ba2:	52e5      	strh	r5, [r4, r3]
 8004ba4:	edc2 7a01 	vstr	s15, [r2, #4]
}
 8004ba8:	b003      	add	sp, #12
 8004baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8004bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bb0:	6033      	str	r3, [r6, #0]
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 * temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 8004bb2:	b003      	add	sp, #12
 8004bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bb6:	bf00      	nop
	...

08004bc0 <eval_addf>:
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}


void eval_addf(vmc_t *vmc, INT *pc_idx) {
 8004bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004bc2:	680b      	ldr	r3, [r1, #0]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	600b      	str	r3, [r1, #0]
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}


void eval_addf(vmc_t *vmc, INT *pc_idx) {
 8004bc8:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004bca:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004bce:	1c43      	adds	r3, r0, #1
 8004bd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004bd4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}


void eval_addf(vmc_t *vmc, INT *pc_idx) {
 8004bd8:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004bda:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004bde:	eb04 1000 	add.w	r0, r4, r0, lsl #4


void eval_addf(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004be2:	2500      	movs	r5, #0
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}


void eval_addf(vmc_t *vmc, INT *pc_idx) {
 8004be4:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004be6:	303c      	adds	r0, #60	; 0x3c
 8004be8:	4669      	mov	r1, sp
}


void eval_addf(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004bea:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004bec:	f8ad 5000 	strh.w	r5, [sp]
 8004bf0:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004bf2:	f003 fd25 	bl	8008640 <stack_pop>
  if(i == 0){
 8004bf6:	b188      	cbz	r0, 8004c1c <eval_addf+0x5c>
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 + temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004bf8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 + temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
 8004bfc:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004c00:	ee07 7a90 	vmov	s15, r7
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004c04:	3301      	adds	r3, #1
 8004c06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004c0a:	011b      	lsls	r3, r3, #4
  float temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 + temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
 8004c0c:	ee77 7a87 	vadd.f32	s15, s15, s14
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004c10:	18e2      	adds	r2, r4, r3
 8004c12:	52e5      	strh	r5, [r4, r3]
 8004c14:	edc2 7a01 	vstr	s15, [r2, #4]
}
 8004c18:	b003      	add	sp, #12
 8004c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8004c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c20:	6033      	str	r3, [r6, #0]
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 + temp2;
  memcpy(&final_value.value, &temp3, sizeof(float));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 8004c22:	b003      	add	sp, #12
 8004c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c26:	bf00      	nop
	...

08004c30 <eval_min_signedi>:
  temp3 = temp1 * temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_min_signedi(vmc_t *vmc, INT *pc_idx) {
 8004c30:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004c32:	680b      	ldr	r3, [r1, #0]
 8004c34:	3301      	adds	r3, #1
 8004c36:	600b      	str	r3, [r1, #0]
  temp3 = temp1 * temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_min_signedi(vmc_t *vmc, INT *pc_idx) {
 8004c38:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004c3a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004c3e:	1c43      	adds	r3, r0, #1
 8004c40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004c44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  temp3 = temp1 * temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_min_signedi(vmc_t *vmc, INT *pc_idx) {
 8004c48:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004c4a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004c4e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_min_signedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004c52:	2500      	movs	r5, #0
  temp3 = temp1 * temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_min_signedi(vmc_t *vmc, INT *pc_idx) {
 8004c54:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004c56:	303c      	adds	r0, #60	; 0x3c
 8004c58:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_min_signedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004c5a:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004c5c:	f8ad 5000 	strh.w	r5, [sp]
 8004c60:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004c62:	f003 fced 	bl	8008640 <stack_pop>
  if(i == 0){
 8004c66:	b160      	cbz	r0, 8004c82 <eval_min_signedi+0x52>
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 - temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004c68:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 - temp2;
 8004c6c:	9a01      	ldr	r2, [sp, #4]
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004c6e:	3301      	adds	r3, #1
 8004c70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	18e1      	adds	r1, r4, r3
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 - temp2;
 8004c78:	1bd7      	subs	r7, r2, r7
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004c7a:	52e5      	strh	r5, [r4, r3]
 8004c7c:	604f      	str	r7, [r1, #4]
}
 8004c7e:	b003      	add	sp, #12
 8004c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8004c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c86:	6033      	str	r3, [r6, #0]
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 - temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 8004c88:	b003      	add	sp, #12
 8004c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c8c:	0000      	movs	r0, r0
	...

08004c90 <eval_mul_signedi>:
  temp3 = temp1 + temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_mul_signedi(vmc_t *vmc, INT *pc_idx) {
 8004c90:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004c92:	680b      	ldr	r3, [r1, #0]
 8004c94:	3301      	adds	r3, #1
 8004c96:	600b      	str	r3, [r1, #0]
  temp3 = temp1 + temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_mul_signedi(vmc_t *vmc, INT *pc_idx) {
 8004c98:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004c9a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004c9e:	1c43      	adds	r3, r0, #1
 8004ca0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004ca4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  temp3 = temp1 + temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_mul_signedi(vmc_t *vmc, INT *pc_idx) {
 8004ca8:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004caa:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004cae:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_mul_signedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004cb2:	2500      	movs	r5, #0
  temp3 = temp1 + temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_mul_signedi(vmc_t *vmc, INT *pc_idx) {
 8004cb4:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004cb6:	303c      	adds	r0, #60	; 0x3c
 8004cb8:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_mul_signedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004cba:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004cbc:	f8ad 5000 	strh.w	r5, [sp]
 8004cc0:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004cc2:	f003 fcbd 	bl	8008640 <stack_pop>
  if(i == 0){
 8004cc6:	b168      	cbz	r0, 8004ce4 <eval_mul_signedi+0x54>
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 * temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004cc8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 * temp2;
 8004ccc:	9a01      	ldr	r2, [sp, #4]
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004cce:	3301      	adds	r3, #1
 8004cd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	18e1      	adds	r1, r4, r3
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 * temp2;
 8004cd8:	fb02 f707 	mul.w	r7, r2, r7
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004cdc:	52e5      	strh	r5, [r4, r3]
 8004cde:	604f      	str	r7, [r1, #4]
}
 8004ce0:	b003      	add	sp, #12
 8004ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8004ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ce8:	6033      	str	r3, [r6, #0]
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 * temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 8004cea:	b003      	add	sp, #12
 8004cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cee:	bf00      	nop

08004cf0 <eval_add_signedi>:
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value - e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_add_signedi(vmc_t *vmc, INT *pc_idx) {
 8004cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004cf2:	680b      	ldr	r3, [r1, #0]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	600b      	str	r3, [r1, #0]
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value - e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_add_signedi(vmc_t *vmc, INT *pc_idx) {
 8004cf8:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004cfa:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004cfe:	1c43      	adds	r3, r0, #1
 8004d00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004d04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value - e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_add_signedi(vmc_t *vmc, INT *pc_idx) {
 8004d08:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004d0a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004d0e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_add_signedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004d12:	2500      	movs	r5, #0
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value - e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_add_signedi(vmc_t *vmc, INT *pc_idx) {
 8004d14:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004d16:	303c      	adds	r0, #60	; 0x3c
 8004d18:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_add_signedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004d1a:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004d1c:	f8ad 5000 	strh.w	r5, [sp]
 8004d20:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004d22:	f003 fc8d 	bl	8008640 <stack_pop>
  if(i == 0){
 8004d26:	b160      	cbz	r0, 8004d42 <eval_add_signedi+0x52>
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 + temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004d28:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 + temp2;
 8004d2c:	9a01      	ldr	r2, [sp, #4]
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004d2e:	3301      	adds	r3, #1
 8004d30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	18e1      	adds	r1, r4, r3
  INT temp2;
  INT temp3;
  cam_register_t final_value = { .flags = 0, .value = 0 };
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 + temp2;
 8004d38:	4417      	add	r7, r2
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004d3a:	52e5      	strh	r5, [r4, r3]
 8004d3c:	604f      	str	r7, [r1, #4]
}
 8004d3e:	b003      	add	sp, #12
 8004d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8004d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d46:	6033      	str	r3, [r6, #0]
  memcpy(&temp1, &hold_reg.value, sizeof(UINT));
  memcpy(&temp2, &e.value, sizeof(UINT));
  temp3 = temp1 + temp2;
  memcpy(&final_value.value, &temp3, sizeof(INT));
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 8004d48:	b003      	add	sp, #12
 8004d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d4c:	0000      	movs	r0, r0
	...

08004d50 <eval_min_unsignedi>:
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value * e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_min_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004d50:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004d52:	680b      	ldr	r3, [r1, #0]
 8004d54:	3301      	adds	r3, #1
 8004d56:	600b      	str	r3, [r1, #0]
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value * e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_min_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004d58:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004d5a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004d5e:	1c43      	adds	r3, r0, #1
 8004d60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004d64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value * e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_min_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004d68:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004d6a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004d6e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_min_unsignedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004d72:	2500      	movs	r5, #0
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value * e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_min_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004d74:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004d76:	303c      	adds	r0, #60	; 0x3c
 8004d78:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_min_unsignedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004d7a:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004d7c:	f8ad 5000 	strh.w	r5, [sp]
 8004d80:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004d82:	f003 fc5d 	bl	8008640 <stack_pop>
  if(i == 0){
 8004d86:	b160      	cbz	r0, 8004da2 <eval_min_unsignedi+0x52>
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value - e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004d88:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value - e.value };
 8004d8c:	9a01      	ldr	r2, [sp, #4]
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004d8e:	3301      	adds	r3, #1
 8004d90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	18e1      	adds	r1, r4, r3
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value - e.value };
 8004d98:	1bd7      	subs	r7, r2, r7
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004d9a:	52e5      	strh	r5, [r4, r3]
 8004d9c:	604f      	str	r7, [r1, #4]
}
 8004d9e:	b003      	add	sp, #12
 8004da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8004da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004da6:	6033      	str	r3, [r6, #0]
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value - e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 8004da8:	b003      	add	sp, #12
 8004daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dac:	0000      	movs	r0, r0
	...

08004db0 <eval_mul_unsignedi>:
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value + e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_mul_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004db0:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004db2:	680b      	ldr	r3, [r1, #0]
 8004db4:	3301      	adds	r3, #1
 8004db6:	600b      	str	r3, [r1, #0]
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value + e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_mul_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004db8:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004dba:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004dbe:	1c43      	adds	r3, r0, #1
 8004dc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004dc4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value + e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_mul_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004dc8:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004dca:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004dce:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_mul_unsignedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004dd2:	2500      	movs	r5, #0
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value + e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_mul_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004dd4:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004dd6:	303c      	adds	r0, #60	; 0x3c
 8004dd8:	4669      	mov	r1, sp
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_mul_unsignedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004dda:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004ddc:	f8ad 5000 	strh.w	r5, [sp]
 8004de0:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004de2:	f003 fc2d 	bl	8008640 <stack_pop>
  if(i == 0){
 8004de6:	b168      	cbz	r0, 8004e04 <eval_mul_unsignedi+0x54>
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value * e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004de8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value * e.value };
 8004dec:	9a01      	ldr	r2, [sp, #4]
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004dee:	3301      	adds	r3, #1
 8004df0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	18e1      	adds	r1, r4, r3
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value * e.value };
 8004df8:	fb02 f707 	mul.w	r7, r2, r7
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004dfc:	52e5      	strh	r5, [r4, r3]
 8004dfe:	604f      	str	r7, [r1, #4]
}
 8004e00:	b003      	add	sp, #12
 8004e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8004e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e08:	6033      	str	r3, [r6, #0]
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value * e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 8004e0a:	b003      	add	sp, #12
 8004e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e0e:	bf00      	nop

08004e10 <eval_add_unsignedi>:
  vmc->contexts[vmc->current_running_context_id].env = v;
  (*pc_idx)++;

}

void eval_add_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004e10:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8004e12:	680b      	ldr	r3, [r1, #0]
 8004e14:	3301      	adds	r3, #1
 8004e16:	600b      	str	r3, [r1, #0]
  vmc->contexts[vmc->current_running_context_id].env = v;
  (*pc_idx)++;

}

void eval_add_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004e18:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004e1a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004e1e:	1c43      	adds	r3, r0, #1
 8004e20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004e24:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  vmc->contexts[vmc->current_running_context_id].env = v;
  (*pc_idx)++;

}

void eval_add_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004e28:	b083      	sub	sp, #12
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004e2a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004e2e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_add_unsignedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004e32:	2500      	movs	r5, #0
  vmc->contexts[vmc->current_running_context_id].env = v;
  (*pc_idx)++;

}

void eval_add_unsignedi(vmc_t *vmc, INT *pc_idx) {
 8004e34:	460e      	mov	r6, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004e36:	303c      	adds	r0, #60	; 0x3c
 8004e38:	4669      	mov	r1, sp

}

void eval_add_unsignedi(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004e3a:	685f      	ldr	r7, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004e3c:	f8ad 5000 	strh.w	r5, [sp]
 8004e40:	9501      	str	r5, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004e42:	f003 fbfd 	bl	8008640 <stack_pop>
  if(i == 0){
 8004e46:	b160      	cbz	r0, 8004e62 <eval_add_unsignedi+0x52>
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value + e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004e48:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value + e.value };
 8004e4c:	9a01      	ldr	r2, [sp, #4]
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004e4e:	3301      	adds	r3, #1
 8004e50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	18e1      	adds	r1, r4, r3
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value + e.value };
 8004e58:	4417      	add	r7, r2
  vmc->contexts[vmc->current_running_context_id].env = final_value;
 8004e5a:	52e5      	strh	r5, [r4, r3]
 8004e5c:	604f      	str	r7, [r1, #4]
}
 8004e5e:	b003      	add	sp, #12
 8004e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8004e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e66:	6033      	str	r3, [r6, #0]
    return;
  }
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value + e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}
 8004e68:	b003      	add	sp, #12
 8004e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e6c:	0000      	movs	r0, r0
	...

08004e70 <eval_switch>:
  } else { // TRUE
    *pc_idx = (*pc_idx) + 3;
  }
}

void eval_switch(vmc_t *vmc, INT *pc_idx) {
 8004e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e74:	4605      	mov	r5, r0
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004e76:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004e7a:	1c43      	adds	r3, r0, #1
  } else { // TRUE
    *pc_idx = (*pc_idx) + 3;
  }
}

void eval_switch(vmc_t *vmc, INT *pc_idx) {
 8004e7c:	b089      	sub	sp, #36	; 0x24
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004e7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004e82:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004e86:	ac02      	add	r4, sp, #8
    *pc_idx = (*pc_idx) + 3;
  }
}

void eval_switch(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004e88:	eb05 1303 	add.w	r3, r5, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004e8c:	eb05 1000 	add.w	r0, r5, r0, lsl #4
  }
}

void eval_switch(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004e90:	2200      	movs	r2, #0
  } else { // TRUE
    *pc_idx = (*pc_idx) + 3;
  }
}

void eval_switch(vmc_t *vmc, INT *pc_idx) {
 8004e92:	460e      	mov	r6, r1
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004e94:	303c      	adds	r0, #60	; 0x3c
 8004e96:	4621      	mov	r1, r4
    *pc_idx = (*pc_idx) + 3;
  }
}

void eval_switch(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004e98:	f8d3 8004 	ldr.w	r8, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004e9c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004ea0:	9203      	str	r2, [sp, #12]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004ea2:	f003 fbcd 	bl	8008640 <stack_pop>
  if(i == 0){
 8004ea6:	b928      	cbnz	r0, 8004eb4 <eval_switch+0x44>
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8004ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eac:	6033      	str	r3, [r6, #0]
  vmc->contexts[vmc->current_running_context_id].env = env_pointer;
  heap_set(&vmc->heap, hi, hold_reg, val);

  //goto label
  *pc_idx = (INT)label_to_jump;
}
 8004eae:	b009      	add	sp, #36	; 0x24
 8004eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  heap_index closure_address = e.value; // TODO: should we do a pointer check here?
  cam_value_t tag_heap = heap_fst(&vmc->heap, closure_address);
 8004eb4:	a804      	add	r0, sp, #16
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	4642      	mov	r2, r8
  cam_value_t val = heap_snd(&vmc->heap, closure_address);
 8004eba:	af06      	add	r7, sp, #24
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  heap_index closure_address = e.value; // TODO: should we do a pointer check here?
  cam_value_t tag_heap = heap_fst(&vmc->heap, closure_address);
 8004ebc:	f003 fcf0 	bl	80088a0 <heap_fst>
  cam_value_t val = heap_snd(&vmc->heap, closure_address);
 8004ec0:	4642      	mov	r2, r8
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	f003 fcdb 	bl	8008880 <heap_snd>
  INT switch_size_idx = (*pc_idx) + 1;
 8004eca:	6832      	ldr	r2, [r6, #0]
  uint8_t switch_size = vmc->code_memory[switch_size_idx];
 8004ecc:	6a68      	ldr	r0, [r5, #36]	; 0x24

  int label_to_jump = -1;
  for(uint8_t i = (switch_size_idx + 1); i <= (switch_size_idx + (switch_size * 4)); i+=4){
 8004ece:	1c93      	adds	r3, r2, #2
    return;
  }
  heap_index closure_address = e.value; // TODO: should we do a pointer check here?
  cam_value_t tag_heap = heap_fst(&vmc->heap, closure_address);
  cam_value_t val = heap_snd(&vmc->heap, closure_address);
  INT switch_size_idx = (*pc_idx) + 1;
 8004ed0:	3201      	adds	r2, #1
  uint8_t switch_size = vmc->code_memory[switch_size_idx];

  int label_to_jump = -1;
  for(uint8_t i = (switch_size_idx + 1); i <= (switch_size_idx + (switch_size * 4)); i+=4){
 8004ed2:	b2db      	uxtb	r3, r3
  }
  heap_index closure_address = e.value; // TODO: should we do a pointer check here?
  cam_value_t tag_heap = heap_fst(&vmc->heap, closure_address);
  cam_value_t val = heap_snd(&vmc->heap, closure_address);
  INT switch_size_idx = (*pc_idx) + 1;
  uint8_t switch_size = vmc->code_memory[switch_size_idx];
 8004ed4:	f810 e002 	ldrb.w	lr, [r0, r2]

  int label_to_jump = -1;
  for(uint8_t i = (switch_size_idx + 1); i <= (switch_size_idx + (switch_size * 4)); i+=4){
 8004ed8:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8004edc:	459e      	cmp	lr, r3
 8004ede:	dbe3      	blt.n	8004ea8 <eval_switch+0x38>
 8004ee0:	f8dd c014 	ldr.w	ip, [sp, #20]
    INT lab_idx2 = i + 3;
    uint16_t label =
      (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes


    if(tag_heap.value == (UINT)tag ||
 8004ee4:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8004ee8:	e003      	b.n	8004ef2 <eval_switch+0x82>
 8004eea:	4552      	cmp	r2, sl
 8004eec:	d00f      	beq.n	8004f0e <eval_switch+0x9e>
  cam_value_t val = heap_snd(&vmc->heap, closure_address);
  INT switch_size_idx = (*pc_idx) + 1;
  uint8_t switch_size = vmc->code_memory[switch_size_idx];

  int label_to_jump = -1;
  for(uint8_t i = (switch_size_idx + 1); i <= (switch_size_idx + (switch_size * 4)); i+=4){
 8004eee:	4573      	cmp	r3, lr
 8004ef0:	dcda      	bgt.n	8004ea8 <eval_switch+0x38>
    INT tag_idx1 = i;
    INT tag_idx2 = i + 1;
    uint16_t tag =
      (vmc->code_memory[tag_idx1] << 8) | vmc->code_memory[tag_idx2]; // merge 2 bytes
 8004ef2:	18c1      	adds	r1, r0, r3
 8004ef4:	f810 b003 	ldrb.w	fp, [r0, r3]

  int label_to_jump = -1;
  for(uint8_t i = (switch_size_idx + 1); i <= (switch_size_idx + (switch_size * 4)); i+=4){
    INT tag_idx1 = i;
    INT tag_idx2 = i + 1;
    uint16_t tag =
 8004ef8:	784a      	ldrb	r2, [r1, #1]
      (vmc->code_memory[tag_idx1] << 8) | vmc->code_memory[tag_idx2]; // merge 2 bytes

    INT lab_idx1 = i + 2;
    INT lab_idx2 = i + 3;
    uint16_t label =
      (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes
 8004efa:	f891 8002 	ldrb.w	r8, [r1, #2]
 8004efe:	f891 9003 	ldrb.w	r9, [r1, #3]

  int label_to_jump = -1;
  for(uint8_t i = (switch_size_idx + 1); i <= (switch_size_idx + (switch_size * 4)); i+=4){
    INT tag_idx1 = i;
    INT tag_idx2 = i + 1;
    uint16_t tag =
 8004f02:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
  cam_value_t val = heap_snd(&vmc->heap, closure_address);
  INT switch_size_idx = (*pc_idx) + 1;
  uint8_t switch_size = vmc->code_memory[switch_size_idx];

  int label_to_jump = -1;
  for(uint8_t i = (switch_size_idx + 1); i <= (switch_size_idx + (switch_size * 4)); i+=4){
 8004f06:	3304      	adds	r3, #4
    INT lab_idx2 = i + 3;
    uint16_t label =
      (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes


    if(tag_heap.value == (UINT)tag ||
 8004f08:	4562      	cmp	r2, ip
  cam_value_t val = heap_snd(&vmc->heap, closure_address);
  INT switch_size_idx = (*pc_idx) + 1;
  uint8_t switch_size = vmc->code_memory[switch_size_idx];

  int label_to_jump = -1;
  for(uint8_t i = (switch_size_idx + 1); i <= (switch_size_idx + (switch_size * 4)); i+=4){
 8004f0a:	b2db      	uxtb	r3, r3
    INT lab_idx2 = i + 3;
    uint16_t label =
      (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes


    if(tag_heap.value == (UINT)tag ||
 8004f0c:	d1ed      	bne.n	8004eea <eval_switch+0x7a>
    DEBUG_PRINT(("Tag %u not found while switching", tag_heap.value));
    *pc_idx = -1;
    return;
  }

  heap_index hi = vmc_heap_alloc_withGC(vmc);
 8004f0e:	4628      	mov	r0, r5
 8004f10:	f000 fd56 	bl	80059c0 <vmc_heap_alloc_withGC>
  if(hi == HEAP_NULL){
 8004f14:	1c43      	adds	r3, r0, #1
    DEBUG_PRINT(("Tag %u not found while switching", tag_heap.value));
    *pc_idx = -1;
    return;
  }

  heap_index hi = vmc_heap_alloc_withGC(vmc);
 8004f16:	4602      	mov	r2, r0
  if(hi == HEAP_NULL){
 8004f18:	d0c6      	beq.n	8004ea8 <eval_switch+0x38>
    *pc_idx = -1;
    return;
  }
  cam_value_t env_pointer =
    { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
  vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 8004f1a:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8004f1e:	3301      	adds	r3, #1
  heap_set(&vmc->heap, hi, hold_reg, val);
 8004f20:	e897 0003 	ldmia.w	r7, {r0, r1}
    *pc_idx = -1;
    return;
  }
  cam_value_t env_pointer =
    { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
  vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 8004f24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
 8004f2e:	f825 e003 	strh.w	lr, [r5, r3]
  heap_set(&vmc->heap, hi, hold_reg, val);
 8004f32:	e88d 0003 	stmia.w	sp, {r0, r1}
    *pc_idx = -1;
    return;
  }
  cam_value_t env_pointer =
    { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
  vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 8004f36:	18ef      	adds	r7, r5, r3
  heap_set(&vmc->heap, hi, hold_reg, val);
 8004f38:	4611      	mov	r1, r2
    *pc_idx = -1;
    return;
  }
  cam_value_t env_pointer =
    { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
  vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 8004f3a:	607a      	str	r2, [r7, #4]
  heap_set(&vmc->heap, hi, hold_reg, val);
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004f42:	f003 fc7d 	bl	8008840 <heap_set>
      (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes


    if(tag_heap.value == (UINT)tag ||
       (UINT)tag == 65535){ //wildcard check; wildcard tag = max(uint16_t) = 65535
      label_to_jump = label;
 8004f46:	ea49 2308 	orr.w	r3, r9, r8, lsl #8
 8004f4a:	6033      	str	r3, [r6, #0]
 8004f4c:	e7af      	b.n	8004eae <eval_switch+0x3e>
 8004f4e:	bf00      	nop

08004f50 <eval_gotofalse>:
  uint16_t label = get_label(vmc, pc_idx);
  // GOTO doesn't store jump address on stack
  *pc_idx = (INT)label;
}

void eval_gotofalse(vmc_t *vmc, INT *pc_idx) {
 8004f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f52:	4604      	mov	r4, r0
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004f54:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004f5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  uint16_t label = get_label(vmc, pc_idx);
  // GOTO doesn't store jump address on stack
  *pc_idx = (INT)label;
}

void eval_gotofalse(vmc_t *vmc, INT *pc_idx) {
 8004f62:	b083      	sub	sp, #12
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004f64:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004f68:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  *pc_idx = (INT)label;
}

void eval_gotofalse(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004f6c:	2200      	movs	r2, #0
  uint16_t label = get_label(vmc, pc_idx);
  // GOTO doesn't store jump address on stack
  *pc_idx = (INT)label;
}

void eval_gotofalse(vmc_t *vmc, INT *pc_idx) {
 8004f6e:	460f      	mov	r7, r1
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004f70:	303c      	adds	r0, #60	; 0x3c
 8004f72:	4669      	mov	r1, sp
  // GOTO doesn't store jump address on stack
  *pc_idx = (INT)label;
}

void eval_gotofalse(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8004f74:	685e      	ldr	r6, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004f76:	f8ad 2000 	strh.w	r2, [sp]
 8004f7a:	9201      	str	r2, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004f7c:	f003 fb60 	bl	8008640 <stack_pop>
  if(i == 0){
 8004f80:	b1d8      	cbz	r0, 8004fba <eval_gotofalse+0x6a>
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  vmc->contexts[vmc->current_running_context_id].env = hold_reg;
 8004f82:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8004f86:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004f90:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8004f94:	e883 0003 	stmia.w	r3, {r0, r1}
  if ((e.value & 1) == 0){ // NOT SET; FALSE
 8004f98:	07f3      	lsls	r3, r6, #31
 8004f9a:	d504      	bpl.n	8004fa6 <eval_gotofalse+0x56>
    eval_goto(vmc, pc_idx);
  } else { // TRUE
    *pc_idx = (*pc_idx) + 3;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	3303      	adds	r3, #3
 8004fa0:	603b      	str	r3, [r7, #0]
  }
}
 8004fa2:	b003      	add	sp, #12
 8004fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
    (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes
 8004fa6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    eval_callrts  // 0x37 : 55
  };


uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
 8004fa8:	683b      	ldr	r3, [r7, #0]
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
    (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes
 8004faa:	4413      	add	r3, r2
 8004fac:	785a      	ldrb	r2, [r3, #1]


uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
 8004fae:	789b      	ldrb	r3, [r3, #2]
}

void eval_goto(vmc_t *vmc, INT *pc_idx) {
  uint16_t label = get_label(vmc, pc_idx);
  // GOTO doesn't store jump address on stack
  *pc_idx = (INT)label;
 8004fb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004fb4:	603b      	str	r3, [r7, #0]
  if ((e.value & 1) == 0){ // NOT SET; FALSE
    eval_goto(vmc, pc_idx);
  } else { // TRUE
    *pc_idx = (*pc_idx) + 3;
  }
}
 8004fb6:	b003      	add	sp, #12
 8004fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8004fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fbe:	603b      	str	r3, [r7, #0]
  if ((e.value & 1) == 0){ // NOT SET; FALSE
    eval_goto(vmc, pc_idx);
  } else { // TRUE
    *pc_idx = (*pc_idx) + 3;
  }
}
 8004fc0:	b003      	add	sp, #12
 8004fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004fd0 <eval_return>:

  }

}

void eval_return(vmc_t *vmc, INT *pc_idx) {
 8004fd0:	b510      	push	{r4, lr}
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004fd2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004fd6:	eb03 0343 	add.w	r3, r3, r3, lsl #1

  }

}

void eval_return(vmc_t *vmc, INT *pc_idx) {
 8004fda:	b082      	sub	sp, #8
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004fdc:	eb00 1003 	add.w	r0, r0, r3, lsl #4

  }

}

void eval_return(vmc_t *vmc, INT *pc_idx) {
 8004fe0:	460c      	mov	r4, r1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004fe2:	2300      	movs	r3, #0
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004fe4:	303c      	adds	r0, #60	; 0x3c
 8004fe6:	4669      	mov	r1, sp
  }

}

void eval_return(vmc_t *vmc, INT *pc_idx) {
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8004fe8:	f8ad 3000 	strh.w	r3, [sp]
 8004fec:	9301      	str	r3, [sp, #4]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8004fee:	f003 fb27 	bl	8008640 <stack_pop>
  if(i == 0){
 8004ff2:	b118      	cbz	r0, 8004ffc <eval_return+0x2c>
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  *pc_idx = hold_reg.value;
 8004ff4:	9b01      	ldr	r3, [sp, #4]
 8004ff6:	6023      	str	r3, [r4, #0]
}
 8004ff8:	b002      	add	sp, #8
 8004ffa:	bd10      	pop	{r4, pc}
void eval_return(vmc_t *vmc, INT *pc_idx) {
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8004ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005000:	6023      	str	r3, [r4, #0]
    return;
  }
  *pc_idx = hold_reg.value;
}
 8005002:	b002      	add	sp, #8
 8005004:	bd10      	pop	{r4, pc}
 8005006:	bf00      	nop
	...

08005010 <eval_cons>:
  (*pc_idx)++;
  cam_value_t empty_tuple = { .value = 0, .flags = 0 };
  vmc->contexts[vmc->current_running_context_id].env = empty_tuple;
}

void eval_cons(vmc_t *vmc, INT *pc_idx) {
 8005010:	b5f0      	push	{r4, r5, r6, r7, lr}
  (*pc_idx)++;
 8005012:	680b      	ldr	r3, [r1, #0]
 8005014:	3301      	adds	r3, #1
 8005016:	600b      	str	r3, [r1, #0]
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8005018:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005022:	eb00 1202 	add.w	r2, r0, r2, lsl #4
  (*pc_idx)++;
  cam_value_t empty_tuple = { .value = 0, .flags = 0 };
  vmc->contexts[vmc->current_running_context_id].env = empty_tuple;
}

void eval_cons(vmc_t *vmc, INT *pc_idx) {
 8005026:	4604      	mov	r4, r0
 8005028:	460d      	mov	r5, r1
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800502a:	e892 0003 	ldmia.w	r2, {r0, r1}
  (*pc_idx)++;
  cam_value_t empty_tuple = { .value = 0, .flags = 0 };
  vmc->contexts[vmc->current_running_context_id].env = empty_tuple;
}

void eval_cons(vmc_t *vmc, INT *pc_idx) {
 800502e:	b087      	sub	sp, #28
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8005030:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005034:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  vmc->contexts[vmc->current_running_context_id].env = empty_tuple;
}

void eval_cons(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8005038:	ae02      	add	r6, sp, #8
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 800503a:	af04      	add	r7, sp, #16
  vmc->contexts[vmc->current_running_context_id].env = empty_tuple;
}

void eval_cons(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800503c:	e886 0003 	stmia.w	r6, {r0, r1}
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8005040:	2200      	movs	r2, #0
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8005042:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8005046:	4639      	mov	r1, r7
}

void eval_cons(vmc_t *vmc, INT *pc_idx) {
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8005048:	f8ad 2010 	strh.w	r2, [sp, #16]
 800504c:	9205      	str	r2, [sp, #20]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 800504e:	f003 faf7 	bl	8008640 <stack_pop>
  if(i == 0){
 8005052:	b920      	cbnz	r0, 800505e <eval_cons+0x4e>
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 8005054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005058:	602b      	str	r3, [r5, #0]
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
    heap_set(&vmc->heap, hi, hold_reg, e);
  }
}
 800505a:	b007      	add	sp, #28
 800505c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  heap_index hi = vmc_heap_alloc_withGC(vmc);
 800505e:	4620      	mov	r0, r4
 8005060:	f000 fcae 	bl	80059c0 <vmc_heap_alloc_withGC>
  if(hi == HEAP_NULL){
 8005064:	1c43      	adds	r3, r0, #1
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  heap_index hi = vmc_heap_alloc_withGC(vmc);
 8005066:	4602      	mov	r2, r0
  if(hi == HEAP_NULL){
 8005068:	d0f4      	beq.n	8005054 <eval_cons+0x44>
  } else {
    // Assuming we have space for atleast one tuple
    // Do we check this as well?
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 800506a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800506e:	3301      	adds	r3, #1
    heap_set(&vmc->heap, hi, hold_reg, e);
 8005070:	e896 0003 	ldmia.w	r6, {r0, r1}
  } else {
    // Assuming we have space for atleast one tuple
    // Do we check this as well?
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 8005074:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 800507e:	52e6      	strh	r6, [r4, r3]
    heap_set(&vmc->heap, hi, hold_reg, e);
 8005080:	e88d 0003 	stmia.w	sp, {r0, r1}
  } else {
    // Assuming we have space for atleast one tuple
    // Do we check this as well?
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 8005084:	18e5      	adds	r5, r4, r3
    heap_set(&vmc->heap, hi, hold_reg, e);
 8005086:	4611      	mov	r1, r2
  } else {
    // Assuming we have space for atleast one tuple
    // Do we check this as well?
    cam_value_t env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = env_pointer;
 8005088:	606a      	str	r2, [r5, #4]
    heap_set(&vmc->heap, hi, hold_reg, e);
 800508a:	4620      	mov	r0, r4
 800508c:	e897 000c 	ldmia.w	r7, {r2, r3}
 8005090:	f003 fbd6 	bl	8008840 <heap_set>
  }
}
 8005094:	b007      	add	sp, #28
 8005096:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080050a0 <eval_move>:
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value == e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_move(vmc_t *vmc, INT *pc_idx){
 80050a0:	b530      	push	{r4, r5, lr}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80050a2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80050ac:	eb00 1202 	add.w	r2, r0, r2, lsl #4
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value == e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_move(vmc_t *vmc, INT *pc_idx){
 80050b0:	4604      	mov	r4, r0
 80050b2:	460d      	mov	r5, r1
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80050b4:	e892 0003 	ldmia.w	r2, {r0, r1}
  cam_register_t final_value =
    { .flags = 0, .value = hold_reg.value == e.value };
  vmc->contexts[vmc->current_running_context_id].env = final_value;
}

void eval_move(vmc_t *vmc, INT *pc_idx){
 80050b8:	b083      	sub	sp, #12
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80050ba:	e88d 0003 	stmia.w	sp, {r0, r1}
  int i = stack_push(&vmc->contexts[vmc->current_running_context_id].stack, e);
 80050be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80050c2:	eb04 1003 	add.w	r0, r4, r3, lsl #4
 80050c6:	303c      	adds	r0, #60	; 0x3c
 80050c8:	e89d 0006 	ldmia.w	sp, {r1, r2}
 80050cc:	f003 fad0 	bl	8008670 <stack_push>
  if(i == 0){
 80050d0:	b170      	cbz	r0, 80050f0 <eval_move+0x50>
    *pc_idx = -1;
    return;
  }

  cam_value_t empty_tuple = { .value = 0, .flags = 0 };
  vmc->contexts[vmc->current_running_context_id].env = empty_tuple;
 80050d2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80050d6:	3301      	adds	r3, #1
 80050d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	18e1      	adds	r1, r4, r3
 80050e0:	2200      	movs	r2, #0
 80050e2:	52e2      	strh	r2, [r4, r3]
 80050e4:	604a      	str	r2, [r1, #4]

  (*pc_idx)++;
 80050e6:	682b      	ldr	r3, [r5, #0]
 80050e8:	3301      	adds	r3, #1
 80050ea:	602b      	str	r3, [r5, #0]

}
 80050ec:	b003      	add	sp, #12
 80050ee:	bd30      	pop	{r4, r5, pc}
void eval_move(vmc_t *vmc, INT *pc_idx){
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  int i = stack_push(&vmc->contexts[vmc->current_running_context_id].stack, e);
  if(i == 0){
    DEBUG_PRINT(("Stack push has failed"));
    *pc_idx = -1;
 80050f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050f4:	602b      	str	r3, [r5, #0]
  cam_value_t empty_tuple = { .value = 0, .flags = 0 };
  vmc->contexts[vmc->current_running_context_id].env = empty_tuple;

  (*pc_idx)++;

}
 80050f6:	b003      	add	sp, #12
 80050f8:	bd30      	pop	{r4, r5, pc}
 80050fa:	bf00      	nop
 80050fc:	0000      	movs	r0, r0
	...

08005100 <eval_call>:
    return;
  }
  *pc_idx = hold_reg.value;
}

void eval_call(vmc_t *vmc, INT *pc_idx) {
 8005100:	b570      	push	{r4, r5, r6, lr}
    eval_callrts  // 0x37 : 55
  };


uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
 8005102:	680b      	ldr	r3, [r1, #0]

void eval_call(vmc_t *vmc, INT *pc_idx) {
  uint16_t label = get_label(vmc, pc_idx);
  INT jump_address = (*pc_idx) + 3; // see Jump convention at the top
  cam_value_t j_add = { .value = (UINT)jump_address };
  int i = stack_push(&vmc->contexts[vmc->current_running_context_id].stack, j_add);
 8005104:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c

uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
    (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes
 8005108:	6a45      	ldr	r5, [r0, #36]	; 0x24
    return;
  }
  *pc_idx = hold_reg.value;
}

void eval_call(vmc_t *vmc, INT *pc_idx) {
 800510a:	b082      	sub	sp, #8
  uint16_t label = get_label(vmc, pc_idx);
  INT jump_address = (*pc_idx) + 3; // see Jump convention at the top
 800510c:	1cde      	adds	r6, r3, #3
  cam_value_t j_add = { .value = (UINT)jump_address };
  int i = stack_push(&vmc->contexts[vmc->current_running_context_id].stack, j_add);
 800510e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    return;
  }
  *pc_idx = hold_reg.value;
}

void eval_call(vmc_t *vmc, INT *pc_idx) {
 8005112:	460c      	mov	r4, r1
  uint16_t label = get_label(vmc, pc_idx);
  INT jump_address = (*pc_idx) + 3; // see Jump convention at the top
  cam_value_t j_add = { .value = (UINT)jump_address };
 8005114:	2100      	movs	r1, #0
 8005116:	9601      	str	r6, [sp, #4]

uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
    (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes
 8005118:	442b      	add	r3, r5

void eval_call(vmc_t *vmc, INT *pc_idx) {
  uint16_t label = get_label(vmc, pc_idx);
  INT jump_address = (*pc_idx) + 3; // see Jump convention at the top
  cam_value_t j_add = { .value = (UINT)jump_address };
  int i = stack_push(&vmc->contexts[vmc->current_running_context_id].stack, j_add);
 800511a:	eb00 1002 	add.w	r0, r0, r2, lsl #4
}

void eval_call(vmc_t *vmc, INT *pc_idx) {
  uint16_t label = get_label(vmc, pc_idx);
  INT jump_address = (*pc_idx) + 3; // see Jump convention at the top
  cam_value_t j_add = { .value = (UINT)jump_address };
 800511e:	9100      	str	r1, [sp, #0]
  int i = stack_push(&vmc->contexts[vmc->current_running_context_id].stack, j_add);
 8005120:	aa02      	add	r2, sp, #8
 8005122:	e912 0006 	ldmdb	r2, {r1, r2}
 8005126:	303c      	adds	r0, #60	; 0x3c

uint16_t get_label(vmc_t *vmc, INT *pc_idx){
  INT lab_idx1 = (*pc_idx) + 1;
  INT lab_idx2 = (*pc_idx) + 2;
  uint16_t label =
    (vmc->code_memory[lab_idx1] << 8) | vmc->code_memory[lab_idx2]; // merge 2 bytes
 8005128:	785e      	ldrb	r6, [r3, #1]
 800512a:	789d      	ldrb	r5, [r3, #2]

void eval_call(vmc_t *vmc, INT *pc_idx) {
  uint16_t label = get_label(vmc, pc_idx);
  INT jump_address = (*pc_idx) + 3; // see Jump convention at the top
  cam_value_t j_add = { .value = (UINT)jump_address };
  int i = stack_push(&vmc->contexts[vmc->current_running_context_id].stack, j_add);
 800512c:	f003 faa0 	bl	8008670 <stack_push>
  if(i == 0){
 8005130:	b120      	cbz	r0, 800513c <eval_call+0x3c>
    DEBUG_PRINT(("Stack push has failed"));
    *pc_idx = -1;
    return;
  }
  *pc_idx = (INT)label;
 8005132:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8005136:	6025      	str	r5, [r4, #0]
}
 8005138:	b002      	add	sp, #8
 800513a:	bd70      	pop	{r4, r5, r6, pc}
  INT jump_address = (*pc_idx) + 3; // see Jump convention at the top
  cam_value_t j_add = { .value = (UINT)jump_address };
  int i = stack_push(&vmc->contexts[vmc->current_running_context_id].stack, j_add);
  if(i == 0){
    DEBUG_PRINT(("Stack push has failed"));
    *pc_idx = -1;
 800513c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005140:	6023      	str	r3, [r4, #0]
    return;
  }
  *pc_idx = (INT)label;
}
 8005142:	b002      	add	sp, #8
 8005144:	bd70      	pop	{r4, r5, r6, pc}
 8005146:	bf00      	nop
	...

08005150 <eval_app>:
    vmc->all_contexts_stopped = true;
  }

}

void eval_app(vmc_t *vmc, INT *pc_idx) {
 8005150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005154:	4604      	mov	r4, r0

  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8005156:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800515a:	1c43      	adds	r3, r0, #1
    vmc->all_contexts_stopped = true;
  }

}

void eval_app(vmc_t *vmc, INT *pc_idx) {
 800515c:	b08c      	sub	sp, #48	; 0x30

  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800515e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8005162:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005166:	ad02      	add	r5, sp, #8

}

void eval_app(vmc_t *vmc, INT *pc_idx) {

  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8005168:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 800516c:	eb04 1000 	add.w	r0, r4, r0, lsl #4
}

void eval_app(vmc_t *vmc, INT *pc_idx) {

  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 8005170:	2600      	movs	r6, #0
    vmc->all_contexts_stopped = true;
  }

}

void eval_app(vmc_t *vmc, INT *pc_idx) {
 8005172:	460f      	mov	r7, r1

  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8005174:	303c      	adds	r0, #60	; 0x3c
 8005176:	4629      	mov	r1, r5

}

void eval_app(vmc_t *vmc, INT *pc_idx) {

  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8005178:	f8d3 8004 	ldr.w	r8, [r3, #4]
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 800517c:	f8ad 6008 	strh.w	r6, [sp, #8]
 8005180:	9603      	str	r6, [sp, #12]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8005182:	f003 fa5d 	bl	8008640 <stack_pop>
  if(i == 0){
 8005186:	b928      	cbnz	r0, 8005194 <eval_app+0x44>
    cam_value_t label = heap_s;

    heap_index hi = vmc_heap_alloc_withGC(vmc);
    if(hi == HEAP_NULL){
      DEBUG_PRINT(("Heap allocation has failed"));
      *pc_idx = -1;
 8005188:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800518c:	603b      	str	r3, [r7, #0]
    }
    *pc_idx = (INT)label.value;

  }

}
 800518e:	b00c      	add	sp, #48	; 0x30
 8005190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }

  heap_index closure_address = e.value; // TODO: should we do a pointer check here?
                                        // closure or combinator, the if checks that

  cam_value_t heap_f = heap_fst(&vmc->heap, closure_address);
 8005194:	f10d 0910 	add.w	r9, sp, #16
 8005198:	4642      	mov	r2, r8
 800519a:	4648      	mov	r0, r9
 800519c:	4621      	mov	r1, r4
 800519e:	f003 fb7f 	bl	80088a0 <heap_fst>
  cam_value_t heap_s = heap_snd(&vmc->heap, closure_address);
 80051a2:	4642      	mov	r2, r8
 80051a4:	a806      	add	r0, sp, #24
 80051a6:	4621      	mov	r1, r4
  }

  heap_index closure_address = e.value; // TODO: should we do a pointer check here?
                                        // closure or combinator, the if checks that

  cam_value_t heap_f = heap_fst(&vmc->heap, closure_address);
 80051a8:	f8dd a014 	ldr.w	sl, [sp, #20]
  cam_value_t heap_s = heap_snd(&vmc->heap, closure_address);
 80051ac:	f003 fb68 	bl	8008880 <heap_snd>
 80051b0:	f8dd 801c 	ldr.w	r8, [sp, #28]

  if(heap_s.value == 4294967295){ // if combinator
 80051b4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80051b8:	d037      	beq.n	800522a <eval_app+0xda>
    }
    *pc_idx = (INT)label.value;

  } else { // not a combinator but a closure

    cam_value_t val = heap_f;
 80051ba:	e899 0003 	ldmia.w	r9, {r0, r1}
 80051be:	f10d 0a20 	add.w	sl, sp, #32
 80051c2:	e88a 0003 	stmia.w	sl, {r0, r1}
    cam_value_t label = heap_s;

    heap_index hi = vmc_heap_alloc_withGC(vmc);
 80051c6:	4620      	mov	r0, r4
 80051c8:	f000 fbfa 	bl	80059c0 <vmc_heap_alloc_withGC>
    if(hi == HEAP_NULL){
 80051cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  } else { // not a combinator but a closure

    cam_value_t val = heap_f;
    cam_value_t label = heap_s;

    heap_index hi = vmc_heap_alloc_withGC(vmc);
 80051d0:	4681      	mov	r9, r0
    if(hi == HEAP_NULL){
 80051d2:	d0d9      	beq.n	8005188 <eval_app+0x38>
      DEBUG_PRINT(("Heap allocation has failed"));
      *pc_idx = -1;
      return;
    }
    heap_set(&vmc->heap, hi, val, hold_reg);
 80051d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80051d8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80051dc:	e88d 0003 	stmia.w	sp, {r0, r1}
 80051e0:	4620      	mov	r0, r4
 80051e2:	4649      	mov	r1, r9
 80051e4:	f003 fb2c 	bl	8008840 <heap_set>
    cam_value_t new_env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = new_env_pointer;
 80051e8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c


    //jump to label
    INT jump_address = (*pc_idx) + 1; // see Jump convention at the top
    cam_value_t j_add = { .value = (UINT)jump_address };
 80051ec:	960a      	str	r6, [sp, #40]	; 0x28
      return;
    }
    heap_set(&vmc->heap, hi, val, hold_reg);
    cam_value_t new_env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = new_env_pointer;
 80051ee:	3301      	adds	r3, #1
 80051f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	18e2      	adds	r2, r4, r3
 80051f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051fc:	52e1      	strh	r1, [r4, r3]
 80051fe:	f8c2 9004 	str.w	r9, [r2, #4]


    //jump to label
    INT jump_address = (*pc_idx) + 1; // see Jump convention at the top
 8005202:	683b      	ldr	r3, [r7, #0]
    cam_value_t j_add = { .value = (UINT)jump_address };
    int j = stack_push(&vmc->contexts[vmc->current_running_context_id].stack, j_add);
 8005204:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    vmc->contexts[vmc->current_running_context_id].env = new_env_pointer;


    //jump to label
    INT jump_address = (*pc_idx) + 1; // see Jump convention at the top
 8005208:	3301      	adds	r3, #1
    cam_value_t j_add = { .value = (UINT)jump_address };
    int j = stack_push(&vmc->contexts[vmc->current_running_context_id].stack, j_add);
 800520a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    vmc->contexts[vmc->current_running_context_id].env = new_env_pointer;


    //jump to label
    INT jump_address = (*pc_idx) + 1; // see Jump convention at the top
    cam_value_t j_add = { .value = (UINT)jump_address };
 800520e:	930b      	str	r3, [sp, #44]	; 0x2c
    int j = stack_push(&vmc->contexts[vmc->current_running_context_id].stack, j_add);
 8005210:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 8005214:	ab0c      	add	r3, sp, #48	; 0x30
 8005216:	e913 0006 	ldmdb	r3, {r1, r2}
 800521a:	303c      	adds	r0, #60	; 0x3c
 800521c:	f003 fa28 	bl	8008670 <stack_push>
    if(j == 0){
 8005220:	2800      	cmp	r0, #0
 8005222:	d0b1      	beq.n	8005188 <eval_app+0x38>
      DEBUG_PRINT(("Stack push has failed"));
      *pc_idx = -1;
      return;
    }
    *pc_idx = (INT)label.value;
 8005224:	f8c7 8000 	str.w	r8, [r7]
 8005228:	e7b1      	b.n	800518e <eval_app+0x3e>

  if(heap_s.value == 4294967295){ // if combinator

    cam_value_t label = heap_f;

    vmc->contexts[vmc->current_running_context_id].env = hold_reg;
 800522a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c


    //jump to label
    INT jump_address = (*pc_idx) + 1; // see Jump convention at the top
    cam_value_t j_add = { .value = (UINT)jump_address };
 800522e:	960a      	str	r6, [sp, #40]	; 0x28

  if(heap_s.value == 4294967295){ // if combinator

    cam_value_t label = heap_f;

    vmc->contexts[vmc->current_running_context_id].env = hold_reg;
 8005230:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800523a:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 800523e:	e882 0003 	stmia.w	r2, {r0, r1}


    //jump to label
    INT jump_address = (*pc_idx) + 1; // see Jump convention at the top
 8005242:	683a      	ldr	r2, [r7, #0]
    cam_value_t j_add = { .value = (UINT)jump_address };
    int j = stack_push(&vmc->contexts[vmc->current_running_context_id].stack, j_add);
 8005244:	eb03 0343 	add.w	r3, r3, r3, lsl #1

    vmc->contexts[vmc->current_running_context_id].env = hold_reg;


    //jump to label
    INT jump_address = (*pc_idx) + 1; // see Jump convention at the top
 8005248:	3201      	adds	r2, #1
    cam_value_t j_add = { .value = (UINT)jump_address };
    int j = stack_push(&vmc->contexts[vmc->current_running_context_id].stack, j_add);
 800524a:	eb04 1003 	add.w	r0, r4, r3, lsl #4
    vmc->contexts[vmc->current_running_context_id].env = hold_reg;


    //jump to label
    INT jump_address = (*pc_idx) + 1; // see Jump convention at the top
    cam_value_t j_add = { .value = (UINT)jump_address };
 800524e:	920b      	str	r2, [sp, #44]	; 0x2c
    int j = stack_push(&vmc->contexts[vmc->current_running_context_id].stack, j_add);
 8005250:	ab0c      	add	r3, sp, #48	; 0x30
 8005252:	e913 0006 	ldmdb	r3, {r1, r2}
 8005256:	303c      	adds	r0, #60	; 0x3c
 8005258:	f003 fa0a 	bl	8008670 <stack_push>
    if(j == 0){
      DEBUG_PRINT(("Stack push has failed"));
      *pc_idx = -1;
 800525c:	2800      	cmp	r0, #0
 800525e:	bf14      	ite	ne
 8005260:	4653      	movne	r3, sl
 8005262:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	e791      	b.n	800518e <eval_app+0x3e>
 800526a:	bf00      	nop
 800526c:	0000      	movs	r0, r0
	...

08005270 <eval_stop>:
void eval_skip(vmc_t *vmc, INT *pc_idx) {
  (void)vmc;
  (*pc_idx)++;
}

void eval_stop(vmc_t *vmc, INT *pc_idx) {
 8005270:	b510      	push	{r4, lr}
  (void)pc_idx;
  vmc->context_used[vmc->current_running_context_id] = false;
 8005272:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005276:	4403      	add	r3, r0
void eval_skip(vmc_t *vmc, INT *pc_idx) {
  (void)vmc;
  (*pc_idx)++;
}

void eval_stop(vmc_t *vmc, INT *pc_idx) {
 8005278:	4604      	mov	r4, r0
  (void)pc_idx;
  vmc->context_used[vmc->current_running_context_id] = false;
 800527a:	2200      	movs	r2, #0
 800527c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  int i = dispatch(vmc);
 8005280:	f003 fa2e 	bl	80086e0 <dispatch>
}

static bool is_all_contexts_stopped(vmc_t *vmc){
  bool start = false;
  for(int i = 0; i < VMC_MAX_CONTEXTS; i++){
    start = start | vmc->context_used[i];
 8005284:	f894 10f0 	ldrb.w	r1, [r4, #240]	; 0xf0
 8005288:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
 800528c:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
 8005290:	430b      	orrs	r3, r1
  (void)pc_idx;
  vmc->context_used[vmc->current_running_context_id] = false;
  int i = dispatch(vmc);
  if(i == -1)
    DEBUG_PRINT(("Ready Queue is empty\n"));
  if(is_all_contexts_stopped(vmc)){
 8005292:	4313      	orrs	r3, r2
 8005294:	d106      	bne.n	80052a4 <eval_stop+0x34>
 8005296:	f894 30f3 	ldrb.w	r3, [r4, #243]	; 0xf3
 800529a:	b91b      	cbnz	r3, 80052a4 <eval_stop+0x34>
    vmc->all_contexts_stopped = true;
 800529c:	f241 4348 	movw	r3, #5192	; 0x1448
 80052a0:	2201      	movs	r2, #1
 80052a2:	54e2      	strb	r2, [r4, r3]
 80052a4:	bd10      	pop	{r4, pc}
 80052a6:	bf00      	nop
	...

080052b0 <get_descriptor.lto_priv.79>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 80052b0:	2902      	cmp	r1, #2
 80052b2:	d006      	beq.n	80052c2 <get_descriptor.lto_priv.79+0x12>
 80052b4:	2903      	cmp	r1, #3
 80052b6:	d006      	beq.n	80052c6 <get_descriptor.lto_priv.79+0x16>
 80052b8:	2901      	cmp	r1, #1
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
 80052ba:	4806      	ldr	r0, [pc, #24]	; (80052d4 <get_descriptor.lto_priv.79+0x24>)
 80052bc:	bf18      	it	ne
 80052be:	2000      	movne	r0, #0
 80052c0:	4770      	bx	lr
  (void)lang;
  switch (dtype) {
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
 80052c2:	4805      	ldr	r0, [pc, #20]	; (80052d8 <get_descriptor.lto_priv.79+0x28>)
 80052c4:	4770      	bx	lr
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 80052c6:	2a03      	cmp	r2, #3
      return &vcom_strings[dindex];
 80052c8:	bf9a      	itte	ls
 80052ca:	4b04      	ldrls	r3, [pc, #16]	; (80052dc <get_descriptor.lto_priv.79+0x2c>)
 80052cc:	eb03 00c2 	addls.w	r0, r3, r2, lsl #3
  }
  return NULL;
 80052d0:	2000      	movhi	r0, #0
}
 80052d2:	4770      	bx	lr
 80052d4:	0800cd50 	.word	0x0800cd50
 80052d8:	0800cd78 	.word	0x0800cd78
 80052dc:	0800cd14 	.word	0x0800cd14

080052e0 <ll_dac_read.lto_priv.71>:

/* sets bit 0 in the first byte of data to the value of the dac.
    The rest of data is cleared. */ 
static uint32_t ll_dac_read(struct ll_driver_s *this, uint8_t *data, uint32_t data_size) {
  ll_dac_driver_t *dac_driver = (ll_dac_driver_t*)this->driver_info;
  uint32_t state = dac_driver->internal.state;
 80052e0:	6803      	ldr	r3, [r0, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]

  if (data_size >= 1) {
 80052e4:	b172      	cbz	r2, 8005304 <ll_dac_read.lto_priv.71+0x24>
    data[0] = state;
  } 
  if (data_size >= 2) {
 80052e6:	2a01      	cmp	r2, #1
static uint32_t ll_dac_read(struct ll_driver_s *this, uint8_t *data, uint32_t data_size) {
  ll_dac_driver_t *dac_driver = (ll_dac_driver_t*)this->driver_info;
  uint32_t state = dac_driver->internal.state;

  if (data_size >= 1) {
    data[0] = state;
 80052e8:	700b      	strb	r3, [r1, #0]
  } 
  if (data_size >= 2) {
 80052ea:	d90b      	bls.n	8005304 <ll_dac_read.lto_priv.71+0x24>
    data[1] = state >>= 8;
 80052ec:	0a18      	lsrs	r0, r3, #8
  }
  if (data_size >= 3) {
 80052ee:	2a02      	cmp	r2, #2

  if (data_size >= 1) {
    data[0] = state;
  } 
  if (data_size >= 2) {
    data[1] = state >>= 8;
 80052f0:	7048      	strb	r0, [r1, #1]
  }
  if (data_size >= 3) {
 80052f2:	d007      	beq.n	8005304 <ll_dac_read.lto_priv.71+0x24>
    data[2] = state >>= 8;
  }
  if (data_size >= 4) {
 80052f4:	2a03      	cmp	r2, #3
  } 
  if (data_size >= 2) {
    data[1] = state >>= 8;
  }
  if (data_size >= 3) {
    data[2] = state >>= 8;
 80052f6:	ea4f 4013 	mov.w	r0, r3, lsr #16
  }
  if (data_size >= 4) {
    data[3] = state >>= 8;
 80052fa:	bf18      	it	ne
 80052fc:	0e1b      	lsrne	r3, r3, #24
  } 
  if (data_size >= 2) {
    data[1] = state >>= 8;
  }
  if (data_size >= 3) {
    data[2] = state >>= 8;
 80052fe:	7088      	strb	r0, [r1, #2]
  }
  if (data_size >= 4) {
    data[3] = state >>= 8;
 8005300:	bf18      	it	ne
 8005302:	70cb      	strbne	r3, [r1, #3]
  }

  return data_size;
}
 8005304:	4610      	mov	r0, r2
 8005306:	4770      	bx	lr
	...

08005310 <ll_dac_data_writeable.lto_priv.74>:
}

static uint32_t ll_dac_data_writeable(struct ll_driver_s *this) {
  (void) this;
  return 1;
}
 8005310:	2001      	movs	r0, #1
 8005312:	4770      	bx	lr
	...

08005320 <ll_dac_data_available.lto_priv.73>:
}

static uint32_t ll_dac_data_available(struct ll_driver_s *this) {
  (void) this;
  return 1;
}
 8005320:	2001      	movs	r0, #1
 8005322:	4770      	bx	lr
	...

08005330 <ll_dac_control.lto_priv.70>:
static uint32_t ll_dac_control(struct ll_driver_s *this, uint8_t *data, uint32_t data_size) {
  (void) this;
  (void) data;
  (void) data_size;
  return 0;
}
 8005330:	2000      	movs	r0, #0
 8005332:	4770      	bx	lr
	...

08005340 <print_it>:
/**********************************/
/* Debug printing function        */

char buf[2048];

void print_it(const char *str, va_list args) {
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  memset(buf,0,2048);
 8005342:	4c0b      	ldr	r4, [pc, #44]	; (8005370 <print_it+0x30>)
 8005344:	f44f 6500 	mov.w	r5, #2048	; 0x800
/**********************************/
/* Debug printing function        */

char buf[2048];

void print_it(const char *str, va_list args) {
 8005348:	4607      	mov	r7, r0
 800534a:	460e      	mov	r6, r1

  memset(buf,0,2048);
 800534c:	462a      	mov	r2, r5
 800534e:	4620      	mov	r0, r4
 8005350:	2100      	movs	r1, #0
 8005352:	f003 fbbd 	bl	8008ad0 <memset>

  vsnprintf(buf, 2048, str, args);
 8005356:	4629      	mov	r1, r5
 8005358:	463a      	mov	r2, r7
 800535a:	4620      	mov	r0, r4
 800535c:	4633      	mov	r3, r6
 800535e:	f003 fc3f 	bl	8008be0 <vsnprintf>

  chprintf((BaseSequentialStream *)&SDU1,"%s", buf);
 8005362:	4622      	mov	r2, r4
 8005364:	4803      	ldr	r0, [pc, #12]	; (8005374 <print_it+0x34>)
 8005366:	4904      	ldr	r1, [pc, #16]	; (8005378 <print_it+0x38>)
}
 8005368:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  memset(buf,0,2048);

  vsnprintf(buf, 2048, str, args);

  chprintf((BaseSequentialStream *)&SDU1,"%s", buf);
 800536c:	f002 bde0 	b.w	8007f30 <chprintf.constprop.34>
 8005370:	2000a5d8 	.word	0x2000a5d8
 8005374:	2000adf8 	.word	0x2000adf8
 8005378:	0800cd80 	.word	0x0800cd80
 800537c:	00000000 	.word	0x00000000

08005380 <send_message.lto_priv.69>:
static MEMORYPOOL_DECL(msg_pool4, sizeof (svm_msg_t), PORT_NATURAL_ALIGN, NULL);
#endif

chibios_interop_t chibios_interop[VMC_NUM_CONTAINERS];

static int send_message(chibios_interop_t *this, svm_msg_t msg) {
 8005380:	b082      	sub	sp, #8
 8005382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Called from within an interrupt routine */

  int r = 0;
  svm_msg_t *m = (svm_msg_t *)chPoolAllocI(this->msg_pool);
 8005386:	6804      	ldr	r4, [r0, #0]
static MEMORYPOOL_DECL(msg_pool4, sizeof (svm_msg_t), PORT_NATURAL_ALIGN, NULL);
#endif

chibios_interop_t chibios_interop[VMC_NUM_CONTAINERS];

static int send_message(chibios_interop_t *this, svm_msg_t msg) {
 8005388:	a906      	add	r1, sp, #24
 800538a:	4607      	mov	r7, r0
 800538c:	e881 000c 	stmia.w	r1, {r2, r3}
 * @iclass
 */
void *chPoolAllocI(memory_pool_t *mp) {
  void *objp;

  chDbgCheckClassI();
 8005390:	f002 f9ae 	bl	80076f0 <chDbgCheckClassI>
  chDbgCheck(mp != NULL);
 8005394:	2c00      	cmp	r4, #0
 8005396:	d043      	beq.n	8005420 <send_message.lto_priv.69+0xa0>

  objp = mp->next;
 8005398:	6826      	ldr	r6, [r4, #0]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 800539a:	2e00      	cmp	r6, #0
 800539c:	d032      	beq.n	8005404 <send_message.lto_priv.69+0x84>
    mp->next = mp->next->next;
 800539e:	6833      	ldr	r3, [r6, #0]
 80053a0:	6023      	str	r3, [r4, #0]

  int r = 0;
  svm_msg_t *m = (svm_msg_t *)chPoolAllocI(this->msg_pool);

  if (m) {
    *m = msg;
 80053a2:	ac06      	add	r4, sp, #24
 80053a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053a6:	4635      	mov	r5, r6
 80053a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053aa:	e894 0003 	ldmia.w	r4, {r0, r1}
    msg_t msg_val = chMBPostI(this->mb, (uint32_t)m);
 80053ae:	687c      	ldr	r4, [r7, #4]

  int r = 0;
  svm_msg_t *m = (svm_msg_t *)chPoolAllocI(this->msg_pool);

  if (m) {
    *m = msg;
 80053b0:	e885 0003 	stmia.w	r5, {r0, r1}
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
 80053b4:	f002 f99c 	bl	80076f0 <chDbgCheckClassI>
  chDbgCheck(mbp != NULL);
 80053b8:	2c00      	cmp	r4, #0
 80053ba:	d03b      	beq.n	8005434 <send_message.lto_priv.69+0xb4>

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 80053bc:	7d23      	ldrb	r3, [r4, #20]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d131      	bne.n	8005426 <send_message.lto_priv.69+0xa6>
 *
 * @iclass
 */
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();
 80053c2:	f002 f995 	bl	80076f0 <chDbgCheckClassI>
 80053c6:	f8d4 8000 	ldr.w	r8, [r4]
 80053ca:	6865      	ldr	r5, [r4, #4]
 *
 * @iclass
 */
static inline size_t chMBGetUsedCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();
 80053cc:	f002 f990 	bl	80076f0 <chDbgCheckClassI>
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 80053d0:	6923      	ldr	r3, [r4, #16]
 */
static inline size_t chMBGetSizeI(const mailbox_t *mbp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(mbp->top - mbp->buffer);
 80053d2:	ebc8 0205 	rsb	r2, r8, r5
 80053d6:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 80053da:	d024      	beq.n	8005426 <send_message.lto_priv.69+0xa6>
    *mbp->wrptr++ = msg;
 80053dc:	68a2      	ldr	r2, [r4, #8]
 80053de:	1d13      	adds	r3, r2, #4
 80053e0:	60a3      	str	r3, [r4, #8]
 80053e2:	6016      	str	r6, [r2, #0]
    if (mbp->wrptr >= mbp->top) {
 80053e4:	42ab      	cmp	r3, r5
      mbp->wrptr = mbp->buffer;
    }
    mbp->cnt++;
 80053e6:	6923      	ldr	r3, [r4, #16]

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
    *mbp->wrptr++ = msg;
    if (mbp->wrptr >= mbp->top) {
      mbp->wrptr = mbp->buffer;
 80053e8:	bf28      	it	cs
 80053ea:	f8c4 8008 	strcs.w	r8, [r4, #8]
    }
    mbp->cnt++;
 80053ee:	3301      	adds	r3, #1
 80053f0:	6123      	str	r3, [r4, #16]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 80053f2:	f104 0020 	add.w	r0, r4, #32
 80053f6:	f002 fd5b 	bl	8007eb0 <chThdDequeueNextI.constprop.54>
chibios_interop_t chibios_interop[VMC_NUM_CONTAINERS];

static int send_message(chibios_interop_t *this, svm_msg_t msg) {
  /* Called from within an interrupt routine */

  int r = 0;
 80053fa:	2000      	movs	r0, #0
    }
  }


  return r;
}
 80053fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005400:	b002      	add	sp, #8
 8005402:	4770      	bx	lr
  }
  else if (mp->provider != NULL) {
 8005404:	68e3      	ldr	r3, [r4, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f7      	beq.n	80053fa <send_message.lto_priv.69+0x7a>
    objp = mp->provider(mp->object_size, mp->align);
 800540a:	6860      	ldr	r0, [r4, #4]
 800540c:	68a1      	ldr	r1, [r4, #8]
 800540e:	4798      	blx	r3

    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 8005410:	68a3      	ldr	r3, [r4, #8]
 8005412:	3b01      	subs	r3, #1
 8005414:	4218      	tst	r0, r3
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
    mp->next = mp->next->next;
  }
  else if (mp->provider != NULL) {
    objp = mp->provider(mp->object_size, mp->align);
 8005416:	4606      	mov	r6, r0

    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 8005418:	d102      	bne.n	8005420 <send_message.lto_priv.69+0xa0>
  /* Called from within an interrupt routine */

  int r = 0;
  svm_msg_t *m = (svm_msg_t *)chPoolAllocI(this->msg_pool);

  if (m) {
 800541a:	2800      	cmp	r0, #0
 800541c:	d0ed      	beq.n	80053fa <send_message.lto_priv.69+0x7a>
 800541e:	e7c0      	b.n	80053a2 <send_message.lto_priv.69+0x22>
 */
void *chPoolAllocI(memory_pool_t *mp) {
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);
 8005420:	4806      	ldr	r0, [pc, #24]	; (800543c <send_message.lto_priv.69+0xbc>)
 8005422:	f002 f935 	bl	8007690 <chSysHalt>
    *m = msg;
    msg_t msg_val = chMBPostI(this->mb, (uint32_t)m);
    if (msg_val != MSG_OK) {
      chPoolFree(this->msg_pool, (void*)m);
 8005426:	6838      	ldr	r0, [r7, #0]
 8005428:	4631      	mov	r1, r6
 800542a:	f001 fe11 	bl	8007050 <chPoolFree>
      r = -1;
 800542e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005432:	e7e3      	b.n	80053fc <send_message.lto_priv.69+0x7c>
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);
 8005434:	4802      	ldr	r0, [pc, #8]	; (8005440 <send_message.lto_priv.69+0xc0>)
 8005436:	f002 f92b 	bl	8007690 <chSysHalt>
 800543a:	bf00      	nop
 800543c:	0800cd34 	.word	0x0800cd34
 8005440:	0800cf58 	.word	0x0800cf58
	...

08005450 <dbg_print>:

/* TODO: This is broken
   possibly resolve by using some function stdarg
   vsnprintf for example.
*/
void dbg_print(const char *str, ...) {
 8005450:	b40f      	push	{r0, r1, r2, r3}
 8005452:	b500      	push	{lr}
  va_list args;

  if (dbg_print_fun != NULL) {
 8005454:	4b06      	ldr	r3, [pc, #24]	; (8005470 <dbg_print+0x20>)
 8005456:	681b      	ldr	r3, [r3, #0]

/* TODO: This is broken
   possibly resolve by using some function stdarg
   vsnprintf for example.
*/
void dbg_print(const char *str, ...) {
 8005458:	b083      	sub	sp, #12
  va_list args;

  if (dbg_print_fun != NULL) {
 800545a:	b123      	cbz	r3, 8005466 <dbg_print+0x16>
    va_start(args, str);
 800545c:	aa05      	add	r2, sp, #20
    dbg_print_fun(str, args);
 800545e:	4611      	mov	r1, r2
 8005460:	9804      	ldr	r0, [sp, #16]
*/
void dbg_print(const char *str, ...) {
  va_list args;

  if (dbg_print_fun != NULL) {
    va_start(args, str);
 8005462:	9201      	str	r2, [sp, #4]
    dbg_print_fun(str, args);
 8005464:	4798      	blx	r3
    va_end(args);
  }
}
 8005466:	b003      	add	sp, #12
 8005468:	f85d eb04 	ldr.w	lr, [sp], #4
 800546c:	b004      	add	sp, #16
 800546e:	4770      	bx	lr
 8005470:	20009f60 	.word	0x20009f60
	...

08005480 <sof_handler.lto_priv.80>:
}

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8005480:	b530      	push	{r4, r5, lr}
 8005482:	2320      	movs	r3, #32
 8005484:	b083      	sub	sp, #12
 8005486:	f383 8811 	msr	BASEPRI, r3
 */
void sduSOFHookI(SerialUSBDriver *sdup) {

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800548a:	4c25      	ldr	r4, [pc, #148]	; (8005520 <sof_handler.lto_priv.80+0xa0>)
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 800548c:	f002 f988 	bl	80077a0 <_dbg_check_lock_from_isr>
 8005490:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8005494:	6813      	ldr	r3, [r2, #0]
 8005496:	7819      	ldrb	r1, [r3, #0]
 8005498:	2904      	cmp	r1, #4
 800549a:	d006      	beq.n	80054aa <sof_handler.lto_priv.80+0x2a>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800549c:	f002 f968 	bl	8007770 <_dbg_check_unlock_from_isr>
 80054a0:	2300      	movs	r3, #0
 80054a2:	f383 8811 	msr	BASEPRI, r3
  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&SDU1);
  osalSysUnlockFromISR();
}
 80054a6:	b003      	add	sp, #12
 80054a8:	bd30      	pop	{r4, r5, pc}
 80054aa:	7a21      	ldrb	r1, [r4, #8]
 80054ac:	2902      	cmp	r1, #2
 80054ae:	d1f5      	bne.n	800549c <sof_handler.lto_priv.80+0x1c>
    return;
  }

  /* If there is already a transaction ongoing then another one cannot be
     started.*/
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80054b0:	7911      	ldrb	r1, [r2, #4]
 80054b2:	891a      	ldrh	r2, [r3, #8]
 80054b4:	2301      	movs	r3, #1
 80054b6:	408b      	lsls	r3, r1
 80054b8:	4213      	tst	r3, r2
 80054ba:	d1ef      	bne.n	800549c <sof_handler.lto_priv.80+0x1c>
 *
 * @iclass
 */
bool obqTryFlushI(output_buffers_queue_t *obqp) {

  osalDbgCheckClassI();
 80054bc:	f002 f918 	bl	80076f0 <chDbgCheckClassI>

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 80054c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80054c2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d1e9      	bne.n	800549c <sof_handler.lto_priv.80+0x1c>
 80054c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80054ca:	2a00      	cmp	r2, #0
 80054cc:	d0e6      	beq.n	800549c <sof_handler.lto_priv.80+0x1c>
 80054ce:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80054d0:	2a00      	cmp	r2, #0
 80054d2:	d0e3      	beq.n	800549c <sof_handler.lto_priv.80+0x1c>
 80054d4:	3a04      	subs	r2, #4
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));

    if (size > 0U) {
 80054d6:	1ad2      	subs	r2, r2, r3
 80054d8:	d0e0      	beq.n	800549c <sof_handler.lto_priv.80+0x1c>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 80054da:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
 80054dc:	6e22      	ldr	r2, [r4, #96]	; 0x60
      if (obqp->bwrptr >= obqp->btop) {
 80054de:	6de0      	ldr	r0, [r4, #92]	; 0x5c

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 80054e0:	6d21      	ldr	r1, [r4, #80]	; 0x50
      if (obqp->bwrptr >= obqp->btop) {
        obqp->bwrptr = obqp->buffers;
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 80054e2:	4d0f      	ldr	r5, [pc, #60]	; (8005520 <sof_handler.lto_priv.80+0xa0>)
      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
 80054e4:	4413      	add	r3, r2
      if (obqp->bwrptr >= obqp->btop) {
 80054e6:	4283      	cmp	r3, r0
      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
 80054e8:	6563      	str	r3, [r4, #84]	; 0x54

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 80054ea:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
      obqp->bwrptr += obqp->bsize;
      if (obqp->bwrptr >= obqp->btop) {
        obqp->bwrptr = obqp->buffers;
 80054ee:	bf28      	it	cs
 80054f0:	6ea3      	ldrcs	r3, [r4, #104]	; 0x68

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 80054f2:	6521      	str	r1, [r4, #80]	; 0x50
      obqp->bwrptr += obqp->bsize;
      if (obqp->bwrptr >= obqp->btop) {
        obqp->bwrptr = obqp->buffers;
 80054f4:	bf28      	it	cs
 80054f6:	6563      	strcs	r3, [r4, #84]	; 0x54

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
    size_t n;
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80054f8:	f105 0044 	add.w	r0, r5, #68	; 0x44
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 80054fc:	2300      	movs	r3, #0
 80054fe:	a901      	add	r1, sp, #4
 8005500:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005502:	f7fc fc45 	bl	8001d90 <obqGetFullBufferI>

    osalDbgAssert(buf != NULL, "queue is empty");
 8005506:	4602      	mov	r2, r0
 8005508:	b138      	cbz	r0, 800551a <sof_handler.lto_priv.80+0x9a>

    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 800550a:	f8d5 148c 	ldr.w	r1, [r5, #1164]	; 0x48c
 800550e:	9b01      	ldr	r3, [sp, #4]
 8005510:	6808      	ldr	r0, [r1, #0]
 8005512:	7909      	ldrb	r1, [r1, #4]
 8005514:	f7fb fff4 	bl	8001500 <usbStartTransmitI>
 8005518:	e7c0      	b.n	800549c <sof_handler.lto_priv.80+0x1c>
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
    size_t n;
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);

    osalDbgAssert(buf != NULL, "queue is empty");
 800551a:	4802      	ldr	r0, [pc, #8]	; (8005524 <sof_handler.lto_priv.80+0xa4>)
 800551c:	f002 f8b8 	bl	8007690 <chSysHalt>
 8005520:	2000adf8 	.word	0x2000adf8
 8005524:	0800cd44 	.word	0x0800cd44
	...

08005530 <usb_event.lto_priv.78>:
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8005530:	b538      	push	{r3, r4, r5, lr}
  extern SerialUSBDriver SDU1;

  switch (event) {
 8005532:	2905      	cmp	r1, #5
 8005534:	d816      	bhi.n	8005564 <usb_event.lto_priv.78+0x34>
 8005536:	e8df f001 	tbb	[pc, r1]
 800553a:	1550      	.short	0x1550
 800553c:	03505016 	.word	0x03505016
 8005540:	2320      	movs	r3, #32
 8005542:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8005546:	f002 f92b 	bl	80077a0 <_dbg_check_lock_from_isr>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800554a:	4833      	ldr	r0, [pc, #204]	; (8005618 <usb_event.lto_priv.78+0xe8>)
 800554c:	2101      	movs	r1, #1
 800554e:	f001 fcff 	bl	8006f50 <chEvtBroadcastFlagsI>
 * @iclass
 */
void sduWakeupHookI(SerialUSBDriver *sdup) {

  chnAddFlagsI(sdup, CHN_CONNECTED);
  bqResumeX(&sdup->ibqueue);
 8005552:	4b32      	ldr	r3, [pc, #200]	; (800561c <usb_event.lto_priv.78+0xec>)
 8005554:	2400      	movs	r4, #0
 8005556:	751c      	strb	r4, [r3, #20]
  bqResumeX(&sdup->obqueue);
 8005558:	f883 404c 	strb.w	r4, [r3, #76]	; 0x4c
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800555c:	f002 f908 	bl	8007770 <_dbg_check_unlock_from_isr>
 8005560:	f384 8811 	msr	BASEPRI, r4
 8005564:	bd38      	pop	{r3, r4, r5, pc}
 8005566:	4605      	mov	r5, r0
 8005568:	2320      	movs	r3, #32
 800556a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 800556e:	f002 f917 	bl	80077a0 <_dbg_check_lock_from_isr>
 */
void ibqResetI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  ibqp->bcounter  = 0;
 8005572:	4c2b      	ldr	r4, [pc, #172]	; (8005620 <usb_event.lto_priv.78+0xf0>)
    chSysLockFromISR();

    /* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
    usbInitEndpointI(usbp, USB1_DATA_REQUEST_EP, &ep1config);
 8005574:	4a2b      	ldr	r2, [pc, #172]	; (8005624 <usb_event.lto_priv.78+0xf4>)
 8005576:	4628      	mov	r0, r5
 8005578:	2101      	movs	r1, #1
 800557a:	f7fc fab9 	bl	8001af0 <usbInitEndpointI>
    usbInitEndpointI(usbp, USB1_INTERRUPT_REQUEST_EP, &ep2config);
 800557e:	2102      	movs	r1, #2
 8005580:	4a29      	ldr	r2, [pc, #164]	; (8005628 <usb_event.lto_priv.78+0xf8>)
 8005582:	4628      	mov	r0, r5
 8005584:	f7fc fab4 	bl	8001af0 <usbInitEndpointI>
 8005588:	2500      	movs	r5, #0
 *
 * @iclass
 */
void ibqResetI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();
 800558a:	f002 f8b1 	bl	80076f0 <chDbgCheckClassI>

  ibqp->bcounter  = 0;
  ibqp->brdptr    = ibqp->buffers;
 800558e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005590:	6223      	str	r3, [r4, #32]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8005592:	f104 000c 	add.w	r0, r4, #12
  ibqp->bwrptr    = ibqp->buffers;
 8005596:	61e3      	str	r3, [r4, #28]
 */
void ibqResetI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  ibqp->bcounter  = 0;
 8005598:	61a5      	str	r5, [r4, #24]
  ibqp->brdptr    = ibqp->buffers;
  ibqp->bwrptr    = ibqp->buffers;
  ibqp->ptr       = NULL;
 800559a:	6365      	str	r5, [r4, #52]	; 0x34
  ibqp->top       = NULL;
 800559c:	63a5      	str	r5, [r4, #56]	; 0x38
 800559e:	f002 fc5f 	bl	8007e60 <chThdDequeueAllI.constprop.56>
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {

  ibqResetI(&sdup->ibqueue);
  bqResumeX(&sdup->ibqueue);
 80055a2:	7525      	strb	r5, [r4, #20]
 *
 * @iclass
 */
void obqResetI(output_buffers_queue_t *obqp) {

  osalDbgCheckClassI();
 80055a4:	f002 f8a4 	bl	80076f0 <chDbgCheckClassI>

  obqp->bcounter  = bqSizeX(obqp);
  obqp->brdptr    = obqp->buffers;
 80055a8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 */
void obqResetI(output_buffers_queue_t *obqp) {

  osalDbgCheckClassI();

  obqp->bcounter  = bqSizeX(obqp);
 80055aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055ac:	6522      	str	r2, [r4, #80]	; 0x50
  obqp->brdptr    = obqp->buffers;
 80055ae:	65a3      	str	r3, [r4, #88]	; 0x58
  obqp->bwrptr    = obqp->buffers;
 80055b0:	6563      	str	r3, [r4, #84]	; 0x54
 80055b2:	f104 0044 	add.w	r0, r4, #68	; 0x44
  obqp->ptr       = NULL;
 80055b6:	66e5      	str	r5, [r4, #108]	; 0x6c
  obqp->top       = NULL;
 80055b8:	6725      	str	r5, [r4, #112]	; 0x70
 80055ba:	f002 fc51 	bl	8007e60 <chThdDequeueAllI.constprop.56>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80055be:	2101      	movs	r1, #1
 80055c0:	1d20      	adds	r0, r4, #4
  obqResetI(&sdup->obqueue);
  bqResumeX(&sdup->obqueue);
 80055c2:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 80055c6:	f001 fcc3 	bl	8006f50 <chEvtBroadcastFlagsI>
  chnAddFlagsI(sdup, CHN_CONNECTED);
  (void) sdu_start_receive(sdup);
 80055ca:	4620      	mov	r0, r4
 80055cc:	f7fc fb68 	bl	8001ca0 <sdu_start_receive.lto_priv.99>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80055d0:	f002 f8ce 	bl	8007770 <_dbg_check_unlock_from_isr>
 80055d4:	f385 8811 	msr	BASEPRI, r5
 80055d8:	bd38      	pop	{r3, r4, r5, pc}
 80055da:	2320      	movs	r3, #32
 80055dc:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
void sduSuspendHookI(SerialUSBDriver *sdup) {

  /* Avoiding events spam.*/
  if (bqIsSuspendedX(&sdup->ibqueue) && bqIsSuspendedX(&sdup->obqueue)) {
 80055e0:	4c0f      	ldr	r4, [pc, #60]	; (8005620 <usb_event.lto_priv.78+0xf0>)
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80055e2:	f002 f8dd 	bl	80077a0 <_dbg_check_lock_from_isr>
 80055e6:	7d23      	ldrb	r3, [r4, #20]
 80055e8:	b113      	cbz	r3, 80055f0 <usb_event.lto_priv.78+0xc0>
 80055ea:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80055ee:	b96b      	cbnz	r3, 800560c <usb_event.lto_priv.78+0xdc>
 80055f0:	4809      	ldr	r0, [pc, #36]	; (8005618 <usb_event.lto_priv.78+0xe8>)
 80055f2:	2102      	movs	r1, #2
 80055f4:	f001 fcac 	bl	8006f50 <chEvtBroadcastFlagsI>
    return;
  }
  chnAddFlagsI(sdup, CHN_DISCONNECTED);
  bqSuspendI(&sdup->ibqueue);
 80055f8:	2501      	movs	r5, #1
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 80055fa:	480c      	ldr	r0, [pc, #48]	; (800562c <usb_event.lto_priv.78+0xfc>)
 80055fc:	7525      	strb	r5, [r4, #20]
 80055fe:	f002 fc2f 	bl	8007e60 <chThdDequeueAllI.constprop.56>
 8005602:	480b      	ldr	r0, [pc, #44]	; (8005630 <usb_event.lto_priv.78+0x100>)
  bqSuspendI(&sdup->obqueue);
 8005604:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8005608:	f002 fc2a 	bl	8007e60 <chThdDequeueAllI.constprop.56>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800560c:	f002 f8b0 	bl	8007770 <_dbg_check_unlock_from_isr>
 8005610:	2300      	movs	r3, #0
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	bd38      	pop	{r3, r4, r5, pc}
 8005618:	2000adfc 	.word	0x2000adfc
 800561c:	2000adf8 	.word	0x2000adf8
 8005620:	2000adf8 	.word	0x2000adf8
 8005624:	0800cf34 	.word	0x0800cf34
 8005628:	0800cc88 	.word	0x0800cc88
 800562c:	2000ae04 	.word	0x2000ae04
 8005630:	2000ae3c 	.word	0x2000ae3c
	...

08005640 <ll_dac_write.lto_priv.72>:
/* data[0] will be reinterpreted as a bool */
static uint32_t ll_dac_write(struct ll_driver_s *this, uint8_t *data, uint32_t data_size) {
  ll_dac_driver_t *dac_driver = (ll_dac_driver_t*)this->driver_info;

  //  dacPutChannelX(&dac_driver->internal.dacd, 0, 4095);
  if (data_size >= 2) { 
 8005640:	2a01      	cmp	r2, #1

  return data_size;
}

/* data[0] will be reinterpreted as a bool */
static uint32_t ll_dac_write(struct ll_driver_s *this, uint8_t *data, uint32_t data_size) {
 8005642:	b538      	push	{r3, r4, r5, lr}
  ll_dac_driver_t *dac_driver = (ll_dac_driver_t*)this->driver_info;
 8005644:	6803      	ldr	r3, [r0, #0]

  //  dacPutChannelX(&dac_driver->internal.dacd, 0, 4095);
  if (data_size >= 2) { 
 8005646:	d90f      	bls.n	8005668 <ll_dac_write.lto_priv.72+0x28>
    uint16_t val = 0;
    val = data[1];
    val = val << 8;
    val |= data[0];

    dacPutChannelX(dac_driver->internal.dacd, 0, val);
 8005648:	6918      	ldr	r0, [r3, #16]
  ll_dac_driver_t *dac_driver = (ll_dac_driver_t*)this->driver_info;

  //  dacPutChannelX(&dac_driver->internal.dacd, 0, 4095);
  if (data_size >= 2) { 
    uint16_t val = 0;
    val = data[1];
 800564a:	784d      	ldrb	r5, [r1, #1]
 * @xclass
 */
void dacPutChannelX(DACDriver *dacp, dacchannel_t channel, dacsample_t sample) {

  osalDbgCheck(channel < (dacchannel_t)DAC_MAX_CHANNELS);
  osalDbgAssert(dacp->state == DAC_READY, "invalid state");
 800564c:	7803      	ldrb	r3, [r0, #0]
    val = val << 8;
    val |= data[0];
 800564e:	7809      	ldrb	r1, [r1, #0]
 8005650:	2b02      	cmp	r3, #2
 8005652:	4614      	mov	r4, r2
 8005654:	d002      	beq.n	800565c <ll_dac_write.lto_priv.72+0x1c>
 8005656:	4805      	ldr	r0, [pc, #20]	; (800566c <ll_dac_write.lto_priv.72+0x2c>)
 8005658:	f002 f81a 	bl	8007690 <chSysHalt>

  dac_lld_put_channel(dacp, channel, sample);
 800565c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8005660:	f002 fc3e 	bl	8007ee0 <dac_lld_put_channel.constprop.50>
 8005664:	4620      	mov	r0, r4
 8005666:	bd38      	pop	{r3, r4, r5, pc}

    dacPutChannelX(dac_driver->internal.dacd, 0, val);
    return data_size; 
  } 
  return 0;
 8005668:	2000      	movs	r0, #0
}
 800566a:	bd38      	pop	{r3, r4, r5, pc}
 800566c:	0800cf24 	.word	0x0800cf24

08005670 <Vector108>:

  return true;
}

OSAL_IRQ_HANDLER(COMB_EXPAND(STM32_TIM,COMB_EXPAND(SYS_TIMER, _HANDLER))) {
 8005670:	b5f0      	push	{r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();
 8005672:	4831      	ldr	r0, [pc, #196]	; (8005738 <Vector108+0xc8>)
  tim->DIER |= 0x1; /* activate interrupt on "update event" (for example overflow) */

  return true;
}

OSAL_IRQ_HANDLER(COMB_EXPAND(STM32_TIM,COMB_EXPAND(SYS_TIMER, _HANDLER))) {
 8005674:	b08b      	sub	sp, #44	; 0x2c
  OSAL_IRQ_PROLOGUE();
 8005676:	f001 ffbb 	bl	80075f0 <_trace_isr_enter>
 800567a:	f002 f861 	bl	8007740 <_dbg_check_enter_isr>

  if (tim->SR & 0x1 ) { /* This indicates and update event (overflow?) */
 800567e:	4b2f      	ldr	r3, [pc, #188]	; (800573c <Vector108+0xcc>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	07d2      	lsls	r2, r2, #31
 8005686:	d51f      	bpl.n	80056c8 <Vector108+0x58>
    /* TODO: Not 100% certain this is definitely an overflow. Couldn't it
       be other "events"?  */
    uint32_t sr = tim->SR;
 8005688:	691c      	ldr	r4, [r3, #16]
    sr &= tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 800568a:	68da      	ldr	r2, [r3, #12]
    tim->SR = ~sr; /* clear update event flag */

    counter_high_word++;
 800568c:	492c      	ldr	r1, [pc, #176]	; (8005740 <Vector108+0xd0>)

    if (alarm.active) {
 800568e:	482d      	ldr	r0, [pc, #180]	; (8005744 <Vector108+0xd4>)
 8005690:	4022      	ands	r2, r4

  if (tim->SR & 0x1 ) { /* This indicates and update event (overflow?) */
    /* TODO: Not 100% certain this is definitely an overflow. Couldn't it
       be other "events"?  */
    uint32_t sr = tim->SR;
    sr &= tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8005692:	b2d2      	uxtb	r2, r2
    tim->SR = ~sr; /* clear update event flag */
 8005694:	43d2      	mvns	r2, r2
 8005696:	611a      	str	r2, [r3, #16]

    counter_high_word++;
 8005698:	680a      	ldr	r2, [r1, #0]

    if (alarm.active) {
 800569a:	7804      	ldrb	r4, [r0, #0]
       be other "events"?  */
    uint32_t sr = tim->SR;
    sr &= tim->DIER & STM32_TIM_DIER_IRQ_MASK;
    tim->SR = ~sr; /* clear update event flag */

    counter_high_word++;
 800569c:	3201      	adds	r2, #1
 800569e:	600a      	str	r2, [r1, #0]

    if (alarm.active) {
 80056a0:	b144      	cbz	r4, 80056b4 <Vector108+0x44>
      if (counter_high_word == alarm.alarm_time >> 32) {
 80056a2:	680a      	ldr	r2, [r1, #0]
 80056a4:	68c4      	ldr	r4, [r0, #12]
 80056a6:	6886      	ldr	r6, [r0, #8]
 80056a8:	2500      	movs	r5, #0
 80056aa:	2100      	movs	r1, #0
 80056ac:	42a9      	cmp	r1, r5
 80056ae:	bf08      	it	eq
 80056b0:	42a2      	cmpeq	r2, r4
 80056b2:	d03b      	beq.n	800572c <Vector108+0xbc>
    osalSysUnlockFromISR();

    alarm.active = false;

  }
  OSAL_IRQ_EPILOGUE();
 80056b4:	f002 f82c 	bl	8007710 <_dbg_check_leave_isr>
 80056b8:	481f      	ldr	r0, [pc, #124]	; (8005738 <Vector108+0xc8>)
 80056ba:	f001 ff79 	bl	80075b0 <_trace_isr_leave>
}
 80056be:	b00b      	add	sp, #44	; 0x2c
 80056c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    osalSysUnlockFromISR();

    alarm.active = false;

  }
  OSAL_IRQ_EPILOGUE();
 80056c4:	f001 bb14 	b.w	8006cf0 <_port_irq_epilogue>
      }
    }
  } else {


    uint32_t sr = tim->SR;
 80056c8:	6918      	ldr	r0, [r3, #16]
    sr &= tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	491c      	ldr	r1, [pc, #112]	; (8005740 <Vector108+0xd0>)
 80056ce:	4002      	ands	r2, r0
 80056d0:	b2d2      	uxtb	r2, r2
    tim->SR = ~sr;  /* wipe sr */
 80056d2:	43d2      	mvns	r2, r2
 80056d4:	611a      	str	r2, [r3, #16]

    tim->DIER &= ~0x2; /* disable interrupt on ccr channel 1 */
 80056d6:	68da      	ldr	r2, [r3, #12]
    
    svm_msg_t msg;
    msg.sender_id = SYS_TIME_SENDER_ID;
 80056d8:	20ff      	movs	r0, #255	; 0xff

    uint32_t sr = tim->SR;
    sr &= tim->DIER & STM32_TIM_DIER_IRQ_MASK;
    tim->SR = ~sr;  /* wipe sr */

    tim->DIER &= ~0x2; /* disable interrupt on ccr channel 1 */
 80056da:	f022 0202 	bic.w	r2, r2, #2
 80056de:	60da      	str	r2, [r3, #12]
    
    svm_msg_t msg;
    msg.sender_id = SYS_TIME_SENDER_ID;
 80056e0:	9004      	str	r0, [sp, #16]
  uint32_t low_word;
  uint32_t high_word;
  uint32_t high_word2;

  do {
    high_word = counter_high_word;
 80056e2:	680a      	ldr	r2, [r1, #0]
    low_word = tim->CNT;
 80056e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    high_word2 = counter_high_word;
 80056e6:	6808      	ldr	r0, [r1, #0]
  } while (high_word != high_word2); /* todo execute body at most twice */
 80056e8:	4282      	cmp	r2, r0
 80056ea:	d1fa      	bne.n	80056e2 <Vector108+0x72>

  time = high_word;
  time <<= 32;
 80056ec:	2600      	movs	r6, #0
  time |= low_word;
 80056ee:	ea46 0004 	orr.w	r0, r6, r4
 80056f2:	4611      	mov	r1, r2
    tim->DIER &= ~0x2; /* disable interrupt on ccr channel 1 */
    
    svm_msg_t msg;
    msg.sender_id = SYS_TIME_SENDER_ID;
    msg.timestamp = sys_time_get_current_ticks();
    msg.data = 0xDEADBEEF;
 80056f4:	4b14      	ldr	r3, [pc, #80]	; (8005748 <Vector108+0xd8>)
 80056f6:	9306      	str	r3, [sp, #24]
    msg.msg_type = 0;
 80056f8:	9605      	str	r6, [sp, #20]

    tim->DIER &= ~0x2; /* disable interrupt on ccr channel 1 */
    
    svm_msg_t msg;
    msg.sender_id = SYS_TIME_SENDER_ID;
    msg.timestamp = sys_time_get_current_ticks();
 80056fa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80056fe:	2320      	movs	r3, #32
 8005700:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8005704:	f002 f84c 	bl	80077a0 <_dbg_check_lock_from_isr>
    msg.data = 0xDEADBEEF;
    msg.msg_type = 0;

    osalSysLockFromISR();
    interop->send_message(interop, msg); /* check for error */
 8005708:	ab0a      	add	r3, sp, #40	; 0x28
 800570a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800570e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8005712:	4b0e      	ldr	r3, [pc, #56]	; (800574c <Vector108+0xdc>)
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	ab04      	add	r3, sp, #16
 8005718:	6881      	ldr	r1, [r0, #8]
 800571a:	cb0c      	ldmia	r3, {r2, r3}
 800571c:	4788      	blx	r1
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800571e:	f002 f827 	bl	8007770 <_dbg_check_unlock_from_isr>
 8005722:	f386 8811 	msr	BASEPRI, r6
    osalSysUnlockFromISR();

    alarm.active = false;
 8005726:	4b07      	ldr	r3, [pc, #28]	; (8005744 <Vector108+0xd4>)
 8005728:	701e      	strb	r6, [r3, #0]
 800572a:	e7c3      	b.n	80056b4 <Vector108+0x44>

    counter_high_word++;

    if (alarm.active) {
      if (counter_high_word == alarm.alarm_time >> 32) {
    	tim->CCR[0] = alarm.alarm_time;
 800572c:	635e      	str	r6, [r3, #52]	; 0x34
    	tim->DIER |= 0x2; /* activate interrupt on ccr channel 1 */
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	f042 0202 	orr.w	r2, r2, #2
 8005734:	60da      	str	r2, [r3, #12]
 8005736:	e7bd      	b.n	80056b4 <Vector108+0x44>
 8005738:	0800cd58 	.word	0x0800cd58
 800573c:	20000818 	.word	0x20000818
 8005740:	2000a0b4 	.word	0x2000a0b4
 8005744:	20009ef8 	.word	0x20009ef8
 8005748:	deadbeef 	.word	0xdeadbeef
 800574c:	2000a578 	.word	0x2000a578

08005750 <pq_extractMin>:
    insertIdx = parentIdx(insertIdx);
  }
  return 1;
}

int pq_extractMin(PriorityQ_t *pq, pq_data_t *pq_data){
 8005750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if(pq->size <= 0){
 8005754:	6885      	ldr	r5, [r0, #8]
 8005756:	2d00      	cmp	r5, #0
    insertIdx = parentIdx(insertIdx);
  }
  return 1;
}

int pq_extractMin(PriorityQ_t *pq, pq_data_t *pq_data){
 8005758:	b087      	sub	sp, #28
 800575a:	4684      	mov	ip, r0

  if(pq->size <= 0){
 800575c:	f340 80b4 	ble.w	80058c8 <pq_extractMin+0x178>
    DEBUG_PRINT(("Priority queue is empty\n"));
    return -1;
  }

  if(pq->size == 1){
 8005760:	2d01      	cmp	r5, #1
 8005762:	460c      	mov	r4, r1
 8005764:	f000 80a3 	beq.w	80058ae <pq_extractMin+0x15e>
    pq->size--;
    *pq_data = pq->data[0];
    return 1;
  }

  *pq_data = pq->data[0]; // the root is returned
 8005768:	6805      	ldr	r5, [r0, #0]
 800576a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800576c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800576e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005772:	e884 0003 	stmia.w	r4, {r0, r1}

  // heapify the remaining tree
  pq->data[0] = pq->data[pq->size - 1];
 8005776:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800577a:	f8dc 5000 	ldr.w	r5, [ip]
 800577e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005782:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8005786:	3c18      	subs	r4, #24
 8005788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800578a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800578c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005790:	e885 0003 	stmia.w	r5, {r0, r1}
  pq->size--;
 8005794:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8005798:	3e01      	subs	r6, #1
 800579a:	f8cc 6008 	str.w	r6, [ip, #8]
 800579e:	2300      	movs	r3, #0
  *y = temp;
}

static inline int parentIdx(int i) { return (i-1)/2; }

static inline int leftIdx(int i) { return (2*i + 1); }
 80057a0:	005a      	lsls	r2, r3, #1
 80057a2:	1c54      	adds	r4, r2, #1
{
  for(;;){
    int l = leftIdx(i);
    int r = rightIdx(i);
    int smallest = i;
    if (l < pq->size && lessThan(&pq->data[l], &pq->data[i], pq->cmp))
 80057a4:	42a6      	cmp	r6, r4

static inline int parentIdx(int i) { return (i-1)/2; }

static inline int leftIdx(int i) { return (2*i + 1); }

static inline int rightIdx(int i) { return (2*i + 2); }
 80057a6:	f102 0e02 	add.w	lr, r2, #2
{
  for(;;){
    int l = leftIdx(i);
    int r = rightIdx(i);
    int smallest = i;
    if (l < pq->size && lessThan(&pq->data[l], &pq->data[i], pq->cmp))
 80057aa:	dd18      	ble.n	80057de <pq_extractMin+0x8e>
 80057ac:	f8dc 5000 	ldr.w	r5, [ip]
 80057b0:	f89c 700c 	ldrb.w	r7, [ip, #12]
 80057b4:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 80057b8:	18d1      	adds	r1, r2, r3
 80057ba:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
 80057be:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
static inline int leftIdx(int i) { return (2*i + 1); }

static inline int rightIdx(int i) { return (2*i + 2); }

static inline bool lessThan(pq_data_t *d1, pq_data_t *d2, Comparator_t c){
  if(c == BASELINE)
 80057c2:	2f00      	cmp	r7, #0
 80057c4:	d168      	bne.n	8005898 <pq_extractMin+0x148>
    return (d1->baseline < d2->baseline);
 80057c6:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80057ca:	e9d8 ab02 	ldrd	sl, fp, [r8, #8]
 80057ce:	458b      	cmp	fp, r1
 80057d0:	bf08      	it	eq
 80057d2:	4582      	cmpeq	sl, r0
 80057d4:	bf34      	ite	cc
 80057d6:	2101      	movcc	r1, #1
 80057d8:	2100      	movcs	r1, #0
{
  for(;;){
    int l = leftIdx(i);
    int r = rightIdx(i);
    int smallest = i;
    if (l < pq->size && lessThan(&pq->data[l], &pq->data[i], pq->cmp))
 80057da:	2900      	cmp	r1, #0
 80057dc:	d144      	bne.n	8005868 <pq_extractMin+0x118>
      smallest = l;
    if (r < pq->size && lessThan(&pq->data[r], &pq->data[smallest], pq->cmp))
 80057de:	4576      	cmp	r6, lr
 80057e0:	dd55      	ble.n	800588e <pq_extractMin+0x13e>
 80057e2:	f8dc 5000 	ldr.w	r5, [ip]
 80057e6:	f89c 700c 	ldrb.w	r7, [ip, #12]
 80057ea:	eb02 0803 	add.w	r8, r2, r3
 80057ee:	eb0e 014e 	add.w	r1, lr, lr, lsl #1
 80057f2:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
 80057f6:	461c      	mov	r4, r3
 80057f8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
static inline int leftIdx(int i) { return (2*i + 1); }

static inline int rightIdx(int i) { return (2*i + 2); }

static inline bool lessThan(pq_data_t *d1, pq_data_t *d2, Comparator_t c){
  if(c == BASELINE)
 80057fc:	2f00      	cmp	r7, #0
 80057fe:	d13b      	bne.n	8005878 <pq_extractMin+0x128>
    return (d1->baseline < d2->baseline);
 8005800:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
 8005804:	e9d8 0102 	ldrd	r0, r1, [r8, #8]
 8005808:	428f      	cmp	r7, r1
 800580a:	bf08      	it	eq
 800580c:	4286      	cmpeq	r6, r0
 800580e:	bf34      	ite	cc
 8005810:	2101      	movcc	r1, #1
 8005812:	2100      	movcs	r1, #0

static inline int parentIdx(int i) { return (i-1)/2; }

static inline int leftIdx(int i) { return (2*i + 1); }

static inline int rightIdx(int i) { return (2*i + 2); }
 8005814:	2900      	cmp	r1, #0
 8005816:	bf18      	it	ne
 8005818:	4674      	movne	r4, lr
    int smallest = i;
    if (l < pq->size && lessThan(&pq->data[l], &pq->data[i], pq->cmp))
      smallest = l;
    if (r < pq->size && lessThan(&pq->data[r], &pq->data[smallest], pq->cmp))
      smallest = r;
    if (smallest == i){
 800581a:	42a3      	cmp	r3, r4
 800581c:	d037      	beq.n	800588e <pq_extractMin+0x13e>
      break;
    } else {
        swapElems(&pq->data[i], &pq->data[smallest]);
 800581e:	4413      	add	r3, r2
 8005820:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
#include<stdbool.h>


static inline void swapElems(pq_data_t *x, pq_data_t *y)
{
  pq_data_t temp = *x;
 8005824:	46b9      	mov	r9, r7
 8005826:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800582a:	46e8      	mov	r8, sp
 800582c:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    if (r < pq->size && lessThan(&pq->data[r], &pq->data[smallest], pq->cmp))
      smallest = r;
    if (smallest == i){
      break;
    } else {
        swapElems(&pq->data[i], &pq->data[smallest]);
 8005830:	eb04 0644 	add.w	r6, r4, r4, lsl #1
#include<stdbool.h>


static inline void swapElems(pq_data_t *x, pq_data_t *y)
{
  pq_data_t temp = *x;
 8005834:	e899 0003 	ldmia.w	r9, {r0, r1}
    if (r < pq->size && lessThan(&pq->data[r], &pq->data[smallest], pq->cmp))
      smallest = r;
    if (smallest == i){
      break;
    } else {
        swapElems(&pq->data[i], &pq->data[smallest]);
 8005838:	eb05 05c6 	add.w	r5, r5, r6, lsl #3


static inline void swapElems(pq_data_t *x, pq_data_t *y)
{
  pq_data_t temp = *x;
  *x = *y;
 800583c:	46ae      	mov	lr, r5
#include<stdbool.h>


static inline void swapElems(pq_data_t *x, pq_data_t *y)
{
  pq_data_t temp = *x;
 800583e:	e888 0003 	stmia.w	r8, {r0, r1}
  *x = *y;
 8005842:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005846:	463e      	mov	r6, r7
 8005848:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800584a:	e89e 0003 	ldmia.w	lr, {r0, r1}
  *y = temp;
 800584e:	466e      	mov	r6, sp


static inline void swapElems(pq_data_t *x, pq_data_t *y)
{
  pq_data_t temp = *x;
  *x = *y;
 8005850:	e889 0003 	stmia.w	r9, {r0, r1}
  *y = temp;
 8005854:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005858:	e898 0003 	ldmia.w	r8, {r0, r1}
 800585c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8005860:	4623      	mov	r3, r4
 8005862:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8005866:	e79b      	b.n	80057a0 <pq_extractMin+0x50>
    int l = leftIdx(i);
    int r = rightIdx(i);
    int smallest = i;
    if (l < pq->size && lessThan(&pq->data[l], &pq->data[i], pq->cmp))
      smallest = l;
    if (r < pq->size && lessThan(&pq->data[r], &pq->data[smallest], pq->cmp))
 8005868:	4576      	cmp	r6, lr
 800586a:	ddd6      	ble.n	800581a <pq_extractMin+0xca>
 800586c:	eb0e 014e 	add.w	r1, lr, lr, lsl #1
 8005870:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
static inline int leftIdx(int i) { return (2*i + 1); }

static inline int rightIdx(int i) { return (2*i + 2); }

static inline bool lessThan(pq_data_t *d1, pq_data_t *d2, Comparator_t c){
  if(c == BASELINE)
 8005874:	2f00      	cmp	r7, #0
 8005876:	d0c3      	beq.n	8005800 <pq_extractMin+0xb0>
    return (d1->baseline < d2->baseline);
  else
    return (d1->deadline < d2->deadline);
 8005878:	e9d1 6704 	ldrd	r6, r7, [r1, #16]
 800587c:	e9d8 0104 	ldrd	r0, r1, [r8, #16]
 8005880:	428f      	cmp	r7, r1
 8005882:	bf08      	it	eq
 8005884:	4286      	cmpeq	r6, r0
 8005886:	bf34      	ite	cc
 8005888:	2101      	movcc	r1, #1
 800588a:	2100      	movcs	r1, #0
 800588c:	e7c2      	b.n	8005814 <pq_extractMin+0xc4>
    int l = leftIdx(i);
    int r = rightIdx(i);
    int smallest = i;
    if (l < pq->size && lessThan(&pq->data[l], &pq->data[i], pq->cmp))
      smallest = l;
    if (r < pq->size && lessThan(&pq->data[r], &pq->data[smallest], pq->cmp))
 800588e:	2501      	movs	r5, #1
  pq->data[0] = pq->data[pq->size - 1];
  pq->size--;
  minHeapify(pq, 0);

  return 1;
}
 8005890:	4628      	mov	r0, r5
 8005892:	b007      	add	sp, #28
 8005894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

static inline bool lessThan(pq_data_t *d1, pq_data_t *d2, Comparator_t c){
  if(c == BASELINE)
    return (d1->baseline < d2->baseline);
  else
    return (d1->deadline < d2->deadline);
 8005898:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800589c:	e9d8 ab04 	ldrd	sl, fp, [r8, #16]
 80058a0:	458b      	cmp	fp, r1
 80058a2:	bf08      	it	eq
 80058a4:	4582      	cmpeq	sl, r0
 80058a6:	bf34      	ite	cc
 80058a8:	2101      	movcc	r1, #1
 80058aa:	2100      	movcs	r1, #0
 80058ac:	e795      	b.n	80057da <pq_extractMin+0x8a>
    return -1;
  }

  if(pq->size == 1){
    pq->size--;
    *pq_data = pq->data[0];
 80058ae:	6806      	ldr	r6, [r0, #0]
    DEBUG_PRINT(("Priority queue is empty\n"));
    return -1;
  }

  if(pq->size == 1){
    pq->size--;
 80058b0:	2300      	movs	r3, #0
 80058b2:	6083      	str	r3, [r0, #8]
    *pq_data = pq->data[0];
 80058b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80058b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058b8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80058bc:	e884 0003 	stmia.w	r4, {r0, r1}
  pq->data[0] = pq->data[pq->size - 1];
  pq->size--;
  minHeapify(pq, 0);

  return 1;
}
 80058c0:	4628      	mov	r0, r5
 80058c2:	b007      	add	sp, #28
 80058c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

int pq_extractMin(PriorityQ_t *pq, pq_data_t *pq_data){

  if(pq->size <= 0){
    DEBUG_PRINT(("Priority queue is empty\n"));
    return -1;
 80058c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80058cc:	e7e0      	b.n	8005890 <pq_extractMin+0x140>
 80058ce:	bf00      	nop

080058d0 <pq_insert>:

  return 1;

}

int pq_insert(PriorityQ_t *pq, pq_data_t pq_data){
 80058d0:	b082      	sub	sp, #8
 80058d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058d6:	b087      	sub	sp, #28
 80058d8:	a90e      	add	r1, sp, #56	; 0x38
 80058da:	e881 000c 	stmia.w	r1, {r2, r3}

  if(pq->size == pq->capacity){
 80058de:	6886      	ldr	r6, [r0, #8]
 80058e0:	6843      	ldr	r3, [r0, #4]
 80058e2:	429e      	cmp	r6, r3

  return 1;

}

int pq_insert(PriorityQ_t *pq, pq_data_t pq_data){
 80058e4:	4605      	mov	r5, r0

  if(pq->size == pq->capacity){
 80058e6:	d061      	beq.n	80059ac <pq_insert+0xdc>
    return -1;
  }

  pq->size++;
  int insertIdx = pq->size - 1;
  pq->data[insertIdx] = pq_data;
 80058e8:	468e      	mov	lr, r1
 80058ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80058ee:	682c      	ldr	r4, [r5, #0]
 80058f0:	0077      	lsls	r7, r6, #1
 80058f2:	eb07 0c06 	add.w	ip, r7, r6
 80058f6:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
  if(pq->size == pq->capacity){
    DEBUG_PRINT(("Priority queue full; Cannot insert\n"));
    return -1;
  }

  pq->size++;
 80058fa:	f106 0c01 	add.w	ip, r6, #1
 80058fe:	f8c5 c008 	str.w	ip, [r5, #8]
  int insertIdx = pq->size - 1;
  pq->data[insertIdx] = pq_data;
 8005902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005904:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8005908:	e884 0003 	stmia.w	r4, {r0, r1}

  while(insertIdx != 0 &&
 800590c:	bb4e      	cbnz	r6, 8005962 <pq_insert+0x92>
 800590e:	e047      	b.n	80059a0 <pq_insert+0xd0>
    return (d1->deadline < d2->deadline);
}

static inline bool greaterThan(pq_data_t *d1, pq_data_t *d2, Comparator_t c){
  if(c == BASELINE)
    return (d1->baseline > d2->baseline);
 8005910:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005914:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
 8005918:	4299      	cmp	r1, r3
 800591a:	bf08      	it	eq
 800591c:	4290      	cmpeq	r0, r2
 800591e:	bf34      	ite	cc
 8005920:	2301      	movcc	r3, #1
 8005922:	2300      	movcs	r3, #0
#include<stdbool.h>


static inline void swapElems(pq_data_t *x, pq_data_t *y)
{
  pq_data_t temp = *x;
 8005924:	46ee      	mov	lr, sp
  *x = *y;
 8005926:	46b1      	mov	r9, r6
  *y = temp;
 8005928:	46e8      	mov	r8, sp
 800592a:	46bc      	mov	ip, r7

  pq->size++;
  int insertIdx = pq->size - 1;
  pq->data[insertIdx] = pq_data;

  while(insertIdx != 0 &&
 800592c:	2b00      	cmp	r3, #0
 800592e:	d037      	beq.n	80059a0 <pq_insert+0xd0>
#include<stdbool.h>


static inline void swapElems(pq_data_t *x, pq_data_t *y)
{
  pq_data_t temp = *x;
 8005930:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005932:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8005936:	e896 0003 	ldmia.w	r6, {r0, r1}
 800593a:	e88e 0003 	stmia.w	lr, {r0, r1}
  *x = *y;
 800593e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005940:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8005944:	e897 0003 	ldmia.w	r7, {r0, r1}
 8005948:	e886 0003 	stmia.w	r6, {r0, r1}
  *y = temp;
 800594c:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8005950:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005954:	e89e 0003 	ldmia.w	lr, {r0, r1}

  pq->size++;
  int insertIdx = pq->size - 1;
  pq->data[insertIdx] = pq_data;

  while(insertIdx != 0 &&
 8005958:	4626      	mov	r6, r4

static inline void swapElems(pq_data_t *x, pq_data_t *y)
{
  pq_data_t temp = *x;
  *x = *y;
  *y = temp;
 800595a:	e887 0003 	stmia.w	r7, {r0, r1}

  pq->size++;
  int insertIdx = pq->size - 1;
  pq->data[insertIdx] = pq_data;

  while(insertIdx != 0 &&
 800595e:	b1fc      	cbz	r4, 80059a0 <pq_insert+0xd0>
 8005960:	0067      	lsls	r7, r4, #1
  pq_data_t temp = *x;
  *x = *y;
  *y = temp;
}

static inline int parentIdx(int i) { return (i-1)/2; }
 8005962:	1e74      	subs	r4, r6, #1
 8005964:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
  pq->size++;
  int insertIdx = pq->size - 1;
  pq->data[insertIdx] = pq_data;

  while(insertIdx != 0 &&
        greaterThan(  &pq->data[parentIdx(insertIdx)]
 8005968:	682b      	ldr	r3, [r5, #0]
  else
    return (d1->deadline < d2->deadline);
}

static inline bool greaterThan(pq_data_t *d1, pq_data_t *d2, Comparator_t c){
  if(c == BASELINE)
 800596a:	7b2a      	ldrb	r2, [r5, #12]
  pq_data_t temp = *x;
  *x = *y;
  *y = temp;
}

static inline int parentIdx(int i) { return (i-1)/2; }
 800596c:	1064      	asrs	r4, r4, #1
  int insertIdx = pq->size - 1;
  pq->data[insertIdx] = pq_data;

  while(insertIdx != 0 &&
        greaterThan(  &pq->data[parentIdx(insertIdx)]
                    , &pq->data[insertIdx]
 800596e:	443e      	add	r6, r7
  pq->size++;
  int insertIdx = pq->size - 1;
  pq->data[insertIdx] = pq_data;

  while(insertIdx != 0 &&
        greaterThan(  &pq->data[parentIdx(insertIdx)]
 8005970:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8005974:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005978:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
  else
    return (d1->deadline < d2->deadline);
}

static inline bool greaterThan(pq_data_t *d1, pq_data_t *d2, Comparator_t c){
  if(c == BASELINE)
 800597c:	2a00      	cmp	r2, #0
 800597e:	d0c7      	beq.n	8005910 <pq_insert+0x40>
    return (d1->baseline > d2->baseline);
  else
    return (d1->deadline > d2->deadline);
 8005980:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005984:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8005988:	4299      	cmp	r1, r3
 800598a:	bf08      	it	eq
 800598c:	4290      	cmpeq	r0, r2
 800598e:	bf34      	ite	cc
 8005990:	2301      	movcc	r3, #1
 8005992:	2300      	movcs	r3, #0
#include<stdbool.h>


static inline void swapElems(pq_data_t *x, pq_data_t *y)
{
  pq_data_t temp = *x;
 8005994:	46ee      	mov	lr, sp
  *x = *y;
 8005996:	46b1      	mov	r9, r6
  *y = temp;
 8005998:	46e8      	mov	r8, sp
 800599a:	46bc      	mov	ip, r7

  pq->size++;
  int insertIdx = pq->size - 1;
  pq->data[insertIdx] = pq_data;

  while(insertIdx != 0 &&
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1c7      	bne.n	8005930 <pq_insert+0x60>
                    , pq->cmp)
        ){
    swapElems(&pq->data[insertIdx], &pq->data[parentIdx(insertIdx)]);
    insertIdx = parentIdx(insertIdx);
  }
  return 1;
 80059a0:	2001      	movs	r0, #1
}
 80059a2:	b007      	add	sp, #28
 80059a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059a8:	b002      	add	sp, #8
 80059aa:	4770      	bx	lr

int pq_insert(PriorityQ_t *pq, pq_data_t pq_data){

  if(pq->size == pq->capacity){
    DEBUG_PRINT(("Priority queue full; Cannot insert\n"));
    return -1;
 80059ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059b0:	e7f7      	b.n	80059a2 <pq_insert+0xd2>
 80059b2:	bf00      	nop
	...

080059c0 <vmc_heap_alloc_withGC>:

  /* head should be HEAP_NULL or a list of cells */
  return head;
}

heap_index vmc_heap_alloc_withGC(vmc_t *container) {
 80059c0:	b510      	push	{r4, lr}
 80059c2:	4604      	mov	r4, r0

  heap_index hi = heap_allocate(&container->heap);
 80059c4:	f002 ff04 	bl	80087d0 <heap_allocate>
  if(hi == HEAP_NULL){
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	d000      	beq.n	80059ce <vmc_heap_alloc_withGC+0xe>
    // if heap_allocate_helper returns HEAP_NULL again need to resize heap
    return heap_allocate(&container->heap);
  }

  return hi;
}
 80059cc:	bd10      	pop	{r4, pc}
  heap_index hi = heap_allocate(&container->heap);
  if(hi == HEAP_NULL){
    // heap full; time to do a GC

    /* GC parent context */
    heap_mark_phase(container);
 80059ce:	4620      	mov	r0, r4
 80059d0:	f002 fdce 	bl	8008570 <heap_mark_phase.lto_priv.60>
    // First phase mark complete; try allocating again
    // Sweeping is lazy and integrated into the allocator


    // if heap_allocate_helper returns HEAP_NULL again need to resize heap
    return heap_allocate(&container->heap);
 80059d4:	4620      	mov	r0, r4
  }

  return hi;
}
 80059d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // First phase mark complete; try allocating again
    // Sweeping is lazy and integrated into the allocator


    // if heap_allocate_helper returns HEAP_NULL again need to resize heap
    return heap_allocate(&container->heap);
 80059da:	f002 bef9 	b.w	80087d0 <heap_allocate>
 80059de:	bf00      	nop

080059e0 <chibios_container_thread.lto_priv.61>:


/****************************/
/* Chibios container thread */

static THD_FUNCTION(chibios_container_thread, arg) {
 80059e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 80059e4:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8005cb4 <chibios_container_thread.lto_priv.61+0x2d4>

  chibios_svm_thread_data_t *data = (chibios_svm_thread_data_t*)arg;
  vmc_t *container = data->container;
 80059e8:	6804      	ldr	r4, [r0, #0]
 80059ea:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80059ee:	6842      	ldr	r2, [r0, #4]
 80059f0:	619a      	str	r2, [r3, #24]


/****************************/
/* Chibios container thread */

static THD_FUNCTION(chibios_container_thread, arg) {
 80059f2:	b095      	sub	sp, #84	; 0x54
  return r;
}

int vmc_run(vmc_t *container,void (*dbg_print)(const char *str, ...)) {

  dbg_print("vmc_run container address: %u\r\n", (uint32_t)container);
 80059f4:	4621      	mov	r1, r4
 80059f6:	489e      	ldr	r0, [pc, #632]	; (8005c70 <chibios_container_thread.lto_priv.61+0x290>)
 80059f8:	f7ff fd2a 	bl	8005450 <dbg_print>

  for (int i = 0; i < VMC_MAX_CONTEXTS; i++) {
    container->context_used[i] = false; //XXX: should move to vmc_init
 80059fc:	2600      	movs	r6, #0
  }

  INT pc = 0;
  /* Check valid code */
  uint32_t magic = 0;
  magic |= ((uint32_t)container->code_memory[pc++]) << 24; /* not sure this shifting works out */
 80059fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
int vmc_run(vmc_t *container,void (*dbg_print)(const char *str, ...)) {

  dbg_print("vmc_run container address: %u\r\n", (uint32_t)container);

  for (int i = 0; i < VMC_MAX_CONTEXTS; i++) {
    container->context_used[i] = false; //XXX: should move to vmc_init
 8005a00:	f884 60f0 	strb.w	r6, [r4, #240]	; 0xf0
 8005a04:	f884 60f1 	strb.w	r6, [r4, #241]	; 0xf1
 8005a08:	f884 60f2 	strb.w	r6, [r4, #242]	; 0xf2
 8005a0c:	f884 60f3 	strb.w	r6, [r4, #243]	; 0xf3

  INT pc = 0;
  /* Check valid code */
  uint32_t magic = 0;
  magic |= ((uint32_t)container->code_memory[pc++]) << 24; /* not sure this shifting works out */
  magic |= ((uint32_t)container->code_memory[pc++]) << 16;
 8005a10:	784b      	ldrb	r3, [r1, #1]
  }

  INT pc = 0;
  /* Check valid code */
  uint32_t magic = 0;
  magic |= ((uint32_t)container->code_memory[pc++]) << 24; /* not sure this shifting works out */
 8005a12:	780f      	ldrb	r7, [r1, #0]
  magic |= ((uint32_t)container->code_memory[pc++]) << 16;
  magic |= ((uint32_t)container->code_memory[pc++]) << 8;
  magic |= ((uint32_t)container->code_memory[pc++]);
 8005a14:	78ca      	ldrb	r2, [r1, #3]
  INT pc = 0;
  /* Check valid code */
  uint32_t magic = 0;
  magic |= ((uint32_t)container->code_memory[pc++]) << 24; /* not sure this shifting works out */
  magic |= ((uint32_t)container->code_memory[pc++]) << 16;
  magic |= ((uint32_t)container->code_memory[pc++]) << 8;
 8005a16:	788d      	ldrb	r5, [r1, #2]
  magic |= ((uint32_t)container->code_memory[pc++]);


  /* feedcafe: 4276996862 */
  dbg_print("magic: %u\r\n", magic);
 8005a18:	4896      	ldr	r0, [pc, #600]	; (8005c74 <chibios_container_thread.lto_priv.61+0x294>)

  INT pc = 0;
  /* Check valid code */
  uint32_t magic = 0;
  magic |= ((uint32_t)container->code_memory[pc++]) << 24; /* not sure this shifting works out */
  magic |= ((uint32_t)container->code_memory[pc++]) << 16;
 8005a1a:	041b      	lsls	r3, r3, #16
 8005a1c:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8005a20:	4313      	orrs	r3, r2
  magic |= ((uint32_t)container->code_memory[pc++]) << 8;
  magic |= ((uint32_t)container->code_memory[pc++]);
 8005a22:	ea43 2505 	orr.w	r5, r3, r5, lsl #8


  /* feedcafe: 4276996862 */
  dbg_print("magic: %u\r\n", magic);
 8005a26:	4629      	mov	r1, r5
 8005a28:	f7ff fd12 	bl	8005450 <dbg_print>
  if (magic != 0xFEEDCAFE) return 0;
 8005a2c:	4b92      	ldr	r3, [pc, #584]	; (8005c78 <chibios_container_thread.lto_priv.61+0x298>)
 8005a2e:	429d      	cmp	r5, r3
 8005a30:	d002      	beq.n	8005a38 <chibios_container_thread.lto_priv.61+0x58>
  /* TODO read_message_poll */
  scheduler(container, NULL, read_message_block, mailbox_num_used, dbg_print);

  /* If we return to here, do something in relation to the
     return value of the scheduler function.*/
}
 8005a32:	b015      	add	sp, #84	; 0x54
 8005a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  /* uint8_t version = container->code_memory[pc++]; */
  pc++;

  uint16_t pool_size_ints;
  pool_size_ints = container->code_memory[pc++] << 8;
 8005a38:	6a65      	ldr	r5, [r4, #36]	; 0x24
  container->context_used[0] = true;
  container->current_running_context_id = 0;
  container->all_contexts_stopped = false;


  dbg_print("vmc_run executing ctx: %d\r\n", container->current_running_context_id);
 8005a3a:	4890      	ldr	r0, [pc, #576]	; (8005c7c <chibios_container_thread.lto_priv.61+0x29c>)

  /* uint8_t version = container->code_memory[pc++]; */
  pc++;

  uint16_t pool_size_ints;
  pool_size_ints = container->code_memory[pc++] << 8;
 8005a3c:	796a      	ldrb	r2, [r5, #5]
  pool_size_ints |= container->code_memory[pc++];
 8005a3e:	79ab      	ldrb	r3, [r5, #6]

  pc += (pool_size_ints * 4);
 8005a40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a44:	009b      	lsls	r3, r3, #2

  uint16_t pool_size_strings;
  pool_size_strings = container->code_memory[pc++] << 8;
 8005a46:	18ea      	adds	r2, r5, r3
  pool_size_strings |= container->code_memory[pc++];
 8005a48:	f103 0109 	add.w	r1, r3, #9
  pool_size_ints |= container->code_memory[pc++];

  pc += (pool_size_ints * 4);

  uint16_t pool_size_strings;
  pool_size_strings = container->code_memory[pc++] << 8;
 8005a4c:	79d3      	ldrb	r3, [r2, #7]
  pool_size_strings |= container->code_memory[pc++];
 8005a4e:	7a12      	ldrb	r2, [r2, #8]

  pc += pool_size_strings;
 8005a50:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005a54:	440b      	add	r3, r1

  uint16_t pool_size_native;
  pool_size_native = container->code_memory[pc++] << 8;
  pool_size_native |= container->code_memory[pc++];
 8005a56:	18ea      	adds	r2, r5, r3
  pool_size_strings |= container->code_memory[pc++];

  pc += pool_size_strings;

  uint16_t pool_size_native;
  pool_size_native = container->code_memory[pc++] << 8;
 8005a58:	5ced      	ldrb	r5, [r5, r3]
  pool_size_native |= container->code_memory[pc++];
 8005a5a:	7852      	ldrb	r2, [r2, #1]
  /* Experiments with the scheduler */
  cam_value_t v_empty = get_cam_val(0,0);


  /* Set up the parent context to be active */
  container->contexts[0].env = v_empty;
 8005a5c:	8626      	strh	r6, [r4, #48]	; 0x30

  uint16_t pool_size_native;
  pool_size_native = container->code_memory[pc++] << 8;
  pool_size_native |= container->code_memory[pc++];

  pc += (pool_size_native * 4);
 8005a5e:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 8005a62:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  /* Set up the parent context to be active */
  container->contexts[0].env = v_empty;
  container->contexts[0].pc  = pc;
  container->context_used[0] = true;
  container->current_running_context_id = 0;
  container->all_contexts_stopped = false;
 8005a66:	f241 4248 	movw	r2, #5192	; 0x1448

  uint32_t code_size;
  code_size = container->code_memory[pc++]  << 24;
  code_size |= container->code_memory[pc++] << 16;
  code_size |= container->code_memory[pc++] << 8;
  code_size |= container->code_memory[pc++];
 8005a6a:	1d9d      	adds	r5, r3, #6


  /* Set up the parent context to be active */
  container->contexts[0].env = v_empty;
  container->contexts[0].pc  = pc;
  container->context_used[0] = true;
 8005a6c:	2301      	movs	r3, #1
  cam_value_t v_empty = get_cam_val(0,0);


  /* Set up the parent context to be active */
  container->contexts[0].env = v_empty;
  container->contexts[0].pc  = pc;
 8005a6e:	63a5      	str	r5, [r4, #56]	; 0x38
  /* Experiments with the scheduler */
  cam_value_t v_empty = get_cam_val(0,0);


  /* Set up the parent context to be active */
  container->contexts[0].env = v_empty;
 8005a70:	6366      	str	r6, [r4, #52]	; 0x34
  container->contexts[0].pc  = pc;
  container->context_used[0] = true;
  container->current_running_context_id = 0;
 8005a72:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
  container->all_contexts_stopped = false;


  dbg_print("vmc_run executing ctx: %d\r\n", container->current_running_context_id);
 8005a76:	4631      	mov	r1, r6
  /* Set up the parent context to be active */
  container->contexts[0].env = v_empty;
  container->contexts[0].pc  = pc;
  container->context_used[0] = true;
  container->current_running_context_id = 0;
  container->all_contexts_stopped = false;
 8005a78:	54a6      	strb	r6, [r4, r2]


  /* Set up the parent context to be active */
  container->contexts[0].env = v_empty;
  container->contexts[0].pc  = pc;
  container->context_used[0] = true;
 8005a7a:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
  container->current_running_context_id = 0;
  container->all_contexts_stopped = false;


  dbg_print("vmc_run executing ctx: %d\r\n", container->current_running_context_id);
 8005a7e:	f7ff fce7 	bl	8005450 <dbg_print>
  dbg_print("vmc_run ctx pc: %d\r\n", container->contexts[container->current_running_context_id].pc);
 8005a82:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005a86:	487e      	ldr	r0, [pc, #504]	; (8005c80 <chibios_container_thread.lto_priv.61+0x2a0>)
 8005a88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005a8c:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8005a90:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005a92:	f7ff fcdd 	bl	8005450 <dbg_print>
  dbg_print("vmc_run current env: %u\r\n", container->contexts[container->current_running_context_id].env.value);
 8005a96:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005a9a:	487a      	ldr	r0, [pc, #488]	; (8005c84 <chibios_container_thread.lto_priv.61+0x2a4>)
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005aa2:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8005aa6:	6859      	ldr	r1, [r3, #4]
 8005aa8:	f7ff fcd2 	bl	8005450 <dbg_print>
  dbg_print("vmc_run current instr: 0x%x\r\n", container->code_memory[pc]);
 8005aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aae:	4876      	ldr	r0, [pc, #472]	; (8005c88 <chibios_container_thread.lto_priv.61+0x2a8>)
 8005ab0:	5d59      	ldrb	r1, [r3, r5]
 8005ab2:	f7ff fccd 	bl	8005450 <dbg_print>

  (void)poll_msg;

  svm_msg_t msg;

  dbg_print("Entered Scheduler\r\n");
 8005ab6:	4875      	ldr	r0, [pc, #468]	; (8005c8c <chibios_container_thread.lto_priv.61+0x2ac>)
 8005ab8:	f7ff fcca 	bl	8005450 <dbg_print>
  dbg_print("container address: %u\r\n", (uint32_t)container);
 8005abc:	4874      	ldr	r0, [pc, #464]	; (8005c90 <chibios_container_thread.lto_priv.61+0x2b0>)
 8005abe:	4621      	mov	r1, r4
 8005ac0:	f7ff fcc6 	bl	8005450 <dbg_print>
 8005ac4:	4b73      	ldr	r3, [pc, #460]	; (8005c94 <chibios_container_thread.lto_priv.61+0x2b4>)
 8005ac6:	4a74      	ldr	r2, [pc, #464]	; (8005c98 <chibios_container_thread.lto_priv.61+0x2b8>)
 8005ac8:	681d      	ldr	r5, [r3, #0]
  uint32_t low_word;
  uint32_t high_word;
  uint32_t high_word2;

  do {
    high_word = counter_high_word;
 8005aca:	6813      	ldr	r3, [r2, #0]
    low_word = tim->CNT;
 8005acc:	6a68      	ldr	r0, [r5, #36]	; 0x24
    high_word2 = counter_high_word;
 8005ace:	6811      	ldr	r1, [r2, #0]
  } while (high_word != high_word2); /* todo execute body at most twice */
 8005ad0:	428b      	cmp	r3, r1
 8005ad2:	d1fa      	bne.n	8005aca <chibios_container_thread.lto_priv.61+0xea>

  time = high_word;
  time <<= 32;
 8005ad4:	2600      	movs	r6, #0
  time |= low_word;
 8005ad6:	ea46 0200 	orr.w	r2, r6, r0
 8005ada:	f504 57a2 	add.w	r7, r4, #5184	; 0x1440


static void initLogicalTime(vmc_t *vmc){
  Time currentTicks = sys_time_get_current_ticks();
  for(int i = 0; i < VMC_MAX_CONTEXTS; i ++){
    vmc->contexts[i].logicalTime = currentTicks;
 8005ade:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8005ae2:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
 8005ae6:	e9c4 232c 	strd	r2, r3, [r4, #176]	; 0xb0
 8005aea:	e9c4 2338 	strd	r2, r3, [r4, #224]	; 0xe0

static int read_message_block(vmc_t* vmc, svm_msg_t *msg) {

  msg_t msg_value;

  chibios_interop_t* interop = (chibios_interop_t*)vmc->backend_custom;
 8005aee:	46b9      	mov	r9, r7

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8005af0:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 8005cb4 <chibios_container_thread.lto_priv.61+0x2d4>
 8005af4:	3708      	adds	r7, #8
 8005af6:	f109 0904 	add.w	r9, r9, #4
    /* 		stack_get_sp(&container->contexts[container->current_running_context_id].stack)); */
    /* } */

    //dbg_print("CURRENT_ID: %u\r\n", container->current_running_context_id);

    if(container->all_contexts_stopped){
 8005afa:	783b      	ldrb	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f040 80b2 	bne.w	8005c66 <chibios_container_thread.lto_priv.61+0x286>
       message
       - threads cooperative.
       -
    */
    /* If we are doing nothing, block on the message queue */
    if (container->current_running_context_id == UUID_NONE) {
 8005b02:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005b06:	2bff      	cmp	r3, #255	; 0xff
 8005b08:	d018      	beq.n	8005b3c <chibios_container_thread.lto_priv.61+0x15c>
    }

    /* If a context is running do this... */
    if (container->current_running_context_id != UUID_NONE) {

      INT *pc = (INT *)&container->contexts[container->current_running_context_id].pc;
 8005b0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005b0e:	011d      	lsls	r5, r3, #4
 8005b10:	3538      	adds	r5, #56	; 0x38
      /* dbg_print("current instr: 0x%x  [Dec: %u]\r\n", container->code_memory[*pc], container->code_memory[*pc]); */
      /* dbg_print("sizeof(evaluators) = %d\r\n", sizeof(evaluators)); */

      /* Execute an instruction */

      uint8_t current_inst = container->code_memory[*pc];
 8005b12:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005b14:	5963      	ldr	r3, [r4, r5]
 8005b16:	5cd6      	ldrb	r6, [r2, r3]

      if (current_inst > (sizeof(evaluators) / 4)) {
 8005b18:	2e38      	cmp	r6, #56	; 0x38
    }

    /* If a context is running do this... */
    if (container->current_running_context_id != UUID_NONE) {

      INT *pc = (INT *)&container->contexts[container->current_running_context_id].pc;
 8005b1a:	eb04 0105 	add.w	r1, r4, r5

      /* Execute an instruction */

      uint8_t current_inst = container->code_memory[*pc];

      if (current_inst > (sizeof(evaluators) / 4)) {
 8005b1e:	f200 812f 	bhi.w	8005d80 <chibios_container_thread.lto_priv.61+0x3a0>
#ifdef TRACE_ON
	trace_print(dbg_print, 25);
#endif
	return -1;
      } else {
        evaluators[current_inst](container, pc);
 8005b22:	4b5e      	ldr	r3, [pc, #376]	; (8005c9c <chibios_container_thread.lto_priv.61+0x2bc>)
 8005b24:	4620      	mov	r0, r4
 8005b26:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8005b2a:	4798      	blx	r3
      }
      
      

      if(*pc  == -1){
 8005b2c:	5963      	ldr	r3, [r4, r5]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	d1e3      	bne.n	8005afa <chibios_container_thread.lto_priv.61+0x11a>
        dbg_print("Instruction %u failed",current_inst);
 8005b32:	4631      	mov	r1, r6
 8005b34:	485a      	ldr	r0, [pc, #360]	; (8005ca0 <chibios_container_thread.lto_priv.61+0x2c0>)
 8005b36:	f7ff fc8b 	bl	8005450 <dbg_print>
 8005b3a:	e77a      	b.n	8005a32 <chibios_container_thread.lto_priv.61+0x52>
 /*      dbg_print("***********************\r\n"); */
/*       dbg_print("Blocking: showing trace\r\n"); */
/* #ifdef TRACE_ON */
/*       trace_print(dbg_print, 25); */
/* #endif	 */
      dbg_print("Blocking in wait for message \r\n");
 8005b3c:	4859      	ldr	r0, [pc, #356]	; (8005ca4 <chibios_container_thread.lto_priv.61+0x2c4>)
 8005b3e:	f7ff fc87 	bl	8005450 <dbg_print>
 8005b42:	f8d9 a000 	ldr.w	sl, [r9]
 8005b46:	2320      	movs	r3, #32
  int r = chMBFetchTimeout(interop->mb, &msg_value, TIME_INFINITE);
 8005b48:	f8da 5004 	ldr.w	r5, [sl, #4]
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8005b50:	f001 fe86 	bl	8007860 <_dbg_check_lock>
 * @sclass
 */
msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
  msg_t rdymsg;

  chDbgCheckClassS();
 8005b54:	f001 fdbc 	bl	80076d0 <chDbgCheckClassS>
  chDbgCheck((mbp != NULL) && (msgp != NULL));
 8005b58:	2d00      	cmp	r5, #0
 8005b5a:	f000 80f5 	beq.w	8005d48 <chibios_container_thread.lto_priv.61+0x368>

      return MSG_OK;
    }

    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8005b5e:	f105 0620 	add.w	r6, r5, #32
 8005b62:	e00b      	b.n	8005b7c <chibios_container_thread.lto_priv.61+0x19c>
 *
 * @iclass
 */
static inline size_t chMBGetUsedCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();
 8005b64:	f001 fdc4 	bl	80076f0 <chDbgCheckClassI>

  return mbp->cnt;
 8005b68:	692b      	ldr	r3, [r5, #16]
    if (mbp->reset) {
      return MSG_RESET;
    }

    /* Is there a message in queue? if so then fetch.*/
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d164      	bne.n	8005c38 <chibios_container_thread.lto_priv.61+0x258>

      return MSG_OK;
    }

    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8005b6e:	4630      	mov	r0, r6
 8005b70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b74:	f001 f92c 	bl	8006dd0 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	d172      	bne.n	8005c62 <chibios_container_thread.lto_priv.61+0x282>
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  do {
    /* If the mailbox is in reset state then returns immediately.*/
    if (mbp->reset) {
 8005b7c:	7d2b      	ldrb	r3, [r5, #20]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0f0      	beq.n	8005b64 <chibios_container_thread.lto_priv.61+0x184>
      return MSG_RESET;
 8005b82:	f06f 0501 	mvn.w	r5, #1
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8005b86:	f001 fe5b 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8005b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b8e:	4543      	cmp	r3, r8
 8005b90:	d005      	beq.n	8005b9e <chibios_container_thread.lto_priv.61+0x1be>
 8005b92:	f8db 2018 	ldr.w	r2, [fp, #24]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	6892      	ldr	r2, [r2, #8]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d349      	bcc.n	8005c32 <chibios_container_thread.lto_priv.61+0x252>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f383 8811 	msr	BASEPRI, r3

  if (r == MSG_OK ) {
 8005ba4:	b945      	cbnz	r5, 8005bb8 <chibios_container_thread.lto_priv.61+0x1d8>

    *msg = *(svm_msg_t*)msg_value;
 8005ba6:	9907      	ldr	r1, [sp, #28]

    chPoolFree(interop->msg_pool, (void*)msg_value);
 8005ba8:	f8da 0000 	ldr.w	r0, [sl]
  chibios_interop_t* interop = (chibios_interop_t*)vmc->backend_custom;
  int r = chMBFetchTimeout(interop->mb, &msg_value, TIME_INFINITE);

  if (r == MSG_OK ) {

    *msg = *(svm_msg_t*)msg_value;
 8005bac:	680b      	ldr	r3, [r1, #0]
 8005bae:	9305      	str	r3, [sp, #20]
 8005bb0:	688b      	ldr	r3, [r1, #8]
 8005bb2:	9306      	str	r3, [sp, #24]

    chPoolFree(interop->msg_pool, (void*)msg_value);
 8005bb4:	f001 fa4c 	bl	8007050 <chPoolFree>

}

int handle_msg(vmc_t *vmc, svm_msg_t *m){

  if (m->sender_id == 255) // Timer interrupt
 8005bb8:	9b05      	ldr	r3, [sp, #20]
 8005bba:	2bff      	cmp	r3, #255	; 0xff
 8005bbc:	d07c      	beq.n	8005cb8 <chibios_container_thread.lto_priv.61+0x2d8>
}


static int handle_driver_msg(vmc_t *vmc, svm_msg_t *m){

  UUID chan_id = vmc->drivers[m->sender_id].channel_id;
 8005bbe:	9b05      	ldr	r3, [sp, #20]
 8005bc0:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8005bc4:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
  cam_value_t msg = { .value = m->data, .flags = 0 };

  // The following code is a barebones version of what `sync` does
  recv_data_t recv_data;//recv_context_id;
  int deq_status =
    chan_recv_q_dequeue(&vmc->channels[chan_id].recvq, &recv_data);
 8005bc8:	202c      	movs	r0, #44	; 0x2c
}


static int handle_driver_msg(vmc_t *vmc, svm_msg_t *m){

  UUID chan_id = vmc->drivers[m->sender_id].channel_id;
 8005bca:	f893 5020 	ldrb.w	r5, [r3, #32]

  //XXX: Logic here to decide if the arrived message is
  //     the entire message or the pointer to a location to read
  cam_value_t msg = { .value = m->data, .flags = 0 };
 8005bce:	9b06      	ldr	r3, [sp, #24]
 8005bd0:	9309      	str	r3, [sp, #36]	; 0x24

  // The following code is a barebones version of what `sync` does
  recv_data_t recv_data;//recv_context_id;
  int deq_status =
    chan_recv_q_dequeue(&vmc->channels[chan_id].recvq, &recv_data);
 8005bd2:	fb00 4005 	mla	r0, r0, r5, r4
  //     the entire message or the pointer to a location to read
  cam_value_t msg = { .value = m->data, .flags = 0 };

  // The following code is a barebones version of what `sync` does
  recv_data_t recv_data;//recv_context_id;
  int deq_status =
 8005bd6:	f500 7084 	add.w	r0, r0, #264	; 0x108

  UUID chan_id = vmc->drivers[m->sender_id].channel_id;

  //XXX: Logic here to decide if the arrived message is
  //     the entire message or the pointer to a location to read
  cam_value_t msg = { .value = m->data, .flags = 0 };
 8005bda:	f04f 0a00 	mov.w	sl, #0

  // The following code is a barebones version of what `sync` does
  recv_data_t recv_data;//recv_context_id;
  int deq_status =
 8005bde:	a90e      	add	r1, sp, #56	; 0x38

  UUID chan_id = vmc->drivers[m->sender_id].channel_id;

  //XXX: Logic here to decide if the arrived message is
  //     the entire message or the pointer to a location to read
  cam_value_t msg = { .value = m->data, .flags = 0 };
 8005be0:	f8ad a020 	strh.w	sl, [sp, #32]

  // The following code is a barebones version of what `sync` does
  recv_data_t recv_data;//recv_context_id;
  int deq_status =
 8005be4:	f002 ff54 	bl	8008a90 <chan_recv_q_dequeue>
    chan_recv_q_dequeue(&vmc->channels[chan_id].recvq, &recv_data);
  if(deq_status == -1){ //empty queue
 8005be8:	1c43      	adds	r3, r0, #1
 8005bea:	f000 80be 	beq.w	8005d6a <chibios_container_thread.lto_priv.61+0x38a>
  heap->value_flags[i].fst = f.flags;
  heap->value_flags[i].snd = s.flags;
}

void heap_set_fst(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].fst = value.value;
 8005bee:	6823      	ldr	r3, [r4, #0]
  heap->value_flags[i].fst = value.flags;
 8005bf0:	6960      	ldr	r0, [r4, #20]
  /*   return -(int)UUID_NONE; */
  /* } */

  cam_value_t true_flag = { .value = 1, .flags = 0 };
  heap_set_fst(  &vmc->heap
		 , (heap_index)recv_data.dirty_flag_pointer.value
 8005bf2:	9910      	ldr	r1, [sp, #64]	; 0x40
                  , chan_id));
    //XXX: Need to do something here
    return -1;
  }

  UUID recv_context_id = recv_data.context_id;
 8005bf4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
  heap->value_flags[i].fst = f.flags;
  heap->value_flags[i].snd = s.flags;
}

void heap_set_fst(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].fst = value.value;
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
  heap->value_flags[i].fst = value.flags;
 8005bfe:	f820 a021 	strh.w	sl, [r0, r1, lsl #2]



  /* NOTE Message passing begins */

  int k = message_pass( vmc
 8005c02:	ab08      	add	r3, sp, #32
 8005c04:	9201      	str	r2, [sp, #4]
 8005c06:	9500      	str	r5, [sp, #0]
 8005c08:	cb0c      	ldmia	r3, {r2, r3}
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f002 feb7 	bl	8008980 <message_pass.lto_priv.97>
                      , recv_context_id
                      , msg
                      , chan_id
                      , RECV);
  if(k == -1){
 8005c12:	3001      	adds	r0, #1
 8005c14:	f000 80ae 	beq.w	8005d74 <chibios_container_thread.lto_priv.61+0x394>

  /* NOTE Message passing ends */


  // the receiving thread will run now
  vmc->current_running_context_id = recv_context_id;
 8005c18:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c

	return -1;
	/* continue as if nothing has happend.
	   This should be like throwing the message away */
      } else {
	dbg_print("Current ctx: %d\r\n",container->current_running_context_id);
 8005c1c:	4822      	ldr	r0, [pc, #136]	; (8005ca8 <chibios_container_thread.lto_priv.61+0x2c8>)
 8005c1e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8005c22:	f7ff fc15 	bl	8005450 <dbg_print>
      /*   /\* enqueue processes *\/ */
      /* } */
    }

    /* If a context is running do this... */
    if (container->current_running_context_id != UUID_NONE) {
 8005c26:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005c2a:	2bff      	cmp	r3, #255	; 0xff
 8005c2c:	f43f af65 	beq.w	8005afa <chibios_container_thread.lto_priv.61+0x11a>
 8005c30:	e76b      	b.n	8005b0a <chibios_container_thread.lto_priv.61+0x12a>
 8005c32:	481e      	ldr	r0, [pc, #120]	; (8005cac <chibios_container_thread.lto_priv.61+0x2cc>)
 8005c34:	f001 fd2c 	bl	8007690 <chSysHalt>
    }

    /* Is there a message in queue? if so then fetch.*/
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
      *msgp = *mbp->rdptr++;
 8005c38:	68ea      	ldr	r2, [r5, #12]
      if (mbp->rdptr >= mbp->top) {
 8005c3a:	6869      	ldr	r1, [r5, #4]
      return MSG_RESET;
    }

    /* Is there a message in queue? if so then fetch.*/
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
      *msgp = *mbp->rdptr++;
 8005c3c:	6810      	ldr	r0, [r2, #0]
 8005c3e:	9007      	str	r0, [sp, #28]
 8005c40:	3204      	adds	r2, #4
      if (mbp->rdptr >= mbp->top) {
 8005c42:	428a      	cmp	r2, r1
      return MSG_RESET;
    }

    /* Is there a message in queue? if so then fetch.*/
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
      *msgp = *mbp->rdptr++;
 8005c44:	60ea      	str	r2, [r5, #12]
      if (mbp->rdptr >= mbp->top) {
        mbp->rdptr = mbp->buffer;
      }
      mbp->cnt--;
 8005c46:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff

    /* Is there a message in queue? if so then fetch.*/
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
      *msgp = *mbp->rdptr++;
      if (mbp->rdptr >= mbp->top) {
        mbp->rdptr = mbp->buffer;
 8005c4a:	bf24      	itt	cs
 8005c4c:	682a      	ldrcs	r2, [r5, #0]
 8005c4e:	60ea      	strcs	r2, [r5, #12]
      }
      mbp->cnt--;
 8005c50:	612b      	str	r3, [r5, #16]

      /* If there is a writer waiting then makes it ready.*/
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8005c52:	f105 0018 	add.w	r0, r5, #24
 8005c56:	f002 f92b 	bl	8007eb0 <chThdDequeueNextI.constprop.54>
      chSchRescheduleS();

      return MSG_OK;
 8005c5a:	2500      	movs	r5, #0
      }
      mbp->cnt--;

      /* If there is a writer waiting then makes it ready.*/
      chThdDequeueNextI(&mbp->qw, MSG_OK);
      chSchRescheduleS();
 8005c5c:	f001 f920 	bl	8006ea0 <chSchRescheduleS>
 8005c60:	e791      	b.n	8005b86 <chibios_container_thread.lto_priv.61+0x1a6>
      return MSG_OK;
    }

    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
  } while (rdymsg == MSG_OK);
 8005c62:	4605      	mov	r5, r0
 8005c64:	e78f      	b.n	8005b86 <chibios_container_thread.lto_priv.61+0x1a6>
      }

    }
  }
  /* end */
  dbg_print("Closing down scheduler\r\n");
 8005c66:	4812      	ldr	r0, [pc, #72]	; (8005cb0 <chibios_container_thread.lto_priv.61+0x2d0>)
 8005c68:	f7ff fbf2 	bl	8005450 <dbg_print>
 8005c6c:	e6e1      	b.n	8005a32 <chibios_container_thread.lto_priv.61+0x52>
 8005c6e:	bf00      	nop
 8005c70:	0800cd84 	.word	0x0800cd84
 8005c74:	0800cda4 	.word	0x0800cda4
 8005c78:	feedcafe 	.word	0xfeedcafe
 8005c7c:	0800cdb0 	.word	0x0800cdb0
 8005c80:	0800cdcc 	.word	0x0800cdcc
 8005c84:	0800cde4 	.word	0x0800cde4
 8005c88:	0800ce00 	.word	0x0800ce00
 8005c8c:	0800ce20 	.word	0x0800ce20
 8005c90:	0800cd8c 	.word	0x0800cd8c
 8005c94:	20000818 	.word	0x20000818
 8005c98:	2000a0b4 	.word	0x2000a0b4
 8005c9c:	2000081c 	.word	0x2000081c
 8005ca0:	0800cea0 	.word	0x0800cea0
 8005ca4:	0800ce34 	.word	0x0800ce34
 8005ca8:	0800ce70 	.word	0x0800ce70
 8005cac:	0800cc28 	.word	0x0800cc28
 8005cb0:	0800ceb8 	.word	0x0800ceb8
 8005cb4:	2000b288 	.word	0x2000b288
  //        }
  //     }

  // Step 1. Pick the top of the waitQ, time to schedule it.
  pq_data_t timedThread;
  int i = pq_extractMin(&vmc->waitQ, &timedThread);
 8005cb8:	f504 5591 	add.w	r5, r4, #4640	; 0x1220
 8005cbc:	3514      	adds	r5, #20
 8005cbe:	ae08      	add	r6, sp, #32
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	f7ff fd44 	bl	8005750 <pq_extractMin>
  if (i == -1){
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d056      	beq.n	8005d7a <chibios_container_thread.lto_priv.61+0x39a>
    return -3;
  }

  //Step 2. Increment logical time of the thread for which the interrupt
  //        arrived
  vmc->contexts[timedThread.context_id].logicalTime = timedThread.baseline;
 8005ccc:	f89d 1020 	ldrb.w	r1, [sp, #32]

  return 1;
}
int pq_getMin(PriorityQ_t *pq, pq_data_t *pq_data){

  if(pq_isEmpty(pq)){
 8005cd0:	68a8      	ldr	r0, [r5, #8]
 8005cd2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005cd6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005cda:	eb04 1101 	add.w	r1, r4, r1, lsl #4
 8005cde:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8005ce2:	b130      	cbz	r0, 8005cf2 <chibios_container_thread.lto_priv.61+0x312>
    DEBUG_PRINT(("Priority queue is empty\n"));
    return -1;
  }

  *pq_data = pq->data[0];
 8005ce4:	682b      	ldr	r3, [r5, #0]

    // if there are waiting threads then set alarm

    //Step 3.1  Set alarm for the baseline of timedThread2
    Time alarmTime = timedThread2.baseline;
    int q = setAlarm(alarmTime);
 8005ce6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005cea:	f002 fce1 	bl	80086b0 <setAlarm.lto_priv.98>
    if(q == -1){
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d040      	beq.n	8005d74 <chibios_container_thread.lto_priv.61+0x394>
    // Proceed onwards
  }

  //Step 4. If no threads are running schedule the thread
  //        for which the interrupt arrived
  if(vmc->current_running_context_id == UUID_NONE){
 8005cf2:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
 8005cf6:	2dff      	cmp	r5, #255	; 0xff
 8005cf8:	d021      	beq.n	8005d3e <chibios_container_thread.lto_priv.61+0x35e>
    // Some thread is running

    //Step 5. Compare deadlines and accordingly schedule

    if(timedThread.deadline <
       vmc->contexts[vmc->current_running_context_id].deadline){
 8005cfa:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8005cfe:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8005d02:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
  } else {
    // Some thread is running

    //Step 5. Compare deadlines and accordingly schedule

    if(timedThread.deadline <
 8005d06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d0a:	428b      	cmp	r3, r1
 8005d0c:	bf08      	it	eq
 8005d0e:	4282      	cmpeq	r2, r0
 8005d10:	d21d      	bcs.n	8005d4e <chibios_container_thread.lto_priv.61+0x36e>
       vmc->contexts[vmc->current_running_context_id].deadline){

      // Step 5.1. Put the current thread to rdyQ
      pq_data_t currentThreadInfo =
 8005d12:	2200      	movs	r2, #0
 8005d14:	2300      	movs	r3, #0
 8005d16:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005d1a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
        {   .context_id = vmc->current_running_context_id
          , .baseline = 0
          , .deadline = vmc->contexts[vmc->current_running_context_id].deadline
        };
      int z = pq_insert(&vmc->rdyQ, currentThreadInfo);
 8005d1e:	ab14      	add	r3, sp, #80	; 0x50
 8005d20:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8005d24:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}

    if(timedThread.deadline <
       vmc->contexts[vmc->current_running_context_id].deadline){

      // Step 5.1. Put the current thread to rdyQ
      pq_data_t currentThreadInfo =
 8005d28:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
        {   .context_id = vmc->current_running_context_id
          , .baseline = 0
          , .deadline = vmc->contexts[vmc->current_running_context_id].deadline
        };
      int z = pq_insert(&vmc->rdyQ, currentThreadInfo);
 8005d2c:	ab0e      	add	r3, sp, #56	; 0x38
 8005d2e:	f504 5091 	add.w	r0, r4, #4640	; 0x1220
 8005d32:	cb0c      	ldmia	r3, {r2, r3}
 8005d34:	3004      	adds	r0, #4
 8005d36:	f7ff fdcb 	bl	80058d0 <pq_insert>
      if(z == -1){
 8005d3a:	1c41      	adds	r1, r0, #1
 8005d3c:	d015      	beq.n	8005d6a <chibios_container_thread.lto_priv.61+0x38a>
        DEBUG_PRINT(("Cannot enqueue in ready queue \n"));
        return z;
      }

      // Step 5.2 Put the timed thread as currently running
      vmc->current_running_context_id = timedThread.context_id;
 8005d3e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8005d42:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8005d46:	e769      	b.n	8005c1c <chibios_container_thread.lto_priv.61+0x23c>
 */
msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));
 8005d48:	480f      	ldr	r0, [pc, #60]	; (8005d88 <chibios_container_thread.lto_priv.61+0x3a8>)
 8005d4a:	f001 fca1 	bl	8007690 <chSysHalt>
    } else {

      // Currently running thread's deadline is earlier or the same

      // Step 5.3 Put the timed thread in rdyQ
      int r = pq_insert(&vmc->rdyQ, timedThread);
 8005d4e:	ab0a      	add	r3, sp, #40	; 0x28
 8005d50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d52:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8005d56:	f504 5091 	add.w	r0, r4, #4640	; 0x1220
 8005d5a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8005d5e:	3004      	adds	r0, #4
 8005d60:	f7ff fdb6 	bl	80058d0 <pq_insert>
      if(r == -1){
 8005d64:	1c42      	adds	r2, r0, #1
 8005d66:	f47f af59 	bne.w	8005c1c <chibios_container_thread.lto_priv.61+0x23c>
    chan_recv_q_dequeue(&vmc->channels[chan_id].recvq, &recv_data);
  if(deq_status == -1){ //empty queue
    DEBUG_PRINT(( "Recv Queue of %u empty for sending interrupt \n"
                  , chan_id));
    //XXX: Need to do something here
    return -1;
 8005d6a:	4601      	mov	r1, r0
      /* dbg_print("  data: %u\r\n", msg.data); */
      /* dbg_print("  time: %llu\r\n", msg.timestamp); */
      /*handle msg */
      int msg_r = handle_msg(container, &msg);
      if (msg_r  <= 0) {
	dbg_print("Error in handle_msg: %d\r\n",msg_r);
 8005d6c:	4807      	ldr	r0, [pc, #28]	; (8005d8c <chibios_container_thread.lto_priv.61+0x3ac>)
 8005d6e:	f7ff fb6f 	bl	8005450 <dbg_print>
 8005d72:	e65e      	b.n	8005a32 <chibios_container_thread.lto_priv.61+0x52>
                      , msg
                      , chan_id
                      , RECV);
  if(k == -1){
    DEBUG_PRINT(("Error in message passing"));
    return -2;
 8005d74:	f06f 0101 	mvn.w	r1, #1
 8005d78:	e7f8      	b.n	8005d6c <chibios_container_thread.lto_priv.61+0x38c>
  // Step 1. Pick the top of the waitQ, time to schedule it.
  pq_data_t timedThread;
  int i = pq_extractMin(&vmc->waitQ, &timedThread);
  if (i == -1){
    DEBUG_PRINT(("Cannot dequeue from wait queue \n"));
    return -3;
 8005d7a:	f06f 0102 	mvn.w	r1, #2
 8005d7e:	e7f5      	b.n	8005d6c <chibios_container_thread.lto_priv.61+0x38c>
      /* Execute an instruction */

      uint8_t current_inst = container->code_memory[*pc];

      if (current_inst > (sizeof(evaluators) / 4)) {
        dbg_print("current_inst is invalid\r\n");
 8005d80:	4803      	ldr	r0, [pc, #12]	; (8005d90 <chibios_container_thread.lto_priv.61+0x3b0>)
 8005d82:	f7ff fb65 	bl	8005450 <dbg_print>
 8005d86:	e654      	b.n	8005a32 <chibios_container_thread.lto_priv.61+0x52>
 8005d88:	0800cf10 	.word	0x0800cf10
 8005d8c:	0800ce54 	.word	0x0800ce54
 8005d90:	0800ce84 	.word	0x0800ce84
	...

08005da0 <sys_time_set_wake_up>:
uint32_t sys_time_get_clock_freq(void) {

  return counter_freq;
}

bool sys_time_set_wake_up(Time absolute) {
 8005da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005da4:	2320      	movs	r3, #32
 8005da6:	4680      	mov	r8, r0
 8005da8:	460e      	mov	r6, r1
 8005daa:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8005dae:	f001 fd57 	bl	8007860 <_dbg_check_lock>
  uint32_t high_word = 0;

  alarm.alarm_time = absolute;
  alarm.active = true;

  high_word = counter_high_word;
 8005db2:	4a1b      	ldr	r2, [pc, #108]	; (8005e20 <sys_time_set_wake_up+0x80>)
bool sys_time_set_wake_up(Time absolute) {

  chSysLock();
  uint32_t high_word = 0;

  alarm.alarm_time = absolute;
 8005db4:	4b1b      	ldr	r3, [pc, #108]	; (8005e24 <sys_time_set_wake_up+0x84>)
  alarm.active = true;

  high_word = counter_high_word;
 8005db6:	6817      	ldr	r7, [r2, #0]
bool sys_time_set_wake_up(Time absolute) {

  chSysLock();
  uint32_t high_word = 0;

  alarm.alarm_time = absolute;
 8005db8:	60de      	str	r6, [r3, #12]
  alarm.active = true;

  high_word = counter_high_word;
  if (high_word == alarm.alarm_time >> 32) {
 8005dba:	2500      	movs	r5, #0
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	42a9      	cmp	r1, r5

  chSysLock();
  uint32_t high_word = 0;

  alarm.alarm_time = absolute;
  alarm.active = true;
 8005dc0:	f04f 0201 	mov.w	r2, #1

  high_word = counter_high_word;
  if (high_word == alarm.alarm_time >> 32) {
 8005dc4:	bf08      	it	eq
 8005dc6:	42b7      	cmpeq	r7, r6
bool sys_time_set_wake_up(Time absolute) {

  chSysLock();
  uint32_t high_word = 0;

  alarm.alarm_time = absolute;
 8005dc8:	f8c3 8008 	str.w	r8, [r3, #8]
  alarm.active = true;
 8005dcc:	701a      	strb	r2, [r3, #0]

  high_word = counter_high_word;
  if (high_word == alarm.alarm_time >> 32) {
 8005dce:	d107      	bne.n	8005de0 <sys_time_set_wake_up+0x40>
    tim->CCR[0] = absolute; /* low 32 bits */
 8005dd0:	4b15      	ldr	r3, [pc, #84]	; (8005e28 <sys_time_set_wake_up+0x88>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
    tim->DIER |= 0x2; /* enable interrups on CCR[0] */
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	f042 0202 	orr.w	r2, r2, #2
 8005dde:	60da      	str	r2, [r3, #12]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8005de0:	f001 fd2e 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8005de4:	4b11      	ldr	r3, [pc, #68]	; (8005e2c <sys_time_set_wake_up+0x8c>)
 8005de6:	6819      	ldr	r1, [r3, #0]
 8005de8:	4299      	cmp	r1, r3
 8005dea:	d004      	beq.n	8005df6 <sys_time_set_wake_up+0x56>
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	688b      	ldr	r3, [r1, #8]
 8005df0:	6892      	ldr	r2, [r2, #8]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d311      	bcc.n	8005e1a <sys_time_set_wake_up+0x7a>
 8005df6:	2300      	movs	r3, #0
 8005df8:	f383 8811 	msr	BASEPRI, r3
  /*   } */
  /*   high_word2 = counter_high_word; */
  /* } while (high_word != high_word2); */

  chSysUnlock();
  chprintf((BaseSequentialStream *)&SDU1, "alarm set at high word: %u\r\n", high_word);
 8005dfc:	490c      	ldr	r1, [pc, #48]	; (8005e30 <sys_time_set_wake_up+0x90>)
 8005dfe:	480d      	ldr	r0, [pc, #52]	; (8005e34 <sys_time_set_wake_up+0x94>)
 8005e00:	463a      	mov	r2, r7
 8005e02:	f002 f895 	bl	8007f30 <chprintf.constprop.34>
  chprintf((BaseSequentialStream *)&SDU1, "alarm set at low word: %u\r\n", tim->CCR[0]);
 8005e06:	4b08      	ldr	r3, [pc, #32]	; (8005e28 <sys_time_set_wake_up+0x88>)
 8005e08:	490b      	ldr	r1, [pc, #44]	; (8005e38 <sys_time_set_wake_up+0x98>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4809      	ldr	r0, [pc, #36]	; (8005e34 <sys_time_set_wake_up+0x94>)
 8005e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e10:	f002 f88e 	bl	8007f30 <chprintf.constprop.34>

  return true;
}
 8005e14:	2001      	movs	r0, #1
 8005e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e1a:	4808      	ldr	r0, [pc, #32]	; (8005e3c <sys_time_set_wake_up+0x9c>)
 8005e1c:	f001 fc38 	bl	8007690 <chSysHalt>
 8005e20:	2000a0b4 	.word	0x2000a0b4
 8005e24:	20009ef8 	.word	0x20009ef8
 8005e28:	20000818 	.word	0x20000818
 8005e2c:	2000b288 	.word	0x2000b288
 8005e30:	0800ced4 	.word	0x0800ced4
 8005e34:	2000adf8 	.word	0x2000adf8
 8005e38:	0800cef4 	.word	0x0800cef4
 8005e3c:	0800cc34 	.word	0x0800cc34

08005e40 <eval_callrts>:
  //TODO: hold_reg1 and hold_reg2 should contain indices to the int pool
  // find index of 64 bit int baseline and deadline from the int pool

}

void eval_callrts(vmc_t *vmc, INT *pc_idx){
 8005e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT n_idx = (*pc_idx) + 1;
  uint8_t rts_op_no = vmc->code_memory[n_idx];
 8005e44:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005e46:	680b      	ldr	r3, [r1, #0]
 8005e48:	4413      	add	r3, r2
  //TODO: hold_reg1 and hold_reg2 should contain indices to the int pool
  // find index of 64 bit int baseline and deadline from the int pool

}

void eval_callrts(vmc_t *vmc, INT *pc_idx){
 8005e4a:	b0a5      	sub	sp, #148	; 0x94
    /* spawnExternal - 6 */
    /* wrap      - 7 */
    /* time      - 8 */

  int ret_code = -1; 
  switch(rts_op_no){
 8005e4c:	785b      	ldrb	r3, [r3, #1]
  //TODO: hold_reg1 and hold_reg2 should contain indices to the int pool
  // find index of 64 bit int baseline and deadline from the int pool

}

void eval_callrts(vmc_t *vmc, INT *pc_idx){
 8005e4e:	4604      	mov	r4, r0
 8005e50:	468b      	mov	fp, r1
    /* spawnExternal - 6 */
    /* wrap      - 7 */
    /* time      - 8 */

  int ret_code = -1; 
  switch(rts_op_no){
 8005e52:	2b08      	cmp	r3, #8
 8005e54:	d82e      	bhi.n	8005eb4 <eval_callrts+0x74>
 8005e56:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005e5a:	0009      	.short	0x0009
 8005e5c:	00b10096 	.word	0x00b10096
 8005e60:	01720123 	.word	0x01720123
 8005e64:	02960260 	.word	0x02960260
 8005e68:	003402b9 	.word	0x003402b9
   */
  cam_value_t empty_tuple = { .value = 0, .flags = 0 };



  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8005e6c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005e70:	3301      	adds	r3, #1
 8005e72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005e76:	eb00 1303 	add.w	r3, r0, r3, lsl #4

  heap_index closure_address = e.value;


  cam_value_t heap_f = heap_fst(&vmc->heap, closure_address);
 8005e7a:	ad14      	add	r5, sp, #80	; 0x50



  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;

  heap_index closure_address = e.value;
 8005e7c:	685e      	ldr	r6, [r3, #4]


  cam_value_t heap_f = heap_fst(&vmc->heap, closure_address);
 8005e7e:	4628      	mov	r0, r5
 8005e80:	4632      	mov	r2, r6
 8005e82:	4621      	mov	r1, r4
 8005e84:	f002 fd0c 	bl	80088a0 <heap_fst>
  cam_value_t heap_s = heap_snd(&vmc->heap, closure_address);
 8005e88:	4632      	mov	r2, r6
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	a819      	add	r0, sp, #100	; 0x64
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;

  heap_index closure_address = e.value;


  cam_value_t heap_f = heap_fst(&vmc->heap, closure_address);
 8005e8e:	9f15      	ldr	r7, [sp, #84]	; 0x54
  cam_value_t heap_s = heap_snd(&vmc->heap, closure_address);
 8005e90:	f002 fcf6 	bl	8008880 <heap_snd>
 8005e94:	9e1a      	ldr	r6, [sp, #104]	; 0x68

  if(heap_s.value == 4294967295){ // if combinator
 8005e96:	1c71      	adds	r1, r6, #1
 8005e98:	f000 8442 	beq.w	8006720 <eval_callrts+0x8e0>
    return spawn(vmc, (uint16_t)label.value); // will place PID in env


  } else { // not a combinator but a closure

    cam_value_t val = heap_f;
 8005e9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005ea0:	ad1e      	add	r5, sp, #120	; 0x78
 8005ea2:	e885 0003 	stmia.w	r5, {r0, r1}

    // Put (v, ()) of [v:l] on the env register; Read above why () comes;
    // spawn then copies the content of the env register to
    // the `env` register of the new context

    heap_index hi = vmc_heap_alloc_withGC(vmc);
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f7ff fd8a 	bl	80059c0 <vmc_heap_alloc_withGC>
    if(hi == HEAP_NULL){
 8005eac:	1c42      	adds	r2, r0, #1

    // Put (v, ()) of [v:l] on the env register; Read above why () comes;
    // spawn then copies the content of the env register to
    // the `env` register of the new context

    heap_index hi = vmc_heap_alloc_withGC(vmc);
 8005eae:	4607      	mov	r7, r0
    if(hi == HEAP_NULL){
 8005eb0:	f040 82e5 	bne.w	800647e <eval_callrts+0x63e>
      *pc_idx = ret_code;
      return;
  }
  if(ret_code == -1){
    DEBUG_PRINT(("Error in RTS function"));
    *pc_idx = ret_code;
 8005eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eb8:	f8cb 3000 	str.w	r3, [fp]
  } else { 

    *pc_idx = (*pc_idx) + 2;
  }
}
 8005ebc:	b025      	add	sp, #148	; 0x94
 8005ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

static int handle_time(vmc_t *vmc){

  //syncT : Time -> Time -> Event a -> a

  cam_value_t hold_reg1 = vmc->contexts[vmc->current_running_context_id].env;
 8005ec2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	eb02 0242 	add.w	r2, r2, r2, lsl #1

  cam_register_t hold_reg2;
  int i =
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg2);
 8005ecc:	eb03 0343 	add.w	r3, r3, r3, lsl #1

static int handle_time(vmc_t *vmc){

  //syncT : Time -> Time -> Event a -> a

  cam_value_t hold_reg1 = vmc->contexts[vmc->current_running_context_id].env;
 8005ed0:	eb00 1202 	add.w	r2, r0, r2, lsl #4

  cam_register_t hold_reg2;
  int i =
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg2);
 8005ed4:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  //syncT : Time -> Time -> Event a -> a

  cam_value_t hold_reg1 = vmc->contexts[vmc->current_running_context_id].env;

  cam_register_t hold_reg2;
  int i =
 8005ed8:	303c      	adds	r0, #60	; 0x3c
 8005eda:	a914      	add	r1, sp, #80	; 0x50

static int handle_time(vmc_t *vmc){

  //syncT : Time -> Time -> Event a -> a

  cam_value_t hold_reg1 = vmc->contexts[vmc->current_running_context_id].env;
 8005edc:	6856      	ldr	r6, [r2, #4]

  cam_register_t hold_reg2;
  int i =
 8005ede:	f002 fbaf 	bl	8008640 <stack_pop>
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg2);
  if(i == 0){
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d0e6      	beq.n	8005eb4 <eval_callrts+0x74>
    return -1;
  }

  cam_register_t hold_reg3;
  int j =
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg3);
 8005ee6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005eea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005eee:	eb04 1003 	add.w	r0, r4, r3, lsl #4
    DEBUG_PRINT(("Stack pop has failed"));
    return -1;
  }

  cam_register_t hold_reg3;
  int j =
 8005ef2:	af19      	add	r7, sp, #100	; 0x64
 8005ef4:	303c      	adds	r0, #60	; 0x3c
 8005ef6:	4639      	mov	r1, r7
 8005ef8:	f002 fba2 	bl	8008640 <stack_pop>
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg3);
  if(j == 0){
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d0d9      	beq.n	8005eb4 <eval_callrts+0x74>
  Time deadline = (Time)hold_reg2.value;

  // After calling the rts function `time` make sure the
  // env register points to `ev` so that we can `sync` next
  // because the sequence of bytecode will be - ..time; sync...
  vmc->contexts[vmc->current_running_context_id].env = hold_reg3;
 8005f00:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
    return -1;
  }

  Time baseline = (Time)hold_reg1.value;

  Time deadline = (Time)hold_reg2.value;
 8005f04:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
}

int time(vmc_t *container, Time baseline, Time deadline){

  // use the logical time of the current thread
  Time currentTime =
 8005f08:	006a      	lsls	r2, r5, #1
 8005f0a:	1953      	adds	r3, r2, r5
 8005f0c:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    container->contexts[container->current_running_context_id].logicalTime;
  Time wakeupTime  = currentTime + baseline;
 8005f10:	e9d3 8914 	ldrd	r8, r9, [r3, #80]	; 0x50

  // After calling the rts function `time` make sure the
  // env register points to `ev` so that we can `sync` next
  // because the sequence of bytecode will be - ..time; sync...
  vmc->contexts[vmc->current_running_context_id].env = hold_reg3;
 8005f14:	e897 0003 	ldmia.w	r7, {r0, r1}
 8005f18:	1c6b      	adds	r3, r5, #1
 8005f1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if(j == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    return -1;
  }

  Time baseline = (Time)hold_reg1.value;
 8005f1e:	2700      	movs	r7, #0
  Time deadline = (Time)hold_reg2.value;

  // After calling the rts function `time` make sure the
  // env register points to `ev` so that we can `sync` next
  // because the sequence of bytecode will be - ..time; sync...
  vmc->contexts[vmc->current_running_context_id].env = hold_reg3;
 8005f20:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8005f24:	eb18 0806 	adds.w	r8, r8, r6
 8005f28:	e883 0003 	stmia.w	r3, {r0, r1}
 8005f2c:	eb49 0907 	adc.w	r9, r9, r7
  Time finishTime;

  if(deadline == 0) // XXX : No deadline
 8005f30:	2100      	movs	r1, #0
 8005f32:	f1be 0f00 	cmp.w	lr, #0
 8005f36:	f000 82c4 	beq.w	80064c2 <eval_callrts+0x682>
    finishTime = TIME_MAX;
  else
    finishTime = wakeupTime + deadline;
 8005f3a:	eb1e 0008 	adds.w	r0, lr, r8
 8005f3e:	eb41 0109 	adc.w	r1, r1, r9
    {   .context_id = container->current_running_context_id
      , .baseline = wakeupTime
      , .deadline = finishTime };

  container->contexts[container->current_running_context_id].deadline
    = finishTime;
 8005f42:	442a      	add	r2, r5
 8005f44:	eb04 1202 	add.w	r2, r4, r2, lsl #4

  if(baseline == 0){
 8005f48:	ea56 0307 	orrs.w	r3, r6, r7
    {   .context_id = container->current_running_context_id
      , .baseline = wakeupTime
      , .deadline = finishTime };

  container->contexts[container->current_running_context_id].deadline
    = finishTime;
 8005f4c:	e9c2 0116 	strd	r0, r1, [r2, #88]	; 0x58
  if(deadline == 0) // XXX : No deadline
    finishTime = TIME_MAX;
  else
    finishTime = wakeupTime + deadline;

  pq_data_t currentThread =
 8005f50:	f88d 5078 	strb.w	r5, [sp, #120]	; 0x78
 8005f54:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
 8005f58:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
      , .deadline = finishTime };

  container->contexts[container->current_running_context_id].deadline
    = finishTime;

  if(baseline == 0){
 8005f5c:	f040 82b6 	bne.w	80064cc <eval_callrts+0x68c>
    // It cannot simply be elements organized by deadlines,
    // sometimes an untimed thread (with a short lifetime)
    // might unblock an important blocked thread, while
    // meeting other deadlines.

    int k = pq_insert(&container->rdyQ, currentThread);
 8005f60:	ab24      	add	r3, sp, #144	; 0x90
 8005f62:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8005f66:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8005f6a:	ad1e      	add	r5, sp, #120	; 0x78
 8005f6c:	f504 5091 	add.w	r0, r4, #4640	; 0x1220
 8005f70:	e895 000c 	ldmia.w	r5, {r2, r3}
 8005f74:	3004      	adds	r0, #4
 8005f76:	f7ff fcab 	bl	80058d0 <pq_insert>
    if(k == -1){
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	d09a      	beq.n	8005eb4 <eval_callrts+0x74>
      DEBUG_PRINT(("Block events failed! \n"));
      return -1;
    }
    /* Return value not checked?
       It can be 1 or -1. neither case looks like an error though */
    dispatch(container);
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f002 fbae 	bl	80086e0 <dispatch>
 8005f84:	e084      	b.n	8006090 <eval_callrts+0x250>
 8005f86:	4603      	mov	r3, r0
    /* spawnExternal - 6 */
    /* wrap      - 7 */
    /* time      - 8 */

  int ret_code = -1; 
  switch(rts_op_no){
 8005f88:	2200      	movs	r2, #0
 8005f8a:	e002      	b.n	8005f92 <eval_callrts+0x152>
  return 1;
}


int channel(vmc_t *container, UUID *chan_id){
  for(int i = 0; i < MAX_CHANNELS; i++){
 8005f8c:	3201      	adds	r2, #1
 8005f8e:	2a64      	cmp	r2, #100	; 0x64
 8005f90:	d090      	beq.n	8005eb4 <eval_callrts+0x74>
     if(container->channels[i].in_use == false){
 8005f92:	f893 111c 	ldrb.w	r1, [r3, #284]	; 0x11c
 8005f96:	332c      	adds	r3, #44	; 0x2c
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	d1f7      	bne.n	8005f8c <eval_callrts+0x14c>
      container->channels[i].in_use = true;
 8005f9c:	232c      	movs	r3, #44	; 0x2c
 8005f9e:	fb03 4302 	mla	r3, r3, r2, r4
 8005fa2:	2001      	movs	r0, #1
 8005fa4:	f883 011c 	strb.w	r0, [r3, #284]	; 0x11c
  if(j == -1){
    DEBUG_PRINT(("Error initializing a channel \n"));
    return j;
  }
  cam_value_t channel_cam = { .value = (UINT)chan_id, .flags = 0 };
  vmc->contexts[vmc->current_running_context_id].env = channel_cam;
 8005fa8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005fac:	4403      	add	r3, r0
 8005fae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	18e0      	adds	r0, r4, r3
 8005fb6:	52e1      	strh	r1, [r4, r3]
 8005fb8:	6042      	str	r2, [r0, #4]
 8005fba:	e069      	b.n	8006090 <eval_callrts+0x250>
  return 1;
}

static int handle_sendevt(vmc_t *vmc){
  cam_value_t message = vmc->contexts[vmc->current_running_context_id].env;
 8005fbc:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8005fc0:	1c53      	adds	r3, r2, #1
 8005fc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005fc6:	011b      	lsls	r3, r3, #4

  cam_register_t hold_reg;
  int i =
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8005fc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005fcc:	eb00 1002 	add.w	r0, r0, r2, lsl #4
  vmc->contexts[vmc->current_running_context_id].env = channel_cam;
  return 1;
}

static int handle_sendevt(vmc_t *vmc){
  cam_value_t message = vmc->contexts[vmc->current_running_context_id].env;
 8005fd0:	18e2      	adds	r2, r4, r3

  cam_register_t hold_reg;
  int i =
 8005fd2:	303c      	adds	r0, #60	; 0x3c
 8005fd4:	a90d      	add	r1, sp, #52	; 0x34
  vmc->contexts[vmc->current_running_context_id].env = channel_cam;
  return 1;
}

static int handle_sendevt(vmc_t *vmc){
  cam_value_t message = vmc->contexts[vmc->current_running_context_id].env;
 8005fd6:	6855      	ldr	r5, [r2, #4]
 8005fd8:	5ae6      	ldrh	r6, [r4, r3]

  cam_register_t hold_reg;
  int i =
 8005fda:	f002 fb31 	bl	8008640 <stack_pop>
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	f43f af68 	beq.w	8005eb4 <eval_callrts+0x74>
  return 1;
}

int sendEvt(vmc_t *container, UUID *chan_id, cam_value_t msg, event_t *sevt){

  cam_value_t null  = {.value = (UINT)HEAP_NULL, .flags = 0};
 8005fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fe8:	2700      	movs	r7, #0
   *               -> snd = pointer to wrap_func - [v:l] or [l]
   *
   */

  /* Allocate all memory needed in one go */
  heap_index cells = vmc_heap_alloc_n(container,3);
 8005fea:	4620      	mov	r0, r4
 8005fec:	f8ad 6014 	strh.w	r6, [sp, #20]
 8005ff0:	9506      	str	r5, [sp, #24]
  return 1;
}

int sendEvt(vmc_t *container, UUID *chan_id, cam_value_t msg, event_t *sevt){

  cam_value_t null  = {.value = (UINT)HEAP_NULL, .flags = 0};
 8005ff2:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8005ff6:	9310      	str	r3, [sp, #64]	; 0x40
    DEBUG_PRINT(("Stack pop has failed"));
    return -1;
  }
  UUID channel_id = (UUID)hold_reg.value;
 8005ff8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   *               -> snd = pointer to wrap_func - [v:l] or [l]
   *
   */

  /* Allocate all memory needed in one go */
  heap_index cells = vmc_heap_alloc_n(container,3);
 8005ffa:	f002 f9b1 	bl	8008360 <vmc_heap_alloc_n.constprop.20>
  if ((INT)cells == HEAP_NULL) {
 8005ffe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   *               -> snd = pointer to wrap_func - [v:l] or [l]
   *
   */

  /* Allocate all memory needed in one go */
  heap_index cells = vmc_heap_alloc_n(container,3);
 8006002:	4680      	mov	r8, r0
  if ((INT)cells == HEAP_NULL) {
 8006004:	f43f af56 	beq.w	8005eb4 <eval_callrts+0x74>
    DEBUG_PRINT(("heap allocation of 3 cells for event has failed"));
    return -1;
  }

  heap_index base_evt_idx = cells;
  heap_index cev_idx = heap_snd(&container->heap, cells).value;
 8006008:	a809      	add	r0, sp, #36	; 0x24
 800600a:	4621      	mov	r1, r4
 800600c:	4642      	mov	r2, r8
 800600e:	f002 fc37 	bl	8008880 <heap_snd>
 8006012:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  heap_index hi      = heap_snd(&container->heap, cev_idx).value;
 8006016:	a807      	add	r0, sp, #28
 8006018:	464a      	mov	r2, r9
 800601a:	4621      	mov	r1, r4

  UINT data = set_bottom_16_bits(SEND, *chan_id);

  cam_value_t base_evt_simple = { .value = data, .flags = 0};
  heap_set(&container->heap, base_evt_idx, base_evt_simple, null); // pointer to wrap func NULL
 800601c:	ad0f      	add	r5, sp, #60	; 0x3c
    return -1;
  }

  heap_index base_evt_idx = cells;
  heap_index cev_idx = heap_snd(&container->heap, cells).value;
  heap_index hi      = heap_snd(&container->heap, cev_idx).value;
 800601e:	f002 fc2f 	bl	8008880 <heap_snd>

  UINT data = set_bottom_16_bits(SEND, *chan_id);

  cam_value_t base_evt_simple = { .value = data, .flags = 0};
  heap_set(&container->heap, base_evt_idx, base_evt_simple, null); // pointer to wrap func NULL
 8006022:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006026:	e88d 0003 	stmia.w	sp, {r0, r1}

static inline UINT set_bottom_16_bits(uint8_t first8bits, uint8_t second8bits){

  UINT value = 0;
  value = value | (first8bits << 8);
  value = value | second8bits;
 800602a:	b2f6      	uxtb	r6, r6
  heap_index cev_idx = heap_snd(&container->heap, cells).value;
  heap_index hi      = heap_snd(&container->heap, cev_idx).value;

  UINT data = set_bottom_16_bits(SEND, *chan_id);

  cam_value_t base_evt_simple = { .value = data, .flags = 0};
 800602c:	9615      	str	r6, [sp, #84]	; 0x54
 800602e:	f8ad 7050 	strh.w	r7, [sp, #80]	; 0x50
  heap_set(&container->heap, base_evt_idx, base_evt_simple, null); // pointer to wrap func NULL
 8006032:	ab14      	add	r3, sp, #80	; 0x50
 8006034:	cb0c      	ldmia	r3, {r2, r3}
 8006036:	4620      	mov	r0, r4
 8006038:	4641      	mov	r1, r8
    return -1;
  }

  heap_index base_evt_idx = cells;
  heap_index cev_idx = heap_snd(&container->heap, cells).value;
  heap_index hi      = heap_snd(&container->heap, cev_idx).value;
 800603a:	9e08      	ldr	r6, [sp, #32]

  UINT data = set_bottom_16_bits(SEND, *chan_id);

  cam_value_t base_evt_simple = { .value = data, .flags = 0};
  heap_set(&container->heap, base_evt_idx, base_evt_simple, null); // pointer to wrap func NULL
 800603c:	f002 fc00 	bl	8008840 <heap_set>
   *  cam_event_t -> fst = pointer to base_event_t
   *              -> snd = message or pointer to message
   */

  cam_value_t event = {.value = (UINT)base_evt_idx, .flags = VALUE_PTR_BIT};
  heap_set(&container->heap, cev_idx, event, msg);
 8006040:	ab05      	add	r3, sp, #20
 8006042:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006046:	e88d 0003 	stmia.w	sp, {r0, r1}
  /*
   *  cam_event_t -> fst = pointer to base_event_t
   *              -> snd = message or pointer to message
   */

  cam_value_t event = {.value = (UINT)base_evt_idx, .flags = VALUE_PTR_BIT};
 800604a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
 800604e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8006052:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
  heap_set(&container->heap, cev_idx, event, msg);
 8006056:	ab19      	add	r3, sp, #100	; 0x64
 8006058:	4649      	mov	r1, r9
 800605a:	4620      	mov	r0, r4
 800605c:	cb0c      	ldmia	r3, {r2, r3}
 800605e:	f002 fbef 	bl	8008840 <heap_set>
   *  heap_cell_list -> fst = pointer to cam_event_t
   *                 -> snd = pointer to next heap_cell_ev
   */

  cam_value_t heap_cell = {.value = (UINT)cev_idx, .flags = VALUE_PTR_BIT };
  heap_set(&container->heap, hi, heap_cell, null);
 8006062:	e895 0003 	ldmia.w	r5, {r0, r1}
  /*
   *  heap_cell_list -> fst = pointer to cam_event_t
   *                 -> snd = pointer to next heap_cell_ev
   */

  cam_value_t heap_cell = {.value = (UINT)cev_idx, .flags = VALUE_PTR_BIT };
 8006066:	f8ad 7078 	strh.w	r7, [sp, #120]	; 0x78
 800606a:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   *                 -> snd = pointer to next heap_cell_ev
   */

  cam_value_t heap_cell = {.value = (UINT)cev_idx, .flags = VALUE_PTR_BIT };

  heap_set(&container->heap, hi, heap_cell, null);
 800606e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8006072:	ab1e      	add	r3, sp, #120	; 0x78
 8006074:	cb0c      	ldmia	r3, {r2, r3}
 8006076:	4631      	mov	r1, r6
 8006078:	4620      	mov	r0, r4
 800607a:	f002 fbe1 	bl	8008840 <heap_set>
    return j;
  }

  cam_value_t recv_evt_env =
    { .value = (UINT)recv_evt, .flags = VALUE_PTR_BIT };
  vmc->contexts[vmc->current_running_context_id].env = recv_evt_env;
 800607e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006082:	3301      	adds	r3, #1
 8006084:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	18e2      	adds	r2, r4, r3
 800608c:	52e7      	strh	r7, [r4, r3]
 800608e:	6056      	str	r6, [r2, #4]
  if(ret_code == -1){
    DEBUG_PRINT(("Error in RTS function"));
    *pc_idx = ret_code;
  } else { 

    *pc_idx = (*pc_idx) + 2;
 8006090:	f8db 3000 	ldr.w	r3, [fp]
 8006094:	3302      	adds	r3, #2
 8006096:	f8cb 3000 	str.w	r3, [fp]
  }
}
 800609a:	b025      	add	sp, #148	; 0x94
 800609c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  vmc->contexts[vmc->current_running_context_id].env = send_evt_env;
  return 1;
}

static int handle_recvevt(vmc_t *vmc){
  cam_value_t channel_cam = vmc->contexts[vmc->current_running_context_id].env;
 80060a0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80060a4:	3301      	adds	r3, #1
 80060a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80060aa:	eb00 1303 	add.w	r3, r0, r3, lsl #4

}

int recvEvt(vmc_t *container, UUID *chan_id, event_t *revt){

  cam_value_t null  = {.value = (UINT)HEAP_NULL, .flags = 0};
 80060ae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80060b2:	2700      	movs	r7, #0
 80060b4:	685e      	ldr	r6, [r3, #4]
 80060b6:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80060ba:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   *
   */


  /* Allocating all cells needed in one go */
  heap_index cells = vmc_heap_alloc_n(container,3);
 80060be:	f002 f94f 	bl	8008360 <vmc_heap_alloc_n.constprop.20>
  if (cells == HEAP_NULL) {
 80060c2:	4548      	cmp	r0, r9
   *
   */


  /* Allocating all cells needed in one go */
  heap_index cells = vmc_heap_alloc_n(container,3);
 80060c4:	4682      	mov	sl, r0
  if (cells == HEAP_NULL) {
 80060c6:	f43f aef5 	beq.w	8005eb4 <eval_callrts+0x74>
    DEBUG_PRINT(("heap allocation of 3 cells for event has failed"));
    return -1;
  }

  heap_index base_evt_idx = cells;
  heap_index cev_idx = heap_snd(&container->heap, cells).value;
 80060ca:	a80d      	add	r0, sp, #52	; 0x34
 80060cc:	4621      	mov	r1, r4
 80060ce:	4652      	mov	r2, sl
 80060d0:	f002 fbd6 	bl	8008880 <heap_snd>
 80060d4:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  heap_index hi      = heap_snd(&container->heap, cev_idx).value;
 80060d8:	a80b      	add	r0, sp, #44	; 0x2c
 80060da:	4642      	mov	r2, r8
 80060dc:	4621      	mov	r1, r4

  UINT data = set_bottom_16_bits(RECV, *chan_id);

  cam_value_t base_evt_simple = { .value = data, .flags = 0};
  heap_set(&container->heap, base_evt_idx, base_evt_simple, null); // pointer to wrap func NULL
 80060de:	ad09      	add	r5, sp, #36	; 0x24
    return -1;
  }

  heap_index base_evt_idx = cells;
  heap_index cev_idx = heap_snd(&container->heap, cells).value;
  heap_index hi      = heap_snd(&container->heap, cev_idx).value;
 80060e0:	f002 fbce 	bl	8008880 <heap_snd>

static inline UINT set_bottom_16_bits(uint8_t first8bits, uint8_t second8bits){

  UINT value = 0;
  value = value | (first8bits << 8);
  value = value | second8bits;
 80060e4:	b2f6      	uxtb	r6, r6
  heap_index hi      = heap_snd(&container->heap, cev_idx).value;

  UINT data = set_bottom_16_bits(RECV, *chan_id);

  cam_value_t base_evt_simple = { .value = data, .flags = 0};
  heap_set(&container->heap, base_evt_idx, base_evt_simple, null); // pointer to wrap func NULL
 80060e6:	e895 0003 	ldmia.w	r5, {r0, r1}

static inline UINT set_bottom_16_bits(uint8_t first8bits, uint8_t second8bits){

  UINT value = 0;
  value = value | (first8bits << 8);
  value = value | second8bits;
 80060ea:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  heap_index cev_idx = heap_snd(&container->heap, cells).value;
  heap_index hi      = heap_snd(&container->heap, cev_idx).value;

  UINT data = set_bottom_16_bits(RECV, *chan_id);

  cam_value_t base_evt_simple = { .value = data, .flags = 0};
 80060ee:	9610      	str	r6, [sp, #64]	; 0x40
 80060f0:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
  heap_set(&container->heap, base_evt_idx, base_evt_simple, null); // pointer to wrap func NULL
 80060f4:	ab0f      	add	r3, sp, #60	; 0x3c
 80060f6:	cb0c      	ldmia	r3, {r2, r3}
 80060f8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80060fc:	4620      	mov	r0, r4
 80060fe:	4651      	mov	r1, sl
    return -1;
  }

  heap_index base_evt_idx = cells;
  heap_index cev_idx = heap_snd(&container->heap, cells).value;
  heap_index hi      = heap_snd(&container->heap, cev_idx).value;
 8006100:	9e0c      	ldr	r6, [sp, #48]	; 0x30

  UINT data = set_bottom_16_bits(RECV, *chan_id);

  cam_value_t base_evt_simple = { .value = data, .flags = 0};
  heap_set(&container->heap, base_evt_idx, base_evt_simple, null); // pointer to wrap func NULL
 8006102:	f002 fb9d 	bl	8008840 <heap_set>
   *              -> snd = null for recv
   */


  cam_value_t event = {.value = (UINT)base_evt_idx, .flags = VALUE_PTR_BIT};
  cam_value_t null_msg  = {.value = (UINT)HEAP_NULL, .flags = 0};
 8006106:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
 800610a:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
  heap_set(&container->heap, cev_idx, event, null_msg);
 800610e:	ab19      	add	r3, sp, #100	; 0x64
 8006110:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006114:	e88d 0003 	stmia.w	sp, {r0, r1}
   *  cam_event_t -> fst = pointer to base_event_t
   *              -> snd = null for recv
   */


  cam_value_t event = {.value = (UINT)base_evt_idx, .flags = VALUE_PTR_BIT};
 8006118:	f44f 4700 	mov.w	r7, #32768	; 0x8000
 800611c:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 8006120:	f8ad 7050 	strh.w	r7, [sp, #80]	; 0x50
  cam_value_t null_msg  = {.value = (UINT)HEAP_NULL, .flags = 0};
  heap_set(&container->heap, cev_idx, event, null_msg);
 8006124:	ab14      	add	r3, sp, #80	; 0x50
 8006126:	4641      	mov	r1, r8
 8006128:	4620      	mov	r0, r4
 800612a:	cb0c      	ldmia	r3, {r2, r3}
 800612c:	f002 fb88 	bl	8008840 <heap_set>
   *                 -> snd = pointer to next heap_cell_ev
   */

  cam_value_t heap_cell = {.value = (UINT)cev_idx, .flags = VALUE_PTR_BIT };

  heap_set(&container->heap, hi, heap_cell, null);
 8006130:	e895 0003 	ldmia.w	r5, {r0, r1}
  /*
   *  heap_cell_list -> fst = pointer to cam_event_t
   *                 -> snd = pointer to next heap_cell_ev
   */

  cam_value_t heap_cell = {.value = (UINT)cev_idx, .flags = VALUE_PTR_BIT };
 8006134:	f8ad 7078 	strh.w	r7, [sp, #120]	; 0x78
 8006138:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
 800613c:	e797      	b.n	800606e <eval_callrts+0x22e>
  vmc->contexts[vmc->current_running_context_id].env = recv_evt_env;
  return 1;
}

static int handle_sync(vmc_t *vmc){
  cam_value_t event_env = vmc->contexts[vmc->current_running_context_id].env;
 800613e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006142:	3301      	adds	r3, #1
 8006144:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	18c2      	adds	r2, r0, r3

  if(event_env.flags != VALUE_PTR_BIT){
 800614c:	5ac3      	ldrh	r3, [r0, r3]
  vmc->contexts[vmc->current_running_context_id].env = recv_evt_env;
  return 1;
}

static int handle_sync(vmc_t *vmc){
  cam_value_t event_env = vmc->contexts[vmc->current_running_context_id].env;
 800614e:	6852      	ldr	r2, [r2, #4]

  if(event_env.flags != VALUE_PTR_BIT){
 8006150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006154:	f47f aeae 	bne.w	8005eb4 <eval_callrts+0x74>
    DEBUG_PRINT(("Pointer not found in the environment register \n"));
    return -1;
  }

  event_t evt = (event_t)event_env.value;
 8006158:	4692      	mov	sl, r2
 800615a:	4656      	mov	r6, sl
 800615c:	e00d      	b.n	800617a <eval_callrts+0x33a>
      if(poll_recvq(container, &container->channels[bevt_simple.channel_id].recvq)){
        *cev = cevt;
        return 1;
      } // else continue the do-while loop

    } else if (bevt_simple.e_type == RECV) { // recvEvt
 800615e:	2b01      	cmp	r3, #1
 8006160:	f000 8168 	beq.w	8006434 <eval_callrts+0x5f4>
 8006164:	f10d 0978 	add.w	r9, sp, #120	; 0x78

    }

    // else continue the do-while loop

    cam_value_t pointer_to_next = heap_snd(&container->heap, index);
 8006168:	4632      	mov	r2, r6
 800616a:	4648      	mov	r0, r9
 800616c:	4621      	mov	r1, r4
 800616e:	f002 fb87 	bl	8008880 <heap_snd>
    index = (heap_index)pointer_to_next.value;
 8006172:	9e1f      	ldr	r6, [sp, #124]	; 0x7c

  } while(index != HEAP_NULL);
 8006174:	1c77      	adds	r7, r6, #1
 8006176:	f000 8215 	beq.w	80065a4 <eval_callrts+0x764>

static int findSynchronizable(vmc_t *container, event_t *evts, cam_event_t *cev){
  heap_index index = *evts;
  do{

    cam_value_t cam_evt_pointer = heap_fst(&container->heap, index);
 800617a:	a805      	add	r0, sp, #20
 800617c:	4621      	mov	r1, r4
 800617e:	4632      	mov	r2, r6
 8006180:	f002 fb8e 	bl	80088a0 <heap_fst>



    cam_value_t base_evt_ptr =
      heap_fst(&container->heap, (heap_index)cam_evt_pointer.value);
 8006184:	9d06      	ldr	r5, [sp, #24]

    cam_value_t cam_evt_pointer = heap_fst(&container->heap, index);



    cam_value_t base_evt_ptr =
 8006186:	a807      	add	r0, sp, #28
 8006188:	462a      	mov	r2, r5
 800618a:	4621      	mov	r1, r4
 800618c:	f002 fb88 	bl	80088a0 <heap_fst>
      heap_fst(&container->heap, (heap_index)cam_evt_pointer.value);

    cam_value_t message =
 8006190:	462a      	mov	r2, r5

    cam_value_t cam_evt_pointer = heap_fst(&container->heap, index);



    cam_value_t base_evt_ptr =
 8006192:	9d08      	ldr	r5, [sp, #32]
      heap_fst(&container->heap, (heap_index)cam_evt_pointer.value);

    cam_value_t message =
 8006194:	a809      	add	r0, sp, #36	; 0x24
 8006196:	4621      	mov	r1, r4
 8006198:	f002 fb72 	bl	8008880 <heap_snd>
      heap_snd(&container->heap, (heap_index)cam_evt_pointer.value);



    cam_value_t base_evt_simple =
 800619c:	462a      	mov	r2, r5
 800619e:	a80b      	add	r0, sp, #44	; 0x2c
 80061a0:	4621      	mov	r1, r4
 80061a2:	f002 fb7d 	bl	80088a0 <heap_fst>
      heap_fst(&container->heap, (heap_index)base_evt_ptr.value);

    cam_value_t wrap_fptr =
 80061a6:	462a      	mov	r2, r5
 80061a8:	a80d      	add	r0, sp, #52	; 0x34
 80061aa:	4621      	mov	r1, r4
    cam_value_t message =
      heap_snd(&container->heap, (heap_index)cam_evt_pointer.value);



    cam_value_t base_evt_simple =
 80061ac:	9f0c      	ldr	r7, [sp, #48]	; 0x30
      heap_fst(&container->heap, (heap_index)base_evt_ptr.value);

    cam_value_t wrap_fptr =
 80061ae:	f002 fb67 	bl	8008880 <heap_snd>
    base_evt_simple_t bevt_simple =
      {   .e_type     = extract_bits(base_evt_simple.value,  8, 8)
        , .channel_id = extract_bits(base_evt_simple.value,  0, 8)
      };

    base_event_t bevt = {   .evt_details   = bevt_simple
 80061b2:	ab0d      	add	r3, sp, #52	; 0x34
 80061b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80061b8:	ab15      	add	r3, sp, #84	; 0x54
 80061ba:	e883 0003 	stmia.w	r3, {r0, r1}
    cam_value_t wrap_fptr =
      heap_snd(&container->heap, (heap_index)base_evt_ptr.value);



    base_evt_simple_t bevt_simple =
 80061be:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80061c2:	b2ff      	uxtb	r7, r7
      };

    base_event_t bevt = {   .evt_details   = bevt_simple
                          , .wrap_func_ptr = wrap_fptr };

    cam_event_t cevt = { .bev = bevt, .msg = message };
 80061c4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 80061c8:	f88d 7051 	strb.w	r7, [sp, #81]	; 0x51
 80061cc:	aa14      	add	r2, sp, #80	; 0x50
 80061ce:	ca07      	ldmia	r2, {r0, r1, r2}

    /**** Dealing with synchronous drivers like LEDs *****/
    if(container->channels[bevt_simple.channel_id].sync_driver_no != DRIVER_NULL){
 80061d0:	252c      	movs	r5, #44	; 0x2c
 80061d2:	fb05 f507 	mul.w	r5, r5, r7
      };

    base_event_t bevt = {   .evt_details   = bevt_simple
                          , .wrap_func_ptr = wrap_fptr };

    cam_event_t cevt = { .bev = bevt, .msg = message };
 80061d6:	f10d 0e64 	add.w	lr, sp, #100	; 0x64

    /**** Dealing with synchronous drivers like LEDs *****/
    if(container->channels[bevt_simple.channel_id].sync_driver_no != DRIVER_NULL){
 80061da:	eb04 0805 	add.w	r8, r4, r5
      };

    base_event_t bevt = {   .evt_details   = bevt_simple
                          , .wrap_func_ptr = wrap_fptr };

    cam_event_t cevt = { .bev = bevt, .msg = message };
 80061de:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 80061e2:	aa09      	add	r2, sp, #36	; 0x24
 80061e4:	e892 0003 	ldmia.w	r2, {r0, r1}

    /**** Dealing with synchronous drivers like LEDs *****/
    if(container->channels[bevt_simple.channel_id].sync_driver_no != DRIVER_NULL){
 80061e8:	f898 211d 	ldrb.w	r2, [r8, #285]	; 0x11d
      };

    base_event_t bevt = {   .evt_details   = bevt_simple
                          , .wrap_func_ptr = wrap_fptr };

    cam_event_t cevt = { .bev = bevt, .msg = message };
 80061ec:	f10d 0e70 	add.w	lr, sp, #112	; 0x70

    /**** Dealing with synchronous drivers like LEDs *****/
    if(container->channels[bevt_simple.channel_id].sync_driver_no != DRIVER_NULL){
 80061f0:	2aff      	cmp	r2, #255	; 0xff
      };

    base_event_t bevt = {   .evt_details   = bevt_simple
                          , .wrap_func_ptr = wrap_fptr };

    cam_event_t cevt = { .bev = bevt, .msg = message };
 80061f2:	e88e 0003 	stmia.w	lr, {r0, r1}

    /**** Dealing with synchronous drivers like LEDs *****/
    if(container->channels[bevt_simple.channel_id].sync_driver_no != DRIVER_NULL){
 80061f6:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
 80061fa:	f040 8186 	bne.w	800650a <eval_callrts+0x6ca>
      *cev = cevt;
      return SYNC_DRIVER;
    }
    /****************************************************/

    if(bevt_simple.e_type == SEND){
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1ad      	bne.n	800615e <eval_callrts+0x31e>

      if(poll_recvq(container, &container->channels[bevt_simple.channel_id].recvq)){
 8006202:	4425      	add	r5, r4
 8006204:	f505 7584 	add.w	r5, r5, #264	; 0x108
  return 1;
}

int chan_recv_q_front  (chan_recv_queue_t *q, recv_data_t *chan_data){

  if (is_empty(q)){
 8006208:	692b      	ldr	r3, [r5, #16]
 800620a:	b93b      	cbnz	r3, 800621c <eval_callrts+0x3dc>
 800620c:	e7aa      	b.n	8006164 <eval_callrts+0x324>
        heap_fst(  &container->heap
                 , (heap_index)recv_data.dirty_flag_pointer.value);

      if((dirty_flag.value & 1) == 1){ // if dirty flag is SET
        recv_data_t temp;
        chan_recv_q_dequeue(q, &temp); // no need to check status
 800620e:	f002 fc3f 	bl	8008a90 <chan_recv_q_dequeue>
 8006212:	692b      	ldr	r3, [r5, #16]
 8006214:	f10d 0978 	add.w	r9, sp, #120	; 0x78
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0a5      	beq.n	8006168 <eval_callrts+0x328>
    DEBUG_PRINT(("Chan recv queue is empty\n"));
    return -1;
  }

  *chan_data = q->data[q->front];
 800621c:	f8d8 3110 	ldr.w	r3, [r8, #272]	; 0x110
 8006220:	f8d8 2108 	ldr.w	r2, [r8, #264]	; 0x108
 8006224:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006228:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    recv_data_t recv_data;
    int op_status = chan_recv_q_front(q, &recv_data);
    if(op_status == -1){ //empty queue
      return false;
    } else {
      cam_value_t dirty_flag =
 800622c:	a80f      	add	r0, sp, #60	; 0x3c
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	4621      	mov	r1, r4
 8006232:	f002 fb35 	bl	80088a0 <heap_fst>
        heap_fst(  &container->heap
                 , (heap_index)recv_data.dirty_flag_pointer.value);

      if((dirty_flag.value & 1) == 1){ // if dirty flag is SET
 8006236:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006238:	f012 0201 	ands.w	r2, r2, #1
        recv_data_t temp;
        chan_recv_q_dequeue(q, &temp); // no need to check status
 800623c:	4628      	mov	r0, r5
 800623e:	a91e      	add	r1, sp, #120	; 0x78
    } else {
      cam_value_t dirty_flag =
        heap_fst(  &container->heap
                 , (heap_index)recv_data.dirty_flag_pointer.value);

      if((dirty_flag.value & 1) == 1){ // if dirty flag is SET
 8006240:	d1e5      	bne.n	800620e <eval_callrts+0x3ce>
        *cev = cevt;
 8006242:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
 8006246:	f88d 7065 	strb.w	r7, [sp, #101]	; 0x65
      } // else continue the do-while loop

    } else if (bevt_simple.e_type == RECV) { // recvEvt

      if(poll_sendq(container, &container->channels[bevt_simple.channel_id].sendq)){
        *cev = cevt;
 800624a:	ad19      	add	r5, sp, #100	; 0x64
 800624c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800624e:	ad0f      	add	r5, sp, #60	; 0x3c
 8006250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006252:	ad0f      	add	r5, sp, #60	; 0x3c
 8006254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006256:	ad14      	add	r5, sp, #80	; 0x50
 8006258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800625a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800625c:	602e      	str	r6, [r5, #0]
  /* difference. In both cases the receiving thread starts executing */
  /* when `sync` succeeds! Therefore the code is differnt if you */
  /* view it from the perspective of the sender or the receiver. */

  base_event_t bevt = cev.bev;
  cam_value_t  message = cev.msg; // NULL for recv
 800625e:	ab17      	add	r3, sp, #92	; 0x5c
 8006260:	e893 0003 	ldmia.w	r3, {r0, r1}
  /* both the if and else blocks carefully to understand the */
  /* difference. In both cases the receiving thread starts executing */
  /* when `sync` succeeds! Therefore the code is differnt if you */
  /* view it from the perspective of the sender or the receiver. */

  base_event_t bevt = cev.bev;
 8006264:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8006268:	f89d 6051 	ldrb.w	r6, [sp, #81]	; 0x51
 800626c:	9f16      	ldr	r7, [sp, #88]	; 0x58
  cam_value_t  message = cev.msg; // NULL for recv
 800626e:	ab0b      	add	r3, sp, #44	; 0x2c
 8006270:	e883 0003 	stmia.w	r3, {r0, r1}

  base_evt_simple_t bevt_simple = bevt.evt_details;
  cam_value_t wrap_fptr = bevt.wrap_func_ptr;


  if(bevt_simple.e_type == SEND){
 8006274:	2d00      	cmp	r5, #0
 8006276:	f000 8291 	beq.w	800679c <eval_callrts+0x95c>
    // the receiving thread will run now
    container->current_running_context_id = recv_context_id;

    return 1;

  } else if(bevt_simple.e_type == RECV) {
 800627a:	2d01      	cmp	r5, #1
 800627c:	f47f ae1a 	bne.w	8005eb4 <eval_callrts+0x74>

    send_data_t sender_data;
    int deq_status =
      chan_send_q_dequeue(&container->channels[bevt_simple.channel_id].sendq, &sender_data);
 8006280:	202c      	movs	r0, #44	; 0x2c
 8006282:	fb00 4006 	mla	r0, r0, r6, r4
    return 1;

  } else if(bevt_simple.e_type == RECV) {

    send_data_t sender_data;
    int deq_status =
 8006286:	a919      	add	r1, sp, #100	; 0x64
 8006288:	30f4      	adds	r0, #244	; 0xf4
 800628a:	f002 fbe1 	bl	8008a50 <chan_send_q_dequeue>
      chan_send_q_dequeue(&container->channels[bevt_simple.channel_id].sendq, &sender_data);

    if(deq_status == -1){ //empty queue
 800628e:	3001      	adds	r0, #1
 8006290:	f43f ae10 	beq.w	8005eb4 <eval_callrts+0x74>
      return -1;
    }

    cam_value_t true_flag = { .value = 1, .flags = 0 };
    heap_set_fst(  &container->heap
                 , (heap_index)sender_data.dirty_flag_pointer.value
 8006294:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  heap->value_flags[i].fst = f.flags;
  heap->value_flags[i].snd = s.flags;
}

void heap_set_fst(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].fst = value.value;
 8006296:	6821      	ldr	r1, [r4, #0]
  heap->value_flags[i].fst = value.flags;
 8006298:	6962      	ldr	r2, [r4, #20]
  heap->value_flags[i].fst = f.flags;
  heap->value_flags[i].snd = s.flags;
}

void heap_set_fst(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].fst = value.value;
 800629a:	f841 5033 	str.w	r5, [r1, r3, lsl #3]
  heap->value_flags[i].fst = value.flags;
 800629e:	2100      	movs	r1, #0
 80062a0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]


    /* NOTE Message passing begins */


    if((heap_index)wrap_fptr.value != HEAP_NULL){
 80062a4:	1c7d      	adds	r5, r7, #1

      int q = postSync( container
 80062a6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c


    /* NOTE Message passing begins */


    if((heap_index)wrap_fptr.value != HEAP_NULL){
 80062aa:	f000 82c6 	beq.w	800683a <eval_callrts+0x9fa>

      int q = postSync( container
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	ab1a      	add	r3, sp, #104	; 0x68
 80062b2:	4639      	mov	r1, r7
 80062b4:	cb0c      	ldmia	r3, {r2, r3}
 80062b6:	4620      	mov	r0, r4
 80062b8:	f002 fb02 	bl	80088c0 <postSync.isra.1.lto_priv.100>
                      , wrap_fptr
                      , sender_data.message
                      , container->current_running_context_id);
      if(q == -1){
 80062bc:	3001      	adds	r0, #1
 80062be:	f43f adf9 	beq.w	8005eb4 <eval_callrts+0x74>



    /* NOTE Message passing ends */

    pq_data_t sender_info_2 =
 80062c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062ca:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 80062ce:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
      {   .context_id = sender_data.context_id
        , .baseline = TIME_MAX
        , .deadline = TIME_MAX
      };
    int enq_status =
 80062d2:	ab24      	add	r3, sp, #144	; 0x90
 80062d4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80062d8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}



    /* NOTE Message passing ends */

    pq_data_t sender_info_2 =
 80062dc:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 80062e0:	f88d 5078 	strb.w	r5, [sp, #120]	; 0x78
      {   .context_id = sender_data.context_id
        , .baseline = TIME_MAX
        , .deadline = TIME_MAX
      };
    int enq_status =
 80062e4:	ab1e      	add	r3, sp, #120	; 0x78
 80062e6:	f504 5091 	add.w	r0, r4, #4640	; 0x1220
 80062ea:	cb0c      	ldmia	r3, {r2, r3}
 80062ec:	3004      	adds	r0, #4
 80062ee:	f7ff faef 	bl	80058d0 <pq_insert>
      pq_insert(&container->rdyQ, sender_info_2); // queueing sender

    if (enq_status == -1){
 80062f2:	3001      	adds	r0, #1
 80062f4:	f43f adde 	beq.w	8005eb4 <eval_callrts+0x74>
      DEBUG_PRINT(("Ready Queue is full\n"));
      return -1;
    }


    cam_value_t empty_tuple = { .value = 0, .flags = 0 };
 80062f8:	2300      	movs	r3, #0
 80062fa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80062fe:	930e      	str	r3, [sp, #56]	; 0x38
    /* container->contexts[sender_data.context_id].env = empty_tuple; */
    int k = message_pass( container
 8006300:	9301      	str	r3, [sp, #4]
 8006302:	9600      	str	r6, [sp, #0]
 8006304:	ab0d      	add	r3, sp, #52	; 0x34
 8006306:	f89d 1064 	ldrb.w	r1, [sp, #100]	; 0x64
 800630a:	4620      	mov	r0, r4
 800630c:	cb0c      	ldmia	r3, {r2, r3}
 800630e:	f002 fb37 	bl	8008980 <message_pass.lto_priv.97>
                        , sender_data.context_id
                        , empty_tuple
                        , bevt_simple.channel_id
                        , SEND);
    if(k == -1){
 8006312:	3001      	adds	r0, #1
 8006314:	f47f aebc 	bne.w	8006090 <eval_callrts+0x250>
 8006318:	e5cc      	b.n	8005eb4 <eval_callrts+0x74>


}

static int handle_choose(vmc_t *vmc){
  cam_value_t e2 = vmc->contexts[vmc->current_running_context_id].env;
 800631a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	eb02 0242 	add.w	r2, r2, r2, lsl #1

  cam_register_t e1;
  int i =
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &e1);
 8006324:	eb03 0343 	add.w	r3, r3, r3, lsl #1


}

static int handle_choose(vmc_t *vmc){
  cam_value_t e2 = vmc->contexts[vmc->current_running_context_id].env;
 8006328:	eb00 1202 	add.w	r2, r0, r2, lsl #4

  cam_register_t e1;
  int i =
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &e1);
 800632c:	eb00 1003 	add.w	r0, r0, r3, lsl #4

static int handle_choose(vmc_t *vmc){
  cam_value_t e2 = vmc->contexts[vmc->current_running_context_id].env;

  cam_register_t e1;
  int i =
 8006330:	303c      	adds	r0, #60	; 0x3c
 8006332:	a919      	add	r1, sp, #100	; 0x64


}

static int handle_choose(vmc_t *vmc){
  cam_value_t e2 = vmc->contexts[vmc->current_running_context_id].env;
 8006334:	f8d2 8004 	ldr.w	r8, [r2, #4]

  cam_register_t e1;
  int i =
 8006338:	f002 f982 	bl	8008640 <stack_pop>
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &e1);
  if(i == 0){
 800633c:	2800      	cmp	r0, #0
 800633e:	f43f adb9 	beq.w	8005eb4 <eval_callrts+0x74>
    DEBUG_PRINT(("Stack pop has failed"));
    return -1;
  }

  event_t evt1 = (event_t)e1.value;
 8006342:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8006344:	ae1e      	add	r6, sp, #120	; 0x78
 8006346:	463d      	mov	r5, r7
 8006348:	e000      	b.n	800634c <eval_callrts+0x50c>
    cam_value_t pointer_to_next = heap_snd(&container->heap, index1);
    if((heap_index)pointer_to_next.value == HEAP_NULL){
      //reached the end of evt1 list
      break;
    }
    index1 = (heap_index)pointer_to_next.value;
 800634a:	461d      	mov	r5, r3

  while(true){

    /* cam_value_t cam_evt_pointer = heap_fst(&container->heap, index1); */

    cam_value_t pointer_to_next = heap_snd(&container->heap, index1);
 800634c:	462a      	mov	r2, r5
 800634e:	4630      	mov	r0, r6
 8006350:	4621      	mov	r1, r4
 8006352:	f002 fa95 	bl	8008880 <heap_snd>
 8006356:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    if((heap_index)pointer_to_next.value == HEAP_NULL){
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	d1f6      	bne.n	800634a <eval_callrts+0x50a>
}

void heap_set_snd(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].snd = value.value;
  heap->value_flags[i].snd = value.flags;
 800635c:	6963      	ldr	r3, [r4, #20]
  heap->cells[i].fst = value.value;
  heap->value_flags[i].fst = value.flags;
}

void heap_set_snd(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].snd = value.value;
 800635e:	6822      	ldr	r2, [r4, #0]
 8006360:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
  heap->value_flags[i].snd = value.flags;
 8006364:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8006368:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  heap->cells[i].fst = value.value;
  heap->value_flags[i].fst = value.flags;
}

void heap_set_snd(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].snd = value.value;
 800636c:	f8c2 8004 	str.w	r8, [r2, #4]
  heap->value_flags[i].snd = value.flags;
 8006370:	8069      	strh	r1, [r5, #2]
  choose(vmc, &evt1, &evt2, &final_evt);

  cam_value_t final_evt_cam =
    { .value = (UINT)final_evt, .flags = VALUE_PTR_BIT };

  vmc->contexts[vmc->current_running_context_id].env = final_evt_cam;
 8006372:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006376:	3301      	adds	r3, #1
 8006378:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800637c:	011b      	lsls	r3, r3, #4
 800637e:	18e2      	adds	r2, r4, r3
 8006380:	52e1      	strh	r1, [r4, r3]
 8006382:	6057      	str	r7, [r2, #4]
 8006384:	e684      	b.n	8006090 <eval_callrts+0x250>
static int handle_spawnExternal(vmc_t *vmc){

  //spawnExternal : Channel a -> Int -> ()

  cam_value_t driver_details =
    vmc->contexts[vmc->current_running_context_id].env;
 8006386:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c

static int handle_spawnExternal(vmc_t *vmc){

  //spawnExternal : Channel a -> Int -> ()

  cam_value_t driver_details =
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    vmc->contexts[vmc->current_running_context_id].env;

  cam_register_t hold_reg;
  int i =
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8006390:	eb03 0343 	add.w	r3, r3, r3, lsl #1

static int handle_spawnExternal(vmc_t *vmc){

  //spawnExternal : Channel a -> Int -> ()

  cam_value_t driver_details =
 8006394:	eb00 1202 	add.w	r2, r0, r2, lsl #4
    vmc->contexts[vmc->current_running_context_id].env;

  cam_register_t hold_reg;
  int i =
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 8006398:	eb00 1003 	add.w	r0, r0, r3, lsl #4

  cam_value_t driver_details =
    vmc->contexts[vmc->current_running_context_id].env;

  cam_register_t hold_reg;
  int i =
 800639c:	303c      	adds	r0, #60	; 0x3c
 800639e:	a91e      	add	r1, sp, #120	; 0x78

static int handle_spawnExternal(vmc_t *vmc){

  //spawnExternal : Channel a -> Int -> ()

  cam_value_t driver_details =
 80063a0:	6855      	ldr	r5, [r2, #4]
    vmc->contexts[vmc->current_running_context_id].env;

  cam_register_t hold_reg;
  int i =
 80063a2:	f002 f94d 	bl	8008640 <stack_pop>
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
 80063a6:	2800      	cmp	r0, #0
 80063a8:	f43f ad84 	beq.w	8005eb4 <eval_callrts+0x74>
    DEBUG_PRINT(("Stack pop has failed"));
    return -1;
  }
  UUID chan_id = (UUID)hold_reg.value;

  if(vmc->drivers[driver_details.value].is_synchronous){
 80063ac:	f105 0392 	add.w	r3, r5, #146	; 0x92
 80063b0:	eb04 1343 	add.w	r3, r4, r3, lsl #5
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    return -1;
  }
  UUID chan_id = (UUID)hold_reg.value;
 80063b4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c

  if(vmc->drivers[driver_details.value].is_synchronous){
 80063b6:	7a1b      	ldrb	r3, [r3, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f040 809f 	bne.w	80064fc <eval_callrts+0x6bc>
    // synchronous driver like LEDs
    vmc->channels[chan_id].sync_driver_no = (UUID)driver_details.value;
  } else {
    // asynchronous drivers like buttons
    vmc->drivers[driver_details.value].channel_id = chan_id;
 80063be:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80063c2:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    return -1;
  }
  UUID chan_id = (UUID)hold_reg.value;
 80063c6:	f883 2020 	strb.w	r2, [r3, #32]
 80063ca:	e661      	b.n	8006090 <eval_callrts+0x250>
static int handle_wrap(vmc_t *vmc){

  //wrap : Event a -> (a -> b) -> Event b

  cam_value_t wrapf_ptr =
    vmc->contexts[vmc->current_running_context_id].env;
 80063cc:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c

static int handle_wrap(vmc_t *vmc){

  //wrap : Event a -> (a -> b) -> Event b

  cam_value_t wrapf_ptr =
 80063d0:	1c53      	adds	r3, r2, #1
 80063d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80063d6:	011b      	lsls	r3, r3, #4
    vmc->contexts[vmc->current_running_context_id].env;

  cam_register_t hold_reg;
  int i =
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80063d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80063dc:	eb00 1002 	add.w	r0, r0, r2, lsl #4

static int handle_wrap(vmc_t *vmc){

  //wrap : Event a -> (a -> b) -> Event b

  cam_value_t wrapf_ptr =
 80063e0:	18e2      	adds	r2, r4, r3
    vmc->contexts[vmc->current_running_context_id].env;

  cam_register_t hold_reg;
  int i =
 80063e2:	303c      	adds	r0, #60	; 0x3c
 80063e4:	a914      	add	r1, sp, #80	; 0x50

static int handle_wrap(vmc_t *vmc){

  //wrap : Event a -> (a -> b) -> Event b

  cam_value_t wrapf_ptr =
 80063e6:	6856      	ldr	r6, [r2, #4]
 80063e8:	5ae7      	ldrh	r7, [r4, r3]
    vmc->contexts[vmc->current_running_context_id].env;

  cam_register_t hold_reg;
  int i =
 80063ea:	f002 f929 	bl	8008640 <stack_pop>
    stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
  if(i == 0){
 80063ee:	2800      	cmp	r0, #0
 80063f0:	f43f ad60 	beq.w	8005eb4 <eval_callrts+0x74>
    DEBUG_PRINT(("Stack pop has failed"));
    return -1;
  }
  event_t current_evt = hold_reg.value;
 80063f4:	9d15      	ldr	r5, [sp, #84]	; 0x54

  // IMP: we are guaranteed by the compiler tranformations that
  // current_evt is a base event; so traversal of event not needed

  // get pointer to cam_event_t
  cam_value_t cevt_ptr = heap_fst(&vmc->heap, (heap_index)current_evt);
 80063f6:	a819      	add	r0, sp, #100	; 0x64
 80063f8:	462a      	mov	r2, r5
 80063fa:	4621      	mov	r1, r4
 80063fc:	f002 fa50 	bl	80088a0 <heap_fst>
  // get pointer to base_event_t
  cam_value_t bevt_ptr = heap_fst(&vmc->heap, (heap_index)cevt_ptr.value);
 8006400:	4621      	mov	r1, r4
 8006402:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006404:	a81e      	add	r0, sp, #120	; 0x78
 8006406:	f002 fa4b 	bl	80088a0 <heap_fst>
  // set the second of the cell that bevt_ptr is pointing to wrapf_ptr
  heap_set_snd(&vmc->heap, (heap_index)bevt_ptr.value, wrapf_ptr);
 800640a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  heap->cells[i].fst = value.value;
  heap->value_flags[i].fst = value.flags;
}

void heap_set_snd(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].snd = value.value;
 800640c:	6822      	ldr	r2, [r4, #0]
  heap->value_flags[i].snd = value.flags;
 800640e:	6963      	ldr	r3, [r4, #20]
  heap->cells[i].fst = value.value;
  heap->value_flags[i].fst = value.flags;
}

void heap_set_snd(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].snd = value.value;
 8006410:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  heap->value_flags[i].snd = value.flags;
 8006414:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  heap->cells[i].fst = value.value;
  heap->value_flags[i].fst = value.flags;
}

void heap_set_snd(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].snd = value.value;
 8006418:	6056      	str	r6, [r2, #4]
  heap->value_flags[i].snd = value.flags;
 800641a:	805f      	strh	r7, [r3, #2]

  //Place the modified event on the environment
  cam_value_t new_env = { .value = (UINT)current_evt, .flags = VALUE_PTR_BIT };
  vmc->contexts[vmc->current_running_context_id].env = new_env;
 800641c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006420:	3301      	adds	r3, #1
 8006422:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	18e2      	adds	r2, r4, r3
 800642a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800642e:	52e1      	strh	r1, [r4, r3]
 8006430:	6055      	str	r5, [r2, #4]
 8006432:	e62d      	b.n	8006090 <eval_callrts+0x250>
        return 1;
      } // else continue the do-while loop

    } else if (bevt_simple.e_type == RECV) { // recvEvt

      if(poll_sendq(container, &container->channels[bevt_simple.channel_id].sendq)){
 8006434:	4425      	add	r5, r4
 8006436:	35f4      	adds	r5, #244	; 0xf4
  return 1;
}

int chan_send_q_front  (chan_send_queue_t *q, send_data_t *send_data){

  if (is_empty(q)){
 8006438:	692b      	ldr	r3, [r5, #16]
 800643a:	b943      	cbnz	r3, 800644e <eval_callrts+0x60e>
 800643c:	e692      	b.n	8006164 <eval_callrts+0x324>
      cam_value_t dirty_flag =
        heap_fst(  &container->heap
                 , (heap_index)send_data.dirty_flag_pointer.value);
      if((dirty_flag.value & 1) == 1){ // if dirty flag is SET
        send_data_t temp;
        chan_send_q_dequeue(q, &temp); // no need to check status we know there is data
 800643e:	f002 fb07 	bl	8008a50 <chan_send_q_dequeue>
 8006442:	692b      	ldr	r3, [r5, #16]
 8006444:	f10d 0978 	add.w	r9, sp, #120	; 0x78
 8006448:	2b00      	cmp	r3, #0
 800644a:	f43f ae8d 	beq.w	8006168 <eval_callrts+0x328>
    DEBUG_PRINT(("Chan send queue is empty\n"));
    return -1;
  }

  *send_data = q->data[q->front];
 800644e:	f8d8 30fc 	ldr.w	r3, [r8, #252]	; 0xfc
 8006452:	f8d8 20f4 	ldr.w	r2, [r8, #244]	; 0xf4
 8006456:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800645a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    send_data_t send_data;
    int op_status = chan_send_q_front(q, &send_data);
    if(op_status == -1){ //empty queue
      return false;
    } else {
      cam_value_t dirty_flag =
 800645e:	a80f      	add	r0, sp, #60	; 0x3c
 8006460:	691a      	ldr	r2, [r3, #16]
 8006462:	4621      	mov	r1, r4
 8006464:	f002 fa1c 	bl	80088a0 <heap_fst>
        heap_fst(  &container->heap
                 , (heap_index)send_data.dirty_flag_pointer.value);
      if((dirty_flag.value & 1) == 1){ // if dirty flag is SET
 8006468:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800646a:	07db      	lsls	r3, r3, #31
        send_data_t temp;
        chan_send_q_dequeue(q, &temp); // no need to check status we know there is data
 800646c:	4628      	mov	r0, r5
 800646e:	a91e      	add	r1, sp, #120	; 0x78
      return false;
    } else {
      cam_value_t dirty_flag =
        heap_fst(  &container->heap
                 , (heap_index)send_data.dirty_flag_pointer.value);
      if((dirty_flag.value & 1) == 1){ // if dirty flag is SET
 8006470:	d4e5      	bmi.n	800643e <eval_callrts+0x5fe>
        *cev = cevt;
 8006472:	2301      	movs	r3, #1
 8006474:	f88d 7065 	strb.w	r7, [sp, #101]	; 0x65
 8006478:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800647c:	e6e5      	b.n	800624a <eval_callrts+0x40a>
    heap_index hi = vmc_heap_alloc_withGC(vmc);
    if(hi == HEAP_NULL){
      DEBUG_PRINT(("Heap allocation has failed"));
      return -1;
    }
    heap_set(&vmc->heap, hi, val, empty_tuple);
 800647e:	2300      	movs	r3, #0
 8006480:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 8006484:	9310      	str	r3, [sp, #64]	; 0x40
 8006486:	ab0f      	add	r3, sp, #60	; 0x3c
 8006488:	e893 0003 	ldmia.w	r3, {r0, r1}
 800648c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8006490:	e88d 0003 	stmia.w	sp, {r0, r1}
 8006494:	4620      	mov	r0, r4
 8006496:	4639      	mov	r1, r7
 8006498:	f002 f9d2 	bl	8008840 <heap_set>
    cam_value_t new_env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };

    vmc->contexts[vmc->current_running_context_id].env = new_env_pointer;
 800649c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80064a0:	3301      	adds	r3, #1
 80064a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	18e2      	adds	r2, r4, r3
 80064aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80064ae:	52e0      	strh	r0, [r4, r3]

    // Spawn will places the label graveyard address on the stack
    return spawn(vmc, (uint16_t)label.value); // will place PID in env
 80064b0:	b2b1      	uxth	r1, r6
 80064b2:	4620      	mov	r0, r4
    }
    heap_set(&vmc->heap, hi, val, empty_tuple);
    cam_value_t new_env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };

    vmc->contexts[vmc->current_running_context_id].env = new_env_pointer;
 80064b4:	6057      	str	r7, [r2, #4]

    // Spawn will places the label graveyard address on the stack
    return spawn(vmc, (uint16_t)label.value); // will place PID in env
 80064b6:	f002 f92b 	bl	8008710 <spawn>
    default:
      DEBUG_PRINT(("Invalid RTS op number"));
      *pc_idx = ret_code;
      return;
  }
  if(ret_code == -1){
 80064ba:	3001      	adds	r0, #1
 80064bc:	f47f ade8 	bne.w	8006090 <eval_callrts+0x250>
 80064c0:	e4f8      	b.n	8005eb4 <eval_callrts+0x74>
    container->contexts[container->current_running_context_id].logicalTime;
  Time wakeupTime  = currentTime + baseline;
  Time finishTime;

  if(deadline == 0) // XXX : No deadline
    finishTime = TIME_MAX;
 80064c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80064ca:	e53a      	b.n	8005f42 <eval_callrts+0x102>
    return 1;

  }

  // baseline > 0 set alarm
  int i = setAlarm(wakeupTime);
 80064cc:	4640      	mov	r0, r8
 80064ce:	4649      	mov	r1, r9
 80064d0:	f002 f8ee 	bl	80086b0 <setAlarm.lto_priv.98>
  if(i == -1){
 80064d4:	3001      	adds	r0, #1
 80064d6:	f43f aced 	beq.w	8005eb4 <eval_callrts+0x74>
    DEBUG_PRINT(("Setting wakeup time has failed \n"));
    return i;
  }


  int j = pq_insert(&container->waitQ, currentThread);
 80064da:	ab24      	add	r3, sp, #144	; 0x90
 80064dc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80064e0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80064e4:	ad1e      	add	r5, sp, #120	; 0x78
 80064e6:	f504 5091 	add.w	r0, r4, #4640	; 0x1220
 80064ea:	e895 000c 	ldmia.w	r5, {r2, r3}
 80064ee:	3014      	adds	r0, #20
 80064f0:	f7ff f9ee 	bl	80058d0 <pq_insert>
  if(j == -1){
 80064f4:	3001      	adds	r0, #1
 80064f6:	f47f ad42 	bne.w	8005f7e <eval_callrts+0x13e>
 80064fa:	e4db      	b.n	8005eb4 <eval_callrts+0x74>
 80064fc:	b2d2      	uxtb	r2, r2
  }
  UUID chan_id = (UUID)hold_reg.value;

  if(vmc->drivers[driver_details.value].is_synchronous){
    // synchronous driver like LEDs
    vmc->channels[chan_id].sync_driver_no = (UUID)driver_details.value;
 80064fe:	232c      	movs	r3, #44	; 0x2c
 8006500:	fb03 4402 	mla	r4, r3, r2, r4
 8006504:	f884 511d 	strb.w	r5, [r4, #285]	; 0x11d
 8006508:	e5c2      	b.n	8006090 <eval_callrts+0x250>
    cam_event_t cevt = { .bev = bevt, .msg = message };

    /**** Dealing with synchronous drivers like LEDs *****/
    if(container->channels[bevt_simple.channel_id].sync_driver_no != DRIVER_NULL){
      // should use ll_data_readable/ ll_data_writeable depending on the event_type here
      *cev = cevt;
 800650a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800650e:	f88d 7065 	strb.w	r7, [sp, #101]	; 0x65
 8006512:	ae19      	add	r6, sp, #100	; 0x64
 8006514:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006516:	ad0f      	add	r5, sp, #60	; 0x3c
 8006518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800651a:	6833      	ldr	r3, [r6, #0]
 800651c:	602b      	str	r3, [r5, #0]



/********** IO operation **********/
static int synchronizeSyncDriver(vmc_t *container, cam_event_t cev){
  base_event_t bevt = cev.bev;
 800651e:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
    cam_event_t cevt = { .bev = bevt, .msg = message };

    /**** Dealing with synchronous drivers like LEDs *****/
    if(container->channels[bevt_simple.channel_id].sync_driver_no != DRIVER_NULL){
      // should use ll_data_readable/ ll_data_writeable depending on the event_type here
      *cev = cevt;
 8006522:	9a1d      	ldr	r2, [sp, #116]	; 0x74



/********** IO operation **********/
static int synchronizeSyncDriver(vmc_t *container, cam_event_t cev){
  base_event_t bevt = cev.bev;
 8006524:	b2fb      	uxtb	r3, r7
 8006526:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  base_evt_simple_t bevt_simple = bevt.evt_details;
  cam_value_t wrap_fptr = bevt.wrap_func_ptr;


  cam_value_t val_before_post_sync; // this will be initialised inside the contionals
  if(bevt_simple.e_type == SEND){
 8006528:	2d00      	cmp	r5, #0
 800652a:	f000 8113 	beq.w	8006754 <eval_callrts+0x914>

    val_before_post_sync = empty_tuple;



  } else if(bevt_simple.e_type == RECV) {
 800652e:	2d01      	cmp	r5, #1
 8006530:	f47f acc0 	bne.w	8005eb4 <eval_callrts+0x74>
    UUID sync_driver_number =
 8006534:	fb0e 4303 	mla	r3, lr, r3, r4
bool ll_driver_init(void) {
  return true; /* maybe something will need a status indicator in the future */
}

uint32_t ll_read(ll_driver_t *drv, uint8_t *data, uint32_t data_size) {
  return drv->ll_read_fun((struct ll_driver_s*)drv, data, data_size);
 8006538:	ae1e      	add	r6, sp, #120	; 0x78
      container->channels[bevt_simple.channel_id].sync_driver_no;
    uint8_t data_arr[4];
    //TODO: How many bytes do we read ? its not always1 byte
    int k =
      ll_read(&container->drivers[sync_driver_number], data_arr, 1); //reading 1 byte
 800653a:	f893 211d 	ldrb.w	r2, [r3, #285]	; 0x11d
 800653e:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 8006542:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 8006546:	eb04 1042 	add.w	r0, r4, r2, lsl #5
 800654a:	3308      	adds	r3, #8
 800654c:	f500 5092 	add.w	r0, r0, #4672	; 0x1240
 8006550:	462a      	mov	r2, r5
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	3004      	adds	r0, #4
 8006556:	4631      	mov	r1, r6
 8006558:	4798      	blx	r3
    if(k != 1){
 800655a:	2801      	cmp	r0, #1
 800655c:	f47f acaa 	bne.w	8005eb4 <eval_callrts+0x74>
      return -1;
    }

    UINT data = 0;
    data = data | (data_arr[3] << 24);
    data = data | (data_arr[2] << 16);
 8006560:	f89d 207a 	ldrb.w	r2, [sp, #122]	; 0x7a
      DEBUG_PRINT(("Failed to read from sync driver!"));
      return -1;
    }

    UINT data = 0;
    data = data | (data_arr[3] << 24);
 8006564:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
    data = data | (data_arr[2] << 16);
    data = data | (data_arr[1] <<  8);
    data = data | data_arr[0];
 8006568:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
    }

    UINT data = 0;
    data = data | (data_arr[3] << 24);
    data = data | (data_arr[2] << 16);
    data = data | (data_arr[1] <<  8);
 800656c:	f89d 5079 	ldrb.w	r5, [sp, #121]	; 0x79
      return -1;
    }

    UINT data = 0;
    data = data | (data_arr[3] << 24);
    data = data | (data_arr[2] << 16);
 8006570:	0412      	lsls	r2, r2, #16
 8006572:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8006576:	4313      	orrs	r3, r2
    data = data | (data_arr[1] <<  8);
    data = data | data_arr[0];
 8006578:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
    return -1;
  }


  //Post synchronization
  if((heap_index)wrap_fptr.value != HEAP_NULL){
 800657c:	1c78      	adds	r0, r7, #1
 800657e:	f000 80de 	beq.w	800673e <eval_callrts+0x8fe>

    int q = postSync( container
 8006582:	2300      	movs	r3, #0
 8006584:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
 8006588:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800658c:	951f      	str	r5, [sp, #124]	; 0x7c
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	4639      	mov	r1, r7
 8006592:	e896 000c 	ldmia.w	r6, {r2, r3}
 8006596:	4620      	mov	r0, r4
 8006598:	f002 f992 	bl	80088c0 <postSync.isra.1.lto_priv.100>
                    , wrap_fptr
                    , val_before_post_sync
                    , container->current_running_context_id);
    if(q == -1){
 800659c:	3001      	adds	r0, #1
 800659e:	f47f ad77 	bne.w	8006090 <eval_callrts+0x250>
 80065a2:	e487      	b.n	8005eb4 <eval_callrts+0x74>
 80065a4:	4657      	mov	r7, sl
 80065a6:	46c8      	mov	r8, r9
 80065a8:	e00a      	b.n	80065c0 <eval_callrts+0x780>
        DEBUG_PRINT(( "Cannot enqueue in channel %u 's send queue \n"
                     , bevt_simple.channel_id));
        return -1;
      }

    } else if (bevt_simple.e_type == RECV){ // recvEvt
 80065aa:	2e01      	cmp	r6, #1
 80065ac:	d072      	beq.n	8006694 <eval_callrts+0x854>
        return -1;
      }

    }

    cam_value_t pointer_to_next = heap_snd(&container->heap, index);
 80065ae:	463a      	mov	r2, r7
 80065b0:	4621      	mov	r1, r4
 80065b2:	a819      	add	r0, sp, #100	; 0x64
 80065b4:	f002 f964 	bl	8008880 <heap_snd>
    index = (heap_index)pointer_to_next.value;
 80065b8:	9f1a      	ldr	r7, [sp, #104]	; 0x68

  } while(index != HEAP_NULL);
 80065ba:	1c79      	adds	r1, r7, #1
 80065bc:	f43f acdf 	beq.w	8005f7e <eval_callrts+0x13e>

static int blockAllEvents(vmc_t *container, event_t *evts){
  heap_index index = *evts;
  do{

    cam_value_t cam_evt_pointer = heap_fst(&container->heap, index);
 80065c0:	a807      	add	r0, sp, #28
 80065c2:	4621      	mov	r1, r4
 80065c4:	463a      	mov	r2, r7
 80065c6:	f002 f96b 	bl	80088a0 <heap_fst>


    cam_value_t base_evt_ptr =
      heap_fst(&container->heap, (heap_index)cam_evt_pointer.value);
 80065ca:	9d08      	ldr	r5, [sp, #32]
  do{

    cam_value_t cam_evt_pointer = heap_fst(&container->heap, index);


    cam_value_t base_evt_ptr =
 80065cc:	a809      	add	r0, sp, #36	; 0x24
 80065ce:	462a      	mov	r2, r5
 80065d0:	4621      	mov	r1, r4
 80065d2:	f002 f965 	bl	80088a0 <heap_fst>
 80065d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
      heap_fst(&container->heap, (heap_index)cam_evt_pointer.value);

    cam_value_t msg =
 80065d8:	462a      	mov	r2, r5
 80065da:	a80b      	add	r0, sp, #44	; 0x2c
 80065dc:	4621      	mov	r1, r4
 80065de:	f002 f94f 	bl	8008880 <heap_snd>
      heap_snd(&container->heap, (heap_index)cam_evt_pointer.value);



    cam_value_t base_evt_simple =
 80065e2:	4632      	mov	r2, r6
 80065e4:	a80d      	add	r0, sp, #52	; 0x34
 80065e6:	4621      	mov	r1, r4
 80065e8:	f002 f95a 	bl	80088a0 <heap_fst>
 80065ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
      heap_fst(&container->heap, (heap_index)base_evt_ptr.value);

    cam_value_t wrap_fptr =
 80065ee:	4632      	mov	r2, r6
 80065f0:	a814      	add	r0, sp, #80	; 0x50
      heap_snd(&container->heap, (heap_index)base_evt_ptr.value);



    base_evt_simple_t bevt_simple =
 80065f2:	f3c5 2607 	ubfx	r6, r5, #8, #8


    cam_value_t base_evt_simple =
      heap_fst(&container->heap, (heap_index)base_evt_ptr.value);

    cam_value_t wrap_fptr =
 80065f6:	4621      	mov	r1, r4
 80065f8:	f002 f942 	bl	8008880 <heap_snd>
        , .wrap_func_ptr = wrap_fptr
      };

    (void)bevt;// unused

    if(bevt_simple.e_type == SEND){
 80065fc:	2e00      	cmp	r6, #0
 80065fe:	d1d4      	bne.n	80065aa <eval_callrts+0x76a>
  if(b)
    dirty_flag = (cam_value_t){ .value = 1, .flags = 0 }; // true
  else
    dirty_flag = (cam_value_t){ .value = 0, .flags = 0 }; // false

  heap_index dirty_flag_idx = vmc_heap_alloc_withGC(container);
 8006600:	4620      	mov	r0, r4
 8006602:	f7ff f9dd 	bl	80059c0 <vmc_heap_alloc_withGC>
  heap->value_flags[i].fst = f.flags;
  heap->value_flags[i].snd = s.flags;
}

void heap_set_fst(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].fst = value.value;
 8006606:	6822      	ldr	r2, [r4, #0]
  heap->value_flags[i].fst = value.flags;
 8006608:	6963      	ldr	r3, [r4, #20]
  heap->value_flags[i].fst = f.flags;
  heap->value_flags[i].snd = s.flags;
}

void heap_set_fst(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].fst = value.value;
 800660a:	f842 6030 	str.w	r6, [r2, r0, lsl #3]



      //XXX: Instead of copying the whole message send its reference.
      // send_data_t should have the field cam_value_t *message
      send_data_t sender_data =
 800660e:	aa0b      	add	r2, sp, #44	; 0x2c
  if(b)
    dirty_flag = (cam_value_t){ .value = 1, .flags = 0 }; // true
  else
    dirty_flag = (cam_value_t){ .value = 0, .flags = 0 }; // false

  heap_index dirty_flag_idx = vmc_heap_alloc_withGC(container);
 8006610:	4684      	mov	ip, r0



      //XXX: Instead of copying the whole message send its reference.
      // send_data_t should have the field cam_value_t *message
      send_data_t sender_data =
 8006612:	e892 0003 	ldmia.w	r2, {r0, r1}
  heap->value_flags[i].fst = value.flags;
 8006616:	f823 602c 	strh.w	r6, [r3, ip, lsl #2]
 800661a:	ab1a      	add	r3, sp, #104	; 0x68
 800661c:	e883 0003 	stmia.w	r3, {r0, r1}
        {   .context_id = container->current_running_context_id
 8006620:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 8006624:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 8006628:	f248 0300 	movw	r3, #32768	; 0x8000
 800662c:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
 8006630:	f88d e064 	strb.w	lr, [sp, #100]	; 0x64
 8006634:	ae19      	add	r6, sp, #100	; 0x64
 8006636:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006638:	b2ed      	uxtb	r5, r5
          , .message = msg
          , .dirty_flag_pointer = df_pointer };

      int j =
        chan_send_q_enqueue(&container->channels[bevt_simple.channel_id].sendq, sender_data);
 800663a:	262c      	movs	r6, #44	; 0x2c
 800663c:	fb06 f505 	mul.w	r5, r6, r5
 8006640:	4646      	mov	r6, r8
 8006642:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006644:	1963      	adds	r3, r4, r5
 8006646:	33f4      	adds	r3, #244	; 0xf4
 8006648:	6859      	ldr	r1, [r3, #4]
static inline bool is_empty(chan_send_queue_t *q)
{  return (q->size == 0); }

int chan_send_q_enqueue(chan_send_queue_t *q, send_data_t send_data){

  if (is_full(q)){
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	f8c6 c000 	str.w	ip, [r6]
 8006650:	4299      	cmp	r1, r3
 8006652:	f43f ac2f 	beq.w	8005eb4 <eval_callrts+0x74>
    DEBUG_PRINT(("Chan recv queue is full\n"));
    return -1;
  }
  q->rear = (q->rear + 1)%q->capacity;
 8006656:	4425      	add	r5, r4
  q->data[q->rear] = send_data;
 8006658:	f88d e078 	strb.w	lr, [sp, #120]	; 0x78

  if (is_full(q)){
    DEBUG_PRINT(("Chan recv queue is full\n"));
    return -1;
  }
  q->rear = (q->rear + 1)%q->capacity;
 800665c:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
  q->data[q->rear] = send_data;
 8006660:	f8d5 60f4 	ldr.w	r6, [r5, #244]	; 0xf4

  if (is_full(q)){
    DEBUG_PRINT(("Chan recv queue is full\n"));
    return -1;
  }
  q->rear = (q->rear + 1)%q->capacity;
 8006664:	3201      	adds	r2, #1
  q->data[q->rear] = send_data;
 8006666:	46c6      	mov	lr, r8

  if (is_full(q)){
    DEBUG_PRINT(("Chan recv queue is full\n"));
    return -1;
  }
  q->rear = (q->rear + 1)%q->capacity;
 8006668:	fb92 f3f1 	sdiv	r3, r2, r1
 800666c:	fb01 2c13 	mls	ip, r1, r3, r2
  q->data[q->rear] = send_data;
 8006670:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}

  if (is_full(q)){
    DEBUG_PRINT(("Chan recv queue is full\n"));
    return -1;
  }
  q->rear = (q->rear + 1)%q->capacity;
 8006674:	f8c5 c100 	str.w	ip, [r5, #256]	; 0x100
  q->data[q->rear] = send_data;
 8006678:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800667c:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 8006680:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006682:	f8de 3000 	ldr.w	r3, [lr]
 8006686:	6033      	str	r3, [r6, #0]
  q->size = q->size + 1;
 8006688:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 800668c:	3301      	adds	r3, #1
 800668e:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
 8006692:	e78c      	b.n	80065ae <eval_callrts+0x76e>
  if(b)
    dirty_flag = (cam_value_t){ .value = 1, .flags = 0 }; // true
  else
    dirty_flag = (cam_value_t){ .value = 0, .flags = 0 }; // false

  heap_index dirty_flag_idx = vmc_heap_alloc_withGC(container);
 8006694:	4620      	mov	r0, r4
 8006696:	f7ff f993 	bl	80059c0 <vmc_heap_alloc_withGC>
  heap->value_flags[i].fst = f.flags;
  heap->value_flags[i].snd = s.flags;
}

void heap_set_fst(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].fst = value.value;
 800669a:	6822      	ldr	r2, [r4, #0]
  heap->value_flags[i].fst = value.flags;
 800669c:	6963      	ldr	r3, [r4, #20]
  heap->value_flags[i].fst = f.flags;
  heap->value_flags[i].snd = s.flags;
}

void heap_set_fst(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].fst = value.value;
 800669e:	2100      	movs	r1, #0
 80066a0:	f842 1030 	str.w	r1, [r2, r0, lsl #3]
  heap->value_flags[i].fst = value.flags;
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	f823 2020 	strh.w	r2, [r3, r0, lsl #2]
      recv_data_t recv_data =
        {   .context_id = container->current_running_context_id
          , .dirty_flag_pointer = df_pointer };

      int j =
        chan_recv_q_enqueue(  &container->channels[bevt_simple.channel_id].recvq
 80066ac:	222c      	movs	r2, #44	; 0x2c
 80066ae:	b2eb      	uxtb	r3, r5
 80066b0:	fb02 f303 	mul.w	r3, r2, r3

      // create dirty flag = false
      cam_value_t df_pointer = create_dirty_flag(container, false);

      recv_data_t recv_data =
        {   .context_id = container->current_running_context_id
 80066b4:	f894 902c 	ldrb.w	r9, [r4, #44]	; 0x2c
 80066b8:	901b      	str	r0, [sp, #108]	; 0x6c
 80066ba:	f248 0200 	movw	r2, #32768	; 0x8000
 80066be:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
 80066c2:	f88d 9064 	strb.w	r9, [sp, #100]	; 0x64
 80066c6:	aa19      	add	r2, sp, #100	; 0x64
 80066c8:	ca07      	ldmia	r2, {r0, r1, r2}
          , .dirty_flag_pointer = df_pointer };

      int j =
        chan_recv_q_enqueue(  &container->channels[bevt_simple.channel_id].recvq
 80066ca:	eb04 0e03 	add.w	lr, r4, r3
 80066ce:	ae0f      	add	r6, sp, #60	; 0x3c
 80066d0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80066d4:	f8de 010c 	ldr.w	r0, [lr, #268]	; 0x10c
static inline bool is_empty(chan_recv_queue_t *q)
{  return (q->size == 0); }

int chan_recv_q_enqueue(chan_recv_queue_t *q, recv_data_t chan_data){

  if (is_full(q)){
 80066d8:	f8de 2118 	ldr.w	r2, [lr, #280]	; 0x118
 80066dc:	4290      	cmp	r0, r2
 80066de:	f50e 7e84 	add.w	lr, lr, #264	; 0x108
 80066e2:	f43f abe7 	beq.w	8005eb4 <eval_callrts+0x74>
    DEBUG_PRINT(("Chan recv queue is full\n"));
    return -1;
  }
  q->rear = (q->rear + 1)%q->capacity;
 80066e6:	f8de 500c 	ldr.w	r5, [lr, #12]
  q->data[q->rear] = chan_data;
 80066ea:	f88d 903c 	strb.w	r9, [sp, #60]	; 0x3c

  if (is_full(q)){
    DEBUG_PRINT(("Chan recv queue is full\n"));
    return -1;
  }
  q->rear = (q->rear + 1)%q->capacity;
 80066ee:	4423      	add	r3, r4
 80066f0:	1c69      	adds	r1, r5, #1
 80066f2:	46f4      	mov	ip, lr
 80066f4:	fb91 f2f0 	sdiv	r2, r1, r0
 80066f8:	fb00 1512 	mls	r5, r0, r2, r1
  q->data[q->rear] = chan_data;
 80066fc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006700:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108

  if (is_full(q)){
    DEBUG_PRINT(("Chan recv queue is full\n"));
    return -1;
  }
  q->rear = (q->rear + 1)%q->capacity;
 8006704:	f8cc 500c 	str.w	r5, [ip, #12]
  q->data[q->rear] = chan_data;
 8006708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800670c:	eb0e 0585 	add.w	r5, lr, r5, lsl #2
 8006710:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  q->size = q->size + 1;
 8006714:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8006718:	3201      	adds	r2, #1
 800671a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800671e:	e746      	b.n	80065ae <eval_callrts+0x76e>

  if(heap_s.value == 4294967295){ // if combinator

    cam_value_t label = heap_f;

    vmc->contexts[vmc->current_running_context_id].env = empty_tuple;
 8006720:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006724:	3301      	adds	r3, #1
 8006726:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	18e5      	adds	r5, r4, r3
 800672e:	2200      	movs	r2, #0
 8006730:	52e2      	strh	r2, [r4, r3]

    return spawn(vmc, (uint16_t)label.value); // will place PID in env
 8006732:	b2b9      	uxth	r1, r7
 8006734:	4620      	mov	r0, r4

  if(heap_s.value == 4294967295){ // if combinator

    cam_value_t label = heap_f;

    vmc->contexts[vmc->current_running_context_id].env = empty_tuple;
 8006736:	606a      	str	r2, [r5, #4]

    return spawn(vmc, (uint16_t)label.value); // will place PID in env
 8006738:	f001 ffea 	bl	8008710 <spawn>
 800673c:	e6bd      	b.n	80064ba <eval_callrts+0x67a>
      return q;
    }


  } else {
    container->contexts[container->current_running_context_id].env
 800673e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
      = val_before_post_sync;
 8006742:	3301      	adds	r3, #1
 8006744:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006748:	011b      	lsls	r3, r3, #4
 800674a:	18e2      	adds	r2, r4, r3
 800674c:	2100      	movs	r1, #0
 800674e:	52e1      	strh	r1, [r4, r3]
 8006750:	6055      	str	r5, [r2, #4]
 8006752:	e49d      	b.n	8006090 <eval_callrts+0x250>
    data_arr[3] = extract_bits(message.value, 24, 8);
    data_arr[2] = extract_bits(message.value, 16, 8);
    data_arr[1] = extract_bits(message.value,  8, 8);
    data_arr[0] = extract_bits(message.value,  0, 8);

    UUID sync_driver_number =
 8006754:	fb0e 4303 	mla	r3, lr, r3, r4

    uint8_t data_arr[4];
    data_arr[3] = extract_bits(message.value, 24, 8);
    data_arr[2] = extract_bits(message.value, 16, 8);
    data_arr[1] = extract_bits(message.value,  8, 8);
    data_arr[0] = extract_bits(message.value,  0, 8);
 8006758:	ae24      	add	r6, sp, #144	; 0x90
      container->channels[bevt_simple.channel_id].sync_driver_no;

    // TODO: how many bytes should we write ?
    //       its not always one. 
    int k =
      ll_write(&container->drivers[sync_driver_number], data_arr, 4); //writing 4 bytes
 800675a:	f893 111d 	ldrb.w	r1, [r3, #285]	; 0x11d

    uint8_t data_arr[4];
    data_arr[3] = extract_bits(message.value, 24, 8);
    data_arr[2] = extract_bits(message.value, 16, 8);
    data_arr[1] = extract_bits(message.value,  8, 8);
    data_arr[0] = extract_bits(message.value,  0, 8);
 800675e:	f806 2d18 	strb.w	r2, [r6, #-24]!
}

uint32_t ll_write(ll_driver_t *drv, uint8_t *data, uint32_t data_size) {
  return drv->ll_write_fun((struct ll_driver_s*)drv, data, data_size);
 8006762:	eb04 1341 	add.w	r3, r4, r1, lsl #5
 8006766:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
      container->channels[bevt_simple.channel_id].sync_driver_no;

    // TODO: how many bytes should we write ?
    //       its not always one. 
    int k =
      ll_write(&container->drivers[sync_driver_number], data_arr, 4); //writing 4 bytes
 800676a:	eb04 1041 	add.w	r0, r4, r1, lsl #5
 800676e:	3308      	adds	r3, #8
  // counting begins with 0
  //  Bit pattern -> 0 1 0 0 1 1
  //  Index       -> 5 4 3 2 1 0
  // counting always moves towards left
  UINT mask = (1 << numbits) - 1;
  return ( mask & (value >> lsbstart));
 8006770:	0e11      	lsrs	r1, r2, #24
 8006772:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006776:	f500 5092 	add.w	r0, r0, #4672	; 0x1240
 800677a:	0a12      	lsrs	r2, r2, #8

    //XXX: Assuming the message is a simple value and not a pointer for
    //     now; We should make such checks here and serialize accordingly

    uint8_t data_arr[4];
    data_arr[3] = extract_bits(message.value, 24, 8);
 800677c:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
    data_arr[2] = extract_bits(message.value, 16, 8);
    data_arr[1] = extract_bits(message.value,  8, 8);
 8006780:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8006784:	689b      	ldr	r3, [r3, #8]
    //XXX: Assuming the message is a simple value and not a pointer for
    //     now; We should make such checks here and serialize accordingly

    uint8_t data_arr[4];
    data_arr[3] = extract_bits(message.value, 24, 8);
    data_arr[2] = extract_bits(message.value, 16, 8);
 8006786:	f88d e07a 	strb.w	lr, [sp, #122]	; 0x7a
 800678a:	3004      	adds	r0, #4
 800678c:	4631      	mov	r1, r6
 800678e:	2204      	movs	r2, #4
 8006790:	4798      	blx	r3

    // TODO: how many bytes should we write ?
    //       its not always one. 
    int k =
      ll_write(&container->drivers[sync_driver_number], data_arr, 4); //writing 4 bytes
    if(k != 4){
 8006792:	2804      	cmp	r0, #4
 8006794:	f43f aef2 	beq.w	800657c <eval_callrts+0x73c>
 8006798:	f7ff bb8c 	b.w	8005eb4 <eval_callrts+0x74>

  if(bevt_simple.e_type == SEND){

    recv_data_t recv_data;//recv_context_id;
    int deq_status =
      chan_recv_q_dequeue(&container->channels[bevt_simple.channel_id].recvq, &recv_data);
 800679c:	202c      	movs	r0, #44	; 0x2c
 800679e:	fb00 4006 	mla	r0, r0, r6, r4


  if(bevt_simple.e_type == SEND){

    recv_data_t recv_data;//recv_context_id;
    int deq_status =
 80067a2:	a919      	add	r1, sp, #100	; 0x64
 80067a4:	f500 7084 	add.w	r0, r0, #264	; 0x108
 80067a8:	f002 f972 	bl	8008a90 <chan_recv_q_dequeue>
      chan_recv_q_dequeue(&container->channels[bevt_simple.channel_id].recvq, &recv_data);
    if(deq_status == -1){ //empty queue
 80067ac:	3001      	adds	r0, #1
 80067ae:	f43f ab81 	beq.w	8005eb4 <eval_callrts+0x74>
  heap->value_flags[i].fst = f.flags;
  heap->value_flags[i].snd = s.flags;
}

void heap_set_fst(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].fst = value.value;
 80067b2:	6821      	ldr	r1, [r4, #0]
  heap->value_flags[i].fst = value.flags;
 80067b4:	6960      	ldr	r0, [r4, #20]

    UUID recv_context_id = recv_data.context_id;

    cam_value_t true_flag = { .value = 1, .flags = 0 };
    heap_set_fst(  &container->heap
                 , (heap_index)recv_data.dirty_flag_pointer.value
 80067b6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
      DEBUG_PRINT(( "Recv Queue of %u empty for syncing send \n"
                   , bevt_simple.channel_id));
      return -1;
    }

    UUID recv_context_id = recv_data.context_id;
 80067b8:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
  heap->value_flags[i].fst = f.flags;
  heap->value_flags[i].snd = s.flags;
}

void heap_set_fst(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].fst = value.value;
 80067bc:	2301      	movs	r3, #1
 80067be:	f841 3032 	str.w	r3, [r1, r2, lsl #3]
  heap->value_flags[i].fst = value.flags;
 80067c2:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
    /* NOTE Message passing begins */
    /*
     */


    int k = message_pass( container
 80067c6:	9301      	str	r3, [sp, #4]
 80067c8:	9600      	str	r6, [sp, #0]
 80067ca:	ab0b      	add	r3, sp, #44	; 0x2c
 80067cc:	4641      	mov	r1, r8
 80067ce:	4620      	mov	r0, r4
 80067d0:	cb0c      	ldmia	r3, {r2, r3}
 80067d2:	f002 f8d5 	bl	8008980 <message_pass.lto_priv.97>
                        , recv_context_id
                        , message
                        , bevt_simple.channel_id
                        , RECV);
    if(k == -1){
 80067d6:	3001      	adds	r0, #1
 80067d8:	f43f ab6c 	beq.w	8005eb4 <eval_callrts+0x74>
    }


    /* NOTE Message passing ends */

    pq_data_t sender_info =
 80067dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067e4:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 80067e8:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
      {   .context_id = container->current_running_context_id
        , .baseline = TIME_MAX
        , .deadline = TIME_MAX
      };
    int enq_status =
 80067ec:	ab24      	add	r3, sp, #144	; 0x90
 80067ee:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
    }


    /* NOTE Message passing ends */

    pq_data_t sender_info =
 80067f2:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
 80067f6:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
      {   .context_id = container->current_running_context_id
        , .baseline = TIME_MAX
        , .deadline = TIME_MAX
      };
    int enq_status =
 80067fa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80067fe:	ab1e      	add	r3, sp, #120	; 0x78
 8006800:	f504 5091 	add.w	r0, r4, #4640	; 0x1220
 8006804:	cb0c      	ldmia	r3, {r2, r3}
 8006806:	3004      	adds	r0, #4
 8006808:	f7ff f862 	bl	80058d0 <pq_insert>
      pq_insert(&container->rdyQ, sender_info); // queueing sender

    if (enq_status == -1){
 800680c:	3001      	adds	r0, #1
 800680e:	f43f ab51 	beq.w	8005eb4 <eval_callrts+0x74>
    /* NOTE Post synchronization actions begins */
    // place the () on sender's env because sync (send) succeeded

    cam_value_t empty_tuple = { .value = 0, .flags = 0 };

    if((heap_index)wrap_fptr.value != HEAP_NULL){
 8006812:	1c7e      	adds	r6, r7, #1
 8006814:	d01c      	beq.n	8006850 <eval_callrts+0xa10>

      int q = postSync( container
 8006816:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
 8006820:	950e      	str	r5, [sp, #56]	; 0x38
 8006822:	ab0d      	add	r3, sp, #52	; 0x34
 8006824:	4639      	mov	r1, r7
 8006826:	cb0c      	ldmia	r3, {r2, r3}
 8006828:	4620      	mov	r0, r4
 800682a:	f002 f849 	bl	80088c0 <postSync.isra.1.lto_priv.100>
                      , wrap_fptr
                      , empty_tuple
                      , container->current_running_context_id);
      if(q == -1){
 800682e:	3001      	adds	r0, #1
 8006830:	f43f ab40 	beq.w	8005eb4 <eval_callrts+0x74>
    }
    /* NOTE Post synchronization actions ends */


    // the receiving thread will run now
    container->current_running_context_id = recv_context_id;
 8006834:	f884 802c 	strb.w	r8, [r4, #44]	; 0x2c
 8006838:	e42a      	b.n	8006090 <eval_callrts+0x250>
      }


    } else {
      container->contexts[container->current_running_context_id].env
        = sender_data.message;
 800683a:	aa1a      	add	r2, sp, #104	; 0x68
 800683c:	3301      	adds	r3, #1
 800683e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006842:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006846:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 800684a:	e883 0003 	stmia.w	r3, {r0, r1}
 800684e:	e538      	b.n	80062c2 <eval_callrts+0x482>
        return q;
      }


    } else {
      container->contexts[container->current_running_context_id].env
 8006850:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
        = empty_tuple;
 8006854:	2330      	movs	r3, #48	; 0x30
 8006856:	fb02 3303 	mla	r3, r2, r3, r3
 800685a:	18e2      	adds	r2, r4, r3
 800685c:	52e5      	strh	r5, [r4, r3]
 800685e:	6055      	str	r5, [r2, #4]
 8006860:	e7e8      	b.n	8006834 <eval_callrts+0x9f4>
 8006862:	bf00      	nop
	...

08006870 <eval_push>:
    vmc->contexts[vmc->current_running_context_id].env = v;
  }
  *pc_idx = (*pc_idx) + 2;
}

void eval_push(vmc_t *vmc, INT *pc_idx) {
 8006870:	b530      	push	{r4, r5, lr}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8006872:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8006876:	1c63      	adds	r3, r4, #1
 8006878:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800687c:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    vmc->contexts[vmc->current_running_context_id].env = v;
  }
  *pc_idx = (*pc_idx) + 2;
}

void eval_push(vmc_t *vmc, INT *pc_idx) {
 8006880:	4602      	mov	r2, r0
 8006882:	460d      	mov	r5, r1
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8006884:	e893 0003 	ldmia.w	r3, {r0, r1}
    vmc->contexts[vmc->current_running_context_id].env = v;
  }
  *pc_idx = (*pc_idx) + 2;
}

void eval_push(vmc_t *vmc, INT *pc_idx) {
 8006888:	b083      	sub	sp, #12
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 800688a:	e88d 0003 	stmia.w	sp, {r0, r1}
  int i = stack_push(&vmc->contexts[vmc->current_running_context_id].stack, e);
 800688e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006892:	eb02 1004 	add.w	r0, r2, r4, lsl #4
 8006896:	303c      	adds	r0, #60	; 0x3c
 8006898:	e89d 0006 	ldmia.w	sp, {r1, r2}
 800689c:	f001 fee8 	bl	8008670 <stack_push>
  if(i == 0){
 80068a0:	b120      	cbz	r0, 80068ac <eval_push+0x3c>
    DEBUG_PRINT(("Stack push has failed"));
    *pc_idx = -1;
    return;
  }
  (*pc_idx)++;
 80068a2:	682b      	ldr	r3, [r5, #0]
 80068a4:	3301      	adds	r3, #1
 80068a6:	602b      	str	r3, [r5, #0]
}
 80068a8:	b003      	add	sp, #12
 80068aa:	bd30      	pop	{r4, r5, pc}
void eval_push(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  int i = stack_push(&vmc->contexts[vmc->current_running_context_id].stack, e);
  if(i == 0){
    DEBUG_PRINT(("Stack push has failed"));
    *pc_idx = -1;
 80068ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068b0:	602b      	str	r3, [r5, #0]
    return;
  }
  (*pc_idx)++;
}
 80068b2:	b003      	add	sp, #12
 80068b4:	bd30      	pop	{r4, r5, pc}
 80068b6:	bf00      	nop
	...

080068c0 <eval_swap>:

void eval_swap(vmc_t *vmc, INT *pc_idx) {
 80068c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80068c2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80068cc:	eb00 1202 	add.w	r2, r0, r2, lsl #4
    return;
  }
  (*pc_idx)++;
}

void eval_swap(vmc_t *vmc, INT *pc_idx) {
 80068d0:	4604      	mov	r4, r0
 80068d2:	460d      	mov	r5, r1
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80068d4:	e892 0003 	ldmia.w	r2, {r0, r1}
    return;
  }
  (*pc_idx)++;
}

void eval_swap(vmc_t *vmc, INT *pc_idx) {
 80068d8:	b085      	sub	sp, #20
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80068da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80068de:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 80068e2:	af02      	add	r7, sp, #8
  }
  (*pc_idx)++;
}

void eval_swap(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80068e4:	e88d 0003 	stmia.w	sp, {r0, r1}
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 80068e8:	2200      	movs	r2, #0
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80068ea:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80068ee:	4639      	mov	r1, r7
  (*pc_idx)++;
}

void eval_swap(vmc_t *vmc, INT *pc_idx) {
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_register_t hold_reg = { .flags = 0, .value = 0 }; // init register
 80068f0:	f8ad 2008 	strh.w	r2, [sp, #8]
 80068f4:	9203      	str	r2, [sp, #12]
  int i = stack_pop(&vmc->contexts[vmc->current_running_context_id].stack, &hold_reg);
 80068f6:	f001 fea3 	bl	8008640 <stack_pop>
  if(i == 0){
 80068fa:	b920      	cbnz	r0, 8006906 <eval_swap+0x46>
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
 80068fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006900:	602b      	str	r3, [r5, #0]
    *pc_idx = -1;
    return;
  }
  vmc->contexts[vmc->current_running_context_id].env = hold_reg;
  (*pc_idx)++;
}
 8006902:	b005      	add	sp, #20
 8006904:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(i == 0){
    DEBUG_PRINT(("Stack pop has failed"));
    *pc_idx = -1;
    return;
  }
  int j = stack_push(&vmc->contexts[vmc->current_running_context_id].stack, e);
 8006906:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800690a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800690e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 8006912:	303c      	adds	r0, #60	; 0x3c
 8006914:	e89d 0006 	ldmia.w	sp, {r1, r2}
 8006918:	f001 feaa 	bl	8008670 <stack_push>
  if(j == 0){
 800691c:	2800      	cmp	r0, #0
 800691e:	d0ed      	beq.n	80068fc <eval_swap+0x3c>
    DEBUG_PRINT(("Stack push has failed"));
    *pc_idx = -1;
    return;
  }
  vmc->contexts[vmc->current_running_context_id].env = hold_reg;
 8006920:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006924:	e897 0003 	ldmia.w	r7, {r0, r1}
 8006928:	3301      	adds	r3, #1
 800692a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800692e:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 8006932:	e884 0003 	stmia.w	r4, {r0, r1}
  (*pc_idx)++;
 8006936:	682b      	ldr	r3, [r5, #0]
 8006938:	3301      	adds	r3, #1
 800693a:	602b      	str	r3, [r5, #0]
}
 800693c:	b005      	add	sp, #20
 800693e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006940 <eval_rest>:
  cam_value_t v = heap_snd(&vmc->heap, (heap_index)vmc->contexts[vmc->current_running_context_id].env.value);
  vmc->contexts[vmc->current_running_context_id].env = v;
  *pc_idx = (*pc_idx) + 2;
}

void eval_rest(vmc_t *vmc, INT *pc_idx)  {
 8006940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  INT n_idx = (*pc_idx) + 1;
  uint8_t acc_n = vmc->code_memory[n_idx];
 8006944:	6a42      	ldr	r2, [r0, #36]	; 0x24
  vmc->contexts[vmc->current_running_context_id].env = v;
  *pc_idx = (*pc_idx) + 2;
}

void eval_rest(vmc_t *vmc, INT *pc_idx)  {
  INT n_idx = (*pc_idx) + 1;
 8006946:	680b      	ldr	r3, [r1, #0]
  uint8_t acc_n = vmc->code_memory[n_idx];
 8006948:	441a      	add	r2, r3
  cam_value_t v = heap_snd(&vmc->heap, (heap_index)vmc->contexts[vmc->current_running_context_id].env.value);
  vmc->contexts[vmc->current_running_context_id].env = v;
  *pc_idx = (*pc_idx) + 2;
}

void eval_rest(vmc_t *vmc, INT *pc_idx)  {
 800694a:	b082      	sub	sp, #8
  INT n_idx = (*pc_idx) + 1;
  uint8_t acc_n = vmc->code_memory[n_idx];
  for(unsigned int i = 0; i < acc_n; i++){
 800694c:	7855      	ldrb	r5, [r2, #1]
  cam_value_t v = heap_snd(&vmc->heap, (heap_index)vmc->contexts[vmc->current_running_context_id].env.value);
  vmc->contexts[vmc->current_running_context_id].env = v;
  *pc_idx = (*pc_idx) + 2;
}

void eval_rest(vmc_t *vmc, INT *pc_idx)  {
 800694e:	4604      	mov	r4, r0
 8006950:	460e      	mov	r6, r1
  INT n_idx = (*pc_idx) + 1;
  uint8_t acc_n = vmc->code_memory[n_idx];
  for(unsigned int i = 0; i < acc_n; i++){
 8006952:	b1f5      	cbz	r5, 8006992 <eval_rest+0x52>
 8006954:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006958:	f04f 0800 	mov.w	r8, #0
 800695c:	3301      	adds	r3, #1
 800695e:	466f      	mov	r7, sp
    cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8006960:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006964:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    cam_value_t v = heap_fst(&vmc->heap, (heap_index)e.value);
 8006968:	4638      	mov	r0, r7
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	4621      	mov	r1, r4
 800696e:	f001 ff97 	bl	80088a0 <heap_fst>
    vmc->contexts[vmc->current_running_context_id].env = v;
 8006972:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006976:	e897 0003 	ldmia.w	r7, {r0, r1}
 800697a:	3301      	adds	r3, #1
 800697c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
}

void eval_rest(vmc_t *vmc, INT *pc_idx)  {
  INT n_idx = (*pc_idx) + 1;
  uint8_t acc_n = vmc->code_memory[n_idx];
  for(unsigned int i = 0; i < acc_n; i++){
 8006980:	f108 0801 	add.w	r8, r8, #1
    cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
    cam_value_t v = heap_fst(&vmc->heap, (heap_index)e.value);
    vmc->contexts[vmc->current_running_context_id].env = v;
 8006984:	eb04 1202 	add.w	r2, r4, r2, lsl #4
}

void eval_rest(vmc_t *vmc, INT *pc_idx)  {
  INT n_idx = (*pc_idx) + 1;
  uint8_t acc_n = vmc->code_memory[n_idx];
  for(unsigned int i = 0; i < acc_n; i++){
 8006988:	45a8      	cmp	r8, r5
    cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
    cam_value_t v = heap_fst(&vmc->heap, (heap_index)e.value);
    vmc->contexts[vmc->current_running_context_id].env = v;
 800698a:	e882 0003 	stmia.w	r2, {r0, r1}
}

void eval_rest(vmc_t *vmc, INT *pc_idx)  {
  INT n_idx = (*pc_idx) + 1;
  uint8_t acc_n = vmc->code_memory[n_idx];
  for(unsigned int i = 0; i < acc_n; i++){
 800698e:	d1e7      	bne.n	8006960 <eval_rest+0x20>
 8006990:	6833      	ldr	r3, [r6, #0]
    cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
    cam_value_t v = heap_fst(&vmc->heap, (heap_index)e.value);
    vmc->contexts[vmc->current_running_context_id].env = v;
  }
  *pc_idx = (*pc_idx) + 2;
 8006992:	3302      	adds	r3, #2
 8006994:	6033      	str	r3, [r6, #0]
}
 8006996:	b002      	add	sp, #8
 8006998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800699c:	0000      	movs	r0, r0
	...

080069a0 <eval_fst>:
    start = start | vmc->context_used[i];
  }
  return !start;
}

void eval_fst(vmc_t *vmc, INT *pc_idx) {
 80069a0:	b530      	push	{r4, r5, lr}
  (*pc_idx)++;
 80069a2:	680b      	ldr	r3, [r1, #0]
 80069a4:	3301      	adds	r3, #1
 80069a6:	600b      	str	r3, [r1, #0]
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80069a8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80069ac:	3301      	adds	r3, #1
 80069ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80069b2:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    start = start | vmc->context_used[i];
  }
  return !start;
}

void eval_fst(vmc_t *vmc, INT *pc_idx) {
 80069b6:	b083      	sub	sp, #12
 80069b8:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_value_t v = heap_fst(&vmc->heap, (heap_index)e.value);
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	4601      	mov	r1, r0
 80069be:	4668      	mov	r0, sp
 80069c0:	f001 ff6e 	bl	80088a0 <heap_fst>
  vmc->contexts[vmc->current_running_context_id].env = v;
 80069c4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80069c8:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80069cc:	3301      	adds	r3, #1
 80069ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80069d2:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 80069d6:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80069da:	b003      	add	sp, #12
 80069dc:	bd30      	pop	{r4, r5, pc}
 80069de:	bf00      	nop

080069e0 <eval_acc>:
  cam_value_t v = heap_snd(&vmc->heap, (heap_index)e.value);
  vmc->contexts[vmc->current_running_context_id].env = v;
}


void eval_acc(vmc_t *vmc, INT *pc_idx) {
 80069e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  INT n_idx = (*pc_idx) + 1;
  uint8_t acc_n = vmc->code_memory[n_idx];
 80069e4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80069e6:	680b      	ldr	r3, [r1, #0]
 80069e8:	4413      	add	r3, r2
  cam_value_t v = heap_snd(&vmc->heap, (heap_index)e.value);
  vmc->contexts[vmc->current_running_context_id].env = v;
}


void eval_acc(vmc_t *vmc, INT *pc_idx) {
 80069ea:	b082      	sub	sp, #8
  INT n_idx = (*pc_idx) + 1;
  uint8_t acc_n = vmc->code_memory[n_idx];
  for(unsigned int i = 0; i < acc_n; i++){
 80069ec:	785c      	ldrb	r4, [r3, #1]
  cam_value_t v = heap_snd(&vmc->heap, (heap_index)e.value);
  vmc->contexts[vmc->current_running_context_id].env = v;
}


void eval_acc(vmc_t *vmc, INT *pc_idx) {
 80069ee:	4606      	mov	r6, r0
 80069f0:	460d      	mov	r5, r1
  INT n_idx = (*pc_idx) + 1;
  uint8_t acc_n = vmc->code_memory[n_idx];
  for(unsigned int i = 0; i < acc_n; i++){
 80069f2:	b3cc      	cbz	r4, 8006a68 <eval_acc+0x88>
 80069f4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80069f8:	2700      	movs	r7, #0
 80069fa:	3301      	adds	r3, #1
 80069fc:	46e8      	mov	r8, sp
    cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 80069fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a02:	eb06 1303 	add.w	r3, r6, r3, lsl #4
    cam_value_t v = heap_fst(&vmc->heap, (heap_index)e.value);
 8006a06:	4640      	mov	r0, r8
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	f001 ff48 	bl	80088a0 <heap_fst>
    vmc->contexts[vmc->current_running_context_id].env = v;
 8006a10:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
 8006a14:	e898 0003 	ldmia.w	r8, {r0, r1}
 8006a18:	f10e 0301 	add.w	r3, lr, #1
 8006a1c:	eb03 0243 	add.w	r2, r3, r3, lsl #1


void eval_acc(vmc_t *vmc, INT *pc_idx) {
  INT n_idx = (*pc_idx) + 1;
  uint8_t acc_n = vmc->code_memory[n_idx];
  for(unsigned int i = 0; i < acc_n; i++){
 8006a20:	3701      	adds	r7, #1
    cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
    cam_value_t v = heap_fst(&vmc->heap, (heap_index)e.value);
    vmc->contexts[vmc->current_running_context_id].env = v;
 8006a22:	eb06 1202 	add.w	r2, r6, r2, lsl #4


void eval_acc(vmc_t *vmc, INT *pc_idx) {
  INT n_idx = (*pc_idx) + 1;
  uint8_t acc_n = vmc->code_memory[n_idx];
  for(unsigned int i = 0; i < acc_n; i++){
 8006a26:	42a7      	cmp	r7, r4
    cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
    cam_value_t v = heap_fst(&vmc->heap, (heap_index)e.value);
    vmc->contexts[vmc->current_running_context_id].env = v;
 8006a28:	e882 0003 	stmia.w	r2, {r0, r1}


void eval_acc(vmc_t *vmc, INT *pc_idx) {
  INT n_idx = (*pc_idx) + 1;
  uint8_t acc_n = vmc->code_memory[n_idx];
  for(unsigned int i = 0; i < acc_n; i++){
 8006a2c:	d1e7      	bne.n	80069fe <eval_acc+0x1e>
    cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
    cam_value_t v = heap_fst(&vmc->heap, (heap_index)e.value);
    vmc->contexts[vmc->current_running_context_id].env = v;
  }
  cam_value_t v = heap_snd(&vmc->heap, (heap_index)vmc->contexts[vmc->current_running_context_id].env.value);
 8006a2e:	f10e 0e01 	add.w	lr, lr, #1
 8006a32:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8006a36:	eb06 1e0e 	add.w	lr, r6, lr, lsl #4
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	4631      	mov	r1, r6
 8006a3e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8006a42:	f001 ff1d 	bl	8008880 <heap_snd>
  vmc->contexts[vmc->current_running_context_id].env = v;
 8006a46:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8006a4a:	e898 0003 	ldmia.w	r8, {r0, r1}
 8006a4e:	3301      	adds	r3, #1
 8006a50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a54:	eb06 1603 	add.w	r6, r6, r3, lsl #4
 8006a58:	e886 0003 	stmia.w	r6, {r0, r1}
  *pc_idx = (*pc_idx) + 2;
 8006a5c:	682b      	ldr	r3, [r5, #0]
 8006a5e:	3302      	adds	r3, #2
 8006a60:	602b      	str	r3, [r5, #0]
}
 8006a62:	b002      	add	sp, #8
 8006a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a68:	f890 e02c 	ldrb.w	lr, [r0, #44]	; 0x2c
 8006a6c:	46e8      	mov	r8, sp
 8006a6e:	e7de      	b.n	8006a2e <eval_acc+0x4e>

08006a70 <eval_snd>:
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_value_t v = heap_fst(&vmc->heap, (heap_index)e.value);
  vmc->contexts[vmc->current_running_context_id].env = v;
}

void eval_snd(vmc_t *vmc, INT *pc_idx) {
 8006a70:	b530      	push	{r4, r5, lr}
  (*pc_idx)++;
 8006a72:	680b      	ldr	r3, [r1, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	600b      	str	r3, [r1, #0]
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
 8006a78:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a82:	eb00 1303 	add.w	r3, r0, r3, lsl #4
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_value_t v = heap_fst(&vmc->heap, (heap_index)e.value);
  vmc->contexts[vmc->current_running_context_id].env = v;
}

void eval_snd(vmc_t *vmc, INT *pc_idx) {
 8006a86:	b083      	sub	sp, #12
 8006a88:	4604      	mov	r4, r0
  (*pc_idx)++;
  cam_register_t e = vmc->contexts[vmc->current_running_context_id].env;
  cam_value_t v = heap_snd(&vmc->heap, (heap_index)e.value);
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	4601      	mov	r1, r0
 8006a8e:	4668      	mov	r0, sp
 8006a90:	f001 fef6 	bl	8008880 <heap_snd>
  vmc->contexts[vmc->current_running_context_id].env = v;
 8006a94:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006a98:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006aa2:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 8006aa6:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8006aaa:	b003      	add	sp, #12
 8006aac:	bd30      	pop	{r4, r5, pc}
 8006aae:	bf00      	nop

08006ab0 <chCoreAllocFromTopI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocFromTopI(size_t size, unsigned align, size_t offset) {
 8006ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	4615      	mov	r5, r2
  uint8_t *p, *prev;

  chDbgCheckClassI();
 8006ab8:	f000 fe1a 	bl	80076f0 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8006abc:	b18c      	cbz	r4, 8006ae2 <chCoreAllocFromTopI+0x32>
 8006abe:	1e60      	subs	r0, r4, #1
 8006ac0:	ea10 0104 	ands.w	r1, r0, r4
 8006ac4:	d10d      	bne.n	8006ae2 <chCoreAllocFromTopI+0x32>

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8006ac6:	4f09      	ldr	r7, [pc, #36]	; (8006aec <chCoreAllocFromTopI+0x3c>)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4264      	negs	r4, r4
 8006acc:	1b9e      	subs	r6, r3, r6
 8006ace:	ea06 0004 	and.w	r0, r6, r4
  prev = p - offset;

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8006ad2:	683c      	ldr	r4, [r7, #0]

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
  prev = p - offset;
 8006ad4:	1b42      	subs	r2, r0, r5

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8006ad6:	42a2      	cmp	r2, r4
 8006ad8:	d306      	bcc.n	8006ae8 <chCoreAllocFromTopI+0x38>
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d304      	bcc.n	8006ae8 <chCoreAllocFromTopI+0x38>
    return NULL;
  }

  ch_memcore.topmem = prev;
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
void *chCoreAllocFromTopI(size_t size, unsigned align, size_t offset) {
  uint8_t *p, *prev;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8006ae2:	4803      	ldr	r0, [pc, #12]	; (8006af0 <chCoreAllocFromTopI+0x40>)
 8006ae4:	f000 fdd4 	bl	8007690 <chSysHalt>
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
  prev = p - offset;

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
    return NULL;
 8006ae8:	4608      	mov	r0, r1
  }

  ch_memcore.topmem = prev;

  return p;
}
 8006aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aec:	2000bb10 	.word	0x2000bb10
 8006af0:	0800d020 	.word	0x0800d020
	...

08006b00 <chCoreAllocAlignedI.lto_priv.77>:
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 8006b00:	2200      	movs	r2, #0
 8006b02:	f7ff bfd5 	b.w	8006ab0 <chCoreAllocFromTopI>
 8006b06:	bf00      	nop
	...

08006b10 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8006b10:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp = currp;
 8006b12:	4c11      	ldr	r4, [pc, #68]	; (8006b58 <chSchGoSleepS+0x48>)
 8006b14:	69a5      	ldr	r5, [r4, #24]
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8006b16:	4606      	mov	r6, r0
  thread_t *otp = currp;

  chDbgCheckClassS();
 8006b18:	f000 fdda 	bl	80076d0 <chDbgCheckClassS>
 * @return              The removed element pointer.
 *
 * @notapi
 */
static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
  ch_priority_queue_t *p = pqp->next;
 8006b1c:	6823      	ldr	r3, [r4, #0]

  /* New state.*/
  otp->state = newstate;
 8006b1e:	f885 6020 	strb.w	r6, [r5, #32]

  pqp->next       = p->next;
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	6022      	str	r2, [r4, #0]
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
  currp->state = CH_STATE_CURRENT;
 8006b26:	2101      	movs	r1, #1
  pqp->next->prev = pqp;
 8006b28:	6054      	str	r4, [r2, #4]
  if (currp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8006b2a:	4618      	mov	r0, r3
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
  currp->state = CH_STATE_CURRENT;
 8006b2c:	f883 1020 	strb.w	r1, [r3, #32]
  if (currp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8006b30:	4629      	mov	r1, r5
     time quantum when it will wakeup.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 8006b32:	61a3      	str	r3, [r4, #24]
  if (currp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8006b34:	f000 fd7c 	bl	8007630 <_trace_switch>
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8006b38:	f3ef 8309 	mrs	r3, PSP
 8006b3c:	69ea      	ldr	r2, [r5, #28]
 8006b3e:	3b64      	subs	r3, #100	; 0x64
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d805      	bhi.n	8006b50 <chSchGoSleepS+0x40>
 8006b44:	69a0      	ldr	r0, [r4, #24]
 8006b46:	4629      	mov	r1, r5
}
 8006b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (currp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8006b4c:	f7f9 bbdc 	b.w	8000308 <_port_switch>
 8006b50:	4802      	ldr	r0, [pc, #8]	; (8006b5c <chSchGoSleepS+0x4c>)
 8006b52:	f000 fd9d 	bl	8007690 <chSysHalt>
 8006b56:	bf00      	nop
 8006b58:	2000b288 	.word	0x2000b288
 8006b5c:	0800cfe4 	.word	0x0800cfe4

08006b60 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8006b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b64:	4689      	mov	r9, r1
 8006b66:	b087      	sub	sp, #28
 8006b68:	4606      	mov	r6, r0

  chDbgCheckClassS();
 8006b6a:	f000 fdb1 	bl	80076d0 <chDbgCheckClassS>

  if (TIME_INFINITE != timeout) {
 8006b6e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8006b72:	d056      	beq.n	8006c22 <chSchGoSleepTimeoutS+0xc2>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, wakeup, currp);
 8006b74:	4f59      	ldr	r7, [pc, #356]	; (8006cdc <chSchGoSleepTimeoutS+0x17c>)
 8006b76:	69bc      	ldr	r4, [r7, #24]
                vtfunc_t vtfunc, void *par) {
  virtual_timers_list_t *vtlp = &ch.vtlist;
  delta_list_t *dlp;
  sysinterval_t delta;

  chDbgCheckClassI();
 8006b78:	f000 fdba 	bl	80076f0 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8006b7c:	f1b9 0f00 	cmp.w	r9, #0
 8006b80:	d04c      	beq.n	8006c1c <chSchGoSleepTimeoutS+0xbc>
 *
 * @notapi
 */
static inline bool is_vtlist_empty(delta_list_t *dlhp) {

  return (bool)(dlhp == dlhp->next);
 8006b82:	46b8      	mov	r8, r7
    sysinterval_t deltanow;

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8006b84:	f1b9 0f01 	cmp.w	r9, #1
 *
 * @notapi
 */
static inline bool is_vtlist_empty(delta_list_t *dlhp) {

  return (bool)(dlhp == dlhp->next);
 8006b88:	f858 3f1c 	ldr.w	r3, [r8, #28]!

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 8006b8c:	4854      	ldr	r0, [pc, #336]	; (8006ce0 <chSchGoSleepTimeoutS+0x180>)
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 8006b8e:	9405      	str	r4, [sp, #20]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8006b90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    sysinterval_t deltanow;

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8006b94:	bf08      	it	eq
 8006b96:	f04f 0902 	moveq.w	r9, #2
    }

    /* Special case where the timers list is empty.*/
    if (is_vtlist_empty(&vtlp->dlist)) {
 8006b9a:	4543      	cmp	r3, r8
 8006b9c:	6a51      	ldr	r1, [r2, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 8006b9e:	9004      	str	r0, [sp, #16]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (is_vtlist_empty(&vtlp->dlist)) {
 8006ba0:	d07f      	beq.n	8006ca2 <chSchGoSleepTimeoutS+0x142>
      return;
    }

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'deltanow'.*/
    deltanow = chTimeDiffX(vtlp->lasttime, now);
 8006ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8006ba4:	1a0d      	subs	r5, r1, r0
    delta    = deltanow + delay;

    /* Scenario where a very large delay exceeded the numeric range, it
       requires a special handling, the compression procedure.*/
    if (delta < deltanow) {
 8006ba6:	eb19 0405 	adds.w	r4, r9, r5
 8006baa:	d243      	bcs.n	8006c34 <chSchGoSleepTimeoutS+0xd4>
      vt_list_compress(vtlp, deltanow);
      delta -= deltanow;
    }
    else if (delta < vtlp->dlist.next->delta) {
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	4294      	cmp	r4, r2
 8006bb0:	d355      	bcc.n	8006c5e <chSchGoSleepTimeoutS+0xfe>
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  dlp = vtlp->dlist.next;
  while (dlp->delta < delta) {
 8006bb2:	4294      	cmp	r4, r2
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(dlp != &vtp->dlist, "timer already armed");
 8006bb4:	ad01      	add	r5, sp, #4
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  dlp = vtlp->dlist.next;
  while (dlp->delta < delta) {
 8006bb6:	d906      	bls.n	8006bc6 <chSchGoSleepTimeoutS+0x66>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(dlp != &vtp->dlist, "timer already armed");
 8006bb8:	42ab      	cmp	r3, r5
 8006bba:	d02f      	beq.n	8006c1c <chSchGoSleepTimeoutS+0xbc>

    delta -= dlp->delta;
    dlp = dlp->next;
 8006bbc:	681b      	ldr	r3, [r3, #0]
  dlp = vtlp->dlist.next;
  while (dlp->delta < delta) {
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(dlp != &vtp->dlist, "timer already armed");

    delta -= dlp->delta;
 8006bbe:	1aa4      	subs	r4, r4, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  dlp = vtlp->dlist.next;
  while (dlp->delta < delta) {
 8006bc0:	689a      	ldr	r2, [r3, #8]
 8006bc2:	4294      	cmp	r4, r2
 8006bc4:	d8f8      	bhi.n	8006bb8 <chSchGoSleepTimeoutS+0x58>
    dlp = dlp->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->dlist.next       = dlp;
  vtp->dlist.prev       = vtp->dlist.next->prev;
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	9202      	str	r2, [sp, #8]
    delta -= dlp->delta;
    dlp = dlp->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->dlist.next       = dlp;
 8006bca:	9301      	str	r3, [sp, #4]
  vtp->dlist.prev       = vtp->dlist.next->prev;
  vtp->dlist.prev->next = &vtp->dlist;
 8006bcc:	6015      	str	r5, [r2, #0]
  dlp->prev             = &vtp->dlist;
 8006bce:	605d      	str	r5, [r3, #4]
  vtp->dlist.delta      = delta;
 8006bd0:	9403      	str	r4, [sp, #12]

  /* Calculate new delta for the following entry.*/
  dlp->delta -= delta;
 8006bd2:	689a      	ldr	r2, [r3, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  vtlp->dlist.delta = (sysinterval_t)-1;
 8006bd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  vtp->dlist.prev->next = &vtp->dlist;
  dlp->prev             = &vtp->dlist;
  vtp->dlist.delta      = delta;

  /* Calculate new delta for the following entry.*/
  dlp->delta -= delta;
 8006bd8:	1b14      	subs	r4, r2, r4
 8006bda:	609c      	str	r4, [r3, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  vtlp->dlist.delta = (sysinterval_t)-1;
 8006bdc:	6279      	str	r1, [r7, #36]	; 0x24
    chSchGoSleepS(newstate);
 8006bde:	4630      	mov	r0, r6
 8006be0:	f7ff ff96 	bl	8006b10 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8006be4:	f000 fd84 	bl	80076f0 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 8006be8:	9b04      	ldr	r3, [sp, #16]
 8006bea:	b1f3      	cbz	r3, 8006c2a <chSchGoSleepTimeoutS+0xca>
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
  virtual_timers_list_t *vtlp = &ch.vtlist;

  chDbgCheckClassI();
 8006bec:	f000 fd80 	bl	80076f0 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!is_first_timer(&vtlp->dlist, &vtp->dlist)) {
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	483a      	ldr	r0, [pc, #232]	; (8006cdc <chSchGoSleepTimeoutS+0x17c>)
 8006bf4:	42ab      	cmp	r3, r5
 8006bf6:	d038      	beq.n	8006c6a <chSchGoSleepTimeoutS+0x10a>
    /* Removing the element from the delta list.*/
    vtp->dlist.prev->next = vtp->dlist.next;
 8006bf8:	9a02      	ldr	r2, [sp, #8]
 8006bfa:	9b01      	ldr	r3, [sp, #4]
 8006bfc:	6013      	str	r3, [r2, #0]
    vtp->dlist.next->prev = vtp->dlist.prev;
 8006bfe:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;
 8006c00:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (is_timer(&vtlp->dlist, vtp->dlist.next))
 8006c02:	4543      	cmp	r3, r8
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!is_first_timer(&vtlp->dlist, &vtp->dlist)) {
    /* Removing the element from the delta list.*/
    vtp->dlist.prev->next = vtp->dlist.next;
    vtp->dlist.next->prev = vtp->dlist.prev;
 8006c04:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8006c06:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (is_timer(&vtlp->dlist, vtp->dlist.next))
 8006c08:	d00f      	beq.n	8006c2a <chSchGoSleepTimeoutS+0xca>
      vtp->dlist.next->delta += vtp->dlist.delta;
 8006c0a:	6899      	ldr	r1, [r3, #8]
 8006c0c:	9a03      	ldr	r2, [sp, #12]
 8006c0e:	440a      	add	r2, r1
 8006c10:	609a      	str	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->u.rdymsg;
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8006c16:	b007      	add	sp, #28
 8006c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  virtual_timers_list_t *vtlp = &ch.vtlist;
  delta_list_t *dlp;
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8006c1c:	4831      	ldr	r0, [pc, #196]	; (8006ce4 <chSchGoSleepTimeoutS+0x184>)
 8006c1e:	f000 fd37 	bl	8007690 <chSysHalt>
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8006c22:	4630      	mov	r0, r6
 8006c24:	f7ff ff74 	bl	8006b10 <chSchGoSleepS>
 8006c28:	4f2c      	ldr	r7, [pc, #176]	; (8006cdc <chSchGoSleepTimeoutS+0x17c>)
  }

  return currp->u.rdymsg;
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8006c2e:	b007      	add	sp, #28
 8006c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                             sysinterval_t deltanow) {
  delta_list_t *dlp = vtlp->dlist.next;

  /* The loop is bounded because the delta list header has the delta field
     set to (sysinterval_t)-1 which is larger than all deltas.*/
  while (dlp->delta < deltanow) {
 8006c34:	6898      	ldr	r0, [r3, #8]
 8006c36:	4285      	cmp	r5, r0
 8006c38:	d945      	bls.n	8006cc6 <chSchGoSleepTimeoutS+0x166>
 8006c3a:	461a      	mov	r2, r3
    deltanow  -= dlp->delta;
    dlp->delta = (sysinterval_t)0;
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	6091      	str	r1, [r2, #8]
    dlp        = dlp->next;
 8006c40:	6812      	ldr	r2, [r2, #0]
  delta_list_t *dlp = vtlp->dlist.next;

  /* The loop is bounded because the delta list header has the delta field
     set to (sysinterval_t)-1 which is larger than all deltas.*/
  while (dlp->delta < deltanow) {
    deltanow  -= dlp->delta;
 8006c42:	1a2d      	subs	r5, r5, r0
                             sysinterval_t deltanow) {
  delta_list_t *dlp = vtlp->dlist.next;

  /* The loop is bounded because the delta list header has the delta field
     set to (sysinterval_t)-1 which is larger than all deltas.*/
  while (dlp->delta < deltanow) {
 8006c44:	6890      	ldr	r0, [r2, #8]
 8006c46:	42a8      	cmp	r0, r5
 8006c48:	d3f9      	bcc.n	8006c3e <chSchGoSleepTimeoutS+0xde>
    deltanow  -= dlp->delta;
    dlp->delta = (sysinterval_t)0;
    dlp        = dlp->next;
  }

  vtlp->lasttime = vtlp->lasttime + deltanow;
 8006c4a:	6abc      	ldr	r4, [r7, #40]	; 0x28

  /* Adjusting next timer in the list, if any.*/
  if (is_timer(&vtlp->dlist, dlp)) {
 8006c4c:	4542      	cmp	r2, r8
    deltanow  -= dlp->delta;
    dlp->delta = (sysinterval_t)0;
    dlp        = dlp->next;
  }

  vtlp->lasttime = vtlp->lasttime + deltanow;
 8006c4e:	442c      	add	r4, r5
 8006c50:	62bc      	str	r4, [r7, #40]	; 0x28

  /* Adjusting next timer in the list, if any.*/
  if (is_timer(&vtlp->dlist, dlp)) {
 8006c52:	d001      	beq.n	8006c58 <chSchGoSleepTimeoutS+0xf8>
    dlp->delta -= deltanow;
 8006c54:	1b45      	subs	r5, r0, r5
 8006c56:	6095      	str	r5, [r2, #8]

    /* Scenario where a very large delay exceeded the numeric range, it
       requires a special handling, the compression procedure.*/
    if (delta < deltanow) {
      vt_list_compress(vtlp, deltanow);
      delta -= deltanow;
 8006c58:	464c      	mov	r4, r9
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	e7a9      	b.n	8006bb2 <chSchGoSleepTimeoutS+0x52>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8006c5e:	4420      	add	r0, r4
 8006c60:	f7fb f936 	bl	8001ed0 <stSetAlarm>
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	e7a3      	b.n	8006bb2 <chSchGoSleepTimeoutS+0x52>

    return;
  }

  /* Removing the first timer from the list.*/
  vtlp->dlist.next = vtp->dlist.next;
 8006c6a:	9b01      	ldr	r3, [sp, #4]
 8006c6c:	61c3      	str	r3, [r0, #28]
  vtlp->dlist.next->prev = &vtlp->dlist;
  vtp->func = NULL;
 8006c6e:	2100      	movs	r1, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (is_vtlist_empty(&vtlp->dlist)) {
 8006c70:	4543      	cmp	r3, r8
    return;
  }

  /* Removing the first timer from the list.*/
  vtlp->dlist.next = vtp->dlist.next;
  vtlp->dlist.next->prev = &vtlp->dlist;
 8006c72:	f8c3 8004 	str.w	r8, [r3, #4]
 *
 * @notapi
 */
static inline bool is_vtlist_empty(delta_list_t *dlhp) {

  return (bool)(dlhp == dlhp->next);
 8006c76:	461a      	mov	r2, r3
  }

  /* Removing the first timer from the list.*/
  vtlp->dlist.next = vtp->dlist.next;
  vtlp->dlist.next->prev = &vtlp->dlist;
  vtp->func = NULL;
 8006c78:	9104      	str	r1, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (is_vtlist_empty(&vtlp->dlist)) {
 8006c7a:	d02a      	beq.n	8006cd2 <chSchGoSleepTimeoutS+0x172>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  vtlp->dlist.next->delta += vtp->dlist.delta;
 8006c7c:	9c03      	ldr	r4, [sp, #12]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006c84:	4423      	add	r3, r4
 8006c86:	6093      	str	r3, [r2, #8]
/*  if (vtlp->dlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 8006c88:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006c8a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8006c8c:	1a12      	subs	r2, r2, r0

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= vtlp->dlist.next->delta) {
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d9cb      	bls.n	8006c2a <chSchGoSleepTimeoutS+0xca>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = vtlp->dlist.next->delta - nowdelta;
 8006c92:	1a99      	subs	r1, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8006c94:	2901      	cmp	r1, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8006c96:	bf98      	it	ls
 8006c98:	1c93      	addls	r3, r2, #2
 8006c9a:	4418      	add	r0, r3
 8006c9c:	f7fb f918 	bl	8001ed0 <stSetAlarm>
 8006ca0:	e7c3      	b.n	8006c2a <chSchGoSleepTimeoutS+0xca>
    /* Special case where the timers list is empty.*/
    if (is_vtlist_empty(&vtlp->dlist)) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      vtlp->lasttime = now;
 8006ca2:	62b9      	str	r1, [r7, #40]	; 0x28
      vtlp->dlist.next = &vtp->dlist;
      vtlp->dlist.prev = &vtp->dlist;
      vtp->dlist.next = &vtlp->dlist;
      vtp->dlist.prev = &vtlp->dlist;
      vtp->dlist.delta = delay;
 8006ca4:	f8cd 900c 	str.w	r9, [sp, #12]
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8006ca8:	68d0      	ldr	r0, [r2, #12]
      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      vtlp->lasttime = now;
      vtlp->dlist.next = &vtp->dlist;
      vtlp->dlist.prev = &vtp->dlist;
      vtp->dlist.next = &vtlp->dlist;
 8006caa:	9301      	str	r3, [sp, #4]
    if (is_vtlist_empty(&vtlp->dlist)) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      vtlp->lasttime = now;
      vtlp->dlist.next = &vtp->dlist;
 8006cac:	ad01      	add	r5, sp, #4
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8006cae:	f010 0002 	ands.w	r0, r0, #2
      vtlp->dlist.prev = &vtp->dlist;
      vtp->dlist.next = &vtlp->dlist;
      vtp->dlist.prev = &vtlp->dlist;
 8006cb2:	9302      	str	r3, [sp, #8]
    if (is_vtlist_empty(&vtlp->dlist)) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      vtlp->lasttime = now;
      vtlp->dlist.next = &vtp->dlist;
 8006cb4:	61fd      	str	r5, [r7, #28]
      vtlp->dlist.prev = &vtp->dlist;
 8006cb6:	623d      	str	r5, [r7, #32]
 8006cb8:	d108      	bne.n	8006ccc <chSchGoSleepTimeoutS+0x16c>

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
#endif

  return systime + (systime_t)interval;
 8006cba:	4449      	add	r1, r9
static inline void st_lld_start_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
  STM32_ST_TIM->SR     = 0;
#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8006cbc:	2302      	movs	r3, #2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8006cbe:	6351      	str	r1, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8006cc0:	6110      	str	r0, [r2, #16]
#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8006cc2:	60d3      	str	r3, [r2, #12]
 8006cc4:	e78b      	b.n	8006bde <chSchGoSleepTimeoutS+0x7e>
    deltanow  -= dlp->delta;
    dlp->delta = (sysinterval_t)0;
    dlp        = dlp->next;
  }

  vtlp->lasttime = vtlp->lasttime + deltanow;
 8006cc6:	62b9      	str	r1, [r7, #40]	; 0x28
 8006cc8:	461a      	mov	r2, r3
 8006cca:	e7c3      	b.n	8006c54 <chSchGoSleepTimeoutS+0xf4>
 8006ccc:	4806      	ldr	r0, [pc, #24]	; (8006ce8 <chSchGoSleepTimeoutS+0x188>)
 8006cce:	f000 fcdf 	bl	8007690 <chSysHalt>
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER = 0U;
 8006cd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006cd6:	60d9      	str	r1, [r3, #12]
 8006cd8:	e7a7      	b.n	8006c2a <chSchGoSleepTimeoutS+0xca>
 8006cda:	bf00      	nop
 8006cdc:	2000b288 	.word	0x2000b288
 8006ce0:	080077d1 	.word	0x080077d1
 8006ce4:	0800cfa0 	.word	0x0800cfa0
 8006ce8:	0800d04c 	.word	0x0800d04c
 8006cec:	00000000 	.word	0x00000000

08006cf0 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006cf0:	2320      	movs	r3, #32
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8006cf6:	4b10      	ldr	r3, [pc, #64]	; (8006d38 <_port_irq_epilogue+0x48>)
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8006cfe:	d102      	bne.n	8006d06 <_port_irq_epilogue+0x16>
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	4770      	bx	lr
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
#else
  uint32_t result;

  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8006d06:	eef1 3a10 	vmrs	r3, fpscr
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8006d0a:	f3ef 8309 	mrs	r3, PSP
    s_psp = __get_PSP();
#endif

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    s_psp -= sizeof (struct port_extctx);
 8006d0e:	3b68      	subs	r3, #104	; 0x68

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)s_psp;

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 8006d10:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ectxp->fpscr = FPU->FPDSCR;
 8006d14:	4a09      	ldr	r2, [pc, #36]	; (8006d3c <_port_irq_epilogue+0x4c>)

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)s_psp;

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 8006d16:	61d9      	str	r1, [r3, #28]
#if CORTEX_USE_FPU == TRUE
    ectxp->fpscr = FPU->FPDSCR;
 8006d18:	68d2      	ldr	r2, [r2, #12]
 8006d1a:	661a      	str	r2, [r3, #96]	; 0x60
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8006d1c:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8006d20:	4a07      	ldr	r2, [pc, #28]	; (8006d40 <_port_irq_epilogue+0x50>)
 8006d22:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 8006d24:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified S-PSP value.*/
    __set_PSP(s_psp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8006d26:	6889      	ldr	r1, [r1, #8]
 8006d28:	6892      	ldr	r2, [r2, #8]
 8006d2a:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8006d2c:	bf8c      	ite	hi
 8006d2e:	4a05      	ldrhi	r2, [pc, #20]	; (8006d44 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8006d30:	4a05      	ldrls	r2, [pc, #20]	; (8006d48 <_port_irq_epilogue+0x58>)
 8006d32:	619a      	str	r2, [r3, #24]
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	e000ed00 	.word	0xe000ed00
 8006d3c:	e000ef30 	.word	0xe000ef30
 8006d40:	2000b288 	.word	0x2000b288
 8006d44:	08000337 	.word	0x08000337
 8006d48:	08000342 	.word	0x08000342
 8006d4c:	00000000 	.word	0x00000000

08006d50 <SVC_Handler>:
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8006d50:	f3ef 8309 	mrs	r3, PSP
       positioning the stack to point to the real one.*/
    psp += sizeof (struct port_extctx);

#if CORTEX_USE_FPU == TRUE
    /* Enforcing unstacking of the FP part of the context.*/
    FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8006d54:	4905      	ldr	r1, [pc, #20]	; (8006d6c <SVC_Handler+0x1c>)
 8006d56:	684a      	ldr	r2, [r1, #4]
 8006d58:	f022 0201 	bic.w	r2, r2, #1
    /* From privileged mode, it is used for context discarding in the
       preemption code.*/

    /* Unstacking procedure, discarding the current exception context and
       positioning the stack to point to the real one.*/
    psp += sizeof (struct port_extctx);
 8006d5c:	3368      	adds	r3, #104	; 0x68

#if CORTEX_USE_FPU == TRUE
    /* Enforcing unstacking of the FP part of the context.*/
    FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8006d5e:	604a      	str	r2, [r1, #4]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8006d60:	f383 8809 	msr	PSP, r3
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006d64:	2300      	movs	r3, #0
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	4770      	bx	lr
 8006d6c:	e000ef30 	.word	0xe000ef30

08006d70 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8006d70:	4b0f      	ldr	r3, [pc, #60]	; (8006db0 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8006d72:	4910      	ldr	r1, [pc, #64]	; (8006db4 <chTMStopMeasurementX+0x44>)
 8006d74:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8006d76:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8006d78:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8006d7a:	f8d1 7884 	ldr.w	r7, [r1, #2180]	; 0x884
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8006d7e:	6841      	ldr	r1, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8006d80:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8006d82:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8006d8a:	18e4      	adds	r4, r4, r3
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 8006d8c:	6802      	ldr	r2, [r0, #0]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8006d8e:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8006d90:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8006d94:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8006d96:	f106 0601 	add.w	r6, r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8006d9a:	bf88      	it	hi
 8006d9c:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 8006d9e:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8006da0:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8006da2:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 8006da6:	bf38      	it	cc
 8006da8:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8006daa:	bcf0      	pop	{r4, r5, r6, r7}
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	e0001000 	.word	0xe0001000
 8006db4:	2000b288 	.word	0x2000b288
	...

08006dc0 <chTMStartMeasurementX>:
 8006dc0:	4b01      	ldr	r3, [pc, #4]	; (8006dc8 <chTMStartMeasurementX+0x8>)
 8006dc2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8006dc4:	6083      	str	r3, [r0, #8]
 8006dc6:	4770      	bx	lr
 8006dc8:	e0001000 	.word	0xe0001000
 8006dcc:	00000000 	.word	0x00000000

08006dd0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8006dd0:	b169      	cbz	r1, 8006dee <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 8006dd2:	4b08      	ldr	r3, [pc, #32]	; (8006df4 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8006dd4:	b410      	push	{r4}
 8006dd6:	4602      	mov	r2, r0
 * @notapi
 */
static inline void ch_queue_insert(ch_queue_t *p, ch_queue_t *qp) {

  p->next       = qp;
  p->prev       = qp->prev;
 8006dd8:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 8006dda:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8006ddc:	2004      	movs	r0, #4
 8006dde:	e883 0014 	stmia.w	r3, {r2, r4}
  p->prev->next = p;
 8006de2:	6023      	str	r3, [r4, #0]
  qp->prev      = p;
 8006de4:	6053      	str	r3, [r2, #4]
}
 8006de6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  ch_queue_insert(&currp->hdr.queue, &tqp->queue);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8006dea:	f7ff beb9 	b.w	8006b60 <chSchGoSleepTimeoutS>
}
 8006dee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006df2:	4770      	bx	lr
 8006df4:	2000b288 	.word	0x2000b288
	...

08006e00 <chSchReadyAheadI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyAheadI(thread_t *tp) {
 8006e00:	b510      	push	{r4, lr}
 8006e02:	4604      	mov	r4, r0

  chDbgCheckClassI();
 8006e04:	f000 fc74 	bl	80076f0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8006e08:	b1a4      	cbz	r4, 8006e34 <chSchReadyAheadI+0x34>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 8006e0a:	f894 3020 	ldrb.w	r3, [r4, #32]
 8006e0e:	b18b      	cbz	r3, 8006e34 <chSchReadyAheadI+0x34>
 8006e10:	2b0f      	cmp	r3, #15
 8006e12:	d00f      	beq.n	8006e34 <chSchReadyAheadI+0x34>
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
 8006e14:	2200      	movs	r2, #0
 8006e16:	68a1      	ldr	r1, [r4, #8]

  /* Insertion in the priority queue.*/
  return (thread_t *)ch_pqueue_insert_ahead(&ch.rlist.pqueue,
 8006e18:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <chSchReadyAheadI+0x3c>)
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
 8006e1a:	f884 2020 	strb.w	r2, [r4, #32]
static inline ch_priority_queue_t *ch_pqueue_insert_ahead(ch_priority_queue_t *pqp,
                                                          ch_priority_queue_t *p) {

  /* Scanning priority queue.*/
  do {
    pqp = pqp->next;
 8006e1e:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio > p->prio);
 8006e20:	689a      	ldr	r2, [r3, #8]
 8006e22:	428a      	cmp	r2, r1
 8006e24:	d8fb      	bhi.n	8006e1e <chSchReadyAheadI+0x1e>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	6062      	str	r2, [r4, #4]
  do {
    pqp = pqp->next;
  } while (pqp->prio > p->prio);

  /* Insertion on prev.*/
  p->next       = pqp;
 8006e2a:	6023      	str	r3, [r4, #0]

  /* Insertion in the priority queue.*/
  return (thread_t *)ch_pqueue_insert_ahead(&ch.rlist.pqueue,
                                            &tp->hdr.pqueue);
}
 8006e2c:	4620      	mov	r0, r4
  p->prev       = pqp->prev;
  p->prev->next = p;
 8006e2e:	6014      	str	r4, [r2, #0]
  pqp->prev     = p;
 8006e30:	605c      	str	r4, [r3, #4]
 8006e32:	bd10      	pop	{r4, pc}
 * @iclass
 */
thread_t *chSchReadyAheadI(thread_t *tp) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
 8006e34:	4802      	ldr	r0, [pc, #8]	; (8006e40 <chSchReadyAheadI+0x40>)
 8006e36:	f000 fc2b 	bl	8007690 <chSysHalt>
 8006e3a:	bf00      	nop
 8006e3c:	2000b288 	.word	0x2000b288
 8006e40:	0800d00c 	.word	0x0800d00c
	...

08006e50 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8006e50:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8006e52:	4c10      	ldr	r4, [pc, #64]	; (8006e94 <chSchDoReschedule+0x44>)
 * @return              The removed element pointer.
 *
 * @notapi
 */
static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
  ch_priority_queue_t *p = pqp->next;
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	69a0      	ldr	r0, [r4, #24]

  pqp->next       = p->next;
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	6022      	str	r2, [r4, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
  currp->state = CH_STATE_CURRENT;
 8006e5c:	2101      	movs	r1, #1
  pqp->next->prev = pqp;
 8006e5e:	6054      	str	r4, [r2, #4]
 8006e60:	f883 1020 	strb.w	r1, [r3, #32]
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 8006e64:	61a3      	str	r3, [r4, #24]
    otp = chSchReadyAheadI(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
 8006e66:	f7ff ffcb 	bl	8006e00 <chSchReadyAheadI>
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8006e6a:	4601      	mov	r1, r0
    otp = chSchReadyAheadI(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
 8006e6c:	4605      	mov	r5, r0
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8006e6e:	69a0      	ldr	r0, [r4, #24]
 8006e70:	f000 fbde 	bl	8007630 <_trace_switch>
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8006e74:	f3ef 8309 	mrs	r3, PSP
 8006e78:	69ea      	ldr	r2, [r5, #28]
 8006e7a:	3b64      	subs	r3, #100	; 0x64
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d805      	bhi.n	8006e8c <chSchDoReschedule+0x3c>
 8006e80:	69a0      	ldr	r0, [r4, #24]
 8006e82:	4629      	mov	r1, r5
}
 8006e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8006e88:	f7f9 ba3e 	b.w	8000308 <_port_switch>
 8006e8c:	4802      	ldr	r0, [pc, #8]	; (8006e98 <chSchDoReschedule+0x48>)
 8006e8e:	f000 fbff 	bl	8007690 <chSysHalt>
 8006e92:	bf00      	nop
 8006e94:	2000b288 	.word	0x2000b288
 8006e98:	0800cfe4 	.word	0x0800cfe4
 8006e9c:	00000000 	.word	0x00000000

08006ea0 <chSchRescheduleS>:
 * @details If a thread with a higher priority than the current thread is in
 *          the ready list then make the higher priority thread running.
 *
 * @sclass
 */
void chSchRescheduleS(void) {
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.pqueue) > currp->hdr.pqueue.prio;
 8006ea2:	4c14      	ldr	r4, [pc, #80]	; (8006ef4 <chSchRescheduleS+0x54>)

  chDbgCheckClassS();
 8006ea4:	f000 fc14 	bl	80076d0 <chDbgCheckClassS>
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();
 8006ea8:	f000 fc22 	bl	80076f0 <chDbgCheckClassI>

  return firstprio(&ch.rlist.pqueue) > currp->hdr.pqueue.prio;
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	69a0      	ldr	r0, [r4, #24]

  if (chSchIsRescRequiredI()) {
 8006eb0:	6899      	ldr	r1, [r3, #8]
 8006eb2:	6882      	ldr	r2, [r0, #8]
 8006eb4:	4291      	cmp	r1, r2
 8006eb6:	d800      	bhi.n	8006eba <chSchRescheduleS+0x1a>
 8006eb8:	bd38      	pop	{r3, r4, r5, pc}
 * @notapi
 */
static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
  ch_priority_queue_t *p = pqp->next;

  pqp->next       = p->next;
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	6022      	str	r2, [r4, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
  currp->state = CH_STATE_CURRENT;
 8006ebe:	2101      	movs	r1, #1
  pqp->next->prev = pqp;
 8006ec0:	6054      	str	r4, [r2, #4]
 8006ec2:	f883 1020 	strb.w	r1, [r3, #32]
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 8006ec6:	61a3      	str	r3, [r4, #24]
  if (otp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);
 8006ec8:	f7ff ff9a 	bl	8006e00 <chSchReadyAheadI>

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8006ecc:	4601      	mov	r1, r0
  if (otp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);
 8006ece:	4605      	mov	r5, r0

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8006ed0:	69a0      	ldr	r0, [r4, #24]
 8006ed2:	f000 fbad 	bl	8007630 <_trace_switch>
 8006ed6:	f3ef 8309 	mrs	r3, PSP
 8006eda:	69ea      	ldr	r2, [r5, #28]
 8006edc:	3b64      	subs	r3, #100	; 0x64
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d805      	bhi.n	8006eee <chSchRescheduleS+0x4e>
 8006ee2:	69a0      	ldr	r0, [r4, #24]
 8006ee4:	4629      	mov	r1, r5
  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
    chSchDoRescheduleAhead();
  }
}
 8006ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8006eea:	f7f9 ba0d 	b.w	8000308 <_port_switch>
 8006eee:	4802      	ldr	r0, [pc, #8]	; (8006ef8 <chSchRescheduleS+0x58>)
 8006ef0:	f000 fbce 	bl	8007690 <chSysHalt>
 8006ef4:	2000b288 	.word	0x2000b288
 8006ef8:	0800cfe4 	.word	0x0800cfe4
 8006efc:	00000000 	.word	0x00000000

08006f00 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8006f00:	b510      	push	{r4, lr}
 8006f02:	4604      	mov	r4, r0

  chDbgCheckClassI();
 8006f04:	f000 fbf4 	bl	80076f0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8006f08:	b1a4      	cbz	r4, 8006f34 <chSchReadyI+0x34>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 8006f0a:	f894 3020 	ldrb.w	r3, [r4, #32]
 8006f0e:	b18b      	cbz	r3, 8006f34 <chSchReadyI+0x34>
 8006f10:	2b0f      	cmp	r3, #15
 8006f12:	d00f      	beq.n	8006f34 <chSchReadyI+0x34>
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
 8006f14:	2200      	movs	r2, #0
 8006f16:	68a1      	ldr	r1, [r4, #8]

  /* Insertion in the priority queue.*/
  return (thread_t *)ch_pqueue_insert_behind(&ch.rlist.pqueue,
 8006f18:	4b08      	ldr	r3, [pc, #32]	; (8006f3c <chSchReadyI+0x3c>)
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
 8006f1a:	f884 2020 	strb.w	r2, [r4, #32]
static inline ch_priority_queue_t *ch_pqueue_insert_behind(ch_priority_queue_t *pqp,
                                                           ch_priority_queue_t *p) {

  /* Scanning priority queue.*/
  do {
    pqp = pqp->next;
 8006f1e:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8006f20:	689a      	ldr	r2, [r3, #8]
 8006f22:	428a      	cmp	r2, r1
 8006f24:	d2fb      	bcs.n	8006f1e <chSchReadyI+0x1e>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	6062      	str	r2, [r4, #4]
  do {
    pqp = pqp->next;
  } while (pqp->prio >= p->prio);

  /* Insertion on prev.*/
  p->next       = pqp;
 8006f2a:	6023      	str	r3, [r4, #0]

  /* Insertion in the priority queue.*/
  return (thread_t *)ch_pqueue_insert_behind(&ch.rlist.pqueue,
                                             &tp->hdr.pqueue);
}
 8006f2c:	4620      	mov	r0, r4
  p->prev       = pqp->prev;
  p->prev->next = p;
 8006f2e:	6014      	str	r4, [r2, #0]
  pqp->prev     = p;
 8006f30:	605c      	str	r4, [r3, #4]
 8006f32:	bd10      	pop	{r4, pc}
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
 8006f34:	4802      	ldr	r0, [pc, #8]	; (8006f40 <chSchReadyI+0x40>)
 8006f36:	f000 fbab 	bl	8007690 <chSysHalt>
 8006f3a:	bf00      	nop
 8006f3c:	2000b288 	.word	0x2000b288
 8006f40:	0800cff4 	.word	0x0800cff4
	...

08006f50 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8006f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f54:	4606      	mov	r6, r0
 8006f56:	4688      	mov	r8, r1
  event_listener_t *elp;

  chDbgCheckClassI();
 8006f58:	f000 fbca 	bl	80076f0 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
 8006f5c:	2e00      	cmp	r6, #0
 8006f5e:	d03a      	beq.n	8006fd6 <chEvtBroadcastFlagsI+0x86>

  elp = esp->next;
 8006f60:	6834      	ldr	r4, [r6, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8006f62:	42a6      	cmp	r6, r4
 8006f64:	d02a      	beq.n	8006fbc <chEvtBroadcastFlagsI+0x6c>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8006f66:	2700      	movs	r7, #0
 8006f68:	e002      	b.n	8006f70 <chEvtBroadcastFlagsI+0x20>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 8006f6a:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8006f6c:	42a6      	cmp	r6, r4
 8006f6e:	d025      	beq.n	8006fbc <chEvtBroadcastFlagsI+0x6c>
  /*lint -restore*/
    elp->flags |= flags;
 8006f70:	68e3      	ldr	r3, [r4, #12]
 8006f72:	ea43 0308 	orr.w	r3, r3, r8
 8006f76:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8006f78:	f1b8 0f00 	cmp.w	r8, #0
 8006f7c:	d003      	beq.n	8006f86 <chEvtBroadcastFlagsI+0x36>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8006f7e:	6923      	ldr	r3, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8006f80:	ea18 0f03 	tst.w	r8, r3
 8006f84:	d0f1      	beq.n	8006f6a <chEvtBroadcastFlagsI+0x1a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
 8006f86:	6865      	ldr	r5, [r4, #4]
 8006f88:	f8d4 9008 	ldr.w	r9, [r4, #8]
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
 8006f8c:	f000 fbb0 	bl	80076f0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8006f90:	b1f5      	cbz	r5, 8006fd0 <chEvtBroadcastFlagsI+0x80>

  tp->epending |= events;
 8006f92:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8006f94:	f895 2020 	ldrb.w	r2, [r5, #32]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8006f98:	ea49 0303 	orr.w	r3, r9, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8006f9c:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8006f9e:	636b      	str	r3, [r5, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8006fa0:	d00e      	beq.n	8006fc0 <chEvtBroadcastFlagsI+0x70>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8006fa2:	2a0b      	cmp	r2, #11
 8006fa4:	d1e1      	bne.n	8006f6a <chEvtBroadcastFlagsI+0x1a>
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8006fa6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8006fa8:	4013      	ands	r3, r2

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d1dd      	bne.n	8006f6a <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8006fae:	626f      	str	r7, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	f7ff ffa5 	bl	8006f00 <chSchReadyI>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 8006fb6:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8006fb8:	42a6      	cmp	r6, r4
 8006fba:	d1d9      	bne.n	8006f70 <chEvtBroadcastFlagsI+0x20>
 8006fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8006fc0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8006fc2:	4213      	tst	r3, r2
 8006fc4:	d0d1      	beq.n	8006f6a <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8006fc6:	626f      	str	r7, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 8006fc8:	4628      	mov	r0, r5
 8006fca:	f7ff ff99 	bl	8006f00 <chSchReadyI>
 8006fce:	e7f2      	b.n	8006fb6 <chEvtBroadcastFlagsI+0x66>
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
 8006fd0:	4802      	ldr	r0, [pc, #8]	; (8006fdc <chEvtBroadcastFlagsI+0x8c>)
 8006fd2:	f000 fb5d 	bl	8007690 <chSysHalt>
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);
 8006fd6:	4802      	ldr	r0, [pc, #8]	; (8006fe0 <chEvtBroadcastFlagsI+0x90>)
 8006fd8:	f000 fb5a 	bl	8007690 <chSysHalt>
 8006fdc:	0800cfac 	.word	0x0800cfac
 8006fe0:	0800cfcc 	.word	0x0800cfcc
	...

08006ff0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8006ff0:	b508      	push	{r3, lr}
 8006ff2:	4605      	mov	r5, r0
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006ff4:	2320      	movs	r3, #32
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8006ffa:	f000 fc31 	bl	8007860 <_dbg_check_lock>
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 8006ffe:	4b10      	ldr	r3, [pc, #64]	; (8007040 <chThdExit+0x50>)
 8007000:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool ch_list_notempty(ch_list_t *lp) {

  return (bool)(lp->next != lp);
 8007002:	6aa0      	ldr	r0, [r4, #40]	; 0x28

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 8007004:	6265      	str	r5, [r4, #36]	; 0x24
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (ch_list_notempty(&tp->waiting)) {
 8007006:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800700a:	42a8      	cmp	r0, r5
 800700c:	d006      	beq.n	800701c <chThdExit+0x2c>
 * @notapi
 */
static inline ch_list_t *ch_list_pop(ch_list_t *lp) {

  ch_list_t *p = lp->next;
  lp->next = p->next;
 800700e:	6803      	ldr	r3, [r0, #0]
 8007010:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI((thread_t *)ch_list_pop(&tp->waiting));
 8007012:	f7ff ff75 	bl	8006f00 <chSchReadyI>
 *
 * @notapi
 */
static inline bool ch_list_notempty(ch_list_t *lp) {

  return (bool)(lp->next != lp);
 8007016:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (ch_list_notempty(&tp->waiting)) {
 8007018:	42a8      	cmp	r0, r5
 800701a:	d1f8      	bne.n	800700e <chThdExit+0x1e>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 800701c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8007020:	b943      	cbnz	r3, 8007034 <chThdExit+0x44>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 8007022:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8007026:	079b      	lsls	r3, r3, #30
 8007028:	d104      	bne.n	8007034 <chThdExit+0x44>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
 800702a:	6963      	ldr	r3, [r4, #20]
 800702c:	6922      	ldr	r2, [r4, #16]
 800702e:	611a      	str	r2, [r3, #16]
 8007030:	6922      	ldr	r2, [r4, #16]
 8007032:	6153      	str	r3, [r2, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8007034:	200f      	movs	r0, #15
 8007036:	f7ff fd6b 	bl	8006b10 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
 800703a:	4802      	ldr	r0, [pc, #8]	; (8007044 <chThdExit+0x54>)
 800703c:	f000 fb28 	bl	8007690 <chSysHalt>
 8007040:	2000b288 	.word	0x2000b288
 8007044:	0800d000 	.word	0x0800d000
	...

08007050 <chPoolFree>:
 * @param[in] mp        pointer to a @p memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @api
 */
void chPoolFree(memory_pool_t *mp, void *objp) {
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4604      	mov	r4, r0
 8007054:	460d      	mov	r5, r1
 8007056:	2320      	movs	r3, #32
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f000 fc00 	bl	8007860 <_dbg_check_lock>
 * @iclass
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
  struct pool_header *php = objp;

  chDbgCheckClassI();
 8007060:	f000 fb46 	bl	80076f0 <chDbgCheckClassI>
  chDbgCheck((mp != NULL) &&
 8007064:	b124      	cbz	r4, 8007070 <chPoolFree+0x20>
 8007066:	b11d      	cbz	r5, 8007070 <chPoolFree+0x20>
 8007068:	68a3      	ldr	r3, [r4, #8]
 800706a:	3b01      	subs	r3, #1
 800706c:	421d      	tst	r5, r3
 800706e:	d002      	beq.n	8007076 <chPoolFree+0x26>
 8007070:	480b      	ldr	r0, [pc, #44]	; (80070a0 <chPoolFree+0x50>)
 8007072:	f000 fb0d 	bl	8007690 <chSysHalt>
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	602b      	str	r3, [r5, #0]
  mp->next = php;
 800707a:	6025      	str	r5, [r4, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800707c:	f000 fbe0 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8007080:	4b08      	ldr	r3, [pc, #32]	; (80070a4 <chPoolFree+0x54>)
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d004      	beq.n	8007092 <chPoolFree+0x42>
 8007088:	6999      	ldr	r1, [r3, #24]
 800708a:	6893      	ldr	r3, [r2, #8]
 800708c:	688a      	ldr	r2, [r1, #8]
 800708e:	429a      	cmp	r2, r3
 8007090:	d303      	bcc.n	800709a <chPoolFree+0x4a>
 8007092:	2300      	movs	r3, #0
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	bd38      	pop	{r3, r4, r5, pc}
 800709a:	4803      	ldr	r0, [pc, #12]	; (80070a8 <chPoolFree+0x58>)
 800709c:	f000 faf8 	bl	8007690 <chSysHalt>
 80070a0:	0800cf64 	.word	0x0800cf64
 80070a4:	2000b288 	.word	0x2000b288
 80070a8:	0800d05c 	.word	0x0800d05c
 80070ac:	00000000 	.word	0x00000000

080070b0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	2320      	movs	r3, #32
 80070b4:	4606      	mov	r6, r0
 80070b6:	460d      	mov	r5, r1
 80070b8:	4614      	mov	r4, r2
 80070ba:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 80070be:	f000 fbcf 	bl	8007860 <_dbg_check_lock>
  void *p;

  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
 80070c2:	4622      	mov	r2, r4
 80070c4:	4629      	mov	r1, r5
 80070c6:	4630      	mov	r0, r6
 80070c8:	f7ff fcf2 	bl	8006ab0 <chCoreAllocFromTopI>
 80070cc:	4604      	mov	r4, r0
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80070ce:	f000 fbb7 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80070d2:	4b08      	ldr	r3, [pc, #32]	; (80070f4 <chCoreAllocFromTop+0x44>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d004      	beq.n	80070e4 <chCoreAllocFromTop+0x34>
 80070da:	6999      	ldr	r1, [r3, #24]
 80070dc:	6893      	ldr	r3, [r2, #8]
 80070de:	688a      	ldr	r2, [r1, #8]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d304      	bcc.n	80070ee <chCoreAllocFromTop+0x3e>
 80070e4:	2300      	movs	r3, #0
 80070e6:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return p;
}
 80070ea:	4620      	mov	r0, r4
 80070ec:	bd70      	pop	{r4, r5, r6, pc}
 80070ee:	4802      	ldr	r0, [pc, #8]	; (80070f8 <chCoreAllocFromTop+0x48>)
 80070f0:	f000 face 	bl	8007690 <chSysHalt>
 80070f4:	2000b288 	.word	0x2000b288
 80070f8:	0800d138 	.word	0x0800d138
 80070fc:	00000000 	.word	0x00000000

08007100 <chRegFindThreadByWorkingArea>:
 * @return              A pointer to the found thread.
 * @retval NULL         if a matching thread has not been found.
 *
 * @api
 */
thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa) {
 8007100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007104:	2320      	movs	r3, #32
 8007106:	b085      	sub	sp, #20
 8007108:	4607      	mov	r7, r0
 800710a:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.newer;
 800710e:	4db2      	ldr	r5, [pc, #712]	; (80073d8 <chRegFindThreadByWorkingArea+0x2d8>)
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8007110:	f000 fba6 	bl	8007860 <_dbg_check_lock>
 8007114:	f8d5 9010 	ldr.w	r9, [r5, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 8007118:	f899 3022 	ldrb.w	r3, [r9, #34]	; 0x22
 800711c:	3301      	adds	r3, #1
 800711e:	f889 3022 	strb.w	r3, [r9, #34]	; 0x22
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8007122:	f000 fb8d 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8007126:	682b      	ldr	r3, [r5, #0]
 8007128:	42ab      	cmp	r3, r5
 800712a:	d004      	beq.n	8007136 <chRegFindThreadByWorkingArea+0x36>
 800712c:	69aa      	ldr	r2, [r5, #24]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	6892      	ldr	r2, [r2, #8]
 8007132:	429a      	cmp	r2, r3
 8007134:	d34a      	bcc.n	80071cc <chRegFindThreadByWorkingArea+0xcc>
 8007136:	f04f 0a00 	mov.w	sl, #0
 800713a:	f38a 8811 	msr	BASEPRI, sl
 800713e:	f8df 8298 	ldr.w	r8, [pc, #664]	; 80073d8 <chRegFindThreadByWorkingArea+0x2d8>
 8007142:	2620      	movs	r6, #32
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
 8007144:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007148:	42bb      	cmp	r3, r7
 800714a:	f000 80ca 	beq.w	80072e2 <chRegFindThreadByWorkingArea+0x1e2>
 800714e:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8007152:	f000 fb85 	bl	8007860 <_dbg_check_lock>
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->newer;
 8007156:	f8d9 4010 	ldr.w	r4, [r9, #16]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 800715a:	42ac      	cmp	r4, r5
 800715c:	f000 80c5 	beq.w	80072ea <chRegFindThreadByWorkingArea+0x1ea>
  /*lint -restore*/
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 8007160:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8007164:	2bff      	cmp	r3, #255	; 0xff
 8007166:	d04d      	beq.n	8007204 <chRegFindThreadByWorkingArea+0x104>
    ntp->refs++;
 8007168:	3301      	adds	r3, #1
 800716a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800716e:	f000 fb67 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8007172:	682b      	ldr	r3, [r5, #0]
 8007174:	42ab      	cmp	r3, r5
 8007176:	d005      	beq.n	8007184 <chRegFindThreadByWorkingArea+0x84>
 8007178:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	6892      	ldr	r2, [r2, #8]
 8007180:	429a      	cmp	r2, r3
 8007182:	d323      	bcc.n	80071cc <chRegFindThreadByWorkingArea+0xcc>
 8007184:	f38a 8811 	msr	BASEPRI, sl
 8007188:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800718c:	f000 fb68 	bl	8007860 <_dbg_check_lock>
 * @api
 */
void chThdRelease(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 8007190:	f899 3022 	ldrb.w	r3, [r9, #34]	; 0x22
 8007194:	b39b      	cbz	r3, 80071fe <chRegFindThreadByWorkingArea+0xfe>
  tp->refs--;
 8007196:	3b01      	subs	r3, #1
 8007198:	f889 3022 	strb.w	r3, [r9, #34]	; 0x22

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator.*/
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 800719c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80071a0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80071a4:	2b0f      	cmp	r3, #15
 80071a6:	d014      	beq.n	80071d2 <chRegFindThreadByWorkingArea+0xd2>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80071a8:	f000 fb4a 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80071ac:	682b      	ldr	r3, [r5, #0]
 80071ae:	42ab      	cmp	r3, r5
 80071b0:	d005      	beq.n	80071be <chRegFindThreadByWorkingArea+0xbe>
 80071b2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	6892      	ldr	r2, [r2, #8]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d31c      	bcc.n	80071f8 <chRegFindThreadByWorkingArea+0xf8>
 80071be:	f38a 8811 	msr	BASEPRI, sl
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
      return ctp;
    }
    ctp = chRegNextThread(ctp);
  } while (ctp != NULL);
 80071c2:	2c00      	cmp	r4, #0
 80071c4:	f000 8096 	beq.w	80072f4 <chRegFindThreadByWorkingArea+0x1f4>
 80071c8:	46a1      	mov	r9, r4
 80071ca:	e7bb      	b.n	8007144 <chRegFindThreadByWorkingArea+0x44>
 80071cc:	4883      	ldr	r0, [pc, #524]	; (80073dc <chRegFindThreadByWorkingArea+0x2dc>)
 80071ce:	f000 fa5f 	bl	8007690 <chSysHalt>
    REG_REMOVE(tp);
 80071d2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80071d6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80071da:	611a      	str	r2, [r3, #16]
 80071dc:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80071e0:	6153      	str	r3, [r2, #20]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80071e2:	f000 fb2d 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80071e6:	682b      	ldr	r3, [r5, #0]
 80071e8:	42ab      	cmp	r3, r5
 80071ea:	d00e      	beq.n	800720a <chRegFindThreadByWorkingArea+0x10a>
 80071ec:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	6892      	ldr	r2, [r2, #8]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d208      	bcs.n	800720a <chRegFindThreadByWorkingArea+0x10a>
 80071f8:	4879      	ldr	r0, [pc, #484]	; (80073e0 <chRegFindThreadByWorkingArea+0x2e0>)
 80071fa:	f000 fa49 	bl	8007690 <chSysHalt>
 * @api
 */
void chThdRelease(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 80071fe:	4879      	ldr	r0, [pc, #484]	; (80073e4 <chRegFindThreadByWorkingArea+0x2e4>)
 8007200:	f000 fa46 	bl	8007690 <chSysHalt>
  /*lint -restore*/
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 8007204:	4878      	ldr	r0, [pc, #480]	; (80073e8 <chRegFindThreadByWorkingArea+0x2e8>)
 8007206:	f000 fa43 	bl	8007690 <chSysHalt>
 800720a:	f38a 8811 	msr	BASEPRI, sl
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
    REG_REMOVE(tp);
    chSysUnlock();

#if CH_CFG_USE_DYNAMIC == TRUE
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 800720e:	f899 3021 	ldrb.w	r3, [r9, #33]	; 0x21
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	2b01      	cmp	r3, #1
 8007218:	d008      	beq.n	800722c <chRegFindThreadByWorkingArea+0x12c>
 800721a:	2b02      	cmp	r3, #2
 800721c:	d1d1      	bne.n	80071c2 <chRegFindThreadByWorkingArea+0xc2>
      chHeapFree(chThdGetWorkingAreaX(tp));
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 800721e:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 8007222:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8007226:	f7ff ff13 	bl	8007050 <chPoolFree>
 800722a:	e7ca      	b.n	80071c2 <chRegFindThreadByWorkingArea+0xc2>
 800722c:	f8d9 101c 	ldr.w	r1, [r9, #28]
 */
void chHeapFree(void *p) {
  heap_header_t *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 8007230:	2900      	cmp	r1, #0
 8007232:	d05c      	beq.n	80072ee <chRegFindThreadByWorkingArea+0x1ee>
 8007234:	074b      	lsls	r3, r1, #29
 8007236:	d15a      	bne.n	80072ee <chRegFindThreadByWorkingArea+0x1ee>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 8007238:	e911 000c 	ldmdb	r1, {r2, r3}
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 800723c:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 800723e:	08db      	lsrs	r3, r3, #3
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 8007240:	9201      	str	r2, [sp, #4]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8007242:	f841 3c04 	str.w	r3, [r1, #-4]
 8007246:	9102      	str	r1, [sp, #8]
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8007248:	f102 0b0c 	add.w	fp, r2, #12
 800724c:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8007250:	f000 fb06 	bl	8007860 <_dbg_check_lock>
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *currtp = chThdGetSelfX();

  chDbgCheckClassS();
 8007254:	f000 fa3c 	bl	80076d0 <chDbgCheckClassS>
 *
 * @xclass
 */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8007258:	f8d5 9018 	ldr.w	r9, [r5, #24]
  chDbgCheck(mp != NULL);
 800725c:	9902      	ldr	r1, [sp, #8]
 800725e:	f1bb 0f00 	cmp.w	fp, #0
 8007262:	d02d      	beq.n	80072c0 <chRegFindThreadByWorkingArea+0x1c0>

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8007264:	9b01      	ldr	r3, [sp, #4]
 8007266:	6958      	ldr	r0, [r3, #20]
 8007268:	2800      	cmp	r0, #0
 800726a:	f000 80ac 	beq.w	80073c6 <chRegFindThreadByWorkingArea+0x2c6>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 800726e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8007272:	6883      	ldr	r3, [r0, #8]
 8007274:	4293      	cmp	r3, r2
 8007276:	d207      	bcs.n	8007288 <chRegFindThreadByWorkingArea+0x188>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8007278:	f890 3020 	ldrb.w	r3, [r0, #32]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;
 800727c:	6082      	str	r2, [r0, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 800727e:	2b06      	cmp	r3, #6
 8007280:	d052      	beq.n	8007328 <chRegFindThreadByWorkingArea+0x228>
 8007282:	2b07      	cmp	r3, #7
 8007284:	d038      	beq.n	80072f8 <chRegFindThreadByWorkingArea+0x1f8>
 8007286:	b1f3      	cbz	r3, 80072c6 <chRegFindThreadByWorkingArea+0x1c6>
        }
        break;
      }

      /* Sleep on the mutex.*/
      ch_sch_prio_insert(&currtp->hdr.queue, &mp->queue);
 8007288:	465a      	mov	r2, fp
 800728a:	e004      	b.n	8007296 <chRegFindThreadByWorkingArea+0x196>
static inline void ch_sch_prio_insert(ch_queue_t *tp, ch_queue_t *qp) {

  ch_queue_t *cp = qp;
  do {
    cp = cp->next;
  } while ((cp != qp) &&
 800728c:	6890      	ldr	r0, [r2, #8]
 800728e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007292:	4298      	cmp	r0, r3
 8007294:	d302      	bcc.n	800729c <chRegFindThreadByWorkingArea+0x19c>
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *tp, ch_queue_t *qp) {

  ch_queue_t *cp = qp;
  do {
    cp = cp->next;
 8007296:	6812      	ldr	r2, [r2, #0]
  } while ((cp != qp) &&
           (((thread_t *)cp)->hdr.pqueue.prio >= ((thread_t *)tp)->hdr.pqueue.prio));
 8007298:	4593      	cmp	fp, r2
 800729a:	d1f7      	bne.n	800728c <chRegFindThreadByWorkingArea+0x18c>
  tp->next       = cp;
  tp->prev       = cp->prev;
 800729c:	6853      	ldr	r3, [r2, #4]
 800729e:	9102      	str	r1, [sp, #8]
 80072a0:	e889 000c 	stmia.w	r9, {r2, r3}
      currtp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80072a4:	2006      	movs	r0, #6
  tp->prev->next = tp;
 80072a6:	f8c3 9000 	str.w	r9, [r3]
  cp->prev       = tp;
 80072aa:	f8c2 9004 	str.w	r9, [r2, #4]
        break;
      }

      /* Sleep on the mutex.*/
      ch_sch_prio_insert(&currtp->hdr.queue, &mp->queue);
      currtp->u.wtmtxp = mp;
 80072ae:	f8c9 b024 	str.w	fp, [r9, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 80072b2:	f7ff fc2d 	bl	8006b10 <chSchGoSleepS>

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->owner == currtp, "not owner");
 80072b6:	9b01      	ldr	r3, [sp, #4]
 80072b8:	9902      	ldr	r1, [sp, #8]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	4599      	cmp	r9, r3
 80072be:	d052      	beq.n	8007366 <chRegFindThreadByWorkingArea+0x266>
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *currtp = chThdGetSelfX();

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);
 80072c0:	484a      	ldr	r0, [pc, #296]	; (80073ec <chRegFindThreadByWorkingArea+0x2ec>)
 80072c2:	f000 f9e5 	bl	8007690 <chSysHalt>
 *
 * @notapi
 */
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {

  p->prev->next = p->next;
 80072c6:	6842      	ldr	r2, [r0, #4]
 80072c8:	6803      	ldr	r3, [r0, #0]
 80072ca:	9102      	str	r1, [sp, #8]
          break;
#endif
        case CH_STATE_READY:
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->state = CH_STATE_CURRENT;
 80072cc:	f04f 0e01 	mov.w	lr, #1
 80072d0:	f880 e020 	strb.w	lr, [r0, #32]
 80072d4:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 80072d6:	6803      	ldr	r3, [r0, #0]
 80072d8:	605a      	str	r2, [r3, #4]
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI((thread_t *)ch_queue_dequeue(&tp->hdr.queue));
 80072da:	f7ff fe11 	bl	8006f00 <chSchReadyI>
 80072de:	9902      	ldr	r1, [sp, #8]
 80072e0:	e7d2      	b.n	8007288 <chRegFindThreadByWorkingArea+0x188>
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
 80072e2:	4648      	mov	r0, r9
    }
    ctp = chRegNextThread(ctp);
  } while (ctp != NULL);

  return NULL;
}
 80072e4:	b005      	add	sp, #20
 80072e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chSysLock();
  ntp = tp->newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  /*lint -restore*/
    ntp = NULL;
 80072ea:	2400      	movs	r4, #0
 80072ec:	e73f      	b.n	800716e <chRegFindThreadByWorkingArea+0x6e>
 */
void chHeapFree(void *p) {
  heap_header_t *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 80072ee:	4840      	ldr	r0, [pc, #256]	; (80073f0 <chRegFindThreadByWorkingArea+0x2f0>)
 80072f0:	f000 f9ce 	bl	8007690 <chSysHalt>
      return ctp;
    }
    ctp = chRegNextThread(ctp);
  } while (ctp != NULL);

  return NULL;
 80072f4:	4620      	mov	r0, r4
 80072f6:	e7f5      	b.n	80072e4 <chRegFindThreadByWorkingArea+0x1e4>
 *
 * @notapi
 */
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {

  p->prev->next = p->next;
 80072f8:	6842      	ldr	r2, [r0, #4]
 80072fa:	6803      	ldr	r3, [r0, #0]
 80072fc:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 80072fe:	6803      	ldr	r3, [r0, #0]
 8007300:	605a      	str	r2, [r3, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          ch_sch_prio_insert(ch_queue_dequeue(&tp->hdr.queue),
 8007302:	6a43      	ldr	r3, [r0, #36]	; 0x24
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *tp, ch_queue_t *qp) {

  ch_queue_t *cp = qp;
 8007304:	468c      	mov	ip, r1
 8007306:	461a      	mov	r2, r3
 8007308:	e004      	b.n	8007314 <chRegFindThreadByWorkingArea+0x214>
  do {
    cp = cp->next;
  } while ((cp != qp) &&
 800730a:	6891      	ldr	r1, [r2, #8]
 800730c:	468e      	mov	lr, r1
 800730e:	6881      	ldr	r1, [r0, #8]
 8007310:	458e      	cmp	lr, r1
 8007312:	d302      	bcc.n	800731a <chRegFindThreadByWorkingArea+0x21a>
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *tp, ch_queue_t *qp) {

  ch_queue_t *cp = qp;
  do {
    cp = cp->next;
 8007314:	6812      	ldr	r2, [r2, #0]
  } while ((cp != qp) &&
           (((thread_t *)cp)->hdr.pqueue.prio >= ((thread_t *)tp)->hdr.pqueue.prio));
 8007316:	4293      	cmp	r3, r2
 8007318:	d1f7      	bne.n	800730a <chRegFindThreadByWorkingArea+0x20a>
  tp->next       = cp;
  tp->prev       = cp->prev;
 800731a:	6853      	ldr	r3, [r2, #4]
 800731c:	4661      	mov	r1, ip
 800731e:	e880 000c 	stmia.w	r0, {r2, r3}
  tp->prev->next = tp;
 8007322:	6018      	str	r0, [r3, #0]
  cp->prev       = tp;
 8007324:	6050      	str	r0, [r2, #4]
 8007326:	e7af      	b.n	8007288 <chRegFindThreadByWorkingArea+0x188>
 *
 * @notapi
 */
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {

  p->prev->next = p->next;
 8007328:	6842      	ldr	r2, [r0, #4]
 800732a:	6803      	ldr	r3, [r0, #0]
 800732c:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 800732e:	6803      	ldr	r3, [r0, #0]
 8007330:	605a      	str	r2, [r3, #4]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          ch_sch_prio_insert(ch_queue_dequeue(&tp->hdr.queue),
 8007332:	6a43      	ldr	r3, [r0, #36]	; 0x24
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *tp, ch_queue_t *qp) {

  ch_queue_t *cp = qp;
 8007334:	468c      	mov	ip, r1
 8007336:	461a      	mov	r2, r3
 8007338:	e004      	b.n	8007344 <chRegFindThreadByWorkingArea+0x244>
  do {
    cp = cp->next;
  } while ((cp != qp) &&
 800733a:	6891      	ldr	r1, [r2, #8]
 800733c:	468e      	mov	lr, r1
 800733e:	6881      	ldr	r1, [r0, #8]
 8007340:	458e      	cmp	lr, r1
 8007342:	d302      	bcc.n	800734a <chRegFindThreadByWorkingArea+0x24a>
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *tp, ch_queue_t *qp) {

  ch_queue_t *cp = qp;
  do {
    cp = cp->next;
 8007344:	6812      	ldr	r2, [r2, #0]
  } while ((cp != qp) &&
           (((thread_t *)cp)->hdr.pqueue.prio >= ((thread_t *)tp)->hdr.pqueue.prio));
 8007346:	4293      	cmp	r3, r2
 8007348:	d1f7      	bne.n	800733a <chRegFindThreadByWorkingArea+0x23a>
  tp->next       = cp;
  tp->prev       = cp->prev;
 800734a:	6853      	ldr	r3, [r2, #4]
 800734c:	e880 000c 	stmia.w	r0, {r2, r3}
  tp->prev->next = tp;
 8007350:	6018      	str	r0, [r3, #0]
  cp->prev       = tp;
 8007352:	6050      	str	r0, [r2, #4]
                             &tp->u.wtmtxp->queue);
          tp = tp->u.wtmtxp->owner;
 8007354:	6a43      	ldr	r3, [r0, #36]	; 0x24
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8007356:	f8d9 2008 	ldr.w	r2, [r9, #8]
        switch (tp->state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          ch_sch_prio_insert(ch_queue_dequeue(&tp->hdr.queue),
                             &tp->u.wtmtxp->queue);
          tp = tp->u.wtmtxp->owner;
 800735a:	6898      	ldr	r0, [r3, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 800735c:	6883      	ldr	r3, [r0, #8]
 800735e:	429a      	cmp	r2, r3
 8007360:	4661      	mov	r1, ip
 8007362:	d889      	bhi.n	8007278 <chRegFindThreadByWorkingArea+0x178>
 8007364:	e790      	b.n	8007288 <chRegFindThreadByWorkingArea+0x188>
      chSchGoSleepS(CH_STATE_WTMTX);

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->owner == currtp, "not owner");
      chDbgAssert(currtp->mtxlist == mp, "not owned");
 8007366:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 800736a:	459b      	cmp	fp, r3
 800736c:	d1a8      	bne.n	80072c0 <chRegFindThreadByWorkingArea+0x1c0>
 800736e:	9102      	str	r1, [sp, #8]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8007370:	f000 fa66 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8007374:	682a      	ldr	r2, [r5, #0]
 8007376:	9902      	ldr	r1, [sp, #8]
 8007378:	42aa      	cmp	r2, r5
 800737a:	d005      	beq.n	8007388 <chRegFindThreadByWorkingArea+0x288>
 800737c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8007380:	6892      	ldr	r2, [r2, #8]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	4293      	cmp	r3, r2
 8007386:	d35a      	bcc.n	800743e <chRegFindThreadByWorkingArea+0x33e>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
  qp = &heapp->header;
 8007388:	9b01      	ldr	r3, [sp, #4]
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
 800738a:	f1a1 0008 	sub.w	r0, r1, #8
  /*lint -restore*/
  heapp = H_HEAP(hp);
  qp = &heapp->header;
 800738e:	f103 0e04 	add.w	lr, r3, #4
 8007392:	f38a 8811 	msr	BASEPRI, sl
 8007396:	4672      	mov	r2, lr

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 8007398:	4290      	cmp	r0, r2
 800739a:	d305      	bcc.n	80073a8 <chRegFindThreadByWorkingArea+0x2a8>
 800739c:	6853      	ldr	r3, [r2, #4]
 800739e:	3301      	adds	r3, #1
 80073a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80073a4:	4298      	cmp	r0, r3
 80073a6:	d3a2      	bcc.n	80072ee <chRegFindThreadByWorkingArea+0x1ee>

    if (((qp == &heapp->header) || (hp > qp)) &&
 80073a8:	4596      	cmp	lr, r2
 80073aa:	d005      	beq.n	80073b8 <chRegFindThreadByWorkingArea+0x2b8>
 80073ac:	4290      	cmp	r0, r2
 80073ae:	d803      	bhi.n	80073b8 <chRegFindThreadByWorkingArea+0x2b8>
 80073b0:	6812      	ldr	r2, [r2, #0]

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 80073b2:	4290      	cmp	r0, r2
 80073b4:	d3f8      	bcc.n	80073a8 <chRegFindThreadByWorkingArea+0x2a8>
 80073b6:	e7f1      	b.n	800739c <chRegFindThreadByWorkingArea+0x29c>

    if (((qp == &heapp->header) || (hp > qp)) &&
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80073b8:	6813      	ldr	r3, [r2, #0]
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d042      	beq.n	8007444 <chRegFindThreadByWorkingArea+0x344>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80073be:	4298      	cmp	r0, r3
 80073c0:	d340      	bcc.n	8007444 <chRegFindThreadByWorkingArea+0x344>
 80073c2:	461a      	mov	r2, r3
 80073c4:	e7e8      	b.n	8007398 <chRegFindThreadByWorkingArea+0x298>
    chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = currtp;
 80073c6:	9801      	ldr	r0, [sp, #4]
    mp->next = currtp->mtxlist;
 80073c8:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 80073cc:	6183      	str	r3, [r0, #24]
    chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = currtp;
 80073ce:	f8c0 9014 	str.w	r9, [r0, #20]
    mp->next = currtp->mtxlist;
    currtp->mtxlist = mp;
 80073d2:	f8c9 b038 	str.w	fp, [r9, #56]	; 0x38
 80073d6:	e7ca      	b.n	800736e <chRegFindThreadByWorkingArea+0x26e>
 80073d8:	2000b288 	.word	0x2000b288
 80073dc:	0800d040 	.word	0x0800d040
 80073e0:	0800c75c 	.word	0x0800c75c
 80073e4:	0800cfbc 	.word	0x0800cfbc
 80073e8:	0800d068 	.word	0x0800d068
 80073ec:	0800cf7c 	.word	0x0800cf7c
 80073f0:	0800cf70 	.word	0x0800cf70
 80073f4:	464c      	mov	r4, r9
 80073f6:	f8dd 9008 	ldr.w	r9, [sp, #8]
 * @return              The removed element pointer.
 *
 * @notapi
 */
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
  ch_queue_t *p = qp->next;
 80073fa:	9801      	ldr	r0, [sp, #4]
 80073fc:	463b      	mov	r3, r7
        lmp = lmp->next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      currtp->hdr.pqueue.prio = newprio;
 80073fe:	f8c9 3008 	str.w	r3, [r9, #8]
 8007402:	68c3      	ldr	r3, [r0, #12]
 8007404:	9f03      	ldr	r7, [sp, #12]

  qp->next       = p->next;
 8007406:	681a      	ldr	r2, [r3, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = (thread_t *)ch_queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8007408:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800740a:	60c2      	str	r2, [r0, #12]
  qp->next->prev = qp;
 800740c:	f8c2 b004 	str.w	fp, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = (thread_t *)ch_queue_fifo_remove(&mp->queue);
      mp->owner = tp;
 8007410:	9a01      	ldr	r2, [sp, #4]

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8007412:	4618      	mov	r0, r3
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = (thread_t *)ch_queue_fifo_remove(&mp->queue);
      mp->owner = tp;
 8007414:	6153      	str	r3, [r2, #20]
      mp->next = tp->mtxlist;
 8007416:	6191      	str	r1, [r2, #24]
      tp->mtxlist = mp;
 8007418:	f8c3 b038 	str.w	fp, [r3, #56]	; 0x38

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 800741c:	f7ff fd70 	bl	8006f00 <chSchReadyI>
      chSchRescheduleS();
 8007420:	f7ff fd3e 	bl	8006ea0 <chSchRescheduleS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8007424:	f000 fa0c 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8007428:	682b      	ldr	r3, [r5, #0]
 800742a:	42ab      	cmp	r3, r5
 800742c:	f43f aec7 	beq.w	80071be <chRegFindThreadByWorkingArea+0xbe>
 8007430:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	6892      	ldr	r2, [r2, #8]
 8007438:	429a      	cmp	r2, r3
 800743a:	f4bf aec0 	bcs.w	80071be <chRegFindThreadByWorkingArea+0xbe>
 800743e:	4831      	ldr	r0, [pc, #196]	; (8007504 <chRegFindThreadByWorkingArea+0x404>)
 8007440:	f000 f926 	bl	8007690 <chSysHalt>
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8007444:	f851 9c04 	ldr.w	r9, [r1, #-4]
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
 8007448:	f841 3c08 	str.w	r3, [r1, #-8]
      H_NEXT(qp) = hp;
 800744c:	6010      	str	r0, [r2, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 800744e:	f109 0e01 	add.w	lr, r9, #1
 8007452:	f851 3c08 	ldr.w	r3, [r1, #-8]
 8007456:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 800745a:	459c      	cmp	ip, r3
 800745c:	d046      	beq.n	80074ec <chRegFindThreadByWorkingArea+0x3ec>
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
 800745e:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8007462:	f10e 0301 	add.w	r3, lr, #1
 8007466:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800746a:	4298      	cmp	r0, r3
 800746c:	d035      	beq.n	80074da <chRegFindThreadByWorkingArea+0x3da>
 800746e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8007472:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8007476:	f000 f9f3 	bl	8007860 <_dbg_check_lock>

  chDbgCheck(mp != NULL);

  chSysLock();

  chDbgAssert(currtp->mtxlist != NULL, "owned mutexes list empty");
 800747a:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 800747e:	b112      	cbz	r2, 8007486 <chRegFindThreadByWorkingArea+0x386>
  chDbgAssert(currtp->mtxlist->owner == currtp, "ownership failure");
 8007480:	6893      	ldr	r3, [r2, #8]
 8007482:	4599      	cmp	r9, r3
 8007484:	d002      	beq.n	800748c <chRegFindThreadByWorkingArea+0x38c>

  chDbgCheck(mp != NULL);

  chSysLock();

  chDbgAssert(currtp->mtxlist != NULL, "owned mutexes list empty");
 8007486:	4820      	ldr	r0, [pc, #128]	; (8007508 <chRegFindThreadByWorkingArea+0x408>)
 8007488:	f000 f902 	bl	8007690 <chSysHalt>
  chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->cnt == (cnt_t)0) {
#endif

    chDbgAssert(currtp->mtxlist == mp, "not next in list");
 800748c:	4593      	cmp	fp, r2
 800748e:	d1fa      	bne.n	8007486 <chRegFindThreadByWorkingArea+0x386>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    currtp->mtxlist = mp->next;
 8007490:	9b01      	ldr	r3, [sp, #4]
 8007492:	699a      	ldr	r2, [r3, #24]
 8007494:	f8c9 2038 	str.w	r2, [r9, #56]	; 0x38
 8007498:	9203      	str	r2, [sp, #12]
 *
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {

  chDbgCheckClassS();
 800749a:	f000 f919 	bl	80076d0 <chDbgCheckClassS>

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800749e:	9b01      	ldr	r3, [sp, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	459b      	cmp	fp, r3
 80074a4:	d015      	beq.n	80074d2 <chRegFindThreadByWorkingArea+0x3d2>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = currtp->realprio;
 80074a6:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 80074aa:	9a03      	ldr	r2, [sp, #12]
 80074ac:	f8cd 9008 	str.w	r9, [sp, #8]
 80074b0:	9703      	str	r7, [sp, #12]
 80074b2:	46a1      	mov	r9, r4
 80074b4:	461f      	mov	r7, r3
 80074b6:	4614      	mov	r4, r2
      lmp = currtp->mtxlist;
      while (lmp != NULL) {
 80074b8:	2c00      	cmp	r4, #0
 80074ba:	d09b      	beq.n	80073f4 <chRegFindThreadByWorkingArea+0x2f4>
 80074bc:	f000 f908 	bl	80076d0 <chDbgCheckClassS>
 *
 * @notapi
 */
static inline bool ch_queue_notempty(const ch_queue_t *qp) {

  return (bool)(qp->next != qp);
 80074c0:	6822      	ldr	r2, [r4, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80074c2:	4294      	cmp	r4, r2
 80074c4:	d003      	beq.n	80074ce <chRegFindThreadByWorkingArea+0x3ce>
            (((thread_t *)lmp->queue.next)->hdr.pqueue.prio > newprio)) {
 80074c6:	6893      	ldr	r3, [r2, #8]
 80074c8:	429f      	cmp	r7, r3
 80074ca:	bf38      	it	cc
 80074cc:	461f      	movcc	r7, r3
          newprio = ((thread_t *)lmp->queue.next)->hdr.pqueue.prio;
        }
        lmp = lmp->next;
 80074ce:	68e4      	ldr	r4, [r4, #12]
 80074d0:	e7f2      	b.n	80074b8 <chRegFindThreadByWorkingArea+0x3b8>
         just changed priority.*/
      (void) chSchReadyI(tp);
      chSchRescheduleS();
    }
    else {
      mp->owner = NULL;
 80074d2:	9b01      	ldr	r3, [sp, #4]
 80074d4:	f8c3 a014 	str.w	sl, [r3, #20]
 80074d8:	e7a4      	b.n	8007424 <chRegFindThreadByWorkingArea+0x324>
        /* Merge with the previous block.*/
        H_PAGES(qp) += H_PAGES(hp) + 1U;
        H_NEXT(qp) = H_NEXT(hp);
 80074da:	e911 000a 	ldmdb	r1, {r1, r3}
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80074de:	4473      	add	r3, lr
 80074e0:	3301      	adds	r3, #1
        H_NEXT(qp) = H_NEXT(hp);
 80074e2:	6011      	str	r1, [r2, #0]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80074e4:	6053      	str	r3, [r2, #4]
 80074e6:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80074ea:	e7c2      	b.n	8007472 <chRegFindThreadByWorkingArea+0x372>
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80074ec:	f8dc c004 	ldr.w	ip, [ip, #4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80074f0:	f850 303e 	ldr.w	r3, [r0, lr, lsl #3]
 80074f4:	f841 3c08 	str.w	r3, [r1, #-8]
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80074f8:	eb0c 0309 	add.w	r3, ip, r9
 80074fc:	3301      	adds	r3, #1
 80074fe:	f841 3c04 	str.w	r3, [r1, #-4]
 8007502:	e7ac      	b.n	800745e <chRegFindThreadByWorkingArea+0x35e>
 8007504:	0800cf88 	.word	0x0800cf88
 8007508:	0800d034 	.word	0x0800d034
 800750c:	00000000 	.word	0x00000000

08007510 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 8007510:	b510      	push	{r4, lr}
 8007512:	2320      	movs	r3, #32
 8007514:	4604      	mov	r4, r0
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f000 f9a1 	bl	8007860 <_dbg_check_lock>
 *
 * @sclass
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);
 800751e:	b1ac      	cbz	r4, 800754c <chThdSleep+0x3c>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8007520:	4621      	mov	r1, r4
 8007522:	2008      	movs	r0, #8
 8007524:	f7ff fb1c 	bl	8006b60 <chSchGoSleepTimeoutS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8007528:	f000 f98a 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800752c:	4b09      	ldr	r3, [pc, #36]	; (8007554 <chThdSleep+0x44>)
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	429a      	cmp	r2, r3
 8007532:	d004      	beq.n	800753e <chThdSleep+0x2e>
 8007534:	6999      	ldr	r1, [r3, #24]
 8007536:	6893      	ldr	r3, [r2, #8]
 8007538:	688a      	ldr	r2, [r1, #8]
 800753a:	429a      	cmp	r2, r3
 800753c:	d303      	bcc.n	8007546 <chThdSleep+0x36>
 800753e:	2300      	movs	r3, #0
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	bd10      	pop	{r4, pc}
 8007546:	4804      	ldr	r0, [pc, #16]	; (8007558 <chThdSleep+0x48>)
 8007548:	f000 f8a2 	bl	8007690 <chSysHalt>
 *
 * @sclass
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);
 800754c:	4803      	ldr	r0, [pc, #12]	; (800755c <chThdSleep+0x4c>)
 800754e:	f000 f89f 	bl	8007690 <chSysHalt>
 8007552:	bf00      	nop
 8007554:	2000b288 	.word	0x2000b288
 8007558:	0800c75c 	.word	0x0800c75c
 800755c:	0800cf94 	.word	0x0800cf94

08007560 <trace_next>:
/**
 * @brief   Writes a time stamp and increases the trace buffer pointer.
 *
 * @notapi
 */
NOINLINE static void trace_next(void) {
 8007560:	b410      	push	{r4}

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8007562:	4a0b      	ldr	r2, [pc, #44]	; (8007590 <trace_next+0x30>)
 8007564:	480b      	ldr	r0, [pc, #44]	; (8007594 <trace_next+0x34>)
 8007566:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8007568:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
#if PORT_SUPPORTS_RT == TRUE
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 800756c:	6819      	ldr	r1, [r3, #0]
 800756e:	6a64      	ldr	r4, [r4, #36]	; 0x24
 *
 * @notapi
 */
NOINLINE static void trace_next(void) {

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8007570:	605c      	str	r4, [r3, #4]
 8007572:	6840      	ldr	r0, [r0, #4]
#if PORT_SUPPORTS_RT == TRUE
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 8007574:	f360 211f 	bfi	r1, r0, #8, #24
 8007578:	f843 1b10 	str.w	r1, [r3], #16
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(ch.dbg.trace_buffer.ptr);

  if (++ch.dbg.trace_buffer.ptr >=
 800757c:	f502 6104 	add.w	r1, r2, #2112	; 0x840
 8007580:	428b      	cmp	r3, r1
      &ch.dbg.trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 8007582:	bf28      	it	cs
 8007584:	f102 0340 	addcs.w	r3, r2, #64	; 0x40
 8007588:	63d3      	str	r3, [r2, #60]	; 0x3c
  }
}
 800758a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	2000b288 	.word	0x2000b288
 8007594:	e0001000 	.word	0xe0001000
	...

080075a0 <_idle_thread.lto_priv.90>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80075a0:	e7fe      	b.n	80075a0 <_idle_thread.lto_priv.90>
 80075a2:	bf00      	nop
	...

080075b0 <_trace_isr_leave>:
 *
 * @notapi
 */
void _trace_isr_leave(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80075b0:	4b0b      	ldr	r3, [pc, #44]	; (80075e0 <_trace_isr_leave+0x30>)
 *
 * @param[in] isr       name of the isr
 *
 * @notapi
 */
void _trace_isr_leave(const char *isr) {
 80075b2:	b510      	push	{r4, lr}

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80075b4:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
 80075b6:	f004 0402 	and.w	r4, r4, #2
 80075ba:	b2a4      	uxth	r4, r4
 80075bc:	b97c      	cbnz	r4, 80075de <_trace_isr_leave+0x2e>
 80075be:	2220      	movs	r2, #32
 80075c0:	f382 8811 	msr	BASEPRI, r2
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 80075c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075c6:	7813      	ldrb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = 0U;
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 80075c8:	6090      	str	r0, [r2, #8]
 */
void _trace_isr_leave(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 80075ca:	2103      	movs	r1, #3
 80075cc:	f361 0302 	bfi	r3, r1, #0, #3
    ch.dbg.trace_buffer.ptr->state       = 0U;
 80075d0:	f364 03c7 	bfi	r3, r4, #3, #5
 80075d4:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
    trace_next();
 80075d6:	f7ff ffc3 	bl	8007560 <trace_next>
 80075da:	f384 8811 	msr	BASEPRI, r4
 80075de:	bd10      	pop	{r4, pc}
 80075e0:	2000b288 	.word	0x2000b288
	...

080075f0 <_trace_isr_enter>:
 *
 * @notapi
 */
void _trace_isr_enter(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80075f0:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <_trace_isr_enter+0x30>)
 *
 * @param[in] isr       name of the isr
 *
 * @notapi
 */
void _trace_isr_enter(const char *isr) {
 80075f2:	b510      	push	{r4, lr}

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80075f4:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
 80075f6:	f004 0402 	and.w	r4, r4, #2
 80075fa:	b2a4      	uxth	r4, r4
 80075fc:	b97c      	cbnz	r4, 800761e <_trace_isr_enter+0x2e>
 80075fe:	2220      	movs	r2, #32
 8007600:	f382 8811 	msr	BASEPRI, r2
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 8007604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007606:	7813      	ldrb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = 0U;
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8007608:	6090      	str	r0, [r2, #8]
 */
void _trace_isr_enter(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 800760a:	2102      	movs	r1, #2
 800760c:	f361 0302 	bfi	r3, r1, #0, #3
    ch.dbg.trace_buffer.ptr->state       = 0U;
 8007610:	f364 03c7 	bfi	r3, r4, #3, #5
 8007614:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
    trace_next();
 8007616:	f7ff ffa3 	bl	8007560 <trace_next>
 800761a:	f384 8811 	msr	BASEPRI, r4
 800761e:	bd10      	pop	{r4, pc}
 8007620:	2000b288 	.word	0x2000b288
	...

08007630 <_trace_switch>:
 */
void _trace_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 8007630:	4b0c      	ldr	r3, [pc, #48]	; (8007664 <_trace_switch+0x34>)
 8007632:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8007634:	07d2      	lsls	r2, r2, #31
 8007636:	d500      	bpl.n	800763a <_trace_switch+0xa>
 8007638:	4770      	bx	lr
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 800763a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 * @param[in] ntp       the thread being switched in
 * @param[in] otp       the thread being switched out
 *
 * @notapi
 */
void _trace_switch(thread_t *ntp, thread_t *otp) {
 800763c:	b410      	push	{r4}
  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 800763e:	699c      	ldr	r4, [r3, #24]
void _trace_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8007640:	7813      	ldrb	r3, [r2, #0]
 8007642:	2001      	movs	r0, #1
 8007644:	f360 0302 	bfi	r3, r0, #0, #3
 8007648:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
 800764a:	f891 0020 	ldrb.w	r0, [r1, #32]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 800764e:	6094      	str	r4, [r2, #8]

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
 8007650:	f360 03c7 	bfi	r3, r0, #3, #5
 8007654:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8007656:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8007658:	60d3      	str	r3, [r2, #12]
    trace_next();
  }
}
 800765a:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
    trace_next();
 800765e:	f7ff bf7f 	b.w	8007560 <trace_next>
 8007662:	bf00      	nop
 8007664:	2000b288 	.word	0x2000b288
	...

08007670 <chSysPolledDelayX>:
 8007670:	4a03      	ldr	r2, [pc, #12]	; (8007680 <chSysPolledDelayX+0x10>)
 8007672:	6851      	ldr	r1, [r2, #4]
 8007674:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)(((rtcnt_t)cnt - (rtcnt_t)start) <
 8007676:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 8007678:	4298      	cmp	r0, r3
 800767a:	d8fb      	bhi.n	8007674 <chSysPolledDelayX+0x4>
  }
}
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	e0001000 	.word	0xe0001000
	...

08007690 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 8007690:	b508      	push	{r3, lr}
 8007692:	4605      	mov	r5, r0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007694:	b672      	cpsid	i
 *
 * @notapi
 */
void _trace_halt(const char *reason) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
 8007696:	4c0a      	ldr	r4, [pc, #40]	; (80076c0 <chSysHalt+0x30>)
 8007698:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800769a:	f003 0304 	and.w	r3, r3, #4
 800769e:	b29b      	uxth	r3, r3
 80076a0:	b10b      	cbz	r3, 80076a6 <chSysHalt+0x16>

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80076a2:	62e5      	str	r5, [r4, #44]	; 0x2c
 80076a4:	e7fe      	b.n	80076a4 <chSysHalt+0x14>
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 80076a6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80076a8:	780a      	ldrb	r2, [r1, #0]
    ch.dbg.trace_buffer.ptr->state         = 0;
    ch.dbg.trace_buffer.ptr->u.halt.reason = reason;
 80076aa:	6088      	str	r0, [r1, #8]
 * @notapi
 */
void _trace_halt(const char *reason) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 80076ac:	2004      	movs	r0, #4
 80076ae:	f360 0202 	bfi	r2, r0, #0, #3
    ch.dbg.trace_buffer.ptr->state         = 0;
 80076b2:	f363 02c7 	bfi	r2, r3, #3, #5
 80076b6:	700a      	strb	r2, [r1, #0]
    ch.dbg.trace_buffer.ptr->u.halt.reason = reason;
    trace_next();
 80076b8:	f7ff ff52 	bl	8007560 <trace_next>
 80076bc:	e7f1      	b.n	80076a2 <chSysHalt+0x12>
 80076be:	bf00      	nop
 80076c0:	2000b288 	.word	0x2000b288
	...

080076d0 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
 80076d0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80076d2:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <chDbgCheckClassS+0x18>)
 80076d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076d6:	b91a      	cbnz	r2, 80076e0 <chDbgCheckClassS+0x10>
 80076d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076da:	2b00      	cmp	r3, #0
 80076dc:	dd00      	ble.n	80076e0 <chDbgCheckClassS+0x10>
 80076de:	bd08      	pop	{r3, pc}
    chSysHalt("SV#11");
 80076e0:	4802      	ldr	r0, [pc, #8]	; (80076ec <chDbgCheckClassS+0x1c>)
 80076e2:	f7ff ffd5 	bl	8007690 <chSysHalt>
 80076e6:	bf00      	nop
 80076e8:	2000b288 	.word	0x2000b288
 80076ec:	0800d084 	.word	0x0800d084

080076f0 <chDbgCheckClassI>:
 *          an I-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassI(void) {
 80076f0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80076f2:	4b05      	ldr	r3, [pc, #20]	; (8007708 <chDbgCheckClassI+0x18>)
 80076f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076f6:	2a00      	cmp	r2, #0
 80076f8:	db03      	blt.n	8007702 <chDbgCheckClassI+0x12>
 80076fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	dd00      	ble.n	8007702 <chDbgCheckClassI+0x12>
 8007700:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 8007702:	4802      	ldr	r0, [pc, #8]	; (800770c <chDbgCheckClassI+0x1c>)
 8007704:	f7ff ffc4 	bl	8007690 <chSysHalt>
 8007708:	2000b288 	.word	0x2000b288
 800770c:	0800d08c 	.word	0x0800d08c

08007710 <_dbg_check_leave_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_EPILOGUE().
 *
 * @notapi
 */
void _dbg_check_leave_isr(void) {
 8007710:	b508      	push	{r3, lr}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007712:	2320      	movs	r3, #32
 8007714:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8007718:	4a06      	ldr	r2, [pc, #24]	; (8007734 <_dbg_check_leave_isr+0x24>)
 800771a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800771c:	2b00      	cmp	r3, #0
 800771e:	dd01      	ble.n	8007724 <_dbg_check_leave_isr+0x14>
 8007720:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8007722:	b111      	cbz	r1, 800772a <_dbg_check_leave_isr+0x1a>
    chSysHalt("SV#9");
 8007724:	4804      	ldr	r0, [pc, #16]	; (8007738 <_dbg_check_leave_isr+0x28>)
 8007726:	f7ff ffb3 	bl	8007690 <chSysHalt>
  }
  ch.dbg.isr_cnt--;
 800772a:	3b01      	subs	r3, #1
 800772c:	6313      	str	r3, [r2, #48]	; 0x30
 800772e:	f381 8811 	msr	BASEPRI, r1
 8007732:	bd08      	pop	{r3, pc}
 8007734:	2000b288 	.word	0x2000b288
 8007738:	0800d094 	.word	0x0800d094
 800773c:	00000000 	.word	0x00000000

08007740 <_dbg_check_enter_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_PROLOGUE().
 *
 * @notapi
 */
void _dbg_check_enter_isr(void) {
 8007740:	b508      	push	{r3, lr}
 8007742:	2320      	movs	r3, #32
 8007744:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8007748:	4a06      	ldr	r2, [pc, #24]	; (8007764 <_dbg_check_enter_isr+0x24>)
 800774a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800774c:	2b00      	cmp	r3, #0
 800774e:	db01      	blt.n	8007754 <_dbg_check_enter_isr+0x14>
 8007750:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8007752:	b111      	cbz	r1, 800775a <_dbg_check_enter_isr+0x1a>
    chSysHalt("SV#8");
 8007754:	4804      	ldr	r0, [pc, #16]	; (8007768 <_dbg_check_enter_isr+0x28>)
 8007756:	f7ff ff9b 	bl	8007690 <chSysHalt>
  }
  ch.dbg.isr_cnt++;
 800775a:	3301      	adds	r3, #1
 800775c:	6313      	str	r3, [r2, #48]	; 0x30
 800775e:	f381 8811 	msr	BASEPRI, r1
 8007762:	bd08      	pop	{r3, pc}
 8007764:	2000b288 	.word	0x2000b288
 8007768:	0800d09c 	.word	0x0800d09c
 800776c:	00000000 	.word	0x00000000

08007770 <_dbg_check_unlock_from_isr>:
/**
 * @brief   Guard code for @p chSysUnlockFromIsr().
 *
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {
 8007770:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8007772:	4b06      	ldr	r3, [pc, #24]	; (800778c <_dbg_check_unlock_from_isr+0x1c>)
 8007774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007776:	2a00      	cmp	r2, #0
 8007778:	dd05      	ble.n	8007786 <_dbg_check_unlock_from_isr+0x16>
 800777a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800777c:	2a00      	cmp	r2, #0
 800777e:	dd02      	ble.n	8007786 <_dbg_check_unlock_from_isr+0x16>
    chSysHalt("SV#7");
  }
  _dbg_leave_lock();
 8007780:	2200      	movs	r2, #0
 8007782:	635a      	str	r2, [r3, #52]	; 0x34
 8007784:	bd08      	pop	{r3, pc}
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
    chSysHalt("SV#7");
 8007786:	4802      	ldr	r0, [pc, #8]	; (8007790 <_dbg_check_unlock_from_isr+0x20>)
 8007788:	f7ff ff82 	bl	8007690 <chSysHalt>
 800778c:	2000b288 	.word	0x2000b288
 8007790:	0800d0a4 	.word	0x0800d0a4
	...

080077a0 <_dbg_check_lock_from_isr>:
/**
 * @brief   Guard code for @p chSysLockFromIsr().
 *
 * @notapi
 */
void _dbg_check_lock_from_isr(void) {
 80077a0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80077a2:	4b06      	ldr	r3, [pc, #24]	; (80077bc <_dbg_check_lock_from_isr+0x1c>)
 80077a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077a6:	2a00      	cmp	r2, #0
 80077a8:	dd01      	ble.n	80077ae <_dbg_check_lock_from_isr+0xe>
 80077aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077ac:	b112      	cbz	r2, 80077b4 <_dbg_check_lock_from_isr+0x14>
    chSysHalt("SV#6");
 80077ae:	4804      	ldr	r0, [pc, #16]	; (80077c0 <_dbg_check_lock_from_isr+0x20>)
 80077b0:	f7ff ff6e 	bl	8007690 <chSysHalt>
  }
  _dbg_enter_lock();
 80077b4:	2201      	movs	r2, #1
 80077b6:	635a      	str	r2, [r3, #52]	; 0x34
 80077b8:	bd08      	pop	{r3, pc}
 80077ba:	bf00      	nop
 80077bc:	2000b288 	.word	0x2000b288
 80077c0:	0800d0ac 	.word	0x0800d0ac
	...

080077d0 <wakeup.lto_priv.112>:
/*===========================================================================*/

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	4604      	mov	r4, r0
 80077d4:	2320      	movs	r3, #32
 80077d6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80077da:	f7ff ffe1 	bl	80077a0 <_dbg_check_lock_from_isr>
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 80077de:	f894 3020 	ldrb.w	r3, [r4, #32]
 80077e2:	2b07      	cmp	r3, #7
 80077e4:	d810      	bhi.n	8007808 <wakeup.lto_priv.112+0x38>
 80077e6:	e8df f003 	tbb	[pc, r3]
 80077ea:	0f15      	.short	0x0f15
 80077ec:	040a1b0f 	.word	0x040a1b0f
 80077f0:	0a0f      	.short	0x0a0f
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 80077f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 80077f4:	f7ff ff7c 	bl	80076f0 <chDbgCheckClassI>

  sp->cnt++;
 80077f8:	68ab      	ldr	r3, [r5, #8]
 80077fa:	3301      	adds	r3, #1
 80077fc:	60ab      	str	r3, [r5, #8]
 *
 * @notapi
 */
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {

  p->prev->next = p->next;
 80077fe:	e894 000c 	ldmia.w	r4, {r2, r3}
 8007802:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
 8007804:	6822      	ldr	r2, [r4, #0]
 8007806:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8007808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800780c:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 800780e:	4620      	mov	r0, r4
 8007810:	f7ff fb76 	bl	8006f00 <chSchReadyI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8007814:	f7ff ffac 	bl	8007770 <_dbg_check_unlock_from_isr>
 8007818:	2300      	movs	r3, #0
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	bd38      	pop	{r3, r4, r5, pc}
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 8007820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8007826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800782a:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 800782c:	4620      	mov	r0, r4
 800782e:	f7ff fb67 	bl	8006f00 <chSchReadyI>
 8007832:	e7ef      	b.n	8007814 <wakeup.lto_priv.112+0x44>
	...

08007840 <_dbg_check_unlock>:
/**
 * @brief   Guard code for @p chSysUnlock().
 *
 * @notapi
 */
void _dbg_check_unlock(void) {
 8007840:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8007842:	4b05      	ldr	r3, [pc, #20]	; (8007858 <_dbg_check_unlock+0x18>)
 8007844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007846:	b922      	cbnz	r2, 8007852 <_dbg_check_unlock+0x12>
 8007848:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800784a:	2900      	cmp	r1, #0
 800784c:	dd01      	ble.n	8007852 <_dbg_check_unlock+0x12>
    chSysHalt("SV#5");
  }
  _dbg_leave_lock();
 800784e:	635a      	str	r2, [r3, #52]	; 0x34
 8007850:	bd08      	pop	{r3, pc}
 * @notapi
 */
void _dbg_check_unlock(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
    chSysHalt("SV#5");
 8007852:	4802      	ldr	r0, [pc, #8]	; (800785c <_dbg_check_unlock+0x1c>)
 8007854:	f7ff ff1c 	bl	8007690 <chSysHalt>
 8007858:	2000b288 	.word	0x2000b288
 800785c:	0800d0b4 	.word	0x0800d0b4

08007860 <_dbg_check_lock>:
/**
 * @brief   Guard code for @p chSysLock().
 *
 * @notapi
 */
void _dbg_check_lock(void) {
 8007860:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8007862:	4b05      	ldr	r3, [pc, #20]	; (8007878 <_dbg_check_lock+0x18>)
 8007864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007866:	b90a      	cbnz	r2, 800786c <_dbg_check_lock+0xc>
 8007868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800786a:	b112      	cbz	r2, 8007872 <_dbg_check_lock+0x12>
    chSysHalt("SV#4");
 800786c:	4803      	ldr	r0, [pc, #12]	; (800787c <_dbg_check_lock+0x1c>)
 800786e:	f7ff ff0f 	bl	8007690 <chSysHalt>
  }
  _dbg_enter_lock();
 8007872:	2201      	movs	r2, #1
 8007874:	635a      	str	r2, [r3, #52]	; 0x34
 8007876:	bd08      	pop	{r3, pc}
 8007878:	2000b288 	.word	0x2000b288
 800787c:	0800d0bc 	.word	0x0800d0bc

08007880 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8007880:	4a98      	ldr	r2, [pc, #608]	; (8007ae4 <__early_init+0x264>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8007882:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 8007b24 <__early_init+0x2a4>

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8007886:	6913      	ldr	r3, [r2, #16]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8007888:	4897      	ldr	r0, [pc, #604]	; (8007ae8 <__early_init+0x268>)

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 800788a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800788e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8007892:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8007896:	6113      	str	r3, [r2, #16]
 8007898:	6913      	ldr	r3, [r2, #16]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800789a:	f8df 828c 	ldr.w	r8, [pc, #652]	; 8007b28 <__early_init+0x2a8>
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 800789e:	f8df 928c 	ldr.w	r9, [pc, #652]	; 8007b2c <__early_init+0x2ac>
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80078a2:	f8df b28c 	ldr.w	fp, [pc, #652]	; 8007b30 <__early_init+0x2b0>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80078a6:	f8df e28c 	ldr.w	lr, [pc, #652]	; 8007b34 <__early_init+0x2b4>
 80078aa:	4f90      	ldr	r7, [pc, #576]	; (8007aec <__early_init+0x26c>)
 80078ac:	4e90      	ldr	r6, [pc, #576]	; (8007af0 <__early_init+0x270>)
 80078ae:	4d91      	ldr	r5, [pc, #580]	; (8007af4 <__early_init+0x274>)
 80078b0:	4c91      	ldr	r4, [pc, #580]	; (8007af8 <__early_init+0x278>)

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80078b2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80078b6:	f023 0301 	bic.w	r3, r3, #1
 80078ba:	6113      	str	r3, [r2, #16]
 80078bc:	6913      	ldr	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80078be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80078c0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80078c4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 80078c8:	6313      	str	r3, [r2, #48]	; 0x30
 80078ca:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80078cc:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80078d0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 80078d4:	6513      	str	r3, [r2, #80]	; 0x50
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 80078d6:	f46f 4aa8 	mvn.w	sl, #21504	; 0x5400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80078da:	2300      	movs	r3, #0
static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80078dc:	6d11      	ldr	r1, [r2, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80078de:	f8c8 3004 	str.w	r3, [r8, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80078e2:	f8c8 a008 	str.w	sl, [r8, #8]
  gpiop->PUPDR   = config->pupdr;
 80078e6:	f8c8 900c 	str.w	r9, [r8, #12]
  gpiop->ODR     = config->odr;
 80078ea:	f64f 7aff 	movw	sl, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 80078ee:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8007b38 <__early_init+0x2b8>
static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80078f2:	f8c8 a014 	str.w	sl, [r8, #20]
  gpiop->AFRL    = config->afrl;
 80078f6:	f8c8 b020 	str.w	fp, [r8, #32]
  gpiop->AFRH    = config->afrh;
 80078fa:	f8c8 9024 	str.w	r9, [r8, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80078fe:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8007b3c <__early_init+0x2bc>
 8007902:	f8c8 b000 	str.w	fp, [r8]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8007906:	f44f 7910 	mov.w	r9, #576	; 0x240
 800790a:	f8cc 9004 	str.w	r9, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800790e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  gpiop->PUPDR   = config->pupdr;
 8007912:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8007b40 <__early_init+0x2c0>
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8007916:	f8cc 8008 	str.w	r8, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 800791a:	f04f 6980 	mov.w	r9, #67108864	; 0x4000000

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 800791e:	f8cc b00c 	str.w	fp, [ip, #12]
  gpiop->ODR     = config->odr;
 8007922:	f8cc a014 	str.w	sl, [ip, #20]
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8007926:	f04f 0b40 	mov.w	fp, #64	; 0x40

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 800792a:	f8cc 9020 	str.w	r9, [ip, #32]
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 800792e:	f8df 9214 	ldr.w	r9, [pc, #532]	; 8007b44 <__early_init+0x2c4>
  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8007932:	f8cc b024 	str.w	fp, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8007936:	f8cc 9000 	str.w	r9, [ip]

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 800793a:	f10c 5ca2 	add.w	ip, ip, #339738624	; 0x14400000
 800793e:	f50c 3c44 	add.w	ip, ip, #200704	; 0x31000
 8007942:	f50c 7caa 	add.w	ip, ip, #340	; 0x154
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8007946:	f8ce 3004 	str.w	r3, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800794a:	f8ce 8008 	str.w	r8, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 800794e:	f8ce c00c 	str.w	ip, [lr, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8007952:	f04f 4cc0 	mov.w	ip, #1610612736	; 0x60000000
static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8007956:	f8ce a014 	str.w	sl, [lr, #20]
  gpiop->AFRL    = config->afrl;
 800795a:	f8ce c020 	str.w	ip, [lr, #32]
  gpiop->AFRH    = config->afrh;
 800795e:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8007b48 <__early_init+0x2c8>
 8007962:	f8ce c024 	str.w	ip, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8007966:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 8007b4c <__early_init+0x2cc>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800796a:	4964      	ldr	r1, [pc, #400]	; (8007afc <__early_init+0x27c>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 800796c:	f8ce c000 	str.w	ip, [lr]

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8007970:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 8007b50 <__early_init+0x2d0>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8007974:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8007976:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8007b54 <__early_init+0x2d4>
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 800797a:	f8c7 8008 	str.w	r8, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 800797e:	f8c7 e00c 	str.w	lr, [r7, #12]
  gpiop->ODR     = config->odr;
 8007982:	f640 7eff 	movw	lr, #4095	; 0xfff
 8007986:	f8c7 e014 	str.w	lr, [r7, #20]
  gpiop->AFRL    = config->afrl;
 800798a:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 800798c:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800798e:	f8c7 c000 	str.w	ip, [r7]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8007992:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8007994:	f8c6 8008 	str.w	r8, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8007998:	60f3      	str	r3, [r6, #12]
  gpiop->ODR     = config->odr;
 800799a:	f8c6 a014 	str.w	sl, [r6, #20]
  gpiop->AFRL    = config->afrl;
 800799e:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 80079a0:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80079a2:	f8c6 b000 	str.w	fp, [r6]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80079a6:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80079a8:	f8c5 8008 	str.w	r8, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 80079ac:	60eb      	str	r3, [r5, #12]
  gpiop->ODR     = config->odr;
 80079ae:	f8c5 a014 	str.w	sl, [r5, #20]
  gpiop->AFRL    = config->afrl;
 80079b2:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 80079b4:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80079b6:	602b      	str	r3, [r5, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80079b8:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80079ba:	f8c4 8008 	str.w	r8, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 80079be:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
 80079c0:	f8c4 a014 	str.w	sl, [r4, #20]
  gpiop->AFRL    = config->afrl;
 80079c4:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 80079c6:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80079c8:	6023      	str	r3, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80079ca:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80079cc:	f8c0 8008 	str.w	r8, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80079d0:	60c3      	str	r3, [r0, #12]
  gpiop->ODR     = config->odr;
 80079d2:	f8c0 a014 	str.w	sl, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80079d6:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 80079d8:	6243      	str	r3, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80079da:	6003      	str	r3, [r0, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80079dc:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80079de:	f8c1 8008 	str.w	r8, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 80079e2:	60cb      	str	r3, [r1, #12]
  gpiop->ODR     = config->odr;
 80079e4:	f8c1 a014 	str.w	sl, [r1, #20]
  gpiop->AFRL    = config->afrl;
 80079e8:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
 80079ea:	624b      	str	r3, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80079ec:	600b      	str	r3, [r1, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80079ee:	4b44      	ldr	r3, [pc, #272]	; (8007b00 <__early_init+0x280>)
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80079f0:	f04f 5e80 	mov.w	lr, #268435456	; 0x10000000
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80079f4:	f44f 4740 	mov.w	r7, #49152	; 0xc000
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80079f8:	f8c2 e040 	str.w	lr, [r2, #64]	; 0x40
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80079fc:	601f      	str	r7, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80079fe:	6813      	ldr	r3, [r2, #0]
 8007a00:	f043 0301 	orr.w	r3, r3, #1
 8007a04:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8007a06:	6811      	ldr	r1, [r2, #0]
 8007a08:	4b36      	ldr	r3, [pc, #216]	; (8007ae4 <__early_init+0x264>)
 8007a0a:	078f      	lsls	r7, r1, #30
 8007a0c:	d5fb      	bpl.n	8007a06 <__early_init+0x186>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8007a0e:	689a      	ldr	r2, [r3, #8]
 8007a10:	f022 0203 	bic.w	r2, r2, #3
 8007a14:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8007a16:	4619      	mov	r1, r3
 8007a18:	688b      	ldr	r3, [r1, #8]
 8007a1a:	4a32      	ldr	r2, [pc, #200]	; (8007ae4 <__early_init+0x264>)
 8007a1c:	f013 030c 	ands.w	r3, r3, #12
 8007a20:	d1fa      	bne.n	8007a18 <__early_init+0x198>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8007a22:	6811      	ldr	r1, [r2, #0]
 8007a24:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8007a28:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8007a2a:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8007a2c:	6813      	ldr	r3, [r2, #0]
 8007a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a32:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8007a34:	6811      	ldr	r1, [r2, #0]
 8007a36:	4b2b      	ldr	r3, [pc, #172]	; (8007ae4 <__early_init+0x264>)
 8007a38:	038e      	lsls	r6, r1, #14
 8007a3a:	d5fb      	bpl.n	8007a34 <__early_init+0x1b4>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8007a3c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007a3e:	f042 0201 	orr.w	r2, r2, #1
 8007a42:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8007a44:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007a46:	4927      	ldr	r1, [pc, #156]	; (8007ae4 <__early_init+0x264>)
 8007a48:	0795      	lsls	r5, r2, #30
 8007a4a:	d5fb      	bpl.n	8007a44 <__early_init+0x1c4>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8007a4c:	4b2d      	ldr	r3, [pc, #180]	; (8007b04 <__early_init+0x284>)
 8007a4e:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8007a50:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8007a52:	4a2b      	ldr	r2, [pc, #172]	; (8007b00 <__early_init+0x280>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8007a54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a58:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8007a5a:	6853      	ldr	r3, [r2, #4]
 8007a5c:	045c      	lsls	r4, r3, #17
 8007a5e:	d5fc      	bpl.n	8007a5a <__early_init+0x1da>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8007a60:	4920      	ldr	r1, [pc, #128]	; (8007ae4 <__early_init+0x264>)
 8007a62:	680a      	ldr	r2, [r1, #0]
 8007a64:	4b1f      	ldr	r3, [pc, #124]	; (8007ae4 <__early_init+0x264>)
 8007a66:	0190      	lsls	r0, r2, #6
 8007a68:	d5fb      	bpl.n	8007a62 <__early_init+0x1e2>
    ;
#endif /* STM32_ACTIVATE_PLL */

#if STM32_ACTIVATE_PLLI2S
  /* PLLI2S activation.*/
  RCC->PLLI2SCFGR = STM32_PLLI2SR | STM32_PLLI2SN | STM32_PLLI2SP |
 8007a6a:	4a27      	ldr	r2, [pc, #156]	; (8007b08 <__early_init+0x288>)
 8007a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    STM32_PLLI2SSRC | STM32_PLLI2SQ | STM32_PLLI2SM;
  RCC->CR |= RCC_CR_PLLI2SON;
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007a76:	601a      	str	r2, [r3, #0]

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	491a      	ldr	r1, [pc, #104]	; (8007ae4 <__early_init+0x264>)
 8007a7c:	0112      	lsls	r2, r2, #4
 8007a7e:	d5fb      	bpl.n	8007a78 <__early_init+0x1f8>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8007a80:	4a22      	ldr	r2, [pc, #136]	; (8007b0c <__early_init+0x28c>)

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8007a82:	4b23      	ldr	r3, [pc, #140]	; (8007b10 <__early_init+0x290>)
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8007a84:	608a      	str	r2, [r1, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	4b22      	ldr	r3, [pc, #136]	; (8007b14 <__early_init+0x294>)
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d01f      	beq.n	8007ace <__early_init+0x24e>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8007a8e:	4b22      	ldr	r3, [pc, #136]	; (8007b18 <__early_init+0x298>)
 8007a90:	f240 7205 	movw	r2, #1797	; 0x705
 8007a94:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8007a96:	4a20      	ldr	r2, [pc, #128]	; (8007b18 <__early_init+0x298>)
 8007a98:	6813      	ldr	r3, [r2, #0]
 8007a9a:	f003 030f 	and.w	r3, r3, #15
 8007a9e:	2b05      	cmp	r3, #5
 8007aa0:	d1fa      	bne.n	8007a98 <__early_init+0x218>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8007aa2:	4910      	ldr	r1, [pc, #64]	; (8007ae4 <__early_init+0x264>)
 8007aa4:	688b      	ldr	r3, [r1, #8]
 8007aa6:	f043 0302 	orr.w	r3, r3, #2
 8007aaa:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8007aac:	688b      	ldr	r3, [r1, #8]
 8007aae:	4a0d      	ldr	r2, [pc, #52]	; (8007ae4 <__early_init+0x264>)
 8007ab0:	f003 030c 	and.w	r3, r3, #12
 8007ab4:	2b08      	cmp	r3, #8
 8007ab6:	d1f9      	bne.n	8007aac <__early_init+0x22c>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8007ab8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8007aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007abe:	6453      	str	r3, [r2, #68]	; 0x44
 8007ac0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8007ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ac6:	6653      	str	r3, [r2, #100]	; 0x64
 8007ac8:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8007aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8007ace:	4a13      	ldr	r2, [pc, #76]	; (8007b1c <__early_init+0x29c>)
 8007ad0:	4b13      	ldr	r3, [pc, #76]	; (8007b20 <__early_init+0x2a0>)
 8007ad2:	6812      	ldr	r2, [r2, #0]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d1da      	bne.n	8007a8e <__early_init+0x20e>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8007ad8:	4b0f      	ldr	r3, [pc, #60]	; (8007b18 <__early_init+0x298>)
 8007ada:	f240 1205 	movw	r2, #261	; 0x105
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	e7d9      	b.n	8007a96 <__early_init+0x216>
 8007ae2:	bf00      	nop
 8007ae4:	40023800 	.word	0x40023800
 8007ae8:	40021c00 	.word	0x40021c00
 8007aec:	40020c00 	.word	0x40020c00
 8007af0:	40021000 	.word	0x40021000
 8007af4:	40021400 	.word	0x40021400
 8007af8:	40021800 	.word	0x40021800
 8007afc:	40022000 	.word	0x40022000
 8007b00:	40007000 	.word	0x40007000
 8007b04:	07405408 	.word	0x07405408
 8007b08:	54413004 	.word	0x54413004
 8007b0c:	38089400 	.word	0x38089400
 8007b10:	e0042000 	.word	0xe0042000
 8007b14:	20006411 	.word	0x20006411
 8007b18:	40023c00 	.word	0x40023c00
 8007b1c:	e000ed00 	.word	0xe000ed00
 8007b20:	410fc241 	.word	0x410fc241
 8007b24:	40020400 	.word	0x40020400
 8007b28:	40020000 	.word	0x40020000
 8007b2c:	40010054 	.word	0x40010054
 8007b30:	55560000 	.word	0x55560000
 8007b34:	40020800 	.word	0x40020800
 8007b38:	000aaa00 	.word	0x000aaa00
 8007b3c:	2aa0aa00 	.word	0x2aa0aa00
 8007b40:	55514515 	.word	0x55514515
 8007b44:	00082080 	.word	0x00082080
 8007b48:	00060600 	.word	0x00060600
 8007b4c:	02208001 	.word	0x02208001
 8007b50:	00555055 	.word	0x00555055
 8007b54:	55000100 	.word	0x55000100
	...

08007b60 <VectorB0>:
/**
 * @brief   Interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8007b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8007b64:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {

  OSAL_IRQ_PROLOGUE();
 8007b68:	483c      	ldr	r0, [pc, #240]	; (8007c5c <VectorB0+0xfc>)
 8007b6a:	f7ff fd41 	bl	80075f0 <_trace_isr_enter>
 8007b6e:	f7ff fde7 	bl	8007740 <_dbg_check_enter_isr>
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8007b72:	f8d8 3010 	ldr.w	r3, [r8, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8007b76:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8007b7e:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8007b80:	079b      	lsls	r3, r3, #30
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
  timp->SR = ~sr;
 8007b82:	f8c8 2010 	str.w	r2, [r8, #16]

  if ((sr & TIM_SR_CC1IF) != 0U)
 8007b86:	d408      	bmi.n	8007b9a <VectorB0+0x3a>

  OSAL_IRQ_PROLOGUE();

  st_lld_serve_interrupt();

  OSAL_IRQ_EPILOGUE();
 8007b88:	f7ff fdc2 	bl	8007710 <_dbg_check_leave_isr>
 8007b8c:	4833      	ldr	r0, [pc, #204]	; (8007c5c <VectorB0+0xfc>)
 8007b8e:	f7ff fd0f 	bl	80075b0 <_trace_isr_leave>
}
 8007b92:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  OSAL_IRQ_PROLOGUE();

  st_lld_serve_interrupt();

  OSAL_IRQ_EPILOGUE();
 8007b96:	f7ff b8ab 	b.w	8006cf0 <_port_irq_epilogue>
 8007b9a:	2320      	movs	r3, #32
 8007b9c:	f383 8811 	msr	BASEPRI, r3
  delta_list_t *dlp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  dlp = vtlp->dlist.next;
 8007ba0:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8007c60 <VectorB0+0x100>
 8007ba4:	46ca      	mov	sl, r9
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8007ba6:	f7ff fdfb 	bl	80077a0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {

  chDbgCheckClassI();
 8007baa:	f7ff fda1 	bl	80076f0 <chDbgCheckClassI>
 * @iclass
 */
void chVTDoTickI(void) {
  virtual_timers_list_t *vtlp = &ch.vtlist;

  chDbgCheckClassI();
 8007bae:	f7ff fd9f 	bl	80076f0 <chDbgCheckClassI>
  delta_list_t *dlp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  dlp = vtlp->dlist.next;
 8007bb2:	f85a 4f1c 	ldr.w	r4, [sl, #28]!
 8007bb6:	68a2      	ldr	r2, [r4, #8]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8007bb8:	464f      	mov	r7, r9
 8007bba:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
 8007bbe:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8007bc2:	4827      	ldr	r0, [pc, #156]	; (8007c60 <VectorB0+0x100>)
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8007bc4:	1acd      	subs	r5, r1, r3

    /* The list scan is limited by the timers header having
       "vtlp->dlist.delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < dlp->delta) {
 8007bc6:	4295      	cmp	r5, r2
 8007bc8:	d323      	bcc.n	8007c12 <VectorB0+0xb2>
      vtlp->dlist.next = dlp->next;

      /* Calling the associated function and then marking the timer as
         non active.*/
      fn = vtp->func;
      vtp->func = NULL;
 8007bca:	2600      	movs	r6, #0
    do {
      vtfunc_t fn;
      virtual_timer_t *vtp = (virtual_timer_t *)dlp;

      /* The "last time" becomes this timer's expiration time.*/
      vtlp->lasttime += dlp->delta;
 8007bcc:	4413      	add	r3, r2
 8007bce:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
      nowdelta -= dlp->delta;

      /* Removing the timer from the list.*/
      dlp->next->prev = &vtlp->dlist;
 8007bd2:	6823      	ldr	r3, [r4, #0]
      vtfunc_t fn;
      virtual_timer_t *vtp = (virtual_timer_t *)dlp;

      /* The "last time" becomes this timer's expiration time.*/
      vtlp->lasttime += dlp->delta;
      nowdelta -= dlp->delta;
 8007bd4:	68a2      	ldr	r2, [r4, #8]
      dlp->next->prev = &vtlp->dlist;
      vtlp->dlist.next = dlp->next;

      /* Calling the associated function and then marking the timer as
         non active.*/
      fn = vtp->func;
 8007bd6:	f8d4 b00c 	ldr.w	fp, [r4, #12]
      /* The "last time" becomes this timer's expiration time.*/
      vtlp->lasttime += dlp->delta;
      nowdelta -= dlp->delta;

      /* Removing the timer from the list.*/
      dlp->next->prev = &vtlp->dlist;
 8007bda:	f8c3 a004 	str.w	sl, [r3, #4]
         non active.*/
      fn = vtp->func;
      vtp->func = NULL;

      /* If the list becomes empty then the timer is stopped.*/
      if (is_vtlist_empty(&vtlp->dlist)) {
 8007bde:	4553      	cmp	r3, sl
      vtlp->lasttime += dlp->delta;
      nowdelta -= dlp->delta;

      /* Removing the timer from the list.*/
      dlp->next->prev = &vtlp->dlist;
      vtlp->dlist.next = dlp->next;
 8007be0:	f8c9 301c 	str.w	r3, [r9, #28]

      /* Calling the associated function and then marking the timer as
         non active.*/
      fn = vtp->func;
      vtp->func = NULL;
 8007be4:	60e6      	str	r6, [r4, #12]
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER = 0U;
 8007be6:	bf08      	it	eq
 8007be8:	f8c8 600c 	streq.w	r6, [r8, #12]
      vtfunc_t fn;
      virtual_timer_t *vtp = (virtual_timer_t *)dlp;

      /* The "last time" becomes this timer's expiration time.*/
      vtlp->lasttime += dlp->delta;
      nowdelta -= dlp->delta;
 8007bec:	1aad      	subs	r5, r5, r2
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8007bee:	f7ff fdbf 	bl	8007770 <_dbg_check_unlock_from_isr>
 8007bf2:	f386 8811 	msr	BASEPRI, r6
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8007bf6:	6920      	ldr	r0, [r4, #16]
 8007bf8:	47d8      	blx	fp
 8007bfa:	2320      	movs	r3, #32
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8007c00:	f7ff fdce 	bl	80077a0 <_dbg_check_lock_from_isr>
      chSysLockFromISR();

      /* Next element in the list.*/
      dlp = vtlp->dlist.next;
 8007c04:	f8d9 401c 	ldr.w	r4, [r9, #28]
    }
    while (dlp->delta <= nowdelta);
 8007c08:	68a2      	ldr	r2, [r4, #8]
 8007c0a:	4295      	cmp	r5, r2
 8007c0c:	d3d5      	bcc.n	8007bba <VectorB0+0x5a>
 8007c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c10:	e7dc      	b.n	8007bcc <VectorB0+0x6c>
 *
 * @notapi
 */
static inline bool is_vtlist_empty(delta_list_t *dlhp) {

  return (bool)(dlhp == dlhp->next);
 8007c12:	69c2      	ldr	r2, [r0, #28]
    }
    while (dlp->delta <= nowdelta);
  }

  /* If the list is empty, nothing else to do.*/
  if (is_vtlist_empty(&vtlp->dlist)) {
 8007c14:	4552      	cmp	r2, sl
 8007c16:	d018      	beq.n	8007c4a <VectorB0+0xea>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
 8007c18:	442b      	add	r3, r5
 8007c1a:	6283      	str	r3, [r0, #40]	; 0x28
  vtlp->dlist.next->delta -= nowdelta;
 8007c1c:	6893      	ldr	r3, [r2, #8]
 8007c1e:	1b5b      	subs	r3, r3, r5
 8007c20:	6093      	str	r3, [r2, #8]
 8007c22:	6a82      	ldr	r2, [r0, #40]	; 0x28

  /* Recalculating the next alarm time.*/
  delta = dlp->delta - chTimeDiffX(vtlp->lasttime, now);
 8007c24:	68a3      	ldr	r3, [r4, #8]
 8007c26:	1a8c      	subs	r4, r1, r2
 8007c28:	1b1c      	subs	r4, r3, r4
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8007c2a:	2c01      	cmp	r4, #1
 8007c2c:	bf98      	it	ls
 8007c2e:	2402      	movls	r4, #2

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
#endif

  return systime + (systime_t)interval;
 8007c30:	440c      	add	r4, r1
 8007c32:	4620      	mov	r0, r4
 8007c34:	f7fa f94c 	bl	8001ed0 <stSetAlarm>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8007c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));

  chDbgAssert(chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX()) <=
 8007c3c:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8007c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8007c42:	1aa1      	subs	r1, r4, r2
 8007c44:	1a9b      	subs	r3, r3, r2
 8007c46:	428b      	cmp	r3, r1
 8007c48:	d805      	bhi.n	8007c56 <VectorB0+0xf6>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8007c4a:	f7ff fd91 	bl	8007770 <_dbg_check_unlock_from_isr>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	e798      	b.n	8007b88 <VectorB0+0x28>
 8007c56:	4803      	ldr	r0, [pc, #12]	; (8007c64 <VectorB0+0x104>)
 8007c58:	f7ff fd1a 	bl	8007690 <chSysHalt>
 8007c5c:	0800d0dc 	.word	0x0800d0dc
 8007c60:	2000b288 	.word	0x2000b288
 8007c64:	0800d0c4 	.word	0x0800d0c4
	...

08007c70 <usb_lld_start_in>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8007c70:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8007c74:	b4f0      	push	{r4, r5, r6, r7}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8007c76:	68dc      	ldr	r4, [r3, #12]
 8007c78:	6965      	ldr	r5, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 8007c7a:	682b      	ldr	r3, [r5, #0]
 8007c7c:	60eb      	str	r3, [r5, #12]
  if (isp->txsize == 0) {
 8007c7e:	b9f3      	cbnz	r3, 8007cbe <usb_lld_start_in+0x4e>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8007c80:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8007c82:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8007c86:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007c8a:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	f003 0303 	and.w	r3, r3, #3
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d026      	beq.n	8007ce6 <usb_lld_start_in+0x76>
 8007c98:	b20b      	sxth	r3, r1
 8007c9a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8007c9e:	2401      	movs	r4, #1
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8007ca0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8007ca4:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8007ca8:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8007cac:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8007cb0:	fa04 f301 	lsl.w	r3, r4, r1
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 8007cba:	bcf0      	pop	{r4, r5, r6, r7}
 8007cbc:	4770      	bx	lr
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8007cbe:	b319      	cbz	r1, 8007d08 <usb_lld_start_in+0x98>
 8007cc0:	1e5d      	subs	r5, r3, #1
 8007cc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    /* CHTODO: Support more than one packet per frame for isochronous transfers.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8007cc6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8007cc8:	8a26      	ldrh	r6, [r4, #16]
                    usbp->epc[ep]->in_maxsize;
    /* CHTODO: Support more than one packet per frame for isochronous transfers.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8007cca:	eb00 1741 	add.w	r7, r0, r1, lsl #5
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8007cce:	19ab      	adds	r3, r5, r6
 8007cd0:	fbb3 f3f6 	udiv	r3, r3, r6
                    usbp->epc[ep]->in_maxsize;
    /* CHTODO: Support more than one packet per frame for isochronous transfers.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8007cd4:	ea42 43c3 	orr.w	r3, r2, r3, lsl #19
 8007cd8:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d1d8      	bne.n	8007c98 <usb_lld_start_in+0x28>
    /* Odd/even bit toggling.*/
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8007ce6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8007cea:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007cee:	b20b      	sxth	r3, r1
 8007cf0:	eb00 1443 	add.w	r4, r0, r3, lsl #5
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 8007cf4:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
 8007cf8:	bf14      	ite	ne
 8007cfa:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8007cfe:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 8007d02:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
 8007d06:	e7c8      	b.n	8007c9a <usb_lld_start_in+0x2a>
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8007d08:	2b40      	cmp	r3, #64	; 0x40
 8007d0a:	d9d9      	bls.n	8007cc0 <usb_lld_start_in+0x50>
      isp->txsize = EP0_MAX_INSIZE;
 8007d0c:	2340      	movs	r3, #64	; 0x40
 8007d0e:	602b      	str	r3, [r5, #0]
 8007d10:	4a01      	ldr	r2, [pc, #4]	; (8007d18 <usb_lld_start_in+0xa8>)
 8007d12:	253f      	movs	r5, #63	; 0x3f
 8007d14:	e7d7      	b.n	8007cc6 <usb_lld_start_in+0x56>
 8007d16:	bf00      	nop
 8007d18:	20000040 	.word	0x20000040
 8007d1c:	00000000 	.word	0x00000000

08007d20 <usb_lld_start_out>:
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
  uint32_t pcnt, rxsize;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8007d20:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8007d24:	b430      	push	{r4, r5}
  uint32_t pcnt, rxsize;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8007d26:	68dc      	ldr	r4, [r3, #12]
 8007d28:	69a2      	ldr	r2, [r4, #24]

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
 8007d2a:	6813      	ldr	r3, [r2, #0]
 8007d2c:	60d3      	str	r3, [r2, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 8007d2e:	b909      	cbnz	r1, 8007d34 <usb_lld_start_out+0x14>
 8007d30:	2b40      	cmp	r3, #64	; 0x40
 8007d32:	d822      	bhi.n	8007d7a <usb_lld_start_out+0x5a>
 8007d34:	3b01      	subs	r3, #1
  /* Transaction size is rounded to a multiple of packet size because the
     following requirement in the RM:
     "For OUT transfers, the transfer size field in the endpoint's transfer
     size register must be a multiple of the maximum packet size of the
     endpoint, adjusted to the Word boundary".*/
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8007d36:	8a62      	ldrh	r2, [r4, #18]
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8007d38:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8007d3a:	6824      	ldr	r4, [r4, #0]
  /* Transaction size is rounded to a multiple of packet size because the
     following requirement in the RM:
     "For OUT transfers, the transfer size field in the endpoint's transfer
     size register must be a multiple of the maximum packet size of the
     endpoint, adjusted to the Word boundary".*/
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8007d3c:	4413      	add	r3, r2
 8007d3e:	fbb3 f3f2 	udiv	r3, r3, r2
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 8007d42:	fb02 f203 	mul.w	r2, r2, r3
 8007d46:	3203      	adds	r2, #3

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8007d48:	04db      	lsls	r3, r3, #19
     "For OUT transfers, the transfer size field in the endpoint's transfer
     size register must be a multiple of the maximum packet size of the
     endpoint, adjusted to the Word boundary".*/
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 8007d4a:	f022 0203 	bic.w	r2, r2, #3
 8007d4e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8007d52:	4313      	orrs	r3, r2
 8007d54:	eb00 1541 	add.w	r5, r0, r1, lsl #5
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8007d58:	f004 0203 	and.w	r2, r4, #3
 8007d5c:	2a01      	cmp	r2, #1
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8007d5e:	f8c5 3b10 	str.w	r3, [r5, #2832]	; 0xb10
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8007d62:	d00e      	beq.n	8007d82 <usb_lld_start_out+0x62>
 8007d64:	b209      	sxth	r1, r1
 8007d66:	eb00 1141 	add.w	r1, r0, r1, lsl #5
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
}
 8007d6a:	bc30      	pop	{r4, r5}
    else
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8007d6c:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8007d70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d74:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 8007d78:	4770      	bx	lr
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
      osp->rxsize = EP0_MAX_OUTSIZE;
 8007d7a:	2340      	movs	r3, #64	; 0x40
 8007d7c:	6013      	str	r3, [r2, #0]
 8007d7e:	233f      	movs	r3, #63	; 0x3f
 8007d80:	e7d9      	b.n	8007d36 <usb_lld_start_out+0x16>
 8007d82:	b209      	sxth	r1, r1
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
    /* Odd/even bit toggling for isochronous endpoint.*/
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8007d84:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8007d88:	eb00 1241 	add.w	r2, r0, r1, lsl #5
 8007d8c:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 8007d90:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8007d94:	bf14      	ite	ne
 8007d96:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
    else
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 8007d9a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8007d9e:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8007da2:	e7e0      	b.n	8007d66 <usb_lld_start_out+0x46>
	...

08007db0 <Vector174>:
/**
 * @brief   OTG2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG2_HANDLER) {
 8007db0:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8007db2:	4c09      	ldr	r4, [pc, #36]	; (8007dd8 <Vector174+0x28>)
 8007db4:	4620      	mov	r0, r4
 8007db6:	f7ff fc1b 	bl	80075f0 <_trace_isr_enter>
 8007dba:	f7ff fcc1 	bl	8007740 <_dbg_check_enter_isr>

  usb_lld_serve_interrupt(&USBD2);
 8007dbe:	4807      	ldr	r0, [pc, #28]	; (8007ddc <Vector174+0x2c>)
 8007dc0:	f7fb fa8e 	bl	80032e0 <usb_lld_serve_interrupt.lto_priv.113>

  OSAL_IRQ_EPILOGUE();
 8007dc4:	f7ff fca4 	bl	8007710 <_dbg_check_leave_isr>
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f7ff fbf1 	bl	80075b0 <_trace_isr_leave>
}
 8007dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD2);

  OSAL_IRQ_EPILOGUE();
 8007dd2:	f7fe bf8d 	b.w	8006cf0 <_port_irq_epilogue>
 8007dd6:	bf00      	nop
 8007dd8:	0800d0d0 	.word	0x0800d0d0
 8007ddc:	2000a03c 	.word	0x2000a03c

08007de0 <Vector14C>:
/**
 * @brief   OTG1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8007de0:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8007de2:	4c09      	ldr	r4, [pc, #36]	; (8007e08 <Vector14C+0x28>)
 8007de4:	4620      	mov	r0, r4
 8007de6:	f7ff fc03 	bl	80075f0 <_trace_isr_enter>
 8007dea:	f7ff fca9 	bl	8007740 <_dbg_check_enter_isr>

  usb_lld_serve_interrupt(&USBD1);
 8007dee:	4807      	ldr	r0, [pc, #28]	; (8007e0c <Vector14C+0x2c>)
 8007df0:	f7fb fa76 	bl	80032e0 <usb_lld_serve_interrupt.lto_priv.113>

  OSAL_IRQ_EPILOGUE();
 8007df4:	f7ff fc8c 	bl	8007710 <_dbg_check_leave_isr>
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f7ff fbd9 	bl	80075b0 <_trace_isr_leave>
}
 8007dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 8007e02:	f7fe bf75 	b.w	8006cf0 <_port_irq_epilogue>
 8007e06:	bf00      	nop
 8007e08:	0800d078 	.word	0x0800d078
 8007e0c:	20009fc4 	.word	0x20009fc4

08007e10 <long_to_string_with_divisor.constprop.36>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8007e10:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8007e12:	f100 070b 	add.w	r7, r0, #11
 8007e16:	463c      	mov	r4, r7
 8007e18:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 8007e1a:	fbb1 f6f2 	udiv	r6, r1, r2
 8007e1e:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8007e22:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9') {
 8007e26:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8007e28:	bfc8      	it	gt
 8007e2a:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    }
    *--q = i;
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
  } while ((ll /= radix) != 0);
 8007e34:	fbb5 f5f2 	udiv	r5, r5, r2
    i += '0';
    if (i > '9') {
      i += 'A' - '0' - 10;
    }
    *--q = i;
    l /= radix;
 8007e38:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 8007e3a:	2d00      	cmp	r5, #0
 8007e3c:	d1ed      	bne.n	8007e1a <long_to_string_with_divisor.constprop.36+0xa>

  i = (int)(p + MAX_FILLER - q);
 8007e3e:	1b3a      	subs	r2, r7, r4
 8007e40:	4402      	add	r2, r0
 8007e42:	e001      	b.n	8007e48 <long_to_string_with_divisor.constprop.36+0x38>
 8007e44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  do
    *p++ = *q++;
 8007e48:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8007e4c:	4290      	cmp	r0, r2
 8007e4e:	d1f9      	bne.n	8007e44 <long_to_string_with_divisor.constprop.36+0x34>

  return p;
}
 8007e50:	bcf0      	pop	{r4, r5, r6, r7}
 8007e52:	4770      	bx	lr
	...

08007e60 <chThdDequeueAllI.constprop.56>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8007e60:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool ch_queue_notempty(const ch_queue_t *qp) {

  return (bool)(qp->next != qp);
 8007e62:	6803      	ldr	r3, [r0, #0]

  while (ch_queue_notempty(&tqp->queue)) {
 8007e64:	4298      	cmp	r0, r3
 8007e66:	d00a      	beq.n	8007e7e <chThdDequeueAllI.constprop.56+0x1e>
 * @notapi
 */
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
  ch_queue_t *p = qp->next;

  qp->next       = p->next;
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	6002      	str	r2, [r0, #0]
  qp->next->prev = qp;
 8007e6c:	6050      	str	r0, [r2, #4]

  chDbgAssert(ch_queue_notempty(&tqp->queue), "empty queue");

  tp = (thread_t *)ch_queue_fifo_remove(&tqp->queue);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8007e6e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8007e72:	2a04      	cmp	r2, #4
 8007e74:	4604      	mov	r4, r0
 8007e76:	d003      	beq.n	8007e80 <chThdDequeueAllI.constprop.56+0x20>
 8007e78:	480a      	ldr	r0, [pc, #40]	; (8007ea4 <chThdDequeueAllI.constprop.56+0x44>)
 8007e7a:	f7ff fc09 	bl	8007690 <chSysHalt>
 8007e7e:	bd38      	pop	{r3, r4, r5, pc}

  tp->u.rdymsg = msg;
 8007e80:	f06f 0501 	mvn.w	r5, #1
 8007e84:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7ff f83a 	bl	8006f00 <chSchReadyI>
 *
 * @notapi
 */
static inline bool ch_queue_notempty(const ch_queue_t *qp) {

  return (bool)(qp->next != qp);
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	42a3      	cmp	r3, r4
 8007e90:	d0f5      	beq.n	8007e7e <chThdDequeueAllI.constprop.56+0x1e>
 * @notapi
 */
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
  ch_queue_t *p = qp->next;

  qp->next       = p->next;
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	6022      	str	r2, [r4, #0]
  qp->next->prev = qp;
 8007e96:	6054      	str	r4, [r2, #4]

  chDbgAssert(ch_queue_notempty(&tqp->queue), "empty queue");

  tp = (thread_t *)ch_queue_fifo_remove(&tqp->queue);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8007e98:	f893 2020 	ldrb.w	r2, [r3, #32]
 8007e9c:	2a04      	cmp	r2, #4
 8007e9e:	d1eb      	bne.n	8007e78 <chThdDequeueAllI.constprop.56+0x18>
 8007ea0:	e7f0      	b.n	8007e84 <chThdDequeueAllI.constprop.56+0x24>
 8007ea2:	bf00      	nop
 8007ea4:	0800d124 	.word	0x0800d124
	...

08007eb0 <chThdDequeueNextI.constprop.54>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8007eb0:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool ch_queue_notempty(const ch_queue_t *qp) {

  return (bool)(qp->next != qp);
 8007eb2:	6803      	ldr	r3, [r0, #0]

  if (ch_queue_notempty(&tqp->queue)) {
 8007eb4:	4298      	cmp	r0, r3
 8007eb6:	d009      	beq.n	8007ecc <chThdDequeueNextI.constprop.54+0x1c>
 * @notapi
 */
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
  ch_queue_t *p = qp->next;

  qp->next       = p->next;
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	6002      	str	r2, [r0, #0]
  qp->next->prev = qp;
 8007ebc:	6050      	str	r0, [r2, #4]
 8007ebe:	f893 2020 	ldrb.w	r2, [r3, #32]
 8007ec2:	2a04      	cmp	r2, #4
 8007ec4:	d003      	beq.n	8007ece <chThdDequeueNextI.constprop.54+0x1e>
 8007ec6:	4805      	ldr	r0, [pc, #20]	; (8007edc <chThdDequeueNextI.constprop.54+0x2c>)
 8007ec8:	f7ff fbe2 	bl	8007690 <chSysHalt>
 8007ecc:	bd08      	pop	{r3, pc}

  tp->u.rdymsg = msg;
 8007ece:	2200      	movs	r2, #0
 8007ed0:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8007ed2:	4618      	mov	r0, r3
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8007ed4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007ed8:	f7ff b812 	b.w	8006f00 <chSchReadyI>
 8007edc:	0800d124 	.word	0x0800d124

08007ee0 <dac_lld_put_channel.constprop.50>:
 * @param[in] channel   DAC channel number
 * @param[in] sample    value to be output
 *
 * @api
 */
void dac_lld_put_channel(DACDriver *dacp,
 8007ee0:	b508      	push	{r3, lr}
                         dacchannel_t channel,
                         dacsample_t sample) {

  switch (dacp->config->datamode) {
 8007ee2:	6903      	ldr	r3, [r0, #16]
 8007ee4:	789b      	ldrb	r3, [r3, #2]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d00c      	beq.n	8007f04 <dac_lld_put_channel.constprop.50+0x24>
 8007eea:	d312      	bcc.n	8007f12 <dac_lld_put_channel.constprop.50+0x32>
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d106      	bne.n	8007efe <dac_lld_put_channel.constprop.50+0x1e>
#endif
    if (channel == 0U) {
#if STM32_DAC_DUAL_MODE
      dacp->params->dac->DHR8R1 = (uint32_t)sample;
#else
      *(&dacp->params->dac->DHR8R1 + dacp->params->dataoffset) = (uint32_t)sample;
 8007ef0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007ef2:	6813      	ldr	r3, [r2, #0]
 8007ef4:	6852      	ldr	r2, [r2, #4]
 8007ef6:	3310      	adds	r3, #16
 8007ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007efc:	bd08      	pop	{r3, pc}
      dacp->params->dac->DHR8R2 = (uint32_t)sample;
    }
#endif
    break;
  default:
    osalDbgAssert(false, "unexpected DAC mode");
 8007efe:	4808      	ldr	r0, [pc, #32]	; (8007f20 <dac_lld_put_channel.constprop.50+0x40>)
 8007f00:	f7ff fbc6 	bl	8007690 <chSysHalt>
#endif
    if (channel == 0U) {
#if STM32_DAC_DUAL_MODE
      dacp->params->dac->DHR12L1 = (uint32_t)sample;
#else
      *(&dacp->params->dac->DHR12L1 + dacp->params->dataoffset) = (uint32_t)sample;
 8007f04:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007f06:	6813      	ldr	r3, [r2, #0]
 8007f08:	6852      	ldr	r2, [r2, #4]
 8007f0a:	330c      	adds	r3, #12
 8007f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007f10:	bd08      	pop	{r3, pc}
#endif
    if (channel == 0U) {
#if STM32_DAC_DUAL_MODE
      dacp->params->dac->DHR12R1 = (uint32_t)sample;
#else
      *(&dacp->params->dac->DHR12R1 + dacp->params->dataoffset) = (uint32_t)sample;
 8007f12:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007f14:	6813      	ldr	r3, [r2, #0]
 8007f16:	6852      	ldr	r2, [r2, #4]
 8007f18:	3308      	adds	r3, #8
 8007f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007f1e:	bd08      	pop	{r3, pc}
 8007f20:	0800d0e8 	.word	0x0800d0e8
	...

08007f30 <chprintf.constprop.34>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8007f30:	b40e      	push	{r1, r2, r3}
 8007f32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	ab0f      	add	r3, sp, #60	; 0x3c
 8007f3a:	aa03      	add	r2, sp, #12
 8007f3c:	f853 6b04 	ldr.w	r6, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8007f40:	9302      	str	r3, [sp, #8]
 8007f42:	4699      	mov	r9, r3
 8007f44:	f10d 030d 	add.w	r3, sp, #13
 8007f48:	1a9b      	subs	r3, r3, r2
 8007f4a:	9301      	str	r3, [sp, #4]
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8007f4c:	f04f 0800 	mov.w	r8, #0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8007f50:	7831      	ldrb	r1, [r6, #0]
 8007f52:	1c72      	adds	r2, r6, #1
    if (c == 0) {
 8007f54:	b179      	cbz	r1, 8007f76 <chprintf.constprop.34+0x46>
      return n;
    }
    
    if (c != '%') {
 8007f56:	2925      	cmp	r1, #37	; 0x25
 8007f58:	d013      	beq.n	8007f82 <chprintf.constprop.34+0x52>
      streamPut(chp, (uint8_t)c);
 8007f5a:	f8df b37c 	ldr.w	fp, [pc, #892]	; 80082d8 <chprintf.constprop.34+0x3a8>
 8007f5e:	f8db 0000 	ldr.w	r0, [fp]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8007f62:	4616      	mov	r6, r2
    if (c == 0) {
      return n;
    }
    
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8007f64:	68c4      	ldr	r4, [r0, #12]
 8007f66:	4658      	mov	r0, fp
 8007f68:	47a0      	blx	r4
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8007f6a:	7831      	ldrb	r1, [r6, #0]
      return n;
    }
    
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
 8007f6c:	f108 0801 	add.w	r8, r8, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8007f70:	1c72      	adds	r2, r6, #1
    if (c == 0) {
 8007f72:	2900      	cmp	r1, #0
 8007f74:	d1ef      	bne.n	8007f56 <chprintf.constprop.34+0x26>
  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8007f76:	4640      	mov	r0, r8
 8007f78:	b006      	add	sp, #24
 8007f7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7e:	b003      	add	sp, #12
 8007f80:	4770      	bx	lr
    p = tmpbuf;
    s = tmpbuf;

    /* Alignment mode.*/
    left_align = false;
    if (*fmt == '-') {
 8007f82:	7871      	ldrb	r1, [r6, #1]
 8007f84:	292d      	cmp	r1, #45	; 0x2d
 8007f86:	bf03      	ittte	eq
 8007f88:	78b1      	ldrbeq	r1, [r6, #2]
      fmt++;
 8007f8a:	1cb2      	addeq	r2, r6, #2
      left_align = true;
 8007f8c:	f04f 0a01 	moveq.w	sl, #1
    
    p = tmpbuf;
    s = tmpbuf;

    /* Alignment mode.*/
    left_align = false;
 8007f90:	f04f 0a00 	movne.w	sl, #0
      left_align = true;
    }

    /* Sign mode.*/
    do_sign = false;
    if (*fmt == '+') {
 8007f94:	292b      	cmp	r1, #43	; 0x2b
 8007f96:	bf03      	ittte	eq
 8007f98:	7851      	ldrbeq	r1, [r2, #1]
      fmt++;
      do_sign = true;
 8007f9a:	2001      	moveq	r0, #1
    }

    /* Sign mode.*/
    do_sign = false;
    if (*fmt == '+') {
      fmt++;
 8007f9c:	1812      	addeq	r2, r2, r0
      fmt++;
      left_align = true;
    }

    /* Sign mode.*/
    do_sign = false;
 8007f9e:	2000      	movne	r0, #0
      do_sign = true;
    }

    /* Filler mode.*/
    filler = ' ';
    if (*fmt == '0') {
 8007fa0:	2930      	cmp	r1, #48	; 0x30
      fmt++;
      filler = '0';
 8007fa2:	bf05      	ittet	eq
 8007fa4:	460d      	moveq	r5, r1
 8007fa6:	7851      	ldrbeq	r1, [r2, #1]
      fmt++;
      do_sign = true;
    }

    /* Filler mode.*/
    filler = ' ';
 8007fa8:	2520      	movne	r5, #32
    if (*fmt == '0') {
      fmt++;
 8007faa:	3201      	addeq	r2, #1
      filler = '0';
    }
    
    /* Width modifier.*/
    if ( *fmt == '*') {
 8007fac:	292a      	cmp	r1, #42	; 0x2a
 8007fae:	d018      	beq.n	8007fe2 <chprintf.constprop.34+0xb2>
      c = *fmt++;
    }
    else {
      width = 0;
      while (true) {
        c = *fmt++;
 8007fb0:	1c56      	adds	r6, r2, #1
        if (c == 0) {
 8007fb2:	2900      	cmp	r1, #0
 8007fb4:	d0df      	beq.n	8007f76 <chprintf.constprop.34+0x46>
          return n;
        }
        if (c >= '0' && c <= '9') {
 8007fb6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b09      	cmp	r3, #9
 8007fbe:	f04f 0400 	mov.w	r4, #0
 8007fc2:	d902      	bls.n	8007fca <chprintf.constprop.34+0x9a>
 8007fc4:	e013      	b.n	8007fee <chprintf.constprop.34+0xbe>
 8007fc6:	2b09      	cmp	r3, #9
 8007fc8:	d811      	bhi.n	8007fee <chprintf.constprop.34+0xbe>
      c = *fmt++;
    }
    else {
      width = 0;
      while (true) {
        c = *fmt++;
 8007fca:	f816 1b01 	ldrb.w	r1, [r6], #1
        if (c == 0) {
          return n;
        }
        if (c >= '0' && c <= '9') {
          c -= '0';
          width = width * 10 + c;
 8007fce:	eb04 0484 	add.w	r4, r4, r4, lsl #2
      while (true) {
        c = *fmt++;
        if (c == 0) {
          return n;
        }
        if (c >= '0' && c <= '9') {
 8007fd2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
          c -= '0';
          width = width * 10 + c;
 8007fd6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
      while (true) {
        c = *fmt++;
        if (c == 0) {
          return n;
        }
        if (c >= '0' && c <= '9') {
 8007fda:	b2d3      	uxtb	r3, r2
    }
    else {
      width = 0;
      while (true) {
        c = *fmt++;
        if (c == 0) {
 8007fdc:	2900      	cmp	r1, #0
 8007fde:	d1f2      	bne.n	8007fc6 <chprintf.constprop.34+0x96>
 8007fe0:	e7c9      	b.n	8007f76 <chprintf.constprop.34+0x46>
    
    /* Width modifier.*/
    if ( *fmt == '*') {
      width = va_arg(ap, int);
      ++fmt;
      c = *fmt++;
 8007fe2:	7851      	ldrb	r1, [r2, #1]
      filler = '0';
    }
    
    /* Width modifier.*/
    if ( *fmt == '*') {
      width = va_arg(ap, int);
 8007fe4:	f8d9 4000 	ldr.w	r4, [r9]
      ++fmt;
      c = *fmt++;
 8007fe8:	1c96      	adds	r6, r2, #2
      filler = '0';
    }
    
    /* Width modifier.*/
    if ( *fmt == '*') {
      width = va_arg(ap, int);
 8007fea:	f109 0904 	add.w	r9, r9, #4
      }
    }
    
    /* Precision modifier.*/
    precision = 0;
    if (c == '.') {
 8007fee:	292e      	cmp	r1, #46	; 0x2e
 8007ff0:	f000 8082 	beq.w	80080f8 <chprintf.constprop.34+0x1c8>
        }
      }
    }
    
    /* Precision modifier.*/
    precision = 0;
 8007ff4:	2300      	movs	r3, #0
        }
      }
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8007ff6:	f001 02df 	and.w	r2, r1, #223	; 0xdf
 8007ffa:	2a4c      	cmp	r2, #76	; 0x4c
 8007ffc:	d03b      	beq.n	8008076 <chprintf.constprop.34+0x146>
    else {
      is_long = (c >= 'A') && (c <= 'Z');
    }

    /* Command decoding.*/
    switch (c) {
 8007ffe:	f1a1 0244 	sub.w	r2, r1, #68	; 0x44
 8008002:	2a34      	cmp	r2, #52	; 0x34
 8008004:	f200 813b 	bhi.w	800827e <chprintf.constprop.34+0x34e>
 8008008:	e8df f012 	tbh	[pc, r2, lsl #1]
 800800c:	0139011a 	.word	0x0139011a
 8008010:	01390139 	.word	0x01390139
 8008014:	011a0139 	.word	0x011a0139
 8008018:	01390139 	.word	0x01390139
 800801c:	01390139 	.word	0x01390139
 8008020:	01290139 	.word	0x01290139
 8008024:	0139008e 	.word	0x0139008e
 8008028:	01390139 	.word	0x01390139
 800802c:	00e30139 	.word	0x00e30139
 8008030:	01390139 	.word	0x01390139
 8008034:	0139008e 	.word	0x0139008e
 8008038:	01390139 	.word	0x01390139
 800803c:	01390139 	.word	0x01390139
 8008040:	01390139 	.word	0x01390139
 8008044:	01390139 	.word	0x01390139
 8008048:	00e50139 	.word	0x00e50139
 800804c:	0139011a 	.word	0x0139011a
 8008050:	01390139 	.word	0x01390139
 8008054:	011a0139 	.word	0x011a0139
 8008058:	01390139 	.word	0x01390139
 800805c:	01390139 	.word	0x01390139
 8008060:	01290139 	.word	0x01290139
 8008064:	0139008e 	.word	0x0139008e
 8008068:	00fe0139 	.word	0x00fe0139
 800806c:	00e30139 	.word	0x00e30139
 8008070:	01390139 	.word	0x01390139
 8008074:	008e      	.short	0x008e
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = true;
      c = *fmt++;
 8008076:	7831      	ldrb	r1, [r6, #0]
 8008078:	3601      	adds	r6, #1
      if (c == 0) {
 800807a:	2900      	cmp	r1, #0
 800807c:	f43f af7b 	beq.w	8007f76 <chprintf.constprop.34+0x46>
    else {
      is_long = (c >= 'A') && (c <= 'Z');
    }

    /* Command decoding.*/
    switch (c) {
 8008080:	f1a1 0244 	sub.w	r2, r1, #68	; 0x44
 8008084:	2a34      	cmp	r2, #52	; 0x34
 8008086:	f200 80fa 	bhi.w	800827e <chprintf.constprop.34+0x34e>
 800808a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800808e:	00d9      	.short	0x00d9
 8008090:	00f800f8 	.word	0x00f800f8
 8008094:	00f800f8 	.word	0x00f800f8
 8008098:	00f800d9 	.word	0x00f800d9
 800809c:	00f800f8 	.word	0x00f800f8
 80080a0:	00f800f8 	.word	0x00f800f8
 80080a4:	004d00e8 	.word	0x004d00e8
 80080a8:	00f800f8 	.word	0x00f800f8
 80080ac:	00f800f8 	.word	0x00f800f8
 80080b0:	00f800a2 	.word	0x00f800a2
 80080b4:	004d00f8 	.word	0x004d00f8
 80080b8:	00f800f8 	.word	0x00f800f8
 80080bc:	00f800f8 	.word	0x00f800f8
 80080c0:	00f800f8 	.word	0x00f800f8
 80080c4:	00f800f8 	.word	0x00f800f8
 80080c8:	00f800f8 	.word	0x00f800f8
 80080cc:	00d900a4 	.word	0x00d900a4
 80080d0:	00f800f8 	.word	0x00f800f8
 80080d4:	00f800f8 	.word	0x00f800f8
 80080d8:	00f800d9 	.word	0x00f800d9
 80080dc:	00f800f8 	.word	0x00f800f8
 80080e0:	00f800f8 	.word	0x00f800f8
 80080e4:	004d00e8 	.word	0x004d00e8
 80080e8:	00f800f8 	.word	0x00f800f8
 80080ec:	00f800bd 	.word	0x00f800bd
 80080f0:	00f800a2 	.word	0x00f800a2
 80080f4:	004d00f8 	.word	0x004d00f8
    }
    
    /* Precision modifier.*/
    precision = 0;
    if (c == '.') {
      c = *fmt++;
 80080f8:	7831      	ldrb	r1, [r6, #0]
      if (c == 0) {
 80080fa:	2900      	cmp	r1, #0
 80080fc:	f43f af3b 	beq.w	8007f76 <chprintf.constprop.34+0x46>
        return n;
      }
      if (c == '*') {
 8008100:	292a      	cmp	r1, #42	; 0x2a
 8008102:	f000 80d7 	beq.w	80082b4 <chprintf.constprop.34+0x384>
    }
    
    /* Precision modifier.*/
    precision = 0;
    if (c == '.') {
      c = *fmt++;
 8008106:	3601      	adds	r6, #1
 8008108:	2300      	movs	r3, #0
      if (c == '*') {
        precision = va_arg(ap, int);
        c = *fmt++;
      }
      else {
        while (c >= '0' && c <= '9') {
 800810a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800810e:	b2d2      	uxtb	r2, r2
 8008110:	2a09      	cmp	r2, #9
          c -= '0';
          precision = precision * 10 + c;
 8008112:	eb03 0783 	add.w	r7, r3, r3, lsl #2
      if (c == '*') {
        precision = va_arg(ap, int);
        c = *fmt++;
      }
      else {
        while (c >= '0' && c <= '9') {
 8008116:	f63f af6e 	bhi.w	8007ff6 <chprintf.constprop.34+0xc6>
          c -= '0';
          precision = precision * 10 + c;
          c = *fmt++;
 800811a:	f816 1b01 	ldrb.w	r1, [r6], #1
        c = *fmt++;
      }
      else {
        while (c >= '0' && c <= '9') {
          c -= '0';
          precision = precision * 10 + c;
 800811e:	eb02 0347 	add.w	r3, r2, r7, lsl #1
          c = *fmt++;
          if (c == 0) {
 8008122:	2900      	cmp	r1, #0
 8008124:	d1f1      	bne.n	800810a <chprintf.constprop.34+0x1da>
 8008126:	e726      	b.n	8007f76 <chprintf.constprop.34+0x46>
    else {
      is_long = (c >= 'A') && (c <= 'Z');
    }

    /* Command decoding.*/
    switch (c) {
 8008128:	2210      	movs	r2, #16
unsigned_common:
      if (is_long) {
        l = va_arg(ap, unsigned long);
      }
      else {
        l = va_arg(ap, unsigned int);
 800812a:	f8d9 1000 	ldr.w	r1, [r9]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 800812e:	a803      	add	r0, sp, #12
unsigned_common:
      if (is_long) {
        l = va_arg(ap, unsigned long);
      }
      else {
        l = va_arg(ap, unsigned int);
 8008130:	f109 0904 	add.w	r9, r9, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8008134:	f7ff fe6c 	bl	8007e10 <long_to_string_with_divisor.constprop.36>
 8008138:	ab03      	add	r3, sp, #12
 800813a:	1ac0      	subs	r0, r0, r3
 800813c:	f100 3bff 	add.w	fp, r0, #4294967295	; 0xffffffff
      n++;
      continue;
    }
    
    p = tmpbuf;
    s = tmpbuf;
 8008140:	461f      	mov	r7, r3
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0) {
 8008142:	1a24      	subs	r4, r4, r0
 8008144:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      width = 0;
    }
    if (left_align == false) {
 8008148:	f1ba 0f00 	cmp.w	sl, #0
 800814c:	d155      	bne.n	80081fa <chprintf.constprop.34+0x2ca>
 800814e:	f8cd b000 	str.w	fp, [sp]
      width = -width;
 8008152:	f1c4 0a00 	rsb	sl, r4, #0
    }
    if (width < 0) {
 8008156:	f1ba 0f00 	cmp.w	sl, #0
 800815a:	f000 8098 	beq.w	800828e <chprintf.constprop.34+0x35e>
      if ((*s == '-' || *s == '+') && filler == '0') {
 800815e:	7839      	ldrb	r1, [r7, #0]
        streamPut(chp, (uint8_t)*s++);
 8008160:	f8df b174 	ldr.w	fp, [pc, #372]	; 80082d8 <chprintf.constprop.34+0x3a8>
    }
    if (left_align == false) {
      width = -width;
    }
    if (width < 0) {
      if ((*s == '-' || *s == '+') && filler == '0') {
 8008164:	292d      	cmp	r1, #45	; 0x2d
 8008166:	d07c      	beq.n	8008262 <chprintf.constprop.34+0x332>
 8008168:	292b      	cmp	r1, #43	; 0x2b
 800816a:	d07a      	beq.n	8008262 <chprintf.constprop.34+0x332>
        streamPut(chp, (uint8_t)*s++);
        n++;
 800816c:	4654      	mov	r4, sl
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 800816e:	f8db 3000 	ldr.w	r3, [fp]
 8008172:	4859      	ldr	r0, [pc, #356]	; (80082d8 <chprintf.constprop.34+0x3a8>)
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	4629      	mov	r1, r5
 8008178:	4798      	blx	r3
        n++;
      } while (++width != 0);
 800817a:	3401      	adds	r4, #1
 800817c:	d1f7      	bne.n	800816e <chprintf.constprop.34+0x23e>
    }
    while (--i >= 0) {
 800817e:	9b00      	ldr	r3, [sp, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	ebca 0808 	rsb	r8, sl, r8
 8008186:	f6ff aee3 	blt.w	8007f50 <chprintf.constprop.34+0x20>
    }
    i = (int)(p - s);
    if ((width -= i) < 0) {
      width = 0;
    }
    if (left_align == false) {
 800818a:	f8dd a000 	ldr.w	sl, [sp]
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 800818e:	f8db 3000 	ldr.w	r3, [fp]
 8008192:	4851      	ldr	r0, [pc, #324]	; (80082d8 <chprintf.constprop.34+0x3a8>)
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	f817 1b01 	ldrb.w	r1, [r7], #1
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800819a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)*s++);
 800819e:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80081a0:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80081a4:	d1f3      	bne.n	800818e <chprintf.constprop.34+0x25e>
 80081a6:	9b00      	ldr	r3, [sp, #0]
 80081a8:	f108 0801 	add.w	r8, r8, #1
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	bfa8      	it	ge
 80081b0:	4498      	addge	r8, r3
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80081b2:	2c00      	cmp	r4, #0
 80081b4:	f43f aecc 	beq.w	8007f50 <chprintf.constprop.34+0x20>
 80081b8:	f8df b11c 	ldr.w	fp, [pc, #284]	; 80082d8 <chprintf.constprop.34+0x3a8>
 80081bc:	4627      	mov	r7, r4
      streamPut(chp, (uint8_t)filler);
 80081be:	f8db 3000 	ldr.w	r3, [fp]
 80081c2:	4845      	ldr	r0, [pc, #276]	; (80082d8 <chprintf.constprop.34+0x3a8>)
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	4629      	mov	r1, r5
 80081c8:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80081ca:	3f01      	subs	r7, #1
 80081cc:	d1f7      	bne.n	80081be <chprintf.constprop.34+0x28e>
 80081ce:	44a0      	add	r8, r4
 80081d0:	e6be      	b.n	8007f50 <chprintf.constprop.34+0x20>
 80081d2:	220a      	movs	r2, #10
 80081d4:	e7a9      	b.n	800812a <chprintf.constprop.34+0x1fa>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 80081d6:	f8d9 3000 	ldr.w	r3, [r9]
 80081da:	f88d 300c 	strb.w	r3, [sp, #12]
 80081de:	9b01      	ldr	r3, [sp, #4]
 80081e0:	4618      	mov	r0, r3
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0) {
 80081e2:	1a24      	subs	r4, r4, r0

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 80081e4:	f109 0904 	add.w	r9, r9, #4
 80081e8:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
    }

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 80081ec:	2520      	movs	r5, #32
      n++;
      continue;
    }
    
    p = tmpbuf;
    s = tmpbuf;
 80081ee:	af03      	add	r7, sp, #12
 80081f0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    }
    i = (int)(p - s);
    if ((width -= i) < 0) {
      width = 0;
    }
    if (left_align == false) {
 80081f4:	f1ba 0f00 	cmp.w	sl, #0
 80081f8:	d0a9      	beq.n	800814e <chprintf.constprop.34+0x21e>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80081fa:	f1bb 0300 	subs.w	r3, fp, #0
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	dbd7      	blt.n	80081b2 <chprintf.constprop.34+0x282>
 8008202:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 80082d8 <chprintf.constprop.34+0x3a8>
 8008206:	e7c0      	b.n	800818a <chprintf.constprop.34+0x25a>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0) {
 8008208:	f8d9 7000 	ldr.w	r7, [r9]
        s = "(null)";
 800820c:	4a33      	ldr	r2, [pc, #204]	; (80082dc <chprintf.constprop.34+0x3ac>)
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0) {
 800820e:	f109 0904 	add.w	r9, r9, #4
        s = "(null)";
 8008212:	2f00      	cmp	r7, #0
 8008214:	bf08      	it	eq
 8008216:	4617      	moveq	r7, r2
      }
      if (precision == 0) {
 8008218:	2b00      	cmp	r3, #0
 800821a:	d13d      	bne.n	8008298 <chprintf.constprop.34+0x368>
        precision = 32767;
      }
      for (p = s; *p && (--precision >= 0); p++)
 800821c:	783b      	ldrb	r3, [r7, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d03e      	beq.n	80082a0 <chprintf.constprop.34+0x370>
 8008222:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8008226:	4638      	mov	r0, r7
 8008228:	e001      	b.n	800822e <chprintf.constprop.34+0x2fe>
 800822a:	3b01      	subs	r3, #1
 800822c:	d403      	bmi.n	8008236 <chprintf.constprop.34+0x306>
 800822e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008232:	2a00      	cmp	r2, #0
 8008234:	d1f9      	bne.n	800822a <chprintf.constprop.34+0x2fa>
 8008236:	1bc0      	subs	r0, r0, r7
 8008238:	f100 3bff 	add.w	fp, r0, #4294967295	; 0xffffffff
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 800823c:	2520      	movs	r5, #32
 800823e:	e780      	b.n	8008142 <chprintf.constprop.34+0x212>
    case 'i':
      if (is_long) {
        l = va_arg(ap, long);
      }
      else {
        l = va_arg(ap, int);
 8008240:	f8d9 1000 	ldr.w	r1, [r9]
      }
      if (l < 0) {
 8008244:	2900      	cmp	r1, #0
    case 'i':
      if (is_long) {
        l = va_arg(ap, long);
      }
      else {
        l = va_arg(ap, int);
 8008246:	f109 0904 	add.w	r9, r9, #4
      }
      if (l < 0) {
 800824a:	db3c      	blt.n	80082c6 <chprintf.constprop.34+0x396>
        *p++ = '-';
        l = -l;
      }
      else
        if (do_sign) {
 800824c:	2800      	cmp	r0, #0
 800824e:	d038      	beq.n	80082c2 <chprintf.constprop.34+0x392>
          *p++ = '+';
 8008250:	232b      	movs	r3, #43	; 0x2b
 8008252:	f88d 300c 	strb.w	r3, [sp, #12]
 8008256:	f10d 000d 	add.w	r0, sp, #13
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 800825a:	220a      	movs	r2, #10
 800825c:	e76a      	b.n	8008134 <chprintf.constprop.34+0x204>
 800825e:	2208      	movs	r2, #8
 8008260:	e763      	b.n	800812a <chprintf.constprop.34+0x1fa>
    }
    if (left_align == false) {
      width = -width;
    }
    if (width < 0) {
      if ((*s == '-' || *s == '+') && filler == '0') {
 8008262:	2d30      	cmp	r5, #48	; 0x30
 8008264:	d182      	bne.n	800816c <chprintf.constprop.34+0x23c>
        streamPut(chp, (uint8_t)*s++);
 8008266:	f8db 2000 	ldr.w	r2, [fp]
 800826a:	4658      	mov	r0, fp
 800826c:	68d2      	ldr	r2, [r2, #12]
 800826e:	4790      	blx	r2
 8008270:	9b00      	ldr	r3, [sp, #0]
 8008272:	3b01      	subs	r3, #1
 8008274:	3701      	adds	r7, #1
        n++;
 8008276:	f108 0801 	add.w	r8, r8, #1
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	e776      	b.n	800816c <chprintf.constprop.34+0x23c>
 800827e:	9b01      	ldr	r3, [sp, #4]
        l = va_arg(ap, unsigned int);
      }
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8008280:	f88d 100c 	strb.w	r1, [sp, #12]
 8008284:	4618      	mov	r0, r3
 8008286:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
      n++;
      continue;
    }
    
    p = tmpbuf;
    s = tmpbuf;
 800828a:	af03      	add	r7, sp, #12
 800828c:	e759      	b.n	8008142 <chprintf.constprop.34+0x212>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800828e:	9b00      	ldr	r3, [sp, #0]
 8008290:	2b00      	cmp	r3, #0
      width = 0;
    }
    if (left_align == false) {
      width = -width;
    }
    if (width < 0) {
 8008292:	4654      	mov	r4, sl
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8008294:	dab5      	bge.n	8008202 <chprintf.constprop.34+0x2d2>
 8008296:	e65b      	b.n	8007f50 <chprintf.constprop.34+0x20>
        s = "(null)";
      }
      if (precision == 0) {
        precision = 32767;
      }
      for (p = s; *p && (--precision >= 0); p++)
 8008298:	783a      	ldrb	r2, [r7, #0]
 800829a:	b10a      	cbz	r2, 80082a0 <chprintf.constprop.34+0x370>
 800829c:	3b01      	subs	r3, #1
 800829e:	d5c2      	bpl.n	8008226 <chprintf.constprop.34+0x2f6>
 80082a0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    }
    i = (int)(p - s);
    if ((width -= i) < 0) {
      width = 0;
    }
    if (left_align == false) {
 80082a4:	f1ba 0f00 	cmp.w	sl, #0
 80082a8:	d114      	bne.n	80082d4 <chprintf.constprop.34+0x3a4>
 80082aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	2520      	movs	r5, #32
 80082b2:	e74e      	b.n	8008152 <chprintf.constprop.34+0x222>
      c = *fmt++;
      if (c == 0) {
        return n;
      }
      if (c == '*') {
        precision = va_arg(ap, int);
 80082b4:	f8d9 3000 	ldr.w	r3, [r9]
        c = *fmt++;
 80082b8:	7871      	ldrb	r1, [r6, #1]
      c = *fmt++;
      if (c == 0) {
        return n;
      }
      if (c == '*') {
        precision = va_arg(ap, int);
 80082ba:	f109 0904 	add.w	r9, r9, #4
        c = *fmt++;
 80082be:	3602      	adds	r6, #2
 80082c0:	e699      	b.n	8007ff6 <chprintf.constprop.34+0xc6>
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    
    p = tmpbuf;
 80082c2:	a803      	add	r0, sp, #12
 80082c4:	e7c9      	b.n	800825a <chprintf.constprop.34+0x32a>
      }
      else {
        l = va_arg(ap, int);
      }
      if (l < 0) {
        *p++ = '-';
 80082c6:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 80082c8:	4249      	negs	r1, r1
      }
      else {
        l = va_arg(ap, int);
      }
      if (l < 0) {
        *p++ = '-';
 80082ca:	f88d 300c 	strb.w	r3, [sp, #12]
 80082ce:	f10d 000d 	add.w	r0, sp, #13
 80082d2:	e7c2      	b.n	800825a <chprintf.constprop.34+0x32a>
    }
    i = (int)(p - s);
    if ((width -= i) < 0) {
      width = 0;
    }
    if (left_align == false) {
 80082d4:	2520      	movs	r5, #32
 80082d6:	e76c      	b.n	80081b2 <chprintf.constprop.34+0x282>
 80082d8:	2000adf8 	.word	0x2000adf8
 80082dc:	0800d114 	.word	0x0800d114

080082e0 <chSchWakeupS.constprop.33>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80082e0:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp = currp;
 80082e2:	4d1a      	ldr	r5, [pc, #104]	; (800834c <chSchWakeupS.constprop.33+0x6c>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80082e4:	4604      	mov	r4, r0
  thread_t *otp = currp;

  chDbgCheckClassS();
 80082e6:	f7ff f9f3 	bl	80076d0 <chDbgCheckClassS>

  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80082ea:	682b      	ldr	r3, [r5, #0]
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;
 80082ec:	69a8      	ldr	r0, [r5, #24]

  chDbgCheckClassS();

  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80082ee:	42ab      	cmp	r3, r5
 80082f0:	d02a      	beq.n	8008348 <chSchWakeupS.constprop.33+0x68>
 80082f2:	689a      	ldr	r2, [r3, #8]
 80082f4:	6883      	ldr	r3, [r0, #8]
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d320      	bcc.n	800833c <chSchWakeupS.constprop.33+0x5c>

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio) {
 80082fa:	68a2      	ldr	r2, [r4, #8]
              (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 80082fc:	2100      	movs	r1, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio) {
 80082fe:	4293      	cmp	r3, r2
              (ch.rlist.current->hdr.pqueue.prio >= ch.rlist.pqueue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8008300:	6261      	str	r1, [r4, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio) {
 8008302:	d216      	bcs.n	8008332 <chSchWakeupS.constprop.33+0x52>
    (void) chSchReadyI(ntp);
  }
  else {
    otp = chSchReadyAheadI(otp);
 8008304:	f7fe fd7c 	bl	8006e00 <chSchReadyAheadI>
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;
 8008308:	2301      	movs	r3, #1

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 800830a:	4601      	mov	r1, r0
     list instead.*/
  if (ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    otp = chSchReadyAheadI(otp);
 800830c:	4606      	mov	r6, r0
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;
 800830e:	f884 3020 	strb.w	r3, [r4, #32]

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8008312:	4620      	mov	r0, r4
    if (otp->hdr.pqueue.prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
 8008314:	61ac      	str	r4, [r5, #24]
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8008316:	f7ff f98b 	bl	8007630 <_trace_switch>
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800831a:	f3ef 8309 	mrs	r3, PSP
 800831e:	69f2      	ldr	r2, [r6, #28]
 8008320:	3b64      	subs	r3, #100	; 0x64
 8008322:	429a      	cmp	r2, r3
 8008324:	d80d      	bhi.n	8008342 <chSchWakeupS.constprop.33+0x62>
 8008326:	4620      	mov	r0, r4
 8008328:	4631      	mov	r1, r6
  }
}
 800832a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 800832e:	f7f7 bfeb 	b.w	8000308 <_port_switch>
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio) {
    (void) chSchReadyI(ntp);
 8008332:	4620      	mov	r0, r4
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
 8008334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio) {
    (void) chSchReadyI(ntp);
 8008338:	f7fe bde2 	b.w	8006f00 <chSchReadyI>
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;

  chDbgCheckClassS();

  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800833c:	4804      	ldr	r0, [pc, #16]	; (8008350 <chSchWakeupS.constprop.33+0x70>)
 800833e:	f7ff f9a7 	bl	8007690 <chSysHalt>
    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8008342:	4804      	ldr	r0, [pc, #16]	; (8008354 <chSchWakeupS.constprop.33+0x74>)
 8008344:	f7ff f9a4 	bl	8007690 <chSysHalt>
 8008348:	6883      	ldr	r3, [r0, #8]
 800834a:	e7d6      	b.n	80082fa <chSchWakeupS.constprop.33+0x1a>
 800834c:	2000b288 	.word	0x2000b288
 8008350:	0800d104 	.word	0x0800d104
 8008354:	0800cfe4 	.word	0x0800cfe4
	...

08008360 <vmc_heap_alloc_n.constprop.20>:
    }
  }
  DBG_GPIO_CLR(DBG1);
}

heap_index vmc_heap_alloc_n(vmc_t *container, unsigned int n) {
 8008360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008364:	4680      	mov	r8, r0

  heap_index head = HEAP_NULL;

  cam_value_t list = get_cam_val((UINT)HEAP_NULL, VALUE_PTR_BIT);

  for(int retries = 0; retries < 2; retries ++) {
 8008366:	2702      	movs	r7, #2
/*   return val_s; */
/* } */

cam_value_t get_cam_val(UINT ui, value_flags_t f){
  cam_value_t cvt = { .value = ui, .flags = f };
  return cvt;
 8008368:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  heap->value_flags[i].fst = value.flags;
}

void heap_set_snd(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].snd = value.value;
  heap->value_flags[i].snd = value.flags;
 800836c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  heap->cells[i].fst = value.value;
  heap->value_flags[i].fst = value.flags;
}

void heap_set_snd(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].snd = value.value;
 8008370:	f04f 0903 	mov.w	r9, #3
 8008374:	e000      	b.n	8008378 <vmc_heap_alloc_n.constprop.20+0x18>
 8008376:	4625      	mov	r5, r4
    for (int i = 0; i < (int)n; i ++) {

      head = heap_allocate(&container->heap);
 8008378:	4640      	mov	r0, r8
 800837a:	f000 fa29 	bl	80087d0 <heap_allocate>

      if (head == HEAP_NULL) {
 800837e:	1c43      	adds	r3, r0, #1
  cam_value_t list = get_cam_val((UINT)HEAP_NULL, VALUE_PTR_BIT);

  for(int retries = 0; retries < 2; retries ++) {
    for (int i = 0; i < (int)n; i ++) {

      head = heap_allocate(&container->heap);
 8008380:	4604      	mov	r4, r0

      if (head == HEAP_NULL) {
 8008382:	d00f      	beq.n	80083a4 <vmc_heap_alloc_n.constprop.20+0x44>
 8008384:	f8d8 2000 	ldr.w	r2, [r8]
  heap->value_flags[i].snd = value.flags;
 8008388:	f8d8 3014 	ldr.w	r3, [r8, #20]
  heap->cells[i].fst = value.value;
  heap->value_flags[i].fst = value.flags;
}

void heap_set_snd(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].snd = value.value;
 800838c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
  heap->value_flags[i].snd = value.flags;
 8008390:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  heap_index head = HEAP_NULL;

  cam_value_t list = get_cam_val((UINT)HEAP_NULL, VALUE_PTR_BIT);

  for(int retries = 0; retries < 2; retries ++) {
    for (int i = 0; i < (int)n; i ++) {
 8008394:	f1b9 0901 	subs.w	r9, r9, #1
  heap->cells[i].fst = value.value;
  heap->value_flags[i].fst = value.flags;
}

void heap_set_snd(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].snd = value.value;
 8008398:	6055      	str	r5, [r2, #4]
  heap->value_flags[i].snd = value.flags;
 800839a:	805e      	strh	r6, [r3, #2]
 800839c:	d1eb      	bne.n	8008376 <vmc_heap_alloc_n.constprop.20+0x16>
    heap_mark_phase(container);
  }

  /* head should be HEAP_NULL or a list of cells */
  return head;
}
 800839e:	4620      	mov	r0, r4
 80083a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }

    if (head != HEAP_NULL) {
      break;
    }
    heap_mark_phase(container);
 80083a4:	4640      	mov	r0, r8
 80083a6:	f000 f8e3 	bl	8008570 <heap_mark_phase.lto_priv.60>

  heap_index head = HEAP_NULL;

  cam_value_t list = get_cam_val((UINT)HEAP_NULL, VALUE_PTR_BIT);

  for(int retries = 0; retries < 2; retries ++) {
 80083aa:	2f01      	cmp	r7, #1
 80083ac:	d0f7      	beq.n	800839e <vmc_heap_alloc_n.constprop.20+0x3e>
 80083ae:	2701      	movs	r7, #1
 80083b0:	e7de      	b.n	8008370 <vmc_heap_alloc_n.constprop.20+0x10>
 80083b2:	bf00      	nop
	...

080083c0 <_sbrk_r>:
}

/***************************************************************************/

__attribute__((used))
caddr_t _sbrk_r(struct _reent *r, int incr) {
 80083c0:	b538      	push	{r3, r4, r5, lr}
#if CH_CFG_USE_MEMCORE
  void *p;

  chDbgCheck(incr >= 0);
 80083c2:	1e0c      	subs	r4, r1, #0
 80083c4:	db27      	blt.n	8008416 <_sbrk_r+0x56>
 80083c6:	4605      	mov	r5, r0
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80083c8:	2320      	movs	r3, #32
 80083ca:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 80083ce:	f7ff fa47 	bl	8007860 <_dbg_check_lock>
 * @iclass
 */
void *chCoreAllocFromBaseI(size_t size, unsigned align, size_t offset) {
  uint8_t *p, *next;

  chDbgCheckClassI();
 80083d2:	f7ff f98d 	bl	80076f0 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.basemem + offset, align);
 80083d6:	4b14      	ldr	r3, [pc, #80]	; (8008428 <_sbrk_r+0x68>)
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.topmem) || (next < ch_memcore.basemem)) {
 80083d8:	e893 0005 	ldmia.w	r3, {r0, r2}

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.basemem + offset, align);
  next = p + size;
 80083dc:	1901      	adds	r1, r0, r4

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.topmem) || (next < ch_memcore.basemem)) {
 80083de:	4291      	cmp	r1, r2
 80083e0:	d814      	bhi.n	800840c <_sbrk_r+0x4c>
 80083e2:	4288      	cmp	r0, r1
 80083e4:	d812      	bhi.n	800840c <_sbrk_r+0x4c>
    return NULL;
  }

  ch_memcore.basemem = next;
 80083e6:	6019      	str	r1, [r3, #0]
 80083e8:	4604      	mov	r4, r0
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80083ea:	f7ff fa29 	bl	8007840 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80083ee:	4b0f      	ldr	r3, [pc, #60]	; (800842c <_sbrk_r+0x6c>)
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d004      	beq.n	8008400 <_sbrk_r+0x40>
 80083f6:	6999      	ldr	r1, [r3, #24]
 80083f8:	6893      	ldr	r3, [r2, #8]
 80083fa:	688a      	ldr	r2, [r1, #8]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d307      	bcc.n	8008410 <_sbrk_r+0x50>
 8008400:	2300      	movs	r3, #0
 8008402:	f383 8811 	msr	BASEPRI, r3

  p = chCoreAllocFromBase((size_t)incr, 1U, 0U);
  if (p == NULL) {
 8008406:	b14c      	cbz	r4, 800841c <_sbrk_r+0x5c>
 8008408:	4620      	mov	r0, r4
#else
  (void)incr;
  __errno_r(r) = ENOMEM;
  return (caddr_t)-1;
#endif
}
 800840a:	bd38      	pop	{r3, r4, r5, pc}
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.basemem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.topmem) || (next < ch_memcore.basemem)) {
    return NULL;
 800840c:	2400      	movs	r4, #0
 800840e:	e7ec      	b.n	80083ea <_sbrk_r+0x2a>
 8008410:	4807      	ldr	r0, [pc, #28]	; (8008430 <_sbrk_r+0x70>)
 8008412:	f7ff f93d 	bl	8007690 <chSysHalt>
__attribute__((used))
caddr_t _sbrk_r(struct _reent *r, int incr) {
#if CH_CFG_USE_MEMCORE
  void *p;

  chDbgCheck(incr >= 0);
 8008416:	4807      	ldr	r0, [pc, #28]	; (8008434 <_sbrk_r+0x74>)
 8008418:	f7ff f93a 	bl	8007690 <chSysHalt>

  p = chCoreAllocFromBase((size_t)incr, 1U, 0U);
  if (p == NULL) {
    __errno_r(r)  = ENOMEM;
 800841c:	230c      	movs	r3, #12
 800841e:	602b      	str	r3, [r5, #0]
    return (caddr_t)-1;
 8008420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008424:	bd38      	pop	{r3, r4, r5, pc}
 8008426:	bf00      	nop
 8008428:	2000bb10 	.word	0x2000bb10
 800842c:	2000b288 	.word	0x2000b288
 8008430:	0800d138 	.word	0x0800d138
 8008434:	0800d0fc 	.word	0x0800d0fc
	...

08008440 <heap_mark>:

// Deutsch-Schorr-Waite pointer reversal marking
// Todo: lots of testing and tweaking until it works.

//void heap_mark(heap_t * heap, UINT value, value_flags_t v_flags) {
void heap_mark(heap_t *heap, cam_value_t v) {
 8008440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008444:	b083      	sub	sp, #12
 8008446:	ab02      	add	r3, sp, #8
 8008448:	e903 0006 	stmdb	r3, {r1, r2}
  
  bool done = false;
  cam_value_t curr = v;
 800844c:	f8bd 6000 	ldrh.w	r6, [sp]
 8008450:	9b01      	ldr	r3, [sp, #4]
  cam_value_t prev = get_cam_val(HEAP_NULL, VALUE_PTR_BIT);

  // Abort if value is not a pointer to a heap structure.
  if (is_atomic(curr)) {
 8008452:	0432      	lsls	r2, r6, #16
 8008454:	d402      	bmi.n	800845c <heap_mark+0x1c>
      cam_value_t hs = heap_snd(heap, prev.value);
      curr = hs;
      heap_set_snd(heap, prev.value, next);
    }
  }
}
 8008456:	b003      	add	sp, #12
 8008458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  bool done = false;
  cam_value_t curr = v;
  cam_value_t prev = get_cam_val(HEAP_NULL, VALUE_PTR_BIT);

  // Abort if value is not a pointer to a heap structure.
  if (is_atomic(curr)) {
 800845c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8008460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  }
    
  // curr_val is a pointer onto the heap.
  while (!done) {
    // Follow left pointers
    while (is_pointer(curr) &&
 8008464:	0434      	lsls	r4, r6, #16
 8008466:	d525      	bpl.n	80084b4 <heap_mark+0x74>
 8008468:	1c59      	adds	r1, r3, #1
 800846a:	d023      	beq.n	80084b4 <heap_mark+0x74>
static inline int is_pointer(cam_value_t v) {
  return (v.flags & VALUE_PTR_BIT);
}

static inline int get_gc_mark(heap_t *heap, heap_index i) {
  return heap->flags[i] & HEAP_GC_MARK_BIT;
 800846c:	6981      	ldr	r1, [r0, #24]
 800846e:	5ccc      	ldrb	r4, [r1, r3]
    
  // curr_val is a pointer onto the heap.
  while (!done) {
    // Follow left pointers
    while (is_pointer(curr) &&
	   (heap_index)curr.value != HEAP_NULL &&
 8008470:	0627      	lsls	r7, r4, #24
static inline int is_pointer(cam_value_t v) {
  return (v.flags & VALUE_PTR_BIT);
}

static inline int get_gc_mark(heap_t *heap, heap_index i) {
  return heap->flags[i] & HEAP_GC_MARK_BIT;
 8008472:	4419      	add	r1, r3
    
  // curr_val is a pointer onto the heap.
  while (!done) {
    // Follow left pointers
    while (is_pointer(curr) &&
	   (heap_index)curr.value != HEAP_NULL &&
 8008474:	d41e      	bmi.n	80084b4 <heap_mark+0x74>
  heap->cells[i].snd = value.value;
  heap->value_flags[i].snd = value.flags;
}

static inline void set_gc_mark(heap_t *heap, heap_index i) {
  heap->flags[i] |= HEAP_GC_MARK_BIT;
 8008476:	f064 047f 	orn	r4, r4, #127	; 0x7f
 800847a:	700c      	strb	r4, [r1, #0]
cam_value_t get_cam_val(UINT ui, value_flags_t f){
  cam_value_t cvt = { .value = ui, .flags = f };
  return cvt;
}
cam_value_t heap_fst(heap_t *heap, heap_index i) {
  return get_cam_val(heap->cells[i].fst, heap->value_flags[i].fst);
 800847c:	6941      	ldr	r1, [r0, #20]
 800847e:	6804      	ldr	r4, [r0, #0]
 8008480:	f831 7023 	ldrh.w	r7, [r1, r3, lsl #2]
 8008484:	f854 e033 	ldr.w	lr, [r4, r3, lsl #3]
  heap->value_flags[i].fst = f.flags;
  heap->value_flags[i].snd = s.flags;
}

void heap_set_fst(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].fst = value.value;
 8008488:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
  }
    
  // curr_val is a pointer onto the heap.
  while (!done) {
    // Follow left pointers
    while (is_pointer(curr) &&
 800848c:	f417 4f00 	tst.w	r7, #32768	; 0x8000
  heap->value_flags[i].snd = s.flags;
}

void heap_set_fst(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].fst = value.value;
  heap->value_flags[i].fst = value.flags;
 8008490:	f821 5023 	strh.w	r5, [r1, r3, lsl #2]
 8008494:	461a      	mov	r2, r3
 8008496:	4635      	mov	r5, r6
  }
    
  // curr_val is a pointer onto the heap.
  while (!done) {
    // Follow left pointers
    while (is_pointer(curr) &&
 8008498:	d052      	beq.n	8008540 <heap_mark+0x100>
 800849a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800849e:	d04f      	beq.n	8008540 <heap_mark+0x100>
static inline int is_pointer(cam_value_t v) {
  return (v.flags & VALUE_PTR_BIT);
}

static inline int get_gc_mark(heap_t *heap, heap_index i) {
  return heap->flags[i] & HEAP_GC_MARK_BIT;
 80084a0:	6981      	ldr	r1, [r0, #24]
 80084a2:	f811 400e 	ldrb.w	r4, [r1, lr]
    
  // curr_val is a pointer onto the heap.
  while (!done) {
    // Follow left pointers
    while (is_pointer(curr) &&
	   (heap_index)curr.value != HEAP_NULL &&
 80084a6:	f014 0f80 	tst.w	r4, #128	; 0x80
static inline int is_pointer(cam_value_t v) {
  return (v.flags & VALUE_PTR_BIT);
}

static inline int get_gc_mark(heap_t *heap, heap_index i) {
  return heap->flags[i] & HEAP_GC_MARK_BIT;
 80084aa:	4471      	add	r1, lr
    
  // curr_val is a pointer onto the heap.
  while (!done) {
    // Follow left pointers
    while (is_pointer(curr) &&
	   (heap_index)curr.value != HEAP_NULL &&
 80084ac:	d148      	bne.n	8008540 <heap_mark+0x100>
 80084ae:	4673      	mov	r3, lr
 80084b0:	463e      	mov	r6, r7
 80084b2:	e7e0      	b.n	8008476 <heap_mark+0x36>
        heap_set_fst(heap, curr.value, pv);
        prev = curr;
        curr = next;
      }
    }
    while  (is_pointer(prev) &&
 80084b4:	042f      	lsls	r7, r5, #16
 80084b6:	d551      	bpl.n	800855c <heap_mark+0x11c>
 80084b8:	1c54      	adds	r4, r2, #1
 80084ba:	d0cc      	beq.n	8008456 <heap_mark+0x16>
static inline int get_gc_mark(heap_t *heap, heap_index i) {
  return heap->flags[i] & HEAP_GC_MARK_BIT;
}

static inline int get_gc_flag(heap_t *heap, heap_index i) {
  return heap->flags[i] & HEAP_GC_FLAG_BIT;
 80084bc:	6987      	ldr	r7, [r0, #24]
 80084be:	5cbc      	ldrb	r4, [r7, r2]
        prev = curr;
        curr = next;
      }
    }
    while  (is_pointer(prev) &&
	    (heap_index)prev.value != HEAP_NULL &&
 80084c0:	0661      	lsls	r1, r4, #25
static inline int get_gc_mark(heap_t *heap, heap_index i) {
  return heap->flags[i] & HEAP_GC_MARK_BIT;
}

static inline int get_gc_flag(heap_t *heap, heap_index i) {
  return heap->flags[i] & HEAP_GC_FLAG_BIT;
 80084c2:	4417      	add	r7, r2
        prev = curr;
        curr = next;
      }
    }
    while  (is_pointer(prev) &&
	    (heap_index)prev.value != HEAP_NULL &&
 80084c4:	d40a      	bmi.n	80084dc <heap_mark+0x9c>
 80084c6:	e040      	b.n	800854a <heap_mark+0x10a>
        heap_set_fst(heap, curr.value, pv);
        prev = curr;
        curr = next;
      }
    }
    while  (is_pointer(prev) &&
 80084c8:	1c4c      	adds	r4, r1, #1
 80084ca:	d0c4      	beq.n	8008456 <heap_mark+0x16>
static inline int get_gc_mark(heap_t *heap, heap_index i) {
  return heap->flags[i] & HEAP_GC_MARK_BIT;
}

static inline int get_gc_flag(heap_t *heap, heap_index i) {
  return heap->flags[i] & HEAP_GC_FLAG_BIT;
 80084cc:	6987      	ldr	r7, [r0, #24]
 80084ce:	5c7c      	ldrb	r4, [r7, r1]
        prev = curr;
        curr = next;
      }
    }
    while  (is_pointer(prev) &&
	    (heap_index)prev.value != HEAP_NULL &&
 80084d0:	f014 0f40 	tst.w	r4, #64	; 0x40
static inline int get_gc_mark(heap_t *heap, heap_index i) {
  return heap->flags[i] & HEAP_GC_MARK_BIT;
}

static inline int get_gc_flag(heap_t *heap, heap_index i) {
  return heap->flags[i] & HEAP_GC_FLAG_BIT;
 80084d4:	440f      	add	r7, r1
        prev = curr;
        curr = next;
      }
    }
    while  (is_pointer(prev) &&
	    (heap_index)prev.value != HEAP_NULL &&
 80084d6:	d03c      	beq.n	8008552 <heap_mark+0x112>
 80084d8:	460a      	mov	r2, r1
 80084da:	4675      	mov	r5, lr
static inline void clr_gc_mark(heap_t *heap, heap_index i) {
  heap->flags[i] &= ~HEAP_GC_MARK_BIT;
}

static inline void clr_gc_flag(heap_t *heap, heap_index i) {
  heap->flags[i] &= ~HEAP_GC_FLAG_BIT;
 80084dc:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 80084e0:	703c      	strb	r4, [r7, #0]
cam_value_t heap_fst(heap_t *heap, heap_index i) {
  return get_cam_val(heap->cells[i].fst, heap->value_flags[i].fst);
}

cam_value_t heap_snd(heap_t *heap, heap_index i) {
  return get_cam_val(heap->cells[i].snd, heap->value_flags[i].snd);
 80084e2:	6944      	ldr	r4, [r0, #20]
 80084e4:	6807      	ldr	r7, [r0, #0]
 80084e6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80084ea:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
 80084ee:	f8b4 e002 	ldrh.w	lr, [r4, #2]
 80084f2:	6879      	ldr	r1, [r7, #4]
  heap->cells[i].fst = value.value;
  heap->value_flags[i].fst = value.flags;
}

void heap_set_snd(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].snd = value.value;
 80084f4:	607b      	str	r3, [r7, #4]
        heap_set_fst(heap, curr.value, pv);
        prev = curr;
        curr = next;
      }
    }
    while  (is_pointer(prev) &&
 80084f6:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
  heap->value_flags[i].fst = value.flags;
}

void heap_set_snd(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].snd = value.value;
  heap->value_flags[i].snd = value.flags;
 80084fa:	8066      	strh	r6, [r4, #2]
 80084fc:	4613      	mov	r3, r2
 80084fe:	462e      	mov	r6, r5
        heap_set_fst(heap, curr.value, pv);
        prev = curr;
        curr = next;
      }
    }
    while  (is_pointer(prev) &&
 8008500:	d1e2      	bne.n	80084c8 <heap_mark+0x88>
 8008502:	6983      	ldr	r3, [r0, #24]
 8008504:	5c5c      	ldrb	r4, [r3, r1]
	    (heap_index)prev.value != HEAP_NULL &&
 8008506:	46ac      	mov	ip, r5
 8008508:	4691      	mov	r9, r2
 800850a:	4675      	mov	r5, lr
 800850c:	185f      	adds	r7, r3, r1
 800850e:	460a      	mov	r2, r1
static inline void set_gc_mark(heap_t *heap, heap_index i) {
  heap->flags[i] |= HEAP_GC_MARK_BIT;
}

static inline void set_gc_flag(heap_t *heap, heap_index i) {
  heap->flags[i] |= HEAP_GC_FLAG_BIT;
 8008510:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8008514:	703c      	strb	r4, [r7, #0]
cam_value_t get_cam_val(UINT ui, value_flags_t f){
  cam_value_t cvt = { .value = ui, .flags = f };
  return cvt;
}
cam_value_t heap_fst(heap_t *heap, heap_index i) {
  return get_cam_val(heap->cells[i].fst, heap->value_flags[i].fst);
 8008516:	6803      	ldr	r3, [r0, #0]
 8008518:	6946      	ldr	r6, [r0, #20]
 800851a:	f853 8031 	ldr.w	r8, [r3, r1, lsl #3]
 800851e:	f836 e021 	ldrh.w	lr, [r6, r1, lsl #2]
  heap->value_flags[i].fst = f.flags;
  heap->value_flags[i].snd = s.flags;
}

void heap_set_fst(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].fst = value.value;
 8008522:	f843 9031 	str.w	r9, [r3, r1, lsl #3]
cam_value_t get_cam_val(UINT ui, value_flags_t f){
  cam_value_t cvt = { .value = ui, .flags = f };
  return cvt;
}
cam_value_t heap_fst(heap_t *heap, heap_index i) {
  return get_cam_val(heap->cells[i].fst, heap->value_flags[i].fst);
 8008526:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
 800852a:	eb06 0781 	add.w	r7, r6, r1, lsl #2
  heap->value_flags[i].snd = s.flags;
}

void heap_set_fst(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].fst = value.value;
  heap->value_flags[i].fst = value.flags;
 800852e:	f826 c021 	strh.w	ip, [r6, r1, lsl #2]
cam_value_t heap_fst(heap_t *heap, heap_index i) {
  return get_cam_val(heap->cells[i].fst, heap->value_flags[i].fst);
}

cam_value_t heap_snd(heap_t *heap, heap_index i) {
  return get_cam_val(heap->cells[i].snd, heap->value_flags[i].snd);
 8008532:	6863      	ldr	r3, [r4, #4]
 8008534:	887e      	ldrh	r6, [r7, #2]
  heap->cells[i].fst = value.value;
  heap->value_flags[i].fst = value.flags;
}

void heap_set_snd(heap_t *heap, heap_index i, cam_value_t value) {
  heap->cells[i].snd = value.value;
 8008536:	f8c4 8004 	str.w	r8, [r4, #4]
  heap->value_flags[i].snd = value.flags;
 800853a:	f8a7 e002 	strh.w	lr, [r7, #2]
 800853e:	e791      	b.n	8008464 <heap_mark+0x24>
    
  // curr_val is a pointer onto the heap.
  while (!done) {
    // Follow left pointers
    while (is_pointer(curr) &&
	   (heap_index)curr.value != HEAP_NULL &&
 8008540:	4635      	mov	r5, r6
 8008542:	461a      	mov	r2, r3
 8008544:	463e      	mov	r6, r7
 8008546:	4673      	mov	r3, lr
 8008548:	e7b6      	b.n	80084b8 <heap_mark+0x78>
        prev = curr;
        curr = next;
      }
    }
    while  (is_pointer(prev) &&
	    (heap_index)prev.value != HEAP_NULL &&
 800854a:	4611      	mov	r1, r2
 800854c:	46ae      	mov	lr, r5
 800854e:	461a      	mov	r2, r3
 8008550:	4635      	mov	r5, r6
 8008552:	46ac      	mov	ip, r5
 8008554:	4691      	mov	r9, r2
 8008556:	4675      	mov	r5, lr
 8008558:	460a      	mov	r2, r1
 800855a:	e7d9      	b.n	8008510 <heap_mark+0xd0>
        heap_set_fst(heap, curr.value, pv);
        prev = curr;
        curr = next;
      }
    }
    while  (is_pointer(prev) &&
 800855c:	4611      	mov	r1, r2
 800855e:	46ae      	mov	lr, r5
 8008560:	461a      	mov	r2, r3
 8008562:	4635      	mov	r5, r6
 8008564:	e7cd      	b.n	8008502 <heap_mark+0xc2>
 8008566:	bf00      	nop
	...

08008570 <heap_mark_phase.lto_priv.60>:
      get_cam_val(context->stack.data[i], context->stack.flags[i]);
    heap_mark(heap, cv);
  }
}

static void heap_mark_phase(vmc_t *container) {
 8008570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008574:	4604      	mov	r4, r0
 8008576:	b083      	sub	sp, #12
 8008578:	f100 08ef 	add.w	r8, r0, #239	; 0xef
 800857c:	f100 0630 	add.w	r6, r0, #48	; 0x30
 8008580:	f100 09f0 	add.w	r9, r0, #240	; 0xf0
  //  (  &container->contexts[container->current_running_context_id]
  //     , &container->heap);

  /* GC all active contexts */
  for(int i = 0; i < VMC_MAX_CONTEXTS; i++){
    if(container->context_used[i] ){
 8008584:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 8008588:	bbeb      	cbnz	r3, 8008606 <heap_mark_phase.lto_priv.60+0x96>
 800858a:	3630      	adds	r6, #48	; 0x30
  //mark_heap_context
  //  (  &container->contexts[container->current_running_context_id]
  //     , &container->heap);

  /* GC all active contexts */
  for(int i = 0; i < VMC_MAX_CONTEXTS; i++){
 800858c:	454e      	cmp	r6, r9
 800858e:	d1f9      	bne.n	8008584 <heap_mark_phase.lto_priv.60+0x14>
 8008590:	f504 5589 	add.w	r5, r4, #4384	; 0x1120
 8008594:	3510      	adds	r5, #16
 8008596:	4626      	mov	r6, r4
    }
  }

  //GC all the dirty flags associated with the channels
  for(int i = 0; i < MAX_CHANNELS; i++){
    if(container->channels[i].in_use){
 8008598:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 800859c:	b36b      	cbz	r3, 80085fa <heap_mark_phase.lto_priv.60+0x8a>
      // first check if channel is in use
      // and then mark all live dirty flags
      // in the sendq and then in the recvq

      for(int j = 0; j < container->channels[i].sendq.size; j++){
 800859e:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	dd12      	ble.n	80085cc <heap_mark_phase.lto_priv.60+0x5c>
 80085a6:	2700      	movs	r7, #0
 80085a8:	46b8      	mov	r8, r7
	heap_mark(  &container->heap
 80085aa:	f8d6 30f4 	ldr.w	r3, [r6, #244]	; 0xf4
 80085ae:	443b      	add	r3, r7
 80085b0:	330c      	adds	r3, #12
 80085b2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80085b6:	4620      	mov	r0, r4
 80085b8:	f7ff ff42 	bl	8008440 <heap_mark>
    if(container->channels[i].in_use){
      // first check if channel is in use
      // and then mark all live dirty flags
      // in the sendq and then in the recvq

      for(int j = 0; j < container->channels[i].sendq.size; j++){
 80085bc:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
 80085c0:	f108 0801 	add.w	r8, r8, #1
 80085c4:	4543      	cmp	r3, r8
 80085c6:	f107 0714 	add.w	r7, r7, #20
 80085ca:	dcee      	bgt.n	80085aa <heap_mark_phase.lto_priv.60+0x3a>
	// could the message potentially be a heap structure ?
	//heap_mark(  &container->heap
        //            , container->channels[i].sendq.data[j].message);
      }

      for(int j = 0; j < container->channels[i].recvq.size; j++){
 80085cc:	f8d6 3118 	ldr.w	r3, [r6, #280]	; 0x118
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	dd12      	ble.n	80085fa <heap_mark_phase.lto_priv.60+0x8a>
 80085d4:	2700      	movs	r7, #0
 80085d6:	46b8      	mov	r8, r7
	heap_mark(  &container->heap
 80085d8:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 80085dc:	443b      	add	r3, r7
 80085de:	3304      	adds	r3, #4
 80085e0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80085e4:	4620      	mov	r0, r4
 80085e6:	f7ff ff2b 	bl	8008440 <heap_mark>
	// could the message potentially be a heap structure ?
	//heap_mark(  &container->heap
        //            , container->channels[i].sendq.data[j].message);
      }

      for(int j = 0; j < container->channels[i].recvq.size; j++){
 80085ea:	f8d6 3118 	ldr.w	r3, [r6, #280]	; 0x118
 80085ee:	f108 0801 	add.w	r8, r8, #1
 80085f2:	4543      	cmp	r3, r8
 80085f4:	f107 070c 	add.w	r7, r7, #12
 80085f8:	dcee      	bgt.n	80085d8 <heap_mark_phase.lto_priv.60+0x68>
 80085fa:	362c      	adds	r6, #44	; 0x2c
      mark_heap_context(&container->contexts[i], &container->heap);
    }
  }

  //GC all the dirty flags associated with the channels
  for(int i = 0; i < MAX_CHANNELS; i++){
 80085fc:	42ae      	cmp	r6, r5
 80085fe:	d1cb      	bne.n	8008598 <heap_mark_phase.lto_priv.60+0x28>
		    , container->channels[i].recvq.data[j].dirty_flag_pointer);
      }
    }
  }
  DBG_GPIO_CLR(DBG1);
}
 8008600:	b003      	add	sp, #12
 8008602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

static inline void mark_heap_context(Context_t *context, heap_t *heap){
  /* GC Roots - env register, the full stack */

  // run mark from env
  heap_mark(heap, context->env);
 8008606:	4620      	mov	r0, r4
 8008608:	e896 0006 	ldmia.w	r6, {r1, r2}
 800860c:	f7ff ff18 	bl	8008440 <heap_mark>

  // run mark for each element of the stack
  for(unsigned int i = 0; i < context->stack.size; i++){
 8008610:	69b3      	ldr	r3, [r6, #24]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d0b9      	beq.n	800858a <heap_mark_phase.lto_priv.60+0x1a>
 8008616:	2500      	movs	r5, #0
 8008618:	466f      	mov	r7, sp
    cam_value_t cv =
      get_cam_val(context->stack.data[i], context->stack.flags[i]);
 800861a:	6932      	ldr	r2, [r6, #16]
 800861c:	68f3      	ldr	r3, [r6, #12]
 800861e:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
/*   return val_s; */
/* } */

cam_value_t get_cam_val(UINT ui, value_flags_t f){
  cam_value_t cvt = { .value = ui, .flags = f };
  return cvt;
 8008622:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8008626:	f8ad 3000 	strh.w	r3, [sp]
 800862a:	9201      	str	r2, [sp, #4]
    heap_mark(heap, cv);
 800862c:	e897 0006 	ldmia.w	r7, {r1, r2}
 8008630:	4620      	mov	r0, r4
 8008632:	f7ff ff05 	bl	8008440 <heap_mark>

  // run mark from env
  heap_mark(heap, context->env);

  // run mark for each element of the stack
  for(unsigned int i = 0; i < context->stack.size; i++){
 8008636:	69b3      	ldr	r3, [r6, #24]
 8008638:	3501      	adds	r5, #1
 800863a:	429d      	cmp	r5, r3
 800863c:	d3ed      	bcc.n	800861a <heap_mark_phase.lto_priv.60+0xaa>
 800863e:	e7a4      	b.n	800858a <heap_mark_phase.lto_priv.60+0x1a>

08008640 <stack_pop>:
/*   s->data[s->sp] = ptr; */
/*   s->flags[s->sp++] = VALUE_PTR_BIT; */
/*   return 1; */
/* } */
int stack_pop(cam_stack_t *s, cam_register_t *r) {
  if (s->sp == 0) return 0;
 8008640:	6883      	ldr	r3, [r0, #8]
 8008642:	b173      	cbz	r3, 8008662 <stack_pop+0x22>

  s->sp--;
  r->value = s->data[s->sp];
 8008644:	6842      	ldr	r2, [r0, #4]

/*   s->data[s->sp] = ptr; */
/*   s->flags[s->sp++] = VALUE_PTR_BIT; */
/*   return 1; */
/* } */
int stack_pop(cam_stack_t *s, cam_register_t *r) {
 8008646:	b410      	push	{r4}
  if (s->sp == 0) return 0;

  s->sp--;
 8008648:	3b01      	subs	r3, #1
  r->value = s->data[s->sp];
  r->flags = s->flags[s->sp];
 800864a:	6804      	ldr	r4, [r0, #0]
/*   return 1; */
/* } */
int stack_pop(cam_stack_t *s, cam_register_t *r) {
  if (s->sp == 0) return 0;

  s->sp--;
 800864c:	6083      	str	r3, [r0, #8]
  r->value = s->data[s->sp];
 800864e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  r->flags = s->flags[s->sp];
 8008652:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8008656:	800b      	strh	r3, [r1, #0]
  return 1;
 8008658:	2001      	movs	r0, #1
/* } */
int stack_pop(cam_stack_t *s, cam_register_t *r) {
  if (s->sp == 0) return 0;

  s->sp--;
  r->value = s->data[s->sp];
 800865a:	604a      	str	r2, [r1, #4]
  r->flags = s->flags[s->sp];
  return 1;
}
 800865c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008660:	4770      	bx	lr
/*   s->data[s->sp] = ptr; */
/*   s->flags[s->sp++] = VALUE_PTR_BIT; */
/*   return 1; */
/* } */
int stack_pop(cam_stack_t *s, cam_register_t *r) {
  if (s->sp == 0) return 0;
 8008662:	4618      	mov	r0, r3
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
	...

08008670 <stack_push>:
  s->size = num_elt;

  return 1;
}

int stack_push(cam_stack_t *s, cam_value_t cvalue) {
 8008670:	b430      	push	{r4, r5}
 8008672:	b082      	sub	sp, #8
 8008674:	ab02      	add	r3, sp, #8
 8008676:	e903 0006 	stmdb	r3, {r1, r2}
  if (s->sp == s->size) return 0;
 800867a:	6883      	ldr	r3, [r0, #8]
 800867c:	68c2      	ldr	r2, [r0, #12]
 800867e:	4293      	cmp	r3, r2
 8008680:	d00e      	beq.n	80086a0 <stack_push+0x30>
  s->data[s->sp] = cvalue.value;
  s->flags[s->sp++] = cvalue.flags;
 8008682:	e890 0014 	ldmia.w	r0, {r2, r4}
  return 1;
}

int stack_push(cam_stack_t *s, cam_value_t cvalue) {
  if (s->sp == s->size) return 0;
  s->data[s->sp] = cvalue.value;
 8008686:	9d01      	ldr	r5, [sp, #4]
 8008688:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  s->flags[s->sp++] = cvalue.flags;
 800868c:	f8bd 1000 	ldrh.w	r1, [sp]
 8008690:	1c5c      	adds	r4, r3, #1
 8008692:	6084      	str	r4, [r0, #8]
  return 1;
 8008694:	2001      	movs	r0, #1
}

int stack_push(cam_stack_t *s, cam_value_t cvalue) {
  if (s->sp == s->size) return 0;
  s->data[s->sp] = cvalue.value;
  s->flags[s->sp++] = cvalue.flags;
 8008696:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  return 1;
}
 800869a:	b002      	add	sp, #8
 800869c:	bc30      	pop	{r4, r5}
 800869e:	4770      	bx	lr

  return 1;
}

int stack_push(cam_stack_t *s, cam_value_t cvalue) {
  if (s->sp == s->size) return 0;
 80086a0:	2000      	movs	r0, #0
  s->data[s->sp] = cvalue.value;
  s->flags[s->sp++] = cvalue.flags;
  return 1;
}
 80086a2:	b002      	add	sp, #8
 80086a4:	bc30      	pop	{r4, r5}
 80086a6:	4770      	bx	lr
	...

080086b0 <setAlarm.lto_priv.98>:

  return 1;
}


static int setAlarm(Time alarmTime){
 80086b0:	b508      	push	{r3, lr}
Time sys_get_wake_up_time(void){
  return alarm.alarm_time;
}

bool sys_is_alarm_set(void){
  return alarm.active;
 80086b2:	4b09      	ldr	r3, [pc, #36]	; (80086d8 <setAlarm.lto_priv.98+0x28>)
  // if alarm is not set, set it directly
  // else check if the set wakeuptime is more than
  // the requested alarm time only then set alarm

  bool b = true;
  if(!sys_is_alarm_set()){
 80086b4:	781a      	ldrb	r2, [r3, #0]
 80086b6:	b13a      	cbz	r2, 80086c8 <setAlarm.lto_priv.98+0x18>
    b = sys_time_set_wake_up(alarmTime);
  } else {
    Time wakeupTimeSet = sys_get_wake_up_time();
    if(alarmTime < wakeupTimeSet)
 80086b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80086bc:	4299      	cmp	r1, r3
 80086be:	bf08      	it	eq
 80086c0:	4290      	cmpeq	r0, r2
 80086c2:	d301      	bcc.n	80086c8 <setAlarm.lto_priv.98+0x18>
    // something seriously wrong
    DEBUG_PRINT(("Setting wakeup time has failed \n"));
    return -1;
  }

  return 1;
 80086c4:	2001      	movs	r0, #1

}
 80086c6:	bd08      	pop	{r3, pc}
  // else check if the set wakeuptime is more than
  // the requested alarm time only then set alarm

  bool b = true;
  if(!sys_is_alarm_set()){
    b = sys_time_set_wake_up(alarmTime);
 80086c8:	f7fd fb6a 	bl	8005da0 <sys_time_set_wake_up>
    // something seriously wrong
    DEBUG_PRINT(("Setting wakeup time has failed \n"));
    return -1;
  }

  return 1;
 80086cc:	2800      	cmp	r0, #0
 80086ce:	bf0c      	ite	eq
 80086d0:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
 80086d4:	2001      	movne	r0, #1
 80086d6:	bd08      	pop	{r3, pc}
 80086d8:	20009ef8 	.word	0x20009ef8
 80086dc:	00000000 	.word	0x00000000

080086e0 <dispatch>:
  }
  DEBUG_PRINT(("Cannot spawn more threads \n"));
  return -1;
}

int dispatch(vmc_t *container){
 80086e0:	b510      	push	{r4, lr}
 80086e2:	4604      	mov	r4, r0
 80086e4:	b086      	sub	sp, #24
  pq_data_t thread_info;
  int de_q_status = pq_extractMin(&container->rdyQ, &thread_info);
 80086e6:	f500 5091 	add.w	r0, r0, #4640	; 0x1220
 80086ea:	4669      	mov	r1, sp
 80086ec:	3004      	adds	r0, #4
 80086ee:	f7fd f82f 	bl	8005750 <pq_extractMin>
  if (de_q_status == -1){
 80086f2:	1c43      	adds	r3, r0, #1
    DEBUG_PRINT(("Ready Queue is empty\n"));
    container->current_running_context_id = UUID_NONE;
    return -1;
  }
  DEBUG_PRINT(("Queueing\n"));
  container->current_running_context_id = thread_info.context_id;
 80086f4:	bf17      	itett	ne
 80086f6:	f89d 3000 	ldrbne.w	r3, [sp]
    // where processes are blocked and sleeping, waiting
    // for interrupts to arrive. Setting the
    // current_running_context_id = UUID_NONE is an indicator
    // to zephyr to now wait for interrupts;
    DEBUG_PRINT(("Ready Queue is empty\n"));
    container->current_running_context_id = UUID_NONE;
 80086fa:	f884 002c 	strbeq.w	r0, [r4, #44]	; 0x2c
    return -1;
  }
  DEBUG_PRINT(("Queueing\n"));
  container->current_running_context_id = thread_info.context_id;
  return 1;
 80086fe:	2001      	movne	r0, #1
    DEBUG_PRINT(("Ready Queue is empty\n"));
    container->current_running_context_id = UUID_NONE;
    return -1;
  }
  DEBUG_PRINT(("Queueing\n"));
  container->current_running_context_id = thread_info.context_id;
 8008700:	f884 302c 	strbne.w	r3, [r4, #44]	; 0x2c
  return 1;
}
 8008704:	b006      	add	sp, #24
 8008706:	bd10      	pop	{r4, pc}
	...

08008710 <spawn>:
  }
  DEBUG_PRINT(("All channels in current container in use \n"));
  return -1;
}

int spawn(vmc_t *container, uint16_t label){
 8008710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008712:	f100 03ef 	add.w	r3, r0, #239	; 0xef
 8008716:	b08d      	sub	sp, #52	; 0x34
  for(int i = 0; i < VMC_MAX_CONTEXTS; i++){
 8008718:	2400      	movs	r4, #0
    if(container->context_used[i] == false){
 800871a:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800871e:	b135      	cbz	r5, 800872e <spawn+0x1e>
  DEBUG_PRINT(("All channels in current container in use \n"));
  return -1;
}

int spawn(vmc_t *container, uint16_t label){
  for(int i = 0; i < VMC_MAX_CONTEXTS; i++){
 8008720:	3401      	adds	r4, #1
 8008722:	2c04      	cmp	r4, #4
 8008724:	d1f9      	bne.n	800871a <spawn+0xa>
      // so that the parent context can continue running
      return 1;
    }
  }
  DEBUG_PRINT(("Cannot spawn more threads \n"));
  return -1;
 8008726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800872a:	b00d      	add	sp, #52	; 0x34
 800872c:	bdf0      	pop	{r4, r5, r6, r7, pc}
}

int spawn(vmc_t *container, uint16_t label){
  for(int i = 0; i < VMC_MAX_CONTEXTS; i++){
    if(container->context_used[i] == false){
      container->contexts[i].pc = (UINT)label;
 800872e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8008732:	0112      	lsls	r2, r2, #4
 8008734:	1883      	adds	r3, r0, r2
      container->contexts[i].env =
        container->contexts[container->current_running_context_id].env; //copying the environment

      /*** Push label graveyard address on the stack ****/
      INT jump_address = container->code_size - 1;
 8008736:	6a86      	ldr	r6, [r0, #40]	; 0x28
}

int spawn(vmc_t *container, uint16_t label){
  for(int i = 0; i < VMC_MAX_CONTEXTS; i++){
    if(container->context_used[i] == false){
      container->contexts[i].pc = (UINT)label;
 8008738:	6399      	str	r1, [r3, #56]	; 0x38
      container->contexts[i].env =
        container->contexts[container->current_running_context_id].env; //copying the environment
 800873a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c

      /*** Push label graveyard address on the stack ****/
      INT jump_address = container->code_size - 1;
      cam_value_t j_add = { .value = (UINT)jump_address };
 800873e:	9504      	str	r5, [sp, #16]

int spawn(vmc_t *container, uint16_t label){
  for(int i = 0; i < VMC_MAX_CONTEXTS; i++){
    if(container->context_used[i] == false){
      container->contexts[i].pc = (UINT)label;
      container->contexts[i].env =
 8008740:	3301      	adds	r3, #1
 8008742:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008746:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 800874a:	4607      	mov	r7, r0
 800874c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008750:	1c63      	adds	r3, r4, #1
        container->contexts[container->current_running_context_id].env; //copying the environment

      /*** Push label graveyard address on the stack ****/
      INT jump_address = container->code_size - 1;
 8008752:	3e01      	subs	r6, #1

int spawn(vmc_t *container, uint16_t label){
  for(int i = 0; i < VMC_MAX_CONTEXTS; i++){
    if(container->context_used[i] == false){
      container->contexts[i].pc = (UINT)label;
      container->contexts[i].env =
 8008754:	eb03 0343 	add.w	r3, r3, r3, lsl #1
        container->contexts[container->current_running_context_id].env; //copying the environment

      /*** Push label graveyard address on the stack ****/
      INT jump_address = container->code_size - 1;
      cam_value_t j_add = { .value = (UINT)jump_address };
      int q = stack_push(&container->contexts[i].stack, j_add);
 8008758:	443a      	add	r2, r7
      container->contexts[i].env =
        container->contexts[container->current_running_context_id].env; //copying the environment

      /*** Push label graveyard address on the stack ****/
      INT jump_address = container->code_size - 1;
      cam_value_t j_add = { .value = (UINT)jump_address };
 800875a:	9605      	str	r6, [sp, #20]

int spawn(vmc_t *container, uint16_t label){
  for(int i = 0; i < VMC_MAX_CONTEXTS; i++){
    if(container->context_used[i] == false){
      container->contexts[i].pc = (UINT)label;
      container->contexts[i].env =
 800875c:	eb07 1303 	add.w	r3, r7, r3, lsl #4
        container->contexts[container->current_running_context_id].env; //copying the environment

      /*** Push label graveyard address on the stack ****/
      INT jump_address = container->code_size - 1;
      cam_value_t j_add = { .value = (UINT)jump_address };
      int q = stack_push(&container->contexts[i].stack, j_add);
 8008760:	ae04      	add	r6, sp, #16

int spawn(vmc_t *container, uint16_t label){
  for(int i = 0; i < VMC_MAX_CONTEXTS; i++){
    if(container->context_used[i] == false){
      container->contexts[i].pc = (UINT)label;
      container->contexts[i].env =
 8008762:	e883 0003 	stmia.w	r3, {r0, r1}
        container->contexts[container->current_running_context_id].env; //copying the environment

      /*** Push label graveyard address on the stack ****/
      INT jump_address = container->code_size - 1;
      cam_value_t j_add = { .value = (UINT)jump_address };
      int q = stack_push(&container->contexts[i].stack, j_add);
 8008766:	f102 003c 	add.w	r0, r2, #60	; 0x3c
 800876a:	e896 0006 	ldmia.w	r6, {r1, r2}
 800876e:	f7ff ff7f 	bl	8008670 <stack_push>
      if(q == 0){
 8008772:	2800      	cmp	r0, #0
 8008774:	d0d7      	beq.n	8008726 <spawn+0x16>
      }
      /**************************************************/

      container->context_used[i] = true;

      pq_data_t elem = {   .context_id = i
 8008776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800877a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800877e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008782:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
                         , .baseline = TIME_MAX
                         , .deadline = TIME_MAX };
      int j = pq_insert(&container->rdyQ, elem);
 8008786:	ab0c      	add	r3, sp, #48	; 0x30
 8008788:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800878c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
        DEBUG_PRINT(("Stack push has failed"));
        return -1;
      }
      /**************************************************/

      container->context_used[i] = true;
 8008790:	eb07 0e04 	add.w	lr, r7, r4

      pq_data_t elem = {   .context_id = i
 8008794:	f88d 4018 	strb.w	r4, [sp, #24]
                         , .baseline = TIME_MAX
                         , .deadline = TIME_MAX };
      int j = pq_insert(&container->rdyQ, elem);
 8008798:	ab06      	add	r3, sp, #24
        DEBUG_PRINT(("Stack push has failed"));
        return -1;
      }
      /**************************************************/

      container->context_used[i] = true;
 800879a:	2601      	movs	r6, #1

      pq_data_t elem = {   .context_id = i
                         , .baseline = TIME_MAX
                         , .deadline = TIME_MAX };
      int j = pq_insert(&container->rdyQ, elem);
 800879c:	f507 5091 	add.w	r0, r7, #4640	; 0x1220
 80087a0:	cb0c      	ldmia	r3, {r2, r3}
        DEBUG_PRINT(("Stack push has failed"));
        return -1;
      }
      /**************************************************/

      container->context_used[i] = true;
 80087a2:	f88e 60f0 	strb.w	r6, [lr, #240]	; 0xf0

      pq_data_t elem = {   .context_id = i
                         , .baseline = TIME_MAX
                         , .deadline = TIME_MAX };
      int j = pq_insert(&container->rdyQ, elem);
 80087a6:	3004      	adds	r0, #4
 80087a8:	f7fd f892 	bl	80058d0 <pq_insert>
      if(j == -1){
 80087ac:	3001      	adds	r0, #1
 80087ae:	d0ba      	beq.n	8008726 <spawn+0x16>
        return -1;
      }

      // Place the context-id(or process-id) on the environment register
      cam_value_t process_id = { .value = (UINT)i, .flags = 0 };
      container->contexts[container->current_running_context_id].env = process_id;
 80087b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80087b4:	4433      	add	r3, r6
 80087b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80087ba:	011b      	lsls	r3, r3, #4
 80087bc:	18fa      	adds	r2, r7, r3
 80087be:	52fd      	strh	r5, [r7, r3]

      // eval_RTS_spawn should now simply do *pc_idx+=2
      // so that the parent context can continue running
      return 1;
 80087c0:	4630      	mov	r0, r6
        return -1;
      }

      // Place the context-id(or process-id) on the environment register
      cam_value_t process_id = { .value = (UINT)i, .flags = 0 };
      container->contexts[container->current_running_context_id].env = process_id;
 80087c2:	6054      	str	r4, [r2, #4]
 80087c4:	e7b1      	b.n	800872a <spawn+0x1a>
 80087c6:	bf00      	nop
	...

080087d0 <heap_allocate>:
}
/*******************/
/* Heap Allocation */
/*******************/

heap_index heap_allocate(heap_t *heap) {
 80087d0:	b4f0      	push	{r4, r5, r6, r7}
  /* wait for the allocation call to happen and lazily sweep  */
  /* then and instead of returning to the free list return    */
  /* the current index as the place for allocation. Further   */
  /* allocations will keep clearing cells, unmarking them etc */
  
  while (heap->sweep_pos < heap->size_cells) {
 80087d2:	68c3      	ldr	r3, [r0, #12]
 80087d4:	6904      	ldr	r4, [r0, #16]
 80087d6:	42a3      	cmp	r3, r4
}
/*******************/
/* Heap Allocation */
/*******************/

heap_index heap_allocate(heap_t *heap) {
 80087d8:	4601      	mov	r1, r0
  /* wait for the allocation call to happen and lazily sweep  */
  /* then and instead of returning to the free list return    */
  /* the current index as the place for allocation. Further   */
  /* allocations will keep clearing cells, unmarking them etc */
  
  while (heap->sweep_pos < heap->size_cells) {
 80087da:	dd14      	ble.n	8008806 <heap_allocate+0x36>
static inline int is_pointer(cam_value_t v) {
  return (v.flags & VALUE_PTR_BIT);
}

static inline int get_gc_mark(heap_t *heap, heap_index i) {
  return heap->flags[i] & HEAP_GC_MARK_BIT;
 80087dc:	6982      	ldr	r2, [r0, #24]
 80087de:	5d13      	ldrb	r3, [r2, r4]
  /* the current index as the place for allocation. Further   */
  /* allocations will keep clearing cells, unmarking them etc */
  
  while (heap->sweep_pos < heap->size_cells) {

    if (get_gc_mark(heap, heap->sweep_pos)) {
 80087e0:	0618      	lsls	r0, r3, #24
static inline int is_pointer(cam_value_t v) {
  return (v.flags & VALUE_PTR_BIT);
}

static inline int get_gc_mark(heap_t *heap, heap_index i) {
  return heap->flags[i] & HEAP_GC_MARK_BIT;
 80087e2:	4422      	add	r2, r4
  /* the current index as the place for allocation. Further   */
  /* allocations will keep clearing cells, unmarking them etc */
  
  while (heap->sweep_pos < heap->size_cells) {

    if (get_gc_mark(heap, heap->sweep_pos)) {
 80087e4:	d405      	bmi.n	80087f2 <heap_allocate+0x22>
 80087e6:	e014      	b.n	8008812 <heap_allocate+0x42>
static inline int is_pointer(cam_value_t v) {
  return (v.flags & VALUE_PTR_BIT);
}

static inline int get_gc_mark(heap_t *heap, heap_index i) {
  return heap->flags[i] & HEAP_GC_MARK_BIT;
 80087e8:	698a      	ldr	r2, [r1, #24]
 80087ea:	5cd3      	ldrb	r3, [r2, r3]
  /* the current index as the place for allocation. Further   */
  /* allocations will keep clearing cells, unmarking them etc */
  
  while (heap->sweep_pos < heap->size_cells) {

    if (get_gc_mark(heap, heap->sweep_pos)) {
 80087ec:	061d      	lsls	r5, r3, #24
static inline int is_pointer(cam_value_t v) {
  return (v.flags & VALUE_PTR_BIT);
}

static inline int get_gc_mark(heap_t *heap, heap_index i) {
  return heap->flags[i] & HEAP_GC_MARK_BIT;
 80087ee:	4422      	add	r2, r4
  /* the current index as the place for allocation. Further   */
  /* allocations will keep clearing cells, unmarking them etc */
  
  while (heap->sweep_pos < heap->size_cells) {

    if (get_gc_mark(heap, heap->sweep_pos)) {
 80087f0:	d50f      	bpl.n	8008812 <heap_allocate+0x42>
static inline void set_gc_flag(heap_t *heap, heap_index i) {
  heap->flags[i] |= HEAP_GC_FLAG_BIT;
}

static inline void clr_gc_mark(heap_t *heap, heap_index i) {
  heap->flags[i] &= ~HEAP_GC_MARK_BIT;
 80087f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087f6:	7013      	strb	r3, [r2, #0]
  
  while (heap->sweep_pos < heap->size_cells) {

    if (get_gc_mark(heap, heap->sweep_pos)) {
      clr_gc_mark(heap, heap->sweep_pos);
      heap->sweep_pos++;
 80087f8:	690b      	ldr	r3, [r1, #16]
  /* wait for the allocation call to happen and lazily sweep  */
  /* then and instead of returning to the free list return    */
  /* the current index as the place for allocation. Further   */
  /* allocations will keep clearing cells, unmarking them etc */
  
  while (heap->sweep_pos < heap->size_cells) {
 80087fa:	68ca      	ldr	r2, [r1, #12]

    if (get_gc_mark(heap, heap->sweep_pos)) {
      clr_gc_mark(heap, heap->sweep_pos);
      heap->sweep_pos++;
 80087fc:	3301      	adds	r3, #1
  /* wait for the allocation call to happen and lazily sweep  */
  /* then and instead of returning to the free list return    */
  /* the current index as the place for allocation. Further   */
  /* allocations will keep clearing cells, unmarking them etc */
  
  while (heap->sweep_pos < heap->size_cells) {
 80087fe:	429a      	cmp	r2, r3
static inline int is_pointer(cam_value_t v) {
  return (v.flags & VALUE_PTR_BIT);
}

static inline int get_gc_mark(heap_t *heap, heap_index i) {
  return heap->flags[i] & HEAP_GC_MARK_BIT;
 8008800:	461c      	mov	r4, r3
  
  while (heap->sweep_pos < heap->size_cells) {

    if (get_gc_mark(heap, heap->sweep_pos)) {
      clr_gc_mark(heap, heap->sweep_pos);
      heap->sweep_pos++;
 8008802:	610b      	str	r3, [r1, #16]
  /* wait for the allocation call to happen and lazily sweep  */
  /* then and instead of returning to the free list return    */
  /* the current index as the place for allocation. Further   */
  /* allocations will keep clearing cells, unmarking them etc */
  
  while (heap->sweep_pos < heap->size_cells) {
 8008804:	dcf0      	bgt.n	80087e8 <heap_allocate+0x18>
      DBG_GPIO_CLR(DBG0);
      return heap->sweep_pos++;
    }
  }

  heap->sweep_pos = 0;
 8008806:	2300      	movs	r3, #0

  DBG_GPIO_CLR(DBG0);
  return HEAP_NULL;
 8008808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      DBG_GPIO_CLR(DBG0);
      return heap->sweep_pos++;
    }
  }

  heap->sweep_pos = 0;
 800880c:	610b      	str	r3, [r1, #16]

  DBG_GPIO_CLR(DBG0);
  return HEAP_NULL;
}
 800880e:	bcf0      	pop	{r4, r5, r6, r7}
 8008810:	4770      	bx	lr
static inline int get_gc_flag(heap_t *heap, heap_index i) {
  return heap->flags[i] & HEAP_GC_FLAG_BIT;
}

static inline void clr_cell(heap_t *heap, heap_index i) {
  heap->flags[i] = 0;
 8008812:	2300      	movs	r3, #0
 8008814:	7013      	strb	r3, [r2, #0]
  heap->cells[i].fst = 0;
  heap->cells[i].snd = 0;
  heap->value_flags[i].fst = 0;
 8008816:	694d      	ldr	r5, [r1, #20]
  return heap->flags[i] & HEAP_GC_FLAG_BIT;
}

static inline void clr_cell(heap_t *heap, heap_index i) {
  heap->flags[i] = 0;
  heap->cells[i].fst = 0;
 8008818:	680a      	ldr	r2, [r1, #0]
      clr_cell(heap, heap->sweep_pos);
#ifdef HEAP_COLLECT_STATS
      gc_stats.num_allocated ++;
#endif
      DBG_GPIO_CLR(DBG0);
      return heap->sweep_pos++;
 800881a:	6908      	ldr	r0, [r1, #16]
  return heap->flags[i] & HEAP_GC_FLAG_BIT;
}

static inline void clr_cell(heap_t *heap, heap_index i) {
  heap->flags[i] = 0;
  heap->cells[i].fst = 0;
 800881c:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
 8008820:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  heap->cells[i].snd = 0;
  heap->value_flags[i].fst = 0;
 8008824:	eb05 0784 	add.w	r7, r5, r4, lsl #2
      clr_cell(heap, heap->sweep_pos);
#ifdef HEAP_COLLECT_STATS
      gc_stats.num_allocated ++;
#endif
      DBG_GPIO_CLR(DBG0);
      return heap->sweep_pos++;
 8008828:	1c46      	adds	r6, r0, #1
}

static inline void clr_cell(heap_t *heap, heap_index i) {
  heap->flags[i] = 0;
  heap->cells[i].fst = 0;
  heap->cells[i].snd = 0;
 800882a:	6053      	str	r3, [r2, #4]
  heap->value_flags[i].fst = 0;
 800882c:	f825 3024 	strh.w	r3, [r5, r4, lsl #2]
  heap->value_flags[i].snd = 0;
 8008830:	807b      	strh	r3, [r7, #2]
      clr_cell(heap, heap->sweep_pos);
#ifdef HEAP_COLLECT_STATS
      gc_stats.num_allocated ++;
#endif
      DBG_GPIO_CLR(DBG0);
      return heap->sweep_pos++;
 8008832:	610e      	str	r6, [r1, #16]

  heap->sweep_pos = 0;

  DBG_GPIO_CLR(DBG0);
  return HEAP_NULL;
}
 8008834:	bcf0      	pop	{r4, r5, r6, r7}
 8008836:	4770      	bx	lr
	...

08008840 <heap_set>:

cam_value_t heap_snd(heap_t *heap, heap_index i) {
  return get_cam_val(heap->cells[i].snd, heap->value_flags[i].snd);
}

void heap_set(heap_t *heap, heap_index i, cam_value_t f, cam_value_t s) {
 8008840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008842:	b083      	sub	sp, #12
 8008844:	ac02      	add	r4, sp, #8
 8008846:	e904 000c 	stmdb	r4, {r2, r3}
  heap->cells[i].fst = f.value;
 800884a:	6802      	ldr	r2, [r0, #0]
  heap->cells[i].snd = s.value;
  heap->value_flags[i].fst = f.flags;
 800884c:	6943      	ldr	r3, [r0, #20]
cam_value_t heap_snd(heap_t *heap, heap_index i) {
  return get_cam_val(heap->cells[i].snd, heap->value_flags[i].snd);
}

void heap_set(heap_t *heap, heap_index i, cam_value_t f, cam_value_t s) {
  heap->cells[i].fst = f.value;
 800884e:	9e01      	ldr	r6, [sp, #4]
  heap->cells[i].snd = s.value;
 8008850:	9d09      	ldr	r5, [sp, #36]	; 0x24
  heap->value_flags[i].fst = f.flags;
 8008852:	f8bd 7000 	ldrh.w	r7, [sp]
  heap->value_flags[i].snd = s.flags;
 8008856:	f8bd 4020 	ldrh.w	r4, [sp, #32]
cam_value_t heap_snd(heap_t *heap, heap_index i) {
  return get_cam_val(heap->cells[i].snd, heap->value_flags[i].snd);
}

void heap_set(heap_t *heap, heap_index i, cam_value_t f, cam_value_t s) {
  heap->cells[i].fst = f.value;
 800885a:	f842 6031 	str.w	r6, [r2, r1, lsl #3]
 800885e:	eb02 0ec1 	add.w	lr, r2, r1, lsl #3
  heap->cells[i].snd = s.value;
  heap->value_flags[i].fst = f.flags;
 8008862:	eb03 0081 	add.w	r0, r3, r1, lsl #2
  return get_cam_val(heap->cells[i].snd, heap->value_flags[i].snd);
}

void heap_set(heap_t *heap, heap_index i, cam_value_t f, cam_value_t s) {
  heap->cells[i].fst = f.value;
  heap->cells[i].snd = s.value;
 8008866:	f8ce 5004 	str.w	r5, [lr, #4]
  heap->value_flags[i].fst = f.flags;
 800886a:	f823 7021 	strh.w	r7, [r3, r1, lsl #2]
  heap->value_flags[i].snd = s.flags;
 800886e:	8044      	strh	r4, [r0, #2]
}
 8008870:	b003      	add	sp, #12
 8008872:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008880 <heap_snd>:
}
cam_value_t heap_fst(heap_t *heap, heap_index i) {
  return get_cam_val(heap->cells[i].fst, heap->value_flags[i].fst);
}

cam_value_t heap_snd(heap_t *heap, heap_index i) {
 8008880:	b410      	push	{r4}
  return get_cam_val(heap->cells[i].snd, heap->value_flags[i].snd);
 8008882:	680c      	ldr	r4, [r1, #0]
 8008884:	694b      	ldr	r3, [r1, #20]
 8008886:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 800888a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800888e:	6849      	ldr	r1, [r1, #4]
/*   return val_s; */
/* } */

cam_value_t get_cam_val(UINT ui, value_flags_t f){
  cam_value_t cvt = { .value = ui, .flags = f };
  return cvt;
 8008890:	8852      	ldrh	r2, [r2, #2]
 8008892:	8002      	strh	r2, [r0, #0]
 8008894:	6041      	str	r1, [r0, #4]
  return get_cam_val(heap->cells[i].fst, heap->value_flags[i].fst);
}

cam_value_t heap_snd(heap_t *heap, heap_index i) {
  return get_cam_val(heap->cells[i].snd, heap->value_flags[i].snd);
}
 8008896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	0000      	movs	r0, r0
	...

080088a0 <heap_fst>:

cam_value_t get_cam_val(UINT ui, value_flags_t f){
  cam_value_t cvt = { .value = ui, .flags = f };
  return cvt;
}
cam_value_t heap_fst(heap_t *heap, heap_index i) {
 80088a0:	b410      	push	{r4}
  return get_cam_val(heap->cells[i].fst, heap->value_flags[i].fst);
 80088a2:	680c      	ldr	r4, [r1, #0]
 80088a4:	694b      	ldr	r3, [r1, #20]
 80088a6:	f854 1032 	ldr.w	r1, [r4, r2, lsl #3]
/*   return val_s; */
/* } */

cam_value_t get_cam_val(UINT ui, value_flags_t f){
  cam_value_t cvt = { .value = ui, .flags = f };
  return cvt;
 80088aa:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 80088ae:	8002      	strh	r2, [r0, #0]
 80088b0:	6041      	str	r1, [r0, #4]
}
cam_value_t heap_fst(heap_t *heap, heap_index i) {
  return get_cam_val(heap->cells[i].fst, heap->value_flags[i].fst);
}
 80088b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088b6:	4770      	bx	lr
	...

080088c0 <postSync.isra.1.lto_priv.100>:
  DEBUG_PRINT(("Queueing\n"));
  container->current_running_context_id = thread_info.context_id;
  return 1;
}

static int postSync( vmc_t *container
 80088c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088c4:	b08b      	sub	sp, #44	; 0x2c
 80088c6:	460e      	mov	r6, r1
 80088c8:	af02      	add	r7, sp, #8
                   , UUID ctx_id){


  heap_index closure_address = wrap_fptr.value;

  cam_value_t heap_f = heap_fst(&container->heap, closure_address);
 80088ca:	f10d 0910 	add.w	r9, sp, #16
  DEBUG_PRINT(("Queueing\n"));
  container->current_running_context_id = thread_info.context_id;
  return 1;
}

static int postSync( vmc_t *container
 80088ce:	e887 000c 	stmia.w	r7, {r2, r3}
                   , UUID ctx_id){


  heap_index closure_address = wrap_fptr.value;

  cam_value_t heap_f = heap_fst(&container->heap, closure_address);
 80088d2:	4601      	mov	r1, r0
 80088d4:	4632      	mov	r2, r6
  DEBUG_PRINT(("Queueing\n"));
  container->current_running_context_id = thread_info.context_id;
  return 1;
}

static int postSync( vmc_t *container
 80088d6:	4605      	mov	r5, r0
                   , UUID ctx_id){


  heap_index closure_address = wrap_fptr.value;

  cam_value_t heap_f = heap_fst(&container->heap, closure_address);
 80088d8:	4648      	mov	r0, r9
  DEBUG_PRINT(("Queueing\n"));
  container->current_running_context_id = thread_info.context_id;
  return 1;
}

static int postSync( vmc_t *container
 80088da:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
                   , UUID ctx_id){


  heap_index closure_address = wrap_fptr.value;

  cam_value_t heap_f = heap_fst(&container->heap, closure_address);
 80088de:	f7ff ffdf 	bl	80088a0 <heap_fst>
  cam_value_t heap_s = heap_snd(&container->heap, closure_address);
 80088e2:	4632      	mov	r2, r6
 80088e4:	4629      	mov	r1, r5
 80088e6:	a806      	add	r0, sp, #24
                   , UUID ctx_id){


  heap_index closure_address = wrap_fptr.value;

  cam_value_t heap_f = heap_fst(&container->heap, closure_address);
 80088e8:	9e05      	ldr	r6, [sp, #20]
  cam_value_t heap_s = heap_snd(&container->heap, closure_address);
 80088ea:	f7ff ffc9 	bl	8008880 <heap_snd>
 80088ee:	f8dd 801c 	ldr.w	r8, [sp, #28]

  cam_value_t label;


  //update the env
  if(heap_s.value == 4294967295){ // if combinator
 80088f2:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80088f6:	d034      	beq.n	8008962 <postSync.isra.1.lto_priv.100+0xa2>

    container->contexts[ctx_id].env = msg_content;

  } else { // not a combinator but a closure

    cam_value_t val = heap_f;
 80088f8:	e899 0003 	ldmia.w	r9, {r0, r1}
 80088fc:	ae08      	add	r6, sp, #32
 80088fe:	e886 0003 	stmia.w	r6, {r0, r1}
    label = heap_s;

    heap_index hi = vmc_heap_alloc_withGC(container);
 8008902:	4628      	mov	r0, r5
 8008904:	f7fd f85c 	bl	80059c0 <vmc_heap_alloc_withGC>
    if(hi == HEAP_NULL){
 8008908:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  } else { // not a combinator but a closure

    cam_value_t val = heap_f;
    label = heap_s;

    heap_index hi = vmc_heap_alloc_withGC(container);
 800890c:	4681      	mov	r9, r0
    if(hi == HEAP_NULL){
 800890e:	d034      	beq.n	800897a <postSync.isra.1.lto_priv.100+0xba>
      DEBUG_PRINT(("Heap allocation failed in post-syncer"));
      return -1;
    }
    heap_set(&container->heap, hi, val, msg_content);
 8008910:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008914:	e896 000c 	ldmia.w	r6, {r2, r3}
 8008918:	e88d 0003 	stmia.w	sp, {r0, r1}
 800891c:	4649      	mov	r1, r9
 800891e:	4628      	mov	r0, r5
 8008920:	f7ff ff8e 	bl	8008840 <heap_set>
    cam_value_t new_env_pointer =
      { .value = (UINT)hi, .flags = VALUE_PTR_BIT };
    container->contexts[ctx_id].env
      = new_env_pointer;
 8008924:	1c63      	adds	r3, r4, #1
 8008926:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800892a:	011b      	lsls	r3, r3, #4
 800892c:	18ea      	adds	r2, r5, r3
 800892e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008932:	52e9      	strh	r1, [r5, r3]
 8008934:	f8c2 9004 	str.w	r9, [r2, #4]
  }


  // update the PC
  UINT current_pc =
 8008938:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800893c:	0120      	lsls	r0, r4, #4
 800893e:	182c      	adds	r4, r5, r0
    container->contexts[ctx_id].pc;
  cam_value_t j_add = { .value = current_pc };
 8008940:	2300      	movs	r3, #0
      = new_env_pointer;
  }


  // update the PC
  UINT current_pc =
 8008942:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    container->contexts[ctx_id].pc;
  cam_value_t j_add = { .value = current_pc };
 8008944:	9209      	str	r2, [sp, #36]	; 0x24
  int q =
    stack_push(  &container->contexts[ctx_id].stack
 8008946:	4620      	mov	r0, r4


  // update the PC
  UINT current_pc =
    container->contexts[ctx_id].pc;
  cam_value_t j_add = { .value = current_pc };
 8008948:	9308      	str	r3, [sp, #32]
  int q =
 800894a:	303c      	adds	r0, #60	; 0x3c
 800894c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8008950:	f7ff fe8e 	bl	8008670 <stack_push>
    stack_push(  &container->contexts[ctx_id].stack
               , j_add);
  if(q == 0){
 8008954:	b188      	cbz	r0, 800897a <postSync.isra.1.lto_priv.100+0xba>
    DEBUG_PRINT(("Stack push failed in post-syncer"));
    return -1;
  }

  container->contexts[ctx_id].pc = label.value;
 8008956:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38

  return 1;
 800895a:	2001      	movs	r0, #1

}
 800895c:	b00b      	add	sp, #44	; 0x2c
 800895e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  //update the env
  if(heap_s.value == 4294967295){ // if combinator

    label = heap_f;

    container->contexts[ctx_id].env = msg_content;
 8008962:	1c63      	adds	r3, r4, #1
 8008964:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008968:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800896c:	eb05 1303 	add.w	r3, r5, r3, lsl #4


  //update the env
  if(heap_s.value == 4294967295){ // if combinator

    label = heap_f;
 8008970:	46b0      	mov	r8, r6

    container->contexts[ctx_id].env = msg_content;
 8008972:	e883 0003 	stmia.w	r3, {r0, r1}
 8008976:	ae08      	add	r6, sp, #32
 8008978:	e7de      	b.n	8008938 <postSync.isra.1.lto_priv.100+0x78>
  int q =
    stack_push(  &container->contexts[ctx_id].stack
               , j_add);
  if(q == 0){
    DEBUG_PRINT(("Stack push failed in post-syncer"));
    return -1;
 800897a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800897e:	e7ed      	b.n	800895c <postSync.isra.1.lto_priv.100+0x9c>

08008980 <message_pass.lto_priv.97>:

static int message_pass( vmc_t *container
                       , UUID ctx_id
                       , cam_value_t msg
                       , UUID chan_id
                       , event_type_t ety){
 8008980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	b091      	sub	sp, #68	; 0x44
  //This function looks at the environment of the blocked context;
  // It finds the event which demanded synchronization and checks
  // if there are post synchronization actions associated with it
  // If yes; it calls postSync otherwise simply places the msg on the env
  cam_value_t event = container->contexts[ctx_id].env;
 8008986:	f101 0901 	add.w	r9, r1, #1

static int message_pass( vmc_t *container
                       , UUID ctx_id
                       , cam_value_t msg
                       , UUID chan_id
                       , event_type_t ety){
 800898a:	9103      	str	r1, [sp, #12]
  //This function looks at the environment of the blocked context;
  // It finds the event which demanded synchronization and checks
  // if there are post synchronization actions associated with it
  // If yes; it calls postSync otherwise simply places the msg on the env
  cam_value_t event = container->contexts[ctx_id].env;
 800898c:	eb09 0149 	add.w	r1, r9, r9, lsl #1
 8008990:	eb00 1101 	add.w	r1, r0, r1, lsl #4

static int message_pass( vmc_t *container
                       , UUID ctx_id
                       , cam_value_t msg
                       , UUID chan_id
                       , event_type_t ety){
 8008994:	f10d 0810 	add.w	r8, sp, #16
 8008998:	e888 000c 	stmia.w	r8, {r2, r3}
  //This function looks at the environment of the blocked context;
  // It finds the event which demanded synchronization and checks
  // if there are post synchronization actions associated with it
  // If yes; it calls postSync otherwise simply places the msg on the env
  cam_value_t event = container->contexts[ctx_id].env;
  heap_index index  = event.value;
 800899c:	f8d1 b004 	ldr.w	fp, [r1, #4]

static int message_pass( vmc_t *container
                       , UUID ctx_id
                       , cam_value_t msg
                       , UUID chan_id
                       , event_type_t ety){
 80089a0:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80089a4:	f89d 606c 	ldrb.w	r6, [sp, #108]	; 0x6c
 80089a8:	4604      	mov	r4, r0
  // if there are post synchronization actions associated with it
  // If yes; it calls postSync otherwise simply places the msg on the env
  cam_value_t event = container->contexts[ctx_id].env;
  heap_index index  = event.value;
  do{
    cam_value_t cam_evt_pointer = heap_fst(&container->heap, index);
 80089aa:	a806      	add	r0, sp, #24
 80089ac:	4621      	mov	r1, r4
 80089ae:	465a      	mov	r2, fp
 80089b0:	f7ff ff76 	bl	80088a0 <heap_fst>

    cam_value_t base_evt_ptr =
 80089b4:	a808      	add	r0, sp, #32
 80089b6:	4621      	mov	r1, r4
 80089b8:	9a07      	ldr	r2, [sp, #28]
 80089ba:	f7ff ff71 	bl	80088a0 <heap_fst>
      heap_fst(&container->heap, (heap_index)cam_evt_pointer.value);

    cam_value_t base_evt_simple =
      heap_fst(&container->heap, (heap_index)base_evt_ptr.value);
 80089be:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    cam_value_t cam_evt_pointer = heap_fst(&container->heap, index);

    cam_value_t base_evt_ptr =
      heap_fst(&container->heap, (heap_index)cam_evt_pointer.value);

    cam_value_t base_evt_simple =
 80089c2:	a80a      	add	r0, sp, #40	; 0x28
 80089c4:	4652      	mov	r2, sl
 80089c6:	4621      	mov	r1, r4
 80089c8:	f7ff ff6a 	bl	80088a0 <heap_fst>
 80089cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
      heap_fst(&container->heap, (heap_index)base_evt_ptr.value);

    cam_value_t wrap_fptr =
 80089ce:	4652      	mov	r2, sl
 80089d0:	a80c      	add	r0, sp, #48	; 0x30
 80089d2:	4621      	mov	r1, r4
 80089d4:	f7ff ff54 	bl	8008880 <heap_snd>
    base_evt_simple_t bevt_simple =
      {   .e_type     = extract_bits(base_evt_simple.value,  8, 8)
        , .channel_id = extract_bits(base_evt_simple.value,  0, 8)
      };

    if((bevt_simple.e_type == ety) && (bevt_simple.channel_id == chan_id)){
 80089d8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80089dc:	42b3      	cmp	r3, r6
      } else {
        container->contexts[ctx_id].env = msg;
        return 1;
      }
    }
    cam_value_t pointer_to_next = heap_snd(&container->heap, index);
 80089de:	465a      	mov	r2, fp
 80089e0:	a80e      	add	r0, sp, #56	; 0x38
 80089e2:	4621      	mov	r1, r4
    base_evt_simple_t bevt_simple =
      {   .e_type     = extract_bits(base_evt_simple.value,  8, 8)
        , .channel_id = extract_bits(base_evt_simple.value,  0, 8)
      };

    if((bevt_simple.e_type == ety) && (bevt_simple.channel_id == chan_id)){
 80089e4:	b2ed      	uxtb	r5, r5
      heap_fst(&container->heap, (heap_index)cam_evt_pointer.value);

    cam_value_t base_evt_simple =
      heap_fst(&container->heap, (heap_index)base_evt_ptr.value);

    cam_value_t wrap_fptr =
 80089e6:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
    base_evt_simple_t bevt_simple =
      {   .e_type     = extract_bits(base_evt_simple.value,  8, 8)
        , .channel_id = extract_bits(base_evt_simple.value,  0, 8)
      };

    if((bevt_simple.e_type == ety) && (bevt_simple.channel_id == chan_id)){
 80089ea:	d101      	bne.n	80089f0 <message_pass.lto_priv.97+0x70>
 80089ec:	42bd      	cmp	r5, r7
 80089ee:	d00a      	beq.n	8008a06 <message_pass.lto_priv.97+0x86>
      } else {
        container->contexts[ctx_id].env = msg;
        return 1;
      }
    }
    cam_value_t pointer_to_next = heap_snd(&container->heap, index);
 80089f0:	f7ff ff46 	bl	8008880 <heap_snd>
    index = (heap_index)pointer_to_next.value;
 80089f4:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c


  } while(index != HEAP_NULL);
 80089f8:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 80089fc:	d1d5      	bne.n	80089aa <message_pass.lto_priv.97+0x2a>

  return -1; // could not find the right event to sync
 80089fe:	4658      	mov	r0, fp
}
 8008a00:	b011      	add	sp, #68	; 0x44
 8008a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   .e_type     = extract_bits(base_evt_simple.value,  8, 8)
        , .channel_id = extract_bits(base_evt_simple.value,  0, 8)
      };

    if((bevt_simple.e_type == ety) && (bevt_simple.channel_id == chan_id)){
      if((heap_index)wrap_fptr.value != HEAP_NULL){
 8008a06:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8008a0a:	d00f      	beq.n	8008a2c <message_pass.lto_priv.97+0xac>

        int q = postSync( container
 8008a0c:	9b03      	ldr	r3, [sp, #12]
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	e898 000c 	ldmia.w	r8, {r2, r3}
 8008a14:	4620      	mov	r0, r4
 8008a16:	4671      	mov	r1, lr
 8008a18:	f7ff ff52 	bl	80088c0 <postSync.isra.1.lto_priv.100>
                        , ctx_id);
        if(q == -1){
          DEBUG_PRINT(("Post synchronization error\n"));
          return q;
        }
        return 1;
 8008a1c:	1c43      	adds	r3, r0, #1
 8008a1e:	bf0c      	ite	eq
 8008a20:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
 8008a24:	2001      	movne	r0, #1


  } while(index != HEAP_NULL);

  return -1; // could not find the right event to sync
}
 8008a26:	b011      	add	sp, #68	; 0x44
 8008a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          return q;
        }
        return 1;

      } else {
        container->contexts[ctx_id].env = msg;
 8008a2c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8008a30:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8008a34:	eb04 1409 	add.w	r4, r4, r9, lsl #4
 8008a38:	e884 0003 	stmia.w	r4, {r0, r1}
        return 1;
 8008a3c:	2001      	movs	r0, #1


  } while(index != HEAP_NULL);

  return -1; // could not find the right event to sync
}
 8008a3e:	b011      	add	sp, #68	; 0x44
 8008a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08008a50 <chan_send_q_dequeue>:

}

int chan_send_q_dequeue(chan_send_queue_t *q, send_data_t *send_data){

  if (is_empty(q)){
 8008a50:	6903      	ldr	r3, [r0, #16]
  q->size = q->size + 1;
  return 1;

}

int chan_send_q_dequeue(chan_send_queue_t *q, send_data_t *send_data){
 8008a52:	b470      	push	{r4, r5, r6}
 8008a54:	4606      	mov	r6, r0

  if (is_empty(q)){
 8008a56:	b1c3      	cbz	r3, 8008a8a <chan_send_q_dequeue+0x3a>
    DEBUG_PRINT(("Chan send queue is empty\n"));
    return -1;
  }
  *send_data = q->data[q->front];
 8008a58:	6885      	ldr	r5, [r0, #8]
 8008a5a:	6803      	ldr	r3, [r0, #0]
 8008a5c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8008a60:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8008a64:	460c      	mov	r4, r1
 8008a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a6a:	682b      	ldr	r3, [r5, #0]
 8008a6c:	6023      	str	r3, [r4, #0]
  q->front = (q->front + 1)%q->capacity;
 8008a6e:	68b3      	ldr	r3, [r6, #8]
 8008a70:	6870      	ldr	r0, [r6, #4]
  q->size = q->size - 1;
 8008a72:	6932      	ldr	r2, [r6, #16]
  if (is_empty(q)){
    DEBUG_PRINT(("Chan send queue is empty\n"));
    return -1;
  }
  *send_data = q->data[q->front];
  q->front = (q->front + 1)%q->capacity;
 8008a74:	3301      	adds	r3, #1
  q->size = q->size - 1;
 8008a76:	3a01      	subs	r2, #1
  if (is_empty(q)){
    DEBUG_PRINT(("Chan send queue is empty\n"));
    return -1;
  }
  *send_data = q->data[q->front];
  q->front = (q->front + 1)%q->capacity;
 8008a78:	fb93 f1f0 	sdiv	r1, r3, r0
 8008a7c:	fb00 3311 	mls	r3, r0, r1, r3
 8008a80:	60b3      	str	r3, [r6, #8]
  q->size = q->size - 1;
 8008a82:	6132      	str	r2, [r6, #16]
  return 1;
 8008a84:	2001      	movs	r0, #1
}
 8008a86:	bc70      	pop	{r4, r5, r6}
 8008a88:	4770      	bx	lr

int chan_send_q_dequeue(chan_send_queue_t *q, send_data_t *send_data){

  if (is_empty(q)){
    DEBUG_PRINT(("Chan send queue is empty\n"));
    return -1;
 8008a8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a8e:	e7fa      	b.n	8008a86 <chan_send_q_dequeue+0x36>

08008a90 <chan_recv_q_dequeue>:

}

int chan_recv_q_dequeue(chan_recv_queue_t *q, recv_data_t *chan_data){

  if (is_empty(q)){
 8008a90:	6902      	ldr	r2, [r0, #16]
  q->size = q->size + 1;
  return 1;

}

int chan_recv_q_dequeue(chan_recv_queue_t *q, recv_data_t *chan_data){
 8008a92:	4603      	mov	r3, r0

  if (is_empty(q)){
 8008a94:	b1ca      	cbz	r2, 8008aca <chan_recv_q_dequeue+0x3a>
  q->size = q->size + 1;
  return 1;

}

int chan_recv_q_dequeue(chan_recv_queue_t *q, recv_data_t *chan_data){
 8008a96:	b410      	push	{r4}

  if (is_empty(q)){
    DEBUG_PRINT(("Chan recv queue is empty\n"));
    return -1;
  }
  *chan_data = q->data[q->front];
 8008a98:	6882      	ldr	r2, [r0, #8]
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	6801      	ldr	r1, [r0, #0]
 8008a9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008aa2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8008aa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8008aa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  q->front = (q->front + 1)%q->capacity;
 8008aac:	689a      	ldr	r2, [r3, #8]
 8008aae:	685c      	ldr	r4, [r3, #4]
  q->size = q->size - 1;
 8008ab0:	6919      	ldr	r1, [r3, #16]
  if (is_empty(q)){
    DEBUG_PRINT(("Chan recv queue is empty\n"));
    return -1;
  }
  *chan_data = q->data[q->front];
  q->front = (q->front + 1)%q->capacity;
 8008ab2:	3201      	adds	r2, #1
  q->size = q->size - 1;
 8008ab4:	3901      	subs	r1, #1
  if (is_empty(q)){
    DEBUG_PRINT(("Chan recv queue is empty\n"));
    return -1;
  }
  *chan_data = q->data[q->front];
  q->front = (q->front + 1)%q->capacity;
 8008ab6:	fb92 f0f4 	sdiv	r0, r2, r4
 8008aba:	fb04 2210 	mls	r2, r4, r0, r2
 8008abe:	609a      	str	r2, [r3, #8]
  q->size = q->size - 1;
  return 1;
 8008ac0:	2001      	movs	r0, #1
    DEBUG_PRINT(("Chan recv queue is empty\n"));
    return -1;
  }
  *chan_data = q->data[q->front];
  q->front = (q->front + 1)%q->capacity;
  q->size = q->size - 1;
 8008ac2:	6119      	str	r1, [r3, #16]
  return 1;
}
 8008ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ac8:	4770      	bx	lr

int chan_recv_q_dequeue(chan_recv_queue_t *q, recv_data_t *chan_data){

  if (is_empty(q)){
    DEBUG_PRINT(("Chan recv queue is empty\n"));
    return -1;
 8008aca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ace:	4770      	bx	lr

08008ad0 <memset>:
 8008ad0:	b470      	push	{r4, r5, r6}
 8008ad2:	0784      	lsls	r4, r0, #30
 8008ad4:	d046      	beq.n	8008b64 <memset+0x94>
 8008ad6:	1e54      	subs	r4, r2, #1
 8008ad8:	2a00      	cmp	r2, #0
 8008ada:	d041      	beq.n	8008b60 <memset+0x90>
 8008adc:	b2cd      	uxtb	r5, r1
 8008ade:	4603      	mov	r3, r0
 8008ae0:	e002      	b.n	8008ae8 <memset+0x18>
 8008ae2:	1e62      	subs	r2, r4, #1
 8008ae4:	b3e4      	cbz	r4, 8008b60 <memset+0x90>
 8008ae6:	4614      	mov	r4, r2
 8008ae8:	f803 5b01 	strb.w	r5, [r3], #1
 8008aec:	079a      	lsls	r2, r3, #30
 8008aee:	d1f8      	bne.n	8008ae2 <memset+0x12>
 8008af0:	2c03      	cmp	r4, #3
 8008af2:	d92e      	bls.n	8008b52 <memset+0x82>
 8008af4:	b2cd      	uxtb	r5, r1
 8008af6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8008afa:	2c0f      	cmp	r4, #15
 8008afc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8008b00:	d919      	bls.n	8008b36 <memset+0x66>
 8008b02:	f103 0210 	add.w	r2, r3, #16
 8008b06:	4626      	mov	r6, r4
 8008b08:	3e10      	subs	r6, #16
 8008b0a:	2e0f      	cmp	r6, #15
 8008b0c:	f842 5c10 	str.w	r5, [r2, #-16]
 8008b10:	f842 5c0c 	str.w	r5, [r2, #-12]
 8008b14:	f842 5c08 	str.w	r5, [r2, #-8]
 8008b18:	f842 5c04 	str.w	r5, [r2, #-4]
 8008b1c:	f102 0210 	add.w	r2, r2, #16
 8008b20:	d8f2      	bhi.n	8008b08 <memset+0x38>
 8008b22:	f1a4 0210 	sub.w	r2, r4, #16
 8008b26:	f022 020f 	bic.w	r2, r2, #15
 8008b2a:	f004 040f 	and.w	r4, r4, #15
 8008b2e:	3210      	adds	r2, #16
 8008b30:	2c03      	cmp	r4, #3
 8008b32:	4413      	add	r3, r2
 8008b34:	d90d      	bls.n	8008b52 <memset+0x82>
 8008b36:	461e      	mov	r6, r3
 8008b38:	4622      	mov	r2, r4
 8008b3a:	3a04      	subs	r2, #4
 8008b3c:	2a03      	cmp	r2, #3
 8008b3e:	f846 5b04 	str.w	r5, [r6], #4
 8008b42:	d8fa      	bhi.n	8008b3a <memset+0x6a>
 8008b44:	1f22      	subs	r2, r4, #4
 8008b46:	f022 0203 	bic.w	r2, r2, #3
 8008b4a:	3204      	adds	r2, #4
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f004 0403 	and.w	r4, r4, #3
 8008b52:	b12c      	cbz	r4, 8008b60 <memset+0x90>
 8008b54:	b2c9      	uxtb	r1, r1
 8008b56:	441c      	add	r4, r3
 8008b58:	f803 1b01 	strb.w	r1, [r3], #1
 8008b5c:	42a3      	cmp	r3, r4
 8008b5e:	d1fb      	bne.n	8008b58 <memset+0x88>
 8008b60:	bc70      	pop	{r4, r5, r6}
 8008b62:	4770      	bx	lr
 8008b64:	4614      	mov	r4, r2
 8008b66:	4603      	mov	r3, r0
 8008b68:	e7c2      	b.n	8008af0 <memset+0x20>
 8008b6a:	bf00      	nop

08008b6c <_vsnprintf_r>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	2a00      	cmp	r2, #0
 8008b70:	b09a      	sub	sp, #104	; 0x68
 8008b72:	4605      	mov	r5, r0
 8008b74:	db2f      	blt.n	8008bd6 <_vsnprintf_r+0x6a>
 8008b76:	4614      	mov	r4, r2
 8008b78:	461a      	mov	r2, r3
 8008b7a:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b7e:	9100      	str	r1, [sp, #0]
 8008b80:	9104      	str	r1, [sp, #16]
 8008b82:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008b86:	d011      	beq.n	8008bac <_vsnprintf_r+0x40>
 8008b88:	3c01      	subs	r4, #1
 8008b8a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8008b8e:	4669      	mov	r1, sp
 8008b90:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008b92:	9402      	str	r4, [sp, #8]
 8008b94:	9405      	str	r4, [sp, #20]
 8008b96:	f8ad 600e 	strh.w	r6, [sp, #14]
 8008b9a:	f000 f831 	bl	8008c00 <_svfprintf_r>
 8008b9e:	1c42      	adds	r2, r0, #1
 8008ba0:	db16      	blt.n	8008bd0 <_vsnprintf_r+0x64>
 8008ba2:	9b00      	ldr	r3, [sp, #0]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	701a      	strb	r2, [r3, #0]
 8008ba8:	b01a      	add	sp, #104	; 0x68
 8008baa:	bd70      	pop	{r4, r5, r6, pc}
 8008bac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008bae:	9402      	str	r4, [sp, #8]
 8008bb0:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8008bb4:	4669      	mov	r1, sp
 8008bb6:	9405      	str	r4, [sp, #20]
 8008bb8:	f8ad 600e 	strh.w	r6, [sp, #14]
 8008bbc:	f000 f820 	bl	8008c00 <_svfprintf_r>
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	db01      	blt.n	8008bc8 <_vsnprintf_r+0x5c>
 8008bc4:	b01a      	add	sp, #104	; 0x68
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
 8008bc8:	238b      	movs	r3, #139	; 0x8b
 8008bca:	602b      	str	r3, [r5, #0]
 8008bcc:	b01a      	add	sp, #104	; 0x68
 8008bce:	bd70      	pop	{r4, r5, r6, pc}
 8008bd0:	238b      	movs	r3, #139	; 0x8b
 8008bd2:	602b      	str	r3, [r5, #0]
 8008bd4:	e7e5      	b.n	8008ba2 <_vsnprintf_r+0x36>
 8008bd6:	238b      	movs	r3, #139	; 0x8b
 8008bd8:	6003      	str	r3, [r0, #0]
 8008bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bde:	e7f1      	b.n	8008bc4 <_vsnprintf_r+0x58>

08008be0 <vsnprintf>:
 8008be0:	b530      	push	{r4, r5, lr}
 8008be2:	b083      	sub	sp, #12
 8008be4:	4c05      	ldr	r4, [pc, #20]	; (8008bfc <vsnprintf+0x1c>)
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	6824      	ldr	r4, [r4, #0]
 8008bea:	460d      	mov	r5, r1
 8008bec:	4613      	mov	r3, r2
 8008bee:	4601      	mov	r1, r0
 8008bf0:	462a      	mov	r2, r5
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f7ff ffba 	bl	8008b6c <_vsnprintf_r>
 8008bf8:	b003      	add	sp, #12
 8008bfa:	bd30      	pop	{r4, r5, pc}
 8008bfc:	20000d28 	.word	0x20000d28

08008c00 <_svfprintf_r>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	b0bf      	sub	sp, #252	; 0xfc
 8008c06:	4689      	mov	r9, r1
 8008c08:	9206      	str	r2, [sp, #24]
 8008c0a:	930a      	str	r3, [sp, #40]	; 0x28
 8008c0c:	9004      	str	r0, [sp, #16]
 8008c0e:	f002 fa45 	bl	800b09c <_localeconv_r>
 8008c12:	6803      	ldr	r3, [r0, #0]
 8008c14:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c16:	4618      	mov	r0, r3
 8008c18:	f003 f848 	bl	800bcac <strlen>
 8008c1c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008c20:	9014      	str	r0, [sp, #80]	; 0x50
 8008c22:	061a      	lsls	r2, r3, #24
 8008c24:	d504      	bpl.n	8008c30 <_svfprintf_r+0x30>
 8008c26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f001 80a1 	beq.w	8009d72 <_svfprintf_r+0x1172>
 8008c30:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8008e98 <_svfprintf_r+0x298>
 8008c34:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008c38:	2300      	movs	r3, #0
 8008c3a:	af2e      	add	r7, sp, #184	; 0xb8
 8008c3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c3e:	9323      	str	r3, [sp, #140]	; 0x8c
 8008c40:	9322      	str	r3, [sp, #136]	; 0x88
 8008c42:	9312      	str	r3, [sp, #72]	; 0x48
 8008c44:	9315      	str	r3, [sp, #84]	; 0x54
 8008c46:	9307      	str	r3, [sp, #28]
 8008c48:	9721      	str	r7, [sp, #132]	; 0x84
 8008c4a:	463c      	mov	r4, r7
 8008c4c:	464e      	mov	r6, r9
 8008c4e:	9d06      	ldr	r5, [sp, #24]
 8008c50:	782b      	ldrb	r3, [r5, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f000 80a9 	beq.w	8008daa <_svfprintf_r+0x1aa>
 8008c58:	2b25      	cmp	r3, #37	; 0x25
 8008c5a:	d102      	bne.n	8008c62 <_svfprintf_r+0x62>
 8008c5c:	e0a5      	b.n	8008daa <_svfprintf_r+0x1aa>
 8008c5e:	2b25      	cmp	r3, #37	; 0x25
 8008c60:	d003      	beq.n	8008c6a <_svfprintf_r+0x6a>
 8008c62:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1f9      	bne.n	8008c5e <_svfprintf_r+0x5e>
 8008c6a:	9b06      	ldr	r3, [sp, #24]
 8008c6c:	1aeb      	subs	r3, r5, r3
 8008c6e:	b173      	cbz	r3, 8008c8e <_svfprintf_r+0x8e>
 8008c70:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008c72:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8008c74:	9806      	ldr	r0, [sp, #24]
 8008c76:	6020      	str	r0, [r4, #0]
 8008c78:	3201      	adds	r2, #1
 8008c7a:	4419      	add	r1, r3
 8008c7c:	2a07      	cmp	r2, #7
 8008c7e:	6063      	str	r3, [r4, #4]
 8008c80:	9123      	str	r1, [sp, #140]	; 0x8c
 8008c82:	9222      	str	r2, [sp, #136]	; 0x88
 8008c84:	dc72      	bgt.n	8008d6c <_svfprintf_r+0x16c>
 8008c86:	3408      	adds	r4, #8
 8008c88:	9a07      	ldr	r2, [sp, #28]
 8008c8a:	441a      	add	r2, r3
 8008c8c:	9207      	str	r2, [sp, #28]
 8008c8e:	782b      	ldrb	r3, [r5, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f000 87cb 	beq.w	8009c2c <_svfprintf_r+0x102c>
 8008c96:	2300      	movs	r3, #0
 8008c98:	1c69      	adds	r1, r5, #1
 8008c9a:	786d      	ldrb	r5, [r5, #1]
 8008c9c:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	9308      	str	r3, [sp, #32]
 8008ca4:	9303      	str	r3, [sp, #12]
 8008ca6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008caa:	1c4b      	adds	r3, r1, #1
 8008cac:	f1a5 0120 	sub.w	r1, r5, #32
 8008cb0:	2958      	cmp	r1, #88	; 0x58
 8008cb2:	f200 83e4 	bhi.w	800947e <_svfprintf_r+0x87e>
 8008cb6:	e8df f011 	tbh	[pc, r1, lsl #1]
 8008cba:	0277      	.short	0x0277
 8008cbc:	03e203e2 	.word	0x03e203e2
 8008cc0:	03e2037b 	.word	0x03e2037b
 8008cc4:	03e203e2 	.word	0x03e203e2
 8008cc8:	03e203e2 	.word	0x03e203e2
 8008ccc:	02f703e2 	.word	0x02f703e2
 8008cd0:	03e20214 	.word	0x03e20214
 8008cd4:	021801fb 	.word	0x021801fb
 8008cd8:	038203e2 	.word	0x038203e2
 8008cdc:	02c102c1 	.word	0x02c102c1
 8008ce0:	02c102c1 	.word	0x02c102c1
 8008ce4:	02c102c1 	.word	0x02c102c1
 8008ce8:	02c102c1 	.word	0x02c102c1
 8008cec:	03e202c1 	.word	0x03e202c1
 8008cf0:	03e203e2 	.word	0x03e203e2
 8008cf4:	03e203e2 	.word	0x03e203e2
 8008cf8:	03e203e2 	.word	0x03e203e2
 8008cfc:	03e203e2 	.word	0x03e203e2
 8008d00:	02d003e2 	.word	0x02d003e2
 8008d04:	03e20391 	.word	0x03e20391
 8008d08:	03e20391 	.word	0x03e20391
 8008d0c:	03e203e2 	.word	0x03e203e2
 8008d10:	037403e2 	.word	0x037403e2
 8008d14:	03e203e2 	.word	0x03e203e2
 8008d18:	03e2030c 	.word	0x03e2030c
 8008d1c:	03e203e2 	.word	0x03e203e2
 8008d20:	03e203e2 	.word	0x03e203e2
 8008d24:	03e2032a 	.word	0x03e2032a
 8008d28:	034403e2 	.word	0x034403e2
 8008d2c:	03e203e2 	.word	0x03e203e2
 8008d30:	03e203e2 	.word	0x03e203e2
 8008d34:	03e203e2 	.word	0x03e203e2
 8008d38:	03e203e2 	.word	0x03e203e2
 8008d3c:	03e203e2 	.word	0x03e203e2
 8008d40:	0233035f 	.word	0x0233035f
 8008d44:	03910391 	.word	0x03910391
 8008d48:	03050391 	.word	0x03050391
 8008d4c:	03e20233 	.word	0x03e20233
 8008d50:	02ed03e2 	.word	0x02ed03e2
 8008d54:	028503e2 	.word	0x028503e2
 8008d58:	03cb0202 	.word	0x03cb0202
 8008d5c:	03e2027e 	.word	0x03e2027e
 8008d60:	03e20299 	.word	0x03e20299
 8008d64:	03e2007a 	.word	0x03e2007a
 8008d68:	025103e2 	.word	0x025103e2
 8008d6c:	9804      	ldr	r0, [sp, #16]
 8008d6e:	9303      	str	r3, [sp, #12]
 8008d70:	4631      	mov	r1, r6
 8008d72:	aa21      	add	r2, sp, #132	; 0x84
 8008d74:	f002 ffc8 	bl	800bd08 <__ssprint_r>
 8008d78:	b950      	cbnz	r0, 8008d90 <_svfprintf_r+0x190>
 8008d7a:	463c      	mov	r4, r7
 8008d7c:	9b03      	ldr	r3, [sp, #12]
 8008d7e:	e783      	b.n	8008c88 <_svfprintf_r+0x88>
 8008d80:	9804      	ldr	r0, [sp, #16]
 8008d82:	4631      	mov	r1, r6
 8008d84:	aa21      	add	r2, sp, #132	; 0x84
 8008d86:	f002 ffbf 	bl	800bd08 <__ssprint_r>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	f000 818c 	beq.w	80090a8 <_svfprintf_r+0x4a8>
 8008d90:	46b1      	mov	r9, r6
 8008d92:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008d96:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008d9a:	9b07      	ldr	r3, [sp, #28]
 8008d9c:	bf18      	it	ne
 8008d9e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8008da2:	4618      	mov	r0, r3
 8008da4:	b03f      	add	sp, #252	; 0xfc
 8008da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008daa:	9d06      	ldr	r5, [sp, #24]
 8008dac:	e76f      	b.n	8008c8e <_svfprintf_r+0x8e>
 8008dae:	9306      	str	r3, [sp, #24]
 8008db0:	9b03      	ldr	r3, [sp, #12]
 8008db2:	0698      	lsls	r0, r3, #26
 8008db4:	f140 82b4 	bpl.w	8009320 <_svfprintf_r+0x720>
 8008db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dba:	f103 0907 	add.w	r9, r3, #7
 8008dbe:	f029 0307 	bic.w	r3, r9, #7
 8008dc2:	f103 0208 	add.w	r2, r3, #8
 8008dc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dca:	920a      	str	r2, [sp, #40]	; 0x28
 8008dcc:	2301      	movs	r3, #1
 8008dce:	f04f 0c00 	mov.w	ip, #0
 8008dd2:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8008dd6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008dda:	f1ba 0f00 	cmp.w	sl, #0
 8008dde:	db03      	blt.n	8008de8 <_svfprintf_r+0x1e8>
 8008de0:	9a03      	ldr	r2, [sp, #12]
 8008de2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008de6:	9203      	str	r2, [sp, #12]
 8008de8:	ea58 0209 	orrs.w	r2, r8, r9
 8008dec:	f040 8357 	bne.w	800949e <_svfprintf_r+0x89e>
 8008df0:	f1ba 0f00 	cmp.w	sl, #0
 8008df4:	f000 845c 	beq.w	80096b0 <_svfprintf_r+0xab0>
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	f000 835a 	beq.w	80094b2 <_svfprintf_r+0x8b2>
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	f000 849a 	beq.w	8009738 <_svfprintf_r+0xb38>
 8008e04:	4639      	mov	r1, r7
 8008e06:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 8008e0a:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
 8008e0e:	ea4f 00d9 	mov.w	r0, r9, lsr #3
 8008e12:	f008 0307 	and.w	r3, r8, #7
 8008e16:	4681      	mov	r9, r0
 8008e18:	4690      	mov	r8, r2
 8008e1a:	3330      	adds	r3, #48	; 0x30
 8008e1c:	ea58 0209 	orrs.w	r2, r8, r9
 8008e20:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8008e24:	d1ef      	bne.n	8008e06 <_svfprintf_r+0x206>
 8008e26:	9a03      	ldr	r2, [sp, #12]
 8008e28:	910c      	str	r1, [sp, #48]	; 0x30
 8008e2a:	07d2      	lsls	r2, r2, #31
 8008e2c:	f100 856e 	bmi.w	800990c <_svfprintf_r+0xd0c>
 8008e30:	1a7b      	subs	r3, r7, r1
 8008e32:	9309      	str	r3, [sp, #36]	; 0x24
 8008e34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e36:	4592      	cmp	sl, r2
 8008e38:	4653      	mov	r3, sl
 8008e3a:	bfb8      	it	lt
 8008e3c:	4613      	movlt	r3, r2
 8008e3e:	9305      	str	r3, [sp, #20]
 8008e40:	2300      	movs	r3, #0
 8008e42:	930e      	str	r3, [sp, #56]	; 0x38
 8008e44:	f1bc 0f00 	cmp.w	ip, #0
 8008e48:	d002      	beq.n	8008e50 <_svfprintf_r+0x250>
 8008e4a:	9b05      	ldr	r3, [sp, #20]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	9305      	str	r3, [sp, #20]
 8008e50:	9b03      	ldr	r3, [sp, #12]
 8008e52:	f013 0302 	ands.w	r3, r3, #2
 8008e56:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e58:	d002      	beq.n	8008e60 <_svfprintf_r+0x260>
 8008e5a:	9b05      	ldr	r3, [sp, #20]
 8008e5c:	3302      	adds	r3, #2
 8008e5e:	9305      	str	r3, [sp, #20]
 8008e60:	9b03      	ldr	r3, [sp, #12]
 8008e62:	f013 0984 	ands.w	r9, r3, #132	; 0x84
 8008e66:	f040 8317 	bne.w	8009498 <_svfprintf_r+0x898>
 8008e6a:	9b08      	ldr	r3, [sp, #32]
 8008e6c:	9a05      	ldr	r2, [sp, #20]
 8008e6e:	ebc2 0803 	rsb	r8, r2, r3
 8008e72:	f1b8 0f00 	cmp.w	r8, #0
 8008e76:	f340 830f 	ble.w	8009498 <_svfprintf_r+0x898>
 8008e7a:	f1b8 0f10 	cmp.w	r8, #16
 8008e7e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8008e80:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008e82:	f8df a01c 	ldr.w	sl, [pc, #28]	; 8008ea0 <_svfprintf_r+0x2a0>
 8008e86:	dd30      	ble.n	8008eea <_svfprintf_r+0x2ea>
 8008e88:	4653      	mov	r3, sl
 8008e8a:	f04f 0b10 	mov.w	fp, #16
 8008e8e:	46c2      	mov	sl, r8
 8008e90:	46a8      	mov	r8, r5
 8008e92:	461d      	mov	r5, r3
 8008e94:	e00d      	b.n	8008eb2 <_svfprintf_r+0x2b2>
 8008e96:	bf00      	nop
	...
 8008ea0:	0800d158 	.word	0x0800d158
 8008ea4:	f1aa 0a10 	sub.w	sl, sl, #16
 8008ea8:	f1ba 0f10 	cmp.w	sl, #16
 8008eac:	f104 0408 	add.w	r4, r4, #8
 8008eb0:	dd17      	ble.n	8008ee2 <_svfprintf_r+0x2e2>
 8008eb2:	3201      	adds	r2, #1
 8008eb4:	3110      	adds	r1, #16
 8008eb6:	2a07      	cmp	r2, #7
 8008eb8:	9123      	str	r1, [sp, #140]	; 0x8c
 8008eba:	9222      	str	r2, [sp, #136]	; 0x88
 8008ebc:	e884 0820 	stmia.w	r4, {r5, fp}
 8008ec0:	ddf0      	ble.n	8008ea4 <_svfprintf_r+0x2a4>
 8008ec2:	9804      	ldr	r0, [sp, #16]
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	aa21      	add	r2, sp, #132	; 0x84
 8008ec8:	f002 ff1e 	bl	800bd08 <__ssprint_r>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	f47f af5f 	bne.w	8008d90 <_svfprintf_r+0x190>
 8008ed2:	f1aa 0a10 	sub.w	sl, sl, #16
 8008ed6:	f1ba 0f10 	cmp.w	sl, #16
 8008eda:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8008edc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008ede:	463c      	mov	r4, r7
 8008ee0:	dce7      	bgt.n	8008eb2 <_svfprintf_r+0x2b2>
 8008ee2:	462b      	mov	r3, r5
 8008ee4:	4645      	mov	r5, r8
 8008ee6:	46d0      	mov	r8, sl
 8008ee8:	469a      	mov	sl, r3
 8008eea:	3201      	adds	r2, #1
 8008eec:	eb08 0b01 	add.w	fp, r8, r1
 8008ef0:	2a07      	cmp	r2, #7
 8008ef2:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008ef6:	9222      	str	r2, [sp, #136]	; 0x88
 8008ef8:	f8c4 a000 	str.w	sl, [r4]
 8008efc:	f8c4 8004 	str.w	r8, [r4, #4]
 8008f00:	f300 847e 	bgt.w	8009800 <_svfprintf_r+0xc00>
 8008f04:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8008f08:	3408      	adds	r4, #8
 8008f0a:	f1bc 0f00 	cmp.w	ip, #0
 8008f0e:	d00f      	beq.n	8008f30 <_svfprintf_r+0x330>
 8008f10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f12:	3301      	adds	r3, #1
 8008f14:	f10b 0b01 	add.w	fp, fp, #1
 8008f18:	f10d 0167 	add.w	r1, sp, #103	; 0x67
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	2b07      	cmp	r3, #7
 8008f20:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008f24:	9322      	str	r3, [sp, #136]	; 0x88
 8008f26:	e884 0006 	stmia.w	r4, {r1, r2}
 8008f2a:	f300 83ea 	bgt.w	8009702 <_svfprintf_r+0xb02>
 8008f2e:	3408      	adds	r4, #8
 8008f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f32:	b173      	cbz	r3, 8008f52 <_svfprintf_r+0x352>
 8008f34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f36:	3301      	adds	r3, #1
 8008f38:	f10b 0b02 	add.w	fp, fp, #2
 8008f3c:	a91a      	add	r1, sp, #104	; 0x68
 8008f3e:	2202      	movs	r2, #2
 8008f40:	2b07      	cmp	r3, #7
 8008f42:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008f46:	9322      	str	r3, [sp, #136]	; 0x88
 8008f48:	e884 0006 	stmia.w	r4, {r1, r2}
 8008f4c:	f300 83cd 	bgt.w	80096ea <_svfprintf_r+0xaea>
 8008f50:	3408      	adds	r4, #8
 8008f52:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8008f56:	f000 8315 	beq.w	8009584 <_svfprintf_r+0x984>
 8008f5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f5e:	ebc2 0a03 	rsb	sl, r2, r3
 8008f62:	f1ba 0f00 	cmp.w	sl, #0
 8008f66:	dd3c      	ble.n	8008fe2 <_svfprintf_r+0x3e2>
 8008f68:	f1ba 0f10 	cmp.w	sl, #16
 8008f6c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008f6e:	f8df 9464 	ldr.w	r9, [pc, #1124]	; 80093d4 <_svfprintf_r+0x7d4>
 8008f72:	dd2b      	ble.n	8008fcc <_svfprintf_r+0x3cc>
 8008f74:	4649      	mov	r1, r9
 8008f76:	465b      	mov	r3, fp
 8008f78:	46a9      	mov	r9, r5
 8008f7a:	f04f 0810 	mov.w	r8, #16
 8008f7e:	f8dd b010 	ldr.w	fp, [sp, #16]
 8008f82:	460d      	mov	r5, r1
 8008f84:	e006      	b.n	8008f94 <_svfprintf_r+0x394>
 8008f86:	f1aa 0a10 	sub.w	sl, sl, #16
 8008f8a:	f1ba 0f10 	cmp.w	sl, #16
 8008f8e:	f104 0408 	add.w	r4, r4, #8
 8008f92:	dd17      	ble.n	8008fc4 <_svfprintf_r+0x3c4>
 8008f94:	3201      	adds	r2, #1
 8008f96:	3310      	adds	r3, #16
 8008f98:	2a07      	cmp	r2, #7
 8008f9a:	9323      	str	r3, [sp, #140]	; 0x8c
 8008f9c:	9222      	str	r2, [sp, #136]	; 0x88
 8008f9e:	e884 0120 	stmia.w	r4, {r5, r8}
 8008fa2:	ddf0      	ble.n	8008f86 <_svfprintf_r+0x386>
 8008fa4:	4658      	mov	r0, fp
 8008fa6:	4631      	mov	r1, r6
 8008fa8:	aa21      	add	r2, sp, #132	; 0x84
 8008faa:	f002 fead 	bl	800bd08 <__ssprint_r>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	f47f aeee 	bne.w	8008d90 <_svfprintf_r+0x190>
 8008fb4:	f1aa 0a10 	sub.w	sl, sl, #16
 8008fb8:	f1ba 0f10 	cmp.w	sl, #16
 8008fbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008fbe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008fc0:	463c      	mov	r4, r7
 8008fc2:	dce7      	bgt.n	8008f94 <_svfprintf_r+0x394>
 8008fc4:	469b      	mov	fp, r3
 8008fc6:	462b      	mov	r3, r5
 8008fc8:	464d      	mov	r5, r9
 8008fca:	4699      	mov	r9, r3
 8008fcc:	3201      	adds	r2, #1
 8008fce:	44d3      	add	fp, sl
 8008fd0:	2a07      	cmp	r2, #7
 8008fd2:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008fd6:	9222      	str	r2, [sp, #136]	; 0x88
 8008fd8:	e884 0600 	stmia.w	r4, {r9, sl}
 8008fdc:	f300 8379 	bgt.w	80096d2 <_svfprintf_r+0xad2>
 8008fe0:	3408      	adds	r4, #8
 8008fe2:	9b03      	ldr	r3, [sp, #12]
 8008fe4:	05d9      	lsls	r1, r3, #23
 8008fe6:	f100 8270 	bmi.w	80094ca <_svfprintf_r+0x8ca>
 8008fea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ff0:	6022      	str	r2, [r4, #0]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	448b      	add	fp, r1
 8008ff6:	2b07      	cmp	r3, #7
 8008ff8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008ffc:	6061      	str	r1, [r4, #4]
 8008ffe:	9322      	str	r3, [sp, #136]	; 0x88
 8009000:	f300 834a 	bgt.w	8009698 <_svfprintf_r+0xa98>
 8009004:	3408      	adds	r4, #8
 8009006:	9b03      	ldr	r3, [sp, #12]
 8009008:	075a      	lsls	r2, r3, #29
 800900a:	d541      	bpl.n	8009090 <_svfprintf_r+0x490>
 800900c:	9b08      	ldr	r3, [sp, #32]
 800900e:	9a05      	ldr	r2, [sp, #20]
 8009010:	1a9d      	subs	r5, r3, r2
 8009012:	2d00      	cmp	r5, #0
 8009014:	dd3c      	ble.n	8009090 <_svfprintf_r+0x490>
 8009016:	2d10      	cmp	r5, #16
 8009018:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800901a:	f8df a3bc 	ldr.w	sl, [pc, #956]	; 80093d8 <_svfprintf_r+0x7d8>
 800901e:	dd23      	ble.n	8009068 <_svfprintf_r+0x468>
 8009020:	f04f 0810 	mov.w	r8, #16
 8009024:	465a      	mov	r2, fp
 8009026:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800902a:	e004      	b.n	8009036 <_svfprintf_r+0x436>
 800902c:	3d10      	subs	r5, #16
 800902e:	2d10      	cmp	r5, #16
 8009030:	f104 0408 	add.w	r4, r4, #8
 8009034:	dd17      	ble.n	8009066 <_svfprintf_r+0x466>
 8009036:	3301      	adds	r3, #1
 8009038:	3210      	adds	r2, #16
 800903a:	2b07      	cmp	r3, #7
 800903c:	9223      	str	r2, [sp, #140]	; 0x8c
 800903e:	9322      	str	r3, [sp, #136]	; 0x88
 8009040:	f8c4 a000 	str.w	sl, [r4]
 8009044:	f8c4 8004 	str.w	r8, [r4, #4]
 8009048:	ddf0      	ble.n	800902c <_svfprintf_r+0x42c>
 800904a:	4648      	mov	r0, r9
 800904c:	4631      	mov	r1, r6
 800904e:	aa21      	add	r2, sp, #132	; 0x84
 8009050:	f002 fe5a 	bl	800bd08 <__ssprint_r>
 8009054:	2800      	cmp	r0, #0
 8009056:	f47f ae9b 	bne.w	8008d90 <_svfprintf_r+0x190>
 800905a:	3d10      	subs	r5, #16
 800905c:	2d10      	cmp	r5, #16
 800905e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009060:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009062:	463c      	mov	r4, r7
 8009064:	dce7      	bgt.n	8009036 <_svfprintf_r+0x436>
 8009066:	4693      	mov	fp, r2
 8009068:	3301      	adds	r3, #1
 800906a:	44ab      	add	fp, r5
 800906c:	2b07      	cmp	r3, #7
 800906e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009072:	9322      	str	r3, [sp, #136]	; 0x88
 8009074:	f8c4 a000 	str.w	sl, [r4]
 8009078:	6065      	str	r5, [r4, #4]
 800907a:	dd09      	ble.n	8009090 <_svfprintf_r+0x490>
 800907c:	9804      	ldr	r0, [sp, #16]
 800907e:	4631      	mov	r1, r6
 8009080:	aa21      	add	r2, sp, #132	; 0x84
 8009082:	f002 fe41 	bl	800bd08 <__ssprint_r>
 8009086:	2800      	cmp	r0, #0
 8009088:	f47f ae82 	bne.w	8008d90 <_svfprintf_r+0x190>
 800908c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009090:	9b07      	ldr	r3, [sp, #28]
 8009092:	9a05      	ldr	r2, [sp, #20]
 8009094:	9908      	ldr	r1, [sp, #32]
 8009096:	428a      	cmp	r2, r1
 8009098:	bfac      	ite	ge
 800909a:	189b      	addge	r3, r3, r2
 800909c:	185b      	addlt	r3, r3, r1
 800909e:	9307      	str	r3, [sp, #28]
 80090a0:	f1bb 0f00 	cmp.w	fp, #0
 80090a4:	f47f ae6c 	bne.w	8008d80 <_svfprintf_r+0x180>
 80090a8:	2300      	movs	r3, #0
 80090aa:	9322      	str	r3, [sp, #136]	; 0x88
 80090ac:	463c      	mov	r4, r7
 80090ae:	e5ce      	b.n	8008c4e <_svfprintf_r+0x4e>
 80090b0:	4619      	mov	r1, r3
 80090b2:	9803      	ldr	r0, [sp, #12]
 80090b4:	781d      	ldrb	r5, [r3, #0]
 80090b6:	f040 0004 	orr.w	r0, r0, #4
 80090ba:	9003      	str	r0, [sp, #12]
 80090bc:	e5f5      	b.n	8008caa <_svfprintf_r+0xaa>
 80090be:	9306      	str	r3, [sp, #24]
 80090c0:	9b03      	ldr	r3, [sp, #12]
 80090c2:	f013 0320 	ands.w	r3, r3, #32
 80090c6:	f000 810e 	beq.w	80092e6 <_svfprintf_r+0x6e6>
 80090ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090cc:	f103 0907 	add.w	r9, r3, #7
 80090d0:	f029 0307 	bic.w	r3, r9, #7
 80090d4:	f103 0208 	add.w	r2, r3, #8
 80090d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090dc:	920a      	str	r2, [sp, #40]	; 0x28
 80090de:	2300      	movs	r3, #0
 80090e0:	e675      	b.n	8008dce <_svfprintf_r+0x1ce>
 80090e2:	781d      	ldrb	r5, [r3, #0]
 80090e4:	4619      	mov	r1, r3
 80090e6:	222b      	movs	r2, #43	; 0x2b
 80090e8:	e5df      	b.n	8008caa <_svfprintf_r+0xaa>
 80090ea:	781d      	ldrb	r5, [r3, #0]
 80090ec:	2d2a      	cmp	r5, #42	; 0x2a
 80090ee:	f103 0101 	add.w	r1, r3, #1
 80090f2:	f000 87b8 	beq.w	800a066 <_svfprintf_r+0x1466>
 80090f6:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80090fa:	2809      	cmp	r0, #9
 80090fc:	460b      	mov	r3, r1
 80090fe:	f04f 0a00 	mov.w	sl, #0
 8009102:	f63f add3 	bhi.w	8008cac <_svfprintf_r+0xac>
 8009106:	f813 5b01 	ldrb.w	r5, [r3], #1
 800910a:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 800910e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8009112:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8009116:	2809      	cmp	r0, #9
 8009118:	d9f5      	bls.n	8009106 <_svfprintf_r+0x506>
 800911a:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
 800911e:	e5c5      	b.n	8008cac <_svfprintf_r+0xac>
 8009120:	9306      	str	r3, [sp, #24]
 8009122:	9b03      	ldr	r3, [sp, #12]
 8009124:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8009128:	069b      	lsls	r3, r3, #26
 800912a:	f140 80a1 	bpl.w	8009270 <_svfprintf_r+0x670>
 800912e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009130:	f103 0907 	add.w	r9, r3, #7
 8009134:	f029 0907 	bic.w	r9, r9, #7
 8009138:	e9d9 2300 	ldrd	r2, r3, [r9]
 800913c:	f109 0108 	add.w	r1, r9, #8
 8009140:	910a      	str	r1, [sp, #40]	; 0x28
 8009142:	4690      	mov	r8, r2
 8009144:	4699      	mov	r9, r3
 8009146:	2a00      	cmp	r2, #0
 8009148:	f173 0300 	sbcs.w	r3, r3, #0
 800914c:	f2c0 840e 	blt.w	800996c <_svfprintf_r+0xd6c>
 8009150:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8009154:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009158:	2301      	movs	r3, #1
 800915a:	e63e      	b.n	8008dda <_svfprintf_r+0x1da>
 800915c:	9306      	str	r3, [sp, #24]
 800915e:	4b9b      	ldr	r3, [pc, #620]	; (80093cc <_svfprintf_r+0x7cc>)
 8009160:	9312      	str	r3, [sp, #72]	; 0x48
 8009162:	9b03      	ldr	r3, [sp, #12]
 8009164:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8009168:	069b      	lsls	r3, r3, #26
 800916a:	f140 80f3 	bpl.w	8009354 <_svfprintf_r+0x754>
 800916e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009170:	f103 0907 	add.w	r9, r3, #7
 8009174:	f029 0307 	bic.w	r3, r9, #7
 8009178:	e9d3 8900 	ldrd	r8, r9, [r3]
 800917c:	f103 0208 	add.w	r2, r3, #8
 8009180:	920a      	str	r2, [sp, #40]	; 0x28
 8009182:	9b03      	ldr	r3, [sp, #12]
 8009184:	07d9      	lsls	r1, r3, #31
 8009186:	f140 80f5 	bpl.w	8009374 <_svfprintf_r+0x774>
 800918a:	ea58 0309 	orrs.w	r3, r8, r9
 800918e:	f000 80f1 	beq.w	8009374 <_svfprintf_r+0x774>
 8009192:	9a03      	ldr	r2, [sp, #12]
 8009194:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 8009198:	2330      	movs	r3, #48	; 0x30
 800919a:	f042 0202 	orr.w	r2, r2, #2
 800919e:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80091a2:	9203      	str	r2, [sp, #12]
 80091a4:	2302      	movs	r3, #2
 80091a6:	e612      	b.n	8008dce <_svfprintf_r+0x1ce>
 80091a8:	781d      	ldrb	r5, [r3, #0]
 80091aa:	4619      	mov	r1, r3
 80091ac:	2a00      	cmp	r2, #0
 80091ae:	f47f ad7c 	bne.w	8008caa <_svfprintf_r+0xaa>
 80091b2:	2220      	movs	r2, #32
 80091b4:	e579      	b.n	8008caa <_svfprintf_r+0xaa>
 80091b6:	9903      	ldr	r1, [sp, #12]
 80091b8:	f041 0120 	orr.w	r1, r1, #32
 80091bc:	9103      	str	r1, [sp, #12]
 80091be:	781d      	ldrb	r5, [r3, #0]
 80091c0:	4619      	mov	r1, r3
 80091c2:	e572      	b.n	8008caa <_svfprintf_r+0xaa>
 80091c4:	9306      	str	r3, [sp, #24]
 80091c6:	9b03      	ldr	r3, [sp, #12]
 80091c8:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80091cc:	069a      	lsls	r2, r3, #26
 80091ce:	f140 84b0 	bpl.w	8009b32 <_svfprintf_r+0xf32>
 80091d2:	9907      	ldr	r1, [sp, #28]
 80091d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091d6:	ea4f 79e1 	mov.w	r9, r1, asr #31
 80091da:	6813      	ldr	r3, [r2, #0]
 80091dc:	4608      	mov	r0, r1
 80091de:	4688      	mov	r8, r1
 80091e0:	3204      	adds	r2, #4
 80091e2:	4649      	mov	r1, r9
 80091e4:	920a      	str	r2, [sp, #40]	; 0x28
 80091e6:	e9c3 0100 	strd	r0, r1, [r3]
 80091ea:	e530      	b.n	8008c4e <_svfprintf_r+0x4e>
 80091ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091ee:	9306      	str	r3, [sp, #24]
 80091f0:	6813      	ldr	r3, [r2, #0]
 80091f2:	930c      	str	r3, [sp, #48]	; 0x30
 80091f4:	f04f 0b00 	mov.w	fp, #0
 80091f8:	f88d b067 	strb.w	fp, [sp, #103]	; 0x67
 80091fc:	f102 0904 	add.w	r9, r2, #4
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 8646 	beq.w	8009e92 <_svfprintf_r+0x1292>
 8009206:	f1ba 0f00 	cmp.w	sl, #0
 800920a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800920c:	f2c0 85f6 	blt.w	8009dfc <_svfprintf_r+0x11fc>
 8009210:	4659      	mov	r1, fp
 8009212:	4652      	mov	r2, sl
 8009214:	f002 f9d8 	bl	800b5c8 <memchr>
 8009218:	2800      	cmp	r0, #0
 800921a:	f000 8677 	beq.w	8009f0c <_svfprintf_r+0x130c>
 800921e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009220:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8009224:	1ac3      	subs	r3, r0, r3
 8009226:	9309      	str	r3, [sp, #36]	; 0x24
 8009228:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800922c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009230:	9305      	str	r3, [sp, #20]
 8009232:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009236:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 800923a:	e603      	b.n	8008e44 <_svfprintf_r+0x244>
 800923c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8009240:	2100      	movs	r1, #0
 8009242:	f813 5b01 	ldrb.w	r5, [r3], #1
 8009246:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800924a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800924e:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8009252:	2809      	cmp	r0, #9
 8009254:	d9f5      	bls.n	8009242 <_svfprintf_r+0x642>
 8009256:	9108      	str	r1, [sp, #32]
 8009258:	e528      	b.n	8008cac <_svfprintf_r+0xac>
 800925a:	9306      	str	r3, [sp, #24]
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8009262:	f043 0310 	orr.w	r3, r3, #16
 8009266:	9303      	str	r3, [sp, #12]
 8009268:	9b03      	ldr	r3, [sp, #12]
 800926a:	069b      	lsls	r3, r3, #26
 800926c:	f53f af5f 	bmi.w	800912e <_svfprintf_r+0x52e>
 8009270:	9b03      	ldr	r3, [sp, #12]
 8009272:	06d8      	lsls	r0, r3, #27
 8009274:	f100 836b 	bmi.w	800994e <_svfprintf_r+0xd4e>
 8009278:	9b03      	ldr	r3, [sp, #12]
 800927a:	0659      	lsls	r1, r3, #25
 800927c:	f140 8367 	bpl.w	800994e <_svfprintf_r+0xd4e>
 8009280:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009282:	f9b1 8000 	ldrsh.w	r8, [r1]
 8009286:	3104      	adds	r1, #4
 8009288:	ea4f 79e8 	mov.w	r9, r8, asr #31
 800928c:	4642      	mov	r2, r8
 800928e:	464b      	mov	r3, r9
 8009290:	910a      	str	r1, [sp, #40]	; 0x28
 8009292:	e758      	b.n	8009146 <_svfprintf_r+0x546>
 8009294:	781d      	ldrb	r5, [r3, #0]
 8009296:	9903      	ldr	r1, [sp, #12]
 8009298:	2d6c      	cmp	r5, #108	; 0x6c
 800929a:	f000 84d3 	beq.w	8009c44 <_svfprintf_r+0x1044>
 800929e:	f041 0110 	orr.w	r1, r1, #16
 80092a2:	9103      	str	r1, [sp, #12]
 80092a4:	4619      	mov	r1, r3
 80092a6:	e500      	b.n	8008caa <_svfprintf_r+0xaa>
 80092a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80092aa:	6829      	ldr	r1, [r5, #0]
 80092ac:	9108      	str	r1, [sp, #32]
 80092ae:	4608      	mov	r0, r1
 80092b0:	2800      	cmp	r0, #0
 80092b2:	4629      	mov	r1, r5
 80092b4:	f101 0104 	add.w	r1, r1, #4
 80092b8:	f2c0 84cb 	blt.w	8009c52 <_svfprintf_r+0x1052>
 80092bc:	910a      	str	r1, [sp, #40]	; 0x28
 80092be:	781d      	ldrb	r5, [r3, #0]
 80092c0:	4619      	mov	r1, r3
 80092c2:	e4f2      	b.n	8008caa <_svfprintf_r+0xaa>
 80092c4:	9903      	ldr	r1, [sp, #12]
 80092c6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80092ca:	9103      	str	r1, [sp, #12]
 80092cc:	781d      	ldrb	r5, [r3, #0]
 80092ce:	4619      	mov	r1, r3
 80092d0:	e4eb      	b.n	8008caa <_svfprintf_r+0xaa>
 80092d2:	9306      	str	r3, [sp, #24]
 80092d4:	9b03      	ldr	r3, [sp, #12]
 80092d6:	f043 0310 	orr.w	r3, r3, #16
 80092da:	9303      	str	r3, [sp, #12]
 80092dc:	9b03      	ldr	r3, [sp, #12]
 80092de:	f013 0320 	ands.w	r3, r3, #32
 80092e2:	f47f aef2 	bne.w	80090ca <_svfprintf_r+0x4ca>
 80092e6:	9a03      	ldr	r2, [sp, #12]
 80092e8:	f012 0210 	ands.w	r2, r2, #16
 80092ec:	f040 831c 	bne.w	8009928 <_svfprintf_r+0xd28>
 80092f0:	9b03      	ldr	r3, [sp, #12]
 80092f2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80092f6:	f000 8317 	beq.w	8009928 <_svfprintf_r+0xd28>
 80092fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80092fc:	4613      	mov	r3, r2
 80092fe:	460a      	mov	r2, r1
 8009300:	3204      	adds	r2, #4
 8009302:	f8b1 8000 	ldrh.w	r8, [r1]
 8009306:	920a      	str	r2, [sp, #40]	; 0x28
 8009308:	f04f 0900 	mov.w	r9, #0
 800930c:	e55f      	b.n	8008dce <_svfprintf_r+0x1ce>
 800930e:	9306      	str	r3, [sp, #24]
 8009310:	9b03      	ldr	r3, [sp, #12]
 8009312:	f043 0310 	orr.w	r3, r3, #16
 8009316:	9303      	str	r3, [sp, #12]
 8009318:	9b03      	ldr	r3, [sp, #12]
 800931a:	0698      	lsls	r0, r3, #26
 800931c:	f53f ad4c 	bmi.w	8008db8 <_svfprintf_r+0x1b8>
 8009320:	9b03      	ldr	r3, [sp, #12]
 8009322:	06d9      	lsls	r1, r3, #27
 8009324:	f100 8309 	bmi.w	800993a <_svfprintf_r+0xd3a>
 8009328:	9b03      	ldr	r3, [sp, #12]
 800932a:	065a      	lsls	r2, r3, #25
 800932c:	f140 8305 	bpl.w	800993a <_svfprintf_r+0xd3a>
 8009330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009332:	f8b2 8000 	ldrh.w	r8, [r2]
 8009336:	3204      	adds	r2, #4
 8009338:	f04f 0900 	mov.w	r9, #0
 800933c:	2301      	movs	r3, #1
 800933e:	920a      	str	r2, [sp, #40]	; 0x28
 8009340:	e545      	b.n	8008dce <_svfprintf_r+0x1ce>
 8009342:	9306      	str	r3, [sp, #24]
 8009344:	4b22      	ldr	r3, [pc, #136]	; (80093d0 <_svfprintf_r+0x7d0>)
 8009346:	9312      	str	r3, [sp, #72]	; 0x48
 8009348:	9b03      	ldr	r3, [sp, #12]
 800934a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800934e:	069b      	lsls	r3, r3, #26
 8009350:	f53f af0d 	bmi.w	800916e <_svfprintf_r+0x56e>
 8009354:	9b03      	ldr	r3, [sp, #12]
 8009356:	06d8      	lsls	r0, r3, #27
 8009358:	f140 83dc 	bpl.w	8009b14 <_svfprintf_r+0xf14>
 800935c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800935e:	4613      	mov	r3, r2
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4698      	mov	r8, r3
 8009364:	9b03      	ldr	r3, [sp, #12]
 8009366:	3204      	adds	r2, #4
 8009368:	07d9      	lsls	r1, r3, #31
 800936a:	920a      	str	r2, [sp, #40]	; 0x28
 800936c:	f04f 0900 	mov.w	r9, #0
 8009370:	f53f af0b 	bmi.w	800918a <_svfprintf_r+0x58a>
 8009374:	2302      	movs	r3, #2
 8009376:	e52a      	b.n	8008dce <_svfprintf_r+0x1ce>
 8009378:	990a      	ldr	r1, [sp, #40]	; 0x28
 800937a:	9306      	str	r3, [sp, #24]
 800937c:	680a      	ldr	r2, [r1, #0]
 800937e:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8009382:	2300      	movs	r3, #0
 8009384:	2201      	movs	r2, #1
 8009386:	3104      	adds	r1, #4
 8009388:	469c      	mov	ip, r3
 800938a:	9205      	str	r2, [sp, #20]
 800938c:	910a      	str	r1, [sp, #40]	; 0x28
 800938e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8009392:	ab24      	add	r3, sp, #144	; 0x90
 8009394:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8009398:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 800939c:	9209      	str	r2, [sp, #36]	; 0x24
 800939e:	930c      	str	r3, [sp, #48]	; 0x30
 80093a0:	e556      	b.n	8008e50 <_svfprintf_r+0x250>
 80093a2:	9903      	ldr	r1, [sp, #12]
 80093a4:	f041 0108 	orr.w	r1, r1, #8
 80093a8:	9103      	str	r1, [sp, #12]
 80093aa:	781d      	ldrb	r5, [r3, #0]
 80093ac:	4619      	mov	r1, r3
 80093ae:	e47c      	b.n	8008caa <_svfprintf_r+0xaa>
 80093b0:	9903      	ldr	r1, [sp, #12]
 80093b2:	f041 0101 	orr.w	r1, r1, #1
 80093b6:	9103      	str	r1, [sp, #12]
 80093b8:	781d      	ldrb	r5, [r3, #0]
 80093ba:	4619      	mov	r1, r3
 80093bc:	e475      	b.n	8008caa <_svfprintf_r+0xaa>
 80093be:	9903      	ldr	r1, [sp, #12]
 80093c0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80093c4:	9103      	str	r1, [sp, #12]
 80093c6:	781d      	ldrb	r5, [r3, #0]
 80093c8:	4619      	mov	r1, r3
 80093ca:	e46e      	b.n	8008caa <_svfprintf_r+0xaa>
 80093cc:	0800d18c 	.word	0x0800d18c
 80093d0:	0800d178 	.word	0x0800d178
 80093d4:	0800d148 	.word	0x0800d148
 80093d8:	0800d158 	.word	0x0800d158
 80093dc:	9306      	str	r3, [sp, #24]
 80093de:	9b03      	ldr	r3, [sp, #12]
 80093e0:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80093e4:	f013 0f08 	tst.w	r3, #8
 80093e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ea:	46d3      	mov	fp, sl
 80093ec:	f103 0907 	add.w	r9, r3, #7
 80093f0:	f000 8386 	beq.w	8009b00 <_svfprintf_r+0xf00>
 80093f4:	f029 0307 	bic.w	r3, r9, #7
 80093f8:	ed93 7b00 	vldr	d7, [r3]
 80093fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009400:	f103 0208 	add.w	r2, r3, #8
 8009404:	920a      	str	r2, [sp, #40]	; 0x28
 8009406:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 800940a:	f002 fc21 	bl	800bc50 <__fpclassifyd>
 800940e:	2801      	cmp	r0, #1
 8009410:	f040 835a 	bne.w	8009ac8 <_svfprintf_r+0xec8>
 8009414:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009418:	2200      	movs	r2, #0
 800941a:	2300      	movs	r3, #0
 800941c:	f7f7 fc58 	bl	8000cd0 <__aeabi_dcmplt>
 8009420:	2800      	cmp	r0, #0
 8009422:	f040 856b 	bne.w	8009efc <_svfprintf_r+0x12fc>
 8009426:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 800942a:	9b03      	ldr	r3, [sp, #12]
 800942c:	4abd      	ldr	r2, [pc, #756]	; (8009724 <_svfprintf_r+0xb24>)
 800942e:	f8df e300 	ldr.w	lr, [pc, #768]	; 8009730 <_svfprintf_r+0xb30>
 8009432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009436:	9303      	str	r3, [sp, #12]
 8009438:	4613      	mov	r3, r2
 800943a:	2103      	movs	r1, #3
 800943c:	2000      	movs	r0, #0
 800943e:	2d47      	cmp	r5, #71	; 0x47
 8009440:	bfd8      	it	le
 8009442:	4673      	movle	r3, lr
 8009444:	9105      	str	r1, [sp, #20]
 8009446:	900d      	str	r0, [sp, #52]	; 0x34
 8009448:	930c      	str	r3, [sp, #48]	; 0x30
 800944a:	9109      	str	r1, [sp, #36]	; 0x24
 800944c:	900e      	str	r0, [sp, #56]	; 0x38
 800944e:	e4f9      	b.n	8008e44 <_svfprintf_r+0x244>
 8009450:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009452:	9903      	ldr	r1, [sp, #12]
 8009454:	9306      	str	r3, [sp, #24]
 8009456:	2230      	movs	r2, #48	; 0x30
 8009458:	6803      	ldr	r3, [r0, #0]
 800945a:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 800945e:	4602      	mov	r2, r0
 8009460:	2578      	movs	r5, #120	; 0x78
 8009462:	f041 0102 	orr.w	r1, r1, #2
 8009466:	3204      	adds	r2, #4
 8009468:	4698      	mov	r8, r3
 800946a:	4baf      	ldr	r3, [pc, #700]	; (8009728 <_svfprintf_r+0xb28>)
 800946c:	9312      	str	r3, [sp, #72]	; 0x48
 800946e:	9103      	str	r1, [sp, #12]
 8009470:	920a      	str	r2, [sp, #40]	; 0x28
 8009472:	f04f 0900 	mov.w	r9, #0
 8009476:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 800947a:	2302      	movs	r3, #2
 800947c:	e4a7      	b.n	8008dce <_svfprintf_r+0x1ce>
 800947e:	9306      	str	r3, [sp, #24]
 8009480:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8009484:	2d00      	cmp	r5, #0
 8009486:	f000 83d1 	beq.w	8009c2c <_svfprintf_r+0x102c>
 800948a:	2300      	movs	r3, #0
 800948c:	2201      	movs	r2, #1
 800948e:	469c      	mov	ip, r3
 8009490:	9205      	str	r2, [sp, #20]
 8009492:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
 8009496:	e77a      	b.n	800938e <_svfprintf_r+0x78e>
 8009498:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800949c:	e535      	b.n	8008f0a <_svfprintf_r+0x30a>
 800949e:	2b01      	cmp	r3, #1
 80094a0:	f47f acad 	bne.w	8008dfe <_svfprintf_r+0x1fe>
 80094a4:	f1b9 0f00 	cmp.w	r9, #0
 80094a8:	bf08      	it	eq
 80094aa:	f1b8 0f0a 	cmpeq.w	r8, #10
 80094ae:	f080 820d 	bcs.w	80098cc <_svfprintf_r+0xccc>
 80094b2:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 80094b6:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80094ba:	f80b 8d41 	strb.w	r8, [fp, #-65]!
 80094be:	ebcb 0307 	rsb	r3, fp, r7
 80094c2:	9309      	str	r3, [sp, #36]	; 0x24
 80094c4:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80094c8:	e4b4      	b.n	8008e34 <_svfprintf_r+0x234>
 80094ca:	2d65      	cmp	r5, #101	; 0x65
 80094cc:	f340 80a0 	ble.w	8009610 <_svfprintf_r+0xa10>
 80094d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80094d4:	2200      	movs	r2, #0
 80094d6:	2300      	movs	r3, #0
 80094d8:	f7f7 fbf0 	bl	8000cbc <__aeabi_dcmpeq>
 80094dc:	2800      	cmp	r0, #0
 80094de:	f000 8144 	beq.w	800976a <_svfprintf_r+0xb6a>
 80094e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094e4:	4a91      	ldr	r2, [pc, #580]	; (800972c <_svfprintf_r+0xb2c>)
 80094e6:	6022      	str	r2, [r4, #0]
 80094e8:	3301      	adds	r3, #1
 80094ea:	f10b 0b01 	add.w	fp, fp, #1
 80094ee:	2201      	movs	r2, #1
 80094f0:	2b07      	cmp	r3, #7
 80094f2:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80094f6:	9322      	str	r3, [sp, #136]	; 0x88
 80094f8:	6062      	str	r2, [r4, #4]
 80094fa:	f300 833f 	bgt.w	8009b7c <_svfprintf_r+0xf7c>
 80094fe:	3408      	adds	r4, #8
 8009500:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009502:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009504:	4293      	cmp	r3, r2
 8009506:	db03      	blt.n	8009510 <_svfprintf_r+0x910>
 8009508:	9b03      	ldr	r3, [sp, #12]
 800950a:	07da      	lsls	r2, r3, #31
 800950c:	f57f ad7b 	bpl.w	8009006 <_svfprintf_r+0x406>
 8009510:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009512:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009514:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009516:	6022      	str	r2, [r4, #0]
 8009518:	3301      	adds	r3, #1
 800951a:	448b      	add	fp, r1
 800951c:	2b07      	cmp	r3, #7
 800951e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009522:	6061      	str	r1, [r4, #4]
 8009524:	9322      	str	r3, [sp, #136]	; 0x88
 8009526:	f300 839b 	bgt.w	8009c60 <_svfprintf_r+0x1060>
 800952a:	3408      	adds	r4, #8
 800952c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800952e:	1e5d      	subs	r5, r3, #1
 8009530:	2d00      	cmp	r5, #0
 8009532:	f77f ad68 	ble.w	8009006 <_svfprintf_r+0x406>
 8009536:	2d10      	cmp	r5, #16
 8009538:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800953a:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8009734 <_svfprintf_r+0xb34>
 800953e:	f340 81b9 	ble.w	80098b4 <_svfprintf_r+0xcb4>
 8009542:	f04f 0810 	mov.w	r8, #16
 8009546:	465a      	mov	r2, fp
 8009548:	f8dd a010 	ldr.w	sl, [sp, #16]
 800954c:	e004      	b.n	8009558 <_svfprintf_r+0x958>
 800954e:	3408      	adds	r4, #8
 8009550:	3d10      	subs	r5, #16
 8009552:	2d10      	cmp	r5, #16
 8009554:	f340 81ad 	ble.w	80098b2 <_svfprintf_r+0xcb2>
 8009558:	3301      	adds	r3, #1
 800955a:	3210      	adds	r2, #16
 800955c:	2b07      	cmp	r3, #7
 800955e:	9223      	str	r2, [sp, #140]	; 0x8c
 8009560:	9322      	str	r3, [sp, #136]	; 0x88
 8009562:	f8c4 9000 	str.w	r9, [r4]
 8009566:	f8c4 8004 	str.w	r8, [r4, #4]
 800956a:	ddf0      	ble.n	800954e <_svfprintf_r+0x94e>
 800956c:	4650      	mov	r0, sl
 800956e:	4631      	mov	r1, r6
 8009570:	aa21      	add	r2, sp, #132	; 0x84
 8009572:	f002 fbc9 	bl	800bd08 <__ssprint_r>
 8009576:	2800      	cmp	r0, #0
 8009578:	f47f ac0a 	bne.w	8008d90 <_svfprintf_r+0x190>
 800957c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800957e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009580:	463c      	mov	r4, r7
 8009582:	e7e5      	b.n	8009550 <_svfprintf_r+0x950>
 8009584:	9b08      	ldr	r3, [sp, #32]
 8009586:	9a05      	ldr	r2, [sp, #20]
 8009588:	ebc2 0a03 	rsb	sl, r2, r3
 800958c:	f1ba 0f00 	cmp.w	sl, #0
 8009590:	f77f ace3 	ble.w	8008f5a <_svfprintf_r+0x35a>
 8009594:	f1ba 0f10 	cmp.w	sl, #16
 8009598:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800959a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8009734 <_svfprintf_r+0xb34>
 800959e:	dd2b      	ble.n	80095f8 <_svfprintf_r+0x9f8>
 80095a0:	4649      	mov	r1, r9
 80095a2:	465b      	mov	r3, fp
 80095a4:	46a9      	mov	r9, r5
 80095a6:	f04f 0810 	mov.w	r8, #16
 80095aa:	f8dd b010 	ldr.w	fp, [sp, #16]
 80095ae:	460d      	mov	r5, r1
 80095b0:	e006      	b.n	80095c0 <_svfprintf_r+0x9c0>
 80095b2:	f1aa 0a10 	sub.w	sl, sl, #16
 80095b6:	f1ba 0f10 	cmp.w	sl, #16
 80095ba:	f104 0408 	add.w	r4, r4, #8
 80095be:	dd17      	ble.n	80095f0 <_svfprintf_r+0x9f0>
 80095c0:	3201      	adds	r2, #1
 80095c2:	3310      	adds	r3, #16
 80095c4:	2a07      	cmp	r2, #7
 80095c6:	9323      	str	r3, [sp, #140]	; 0x8c
 80095c8:	9222      	str	r2, [sp, #136]	; 0x88
 80095ca:	e884 0120 	stmia.w	r4, {r5, r8}
 80095ce:	ddf0      	ble.n	80095b2 <_svfprintf_r+0x9b2>
 80095d0:	4658      	mov	r0, fp
 80095d2:	4631      	mov	r1, r6
 80095d4:	aa21      	add	r2, sp, #132	; 0x84
 80095d6:	f002 fb97 	bl	800bd08 <__ssprint_r>
 80095da:	2800      	cmp	r0, #0
 80095dc:	f47f abd8 	bne.w	8008d90 <_svfprintf_r+0x190>
 80095e0:	f1aa 0a10 	sub.w	sl, sl, #16
 80095e4:	f1ba 0f10 	cmp.w	sl, #16
 80095e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80095ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80095ec:	463c      	mov	r4, r7
 80095ee:	dce7      	bgt.n	80095c0 <_svfprintf_r+0x9c0>
 80095f0:	469b      	mov	fp, r3
 80095f2:	462b      	mov	r3, r5
 80095f4:	464d      	mov	r5, r9
 80095f6:	4699      	mov	r9, r3
 80095f8:	3201      	adds	r2, #1
 80095fa:	44d3      	add	fp, sl
 80095fc:	2a07      	cmp	r2, #7
 80095fe:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009602:	9222      	str	r2, [sp, #136]	; 0x88
 8009604:	e884 0600 	stmia.w	r4, {r9, sl}
 8009608:	f300 8251 	bgt.w	8009aae <_svfprintf_r+0xeae>
 800960c:	3408      	adds	r4, #8
 800960e:	e4a4      	b.n	8008f5a <_svfprintf_r+0x35a>
 8009610:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009612:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8009614:	2b01      	cmp	r3, #1
 8009616:	f340 821f 	ble.w	8009a58 <_svfprintf_r+0xe58>
 800961a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	3501      	adds	r5, #1
 8009620:	f10b 0301 	add.w	r3, fp, #1
 8009624:	2201      	movs	r2, #1
 8009626:	2d07      	cmp	r5, #7
 8009628:	9323      	str	r3, [sp, #140]	; 0x8c
 800962a:	9522      	str	r5, [sp, #136]	; 0x88
 800962c:	6062      	str	r2, [r4, #4]
 800962e:	f300 8225 	bgt.w	8009a7c <_svfprintf_r+0xe7c>
 8009632:	3408      	adds	r4, #8
 8009634:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009636:	6061      	str	r1, [r4, #4]
 8009638:	3501      	adds	r5, #1
 800963a:	eb03 0b01 	add.w	fp, r3, r1
 800963e:	2d07      	cmp	r5, #7
 8009640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009642:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009646:	9522      	str	r5, [sp, #136]	; 0x88
 8009648:	6023      	str	r3, [r4, #0]
 800964a:	f300 8223 	bgt.w	8009a94 <_svfprintf_r+0xe94>
 800964e:	3408      	adds	r4, #8
 8009650:	2300      	movs	r3, #0
 8009652:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009656:	2200      	movs	r2, #0
 8009658:	f7f7 fb30 	bl	8000cbc <__aeabi_dcmpeq>
 800965c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800965e:	2800      	cmp	r0, #0
 8009660:	f040 80dd 	bne.w	800981e <_svfprintf_r+0xc1e>
 8009664:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009666:	3b01      	subs	r3, #1
 8009668:	3501      	adds	r5, #1
 800966a:	3201      	adds	r2, #1
 800966c:	449b      	add	fp, r3
 800966e:	2d07      	cmp	r5, #7
 8009670:	9522      	str	r5, [sp, #136]	; 0x88
 8009672:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009676:	6022      	str	r2, [r4, #0]
 8009678:	6063      	str	r3, [r4, #4]
 800967a:	f300 810d 	bgt.w	8009898 <_svfprintf_r+0xc98>
 800967e:	3408      	adds	r4, #8
 8009680:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009682:	6062      	str	r2, [r4, #4]
 8009684:	3501      	adds	r5, #1
 8009686:	4493      	add	fp, r2
 8009688:	ab1d      	add	r3, sp, #116	; 0x74
 800968a:	2d07      	cmp	r5, #7
 800968c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009690:	9522      	str	r5, [sp, #136]	; 0x88
 8009692:	6023      	str	r3, [r4, #0]
 8009694:	f77f acb6 	ble.w	8009004 <_svfprintf_r+0x404>
 8009698:	9804      	ldr	r0, [sp, #16]
 800969a:	4631      	mov	r1, r6
 800969c:	aa21      	add	r2, sp, #132	; 0x84
 800969e:	f002 fb33 	bl	800bd08 <__ssprint_r>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	f47f ab74 	bne.w	8008d90 <_svfprintf_r+0x190>
 80096a8:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80096ac:	463c      	mov	r4, r7
 80096ae:	e4aa      	b.n	8009006 <_svfprintf_r+0x406>
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d132      	bne.n	800971a <_svfprintf_r+0xb1a>
 80096b4:	9b03      	ldr	r3, [sp, #12]
 80096b6:	07d8      	lsls	r0, r3, #31
 80096b8:	d52f      	bpl.n	800971a <_svfprintf_r+0xb1a>
 80096ba:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 80096be:	2330      	movs	r3, #48	; 0x30
 80096c0:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 80096c4:	ebcb 0307 	rsb	r3, fp, r7
 80096c8:	9309      	str	r3, [sp, #36]	; 0x24
 80096ca:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80096ce:	f7ff bbb1 	b.w	8008e34 <_svfprintf_r+0x234>
 80096d2:	9804      	ldr	r0, [sp, #16]
 80096d4:	4631      	mov	r1, r6
 80096d6:	aa21      	add	r2, sp, #132	; 0x84
 80096d8:	f002 fb16 	bl	800bd08 <__ssprint_r>
 80096dc:	2800      	cmp	r0, #0
 80096de:	f47f ab57 	bne.w	8008d90 <_svfprintf_r+0x190>
 80096e2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80096e6:	463c      	mov	r4, r7
 80096e8:	e47b      	b.n	8008fe2 <_svfprintf_r+0x3e2>
 80096ea:	9804      	ldr	r0, [sp, #16]
 80096ec:	4631      	mov	r1, r6
 80096ee:	aa21      	add	r2, sp, #132	; 0x84
 80096f0:	f002 fb0a 	bl	800bd08 <__ssprint_r>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	f47f ab4b 	bne.w	8008d90 <_svfprintf_r+0x190>
 80096fa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80096fe:	463c      	mov	r4, r7
 8009700:	e427      	b.n	8008f52 <_svfprintf_r+0x352>
 8009702:	9804      	ldr	r0, [sp, #16]
 8009704:	4631      	mov	r1, r6
 8009706:	aa21      	add	r2, sp, #132	; 0x84
 8009708:	f002 fafe 	bl	800bd08 <__ssprint_r>
 800970c:	2800      	cmp	r0, #0
 800970e:	f47f ab3f 	bne.w	8008d90 <_svfprintf_r+0x190>
 8009712:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009716:	463c      	mov	r4, r7
 8009718:	e40a      	b.n	8008f30 <_svfprintf_r+0x330>
 800971a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800971e:	970c      	str	r7, [sp, #48]	; 0x30
 8009720:	f7ff bb88 	b.w	8008e34 <_svfprintf_r+0x234>
 8009724:	0800d16c 	.word	0x0800d16c
 8009728:	0800d18c 	.word	0x0800d18c
 800972c:	0800d090 	.word	0x0800d090
 8009730:	0800d168 	.word	0x0800d168
 8009734:	0800d148 	.word	0x0800d148
 8009738:	9812      	ldr	r0, [sp, #72]	; 0x48
 800973a:	46bb      	mov	fp, r7
 800973c:	ea4f 1318 	mov.w	r3, r8, lsr #4
 8009740:	f008 010f 	and.w	r1, r8, #15
 8009744:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
 8009748:	ea4f 1219 	mov.w	r2, r9, lsr #4
 800974c:	4698      	mov	r8, r3
 800974e:	4691      	mov	r9, r2
 8009750:	5c43      	ldrb	r3, [r0, r1]
 8009752:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8009756:	ea58 0309 	orrs.w	r3, r8, r9
 800975a:	d1ef      	bne.n	800973c <_svfprintf_r+0xb3c>
 800975c:	465b      	mov	r3, fp
 800975e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8009762:	1afb      	subs	r3, r7, r3
 8009764:	9309      	str	r3, [sp, #36]	; 0x24
 8009766:	f7ff bb65 	b.w	8008e34 <_svfprintf_r+0x234>
 800976a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800976c:	2d00      	cmp	r5, #0
 800976e:	f340 8211 	ble.w	8009b94 <_svfprintf_r+0xf94>
 8009772:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009774:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009776:	428a      	cmp	r2, r1
 8009778:	4613      	mov	r3, r2
 800977a:	bfa8      	it	ge
 800977c:	460b      	movge	r3, r1
 800977e:	461d      	mov	r5, r3
 8009780:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009782:	2d00      	cmp	r5, #0
 8009784:	eb01 0a02 	add.w	sl, r1, r2
 8009788:	dd0b      	ble.n	80097a2 <_svfprintf_r+0xba2>
 800978a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800978c:	6021      	str	r1, [r4, #0]
 800978e:	3301      	adds	r3, #1
 8009790:	44ab      	add	fp, r5
 8009792:	2b07      	cmp	r3, #7
 8009794:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009798:	6065      	str	r5, [r4, #4]
 800979a:	9322      	str	r3, [sp, #136]	; 0x88
 800979c:	f300 8355 	bgt.w	8009e4a <_svfprintf_r+0x124a>
 80097a0:	3408      	adds	r4, #8
 80097a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097a4:	2d00      	cmp	r5, #0
 80097a6:	bfa8      	it	ge
 80097a8:	1b5b      	subge	r3, r3, r5
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	461d      	mov	r5, r3
 80097ae:	f340 80f5 	ble.w	800999c <_svfprintf_r+0xd9c>
 80097b2:	2d10      	cmp	r5, #16
 80097b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097b6:	f8df 9608 	ldr.w	r9, [pc, #1544]	; 8009dc0 <_svfprintf_r+0x11c0>
 80097ba:	f340 81d2 	ble.w	8009b62 <_svfprintf_r+0xf62>
 80097be:	465a      	mov	r2, fp
 80097c0:	f04f 0810 	mov.w	r8, #16
 80097c4:	f8dd b010 	ldr.w	fp, [sp, #16]
 80097c8:	e004      	b.n	80097d4 <_svfprintf_r+0xbd4>
 80097ca:	3408      	adds	r4, #8
 80097cc:	3d10      	subs	r5, #16
 80097ce:	2d10      	cmp	r5, #16
 80097d0:	f340 81c6 	ble.w	8009b60 <_svfprintf_r+0xf60>
 80097d4:	3301      	adds	r3, #1
 80097d6:	3210      	adds	r2, #16
 80097d8:	2b07      	cmp	r3, #7
 80097da:	9223      	str	r2, [sp, #140]	; 0x8c
 80097dc:	9322      	str	r3, [sp, #136]	; 0x88
 80097de:	f8c4 9000 	str.w	r9, [r4]
 80097e2:	f8c4 8004 	str.w	r8, [r4, #4]
 80097e6:	ddf0      	ble.n	80097ca <_svfprintf_r+0xbca>
 80097e8:	4658      	mov	r0, fp
 80097ea:	4631      	mov	r1, r6
 80097ec:	aa21      	add	r2, sp, #132	; 0x84
 80097ee:	f002 fa8b 	bl	800bd08 <__ssprint_r>
 80097f2:	2800      	cmp	r0, #0
 80097f4:	f47f aacc 	bne.w	8008d90 <_svfprintf_r+0x190>
 80097f8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80097fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097fc:	463c      	mov	r4, r7
 80097fe:	e7e5      	b.n	80097cc <_svfprintf_r+0xbcc>
 8009800:	9804      	ldr	r0, [sp, #16]
 8009802:	4631      	mov	r1, r6
 8009804:	aa21      	add	r2, sp, #132	; 0x84
 8009806:	f002 fa7f 	bl	800bd08 <__ssprint_r>
 800980a:	2800      	cmp	r0, #0
 800980c:	f47f aac0 	bne.w	8008d90 <_svfprintf_r+0x190>
 8009810:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8009814:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009818:	463c      	mov	r4, r7
 800981a:	f7ff bb76 	b.w	8008f0a <_svfprintf_r+0x30a>
 800981e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8009822:	f1b8 0f00 	cmp.w	r8, #0
 8009826:	f77f af2b 	ble.w	8009680 <_svfprintf_r+0xa80>
 800982a:	f1b8 0f10 	cmp.w	r8, #16
 800982e:	f8df 9590 	ldr.w	r9, [pc, #1424]	; 8009dc0 <_svfprintf_r+0x11c0>
 8009832:	dd25      	ble.n	8009880 <_svfprintf_r+0xc80>
 8009834:	465b      	mov	r3, fp
 8009836:	f04f 0a10 	mov.w	sl, #16
 800983a:	f8dd b010 	ldr.w	fp, [sp, #16]
 800983e:	e006      	b.n	800984e <_svfprintf_r+0xc4e>
 8009840:	f1a8 0810 	sub.w	r8, r8, #16
 8009844:	f1b8 0f10 	cmp.w	r8, #16
 8009848:	f104 0408 	add.w	r4, r4, #8
 800984c:	dd17      	ble.n	800987e <_svfprintf_r+0xc7e>
 800984e:	3501      	adds	r5, #1
 8009850:	3310      	adds	r3, #16
 8009852:	2d07      	cmp	r5, #7
 8009854:	9323      	str	r3, [sp, #140]	; 0x8c
 8009856:	9522      	str	r5, [sp, #136]	; 0x88
 8009858:	e884 0600 	stmia.w	r4, {r9, sl}
 800985c:	ddf0      	ble.n	8009840 <_svfprintf_r+0xc40>
 800985e:	4658      	mov	r0, fp
 8009860:	4631      	mov	r1, r6
 8009862:	aa21      	add	r2, sp, #132	; 0x84
 8009864:	f002 fa50 	bl	800bd08 <__ssprint_r>
 8009868:	2800      	cmp	r0, #0
 800986a:	f47f aa91 	bne.w	8008d90 <_svfprintf_r+0x190>
 800986e:	f1a8 0810 	sub.w	r8, r8, #16
 8009872:	f1b8 0f10 	cmp.w	r8, #16
 8009876:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009878:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800987a:	463c      	mov	r4, r7
 800987c:	dce7      	bgt.n	800984e <_svfprintf_r+0xc4e>
 800987e:	469b      	mov	fp, r3
 8009880:	3501      	adds	r5, #1
 8009882:	44c3      	add	fp, r8
 8009884:	2d07      	cmp	r5, #7
 8009886:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800988a:	9522      	str	r5, [sp, #136]	; 0x88
 800988c:	f8c4 9000 	str.w	r9, [r4]
 8009890:	f8c4 8004 	str.w	r8, [r4, #4]
 8009894:	f77f aef3 	ble.w	800967e <_svfprintf_r+0xa7e>
 8009898:	9804      	ldr	r0, [sp, #16]
 800989a:	4631      	mov	r1, r6
 800989c:	aa21      	add	r2, sp, #132	; 0x84
 800989e:	f002 fa33 	bl	800bd08 <__ssprint_r>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	f47f aa74 	bne.w	8008d90 <_svfprintf_r+0x190>
 80098a8:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80098ac:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80098ae:	463c      	mov	r4, r7
 80098b0:	e6e6      	b.n	8009680 <_svfprintf_r+0xa80>
 80098b2:	4693      	mov	fp, r2
 80098b4:	3301      	adds	r3, #1
 80098b6:	44ab      	add	fp, r5
 80098b8:	2b07      	cmp	r3, #7
 80098ba:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80098be:	9322      	str	r3, [sp, #136]	; 0x88
 80098c0:	f8c4 9000 	str.w	r9, [r4]
 80098c4:	6065      	str	r5, [r4, #4]
 80098c6:	f77f ab9d 	ble.w	8009004 <_svfprintf_r+0x404>
 80098ca:	e6e5      	b.n	8009698 <_svfprintf_r+0xa98>
 80098cc:	46bb      	mov	fp, r7
 80098ce:	f8cd c014 	str.w	ip, [sp, #20]
 80098d2:	4640      	mov	r0, r8
 80098d4:	4649      	mov	r1, r9
 80098d6:	220a      	movs	r2, #10
 80098d8:	2300      	movs	r3, #0
 80098da:	f7f7 fa49 	bl	8000d70 <__aeabi_uldivmod>
 80098de:	3230      	adds	r2, #48	; 0x30
 80098e0:	4640      	mov	r0, r8
 80098e2:	4649      	mov	r1, r9
 80098e4:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 80098e8:	2300      	movs	r3, #0
 80098ea:	220a      	movs	r2, #10
 80098ec:	f7f7 fa40 	bl	8000d70 <__aeabi_uldivmod>
 80098f0:	4680      	mov	r8, r0
 80098f2:	4689      	mov	r9, r1
 80098f4:	ea58 0309 	orrs.w	r3, r8, r9
 80098f8:	d1eb      	bne.n	80098d2 <_svfprintf_r+0xcd2>
 80098fa:	465b      	mov	r3, fp
 80098fc:	1afb      	subs	r3, r7, r3
 80098fe:	f8dd c014 	ldr.w	ip, [sp, #20]
 8009902:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8009906:	9309      	str	r3, [sp, #36]	; 0x24
 8009908:	f7ff ba94 	b.w	8008e34 <_svfprintf_r+0x234>
 800990c:	2b30      	cmp	r3, #48	; 0x30
 800990e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009910:	f43f af27 	beq.w	8009762 <_svfprintf_r+0xb62>
 8009914:	3b01      	subs	r3, #1
 8009916:	461a      	mov	r2, r3
 8009918:	930c      	str	r3, [sp, #48]	; 0x30
 800991a:	1aba      	subs	r2, r7, r2
 800991c:	2330      	movs	r3, #48	; 0x30
 800991e:	9209      	str	r2, [sp, #36]	; 0x24
 8009920:	f801 3c01 	strb.w	r3, [r1, #-1]
 8009924:	f7ff ba86 	b.w	8008e34 <_svfprintf_r+0x234>
 8009928:	990a      	ldr	r1, [sp, #40]	; 0x28
 800992a:	680a      	ldr	r2, [r1, #0]
 800992c:	3104      	adds	r1, #4
 800992e:	910a      	str	r1, [sp, #40]	; 0x28
 8009930:	4690      	mov	r8, r2
 8009932:	f04f 0900 	mov.w	r9, #0
 8009936:	f7ff ba4a 	b.w	8008dce <_svfprintf_r+0x1ce>
 800993a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800993c:	680a      	ldr	r2, [r1, #0]
 800993e:	3104      	adds	r1, #4
 8009940:	2301      	movs	r3, #1
 8009942:	910a      	str	r1, [sp, #40]	; 0x28
 8009944:	4690      	mov	r8, r2
 8009946:	f04f 0900 	mov.w	r9, #0
 800994a:	f7ff ba40 	b.w	8008dce <_svfprintf_r+0x1ce>
 800994e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009950:	6813      	ldr	r3, [r2, #0]
 8009952:	4698      	mov	r8, r3
 8009954:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8009958:	4613      	mov	r3, r2
 800995a:	3304      	adds	r3, #4
 800995c:	4642      	mov	r2, r8
 800995e:	930a      	str	r3, [sp, #40]	; 0x28
 8009960:	2a00      	cmp	r2, #0
 8009962:	464b      	mov	r3, r9
 8009964:	f173 0300 	sbcs.w	r3, r3, #0
 8009968:	f6bf abf2 	bge.w	8009150 <_svfprintf_r+0x550>
 800996c:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8009970:	f1d8 0800 	rsbs	r8, r8, #0
 8009974:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 8009978:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 800997c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009980:	2301      	movs	r3, #1
 8009982:	f7ff ba2a 	b.w	8008dda <_svfprintf_r+0x1da>
 8009986:	9804      	ldr	r0, [sp, #16]
 8009988:	4631      	mov	r1, r6
 800998a:	aa21      	add	r2, sp, #132	; 0x84
 800998c:	f002 f9bc 	bl	800bd08 <__ssprint_r>
 8009990:	2800      	cmp	r0, #0
 8009992:	f47f a9fd 	bne.w	8008d90 <_svfprintf_r+0x190>
 8009996:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800999a:	463c      	mov	r4, r7
 800999c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800999e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80099a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099a2:	440a      	add	r2, r1
 80099a4:	4690      	mov	r8, r2
 80099a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099a8:	4293      	cmp	r3, r2
 80099aa:	db46      	blt.n	8009a3a <_svfprintf_r+0xe3a>
 80099ac:	9a03      	ldr	r2, [sp, #12]
 80099ae:	07d0      	lsls	r0, r2, #31
 80099b0:	d443      	bmi.n	8009a3a <_svfprintf_r+0xe3a>
 80099b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099b4:	ebc8 050a 	rsb	r5, r8, sl
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	429d      	cmp	r5, r3
 80099bc:	bfa8      	it	ge
 80099be:	461d      	movge	r5, r3
 80099c0:	2d00      	cmp	r5, #0
 80099c2:	dd0c      	ble.n	80099de <_svfprintf_r+0xdde>
 80099c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80099c6:	f8c4 8000 	str.w	r8, [r4]
 80099ca:	3201      	adds	r2, #1
 80099cc:	44ab      	add	fp, r5
 80099ce:	2a07      	cmp	r2, #7
 80099d0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80099d4:	6065      	str	r5, [r4, #4]
 80099d6:	9222      	str	r2, [sp, #136]	; 0x88
 80099d8:	f300 826f 	bgt.w	8009eba <_svfprintf_r+0x12ba>
 80099dc:	3408      	adds	r4, #8
 80099de:	2d00      	cmp	r5, #0
 80099e0:	bfac      	ite	ge
 80099e2:	1b5d      	subge	r5, r3, r5
 80099e4:	461d      	movlt	r5, r3
 80099e6:	2d00      	cmp	r5, #0
 80099e8:	f77f ab0d 	ble.w	8009006 <_svfprintf_r+0x406>
 80099ec:	2d10      	cmp	r5, #16
 80099ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099f0:	f8df 93cc 	ldr.w	r9, [pc, #972]	; 8009dc0 <_svfprintf_r+0x11c0>
 80099f4:	f77f af5e 	ble.w	80098b4 <_svfprintf_r+0xcb4>
 80099f8:	f04f 0810 	mov.w	r8, #16
 80099fc:	465a      	mov	r2, fp
 80099fe:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009a02:	e004      	b.n	8009a0e <_svfprintf_r+0xe0e>
 8009a04:	3408      	adds	r4, #8
 8009a06:	3d10      	subs	r5, #16
 8009a08:	2d10      	cmp	r5, #16
 8009a0a:	f77f af52 	ble.w	80098b2 <_svfprintf_r+0xcb2>
 8009a0e:	3301      	adds	r3, #1
 8009a10:	3210      	adds	r2, #16
 8009a12:	2b07      	cmp	r3, #7
 8009a14:	9223      	str	r2, [sp, #140]	; 0x8c
 8009a16:	9322      	str	r3, [sp, #136]	; 0x88
 8009a18:	f8c4 9000 	str.w	r9, [r4]
 8009a1c:	f8c4 8004 	str.w	r8, [r4, #4]
 8009a20:	ddf0      	ble.n	8009a04 <_svfprintf_r+0xe04>
 8009a22:	4650      	mov	r0, sl
 8009a24:	4631      	mov	r1, r6
 8009a26:	aa21      	add	r2, sp, #132	; 0x84
 8009a28:	f002 f96e 	bl	800bd08 <__ssprint_r>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	f47f a9af 	bne.w	8008d90 <_svfprintf_r+0x190>
 8009a32:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009a34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a36:	463c      	mov	r4, r7
 8009a38:	e7e5      	b.n	8009a06 <_svfprintf_r+0xe06>
 8009a3a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009a3c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009a3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009a40:	6021      	str	r1, [r4, #0]
 8009a42:	3201      	adds	r2, #1
 8009a44:	4483      	add	fp, r0
 8009a46:	2a07      	cmp	r2, #7
 8009a48:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009a4c:	6060      	str	r0, [r4, #4]
 8009a4e:	9222      	str	r2, [sp, #136]	; 0x88
 8009a50:	f300 8207 	bgt.w	8009e62 <_svfprintf_r+0x1262>
 8009a54:	3408      	adds	r4, #8
 8009a56:	e7ac      	b.n	80099b2 <_svfprintf_r+0xdb2>
 8009a58:	9b03      	ldr	r3, [sp, #12]
 8009a5a:	07d9      	lsls	r1, r3, #31
 8009a5c:	f53f addd 	bmi.w	800961a <_svfprintf_r+0xa1a>
 8009a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a62:	6023      	str	r3, [r4, #0]
 8009a64:	3501      	adds	r5, #1
 8009a66:	f10b 0b01 	add.w	fp, fp, #1
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	2d07      	cmp	r5, #7
 8009a6e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009a72:	9522      	str	r5, [sp, #136]	; 0x88
 8009a74:	6063      	str	r3, [r4, #4]
 8009a76:	f77f ae02 	ble.w	800967e <_svfprintf_r+0xa7e>
 8009a7a:	e70d      	b.n	8009898 <_svfprintf_r+0xc98>
 8009a7c:	9804      	ldr	r0, [sp, #16]
 8009a7e:	4631      	mov	r1, r6
 8009a80:	aa21      	add	r2, sp, #132	; 0x84
 8009a82:	f002 f941 	bl	800bd08 <__ssprint_r>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	f47f a982 	bne.w	8008d90 <_svfprintf_r+0x190>
 8009a8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a8e:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8009a90:	463c      	mov	r4, r7
 8009a92:	e5cf      	b.n	8009634 <_svfprintf_r+0xa34>
 8009a94:	9804      	ldr	r0, [sp, #16]
 8009a96:	4631      	mov	r1, r6
 8009a98:	aa21      	add	r2, sp, #132	; 0x84
 8009a9a:	f002 f935 	bl	800bd08 <__ssprint_r>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	f47f a976 	bne.w	8008d90 <_svfprintf_r+0x190>
 8009aa4:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009aa8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8009aaa:	463c      	mov	r4, r7
 8009aac:	e5d0      	b.n	8009650 <_svfprintf_r+0xa50>
 8009aae:	9804      	ldr	r0, [sp, #16]
 8009ab0:	4631      	mov	r1, r6
 8009ab2:	aa21      	add	r2, sp, #132	; 0x84
 8009ab4:	f002 f928 	bl	800bd08 <__ssprint_r>
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	f47f a969 	bne.w	8008d90 <_svfprintf_r+0x190>
 8009abe:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009ac2:	463c      	mov	r4, r7
 8009ac4:	f7ff ba49 	b.w	8008f5a <_svfprintf_r+0x35a>
 8009ac8:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8009acc:	f002 f8c0 	bl	800bc50 <__fpclassifyd>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	f040 80d1 	bne.w	8009c78 <_svfprintf_r+0x1078>
 8009ad6:	4686      	mov	lr, r0
 8009ad8:	4ab6      	ldr	r2, [pc, #728]	; (8009db4 <_svfprintf_r+0x11b4>)
 8009ada:	4bb7      	ldr	r3, [pc, #732]	; (8009db8 <_svfprintf_r+0x11b8>)
 8009adc:	900d      	str	r0, [sp, #52]	; 0x34
 8009ade:	9803      	ldr	r0, [sp, #12]
 8009ae0:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8009ae4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8009ae8:	2103      	movs	r1, #3
 8009aea:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8009aee:	2d47      	cmp	r5, #71	; 0x47
 8009af0:	bfd8      	it	le
 8009af2:	461a      	movle	r2, r3
 8009af4:	9105      	str	r1, [sp, #20]
 8009af6:	9003      	str	r0, [sp, #12]
 8009af8:	920c      	str	r2, [sp, #48]	; 0x30
 8009afa:	9109      	str	r1, [sp, #36]	; 0x24
 8009afc:	f7ff b9a2 	b.w	8008e44 <_svfprintf_r+0x244>
 8009b00:	f029 0907 	bic.w	r9, r9, #7
 8009b04:	ed99 7b00 	vldr	d7, [r9]
 8009b08:	f109 0308 	add.w	r3, r9, #8
 8009b0c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009b10:	930a      	str	r3, [sp, #40]	; 0x28
 8009b12:	e478      	b.n	8009406 <_svfprintf_r+0x806>
 8009b14:	9b03      	ldr	r3, [sp, #12]
 8009b16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	f43f ac1f 	beq.w	8009360 <_svfprintf_r+0x760>
 8009b22:	3304      	adds	r3, #4
 8009b24:	f8b2 8000 	ldrh.w	r8, [r2]
 8009b28:	930a      	str	r3, [sp, #40]	; 0x28
 8009b2a:	f04f 0900 	mov.w	r9, #0
 8009b2e:	f7ff bb28 	b.w	8009182 <_svfprintf_r+0x582>
 8009b32:	9b03      	ldr	r3, [sp, #12]
 8009b34:	06db      	lsls	r3, r3, #27
 8009b36:	d40b      	bmi.n	8009b50 <_svfprintf_r+0xf50>
 8009b38:	9b03      	ldr	r3, [sp, #12]
 8009b3a:	065d      	lsls	r5, r3, #25
 8009b3c:	d508      	bpl.n	8009b50 <_svfprintf_r+0xf50>
 8009b3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b40:	6813      	ldr	r3, [r2, #0]
 8009b42:	3204      	adds	r2, #4
 8009b44:	920a      	str	r2, [sp, #40]	; 0x28
 8009b46:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009b4a:	801a      	strh	r2, [r3, #0]
 8009b4c:	f7ff b87f 	b.w	8008c4e <_svfprintf_r+0x4e>
 8009b50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b52:	6813      	ldr	r3, [r2, #0]
 8009b54:	3204      	adds	r2, #4
 8009b56:	920a      	str	r2, [sp, #40]	; 0x28
 8009b58:	9a07      	ldr	r2, [sp, #28]
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	f7ff b877 	b.w	8008c4e <_svfprintf_r+0x4e>
 8009b60:	4693      	mov	fp, r2
 8009b62:	3301      	adds	r3, #1
 8009b64:	44ab      	add	fp, r5
 8009b66:	2b07      	cmp	r3, #7
 8009b68:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009b6c:	9322      	str	r3, [sp, #136]	; 0x88
 8009b6e:	f8c4 9000 	str.w	r9, [r4]
 8009b72:	6065      	str	r5, [r4, #4]
 8009b74:	f73f af07 	bgt.w	8009986 <_svfprintf_r+0xd86>
 8009b78:	3408      	adds	r4, #8
 8009b7a:	e70f      	b.n	800999c <_svfprintf_r+0xd9c>
 8009b7c:	9804      	ldr	r0, [sp, #16]
 8009b7e:	4631      	mov	r1, r6
 8009b80:	aa21      	add	r2, sp, #132	; 0x84
 8009b82:	f002 f8c1 	bl	800bd08 <__ssprint_r>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	f47f a902 	bne.w	8008d90 <_svfprintf_r+0x190>
 8009b8c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009b90:	463c      	mov	r4, r7
 8009b92:	e4b5      	b.n	8009500 <_svfprintf_r+0x900>
 8009b94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b96:	4a89      	ldr	r2, [pc, #548]	; (8009dbc <_svfprintf_r+0x11bc>)
 8009b98:	6022      	str	r2, [r4, #0]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	f10b 0b01 	add.w	fp, fp, #1
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	2b07      	cmp	r3, #7
 8009ba4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009ba8:	9322      	str	r3, [sp, #136]	; 0x88
 8009baa:	6062      	str	r2, [r4, #4]
 8009bac:	f300 80f1 	bgt.w	8009d92 <_svfprintf_r+0x1192>
 8009bb0:	3408      	adds	r4, #8
 8009bb2:	b92d      	cbnz	r5, 8009bc0 <_svfprintf_r+0xfc0>
 8009bb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bb6:	b91b      	cbnz	r3, 8009bc0 <_svfprintf_r+0xfc0>
 8009bb8:	9b03      	ldr	r3, [sp, #12]
 8009bba:	07db      	lsls	r3, r3, #31
 8009bbc:	f57f aa23 	bpl.w	8009006 <_svfprintf_r+0x406>
 8009bc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bc2:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009bc4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009bc6:	6022      	str	r2, [r4, #0]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	eb0b 0100 	add.w	r1, fp, r0
 8009bce:	2b07      	cmp	r3, #7
 8009bd0:	9123      	str	r1, [sp, #140]	; 0x8c
 8009bd2:	6060      	str	r0, [r4, #4]
 8009bd4:	9322      	str	r3, [sp, #136]	; 0x88
 8009bd6:	f300 81ef 	bgt.w	8009fb8 <_svfprintf_r+0x13b8>
 8009bda:	f104 0208 	add.w	r2, r4, #8
 8009bde:	426d      	negs	r5, r5
 8009be0:	2d00      	cmp	r5, #0
 8009be2:	f340 80fa 	ble.w	8009dda <_svfprintf_r+0x11da>
 8009be6:	2d10      	cmp	r5, #16
 8009be8:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8009dc0 <_svfprintf_r+0x11c0>
 8009bec:	f340 8146 	ble.w	8009e7c <_svfprintf_r+0x127c>
 8009bf0:	2410      	movs	r4, #16
 8009bf2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009bf6:	e004      	b.n	8009c02 <_svfprintf_r+0x1002>
 8009bf8:	3208      	adds	r2, #8
 8009bfa:	3d10      	subs	r5, #16
 8009bfc:	2d10      	cmp	r5, #16
 8009bfe:	f340 813d 	ble.w	8009e7c <_svfprintf_r+0x127c>
 8009c02:	3301      	adds	r3, #1
 8009c04:	3110      	adds	r1, #16
 8009c06:	2b07      	cmp	r3, #7
 8009c08:	9123      	str	r1, [sp, #140]	; 0x8c
 8009c0a:	9322      	str	r3, [sp, #136]	; 0x88
 8009c0c:	f8c2 9000 	str.w	r9, [r2]
 8009c10:	6054      	str	r4, [r2, #4]
 8009c12:	ddf1      	ble.n	8009bf8 <_svfprintf_r+0xff8>
 8009c14:	4640      	mov	r0, r8
 8009c16:	4631      	mov	r1, r6
 8009c18:	aa21      	add	r2, sp, #132	; 0x84
 8009c1a:	f002 f875 	bl	800bd08 <__ssprint_r>
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	f47f a8b6 	bne.w	8008d90 <_svfprintf_r+0x190>
 8009c24:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8009c26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c28:	463a      	mov	r2, r7
 8009c2a:	e7e6      	b.n	8009bfa <_svfprintf_r+0xffa>
 8009c2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c2e:	46b1      	mov	r9, r6
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f43f a8ae 	beq.w	8008d92 <_svfprintf_r+0x192>
 8009c36:	9804      	ldr	r0, [sp, #16]
 8009c38:	4631      	mov	r1, r6
 8009c3a:	aa21      	add	r2, sp, #132	; 0x84
 8009c3c:	f002 f864 	bl	800bd08 <__ssprint_r>
 8009c40:	f7ff b8a7 	b.w	8008d92 <_svfprintf_r+0x192>
 8009c44:	f041 0120 	orr.w	r1, r1, #32
 8009c48:	9103      	str	r1, [sp, #12]
 8009c4a:	785d      	ldrb	r5, [r3, #1]
 8009c4c:	1c59      	adds	r1, r3, #1
 8009c4e:	f7ff b82c 	b.w	8008caa <_svfprintf_r+0xaa>
 8009c52:	9808      	ldr	r0, [sp, #32]
 8009c54:	910a      	str	r1, [sp, #40]	; 0x28
 8009c56:	4240      	negs	r0, r0
 8009c58:	9008      	str	r0, [sp, #32]
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	f7ff ba29 	b.w	80090b2 <_svfprintf_r+0x4b2>
 8009c60:	9804      	ldr	r0, [sp, #16]
 8009c62:	4631      	mov	r1, r6
 8009c64:	aa21      	add	r2, sp, #132	; 0x84
 8009c66:	f002 f84f 	bl	800bd08 <__ssprint_r>
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	f47f a890 	bne.w	8008d90 <_svfprintf_r+0x190>
 8009c70:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009c74:	463c      	mov	r4, r7
 8009c76:	e459      	b.n	800952c <_svfprintf_r+0x92c>
 8009c78:	f025 0320 	bic.w	r3, r5, #32
 8009c7c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009c80:	9305      	str	r3, [sp, #20]
 8009c82:	f000 8093 	beq.w	8009dac <_svfprintf_r+0x11ac>
 8009c86:	2b47      	cmp	r3, #71	; 0x47
 8009c88:	d105      	bne.n	8009c96 <_svfprintf_r+0x1096>
 8009c8a:	f1ba 0f00 	cmp.w	sl, #0
 8009c8e:	bf14      	ite	ne
 8009c90:	46d3      	movne	fp, sl
 8009c92:	f04f 0b01 	moveq.w	fp, #1
 8009c96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c98:	9a03      	ldr	r2, [sp, #12]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ca0:	920b      	str	r2, [sp, #44]	; 0x2c
 8009ca2:	f2c0 81a4 	blt.w	8009fee <_svfprintf_r+0x13ee>
 8009ca6:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8009caa:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8009cae:	f04f 0a00 	mov.w	sl, #0
 8009cb2:	2d66      	cmp	r5, #102	; 0x66
 8009cb4:	f000 80ac 	beq.w	8009e10 <_svfprintf_r+0x1210>
 8009cb8:	2d46      	cmp	r5, #70	; 0x46
 8009cba:	f000 80a9 	beq.w	8009e10 <_svfprintf_r+0x1210>
 8009cbe:	9b05      	ldr	r3, [sp, #20]
 8009cc0:	9804      	ldr	r0, [sp, #16]
 8009cc2:	2b45      	cmp	r3, #69	; 0x45
 8009cc4:	bf0c      	ite	eq
 8009cc6:	f10b 0901 	addeq.w	r9, fp, #1
 8009cca:	46d9      	movne	r9, fp
 8009ccc:	aa1c      	add	r2, sp, #112	; 0x70
 8009cce:	ab1f      	add	r3, sp, #124	; 0x7c
 8009cd0:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009cd4:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
 8009cd8:	2102      	movs	r1, #2
 8009cda:	464a      	mov	r2, r9
 8009cdc:	ab1b      	add	r3, sp, #108	; 0x6c
 8009cde:	f000 fa8b 	bl	800a1f8 <_dtoa_r>
 8009ce2:	2d67      	cmp	r5, #103	; 0x67
 8009ce4:	900c      	str	r0, [sp, #48]	; 0x30
 8009ce6:	d002      	beq.n	8009cee <_svfprintf_r+0x10ee>
 8009ce8:	2d47      	cmp	r5, #71	; 0x47
 8009cea:	f040 809f 	bne.w	8009e2c <_svfprintf_r+0x122c>
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	07db      	lsls	r3, r3, #31
 8009cf2:	f140 8192 	bpl.w	800a01a <_svfprintf_r+0x141a>
 8009cf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cf8:	eb03 0809 	add.w	r8, r3, r9
 8009cfc:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8009d00:	2200      	movs	r2, #0
 8009d02:	2300      	movs	r3, #0
 8009d04:	f7f6 ffda 	bl	8000cbc <__aeabi_dcmpeq>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	f040 80fd 	bne.w	8009f08 <_svfprintf_r+0x1308>
 8009d0e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d10:	4598      	cmp	r8, r3
 8009d12:	d906      	bls.n	8009d22 <_svfprintf_r+0x1122>
 8009d14:	2130      	movs	r1, #48	; 0x30
 8009d16:	1c5a      	adds	r2, r3, #1
 8009d18:	921f      	str	r2, [sp, #124]	; 0x7c
 8009d1a:	7019      	strb	r1, [r3, #0]
 8009d1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d1e:	4598      	cmp	r8, r3
 8009d20:	d8f9      	bhi.n	8009d16 <_svfprintf_r+0x1116>
 8009d22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d24:	1a9b      	subs	r3, r3, r2
 8009d26:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d28:	9b05      	ldr	r3, [sp, #20]
 8009d2a:	2b47      	cmp	r3, #71	; 0x47
 8009d2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d2e:	f000 80de 	beq.w	8009eee <_svfprintf_r+0x12ee>
 8009d32:	2d65      	cmp	r5, #101	; 0x65
 8009d34:	f340 80f8 	ble.w	8009f28 <_svfprintf_r+0x1328>
 8009d38:	2d66      	cmp	r5, #102	; 0x66
 8009d3a:	930e      	str	r3, [sp, #56]	; 0x38
 8009d3c:	f000 8160 	beq.w	800a000 <_svfprintf_r+0x1400>
 8009d40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d44:	4293      	cmp	r3, r2
 8009d46:	f300 8144 	bgt.w	8009fd2 <_svfprintf_r+0x13d2>
 8009d4a:	9b03      	ldr	r3, [sp, #12]
 8009d4c:	07d9      	lsls	r1, r3, #31
 8009d4e:	f100 8166 	bmi.w	800a01e <_svfprintf_r+0x141e>
 8009d52:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009d56:	9209      	str	r2, [sp, #36]	; 0x24
 8009d58:	f1ba 0f00 	cmp.w	sl, #0
 8009d5c:	f040 80bc 	bne.w	8009ed8 <_svfprintf_r+0x12d8>
 8009d60:	9305      	str	r3, [sp, #20]
 8009d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d64:	9303      	str	r3, [sp, #12]
 8009d66:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009d6a:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8009d6e:	f7ff b869 	b.w	8008e44 <_svfprintf_r+0x244>
 8009d72:	9804      	ldr	r0, [sp, #16]
 8009d74:	2140      	movs	r1, #64	; 0x40
 8009d76:	f001 f995 	bl	800b0a4 <_malloc_r>
 8009d7a:	f8c9 0000 	str.w	r0, [r9]
 8009d7e:	f8c9 0010 	str.w	r0, [r9, #16]
 8009d82:	2800      	cmp	r0, #0
 8009d84:	f000 8197 	beq.w	800a0b6 <_svfprintf_r+0x14b6>
 8009d88:	2340      	movs	r3, #64	; 0x40
 8009d8a:	f8c9 3014 	str.w	r3, [r9, #20]
 8009d8e:	f7fe bf4f 	b.w	8008c30 <_svfprintf_r+0x30>
 8009d92:	9804      	ldr	r0, [sp, #16]
 8009d94:	4631      	mov	r1, r6
 8009d96:	aa21      	add	r2, sp, #132	; 0x84
 8009d98:	f001 ffb6 	bl	800bd08 <__ssprint_r>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	f47e aff7 	bne.w	8008d90 <_svfprintf_r+0x190>
 8009da2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009da4:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009da8:	463c      	mov	r4, r7
 8009daa:	e702      	b.n	8009bb2 <_svfprintf_r+0xfb2>
 8009dac:	f04f 0b06 	mov.w	fp, #6
 8009db0:	e771      	b.n	8009c96 <_svfprintf_r+0x1096>
 8009db2:	bf00      	nop
 8009db4:	0800d174 	.word	0x0800d174
 8009db8:	0800d170 	.word	0x0800d170
 8009dbc:	0800d090 	.word	0x0800d090
 8009dc0:	0800d148 	.word	0x0800d148
 8009dc4:	9804      	ldr	r0, [sp, #16]
 8009dc6:	4631      	mov	r1, r6
 8009dc8:	aa21      	add	r2, sp, #132	; 0x84
 8009dca:	f001 ff9d 	bl	800bd08 <__ssprint_r>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	f47e afde 	bne.w	8008d90 <_svfprintf_r+0x190>
 8009dd4:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8009dd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009dd8:	463a      	mov	r2, r7
 8009dda:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8009ddc:	6054      	str	r4, [r2, #4]
 8009dde:	3301      	adds	r3, #1
 8009de0:	eb01 0b04 	add.w	fp, r1, r4
 8009de4:	2b07      	cmp	r3, #7
 8009de6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009de8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009dec:	9322      	str	r3, [sp, #136]	; 0x88
 8009dee:	6011      	str	r1, [r2, #0]
 8009df0:	f73f ac52 	bgt.w	8009698 <_svfprintf_r+0xa98>
 8009df4:	f102 0408 	add.w	r4, r2, #8
 8009df8:	f7ff b905 	b.w	8009006 <_svfprintf_r+0x406>
 8009dfc:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8009e00:	f001 ff54 	bl	800bcac <strlen>
 8009e04:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8009e08:	9009      	str	r0, [sp, #36]	; 0x24
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	f7ff ba0e 	b.w	800922c <_svfprintf_r+0x62c>
 8009e10:	aa1c      	add	r2, sp, #112	; 0x70
 8009e12:	ab1f      	add	r3, sp, #124	; 0x7c
 8009e14:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009e18:	9804      	ldr	r0, [sp, #16]
 8009e1a:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
 8009e1e:	2103      	movs	r1, #3
 8009e20:	465a      	mov	r2, fp
 8009e22:	ab1b      	add	r3, sp, #108	; 0x6c
 8009e24:	f000 f9e8 	bl	800a1f8 <_dtoa_r>
 8009e28:	46d9      	mov	r9, fp
 8009e2a:	900c      	str	r0, [sp, #48]	; 0x30
 8009e2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e2e:	eb03 0809 	add.w	r8, r3, r9
 8009e32:	9b05      	ldr	r3, [sp, #20]
 8009e34:	2b46      	cmp	r3, #70	; 0x46
 8009e36:	f47f af61 	bne.w	8009cfc <_svfprintf_r+0x10fc>
 8009e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	2b30      	cmp	r3, #48	; 0x30
 8009e40:	f000 8103 	beq.w	800a04a <_svfprintf_r+0x144a>
 8009e44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e46:	4498      	add	r8, r3
 8009e48:	e758      	b.n	8009cfc <_svfprintf_r+0x10fc>
 8009e4a:	9804      	ldr	r0, [sp, #16]
 8009e4c:	4631      	mov	r1, r6
 8009e4e:	aa21      	add	r2, sp, #132	; 0x84
 8009e50:	f001 ff5a 	bl	800bd08 <__ssprint_r>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	f47e af9b 	bne.w	8008d90 <_svfprintf_r+0x190>
 8009e5a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009e5e:	463c      	mov	r4, r7
 8009e60:	e49f      	b.n	80097a2 <_svfprintf_r+0xba2>
 8009e62:	9804      	ldr	r0, [sp, #16]
 8009e64:	4631      	mov	r1, r6
 8009e66:	aa21      	add	r2, sp, #132	; 0x84
 8009e68:	f001 ff4e 	bl	800bd08 <__ssprint_r>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	f47e af8f 	bne.w	8008d90 <_svfprintf_r+0x190>
 8009e72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e74:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009e78:	463c      	mov	r4, r7
 8009e7a:	e59a      	b.n	80099b2 <_svfprintf_r+0xdb2>
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	4429      	add	r1, r5
 8009e80:	2b07      	cmp	r3, #7
 8009e82:	9123      	str	r1, [sp, #140]	; 0x8c
 8009e84:	9322      	str	r3, [sp, #136]	; 0x88
 8009e86:	f8c2 9000 	str.w	r9, [r2]
 8009e8a:	6055      	str	r5, [r2, #4]
 8009e8c:	dc9a      	bgt.n	8009dc4 <_svfprintf_r+0x11c4>
 8009e8e:	3208      	adds	r2, #8
 8009e90:	e7a3      	b.n	8009dda <_svfprintf_r+0x11da>
 8009e92:	4653      	mov	r3, sl
 8009e94:	2b06      	cmp	r3, #6
 8009e96:	bf28      	it	cs
 8009e98:	2306      	movcs	r3, #6
 8009e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009ea0:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 8009ea4:	9305      	str	r3, [sp, #20]
 8009ea6:	4b87      	ldr	r3, [pc, #540]	; (800a0c4 <_svfprintf_r+0x14c4>)
 8009ea8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8009eac:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8009eb0:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8009eb4:	930c      	str	r3, [sp, #48]	; 0x30
 8009eb6:	f7fe bfc5 	b.w	8008e44 <_svfprintf_r+0x244>
 8009eba:	9804      	ldr	r0, [sp, #16]
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	aa21      	add	r2, sp, #132	; 0x84
 8009ec0:	f001 ff22 	bl	800bd08 <__ssprint_r>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	f47e af63 	bne.w	8008d90 <_svfprintf_r+0x190>
 8009eca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ecc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ece:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009ed2:	1ad3      	subs	r3, r2, r3
 8009ed4:	463c      	mov	r4, r7
 8009ed6:	e582      	b.n	80099de <_svfprintf_r+0xdde>
 8009ed8:	9305      	str	r3, [sp, #20]
 8009eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009edc:	9303      	str	r3, [sp, #12]
 8009ede:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8009ee8:	930d      	str	r3, [sp, #52]	; 0x34
 8009eea:	f7fe bfae 	b.w	8008e4a <_svfprintf_r+0x24a>
 8009eee:	1cda      	adds	r2, r3, #3
 8009ef0:	db19      	blt.n	8009f26 <_svfprintf_r+0x1326>
 8009ef2:	459b      	cmp	fp, r3
 8009ef4:	db17      	blt.n	8009f26 <_svfprintf_r+0x1326>
 8009ef6:	930e      	str	r3, [sp, #56]	; 0x38
 8009ef8:	2567      	movs	r5, #103	; 0x67
 8009efa:	e721      	b.n	8009d40 <_svfprintf_r+0x1140>
 8009efc:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8009f00:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8009f04:	f7ff ba91 	b.w	800942a <_svfprintf_r+0x82a>
 8009f08:	4643      	mov	r3, r8
 8009f0a:	e70a      	b.n	8009d22 <_svfprintf_r+0x1122>
 8009f0c:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8009f10:	900d      	str	r0, [sp, #52]	; 0x34
 8009f12:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8009f16:	900e      	str	r0, [sp, #56]	; 0x38
 8009f18:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8009f1c:	9305      	str	r3, [sp, #20]
 8009f1e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009f22:	f7fe bf8f 	b.w	8008e44 <_svfprintf_r+0x244>
 8009f26:	3d02      	subs	r5, #2
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	931b      	str	r3, [sp, #108]	; 0x6c
 8009f2e:	bfba      	itte	lt
 8009f30:	425b      	neglt	r3, r3
 8009f32:	222d      	movlt	r2, #45	; 0x2d
 8009f34:	222b      	movge	r2, #43	; 0x2b
 8009f36:	2b09      	cmp	r3, #9
 8009f38:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
 8009f3c:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8009f40:	dd7b      	ble.n	800a03a <_svfprintf_r+0x143a>
 8009f42:	f10d 0e83 	add.w	lr, sp, #131	; 0x83
 8009f46:	4670      	mov	r0, lr
 8009f48:	4a5f      	ldr	r2, [pc, #380]	; (800a0c8 <_svfprintf_r+0x14c8>)
 8009f4a:	fb82 2103 	smull	r2, r1, r2, r3
 8009f4e:	17da      	asrs	r2, r3, #31
 8009f50:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8009f54:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8009f58:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8009f5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f60:	2a09      	cmp	r2, #9
 8009f62:	4613      	mov	r3, r2
 8009f64:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8009f68:	dcee      	bgt.n	8009f48 <_svfprintf_r+0x1348>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	3330      	adds	r3, #48	; 0x30
 8009f6e:	b2d9      	uxtb	r1, r3
 8009f70:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8009f74:	4596      	cmp	lr, r2
 8009f76:	f240 809b 	bls.w	800a0b0 <_svfprintf_r+0x14b0>
 8009f7a:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8009f7e:	4603      	mov	r3, r0
 8009f80:	e001      	b.n	8009f86 <_svfprintf_r+0x1386>
 8009f82:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009f86:	f802 1b01 	strb.w	r1, [r2], #1
 8009f8a:	4573      	cmp	r3, lr
 8009f8c:	d1f9      	bne.n	8009f82 <_svfprintf_r+0x1382>
 8009f8e:	ab21      	add	r3, sp, #132	; 0x84
 8009f90:	1a1b      	subs	r3, r3, r0
 8009f92:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8009f96:	4413      	add	r3, r2
 8009f98:	aa1d      	add	r2, sp, #116	; 0x74
 8009f9a:	1a9b      	subs	r3, r3, r2
 8009f9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f9e:	9315      	str	r3, [sp, #84]	; 0x54
 8009fa0:	2a01      	cmp	r2, #1
 8009fa2:	4413      	add	r3, r2
 8009fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8009fa6:	dd74      	ble.n	800a092 <_svfprintf_r+0x1492>
 8009fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009faa:	2200      	movs	r2, #0
 8009fac:	3301      	adds	r3, #1
 8009fae:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb0:	920e      	str	r2, [sp, #56]	; 0x38
 8009fb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009fb6:	e6cf      	b.n	8009d58 <_svfprintf_r+0x1158>
 8009fb8:	9804      	ldr	r0, [sp, #16]
 8009fba:	4631      	mov	r1, r6
 8009fbc:	aa21      	add	r2, sp, #132	; 0x84
 8009fbe:	f001 fea3 	bl	800bd08 <__ssprint_r>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	f47e aee4 	bne.w	8008d90 <_svfprintf_r+0x190>
 8009fc8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009fca:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8009fcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fce:	463a      	mov	r2, r7
 8009fd0:	e605      	b.n	8009bde <_svfprintf_r+0xfde>
 8009fd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	bfd8      	it	le
 8009fd8:	f1c3 0802 	rsble	r8, r3, #2
 8009fdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fde:	bfc8      	it	gt
 8009fe0:	f04f 0801 	movgt.w	r8, #1
 8009fe4:	4443      	add	r3, r8
 8009fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8009fe8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009fec:	e6b4      	b.n	8009d58 <_svfprintf_r+0x1158>
 8009fee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ff2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ff6:	9016      	str	r0, [sp, #88]	; 0x58
 8009ff8:	9317      	str	r3, [sp, #92]	; 0x5c
 8009ffa:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8009ffe:	e658      	b.n	8009cb2 <_svfprintf_r+0x10b2>
 800a000:	2b00      	cmp	r3, #0
 800a002:	dd3d      	ble.n	800a080 <_svfprintf_r+0x1480>
 800a004:	f1bb 0f00 	cmp.w	fp, #0
 800a008:	d10f      	bne.n	800a02a <_svfprintf_r+0x142a>
 800a00a:	9b03      	ldr	r3, [sp, #12]
 800a00c:	07db      	lsls	r3, r3, #31
 800a00e:	d40c      	bmi.n	800a02a <_svfprintf_r+0x142a>
 800a010:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a012:	9209      	str	r2, [sp, #36]	; 0x24
 800a014:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a018:	e69e      	b.n	8009d58 <_svfprintf_r+0x1158>
 800a01a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a01c:	e681      	b.n	8009d22 <_svfprintf_r+0x1122>
 800a01e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a020:	3301      	adds	r3, #1
 800a022:	9309      	str	r3, [sp, #36]	; 0x24
 800a024:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a028:	e696      	b.n	8009d58 <_svfprintf_r+0x1158>
 800a02a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a02c:	f10b 0801 	add.w	r8, fp, #1
 800a030:	4443      	add	r3, r8
 800a032:	9309      	str	r3, [sp, #36]	; 0x24
 800a034:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a038:	e68e      	b.n	8009d58 <_svfprintf_r+0x1158>
 800a03a:	3330      	adds	r3, #48	; 0x30
 800a03c:	2230      	movs	r2, #48	; 0x30
 800a03e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 800a042:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 800a046:	ab1e      	add	r3, sp, #120	; 0x78
 800a048:	e7a6      	b.n	8009f98 <_svfprintf_r+0x1398>
 800a04a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a04e:	2200      	movs	r2, #0
 800a050:	2300      	movs	r3, #0
 800a052:	f7f6 fe33 	bl	8000cbc <__aeabi_dcmpeq>
 800a056:	2800      	cmp	r0, #0
 800a058:	f47f aef4 	bne.w	8009e44 <_svfprintf_r+0x1244>
 800a05c:	f1c9 0301 	rsb	r3, r9, #1
 800a060:	931b      	str	r3, [sp, #108]	; 0x6c
 800a062:	4498      	add	r8, r3
 800a064:	e64a      	b.n	8009cfc <_svfprintf_r+0x10fc>
 800a066:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a068:	f8d5 a000 	ldr.w	sl, [r5]
 800a06c:	4628      	mov	r0, r5
 800a06e:	3004      	adds	r0, #4
 800a070:	f1ba 0f00 	cmp.w	sl, #0
 800a074:	785d      	ldrb	r5, [r3, #1]
 800a076:	900a      	str	r0, [sp, #40]	; 0x28
 800a078:	f6be ae17 	bge.w	8008caa <_svfprintf_r+0xaa>
 800a07c:	f7fe be13 	b.w	8008ca6 <_svfprintf_r+0xa6>
 800a080:	f1bb 0f00 	cmp.w	fp, #0
 800a084:	d10e      	bne.n	800a0a4 <_svfprintf_r+0x14a4>
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	07d8      	lsls	r0, r3, #31
 800a08a:	d40b      	bmi.n	800a0a4 <_svfprintf_r+0x14a4>
 800a08c:	2301      	movs	r3, #1
 800a08e:	9309      	str	r3, [sp, #36]	; 0x24
 800a090:	e662      	b.n	8009d58 <_svfprintf_r+0x1158>
 800a092:	9b03      	ldr	r3, [sp, #12]
 800a094:	f013 0301 	ands.w	r3, r3, #1
 800a098:	d186      	bne.n	8009fa8 <_svfprintf_r+0x13a8>
 800a09a:	930e      	str	r3, [sp, #56]	; 0x38
 800a09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a09e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a0a2:	e659      	b.n	8009d58 <_svfprintf_r+0x1158>
 800a0a4:	f10b 0302 	add.w	r3, fp, #2
 800a0a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a0ae:	e653      	b.n	8009d58 <_svfprintf_r+0x1158>
 800a0b0:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 800a0b4:	e770      	b.n	8009f98 <_svfprintf_r+0x1398>
 800a0b6:	9a04      	ldr	r2, [sp, #16]
 800a0b8:	230c      	movs	r3, #12
 800a0ba:	6013      	str	r3, [r2, #0]
 800a0bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0c0:	f7fe be70 	b.w	8008da4 <_svfprintf_r+0x1a4>
 800a0c4:	0800d114 	.word	0x0800d114
 800a0c8:	66666667 	.word	0x66666667

0800a0cc <quorem>:
 800a0cc:	6902      	ldr	r2, [r0, #16]
 800a0ce:	690b      	ldr	r3, [r1, #16]
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	f300 808f 	bgt.w	800a1f4 <quorem+0x128>
 800a0d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0da:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800a0de:	f101 0714 	add.w	r7, r1, #20
 800a0e2:	f100 0b14 	add.w	fp, r0, #20
 800a0e6:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 800a0ea:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800a0ee:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	3201      	adds	r2, #1
 800a0f6:	fbb3 f9f2 	udiv	r9, r3, r2
 800a0fa:	eb0b 0304 	add.w	r3, fp, r4
 800a0fe:	9400      	str	r4, [sp, #0]
 800a100:	eb07 0a04 	add.w	sl, r7, r4
 800a104:	9301      	str	r3, [sp, #4]
 800a106:	f1b9 0f00 	cmp.w	r9, #0
 800a10a:	d03b      	beq.n	800a184 <quorem+0xb8>
 800a10c:	2600      	movs	r6, #0
 800a10e:	4632      	mov	r2, r6
 800a110:	46bc      	mov	ip, r7
 800a112:	46de      	mov	lr, fp
 800a114:	4634      	mov	r4, r6
 800a116:	f85c 6b04 	ldr.w	r6, [ip], #4
 800a11a:	f8de 5000 	ldr.w	r5, [lr]
 800a11e:	b2b3      	uxth	r3, r6
 800a120:	0c36      	lsrs	r6, r6, #16
 800a122:	fb03 4409 	mla	r4, r3, r9, r4
 800a126:	fb06 f609 	mul.w	r6, r6, r9
 800a12a:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 800a12e:	b2a3      	uxth	r3, r4
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	b2b4      	uxth	r4, r6
 800a134:	fa13 f385 	uxtah	r3, r3, r5
 800a138:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 800a13c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800a140:	b29b      	uxth	r3, r3
 800a142:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a146:	45e2      	cmp	sl, ip
 800a148:	ea4f 4224 	mov.w	r2, r4, asr #16
 800a14c:	f84e 3b04 	str.w	r3, [lr], #4
 800a150:	ea4f 4416 	mov.w	r4, r6, lsr #16
 800a154:	d2df      	bcs.n	800a116 <quorem+0x4a>
 800a156:	9b00      	ldr	r3, [sp, #0]
 800a158:	f85b 3003 	ldr.w	r3, [fp, r3]
 800a15c:	b993      	cbnz	r3, 800a184 <quorem+0xb8>
 800a15e:	9c01      	ldr	r4, [sp, #4]
 800a160:	1f23      	subs	r3, r4, #4
 800a162:	459b      	cmp	fp, r3
 800a164:	d20c      	bcs.n	800a180 <quorem+0xb4>
 800a166:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a16a:	b94b      	cbnz	r3, 800a180 <quorem+0xb4>
 800a16c:	f1a4 0308 	sub.w	r3, r4, #8
 800a170:	e002      	b.n	800a178 <quorem+0xac>
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	3b04      	subs	r3, #4
 800a176:	b91a      	cbnz	r2, 800a180 <quorem+0xb4>
 800a178:	459b      	cmp	fp, r3
 800a17a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a17e:	d3f8      	bcc.n	800a172 <quorem+0xa6>
 800a180:	f8c0 8010 	str.w	r8, [r0, #16]
 800a184:	4604      	mov	r4, r0
 800a186:	f001 fc77 	bl	800ba78 <__mcmp>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	db2e      	blt.n	800a1ec <quorem+0x120>
 800a18e:	f109 0901 	add.w	r9, r9, #1
 800a192:	465d      	mov	r5, fp
 800a194:	2300      	movs	r3, #0
 800a196:	f857 1b04 	ldr.w	r1, [r7], #4
 800a19a:	6828      	ldr	r0, [r5, #0]
 800a19c:	b28a      	uxth	r2, r1
 800a19e:	1a9a      	subs	r2, r3, r2
 800a1a0:	0c09      	lsrs	r1, r1, #16
 800a1a2:	fa12 f280 	uxtah	r2, r2, r0
 800a1a6:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 800a1aa:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800a1ae:	b291      	uxth	r1, r2
 800a1b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a1b4:	45ba      	cmp	sl, r7
 800a1b6:	f845 1b04 	str.w	r1, [r5], #4
 800a1ba:	ea4f 4323 	mov.w	r3, r3, asr #16
 800a1be:	d2ea      	bcs.n	800a196 <quorem+0xca>
 800a1c0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 800a1c4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 800a1c8:	b982      	cbnz	r2, 800a1ec <quorem+0x120>
 800a1ca:	1f1a      	subs	r2, r3, #4
 800a1cc:	4593      	cmp	fp, r2
 800a1ce:	d20b      	bcs.n	800a1e8 <quorem+0x11c>
 800a1d0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800a1d4:	b942      	cbnz	r2, 800a1e8 <quorem+0x11c>
 800a1d6:	3b08      	subs	r3, #8
 800a1d8:	e002      	b.n	800a1e0 <quorem+0x114>
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	3b04      	subs	r3, #4
 800a1de:	b91a      	cbnz	r2, 800a1e8 <quorem+0x11c>
 800a1e0:	459b      	cmp	fp, r3
 800a1e2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a1e6:	d3f8      	bcc.n	800a1da <quorem+0x10e>
 800a1e8:	f8c4 8010 	str.w	r8, [r4, #16]
 800a1ec:	4648      	mov	r0, r9
 800a1ee:	b003      	add	sp, #12
 800a1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	4770      	bx	lr

0800a1f8 <_dtoa_r>:
 800a1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fc:	b099      	sub	sp, #100	; 0x64
 800a1fe:	4604      	mov	r4, r0
 800a200:	9103      	str	r1, [sp, #12]
 800a202:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a204:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800a206:	9304      	str	r3, [sp, #16]
 800a208:	4692      	mov	sl, r2
 800a20a:	ed8d 0b00 	vstr	d0, [sp]
 800a20e:	b141      	cbz	r1, 800a222 <_dtoa_r+0x2a>
 800a210:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a212:	604a      	str	r2, [r1, #4]
 800a214:	2301      	movs	r3, #1
 800a216:	4093      	lsls	r3, r2
 800a218:	608b      	str	r3, [r1, #8]
 800a21a:	f001 fa49 	bl	800b6b0 <_Bfree>
 800a21e:	2300      	movs	r3, #0
 800a220:	6423      	str	r3, [r4, #64]	; 0x40
 800a222:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a226:	2b00      	cmp	r3, #0
 800a228:	4699      	mov	r9, r3
 800a22a:	db36      	blt.n	800a29a <_dtoa_r+0xa2>
 800a22c:	2300      	movs	r3, #0
 800a22e:	602b      	str	r3, [r5, #0]
 800a230:	4ba5      	ldr	r3, [pc, #660]	; (800a4c8 <_dtoa_r+0x2d0>)
 800a232:	461a      	mov	r2, r3
 800a234:	ea09 0303 	and.w	r3, r9, r3
 800a238:	4293      	cmp	r3, r2
 800a23a:	d017      	beq.n	800a26c <_dtoa_r+0x74>
 800a23c:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a240:	2200      	movs	r2, #0
 800a242:	2300      	movs	r3, #0
 800a244:	4630      	mov	r0, r6
 800a246:	4639      	mov	r1, r7
 800a248:	f7f6 fd38 	bl	8000cbc <__aeabi_dcmpeq>
 800a24c:	4680      	mov	r8, r0
 800a24e:	2800      	cmp	r0, #0
 800a250:	d02b      	beq.n	800a2aa <_dtoa_r+0xb2>
 800a252:	9a04      	ldr	r2, [sp, #16]
 800a254:	2301      	movs	r3, #1
 800a256:	6013      	str	r3, [r2, #0]
 800a258:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f000 80cc 	beq.w	800a3f8 <_dtoa_r+0x200>
 800a260:	489a      	ldr	r0, [pc, #616]	; (800a4cc <_dtoa_r+0x2d4>)
 800a262:	6018      	str	r0, [r3, #0]
 800a264:	3801      	subs	r0, #1
 800a266:	b019      	add	sp, #100	; 0x64
 800a268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26c:	9a04      	ldr	r2, [sp, #16]
 800a26e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a272:	6013      	str	r3, [r2, #0]
 800a274:	9b00      	ldr	r3, [sp, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	f000 80a7 	beq.w	800a3ca <_dtoa_r+0x1d2>
 800a27c:	4894      	ldr	r0, [pc, #592]	; (800a4d0 <_dtoa_r+0x2d8>)
 800a27e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a280:	2b00      	cmp	r3, #0
 800a282:	d0f0      	beq.n	800a266 <_dtoa_r+0x6e>
 800a284:	78c3      	ldrb	r3, [r0, #3]
 800a286:	2b00      	cmp	r3, #0
 800a288:	f000 80b8 	beq.w	800a3fc <_dtoa_r+0x204>
 800a28c:	f100 0308 	add.w	r3, r0, #8
 800a290:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a292:	6013      	str	r3, [r2, #0]
 800a294:	b019      	add	sp, #100	; 0x64
 800a296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a29a:	9a01      	ldr	r2, [sp, #4]
 800a29c:	2301      	movs	r3, #1
 800a29e:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 800a2a2:	602b      	str	r3, [r5, #0]
 800a2a4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a2a8:	e7c2      	b.n	800a230 <_dtoa_r+0x38>
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	ec47 6b10 	vmov	d0, r6, r7
 800a2b0:	a917      	add	r1, sp, #92	; 0x5c
 800a2b2:	aa16      	add	r2, sp, #88	; 0x58
 800a2b4:	f001 fc6e 	bl	800bb94 <__d2b>
 800a2b8:	ea5f 5519 	movs.w	r5, r9, lsr #20
 800a2bc:	4683      	mov	fp, r0
 800a2be:	f040 808d 	bne.w	800a3dc <_dtoa_r+0x1e4>
 800a2c2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a2c6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800a2c8:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800a2cc:	4445      	add	r5, r8
 800a2ce:	429d      	cmp	r5, r3
 800a2d0:	f2c0 829e 	blt.w	800a810 <_dtoa_r+0x618>
 800a2d4:	4a7f      	ldr	r2, [pc, #508]	; (800a4d4 <_dtoa_r+0x2dc>)
 800a2d6:	1b52      	subs	r2, r2, r5
 800a2d8:	fa09 f902 	lsl.w	r9, r9, r2
 800a2dc:	9a00      	ldr	r2, [sp, #0]
 800a2de:	f205 4312 	addw	r3, r5, #1042	; 0x412
 800a2e2:	fa22 f003 	lsr.w	r0, r2, r3
 800a2e6:	ea49 0000 	orr.w	r0, r9, r0
 800a2ea:	f7f6 fa09 	bl	8000700 <__aeabi_ui2d>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	3d01      	subs	r5, #1
 800a2f2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a2f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	4b77      	ldr	r3, [pc, #476]	; (800a4d8 <_dtoa_r+0x2e0>)
 800a2fc:	f7f6 f8c2 	bl	8000484 <__aeabi_dsub>
 800a300:	a36b      	add	r3, pc, #428	; (adr r3, 800a4b0 <_dtoa_r+0x2b8>)
 800a302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a306:	f7f6 fa71 	bl	80007ec <__aeabi_dmul>
 800a30a:	a36b      	add	r3, pc, #428	; (adr r3, 800a4b8 <_dtoa_r+0x2c0>)
 800a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a310:	f7f6 f8ba 	bl	8000488 <__adddf3>
 800a314:	4606      	mov	r6, r0
 800a316:	4628      	mov	r0, r5
 800a318:	460f      	mov	r7, r1
 800a31a:	f7f6 fa01 	bl	8000720 <__aeabi_i2d>
 800a31e:	a368      	add	r3, pc, #416	; (adr r3, 800a4c0 <_dtoa_r+0x2c8>)
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	f7f6 fa62 	bl	80007ec <__aeabi_dmul>
 800a328:	4602      	mov	r2, r0
 800a32a:	460b      	mov	r3, r1
 800a32c:	4630      	mov	r0, r6
 800a32e:	4639      	mov	r1, r7
 800a330:	f7f6 f8aa 	bl	8000488 <__adddf3>
 800a334:	4606      	mov	r6, r0
 800a336:	460f      	mov	r7, r1
 800a338:	f7f6 fcf2 	bl	8000d20 <__aeabi_d2iz>
 800a33c:	4639      	mov	r1, r7
 800a33e:	9005      	str	r0, [sp, #20]
 800a340:	2200      	movs	r2, #0
 800a342:	4630      	mov	r0, r6
 800a344:	2300      	movs	r3, #0
 800a346:	f7f6 fcc3 	bl	8000cd0 <__aeabi_dcmplt>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	f040 81ab 	bne.w	800a6a6 <_dtoa_r+0x4ae>
 800a350:	9b05      	ldr	r3, [sp, #20]
 800a352:	2b16      	cmp	r3, #22
 800a354:	f200 81a4 	bhi.w	800a6a0 <_dtoa_r+0x4a8>
 800a358:	9a05      	ldr	r2, [sp, #20]
 800a35a:	4b60      	ldr	r3, [pc, #384]	; (800a4dc <_dtoa_r+0x2e4>)
 800a35c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a360:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a364:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a368:	f7f6 fcd0 	bl	8000d0c <__aeabi_dcmpgt>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	f000 8255 	beq.w	800a81c <_dtoa_r+0x624>
 800a372:	9b05      	ldr	r3, [sp, #20]
 800a374:	3b01      	subs	r3, #1
 800a376:	9305      	str	r3, [sp, #20]
 800a378:	2300      	movs	r3, #0
 800a37a:	930d      	str	r3, [sp, #52]	; 0x34
 800a37c:	ebc5 0508 	rsb	r5, r5, r8
 800a380:	1e6b      	subs	r3, r5, #1
 800a382:	9306      	str	r3, [sp, #24]
 800a384:	f100 81a6 	bmi.w	800a6d4 <_dtoa_r+0x4dc>
 800a388:	2300      	movs	r3, #0
 800a38a:	9307      	str	r3, [sp, #28]
 800a38c:	9b05      	ldr	r3, [sp, #20]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f2c0 8197 	blt.w	800a6c2 <_dtoa_r+0x4ca>
 800a394:	9a06      	ldr	r2, [sp, #24]
 800a396:	930c      	str	r3, [sp, #48]	; 0x30
 800a398:	4611      	mov	r1, r2
 800a39a:	4419      	add	r1, r3
 800a39c:	2300      	movs	r3, #0
 800a39e:	9106      	str	r1, [sp, #24]
 800a3a0:	930a      	str	r3, [sp, #40]	; 0x28
 800a3a2:	9b03      	ldr	r3, [sp, #12]
 800a3a4:	2b09      	cmp	r3, #9
 800a3a6:	d82b      	bhi.n	800a400 <_dtoa_r+0x208>
 800a3a8:	2b05      	cmp	r3, #5
 800a3aa:	f340 8673 	ble.w	800b094 <_dtoa_r+0xe9c>
 800a3ae:	3b04      	subs	r3, #4
 800a3b0:	9303      	str	r3, [sp, #12]
 800a3b2:	2700      	movs	r7, #0
 800a3b4:	9b03      	ldr	r3, [sp, #12]
 800a3b6:	3b02      	subs	r3, #2
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	f200 8651 	bhi.w	800b060 <_dtoa_r+0xe68>
 800a3be:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a3c2:	03d1      	.short	0x03d1
 800a3c4:	02b603c4 	.word	0x02b603c4
 800a3c8:	0666      	.short	0x0666
 800a3ca:	4b41      	ldr	r3, [pc, #260]	; (800a4d0 <_dtoa_r+0x2d8>)
 800a3cc:	4a44      	ldr	r2, [pc, #272]	; (800a4e0 <_dtoa_r+0x2e8>)
 800a3ce:	f3c9 0013 	ubfx	r0, r9, #0, #20
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	bf14      	ite	ne
 800a3d6:	4618      	movne	r0, r3
 800a3d8:	4610      	moveq	r0, r2
 800a3da:	e750      	b.n	800a27e <_dtoa_r+0x86>
 800a3dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a3e0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a3e4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a3ee:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a3f2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a3f6:	e77f      	b.n	800a2f8 <_dtoa_r+0x100>
 800a3f8:	483a      	ldr	r0, [pc, #232]	; (800a4e4 <_dtoa_r+0x2ec>)
 800a3fa:	e734      	b.n	800a266 <_dtoa_r+0x6e>
 800a3fc:	1cc3      	adds	r3, r0, #3
 800a3fe:	e747      	b.n	800a290 <_dtoa_r+0x98>
 800a400:	2100      	movs	r1, #0
 800a402:	6461      	str	r1, [r4, #68]	; 0x44
 800a404:	4620      	mov	r0, r4
 800a406:	468a      	mov	sl, r1
 800a408:	9103      	str	r1, [sp, #12]
 800a40a:	f001 f92b 	bl	800b664 <_Balloc>
 800a40e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a412:	9308      	str	r3, [sp, #32]
 800a414:	930e      	str	r3, [sp, #56]	; 0x38
 800a416:	2301      	movs	r3, #1
 800a418:	9009      	str	r0, [sp, #36]	; 0x24
 800a41a:	6420      	str	r0, [r4, #64]	; 0x40
 800a41c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a41e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a420:	2b00      	cmp	r3, #0
 800a422:	f2c0 80d3 	blt.w	800a5cc <_dtoa_r+0x3d4>
 800a426:	9a05      	ldr	r2, [sp, #20]
 800a428:	2a0e      	cmp	r2, #14
 800a42a:	f300 80cf 	bgt.w	800a5cc <_dtoa_r+0x3d4>
 800a42e:	4b2b      	ldr	r3, [pc, #172]	; (800a4dc <_dtoa_r+0x2e4>)
 800a430:	f1ba 0f00 	cmp.w	sl, #0
 800a434:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a438:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a43c:	f2c0 8395 	blt.w	800ab6a <_dtoa_r+0x972>
 800a440:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a444:	4642      	mov	r2, r8
 800a446:	464b      	mov	r3, r9
 800a448:	4630      	mov	r0, r6
 800a44a:	4639      	mov	r1, r7
 800a44c:	f7f6 faf8 	bl	8000a40 <__aeabi_ddiv>
 800a450:	f7f6 fc66 	bl	8000d20 <__aeabi_d2iz>
 800a454:	4682      	mov	sl, r0
 800a456:	f7f6 f963 	bl	8000720 <__aeabi_i2d>
 800a45a:	4642      	mov	r2, r8
 800a45c:	464b      	mov	r3, r9
 800a45e:	f7f6 f9c5 	bl	80007ec <__aeabi_dmul>
 800a462:	460b      	mov	r3, r1
 800a464:	4602      	mov	r2, r0
 800a466:	4639      	mov	r1, r7
 800a468:	4630      	mov	r0, r6
 800a46a:	f7f6 f80b 	bl	8000484 <__aeabi_dsub>
 800a46e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a470:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 800a474:	702b      	strb	r3, [r5, #0]
 800a476:	9b08      	ldr	r3, [sp, #32]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	4606      	mov	r6, r0
 800a47c:	460f      	mov	r7, r1
 800a47e:	f105 0501 	add.w	r5, r5, #1
 800a482:	d063      	beq.n	800a54c <_dtoa_r+0x354>
 800a484:	2200      	movs	r2, #0
 800a486:	4b18      	ldr	r3, [pc, #96]	; (800a4e8 <_dtoa_r+0x2f0>)
 800a488:	f7f6 f9b0 	bl	80007ec <__aeabi_dmul>
 800a48c:	2200      	movs	r2, #0
 800a48e:	2300      	movs	r3, #0
 800a490:	4606      	mov	r6, r0
 800a492:	460f      	mov	r7, r1
 800a494:	f7f6 fc12 	bl	8000cbc <__aeabi_dcmpeq>
 800a498:	2800      	cmp	r0, #0
 800a49a:	f040 8084 	bne.w	800a5a6 <_dtoa_r+0x3ae>
 800a49e:	f8cd b000 	str.w	fp, [sp]
 800a4a2:	9403      	str	r4, [sp, #12]
 800a4a4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800a4a8:	9c08      	ldr	r4, [sp, #32]
 800a4aa:	e02a      	b.n	800a502 <_dtoa_r+0x30a>
 800a4ac:	f3af 8000 	nop.w
 800a4b0:	636f4361 	.word	0x636f4361
 800a4b4:	3fd287a7 	.word	0x3fd287a7
 800a4b8:	8b60c8b3 	.word	0x8b60c8b3
 800a4bc:	3fc68a28 	.word	0x3fc68a28
 800a4c0:	509f79fb 	.word	0x509f79fb
 800a4c4:	3fd34413 	.word	0x3fd34413
 800a4c8:	7ff00000 	.word	0x7ff00000
 800a4cc:	0800d091 	.word	0x0800d091
 800a4d0:	0800d1ac 	.word	0x0800d1ac
 800a4d4:	fffffc0e 	.word	0xfffffc0e
 800a4d8:	3ff80000 	.word	0x3ff80000
 800a4dc:	0800d1c0 	.word	0x0800d1c0
 800a4e0:	0800d1a0 	.word	0x0800d1a0
 800a4e4:	0800d090 	.word	0x0800d090
 800a4e8:	40240000 	.word	0x40240000
 800a4ec:	f7f6 f97e 	bl	80007ec <__aeabi_dmul>
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	4606      	mov	r6, r0
 800a4f6:	460f      	mov	r7, r1
 800a4f8:	f7f6 fbe0 	bl	8000cbc <__aeabi_dcmpeq>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	f040 83e4 	bne.w	800acca <_dtoa_r+0xad2>
 800a502:	4642      	mov	r2, r8
 800a504:	464b      	mov	r3, r9
 800a506:	4630      	mov	r0, r6
 800a508:	4639      	mov	r1, r7
 800a50a:	f7f6 fa99 	bl	8000a40 <__aeabi_ddiv>
 800a50e:	f7f6 fc07 	bl	8000d20 <__aeabi_d2iz>
 800a512:	4682      	mov	sl, r0
 800a514:	f7f6 f904 	bl	8000720 <__aeabi_i2d>
 800a518:	4642      	mov	r2, r8
 800a51a:	464b      	mov	r3, r9
 800a51c:	f7f6 f966 	bl	80007ec <__aeabi_dmul>
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	4630      	mov	r0, r6
 800a526:	4639      	mov	r1, r7
 800a528:	f7f5 ffac 	bl	8000484 <__aeabi_dsub>
 800a52c:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 800a530:	f805 eb01 	strb.w	lr, [r5], #1
 800a534:	ebcb 0e05 	rsb	lr, fp, r5
 800a538:	4574      	cmp	r4, lr
 800a53a:	4606      	mov	r6, r0
 800a53c:	460f      	mov	r7, r1
 800a53e:	f04f 0200 	mov.w	r2, #0
 800a542:	4bb7      	ldr	r3, [pc, #732]	; (800a820 <_dtoa_r+0x628>)
 800a544:	d1d2      	bne.n	800a4ec <_dtoa_r+0x2f4>
 800a546:	f8dd b000 	ldr.w	fp, [sp]
 800a54a:	9c03      	ldr	r4, [sp, #12]
 800a54c:	4632      	mov	r2, r6
 800a54e:	463b      	mov	r3, r7
 800a550:	4630      	mov	r0, r6
 800a552:	4639      	mov	r1, r7
 800a554:	f7f5 ff98 	bl	8000488 <__adddf3>
 800a558:	4606      	mov	r6, r0
 800a55a:	460f      	mov	r7, r1
 800a55c:	4640      	mov	r0, r8
 800a55e:	4649      	mov	r1, r9
 800a560:	4632      	mov	r2, r6
 800a562:	463b      	mov	r3, r7
 800a564:	f7f6 fbb4 	bl	8000cd0 <__aeabi_dcmplt>
 800a568:	b948      	cbnz	r0, 800a57e <_dtoa_r+0x386>
 800a56a:	4640      	mov	r0, r8
 800a56c:	4649      	mov	r1, r9
 800a56e:	4632      	mov	r2, r6
 800a570:	463b      	mov	r3, r7
 800a572:	f7f6 fba3 	bl	8000cbc <__aeabi_dcmpeq>
 800a576:	b1b0      	cbz	r0, 800a5a6 <_dtoa_r+0x3ae>
 800a578:	f01a 0f01 	tst.w	sl, #1
 800a57c:	d013      	beq.n	800a5a6 <_dtoa_r+0x3ae>
 800a57e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 800a582:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a584:	1e6b      	subs	r3, r5, #1
 800a586:	e004      	b.n	800a592 <_dtoa_r+0x39a>
 800a588:	428b      	cmp	r3, r1
 800a58a:	f000 8448 	beq.w	800ae1e <_dtoa_r+0xc26>
 800a58e:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 800a592:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a596:	f103 0501 	add.w	r5, r3, #1
 800a59a:	461a      	mov	r2, r3
 800a59c:	d0f4      	beq.n	800a588 <_dtoa_r+0x390>
 800a59e:	f108 0301 	add.w	r3, r8, #1
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	7013      	strb	r3, [r2, #0]
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	4659      	mov	r1, fp
 800a5aa:	f001 f881 	bl	800b6b0 <_Bfree>
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	9b05      	ldr	r3, [sp, #20]
 800a5b2:	702a      	strb	r2, [r5, #0]
 800a5b4:	9a04      	ldr	r2, [sp, #16]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	6013      	str	r3, [r2, #0]
 800a5ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f000 834b 	beq.w	800ac58 <_dtoa_r+0xa60>
 800a5c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5c4:	601d      	str	r5, [r3, #0]
 800a5c6:	b019      	add	sp, #100	; 0x64
 800a5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a5ce:	2a00      	cmp	r2, #0
 800a5d0:	f000 8085 	beq.w	800a6de <_dtoa_r+0x4e6>
 800a5d4:	9a03      	ldr	r2, [sp, #12]
 800a5d6:	2a01      	cmp	r2, #1
 800a5d8:	f340 830a 	ble.w	800abf0 <_dtoa_r+0x9f8>
 800a5dc:	9b08      	ldr	r3, [sp, #32]
 800a5de:	1e5f      	subs	r7, r3, #1
 800a5e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5e2:	42bb      	cmp	r3, r7
 800a5e4:	f2c0 83a6 	blt.w	800ad34 <_dtoa_r+0xb3c>
 800a5e8:	1bdf      	subs	r7, r3, r7
 800a5ea:	9b08      	ldr	r3, [sp, #32]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f2c0 84a4 	blt.w	800af3a <_dtoa_r+0xd42>
 800a5f2:	9d07      	ldr	r5, [sp, #28]
 800a5f4:	9b08      	ldr	r3, [sp, #32]
 800a5f6:	9a07      	ldr	r2, [sp, #28]
 800a5f8:	441a      	add	r2, r3
 800a5fa:	9207      	str	r2, [sp, #28]
 800a5fc:	9a06      	ldr	r2, [sp, #24]
 800a5fe:	4620      	mov	r0, r4
 800a600:	441a      	add	r2, r3
 800a602:	2101      	movs	r1, #1
 800a604:	9206      	str	r2, [sp, #24]
 800a606:	f001 f8ed 	bl	800b7e4 <__i2b>
 800a60a:	4606      	mov	r6, r0
 800a60c:	b165      	cbz	r5, 800a628 <_dtoa_r+0x430>
 800a60e:	9906      	ldr	r1, [sp, #24]
 800a610:	2900      	cmp	r1, #0
 800a612:	460b      	mov	r3, r1
 800a614:	dd08      	ble.n	800a628 <_dtoa_r+0x430>
 800a616:	42a9      	cmp	r1, r5
 800a618:	9a07      	ldr	r2, [sp, #28]
 800a61a:	bfa8      	it	ge
 800a61c:	462b      	movge	r3, r5
 800a61e:	1ad2      	subs	r2, r2, r3
 800a620:	1aed      	subs	r5, r5, r3
 800a622:	1acb      	subs	r3, r1, r3
 800a624:	9207      	str	r2, [sp, #28]
 800a626:	9306      	str	r3, [sp, #24]
 800a628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	dd1a      	ble.n	800a664 <_dtoa_r+0x46c>
 800a62e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a630:	2b00      	cmp	r3, #0
 800a632:	f000 8378 	beq.w	800ad26 <_dtoa_r+0xb2e>
 800a636:	2f00      	cmp	r7, #0
 800a638:	dd10      	ble.n	800a65c <_dtoa_r+0x464>
 800a63a:	4631      	mov	r1, r6
 800a63c:	463a      	mov	r2, r7
 800a63e:	4620      	mov	r0, r4
 800a640:	f001 f974 	bl	800b92c <__pow5mult>
 800a644:	4606      	mov	r6, r0
 800a646:	465a      	mov	r2, fp
 800a648:	4631      	mov	r1, r6
 800a64a:	4620      	mov	r0, r4
 800a64c:	f001 f8d4 	bl	800b7f8 <__multiply>
 800a650:	4659      	mov	r1, fp
 800a652:	4680      	mov	r8, r0
 800a654:	4620      	mov	r0, r4
 800a656:	f001 f82b 	bl	800b6b0 <_Bfree>
 800a65a:	46c3      	mov	fp, r8
 800a65c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a65e:	1bda      	subs	r2, r3, r7
 800a660:	f040 82a5 	bne.w	800abae <_dtoa_r+0x9b6>
 800a664:	4620      	mov	r0, r4
 800a666:	2101      	movs	r1, #1
 800a668:	f001 f8bc 	bl	800b7e4 <__i2b>
 800a66c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a66e:	2b00      	cmp	r3, #0
 800a670:	4680      	mov	r8, r0
 800a672:	dd38      	ble.n	800a6e6 <_dtoa_r+0x4ee>
 800a674:	4601      	mov	r1, r0
 800a676:	461a      	mov	r2, r3
 800a678:	4620      	mov	r0, r4
 800a67a:	f001 f957 	bl	800b92c <__pow5mult>
 800a67e:	9b03      	ldr	r3, [sp, #12]
 800a680:	2b01      	cmp	r3, #1
 800a682:	4680      	mov	r8, r0
 800a684:	f340 8299 	ble.w	800abba <_dtoa_r+0x9c2>
 800a688:	f04f 0900 	mov.w	r9, #0
 800a68c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a690:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800a694:	6918      	ldr	r0, [r3, #16]
 800a696:	f001 f857 	bl	800b748 <__hi0bits>
 800a69a:	f1c0 0020 	rsb	r0, r0, #32
 800a69e:	e02c      	b.n	800a6fa <_dtoa_r+0x502>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	930d      	str	r3, [sp, #52]	; 0x34
 800a6a4:	e66a      	b.n	800a37c <_dtoa_r+0x184>
 800a6a6:	9805      	ldr	r0, [sp, #20]
 800a6a8:	f7f6 f83a 	bl	8000720 <__aeabi_i2d>
 800a6ac:	4632      	mov	r2, r6
 800a6ae:	463b      	mov	r3, r7
 800a6b0:	f7f6 fb04 	bl	8000cbc <__aeabi_dcmpeq>
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	f47f ae4b 	bne.w	800a350 <_dtoa_r+0x158>
 800a6ba:	9b05      	ldr	r3, [sp, #20]
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	9305      	str	r3, [sp, #20]
 800a6c0:	e646      	b.n	800a350 <_dtoa_r+0x158>
 800a6c2:	9a07      	ldr	r2, [sp, #28]
 800a6c4:	9b05      	ldr	r3, [sp, #20]
 800a6c6:	1ad2      	subs	r2, r2, r3
 800a6c8:	425b      	negs	r3, r3
 800a6ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	9207      	str	r2, [sp, #28]
 800a6d0:	930c      	str	r3, [sp, #48]	; 0x30
 800a6d2:	e666      	b.n	800a3a2 <_dtoa_r+0x1aa>
 800a6d4:	425b      	negs	r3, r3
 800a6d6:	9307      	str	r3, [sp, #28]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	9306      	str	r3, [sp, #24]
 800a6dc:	e656      	b.n	800a38c <_dtoa_r+0x194>
 800a6de:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a6e0:	9d07      	ldr	r5, [sp, #28]
 800a6e2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a6e4:	e792      	b.n	800a60c <_dtoa_r+0x414>
 800a6e6:	9b03      	ldr	r3, [sp, #12]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	f340 82b8 	ble.w	800ac5e <_dtoa_r+0xa66>
 800a6ee:	f04f 0900 	mov.w	r9, #0
 800a6f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d1c9      	bne.n	800a68c <_dtoa_r+0x494>
 800a6f8:	2001      	movs	r0, #1
 800a6fa:	9b06      	ldr	r3, [sp, #24]
 800a6fc:	4418      	add	r0, r3
 800a6fe:	f010 001f 	ands.w	r0, r0, #31
 800a702:	f000 8083 	beq.w	800a80c <_dtoa_r+0x614>
 800a706:	f1c0 0320 	rsb	r3, r0, #32
 800a70a:	2b04      	cmp	r3, #4
 800a70c:	f340 84b9 	ble.w	800b082 <_dtoa_r+0xe8a>
 800a710:	f1c0 001c 	rsb	r0, r0, #28
 800a714:	9b07      	ldr	r3, [sp, #28]
 800a716:	4403      	add	r3, r0
 800a718:	9307      	str	r3, [sp, #28]
 800a71a:	9b06      	ldr	r3, [sp, #24]
 800a71c:	4403      	add	r3, r0
 800a71e:	4405      	add	r5, r0
 800a720:	9306      	str	r3, [sp, #24]
 800a722:	9b07      	ldr	r3, [sp, #28]
 800a724:	2b00      	cmp	r3, #0
 800a726:	dd05      	ble.n	800a734 <_dtoa_r+0x53c>
 800a728:	4659      	mov	r1, fp
 800a72a:	461a      	mov	r2, r3
 800a72c:	4620      	mov	r0, r4
 800a72e:	f001 f94d 	bl	800b9cc <__lshift>
 800a732:	4683      	mov	fp, r0
 800a734:	9b06      	ldr	r3, [sp, #24]
 800a736:	2b00      	cmp	r3, #0
 800a738:	dd05      	ble.n	800a746 <_dtoa_r+0x54e>
 800a73a:	4641      	mov	r1, r8
 800a73c:	461a      	mov	r2, r3
 800a73e:	4620      	mov	r0, r4
 800a740:	f001 f944 	bl	800b9cc <__lshift>
 800a744:	4680      	mov	r8, r0
 800a746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f040 826a 	bne.w	800ac22 <_dtoa_r+0xa2a>
 800a74e:	9b08      	ldr	r3, [sp, #32]
 800a750:	2b00      	cmp	r3, #0
 800a752:	f340 8297 	ble.w	800ac84 <_dtoa_r+0xa8c>
 800a756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d171      	bne.n	800a840 <_dtoa_r+0x648>
 800a75c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a760:	9f08      	ldr	r7, [sp, #32]
 800a762:	464d      	mov	r5, r9
 800a764:	e002      	b.n	800a76c <_dtoa_r+0x574>
 800a766:	f000 ffad 	bl	800b6c4 <__multadd>
 800a76a:	4683      	mov	fp, r0
 800a76c:	4641      	mov	r1, r8
 800a76e:	4658      	mov	r0, fp
 800a770:	f7ff fcac 	bl	800a0cc <quorem>
 800a774:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 800a778:	f805 cb01 	strb.w	ip, [r5], #1
 800a77c:	ebc9 0305 	rsb	r3, r9, r5
 800a780:	42bb      	cmp	r3, r7
 800a782:	4620      	mov	r0, r4
 800a784:	4659      	mov	r1, fp
 800a786:	f04f 020a 	mov.w	r2, #10
 800a78a:	f04f 0300 	mov.w	r3, #0
 800a78e:	dbea      	blt.n	800a766 <_dtoa_r+0x56e>
 800a790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a792:	9a08      	ldr	r2, [sp, #32]
 800a794:	2a01      	cmp	r2, #1
 800a796:	bfac      	ite	ge
 800a798:	189b      	addge	r3, r3, r2
 800a79a:	3301      	addlt	r3, #1
 800a79c:	461d      	mov	r5, r3
 800a79e:	f04f 0a00 	mov.w	sl, #0
 800a7a2:	4659      	mov	r1, fp
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f8cd c000 	str.w	ip, [sp]
 800a7ac:	f001 f90e 	bl	800b9cc <__lshift>
 800a7b0:	4641      	mov	r1, r8
 800a7b2:	4683      	mov	fp, r0
 800a7b4:	f001 f960 	bl	800ba78 <__mcmp>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	f8dd c000 	ldr.w	ip, [sp]
 800a7be:	f340 82ef 	ble.w	800ada0 <_dtoa_r+0xba8>
 800a7c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a7c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7c8:	1e6b      	subs	r3, r5, #1
 800a7ca:	e004      	b.n	800a7d6 <_dtoa_r+0x5de>
 800a7cc:	428b      	cmp	r3, r1
 800a7ce:	f000 8275 	beq.w	800acbc <_dtoa_r+0xac4>
 800a7d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7d6:	2a39      	cmp	r2, #57	; 0x39
 800a7d8:	f103 0501 	add.w	r5, r3, #1
 800a7dc:	d0f6      	beq.n	800a7cc <_dtoa_r+0x5d4>
 800a7de:	3201      	adds	r2, #1
 800a7e0:	701a      	strb	r2, [r3, #0]
 800a7e2:	4641      	mov	r1, r8
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f000 ff63 	bl	800b6b0 <_Bfree>
 800a7ea:	2e00      	cmp	r6, #0
 800a7ec:	f43f aedb 	beq.w	800a5a6 <_dtoa_r+0x3ae>
 800a7f0:	f1ba 0f00 	cmp.w	sl, #0
 800a7f4:	d005      	beq.n	800a802 <_dtoa_r+0x60a>
 800a7f6:	45b2      	cmp	sl, r6
 800a7f8:	d003      	beq.n	800a802 <_dtoa_r+0x60a>
 800a7fa:	4651      	mov	r1, sl
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	f000 ff57 	bl	800b6b0 <_Bfree>
 800a802:	4631      	mov	r1, r6
 800a804:	4620      	mov	r0, r4
 800a806:	f000 ff53 	bl	800b6b0 <_Bfree>
 800a80a:	e6cc      	b.n	800a5a6 <_dtoa_r+0x3ae>
 800a80c:	201c      	movs	r0, #28
 800a80e:	e781      	b.n	800a714 <_dtoa_r+0x51c>
 800a810:	4b04      	ldr	r3, [pc, #16]	; (800a824 <_dtoa_r+0x62c>)
 800a812:	9a00      	ldr	r2, [sp, #0]
 800a814:	1b5b      	subs	r3, r3, r5
 800a816:	fa02 f003 	lsl.w	r0, r2, r3
 800a81a:	e566      	b.n	800a2ea <_dtoa_r+0xf2>
 800a81c:	900d      	str	r0, [sp, #52]	; 0x34
 800a81e:	e5ad      	b.n	800a37c <_dtoa_r+0x184>
 800a820:	40240000 	.word	0x40240000
 800a824:	fffffbee 	.word	0xfffffbee
 800a828:	4631      	mov	r1, r6
 800a82a:	2300      	movs	r3, #0
 800a82c:	4620      	mov	r0, r4
 800a82e:	220a      	movs	r2, #10
 800a830:	f000 ff48 	bl	800b6c4 <__multadd>
 800a834:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a836:	2b00      	cmp	r3, #0
 800a838:	4606      	mov	r6, r0
 800a83a:	f340 840b 	ble.w	800b054 <_dtoa_r+0xe5c>
 800a83e:	9308      	str	r3, [sp, #32]
 800a840:	2d00      	cmp	r5, #0
 800a842:	dd05      	ble.n	800a850 <_dtoa_r+0x658>
 800a844:	4631      	mov	r1, r6
 800a846:	462a      	mov	r2, r5
 800a848:	4620      	mov	r0, r4
 800a84a:	f001 f8bf 	bl	800b9cc <__lshift>
 800a84e:	4606      	mov	r6, r0
 800a850:	f1b9 0f00 	cmp.w	r9, #0
 800a854:	f040 82ed 	bne.w	800ae32 <_dtoa_r+0xc3a>
 800a858:	46b1      	mov	r9, r6
 800a85a:	9b08      	ldr	r3, [sp, #32]
 800a85c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a85e:	3b01      	subs	r3, #1
 800a860:	18d3      	adds	r3, r2, r3
 800a862:	9308      	str	r3, [sp, #32]
 800a864:	9b00      	ldr	r3, [sp, #0]
 800a866:	f003 0301 	and.w	r3, r3, #1
 800a86a:	930a      	str	r3, [sp, #40]	; 0x28
 800a86c:	4617      	mov	r7, r2
 800a86e:	4641      	mov	r1, r8
 800a870:	4658      	mov	r0, fp
 800a872:	f7ff fc2b 	bl	800a0cc <quorem>
 800a876:	4631      	mov	r1, r6
 800a878:	4605      	mov	r5, r0
 800a87a:	4658      	mov	r0, fp
 800a87c:	f001 f8fc 	bl	800ba78 <__mcmp>
 800a880:	464a      	mov	r2, r9
 800a882:	4682      	mov	sl, r0
 800a884:	4641      	mov	r1, r8
 800a886:	4620      	mov	r0, r4
 800a888:	f001 f91a 	bl	800bac0 <__mdiff>
 800a88c:	68c2      	ldr	r2, [r0, #12]
 800a88e:	4603      	mov	r3, r0
 800a890:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 800a894:	2a00      	cmp	r2, #0
 800a896:	f040 81ba 	bne.w	800ac0e <_dtoa_r+0xa16>
 800a89a:	4619      	mov	r1, r3
 800a89c:	4658      	mov	r0, fp
 800a89e:	f8cd c01c 	str.w	ip, [sp, #28]
 800a8a2:	9306      	str	r3, [sp, #24]
 800a8a4:	f001 f8e8 	bl	800ba78 <__mcmp>
 800a8a8:	9b06      	ldr	r3, [sp, #24]
 800a8aa:	9000      	str	r0, [sp, #0]
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f000 fefe 	bl	800b6b0 <_Bfree>
 800a8b4:	9a00      	ldr	r2, [sp, #0]
 800a8b6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800a8ba:	b92a      	cbnz	r2, 800a8c8 <_dtoa_r+0x6d0>
 800a8bc:	9b03      	ldr	r3, [sp, #12]
 800a8be:	b91b      	cbnz	r3, 800a8c8 <_dtoa_r+0x6d0>
 800a8c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f000 83aa 	beq.w	800b01c <_dtoa_r+0xe24>
 800a8c8:	f1ba 0f00 	cmp.w	sl, #0
 800a8cc:	f2c0 824a 	blt.w	800ad64 <_dtoa_r+0xb6c>
 800a8d0:	d105      	bne.n	800a8de <_dtoa_r+0x6e6>
 800a8d2:	9b03      	ldr	r3, [sp, #12]
 800a8d4:	b91b      	cbnz	r3, 800a8de <_dtoa_r+0x6e6>
 800a8d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f000 8243 	beq.w	800ad64 <_dtoa_r+0xb6c>
 800a8de:	2a00      	cmp	r2, #0
 800a8e0:	f300 82bb 	bgt.w	800ae5a <_dtoa_r+0xc62>
 800a8e4:	9b08      	ldr	r3, [sp, #32]
 800a8e6:	f887 c000 	strb.w	ip, [r7]
 800a8ea:	f107 0a01 	add.w	sl, r7, #1
 800a8ee:	429f      	cmp	r7, r3
 800a8f0:	4655      	mov	r5, sl
 800a8f2:	f000 82be 	beq.w	800ae72 <_dtoa_r+0xc7a>
 800a8f6:	4659      	mov	r1, fp
 800a8f8:	220a      	movs	r2, #10
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f000 fee1 	bl	800b6c4 <__multadd>
 800a902:	454e      	cmp	r6, r9
 800a904:	4683      	mov	fp, r0
 800a906:	4631      	mov	r1, r6
 800a908:	4620      	mov	r0, r4
 800a90a:	f04f 020a 	mov.w	r2, #10
 800a90e:	f04f 0300 	mov.w	r3, #0
 800a912:	f000 8176 	beq.w	800ac02 <_dtoa_r+0xa0a>
 800a916:	f000 fed5 	bl	800b6c4 <__multadd>
 800a91a:	4649      	mov	r1, r9
 800a91c:	4606      	mov	r6, r0
 800a91e:	220a      	movs	r2, #10
 800a920:	4620      	mov	r0, r4
 800a922:	2300      	movs	r3, #0
 800a924:	f000 fece 	bl	800b6c4 <__multadd>
 800a928:	4657      	mov	r7, sl
 800a92a:	4681      	mov	r9, r0
 800a92c:	e79f      	b.n	800a86e <_dtoa_r+0x676>
 800a92e:	2301      	movs	r3, #1
 800a930:	930b      	str	r3, [sp, #44]	; 0x2c
 800a932:	f1ba 0f00 	cmp.w	sl, #0
 800a936:	f340 820c 	ble.w	800ad52 <_dtoa_r+0xb5a>
 800a93a:	4656      	mov	r6, sl
 800a93c:	4655      	mov	r5, sl
 800a93e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a942:	f8cd a020 	str.w	sl, [sp, #32]
 800a946:	2100      	movs	r1, #0
 800a948:	2e17      	cmp	r6, #23
 800a94a:	6461      	str	r1, [r4, #68]	; 0x44
 800a94c:	d90a      	bls.n	800a964 <_dtoa_r+0x76c>
 800a94e:	2201      	movs	r2, #1
 800a950:	2304      	movs	r3, #4
 800a952:	005b      	lsls	r3, r3, #1
 800a954:	f103 0014 	add.w	r0, r3, #20
 800a958:	4286      	cmp	r6, r0
 800a95a:	4611      	mov	r1, r2
 800a95c:	f102 0201 	add.w	r2, r2, #1
 800a960:	d2f7      	bcs.n	800a952 <_dtoa_r+0x75a>
 800a962:	6461      	str	r1, [r4, #68]	; 0x44
 800a964:	4620      	mov	r0, r4
 800a966:	f000 fe7d 	bl	800b664 <_Balloc>
 800a96a:	2d0e      	cmp	r5, #14
 800a96c:	9009      	str	r0, [sp, #36]	; 0x24
 800a96e:	6420      	str	r0, [r4, #64]	; 0x40
 800a970:	f63f ad55 	bhi.w	800a41e <_dtoa_r+0x226>
 800a974:	2f00      	cmp	r7, #0
 800a976:	f43f ad52 	beq.w	800a41e <_dtoa_r+0x226>
 800a97a:	ed9d 7b00 	vldr	d7, [sp]
 800a97e:	9905      	ldr	r1, [sp, #20]
 800a980:	2900      	cmp	r1, #0
 800a982:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a986:	f340 8223 	ble.w	800add0 <_dtoa_r+0xbd8>
 800a98a:	4bb7      	ldr	r3, [pc, #732]	; (800ac68 <_dtoa_r+0xa70>)
 800a98c:	f001 020f 	and.w	r2, r1, #15
 800a990:	110d      	asrs	r5, r1, #4
 800a992:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a996:	06e9      	lsls	r1, r5, #27
 800a998:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a99c:	f140 81d2 	bpl.w	800ad44 <_dtoa_r+0xb4c>
 800a9a0:	4bb2      	ldr	r3, [pc, #712]	; (800ac6c <_dtoa_r+0xa74>)
 800a9a2:	ec51 0b17 	vmov	r0, r1, d7
 800a9a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9aa:	f7f6 f849 	bl	8000a40 <__aeabi_ddiv>
 800a9ae:	e9cd 0100 	strd	r0, r1, [sp]
 800a9b2:	f005 050f 	and.w	r5, r5, #15
 800a9b6:	f04f 0803 	mov.w	r8, #3
 800a9ba:	b18d      	cbz	r5, 800a9e0 <_dtoa_r+0x7e8>
 800a9bc:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 800ac6c <_dtoa_r+0xa74>
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	4639      	mov	r1, r7
 800a9c4:	07ea      	lsls	r2, r5, #31
 800a9c6:	d505      	bpl.n	800a9d4 <_dtoa_r+0x7dc>
 800a9c8:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a9cc:	f7f5 ff0e 	bl	80007ec <__aeabi_dmul>
 800a9d0:	f108 0801 	add.w	r8, r8, #1
 800a9d4:	106d      	asrs	r5, r5, #1
 800a9d6:	f109 0908 	add.w	r9, r9, #8
 800a9da:	d1f3      	bne.n	800a9c4 <_dtoa_r+0x7cc>
 800a9dc:	4606      	mov	r6, r0
 800a9de:	460f      	mov	r7, r1
 800a9e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9e4:	4632      	mov	r2, r6
 800a9e6:	463b      	mov	r3, r7
 800a9e8:	f7f6 f82a 	bl	8000a40 <__aeabi_ddiv>
 800a9ec:	e9cd 0100 	strd	r0, r1, [sp]
 800a9f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9f2:	b143      	cbz	r3, 800aa06 <_dtoa_r+0x80e>
 800a9f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	4b9d      	ldr	r3, [pc, #628]	; (800ac70 <_dtoa_r+0xa78>)
 800a9fc:	f7f6 f968 	bl	8000cd0 <__aeabi_dcmplt>
 800aa00:	2800      	cmp	r0, #0
 800aa02:	f040 82ae 	bne.w	800af62 <_dtoa_r+0xd6a>
 800aa06:	4640      	mov	r0, r8
 800aa08:	f7f5 fe8a 	bl	8000720 <__aeabi_i2d>
 800aa0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa10:	f7f5 feec 	bl	80007ec <__aeabi_dmul>
 800aa14:	4b97      	ldr	r3, [pc, #604]	; (800ac74 <_dtoa_r+0xa7c>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	f7f5 fd36 	bl	8000488 <__adddf3>
 800aa1c:	9b08      	ldr	r3, [sp, #32]
 800aa1e:	4606      	mov	r6, r0
 800aa20:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f000 8162 	beq.w	800acee <_dtoa_r+0xaf6>
 800aa2a:	9b05      	ldr	r3, [sp, #20]
 800aa2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa30:	9314      	str	r3, [sp, #80]	; 0x50
 800aa32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f000 8223 	beq.w	800ae80 <_dtoa_r+0xc88>
 800aa3a:	4b8b      	ldr	r3, [pc, #556]	; (800ac68 <_dtoa_r+0xa70>)
 800aa3c:	498e      	ldr	r1, [pc, #568]	; (800ac78 <_dtoa_r+0xa80>)
 800aa3e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800aa42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa46:	2000      	movs	r0, #0
 800aa48:	f7f5 fffa 	bl	8000a40 <__aeabi_ddiv>
 800aa4c:	4632      	mov	r2, r6
 800aa4e:	463b      	mov	r3, r7
 800aa50:	f7f5 fd18 	bl	8000484 <__aeabi_dsub>
 800aa54:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aa58:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800aa5c:	4639      	mov	r1, r7
 800aa5e:	4630      	mov	r0, r6
 800aa60:	f7f6 f95e 	bl	8000d20 <__aeabi_d2iz>
 800aa64:	4605      	mov	r5, r0
 800aa66:	f7f5 fe5b 	bl	8000720 <__aeabi_i2d>
 800aa6a:	3530      	adds	r5, #48	; 0x30
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	460b      	mov	r3, r1
 800aa70:	4630      	mov	r0, r6
 800aa72:	4639      	mov	r1, r7
 800aa74:	f7f5 fd06 	bl	8000484 <__aeabi_dsub>
 800aa78:	fa5f f885 	uxtb.w	r8, r5
 800aa7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aa7e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800aa82:	f885 8000 	strb.w	r8, [r5]
 800aa86:	4606      	mov	r6, r0
 800aa88:	460f      	mov	r7, r1
 800aa8a:	3501      	adds	r5, #1
 800aa8c:	f7f6 f920 	bl	8000cd0 <__aeabi_dcmplt>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	f040 82a7 	bne.w	800afe4 <_dtoa_r+0xdec>
 800aa96:	4632      	mov	r2, r6
 800aa98:	463b      	mov	r3, r7
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	4974      	ldr	r1, [pc, #464]	; (800ac70 <_dtoa_r+0xa78>)
 800aa9e:	f7f5 fcf1 	bl	8000484 <__aeabi_dsub>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800aaaa:	f7f6 f92f 	bl	8000d0c <__aeabi_dcmpgt>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	f040 82ad 	bne.w	800b00e <_dtoa_r+0xe16>
 800aab4:	f1b9 0f01 	cmp.w	r9, #1
 800aab8:	f340 8184 	ble.w	800adc4 <_dtoa_r+0xbcc>
 800aabc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aabe:	f8cd b000 	str.w	fp, [sp]
 800aac2:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 800aac6:	4499      	add	r9, r3
 800aac8:	46a0      	mov	r8, r4
 800aaca:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 800aace:	e00d      	b.n	800aaec <_dtoa_r+0x8f4>
 800aad0:	2000      	movs	r0, #0
 800aad2:	4967      	ldr	r1, [pc, #412]	; (800ac70 <_dtoa_r+0xa78>)
 800aad4:	f7f5 fcd6 	bl	8000484 <__aeabi_dsub>
 800aad8:	4652      	mov	r2, sl
 800aada:	465b      	mov	r3, fp
 800aadc:	f7f6 f8f8 	bl	8000cd0 <__aeabi_dcmplt>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	f040 828f 	bne.w	800b004 <_dtoa_r+0xe0c>
 800aae6:	454d      	cmp	r5, r9
 800aae8:	f000 8167 	beq.w	800adba <_dtoa_r+0xbc2>
 800aaec:	4650      	mov	r0, sl
 800aaee:	4659      	mov	r1, fp
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	4b62      	ldr	r3, [pc, #392]	; (800ac7c <_dtoa_r+0xa84>)
 800aaf4:	f7f5 fe7a 	bl	80007ec <__aeabi_dmul>
 800aaf8:	2200      	movs	r2, #0
 800aafa:	4b60      	ldr	r3, [pc, #384]	; (800ac7c <_dtoa_r+0xa84>)
 800aafc:	4682      	mov	sl, r0
 800aafe:	468b      	mov	fp, r1
 800ab00:	4630      	mov	r0, r6
 800ab02:	4639      	mov	r1, r7
 800ab04:	f7f5 fe72 	bl	80007ec <__aeabi_dmul>
 800ab08:	460f      	mov	r7, r1
 800ab0a:	4606      	mov	r6, r0
 800ab0c:	f7f6 f908 	bl	8000d20 <__aeabi_d2iz>
 800ab10:	4604      	mov	r4, r0
 800ab12:	f7f5 fe05 	bl	8000720 <__aeabi_i2d>
 800ab16:	4602      	mov	r2, r0
 800ab18:	460b      	mov	r3, r1
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	4639      	mov	r1, r7
 800ab1e:	f7f5 fcb1 	bl	8000484 <__aeabi_dsub>
 800ab22:	3430      	adds	r4, #48	; 0x30
 800ab24:	b2e4      	uxtb	r4, r4
 800ab26:	4652      	mov	r2, sl
 800ab28:	465b      	mov	r3, fp
 800ab2a:	f805 4b01 	strb.w	r4, [r5], #1
 800ab2e:	4606      	mov	r6, r0
 800ab30:	460f      	mov	r7, r1
 800ab32:	f7f6 f8cd 	bl	8000cd0 <__aeabi_dcmplt>
 800ab36:	4632      	mov	r2, r6
 800ab38:	463b      	mov	r3, r7
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	d0c8      	beq.n	800aad0 <_dtoa_r+0x8d8>
 800ab3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab40:	f8dd b000 	ldr.w	fp, [sp]
 800ab44:	9305      	str	r3, [sp, #20]
 800ab46:	4644      	mov	r4, r8
 800ab48:	e52d      	b.n	800a5a6 <_dtoa_r+0x3ae>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab4e:	9b05      	ldr	r3, [sp, #20]
 800ab50:	4453      	add	r3, sl
 800ab52:	930e      	str	r3, [sp, #56]	; 0x38
 800ab54:	3301      	adds	r3, #1
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	9308      	str	r3, [sp, #32]
 800ab5a:	f340 8101 	ble.w	800ad60 <_dtoa_r+0xb68>
 800ab5e:	9d08      	ldr	r5, [sp, #32]
 800ab60:	462e      	mov	r6, r5
 800ab62:	e6f0      	b.n	800a946 <_dtoa_r+0x74e>
 800ab64:	2300      	movs	r3, #0
 800ab66:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab68:	e6e3      	b.n	800a932 <_dtoa_r+0x73a>
 800ab6a:	9b08      	ldr	r3, [sp, #32]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f73f ac67 	bgt.w	800a440 <_dtoa_r+0x248>
 800ab72:	f040 80d4 	bne.w	800ad1e <_dtoa_r+0xb26>
 800ab76:	4640      	mov	r0, r8
 800ab78:	2200      	movs	r2, #0
 800ab7a:	4b41      	ldr	r3, [pc, #260]	; (800ac80 <_dtoa_r+0xa88>)
 800ab7c:	4649      	mov	r1, r9
 800ab7e:	f7f5 fe35 	bl	80007ec <__aeabi_dmul>
 800ab82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab86:	f7f6 f8b7 	bl	8000cf8 <__aeabi_dcmpge>
 800ab8a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab8e:	4646      	mov	r6, r8
 800ab90:	2800      	cmp	r0, #0
 800ab92:	f000 808b 	beq.w	800acac <_dtoa_r+0xab4>
 800ab96:	ea6f 030a 	mvn.w	r3, sl
 800ab9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ab9c:	9305      	str	r3, [sp, #20]
 800ab9e:	4641      	mov	r1, r8
 800aba0:	4620      	mov	r0, r4
 800aba2:	f000 fd85 	bl	800b6b0 <_Bfree>
 800aba6:	2e00      	cmp	r6, #0
 800aba8:	f47f ae2b 	bne.w	800a802 <_dtoa_r+0x60a>
 800abac:	e4fb      	b.n	800a5a6 <_dtoa_r+0x3ae>
 800abae:	4659      	mov	r1, fp
 800abb0:	4620      	mov	r0, r4
 800abb2:	f000 febb 	bl	800b92c <__pow5mult>
 800abb6:	4683      	mov	fp, r0
 800abb8:	e554      	b.n	800a664 <_dtoa_r+0x46c>
 800abba:	9b00      	ldr	r3, [sp, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f47f ad63 	bne.w	800a688 <_dtoa_r+0x490>
 800abc2:	9b01      	ldr	r3, [sp, #4]
 800abc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abc8:	2b00      	cmp	r3, #0
 800abca:	f47f ad90 	bne.w	800a6ee <_dtoa_r+0x4f6>
 800abce:	9b01      	ldr	r3, [sp, #4]
 800abd0:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800abd4:	0d3f      	lsrs	r7, r7, #20
 800abd6:	053f      	lsls	r7, r7, #20
 800abd8:	2f00      	cmp	r7, #0
 800abda:	f000 821c 	beq.w	800b016 <_dtoa_r+0xe1e>
 800abde:	9b07      	ldr	r3, [sp, #28]
 800abe0:	3301      	adds	r3, #1
 800abe2:	9307      	str	r3, [sp, #28]
 800abe4:	9b06      	ldr	r3, [sp, #24]
 800abe6:	3301      	adds	r3, #1
 800abe8:	9306      	str	r3, [sp, #24]
 800abea:	f04f 0901 	mov.w	r9, #1
 800abee:	e580      	b.n	800a6f2 <_dtoa_r+0x4fa>
 800abf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800abf2:	2a00      	cmp	r2, #0
 800abf4:	f000 81a7 	beq.w	800af46 <_dtoa_r+0xd4e>
 800abf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800abfc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800abfe:	9d07      	ldr	r5, [sp, #28]
 800ac00:	e4f9      	b.n	800a5f6 <_dtoa_r+0x3fe>
 800ac02:	f000 fd5f 	bl	800b6c4 <__multadd>
 800ac06:	4657      	mov	r7, sl
 800ac08:	4606      	mov	r6, r0
 800ac0a:	4681      	mov	r9, r0
 800ac0c:	e62f      	b.n	800a86e <_dtoa_r+0x676>
 800ac0e:	4601      	mov	r1, r0
 800ac10:	4620      	mov	r0, r4
 800ac12:	f8cd c000 	str.w	ip, [sp]
 800ac16:	f000 fd4b 	bl	800b6b0 <_Bfree>
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f8dd c000 	ldr.w	ip, [sp]
 800ac20:	e652      	b.n	800a8c8 <_dtoa_r+0x6d0>
 800ac22:	4658      	mov	r0, fp
 800ac24:	4641      	mov	r1, r8
 800ac26:	f000 ff27 	bl	800ba78 <__mcmp>
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	f6bf ad8f 	bge.w	800a74e <_dtoa_r+0x556>
 800ac30:	9f05      	ldr	r7, [sp, #20]
 800ac32:	4659      	mov	r1, fp
 800ac34:	2300      	movs	r3, #0
 800ac36:	4620      	mov	r0, r4
 800ac38:	220a      	movs	r2, #10
 800ac3a:	3f01      	subs	r7, #1
 800ac3c:	9705      	str	r7, [sp, #20]
 800ac3e:	f000 fd41 	bl	800b6c4 <__multadd>
 800ac42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac44:	4683      	mov	fp, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f47f adee 	bne.w	800a828 <_dtoa_r+0x630>
 800ac4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f340 81f5 	ble.w	800b03e <_dtoa_r+0xe46>
 800ac54:	9308      	str	r3, [sp, #32]
 800ac56:	e581      	b.n	800a75c <_dtoa_r+0x564>
 800ac58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac5a:	f7ff bb04 	b.w	800a266 <_dtoa_r+0x6e>
 800ac5e:	9b00      	ldr	r3, [sp, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f47f ad44 	bne.w	800a6ee <_dtoa_r+0x4f6>
 800ac66:	e7ac      	b.n	800abc2 <_dtoa_r+0x9ca>
 800ac68:	0800d1c0 	.word	0x0800d1c0
 800ac6c:	0800d298 	.word	0x0800d298
 800ac70:	3ff00000 	.word	0x3ff00000
 800ac74:	401c0000 	.word	0x401c0000
 800ac78:	3fe00000 	.word	0x3fe00000
 800ac7c:	40240000 	.word	0x40240000
 800ac80:	40140000 	.word	0x40140000
 800ac84:	9b03      	ldr	r3, [sp, #12]
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	f77f ad65 	ble.w	800a756 <_dtoa_r+0x55e>
 800ac8c:	9b08      	ldr	r3, [sp, #32]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d181      	bne.n	800ab96 <_dtoa_r+0x99e>
 800ac92:	4641      	mov	r1, r8
 800ac94:	2205      	movs	r2, #5
 800ac96:	4620      	mov	r0, r4
 800ac98:	f000 fd14 	bl	800b6c4 <__multadd>
 800ac9c:	4680      	mov	r8, r0
 800ac9e:	4641      	mov	r1, r8
 800aca0:	4658      	mov	r0, fp
 800aca2:	f000 fee9 	bl	800ba78 <__mcmp>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	f77f af75 	ble.w	800ab96 <_dtoa_r+0x99e>
 800acac:	9a05      	ldr	r2, [sp, #20]
 800acae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acb0:	2331      	movs	r3, #49	; 0x31
 800acb2:	3201      	adds	r2, #1
 800acb4:	9205      	str	r2, [sp, #20]
 800acb6:	700b      	strb	r3, [r1, #0]
 800acb8:	1c4d      	adds	r5, r1, #1
 800acba:	e770      	b.n	800ab9e <_dtoa_r+0x9a6>
 800acbc:	9a05      	ldr	r2, [sp, #20]
 800acbe:	3201      	adds	r2, #1
 800acc0:	9205      	str	r2, [sp, #20]
 800acc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acc4:	2331      	movs	r3, #49	; 0x31
 800acc6:	7013      	strb	r3, [r2, #0]
 800acc8:	e58b      	b.n	800a7e2 <_dtoa_r+0x5ea>
 800acca:	f8dd b000 	ldr.w	fp, [sp]
 800acce:	9c03      	ldr	r4, [sp, #12]
 800acd0:	e469      	b.n	800a5a6 <_dtoa_r+0x3ae>
 800acd2:	4640      	mov	r0, r8
 800acd4:	f7f5 fd24 	bl	8000720 <__aeabi_i2d>
 800acd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acdc:	f7f5 fd86 	bl	80007ec <__aeabi_dmul>
 800ace0:	2200      	movs	r2, #0
 800ace2:	4bc2      	ldr	r3, [pc, #776]	; (800afec <_dtoa_r+0xdf4>)
 800ace4:	f7f5 fbd0 	bl	8000488 <__adddf3>
 800ace8:	4606      	mov	r6, r0
 800acea:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800acee:	2200      	movs	r2, #0
 800acf0:	4bbf      	ldr	r3, [pc, #764]	; (800aff0 <_dtoa_r+0xdf8>)
 800acf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acf6:	f7f5 fbc5 	bl	8000484 <__aeabi_dsub>
 800acfa:	4632      	mov	r2, r6
 800acfc:	463b      	mov	r3, r7
 800acfe:	4680      	mov	r8, r0
 800ad00:	4689      	mov	r9, r1
 800ad02:	f7f6 f803 	bl	8000d0c <__aeabi_dcmpgt>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	f040 80b6 	bne.w	800ae78 <_dtoa_r+0xc80>
 800ad0c:	4632      	mov	r2, r6
 800ad0e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ad12:	4640      	mov	r0, r8
 800ad14:	4649      	mov	r1, r9
 800ad16:	f7f5 ffdb 	bl	8000cd0 <__aeabi_dcmplt>
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	d052      	beq.n	800adc4 <_dtoa_r+0xbcc>
 800ad1e:	f04f 0800 	mov.w	r8, #0
 800ad22:	4646      	mov	r6, r8
 800ad24:	e737      	b.n	800ab96 <_dtoa_r+0x99e>
 800ad26:	4659      	mov	r1, fp
 800ad28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f000 fdfe 	bl	800b92c <__pow5mult>
 800ad30:	4683      	mov	fp, r0
 800ad32:	e497      	b.n	800a664 <_dtoa_r+0x46c>
 800ad34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad38:	970a      	str	r7, [sp, #40]	; 0x28
 800ad3a:	1afb      	subs	r3, r7, r3
 800ad3c:	441a      	add	r2, r3
 800ad3e:	920c      	str	r2, [sp, #48]	; 0x30
 800ad40:	2700      	movs	r7, #0
 800ad42:	e452      	b.n	800a5ea <_dtoa_r+0x3f2>
 800ad44:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 800ad48:	f04f 0802 	mov.w	r8, #2
 800ad4c:	ed8d 7b00 	vstr	d7, [sp]
 800ad50:	e633      	b.n	800a9ba <_dtoa_r+0x7c2>
 800ad52:	2501      	movs	r5, #1
 800ad54:	950e      	str	r5, [sp, #56]	; 0x38
 800ad56:	9508      	str	r5, [sp, #32]
 800ad58:	46aa      	mov	sl, r5
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	6461      	str	r1, [r4, #68]	; 0x44
 800ad5e:	e601      	b.n	800a964 <_dtoa_r+0x76c>
 800ad60:	461d      	mov	r5, r3
 800ad62:	e7fa      	b.n	800ad5a <_dtoa_r+0xb62>
 800ad64:	2a00      	cmp	r2, #0
 800ad66:	dd15      	ble.n	800ad94 <_dtoa_r+0xb9c>
 800ad68:	4659      	mov	r1, fp
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f8cd c000 	str.w	ip, [sp]
 800ad72:	f000 fe2b 	bl	800b9cc <__lshift>
 800ad76:	4641      	mov	r1, r8
 800ad78:	4683      	mov	fp, r0
 800ad7a:	f000 fe7d 	bl	800ba78 <__mcmp>
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	f8dd c000 	ldr.w	ip, [sp]
 800ad84:	f340 8154 	ble.w	800b030 <_dtoa_r+0xe38>
 800ad88:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 800ad8c:	f000 8111 	beq.w	800afb2 <_dtoa_r+0xdba>
 800ad90:	f10c 0c01 	add.w	ip, ip, #1
 800ad94:	46b2      	mov	sl, r6
 800ad96:	f887 c000 	strb.w	ip, [r7]
 800ad9a:	1c7d      	adds	r5, r7, #1
 800ad9c:	464e      	mov	r6, r9
 800ad9e:	e520      	b.n	800a7e2 <_dtoa_r+0x5ea>
 800ada0:	d104      	bne.n	800adac <_dtoa_r+0xbb4>
 800ada2:	f01c 0f01 	tst.w	ip, #1
 800ada6:	d001      	beq.n	800adac <_dtoa_r+0xbb4>
 800ada8:	e50b      	b.n	800a7c2 <_dtoa_r+0x5ca>
 800adaa:	4615      	mov	r5, r2
 800adac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800adb0:	2b30      	cmp	r3, #48	; 0x30
 800adb2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800adb6:	d0f8      	beq.n	800adaa <_dtoa_r+0xbb2>
 800adb8:	e513      	b.n	800a7e2 <_dtoa_r+0x5ea>
 800adba:	f8dd b000 	ldr.w	fp, [sp]
 800adbe:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 800adc2:	4644      	mov	r4, r8
 800adc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800adc8:	e9cd 2300 	strd	r2, r3, [sp]
 800adcc:	f7ff bb27 	b.w	800a41e <_dtoa_r+0x226>
 800add0:	9b05      	ldr	r3, [sp, #20]
 800add2:	425d      	negs	r5, r3
 800add4:	2d00      	cmp	r5, #0
 800add6:	f000 80bd 	beq.w	800af54 <_dtoa_r+0xd5c>
 800adda:	4b86      	ldr	r3, [pc, #536]	; (800aff4 <_dtoa_r+0xdfc>)
 800addc:	f005 020f 	and.w	r2, r5, #15
 800ade0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ade4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800adec:	f7f5 fcfe 	bl	80007ec <__aeabi_dmul>
 800adf0:	112d      	asrs	r5, r5, #4
 800adf2:	e9cd 0100 	strd	r0, r1, [sp]
 800adf6:	f000 8127 	beq.w	800b048 <_dtoa_r+0xe50>
 800adfa:	4e7f      	ldr	r6, [pc, #508]	; (800aff8 <_dtoa_r+0xe00>)
 800adfc:	f04f 0802 	mov.w	r8, #2
 800ae00:	07eb      	lsls	r3, r5, #31
 800ae02:	d505      	bpl.n	800ae10 <_dtoa_r+0xc18>
 800ae04:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae08:	f7f5 fcf0 	bl	80007ec <__aeabi_dmul>
 800ae0c:	f108 0801 	add.w	r8, r8, #1
 800ae10:	106d      	asrs	r5, r5, #1
 800ae12:	f106 0608 	add.w	r6, r6, #8
 800ae16:	d1f3      	bne.n	800ae00 <_dtoa_r+0xc08>
 800ae18:	e9cd 0100 	strd	r0, r1, [sp]
 800ae1c:	e5e8      	b.n	800a9f0 <_dtoa_r+0x7f8>
 800ae1e:	9a05      	ldr	r2, [sp, #20]
 800ae20:	3201      	adds	r2, #1
 800ae22:	9205      	str	r2, [sp, #20]
 800ae24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae26:	2330      	movs	r3, #48	; 0x30
 800ae28:	7013      	strb	r3, [r2, #0]
 800ae2a:	2331      	movs	r3, #49	; 0x31
 800ae2c:	7013      	strb	r3, [r2, #0]
 800ae2e:	f7ff bbba 	b.w	800a5a6 <_dtoa_r+0x3ae>
 800ae32:	6871      	ldr	r1, [r6, #4]
 800ae34:	4620      	mov	r0, r4
 800ae36:	f000 fc15 	bl	800b664 <_Balloc>
 800ae3a:	6933      	ldr	r3, [r6, #16]
 800ae3c:	1c9a      	adds	r2, r3, #2
 800ae3e:	4605      	mov	r5, r0
 800ae40:	0092      	lsls	r2, r2, #2
 800ae42:	f106 010c 	add.w	r1, r6, #12
 800ae46:	300c      	adds	r0, #12
 800ae48:	f7f5 fa7e 	bl	8000348 <memcpy>
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	4629      	mov	r1, r5
 800ae50:	2201      	movs	r2, #1
 800ae52:	f000 fdbb 	bl	800b9cc <__lshift>
 800ae56:	4681      	mov	r9, r0
 800ae58:	e4ff      	b.n	800a85a <_dtoa_r+0x662>
 800ae5a:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 800ae5e:	f000 80a8 	beq.w	800afb2 <_dtoa_r+0xdba>
 800ae62:	f10c 0c01 	add.w	ip, ip, #1
 800ae66:	46b2      	mov	sl, r6
 800ae68:	f887 c000 	strb.w	ip, [r7]
 800ae6c:	1c7d      	adds	r5, r7, #1
 800ae6e:	464e      	mov	r6, r9
 800ae70:	e4b7      	b.n	800a7e2 <_dtoa_r+0x5ea>
 800ae72:	46b2      	mov	sl, r6
 800ae74:	464e      	mov	r6, r9
 800ae76:	e494      	b.n	800a7a2 <_dtoa_r+0x5aa>
 800ae78:	f04f 0800 	mov.w	r8, #0
 800ae7c:	4646      	mov	r6, r8
 800ae7e:	e715      	b.n	800acac <_dtoa_r+0xab4>
 800ae80:	495c      	ldr	r1, [pc, #368]	; (800aff4 <_dtoa_r+0xdfc>)
 800ae82:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800ae86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae8a:	4632      	mov	r2, r6
 800ae8c:	9315      	str	r3, [sp, #84]	; 0x54
 800ae8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae92:	463b      	mov	r3, r7
 800ae94:	f7f5 fcaa 	bl	80007ec <__aeabi_dmul>
 800ae98:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ae9c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800aea0:	4639      	mov	r1, r7
 800aea2:	4630      	mov	r0, r6
 800aea4:	f7f5 ff3c 	bl	8000d20 <__aeabi_d2iz>
 800aea8:	4605      	mov	r5, r0
 800aeaa:	f7f5 fc39 	bl	8000720 <__aeabi_i2d>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	4639      	mov	r1, r7
 800aeb6:	f7f5 fae5 	bl	8000484 <__aeabi_dsub>
 800aeba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aebc:	3530      	adds	r5, #48	; 0x30
 800aebe:	f1b9 0f01 	cmp.w	r9, #1
 800aec2:	7015      	strb	r5, [r2, #0]
 800aec4:	4606      	mov	r6, r0
 800aec6:	460f      	mov	r7, r1
 800aec8:	f102 0501 	add.w	r5, r2, #1
 800aecc:	d023      	beq.n	800af16 <_dtoa_r+0xd1e>
 800aece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aed0:	f8cd b000 	str.w	fp, [sp]
 800aed4:	444b      	add	r3, r9
 800aed6:	4698      	mov	r8, r3
 800aed8:	46a9      	mov	r9, r5
 800aeda:	46ab      	mov	fp, r5
 800aedc:	2200      	movs	r2, #0
 800aede:	4b47      	ldr	r3, [pc, #284]	; (800affc <_dtoa_r+0xe04>)
 800aee0:	f7f5 fc84 	bl	80007ec <__aeabi_dmul>
 800aee4:	460f      	mov	r7, r1
 800aee6:	4606      	mov	r6, r0
 800aee8:	f7f5 ff1a 	bl	8000d20 <__aeabi_d2iz>
 800aeec:	4605      	mov	r5, r0
 800aeee:	f7f5 fc17 	bl	8000720 <__aeabi_i2d>
 800aef2:	3530      	adds	r5, #48	; 0x30
 800aef4:	4602      	mov	r2, r0
 800aef6:	460b      	mov	r3, r1
 800aef8:	4630      	mov	r0, r6
 800aefa:	4639      	mov	r1, r7
 800aefc:	f7f5 fac2 	bl	8000484 <__aeabi_dsub>
 800af00:	f809 5b01 	strb.w	r5, [r9], #1
 800af04:	45c1      	cmp	r9, r8
 800af06:	d1e9      	bne.n	800aedc <_dtoa_r+0xce4>
 800af08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af0a:	465d      	mov	r5, fp
 800af0c:	f8dd b000 	ldr.w	fp, [sp]
 800af10:	4606      	mov	r6, r0
 800af12:	460f      	mov	r7, r1
 800af14:	441d      	add	r5, r3
 800af16:	2200      	movs	r2, #0
 800af18:	4b39      	ldr	r3, [pc, #228]	; (800b000 <_dtoa_r+0xe08>)
 800af1a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800af1e:	f7f5 fab3 	bl	8000488 <__adddf3>
 800af22:	4632      	mov	r2, r6
 800af24:	463b      	mov	r3, r7
 800af26:	f7f5 fed3 	bl	8000cd0 <__aeabi_dcmplt>
 800af2a:	2800      	cmp	r0, #0
 800af2c:	d047      	beq.n	800afbe <_dtoa_r+0xdc6>
 800af2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af30:	9305      	str	r3, [sp, #20]
 800af32:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 800af36:	f7ff bb24 	b.w	800a582 <_dtoa_r+0x38a>
 800af3a:	9b07      	ldr	r3, [sp, #28]
 800af3c:	9a08      	ldr	r2, [sp, #32]
 800af3e:	1a9d      	subs	r5, r3, r2
 800af40:	2300      	movs	r3, #0
 800af42:	f7ff bb58 	b.w	800a5f6 <_dtoa_r+0x3fe>
 800af46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800af48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800af4a:	9d07      	ldr	r5, [sp, #28]
 800af4c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af50:	f7ff bb51 	b.w	800a5f6 <_dtoa_r+0x3fe>
 800af54:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 800af58:	f04f 0802 	mov.w	r8, #2
 800af5c:	ed8d 7b00 	vstr	d7, [sp]
 800af60:	e546      	b.n	800a9f0 <_dtoa_r+0x7f8>
 800af62:	9b08      	ldr	r3, [sp, #32]
 800af64:	2b00      	cmp	r3, #0
 800af66:	f43f aeb4 	beq.w	800acd2 <_dtoa_r+0xada>
 800af6a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800af6c:	2d00      	cmp	r5, #0
 800af6e:	f77f af29 	ble.w	800adc4 <_dtoa_r+0xbcc>
 800af72:	2200      	movs	r2, #0
 800af74:	4b21      	ldr	r3, [pc, #132]	; (800affc <_dtoa_r+0xe04>)
 800af76:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af7a:	f7f5 fc37 	bl	80007ec <__aeabi_dmul>
 800af7e:	4606      	mov	r6, r0
 800af80:	460f      	mov	r7, r1
 800af82:	f108 0001 	add.w	r0, r8, #1
 800af86:	e9cd 6700 	strd	r6, r7, [sp]
 800af8a:	f7f5 fbc9 	bl	8000720 <__aeabi_i2d>
 800af8e:	4602      	mov	r2, r0
 800af90:	460b      	mov	r3, r1
 800af92:	4630      	mov	r0, r6
 800af94:	4639      	mov	r1, r7
 800af96:	f7f5 fc29 	bl	80007ec <__aeabi_dmul>
 800af9a:	4b14      	ldr	r3, [pc, #80]	; (800afec <_dtoa_r+0xdf4>)
 800af9c:	2200      	movs	r2, #0
 800af9e:	f7f5 fa73 	bl	8000488 <__adddf3>
 800afa2:	9b05      	ldr	r3, [sp, #20]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	4606      	mov	r6, r0
 800afa8:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800afac:	9314      	str	r3, [sp, #80]	; 0x50
 800afae:	46a9      	mov	r9, r5
 800afb0:	e53f      	b.n	800aa32 <_dtoa_r+0x83a>
 800afb2:	2239      	movs	r2, #57	; 0x39
 800afb4:	46b2      	mov	sl, r6
 800afb6:	703a      	strb	r2, [r7, #0]
 800afb8:	464e      	mov	r6, r9
 800afba:	1c7d      	adds	r5, r7, #1
 800afbc:	e403      	b.n	800a7c6 <_dtoa_r+0x5ce>
 800afbe:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800afc2:	2000      	movs	r0, #0
 800afc4:	490e      	ldr	r1, [pc, #56]	; (800b000 <_dtoa_r+0xe08>)
 800afc6:	f7f5 fa5d 	bl	8000484 <__aeabi_dsub>
 800afca:	4632      	mov	r2, r6
 800afcc:	463b      	mov	r3, r7
 800afce:	f7f5 fe9d 	bl	8000d0c <__aeabi_dcmpgt>
 800afd2:	b908      	cbnz	r0, 800afd8 <_dtoa_r+0xde0>
 800afd4:	e6f6      	b.n	800adc4 <_dtoa_r+0xbcc>
 800afd6:	4615      	mov	r5, r2
 800afd8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800afdc:	2b30      	cmp	r3, #48	; 0x30
 800afde:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800afe2:	d0f8      	beq.n	800afd6 <_dtoa_r+0xdde>
 800afe4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800afe6:	9305      	str	r3, [sp, #20]
 800afe8:	f7ff badd 	b.w	800a5a6 <_dtoa_r+0x3ae>
 800afec:	401c0000 	.word	0x401c0000
 800aff0:	40140000 	.word	0x40140000
 800aff4:	0800d1c0 	.word	0x0800d1c0
 800aff8:	0800d298 	.word	0x0800d298
 800affc:	40240000 	.word	0x40240000
 800b000:	3fe00000 	.word	0x3fe00000
 800b004:	4643      	mov	r3, r8
 800b006:	f8dd b000 	ldr.w	fp, [sp]
 800b00a:	46a0      	mov	r8, r4
 800b00c:	461c      	mov	r4, r3
 800b00e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b010:	9305      	str	r3, [sp, #20]
 800b012:	f7ff bab6 	b.w	800a582 <_dtoa_r+0x38a>
 800b016:	46b9      	mov	r9, r7
 800b018:	f7ff bb6b 	b.w	800a6f2 <_dtoa_r+0x4fa>
 800b01c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 800b020:	d0c7      	beq.n	800afb2 <_dtoa_r+0xdba>
 800b022:	f1ba 0f00 	cmp.w	sl, #0
 800b026:	f77f aeb5 	ble.w	800ad94 <_dtoa_r+0xb9c>
 800b02a:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 800b02e:	e6b1      	b.n	800ad94 <_dtoa_r+0xb9c>
 800b030:	f47f aeb0 	bne.w	800ad94 <_dtoa_r+0xb9c>
 800b034:	f01c 0f01 	tst.w	ip, #1
 800b038:	f43f aeac 	beq.w	800ad94 <_dtoa_r+0xb9c>
 800b03c:	e6a4      	b.n	800ad88 <_dtoa_r+0xb90>
 800b03e:	9b03      	ldr	r3, [sp, #12]
 800b040:	2b02      	cmp	r3, #2
 800b042:	dc04      	bgt.n	800b04e <_dtoa_r+0xe56>
 800b044:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b046:	e605      	b.n	800ac54 <_dtoa_r+0xa5c>
 800b048:	f04f 0802 	mov.w	r8, #2
 800b04c:	e4d0      	b.n	800a9f0 <_dtoa_r+0x7f8>
 800b04e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b050:	9308      	str	r3, [sp, #32]
 800b052:	e61b      	b.n	800ac8c <_dtoa_r+0xa94>
 800b054:	9b03      	ldr	r3, [sp, #12]
 800b056:	2b02      	cmp	r3, #2
 800b058:	dcf9      	bgt.n	800b04e <_dtoa_r+0xe56>
 800b05a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b05c:	f7ff bbef 	b.w	800a83e <_dtoa_r+0x646>
 800b060:	2500      	movs	r5, #0
 800b062:	6465      	str	r5, [r4, #68]	; 0x44
 800b064:	4629      	mov	r1, r5
 800b066:	4620      	mov	r0, r4
 800b068:	f000 fafc 	bl	800b664 <_Balloc>
 800b06c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b070:	9308      	str	r3, [sp, #32]
 800b072:	930e      	str	r3, [sp, #56]	; 0x38
 800b074:	2301      	movs	r3, #1
 800b076:	9009      	str	r0, [sp, #36]	; 0x24
 800b078:	46aa      	mov	sl, r5
 800b07a:	6420      	str	r0, [r4, #64]	; 0x40
 800b07c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b07e:	f7ff b9ce 	b.w	800a41e <_dtoa_r+0x226>
 800b082:	f43f ab4e 	beq.w	800a722 <_dtoa_r+0x52a>
 800b086:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800b08a:	f7ff bb43 	b.w	800a714 <_dtoa_r+0x51c>
 800b08e:	2301      	movs	r3, #1
 800b090:	930b      	str	r3, [sp, #44]	; 0x2c
 800b092:	e55c      	b.n	800ab4e <_dtoa_r+0x956>
 800b094:	2701      	movs	r7, #1
 800b096:	f7ff b98d 	b.w	800a3b4 <_dtoa_r+0x1bc>
 800b09a:	bf00      	nop

0800b09c <_localeconv_r>:
 800b09c:	4800      	ldr	r0, [pc, #0]	; (800b0a0 <_localeconv_r+0x4>)
 800b09e:	4770      	bx	lr
 800b0a0:	20000d2c 	.word	0x20000d2c

0800b0a4 <_malloc_r>:
 800b0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a8:	f101 050b 	add.w	r5, r1, #11
 800b0ac:	2d16      	cmp	r5, #22
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	d927      	bls.n	800b104 <_malloc_r+0x60>
 800b0b4:	f035 0507 	bics.w	r5, r5, #7
 800b0b8:	f100 80b6 	bmi.w	800b228 <_malloc_r+0x184>
 800b0bc:	42a9      	cmp	r1, r5
 800b0be:	f200 80b3 	bhi.w	800b228 <_malloc_r+0x184>
 800b0c2:	f000 facb 	bl	800b65c <__malloc_lock>
 800b0c6:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800b0ca:	d222      	bcs.n	800b112 <_malloc_r+0x6e>
 800b0cc:	4fc2      	ldr	r7, [pc, #776]	; (800b3d8 <_malloc_r+0x334>)
 800b0ce:	08e8      	lsrs	r0, r5, #3
 800b0d0:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 800b0d4:	68dc      	ldr	r4, [r3, #12]
 800b0d6:	429c      	cmp	r4, r3
 800b0d8:	f000 81c8 	beq.w	800b46c <_malloc_r+0x3c8>
 800b0dc:	6863      	ldr	r3, [r4, #4]
 800b0de:	68e1      	ldr	r1, [r4, #12]
 800b0e0:	68a5      	ldr	r5, [r4, #8]
 800b0e2:	f023 0303 	bic.w	r3, r3, #3
 800b0e6:	4423      	add	r3, r4
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	685a      	ldr	r2, [r3, #4]
 800b0ec:	60e9      	str	r1, [r5, #12]
 800b0ee:	f042 0201 	orr.w	r2, r2, #1
 800b0f2:	608d      	str	r5, [r1, #8]
 800b0f4:	605a      	str	r2, [r3, #4]
 800b0f6:	f000 fab3 	bl	800b660 <__malloc_unlock>
 800b0fa:	3408      	adds	r4, #8
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	b003      	add	sp, #12
 800b100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b104:	2910      	cmp	r1, #16
 800b106:	f200 808f 	bhi.w	800b228 <_malloc_r+0x184>
 800b10a:	f000 faa7 	bl	800b65c <__malloc_lock>
 800b10e:	2510      	movs	r5, #16
 800b110:	e7dc      	b.n	800b0cc <_malloc_r+0x28>
 800b112:	0a68      	lsrs	r0, r5, #9
 800b114:	f000 808f 	beq.w	800b236 <_malloc_r+0x192>
 800b118:	2804      	cmp	r0, #4
 800b11a:	f200 8154 	bhi.w	800b3c6 <_malloc_r+0x322>
 800b11e:	09a8      	lsrs	r0, r5, #6
 800b120:	3038      	adds	r0, #56	; 0x38
 800b122:	0041      	lsls	r1, r0, #1
 800b124:	4fac      	ldr	r7, [pc, #688]	; (800b3d8 <_malloc_r+0x334>)
 800b126:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 800b12a:	68cc      	ldr	r4, [r1, #12]
 800b12c:	42a1      	cmp	r1, r4
 800b12e:	d106      	bne.n	800b13e <_malloc_r+0x9a>
 800b130:	e00c      	b.n	800b14c <_malloc_r+0xa8>
 800b132:	2a00      	cmp	r2, #0
 800b134:	f280 8082 	bge.w	800b23c <_malloc_r+0x198>
 800b138:	68e4      	ldr	r4, [r4, #12]
 800b13a:	42a1      	cmp	r1, r4
 800b13c:	d006      	beq.n	800b14c <_malloc_r+0xa8>
 800b13e:	6863      	ldr	r3, [r4, #4]
 800b140:	f023 0303 	bic.w	r3, r3, #3
 800b144:	1b5a      	subs	r2, r3, r5
 800b146:	2a0f      	cmp	r2, #15
 800b148:	ddf3      	ble.n	800b132 <_malloc_r+0x8e>
 800b14a:	3801      	subs	r0, #1
 800b14c:	3001      	adds	r0, #1
 800b14e:	49a2      	ldr	r1, [pc, #648]	; (800b3d8 <_malloc_r+0x334>)
 800b150:	693c      	ldr	r4, [r7, #16]
 800b152:	f101 0e08 	add.w	lr, r1, #8
 800b156:	4574      	cmp	r4, lr
 800b158:	f000 817d 	beq.w	800b456 <_malloc_r+0x3b2>
 800b15c:	6863      	ldr	r3, [r4, #4]
 800b15e:	f023 0303 	bic.w	r3, r3, #3
 800b162:	1b5a      	subs	r2, r3, r5
 800b164:	2a0f      	cmp	r2, #15
 800b166:	f300 8163 	bgt.w	800b430 <_malloc_r+0x38c>
 800b16a:	2a00      	cmp	r2, #0
 800b16c:	f8c1 e014 	str.w	lr, [r1, #20]
 800b170:	f8c1 e010 	str.w	lr, [r1, #16]
 800b174:	da73      	bge.n	800b25e <_malloc_r+0x1ba>
 800b176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b17a:	f080 8139 	bcs.w	800b3f0 <_malloc_r+0x34c>
 800b17e:	08db      	lsrs	r3, r3, #3
 800b180:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 800b184:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 800b188:	684a      	ldr	r2, [r1, #4]
 800b18a:	f8d8 9008 	ldr.w	r9, [r8, #8]
 800b18e:	f8c4 9008 	str.w	r9, [r4, #8]
 800b192:	2301      	movs	r3, #1
 800b194:	fa03 f30c 	lsl.w	r3, r3, ip
 800b198:	4313      	orrs	r3, r2
 800b19a:	f8c4 800c 	str.w	r8, [r4, #12]
 800b19e:	604b      	str	r3, [r1, #4]
 800b1a0:	f8c8 4008 	str.w	r4, [r8, #8]
 800b1a4:	f8c9 400c 	str.w	r4, [r9, #12]
 800b1a8:	1082      	asrs	r2, r0, #2
 800b1aa:	2401      	movs	r4, #1
 800b1ac:	4094      	lsls	r4, r2
 800b1ae:	429c      	cmp	r4, r3
 800b1b0:	d862      	bhi.n	800b278 <_malloc_r+0x1d4>
 800b1b2:	4223      	tst	r3, r4
 800b1b4:	d106      	bne.n	800b1c4 <_malloc_r+0x120>
 800b1b6:	f020 0003 	bic.w	r0, r0, #3
 800b1ba:	0064      	lsls	r4, r4, #1
 800b1bc:	4223      	tst	r3, r4
 800b1be:	f100 0004 	add.w	r0, r0, #4
 800b1c2:	d0fa      	beq.n	800b1ba <_malloc_r+0x116>
 800b1c4:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 800b1c8:	46c4      	mov	ip, r8
 800b1ca:	4681      	mov	r9, r0
 800b1cc:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800b1d0:	459c      	cmp	ip, r3
 800b1d2:	d107      	bne.n	800b1e4 <_malloc_r+0x140>
 800b1d4:	e141      	b.n	800b45a <_malloc_r+0x3b6>
 800b1d6:	2900      	cmp	r1, #0
 800b1d8:	f280 8151 	bge.w	800b47e <_malloc_r+0x3da>
 800b1dc:	68db      	ldr	r3, [r3, #12]
 800b1de:	459c      	cmp	ip, r3
 800b1e0:	f000 813b 	beq.w	800b45a <_malloc_r+0x3b6>
 800b1e4:	685a      	ldr	r2, [r3, #4]
 800b1e6:	f022 0203 	bic.w	r2, r2, #3
 800b1ea:	1b51      	subs	r1, r2, r5
 800b1ec:	290f      	cmp	r1, #15
 800b1ee:	ddf2      	ble.n	800b1d6 <_malloc_r+0x132>
 800b1f0:	461c      	mov	r4, r3
 800b1f2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800b1f6:	f854 8f08 	ldr.w	r8, [r4, #8]!
 800b1fa:	195a      	adds	r2, r3, r5
 800b1fc:	f045 0901 	orr.w	r9, r5, #1
 800b200:	f041 0501 	orr.w	r5, r1, #1
 800b204:	f8c3 9004 	str.w	r9, [r3, #4]
 800b208:	4630      	mov	r0, r6
 800b20a:	f8c8 c00c 	str.w	ip, [r8, #12]
 800b20e:	f8cc 8008 	str.w	r8, [ip, #8]
 800b212:	617a      	str	r2, [r7, #20]
 800b214:	613a      	str	r2, [r7, #16]
 800b216:	f8c2 e00c 	str.w	lr, [r2, #12]
 800b21a:	f8c2 e008 	str.w	lr, [r2, #8]
 800b21e:	6055      	str	r5, [r2, #4]
 800b220:	5051      	str	r1, [r2, r1]
 800b222:	f000 fa1d 	bl	800b660 <__malloc_unlock>
 800b226:	e769      	b.n	800b0fc <_malloc_r+0x58>
 800b228:	2400      	movs	r4, #0
 800b22a:	230c      	movs	r3, #12
 800b22c:	4620      	mov	r0, r4
 800b22e:	6033      	str	r3, [r6, #0]
 800b230:	b003      	add	sp, #12
 800b232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b236:	217e      	movs	r1, #126	; 0x7e
 800b238:	203f      	movs	r0, #63	; 0x3f
 800b23a:	e773      	b.n	800b124 <_malloc_r+0x80>
 800b23c:	4423      	add	r3, r4
 800b23e:	68e1      	ldr	r1, [r4, #12]
 800b240:	685a      	ldr	r2, [r3, #4]
 800b242:	68a5      	ldr	r5, [r4, #8]
 800b244:	f042 0201 	orr.w	r2, r2, #1
 800b248:	60e9      	str	r1, [r5, #12]
 800b24a:	4630      	mov	r0, r6
 800b24c:	608d      	str	r5, [r1, #8]
 800b24e:	605a      	str	r2, [r3, #4]
 800b250:	f000 fa06 	bl	800b660 <__malloc_unlock>
 800b254:	3408      	adds	r4, #8
 800b256:	4620      	mov	r0, r4
 800b258:	b003      	add	sp, #12
 800b25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b25e:	4423      	add	r3, r4
 800b260:	4630      	mov	r0, r6
 800b262:	685a      	ldr	r2, [r3, #4]
 800b264:	f042 0201 	orr.w	r2, r2, #1
 800b268:	605a      	str	r2, [r3, #4]
 800b26a:	f000 f9f9 	bl	800b660 <__malloc_unlock>
 800b26e:	3408      	adds	r4, #8
 800b270:	4620      	mov	r0, r4
 800b272:	b003      	add	sp, #12
 800b274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b278:	68bc      	ldr	r4, [r7, #8]
 800b27a:	6863      	ldr	r3, [r4, #4]
 800b27c:	f023 0803 	bic.w	r8, r3, #3
 800b280:	4545      	cmp	r5, r8
 800b282:	d804      	bhi.n	800b28e <_malloc_r+0x1ea>
 800b284:	ebc5 0308 	rsb	r3, r5, r8
 800b288:	2b0f      	cmp	r3, #15
 800b28a:	f300 808c 	bgt.w	800b3a6 <_malloc_r+0x302>
 800b28e:	4b53      	ldr	r3, [pc, #332]	; (800b3dc <_malloc_r+0x338>)
 800b290:	f8df a158 	ldr.w	sl, [pc, #344]	; 800b3ec <_malloc_r+0x348>
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	f8da 3000 	ldr.w	r3, [sl]
 800b29a:	3301      	adds	r3, #1
 800b29c:	442a      	add	r2, r5
 800b29e:	eb04 0b08 	add.w	fp, r4, r8
 800b2a2:	f000 8150 	beq.w	800b546 <_malloc_r+0x4a2>
 800b2a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b2aa:	320f      	adds	r2, #15
 800b2ac:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800b2b0:	f022 020f 	bic.w	r2, r2, #15
 800b2b4:	4611      	mov	r1, r2
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	9201      	str	r2, [sp, #4]
 800b2ba:	f7fd f881 	bl	80083c0 <_sbrk_r>
 800b2be:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b2c2:	4681      	mov	r9, r0
 800b2c4:	9a01      	ldr	r2, [sp, #4]
 800b2c6:	f000 8147 	beq.w	800b558 <_malloc_r+0x4b4>
 800b2ca:	4583      	cmp	fp, r0
 800b2cc:	f200 80ee 	bhi.w	800b4ac <_malloc_r+0x408>
 800b2d0:	4b43      	ldr	r3, [pc, #268]	; (800b3e0 <_malloc_r+0x33c>)
 800b2d2:	6819      	ldr	r1, [r3, #0]
 800b2d4:	45cb      	cmp	fp, r9
 800b2d6:	4411      	add	r1, r2
 800b2d8:	6019      	str	r1, [r3, #0]
 800b2da:	f000 8142 	beq.w	800b562 <_malloc_r+0x4be>
 800b2de:	f8da 0000 	ldr.w	r0, [sl]
 800b2e2:	f8df e108 	ldr.w	lr, [pc, #264]	; 800b3ec <_malloc_r+0x348>
 800b2e6:	3001      	adds	r0, #1
 800b2e8:	bf1b      	ittet	ne
 800b2ea:	ebcb 0b09 	rsbne	fp, fp, r9
 800b2ee:	4459      	addne	r1, fp
 800b2f0:	f8ce 9000 	streq.w	r9, [lr]
 800b2f4:	6019      	strne	r1, [r3, #0]
 800b2f6:	f019 0107 	ands.w	r1, r9, #7
 800b2fa:	f000 8107 	beq.w	800b50c <_malloc_r+0x468>
 800b2fe:	f1c1 0008 	rsb	r0, r1, #8
 800b302:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800b306:	4481      	add	r9, r0
 800b308:	3108      	adds	r1, #8
 800b30a:	444a      	add	r2, r9
 800b30c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800b310:	ebc2 0a01 	rsb	sl, r2, r1
 800b314:	4651      	mov	r1, sl
 800b316:	4630      	mov	r0, r6
 800b318:	9301      	str	r3, [sp, #4]
 800b31a:	f7fd f851 	bl	80083c0 <_sbrk_r>
 800b31e:	1c43      	adds	r3, r0, #1
 800b320:	9b01      	ldr	r3, [sp, #4]
 800b322:	f000 812c 	beq.w	800b57e <_malloc_r+0x4da>
 800b326:	ebc9 0200 	rsb	r2, r9, r0
 800b32a:	4452      	add	r2, sl
 800b32c:	f042 0201 	orr.w	r2, r2, #1
 800b330:	6819      	ldr	r1, [r3, #0]
 800b332:	f8c7 9008 	str.w	r9, [r7, #8]
 800b336:	4451      	add	r1, sl
 800b338:	42bc      	cmp	r4, r7
 800b33a:	f8c9 2004 	str.w	r2, [r9, #4]
 800b33e:	6019      	str	r1, [r3, #0]
 800b340:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800b3e0 <_malloc_r+0x33c>
 800b344:	d016      	beq.n	800b374 <_malloc_r+0x2d0>
 800b346:	f1b8 0f0f 	cmp.w	r8, #15
 800b34a:	f240 80ee 	bls.w	800b52a <_malloc_r+0x486>
 800b34e:	6862      	ldr	r2, [r4, #4]
 800b350:	f1a8 030c 	sub.w	r3, r8, #12
 800b354:	f023 0307 	bic.w	r3, r3, #7
 800b358:	18e0      	adds	r0, r4, r3
 800b35a:	f002 0201 	and.w	r2, r2, #1
 800b35e:	f04f 0e05 	mov.w	lr, #5
 800b362:	431a      	orrs	r2, r3
 800b364:	2b0f      	cmp	r3, #15
 800b366:	6062      	str	r2, [r4, #4]
 800b368:	f8c0 e004 	str.w	lr, [r0, #4]
 800b36c:	f8c0 e008 	str.w	lr, [r0, #8]
 800b370:	f200 8109 	bhi.w	800b586 <_malloc_r+0x4e2>
 800b374:	4b1b      	ldr	r3, [pc, #108]	; (800b3e4 <_malloc_r+0x340>)
 800b376:	68bc      	ldr	r4, [r7, #8]
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	4291      	cmp	r1, r2
 800b37c:	bf88      	it	hi
 800b37e:	6019      	strhi	r1, [r3, #0]
 800b380:	4b19      	ldr	r3, [pc, #100]	; (800b3e8 <_malloc_r+0x344>)
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	4291      	cmp	r1, r2
 800b386:	6862      	ldr	r2, [r4, #4]
 800b388:	bf88      	it	hi
 800b38a:	6019      	strhi	r1, [r3, #0]
 800b38c:	f022 0203 	bic.w	r2, r2, #3
 800b390:	4295      	cmp	r5, r2
 800b392:	eba2 0305 	sub.w	r3, r2, r5
 800b396:	d801      	bhi.n	800b39c <_malloc_r+0x2f8>
 800b398:	2b0f      	cmp	r3, #15
 800b39a:	dc04      	bgt.n	800b3a6 <_malloc_r+0x302>
 800b39c:	4630      	mov	r0, r6
 800b39e:	f000 f95f 	bl	800b660 <__malloc_unlock>
 800b3a2:	2400      	movs	r4, #0
 800b3a4:	e6aa      	b.n	800b0fc <_malloc_r+0x58>
 800b3a6:	1962      	adds	r2, r4, r5
 800b3a8:	f043 0301 	orr.w	r3, r3, #1
 800b3ac:	f045 0501 	orr.w	r5, r5, #1
 800b3b0:	6065      	str	r5, [r4, #4]
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	60ba      	str	r2, [r7, #8]
 800b3b6:	6053      	str	r3, [r2, #4]
 800b3b8:	f000 f952 	bl	800b660 <__malloc_unlock>
 800b3bc:	3408      	adds	r4, #8
 800b3be:	4620      	mov	r0, r4
 800b3c0:	b003      	add	sp, #12
 800b3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c6:	2814      	cmp	r0, #20
 800b3c8:	d968      	bls.n	800b49c <_malloc_r+0x3f8>
 800b3ca:	2854      	cmp	r0, #84	; 0x54
 800b3cc:	f200 8097 	bhi.w	800b4fe <_malloc_r+0x45a>
 800b3d0:	0b28      	lsrs	r0, r5, #12
 800b3d2:	306e      	adds	r0, #110	; 0x6e
 800b3d4:	0041      	lsls	r1, r0, #1
 800b3d6:	e6a5      	b.n	800b124 <_malloc_r+0x80>
 800b3d8:	20000d64 	.word	0x20000d64
 800b3dc:	2000bb20 	.word	0x2000bb20
 800b3e0:	2000bb24 	.word	0x2000bb24
 800b3e4:	2000bb1c 	.word	0x2000bb1c
 800b3e8:	2000bb18 	.word	0x2000bb18
 800b3ec:	20001170 	.word	0x20001170
 800b3f0:	0a5a      	lsrs	r2, r3, #9
 800b3f2:	2a04      	cmp	r2, #4
 800b3f4:	d955      	bls.n	800b4a2 <_malloc_r+0x3fe>
 800b3f6:	2a14      	cmp	r2, #20
 800b3f8:	f200 80a7 	bhi.w	800b54a <_malloc_r+0x4a6>
 800b3fc:	325b      	adds	r2, #91	; 0x5b
 800b3fe:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800b402:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 800b406:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b5c4 <_malloc_r+0x520>
 800b40a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800b40e:	4561      	cmp	r1, ip
 800b410:	d07f      	beq.n	800b512 <_malloc_r+0x46e>
 800b412:	684a      	ldr	r2, [r1, #4]
 800b414:	f022 0203 	bic.w	r2, r2, #3
 800b418:	4293      	cmp	r3, r2
 800b41a:	d202      	bcs.n	800b422 <_malloc_r+0x37e>
 800b41c:	6889      	ldr	r1, [r1, #8]
 800b41e:	458c      	cmp	ip, r1
 800b420:	d1f7      	bne.n	800b412 <_malloc_r+0x36e>
 800b422:	68ca      	ldr	r2, [r1, #12]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	60e2      	str	r2, [r4, #12]
 800b428:	60a1      	str	r1, [r4, #8]
 800b42a:	6094      	str	r4, [r2, #8]
 800b42c:	60cc      	str	r4, [r1, #12]
 800b42e:	e6bb      	b.n	800b1a8 <_malloc_r+0x104>
 800b430:	1963      	adds	r3, r4, r5
 800b432:	f042 0701 	orr.w	r7, r2, #1
 800b436:	f045 0501 	orr.w	r5, r5, #1
 800b43a:	6065      	str	r5, [r4, #4]
 800b43c:	4630      	mov	r0, r6
 800b43e:	614b      	str	r3, [r1, #20]
 800b440:	610b      	str	r3, [r1, #16]
 800b442:	f8c3 e00c 	str.w	lr, [r3, #12]
 800b446:	f8c3 e008 	str.w	lr, [r3, #8]
 800b44a:	605f      	str	r7, [r3, #4]
 800b44c:	509a      	str	r2, [r3, r2]
 800b44e:	3408      	adds	r4, #8
 800b450:	f000 f906 	bl	800b660 <__malloc_unlock>
 800b454:	e652      	b.n	800b0fc <_malloc_r+0x58>
 800b456:	684b      	ldr	r3, [r1, #4]
 800b458:	e6a6      	b.n	800b1a8 <_malloc_r+0x104>
 800b45a:	f109 0901 	add.w	r9, r9, #1
 800b45e:	f019 0f03 	tst.w	r9, #3
 800b462:	f10c 0c08 	add.w	ip, ip, #8
 800b466:	f47f aeb1 	bne.w	800b1cc <_malloc_r+0x128>
 800b46a:	e02c      	b.n	800b4c6 <_malloc_r+0x422>
 800b46c:	f104 0308 	add.w	r3, r4, #8
 800b470:	6964      	ldr	r4, [r4, #20]
 800b472:	42a3      	cmp	r3, r4
 800b474:	bf08      	it	eq
 800b476:	3002      	addeq	r0, #2
 800b478:	f43f ae69 	beq.w	800b14e <_malloc_r+0xaa>
 800b47c:	e62e      	b.n	800b0dc <_malloc_r+0x38>
 800b47e:	441a      	add	r2, r3
 800b480:	461c      	mov	r4, r3
 800b482:	6851      	ldr	r1, [r2, #4]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800b48a:	f041 0101 	orr.w	r1, r1, #1
 800b48e:	6051      	str	r1, [r2, #4]
 800b490:	4630      	mov	r0, r6
 800b492:	60eb      	str	r3, [r5, #12]
 800b494:	609d      	str	r5, [r3, #8]
 800b496:	f000 f8e3 	bl	800b660 <__malloc_unlock>
 800b49a:	e62f      	b.n	800b0fc <_malloc_r+0x58>
 800b49c:	305b      	adds	r0, #91	; 0x5b
 800b49e:	0041      	lsls	r1, r0, #1
 800b4a0:	e640      	b.n	800b124 <_malloc_r+0x80>
 800b4a2:	099a      	lsrs	r2, r3, #6
 800b4a4:	3238      	adds	r2, #56	; 0x38
 800b4a6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800b4aa:	e7aa      	b.n	800b402 <_malloc_r+0x35e>
 800b4ac:	42bc      	cmp	r4, r7
 800b4ae:	4b45      	ldr	r3, [pc, #276]	; (800b5c4 <_malloc_r+0x520>)
 800b4b0:	f43f af0e 	beq.w	800b2d0 <_malloc_r+0x22c>
 800b4b4:	689c      	ldr	r4, [r3, #8]
 800b4b6:	6862      	ldr	r2, [r4, #4]
 800b4b8:	f022 0203 	bic.w	r2, r2, #3
 800b4bc:	e768      	b.n	800b390 <_malloc_r+0x2ec>
 800b4be:	f8d8 8000 	ldr.w	r8, [r8]
 800b4c2:	4598      	cmp	r8, r3
 800b4c4:	d17c      	bne.n	800b5c0 <_malloc_r+0x51c>
 800b4c6:	f010 0f03 	tst.w	r0, #3
 800b4ca:	f1a8 0308 	sub.w	r3, r8, #8
 800b4ce:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800b4d2:	d1f4      	bne.n	800b4be <_malloc_r+0x41a>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	ea23 0304 	bic.w	r3, r3, r4
 800b4da:	607b      	str	r3, [r7, #4]
 800b4dc:	0064      	lsls	r4, r4, #1
 800b4de:	429c      	cmp	r4, r3
 800b4e0:	f63f aeca 	bhi.w	800b278 <_malloc_r+0x1d4>
 800b4e4:	2c00      	cmp	r4, #0
 800b4e6:	f43f aec7 	beq.w	800b278 <_malloc_r+0x1d4>
 800b4ea:	4223      	tst	r3, r4
 800b4ec:	4648      	mov	r0, r9
 800b4ee:	f47f ae69 	bne.w	800b1c4 <_malloc_r+0x120>
 800b4f2:	0064      	lsls	r4, r4, #1
 800b4f4:	4223      	tst	r3, r4
 800b4f6:	f100 0004 	add.w	r0, r0, #4
 800b4fa:	d0fa      	beq.n	800b4f2 <_malloc_r+0x44e>
 800b4fc:	e662      	b.n	800b1c4 <_malloc_r+0x120>
 800b4fe:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 800b502:	d818      	bhi.n	800b536 <_malloc_r+0x492>
 800b504:	0be8      	lsrs	r0, r5, #15
 800b506:	3077      	adds	r0, #119	; 0x77
 800b508:	0041      	lsls	r1, r0, #1
 800b50a:	e60b      	b.n	800b124 <_malloc_r+0x80>
 800b50c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b510:	e6fb      	b.n	800b30a <_malloc_r+0x266>
 800b512:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b516:	1092      	asrs	r2, r2, #2
 800b518:	f04f 0c01 	mov.w	ip, #1
 800b51c:	fa0c f202 	lsl.w	r2, ip, r2
 800b520:	4313      	orrs	r3, r2
 800b522:	f8c8 3004 	str.w	r3, [r8, #4]
 800b526:	460a      	mov	r2, r1
 800b528:	e77d      	b.n	800b426 <_malloc_r+0x382>
 800b52a:	2301      	movs	r3, #1
 800b52c:	f8c9 3004 	str.w	r3, [r9, #4]
 800b530:	464c      	mov	r4, r9
 800b532:	2200      	movs	r2, #0
 800b534:	e72c      	b.n	800b390 <_malloc_r+0x2ec>
 800b536:	f240 5354 	movw	r3, #1364	; 0x554
 800b53a:	4298      	cmp	r0, r3
 800b53c:	d81c      	bhi.n	800b578 <_malloc_r+0x4d4>
 800b53e:	0ca8      	lsrs	r0, r5, #18
 800b540:	307c      	adds	r0, #124	; 0x7c
 800b542:	0041      	lsls	r1, r0, #1
 800b544:	e5ee      	b.n	800b124 <_malloc_r+0x80>
 800b546:	3210      	adds	r2, #16
 800b548:	e6b4      	b.n	800b2b4 <_malloc_r+0x210>
 800b54a:	2a54      	cmp	r2, #84	; 0x54
 800b54c:	d823      	bhi.n	800b596 <_malloc_r+0x4f2>
 800b54e:	0b1a      	lsrs	r2, r3, #12
 800b550:	326e      	adds	r2, #110	; 0x6e
 800b552:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800b556:	e754      	b.n	800b402 <_malloc_r+0x35e>
 800b558:	68bc      	ldr	r4, [r7, #8]
 800b55a:	6862      	ldr	r2, [r4, #4]
 800b55c:	f022 0203 	bic.w	r2, r2, #3
 800b560:	e716      	b.n	800b390 <_malloc_r+0x2ec>
 800b562:	f3cb 000b 	ubfx	r0, fp, #0, #12
 800b566:	2800      	cmp	r0, #0
 800b568:	f47f aeb9 	bne.w	800b2de <_malloc_r+0x23a>
 800b56c:	4442      	add	r2, r8
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	f042 0201 	orr.w	r2, r2, #1
 800b574:	605a      	str	r2, [r3, #4]
 800b576:	e6fd      	b.n	800b374 <_malloc_r+0x2d0>
 800b578:	21fc      	movs	r1, #252	; 0xfc
 800b57a:	207e      	movs	r0, #126	; 0x7e
 800b57c:	e5d2      	b.n	800b124 <_malloc_r+0x80>
 800b57e:	2201      	movs	r2, #1
 800b580:	f04f 0a00 	mov.w	sl, #0
 800b584:	e6d4      	b.n	800b330 <_malloc_r+0x28c>
 800b586:	f104 0108 	add.w	r1, r4, #8
 800b58a:	4630      	mov	r0, r6
 800b58c:	f000 fcbc 	bl	800bf08 <_free_r>
 800b590:	f8da 1000 	ldr.w	r1, [sl]
 800b594:	e6ee      	b.n	800b374 <_malloc_r+0x2d0>
 800b596:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b59a:	d804      	bhi.n	800b5a6 <_malloc_r+0x502>
 800b59c:	0bda      	lsrs	r2, r3, #15
 800b59e:	3277      	adds	r2, #119	; 0x77
 800b5a0:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800b5a4:	e72d      	b.n	800b402 <_malloc_r+0x35e>
 800b5a6:	f240 5154 	movw	r1, #1364	; 0x554
 800b5aa:	428a      	cmp	r2, r1
 800b5ac:	d804      	bhi.n	800b5b8 <_malloc_r+0x514>
 800b5ae:	0c9a      	lsrs	r2, r3, #18
 800b5b0:	327c      	adds	r2, #124	; 0x7c
 800b5b2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800b5b6:	e724      	b.n	800b402 <_malloc_r+0x35e>
 800b5b8:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 800b5bc:	227e      	movs	r2, #126	; 0x7e
 800b5be:	e720      	b.n	800b402 <_malloc_r+0x35e>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	e78b      	b.n	800b4dc <_malloc_r+0x438>
 800b5c4:	20000d64 	.word	0x20000d64

0800b5c8 <memchr>:
 800b5c8:	0783      	lsls	r3, r0, #30
 800b5ca:	b470      	push	{r4, r5, r6}
 800b5cc:	b2c9      	uxtb	r1, r1
 800b5ce:	d040      	beq.n	800b652 <memchr+0x8a>
 800b5d0:	1e54      	subs	r4, r2, #1
 800b5d2:	2a00      	cmp	r2, #0
 800b5d4:	d03f      	beq.n	800b656 <memchr+0x8e>
 800b5d6:	7803      	ldrb	r3, [r0, #0]
 800b5d8:	428b      	cmp	r3, r1
 800b5da:	bf18      	it	ne
 800b5dc:	1c43      	addne	r3, r0, #1
 800b5de:	d106      	bne.n	800b5ee <memchr+0x26>
 800b5e0:	e01d      	b.n	800b61e <memchr+0x56>
 800b5e2:	b1f4      	cbz	r4, 800b622 <memchr+0x5a>
 800b5e4:	7802      	ldrb	r2, [r0, #0]
 800b5e6:	428a      	cmp	r2, r1
 800b5e8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b5ec:	d017      	beq.n	800b61e <memchr+0x56>
 800b5ee:	f013 0f03 	tst.w	r3, #3
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f103 0301 	add.w	r3, r3, #1
 800b5f8:	d1f3      	bne.n	800b5e2 <memchr+0x1a>
 800b5fa:	2c03      	cmp	r4, #3
 800b5fc:	d814      	bhi.n	800b628 <memchr+0x60>
 800b5fe:	b184      	cbz	r4, 800b622 <memchr+0x5a>
 800b600:	7803      	ldrb	r3, [r0, #0]
 800b602:	428b      	cmp	r3, r1
 800b604:	d00b      	beq.n	800b61e <memchr+0x56>
 800b606:	1905      	adds	r5, r0, r4
 800b608:	1c43      	adds	r3, r0, #1
 800b60a:	e002      	b.n	800b612 <memchr+0x4a>
 800b60c:	7802      	ldrb	r2, [r0, #0]
 800b60e:	428a      	cmp	r2, r1
 800b610:	d005      	beq.n	800b61e <memchr+0x56>
 800b612:	42ab      	cmp	r3, r5
 800b614:	4618      	mov	r0, r3
 800b616:	f103 0301 	add.w	r3, r3, #1
 800b61a:	d1f7      	bne.n	800b60c <memchr+0x44>
 800b61c:	2000      	movs	r0, #0
 800b61e:	bc70      	pop	{r4, r5, r6}
 800b620:	4770      	bx	lr
 800b622:	4620      	mov	r0, r4
 800b624:	bc70      	pop	{r4, r5, r6}
 800b626:	4770      	bx	lr
 800b628:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 800b62c:	4602      	mov	r2, r0
 800b62e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800b632:	4610      	mov	r0, r2
 800b634:	3204      	adds	r2, #4
 800b636:	6803      	ldr	r3, [r0, #0]
 800b638:	4073      	eors	r3, r6
 800b63a:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 800b63e:	ea25 0303 	bic.w	r3, r5, r3
 800b642:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800b646:	d1da      	bne.n	800b5fe <memchr+0x36>
 800b648:	3c04      	subs	r4, #4
 800b64a:	2c03      	cmp	r4, #3
 800b64c:	4610      	mov	r0, r2
 800b64e:	d8f0      	bhi.n	800b632 <memchr+0x6a>
 800b650:	e7d5      	b.n	800b5fe <memchr+0x36>
 800b652:	4614      	mov	r4, r2
 800b654:	e7d1      	b.n	800b5fa <memchr+0x32>
 800b656:	4610      	mov	r0, r2
 800b658:	e7e1      	b.n	800b61e <memchr+0x56>
 800b65a:	bf00      	nop

0800b65c <__malloc_lock>:
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop

0800b660 <__malloc_unlock>:
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop

0800b664 <_Balloc>:
 800b664:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b666:	b570      	push	{r4, r5, r6, lr}
 800b668:	4605      	mov	r5, r0
 800b66a:	460c      	mov	r4, r1
 800b66c:	b14b      	cbz	r3, 800b682 <_Balloc+0x1e>
 800b66e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b672:	b180      	cbz	r0, 800b696 <_Balloc+0x32>
 800b674:	6802      	ldr	r2, [r0, #0]
 800b676:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800b67a:	2300      	movs	r3, #0
 800b67c:	6103      	str	r3, [r0, #16]
 800b67e:	60c3      	str	r3, [r0, #12]
 800b680:	bd70      	pop	{r4, r5, r6, pc}
 800b682:	2104      	movs	r1, #4
 800b684:	2221      	movs	r2, #33	; 0x21
 800b686:	f000 fbc1 	bl	800be0c <_calloc_r>
 800b68a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800b68c:	4603      	mov	r3, r0
 800b68e:	2800      	cmp	r0, #0
 800b690:	d1ed      	bne.n	800b66e <_Balloc+0xa>
 800b692:	2000      	movs	r0, #0
 800b694:	bd70      	pop	{r4, r5, r6, pc}
 800b696:	2101      	movs	r1, #1
 800b698:	fa01 f604 	lsl.w	r6, r1, r4
 800b69c:	1d72      	adds	r2, r6, #5
 800b69e:	4628      	mov	r0, r5
 800b6a0:	0092      	lsls	r2, r2, #2
 800b6a2:	f000 fbb3 	bl	800be0c <_calloc_r>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d0f3      	beq.n	800b692 <_Balloc+0x2e>
 800b6aa:	6044      	str	r4, [r0, #4]
 800b6ac:	6086      	str	r6, [r0, #8]
 800b6ae:	e7e4      	b.n	800b67a <_Balloc+0x16>

0800b6b0 <_Bfree>:
 800b6b0:	b131      	cbz	r1, 800b6c0 <_Bfree+0x10>
 800b6b2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b6b4:	684a      	ldr	r2, [r1, #4]
 800b6b6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b6ba:	6008      	str	r0, [r1, #0]
 800b6bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop

0800b6c4 <__multadd>:
 800b6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6c6:	690c      	ldr	r4, [r1, #16]
 800b6c8:	b083      	sub	sp, #12
 800b6ca:	460d      	mov	r5, r1
 800b6cc:	4606      	mov	r6, r0
 800b6ce:	f101 0e14 	add.w	lr, r1, #20
 800b6d2:	2700      	movs	r7, #0
 800b6d4:	f8de 1000 	ldr.w	r1, [lr]
 800b6d8:	b288      	uxth	r0, r1
 800b6da:	0c09      	lsrs	r1, r1, #16
 800b6dc:	fb02 3300 	mla	r3, r2, r0, r3
 800b6e0:	fb02 f101 	mul.w	r1, r2, r1
 800b6e4:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 800b6e8:	3701      	adds	r7, #1
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 800b6f0:	42bc      	cmp	r4, r7
 800b6f2:	f84e 3b04 	str.w	r3, [lr], #4
 800b6f6:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800b6fa:	dceb      	bgt.n	800b6d4 <__multadd+0x10>
 800b6fc:	b13b      	cbz	r3, 800b70e <__multadd+0x4a>
 800b6fe:	68aa      	ldr	r2, [r5, #8]
 800b700:	4294      	cmp	r4, r2
 800b702:	da07      	bge.n	800b714 <__multadd+0x50>
 800b704:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800b708:	3401      	adds	r4, #1
 800b70a:	6153      	str	r3, [r2, #20]
 800b70c:	612c      	str	r4, [r5, #16]
 800b70e:	4628      	mov	r0, r5
 800b710:	b003      	add	sp, #12
 800b712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b714:	6869      	ldr	r1, [r5, #4]
 800b716:	9301      	str	r3, [sp, #4]
 800b718:	3101      	adds	r1, #1
 800b71a:	4630      	mov	r0, r6
 800b71c:	f7ff ffa2 	bl	800b664 <_Balloc>
 800b720:	692a      	ldr	r2, [r5, #16]
 800b722:	3202      	adds	r2, #2
 800b724:	f105 010c 	add.w	r1, r5, #12
 800b728:	4607      	mov	r7, r0
 800b72a:	0092      	lsls	r2, r2, #2
 800b72c:	300c      	adds	r0, #12
 800b72e:	f7f4 fe0b 	bl	8000348 <memcpy>
 800b732:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800b734:	6869      	ldr	r1, [r5, #4]
 800b736:	9b01      	ldr	r3, [sp, #4]
 800b738:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800b73c:	6028      	str	r0, [r5, #0]
 800b73e:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800b742:	463d      	mov	r5, r7
 800b744:	e7de      	b.n	800b704 <__multadd+0x40>
 800b746:	bf00      	nop

0800b748 <__hi0bits>:
 800b748:	0c03      	lsrs	r3, r0, #16
 800b74a:	041b      	lsls	r3, r3, #16
 800b74c:	b9b3      	cbnz	r3, 800b77c <__hi0bits+0x34>
 800b74e:	0400      	lsls	r0, r0, #16
 800b750:	2310      	movs	r3, #16
 800b752:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b756:	bf04      	itt	eq
 800b758:	0200      	lsleq	r0, r0, #8
 800b75a:	3308      	addeq	r3, #8
 800b75c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b760:	bf04      	itt	eq
 800b762:	0100      	lsleq	r0, r0, #4
 800b764:	3304      	addeq	r3, #4
 800b766:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b76a:	bf04      	itt	eq
 800b76c:	0080      	lsleq	r0, r0, #2
 800b76e:	3302      	addeq	r3, #2
 800b770:	2800      	cmp	r0, #0
 800b772:	db07      	blt.n	800b784 <__hi0bits+0x3c>
 800b774:	0042      	lsls	r2, r0, #1
 800b776:	d403      	bmi.n	800b780 <__hi0bits+0x38>
 800b778:	2020      	movs	r0, #32
 800b77a:	4770      	bx	lr
 800b77c:	2300      	movs	r3, #0
 800b77e:	e7e8      	b.n	800b752 <__hi0bits+0xa>
 800b780:	1c58      	adds	r0, r3, #1
 800b782:	4770      	bx	lr
 800b784:	4618      	mov	r0, r3
 800b786:	4770      	bx	lr

0800b788 <__lo0bits>:
 800b788:	6803      	ldr	r3, [r0, #0]
 800b78a:	f013 0207 	ands.w	r2, r3, #7
 800b78e:	d007      	beq.n	800b7a0 <__lo0bits+0x18>
 800b790:	07d9      	lsls	r1, r3, #31
 800b792:	d420      	bmi.n	800b7d6 <__lo0bits+0x4e>
 800b794:	079a      	lsls	r2, r3, #30
 800b796:	d420      	bmi.n	800b7da <__lo0bits+0x52>
 800b798:	089b      	lsrs	r3, r3, #2
 800b79a:	6003      	str	r3, [r0, #0]
 800b79c:	2002      	movs	r0, #2
 800b79e:	4770      	bx	lr
 800b7a0:	b299      	uxth	r1, r3
 800b7a2:	b909      	cbnz	r1, 800b7a8 <__lo0bits+0x20>
 800b7a4:	0c1b      	lsrs	r3, r3, #16
 800b7a6:	2210      	movs	r2, #16
 800b7a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b7ac:	bf04      	itt	eq
 800b7ae:	0a1b      	lsreq	r3, r3, #8
 800b7b0:	3208      	addeq	r2, #8
 800b7b2:	0719      	lsls	r1, r3, #28
 800b7b4:	bf04      	itt	eq
 800b7b6:	091b      	lsreq	r3, r3, #4
 800b7b8:	3204      	addeq	r2, #4
 800b7ba:	0799      	lsls	r1, r3, #30
 800b7bc:	bf04      	itt	eq
 800b7be:	089b      	lsreq	r3, r3, #2
 800b7c0:	3202      	addeq	r2, #2
 800b7c2:	07d9      	lsls	r1, r3, #31
 800b7c4:	d404      	bmi.n	800b7d0 <__lo0bits+0x48>
 800b7c6:	085b      	lsrs	r3, r3, #1
 800b7c8:	d101      	bne.n	800b7ce <__lo0bits+0x46>
 800b7ca:	2020      	movs	r0, #32
 800b7cc:	4770      	bx	lr
 800b7ce:	3201      	adds	r2, #1
 800b7d0:	6003      	str	r3, [r0, #0]
 800b7d2:	4610      	mov	r0, r2
 800b7d4:	4770      	bx	lr
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	4770      	bx	lr
 800b7da:	085b      	lsrs	r3, r3, #1
 800b7dc:	6003      	str	r3, [r0, #0]
 800b7de:	2001      	movs	r0, #1
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop

0800b7e4 <__i2b>:
 800b7e4:	b510      	push	{r4, lr}
 800b7e6:	460c      	mov	r4, r1
 800b7e8:	2101      	movs	r1, #1
 800b7ea:	f7ff ff3b 	bl	800b664 <_Balloc>
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	6144      	str	r4, [r0, #20]
 800b7f2:	6102      	str	r2, [r0, #16]
 800b7f4:	bd10      	pop	{r4, pc}
 800b7f6:	bf00      	nop

0800b7f8 <__multiply>:
 800b7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7fc:	690f      	ldr	r7, [r1, #16]
 800b7fe:	6916      	ldr	r6, [r2, #16]
 800b800:	42b7      	cmp	r7, r6
 800b802:	b083      	sub	sp, #12
 800b804:	460d      	mov	r5, r1
 800b806:	4614      	mov	r4, r2
 800b808:	f2c0 808d 	blt.w	800b926 <__multiply+0x12e>
 800b80c:	4633      	mov	r3, r6
 800b80e:	463e      	mov	r6, r7
 800b810:	461f      	mov	r7, r3
 800b812:	68ab      	ldr	r3, [r5, #8]
 800b814:	6869      	ldr	r1, [r5, #4]
 800b816:	eb06 0807 	add.w	r8, r6, r7
 800b81a:	4598      	cmp	r8, r3
 800b81c:	bfc8      	it	gt
 800b81e:	3101      	addgt	r1, #1
 800b820:	f7ff ff20 	bl	800b664 <_Balloc>
 800b824:	f100 0c14 	add.w	ip, r0, #20
 800b828:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 800b82c:	45cc      	cmp	ip, r9
 800b82e:	9000      	str	r0, [sp, #0]
 800b830:	d205      	bcs.n	800b83e <__multiply+0x46>
 800b832:	4663      	mov	r3, ip
 800b834:	2100      	movs	r1, #0
 800b836:	f843 1b04 	str.w	r1, [r3], #4
 800b83a:	4599      	cmp	r9, r3
 800b83c:	d8fb      	bhi.n	800b836 <__multiply+0x3e>
 800b83e:	f104 0214 	add.w	r2, r4, #20
 800b842:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 800b846:	f105 0314 	add.w	r3, r5, #20
 800b84a:	4552      	cmp	r2, sl
 800b84c:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 800b850:	d254      	bcs.n	800b8fc <__multiply+0x104>
 800b852:	f8cd 9004 	str.w	r9, [sp, #4]
 800b856:	4699      	mov	r9, r3
 800b858:	f852 3b04 	ldr.w	r3, [r2], #4
 800b85c:	fa1f fb83 	uxth.w	fp, r3
 800b860:	f1bb 0f00 	cmp.w	fp, #0
 800b864:	d020      	beq.n	800b8a8 <__multiply+0xb0>
 800b866:	2000      	movs	r0, #0
 800b868:	464f      	mov	r7, r9
 800b86a:	4666      	mov	r6, ip
 800b86c:	4605      	mov	r5, r0
 800b86e:	e000      	b.n	800b872 <__multiply+0x7a>
 800b870:	461e      	mov	r6, r3
 800b872:	f857 4b04 	ldr.w	r4, [r7], #4
 800b876:	6830      	ldr	r0, [r6, #0]
 800b878:	b2a1      	uxth	r1, r4
 800b87a:	b283      	uxth	r3, r0
 800b87c:	fb0b 3101 	mla	r1, fp, r1, r3
 800b880:	0c24      	lsrs	r4, r4, #16
 800b882:	0c00      	lsrs	r0, r0, #16
 800b884:	194b      	adds	r3, r1, r5
 800b886:	fb0b 0004 	mla	r0, fp, r4, r0
 800b88a:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800b88e:	b299      	uxth	r1, r3
 800b890:	4633      	mov	r3, r6
 800b892:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b896:	45be      	cmp	lr, r7
 800b898:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800b89c:	f843 1b04 	str.w	r1, [r3], #4
 800b8a0:	d8e6      	bhi.n	800b870 <__multiply+0x78>
 800b8a2:	6075      	str	r5, [r6, #4]
 800b8a4:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800b8a8:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 800b8ac:	d020      	beq.n	800b8f0 <__multiply+0xf8>
 800b8ae:	f8dc 3000 	ldr.w	r3, [ip]
 800b8b2:	4667      	mov	r7, ip
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	464d      	mov	r5, r9
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	e000      	b.n	800b8be <__multiply+0xc6>
 800b8bc:	4637      	mov	r7, r6
 800b8be:	882c      	ldrh	r4, [r5, #0]
 800b8c0:	0c00      	lsrs	r0, r0, #16
 800b8c2:	fb0b 0004 	mla	r0, fp, r4, r0
 800b8c6:	4401      	add	r1, r0
 800b8c8:	b29c      	uxth	r4, r3
 800b8ca:	463e      	mov	r6, r7
 800b8cc:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 800b8d0:	f846 3b04 	str.w	r3, [r6], #4
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f855 4b04 	ldr.w	r4, [r5], #4
 800b8da:	b283      	uxth	r3, r0
 800b8dc:	0c24      	lsrs	r4, r4, #16
 800b8de:	fb0b 3404 	mla	r4, fp, r4, r3
 800b8e2:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 800b8e6:	45ae      	cmp	lr, r5
 800b8e8:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800b8ec:	d8e6      	bhi.n	800b8bc <__multiply+0xc4>
 800b8ee:	607b      	str	r3, [r7, #4]
 800b8f0:	4592      	cmp	sl, r2
 800b8f2:	f10c 0c04 	add.w	ip, ip, #4
 800b8f6:	d8af      	bhi.n	800b858 <__multiply+0x60>
 800b8f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b8fc:	f1b8 0f00 	cmp.w	r8, #0
 800b900:	dd0b      	ble.n	800b91a <__multiply+0x122>
 800b902:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800b906:	f1a9 0904 	sub.w	r9, r9, #4
 800b90a:	b11b      	cbz	r3, 800b914 <__multiply+0x11c>
 800b90c:	e005      	b.n	800b91a <__multiply+0x122>
 800b90e:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 800b912:	b913      	cbnz	r3, 800b91a <__multiply+0x122>
 800b914:	f1b8 0801 	subs.w	r8, r8, #1
 800b918:	d1f9      	bne.n	800b90e <__multiply+0x116>
 800b91a:	9800      	ldr	r0, [sp, #0]
 800b91c:	f8c0 8010 	str.w	r8, [r0, #16]
 800b920:	b003      	add	sp, #12
 800b922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b926:	4615      	mov	r5, r2
 800b928:	460c      	mov	r4, r1
 800b92a:	e772      	b.n	800b812 <__multiply+0x1a>

0800b92c <__pow5mult>:
 800b92c:	f012 0303 	ands.w	r3, r2, #3
 800b930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b934:	4614      	mov	r4, r2
 800b936:	4607      	mov	r7, r0
 800b938:	460e      	mov	r6, r1
 800b93a:	d12d      	bne.n	800b998 <__pow5mult+0x6c>
 800b93c:	10a4      	asrs	r4, r4, #2
 800b93e:	d01c      	beq.n	800b97a <__pow5mult+0x4e>
 800b940:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800b942:	b395      	cbz	r5, 800b9aa <__pow5mult+0x7e>
 800b944:	07e3      	lsls	r3, r4, #31
 800b946:	f04f 0800 	mov.w	r8, #0
 800b94a:	d406      	bmi.n	800b95a <__pow5mult+0x2e>
 800b94c:	1064      	asrs	r4, r4, #1
 800b94e:	d014      	beq.n	800b97a <__pow5mult+0x4e>
 800b950:	6828      	ldr	r0, [r5, #0]
 800b952:	b1a8      	cbz	r0, 800b980 <__pow5mult+0x54>
 800b954:	4605      	mov	r5, r0
 800b956:	07e3      	lsls	r3, r4, #31
 800b958:	d5f8      	bpl.n	800b94c <__pow5mult+0x20>
 800b95a:	4638      	mov	r0, r7
 800b95c:	4631      	mov	r1, r6
 800b95e:	462a      	mov	r2, r5
 800b960:	f7ff ff4a 	bl	800b7f8 <__multiply>
 800b964:	b1b6      	cbz	r6, 800b994 <__pow5mult+0x68>
 800b966:	6872      	ldr	r2, [r6, #4]
 800b968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b96a:	1064      	asrs	r4, r4, #1
 800b96c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b970:	6031      	str	r1, [r6, #0]
 800b972:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800b976:	4606      	mov	r6, r0
 800b978:	d1ea      	bne.n	800b950 <__pow5mult+0x24>
 800b97a:	4630      	mov	r0, r6
 800b97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b980:	4629      	mov	r1, r5
 800b982:	462a      	mov	r2, r5
 800b984:	4638      	mov	r0, r7
 800b986:	f7ff ff37 	bl	800b7f8 <__multiply>
 800b98a:	6028      	str	r0, [r5, #0]
 800b98c:	f8c0 8000 	str.w	r8, [r0]
 800b990:	4605      	mov	r5, r0
 800b992:	e7e0      	b.n	800b956 <__pow5mult+0x2a>
 800b994:	4606      	mov	r6, r0
 800b996:	e7d9      	b.n	800b94c <__pow5mult+0x20>
 800b998:	1e5a      	subs	r2, r3, #1
 800b99a:	4d0b      	ldr	r5, [pc, #44]	; (800b9c8 <__pow5mult+0x9c>)
 800b99c:	2300      	movs	r3, #0
 800b99e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800b9a2:	f7ff fe8f 	bl	800b6c4 <__multadd>
 800b9a6:	4606      	mov	r6, r0
 800b9a8:	e7c8      	b.n	800b93c <__pow5mult+0x10>
 800b9aa:	2101      	movs	r1, #1
 800b9ac:	4638      	mov	r0, r7
 800b9ae:	f7ff fe59 	bl	800b664 <_Balloc>
 800b9b2:	f240 2171 	movw	r1, #625	; 0x271
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	6141      	str	r1, [r0, #20]
 800b9bc:	6102      	str	r2, [r0, #16]
 800b9be:	4605      	mov	r5, r0
 800b9c0:	64b8      	str	r0, [r7, #72]	; 0x48
 800b9c2:	6003      	str	r3, [r0, #0]
 800b9c4:	e7be      	b.n	800b944 <__pow5mult+0x18>
 800b9c6:	bf00      	nop
 800b9c8:	0800d288 	.word	0x0800d288

0800b9cc <__lshift>:
 800b9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d0:	690f      	ldr	r7, [r1, #16]
 800b9d2:	688b      	ldr	r3, [r1, #8]
 800b9d4:	ea4f 1962 	mov.w	r9, r2, asr #5
 800b9d8:	444f      	add	r7, r9
 800b9da:	1c7d      	adds	r5, r7, #1
 800b9dc:	429d      	cmp	r5, r3
 800b9de:	460e      	mov	r6, r1
 800b9e0:	4614      	mov	r4, r2
 800b9e2:	6849      	ldr	r1, [r1, #4]
 800b9e4:	4680      	mov	r8, r0
 800b9e6:	dd04      	ble.n	800b9f2 <__lshift+0x26>
 800b9e8:	005b      	lsls	r3, r3, #1
 800b9ea:	429d      	cmp	r5, r3
 800b9ec:	f101 0101 	add.w	r1, r1, #1
 800b9f0:	dcfa      	bgt.n	800b9e8 <__lshift+0x1c>
 800b9f2:	4640      	mov	r0, r8
 800b9f4:	f7ff fe36 	bl	800b664 <_Balloc>
 800b9f8:	f1b9 0f00 	cmp.w	r9, #0
 800b9fc:	f100 0114 	add.w	r1, r0, #20
 800ba00:	dd09      	ble.n	800ba16 <__lshift+0x4a>
 800ba02:	2300      	movs	r3, #0
 800ba04:	469e      	mov	lr, r3
 800ba06:	460a      	mov	r2, r1
 800ba08:	3301      	adds	r3, #1
 800ba0a:	454b      	cmp	r3, r9
 800ba0c:	f842 eb04 	str.w	lr, [r2], #4
 800ba10:	d1fa      	bne.n	800ba08 <__lshift+0x3c>
 800ba12:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800ba16:	6932      	ldr	r2, [r6, #16]
 800ba18:	f106 0314 	add.w	r3, r6, #20
 800ba1c:	f014 0c1f 	ands.w	ip, r4, #31
 800ba20:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 800ba24:	d01f      	beq.n	800ba66 <__lshift+0x9a>
 800ba26:	f1cc 0920 	rsb	r9, ip, #32
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	681c      	ldr	r4, [r3, #0]
 800ba2e:	fa04 f40c 	lsl.w	r4, r4, ip
 800ba32:	4314      	orrs	r4, r2
 800ba34:	468a      	mov	sl, r1
 800ba36:	f841 4b04 	str.w	r4, [r1], #4
 800ba3a:	f853 4b04 	ldr.w	r4, [r3], #4
 800ba3e:	459e      	cmp	lr, r3
 800ba40:	fa24 f209 	lsr.w	r2, r4, r9
 800ba44:	d8f2      	bhi.n	800ba2c <__lshift+0x60>
 800ba46:	f8ca 2004 	str.w	r2, [sl, #4]
 800ba4a:	b102      	cbz	r2, 800ba4e <__lshift+0x82>
 800ba4c:	1cbd      	adds	r5, r7, #2
 800ba4e:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800ba52:	6872      	ldr	r2, [r6, #4]
 800ba54:	3d01      	subs	r5, #1
 800ba56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba5a:	6105      	str	r5, [r0, #16]
 800ba5c:	6031      	str	r1, [r6, #0]
 800ba5e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800ba62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba66:	3904      	subs	r1, #4
 800ba68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba6c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba70:	459e      	cmp	lr, r3
 800ba72:	d8f9      	bhi.n	800ba68 <__lshift+0x9c>
 800ba74:	e7eb      	b.n	800ba4e <__lshift+0x82>
 800ba76:	bf00      	nop

0800ba78 <__mcmp>:
 800ba78:	6902      	ldr	r2, [r0, #16]
 800ba7a:	690b      	ldr	r3, [r1, #16]
 800ba7c:	1ad2      	subs	r2, r2, r3
 800ba7e:	d113      	bne.n	800baa8 <__mcmp+0x30>
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	3014      	adds	r0, #20
 800ba84:	3114      	adds	r1, #20
 800ba86:	4419      	add	r1, r3
 800ba88:	b410      	push	{r4}
 800ba8a:	4403      	add	r3, r0
 800ba8c:	e001      	b.n	800ba92 <__mcmp+0x1a>
 800ba8e:	4298      	cmp	r0, r3
 800ba90:	d20c      	bcs.n	800baac <__mcmp+0x34>
 800ba92:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800ba96:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ba9a:	4294      	cmp	r4, r2
 800ba9c:	d0f7      	beq.n	800ba8e <__mcmp+0x16>
 800ba9e:	d309      	bcc.n	800bab4 <__mcmp+0x3c>
 800baa0:	2001      	movs	r0, #1
 800baa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baa6:	4770      	bx	lr
 800baa8:	4610      	mov	r0, r2
 800baaa:	4770      	bx	lr
 800baac:	2000      	movs	r0, #0
 800baae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bab2:	4770      	bx	lr
 800bab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop

0800bac0 <__mdiff>:
 800bac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac4:	460e      	mov	r6, r1
 800bac6:	4605      	mov	r5, r0
 800bac8:	4611      	mov	r1, r2
 800baca:	4630      	mov	r0, r6
 800bacc:	4614      	mov	r4, r2
 800bace:	f7ff ffd3 	bl	800ba78 <__mcmp>
 800bad2:	1e07      	subs	r7, r0, #0
 800bad4:	d054      	beq.n	800bb80 <__mdiff+0xc0>
 800bad6:	db4d      	blt.n	800bb74 <__mdiff+0xb4>
 800bad8:	f04f 0800 	mov.w	r8, #0
 800badc:	6871      	ldr	r1, [r6, #4]
 800bade:	4628      	mov	r0, r5
 800bae0:	f7ff fdc0 	bl	800b664 <_Balloc>
 800bae4:	6937      	ldr	r7, [r6, #16]
 800bae6:	6923      	ldr	r3, [r4, #16]
 800bae8:	f8c0 800c 	str.w	r8, [r0, #12]
 800baec:	3614      	adds	r6, #20
 800baee:	f104 0214 	add.w	r2, r4, #20
 800baf2:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 800baf6:	f100 0514 	add.w	r5, r0, #20
 800bafa:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 800bafe:	2300      	movs	r3, #0
 800bb00:	f856 8b04 	ldr.w	r8, [r6], #4
 800bb04:	f852 4b04 	ldr.w	r4, [r2], #4
 800bb08:	fa13 f388 	uxtah	r3, r3, r8
 800bb0c:	b2a1      	uxth	r1, r4
 800bb0e:	0c24      	lsrs	r4, r4, #16
 800bb10:	1a59      	subs	r1, r3, r1
 800bb12:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 800bb16:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bb1a:	b289      	uxth	r1, r1
 800bb1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800bb20:	4594      	cmp	ip, r2
 800bb22:	f845 1b04 	str.w	r1, [r5], #4
 800bb26:	ea4f 4323 	mov.w	r3, r3, asr #16
 800bb2a:	4634      	mov	r4, r6
 800bb2c:	d8e8      	bhi.n	800bb00 <__mdiff+0x40>
 800bb2e:	45b6      	cmp	lr, r6
 800bb30:	46ac      	mov	ip, r5
 800bb32:	d915      	bls.n	800bb60 <__mdiff+0xa0>
 800bb34:	f854 2b04 	ldr.w	r2, [r4], #4
 800bb38:	fa13 f182 	uxtah	r1, r3, r2
 800bb3c:	0c13      	lsrs	r3, r2, #16
 800bb3e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bb42:	b289      	uxth	r1, r1
 800bb44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800bb48:	45a6      	cmp	lr, r4
 800bb4a:	f845 1b04 	str.w	r1, [r5], #4
 800bb4e:	ea4f 4323 	mov.w	r3, r3, asr #16
 800bb52:	d8ef      	bhi.n	800bb34 <__mdiff+0x74>
 800bb54:	43f6      	mvns	r6, r6
 800bb56:	4476      	add	r6, lr
 800bb58:	f026 0503 	bic.w	r5, r6, #3
 800bb5c:	3504      	adds	r5, #4
 800bb5e:	4465      	add	r5, ip
 800bb60:	3d04      	subs	r5, #4
 800bb62:	b921      	cbnz	r1, 800bb6e <__mdiff+0xae>
 800bb64:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800bb68:	3f01      	subs	r7, #1
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d0fa      	beq.n	800bb64 <__mdiff+0xa4>
 800bb6e:	6107      	str	r7, [r0, #16]
 800bb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb74:	4633      	mov	r3, r6
 800bb76:	f04f 0801 	mov.w	r8, #1
 800bb7a:	4626      	mov	r6, r4
 800bb7c:	461c      	mov	r4, r3
 800bb7e:	e7ad      	b.n	800badc <__mdiff+0x1c>
 800bb80:	4628      	mov	r0, r5
 800bb82:	4639      	mov	r1, r7
 800bb84:	f7ff fd6e 	bl	800b664 <_Balloc>
 800bb88:	2301      	movs	r3, #1
 800bb8a:	6147      	str	r7, [r0, #20]
 800bb8c:	6103      	str	r3, [r0, #16]
 800bb8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb92:	bf00      	nop

0800bb94 <__d2b>:
 800bb94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb98:	ec57 6b10 	vmov	r6, r7, d0
 800bb9c:	b083      	sub	sp, #12
 800bb9e:	4688      	mov	r8, r1
 800bba0:	2101      	movs	r1, #1
 800bba2:	463c      	mov	r4, r7
 800bba4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bba8:	4617      	mov	r7, r2
 800bbaa:	f7ff fd5b 	bl	800b664 <_Balloc>
 800bbae:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bbb2:	4681      	mov	r9, r0
 800bbb4:	b10d      	cbz	r5, 800bbba <__d2b+0x26>
 800bbb6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800bbba:	9401      	str	r4, [sp, #4]
 800bbbc:	b31e      	cbz	r6, 800bc06 <__d2b+0x72>
 800bbbe:	a802      	add	r0, sp, #8
 800bbc0:	f840 6d08 	str.w	r6, [r0, #-8]!
 800bbc4:	f7ff fde0 	bl	800b788 <__lo0bits>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d134      	bne.n	800bc36 <__d2b+0xa2>
 800bbcc:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800bbd0:	f8c9 2014 	str.w	r2, [r9, #20]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	bf14      	ite	ne
 800bbd8:	2402      	movne	r4, #2
 800bbda:	2401      	moveq	r4, #1
 800bbdc:	f8c9 3018 	str.w	r3, [r9, #24]
 800bbe0:	f8c9 4010 	str.w	r4, [r9, #16]
 800bbe4:	b9dd      	cbnz	r5, 800bc1e <__d2b+0x8a>
 800bbe6:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 800bbea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bbee:	f8c8 0000 	str.w	r0, [r8]
 800bbf2:	6918      	ldr	r0, [r3, #16]
 800bbf4:	f7ff fda8 	bl	800b748 <__hi0bits>
 800bbf8:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800bbfc:	6038      	str	r0, [r7, #0]
 800bbfe:	4648      	mov	r0, r9
 800bc00:	b003      	add	sp, #12
 800bc02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc06:	a801      	add	r0, sp, #4
 800bc08:	f7ff fdbe 	bl	800b788 <__lo0bits>
 800bc0c:	2401      	movs	r4, #1
 800bc0e:	9b01      	ldr	r3, [sp, #4]
 800bc10:	f8c9 3014 	str.w	r3, [r9, #20]
 800bc14:	3020      	adds	r0, #32
 800bc16:	f8c9 4010 	str.w	r4, [r9, #16]
 800bc1a:	2d00      	cmp	r5, #0
 800bc1c:	d0e3      	beq.n	800bbe6 <__d2b+0x52>
 800bc1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bc22:	4405      	add	r5, r0
 800bc24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc28:	f8c8 5000 	str.w	r5, [r8]
 800bc2c:	6038      	str	r0, [r7, #0]
 800bc2e:	4648      	mov	r0, r9
 800bc30:	b003      	add	sp, #12
 800bc32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc36:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800bc3a:	f1c0 0120 	rsb	r1, r0, #32
 800bc3e:	fa03 f101 	lsl.w	r1, r3, r1
 800bc42:	430a      	orrs	r2, r1
 800bc44:	40c3      	lsrs	r3, r0
 800bc46:	9301      	str	r3, [sp, #4]
 800bc48:	f8c9 2014 	str.w	r2, [r9, #20]
 800bc4c:	e7c2      	b.n	800bbd4 <__d2b+0x40>
 800bc4e:	bf00      	nop

0800bc50 <__fpclassifyd>:
 800bc50:	ec53 2b10 	vmov	r2, r3, d0
 800bc54:	b410      	push	{r4}
 800bc56:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
 800bc5a:	d008      	beq.n	800bc6e <__fpclassifyd+0x1e>
 800bc5c:	4911      	ldr	r1, [pc, #68]	; (800bca4 <__fpclassifyd+0x54>)
 800bc5e:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 800bc62:	4288      	cmp	r0, r1
 800bc64:	d808      	bhi.n	800bc78 <__fpclassifyd+0x28>
 800bc66:	2004      	movs	r0, #4
 800bc68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc6c:	4770      	bx	lr
 800bc6e:	b91a      	cbnz	r2, 800bc78 <__fpclassifyd+0x28>
 800bc70:	2002      	movs	r0, #2
 800bc72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc76:	4770      	bx	lr
 800bc78:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 800bc7c:	4909      	ldr	r1, [pc, #36]	; (800bca4 <__fpclassifyd+0x54>)
 800bc7e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bc82:	428b      	cmp	r3, r1
 800bc84:	d9ef      	bls.n	800bc66 <__fpclassifyd+0x16>
 800bc86:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bc8a:	d201      	bcs.n	800bc90 <__fpclassifyd+0x40>
 800bc8c:	2003      	movs	r0, #3
 800bc8e:	e7eb      	b.n	800bc68 <__fpclassifyd+0x18>
 800bc90:	4b05      	ldr	r3, [pc, #20]	; (800bca8 <__fpclassifyd+0x58>)
 800bc92:	429c      	cmp	r4, r3
 800bc94:	d001      	beq.n	800bc9a <__fpclassifyd+0x4a>
 800bc96:	2000      	movs	r0, #0
 800bc98:	e7e6      	b.n	800bc68 <__fpclassifyd+0x18>
 800bc9a:	fab2 f082 	clz	r0, r2
 800bc9e:	0940      	lsrs	r0, r0, #5
 800bca0:	e7e2      	b.n	800bc68 <__fpclassifyd+0x18>
 800bca2:	bf00      	nop
 800bca4:	7fdfffff 	.word	0x7fdfffff
 800bca8:	7ff00000 	.word	0x7ff00000

0800bcac <strlen>:
 800bcac:	f020 0103 	bic.w	r1, r0, #3
 800bcb0:	f010 0003 	ands.w	r0, r0, #3
 800bcb4:	f1c0 0000 	rsb	r0, r0, #0
 800bcb8:	f851 3b04 	ldr.w	r3, [r1], #4
 800bcbc:	f100 0c04 	add.w	ip, r0, #4
 800bcc0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800bcc4:	f06f 0200 	mvn.w	r2, #0
 800bcc8:	bf1c      	itt	ne
 800bcca:	fa22 f20c 	lsrne.w	r2, r2, ip
 800bcce:	4313      	orrne	r3, r2
 800bcd0:	f04f 0c01 	mov.w	ip, #1
 800bcd4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800bcd8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800bcdc:	eba3 020c 	sub.w	r2, r3, ip
 800bce0:	ea22 0203 	bic.w	r2, r2, r3
 800bce4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800bce8:	bf04      	itt	eq
 800bcea:	f851 3b04 	ldreq.w	r3, [r1], #4
 800bcee:	3004      	addeq	r0, #4
 800bcf0:	d0f4      	beq.n	800bcdc <strlen+0x30>
 800bcf2:	f1c2 0100 	rsb	r1, r2, #0
 800bcf6:	ea02 0201 	and.w	r2, r2, r1
 800bcfa:	fab2 f282 	clz	r2, r2
 800bcfe:	f1c2 021f 	rsb	r2, r2, #31
 800bd02:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800bd06:	4770      	bx	lr

0800bd08 <__ssprint_r>:
 800bd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0c:	6893      	ldr	r3, [r2, #8]
 800bd0e:	f8d2 8000 	ldr.w	r8, [r2]
 800bd12:	b083      	sub	sp, #12
 800bd14:	4691      	mov	r9, r2
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d072      	beq.n	800be00 <__ssprint_r+0xf8>
 800bd1a:	4607      	mov	r7, r0
 800bd1c:	f04f 0b00 	mov.w	fp, #0
 800bd20:	6808      	ldr	r0, [r1, #0]
 800bd22:	688b      	ldr	r3, [r1, #8]
 800bd24:	460d      	mov	r5, r1
 800bd26:	465c      	mov	r4, fp
 800bd28:	2c00      	cmp	r4, #0
 800bd2a:	d045      	beq.n	800bdb8 <__ssprint_r+0xb0>
 800bd2c:	429c      	cmp	r4, r3
 800bd2e:	461e      	mov	r6, r3
 800bd30:	469a      	mov	sl, r3
 800bd32:	d348      	bcc.n	800bdc6 <__ssprint_r+0xbe>
 800bd34:	89ab      	ldrh	r3, [r5, #12]
 800bd36:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800bd3a:	d02d      	beq.n	800bd98 <__ssprint_r+0x90>
 800bd3c:	696e      	ldr	r6, [r5, #20]
 800bd3e:	6929      	ldr	r1, [r5, #16]
 800bd40:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800bd44:	ebc1 0a00 	rsb	sl, r1, r0
 800bd48:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 800bd4c:	1c60      	adds	r0, r4, #1
 800bd4e:	1076      	asrs	r6, r6, #1
 800bd50:	4450      	add	r0, sl
 800bd52:	4286      	cmp	r6, r0
 800bd54:	4632      	mov	r2, r6
 800bd56:	bf3c      	itt	cc
 800bd58:	4606      	movcc	r6, r0
 800bd5a:	4632      	movcc	r2, r6
 800bd5c:	055b      	lsls	r3, r3, #21
 800bd5e:	d535      	bpl.n	800bdcc <__ssprint_r+0xc4>
 800bd60:	4611      	mov	r1, r2
 800bd62:	4638      	mov	r0, r7
 800bd64:	f7ff f99e 	bl	800b0a4 <_malloc_r>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d039      	beq.n	800bde0 <__ssprint_r+0xd8>
 800bd6c:	4652      	mov	r2, sl
 800bd6e:	6929      	ldr	r1, [r5, #16]
 800bd70:	9001      	str	r0, [sp, #4]
 800bd72:	f7f4 fae9 	bl	8000348 <memcpy>
 800bd76:	89aa      	ldrh	r2, [r5, #12]
 800bd78:	9b01      	ldr	r3, [sp, #4]
 800bd7a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800bd7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bd82:	81aa      	strh	r2, [r5, #12]
 800bd84:	ebca 0206 	rsb	r2, sl, r6
 800bd88:	eb03 000a 	add.w	r0, r3, sl
 800bd8c:	616e      	str	r6, [r5, #20]
 800bd8e:	612b      	str	r3, [r5, #16]
 800bd90:	6028      	str	r0, [r5, #0]
 800bd92:	60aa      	str	r2, [r5, #8]
 800bd94:	4626      	mov	r6, r4
 800bd96:	46a2      	mov	sl, r4
 800bd98:	4652      	mov	r2, sl
 800bd9a:	4659      	mov	r1, fp
 800bd9c:	f000 f98c 	bl	800c0b8 <memmove>
 800bda0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800bda4:	68ab      	ldr	r3, [r5, #8]
 800bda6:	6828      	ldr	r0, [r5, #0]
 800bda8:	1b9b      	subs	r3, r3, r6
 800bdaa:	4450      	add	r0, sl
 800bdac:	1b14      	subs	r4, r2, r4
 800bdae:	60ab      	str	r3, [r5, #8]
 800bdb0:	6028      	str	r0, [r5, #0]
 800bdb2:	f8c9 4008 	str.w	r4, [r9, #8]
 800bdb6:	b31c      	cbz	r4, 800be00 <__ssprint_r+0xf8>
 800bdb8:	f8d8 b000 	ldr.w	fp, [r8]
 800bdbc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800bdc0:	f108 0808 	add.w	r8, r8, #8
 800bdc4:	e7b0      	b.n	800bd28 <__ssprint_r+0x20>
 800bdc6:	4626      	mov	r6, r4
 800bdc8:	46a2      	mov	sl, r4
 800bdca:	e7e5      	b.n	800bd98 <__ssprint_r+0x90>
 800bdcc:	4638      	mov	r0, r7
 800bdce:	f000 f9d7 	bl	800c180 <_realloc_r>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d1d5      	bne.n	800bd84 <__ssprint_r+0x7c>
 800bdd8:	4638      	mov	r0, r7
 800bdda:	6929      	ldr	r1, [r5, #16]
 800bddc:	f000 f894 	bl	800bf08 <_free_r>
 800bde0:	230c      	movs	r3, #12
 800bde2:	603b      	str	r3, [r7, #0]
 800bde4:	89ab      	ldrh	r3, [r5, #12]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdf0:	81ab      	strh	r3, [r5, #12]
 800bdf2:	f8c9 2008 	str.w	r2, [r9, #8]
 800bdf6:	f8c9 2004 	str.w	r2, [r9, #4]
 800bdfa:	b003      	add	sp, #12
 800bdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be00:	2000      	movs	r0, #0
 800be02:	f8c9 0004 	str.w	r0, [r9, #4]
 800be06:	b003      	add	sp, #12
 800be08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be0c <_calloc_r>:
 800be0c:	b510      	push	{r4, lr}
 800be0e:	fb02 f101 	mul.w	r1, r2, r1
 800be12:	f7ff f947 	bl	800b0a4 <_malloc_r>
 800be16:	4604      	mov	r4, r0
 800be18:	b168      	cbz	r0, 800be36 <_calloc_r+0x2a>
 800be1a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800be1e:	f022 0203 	bic.w	r2, r2, #3
 800be22:	3a04      	subs	r2, #4
 800be24:	2a24      	cmp	r2, #36	; 0x24
 800be26:	d818      	bhi.n	800be5a <_calloc_r+0x4e>
 800be28:	2a13      	cmp	r2, #19
 800be2a:	d806      	bhi.n	800be3a <_calloc_r+0x2e>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2200      	movs	r2, #0
 800be30:	601a      	str	r2, [r3, #0]
 800be32:	605a      	str	r2, [r3, #4]
 800be34:	609a      	str	r2, [r3, #8]
 800be36:	4620      	mov	r0, r4
 800be38:	bd10      	pop	{r4, pc}
 800be3a:	2300      	movs	r3, #0
 800be3c:	2a1b      	cmp	r2, #27
 800be3e:	6003      	str	r3, [r0, #0]
 800be40:	6043      	str	r3, [r0, #4]
 800be42:	d90f      	bls.n	800be64 <_calloc_r+0x58>
 800be44:	2a24      	cmp	r2, #36	; 0x24
 800be46:	6083      	str	r3, [r0, #8]
 800be48:	60c3      	str	r3, [r0, #12]
 800be4a:	bf05      	ittet	eq
 800be4c:	6103      	streq	r3, [r0, #16]
 800be4e:	6143      	streq	r3, [r0, #20]
 800be50:	f100 0310 	addne.w	r3, r0, #16
 800be54:	f100 0318 	addeq.w	r3, r0, #24
 800be58:	e7e9      	b.n	800be2e <_calloc_r+0x22>
 800be5a:	2100      	movs	r1, #0
 800be5c:	f7fc fe38 	bl	8008ad0 <memset>
 800be60:	4620      	mov	r0, r4
 800be62:	bd10      	pop	{r4, pc}
 800be64:	f100 0308 	add.w	r3, r0, #8
 800be68:	e7e1      	b.n	800be2e <_calloc_r+0x22>
 800be6a:	bf00      	nop

0800be6c <_malloc_trim_r>:
 800be6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6e:	4f23      	ldr	r7, [pc, #140]	; (800befc <_malloc_trim_r+0x90>)
 800be70:	460c      	mov	r4, r1
 800be72:	4606      	mov	r6, r0
 800be74:	f7ff fbf2 	bl	800b65c <__malloc_lock>
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	685d      	ldr	r5, [r3, #4]
 800be7c:	f025 0503 	bic.w	r5, r5, #3
 800be80:	1b29      	subs	r1, r5, r4
 800be82:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 800be86:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800be8a:	f021 010f 	bic.w	r1, r1, #15
 800be8e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800be92:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800be96:	db07      	blt.n	800bea8 <_malloc_trim_r+0x3c>
 800be98:	4630      	mov	r0, r6
 800be9a:	2100      	movs	r1, #0
 800be9c:	f7fc fa90 	bl	80083c0 <_sbrk_r>
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	442b      	add	r3, r5
 800bea4:	4298      	cmp	r0, r3
 800bea6:	d004      	beq.n	800beb2 <_malloc_trim_r+0x46>
 800bea8:	4630      	mov	r0, r6
 800beaa:	f7ff fbd9 	bl	800b660 <__malloc_unlock>
 800beae:	2000      	movs	r0, #0
 800beb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beb2:	4630      	mov	r0, r6
 800beb4:	4261      	negs	r1, r4
 800beb6:	f7fc fa83 	bl	80083c0 <_sbrk_r>
 800beba:	3001      	adds	r0, #1
 800bebc:	d00d      	beq.n	800beda <_malloc_trim_r+0x6e>
 800bebe:	4b10      	ldr	r3, [pc, #64]	; (800bf00 <_malloc_trim_r+0x94>)
 800bec0:	68ba      	ldr	r2, [r7, #8]
 800bec2:	6819      	ldr	r1, [r3, #0]
 800bec4:	1b2d      	subs	r5, r5, r4
 800bec6:	f045 0501 	orr.w	r5, r5, #1
 800beca:	4630      	mov	r0, r6
 800becc:	1b09      	subs	r1, r1, r4
 800bece:	6055      	str	r5, [r2, #4]
 800bed0:	6019      	str	r1, [r3, #0]
 800bed2:	f7ff fbc5 	bl	800b660 <__malloc_unlock>
 800bed6:	2001      	movs	r0, #1
 800bed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beda:	4630      	mov	r0, r6
 800bedc:	2100      	movs	r1, #0
 800bede:	f7fc fa6f 	bl	80083c0 <_sbrk_r>
 800bee2:	68ba      	ldr	r2, [r7, #8]
 800bee4:	1a83      	subs	r3, r0, r2
 800bee6:	2b0f      	cmp	r3, #15
 800bee8:	ddde      	ble.n	800bea8 <_malloc_trim_r+0x3c>
 800beea:	4c06      	ldr	r4, [pc, #24]	; (800bf04 <_malloc_trim_r+0x98>)
 800beec:	4904      	ldr	r1, [pc, #16]	; (800bf00 <_malloc_trim_r+0x94>)
 800beee:	6824      	ldr	r4, [r4, #0]
 800bef0:	f043 0301 	orr.w	r3, r3, #1
 800bef4:	1b00      	subs	r0, r0, r4
 800bef6:	6053      	str	r3, [r2, #4]
 800bef8:	6008      	str	r0, [r1, #0]
 800befa:	e7d5      	b.n	800bea8 <_malloc_trim_r+0x3c>
 800befc:	20000d64 	.word	0x20000d64
 800bf00:	2000bb24 	.word	0x2000bb24
 800bf04:	20001170 	.word	0x20001170

0800bf08 <_free_r>:
 800bf08:	2900      	cmp	r1, #0
 800bf0a:	d04e      	beq.n	800bfaa <_free_r+0xa2>
 800bf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf10:	460c      	mov	r4, r1
 800bf12:	4680      	mov	r8, r0
 800bf14:	f7ff fba2 	bl	800b65c <__malloc_lock>
 800bf18:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800bf1c:	4962      	ldr	r1, [pc, #392]	; (800c0a8 <_free_r+0x1a0>)
 800bf1e:	f027 0201 	bic.w	r2, r7, #1
 800bf22:	f1a4 0508 	sub.w	r5, r4, #8
 800bf26:	18ab      	adds	r3, r5, r2
 800bf28:	688e      	ldr	r6, [r1, #8]
 800bf2a:	6858      	ldr	r0, [r3, #4]
 800bf2c:	429e      	cmp	r6, r3
 800bf2e:	f020 0003 	bic.w	r0, r0, #3
 800bf32:	d05a      	beq.n	800bfea <_free_r+0xe2>
 800bf34:	07fe      	lsls	r6, r7, #31
 800bf36:	6058      	str	r0, [r3, #4]
 800bf38:	d40b      	bmi.n	800bf52 <_free_r+0x4a>
 800bf3a:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800bf3e:	1bed      	subs	r5, r5, r7
 800bf40:	f101 0e08 	add.w	lr, r1, #8
 800bf44:	68ac      	ldr	r4, [r5, #8]
 800bf46:	4574      	cmp	r4, lr
 800bf48:	443a      	add	r2, r7
 800bf4a:	d067      	beq.n	800c01c <_free_r+0x114>
 800bf4c:	68ef      	ldr	r7, [r5, #12]
 800bf4e:	60e7      	str	r7, [r4, #12]
 800bf50:	60bc      	str	r4, [r7, #8]
 800bf52:	181c      	adds	r4, r3, r0
 800bf54:	6864      	ldr	r4, [r4, #4]
 800bf56:	07e4      	lsls	r4, r4, #31
 800bf58:	d40c      	bmi.n	800bf74 <_free_r+0x6c>
 800bf5a:	4f54      	ldr	r7, [pc, #336]	; (800c0ac <_free_r+0x1a4>)
 800bf5c:	689c      	ldr	r4, [r3, #8]
 800bf5e:	42bc      	cmp	r4, r7
 800bf60:	4402      	add	r2, r0
 800bf62:	d07c      	beq.n	800c05e <_free_r+0x156>
 800bf64:	68d8      	ldr	r0, [r3, #12]
 800bf66:	60e0      	str	r0, [r4, #12]
 800bf68:	f042 0301 	orr.w	r3, r2, #1
 800bf6c:	6084      	str	r4, [r0, #8]
 800bf6e:	606b      	str	r3, [r5, #4]
 800bf70:	50aa      	str	r2, [r5, r2]
 800bf72:	e003      	b.n	800bf7c <_free_r+0x74>
 800bf74:	f042 0301 	orr.w	r3, r2, #1
 800bf78:	606b      	str	r3, [r5, #4]
 800bf7a:	50aa      	str	r2, [r5, r2]
 800bf7c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800bf80:	d214      	bcs.n	800bfac <_free_r+0xa4>
 800bf82:	08d2      	lsrs	r2, r2, #3
 800bf84:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 800bf88:	6848      	ldr	r0, [r1, #4]
 800bf8a:	689f      	ldr	r7, [r3, #8]
 800bf8c:	60af      	str	r7, [r5, #8]
 800bf8e:	1092      	asrs	r2, r2, #2
 800bf90:	2401      	movs	r4, #1
 800bf92:	fa04 f202 	lsl.w	r2, r4, r2
 800bf96:	4310      	orrs	r0, r2
 800bf98:	60eb      	str	r3, [r5, #12]
 800bf9a:	6048      	str	r0, [r1, #4]
 800bf9c:	609d      	str	r5, [r3, #8]
 800bf9e:	60fd      	str	r5, [r7, #12]
 800bfa0:	4640      	mov	r0, r8
 800bfa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa6:	f7ff bb5b 	b.w	800b660 <__malloc_unlock>
 800bfaa:	4770      	bx	lr
 800bfac:	0a53      	lsrs	r3, r2, #9
 800bfae:	2b04      	cmp	r3, #4
 800bfb0:	d847      	bhi.n	800c042 <_free_r+0x13a>
 800bfb2:	0993      	lsrs	r3, r2, #6
 800bfb4:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800bfb8:	0060      	lsls	r0, r4, #1
 800bfba:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800bfbe:	493a      	ldr	r1, [pc, #232]	; (800c0a8 <_free_r+0x1a0>)
 800bfc0:	6883      	ldr	r3, [r0, #8]
 800bfc2:	4283      	cmp	r3, r0
 800bfc4:	d043      	beq.n	800c04e <_free_r+0x146>
 800bfc6:	6859      	ldr	r1, [r3, #4]
 800bfc8:	f021 0103 	bic.w	r1, r1, #3
 800bfcc:	4291      	cmp	r1, r2
 800bfce:	d902      	bls.n	800bfd6 <_free_r+0xce>
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	4298      	cmp	r0, r3
 800bfd4:	d1f7      	bne.n	800bfc6 <_free_r+0xbe>
 800bfd6:	68da      	ldr	r2, [r3, #12]
 800bfd8:	60ea      	str	r2, [r5, #12]
 800bfda:	60ab      	str	r3, [r5, #8]
 800bfdc:	4640      	mov	r0, r8
 800bfde:	6095      	str	r5, [r2, #8]
 800bfe0:	60dd      	str	r5, [r3, #12]
 800bfe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe6:	f7ff bb3b 	b.w	800b660 <__malloc_unlock>
 800bfea:	07ff      	lsls	r7, r7, #31
 800bfec:	4402      	add	r2, r0
 800bfee:	d407      	bmi.n	800c000 <_free_r+0xf8>
 800bff0:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800bff4:	1aed      	subs	r5, r5, r3
 800bff6:	441a      	add	r2, r3
 800bff8:	68a8      	ldr	r0, [r5, #8]
 800bffa:	68eb      	ldr	r3, [r5, #12]
 800bffc:	60c3      	str	r3, [r0, #12]
 800bffe:	6098      	str	r0, [r3, #8]
 800c000:	4b2b      	ldr	r3, [pc, #172]	; (800c0b0 <_free_r+0x1a8>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f042 0001 	orr.w	r0, r2, #1
 800c008:	429a      	cmp	r2, r3
 800c00a:	6068      	str	r0, [r5, #4]
 800c00c:	608d      	str	r5, [r1, #8]
 800c00e:	d3c7      	bcc.n	800bfa0 <_free_r+0x98>
 800c010:	4b28      	ldr	r3, [pc, #160]	; (800c0b4 <_free_r+0x1ac>)
 800c012:	4640      	mov	r0, r8
 800c014:	6819      	ldr	r1, [r3, #0]
 800c016:	f7ff ff29 	bl	800be6c <_malloc_trim_r>
 800c01a:	e7c1      	b.n	800bfa0 <_free_r+0x98>
 800c01c:	1819      	adds	r1, r3, r0
 800c01e:	6849      	ldr	r1, [r1, #4]
 800c020:	07c9      	lsls	r1, r1, #31
 800c022:	d409      	bmi.n	800c038 <_free_r+0x130>
 800c024:	68d9      	ldr	r1, [r3, #12]
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	4402      	add	r2, r0
 800c02a:	f042 0001 	orr.w	r0, r2, #1
 800c02e:	60d9      	str	r1, [r3, #12]
 800c030:	608b      	str	r3, [r1, #8]
 800c032:	6068      	str	r0, [r5, #4]
 800c034:	50aa      	str	r2, [r5, r2]
 800c036:	e7b3      	b.n	800bfa0 <_free_r+0x98>
 800c038:	f042 0301 	orr.w	r3, r2, #1
 800c03c:	606b      	str	r3, [r5, #4]
 800c03e:	50aa      	str	r2, [r5, r2]
 800c040:	e7ae      	b.n	800bfa0 <_free_r+0x98>
 800c042:	2b14      	cmp	r3, #20
 800c044:	d814      	bhi.n	800c070 <_free_r+0x168>
 800c046:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 800c04a:	0060      	lsls	r0, r4, #1
 800c04c:	e7b5      	b.n	800bfba <_free_r+0xb2>
 800c04e:	684a      	ldr	r2, [r1, #4]
 800c050:	10a4      	asrs	r4, r4, #2
 800c052:	2001      	movs	r0, #1
 800c054:	40a0      	lsls	r0, r4
 800c056:	4302      	orrs	r2, r0
 800c058:	604a      	str	r2, [r1, #4]
 800c05a:	461a      	mov	r2, r3
 800c05c:	e7bc      	b.n	800bfd8 <_free_r+0xd0>
 800c05e:	f042 0301 	orr.w	r3, r2, #1
 800c062:	614d      	str	r5, [r1, #20]
 800c064:	610d      	str	r5, [r1, #16]
 800c066:	60ec      	str	r4, [r5, #12]
 800c068:	60ac      	str	r4, [r5, #8]
 800c06a:	606b      	str	r3, [r5, #4]
 800c06c:	50aa      	str	r2, [r5, r2]
 800c06e:	e797      	b.n	800bfa0 <_free_r+0x98>
 800c070:	2b54      	cmp	r3, #84	; 0x54
 800c072:	d804      	bhi.n	800c07e <_free_r+0x176>
 800c074:	0b13      	lsrs	r3, r2, #12
 800c076:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 800c07a:	0060      	lsls	r0, r4, #1
 800c07c:	e79d      	b.n	800bfba <_free_r+0xb2>
 800c07e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800c082:	d804      	bhi.n	800c08e <_free_r+0x186>
 800c084:	0bd3      	lsrs	r3, r2, #15
 800c086:	f103 0477 	add.w	r4, r3, #119	; 0x77
 800c08a:	0060      	lsls	r0, r4, #1
 800c08c:	e795      	b.n	800bfba <_free_r+0xb2>
 800c08e:	f240 5054 	movw	r0, #1364	; 0x554
 800c092:	4283      	cmp	r3, r0
 800c094:	d804      	bhi.n	800c0a0 <_free_r+0x198>
 800c096:	0c93      	lsrs	r3, r2, #18
 800c098:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 800c09c:	0060      	lsls	r0, r4, #1
 800c09e:	e78c      	b.n	800bfba <_free_r+0xb2>
 800c0a0:	20fc      	movs	r0, #252	; 0xfc
 800c0a2:	247e      	movs	r4, #126	; 0x7e
 800c0a4:	e789      	b.n	800bfba <_free_r+0xb2>
 800c0a6:	bf00      	nop
 800c0a8:	20000d64 	.word	0x20000d64
 800c0ac:	20000d6c 	.word	0x20000d6c
 800c0b0:	2000116c 	.word	0x2000116c
 800c0b4:	2000bb20 	.word	0x2000bb20

0800c0b8 <memmove>:
 800c0b8:	4288      	cmp	r0, r1
 800c0ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0bc:	d90d      	bls.n	800c0da <memmove+0x22>
 800c0be:	188b      	adds	r3, r1, r2
 800c0c0:	4298      	cmp	r0, r3
 800c0c2:	d20a      	bcs.n	800c0da <memmove+0x22>
 800c0c4:	1881      	adds	r1, r0, r2
 800c0c6:	2a00      	cmp	r2, #0
 800c0c8:	d054      	beq.n	800c174 <memmove+0xbc>
 800c0ca:	1a9a      	subs	r2, r3, r2
 800c0cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d1f9      	bne.n	800c0cc <memmove+0x14>
 800c0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0da:	2a0f      	cmp	r2, #15
 800c0dc:	d948      	bls.n	800c170 <memmove+0xb8>
 800c0de:	ea40 0301 	orr.w	r3, r0, r1
 800c0e2:	079b      	lsls	r3, r3, #30
 800c0e4:	d147      	bne.n	800c176 <memmove+0xbe>
 800c0e6:	f100 0410 	add.w	r4, r0, #16
 800c0ea:	f101 0310 	add.w	r3, r1, #16
 800c0ee:	4615      	mov	r5, r2
 800c0f0:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800c0f4:	f844 6c10 	str.w	r6, [r4, #-16]
 800c0f8:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800c0fc:	f844 6c0c 	str.w	r6, [r4, #-12]
 800c100:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800c104:	f844 6c08 	str.w	r6, [r4, #-8]
 800c108:	3d10      	subs	r5, #16
 800c10a:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800c10e:	f844 6c04 	str.w	r6, [r4, #-4]
 800c112:	2d0f      	cmp	r5, #15
 800c114:	f103 0310 	add.w	r3, r3, #16
 800c118:	f104 0410 	add.w	r4, r4, #16
 800c11c:	d8e8      	bhi.n	800c0f0 <memmove+0x38>
 800c11e:	f1a2 0310 	sub.w	r3, r2, #16
 800c122:	f023 030f 	bic.w	r3, r3, #15
 800c126:	f002 0e0f 	and.w	lr, r2, #15
 800c12a:	3310      	adds	r3, #16
 800c12c:	f1be 0f03 	cmp.w	lr, #3
 800c130:	4419      	add	r1, r3
 800c132:	4403      	add	r3, r0
 800c134:	d921      	bls.n	800c17a <memmove+0xc2>
 800c136:	1f1e      	subs	r6, r3, #4
 800c138:	460d      	mov	r5, r1
 800c13a:	4674      	mov	r4, lr
 800c13c:	3c04      	subs	r4, #4
 800c13e:	f855 7b04 	ldr.w	r7, [r5], #4
 800c142:	f846 7f04 	str.w	r7, [r6, #4]!
 800c146:	2c03      	cmp	r4, #3
 800c148:	d8f8      	bhi.n	800c13c <memmove+0x84>
 800c14a:	f1ae 0404 	sub.w	r4, lr, #4
 800c14e:	f024 0403 	bic.w	r4, r4, #3
 800c152:	3404      	adds	r4, #4
 800c154:	4423      	add	r3, r4
 800c156:	4421      	add	r1, r4
 800c158:	f002 0203 	and.w	r2, r2, #3
 800c15c:	b152      	cbz	r2, 800c174 <memmove+0xbc>
 800c15e:	3b01      	subs	r3, #1
 800c160:	440a      	add	r2, r1
 800c162:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c166:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c16a:	4291      	cmp	r1, r2
 800c16c:	d1f9      	bne.n	800c162 <memmove+0xaa>
 800c16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c170:	4603      	mov	r3, r0
 800c172:	e7f3      	b.n	800c15c <memmove+0xa4>
 800c174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c176:	4603      	mov	r3, r0
 800c178:	e7f1      	b.n	800c15e <memmove+0xa6>
 800c17a:	4672      	mov	r2, lr
 800c17c:	e7ee      	b.n	800c15c <memmove+0xa4>
 800c17e:	bf00      	nop

0800c180 <_realloc_r>:
 800c180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c184:	4617      	mov	r7, r2
 800c186:	b083      	sub	sp, #12
 800c188:	460e      	mov	r6, r1
 800c18a:	2900      	cmp	r1, #0
 800c18c:	f000 80e7 	beq.w	800c35e <_realloc_r+0x1de>
 800c190:	4681      	mov	r9, r0
 800c192:	f107 050b 	add.w	r5, r7, #11
 800c196:	f7ff fa61 	bl	800b65c <__malloc_lock>
 800c19a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c19e:	2d16      	cmp	r5, #22
 800c1a0:	f023 0403 	bic.w	r4, r3, #3
 800c1a4:	f1a6 0808 	sub.w	r8, r6, #8
 800c1a8:	d84c      	bhi.n	800c244 <_realloc_r+0xc4>
 800c1aa:	2210      	movs	r2, #16
 800c1ac:	4615      	mov	r5, r2
 800c1ae:	42af      	cmp	r7, r5
 800c1b0:	d84d      	bhi.n	800c24e <_realloc_r+0xce>
 800c1b2:	4294      	cmp	r4, r2
 800c1b4:	f280 8084 	bge.w	800c2c0 <_realloc_r+0x140>
 800c1b8:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 800c568 <_realloc_r+0x3e8>
 800c1bc:	f8db 0008 	ldr.w	r0, [fp, #8]
 800c1c0:	eb08 0104 	add.w	r1, r8, r4
 800c1c4:	4288      	cmp	r0, r1
 800c1c6:	f000 80d6 	beq.w	800c376 <_realloc_r+0x1f6>
 800c1ca:	6848      	ldr	r0, [r1, #4]
 800c1cc:	f020 0e01 	bic.w	lr, r0, #1
 800c1d0:	448e      	add	lr, r1
 800c1d2:	f8de e004 	ldr.w	lr, [lr, #4]
 800c1d6:	f01e 0f01 	tst.w	lr, #1
 800c1da:	d13f      	bne.n	800c25c <_realloc_r+0xdc>
 800c1dc:	f020 0003 	bic.w	r0, r0, #3
 800c1e0:	4420      	add	r0, r4
 800c1e2:	4290      	cmp	r0, r2
 800c1e4:	f280 80c1 	bge.w	800c36a <_realloc_r+0x1ea>
 800c1e8:	07db      	lsls	r3, r3, #31
 800c1ea:	f100 808f 	bmi.w	800c30c <_realloc_r+0x18c>
 800c1ee:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800c1f2:	ebc3 0a08 	rsb	sl, r3, r8
 800c1f6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c1fa:	f023 0303 	bic.w	r3, r3, #3
 800c1fe:	eb00 0e03 	add.w	lr, r0, r3
 800c202:	4596      	cmp	lr, r2
 800c204:	db34      	blt.n	800c270 <_realloc_r+0xf0>
 800c206:	68cb      	ldr	r3, [r1, #12]
 800c208:	688a      	ldr	r2, [r1, #8]
 800c20a:	4657      	mov	r7, sl
 800c20c:	60d3      	str	r3, [r2, #12]
 800c20e:	609a      	str	r2, [r3, #8]
 800c210:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800c214:	f8da 300c 	ldr.w	r3, [sl, #12]
 800c218:	60cb      	str	r3, [r1, #12]
 800c21a:	1f22      	subs	r2, r4, #4
 800c21c:	2a24      	cmp	r2, #36	; 0x24
 800c21e:	6099      	str	r1, [r3, #8]
 800c220:	f200 8136 	bhi.w	800c490 <_realloc_r+0x310>
 800c224:	2a13      	cmp	r2, #19
 800c226:	f240 80fd 	bls.w	800c424 <_realloc_r+0x2a4>
 800c22a:	6833      	ldr	r3, [r6, #0]
 800c22c:	f8ca 3008 	str.w	r3, [sl, #8]
 800c230:	6873      	ldr	r3, [r6, #4]
 800c232:	f8ca 300c 	str.w	r3, [sl, #12]
 800c236:	2a1b      	cmp	r2, #27
 800c238:	f200 8140 	bhi.w	800c4bc <_realloc_r+0x33c>
 800c23c:	3608      	adds	r6, #8
 800c23e:	f10a 0310 	add.w	r3, sl, #16
 800c242:	e0f0      	b.n	800c426 <_realloc_r+0x2a6>
 800c244:	f025 0507 	bic.w	r5, r5, #7
 800c248:	2d00      	cmp	r5, #0
 800c24a:	462a      	mov	r2, r5
 800c24c:	daaf      	bge.n	800c1ae <_realloc_r+0x2e>
 800c24e:	230c      	movs	r3, #12
 800c250:	2000      	movs	r0, #0
 800c252:	f8c9 3000 	str.w	r3, [r9]
 800c256:	b003      	add	sp, #12
 800c258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c25c:	07d9      	lsls	r1, r3, #31
 800c25e:	d455      	bmi.n	800c30c <_realloc_r+0x18c>
 800c260:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800c264:	ebc3 0a08 	rsb	sl, r3, r8
 800c268:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c26c:	f023 0303 	bic.w	r3, r3, #3
 800c270:	4423      	add	r3, r4
 800c272:	4293      	cmp	r3, r2
 800c274:	db4a      	blt.n	800c30c <_realloc_r+0x18c>
 800c276:	4657      	mov	r7, sl
 800c278:	f8da 100c 	ldr.w	r1, [sl, #12]
 800c27c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800c280:	1f22      	subs	r2, r4, #4
 800c282:	2a24      	cmp	r2, #36	; 0x24
 800c284:	60c1      	str	r1, [r0, #12]
 800c286:	6088      	str	r0, [r1, #8]
 800c288:	f200 810e 	bhi.w	800c4a8 <_realloc_r+0x328>
 800c28c:	2a13      	cmp	r2, #19
 800c28e:	f240 8109 	bls.w	800c4a4 <_realloc_r+0x324>
 800c292:	6831      	ldr	r1, [r6, #0]
 800c294:	f8ca 1008 	str.w	r1, [sl, #8]
 800c298:	6871      	ldr	r1, [r6, #4]
 800c29a:	f8ca 100c 	str.w	r1, [sl, #12]
 800c29e:	2a1b      	cmp	r2, #27
 800c2a0:	f200 8121 	bhi.w	800c4e6 <_realloc_r+0x366>
 800c2a4:	3608      	adds	r6, #8
 800c2a6:	f10a 0210 	add.w	r2, sl, #16
 800c2aa:	6831      	ldr	r1, [r6, #0]
 800c2ac:	6011      	str	r1, [r2, #0]
 800c2ae:	6871      	ldr	r1, [r6, #4]
 800c2b0:	6051      	str	r1, [r2, #4]
 800c2b2:	68b1      	ldr	r1, [r6, #8]
 800c2b4:	6091      	str	r1, [r2, #8]
 800c2b6:	461c      	mov	r4, r3
 800c2b8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c2bc:	463e      	mov	r6, r7
 800c2be:	46d0      	mov	r8, sl
 800c2c0:	1b62      	subs	r2, r4, r5
 800c2c2:	2a0f      	cmp	r2, #15
 800c2c4:	f003 0301 	and.w	r3, r3, #1
 800c2c8:	d80e      	bhi.n	800c2e8 <_realloc_r+0x168>
 800c2ca:	4323      	orrs	r3, r4
 800c2cc:	4444      	add	r4, r8
 800c2ce:	f8c8 3004 	str.w	r3, [r8, #4]
 800c2d2:	6863      	ldr	r3, [r4, #4]
 800c2d4:	f043 0301 	orr.w	r3, r3, #1
 800c2d8:	6063      	str	r3, [r4, #4]
 800c2da:	4648      	mov	r0, r9
 800c2dc:	f7ff f9c0 	bl	800b660 <__malloc_unlock>
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	b003      	add	sp, #12
 800c2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e8:	eb08 0105 	add.w	r1, r8, r5
 800c2ec:	431d      	orrs	r5, r3
 800c2ee:	f042 0301 	orr.w	r3, r2, #1
 800c2f2:	440a      	add	r2, r1
 800c2f4:	f8c8 5004 	str.w	r5, [r8, #4]
 800c2f8:	604b      	str	r3, [r1, #4]
 800c2fa:	6853      	ldr	r3, [r2, #4]
 800c2fc:	f043 0301 	orr.w	r3, r3, #1
 800c300:	3108      	adds	r1, #8
 800c302:	6053      	str	r3, [r2, #4]
 800c304:	4648      	mov	r0, r9
 800c306:	f7ff fdff 	bl	800bf08 <_free_r>
 800c30a:	e7e6      	b.n	800c2da <_realloc_r+0x15a>
 800c30c:	4639      	mov	r1, r7
 800c30e:	4648      	mov	r0, r9
 800c310:	f7fe fec8 	bl	800b0a4 <_malloc_r>
 800c314:	4607      	mov	r7, r0
 800c316:	b1d8      	cbz	r0, 800c350 <_realloc_r+0x1d0>
 800c318:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c31c:	f023 0201 	bic.w	r2, r3, #1
 800c320:	4442      	add	r2, r8
 800c322:	f1a0 0108 	sub.w	r1, r0, #8
 800c326:	4291      	cmp	r1, r2
 800c328:	f000 80ac 	beq.w	800c484 <_realloc_r+0x304>
 800c32c:	1f22      	subs	r2, r4, #4
 800c32e:	2a24      	cmp	r2, #36	; 0x24
 800c330:	f200 8099 	bhi.w	800c466 <_realloc_r+0x2e6>
 800c334:	2a13      	cmp	r2, #19
 800c336:	d86a      	bhi.n	800c40e <_realloc_r+0x28e>
 800c338:	4603      	mov	r3, r0
 800c33a:	4632      	mov	r2, r6
 800c33c:	6811      	ldr	r1, [r2, #0]
 800c33e:	6019      	str	r1, [r3, #0]
 800c340:	6851      	ldr	r1, [r2, #4]
 800c342:	6059      	str	r1, [r3, #4]
 800c344:	6892      	ldr	r2, [r2, #8]
 800c346:	609a      	str	r2, [r3, #8]
 800c348:	4631      	mov	r1, r6
 800c34a:	4648      	mov	r0, r9
 800c34c:	f7ff fddc 	bl	800bf08 <_free_r>
 800c350:	4648      	mov	r0, r9
 800c352:	f7ff f985 	bl	800b660 <__malloc_unlock>
 800c356:	4638      	mov	r0, r7
 800c358:	b003      	add	sp, #12
 800c35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c35e:	4611      	mov	r1, r2
 800c360:	b003      	add	sp, #12
 800c362:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c366:	f7fe be9d 	b.w	800b0a4 <_malloc_r>
 800c36a:	68ca      	ldr	r2, [r1, #12]
 800c36c:	6889      	ldr	r1, [r1, #8]
 800c36e:	4604      	mov	r4, r0
 800c370:	60ca      	str	r2, [r1, #12]
 800c372:	6091      	str	r1, [r2, #8]
 800c374:	e7a4      	b.n	800c2c0 <_realloc_r+0x140>
 800c376:	6841      	ldr	r1, [r0, #4]
 800c378:	f021 0103 	bic.w	r1, r1, #3
 800c37c:	4421      	add	r1, r4
 800c37e:	f105 0010 	add.w	r0, r5, #16
 800c382:	4281      	cmp	r1, r0
 800c384:	da5b      	bge.n	800c43e <_realloc_r+0x2be>
 800c386:	07db      	lsls	r3, r3, #31
 800c388:	d4c0      	bmi.n	800c30c <_realloc_r+0x18c>
 800c38a:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800c38e:	ebc3 0a08 	rsb	sl, r3, r8
 800c392:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c396:	f023 0303 	bic.w	r3, r3, #3
 800c39a:	eb01 0c03 	add.w	ip, r1, r3
 800c39e:	4560      	cmp	r0, ip
 800c3a0:	f73f af66 	bgt.w	800c270 <_realloc_r+0xf0>
 800c3a4:	4657      	mov	r7, sl
 800c3a6:	f8da 300c 	ldr.w	r3, [sl, #12]
 800c3aa:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800c3ae:	1f22      	subs	r2, r4, #4
 800c3b0:	2a24      	cmp	r2, #36	; 0x24
 800c3b2:	60cb      	str	r3, [r1, #12]
 800c3b4:	6099      	str	r1, [r3, #8]
 800c3b6:	f200 80b8 	bhi.w	800c52a <_realloc_r+0x3aa>
 800c3ba:	2a13      	cmp	r2, #19
 800c3bc:	f240 80a9 	bls.w	800c512 <_realloc_r+0x392>
 800c3c0:	6833      	ldr	r3, [r6, #0]
 800c3c2:	f8ca 3008 	str.w	r3, [sl, #8]
 800c3c6:	6873      	ldr	r3, [r6, #4]
 800c3c8:	f8ca 300c 	str.w	r3, [sl, #12]
 800c3cc:	2a1b      	cmp	r2, #27
 800c3ce:	f200 80b5 	bhi.w	800c53c <_realloc_r+0x3bc>
 800c3d2:	3608      	adds	r6, #8
 800c3d4:	f10a 0310 	add.w	r3, sl, #16
 800c3d8:	6832      	ldr	r2, [r6, #0]
 800c3da:	601a      	str	r2, [r3, #0]
 800c3dc:	6872      	ldr	r2, [r6, #4]
 800c3de:	605a      	str	r2, [r3, #4]
 800c3e0:	68b2      	ldr	r2, [r6, #8]
 800c3e2:	609a      	str	r2, [r3, #8]
 800c3e4:	eb0a 0205 	add.w	r2, sl, r5
 800c3e8:	ebc5 030c 	rsb	r3, r5, ip
 800c3ec:	f043 0301 	orr.w	r3, r3, #1
 800c3f0:	f8cb 2008 	str.w	r2, [fp, #8]
 800c3f4:	6053      	str	r3, [r2, #4]
 800c3f6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	431d      	orrs	r5, r3
 800c400:	4648      	mov	r0, r9
 800c402:	f8ca 5004 	str.w	r5, [sl, #4]
 800c406:	f7ff f92b 	bl	800b660 <__malloc_unlock>
 800c40a:	4638      	mov	r0, r7
 800c40c:	e769      	b.n	800c2e2 <_realloc_r+0x162>
 800c40e:	6833      	ldr	r3, [r6, #0]
 800c410:	6003      	str	r3, [r0, #0]
 800c412:	6873      	ldr	r3, [r6, #4]
 800c414:	6043      	str	r3, [r0, #4]
 800c416:	2a1b      	cmp	r2, #27
 800c418:	d829      	bhi.n	800c46e <_realloc_r+0x2ee>
 800c41a:	f100 0308 	add.w	r3, r0, #8
 800c41e:	f106 0208 	add.w	r2, r6, #8
 800c422:	e78b      	b.n	800c33c <_realloc_r+0x1bc>
 800c424:	463b      	mov	r3, r7
 800c426:	6832      	ldr	r2, [r6, #0]
 800c428:	601a      	str	r2, [r3, #0]
 800c42a:	6872      	ldr	r2, [r6, #4]
 800c42c:	605a      	str	r2, [r3, #4]
 800c42e:	68b2      	ldr	r2, [r6, #8]
 800c430:	609a      	str	r2, [r3, #8]
 800c432:	463e      	mov	r6, r7
 800c434:	4674      	mov	r4, lr
 800c436:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c43a:	46d0      	mov	r8, sl
 800c43c:	e740      	b.n	800c2c0 <_realloc_r+0x140>
 800c43e:	eb08 0205 	add.w	r2, r8, r5
 800c442:	1b4b      	subs	r3, r1, r5
 800c444:	f043 0301 	orr.w	r3, r3, #1
 800c448:	f8cb 2008 	str.w	r2, [fp, #8]
 800c44c:	6053      	str	r3, [r2, #4]
 800c44e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c452:	f003 0301 	and.w	r3, r3, #1
 800c456:	431d      	orrs	r5, r3
 800c458:	4648      	mov	r0, r9
 800c45a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c45e:	f7ff f8ff 	bl	800b660 <__malloc_unlock>
 800c462:	4630      	mov	r0, r6
 800c464:	e73d      	b.n	800c2e2 <_realloc_r+0x162>
 800c466:	4631      	mov	r1, r6
 800c468:	f7ff fe26 	bl	800c0b8 <memmove>
 800c46c:	e76c      	b.n	800c348 <_realloc_r+0x1c8>
 800c46e:	68b3      	ldr	r3, [r6, #8]
 800c470:	6083      	str	r3, [r0, #8]
 800c472:	68f3      	ldr	r3, [r6, #12]
 800c474:	60c3      	str	r3, [r0, #12]
 800c476:	2a24      	cmp	r2, #36	; 0x24
 800c478:	d02c      	beq.n	800c4d4 <_realloc_r+0x354>
 800c47a:	f100 0310 	add.w	r3, r0, #16
 800c47e:	f106 0210 	add.w	r2, r6, #16
 800c482:	e75b      	b.n	800c33c <_realloc_r+0x1bc>
 800c484:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c488:	f022 0203 	bic.w	r2, r2, #3
 800c48c:	4414      	add	r4, r2
 800c48e:	e717      	b.n	800c2c0 <_realloc_r+0x140>
 800c490:	4631      	mov	r1, r6
 800c492:	4638      	mov	r0, r7
 800c494:	4674      	mov	r4, lr
 800c496:	463e      	mov	r6, r7
 800c498:	f7ff fe0e 	bl	800c0b8 <memmove>
 800c49c:	46d0      	mov	r8, sl
 800c49e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c4a2:	e70d      	b.n	800c2c0 <_realloc_r+0x140>
 800c4a4:	463a      	mov	r2, r7
 800c4a6:	e700      	b.n	800c2aa <_realloc_r+0x12a>
 800c4a8:	4631      	mov	r1, r6
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	461c      	mov	r4, r3
 800c4ae:	463e      	mov	r6, r7
 800c4b0:	f7ff fe02 	bl	800c0b8 <memmove>
 800c4b4:	46d0      	mov	r8, sl
 800c4b6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c4ba:	e701      	b.n	800c2c0 <_realloc_r+0x140>
 800c4bc:	68b3      	ldr	r3, [r6, #8]
 800c4be:	f8ca 3010 	str.w	r3, [sl, #16]
 800c4c2:	68f3      	ldr	r3, [r6, #12]
 800c4c4:	f8ca 3014 	str.w	r3, [sl, #20]
 800c4c8:	2a24      	cmp	r2, #36	; 0x24
 800c4ca:	d018      	beq.n	800c4fe <_realloc_r+0x37e>
 800c4cc:	3610      	adds	r6, #16
 800c4ce:	f10a 0318 	add.w	r3, sl, #24
 800c4d2:	e7a8      	b.n	800c426 <_realloc_r+0x2a6>
 800c4d4:	6933      	ldr	r3, [r6, #16]
 800c4d6:	6103      	str	r3, [r0, #16]
 800c4d8:	6973      	ldr	r3, [r6, #20]
 800c4da:	6143      	str	r3, [r0, #20]
 800c4dc:	f106 0218 	add.w	r2, r6, #24
 800c4e0:	f100 0318 	add.w	r3, r0, #24
 800c4e4:	e72a      	b.n	800c33c <_realloc_r+0x1bc>
 800c4e6:	68b1      	ldr	r1, [r6, #8]
 800c4e8:	f8ca 1010 	str.w	r1, [sl, #16]
 800c4ec:	68f1      	ldr	r1, [r6, #12]
 800c4ee:	f8ca 1014 	str.w	r1, [sl, #20]
 800c4f2:	2a24      	cmp	r2, #36	; 0x24
 800c4f4:	d00f      	beq.n	800c516 <_realloc_r+0x396>
 800c4f6:	3610      	adds	r6, #16
 800c4f8:	f10a 0218 	add.w	r2, sl, #24
 800c4fc:	e6d5      	b.n	800c2aa <_realloc_r+0x12a>
 800c4fe:	6933      	ldr	r3, [r6, #16]
 800c500:	f8ca 3018 	str.w	r3, [sl, #24]
 800c504:	6973      	ldr	r3, [r6, #20]
 800c506:	f8ca 301c 	str.w	r3, [sl, #28]
 800c50a:	3618      	adds	r6, #24
 800c50c:	f10a 0320 	add.w	r3, sl, #32
 800c510:	e789      	b.n	800c426 <_realloc_r+0x2a6>
 800c512:	463b      	mov	r3, r7
 800c514:	e760      	b.n	800c3d8 <_realloc_r+0x258>
 800c516:	6932      	ldr	r2, [r6, #16]
 800c518:	f8ca 2018 	str.w	r2, [sl, #24]
 800c51c:	6972      	ldr	r2, [r6, #20]
 800c51e:	f8ca 201c 	str.w	r2, [sl, #28]
 800c522:	3618      	adds	r6, #24
 800c524:	f10a 0220 	add.w	r2, sl, #32
 800c528:	e6bf      	b.n	800c2aa <_realloc_r+0x12a>
 800c52a:	4631      	mov	r1, r6
 800c52c:	4638      	mov	r0, r7
 800c52e:	f8cd c004 	str.w	ip, [sp, #4]
 800c532:	f7ff fdc1 	bl	800c0b8 <memmove>
 800c536:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c53a:	e753      	b.n	800c3e4 <_realloc_r+0x264>
 800c53c:	68b3      	ldr	r3, [r6, #8]
 800c53e:	f8ca 3010 	str.w	r3, [sl, #16]
 800c542:	68f3      	ldr	r3, [r6, #12]
 800c544:	f8ca 3014 	str.w	r3, [sl, #20]
 800c548:	2a24      	cmp	r2, #36	; 0x24
 800c54a:	d003      	beq.n	800c554 <_realloc_r+0x3d4>
 800c54c:	3610      	adds	r6, #16
 800c54e:	f10a 0318 	add.w	r3, sl, #24
 800c552:	e741      	b.n	800c3d8 <_realloc_r+0x258>
 800c554:	6933      	ldr	r3, [r6, #16]
 800c556:	f8ca 3018 	str.w	r3, [sl, #24]
 800c55a:	6973      	ldr	r3, [r6, #20]
 800c55c:	f8ca 301c 	str.w	r3, [sl, #28]
 800c560:	3618      	adds	r6, #24
 800c562:	f10a 0320 	add.w	r3, sl, #32
 800c566:	e737      	b.n	800c3d8 <_realloc_r+0x258>
 800c568:	20000d64 	.word	0x20000d64
